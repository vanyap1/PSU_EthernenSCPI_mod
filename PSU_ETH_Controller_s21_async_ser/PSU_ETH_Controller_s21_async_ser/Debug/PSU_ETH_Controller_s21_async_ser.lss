
PSU_ETH_Controller_s21_async_ser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00015d40  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00015d40  00015d40  00025d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a30  20000000  00015d48  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000eb0  20000a30  00016778  00030a30  2**2
                  ALLOC
  4 .stack        00002000  200018e0  00017628  00030a30  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a5a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00032c50  00000000  00000000  00030ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004e5a  00000000  00000000  00063703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017f7b  00000000  00000000  0006855d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000011f8  00000000  00000000  000804d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000012d0  00000000  00000000  000816d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000096d5  00000000  00000000  000829a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013d69  00000000  00000000  0008c075  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062dba  00000000  00000000  0009fdde  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004d28  00000000  00000000  00102b98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 38 00 20 09 01 00 00 05 01 00 00 05 01 00 00     .8. ............
	...
      2c:	05 01 00 00 00 00 00 00 00 00 00 00 05 01 00 00     ................
      3c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      4c:	ad 0f 00 00 91 0d 00 00 05 01 00 00 05 01 00 00     ................
      5c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      6c:	11 14 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      7c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      8c:	3d 1b 00 00 51 1b 00 00 05 01 00 00 05 01 00 00     =...Q...........
      9c:	05 01 00 00 05 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000a30 	.word	0x20000a30
      c4:	00000000 	.word	0x00000000
      c8:	00015d48 	.word	0x00015d48

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000a34 	.word	0x20000a34
      f8:	00015d48 	.word	0x00015d48
      fc:	00015d48 	.word	0x00015d48
     100:	00000000 	.word	0x00000000

00000104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     104:	e7fe      	b.n	104 <Dummy_Handler>
	...

00000108 <Reset_Handler>:
{
     108:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     10a:	4a12      	ldr	r2, [pc, #72]	; (154 <Reset_Handler+0x4c>)
     10c:	4b12      	ldr	r3, [pc, #72]	; (158 <Reset_Handler+0x50>)
     10e:	429a      	cmp	r2, r3
     110:	d009      	beq.n	126 <Reset_Handler+0x1e>
     112:	4b11      	ldr	r3, [pc, #68]	; (158 <Reset_Handler+0x50>)
     114:	4a0f      	ldr	r2, [pc, #60]	; (154 <Reset_Handler+0x4c>)
     116:	e003      	b.n	120 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     118:	6811      	ldr	r1, [r2, #0]
     11a:	6019      	str	r1, [r3, #0]
     11c:	3304      	adds	r3, #4
     11e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     120:	490e      	ldr	r1, [pc, #56]	; (15c <Reset_Handler+0x54>)
     122:	428b      	cmp	r3, r1
     124:	d3f8      	bcc.n	118 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     126:	4b0e      	ldr	r3, [pc, #56]	; (160 <Reset_Handler+0x58>)
     128:	e002      	b.n	130 <Reset_Handler+0x28>
                *pDest++ = 0;
     12a:	2200      	movs	r2, #0
     12c:	601a      	str	r2, [r3, #0]
     12e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a0c      	ldr	r2, [pc, #48]	; (164 <Reset_Handler+0x5c>)
     132:	4293      	cmp	r3, r2
     134:	d3f9      	bcc.n	12a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	4a0c      	ldr	r2, [pc, #48]	; (168 <Reset_Handler+0x60>)
     138:	21ff      	movs	r1, #255	; 0xff
     13a:	4b0c      	ldr	r3, [pc, #48]	; (16c <Reset_Handler+0x64>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     140:	4a0b      	ldr	r2, [pc, #44]	; (170 <Reset_Handler+0x68>)
     142:	6851      	ldr	r1, [r2, #4]
     144:	2380      	movs	r3, #128	; 0x80
     146:	430b      	orrs	r3, r1
     148:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     14a:	4b0a      	ldr	r3, [pc, #40]	; (174 <Reset_Handler+0x6c>)
     14c:	4798      	blx	r3
        main();
     14e:	4b0a      	ldr	r3, [pc, #40]	; (178 <Reset_Handler+0x70>)
     150:	4798      	blx	r3
     152:	e7fe      	b.n	152 <Reset_Handler+0x4a>
     154:	00015d48 	.word	0x00015d48
     158:	20000000 	.word	0x20000000
     15c:	20000a30 	.word	0x20000a30
     160:	20000a30 	.word	0x20000a30
     164:	200018e0 	.word	0x200018e0
     168:	e000ed00 	.word	0xe000ed00
     16c:	00000000 	.word	0x00000000
     170:	41004000 	.word	0x41004000
     174:	000087c1 	.word	0x000087c1
     178:	00005a59 	.word	0x00005a59

0000017c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     17c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     180:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     182:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     184:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     188:	4770      	bx	lr

0000018a <atomic_leave_critical>:
     18a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     18e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     190:	f383 8810 	msr	PRIMASK, r3
}
     194:	4770      	bx	lr
	...

00000198 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     198:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     19a:	4b04      	ldr	r3, [pc, #16]	; (1ac <delay_us+0x14>)
     19c:	681c      	ldr	r4, [r3, #0]
     19e:	4b04      	ldr	r3, [pc, #16]	; (1b0 <delay_us+0x18>)
     1a0:	4798      	blx	r3
     1a2:	0001      	movs	r1, r0
     1a4:	0020      	movs	r0, r4
     1a6:	4b03      	ldr	r3, [pc, #12]	; (1b4 <delay_us+0x1c>)
     1a8:	4798      	blx	r3
}
     1aa:	bd10      	pop	{r4, pc}
     1ac:	20000a4c 	.word	0x20000a4c
     1b0:	00000c41 	.word	0x00000c41
     1b4:	00000c75 	.word	0x00000c75

000001b8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     1b8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     1ba:	4b04      	ldr	r3, [pc, #16]	; (1cc <delay_ms+0x14>)
     1bc:	681c      	ldr	r4, [r3, #0]
     1be:	4b04      	ldr	r3, [pc, #16]	; (1d0 <delay_ms+0x18>)
     1c0:	4798      	blx	r3
     1c2:	0001      	movs	r1, r0
     1c4:	0020      	movs	r0, r4
     1c6:	4b03      	ldr	r3, [pc, #12]	; (1d4 <delay_ms+0x1c>)
     1c8:	4798      	blx	r3
}
     1ca:	bd10      	pop	{r4, pc}
     1cc:	20000a4c 	.word	0x20000a4c
     1d0:	00000c59 	.word	0x00000c59
     1d4:	00000c75 	.word	0x00000c75

000001d8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     1d8:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     1da:	2501      	movs	r5, #1
     1dc:	2400      	movs	r4, #0

	while (upper >= lower) {
     1de:	e007      	b.n	1f0 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     1e0:	4a0d      	ldr	r2, [pc, #52]	; (218 <process_ext_irq+0x40>)
     1e2:	58b3      	ldr	r3, [r6, r2]
     1e4:	2b00      	cmp	r3, #0
     1e6:	d000      	beq.n	1ea <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     1e8:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     1ea:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     1ec:	3a01      	subs	r2, #1
     1ee:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     1f0:	42ac      	cmp	r4, r5
     1f2:	d8fa      	bhi.n	1ea <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     1f4:	192b      	adds	r3, r5, r4
     1f6:	105b      	asrs	r3, r3, #1
     1f8:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     1fa:	2a00      	cmp	r2, #0
     1fc:	d1f5      	bne.n	1ea <process_ext_irq+0x12>
     1fe:	21ff      	movs	r1, #255	; 0xff
     200:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     202:	00de      	lsls	r6, r3, #3
     204:	4904      	ldr	r1, [pc, #16]	; (218 <process_ext_irq+0x40>)
     206:	1989      	adds	r1, r1, r6
     208:	6849      	ldr	r1, [r1, #4]
     20a:	4281      	cmp	r1, r0
     20c:	d0e8      	beq.n	1e0 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     20e:	d2ed      	bcs.n	1ec <process_ext_irq+0x14>
			lower = middle + 1;
     210:	3201      	adds	r2, #1
     212:	b2d4      	uxtb	r4, r2
     214:	e7ec      	b.n	1f0 <process_ext_irq+0x18>
     216:	46c0      	nop			; (mov r8, r8)
     218:	20000a50 	.word	0x20000a50

0000021c <ext_irq_init>:
{
     21c:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     21e:	2300      	movs	r3, #0
     220:	2b00      	cmp	r3, #0
     222:	d003      	beq.n	22c <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     224:	4807      	ldr	r0, [pc, #28]	; (244 <ext_irq_init+0x28>)
     226:	4b08      	ldr	r3, [pc, #32]	; (248 <ext_irq_init+0x2c>)
     228:	4798      	blx	r3
}
     22a:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     22c:	4a07      	ldr	r2, [pc, #28]	; (24c <ext_irq_init+0x30>)
     22e:	00d9      	lsls	r1, r3, #3
     230:	1850      	adds	r0, r2, r1
     232:	2401      	movs	r4, #1
     234:	4264      	negs	r4, r4
     236:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     238:	2000      	movs	r0, #0
     23a:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     23c:	3301      	adds	r3, #1
     23e:	b29b      	uxth	r3, r3
     240:	e7ee      	b.n	220 <ext_irq_init+0x4>
     242:	46c0      	nop			; (mov r8, r8)
     244:	000001d9 	.word	0x000001d9
     248:	00000cb5 	.word	0x00000cb5
     24c:	20000a50 	.word	0x20000a50

00000250 <ext_irq_register>:
{
     250:	b5f0      	push	{r4, r5, r6, r7, lr}
     252:	46c6      	mov	lr, r8
     254:	b500      	push	{lr}
     256:	b084      	sub	sp, #16
     258:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
     25a:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     25c:	2b00      	cmp	r3, #0
     25e:	d010      	beq.n	282 <ext_irq_register+0x32>
	bool    found = false;
     260:	2300      	movs	r3, #0
     262:	4698      	mov	r8, r3
	if (NULL == cb) {
     264:	2900      	cmp	r1, #0
     266:	d01b      	beq.n	2a0 <ext_irq_register+0x50>
	if (!found) {
     268:	4643      	mov	r3, r8
     26a:	2b00      	cmp	r3, #0
     26c:	d146      	bne.n	2fc <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     26e:	2b00      	cmp	r3, #0
     270:	d124      	bne.n	2bc <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
     272:	00da      	lsls	r2, r3, #3
     274:	4c2a      	ldr	r4, [pc, #168]	; (320 <ext_irq_register+0xd0>)
     276:	5912      	ldr	r2, [r2, r4]
     278:	2a00      	cmp	r2, #0
     27a:	d018      	beq.n	2ae <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     27c:	3301      	adds	r3, #1
     27e:	b2db      	uxtb	r3, r3
     280:	e7f5      	b.n	26e <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
     282:	00dc      	lsls	r4, r3, #3
     284:	4a26      	ldr	r2, [pc, #152]	; (320 <ext_irq_register+0xd0>)
     286:	1912      	adds	r2, r2, r4
     288:	6852      	ldr	r2, [r2, #4]
     28a:	9801      	ldr	r0, [sp, #4]
     28c:	4282      	cmp	r2, r0
     28e:	d002      	beq.n	296 <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     290:	3301      	adds	r3, #1
     292:	b2db      	uxtb	r3, r3
     294:	e7e2      	b.n	25c <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
     296:	4b22      	ldr	r3, [pc, #136]	; (320 <ext_irq_register+0xd0>)
     298:	50e1      	str	r1, [r4, r3]
			found          = true;
     29a:	2301      	movs	r3, #1
     29c:	4698      	mov	r8, r3
			break;
     29e:	e7e1      	b.n	264 <ext_irq_register+0x14>
		if (!found) {
     2a0:	4643      	mov	r3, r8
     2a2:	2b00      	cmp	r3, #0
     2a4:	d035      	beq.n	312 <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
     2a6:	9801      	ldr	r0, [sp, #4]
     2a8:	4b1e      	ldr	r3, [pc, #120]	; (324 <ext_irq_register+0xd4>)
     2aa:	4798      	blx	r3
     2ac:	e02d      	b.n	30a <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
     2ae:	00dd      	lsls	r5, r3, #3
     2b0:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
     2b2:	1965      	adds	r5, r4, r5
     2b4:	9a01      	ldr	r2, [sp, #4]
     2b6:	606a      	str	r2, [r5, #4]
				found           = true;
     2b8:	2201      	movs	r2, #1
     2ba:	4690      	mov	r8, r2
     2bc:	2200      	movs	r2, #0
     2be:	e001      	b.n	2c4 <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     2c0:	3201      	adds	r2, #1
     2c2:	b2d2      	uxtb	r2, r2
     2c4:	0019      	movs	r1, r3
     2c6:	4311      	orrs	r1, r2
     2c8:	d118      	bne.n	2fc <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     2ca:	4915      	ldr	r1, [pc, #84]	; (320 <ext_irq_register+0xd0>)
     2cc:	00dc      	lsls	r4, r3, #3
     2ce:	190c      	adds	r4, r1, r4
     2d0:	6867      	ldr	r7, [r4, #4]
     2d2:	00d4      	lsls	r4, r2, #3
     2d4:	1909      	adds	r1, r1, r4
     2d6:	6849      	ldr	r1, [r1, #4]
     2d8:	428f      	cmp	r7, r1
     2da:	d2f1      	bcs.n	2c0 <ext_irq_register+0x70>
     2dc:	1c4c      	adds	r4, r1, #1
     2de:	d0ef      	beq.n	2c0 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
     2e0:	a902      	add	r1, sp, #8
     2e2:	468c      	mov	ip, r1
     2e4:	4f0e      	ldr	r7, [pc, #56]	; (320 <ext_irq_register+0xd0>)
     2e6:	00d1      	lsls	r1, r2, #3
     2e8:	1879      	adds	r1, r7, r1
     2ea:	4664      	mov	r4, ip
     2ec:	c941      	ldmia	r1!, {r0, r6}
     2ee:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
     2f0:	00dd      	lsls	r5, r3, #3
     2f2:	197d      	adds	r5, r7, r5
     2f4:	4661      	mov	r1, ip
     2f6:	c911      	ldmia	r1!, {r0, r4}
     2f8:	c511      	stmia	r5!, {r0, r4}
     2fa:	e7e1      	b.n	2c0 <ext_irq_register+0x70>
	if (!found) {
     2fc:	4643      	mov	r3, r8
     2fe:	2b00      	cmp	r3, #0
     300:	d00a      	beq.n	318 <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
     302:	2101      	movs	r1, #1
     304:	9801      	ldr	r0, [sp, #4]
     306:	4b07      	ldr	r3, [pc, #28]	; (324 <ext_irq_register+0xd4>)
     308:	4798      	blx	r3
}
     30a:	b004      	add	sp, #16
     30c:	bc04      	pop	{r2}
     30e:	4690      	mov	r8, r2
     310:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     312:	200d      	movs	r0, #13
     314:	4240      	negs	r0, r0
     316:	e7f8      	b.n	30a <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
     318:	200d      	movs	r0, #13
     31a:	4240      	negs	r0, r0
     31c:	e7f5      	b.n	30a <ext_irq_register+0xba>
     31e:	46c0      	nop			; (mov r8, r8)
     320:	20000a50 	.word	0x20000a50
     324:	00000d45 	.word	0x00000d45

00000328 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     328:	b510      	push	{r4, lr}
     32a:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     32c:	3814      	subs	r0, #20
     32e:	8b84      	ldrh	r4, [r0, #28]
     330:	ab01      	add	r3, sp, #4
     332:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     334:	0014      	movs	r4, r2
     336:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     338:	4a06      	ldr	r2, [pc, #24]	; (354 <i2c_m_sync_write+0x2c>)
     33a:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     33c:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     33e:	0019      	movs	r1, r3
     340:	4b05      	ldr	r3, [pc, #20]	; (358 <i2c_m_sync_write+0x30>)
     342:	4798      	blx	r3

	if (ret) {
     344:	2800      	cmp	r0, #0
     346:	d102      	bne.n	34e <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     348:	0020      	movs	r0, r4
     34a:	b004      	add	sp, #16
     34c:	bd10      	pop	{r4, pc}
		return ret;
     34e:	0004      	movs	r4, r0
     350:	e7fa      	b.n	348 <i2c_m_sync_write+0x20>
     352:	46c0      	nop			; (mov r8, r8)
     354:	ffff8000 	.word	0xffff8000
     358:	00001549 	.word	0x00001549

0000035c <i2c_m_sync_read>:
{
     35c:	b510      	push	{r4, lr}
     35e:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     360:	3814      	subs	r0, #20
     362:	8b84      	ldrh	r4, [r0, #28]
     364:	ab01      	add	r3, sp, #4
     366:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     368:	0014      	movs	r4, r2
     36a:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     36c:	4a06      	ldr	r2, [pc, #24]	; (388 <i2c_m_sync_read+0x2c>)
     36e:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     370:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     372:	0019      	movs	r1, r3
     374:	4b05      	ldr	r3, [pc, #20]	; (38c <i2c_m_sync_read+0x30>)
     376:	4798      	blx	r3
	if (ret) {
     378:	2800      	cmp	r0, #0
     37a:	d102      	bne.n	382 <i2c_m_sync_read+0x26>
}
     37c:	0020      	movs	r0, r4
     37e:	b004      	add	sp, #16
     380:	bd10      	pop	{r4, pc}
		return ret;
     382:	0004      	movs	r4, r0
     384:	e7fa      	b.n	37c <i2c_m_sync_read+0x20>
     386:	46c0      	nop			; (mov r8, r8)
     388:	ffff8001 	.word	0xffff8001
     38c:	00001549 	.word	0x00001549

00000390 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     390:	b570      	push	{r4, r5, r6, lr}
     392:	0004      	movs	r4, r0
     394:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     396:	1e43      	subs	r3, r0, #1
     398:	4198      	sbcs	r0, r3
     39a:	b2c0      	uxtb	r0, r0
     39c:	225e      	movs	r2, #94	; 0x5e
     39e:	4907      	ldr	r1, [pc, #28]	; (3bc <i2c_m_sync_init+0x2c>)
     3a0:	4b07      	ldr	r3, [pc, #28]	; (3c0 <i2c_m_sync_init+0x30>)
     3a2:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     3a4:	0029      	movs	r1, r5
     3a6:	0020      	movs	r0, r4
     3a8:	4b06      	ldr	r3, [pc, #24]	; (3c4 <i2c_m_sync_init+0x34>)
     3aa:	4798      	blx	r3
	if (init_status) {
     3ac:	2800      	cmp	r0, #0
     3ae:	d103      	bne.n	3b8 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     3b0:	4b05      	ldr	r3, [pc, #20]	; (3c8 <i2c_m_sync_init+0x38>)
     3b2:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     3b4:	4b05      	ldr	r3, [pc, #20]	; (3cc <i2c_m_sync_init+0x3c>)
     3b6:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     3b8:	bd70      	pop	{r4, r5, r6, pc}
     3ba:	46c0      	nop			; (mov r8, r8)
     3bc:	00012630 	.word	0x00012630
     3c0:	00000aa1 	.word	0x00000aa1
     3c4:	00001425 	.word	0x00001425
     3c8:	0000035d 	.word	0x0000035d
     3cc:	00000329 	.word	0x00000329

000003d0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     3d0:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     3d2:	4b01      	ldr	r3, [pc, #4]	; (3d8 <i2c_m_sync_enable+0x8>)
     3d4:	4798      	blx	r3
}
     3d6:	bd10      	pop	{r4, pc}
     3d8:	000014d1 	.word	0x000014d1

000003dc <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     3dc:	0589      	lsls	r1, r1, #22
     3de:	0d89      	lsrs	r1, r1, #22
     3e0:	2380      	movs	r3, #128	; 0x80
     3e2:	00db      	lsls	r3, r3, #3
     3e4:	401a      	ands	r2, r3
     3e6:	430a      	orrs	r2, r1
     3e8:	8382      	strh	r2, [r0, #28]
}
     3ea:	0010      	movs	r0, r2
     3ec:	4770      	bx	lr

000003ee <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     3ee:	3014      	adds	r0, #20
     3f0:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     3f2:	2000      	movs	r0, #0
     3f4:	4770      	bx	lr
	...

000003f8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     3f8:	b570      	push	{r4, r5, r6, lr}
     3fa:	0004      	movs	r4, r0
     3fc:	000d      	movs	r5, r1
     3fe:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     400:	2800      	cmp	r0, #0
     402:	d00e      	beq.n	422 <io_write+0x2a>
     404:	2900      	cmp	r1, #0
     406:	d00a      	beq.n	41e <io_write+0x26>
     408:	2001      	movs	r0, #1
     40a:	2234      	movs	r2, #52	; 0x34
     40c:	4906      	ldr	r1, [pc, #24]	; (428 <io_write+0x30>)
     40e:	4b07      	ldr	r3, [pc, #28]	; (42c <io_write+0x34>)
     410:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     412:	6823      	ldr	r3, [r4, #0]
     414:	0032      	movs	r2, r6
     416:	0029      	movs	r1, r5
     418:	0020      	movs	r0, r4
     41a:	4798      	blx	r3
}
     41c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     41e:	2000      	movs	r0, #0
     420:	e7f3      	b.n	40a <io_write+0x12>
     422:	2000      	movs	r0, #0
     424:	e7f1      	b.n	40a <io_write+0x12>
     426:	46c0      	nop			; (mov r8, r8)
     428:	0001264c 	.word	0x0001264c
     42c:	00000aa1 	.word	0x00000aa1

00000430 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     430:	b570      	push	{r4, r5, r6, lr}
     432:	0004      	movs	r4, r0
     434:	000d      	movs	r5, r1
     436:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     438:	2800      	cmp	r0, #0
     43a:	d00e      	beq.n	45a <io_read+0x2a>
     43c:	2900      	cmp	r1, #0
     43e:	d00a      	beq.n	456 <io_read+0x26>
     440:	2001      	movs	r0, #1
     442:	223d      	movs	r2, #61	; 0x3d
     444:	4906      	ldr	r1, [pc, #24]	; (460 <io_read+0x30>)
     446:	4b07      	ldr	r3, [pc, #28]	; (464 <io_read+0x34>)
     448:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     44a:	6863      	ldr	r3, [r4, #4]
     44c:	0032      	movs	r2, r6
     44e:	0029      	movs	r1, r5
     450:	0020      	movs	r0, r4
     452:	4798      	blx	r3
}
     454:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     456:	2000      	movs	r0, #0
     458:	e7f3      	b.n	442 <io_read+0x12>
     45a:	2000      	movs	r0, #0
     45c:	e7f1      	b.n	442 <io_read+0x12>
     45e:	46c0      	nop			; (mov r8, r8)
     460:	0001264c 	.word	0x0001264c
     464:	00000aa1 	.word	0x00000aa1

00000468 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     468:	b570      	push	{r4, r5, r6, lr}
     46a:	0004      	movs	r4, r0
     46c:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     46e:	2800      	cmp	r0, #0
     470:	d017      	beq.n	4a2 <spi_m_sync_init+0x3a>
     472:	2900      	cmp	r1, #0
     474:	d013      	beq.n	49e <spi_m_sync_init+0x36>
     476:	2001      	movs	r0, #1
     478:	2240      	movs	r2, #64	; 0x40
     47a:	490b      	ldr	r1, [pc, #44]	; (4a8 <spi_m_sync_init+0x40>)
     47c:	4b0b      	ldr	r3, [pc, #44]	; (4ac <spi_m_sync_init+0x44>)
     47e:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     480:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     482:	1d20      	adds	r0, r4, #4
     484:	0029      	movs	r1, r5
     486:	4b0a      	ldr	r3, [pc, #40]	; (4b0 <spi_m_sync_init+0x48>)
     488:	4798      	blx	r3

	if (rc < 0) {
     48a:	2800      	cmp	r0, #0
     48c:	db06      	blt.n	49c <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     48e:	4b09      	ldr	r3, [pc, #36]	; (4b4 <spi_m_sync_init+0x4c>)
     490:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     492:	4b09      	ldr	r3, [pc, #36]	; (4b8 <spi_m_sync_init+0x50>)
     494:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     496:	4b09      	ldr	r3, [pc, #36]	; (4bc <spi_m_sync_init+0x54>)
     498:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     49a:	2000      	movs	r0, #0
}
     49c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     49e:	2000      	movs	r0, #0
     4a0:	e7ea      	b.n	478 <spi_m_sync_init+0x10>
     4a2:	2000      	movs	r0, #0
     4a4:	e7e8      	b.n	478 <spi_m_sync_init+0x10>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	00012660 	.word	0x00012660
     4ac:	00000aa1 	.word	0x00000aa1
     4b0:	00001765 	.word	0x00001765
     4b4:	ffff8000 	.word	0xffff8000
     4b8:	0000056d 	.word	0x0000056d
     4bc:	00000531 	.word	0x00000531

000004c0 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     4c0:	b510      	push	{r4, lr}
     4c2:	0004      	movs	r4, r0
	ASSERT(spi);
     4c4:	1e43      	subs	r3, r0, #1
     4c6:	4198      	sbcs	r0, r3
     4c8:	b2c0      	uxtb	r0, r0
     4ca:	2257      	movs	r2, #87	; 0x57
     4cc:	4903      	ldr	r1, [pc, #12]	; (4dc <spi_m_sync_enable+0x1c>)
     4ce:	4b04      	ldr	r3, [pc, #16]	; (4e0 <spi_m_sync_enable+0x20>)
     4d0:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     4d2:	1d20      	adds	r0, r4, #4
     4d4:	4b03      	ldr	r3, [pc, #12]	; (4e4 <spi_m_sync_enable+0x24>)
     4d6:	4798      	blx	r3
}
     4d8:	bd10      	pop	{r4, pc}
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	00012660 	.word	0x00012660
     4e0:	00000aa1 	.word	0x00000aa1
     4e4:	00001921 	.word	0x00001921

000004e8 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     4e8:	b530      	push	{r4, r5, lr}
     4ea:	b087      	sub	sp, #28
     4ec:	0004      	movs	r4, r0
     4ee:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     4f0:	2800      	cmp	r0, #0
     4f2:	d015      	beq.n	520 <spi_m_sync_transfer+0x38>
     4f4:	2900      	cmp	r1, #0
     4f6:	d011      	beq.n	51c <spi_m_sync_transfer+0x34>
     4f8:	2001      	movs	r0, #1
     4fa:	22b3      	movs	r2, #179	; 0xb3
     4fc:	4909      	ldr	r1, [pc, #36]	; (524 <spi_m_sync_transfer+0x3c>)
     4fe:	4b0a      	ldr	r3, [pc, #40]	; (528 <spi_m_sync_transfer+0x40>)
     500:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     502:	682b      	ldr	r3, [r5, #0]
     504:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     506:	686b      	ldr	r3, [r5, #4]
     508:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     50a:	68ab      	ldr	r3, [r5, #8]
     50c:	9301      	str	r3, [sp, #4]
     50e:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     510:	1d20      	adds	r0, r4, #4
     512:	a903      	add	r1, sp, #12
     514:	4b05      	ldr	r3, [pc, #20]	; (52c <spi_m_sync_transfer+0x44>)
     516:	4798      	blx	r3
}
     518:	b007      	add	sp, #28
     51a:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     51c:	2000      	movs	r0, #0
     51e:	e7ec      	b.n	4fa <spi_m_sync_transfer+0x12>
     520:	2000      	movs	r0, #0
     522:	e7ea      	b.n	4fa <spi_m_sync_transfer+0x12>
     524:	00012660 	.word	0x00012660
     528:	00000aa1 	.word	0x00000aa1
     52c:	00001959 	.word	0x00001959

00000530 <_spi_m_sync_io_write>:
{
     530:	b570      	push	{r4, r5, r6, lr}
     532:	b084      	sub	sp, #16
     534:	0004      	movs	r4, r0
     536:	000e      	movs	r6, r1
     538:	0015      	movs	r5, r2
	ASSERT(io);
     53a:	1e43      	subs	r3, r0, #1
     53c:	4198      	sbcs	r0, r3
     53e:	b2c0      	uxtb	r0, r0
     540:	22a3      	movs	r2, #163	; 0xa3
     542:	4907      	ldr	r1, [pc, #28]	; (560 <_spi_m_sync_io_write+0x30>)
     544:	4b07      	ldr	r3, [pc, #28]	; (564 <_spi_m_sync_io_write+0x34>)
     546:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     548:	0020      	movs	r0, r4
     54a:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     54c:	2300      	movs	r3, #0
     54e:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     550:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     552:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     554:	a901      	add	r1, sp, #4
     556:	4b04      	ldr	r3, [pc, #16]	; (568 <_spi_m_sync_io_write+0x38>)
     558:	4798      	blx	r3
}
     55a:	b004      	add	sp, #16
     55c:	bd70      	pop	{r4, r5, r6, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	00012660 	.word	0x00012660
     564:	00000aa1 	.word	0x00000aa1
     568:	000004e9 	.word	0x000004e9

0000056c <_spi_m_sync_io_read>:
{
     56c:	b570      	push	{r4, r5, r6, lr}
     56e:	b084      	sub	sp, #16
     570:	0004      	movs	r4, r0
     572:	000e      	movs	r6, r1
     574:	0015      	movs	r5, r2
	ASSERT(io);
     576:	1e43      	subs	r3, r0, #1
     578:	4198      	sbcs	r0, r3
     57a:	b2c0      	uxtb	r0, r0
     57c:	2287      	movs	r2, #135	; 0x87
     57e:	4907      	ldr	r1, [pc, #28]	; (59c <_spi_m_sync_io_read+0x30>)
     580:	4b07      	ldr	r3, [pc, #28]	; (5a0 <_spi_m_sync_io_read+0x34>)
     582:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     584:	0020      	movs	r0, r4
     586:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     588:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     58a:	2300      	movs	r3, #0
     58c:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     58e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     590:	a901      	add	r1, sp, #4
     592:	4b04      	ldr	r3, [pc, #16]	; (5a4 <_spi_m_sync_io_read+0x38>)
     594:	4798      	blx	r3
}
     596:	b004      	add	sp, #16
     598:	bd70      	pop	{r4, r5, r6, pc}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	00012660 	.word	0x00012660
     5a0:	00000aa1 	.word	0x00000aa1
     5a4:	000004e9 	.word	0x000004e9

000005a8 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     5a8:	b570      	push	{r4, r5, r6, lr}
     5aa:	0004      	movs	r4, r0
     5ac:	000d      	movs	r5, r1
	ASSERT(spi && io);
     5ae:	2800      	cmp	r0, #0
     5b0:	d00c      	beq.n	5cc <spi_m_sync_get_io_descriptor+0x24>
     5b2:	2900      	cmp	r1, #0
     5b4:	d008      	beq.n	5c8 <spi_m_sync_get_io_descriptor+0x20>
     5b6:	2001      	movs	r0, #1
     5b8:	22bd      	movs	r2, #189	; 0xbd
     5ba:	4905      	ldr	r1, [pc, #20]	; (5d0 <spi_m_sync_get_io_descriptor+0x28>)
     5bc:	4b05      	ldr	r3, [pc, #20]	; (5d4 <spi_m_sync_get_io_descriptor+0x2c>)
     5be:	4798      	blx	r3
	*io = &spi->io;
     5c0:	340c      	adds	r4, #12
     5c2:	602c      	str	r4, [r5, #0]
	return 0;
}
     5c4:	2000      	movs	r0, #0
     5c6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
     5c8:	2000      	movs	r0, #0
     5ca:	e7f5      	b.n	5b8 <spi_m_sync_get_io_descriptor+0x10>
     5cc:	2000      	movs	r0, #0
     5ce:	e7f3      	b.n	5b8 <spi_m_sync_get_io_descriptor+0x10>
     5d0:	00012660 	.word	0x00012660
     5d4:	00000aa1 	.word	0x00000aa1

000005d8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     5da:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     5dc:	2e00      	cmp	r6, #0
     5de:	d002      	beq.n	5e6 <timer_add_timer_task+0xe>
     5e0:	0033      	movs	r3, r6
     5e2:	2500      	movs	r5, #0
     5e4:	e00c      	b.n	600 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     5e6:	4b10      	ldr	r3, [pc, #64]	; (628 <timer_add_timer_task+0x50>)
     5e8:	4798      	blx	r3
		return;
     5ea:	e018      	b.n	61e <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     5ec:	689f      	ldr	r7, [r3, #8]
     5ee:	46bc      	mov	ip, r7
     5f0:	4464      	add	r4, ip
     5f2:	1aa4      	subs	r4, r4, r2
     5f4:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     5f6:	688f      	ldr	r7, [r1, #8]
     5f8:	42bc      	cmp	r4, r7
     5fa:	d20b      	bcs.n	614 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     5fc:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     5fe:	681b      	ldr	r3, [r3, #0]
     600:	2b00      	cmp	r3, #0
     602:	d007      	beq.n	614 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     604:	685c      	ldr	r4, [r3, #4]
     606:	4294      	cmp	r4, r2
     608:	d8f0      	bhi.n	5ec <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     60a:	1aa4      	subs	r4, r4, r2
     60c:	689f      	ldr	r7, [r3, #8]
     60e:	46bc      	mov	ip, r7
     610:	4464      	add	r4, ip
     612:	e7f0      	b.n	5f6 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     614:	42b3      	cmp	r3, r6
     616:	d003      	beq.n	620 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     618:	0028      	movs	r0, r5
     61a:	4b04      	ldr	r3, [pc, #16]	; (62c <timer_add_timer_task+0x54>)
     61c:	4798      	blx	r3
	}
}
     61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     620:	4b01      	ldr	r3, [pc, #4]	; (628 <timer_add_timer_task+0x50>)
     622:	4798      	blx	r3
     624:	e7fb      	b.n	61e <timer_add_timer_task+0x46>
     626:	46c0      	nop			; (mov r8, r8)
     628:	00000ac1 	.word	0x00000ac1
     62c:	00000aed 	.word	0x00000aed

00000630 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     632:	0005      	movs	r5, r0
     634:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     636:	6903      	ldr	r3, [r0, #16]
     638:	1c5e      	adds	r6, r3, #1
     63a:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     63c:	7e03      	ldrb	r3, [r0, #24]
     63e:	07db      	lsls	r3, r3, #31
     640:	d402      	bmi.n	648 <timer_process_counted+0x18>
     642:	7e03      	ldrb	r3, [r0, #24]
     644:	079b      	lsls	r3, r3, #30
     646:	d50a      	bpl.n	65e <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     648:	7e2b      	ldrb	r3, [r5, #24]
     64a:	2202      	movs	r2, #2
     64c:	4313      	orrs	r3, r2
     64e:	b2db      	uxtb	r3, r3
     650:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     654:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     656:	68e3      	ldr	r3, [r4, #12]
     658:	0020      	movs	r0, r4
     65a:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     65c:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     65e:	2c00      	cmp	r4, #0
     660:	d0f7      	beq.n	652 <timer_process_counted+0x22>
     662:	6863      	ldr	r3, [r4, #4]
     664:	1af3      	subs	r3, r6, r3
     666:	68a2      	ldr	r2, [r4, #8]
     668:	4293      	cmp	r3, r2
     66a:	d3f2      	bcc.n	652 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     66c:	002f      	movs	r7, r5
     66e:	3714      	adds	r7, #20
     670:	0038      	movs	r0, r7
     672:	4b06      	ldr	r3, [pc, #24]	; (68c <timer_process_counted+0x5c>)
     674:	4798      	blx	r3
		if (TIMER_TASK_REPEAT == tmp->mode) {
     676:	7c23      	ldrb	r3, [r4, #16]
     678:	2b01      	cmp	r3, #1
     67a:	d1eb      	bne.n	654 <timer_process_counted+0x24>
			tmp->time_label = time;
     67c:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     67e:	0032      	movs	r2, r6
     680:	0021      	movs	r1, r4
     682:	0038      	movs	r0, r7
     684:	4b02      	ldr	r3, [pc, #8]	; (690 <timer_process_counted+0x60>)
     686:	4798      	blx	r3
     688:	e7e4      	b.n	654 <timer_process_counted+0x24>
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	00000af5 	.word	0x00000af5
     690:	000005d9 	.word	0x000005d9

00000694 <timer_init>:
{
     694:	b570      	push	{r4, r5, r6, lr}
     696:	0004      	movs	r4, r0
     698:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     69a:	2800      	cmp	r0, #0
     69c:	d012      	beq.n	6c4 <timer_init+0x30>
     69e:	2900      	cmp	r1, #0
     6a0:	d00e      	beq.n	6c0 <timer_init+0x2c>
     6a2:	2001      	movs	r0, #1
     6a4:	223b      	movs	r2, #59	; 0x3b
     6a6:	4908      	ldr	r1, [pc, #32]	; (6c8 <timer_init+0x34>)
     6a8:	4b08      	ldr	r3, [pc, #32]	; (6cc <timer_init+0x38>)
     6aa:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     6ac:	0029      	movs	r1, r5
     6ae:	0020      	movs	r0, r4
     6b0:	4b07      	ldr	r3, [pc, #28]	; (6d0 <timer_init+0x3c>)
     6b2:	4798      	blx	r3
	descr->time                           = 0;
     6b4:	2300      	movs	r3, #0
     6b6:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     6b8:	4b06      	ldr	r3, [pc, #24]	; (6d4 <timer_init+0x40>)
     6ba:	6023      	str	r3, [r4, #0]
}
     6bc:	2000      	movs	r0, #0
     6be:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     6c0:	2000      	movs	r0, #0
     6c2:	e7ef      	b.n	6a4 <timer_init+0x10>
     6c4:	2000      	movs	r0, #0
     6c6:	e7ed      	b.n	6a4 <timer_init+0x10>
     6c8:	0001267c 	.word	0x0001267c
     6cc:	00000aa1 	.word	0x00000aa1
     6d0:	00000ee1 	.word	0x00000ee1
     6d4:	00000631 	.word	0x00000631

000006d8 <timer_start>:
{
     6d8:	b510      	push	{r4, lr}
     6da:	0004      	movs	r4, r0
	ASSERT(descr);
     6dc:	1e43      	subs	r3, r0, #1
     6de:	4198      	sbcs	r0, r3
     6e0:	b2c0      	uxtb	r0, r0
     6e2:	2253      	movs	r2, #83	; 0x53
     6e4:	4907      	ldr	r1, [pc, #28]	; (704 <timer_start+0x2c>)
     6e6:	4b08      	ldr	r3, [pc, #32]	; (708 <timer_start+0x30>)
     6e8:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     6ea:	0020      	movs	r0, r4
     6ec:	4b07      	ldr	r3, [pc, #28]	; (70c <timer_start+0x34>)
     6ee:	4798      	blx	r3
     6f0:	2800      	cmp	r0, #0
     6f2:	d104      	bne.n	6fe <timer_start+0x26>
	_timer_start(&descr->device);
     6f4:	0020      	movs	r0, r4
     6f6:	4b06      	ldr	r3, [pc, #24]	; (710 <timer_start+0x38>)
     6f8:	4798      	blx	r3
	return ERR_NONE;
     6fa:	2000      	movs	r0, #0
}
     6fc:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     6fe:	2011      	movs	r0, #17
     700:	4240      	negs	r0, r0
     702:	e7fb      	b.n	6fc <timer_start+0x24>
     704:	0001267c 	.word	0x0001267c
     708:	00000aa1 	.word	0x00000aa1
     70c:	00000f95 	.word	0x00000f95
     710:	00000f3d 	.word	0x00000f3d

00000714 <timer_add_task>:
{
     714:	b570      	push	{r4, r5, r6, lr}
     716:	b082      	sub	sp, #8
     718:	0004      	movs	r4, r0
     71a:	000d      	movs	r5, r1
	ASSERT(descr && task);
     71c:	2800      	cmp	r0, #0
     71e:	d026      	beq.n	76e <timer_add_task+0x5a>
     720:	2900      	cmp	r1, #0
     722:	d022      	beq.n	76a <timer_add_task+0x56>
     724:	2001      	movs	r0, #1
     726:	227a      	movs	r2, #122	; 0x7a
     728:	491f      	ldr	r1, [pc, #124]	; (7a8 <timer_add_task+0x94>)
     72a:	4b20      	ldr	r3, [pc, #128]	; (7ac <timer_add_task+0x98>)
     72c:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     72e:	7e23      	ldrb	r3, [r4, #24]
     730:	2201      	movs	r2, #1
     732:	4313      	orrs	r3, r2
     734:	b2db      	uxtb	r3, r3
     736:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     738:	0026      	movs	r6, r4
     73a:	3614      	adds	r6, #20
     73c:	0029      	movs	r1, r5
     73e:	0030      	movs	r0, r6
     740:	4b1b      	ldr	r3, [pc, #108]	; (7b0 <timer_add_task+0x9c>)
     742:	4798      	blx	r3
     744:	2800      	cmp	r0, #0
     746:	d114      	bne.n	772 <timer_add_task+0x5e>
	task->time_label = descr->time;
     748:	6923      	ldr	r3, [r4, #16]
     74a:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     74c:	6922      	ldr	r2, [r4, #16]
     74e:	0029      	movs	r1, r5
     750:	0030      	movs	r0, r6
     752:	4b18      	ldr	r3, [pc, #96]	; (7b4 <timer_add_task+0xa0>)
     754:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     756:	7e23      	ldrb	r3, [r4, #24]
     758:	2201      	movs	r2, #1
     75a:	4393      	bics	r3, r2
     75c:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     75e:	7e23      	ldrb	r3, [r4, #24]
     760:	079b      	lsls	r3, r3, #30
     762:	d412      	bmi.n	78a <timer_add_task+0x76>
	return ERR_NONE;
     764:	2000      	movs	r0, #0
}
     766:	b002      	add	sp, #8
     768:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     76a:	2000      	movs	r0, #0
     76c:	e7db      	b.n	726 <timer_add_task+0x12>
     76e:	2000      	movs	r0, #0
     770:	e7d9      	b.n	726 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     772:	7e23      	ldrb	r3, [r4, #24]
     774:	2201      	movs	r2, #1
     776:	4393      	bics	r3, r2
     778:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     77a:	327e      	adds	r2, #126	; 0x7e
     77c:	490a      	ldr	r1, [pc, #40]	; (7a8 <timer_add_task+0x94>)
     77e:	2000      	movs	r0, #0
     780:	4b0a      	ldr	r3, [pc, #40]	; (7ac <timer_add_task+0x98>)
     782:	4798      	blx	r3
		return ERR_ALREADY_INITIALIZED;
     784:	2012      	movs	r0, #18
     786:	4240      	negs	r0, r0
     788:	e7ed      	b.n	766 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     78a:	a801      	add	r0, sp, #4
     78c:	4b0a      	ldr	r3, [pc, #40]	; (7b8 <timer_add_task+0xa4>)
     78e:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     790:	7e23      	ldrb	r3, [r4, #24]
     792:	2202      	movs	r2, #2
     794:	4393      	bics	r3, r2
     796:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     798:	0020      	movs	r0, r4
     79a:	4b08      	ldr	r3, [pc, #32]	; (7bc <timer_add_task+0xa8>)
     79c:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     79e:	a801      	add	r0, sp, #4
     7a0:	4b07      	ldr	r3, [pc, #28]	; (7c0 <timer_add_task+0xac>)
     7a2:	4798      	blx	r3
	return ERR_NONE;
     7a4:	2000      	movs	r0, #0
     7a6:	e7de      	b.n	766 <timer_add_task+0x52>
     7a8:	0001267c 	.word	0x0001267c
     7ac:	00000aa1 	.word	0x00000aa1
     7b0:	00000aa9 	.word	0x00000aa9
     7b4:	000005d9 	.word	0x000005d9
     7b8:	0000017d 	.word	0x0000017d
     7bc:	00000fa7 	.word	0x00000fa7
     7c0:	0000018b 	.word	0x0000018b

000007c4 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     7c4:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7c6:	3808      	subs	r0, #8

	descr->stat = 0;
     7c8:	2300      	movs	r3, #0
     7ca:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     7cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
     7ce:	2b00      	cmp	r3, #0
     7d0:	d000      	beq.n	7d4 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     7d2:	4798      	blx	r3
	}
}
     7d4:	bd10      	pop	{r4, pc}

000007d6 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     7d6:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7d8:	3808      	subs	r0, #8

	descr->stat = 0;
     7da:	2300      	movs	r3, #0
     7dc:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     7de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     7e0:	2b00      	cmp	r3, #0
     7e2:	d000      	beq.n	7e6 <usart_error+0x10>
		descr->usart_cb.error(descr);
     7e4:	4798      	blx	r3
	}
}
     7e6:	bd10      	pop	{r4, pc}

000007e8 <usart_fill_rx_buffer>:
{
     7e8:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7ea:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     7ec:	302c      	adds	r0, #44	; 0x2c
     7ee:	4b04      	ldr	r3, [pc, #16]	; (800 <usart_fill_rx_buffer+0x18>)
     7f0:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     7f2:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     7f4:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     7f6:	2b00      	cmp	r3, #0
     7f8:	d001      	beq.n	7fe <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     7fa:	0020      	movs	r0, r4
     7fc:	4798      	blx	r3
}
     7fe:	bd10      	pop	{r4, pc}
     800:	00000ba1 	.word	0x00000ba1

00000804 <usart_async_write>:
{
     804:	b570      	push	{r4, r5, r6, lr}
     806:	0004      	movs	r4, r0
     808:	000e      	movs	r6, r1
     80a:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     80c:	2800      	cmp	r0, #0
     80e:	d01d      	beq.n	84c <usart_async_write+0x48>
     810:	2900      	cmp	r1, #0
     812:	d01d      	beq.n	850 <usart_async_write+0x4c>
     814:	2a00      	cmp	r2, #0
     816:	d11d      	bne.n	854 <usart_async_write+0x50>
     818:	2000      	movs	r0, #0
     81a:	223c      	movs	r2, #60	; 0x3c
     81c:	32ff      	adds	r2, #255	; 0xff
     81e:	4910      	ldr	r1, [pc, #64]	; (860 <usart_async_write+0x5c>)
     820:	4b10      	ldr	r3, [pc, #64]	; (864 <usart_async_write+0x60>)
     822:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     824:	2344      	movs	r3, #68	; 0x44
     826:	5ae2      	ldrh	r2, [r4, r3]
     828:	3308      	adds	r3, #8
     82a:	5ae3      	ldrh	r3, [r4, r3]
     82c:	429a      	cmp	r2, r3
     82e:	d113      	bne.n	858 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     830:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     832:	234c      	movs	r3, #76	; 0x4c
     834:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     836:	2200      	movs	r2, #0
     838:	3b08      	subs	r3, #8
     83a:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     83c:	3b43      	subs	r3, #67	; 0x43
     83e:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     840:	0020      	movs	r0, r4
     842:	3008      	adds	r0, #8
     844:	4b08      	ldr	r3, [pc, #32]	; (868 <usart_async_write+0x64>)
     846:	4798      	blx	r3
	return (int32_t)length;
     848:	0028      	movs	r0, r5
}
     84a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     84c:	2000      	movs	r0, #0
     84e:	e7e4      	b.n	81a <usart_async_write+0x16>
     850:	2000      	movs	r0, #0
     852:	e7e2      	b.n	81a <usart_async_write+0x16>
     854:	2001      	movs	r0, #1
     856:	e7e0      	b.n	81a <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     858:	201c      	movs	r0, #28
     85a:	4240      	negs	r0, r0
     85c:	e7f5      	b.n	84a <usart_async_write+0x46>
     85e:	46c0      	nop			; (mov r8, r8)
     860:	00012694 	.word	0x00012694
     864:	00000aa1 	.word	0x00000aa1
     868:	0000139f 	.word	0x0000139f

0000086c <usart_process_byte_sent>:
{
     86c:	b570      	push	{r4, r5, r6, lr}
     86e:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     870:	0002      	movs	r2, r0
     872:	3a08      	subs	r2, #8
     874:	2344      	movs	r3, #68	; 0x44
     876:	5ad3      	ldrh	r3, [r2, r3]
     878:	214c      	movs	r1, #76	; 0x4c
     87a:	5a52      	ldrh	r2, [r2, r1]
     87c:	4293      	cmp	r3, r2
     87e:	d00d      	beq.n	89c <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     880:	0002      	movs	r2, r0
     882:	6c01      	ldr	r1, [r0, #64]	; 0x40
     884:	3a08      	subs	r2, #8
     886:	1c5d      	adds	r5, r3, #1
     888:	2044      	movs	r0, #68	; 0x44
     88a:	5215      	strh	r5, [r2, r0]
     88c:	5cc9      	ldrb	r1, [r1, r3]
     88e:	0020      	movs	r0, r4
     890:	4b04      	ldr	r3, [pc, #16]	; (8a4 <usart_process_byte_sent+0x38>)
     892:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     894:	0020      	movs	r0, r4
     896:	4b04      	ldr	r3, [pc, #16]	; (8a8 <usart_process_byte_sent+0x3c>)
     898:	4798      	blx	r3
}
     89a:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     89c:	4b03      	ldr	r3, [pc, #12]	; (8ac <usart_process_byte_sent+0x40>)
     89e:	4798      	blx	r3
}
     8a0:	e7fb      	b.n	89a <usart_process_byte_sent+0x2e>
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	00001397 	.word	0x00001397
     8a8:	0000139f 	.word	0x0000139f
     8ac:	000013a7 	.word	0x000013a7

000008b0 <usart_async_read>:
{
     8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b2:	b085      	sub	sp, #20
     8b4:	0004      	movs	r4, r0
     8b6:	000d      	movs	r5, r1
     8b8:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     8ba:	2800      	cmp	r0, #0
     8bc:	d017      	beq.n	8ee <usart_async_read+0x3e>
     8be:	2900      	cmp	r1, #0
     8c0:	d017      	beq.n	8f2 <usart_async_read+0x42>
     8c2:	2a00      	cmp	r2, #0
     8c4:	d117      	bne.n	8f6 <usart_async_read+0x46>
     8c6:	2000      	movs	r0, #0
     8c8:	22ac      	movs	r2, #172	; 0xac
     8ca:	0052      	lsls	r2, r2, #1
     8cc:	4912      	ldr	r1, [pc, #72]	; (918 <usart_async_read+0x68>)
     8ce:	4b13      	ldr	r3, [pc, #76]	; (91c <usart_async_read+0x6c>)
     8d0:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     8d2:	a803      	add	r0, sp, #12
     8d4:	4b12      	ldr	r3, [pc, #72]	; (920 <usart_async_read+0x70>)
     8d6:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     8d8:	3434      	adds	r4, #52	; 0x34
     8da:	0020      	movs	r0, r4
     8dc:	9401      	str	r4, [sp, #4]
     8de:	4b11      	ldr	r3, [pc, #68]	; (924 <usart_async_read+0x74>)
     8e0:	4798      	blx	r3
     8e2:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     8e4:	a803      	add	r0, sp, #12
     8e6:	4b10      	ldr	r3, [pc, #64]	; (928 <usart_async_read+0x78>)
     8e8:	4798      	blx	r3
	uint16_t                       was_read = 0;
     8ea:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     8ec:	e00b      	b.n	906 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     8ee:	2000      	movs	r0, #0
     8f0:	e7ea      	b.n	8c8 <usart_async_read+0x18>
     8f2:	2000      	movs	r0, #0
     8f4:	e7e8      	b.n	8c8 <usart_async_read+0x18>
     8f6:	2001      	movs	r0, #1
     8f8:	e7e6      	b.n	8c8 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     8fa:	3401      	adds	r4, #1
     8fc:	b2a4      	uxth	r4, r4
     8fe:	1869      	adds	r1, r5, r1
     900:	9801      	ldr	r0, [sp, #4]
     902:	4b0a      	ldr	r3, [pc, #40]	; (92c <usart_async_read+0x7c>)
     904:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     906:	0021      	movs	r1, r4
     908:	42a7      	cmp	r7, r4
     90a:	d901      	bls.n	910 <usart_async_read+0x60>
     90c:	42b4      	cmp	r4, r6
     90e:	d3f4      	bcc.n	8fa <usart_async_read+0x4a>
}
     910:	0020      	movs	r0, r4
     912:	b005      	add	sp, #20
     914:	bdf0      	pop	{r4, r5, r6, r7, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	00012694 	.word	0x00012694
     91c:	00000aa1 	.word	0x00000aa1
     920:	0000017d 	.word	0x0000017d
     924:	00000be1 	.word	0x00000be1
     928:	0000018b 	.word	0x0000018b
     92c:	00000b55 	.word	0x00000b55

00000930 <usart_async_init>:
{
     930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     932:	0004      	movs	r4, r0
     934:	000d      	movs	r5, r1
     936:	0016      	movs	r6, r2
     938:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     93a:	2800      	cmp	r0, #0
     93c:	d026      	beq.n	98c <usart_async_init+0x5c>
     93e:	2900      	cmp	r1, #0
     940:	d026      	beq.n	990 <usart_async_init+0x60>
     942:	2a00      	cmp	r2, #0
     944:	d026      	beq.n	994 <usart_async_init+0x64>
     946:	2b00      	cmp	r3, #0
     948:	d126      	bne.n	998 <usart_async_init+0x68>
     94a:	2000      	movs	r0, #0
     94c:	223a      	movs	r2, #58	; 0x3a
     94e:	4915      	ldr	r1, [pc, #84]	; (9a4 <usart_async_init+0x74>)
     950:	4b15      	ldr	r3, [pc, #84]	; (9a8 <usart_async_init+0x78>)
     952:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     954:	0020      	movs	r0, r4
     956:	3034      	adds	r0, #52	; 0x34
     958:	003a      	movs	r2, r7
     95a:	0031      	movs	r1, r6
     95c:	4b13      	ldr	r3, [pc, #76]	; (9ac <usart_async_init+0x7c>)
     95e:	4798      	blx	r3
     960:	2800      	cmp	r0, #0
     962:	d11b      	bne.n	99c <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     964:	0020      	movs	r0, r4
     966:	3008      	adds	r0, #8
     968:	0029      	movs	r1, r5
     96a:	4b11      	ldr	r3, [pc, #68]	; (9b0 <usart_async_init+0x80>)
     96c:	4798      	blx	r3
	if (init_status) {
     96e:	2800      	cmp	r0, #0
     970:	d10b      	bne.n	98a <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     972:	4b10      	ldr	r3, [pc, #64]	; (9b4 <usart_async_init+0x84>)
     974:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     976:	4b10      	ldr	r3, [pc, #64]	; (9b8 <usart_async_init+0x88>)
     978:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     97a:	4b10      	ldr	r3, [pc, #64]	; (9bc <usart_async_init+0x8c>)
     97c:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     97e:	4b10      	ldr	r3, [pc, #64]	; (9c0 <usart_async_init+0x90>)
     980:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     982:	4b10      	ldr	r3, [pc, #64]	; (9c4 <usart_async_init+0x94>)
     984:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     986:	4b10      	ldr	r3, [pc, #64]	; (9c8 <usart_async_init+0x98>)
     988:	6163      	str	r3, [r4, #20]
}
     98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     98c:	2000      	movs	r0, #0
     98e:	e7dd      	b.n	94c <usart_async_init+0x1c>
     990:	2000      	movs	r0, #0
     992:	e7db      	b.n	94c <usart_async_init+0x1c>
     994:	2000      	movs	r0, #0
     996:	e7d9      	b.n	94c <usart_async_init+0x1c>
     998:	2001      	movs	r0, #1
     99a:	e7d7      	b.n	94c <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     99c:	200d      	movs	r0, #13
     99e:	4240      	negs	r0, r0
     9a0:	e7f3      	b.n	98a <usart_async_init+0x5a>
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	00012694 	.word	0x00012694
     9a8:	00000aa1 	.word	0x00000aa1
     9ac:	00000b09 	.word	0x00000b09
     9b0:	000012f9 	.word	0x000012f9
     9b4:	000008b1 	.word	0x000008b1
     9b8:	00000805 	.word	0x00000805
     9bc:	0000086d 	.word	0x0000086d
     9c0:	000007e9 	.word	0x000007e9
     9c4:	000007c5 	.word	0x000007c5
     9c8:	000007d7 	.word	0x000007d7

000009cc <usart_async_enable>:
{
     9cc:	b510      	push	{r4, lr}
     9ce:	0004      	movs	r4, r0
	ASSERT(descr);
     9d0:	1e43      	subs	r3, r0, #1
     9d2:	4198      	sbcs	r0, r3
     9d4:	b2c0      	uxtb	r0, r0
     9d6:	2261      	movs	r2, #97	; 0x61
     9d8:	4904      	ldr	r1, [pc, #16]	; (9ec <usart_async_enable+0x20>)
     9da:	4b05      	ldr	r3, [pc, #20]	; (9f0 <usart_async_enable+0x24>)
     9dc:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     9de:	0020      	movs	r0, r4
     9e0:	3008      	adds	r0, #8
     9e2:	4b04      	ldr	r3, [pc, #16]	; (9f4 <usart_async_enable+0x28>)
     9e4:	4798      	blx	r3
}
     9e6:	2000      	movs	r0, #0
     9e8:	bd10      	pop	{r4, pc}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	00012694 	.word	0x00012694
     9f0:	00000aa1 	.word	0x00000aa1
     9f4:	00001385 	.word	0x00001385

000009f8 <usart_async_get_io_descriptor>:
{
     9f8:	b570      	push	{r4, r5, r6, lr}
     9fa:	0004      	movs	r4, r0
     9fc:	000d      	movs	r5, r1
	ASSERT(descr && io);
     9fe:	2800      	cmp	r0, #0
     a00:	d00b      	beq.n	a1a <usart_async_get_io_descriptor+0x22>
     a02:	2900      	cmp	r1, #0
     a04:	d007      	beq.n	a16 <usart_async_get_io_descriptor+0x1e>
     a06:	2001      	movs	r0, #1
     a08:	2277      	movs	r2, #119	; 0x77
     a0a:	4905      	ldr	r1, [pc, #20]	; (a20 <usart_async_get_io_descriptor+0x28>)
     a0c:	4b05      	ldr	r3, [pc, #20]	; (a24 <usart_async_get_io_descriptor+0x2c>)
     a0e:	4798      	blx	r3
	*io = &descr->io;
     a10:	602c      	str	r4, [r5, #0]
}
     a12:	2000      	movs	r0, #0
     a14:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     a16:	2000      	movs	r0, #0
     a18:	e7f6      	b.n	a08 <usart_async_get_io_descriptor+0x10>
     a1a:	2000      	movs	r0, #0
     a1c:	e7f4      	b.n	a08 <usart_async_get_io_descriptor+0x10>
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00012694 	.word	0x00012694
     a24:	00000aa1 	.word	0x00000aa1

00000a28 <usart_async_register_callback>:
{
     a28:	b570      	push	{r4, r5, r6, lr}
     a2a:	0005      	movs	r5, r0
     a2c:	000e      	movs	r6, r1
     a2e:	0014      	movs	r4, r2
	ASSERT(descr);
     a30:	1e43      	subs	r3, r0, #1
     a32:	4198      	sbcs	r0, r3
     a34:	b2c0      	uxtb	r0, r0
     a36:	2283      	movs	r2, #131	; 0x83
     a38:	4916      	ldr	r1, [pc, #88]	; (a94 <usart_async_register_callback+0x6c>)
     a3a:	4b17      	ldr	r3, [pc, #92]	; (a98 <usart_async_register_callback+0x70>)
     a3c:	4798      	blx	r3
	switch (type) {
     a3e:	2e01      	cmp	r6, #1
     a40:	d011      	beq.n	a66 <usart_async_register_callback+0x3e>
     a42:	2e00      	cmp	r6, #0
     a44:	d004      	beq.n	a50 <usart_async_register_callback+0x28>
     a46:	2e02      	cmp	r6, #2
     a48:	d018      	beq.n	a7c <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     a4a:	200d      	movs	r0, #13
     a4c:	4240      	negs	r0, r0
     a4e:	e009      	b.n	a64 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     a50:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     a52:	1e62      	subs	r2, r4, #1
     a54:	4194      	sbcs	r4, r2
     a56:	b2e2      	uxtb	r2, r4
     a58:	0028      	movs	r0, r5
     a5a:	3008      	adds	r0, #8
     a5c:	2101      	movs	r1, #1
     a5e:	4b0f      	ldr	r3, [pc, #60]	; (a9c <usart_async_register_callback+0x74>)
     a60:	4798      	blx	r3
	return ERR_NONE;
     a62:	2000      	movs	r0, #0
}
     a64:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     a66:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     a68:	1e62      	subs	r2, r4, #1
     a6a:	4194      	sbcs	r4, r2
     a6c:	b2e2      	uxtb	r2, r4
     a6e:	0028      	movs	r0, r5
     a70:	3008      	adds	r0, #8
     a72:	2102      	movs	r1, #2
     a74:	4b09      	ldr	r3, [pc, #36]	; (a9c <usart_async_register_callback+0x74>)
     a76:	4798      	blx	r3
	return ERR_NONE;
     a78:	2000      	movs	r0, #0
		break;
     a7a:	e7f3      	b.n	a64 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     a7c:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     a7e:	1e62      	subs	r2, r4, #1
     a80:	4194      	sbcs	r4, r2
     a82:	b2e2      	uxtb	r2, r4
     a84:	0028      	movs	r0, r5
     a86:	3008      	adds	r0, #8
     a88:	2103      	movs	r1, #3
     a8a:	4b04      	ldr	r3, [pc, #16]	; (a9c <usart_async_register_callback+0x74>)
     a8c:	4798      	blx	r3
	return ERR_NONE;
     a8e:	2000      	movs	r0, #0
		break;
     a90:	e7e8      	b.n	a64 <usart_async_register_callback+0x3c>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	00012694 	.word	0x00012694
     a98:	00000aa1 	.word	0x00000aa1
     a9c:	000013b1 	.word	0x000013b1

00000aa0 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     aa0:	2800      	cmp	r0, #0
     aa2:	d100      	bne.n	aa6 <assert+0x6>
		__asm("BKPT #0");
     aa4:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     aa6:	4770      	bx	lr

00000aa8 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     aa8:	6803      	ldr	r3, [r0, #0]
     aaa:	2b00      	cmp	r3, #0
     aac:	d003      	beq.n	ab6 <is_list_element+0xe>
		if (it == element) {
     aae:	428b      	cmp	r3, r1
     ab0:	d003      	beq.n	aba <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     ab2:	681b      	ldr	r3, [r3, #0]
     ab4:	e7f9      	b.n	aaa <is_list_element+0x2>
			return true;
		}
	}

	return false;
     ab6:	2000      	movs	r0, #0
}
     ab8:	4770      	bx	lr
			return true;
     aba:	2001      	movs	r0, #1
     abc:	e7fc      	b.n	ab8 <is_list_element+0x10>
	...

00000ac0 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     ac0:	b570      	push	{r4, r5, r6, lr}
     ac2:	0004      	movs	r4, r0
     ac4:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     ac6:	4b06      	ldr	r3, [pc, #24]	; (ae0 <list_insert_as_head+0x20>)
     ac8:	4798      	blx	r3
     aca:	2301      	movs	r3, #1
     acc:	4058      	eors	r0, r3
     ace:	b2c0      	uxtb	r0, r0
     ad0:	2239      	movs	r2, #57	; 0x39
     ad2:	4904      	ldr	r1, [pc, #16]	; (ae4 <list_insert_as_head+0x24>)
     ad4:	4b04      	ldr	r3, [pc, #16]	; (ae8 <list_insert_as_head+0x28>)
     ad6:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     ad8:	6823      	ldr	r3, [r4, #0]
     ada:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     adc:	6025      	str	r5, [r4, #0]
}
     ade:	bd70      	pop	{r4, r5, r6, pc}
     ae0:	00000aa9 	.word	0x00000aa9
     ae4:	000126b4 	.word	0x000126b4
     ae8:	00000aa1 	.word	0x00000aa1

00000aec <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     aec:	6803      	ldr	r3, [r0, #0]
     aee:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     af0:	6001      	str	r1, [r0, #0]
}
     af2:	4770      	bx	lr

00000af4 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     af4:	6803      	ldr	r3, [r0, #0]
     af6:	2b00      	cmp	r3, #0
     af8:	d003      	beq.n	b02 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     afa:	681a      	ldr	r2, [r3, #0]
     afc:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     afe:	0018      	movs	r0, r3
	}

	return NULL;
}
     b00:	4770      	bx	lr
	return NULL;
     b02:	2000      	movs	r0, #0
     b04:	e7fc      	b.n	b00 <list_remove_head+0xc>
	...

00000b08 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     b08:	b570      	push	{r4, r5, r6, lr}
     b0a:	0004      	movs	r4, r0
     b0c:	000e      	movs	r6, r1
     b0e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     b10:	2800      	cmp	r0, #0
     b12:	d012      	beq.n	b3a <ringbuffer_init+0x32>
     b14:	2900      	cmp	r1, #0
     b16:	d012      	beq.n	b3e <ringbuffer_init+0x36>
     b18:	2a00      	cmp	r2, #0
     b1a:	d112      	bne.n	b42 <ringbuffer_init+0x3a>
     b1c:	2000      	movs	r0, #0
     b1e:	2228      	movs	r2, #40	; 0x28
     b20:	490a      	ldr	r1, [pc, #40]	; (b4c <ringbuffer_init+0x44>)
     b22:	4b0b      	ldr	r3, [pc, #44]	; (b50 <ringbuffer_init+0x48>)
     b24:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     b26:	1e6b      	subs	r3, r5, #1
     b28:	422b      	tst	r3, r5
     b2a:	d10c      	bne.n	b46 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     b2c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     b2e:	2300      	movs	r3, #0
     b30:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     b32:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     b34:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     b36:	2000      	movs	r0, #0
}
     b38:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     b3a:	2000      	movs	r0, #0
     b3c:	e7ef      	b.n	b1e <ringbuffer_init+0x16>
     b3e:	2000      	movs	r0, #0
     b40:	e7ed      	b.n	b1e <ringbuffer_init+0x16>
     b42:	2001      	movs	r0, #1
     b44:	e7eb      	b.n	b1e <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     b46:	200d      	movs	r0, #13
     b48:	4240      	negs	r0, r0
     b4a:	e7f5      	b.n	b38 <ringbuffer_init+0x30>
     b4c:	000126d4 	.word	0x000126d4
     b50:	00000aa1 	.word	0x00000aa1

00000b54 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     b54:	b570      	push	{r4, r5, r6, lr}
     b56:	0004      	movs	r4, r0
     b58:	000d      	movs	r5, r1
	ASSERT(rb && data);
     b5a:	2800      	cmp	r0, #0
     b5c:	d016      	beq.n	b8c <ringbuffer_get+0x38>
     b5e:	2900      	cmp	r1, #0
     b60:	d012      	beq.n	b88 <ringbuffer_get+0x34>
     b62:	2001      	movs	r0, #1
     b64:	2240      	movs	r2, #64	; 0x40
     b66:	490c      	ldr	r1, [pc, #48]	; (b98 <ringbuffer_get+0x44>)
     b68:	4b0c      	ldr	r3, [pc, #48]	; (b9c <ringbuffer_get+0x48>)
     b6a:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     b6c:	68a3      	ldr	r3, [r4, #8]
     b6e:	68e2      	ldr	r2, [r4, #12]
     b70:	429a      	cmp	r2, r3
     b72:	d00d      	beq.n	b90 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     b74:	6862      	ldr	r2, [r4, #4]
     b76:	4013      	ands	r3, r2
     b78:	6822      	ldr	r2, [r4, #0]
     b7a:	5cd3      	ldrb	r3, [r2, r3]
     b7c:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     b7e:	68a3      	ldr	r3, [r4, #8]
     b80:	3301      	adds	r3, #1
     b82:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     b84:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     b86:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     b88:	2000      	movs	r0, #0
     b8a:	e7eb      	b.n	b64 <ringbuffer_get+0x10>
     b8c:	2000      	movs	r0, #0
     b8e:	e7e9      	b.n	b64 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     b90:	200a      	movs	r0, #10
     b92:	4240      	negs	r0, r0
     b94:	e7f7      	b.n	b86 <ringbuffer_get+0x32>
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	000126d4 	.word	0x000126d4
     b9c:	00000aa1 	.word	0x00000aa1

00000ba0 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     ba0:	b570      	push	{r4, r5, r6, lr}
     ba2:	0004      	movs	r4, r0
     ba4:	000d      	movs	r5, r1
	ASSERT(rb);
     ba6:	1e43      	subs	r3, r0, #1
     ba8:	4198      	sbcs	r0, r3
     baa:	b2c0      	uxtb	r0, r0
     bac:	2251      	movs	r2, #81	; 0x51
     bae:	490a      	ldr	r1, [pc, #40]	; (bd8 <ringbuffer_put+0x38>)
     bb0:	4b0a      	ldr	r3, [pc, #40]	; (bdc <ringbuffer_put+0x3c>)
     bb2:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     bb4:	6863      	ldr	r3, [r4, #4]
     bb6:	68e2      	ldr	r2, [r4, #12]
     bb8:	4013      	ands	r3, r2
     bba:	6822      	ldr	r2, [r4, #0]
     bbc:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     bbe:	68e3      	ldr	r3, [r4, #12]
     bc0:	68a2      	ldr	r2, [r4, #8]
     bc2:	1a9a      	subs	r2, r3, r2
     bc4:	6861      	ldr	r1, [r4, #4]
     bc6:	428a      	cmp	r2, r1
     bc8:	d901      	bls.n	bce <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     bca:	1a59      	subs	r1, r3, r1
     bcc:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     bce:	3301      	adds	r3, #1
     bd0:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     bd2:	2000      	movs	r0, #0
     bd4:	bd70      	pop	{r4, r5, r6, pc}
     bd6:	46c0      	nop			; (mov r8, r8)
     bd8:	000126d4 	.word	0x000126d4
     bdc:	00000aa1 	.word	0x00000aa1

00000be0 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     be0:	b510      	push	{r4, lr}
     be2:	0004      	movs	r4, r0
	ASSERT(rb);
     be4:	1e43      	subs	r3, r0, #1
     be6:	4198      	sbcs	r0, r3
     be8:	b2c0      	uxtb	r0, r0
     bea:	2267      	movs	r2, #103	; 0x67
     bec:	4903      	ldr	r1, [pc, #12]	; (bfc <ringbuffer_num+0x1c>)
     bee:	4b04      	ldr	r3, [pc, #16]	; (c00 <ringbuffer_num+0x20>)
     bf0:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     bf2:	68e0      	ldr	r0, [r4, #12]
     bf4:	68a3      	ldr	r3, [r4, #8]
     bf6:	1ac0      	subs	r0, r0, r3
}
     bf8:	bd10      	pop	{r4, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	000126d4 	.word	0x000126d4
     c00:	00000aa1 	.word	0x00000aa1

00000c04 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     c04:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     c06:	4a06      	ldr	r2, [pc, #24]	; (c20 <_sbrk+0x1c>)
     c08:	6812      	ldr	r2, [r2, #0]
     c0a:	2a00      	cmp	r2, #0
     c0c:	d004      	beq.n	c18 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     c0e:	4a04      	ldr	r2, [pc, #16]	; (c20 <_sbrk+0x1c>)
     c10:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     c12:	18c3      	adds	r3, r0, r3
     c14:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     c16:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     c18:	4902      	ldr	r1, [pc, #8]	; (c24 <_sbrk+0x20>)
     c1a:	4a01      	ldr	r2, [pc, #4]	; (c20 <_sbrk+0x1c>)
     c1c:	6011      	str	r1, [r2, #0]
     c1e:	e7f6      	b.n	c0e <_sbrk+0xa>
     c20:	20000a58 	.word	0x20000a58
     c24:	200038e0 	.word	0x200038e0

00000c28 <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     c28:	2001      	movs	r0, #1
     c2a:	4240      	negs	r0, r0
     c2c:	4770      	bx	lr

00000c2e <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     c2e:	2380      	movs	r3, #128	; 0x80
     c30:	019b      	lsls	r3, r3, #6
     c32:	604b      	str	r3, [r1, #4]

	return 0;
}
     c34:	2000      	movs	r0, #0
     c36:	4770      	bx	lr

00000c38 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     c38:	2001      	movs	r0, #1
     c3a:	4770      	bx	lr

00000c3c <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     c3c:	2000      	movs	r0, #0
     c3e:	4770      	bx	lr

00000c40 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     c40:	b510      	push	{r4, lr}
		return (us * (freq / 100000) + 29) / 30;
     c42:	0103      	lsls	r3, r0, #4
     c44:	1a1b      	subs	r3, r3, r0
     c46:	0158      	lsls	r0, r3, #5
     c48:	301d      	adds	r0, #29
     c4a:	211e      	movs	r1, #30
     c4c:	4b01      	ldr	r3, [pc, #4]	; (c54 <_get_cycles_for_us+0x14>)
     c4e:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c50:	bd10      	pop	{r4, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	0000636d 	.word	0x0000636d

00000c58 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     c58:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     c5a:	0103      	lsls	r3, r0, #4
     c5c:	1a1b      	subs	r3, r3, r0
     c5e:	0158      	lsls	r0, r3, #5
     c60:	3002      	adds	r0, #2
     c62:	2103      	movs	r1, #3
     c64:	4b02      	ldr	r3, [pc, #8]	; (c70 <_get_cycles_for_ms+0x18>)
     c66:	4798      	blx	r3
     c68:	2364      	movs	r3, #100	; 0x64
     c6a:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     c6c:	bd10      	pop	{r4, pc}
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	0000636d 	.word	0x0000636d

00000c74 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     c74:	3901      	subs	r1, #1
     c76:	d8fd      	bhi.n	c74 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     c78:	4770      	bx	lr
	...

00000c7c <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c7c:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     c7e:	4a08      	ldr	r2, [pc, #32]	; (ca0 <_init_chip+0x24>)
     c80:	6853      	ldr	r3, [r2, #4]
     c82:	2106      	movs	r1, #6
     c84:	430b      	orrs	r3, r1
     c86:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     c88:	4b06      	ldr	r3, [pc, #24]	; (ca4 <_init_chip+0x28>)
     c8a:	4798      	blx	r3
	_sysctrl_init_sources();
     c8c:	4b06      	ldr	r3, [pc, #24]	; (ca8 <_init_chip+0x2c>)
     c8e:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     c90:	2008      	movs	r0, #8
     c92:	4c06      	ldr	r4, [pc, #24]	; (cac <_init_chip+0x30>)
     c94:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     c96:	4b06      	ldr	r3, [pc, #24]	; (cb0 <_init_chip+0x34>)
     c98:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c9a:	20f7      	movs	r0, #247	; 0xf7
     c9c:	47a0      	blx	r4
}
     c9e:	bd10      	pop	{r4, pc}
     ca0:	41004000 	.word	0x41004000
     ca4:	00000ea5 	.word	0x00000ea5
     ca8:	00001a41 	.word	0x00001a41
     cac:	00000e49 	.word	0x00000e49
     cb0:	00001a8d 	.word	0x00001a8d

00000cb4 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     cb4:	4b20      	ldr	r3, [pc, #128]	; (d38 <_ext_irq_init+0x84>)
     cb6:	785b      	ldrb	r3, [r3, #1]
     cb8:	09db      	lsrs	r3, r3, #7
     cba:	d1fb      	bne.n	cb4 <_ext_irq_init>
     cbc:	4b1e      	ldr	r3, [pc, #120]	; (d38 <_ext_irq_init+0x84>)
     cbe:	785b      	ldrb	r3, [r3, #1]
     cc0:	09db      	lsrs	r3, r3, #7
     cc2:	d1fb      	bne.n	cbc <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     cc4:	4b1c      	ldr	r3, [pc, #112]	; (d38 <_ext_irq_init+0x84>)
     cc6:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     cc8:	079b      	lsls	r3, r3, #30
     cca:	d50a      	bpl.n	ce2 <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     ccc:	2200      	movs	r2, #0
     cce:	4b1a      	ldr	r3, [pc, #104]	; (d38 <_ext_irq_init+0x84>)
     cd0:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     cd2:	4b19      	ldr	r3, [pc, #100]	; (d38 <_ext_irq_init+0x84>)
     cd4:	785b      	ldrb	r3, [r3, #1]
     cd6:	09db      	lsrs	r3, r3, #7
     cd8:	d1fb      	bne.n	cd2 <_ext_irq_init+0x1e>
     cda:	4b17      	ldr	r3, [pc, #92]	; (d38 <_ext_irq_init+0x84>)
     cdc:	785b      	ldrb	r3, [r3, #1]
     cde:	09db      	lsrs	r3, r3, #7
     ce0:	d1fb      	bne.n	cda <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     ce2:	2201      	movs	r2, #1
     ce4:	4b14      	ldr	r3, [pc, #80]	; (d38 <_ext_irq_init+0x84>)
     ce6:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     ce8:	4b13      	ldr	r3, [pc, #76]	; (d38 <_ext_irq_init+0x84>)
     cea:	785b      	ldrb	r3, [r3, #1]
     cec:	09db      	lsrs	r3, r3, #7
     cee:	d1fb      	bne.n	ce8 <_ext_irq_init+0x34>
     cf0:	4b11      	ldr	r3, [pc, #68]	; (d38 <_ext_irq_init+0x84>)
     cf2:	785b      	ldrb	r3, [r3, #1]
     cf4:	09db      	lsrs	r3, r3, #7
     cf6:	d1fb      	bne.n	cf0 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     cf8:	4b0f      	ldr	r3, [pc, #60]	; (d38 <_ext_irq_init+0x84>)
     cfa:	2200      	movs	r2, #0
     cfc:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     cfe:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     d00:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     d02:	619a      	str	r2, [r3, #24]
     d04:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     d06:	781a      	ldrb	r2, [r3, #0]
     d08:	2102      	movs	r1, #2
     d0a:	430a      	orrs	r2, r1
     d0c:	b2d2      	uxtb	r2, r2
     d0e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     d10:	4b09      	ldr	r3, [pc, #36]	; (d38 <_ext_irq_init+0x84>)
     d12:	785b      	ldrb	r3, [r3, #1]
     d14:	09db      	lsrs	r3, r3, #7
     d16:	d1fb      	bne.n	d10 <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d18:	4b08      	ldr	r3, [pc, #32]	; (d3c <_ext_irq_init+0x88>)
     d1a:	2210      	movs	r2, #16
     d1c:	2180      	movs	r1, #128	; 0x80
     d1e:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     d20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d24:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d28:	3101      	adds	r1, #1
     d2a:	31ff      	adds	r1, #255	; 0xff
     d2c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d2e:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     d30:	4b03      	ldr	r3, [pc, #12]	; (d40 <_ext_irq_init+0x8c>)
     d32:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     d34:	2000      	movs	r0, #0
     d36:	4770      	bx	lr
     d38:	40001800 	.word	0x40001800
     d3c:	e000e100 	.word	0xe000e100
     d40:	20000a5c 	.word	0x20000a5c

00000d44 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
     d44:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
     d46:	2b00      	cmp	r3, #0
     d48:	d00b      	beq.n	d62 <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
     d4a:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
     d4c:	2aff      	cmp	r2, #255	; 0xff
     d4e:	d017      	beq.n	d80 <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
     d50:	2900      	cmp	r1, #0
     d52:	d10f      	bne.n	d74 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
     d54:	2301      	movs	r3, #1
     d56:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
     d58:	4a0b      	ldr	r2, [pc, #44]	; (d88 <_ext_irq_enable+0x44>)
     d5a:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     d5c:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
     d5e:	2000      	movs	r0, #0
}
     d60:	4770      	bx	lr
		if (_map[i].pin == pin) {
     d62:	2828      	cmp	r0, #40	; 0x28
     d64:	d002      	beq.n	d6c <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
     d66:	3301      	adds	r3, #1
     d68:	b2db      	uxtb	r3, r3
     d6a:	e7ec      	b.n	d46 <_ext_irq_enable+0x2>
			extint = _map[i].extint;
     d6c:	00da      	lsls	r2, r3, #3
     d6e:	4b07      	ldr	r3, [pc, #28]	; (d8c <_ext_irq_enable+0x48>)
     d70:	5cd2      	ldrb	r2, [r2, r3]
			break;
     d72:	e7eb      	b.n	d4c <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
     d74:	2301      	movs	r3, #1
     d76:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
     d78:	4a03      	ldr	r2, [pc, #12]	; (d88 <_ext_irq_enable+0x44>)
     d7a:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
     d7c:	2000      	movs	r0, #0
     d7e:	e7ef      	b.n	d60 <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
     d80:	200d      	movs	r0, #13
     d82:	4240      	negs	r0, r0
     d84:	e7ec      	b.n	d60 <_ext_irq_enable+0x1c>
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	40001800 	.word	0x40001800
     d8c:	00012710 	.word	0x00012710

00000d90 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     d90:	b570      	push	{r4, r5, r6, lr}
     d92:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     d94:	4b26      	ldr	r3, [pc, #152]	; (e30 <EIC_Handler+0xa0>)
     d96:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d98:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d9a:	400a      	ands	r2, r1
     d9c:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     d9e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     da0:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     da2:	4b24      	ldr	r3, [pc, #144]	; (e34 <EIC_Handler+0xa4>)
     da4:	6818      	ldr	r0, [r3, #0]
     da6:	1e43      	subs	r3, r0, #1
     da8:	4198      	sbcs	r0, r3
     daa:	b2c0      	uxtb	r0, r0
     dac:	22d2      	movs	r2, #210	; 0xd2
     dae:	4922      	ldr	r1, [pc, #136]	; (e38 <EIC_Handler+0xa8>)
     db0:	4b22      	ldr	r3, [pc, #136]	; (e3c <EIC_Handler+0xac>)
     db2:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
     db4:	2501      	movs	r5, #1
     db6:	426d      	negs	r5, r5

	while (flags) {
     db8:	e02e      	b.n	e18 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     dba:	3901      	subs	r1, #1
     dbc:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     dbe:	42b0      	cmp	r0, r6
     dc0:	d80e      	bhi.n	de0 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
     dc2:	1832      	adds	r2, r6, r0
     dc4:	1052      	asrs	r2, r2, #1
     dc6:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
     dc8:	23ff      	movs	r3, #255	; 0xff
     dca:	4013      	ands	r3, r2
     dcc:	00db      	lsls	r3, r3, #3
     dce:	4a1c      	ldr	r2, [pc, #112]	; (e40 <EIC_Handler+0xb0>)
     dd0:	5c9b      	ldrb	r3, [r3, r2]
     dd2:	42a3      	cmp	r3, r4
     dd4:	d003      	beq.n	dde <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
     dd6:	daf0      	bge.n	dba <EIC_Handler+0x2a>
					lower = middle + 1;
     dd8:	3101      	adds	r1, #1
     dda:	b2c8      	uxtb	r0, r1
     ddc:	e7ef      	b.n	dbe <EIC_Handler+0x2e>
					pin = _map[middle].pin;
     dde:	2528      	movs	r5, #40	; 0x28
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     de0:	1c6b      	adds	r3, r5, #1
     de2:	d003      	beq.n	dec <EIC_Handler+0x5c>
				callback(pin);
     de4:	4b13      	ldr	r3, [pc, #76]	; (e34 <EIC_Handler+0xa4>)
     de6:	681b      	ldr	r3, [r3, #0]
     de8:	0028      	movs	r0, r5
     dea:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     dec:	2201      	movs	r2, #1
     dee:	40a2      	lsls	r2, r4
     df0:	9b01      	ldr	r3, [sp, #4]
     df2:	4393      	bics	r3, r2
     df4:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     df6:	9801      	ldr	r0, [sp, #4]
     df8:	4b12      	ldr	r3, [pc, #72]	; (e44 <EIC_Handler+0xb4>)
     dfa:	4798      	blx	r3
     dfc:	3801      	subs	r0, #1
     dfe:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     e00:	1c63      	adds	r3, r4, #1
     e02:	d002      	beq.n	e0a <EIC_Handler+0x7a>
     e04:	2601      	movs	r6, #1
     e06:	2000      	movs	r0, #0
     e08:	e7d9      	b.n	dbe <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
     e0a:	4b09      	ldr	r3, [pc, #36]	; (e30 <EIC_Handler+0xa0>)
     e0c:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     e0e:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     e10:	400a      	ands	r2, r1
     e12:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     e14:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     e16:	611a      	str	r2, [r3, #16]
	while (flags) {
     e18:	9b01      	ldr	r3, [sp, #4]
     e1a:	2b00      	cmp	r3, #0
     e1c:	d005      	beq.n	e2a <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
     e1e:	9801      	ldr	r0, [sp, #4]
     e20:	4b08      	ldr	r3, [pc, #32]	; (e44 <EIC_Handler+0xb4>)
     e22:	4798      	blx	r3
     e24:	3801      	subs	r0, #1
     e26:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     e28:	e7ea      	b.n	e00 <EIC_Handler+0x70>
	}
}
     e2a:	b002      	add	sp, #8
     e2c:	bd70      	pop	{r4, r5, r6, pc}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	40001800 	.word	0x40001800
     e34:	20000a5c 	.word	0x20000a5c
     e38:	000126f8 	.word	0x000126f8
     e3c:	00000aa1 	.word	0x00000aa1
     e40:	00012710 	.word	0x00012710
     e44:	000066ed 	.word	0x000066ed

00000e48 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e48:	07c3      	lsls	r3, r0, #31
     e4a:	d509      	bpl.n	e60 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     e4c:	4b11      	ldr	r3, [pc, #68]	; (e94 <_gclk_init_generators_by_fref+0x4c>)
     e4e:	2280      	movs	r2, #128	; 0x80
     e50:	0052      	lsls	r2, r2, #1
     e52:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e54:	4a10      	ldr	r2, [pc, #64]	; (e98 <_gclk_init_generators_by_fref+0x50>)
     e56:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e58:	4b0e      	ldr	r3, [pc, #56]	; (e94 <_gclk_init_generators_by_fref+0x4c>)
     e5a:	785b      	ldrb	r3, [r3, #1]
     e5c:	09db      	lsrs	r3, r3, #7
     e5e:	d1fb      	bne.n	e58 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     e60:	0783      	lsls	r3, r0, #30
     e62:	d509      	bpl.n	e78 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     e64:	4b0b      	ldr	r3, [pc, #44]	; (e94 <_gclk_init_generators_by_fref+0x4c>)
     e66:	2202      	movs	r2, #2
     e68:	32ff      	adds	r2, #255	; 0xff
     e6a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e6c:	4a0b      	ldr	r2, [pc, #44]	; (e9c <_gclk_init_generators_by_fref+0x54>)
     e6e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e70:	4b08      	ldr	r3, [pc, #32]	; (e94 <_gclk_init_generators_by_fref+0x4c>)
     e72:	785b      	ldrb	r3, [r3, #1]
     e74:	09db      	lsrs	r3, r3, #7
     e76:	d1fb      	bne.n	e70 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     e78:	0703      	lsls	r3, r0, #28
     e7a:	d509      	bpl.n	e90 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     e7c:	4b05      	ldr	r3, [pc, #20]	; (e94 <_gclk_init_generators_by_fref+0x4c>)
     e7e:	2204      	movs	r2, #4
     e80:	32ff      	adds	r2, #255	; 0xff
     e82:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     e84:	4a06      	ldr	r2, [pc, #24]	; (ea0 <_gclk_init_generators_by_fref+0x58>)
     e86:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     e88:	4b02      	ldr	r3, [pc, #8]	; (e94 <_gclk_init_generators_by_fref+0x4c>)
     e8a:	785b      	ldrb	r3, [r3, #1]
     e8c:	09db      	lsrs	r3, r3, #7
     e8e:	d1fb      	bne.n	e88 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
     e90:	4770      	bx	lr
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	40000c00 	.word	0x40000c00
     e98:	00010700 	.word	0x00010700
     e9c:	00010601 	.word	0x00010601
     ea0:	00010303 	.word	0x00010303

00000ea4 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     ea4:	4b06      	ldr	r3, [pc, #24]	; (ec0 <_pm_init+0x1c>)
     ea6:	7a1a      	ldrb	r2, [r3, #8]
     ea8:	b2d2      	uxtb	r2, r2
     eaa:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     eac:	7a5a      	ldrb	r2, [r3, #9]
     eae:	b2d2      	uxtb	r2, r2
     eb0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     eb2:	7a9a      	ldrb	r2, [r3, #10]
     eb4:	b2d2      	uxtb	r2, r2
     eb6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     eb8:	7ada      	ldrb	r2, [r3, #11]
     eba:	b2d2      	uxtb	r2, r2
     ebc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     ebe:	4770      	bx	lr
     ec0:	40000400 	.word	0x40000400

00000ec4 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     ec4:	b510      	push	{r4, lr}
     ec6:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     ec8:	68c3      	ldr	r3, [r0, #12]
     eca:	7a1b      	ldrb	r3, [r3, #8]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     ecc:	07db      	lsls	r3, r3, #31
     ece:	d506      	bpl.n	ede <_rtc_timer_interrupt_handler+0x1a>
		if (dev->timer_cb.period_expired) {
     ed0:	6803      	ldr	r3, [r0, #0]
     ed2:	2b00      	cmp	r3, #0
     ed4:	d000      	beq.n	ed8 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     ed6:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     ed8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     eda:	2201      	movs	r2, #1
     edc:	721a      	strb	r2, [r3, #8]
	}
}
     ede:	bd10      	pop	{r4, pc}

00000ee0 <_timer_init>:
{
     ee0:	b570      	push	{r4, r5, r6, lr}
     ee2:	0004      	movs	r4, r0
     ee4:	000d      	movs	r5, r1
	ASSERT(dev);
     ee6:	1e43      	subs	r3, r0, #1
     ee8:	4198      	sbcs	r0, r3
     eea:	b2c0      	uxtb	r0, r0
     eec:	2230      	movs	r2, #48	; 0x30
     eee:	4910      	ldr	r1, [pc, #64]	; (f30 <_timer_init+0x50>)
     ef0:	4b10      	ldr	r3, [pc, #64]	; (f34 <_timer_init+0x54>)
     ef2:	4798      	blx	r3
	dev->hw = hw;
     ef4:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     ef6:	2301      	movs	r3, #1
     ef8:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     efa:	7aab      	ldrb	r3, [r5, #10]
     efc:	09db      	lsrs	r3, r3, #7
     efe:	d1fc      	bne.n	efa <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
     f00:	68e2      	ldr	r2, [r4, #12]
     f02:	7a93      	ldrb	r3, [r2, #10]
     f04:	09db      	lsrs	r3, r3, #7
     f06:	d1fc      	bne.n	f02 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     f08:	3380      	adds	r3, #128	; 0x80
     f0a:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f0c:	7a93      	ldrb	r3, [r2, #10]
     f0e:	09db      	lsrs	r3, r3, #7
     f10:	d1fc      	bne.n	f0c <_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     f12:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     f14:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     f16:	230a      	movs	r3, #10
     f18:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f1a:	7a93      	ldrb	r3, [r2, #10]
     f1c:	09db      	lsrs	r3, r3, #7
     f1e:	d1fc      	bne.n	f1a <_timer_init+0x3a>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     f20:	3301      	adds	r3, #1
     f22:	68e2      	ldr	r2, [r4, #12]
     f24:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
     f26:	4b04      	ldr	r3, [pc, #16]	; (f38 <_timer_init+0x58>)
     f28:	601c      	str	r4, [r3, #0]
}
     f2a:	2000      	movs	r0, #0
     f2c:	bd70      	pop	{r4, r5, r6, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	00012718 	.word	0x00012718
     f34:	00000aa1 	.word	0x00000aa1
     f38:	20000a60 	.word	0x20000a60

00000f3c <_timer_start>:
{
     f3c:	b510      	push	{r4, lr}
     f3e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     f40:	d020      	beq.n	f84 <_timer_start+0x48>
     f42:	68c3      	ldr	r3, [r0, #12]
     f44:	2b00      	cmp	r3, #0
     f46:	d01b      	beq.n	f80 <_timer_start+0x44>
     f48:	2001      	movs	r0, #1
     f4a:	2267      	movs	r2, #103	; 0x67
     f4c:	490e      	ldr	r1, [pc, #56]	; (f88 <_timer_start+0x4c>)
     f4e:	4b0f      	ldr	r3, [pc, #60]	; (f8c <_timer_start+0x50>)
     f50:	4798      	blx	r3
     f52:	2208      	movs	r2, #8
     f54:	4b0e      	ldr	r3, [pc, #56]	; (f90 <_timer_start+0x54>)
     f56:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
     f58:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     f5a:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
     f5c:	2300      	movs	r3, #0
     f5e:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f60:	7a93      	ldrb	r3, [r2, #10]
     f62:	09db      	lsrs	r3, r3, #7
     f64:	d1fc      	bne.n	f60 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
     f66:	68e2      	ldr	r2, [r4, #12]
     f68:	7a93      	ldrb	r3, [r2, #10]
     f6a:	09db      	lsrs	r3, r3, #7
     f6c:	d1fc      	bne.n	f68 <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     f6e:	8813      	ldrh	r3, [r2, #0]
     f70:	2102      	movs	r1, #2
     f72:	430b      	orrs	r3, r1
     f74:	b29b      	uxth	r3, r3
     f76:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     f78:	7a93      	ldrb	r3, [r2, #10]
     f7a:	09db      	lsrs	r3, r3, #7
     f7c:	d1fc      	bne.n	f78 <_timer_start+0x3c>
}
     f7e:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     f80:	2000      	movs	r0, #0
     f82:	e7e2      	b.n	f4a <_timer_start+0xe>
     f84:	2000      	movs	r0, #0
     f86:	e7e0      	b.n	f4a <_timer_start+0xe>
     f88:	00012718 	.word	0x00012718
     f8c:	00000aa1 	.word	0x00000aa1
     f90:	e000e100 	.word	0xe000e100

00000f94 <_timer_is_started>:
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
     f94:	68c2      	ldr	r2, [r0, #12]
     f96:	7a93      	ldrb	r3, [r2, #10]
     f98:	09db      	lsrs	r3, r3, #7
     f9a:	d1fc      	bne.n	f96 <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     f9c:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
     f9e:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
     fa0:	2001      	movs	r0, #1
     fa2:	4018      	ands	r0, r3
}
     fa4:	4770      	bx	lr

00000fa6 <_timer_set_irq>:
}
     fa6:	4770      	bx	lr

00000fa8 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     fa8:	2000      	movs	r0, #0
     faa:	4770      	bx	lr

00000fac <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     fac:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     fae:	4b02      	ldr	r3, [pc, #8]	; (fb8 <RTC_Handler+0xc>)
     fb0:	6818      	ldr	r0, [r3, #0]
     fb2:	4b02      	ldr	r3, [pc, #8]	; (fbc <RTC_Handler+0x10>)
     fb4:	4798      	blx	r3
}
     fb6:	bd10      	pop	{r4, pc}
     fb8:	20000a60 	.word	0x20000a60
     fbc:	00000ec5 	.word	0x00000ec5

00000fc0 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     fc0:	4b02      	ldr	r3, [pc, #8]	; (fcc <_sercom_get_hardware_index+0xc>)
     fc2:	469c      	mov	ip, r3
     fc4:	4460      	add	r0, ip
     fc6:	0a80      	lsrs	r0, r0, #10
     fc8:	b2c0      	uxtb	r0, r0
}
     fca:	4770      	bx	lr
     fcc:	bdfff800 	.word	0xbdfff800

00000fd0 <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     fd0:	b510      	push	{r4, lr}
	void *hw = device->hw;
     fd2:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     fd4:	7b9a      	ldrb	r2, [r3, #14]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     fd6:	07d2      	lsls	r2, r2, #31
     fd8:	d502      	bpl.n	fe0 <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     fda:	7b5a      	ldrb	r2, [r3, #13]
     fdc:	07d2      	lsls	r2, r2, #31
     fde:	d40e      	bmi.n	ffe <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     fe0:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     fe2:	0792      	lsls	r2, r2, #30
     fe4:	d502      	bpl.n	fec <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     fe6:	7b5a      	ldrb	r2, [r3, #13]
     fe8:	0792      	lsls	r2, r2, #30
     fea:	d40d      	bmi.n	1008 <_sercom_usart_interrupt_handler+0x38>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     fec:	7b9a      	ldrb	r2, [r3, #14]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     fee:	0752      	lsls	r2, r2, #29
     ff0:	d504      	bpl.n	ffc <_sercom_usart_interrupt_handler+0x2c>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     ff2:	8a1a      	ldrh	r2, [r3, #16]
		if (hri_sercomusart_read_STATUS_reg(hw)
     ff4:	0752      	lsls	r2, r2, #29
     ff6:	d00c      	beq.n	1012 <_sercom_usart_interrupt_handler+0x42>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     ff8:	4a08      	ldr	r2, [pc, #32]	; (101c <_sercom_usart_interrupt_handler+0x4c>)
     ffa:	821a      	strh	r2, [r3, #16]
			return;
		}

		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
	}
}
     ffc:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     ffe:	2201      	movs	r2, #1
    1000:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
    1002:	6803      	ldr	r3, [r0, #0]
    1004:	4798      	blx	r3
    1006:	e7f9      	b.n	ffc <_sercom_usart_interrupt_handler+0x2c>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    1008:	2202      	movs	r2, #2
    100a:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
    100c:	6883      	ldr	r3, [r0, #8]
    100e:	4798      	blx	r3
    1010:	e7f4      	b.n	ffc <_sercom_usart_interrupt_handler+0x2c>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    1012:	6842      	ldr	r2, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
    1014:	8b19      	ldrh	r1, [r3, #24]
    1016:	b2c9      	uxtb	r1, r1
    1018:	4790      	blx	r2
    101a:	e7ef      	b.n	ffc <_sercom_usart_interrupt_handler+0x2c>
    101c:	ffff8007 	.word	0xffff8007

00001020 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
    1020:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
    1022:	4b02      	ldr	r3, [pc, #8]	; (102c <_sercom_get_irq_num+0xc>)
    1024:	4798      	blx	r3
    1026:	3007      	adds	r0, #7
    1028:	b2c0      	uxtb	r0, r0
}
    102a:	bd10      	pop	{r4, pc}
    102c:	00000fc1 	.word	0x00000fc1

00001030 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
    1030:	4b03      	ldr	r3, [pc, #12]	; (1040 <_sercom_init_irq_param+0x10>)
    1032:	4298      	cmp	r0, r3
    1034:	d000      	beq.n	1038 <_sercom_init_irq_param+0x8>
		_sercom4_dev = (struct _usart_async_device *)dev;
	}
}
    1036:	4770      	bx	lr
		_sercom4_dev = (struct _usart_async_device *)dev;
    1038:	4b02      	ldr	r3, [pc, #8]	; (1044 <_sercom_init_irq_param+0x14>)
    103a:	6019      	str	r1, [r3, #0]
}
    103c:	e7fb      	b.n	1036 <_sercom_init_irq_param+0x6>
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	42001800 	.word	0x42001800
    1044:	20000a64 	.word	0x20000a64

00001048 <_spi_sync_enable>:
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    1048:	8a03      	ldrh	r3, [r0, #16]
    104a:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
    104c:	d108      	bne.n	1060 <_spi_sync_enable+0x18>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    104e:	6803      	ldr	r3, [r0, #0]
    1050:	2202      	movs	r2, #2
    1052:	4313      	orrs	r3, r2
    1054:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1056:	8a03      	ldrh	r3, [r0, #16]
    1058:	0bdb      	lsrs	r3, r3, #15
    105a:	d1fc      	bne.n	1056 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
    105c:	2000      	movs	r0, #0
}
    105e:	4770      	bx	lr
		return ERR_BUSY;
    1060:	2004      	movs	r0, #4
    1062:	4240      	negs	r0, r0
    1064:	e7fb      	b.n	105e <_spi_sync_enable+0x16>
	...

00001068 <_get_sercom_index>:
{
    1068:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    106a:	4b0a      	ldr	r3, [pc, #40]	; (1094 <_get_sercom_index+0x2c>)
    106c:	4798      	blx	r3
    106e:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    1070:	2000      	movs	r0, #0
    1072:	2800      	cmp	r0, #0
    1074:	d006      	beq.n	1084 <_get_sercom_index+0x1c>
	ASSERT(false);
    1076:	4a08      	ldr	r2, [pc, #32]	; (1098 <_get_sercom_index+0x30>)
    1078:	4908      	ldr	r1, [pc, #32]	; (109c <_get_sercom_index+0x34>)
    107a:	2000      	movs	r0, #0
    107c:	4b08      	ldr	r3, [pc, #32]	; (10a0 <_get_sercom_index+0x38>)
    107e:	4798      	blx	r3
	return 0;
    1080:	2000      	movs	r0, #0
}
    1082:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
    1084:	0102      	lsls	r2, r0, #4
    1086:	4907      	ldr	r1, [pc, #28]	; (10a4 <_get_sercom_index+0x3c>)
    1088:	5c52      	ldrb	r2, [r2, r1]
    108a:	4293      	cmp	r3, r2
    108c:	d0f9      	beq.n	1082 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
    108e:	3001      	adds	r0, #1
    1090:	b2c0      	uxtb	r0, r0
    1092:	e7ee      	b.n	1072 <_get_sercom_index+0xa>
    1094:	00000fc1 	.word	0x00000fc1
    1098:	0000024e 	.word	0x0000024e
    109c:	00012730 	.word	0x00012730
    10a0:	00000aa1 	.word	0x00000aa1
    10a4:	00012764 	.word	0x00012764

000010a8 <_usart_init>:
{
    10a8:	b510      	push	{r4, lr}
    10aa:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
    10ac:	4b19      	ldr	r3, [pc, #100]	; (1114 <_usart_init+0x6c>)
    10ae:	4798      	blx	r3
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    10b0:	8a23      	ldrh	r3, [r4, #16]
    10b2:	0bdb      	lsrs	r3, r3, #15
    10b4:	d1fc      	bne.n	10b0 <_usart_init+0x8>
    10b6:	8a23      	ldrh	r3, [r4, #16]
    10b8:	0bdb      	lsrs	r3, r3, #15
    10ba:	d1fc      	bne.n	10b6 <_usart_init+0xe>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    10bc:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
    10be:	079b      	lsls	r3, r3, #30
    10c0:	d507      	bpl.n	10d2 <_usart_init+0x2a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10c2:	2300      	movs	r3, #0
    10c4:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    10c6:	8a23      	ldrh	r3, [r4, #16]
    10c8:	0bdb      	lsrs	r3, r3, #15
    10ca:	d1fc      	bne.n	10c6 <_usart_init+0x1e>
    10cc:	8a23      	ldrh	r3, [r4, #16]
    10ce:	0bdb      	lsrs	r3, r3, #15
    10d0:	d1fc      	bne.n	10cc <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10d2:	2301      	movs	r3, #1
    10d4:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    10d6:	8a23      	ldrh	r3, [r4, #16]
    10d8:	0bdb      	lsrs	r3, r3, #15
    10da:	d1fc      	bne.n	10d6 <_usart_init+0x2e>
    10dc:	8a23      	ldrh	r3, [r4, #16]
    10de:	0bdb      	lsrs	r3, r3, #15
    10e0:	d1fc      	bne.n	10dc <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
    10e2:	0102      	lsls	r2, r0, #4
    10e4:	4b0c      	ldr	r3, [pc, #48]	; (1118 <_usart_init+0x70>)
    10e6:	189b      	adds	r3, r3, r2
    10e8:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
    10ea:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    10ec:	8a23      	ldrh	r3, [r4, #16]
    10ee:	0bdb      	lsrs	r3, r3, #15
    10f0:	d1fc      	bne.n	10ec <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
    10f2:	0102      	lsls	r2, r0, #4
    10f4:	4b08      	ldr	r3, [pc, #32]	; (1118 <_usart_init+0x70>)
    10f6:	189b      	adds	r3, r3, r2
    10f8:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
    10fa:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    10fc:	8a23      	ldrh	r3, [r4, #16]
    10fe:	0bdb      	lsrs	r3, r3, #15
    1100:	d1fc      	bne.n	10fc <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
    1102:	0100      	lsls	r0, r0, #4
    1104:	4b04      	ldr	r3, [pc, #16]	; (1118 <_usart_init+0x70>)
    1106:	1818      	adds	r0, r3, r0
    1108:	8983      	ldrh	r3, [r0, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
    110a:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
    110c:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
    110e:	7223      	strb	r3, [r4, #8]
}
    1110:	2000      	movs	r0, #0
    1112:	bd10      	pop	{r4, pc}
    1114:	00001069 	.word	0x00001069
    1118:	00012764 	.word	0x00012764

0000111c <_get_i2cm_index>:
{
    111c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    111e:	4b0b      	ldr	r3, [pc, #44]	; (114c <_get_i2cm_index+0x30>)
    1120:	4798      	blx	r3
    1122:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1124:	2000      	movs	r0, #0
    1126:	2800      	cmp	r0, #0
    1128:	d006      	beq.n	1138 <_get_i2cm_index+0x1c>
	ASSERT(false);
    112a:	4a09      	ldr	r2, [pc, #36]	; (1150 <_get_i2cm_index+0x34>)
    112c:	4909      	ldr	r1, [pc, #36]	; (1154 <_get_i2cm_index+0x38>)
    112e:	2000      	movs	r0, #0
    1130:	4b09      	ldr	r3, [pc, #36]	; (1158 <_get_i2cm_index+0x3c>)
    1132:	4798      	blx	r3
	return 0;
    1134:	2000      	movs	r0, #0
}
    1136:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
    1138:	0043      	lsls	r3, r0, #1
    113a:	181b      	adds	r3, r3, r0
    113c:	00d9      	lsls	r1, r3, #3
    113e:	4b07      	ldr	r3, [pc, #28]	; (115c <_get_i2cm_index+0x40>)
    1140:	5ccb      	ldrb	r3, [r1, r3]
    1142:	429a      	cmp	r2, r3
    1144:	d0f7      	beq.n	1136 <_get_i2cm_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
    1146:	3001      	adds	r0, #1
    1148:	b2c0      	uxtb	r0, r0
    114a:	e7ec      	b.n	1126 <_get_i2cm_index+0xa>
    114c:	00000fc1 	.word	0x00000fc1
    1150:	0000038a 	.word	0x0000038a
    1154:	00012730 	.word	0x00012730
    1158:	00000aa1 	.word	0x00000aa1
    115c:	0001274c 	.word	0x0001274c

00001160 <_sercom_i2c_sync_send_address>:
{
    1160:	b570      	push	{r4, r5, r6, lr}
    1162:	0005      	movs	r5, r0
	void *             hw  = i2c_dev->hw;
    1164:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1166:	1e43      	subs	r3, r0, #1
    1168:	4198      	sbcs	r0, r3
    116a:	b2c0      	uxtb	r0, r0
    116c:	4a5c      	ldr	r2, [pc, #368]	; (12e0 <_sercom_i2c_sync_send_address+0x180>)
    116e:	495d      	ldr	r1, [pc, #372]	; (12e4 <_sercom_i2c_sync_send_address+0x184>)
    1170:	4b5d      	ldr	r3, [pc, #372]	; (12e8 <_sercom_i2c_sync_send_address+0x188>)
    1172:	4798      	blx	r3
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1174:	6863      	ldr	r3, [r4, #4]
    1176:	4a5d      	ldr	r2, [pc, #372]	; (12ec <_sercom_i2c_sync_send_address+0x18c>)
    1178:	4013      	ands	r3, r2
    117a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    117c:	8a23      	ldrh	r3, [r4, #16]
    117e:	0bdb      	lsrs	r3, r3, #15
    1180:	d1fc      	bne.n	117c <_sercom_i2c_sync_send_address+0x1c>
	hri_sercomi2cm_write_ADDR_reg(hw, ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0));
    1182:	882a      	ldrh	r2, [r5, #0]
    1184:	0052      	lsls	r2, r2, #1
    1186:	886b      	ldrh	r3, [r5, #2]
    1188:	2101      	movs	r1, #1
    118a:	400b      	ands	r3, r1
    118c:	4313      	orrs	r3, r2
    118e:	b2db      	uxtb	r3, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1190:	7523      	strb	r3, [r4, #20]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1192:	8a23      	ldrh	r3, [r4, #16]
    1194:	0bdb      	lsrs	r3, r3, #15
    1196:	d1fc      	bne.n	1192 <_sercom_i2c_sync_send_address+0x32>
	void *   hw      = i2c_dev->hw;
    1198:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    119a:	4a55      	ldr	r2, [pc, #340]	; (12f0 <_sercom_i2c_sync_send_address+0x190>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    119c:	7bb3      	ldrb	r3, [r6, #14]
    119e:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    11a0:	0018      	movs	r0, r3
		if (timeout-- == 0) {
    11a2:	1e51      	subs	r1, r2, #1
    11a4:	2a00      	cmp	r2, #0
    11a6:	d002      	beq.n	11ae <_sercom_i2c_sync_send_address+0x4e>
    11a8:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    11aa:	079b      	lsls	r3, r3, #30
    11ac:	d0f6      	beq.n	119c <_sercom_i2c_sync_send_address+0x3c>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    11ae:	8a23      	ldrh	r3, [r4, #16]
    11b0:	0bdb      	lsrs	r3, r3, #15
    11b2:	d1fc      	bne.n	11ae <_sercom_i2c_sync_send_address+0x4e>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    11b4:	8a23      	ldrh	r3, [r4, #16]
    11b6:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    11b8:	07c2      	lsls	r2, r0, #31
    11ba:	d550      	bpl.n	125e <_sercom_i2c_sync_send_address+0xfe>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    11bc:	079a      	lsls	r2, r3, #30
    11be:	d510      	bpl.n	11e2 <_sercom_i2c_sync_send_address+0x82>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    11c0:	2201      	movs	r2, #1
    11c2:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    11c4:	886a      	ldrh	r2, [r5, #2]
    11c6:	2180      	movs	r1, #128	; 0x80
    11c8:	0149      	lsls	r1, r1, #5
    11ca:	430a      	orrs	r2, r1
    11cc:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    11ce:	886a      	ldrh	r2, [r5, #2]
    11d0:	4948      	ldr	r1, [pc, #288]	; (12f4 <_sercom_i2c_sync_send_address+0x194>)
    11d2:	400a      	ands	r2, r1
    11d4:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    11d6:	07db      	lsls	r3, r3, #31
    11d8:	d400      	bmi.n	11dc <_sercom_i2c_sync_send_address+0x7c>
    11da:	e07c      	b.n	12d6 <_sercom_i2c_sync_send_address+0x176>
				return I2C_ERR_BUS;
    11dc:	2005      	movs	r0, #5
    11de:	4240      	negs	r0, r0
    11e0:	e063      	b.n	12aa <_sercom_i2c_sync_send_address+0x14a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    11e2:	075b      	lsls	r3, r3, #29
    11e4:	d40b      	bmi.n	11fe <_sercom_i2c_sync_send_address+0x9e>
			if (msg->len == 0) {
    11e6:	6868      	ldr	r0, [r5, #4]
    11e8:	2800      	cmp	r0, #0
    11ea:	d12d      	bne.n	1248 <_sercom_i2c_sync_send_address+0xe8>
				if (msg->flags & I2C_M_STOP) {
    11ec:	886b      	ldrh	r3, [r5, #2]
    11ee:	b21b      	sxth	r3, r3
    11f0:	2b00      	cmp	r3, #0
    11f2:	db20      	blt.n	1236 <_sercom_i2c_sync_send_address+0xd6>
				msg->flags &= ~I2C_M_BUSY;
    11f4:	886b      	ldrh	r3, [r5, #2]
    11f6:	4a3f      	ldr	r2, [pc, #252]	; (12f4 <_sercom_i2c_sync_send_address+0x194>)
    11f8:	4013      	ands	r3, r2
    11fa:	806b      	strh	r3, [r5, #2]
    11fc:	e055      	b.n	12aa <_sercom_i2c_sync_send_address+0x14a>
				if (msg->len > 0) {
    11fe:	686b      	ldr	r3, [r5, #4]
    1200:	2b00      	cmp	r3, #0
    1202:	dd04      	ble.n	120e <_sercom_i2c_sync_send_address+0xae>
					msg->flags |= I2C_M_FAIL;
    1204:	886b      	ldrh	r3, [r5, #2]
    1206:	2280      	movs	r2, #128	; 0x80
    1208:	0152      	lsls	r2, r2, #5
    120a:	4313      	orrs	r3, r2
    120c:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    120e:	886b      	ldrh	r3, [r5, #2]
    1210:	b21b      	sxth	r3, r3
    1212:	2b00      	cmp	r3, #0
    1214:	db06      	blt.n	1224 <_sercom_i2c_sync_send_address+0xc4>
				msg->flags &= ~I2C_M_BUSY;
    1216:	886b      	ldrh	r3, [r5, #2]
    1218:	4a36      	ldr	r2, [pc, #216]	; (12f4 <_sercom_i2c_sync_send_address+0x194>)
    121a:	4013      	ands	r3, r2
    121c:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    121e:	2002      	movs	r0, #2
    1220:	4240      	negs	r0, r0
    1222:	e042      	b.n	12aa <_sercom_i2c_sync_send_address+0x14a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1224:	6862      	ldr	r2, [r4, #4]
    1226:	23c0      	movs	r3, #192	; 0xc0
    1228:	029b      	lsls	r3, r3, #10
    122a:	4313      	orrs	r3, r2
    122c:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    122e:	8a23      	ldrh	r3, [r4, #16]
    1230:	0bdb      	lsrs	r3, r3, #15
    1232:	d1fc      	bne.n	122e <_sercom_i2c_sync_send_address+0xce>
    1234:	e7ef      	b.n	1216 <_sercom_i2c_sync_send_address+0xb6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1236:	6862      	ldr	r2, [r4, #4]
    1238:	23c0      	movs	r3, #192	; 0xc0
    123a:	029b      	lsls	r3, r3, #10
    123c:	4313      	orrs	r3, r2
    123e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1240:	8a23      	ldrh	r3, [r4, #16]
    1242:	0bdb      	lsrs	r3, r3, #15
    1244:	d1fc      	bne.n	1240 <_sercom_i2c_sync_send_address+0xe0>
    1246:	e7d5      	b.n	11f4 <_sercom_i2c_sync_send_address+0x94>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1248:	68ab      	ldr	r3, [r5, #8]
    124a:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    124c:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    124e:	68ab      	ldr	r3, [r5, #8]
    1250:	3301      	adds	r3, #1
    1252:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1254:	686b      	ldr	r3, [r5, #4]
    1256:	3b01      	subs	r3, #1
    1258:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    125a:	2000      	movs	r0, #0
    125c:	e025      	b.n	12aa <_sercom_i2c_sync_send_address+0x14a>
	} else if (flags & SB_FLAG) {
    125e:	0782      	lsls	r2, r0, #30
    1260:	d53c      	bpl.n	12dc <_sercom_i2c_sync_send_address+0x17c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1262:	686a      	ldr	r2, [r5, #4]
    1264:	2a00      	cmp	r2, #0
    1266:	d031      	beq.n	12cc <_sercom_i2c_sync_send_address+0x16c>
    1268:	075b      	lsls	r3, r3, #29
    126a:	d42f      	bmi.n	12cc <_sercom_i2c_sync_send_address+0x16c>
			msg->len--;
    126c:	3a01      	subs	r2, #1
    126e:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    1270:	2a00      	cmp	r2, #0
    1272:	d107      	bne.n	1284 <_sercom_i2c_sync_send_address+0x124>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1274:	6862      	ldr	r2, [r4, #4]
    1276:	2380      	movs	r3, #128	; 0x80
    1278:	02db      	lsls	r3, r3, #11
    127a:	4313      	orrs	r3, r2
    127c:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    127e:	8a23      	ldrh	r3, [r4, #16]
    1280:	0bdb      	lsrs	r3, r3, #15
    1282:	d1fc      	bne.n	127e <_sercom_i2c_sync_send_address+0x11e>
			if (msg->len == 0) {
    1284:	686b      	ldr	r3, [r5, #4]
    1286:	2b00      	cmp	r3, #0
    1288:	d107      	bne.n	129a <_sercom_i2c_sync_send_address+0x13a>
				if (msg->flags & I2C_M_STOP) {
    128a:	886b      	ldrh	r3, [r5, #2]
    128c:	b21b      	sxth	r3, r3
    128e:	2b00      	cmp	r3, #0
    1290:	db0c      	blt.n	12ac <_sercom_i2c_sync_send_address+0x14c>
				msg->flags &= ~I2C_M_BUSY;
    1292:	886b      	ldrh	r3, [r5, #2]
    1294:	4a17      	ldr	r2, [pc, #92]	; (12f4 <_sercom_i2c_sync_send_address+0x194>)
    1296:	4013      	ands	r3, r2
    1298:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    129a:	68ab      	ldr	r3, [r5, #8]
    129c:	1c5a      	adds	r2, r3, #1
    129e:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    12a0:	7e22      	ldrb	r2, [r4, #24]
    12a2:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    12a4:	2302      	movs	r3, #2
    12a6:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    12a8:	2000      	movs	r0, #0
}
    12aa:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    12ac:	6863      	ldr	r3, [r4, #4]
    12ae:	4a11      	ldr	r2, [pc, #68]	; (12f4 <_sercom_i2c_sync_send_address+0x194>)
    12b0:	4013      	ands	r3, r2
    12b2:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    12b4:	8a23      	ldrh	r3, [r4, #16]
    12b6:	0bdb      	lsrs	r3, r3, #15
    12b8:	d1fc      	bne.n	12b4 <_sercom_i2c_sync_send_address+0x154>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    12ba:	6862      	ldr	r2, [r4, #4]
    12bc:	23c0      	movs	r3, #192	; 0xc0
    12be:	029b      	lsls	r3, r3, #10
    12c0:	4313      	orrs	r3, r2
    12c2:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    12c4:	8a23      	ldrh	r3, [r4, #16]
    12c6:	0bdb      	lsrs	r3, r3, #15
    12c8:	d1fc      	bne.n	12c4 <_sercom_i2c_sync_send_address+0x164>
    12ca:	e7e2      	b.n	1292 <_sercom_i2c_sync_send_address+0x132>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    12cc:	2302      	movs	r3, #2
    12ce:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    12d0:	2002      	movs	r0, #2
    12d2:	4240      	negs	r0, r0
    12d4:	e7e9      	b.n	12aa <_sercom_i2c_sync_send_address+0x14a>
			return I2C_ERR_BAD_ADDRESS;
    12d6:	2004      	movs	r0, #4
    12d8:	4240      	negs	r0, r0
    12da:	e7e6      	b.n	12aa <_sercom_i2c_sync_send_address+0x14a>
	return I2C_OK;
    12dc:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    12de:	e7e4      	b.n	12aa <_sercom_i2c_sync_send_address+0x14a>
    12e0:	000005a9 	.word	0x000005a9
    12e4:	00012730 	.word	0x00012730
    12e8:	00000aa1 	.word	0x00000aa1
    12ec:	fffbffff 	.word	0xfffbffff
    12f0:	0000ffff 	.word	0x0000ffff
    12f4:	fffffeff 	.word	0xfffffeff

000012f8 <_usart_async_init>:
{
    12f8:	b570      	push	{r4, r5, r6, lr}
    12fa:	0006      	movs	r6, r0
    12fc:	000c      	movs	r4, r1
	ASSERT(device);
    12fe:	1e43      	subs	r3, r0, #1
    1300:	4198      	sbcs	r0, r3
    1302:	b2c0      	uxtb	r0, r0
    1304:	22b1      	movs	r2, #177	; 0xb1
    1306:	4919      	ldr	r1, [pc, #100]	; (136c <_usart_async_init+0x74>)
    1308:	4b19      	ldr	r3, [pc, #100]	; (1370 <_usart_async_init+0x78>)
    130a:	4798      	blx	r3
	init_status = _usart_init(hw);
    130c:	0020      	movs	r0, r4
    130e:	4b19      	ldr	r3, [pc, #100]	; (1374 <_usart_async_init+0x7c>)
    1310:	4798      	blx	r3
    1312:	1e05      	subs	r5, r0, #0
	if (init_status) {
    1314:	d001      	beq.n	131a <_usart_async_init+0x22>
}
    1316:	0028      	movs	r0, r5
    1318:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
    131a:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
    131c:	0031      	movs	r1, r6
    131e:	0020      	movs	r0, r4
    1320:	4b15      	ldr	r3, [pc, #84]	; (1378 <_usart_async_init+0x80>)
    1322:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1324:	0020      	movs	r0, r4
    1326:	4b15      	ldr	r3, [pc, #84]	; (137c <_usart_async_init+0x84>)
    1328:	4798      	blx	r3
    132a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    132c:	2b00      	cmp	r3, #0
    132e:	db0a      	blt.n	1346 <_usart_async_init+0x4e>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1330:	211f      	movs	r1, #31
    1332:	4001      	ands	r1, r0
    1334:	2201      	movs	r2, #1
    1336:	408a      	lsls	r2, r1
    1338:	2180      	movs	r1, #128	; 0x80
    133a:	4c11      	ldr	r4, [pc, #68]	; (1380 <_usart_async_init+0x88>)
    133c:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    133e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1342:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1346:	2b00      	cmp	r3, #0
    1348:	db07      	blt.n	135a <_usart_async_init+0x62>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    134a:	211f      	movs	r1, #31
    134c:	4001      	ands	r1, r0
    134e:	2201      	movs	r2, #1
    1350:	408a      	lsls	r2, r1
    1352:	21c0      	movs	r1, #192	; 0xc0
    1354:	0049      	lsls	r1, r1, #1
    1356:	4c0a      	ldr	r4, [pc, #40]	; (1380 <_usart_async_init+0x88>)
    1358:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    135a:	2b00      	cmp	r3, #0
    135c:	dbdb      	blt.n	1316 <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    135e:	231f      	movs	r3, #31
    1360:	4018      	ands	r0, r3
    1362:	3b1e      	subs	r3, #30
    1364:	4083      	lsls	r3, r0
    1366:	4a06      	ldr	r2, [pc, #24]	; (1380 <_usart_async_init+0x88>)
    1368:	6013      	str	r3, [r2, #0]
    136a:	e7d4      	b.n	1316 <_usart_async_init+0x1e>
    136c:	00012730 	.word	0x00012730
    1370:	00000aa1 	.word	0x00000aa1
    1374:	000010a9 	.word	0x000010a9
    1378:	00001031 	.word	0x00001031
    137c:	00001021 	.word	0x00001021
    1380:	e000e100 	.word	0xe000e100

00001384 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1384:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1386:	6813      	ldr	r3, [r2, #0]
    1388:	2102      	movs	r1, #2
    138a:	430b      	orrs	r3, r1
    138c:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    138e:	8a13      	ldrh	r3, [r2, #16]
    1390:	0bdb      	lsrs	r3, r3, #15
    1392:	d1fc      	bne.n	138e <_usart_async_enable+0xa>
}
    1394:	4770      	bx	lr

00001396 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1396:	6983      	ldr	r3, [r0, #24]
    1398:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    139a:	8319      	strh	r1, [r3, #24]
}
    139c:	4770      	bx	lr

0000139e <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    139e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    13a0:	2201      	movs	r2, #1
    13a2:	735a      	strb	r2, [r3, #13]
}
    13a4:	4770      	bx	lr

000013a6 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    13a6:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    13a8:	2202      	movs	r2, #2
    13aa:	735a      	strb	r2, [r3, #13]
}
    13ac:	4770      	bx	lr
	...

000013b0 <_usart_async_set_irq_state>:
{
    13b0:	b570      	push	{r4, r5, r6, lr}
    13b2:	0004      	movs	r4, r0
    13b4:	000d      	movs	r5, r1
    13b6:	0016      	movs	r6, r2
	ASSERT(device);
    13b8:	1e43      	subs	r3, r0, #1
    13ba:	4198      	sbcs	r0, r3
    13bc:	b2c0      	uxtb	r0, r0
    13be:	2284      	movs	r2, #132	; 0x84
    13c0:	0092      	lsls	r2, r2, #2
    13c2:	4911      	ldr	r1, [pc, #68]	; (1408 <_usart_async_set_irq_state+0x58>)
    13c4:	4b11      	ldr	r3, [pc, #68]	; (140c <_usart_async_set_irq_state+0x5c>)
    13c6:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    13c8:	2d00      	cmp	r5, #0
    13ca:	d009      	beq.n	13e0 <_usart_async_set_irq_state+0x30>
    13cc:	2d02      	cmp	r5, #2
    13ce:	d007      	beq.n	13e0 <_usart_async_set_irq_state+0x30>
	} else if (USART_ASYNC_RX_DONE == type) {
    13d0:	2d01      	cmp	r5, #1
    13d2:	d10f      	bne.n	13f4 <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    13d4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    13d6:	2e00      	cmp	r6, #0
    13d8:	d013      	beq.n	1402 <_usart_async_set_irq_state+0x52>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    13da:	2204      	movs	r2, #4
    13dc:	735a      	strb	r2, [r3, #13]
}
    13de:	e009      	b.n	13f4 <_usart_async_set_irq_state+0x44>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    13e0:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    13e2:	2e00      	cmp	r6, #0
    13e4:	d107      	bne.n	13f6 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    13e6:	2201      	movs	r2, #1
    13e8:	731a      	strb	r2, [r3, #12]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    13ea:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    13ec:	2e00      	cmp	r6, #0
    13ee:	d105      	bne.n	13fc <_usart_async_set_irq_state+0x4c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    13f0:	2202      	movs	r2, #2
    13f2:	731a      	strb	r2, [r3, #12]
}
    13f4:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    13f6:	2201      	movs	r2, #1
    13f8:	735a      	strb	r2, [r3, #13]
    13fa:	e7f6      	b.n	13ea <_usart_async_set_irq_state+0x3a>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    13fc:	2202      	movs	r2, #2
    13fe:	735a      	strb	r2, [r3, #13]
    1400:	e7f8      	b.n	13f4 <_usart_async_set_irq_state+0x44>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1402:	2204      	movs	r2, #4
    1404:	731a      	strb	r2, [r3, #12]
    1406:	e7f5      	b.n	13f4 <_usart_async_set_irq_state+0x44>
    1408:	00012730 	.word	0x00012730
    140c:	00000aa1 	.word	0x00000aa1

00001410 <SERCOM4_Handler>:
{
    1410:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1412:	4b02      	ldr	r3, [pc, #8]	; (141c <SERCOM4_Handler+0xc>)
    1414:	6818      	ldr	r0, [r3, #0]
    1416:	4b02      	ldr	r3, [pc, #8]	; (1420 <SERCOM4_Handler+0x10>)
    1418:	4798      	blx	r3
}
    141a:	bd10      	pop	{r4, pc}
    141c:	20000a64 	.word	0x20000a64
    1420:	00000fd1 	.word	0x00000fd1

00001424 <_i2c_m_sync_init>:
{
    1424:	b570      	push	{r4, r5, r6, lr}
    1426:	0006      	movs	r6, r0
    1428:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    142a:	0008      	movs	r0, r1
    142c:	4b23      	ldr	r3, [pc, #140]	; (14bc <_i2c_m_sync_init+0x98>)
    142e:	4798      	blx	r3
    1430:	0005      	movs	r5, r0
	ASSERT(i2c_dev);
    1432:	0030      	movs	r0, r6
    1434:	1e43      	subs	r3, r0, #1
    1436:	4198      	sbcs	r0, r3
    1438:	b2c0      	uxtb	r0, r0
    143a:	4a21      	ldr	r2, [pc, #132]	; (14c0 <_i2c_m_sync_init+0x9c>)
    143c:	4921      	ldr	r1, [pc, #132]	; (14c4 <_i2c_m_sync_init+0xa0>)
    143e:	4b22      	ldr	r3, [pc, #136]	; (14c8 <_i2c_m_sync_init+0xa4>)
    1440:	4798      	blx	r3
	i2c_dev->hw = hw;
    1442:	6134      	str	r4, [r6, #16]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1444:	8a23      	ldrh	r3, [r4, #16]
    1446:	0bdb      	lsrs	r3, r3, #15
    1448:	d1fc      	bne.n	1444 <_i2c_m_sync_init+0x20>
    144a:	8a23      	ldrh	r3, [r4, #16]
    144c:	0bdb      	lsrs	r3, r3, #15
    144e:	d1fc      	bne.n	144a <_i2c_m_sync_init+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1450:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    1452:	079b      	lsls	r3, r3, #30
    1454:	d507      	bpl.n	1466 <_i2c_m_sync_init+0x42>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1456:	2300      	movs	r3, #0
    1458:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    145a:	8a23      	ldrh	r3, [r4, #16]
    145c:	0bdb      	lsrs	r3, r3, #15
    145e:	d1fc      	bne.n	145a <_i2c_m_sync_init+0x36>
    1460:	8a23      	ldrh	r3, [r4, #16]
    1462:	0bdb      	lsrs	r3, r3, #15
    1464:	d1fc      	bne.n	1460 <_i2c_m_sync_init+0x3c>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1466:	2301      	movs	r3, #1
    1468:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    146a:	8a23      	ldrh	r3, [r4, #16]
    146c:	0bdb      	lsrs	r3, r3, #15
    146e:	d1fc      	bne.n	146a <_i2c_m_sync_init+0x46>
    1470:	8a23      	ldrh	r3, [r4, #16]
    1472:	0bdb      	lsrs	r3, r3, #15
    1474:	d1fc      	bne.n	1470 <_i2c_m_sync_init+0x4c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a & ~SERCOM_I2CM_CTRLA_ENABLE);
    1476:	006b      	lsls	r3, r5, #1
    1478:	195b      	adds	r3, r3, r5
    147a:	00da      	lsls	r2, r3, #3
    147c:	4b13      	ldr	r3, [pc, #76]	; (14cc <_i2c_m_sync_init+0xa8>)
    147e:	189b      	adds	r3, r3, r2
    1480:	685b      	ldr	r3, [r3, #4]
    1482:	2202      	movs	r2, #2
    1484:	4393      	bics	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    1486:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1488:	8a23      	ldrh	r3, [r4, #16]
    148a:	0bdb      	lsrs	r3, r3, #15
    148c:	d1fc      	bne.n	1488 <_i2c_m_sync_init+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    148e:	006b      	lsls	r3, r5, #1
    1490:	195b      	adds	r3, r3, r5
    1492:	00da      	lsls	r2, r3, #3
    1494:	4b0d      	ldr	r3, [pc, #52]	; (14cc <_i2c_m_sync_init+0xa8>)
    1496:	189b      	adds	r3, r3, r2
    1498:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    149a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    149c:	8a23      	ldrh	r3, [r4, #16]
    149e:	0bdb      	lsrs	r3, r3, #15
    14a0:	d1fc      	bne.n	149c <_i2c_m_sync_init+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    14a2:	4a0a      	ldr	r2, [pc, #40]	; (14cc <_i2c_m_sync_init+0xa8>)
    14a4:	006b      	lsls	r3, r5, #1
    14a6:	1958      	adds	r0, r3, r5
    14a8:	00c1      	lsls	r1, r0, #3
    14aa:	0008      	movs	r0, r1
    14ac:	1851      	adds	r1, r2, r1
    14ae:	8989      	ldrh	r1, [r1, #12]
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    14b0:	8161      	strh	r1, [r4, #10]
	i2c_dev->service.trise = _i2cms[i].trise;
    14b2:	1812      	adds	r2, r2, r0
    14b4:	8a13      	ldrh	r3, [r2, #16]
    14b6:	81f3      	strh	r3, [r6, #14]
}
    14b8:	2000      	movs	r0, #0
    14ba:	bd70      	pop	{r4, r5, r6, pc}
    14bc:	0000111d 	.word	0x0000111d
    14c0:	000004ff 	.word	0x000004ff
    14c4:	00012730 	.word	0x00012730
    14c8:	00000aa1 	.word	0x00000aa1
    14cc:	0001274c 	.word	0x0001274c

000014d0 <_i2c_m_sync_enable>:
{
    14d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14d2:	0006      	movs	r6, r0
	void *hw              = i2c_dev->hw;
    14d4:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    14d6:	4d18      	ldr	r5, [pc, #96]	; (1538 <_i2c_m_sync_enable+0x68>)
    14d8:	1e43      	subs	r3, r0, #1
    14da:	4198      	sbcs	r0, r3
    14dc:	b2c0      	uxtb	r0, r0
    14de:	22a6      	movs	r2, #166	; 0xa6
    14e0:	00d2      	lsls	r2, r2, #3
    14e2:	0029      	movs	r1, r5
    14e4:	4f15      	ldr	r7, [pc, #84]	; (153c <_i2c_m_sync_enable+0x6c>)
    14e6:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    14e8:	6930      	ldr	r0, [r6, #16]
    14ea:	1e43      	subs	r3, r0, #1
    14ec:	4198      	sbcs	r0, r3
    14ee:	b2c0      	uxtb	r0, r0
    14f0:	4a13      	ldr	r2, [pc, #76]	; (1540 <_i2c_m_sync_enable+0x70>)
    14f2:	0029      	movs	r1, r5
    14f4:	47b8      	blx	r7
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    14f6:	6823      	ldr	r3, [r4, #0]
    14f8:	2202      	movs	r2, #2
    14fa:	4313      	orrs	r3, r2
    14fc:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    14fe:	8a23      	ldrh	r3, [r4, #16]
    1500:	0bdb      	lsrs	r3, r3, #15
    1502:	d1fc      	bne.n	14fe <_i2c_m_sync_enable+0x2e>
    1504:	2004      	movs	r0, #4
    1506:	490f      	ldr	r1, [pc, #60]	; (1544 <_i2c_m_sync_enable+0x74>)
    1508:	8a23      	ldrh	r3, [r4, #16]
    150a:	0bdb      	lsrs	r3, r3, #15
    150c:	d1fc      	bne.n	1508 <_i2c_m_sync_enable+0x38>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    150e:	8a22      	ldrh	r2, [r4, #16]
    1510:	0912      	lsrs	r2, r2, #4
    1512:	3303      	adds	r3, #3
    1514:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1516:	2b01      	cmp	r3, #1
    1518:	d008      	beq.n	152c <_i2c_m_sync_enable+0x5c>
		timeout--;
    151a:	3901      	subs	r1, #1
		if (timeout <= 0) {
    151c:	2900      	cmp	r1, #0
    151e:	dcf3      	bgt.n	1508 <_i2c_m_sync_enable+0x38>
			if (--timeout_attempt)
    1520:	3801      	subs	r0, #1
    1522:	2800      	cmp	r0, #0
    1524:	d004      	beq.n	1530 <_i2c_m_sync_enable+0x60>
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    1526:	2310      	movs	r3, #16
    1528:	8223      	strh	r3, [r4, #16]
    152a:	e7ec      	b.n	1506 <_i2c_m_sync_enable+0x36>
	return ERR_NONE;
    152c:	2000      	movs	r0, #0
}
    152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return I2C_ERR_BUSY;
    1530:	2006      	movs	r0, #6
    1532:	4240      	negs	r0, r0
    1534:	e7fb      	b.n	152e <_i2c_m_sync_enable+0x5e>
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	00012730 	.word	0x00012730
    153c:	00000aa1 	.word	0x00000aa1
    1540:	00000531 	.word	0x00000531
    1544:	0000ffff 	.word	0x0000ffff

00001548 <_i2c_m_sync_transfer>:
{
    1548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    154a:	0005      	movs	r5, r0
    154c:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    154e:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1550:	1e43      	subs	r3, r0, #1
    1552:	4198      	sbcs	r0, r3
    1554:	b2c0      	uxtb	r0, r0
    1556:	4a7b      	ldr	r2, [pc, #492]	; (1744 <_i2c_m_sync_transfer+0x1fc>)
    1558:	497b      	ldr	r1, [pc, #492]	; (1748 <_i2c_m_sync_transfer+0x200>)
    155a:	4f7c      	ldr	r7, [pc, #496]	; (174c <_i2c_m_sync_transfer+0x204>)
    155c:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    155e:	6928      	ldr	r0, [r5, #16]
    1560:	1e43      	subs	r3, r0, #1
    1562:	4198      	sbcs	r0, r3
    1564:	b2c0      	uxtb	r0, r0
    1566:	4a7a      	ldr	r2, [pc, #488]	; (1750 <_i2c_m_sync_transfer+0x208>)
    1568:	4977      	ldr	r1, [pc, #476]	; (1748 <_i2c_m_sync_transfer+0x200>)
    156a:	47b8      	blx	r7
	ASSERT(msg);
    156c:	0030      	movs	r0, r6
    156e:	1e43      	subs	r3, r0, #1
    1570:	4198      	sbcs	r0, r3
    1572:	b2c0      	uxtb	r0, r0
    1574:	4a77      	ldr	r2, [pc, #476]	; (1754 <_i2c_m_sync_transfer+0x20c>)
    1576:	4974      	ldr	r1, [pc, #464]	; (1748 <_i2c_m_sync_transfer+0x200>)
    1578:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    157a:	886b      	ldrh	r3, [r5, #2]
    157c:	05db      	lsls	r3, r3, #23
    157e:	d500      	bpl.n	1582 <_i2c_m_sync_transfer+0x3a>
    1580:	e0dc      	b.n	173c <_i2c_m_sync_transfer+0x1f4>
	msg->flags |= I2C_M_BUSY;
    1582:	8872      	ldrh	r2, [r6, #2]
    1584:	2380      	movs	r3, #128	; 0x80
    1586:	005b      	lsls	r3, r3, #1
    1588:	469c      	mov	ip, r3
    158a:	431a      	orrs	r2, r3
    158c:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    158e:	002a      	movs	r2, r5
    1590:	0031      	movs	r1, r6
    1592:	c989      	ldmia	r1!, {r0, r3, r7}
    1594:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1596:	6862      	ldr	r2, [r4, #4]
    1598:	4663      	mov	r3, ip
    159a:	4313      	orrs	r3, r2
    159c:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    159e:	8a23      	ldrh	r3, [r4, #16]
    15a0:	0bdb      	lsrs	r3, r3, #15
    15a2:	d1fc      	bne.n	159e <_i2c_m_sync_transfer+0x56>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    15a4:	0028      	movs	r0, r5
    15a6:	4b6c      	ldr	r3, [pc, #432]	; (1758 <_i2c_m_sync_transfer+0x210>)
    15a8:	4798      	blx	r3
	if (ret) {
    15aa:	2800      	cmp	r0, #0
    15ac:	d100      	bne.n	15b0 <_i2c_m_sync_transfer+0x68>
    15ae:	e07d      	b.n	16ac <_i2c_m_sync_transfer+0x164>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    15b0:	886b      	ldrh	r3, [r5, #2]
    15b2:	4a6a      	ldr	r2, [pc, #424]	; (175c <_i2c_m_sync_transfer+0x214>)
    15b4:	4013      	ands	r3, r2
    15b6:	806b      	strh	r3, [r5, #2]
}
    15b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    15ba:	2005      	movs	r0, #5
    15bc:	4240      	negs	r0, r0
    15be:	e086      	b.n	16ce <_i2c_m_sync_transfer+0x186>
			if (msg->flags & I2C_M_STOP) {
    15c0:	8873      	ldrh	r3, [r6, #2]
    15c2:	b21b      	sxth	r3, r3
    15c4:	2b00      	cmp	r3, #0
    15c6:	db04      	blt.n	15d2 <_i2c_m_sync_transfer+0x8a>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    15c8:	886b      	ldrh	r3, [r5, #2]
    15ca:	4a64      	ldr	r2, [pc, #400]	; (175c <_i2c_m_sync_transfer+0x214>)
    15cc:	4013      	ands	r3, r2
    15ce:	806b      	strh	r3, [r5, #2]
			return ret;
    15d0:	e7f2      	b.n	15b8 <_i2c_m_sync_transfer+0x70>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15d2:	6862      	ldr	r2, [r4, #4]
    15d4:	23c0      	movs	r3, #192	; 0xc0
    15d6:	029b      	lsls	r3, r3, #10
    15d8:	4313      	orrs	r3, r2
    15da:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    15dc:	8a23      	ldrh	r3, [r4, #16]
    15de:	0bdb      	lsrs	r3, r3, #15
    15e0:	d1fc      	bne.n	15dc <_i2c_m_sync_transfer+0x94>
    15e2:	e7f1      	b.n	15c8 <_i2c_m_sync_transfer+0x80>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    15e4:	075b      	lsls	r3, r3, #29
    15e6:	d40b      	bmi.n	1600 <_i2c_m_sync_transfer+0xb8>
			if (msg->len == 0) {
    15e8:	6868      	ldr	r0, [r5, #4]
    15ea:	2800      	cmp	r0, #0
    15ec:	d12d      	bne.n	164a <_i2c_m_sync_transfer+0x102>
				if (msg->flags & I2C_M_STOP) {
    15ee:	886b      	ldrh	r3, [r5, #2]
    15f0:	b21b      	sxth	r3, r3
    15f2:	2b00      	cmp	r3, #0
    15f4:	db20      	blt.n	1638 <_i2c_m_sync_transfer+0xf0>
				msg->flags &= ~I2C_M_BUSY;
    15f6:	886b      	ldrh	r3, [r5, #2]
    15f8:	4a58      	ldr	r2, [pc, #352]	; (175c <_i2c_m_sync_transfer+0x214>)
    15fa:	4013      	ands	r3, r2
    15fc:	806b      	strh	r3, [r5, #2]
    15fe:	e055      	b.n	16ac <_i2c_m_sync_transfer+0x164>
				if (msg->len > 0) {
    1600:	686b      	ldr	r3, [r5, #4]
    1602:	2b00      	cmp	r3, #0
    1604:	dd04      	ble.n	1610 <_i2c_m_sync_transfer+0xc8>
					msg->flags |= I2C_M_FAIL;
    1606:	886b      	ldrh	r3, [r5, #2]
    1608:	2280      	movs	r2, #128	; 0x80
    160a:	0152      	lsls	r2, r2, #5
    160c:	4313      	orrs	r3, r2
    160e:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1610:	886b      	ldrh	r3, [r5, #2]
    1612:	b21b      	sxth	r3, r3
    1614:	2b00      	cmp	r3, #0
    1616:	db06      	blt.n	1626 <_i2c_m_sync_transfer+0xde>
				msg->flags &= ~I2C_M_BUSY;
    1618:	886b      	ldrh	r3, [r5, #2]
    161a:	4a50      	ldr	r2, [pc, #320]	; (175c <_i2c_m_sync_transfer+0x214>)
    161c:	4013      	ands	r3, r2
    161e:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1620:	2002      	movs	r0, #2
    1622:	4240      	negs	r0, r0
    1624:	e042      	b.n	16ac <_i2c_m_sync_transfer+0x164>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1626:	6862      	ldr	r2, [r4, #4]
    1628:	23c0      	movs	r3, #192	; 0xc0
    162a:	029b      	lsls	r3, r3, #10
    162c:	4313      	orrs	r3, r2
    162e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1630:	8a23      	ldrh	r3, [r4, #16]
    1632:	0bdb      	lsrs	r3, r3, #15
    1634:	d1fc      	bne.n	1630 <_i2c_m_sync_transfer+0xe8>
    1636:	e7ef      	b.n	1618 <_i2c_m_sync_transfer+0xd0>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1638:	6862      	ldr	r2, [r4, #4]
    163a:	23c0      	movs	r3, #192	; 0xc0
    163c:	029b      	lsls	r3, r3, #10
    163e:	4313      	orrs	r3, r2
    1640:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1642:	8a23      	ldrh	r3, [r4, #16]
    1644:	0bdb      	lsrs	r3, r3, #15
    1646:	d1fc      	bne.n	1642 <_i2c_m_sync_transfer+0xfa>
    1648:	e7d5      	b.n	15f6 <_i2c_m_sync_transfer+0xae>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    164a:	68ab      	ldr	r3, [r5, #8]
    164c:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    164e:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    1650:	68ab      	ldr	r3, [r5, #8]
    1652:	3301      	adds	r3, #1
    1654:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1656:	686b      	ldr	r3, [r5, #4]
    1658:	3b01      	subs	r3, #1
    165a:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    165c:	2000      	movs	r0, #0
    165e:	e025      	b.n	16ac <_i2c_m_sync_transfer+0x164>
	} else if (flags & SB_FLAG) {
    1660:	078a      	lsls	r2, r1, #30
    1662:	d569      	bpl.n	1738 <_i2c_m_sync_transfer+0x1f0>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1664:	686a      	ldr	r2, [r5, #4]
    1666:	2a00      	cmp	r2, #0
    1668:	d05e      	beq.n	1728 <_i2c_m_sync_transfer+0x1e0>
    166a:	075b      	lsls	r3, r3, #29
    166c:	d45c      	bmi.n	1728 <_i2c_m_sync_transfer+0x1e0>
			msg->len--;
    166e:	3a01      	subs	r2, #1
    1670:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    1672:	2a00      	cmp	r2, #0
    1674:	d107      	bne.n	1686 <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1676:	6862      	ldr	r2, [r4, #4]
    1678:	2380      	movs	r3, #128	; 0x80
    167a:	02db      	lsls	r3, r3, #11
    167c:	4313      	orrs	r3, r2
    167e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1680:	8a23      	ldrh	r3, [r4, #16]
    1682:	0bdb      	lsrs	r3, r3, #15
    1684:	d1fc      	bne.n	1680 <_i2c_m_sync_transfer+0x138>
			if (msg->len == 0) {
    1686:	686b      	ldr	r3, [r5, #4]
    1688:	2b00      	cmp	r3, #0
    168a:	d107      	bne.n	169c <_i2c_m_sync_transfer+0x154>
				if (msg->flags & I2C_M_STOP) {
    168c:	886b      	ldrh	r3, [r5, #2]
    168e:	b21b      	sxth	r3, r3
    1690:	2b00      	cmp	r3, #0
    1692:	db39      	blt.n	1708 <_i2c_m_sync_transfer+0x1c0>
				msg->flags &= ~I2C_M_BUSY;
    1694:	886b      	ldrh	r3, [r5, #2]
    1696:	4a31      	ldr	r2, [pc, #196]	; (175c <_i2c_m_sync_transfer+0x214>)
    1698:	4013      	ands	r3, r2
    169a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    169c:	68ab      	ldr	r3, [r5, #8]
    169e:	1c5a      	adds	r2, r3, #1
    16a0:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    16a2:	7e22      	ldrb	r2, [r4, #24]
    16a4:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    16a6:	2302      	movs	r3, #2
    16a8:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    16aa:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    16ac:	886b      	ldrh	r3, [r5, #2]
    16ae:	05db      	lsls	r3, r3, #23
    16b0:	d400      	bmi.n	16b4 <_i2c_m_sync_transfer+0x16c>
    16b2:	e781      	b.n	15b8 <_i2c_m_sync_transfer+0x70>
	void *   hw      = i2c_dev->hw;
    16b4:	692f      	ldr	r7, [r5, #16]
	uint32_t timeout = 65535;
    16b6:	4a2a      	ldr	r2, [pc, #168]	; (1760 <_i2c_m_sync_transfer+0x218>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    16b8:	7bbb      	ldrb	r3, [r7, #14]
    16ba:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    16bc:	0019      	movs	r1, r3
		if (timeout-- == 0) {
    16be:	1e50      	subs	r0, r2, #1
    16c0:	2a00      	cmp	r2, #0
    16c2:	d100      	bne.n	16c6 <_i2c_m_sync_transfer+0x17e>
    16c4:	e779      	b.n	15ba <_i2c_m_sync_transfer+0x72>
    16c6:	0002      	movs	r2, r0
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    16c8:	079b      	lsls	r3, r3, #30
    16ca:	d0f5      	beq.n	16b8 <_i2c_m_sync_transfer+0x170>
	return I2C_OK;
    16cc:	2000      	movs	r0, #0
		if (ret) {
    16ce:	2800      	cmp	r0, #0
    16d0:	d000      	beq.n	16d4 <_i2c_m_sync_transfer+0x18c>
    16d2:	e775      	b.n	15c0 <_i2c_m_sync_transfer+0x78>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    16d4:	8a23      	ldrh	r3, [r4, #16]
    16d6:	0bdb      	lsrs	r3, r3, #15
    16d8:	d1fc      	bne.n	16d4 <_i2c_m_sync_transfer+0x18c>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    16da:	8a23      	ldrh	r3, [r4, #16]
    16dc:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    16de:	07ca      	lsls	r2, r1, #31
    16e0:	d5be      	bpl.n	1660 <_i2c_m_sync_transfer+0x118>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    16e2:	079a      	lsls	r2, r3, #30
    16e4:	d400      	bmi.n	16e8 <_i2c_m_sync_transfer+0x1a0>
    16e6:	e77d      	b.n	15e4 <_i2c_m_sync_transfer+0x9c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    16e8:	2201      	movs	r2, #1
    16ea:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    16ec:	886a      	ldrh	r2, [r5, #2]
    16ee:	2180      	movs	r1, #128	; 0x80
    16f0:	0149      	lsls	r1, r1, #5
    16f2:	430a      	orrs	r2, r1
    16f4:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    16f6:	886a      	ldrh	r2, [r5, #2]
    16f8:	4918      	ldr	r1, [pc, #96]	; (175c <_i2c_m_sync_transfer+0x214>)
    16fa:	400a      	ands	r2, r1
    16fc:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    16fe:	07db      	lsls	r3, r3, #31
    1700:	d517      	bpl.n	1732 <_i2c_m_sync_transfer+0x1ea>
				return I2C_ERR_BUS;
    1702:	2005      	movs	r0, #5
    1704:	4240      	negs	r0, r0
    1706:	e7d1      	b.n	16ac <_i2c_m_sync_transfer+0x164>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1708:	6863      	ldr	r3, [r4, #4]
    170a:	4a14      	ldr	r2, [pc, #80]	; (175c <_i2c_m_sync_transfer+0x214>)
    170c:	4013      	ands	r3, r2
    170e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1710:	8a23      	ldrh	r3, [r4, #16]
    1712:	0bdb      	lsrs	r3, r3, #15
    1714:	d1fc      	bne.n	1710 <_i2c_m_sync_transfer+0x1c8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1716:	6862      	ldr	r2, [r4, #4]
    1718:	23c0      	movs	r3, #192	; 0xc0
    171a:	029b      	lsls	r3, r3, #10
    171c:	4313      	orrs	r3, r2
    171e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1720:	8a23      	ldrh	r3, [r4, #16]
    1722:	0bdb      	lsrs	r3, r3, #15
    1724:	d1fc      	bne.n	1720 <_i2c_m_sync_transfer+0x1d8>
    1726:	e7b5      	b.n	1694 <_i2c_m_sync_transfer+0x14c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1728:	2302      	movs	r3, #2
    172a:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    172c:	2002      	movs	r0, #2
    172e:	4240      	negs	r0, r0
    1730:	e7bc      	b.n	16ac <_i2c_m_sync_transfer+0x164>
			return I2C_ERR_BAD_ADDRESS;
    1732:	2004      	movs	r0, #4
    1734:	4240      	negs	r0, r0
    1736:	e7b9      	b.n	16ac <_i2c_m_sync_transfer+0x164>
	return I2C_OK;
    1738:	2000      	movs	r0, #0
    173a:	e7b7      	b.n	16ac <_i2c_m_sync_transfer+0x164>
		return I2C_ERR_BUSY;
    173c:	2006      	movs	r0, #6
    173e:	4240      	negs	r0, r0
    1740:	e73a      	b.n	15b8 <_i2c_m_sync_transfer+0x70>
    1742:	46c0      	nop			; (mov r8, r8)
    1744:	000005c3 	.word	0x000005c3
    1748:	00012730 	.word	0x00012730
    174c:	00000aa1 	.word	0x00000aa1
    1750:	000005c4 	.word	0x000005c4
    1754:	000005c5 	.word	0x000005c5
    1758:	00001161 	.word	0x00001161
    175c:	fffffeff 	.word	0xfffffeff
    1760:	0000ffff 	.word	0x0000ffff

00001764 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1764:	b570      	push	{r4, r5, r6, lr}
    1766:	0006      	movs	r6, r0
    1768:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    176a:	0008      	movs	r0, r1
    176c:	4b62      	ldr	r3, [pc, #392]	; (18f8 <_spi_m_sync_init+0x194>)
    176e:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1770:	2300      	movs	r3, #0
    1772:	2b01      	cmp	r3, #1
    1774:	d80b      	bhi.n	178e <_spi_m_sync_init+0x2a>
		if (sercomspi_regs[i].n == n) {
    1776:	0119      	lsls	r1, r3, #4
    1778:	4a60      	ldr	r2, [pc, #384]	; (18fc <_spi_m_sync_init+0x198>)
    177a:	1852      	adds	r2, r2, r1
    177c:	7bd2      	ldrb	r2, [r2, #15]
    177e:	4290      	cmp	r0, r2
    1780:	d002      	beq.n	1788 <_spi_m_sync_init+0x24>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1782:	3301      	adds	r3, #1
    1784:	b2db      	uxtb	r3, r3
    1786:	e7f4      	b.n	1772 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1788:	4b5c      	ldr	r3, [pc, #368]	; (18fc <_spi_m_sync_init+0x198>)
    178a:	185d      	adds	r5, r3, r1
    178c:	e000      	b.n	1790 <_spi_m_sync_init+0x2c>
	return NULL;
    178e:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1790:	2e00      	cmp	r6, #0
    1792:	d100      	bne.n	1796 <_spi_m_sync_init+0x32>
    1794:	e06a      	b.n	186c <_spi_m_sync_init+0x108>
    1796:	2c00      	cmp	r4, #0
    1798:	d100      	bne.n	179c <_spi_m_sync_init+0x38>
    179a:	e065      	b.n	1868 <_spi_m_sync_init+0x104>
    179c:	2001      	movs	r0, #1
    179e:	4a58      	ldr	r2, [pc, #352]	; (1900 <_spi_m_sync_init+0x19c>)
    17a0:	4958      	ldr	r1, [pc, #352]	; (1904 <_spi_m_sync_init+0x1a0>)
    17a2:	4b59      	ldr	r3, [pc, #356]	; (1908 <_spi_m_sync_init+0x1a4>)
    17a4:	4798      	blx	r3

	if (regs == NULL) {
    17a6:	2d00      	cmp	r5, #0
    17a8:	d100      	bne.n	17ac <_spi_m_sync_init+0x48>
    17aa:	e0a2      	b.n	18f2 <_spi_m_sync_init+0x18e>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    17ac:	8a23      	ldrh	r3, [r4, #16]
    17ae:	0bdb      	lsrs	r3, r3, #15
    17b0:	d1fc      	bne.n	17ac <_spi_m_sync_init+0x48>
    17b2:	8a23      	ldrh	r3, [r4, #16]
    17b4:	0bdb      	lsrs	r3, r3, #15
    17b6:	d1fc      	bne.n	17b2 <_spi_m_sync_init+0x4e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    17b8:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    17ba:	079b      	lsls	r3, r3, #30
    17bc:	d507      	bpl.n	17ce <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    17be:	2300      	movs	r3, #0
    17c0:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    17c2:	8a23      	ldrh	r3, [r4, #16]
    17c4:	0bdb      	lsrs	r3, r3, #15
    17c6:	d1fc      	bne.n	17c2 <_spi_m_sync_init+0x5e>
    17c8:	8a23      	ldrh	r3, [r4, #16]
    17ca:	0bdb      	lsrs	r3, r3, #15
    17cc:	d1fc      	bne.n	17c8 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    17ce:	2301      	movs	r3, #1
    17d0:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    17d2:	8a23      	ldrh	r3, [r4, #16]
    17d4:	0bdb      	lsrs	r3, r3, #15
    17d6:	d1fc      	bne.n	17d2 <_spi_m_sync_init+0x6e>
    17d8:	8a23      	ldrh	r3, [r4, #16]
    17da:	0bdb      	lsrs	r3, r3, #15
    17dc:	d1fc      	bne.n	17d8 <_spi_m_sync_init+0x74>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    17de:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    17e0:	782b      	ldrb	r3, [r5, #0]
    17e2:	786a      	ldrb	r2, [r5, #1]
    17e4:	0212      	lsls	r2, r2, #8
    17e6:	431a      	orrs	r2, r3
    17e8:	78ab      	ldrb	r3, [r5, #2]
    17ea:	041b      	lsls	r3, r3, #16
    17ec:	431a      	orrs	r2, r3
    17ee:	78eb      	ldrb	r3, [r5, #3]
    17f0:	061b      	lsls	r3, r3, #24
    17f2:	4313      	orrs	r3, r2
    17f4:	221c      	movs	r2, #28
    17f6:	4013      	ands	r3, r2
    17f8:	2b08      	cmp	r3, #8
    17fa:	d039      	beq.n	1870 <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    17fc:	2c00      	cmp	r4, #0
    17fe:	d100      	bne.n	1802 <_spi_m_sync_init+0x9e>
    1800:	e073      	b.n	18ea <_spi_m_sync_init+0x186>
    1802:	2d00      	cmp	r5, #0
    1804:	d100      	bne.n	1808 <_spi_m_sync_init+0xa4>
    1806:	e06e      	b.n	18e6 <_spi_m_sync_init+0x182>
    1808:	2001      	movs	r0, #1
    180a:	4a40      	ldr	r2, [pc, #256]	; (190c <_spi_m_sync_init+0x1a8>)
    180c:	493d      	ldr	r1, [pc, #244]	; (1904 <_spi_m_sync_init+0x1a0>)
    180e:	4b3e      	ldr	r3, [pc, #248]	; (1908 <_spi_m_sync_init+0x1a4>)
    1810:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1812:	782b      	ldrb	r3, [r5, #0]
    1814:	786a      	ldrb	r2, [r5, #1]
    1816:	0212      	lsls	r2, r2, #8
    1818:	431a      	orrs	r2, r3
    181a:	78ab      	ldrb	r3, [r5, #2]
    181c:	041b      	lsls	r3, r3, #16
    181e:	431a      	orrs	r2, r3
    1820:	78eb      	ldrb	r3, [r5, #3]
    1822:	061b      	lsls	r3, r3, #24
    1824:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1826:	4a3a      	ldr	r2, [pc, #232]	; (1910 <_spi_m_sync_init+0x1ac>)
    1828:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    182a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    182c:	8a23      	ldrh	r3, [r4, #16]
    182e:	0bdb      	lsrs	r3, r3, #15
    1830:	d1fc      	bne.n	182c <_spi_m_sync_init+0xc8>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    1832:	792b      	ldrb	r3, [r5, #4]
    1834:	796a      	ldrb	r2, [r5, #5]
    1836:	0212      	lsls	r2, r2, #8
    1838:	431a      	orrs	r2, r3
    183a:	79ab      	ldrb	r3, [r5, #6]
    183c:	041b      	lsls	r3, r3, #16
    183e:	431a      	orrs	r2, r3
    1840:	79eb      	ldrb	r3, [r5, #7]
    1842:	061b      	lsls	r3, r3, #24
    1844:	4313      	orrs	r3, r2
    1846:	4a33      	ldr	r2, [pc, #204]	; (1914 <_spi_m_sync_init+0x1b0>)
    1848:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    184a:	2280      	movs	r2, #128	; 0x80
    184c:	0292      	lsls	r2, r2, #10
    184e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1850:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1852:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1854:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1856:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1858:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    185a:	792b      	ldrb	r3, [r5, #4]
    185c:	075b      	lsls	r3, r3, #29
    185e:	d146      	bne.n	18ee <_spi_m_sync_init+0x18a>
    1860:	2301      	movs	r3, #1
    1862:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    1864:	2000      	movs	r0, #0
}
    1866:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1868:	2000      	movs	r0, #0
    186a:	e798      	b.n	179e <_spi_m_sync_init+0x3a>
    186c:	2000      	movs	r0, #0
    186e:	e796      	b.n	179e <_spi_m_sync_init+0x3a>
	ASSERT(hw && regs);
    1870:	2c00      	cmp	r4, #0
    1872:	d036      	beq.n	18e2 <_spi_m_sync_init+0x17e>
    1874:	2d00      	cmp	r5, #0
    1876:	d032      	beq.n	18de <_spi_m_sync_init+0x17a>
    1878:	2001      	movs	r0, #1
    187a:	4a27      	ldr	r2, [pc, #156]	; (1918 <_spi_m_sync_init+0x1b4>)
    187c:	4921      	ldr	r1, [pc, #132]	; (1904 <_spi_m_sync_init+0x1a0>)
    187e:	4b22      	ldr	r3, [pc, #136]	; (1908 <_spi_m_sync_init+0x1a4>)
    1880:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1882:	782b      	ldrb	r3, [r5, #0]
    1884:	786a      	ldrb	r2, [r5, #1]
    1886:	0212      	lsls	r2, r2, #8
    1888:	431a      	orrs	r2, r3
    188a:	78ab      	ldrb	r3, [r5, #2]
    188c:	041b      	lsls	r3, r3, #16
    188e:	431a      	orrs	r2, r3
    1890:	78eb      	ldrb	r3, [r5, #3]
    1892:	061b      	lsls	r3, r3, #24
    1894:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1896:	4a1e      	ldr	r2, [pc, #120]	; (1910 <_spi_m_sync_init+0x1ac>)
    1898:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    189a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    189c:	8a23      	ldrh	r3, [r4, #16]
    189e:	0bdb      	lsrs	r3, r3, #15
    18a0:	d1fc      	bne.n	189c <_spi_m_sync_init+0x138>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    18a2:	792b      	ldrb	r3, [r5, #4]
    18a4:	796a      	ldrb	r2, [r5, #5]
    18a6:	0212      	lsls	r2, r2, #8
    18a8:	431a      	orrs	r2, r3
    18aa:	79ab      	ldrb	r3, [r5, #6]
    18ac:	041b      	lsls	r3, r3, #16
    18ae:	431a      	orrs	r2, r3
    18b0:	79eb      	ldrb	r3, [r5, #7]
    18b2:	061b      	lsls	r3, r3, #24
    18b4:	4313      	orrs	r3, r2
    18b6:	4a19      	ldr	r2, [pc, #100]	; (191c <_spi_m_sync_init+0x1b8>)
    18b8:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    18ba:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    18bc:	7a2b      	ldrb	r3, [r5, #8]
    18be:	7a6a      	ldrb	r2, [r5, #9]
    18c0:	0212      	lsls	r2, r2, #8
    18c2:	431a      	orrs	r2, r3
    18c4:	7aab      	ldrb	r3, [r5, #10]
    18c6:	041b      	lsls	r3, r3, #16
    18c8:	431a      	orrs	r2, r3
    18ca:	7aeb      	ldrb	r3, [r5, #11]
    18cc:	061b      	lsls	r3, r3, #24
    18ce:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    18d0:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    18d2:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    18d4:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    18d6:	8a23      	ldrh	r3, [r4, #16]
    18d8:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    18da:	d1fc      	bne.n	18d6 <_spi_m_sync_init+0x172>
    18dc:	e7bd      	b.n	185a <_spi_m_sync_init+0xf6>
	ASSERT(hw && regs);
    18de:	2000      	movs	r0, #0
    18e0:	e7cb      	b.n	187a <_spi_m_sync_init+0x116>
    18e2:	2000      	movs	r0, #0
    18e4:	e7c9      	b.n	187a <_spi_m_sync_init+0x116>
	ASSERT(hw && regs);
    18e6:	2000      	movs	r0, #0
    18e8:	e78f      	b.n	180a <_spi_m_sync_init+0xa6>
    18ea:	2000      	movs	r0, #0
    18ec:	e78d      	b.n	180a <_spi_m_sync_init+0xa6>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    18ee:	2302      	movs	r3, #2
    18f0:	e7b7      	b.n	1862 <_spi_m_sync_init+0xfe>
		return ERR_INVALID_ARG;
    18f2:	200d      	movs	r0, #13
    18f4:	4240      	negs	r0, r0
    18f6:	e7b6      	b.n	1866 <_spi_m_sync_init+0x102>
    18f8:	00000fc1 	.word	0x00000fc1
    18fc:	00012774 	.word	0x00012774
    1900:	000008cb 	.word	0x000008cb
    1904:	00012730 	.word	0x00012730
    1908:	00000aa1 	.word	0x00000aa1
    190c:	0000089a 	.word	0x0000089a
    1910:	fffffefc 	.word	0xfffffefc
    1914:	fffd3fbf 	.word	0xfffd3fbf
    1918:	000008ab 	.word	0x000008ab
    191c:	00020040 	.word	0x00020040

00001920 <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1920:	b510      	push	{r4, lr}
    1922:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1924:	d00d      	beq.n	1942 <_spi_m_sync_enable+0x22>
    1926:	6803      	ldr	r3, [r0, #0]
    1928:	2b00      	cmp	r3, #0
    192a:	d008      	beq.n	193e <_spi_m_sync_enable+0x1e>
    192c:	2001      	movs	r0, #1
    192e:	4a06      	ldr	r2, [pc, #24]	; (1948 <_spi_m_sync_enable+0x28>)
    1930:	4906      	ldr	r1, [pc, #24]	; (194c <_spi_m_sync_enable+0x2c>)
    1932:	4b07      	ldr	r3, [pc, #28]	; (1950 <_spi_m_sync_enable+0x30>)
    1934:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1936:	6820      	ldr	r0, [r4, #0]
    1938:	4b06      	ldr	r3, [pc, #24]	; (1954 <_spi_m_sync_enable+0x34>)
    193a:	4798      	blx	r3
}
    193c:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    193e:	2000      	movs	r0, #0
    1940:	e7f5      	b.n	192e <_spi_m_sync_enable+0xe>
    1942:	2000      	movs	r0, #0
    1944:	e7f3      	b.n	192e <_spi_m_sync_enable+0xe>
    1946:	46c0      	nop			; (mov r8, r8)
    1948:	00000932 	.word	0x00000932
    194c:	00012730 	.word	0x00012730
    1950:	00000aa1 	.word	0x00000aa1
    1954:	00001049 	.word	0x00001049

00001958 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1958:	b570      	push	{r4, r5, r6, lr}
    195a:	b088      	sub	sp, #32
    195c:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    195e:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1960:	680b      	ldr	r3, [r1, #0]
    1962:	9303      	str	r3, [sp, #12]
    1964:	684b      	ldr	r3, [r1, #4]
    1966:	9304      	str	r3, [sp, #16]
    1968:	2300      	movs	r3, #0
    196a:	9305      	str	r3, [sp, #20]
    196c:	9306      	str	r3, [sp, #24]
    196e:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1970:	2800      	cmp	r0, #0
    1972:	d014      	beq.n	199e <_spi_m_sync_trans+0x46>
    1974:	2c00      	cmp	r4, #0
    1976:	d010      	beq.n	199a <_spi_m_sync_trans+0x42>
    1978:	2001      	movs	r0, #1
    197a:	4a2d      	ldr	r2, [pc, #180]	; (1a30 <_spi_m_sync_trans+0xd8>)
    197c:	492d      	ldr	r1, [pc, #180]	; (1a34 <_spi_m_sync_trans+0xdc>)
    197e:	4b2e      	ldr	r3, [pc, #184]	; (1a38 <_spi_m_sync_trans+0xe0>)
    1980:	4798      	blx	r3
    1982:	8a23      	ldrh	r3, [r4, #16]
    1984:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    1986:	d14f      	bne.n	1a28 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1988:	8a23      	ldrh	r3, [r4, #16]
    198a:	0bdb      	lsrs	r3, r3, #15
    198c:	d1fc      	bne.n	1988 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    198e:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1990:	079b      	lsls	r3, r3, #30
    1992:	d418      	bmi.n	19c6 <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    1994:	2014      	movs	r0, #20
    1996:	4240      	negs	r0, r0
    1998:	e044      	b.n	1a24 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    199a:	2000      	movs	r0, #0
    199c:	e7ed      	b.n	197a <_spi_m_sync_trans+0x22>
    199e:	2000      	movs	r0, #0
    19a0:	e7eb      	b.n	197a <_spi_m_sync_trans+0x22>
		return false;
    19a2:	2200      	movs	r2, #0
    19a4:	e026      	b.n	19f4 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    19a6:	7858      	ldrb	r0, [r3, #1]
    19a8:	0200      	lsls	r0, r0, #8
    19aa:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    19ac:	3302      	adds	r3, #2
    19ae:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    19b0:	3201      	adds	r2, #1
    19b2:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    19b4:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    19b6:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    19b8:	9805      	ldr	r0, [sp, #20]
    19ba:	68ab      	ldr	r3, [r5, #8]
    19bc:	4298      	cmp	r0, r3
    19be:	d302      	bcc.n	19c6 <_spi_m_sync_trans+0x6e>
    19c0:	9a06      	ldr	r2, [sp, #24]
    19c2:	4293      	cmp	r3, r2
    19c4:	d929      	bls.n	1a1a <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    19c6:	7ba3      	ldrb	r3, [r4, #14]
    19c8:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    19ca:	075a      	lsls	r2, r3, #29
    19cc:	d5e9      	bpl.n	19a2 <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    19ce:	8b22      	ldrh	r2, [r4, #24]
    19d0:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    19d2:	9904      	ldr	r1, [sp, #16]
    19d4:	2900      	cmp	r1, #0
    19d6:	d008      	beq.n	19ea <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    19d8:	1c48      	adds	r0, r1, #1
    19da:	9004      	str	r0, [sp, #16]
    19dc:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    19de:	2e01      	cmp	r6, #1
    19e0:	d903      	bls.n	19ea <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    19e2:	1c88      	adds	r0, r1, #2
    19e4:	9004      	str	r0, [sp, #16]
    19e6:	0a12      	lsrs	r2, r2, #8
    19e8:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    19ea:	9a06      	ldr	r2, [sp, #24]
    19ec:	9201      	str	r2, [sp, #4]
    19ee:	3201      	adds	r2, #1
    19f0:	9206      	str	r2, [sp, #24]
	return true;
    19f2:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    19f4:	2a00      	cmp	r2, #0
    19f6:	d1df      	bne.n	19b8 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    19f8:	9906      	ldr	r1, [sp, #24]
    19fa:	9a05      	ldr	r2, [sp, #20]
    19fc:	4291      	cmp	r1, r2
    19fe:	d3db      	bcc.n	19b8 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1a00:	07db      	lsls	r3, r3, #31
    1a02:	d5d9      	bpl.n	19b8 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    1a04:	9b03      	ldr	r3, [sp, #12]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d005      	beq.n	1a16 <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    1a0a:	1c59      	adds	r1, r3, #1
    1a0c:	9103      	str	r1, [sp, #12]
    1a0e:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    1a10:	2e01      	cmp	r6, #1
    1a12:	d8c8      	bhi.n	19a6 <_spi_m_sync_trans+0x4e>
    1a14:	e7cc      	b.n	19b0 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    1a16:	4909      	ldr	r1, [pc, #36]	; (1a3c <_spi_m_sync_trans+0xe4>)
    1a18:	e7ca      	b.n	19b0 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1a1a:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1a1c:	079b      	lsls	r3, r3, #30
    1a1e:	d0fc      	beq.n	1a1a <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1a20:	2303      	movs	r3, #3
    1a22:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1a24:	b008      	add	sp, #32
    1a26:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    1a28:	2004      	movs	r0, #4
    1a2a:	4240      	negs	r0, r0
    1a2c:	e7fa      	b.n	1a24 <_spi_m_sync_trans+0xcc>
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	00000a29 	.word	0x00000a29
    1a34:	00012730 	.word	0x00012730
    1a38:	00000aa1 	.word	0x00000aa1
    1a3c:	000001ff 	.word	0x000001ff

00001a40 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1a40:	4b0f      	ldr	r3, [pc, #60]	; (1a80 <_sysctrl_init_sources+0x40>)
    1a42:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1a44:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1a46:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1a48:	0f92      	lsrs	r2, r2, #30
    1a4a:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1a4c:	0409      	lsls	r1, r1, #16
    1a4e:	480d      	ldr	r0, [pc, #52]	; (1a84 <_sysctrl_init_sources+0x44>)
    1a50:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1a52:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1a54:	490c      	ldr	r1, [pc, #48]	; (1a88 <_sysctrl_init_sources+0x48>)
    1a56:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1a58:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a5a:	699a      	ldr	r2, [r3, #24]
    1a5c:	2102      	movs	r1, #2
    1a5e:	430a      	orrs	r2, r1
    1a60:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1a62:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1a64:	311d      	adds	r1, #29
    1a66:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1a68:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1a6a:	4b05      	ldr	r3, [pc, #20]	; (1a80 <_sysctrl_init_sources+0x40>)
    1a6c:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1a6e:	071b      	lsls	r3, r3, #28
    1a70:	d5fb      	bpl.n	1a6a <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1a72:	4a03      	ldr	r2, [pc, #12]	; (1a80 <_sysctrl_init_sources+0x40>)
    1a74:	6a13      	ldr	r3, [r2, #32]
    1a76:	2180      	movs	r1, #128	; 0x80
    1a78:	430b      	orrs	r3, r1
    1a7a:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1a7c:	4770      	bx	lr
    1a7e:	46c0      	nop			; (mov r8, r8)
    1a80:	40000800 	.word	0x40000800
    1a84:	0fff0000 	.word	0x0fff0000
    1a88:	00000302 	.word	0x00000302

00001a8c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1a8c:	2202      	movs	r2, #2
    1a8e:	4b1b      	ldr	r3, [pc, #108]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1a90:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1a92:	4b1a      	ldr	r3, [pc, #104]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1a94:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1a96:	06db      	lsls	r3, r3, #27
    1a98:	d5fb      	bpl.n	1a92 <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1a9a:	4a19      	ldr	r2, [pc, #100]	; (1b00 <_sysctrl_init_referenced_generators+0x74>)
    1a9c:	4b17      	ldr	r3, [pc, #92]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1a9e:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1aa0:	4b18      	ldr	r3, [pc, #96]	; (1b04 <_sysctrl_init_referenced_generators+0x78>)
    1aa2:	681b      	ldr	r3, [r3, #0]
    1aa4:	0e9b      	lsrs	r3, r3, #26
    1aa6:	2b3f      	cmp	r3, #63	; 0x3f
    1aa8:	d020      	beq.n	1aec <_sysctrl_init_referenced_generators+0x60>
    1aaa:	029b      	lsls	r3, r3, #10
    1aac:	2280      	movs	r2, #128	; 0x80
    1aae:	0092      	lsls	r2, r2, #2
    1ab0:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1ab2:	4a12      	ldr	r2, [pc, #72]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1ab4:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1ab6:	2302      	movs	r3, #2
    1ab8:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1aba:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1abc:	075b      	lsls	r3, r3, #29
    1abe:	d518      	bpl.n	1af2 <_sysctrl_init_referenced_generators+0x66>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1ac0:	4b0e      	ldr	r3, [pc, #56]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1ac2:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    1ac4:	23d0      	movs	r3, #208	; 0xd0
    1ac6:	4013      	ands	r3, r2
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1ac8:	2bd0      	cmp	r3, #208	; 0xd0
    1aca:	d1f9      	bne.n	1ac0 <_sysctrl_init_referenced_generators+0x34>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    1acc:	4a0b      	ldr	r2, [pc, #44]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1ace:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1ad0:	2180      	movs	r1, #128	; 0x80
    1ad2:	430b      	orrs	r3, r1
    1ad4:	b29b      	uxth	r3, r3
    1ad6:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1ad8:	4b0b      	ldr	r3, [pc, #44]	; (1b08 <_sysctrl_init_referenced_generators+0x7c>)
    1ada:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1adc:	09db      	lsrs	r3, r3, #7
    1ade:	d1fb      	bne.n	1ad8 <_sysctrl_init_referenced_generators+0x4c>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1ae0:	4a06      	ldr	r2, [pc, #24]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1ae2:	6993      	ldr	r3, [r2, #24]
    1ae4:	2102      	movs	r1, #2
    1ae6:	438b      	bics	r3, r1
    1ae8:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1aea:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1aec:	23fc      	movs	r3, #252	; 0xfc
    1aee:	01db      	lsls	r3, r3, #7
    1af0:	e7df      	b.n	1ab2 <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1af2:	4b02      	ldr	r3, [pc, #8]	; (1afc <_sysctrl_init_referenced_generators+0x70>)
    1af4:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1af6:	06db      	lsls	r3, r3, #27
    1af8:	d5fb      	bpl.n	1af2 <_sysctrl_init_referenced_generators+0x66>
    1afa:	e7e7      	b.n	1acc <_sysctrl_init_referenced_generators+0x40>
    1afc:	40000800 	.word	0x40000800
    1b00:	04010000 	.word	0x04010000
    1b04:	00806024 	.word	0x00806024
    1b08:	40000c00 	.word	0x40000c00

00001b0c <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1b0c:	b570      	push	{r4, r5, r6, lr}
    1b0e:	0005      	movs	r5, r0
	void *const hw = device->hw;
    1b10:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1b12:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1b14:	07db      	lsls	r3, r3, #31
    1b16:	d505      	bpl.n	1b24 <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1b18:	2301      	movs	r3, #1
    1b1a:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1b1c:	6803      	ldr	r3, [r0, #0]
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d000      	beq.n	1b24 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1b22:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1b24:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1b26:	079b      	lsls	r3, r3, #30
    1b28:	d506      	bpl.n	1b38 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1b2a:	2302      	movs	r3, #2
    1b2c:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1b2e:	686b      	ldr	r3, [r5, #4]
    1b30:	2b00      	cmp	r3, #0
    1b32:	d001      	beq.n	1b38 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1b34:	0028      	movs	r0, r5
    1b36:	4798      	blx	r3
		}
	}
}
    1b38:	bd70      	pop	{r4, r5, r6, pc}
	...

00001b3c <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    1b3c:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc6_dev);
    1b3e:	4b02      	ldr	r3, [pc, #8]	; (1b48 <TC6_Handler+0xc>)
    1b40:	6818      	ldr	r0, [r3, #0]
    1b42:	4b02      	ldr	r3, [pc, #8]	; (1b4c <TC6_Handler+0x10>)
    1b44:	4798      	blx	r3
}
    1b46:	bd10      	pop	{r4, pc}
    1b48:	20000a68 	.word	0x20000a68
    1b4c:	00001b0d 	.word	0x00001b0d

00001b50 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    1b50:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc7_dev);
    1b52:	4b02      	ldr	r3, [pc, #8]	; (1b5c <TC7_Handler+0xc>)
    1b54:	6818      	ldr	r0, [r3, #0]
    1b56:	4b02      	ldr	r3, [pc, #8]	; (1b60 <TC7_Handler+0x10>)
    1b58:	4798      	blx	r3
}
    1b5a:	bd10      	pop	{r4, pc}
    1b5c:	20000a6c 	.word	0x20000a6c
    1b60:	00001b0d 	.word	0x00001b0d

00001b64 <ETH_Handler>:
	EXT_IRG_init();
}

static void ETH_Handler(void){

}
    1b64:	4770      	bx	lr
	...

00001b68 <tx_cb_USART>:
}

static void tx_cb_USART(const struct usart_async_descriptor *const io_descr)
{
	
	serialTransmitting = 0;
    1b68:	2200      	movs	r2, #0
    1b6a:	4b01      	ldr	r3, [pc, #4]	; (1b70 <tx_cb_USART+0x8>)
    1b6c:	701a      	strb	r2, [r3, #0]
}
    1b6e:	4770      	bx	lr
    1b70:	20000a9e 	.word	0x20000a9e

00001b74 <TIMER_0_task1_cb>:
	return res;
}

static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
	adcConversionRequest = 1;
    1b74:	2201      	movs	r2, #1
    1b76:	4b01      	ldr	r3, [pc, #4]	; (1b7c <TIMER_0_task1_cb+0x8>)
    1b78:	701a      	strb	r2, [r3, #0]
}
    1b7a:	4770      	bx	lr
    1b7c:	20000a98 	.word	0x20000a98

00001b80 <TIMER_0_task2_cb>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1b80:	2280      	movs	r2, #128	; 0x80
    1b82:	0412      	lsls	r2, r2, #16
    1b84:	23c0      	movs	r3, #192	; 0xc0
    1b86:	05db      	lsls	r3, r3, #23
    1b88:	61da      	str	r2, [r3, #28]

static void TIMER_0_task2_cb(const struct timer_task *const timer_task)
{
	gpio_toggle_pin_level(GLD);
	
}
    1b8a:	4770      	bx	lr

00001b8c <TIMER_IRQ_init>:
	return retVal;
}


static void TIMER_IRQ_init(void)
{
    1b8c:	b570      	push	{r4, r5, r6, lr}
			peripheral = (uint32_t)_pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1b8e:	4a13      	ldr	r2, [pc, #76]	; (1bdc <TIMER_IRQ_init+0x50>)
    1b90:	6993      	ldr	r3, [r2, #24]
    1b92:	2120      	movs	r1, #32
    1b94:	430b      	orrs	r3, r1
    1b96:	6193      	str	r3, [r2, #24]
	((Gclk *)hw)->CLKCTRL.reg = data;
    1b98:	4a11      	ldr	r2, [pc, #68]	; (1be0 <TIMER_IRQ_init+0x54>)
    1b9a:	4b12      	ldr	r3, [pc, #72]	; (1be4 <TIMER_IRQ_init+0x58>)
    1b9c:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_IRQ, RTC, _rtc_get_timer());
    1b9e:	4b12      	ldr	r3, [pc, #72]	; (1be8 <TIMER_IRQ_init+0x5c>)
    1ba0:	4798      	blx	r3
    1ba2:	0002      	movs	r2, r0
    1ba4:	4c11      	ldr	r4, [pc, #68]	; (1bec <TIMER_IRQ_init+0x60>)
    1ba6:	4912      	ldr	r1, [pc, #72]	; (1bf0 <TIMER_IRQ_init+0x64>)
    1ba8:	0020      	movs	r0, r4
    1baa:	4b12      	ldr	r3, [pc, #72]	; (1bf4 <TIMER_IRQ_init+0x68>)
    1bac:	4798      	blx	r3
	
	TIMER_task1.interval = 32768/16;
    1bae:	4912      	ldr	r1, [pc, #72]	; (1bf8 <TIMER_IRQ_init+0x6c>)
    1bb0:	2280      	movs	r2, #128	; 0x80
    1bb2:	0112      	lsls	r2, r2, #4
    1bb4:	608a      	str	r2, [r1, #8]
	TIMER_task1.cb       = TIMER_0_task1_cb;
    1bb6:	4b11      	ldr	r3, [pc, #68]	; (1bfc <TIMER_IRQ_init+0x70>)
    1bb8:	60cb      	str	r3, [r1, #12]
	TIMER_task1.mode     = TIMER_TASK_REPEAT;
    1bba:	2301      	movs	r3, #1
    1bbc:	740b      	strb	r3, [r1, #16]
	
	TIMER_task2.interval = 32768/16;
    1bbe:	4d10      	ldr	r5, [pc, #64]	; (1c00 <TIMER_IRQ_init+0x74>)
    1bc0:	60aa      	str	r2, [r5, #8]
	TIMER_task2.cb       = TIMER_0_task2_cb;
    1bc2:	4a10      	ldr	r2, [pc, #64]	; (1c04 <TIMER_IRQ_init+0x78>)
    1bc4:	60ea      	str	r2, [r5, #12]
	TIMER_task2.mode     = TIMER_TASK_REPEAT;
    1bc6:	742b      	strb	r3, [r5, #16]

	timer_add_task(&TIMER_IRQ, &TIMER_task1);
    1bc8:	0020      	movs	r0, r4
    1bca:	4e0f      	ldr	r6, [pc, #60]	; (1c08 <TIMER_IRQ_init+0x7c>)
    1bcc:	47b0      	blx	r6
	timer_add_task(&TIMER_IRQ, &TIMER_task2);
    1bce:	0029      	movs	r1, r5
    1bd0:	0020      	movs	r0, r4
    1bd2:	47b0      	blx	r6
	timer_start(&TIMER_IRQ);
    1bd4:	0020      	movs	r0, r4
    1bd6:	4b0d      	ldr	r3, [pc, #52]	; (1c0c <TIMER_IRQ_init+0x80>)
    1bd8:	4798      	blx	r3
    1bda:	bd70      	pop	{r4, r5, r6, pc}
    1bdc:	40000400 	.word	0x40000400
    1be0:	00004302 	.word	0x00004302
    1be4:	40000c00 	.word	0x40000c00
    1be8:	00000fa9 	.word	0x00000fa9
    1bec:	20000ef0 	.word	0x20000ef0
    1bf0:	40001400 	.word	0x40001400
    1bf4:	00000695 	.word	0x00000695
    1bf8:	20000a70 	.word	0x20000a70
    1bfc:	00001b75 	.word	0x00001b75
    1c00:	20000a84 	.word	0x20000a84
    1c04:	00001b81 	.word	0x00001b81
    1c08:	00000715 	.word	0x00000715
    1c0c:	000006d9 	.word	0x000006d9

00001c10 <rx_cb_USART>:
static void rx_cb_USART(const struct usart_async_descriptor *const io_descr) {
    1c10:	b530      	push	{r4, r5, lr}
    1c12:	b0a1      	sub	sp, #132	; 0x84
	bytesRead = io_read(&DEBUG_SERIAL, buffer, RX_BUFFER_SIZE);
    1c14:	2280      	movs	r2, #128	; 0x80
    1c16:	4669      	mov	r1, sp
    1c18:	4821      	ldr	r0, [pc, #132]	; (1ca0 <rx_cb_USART+0x90>)
    1c1a:	4b22      	ldr	r3, [pc, #136]	; (1ca4 <rx_cb_USART+0x94>)
    1c1c:	4798      	blx	r3
	if (bytesRead > 0) {
    1c1e:	2800      	cmp	r0, #0
    1c20:	dd3c      	ble.n	1c9c <rx_cb_USART+0x8c>
    1c22:	2300      	movs	r3, #0
    1c24:	e00b      	b.n	1c3e <rx_cb_USART+0x2e>
					rx_buffer[serialReceivedBytesCounter] = '\0'; // ?????????? ?????
    1c26:	4a20      	ldr	r2, [pc, #128]	; (1ca8 <rx_cb_USART+0x98>)
    1c28:	7812      	ldrb	r2, [r2, #0]
    1c2a:	b2d2      	uxtb	r2, r2
    1c2c:	2100      	movs	r1, #0
    1c2e:	4c1f      	ldr	r4, [pc, #124]	; (1cac <rx_cb_USART+0x9c>)
    1c30:	54a1      	strb	r1, [r4, r2]
					serialComplete = 1;
    1c32:	2401      	movs	r4, #1
    1c34:	4a1e      	ldr	r2, [pc, #120]	; (1cb0 <rx_cb_USART+0xa0>)
    1c36:	7014      	strb	r4, [r2, #0]
					serialReceiving = 0;
    1c38:	4a1e      	ldr	r2, [pc, #120]	; (1cb4 <rx_cb_USART+0xa4>)
    1c3a:	7011      	strb	r1, [r2, #0]
		for (int i = 0; i < bytesRead; i++) {
    1c3c:	3301      	adds	r3, #1
    1c3e:	4283      	cmp	r3, r0
    1c40:	da2c      	bge.n	1c9c <rx_cb_USART+0x8c>
			uint8_t inChar = buffer[i];
    1c42:	466a      	mov	r2, sp
    1c44:	5cd2      	ldrb	r2, [r2, r3]
			if (serialReceiving == 0 && inChar != '\r' && inChar != '\n') {
    1c46:	491b      	ldr	r1, [pc, #108]	; (1cb4 <rx_cb_USART+0xa4>)
    1c48:	7809      	ldrb	r1, [r1, #0]
    1c4a:	2900      	cmp	r1, #0
    1c4c:	d109      	bne.n	1c62 <rx_cb_USART+0x52>
    1c4e:	2a0d      	cmp	r2, #13
    1c50:	d007      	beq.n	1c62 <rx_cb_USART+0x52>
    1c52:	2a0a      	cmp	r2, #10
    1c54:	d005      	beq.n	1c62 <rx_cb_USART+0x52>
				serialReceiving = 1;
    1c56:	2401      	movs	r4, #1
    1c58:	4916      	ldr	r1, [pc, #88]	; (1cb4 <rx_cb_USART+0xa4>)
    1c5a:	700c      	strb	r4, [r1, #0]
				serialReceivedBytesCounter = 0;
    1c5c:	2400      	movs	r4, #0
    1c5e:	4912      	ldr	r1, [pc, #72]	; (1ca8 <rx_cb_USART+0x98>)
    1c60:	700c      	strb	r4, [r1, #0]
			if (serialReceiving) {
    1c62:	4914      	ldr	r1, [pc, #80]	; (1cb4 <rx_cb_USART+0xa4>)
    1c64:	7809      	ldrb	r1, [r1, #0]
    1c66:	2900      	cmp	r1, #0
    1c68:	d0e8      	beq.n	1c3c <rx_cb_USART+0x2c>
				if (inChar == '\r' || inChar == '\n') {
    1c6a:	2a0d      	cmp	r2, #13
    1c6c:	d0db      	beq.n	1c26 <rx_cb_USART+0x16>
    1c6e:	2a0a      	cmp	r2, #10
    1c70:	d0d9      	beq.n	1c26 <rx_cb_USART+0x16>
					} else if (serialReceivedBytesCounter < RX_BUFFER_SIZE - 1) {
    1c72:	490d      	ldr	r1, [pc, #52]	; (1ca8 <rx_cb_USART+0x98>)
    1c74:	7809      	ldrb	r1, [r1, #0]
    1c76:	b2c9      	uxtb	r1, r1
    1c78:	297e      	cmp	r1, #126	; 0x7e
    1c7a:	d808      	bhi.n	1c8e <rx_cb_USART+0x7e>
					rx_buffer[serialReceivedBytesCounter++] = inChar;
    1c7c:	4d0a      	ldr	r5, [pc, #40]	; (1ca8 <rx_cb_USART+0x98>)
    1c7e:	7829      	ldrb	r1, [r5, #0]
    1c80:	b2c9      	uxtb	r1, r1
    1c82:	1c4c      	adds	r4, r1, #1
    1c84:	b2e4      	uxtb	r4, r4
    1c86:	702c      	strb	r4, [r5, #0]
    1c88:	4c08      	ldr	r4, [pc, #32]	; (1cac <rx_cb_USART+0x9c>)
    1c8a:	5462      	strb	r2, [r4, r1]
    1c8c:	e7d6      	b.n	1c3c <rx_cb_USART+0x2c>
					serialReceiving = 0; // ???????????? ??????
    1c8e:	2100      	movs	r1, #0
    1c90:	4a08      	ldr	r2, [pc, #32]	; (1cb4 <rx_cb_USART+0xa4>)
    1c92:	7011      	strb	r1, [r2, #0]
					serialBufferOverflow = 1;
    1c94:	3101      	adds	r1, #1
    1c96:	4a08      	ldr	r2, [pc, #32]	; (1cb8 <rx_cb_USART+0xa8>)
    1c98:	7011      	strb	r1, [r2, #0]
    1c9a:	e7cf      	b.n	1c3c <rx_cb_USART+0x2c>
}
    1c9c:	b021      	add	sp, #132	; 0x84
    1c9e:	bd30      	pop	{r4, r5, pc}
    1ca0:	20000ea0 	.word	0x20000ea0
    1ca4:	00000431 	.word	0x00000431
    1ca8:	20000a9c 	.word	0x20000a9c
    1cac:	20000de4 	.word	0x20000de4
    1cb0:	20000a9b 	.word	0x20000a9b
    1cb4:	20000a9d 	.word	0x20000a9d
    1cb8:	20000a9a 	.word	0x20000a9a

00001cbc <buzer>:
void buzer(uint16_t soundTime){
    1cbc:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1cbe:	24c0      	movs	r4, #192	; 0xc0
    1cc0:	05e4      	lsls	r4, r4, #23
    1cc2:	2580      	movs	r5, #128	; 0x80
    1cc4:	04ad      	lsls	r5, r5, #18
    1cc6:	61a5      	str	r5, [r4, #24]
	delay_ms(soundTime);
    1cc8:	4b01      	ldr	r3, [pc, #4]	; (1cd0 <buzer+0x14>)
    1cca:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ccc:	6165      	str	r5, [r4, #20]
}
    1cce:	bd70      	pop	{r4, r5, r6, pc}
    1cd0:	000001b9 	.word	0x000001b9

00001cd4 <err_cb_USART>:
static void err_cb_USART(const struct usart_async_descriptor *const io_descr) {
    1cd4:	b510      	push	{r4, lr}
	buzer(2);
    1cd6:	2002      	movs	r0, #2
    1cd8:	4b03      	ldr	r3, [pc, #12]	; (1ce8 <err_cb_USART+0x14>)
    1cda:	4798      	blx	r3
	errorCounter++;
    1cdc:	4a03      	ldr	r2, [pc, #12]	; (1cec <err_cb_USART+0x18>)
    1cde:	7813      	ldrb	r3, [r2, #0]
    1ce0:	3301      	adds	r3, #1
    1ce2:	b2db      	uxtb	r3, r3
    1ce4:	7013      	strb	r3, [r2, #0]
}
    1ce6:	bd10      	pop	{r4, pc}
    1ce8:	00001cbd 	.word	0x00001cbd
    1cec:	20000a99 	.word	0x20000a99

00001cf0 <gpio_init>:
void gpio_init(void){
    1cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cf2:	46de      	mov	lr, fp
    1cf4:	4657      	mov	r7, sl
    1cf6:	464e      	mov	r6, r9
    1cf8:	4645      	mov	r5, r8
    1cfa:	b5e0      	push	{r5, r6, r7, lr}
    1cfc:	22c0      	movs	r2, #192	; 0xc0
    1cfe:	05d2      	lsls	r2, r2, #23
    1d00:	2380      	movs	r3, #128	; 0x80
    1d02:	039b      	lsls	r3, r3, #14
    1d04:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d06:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d08:	4b90      	ldr	r3, [pc, #576]	; (1f4c <gpio_init+0x25c>)
    1d0a:	2180      	movs	r1, #128	; 0x80
    1d0c:	05c9      	lsls	r1, r1, #23
    1d0e:	6299      	str	r1, [r3, #40]	; 0x28
    1d10:	498f      	ldr	r1, [pc, #572]	; (1f50 <gpio_init+0x260>)
    1d12:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d14:	2455      	movs	r4, #85	; 0x55
    1d16:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d18:	2101      	movs	r1, #1
    1d1a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d1c:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d1e:	2080      	movs	r0, #128	; 0x80
    1d20:	0280      	lsls	r0, r0, #10
    1d22:	343f      	adds	r4, #63	; 0x3f
    1d24:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d26:	3c0c      	subs	r4, #12
    1d28:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d2a:	20a8      	movs	r0, #168	; 0xa8
    1d2c:	2480      	movs	r4, #128	; 0x80
    1d2e:	05e4      	lsls	r4, r4, #23
    1d30:	501c      	str	r4, [r3, r0]
    1d32:	4c88      	ldr	r4, [pc, #544]	; (1f54 <gpio_init+0x264>)
    1d34:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d36:	25d1      	movs	r5, #209	; 0xd1
    1d38:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d3a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d3c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1d3e:	2480      	movs	r4, #128	; 0x80
    1d40:	46a1      	mov	r9, r4
    1d42:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d44:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d46:	4c84      	ldr	r4, [pc, #528]	; (1f58 <gpio_init+0x268>)
    1d48:	629c      	str	r4, [r3, #40]	; 0x28
    1d4a:	27c0      	movs	r7, #192	; 0xc0
    1d4c:	063f      	lsls	r7, r7, #24
    1d4e:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d50:	3d8a      	subs	r5, #138	; 0x8a
    1d52:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d54:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d56:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d58:	2480      	movs	r4, #128	; 0x80
    1d5a:	0064      	lsls	r4, r4, #1
    1d5c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d5e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d60:	4c7e      	ldr	r4, [pc, #504]	; (1f5c <gpio_init+0x26c>)
    1d62:	629c      	str	r4, [r3, #40]	; 0x28
    1d64:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d66:	3501      	adds	r5, #1
    1d68:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d6a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d6c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d6e:	2480      	movs	r4, #128	; 0x80
    1d70:	00a4      	lsls	r4, r4, #2
    1d72:	46a4      	mov	ip, r4
    1d74:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d76:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d78:	4c79      	ldr	r4, [pc, #484]	; (1f60 <gpio_init+0x270>)
    1d7a:	629c      	str	r4, [r3, #40]	; 0x28
    1d7c:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d7e:	3501      	adds	r5, #1
    1d80:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d82:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d84:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d86:	2480      	movs	r4, #128	; 0x80
    1d88:	00e4      	lsls	r4, r4, #3
    1d8a:	46a2      	mov	sl, r4
    1d8c:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d8e:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d90:	4c74      	ldr	r4, [pc, #464]	; (1f64 <gpio_init+0x274>)
    1d92:	629c      	str	r4, [r3, #40]	; 0x28
    1d94:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d96:	3501      	adds	r5, #1
    1d98:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d9a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d9c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d9e:	2480      	movs	r4, #128	; 0x80
    1da0:	0124      	lsls	r4, r4, #4
    1da2:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1da4:	4c70      	ldr	r4, [pc, #448]	; (1f68 <gpio_init+0x278>)
    1da6:	629c      	str	r4, [r3, #40]	; 0x28
    1da8:	4c70      	ldr	r4, [pc, #448]	; (1f6c <gpio_init+0x27c>)
    1daa:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1dac:	244b      	movs	r4, #75	; 0x4b
    1dae:	46a0      	mov	r8, r4
    1db0:	5d1c      	ldrb	r4, [r3, r4]
    1db2:	46a3      	mov	fp, r4
    1db4:	2404      	movs	r4, #4
    1db6:	465d      	mov	r5, fp
    1db8:	43a5      	bics	r5, r4
    1dba:	46ab      	mov	fp, r5
    1dbc:	4645      	mov	r5, r8
    1dbe:	465e      	mov	r6, fp
    1dc0:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1dc2:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1dc4:	438d      	bics	r5, r1
    1dc6:	46ab      	mov	fp, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1dc8:	4645      	mov	r5, r8
    1dca:	465e      	mov	r6, fp
    1dcc:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1dce:	2580      	movs	r5, #128	; 0x80
    1dd0:	022d      	lsls	r5, r5, #8
    1dd2:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1dd4:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1dd6:	4d66      	ldr	r5, [pc, #408]	; (1f70 <gpio_init+0x280>)
    1dd8:	629d      	str	r5, [r3, #40]	; 0x28
    1dda:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ddc:	254f      	movs	r5, #79	; 0x4f
    1dde:	46ab      	mov	fp, r5
    1de0:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1de2:	438d      	bics	r5, r1
    1de4:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1de6:	465d      	mov	r5, fp
    1de8:	4646      	mov	r6, r8
    1dea:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dec:	2580      	movs	r5, #128	; 0x80
    1dee:	042d      	lsls	r5, r5, #16
    1df0:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1df2:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1df4:	2580      	movs	r5, #128	; 0x80
    1df6:	05ed      	lsls	r5, r5, #23
    1df8:	629d      	str	r5, [r3, #40]	; 0x28
    1dfa:	4d5e      	ldr	r5, [pc, #376]	; (1f74 <gpio_init+0x284>)
    1dfc:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1dfe:	2557      	movs	r5, #87	; 0x57
    1e00:	46ab      	mov	fp, r5
    1e02:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e04:	438d      	bics	r5, r1
    1e06:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e08:	465d      	mov	r5, fp
    1e0a:	4646      	mov	r6, r8
    1e0c:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e0e:	3541      	adds	r5, #65	; 0x41
    1e10:	4666      	mov	r6, ip
    1e12:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e14:	3d10      	subs	r5, #16
    1e16:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e18:	4d51      	ldr	r5, [pc, #324]	; (1f60 <gpio_init+0x270>)
    1e1a:	501d      	str	r5, [r3, r0]
    1e1c:	501f      	str	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e1e:	25c9      	movs	r5, #201	; 0xc9
    1e20:	5d5f      	ldrb	r7, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e22:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e24:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e26:	2784      	movs	r7, #132	; 0x84
    1e28:	4655      	mov	r5, sl
    1e2a:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e2c:	4d52      	ldr	r5, [pc, #328]	; (1f78 <gpio_init+0x288>)
    1e2e:	501d      	str	r5, [r3, r0]
    1e30:	4d4e      	ldr	r5, [pc, #312]	; (1f6c <gpio_init+0x27c>)
    1e32:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1e34:	25ca      	movs	r5, #202	; 0xca
    1e36:	46ac      	mov	ip, r5
    1e38:	5d5d      	ldrb	r5, [r3, r5]
    1e3a:	43a5      	bics	r5, r4
    1e3c:	46a8      	mov	r8, r5
    1e3e:	4665      	mov	r5, ip
    1e40:	4646      	mov	r6, r8
    1e42:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e44:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e46:	438d      	bics	r5, r1
    1e48:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e4a:	4665      	mov	r5, ip
    1e4c:	4646      	mov	r6, r8
    1e4e:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e50:	2580      	movs	r5, #128	; 0x80
    1e52:	012d      	lsls	r5, r5, #4
    1e54:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e56:	4d44      	ldr	r5, [pc, #272]	; (1f68 <gpio_init+0x278>)
    1e58:	501d      	str	r5, [r3, r0]
    1e5a:	4d44      	ldr	r5, [pc, #272]	; (1f6c <gpio_init+0x27c>)
    1e5c:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1e5e:	25cb      	movs	r5, #203	; 0xcb
    1e60:	46ac      	mov	ip, r5
    1e62:	5d5d      	ldrb	r5, [r3, r5]
    1e64:	43a5      	bics	r5, r4
    1e66:	46a8      	mov	r8, r5
    1e68:	4665      	mov	r5, ip
    1e6a:	4646      	mov	r6, r8
    1e6c:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e6e:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e70:	438d      	bics	r5, r1
    1e72:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e74:	4665      	mov	r5, ip
    1e76:	4646      	mov	r6, r8
    1e78:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e7a:	2580      	movs	r5, #128	; 0x80
    1e7c:	03ed      	lsls	r5, r5, #15
    1e7e:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e80:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e82:	2580      	movs	r5, #128	; 0x80
    1e84:	05ed      	lsls	r5, r5, #23
    1e86:	629d      	str	r5, [r3, #40]	; 0x28
    1e88:	4d3c      	ldr	r5, [pc, #240]	; (1f7c <gpio_init+0x28c>)
    1e8a:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e8c:	2556      	movs	r5, #86	; 0x56
    1e8e:	46a8      	mov	r8, r5
    1e90:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e92:	438d      	bics	r5, r1
    1e94:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e96:	4645      	mov	r5, r8
    1e98:	4666      	mov	r6, ip
    1e9a:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e9c:	2580      	movs	r5, #128	; 0x80
    1e9e:	046d      	lsls	r5, r5, #17
    1ea0:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ea2:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ea4:	2580      	movs	r5, #128	; 0x80
    1ea6:	05ed      	lsls	r5, r5, #23
    1ea8:	629d      	str	r5, [r3, #40]	; 0x28
    1eaa:	4d35      	ldr	r5, [pc, #212]	; (1f80 <gpio_init+0x290>)
    1eac:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1eae:	2558      	movs	r5, #88	; 0x58
    1eb0:	46a8      	mov	r8, r5
    1eb2:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1eb4:	438d      	bics	r5, r1
    1eb6:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1eb8:	4645      	mov	r5, r8
    1eba:	4666      	mov	r6, ip
    1ebc:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ebe:	2580      	movs	r5, #128	; 0x80
    1ec0:	04ad      	lsls	r5, r5, #18
    1ec2:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ec4:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ec6:	2580      	movs	r5, #128	; 0x80
    1ec8:	05ed      	lsls	r5, r5, #23
    1eca:	629d      	str	r5, [r3, #40]	; 0x28
    1ecc:	4e2d      	ldr	r6, [pc, #180]	; (1f84 <gpio_init+0x294>)
    1ece:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ed0:	2559      	movs	r5, #89	; 0x59
    1ed2:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ed4:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ed6:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ed8:	2640      	movs	r6, #64	; 0x40
    1eda:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1edc:	4e2a      	ldr	r6, [pc, #168]	; (1f88 <gpio_init+0x298>)
    1ede:	501e      	str	r6, [r3, r0]
    1ee0:	4d22      	ldr	r5, [pc, #136]	; (1f6c <gpio_init+0x27c>)
    1ee2:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1ee4:	26c6      	movs	r6, #198	; 0xc6
    1ee6:	5d9d      	ldrb	r5, [r3, r6]
    1ee8:	43a5      	bics	r5, r4
    1eea:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1eec:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1eee:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ef0:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ef2:	3ea6      	subs	r6, #166	; 0xa6
    1ef4:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ef6:	4e25      	ldr	r6, [pc, #148]	; (1f8c <gpio_init+0x29c>)
    1ef8:	501e      	str	r6, [r3, r0]
    1efa:	4d1c      	ldr	r5, [pc, #112]	; (1f6c <gpio_init+0x27c>)
    1efc:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1efe:	26c5      	movs	r6, #197	; 0xc5
    1f00:	5d9d      	ldrb	r5, [r3, r6]
    1f02:	43a5      	bics	r5, r4
    1f04:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f06:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f08:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f0a:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f0c:	3eb5      	subs	r6, #181	; 0xb5
    1f0e:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f10:	4e1f      	ldr	r6, [pc, #124]	; (1f90 <gpio_init+0x2a0>)
    1f12:	501e      	str	r6, [r3, r0]
    1f14:	4d15      	ldr	r5, [pc, #84]	; (1f6c <gpio_init+0x27c>)
    1f16:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f18:	26c4      	movs	r6, #196	; 0xc4
    1f1a:	5d9d      	ldrb	r5, [r3, r6]
    1f1c:	43a5      	bics	r5, r4
    1f1e:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f20:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f22:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f24:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f26:	464d      	mov	r5, r9
    1f28:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f2a:	4a1a      	ldr	r2, [pc, #104]	; (1f94 <gpio_init+0x2a4>)
    1f2c:	501a      	str	r2, [r3, r0]
    1f2e:	4a0f      	ldr	r2, [pc, #60]	; (1f6c <gpio_init+0x27c>)
    1f30:	501a      	str	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f32:	22c7      	movs	r2, #199	; 0xc7
    1f34:	5c98      	ldrb	r0, [r3, r2]
    1f36:	43a0      	bics	r0, r4
    1f38:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f3a:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f3c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f3e:	5498      	strb	r0, [r3, r2]
}
    1f40:	bc3c      	pop	{r2, r3, r4, r5}
    1f42:	4690      	mov	r8, r2
    1f44:	4699      	mov	r9, r3
    1f46:	46a2      	mov	sl, r4
    1f48:	46ab      	mov	fp, r5
    1f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f4c:	41004400 	.word	0x41004400
    1f50:	c0000020 	.word	0xc0000020
    1f54:	c0000002 	.word	0xc0000002
    1f58:	40000080 	.word	0x40000080
    1f5c:	40000100 	.word	0x40000100
    1f60:	40000200 	.word	0x40000200
    1f64:	40000400 	.word	0x40000400
    1f68:	40020800 	.word	0x40020800
    1f6c:	c0020000 	.word	0xc0020000
    1f70:	40008000 	.word	0x40008000
    1f74:	c0000080 	.word	0xc0000080
    1f78:	40020400 	.word	0x40020400
    1f7c:	c0000040 	.word	0xc0000040
    1f80:	c0000100 	.word	0xc0000100
    1f84:	c0000200 	.word	0xc0000200
    1f88:	40020040 	.word	0x40020040
    1f8c:	40020020 	.word	0x40020020
    1f90:	40020010 	.word	0x40020010
    1f94:	40020080 	.word	0x40020080

00001f98 <EXT_IRG_init>:
void EXT_IRG_init(void){
    1f98:	b510      	push	{r4, lr}
    1f9a:	4a11      	ldr	r2, [pc, #68]	; (1fe0 <EXT_IRG_init+0x48>)
    1f9c:	4b11      	ldr	r3, [pc, #68]	; (1fe4 <EXT_IRG_init+0x4c>)
    1f9e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1fa0:	2180      	movs	r1, #128	; 0x80
    1fa2:	0049      	lsls	r1, r1, #1
    1fa4:	2384      	movs	r3, #132	; 0x84
    1fa6:	22c0      	movs	r2, #192	; 0xc0
    1fa8:	05d2      	lsls	r2, r2, #23
    1faa:	50d1      	str	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1fac:	4b0e      	ldr	r3, [pc, #56]	; (1fe8 <EXT_IRG_init+0x50>)
    1fae:	22a8      	movs	r2, #168	; 0xa8
    1fb0:	490e      	ldr	r1, [pc, #56]	; (1fec <EXT_IRG_init+0x54>)
    1fb2:	5099      	str	r1, [r3, r2]
    1fb4:	490e      	ldr	r1, [pc, #56]	; (1ff0 <EXT_IRG_init+0x58>)
    1fb6:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1fb8:	21c8      	movs	r1, #200	; 0xc8
    1fba:	5c5a      	ldrb	r2, [r3, r1]
    1fbc:	2004      	movs	r0, #4
    1fbe:	4382      	bics	r2, r0
    1fc0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1fc2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1fc4:	3803      	subs	r0, #3
    1fc6:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1fc8:	4302      	orrs	r2, r0
    1fca:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1fcc:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1fce:	3914      	subs	r1, #20
    1fd0:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1fd2:	200f      	movs	r0, #15
    1fd4:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1fd6:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    1fd8:	4b06      	ldr	r3, [pc, #24]	; (1ff4 <EXT_IRG_init+0x5c>)
    1fda:	4798      	blx	r3
}
    1fdc:	bd10      	pop	{r4, pc}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	00004103 	.word	0x00004103
    1fe4:	40000c00 	.word	0x40000c00
    1fe8:	41004400 	.word	0x41004400
    1fec:	40020100 	.word	0x40020100
    1ff0:	c0020000 	.word	0xc0020000
    1ff4:	0000021d 	.word	0x0000021d

00001ff8 <ETH_SPI_init>:
void ETH_SPI_init(void){
    1ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ffa:	46de      	mov	lr, fp
    1ffc:	4657      	mov	r7, sl
    1ffe:	464e      	mov	r6, r9
    2000:	b5c0      	push	{r6, r7, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    2002:	4a3b      	ldr	r2, [pc, #236]	; (20f0 <STACK_SIZE+0xf0>)
    2004:	6a13      	ldr	r3, [r2, #32]
    2006:	2104      	movs	r1, #4
    2008:	468a      	mov	sl, r1
    200a:	430b      	orrs	r3, r1
    200c:	6213      	str	r3, [r2, #32]
    200e:	4a39      	ldr	r2, [pc, #228]	; (20f4 <STACK_SIZE+0xf4>)
    2010:	4b39      	ldr	r3, [pc, #228]	; (20f8 <STACK_SIZE+0xf8>)
    2012:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    2014:	4939      	ldr	r1, [pc, #228]	; (20fc <STACK_SIZE+0xfc>)
    2016:	483a      	ldr	r0, [pc, #232]	; (2100 <STACK_SIZE+0x100>)
    2018:	4b3a      	ldr	r3, [pc, #232]	; (2104 <STACK_SIZE+0x104>)
    201a:	4699      	mov	r9, r3
    201c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    201e:	25c0      	movs	r5, #192	; 0xc0
    2020:	05ed      	lsls	r5, r5, #23
    2022:	2310      	movs	r3, #16
    2024:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2026:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2028:	4c37      	ldr	r4, [pc, #220]	; (2108 <STACK_SIZE+0x108>)
    202a:	4b38      	ldr	r3, [pc, #224]	; (210c <STACK_SIZE+0x10c>)
    202c:	62a3      	str	r3, [r4, #40]	; 0x28
    202e:	23c0      	movs	r3, #192	; 0xc0
    2030:	061b      	lsls	r3, r3, #24
    2032:	469b      	mov	fp, r3
    2034:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2036:	2244      	movs	r2, #68	; 0x44
    2038:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    203a:	2701      	movs	r7, #1
    203c:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    203e:	2601      	movs	r6, #1
    2040:	4333      	orrs	r3, r6
    2042:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2044:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2046:	3a12      	subs	r2, #18
    2048:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    204a:	200f      	movs	r0, #15
    204c:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    204e:	2103      	movs	r1, #3
    2050:	468c      	mov	ip, r1
    2052:	4661      	mov	r1, ip
    2054:	430b      	orrs	r3, r1
    2056:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2058:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    205a:	2320      	movs	r3, #32
    205c:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    205e:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2060:	4b2b      	ldr	r3, [pc, #172]	; (2110 <STACK_SIZE+0x110>)
    2062:	62a3      	str	r3, [r4, #40]	; 0x28
    2064:	465b      	mov	r3, fp
    2066:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2068:	2345      	movs	r3, #69	; 0x45
    206a:	469b      	mov	fp, r3
    206c:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    206e:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2070:	4333      	orrs	r3, r6
    2072:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2074:	4659      	mov	r1, fp
    2076:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2078:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    207a:	3936      	subs	r1, #54	; 0x36
    207c:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    207e:	2130      	movs	r1, #48	; 0x30
    2080:	468b      	mov	fp, r1
    2082:	4659      	mov	r1, fp
    2084:	430b      	orrs	r3, r1
    2086:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2088:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    208a:	2340      	movs	r3, #64	; 0x40
    208c:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    208e:	4b21      	ldr	r3, [pc, #132]	; (2114 <STACK_SIZE+0x114>)
    2090:	62a3      	str	r3, [r4, #40]	; 0x28
    2092:	4b21      	ldr	r3, [pc, #132]	; (2118 <STACK_SIZE+0x118>)
    2094:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2096:	2346      	movs	r3, #70	; 0x46
    2098:	5ce2      	ldrb	r2, [r4, r3]
    209a:	4651      	mov	r1, sl
    209c:	438a      	bics	r2, r1
    209e:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20a0:	5ce2      	ldrb	r2, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20a2:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20a4:	4332      	orrs	r2, r6
    20a6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20a8:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20aa:	2233      	movs	r2, #51	; 0x33
    20ac:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    20ae:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    20b0:	4661      	mov	r1, ip
    20b2:	430b      	orrs	r3, r1
    20b4:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20b6:	54a3      	strb	r3, [r4, r2]
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    20b8:	4910      	ldr	r1, [pc, #64]	; (20fc <STACK_SIZE+0xfc>)
    20ba:	4811      	ldr	r0, [pc, #68]	; (2100 <STACK_SIZE+0x100>)
    20bc:	47c8      	blx	r9
	spi_m_sync_get_io_descriptor(&ETH_SPI, &eth_spi);
    20be:	4917      	ldr	r1, [pc, #92]	; (211c <STACK_SIZE+0x11c>)
    20c0:	480f      	ldr	r0, [pc, #60]	; (2100 <STACK_SIZE+0x100>)
    20c2:	4b17      	ldr	r3, [pc, #92]	; (2120 <STACK_SIZE+0x120>)
    20c4:	4798      	blx	r3
	spi_m_sync_enable(&ETH_SPI);
    20c6:	480e      	ldr	r0, [pc, #56]	; (2100 <STACK_SIZE+0x100>)
    20c8:	4b16      	ldr	r3, [pc, #88]	; (2124 <STACK_SIZE+0x124>)
    20ca:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20cc:	2380      	movs	r3, #128	; 0x80
    20ce:	031b      	lsls	r3, r3, #12
    20d0:	61ab      	str	r3, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    20d2:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20d4:	2380      	movs	r3, #128	; 0x80
    20d6:	05db      	lsls	r3, r3, #23
    20d8:	62a3      	str	r3, [r4, #40]	; 0x28
    20da:	4b13      	ldr	r3, [pc, #76]	; (2128 <STACK_SIZE+0x128>)
    20dc:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20de:	2253      	movs	r2, #83	; 0x53
    20e0:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20e2:	43bb      	bics	r3, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20e4:	54a3      	strb	r3, [r4, r2]
}
    20e6:	bc1c      	pop	{r2, r3, r4}
    20e8:	4691      	mov	r9, r2
    20ea:	469a      	mov	sl, r3
    20ec:	46a3      	mov	fp, r4
    20ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20f0:	40000400 	.word	0x40000400
    20f4:	0000400d 	.word	0x0000400d
    20f8:	40000c00 	.word	0x40000c00
    20fc:	42000800 	.word	0x42000800
    2100:	20000e80 	.word	0x20000e80
    2104:	00000469 	.word	0x00000469
    2108:	41004400 	.word	0x41004400
    210c:	40000010 	.word	0x40000010
    2110:	40000020 	.word	0x40000020
    2114:	40020040 	.word	0x40020040
    2118:	c0020000 	.word	0xc0020000
    211c:	20000de0 	.word	0x20000de0
    2120:	000005a9 	.word	0x000005a9
    2124:	000004c1 	.word	0x000004c1
    2128:	c0000008 	.word	0xc0000008

0000212c <ETH_SPI_Select>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    212c:	2800      	cmp	r0, #0
    212e:	d104      	bne.n	213a <ETH_SPI_Select+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2130:	2280      	movs	r2, #128	; 0x80
    2132:	23c0      	movs	r3, #192	; 0xc0
    2134:	05db      	lsls	r3, r3, #23
    2136:	615a      	str	r2, [r3, #20]
}
    2138:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    213a:	2280      	movs	r2, #128	; 0x80
    213c:	23c0      	movs	r3, #192	; 0xc0
    213e:	05db      	lsls	r3, r3, #23
    2140:	619a      	str	r2, [r3, #24]
    2142:	e7f9      	b.n	2138 <ETH_SPI_Select+0xc>

00002144 <W5500_Select>:
void W5500_Select(void){
    2144:	b510      	push	{r4, lr}
	ETH_SPI_Select(false);
    2146:	2000      	movs	r0, #0
    2148:	4b01      	ldr	r3, [pc, #4]	; (2150 <W5500_Select+0xc>)
    214a:	4798      	blx	r3
}
    214c:	bd10      	pop	{r4, pc}
    214e:	46c0      	nop			; (mov r8, r8)
    2150:	0000212d 	.word	0x0000212d

00002154 <W5500_Unselect>:
void W5500_Unselect(void){
    2154:	b510      	push	{r4, lr}
	ETH_SPI_Select(true);
    2156:	2001      	movs	r0, #1
    2158:	4b01      	ldr	r3, [pc, #4]	; (2160 <W5500_Unselect+0xc>)
    215a:	4798      	blx	r3
}
    215c:	bd10      	pop	{r4, pc}
    215e:	46c0      	nop			; (mov r8, r8)
    2160:	0000212d 	.word	0x0000212d

00002164 <W5500_ReadBuff>:
void W5500_ReadBuff(uint8_t* buff, uint16_t len){
    2164:	b510      	push	{r4, lr}
    2166:	0003      	movs	r3, r0
    2168:	000a      	movs	r2, r1
	io_read(eth_spi,buff,len);
    216a:	4903      	ldr	r1, [pc, #12]	; (2178 <W5500_ReadBuff+0x14>)
    216c:	6808      	ldr	r0, [r1, #0]
    216e:	0019      	movs	r1, r3
    2170:	4b02      	ldr	r3, [pc, #8]	; (217c <W5500_ReadBuff+0x18>)
    2172:	4798      	blx	r3
}
    2174:	bd10      	pop	{r4, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	20000de0 	.word	0x20000de0
    217c:	00000431 	.word	0x00000431

00002180 <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len){
    2180:	b510      	push	{r4, lr}
    2182:	0003      	movs	r3, r0
    2184:	000a      	movs	r2, r1
	io_write(eth_spi,buff,len);
    2186:	4903      	ldr	r1, [pc, #12]	; (2194 <W5500_WriteBuff+0x14>)
    2188:	6808      	ldr	r0, [r1, #0]
    218a:	0019      	movs	r1, r3
    218c:	4b02      	ldr	r3, [pc, #8]	; (2198 <W5500_WriteBuff+0x18>)
    218e:	4798      	blx	r3
}
    2190:	bd10      	pop	{r4, pc}
    2192:	46c0      	nop			; (mov r8, r8)
    2194:	20000de0 	.word	0x20000de0
    2198:	000003f9 	.word	0x000003f9

0000219c <W5500_ReadByte>:
uint8_t W5500_ReadByte(void){
    219c:	b510      	push	{r4, lr}
    219e:	b082      	sub	sp, #8
	uint8_t data_byte = 0;
    21a0:	466b      	mov	r3, sp
    21a2:	1ddc      	adds	r4, r3, #7
    21a4:	2300      	movs	r3, #0
    21a6:	7023      	strb	r3, [r4, #0]
	io_read(eth_spi,&data_byte,1);
    21a8:	4b04      	ldr	r3, [pc, #16]	; (21bc <W5500_ReadByte+0x20>)
    21aa:	6818      	ldr	r0, [r3, #0]
    21ac:	2201      	movs	r2, #1
    21ae:	0021      	movs	r1, r4
    21b0:	4b03      	ldr	r3, [pc, #12]	; (21c0 <W5500_ReadByte+0x24>)
    21b2:	4798      	blx	r3
	return data_byte;
    21b4:	7820      	ldrb	r0, [r4, #0]
}
    21b6:	b002      	add	sp, #8
    21b8:	bd10      	pop	{r4, pc}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	20000de0 	.word	0x20000de0
    21c0:	00000431 	.word	0x00000431

000021c4 <W5500_Write_byte>:
void W5500_Write_byte(uint8_t byte){
    21c4:	b500      	push	{lr}
    21c6:	b083      	sub	sp, #12
    21c8:	466b      	mov	r3, sp
    21ca:	1dd9      	adds	r1, r3, #7
    21cc:	7008      	strb	r0, [r1, #0]
	io_write(eth_spi, &byte, 1);
    21ce:	4b03      	ldr	r3, [pc, #12]	; (21dc <W5500_Write_byte+0x18>)
    21d0:	6818      	ldr	r0, [r3, #0]
    21d2:	2201      	movs	r2, #1
    21d4:	4b02      	ldr	r3, [pc, #8]	; (21e0 <W5500_Write_byte+0x1c>)
    21d6:	4798      	blx	r3
}
    21d8:	b003      	add	sp, #12
    21da:	bd00      	pop	{pc}
    21dc:	20000de0 	.word	0x20000de0
    21e0:	000003f9 	.word	0x000003f9

000021e4 <EXT_SPI_init>:
void EXT_SPI_init(void){
    21e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21e6:	46d6      	mov	lr, sl
    21e8:	464f      	mov	r7, r9
    21ea:	b580      	push	{r7, lr}
    21ec:	4a33      	ldr	r2, [pc, #204]	; (22bc <EXT_SPI_init+0xd8>)
    21ee:	6a13      	ldr	r3, [r2, #32]
    21f0:	2120      	movs	r1, #32
    21f2:	430b      	orrs	r3, r1
    21f4:	6213      	str	r3, [r2, #32]
    21f6:	4a32      	ldr	r2, [pc, #200]	; (22c0 <EXT_SPI_init+0xdc>)
    21f8:	4b32      	ldr	r3, [pc, #200]	; (22c4 <EXT_SPI_init+0xe0>)
    21fa:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    21fc:	4932      	ldr	r1, [pc, #200]	; (22c8 <EXT_SPI_init+0xe4>)
    21fe:	4833      	ldr	r0, [pc, #204]	; (22cc <EXT_SPI_init+0xe8>)
    2200:	4e33      	ldr	r6, [pc, #204]	; (22d0 <EXT_SPI_init+0xec>)
    2202:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2204:	22c0      	movs	r2, #192	; 0xc0
    2206:	05d2      	lsls	r2, r2, #23
    2208:	2380      	movs	r3, #128	; 0x80
    220a:	025b      	lsls	r3, r3, #9
    220c:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    220e:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2210:	4b30      	ldr	r3, [pc, #192]	; (22d4 <EXT_SPI_init+0xf0>)
    2212:	2180      	movs	r1, #128	; 0x80
    2214:	05c9      	lsls	r1, r1, #23
    2216:	468a      	mov	sl, r1
    2218:	6299      	str	r1, [r3, #40]	; 0x28
    221a:	492f      	ldr	r1, [pc, #188]	; (22d8 <EXT_SPI_init+0xf4>)
    221c:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    221e:	2050      	movs	r0, #80	; 0x50
    2220:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2222:	2401      	movs	r4, #1
    2224:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2226:	4321      	orrs	r1, r4
    2228:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    222a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    222c:	2138      	movs	r1, #56	; 0x38
    222e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2230:	250f      	movs	r5, #15
    2232:	46ac      	mov	ip, r5
    2234:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    2236:	2703      	movs	r7, #3
    2238:	4338      	orrs	r0, r7
    223a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    223c:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    223e:	2080      	movs	r0, #128	; 0x80
    2240:	0280      	lsls	r0, r0, #10
    2242:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2244:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2246:	4650      	mov	r0, sl
    2248:	6298      	str	r0, [r3, #40]	; 0x28
    224a:	4824      	ldr	r0, [pc, #144]	; (22dc <EXT_SPI_init+0xf8>)
    224c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    224e:	2051      	movs	r0, #81	; 0x51
    2250:	4682      	mov	sl, r0
    2252:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2254:	43a0      	bics	r0, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2256:	4320      	orrs	r0, r4
    2258:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    225a:	4655      	mov	r5, sl
    225c:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    225e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2260:	3d42      	subs	r5, #66	; 0x42
    2262:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2264:	2530      	movs	r5, #48	; 0x30
    2266:	46aa      	mov	sl, r5
    2268:	4655      	mov	r5, sl
    226a:	4328      	orrs	r0, r5
    226c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    226e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2270:	2180      	movs	r1, #128	; 0x80
    2272:	02c9      	lsls	r1, r1, #11
    2274:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2276:	4a1a      	ldr	r2, [pc, #104]	; (22e0 <EXT_SPI_init+0xfc>)
    2278:	629a      	str	r2, [r3, #40]	; 0x28
    227a:	4a1a      	ldr	r2, [pc, #104]	; (22e4 <EXT_SPI_init+0x100>)
    227c:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    227e:	2252      	movs	r2, #82	; 0x52
    2280:	5c99      	ldrb	r1, [r3, r2]
    2282:	2004      	movs	r0, #4
    2284:	4381      	bics	r1, r0
    2286:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2288:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    228a:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    228c:	4321      	orrs	r1, r4
    228e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2290:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2292:	2139      	movs	r1, #57	; 0x39
    2294:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2296:	4660      	mov	r0, ip
    2298:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    229a:	433a      	orrs	r2, r7
    229c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    229e:	545a      	strb	r2, [r3, r1]
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    22a0:	4909      	ldr	r1, [pc, #36]	; (22c8 <EXT_SPI_init+0xe4>)
    22a2:	480a      	ldr	r0, [pc, #40]	; (22cc <EXT_SPI_init+0xe8>)
    22a4:	47b0      	blx	r6
	spi_m_sync_get_io_descriptor(&EXT_SPI, &ext_spi);
    22a6:	4910      	ldr	r1, [pc, #64]	; (22e8 <EXT_SPI_init+0x104>)
    22a8:	4808      	ldr	r0, [pc, #32]	; (22cc <EXT_SPI_init+0xe8>)
    22aa:	4b10      	ldr	r3, [pc, #64]	; (22ec <EXT_SPI_init+0x108>)
    22ac:	4798      	blx	r3
	spi_m_sync_enable(&EXT_SPI);
    22ae:	4807      	ldr	r0, [pc, #28]	; (22cc <EXT_SPI_init+0xe8>)
    22b0:	4b0f      	ldr	r3, [pc, #60]	; (22f0 <EXT_SPI_init+0x10c>)
    22b2:	4798      	blx	r3
}
    22b4:	bc0c      	pop	{r2, r3}
    22b6:	4691      	mov	r9, r2
    22b8:	469a      	mov	sl, r3
    22ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22bc:	40000400 	.word	0x40000400
    22c0:	00004010 	.word	0x00004010
    22c4:	40000c00 	.word	0x40000c00
    22c8:	42001400 	.word	0x42001400
    22cc:	20000e68 	.word	0x20000e68
    22d0:	00000469 	.word	0x00000469
    22d4:	41004400 	.word	0x41004400
    22d8:	c0000001 	.word	0xc0000001
    22dc:	c0000002 	.word	0xc0000002
    22e0:	40020000 	.word	0x40020000
    22e4:	c0020004 	.word	0xc0020004
    22e8:	20000e64 	.word	0x20000e64
    22ec:	000005a9 	.word	0x000005a9
    22f0:	000004c1 	.word	0x000004c1

000022f4 <EXT_SPI_ReadBuff>:
void EXT_SPI_ReadBuff(uint8_t* buff, uint16_t len){
    22f4:	b510      	push	{r4, lr}
    22f6:	0003      	movs	r3, r0
    22f8:	000a      	movs	r2, r1
	io_read(ext_spi,buff,len);
    22fa:	4903      	ldr	r1, [pc, #12]	; (2308 <EXT_SPI_ReadBuff+0x14>)
    22fc:	6808      	ldr	r0, [r1, #0]
    22fe:	0019      	movs	r1, r3
    2300:	4b02      	ldr	r3, [pc, #8]	; (230c <EXT_SPI_ReadBuff+0x18>)
    2302:	4798      	blx	r3
}
    2304:	bd10      	pop	{r4, pc}
    2306:	46c0      	nop			; (mov r8, r8)
    2308:	20000e64 	.word	0x20000e64
    230c:	00000431 	.word	0x00000431

00002310 <EXT_SPI_WriteBuff>:
void EXT_SPI_WriteBuff(uint8_t* buff, uint16_t len){
    2310:	b510      	push	{r4, lr}
    2312:	0003      	movs	r3, r0
    2314:	000a      	movs	r2, r1
	io_write(ext_spi,buff,len);
    2316:	4903      	ldr	r1, [pc, #12]	; (2324 <EXT_SPI_WriteBuff+0x14>)
    2318:	6808      	ldr	r0, [r1, #0]
    231a:	0019      	movs	r1, r3
    231c:	4b02      	ldr	r3, [pc, #8]	; (2328 <EXT_SPI_WriteBuff+0x18>)
    231e:	4798      	blx	r3
}
    2320:	bd10      	pop	{r4, pc}
    2322:	46c0      	nop			; (mov r8, r8)
    2324:	20000e64 	.word	0x20000e64
    2328:	000003f9 	.word	0x000003f9

0000232c <EXT_I2C_init>:
void EXT_I2C_init(void){
    232c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    232e:	4a1e      	ldr	r2, [pc, #120]	; (23a8 <EXT_I2C_init+0x7c>)
    2330:	6a13      	ldr	r3, [r2, #32]
    2332:	2110      	movs	r1, #16
    2334:	430b      	orrs	r3, r1
    2336:	6213      	str	r3, [r2, #32]
    2338:	4b1c      	ldr	r3, [pc, #112]	; (23ac <EXT_I2C_init+0x80>)
    233a:	4a1d      	ldr	r2, [pc, #116]	; (23b0 <EXT_I2C_init+0x84>)
    233c:	805a      	strh	r2, [r3, #2]
    233e:	4a1d      	ldr	r2, [pc, #116]	; (23b4 <EXT_I2C_init+0x88>)
    2340:	805a      	strh	r2, [r3, #2]
	i2c_m_sync_init(&EXT_I2C, SERCOM2);
    2342:	4c1d      	ldr	r4, [pc, #116]	; (23b8 <EXT_I2C_init+0x8c>)
    2344:	491d      	ldr	r1, [pc, #116]	; (23bc <EXT_I2C_init+0x90>)
    2346:	0020      	movs	r0, r4
    2348:	4b1d      	ldr	r3, [pc, #116]	; (23c0 <EXT_I2C_init+0x94>)
    234a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    234c:	4b1d      	ldr	r3, [pc, #116]	; (23c4 <EXT_I2C_init+0x98>)
    234e:	204c      	movs	r0, #76	; 0x4c
    2350:	5c19      	ldrb	r1, [r3, r0]
    2352:	2204      	movs	r2, #4
    2354:	4391      	bics	r1, r2
    2356:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2358:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    235a:	2601      	movs	r6, #1
    235c:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    235e:	2501      	movs	r5, #1
    2360:	4329      	orrs	r1, r5
    2362:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2364:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2366:	3816      	subs	r0, #22
    2368:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    236a:	270f      	movs	r7, #15
    236c:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    236e:	2702      	movs	r7, #2
    2370:	4339      	orrs	r1, r7
    2372:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2374:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2376:	214d      	movs	r1, #77	; 0x4d
    2378:	5c5f      	ldrb	r7, [r3, r1]
    237a:	4397      	bics	r7, r2
    237c:	545f      	strb	r7, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    237e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2380:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2382:	432a      	orrs	r2, r5
    2384:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2386:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2388:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    238a:	393e      	subs	r1, #62	; 0x3e
    238c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    238e:	2120      	movs	r1, #32
    2390:	430a      	orrs	r2, r1
    2392:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2394:	541a      	strb	r2, [r3, r0]
	i2c_m_sync_get_io_descriptor(&EXT_I2C, &ext_i2c);
    2396:	490c      	ldr	r1, [pc, #48]	; (23c8 <EXT_I2C_init+0x9c>)
    2398:	0020      	movs	r0, r4
    239a:	4b0c      	ldr	r3, [pc, #48]	; (23cc <EXT_I2C_init+0xa0>)
    239c:	4798      	blx	r3
	i2c_m_sync_enable(&EXT_I2C);
    239e:	0020      	movs	r0, r4
    23a0:	4b0b      	ldr	r3, [pc, #44]	; (23d0 <EXT_I2C_init+0xa4>)
    23a2:	4798      	blx	r3
}
    23a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	40000400 	.word	0x40000400
    23ac:	40000c00 	.word	0x40000c00
    23b0:	0000400f 	.word	0x0000400f
    23b4:	0000430c 	.word	0x0000430c
    23b8:	20000f0c 	.word	0x20000f0c
    23bc:	42001000 	.word	0x42001000
    23c0:	00000391 	.word	0x00000391
    23c4:	41004400 	.word	0x41004400
    23c8:	20000e9c 	.word	0x20000e9c
    23cc:	000003ef 	.word	0x000003ef
    23d0:	000003d1 	.word	0x000003d1

000023d4 <I2C_write_batch>:
bool I2C_write_batch(uint8_t addres, uint8_t *data, uint8_t data_len){
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	000d      	movs	r5, r1
    23d8:	0014      	movs	r4, r2
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
    23da:	b201      	sxth	r1, r0
    23dc:	2280      	movs	r2, #128	; 0x80
    23de:	0112      	lsls	r2, r2, #4
    23e0:	4805      	ldr	r0, [pc, #20]	; (23f8 <I2C_write_batch+0x24>)
    23e2:	4b06      	ldr	r3, [pc, #24]	; (23fc <I2C_write_batch+0x28>)
    23e4:	4798      	blx	r3
	return (io_write(ext_i2c, (uint8_t *)data, data_len) >= 0) ? true : false;
    23e6:	b2a2      	uxth	r2, r4
    23e8:	4b05      	ldr	r3, [pc, #20]	; (2400 <I2C_write_batch+0x2c>)
    23ea:	6818      	ldr	r0, [r3, #0]
    23ec:	0029      	movs	r1, r5
    23ee:	4b05      	ldr	r3, [pc, #20]	; (2404 <I2C_write_batch+0x30>)
    23f0:	4798      	blx	r3
    23f2:	43c0      	mvns	r0, r0
    23f4:	0fc0      	lsrs	r0, r0, #31
}
    23f6:	bd70      	pop	{r4, r5, r6, pc}
    23f8:	20000f0c 	.word	0x20000f0c
    23fc:	000003dd 	.word	0x000003dd
    2400:	20000e9c 	.word	0x20000e9c
    2404:	000003f9 	.word	0x000003f9

00002408 <rxBytesGet>:
	return serialComplete;
    2408:	4b01      	ldr	r3, [pc, #4]	; (2410 <rxBytesGet+0x8>)
    240a:	7818      	ldrb	r0, [r3, #0]
    240c:	b2c0      	uxtb	r0, r0
}
    240e:	4770      	bx	lr
    2410:	20000a9b 	.word	0x20000a9b

00002414 <SerialReady>:
uint8_t SerialReady(uint8_t* buff) {
    2414:	b570      	push	{r4, r5, r6, lr}
	if (serialBufferOverflow) {
    2416:	4b14      	ldr	r3, [pc, #80]	; (2468 <SerialReady+0x54>)
    2418:	781b      	ldrb	r3, [r3, #0]
    241a:	2b00      	cmp	r3, #0
    241c:	d004      	beq.n	2428 <SerialReady+0x14>
		serialBufferOverflow = 0; // ???????? ???? ????????????
    241e:	2200      	movs	r2, #0
    2420:	4b11      	ldr	r3, [pc, #68]	; (2468 <SerialReady+0x54>)
    2422:	701a      	strb	r2, [r3, #0]
		return 2; // ??? ??? ????????????
    2424:	2002      	movs	r0, #2
}
    2426:	bd70      	pop	{r4, r5, r6, pc}
	if (serialComplete) {
    2428:	4b10      	ldr	r3, [pc, #64]	; (246c <SerialReady+0x58>)
    242a:	781b      	ldrb	r3, [r3, #0]
    242c:	2b00      	cmp	r3, #0
    242e:	d101      	bne.n	2434 <SerialReady+0x20>
	return 0; // ???? ?? ?? ??????
    2430:	2000      	movs	r0, #0
    2432:	e7f8      	b.n	2426 <SerialReady+0x12>
		memcpy(buff, rx_buffer, serialReceivedBytesCounter + 1); // ???????? ? '\0'
    2434:	4c0e      	ldr	r4, [pc, #56]	; (2470 <SerialReady+0x5c>)
    2436:	7822      	ldrb	r2, [r4, #0]
    2438:	3201      	adds	r2, #1
    243a:	4d0e      	ldr	r5, [pc, #56]	; (2474 <SerialReady+0x60>)
    243c:	0029      	movs	r1, r5
    243e:	4b0e      	ldr	r3, [pc, #56]	; (2478 <SerialReady+0x64>)
    2440:	4798      	blx	r3
		memset(rx_buffer, 0, RX_BUFFER_SIZE);                   // ???????? ?????
    2442:	2280      	movs	r2, #128	; 0x80
    2444:	2100      	movs	r1, #0
    2446:	0028      	movs	r0, r5
    2448:	4b0c      	ldr	r3, [pc, #48]	; (247c <SerialReady+0x68>)
    244a:	4798      	blx	r3
		serialComplete = 0;
    244c:	2300      	movs	r3, #0
    244e:	4a07      	ldr	r2, [pc, #28]	; (246c <SerialReady+0x58>)
    2450:	7013      	strb	r3, [r2, #0]
		serialReceivedBytesCounter = 0;
    2452:	7023      	strb	r3, [r4, #0]
		DEBUG_SERIAL.rx.read_index = 0;
    2454:	4a0a      	ldr	r2, [pc, #40]	; (2480 <SerialReady+0x6c>)
    2456:	63d3      	str	r3, [r2, #60]	; 0x3c
		DEBUG_SERIAL.rx.write_index = 0;
    2458:	6413      	str	r3, [r2, #64]	; 0x40
		serialReceiving = 0;
    245a:	4a0a      	ldr	r2, [pc, #40]	; (2484 <SerialReady+0x70>)
    245c:	7013      	strb	r3, [r2, #0]
		serialBufferOverflow = 0;
    245e:	4a02      	ldr	r2, [pc, #8]	; (2468 <SerialReady+0x54>)
    2460:	7013      	strb	r3, [r2, #0]
		return 1; // ??????? ???????? ????
    2462:	2001      	movs	r0, #1
    2464:	e7df      	b.n	2426 <SerialReady+0x12>
    2466:	46c0      	nop			; (mov r8, r8)
    2468:	20000a9a 	.word	0x20000a9a
    246c:	20000a9b 	.word	0x20000a9b
    2470:	20000a9c 	.word	0x20000a9c
    2474:	20000de4 	.word	0x20000de4
    2478:	00008855 	.word	0x00008855
    247c:	000088d9 	.word	0x000088d9
    2480:	20000ea0 	.word	0x20000ea0
    2484:	20000a9d 	.word	0x20000a9d

00002488 <DEBUG_Serial_init>:
void DEBUG_Serial_init(void) {
    2488:	b5f0      	push	{r4, r5, r6, r7, lr}
    248a:	b085      	sub	sp, #20
    248c:	4a26      	ldr	r2, [pc, #152]	; (2528 <DEBUG_Serial_init+0xa0>)
    248e:	6a13      	ldr	r3, [r2, #32]
    2490:	2140      	movs	r1, #64	; 0x40
    2492:	430b      	orrs	r3, r1
    2494:	6213      	str	r3, [r2, #32]
    2496:	4a25      	ldr	r2, [pc, #148]	; (252c <DEBUG_Serial_init+0xa4>)
    2498:	4b25      	ldr	r3, [pc, #148]	; (2530 <DEBUG_Serial_init+0xa8>)
    249a:	805a      	strh	r2, [r3, #2]
	usart_async_init(&DEBUG_SERIAL, SERCOM4, rx_buffer, RX_BUFFER_SIZE, (void *)NULL);
    249c:	4c25      	ldr	r4, [pc, #148]	; (2534 <DEBUG_Serial_init+0xac>)
    249e:	2300      	movs	r3, #0
    24a0:	9300      	str	r3, [sp, #0]
    24a2:	3380      	adds	r3, #128	; 0x80
    24a4:	4a24      	ldr	r2, [pc, #144]	; (2538 <DEBUG_Serial_init+0xb0>)
    24a6:	4925      	ldr	r1, [pc, #148]	; (253c <DEBUG_Serial_init+0xb4>)
    24a8:	0020      	movs	r0, r4
    24aa:	4d25      	ldr	r5, [pc, #148]	; (2540 <DEBUG_Serial_init+0xb8>)
    24ac:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    24ae:	4b25      	ldr	r3, [pc, #148]	; (2544 <DEBUG_Serial_init+0xbc>)
    24b0:	21cc      	movs	r1, #204	; 0xcc
    24b2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    24b4:	2001      	movs	r0, #1
    24b6:	4684      	mov	ip, r0
    24b8:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    24ba:	2701      	movs	r7, #1
    24bc:	433a      	orrs	r2, r7
    24be:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    24c0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    24c2:	22b6      	movs	r2, #182	; 0xb6
    24c4:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    24c6:	260f      	movs	r6, #15
    24c8:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
    24ca:	2502      	movs	r5, #2
    24cc:	4328      	orrs	r0, r5
    24ce:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    24d0:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    24d2:	3218      	adds	r2, #24
    24d4:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    24d6:	4660      	mov	r0, ip
    24d8:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    24da:	4339      	orrs	r1, r7
    24dc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    24de:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    24e0:	21b7      	movs	r1, #183	; 0xb7
    24e2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    24e4:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    24e6:	432a      	orrs	r2, r5
    24e8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    24ea:	545a      	strb	r2, [r3, r1]
	usart_async_get_io_descriptor(&DEBUG_SERIAL, &debug_serial);
    24ec:	4916      	ldr	r1, [pc, #88]	; (2548 <DEBUG_Serial_init+0xc0>)
    24ee:	0020      	movs	r0, r4
    24f0:	4b16      	ldr	r3, [pc, #88]	; (254c <DEBUG_Serial_init+0xc4>)
    24f2:	4798      	blx	r3
	usart_async_register_callback(&DEBUG_SERIAL, USART_ASYNC_TXC_CB, tx_cb_USART);
    24f4:	4a16      	ldr	r2, [pc, #88]	; (2550 <DEBUG_Serial_init+0xc8>)
    24f6:	2101      	movs	r1, #1
    24f8:	0020      	movs	r0, r4
    24fa:	4d16      	ldr	r5, [pc, #88]	; (2554 <DEBUG_Serial_init+0xcc>)
    24fc:	47a8      	blx	r5
	usart_async_register_callback(&DEBUG_SERIAL, USART_ASYNC_RXC_CB, rx_cb_USART);
    24fe:	4a16      	ldr	r2, [pc, #88]	; (2558 <DEBUG_Serial_init+0xd0>)
    2500:	2100      	movs	r1, #0
    2502:	0020      	movs	r0, r4
    2504:	47a8      	blx	r5
	usart_async_register_callback(&DEBUG_SERIAL, USART_ASYNC_ERROR_CB, err_cb_USART);
    2506:	4a15      	ldr	r2, [pc, #84]	; (255c <DEBUG_Serial_init+0xd4>)
    2508:	2102      	movs	r1, #2
    250a:	0020      	movs	r0, r4
    250c:	47a8      	blx	r5
	while (io_read(&DEBUG_SERIAL, &dummy, 1));
    250e:	2201      	movs	r2, #1
    2510:	210f      	movs	r1, #15
    2512:	4469      	add	r1, sp
    2514:	4807      	ldr	r0, [pc, #28]	; (2534 <DEBUG_Serial_init+0xac>)
    2516:	4b12      	ldr	r3, [pc, #72]	; (2560 <DEBUG_Serial_init+0xd8>)
    2518:	4798      	blx	r3
    251a:	2800      	cmp	r0, #0
    251c:	d1f7      	bne.n	250e <DEBUG_Serial_init+0x86>
	usart_async_enable(&DEBUG_SERIAL);
    251e:	4805      	ldr	r0, [pc, #20]	; (2534 <DEBUG_Serial_init+0xac>)
    2520:	4b10      	ldr	r3, [pc, #64]	; (2564 <DEBUG_Serial_init+0xdc>)
    2522:	4798      	blx	r3
}
    2524:	b005      	add	sp, #20
    2526:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2528:	40000400 	.word	0x40000400
    252c:	00004011 	.word	0x00004011
    2530:	40000c00 	.word	0x40000c00
    2534:	20000ea0 	.word	0x20000ea0
    2538:	20000de4 	.word	0x20000de4
    253c:	42001800 	.word	0x42001800
    2540:	00000931 	.word	0x00000931
    2544:	41004400 	.word	0x41004400
    2548:	20000e98 	.word	0x20000e98
    254c:	000009f9 	.word	0x000009f9
    2550:	00001b69 	.word	0x00001b69
    2554:	00000a29 	.word	0x00000a29
    2558:	00001c11 	.word	0x00001c11
    255c:	00001cd5 	.word	0x00001cd5
    2560:	00000431 	.word	0x00000431
    2564:	000009cd 	.word	0x000009cd

00002568 <mcu_init>:
{
    2568:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    256a:	4b0a      	ldr	r3, [pc, #40]	; (2594 <mcu_init+0x2c>)
    256c:	4798      	blx	r3
	gpio_init();
    256e:	4b0a      	ldr	r3, [pc, #40]	; (2598 <mcu_init+0x30>)
    2570:	4798      	blx	r3
	ETH_SPI_init();
    2572:	4b0a      	ldr	r3, [pc, #40]	; (259c <mcu_init+0x34>)
    2574:	4798      	blx	r3
	EXT_SPI_init();
    2576:	4b0a      	ldr	r3, [pc, #40]	; (25a0 <mcu_init+0x38>)
    2578:	4798      	blx	r3
	EXT_I2C_init();
    257a:	4b0a      	ldr	r3, [pc, #40]	; (25a4 <mcu_init+0x3c>)
    257c:	4798      	blx	r3
	DEBUG_Serial_init();
    257e:	4b0a      	ldr	r3, [pc, #40]	; (25a8 <mcu_init+0x40>)
    2580:	4798      	blx	r3
	ext_irq_register(ETH_INT, ETH_Handler);
    2582:	490a      	ldr	r1, [pc, #40]	; (25ac <mcu_init+0x44>)
    2584:	2028      	movs	r0, #40	; 0x28
    2586:	4b0a      	ldr	r3, [pc, #40]	; (25b0 <mcu_init+0x48>)
    2588:	4798      	blx	r3
	TIMER_IRQ_init();
    258a:	4b0a      	ldr	r3, [pc, #40]	; (25b4 <mcu_init+0x4c>)
    258c:	4798      	blx	r3
	EXT_IRG_init();
    258e:	4b0a      	ldr	r3, [pc, #40]	; (25b8 <mcu_init+0x50>)
    2590:	4798      	blx	r3
}
    2592:	bd10      	pop	{r4, pc}
    2594:	00000c7d 	.word	0x00000c7d
    2598:	00001cf1 	.word	0x00001cf1
    259c:	00001ff9 	.word	0x00001ff9
    25a0:	000021e5 	.word	0x000021e5
    25a4:	0000232d 	.word	0x0000232d
    25a8:	00002489 	.word	0x00002489
    25ac:	00001b65 	.word	0x00001b65
    25b0:	00000251 	.word	0x00000251
    25b4:	00001b8d 	.word	0x00001b8d
    25b8:	00001f99 	.word	0x00001f99

000025bc <SerialWrite>:
void SerialWrite(uint8_t* buff) {
    25bc:	b510      	push	{r4, lr}
    25be:	0004      	movs	r4, r0
	uint8_t buffLen = strlen((char *)buff);
    25c0:	4b14      	ldr	r3, [pc, #80]	; (2614 <SerialWrite+0x58>)
    25c2:	4798      	blx	r3
    25c4:	b2c0      	uxtb	r0, r0
	if (buffLen >= 1) {
    25c6:	2800      	cmp	r0, #0
    25c8:	d100      	bne.n	25cc <SerialWrite+0x10>
}
    25ca:	bd10      	pop	{r4, pc}
		serialTransmitting = 1;
    25cc:	2201      	movs	r2, #1
    25ce:	4b12      	ldr	r3, [pc, #72]	; (2618 <SerialWrite+0x5c>)
    25d0:	701a      	strb	r2, [r3, #0]
		io_write(debug_serial, buff, buffLen);
    25d2:	b282      	uxth	r2, r0
    25d4:	4b11      	ldr	r3, [pc, #68]	; (261c <SerialWrite+0x60>)
    25d6:	6818      	ldr	r0, [r3, #0]
    25d8:	0021      	movs	r1, r4
    25da:	4b11      	ldr	r3, [pc, #68]	; (2620 <SerialWrite+0x64>)
    25dc:	4798      	blx	r3
		uint32_t timeout = 100000; // ??????? ??? ????????? ?????????
    25de:	4b11      	ldr	r3, [pc, #68]	; (2624 <SerialWrite+0x68>)
		while (serialTransmitting && --timeout);
    25e0:	4a0d      	ldr	r2, [pc, #52]	; (2618 <SerialWrite+0x5c>)
    25e2:	7812      	ldrb	r2, [r2, #0]
    25e4:	2a00      	cmp	r2, #0
    25e6:	d002      	beq.n	25ee <SerialWrite+0x32>
    25e8:	3b01      	subs	r3, #1
    25ea:	2b00      	cmp	r3, #0
    25ec:	d1f8      	bne.n	25e0 <SerialWrite+0x24>
		serialTransmitting = 1;
    25ee:	2201      	movs	r2, #1
    25f0:	4b09      	ldr	r3, [pc, #36]	; (2618 <SerialWrite+0x5c>)
    25f2:	701a      	strb	r2, [r3, #0]
		io_write(debug_serial, "\r\n", 2);
    25f4:	4b09      	ldr	r3, [pc, #36]	; (261c <SerialWrite+0x60>)
    25f6:	6818      	ldr	r0, [r3, #0]
    25f8:	3201      	adds	r2, #1
    25fa:	490b      	ldr	r1, [pc, #44]	; (2628 <SerialWrite+0x6c>)
    25fc:	4b08      	ldr	r3, [pc, #32]	; (2620 <SerialWrite+0x64>)
    25fe:	4798      	blx	r3
		timeout = 100000;
    2600:	4b08      	ldr	r3, [pc, #32]	; (2624 <SerialWrite+0x68>)
		while (serialTransmitting && --timeout);
    2602:	4a05      	ldr	r2, [pc, #20]	; (2618 <SerialWrite+0x5c>)
    2604:	7812      	ldrb	r2, [r2, #0]
    2606:	2a00      	cmp	r2, #0
    2608:	d0df      	beq.n	25ca <SerialWrite+0xe>
    260a:	3b01      	subs	r3, #1
    260c:	2b00      	cmp	r3, #0
    260e:	d1f8      	bne.n	2602 <SerialWrite+0x46>
    2610:	e7db      	b.n	25ca <SerialWrite+0xe>
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	00008db5 	.word	0x00008db5
    2618:	20000a9e 	.word	0x20000a9e
    261c:	20000e98 	.word	0x20000e98
    2620:	000003f9 	.word	0x000003f9
    2624:	000186a0 	.word	0x000186a0
    2628:	0001293c 	.word	0x0001293c

0000262c <_write>:
uint32_t _write(int file, char *ptr, int len) {
    262c:	b510      	push	{r4, lr}
    262e:	0014      	movs	r4, r2
	serialTransmitting = 1;
    2630:	2201      	movs	r2, #1
    2632:	4b06      	ldr	r3, [pc, #24]	; (264c <_write+0x20>)
    2634:	701a      	strb	r2, [r3, #0]
	io_write(debug_serial, (uint8_t *)ptr, len);
    2636:	b2a2      	uxth	r2, r4
    2638:	4b05      	ldr	r3, [pc, #20]	; (2650 <_write+0x24>)
    263a:	6818      	ldr	r0, [r3, #0]
    263c:	4b05      	ldr	r3, [pc, #20]	; (2654 <_write+0x28>)
    263e:	4798      	blx	r3
	while (serialTransmitting); 
    2640:	4b02      	ldr	r3, [pc, #8]	; (264c <_write+0x20>)
    2642:	781b      	ldrb	r3, [r3, #0]
    2644:	2b00      	cmp	r3, #0
    2646:	d1fb      	bne.n	2640 <_write+0x14>
}
    2648:	0020      	movs	r0, r4
    264a:	bd10      	pop	{r4, pc}
    264c:	20000a9e 	.word	0x20000a9e
    2650:	20000e98 	.word	0x20000e98
    2654:	000003f9 	.word	0x000003f9

00002658 <_read>:
}
    2658:	2000      	movs	r0, #0
    265a:	4770      	bx	lr

0000265c <GetIpSwitch>:
uint8_t GetIpSwitch(void){
    265c:	b5f0      	push	{r4, r5, r6, r7, lr}
    265e:	46de      	mov	lr, fp
    2660:	4657      	mov	r7, sl
    2662:	464e      	mov	r6, r9
    2664:	4645      	mov	r5, r8
    2666:	b5e0      	push	{r5, r6, r7, lr}
    2668:	b087      	sub	sp, #28
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    266a:	a805      	add	r0, sp, #20
    266c:	4b30      	ldr	r3, [pc, #192]	; (2730 <GetIpSwitch+0xd4>)
    266e:	469b      	mov	fp, r3
    2670:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2672:	25c0      	movs	r5, #192	; 0xc0
    2674:	05ed      	lsls	r5, r5, #23
    2676:	2680      	movs	r6, #128	; 0x80
    2678:	59ac      	ldr	r4, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    267a:	4b2e      	ldr	r3, [pc, #184]	; (2734 <GetIpSwitch+0xd8>)
    267c:	469a      	mov	sl, r3
    267e:	23a0      	movs	r3, #160	; 0xa0
    2680:	4699      	mov	r9, r3
    2682:	4653      	mov	r3, sl
    2684:	464a      	mov	r2, r9
    2686:	5898      	ldr	r0, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2688:	2390      	movs	r3, #144	; 0x90
    268a:	4698      	mov	r8, r3
    268c:	58eb      	ldr	r3, [r5, r3]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    268e:	4043      	eors	r3, r0
    2690:	401c      	ands	r4, r3
    2692:	4044      	eors	r4, r0

	CRITICAL_SECTION_LEAVE();
    2694:	a805      	add	r0, sp, #20
    2696:	4f28      	ldr	r7, [pc, #160]	; (2738 <GetIpSwitch+0xdc>)
    2698:	47b8      	blx	r7
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    269a:	2020      	movs	r0, #32
    269c:	4004      	ands	r4, r0
	res |= (gpio_get_pin_level(IP_B0) << 0);
    269e:	0023      	movs	r3, r4
    26a0:	1e5c      	subs	r4, r3, #1
    26a2:	41a3      	sbcs	r3, r4
    26a4:	9301      	str	r3, [sp, #4]
	CRITICAL_SECTION_ENTER();
    26a6:	a804      	add	r0, sp, #16
    26a8:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26aa:	59ac      	ldr	r4, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26ac:	4652      	mov	r2, sl
    26ae:	4649      	mov	r1, r9
    26b0:	5852      	ldr	r2, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26b2:	4641      	mov	r1, r8
    26b4:	586b      	ldr	r3, [r5, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    26b6:	4053      	eors	r3, r2
    26b8:	401c      	ands	r4, r3
    26ba:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    26bc:	a804      	add	r0, sp, #16
    26be:	47b8      	blx	r7
    26c0:	4034      	ands	r4, r6
    26c2:	1e60      	subs	r0, r4, #1
    26c4:	4184      	sbcs	r4, r0
    26c6:	b2e0      	uxtb	r0, r4
	res |= (gpio_get_pin_level(IP_B1) << 1);
    26c8:	0040      	lsls	r0, r0, #1
    26ca:	9b01      	ldr	r3, [sp, #4]
    26cc:	4303      	orrs	r3, r0
    26ce:	9301      	str	r3, [sp, #4]
	CRITICAL_SECTION_ENTER();
    26d0:	a803      	add	r0, sp, #12
    26d2:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26d4:	59ac      	ldr	r4, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    26d6:	4652      	mov	r2, sl
    26d8:	4649      	mov	r1, r9
    26da:	5852      	ldr	r2, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    26dc:	4641      	mov	r1, r8
    26de:	586b      	ldr	r3, [r5, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    26e0:	4053      	eors	r3, r2
    26e2:	401c      	ands	r4, r3
    26e4:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    26e6:	a803      	add	r0, sp, #12
    26e8:	47b8      	blx	r7
    26ea:	2040      	movs	r0, #64	; 0x40
    26ec:	4004      	ands	r4, r0
    26ee:	1e63      	subs	r3, r4, #1
    26f0:	419c      	sbcs	r4, r3
    26f2:	b2e4      	uxtb	r4, r4
	res |= (gpio_get_pin_level(IP_B2) << 2);
    26f4:	00a4      	lsls	r4, r4, #2
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	431c      	orrs	r4, r3
	CRITICAL_SECTION_ENTER();
    26fa:	a802      	add	r0, sp, #8
    26fc:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    26fe:	59a8      	ldr	r0, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2700:	4653      	mov	r3, sl
    2702:	464a      	mov	r2, r9
    2704:	589b      	ldr	r3, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2706:	4642      	mov	r2, r8
    2708:	58ad      	ldr	r5, [r5, r2]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    270a:	405d      	eors	r5, r3
    270c:	4005      	ands	r5, r0
    270e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    2710:	a802      	add	r0, sp, #8
    2712:	47b8      	blx	r7
    2714:	2010      	movs	r0, #16
    2716:	4028      	ands	r0, r5
    2718:	1e43      	subs	r3, r0, #1
    271a:	4198      	sbcs	r0, r3
    271c:	b2c0      	uxtb	r0, r0
	res |= (gpio_get_pin_level(IP_B3) << 3);
    271e:	00c0      	lsls	r0, r0, #3
    2720:	4320      	orrs	r0, r4
}
    2722:	b007      	add	sp, #28
    2724:	bc3c      	pop	{r2, r3, r4, r5}
    2726:	4690      	mov	r8, r2
    2728:	4699      	mov	r9, r3
    272a:	46a2      	mov	sl, r4
    272c:	46ab      	mov	fp, r5
    272e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2730:	0000017d 	.word	0x0000017d
    2734:	41004400 	.word	0x41004400
    2738:	0000018b 	.word	0x0000018b

0000273c <adcRequest>:
	uint8_t retVal = adcConversionRequest;
    273c:	4b02      	ldr	r3, [pc, #8]	; (2748 <adcRequest+0xc>)
    273e:	7818      	ldrb	r0, [r3, #0]
	adcConversionRequest = 0;
    2740:	2200      	movs	r2, #0
    2742:	701a      	strb	r2, [r3, #0]
}
    2744:	4770      	bx	lr
    2746:	46c0      	nop			; (mov r8, r8)
    2748:	20000a98 	.word	0x20000a98

0000274c <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
    274c:	b570      	push	{r4, r5, r6, lr}
    274e:	0006      	movs	r6, r0
	CHECK_SOCKNUM();
    2750:	2808      	cmp	r0, #8
    2752:	d82f      	bhi.n	27b4 <close+0x68>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
    2754:	0084      	lsls	r4, r0, #2
    2756:	3401      	adds	r4, #1
    2758:	00e4      	lsls	r4, r4, #3
    275a:	1c65      	adds	r5, r4, #1
    275c:	35ff      	adds	r5, #255	; 0xff
    275e:	2110      	movs	r1, #16
    2760:	0028      	movs	r0, r5
    2762:	4b16      	ldr	r3, [pc, #88]	; (27bc <close+0x70>)
    2764:	4798      	blx	r3
   /* wait to process the command... */
	while( getSn_CR(sn) );
    2766:	0028      	movs	r0, r5
    2768:	4b15      	ldr	r3, [pc, #84]	; (27c0 <close+0x74>)
    276a:	4798      	blx	r3
    276c:	2800      	cmp	r0, #0
    276e:	d1fa      	bne.n	2766 <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
    2770:	2380      	movs	r3, #128	; 0x80
    2772:	009b      	lsls	r3, r3, #2
    2774:	18e0      	adds	r0, r4, r3
    2776:	211f      	movs	r1, #31
    2778:	4b10      	ldr	r3, [pc, #64]	; (27bc <close+0x70>)
    277a:	4798      	blx	r3
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
    277c:	2301      	movs	r3, #1
    277e:	40b3      	lsls	r3, r6
    2780:	43db      	mvns	r3, r3
    2782:	b21b      	sxth	r3, r3
    2784:	490f      	ldr	r1, [pc, #60]	; (27c4 <close+0x78>)
    2786:	880a      	ldrh	r2, [r1, #0]
    2788:	401a      	ands	r2, r3
    278a:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
    278c:	490e      	ldr	r1, [pc, #56]	; (27c8 <close+0x7c>)
    278e:	880a      	ldrh	r2, [r1, #0]
    2790:	4013      	ands	r3, r2
    2792:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
    2794:	0072      	lsls	r2, r6, #1
    2796:	2100      	movs	r1, #0
    2798:	4b0c      	ldr	r3, [pc, #48]	; (27cc <close+0x80>)
    279a:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
    279c:	4b0c      	ldr	r3, [pc, #48]	; (27d0 <close+0x84>)
    279e:	2200      	movs	r2, #0
    27a0:	559a      	strb	r2, [r3, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
    27a2:	23c0      	movs	r3, #192	; 0xc0
    27a4:	009b      	lsls	r3, r3, #2
    27a6:	18e0      	adds	r0, r4, r3
    27a8:	4b05      	ldr	r3, [pc, #20]	; (27c0 <close+0x74>)
    27aa:	4798      	blx	r3
    27ac:	2800      	cmp	r0, #0
    27ae:	d1f8      	bne.n	27a2 <close+0x56>
	return SOCK_OK;
    27b0:	3001      	adds	r0, #1
}
    27b2:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
    27b4:	2001      	movs	r0, #1
    27b6:	4240      	negs	r0, r0
    27b8:	e7fb      	b.n	27b2 <close+0x66>
    27ba:	46c0      	nop			; (mov r8, r8)
    27bc:	000032d1 	.word	0x000032d1
    27c0:	0000326d 	.word	0x0000326d
    27c4:	20000aa0 	.word	0x20000aa0
    27c8:	20000aa2 	.word	0x20000aa2
    27cc:	20000aac 	.word	0x20000aac
    27d0:	20000aa4 	.word	0x20000aa4

000027d4 <socket>:
{
    27d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    27d6:	46ce      	mov	lr, r9
    27d8:	4647      	mov	r7, r8
    27da:	b580      	push	{r7, lr}
    27dc:	b085      	sub	sp, #20
    27de:	0006      	movs	r6, r0
    27e0:	000d      	movs	r5, r1
    27e2:	4691      	mov	r9, r2
    27e4:	001f      	movs	r7, r3
	CHECK_SOCKNUM();
    27e6:	2808      	cmp	r0, #8
    27e8:	d900      	bls.n	27ec <socket+0x18>
    27ea:	e091      	b.n	2910 <socket+0x13c>
	switch(protocol)
    27ec:	2901      	cmp	r1, #1
    27ee:	d069      	beq.n	28c4 <socket+0xf0>
    27f0:	2900      	cmp	r1, #0
    27f2:	d100      	bne.n	27f6 <socket+0x22>
    27f4:	e08f      	b.n	2916 <socket+0x142>
    27f6:	2904      	cmp	r1, #4
    27f8:	d900      	bls.n	27fc <socket+0x28>
    27fa:	e08c      	b.n	2916 <socket+0x142>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    27fc:	077b      	lsls	r3, r7, #29
    27fe:	d500      	bpl.n	2802 <socket+0x2e>
    2800:	e08c      	b.n	291c <socket+0x148>
	if(flag != 0)
    2802:	2f00      	cmp	r7, #0
    2804:	d004      	beq.n	2810 <socket+0x3c>
   	switch(protocol)
    2806:	2d01      	cmp	r5, #1
    2808:	d069      	beq.n	28de <socket+0x10a>
    280a:	2d02      	cmp	r5, #2
    280c:	d100      	bne.n	2810 <socket+0x3c>
    280e:	e06c      	b.n	28ea <socket+0x116>
	close(sn);
    2810:	0030      	movs	r0, r6
    2812:	4b45      	ldr	r3, [pc, #276]	; (2928 <socket+0x154>)
    2814:	4798      	blx	r3
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    2816:	00b4      	lsls	r4, r6, #2
    2818:	3401      	adds	r4, #1
    281a:	00e4      	lsls	r4, r4, #3
    281c:	230f      	movs	r3, #15
    281e:	0039      	movs	r1, r7
    2820:	4399      	bics	r1, r3
    2822:	b249      	sxtb	r1, r1
    2824:	4329      	orrs	r1, r5
    2826:	b2c9      	uxtb	r1, r1
    2828:	0020      	movs	r0, r4
    282a:	4b40      	ldr	r3, [pc, #256]	; (292c <socket+0x158>)
    282c:	4798      	blx	r3
	if(!port)
    282e:	464b      	mov	r3, r9
    2830:	2b00      	cmp	r3, #0
    2832:	d108      	bne.n	2846 <socket+0x72>
	   port = sock_any_port++;
    2834:	4a3e      	ldr	r2, [pc, #248]	; (2930 <socket+0x15c>)
    2836:	8813      	ldrh	r3, [r2, #0]
    2838:	4699      	mov	r9, r3
    283a:	3301      	adds	r3, #1
    283c:	b29b      	uxth	r3, r3
    283e:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    2840:	4a3c      	ldr	r2, [pc, #240]	; (2934 <socket+0x160>)
    2842:	4293      	cmp	r3, r2
    2844:	d060      	beq.n	2908 <socket+0x134>
   setSn_PORT(sn,port);	
    2846:	2380      	movs	r3, #128	; 0x80
    2848:	00db      	lsls	r3, r3, #3
    284a:	18e0      	adds	r0, r4, r3
    284c:	464b      	mov	r3, r9
    284e:	0a19      	lsrs	r1, r3, #8
    2850:	4b36      	ldr	r3, [pc, #216]	; (292c <socket+0x158>)
    2852:	4698      	mov	r8, r3
    2854:	4798      	blx	r3
    2856:	464b      	mov	r3, r9
    2858:	466a      	mov	r2, sp
    285a:	71d3      	strb	r3, [r2, #7]
    285c:	79d1      	ldrb	r1, [r2, #7]
    285e:	23a0      	movs	r3, #160	; 0xa0
    2860:	00db      	lsls	r3, r3, #3
    2862:	18e0      	adds	r0, r4, r3
    2864:	47c0      	blx	r8
   setSn_CR(sn,Sn_CR_OPEN);
    2866:	1c65      	adds	r5, r4, #1
    2868:	35ff      	adds	r5, #255	; 0xff
    286a:	2101      	movs	r1, #1
    286c:	0028      	movs	r0, r5
    286e:	47c0      	blx	r8
   while(getSn_CR(sn));
    2870:	0028      	movs	r0, r5
    2872:	4b31      	ldr	r3, [pc, #196]	; (2938 <socket+0x164>)
    2874:	4798      	blx	r3
    2876:	2800      	cmp	r0, #0
    2878:	d1fa      	bne.n	2870 <socket+0x9c>
   sock_io_mode &= ~(1 <<sn);
    287a:	2201      	movs	r2, #1
    287c:	40b2      	lsls	r2, r6
    287e:	43d2      	mvns	r2, r2
    2880:	b212      	sxth	r2, r2
    2882:	482e      	ldr	r0, [pc, #184]	; (293c <socket+0x168>)
    2884:	8803      	ldrh	r3, [r0, #0]
    2886:	4013      	ands	r3, r2
    2888:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
    288a:	2101      	movs	r1, #1
    288c:	400f      	ands	r7, r1
    288e:	40b7      	lsls	r7, r6
    2890:	433b      	orrs	r3, r7
    2892:	8003      	strh	r3, [r0, #0]
   sock_is_sending &= ~(1<<sn);
    2894:	492a      	ldr	r1, [pc, #168]	; (2940 <socket+0x16c>)
    2896:	880b      	ldrh	r3, [r1, #0]
    2898:	401a      	ands	r2, r3
    289a:	800a      	strh	r2, [r1, #0]
   sock_remained_size[sn] = 0;
    289c:	0073      	lsls	r3, r6, #1
    289e:	2100      	movs	r1, #0
    28a0:	4a28      	ldr	r2, [pc, #160]	; (2944 <socket+0x170>)
    28a2:	5299      	strh	r1, [r3, r2]
   sock_pack_info[sn] = PACK_COMPLETED;
    28a4:	4b28      	ldr	r3, [pc, #160]	; (2948 <socket+0x174>)
    28a6:	2200      	movs	r2, #0
    28a8:	559a      	strb	r2, [r3, r6]
   while(getSn_SR(sn) == SOCK_CLOSED);
    28aa:	23c0      	movs	r3, #192	; 0xc0
    28ac:	009b      	lsls	r3, r3, #2
    28ae:	18e0      	adds	r0, r4, r3
    28b0:	4b21      	ldr	r3, [pc, #132]	; (2938 <socket+0x164>)
    28b2:	4798      	blx	r3
    28b4:	2800      	cmp	r0, #0
    28b6:	d0f8      	beq.n	28aa <socket+0xd6>
   return (int8_t)sn;
    28b8:	b270      	sxtb	r0, r6
}	   
    28ba:	b005      	add	sp, #20
    28bc:	bc0c      	pop	{r2, r3}
    28be:	4690      	mov	r8, r2
    28c0:	4699      	mov	r9, r3
    28c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            getSIPR((uint8_t*)&taddr);
    28c4:	2204      	movs	r2, #4
    28c6:	a903      	add	r1, sp, #12
    28c8:	20f0      	movs	r0, #240	; 0xf0
    28ca:	0100      	lsls	r0, r0, #4
    28cc:	4b1f      	ldr	r3, [pc, #124]	; (294c <socket+0x178>)
    28ce:	4798      	blx	r3
            if(taddr == 0) return SOCKERR_SOCKINIT;
    28d0:	9b03      	ldr	r3, [sp, #12]
    28d2:	2b00      	cmp	r3, #0
    28d4:	d000      	beq.n	28d8 <socket+0x104>
    28d6:	e791      	b.n	27fc <socket+0x28>
    28d8:	2003      	movs	r0, #3
    28da:	4240      	negs	r0, r0
    28dc:	e7ed      	b.n	28ba <socket+0xe6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
    28de:	2321      	movs	r3, #33	; 0x21
    28e0:	423b      	tst	r3, r7
    28e2:	d195      	bne.n	2810 <socket+0x3c>
    28e4:	2006      	movs	r0, #6
    28e6:	4240      	negs	r0, r0
    28e8:	e7e7      	b.n	28ba <socket+0xe6>
   	      if(flag & SF_IGMP_VER2)
    28ea:	06bb      	lsls	r3, r7, #26
    28ec:	d502      	bpl.n	28f4 <socket+0x120>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    28ee:	b27b      	sxtb	r3, r7
    28f0:	2b00      	cmp	r3, #0
    28f2:	da16      	bge.n	2922 <socket+0x14e>
      	      if(flag & SF_UNI_BLOCK)
    28f4:	06fb      	lsls	r3, r7, #27
    28f6:	d400      	bmi.n	28fa <socket+0x126>
    28f8:	e78a      	b.n	2810 <socket+0x3c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
    28fa:	b27b      	sxtb	r3, r7
    28fc:	2b00      	cmp	r3, #0
    28fe:	da00      	bge.n	2902 <socket+0x12e>
    2900:	e786      	b.n	2810 <socket+0x3c>
    2902:	2006      	movs	r0, #6
    2904:	4240      	negs	r0, r0
    2906:	e7d8      	b.n	28ba <socket+0xe6>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    2908:	4a11      	ldr	r2, [pc, #68]	; (2950 <socket+0x17c>)
    290a:	4b09      	ldr	r3, [pc, #36]	; (2930 <socket+0x15c>)
    290c:	801a      	strh	r2, [r3, #0]
    290e:	e79a      	b.n	2846 <socket+0x72>
	CHECK_SOCKNUM();
    2910:	2001      	movs	r0, #1
    2912:	4240      	negs	r0, r0
    2914:	e7d1      	b.n	28ba <socket+0xe6>
         return SOCKERR_SOCKMODE;
    2916:	2005      	movs	r0, #5
    2918:	4240      	negs	r0, r0
    291a:	e7ce      	b.n	28ba <socket+0xe6>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    291c:	2006      	movs	r0, #6
    291e:	4240      	negs	r0, r0
    2920:	e7cb      	b.n	28ba <socket+0xe6>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    2922:	2006      	movs	r0, #6
    2924:	4240      	negs	r0, r0
    2926:	e7c8      	b.n	28ba <socket+0xe6>
    2928:	0000274d 	.word	0x0000274d
    292c:	000032d1 	.word	0x000032d1
    2930:	20000000 	.word	0x20000000
    2934:	0000fff0 	.word	0x0000fff0
    2938:	0000326d 	.word	0x0000326d
    293c:	20000aa0 	.word	0x20000aa0
    2940:	20000aa2 	.word	0x20000aa2
    2944:	20000aac 	.word	0x20000aac
    2948:	20000aa4 	.word	0x20000aa4
    294c:	00003331 	.word	0x00003331
    2950:	ffffc000 	.word	0xffffc000

00002954 <listen>:

int8_t listen(uint8_t sn)
{
    2954:	b570      	push	{r4, r5, r6, lr}
    2956:	0006      	movs	r6, r0
	CHECK_SOCKNUM();
    2958:	2808      	cmp	r0, #8
    295a:	d829      	bhi.n	29b0 <listen+0x5c>
   CHECK_SOCKMODE(Sn_MR_TCP);
    295c:	0084      	lsls	r4, r0, #2
    295e:	3401      	adds	r4, #1
    2960:	00e4      	lsls	r4, r4, #3
    2962:	0020      	movs	r0, r4
    2964:	4b17      	ldr	r3, [pc, #92]	; (29c4 <listen+0x70>)
    2966:	4798      	blx	r3
    2968:	230f      	movs	r3, #15
    296a:	4018      	ands	r0, r3
    296c:	2801      	cmp	r0, #1
    296e:	d122      	bne.n	29b6 <listen+0x62>
	CHECK_SOCKINIT();
    2970:	23c0      	movs	r3, #192	; 0xc0
    2972:	009b      	lsls	r3, r3, #2
    2974:	18e5      	adds	r5, r4, r3
    2976:	0028      	movs	r0, r5
    2978:	4b12      	ldr	r3, [pc, #72]	; (29c4 <listen+0x70>)
    297a:	4798      	blx	r3
    297c:	2813      	cmp	r0, #19
    297e:	d11d      	bne.n	29bc <listen+0x68>
	setSn_CR(sn,Sn_CR_LISTEN);
    2980:	3401      	adds	r4, #1
    2982:	34ff      	adds	r4, #255	; 0xff
    2984:	2102      	movs	r1, #2
    2986:	0020      	movs	r0, r4
    2988:	4b0f      	ldr	r3, [pc, #60]	; (29c8 <listen+0x74>)
    298a:	4798      	blx	r3
	while(getSn_CR(sn));
    298c:	0020      	movs	r0, r4
    298e:	4b0d      	ldr	r3, [pc, #52]	; (29c4 <listen+0x70>)
    2990:	4798      	blx	r3
    2992:	2800      	cmp	r0, #0
    2994:	d1fa      	bne.n	298c <listen+0x38>
   while(getSn_SR(sn) != SOCK_LISTEN)
    2996:	0028      	movs	r0, r5
    2998:	4b0a      	ldr	r3, [pc, #40]	; (29c4 <listen+0x70>)
    299a:	4798      	blx	r3
    299c:	2814      	cmp	r0, #20
    299e:	d101      	bne.n	29a4 <listen+0x50>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
    29a0:	3813      	subs	r0, #19
}
    29a2:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
    29a4:	0030      	movs	r0, r6
    29a6:	4b09      	ldr	r3, [pc, #36]	; (29cc <listen+0x78>)
    29a8:	4798      	blx	r3
         return SOCKERR_SOCKCLOSED;
    29aa:	2004      	movs	r0, #4
    29ac:	4240      	negs	r0, r0
    29ae:	e7f8      	b.n	29a2 <listen+0x4e>
	CHECK_SOCKNUM();
    29b0:	2001      	movs	r0, #1
    29b2:	4240      	negs	r0, r0
    29b4:	e7f5      	b.n	29a2 <listen+0x4e>
   CHECK_SOCKMODE(Sn_MR_TCP);
    29b6:	2005      	movs	r0, #5
    29b8:	4240      	negs	r0, r0
    29ba:	e7f2      	b.n	29a2 <listen+0x4e>
	CHECK_SOCKINIT();
    29bc:	2003      	movs	r0, #3
    29be:	4240      	negs	r0, r0
    29c0:	e7ef      	b.n	29a2 <listen+0x4e>
    29c2:	46c0      	nop			; (mov r8, r8)
    29c4:	0000326d 	.word	0x0000326d
    29c8:	000032d1 	.word	0x000032d1
    29cc:	0000274d 	.word	0x0000274d

000029d0 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
    29d0:	b570      	push	{r4, r5, r6, lr}
    29d2:	0006      	movs	r6, r0
   CHECK_SOCKNUM();
    29d4:	2808      	cmp	r0, #8
    29d6:	d836      	bhi.n	2a46 <disconnect+0x76>
   CHECK_SOCKMODE(Sn_MR_TCP);
    29d8:	0084      	lsls	r4, r0, #2
    29da:	3401      	adds	r4, #1
    29dc:	00e4      	lsls	r4, r4, #3
    29de:	0020      	movs	r0, r4
    29e0:	4b1d      	ldr	r3, [pc, #116]	; (2a58 <disconnect+0x88>)
    29e2:	4798      	blx	r3
    29e4:	230f      	movs	r3, #15
    29e6:	4018      	ands	r0, r3
    29e8:	2801      	cmp	r0, #1
    29ea:	d12f      	bne.n	2a4c <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
    29ec:	1c65      	adds	r5, r4, #1
    29ee:	35ff      	adds	r5, #255	; 0xff
    29f0:	2108      	movs	r1, #8
    29f2:	0028      	movs	r0, r5
    29f4:	4b19      	ldr	r3, [pc, #100]	; (2a5c <disconnect+0x8c>)
    29f6:	4798      	blx	r3
	/* wait to process the command... */
	while(getSn_CR(sn));
    29f8:	0028      	movs	r0, r5
    29fa:	4b17      	ldr	r3, [pc, #92]	; (2a58 <disconnect+0x88>)
    29fc:	4798      	blx	r3
    29fe:	2800      	cmp	r0, #0
    2a00:	d1fa      	bne.n	29f8 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
    2a02:	2201      	movs	r2, #1
    2a04:	0010      	movs	r0, r2
    2a06:	40b0      	lsls	r0, r6
    2a08:	4915      	ldr	r1, [pc, #84]	; (2a60 <disconnect+0x90>)
    2a0a:	880b      	ldrh	r3, [r1, #0]
    2a0c:	4383      	bics	r3, r0
    2a0e:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    2a10:	4b14      	ldr	r3, [pc, #80]	; (2a64 <disconnect+0x94>)
    2a12:	881b      	ldrh	r3, [r3, #0]
    2a14:	4133      	asrs	r3, r6
    2a16:	421a      	tst	r2, r3
    2a18:	d11b      	bne.n	2a52 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
    2a1a:	23c0      	movs	r3, #192	; 0xc0
    2a1c:	009b      	lsls	r3, r3, #2
    2a1e:	18e0      	adds	r0, r4, r3
    2a20:	4b0d      	ldr	r3, [pc, #52]	; (2a58 <disconnect+0x88>)
    2a22:	4798      	blx	r3
    2a24:	2800      	cmp	r0, #0
    2a26:	d00c      	beq.n	2a42 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
    2a28:	2380      	movs	r3, #128	; 0x80
    2a2a:	009b      	lsls	r3, r3, #2
    2a2c:	18e0      	adds	r0, r4, r3
    2a2e:	4b0a      	ldr	r3, [pc, #40]	; (2a58 <disconnect+0x88>)
    2a30:	4798      	blx	r3
    2a32:	0703      	lsls	r3, r0, #28
    2a34:	d5f1      	bpl.n	2a1a <disconnect+0x4a>
	   {
	      close(sn);
    2a36:	0030      	movs	r0, r6
    2a38:	4b0b      	ldr	r3, [pc, #44]	; (2a68 <disconnect+0x98>)
    2a3a:	4798      	blx	r3
	      return SOCKERR_TIMEOUT;
    2a3c:	200d      	movs	r0, #13
    2a3e:	4240      	negs	r0, r0
    2a40:	e008      	b.n	2a54 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
    2a42:	3001      	adds	r0, #1
    2a44:	e006      	b.n	2a54 <disconnect+0x84>
   CHECK_SOCKNUM();
    2a46:	2001      	movs	r0, #1
    2a48:	4240      	negs	r0, r0
    2a4a:	e003      	b.n	2a54 <disconnect+0x84>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2a4c:	2005      	movs	r0, #5
    2a4e:	4240      	negs	r0, r0
    2a50:	e000      	b.n	2a54 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    2a52:	2000      	movs	r0, #0
}
    2a54:	bd70      	pop	{r4, r5, r6, pc}
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	0000326d 	.word	0x0000326d
    2a5c:	000032d1 	.word	0x000032d1
    2a60:	20000aa2 	.word	0x20000aa2
    2a64:	20000aa0 	.word	0x20000aa0
    2a68:	0000274d 	.word	0x0000274d

00002a6c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
    2a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a6e:	46c6      	mov	lr, r8
    2a70:	b500      	push	{lr}
    2a72:	b082      	sub	sp, #8
    2a74:	0004      	movs	r4, r0
    2a76:	9101      	str	r1, [sp, #4]
    2a78:	0017      	movs	r7, r2
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    2a7a:	2808      	cmp	r0, #8
    2a7c:	d900      	bls.n	2a80 <send+0x14>
    2a7e:	e080      	b.n	2b82 <send+0x116>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2a80:	0005      	movs	r5, r0
    2a82:	0083      	lsls	r3, r0, #2
    2a84:	3301      	adds	r3, #1
    2a86:	00db      	lsls	r3, r3, #3
    2a88:	4698      	mov	r8, r3
    2a8a:	0018      	movs	r0, r3
    2a8c:	4b43      	ldr	r3, [pc, #268]	; (2b9c <send+0x130>)
    2a8e:	4798      	blx	r3
    2a90:	230f      	movs	r3, #15
    2a92:	4018      	ands	r0, r3
    2a94:	2801      	cmp	r0, #1
    2a96:	d000      	beq.n	2a9a <send+0x2e>
    2a98:	e076      	b.n	2b88 <send+0x11c>
   CHECK_SOCKDATA();
    2a9a:	2f00      	cmp	r7, #0
    2a9c:	d100      	bne.n	2aa0 <send+0x34>
    2a9e:	e076      	b.n	2b8e <send+0x122>
   tmp = getSn_SR(sn);
    2aa0:	23c0      	movs	r3, #192	; 0xc0
    2aa2:	009b      	lsls	r3, r3, #2
    2aa4:	4443      	add	r3, r8
    2aa6:	9300      	str	r3, [sp, #0]
    2aa8:	0018      	movs	r0, r3
    2aaa:	4b3c      	ldr	r3, [pc, #240]	; (2b9c <send+0x130>)
    2aac:	4798      	blx	r3
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    2aae:	2817      	cmp	r0, #23
    2ab0:	d002      	beq.n	2ab8 <send+0x4c>
    2ab2:	281c      	cmp	r0, #28
    2ab4:	d000      	beq.n	2ab8 <send+0x4c>
    2ab6:	e06d      	b.n	2b94 <send+0x128>
   if( sock_is_sending & (1<<sn) )
    2ab8:	4b39      	ldr	r3, [pc, #228]	; (2ba0 <send+0x134>)
    2aba:	881b      	ldrh	r3, [r3, #0]
    2abc:	4123      	asrs	r3, r4
    2abe:	07db      	lsls	r3, r3, #31
    2ac0:	d518      	bpl.n	2af4 <send+0x88>
   {
      tmp = getSn_IR(sn);
    2ac2:	2680      	movs	r6, #128	; 0x80
    2ac4:	00b6      	lsls	r6, r6, #2
    2ac6:	4446      	add	r6, r8
    2ac8:	0030      	movs	r0, r6
    2aca:	4b34      	ldr	r3, [pc, #208]	; (2b9c <send+0x130>)
    2acc:	4798      	blx	r3
      if(tmp & Sn_IR_SENDOK)
    2ace:	06c3      	lsls	r3, r0, #27
    2ad0:	d406      	bmi.n	2ae0 <send+0x74>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
    2ad2:	0703      	lsls	r3, r0, #28
    2ad4:	d41a      	bmi.n	2b0c <send+0xa0>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
    2ad6:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    2ad8:	b002      	add	sp, #8
    2ada:	bc04      	pop	{r2}
    2adc:	4690      	mov	r8, r2
    2ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
    2ae0:	2110      	movs	r1, #16
    2ae2:	0030      	movs	r0, r6
    2ae4:	4b2f      	ldr	r3, [pc, #188]	; (2ba4 <send+0x138>)
    2ae6:	4798      	blx	r3
         sock_is_sending &= ~(1<<sn);         
    2ae8:	2201      	movs	r2, #1
    2aea:	40a2      	lsls	r2, r4
    2aec:	492c      	ldr	r1, [pc, #176]	; (2ba0 <send+0x134>)
    2aee:	880b      	ldrh	r3, [r1, #0]
    2af0:	4393      	bics	r3, r2
    2af2:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
    2af4:	20f8      	movs	r0, #248	; 0xf8
    2af6:	0140      	lsls	r0, r0, #5
    2af8:	4440      	add	r0, r8
    2afa:	4b28      	ldr	r3, [pc, #160]	; (2b9c <send+0x130>)
    2afc:	4798      	blx	r3
    2afe:	b280      	uxth	r0, r0
    2b00:	0280      	lsls	r0, r0, #10
    2b02:	b286      	uxth	r6, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    2b04:	42b7      	cmp	r7, r6
    2b06:	d80f      	bhi.n	2b28 <send+0xbc>
    2b08:	003e      	movs	r6, r7
    2b0a:	e00d      	b.n	2b28 <send+0xbc>
         close(sn);
    2b0c:	0020      	movs	r0, r4
    2b0e:	4b26      	ldr	r3, [pc, #152]	; (2ba8 <send+0x13c>)
    2b10:	4798      	blx	r3
         return SOCKERR_TIMEOUT;
    2b12:	200d      	movs	r0, #13
    2b14:	4240      	negs	r0, r0
    2b16:	e7df      	b.n	2ad8 <send+0x6c>
         close(sn);
    2b18:	0020      	movs	r0, r4
    2b1a:	4b23      	ldr	r3, [pc, #140]	; (2ba8 <send+0x13c>)
    2b1c:	4798      	blx	r3
         return SOCKERR_SOCKSTATUS;
    2b1e:	2007      	movs	r0, #7
    2b20:	4240      	negs	r0, r0
    2b22:	e7d9      	b.n	2ad8 <send+0x6c>
      if(len <= freesize) break;
    2b24:	42be      	cmp	r6, r7
    2b26:	d913      	bls.n	2b50 <send+0xe4>
      freesize = getSn_TX_FSR(sn);
    2b28:	0020      	movs	r0, r4
    2b2a:	4b20      	ldr	r3, [pc, #128]	; (2bac <send+0x140>)
    2b2c:	4798      	blx	r3
    2b2e:	0007      	movs	r7, r0
      tmp = getSn_SR(sn);
    2b30:	9800      	ldr	r0, [sp, #0]
    2b32:	4b1a      	ldr	r3, [pc, #104]	; (2b9c <send+0x130>)
    2b34:	4798      	blx	r3
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    2b36:	2817      	cmp	r0, #23
    2b38:	d001      	beq.n	2b3e <send+0xd2>
    2b3a:	281c      	cmp	r0, #28
    2b3c:	d1ec      	bne.n	2b18 <send+0xac>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    2b3e:	4b1c      	ldr	r3, [pc, #112]	; (2bb0 <send+0x144>)
    2b40:	881b      	ldrh	r3, [r3, #0]
    2b42:	412b      	asrs	r3, r5
    2b44:	07db      	lsls	r3, r3, #31
    2b46:	d5ed      	bpl.n	2b24 <send+0xb8>
    2b48:	42be      	cmp	r6, r7
    2b4a:	d9eb      	bls.n	2b24 <send+0xb8>
    2b4c:	2000      	movs	r0, #0
    2b4e:	e7c3      	b.n	2ad8 <send+0x6c>
   wiz_send_data(sn, buf, len);
    2b50:	0032      	movs	r2, r6
    2b52:	9901      	ldr	r1, [sp, #4]
    2b54:	0020      	movs	r0, r4
    2b56:	4b17      	ldr	r3, [pc, #92]	; (2bb4 <send+0x148>)
    2b58:	4798      	blx	r3
   setSn_CR(sn,Sn_CR_SEND);
    2b5a:	4645      	mov	r5, r8
    2b5c:	3501      	adds	r5, #1
    2b5e:	35ff      	adds	r5, #255	; 0xff
    2b60:	2120      	movs	r1, #32
    2b62:	0028      	movs	r0, r5
    2b64:	4b0f      	ldr	r3, [pc, #60]	; (2ba4 <send+0x138>)
    2b66:	4798      	blx	r3
   while(getSn_CR(sn));
    2b68:	0028      	movs	r0, r5
    2b6a:	4b0c      	ldr	r3, [pc, #48]	; (2b9c <send+0x130>)
    2b6c:	4798      	blx	r3
    2b6e:	2800      	cmp	r0, #0
    2b70:	d1fa      	bne.n	2b68 <send+0xfc>
   sock_is_sending |= (1 << sn);
    2b72:	2201      	movs	r2, #1
    2b74:	40a2      	lsls	r2, r4
    2b76:	490a      	ldr	r1, [pc, #40]	; (2ba0 <send+0x134>)
    2b78:	880b      	ldrh	r3, [r1, #0]
    2b7a:	4313      	orrs	r3, r2
    2b7c:	800b      	strh	r3, [r1, #0]
   return (int32_t)len;
    2b7e:	0030      	movs	r0, r6
    2b80:	e7aa      	b.n	2ad8 <send+0x6c>
   CHECK_SOCKNUM();
    2b82:	2001      	movs	r0, #1
    2b84:	4240      	negs	r0, r0
    2b86:	e7a7      	b.n	2ad8 <send+0x6c>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2b88:	2005      	movs	r0, #5
    2b8a:	4240      	negs	r0, r0
    2b8c:	e7a4      	b.n	2ad8 <send+0x6c>
   CHECK_SOCKDATA();
    2b8e:	200e      	movs	r0, #14
    2b90:	4240      	negs	r0, r0
    2b92:	e7a1      	b.n	2ad8 <send+0x6c>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    2b94:	2007      	movs	r0, #7
    2b96:	4240      	negs	r0, r0
    2b98:	e79e      	b.n	2ad8 <send+0x6c>
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	0000326d 	.word	0x0000326d
    2ba0:	20000aa2 	.word	0x20000aa2
    2ba4:	000032d1 	.word	0x000032d1
    2ba8:	0000274d 	.word	0x0000274d
    2bac:	00003429 	.word	0x00003429
    2bb0:	20000aa0 	.word	0x20000aa0
    2bb4:	00003501 	.word	0x00003501

00002bb8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    2bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bba:	46c6      	mov	lr, r8
    2bbc:	b500      	push	{lr}
    2bbe:	b082      	sub	sp, #8
    2bc0:	9000      	str	r0, [sp, #0]
    2bc2:	9101      	str	r1, [sp, #4]
    2bc4:	0014      	movs	r4, r2
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    2bc6:	2808      	cmp	r0, #8
    2bc8:	d864      	bhi.n	2c94 <recv+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2bca:	0006      	movs	r6, r0
    2bcc:	0087      	lsls	r7, r0, #2
    2bce:	3701      	adds	r7, #1
    2bd0:	00ff      	lsls	r7, r7, #3
    2bd2:	0038      	movs	r0, r7
    2bd4:	4b34      	ldr	r3, [pc, #208]	; (2ca8 <recv+0xf0>)
    2bd6:	4798      	blx	r3
    2bd8:	230f      	movs	r3, #15
    2bda:	4018      	ands	r0, r3
    2bdc:	2801      	cmp	r0, #1
    2bde:	d15c      	bne.n	2c9a <recv+0xe2>
   CHECK_SOCKDATA();
    2be0:	2c00      	cmp	r4, #0
    2be2:	d05d      	beq.n	2ca0 <recv+0xe8>
   
   recvsize = getSn_RxMAX(sn);
    2be4:	23f0      	movs	r3, #240	; 0xf0
    2be6:	015b      	lsls	r3, r3, #5
    2be8:	18f8      	adds	r0, r7, r3
    2bea:	4b2f      	ldr	r3, [pc, #188]	; (2ca8 <recv+0xf0>)
    2bec:	4798      	blx	r3
    2bee:	b280      	uxth	r0, r0
    2bf0:	0280      	lsls	r0, r0, #10
    2bf2:	b283      	uxth	r3, r0
    2bf4:	4698      	mov	r8, r3
   if(recvsize < len) len = recvsize;
    2bf6:	429c      	cmp	r4, r3
    2bf8:	d80f      	bhi.n	2c1a <recv+0x62>
    2bfa:	46a0      	mov	r8, r4
    2bfc:	e00d      	b.n	2c1a <recv+0x62>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
    2bfe:	9800      	ldr	r0, [sp, #0]
    2c00:	4b2a      	ldr	r3, [pc, #168]	; (2cac <recv+0xf4>)
    2c02:	4798      	blx	r3
                  return SOCKERR_SOCKSTATUS;
    2c04:	2007      	movs	r0, #7
    2c06:	4240      	negs	r0, r0
    2c08:	e040      	b.n	2c8c <recv+0xd4>
               }
            }
            else
            {
               close(sn);
    2c0a:	9800      	ldr	r0, [sp, #0]
    2c0c:	4b27      	ldr	r3, [pc, #156]	; (2cac <recv+0xf4>)
    2c0e:	4798      	blx	r3
               return SOCKERR_SOCKSTATUS;
    2c10:	2007      	movs	r0, #7
    2c12:	4240      	negs	r0, r0
    2c14:	e03a      	b.n	2c8c <recv+0xd4>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
    2c16:	2c00      	cmp	r4, #0
    2c18:	d124      	bne.n	2c64 <recv+0xac>
         recvsize = getSn_RX_RSR(sn);
    2c1a:	9d00      	ldr	r5, [sp, #0]
    2c1c:	0028      	movs	r0, r5
    2c1e:	4b24      	ldr	r3, [pc, #144]	; (2cb0 <recv+0xf8>)
    2c20:	4798      	blx	r3
    2c22:	0004      	movs	r4, r0
         tmp = getSn_SR(sn);
    2c24:	23c0      	movs	r3, #192	; 0xc0
    2c26:	009b      	lsls	r3, r3, #2
    2c28:	18f8      	adds	r0, r7, r3
    2c2a:	4b1f      	ldr	r3, [pc, #124]	; (2ca8 <recv+0xf0>)
    2c2c:	4798      	blx	r3
         if (tmp != SOCK_ESTABLISHED)
    2c2e:	2817      	cmp	r0, #23
    2c30:	d00f      	beq.n	2c52 <recv+0x9a>
            if(tmp == SOCK_CLOSE_WAIT)
    2c32:	281c      	cmp	r0, #28
    2c34:	d1e9      	bne.n	2c0a <recv+0x52>
               if(recvsize != 0) break;
    2c36:	2c00      	cmp	r4, #0
    2c38:	d114      	bne.n	2c64 <recv+0xac>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    2c3a:	0028      	movs	r0, r5
    2c3c:	4b1d      	ldr	r3, [pc, #116]	; (2cb4 <recv+0xfc>)
    2c3e:	4798      	blx	r3
    2c40:	0005      	movs	r5, r0
    2c42:	23f8      	movs	r3, #248	; 0xf8
    2c44:	015b      	lsls	r3, r3, #5
    2c46:	18f8      	adds	r0, r7, r3
    2c48:	4b17      	ldr	r3, [pc, #92]	; (2ca8 <recv+0xf0>)
    2c4a:	4798      	blx	r3
    2c4c:	0280      	lsls	r0, r0, #10
    2c4e:	4285      	cmp	r5, r0
    2c50:	d0d5      	beq.n	2bfe <recv+0x46>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    2c52:	4b19      	ldr	r3, [pc, #100]	; (2cb8 <recv+0x100>)
    2c54:	881b      	ldrh	r3, [r3, #0]
    2c56:	4133      	asrs	r3, r6
    2c58:	07db      	lsls	r3, r3, #31
    2c5a:	d5dc      	bpl.n	2c16 <recv+0x5e>
    2c5c:	2c00      	cmp	r4, #0
    2c5e:	d1da      	bne.n	2c16 <recv+0x5e>
    2c60:	2000      	movs	r0, #0
    2c62:	e013      	b.n	2c8c <recv+0xd4>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
    2c64:	45a0      	cmp	r8, r4
    2c66:	d800      	bhi.n	2c6a <recv+0xb2>
    2c68:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
    2c6a:	0022      	movs	r2, r4
    2c6c:	9901      	ldr	r1, [sp, #4]
    2c6e:	9800      	ldr	r0, [sp, #0]
    2c70:	4b12      	ldr	r3, [pc, #72]	; (2cbc <recv+0x104>)
    2c72:	4798      	blx	r3
   setSn_CR(sn,Sn_CR_RECV);
    2c74:	3701      	adds	r7, #1
    2c76:	37ff      	adds	r7, #255	; 0xff
    2c78:	2140      	movs	r1, #64	; 0x40
    2c7a:	0038      	movs	r0, r7
    2c7c:	4b10      	ldr	r3, [pc, #64]	; (2cc0 <recv+0x108>)
    2c7e:	4798      	blx	r3
   while(getSn_CR(sn));
    2c80:	0038      	movs	r0, r7
    2c82:	4b09      	ldr	r3, [pc, #36]	; (2ca8 <recv+0xf0>)
    2c84:	4798      	blx	r3
    2c86:	2800      	cmp	r0, #0
    2c88:	d1fa      	bne.n	2c80 <recv+0xc8>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    2c8a:	0020      	movs	r0, r4
}
    2c8c:	b002      	add	sp, #8
    2c8e:	bc04      	pop	{r2}
    2c90:	4690      	mov	r8, r2
    2c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
    2c94:	2001      	movs	r0, #1
    2c96:	4240      	negs	r0, r0
    2c98:	e7f8      	b.n	2c8c <recv+0xd4>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2c9a:	2005      	movs	r0, #5
    2c9c:	4240      	negs	r0, r0
    2c9e:	e7f5      	b.n	2c8c <recv+0xd4>
   CHECK_SOCKDATA();
    2ca0:	200e      	movs	r0, #14
    2ca2:	4240      	negs	r0, r0
    2ca4:	e7f2      	b.n	2c8c <recv+0xd4>
    2ca6:	46c0      	nop			; (mov r8, r8)
    2ca8:	0000326d 	.word	0x0000326d
    2cac:	0000274d 	.word	0x0000274d
    2cb0:	00003495 	.word	0x00003495
    2cb4:	00003429 	.word	0x00003429
    2cb8:	20000aa0 	.word	0x20000aa0
    2cbc:	00003579 	.word	0x00003579
    2cc0:	000032d1 	.word	0x000032d1

00002cc4 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
    2cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cc6:	46de      	mov	lr, fp
    2cc8:	b500      	push	{lr}
    2cca:	b084      	sub	sp, #16
    2ccc:	9001      	str	r0, [sp, #4]
    2cce:	9103      	str	r1, [sp, #12]
    2cd0:	4693      	mov	fp, r2
    2cd2:	001c      	movs	r4, r3
    2cd4:	ab0a      	add	r3, sp, #40	; 0x28
    2cd6:	881f      	ldrh	r7, [r3, #0]
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    2cd8:	2808      	cmp	r0, #8
    2cda:	d900      	bls.n	2cde <sendto+0x1a>
    2cdc:	e094      	b.n	2e08 <sendto+0x144>
   switch(getSn_MR(sn) & 0x0F)
    2cde:	0005      	movs	r5, r0
    2ce0:	0083      	lsls	r3, r0, #2
    2ce2:	3301      	adds	r3, #1
    2ce4:	00de      	lsls	r6, r3, #3
    2ce6:	0030      	movs	r0, r6
    2ce8:	4b52      	ldr	r3, [pc, #328]	; (2e34 <sendto+0x170>)
    2cea:	4798      	blx	r3
    2cec:	230f      	movs	r3, #15
    2cee:	4003      	ands	r3, r0
    2cf0:	3b02      	subs	r3, #2
    2cf2:	b2db      	uxtb	r3, r3
    2cf4:	2b02      	cmp	r3, #2
    2cf6:	d900      	bls.n	2cfa <sendto+0x36>
    2cf8:	e089      	b.n	2e0e <sendto+0x14a>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    2cfa:	465b      	mov	r3, fp
    2cfc:	2b00      	cmp	r3, #0
    2cfe:	d100      	bne.n	2d02 <sendto+0x3e>
    2d00:	e088      	b.n	2e14 <sendto+0x150>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
    2d02:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    2d04:	021b      	lsls	r3, r3, #8
    2d06:	7862      	ldrb	r2, [r4, #1]
    2d08:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    2d0a:	021b      	lsls	r3, r3, #8
    2d0c:	78a2      	ldrb	r2, [r4, #2]
    2d0e:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    2d10:	021b      	lsls	r3, r3, #8
    2d12:	78e2      	ldrb	r2, [r4, #3]
    2d14:	189b      	adds	r3, r3, r2
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    2d16:	2b00      	cmp	r3, #0
    2d18:	d033      	beq.n	2d82 <sendto+0xbe>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    2d1a:	2f00      	cmp	r7, #0
    2d1c:	d104      	bne.n	2d28 <sendto+0x64>
    2d1e:	0030      	movs	r0, r6
    2d20:	4b44      	ldr	r3, [pc, #272]	; (2e34 <sendto+0x170>)
    2d22:	4798      	blx	r3
    2d24:	0743      	lsls	r3, r0, #29
    2d26:	d578      	bpl.n	2e1a <sendto+0x156>
   tmp = getSn_SR(sn);
    2d28:	23c0      	movs	r3, #192	; 0xc0
    2d2a:	009b      	lsls	r3, r3, #2
    2d2c:	469c      	mov	ip, r3
    2d2e:	44b4      	add	ip, r6
    2d30:	4663      	mov	r3, ip
    2d32:	9302      	str	r3, [sp, #8]
    2d34:	4660      	mov	r0, ip
    2d36:	4b3f      	ldr	r3, [pc, #252]	; (2e34 <sendto+0x170>)
    2d38:	4798      	blx	r3
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    2d3a:	2842      	cmp	r0, #66	; 0x42
    2d3c:	d003      	beq.n	2d46 <sendto+0x82>
    2d3e:	2822      	cmp	r0, #34	; 0x22
    2d40:	d001      	beq.n	2d46 <sendto+0x82>
    2d42:	2832      	cmp	r0, #50	; 0x32
    2d44:	d16c      	bne.n	2e20 <sendto+0x15c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
    2d46:	2204      	movs	r2, #4
    2d48:	0021      	movs	r1, r4
    2d4a:	23c0      	movs	r3, #192	; 0xc0
    2d4c:	011b      	lsls	r3, r3, #4
    2d4e:	18f0      	adds	r0, r6, r3
    2d50:	4b39      	ldr	r3, [pc, #228]	; (2e38 <sendto+0x174>)
    2d52:	4798      	blx	r3
   setSn_DPORT(sn,port);      
    2d54:	0a39      	lsrs	r1, r7, #8
    2d56:	2380      	movs	r3, #128	; 0x80
    2d58:	015b      	lsls	r3, r3, #5
    2d5a:	18f0      	adds	r0, r6, r3
    2d5c:	4c37      	ldr	r4, [pc, #220]	; (2e3c <sendto+0x178>)
    2d5e:	47a0      	blx	r4
    2d60:	b2f9      	uxtb	r1, r7
    2d62:	2388      	movs	r3, #136	; 0x88
    2d64:	015b      	lsls	r3, r3, #5
    2d66:	18f0      	adds	r0, r6, r3
    2d68:	47a0      	blx	r4
   freesize = getSn_TxMAX(sn);
    2d6a:	23f8      	movs	r3, #248	; 0xf8
    2d6c:	015b      	lsls	r3, r3, #5
    2d6e:	18f0      	adds	r0, r6, r3
    2d70:	4b30      	ldr	r3, [pc, #192]	; (2e34 <sendto+0x170>)
    2d72:	4798      	blx	r3
    2d74:	b280      	uxth	r0, r0
    2d76:	0280      	lsls	r0, r0, #10
    2d78:	b287      	uxth	r7, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    2d7a:	45bb      	cmp	fp, r7
    2d7c:	d80b      	bhi.n	2d96 <sendto+0xd2>
    2d7e:	465f      	mov	r7, fp
    2d80:	e009      	b.n	2d96 <sendto+0xd2>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    2d82:	0030      	movs	r0, r6
    2d84:	4b2b      	ldr	r3, [pc, #172]	; (2e34 <sendto+0x170>)
    2d86:	4798      	blx	r3
    2d88:	0743      	lsls	r3, r0, #29
    2d8a:	d4c6      	bmi.n	2d1a <sendto+0x56>
    2d8c:	200c      	movs	r0, #12
    2d8e:	4240      	negs	r0, r0
    2d90:	e04b      	b.n	2e2a <sendto+0x166>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
      if(len <= freesize) break;
    2d92:	42a7      	cmp	r7, r4
    2d94:	d911      	bls.n	2dba <sendto+0xf6>
      freesize = getSn_TX_FSR(sn);
    2d96:	9801      	ldr	r0, [sp, #4]
    2d98:	4b29      	ldr	r3, [pc, #164]	; (2e40 <sendto+0x17c>)
    2d9a:	4798      	blx	r3
    2d9c:	0004      	movs	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2d9e:	9802      	ldr	r0, [sp, #8]
    2da0:	4b24      	ldr	r3, [pc, #144]	; (2e34 <sendto+0x170>)
    2da2:	4798      	blx	r3
    2da4:	2800      	cmp	r0, #0
    2da6:	d03e      	beq.n	2e26 <sendto+0x162>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    2da8:	4b26      	ldr	r3, [pc, #152]	; (2e44 <sendto+0x180>)
    2daa:	881b      	ldrh	r3, [r3, #0]
    2dac:	412b      	asrs	r3, r5
    2dae:	07db      	lsls	r3, r3, #31
    2db0:	d5ef      	bpl.n	2d92 <sendto+0xce>
    2db2:	42a7      	cmp	r7, r4
    2db4:	d9ed      	bls.n	2d92 <sendto+0xce>
    2db6:	2000      	movs	r0, #0
    2db8:	e037      	b.n	2e2a <sendto+0x166>
   };
	wiz_send_data(sn, buf, len);
    2dba:	003a      	movs	r2, r7
    2dbc:	9903      	ldr	r1, [sp, #12]
    2dbe:	9801      	ldr	r0, [sp, #4]
    2dc0:	4b21      	ldr	r3, [pc, #132]	; (2e48 <sendto+0x184>)
    2dc2:	4798      	blx	r3
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
    2dc4:	1c74      	adds	r4, r6, #1
    2dc6:	34ff      	adds	r4, #255	; 0xff
    2dc8:	2120      	movs	r1, #32
    2dca:	0020      	movs	r0, r4
    2dcc:	4b1b      	ldr	r3, [pc, #108]	; (2e3c <sendto+0x178>)
    2dce:	4798      	blx	r3
	/* wait to process the command... */
	while(getSn_CR(sn));
    2dd0:	0020      	movs	r0, r4
    2dd2:	4b18      	ldr	r3, [pc, #96]	; (2e34 <sendto+0x170>)
    2dd4:	4798      	blx	r3
    2dd6:	2800      	cmp	r0, #0
    2dd8:	d1fa      	bne.n	2dd0 <sendto+0x10c>
   while(1)
   {
      tmp = getSn_IR(sn);
    2dda:	2380      	movs	r3, #128	; 0x80
    2ddc:	009b      	lsls	r3, r3, #2
    2dde:	18f4      	adds	r4, r6, r3
    2de0:	0020      	movs	r0, r4
    2de2:	4b14      	ldr	r3, [pc, #80]	; (2e34 <sendto+0x170>)
    2de4:	4798      	blx	r3
      if(tmp & Sn_IR_SENDOK)
    2de6:	06c3      	lsls	r3, r0, #27
    2de8:	d408      	bmi.n	2dfc <sendto+0x138>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
    2dea:	0703      	lsls	r3, r0, #28
    2dec:	d5f5      	bpl.n	2dda <sendto+0x116>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
    2dee:	2108      	movs	r1, #8
    2df0:	0020      	movs	r0, r4
    2df2:	4b12      	ldr	r3, [pc, #72]	; (2e3c <sendto+0x178>)
    2df4:	4798      	blx	r3
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
    2df6:	200d      	movs	r0, #13
    2df8:	4240      	negs	r0, r0
    2dfa:	e016      	b.n	2e2a <sendto+0x166>
         setSn_IR(sn, Sn_IR_SENDOK);
    2dfc:	2110      	movs	r1, #16
    2dfe:	0020      	movs	r0, r4
    2e00:	4b0e      	ldr	r3, [pc, #56]	; (2e3c <sendto+0x178>)
    2e02:	4798      	blx	r3
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    2e04:	0038      	movs	r0, r7
    2e06:	e010      	b.n	2e2a <sendto+0x166>
   CHECK_SOCKNUM();
    2e08:	2001      	movs	r0, #1
    2e0a:	4240      	negs	r0, r0
    2e0c:	e00d      	b.n	2e2a <sendto+0x166>
         return SOCKERR_SOCKMODE;
    2e0e:	2005      	movs	r0, #5
    2e10:	4240      	negs	r0, r0
    2e12:	e00a      	b.n	2e2a <sendto+0x166>
   CHECK_SOCKDATA();
    2e14:	200e      	movs	r0, #14
    2e16:	4240      	negs	r0, r0
    2e18:	e007      	b.n	2e2a <sendto+0x166>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    2e1a:	200b      	movs	r0, #11
    2e1c:	4240      	negs	r0, r0
    2e1e:	e004      	b.n	2e2a <sendto+0x166>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    2e20:	2007      	movs	r0, #7
    2e22:	4240      	negs	r0, r0
    2e24:	e001      	b.n	2e2a <sendto+0x166>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2e26:	2004      	movs	r0, #4
    2e28:	4240      	negs	r0, r0
}
    2e2a:	b004      	add	sp, #16
    2e2c:	bc04      	pop	{r2}
    2e2e:	4693      	mov	fp, r2
    2e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e32:	46c0      	nop			; (mov r8, r8)
    2e34:	0000326d 	.word	0x0000326d
    2e38:	000033b1 	.word	0x000033b1
    2e3c:	000032d1 	.word	0x000032d1
    2e40:	00003429 	.word	0x00003429
    2e44:	20000aa0 	.word	0x20000aa0
    2e48:	00003501 	.word	0x00003501

00002e4c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    2e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e4e:	46de      	mov	lr, fp
    2e50:	4647      	mov	r7, r8
    2e52:	b580      	push	{r7, lr}
    2e54:	b085      	sub	sp, #20
    2e56:	0005      	movs	r5, r0
    2e58:	9100      	str	r1, [sp, #0]
    2e5a:	4690      	mov	r8, r2
    2e5c:	9301      	str	r3, [sp, #4]
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    2e5e:	2808      	cmp	r0, #8
    2e60:	d900      	bls.n	2e64 <recvfrom+0x18>
    2e62:	e11b      	b.n	309c <recvfrom+0x250>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    2e64:	0007      	movs	r7, r0
    2e66:	0083      	lsls	r3, r0, #2
    2e68:	3301      	adds	r3, #1
    2e6a:	00de      	lsls	r6, r3, #3
    2e6c:	0030      	movs	r0, r6
    2e6e:	4b91      	ldr	r3, [pc, #580]	; (30b4 <recvfrom+0x268>)
    2e70:	4798      	blx	r3
    2e72:	4683      	mov	fp, r0
    2e74:	230f      	movs	r3, #15
    2e76:	4003      	ands	r3, r0
    2e78:	3b02      	subs	r3, #2
    2e7a:	b2db      	uxtb	r3, r3
    2e7c:	2b02      	cmp	r3, #2
    2e7e:	d900      	bls.n	2e82 <recvfrom+0x36>
    2e80:	e10f      	b.n	30a2 <recvfrom+0x256>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    2e82:	4643      	mov	r3, r8
    2e84:	2b00      	cmp	r3, #0
    2e86:	d100      	bne.n	2e8a <recvfrom+0x3e>
    2e88:	e10e      	b.n	30a8 <recvfrom+0x25c>
   if(sock_remained_size[sn] == 0)
    2e8a:	006b      	lsls	r3, r5, #1
    2e8c:	4a8a      	ldr	r2, [pc, #552]	; (30b8 <recvfrom+0x26c>)
    2e8e:	5a9b      	ldrh	r3, [r3, r2]
    2e90:	2b00      	cmp	r3, #0
    2e92:	d015      	beq.n	2ec0 <recvfrom+0x74>
	uint16_t pack_len=0;
    2e94:	2400      	movs	r4, #0
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    2e96:	2307      	movs	r3, #7
    2e98:	465a      	mov	r2, fp
    2e9a:	4013      	ands	r3, r2
    2e9c:	2b03      	cmp	r3, #3
    2e9e:	d100      	bne.n	2ea2 <recvfrom+0x56>
    2ea0:	e0bd      	b.n	301e <recvfrom+0x1d2>
    2ea2:	2b04      	cmp	r3, #4
    2ea4:	d100      	bne.n	2ea8 <recvfrom+0x5c>
    2ea6:	e081      	b.n	2fac <recvfrom+0x160>
    2ea8:	2b02      	cmp	r3, #2
    2eaa:	d01e      	beq.n	2eea <recvfrom+0x9e>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    2eac:	0021      	movs	r1, r4
    2eae:	0028      	movs	r0, r5
    2eb0:	4b82      	ldr	r3, [pc, #520]	; (30bc <recvfrom+0x270>)
    2eb2:	4798      	blx	r3
         sock_remained_size[sn] = pack_len;
    2eb4:	006b      	lsls	r3, r5, #1
    2eb6:	4a80      	ldr	r2, [pc, #512]	; (30b8 <recvfrom+0x26c>)
    2eb8:	529c      	strh	r4, [r3, r2]
         break;
    2eba:	e026      	b.n	2f0a <recvfrom+0xbe>
         if(pack_len != 0) break;
    2ebc:	2c00      	cmp	r4, #0
    2ebe:	d1ea      	bne.n	2e96 <recvfrom+0x4a>
         pack_len = getSn_RX_RSR(sn);
    2ec0:	0028      	movs	r0, r5
    2ec2:	4b7f      	ldr	r3, [pc, #508]	; (30c0 <recvfrom+0x274>)
    2ec4:	4798      	blx	r3
    2ec6:	0004      	movs	r4, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2ec8:	23c0      	movs	r3, #192	; 0xc0
    2eca:	009b      	lsls	r3, r3, #2
    2ecc:	18f0      	adds	r0, r6, r3
    2ece:	4b79      	ldr	r3, [pc, #484]	; (30b4 <recvfrom+0x268>)
    2ed0:	4798      	blx	r3
    2ed2:	2800      	cmp	r0, #0
    2ed4:	d100      	bne.n	2ed8 <recvfrom+0x8c>
    2ed6:	e0ea      	b.n	30ae <recvfrom+0x262>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    2ed8:	4b7a      	ldr	r3, [pc, #488]	; (30c4 <recvfrom+0x278>)
    2eda:	881b      	ldrh	r3, [r3, #0]
    2edc:	413b      	asrs	r3, r7
    2ede:	07db      	lsls	r3, r3, #31
    2ee0:	d5ec      	bpl.n	2ebc <recvfrom+0x70>
    2ee2:	2c00      	cmp	r4, #0
    2ee4:	d1ea      	bne.n	2ebc <recvfrom+0x70>
    2ee6:	2000      	movs	r0, #0
    2ee8:	e029      	b.n	2f3e <recvfrom+0xf2>
	      if(sock_remained_size[sn] == 0)
    2eea:	006b      	lsls	r3, r5, #1
    2eec:	4a72      	ldr	r2, [pc, #456]	; (30b8 <recvfrom+0x26c>)
    2eee:	5a9b      	ldrh	r3, [r3, r2]
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d029      	beq.n	2f48 <recvfrom+0xfc>
			if(len < sock_remained_size[sn]) pack_len = len;
    2ef4:	006b      	lsls	r3, r5, #1
    2ef6:	4a70      	ldr	r2, [pc, #448]	; (30b8 <recvfrom+0x26c>)
    2ef8:	5a9c      	ldrh	r4, [r3, r2]
    2efa:	45a0      	cmp	r8, r4
    2efc:	d200      	bcs.n	2f00 <recvfrom+0xb4>
    2efe:	4644      	mov	r4, r8
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    2f00:	0022      	movs	r2, r4
    2f02:	9900      	ldr	r1, [sp, #0]
    2f04:	0028      	movs	r0, r5
    2f06:	4b70      	ldr	r3, [pc, #448]	; (30c8 <recvfrom+0x27c>)
    2f08:	4798      	blx	r3
   }
	setSn_CR(sn,Sn_CR_RECV);
    2f0a:	3601      	adds	r6, #1
    2f0c:	36ff      	adds	r6, #255	; 0xff
    2f0e:	2140      	movs	r1, #64	; 0x40
    2f10:	0030      	movs	r0, r6
    2f12:	4b6e      	ldr	r3, [pc, #440]	; (30cc <recvfrom+0x280>)
    2f14:	4798      	blx	r3
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    2f16:	0030      	movs	r0, r6
    2f18:	4b66      	ldr	r3, [pc, #408]	; (30b4 <recvfrom+0x268>)
    2f1a:	4798      	blx	r3
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d1fa      	bne.n	2f16 <recvfrom+0xca>
	sock_remained_size[sn] -= pack_len;
    2f20:	4a65      	ldr	r2, [pc, #404]	; (30b8 <recvfrom+0x26c>)
    2f22:	0069      	lsls	r1, r5, #1
    2f24:	5a8b      	ldrh	r3, [r1, r2]
    2f26:	1b1b      	subs	r3, r3, r4
    2f28:	b29b      	uxth	r3, r3
    2f2a:	528b      	strh	r3, [r1, r2]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d100      	bne.n	2f32 <recvfrom+0xe6>
    2f30:	e0b0      	b.n	3094 <recvfrom+0x248>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    2f32:	4a67      	ldr	r2, [pc, #412]	; (30d0 <recvfrom+0x284>)
    2f34:	5d53      	ldrb	r3, [r2, r5]
    2f36:	2101      	movs	r1, #1
    2f38:	430b      	orrs	r3, r1
    2f3a:	5553      	strb	r3, [r2, r5]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    2f3c:	0020      	movs	r0, r4
}
    2f3e:	b005      	add	sp, #20
    2f40:	bc0c      	pop	{r2, r3}
    2f42:	4690      	mov	r8, r2
    2f44:	469b      	mov	fp, r3
    2f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   			wiz_recv_data(sn, head, 8);
    2f48:	2208      	movs	r2, #8
    2f4a:	a902      	add	r1, sp, #8
    2f4c:	0028      	movs	r0, r5
    2f4e:	4b5e      	ldr	r3, [pc, #376]	; (30c8 <recvfrom+0x27c>)
    2f50:	4798      	blx	r3
   			setSn_CR(sn,Sn_CR_RECV);
    2f52:	1c74      	adds	r4, r6, #1
    2f54:	34ff      	adds	r4, #255	; 0xff
    2f56:	2140      	movs	r1, #64	; 0x40
    2f58:	0020      	movs	r0, r4
    2f5a:	4b5c      	ldr	r3, [pc, #368]	; (30cc <recvfrom+0x280>)
    2f5c:	4798      	blx	r3
   			while(getSn_CR(sn));
    2f5e:	0020      	movs	r0, r4
    2f60:	4b54      	ldr	r3, [pc, #336]	; (30b4 <recvfrom+0x268>)
    2f62:	4798      	blx	r3
    2f64:	2800      	cmp	r0, #0
    2f66:	d1fa      	bne.n	2f5e <recvfrom+0x112>
               addr[0] = head[0];
    2f68:	ab02      	add	r3, sp, #8
    2f6a:	781b      	ldrb	r3, [r3, #0]
    2f6c:	9a01      	ldr	r2, [sp, #4]
    2f6e:	7013      	strb	r3, [r2, #0]
      			addr[1] = head[1];
    2f70:	ab02      	add	r3, sp, #8
    2f72:	785b      	ldrb	r3, [r3, #1]
    2f74:	7053      	strb	r3, [r2, #1]
      			addr[2] = head[2];
    2f76:	ab02      	add	r3, sp, #8
    2f78:	789b      	ldrb	r3, [r3, #2]
    2f7a:	7093      	strb	r3, [r2, #2]
      			addr[3] = head[3];
    2f7c:	ab02      	add	r3, sp, #8
    2f7e:	78db      	ldrb	r3, [r3, #3]
    2f80:	70d3      	strb	r3, [r2, #3]
      			*port = head[4];
    2f82:	ab02      	add	r3, sp, #8
    2f84:	791b      	ldrb	r3, [r3, #4]
      			*port = (*port << 8) + head[5];
    2f86:	021b      	lsls	r3, r3, #8
    2f88:	aa02      	add	r2, sp, #8
    2f8a:	7952      	ldrb	r2, [r2, #5]
    2f8c:	189b      	adds	r3, r3, r2
    2f8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2f90:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
    2f92:	ab02      	add	r3, sp, #8
    2f94:	799b      	ldrb	r3, [r3, #6]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    2f96:	021b      	lsls	r3, r3, #8
    2f98:	aa02      	add	r2, sp, #8
    2f9a:	79d2      	ldrb	r2, [r2, #7]
    2f9c:	189b      	adds	r3, r3, r2
    2f9e:	006a      	lsls	r2, r5, #1
    2fa0:	4945      	ldr	r1, [pc, #276]	; (30b8 <recvfrom+0x26c>)
    2fa2:	528b      	strh	r3, [r1, r2]
   			sock_pack_info[sn] = PACK_FIRST;
    2fa4:	2280      	movs	r2, #128	; 0x80
    2fa6:	4b4a      	ldr	r3, [pc, #296]	; (30d0 <recvfrom+0x284>)
    2fa8:	555a      	strb	r2, [r3, r5]
    2faa:	e7a3      	b.n	2ef4 <recvfrom+0xa8>
	      if(sock_remained_size[sn] == 0)
    2fac:	006b      	lsls	r3, r5, #1
    2fae:	4a42      	ldr	r2, [pc, #264]	; (30b8 <recvfrom+0x26c>)
    2fb0:	5a9b      	ldrh	r3, [r3, r2]
    2fb2:	2b00      	cmp	r3, #0
    2fb4:	d00b      	beq.n	2fce <recvfrom+0x182>
			if(len < sock_remained_size[sn]) pack_len = len;
    2fb6:	006b      	lsls	r3, r5, #1
    2fb8:	4a3f      	ldr	r2, [pc, #252]	; (30b8 <recvfrom+0x26c>)
    2fba:	5a9c      	ldrh	r4, [r3, r2]
    2fbc:	45a0      	cmp	r8, r4
    2fbe:	d200      	bcs.n	2fc2 <recvfrom+0x176>
    2fc0:	4644      	mov	r4, r8
			wiz_recv_data(sn,buf,pack_len);
    2fc2:	0022      	movs	r2, r4
    2fc4:	9900      	ldr	r1, [sp, #0]
    2fc6:	0028      	movs	r0, r5
    2fc8:	4b3f      	ldr	r3, [pc, #252]	; (30c8 <recvfrom+0x27c>)
    2fca:	4798      	blx	r3
		   break;
    2fcc:	e79d      	b.n	2f0a <recvfrom+0xbe>
   			wiz_recv_data(sn, head, 2);
    2fce:	2202      	movs	r2, #2
    2fd0:	a902      	add	r1, sp, #8
    2fd2:	0028      	movs	r0, r5
    2fd4:	4b3c      	ldr	r3, [pc, #240]	; (30c8 <recvfrom+0x27c>)
    2fd6:	4798      	blx	r3
   			setSn_CR(sn,Sn_CR_RECV);
    2fd8:	1c74      	adds	r4, r6, #1
    2fda:	34ff      	adds	r4, #255	; 0xff
    2fdc:	2140      	movs	r1, #64	; 0x40
    2fde:	0020      	movs	r0, r4
    2fe0:	4b3a      	ldr	r3, [pc, #232]	; (30cc <recvfrom+0x280>)
    2fe2:	4798      	blx	r3
   			while(getSn_CR(sn));
    2fe4:	0020      	movs	r0, r4
    2fe6:	4b33      	ldr	r3, [pc, #204]	; (30b4 <recvfrom+0x268>)
    2fe8:	4798      	blx	r3
    2fea:	2800      	cmp	r0, #0
    2fec:	d1fa      	bne.n	2fe4 <recvfrom+0x198>
    			sock_remained_size[sn] = head[0];
    2fee:	ab02      	add	r3, sp, #8
    2ff0:	781b      	ldrb	r3, [r3, #0]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    2ff2:	021b      	lsls	r3, r3, #8
    2ff4:	aa02      	add	r2, sp, #8
    2ff6:	7852      	ldrb	r2, [r2, #1]
    2ff8:	189b      	adds	r3, r3, r2
    2ffa:	b29b      	uxth	r3, r3
    2ffc:	3b02      	subs	r3, #2
    2ffe:	b29b      	uxth	r3, r3
    3000:	006a      	lsls	r2, r5, #1
    3002:	492d      	ldr	r1, [pc, #180]	; (30b8 <recvfrom+0x26c>)
    3004:	5253      	strh	r3, [r2, r1]
   			if(sock_remained_size[sn] > 1514) 
    3006:	4a33      	ldr	r2, [pc, #204]	; (30d4 <recvfrom+0x288>)
    3008:	4293      	cmp	r3, r2
    300a:	d803      	bhi.n	3014 <recvfrom+0x1c8>
   			sock_pack_info[sn] = PACK_FIRST;
    300c:	2280      	movs	r2, #128	; 0x80
    300e:	4b30      	ldr	r3, [pc, #192]	; (30d0 <recvfrom+0x284>)
    3010:	555a      	strb	r2, [r3, r5]
    3012:	e7d0      	b.n	2fb6 <recvfrom+0x16a>
   			   close(sn);
    3014:	0028      	movs	r0, r5
    3016:	4b30      	ldr	r3, [pc, #192]	; (30d8 <recvfrom+0x28c>)
    3018:	4798      	blx	r3
   			   return SOCKFATAL_PACKLEN;
    301a:	4830      	ldr	r0, [pc, #192]	; (30dc <recvfrom+0x290>)
    301c:	e78f      	b.n	2f3e <recvfrom+0xf2>
		   if(sock_remained_size[sn] == 0)
    301e:	006b      	lsls	r3, r5, #1
    3020:	4a25      	ldr	r2, [pc, #148]	; (30b8 <recvfrom+0x26c>)
    3022:	5a9b      	ldrh	r3, [r3, r2]
    3024:	2b00      	cmp	r3, #0
    3026:	d00b      	beq.n	3040 <recvfrom+0x1f4>
			if(len < sock_remained_size[sn]) pack_len = len;
    3028:	006b      	lsls	r3, r5, #1
    302a:	4a23      	ldr	r2, [pc, #140]	; (30b8 <recvfrom+0x26c>)
    302c:	5a9c      	ldrh	r4, [r3, r2]
    302e:	45a0      	cmp	r8, r4
    3030:	d200      	bcs.n	3034 <recvfrom+0x1e8>
    3032:	4644      	mov	r4, r8
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    3034:	0022      	movs	r2, r4
    3036:	9900      	ldr	r1, [sp, #0]
    3038:	0028      	movs	r0, r5
    303a:	4b23      	ldr	r3, [pc, #140]	; (30c8 <recvfrom+0x27c>)
    303c:	4798      	blx	r3
			break;
    303e:	e764      	b.n	2f0a <recvfrom+0xbe>
   			wiz_recv_data(sn, head, 6);
    3040:	2206      	movs	r2, #6
    3042:	a902      	add	r1, sp, #8
    3044:	0028      	movs	r0, r5
    3046:	4b20      	ldr	r3, [pc, #128]	; (30c8 <recvfrom+0x27c>)
    3048:	4798      	blx	r3
   			setSn_CR(sn,Sn_CR_RECV);
    304a:	1c74      	adds	r4, r6, #1
    304c:	34ff      	adds	r4, #255	; 0xff
    304e:	2140      	movs	r1, #64	; 0x40
    3050:	0020      	movs	r0, r4
    3052:	4b1e      	ldr	r3, [pc, #120]	; (30cc <recvfrom+0x280>)
    3054:	4798      	blx	r3
   			while(getSn_CR(sn));
    3056:	0020      	movs	r0, r4
    3058:	4b16      	ldr	r3, [pc, #88]	; (30b4 <recvfrom+0x268>)
    305a:	4798      	blx	r3
    305c:	2800      	cmp	r0, #0
    305e:	d1fa      	bne.n	3056 <recvfrom+0x20a>
   			addr[0] = head[0];
    3060:	ab02      	add	r3, sp, #8
    3062:	781b      	ldrb	r3, [r3, #0]
    3064:	9a01      	ldr	r2, [sp, #4]
    3066:	7013      	strb	r3, [r2, #0]
   			addr[1] = head[1];
    3068:	ab02      	add	r3, sp, #8
    306a:	785b      	ldrb	r3, [r3, #1]
    306c:	7053      	strb	r3, [r2, #1]
   			addr[2] = head[2];
    306e:	ab02      	add	r3, sp, #8
    3070:	789b      	ldrb	r3, [r3, #2]
    3072:	7093      	strb	r3, [r2, #2]
   			addr[3] = head[3];
    3074:	ab02      	add	r3, sp, #8
    3076:	78db      	ldrb	r3, [r3, #3]
    3078:	70d3      	strb	r3, [r2, #3]
   			sock_remained_size[sn] = head[4];
    307a:	ab02      	add	r3, sp, #8
    307c:	791b      	ldrb	r3, [r3, #4]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    307e:	021b      	lsls	r3, r3, #8
    3080:	aa02      	add	r2, sp, #8
    3082:	7952      	ldrb	r2, [r2, #5]
    3084:	189b      	adds	r3, r3, r2
    3086:	006a      	lsls	r2, r5, #1
    3088:	490b      	ldr	r1, [pc, #44]	; (30b8 <recvfrom+0x26c>)
    308a:	528b      	strh	r3, [r1, r2]
   			sock_pack_info[sn] = PACK_FIRST;
    308c:	2280      	movs	r2, #128	; 0x80
    308e:	4b10      	ldr	r3, [pc, #64]	; (30d0 <recvfrom+0x284>)
    3090:	555a      	strb	r2, [r3, r5]
    3092:	e7c9      	b.n	3028 <recvfrom+0x1dc>
	else sock_pack_info[sn] = PACK_COMPLETED;
    3094:	2200      	movs	r2, #0
    3096:	4b0e      	ldr	r3, [pc, #56]	; (30d0 <recvfrom+0x284>)
    3098:	555a      	strb	r2, [r3, r5]
    309a:	e74f      	b.n	2f3c <recvfrom+0xf0>
   CHECK_SOCKNUM();
    309c:	2001      	movs	r0, #1
    309e:	4240      	negs	r0, r0
    30a0:	e74d      	b.n	2f3e <recvfrom+0xf2>
         return SOCKERR_SOCKMODE;
    30a2:	2005      	movs	r0, #5
    30a4:	4240      	negs	r0, r0
    30a6:	e74a      	b.n	2f3e <recvfrom+0xf2>
   CHECK_SOCKDATA();
    30a8:	200e      	movs	r0, #14
    30aa:	4240      	negs	r0, r0
    30ac:	e747      	b.n	2f3e <recvfrom+0xf2>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    30ae:	2004      	movs	r0, #4
    30b0:	4240      	negs	r0, r0
    30b2:	e744      	b.n	2f3e <recvfrom+0xf2>
    30b4:	0000326d 	.word	0x0000326d
    30b8:	20000aac 	.word	0x20000aac
    30bc:	000035f1 	.word	0x000035f1
    30c0:	00003495 	.word	0x00003495
    30c4:	20000aa0 	.word	0x20000aa0
    30c8:	00003579 	.word	0x00003579
    30cc:	000032d1 	.word	0x000032d1
    30d0:	20000aa4 	.word	0x20000aa4
    30d4:	000005ea 	.word	0x000005ea
    30d8:	0000274d 	.word	0x0000274d
    30dc:	fffffc17 	.word	0xfffffc17

000030e0 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
    30e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30e2:	0004      	movs	r4, r0
    30e4:	0015      	movs	r5, r2
   CHECK_SOCKNUM();
    30e6:	2808      	cmp	r0, #8
    30e8:	d900      	bls.n	30ec <getsockopt+0xc>
    30ea:	e0a4      	b.n	3236 <getsockopt+0x156>
   switch(sotype)
    30ec:	290c      	cmp	r1, #12
    30ee:	d900      	bls.n	30f2 <getsockopt+0x12>
    30f0:	e0a4      	b.n	323c <getsockopt+0x15c>
    30f2:	0089      	lsls	r1, r1, #2
    30f4:	4b56      	ldr	r3, [pc, #344]	; (3250 <getsockopt+0x170>)
    30f6:	585b      	ldr	r3, [r3, r1]
    30f8:	469f      	mov	pc, r3
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
    30fa:	0080      	lsls	r0, r0, #2
    30fc:	3001      	adds	r0, #1
    30fe:	00c0      	lsls	r0, r0, #3
    3100:	4b54      	ldr	r3, [pc, #336]	; (3254 <getsockopt+0x174>)
    3102:	4798      	blx	r3
    3104:	230f      	movs	r3, #15
    3106:	4398      	bics	r0, r3
    3108:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    310a:	2001      	movs	r0, #1
}
    310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
    310e:	0080      	lsls	r0, r0, #2
    3110:	3001      	adds	r0, #1
    3112:	00c0      	lsls	r0, r0, #3
    3114:	23b0      	movs	r3, #176	; 0xb0
    3116:	015b      	lsls	r3, r3, #5
    3118:	469c      	mov	ip, r3
    311a:	4460      	add	r0, ip
    311c:	4b4d      	ldr	r3, [pc, #308]	; (3254 <getsockopt+0x174>)
    311e:	4798      	blx	r3
    3120:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    3122:	2001      	movs	r0, #1
         break;
    3124:	e7f2      	b.n	310c <getsockopt+0x2c>
         *(uint8_t*) arg = getSn_TOS(sn);
    3126:	0080      	lsls	r0, r0, #2
    3128:	3001      	adds	r0, #1
    312a:	00c0      	lsls	r0, r0, #3
    312c:	23a8      	movs	r3, #168	; 0xa8
    312e:	015b      	lsls	r3, r3, #5
    3130:	469c      	mov	ip, r3
    3132:	4460      	add	r0, ip
    3134:	4b47      	ldr	r3, [pc, #284]	; (3254 <getsockopt+0x174>)
    3136:	4798      	blx	r3
    3138:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    313a:	2001      	movs	r0, #1
         break;
    313c:	e7e6      	b.n	310c <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_MSSR(sn);
    313e:	0084      	lsls	r4, r0, #2
    3140:	3401      	adds	r4, #1
    3142:	00e4      	lsls	r4, r4, #3
    3144:	2390      	movs	r3, #144	; 0x90
    3146:	015b      	lsls	r3, r3, #5
    3148:	18e0      	adds	r0, r4, r3
    314a:	4f42      	ldr	r7, [pc, #264]	; (3254 <getsockopt+0x174>)
    314c:	47b8      	blx	r7
    314e:	b286      	uxth	r6, r0
    3150:	0236      	lsls	r6, r6, #8
    3152:	b2b6      	uxth	r6, r6
    3154:	2398      	movs	r3, #152	; 0x98
    3156:	015b      	lsls	r3, r3, #5
    3158:	18e0      	adds	r0, r4, r3
    315a:	47b8      	blx	r7
    315c:	b280      	uxth	r0, r0
    315e:	1836      	adds	r6, r6, r0
    3160:	802e      	strh	r6, [r5, #0]
   return SOCK_OK;
    3162:	2001      	movs	r0, #1
         break;
    3164:	e7d2      	b.n	310c <getsockopt+0x2c>
         getSn_DIPR(sn, (uint8_t*)arg);
    3166:	0080      	lsls	r0, r0, #2
    3168:	3001      	adds	r0, #1
    316a:	00c0      	lsls	r0, r0, #3
    316c:	23c0      	movs	r3, #192	; 0xc0
    316e:	011b      	lsls	r3, r3, #4
    3170:	469c      	mov	ip, r3
    3172:	4460      	add	r0, ip
    3174:	2204      	movs	r2, #4
    3176:	0029      	movs	r1, r5
    3178:	4b37      	ldr	r3, [pc, #220]	; (3258 <getsockopt+0x178>)
    317a:	4798      	blx	r3
   return SOCK_OK;
    317c:	2001      	movs	r0, #1
         break;
    317e:	e7c5      	b.n	310c <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_DPORT(sn);
    3180:	0084      	lsls	r4, r0, #2
    3182:	3401      	adds	r4, #1
    3184:	00e4      	lsls	r4, r4, #3
    3186:	2380      	movs	r3, #128	; 0x80
    3188:	015b      	lsls	r3, r3, #5
    318a:	18e0      	adds	r0, r4, r3
    318c:	4f31      	ldr	r7, [pc, #196]	; (3254 <getsockopt+0x174>)
    318e:	47b8      	blx	r7
    3190:	b286      	uxth	r6, r0
    3192:	0236      	lsls	r6, r6, #8
    3194:	b2b6      	uxth	r6, r6
    3196:	2388      	movs	r3, #136	; 0x88
    3198:	015b      	lsls	r3, r3, #5
    319a:	18e0      	adds	r0, r4, r3
    319c:	47b8      	blx	r7
    319e:	b280      	uxth	r0, r0
    31a0:	1836      	adds	r6, r6, r0
    31a2:	802e      	strh	r6, [r5, #0]
   return SOCK_OK;
    31a4:	2001      	movs	r0, #1
         break;
    31a6:	e7b1      	b.n	310c <getsockopt+0x2c>
         CHECK_SOCKMODE(Sn_MR_TCP);
    31a8:	0084      	lsls	r4, r0, #2
    31aa:	3401      	adds	r4, #1
    31ac:	00e4      	lsls	r4, r4, #3
    31ae:	0020      	movs	r0, r4
    31b0:	4b28      	ldr	r3, [pc, #160]	; (3254 <getsockopt+0x174>)
    31b2:	4798      	blx	r3
    31b4:	230f      	movs	r3, #15
    31b6:	4018      	ands	r0, r3
    31b8:	2801      	cmp	r0, #1
    31ba:	d142      	bne.n	3242 <getsockopt+0x162>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
    31bc:	23bc      	movs	r3, #188	; 0xbc
    31be:	019b      	lsls	r3, r3, #6
    31c0:	18e0      	adds	r0, r4, r3
    31c2:	4b24      	ldr	r3, [pc, #144]	; (3254 <getsockopt+0x174>)
    31c4:	4798      	blx	r3
    31c6:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    31c8:	2001      	movs	r0, #1
         break;
    31ca:	e79f      	b.n	310c <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
    31cc:	4b23      	ldr	r3, [pc, #140]	; (325c <getsockopt+0x17c>)
    31ce:	4798      	blx	r3
    31d0:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    31d2:	2001      	movs	r0, #1
         break;
    31d4:	e79a      	b.n	310c <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
    31d6:	4b22      	ldr	r3, [pc, #136]	; (3260 <getsockopt+0x180>)
    31d8:	4798      	blx	r3
    31da:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    31dc:	2001      	movs	r0, #1
         break;
    31de:	e795      	b.n	310c <getsockopt+0x2c>
         *(uint8_t*) arg = getSn_SR(sn);
    31e0:	0080      	lsls	r0, r0, #2
    31e2:	3001      	adds	r0, #1
    31e4:	00c0      	lsls	r0, r0, #3
    31e6:	23c0      	movs	r3, #192	; 0xc0
    31e8:	009b      	lsls	r3, r3, #2
    31ea:	469c      	mov	ip, r3
    31ec:	4460      	add	r0, ip
    31ee:	4b19      	ldr	r3, [pc, #100]	; (3254 <getsockopt+0x174>)
    31f0:	4798      	blx	r3
    31f2:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    31f4:	2001      	movs	r0, #1
         break;
    31f6:	e789      	b.n	310c <getsockopt+0x2c>
         if(getSn_MR(sn) & Sn_MR_TCP)
    31f8:	0080      	lsls	r0, r0, #2
    31fa:	3001      	adds	r0, #1
    31fc:	00c0      	lsls	r0, r0, #3
    31fe:	4b15      	ldr	r3, [pc, #84]	; (3254 <getsockopt+0x174>)
    3200:	4798      	blx	r3
    3202:	07c3      	lsls	r3, r0, #31
    3204:	d405      	bmi.n	3212 <getsockopt+0x132>
            *(uint16_t*)arg = sock_remained_size[sn];
    3206:	0064      	lsls	r4, r4, #1
    3208:	4b16      	ldr	r3, [pc, #88]	; (3264 <getsockopt+0x184>)
    320a:	5ae3      	ldrh	r3, [r4, r3]
    320c:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
    320e:	2001      	movs	r0, #1
    3210:	e77c      	b.n	310c <getsockopt+0x2c>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
    3212:	0020      	movs	r0, r4
    3214:	4b12      	ldr	r3, [pc, #72]	; (3260 <getsockopt+0x180>)
    3216:	4798      	blx	r3
    3218:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    321a:	2001      	movs	r0, #1
    321c:	e776      	b.n	310c <getsockopt+0x2c>
         if((getSn_MR(sn) == Sn_MR_TCP))
    321e:	0080      	lsls	r0, r0, #2
    3220:	3001      	adds	r0, #1
    3222:	00c0      	lsls	r0, r0, #3
    3224:	4b0b      	ldr	r3, [pc, #44]	; (3254 <getsockopt+0x174>)
    3226:	4798      	blx	r3
    3228:	2801      	cmp	r0, #1
    322a:	d00d      	beq.n	3248 <getsockopt+0x168>
         *(uint8_t*)arg = sock_pack_info[sn];
    322c:	4b0e      	ldr	r3, [pc, #56]	; (3268 <getsockopt+0x188>)
    322e:	5d1b      	ldrb	r3, [r3, r4]
    3230:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
    3232:	2001      	movs	r0, #1
         break;
    3234:	e76a      	b.n	310c <getsockopt+0x2c>
   CHECK_SOCKNUM();
    3236:	2001      	movs	r0, #1
    3238:	4240      	negs	r0, r0
    323a:	e767      	b.n	310c <getsockopt+0x2c>
         return SOCKERR_SOCKOPT;
    323c:	2002      	movs	r0, #2
    323e:	4240      	negs	r0, r0
    3240:	e764      	b.n	310c <getsockopt+0x2c>
         CHECK_SOCKMODE(Sn_MR_TCP);
    3242:	2005      	movs	r0, #5
    3244:	4240      	negs	r0, r0
    3246:	e761      	b.n	310c <getsockopt+0x2c>
             return SOCKERR_SOCKMODE;
    3248:	2005      	movs	r0, #5
    324a:	4240      	negs	r0, r0
    324c:	e75e      	b.n	310c <getsockopt+0x2c>
    324e:	46c0      	nop			; (mov r8, r8)
    3250:	00012794 	.word	0x00012794
    3254:	0000326d 	.word	0x0000326d
    3258:	00003331 	.word	0x00003331
    325c:	00003429 	.word	0x00003429
    3260:	00003495 	.word	0x00003495
    3264:	20000aac 	.word	0x20000aac
    3268:	20000aa4 	.word	0x20000aa4

0000326c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    326c:	b530      	push	{r4, r5, lr}
    326e:	b083      	sub	sp, #12
    3270:	0004      	movs	r4, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    3272:	4d16      	ldr	r5, [pc, #88]	; (32cc <WIZCHIP_READ+0x60>)
    3274:	68eb      	ldr	r3, [r5, #12]
    3276:	4798      	blx	r3
   WIZCHIP.CS._select();
    3278:	696b      	ldr	r3, [r5, #20]
    327a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    327c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    327e:	2b00      	cmp	r3, #0
    3280:	d016      	beq.n	32b0 <WIZCHIP_READ+0x44>
    3282:	4b12      	ldr	r3, [pc, #72]	; (32cc <WIZCHIP_READ+0x60>)
    3284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3286:	2b00      	cmp	r3, #0
    3288:	d012      	beq.n	32b0 <WIZCHIP_READ+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    328a:	0c22      	lsrs	r2, r4, #16
    328c:	a801      	add	r0, sp, #4
    328e:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    3290:	0a22      	lsrs	r2, r4, #8
    3292:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    3294:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    3296:	2103      	movs	r1, #3
    3298:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    329a:	4c0c      	ldr	r4, [pc, #48]	; (32cc <WIZCHIP_READ+0x60>)
    329c:	69e3      	ldr	r3, [r4, #28]
    329e:	4798      	blx	r3
    32a0:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
    32a2:	69a3      	ldr	r3, [r4, #24]
    32a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    32a6:	6923      	ldr	r3, [r4, #16]
    32a8:	4798      	blx	r3
   return ret;
}
    32aa:	0028      	movs	r0, r5
    32ac:	b003      	add	sp, #12
    32ae:	bd30      	pop	{r4, r5, pc}
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    32b0:	4d06      	ldr	r5, [pc, #24]	; (32cc <WIZCHIP_READ+0x60>)
    32b2:	0c20      	lsrs	r0, r4, #16
    32b4:	b2c0      	uxtb	r0, r0
    32b6:	6a2b      	ldr	r3, [r5, #32]
    32b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    32ba:	0a20      	lsrs	r0, r4, #8
    32bc:	b2c0      	uxtb	r0, r0
    32be:	6a2b      	ldr	r3, [r5, #32]
    32c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    32c2:	6a2b      	ldr	r3, [r5, #32]
    32c4:	b2e0      	uxtb	r0, r4
    32c6:	4798      	blx	r3
    32c8:	e7e7      	b.n	329a <WIZCHIP_READ+0x2e>
    32ca:	46c0      	nop			; (mov r8, r8)
    32cc:	20000004 	.word	0x20000004

000032d0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    32d0:	b570      	push	{r4, r5, r6, lr}
    32d2:	b082      	sub	sp, #8
    32d4:	0004      	movs	r4, r0
    32d6:	000e      	movs	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    32d8:	4d14      	ldr	r5, [pc, #80]	; (332c <WIZCHIP_WRITE+0x5c>)
    32da:	68eb      	ldr	r3, [r5, #12]
    32dc:	4798      	blx	r3
   WIZCHIP.CS._select();
    32de:	696b      	ldr	r3, [r5, #20]
    32e0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    32e2:	2004      	movs	r0, #4
    32e4:	4304      	orrs	r4, r0

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    32e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32e8:	2b00      	cmp	r3, #0
    32ea:	d00f      	beq.n	330c <WIZCHIP_WRITE+0x3c>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    32ec:	0c22      	lsrs	r2, r4, #16
    32ee:	a801      	add	r0, sp, #4
    32f0:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    32f2:	0a22      	lsrs	r2, r4, #8
    32f4:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    32f6:	7084      	strb	r4, [r0, #2]
		spi_data[3] = wb;
    32f8:	70c6      	strb	r6, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    32fa:	2104      	movs	r1, #4
    32fc:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    32fe:	4c0b      	ldr	r4, [pc, #44]	; (332c <WIZCHIP_WRITE+0x5c>)
    3300:	69a3      	ldr	r3, [r4, #24]
    3302:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    3304:	6923      	ldr	r3, [r4, #16]
    3306:	4798      	blx	r3
}
    3308:	b002      	add	sp, #8
    330a:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    330c:	4d07      	ldr	r5, [pc, #28]	; (332c <WIZCHIP_WRITE+0x5c>)
    330e:	0c20      	lsrs	r0, r4, #16
    3310:	b2c0      	uxtb	r0, r0
    3312:	6a2b      	ldr	r3, [r5, #32]
    3314:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3316:	0a20      	lsrs	r0, r4, #8
    3318:	b2c0      	uxtb	r0, r0
    331a:	6a2b      	ldr	r3, [r5, #32]
    331c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    331e:	b2e0      	uxtb	r0, r4
    3320:	6a2b      	ldr	r3, [r5, #32]
    3322:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
    3324:	6a2b      	ldr	r3, [r5, #32]
    3326:	0030      	movs	r0, r6
    3328:	4798      	blx	r3
    332a:	e7e8      	b.n	32fe <WIZCHIP_WRITE+0x2e>
    332c:	20000004 	.word	0x20000004

00003330 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    3330:	b5f0      	push	{r4, r5, r6, r7, lr}
    3332:	b083      	sub	sp, #12
    3334:	0004      	movs	r4, r0
    3336:	000f      	movs	r7, r1
    3338:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    333a:	4d1c      	ldr	r5, [pc, #112]	; (33ac <WIZCHIP_READ_BUF+0x7c>)
    333c:	68eb      	ldr	r3, [r5, #12]
    333e:	4798      	blx	r3
   WIZCHIP.CS._select();
    3340:	696b      	ldr	r3, [r5, #20]
    3342:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    3344:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3346:	2b00      	cmp	r3, #0
    3348:	d017      	beq.n	337a <WIZCHIP_READ_BUF+0x4a>
    334a:	4b18      	ldr	r3, [pc, #96]	; (33ac <WIZCHIP_READ_BUF+0x7c>)
    334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    334e:	2b00      	cmp	r3, #0
    3350:	d013      	beq.n	337a <WIZCHIP_READ_BUF+0x4a>
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    3352:	0c22      	lsrs	r2, r4, #16
    3354:	a801      	add	r0, sp, #4
    3356:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    3358:	0a22      	lsrs	r2, r4, #8
    335a:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    335c:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    335e:	2103      	movs	r1, #3
    3360:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    3362:	4b12      	ldr	r3, [pc, #72]	; (33ac <WIZCHIP_READ_BUF+0x7c>)
    3364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3366:	0031      	movs	r1, r6
    3368:	0038      	movs	r0, r7
    336a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    336c:	4c0f      	ldr	r4, [pc, #60]	; (33ac <WIZCHIP_READ_BUF+0x7c>)
    336e:	69a3      	ldr	r3, [r4, #24]
    3370:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    3372:	6923      	ldr	r3, [r4, #16]
    3374:	4798      	blx	r3
}
    3376:	b003      	add	sp, #12
    3378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    337a:	4d0c      	ldr	r5, [pc, #48]	; (33ac <WIZCHIP_READ_BUF+0x7c>)
    337c:	0c20      	lsrs	r0, r4, #16
    337e:	b2c0      	uxtb	r0, r0
    3380:	6a2b      	ldr	r3, [r5, #32]
    3382:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3384:	0a20      	lsrs	r0, r4, #8
    3386:	b2c0      	uxtb	r0, r0
    3388:	6a2b      	ldr	r3, [r5, #32]
    338a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    338c:	6a2b      	ldr	r3, [r5, #32]
    338e:	b2e0      	uxtb	r0, r4
    3390:	4798      	blx	r3
		for(i = 0; i < len; i++)
    3392:	2400      	movs	r4, #0
    3394:	e006      	b.n	33a4 <WIZCHIP_READ_BUF+0x74>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    3396:	193d      	adds	r5, r7, r4
    3398:	4b04      	ldr	r3, [pc, #16]	; (33ac <WIZCHIP_READ_BUF+0x7c>)
    339a:	69db      	ldr	r3, [r3, #28]
    339c:	4798      	blx	r3
    339e:	7028      	strb	r0, [r5, #0]
		for(i = 0; i < len; i++)
    33a0:	3401      	adds	r4, #1
    33a2:	b2a4      	uxth	r4, r4
    33a4:	42b4      	cmp	r4, r6
    33a6:	d3f6      	bcc.n	3396 <WIZCHIP_READ_BUF+0x66>
    33a8:	e7e0      	b.n	336c <WIZCHIP_READ_BUF+0x3c>
    33aa:	46c0      	nop			; (mov r8, r8)
    33ac:	20000004 	.word	0x20000004

000033b0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    33b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    33b2:	b083      	sub	sp, #12
    33b4:	0004      	movs	r4, r0
    33b6:	000f      	movs	r7, r1
    33b8:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    33ba:	4d1a      	ldr	r5, [pc, #104]	; (3424 <WIZCHIP_WRITE_BUF+0x74>)
    33bc:	68eb      	ldr	r3, [r5, #12]
    33be:	4798      	blx	r3
   WIZCHIP.CS._select();
    33c0:	696b      	ldr	r3, [r5, #20]
    33c2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    33c4:	2004      	movs	r0, #4
    33c6:	4304      	orrs	r4, r0

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    33c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33ca:	2b00      	cmp	r3, #0
    33cc:	d013      	beq.n	33f6 <WIZCHIP_WRITE_BUF+0x46>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    33ce:	0c22      	lsrs	r2, r4, #16
    33d0:	a801      	add	r0, sp, #4
    33d2:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    33d4:	0a22      	lsrs	r2, r4, #8
    33d6:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    33d8:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    33da:	2103      	movs	r1, #3
    33dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    33de:	4b11      	ldr	r3, [pc, #68]	; (3424 <WIZCHIP_WRITE_BUF+0x74>)
    33e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33e2:	0031      	movs	r1, r6
    33e4:	0038      	movs	r0, r7
    33e6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    33e8:	4c0e      	ldr	r4, [pc, #56]	; (3424 <WIZCHIP_WRITE_BUF+0x74>)
    33ea:	69a3      	ldr	r3, [r4, #24]
    33ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    33ee:	6923      	ldr	r3, [r4, #16]
    33f0:	4798      	blx	r3
}
    33f2:	b003      	add	sp, #12
    33f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    33f6:	4d0b      	ldr	r5, [pc, #44]	; (3424 <WIZCHIP_WRITE_BUF+0x74>)
    33f8:	0c20      	lsrs	r0, r4, #16
    33fa:	b2c0      	uxtb	r0, r0
    33fc:	6a2b      	ldr	r3, [r5, #32]
    33fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3400:	0a20      	lsrs	r0, r4, #8
    3402:	b2c0      	uxtb	r0, r0
    3404:	6a2b      	ldr	r3, [r5, #32]
    3406:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    3408:	6a2b      	ldr	r3, [r5, #32]
    340a:	b2e0      	uxtb	r0, r4
    340c:	4798      	blx	r3
		for(i = 0; i < len; i++)
    340e:	2400      	movs	r4, #0
    3410:	e005      	b.n	341e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    3412:	4b04      	ldr	r3, [pc, #16]	; (3424 <WIZCHIP_WRITE_BUF+0x74>)
    3414:	6a1b      	ldr	r3, [r3, #32]
    3416:	5d38      	ldrb	r0, [r7, r4]
    3418:	4798      	blx	r3
		for(i = 0; i < len; i++)
    341a:	3401      	adds	r4, #1
    341c:	b2a4      	uxth	r4, r4
    341e:	42b4      	cmp	r4, r6
    3420:	d3f7      	bcc.n	3412 <WIZCHIP_WRITE_BUF+0x62>
    3422:	e7e1      	b.n	33e8 <WIZCHIP_WRITE_BUF+0x38>
    3424:	20000004 	.word	0x20000004

00003428 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    3428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    342a:	46ce      	mov	lr, r9
    342c:	4647      	mov	r7, r8
    342e:	b580      	push	{r7, lr}
    3430:	4680      	mov	r8, r0
   uint16_t val=0,val1=0;
    3432:	2600      	movs	r6, #0
    3434:	e001      	b.n	343a <getSn_TX_FSR+0x12>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
    3436:	42a6      	cmp	r6, r4
    3438:	d024      	beq.n	3484 <getSn_TX_FSR+0x5c>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    343a:	4643      	mov	r3, r8
    343c:	009d      	lsls	r5, r3, #2
    343e:	3501      	adds	r5, #1
    3440:	00ed      	lsls	r5, r5, #3
    3442:	2380      	movs	r3, #128	; 0x80
    3444:	019b      	lsls	r3, r3, #6
    3446:	4699      	mov	r9, r3
    3448:	44a9      	add	r9, r5
    344a:	4648      	mov	r0, r9
    344c:	4f10      	ldr	r7, [pc, #64]	; (3490 <getSn_TX_FSR+0x68>)
    344e:	47b8      	blx	r7
    3450:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    3452:	0224      	lsls	r4, r4, #8
    3454:	b2a4      	uxth	r4, r4
    3456:	2384      	movs	r3, #132	; 0x84
    3458:	019b      	lsls	r3, r3, #6
    345a:	469c      	mov	ip, r3
    345c:	4465      	add	r5, ip
    345e:	0028      	movs	r0, r5
    3460:	47b8      	blx	r7
    3462:	b280      	uxth	r0, r0
    3464:	1824      	adds	r4, r4, r0
    3466:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    3468:	2c00      	cmp	r4, #0
    346a:	d0e4      	beq.n	3436 <getSn_TX_FSR+0xe>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    346c:	4648      	mov	r0, r9
    346e:	4f08      	ldr	r7, [pc, #32]	; (3490 <getSn_TX_FSR+0x68>)
    3470:	47b8      	blx	r7
    3472:	b280      	uxth	r0, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    3474:	0200      	lsls	r0, r0, #8
    3476:	b286      	uxth	r6, r0
    3478:	0028      	movs	r0, r5
    347a:	47b8      	blx	r7
    347c:	b280      	uxth	r0, r0
    347e:	1836      	adds	r6, r6, r0
    3480:	b2b6      	uxth	r6, r6
    3482:	e7d8      	b.n	3436 <getSn_TX_FSR+0xe>
   return val;
}
    3484:	0030      	movs	r0, r6
    3486:	bc0c      	pop	{r2, r3}
    3488:	4690      	mov	r8, r2
    348a:	4699      	mov	r9, r3
    348c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	0000326d 	.word	0x0000326d

00003494 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    3494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3496:	46ce      	mov	lr, r9
    3498:	4647      	mov	r7, r8
    349a:	b580      	push	{r7, lr}
    349c:	4680      	mov	r8, r0
   uint16_t val=0,val1=0;
    349e:	2600      	movs	r6, #0
    34a0:	e001      	b.n	34a6 <getSn_RX_RSR+0x12>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
    34a2:	42a6      	cmp	r6, r4
    34a4:	d024      	beq.n	34f0 <getSn_RX_RSR+0x5c>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    34a6:	4643      	mov	r3, r8
    34a8:	009d      	lsls	r5, r3, #2
    34aa:	3501      	adds	r5, #1
    34ac:	00ed      	lsls	r5, r5, #3
    34ae:	2398      	movs	r3, #152	; 0x98
    34b0:	019b      	lsls	r3, r3, #6
    34b2:	4699      	mov	r9, r3
    34b4:	44a9      	add	r9, r5
    34b6:	4648      	mov	r0, r9
    34b8:	4f10      	ldr	r7, [pc, #64]	; (34fc <getSn_RX_RSR+0x68>)
    34ba:	47b8      	blx	r7
    34bc:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    34be:	0224      	lsls	r4, r4, #8
    34c0:	b2a4      	uxth	r4, r4
    34c2:	239c      	movs	r3, #156	; 0x9c
    34c4:	019b      	lsls	r3, r3, #6
    34c6:	469c      	mov	ip, r3
    34c8:	4465      	add	r5, ip
    34ca:	0028      	movs	r0, r5
    34cc:	47b8      	blx	r7
    34ce:	b280      	uxth	r0, r0
    34d0:	1824      	adds	r4, r4, r0
    34d2:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    34d4:	2c00      	cmp	r4, #0
    34d6:	d0e4      	beq.n	34a2 <getSn_RX_RSR+0xe>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    34d8:	4648      	mov	r0, r9
    34da:	4f08      	ldr	r7, [pc, #32]	; (34fc <getSn_RX_RSR+0x68>)
    34dc:	47b8      	blx	r7
    34de:	b280      	uxth	r0, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    34e0:	0200      	lsls	r0, r0, #8
    34e2:	b286      	uxth	r6, r0
    34e4:	0028      	movs	r0, r5
    34e6:	47b8      	blx	r7
    34e8:	b280      	uxth	r0, r0
    34ea:	1836      	adds	r6, r6, r0
    34ec:	b2b6      	uxth	r6, r6
    34ee:	e7d8      	b.n	34a2 <getSn_RX_RSR+0xe>
   return val;
}
    34f0:	0030      	movs	r0, r6
    34f2:	bc0c      	pop	{r2, r3}
    34f4:	4690      	mov	r8, r2
    34f6:	4699      	mov	r9, r3
    34f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	0000326d 	.word	0x0000326d

00003500 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    3500:	b5f0      	push	{r4, r5, r6, r7, lr}
    3502:	46d6      	mov	lr, sl
    3504:	b500      	push	{lr}
    3506:	b082      	sub	sp, #8
    3508:	9100      	str	r1, [sp, #0]
    350a:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    350c:	d103      	bne.n	3516 <wiz_send_data+0x16>
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
   
   ptr += len;
   setSn_TX_WR(sn,ptr);
}
    350e:	b002      	add	sp, #8
    3510:	bc04      	pop	{r2}
    3512:	4692      	mov	sl, r2
    3514:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_TX_WR(sn);
    3516:	0086      	lsls	r6, r0, #2
    3518:	1c75      	adds	r5, r6, #1
    351a:	00ed      	lsls	r5, r5, #3
    351c:	2390      	movs	r3, #144	; 0x90
    351e:	019b      	lsls	r3, r3, #6
    3520:	469c      	mov	ip, r3
    3522:	44ac      	add	ip, r5
    3524:	4663      	mov	r3, ip
    3526:	9301      	str	r3, [sp, #4]
    3528:	4660      	mov	r0, ip
    352a:	4a10      	ldr	r2, [pc, #64]	; (356c <wiz_send_data+0x6c>)
    352c:	4692      	mov	sl, r2
    352e:	4790      	blx	r2
    3530:	b280      	uxth	r0, r0
    3532:	0200      	lsls	r0, r0, #8
    3534:	b287      	uxth	r7, r0
    3536:	2294      	movs	r2, #148	; 0x94
    3538:	0192      	lsls	r2, r2, #6
    353a:	4694      	mov	ip, r2
    353c:	4465      	add	r5, ip
    353e:	0028      	movs	r0, r5
    3540:	47d0      	blx	sl
    3542:	b280      	uxth	r0, r0
    3544:	1838      	adds	r0, r7, r0
    3546:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    3548:	023b      	lsls	r3, r7, #8
    354a:	1cb0      	adds	r0, r6, #2
    354c:	00c0      	lsls	r0, r0, #3
    354e:	1818      	adds	r0, r3, r0
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    3550:	0022      	movs	r2, r4
    3552:	9900      	ldr	r1, [sp, #0]
    3554:	4b06      	ldr	r3, [pc, #24]	; (3570 <wiz_send_data+0x70>)
    3556:	4798      	blx	r3
   ptr += len;
    3558:	19e4      	adds	r4, r4, r7
    355a:	b2a4      	uxth	r4, r4
   setSn_TX_WR(sn,ptr);
    355c:	0a21      	lsrs	r1, r4, #8
    355e:	9801      	ldr	r0, [sp, #4]
    3560:	4e04      	ldr	r6, [pc, #16]	; (3574 <wiz_send_data+0x74>)
    3562:	47b0      	blx	r6
    3564:	b2e1      	uxtb	r1, r4
    3566:	0028      	movs	r0, r5
    3568:	47b0      	blx	r6
    356a:	e7d0      	b.n	350e <wiz_send_data+0xe>
    356c:	0000326d 	.word	0x0000326d
    3570:	000033b1 	.word	0x000033b1
    3574:	000032d1 	.word	0x000032d1

00003578 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    3578:	b5f0      	push	{r4, r5, r6, r7, lr}
    357a:	46d6      	mov	lr, sl
    357c:	b500      	push	{lr}
    357e:	b082      	sub	sp, #8
    3580:	9100      	str	r1, [sp, #0]
    3582:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    3584:	d103      	bne.n	358e <wiz_recv_data+0x16>
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
   ptr += len;
   
   setSn_RX_RD(sn,ptr);
}
    3586:	b002      	add	sp, #8
    3588:	bc04      	pop	{r2}
    358a:	4692      	mov	sl, r2
    358c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_RX_RD(sn);
    358e:	0086      	lsls	r6, r0, #2
    3590:	1c75      	adds	r5, r6, #1
    3592:	00ed      	lsls	r5, r5, #3
    3594:	23a0      	movs	r3, #160	; 0xa0
    3596:	019b      	lsls	r3, r3, #6
    3598:	469c      	mov	ip, r3
    359a:	44ac      	add	ip, r5
    359c:	4663      	mov	r3, ip
    359e:	9301      	str	r3, [sp, #4]
    35a0:	4660      	mov	r0, ip
    35a2:	4a10      	ldr	r2, [pc, #64]	; (35e4 <wiz_recv_data+0x6c>)
    35a4:	4692      	mov	sl, r2
    35a6:	4790      	blx	r2
    35a8:	b280      	uxth	r0, r0
    35aa:	0200      	lsls	r0, r0, #8
    35ac:	b287      	uxth	r7, r0
    35ae:	22a4      	movs	r2, #164	; 0xa4
    35b0:	0192      	lsls	r2, r2, #6
    35b2:	4694      	mov	ip, r2
    35b4:	4465      	add	r5, ip
    35b6:	0028      	movs	r0, r5
    35b8:	47d0      	blx	sl
    35ba:	b280      	uxth	r0, r0
    35bc:	1838      	adds	r0, r7, r0
    35be:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    35c0:	023b      	lsls	r3, r7, #8
    35c2:	1cf0      	adds	r0, r6, #3
    35c4:	00c0      	lsls	r0, r0, #3
    35c6:	1818      	adds	r0, r3, r0
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    35c8:	0022      	movs	r2, r4
    35ca:	9900      	ldr	r1, [sp, #0]
    35cc:	4b06      	ldr	r3, [pc, #24]	; (35e8 <wiz_recv_data+0x70>)
    35ce:	4798      	blx	r3
   ptr += len;
    35d0:	19e4      	adds	r4, r4, r7
    35d2:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
    35d4:	0a21      	lsrs	r1, r4, #8
    35d6:	9801      	ldr	r0, [sp, #4]
    35d8:	4e04      	ldr	r6, [pc, #16]	; (35ec <wiz_recv_data+0x74>)
    35da:	47b0      	blx	r6
    35dc:	b2e1      	uxtb	r1, r4
    35de:	0028      	movs	r0, r5
    35e0:	47b0      	blx	r6
    35e2:	e7d0      	b.n	3586 <wiz_recv_data+0xe>
    35e4:	0000326d 	.word	0x0000326d
    35e8:	00003331 	.word	0x00003331
    35ec:	000032d1 	.word	0x000032d1

000035f0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    35f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    35f2:	b083      	sub	sp, #12
    35f4:	000c      	movs	r4, r1
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    35f6:	0087      	lsls	r7, r0, #2
    35f8:	3701      	adds	r7, #1
    35fa:	00ff      	lsls	r7, r7, #3
    35fc:	23a0      	movs	r3, #160	; 0xa0
    35fe:	019b      	lsls	r3, r3, #6
    3600:	469c      	mov	ip, r3
    3602:	44bc      	add	ip, r7
    3604:	4663      	mov	r3, ip
    3606:	9301      	str	r3, [sp, #4]
    3608:	4660      	mov	r0, ip
    360a:	4e0c      	ldr	r6, [pc, #48]	; (363c <wiz_recv_ignore+0x4c>)
    360c:	47b0      	blx	r6
    360e:	b280      	uxth	r0, r0
    3610:	0200      	lsls	r0, r0, #8
    3612:	b285      	uxth	r5, r0
    3614:	22a4      	movs	r2, #164	; 0xa4
    3616:	0192      	lsls	r2, r2, #6
    3618:	4694      	mov	ip, r2
    361a:	4467      	add	r7, ip
    361c:	0038      	movs	r0, r7
    361e:	47b0      	blx	r6
    3620:	b280      	uxth	r0, r0
    3622:	182d      	adds	r5, r5, r0
    3624:	b2ad      	uxth	r5, r5
   ptr += len;
    3626:	192c      	adds	r4, r5, r4
    3628:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
    362a:	0a21      	lsrs	r1, r4, #8
    362c:	9801      	ldr	r0, [sp, #4]
    362e:	4d04      	ldr	r5, [pc, #16]	; (3640 <wiz_recv_ignore+0x50>)
    3630:	47a8      	blx	r5
    3632:	b2e1      	uxtb	r1, r4
    3634:	0038      	movs	r0, r7
    3636:	47a8      	blx	r5
}
    3638:	b003      	add	sp, #12
    363a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    363c:	0000326d 	.word	0x0000326d
    3640:	000032d1 	.word	0x000032d1

00003644 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
    3644:	4770      	bx	lr

00003646 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
    3646:	4770      	bx	lr

00003648 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
    3648:	4770      	bx	lr

0000364a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
    364a:	4770      	bx	lr

0000364c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
    364c:	7800      	ldrb	r0, [r0, #0]
    364e:	b2c0      	uxtb	r0, r0
    3650:	4770      	bx	lr

00003652 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
    3652:	7001      	strb	r1, [r0, #0]
    3654:	4770      	bx	lr

00003656 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
    3656:	2000      	movs	r0, #0
    3658:	4770      	bx	lr

0000365a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
    365a:	4770      	bx	lr

0000365c <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
    365c:	4770      	bx	lr

0000365e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
    365e:	4770      	bx	lr

00003660 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
    3660:	2800      	cmp	r0, #0
    3662:	d005      	beq.n	3670 <reg_wizchip_cs_cbfunc+0x10>
    3664:	2900      	cmp	r1, #0
    3666:	d003      	beq.n	3670 <reg_wizchip_cs_cbfunc+0x10>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
    3668:	4b04      	ldr	r3, [pc, #16]	; (367c <reg_wizchip_cs_cbfunc+0x1c>)
    366a:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
    366c:	6199      	str	r1, [r3, #24]
   }
}
    366e:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
    3670:	4b02      	ldr	r3, [pc, #8]	; (367c <reg_wizchip_cs_cbfunc+0x1c>)
    3672:	4a03      	ldr	r2, [pc, #12]	; (3680 <reg_wizchip_cs_cbfunc+0x20>)
    3674:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
    3676:	4a03      	ldr	r2, [pc, #12]	; (3684 <reg_wizchip_cs_cbfunc+0x24>)
    3678:	619a      	str	r2, [r3, #24]
    367a:	e7f8      	b.n	366e <reg_wizchip_cs_cbfunc+0xe>
    367c:	20000004 	.word	0x20000004
    3680:	00003649 	.word	0x00003649
    3684:	0000364b 	.word	0x0000364b

00003688 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    3688:	4b08      	ldr	r3, [pc, #32]	; (36ac <reg_wizchip_spi_cbfunc+0x24>)
    368a:	881b      	ldrh	r3, [r3, #0]
    368c:	059b      	lsls	r3, r3, #22
    368e:	d5fb      	bpl.n	3688 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
    3690:	2800      	cmp	r0, #0
    3692:	d005      	beq.n	36a0 <reg_wizchip_spi_cbfunc+0x18>
    3694:	2900      	cmp	r1, #0
    3696:	d003      	beq.n	36a0 <reg_wizchip_spi_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
    3698:	4b04      	ldr	r3, [pc, #16]	; (36ac <reg_wizchip_spi_cbfunc+0x24>)
    369a:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
    369c:	6219      	str	r1, [r3, #32]
   }
}
    369e:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
    36a0:	4b02      	ldr	r3, [pc, #8]	; (36ac <reg_wizchip_spi_cbfunc+0x24>)
    36a2:	4a03      	ldr	r2, [pc, #12]	; (36b0 <reg_wizchip_spi_cbfunc+0x28>)
    36a4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
    36a6:	4a03      	ldr	r2, [pc, #12]	; (36b4 <reg_wizchip_spi_cbfunc+0x2c>)
    36a8:	621a      	str	r2, [r3, #32]
    36aa:	e7f8      	b.n	369e <reg_wizchip_spi_cbfunc+0x16>
    36ac:	20000004 	.word	0x20000004
    36b0:	00003657 	.word	0x00003657
    36b4:	0000365b 	.word	0x0000365b

000036b8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    36b8:	4b08      	ldr	r3, [pc, #32]	; (36dc <reg_wizchip_spiburst_cbfunc+0x24>)
    36ba:	881b      	ldrh	r3, [r3, #0]
    36bc:	059b      	lsls	r3, r3, #22
    36be:	d5fb      	bpl.n	36b8 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
    36c0:	2800      	cmp	r0, #0
    36c2:	d005      	beq.n	36d0 <reg_wizchip_spiburst_cbfunc+0x18>
    36c4:	2900      	cmp	r1, #0
    36c6:	d003      	beq.n	36d0 <reg_wizchip_spiburst_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
    36c8:	4b04      	ldr	r3, [pc, #16]	; (36dc <reg_wizchip_spiburst_cbfunc+0x24>)
    36ca:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
    36cc:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
    36ce:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
    36d0:	4b02      	ldr	r3, [pc, #8]	; (36dc <reg_wizchip_spiburst_cbfunc+0x24>)
    36d2:	4a03      	ldr	r2, [pc, #12]	; (36e0 <reg_wizchip_spiburst_cbfunc+0x28>)
    36d4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
    36d6:	4a03      	ldr	r2, [pc, #12]	; (36e4 <reg_wizchip_spiburst_cbfunc+0x2c>)
    36d8:	629a      	str	r2, [r3, #40]	; 0x28
    36da:	e7f8      	b.n	36ce <reg_wizchip_spiburst_cbfunc+0x16>
    36dc:	20000004 	.word	0x20000004
    36e0:	0000365d 	.word	0x0000365d
    36e4:	0000365f 	.word	0x0000365f

000036e8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
    36e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ea:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
    36ec:	2206      	movs	r2, #6
    36ee:	a901      	add	r1, sp, #4
    36f0:	2090      	movs	r0, #144	; 0x90
    36f2:	0100      	lsls	r0, r0, #4
    36f4:	4c17      	ldr	r4, [pc, #92]	; (3754 <wizchip_sw_reset+0x6c>)
    36f6:	47a0      	blx	r4
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
    36f8:	2780      	movs	r7, #128	; 0x80
    36fa:	007f      	lsls	r7, r7, #1
    36fc:	2204      	movs	r2, #4
    36fe:	a905      	add	r1, sp, #20
    3700:	0038      	movs	r0, r7
    3702:	47a0      	blx	r4
    3704:	26a0      	movs	r6, #160	; 0xa0
    3706:	00f6      	lsls	r6, r6, #3
    3708:	2204      	movs	r2, #4
    370a:	a904      	add	r1, sp, #16
    370c:	0030      	movs	r0, r6
    370e:	47a0      	blx	r4
    3710:	25f0      	movs	r5, #240	; 0xf0
    3712:	012d      	lsls	r5, r5, #4
    3714:	2204      	movs	r2, #4
    3716:	a903      	add	r1, sp, #12
    3718:	0028      	movs	r0, r5
    371a:	47a0      	blx	r4
   setMR(MR_RST);
    371c:	2180      	movs	r1, #128	; 0x80
    371e:	2000      	movs	r0, #0
    3720:	4b0d      	ldr	r3, [pc, #52]	; (3758 <wizchip_sw_reset+0x70>)
    3722:	4798      	blx	r3
   getMR(); // for delay
    3724:	2000      	movs	r0, #0
    3726:	4b0d      	ldr	r3, [pc, #52]	; (375c <wizchip_sw_reset+0x74>)
    3728:	4798      	blx	r3
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
    372a:	2206      	movs	r2, #6
    372c:	a901      	add	r1, sp, #4
    372e:	2090      	movs	r0, #144	; 0x90
    3730:	0100      	lsls	r0, r0, #4
    3732:	4c0b      	ldr	r4, [pc, #44]	; (3760 <wizchip_sw_reset+0x78>)
    3734:	47a0      	blx	r4
   setGAR(gw);
    3736:	2204      	movs	r2, #4
    3738:	a905      	add	r1, sp, #20
    373a:	0038      	movs	r0, r7
    373c:	47a0      	blx	r4
   setSUBR(sn);
    373e:	2204      	movs	r2, #4
    3740:	a904      	add	r1, sp, #16
    3742:	0030      	movs	r0, r6
    3744:	47a0      	blx	r4
   setSIPR(sip);
    3746:	2204      	movs	r2, #4
    3748:	a903      	add	r1, sp, #12
    374a:	0028      	movs	r0, r5
    374c:	47a0      	blx	r4
}
    374e:	b007      	add	sp, #28
    3750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3752:	46c0      	nop			; (mov r8, r8)
    3754:	00003331 	.word	0x00003331
    3758:	000032d1 	.word	0x000032d1
    375c:	0000326d 	.word	0x0000326d
    3760:	000033b1 	.word	0x000033b1

00003764 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
    3764:	b570      	push	{r4, r5, r6, lr}
    3766:	0006      	movs	r6, r0
    3768:	000d      	movs	r5, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
    376a:	4b24      	ldr	r3, [pc, #144]	; (37fc <wizchip_init+0x98>)
    376c:	4798      	blx	r3
   if(txsize)
    376e:	2e00      	cmp	r6, #0
    3770:	d01b      	beq.n	37aa <wizchip_init+0x46>
    3772:	2200      	movs	r2, #0
    3774:	2300      	movs	r3, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    3776:	2b07      	cmp	r3, #7
    3778:	dc07      	bgt.n	378a <wizchip_init+0x26>
		{
			tmp += txsize[i];
    377a:	5cf1      	ldrb	r1, [r6, r3]
    377c:	188a      	adds	r2, r1, r2
    377e:	b252      	sxtb	r2, r2

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    3780:	2a10      	cmp	r2, #16
    3782:	dc34      	bgt.n	37ee <wizchip_init+0x8a>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    3784:	3301      	adds	r3, #1
    3786:	b25b      	sxtb	r3, r3
    3788:	e7f5      	b.n	3776 <wizchip_init+0x12>
    378a:	2400      	movs	r4, #0
    378c:	e00b      	b.n	37a6 <wizchip_init+0x42>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
    378e:	00a0      	lsls	r0, r4, #2
    3790:	3001      	adds	r0, #1
    3792:	00c0      	lsls	r0, r0, #3
    3794:	23f8      	movs	r3, #248	; 0xf8
    3796:	015b      	lsls	r3, r3, #5
    3798:	469c      	mov	ip, r3
    379a:	4460      	add	r0, ip
    379c:	5d31      	ldrb	r1, [r6, r4]
    379e:	4b18      	ldr	r3, [pc, #96]	; (3800 <wizchip_init+0x9c>)
    37a0:	4798      	blx	r3
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    37a2:	3401      	adds	r4, #1
    37a4:	b264      	sxtb	r4, r4
    37a6:	2c07      	cmp	r4, #7
    37a8:	ddf1      	ble.n	378e <wizchip_init+0x2a>
#endif
		}	
   }

   if(rxsize)
    37aa:	2d00      	cmp	r5, #0
    37ac:	d00b      	beq.n	37c6 <wizchip_init+0x62>
    37ae:	2200      	movs	r2, #0
    37b0:	2300      	movs	r3, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    37b2:	2b07      	cmp	r3, #7
    37b4:	dc09      	bgt.n	37ca <wizchip_init+0x66>
		{
			tmp += rxsize[i];
    37b6:	5ce9      	ldrb	r1, [r5, r3]
    37b8:	188a      	adds	r2, r1, r2
    37ba:	b252      	sxtb	r2, r2
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    37bc:	2a10      	cmp	r2, #16
    37be:	dc19      	bgt.n	37f4 <wizchip_init+0x90>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    37c0:	3301      	adds	r3, #1
    37c2:	b25b      	sxtb	r3, r3
    37c4:	e7f5      	b.n	37b2 <wizchip_init+0x4e>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    37c6:	2000      	movs	r0, #0
    37c8:	e010      	b.n	37ec <wizchip_init+0x88>
    37ca:	2400      	movs	r4, #0
    37cc:	e00b      	b.n	37e6 <wizchip_init+0x82>
			setSn_RXBUF_SIZE(i, rxsize[i]);
    37ce:	00a0      	lsls	r0, r4, #2
    37d0:	3001      	adds	r0, #1
    37d2:	00c0      	lsls	r0, r0, #3
    37d4:	23f0      	movs	r3, #240	; 0xf0
    37d6:	015b      	lsls	r3, r3, #5
    37d8:	469c      	mov	ip, r3
    37da:	4460      	add	r0, ip
    37dc:	5d29      	ldrb	r1, [r5, r4]
    37de:	4b08      	ldr	r3, [pc, #32]	; (3800 <wizchip_init+0x9c>)
    37e0:	4798      	blx	r3
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    37e2:	3401      	adds	r4, #1
    37e4:	b264      	sxtb	r4, r4
    37e6:	2c07      	cmp	r4, #7
    37e8:	ddf1      	ble.n	37ce <wizchip_init+0x6a>
   return 0;
    37ea:	2000      	movs	r0, #0
}
    37ec:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
    37ee:	2001      	movs	r0, #1
    37f0:	4240      	negs	r0, r0
    37f2:	e7fb      	b.n	37ec <wizchip_init+0x88>
			if(tmp > 16) return -1;
    37f4:	2001      	movs	r0, #1
    37f6:	4240      	negs	r0, r0
    37f8:	e7f8      	b.n	37ec <wizchip_init+0x88>
    37fa:	46c0      	nop			; (mov r8, r8)
    37fc:	000036e9 	.word	0x000036e9
    3800:	000032d1 	.word	0x000032d1

00003804 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
    3804:	b570      	push	{r4, r5, r6, lr}
   uint8_t tmp = getPHYCFGR();
    3806:	24b8      	movs	r4, #184	; 0xb8
    3808:	01a4      	lsls	r4, r4, #6
    380a:	0020      	movs	r0, r4
    380c:	4e07      	ldr	r6, [pc, #28]	; (382c <wizphy_reset+0x28>)
    380e:	47b0      	blx	r6
   tmp &= PHYCFGR_RST;
    3810:	217f      	movs	r1, #127	; 0x7f
    3812:	4001      	ands	r1, r0
   setPHYCFGR(tmp);
    3814:	0020      	movs	r0, r4
    3816:	4d06      	ldr	r5, [pc, #24]	; (3830 <wizphy_reset+0x2c>)
    3818:	47a8      	blx	r5
   tmp = getPHYCFGR();
    381a:	0020      	movs	r0, r4
    381c:	47b0      	blx	r6
   tmp |= ~PHYCFGR_RST;
    381e:	2180      	movs	r1, #128	; 0x80
    3820:	4249      	negs	r1, r1
    3822:	4301      	orrs	r1, r0
    3824:	b2c9      	uxtb	r1, r1
   setPHYCFGR(tmp);
    3826:	0020      	movs	r0, r4
    3828:	47a8      	blx	r5
}
    382a:	bd70      	pop	{r4, r5, r6, pc}
    382c:	0000326d 	.word	0x0000326d
    3830:	000032d1 	.word	0x000032d1

00003834 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    3834:	b570      	push	{r4, r5, r6, lr}
    3836:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
    3838:	2206      	movs	r2, #6
    383a:	0001      	movs	r1, r0
    383c:	2090      	movs	r0, #144	; 0x90
    383e:	0100      	lsls	r0, r0, #4
    3840:	4d0f      	ldr	r5, [pc, #60]	; (3880 <wizchip_setnetinfo+0x4c>)
    3842:	47a8      	blx	r5
   setGAR(pnetinfo->gw);
    3844:	0021      	movs	r1, r4
    3846:	310e      	adds	r1, #14
    3848:	2204      	movs	r2, #4
    384a:	2080      	movs	r0, #128	; 0x80
    384c:	0040      	lsls	r0, r0, #1
    384e:	47a8      	blx	r5
   setSUBR(pnetinfo->sn);
    3850:	0021      	movs	r1, r4
    3852:	310a      	adds	r1, #10
    3854:	2204      	movs	r2, #4
    3856:	20a0      	movs	r0, #160	; 0xa0
    3858:	00c0      	lsls	r0, r0, #3
    385a:	47a8      	blx	r5
   setSIPR(pnetinfo->ip);
    385c:	1da1      	adds	r1, r4, #6
    385e:	2204      	movs	r2, #4
    3860:	20f0      	movs	r0, #240	; 0xf0
    3862:	0100      	lsls	r0, r0, #4
    3864:	47a8      	blx	r5
   _DNS_[0] = pnetinfo->dns[0];
    3866:	7ca2      	ldrb	r2, [r4, #18]
    3868:	4b06      	ldr	r3, [pc, #24]	; (3884 <wizchip_setnetinfo+0x50>)
    386a:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
    386c:	7ce2      	ldrb	r2, [r4, #19]
    386e:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
    3870:	7d22      	ldrb	r2, [r4, #20]
    3872:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
    3874:	7d62      	ldrb	r2, [r4, #21]
    3876:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
    3878:	7da2      	ldrb	r2, [r4, #22]
    387a:	4b03      	ldr	r3, [pc, #12]	; (3888 <wizchip_setnetinfo+0x54>)
    387c:	701a      	strb	r2, [r3, #0]
}
    387e:	bd70      	pop	{r4, r5, r6, pc}
    3880:	000033b1 	.word	0x000033b1
    3884:	20000ac0 	.word	0x20000ac0
    3888:	20000abc 	.word	0x20000abc

0000388c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    388c:	b570      	push	{r4, r5, r6, lr}
    388e:	0004      	movs	r4, r0
   getSHAR(pnetinfo->mac);
    3890:	2206      	movs	r2, #6
    3892:	0001      	movs	r1, r0
    3894:	2090      	movs	r0, #144	; 0x90
    3896:	0100      	lsls	r0, r0, #4
    3898:	4d0f      	ldr	r5, [pc, #60]	; (38d8 <wizchip_getnetinfo+0x4c>)
    389a:	47a8      	blx	r5
   getGAR(pnetinfo->gw);
    389c:	0021      	movs	r1, r4
    389e:	310e      	adds	r1, #14
    38a0:	2204      	movs	r2, #4
    38a2:	2080      	movs	r0, #128	; 0x80
    38a4:	0040      	lsls	r0, r0, #1
    38a6:	47a8      	blx	r5
   getSUBR(pnetinfo->sn);
    38a8:	0021      	movs	r1, r4
    38aa:	310a      	adds	r1, #10
    38ac:	2204      	movs	r2, #4
    38ae:	20a0      	movs	r0, #160	; 0xa0
    38b0:	00c0      	lsls	r0, r0, #3
    38b2:	47a8      	blx	r5
   getSIPR(pnetinfo->ip);
    38b4:	1da1      	adds	r1, r4, #6
    38b6:	2204      	movs	r2, #4
    38b8:	20f0      	movs	r0, #240	; 0xf0
    38ba:	0100      	lsls	r0, r0, #4
    38bc:	47a8      	blx	r5
   pnetinfo->dns[0]= _DNS_[0];
    38be:	4b07      	ldr	r3, [pc, #28]	; (38dc <wizchip_getnetinfo+0x50>)
    38c0:	781a      	ldrb	r2, [r3, #0]
    38c2:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
    38c4:	785a      	ldrb	r2, [r3, #1]
    38c6:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
    38c8:	789a      	ldrb	r2, [r3, #2]
    38ca:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
    38cc:	78db      	ldrb	r3, [r3, #3]
    38ce:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
    38d0:	4b03      	ldr	r3, [pc, #12]	; (38e0 <wizchip_getnetinfo+0x54>)
    38d2:	781b      	ldrb	r3, [r3, #0]
    38d4:	75a3      	strb	r3, [r4, #22]
}
    38d6:	bd70      	pop	{r4, r5, r6, pc}
    38d8:	00003331 	.word	0x00003331
    38dc:	20000ac0 	.word	0x20000ac0
    38e0:	20000abc 	.word	0x20000abc

000038e4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
    38e4:	b510      	push	{r4, lr}
    38e6:	0004      	movs	r4, r0
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    38e8:	233a      	movs	r3, #58	; 0x3a
    38ea:	0002      	movs	r2, r0
    38ec:	439a      	bics	r2, r3
    38ee:	d109      	bne.n	3904 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
    38f0:	2000      	movs	r0, #0
    38f2:	4b06      	ldr	r3, [pc, #24]	; (390c <wizchip_setnetmode+0x28>)
    38f4:	4798      	blx	r3
   tmp |= (uint8_t)netmode;
    38f6:	4304      	orrs	r4, r0
    38f8:	b2e1      	uxtb	r1, r4
   setMR(tmp);
    38fa:	2000      	movs	r0, #0
    38fc:	4b04      	ldr	r3, [pc, #16]	; (3910 <wizchip_setnetmode+0x2c>)
    38fe:	4798      	blx	r3
   return 0;
    3900:	2000      	movs	r0, #0
}
    3902:	bd10      	pop	{r4, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    3904:	2001      	movs	r0, #1
    3906:	4240      	negs	r0, r0
    3908:	e7fb      	b.n	3902 <wizchip_setnetmode+0x1e>
    390a:	46c0      	nop			; (mov r8, r8)
    390c:	0000326d 	.word	0x0000326d
    3910:	000032d1 	.word	0x000032d1

00003914 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
    3914:	b510      	push	{r4, lr}
   return (netmode_type) getMR();
    3916:	2000      	movs	r0, #0
    3918:	4b01      	ldr	r3, [pc, #4]	; (3920 <wizchip_getnetmode+0xc>)
    391a:	4798      	blx	r3
}
    391c:	bd10      	pop	{r4, pc}
    391e:	46c0      	nop			; (mov r8, r8)
    3920:	0000326d 	.word	0x0000326d

00003924 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
    3924:	b570      	push	{r4, r5, r6, lr}
    3926:	0005      	movs	r5, r0
   setRCR(nettime->retry_cnt);
    3928:	7801      	ldrb	r1, [r0, #0]
    392a:	20d8      	movs	r0, #216	; 0xd8
    392c:	0140      	lsls	r0, r0, #5
    392e:	4c06      	ldr	r4, [pc, #24]	; (3948 <wizchip_settimeout+0x24>)
    3930:	47a0      	blx	r4
   setRTR(nettime->time_100us);
    3932:	8869      	ldrh	r1, [r5, #2]
    3934:	0a09      	lsrs	r1, r1, #8
    3936:	20c8      	movs	r0, #200	; 0xc8
    3938:	0140      	lsls	r0, r0, #5
    393a:	47a0      	blx	r4
    393c:	78a9      	ldrb	r1, [r5, #2]
    393e:	20d0      	movs	r0, #208	; 0xd0
    3940:	0140      	lsls	r0, r0, #5
    3942:	47a0      	blx	r4
}
    3944:	bd70      	pop	{r4, r5, r6, pc}
    3946:	46c0      	nop			; (mov r8, r8)
    3948:	000032d1 	.word	0x000032d1

0000394c <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
    394c:	b570      	push	{r4, r5, r6, lr}
    394e:	0005      	movs	r5, r0
   nettime->retry_cnt = getRCR();
    3950:	20d8      	movs	r0, #216	; 0xd8
    3952:	0140      	lsls	r0, r0, #5
    3954:	4e07      	ldr	r6, [pc, #28]	; (3974 <wizchip_gettimeout+0x28>)
    3956:	47b0      	blx	r6
    3958:	7028      	strb	r0, [r5, #0]
   nettime->time_100us = getRTR();
    395a:	20c8      	movs	r0, #200	; 0xc8
    395c:	0140      	lsls	r0, r0, #5
    395e:	47b0      	blx	r6
    3960:	b280      	uxth	r0, r0
    3962:	0200      	lsls	r0, r0, #8
    3964:	b284      	uxth	r4, r0
    3966:	20d0      	movs	r0, #208	; 0xd0
    3968:	0140      	lsls	r0, r0, #5
    396a:	47b0      	blx	r6
    396c:	b280      	uxth	r0, r0
    396e:	1824      	adds	r4, r4, r0
    3970:	806c      	strh	r4, [r5, #2]
}
    3972:	bd70      	pop	{r4, r5, r6, pc}
    3974:	0000326d 	.word	0x0000326d

00003978 <ctlnetwork>:
{
    3978:	b510      	push	{r4, lr}
    397a:	000c      	movs	r4, r1
   switch(cntype)
    397c:	2805      	cmp	r0, #5
    397e:	d820      	bhi.n	39c2 <ctlnetwork+0x4a>
    3980:	0080      	lsls	r0, r0, #2
    3982:	4b11      	ldr	r3, [pc, #68]	; (39c8 <ctlnetwork+0x50>)
    3984:	581b      	ldr	r3, [r3, r0]
    3986:	469f      	mov	pc, r3
         wizchip_setnetinfo((wiz_NetInfo*)arg);
    3988:	0008      	movs	r0, r1
    398a:	4b10      	ldr	r3, [pc, #64]	; (39cc <ctlnetwork+0x54>)
    398c:	4798      	blx	r3
   return 0;
    398e:	2000      	movs	r0, #0
}
    3990:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
    3992:	0008      	movs	r0, r1
    3994:	4b0e      	ldr	r3, [pc, #56]	; (39d0 <ctlnetwork+0x58>)
    3996:	4798      	blx	r3
   return 0;
    3998:	2000      	movs	r0, #0
         break;
    399a:	e7f9      	b.n	3990 <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
    399c:	7808      	ldrb	r0, [r1, #0]
    399e:	4b0d      	ldr	r3, [pc, #52]	; (39d4 <ctlnetwork+0x5c>)
    39a0:	4798      	blx	r3
    39a2:	e7f5      	b.n	3990 <ctlnetwork+0x18>
         *(netmode_type*)arg = wizchip_getnetmode();
    39a4:	4b0c      	ldr	r3, [pc, #48]	; (39d8 <ctlnetwork+0x60>)
    39a6:	4798      	blx	r3
    39a8:	7020      	strb	r0, [r4, #0]
   return 0;
    39aa:	2000      	movs	r0, #0
         break;
    39ac:	e7f0      	b.n	3990 <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
    39ae:	0008      	movs	r0, r1
    39b0:	4b0a      	ldr	r3, [pc, #40]	; (39dc <ctlnetwork+0x64>)
    39b2:	4798      	blx	r3
   return 0;
    39b4:	2000      	movs	r0, #0
         break;
    39b6:	e7eb      	b.n	3990 <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
    39b8:	0008      	movs	r0, r1
    39ba:	4b09      	ldr	r3, [pc, #36]	; (39e0 <ctlnetwork+0x68>)
    39bc:	4798      	blx	r3
   return 0;
    39be:	2000      	movs	r0, #0
         break;
    39c0:	e7e6      	b.n	3990 <ctlnetwork+0x18>
         return -1;
    39c2:	2001      	movs	r0, #1
    39c4:	4240      	negs	r0, r0
    39c6:	e7e3      	b.n	3990 <ctlnetwork+0x18>
    39c8:	000127c8 	.word	0x000127c8
    39cc:	00003835 	.word	0x00003835
    39d0:	0000388d 	.word	0x0000388d
    39d4:	000038e5 	.word	0x000038e5
    39d8:	00003915 	.word	0x00003915
    39dc:	00003925 	.word	0x00003925
    39e0:	0000394d 	.word	0x0000394d

000039e4 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    39e4:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
    39e6:	021b      	lsls	r3, r3, #8
    39e8:	7800      	ldrb	r0, [r0, #0]
    39ea:	4318      	orrs	r0, r3
	return rv;
}
    39ec:	4770      	bx	lr

000039ee <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    39ee:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
    39f0:	021b      	lsls	r3, r3, #8
    39f2:	7882      	ldrb	r2, [r0, #2]
    39f4:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    39f6:	021b      	lsls	r3, r3, #8
    39f8:	7842      	ldrb	r2, [r0, #1]
    39fa:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    39fc:	021b      	lsls	r3, r3, #8
    39fe:	7800      	ldrb	r0, [r0, #0]
    3a00:	4318      	orrs	r0, r3
	return rv;
}
    3a02:	4770      	bx	lr

00003a04 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3a04:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
    3a06:	0a09      	lsrs	r1, r1, #8
    3a08:	7041      	strb	r1, [r0, #1]
}
    3a0a:	4770      	bx	lr

00003a0c <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3a0c:	7001      	strb	r1, [r0, #0]
    3a0e:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
    3a10:	7043      	strb	r3, [r0, #1]
    3a12:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
    3a14:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
    3a16:	0e09      	lsrs	r1, r1, #24
    3a18:	70c1      	strb	r1, [r0, #3]
}
    3a1a:	4770      	bx	lr

00003a1c <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
    3a1c:	2000      	movs	r0, #0
    3a1e:	4770      	bx	lr

00003a20 <dbc_2nd>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
    3a20:	2000      	movs	r0, #0
    3a22:	4770      	bx	lr

00003a24 <clst2sect>:
static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
    3a24:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    3a26:	6943      	ldr	r3, [r0, #20]
    3a28:	3b02      	subs	r3, #2
    3a2a:	4299      	cmp	r1, r3
    3a2c:	d204      	bcs.n	3a38 <clst2sect+0x14>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    3a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    3a30:	8940      	ldrh	r0, [r0, #10]
    3a32:	4348      	muls	r0, r1
    3a34:	1818      	adds	r0, r3, r0
}
    3a36:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    3a38:	2000      	movs	r0, #0
    3a3a:	e7fc      	b.n	3a36 <clst2sect+0x12>

00003a3c <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
    3a3c:	b570      	push	{r4, r5, r6, lr}
    3a3e:	0006      	movs	r6, r0
    3a40:	000d      	movs	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    3a42:	0008      	movs	r0, r1
    3a44:	301a      	adds	r0, #26
    3a46:	4b07      	ldr	r3, [pc, #28]	; (3a64 <ld_clust+0x28>)
    3a48:	4798      	blx	r3
    3a4a:	0004      	movs	r4, r0
	if (fs->fs_type == FS_FAT32) {
    3a4c:	7833      	ldrb	r3, [r6, #0]
    3a4e:	2b03      	cmp	r3, #3
    3a50:	d000      	beq.n	3a54 <ld_clust+0x18>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
    3a52:	bd70      	pop	{r4, r5, r6, pc}
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    3a54:	0028      	movs	r0, r5
    3a56:	3014      	adds	r0, #20
    3a58:	4b02      	ldr	r3, [pc, #8]	; (3a64 <ld_clust+0x28>)
    3a5a:	4798      	blx	r3
    3a5c:	0400      	lsls	r0, r0, #16
    3a5e:	4320      	orrs	r0, r4
	return cl;
    3a60:	e7f7      	b.n	3a52 <ld_clust+0x16>
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	000039e5 	.word	0x000039e5

00003a68 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
    3a68:	b570      	push	{r4, r5, r6, lr}
    3a6a:	0006      	movs	r6, r0
    3a6c:	000c      	movs	r4, r1
    3a6e:	0015      	movs	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
    3a70:	b291      	uxth	r1, r2
    3a72:	0020      	movs	r0, r4
    3a74:	301a      	adds	r0, #26
    3a76:	4b06      	ldr	r3, [pc, #24]	; (3a90 <st_clust+0x28>)
    3a78:	4798      	blx	r3
	if (fs->fs_type == FS_FAT32) {
    3a7a:	7833      	ldrb	r3, [r6, #0]
    3a7c:	2b03      	cmp	r3, #3
    3a7e:	d000      	beq.n	3a82 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
    3a80:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    3a82:	0c29      	lsrs	r1, r5, #16
    3a84:	0020      	movs	r0, r4
    3a86:	3014      	adds	r0, #20
    3a88:	4b01      	ldr	r3, [pc, #4]	; (3a90 <st_clust+0x28>)
    3a8a:	4798      	blx	r3
}
    3a8c:	e7f8      	b.n	3a80 <st_clust+0x18>
    3a8e:	46c0      	nop			; (mov r8, r8)
    3a90:	00003a05 	.word	0x00003a05

00003a94 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
    3a94:	b570      	push	{r4, r5, r6, lr}
    3a96:	0004      	movs	r4, r0
    3a98:	000d      	movs	r5, r1
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
    3a9a:	2300      	movs	r3, #0
    3a9c:	724b      	strb	r3, [r1, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    3a9e:	6983      	ldr	r3, [r0, #24]
    3aa0:	2b00      	cmp	r3, #0
    3aa2:	d02e      	beq.n	3b02 <get_fileinfo+0x6e>
    3aa4:	2100      	movs	r1, #0
    3aa6:	2300      	movs	r3, #0
    3aa8:	e005      	b.n	3ab6 <get_fileinfo+0x22>
	si = di = 0;
	while (si < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[si++];
		if (c == ' ') continue;		/* Skip padding spaces */
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
    3aaa:	2a09      	cmp	r2, #9
    3aac:	d00e      	beq.n	3acc <get_fileinfo+0x38>
		fno->fname[di++] = c;
    3aae:	1868      	adds	r0, r5, r1
    3ab0:	7243      	strb	r3, [r0, #9]
    3ab2:	3101      	adds	r1, #1
    3ab4:	0013      	movs	r3, r2
	while (si < 11) {		/* Copy name body and extension */
    3ab6:	2b0a      	cmp	r3, #10
    3ab8:	d80d      	bhi.n	3ad6 <get_fileinfo+0x42>
		c = (TCHAR)dp->dir[si++];
    3aba:	1c5a      	adds	r2, r3, #1
    3abc:	69e0      	ldr	r0, [r4, #28]
    3abe:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;		/* Skip padding spaces */
    3ac0:	2b20      	cmp	r3, #32
    3ac2:	d0f7      	beq.n	3ab4 <get_fileinfo+0x20>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    3ac4:	2b05      	cmp	r3, #5
    3ac6:	d1f0      	bne.n	3aaa <get_fileinfo+0x16>
    3ac8:	33e0      	adds	r3, #224	; 0xe0
    3aca:	e7ee      	b.n	3aaa <get_fileinfo+0x16>
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
    3acc:	1868      	adds	r0, r5, r1
    3ace:	262e      	movs	r6, #46	; 0x2e
    3ad0:	7246      	strb	r6, [r0, #9]
    3ad2:	3101      	adds	r1, #1
    3ad4:	e7eb      	b.n	3aae <get_fileinfo+0x1a>
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
    3ad6:	1869      	adds	r1, r5, r1
    3ad8:	2300      	movs	r3, #0
    3ada:	724b      	strb	r3, [r1, #9]
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
    3adc:	69e3      	ldr	r3, [r4, #28]
    3ade:	7ada      	ldrb	r2, [r3, #11]
    3ae0:	233f      	movs	r3, #63	; 0x3f
    3ae2:	4013      	ands	r3, r2
    3ae4:	722b      	strb	r3, [r5, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
    3ae6:	69e0      	ldr	r0, [r4, #28]
    3ae8:	301c      	adds	r0, #28
    3aea:	4b06      	ldr	r3, [pc, #24]	; (3b04 <get_fileinfo+0x70>)
    3aec:	4798      	blx	r3
    3aee:	6028      	str	r0, [r5, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
    3af0:	69e0      	ldr	r0, [r4, #28]
    3af2:	3016      	adds	r0, #22
    3af4:	4e04      	ldr	r6, [pc, #16]	; (3b08 <get_fileinfo+0x74>)
    3af6:	47b0      	blx	r6
    3af8:	80e8      	strh	r0, [r5, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
    3afa:	69e0      	ldr	r0, [r4, #28]
    3afc:	3018      	adds	r0, #24
    3afe:	47b0      	blx	r6
    3b00:	80a8      	strh	r0, [r5, #4]
}
    3b02:	bd70      	pop	{r4, r5, r6, pc}
    3b04:	000039ef 	.word	0x000039ef
    3b08:	000039e5 	.word	0x000039e5

00003b0c <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
    3b0c:	b510      	push	{r4, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
    3b0e:	6804      	ldr	r4, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
    3b10:	2c00      	cmp	r4, #0
    3b12:	d01e      	beq.n	3b52 <get_ldnumber+0x46>
    3b14:	0022      	movs	r2, r4
	do {					/* Find a colon in the path */
		tc = *tt++;
    3b16:	1c51      	adds	r1, r2, #1
    3b18:	7813      	ldrb	r3, [r2, #0]
	} while (!IsTerminator(tc) && tc != ':');
    3b1a:	2b20      	cmp	r3, #32
    3b1c:	d902      	bls.n	3b24 <get_ldnumber+0x18>
		tc = *tt++;
    3b1e:	000a      	movs	r2, r1
	} while (!IsTerminator(tc) && tc != ':');
    3b20:	2b3a      	cmp	r3, #58	; 0x3a
    3b22:	d1f8      	bne.n	3b16 <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
    3b24:	2b3a      	cmp	r3, #58	; 0x3a
    3b26:	d002      	beq.n	3b2e <get_ldnumber+0x22>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
    3b28:	2300      	movs	r3, #0
}
    3b2a:	0018      	movs	r0, r3
    3b2c:	bd10      	pop	{r4, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    3b2e:	7823      	ldrb	r3, [r4, #0]
    3b30:	001a      	movs	r2, r3
    3b32:	3a30      	subs	r2, #48	; 0x30
    3b34:	b2d2      	uxtb	r2, r2
    3b36:	2a09      	cmp	r2, #9
    3b38:	d806      	bhi.n	3b48 <get_ldnumber+0x3c>
    3b3a:	3402      	adds	r4, #2
    3b3c:	42a1      	cmp	r1, r4
    3b3e:	d001      	beq.n	3b44 <get_ldnumber+0x38>
		i = FF_VOLUMES;
    3b40:	2301      	movs	r3, #1
    3b42:	e002      	b.n	3b4a <get_ldnumber+0x3e>
			i = (int)*tp - '0';	/* Get the LD number */
    3b44:	3b30      	subs	r3, #48	; 0x30
    3b46:	e000      	b.n	3b4a <get_ldnumber+0x3e>
		i = FF_VOLUMES;
    3b48:	2301      	movs	r3, #1
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    3b4a:	2b00      	cmp	r3, #0
    3b4c:	dc04      	bgt.n	3b58 <get_ldnumber+0x4c>
			*path = tt;		/* Snip the drive prefix off */
    3b4e:	6001      	str	r1, [r0, #0]
    3b50:	e7eb      	b.n	3b2a <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
    3b52:	2301      	movs	r3, #1
    3b54:	425b      	negs	r3, r3
    3b56:	e7e8      	b.n	3b2a <get_ldnumber+0x1e>
	int vol = -1;
    3b58:	2301      	movs	r3, #1
    3b5a:	425b      	negs	r3, r3
    3b5c:	e7e5      	b.n	3b2a <get_ldnumber+0x1e>
	...

00003b60 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
    3b60:	b570      	push	{r4, r5, r6, lr}
    3b62:	0004      	movs	r4, r0
    3b64:	000d      	movs	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    3b66:	2800      	cmp	r0, #0
    3b68:	d018      	beq.n	3b9c <validate+0x3c>
    3b6a:	6803      	ldr	r3, [r0, #0]
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	d017      	beq.n	3ba0 <validate+0x40>
    3b70:	781a      	ldrb	r2, [r3, #0]
    3b72:	2a00      	cmp	r2, #0
    3b74:	d105      	bne.n	3b82 <validate+0x22>
	FRESULT res = FR_INVALID_OBJECT;
    3b76:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    3b78:	2800      	cmp	r0, #0
    3b7a:	d115      	bne.n	3ba8 <validate+0x48>
    3b7c:	6823      	ldr	r3, [r4, #0]
    3b7e:	602b      	str	r3, [r5, #0]
	return res;
}
    3b80:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    3b82:	8881      	ldrh	r1, [r0, #4]
    3b84:	88da      	ldrh	r2, [r3, #6]
    3b86:	4291      	cmp	r1, r2
    3b88:	d001      	beq.n	3b8e <validate+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
    3b8a:	2009      	movs	r0, #9
    3b8c:	e7f4      	b.n	3b78 <validate+0x18>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    3b8e:	7858      	ldrb	r0, [r3, #1]
    3b90:	4b06      	ldr	r3, [pc, #24]	; (3bac <validate+0x4c>)
    3b92:	4798      	blx	r3
    3b94:	07c3      	lsls	r3, r0, #31
    3b96:	d505      	bpl.n	3ba4 <validate+0x44>
	FRESULT res = FR_INVALID_OBJECT;
    3b98:	2009      	movs	r0, #9
    3b9a:	e7ed      	b.n	3b78 <validate+0x18>
    3b9c:	2009      	movs	r0, #9
    3b9e:	e7eb      	b.n	3b78 <validate+0x18>
    3ba0:	2009      	movs	r0, #9
    3ba2:	e7e9      	b.n	3b78 <validate+0x18>
			res = FR_OK;
    3ba4:	2000      	movs	r0, #0
    3ba6:	e7e7      	b.n	3b78 <validate+0x18>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    3ba8:	2300      	movs	r3, #0
    3baa:	e7e8      	b.n	3b7e <validate+0x1e>
    3bac:	0000570d 	.word	0x0000570d

00003bb0 <sync_window>:
{
    3bb0:	b570      	push	{r4, r5, r6, lr}
    3bb2:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
    3bb4:	7903      	ldrb	r3, [r0, #4]
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d101      	bne.n	3bbe <sync_window+0xe>
	FRESULT res = FR_OK;
    3bba:	2000      	movs	r0, #0
}
    3bbc:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    3bbe:	0005      	movs	r5, r0
    3bc0:	3530      	adds	r5, #48	; 0x30
    3bc2:	7840      	ldrb	r0, [r0, #1]
    3bc4:	2301      	movs	r3, #1
    3bc6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3bc8:	0029      	movs	r1, r5
    3bca:	4e0e      	ldr	r6, [pc, #56]	; (3c04 <sync_window+0x54>)
    3bcc:	47b0      	blx	r6
    3bce:	2800      	cmp	r0, #0
    3bd0:	d114      	bne.n	3bfc <sync_window+0x4c>
			fs->wflag = 0;	/* Clear window dirty flag */
    3bd2:	2300      	movs	r3, #0
    3bd4:	7123      	strb	r3, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    3bd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3bd8:	6a23      	ldr	r3, [r4, #32]
    3bda:	1ad3      	subs	r3, r2, r3
    3bdc:	69a1      	ldr	r1, [r4, #24]
    3bde:	428b      	cmp	r3, r1
    3be0:	d20e      	bcs.n	3c00 <sync_window+0x50>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    3be2:	78e3      	ldrb	r3, [r4, #3]
    3be4:	2b02      	cmp	r3, #2
    3be6:	d001      	beq.n	3bec <sync_window+0x3c>
	FRESULT res = FR_OK;
    3be8:	2000      	movs	r0, #0
    3bea:	e7e7      	b.n	3bbc <sync_window+0xc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    3bec:	1852      	adds	r2, r2, r1
    3bee:	7860      	ldrb	r0, [r4, #1]
    3bf0:	3b01      	subs	r3, #1
    3bf2:	0029      	movs	r1, r5
    3bf4:	4c03      	ldr	r4, [pc, #12]	; (3c04 <sync_window+0x54>)
    3bf6:	47a0      	blx	r4
	FRESULT res = FR_OK;
    3bf8:	2000      	movs	r0, #0
    3bfa:	e7df      	b.n	3bbc <sync_window+0xc>
			res = FR_DISK_ERR;
    3bfc:	2001      	movs	r0, #1
    3bfe:	e7dd      	b.n	3bbc <sync_window+0xc>
	FRESULT res = FR_OK;
    3c00:	2000      	movs	r0, #0
    3c02:	e7db      	b.n	3bbc <sync_window+0xc>
    3c04:	000058c5 	.word	0x000058c5

00003c08 <move_window>:
{
    3c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c0a:	0005      	movs	r5, r0
    3c0c:	000e      	movs	r6, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
    3c0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    3c10:	428b      	cmp	r3, r1
    3c12:	d013      	beq.n	3c3c <move_window+0x34>
		res = sync_window(fs);		/* Flush the window */
    3c14:	4b0a      	ldr	r3, [pc, #40]	; (3c40 <move_window+0x38>)
    3c16:	4798      	blx	r3
    3c18:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
    3c1a:	d001      	beq.n	3c20 <move_window+0x18>
}
    3c1c:	0020      	movs	r0, r4
    3c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    3c20:	0029      	movs	r1, r5
    3c22:	3130      	adds	r1, #48	; 0x30
    3c24:	7868      	ldrb	r0, [r5, #1]
    3c26:	2301      	movs	r3, #1
    3c28:	0032      	movs	r2, r6
    3c2a:	4f06      	ldr	r7, [pc, #24]	; (3c44 <move_window+0x3c>)
    3c2c:	47b8      	blx	r7
    3c2e:	2800      	cmp	r0, #0
    3c30:	d002      	beq.n	3c38 <move_window+0x30>
				res = FR_DISK_ERR;
    3c32:	3401      	adds	r4, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
    3c34:	2601      	movs	r6, #1
    3c36:	4276      	negs	r6, r6
			fs->winsect = sect;
    3c38:	62ee      	str	r6, [r5, #44]	; 0x2c
    3c3a:	e7ef      	b.n	3c1c <move_window+0x14>
	FRESULT res = FR_OK;
    3c3c:	2400      	movs	r4, #0
    3c3e:	e7ed      	b.n	3c1c <move_window+0x14>
    3c40:	00003bb1 	.word	0x00003bb1
    3c44:	00005845 	.word	0x00005845

00003c48 <check_fs>:
{
    3c48:	b570      	push	{r4, r5, r6, lr}
    3c4a:	0004      	movs	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    3c4c:	2300      	movs	r3, #0
    3c4e:	7103      	strb	r3, [r0, #4]
    3c50:	3b01      	subs	r3, #1
    3c52:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    3c54:	4b30      	ldr	r3, [pc, #192]	; (3d18 <check_fs+0xd0>)
    3c56:	4798      	blx	r3
    3c58:	2800      	cmp	r0, #0
    3c5a:	d001      	beq.n	3c60 <check_fs+0x18>
    3c5c:	2004      	movs	r0, #4
}
    3c5e:	bd70      	pop	{r4, r5, r6, pc}
	sign = ld_word(fs->win + BS_55AA);
    3c60:	4b2e      	ldr	r3, [pc, #184]	; (3d1c <check_fs+0xd4>)
    3c62:	18e0      	adds	r0, r4, r3
    3c64:	4b2e      	ldr	r3, [pc, #184]	; (3d20 <check_fs+0xd8>)
    3c66:	4798      	blx	r3
    3c68:	0005      	movs	r5, r0
	b = fs->win[BS_JmpBoot];
    3c6a:	2330      	movs	r3, #48	; 0x30
    3c6c:	5ce3      	ldrb	r3, [r4, r3]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
    3c6e:	2beb      	cmp	r3, #235	; 0xeb
    3c70:	d008      	beq.n	3c84 <check_fs+0x3c>
    3c72:	2be9      	cmp	r3, #233	; 0xe9
    3c74:	d006      	beq.n	3c84 <check_fs+0x3c>
    3c76:	2be8      	cmp	r3, #232	; 0xe8
    3c78:	d004      	beq.n	3c84 <check_fs+0x3c>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    3c7a:	4b2a      	ldr	r3, [pc, #168]	; (3d24 <check_fs+0xdc>)
    3c7c:	429d      	cmp	r5, r3
    3c7e:	d048      	beq.n	3d12 <check_fs+0xca>
    3c80:	2003      	movs	r0, #3
    3c82:	e7ec      	b.n	3c5e <check_fs+0x16>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    3c84:	4b27      	ldr	r3, [pc, #156]	; (3d24 <check_fs+0xdc>)
    3c86:	429d      	cmp	r5, r3
    3c88:	d039      	beq.n	3cfe <check_fs+0xb6>
		w = ld_word(fs->win + BPB_BytsPerSec);
    3c8a:	0020      	movs	r0, r4
    3c8c:	303b      	adds	r0, #59	; 0x3b
    3c8e:	4b24      	ldr	r3, [pc, #144]	; (3d20 <check_fs+0xd8>)
    3c90:	4798      	blx	r3
		b = fs->win[BPB_SecPerClus];
    3c92:	233d      	movs	r3, #61	; 0x3d
    3c94:	5ce1      	ldrb	r1, [r4, r3]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    3c96:	1e43      	subs	r3, r0, #1
    3c98:	4203      	tst	r3, r0
    3c9a:	d1ee      	bne.n	3c7a <check_fs+0x32>
    3c9c:	4b22      	ldr	r3, [pc, #136]	; (3d28 <check_fs+0xe0>)
    3c9e:	4298      	cmp	r0, r3
    3ca0:	d9eb      	bls.n	3c7a <check_fs+0x32>
    3ca2:	3301      	adds	r3, #1
    3ca4:	4298      	cmp	r0, r3
    3ca6:	d8e8      	bhi.n	3c7a <check_fs+0x32>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
    3ca8:	2900      	cmp	r1, #0
    3caa:	d0e6      	beq.n	3c7a <check_fs+0x32>
    3cac:	1e4b      	subs	r3, r1, #1
    3cae:	420b      	tst	r3, r1
    3cb0:	d1e3      	bne.n	3c7a <check_fs+0x32>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
    3cb2:	0020      	movs	r0, r4
    3cb4:	303e      	adds	r0, #62	; 0x3e
    3cb6:	4b1a      	ldr	r3, [pc, #104]	; (3d20 <check_fs+0xd8>)
    3cb8:	4798      	blx	r3
    3cba:	2800      	cmp	r0, #0
    3cbc:	d0dd      	beq.n	3c7a <check_fs+0x32>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
    3cbe:	2340      	movs	r3, #64	; 0x40
    3cc0:	5ce3      	ldrb	r3, [r4, r3]
    3cc2:	3b01      	subs	r3, #1
    3cc4:	2b01      	cmp	r3, #1
    3cc6:	d8d8      	bhi.n	3c7a <check_fs+0x32>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
    3cc8:	0020      	movs	r0, r4
    3cca:	3041      	adds	r0, #65	; 0x41
    3ccc:	4b14      	ldr	r3, [pc, #80]	; (3d20 <check_fs+0xd8>)
    3cce:	4798      	blx	r3
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d0d2      	beq.n	3c7a <check_fs+0x32>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
    3cd4:	0020      	movs	r0, r4
    3cd6:	3043      	adds	r0, #67	; 0x43
    3cd8:	4b11      	ldr	r3, [pc, #68]	; (3d20 <check_fs+0xd8>)
    3cda:	4798      	blx	r3
    3cdc:	287f      	cmp	r0, #127	; 0x7f
    3cde:	d806      	bhi.n	3cee <check_fs+0xa6>
    3ce0:	0020      	movs	r0, r4
    3ce2:	3050      	adds	r0, #80	; 0x50
    3ce4:	4b11      	ldr	r3, [pc, #68]	; (3d2c <check_fs+0xe4>)
    3ce6:	4798      	blx	r3
    3ce8:	4b11      	ldr	r3, [pc, #68]	; (3d30 <check_fs+0xe8>)
    3cea:	4298      	cmp	r0, r3
    3cec:	d9c5      	bls.n	3c7a <check_fs+0x32>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
    3cee:	0020      	movs	r0, r4
    3cf0:	3046      	adds	r0, #70	; 0x46
    3cf2:	4b0b      	ldr	r3, [pc, #44]	; (3d20 <check_fs+0xd8>)
    3cf4:	4798      	blx	r3
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d0bf      	beq.n	3c7a <check_fs+0x32>
				return 0;	/* It can be presumed an FAT VBR */
    3cfa:	2000      	movs	r0, #0
    3cfc:	e7af      	b.n	3c5e <check_fs+0x16>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    3cfe:	2208      	movs	r2, #8
    3d00:	490c      	ldr	r1, [pc, #48]	; (3d34 <check_fs+0xec>)
    3d02:	0020      	movs	r0, r4
    3d04:	3082      	adds	r0, #130	; 0x82
    3d06:	4b0c      	ldr	r3, [pc, #48]	; (3d38 <check_fs+0xf0>)
    3d08:	4798      	blx	r3
    3d0a:	2800      	cmp	r0, #0
    3d0c:	d1bd      	bne.n	3c8a <check_fs+0x42>
			return 0;	/* It is an FAT32 VBR */
    3d0e:	2000      	movs	r0, #0
    3d10:	e7a5      	b.n	3c5e <check_fs+0x16>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    3d12:	2002      	movs	r0, #2
    3d14:	e7a3      	b.n	3c5e <check_fs+0x16>
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	00003c09 	.word	0x00003c09
    3d1c:	0000022e 	.word	0x0000022e
    3d20:	000039e5 	.word	0x000039e5
    3d24:	0000aa55 	.word	0x0000aa55
    3d28:	000001ff 	.word	0x000001ff
    3d2c:	000039ef 	.word	0x000039ef
    3d30:	0000ffff 	.word	0x0000ffff
    3d34:	00012860 	.word	0x00012860
    3d38:	00008809 	.word	0x00008809

00003d3c <find_volume>:
{
    3d3c:	b570      	push	{r4, r5, r6, lr}
    3d3e:	b084      	sub	sp, #16
    3d40:	0005      	movs	r5, r0
    3d42:	000e      	movs	r6, r1
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
    3d44:	2100      	movs	r1, #0
    3d46:	4b19      	ldr	r3, [pc, #100]	; (3dac <find_volume+0x70>)
    3d48:	4798      	blx	r3
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    3d4a:	2802      	cmp	r0, #2
    3d4c:	d016      	beq.n	3d7c <find_volume+0x40>
    3d4e:	d82a      	bhi.n	3da6 <find_volume+0x6a>
    3d50:	2e00      	cmp	r6, #0
    3d52:	d028      	beq.n	3da6 <find_volume+0x6a>
    3d54:	2400      	movs	r4, #0
    3d56:	e00b      	b.n	3d70 <find_volume+0x34>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
    3d58:	002b      	movs	r3, r5
    3d5a:	3330      	adds	r3, #48	; 0x30
    3d5c:	0120      	lsls	r0, r4, #4
    3d5e:	30c7      	adds	r0, #199	; 0xc7
    3d60:	30ff      	adds	r0, #255	; 0xff
    3d62:	1818      	adds	r0, r3, r0
    3d64:	4b12      	ldr	r3, [pc, #72]	; (3db0 <find_volume+0x74>)
    3d66:	4798      	blx	r3
    3d68:	00a3      	lsls	r3, r4, #2
    3d6a:	466a      	mov	r2, sp
    3d6c:	5098      	str	r0, [r3, r2]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
    3d6e:	3401      	adds	r4, #1
    3d70:	2c03      	cmp	r4, #3
    3d72:	d9f1      	bls.n	3d58 <find_volume+0x1c>
	i = part ? part - 1 : 0;		/* Table index to find first */
    3d74:	2e00      	cmp	r6, #0
    3d76:	d003      	beq.n	3d80 <find_volume+0x44>
    3d78:	1e74      	subs	r4, r6, #1
    3d7a:	e00d      	b.n	3d98 <find_volume+0x5c>
    3d7c:	2400      	movs	r4, #0
    3d7e:	e7f7      	b.n	3d70 <find_volume+0x34>
    3d80:	0034      	movs	r4, r6
    3d82:	e009      	b.n	3d98 <find_volume+0x5c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    3d84:	0028      	movs	r0, r5
    3d86:	4b09      	ldr	r3, [pc, #36]	; (3dac <find_volume+0x70>)
    3d88:	4798      	blx	r3
	} while (part == 0 && fmt >= 2 && ++i < 4);
    3d8a:	2e00      	cmp	r6, #0
    3d8c:	d10b      	bne.n	3da6 <find_volume+0x6a>
    3d8e:	2801      	cmp	r0, #1
    3d90:	d909      	bls.n	3da6 <find_volume+0x6a>
    3d92:	3401      	adds	r4, #1
    3d94:	2c03      	cmp	r4, #3
    3d96:	d806      	bhi.n	3da6 <find_volume+0x6a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    3d98:	00a3      	lsls	r3, r4, #2
    3d9a:	466a      	mov	r2, sp
    3d9c:	5899      	ldr	r1, [r3, r2]
    3d9e:	2900      	cmp	r1, #0
    3da0:	d1f0      	bne.n	3d84 <find_volume+0x48>
    3da2:	2003      	movs	r0, #3
    3da4:	e7f1      	b.n	3d8a <find_volume+0x4e>
}
    3da6:	b004      	add	sp, #16
    3da8:	bd70      	pop	{r4, r5, r6, pc}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	00003c49 	.word	0x00003c49
    3db0:	000039ef 	.word	0x000039ef

00003db4 <mount_volume>:
{
    3db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3db6:	46de      	mov	lr, fp
    3db8:	4657      	mov	r7, sl
    3dba:	464e      	mov	r6, r9
    3dbc:	4645      	mov	r5, r8
    3dbe:	b5e0      	push	{r5, r6, r7, lr}
    3dc0:	b083      	sub	sp, #12
    3dc2:	000e      	movs	r6, r1
    3dc4:	0015      	movs	r5, r2
	*rfs = 0;
    3dc6:	2300      	movs	r3, #0
    3dc8:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
    3dca:	4ba2      	ldr	r3, [pc, #648]	; (4054 <mount_volume+0x2a0>)
    3dcc:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    3dce:	2800      	cmp	r0, #0
    3dd0:	da00      	bge.n	3dd4 <mount_volume+0x20>
    3dd2:	e11d      	b.n	4010 <mount_volume+0x25c>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    3dd4:	0080      	lsls	r0, r0, #2
    3dd6:	4ba0      	ldr	r3, [pc, #640]	; (4058 <mount_volume+0x2a4>)
    3dd8:	58c4      	ldr	r4, [r0, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    3dda:	2c00      	cmp	r4, #0
    3ddc:	d100      	bne.n	3de0 <mount_volume+0x2c>
    3dde:	e11f      	b.n	4020 <mount_volume+0x26c>
	*rfs = fs;							/* Return pointer to the filesystem object */
    3de0:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    3de2:	2301      	movs	r3, #1
    3de4:	439d      	bics	r5, r3
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    3de6:	7823      	ldrb	r3, [r4, #0]
    3de8:	2b00      	cmp	r3, #0
    3dea:	d00d      	beq.n	3e08 <mount_volume+0x54>
		stat = disk_status(fs->pdrv);
    3dec:	7860      	ldrb	r0, [r4, #1]
    3dee:	4b9b      	ldr	r3, [pc, #620]	; (405c <mount_volume+0x2a8>)
    3df0:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    3df2:	07c3      	lsls	r3, r0, #31
    3df4:	d408      	bmi.n	3e08 <mount_volume+0x54>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    3df6:	2d00      	cmp	r5, #0
    3df8:	d100      	bne.n	3dfc <mount_volume+0x48>
    3dfa:	e113      	b.n	4024 <mount_volume+0x270>
    3dfc:	0743      	lsls	r3, r0, #29
    3dfe:	d501      	bpl.n	3e04 <mount_volume+0x50>
				return FR_WRITE_PROTECTED;
    3e00:	200a      	movs	r0, #10
    3e02:	e106      	b.n	4012 <mount_volume+0x25e>
			return FR_OK;				/* The filesystem object is already valid */
    3e04:	2000      	movs	r0, #0
    3e06:	e104      	b.n	4012 <mount_volume+0x25e>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    3e08:	2300      	movs	r3, #0
    3e0a:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    3e0c:	7860      	ldrb	r0, [r4, #1]
    3e0e:	4b94      	ldr	r3, [pc, #592]	; (4060 <mount_volume+0x2ac>)
    3e10:	4798      	blx	r3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    3e12:	07c3      	lsls	r3, r0, #31
    3e14:	d501      	bpl.n	3e1a <mount_volume+0x66>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    3e16:	2003      	movs	r0, #3
    3e18:	e0fb      	b.n	4012 <mount_volume+0x25e>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    3e1a:	2d00      	cmp	r5, #0
    3e1c:	d003      	beq.n	3e26 <mount_volume+0x72>
    3e1e:	0743      	lsls	r3, r0, #29
    3e20:	d501      	bpl.n	3e26 <mount_volume+0x72>
		return FR_WRITE_PROTECTED;
    3e22:	200a      	movs	r0, #10
    3e24:	e0f5      	b.n	4012 <mount_volume+0x25e>
	fmt = find_volume(fs, LD2PT(vol));
    3e26:	2100      	movs	r1, #0
    3e28:	0020      	movs	r0, r4
    3e2a:	4b8e      	ldr	r3, [pc, #568]	; (4064 <mount_volume+0x2b0>)
    3e2c:	4798      	blx	r3
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    3e2e:	2804      	cmp	r0, #4
    3e30:	d100      	bne.n	3e34 <mount_volume+0x80>
    3e32:	e0f9      	b.n	4028 <mount_volume+0x274>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    3e34:	2801      	cmp	r0, #1
    3e36:	d901      	bls.n	3e3c <mount_volume+0x88>
    3e38:	200d      	movs	r0, #13
    3e3a:	e0ea      	b.n	4012 <mount_volume+0x25e>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
    3e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3e3e:	0020      	movs	r0, r4
    3e40:	303b      	adds	r0, #59	; 0x3b
    3e42:	4b89      	ldr	r3, [pc, #548]	; (4068 <mount_volume+0x2b4>)
    3e44:	4798      	blx	r3
    3e46:	2380      	movs	r3, #128	; 0x80
    3e48:	009b      	lsls	r3, r3, #2
    3e4a:	4298      	cmp	r0, r3
    3e4c:	d001      	beq.n	3e52 <mount_volume+0x9e>
    3e4e:	200d      	movs	r0, #13
    3e50:	e0df      	b.n	4012 <mount_volume+0x25e>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    3e52:	0020      	movs	r0, r4
    3e54:	3046      	adds	r0, #70	; 0x46
    3e56:	4b84      	ldr	r3, [pc, #528]	; (4068 <mount_volume+0x2b4>)
    3e58:	4798      	blx	r3
    3e5a:	4682      	mov	sl, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    3e5c:	2800      	cmp	r0, #0
    3e5e:	d104      	bne.n	3e6a <mount_volume+0xb6>
    3e60:	0020      	movs	r0, r4
    3e62:	3054      	adds	r0, #84	; 0x54
    3e64:	4b81      	ldr	r3, [pc, #516]	; (406c <mount_volume+0x2b8>)
    3e66:	4798      	blx	r3
    3e68:	4682      	mov	sl, r0
		fs->fsize = fasize;
    3e6a:	4653      	mov	r3, sl
    3e6c:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    3e6e:	2340      	movs	r3, #64	; 0x40
    3e70:	5ce3      	ldrb	r3, [r4, r3]
    3e72:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    3e74:	1e5a      	subs	r2, r3, #1
    3e76:	b2d2      	uxtb	r2, r2
    3e78:	2a01      	cmp	r2, #1
    3e7a:	d901      	bls.n	3e80 <mount_volume+0xcc>
    3e7c:	200d      	movs	r0, #13
    3e7e:	e0c8      	b.n	4012 <mount_volume+0x25e>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    3e80:	4652      	mov	r2, sl
    3e82:	435a      	muls	r2, r3
    3e84:	4691      	mov	r9, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    3e86:	233d      	movs	r3, #61	; 0x3d
    3e88:	5ce3      	ldrb	r3, [r4, r3]
    3e8a:	4698      	mov	r8, r3
    3e8c:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d100      	bne.n	3e94 <mount_volume+0xe0>
    3e92:	e0cb      	b.n	402c <mount_volume+0x278>
    3e94:	3b01      	subs	r3, #1
    3e96:	4642      	mov	r2, r8
    3e98:	4213      	tst	r3, r2
    3e9a:	d001      	beq.n	3ea0 <mount_volume+0xec>
    3e9c:	200d      	movs	r0, #13
    3e9e:	e0b8      	b.n	4012 <mount_volume+0x25e>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    3ea0:	0020      	movs	r0, r4
    3ea2:	3041      	adds	r0, #65	; 0x41
    3ea4:	4b70      	ldr	r3, [pc, #448]	; (4068 <mount_volume+0x2b4>)
    3ea6:	4798      	blx	r3
    3ea8:	0007      	movs	r7, r0
    3eaa:	9001      	str	r0, [sp, #4]
    3eac:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    3eae:	0703      	lsls	r3, r0, #28
    3eb0:	d000      	beq.n	3eb4 <mount_volume+0x100>
    3eb2:	e0bd      	b.n	4030 <mount_volume+0x27c>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    3eb4:	0020      	movs	r0, r4
    3eb6:	3043      	adds	r0, #67	; 0x43
    3eb8:	4b6b      	ldr	r3, [pc, #428]	; (4068 <mount_volume+0x2b4>)
    3eba:	4798      	blx	r3
    3ebc:	1e05      	subs	r5, r0, #0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    3ebe:	d104      	bne.n	3eca <mount_volume+0x116>
    3ec0:	0020      	movs	r0, r4
    3ec2:	3050      	adds	r0, #80	; 0x50
    3ec4:	4b69      	ldr	r3, [pc, #420]	; (406c <mount_volume+0x2b8>)
    3ec6:	4798      	blx	r3
    3ec8:	0005      	movs	r5, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
    3eca:	0020      	movs	r0, r4
    3ecc:	303e      	adds	r0, #62	; 0x3e
    3ece:	4b66      	ldr	r3, [pc, #408]	; (4068 <mount_volume+0x2b4>)
    3ed0:	4798      	blx	r3
    3ed2:	4683      	mov	fp, r0
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    3ed4:	2800      	cmp	r0, #0
    3ed6:	d100      	bne.n	3eda <mount_volume+0x126>
    3ed8:	e0ac      	b.n	4034 <mount_volume+0x280>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    3eda:	464b      	mov	r3, r9
    3edc:	445b      	add	r3, fp
    3ede:	093f      	lsrs	r7, r7, #4
    3ee0:	b2bf      	uxth	r7, r7
    3ee2:	19df      	adds	r7, r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    3ee4:	42bd      	cmp	r5, r7
    3ee6:	d200      	bcs.n	3eea <mount_volume+0x136>
    3ee8:	e0a6      	b.n	4038 <mount_volume+0x284>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    3eea:	1be8      	subs	r0, r5, r7
    3eec:	4641      	mov	r1, r8
    3eee:	4b60      	ldr	r3, [pc, #384]	; (4070 <mount_volume+0x2bc>)
    3ef0:	4798      	blx	r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3ef2:	2800      	cmp	r0, #0
    3ef4:	d100      	bne.n	3ef8 <mount_volume+0x144>
    3ef6:	e0a1      	b.n	403c <mount_volume+0x288>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    3ef8:	4b5e      	ldr	r3, [pc, #376]	; (4074 <mount_volume+0x2c0>)
    3efa:	4298      	cmp	r0, r3
    3efc:	d974      	bls.n	3fe8 <mount_volume+0x234>
		fmt = 0;
    3efe:	2300      	movs	r3, #0
    3f00:	4698      	mov	r8, r3
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    3f02:	4b5d      	ldr	r3, [pc, #372]	; (4078 <mount_volume+0x2c4>)
    3f04:	4298      	cmp	r0, r3
    3f06:	d801      	bhi.n	3f0c <mount_volume+0x158>
    3f08:	2302      	movs	r3, #2
    3f0a:	4698      	mov	r8, r3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    3f0c:	4b5b      	ldr	r3, [pc, #364]	; (407c <mount_volume+0x2c8>)
    3f0e:	4298      	cmp	r0, r3
    3f10:	d801      	bhi.n	3f16 <mount_volume+0x162>
    3f12:	2301      	movs	r3, #1
    3f14:	4698      	mov	r8, r3
		if (fmt == 0) return FR_NO_FILESYSTEM;
    3f16:	4643      	mov	r3, r8
    3f18:	2b00      	cmp	r3, #0
    3f1a:	d100      	bne.n	3f1e <mount_volume+0x16a>
    3f1c:	e090      	b.n	4040 <mount_volume+0x28c>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    3f1e:	1c85      	adds	r5, r0, #2
    3f20:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
    3f22:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    3f24:	465b      	mov	r3, fp
    3f26:	18f3      	adds	r3, r6, r3
    3f28:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    3f2a:	19f7      	adds	r7, r6, r7
    3f2c:	62a7      	str	r7, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
    3f2e:	4642      	mov	r2, r8
    3f30:	2a03      	cmp	r2, #3
    3f32:	d15c      	bne.n	3fee <mount_volume+0x23a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    3f34:	0020      	movs	r0, r4
    3f36:	305a      	adds	r0, #90	; 0x5a
    3f38:	4b4b      	ldr	r3, [pc, #300]	; (4068 <mount_volume+0x2b4>)
    3f3a:	4798      	blx	r3
    3f3c:	2800      	cmp	r0, #0
    3f3e:	d000      	beq.n	3f42 <mount_volume+0x18e>
    3f40:	e080      	b.n	4044 <mount_volume+0x290>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    3f42:	9b01      	ldr	r3, [sp, #4]
    3f44:	2b00      	cmp	r3, #0
    3f46:	d000      	beq.n	3f4a <mount_volume+0x196>
    3f48:	e07e      	b.n	4048 <mount_volume+0x294>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    3f4a:	0020      	movs	r0, r4
    3f4c:	305c      	adds	r0, #92	; 0x5c
    3f4e:	4b47      	ldr	r3, [pc, #284]	; (406c <mount_volume+0x2b8>)
    3f50:	4798      	blx	r3
    3f52:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    3f54:	00ad      	lsls	r5, r5, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    3f56:	4b4a      	ldr	r3, [pc, #296]	; (4080 <mount_volume+0x2cc>)
    3f58:	469c      	mov	ip, r3
    3f5a:	4465      	add	r5, ip
    3f5c:	0a6d      	lsrs	r5, r5, #9
    3f5e:	45aa      	cmp	sl, r5
    3f60:	d200      	bcs.n	3f64 <mount_volume+0x1b0>
    3f62:	e075      	b.n	4050 <mount_volume+0x29c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    3f64:	2301      	movs	r3, #1
    3f66:	425b      	negs	r3, r3
    3f68:	6123      	str	r3, [r4, #16]
    3f6a:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
    3f6c:	3381      	adds	r3, #129	; 0x81
    3f6e:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    3f70:	4643      	mov	r3, r8
    3f72:	2b03      	cmp	r3, #3
    3f74:	d12e      	bne.n	3fd4 <mount_volume+0x220>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    3f76:	0020      	movs	r0, r4
    3f78:	3060      	adds	r0, #96	; 0x60
    3f7a:	4b3b      	ldr	r3, [pc, #236]	; (4068 <mount_volume+0x2b4>)
    3f7c:	4798      	blx	r3
    3f7e:	2801      	cmp	r0, #1
    3f80:	d128      	bne.n	3fd4 <mount_volume+0x220>
			&& move_window(fs, bsect + 1) == FR_OK)
    3f82:	1c71      	adds	r1, r6, #1
    3f84:	0020      	movs	r0, r4
    3f86:	4b3f      	ldr	r3, [pc, #252]	; (4084 <mount_volume+0x2d0>)
    3f88:	4798      	blx	r3
    3f8a:	2800      	cmp	r0, #0
    3f8c:	d122      	bne.n	3fd4 <mount_volume+0x220>
			fs->fsi_flag = 0;
    3f8e:	2300      	movs	r3, #0
    3f90:	7163      	strb	r3, [r4, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    3f92:	4b3d      	ldr	r3, [pc, #244]	; (4088 <mount_volume+0x2d4>)
    3f94:	18e0      	adds	r0, r4, r3
    3f96:	4b34      	ldr	r3, [pc, #208]	; (4068 <mount_volume+0x2b4>)
    3f98:	4798      	blx	r3
    3f9a:	4b3c      	ldr	r3, [pc, #240]	; (408c <mount_volume+0x2d8>)
    3f9c:	4298      	cmp	r0, r3
    3f9e:	d119      	bne.n	3fd4 <mount_volume+0x220>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    3fa0:	0020      	movs	r0, r4
    3fa2:	3030      	adds	r0, #48	; 0x30
    3fa4:	4b31      	ldr	r3, [pc, #196]	; (406c <mount_volume+0x2b8>)
    3fa6:	4798      	blx	r3
    3fa8:	4b39      	ldr	r3, [pc, #228]	; (4090 <mount_volume+0x2dc>)
    3faa:	4298      	cmp	r0, r3
    3fac:	d112      	bne.n	3fd4 <mount_volume+0x220>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    3fae:	2385      	movs	r3, #133	; 0x85
    3fb0:	009b      	lsls	r3, r3, #2
    3fb2:	18e0      	adds	r0, r4, r3
    3fb4:	4b2d      	ldr	r3, [pc, #180]	; (406c <mount_volume+0x2b8>)
    3fb6:	4798      	blx	r3
    3fb8:	4b36      	ldr	r3, [pc, #216]	; (4094 <mount_volume+0x2e0>)
    3fba:	4298      	cmp	r0, r3
    3fbc:	d10a      	bne.n	3fd4 <mount_volume+0x220>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    3fbe:	2386      	movs	r3, #134	; 0x86
    3fc0:	009b      	lsls	r3, r3, #2
    3fc2:	18e0      	adds	r0, r4, r3
    3fc4:	4d29      	ldr	r5, [pc, #164]	; (406c <mount_volume+0x2b8>)
    3fc6:	47a8      	blx	r5
    3fc8:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    3fca:	2387      	movs	r3, #135	; 0x87
    3fcc:	009b      	lsls	r3, r3, #2
    3fce:	18e0      	adds	r0, r4, r3
    3fd0:	47a8      	blx	r5
    3fd2:	60e0      	str	r0, [r4, #12]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
    3fd4:	4643      	mov	r3, r8
    3fd6:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    3fd8:	4a2f      	ldr	r2, [pc, #188]	; (4098 <mount_volume+0x2e4>)
    3fda:	8813      	ldrh	r3, [r2, #0]
    3fdc:	3301      	adds	r3, #1
    3fde:	b29b      	uxth	r3, r3
    3fe0:	8013      	strh	r3, [r2, #0]
    3fe2:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
    3fe4:	2000      	movs	r0, #0
    3fe6:	e014      	b.n	4012 <mount_volume+0x25e>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    3fe8:	2303      	movs	r3, #3
    3fea:	4698      	mov	r8, r3
    3fec:	e789      	b.n	3f02 <mount_volume+0x14e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3fee:	9a01      	ldr	r2, [sp, #4]
    3ff0:	2a00      	cmp	r2, #0
    3ff2:	d02b      	beq.n	404c <mount_volume+0x298>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    3ff4:	444b      	add	r3, r9
    3ff6:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3ff8:	4643      	mov	r3, r8
    3ffa:	2b02      	cmp	r3, #2
    3ffc:	d101      	bne.n	4002 <mount_volume+0x24e>
    3ffe:	006d      	lsls	r5, r5, #1
    4000:	e7a9      	b.n	3f56 <mount_volume+0x1a2>
    4002:	2303      	movs	r3, #3
    4004:	436b      	muls	r3, r5
    4006:	085b      	lsrs	r3, r3, #1
    4008:	2201      	movs	r2, #1
    400a:	4015      	ands	r5, r2
    400c:	195d      	adds	r5, r3, r5
    400e:	e7a2      	b.n	3f56 <mount_volume+0x1a2>
	if (vol < 0) return FR_INVALID_DRIVE;
    4010:	200b      	movs	r0, #11
}
    4012:	b003      	add	sp, #12
    4014:	bc3c      	pop	{r2, r3, r4, r5}
    4016:	4690      	mov	r8, r2
    4018:	4699      	mov	r9, r3
    401a:	46a2      	mov	sl, r4
    401c:	46ab      	mov	fp, r5
    401e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    4020:	200c      	movs	r0, #12
    4022:	e7f6      	b.n	4012 <mount_volume+0x25e>
			return FR_OK;				/* The filesystem object is already valid */
    4024:	2000      	movs	r0, #0
    4026:	e7f4      	b.n	4012 <mount_volume+0x25e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    4028:	2001      	movs	r0, #1
    402a:	e7f2      	b.n	4012 <mount_volume+0x25e>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    402c:	200d      	movs	r0, #13
    402e:	e7f0      	b.n	4012 <mount_volume+0x25e>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    4030:	200d      	movs	r0, #13
    4032:	e7ee      	b.n	4012 <mount_volume+0x25e>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    4034:	200d      	movs	r0, #13
    4036:	e7ec      	b.n	4012 <mount_volume+0x25e>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    4038:	200d      	movs	r0, #13
    403a:	e7ea      	b.n	4012 <mount_volume+0x25e>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    403c:	200d      	movs	r0, #13
    403e:	e7e8      	b.n	4012 <mount_volume+0x25e>
		if (fmt == 0) return FR_NO_FILESYSTEM;
    4040:	200d      	movs	r0, #13
    4042:	e7e6      	b.n	4012 <mount_volume+0x25e>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    4044:	200d      	movs	r0, #13
    4046:	e7e4      	b.n	4012 <mount_volume+0x25e>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    4048:	200d      	movs	r0, #13
    404a:	e7e2      	b.n	4012 <mount_volume+0x25e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    404c:	200d      	movs	r0, #13
    404e:	e7e0      	b.n	4012 <mount_volume+0x25e>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    4050:	200d      	movs	r0, #13
    4052:	e7de      	b.n	4012 <mount_volume+0x25e>
    4054:	00003b0d 	.word	0x00003b0d
    4058:	20000ac4 	.word	0x20000ac4
    405c:	0000570d 	.word	0x0000570d
    4060:	00005721 	.word	0x00005721
    4064:	00003d3d 	.word	0x00003d3d
    4068:	000039e5 	.word	0x000039e5
    406c:	000039ef 	.word	0x000039ef
    4070:	0000636d 	.word	0x0000636d
    4074:	0ffffff5 	.word	0x0ffffff5
    4078:	0000fff5 	.word	0x0000fff5
    407c:	00000ff5 	.word	0x00000ff5
    4080:	000001ff 	.word	0x000001ff
    4084:	00003c09 	.word	0x00003c09
    4088:	0000022e 	.word	0x0000022e
    408c:	0000aa55 	.word	0x0000aa55
    4090:	41615252 	.word	0x41615252
    4094:	61417272 	.word	0x61417272
    4098:	20000ac8 	.word	0x20000ac8

0000409c <put_fat>:
{
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	46d6      	mov	lr, sl
    40a0:	464f      	mov	r7, r9
    40a2:	4646      	mov	r6, r8
    40a4:	b5c0      	push	{r6, r7, lr}
    40a6:	0006      	movs	r6, r0
    40a8:	000c      	movs	r4, r1
    40aa:	0017      	movs	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    40ac:	2901      	cmp	r1, #1
    40ae:	d800      	bhi.n	40b2 <put_fat+0x16>
    40b0:	e088      	b.n	41c4 <put_fat+0x128>
    40b2:	6943      	ldr	r3, [r0, #20]
    40b4:	4299      	cmp	r1, r3
    40b6:	d301      	bcc.n	40bc <put_fat+0x20>
	FRESULT res = FR_INT_ERR;
    40b8:	2502      	movs	r5, #2
    40ba:	e084      	b.n	41c6 <put_fat+0x12a>
		switch (fs->fs_type) {
    40bc:	7803      	ldrb	r3, [r0, #0]
    40be:	2b02      	cmp	r3, #2
    40c0:	d04e      	beq.n	4160 <put_fat+0xc4>
    40c2:	2b03      	cmp	r3, #3
    40c4:	d061      	beq.n	418a <put_fat+0xee>
    40c6:	2b01      	cmp	r3, #1
    40c8:	d001      	beq.n	40ce <put_fat+0x32>
	FRESULT res = FR_INT_ERR;
    40ca:	2502      	movs	r5, #2
    40cc:	e07b      	b.n	41c6 <put_fat+0x12a>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    40ce:	084b      	lsrs	r3, r1, #1
    40d0:	4698      	mov	r8, r3
    40d2:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    40d4:	4643      	mov	r3, r8
    40d6:	0a59      	lsrs	r1, r3, #9
    40d8:	6a03      	ldr	r3, [r0, #32]
    40da:	469c      	mov	ip, r3
    40dc:	4461      	add	r1, ip
    40de:	4b3d      	ldr	r3, [pc, #244]	; (41d4 <put_fat+0x138>)
    40e0:	4798      	blx	r3
    40e2:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    40e4:	d16f      	bne.n	41c6 <put_fat+0x12a>
			p = fs->win + bc++ % SS(fs);
    40e6:	2330      	movs	r3, #48	; 0x30
    40e8:	469a      	mov	sl, r3
    40ea:	44b2      	add	sl, r6
    40ec:	3b2f      	subs	r3, #47	; 0x2f
    40ee:	4443      	add	r3, r8
    40f0:	4699      	mov	r9, r3
    40f2:	4643      	mov	r3, r8
    40f4:	05db      	lsls	r3, r3, #23
    40f6:	0ddb      	lsrs	r3, r3, #23
    40f8:	4453      	add	r3, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    40fa:	2201      	movs	r2, #1
    40fc:	4014      	ands	r4, r2
    40fe:	d022      	beq.n	4146 <put_fat+0xaa>
    4100:	2100      	movs	r1, #0
    4102:	5659      	ldrsb	r1, [r3, r1]
    4104:	320e      	adds	r2, #14
    4106:	400a      	ands	r2, r1
    4108:	0139      	lsls	r1, r7, #4
    410a:	20ff      	movs	r0, #255	; 0xff
    410c:	0100      	lsls	r0, r0, #4
    410e:	4001      	ands	r1, r0
    4110:	430a      	orrs	r2, r1
    4112:	b2d2      	uxtb	r2, r2
    4114:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
    4116:	2301      	movs	r3, #1
    4118:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    411a:	464b      	mov	r3, r9
    411c:	0a59      	lsrs	r1, r3, #9
    411e:	6a33      	ldr	r3, [r6, #32]
    4120:	469c      	mov	ip, r3
    4122:	4461      	add	r1, ip
    4124:	0030      	movs	r0, r6
    4126:	4b2b      	ldr	r3, [pc, #172]	; (41d4 <put_fat+0x138>)
    4128:	4798      	blx	r3
    412a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    412c:	d14b      	bne.n	41c6 <put_fat+0x12a>
			p = fs->win + bc % SS(fs);
    412e:	464b      	mov	r3, r9
    4130:	05db      	lsls	r3, r3, #23
    4132:	0ddb      	lsrs	r3, r3, #23
    4134:	4453      	add	r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    4136:	2c00      	cmp	r4, #0
    4138:	d007      	beq.n	414a <put_fat+0xae>
    413a:	093f      	lsrs	r7, r7, #4
    413c:	b2ff      	uxtb	r7, r7
    413e:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
    4140:	2301      	movs	r3, #1
    4142:	7133      	strb	r3, [r6, #4]
			break;
    4144:	e03f      	b.n	41c6 <put_fat+0x12a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    4146:	b2fa      	uxtb	r2, r7
    4148:	e7e4      	b.n	4114 <put_fat+0x78>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    414a:	2200      	movs	r2, #0
    414c:	569a      	ldrsb	r2, [r3, r2]
    414e:	210f      	movs	r1, #15
    4150:	438a      	bics	r2, r1
    4152:	0a3f      	lsrs	r7, r7, #8
    4154:	b279      	sxtb	r1, r7
    4156:	270f      	movs	r7, #15
    4158:	400f      	ands	r7, r1
    415a:	4317      	orrs	r7, r2
    415c:	b2ff      	uxtb	r7, r7
    415e:	e7ee      	b.n	413e <put_fat+0xa2>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    4160:	0a09      	lsrs	r1, r1, #8
    4162:	6a03      	ldr	r3, [r0, #32]
    4164:	469c      	mov	ip, r3
    4166:	4461      	add	r1, ip
    4168:	4b1a      	ldr	r3, [pc, #104]	; (41d4 <put_fat+0x138>)
    416a:	4798      	blx	r3
    416c:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    416e:	d12a      	bne.n	41c6 <put_fat+0x12a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    4170:	0030      	movs	r0, r6
    4172:	3030      	adds	r0, #48	; 0x30
    4174:	0064      	lsls	r4, r4, #1
    4176:	23ff      	movs	r3, #255	; 0xff
    4178:	005b      	lsls	r3, r3, #1
    417a:	401c      	ands	r4, r3
    417c:	b2b9      	uxth	r1, r7
    417e:	1900      	adds	r0, r0, r4
    4180:	4b15      	ldr	r3, [pc, #84]	; (41d8 <put_fat+0x13c>)
    4182:	4798      	blx	r3
			fs->wflag = 1;
    4184:	2301      	movs	r3, #1
    4186:	7133      	strb	r3, [r6, #4]
			break;
    4188:	e01d      	b.n	41c6 <put_fat+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    418a:	09c9      	lsrs	r1, r1, #7
    418c:	6a03      	ldr	r3, [r0, #32]
    418e:	469c      	mov	ip, r3
    4190:	4461      	add	r1, ip
    4192:	4b10      	ldr	r3, [pc, #64]	; (41d4 <put_fat+0x138>)
    4194:	4798      	blx	r3
    4196:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    4198:	d115      	bne.n	41c6 <put_fat+0x12a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    419a:	013f      	lsls	r7, r7, #4
    419c:	093f      	lsrs	r7, r7, #4
    419e:	0033      	movs	r3, r6
    41a0:	3330      	adds	r3, #48	; 0x30
    41a2:	00a4      	lsls	r4, r4, #2
    41a4:	22fe      	movs	r2, #254	; 0xfe
    41a6:	0052      	lsls	r2, r2, #1
    41a8:	4014      	ands	r4, r2
    41aa:	191c      	adds	r4, r3, r4
    41ac:	0020      	movs	r0, r4
    41ae:	4b0b      	ldr	r3, [pc, #44]	; (41dc <put_fat+0x140>)
    41b0:	4798      	blx	r3
    41b2:	0f01      	lsrs	r1, r0, #28
    41b4:	0709      	lsls	r1, r1, #28
    41b6:	4339      	orrs	r1, r7
			st_dword(fs->win + clst * 4 % SS(fs), val);
    41b8:	0020      	movs	r0, r4
    41ba:	4b09      	ldr	r3, [pc, #36]	; (41e0 <put_fat+0x144>)
    41bc:	4798      	blx	r3
			fs->wflag = 1;
    41be:	2301      	movs	r3, #1
    41c0:	7133      	strb	r3, [r6, #4]
			break;
    41c2:	e000      	b.n	41c6 <put_fat+0x12a>
	FRESULT res = FR_INT_ERR;
    41c4:	2502      	movs	r5, #2
}
    41c6:	0028      	movs	r0, r5
    41c8:	bc1c      	pop	{r2, r3, r4}
    41ca:	4690      	mov	r8, r2
    41cc:	4699      	mov	r9, r3
    41ce:	46a2      	mov	sl, r4
    41d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	00003c09 	.word	0x00003c09
    41d8:	00003a05 	.word	0x00003a05
    41dc:	000039ef 	.word	0x000039ef
    41e0:	00003a0d 	.word	0x00003a0d

000041e4 <get_fat>:
{
    41e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41e6:	000c      	movs	r4, r1
	FATFS *fs = obj->fs;
    41e8:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    41ea:	2901      	cmp	r1, #1
    41ec:	d967      	bls.n	42be <get_fat+0xda>
    41ee:	696b      	ldr	r3, [r5, #20]
    41f0:	4299      	cmp	r1, r3
    41f2:	d266      	bcs.n	42c2 <get_fat+0xde>
		switch (fs->fs_type) {
    41f4:	782b      	ldrb	r3, [r5, #0]
    41f6:	2b02      	cmp	r3, #2
    41f8:	d033      	beq.n	4262 <get_fat+0x7e>
    41fa:	2b03      	cmp	r3, #3
    41fc:	d047      	beq.n	428e <get_fat+0xaa>
    41fe:	2b01      	cmp	r3, #1
    4200:	d001      	beq.n	4206 <get_fat+0x22>
			val = 1;	/* Internal error */
    4202:	2001      	movs	r0, #1
    4204:	e05e      	b.n	42c4 <get_fat+0xe0>
			bc = (UINT)clst; bc += bc / 2;
    4206:	084e      	lsrs	r6, r1, #1
    4208:	198e      	adds	r6, r1, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    420a:	0a71      	lsrs	r1, r6, #9
    420c:	6a2b      	ldr	r3, [r5, #32]
    420e:	469c      	mov	ip, r3
    4210:	4461      	add	r1, ip
    4212:	0028      	movs	r0, r5
    4214:	4b2c      	ldr	r3, [pc, #176]	; (42c8 <get_fat+0xe4>)
    4216:	4798      	blx	r3
    4218:	2800      	cmp	r0, #0
    421a:	d002      	beq.n	4222 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    421c:	2001      	movs	r0, #1
    421e:	4240      	negs	r0, r0
    4220:	e050      	b.n	42c4 <get_fat+0xe0>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    4222:	1c77      	adds	r7, r6, #1
    4224:	05f3      	lsls	r3, r6, #23
    4226:	0ddb      	lsrs	r3, r3, #23
    4228:	18eb      	adds	r3, r5, r3
    422a:	3330      	adds	r3, #48	; 0x30
    422c:	781e      	ldrb	r6, [r3, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    422e:	0a79      	lsrs	r1, r7, #9
    4230:	6a2b      	ldr	r3, [r5, #32]
    4232:	469c      	mov	ip, r3
    4234:	4461      	add	r1, ip
    4236:	0028      	movs	r0, r5
    4238:	4b23      	ldr	r3, [pc, #140]	; (42c8 <get_fat+0xe4>)
    423a:	4798      	blx	r3
    423c:	2800      	cmp	r0, #0
    423e:	d002      	beq.n	4246 <get_fat+0x62>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    4240:	2001      	movs	r0, #1
    4242:	4240      	negs	r0, r0
    4244:	e03e      	b.n	42c4 <get_fat+0xe0>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    4246:	05ff      	lsls	r7, r7, #23
    4248:	0dff      	lsrs	r7, r7, #23
    424a:	19ed      	adds	r5, r5, r7
    424c:	3530      	adds	r5, #48	; 0x30
    424e:	7828      	ldrb	r0, [r5, #0]
    4250:	0200      	lsls	r0, r0, #8
    4252:	4330      	orrs	r0, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    4254:	07e3      	lsls	r3, r4, #31
    4256:	d501      	bpl.n	425c <get_fat+0x78>
    4258:	0900      	lsrs	r0, r0, #4
    425a:	e033      	b.n	42c4 <get_fat+0xe0>
    425c:	0500      	lsls	r0, r0, #20
    425e:	0d00      	lsrs	r0, r0, #20
    4260:	e030      	b.n	42c4 <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    4262:	0a09      	lsrs	r1, r1, #8
    4264:	6a2b      	ldr	r3, [r5, #32]
    4266:	469c      	mov	ip, r3
    4268:	4461      	add	r1, ip
    426a:	0028      	movs	r0, r5
    426c:	4b16      	ldr	r3, [pc, #88]	; (42c8 <get_fat+0xe4>)
    426e:	4798      	blx	r3
    4270:	2800      	cmp	r0, #0
    4272:	d002      	beq.n	427a <get_fat+0x96>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    4274:	2001      	movs	r0, #1
    4276:	4240      	negs	r0, r0
    4278:	e024      	b.n	42c4 <get_fat+0xe0>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    427a:	0028      	movs	r0, r5
    427c:	3030      	adds	r0, #48	; 0x30
    427e:	0064      	lsls	r4, r4, #1
    4280:	25ff      	movs	r5, #255	; 0xff
    4282:	006d      	lsls	r5, r5, #1
    4284:	402c      	ands	r4, r5
    4286:	1900      	adds	r0, r0, r4
    4288:	4b10      	ldr	r3, [pc, #64]	; (42cc <get_fat+0xe8>)
    428a:	4798      	blx	r3
			break;
    428c:	e01a      	b.n	42c4 <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    428e:	09c9      	lsrs	r1, r1, #7
    4290:	6a2b      	ldr	r3, [r5, #32]
    4292:	469c      	mov	ip, r3
    4294:	4461      	add	r1, ip
    4296:	0028      	movs	r0, r5
    4298:	4b0b      	ldr	r3, [pc, #44]	; (42c8 <get_fat+0xe4>)
    429a:	4798      	blx	r3
    429c:	2800      	cmp	r0, #0
    429e:	d002      	beq.n	42a6 <get_fat+0xc2>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    42a0:	2001      	movs	r0, #1
    42a2:	4240      	negs	r0, r0
	return val;
    42a4:	e00e      	b.n	42c4 <get_fat+0xe0>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    42a6:	0028      	movs	r0, r5
    42a8:	3030      	adds	r0, #48	; 0x30
    42aa:	00a4      	lsls	r4, r4, #2
    42ac:	23fe      	movs	r3, #254	; 0xfe
    42ae:	005b      	lsls	r3, r3, #1
    42b0:	401c      	ands	r4, r3
    42b2:	1900      	adds	r0, r0, r4
    42b4:	4b06      	ldr	r3, [pc, #24]	; (42d0 <get_fat+0xec>)
    42b6:	4798      	blx	r3
    42b8:	0100      	lsls	r0, r0, #4
    42ba:	0900      	lsrs	r0, r0, #4
			break;
    42bc:	e002      	b.n	42c4 <get_fat+0xe0>
		val = 1;	/* Internal error */
    42be:	2001      	movs	r0, #1
    42c0:	e000      	b.n	42c4 <get_fat+0xe0>
    42c2:	2001      	movs	r0, #1
}
    42c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42c6:	46c0      	nop			; (mov r8, r8)
    42c8:	00003c09 	.word	0x00003c09
    42cc:	000039e5 	.word	0x000039e5
    42d0:	000039ef 	.word	0x000039ef

000042d4 <dir_sdi>:
{
    42d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    42d6:	46c6      	mov	lr, r8
    42d8:	b500      	push	{lr}
    42da:	0006      	movs	r6, r0
    42dc:	000c      	movs	r4, r1
	FATFS *fs = dp->obj.fs;
    42de:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    42e0:	4b26      	ldr	r3, [pc, #152]	; (437c <dir_sdi+0xa8>)
    42e2:	4299      	cmp	r1, r3
    42e4:	d903      	bls.n	42ee <dir_sdi+0x1a>
		return FR_INT_ERR;
    42e6:	2002      	movs	r0, #2
}
    42e8:	bc04      	pop	{r2}
    42ea:	4690      	mov	r8, r2
    42ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    42ee:	06cb      	lsls	r3, r1, #27
    42f0:	d001      	beq.n	42f6 <dir_sdi+0x22>
		return FR_INT_ERR;
    42f2:	2002      	movs	r0, #2
    42f4:	e7f8      	b.n	42e8 <dir_sdi+0x14>
	dp->dptr = ofs;				/* Set current offset */
    42f6:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    42f8:	6885      	ldr	r5, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    42fa:	2d00      	cmp	r5, #0
    42fc:	d103      	bne.n	4306 <dir_sdi+0x32>
    42fe:	783b      	ldrb	r3, [r7, #0]
    4300:	2b02      	cmp	r3, #2
    4302:	d900      	bls.n	4306 <dir_sdi+0x32>
		clst = (DWORD)fs->dirbase;
    4304:	6a7d      	ldr	r5, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    4306:	2d00      	cmp	r5, #0
    4308:	d10d      	bne.n	4326 <dir_sdi+0x52>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
    430a:	0963      	lsrs	r3, r4, #5
    430c:	893a      	ldrh	r2, [r7, #8]
    430e:	4293      	cmp	r3, r2
    4310:	d301      	bcc.n	4316 <dir_sdi+0x42>
    4312:	2002      	movs	r0, #2
    4314:	e7e8      	b.n	42e8 <dir_sdi+0x14>
		dp->sect = fs->dirbase;
    4316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4318:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
    431a:	6175      	str	r5, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
    431c:	69b3      	ldr	r3, [r6, #24]
    431e:	2b00      	cmp	r3, #0
    4320:	d11d      	bne.n	435e <dir_sdi+0x8a>
    4322:	2002      	movs	r0, #2
    4324:	e7e0      	b.n	42e8 <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    4326:	897b      	ldrh	r3, [r7, #10]
    4328:	025b      	lsls	r3, r3, #9
    432a:	4698      	mov	r8, r3
		while (ofs >= csz) {				/* Follow cluster chain */
    432c:	e001      	b.n	4332 <dir_sdi+0x5e>
			ofs -= csz;
    432e:	4643      	mov	r3, r8
    4330:	1ae4      	subs	r4, r4, r3
		while (ofs >= csz) {				/* Follow cluster chain */
    4332:	4544      	cmp	r4, r8
    4334:	d30d      	bcc.n	4352 <dir_sdi+0x7e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    4336:	0029      	movs	r1, r5
    4338:	0030      	movs	r0, r6
    433a:	4b11      	ldr	r3, [pc, #68]	; (4380 <dir_sdi+0xac>)
    433c:	4798      	blx	r3
    433e:	0005      	movs	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4340:	1c43      	adds	r3, r0, #1
    4342:	d016      	beq.n	4372 <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    4344:	2801      	cmp	r0, #1
    4346:	d916      	bls.n	4376 <dir_sdi+0xa2>
    4348:	697b      	ldr	r3, [r7, #20]
    434a:	4298      	cmp	r0, r3
    434c:	d3ef      	bcc.n	432e <dir_sdi+0x5a>
    434e:	2002      	movs	r0, #2
    4350:	e7ca      	b.n	42e8 <dir_sdi+0x14>
		dp->sect = clst2sect(fs, clst);
    4352:	0029      	movs	r1, r5
    4354:	0038      	movs	r0, r7
    4356:	4b0b      	ldr	r3, [pc, #44]	; (4384 <dir_sdi+0xb0>)
    4358:	4798      	blx	r3
    435a:	61b0      	str	r0, [r6, #24]
    435c:	e7dd      	b.n	431a <dir_sdi+0x46>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
    435e:	0a62      	lsrs	r2, r4, #9
    4360:	189b      	adds	r3, r3, r2
    4362:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    4364:	3730      	adds	r7, #48	; 0x30
    4366:	05e4      	lsls	r4, r4, #23
    4368:	0de4      	lsrs	r4, r4, #23
    436a:	193c      	adds	r4, r7, r4
    436c:	61f4      	str	r4, [r6, #28]
	return FR_OK;
    436e:	2000      	movs	r0, #0
    4370:	e7ba      	b.n	42e8 <dir_sdi+0x14>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4372:	2001      	movs	r0, #1
    4374:	e7b8      	b.n	42e8 <dir_sdi+0x14>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    4376:	2002      	movs	r0, #2
    4378:	e7b6      	b.n	42e8 <dir_sdi+0x14>
    437a:	46c0      	nop			; (mov r8, r8)
    437c:	001fffff 	.word	0x001fffff
    4380:	000041e5 	.word	0x000041e5
    4384:	00003a25 	.word	0x00003a25

00004388 <create_chain>:
{
    4388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    438a:	46ce      	mov	lr, r9
    438c:	4647      	mov	r7, r8
    438e:	b580      	push	{r7, lr}
    4390:	0006      	movs	r6, r0
    4392:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
    4394:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
    4396:	2900      	cmp	r1, #0
    4398:	d107      	bne.n	43aa <create_chain+0x22>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    439a:	68fd      	ldr	r5, [r7, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    439c:	2d00      	cmp	r5, #0
    439e:	d010      	beq.n	43c2 <create_chain+0x3a>
    43a0:	697b      	ldr	r3, [r7, #20]
    43a2:	429d      	cmp	r5, r3
    43a4:	d30e      	bcc.n	43c4 <create_chain+0x3c>
    43a6:	2501      	movs	r5, #1
    43a8:	e00c      	b.n	43c4 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
    43aa:	4b40      	ldr	r3, [pc, #256]	; (44ac <create_chain+0x124>)
    43ac:	4798      	blx	r3
		if (cs < 2) return 1;				/* Test for insanity */
    43ae:	2801      	cmp	r0, #1
    43b0:	d800      	bhi.n	43b4 <create_chain+0x2c>
    43b2:	e074      	b.n	449e <create_chain+0x116>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    43b4:	1c43      	adds	r3, r0, #1
    43b6:	d062      	beq.n	447e <create_chain+0xf6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    43b8:	697b      	ldr	r3, [r7, #20]
    43ba:	4298      	cmp	r0, r3
    43bc:	d35f      	bcc.n	447e <create_chain+0xf6>
		scl = clst;							/* Cluster to start to find */
    43be:	4645      	mov	r5, r8
    43c0:	e000      	b.n	43c4 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    43c2:	2501      	movs	r5, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    43c4:	6938      	ldr	r0, [r7, #16]
    43c6:	2800      	cmp	r0, #0
    43c8:	d059      	beq.n	447e <create_chain+0xf6>
		if (scl == clst) {						/* Stretching an existing chain? */
    43ca:	4545      	cmp	r5, r8
    43cc:	d006      	beq.n	43dc <create_chain+0x54>
		ncl = 0;
    43ce:	2300      	movs	r3, #0
    43d0:	4699      	mov	r9, r3
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    43d2:	464b      	mov	r3, r9
    43d4:	2b00      	cmp	r3, #0
    43d6:	d137      	bne.n	4448 <create_chain+0xc0>
    43d8:	002c      	movs	r4, r5
    43da:	e02c      	b.n	4436 <create_chain+0xae>
			ncl = scl + 1;						/* Test if next cluster is free */
    43dc:	1c6b      	adds	r3, r5, #1
    43de:	4699      	mov	r9, r3
			if (ncl >= fs->n_fatent) ncl = 2;
    43e0:	697b      	ldr	r3, [r7, #20]
    43e2:	4599      	cmp	r9, r3
    43e4:	d301      	bcc.n	43ea <create_chain+0x62>
    43e6:	2302      	movs	r3, #2
    43e8:	4699      	mov	r9, r3
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    43ea:	4649      	mov	r1, r9
    43ec:	0030      	movs	r0, r6
    43ee:	4b2f      	ldr	r3, [pc, #188]	; (44ac <create_chain+0x124>)
    43f0:	4798      	blx	r3
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    43f2:	2801      	cmp	r0, #1
    43f4:	d043      	beq.n	447e <create_chain+0xf6>
    43f6:	1c43      	adds	r3, r0, #1
    43f8:	d041      	beq.n	447e <create_chain+0xf6>
			if (cs != 0) {						/* Not free? */
    43fa:	2800      	cmp	r0, #0
    43fc:	d0e9      	beq.n	43d2 <create_chain+0x4a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    43fe:	68fb      	ldr	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    4400:	2b01      	cmp	r3, #1
    4402:	d905      	bls.n	4410 <create_chain+0x88>
    4404:	697a      	ldr	r2, [r7, #20]
    4406:	4293      	cmp	r3, r2
    4408:	d305      	bcc.n	4416 <create_chain+0x8e>
				ncl = 0;
    440a:	2300      	movs	r3, #0
    440c:	4699      	mov	r9, r3
    440e:	e7e0      	b.n	43d2 <create_chain+0x4a>
    4410:	2300      	movs	r3, #0
    4412:	4699      	mov	r9, r3
    4414:	e7dd      	b.n	43d2 <create_chain+0x4a>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    4416:	001d      	movs	r5, r3
				ncl = 0;
    4418:	2300      	movs	r3, #0
    441a:	4699      	mov	r9, r3
    441c:	e7d9      	b.n	43d2 <create_chain+0x4a>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    441e:	0021      	movs	r1, r4
    4420:	0030      	movs	r0, r6
    4422:	4b22      	ldr	r3, [pc, #136]	; (44ac <create_chain+0x124>)
    4424:	4798      	blx	r3
				if (cs == 0) break;				/* Found a free cluster? */
    4426:	2800      	cmp	r0, #0
    4428:	d00d      	beq.n	4446 <create_chain+0xbe>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    442a:	2801      	cmp	r0, #1
    442c:	d027      	beq.n	447e <create_chain+0xf6>
    442e:	1c43      	adds	r3, r0, #1
    4430:	d025      	beq.n	447e <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
    4432:	42ac      	cmp	r4, r5
    4434:	d037      	beq.n	44a6 <create_chain+0x11e>
				ncl++;							/* Next cluster */
    4436:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    4438:	697b      	ldr	r3, [r7, #20]
    443a:	429c      	cmp	r4, r3
    443c:	d3ef      	bcc.n	441e <create_chain+0x96>
					if (ncl > scl) return 0;	/* No free cluster found? */
    443e:	2d01      	cmp	r5, #1
    4440:	d92f      	bls.n	44a2 <create_chain+0x11a>
					ncl = 2;
    4442:	2402      	movs	r4, #2
    4444:	e7eb      	b.n	441e <create_chain+0x96>
    4446:	46a1      	mov	r9, r4
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    4448:	2201      	movs	r2, #1
    444a:	4252      	negs	r2, r2
    444c:	4649      	mov	r1, r9
    444e:	0038      	movs	r0, r7
    4450:	4b17      	ldr	r3, [pc, #92]	; (44b0 <create_chain+0x128>)
    4452:	4798      	blx	r3
		if (res == FR_OK && clst != 0) {
    4454:	2800      	cmp	r0, #0
    4456:	d102      	bne.n	445e <create_chain+0xd6>
    4458:	4643      	mov	r3, r8
    445a:	2b00      	cmp	r3, #0
    445c:	d113      	bne.n	4486 <create_chain+0xfe>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    445e:	2800      	cmp	r0, #0
    4460:	d117      	bne.n	4492 <create_chain+0x10a>
		fs->last_clst = ncl;
    4462:	464b      	mov	r3, r9
    4464:	60fb      	str	r3, [r7, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    4466:	693a      	ldr	r2, [r7, #16]
    4468:	697b      	ldr	r3, [r7, #20]
    446a:	3b02      	subs	r3, #2
    446c:	429a      	cmp	r2, r3
    446e:	d801      	bhi.n	4474 <create_chain+0xec>
    4470:	3a01      	subs	r2, #1
    4472:	613a      	str	r2, [r7, #16]
		fs->fsi_flag |= 1;
    4474:	797b      	ldrb	r3, [r7, #5]
    4476:	2201      	movs	r2, #1
    4478:	4313      	orrs	r3, r2
    447a:	717b      	strb	r3, [r7, #5]
    447c:	4648      	mov	r0, r9
}
    447e:	bc0c      	pop	{r2, r3}
    4480:	4690      	mov	r8, r2
    4482:	4699      	mov	r9, r3
    4484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    4486:	464a      	mov	r2, r9
    4488:	4641      	mov	r1, r8
    448a:	0038      	movs	r0, r7
    448c:	4b08      	ldr	r3, [pc, #32]	; (44b0 <create_chain+0x128>)
    448e:	4798      	blx	r3
    4490:	e7e5      	b.n	445e <create_chain+0xd6>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    4492:	2801      	cmp	r0, #1
    4494:	d001      	beq.n	449a <create_chain+0x112>
    4496:	2001      	movs	r0, #1
    4498:	e7f1      	b.n	447e <create_chain+0xf6>
    449a:	3802      	subs	r0, #2
    449c:	e7ef      	b.n	447e <create_chain+0xf6>
		if (cs < 2) return 1;				/* Test for insanity */
    449e:	2001      	movs	r0, #1
    44a0:	e7ed      	b.n	447e <create_chain+0xf6>
					if (ncl > scl) return 0;	/* No free cluster found? */
    44a2:	4648      	mov	r0, r9
    44a4:	e7eb      	b.n	447e <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
    44a6:	4648      	mov	r0, r9
    44a8:	e7e9      	b.n	447e <create_chain+0xf6>
    44aa:	46c0      	nop			; (mov r8, r8)
    44ac:	000041e5 	.word	0x000041e5
    44b0:	0000409d 	.word	0x0000409d

000044b4 <remove_chain>:
{
    44b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44b6:	0007      	movs	r7, r0
    44b8:	000c      	movs	r4, r1
    44ba:	0011      	movs	r1, r2
	FATFS *fs = obj->fs;
    44bc:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    44be:	2c01      	cmp	r4, #1
    44c0:	d92e      	bls.n	4520 <remove_chain+0x6c>
    44c2:	696b      	ldr	r3, [r5, #20]
    44c4:	429c      	cmp	r4, r3
    44c6:	d301      	bcc.n	44cc <remove_chain+0x18>
    44c8:	2002      	movs	r0, #2
    44ca:	e02a      	b.n	4522 <remove_chain+0x6e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    44cc:	2a00      	cmp	r2, #0
    44ce:	d00a      	beq.n	44e6 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    44d0:	2201      	movs	r2, #1
    44d2:	4252      	negs	r2, r2
    44d4:	0028      	movs	r0, r5
    44d6:	4b16      	ldr	r3, [pc, #88]	; (4530 <remove_chain+0x7c>)
    44d8:	4798      	blx	r3
		if (res != FR_OK) return res;
    44da:	2800      	cmp	r0, #0
    44dc:	d003      	beq.n	44e6 <remove_chain+0x32>
    44de:	e020      	b.n	4522 <remove_chain+0x6e>
		clst = nxt;					/* Next cluster */
    44e0:	0034      	movs	r4, r6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    44e2:	4296      	cmp	r6, r2
    44e4:	d21d      	bcs.n	4522 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
    44e6:	0021      	movs	r1, r4
    44e8:	0038      	movs	r0, r7
    44ea:	4b12      	ldr	r3, [pc, #72]	; (4534 <remove_chain+0x80>)
    44ec:	4798      	blx	r3
    44ee:	1e06      	subs	r6, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
    44f0:	d018      	beq.n	4524 <remove_chain+0x70>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    44f2:	2801      	cmp	r0, #1
    44f4:	d018      	beq.n	4528 <remove_chain+0x74>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    44f6:	1c43      	adds	r3, r0, #1
    44f8:	d018      	beq.n	452c <remove_chain+0x78>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    44fa:	2200      	movs	r2, #0
    44fc:	0021      	movs	r1, r4
    44fe:	0028      	movs	r0, r5
    4500:	4b0b      	ldr	r3, [pc, #44]	; (4530 <remove_chain+0x7c>)
    4502:	4798      	blx	r3
			if (res != FR_OK) return res;
    4504:	2800      	cmp	r0, #0
    4506:	d10c      	bne.n	4522 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    4508:	692b      	ldr	r3, [r5, #16]
    450a:	696a      	ldr	r2, [r5, #20]
    450c:	1e91      	subs	r1, r2, #2
    450e:	428b      	cmp	r3, r1
    4510:	d2e6      	bcs.n	44e0 <remove_chain+0x2c>
			fs->free_clst++;
    4512:	3301      	adds	r3, #1
    4514:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    4516:	796b      	ldrb	r3, [r5, #5]
    4518:	2101      	movs	r1, #1
    451a:	430b      	orrs	r3, r1
    451c:	716b      	strb	r3, [r5, #5]
    451e:	e7df      	b.n	44e0 <remove_chain+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    4520:	2002      	movs	r0, #2
}
    4522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
    4524:	2000      	movs	r0, #0
    4526:	e7fc      	b.n	4522 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    4528:	2002      	movs	r0, #2
    452a:	e7fa      	b.n	4522 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    452c:	2001      	movs	r0, #1
    452e:	e7f8      	b.n	4522 <remove_chain+0x6e>
    4530:	0000409d 	.word	0x0000409d
    4534:	000041e5 	.word	0x000041e5

00004538 <dir_clear>:
{
    4538:	b5f0      	push	{r4, r5, r6, r7, lr}
    453a:	b083      	sub	sp, #12
    453c:	0006      	movs	r6, r0
    453e:	000c      	movs	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    4540:	4b15      	ldr	r3, [pc, #84]	; (4598 <dir_clear+0x60>)
    4542:	4798      	blx	r3
    4544:	2800      	cmp	r0, #0
    4546:	d002      	beq.n	454e <dir_clear+0x16>
    4548:	2001      	movs	r0, #1
}
    454a:	b003      	add	sp, #12
    454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
    454e:	0021      	movs	r1, r4
    4550:	0030      	movs	r0, r6
    4552:	4b12      	ldr	r3, [pc, #72]	; (459c <dir_clear+0x64>)
    4554:	4798      	blx	r3
    4556:	0007      	movs	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
    4558:	62f0      	str	r0, [r6, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    455a:	2330      	movs	r3, #48	; 0x30
    455c:	469c      	mov	ip, r3
    455e:	44b4      	add	ip, r6
    4560:	4663      	mov	r3, ip
    4562:	9301      	str	r3, [sp, #4]
    4564:	2280      	movs	r2, #128	; 0x80
    4566:	0092      	lsls	r2, r2, #2
    4568:	2100      	movs	r1, #0
    456a:	4660      	mov	r0, ip
    456c:	4b0c      	ldr	r3, [pc, #48]	; (45a0 <dir_clear+0x68>)
    456e:	4798      	blx	r3
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    4570:	2400      	movs	r4, #0
    4572:	e000      	b.n	4576 <dir_clear+0x3e>
    4574:	3401      	adds	r4, #1
    4576:	8973      	ldrh	r3, [r6, #10]
    4578:	429c      	cmp	r4, r3
    457a:	d207      	bcs.n	458c <dir_clear+0x54>
    457c:	19e2      	adds	r2, r4, r7
    457e:	7870      	ldrb	r0, [r6, #1]
    4580:	2301      	movs	r3, #1
    4582:	9901      	ldr	r1, [sp, #4]
    4584:	4d07      	ldr	r5, [pc, #28]	; (45a4 <dir_clear+0x6c>)
    4586:	47a8      	blx	r5
    4588:	2800      	cmp	r0, #0
    458a:	d0f3      	beq.n	4574 <dir_clear+0x3c>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
    458c:	8970      	ldrh	r0, [r6, #10]
    458e:	1a24      	subs	r4, r4, r0
    4590:	1e60      	subs	r0, r4, #1
    4592:	4184      	sbcs	r4, r0
    4594:	b2e0      	uxtb	r0, r4
    4596:	e7d8      	b.n	454a <dir_clear+0x12>
    4598:	00003bb1 	.word	0x00003bb1
    459c:	00003a25 	.word	0x00003a25
    45a0:	000088d9 	.word	0x000088d9
    45a4:	000058c5 	.word	0x000058c5

000045a8 <dir_next>:
{
    45a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    45aa:	46ce      	mov	lr, r9
    45ac:	b500      	push	{lr}
    45ae:	b082      	sub	sp, #8
    45b0:	0004      	movs	r4, r0
    45b2:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
    45b4:	6807      	ldr	r7, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    45b6:	6905      	ldr	r5, [r0, #16]
    45b8:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    45ba:	4b2f      	ldr	r3, [pc, #188]	; (4678 <dir_next+0xd0>)
    45bc:	429d      	cmp	r5, r3
    45be:	d901      	bls.n	45c4 <dir_next+0x1c>
    45c0:	2300      	movs	r3, #0
    45c2:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    45c4:	69a3      	ldr	r3, [r4, #24]
    45c6:	2b00      	cmp	r3, #0
    45c8:	d104      	bne.n	45d4 <dir_next+0x2c>
    45ca:	2004      	movs	r0, #4
}
    45cc:	b002      	add	sp, #8
    45ce:	bc04      	pop	{r2}
    45d0:	4691      	mov	r9, r2
    45d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    45d4:	05ee      	lsls	r6, r5, #23
    45d6:	0df6      	lsrs	r6, r6, #23
    45d8:	d111      	bne.n	45fe <dir_next+0x56>
		dp->sect++;				/* Next sector */
    45da:	3301      	adds	r3, #1
    45dc:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    45de:	6961      	ldr	r1, [r4, #20]
    45e0:	2900      	cmp	r1, #0
    45e2:	d107      	bne.n	45f4 <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    45e4:	096b      	lsrs	r3, r5, #5
    45e6:	893a      	ldrh	r2, [r7, #8]
    45e8:	4293      	cmp	r3, r2
    45ea:	d308      	bcc.n	45fe <dir_next+0x56>
				dp->sect = 0; return FR_NO_FILE;
    45ec:	2300      	movs	r3, #0
    45ee:	61a3      	str	r3, [r4, #24]
    45f0:	2004      	movs	r0, #4
    45f2:	e7eb      	b.n	45cc <dir_next+0x24>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    45f4:	0a6b      	lsrs	r3, r5, #9
    45f6:	897a      	ldrh	r2, [r7, #10]
    45f8:	3a01      	subs	r2, #1
    45fa:	421a      	tst	r2, r3
    45fc:	d005      	beq.n	460a <dir_next+0x62>
	dp->dptr = ofs;						/* Current entry */
    45fe:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    4600:	3730      	adds	r7, #48	; 0x30
    4602:	19bf      	adds	r7, r7, r6
    4604:	61e7      	str	r7, [r4, #28]
	return FR_OK;
    4606:	2000      	movs	r0, #0
    4608:	e7e0      	b.n	45cc <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    460a:	0020      	movs	r0, r4
    460c:	4b1b      	ldr	r3, [pc, #108]	; (467c <dir_next+0xd4>)
    460e:	4798      	blx	r3
    4610:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    4612:	0003      	movs	r3, r0
    4614:	2801      	cmp	r0, #1
    4616:	d925      	bls.n	4664 <dir_next+0xbc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4618:	3301      	adds	r3, #1
    461a:	d025      	beq.n	4668 <dir_next+0xc0>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    461c:	697b      	ldr	r3, [r7, #20]
    461e:	4298      	cmp	r0, r3
    4620:	d318      	bcc.n	4654 <dir_next+0xac>
					if (!stretch) {								/* If no stretch, report EOT */
    4622:	9b01      	ldr	r3, [sp, #4]
    4624:	2b00      	cmp	r3, #0
    4626:	d102      	bne.n	462e <dir_next+0x86>
						dp->sect = 0; return FR_NO_FILE;
    4628:	61a3      	str	r3, [r4, #24]
    462a:	2004      	movs	r0, #4
    462c:	e7ce      	b.n	45cc <dir_next+0x24>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    462e:	6961      	ldr	r1, [r4, #20]
    4630:	0020      	movs	r0, r4
    4632:	4b13      	ldr	r3, [pc, #76]	; (4680 <dir_next+0xd8>)
    4634:	4798      	blx	r3
    4636:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    4638:	1e03      	subs	r3, r0, #0
    463a:	d101      	bne.n	4640 <dir_next+0x98>
    463c:	2007      	movs	r0, #7
    463e:	e7c5      	b.n	45cc <dir_next+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    4640:	2801      	cmp	r0, #1
    4642:	d013      	beq.n	466c <dir_next+0xc4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4644:	3301      	adds	r3, #1
    4646:	d013      	beq.n	4670 <dir_next+0xc8>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    4648:	0001      	movs	r1, r0
    464a:	0038      	movs	r0, r7
    464c:	4b0d      	ldr	r3, [pc, #52]	; (4684 <dir_next+0xdc>)
    464e:	4798      	blx	r3
    4650:	2800      	cmp	r0, #0
    4652:	d10f      	bne.n	4674 <dir_next+0xcc>
				dp->clust = clst;		/* Initialize data for new cluster */
    4654:	464b      	mov	r3, r9
    4656:	6163      	str	r3, [r4, #20]
				dp->sect = clst2sect(fs, clst);
    4658:	4649      	mov	r1, r9
    465a:	0038      	movs	r0, r7
    465c:	4b0a      	ldr	r3, [pc, #40]	; (4688 <dir_next+0xe0>)
    465e:	4798      	blx	r3
    4660:	61a0      	str	r0, [r4, #24]
    4662:	e7cc      	b.n	45fe <dir_next+0x56>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    4664:	2002      	movs	r0, #2
    4666:	e7b1      	b.n	45cc <dir_next+0x24>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4668:	2001      	movs	r0, #1
    466a:	e7af      	b.n	45cc <dir_next+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    466c:	2002      	movs	r0, #2
    466e:	e7ad      	b.n	45cc <dir_next+0x24>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4670:	2001      	movs	r0, #1
    4672:	e7ab      	b.n	45cc <dir_next+0x24>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    4674:	2001      	movs	r0, #1
    4676:	e7a9      	b.n	45cc <dir_next+0x24>
    4678:	001fffff 	.word	0x001fffff
    467c:	000041e5 	.word	0x000041e5
    4680:	00004389 	.word	0x00004389
    4684:	00004539 	.word	0x00004539
    4688:	00003a25 	.word	0x00003a25

0000468c <dir_find>:
{
    468c:	b570      	push	{r4, r5, r6, lr}
    468e:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
    4690:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    4692:	2100      	movs	r1, #0
    4694:	4b13      	ldr	r3, [pc, #76]	; (46e4 <dir_find+0x58>)
    4696:	4798      	blx	r3
    4698:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
    469a:	d007      	beq.n	46ac <dir_find+0x20>
}
    469c:	0020      	movs	r0, r4
    469e:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
    46a0:	2100      	movs	r1, #0
    46a2:	0028      	movs	r0, r5
    46a4:	4b10      	ldr	r3, [pc, #64]	; (46e8 <dir_find+0x5c>)
    46a6:	4798      	blx	r3
    46a8:	1e04      	subs	r4, r0, #0
	} while (res == FR_OK);
    46aa:	d1f7      	bne.n	469c <dir_find+0x10>
		res = move_window(fs, dp->sect);
    46ac:	69a9      	ldr	r1, [r5, #24]
    46ae:	0030      	movs	r0, r6
    46b0:	4b0e      	ldr	r3, [pc, #56]	; (46ec <dir_find+0x60>)
    46b2:	4798      	blx	r3
    46b4:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    46b6:	d1f1      	bne.n	469c <dir_find+0x10>
		c = dp->dir[DIR_Name];
    46b8:	69e8      	ldr	r0, [r5, #28]
    46ba:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    46bc:	2b00      	cmp	r3, #0
    46be:	d00e      	beq.n	46de <dir_find+0x52>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    46c0:	7ac2      	ldrb	r2, [r0, #11]
    46c2:	233f      	movs	r3, #63	; 0x3f
    46c4:	4013      	ands	r3, r2
    46c6:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    46c8:	7ac3      	ldrb	r3, [r0, #11]
    46ca:	071b      	lsls	r3, r3, #28
    46cc:	d4e8      	bmi.n	46a0 <dir_find+0x14>
    46ce:	0029      	movs	r1, r5
    46d0:	3120      	adds	r1, #32
    46d2:	220b      	movs	r2, #11
    46d4:	4b06      	ldr	r3, [pc, #24]	; (46f0 <dir_find+0x64>)
    46d6:	4798      	blx	r3
    46d8:	2800      	cmp	r0, #0
    46da:	d1e1      	bne.n	46a0 <dir_find+0x14>
    46dc:	e7de      	b.n	469c <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    46de:	2404      	movs	r4, #4
    46e0:	e7dc      	b.n	469c <dir_find+0x10>
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	000042d5 	.word	0x000042d5
    46e8:	000045a9 	.word	0x000045a9
    46ec:	00003c09 	.word	0x00003c09
    46f0:	00008809 	.word	0x00008809

000046f4 <dir_alloc>:
{
    46f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46f6:	0005      	movs	r5, r0
    46f8:	000e      	movs	r6, r1
	FATFS *fs = dp->obj.fs;
    46fa:	6804      	ldr	r4, [r0, #0]
	res = dir_sdi(dp, 0);
    46fc:	2100      	movs	r1, #0
    46fe:	4b11      	ldr	r3, [pc, #68]	; (4744 <dir_alloc+0x50>)
    4700:	4798      	blx	r3
	if (res == FR_OK) {
    4702:	2800      	cmp	r0, #0
    4704:	d118      	bne.n	4738 <dir_alloc+0x44>
    4706:	2700      	movs	r7, #0
    4708:	e008      	b.n	471c <dir_alloc+0x28>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
    470a:	3701      	adds	r7, #1
    470c:	42b7      	cmp	r7, r6
    470e:	d013      	beq.n	4738 <dir_alloc+0x44>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
    4710:	2101      	movs	r1, #1
    4712:	0028      	movs	r0, r5
    4714:	4b0c      	ldr	r3, [pc, #48]	; (4748 <dir_alloc+0x54>)
    4716:	4798      	blx	r3
		} while (res == FR_OK);
    4718:	2800      	cmp	r0, #0
    471a:	d10d      	bne.n	4738 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
    471c:	69a9      	ldr	r1, [r5, #24]
    471e:	0020      	movs	r0, r4
    4720:	4b0a      	ldr	r3, [pc, #40]	; (474c <dir_alloc+0x58>)
    4722:	4798      	blx	r3
			if (res != FR_OK) break;
    4724:	2800      	cmp	r0, #0
    4726:	d107      	bne.n	4738 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    4728:	69eb      	ldr	r3, [r5, #28]
    472a:	781b      	ldrb	r3, [r3, #0]
    472c:	2be5      	cmp	r3, #229	; 0xe5
    472e:	d0ec      	beq.n	470a <dir_alloc+0x16>
    4730:	2b00      	cmp	r3, #0
    4732:	d0ea      	beq.n	470a <dir_alloc+0x16>
				n = 0;				/* Not a free entry, restart to search */
    4734:	2700      	movs	r7, #0
    4736:	e7eb      	b.n	4710 <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    4738:	2804      	cmp	r0, #4
    473a:	d000      	beq.n	473e <dir_alloc+0x4a>
}
    473c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    473e:	3003      	adds	r0, #3
    4740:	e7fc      	b.n	473c <dir_alloc+0x48>
    4742:	46c0      	nop			; (mov r8, r8)
    4744:	000042d5 	.word	0x000042d5
    4748:	000045a9 	.word	0x000045a9
    474c:	00003c09 	.word	0x00003c09

00004750 <dir_read>:
{
    4750:	b570      	push	{r4, r5, r6, lr}
    4752:	0005      	movs	r5, r0
    4754:	000e      	movs	r6, r1
	FATFS *fs = dp->obj.fs;
    4756:	6804      	ldr	r4, [r0, #0]
	FRESULT res = FR_NO_FILE;
    4758:	2004      	movs	r0, #4
	while (dp->sect) {
    475a:	e005      	b.n	4768 <dir_read+0x18>
		res = dir_next(dp, 0);		/* Next entry */
    475c:	2100      	movs	r1, #0
    475e:	0028      	movs	r0, r5
    4760:	4b13      	ldr	r3, [pc, #76]	; (47b0 <dir_read+0x60>)
    4762:	4798      	blx	r3
		if (res != FR_OK) break;
    4764:	2800      	cmp	r0, #0
    4766:	d11e      	bne.n	47a6 <dir_read+0x56>
	while (dp->sect) {
    4768:	69a9      	ldr	r1, [r5, #24]
    476a:	2900      	cmp	r1, #0
    476c:	d01b      	beq.n	47a6 <dir_read+0x56>
		res = move_window(fs, dp->sect);
    476e:	0020      	movs	r0, r4
    4770:	4b10      	ldr	r3, [pc, #64]	; (47b4 <dir_read+0x64>)
    4772:	4798      	blx	r3
		if (res != FR_OK) break;
    4774:	2800      	cmp	r0, #0
    4776:	d116      	bne.n	47a6 <dir_read+0x56>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
    4778:	69eb      	ldr	r3, [r5, #28]
    477a:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
    477c:	2a00      	cmp	r2, #0
    477e:	d011      	beq.n	47a4 <dir_read+0x54>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    4780:	7ad9      	ldrb	r1, [r3, #11]
    4782:	233f      	movs	r3, #63	; 0x3f
    4784:	400b      	ands	r3, r1
    4786:	71ab      	strb	r3, [r5, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    4788:	2ae5      	cmp	r2, #229	; 0xe5
    478a:	d0e7      	beq.n	475c <dir_read+0xc>
    478c:	2a2e      	cmp	r2, #46	; 0x2e
    478e:	d0e5      	beq.n	475c <dir_read+0xc>
    4790:	2b0f      	cmp	r3, #15
    4792:	d0e3      	beq.n	475c <dir_read+0xc>
    4794:	2220      	movs	r2, #32
    4796:	4393      	bics	r3, r2
    4798:	3b08      	subs	r3, #8
    479a:	425a      	negs	r2, r3
    479c:	4153      	adcs	r3, r2
    479e:	42b3      	cmp	r3, r6
    47a0:	d1dc      	bne.n	475c <dir_read+0xc>
    47a2:	e000      	b.n	47a6 <dir_read+0x56>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
    47a4:	2004      	movs	r0, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    47a6:	2800      	cmp	r0, #0
    47a8:	d001      	beq.n	47ae <dir_read+0x5e>
    47aa:	2300      	movs	r3, #0
    47ac:	61ab      	str	r3, [r5, #24]
}
    47ae:	bd70      	pop	{r4, r5, r6, pc}
    47b0:	000045a9 	.word	0x000045a9
    47b4:	00003c09 	.word	0x00003c09

000047b8 <create_name>:
{
    47b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    47ba:	46de      	mov	lr, fp
    47bc:	4657      	mov	r7, sl
    47be:	464e      	mov	r6, r9
    47c0:	4645      	mov	r5, r8
    47c2:	b5e0      	push	{r5, r6, r7, lr}
    47c4:	b083      	sub	sp, #12
    47c6:	9001      	str	r0, [sp, #4]
    47c8:	468a      	mov	sl, r1
	p = *path; sfn = dp->fn;
    47ca:	680b      	ldr	r3, [r1, #0]
    47cc:	4698      	mov	r8, r3
    47ce:	0003      	movs	r3, r0
    47d0:	2220      	movs	r2, #32
    47d2:	4694      	mov	ip, r2
    47d4:	4463      	add	r3, ip
    47d6:	469b      	mov	fp, r3
	memset(sfn, ' ', 11);
    47d8:	3a15      	subs	r2, #21
    47da:	2120      	movs	r1, #32
    47dc:	0018      	movs	r0, r3
    47de:	4b42      	ldr	r3, [pc, #264]	; (48e8 <create_name+0x130>)
    47e0:	4798      	blx	r3
	si = i = 0; ni = 8;
    47e2:	2700      	movs	r7, #0
    47e4:	2600      	movs	r6, #0
    47e6:	2308      	movs	r3, #8
    47e8:	4699      	mov	r9, r3
		c = (BYTE)p[si++];				/* Get a byte */
    47ea:	1c75      	adds	r5, r6, #1
    47ec:	4643      	mov	r3, r8
    47ee:	5d9c      	ldrb	r4, [r3, r6]
		if (c <= ' ') break; 			/* Break if end of the path name */
    47f0:	2c20      	cmp	r4, #32
    47f2:	d91b      	bls.n	482c <create_name+0x74>
		if (IsSeparator(c)) {			/* Break if a separator is found */
    47f4:	2c2f      	cmp	r4, #47	; 0x2f
    47f6:	d013      	beq.n	4820 <create_name+0x68>
    47f8:	2c5c      	cmp	r4, #92	; 0x5c
    47fa:	d011      	beq.n	4820 <create_name+0x68>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    47fc:	2c2e      	cmp	r4, #46	; 0x2e
    47fe:	d001      	beq.n	4804 <create_name+0x4c>
    4800:	45b9      	cmp	r9, r7
    4802:	d81f      	bhi.n	4844 <create_name+0x8c>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    4804:	464b      	mov	r3, r9
    4806:	2b0b      	cmp	r3, #11
    4808:	d066      	beq.n	48d8 <create_name+0x120>
    480a:	2c2e      	cmp	r4, #46	; 0x2e
    480c:	d015      	beq.n	483a <create_name+0x82>
    480e:	2006      	movs	r0, #6
}
    4810:	b003      	add	sp, #12
    4812:	bc3c      	pop	{r2, r3, r4, r5}
    4814:	4690      	mov	r8, r2
    4816:	4699      	mov	r9, r3
    4818:	46a2      	mov	sl, r4
    481a:	46ab      	mov	fp, r5
    481c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
    481e:	3501      	adds	r5, #1
    4820:	4643      	mov	r3, r8
    4822:	5d5b      	ldrb	r3, [r3, r5]
    4824:	2b2f      	cmp	r3, #47	; 0x2f
    4826:	d0fa      	beq.n	481e <create_name+0x66>
    4828:	2b5c      	cmp	r3, #92	; 0x5c
    482a:	d0f8      	beq.n	481e <create_name+0x66>
	*path = &p[si];						/* Return pointer to the next segment */
    482c:	4445      	add	r5, r8
    482e:	4653      	mov	r3, sl
    4830:	601d      	str	r5, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    4832:	2f00      	cmp	r7, #0
    4834:	d137      	bne.n	48a6 <create_name+0xee>
    4836:	2006      	movs	r0, #6
    4838:	e7ea      	b.n	4810 <create_name+0x58>
		c = (BYTE)p[si++];				/* Get a byte */
    483a:	002e      	movs	r6, r5
			i = 8; ni = 11;				/* Enter file extension field */
    483c:	2708      	movs	r7, #8
    483e:	230b      	movs	r3, #11
    4840:	4699      	mov	r9, r3
    4842:	e7d2      	b.n	47ea <create_name+0x32>
		if (c >= 0x80) {				/* Is SBC extended character? */
    4844:	b263      	sxtb	r3, r4
    4846:	2b00      	cmp	r3, #0
    4848:	db16      	blt.n	4878 <create_name+0xc0>
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
    484a:	0020      	movs	r0, r4
    484c:	4b27      	ldr	r3, [pc, #156]	; (48ec <create_name+0x134>)
    484e:	4798      	blx	r3
    4850:	2800      	cmp	r0, #0
    4852:	d016      	beq.n	4882 <create_name+0xca>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    4854:	3602      	adds	r6, #2
    4856:	4643      	mov	r3, r8
    4858:	5d5d      	ldrb	r5, [r3, r5]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    485a:	0028      	movs	r0, r5
    485c:	4b24      	ldr	r3, [pc, #144]	; (48f0 <create_name+0x138>)
    485e:	4798      	blx	r3
    4860:	2800      	cmp	r0, #0
    4862:	d03b      	beq.n	48dc <create_name+0x124>
    4864:	464b      	mov	r3, r9
    4866:	3b01      	subs	r3, #1
    4868:	429f      	cmp	r7, r3
    486a:	d239      	bcs.n	48e0 <create_name+0x128>
			sfn[i++] = c;
    486c:	1c7b      	adds	r3, r7, #1
    486e:	465a      	mov	r2, fp
    4870:	55d4      	strb	r4, [r2, r7]
			sfn[i++] = d;
    4872:	54d5      	strb	r5, [r2, r3]
    4874:	3702      	adds	r7, #2
    4876:	e7b8      	b.n	47ea <create_name+0x32>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    4878:	237f      	movs	r3, #127	; 0x7f
    487a:	401c      	ands	r4, r3
    487c:	4b1d      	ldr	r3, [pc, #116]	; (48f4 <create_name+0x13c>)
    487e:	5d1c      	ldrb	r4, [r3, r4]
    4880:	e7e3      	b.n	484a <create_name+0x92>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    4882:	0021      	movs	r1, r4
    4884:	481c      	ldr	r0, [pc, #112]	; (48f8 <create_name+0x140>)
    4886:	4b1d      	ldr	r3, [pc, #116]	; (48fc <create_name+0x144>)
    4888:	4798      	blx	r3
    488a:	2800      	cmp	r0, #0
    488c:	d12a      	bne.n	48e4 <create_name+0x12c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    488e:	0023      	movs	r3, r4
    4890:	3b61      	subs	r3, #97	; 0x61
    4892:	b2db      	uxtb	r3, r3
    4894:	2b19      	cmp	r3, #25
    4896:	d801      	bhi.n	489c <create_name+0xe4>
    4898:	3c20      	subs	r4, #32
    489a:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
    489c:	465b      	mov	r3, fp
    489e:	55dc      	strb	r4, [r3, r7]
    48a0:	3701      	adds	r7, #1
		c = (BYTE)p[si++];				/* Get a byte */
    48a2:	002e      	movs	r6, r5
    48a4:	e7a1      	b.n	47ea <create_name+0x32>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    48a6:	2320      	movs	r3, #32
    48a8:	9a01      	ldr	r2, [sp, #4]
    48aa:	5cd3      	ldrb	r3, [r2, r3]
    48ac:	2be5      	cmp	r3, #229	; 0xe5
    48ae:	d006      	beq.n	48be <create_name+0x106>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    48b0:	2c20      	cmp	r4, #32
    48b2:	d909      	bls.n	48c8 <create_name+0x110>
    48b4:	782b      	ldrb	r3, [r5, #0]
    48b6:	2b20      	cmp	r3, #32
    48b8:	d80c      	bhi.n	48d4 <create_name+0x11c>
    48ba:	2204      	movs	r2, #4
    48bc:	e005      	b.n	48ca <create_name+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    48be:	2205      	movs	r2, #5
    48c0:	3bc5      	subs	r3, #197	; 0xc5
    48c2:	9901      	ldr	r1, [sp, #4]
    48c4:	54ca      	strb	r2, [r1, r3]
    48c6:	e7f3      	b.n	48b0 <create_name+0xf8>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    48c8:	2204      	movs	r2, #4
    48ca:	232b      	movs	r3, #43	; 0x2b
    48cc:	9901      	ldr	r1, [sp, #4]
    48ce:	54ca      	strb	r2, [r1, r3]
	return FR_OK;
    48d0:	2000      	movs	r0, #0
    48d2:	e79d      	b.n	4810 <create_name+0x58>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    48d4:	2200      	movs	r2, #0
    48d6:	e7f8      	b.n	48ca <create_name+0x112>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    48d8:	2006      	movs	r0, #6
    48da:	e799      	b.n	4810 <create_name+0x58>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    48dc:	2006      	movs	r0, #6
    48de:	e797      	b.n	4810 <create_name+0x58>
    48e0:	2006      	movs	r0, #6
    48e2:	e795      	b.n	4810 <create_name+0x58>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    48e4:	2006      	movs	r0, #6
    48e6:	e793      	b.n	4810 <create_name+0x58>
    48e8:	000088d9 	.word	0x000088d9
    48ec:	00003a1d 	.word	0x00003a1d
    48f0:	00003a21 	.word	0x00003a21
    48f4:	000127e0 	.word	0x000127e0
    48f8:	0001286c 	.word	0x0001286c
    48fc:	00008c51 	.word	0x00008c51

00004900 <follow_path>:
{
    4900:	b530      	push	{r4, r5, lr}
    4902:	b083      	sub	sp, #12
    4904:	0004      	movs	r4, r0
    4906:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
    4908:	6805      	ldr	r5, [r0, #0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
    490a:	e001      	b.n	4910 <follow_path+0x10>
    490c:	3301      	adds	r3, #1
    490e:	9301      	str	r3, [sp, #4]
    4910:	9b01      	ldr	r3, [sp, #4]
    4912:	781a      	ldrb	r2, [r3, #0]
    4914:	2a2f      	cmp	r2, #47	; 0x2f
    4916:	d0f9      	beq.n	490c <follow_path+0xc>
    4918:	2a5c      	cmp	r2, #92	; 0x5c
    491a:	d0f7      	beq.n	490c <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
    491c:	2200      	movs	r2, #0
    491e:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    4920:	781b      	ldrb	r3, [r3, #0]
    4922:	2b1f      	cmp	r3, #31
    4924:	d91c      	bls.n	4960 <follow_path+0x60>
			res = create_name(dp, &path);	/* Get a segment name of the path */
    4926:	a901      	add	r1, sp, #4
    4928:	0020      	movs	r0, r4
    492a:	4b16      	ldr	r3, [pc, #88]	; (4984 <follow_path+0x84>)
    492c:	4798      	blx	r3
			if (res != FR_OK) break;
    492e:	2800      	cmp	r0, #0
    4930:	d11d      	bne.n	496e <follow_path+0x6e>
			res = dir_find(dp);				/* Find an object with the segment name */
    4932:	0020      	movs	r0, r4
    4934:	4b14      	ldr	r3, [pc, #80]	; (4988 <follow_path+0x88>)
    4936:	4798      	blx	r3
			ns = dp->fn[NSFLAG];
    4938:	232b      	movs	r3, #43	; 0x2b
    493a:	5ce3      	ldrb	r3, [r4, r3]
			if (res != FR_OK) {				/* Failed to find the object */
    493c:	2800      	cmp	r0, #0
    493e:	d118      	bne.n	4972 <follow_path+0x72>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
    4940:	075b      	lsls	r3, r3, #29
    4942:	d414      	bmi.n	496e <follow_path+0x6e>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    4944:	79a3      	ldrb	r3, [r4, #6]
    4946:	06db      	lsls	r3, r3, #27
    4948:	d519      	bpl.n	497e <follow_path+0x7e>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    494a:	002b      	movs	r3, r5
    494c:	3330      	adds	r3, #48	; 0x30
    494e:	6922      	ldr	r2, [r4, #16]
    4950:	05d1      	lsls	r1, r2, #23
    4952:	0dc9      	lsrs	r1, r1, #23
    4954:	1859      	adds	r1, r3, r1
    4956:	0028      	movs	r0, r5
    4958:	4b0c      	ldr	r3, [pc, #48]	; (498c <follow_path+0x8c>)
    495a:	4798      	blx	r3
    495c:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
    495e:	e7e2      	b.n	4926 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
    4960:	3280      	adds	r2, #128	; 0x80
    4962:	232b      	movs	r3, #43	; 0x2b
    4964:	54e2      	strb	r2, [r4, r3]
		res = dir_sdi(dp, 0);
    4966:	2100      	movs	r1, #0
    4968:	0020      	movs	r0, r4
    496a:	4b09      	ldr	r3, [pc, #36]	; (4990 <follow_path+0x90>)
    496c:	4798      	blx	r3
}
    496e:	b003      	add	sp, #12
    4970:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
    4972:	2804      	cmp	r0, #4
    4974:	d1fb      	bne.n	496e <follow_path+0x6e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    4976:	075b      	lsls	r3, r3, #29
    4978:	d4f9      	bmi.n	496e <follow_path+0x6e>
    497a:	2005      	movs	r0, #5
    497c:	e7f7      	b.n	496e <follow_path+0x6e>
				res = FR_NO_PATH; break;
    497e:	2005      	movs	r0, #5
    4980:	e7f5      	b.n	496e <follow_path+0x6e>
    4982:	46c0      	nop			; (mov r8, r8)
    4984:	000047b9 	.word	0x000047b9
    4988:	0000468d 	.word	0x0000468d
    498c:	00003a3d 	.word	0x00003a3d
    4990:	000042d5 	.word	0x000042d5

00004994 <dir_register>:
{
    4994:	b570      	push	{r4, r5, r6, lr}
    4996:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
    4998:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
    499a:	2101      	movs	r1, #1
    499c:	4b0c      	ldr	r3, [pc, #48]	; (49d0 <dir_register+0x3c>)
    499e:	4798      	blx	r3
    49a0:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    49a2:	d001      	beq.n	49a8 <dir_register+0x14>
}
    49a4:	0020      	movs	r0, r4
    49a6:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
    49a8:	69a9      	ldr	r1, [r5, #24]
    49aa:	0030      	movs	r0, r6
    49ac:	4b09      	ldr	r3, [pc, #36]	; (49d4 <dir_register+0x40>)
    49ae:	4798      	blx	r3
    49b0:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    49b2:	d1f7      	bne.n	49a4 <dir_register+0x10>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
    49b4:	2220      	movs	r2, #32
    49b6:	2100      	movs	r1, #0
    49b8:	69e8      	ldr	r0, [r5, #28]
    49ba:	4b07      	ldr	r3, [pc, #28]	; (49d8 <dir_register+0x44>)
    49bc:	4798      	blx	r3
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    49be:	69e8      	ldr	r0, [r5, #28]
    49c0:	0029      	movs	r1, r5
    49c2:	3120      	adds	r1, #32
    49c4:	220b      	movs	r2, #11
    49c6:	4b05      	ldr	r3, [pc, #20]	; (49dc <dir_register+0x48>)
    49c8:	4798      	blx	r3
			fs->wflag = 1;
    49ca:	2301      	movs	r3, #1
    49cc:	7133      	strb	r3, [r6, #4]
    49ce:	e7e9      	b.n	49a4 <dir_register+0x10>
    49d0:	000046f5 	.word	0x000046f5
    49d4:	00003c09 	.word	0x00003c09
    49d8:	000088d9 	.word	0x000088d9
    49dc:	00008855 	.word	0x00008855

000049e0 <sync_fs>:
{
    49e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    49e2:	0005      	movs	r5, r0
	res = sync_window(fs);
    49e4:	4b1f      	ldr	r3, [pc, #124]	; (4a64 <sync_fs+0x84>)
    49e6:	4798      	blx	r3
    49e8:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    49ea:	d10a      	bne.n	4a02 <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    49ec:	782b      	ldrb	r3, [r5, #0]
    49ee:	2b03      	cmp	r3, #3
    49f0:	d009      	beq.n	4a06 <sync_fs+0x26>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    49f2:	7868      	ldrb	r0, [r5, #1]
    49f4:	2200      	movs	r2, #0
    49f6:	2100      	movs	r1, #0
    49f8:	4b1b      	ldr	r3, [pc, #108]	; (4a68 <sync_fs+0x88>)
    49fa:	4798      	blx	r3
    49fc:	2800      	cmp	r0, #0
    49fe:	d000      	beq.n	4a02 <sync_fs+0x22>
    4a00:	2401      	movs	r4, #1
}
    4a02:	0020      	movs	r0, r4
    4a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    4a06:	796b      	ldrb	r3, [r5, #5]
    4a08:	2b01      	cmp	r3, #1
    4a0a:	d1f2      	bne.n	49f2 <sync_fs+0x12>
			memset(fs->win, 0, sizeof fs->win);
    4a0c:	002e      	movs	r6, r5
    4a0e:	3630      	adds	r6, #48	; 0x30
    4a10:	2280      	movs	r2, #128	; 0x80
    4a12:	0092      	lsls	r2, r2, #2
    4a14:	2100      	movs	r1, #0
    4a16:	0030      	movs	r0, r6
    4a18:	4b14      	ldr	r3, [pc, #80]	; (4a6c <sync_fs+0x8c>)
    4a1a:	4798      	blx	r3
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
    4a1c:	4914      	ldr	r1, [pc, #80]	; (4a70 <sync_fs+0x90>)
    4a1e:	4b15      	ldr	r3, [pc, #84]	; (4a74 <sync_fs+0x94>)
    4a20:	18e8      	adds	r0, r5, r3
    4a22:	4b15      	ldr	r3, [pc, #84]	; (4a78 <sync_fs+0x98>)
    4a24:	4798      	blx	r3
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
    4a26:	4915      	ldr	r1, [pc, #84]	; (4a7c <sync_fs+0x9c>)
    4a28:	0030      	movs	r0, r6
    4a2a:	4f15      	ldr	r7, [pc, #84]	; (4a80 <sync_fs+0xa0>)
    4a2c:	47b8      	blx	r7
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
    4a2e:	2385      	movs	r3, #133	; 0x85
    4a30:	009b      	lsls	r3, r3, #2
    4a32:	18e8      	adds	r0, r5, r3
    4a34:	4913      	ldr	r1, [pc, #76]	; (4a84 <sync_fs+0xa4>)
    4a36:	47b8      	blx	r7
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    4a38:	2386      	movs	r3, #134	; 0x86
    4a3a:	009b      	lsls	r3, r3, #2
    4a3c:	18e8      	adds	r0, r5, r3
    4a3e:	6929      	ldr	r1, [r5, #16]
    4a40:	47b8      	blx	r7
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    4a42:	2387      	movs	r3, #135	; 0x87
    4a44:	009b      	lsls	r3, r3, #2
    4a46:	18e8      	adds	r0, r5, r3
    4a48:	68e9      	ldr	r1, [r5, #12]
    4a4a:	47b8      	blx	r7
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    4a4c:	69eb      	ldr	r3, [r5, #28]
    4a4e:	1c5a      	adds	r2, r3, #1
    4a50:	62ea      	str	r2, [r5, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    4a52:	7868      	ldrb	r0, [r5, #1]
    4a54:	2301      	movs	r3, #1
    4a56:	0031      	movs	r1, r6
    4a58:	4e0b      	ldr	r6, [pc, #44]	; (4a88 <sync_fs+0xa8>)
    4a5a:	47b0      	blx	r6
			fs->fsi_flag = 0;
    4a5c:	2300      	movs	r3, #0
    4a5e:	716b      	strb	r3, [r5, #5]
    4a60:	e7c7      	b.n	49f2 <sync_fs+0x12>
    4a62:	46c0      	nop			; (mov r8, r8)
    4a64:	00003bb1 	.word	0x00003bb1
    4a68:	00005969 	.word	0x00005969
    4a6c:	000088d9 	.word	0x000088d9
    4a70:	0000aa55 	.word	0x0000aa55
    4a74:	0000022e 	.word	0x0000022e
    4a78:	00003a05 	.word	0x00003a05
    4a7c:	41615252 	.word	0x41615252
    4a80:	00003a0d 	.word	0x00003a0d
    4a84:	61417272 	.word	0x61417272
    4a88:	000058c5 	.word	0x000058c5

00004a8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
    4a8c:	b530      	push	{r4, r5, lr}
    4a8e:	b085      	sub	sp, #20
    4a90:	9001      	str	r0, [sp, #4]
    4a92:	9100      	str	r1, [sp, #0]
    4a94:	0014      	movs	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    4a96:	9103      	str	r1, [sp, #12]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
    4a98:	a803      	add	r0, sp, #12
    4a9a:	4b12      	ldr	r3, [pc, #72]	; (4ae4 <f_mount+0x58>)
    4a9c:	4798      	blx	r3
	if (vol < 0) return FR_INVALID_DRIVE;
    4a9e:	2800      	cmp	r0, #0
    4aa0:	db1d      	blt.n	4ade <f_mount+0x52>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
    4aa2:	0083      	lsls	r3, r0, #2
    4aa4:	4a10      	ldr	r2, [pc, #64]	; (4ae8 <f_mount+0x5c>)
    4aa6:	589a      	ldr	r2, [r3, r2]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
    4aa8:	2a00      	cmp	r2, #0
    4aaa:	d003      	beq.n	4ab4 <f_mount+0x28>
		FatFs[vol] = 0;
    4aac:	2100      	movs	r1, #0
    4aae:	4d0e      	ldr	r5, [pc, #56]	; (4ae8 <f_mount+0x5c>)
    4ab0:	5159      	str	r1, [r3, r5]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
    4ab2:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {					/* Register new filesystem object */
    4ab4:	9b01      	ldr	r3, [sp, #4]
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d007      	beq.n	4aca <f_mount+0x3e>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
    4aba:	7058      	strb	r0, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
    4abc:	2300      	movs	r3, #0
    4abe:	9a01      	ldr	r2, [sp, #4]
    4ac0:	7013      	strb	r3, [r2, #0]
		FatFs[vol] = fs;		/* Register new fs object */
    4ac2:	0080      	lsls	r0, r0, #2
    4ac4:	4b08      	ldr	r3, [pc, #32]	; (4ae8 <f_mount+0x5c>)
    4ac6:	9a01      	ldr	r2, [sp, #4]
    4ac8:	50c2      	str	r2, [r0, r3]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
    4aca:	2c00      	cmp	r4, #0
    4acc:	d101      	bne.n	4ad2 <f_mount+0x46>
    4ace:	2000      	movs	r0, #0
    4ad0:	e006      	b.n	4ae0 <f_mount+0x54>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    4ad2:	2200      	movs	r2, #0
    4ad4:	a901      	add	r1, sp, #4
    4ad6:	4668      	mov	r0, sp
    4ad8:	4b04      	ldr	r3, [pc, #16]	; (4aec <f_mount+0x60>)
    4ada:	4798      	blx	r3
	LEAVE_FF(fs, res);
    4adc:	e000      	b.n	4ae0 <f_mount+0x54>
	if (vol < 0) return FR_INVALID_DRIVE;
    4ade:	200b      	movs	r0, #11
}
    4ae0:	b005      	add	sp, #20
    4ae2:	bd30      	pop	{r4, r5, pc}
    4ae4:	00003b0d 	.word	0x00003b0d
    4ae8:	20000ac4 	.word	0x20000ac4
    4aec:	00003db5 	.word	0x00003db5

00004af0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
    4af0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4af2:	46ce      	mov	lr, r9
    4af4:	4647      	mov	r7, r8
    4af6:	b580      	push	{r7, lr}
    4af8:	b091      	sub	sp, #68	; 0x44
    4afa:	0007      	movs	r7, r0
    4afc:	9103      	str	r1, [sp, #12]
    4afe:	0016      	movs	r6, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    4b00:	2800      	cmp	r0, #0
    4b02:	d100      	bne.n	4b06 <f_open+0x16>
    4b04:	e0e2      	b.n	4ccc <f_open+0x1dc>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    4b06:	253f      	movs	r5, #63	; 0x3f
    4b08:	4015      	ands	r5, r2
	res = mount_volume(&path, &fs, mode);
    4b0a:	002a      	movs	r2, r5
    4b0c:	a904      	add	r1, sp, #16
    4b0e:	a803      	add	r0, sp, #12
    4b10:	4b72      	ldr	r3, [pc, #456]	; (4cdc <f_open+0x1ec>)
    4b12:	4798      	blx	r3
    4b14:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    4b16:	d005      	beq.n	4b24 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    4b18:	2c00      	cmp	r4, #0
    4b1a:	d100      	bne.n	4b1e <f_open+0x2e>
    4b1c:	e0d7      	b.n	4cce <f_open+0x1de>
    4b1e:	2300      	movs	r3, #0
    4b20:	603b      	str	r3, [r7, #0]
    4b22:	e0d4      	b.n	4cce <f_open+0x1de>
		dj.obj.fs = fs;
    4b24:	9b04      	ldr	r3, [sp, #16]
    4b26:	9305      	str	r3, [sp, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
    4b28:	9903      	ldr	r1, [sp, #12]
    4b2a:	a805      	add	r0, sp, #20
    4b2c:	4b6c      	ldr	r3, [pc, #432]	; (4ce0 <f_open+0x1f0>)
    4b2e:	4798      	blx	r3
    4b30:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    4b32:	d104      	bne.n	4b3e <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    4b34:	232b      	movs	r3, #43	; 0x2b
    4b36:	aa05      	add	r2, sp, #20
    4b38:	56d3      	ldrsb	r3, [r2, r3]
    4b3a:	2b00      	cmp	r3, #0
    4b3c:	db3e      	blt.n	4bbc <f_open+0xcc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    4b3e:	231c      	movs	r3, #28
    4b40:	4233      	tst	r3, r6
    4b42:	d100      	bne.n	4b46 <f_open+0x56>
    4b44:	e088      	b.n	4c58 <f_open+0x168>
			if (res != FR_OK) {					/* No file, create new */
    4b46:	2c00      	cmp	r4, #0
    4b48:	d03f      	beq.n	4bca <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    4b4a:	2c04      	cmp	r4, #4
    4b4c:	d038      	beq.n	4bc0 <f_open+0xd0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    4b4e:	2308      	movs	r3, #8
    4b50:	431d      	orrs	r5, r3
    4b52:	b2ed      	uxtb	r5, r5
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    4b54:	2c00      	cmp	r4, #0
    4b56:	d101      	bne.n	4b5c <f_open+0x6c>
    4b58:	072b      	lsls	r3, r5, #28
    4b5a:	d441      	bmi.n	4be0 <f_open+0xf0>
		if (res == FR_OK) {
    4b5c:	2c00      	cmp	r4, #0
    4b5e:	d109      	bne.n	4b74 <f_open+0x84>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    4b60:	072b      	lsls	r3, r5, #28
    4b62:	d502      	bpl.n	4b6a <f_open+0x7a>
    4b64:	2340      	movs	r3, #64	; 0x40
    4b66:	431d      	orrs	r5, r3
    4b68:	b2ed      	uxtb	r5, r5
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    4b6a:	9b04      	ldr	r3, [sp, #16]
    4b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4b6e:	623b      	str	r3, [r7, #32]
			fp->dir_ptr = dj.dir;
    4b70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b72:	627b      	str	r3, [r7, #36]	; 0x24
		if (res == FR_OK) {
    4b74:	2c00      	cmp	r4, #0
    4b76:	d1cf      	bne.n	4b18 <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    4b78:	9b04      	ldr	r3, [sp, #16]
    4b7a:	4699      	mov	r9, r3
    4b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b7e:	4698      	mov	r8, r3
    4b80:	0019      	movs	r1, r3
    4b82:	4648      	mov	r0, r9
    4b84:	4b57      	ldr	r3, [pc, #348]	; (4ce4 <f_open+0x1f4>)
    4b86:	4798      	blx	r3
    4b88:	0006      	movs	r6, r0
    4b8a:	60b8      	str	r0, [r7, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    4b8c:	4640      	mov	r0, r8
    4b8e:	301c      	adds	r0, #28
    4b90:	4b55      	ldr	r3, [pc, #340]	; (4ce8 <f_open+0x1f8>)
    4b92:	4798      	blx	r3
    4b94:	4680      	mov	r8, r0
    4b96:	60f8      	str	r0, [r7, #12]
			fp->obj.fs = fs;	/* Validate the file object */
    4b98:	464b      	mov	r3, r9
    4b9a:	603b      	str	r3, [r7, #0]
			fp->obj.id = fs->id;
    4b9c:	88db      	ldrh	r3, [r3, #6]
    4b9e:	80bb      	strh	r3, [r7, #4]
			fp->flag = mode;	/* Set file access mode */
    4ba0:	743d      	strb	r5, [r7, #16]
			fp->err = 0;		/* Clear error flag */
    4ba2:	2300      	movs	r3, #0
    4ba4:	747b      	strb	r3, [r7, #17]
			fp->sect = 0;		/* Invalidate current data sector */
    4ba6:	61fb      	str	r3, [r7, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
    4ba8:	617b      	str	r3, [r7, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    4baa:	06ab      	lsls	r3, r5, #26
    4bac:	d5b4      	bpl.n	4b18 <f_open+0x28>
    4bae:	2800      	cmp	r0, #0
    4bb0:	d0b2      	beq.n	4b18 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    4bb2:	6178      	str	r0, [r7, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    4bb4:	464b      	mov	r3, r9
    4bb6:	895d      	ldrh	r5, [r3, #10]
    4bb8:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    4bba:	e063      	b.n	4c84 <f_open+0x194>
				res = FR_INVALID_NAME;
    4bbc:	3406      	adds	r4, #6
    4bbe:	e7be      	b.n	4b3e <f_open+0x4e>
					res = dir_register(&dj);
    4bc0:	a805      	add	r0, sp, #20
    4bc2:	4b4a      	ldr	r3, [pc, #296]	; (4cec <f_open+0x1fc>)
    4bc4:	4798      	blx	r3
    4bc6:	0004      	movs	r4, r0
    4bc8:	e7c1      	b.n	4b4e <f_open+0x5e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4bca:	ab05      	add	r3, sp, #20
    4bcc:	799b      	ldrb	r3, [r3, #6]
    4bce:	2211      	movs	r2, #17
    4bd0:	421a      	tst	r2, r3
    4bd2:	d103      	bne.n	4bdc <f_open+0xec>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    4bd4:	0773      	lsls	r3, r6, #29
    4bd6:	d5bd      	bpl.n	4b54 <f_open+0x64>
    4bd8:	2408      	movs	r4, #8
    4bda:	e7bb      	b.n	4b54 <f_open+0x64>
					res = FR_DENIED;
    4bdc:	2407      	movs	r4, #7
    4bde:	e7b9      	b.n	4b54 <f_open+0x64>
					st_dword(dj.dir + DIR_CrtTime, tm);
    4be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4be2:	9301      	str	r3, [sp, #4]
    4be4:	4e42      	ldr	r6, [pc, #264]	; (4cf0 <f_open+0x200>)
    4be6:	0018      	movs	r0, r3
    4be8:	300e      	adds	r0, #14
    4bea:	0031      	movs	r1, r6
    4bec:	4b41      	ldr	r3, [pc, #260]	; (4cf4 <f_open+0x204>)
    4bee:	4698      	mov	r8, r3
    4bf0:	4798      	blx	r3
					st_dword(dj.dir + DIR_ModTime, tm);
    4bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4bf4:	9301      	str	r3, [sp, #4]
    4bf6:	0018      	movs	r0, r3
    4bf8:	3016      	adds	r0, #22
    4bfa:	0031      	movs	r1, r6
    4bfc:	47c0      	blx	r8
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    4bfe:	9b04      	ldr	r3, [sp, #16]
    4c00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    4c02:	0031      	movs	r1, r6
    4c04:	9301      	str	r3, [sp, #4]
    4c06:	0018      	movs	r0, r3
    4c08:	4b36      	ldr	r3, [pc, #216]	; (4ce4 <f_open+0x1f4>)
    4c0a:	4798      	blx	r3
    4c0c:	4681      	mov	r9, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    4c0e:	2320      	movs	r3, #32
    4c10:	72f3      	strb	r3, [r6, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    4c12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4c14:	9202      	str	r2, [sp, #8]
    4c16:	2200      	movs	r2, #0
    4c18:	9902      	ldr	r1, [sp, #8]
    4c1a:	9801      	ldr	r0, [sp, #4]
    4c1c:	4b36      	ldr	r3, [pc, #216]	; (4cf8 <f_open+0x208>)
    4c1e:	4798      	blx	r3
					st_dword(dj.dir + DIR_FileSize, 0);
    4c20:	980c      	ldr	r0, [sp, #48]	; 0x30
    4c22:	301c      	adds	r0, #28
    4c24:	2100      	movs	r1, #0
    4c26:	47c0      	blx	r8
					fs->wflag = 1;
    4c28:	9b04      	ldr	r3, [sp, #16]
    4c2a:	2201      	movs	r2, #1
    4c2c:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
    4c2e:	464a      	mov	r2, r9
    4c30:	2a00      	cmp	r2, #0
    4c32:	d093      	beq.n	4b5c <f_open+0x6c>
						sc = fs->winsect;
    4c34:	6ade      	ldr	r6, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
    4c36:	2200      	movs	r2, #0
    4c38:	4649      	mov	r1, r9
    4c3a:	a805      	add	r0, sp, #20
    4c3c:	4b2f      	ldr	r3, [pc, #188]	; (4cfc <f_open+0x20c>)
    4c3e:	4798      	blx	r3
    4c40:	1e04      	subs	r4, r0, #0
						if (res == FR_OK) {
    4c42:	d18b      	bne.n	4b5c <f_open+0x6c>
							res = move_window(fs, sc);
    4c44:	0031      	movs	r1, r6
    4c46:	9804      	ldr	r0, [sp, #16]
    4c48:	4b2d      	ldr	r3, [pc, #180]	; (4d00 <f_open+0x210>)
    4c4a:	4798      	blx	r3
    4c4c:	0004      	movs	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    4c4e:	464b      	mov	r3, r9
    4c50:	3b01      	subs	r3, #1
    4c52:	9a04      	ldr	r2, [sp, #16]
    4c54:	60d3      	str	r3, [r2, #12]
    4c56:	e781      	b.n	4b5c <f_open+0x6c>
			if (res == FR_OK) {					/* Is the object exsiting? */
    4c58:	2c00      	cmp	r4, #0
    4c5a:	d000      	beq.n	4c5e <f_open+0x16e>
    4c5c:	e77e      	b.n	4b5c <f_open+0x6c>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    4c5e:	ab05      	add	r3, sp, #20
    4c60:	799b      	ldrb	r3, [r3, #6]
    4c62:	06da      	lsls	r2, r3, #27
    4c64:	d407      	bmi.n	4c76 <f_open+0x186>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    4c66:	07b2      	lsls	r2, r6, #30
    4c68:	d400      	bmi.n	4c6c <f_open+0x17c>
    4c6a:	e777      	b.n	4b5c <f_open+0x6c>
    4c6c:	07db      	lsls	r3, r3, #31
    4c6e:	d400      	bmi.n	4c72 <f_open+0x182>
    4c70:	e774      	b.n	4b5c <f_open+0x6c>
						res = FR_DENIED;
    4c72:	2407      	movs	r4, #7
    4c74:	e772      	b.n	4b5c <f_open+0x6c>
					res = FR_NO_FILE;
    4c76:	2404      	movs	r4, #4
    4c78:	e770      	b.n	4b5c <f_open+0x6c>
					if (clst <= 1) res = FR_INT_ERR;
    4c7a:	2402      	movs	r4, #2
    4c7c:	e00d      	b.n	4c9a <f_open+0x1aa>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    4c7e:	4643      	mov	r3, r8
    4c80:	1b5b      	subs	r3, r3, r5
    4c82:	4698      	mov	r8, r3
    4c84:	2c00      	cmp	r4, #0
    4c86:	d10c      	bne.n	4ca2 <f_open+0x1b2>
    4c88:	45a8      	cmp	r8, r5
    4c8a:	d90a      	bls.n	4ca2 <f_open+0x1b2>
					clst = get_fat(&fp->obj, clst);
    4c8c:	0031      	movs	r1, r6
    4c8e:	0038      	movs	r0, r7
    4c90:	4b1c      	ldr	r3, [pc, #112]	; (4d04 <f_open+0x214>)
    4c92:	4798      	blx	r3
    4c94:	0006      	movs	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
    4c96:	2801      	cmp	r0, #1
    4c98:	d9ef      	bls.n	4c7a <f_open+0x18a>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4c9a:	1c73      	adds	r3, r6, #1
    4c9c:	d1ef      	bne.n	4c7e <f_open+0x18e>
    4c9e:	2401      	movs	r4, #1
    4ca0:	e7ed      	b.n	4c7e <f_open+0x18e>
				fp->clust = clst;
    4ca2:	61be      	str	r6, [r7, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    4ca4:	2c00      	cmp	r4, #0
    4ca6:	d000      	beq.n	4caa <f_open+0x1ba>
    4ca8:	e736      	b.n	4b18 <f_open+0x28>
    4caa:	4643      	mov	r3, r8
    4cac:	05db      	lsls	r3, r3, #23
    4cae:	d100      	bne.n	4cb2 <f_open+0x1c2>
    4cb0:	e732      	b.n	4b18 <f_open+0x28>
					sc = clst2sect(fs, clst);
    4cb2:	0031      	movs	r1, r6
    4cb4:	9804      	ldr	r0, [sp, #16]
    4cb6:	4b14      	ldr	r3, [pc, #80]	; (4d08 <f_open+0x218>)
    4cb8:	4798      	blx	r3
					if (sc == 0) {
    4cba:	2800      	cmp	r0, #0
    4cbc:	d004      	beq.n	4cc8 <f_open+0x1d8>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    4cbe:	4643      	mov	r3, r8
    4cc0:	0a5b      	lsrs	r3, r3, #9
    4cc2:	18c3      	adds	r3, r0, r3
    4cc4:	61fb      	str	r3, [r7, #28]
    4cc6:	e727      	b.n	4b18 <f_open+0x28>
						res = FR_INT_ERR;
    4cc8:	2402      	movs	r4, #2
    4cca:	e725      	b.n	4b18 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
    4ccc:	2409      	movs	r4, #9

	LEAVE_FF(fs, res);
}
    4cce:	0020      	movs	r0, r4
    4cd0:	b011      	add	sp, #68	; 0x44
    4cd2:	bc0c      	pop	{r2, r3}
    4cd4:	4690      	mov	r8, r2
    4cd6:	4699      	mov	r9, r3
    4cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cda:	46c0      	nop			; (mov r8, r8)
    4cdc:	00003db5 	.word	0x00003db5
    4ce0:	00004901 	.word	0x00004901
    4ce4:	00003a3d 	.word	0x00003a3d
    4ce8:	000039ef 	.word	0x000039ef
    4cec:	00004995 	.word	0x00004995
    4cf0:	55660000 	.word	0x55660000
    4cf4:	00003a0d 	.word	0x00003a0d
    4cf8:	00003a69 	.word	0x00003a69
    4cfc:	000044b5 	.word	0x000044b5
    4d00:	00003c09 	.word	0x00003c09
    4d04:	000041e5 	.word	0x000041e5
    4d08:	00003a25 	.word	0x00003a25

00004d0c <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
    4d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d0e:	46de      	mov	lr, fp
    4d10:	4657      	mov	r7, sl
    4d12:	464e      	mov	r6, r9
    4d14:	4645      	mov	r5, r8
    4d16:	b5e0      	push	{r5, r6, r7, lr}
    4d18:	b085      	sub	sp, #20
    4d1a:	0005      	movs	r5, r0
    4d1c:	000c      	movs	r4, r1
    4d1e:	4690      	mov	r8, r2
    4d20:	469a      	mov	sl, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    4d22:	2300      	movs	r3, #0
    4d24:	4652      	mov	r2, sl
    4d26:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
    4d28:	9000      	str	r0, [sp, #0]
    4d2a:	a903      	add	r1, sp, #12
    4d2c:	4b4f      	ldr	r3, [pc, #316]	; (4e6c <f_read+0x160>)
    4d2e:	4798      	blx	r3
    4d30:	1e06      	subs	r6, r0, #0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    4d32:	d106      	bne.n	4d42 <f_read+0x36>
    4d34:	7c6e      	ldrb	r6, [r5, #17]
    4d36:	2e00      	cmp	r6, #0
    4d38:	d103      	bne.n	4d42 <f_read+0x36>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    4d3a:	7c2b      	ldrb	r3, [r5, #16]
    4d3c:	07db      	lsls	r3, r3, #31
    4d3e:	d408      	bmi.n	4d52 <f_read+0x46>
    4d40:	2607      	movs	r6, #7
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    4d42:	0030      	movs	r0, r6
    4d44:	b005      	add	sp, #20
    4d46:	bc3c      	pop	{r2, r3, r4, r5}
    4d48:	4690      	mov	r8, r2
    4d4a:	4699      	mov	r9, r3
    4d4c:	46a2      	mov	sl, r4
    4d4e:	46ab      	mov	fp, r5
    4d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	remain = fp->obj.objsize - fp->fptr;
    4d52:	68eb      	ldr	r3, [r5, #12]
    4d54:	696a      	ldr	r2, [r5, #20]
    4d56:	1a9b      	subs	r3, r3, r2
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    4d58:	4543      	cmp	r3, r8
    4d5a:	d200      	bcs.n	4d5e <f_read+0x52>
    4d5c:	4698      	mov	r8, r3
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
    4d5e:	46a1      	mov	r9, r4
    4d60:	46b3      	mov	fp, r6
    4d62:	4646      	mov	r6, r8
    4d64:	e042      	b.n	4dec <f_read+0xe0>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    4d66:	69a9      	ldr	r1, [r5, #24]
    4d68:	9800      	ldr	r0, [sp, #0]
    4d6a:	4b41      	ldr	r3, [pc, #260]	; (4e70 <f_read+0x164>)
    4d6c:	4798      	blx	r3
    4d6e:	e04b      	b.n	4e08 <f_read+0xfc>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    4d70:	2302      	movs	r3, #2
    4d72:	746b      	strb	r3, [r5, #17]
    4d74:	2602      	movs	r6, #2
    4d76:	e7e4      	b.n	4d42 <f_read+0x36>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    4d78:	2301      	movs	r3, #1
    4d7a:	746b      	strb	r3, [r5, #17]
    4d7c:	2601      	movs	r6, #1
    4d7e:	e7e0      	b.n	4d42 <f_read+0x36>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    4d80:	2302      	movs	r3, #2
    4d82:	746b      	strb	r3, [r5, #17]
    4d84:	2602      	movs	r6, #2
    4d86:	e7dc      	b.n	4d42 <f_read+0x36>
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    4d88:	2301      	movs	r3, #1
    4d8a:	746b      	strb	r3, [r5, #17]
    4d8c:	2601      	movs	r6, #1
    4d8e:	e7d8      	b.n	4d42 <f_read+0x36>
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
    4d90:	0240      	lsls	r0, r0, #9
    4d92:	4448      	add	r0, r9
    4d94:	3130      	adds	r1, #48	; 0x30
    4d96:	2280      	movs	r2, #128	; 0x80
    4d98:	0092      	lsls	r2, r2, #2
    4d9a:	4b36      	ldr	r3, [pc, #216]	; (4e74 <f_read+0x168>)
    4d9c:	4798      	blx	r3
    4d9e:	e05c      	b.n	4e5a <f_read+0x14e>
			fp->sect = sect;
    4da0:	4643      	mov	r3, r8
    4da2:	61eb      	str	r3, [r5, #28]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    4da4:	696b      	ldr	r3, [r5, #20]
    4da6:	05dc      	lsls	r4, r3, #23
    4da8:	0de4      	lsrs	r4, r4, #23
    4daa:	2380      	movs	r3, #128	; 0x80
    4dac:	009b      	lsls	r3, r3, #2
    4dae:	1b1c      	subs	r4, r3, r4
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
    4db0:	42a6      	cmp	r6, r4
    4db2:	d200      	bcs.n	4db6 <f_read+0xaa>
    4db4:	0034      	movs	r4, r6
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    4db6:	69e9      	ldr	r1, [r5, #28]
    4db8:	9803      	ldr	r0, [sp, #12]
    4dba:	4b2f      	ldr	r3, [pc, #188]	; (4e78 <f_read+0x16c>)
    4dbc:	4798      	blx	r3
    4dbe:	2800      	cmp	r0, #0
    4dc0:	d14d      	bne.n	4e5e <f_read+0x152>
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    4dc2:	9903      	ldr	r1, [sp, #12]
    4dc4:	3130      	adds	r1, #48	; 0x30
    4dc6:	696b      	ldr	r3, [r5, #20]
    4dc8:	05db      	lsls	r3, r3, #23
    4dca:	0ddb      	lsrs	r3, r3, #23
    4dcc:	18c9      	adds	r1, r1, r3
    4dce:	0022      	movs	r2, r4
    4dd0:	4648      	mov	r0, r9
    4dd2:	4b28      	ldr	r3, [pc, #160]	; (4e74 <f_read+0x168>)
    4dd4:	4798      	blx	r3
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
    4dd6:	1b36      	subs	r6, r6, r4
    4dd8:	4653      	mov	r3, sl
    4dda:	681b      	ldr	r3, [r3, #0]
    4ddc:	191b      	adds	r3, r3, r4
    4dde:	4652      	mov	r2, sl
    4de0:	6013      	str	r3, [r2, #0]
    4de2:	44a1      	add	r9, r4
    4de4:	696b      	ldr	r3, [r5, #20]
    4de6:	469c      	mov	ip, r3
    4de8:	4464      	add	r4, ip
    4dea:	616c      	str	r4, [r5, #20]
    4dec:	2e00      	cmp	r6, #0
    4dee:	d03a      	beq.n	4e66 <f_read+0x15a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    4df0:	696b      	ldr	r3, [r5, #20]
    4df2:	05da      	lsls	r2, r3, #23
    4df4:	d1d6      	bne.n	4da4 <f_read+0x98>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    4df6:	0a5a      	lsrs	r2, r3, #9
    4df8:	9903      	ldr	r1, [sp, #12]
    4dfa:	894f      	ldrh	r7, [r1, #10]
    4dfc:	3f01      	subs	r7, #1
    4dfe:	4017      	ands	r7, r2
			if (csect == 0) {					/* On the cluster boundary? */
    4e00:	d107      	bne.n	4e12 <f_read+0x106>
				if (fp->fptr == 0) {			/* On the top of the file? */
    4e02:	2b00      	cmp	r3, #0
    4e04:	d1af      	bne.n	4d66 <f_read+0x5a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    4e06:	68a8      	ldr	r0, [r5, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    4e08:	2801      	cmp	r0, #1
    4e0a:	d9b1      	bls.n	4d70 <f_read+0x64>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    4e0c:	1c43      	adds	r3, r0, #1
    4e0e:	d0b3      	beq.n	4d78 <f_read+0x6c>
				fp->clust = clst;				/* Update current cluster */
    4e10:	61a8      	str	r0, [r5, #24]
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    4e12:	9b03      	ldr	r3, [sp, #12]
    4e14:	9301      	str	r3, [sp, #4]
    4e16:	69a9      	ldr	r1, [r5, #24]
    4e18:	0018      	movs	r0, r3
    4e1a:	4b18      	ldr	r3, [pc, #96]	; (4e7c <f_read+0x170>)
    4e1c:	4798      	blx	r3
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    4e1e:	2800      	cmp	r0, #0
    4e20:	d0ae      	beq.n	4d80 <f_read+0x74>
			sect += csect;
    4e22:	4680      	mov	r8, r0
    4e24:	44b8      	add	r8, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    4e26:	0a74      	lsrs	r4, r6, #9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    4e28:	d0ba      	beq.n	4da0 <f_read+0x94>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    4e2a:	193b      	adds	r3, r7, r4
    4e2c:	9a01      	ldr	r2, [sp, #4]
    4e2e:	8952      	ldrh	r2, [r2, #10]
    4e30:	4293      	cmp	r3, r2
    4e32:	d900      	bls.n	4e36 <f_read+0x12a>
					cc = fs->csize - csect;
    4e34:	1bd4      	subs	r4, r2, r7
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    4e36:	9b01      	ldr	r3, [sp, #4]
    4e38:	7858      	ldrb	r0, [r3, #1]
    4e3a:	0023      	movs	r3, r4
    4e3c:	4642      	mov	r2, r8
    4e3e:	4649      	mov	r1, r9
    4e40:	4f0f      	ldr	r7, [pc, #60]	; (4e80 <f_read+0x174>)
    4e42:	47b8      	blx	r7
    4e44:	2800      	cmp	r0, #0
    4e46:	d19f      	bne.n	4d88 <f_read+0x7c>
				if (fs->wflag && fs->winsect - sect < cc) {
    4e48:	9903      	ldr	r1, [sp, #12]
    4e4a:	790b      	ldrb	r3, [r1, #4]
    4e4c:	2b00      	cmp	r3, #0
    4e4e:	d004      	beq.n	4e5a <f_read+0x14e>
    4e50:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    4e52:	4642      	mov	r2, r8
    4e54:	1a98      	subs	r0, r3, r2
    4e56:	4284      	cmp	r4, r0
    4e58:	d89a      	bhi.n	4d90 <f_read+0x84>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    4e5a:	0264      	lsls	r4, r4, #9
				continue;
    4e5c:	e7bb      	b.n	4dd6 <f_read+0xca>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    4e5e:	2301      	movs	r3, #1
    4e60:	746b      	strb	r3, [r5, #17]
    4e62:	2601      	movs	r6, #1
    4e64:	e76d      	b.n	4d42 <f_read+0x36>
    4e66:	465e      	mov	r6, fp
    4e68:	e76b      	b.n	4d42 <f_read+0x36>
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	00003b61 	.word	0x00003b61
    4e70:	000041e5 	.word	0x000041e5
    4e74:	00008855 	.word	0x00008855
    4e78:	00003c09 	.word	0x00003c09
    4e7c:	00003a25 	.word	0x00003a25
    4e80:	00005845 	.word	0x00005845

00004e84 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
    4e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e86:	46de      	mov	lr, fp
    4e88:	4657      	mov	r7, sl
    4e8a:	464e      	mov	r6, r9
    4e8c:	4645      	mov	r5, r8
    4e8e:	b5e0      	push	{r5, r6, r7, lr}
    4e90:	b085      	sub	sp, #20
    4e92:	0005      	movs	r5, r0
    4e94:	000c      	movs	r4, r1
    4e96:	0017      	movs	r7, r2
    4e98:	469a      	mov	sl, r3
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    4e9a:	2300      	movs	r3, #0
    4e9c:	4652      	mov	r2, sl
    4e9e:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    4ea0:	9000      	str	r0, [sp, #0]
    4ea2:	a903      	add	r1, sp, #12
    4ea4:	4b6a      	ldr	r3, [pc, #424]	; (5050 <f_write+0x1cc>)
    4ea6:	4798      	blx	r3
    4ea8:	1e06      	subs	r6, r0, #0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    4eaa:	d106      	bne.n	4eba <f_write+0x36>
    4eac:	7c6e      	ldrb	r6, [r5, #17]
    4eae:	2e00      	cmp	r6, #0
    4eb0:	d103      	bne.n	4eba <f_write+0x36>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    4eb2:	7c2b      	ldrb	r3, [r5, #16]
    4eb4:	079b      	lsls	r3, r3, #30
    4eb6:	d408      	bmi.n	4eca <f_write+0x46>
    4eb8:	2607      	movs	r6, #7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    4eba:	0030      	movs	r0, r6
    4ebc:	b005      	add	sp, #20
    4ebe:	bc3c      	pop	{r2, r3, r4, r5}
    4ec0:	4690      	mov	r8, r2
    4ec2:	4699      	mov	r9, r3
    4ec4:	46a2      	mov	sl, r4
    4ec6:	46ab      	mov	fp, r5
    4ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    4eca:	696b      	ldr	r3, [r5, #20]
    4ecc:	19da      	adds	r2, r3, r7
    4ece:	4293      	cmp	r3, r2
    4ed0:	d900      	bls.n	4ed4 <f_write+0x50>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    4ed2:	43df      	mvns	r7, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
    4ed4:	46a1      	mov	r9, r4
    4ed6:	46b3      	mov	fp, r6
    4ed8:	e05e      	b.n	4f98 <f_write+0x114>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    4eda:	2100      	movs	r1, #0
    4edc:	9800      	ldr	r0, [sp, #0]
    4ede:	4b5d      	ldr	r3, [pc, #372]	; (5054 <f_write+0x1d0>)
    4ee0:	4798      	blx	r3
    4ee2:	e069      	b.n	4fb8 <f_write+0x134>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    4ee4:	69a9      	ldr	r1, [r5, #24]
    4ee6:	9800      	ldr	r0, [sp, #0]
    4ee8:	4b5a      	ldr	r3, [pc, #360]	; (5054 <f_write+0x1d0>)
    4eea:	4798      	blx	r3
    4eec:	e064      	b.n	4fb8 <f_write+0x134>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    4eee:	2302      	movs	r3, #2
    4ef0:	746b      	strb	r3, [r5, #17]
    4ef2:	2602      	movs	r6, #2
    4ef4:	e7e1      	b.n	4eba <f_write+0x36>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    4ef6:	2301      	movs	r3, #1
    4ef8:	746b      	strb	r3, [r5, #17]
    4efa:	2601      	movs	r6, #1
    4efc:	e7dd      	b.n	4eba <f_write+0x36>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    4efe:	4b56      	ldr	r3, [pc, #344]	; (5058 <f_write+0x1d4>)
    4f00:	4798      	blx	r3
    4f02:	2800      	cmp	r0, #0
    4f04:	d068      	beq.n	4fd8 <f_write+0x154>
    4f06:	2301      	movs	r3, #1
    4f08:	746b      	strb	r3, [r5, #17]
    4f0a:	2601      	movs	r6, #1
    4f0c:	e7d5      	b.n	4eba <f_write+0x36>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    4f0e:	2302      	movs	r3, #2
    4f10:	746b      	strb	r3, [r5, #17]
    4f12:	2602      	movs	r6, #2
    4f14:	e7d1      	b.n	4eba <f_write+0x36>
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    4f16:	2301      	movs	r3, #1
    4f18:	746b      	strb	r3, [r5, #17]
    4f1a:	2601      	movs	r6, #1
    4f1c:	e7cd      	b.n	4eba <f_write+0x36>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
    4f1e:	0030      	movs	r0, r6
    4f20:	3030      	adds	r0, #48	; 0x30
    4f22:	0249      	lsls	r1, r1, #9
    4f24:	4449      	add	r1, r9
    4f26:	2280      	movs	r2, #128	; 0x80
    4f28:	0092      	lsls	r2, r2, #2
    4f2a:	4b4c      	ldr	r3, [pc, #304]	; (505c <f_write+0x1d8>)
    4f2c:	4798      	blx	r3
					fs->wflag = 0;
    4f2e:	2300      	movs	r3, #0
    4f30:	7133      	strb	r3, [r6, #4]
    4f32:	e074      	b.n	501e <f_write+0x19a>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    4f34:	696b      	ldr	r3, [r5, #20]
    4f36:	68ea      	ldr	r2, [r5, #12]
    4f38:	4293      	cmp	r3, r2
    4f3a:	d272      	bcs.n	5022 <f_write+0x19e>
			fp->sect = sect;
    4f3c:	4643      	mov	r3, r8
    4f3e:	61eb      	str	r3, [r5, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    4f40:	696b      	ldr	r3, [r5, #20]
    4f42:	05dc      	lsls	r4, r3, #23
    4f44:	0de4      	lsrs	r4, r4, #23
    4f46:	2380      	movs	r3, #128	; 0x80
    4f48:	009b      	lsls	r3, r3, #2
    4f4a:	1b1c      	subs	r4, r3, r4
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
    4f4c:	42a7      	cmp	r7, r4
    4f4e:	d200      	bcs.n	4f52 <f_write+0xce>
    4f50:	003c      	movs	r4, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    4f52:	69e9      	ldr	r1, [r5, #28]
    4f54:	9803      	ldr	r0, [sp, #12]
    4f56:	4b42      	ldr	r3, [pc, #264]	; (5060 <f_write+0x1dc>)
    4f58:	4798      	blx	r3
    4f5a:	2800      	cmp	r0, #0
    4f5c:	d16e      	bne.n	503c <f_write+0x1b8>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    4f5e:	9803      	ldr	r0, [sp, #12]
    4f60:	3030      	adds	r0, #48	; 0x30
    4f62:	696b      	ldr	r3, [r5, #20]
    4f64:	05db      	lsls	r3, r3, #23
    4f66:	0ddb      	lsrs	r3, r3, #23
    4f68:	18c0      	adds	r0, r0, r3
    4f6a:	0022      	movs	r2, r4
    4f6c:	4649      	mov	r1, r9
    4f6e:	4b3b      	ldr	r3, [pc, #236]	; (505c <f_write+0x1d8>)
    4f70:	4798      	blx	r3
		fs->wflag = 1;
    4f72:	2301      	movs	r3, #1
    4f74:	9a03      	ldr	r2, [sp, #12]
    4f76:	7113      	strb	r3, [r2, #4]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
    4f78:	1b3f      	subs	r7, r7, r4
    4f7a:	4653      	mov	r3, sl
    4f7c:	681b      	ldr	r3, [r3, #0]
    4f7e:	191b      	adds	r3, r3, r4
    4f80:	4652      	mov	r2, sl
    4f82:	6013      	str	r3, [r2, #0]
    4f84:	44a1      	add	r9, r4
    4f86:	696b      	ldr	r3, [r5, #20]
    4f88:	469c      	mov	ip, r3
    4f8a:	4464      	add	r4, ip
    4f8c:	616c      	str	r4, [r5, #20]
    4f8e:	68eb      	ldr	r3, [r5, #12]
    4f90:	429c      	cmp	r4, r3
    4f92:	d200      	bcs.n	4f96 <f_write+0x112>
    4f94:	001c      	movs	r4, r3
    4f96:	60ec      	str	r4, [r5, #12]
    4f98:	2f00      	cmp	r7, #0
    4f9a:	d053      	beq.n	5044 <f_write+0x1c0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    4f9c:	696b      	ldr	r3, [r5, #20]
    4f9e:	05da      	lsls	r2, r3, #23
    4fa0:	d1ce      	bne.n	4f40 <f_write+0xbc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    4fa2:	0a5a      	lsrs	r2, r3, #9
    4fa4:	9903      	ldr	r1, [sp, #12]
    4fa6:	894e      	ldrh	r6, [r1, #10]
    4fa8:	3e01      	subs	r6, #1
    4faa:	4016      	ands	r6, r2
			if (csect == 0) {				/* On the cluster boundary? */
    4fac:	d10f      	bne.n	4fce <f_write+0x14a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    4fae:	2b00      	cmp	r3, #0
    4fb0:	d198      	bne.n	4ee4 <f_write+0x60>
					clst = fp->obj.sclust;	/* Follow from the origin */
    4fb2:	68a8      	ldr	r0, [r5, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
    4fb4:	2800      	cmp	r0, #0
    4fb6:	d090      	beq.n	4eda <f_write+0x56>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    4fb8:	2800      	cmp	r0, #0
    4fba:	d043      	beq.n	5044 <f_write+0x1c0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    4fbc:	2801      	cmp	r0, #1
    4fbe:	d096      	beq.n	4eee <f_write+0x6a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    4fc0:	1c43      	adds	r3, r0, #1
    4fc2:	d098      	beq.n	4ef6 <f_write+0x72>
				fp->clust = clst;			/* Update current cluster */
    4fc4:	61a8      	str	r0, [r5, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    4fc6:	68ab      	ldr	r3, [r5, #8]
    4fc8:	2b00      	cmp	r3, #0
    4fca:	d100      	bne.n	4fce <f_write+0x14a>
    4fcc:	60a8      	str	r0, [r5, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    4fce:	9803      	ldr	r0, [sp, #12]
    4fd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4fd2:	69ea      	ldr	r2, [r5, #28]
    4fd4:	4293      	cmp	r3, r2
    4fd6:	d092      	beq.n	4efe <f_write+0x7a>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    4fd8:	9b03      	ldr	r3, [sp, #12]
    4fda:	9301      	str	r3, [sp, #4]
    4fdc:	69a9      	ldr	r1, [r5, #24]
    4fde:	0018      	movs	r0, r3
    4fe0:	4b20      	ldr	r3, [pc, #128]	; (5064 <f_write+0x1e0>)
    4fe2:	4798      	blx	r3
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    4fe4:	2800      	cmp	r0, #0
    4fe6:	d092      	beq.n	4f0e <f_write+0x8a>
			sect += csect;
    4fe8:	4680      	mov	r8, r0
    4fea:	44b0      	add	r8, r6
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    4fec:	0a7c      	lsrs	r4, r7, #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    4fee:	d0a1      	beq.n	4f34 <f_write+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    4ff0:	1933      	adds	r3, r6, r4
    4ff2:	9a01      	ldr	r2, [sp, #4]
    4ff4:	8952      	ldrh	r2, [r2, #10]
    4ff6:	4293      	cmp	r3, r2
    4ff8:	d900      	bls.n	4ffc <f_write+0x178>
					cc = fs->csize - csect;
    4ffa:	1b94      	subs	r4, r2, r6
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    4ffc:	9b01      	ldr	r3, [sp, #4]
    4ffe:	7858      	ldrb	r0, [r3, #1]
    5000:	0023      	movs	r3, r4
    5002:	4642      	mov	r2, r8
    5004:	4649      	mov	r1, r9
    5006:	4e18      	ldr	r6, [pc, #96]	; (5068 <f_write+0x1e4>)
    5008:	47b0      	blx	r6
    500a:	2800      	cmp	r0, #0
    500c:	d000      	beq.n	5010 <f_write+0x18c>
    500e:	e782      	b.n	4f16 <f_write+0x92>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    5010:	9e03      	ldr	r6, [sp, #12]
    5012:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    5014:	4642      	mov	r2, r8
    5016:	1a99      	subs	r1, r3, r2
    5018:	428c      	cmp	r4, r1
    501a:	d900      	bls.n	501e <f_write+0x19a>
    501c:	e77f      	b.n	4f1e <f_write+0x9a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    501e:	0264      	lsls	r4, r4, #9
				continue;
    5020:	e7aa      	b.n	4f78 <f_write+0xf4>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    5022:	9801      	ldr	r0, [sp, #4]
    5024:	4b0c      	ldr	r3, [pc, #48]	; (5058 <f_write+0x1d4>)
    5026:	4798      	blx	r3
    5028:	2800      	cmp	r0, #0
    502a:	d103      	bne.n	5034 <f_write+0x1b0>
				fs->winsect = sect;
    502c:	9b03      	ldr	r3, [sp, #12]
    502e:	4642      	mov	r2, r8
    5030:	62da      	str	r2, [r3, #44]	; 0x2c
    5032:	e783      	b.n	4f3c <f_write+0xb8>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    5034:	2301      	movs	r3, #1
    5036:	746b      	strb	r3, [r5, #17]
    5038:	2601      	movs	r6, #1
    503a:	e73e      	b.n	4eba <f_write+0x36>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    503c:	2301      	movs	r3, #1
    503e:	746b      	strb	r3, [r5, #17]
    5040:	2601      	movs	r6, #1
    5042:	e73a      	b.n	4eba <f_write+0x36>
    5044:	465e      	mov	r6, fp
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    5046:	7c2b      	ldrb	r3, [r5, #16]
    5048:	2240      	movs	r2, #64	; 0x40
    504a:	4313      	orrs	r3, r2
    504c:	742b      	strb	r3, [r5, #16]
	LEAVE_FF(fs, FR_OK);
    504e:	e734      	b.n	4eba <f_write+0x36>
    5050:	00003b61 	.word	0x00003b61
    5054:	00004389 	.word	0x00004389
    5058:	00003bb1 	.word	0x00003bb1
    505c:	00008855 	.word	0x00008855
    5060:	00003c09 	.word	0x00003c09
    5064:	00003a25 	.word	0x00003a25
    5068:	000058c5 	.word	0x000058c5

0000506c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
    506c:	b570      	push	{r4, r5, r6, lr}
    506e:	b082      	sub	sp, #8
    5070:	0004      	movs	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    5072:	a901      	add	r1, sp, #4
    5074:	4b18      	ldr	r3, [pc, #96]	; (50d8 <f_sync+0x6c>)
    5076:	4798      	blx	r3
	if (res == FR_OK) {
    5078:	2800      	cmp	r0, #0
    507a:	d102      	bne.n	5082 <f_sync+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    507c:	7c23      	ldrb	r3, [r4, #16]
    507e:	065b      	lsls	r3, r3, #25
    5080:	d401      	bmi.n	5086 <f_sync+0x1a>
			}
		}
	}

	LEAVE_FF(fs, res);
}
    5082:	b002      	add	sp, #8
    5084:	bd70      	pop	{r4, r5, r6, pc}
				res = move_window(fs, fp->dir_sect);
    5086:	6a21      	ldr	r1, [r4, #32]
    5088:	9801      	ldr	r0, [sp, #4]
    508a:	4b14      	ldr	r3, [pc, #80]	; (50dc <f_sync+0x70>)
    508c:	4798      	blx	r3
				if (res == FR_OK) {
    508e:	2800      	cmp	r0, #0
    5090:	d1f7      	bne.n	5082 <f_sync+0x16>
					dir = fp->dir_ptr;
    5092:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    5094:	7aeb      	ldrb	r3, [r5, #11]
    5096:	2220      	movs	r2, #32
    5098:	4313      	orrs	r3, r2
    509a:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    509c:	68a2      	ldr	r2, [r4, #8]
    509e:	0029      	movs	r1, r5
    50a0:	6820      	ldr	r0, [r4, #0]
    50a2:	4b0f      	ldr	r3, [pc, #60]	; (50e0 <f_sync+0x74>)
    50a4:	4798      	blx	r3
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    50a6:	0028      	movs	r0, r5
    50a8:	301c      	adds	r0, #28
    50aa:	68e1      	ldr	r1, [r4, #12]
    50ac:	4e0d      	ldr	r6, [pc, #52]	; (50e4 <f_sync+0x78>)
    50ae:	47b0      	blx	r6
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    50b0:	0028      	movs	r0, r5
    50b2:	3016      	adds	r0, #22
    50b4:	490c      	ldr	r1, [pc, #48]	; (50e8 <f_sync+0x7c>)
    50b6:	47b0      	blx	r6
					st_word(dir + DIR_LstAccDate, 0);
    50b8:	0028      	movs	r0, r5
    50ba:	3012      	adds	r0, #18
    50bc:	2100      	movs	r1, #0
    50be:	4b0b      	ldr	r3, [pc, #44]	; (50ec <f_sync+0x80>)
    50c0:	4798      	blx	r3
					fs->wflag = 1;
    50c2:	2301      	movs	r3, #1
    50c4:	9a01      	ldr	r2, [sp, #4]
    50c6:	7113      	strb	r3, [r2, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
    50c8:	0010      	movs	r0, r2
    50ca:	4b09      	ldr	r3, [pc, #36]	; (50f0 <f_sync+0x84>)
    50cc:	4798      	blx	r3
					fp->flag &= (BYTE)~FA_MODIFIED;
    50ce:	7c23      	ldrb	r3, [r4, #16]
    50d0:	2240      	movs	r2, #64	; 0x40
    50d2:	4393      	bics	r3, r2
    50d4:	7423      	strb	r3, [r4, #16]
    50d6:	e7d4      	b.n	5082 <f_sync+0x16>
    50d8:	00003b61 	.word	0x00003b61
    50dc:	00003c09 	.word	0x00003c09
    50e0:	00003a69 	.word	0x00003a69
    50e4:	00003a0d 	.word	0x00003a0d
    50e8:	55660000 	.word	0x55660000
    50ec:	00003a05 	.word	0x00003a05
    50f0:	000049e1 	.word	0x000049e1

000050f4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
    50f4:	b510      	push	{r4, lr}
    50f6:	b082      	sub	sp, #8
    50f8:	0004      	movs	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    50fa:	4b07      	ldr	r3, [pc, #28]	; (5118 <f_close+0x24>)
    50fc:	4798      	blx	r3
	if (res == FR_OK)
    50fe:	2800      	cmp	r0, #0
    5100:	d001      	beq.n	5106 <f_close+0x12>
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    5102:	b002      	add	sp, #8
    5104:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
    5106:	a901      	add	r1, sp, #4
    5108:	0020      	movs	r0, r4
    510a:	4b04      	ldr	r3, [pc, #16]	; (511c <f_close+0x28>)
    510c:	4798      	blx	r3
		if (res == FR_OK) {
    510e:	2800      	cmp	r0, #0
    5110:	d1f7      	bne.n	5102 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
    5112:	2300      	movs	r3, #0
    5114:	6023      	str	r3, [r4, #0]
    5116:	e7f4      	b.n	5102 <f_close+0xe>
    5118:	0000506d 	.word	0x0000506d
    511c:	00003b61 	.word	0x00003b61

00005120 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    5120:	b530      	push	{r4, r5, lr}
    5122:	b085      	sub	sp, #20
    5124:	1e05      	subs	r5, r0, #0
    5126:	9101      	str	r1, [sp, #4]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    5128:	d030      	beq.n	518c <f_opendir+0x6c>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    512a:	2200      	movs	r2, #0
    512c:	a903      	add	r1, sp, #12
    512e:	a801      	add	r0, sp, #4
    5130:	4b18      	ldr	r3, [pc, #96]	; (5194 <f_opendir+0x74>)
    5132:	4798      	blx	r3
    5134:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    5136:	d004      	beq.n	5142 <f_opendir+0x22>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
    5138:	2c00      	cmp	r4, #0
    513a:	d028      	beq.n	518e <f_opendir+0x6e>
    513c:	2300      	movs	r3, #0
    513e:	602b      	str	r3, [r5, #0]
    5140:	e025      	b.n	518e <f_opendir+0x6e>
		dp->obj.fs = fs;
    5142:	9b03      	ldr	r3, [sp, #12]
    5144:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
    5146:	9901      	ldr	r1, [sp, #4]
    5148:	0028      	movs	r0, r5
    514a:	4b13      	ldr	r3, [pc, #76]	; (5198 <f_opendir+0x78>)
    514c:	4798      	blx	r3
    514e:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {						/* Follow completed */
    5150:	d10d      	bne.n	516e <f_opendir+0x4e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    5152:	232b      	movs	r3, #43	; 0x2b
    5154:	56eb      	ldrsb	r3, [r5, r3]
    5156:	2b00      	cmp	r3, #0
    5158:	db07      	blt.n	516a <f_opendir+0x4a>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
    515a:	79ab      	ldrb	r3, [r5, #6]
    515c:	06db      	lsls	r3, r3, #27
    515e:	d50a      	bpl.n	5176 <f_opendir+0x56>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    5160:	69e9      	ldr	r1, [r5, #28]
    5162:	9803      	ldr	r0, [sp, #12]
    5164:	4b0d      	ldr	r3, [pc, #52]	; (519c <f_opendir+0x7c>)
    5166:	4798      	blx	r3
    5168:	60a8      	str	r0, [r5, #8]
			if (res == FR_OK) {
    516a:	2c00      	cmp	r4, #0
    516c:	d005      	beq.n	517a <f_opendir+0x5a>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    516e:	2c04      	cmp	r4, #4
    5170:	d1e2      	bne.n	5138 <f_opendir+0x18>
    5172:	3401      	adds	r4, #1
    5174:	e7e0      	b.n	5138 <f_opendir+0x18>
					res = FR_NO_PATH;
    5176:	2405      	movs	r4, #5
    5178:	e7f7      	b.n	516a <f_opendir+0x4a>
				dp->obj.id = fs->id;
    517a:	9b03      	ldr	r3, [sp, #12]
    517c:	88db      	ldrh	r3, [r3, #6]
    517e:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    5180:	2100      	movs	r1, #0
    5182:	0028      	movs	r0, r5
    5184:	4b06      	ldr	r3, [pc, #24]	; (51a0 <f_opendir+0x80>)
    5186:	4798      	blx	r3
    5188:	0004      	movs	r4, r0
    518a:	e7f0      	b.n	516e <f_opendir+0x4e>
	if (!dp) return FR_INVALID_OBJECT;
    518c:	2409      	movs	r4, #9

	LEAVE_FF(fs, res);
}
    518e:	0020      	movs	r0, r4
    5190:	b005      	add	sp, #20
    5192:	bd30      	pop	{r4, r5, pc}
    5194:	00003db5 	.word	0x00003db5
    5198:	00004901 	.word	0x00004901
    519c:	00003a3d 	.word	0x00003a3d
    51a0:	000042d5 	.word	0x000042d5

000051a4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    51a4:	b510      	push	{r4, lr}
    51a6:	b082      	sub	sp, #8
    51a8:	0004      	movs	r4, r0
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
    51aa:	a901      	add	r1, sp, #4
    51ac:	4b03      	ldr	r3, [pc, #12]	; (51bc <f_closedir+0x18>)
    51ae:	4798      	blx	r3
	if (res == FR_OK) {
    51b0:	2800      	cmp	r0, #0
    51b2:	d101      	bne.n	51b8 <f_closedir+0x14>
#if FF_FS_LOCK
		if (dp->obj.lockid) res = dec_share(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
    51b4:	2300      	movs	r3, #0
    51b6:	6023      	str	r3, [r4, #0]
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
}
    51b8:	b002      	add	sp, #8
    51ba:	bd10      	pop	{r4, pc}
    51bc:	00003b61 	.word	0x00003b61

000051c0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    51c0:	b570      	push	{r4, r5, r6, lr}
    51c2:	b082      	sub	sp, #8
    51c4:	0005      	movs	r5, r0
    51c6:	000e      	movs	r6, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
    51c8:	a901      	add	r1, sp, #4
    51ca:	4b12      	ldr	r3, [pc, #72]	; (5214 <f_readdir+0x54>)
    51cc:	4798      	blx	r3
    51ce:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    51d0:	d10a      	bne.n	51e8 <f_readdir+0x28>
		if (!fno) {
    51d2:	2e00      	cmp	r6, #0
    51d4:	d00b      	beq.n	51ee <f_readdir+0x2e>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = DIR_READ_FILE(dp);		/* Read an item */
    51d6:	2100      	movs	r1, #0
    51d8:	0028      	movs	r0, r5
    51da:	4b0f      	ldr	r3, [pc, #60]	; (5218 <f_readdir+0x58>)
    51dc:	4798      	blx	r3
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
    51de:	2804      	cmp	r0, #4
    51e0:	d000      	beq.n	51e4 <f_readdir+0x24>
			res = DIR_READ_FILE(dp);		/* Read an item */
    51e2:	0004      	movs	r4, r0
			if (res == FR_OK) {				/* A valid entry is found */
    51e4:	2c00      	cmp	r4, #0
    51e6:	d008      	beq.n	51fa <f_readdir+0x3a>
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    51e8:	0020      	movs	r0, r4
    51ea:	b002      	add	sp, #8
    51ec:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
    51ee:	2100      	movs	r1, #0
    51f0:	0028      	movs	r0, r5
    51f2:	4b0a      	ldr	r3, [pc, #40]	; (521c <f_readdir+0x5c>)
    51f4:	4798      	blx	r3
    51f6:	0004      	movs	r4, r0
    51f8:	e7f6      	b.n	51e8 <f_readdir+0x28>
				get_fileinfo(dp, fno);		/* Get the object information */
    51fa:	0031      	movs	r1, r6
    51fc:	0028      	movs	r0, r5
    51fe:	4b08      	ldr	r3, [pc, #32]	; (5220 <f_readdir+0x60>)
    5200:	4798      	blx	r3
				res = dir_next(dp, 0);		/* Increment index for next */
    5202:	2100      	movs	r1, #0
    5204:	0028      	movs	r0, r5
    5206:	4b07      	ldr	r3, [pc, #28]	; (5224 <f_readdir+0x64>)
    5208:	4798      	blx	r3
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    520a:	2804      	cmp	r0, #4
    520c:	d0ec      	beq.n	51e8 <f_readdir+0x28>
				res = dir_next(dp, 0);		/* Increment index for next */
    520e:	0004      	movs	r4, r0
    5210:	e7ea      	b.n	51e8 <f_readdir+0x28>
    5212:	46c0      	nop			; (mov r8, r8)
    5214:	00003b61 	.word	0x00003b61
    5218:	00004751 	.word	0x00004751
    521c:	000042d5 	.word	0x000042d5
    5220:	00003a95 	.word	0x00003a95
    5224:	000045a9 	.word	0x000045a9

00005228 <sd_init>:

static FATFS FatFs; // File system object
static FIL Fil;     // File object
static bool file_opened = false; // ???? ?????????? ?????

bool sd_init(void) {
    5228:	b510      	push	{r4, lr}
	if (f_mount(&FatFs, "", 0) == FR_OK) {
    522a:	2200      	movs	r2, #0
    522c:	4907      	ldr	r1, [pc, #28]	; (524c <sd_init+0x24>)
    522e:	4808      	ldr	r0, [pc, #32]	; (5250 <sd_init+0x28>)
    5230:	4b08      	ldr	r3, [pc, #32]	; (5254 <sd_init+0x2c>)
    5232:	4798      	blx	r3
    5234:	2800      	cmp	r0, #0
    5236:	d004      	beq.n	5242 <sd_init+0x1a>
		printf("SD card mounted successfully.\r\n");
		return true;
		} else {
		printf("SD card mount failed.\r\n");
    5238:	4807      	ldr	r0, [pc, #28]	; (5258 <sd_init+0x30>)
    523a:	4b08      	ldr	r3, [pc, #32]	; (525c <sd_init+0x34>)
    523c:	4798      	blx	r3
		return false;
    523e:	2000      	movs	r0, #0
	}
}
    5240:	bd10      	pop	{r4, pc}
		printf("SD card mounted successfully.\r\n");
    5242:	4807      	ldr	r0, [pc, #28]	; (5260 <sd_init+0x38>)
    5244:	4b05      	ldr	r3, [pc, #20]	; (525c <sd_init+0x34>)
    5246:	4798      	blx	r3
		return true;
    5248:	2001      	movs	r0, #1
    524a:	e7f9      	b.n	5240 <sd_init+0x18>
    524c:	000131f8 	.word	0x000131f8
    5250:	20000acc 	.word	0x20000acc
    5254:	00004a8d 	.word	0x00004a8d
    5258:	000128ac 	.word	0x000128ac
    525c:	00008a31 	.word	0x00008a31
    5260:	0001288c 	.word	0x0001288c

00005264 <sd_write_line>:


bool sd_write_line(const char *filename, const char *buffer, uint32_t length) {
    5264:	b570      	push	{r4, r5, r6, lr}
    5266:	b08c      	sub	sp, #48	; 0x30
    5268:	0004      	movs	r4, r0
    526a:	000e      	movs	r6, r1
    526c:	0015      	movs	r5, r2
	FIL file;
	UINT bw;

	if (f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE) == FR_OK) {
    526e:	2232      	movs	r2, #50	; 0x32
    5270:	0001      	movs	r1, r0
    5272:	a802      	add	r0, sp, #8
    5274:	4b0e      	ldr	r3, [pc, #56]	; (52b0 <sd_write_line+0x4c>)
    5276:	4798      	blx	r3
    5278:	2800      	cmp	r0, #0
    527a:	d10d      	bne.n	5298 <sd_write_line+0x34>
		if (f_write(&file, buffer, length, &bw) == FR_OK && bw == length) {
    527c:	ab01      	add	r3, sp, #4
    527e:	002a      	movs	r2, r5
    5280:	0031      	movs	r1, r6
    5282:	a802      	add	r0, sp, #8
    5284:	4e0b      	ldr	r6, [pc, #44]	; (52b4 <sd_write_line+0x50>)
    5286:	47b0      	blx	r6
    5288:	2800      	cmp	r0, #0
    528a:	d102      	bne.n	5292 <sd_write_line+0x2e>
    528c:	9b01      	ldr	r3, [sp, #4]
    528e:	429d      	cmp	r5, r3
    5290:	d009      	beq.n	52a6 <sd_write_line+0x42>
			f_close(&file);
			return true;
		}
		f_close(&file);
    5292:	a802      	add	r0, sp, #8
    5294:	4b08      	ldr	r3, [pc, #32]	; (52b8 <sd_write_line+0x54>)
    5296:	4798      	blx	r3
	}
	printf("Failed to write to file: %s\r\n", filename);
    5298:	0021      	movs	r1, r4
    529a:	4808      	ldr	r0, [pc, #32]	; (52bc <sd_write_line+0x58>)
    529c:	4b08      	ldr	r3, [pc, #32]	; (52c0 <sd_write_line+0x5c>)
    529e:	4798      	blx	r3
	return false;
    52a0:	2000      	movs	r0, #0
}
    52a2:	b00c      	add	sp, #48	; 0x30
    52a4:	bd70      	pop	{r4, r5, r6, pc}
			f_close(&file);
    52a6:	a802      	add	r0, sp, #8
    52a8:	4b03      	ldr	r3, [pc, #12]	; (52b8 <sd_write_line+0x54>)
    52aa:	4798      	blx	r3
			return true;
    52ac:	2001      	movs	r0, #1
    52ae:	e7f8      	b.n	52a2 <sd_write_line+0x3e>
    52b0:	00004af1 	.word	0x00004af1
    52b4:	00004e85 	.word	0x00004e85
    52b8:	000050f5 	.word	0x000050f5
    52bc:	000129a8 	.word	0x000129a8
    52c0:	0000896d 	.word	0x0000896d

000052c4 <sd_close_file>:
		sd_close_file();
		return -1; 
	}
}

void sd_close_file(void) {
    52c4:	b510      	push	{r4, lr}
	if (file_opened) {
    52c6:	4b07      	ldr	r3, [pc, #28]	; (52e4 <sd_close_file+0x20>)
    52c8:	781b      	ldrb	r3, [r3, #0]
    52ca:	2b00      	cmp	r3, #0
    52cc:	d100      	bne.n	52d0 <sd_close_file+0xc>
		f_close(&Fil);
		file_opened = false;
		printf("File closed.\r\n");
	}
}
    52ce:	bd10      	pop	{r4, pc}
		f_close(&Fil);
    52d0:	4805      	ldr	r0, [pc, #20]	; (52e8 <sd_close_file+0x24>)
    52d2:	4b06      	ldr	r3, [pc, #24]	; (52ec <sd_close_file+0x28>)
    52d4:	4798      	blx	r3
		file_opened = false;
    52d6:	2200      	movs	r2, #0
    52d8:	4b02      	ldr	r3, [pc, #8]	; (52e4 <sd_close_file+0x20>)
    52da:	701a      	strb	r2, [r3, #0]
		printf("File closed.\r\n");
    52dc:	4804      	ldr	r0, [pc, #16]	; (52f0 <sd_close_file+0x2c>)
    52de:	4b05      	ldr	r3, [pc, #20]	; (52f4 <sd_close_file+0x30>)
    52e0:	4798      	blx	r3
}
    52e2:	e7f4      	b.n	52ce <sd_close_file+0xa>
    52e4:	20000d24 	.word	0x20000d24
    52e8:	20000cfc 	.word	0x20000cfc
    52ec:	000050f5 	.word	0x000050f5
    52f0:	0001287c 	.word	0x0001287c
    52f4:	00008a31 	.word	0x00008a31

000052f8 <sd_read_file_chunk>:
int sd_read_file_chunk(const char *filename, uint8_t *buffer, uint32_t length, uint32_t *bytes_read) {
    52f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52fa:	b083      	sub	sp, #12
    52fc:	0004      	movs	r4, r0
    52fe:	000d      	movs	r5, r1
    5300:	0016      	movs	r6, r2
    5302:	001f      	movs	r7, r3
	if (!file_opened) {
    5304:	4b1c      	ldr	r3, [pc, #112]	; (5378 <sd_read_file_chunk+0x80>)
    5306:	781b      	ldrb	r3, [r3, #0]
    5308:	2b00      	cmp	r3, #0
    530a:	d10d      	bne.n	5328 <sd_read_file_chunk+0x30>
		if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    530c:	2201      	movs	r2, #1
    530e:	0001      	movs	r1, r0
    5310:	481a      	ldr	r0, [pc, #104]	; (537c <sd_read_file_chunk+0x84>)
    5312:	4b1b      	ldr	r3, [pc, #108]	; (5380 <sd_read_file_chunk+0x88>)
    5314:	4798      	blx	r3
    5316:	2800      	cmp	r0, #0
    5318:	d115      	bne.n	5346 <sd_read_file_chunk+0x4e>
			file_opened = true;
    531a:	2201      	movs	r2, #1
    531c:	4b16      	ldr	r3, [pc, #88]	; (5378 <sd_read_file_chunk+0x80>)
    531e:	701a      	strb	r2, [r3, #0]
			printf("File opened: %s\r\n", filename);
    5320:	0021      	movs	r1, r4
    5322:	4818      	ldr	r0, [pc, #96]	; (5384 <sd_read_file_chunk+0x8c>)
    5324:	4b18      	ldr	r3, [pc, #96]	; (5388 <sd_read_file_chunk+0x90>)
    5326:	4798      	blx	r3
	if (f_read(&Fil, buffer, length, &br) == FR_OK) {
    5328:	ab01      	add	r3, sp, #4
    532a:	0032      	movs	r2, r6
    532c:	0029      	movs	r1, r5
    532e:	4813      	ldr	r0, [pc, #76]	; (537c <sd_read_file_chunk+0x84>)
    5330:	4d16      	ldr	r5, [pc, #88]	; (538c <sd_read_file_chunk+0x94>)
    5332:	47a8      	blx	r5
    5334:	2800      	cmp	r0, #0
    5336:	d115      	bne.n	5364 <sd_read_file_chunk+0x6c>
		*bytes_read = br;
    5338:	9b01      	ldr	r3, [sp, #4]
    533a:	603b      	str	r3, [r7, #0]
		if (br == 0) { 
    533c:	2b00      	cmp	r3, #0
    533e:	d009      	beq.n	5354 <sd_read_file_chunk+0x5c>
		return 0; 
    5340:	2000      	movs	r0, #0
}
    5342:	b003      	add	sp, #12
    5344:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Failed to open file: %s\r\n", filename);
    5346:	0021      	movs	r1, r4
    5348:	4811      	ldr	r0, [pc, #68]	; (5390 <sd_read_file_chunk+0x98>)
    534a:	4b0f      	ldr	r3, [pc, #60]	; (5388 <sd_read_file_chunk+0x90>)
    534c:	4798      	blx	r3
			return -1; 
    534e:	2001      	movs	r0, #1
    5350:	4240      	negs	r0, r0
    5352:	e7f6      	b.n	5342 <sd_read_file_chunk+0x4a>
			sd_close_file();
    5354:	4b0f      	ldr	r3, [pc, #60]	; (5394 <sd_read_file_chunk+0x9c>)
    5356:	4798      	blx	r3
			printf("End of file reached: %s\r\n", filename);
    5358:	0021      	movs	r1, r4
    535a:	480f      	ldr	r0, [pc, #60]	; (5398 <sd_read_file_chunk+0xa0>)
    535c:	4b0a      	ldr	r3, [pc, #40]	; (5388 <sd_read_file_chunk+0x90>)
    535e:	4798      	blx	r3
		return 0; 
    5360:	2000      	movs	r0, #0
    5362:	e7ee      	b.n	5342 <sd_read_file_chunk+0x4a>
		printf("Failed to read file: %s\r\n", filename);
    5364:	0021      	movs	r1, r4
    5366:	480d      	ldr	r0, [pc, #52]	; (539c <sd_read_file_chunk+0xa4>)
    5368:	4b07      	ldr	r3, [pc, #28]	; (5388 <sd_read_file_chunk+0x90>)
    536a:	4798      	blx	r3
		sd_close_file();
    536c:	4b09      	ldr	r3, [pc, #36]	; (5394 <sd_read_file_chunk+0x9c>)
    536e:	4798      	blx	r3
		return -1; 
    5370:	2001      	movs	r0, #1
    5372:	4240      	negs	r0, r0
    5374:	e7e5      	b.n	5342 <sd_read_file_chunk+0x4a>
    5376:	46c0      	nop			; (mov r8, r8)
    5378:	20000d24 	.word	0x20000d24
    537c:	20000cfc 	.word	0x20000cfc
    5380:	00004af1 	.word	0x00004af1
    5384:	00012940 	.word	0x00012940
    5388:	0000896d 	.word	0x0000896d
    538c:	00004d0d 	.word	0x00004d0d
    5390:	00012954 	.word	0x00012954
    5394:	000052c5 	.word	0x000052c5
    5398:	00012970 	.word	0x00012970
    539c:	0001298c 	.word	0x0001298c

000053a0 <sd_list_files>:

bool sd_list_files(const char *path) {
    53a0:	b510      	push	{r4, lr}
    53a2:	b092      	sub	sp, #72	; 0x48
    53a4:	0004      	movs	r4, r0
	DIR dir;
	FILINFO fno;

	if (f_opendir(&dir, path) == FR_OK) {
    53a6:	0001      	movs	r1, r0
    53a8:	a807      	add	r0, sp, #28
    53aa:	4b17      	ldr	r3, [pc, #92]	; (5408 <sd_list_files+0x68>)
    53ac:	4798      	blx	r3
    53ae:	2800      	cmp	r0, #0
    53b0:	d124      	bne.n	53fc <sd_list_files+0x5c>
		printf("Listing files in directory: %s\r\n", path);
    53b2:	0021      	movs	r1, r4
    53b4:	4815      	ldr	r0, [pc, #84]	; (540c <sd_list_files+0x6c>)
    53b6:	4b16      	ldr	r3, [pc, #88]	; (5410 <sd_list_files+0x70>)
    53b8:	4798      	blx	r3
    53ba:	e005      	b.n	53c8 <sd_list_files+0x28>
		while (true) {
			if (f_readdir(&dir, &fno) != FR_OK || fno.fname[0] == 0) break; // End of directory
			if (fno.fattrib & AM_DIR) {
				printf("[DIR]  %s\r\n", fno.fname);
				} else {
				printf("[FILE] %s (%lu bytes)\r\n", fno.fname, fno.fsize);
    53bc:	9a01      	ldr	r2, [sp, #4]
    53be:	210d      	movs	r1, #13
    53c0:	4469      	add	r1, sp
    53c2:	4814      	ldr	r0, [pc, #80]	; (5414 <sd_list_files+0x74>)
    53c4:	4b12      	ldr	r3, [pc, #72]	; (5410 <sd_list_files+0x70>)
    53c6:	4798      	blx	r3
			if (f_readdir(&dir, &fno) != FR_OK || fno.fname[0] == 0) break; // End of directory
    53c8:	a901      	add	r1, sp, #4
    53ca:	a807      	add	r0, sp, #28
    53cc:	4b12      	ldr	r3, [pc, #72]	; (5418 <sd_list_files+0x78>)
    53ce:	4798      	blx	r3
    53d0:	2800      	cmp	r0, #0
    53d2:	d10d      	bne.n	53f0 <sd_list_files+0x50>
    53d4:	ab01      	add	r3, sp, #4
    53d6:	7a5b      	ldrb	r3, [r3, #9]
    53d8:	2b00      	cmp	r3, #0
    53da:	d009      	beq.n	53f0 <sd_list_files+0x50>
			if (fno.fattrib & AM_DIR) {
    53dc:	ab01      	add	r3, sp, #4
    53de:	7a1b      	ldrb	r3, [r3, #8]
    53e0:	06db      	lsls	r3, r3, #27
    53e2:	d5eb      	bpl.n	53bc <sd_list_files+0x1c>
				printf("[DIR]  %s\r\n", fno.fname);
    53e4:	210d      	movs	r1, #13
    53e6:	4469      	add	r1, sp
    53e8:	480c      	ldr	r0, [pc, #48]	; (541c <sd_list_files+0x7c>)
    53ea:	4b09      	ldr	r3, [pc, #36]	; (5410 <sd_list_files+0x70>)
    53ec:	4798      	blx	r3
    53ee:	e7eb      	b.n	53c8 <sd_list_files+0x28>
			}
		}
		f_closedir(&dir);
    53f0:	a807      	add	r0, sp, #28
    53f2:	4b0b      	ldr	r3, [pc, #44]	; (5420 <sd_list_files+0x80>)
    53f4:	4798      	blx	r3
		return true;
    53f6:	2001      	movs	r0, #1
		} else {
		printf("Failed to open directory: %s\r\n", path);
		return false;
	}
}
    53f8:	b012      	add	sp, #72	; 0x48
    53fa:	bd10      	pop	{r4, pc}
		printf("Failed to open directory: %s\r\n", path);
    53fc:	0021      	movs	r1, r4
    53fe:	4809      	ldr	r0, [pc, #36]	; (5424 <sd_list_files+0x84>)
    5400:	4b03      	ldr	r3, [pc, #12]	; (5410 <sd_list_files+0x70>)
    5402:	4798      	blx	r3
		return false;
    5404:	2000      	movs	r0, #0
    5406:	e7f7      	b.n	53f8 <sd_list_files+0x58>
    5408:	00005121 	.word	0x00005121
    540c:	000128c4 	.word	0x000128c4
    5410:	0000896d 	.word	0x0000896d
    5414:	000128f4 	.word	0x000128f4
    5418:	000051c1 	.word	0x000051c1
    541c:	000128e8 	.word	0x000128e8
    5420:	000051a5 	.word	0x000051a5
    5424:	0001290c 	.word	0x0001290c

00005428 <sd_print_file>:

bool sd_print_file(const char *filename) {
    5428:	b530      	push	{r4, r5, lr}
    542a:	4c22      	ldr	r4, [pc, #136]	; (54b4 <sd_print_file+0x8c>)
    542c:	44a5      	add	sp, r4
    542e:	0004      	movs	r4, r0
	uint8_t buffer[512];
	UINT br;

	if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    5430:	2201      	movs	r2, #1
    5432:	0001      	movs	r1, r0
    5434:	4820      	ldr	r0, [pc, #128]	; (54b8 <sd_print_file+0x90>)
    5436:	4b21      	ldr	r3, [pc, #132]	; (54bc <sd_print_file+0x94>)
    5438:	4798      	blx	r3
    543a:	2800      	cmp	r0, #0
    543c:	d133      	bne.n	54a6 <sd_print_file+0x7e>
		printf("Reading file: %s\r\n", filename);
    543e:	0021      	movs	r1, r4
    5440:	481f      	ldr	r0, [pc, #124]	; (54c0 <sd_print_file+0x98>)
    5442:	4b20      	ldr	r3, [pc, #128]	; (54c4 <sd_print_file+0x9c>)
    5444:	4798      	blx	r3
		while (true) {
			if (f_read(&Fil, buffer, sizeof(buffer), &br) != FR_OK || br == 0) break;
    5446:	ab01      	add	r3, sp, #4
    5448:	2280      	movs	r2, #128	; 0x80
    544a:	0092      	lsls	r2, r2, #2
    544c:	a902      	add	r1, sp, #8
    544e:	481a      	ldr	r0, [pc, #104]	; (54b8 <sd_print_file+0x90>)
    5450:	4c1d      	ldr	r4, [pc, #116]	; (54c8 <sd_print_file+0xa0>)
    5452:	47a0      	blx	r4
    5454:	2800      	cmp	r0, #0
    5456:	d11e      	bne.n	5496 <sd_print_file+0x6e>
    5458:	9b01      	ldr	r3, [sp, #4]
    545a:	2b00      	cmp	r3, #0
    545c:	d01b      	beq.n	5496 <sd_print_file+0x6e>
    545e:	2400      	movs	r4, #0
    5460:	e004      	b.n	546c <sd_print_file+0x44>
#ifdef __SCLE
	if ((_p->_flags & __SCLE) && _c == '\n')
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
		return (*_p->_p++ = _c);
    5462:	6813      	ldr	r3, [r2, #0]
    5464:	1c58      	adds	r0, r3, #1
    5466:	6010      	str	r0, [r2, #0]
    5468:	7019      	strb	r1, [r3, #0]
			for (UINT i = 0; i < br; i++) {
    546a:	3401      	adds	r4, #1
    546c:	9b01      	ldr	r3, [sp, #4]
    546e:	429c      	cmp	r4, r3
    5470:	d2e9      	bcs.n	5446 <sd_print_file+0x1e>
				putchar(buffer[i]);
    5472:	4b16      	ldr	r3, [pc, #88]	; (54cc <sd_print_file+0xa4>)
    5474:	6818      	ldr	r0, [r3, #0]
    5476:	ab02      	add	r3, sp, #8
    5478:	5d19      	ldrb	r1, [r3, r4]
    547a:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
    547c:	6893      	ldr	r3, [r2, #8]
    547e:	3b01      	subs	r3, #1
    5480:	6093      	str	r3, [r2, #8]
    5482:	2b00      	cmp	r3, #0
    5484:	daed      	bge.n	5462 <sd_print_file+0x3a>
    5486:	6995      	ldr	r5, [r2, #24]
    5488:	42ab      	cmp	r3, r5
    548a:	db01      	blt.n	5490 <sd_print_file+0x68>
    548c:	290a      	cmp	r1, #10
    548e:	d1e8      	bne.n	5462 <sd_print_file+0x3a>
	else
		return (__swbuf_r(_ptr, _c, _p));
    5490:	4b0f      	ldr	r3, [pc, #60]	; (54d0 <sd_print_file+0xa8>)
    5492:	4798      	blx	r3
    5494:	e7e9      	b.n	546a <sd_print_file+0x42>
			}
		}
		f_close(&Fil);
    5496:	4808      	ldr	r0, [pc, #32]	; (54b8 <sd_print_file+0x90>)
    5498:	4b0e      	ldr	r3, [pc, #56]	; (54d4 <sd_print_file+0xac>)
    549a:	4798      	blx	r3
		return true;
    549c:	2001      	movs	r0, #1
		} else {
		printf("Failed to open file: %s\r\n", filename);
		return false;
	}
}
    549e:	2383      	movs	r3, #131	; 0x83
    54a0:	009b      	lsls	r3, r3, #2
    54a2:	449d      	add	sp, r3
    54a4:	bd30      	pop	{r4, r5, pc}
		printf("Failed to open file: %s\r\n", filename);
    54a6:	0021      	movs	r1, r4
    54a8:	480b      	ldr	r0, [pc, #44]	; (54d8 <sd_print_file+0xb0>)
    54aa:	4b06      	ldr	r3, [pc, #24]	; (54c4 <sd_print_file+0x9c>)
    54ac:	4798      	blx	r3
		return false;
    54ae:	2000      	movs	r0, #0
    54b0:	e7f5      	b.n	549e <sd_print_file+0x76>
    54b2:	46c0      	nop			; (mov r8, r8)
    54b4:	fffffdf4 	.word	0xfffffdf4
    54b8:	20000cfc 	.word	0x20000cfc
    54bc:	00004af1 	.word	0x00004af1
    54c0:	0001292c 	.word	0x0001292c
    54c4:	0000896d 	.word	0x0000896d
    54c8:	00004d0d 	.word	0x00004d0d
    54cc:	20000080 	.word	0x20000080
    54d0:	0000cf71 	.word	0x0000cf71
    54d4:	000050f5 	.word	0x000050f5
    54d8:	00012954 	.word	0x00012954

000054dc <rcvr_mmc>:
static
void rcvr_mmc (
BYTE *buff,	/* Pointer to read buffer */
UINT bc		/* Number of bytes to receive */
)
{
    54dc:	b510      	push	{r4, lr}
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    54de:	b289      	uxth	r1, r1
    54e0:	4b01      	ldr	r3, [pc, #4]	; (54e8 <rcvr_mmc+0xc>)
    54e2:	4798      	blx	r3
}
    54e4:	bd10      	pop	{r4, pc}
    54e6:	46c0      	nop			; (mov r8, r8)
    54e8:	000022f5 	.word	0x000022f5

000054ec <sd_deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void sd_deselect (void)
{
    54ec:	b500      	push	{lr}
    54ee:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    54f0:	2280      	movs	r2, #128	; 0x80
    54f2:	0312      	lsls	r2, r2, #12
    54f4:	23c0      	movs	r3, #192	; 0xc0
    54f6:	05db      	lsls	r3, r3, #23
    54f8:	619a      	str	r2, [r3, #24]
	BYTE d;

	gpio_set_pin_level(SD_CS, true);				/* Set CS# high */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    54fa:	2101      	movs	r1, #1
    54fc:	466b      	mov	r3, sp
    54fe:	1dd8      	adds	r0, r3, #7
    5500:	4b01      	ldr	r3, [pc, #4]	; (5508 <sd_deselect+0x1c>)
    5502:	4798      	blx	r3
}
    5504:	b003      	add	sp, #12
    5506:	bd00      	pop	{pc}
    5508:	000054dd 	.word	0x000054dd

0000550c <dly_us>:
{
    550c:	b510      	push	{r4, lr}
    550e:	0004      	movs	r4, r0
		delay_us(n);
    5510:	b280      	uxth	r0, r0
    5512:	4b03      	ldr	r3, [pc, #12]	; (5520 <dly_us+0x14>)
    5514:	4798      	blx	r3
	} while (--n);
    5516:	3c01      	subs	r4, #1
    5518:	2c00      	cmp	r4, #0
    551a:	d1fc      	bne.n	5516 <dly_us+0xa>
}
    551c:	bd10      	pop	{r4, pc}
    551e:	46c0      	nop			; (mov r8, r8)
    5520:	00000199 	.word	0x00000199

00005524 <wait_ready>:
{
    5524:	b530      	push	{r4, r5, lr}
    5526:	b083      	sub	sp, #12
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    5528:	4c0a      	ldr	r4, [pc, #40]	; (5554 <wait_ready+0x30>)
    552a:	2c00      	cmp	r4, #0
    552c:	d00d      	beq.n	554a <wait_ready+0x26>
		rcvr_mmc(&d, 1);
    552e:	466b      	mov	r3, sp
    5530:	1ddd      	adds	r5, r3, #7
    5532:	2101      	movs	r1, #1
    5534:	0028      	movs	r0, r5
    5536:	4b08      	ldr	r3, [pc, #32]	; (5558 <wait_ready+0x34>)
    5538:	4798      	blx	r3
		if (d == 0xFF) break;
    553a:	782b      	ldrb	r3, [r5, #0]
    553c:	2bff      	cmp	r3, #255	; 0xff
    553e:	d004      	beq.n	554a <wait_ready+0x26>
		dly_us(100);
    5540:	2064      	movs	r0, #100	; 0x64
    5542:	4b06      	ldr	r3, [pc, #24]	; (555c <wait_ready+0x38>)
    5544:	4798      	blx	r3
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    5546:	3c01      	subs	r4, #1
    5548:	e7ef      	b.n	552a <wait_ready+0x6>
	return tmr ? 1 : 0;
    554a:	0020      	movs	r0, r4
    554c:	1e44      	subs	r4, r0, #1
    554e:	41a0      	sbcs	r0, r4
}
    5550:	b003      	add	sp, #12
    5552:	bd30      	pop	{r4, r5, pc}
    5554:	00001388 	.word	0x00001388
    5558:	000054dd 	.word	0x000054dd
    555c:	0000550d 	.word	0x0000550d

00005560 <sd_select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int sd_select (void)	/* 1:OK, 0:Timeout */
{
    5560:	b510      	push	{r4, lr}
    5562:	b082      	sub	sp, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5564:	2280      	movs	r2, #128	; 0x80
    5566:	0312      	lsls	r2, r2, #12
    5568:	23c0      	movs	r3, #192	; 0xc0
    556a:	05db      	lsls	r3, r3, #23
    556c:	615a      	str	r2, [r3, #20]
	BYTE d;

	gpio_set_pin_level(SD_CS, false);			/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    556e:	2101      	movs	r1, #1
    5570:	466b      	mov	r3, sp
    5572:	1dd8      	adds	r0, r3, #7
    5574:	4b06      	ldr	r3, [pc, #24]	; (5590 <sd_select+0x30>)
    5576:	4798      	blx	r3
	if (wait_ready()) return 1;	/* Wait for card ready */
    5578:	4b06      	ldr	r3, [pc, #24]	; (5594 <sd_select+0x34>)
    557a:	4798      	blx	r3
    557c:	1e04      	subs	r4, r0, #0
    557e:	d003      	beq.n	5588 <sd_select+0x28>
    5580:	2401      	movs	r4, #1

	sd_deselect();
	return 0;			/* Failed */
}
    5582:	0020      	movs	r0, r4
    5584:	b002      	add	sp, #8
    5586:	bd10      	pop	{r4, pc}
	sd_deselect();
    5588:	4b03      	ldr	r3, [pc, #12]	; (5598 <sd_select+0x38>)
    558a:	4798      	blx	r3
	return 0;			/* Failed */
    558c:	e7f9      	b.n	5582 <sd_select+0x22>
    558e:	46c0      	nop			; (mov r8, r8)
    5590:	000054dd 	.word	0x000054dd
    5594:	00005525 	.word	0x00005525
    5598:	000054ed 	.word	0x000054ed

0000559c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count */
)
{
    559c:	b5f0      	push	{r4, r5, r6, r7, lr}
    559e:	b083      	sub	sp, #12
    55a0:	0006      	movs	r6, r0
    55a2:	000f      	movs	r7, r1
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    55a4:	25fa      	movs	r5, #250	; 0xfa
    55a6:	00ad      	lsls	r5, r5, #2
    55a8:	2d00      	cmp	r5, #0
    55aa:	d00c      	beq.n	55c6 <rcvr_datablock+0x2a>
		rcvr_mmc(d, 1);
    55ac:	ac01      	add	r4, sp, #4
    55ae:	2101      	movs	r1, #1
    55b0:	0020      	movs	r0, r4
    55b2:	4b0d      	ldr	r3, [pc, #52]	; (55e8 <rcvr_datablock+0x4c>)
    55b4:	4798      	blx	r3
		if (d[0] != 0xFF) break;
    55b6:	7823      	ldrb	r3, [r4, #0]
    55b8:	2bff      	cmp	r3, #255	; 0xff
    55ba:	d104      	bne.n	55c6 <rcvr_datablock+0x2a>
		dly_us(100);
    55bc:	2064      	movs	r0, #100	; 0x64
    55be:	4b0b      	ldr	r3, [pc, #44]	; (55ec <rcvr_datablock+0x50>)
    55c0:	4798      	blx	r3
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    55c2:	3d01      	subs	r5, #1
    55c4:	e7f0      	b.n	55a8 <rcvr_datablock+0xc>
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    55c6:	ab01      	add	r3, sp, #4
    55c8:	781b      	ldrb	r3, [r3, #0]
    55ca:	2bfe      	cmp	r3, #254	; 0xfe
    55cc:	d002      	beq.n	55d4 <rcvr_datablock+0x38>
    55ce:	2000      	movs	r0, #0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    55d0:	b003      	add	sp, #12
    55d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    55d4:	0039      	movs	r1, r7
    55d6:	0030      	movs	r0, r6
    55d8:	4c03      	ldr	r4, [pc, #12]	; (55e8 <rcvr_datablock+0x4c>)
    55da:	47a0      	blx	r4
	rcvr_mmc(d, 2);					/* Discard CRC */
    55dc:	2102      	movs	r1, #2
    55de:	a801      	add	r0, sp, #4
    55e0:	47a0      	blx	r4
	return 1;						/* Return with success */
    55e2:	2001      	movs	r0, #1
    55e4:	e7f4      	b.n	55d0 <rcvr_datablock+0x34>
    55e6:	46c0      	nop			; (mov r8, r8)
    55e8:	000054dd 	.word	0x000054dd
    55ec:	0000550d 	.word	0x0000550d

000055f0 <xmit_mmc>:
{
    55f0:	b510      	push	{r4, lr}
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    55f2:	b289      	uxth	r1, r1
    55f4:	4b01      	ldr	r3, [pc, #4]	; (55fc <xmit_mmc+0xc>)
    55f6:	4798      	blx	r3
}
    55f8:	bd10      	pop	{r4, pc}
    55fa:	46c0      	nop			; (mov r8, r8)
    55fc:	00002311 	.word	0x00002311

00005600 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
BYTE cmd,		/* Command byte */
DWORD arg		/* Argument */
)
{
    5600:	b530      	push	{r4, r5, lr}
    5602:	b083      	sub	sp, #12
    5604:	0004      	movs	r4, r0
    5606:	000d      	movs	r5, r1
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    5608:	b243      	sxtb	r3, r0
    560a:	2b00      	cmp	r3, #0
    560c:	db09      	blt.n	5622 <send_cmd+0x22>
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    560e:	2c0c      	cmp	r4, #12
    5610:	d010      	beq.n	5634 <send_cmd+0x34>
		sd_deselect();
    5612:	4b22      	ldr	r3, [pc, #136]	; (569c <send_cmd+0x9c>)
    5614:	4798      	blx	r3
		if (!sd_select()) return 0xFF;
    5616:	4b22      	ldr	r3, [pc, #136]	; (56a0 <send_cmd+0xa0>)
    5618:	4798      	blx	r3
    561a:	2800      	cmp	r0, #0
    561c:	d10a      	bne.n	5634 <send_cmd+0x34>
    561e:	20ff      	movs	r0, #255	; 0xff
    5620:	e02f      	b.n	5682 <send_cmd+0x82>
		cmd &= 0x7F;
    5622:	237f      	movs	r3, #127	; 0x7f
    5624:	401c      	ands	r4, r3
		n = send_cmd(CMD55, 0);
    5626:	2100      	movs	r1, #0
    5628:	2037      	movs	r0, #55	; 0x37
    562a:	f7ff ffe9 	bl	5600 <send_cmd>
		if (n > 1) return n;
    562e:	2801      	cmp	r0, #1
    5630:	d827      	bhi.n	5682 <send_cmd+0x82>
    5632:	e7ec      	b.n	560e <send_cmd+0xe>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    5634:	2340      	movs	r3, #64	; 0x40
    5636:	4323      	orrs	r3, r4
    5638:	466a      	mov	r2, sp
    563a:	7013      	strb	r3, [r2, #0]
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    563c:	0e2b      	lsrs	r3, r5, #24
    563e:	7053      	strb	r3, [r2, #1]
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    5640:	0c2b      	lsrs	r3, r5, #16
    5642:	7093      	strb	r3, [r2, #2]
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    5644:	0a2b      	lsrs	r3, r5, #8
    5646:	70d3      	strb	r3, [r2, #3]
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    5648:	7115      	strb	r5, [r2, #4]
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    564a:	2c00      	cmp	r4, #0
    564c:	d01b      	beq.n	5686 <send_cmd+0x86>
	n = 0x01;						/* Dummy CRC + Stop */
    564e:	2301      	movs	r3, #1
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    5650:	2c08      	cmp	r4, #8
    5652:	d01a      	beq.n	568a <send_cmd+0x8a>
	buf[5] = n;
    5654:	466a      	mov	r2, sp
    5656:	7153      	strb	r3, [r2, #5]
	xmit_mmc(buf, 6);
    5658:	2106      	movs	r1, #6
    565a:	4668      	mov	r0, sp
    565c:	4b11      	ldr	r3, [pc, #68]	; (56a4 <send_cmd+0xa4>)
    565e:	4798      	blx	r3

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    5660:	2c0c      	cmp	r4, #12
    5662:	d014      	beq.n	568e <send_cmd+0x8e>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    5664:	240a      	movs	r4, #10
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
	rcvr_mmc(&d, 1);
    5666:	466b      	mov	r3, sp
    5668:	1ddd      	adds	r5, r3, #7
    566a:	2101      	movs	r1, #1
    566c:	0028      	movs	r0, r5
    566e:	4b0e      	ldr	r3, [pc, #56]	; (56a8 <send_cmd+0xa8>)
    5670:	4798      	blx	r3
	while ((d & 0x80) && --n);
    5672:	7828      	ldrb	r0, [r5, #0]
    5674:	b243      	sxtb	r3, r0
    5676:	2b00      	cmp	r3, #0
    5678:	da03      	bge.n	5682 <send_cmd+0x82>
    567a:	3c01      	subs	r4, #1
    567c:	b2e4      	uxtb	r4, r4
    567e:	2c00      	cmp	r4, #0
    5680:	d1f1      	bne.n	5666 <send_cmd+0x66>

	return d;			/* Return with the response value */
}
    5682:	b003      	add	sp, #12
    5684:	bd30      	pop	{r4, r5, pc}
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    5686:	2395      	movs	r3, #149	; 0x95
    5688:	e7e2      	b.n	5650 <send_cmd+0x50>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    568a:	2387      	movs	r3, #135	; 0x87
    568c:	e7e2      	b.n	5654 <send_cmd+0x54>
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    568e:	2101      	movs	r1, #1
    5690:	466b      	mov	r3, sp
    5692:	1dd8      	adds	r0, r3, #7
    5694:	4b04      	ldr	r3, [pc, #16]	; (56a8 <send_cmd+0xa8>)
    5696:	4798      	blx	r3
    5698:	e7e4      	b.n	5664 <send_cmd+0x64>
    569a:	46c0      	nop			; (mov r8, r8)
    569c:	000054ed 	.word	0x000054ed
    56a0:	00005561 	.word	0x00005561
    56a4:	000055f1 	.word	0x000055f1
    56a8:	000054dd 	.word	0x000054dd

000056ac <xmit_datablock>:
{
    56ac:	b530      	push	{r4, r5, lr}
    56ae:	b083      	sub	sp, #12
    56b0:	0005      	movs	r5, r0
    56b2:	000c      	movs	r4, r1
	if (!wait_ready()) return 0;
    56b4:	4b12      	ldr	r3, [pc, #72]	; (5700 <xmit_datablock+0x54>)
    56b6:	4798      	blx	r3
    56b8:	2800      	cmp	r0, #0
    56ba:	d101      	bne.n	56c0 <xmit_datablock+0x14>
}
    56bc:	b003      	add	sp, #12
    56be:	bd30      	pop	{r4, r5, pc}
	d[0] = token;
    56c0:	a801      	add	r0, sp, #4
    56c2:	7004      	strb	r4, [r0, #0]
	xmit_mmc(d, 1);				/* Xmit a token */
    56c4:	2101      	movs	r1, #1
    56c6:	4b0f      	ldr	r3, [pc, #60]	; (5704 <xmit_datablock+0x58>)
    56c8:	4798      	blx	r3
	if (token != 0xFD) {		/* Is it data token? */
    56ca:	2cfd      	cmp	r4, #253	; 0xfd
    56cc:	d013      	beq.n	56f6 <xmit_datablock+0x4a>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    56ce:	2180      	movs	r1, #128	; 0x80
    56d0:	0089      	lsls	r1, r1, #2
    56d2:	0028      	movs	r0, r5
    56d4:	4b0b      	ldr	r3, [pc, #44]	; (5704 <xmit_datablock+0x58>)
    56d6:	4798      	blx	r3
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    56d8:	ac01      	add	r4, sp, #4
    56da:	2102      	movs	r1, #2
    56dc:	0020      	movs	r0, r4
    56de:	4d0a      	ldr	r5, [pc, #40]	; (5708 <xmit_datablock+0x5c>)
    56e0:	47a8      	blx	r5
		rcvr_mmc(d, 1);			/* Receive data response */
    56e2:	2101      	movs	r1, #1
    56e4:	0020      	movs	r0, r4
    56e6:	47a8      	blx	r5
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    56e8:	7822      	ldrb	r2, [r4, #0]
    56ea:	231f      	movs	r3, #31
    56ec:	4013      	ands	r3, r2
    56ee:	2b05      	cmp	r3, #5
    56f0:	d003      	beq.n	56fa <xmit_datablock+0x4e>
		return 0;
    56f2:	2000      	movs	r0, #0
    56f4:	e7e2      	b.n	56bc <xmit_datablock+0x10>
	return 1;
    56f6:	2001      	movs	r0, #1
    56f8:	e7e0      	b.n	56bc <xmit_datablock+0x10>
    56fa:	2001      	movs	r0, #1
    56fc:	e7de      	b.n	56bc <xmit_datablock+0x10>
    56fe:	46c0      	nop			; (mov r8, r8)
    5700:	00005525 	.word	0x00005525
    5704:	000055f1 	.word	0x000055f1
    5708:	000054dd 	.word	0x000054dd

0000570c <disk_status>:

DSTATUS disk_status (
BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    570c:	2800      	cmp	r0, #0
    570e:	d102      	bne.n	5716 <disk_status+0xa>

	return Stat;
    5710:	4b02      	ldr	r3, [pc, #8]	; (571c <disk_status+0x10>)
    5712:	7818      	ldrb	r0, [r3, #0]
}
    5714:	4770      	bx	lr
	if (drv) return STA_NOINIT;
    5716:	2001      	movs	r0, #1
    5718:	e7fc      	b.n	5714 <disk_status+0x8>
    571a:	46c0      	nop			; (mov r8, r8)
    571c:	20000030 	.word	0x20000030

00005720 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
BYTE drv		/* Physical drive nmuber (0) */
)
{
    5720:	b5f0      	push	{r4, r5, r6, r7, lr}
    5722:	b083      	sub	sp, #12
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    5724:	2800      	cmp	r0, #0
    5726:	d003      	beq.n	5730 <disk_initialize+0x10>
    5728:	2403      	movs	r4, #3
	Stat = s;

	sd_deselect();

	return s;
}
    572a:	0020      	movs	r0, r4
    572c:	b003      	add	sp, #12
    572e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_ms(10);			/* 10ms */
    5730:	300a      	adds	r0, #10
    5732:	4b3d      	ldr	r3, [pc, #244]	; (5828 <disk_initialize+0x108>)
    5734:	4798      	blx	r3
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    5736:	240a      	movs	r4, #10
    5738:	e005      	b.n	5746 <disk_initialize+0x26>
    573a:	2101      	movs	r1, #1
    573c:	a801      	add	r0, sp, #4
    573e:	4b3b      	ldr	r3, [pc, #236]	; (582c <disk_initialize+0x10c>)
    5740:	4798      	blx	r3
    5742:	3c01      	subs	r4, #1
    5744:	b2e4      	uxtb	r4, r4
    5746:	2c00      	cmp	r4, #0
    5748:	d1f7      	bne.n	573a <disk_initialize+0x1a>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    574a:	2100      	movs	r1, #0
    574c:	2000      	movs	r0, #0
    574e:	4b38      	ldr	r3, [pc, #224]	; (5830 <disk_initialize+0x110>)
    5750:	4798      	blx	r3
    5752:	0006      	movs	r6, r0
    5754:	0007      	movs	r7, r0
    5756:	2801      	cmp	r0, #1
    5758:	d009      	beq.n	576e <disk_initialize+0x4e>
	CardType = ty;
    575a:	4b36      	ldr	r3, [pc, #216]	; (5834 <disk_initialize+0x114>)
    575c:	701c      	strb	r4, [r3, #0]
	s = ty ? 0 : STA_NOINIT;
    575e:	4263      	negs	r3, r4
    5760:	415c      	adcs	r4, r3
    5762:	b2e4      	uxtb	r4, r4
	Stat = s;
    5764:	4b34      	ldr	r3, [pc, #208]	; (5838 <disk_initialize+0x118>)
    5766:	701c      	strb	r4, [r3, #0]
	sd_deselect();
    5768:	4b34      	ldr	r3, [pc, #208]	; (583c <disk_initialize+0x11c>)
    576a:	4798      	blx	r3
	return s;
    576c:	e7dd      	b.n	572a <disk_initialize+0xa>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    576e:	21d5      	movs	r1, #213	; 0xd5
    5770:	0049      	lsls	r1, r1, #1
    5772:	2008      	movs	r0, #8
    5774:	4b2e      	ldr	r3, [pc, #184]	; (5830 <disk_initialize+0x110>)
    5776:	4798      	blx	r3
    5778:	2801      	cmp	r0, #1
    577a:	d015      	beq.n	57a8 <disk_initialize+0x88>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    577c:	2100      	movs	r1, #0
    577e:	20a9      	movs	r0, #169	; 0xa9
    5780:	4b2b      	ldr	r3, [pc, #172]	; (5830 <disk_initialize+0x110>)
    5782:	4798      	blx	r3
    5784:	2801      	cmp	r0, #1
    5786:	d93e      	bls.n	5806 <disk_initialize+0xe6>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    5788:	25fa      	movs	r5, #250	; 0xfa
    578a:	00ad      	lsls	r5, r5, #2
    578c:	2d00      	cmp	r5, #0
    578e:	d03d      	beq.n	580c <disk_initialize+0xec>
				if (send_cmd(cmd, 0) == 0) break;
    5790:	2100      	movs	r1, #0
    5792:	0030      	movs	r0, r6
    5794:	4b26      	ldr	r3, [pc, #152]	; (5830 <disk_initialize+0x110>)
    5796:	4798      	blx	r3
    5798:	2800      	cmp	r0, #0
    579a:	d037      	beq.n	580c <disk_initialize+0xec>
				dly_us(1000);
    579c:	20fa      	movs	r0, #250	; 0xfa
    579e:	0080      	lsls	r0, r0, #2
    57a0:	4b27      	ldr	r3, [pc, #156]	; (5840 <disk_initialize+0x120>)
    57a2:	4798      	blx	r3
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    57a4:	3d01      	subs	r5, #1
    57a6:	e7f1      	b.n	578c <disk_initialize+0x6c>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    57a8:	ad01      	add	r5, sp, #4
    57aa:	2104      	movs	r1, #4
    57ac:	0028      	movs	r0, r5
    57ae:	4b1f      	ldr	r3, [pc, #124]	; (582c <disk_initialize+0x10c>)
    57b0:	4798      	blx	r3
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    57b2:	78ab      	ldrb	r3, [r5, #2]
    57b4:	2b01      	cmp	r3, #1
    57b6:	d1d0      	bne.n	575a <disk_initialize+0x3a>
    57b8:	ab01      	add	r3, sp, #4
    57ba:	78db      	ldrb	r3, [r3, #3]
    57bc:	2baa      	cmp	r3, #170	; 0xaa
    57be:	d1cc      	bne.n	575a <disk_initialize+0x3a>
    57c0:	25fa      	movs	r5, #250	; 0xfa
    57c2:	00ad      	lsls	r5, r5, #2
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    57c4:	2d00      	cmp	r5, #0
    57c6:	d00c      	beq.n	57e2 <disk_initialize+0xc2>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    57c8:	2180      	movs	r1, #128	; 0x80
    57ca:	05c9      	lsls	r1, r1, #23
    57cc:	20a9      	movs	r0, #169	; 0xa9
    57ce:	4b18      	ldr	r3, [pc, #96]	; (5830 <disk_initialize+0x110>)
    57d0:	4798      	blx	r3
    57d2:	2800      	cmp	r0, #0
    57d4:	d005      	beq.n	57e2 <disk_initialize+0xc2>
					dly_us(1000);
    57d6:	20fa      	movs	r0, #250	; 0xfa
    57d8:	0080      	lsls	r0, r0, #2
    57da:	4b19      	ldr	r3, [pc, #100]	; (5840 <disk_initialize+0x120>)
    57dc:	4798      	blx	r3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    57de:	3d01      	subs	r5, #1
    57e0:	e7f0      	b.n	57c4 <disk_initialize+0xa4>
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    57e2:	2d00      	cmp	r5, #0
    57e4:	d0b9      	beq.n	575a <disk_initialize+0x3a>
    57e6:	2100      	movs	r1, #0
    57e8:	203a      	movs	r0, #58	; 0x3a
    57ea:	4b11      	ldr	r3, [pc, #68]	; (5830 <disk_initialize+0x110>)
    57ec:	4798      	blx	r3
    57ee:	2800      	cmp	r0, #0
    57f0:	d1b3      	bne.n	575a <disk_initialize+0x3a>
					rcvr_mmc(buf, 4);
    57f2:	ac01      	add	r4, sp, #4
    57f4:	2104      	movs	r1, #4
    57f6:	0020      	movs	r0, r4
    57f8:	4b0c      	ldr	r3, [pc, #48]	; (582c <disk_initialize+0x10c>)
    57fa:	4798      	blx	r3
					ty = (buf[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* SDv2+ */
    57fc:	7823      	ldrb	r3, [r4, #0]
    57fe:	065b      	lsls	r3, r3, #25
    5800:	d50f      	bpl.n	5822 <disk_initialize+0x102>
    5802:	2418      	movs	r4, #24
    5804:	e7a9      	b.n	575a <disk_initialize+0x3a>
				ty = CT_SDC2; cmd = ACMD41;	/* SDv1 */
    5806:	26a9      	movs	r6, #169	; 0xa9
    5808:	2708      	movs	r7, #8
    580a:	e7bd      	b.n	5788 <disk_initialize+0x68>
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    580c:	2d00      	cmp	r5, #0
    580e:	d0a4      	beq.n	575a <disk_initialize+0x3a>
    5810:	2180      	movs	r1, #128	; 0x80
    5812:	0089      	lsls	r1, r1, #2
    5814:	2010      	movs	r0, #16
    5816:	4b06      	ldr	r3, [pc, #24]	; (5830 <disk_initialize+0x110>)
    5818:	4798      	blx	r3
    581a:	2800      	cmp	r0, #0
    581c:	d19d      	bne.n	575a <disk_initialize+0x3a>
    581e:	003c      	movs	r4, r7
    5820:	e79b      	b.n	575a <disk_initialize+0x3a>
					ty = (buf[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* SDv2+ */
    5822:	2408      	movs	r4, #8
    5824:	e799      	b.n	575a <disk_initialize+0x3a>
    5826:	46c0      	nop			; (mov r8, r8)
    5828:	000001b9 	.word	0x000001b9
    582c:	000054dd 	.word	0x000054dd
    5830:	00005601 	.word	0x00005601
    5834:	20000d25 	.word	0x20000d25
    5838:	20000030 	.word	0x20000030
    583c:	000054ed 	.word	0x000054ed
    5840:	0000550d 	.word	0x0000550d

00005844 <disk_read>:
BYTE drv,			/* Physical drive nmuber (0) */
BYTE *buff,			/* Pointer to the data buffer to store read data */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    5844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5846:	000d      	movs	r5, r1
    5848:	0017      	movs	r7, r2
    584a:	001c      	movs	r4, r3
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    584c:	4b18      	ldr	r3, [pc, #96]	; (58b0 <disk_read+0x6c>)
    584e:	4798      	blx	r3
    5850:	07c3      	lsls	r3, r0, #31
    5852:	d501      	bpl.n	5858 <disk_read+0x14>
    5854:	2003      	movs	r0, #3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	sd_deselect();

	return count ? RES_ERROR : RES_OK;
}
    5856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    5858:	4b16      	ldr	r3, [pc, #88]	; (58b4 <disk_read+0x70>)
    585a:	781b      	ldrb	r3, [r3, #0]
    585c:	06db      	lsls	r3, r3, #27
    585e:	d400      	bmi.n	5862 <disk_read+0x1e>
    5860:	027f      	lsls	r7, r7, #9
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    5862:	2c01      	cmp	r4, #1
    5864:	d91c      	bls.n	58a0 <disk_read+0x5c>
    5866:	2612      	movs	r6, #18
	if (send_cmd(cmd, sect) == 0) {
    5868:	0039      	movs	r1, r7
    586a:	0030      	movs	r0, r6
    586c:	4b12      	ldr	r3, [pc, #72]	; (58b8 <disk_read+0x74>)
    586e:	4798      	blx	r3
    5870:	2800      	cmp	r0, #0
    5872:	d10f      	bne.n	5894 <disk_read+0x50>
			if (!rcvr_datablock(buff, 512)) break;
    5874:	2180      	movs	r1, #128	; 0x80
    5876:	0089      	lsls	r1, r1, #2
    5878:	0028      	movs	r0, r5
    587a:	4b10      	ldr	r3, [pc, #64]	; (58bc <disk_read+0x78>)
    587c:	4798      	blx	r3
    587e:	2800      	cmp	r0, #0
    5880:	d006      	beq.n	5890 <disk_read+0x4c>
			buff += 512;
    5882:	2380      	movs	r3, #128	; 0x80
    5884:	009b      	lsls	r3, r3, #2
    5886:	469c      	mov	ip, r3
    5888:	4465      	add	r5, ip
		} while (--count);
    588a:	3c01      	subs	r4, #1
    588c:	2c00      	cmp	r4, #0
    588e:	d1f1      	bne.n	5874 <disk_read+0x30>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    5890:	2e12      	cmp	r6, #18
    5892:	d007      	beq.n	58a4 <disk_read+0x60>
	sd_deselect();
    5894:	4b0a      	ldr	r3, [pc, #40]	; (58c0 <disk_read+0x7c>)
    5896:	4798      	blx	r3
	return count ? RES_ERROR : RES_OK;
    5898:	1e60      	subs	r0, r4, #1
    589a:	4184      	sbcs	r4, r0
    589c:	b2e0      	uxtb	r0, r4
    589e:	e7da      	b.n	5856 <disk_read+0x12>
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    58a0:	2611      	movs	r6, #17
    58a2:	e7e1      	b.n	5868 <disk_read+0x24>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    58a4:	2100      	movs	r1, #0
    58a6:	200c      	movs	r0, #12
    58a8:	4b03      	ldr	r3, [pc, #12]	; (58b8 <disk_read+0x74>)
    58aa:	4798      	blx	r3
    58ac:	e7f2      	b.n	5894 <disk_read+0x50>
    58ae:	46c0      	nop			; (mov r8, r8)
    58b0:	0000570d 	.word	0x0000570d
    58b4:	20000d25 	.word	0x20000d25
    58b8:	00005601 	.word	0x00005601
    58bc:	0000559d 	.word	0x0000559d
    58c0:	000054ed 	.word	0x000054ed

000058c4 <disk_write>:
BYTE drv,			/* Physical drive nmuber (0) */
const BYTE *buff,	/* Pointer to the data to be written */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    58c4:	b570      	push	{r4, r5, r6, lr}
    58c6:	000d      	movs	r5, r1
    58c8:	0016      	movs	r6, r2
    58ca:	001c      	movs	r4, r3
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    58cc:	4b21      	ldr	r3, [pc, #132]	; (5954 <disk_write+0x90>)
    58ce:	4798      	blx	r3
    58d0:	07c3      	lsls	r3, r0, #31
    58d2:	d501      	bpl.n	58d8 <disk_write+0x14>
    58d4:	2003      	movs	r0, #3
		}
	}
	sd_deselect();

	return count ? RES_ERROR : RES_OK;
}
    58d6:	bd70      	pop	{r4, r5, r6, pc}
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    58d8:	4b1f      	ldr	r3, [pc, #124]	; (5958 <disk_write+0x94>)
    58da:	781b      	ldrb	r3, [r3, #0]
    58dc:	06da      	lsls	r2, r3, #27
    58de:	d400      	bmi.n	58e2 <disk_write+0x1e>
    58e0:	0276      	lsls	r6, r6, #9
	if (count == 1) {	/* Single block write */
    58e2:	2c01      	cmp	r4, #1
    58e4:	d021      	beq.n	592a <disk_write+0x66>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    58e6:	220c      	movs	r2, #12
    58e8:	421a      	tst	r2, r3
    58ea:	d12c      	bne.n	5946 <disk_write+0x82>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    58ec:	0031      	movs	r1, r6
    58ee:	2019      	movs	r0, #25
    58f0:	4b1a      	ldr	r3, [pc, #104]	; (595c <disk_write+0x98>)
    58f2:	4798      	blx	r3
    58f4:	2800      	cmp	r0, #0
    58f6:	d112      	bne.n	591e <disk_write+0x5a>
				if (!xmit_datablock(buff, 0xFC)) break;
    58f8:	21fc      	movs	r1, #252	; 0xfc
    58fa:	0028      	movs	r0, r5
    58fc:	4b18      	ldr	r3, [pc, #96]	; (5960 <disk_write+0x9c>)
    58fe:	4798      	blx	r3
    5900:	2800      	cmp	r0, #0
    5902:	d006      	beq.n	5912 <disk_write+0x4e>
				buff += 512;
    5904:	2380      	movs	r3, #128	; 0x80
    5906:	009b      	lsls	r3, r3, #2
    5908:	469c      	mov	ip, r3
    590a:	4465      	add	r5, ip
			} while (--count);
    590c:	3c01      	subs	r4, #1
    590e:	2c00      	cmp	r4, #0
    5910:	d1f2      	bne.n	58f8 <disk_write+0x34>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    5912:	21fd      	movs	r1, #253	; 0xfd
    5914:	2000      	movs	r0, #0
    5916:	4b12      	ldr	r3, [pc, #72]	; (5960 <disk_write+0x9c>)
    5918:	4798      	blx	r3
    591a:	2800      	cmp	r0, #0
    591c:	d018      	beq.n	5950 <disk_write+0x8c>
	sd_deselect();
    591e:	4b11      	ldr	r3, [pc, #68]	; (5964 <disk_write+0xa0>)
    5920:	4798      	blx	r3
	return count ? RES_ERROR : RES_OK;
    5922:	1e60      	subs	r0, r4, #1
    5924:	4184      	sbcs	r4, r0
    5926:	b2e0      	uxtb	r0, r4
    5928:	e7d5      	b.n	58d6 <disk_write+0x12>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    592a:	0031      	movs	r1, r6
    592c:	2018      	movs	r0, #24
    592e:	4b0b      	ldr	r3, [pc, #44]	; (595c <disk_write+0x98>)
    5930:	4798      	blx	r3
    5932:	2800      	cmp	r0, #0
    5934:	d1f3      	bne.n	591e <disk_write+0x5a>
		&& xmit_datablock(buff, 0xFE))
    5936:	21fe      	movs	r1, #254	; 0xfe
    5938:	0028      	movs	r0, r5
    593a:	4b09      	ldr	r3, [pc, #36]	; (5960 <disk_write+0x9c>)
    593c:	4798      	blx	r3
    593e:	2800      	cmp	r0, #0
    5940:	d0ed      	beq.n	591e <disk_write+0x5a>
		count = 0;
    5942:	2400      	movs	r4, #0
    5944:	e7eb      	b.n	591e <disk_write+0x5a>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    5946:	0021      	movs	r1, r4
    5948:	2097      	movs	r0, #151	; 0x97
    594a:	4b04      	ldr	r3, [pc, #16]	; (595c <disk_write+0x98>)
    594c:	4798      	blx	r3
    594e:	e7cd      	b.n	58ec <disk_write+0x28>
			count = 1;
    5950:	2401      	movs	r4, #1
    5952:	e7e4      	b.n	591e <disk_write+0x5a>
    5954:	0000570d 	.word	0x0000570d
    5958:	20000d25 	.word	0x20000d25
    595c:	00005601 	.word	0x00005601
    5960:	000056ad 	.word	0x000056ad
    5964:	000054ed 	.word	0x000054ed

00005968 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE drv,		/* Physical drive nmuber (0) */
BYTE ctrl,		/* Control code */
void *buff		/* Buffer to send/receive control data */
)
{
    5968:	b530      	push	{r4, r5, lr}
    596a:	b085      	sub	sp, #20
    596c:	000c      	movs	r4, r1
    596e:	0015      	movs	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    5970:	4b34      	ldr	r3, [pc, #208]	; (5a44 <disk_ioctl+0xdc>)
    5972:	4798      	blx	r3
    5974:	07c3      	lsls	r3, r0, #31
    5976:	d503      	bpl.n	5980 <disk_ioctl+0x18>
    5978:	2403      	movs	r4, #3
	}

	sd_deselect();

	return res;
}
    597a:	0020      	movs	r0, r4
    597c:	b005      	add	sp, #20
    597e:	bd30      	pop	{r4, r5, pc}
	switch (ctrl) {
    5980:	2c01      	cmp	r4, #1
    5982:	d00b      	beq.n	599c <disk_ioctl+0x34>
    5984:	2c00      	cmp	r4, #0
    5986:	d003      	beq.n	5990 <disk_ioctl+0x28>
    5988:	2c03      	cmp	r4, #3
    598a:	d051      	beq.n	5a30 <disk_ioctl+0xc8>
		res = RES_PARERR;
    598c:	2404      	movs	r4, #4
    598e:	e052      	b.n	5a36 <disk_ioctl+0xce>
		if (sd_select()) res = RES_OK;
    5990:	4b2d      	ldr	r3, [pc, #180]	; (5a48 <disk_ioctl+0xe0>)
    5992:	4798      	blx	r3
    5994:	2800      	cmp	r0, #0
    5996:	d151      	bne.n	5a3c <disk_ioctl+0xd4>
	res = RES_ERROR;
    5998:	2401      	movs	r4, #1
    599a:	e04c      	b.n	5a36 <disk_ioctl+0xce>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    599c:	2100      	movs	r1, #0
    599e:	2009      	movs	r0, #9
    59a0:	4b2a      	ldr	r3, [pc, #168]	; (5a4c <disk_ioctl+0xe4>)
    59a2:	4798      	blx	r3
    59a4:	2800      	cmp	r0, #0
    59a6:	d001      	beq.n	59ac <disk_ioctl+0x44>
	res = RES_ERROR;
    59a8:	2401      	movs	r4, #1
    59aa:	e044      	b.n	5a36 <disk_ioctl+0xce>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    59ac:	2110      	movs	r1, #16
    59ae:	4668      	mov	r0, sp
    59b0:	4b27      	ldr	r3, [pc, #156]	; (5a50 <disk_ioctl+0xe8>)
    59b2:	4798      	blx	r3
    59b4:	2800      	cmp	r0, #0
    59b6:	d043      	beq.n	5a40 <disk_ioctl+0xd8>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    59b8:	466b      	mov	r3, sp
    59ba:	781b      	ldrb	r3, [r3, #0]
    59bc:	099b      	lsrs	r3, r3, #6
    59be:	2b01      	cmp	r3, #1
    59c0:	d024      	beq.n	5a0c <disk_ioctl+0xa4>
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    59c2:	466b      	mov	r3, sp
    59c4:	795a      	ldrb	r2, [r3, #5]
    59c6:	230f      	movs	r3, #15
    59c8:	4013      	ands	r3, r2
    59ca:	466a      	mov	r2, sp
    59cc:	7a92      	ldrb	r2, [r2, #10]
    59ce:	09d2      	lsrs	r2, r2, #7
    59d0:	189b      	adds	r3, r3, r2
    59d2:	466a      	mov	r2, sp
    59d4:	7a51      	ldrb	r1, [r2, #9]
    59d6:	0049      	lsls	r1, r1, #1
    59d8:	2206      	movs	r2, #6
    59da:	400a      	ands	r2, r1
    59dc:	189b      	adds	r3, r3, r2
    59de:	b2db      	uxtb	r3, r3
    59e0:	3302      	adds	r3, #2
    59e2:	b2db      	uxtb	r3, r3
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    59e4:	466a      	mov	r2, sp
    59e6:	7a12      	ldrb	r2, [r2, #8]
    59e8:	0992      	lsrs	r2, r2, #6
    59ea:	4669      	mov	r1, sp
    59ec:	79c9      	ldrb	r1, [r1, #7]
    59ee:	0089      	lsls	r1, r1, #2
    59f0:	1852      	adds	r2, r2, r1
    59f2:	4669      	mov	r1, sp
    59f4:	7989      	ldrb	r1, [r1, #6]
    59f6:	0289      	lsls	r1, r1, #10
    59f8:	20c0      	movs	r0, #192	; 0xc0
    59fa:	0100      	lsls	r0, r0, #4
    59fc:	4001      	ands	r1, r0
    59fe:	1852      	adds	r2, r2, r1
    5a00:	3201      	adds	r2, #1
				*(LBA_t*)buff = cs << (n - 9);
    5a02:	3b09      	subs	r3, #9
    5a04:	409a      	lsls	r2, r3
    5a06:	602a      	str	r2, [r5, #0]
			res = RES_OK;
    5a08:	2400      	movs	r4, #0
    5a0a:	e014      	b.n	5a36 <disk_ioctl+0xce>
				cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    5a0c:	466b      	mov	r3, sp
    5a0e:	7a5b      	ldrb	r3, [r3, #9]
    5a10:	466a      	mov	r2, sp
    5a12:	7a12      	ldrb	r2, [r2, #8]
    5a14:	0212      	lsls	r2, r2, #8
    5a16:	189b      	adds	r3, r3, r2
    5a18:	466a      	mov	r2, sp
    5a1a:	79d2      	ldrb	r2, [r2, #7]
    5a1c:	0412      	lsls	r2, r2, #16
    5a1e:	21fc      	movs	r1, #252	; 0xfc
    5a20:	0389      	lsls	r1, r1, #14
    5a22:	400a      	ands	r2, r1
    5a24:	189b      	adds	r3, r3, r2
    5a26:	3301      	adds	r3, #1
				*(LBA_t*)buff = cs << 10;
    5a28:	029b      	lsls	r3, r3, #10
    5a2a:	602b      	str	r3, [r5, #0]
			res = RES_OK;
    5a2c:	2400      	movs	r4, #0
    5a2e:	e002      	b.n	5a36 <disk_ioctl+0xce>
		*(DWORD*)buff = 128;
    5a30:	2380      	movs	r3, #128	; 0x80
    5a32:	602b      	str	r3, [r5, #0]
		res = RES_OK;
    5a34:	2400      	movs	r4, #0
	sd_deselect();
    5a36:	4b07      	ldr	r3, [pc, #28]	; (5a54 <disk_ioctl+0xec>)
    5a38:	4798      	blx	r3
	return res;
    5a3a:	e79e      	b.n	597a <disk_ioctl+0x12>
		if (sd_select()) res = RES_OK;
    5a3c:	2400      	movs	r4, #0
    5a3e:	e7fa      	b.n	5a36 <disk_ioctl+0xce>
	res = RES_ERROR;
    5a40:	2401      	movs	r4, #1
    5a42:	e7f8      	b.n	5a36 <disk_ioctl+0xce>
    5a44:	0000570d 	.word	0x0000570d
    5a48:	00005561 	.word	0x00005561
    5a4c:	00005601 	.word	0x00005601
    5a50:	0000559d 	.word	0x0000559d
    5a54:	000054ed 	.word	0x000054ed

00005a58 <main>:
	I2C_write_batch(MAX5822ADDR, (uint8_t *)&tmpData1, sizeof(tmpData1)); \
}


int main(void)
{
    5a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a5a:	46de      	mov	lr, fp
    5a5c:	4657      	mov	r7, sl
    5a5e:	464e      	mov	r6, r9
    5a60:	4645      	mov	r5, r8
    5a62:	b5e0      	push	{r5, r6, r7, lr}
    5a64:	4cc3      	ldr	r4, [pc, #780]	; (5d74 <main+0x31c>)
    5a66:	44a5      	add	sp, r4
	mcu_init();
    5a68:	4bc3      	ldr	r3, [pc, #780]	; (5d78 <main+0x320>)
    5a6a:	4798      	blx	r3
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
    5a6c:	49c3      	ldr	r1, [pc, #780]	; (5d7c <main+0x324>)
    5a6e:	48c4      	ldr	r0, [pc, #784]	; (5d80 <main+0x328>)
    5a70:	4bc4      	ldr	r3, [pc, #784]	; (5d84 <main+0x32c>)
    5a72:	4798      	blx	r3
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_Write_byte);
    5a74:	49c4      	ldr	r1, [pc, #784]	; (5d88 <main+0x330>)
    5a76:	48c5      	ldr	r0, [pc, #788]	; (5d8c <main+0x334>)
    5a78:	4bc5      	ldr	r3, [pc, #788]	; (5d90 <main+0x338>)
    5a7a:	4798      	blx	r3
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
    5a7c:	49c5      	ldr	r1, [pc, #788]	; (5d94 <main+0x33c>)
    5a7e:	48c6      	ldr	r0, [pc, #792]	; (5d98 <main+0x340>)
    5a80:	4bc6      	ldr	r3, [pc, #792]	; (5d9c <main+0x344>)
    5a82:	4798      	blx	r3
	wizphy_reset();
    5a84:	4bc6      	ldr	r3, [pc, #792]	; (5da0 <main+0x348>)
    5a86:	4798      	blx	r3
	delay_ms(100);
    5a88:	2064      	movs	r0, #100	; 0x64
    5a8a:	4bc6      	ldr	r3, [pc, #792]	; (5da4 <main+0x34c>)
    5a8c:	4798      	blx	r3
	wizchip_init(rx_tx_buff_sizes,rx_tx_buff_sizes);
    5a8e:	48c6      	ldr	r0, [pc, #792]	; (5da8 <main+0x350>)
    5a90:	0001      	movs	r1, r0
    5a92:	4bc6      	ldr	r3, [pc, #792]	; (5dac <main+0x354>)
    5a94:	4798      	blx	r3
	netInfo.ip[3] = 90+GetIpSwitch();
    5a96:	4bc6      	ldr	r3, [pc, #792]	; (5db0 <main+0x358>)
    5a98:	4798      	blx	r3
    5a9a:	305a      	adds	r0, #90	; 0x5a
    5a9c:	4cc5      	ldr	r4, [pc, #788]	; (5db4 <main+0x35c>)
    5a9e:	7260      	strb	r0, [r4, #9]
	wizchip_setnetinfo(&netInfo);
    5aa0:	0020      	movs	r0, r4
    5aa2:	4bc5      	ldr	r3, [pc, #788]	; (5db8 <main+0x360>)
    5aa4:	4798      	blx	r3
	ctlnetwork(CN_SET_NETINFO, (void*) &netInfo);
    5aa6:	0021      	movs	r1, r4
    5aa8:	2000      	movs	r0, #0
    5aaa:	4bc4      	ldr	r3, [pc, #784]	; (5dbc <main+0x364>)
    5aac:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5aae:	23c0      	movs	r3, #192	; 0xc0
    5ab0:	05db      	lsls	r3, r3, #23
    5ab2:	2280      	movs	r2, #128	; 0x80
    5ab4:	03d2      	lsls	r2, r2, #15
    5ab6:	619a      	str	r2, [r3, #24]
    5ab8:	2280      	movs	r2, #128	; 0x80
    5aba:	0052      	lsls	r2, r2, #1
    5abc:	619a      	str	r2, [r3, #24]
    5abe:	3201      	adds	r2, #1
    5ac0:	32ff      	adds	r2, #255	; 0xff
    5ac2:	619a      	str	r2, [r3, #24]
	
	gpio_set_pin_level(DLDA, true);
	gpio_set_pin_level(O2, true);
	gpio_set_pin_level(O3, true);
	
	setIMR(0xff);
    5ac4:	21ff      	movs	r1, #255	; 0xff
    5ac6:	20b0      	movs	r0, #176	; 0xb0
    5ac8:	0140      	lsls	r0, r0, #5
    5aca:	4cbd      	ldr	r4, [pc, #756]	; (5dc0 <main+0x368>)
    5acc:	47a0      	blx	r4
	setSIMR(0xff);
    5ace:	21ff      	movs	r1, #255	; 0xff
    5ad0:	20c0      	movs	r0, #192	; 0xc0
    5ad2:	0140      	lsls	r0, r0, #5
    5ad4:	47a0      	blx	r4
	setINTLEVEL(1);
    5ad6:	2100      	movs	r1, #0
    5ad8:	2098      	movs	r0, #152	; 0x98
    5ada:	0140      	lsls	r0, r0, #5
    5adc:	47a0      	blx	r4
    5ade:	2101      	movs	r1, #1
    5ae0:	20a0      	movs	r0, #160	; 0xa0
    5ae2:	0140      	lsls	r0, r0, #5
    5ae4:	47a0      	blx	r4
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    5ae6:	2400      	movs	r4, #0
    5ae8:	2c07      	cmp	r4, #7
    5aea:	d92c      	bls.n	5b46 <main+0xee>
	//ADS1x1x_set_threshold_hi(&my_adc, 0xFFFF);
	//ADS1x1x_set_threshold_lo(&my_adc, 0x0000);
	//ADS1x1x_set_comparator_queue(&my_adc,COMPARATOR_QUEUE_1);
	//ADS1x1x_set_data_rate(&my_adc,DATA_RATE_ADS111x_860);
	//ADS1x1x_set_mode(&my_adc,MODE_CONTINUOUS);
	psuErr = 1;
    5aec:	2201      	movs	r2, #1
    5aee:	4bb5      	ldr	r3, [pc, #724]	; (5dc4 <main+0x36c>)
    5af0:	701a      	strb	r2, [r3, #0]
	buzer(10);
    5af2:	200a      	movs	r0, #10
    5af4:	4bb4      	ldr	r3, [pc, #720]	; (5dc8 <main+0x370>)
    5af6:	4798      	blx	r3
	
	uint8_t buffer[SD_BUFFER_SIZE];
	uint32_t bytes_read;
	if (sd_init()) {
    5af8:	4bb4      	ldr	r3, [pc, #720]	; (5dcc <main+0x374>)
    5afa:	4798      	blx	r3
    5afc:	2800      	cmp	r0, #0
    5afe:	d031      	beq.n	5b64 <main+0x10c>
		
		sd_list_files("/");
    5b00:	48b3      	ldr	r0, [pc, #716]	; (5dd0 <main+0x378>)
    5b02:	4bb4      	ldr	r3, [pc, #720]	; (5dd4 <main+0x37c>)
    5b04:	4798      	blx	r3
		sd_print_file("test.txt");
    5b06:	4cb4      	ldr	r4, [pc, #720]	; (5dd8 <main+0x380>)
    5b08:	0020      	movs	r0, r4
    5b0a:	4bb4      	ldr	r3, [pc, #720]	; (5ddc <main+0x384>)
    5b0c:	4798      	blx	r3
		
		const char *line = "Example line to append to the file.\r\n";
		if (sd_write_line("test.txt", line, strlen(line))) {
    5b0e:	2225      	movs	r2, #37	; 0x25
    5b10:	49b3      	ldr	r1, [pc, #716]	; (5de0 <main+0x388>)
    5b12:	0020      	movs	r0, r4
    5b14:	4bb3      	ldr	r3, [pc, #716]	; (5de4 <main+0x38c>)
    5b16:	4798      	blx	r3
    5b18:	2800      	cmp	r0, #0
    5b1a:	d002      	beq.n	5b22 <main+0xca>
			printf("Line written successfully.\r\n");
    5b1c:	48b2      	ldr	r0, [pc, #712]	; (5de8 <main+0x390>)
    5b1e:	4bb3      	ldr	r3, [pc, #716]	; (5dec <main+0x394>)
    5b20:	4798      	blx	r3
		}
		
		while (true) {
			int result = sd_read_file_chunk("config.txt", buffer, SD_BUFFER_SIZE, &bytes_read);
    5b22:	ab5d      	add	r3, sp, #372	; 0x174
    5b24:	2280      	movs	r2, #128	; 0x80
    5b26:	0092      	lsls	r2, r2, #2
    5b28:	a95e      	add	r1, sp, #376	; 0x178
    5b2a:	48b1      	ldr	r0, [pc, #708]	; (5df0 <main+0x398>)
    5b2c:	4cb1      	ldr	r4, [pc, #708]	; (5df4 <main+0x39c>)
    5b2e:	47a0      	blx	r4
			if (result == 0 && bytes_read > 0) {
    5b30:	2800      	cmp	r0, #0
    5b32:	d115      	bne.n	5b60 <main+0x108>
    5b34:	995d      	ldr	r1, [sp, #372]	; 0x174
    5b36:	2900      	cmp	r1, #0
    5b38:	d012      	beq.n	5b60 <main+0x108>
				printf("Read %lu bytes: %.*s\r\n", bytes_read, bytes_read, buffer);
    5b3a:	ab5e      	add	r3, sp, #376	; 0x178
    5b3c:	000a      	movs	r2, r1
    5b3e:	48ae      	ldr	r0, [pc, #696]	; (5df8 <main+0x3a0>)
    5b40:	4cae      	ldr	r4, [pc, #696]	; (5dfc <main+0x3a4>)
    5b42:	47a0      	blx	r4
		while (true) {
    5b44:	e7ed      	b.n	5b22 <main+0xca>
		setSn_IMR(HTTP_SOCKET, 0x04);
    5b46:	00a0      	lsls	r0, r4, #2
    5b48:	3001      	adds	r0, #1
    5b4a:	00c0      	lsls	r0, r0, #3
    5b4c:	23b0      	movs	r3, #176	; 0xb0
    5b4e:	019b      	lsls	r3, r3, #6
    5b50:	469c      	mov	ip, r3
    5b52:	4460      	add	r0, ip
    5b54:	2104      	movs	r1, #4
    5b56:	4b9a      	ldr	r3, [pc, #616]	; (5dc0 <main+0x368>)
    5b58:	4798      	blx	r3
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    5b5a:	3401      	adds	r4, #1
    5b5c:	b2e4      	uxtb	r4, r4
    5b5e:	e7c3      	b.n	5ae8 <main+0x90>
				} else {
				break;
			}
		}
		sd_close_file();
    5b60:	4ba7      	ldr	r3, [pc, #668]	; (5e00 <main+0x3a8>)
    5b62:	4798      	blx	r3
	uint8_t addrM = 0x38;
	uint16_t dacValue[2];
	//SET_DAC_CURRENT(0);
	//SET_DAC_VOLTAGE(0);
	//SET_DAC_INIT;
	printf("\r\nHello, SAMD21!\r\n");
    5b64:	48a7      	ldr	r0, [pc, #668]	; (5e04 <main+0x3ac>)
    5b66:	4ba1      	ldr	r3, [pc, #644]	; (5dec <main+0x394>)
    5b68:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    5b6a:	a819      	add	r0, sp, #100	; 0x64
    5b6c:	4ba6      	ldr	r3, [pc, #664]	; (5e08 <main+0x3b0>)
    5b6e:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5b70:	23c0      	movs	r3, #192	; 0xc0
    5b72:	05db      	lsls	r3, r3, #23
    5b74:	2280      	movs	r2, #128	; 0x80
    5b76:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    5b78:	3220      	adds	r2, #32
    5b7a:	49a4      	ldr	r1, [pc, #656]	; (5e0c <main+0x3b4>)
    5b7c:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5b7e:	2190      	movs	r1, #144	; 0x90
    5b80:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    5b82:	4053      	eors	r3, r2
    5b84:	401c      	ands	r4, r3
    5b86:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    5b88:	a819      	add	r0, sp, #100	; 0x64
    5b8a:	4ba1      	ldr	r3, [pc, #644]	; (5e10 <main+0x3b8>)
    5b8c:	4798      	blx	r3
	if (level) {
    5b8e:	05e3      	lsls	r3, r4, #23
    5b90:	d42e      	bmi.n	5bf0 <main+0x198>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5b92:	2280      	movs	r2, #128	; 0x80
    5b94:	03d2      	lsls	r2, r2, #15
    5b96:	23c0      	movs	r3, #192	; 0xc0
    5b98:	05db      	lsls	r3, r3, #23
    5b9a:	619a      	str	r2, [r3, #24]
		
		//if(SerialReady(&uartRxBuff)){
		//	SerialWrite(&uartRxBuff);
		//}
		
		if (SerialReady(&uartRxBuff) == 1) {
    5b9c:	489d      	ldr	r0, [pc, #628]	; (5e14 <main+0x3bc>)
    5b9e:	4b9e      	ldr	r3, [pc, #632]	; (5e18 <main+0x3c0>)
    5ba0:	4798      	blx	r3
    5ba2:	2801      	cmp	r0, #1
    5ba4:	d02a      	beq.n	5bfc <main+0x1a4>
			SerialWrite(&uartRxBuff);
			} else if (SerialReady(&uartRxBuff) == 2) {
    5ba6:	489b      	ldr	r0, [pc, #620]	; (5e14 <main+0x3bc>)
    5ba8:	4b9b      	ldr	r3, [pc, #620]	; (5e18 <main+0x3c0>)
    5baa:	4798      	blx	r3
    5bac:	2802      	cmp	r0, #2
    5bae:	d029      	beq.n	5c04 <main+0x1ac>
			SerialWrite("Buffer Overflow");
		}
		
		if(adcRequest() == 1){
    5bb0:	4b9a      	ldr	r3, [pc, #616]	; (5e1c <main+0x3c4>)
    5bb2:	4798      	blx	r3
    5bb4:	2801      	cmp	r0, #1
    5bb6:	d029      	beq.n	5c0c <main+0x1b4>
			ampDMM = ( ampDMM < 0) ?  0 : (ampDMM  * 0.000203718);
			*/
		}
		
		
		if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    5bb8:	4b99      	ldr	r3, [pc, #612]	; (5e20 <main+0x3c8>)
    5bba:	7818      	ldrb	r0, [r3, #0]
    5bbc:	0080      	lsls	r0, r0, #2
    5bbe:	3001      	adds	r0, #1
    5bc0:	00c0      	lsls	r0, r0, #3
    5bc2:	23c0      	movs	r3, #192	; 0xc0
    5bc4:	009b      	lsls	r3, r3, #2
    5bc6:	469c      	mov	ip, r3
    5bc8:	4460      	add	r0, ip
    5bca:	4b96      	ldr	r3, [pc, #600]	; (5e24 <main+0x3cc>)
    5bcc:	4798      	blx	r3
    5bce:	2800      	cmp	r0, #0
    5bd0:	d024      	beq.n	5c1c <main+0x1c4>
			socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
			listen(UdpRxSockNum);
		}
		
		if(getSn_IR(UdpRxSockNum)){ // & Sn_CR_RECV
    5bd2:	4b93      	ldr	r3, [pc, #588]	; (5e20 <main+0x3c8>)
    5bd4:	7818      	ldrb	r0, [r3, #0]
    5bd6:	0080      	lsls	r0, r0, #2
    5bd8:	3001      	adds	r0, #1
    5bda:	00c0      	lsls	r0, r0, #3
    5bdc:	2380      	movs	r3, #128	; 0x80
    5bde:	009b      	lsls	r3, r3, #2
    5be0:	469c      	mov	ip, r3
    5be2:	4460      	add	r0, ip
    5be4:	4b8f      	ldr	r3, [pc, #572]	; (5e24 <main+0x3cc>)
    5be6:	4798      	blx	r3
    5be8:	06c3      	lsls	r3, r0, #27
    5bea:	d123      	bne.n	5c34 <main+0x1dc>


					
					if (strstr((char *)TCP_RX_BUF, "GET / ") != NULL) {
						size_t total_length = strlen(psu_page);
						size_t sent_length = 0;
    5bec:	2405      	movs	r4, #5
    5bee:	e377      	b.n	62e0 <main+0x888>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5bf0:	2280      	movs	r2, #128	; 0x80
    5bf2:	03d2      	lsls	r2, r2, #15
    5bf4:	23c0      	movs	r3, #192	; 0xc0
    5bf6:	05db      	lsls	r3, r3, #23
    5bf8:	615a      	str	r2, [r3, #20]
    5bfa:	e7cf      	b.n	5b9c <main+0x144>
			SerialWrite(&uartRxBuff);
    5bfc:	4885      	ldr	r0, [pc, #532]	; (5e14 <main+0x3bc>)
    5bfe:	4b8a      	ldr	r3, [pc, #552]	; (5e28 <main+0x3d0>)
    5c00:	4798      	blx	r3
    5c02:	e7d5      	b.n	5bb0 <main+0x158>
			SerialWrite("Buffer Overflow");
    5c04:	4889      	ldr	r0, [pc, #548]	; (5e2c <main+0x3d4>)
    5c06:	4b88      	ldr	r3, [pc, #544]	; (5e28 <main+0x3d0>)
    5c08:	4798      	blx	r3
    5c0a:	e7d1      	b.n	5bb0 <main+0x158>
			sprintf(debugSerialBuffer, "BUFF LEN=%d", rxBytesGet());
    5c0c:	4b88      	ldr	r3, [pc, #544]	; (5e30 <main+0x3d8>)
    5c0e:	4798      	blx	r3
    5c10:	0002      	movs	r2, r0
    5c12:	4988      	ldr	r1, [pc, #544]	; (5e34 <main+0x3dc>)
    5c14:	4888      	ldr	r0, [pc, #544]	; (5e38 <main+0x3e0>)
    5c16:	4b89      	ldr	r3, [pc, #548]	; (5e3c <main+0x3e4>)
    5c18:	4798      	blx	r3
    5c1a:	e7cd      	b.n	5bb8 <main+0x160>
			socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
    5c1c:	4b88      	ldr	r3, [pc, #544]	; (5e40 <main+0x3e8>)
    5c1e:	881a      	ldrh	r2, [r3, #0]
    5c20:	4c7f      	ldr	r4, [pc, #508]	; (5e20 <main+0x3c8>)
    5c22:	7820      	ldrb	r0, [r4, #0]
    5c24:	2380      	movs	r3, #128	; 0x80
    5c26:	2102      	movs	r1, #2
    5c28:	4d86      	ldr	r5, [pc, #536]	; (5e44 <main+0x3ec>)
    5c2a:	47a8      	blx	r5
			listen(UdpRxSockNum);
    5c2c:	7820      	ldrb	r0, [r4, #0]
    5c2e:	4b86      	ldr	r3, [pc, #536]	; (5e48 <main+0x3f0>)
    5c30:	4798      	blx	r3
    5c32:	e7ce      	b.n	5bd2 <main+0x17a>
			uint16_t udp_size = getSn_RX_RSR(UdpRxSockNum);
    5c34:	4b7a      	ldr	r3, [pc, #488]	; (5e20 <main+0x3c8>)
    5c36:	7818      	ldrb	r0, [r3, #0]
    5c38:	4b84      	ldr	r3, [pc, #528]	; (5e4c <main+0x3f4>)
    5c3a:	4798      	blx	r3
    5c3c:	1e04      	subs	r4, r0, #0
			if (udp_size > 0) {
    5c3e:	d0d5      	beq.n	5bec <main+0x194>
				if (udp_size > DATA_BUFF_SIZE) udp_size = DATA_BUFF_SIZE;
    5c40:	2380      	movs	r3, #128	; 0x80
    5c42:	011b      	lsls	r3, r3, #4
    5c44:	4298      	cmp	r0, r3
    5c46:	d900      	bls.n	5c4a <main+0x1f2>
    5c48:	001c      	movs	r4, r3
				memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    5c4a:	4d81      	ldr	r5, [pc, #516]	; (5e50 <main+0x3f8>)
    5c4c:	2280      	movs	r2, #128	; 0x80
    5c4e:	0112      	lsls	r2, r2, #4
    5c50:	2100      	movs	r1, #0
    5c52:	0028      	movs	r0, r5
    5c54:	4b7f      	ldr	r3, [pc, #508]	; (5e54 <main+0x3fc>)
    5c56:	4798      	blx	r3
				uint16_t ret = recvfrom(UdpRxSockNum, (uint8_t*)TCP_RX_BUF, udp_size, ip, &port);
    5c58:	4b71      	ldr	r3, [pc, #452]	; (5e20 <main+0x3c8>)
    5c5a:	7818      	ldrb	r0, [r3, #0]
    5c5c:	2346      	movs	r3, #70	; 0x46
    5c5e:	aa06      	add	r2, sp, #24
    5c60:	4694      	mov	ip, r2
    5c62:	4463      	add	r3, ip
    5c64:	9300      	str	r3, [sp, #0]
    5c66:	ab18      	add	r3, sp, #96	; 0x60
    5c68:	0022      	movs	r2, r4
    5c6a:	0029      	movs	r1, r5
    5c6c:	4c7a      	ldr	r4, [pc, #488]	; (5e58 <main+0x400>)
    5c6e:	47a0      	blx	r4
				if (sscanf(TCP_RX_BUF, "OUTP:STAT %3s", state) == 1) {
    5c70:	aa1a      	add	r2, sp, #104	; 0x68
    5c72:	497a      	ldr	r1, [pc, #488]	; (5e5c <main+0x404>)
    5c74:	0028      	movs	r0, r5
    5c76:	4b7a      	ldr	r3, [pc, #488]	; (5e60 <main+0x408>)
    5c78:	4798      	blx	r3
    5c7a:	2801      	cmp	r0, #1
    5c7c:	d027      	beq.n	5cce <main+0x276>
				uint8_t okFlg = 0;
    5c7e:	2400      	movs	r4, #0
				if (sscanf(TCP_RX_BUF, "MEAS:%[^?]", command) == 1) {
    5c80:	aa1d      	add	r2, sp, #116	; 0x74
    5c82:	4978      	ldr	r1, [pc, #480]	; (5e64 <main+0x40c>)
    5c84:	4872      	ldr	r0, [pc, #456]	; (5e50 <main+0x3f8>)
    5c86:	4b76      	ldr	r3, [pc, #472]	; (5e60 <main+0x408>)
    5c88:	4798      	blx	r3
    5c8a:	2801      	cmp	r0, #1
    5c8c:	d043      	beq.n	5d16 <main+0x2be>
				if(strcasecmp(TCP_RX_BUF, "*RST") == 0){
    5c8e:	4976      	ldr	r1, [pc, #472]	; (5e68 <main+0x410>)
    5c90:	486f      	ldr	r0, [pc, #444]	; (5e50 <main+0x3f8>)
    5c92:	4b76      	ldr	r3, [pc, #472]	; (5e6c <main+0x414>)
    5c94:	4798      	blx	r3
    5c96:	2800      	cmp	r0, #0
    5c98:	d061      	beq.n	5d5e <main+0x306>
					if(okFlg == 0){
    5c9a:	2c00      	cmp	r4, #0
    5c9c:	d066      	beq.n	5d6c <main+0x314>
				result = socket(UdpTxSockNum, Sn_MR_UDP, UdpTxPort, SF_IO_NONBLOCK);
    5c9e:	4e74      	ldr	r6, [pc, #464]	; (5e70 <main+0x418>)
    5ca0:	8832      	ldrh	r2, [r6, #0]
    5ca2:	4f74      	ldr	r7, [pc, #464]	; (5e74 <main+0x41c>)
    5ca4:	7838      	ldrb	r0, [r7, #0]
    5ca6:	2301      	movs	r3, #1
    5ca8:	2102      	movs	r1, #2
    5caa:	4c66      	ldr	r4, [pc, #408]	; (5e44 <main+0x3ec>)
    5cac:	47a0      	blx	r4
    5cae:	4c72      	ldr	r4, [pc, #456]	; (5e78 <main+0x420>)
    5cb0:	7020      	strb	r0, [r4, #0]
				result = sendto(UdpTxSockNum, (uint8_t*)UdpAnsver, strlen(UdpAnsver), UdpDestAddress, UdpTxPort);
    5cb2:	4d72      	ldr	r5, [pc, #456]	; (5e7c <main+0x424>)
    5cb4:	0028      	movs	r0, r5
    5cb6:	4b72      	ldr	r3, [pc, #456]	; (5e80 <main+0x428>)
    5cb8:	4798      	blx	r3
    5cba:	b282      	uxth	r2, r0
    5cbc:	7838      	ldrb	r0, [r7, #0]
    5cbe:	8833      	ldrh	r3, [r6, #0]
    5cc0:	9300      	str	r3, [sp, #0]
    5cc2:	4b70      	ldr	r3, [pc, #448]	; (5e84 <main+0x42c>)
    5cc4:	0029      	movs	r1, r5
    5cc6:	4d70      	ldr	r5, [pc, #448]	; (5e88 <main+0x430>)
    5cc8:	47a8      	blx	r5
    5cca:	7020      	strb	r0, [r4, #0]
    5ccc:	e78e      	b.n	5bec <main+0x194>
					if (strcasecmp(state, "OFF") == 0) {
    5cce:	496f      	ldr	r1, [pc, #444]	; (5e8c <main+0x434>)
    5cd0:	a81a      	add	r0, sp, #104	; 0x68
    5cd2:	4b66      	ldr	r3, [pc, #408]	; (5e6c <main+0x414>)
    5cd4:	4798      	blx	r3
    5cd6:	2800      	cmp	r0, #0
    5cd8:	d10a      	bne.n	5cf0 <main+0x298>
						printf("Output is OFF\r\n");
    5cda:	486d      	ldr	r0, [pc, #436]	; (5e90 <main+0x438>)
    5cdc:	4b43      	ldr	r3, [pc, #268]	; (5dec <main+0x394>)
    5cde:	4798      	blx	r3
						sprintf(UdpAnsver, "ok");
    5ce0:	4b66      	ldr	r3, [pc, #408]	; (5e7c <main+0x424>)
    5ce2:	4a6c      	ldr	r2, [pc, #432]	; (5e94 <main+0x43c>)
    5ce4:	8811      	ldrh	r1, [r2, #0]
    5ce6:	8019      	strh	r1, [r3, #0]
    5ce8:	7892      	ldrb	r2, [r2, #2]
    5cea:	709a      	strb	r2, [r3, #2]
						okFlg = 1;
    5cec:	2401      	movs	r4, #1
    5cee:	e7c7      	b.n	5c80 <main+0x228>
						} else if (strcasecmp(state, "ON") == 0) {
    5cf0:	4969      	ldr	r1, [pc, #420]	; (5e98 <main+0x440>)
    5cf2:	a81a      	add	r0, sp, #104	; 0x68
    5cf4:	4b5d      	ldr	r3, [pc, #372]	; (5e6c <main+0x414>)
    5cf6:	4798      	blx	r3
    5cf8:	2800      	cmp	r0, #0
    5cfa:	d10a      	bne.n	5d12 <main+0x2ba>
						printf("Output is ON\r\n");
    5cfc:	4867      	ldr	r0, [pc, #412]	; (5e9c <main+0x444>)
    5cfe:	4b3b      	ldr	r3, [pc, #236]	; (5dec <main+0x394>)
    5d00:	4798      	blx	r3
						sprintf(UdpAnsver, "ok");
    5d02:	4b5e      	ldr	r3, [pc, #376]	; (5e7c <main+0x424>)
    5d04:	4a63      	ldr	r2, [pc, #396]	; (5e94 <main+0x43c>)
    5d06:	8811      	ldrh	r1, [r2, #0]
    5d08:	8019      	strh	r1, [r3, #0]
    5d0a:	7892      	ldrb	r2, [r2, #2]
    5d0c:	709a      	strb	r2, [r3, #2]
						okFlg = 1;
    5d0e:	2401      	movs	r4, #1
    5d10:	e7b6      	b.n	5c80 <main+0x228>
				uint8_t okFlg = 0;
    5d12:	2400      	movs	r4, #0
    5d14:	e7b4      	b.n	5c80 <main+0x228>
					if (strcasecmp(command, "VOLT") == 0) {
    5d16:	4962      	ldr	r1, [pc, #392]	; (5ea0 <main+0x448>)
    5d18:	a81d      	add	r0, sp, #116	; 0x74
    5d1a:	4b54      	ldr	r3, [pc, #336]	; (5e6c <main+0x414>)
    5d1c:	4798      	blx	r3
    5d1e:	2800      	cmp	r0, #0
    5d20:	d10c      	bne.n	5d3c <main+0x2e4>
						printf("Measure Voltage command\r\n");
    5d22:	4860      	ldr	r0, [pc, #384]	; (5ea4 <main+0x44c>)
    5d24:	4b31      	ldr	r3, [pc, #196]	; (5dec <main+0x394>)
    5d26:	4798      	blx	r3
						sprintf(UdpAnsver, "48.031");
    5d28:	4b54      	ldr	r3, [pc, #336]	; (5e7c <main+0x424>)
    5d2a:	4a5f      	ldr	r2, [pc, #380]	; (5ea8 <main+0x450>)
    5d2c:	6811      	ldr	r1, [r2, #0]
    5d2e:	6019      	str	r1, [r3, #0]
    5d30:	8891      	ldrh	r1, [r2, #4]
    5d32:	8099      	strh	r1, [r3, #4]
    5d34:	7992      	ldrb	r2, [r2, #6]
    5d36:	719a      	strb	r2, [r3, #6]
						okFlg = 1;
    5d38:	2401      	movs	r4, #1
    5d3a:	e7a8      	b.n	5c8e <main+0x236>
						} else if (strcasecmp(command, "CURR") == 0) {
    5d3c:	495b      	ldr	r1, [pc, #364]	; (5eac <main+0x454>)
    5d3e:	a81d      	add	r0, sp, #116	; 0x74
    5d40:	4b4a      	ldr	r3, [pc, #296]	; (5e6c <main+0x414>)
    5d42:	4798      	blx	r3
    5d44:	2800      	cmp	r0, #0
    5d46:	d1a2      	bne.n	5c8e <main+0x236>
						printf("Measure Current command\r\n");
    5d48:	4859      	ldr	r0, [pc, #356]	; (5eb0 <main+0x458>)
    5d4a:	4b28      	ldr	r3, [pc, #160]	; (5dec <main+0x394>)
    5d4c:	4798      	blx	r3
						sprintf(UdpAnsver, "0.121");
    5d4e:	4b4b      	ldr	r3, [pc, #300]	; (5e7c <main+0x424>)
    5d50:	4a58      	ldr	r2, [pc, #352]	; (5eb4 <main+0x45c>)
    5d52:	6811      	ldr	r1, [r2, #0]
    5d54:	6019      	str	r1, [r3, #0]
    5d56:	8892      	ldrh	r2, [r2, #4]
    5d58:	809a      	strh	r2, [r3, #4]
						okFlg = 1;
    5d5a:	2401      	movs	r4, #1
    5d5c:	e797      	b.n	5c8e <main+0x236>
					sprintf(UdpAnsver, "ok");
    5d5e:	4b47      	ldr	r3, [pc, #284]	; (5e7c <main+0x424>)
    5d60:	4a4c      	ldr	r2, [pc, #304]	; (5e94 <main+0x43c>)
    5d62:	8811      	ldrh	r1, [r2, #0]
    5d64:	8019      	strh	r1, [r3, #0]
    5d66:	7892      	ldrb	r2, [r2, #2]
    5d68:	709a      	strb	r2, [r3, #2]
    5d6a:	e798      	b.n	5c9e <main+0x246>
						sprintf(UdpAnsver, "err");
    5d6c:	4a52      	ldr	r2, [pc, #328]	; (5eb8 <main+0x460>)
    5d6e:	4b43      	ldr	r3, [pc, #268]	; (5e7c <main+0x424>)
    5d70:	601a      	str	r2, [r3, #0]
    5d72:	e794      	b.n	5c9e <main+0x246>
    5d74:	fffffc84 	.word	0xfffffc84
    5d78:	00002569 	.word	0x00002569
    5d7c:	00002155 	.word	0x00002155
    5d80:	00002145 	.word	0x00002145
    5d84:	00003661 	.word	0x00003661
    5d88:	000021c5 	.word	0x000021c5
    5d8c:	0000219d 	.word	0x0000219d
    5d90:	00003689 	.word	0x00003689
    5d94:	00002181 	.word	0x00002181
    5d98:	00002165 	.word	0x00002165
    5d9c:	000036b9 	.word	0x000036b9
    5da0:	00003805 	.word	0x00003805
    5da4:	000001b9 	.word	0x000001b9
    5da8:	20000060 	.word	0x20000060
    5dac:	00003765 	.word	0x00003765
    5db0:	0000265d 	.word	0x0000265d
    5db4:	20000048 	.word	0x20000048
    5db8:	00003835 	.word	0x00003835
    5dbc:	00003979 	.word	0x00003979
    5dc0:	000032d1 	.word	0x000032d1
    5dc4:	20000da9 	.word	0x20000da9
    5dc8:	00001cbd 	.word	0x00001cbd
    5dcc:	00005229 	.word	0x00005229
    5dd0:	00012f4c 	.word	0x00012f4c
    5dd4:	000053a1 	.word	0x000053a1
    5dd8:	00012f50 	.word	0x00012f50
    5ddc:	00005429 	.word	0x00005429
    5de0:	00012f5c 	.word	0x00012f5c
    5de4:	00005265 	.word	0x00005265
    5de8:	00012f84 	.word	0x00012f84
    5dec:	00008a31 	.word	0x00008a31
    5df0:	00012fa0 	.word	0x00012fa0
    5df4:	000052f9 	.word	0x000052f9
    5df8:	00012fac 	.word	0x00012fac
    5dfc:	0000896d 	.word	0x0000896d
    5e00:	000052c5 	.word	0x000052c5
    5e04:	00012fc4 	.word	0x00012fc4
    5e08:	0000017d 	.word	0x0000017d
    5e0c:	41004400 	.word	0x41004400
    5e10:	0000018b 	.word	0x0000018b
    5e14:	2000172c 	.word	0x2000172c
    5e18:	00002415 	.word	0x00002415
    5e1c:	0000273d 	.word	0x0000273d
    5e20:	2000003a 	.word	0x2000003a
    5e24:	0000326d 	.word	0x0000326d
    5e28:	000025bd 	.word	0x000025bd
    5e2c:	00012fd8 	.word	0x00012fd8
    5e30:	00002409 	.word	0x00002409
    5e34:	00012fe8 	.word	0x00012fe8
    5e38:	200017f8 	.word	0x200017f8
    5e3c:	00008ac9 	.word	0x00008ac9
    5e40:	20000038 	.word	0x20000038
    5e44:	000027d5 	.word	0x000027d5
    5e48:	00002955 	.word	0x00002955
    5e4c:	00003495 	.word	0x00003495
    5e50:	20000f2c 	.word	0x20000f2c
    5e54:	000088d9 	.word	0x000088d9
    5e58:	00002e4d 	.word	0x00002e4d
    5e5c:	00012ff4 	.word	0x00012ff4
    5e60:	00008b0d 	.word	0x00008b0d
    5e64:	00013030 	.word	0x00013030
    5e68:	00013094 	.word	0x00013094
    5e6c:	00008bfd 	.word	0x00008bfd
    5e70:	2000003c 	.word	0x2000003c
    5e74:	20000da8 	.word	0x20000da8
    5e78:	200017f4 	.word	0x200017f4
    5e7c:	20000d28 	.word	0x20000d28
    5e80:	00008db5 	.word	0x00008db5
    5e84:	20000034 	.word	0x20000034
    5e88:	00002cc5 	.word	0x00002cc5
    5e8c:	00013004 	.word	0x00013004
    5e90:	00013008 	.word	0x00013008
    5e94:	00013018 	.word	0x00013018
    5e98:	0001301c 	.word	0x0001301c
    5e9c:	00013020 	.word	0x00013020
    5ea0:	0001303c 	.word	0x0001303c
    5ea4:	00013044 	.word	0x00013044
    5ea8:	00013060 	.word	0x00013060
    5eac:	00013068 	.word	0x00013068
    5eb0:	00013070 	.word	0x00013070
    5eb4:	0001308c 	.word	0x0001308c
    5eb8:	00727265 	.word	0x00727265
				getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
    5ebc:	aa18      	add	r2, sp, #96	; 0x60
    5ebe:	2104      	movs	r1, #4
    5ec0:	0020      	movs	r0, r4
    5ec2:	4bca      	ldr	r3, [pc, #808]	; (61ec <main+0x794>)
    5ec4:	4798      	blx	r3
				uint16_t res_size = getSn_RX_RSR(HTTP_SOCKET);
    5ec6:	0020      	movs	r0, r4
    5ec8:	4bc9      	ldr	r3, [pc, #804]	; (61f0 <main+0x798>)
    5eca:	4798      	blx	r3
    5ecc:	1e07      	subs	r7, r0, #0
				if (res_size > 0) {
    5ece:	d100      	bne.n	5ed2 <main+0x47a>
    5ed0:	e219      	b.n	6306 <main+0x8ae>
					if (res_size > sizeof(TCP_RX_BUF)) {
    5ed2:	2380      	movs	r3, #128	; 0x80
    5ed4:	011b      	lsls	r3, r3, #4
    5ed6:	4298      	cmp	r0, r3
    5ed8:	d900      	bls.n	5edc <main+0x484>
						res_size = sizeof(TCP_RX_BUF);
    5eda:	001f      	movs	r7, r3
					memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    5edc:	4ec5      	ldr	r6, [pc, #788]	; (61f4 <main+0x79c>)
    5ede:	2280      	movs	r2, #128	; 0x80
    5ee0:	0112      	lsls	r2, r2, #4
    5ee2:	2100      	movs	r1, #0
    5ee4:	0030      	movs	r0, r6
    5ee6:	4bc4      	ldr	r3, [pc, #784]	; (61f8 <main+0x7a0>)
    5ee8:	4798      	blx	r3
					recv(HTTP_SOCKET, (uint8_t *)TCP_RX_BUF, res_size);
    5eea:	003a      	movs	r2, r7
    5eec:	0031      	movs	r1, r6
    5eee:	0020      	movs	r0, r4
    5ef0:	4bc2      	ldr	r3, [pc, #776]	; (61fc <main+0x7a4>)
    5ef2:	4798      	blx	r3
					if (strstr((char *)TCP_RX_BUF, "GET / ") != NULL) {
    5ef4:	49c2      	ldr	r1, [pc, #776]	; (6200 <main+0x7a8>)
    5ef6:	0030      	movs	r0, r6
    5ef8:	4bc2      	ldr	r3, [pc, #776]	; (6204 <main+0x7ac>)
    5efa:	4798      	blx	r3
    5efc:	2800      	cmp	r0, #0
    5efe:	d027      	beq.n	5f50 <main+0x4f8>
						printf("index.html send\r\n");
    5f00:	48c1      	ldr	r0, [pc, #772]	; (6208 <main+0x7b0>)
    5f02:	4bc2      	ldr	r3, [pc, #776]	; (620c <main+0x7b4>)
    5f04:	4798      	blx	r3
						size_t sent_length = 0;
    5f06:	2300      	movs	r3, #0
    5f08:	4699      	mov	r9, r3
						while (sent_length < total_length) {
    5f0a:	e00f      	b.n	5f2c <main+0x4d4>
							size_t chunk_size = (total_length - sent_length > 2048) ? 2048 : total_length - sent_length;
							send(HTTP_SOCKET, (uint8_t *)(psu_page + sent_length), chunk_size);
							//uint8_t msCount = 0;
							while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
								delay_ms(1);
    5f0c:	2001      	movs	r0, #1
    5f0e:	4bc0      	ldr	r3, [pc, #768]	; (6210 <main+0x7b8>)
    5f10:	4798      	blx	r3
							while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    5f12:	0020      	movs	r0, r4
    5f14:	4bbf      	ldr	r3, [pc, #764]	; (6214 <main+0x7bc>)
    5f16:	4798      	blx	r3
    5f18:	0006      	movs	r6, r0
    5f1a:	23f8      	movs	r3, #248	; 0xf8
    5f1c:	015b      	lsls	r3, r3, #5
    5f1e:	18e8      	adds	r0, r5, r3
    5f20:	4bbd      	ldr	r3, [pc, #756]	; (6218 <main+0x7c0>)
    5f22:	4798      	blx	r3
    5f24:	0280      	lsls	r0, r0, #10
    5f26:	4286      	cmp	r6, r0
    5f28:	d1f0      	bne.n	5f0c <main+0x4b4>
								//msCount++;
							}
							//printf("TX Time = %d\r\n", msCount);
							sent_length += chunk_size;
    5f2a:	44b9      	add	r9, r7
						while (sent_length < total_length) {
    5f2c:	4bbb      	ldr	r3, [pc, #748]	; (621c <main+0x7c4>)
    5f2e:	4599      	cmp	r9, r3
    5f30:	d820      	bhi.n	5f74 <main+0x51c>
							size_t chunk_size = (total_length - sent_length > 2048) ? 2048 : total_length - sent_length;
    5f32:	4fbb      	ldr	r7, [pc, #748]	; (6220 <main+0x7c8>)
    5f34:	464b      	mov	r3, r9
    5f36:	1aff      	subs	r7, r7, r3
    5f38:	2380      	movs	r3, #128	; 0x80
    5f3a:	011b      	lsls	r3, r3, #4
    5f3c:	429f      	cmp	r7, r3
    5f3e:	d900      	bls.n	5f42 <main+0x4ea>
    5f40:	001f      	movs	r7, r3
							send(HTTP_SOCKET, (uint8_t *)(psu_page + sent_length), chunk_size);
    5f42:	b2ba      	uxth	r2, r7
    5f44:	49b7      	ldr	r1, [pc, #732]	; (6224 <main+0x7cc>)
    5f46:	4449      	add	r1, r9
    5f48:	0020      	movs	r0, r4
    5f4a:	4bb7      	ldr	r3, [pc, #732]	; (6228 <main+0x7d0>)
    5f4c:	4798      	blx	r3
							while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    5f4e:	e7e0      	b.n	5f12 <main+0x4ba>
						}
						
						} else if (strstr((char *)TCP_RX_BUF, "GET /favicon.ico") != NULL) {
    5f50:	49b6      	ldr	r1, [pc, #728]	; (622c <main+0x7d4>)
    5f52:	48a8      	ldr	r0, [pc, #672]	; (61f4 <main+0x79c>)
    5f54:	4bab      	ldr	r3, [pc, #684]	; (6204 <main+0x7ac>)
    5f56:	4798      	blx	r3
    5f58:	2800      	cmp	r0, #0
    5f5a:	d00f      	beq.n	5f7c <main+0x524>
						printf("favicon.ico send\r\n");
    5f5c:	48b4      	ldr	r0, [pc, #720]	; (6230 <main+0x7d8>)
    5f5e:	4bab      	ldr	r3, [pc, #684]	; (620c <main+0x7b4>)
    5f60:	4798      	blx	r3
						send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: image/x-icon\r\r\n\n", 47);
    5f62:	222f      	movs	r2, #47	; 0x2f
    5f64:	49b3      	ldr	r1, [pc, #716]	; (6234 <main+0x7dc>)
    5f66:	0020      	movs	r0, r4
    5f68:	4eaf      	ldr	r6, [pc, #700]	; (6228 <main+0x7d0>)
    5f6a:	47b0      	blx	r6
						send(HTTP_SOCKET, (uint8_t *)favicon_ico, sizeof(favicon_ico));
    5f6c:	4ab2      	ldr	r2, [pc, #712]	; (6238 <main+0x7e0>)
    5f6e:	49b3      	ldr	r1, [pc, #716]	; (623c <main+0x7e4>)
    5f70:	0020      	movs	r0, r4
    5f72:	47b0      	blx	r6
							outState = (strcmp(action, "on") == 0) ? 1 : 0;
							remoteCtrl = 1;
						}
						send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
					}
					disconnect(HTTP_SOCKET);
    5f74:	0020      	movs	r0, r4
    5f76:	4bb2      	ldr	r3, [pc, #712]	; (6240 <main+0x7e8>)
    5f78:	4798      	blx	r3
					
					while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    5f7a:	e119      	b.n	61b0 <main+0x758>
						} else if (strstr((char *)TCP_RX_BUF, "GET /get_vals") != NULL) {
    5f7c:	49b1      	ldr	r1, [pc, #708]	; (6244 <main+0x7ec>)
    5f7e:	489d      	ldr	r0, [pc, #628]	; (61f4 <main+0x79c>)
    5f80:	4ba0      	ldr	r3, [pc, #640]	; (6204 <main+0x7ac>)
    5f82:	4798      	blx	r3
    5f84:	2800      	cmp	r0, #0
    5f86:	d03e      	beq.n	6006 <main+0x5ae>
						float watt = ampDMM * voltDMM;
    5f88:	4baf      	ldr	r3, [pc, #700]	; (6248 <main+0x7f0>)
    5f8a:	681b      	ldr	r3, [r3, #0]
    5f8c:	1c1a      	adds	r2, r3, #0
    5f8e:	4baf      	ldr	r3, [pc, #700]	; (624c <main+0x7f4>)
    5f90:	681f      	ldr	r7, [r3, #0]
    5f92:	1c39      	adds	r1, r7, #0
    5f94:	9212      	str	r2, [sp, #72]	; 0x48
    5f96:	1c10      	adds	r0, r2, #0
    5f98:	4bad      	ldr	r3, [pc, #692]	; (6250 <main+0x7f8>)
    5f9a:	4798      	blx	r3
    5f9c:	9015      	str	r0, [sp, #84]	; 0x54
						snprintf(json_response, sizeof(json_response),
    5f9e:	2301      	movs	r3, #1
    5fa0:	930f      	str	r3, [sp, #60]	; 0x3c
    5fa2:	930e      	str	r3, [sp, #56]	; 0x38
    5fa4:	2300      	movs	r3, #0
    5fa6:	930d      	str	r3, [sp, #52]	; 0x34
    5fa8:	4baa      	ldr	r3, [pc, #680]	; (6254 <main+0x7fc>)
    5faa:	781b      	ldrb	r3, [r3, #0]
    5fac:	930c      	str	r3, [sp, #48]	; 0x30
    5fae:	4baa      	ldr	r3, [pc, #680]	; (6258 <main+0x800>)
    5fb0:	781b      	ldrb	r3, [r3, #0]
    5fb2:	930b      	str	r3, [sp, #44]	; 0x2c
    5fb4:	4ba9      	ldr	r3, [pc, #676]	; (625c <main+0x804>)
    5fb6:	781b      	ldrb	r3, [r3, #0]
    5fb8:	930a      	str	r3, [sp, #40]	; 0x28
    5fba:	4ea9      	ldr	r6, [pc, #676]	; (6260 <main+0x808>)
    5fbc:	1c38      	adds	r0, r7, #0
    5fbe:	47b0      	blx	r6
    5fc0:	9008      	str	r0, [sp, #32]
    5fc2:	9109      	str	r1, [sp, #36]	; 0x24
    5fc4:	9812      	ldr	r0, [sp, #72]	; 0x48
    5fc6:	47b0      	blx	r6
    5fc8:	9006      	str	r0, [sp, #24]
    5fca:	9107      	str	r1, [sp, #28]
    5fcc:	9815      	ldr	r0, [sp, #84]	; 0x54
    5fce:	47b0      	blx	r6
    5fd0:	9004      	str	r0, [sp, #16]
    5fd2:	9105      	str	r1, [sp, #20]
    5fd4:	4ba3      	ldr	r3, [pc, #652]	; (6264 <main+0x80c>)
    5fd6:	6818      	ldr	r0, [r3, #0]
    5fd8:	47b0      	blx	r6
    5fda:	9002      	str	r0, [sp, #8]
    5fdc:	9103      	str	r1, [sp, #12]
    5fde:	4ba2      	ldr	r3, [pc, #648]	; (6268 <main+0x810>)
    5fe0:	6818      	ldr	r0, [r3, #0]
    5fe2:	47b0      	blx	r6
    5fe4:	9000      	str	r0, [sp, #0]
    5fe6:	9101      	str	r1, [sp, #4]
    5fe8:	4aa0      	ldr	r2, [pc, #640]	; (626c <main+0x814>)
    5fea:	2180      	movs	r1, #128	; 0x80
    5fec:	0049      	lsls	r1, r1, #1
    5fee:	a81d      	add	r0, sp, #116	; 0x74
    5ff0:	4b9f      	ldr	r3, [pc, #636]	; (6270 <main+0x818>)
    5ff2:	4798      	blx	r3
						send(HTTP_SOCKET, (uint8_t *)json_response, strlen(json_response));
    5ff4:	a81d      	add	r0, sp, #116	; 0x74
    5ff6:	4b9f      	ldr	r3, [pc, #636]	; (6274 <main+0x81c>)
    5ff8:	4798      	blx	r3
    5ffa:	b282      	uxth	r2, r0
    5ffc:	a91d      	add	r1, sp, #116	; 0x74
    5ffe:	0020      	movs	r0, r4
    6000:	4b89      	ldr	r3, [pc, #548]	; (6228 <main+0x7d0>)
    6002:	4798      	blx	r3
    6004:	e7b6      	b.n	5f74 <main+0x51c>
						} else if (strstr((char *)TCP_RX_BUF, "GET /set_vals") != NULL) {
    6006:	499c      	ldr	r1, [pc, #624]	; (6278 <main+0x820>)
    6008:	487a      	ldr	r0, [pc, #488]	; (61f4 <main+0x79c>)
    600a:	4b7e      	ldr	r3, [pc, #504]	; (6204 <main+0x7ac>)
    600c:	4798      	blx	r3
    600e:	2800      	cmp	r0, #0
    6010:	d052      	beq.n	60b8 <main+0x660>
						char *query_string = strstr((char *)TCP_RX_BUF, "GET /set_vals") + strlen("GET /set_vals?");
    6012:	300e      	adds	r0, #14
						sscanf(query_string, "amp=%f&volt=%f", &amp, &volt);
    6014:	4f93      	ldr	r7, [pc, #588]	; (6264 <main+0x80c>)
    6016:	4b94      	ldr	r3, [pc, #592]	; (6268 <main+0x810>)
    6018:	469a      	mov	sl, r3
    601a:	003b      	movs	r3, r7
    601c:	4652      	mov	r2, sl
    601e:	4997      	ldr	r1, [pc, #604]	; (627c <main+0x824>)
    6020:	4e97      	ldr	r6, [pc, #604]	; (6280 <main+0x828>)
    6022:	47b0      	blx	r6
						printf("%f; %f\r\n", amp, volt);
    6024:	4b8e      	ldr	r3, [pc, #568]	; (6260 <main+0x808>)
    6026:	4699      	mov	r9, r3
    6028:	4653      	mov	r3, sl
    602a:	6818      	ldr	r0, [r3, #0]
    602c:	47c8      	blx	r9
    602e:	9012      	str	r0, [sp, #72]	; 0x48
    6030:	9113      	str	r1, [sp, #76]	; 0x4c
    6032:	6838      	ldr	r0, [r7, #0]
    6034:	47c8      	blx	r9
    6036:	9000      	str	r0, [sp, #0]
    6038:	9101      	str	r1, [sp, #4]
    603a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    603c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    603e:	4891      	ldr	r0, [pc, #580]	; (6284 <main+0x82c>)
    6040:	4991      	ldr	r1, [pc, #580]	; (6288 <main+0x830>)
    6042:	4788      	blx	r1
						SET_DAC_VOLTAGE(volt);
    6044:	6838      	ldr	r0, [r7, #0]
    6046:	47c8      	blx	r9
    6048:	4f90      	ldr	r7, [pc, #576]	; (628c <main+0x834>)
    604a:	4a91      	ldr	r2, [pc, #580]	; (6290 <main+0x838>)
    604c:	4b91      	ldr	r3, [pc, #580]	; (6294 <main+0x83c>)
    604e:	47b8      	blx	r7
    6050:	4b91      	ldr	r3, [pc, #580]	; (6298 <main+0x840>)
    6052:	469b      	mov	fp, r3
    6054:	2200      	movs	r2, #0
    6056:	4b91      	ldr	r3, [pc, #580]	; (629c <main+0x844>)
    6058:	47d8      	blx	fp
    605a:	4b91      	ldr	r3, [pc, #580]	; (62a0 <main+0x848>)
    605c:	4798      	blx	r3
    605e:	b280      	uxth	r0, r0
    6060:	0a03      	lsrs	r3, r0, #8
    6062:	220f      	movs	r2, #15
    6064:	4013      	ands	r3, r2
    6066:	ae1d      	add	r6, sp, #116	; 0x74
    6068:	7033      	strb	r3, [r6, #0]
    606a:	7070      	strb	r0, [r6, #1]
    606c:	3a0d      	subs	r2, #13
    606e:	0031      	movs	r1, r6
    6070:	2038      	movs	r0, #56	; 0x38
    6072:	4b8c      	ldr	r3, [pc, #560]	; (62a4 <main+0x84c>)
    6074:	4698      	mov	r8, r3
    6076:	4798      	blx	r3
						SET_DAC_CURRENT(amp);
    6078:	4653      	mov	r3, sl
    607a:	6818      	ldr	r0, [r3, #0]
    607c:	47c8      	blx	r9
    607e:	2200      	movs	r2, #0
    6080:	4b89      	ldr	r3, [pc, #548]	; (62a8 <main+0x850>)
    6082:	47b8      	blx	r7
    6084:	2200      	movs	r2, #0
    6086:	4b89      	ldr	r3, [pc, #548]	; (62ac <main+0x854>)
    6088:	47d8      	blx	fp
    608a:	4b85      	ldr	r3, [pc, #532]	; (62a0 <main+0x848>)
    608c:	4798      	blx	r3
    608e:	b280      	uxth	r0, r0
    6090:	0a03      	lsrs	r3, r0, #8
    6092:	220f      	movs	r2, #15
    6094:	4013      	ands	r3, r2
    6096:	2210      	movs	r2, #16
    6098:	4313      	orrs	r3, r2
    609a:	7033      	strb	r3, [r6, #0]
    609c:	7070      	strb	r0, [r6, #1]
    609e:	2202      	movs	r2, #2
    60a0:	a91d      	add	r1, sp, #116	; 0x74
    60a2:	2038      	movs	r0, #56	; 0x38
    60a4:	47c0      	blx	r8
						remoteCtrl = 1;
    60a6:	2201      	movs	r2, #1
    60a8:	4b6b      	ldr	r3, [pc, #428]	; (6258 <main+0x800>)
    60aa:	701a      	strb	r2, [r3, #0]
						send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 67);
    60ac:	3242      	adds	r2, #66	; 0x42
    60ae:	4980      	ldr	r1, [pc, #512]	; (62b0 <main+0x858>)
    60b0:	0020      	movs	r0, r4
    60b2:	4b5d      	ldr	r3, [pc, #372]	; (6228 <main+0x7d0>)
    60b4:	4798      	blx	r3
    60b6:	e75d      	b.n	5f74 <main+0x51c>
						} else if (strstr((char *)TCP_RX_BUF, "GET /control") != NULL) {
    60b8:	497e      	ldr	r1, [pc, #504]	; (62b4 <main+0x85c>)
    60ba:	484e      	ldr	r0, [pc, #312]	; (61f4 <main+0x79c>)
    60bc:	4b51      	ldr	r3, [pc, #324]	; (6204 <main+0x7ac>)
    60be:	4798      	blx	r3
    60c0:	2800      	cmp	r0, #0
    60c2:	d100      	bne.n	60c6 <main+0x66e>
    60c4:	e756      	b.n	5f74 <main+0x51c>
						char *query_string = strstr((char *)TCP_RX_BUF, "GET /control") + strlen("GET /control?");
    60c6:	300d      	adds	r0, #13
						sscanf(query_string, "device=%[^&]&action=%s", device, action);
    60c8:	ab1d      	add	r3, sp, #116	; 0x74
    60ca:	aa1a      	add	r2, sp, #104	; 0x68
    60cc:	497a      	ldr	r1, [pc, #488]	; (62b8 <main+0x860>)
    60ce:	4e6c      	ldr	r6, [pc, #432]	; (6280 <main+0x828>)
    60d0:	47b0      	blx	r6
						printf("%s; %s\r\n", device, action);
    60d2:	aa1d      	add	r2, sp, #116	; 0x74
    60d4:	a91a      	add	r1, sp, #104	; 0x68
    60d6:	4879      	ldr	r0, [pc, #484]	; (62bc <main+0x864>)
    60d8:	4b6b      	ldr	r3, [pc, #428]	; (6288 <main+0x830>)
    60da:	4798      	blx	r3
						if (strcmp(device, "fan") == 0) {
    60dc:	4978      	ldr	r1, [pc, #480]	; (62c0 <main+0x868>)
    60de:	a81a      	add	r0, sp, #104	; 0x68
    60e0:	4b78      	ldr	r3, [pc, #480]	; (62c4 <main+0x86c>)
    60e2:	4798      	blx	r3
    60e4:	2800      	cmp	r0, #0
    60e6:	d12a      	bne.n	613e <main+0x6e6>
							buzer(3);
    60e8:	3003      	adds	r0, #3
    60ea:	4b77      	ldr	r3, [pc, #476]	; (62c8 <main+0x870>)
    60ec:	4798      	blx	r3
							gpio_set_pin_level(O2, strcmp(action, "on") == 0);
    60ee:	4977      	ldr	r1, [pc, #476]	; (62cc <main+0x874>)
    60f0:	a81d      	add	r0, sp, #116	; 0x74
    60f2:	4b74      	ldr	r3, [pc, #464]	; (62c4 <main+0x86c>)
    60f4:	4798      	blx	r3
    60f6:	2800      	cmp	r0, #0
    60f8:	d115      	bne.n	6126 <main+0x6ce>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    60fa:	2280      	movs	r2, #128	; 0x80
    60fc:	0052      	lsls	r2, r2, #1
    60fe:	23c0      	movs	r3, #192	; 0xc0
    6100:	05db      	lsls	r3, r3, #23
    6102:	619a      	str	r2, [r3, #24]
							gpio_set_pin_level(O3, strcmp(action, "on") == 0);
    6104:	4971      	ldr	r1, [pc, #452]	; (62cc <main+0x874>)
    6106:	a81d      	add	r0, sp, #116	; 0x74
    6108:	4b6e      	ldr	r3, [pc, #440]	; (62c4 <main+0x86c>)
    610a:	4798      	blx	r3
    610c:	2800      	cmp	r0, #0
    610e:	d110      	bne.n	6132 <main+0x6da>
    6110:	2280      	movs	r2, #128	; 0x80
    6112:	0092      	lsls	r2, r2, #2
    6114:	23c0      	movs	r3, #192	; 0xc0
    6116:	05db      	lsls	r3, r3, #23
    6118:	619a      	str	r2, [r3, #24]
						send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    611a:	2241      	movs	r2, #65	; 0x41
    611c:	4964      	ldr	r1, [pc, #400]	; (62b0 <main+0x858>)
    611e:	0020      	movs	r0, r4
    6120:	4b41      	ldr	r3, [pc, #260]	; (6228 <main+0x7d0>)
    6122:	4798      	blx	r3
    6124:	e726      	b.n	5f74 <main+0x51c>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6126:	2280      	movs	r2, #128	; 0x80
    6128:	0052      	lsls	r2, r2, #1
    612a:	23c0      	movs	r3, #192	; 0xc0
    612c:	05db      	lsls	r3, r3, #23
    612e:	615a      	str	r2, [r3, #20]
    6130:	e7e8      	b.n	6104 <main+0x6ac>
    6132:	2280      	movs	r2, #128	; 0x80
    6134:	0092      	lsls	r2, r2, #2
    6136:	23c0      	movs	r3, #192	; 0xc0
    6138:	05db      	lsls	r3, r3, #23
    613a:	615a      	str	r2, [r3, #20]
    613c:	e7ed      	b.n	611a <main+0x6c2>
							} else if (strcmp(device, "rem") == 0) {
    613e:	4964      	ldr	r1, [pc, #400]	; (62d0 <main+0x878>)
    6140:	a81a      	add	r0, sp, #104	; 0x68
    6142:	4b60      	ldr	r3, [pc, #384]	; (62c4 <main+0x86c>)
    6144:	4798      	blx	r3
    6146:	2800      	cmp	r0, #0
    6148:	d119      	bne.n	617e <main+0x726>
							buzer(3);
    614a:	3003      	adds	r0, #3
    614c:	4b5e      	ldr	r3, [pc, #376]	; (62c8 <main+0x870>)
    614e:	4798      	blx	r3
							remoteCtrl = (strcmp(action, "on") == 0);
    6150:	495e      	ldr	r1, [pc, #376]	; (62cc <main+0x874>)
    6152:	a81d      	add	r0, sp, #116	; 0x74
    6154:	4b5b      	ldr	r3, [pc, #364]	; (62c4 <main+0x86c>)
    6156:	4798      	blx	r3
    6158:	4243      	negs	r3, r0
    615a:	4143      	adcs	r3, r0
    615c:	b2db      	uxtb	r3, r3
    615e:	4a3e      	ldr	r2, [pc, #248]	; (6258 <main+0x800>)
    6160:	7013      	strb	r3, [r2, #0]
    6162:	2b00      	cmp	r3, #0
    6164:	d005      	beq.n	6172 <main+0x71a>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    6166:	2280      	movs	r2, #128	; 0x80
    6168:	00d2      	lsls	r2, r2, #3
    616a:	23c0      	movs	r3, #192	; 0xc0
    616c:	05db      	lsls	r3, r3, #23
    616e:	619a      	str	r2, [r3, #24]
    6170:	e7d3      	b.n	611a <main+0x6c2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6172:	2280      	movs	r2, #128	; 0x80
    6174:	00d2      	lsls	r2, r2, #3
    6176:	23c0      	movs	r3, #192	; 0xc0
    6178:	05db      	lsls	r3, r3, #23
    617a:	615a      	str	r2, [r3, #20]
    617c:	e7cd      	b.n	611a <main+0x6c2>
							} else if (strcmp(device, "psu") == 0) {
    617e:	4955      	ldr	r1, [pc, #340]	; (62d4 <main+0x87c>)
    6180:	a81a      	add	r0, sp, #104	; 0x68
    6182:	4b50      	ldr	r3, [pc, #320]	; (62c4 <main+0x86c>)
    6184:	4798      	blx	r3
    6186:	2800      	cmp	r0, #0
    6188:	d1c7      	bne.n	611a <main+0x6c2>
							buzer(3);
    618a:	3003      	adds	r0, #3
    618c:	4b4e      	ldr	r3, [pc, #312]	; (62c8 <main+0x870>)
    618e:	4798      	blx	r3
							outState = (strcmp(action, "on") == 0) ? 1 : 0;
    6190:	494e      	ldr	r1, [pc, #312]	; (62cc <main+0x874>)
    6192:	a81d      	add	r0, sp, #116	; 0x74
    6194:	4b4b      	ldr	r3, [pc, #300]	; (62c4 <main+0x86c>)
    6196:	4798      	blx	r3
    6198:	0003      	movs	r3, r0
    619a:	4258      	negs	r0, r3
    619c:	4158      	adcs	r0, r3
    619e:	4b2f      	ldr	r3, [pc, #188]	; (625c <main+0x804>)
    61a0:	7018      	strb	r0, [r3, #0]
							remoteCtrl = 1;
    61a2:	2201      	movs	r2, #1
    61a4:	4b2c      	ldr	r3, [pc, #176]	; (6258 <main+0x800>)
    61a6:	701a      	strb	r2, [r3, #0]
    61a8:	e7b7      	b.n	611a <main+0x6c2>
						delay_ms(1);
    61aa:	2001      	movs	r0, #1
    61ac:	4b18      	ldr	r3, [pc, #96]	; (6210 <main+0x7b8>)
    61ae:	4798      	blx	r3
					while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    61b0:	0020      	movs	r0, r4
    61b2:	4b18      	ldr	r3, [pc, #96]	; (6214 <main+0x7bc>)
    61b4:	4798      	blx	r3
    61b6:	0006      	movs	r6, r0
    61b8:	23f8      	movs	r3, #248	; 0xf8
    61ba:	015b      	lsls	r3, r3, #5
    61bc:	18e8      	adds	r0, r5, r3
    61be:	4b16      	ldr	r3, [pc, #88]	; (6218 <main+0x7c0>)
    61c0:	4798      	blx	r3
    61c2:	0280      	lsls	r0, r0, #10
    61c4:	4286      	cmp	r6, r0
    61c6:	d1f0      	bne.n	61aa <main+0x752>
					}
					close(HTTP_SOCKET);
    61c8:	0020      	movs	r0, r4
    61ca:	4b43      	ldr	r3, [pc, #268]	; (62d8 <main+0x880>)
    61cc:	4798      	blx	r3
    61ce:	e09a      	b.n	6306 <main+0x8ae>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    61d0:	2180      	movs	r1, #128	; 0x80
    61d2:	0289      	lsls	r1, r1, #10
    61d4:	3397      	adds	r3, #151	; 0x97
    61d6:	22c0      	movs	r2, #192	; 0xc0
    61d8:	05d2      	lsls	r2, r2, #23
    61da:	50d1      	str	r1, [r2, r3]
    61dc:	e09e      	b.n	631c <main+0x8c4>
    61de:	2280      	movs	r2, #128	; 0x80
    61e0:	0392      	lsls	r2, r2, #14
    61e2:	23c0      	movs	r3, #192	; 0xc0
    61e4:	05db      	lsls	r3, r3, #23
    61e6:	619a      	str	r2, [r3, #24]
    61e8:	e0a2      	b.n	6330 <main+0x8d8>
    61ea:	46c0      	nop			; (mov r8, r8)
    61ec:	000030e1 	.word	0x000030e1
    61f0:	00003495 	.word	0x00003495
    61f4:	20000f2c 	.word	0x20000f2c
    61f8:	000088d9 	.word	0x000088d9
    61fc:	00002bb9 	.word	0x00002bb9
    6200:	0001309c 	.word	0x0001309c
    6204:	000090dd 	.word	0x000090dd
    6208:	000130a4 	.word	0x000130a4
    620c:	00008a31 	.word	0x00008a31
    6210:	000001b9 	.word	0x000001b9
    6214:	00003429 	.word	0x00003429
    6218:	0000326d 	.word	0x0000326d
    621c:	00001dae 	.word	0x00001dae
    6220:	00001daf 	.word	0x00001daf
    6224:	00013284 	.word	0x00013284
    6228:	00002a6d 	.word	0x00002a6d
    622c:	000130b8 	.word	0x000130b8
    6230:	000130cc 	.word	0x000130cc
    6234:	000130e0 	.word	0x000130e0
    6238:	00000582 	.word	0x00000582
    623c:	000129c8 	.word	0x000129c8
    6240:	000029d1 	.word	0x000029d1
    6244:	00013110 	.word	0x00013110
    6248:	20000044 	.word	0x20000044
    624c:	2000007c 	.word	0x2000007c
    6250:	000068bd 	.word	0x000068bd
    6254:	20000da9 	.word	0x20000da9
    6258:	20000daa 	.word	0x20000daa
    625c:	2000005f 	.word	0x2000005f
    6260:	0000840d 	.word	0x0000840d
    6264:	20000078 	.word	0x20000078
    6268:	20000040 	.word	0x20000040
    626c:	00013120 	.word	0x00013120
    6270:	00008a45 	.word	0x00008a45
    6274:	00008db5 	.word	0x00008db5
    6278:	000131d0 	.word	0x000131d0
    627c:	000131e0 	.word	0x000131e0
    6280:	00008b0d 	.word	0x00008b0d
    6284:	000131f0 	.word	0x000131f0
    6288:	0000896d 	.word	0x0000896d
    628c:	00007785 	.word	0x00007785
    6290:	8f044a5f 	.word	0x8f044a5f
    6294:	404fd7f4 	.word	0x404fd7f4
    6298:	00006afd 	.word	0x00006afd
    629c:	401a0000 	.word	0x401a0000
    62a0:	00006701 	.word	0x00006701
    62a4:	000023d5 	.word	0x000023d5
    62a8:	4083e800 	.word	0x4083e800
    62ac:	407f4800 	.word	0x407f4800
    62b0:	000131fc 	.word	0x000131fc
    62b4:	00013240 	.word	0x00013240
    62b8:	00013250 	.word	0x00013250
    62bc:	00013268 	.word	0x00013268
    62c0:	00013274 	.word	0x00013274
    62c4:	00008d2d 	.word	0x00008d2d
    62c8:	00001cbd 	.word	0x00001cbd
    62cc:	00013278 	.word	0x00013278
    62d0:	0001327c 	.word	0x0001327c
    62d4:	00013280 	.word	0x00013280
    62d8:	0000274d 	.word	0x0000274d
		for (uint8_t HTTP_SOCKET = 5; HTTP_SOCKET <= 7; HTTP_SOCKET++) {
    62dc:	3401      	adds	r4, #1
    62de:	b2e4      	uxtb	r4, r4
    62e0:	2c07      	cmp	r4, #7
    62e2:	d900      	bls.n	62e6 <main+0x88e>
    62e4:	e441      	b.n	5b6a <main+0x112>
			if (getSn_SR(HTTP_SOCKET) == SOCK_ESTABLISHED) {
    62e6:	9414      	str	r4, [sp, #80]	; 0x50
    62e8:	00a3      	lsls	r3, r4, #2
    62ea:	3301      	adds	r3, #1
    62ec:	00dd      	lsls	r5, r3, #3
    62ee:	23c0      	movs	r3, #192	; 0xc0
    62f0:	009b      	lsls	r3, r3, #2
    62f2:	469c      	mov	ip, r3
    62f4:	44ac      	add	ip, r5
    62f6:	4663      	mov	r3, ip
    62f8:	9311      	str	r3, [sp, #68]	; 0x44
    62fa:	4660      	mov	r0, ip
    62fc:	4b15      	ldr	r3, [pc, #84]	; (6354 <main+0x8fc>)
    62fe:	4798      	blx	r3
    6300:	2817      	cmp	r0, #23
    6302:	d100      	bne.n	6306 <main+0x8ae>
    6304:	e5da      	b.n	5ebc <main+0x464>
				}
			}
			if(outState == 1){
    6306:	4b14      	ldr	r3, [pc, #80]	; (6358 <main+0x900>)
    6308:	781b      	ldrb	r3, [r3, #0]
    630a:	2b01      	cmp	r3, #1
    630c:	d100      	bne.n	6310 <main+0x8b8>
    630e:	e75f      	b.n	61d0 <main+0x778>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    6310:	2180      	movs	r1, #128	; 0x80
    6312:	0289      	lsls	r1, r1, #10
    6314:	2394      	movs	r3, #148	; 0x94
    6316:	22c0      	movs	r2, #192	; 0xc0
    6318:	05d2      	lsls	r2, r2, #23
    631a:	50d1      	str	r1, [r2, r3]
				gpio_set_pin_level(PSU_OUT_EN, true);
				}else{
				gpio_set_pin_level(PSU_OUT_EN, false);
				
			}
			if(remoteCtrl == 1){
    631c:	4b0f      	ldr	r3, [pc, #60]	; (635c <main+0x904>)
    631e:	781b      	ldrb	r3, [r3, #0]
    6320:	2b01      	cmp	r3, #1
    6322:	d100      	bne.n	6326 <main+0x8ce>
    6324:	e75b      	b.n	61de <main+0x786>
    6326:	2280      	movs	r2, #128	; 0x80
    6328:	0392      	lsls	r2, r2, #14
    632a:	23c0      	movs	r3, #192	; 0xc0
    632c:	05db      	lsls	r3, r3, #23
    632e:	615a      	str	r2, [r3, #20]
			}
			//if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSE_WAIT) {
			//disconnect(HTTP_SOCKET);
			//}

			if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSED) {
    6330:	9811      	ldr	r0, [sp, #68]	; 0x44
    6332:	4b08      	ldr	r3, [pc, #32]	; (6354 <main+0x8fc>)
    6334:	4798      	blx	r3
    6336:	2800      	cmp	r0, #0
    6338:	d1d0      	bne.n	62dc <main+0x884>
				socket(HTTP_SOCKET, Sn_MR_TCP, socketPort[HTTP_SOCKET], 0);
    633a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    633c:	005b      	lsls	r3, r3, #1
    633e:	4a08      	ldr	r2, [pc, #32]	; (6360 <main+0x908>)
    6340:	5a9a      	ldrh	r2, [r3, r2]
    6342:	2300      	movs	r3, #0
    6344:	2101      	movs	r1, #1
    6346:	0020      	movs	r0, r4
    6348:	4d06      	ldr	r5, [pc, #24]	; (6364 <main+0x90c>)
    634a:	47a8      	blx	r5
				listen(HTTP_SOCKET);
    634c:	0020      	movs	r0, r4
    634e:	4b06      	ldr	r3, [pc, #24]	; (6368 <main+0x910>)
    6350:	4798      	blx	r3
    6352:	e7c3      	b.n	62dc <main+0x884>
    6354:	0000326d 	.word	0x0000326d
    6358:	2000005f 	.word	0x2000005f
    635c:	20000daa 	.word	0x20000daa
    6360:	20000068 	.word	0x20000068
    6364:	000027d5 	.word	0x000027d5
    6368:	00002955 	.word	0x00002955

0000636c <__udivsi3>:
    636c:	2200      	movs	r2, #0
    636e:	0843      	lsrs	r3, r0, #1
    6370:	428b      	cmp	r3, r1
    6372:	d374      	bcc.n	645e <__udivsi3+0xf2>
    6374:	0903      	lsrs	r3, r0, #4
    6376:	428b      	cmp	r3, r1
    6378:	d35f      	bcc.n	643a <__udivsi3+0xce>
    637a:	0a03      	lsrs	r3, r0, #8
    637c:	428b      	cmp	r3, r1
    637e:	d344      	bcc.n	640a <__udivsi3+0x9e>
    6380:	0b03      	lsrs	r3, r0, #12
    6382:	428b      	cmp	r3, r1
    6384:	d328      	bcc.n	63d8 <__udivsi3+0x6c>
    6386:	0c03      	lsrs	r3, r0, #16
    6388:	428b      	cmp	r3, r1
    638a:	d30d      	bcc.n	63a8 <__udivsi3+0x3c>
    638c:	22ff      	movs	r2, #255	; 0xff
    638e:	0209      	lsls	r1, r1, #8
    6390:	ba12      	rev	r2, r2
    6392:	0c03      	lsrs	r3, r0, #16
    6394:	428b      	cmp	r3, r1
    6396:	d302      	bcc.n	639e <__udivsi3+0x32>
    6398:	1212      	asrs	r2, r2, #8
    639a:	0209      	lsls	r1, r1, #8
    639c:	d065      	beq.n	646a <__udivsi3+0xfe>
    639e:	0b03      	lsrs	r3, r0, #12
    63a0:	428b      	cmp	r3, r1
    63a2:	d319      	bcc.n	63d8 <__udivsi3+0x6c>
    63a4:	e000      	b.n	63a8 <__udivsi3+0x3c>
    63a6:	0a09      	lsrs	r1, r1, #8
    63a8:	0bc3      	lsrs	r3, r0, #15
    63aa:	428b      	cmp	r3, r1
    63ac:	d301      	bcc.n	63b2 <__udivsi3+0x46>
    63ae:	03cb      	lsls	r3, r1, #15
    63b0:	1ac0      	subs	r0, r0, r3
    63b2:	4152      	adcs	r2, r2
    63b4:	0b83      	lsrs	r3, r0, #14
    63b6:	428b      	cmp	r3, r1
    63b8:	d301      	bcc.n	63be <__udivsi3+0x52>
    63ba:	038b      	lsls	r3, r1, #14
    63bc:	1ac0      	subs	r0, r0, r3
    63be:	4152      	adcs	r2, r2
    63c0:	0b43      	lsrs	r3, r0, #13
    63c2:	428b      	cmp	r3, r1
    63c4:	d301      	bcc.n	63ca <__udivsi3+0x5e>
    63c6:	034b      	lsls	r3, r1, #13
    63c8:	1ac0      	subs	r0, r0, r3
    63ca:	4152      	adcs	r2, r2
    63cc:	0b03      	lsrs	r3, r0, #12
    63ce:	428b      	cmp	r3, r1
    63d0:	d301      	bcc.n	63d6 <__udivsi3+0x6a>
    63d2:	030b      	lsls	r3, r1, #12
    63d4:	1ac0      	subs	r0, r0, r3
    63d6:	4152      	adcs	r2, r2
    63d8:	0ac3      	lsrs	r3, r0, #11
    63da:	428b      	cmp	r3, r1
    63dc:	d301      	bcc.n	63e2 <__udivsi3+0x76>
    63de:	02cb      	lsls	r3, r1, #11
    63e0:	1ac0      	subs	r0, r0, r3
    63e2:	4152      	adcs	r2, r2
    63e4:	0a83      	lsrs	r3, r0, #10
    63e6:	428b      	cmp	r3, r1
    63e8:	d301      	bcc.n	63ee <__udivsi3+0x82>
    63ea:	028b      	lsls	r3, r1, #10
    63ec:	1ac0      	subs	r0, r0, r3
    63ee:	4152      	adcs	r2, r2
    63f0:	0a43      	lsrs	r3, r0, #9
    63f2:	428b      	cmp	r3, r1
    63f4:	d301      	bcc.n	63fa <__udivsi3+0x8e>
    63f6:	024b      	lsls	r3, r1, #9
    63f8:	1ac0      	subs	r0, r0, r3
    63fa:	4152      	adcs	r2, r2
    63fc:	0a03      	lsrs	r3, r0, #8
    63fe:	428b      	cmp	r3, r1
    6400:	d301      	bcc.n	6406 <__udivsi3+0x9a>
    6402:	020b      	lsls	r3, r1, #8
    6404:	1ac0      	subs	r0, r0, r3
    6406:	4152      	adcs	r2, r2
    6408:	d2cd      	bcs.n	63a6 <__udivsi3+0x3a>
    640a:	09c3      	lsrs	r3, r0, #7
    640c:	428b      	cmp	r3, r1
    640e:	d301      	bcc.n	6414 <__udivsi3+0xa8>
    6410:	01cb      	lsls	r3, r1, #7
    6412:	1ac0      	subs	r0, r0, r3
    6414:	4152      	adcs	r2, r2
    6416:	0983      	lsrs	r3, r0, #6
    6418:	428b      	cmp	r3, r1
    641a:	d301      	bcc.n	6420 <__udivsi3+0xb4>
    641c:	018b      	lsls	r3, r1, #6
    641e:	1ac0      	subs	r0, r0, r3
    6420:	4152      	adcs	r2, r2
    6422:	0943      	lsrs	r3, r0, #5
    6424:	428b      	cmp	r3, r1
    6426:	d301      	bcc.n	642c <__udivsi3+0xc0>
    6428:	014b      	lsls	r3, r1, #5
    642a:	1ac0      	subs	r0, r0, r3
    642c:	4152      	adcs	r2, r2
    642e:	0903      	lsrs	r3, r0, #4
    6430:	428b      	cmp	r3, r1
    6432:	d301      	bcc.n	6438 <__udivsi3+0xcc>
    6434:	010b      	lsls	r3, r1, #4
    6436:	1ac0      	subs	r0, r0, r3
    6438:	4152      	adcs	r2, r2
    643a:	08c3      	lsrs	r3, r0, #3
    643c:	428b      	cmp	r3, r1
    643e:	d301      	bcc.n	6444 <__udivsi3+0xd8>
    6440:	00cb      	lsls	r3, r1, #3
    6442:	1ac0      	subs	r0, r0, r3
    6444:	4152      	adcs	r2, r2
    6446:	0883      	lsrs	r3, r0, #2
    6448:	428b      	cmp	r3, r1
    644a:	d301      	bcc.n	6450 <__udivsi3+0xe4>
    644c:	008b      	lsls	r3, r1, #2
    644e:	1ac0      	subs	r0, r0, r3
    6450:	4152      	adcs	r2, r2
    6452:	0843      	lsrs	r3, r0, #1
    6454:	428b      	cmp	r3, r1
    6456:	d301      	bcc.n	645c <__udivsi3+0xf0>
    6458:	004b      	lsls	r3, r1, #1
    645a:	1ac0      	subs	r0, r0, r3
    645c:	4152      	adcs	r2, r2
    645e:	1a41      	subs	r1, r0, r1
    6460:	d200      	bcs.n	6464 <__udivsi3+0xf8>
    6462:	4601      	mov	r1, r0
    6464:	4152      	adcs	r2, r2
    6466:	4610      	mov	r0, r2
    6468:	4770      	bx	lr
    646a:	e7ff      	b.n	646c <__udivsi3+0x100>
    646c:	b501      	push	{r0, lr}
    646e:	2000      	movs	r0, #0
    6470:	f000 f8f0 	bl	6654 <__aeabi_idiv0>
    6474:	bd02      	pop	{r1, pc}
    6476:	46c0      	nop			; (mov r8, r8)

00006478 <__aeabi_uidivmod>:
    6478:	2900      	cmp	r1, #0
    647a:	d0f7      	beq.n	646c <__udivsi3+0x100>
    647c:	e776      	b.n	636c <__udivsi3>
    647e:	4770      	bx	lr

00006480 <__divsi3>:
    6480:	4603      	mov	r3, r0
    6482:	430b      	orrs	r3, r1
    6484:	d47f      	bmi.n	6586 <__divsi3+0x106>
    6486:	2200      	movs	r2, #0
    6488:	0843      	lsrs	r3, r0, #1
    648a:	428b      	cmp	r3, r1
    648c:	d374      	bcc.n	6578 <__divsi3+0xf8>
    648e:	0903      	lsrs	r3, r0, #4
    6490:	428b      	cmp	r3, r1
    6492:	d35f      	bcc.n	6554 <__divsi3+0xd4>
    6494:	0a03      	lsrs	r3, r0, #8
    6496:	428b      	cmp	r3, r1
    6498:	d344      	bcc.n	6524 <__divsi3+0xa4>
    649a:	0b03      	lsrs	r3, r0, #12
    649c:	428b      	cmp	r3, r1
    649e:	d328      	bcc.n	64f2 <__divsi3+0x72>
    64a0:	0c03      	lsrs	r3, r0, #16
    64a2:	428b      	cmp	r3, r1
    64a4:	d30d      	bcc.n	64c2 <__divsi3+0x42>
    64a6:	22ff      	movs	r2, #255	; 0xff
    64a8:	0209      	lsls	r1, r1, #8
    64aa:	ba12      	rev	r2, r2
    64ac:	0c03      	lsrs	r3, r0, #16
    64ae:	428b      	cmp	r3, r1
    64b0:	d302      	bcc.n	64b8 <__divsi3+0x38>
    64b2:	1212      	asrs	r2, r2, #8
    64b4:	0209      	lsls	r1, r1, #8
    64b6:	d065      	beq.n	6584 <__divsi3+0x104>
    64b8:	0b03      	lsrs	r3, r0, #12
    64ba:	428b      	cmp	r3, r1
    64bc:	d319      	bcc.n	64f2 <__divsi3+0x72>
    64be:	e000      	b.n	64c2 <__divsi3+0x42>
    64c0:	0a09      	lsrs	r1, r1, #8
    64c2:	0bc3      	lsrs	r3, r0, #15
    64c4:	428b      	cmp	r3, r1
    64c6:	d301      	bcc.n	64cc <__divsi3+0x4c>
    64c8:	03cb      	lsls	r3, r1, #15
    64ca:	1ac0      	subs	r0, r0, r3
    64cc:	4152      	adcs	r2, r2
    64ce:	0b83      	lsrs	r3, r0, #14
    64d0:	428b      	cmp	r3, r1
    64d2:	d301      	bcc.n	64d8 <__divsi3+0x58>
    64d4:	038b      	lsls	r3, r1, #14
    64d6:	1ac0      	subs	r0, r0, r3
    64d8:	4152      	adcs	r2, r2
    64da:	0b43      	lsrs	r3, r0, #13
    64dc:	428b      	cmp	r3, r1
    64de:	d301      	bcc.n	64e4 <__divsi3+0x64>
    64e0:	034b      	lsls	r3, r1, #13
    64e2:	1ac0      	subs	r0, r0, r3
    64e4:	4152      	adcs	r2, r2
    64e6:	0b03      	lsrs	r3, r0, #12
    64e8:	428b      	cmp	r3, r1
    64ea:	d301      	bcc.n	64f0 <__divsi3+0x70>
    64ec:	030b      	lsls	r3, r1, #12
    64ee:	1ac0      	subs	r0, r0, r3
    64f0:	4152      	adcs	r2, r2
    64f2:	0ac3      	lsrs	r3, r0, #11
    64f4:	428b      	cmp	r3, r1
    64f6:	d301      	bcc.n	64fc <__divsi3+0x7c>
    64f8:	02cb      	lsls	r3, r1, #11
    64fa:	1ac0      	subs	r0, r0, r3
    64fc:	4152      	adcs	r2, r2
    64fe:	0a83      	lsrs	r3, r0, #10
    6500:	428b      	cmp	r3, r1
    6502:	d301      	bcc.n	6508 <__divsi3+0x88>
    6504:	028b      	lsls	r3, r1, #10
    6506:	1ac0      	subs	r0, r0, r3
    6508:	4152      	adcs	r2, r2
    650a:	0a43      	lsrs	r3, r0, #9
    650c:	428b      	cmp	r3, r1
    650e:	d301      	bcc.n	6514 <__divsi3+0x94>
    6510:	024b      	lsls	r3, r1, #9
    6512:	1ac0      	subs	r0, r0, r3
    6514:	4152      	adcs	r2, r2
    6516:	0a03      	lsrs	r3, r0, #8
    6518:	428b      	cmp	r3, r1
    651a:	d301      	bcc.n	6520 <__divsi3+0xa0>
    651c:	020b      	lsls	r3, r1, #8
    651e:	1ac0      	subs	r0, r0, r3
    6520:	4152      	adcs	r2, r2
    6522:	d2cd      	bcs.n	64c0 <__divsi3+0x40>
    6524:	09c3      	lsrs	r3, r0, #7
    6526:	428b      	cmp	r3, r1
    6528:	d301      	bcc.n	652e <__divsi3+0xae>
    652a:	01cb      	lsls	r3, r1, #7
    652c:	1ac0      	subs	r0, r0, r3
    652e:	4152      	adcs	r2, r2
    6530:	0983      	lsrs	r3, r0, #6
    6532:	428b      	cmp	r3, r1
    6534:	d301      	bcc.n	653a <__divsi3+0xba>
    6536:	018b      	lsls	r3, r1, #6
    6538:	1ac0      	subs	r0, r0, r3
    653a:	4152      	adcs	r2, r2
    653c:	0943      	lsrs	r3, r0, #5
    653e:	428b      	cmp	r3, r1
    6540:	d301      	bcc.n	6546 <__divsi3+0xc6>
    6542:	014b      	lsls	r3, r1, #5
    6544:	1ac0      	subs	r0, r0, r3
    6546:	4152      	adcs	r2, r2
    6548:	0903      	lsrs	r3, r0, #4
    654a:	428b      	cmp	r3, r1
    654c:	d301      	bcc.n	6552 <__divsi3+0xd2>
    654e:	010b      	lsls	r3, r1, #4
    6550:	1ac0      	subs	r0, r0, r3
    6552:	4152      	adcs	r2, r2
    6554:	08c3      	lsrs	r3, r0, #3
    6556:	428b      	cmp	r3, r1
    6558:	d301      	bcc.n	655e <__divsi3+0xde>
    655a:	00cb      	lsls	r3, r1, #3
    655c:	1ac0      	subs	r0, r0, r3
    655e:	4152      	adcs	r2, r2
    6560:	0883      	lsrs	r3, r0, #2
    6562:	428b      	cmp	r3, r1
    6564:	d301      	bcc.n	656a <__divsi3+0xea>
    6566:	008b      	lsls	r3, r1, #2
    6568:	1ac0      	subs	r0, r0, r3
    656a:	4152      	adcs	r2, r2
    656c:	0843      	lsrs	r3, r0, #1
    656e:	428b      	cmp	r3, r1
    6570:	d301      	bcc.n	6576 <__divsi3+0xf6>
    6572:	004b      	lsls	r3, r1, #1
    6574:	1ac0      	subs	r0, r0, r3
    6576:	4152      	adcs	r2, r2
    6578:	1a41      	subs	r1, r0, r1
    657a:	d200      	bcs.n	657e <__divsi3+0xfe>
    657c:	4601      	mov	r1, r0
    657e:	4152      	adcs	r2, r2
    6580:	4610      	mov	r0, r2
    6582:	4770      	bx	lr
    6584:	e05d      	b.n	6642 <__divsi3+0x1c2>
    6586:	0fca      	lsrs	r2, r1, #31
    6588:	d000      	beq.n	658c <__divsi3+0x10c>
    658a:	4249      	negs	r1, r1
    658c:	1003      	asrs	r3, r0, #32
    658e:	d300      	bcc.n	6592 <__divsi3+0x112>
    6590:	4240      	negs	r0, r0
    6592:	4053      	eors	r3, r2
    6594:	2200      	movs	r2, #0
    6596:	469c      	mov	ip, r3
    6598:	0903      	lsrs	r3, r0, #4
    659a:	428b      	cmp	r3, r1
    659c:	d32d      	bcc.n	65fa <__divsi3+0x17a>
    659e:	0a03      	lsrs	r3, r0, #8
    65a0:	428b      	cmp	r3, r1
    65a2:	d312      	bcc.n	65ca <__divsi3+0x14a>
    65a4:	22fc      	movs	r2, #252	; 0xfc
    65a6:	0189      	lsls	r1, r1, #6
    65a8:	ba12      	rev	r2, r2
    65aa:	0a03      	lsrs	r3, r0, #8
    65ac:	428b      	cmp	r3, r1
    65ae:	d30c      	bcc.n	65ca <__divsi3+0x14a>
    65b0:	0189      	lsls	r1, r1, #6
    65b2:	1192      	asrs	r2, r2, #6
    65b4:	428b      	cmp	r3, r1
    65b6:	d308      	bcc.n	65ca <__divsi3+0x14a>
    65b8:	0189      	lsls	r1, r1, #6
    65ba:	1192      	asrs	r2, r2, #6
    65bc:	428b      	cmp	r3, r1
    65be:	d304      	bcc.n	65ca <__divsi3+0x14a>
    65c0:	0189      	lsls	r1, r1, #6
    65c2:	d03a      	beq.n	663a <__divsi3+0x1ba>
    65c4:	1192      	asrs	r2, r2, #6
    65c6:	e000      	b.n	65ca <__divsi3+0x14a>
    65c8:	0989      	lsrs	r1, r1, #6
    65ca:	09c3      	lsrs	r3, r0, #7
    65cc:	428b      	cmp	r3, r1
    65ce:	d301      	bcc.n	65d4 <__divsi3+0x154>
    65d0:	01cb      	lsls	r3, r1, #7
    65d2:	1ac0      	subs	r0, r0, r3
    65d4:	4152      	adcs	r2, r2
    65d6:	0983      	lsrs	r3, r0, #6
    65d8:	428b      	cmp	r3, r1
    65da:	d301      	bcc.n	65e0 <__divsi3+0x160>
    65dc:	018b      	lsls	r3, r1, #6
    65de:	1ac0      	subs	r0, r0, r3
    65e0:	4152      	adcs	r2, r2
    65e2:	0943      	lsrs	r3, r0, #5
    65e4:	428b      	cmp	r3, r1
    65e6:	d301      	bcc.n	65ec <__divsi3+0x16c>
    65e8:	014b      	lsls	r3, r1, #5
    65ea:	1ac0      	subs	r0, r0, r3
    65ec:	4152      	adcs	r2, r2
    65ee:	0903      	lsrs	r3, r0, #4
    65f0:	428b      	cmp	r3, r1
    65f2:	d301      	bcc.n	65f8 <__divsi3+0x178>
    65f4:	010b      	lsls	r3, r1, #4
    65f6:	1ac0      	subs	r0, r0, r3
    65f8:	4152      	adcs	r2, r2
    65fa:	08c3      	lsrs	r3, r0, #3
    65fc:	428b      	cmp	r3, r1
    65fe:	d301      	bcc.n	6604 <__divsi3+0x184>
    6600:	00cb      	lsls	r3, r1, #3
    6602:	1ac0      	subs	r0, r0, r3
    6604:	4152      	adcs	r2, r2
    6606:	0883      	lsrs	r3, r0, #2
    6608:	428b      	cmp	r3, r1
    660a:	d301      	bcc.n	6610 <__divsi3+0x190>
    660c:	008b      	lsls	r3, r1, #2
    660e:	1ac0      	subs	r0, r0, r3
    6610:	4152      	adcs	r2, r2
    6612:	d2d9      	bcs.n	65c8 <__divsi3+0x148>
    6614:	0843      	lsrs	r3, r0, #1
    6616:	428b      	cmp	r3, r1
    6618:	d301      	bcc.n	661e <__divsi3+0x19e>
    661a:	004b      	lsls	r3, r1, #1
    661c:	1ac0      	subs	r0, r0, r3
    661e:	4152      	adcs	r2, r2
    6620:	1a41      	subs	r1, r0, r1
    6622:	d200      	bcs.n	6626 <__divsi3+0x1a6>
    6624:	4601      	mov	r1, r0
    6626:	4663      	mov	r3, ip
    6628:	4152      	adcs	r2, r2
    662a:	105b      	asrs	r3, r3, #1
    662c:	4610      	mov	r0, r2
    662e:	d301      	bcc.n	6634 <__divsi3+0x1b4>
    6630:	4240      	negs	r0, r0
    6632:	2b00      	cmp	r3, #0
    6634:	d500      	bpl.n	6638 <__divsi3+0x1b8>
    6636:	4249      	negs	r1, r1
    6638:	4770      	bx	lr
    663a:	4663      	mov	r3, ip
    663c:	105b      	asrs	r3, r3, #1
    663e:	d300      	bcc.n	6642 <__divsi3+0x1c2>
    6640:	4240      	negs	r0, r0
    6642:	b501      	push	{r0, lr}
    6644:	2000      	movs	r0, #0
    6646:	f000 f805 	bl	6654 <__aeabi_idiv0>
    664a:	bd02      	pop	{r1, pc}

0000664c <__aeabi_idivmod>:
    664c:	2900      	cmp	r1, #0
    664e:	d0f8      	beq.n	6642 <__divsi3+0x1c2>
    6650:	e716      	b.n	6480 <__divsi3>
    6652:	4770      	bx	lr

00006654 <__aeabi_idiv0>:
    6654:	4770      	bx	lr
    6656:	46c0      	nop			; (mov r8, r8)

00006658 <__aeabi_uldivmod>:
    6658:	2b00      	cmp	r3, #0
    665a:	d111      	bne.n	6680 <__aeabi_uldivmod+0x28>
    665c:	2a00      	cmp	r2, #0
    665e:	d10f      	bne.n	6680 <__aeabi_uldivmod+0x28>
    6660:	2900      	cmp	r1, #0
    6662:	d100      	bne.n	6666 <__aeabi_uldivmod+0xe>
    6664:	2800      	cmp	r0, #0
    6666:	d002      	beq.n	666e <__aeabi_uldivmod+0x16>
    6668:	2100      	movs	r1, #0
    666a:	43c9      	mvns	r1, r1
    666c:	1c08      	adds	r0, r1, #0
    666e:	b407      	push	{r0, r1, r2}
    6670:	4802      	ldr	r0, [pc, #8]	; (667c <__aeabi_uldivmod+0x24>)
    6672:	a102      	add	r1, pc, #8	; (adr r1, 667c <__aeabi_uldivmod+0x24>)
    6674:	1840      	adds	r0, r0, r1
    6676:	9002      	str	r0, [sp, #8]
    6678:	bd03      	pop	{r0, r1, pc}
    667a:	46c0      	nop			; (mov r8, r8)
    667c:	ffffffd9 	.word	0xffffffd9
    6680:	b403      	push	{r0, r1}
    6682:	4668      	mov	r0, sp
    6684:	b501      	push	{r0, lr}
    6686:	9802      	ldr	r0, [sp, #8]
    6688:	f000 f858 	bl	673c <__udivmoddi4>
    668c:	9b01      	ldr	r3, [sp, #4]
    668e:	469e      	mov	lr, r3
    6690:	b002      	add	sp, #8
    6692:	bc0c      	pop	{r2, r3}
    6694:	4770      	bx	lr
    6696:	46c0      	nop			; (mov r8, r8)

00006698 <__aeabi_lmul>:
    6698:	b5f0      	push	{r4, r5, r6, r7, lr}
    669a:	46ce      	mov	lr, r9
    669c:	4647      	mov	r7, r8
    669e:	0415      	lsls	r5, r2, #16
    66a0:	0c2d      	lsrs	r5, r5, #16
    66a2:	002e      	movs	r6, r5
    66a4:	b580      	push	{r7, lr}
    66a6:	0407      	lsls	r7, r0, #16
    66a8:	0c14      	lsrs	r4, r2, #16
    66aa:	0c3f      	lsrs	r7, r7, #16
    66ac:	4699      	mov	r9, r3
    66ae:	0c03      	lsrs	r3, r0, #16
    66b0:	437e      	muls	r6, r7
    66b2:	435d      	muls	r5, r3
    66b4:	4367      	muls	r7, r4
    66b6:	4363      	muls	r3, r4
    66b8:	197f      	adds	r7, r7, r5
    66ba:	0c34      	lsrs	r4, r6, #16
    66bc:	19e4      	adds	r4, r4, r7
    66be:	469c      	mov	ip, r3
    66c0:	42a5      	cmp	r5, r4
    66c2:	d903      	bls.n	66cc <__aeabi_lmul+0x34>
    66c4:	2380      	movs	r3, #128	; 0x80
    66c6:	025b      	lsls	r3, r3, #9
    66c8:	4698      	mov	r8, r3
    66ca:	44c4      	add	ip, r8
    66cc:	464b      	mov	r3, r9
    66ce:	4351      	muls	r1, r2
    66d0:	4343      	muls	r3, r0
    66d2:	0436      	lsls	r6, r6, #16
    66d4:	0c36      	lsrs	r6, r6, #16
    66d6:	0c25      	lsrs	r5, r4, #16
    66d8:	0424      	lsls	r4, r4, #16
    66da:	4465      	add	r5, ip
    66dc:	19a4      	adds	r4, r4, r6
    66de:	1859      	adds	r1, r3, r1
    66e0:	1949      	adds	r1, r1, r5
    66e2:	0020      	movs	r0, r4
    66e4:	bc0c      	pop	{r2, r3}
    66e6:	4690      	mov	r8, r2
    66e8:	4699      	mov	r9, r3
    66ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000066ec <__ffssi2>:
    66ec:	b510      	push	{r4, lr}
    66ee:	2300      	movs	r3, #0
    66f0:	2800      	cmp	r0, #0
    66f2:	d002      	beq.n	66fa <__ffssi2+0xe>
    66f4:	f001 ff44 	bl	8580 <__ctzsi2>
    66f8:	1c43      	adds	r3, r0, #1
    66fa:	0018      	movs	r0, r3
    66fc:	bd10      	pop	{r4, pc}
    66fe:	46c0      	nop			; (mov r8, r8)

00006700 <__aeabi_d2uiz>:
    6700:	b570      	push	{r4, r5, r6, lr}
    6702:	2200      	movs	r2, #0
    6704:	4b0c      	ldr	r3, [pc, #48]	; (6738 <__aeabi_d2uiz+0x38>)
    6706:	0004      	movs	r4, r0
    6708:	000d      	movs	r5, r1
    670a:	f001 ff05 	bl	8518 <__aeabi_dcmpge>
    670e:	2800      	cmp	r0, #0
    6710:	d104      	bne.n	671c <__aeabi_d2uiz+0x1c>
    6712:	0020      	movs	r0, r4
    6714:	0029      	movs	r1, r5
    6716:	f001 fdcb 	bl	82b0 <__aeabi_d2iz>
    671a:	bd70      	pop	{r4, r5, r6, pc}
    671c:	4b06      	ldr	r3, [pc, #24]	; (6738 <__aeabi_d2uiz+0x38>)
    671e:	2200      	movs	r2, #0
    6720:	0020      	movs	r0, r4
    6722:	0029      	movs	r1, r5
    6724:	f001 faae 	bl	7c84 <__aeabi_dsub>
    6728:	f001 fdc2 	bl	82b0 <__aeabi_d2iz>
    672c:	2380      	movs	r3, #128	; 0x80
    672e:	061b      	lsls	r3, r3, #24
    6730:	469c      	mov	ip, r3
    6732:	4460      	add	r0, ip
    6734:	e7f1      	b.n	671a <__aeabi_d2uiz+0x1a>
    6736:	46c0      	nop			; (mov r8, r8)
    6738:	41e00000 	.word	0x41e00000

0000673c <__udivmoddi4>:
    673c:	b5f0      	push	{r4, r5, r6, r7, lr}
    673e:	4657      	mov	r7, sl
    6740:	464e      	mov	r6, r9
    6742:	4645      	mov	r5, r8
    6744:	46de      	mov	lr, fp
    6746:	b5e0      	push	{r5, r6, r7, lr}
    6748:	0004      	movs	r4, r0
    674a:	b083      	sub	sp, #12
    674c:	000d      	movs	r5, r1
    674e:	4692      	mov	sl, r2
    6750:	4699      	mov	r9, r3
    6752:	428b      	cmp	r3, r1
    6754:	d82f      	bhi.n	67b6 <__udivmoddi4+0x7a>
    6756:	d02c      	beq.n	67b2 <__udivmoddi4+0x76>
    6758:	4649      	mov	r1, r9
    675a:	4650      	mov	r0, sl
    675c:	f001 ff04 	bl	8568 <__clzdi2>
    6760:	0029      	movs	r1, r5
    6762:	0006      	movs	r6, r0
    6764:	0020      	movs	r0, r4
    6766:	f001 feff 	bl	8568 <__clzdi2>
    676a:	1a33      	subs	r3, r6, r0
    676c:	4698      	mov	r8, r3
    676e:	3b20      	subs	r3, #32
    6770:	469b      	mov	fp, r3
    6772:	d500      	bpl.n	6776 <__udivmoddi4+0x3a>
    6774:	e074      	b.n	6860 <__udivmoddi4+0x124>
    6776:	4653      	mov	r3, sl
    6778:	465a      	mov	r2, fp
    677a:	4093      	lsls	r3, r2
    677c:	001f      	movs	r7, r3
    677e:	4653      	mov	r3, sl
    6780:	4642      	mov	r2, r8
    6782:	4093      	lsls	r3, r2
    6784:	001e      	movs	r6, r3
    6786:	42af      	cmp	r7, r5
    6788:	d829      	bhi.n	67de <__udivmoddi4+0xa2>
    678a:	d026      	beq.n	67da <__udivmoddi4+0x9e>
    678c:	465b      	mov	r3, fp
    678e:	1ba4      	subs	r4, r4, r6
    6790:	41bd      	sbcs	r5, r7
    6792:	2b00      	cmp	r3, #0
    6794:	da00      	bge.n	6798 <__udivmoddi4+0x5c>
    6796:	e079      	b.n	688c <__udivmoddi4+0x150>
    6798:	2200      	movs	r2, #0
    679a:	2300      	movs	r3, #0
    679c:	9200      	str	r2, [sp, #0]
    679e:	9301      	str	r3, [sp, #4]
    67a0:	2301      	movs	r3, #1
    67a2:	465a      	mov	r2, fp
    67a4:	4093      	lsls	r3, r2
    67a6:	9301      	str	r3, [sp, #4]
    67a8:	2301      	movs	r3, #1
    67aa:	4642      	mov	r2, r8
    67ac:	4093      	lsls	r3, r2
    67ae:	9300      	str	r3, [sp, #0]
    67b0:	e019      	b.n	67e6 <__udivmoddi4+0xaa>
    67b2:	4282      	cmp	r2, r0
    67b4:	d9d0      	bls.n	6758 <__udivmoddi4+0x1c>
    67b6:	2200      	movs	r2, #0
    67b8:	2300      	movs	r3, #0
    67ba:	9200      	str	r2, [sp, #0]
    67bc:	9301      	str	r3, [sp, #4]
    67be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    67c0:	2b00      	cmp	r3, #0
    67c2:	d001      	beq.n	67c8 <__udivmoddi4+0x8c>
    67c4:	601c      	str	r4, [r3, #0]
    67c6:	605d      	str	r5, [r3, #4]
    67c8:	9800      	ldr	r0, [sp, #0]
    67ca:	9901      	ldr	r1, [sp, #4]
    67cc:	b003      	add	sp, #12
    67ce:	bc3c      	pop	{r2, r3, r4, r5}
    67d0:	4690      	mov	r8, r2
    67d2:	4699      	mov	r9, r3
    67d4:	46a2      	mov	sl, r4
    67d6:	46ab      	mov	fp, r5
    67d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    67da:	42a3      	cmp	r3, r4
    67dc:	d9d6      	bls.n	678c <__udivmoddi4+0x50>
    67de:	2200      	movs	r2, #0
    67e0:	2300      	movs	r3, #0
    67e2:	9200      	str	r2, [sp, #0]
    67e4:	9301      	str	r3, [sp, #4]
    67e6:	4643      	mov	r3, r8
    67e8:	2b00      	cmp	r3, #0
    67ea:	d0e8      	beq.n	67be <__udivmoddi4+0x82>
    67ec:	07fb      	lsls	r3, r7, #31
    67ee:	0872      	lsrs	r2, r6, #1
    67f0:	431a      	orrs	r2, r3
    67f2:	4646      	mov	r6, r8
    67f4:	087b      	lsrs	r3, r7, #1
    67f6:	e00e      	b.n	6816 <__udivmoddi4+0xda>
    67f8:	42ab      	cmp	r3, r5
    67fa:	d101      	bne.n	6800 <__udivmoddi4+0xc4>
    67fc:	42a2      	cmp	r2, r4
    67fe:	d80c      	bhi.n	681a <__udivmoddi4+0xde>
    6800:	1aa4      	subs	r4, r4, r2
    6802:	419d      	sbcs	r5, r3
    6804:	2001      	movs	r0, #1
    6806:	1924      	adds	r4, r4, r4
    6808:	416d      	adcs	r5, r5
    680a:	2100      	movs	r1, #0
    680c:	3e01      	subs	r6, #1
    680e:	1824      	adds	r4, r4, r0
    6810:	414d      	adcs	r5, r1
    6812:	2e00      	cmp	r6, #0
    6814:	d006      	beq.n	6824 <__udivmoddi4+0xe8>
    6816:	42ab      	cmp	r3, r5
    6818:	d9ee      	bls.n	67f8 <__udivmoddi4+0xbc>
    681a:	3e01      	subs	r6, #1
    681c:	1924      	adds	r4, r4, r4
    681e:	416d      	adcs	r5, r5
    6820:	2e00      	cmp	r6, #0
    6822:	d1f8      	bne.n	6816 <__udivmoddi4+0xda>
    6824:	465b      	mov	r3, fp
    6826:	9800      	ldr	r0, [sp, #0]
    6828:	9901      	ldr	r1, [sp, #4]
    682a:	1900      	adds	r0, r0, r4
    682c:	4169      	adcs	r1, r5
    682e:	2b00      	cmp	r3, #0
    6830:	db22      	blt.n	6878 <__udivmoddi4+0x13c>
    6832:	002b      	movs	r3, r5
    6834:	465a      	mov	r2, fp
    6836:	40d3      	lsrs	r3, r2
    6838:	002a      	movs	r2, r5
    683a:	4644      	mov	r4, r8
    683c:	40e2      	lsrs	r2, r4
    683e:	001c      	movs	r4, r3
    6840:	465b      	mov	r3, fp
    6842:	0015      	movs	r5, r2
    6844:	2b00      	cmp	r3, #0
    6846:	db2c      	blt.n	68a2 <__udivmoddi4+0x166>
    6848:	0026      	movs	r6, r4
    684a:	409e      	lsls	r6, r3
    684c:	0033      	movs	r3, r6
    684e:	0026      	movs	r6, r4
    6850:	4647      	mov	r7, r8
    6852:	40be      	lsls	r6, r7
    6854:	0032      	movs	r2, r6
    6856:	1a80      	subs	r0, r0, r2
    6858:	4199      	sbcs	r1, r3
    685a:	9000      	str	r0, [sp, #0]
    685c:	9101      	str	r1, [sp, #4]
    685e:	e7ae      	b.n	67be <__udivmoddi4+0x82>
    6860:	4642      	mov	r2, r8
    6862:	2320      	movs	r3, #32
    6864:	1a9b      	subs	r3, r3, r2
    6866:	4652      	mov	r2, sl
    6868:	40da      	lsrs	r2, r3
    686a:	4641      	mov	r1, r8
    686c:	0013      	movs	r3, r2
    686e:	464a      	mov	r2, r9
    6870:	408a      	lsls	r2, r1
    6872:	0017      	movs	r7, r2
    6874:	431f      	orrs	r7, r3
    6876:	e782      	b.n	677e <__udivmoddi4+0x42>
    6878:	4642      	mov	r2, r8
    687a:	2320      	movs	r3, #32
    687c:	1a9b      	subs	r3, r3, r2
    687e:	002a      	movs	r2, r5
    6880:	4646      	mov	r6, r8
    6882:	409a      	lsls	r2, r3
    6884:	0023      	movs	r3, r4
    6886:	40f3      	lsrs	r3, r6
    6888:	4313      	orrs	r3, r2
    688a:	e7d5      	b.n	6838 <__udivmoddi4+0xfc>
    688c:	4642      	mov	r2, r8
    688e:	2320      	movs	r3, #32
    6890:	2100      	movs	r1, #0
    6892:	1a9b      	subs	r3, r3, r2
    6894:	2200      	movs	r2, #0
    6896:	9100      	str	r1, [sp, #0]
    6898:	9201      	str	r2, [sp, #4]
    689a:	2201      	movs	r2, #1
    689c:	40da      	lsrs	r2, r3
    689e:	9201      	str	r2, [sp, #4]
    68a0:	e782      	b.n	67a8 <__udivmoddi4+0x6c>
    68a2:	4642      	mov	r2, r8
    68a4:	2320      	movs	r3, #32
    68a6:	0026      	movs	r6, r4
    68a8:	1a9b      	subs	r3, r3, r2
    68aa:	40de      	lsrs	r6, r3
    68ac:	002f      	movs	r7, r5
    68ae:	46b4      	mov	ip, r6
    68b0:	4097      	lsls	r7, r2
    68b2:	4666      	mov	r6, ip
    68b4:	003b      	movs	r3, r7
    68b6:	4333      	orrs	r3, r6
    68b8:	e7c9      	b.n	684e <__udivmoddi4+0x112>
    68ba:	46c0      	nop			; (mov r8, r8)

000068bc <__aeabi_fmul>:
    68bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68be:	4657      	mov	r7, sl
    68c0:	464e      	mov	r6, r9
    68c2:	4645      	mov	r5, r8
    68c4:	46de      	mov	lr, fp
    68c6:	b5e0      	push	{r5, r6, r7, lr}
    68c8:	0247      	lsls	r7, r0, #9
    68ca:	0046      	lsls	r6, r0, #1
    68cc:	4688      	mov	r8, r1
    68ce:	0a7f      	lsrs	r7, r7, #9
    68d0:	0e36      	lsrs	r6, r6, #24
    68d2:	0fc4      	lsrs	r4, r0, #31
    68d4:	2e00      	cmp	r6, #0
    68d6:	d047      	beq.n	6968 <__aeabi_fmul+0xac>
    68d8:	2eff      	cmp	r6, #255	; 0xff
    68da:	d024      	beq.n	6926 <__aeabi_fmul+0x6a>
    68dc:	00fb      	lsls	r3, r7, #3
    68de:	2780      	movs	r7, #128	; 0x80
    68e0:	04ff      	lsls	r7, r7, #19
    68e2:	431f      	orrs	r7, r3
    68e4:	2300      	movs	r3, #0
    68e6:	4699      	mov	r9, r3
    68e8:	469a      	mov	sl, r3
    68ea:	3e7f      	subs	r6, #127	; 0x7f
    68ec:	4643      	mov	r3, r8
    68ee:	025d      	lsls	r5, r3, #9
    68f0:	0058      	lsls	r0, r3, #1
    68f2:	0fdb      	lsrs	r3, r3, #31
    68f4:	0a6d      	lsrs	r5, r5, #9
    68f6:	0e00      	lsrs	r0, r0, #24
    68f8:	4698      	mov	r8, r3
    68fa:	d043      	beq.n	6984 <__aeabi_fmul+0xc8>
    68fc:	28ff      	cmp	r0, #255	; 0xff
    68fe:	d03b      	beq.n	6978 <__aeabi_fmul+0xbc>
    6900:	00eb      	lsls	r3, r5, #3
    6902:	2580      	movs	r5, #128	; 0x80
    6904:	2200      	movs	r2, #0
    6906:	04ed      	lsls	r5, r5, #19
    6908:	431d      	orrs	r5, r3
    690a:	387f      	subs	r0, #127	; 0x7f
    690c:	1836      	adds	r6, r6, r0
    690e:	1c73      	adds	r3, r6, #1
    6910:	4641      	mov	r1, r8
    6912:	469b      	mov	fp, r3
    6914:	464b      	mov	r3, r9
    6916:	4061      	eors	r1, r4
    6918:	4313      	orrs	r3, r2
    691a:	2b0f      	cmp	r3, #15
    691c:	d864      	bhi.n	69e8 <__aeabi_fmul+0x12c>
    691e:	4875      	ldr	r0, [pc, #468]	; (6af4 <__aeabi_fmul+0x238>)
    6920:	009b      	lsls	r3, r3, #2
    6922:	58c3      	ldr	r3, [r0, r3]
    6924:	469f      	mov	pc, r3
    6926:	2f00      	cmp	r7, #0
    6928:	d142      	bne.n	69b0 <__aeabi_fmul+0xf4>
    692a:	2308      	movs	r3, #8
    692c:	4699      	mov	r9, r3
    692e:	3b06      	subs	r3, #6
    6930:	26ff      	movs	r6, #255	; 0xff
    6932:	469a      	mov	sl, r3
    6934:	e7da      	b.n	68ec <__aeabi_fmul+0x30>
    6936:	4641      	mov	r1, r8
    6938:	2a02      	cmp	r2, #2
    693a:	d028      	beq.n	698e <__aeabi_fmul+0xd2>
    693c:	2a03      	cmp	r2, #3
    693e:	d100      	bne.n	6942 <__aeabi_fmul+0x86>
    6940:	e0ce      	b.n	6ae0 <__aeabi_fmul+0x224>
    6942:	2a01      	cmp	r2, #1
    6944:	d000      	beq.n	6948 <__aeabi_fmul+0x8c>
    6946:	e0ac      	b.n	6aa2 <__aeabi_fmul+0x1e6>
    6948:	4011      	ands	r1, r2
    694a:	2000      	movs	r0, #0
    694c:	2200      	movs	r2, #0
    694e:	b2cc      	uxtb	r4, r1
    6950:	0240      	lsls	r0, r0, #9
    6952:	05d2      	lsls	r2, r2, #23
    6954:	0a40      	lsrs	r0, r0, #9
    6956:	07e4      	lsls	r4, r4, #31
    6958:	4310      	orrs	r0, r2
    695a:	4320      	orrs	r0, r4
    695c:	bc3c      	pop	{r2, r3, r4, r5}
    695e:	4690      	mov	r8, r2
    6960:	4699      	mov	r9, r3
    6962:	46a2      	mov	sl, r4
    6964:	46ab      	mov	fp, r5
    6966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6968:	2f00      	cmp	r7, #0
    696a:	d115      	bne.n	6998 <__aeabi_fmul+0xdc>
    696c:	2304      	movs	r3, #4
    696e:	4699      	mov	r9, r3
    6970:	3b03      	subs	r3, #3
    6972:	2600      	movs	r6, #0
    6974:	469a      	mov	sl, r3
    6976:	e7b9      	b.n	68ec <__aeabi_fmul+0x30>
    6978:	20ff      	movs	r0, #255	; 0xff
    697a:	2202      	movs	r2, #2
    697c:	2d00      	cmp	r5, #0
    697e:	d0c5      	beq.n	690c <__aeabi_fmul+0x50>
    6980:	2203      	movs	r2, #3
    6982:	e7c3      	b.n	690c <__aeabi_fmul+0x50>
    6984:	2d00      	cmp	r5, #0
    6986:	d119      	bne.n	69bc <__aeabi_fmul+0x100>
    6988:	2000      	movs	r0, #0
    698a:	2201      	movs	r2, #1
    698c:	e7be      	b.n	690c <__aeabi_fmul+0x50>
    698e:	2401      	movs	r4, #1
    6990:	22ff      	movs	r2, #255	; 0xff
    6992:	400c      	ands	r4, r1
    6994:	2000      	movs	r0, #0
    6996:	e7db      	b.n	6950 <__aeabi_fmul+0x94>
    6998:	0038      	movs	r0, r7
    699a:	f001 fdc7 	bl	852c <__clzsi2>
    699e:	2676      	movs	r6, #118	; 0x76
    69a0:	1f43      	subs	r3, r0, #5
    69a2:	409f      	lsls	r7, r3
    69a4:	2300      	movs	r3, #0
    69a6:	4276      	negs	r6, r6
    69a8:	1a36      	subs	r6, r6, r0
    69aa:	4699      	mov	r9, r3
    69ac:	469a      	mov	sl, r3
    69ae:	e79d      	b.n	68ec <__aeabi_fmul+0x30>
    69b0:	230c      	movs	r3, #12
    69b2:	4699      	mov	r9, r3
    69b4:	3b09      	subs	r3, #9
    69b6:	26ff      	movs	r6, #255	; 0xff
    69b8:	469a      	mov	sl, r3
    69ba:	e797      	b.n	68ec <__aeabi_fmul+0x30>
    69bc:	0028      	movs	r0, r5
    69be:	f001 fdb5 	bl	852c <__clzsi2>
    69c2:	1f43      	subs	r3, r0, #5
    69c4:	409d      	lsls	r5, r3
    69c6:	2376      	movs	r3, #118	; 0x76
    69c8:	425b      	negs	r3, r3
    69ca:	1a18      	subs	r0, r3, r0
    69cc:	2200      	movs	r2, #0
    69ce:	e79d      	b.n	690c <__aeabi_fmul+0x50>
    69d0:	2080      	movs	r0, #128	; 0x80
    69d2:	2400      	movs	r4, #0
    69d4:	03c0      	lsls	r0, r0, #15
    69d6:	22ff      	movs	r2, #255	; 0xff
    69d8:	e7ba      	b.n	6950 <__aeabi_fmul+0x94>
    69da:	003d      	movs	r5, r7
    69dc:	4652      	mov	r2, sl
    69de:	e7ab      	b.n	6938 <__aeabi_fmul+0x7c>
    69e0:	003d      	movs	r5, r7
    69e2:	0021      	movs	r1, r4
    69e4:	4652      	mov	r2, sl
    69e6:	e7a7      	b.n	6938 <__aeabi_fmul+0x7c>
    69e8:	0c3b      	lsrs	r3, r7, #16
    69ea:	469c      	mov	ip, r3
    69ec:	042a      	lsls	r2, r5, #16
    69ee:	0c12      	lsrs	r2, r2, #16
    69f0:	0c2b      	lsrs	r3, r5, #16
    69f2:	0014      	movs	r4, r2
    69f4:	4660      	mov	r0, ip
    69f6:	4665      	mov	r5, ip
    69f8:	043f      	lsls	r7, r7, #16
    69fa:	0c3f      	lsrs	r7, r7, #16
    69fc:	437c      	muls	r4, r7
    69fe:	4342      	muls	r2, r0
    6a00:	435d      	muls	r5, r3
    6a02:	437b      	muls	r3, r7
    6a04:	0c27      	lsrs	r7, r4, #16
    6a06:	189b      	adds	r3, r3, r2
    6a08:	18ff      	adds	r7, r7, r3
    6a0a:	42ba      	cmp	r2, r7
    6a0c:	d903      	bls.n	6a16 <__aeabi_fmul+0x15a>
    6a0e:	2380      	movs	r3, #128	; 0x80
    6a10:	025b      	lsls	r3, r3, #9
    6a12:	469c      	mov	ip, r3
    6a14:	4465      	add	r5, ip
    6a16:	0424      	lsls	r4, r4, #16
    6a18:	043a      	lsls	r2, r7, #16
    6a1a:	0c24      	lsrs	r4, r4, #16
    6a1c:	1912      	adds	r2, r2, r4
    6a1e:	0193      	lsls	r3, r2, #6
    6a20:	1e5c      	subs	r4, r3, #1
    6a22:	41a3      	sbcs	r3, r4
    6a24:	0c3f      	lsrs	r7, r7, #16
    6a26:	0e92      	lsrs	r2, r2, #26
    6a28:	197d      	adds	r5, r7, r5
    6a2a:	431a      	orrs	r2, r3
    6a2c:	01ad      	lsls	r5, r5, #6
    6a2e:	4315      	orrs	r5, r2
    6a30:	012b      	lsls	r3, r5, #4
    6a32:	d504      	bpl.n	6a3e <__aeabi_fmul+0x182>
    6a34:	2301      	movs	r3, #1
    6a36:	465e      	mov	r6, fp
    6a38:	086a      	lsrs	r2, r5, #1
    6a3a:	401d      	ands	r5, r3
    6a3c:	4315      	orrs	r5, r2
    6a3e:	0032      	movs	r2, r6
    6a40:	327f      	adds	r2, #127	; 0x7f
    6a42:	2a00      	cmp	r2, #0
    6a44:	dd25      	ble.n	6a92 <__aeabi_fmul+0x1d6>
    6a46:	076b      	lsls	r3, r5, #29
    6a48:	d004      	beq.n	6a54 <__aeabi_fmul+0x198>
    6a4a:	230f      	movs	r3, #15
    6a4c:	402b      	ands	r3, r5
    6a4e:	2b04      	cmp	r3, #4
    6a50:	d000      	beq.n	6a54 <__aeabi_fmul+0x198>
    6a52:	3504      	adds	r5, #4
    6a54:	012b      	lsls	r3, r5, #4
    6a56:	d503      	bpl.n	6a60 <__aeabi_fmul+0x1a4>
    6a58:	0032      	movs	r2, r6
    6a5a:	4b27      	ldr	r3, [pc, #156]	; (6af8 <__aeabi_fmul+0x23c>)
    6a5c:	3280      	adds	r2, #128	; 0x80
    6a5e:	401d      	ands	r5, r3
    6a60:	2afe      	cmp	r2, #254	; 0xfe
    6a62:	dc94      	bgt.n	698e <__aeabi_fmul+0xd2>
    6a64:	2401      	movs	r4, #1
    6a66:	01a8      	lsls	r0, r5, #6
    6a68:	0a40      	lsrs	r0, r0, #9
    6a6a:	b2d2      	uxtb	r2, r2
    6a6c:	400c      	ands	r4, r1
    6a6e:	e76f      	b.n	6950 <__aeabi_fmul+0x94>
    6a70:	2080      	movs	r0, #128	; 0x80
    6a72:	03c0      	lsls	r0, r0, #15
    6a74:	4207      	tst	r7, r0
    6a76:	d007      	beq.n	6a88 <__aeabi_fmul+0x1cc>
    6a78:	4205      	tst	r5, r0
    6a7a:	d105      	bne.n	6a88 <__aeabi_fmul+0x1cc>
    6a7c:	4328      	orrs	r0, r5
    6a7e:	0240      	lsls	r0, r0, #9
    6a80:	0a40      	lsrs	r0, r0, #9
    6a82:	4644      	mov	r4, r8
    6a84:	22ff      	movs	r2, #255	; 0xff
    6a86:	e763      	b.n	6950 <__aeabi_fmul+0x94>
    6a88:	4338      	orrs	r0, r7
    6a8a:	0240      	lsls	r0, r0, #9
    6a8c:	0a40      	lsrs	r0, r0, #9
    6a8e:	22ff      	movs	r2, #255	; 0xff
    6a90:	e75e      	b.n	6950 <__aeabi_fmul+0x94>
    6a92:	2401      	movs	r4, #1
    6a94:	1aa3      	subs	r3, r4, r2
    6a96:	2b1b      	cmp	r3, #27
    6a98:	dd05      	ble.n	6aa6 <__aeabi_fmul+0x1ea>
    6a9a:	400c      	ands	r4, r1
    6a9c:	2200      	movs	r2, #0
    6a9e:	2000      	movs	r0, #0
    6aa0:	e756      	b.n	6950 <__aeabi_fmul+0x94>
    6aa2:	465e      	mov	r6, fp
    6aa4:	e7cb      	b.n	6a3e <__aeabi_fmul+0x182>
    6aa6:	002a      	movs	r2, r5
    6aa8:	2020      	movs	r0, #32
    6aaa:	40da      	lsrs	r2, r3
    6aac:	1ac3      	subs	r3, r0, r3
    6aae:	409d      	lsls	r5, r3
    6ab0:	002b      	movs	r3, r5
    6ab2:	1e5d      	subs	r5, r3, #1
    6ab4:	41ab      	sbcs	r3, r5
    6ab6:	4313      	orrs	r3, r2
    6ab8:	075a      	lsls	r2, r3, #29
    6aba:	d004      	beq.n	6ac6 <__aeabi_fmul+0x20a>
    6abc:	220f      	movs	r2, #15
    6abe:	401a      	ands	r2, r3
    6ac0:	2a04      	cmp	r2, #4
    6ac2:	d000      	beq.n	6ac6 <__aeabi_fmul+0x20a>
    6ac4:	3304      	adds	r3, #4
    6ac6:	015a      	lsls	r2, r3, #5
    6ac8:	d504      	bpl.n	6ad4 <__aeabi_fmul+0x218>
    6aca:	2401      	movs	r4, #1
    6acc:	2201      	movs	r2, #1
    6ace:	400c      	ands	r4, r1
    6ad0:	2000      	movs	r0, #0
    6ad2:	e73d      	b.n	6950 <__aeabi_fmul+0x94>
    6ad4:	2401      	movs	r4, #1
    6ad6:	019b      	lsls	r3, r3, #6
    6ad8:	0a58      	lsrs	r0, r3, #9
    6ada:	400c      	ands	r4, r1
    6adc:	2200      	movs	r2, #0
    6ade:	e737      	b.n	6950 <__aeabi_fmul+0x94>
    6ae0:	2080      	movs	r0, #128	; 0x80
    6ae2:	2401      	movs	r4, #1
    6ae4:	03c0      	lsls	r0, r0, #15
    6ae6:	4328      	orrs	r0, r5
    6ae8:	0240      	lsls	r0, r0, #9
    6aea:	0a40      	lsrs	r0, r0, #9
    6aec:	400c      	ands	r4, r1
    6aee:	22ff      	movs	r2, #255	; 0xff
    6af0:	e72e      	b.n	6950 <__aeabi_fmul+0x94>
    6af2:	46c0      	nop			; (mov r8, r8)
    6af4:	00015034 	.word	0x00015034
    6af8:	f7ffffff 	.word	0xf7ffffff

00006afc <__aeabi_dadd>:
    6afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6afe:	4645      	mov	r5, r8
    6b00:	46de      	mov	lr, fp
    6b02:	4657      	mov	r7, sl
    6b04:	464e      	mov	r6, r9
    6b06:	030c      	lsls	r4, r1, #12
    6b08:	b5e0      	push	{r5, r6, r7, lr}
    6b0a:	004e      	lsls	r6, r1, #1
    6b0c:	0fc9      	lsrs	r1, r1, #31
    6b0e:	4688      	mov	r8, r1
    6b10:	000d      	movs	r5, r1
    6b12:	0a61      	lsrs	r1, r4, #9
    6b14:	0f44      	lsrs	r4, r0, #29
    6b16:	430c      	orrs	r4, r1
    6b18:	00c7      	lsls	r7, r0, #3
    6b1a:	0319      	lsls	r1, r3, #12
    6b1c:	0058      	lsls	r0, r3, #1
    6b1e:	0fdb      	lsrs	r3, r3, #31
    6b20:	469b      	mov	fp, r3
    6b22:	0a4b      	lsrs	r3, r1, #9
    6b24:	0f51      	lsrs	r1, r2, #29
    6b26:	430b      	orrs	r3, r1
    6b28:	0d76      	lsrs	r6, r6, #21
    6b2a:	0d40      	lsrs	r0, r0, #21
    6b2c:	0019      	movs	r1, r3
    6b2e:	00d2      	lsls	r2, r2, #3
    6b30:	45d8      	cmp	r8, fp
    6b32:	d100      	bne.n	6b36 <__aeabi_dadd+0x3a>
    6b34:	e0ae      	b.n	6c94 <__aeabi_dadd+0x198>
    6b36:	1a35      	subs	r5, r6, r0
    6b38:	2d00      	cmp	r5, #0
    6b3a:	dc00      	bgt.n	6b3e <__aeabi_dadd+0x42>
    6b3c:	e0f6      	b.n	6d2c <__aeabi_dadd+0x230>
    6b3e:	2800      	cmp	r0, #0
    6b40:	d10f      	bne.n	6b62 <__aeabi_dadd+0x66>
    6b42:	4313      	orrs	r3, r2
    6b44:	d100      	bne.n	6b48 <__aeabi_dadd+0x4c>
    6b46:	e0db      	b.n	6d00 <__aeabi_dadd+0x204>
    6b48:	1e6b      	subs	r3, r5, #1
    6b4a:	2b00      	cmp	r3, #0
    6b4c:	d000      	beq.n	6b50 <__aeabi_dadd+0x54>
    6b4e:	e137      	b.n	6dc0 <__aeabi_dadd+0x2c4>
    6b50:	1aba      	subs	r2, r7, r2
    6b52:	4297      	cmp	r7, r2
    6b54:	41bf      	sbcs	r7, r7
    6b56:	1a64      	subs	r4, r4, r1
    6b58:	427f      	negs	r7, r7
    6b5a:	1be4      	subs	r4, r4, r7
    6b5c:	2601      	movs	r6, #1
    6b5e:	0017      	movs	r7, r2
    6b60:	e024      	b.n	6bac <__aeabi_dadd+0xb0>
    6b62:	4bc6      	ldr	r3, [pc, #792]	; (6e7c <__aeabi_dadd+0x380>)
    6b64:	429e      	cmp	r6, r3
    6b66:	d04d      	beq.n	6c04 <__aeabi_dadd+0x108>
    6b68:	2380      	movs	r3, #128	; 0x80
    6b6a:	041b      	lsls	r3, r3, #16
    6b6c:	4319      	orrs	r1, r3
    6b6e:	2d38      	cmp	r5, #56	; 0x38
    6b70:	dd00      	ble.n	6b74 <__aeabi_dadd+0x78>
    6b72:	e107      	b.n	6d84 <__aeabi_dadd+0x288>
    6b74:	2d1f      	cmp	r5, #31
    6b76:	dd00      	ble.n	6b7a <__aeabi_dadd+0x7e>
    6b78:	e138      	b.n	6dec <__aeabi_dadd+0x2f0>
    6b7a:	2020      	movs	r0, #32
    6b7c:	1b43      	subs	r3, r0, r5
    6b7e:	469a      	mov	sl, r3
    6b80:	000b      	movs	r3, r1
    6b82:	4650      	mov	r0, sl
    6b84:	4083      	lsls	r3, r0
    6b86:	4699      	mov	r9, r3
    6b88:	0013      	movs	r3, r2
    6b8a:	4648      	mov	r0, r9
    6b8c:	40eb      	lsrs	r3, r5
    6b8e:	4318      	orrs	r0, r3
    6b90:	0003      	movs	r3, r0
    6b92:	4650      	mov	r0, sl
    6b94:	4082      	lsls	r2, r0
    6b96:	1e50      	subs	r0, r2, #1
    6b98:	4182      	sbcs	r2, r0
    6b9a:	40e9      	lsrs	r1, r5
    6b9c:	431a      	orrs	r2, r3
    6b9e:	1aba      	subs	r2, r7, r2
    6ba0:	1a61      	subs	r1, r4, r1
    6ba2:	4297      	cmp	r7, r2
    6ba4:	41a4      	sbcs	r4, r4
    6ba6:	0017      	movs	r7, r2
    6ba8:	4264      	negs	r4, r4
    6baa:	1b0c      	subs	r4, r1, r4
    6bac:	0223      	lsls	r3, r4, #8
    6bae:	d562      	bpl.n	6c76 <__aeabi_dadd+0x17a>
    6bb0:	0264      	lsls	r4, r4, #9
    6bb2:	0a65      	lsrs	r5, r4, #9
    6bb4:	2d00      	cmp	r5, #0
    6bb6:	d100      	bne.n	6bba <__aeabi_dadd+0xbe>
    6bb8:	e0df      	b.n	6d7a <__aeabi_dadd+0x27e>
    6bba:	0028      	movs	r0, r5
    6bbc:	f001 fcb6 	bl	852c <__clzsi2>
    6bc0:	0003      	movs	r3, r0
    6bc2:	3b08      	subs	r3, #8
    6bc4:	2b1f      	cmp	r3, #31
    6bc6:	dd00      	ble.n	6bca <__aeabi_dadd+0xce>
    6bc8:	e0d2      	b.n	6d70 <__aeabi_dadd+0x274>
    6bca:	2220      	movs	r2, #32
    6bcc:	003c      	movs	r4, r7
    6bce:	1ad2      	subs	r2, r2, r3
    6bd0:	409d      	lsls	r5, r3
    6bd2:	40d4      	lsrs	r4, r2
    6bd4:	409f      	lsls	r7, r3
    6bd6:	4325      	orrs	r5, r4
    6bd8:	429e      	cmp	r6, r3
    6bda:	dd00      	ble.n	6bde <__aeabi_dadd+0xe2>
    6bdc:	e0c4      	b.n	6d68 <__aeabi_dadd+0x26c>
    6bde:	1b9e      	subs	r6, r3, r6
    6be0:	1c73      	adds	r3, r6, #1
    6be2:	2b1f      	cmp	r3, #31
    6be4:	dd00      	ble.n	6be8 <__aeabi_dadd+0xec>
    6be6:	e0f1      	b.n	6dcc <__aeabi_dadd+0x2d0>
    6be8:	2220      	movs	r2, #32
    6bea:	0038      	movs	r0, r7
    6bec:	0029      	movs	r1, r5
    6bee:	1ad2      	subs	r2, r2, r3
    6bf0:	40d8      	lsrs	r0, r3
    6bf2:	4091      	lsls	r1, r2
    6bf4:	4097      	lsls	r7, r2
    6bf6:	002c      	movs	r4, r5
    6bf8:	4301      	orrs	r1, r0
    6bfa:	1e78      	subs	r0, r7, #1
    6bfc:	4187      	sbcs	r7, r0
    6bfe:	40dc      	lsrs	r4, r3
    6c00:	2600      	movs	r6, #0
    6c02:	430f      	orrs	r7, r1
    6c04:	077b      	lsls	r3, r7, #29
    6c06:	d009      	beq.n	6c1c <__aeabi_dadd+0x120>
    6c08:	230f      	movs	r3, #15
    6c0a:	403b      	ands	r3, r7
    6c0c:	2b04      	cmp	r3, #4
    6c0e:	d005      	beq.n	6c1c <__aeabi_dadd+0x120>
    6c10:	1d3b      	adds	r3, r7, #4
    6c12:	42bb      	cmp	r3, r7
    6c14:	41bf      	sbcs	r7, r7
    6c16:	427f      	negs	r7, r7
    6c18:	19e4      	adds	r4, r4, r7
    6c1a:	001f      	movs	r7, r3
    6c1c:	0223      	lsls	r3, r4, #8
    6c1e:	d52c      	bpl.n	6c7a <__aeabi_dadd+0x17e>
    6c20:	4b96      	ldr	r3, [pc, #600]	; (6e7c <__aeabi_dadd+0x380>)
    6c22:	3601      	adds	r6, #1
    6c24:	429e      	cmp	r6, r3
    6c26:	d100      	bne.n	6c2a <__aeabi_dadd+0x12e>
    6c28:	e09a      	b.n	6d60 <__aeabi_dadd+0x264>
    6c2a:	4645      	mov	r5, r8
    6c2c:	4b94      	ldr	r3, [pc, #592]	; (6e80 <__aeabi_dadd+0x384>)
    6c2e:	08ff      	lsrs	r7, r7, #3
    6c30:	401c      	ands	r4, r3
    6c32:	0760      	lsls	r0, r4, #29
    6c34:	0576      	lsls	r6, r6, #21
    6c36:	0264      	lsls	r4, r4, #9
    6c38:	4307      	orrs	r7, r0
    6c3a:	0b24      	lsrs	r4, r4, #12
    6c3c:	0d76      	lsrs	r6, r6, #21
    6c3e:	2100      	movs	r1, #0
    6c40:	0324      	lsls	r4, r4, #12
    6c42:	0b23      	lsrs	r3, r4, #12
    6c44:	0d0c      	lsrs	r4, r1, #20
    6c46:	4a8f      	ldr	r2, [pc, #572]	; (6e84 <__aeabi_dadd+0x388>)
    6c48:	0524      	lsls	r4, r4, #20
    6c4a:	431c      	orrs	r4, r3
    6c4c:	4014      	ands	r4, r2
    6c4e:	0533      	lsls	r3, r6, #20
    6c50:	4323      	orrs	r3, r4
    6c52:	005b      	lsls	r3, r3, #1
    6c54:	07ed      	lsls	r5, r5, #31
    6c56:	085b      	lsrs	r3, r3, #1
    6c58:	432b      	orrs	r3, r5
    6c5a:	0038      	movs	r0, r7
    6c5c:	0019      	movs	r1, r3
    6c5e:	bc3c      	pop	{r2, r3, r4, r5}
    6c60:	4690      	mov	r8, r2
    6c62:	4699      	mov	r9, r3
    6c64:	46a2      	mov	sl, r4
    6c66:	46ab      	mov	fp, r5
    6c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c6a:	4664      	mov	r4, ip
    6c6c:	4304      	orrs	r4, r0
    6c6e:	d100      	bne.n	6c72 <__aeabi_dadd+0x176>
    6c70:	e211      	b.n	7096 <__aeabi_dadd+0x59a>
    6c72:	0004      	movs	r4, r0
    6c74:	4667      	mov	r7, ip
    6c76:	077b      	lsls	r3, r7, #29
    6c78:	d1c6      	bne.n	6c08 <__aeabi_dadd+0x10c>
    6c7a:	4645      	mov	r5, r8
    6c7c:	0760      	lsls	r0, r4, #29
    6c7e:	08ff      	lsrs	r7, r7, #3
    6c80:	4307      	orrs	r7, r0
    6c82:	08e4      	lsrs	r4, r4, #3
    6c84:	4b7d      	ldr	r3, [pc, #500]	; (6e7c <__aeabi_dadd+0x380>)
    6c86:	429e      	cmp	r6, r3
    6c88:	d030      	beq.n	6cec <__aeabi_dadd+0x1f0>
    6c8a:	0324      	lsls	r4, r4, #12
    6c8c:	0576      	lsls	r6, r6, #21
    6c8e:	0b24      	lsrs	r4, r4, #12
    6c90:	0d76      	lsrs	r6, r6, #21
    6c92:	e7d4      	b.n	6c3e <__aeabi_dadd+0x142>
    6c94:	1a33      	subs	r3, r6, r0
    6c96:	469a      	mov	sl, r3
    6c98:	2b00      	cmp	r3, #0
    6c9a:	dd78      	ble.n	6d8e <__aeabi_dadd+0x292>
    6c9c:	2800      	cmp	r0, #0
    6c9e:	d031      	beq.n	6d04 <__aeabi_dadd+0x208>
    6ca0:	4876      	ldr	r0, [pc, #472]	; (6e7c <__aeabi_dadd+0x380>)
    6ca2:	4286      	cmp	r6, r0
    6ca4:	d0ae      	beq.n	6c04 <__aeabi_dadd+0x108>
    6ca6:	2080      	movs	r0, #128	; 0x80
    6ca8:	0400      	lsls	r0, r0, #16
    6caa:	4301      	orrs	r1, r0
    6cac:	4653      	mov	r3, sl
    6cae:	2b38      	cmp	r3, #56	; 0x38
    6cb0:	dc00      	bgt.n	6cb4 <__aeabi_dadd+0x1b8>
    6cb2:	e0e9      	b.n	6e88 <__aeabi_dadd+0x38c>
    6cb4:	430a      	orrs	r2, r1
    6cb6:	1e51      	subs	r1, r2, #1
    6cb8:	418a      	sbcs	r2, r1
    6cba:	2100      	movs	r1, #0
    6cbc:	19d2      	adds	r2, r2, r7
    6cbe:	42ba      	cmp	r2, r7
    6cc0:	41bf      	sbcs	r7, r7
    6cc2:	1909      	adds	r1, r1, r4
    6cc4:	427c      	negs	r4, r7
    6cc6:	0017      	movs	r7, r2
    6cc8:	190c      	adds	r4, r1, r4
    6cca:	0223      	lsls	r3, r4, #8
    6ccc:	d5d3      	bpl.n	6c76 <__aeabi_dadd+0x17a>
    6cce:	4b6b      	ldr	r3, [pc, #428]	; (6e7c <__aeabi_dadd+0x380>)
    6cd0:	3601      	adds	r6, #1
    6cd2:	429e      	cmp	r6, r3
    6cd4:	d100      	bne.n	6cd8 <__aeabi_dadd+0x1dc>
    6cd6:	e13a      	b.n	6f4e <__aeabi_dadd+0x452>
    6cd8:	2001      	movs	r0, #1
    6cda:	4b69      	ldr	r3, [pc, #420]	; (6e80 <__aeabi_dadd+0x384>)
    6cdc:	401c      	ands	r4, r3
    6cde:	087b      	lsrs	r3, r7, #1
    6ce0:	4007      	ands	r7, r0
    6ce2:	431f      	orrs	r7, r3
    6ce4:	07e0      	lsls	r0, r4, #31
    6ce6:	4307      	orrs	r7, r0
    6ce8:	0864      	lsrs	r4, r4, #1
    6cea:	e78b      	b.n	6c04 <__aeabi_dadd+0x108>
    6cec:	0023      	movs	r3, r4
    6cee:	433b      	orrs	r3, r7
    6cf0:	d100      	bne.n	6cf4 <__aeabi_dadd+0x1f8>
    6cf2:	e1cb      	b.n	708c <__aeabi_dadd+0x590>
    6cf4:	2280      	movs	r2, #128	; 0x80
    6cf6:	0312      	lsls	r2, r2, #12
    6cf8:	4314      	orrs	r4, r2
    6cfa:	0324      	lsls	r4, r4, #12
    6cfc:	0b24      	lsrs	r4, r4, #12
    6cfe:	e79e      	b.n	6c3e <__aeabi_dadd+0x142>
    6d00:	002e      	movs	r6, r5
    6d02:	e77f      	b.n	6c04 <__aeabi_dadd+0x108>
    6d04:	0008      	movs	r0, r1
    6d06:	4310      	orrs	r0, r2
    6d08:	d100      	bne.n	6d0c <__aeabi_dadd+0x210>
    6d0a:	e0b4      	b.n	6e76 <__aeabi_dadd+0x37a>
    6d0c:	1e58      	subs	r0, r3, #1
    6d0e:	2800      	cmp	r0, #0
    6d10:	d000      	beq.n	6d14 <__aeabi_dadd+0x218>
    6d12:	e0de      	b.n	6ed2 <__aeabi_dadd+0x3d6>
    6d14:	18ba      	adds	r2, r7, r2
    6d16:	42ba      	cmp	r2, r7
    6d18:	419b      	sbcs	r3, r3
    6d1a:	1864      	adds	r4, r4, r1
    6d1c:	425b      	negs	r3, r3
    6d1e:	18e4      	adds	r4, r4, r3
    6d20:	0017      	movs	r7, r2
    6d22:	2601      	movs	r6, #1
    6d24:	0223      	lsls	r3, r4, #8
    6d26:	d5a6      	bpl.n	6c76 <__aeabi_dadd+0x17a>
    6d28:	2602      	movs	r6, #2
    6d2a:	e7d5      	b.n	6cd8 <__aeabi_dadd+0x1dc>
    6d2c:	2d00      	cmp	r5, #0
    6d2e:	d16e      	bne.n	6e0e <__aeabi_dadd+0x312>
    6d30:	1c70      	adds	r0, r6, #1
    6d32:	0540      	lsls	r0, r0, #21
    6d34:	0d40      	lsrs	r0, r0, #21
    6d36:	2801      	cmp	r0, #1
    6d38:	dc00      	bgt.n	6d3c <__aeabi_dadd+0x240>
    6d3a:	e0f9      	b.n	6f30 <__aeabi_dadd+0x434>
    6d3c:	1ab8      	subs	r0, r7, r2
    6d3e:	4684      	mov	ip, r0
    6d40:	4287      	cmp	r7, r0
    6d42:	4180      	sbcs	r0, r0
    6d44:	1ae5      	subs	r5, r4, r3
    6d46:	4240      	negs	r0, r0
    6d48:	1a2d      	subs	r5, r5, r0
    6d4a:	0228      	lsls	r0, r5, #8
    6d4c:	d400      	bmi.n	6d50 <__aeabi_dadd+0x254>
    6d4e:	e089      	b.n	6e64 <__aeabi_dadd+0x368>
    6d50:	1bd7      	subs	r7, r2, r7
    6d52:	42ba      	cmp	r2, r7
    6d54:	4192      	sbcs	r2, r2
    6d56:	1b1c      	subs	r4, r3, r4
    6d58:	4252      	negs	r2, r2
    6d5a:	1aa5      	subs	r5, r4, r2
    6d5c:	46d8      	mov	r8, fp
    6d5e:	e729      	b.n	6bb4 <__aeabi_dadd+0xb8>
    6d60:	4645      	mov	r5, r8
    6d62:	2400      	movs	r4, #0
    6d64:	2700      	movs	r7, #0
    6d66:	e76a      	b.n	6c3e <__aeabi_dadd+0x142>
    6d68:	4c45      	ldr	r4, [pc, #276]	; (6e80 <__aeabi_dadd+0x384>)
    6d6a:	1af6      	subs	r6, r6, r3
    6d6c:	402c      	ands	r4, r5
    6d6e:	e749      	b.n	6c04 <__aeabi_dadd+0x108>
    6d70:	003d      	movs	r5, r7
    6d72:	3828      	subs	r0, #40	; 0x28
    6d74:	4085      	lsls	r5, r0
    6d76:	2700      	movs	r7, #0
    6d78:	e72e      	b.n	6bd8 <__aeabi_dadd+0xdc>
    6d7a:	0038      	movs	r0, r7
    6d7c:	f001 fbd6 	bl	852c <__clzsi2>
    6d80:	3020      	adds	r0, #32
    6d82:	e71d      	b.n	6bc0 <__aeabi_dadd+0xc4>
    6d84:	430a      	orrs	r2, r1
    6d86:	1e51      	subs	r1, r2, #1
    6d88:	418a      	sbcs	r2, r1
    6d8a:	2100      	movs	r1, #0
    6d8c:	e707      	b.n	6b9e <__aeabi_dadd+0xa2>
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d000      	beq.n	6d94 <__aeabi_dadd+0x298>
    6d92:	e0f3      	b.n	6f7c <__aeabi_dadd+0x480>
    6d94:	1c70      	adds	r0, r6, #1
    6d96:	0543      	lsls	r3, r0, #21
    6d98:	0d5b      	lsrs	r3, r3, #21
    6d9a:	2b01      	cmp	r3, #1
    6d9c:	dc00      	bgt.n	6da0 <__aeabi_dadd+0x2a4>
    6d9e:	e0ad      	b.n	6efc <__aeabi_dadd+0x400>
    6da0:	4b36      	ldr	r3, [pc, #216]	; (6e7c <__aeabi_dadd+0x380>)
    6da2:	4298      	cmp	r0, r3
    6da4:	d100      	bne.n	6da8 <__aeabi_dadd+0x2ac>
    6da6:	e0d1      	b.n	6f4c <__aeabi_dadd+0x450>
    6da8:	18ba      	adds	r2, r7, r2
    6daa:	42ba      	cmp	r2, r7
    6dac:	41bf      	sbcs	r7, r7
    6dae:	1864      	adds	r4, r4, r1
    6db0:	427f      	negs	r7, r7
    6db2:	19e4      	adds	r4, r4, r7
    6db4:	07e7      	lsls	r7, r4, #31
    6db6:	0852      	lsrs	r2, r2, #1
    6db8:	4317      	orrs	r7, r2
    6dba:	0864      	lsrs	r4, r4, #1
    6dbc:	0006      	movs	r6, r0
    6dbe:	e721      	b.n	6c04 <__aeabi_dadd+0x108>
    6dc0:	482e      	ldr	r0, [pc, #184]	; (6e7c <__aeabi_dadd+0x380>)
    6dc2:	4285      	cmp	r5, r0
    6dc4:	d100      	bne.n	6dc8 <__aeabi_dadd+0x2cc>
    6dc6:	e093      	b.n	6ef0 <__aeabi_dadd+0x3f4>
    6dc8:	001d      	movs	r5, r3
    6dca:	e6d0      	b.n	6b6e <__aeabi_dadd+0x72>
    6dcc:	0029      	movs	r1, r5
    6dce:	3e1f      	subs	r6, #31
    6dd0:	40f1      	lsrs	r1, r6
    6dd2:	2b20      	cmp	r3, #32
    6dd4:	d100      	bne.n	6dd8 <__aeabi_dadd+0x2dc>
    6dd6:	e08d      	b.n	6ef4 <__aeabi_dadd+0x3f8>
    6dd8:	2240      	movs	r2, #64	; 0x40
    6dda:	1ad3      	subs	r3, r2, r3
    6ddc:	409d      	lsls	r5, r3
    6dde:	432f      	orrs	r7, r5
    6de0:	1e7d      	subs	r5, r7, #1
    6de2:	41af      	sbcs	r7, r5
    6de4:	2400      	movs	r4, #0
    6de6:	430f      	orrs	r7, r1
    6de8:	2600      	movs	r6, #0
    6dea:	e744      	b.n	6c76 <__aeabi_dadd+0x17a>
    6dec:	002b      	movs	r3, r5
    6dee:	0008      	movs	r0, r1
    6df0:	3b20      	subs	r3, #32
    6df2:	40d8      	lsrs	r0, r3
    6df4:	0003      	movs	r3, r0
    6df6:	2d20      	cmp	r5, #32
    6df8:	d100      	bne.n	6dfc <__aeabi_dadd+0x300>
    6dfa:	e07d      	b.n	6ef8 <__aeabi_dadd+0x3fc>
    6dfc:	2040      	movs	r0, #64	; 0x40
    6dfe:	1b45      	subs	r5, r0, r5
    6e00:	40a9      	lsls	r1, r5
    6e02:	430a      	orrs	r2, r1
    6e04:	1e51      	subs	r1, r2, #1
    6e06:	418a      	sbcs	r2, r1
    6e08:	2100      	movs	r1, #0
    6e0a:	431a      	orrs	r2, r3
    6e0c:	e6c7      	b.n	6b9e <__aeabi_dadd+0xa2>
    6e0e:	2e00      	cmp	r6, #0
    6e10:	d050      	beq.n	6eb4 <__aeabi_dadd+0x3b8>
    6e12:	4e1a      	ldr	r6, [pc, #104]	; (6e7c <__aeabi_dadd+0x380>)
    6e14:	42b0      	cmp	r0, r6
    6e16:	d057      	beq.n	6ec8 <__aeabi_dadd+0x3cc>
    6e18:	2680      	movs	r6, #128	; 0x80
    6e1a:	426b      	negs	r3, r5
    6e1c:	4699      	mov	r9, r3
    6e1e:	0436      	lsls	r6, r6, #16
    6e20:	4334      	orrs	r4, r6
    6e22:	464b      	mov	r3, r9
    6e24:	2b38      	cmp	r3, #56	; 0x38
    6e26:	dd00      	ble.n	6e2a <__aeabi_dadd+0x32e>
    6e28:	e0d6      	b.n	6fd8 <__aeabi_dadd+0x4dc>
    6e2a:	2b1f      	cmp	r3, #31
    6e2c:	dd00      	ble.n	6e30 <__aeabi_dadd+0x334>
    6e2e:	e135      	b.n	709c <__aeabi_dadd+0x5a0>
    6e30:	2620      	movs	r6, #32
    6e32:	1af5      	subs	r5, r6, r3
    6e34:	0026      	movs	r6, r4
    6e36:	40ae      	lsls	r6, r5
    6e38:	46b2      	mov	sl, r6
    6e3a:	003e      	movs	r6, r7
    6e3c:	40de      	lsrs	r6, r3
    6e3e:	46ac      	mov	ip, r5
    6e40:	0035      	movs	r5, r6
    6e42:	4656      	mov	r6, sl
    6e44:	432e      	orrs	r6, r5
    6e46:	4665      	mov	r5, ip
    6e48:	40af      	lsls	r7, r5
    6e4a:	1e7d      	subs	r5, r7, #1
    6e4c:	41af      	sbcs	r7, r5
    6e4e:	40dc      	lsrs	r4, r3
    6e50:	4337      	orrs	r7, r6
    6e52:	1bd7      	subs	r7, r2, r7
    6e54:	42ba      	cmp	r2, r7
    6e56:	4192      	sbcs	r2, r2
    6e58:	1b0c      	subs	r4, r1, r4
    6e5a:	4252      	negs	r2, r2
    6e5c:	1aa4      	subs	r4, r4, r2
    6e5e:	0006      	movs	r6, r0
    6e60:	46d8      	mov	r8, fp
    6e62:	e6a3      	b.n	6bac <__aeabi_dadd+0xb0>
    6e64:	4664      	mov	r4, ip
    6e66:	4667      	mov	r7, ip
    6e68:	432c      	orrs	r4, r5
    6e6a:	d000      	beq.n	6e6e <__aeabi_dadd+0x372>
    6e6c:	e6a2      	b.n	6bb4 <__aeabi_dadd+0xb8>
    6e6e:	2500      	movs	r5, #0
    6e70:	2600      	movs	r6, #0
    6e72:	2700      	movs	r7, #0
    6e74:	e706      	b.n	6c84 <__aeabi_dadd+0x188>
    6e76:	001e      	movs	r6, r3
    6e78:	e6c4      	b.n	6c04 <__aeabi_dadd+0x108>
    6e7a:	46c0      	nop			; (mov r8, r8)
    6e7c:	000007ff 	.word	0x000007ff
    6e80:	ff7fffff 	.word	0xff7fffff
    6e84:	800fffff 	.word	0x800fffff
    6e88:	2b1f      	cmp	r3, #31
    6e8a:	dc63      	bgt.n	6f54 <__aeabi_dadd+0x458>
    6e8c:	2020      	movs	r0, #32
    6e8e:	1ac3      	subs	r3, r0, r3
    6e90:	0008      	movs	r0, r1
    6e92:	4098      	lsls	r0, r3
    6e94:	469c      	mov	ip, r3
    6e96:	4683      	mov	fp, r0
    6e98:	4653      	mov	r3, sl
    6e9a:	0010      	movs	r0, r2
    6e9c:	40d8      	lsrs	r0, r3
    6e9e:	0003      	movs	r3, r0
    6ea0:	4658      	mov	r0, fp
    6ea2:	4318      	orrs	r0, r3
    6ea4:	4663      	mov	r3, ip
    6ea6:	409a      	lsls	r2, r3
    6ea8:	1e53      	subs	r3, r2, #1
    6eaa:	419a      	sbcs	r2, r3
    6eac:	4653      	mov	r3, sl
    6eae:	4302      	orrs	r2, r0
    6eb0:	40d9      	lsrs	r1, r3
    6eb2:	e703      	b.n	6cbc <__aeabi_dadd+0x1c0>
    6eb4:	0026      	movs	r6, r4
    6eb6:	433e      	orrs	r6, r7
    6eb8:	d006      	beq.n	6ec8 <__aeabi_dadd+0x3cc>
    6eba:	43eb      	mvns	r3, r5
    6ebc:	4699      	mov	r9, r3
    6ebe:	2b00      	cmp	r3, #0
    6ec0:	d0c7      	beq.n	6e52 <__aeabi_dadd+0x356>
    6ec2:	4e94      	ldr	r6, [pc, #592]	; (7114 <__aeabi_dadd+0x618>)
    6ec4:	42b0      	cmp	r0, r6
    6ec6:	d1ac      	bne.n	6e22 <__aeabi_dadd+0x326>
    6ec8:	000c      	movs	r4, r1
    6eca:	0017      	movs	r7, r2
    6ecc:	0006      	movs	r6, r0
    6ece:	46d8      	mov	r8, fp
    6ed0:	e698      	b.n	6c04 <__aeabi_dadd+0x108>
    6ed2:	4b90      	ldr	r3, [pc, #576]	; (7114 <__aeabi_dadd+0x618>)
    6ed4:	459a      	cmp	sl, r3
    6ed6:	d00b      	beq.n	6ef0 <__aeabi_dadd+0x3f4>
    6ed8:	4682      	mov	sl, r0
    6eda:	e6e7      	b.n	6cac <__aeabi_dadd+0x1b0>
    6edc:	2800      	cmp	r0, #0
    6ede:	d000      	beq.n	6ee2 <__aeabi_dadd+0x3e6>
    6ee0:	e09e      	b.n	7020 <__aeabi_dadd+0x524>
    6ee2:	0018      	movs	r0, r3
    6ee4:	4310      	orrs	r0, r2
    6ee6:	d100      	bne.n	6eea <__aeabi_dadd+0x3ee>
    6ee8:	e0e9      	b.n	70be <__aeabi_dadd+0x5c2>
    6eea:	001c      	movs	r4, r3
    6eec:	0017      	movs	r7, r2
    6eee:	46d8      	mov	r8, fp
    6ef0:	4e88      	ldr	r6, [pc, #544]	; (7114 <__aeabi_dadd+0x618>)
    6ef2:	e687      	b.n	6c04 <__aeabi_dadd+0x108>
    6ef4:	2500      	movs	r5, #0
    6ef6:	e772      	b.n	6dde <__aeabi_dadd+0x2e2>
    6ef8:	2100      	movs	r1, #0
    6efa:	e782      	b.n	6e02 <__aeabi_dadd+0x306>
    6efc:	0023      	movs	r3, r4
    6efe:	433b      	orrs	r3, r7
    6f00:	2e00      	cmp	r6, #0
    6f02:	d000      	beq.n	6f06 <__aeabi_dadd+0x40a>
    6f04:	e0ab      	b.n	705e <__aeabi_dadd+0x562>
    6f06:	2b00      	cmp	r3, #0
    6f08:	d100      	bne.n	6f0c <__aeabi_dadd+0x410>
    6f0a:	e0e7      	b.n	70dc <__aeabi_dadd+0x5e0>
    6f0c:	000b      	movs	r3, r1
    6f0e:	4313      	orrs	r3, r2
    6f10:	d100      	bne.n	6f14 <__aeabi_dadd+0x418>
    6f12:	e677      	b.n	6c04 <__aeabi_dadd+0x108>
    6f14:	18ba      	adds	r2, r7, r2
    6f16:	42ba      	cmp	r2, r7
    6f18:	41bf      	sbcs	r7, r7
    6f1a:	1864      	adds	r4, r4, r1
    6f1c:	427f      	negs	r7, r7
    6f1e:	19e4      	adds	r4, r4, r7
    6f20:	0223      	lsls	r3, r4, #8
    6f22:	d400      	bmi.n	6f26 <__aeabi_dadd+0x42a>
    6f24:	e0f2      	b.n	710c <__aeabi_dadd+0x610>
    6f26:	4b7c      	ldr	r3, [pc, #496]	; (7118 <__aeabi_dadd+0x61c>)
    6f28:	0017      	movs	r7, r2
    6f2a:	401c      	ands	r4, r3
    6f2c:	0006      	movs	r6, r0
    6f2e:	e669      	b.n	6c04 <__aeabi_dadd+0x108>
    6f30:	0020      	movs	r0, r4
    6f32:	4338      	orrs	r0, r7
    6f34:	2e00      	cmp	r6, #0
    6f36:	d1d1      	bne.n	6edc <__aeabi_dadd+0x3e0>
    6f38:	2800      	cmp	r0, #0
    6f3a:	d15b      	bne.n	6ff4 <__aeabi_dadd+0x4f8>
    6f3c:	001c      	movs	r4, r3
    6f3e:	4314      	orrs	r4, r2
    6f40:	d100      	bne.n	6f44 <__aeabi_dadd+0x448>
    6f42:	e0a8      	b.n	7096 <__aeabi_dadd+0x59a>
    6f44:	001c      	movs	r4, r3
    6f46:	0017      	movs	r7, r2
    6f48:	46d8      	mov	r8, fp
    6f4a:	e65b      	b.n	6c04 <__aeabi_dadd+0x108>
    6f4c:	0006      	movs	r6, r0
    6f4e:	2400      	movs	r4, #0
    6f50:	2700      	movs	r7, #0
    6f52:	e697      	b.n	6c84 <__aeabi_dadd+0x188>
    6f54:	4650      	mov	r0, sl
    6f56:	000b      	movs	r3, r1
    6f58:	3820      	subs	r0, #32
    6f5a:	40c3      	lsrs	r3, r0
    6f5c:	4699      	mov	r9, r3
    6f5e:	4653      	mov	r3, sl
    6f60:	2b20      	cmp	r3, #32
    6f62:	d100      	bne.n	6f66 <__aeabi_dadd+0x46a>
    6f64:	e095      	b.n	7092 <__aeabi_dadd+0x596>
    6f66:	2340      	movs	r3, #64	; 0x40
    6f68:	4650      	mov	r0, sl
    6f6a:	1a1b      	subs	r3, r3, r0
    6f6c:	4099      	lsls	r1, r3
    6f6e:	430a      	orrs	r2, r1
    6f70:	1e51      	subs	r1, r2, #1
    6f72:	418a      	sbcs	r2, r1
    6f74:	464b      	mov	r3, r9
    6f76:	2100      	movs	r1, #0
    6f78:	431a      	orrs	r2, r3
    6f7a:	e69f      	b.n	6cbc <__aeabi_dadd+0x1c0>
    6f7c:	2e00      	cmp	r6, #0
    6f7e:	d130      	bne.n	6fe2 <__aeabi_dadd+0x4e6>
    6f80:	0026      	movs	r6, r4
    6f82:	433e      	orrs	r6, r7
    6f84:	d067      	beq.n	7056 <__aeabi_dadd+0x55a>
    6f86:	43db      	mvns	r3, r3
    6f88:	469a      	mov	sl, r3
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d01c      	beq.n	6fc8 <__aeabi_dadd+0x4cc>
    6f8e:	4e61      	ldr	r6, [pc, #388]	; (7114 <__aeabi_dadd+0x618>)
    6f90:	42b0      	cmp	r0, r6
    6f92:	d060      	beq.n	7056 <__aeabi_dadd+0x55a>
    6f94:	4653      	mov	r3, sl
    6f96:	2b38      	cmp	r3, #56	; 0x38
    6f98:	dd00      	ble.n	6f9c <__aeabi_dadd+0x4a0>
    6f9a:	e096      	b.n	70ca <__aeabi_dadd+0x5ce>
    6f9c:	2b1f      	cmp	r3, #31
    6f9e:	dd00      	ble.n	6fa2 <__aeabi_dadd+0x4a6>
    6fa0:	e09f      	b.n	70e2 <__aeabi_dadd+0x5e6>
    6fa2:	2620      	movs	r6, #32
    6fa4:	1af3      	subs	r3, r6, r3
    6fa6:	0026      	movs	r6, r4
    6fa8:	409e      	lsls	r6, r3
    6faa:	469c      	mov	ip, r3
    6fac:	46b3      	mov	fp, r6
    6fae:	4653      	mov	r3, sl
    6fb0:	003e      	movs	r6, r7
    6fb2:	40de      	lsrs	r6, r3
    6fb4:	0033      	movs	r3, r6
    6fb6:	465e      	mov	r6, fp
    6fb8:	431e      	orrs	r6, r3
    6fba:	4663      	mov	r3, ip
    6fbc:	409f      	lsls	r7, r3
    6fbe:	1e7b      	subs	r3, r7, #1
    6fc0:	419f      	sbcs	r7, r3
    6fc2:	4653      	mov	r3, sl
    6fc4:	40dc      	lsrs	r4, r3
    6fc6:	4337      	orrs	r7, r6
    6fc8:	18bf      	adds	r7, r7, r2
    6fca:	4297      	cmp	r7, r2
    6fcc:	4192      	sbcs	r2, r2
    6fce:	1864      	adds	r4, r4, r1
    6fd0:	4252      	negs	r2, r2
    6fd2:	18a4      	adds	r4, r4, r2
    6fd4:	0006      	movs	r6, r0
    6fd6:	e678      	b.n	6cca <__aeabi_dadd+0x1ce>
    6fd8:	4327      	orrs	r7, r4
    6fda:	1e7c      	subs	r4, r7, #1
    6fdc:	41a7      	sbcs	r7, r4
    6fde:	2400      	movs	r4, #0
    6fe0:	e737      	b.n	6e52 <__aeabi_dadd+0x356>
    6fe2:	4e4c      	ldr	r6, [pc, #304]	; (7114 <__aeabi_dadd+0x618>)
    6fe4:	42b0      	cmp	r0, r6
    6fe6:	d036      	beq.n	7056 <__aeabi_dadd+0x55a>
    6fe8:	2680      	movs	r6, #128	; 0x80
    6fea:	425b      	negs	r3, r3
    6fec:	0436      	lsls	r6, r6, #16
    6fee:	469a      	mov	sl, r3
    6ff0:	4334      	orrs	r4, r6
    6ff2:	e7cf      	b.n	6f94 <__aeabi_dadd+0x498>
    6ff4:	0018      	movs	r0, r3
    6ff6:	4310      	orrs	r0, r2
    6ff8:	d100      	bne.n	6ffc <__aeabi_dadd+0x500>
    6ffa:	e603      	b.n	6c04 <__aeabi_dadd+0x108>
    6ffc:	1ab8      	subs	r0, r7, r2
    6ffe:	4684      	mov	ip, r0
    7000:	4567      	cmp	r7, ip
    7002:	41ad      	sbcs	r5, r5
    7004:	1ae0      	subs	r0, r4, r3
    7006:	426d      	negs	r5, r5
    7008:	1b40      	subs	r0, r0, r5
    700a:	0205      	lsls	r5, r0, #8
    700c:	d400      	bmi.n	7010 <__aeabi_dadd+0x514>
    700e:	e62c      	b.n	6c6a <__aeabi_dadd+0x16e>
    7010:	1bd7      	subs	r7, r2, r7
    7012:	42ba      	cmp	r2, r7
    7014:	4192      	sbcs	r2, r2
    7016:	1b1c      	subs	r4, r3, r4
    7018:	4252      	negs	r2, r2
    701a:	1aa4      	subs	r4, r4, r2
    701c:	46d8      	mov	r8, fp
    701e:	e5f1      	b.n	6c04 <__aeabi_dadd+0x108>
    7020:	0018      	movs	r0, r3
    7022:	4310      	orrs	r0, r2
    7024:	d100      	bne.n	7028 <__aeabi_dadd+0x52c>
    7026:	e763      	b.n	6ef0 <__aeabi_dadd+0x3f4>
    7028:	08f8      	lsrs	r0, r7, #3
    702a:	0767      	lsls	r7, r4, #29
    702c:	4307      	orrs	r7, r0
    702e:	2080      	movs	r0, #128	; 0x80
    7030:	08e4      	lsrs	r4, r4, #3
    7032:	0300      	lsls	r0, r0, #12
    7034:	4204      	tst	r4, r0
    7036:	d008      	beq.n	704a <__aeabi_dadd+0x54e>
    7038:	08dd      	lsrs	r5, r3, #3
    703a:	4205      	tst	r5, r0
    703c:	d105      	bne.n	704a <__aeabi_dadd+0x54e>
    703e:	08d2      	lsrs	r2, r2, #3
    7040:	0759      	lsls	r1, r3, #29
    7042:	4311      	orrs	r1, r2
    7044:	000f      	movs	r7, r1
    7046:	002c      	movs	r4, r5
    7048:	46d8      	mov	r8, fp
    704a:	0f7b      	lsrs	r3, r7, #29
    704c:	00e4      	lsls	r4, r4, #3
    704e:	431c      	orrs	r4, r3
    7050:	00ff      	lsls	r7, r7, #3
    7052:	4e30      	ldr	r6, [pc, #192]	; (7114 <__aeabi_dadd+0x618>)
    7054:	e5d6      	b.n	6c04 <__aeabi_dadd+0x108>
    7056:	000c      	movs	r4, r1
    7058:	0017      	movs	r7, r2
    705a:	0006      	movs	r6, r0
    705c:	e5d2      	b.n	6c04 <__aeabi_dadd+0x108>
    705e:	2b00      	cmp	r3, #0
    7060:	d038      	beq.n	70d4 <__aeabi_dadd+0x5d8>
    7062:	000b      	movs	r3, r1
    7064:	4313      	orrs	r3, r2
    7066:	d100      	bne.n	706a <__aeabi_dadd+0x56e>
    7068:	e742      	b.n	6ef0 <__aeabi_dadd+0x3f4>
    706a:	08f8      	lsrs	r0, r7, #3
    706c:	0767      	lsls	r7, r4, #29
    706e:	4307      	orrs	r7, r0
    7070:	2080      	movs	r0, #128	; 0x80
    7072:	08e4      	lsrs	r4, r4, #3
    7074:	0300      	lsls	r0, r0, #12
    7076:	4204      	tst	r4, r0
    7078:	d0e7      	beq.n	704a <__aeabi_dadd+0x54e>
    707a:	08cb      	lsrs	r3, r1, #3
    707c:	4203      	tst	r3, r0
    707e:	d1e4      	bne.n	704a <__aeabi_dadd+0x54e>
    7080:	08d2      	lsrs	r2, r2, #3
    7082:	0749      	lsls	r1, r1, #29
    7084:	4311      	orrs	r1, r2
    7086:	000f      	movs	r7, r1
    7088:	001c      	movs	r4, r3
    708a:	e7de      	b.n	704a <__aeabi_dadd+0x54e>
    708c:	2700      	movs	r7, #0
    708e:	2400      	movs	r4, #0
    7090:	e5d5      	b.n	6c3e <__aeabi_dadd+0x142>
    7092:	2100      	movs	r1, #0
    7094:	e76b      	b.n	6f6e <__aeabi_dadd+0x472>
    7096:	2500      	movs	r5, #0
    7098:	2700      	movs	r7, #0
    709a:	e5f3      	b.n	6c84 <__aeabi_dadd+0x188>
    709c:	464e      	mov	r6, r9
    709e:	0025      	movs	r5, r4
    70a0:	3e20      	subs	r6, #32
    70a2:	40f5      	lsrs	r5, r6
    70a4:	464b      	mov	r3, r9
    70a6:	002e      	movs	r6, r5
    70a8:	2b20      	cmp	r3, #32
    70aa:	d02d      	beq.n	7108 <__aeabi_dadd+0x60c>
    70ac:	2540      	movs	r5, #64	; 0x40
    70ae:	1aed      	subs	r5, r5, r3
    70b0:	40ac      	lsls	r4, r5
    70b2:	4327      	orrs	r7, r4
    70b4:	1e7c      	subs	r4, r7, #1
    70b6:	41a7      	sbcs	r7, r4
    70b8:	2400      	movs	r4, #0
    70ba:	4337      	orrs	r7, r6
    70bc:	e6c9      	b.n	6e52 <__aeabi_dadd+0x356>
    70be:	2480      	movs	r4, #128	; 0x80
    70c0:	2500      	movs	r5, #0
    70c2:	0324      	lsls	r4, r4, #12
    70c4:	4e13      	ldr	r6, [pc, #76]	; (7114 <__aeabi_dadd+0x618>)
    70c6:	2700      	movs	r7, #0
    70c8:	e5dc      	b.n	6c84 <__aeabi_dadd+0x188>
    70ca:	4327      	orrs	r7, r4
    70cc:	1e7c      	subs	r4, r7, #1
    70ce:	41a7      	sbcs	r7, r4
    70d0:	2400      	movs	r4, #0
    70d2:	e779      	b.n	6fc8 <__aeabi_dadd+0x4cc>
    70d4:	000c      	movs	r4, r1
    70d6:	0017      	movs	r7, r2
    70d8:	4e0e      	ldr	r6, [pc, #56]	; (7114 <__aeabi_dadd+0x618>)
    70da:	e593      	b.n	6c04 <__aeabi_dadd+0x108>
    70dc:	000c      	movs	r4, r1
    70de:	0017      	movs	r7, r2
    70e0:	e590      	b.n	6c04 <__aeabi_dadd+0x108>
    70e2:	4656      	mov	r6, sl
    70e4:	0023      	movs	r3, r4
    70e6:	3e20      	subs	r6, #32
    70e8:	40f3      	lsrs	r3, r6
    70ea:	4699      	mov	r9, r3
    70ec:	4653      	mov	r3, sl
    70ee:	2b20      	cmp	r3, #32
    70f0:	d00e      	beq.n	7110 <__aeabi_dadd+0x614>
    70f2:	2340      	movs	r3, #64	; 0x40
    70f4:	4656      	mov	r6, sl
    70f6:	1b9b      	subs	r3, r3, r6
    70f8:	409c      	lsls	r4, r3
    70fa:	4327      	orrs	r7, r4
    70fc:	1e7c      	subs	r4, r7, #1
    70fe:	41a7      	sbcs	r7, r4
    7100:	464b      	mov	r3, r9
    7102:	2400      	movs	r4, #0
    7104:	431f      	orrs	r7, r3
    7106:	e75f      	b.n	6fc8 <__aeabi_dadd+0x4cc>
    7108:	2400      	movs	r4, #0
    710a:	e7d2      	b.n	70b2 <__aeabi_dadd+0x5b6>
    710c:	0017      	movs	r7, r2
    710e:	e5b2      	b.n	6c76 <__aeabi_dadd+0x17a>
    7110:	2400      	movs	r4, #0
    7112:	e7f2      	b.n	70fa <__aeabi_dadd+0x5fe>
    7114:	000007ff 	.word	0x000007ff
    7118:	ff7fffff 	.word	0xff7fffff

0000711c <__aeabi_ddiv>:
    711c:	b5f0      	push	{r4, r5, r6, r7, lr}
    711e:	4657      	mov	r7, sl
    7120:	4645      	mov	r5, r8
    7122:	46de      	mov	lr, fp
    7124:	464e      	mov	r6, r9
    7126:	b5e0      	push	{r5, r6, r7, lr}
    7128:	004c      	lsls	r4, r1, #1
    712a:	030e      	lsls	r6, r1, #12
    712c:	b087      	sub	sp, #28
    712e:	4683      	mov	fp, r0
    7130:	4692      	mov	sl, r2
    7132:	001d      	movs	r5, r3
    7134:	4680      	mov	r8, r0
    7136:	0b36      	lsrs	r6, r6, #12
    7138:	0d64      	lsrs	r4, r4, #21
    713a:	0fcf      	lsrs	r7, r1, #31
    713c:	2c00      	cmp	r4, #0
    713e:	d04f      	beq.n	71e0 <__aeabi_ddiv+0xc4>
    7140:	4b6f      	ldr	r3, [pc, #444]	; (7300 <__aeabi_ddiv+0x1e4>)
    7142:	429c      	cmp	r4, r3
    7144:	d035      	beq.n	71b2 <__aeabi_ddiv+0x96>
    7146:	2380      	movs	r3, #128	; 0x80
    7148:	0f42      	lsrs	r2, r0, #29
    714a:	041b      	lsls	r3, r3, #16
    714c:	00f6      	lsls	r6, r6, #3
    714e:	4313      	orrs	r3, r2
    7150:	4333      	orrs	r3, r6
    7152:	4699      	mov	r9, r3
    7154:	00c3      	lsls	r3, r0, #3
    7156:	4698      	mov	r8, r3
    7158:	4b6a      	ldr	r3, [pc, #424]	; (7304 <__aeabi_ddiv+0x1e8>)
    715a:	2600      	movs	r6, #0
    715c:	469c      	mov	ip, r3
    715e:	2300      	movs	r3, #0
    7160:	4464      	add	r4, ip
    7162:	9303      	str	r3, [sp, #12]
    7164:	032b      	lsls	r3, r5, #12
    7166:	0b1b      	lsrs	r3, r3, #12
    7168:	469b      	mov	fp, r3
    716a:	006b      	lsls	r3, r5, #1
    716c:	0fed      	lsrs	r5, r5, #31
    716e:	4650      	mov	r0, sl
    7170:	0d5b      	lsrs	r3, r3, #21
    7172:	9501      	str	r5, [sp, #4]
    7174:	d05e      	beq.n	7234 <__aeabi_ddiv+0x118>
    7176:	4a62      	ldr	r2, [pc, #392]	; (7300 <__aeabi_ddiv+0x1e4>)
    7178:	4293      	cmp	r3, r2
    717a:	d053      	beq.n	7224 <__aeabi_ddiv+0x108>
    717c:	465a      	mov	r2, fp
    717e:	00d1      	lsls	r1, r2, #3
    7180:	2280      	movs	r2, #128	; 0x80
    7182:	0f40      	lsrs	r0, r0, #29
    7184:	0412      	lsls	r2, r2, #16
    7186:	4302      	orrs	r2, r0
    7188:	430a      	orrs	r2, r1
    718a:	4693      	mov	fp, r2
    718c:	4652      	mov	r2, sl
    718e:	00d1      	lsls	r1, r2, #3
    7190:	4a5c      	ldr	r2, [pc, #368]	; (7304 <__aeabi_ddiv+0x1e8>)
    7192:	4694      	mov	ip, r2
    7194:	2200      	movs	r2, #0
    7196:	4463      	add	r3, ip
    7198:	0038      	movs	r0, r7
    719a:	4068      	eors	r0, r5
    719c:	4684      	mov	ip, r0
    719e:	9002      	str	r0, [sp, #8]
    71a0:	1ae4      	subs	r4, r4, r3
    71a2:	4316      	orrs	r6, r2
    71a4:	2e0f      	cmp	r6, #15
    71a6:	d900      	bls.n	71aa <__aeabi_ddiv+0x8e>
    71a8:	e0b4      	b.n	7314 <__aeabi_ddiv+0x1f8>
    71aa:	4b57      	ldr	r3, [pc, #348]	; (7308 <__aeabi_ddiv+0x1ec>)
    71ac:	00b6      	lsls	r6, r6, #2
    71ae:	599b      	ldr	r3, [r3, r6]
    71b0:	469f      	mov	pc, r3
    71b2:	0003      	movs	r3, r0
    71b4:	4333      	orrs	r3, r6
    71b6:	4699      	mov	r9, r3
    71b8:	d16c      	bne.n	7294 <__aeabi_ddiv+0x178>
    71ba:	2300      	movs	r3, #0
    71bc:	4698      	mov	r8, r3
    71be:	3302      	adds	r3, #2
    71c0:	2608      	movs	r6, #8
    71c2:	9303      	str	r3, [sp, #12]
    71c4:	e7ce      	b.n	7164 <__aeabi_ddiv+0x48>
    71c6:	46cb      	mov	fp, r9
    71c8:	4641      	mov	r1, r8
    71ca:	9a03      	ldr	r2, [sp, #12]
    71cc:	9701      	str	r7, [sp, #4]
    71ce:	2a02      	cmp	r2, #2
    71d0:	d165      	bne.n	729e <__aeabi_ddiv+0x182>
    71d2:	9b01      	ldr	r3, [sp, #4]
    71d4:	4c4a      	ldr	r4, [pc, #296]	; (7300 <__aeabi_ddiv+0x1e4>)
    71d6:	469c      	mov	ip, r3
    71d8:	2300      	movs	r3, #0
    71da:	2200      	movs	r2, #0
    71dc:	4698      	mov	r8, r3
    71de:	e06b      	b.n	72b8 <__aeabi_ddiv+0x19c>
    71e0:	0003      	movs	r3, r0
    71e2:	4333      	orrs	r3, r6
    71e4:	4699      	mov	r9, r3
    71e6:	d04e      	beq.n	7286 <__aeabi_ddiv+0x16a>
    71e8:	2e00      	cmp	r6, #0
    71ea:	d100      	bne.n	71ee <__aeabi_ddiv+0xd2>
    71ec:	e1bc      	b.n	7568 <__aeabi_ddiv+0x44c>
    71ee:	0030      	movs	r0, r6
    71f0:	f001 f99c 	bl	852c <__clzsi2>
    71f4:	0003      	movs	r3, r0
    71f6:	3b0b      	subs	r3, #11
    71f8:	2b1c      	cmp	r3, #28
    71fa:	dd00      	ble.n	71fe <__aeabi_ddiv+0xe2>
    71fc:	e1ac      	b.n	7558 <__aeabi_ddiv+0x43c>
    71fe:	221d      	movs	r2, #29
    7200:	1ad3      	subs	r3, r2, r3
    7202:	465a      	mov	r2, fp
    7204:	0001      	movs	r1, r0
    7206:	40da      	lsrs	r2, r3
    7208:	3908      	subs	r1, #8
    720a:	408e      	lsls	r6, r1
    720c:	0013      	movs	r3, r2
    720e:	4333      	orrs	r3, r6
    7210:	4699      	mov	r9, r3
    7212:	465b      	mov	r3, fp
    7214:	408b      	lsls	r3, r1
    7216:	4698      	mov	r8, r3
    7218:	2300      	movs	r3, #0
    721a:	4c3c      	ldr	r4, [pc, #240]	; (730c <__aeabi_ddiv+0x1f0>)
    721c:	2600      	movs	r6, #0
    721e:	1a24      	subs	r4, r4, r0
    7220:	9303      	str	r3, [sp, #12]
    7222:	e79f      	b.n	7164 <__aeabi_ddiv+0x48>
    7224:	4651      	mov	r1, sl
    7226:	465a      	mov	r2, fp
    7228:	4311      	orrs	r1, r2
    722a:	d129      	bne.n	7280 <__aeabi_ddiv+0x164>
    722c:	2200      	movs	r2, #0
    722e:	4693      	mov	fp, r2
    7230:	3202      	adds	r2, #2
    7232:	e7b1      	b.n	7198 <__aeabi_ddiv+0x7c>
    7234:	4659      	mov	r1, fp
    7236:	4301      	orrs	r1, r0
    7238:	d01e      	beq.n	7278 <__aeabi_ddiv+0x15c>
    723a:	465b      	mov	r3, fp
    723c:	2b00      	cmp	r3, #0
    723e:	d100      	bne.n	7242 <__aeabi_ddiv+0x126>
    7240:	e19e      	b.n	7580 <__aeabi_ddiv+0x464>
    7242:	4658      	mov	r0, fp
    7244:	f001 f972 	bl	852c <__clzsi2>
    7248:	0003      	movs	r3, r0
    724a:	3b0b      	subs	r3, #11
    724c:	2b1c      	cmp	r3, #28
    724e:	dd00      	ble.n	7252 <__aeabi_ddiv+0x136>
    7250:	e18f      	b.n	7572 <__aeabi_ddiv+0x456>
    7252:	0002      	movs	r2, r0
    7254:	4659      	mov	r1, fp
    7256:	3a08      	subs	r2, #8
    7258:	4091      	lsls	r1, r2
    725a:	468b      	mov	fp, r1
    725c:	211d      	movs	r1, #29
    725e:	1acb      	subs	r3, r1, r3
    7260:	4651      	mov	r1, sl
    7262:	40d9      	lsrs	r1, r3
    7264:	000b      	movs	r3, r1
    7266:	4659      	mov	r1, fp
    7268:	430b      	orrs	r3, r1
    726a:	4651      	mov	r1, sl
    726c:	469b      	mov	fp, r3
    726e:	4091      	lsls	r1, r2
    7270:	4b26      	ldr	r3, [pc, #152]	; (730c <__aeabi_ddiv+0x1f0>)
    7272:	2200      	movs	r2, #0
    7274:	1a1b      	subs	r3, r3, r0
    7276:	e78f      	b.n	7198 <__aeabi_ddiv+0x7c>
    7278:	2300      	movs	r3, #0
    727a:	2201      	movs	r2, #1
    727c:	469b      	mov	fp, r3
    727e:	e78b      	b.n	7198 <__aeabi_ddiv+0x7c>
    7280:	4651      	mov	r1, sl
    7282:	2203      	movs	r2, #3
    7284:	e788      	b.n	7198 <__aeabi_ddiv+0x7c>
    7286:	2300      	movs	r3, #0
    7288:	4698      	mov	r8, r3
    728a:	3301      	adds	r3, #1
    728c:	2604      	movs	r6, #4
    728e:	2400      	movs	r4, #0
    7290:	9303      	str	r3, [sp, #12]
    7292:	e767      	b.n	7164 <__aeabi_ddiv+0x48>
    7294:	2303      	movs	r3, #3
    7296:	46b1      	mov	r9, r6
    7298:	9303      	str	r3, [sp, #12]
    729a:	260c      	movs	r6, #12
    729c:	e762      	b.n	7164 <__aeabi_ddiv+0x48>
    729e:	2a03      	cmp	r2, #3
    72a0:	d100      	bne.n	72a4 <__aeabi_ddiv+0x188>
    72a2:	e25c      	b.n	775e <__aeabi_ddiv+0x642>
    72a4:	9b01      	ldr	r3, [sp, #4]
    72a6:	2a01      	cmp	r2, #1
    72a8:	d000      	beq.n	72ac <__aeabi_ddiv+0x190>
    72aa:	e1e4      	b.n	7676 <__aeabi_ddiv+0x55a>
    72ac:	4013      	ands	r3, r2
    72ae:	469c      	mov	ip, r3
    72b0:	2300      	movs	r3, #0
    72b2:	2400      	movs	r4, #0
    72b4:	2200      	movs	r2, #0
    72b6:	4698      	mov	r8, r3
    72b8:	2100      	movs	r1, #0
    72ba:	0312      	lsls	r2, r2, #12
    72bc:	0b13      	lsrs	r3, r2, #12
    72be:	0d0a      	lsrs	r2, r1, #20
    72c0:	0512      	lsls	r2, r2, #20
    72c2:	431a      	orrs	r2, r3
    72c4:	0523      	lsls	r3, r4, #20
    72c6:	4c12      	ldr	r4, [pc, #72]	; (7310 <__aeabi_ddiv+0x1f4>)
    72c8:	4640      	mov	r0, r8
    72ca:	4022      	ands	r2, r4
    72cc:	4313      	orrs	r3, r2
    72ce:	4662      	mov	r2, ip
    72d0:	005b      	lsls	r3, r3, #1
    72d2:	07d2      	lsls	r2, r2, #31
    72d4:	085b      	lsrs	r3, r3, #1
    72d6:	4313      	orrs	r3, r2
    72d8:	0019      	movs	r1, r3
    72da:	b007      	add	sp, #28
    72dc:	bc3c      	pop	{r2, r3, r4, r5}
    72de:	4690      	mov	r8, r2
    72e0:	4699      	mov	r9, r3
    72e2:	46a2      	mov	sl, r4
    72e4:	46ab      	mov	fp, r5
    72e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72e8:	2300      	movs	r3, #0
    72ea:	2280      	movs	r2, #128	; 0x80
    72ec:	469c      	mov	ip, r3
    72ee:	0312      	lsls	r2, r2, #12
    72f0:	4698      	mov	r8, r3
    72f2:	4c03      	ldr	r4, [pc, #12]	; (7300 <__aeabi_ddiv+0x1e4>)
    72f4:	e7e0      	b.n	72b8 <__aeabi_ddiv+0x19c>
    72f6:	2300      	movs	r3, #0
    72f8:	4c01      	ldr	r4, [pc, #4]	; (7300 <__aeabi_ddiv+0x1e4>)
    72fa:	2200      	movs	r2, #0
    72fc:	4698      	mov	r8, r3
    72fe:	e7db      	b.n	72b8 <__aeabi_ddiv+0x19c>
    7300:	000007ff 	.word	0x000007ff
    7304:	fffffc01 	.word	0xfffffc01
    7308:	00015074 	.word	0x00015074
    730c:	fffffc0d 	.word	0xfffffc0d
    7310:	800fffff 	.word	0x800fffff
    7314:	45d9      	cmp	r9, fp
    7316:	d900      	bls.n	731a <__aeabi_ddiv+0x1fe>
    7318:	e139      	b.n	758e <__aeabi_ddiv+0x472>
    731a:	d100      	bne.n	731e <__aeabi_ddiv+0x202>
    731c:	e134      	b.n	7588 <__aeabi_ddiv+0x46c>
    731e:	2300      	movs	r3, #0
    7320:	4646      	mov	r6, r8
    7322:	464d      	mov	r5, r9
    7324:	469a      	mov	sl, r3
    7326:	3c01      	subs	r4, #1
    7328:	465b      	mov	r3, fp
    732a:	0e0a      	lsrs	r2, r1, #24
    732c:	021b      	lsls	r3, r3, #8
    732e:	431a      	orrs	r2, r3
    7330:	020b      	lsls	r3, r1, #8
    7332:	0c17      	lsrs	r7, r2, #16
    7334:	9303      	str	r3, [sp, #12]
    7336:	0413      	lsls	r3, r2, #16
    7338:	0c1b      	lsrs	r3, r3, #16
    733a:	0039      	movs	r1, r7
    733c:	0028      	movs	r0, r5
    733e:	4690      	mov	r8, r2
    7340:	9301      	str	r3, [sp, #4]
    7342:	f7ff f813 	bl	636c <__udivsi3>
    7346:	0002      	movs	r2, r0
    7348:	9b01      	ldr	r3, [sp, #4]
    734a:	4683      	mov	fp, r0
    734c:	435a      	muls	r2, r3
    734e:	0028      	movs	r0, r5
    7350:	0039      	movs	r1, r7
    7352:	4691      	mov	r9, r2
    7354:	f7ff f890 	bl	6478 <__aeabi_uidivmod>
    7358:	0c35      	lsrs	r5, r6, #16
    735a:	0409      	lsls	r1, r1, #16
    735c:	430d      	orrs	r5, r1
    735e:	45a9      	cmp	r9, r5
    7360:	d90d      	bls.n	737e <__aeabi_ddiv+0x262>
    7362:	465b      	mov	r3, fp
    7364:	4445      	add	r5, r8
    7366:	3b01      	subs	r3, #1
    7368:	45a8      	cmp	r8, r5
    736a:	d900      	bls.n	736e <__aeabi_ddiv+0x252>
    736c:	e13a      	b.n	75e4 <__aeabi_ddiv+0x4c8>
    736e:	45a9      	cmp	r9, r5
    7370:	d800      	bhi.n	7374 <__aeabi_ddiv+0x258>
    7372:	e137      	b.n	75e4 <__aeabi_ddiv+0x4c8>
    7374:	2302      	movs	r3, #2
    7376:	425b      	negs	r3, r3
    7378:	469c      	mov	ip, r3
    737a:	4445      	add	r5, r8
    737c:	44e3      	add	fp, ip
    737e:	464b      	mov	r3, r9
    7380:	1aeb      	subs	r3, r5, r3
    7382:	0039      	movs	r1, r7
    7384:	0018      	movs	r0, r3
    7386:	9304      	str	r3, [sp, #16]
    7388:	f7fe fff0 	bl	636c <__udivsi3>
    738c:	9b01      	ldr	r3, [sp, #4]
    738e:	0005      	movs	r5, r0
    7390:	4343      	muls	r3, r0
    7392:	0039      	movs	r1, r7
    7394:	9804      	ldr	r0, [sp, #16]
    7396:	4699      	mov	r9, r3
    7398:	f7ff f86e 	bl	6478 <__aeabi_uidivmod>
    739c:	0433      	lsls	r3, r6, #16
    739e:	0409      	lsls	r1, r1, #16
    73a0:	0c1b      	lsrs	r3, r3, #16
    73a2:	430b      	orrs	r3, r1
    73a4:	4599      	cmp	r9, r3
    73a6:	d909      	bls.n	73bc <__aeabi_ddiv+0x2a0>
    73a8:	4443      	add	r3, r8
    73aa:	1e6a      	subs	r2, r5, #1
    73ac:	4598      	cmp	r8, r3
    73ae:	d900      	bls.n	73b2 <__aeabi_ddiv+0x296>
    73b0:	e11a      	b.n	75e8 <__aeabi_ddiv+0x4cc>
    73b2:	4599      	cmp	r9, r3
    73b4:	d800      	bhi.n	73b8 <__aeabi_ddiv+0x29c>
    73b6:	e117      	b.n	75e8 <__aeabi_ddiv+0x4cc>
    73b8:	3d02      	subs	r5, #2
    73ba:	4443      	add	r3, r8
    73bc:	464a      	mov	r2, r9
    73be:	1a9b      	subs	r3, r3, r2
    73c0:	465a      	mov	r2, fp
    73c2:	0412      	lsls	r2, r2, #16
    73c4:	432a      	orrs	r2, r5
    73c6:	9903      	ldr	r1, [sp, #12]
    73c8:	4693      	mov	fp, r2
    73ca:	0c10      	lsrs	r0, r2, #16
    73cc:	0c0a      	lsrs	r2, r1, #16
    73ce:	4691      	mov	r9, r2
    73d0:	0409      	lsls	r1, r1, #16
    73d2:	465a      	mov	r2, fp
    73d4:	0c09      	lsrs	r1, r1, #16
    73d6:	464e      	mov	r6, r9
    73d8:	000d      	movs	r5, r1
    73da:	0412      	lsls	r2, r2, #16
    73dc:	0c12      	lsrs	r2, r2, #16
    73de:	4345      	muls	r5, r0
    73e0:	9105      	str	r1, [sp, #20]
    73e2:	4351      	muls	r1, r2
    73e4:	4372      	muls	r2, r6
    73e6:	4370      	muls	r0, r6
    73e8:	1952      	adds	r2, r2, r5
    73ea:	0c0e      	lsrs	r6, r1, #16
    73ec:	18b2      	adds	r2, r6, r2
    73ee:	4295      	cmp	r5, r2
    73f0:	d903      	bls.n	73fa <__aeabi_ddiv+0x2de>
    73f2:	2580      	movs	r5, #128	; 0x80
    73f4:	026d      	lsls	r5, r5, #9
    73f6:	46ac      	mov	ip, r5
    73f8:	4460      	add	r0, ip
    73fa:	0c15      	lsrs	r5, r2, #16
    73fc:	0409      	lsls	r1, r1, #16
    73fe:	0412      	lsls	r2, r2, #16
    7400:	0c09      	lsrs	r1, r1, #16
    7402:	1828      	adds	r0, r5, r0
    7404:	1852      	adds	r2, r2, r1
    7406:	4283      	cmp	r3, r0
    7408:	d200      	bcs.n	740c <__aeabi_ddiv+0x2f0>
    740a:	e0ce      	b.n	75aa <__aeabi_ddiv+0x48e>
    740c:	d100      	bne.n	7410 <__aeabi_ddiv+0x2f4>
    740e:	e0c8      	b.n	75a2 <__aeabi_ddiv+0x486>
    7410:	1a1d      	subs	r5, r3, r0
    7412:	4653      	mov	r3, sl
    7414:	1a9e      	subs	r6, r3, r2
    7416:	45b2      	cmp	sl, r6
    7418:	4192      	sbcs	r2, r2
    741a:	4252      	negs	r2, r2
    741c:	1aab      	subs	r3, r5, r2
    741e:	469a      	mov	sl, r3
    7420:	4598      	cmp	r8, r3
    7422:	d100      	bne.n	7426 <__aeabi_ddiv+0x30a>
    7424:	e117      	b.n	7656 <__aeabi_ddiv+0x53a>
    7426:	0039      	movs	r1, r7
    7428:	0018      	movs	r0, r3
    742a:	f7fe ff9f 	bl	636c <__udivsi3>
    742e:	9b01      	ldr	r3, [sp, #4]
    7430:	0005      	movs	r5, r0
    7432:	4343      	muls	r3, r0
    7434:	0039      	movs	r1, r7
    7436:	4650      	mov	r0, sl
    7438:	9304      	str	r3, [sp, #16]
    743a:	f7ff f81d 	bl	6478 <__aeabi_uidivmod>
    743e:	9804      	ldr	r0, [sp, #16]
    7440:	040b      	lsls	r3, r1, #16
    7442:	0c31      	lsrs	r1, r6, #16
    7444:	4319      	orrs	r1, r3
    7446:	4288      	cmp	r0, r1
    7448:	d909      	bls.n	745e <__aeabi_ddiv+0x342>
    744a:	4441      	add	r1, r8
    744c:	1e6b      	subs	r3, r5, #1
    744e:	4588      	cmp	r8, r1
    7450:	d900      	bls.n	7454 <__aeabi_ddiv+0x338>
    7452:	e107      	b.n	7664 <__aeabi_ddiv+0x548>
    7454:	4288      	cmp	r0, r1
    7456:	d800      	bhi.n	745a <__aeabi_ddiv+0x33e>
    7458:	e104      	b.n	7664 <__aeabi_ddiv+0x548>
    745a:	3d02      	subs	r5, #2
    745c:	4441      	add	r1, r8
    745e:	9b04      	ldr	r3, [sp, #16]
    7460:	1acb      	subs	r3, r1, r3
    7462:	0018      	movs	r0, r3
    7464:	0039      	movs	r1, r7
    7466:	9304      	str	r3, [sp, #16]
    7468:	f7fe ff80 	bl	636c <__udivsi3>
    746c:	9b01      	ldr	r3, [sp, #4]
    746e:	4682      	mov	sl, r0
    7470:	4343      	muls	r3, r0
    7472:	0039      	movs	r1, r7
    7474:	9804      	ldr	r0, [sp, #16]
    7476:	9301      	str	r3, [sp, #4]
    7478:	f7fe fffe 	bl	6478 <__aeabi_uidivmod>
    747c:	9801      	ldr	r0, [sp, #4]
    747e:	040b      	lsls	r3, r1, #16
    7480:	0431      	lsls	r1, r6, #16
    7482:	0c09      	lsrs	r1, r1, #16
    7484:	4319      	orrs	r1, r3
    7486:	4288      	cmp	r0, r1
    7488:	d90d      	bls.n	74a6 <__aeabi_ddiv+0x38a>
    748a:	4653      	mov	r3, sl
    748c:	4441      	add	r1, r8
    748e:	3b01      	subs	r3, #1
    7490:	4588      	cmp	r8, r1
    7492:	d900      	bls.n	7496 <__aeabi_ddiv+0x37a>
    7494:	e0e8      	b.n	7668 <__aeabi_ddiv+0x54c>
    7496:	4288      	cmp	r0, r1
    7498:	d800      	bhi.n	749c <__aeabi_ddiv+0x380>
    749a:	e0e5      	b.n	7668 <__aeabi_ddiv+0x54c>
    749c:	2302      	movs	r3, #2
    749e:	425b      	negs	r3, r3
    74a0:	469c      	mov	ip, r3
    74a2:	4441      	add	r1, r8
    74a4:	44e2      	add	sl, ip
    74a6:	9b01      	ldr	r3, [sp, #4]
    74a8:	042d      	lsls	r5, r5, #16
    74aa:	1ace      	subs	r6, r1, r3
    74ac:	4651      	mov	r1, sl
    74ae:	4329      	orrs	r1, r5
    74b0:	9d05      	ldr	r5, [sp, #20]
    74b2:	464f      	mov	r7, r9
    74b4:	002a      	movs	r2, r5
    74b6:	040b      	lsls	r3, r1, #16
    74b8:	0c08      	lsrs	r0, r1, #16
    74ba:	0c1b      	lsrs	r3, r3, #16
    74bc:	435a      	muls	r2, r3
    74be:	4345      	muls	r5, r0
    74c0:	437b      	muls	r3, r7
    74c2:	4378      	muls	r0, r7
    74c4:	195b      	adds	r3, r3, r5
    74c6:	0c17      	lsrs	r7, r2, #16
    74c8:	18fb      	adds	r3, r7, r3
    74ca:	429d      	cmp	r5, r3
    74cc:	d903      	bls.n	74d6 <__aeabi_ddiv+0x3ba>
    74ce:	2580      	movs	r5, #128	; 0x80
    74d0:	026d      	lsls	r5, r5, #9
    74d2:	46ac      	mov	ip, r5
    74d4:	4460      	add	r0, ip
    74d6:	0c1d      	lsrs	r5, r3, #16
    74d8:	0412      	lsls	r2, r2, #16
    74da:	041b      	lsls	r3, r3, #16
    74dc:	0c12      	lsrs	r2, r2, #16
    74de:	1828      	adds	r0, r5, r0
    74e0:	189b      	adds	r3, r3, r2
    74e2:	4286      	cmp	r6, r0
    74e4:	d200      	bcs.n	74e8 <__aeabi_ddiv+0x3cc>
    74e6:	e093      	b.n	7610 <__aeabi_ddiv+0x4f4>
    74e8:	d100      	bne.n	74ec <__aeabi_ddiv+0x3d0>
    74ea:	e08e      	b.n	760a <__aeabi_ddiv+0x4ee>
    74ec:	2301      	movs	r3, #1
    74ee:	4319      	orrs	r1, r3
    74f0:	4ba0      	ldr	r3, [pc, #640]	; (7774 <__aeabi_ddiv+0x658>)
    74f2:	18e3      	adds	r3, r4, r3
    74f4:	2b00      	cmp	r3, #0
    74f6:	dc00      	bgt.n	74fa <__aeabi_ddiv+0x3de>
    74f8:	e099      	b.n	762e <__aeabi_ddiv+0x512>
    74fa:	074a      	lsls	r2, r1, #29
    74fc:	d000      	beq.n	7500 <__aeabi_ddiv+0x3e4>
    74fe:	e09e      	b.n	763e <__aeabi_ddiv+0x522>
    7500:	465a      	mov	r2, fp
    7502:	01d2      	lsls	r2, r2, #7
    7504:	d506      	bpl.n	7514 <__aeabi_ddiv+0x3f8>
    7506:	465a      	mov	r2, fp
    7508:	4b9b      	ldr	r3, [pc, #620]	; (7778 <__aeabi_ddiv+0x65c>)
    750a:	401a      	ands	r2, r3
    750c:	2380      	movs	r3, #128	; 0x80
    750e:	4693      	mov	fp, r2
    7510:	00db      	lsls	r3, r3, #3
    7512:	18e3      	adds	r3, r4, r3
    7514:	4a99      	ldr	r2, [pc, #612]	; (777c <__aeabi_ddiv+0x660>)
    7516:	4293      	cmp	r3, r2
    7518:	dd68      	ble.n	75ec <__aeabi_ddiv+0x4d0>
    751a:	2301      	movs	r3, #1
    751c:	9a02      	ldr	r2, [sp, #8]
    751e:	4c98      	ldr	r4, [pc, #608]	; (7780 <__aeabi_ddiv+0x664>)
    7520:	401a      	ands	r2, r3
    7522:	2300      	movs	r3, #0
    7524:	4694      	mov	ip, r2
    7526:	4698      	mov	r8, r3
    7528:	2200      	movs	r2, #0
    752a:	e6c5      	b.n	72b8 <__aeabi_ddiv+0x19c>
    752c:	2280      	movs	r2, #128	; 0x80
    752e:	464b      	mov	r3, r9
    7530:	0312      	lsls	r2, r2, #12
    7532:	4213      	tst	r3, r2
    7534:	d00a      	beq.n	754c <__aeabi_ddiv+0x430>
    7536:	465b      	mov	r3, fp
    7538:	4213      	tst	r3, r2
    753a:	d106      	bne.n	754a <__aeabi_ddiv+0x42e>
    753c:	431a      	orrs	r2, r3
    753e:	0312      	lsls	r2, r2, #12
    7540:	0b12      	lsrs	r2, r2, #12
    7542:	46ac      	mov	ip, r5
    7544:	4688      	mov	r8, r1
    7546:	4c8e      	ldr	r4, [pc, #568]	; (7780 <__aeabi_ddiv+0x664>)
    7548:	e6b6      	b.n	72b8 <__aeabi_ddiv+0x19c>
    754a:	464b      	mov	r3, r9
    754c:	431a      	orrs	r2, r3
    754e:	0312      	lsls	r2, r2, #12
    7550:	0b12      	lsrs	r2, r2, #12
    7552:	46bc      	mov	ip, r7
    7554:	4c8a      	ldr	r4, [pc, #552]	; (7780 <__aeabi_ddiv+0x664>)
    7556:	e6af      	b.n	72b8 <__aeabi_ddiv+0x19c>
    7558:	0003      	movs	r3, r0
    755a:	465a      	mov	r2, fp
    755c:	3b28      	subs	r3, #40	; 0x28
    755e:	409a      	lsls	r2, r3
    7560:	2300      	movs	r3, #0
    7562:	4691      	mov	r9, r2
    7564:	4698      	mov	r8, r3
    7566:	e657      	b.n	7218 <__aeabi_ddiv+0xfc>
    7568:	4658      	mov	r0, fp
    756a:	f000 ffdf 	bl	852c <__clzsi2>
    756e:	3020      	adds	r0, #32
    7570:	e640      	b.n	71f4 <__aeabi_ddiv+0xd8>
    7572:	0003      	movs	r3, r0
    7574:	4652      	mov	r2, sl
    7576:	3b28      	subs	r3, #40	; 0x28
    7578:	409a      	lsls	r2, r3
    757a:	2100      	movs	r1, #0
    757c:	4693      	mov	fp, r2
    757e:	e677      	b.n	7270 <__aeabi_ddiv+0x154>
    7580:	f000 ffd4 	bl	852c <__clzsi2>
    7584:	3020      	adds	r0, #32
    7586:	e65f      	b.n	7248 <__aeabi_ddiv+0x12c>
    7588:	4588      	cmp	r8, r1
    758a:	d200      	bcs.n	758e <__aeabi_ddiv+0x472>
    758c:	e6c7      	b.n	731e <__aeabi_ddiv+0x202>
    758e:	464b      	mov	r3, r9
    7590:	07de      	lsls	r6, r3, #31
    7592:	085d      	lsrs	r5, r3, #1
    7594:	4643      	mov	r3, r8
    7596:	085b      	lsrs	r3, r3, #1
    7598:	431e      	orrs	r6, r3
    759a:	4643      	mov	r3, r8
    759c:	07db      	lsls	r3, r3, #31
    759e:	469a      	mov	sl, r3
    75a0:	e6c2      	b.n	7328 <__aeabi_ddiv+0x20c>
    75a2:	2500      	movs	r5, #0
    75a4:	4592      	cmp	sl, r2
    75a6:	d300      	bcc.n	75aa <__aeabi_ddiv+0x48e>
    75a8:	e733      	b.n	7412 <__aeabi_ddiv+0x2f6>
    75aa:	9e03      	ldr	r6, [sp, #12]
    75ac:	4659      	mov	r1, fp
    75ae:	46b4      	mov	ip, r6
    75b0:	44e2      	add	sl, ip
    75b2:	45b2      	cmp	sl, r6
    75b4:	41ad      	sbcs	r5, r5
    75b6:	426d      	negs	r5, r5
    75b8:	4445      	add	r5, r8
    75ba:	18eb      	adds	r3, r5, r3
    75bc:	3901      	subs	r1, #1
    75be:	4598      	cmp	r8, r3
    75c0:	d207      	bcs.n	75d2 <__aeabi_ddiv+0x4b6>
    75c2:	4298      	cmp	r0, r3
    75c4:	d900      	bls.n	75c8 <__aeabi_ddiv+0x4ac>
    75c6:	e07f      	b.n	76c8 <__aeabi_ddiv+0x5ac>
    75c8:	d100      	bne.n	75cc <__aeabi_ddiv+0x4b0>
    75ca:	e0bc      	b.n	7746 <__aeabi_ddiv+0x62a>
    75cc:	1a1d      	subs	r5, r3, r0
    75ce:	468b      	mov	fp, r1
    75d0:	e71f      	b.n	7412 <__aeabi_ddiv+0x2f6>
    75d2:	4598      	cmp	r8, r3
    75d4:	d1fa      	bne.n	75cc <__aeabi_ddiv+0x4b0>
    75d6:	9d03      	ldr	r5, [sp, #12]
    75d8:	4555      	cmp	r5, sl
    75da:	d9f2      	bls.n	75c2 <__aeabi_ddiv+0x4a6>
    75dc:	4643      	mov	r3, r8
    75de:	468b      	mov	fp, r1
    75e0:	1a1d      	subs	r5, r3, r0
    75e2:	e716      	b.n	7412 <__aeabi_ddiv+0x2f6>
    75e4:	469b      	mov	fp, r3
    75e6:	e6ca      	b.n	737e <__aeabi_ddiv+0x262>
    75e8:	0015      	movs	r5, r2
    75ea:	e6e7      	b.n	73bc <__aeabi_ddiv+0x2a0>
    75ec:	465a      	mov	r2, fp
    75ee:	08c9      	lsrs	r1, r1, #3
    75f0:	0752      	lsls	r2, r2, #29
    75f2:	430a      	orrs	r2, r1
    75f4:	055b      	lsls	r3, r3, #21
    75f6:	4690      	mov	r8, r2
    75f8:	0d5c      	lsrs	r4, r3, #21
    75fa:	465a      	mov	r2, fp
    75fc:	2301      	movs	r3, #1
    75fe:	9902      	ldr	r1, [sp, #8]
    7600:	0252      	lsls	r2, r2, #9
    7602:	4019      	ands	r1, r3
    7604:	0b12      	lsrs	r2, r2, #12
    7606:	468c      	mov	ip, r1
    7608:	e656      	b.n	72b8 <__aeabi_ddiv+0x19c>
    760a:	2b00      	cmp	r3, #0
    760c:	d100      	bne.n	7610 <__aeabi_ddiv+0x4f4>
    760e:	e76f      	b.n	74f0 <__aeabi_ddiv+0x3d4>
    7610:	4446      	add	r6, r8
    7612:	1e4a      	subs	r2, r1, #1
    7614:	45b0      	cmp	r8, r6
    7616:	d929      	bls.n	766c <__aeabi_ddiv+0x550>
    7618:	0011      	movs	r1, r2
    761a:	4286      	cmp	r6, r0
    761c:	d000      	beq.n	7620 <__aeabi_ddiv+0x504>
    761e:	e765      	b.n	74ec <__aeabi_ddiv+0x3d0>
    7620:	9a03      	ldr	r2, [sp, #12]
    7622:	4293      	cmp	r3, r2
    7624:	d000      	beq.n	7628 <__aeabi_ddiv+0x50c>
    7626:	e761      	b.n	74ec <__aeabi_ddiv+0x3d0>
    7628:	e762      	b.n	74f0 <__aeabi_ddiv+0x3d4>
    762a:	2101      	movs	r1, #1
    762c:	4249      	negs	r1, r1
    762e:	2001      	movs	r0, #1
    7630:	1ac2      	subs	r2, r0, r3
    7632:	2a38      	cmp	r2, #56	; 0x38
    7634:	dd21      	ble.n	767a <__aeabi_ddiv+0x55e>
    7636:	9b02      	ldr	r3, [sp, #8]
    7638:	4003      	ands	r3, r0
    763a:	469c      	mov	ip, r3
    763c:	e638      	b.n	72b0 <__aeabi_ddiv+0x194>
    763e:	220f      	movs	r2, #15
    7640:	400a      	ands	r2, r1
    7642:	2a04      	cmp	r2, #4
    7644:	d100      	bne.n	7648 <__aeabi_ddiv+0x52c>
    7646:	e75b      	b.n	7500 <__aeabi_ddiv+0x3e4>
    7648:	000a      	movs	r2, r1
    764a:	1d11      	adds	r1, r2, #4
    764c:	4291      	cmp	r1, r2
    764e:	4192      	sbcs	r2, r2
    7650:	4252      	negs	r2, r2
    7652:	4493      	add	fp, r2
    7654:	e754      	b.n	7500 <__aeabi_ddiv+0x3e4>
    7656:	4b47      	ldr	r3, [pc, #284]	; (7774 <__aeabi_ddiv+0x658>)
    7658:	18e3      	adds	r3, r4, r3
    765a:	2b00      	cmp	r3, #0
    765c:	dde5      	ble.n	762a <__aeabi_ddiv+0x50e>
    765e:	2201      	movs	r2, #1
    7660:	4252      	negs	r2, r2
    7662:	e7f2      	b.n	764a <__aeabi_ddiv+0x52e>
    7664:	001d      	movs	r5, r3
    7666:	e6fa      	b.n	745e <__aeabi_ddiv+0x342>
    7668:	469a      	mov	sl, r3
    766a:	e71c      	b.n	74a6 <__aeabi_ddiv+0x38a>
    766c:	42b0      	cmp	r0, r6
    766e:	d839      	bhi.n	76e4 <__aeabi_ddiv+0x5c8>
    7670:	d06e      	beq.n	7750 <__aeabi_ddiv+0x634>
    7672:	0011      	movs	r1, r2
    7674:	e73a      	b.n	74ec <__aeabi_ddiv+0x3d0>
    7676:	9302      	str	r3, [sp, #8]
    7678:	e73a      	b.n	74f0 <__aeabi_ddiv+0x3d4>
    767a:	2a1f      	cmp	r2, #31
    767c:	dc3c      	bgt.n	76f8 <__aeabi_ddiv+0x5dc>
    767e:	2320      	movs	r3, #32
    7680:	1a9b      	subs	r3, r3, r2
    7682:	000c      	movs	r4, r1
    7684:	4658      	mov	r0, fp
    7686:	4099      	lsls	r1, r3
    7688:	4098      	lsls	r0, r3
    768a:	1e4b      	subs	r3, r1, #1
    768c:	4199      	sbcs	r1, r3
    768e:	465b      	mov	r3, fp
    7690:	40d4      	lsrs	r4, r2
    7692:	40d3      	lsrs	r3, r2
    7694:	4320      	orrs	r0, r4
    7696:	4308      	orrs	r0, r1
    7698:	001a      	movs	r2, r3
    769a:	0743      	lsls	r3, r0, #29
    769c:	d009      	beq.n	76b2 <__aeabi_ddiv+0x596>
    769e:	230f      	movs	r3, #15
    76a0:	4003      	ands	r3, r0
    76a2:	2b04      	cmp	r3, #4
    76a4:	d005      	beq.n	76b2 <__aeabi_ddiv+0x596>
    76a6:	0001      	movs	r1, r0
    76a8:	1d08      	adds	r0, r1, #4
    76aa:	4288      	cmp	r0, r1
    76ac:	419b      	sbcs	r3, r3
    76ae:	425b      	negs	r3, r3
    76b0:	18d2      	adds	r2, r2, r3
    76b2:	0213      	lsls	r3, r2, #8
    76b4:	d53a      	bpl.n	772c <__aeabi_ddiv+0x610>
    76b6:	2301      	movs	r3, #1
    76b8:	9a02      	ldr	r2, [sp, #8]
    76ba:	2401      	movs	r4, #1
    76bc:	401a      	ands	r2, r3
    76be:	2300      	movs	r3, #0
    76c0:	4694      	mov	ip, r2
    76c2:	4698      	mov	r8, r3
    76c4:	2200      	movs	r2, #0
    76c6:	e5f7      	b.n	72b8 <__aeabi_ddiv+0x19c>
    76c8:	2102      	movs	r1, #2
    76ca:	4249      	negs	r1, r1
    76cc:	468c      	mov	ip, r1
    76ce:	9d03      	ldr	r5, [sp, #12]
    76d0:	44e3      	add	fp, ip
    76d2:	46ac      	mov	ip, r5
    76d4:	44e2      	add	sl, ip
    76d6:	45aa      	cmp	sl, r5
    76d8:	41ad      	sbcs	r5, r5
    76da:	426d      	negs	r5, r5
    76dc:	4445      	add	r5, r8
    76de:	18ed      	adds	r5, r5, r3
    76e0:	1a2d      	subs	r5, r5, r0
    76e2:	e696      	b.n	7412 <__aeabi_ddiv+0x2f6>
    76e4:	1e8a      	subs	r2, r1, #2
    76e6:	9903      	ldr	r1, [sp, #12]
    76e8:	004d      	lsls	r5, r1, #1
    76ea:	428d      	cmp	r5, r1
    76ec:	4189      	sbcs	r1, r1
    76ee:	4249      	negs	r1, r1
    76f0:	4441      	add	r1, r8
    76f2:	1876      	adds	r6, r6, r1
    76f4:	9503      	str	r5, [sp, #12]
    76f6:	e78f      	b.n	7618 <__aeabi_ddiv+0x4fc>
    76f8:	201f      	movs	r0, #31
    76fa:	4240      	negs	r0, r0
    76fc:	1ac3      	subs	r3, r0, r3
    76fe:	4658      	mov	r0, fp
    7700:	40d8      	lsrs	r0, r3
    7702:	0003      	movs	r3, r0
    7704:	2a20      	cmp	r2, #32
    7706:	d028      	beq.n	775a <__aeabi_ddiv+0x63e>
    7708:	2040      	movs	r0, #64	; 0x40
    770a:	465d      	mov	r5, fp
    770c:	1a82      	subs	r2, r0, r2
    770e:	4095      	lsls	r5, r2
    7710:	4329      	orrs	r1, r5
    7712:	1e4a      	subs	r2, r1, #1
    7714:	4191      	sbcs	r1, r2
    7716:	4319      	orrs	r1, r3
    7718:	2307      	movs	r3, #7
    771a:	2200      	movs	r2, #0
    771c:	400b      	ands	r3, r1
    771e:	d009      	beq.n	7734 <__aeabi_ddiv+0x618>
    7720:	230f      	movs	r3, #15
    7722:	2200      	movs	r2, #0
    7724:	400b      	ands	r3, r1
    7726:	0008      	movs	r0, r1
    7728:	2b04      	cmp	r3, #4
    772a:	d1bd      	bne.n	76a8 <__aeabi_ddiv+0x58c>
    772c:	0001      	movs	r1, r0
    772e:	0753      	lsls	r3, r2, #29
    7730:	0252      	lsls	r2, r2, #9
    7732:	0b12      	lsrs	r2, r2, #12
    7734:	08c9      	lsrs	r1, r1, #3
    7736:	4319      	orrs	r1, r3
    7738:	2301      	movs	r3, #1
    773a:	4688      	mov	r8, r1
    773c:	9902      	ldr	r1, [sp, #8]
    773e:	2400      	movs	r4, #0
    7740:	4019      	ands	r1, r3
    7742:	468c      	mov	ip, r1
    7744:	e5b8      	b.n	72b8 <__aeabi_ddiv+0x19c>
    7746:	4552      	cmp	r2, sl
    7748:	d8be      	bhi.n	76c8 <__aeabi_ddiv+0x5ac>
    774a:	468b      	mov	fp, r1
    774c:	2500      	movs	r5, #0
    774e:	e660      	b.n	7412 <__aeabi_ddiv+0x2f6>
    7750:	9d03      	ldr	r5, [sp, #12]
    7752:	429d      	cmp	r5, r3
    7754:	d3c6      	bcc.n	76e4 <__aeabi_ddiv+0x5c8>
    7756:	0011      	movs	r1, r2
    7758:	e762      	b.n	7620 <__aeabi_ddiv+0x504>
    775a:	2500      	movs	r5, #0
    775c:	e7d8      	b.n	7710 <__aeabi_ddiv+0x5f4>
    775e:	2280      	movs	r2, #128	; 0x80
    7760:	465b      	mov	r3, fp
    7762:	0312      	lsls	r2, r2, #12
    7764:	431a      	orrs	r2, r3
    7766:	9b01      	ldr	r3, [sp, #4]
    7768:	0312      	lsls	r2, r2, #12
    776a:	0b12      	lsrs	r2, r2, #12
    776c:	469c      	mov	ip, r3
    776e:	4688      	mov	r8, r1
    7770:	4c03      	ldr	r4, [pc, #12]	; (7780 <__aeabi_ddiv+0x664>)
    7772:	e5a1      	b.n	72b8 <__aeabi_ddiv+0x19c>
    7774:	000003ff 	.word	0x000003ff
    7778:	feffffff 	.word	0xfeffffff
    777c:	000007fe 	.word	0x000007fe
    7780:	000007ff 	.word	0x000007ff

00007784 <__aeabi_dmul>:
    7784:	b5f0      	push	{r4, r5, r6, r7, lr}
    7786:	4657      	mov	r7, sl
    7788:	4645      	mov	r5, r8
    778a:	46de      	mov	lr, fp
    778c:	464e      	mov	r6, r9
    778e:	b5e0      	push	{r5, r6, r7, lr}
    7790:	030c      	lsls	r4, r1, #12
    7792:	4698      	mov	r8, r3
    7794:	004e      	lsls	r6, r1, #1
    7796:	0b23      	lsrs	r3, r4, #12
    7798:	b087      	sub	sp, #28
    779a:	0007      	movs	r7, r0
    779c:	4692      	mov	sl, r2
    779e:	469b      	mov	fp, r3
    77a0:	0d76      	lsrs	r6, r6, #21
    77a2:	0fcd      	lsrs	r5, r1, #31
    77a4:	2e00      	cmp	r6, #0
    77a6:	d06b      	beq.n	7880 <__aeabi_dmul+0xfc>
    77a8:	4b6d      	ldr	r3, [pc, #436]	; (7960 <__aeabi_dmul+0x1dc>)
    77aa:	429e      	cmp	r6, r3
    77ac:	d035      	beq.n	781a <__aeabi_dmul+0x96>
    77ae:	2480      	movs	r4, #128	; 0x80
    77b0:	465b      	mov	r3, fp
    77b2:	0f42      	lsrs	r2, r0, #29
    77b4:	0424      	lsls	r4, r4, #16
    77b6:	00db      	lsls	r3, r3, #3
    77b8:	4314      	orrs	r4, r2
    77ba:	431c      	orrs	r4, r3
    77bc:	00c3      	lsls	r3, r0, #3
    77be:	4699      	mov	r9, r3
    77c0:	4b68      	ldr	r3, [pc, #416]	; (7964 <__aeabi_dmul+0x1e0>)
    77c2:	46a3      	mov	fp, r4
    77c4:	469c      	mov	ip, r3
    77c6:	2300      	movs	r3, #0
    77c8:	2700      	movs	r7, #0
    77ca:	4466      	add	r6, ip
    77cc:	9302      	str	r3, [sp, #8]
    77ce:	4643      	mov	r3, r8
    77d0:	031c      	lsls	r4, r3, #12
    77d2:	005a      	lsls	r2, r3, #1
    77d4:	0fdb      	lsrs	r3, r3, #31
    77d6:	4650      	mov	r0, sl
    77d8:	0b24      	lsrs	r4, r4, #12
    77da:	0d52      	lsrs	r2, r2, #21
    77dc:	4698      	mov	r8, r3
    77de:	d100      	bne.n	77e2 <__aeabi_dmul+0x5e>
    77e0:	e076      	b.n	78d0 <__aeabi_dmul+0x14c>
    77e2:	4b5f      	ldr	r3, [pc, #380]	; (7960 <__aeabi_dmul+0x1dc>)
    77e4:	429a      	cmp	r2, r3
    77e6:	d06d      	beq.n	78c4 <__aeabi_dmul+0x140>
    77e8:	2380      	movs	r3, #128	; 0x80
    77ea:	0f41      	lsrs	r1, r0, #29
    77ec:	041b      	lsls	r3, r3, #16
    77ee:	430b      	orrs	r3, r1
    77f0:	495c      	ldr	r1, [pc, #368]	; (7964 <__aeabi_dmul+0x1e0>)
    77f2:	00e4      	lsls	r4, r4, #3
    77f4:	468c      	mov	ip, r1
    77f6:	431c      	orrs	r4, r3
    77f8:	00c3      	lsls	r3, r0, #3
    77fa:	2000      	movs	r0, #0
    77fc:	4462      	add	r2, ip
    77fe:	4641      	mov	r1, r8
    7800:	18b6      	adds	r6, r6, r2
    7802:	4069      	eors	r1, r5
    7804:	1c72      	adds	r2, r6, #1
    7806:	9101      	str	r1, [sp, #4]
    7808:	4694      	mov	ip, r2
    780a:	4307      	orrs	r7, r0
    780c:	2f0f      	cmp	r7, #15
    780e:	d900      	bls.n	7812 <__aeabi_dmul+0x8e>
    7810:	e0b0      	b.n	7974 <__aeabi_dmul+0x1f0>
    7812:	4a55      	ldr	r2, [pc, #340]	; (7968 <__aeabi_dmul+0x1e4>)
    7814:	00bf      	lsls	r7, r7, #2
    7816:	59d2      	ldr	r2, [r2, r7]
    7818:	4697      	mov	pc, r2
    781a:	465b      	mov	r3, fp
    781c:	4303      	orrs	r3, r0
    781e:	4699      	mov	r9, r3
    7820:	d000      	beq.n	7824 <__aeabi_dmul+0xa0>
    7822:	e087      	b.n	7934 <__aeabi_dmul+0x1b0>
    7824:	2300      	movs	r3, #0
    7826:	469b      	mov	fp, r3
    7828:	3302      	adds	r3, #2
    782a:	2708      	movs	r7, #8
    782c:	9302      	str	r3, [sp, #8]
    782e:	e7ce      	b.n	77ce <__aeabi_dmul+0x4a>
    7830:	4642      	mov	r2, r8
    7832:	9201      	str	r2, [sp, #4]
    7834:	2802      	cmp	r0, #2
    7836:	d067      	beq.n	7908 <__aeabi_dmul+0x184>
    7838:	2803      	cmp	r0, #3
    783a:	d100      	bne.n	783e <__aeabi_dmul+0xba>
    783c:	e20e      	b.n	7c5c <__aeabi_dmul+0x4d8>
    783e:	2801      	cmp	r0, #1
    7840:	d000      	beq.n	7844 <__aeabi_dmul+0xc0>
    7842:	e162      	b.n	7b0a <__aeabi_dmul+0x386>
    7844:	2300      	movs	r3, #0
    7846:	2400      	movs	r4, #0
    7848:	2200      	movs	r2, #0
    784a:	4699      	mov	r9, r3
    784c:	9901      	ldr	r1, [sp, #4]
    784e:	4001      	ands	r1, r0
    7850:	b2cd      	uxtb	r5, r1
    7852:	2100      	movs	r1, #0
    7854:	0312      	lsls	r2, r2, #12
    7856:	0d0b      	lsrs	r3, r1, #20
    7858:	0b12      	lsrs	r2, r2, #12
    785a:	051b      	lsls	r3, r3, #20
    785c:	4313      	orrs	r3, r2
    785e:	4a43      	ldr	r2, [pc, #268]	; (796c <__aeabi_dmul+0x1e8>)
    7860:	0524      	lsls	r4, r4, #20
    7862:	4013      	ands	r3, r2
    7864:	431c      	orrs	r4, r3
    7866:	0064      	lsls	r4, r4, #1
    7868:	07ed      	lsls	r5, r5, #31
    786a:	0864      	lsrs	r4, r4, #1
    786c:	432c      	orrs	r4, r5
    786e:	4648      	mov	r0, r9
    7870:	0021      	movs	r1, r4
    7872:	b007      	add	sp, #28
    7874:	bc3c      	pop	{r2, r3, r4, r5}
    7876:	4690      	mov	r8, r2
    7878:	4699      	mov	r9, r3
    787a:	46a2      	mov	sl, r4
    787c:	46ab      	mov	fp, r5
    787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7880:	4303      	orrs	r3, r0
    7882:	4699      	mov	r9, r3
    7884:	d04f      	beq.n	7926 <__aeabi_dmul+0x1a2>
    7886:	465b      	mov	r3, fp
    7888:	2b00      	cmp	r3, #0
    788a:	d100      	bne.n	788e <__aeabi_dmul+0x10a>
    788c:	e189      	b.n	7ba2 <__aeabi_dmul+0x41e>
    788e:	4658      	mov	r0, fp
    7890:	f000 fe4c 	bl	852c <__clzsi2>
    7894:	0003      	movs	r3, r0
    7896:	3b0b      	subs	r3, #11
    7898:	2b1c      	cmp	r3, #28
    789a:	dd00      	ble.n	789e <__aeabi_dmul+0x11a>
    789c:	e17a      	b.n	7b94 <__aeabi_dmul+0x410>
    789e:	221d      	movs	r2, #29
    78a0:	1ad3      	subs	r3, r2, r3
    78a2:	003a      	movs	r2, r7
    78a4:	0001      	movs	r1, r0
    78a6:	465c      	mov	r4, fp
    78a8:	40da      	lsrs	r2, r3
    78aa:	3908      	subs	r1, #8
    78ac:	408c      	lsls	r4, r1
    78ae:	0013      	movs	r3, r2
    78b0:	408f      	lsls	r7, r1
    78b2:	4323      	orrs	r3, r4
    78b4:	469b      	mov	fp, r3
    78b6:	46b9      	mov	r9, r7
    78b8:	2300      	movs	r3, #0
    78ba:	4e2d      	ldr	r6, [pc, #180]	; (7970 <__aeabi_dmul+0x1ec>)
    78bc:	2700      	movs	r7, #0
    78be:	1a36      	subs	r6, r6, r0
    78c0:	9302      	str	r3, [sp, #8]
    78c2:	e784      	b.n	77ce <__aeabi_dmul+0x4a>
    78c4:	4653      	mov	r3, sl
    78c6:	4323      	orrs	r3, r4
    78c8:	d12a      	bne.n	7920 <__aeabi_dmul+0x19c>
    78ca:	2400      	movs	r4, #0
    78cc:	2002      	movs	r0, #2
    78ce:	e796      	b.n	77fe <__aeabi_dmul+0x7a>
    78d0:	4653      	mov	r3, sl
    78d2:	4323      	orrs	r3, r4
    78d4:	d020      	beq.n	7918 <__aeabi_dmul+0x194>
    78d6:	2c00      	cmp	r4, #0
    78d8:	d100      	bne.n	78dc <__aeabi_dmul+0x158>
    78da:	e157      	b.n	7b8c <__aeabi_dmul+0x408>
    78dc:	0020      	movs	r0, r4
    78de:	f000 fe25 	bl	852c <__clzsi2>
    78e2:	0003      	movs	r3, r0
    78e4:	3b0b      	subs	r3, #11
    78e6:	2b1c      	cmp	r3, #28
    78e8:	dd00      	ble.n	78ec <__aeabi_dmul+0x168>
    78ea:	e149      	b.n	7b80 <__aeabi_dmul+0x3fc>
    78ec:	211d      	movs	r1, #29
    78ee:	1acb      	subs	r3, r1, r3
    78f0:	4651      	mov	r1, sl
    78f2:	0002      	movs	r2, r0
    78f4:	40d9      	lsrs	r1, r3
    78f6:	4653      	mov	r3, sl
    78f8:	3a08      	subs	r2, #8
    78fa:	4094      	lsls	r4, r2
    78fc:	4093      	lsls	r3, r2
    78fe:	430c      	orrs	r4, r1
    7900:	4a1b      	ldr	r2, [pc, #108]	; (7970 <__aeabi_dmul+0x1ec>)
    7902:	1a12      	subs	r2, r2, r0
    7904:	2000      	movs	r0, #0
    7906:	e77a      	b.n	77fe <__aeabi_dmul+0x7a>
    7908:	2501      	movs	r5, #1
    790a:	9b01      	ldr	r3, [sp, #4]
    790c:	4c14      	ldr	r4, [pc, #80]	; (7960 <__aeabi_dmul+0x1dc>)
    790e:	401d      	ands	r5, r3
    7910:	2300      	movs	r3, #0
    7912:	2200      	movs	r2, #0
    7914:	4699      	mov	r9, r3
    7916:	e79c      	b.n	7852 <__aeabi_dmul+0xce>
    7918:	2400      	movs	r4, #0
    791a:	2200      	movs	r2, #0
    791c:	2001      	movs	r0, #1
    791e:	e76e      	b.n	77fe <__aeabi_dmul+0x7a>
    7920:	4653      	mov	r3, sl
    7922:	2003      	movs	r0, #3
    7924:	e76b      	b.n	77fe <__aeabi_dmul+0x7a>
    7926:	2300      	movs	r3, #0
    7928:	469b      	mov	fp, r3
    792a:	3301      	adds	r3, #1
    792c:	2704      	movs	r7, #4
    792e:	2600      	movs	r6, #0
    7930:	9302      	str	r3, [sp, #8]
    7932:	e74c      	b.n	77ce <__aeabi_dmul+0x4a>
    7934:	2303      	movs	r3, #3
    7936:	4681      	mov	r9, r0
    7938:	270c      	movs	r7, #12
    793a:	9302      	str	r3, [sp, #8]
    793c:	e747      	b.n	77ce <__aeabi_dmul+0x4a>
    793e:	2280      	movs	r2, #128	; 0x80
    7940:	2300      	movs	r3, #0
    7942:	2500      	movs	r5, #0
    7944:	0312      	lsls	r2, r2, #12
    7946:	4699      	mov	r9, r3
    7948:	4c05      	ldr	r4, [pc, #20]	; (7960 <__aeabi_dmul+0x1dc>)
    794a:	e782      	b.n	7852 <__aeabi_dmul+0xce>
    794c:	465c      	mov	r4, fp
    794e:	464b      	mov	r3, r9
    7950:	9802      	ldr	r0, [sp, #8]
    7952:	e76f      	b.n	7834 <__aeabi_dmul+0xb0>
    7954:	465c      	mov	r4, fp
    7956:	464b      	mov	r3, r9
    7958:	9501      	str	r5, [sp, #4]
    795a:	9802      	ldr	r0, [sp, #8]
    795c:	e76a      	b.n	7834 <__aeabi_dmul+0xb0>
    795e:	46c0      	nop			; (mov r8, r8)
    7960:	000007ff 	.word	0x000007ff
    7964:	fffffc01 	.word	0xfffffc01
    7968:	000150b4 	.word	0x000150b4
    796c:	800fffff 	.word	0x800fffff
    7970:	fffffc0d 	.word	0xfffffc0d
    7974:	464a      	mov	r2, r9
    7976:	4649      	mov	r1, r9
    7978:	0c17      	lsrs	r7, r2, #16
    797a:	0c1a      	lsrs	r2, r3, #16
    797c:	041b      	lsls	r3, r3, #16
    797e:	0c1b      	lsrs	r3, r3, #16
    7980:	0408      	lsls	r0, r1, #16
    7982:	0019      	movs	r1, r3
    7984:	0c00      	lsrs	r0, r0, #16
    7986:	4341      	muls	r1, r0
    7988:	0015      	movs	r5, r2
    798a:	4688      	mov	r8, r1
    798c:	0019      	movs	r1, r3
    798e:	437d      	muls	r5, r7
    7990:	4379      	muls	r1, r7
    7992:	9503      	str	r5, [sp, #12]
    7994:	4689      	mov	r9, r1
    7996:	0029      	movs	r1, r5
    7998:	0015      	movs	r5, r2
    799a:	4345      	muls	r5, r0
    799c:	444d      	add	r5, r9
    799e:	9502      	str	r5, [sp, #8]
    79a0:	4645      	mov	r5, r8
    79a2:	0c2d      	lsrs	r5, r5, #16
    79a4:	46aa      	mov	sl, r5
    79a6:	9d02      	ldr	r5, [sp, #8]
    79a8:	4455      	add	r5, sl
    79aa:	45a9      	cmp	r9, r5
    79ac:	d906      	bls.n	79bc <__aeabi_dmul+0x238>
    79ae:	468a      	mov	sl, r1
    79b0:	2180      	movs	r1, #128	; 0x80
    79b2:	0249      	lsls	r1, r1, #9
    79b4:	4689      	mov	r9, r1
    79b6:	44ca      	add	sl, r9
    79b8:	4651      	mov	r1, sl
    79ba:	9103      	str	r1, [sp, #12]
    79bc:	0c29      	lsrs	r1, r5, #16
    79be:	9104      	str	r1, [sp, #16]
    79c0:	4641      	mov	r1, r8
    79c2:	0409      	lsls	r1, r1, #16
    79c4:	042d      	lsls	r5, r5, #16
    79c6:	0c09      	lsrs	r1, r1, #16
    79c8:	4688      	mov	r8, r1
    79ca:	0029      	movs	r1, r5
    79cc:	0c25      	lsrs	r5, r4, #16
    79ce:	0424      	lsls	r4, r4, #16
    79d0:	4441      	add	r1, r8
    79d2:	0c24      	lsrs	r4, r4, #16
    79d4:	9105      	str	r1, [sp, #20]
    79d6:	0021      	movs	r1, r4
    79d8:	4341      	muls	r1, r0
    79da:	4688      	mov	r8, r1
    79dc:	0021      	movs	r1, r4
    79de:	4379      	muls	r1, r7
    79e0:	468a      	mov	sl, r1
    79e2:	4368      	muls	r0, r5
    79e4:	4641      	mov	r1, r8
    79e6:	4450      	add	r0, sl
    79e8:	4681      	mov	r9, r0
    79ea:	0c08      	lsrs	r0, r1, #16
    79ec:	4448      	add	r0, r9
    79ee:	436f      	muls	r7, r5
    79f0:	4582      	cmp	sl, r0
    79f2:	d903      	bls.n	79fc <__aeabi_dmul+0x278>
    79f4:	2180      	movs	r1, #128	; 0x80
    79f6:	0249      	lsls	r1, r1, #9
    79f8:	4689      	mov	r9, r1
    79fa:	444f      	add	r7, r9
    79fc:	0c01      	lsrs	r1, r0, #16
    79fe:	4689      	mov	r9, r1
    7a00:	0039      	movs	r1, r7
    7a02:	4449      	add	r1, r9
    7a04:	9102      	str	r1, [sp, #8]
    7a06:	4641      	mov	r1, r8
    7a08:	040f      	lsls	r7, r1, #16
    7a0a:	9904      	ldr	r1, [sp, #16]
    7a0c:	0c3f      	lsrs	r7, r7, #16
    7a0e:	4688      	mov	r8, r1
    7a10:	0400      	lsls	r0, r0, #16
    7a12:	19c0      	adds	r0, r0, r7
    7a14:	4480      	add	r8, r0
    7a16:	4641      	mov	r1, r8
    7a18:	9104      	str	r1, [sp, #16]
    7a1a:	4659      	mov	r1, fp
    7a1c:	0c0f      	lsrs	r7, r1, #16
    7a1e:	0409      	lsls	r1, r1, #16
    7a20:	0c09      	lsrs	r1, r1, #16
    7a22:	4688      	mov	r8, r1
    7a24:	4359      	muls	r1, r3
    7a26:	468a      	mov	sl, r1
    7a28:	0039      	movs	r1, r7
    7a2a:	4351      	muls	r1, r2
    7a2c:	4689      	mov	r9, r1
    7a2e:	4641      	mov	r1, r8
    7a30:	434a      	muls	r2, r1
    7a32:	4651      	mov	r1, sl
    7a34:	0c09      	lsrs	r1, r1, #16
    7a36:	468b      	mov	fp, r1
    7a38:	437b      	muls	r3, r7
    7a3a:	18d2      	adds	r2, r2, r3
    7a3c:	445a      	add	r2, fp
    7a3e:	4293      	cmp	r3, r2
    7a40:	d903      	bls.n	7a4a <__aeabi_dmul+0x2c6>
    7a42:	2380      	movs	r3, #128	; 0x80
    7a44:	025b      	lsls	r3, r3, #9
    7a46:	469b      	mov	fp, r3
    7a48:	44d9      	add	r9, fp
    7a4a:	4651      	mov	r1, sl
    7a4c:	0409      	lsls	r1, r1, #16
    7a4e:	0c09      	lsrs	r1, r1, #16
    7a50:	468a      	mov	sl, r1
    7a52:	4641      	mov	r1, r8
    7a54:	4361      	muls	r1, r4
    7a56:	437c      	muls	r4, r7
    7a58:	0c13      	lsrs	r3, r2, #16
    7a5a:	0412      	lsls	r2, r2, #16
    7a5c:	444b      	add	r3, r9
    7a5e:	4452      	add	r2, sl
    7a60:	46a1      	mov	r9, r4
    7a62:	468a      	mov	sl, r1
    7a64:	003c      	movs	r4, r7
    7a66:	4641      	mov	r1, r8
    7a68:	436c      	muls	r4, r5
    7a6a:	434d      	muls	r5, r1
    7a6c:	4651      	mov	r1, sl
    7a6e:	444d      	add	r5, r9
    7a70:	0c0f      	lsrs	r7, r1, #16
    7a72:	197d      	adds	r5, r7, r5
    7a74:	45a9      	cmp	r9, r5
    7a76:	d903      	bls.n	7a80 <__aeabi_dmul+0x2fc>
    7a78:	2180      	movs	r1, #128	; 0x80
    7a7a:	0249      	lsls	r1, r1, #9
    7a7c:	4688      	mov	r8, r1
    7a7e:	4444      	add	r4, r8
    7a80:	9f04      	ldr	r7, [sp, #16]
    7a82:	9903      	ldr	r1, [sp, #12]
    7a84:	46b8      	mov	r8, r7
    7a86:	4441      	add	r1, r8
    7a88:	468b      	mov	fp, r1
    7a8a:	4583      	cmp	fp, r0
    7a8c:	4180      	sbcs	r0, r0
    7a8e:	4241      	negs	r1, r0
    7a90:	4688      	mov	r8, r1
    7a92:	4651      	mov	r1, sl
    7a94:	0408      	lsls	r0, r1, #16
    7a96:	042f      	lsls	r7, r5, #16
    7a98:	0c00      	lsrs	r0, r0, #16
    7a9a:	183f      	adds	r7, r7, r0
    7a9c:	4658      	mov	r0, fp
    7a9e:	9902      	ldr	r1, [sp, #8]
    7aa0:	1810      	adds	r0, r2, r0
    7aa2:	4689      	mov	r9, r1
    7aa4:	4290      	cmp	r0, r2
    7aa6:	4192      	sbcs	r2, r2
    7aa8:	444f      	add	r7, r9
    7aaa:	46ba      	mov	sl, r7
    7aac:	4252      	negs	r2, r2
    7aae:	4699      	mov	r9, r3
    7ab0:	4693      	mov	fp, r2
    7ab2:	44c2      	add	sl, r8
    7ab4:	44d1      	add	r9, sl
    7ab6:	44cb      	add	fp, r9
    7ab8:	428f      	cmp	r7, r1
    7aba:	41bf      	sbcs	r7, r7
    7abc:	45c2      	cmp	sl, r8
    7abe:	4189      	sbcs	r1, r1
    7ac0:	4599      	cmp	r9, r3
    7ac2:	419b      	sbcs	r3, r3
    7ac4:	4593      	cmp	fp, r2
    7ac6:	4192      	sbcs	r2, r2
    7ac8:	427f      	negs	r7, r7
    7aca:	4249      	negs	r1, r1
    7acc:	0c2d      	lsrs	r5, r5, #16
    7ace:	4252      	negs	r2, r2
    7ad0:	430f      	orrs	r7, r1
    7ad2:	425b      	negs	r3, r3
    7ad4:	4313      	orrs	r3, r2
    7ad6:	197f      	adds	r7, r7, r5
    7ad8:	18ff      	adds	r7, r7, r3
    7ada:	465b      	mov	r3, fp
    7adc:	193c      	adds	r4, r7, r4
    7ade:	0ddb      	lsrs	r3, r3, #23
    7ae0:	9a05      	ldr	r2, [sp, #20]
    7ae2:	0264      	lsls	r4, r4, #9
    7ae4:	431c      	orrs	r4, r3
    7ae6:	0243      	lsls	r3, r0, #9
    7ae8:	4313      	orrs	r3, r2
    7aea:	1e5d      	subs	r5, r3, #1
    7aec:	41ab      	sbcs	r3, r5
    7aee:	465a      	mov	r2, fp
    7af0:	0dc0      	lsrs	r0, r0, #23
    7af2:	4303      	orrs	r3, r0
    7af4:	0252      	lsls	r2, r2, #9
    7af6:	4313      	orrs	r3, r2
    7af8:	01e2      	lsls	r2, r4, #7
    7afa:	d556      	bpl.n	7baa <__aeabi_dmul+0x426>
    7afc:	2001      	movs	r0, #1
    7afe:	085a      	lsrs	r2, r3, #1
    7b00:	4003      	ands	r3, r0
    7b02:	4313      	orrs	r3, r2
    7b04:	07e2      	lsls	r2, r4, #31
    7b06:	4313      	orrs	r3, r2
    7b08:	0864      	lsrs	r4, r4, #1
    7b0a:	485a      	ldr	r0, [pc, #360]	; (7c74 <__aeabi_dmul+0x4f0>)
    7b0c:	4460      	add	r0, ip
    7b0e:	2800      	cmp	r0, #0
    7b10:	dd4d      	ble.n	7bae <__aeabi_dmul+0x42a>
    7b12:	075a      	lsls	r2, r3, #29
    7b14:	d009      	beq.n	7b2a <__aeabi_dmul+0x3a6>
    7b16:	220f      	movs	r2, #15
    7b18:	401a      	ands	r2, r3
    7b1a:	2a04      	cmp	r2, #4
    7b1c:	d005      	beq.n	7b2a <__aeabi_dmul+0x3a6>
    7b1e:	1d1a      	adds	r2, r3, #4
    7b20:	429a      	cmp	r2, r3
    7b22:	419b      	sbcs	r3, r3
    7b24:	425b      	negs	r3, r3
    7b26:	18e4      	adds	r4, r4, r3
    7b28:	0013      	movs	r3, r2
    7b2a:	01e2      	lsls	r2, r4, #7
    7b2c:	d504      	bpl.n	7b38 <__aeabi_dmul+0x3b4>
    7b2e:	2080      	movs	r0, #128	; 0x80
    7b30:	4a51      	ldr	r2, [pc, #324]	; (7c78 <__aeabi_dmul+0x4f4>)
    7b32:	00c0      	lsls	r0, r0, #3
    7b34:	4014      	ands	r4, r2
    7b36:	4460      	add	r0, ip
    7b38:	4a50      	ldr	r2, [pc, #320]	; (7c7c <__aeabi_dmul+0x4f8>)
    7b3a:	4290      	cmp	r0, r2
    7b3c:	dd00      	ble.n	7b40 <__aeabi_dmul+0x3bc>
    7b3e:	e6e3      	b.n	7908 <__aeabi_dmul+0x184>
    7b40:	2501      	movs	r5, #1
    7b42:	08db      	lsrs	r3, r3, #3
    7b44:	0762      	lsls	r2, r4, #29
    7b46:	431a      	orrs	r2, r3
    7b48:	0264      	lsls	r4, r4, #9
    7b4a:	9b01      	ldr	r3, [sp, #4]
    7b4c:	4691      	mov	r9, r2
    7b4e:	0b22      	lsrs	r2, r4, #12
    7b50:	0544      	lsls	r4, r0, #21
    7b52:	0d64      	lsrs	r4, r4, #21
    7b54:	401d      	ands	r5, r3
    7b56:	e67c      	b.n	7852 <__aeabi_dmul+0xce>
    7b58:	2280      	movs	r2, #128	; 0x80
    7b5a:	4659      	mov	r1, fp
    7b5c:	0312      	lsls	r2, r2, #12
    7b5e:	4211      	tst	r1, r2
    7b60:	d008      	beq.n	7b74 <__aeabi_dmul+0x3f0>
    7b62:	4214      	tst	r4, r2
    7b64:	d106      	bne.n	7b74 <__aeabi_dmul+0x3f0>
    7b66:	4322      	orrs	r2, r4
    7b68:	0312      	lsls	r2, r2, #12
    7b6a:	0b12      	lsrs	r2, r2, #12
    7b6c:	4645      	mov	r5, r8
    7b6e:	4699      	mov	r9, r3
    7b70:	4c43      	ldr	r4, [pc, #268]	; (7c80 <__aeabi_dmul+0x4fc>)
    7b72:	e66e      	b.n	7852 <__aeabi_dmul+0xce>
    7b74:	465b      	mov	r3, fp
    7b76:	431a      	orrs	r2, r3
    7b78:	0312      	lsls	r2, r2, #12
    7b7a:	0b12      	lsrs	r2, r2, #12
    7b7c:	4c40      	ldr	r4, [pc, #256]	; (7c80 <__aeabi_dmul+0x4fc>)
    7b7e:	e668      	b.n	7852 <__aeabi_dmul+0xce>
    7b80:	0003      	movs	r3, r0
    7b82:	4654      	mov	r4, sl
    7b84:	3b28      	subs	r3, #40	; 0x28
    7b86:	409c      	lsls	r4, r3
    7b88:	2300      	movs	r3, #0
    7b8a:	e6b9      	b.n	7900 <__aeabi_dmul+0x17c>
    7b8c:	f000 fcce 	bl	852c <__clzsi2>
    7b90:	3020      	adds	r0, #32
    7b92:	e6a6      	b.n	78e2 <__aeabi_dmul+0x15e>
    7b94:	0003      	movs	r3, r0
    7b96:	3b28      	subs	r3, #40	; 0x28
    7b98:	409f      	lsls	r7, r3
    7b9a:	2300      	movs	r3, #0
    7b9c:	46bb      	mov	fp, r7
    7b9e:	4699      	mov	r9, r3
    7ba0:	e68a      	b.n	78b8 <__aeabi_dmul+0x134>
    7ba2:	f000 fcc3 	bl	852c <__clzsi2>
    7ba6:	3020      	adds	r0, #32
    7ba8:	e674      	b.n	7894 <__aeabi_dmul+0x110>
    7baa:	46b4      	mov	ip, r6
    7bac:	e7ad      	b.n	7b0a <__aeabi_dmul+0x386>
    7bae:	2501      	movs	r5, #1
    7bb0:	1a2a      	subs	r2, r5, r0
    7bb2:	2a38      	cmp	r2, #56	; 0x38
    7bb4:	dd06      	ble.n	7bc4 <__aeabi_dmul+0x440>
    7bb6:	9b01      	ldr	r3, [sp, #4]
    7bb8:	2400      	movs	r4, #0
    7bba:	401d      	ands	r5, r3
    7bbc:	2300      	movs	r3, #0
    7bbe:	2200      	movs	r2, #0
    7bc0:	4699      	mov	r9, r3
    7bc2:	e646      	b.n	7852 <__aeabi_dmul+0xce>
    7bc4:	2a1f      	cmp	r2, #31
    7bc6:	dc21      	bgt.n	7c0c <__aeabi_dmul+0x488>
    7bc8:	2520      	movs	r5, #32
    7bca:	0020      	movs	r0, r4
    7bcc:	1aad      	subs	r5, r5, r2
    7bce:	001e      	movs	r6, r3
    7bd0:	40ab      	lsls	r3, r5
    7bd2:	40a8      	lsls	r0, r5
    7bd4:	40d6      	lsrs	r6, r2
    7bd6:	1e5d      	subs	r5, r3, #1
    7bd8:	41ab      	sbcs	r3, r5
    7bda:	4330      	orrs	r0, r6
    7bdc:	4318      	orrs	r0, r3
    7bde:	40d4      	lsrs	r4, r2
    7be0:	0743      	lsls	r3, r0, #29
    7be2:	d009      	beq.n	7bf8 <__aeabi_dmul+0x474>
    7be4:	230f      	movs	r3, #15
    7be6:	4003      	ands	r3, r0
    7be8:	2b04      	cmp	r3, #4
    7bea:	d005      	beq.n	7bf8 <__aeabi_dmul+0x474>
    7bec:	0003      	movs	r3, r0
    7bee:	1d18      	adds	r0, r3, #4
    7bf0:	4298      	cmp	r0, r3
    7bf2:	419b      	sbcs	r3, r3
    7bf4:	425b      	negs	r3, r3
    7bf6:	18e4      	adds	r4, r4, r3
    7bf8:	0223      	lsls	r3, r4, #8
    7bfa:	d521      	bpl.n	7c40 <__aeabi_dmul+0x4bc>
    7bfc:	2501      	movs	r5, #1
    7bfe:	9b01      	ldr	r3, [sp, #4]
    7c00:	2401      	movs	r4, #1
    7c02:	401d      	ands	r5, r3
    7c04:	2300      	movs	r3, #0
    7c06:	2200      	movs	r2, #0
    7c08:	4699      	mov	r9, r3
    7c0a:	e622      	b.n	7852 <__aeabi_dmul+0xce>
    7c0c:	251f      	movs	r5, #31
    7c0e:	0021      	movs	r1, r4
    7c10:	426d      	negs	r5, r5
    7c12:	1a28      	subs	r0, r5, r0
    7c14:	40c1      	lsrs	r1, r0
    7c16:	0008      	movs	r0, r1
    7c18:	2a20      	cmp	r2, #32
    7c1a:	d01d      	beq.n	7c58 <__aeabi_dmul+0x4d4>
    7c1c:	355f      	adds	r5, #95	; 0x5f
    7c1e:	1aaa      	subs	r2, r5, r2
    7c20:	4094      	lsls	r4, r2
    7c22:	4323      	orrs	r3, r4
    7c24:	1e5c      	subs	r4, r3, #1
    7c26:	41a3      	sbcs	r3, r4
    7c28:	2507      	movs	r5, #7
    7c2a:	4303      	orrs	r3, r0
    7c2c:	401d      	ands	r5, r3
    7c2e:	2200      	movs	r2, #0
    7c30:	2d00      	cmp	r5, #0
    7c32:	d009      	beq.n	7c48 <__aeabi_dmul+0x4c4>
    7c34:	220f      	movs	r2, #15
    7c36:	2400      	movs	r4, #0
    7c38:	401a      	ands	r2, r3
    7c3a:	0018      	movs	r0, r3
    7c3c:	2a04      	cmp	r2, #4
    7c3e:	d1d6      	bne.n	7bee <__aeabi_dmul+0x46a>
    7c40:	0003      	movs	r3, r0
    7c42:	0765      	lsls	r5, r4, #29
    7c44:	0264      	lsls	r4, r4, #9
    7c46:	0b22      	lsrs	r2, r4, #12
    7c48:	08db      	lsrs	r3, r3, #3
    7c4a:	432b      	orrs	r3, r5
    7c4c:	2501      	movs	r5, #1
    7c4e:	4699      	mov	r9, r3
    7c50:	9b01      	ldr	r3, [sp, #4]
    7c52:	2400      	movs	r4, #0
    7c54:	401d      	ands	r5, r3
    7c56:	e5fc      	b.n	7852 <__aeabi_dmul+0xce>
    7c58:	2400      	movs	r4, #0
    7c5a:	e7e2      	b.n	7c22 <__aeabi_dmul+0x49e>
    7c5c:	2280      	movs	r2, #128	; 0x80
    7c5e:	2501      	movs	r5, #1
    7c60:	0312      	lsls	r2, r2, #12
    7c62:	4322      	orrs	r2, r4
    7c64:	9901      	ldr	r1, [sp, #4]
    7c66:	0312      	lsls	r2, r2, #12
    7c68:	0b12      	lsrs	r2, r2, #12
    7c6a:	400d      	ands	r5, r1
    7c6c:	4699      	mov	r9, r3
    7c6e:	4c04      	ldr	r4, [pc, #16]	; (7c80 <__aeabi_dmul+0x4fc>)
    7c70:	e5ef      	b.n	7852 <__aeabi_dmul+0xce>
    7c72:	46c0      	nop			; (mov r8, r8)
    7c74:	000003ff 	.word	0x000003ff
    7c78:	feffffff 	.word	0xfeffffff
    7c7c:	000007fe 	.word	0x000007fe
    7c80:	000007ff 	.word	0x000007ff

00007c84 <__aeabi_dsub>:
    7c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c86:	4646      	mov	r6, r8
    7c88:	46d6      	mov	lr, sl
    7c8a:	464f      	mov	r7, r9
    7c8c:	030c      	lsls	r4, r1, #12
    7c8e:	b5c0      	push	{r6, r7, lr}
    7c90:	0fcd      	lsrs	r5, r1, #31
    7c92:	004e      	lsls	r6, r1, #1
    7c94:	0a61      	lsrs	r1, r4, #9
    7c96:	0f44      	lsrs	r4, r0, #29
    7c98:	430c      	orrs	r4, r1
    7c9a:	00c1      	lsls	r1, r0, #3
    7c9c:	0058      	lsls	r0, r3, #1
    7c9e:	0d40      	lsrs	r0, r0, #21
    7ca0:	4684      	mov	ip, r0
    7ca2:	468a      	mov	sl, r1
    7ca4:	000f      	movs	r7, r1
    7ca6:	0319      	lsls	r1, r3, #12
    7ca8:	0f50      	lsrs	r0, r2, #29
    7caa:	0a49      	lsrs	r1, r1, #9
    7cac:	4301      	orrs	r1, r0
    7cae:	48c6      	ldr	r0, [pc, #792]	; (7fc8 <__aeabi_dsub+0x344>)
    7cb0:	0d76      	lsrs	r6, r6, #21
    7cb2:	46a8      	mov	r8, r5
    7cb4:	0fdb      	lsrs	r3, r3, #31
    7cb6:	00d2      	lsls	r2, r2, #3
    7cb8:	4584      	cmp	ip, r0
    7cba:	d100      	bne.n	7cbe <__aeabi_dsub+0x3a>
    7cbc:	e0d8      	b.n	7e70 <__aeabi_dsub+0x1ec>
    7cbe:	2001      	movs	r0, #1
    7cc0:	4043      	eors	r3, r0
    7cc2:	42ab      	cmp	r3, r5
    7cc4:	d100      	bne.n	7cc8 <__aeabi_dsub+0x44>
    7cc6:	e0a6      	b.n	7e16 <__aeabi_dsub+0x192>
    7cc8:	4660      	mov	r0, ip
    7cca:	1a35      	subs	r5, r6, r0
    7ccc:	2d00      	cmp	r5, #0
    7cce:	dc00      	bgt.n	7cd2 <__aeabi_dsub+0x4e>
    7cd0:	e105      	b.n	7ede <__aeabi_dsub+0x25a>
    7cd2:	2800      	cmp	r0, #0
    7cd4:	d110      	bne.n	7cf8 <__aeabi_dsub+0x74>
    7cd6:	000b      	movs	r3, r1
    7cd8:	4313      	orrs	r3, r2
    7cda:	d100      	bne.n	7cde <__aeabi_dsub+0x5a>
    7cdc:	e0d7      	b.n	7e8e <__aeabi_dsub+0x20a>
    7cde:	1e6b      	subs	r3, r5, #1
    7ce0:	2b00      	cmp	r3, #0
    7ce2:	d000      	beq.n	7ce6 <__aeabi_dsub+0x62>
    7ce4:	e14b      	b.n	7f7e <__aeabi_dsub+0x2fa>
    7ce6:	4653      	mov	r3, sl
    7ce8:	1a9f      	subs	r7, r3, r2
    7cea:	45ba      	cmp	sl, r7
    7cec:	4180      	sbcs	r0, r0
    7cee:	1a64      	subs	r4, r4, r1
    7cf0:	4240      	negs	r0, r0
    7cf2:	1a24      	subs	r4, r4, r0
    7cf4:	2601      	movs	r6, #1
    7cf6:	e01e      	b.n	7d36 <__aeabi_dsub+0xb2>
    7cf8:	4bb3      	ldr	r3, [pc, #716]	; (7fc8 <__aeabi_dsub+0x344>)
    7cfa:	429e      	cmp	r6, r3
    7cfc:	d048      	beq.n	7d90 <__aeabi_dsub+0x10c>
    7cfe:	2380      	movs	r3, #128	; 0x80
    7d00:	041b      	lsls	r3, r3, #16
    7d02:	4319      	orrs	r1, r3
    7d04:	2d38      	cmp	r5, #56	; 0x38
    7d06:	dd00      	ble.n	7d0a <__aeabi_dsub+0x86>
    7d08:	e119      	b.n	7f3e <__aeabi_dsub+0x2ba>
    7d0a:	2d1f      	cmp	r5, #31
    7d0c:	dd00      	ble.n	7d10 <__aeabi_dsub+0x8c>
    7d0e:	e14c      	b.n	7faa <__aeabi_dsub+0x326>
    7d10:	2320      	movs	r3, #32
    7d12:	000f      	movs	r7, r1
    7d14:	1b5b      	subs	r3, r3, r5
    7d16:	0010      	movs	r0, r2
    7d18:	409a      	lsls	r2, r3
    7d1a:	409f      	lsls	r7, r3
    7d1c:	40e8      	lsrs	r0, r5
    7d1e:	1e53      	subs	r3, r2, #1
    7d20:	419a      	sbcs	r2, r3
    7d22:	40e9      	lsrs	r1, r5
    7d24:	4307      	orrs	r7, r0
    7d26:	4317      	orrs	r7, r2
    7d28:	4653      	mov	r3, sl
    7d2a:	1bdf      	subs	r7, r3, r7
    7d2c:	1a61      	subs	r1, r4, r1
    7d2e:	45ba      	cmp	sl, r7
    7d30:	41a4      	sbcs	r4, r4
    7d32:	4264      	negs	r4, r4
    7d34:	1b0c      	subs	r4, r1, r4
    7d36:	0223      	lsls	r3, r4, #8
    7d38:	d400      	bmi.n	7d3c <__aeabi_dsub+0xb8>
    7d3a:	e0c5      	b.n	7ec8 <__aeabi_dsub+0x244>
    7d3c:	0264      	lsls	r4, r4, #9
    7d3e:	0a65      	lsrs	r5, r4, #9
    7d40:	2d00      	cmp	r5, #0
    7d42:	d100      	bne.n	7d46 <__aeabi_dsub+0xc2>
    7d44:	e0f6      	b.n	7f34 <__aeabi_dsub+0x2b0>
    7d46:	0028      	movs	r0, r5
    7d48:	f000 fbf0 	bl	852c <__clzsi2>
    7d4c:	0003      	movs	r3, r0
    7d4e:	3b08      	subs	r3, #8
    7d50:	2b1f      	cmp	r3, #31
    7d52:	dd00      	ble.n	7d56 <__aeabi_dsub+0xd2>
    7d54:	e0e9      	b.n	7f2a <__aeabi_dsub+0x2a6>
    7d56:	2220      	movs	r2, #32
    7d58:	003c      	movs	r4, r7
    7d5a:	1ad2      	subs	r2, r2, r3
    7d5c:	409d      	lsls	r5, r3
    7d5e:	40d4      	lsrs	r4, r2
    7d60:	409f      	lsls	r7, r3
    7d62:	4325      	orrs	r5, r4
    7d64:	429e      	cmp	r6, r3
    7d66:	dd00      	ble.n	7d6a <__aeabi_dsub+0xe6>
    7d68:	e0db      	b.n	7f22 <__aeabi_dsub+0x29e>
    7d6a:	1b9e      	subs	r6, r3, r6
    7d6c:	1c73      	adds	r3, r6, #1
    7d6e:	2b1f      	cmp	r3, #31
    7d70:	dd00      	ble.n	7d74 <__aeabi_dsub+0xf0>
    7d72:	e10a      	b.n	7f8a <__aeabi_dsub+0x306>
    7d74:	2220      	movs	r2, #32
    7d76:	0038      	movs	r0, r7
    7d78:	1ad2      	subs	r2, r2, r3
    7d7a:	0029      	movs	r1, r5
    7d7c:	4097      	lsls	r7, r2
    7d7e:	002c      	movs	r4, r5
    7d80:	4091      	lsls	r1, r2
    7d82:	40d8      	lsrs	r0, r3
    7d84:	1e7a      	subs	r2, r7, #1
    7d86:	4197      	sbcs	r7, r2
    7d88:	40dc      	lsrs	r4, r3
    7d8a:	2600      	movs	r6, #0
    7d8c:	4301      	orrs	r1, r0
    7d8e:	430f      	orrs	r7, r1
    7d90:	077b      	lsls	r3, r7, #29
    7d92:	d009      	beq.n	7da8 <__aeabi_dsub+0x124>
    7d94:	230f      	movs	r3, #15
    7d96:	403b      	ands	r3, r7
    7d98:	2b04      	cmp	r3, #4
    7d9a:	d005      	beq.n	7da8 <__aeabi_dsub+0x124>
    7d9c:	1d3b      	adds	r3, r7, #4
    7d9e:	42bb      	cmp	r3, r7
    7da0:	41bf      	sbcs	r7, r7
    7da2:	427f      	negs	r7, r7
    7da4:	19e4      	adds	r4, r4, r7
    7da6:	001f      	movs	r7, r3
    7da8:	0223      	lsls	r3, r4, #8
    7daa:	d525      	bpl.n	7df8 <__aeabi_dsub+0x174>
    7dac:	4b86      	ldr	r3, [pc, #536]	; (7fc8 <__aeabi_dsub+0x344>)
    7dae:	3601      	adds	r6, #1
    7db0:	429e      	cmp	r6, r3
    7db2:	d100      	bne.n	7db6 <__aeabi_dsub+0x132>
    7db4:	e0af      	b.n	7f16 <__aeabi_dsub+0x292>
    7db6:	4b85      	ldr	r3, [pc, #532]	; (7fcc <__aeabi_dsub+0x348>)
    7db8:	2501      	movs	r5, #1
    7dba:	401c      	ands	r4, r3
    7dbc:	4643      	mov	r3, r8
    7dbe:	0762      	lsls	r2, r4, #29
    7dc0:	08ff      	lsrs	r7, r7, #3
    7dc2:	0264      	lsls	r4, r4, #9
    7dc4:	0576      	lsls	r6, r6, #21
    7dc6:	4317      	orrs	r7, r2
    7dc8:	0b24      	lsrs	r4, r4, #12
    7dca:	0d76      	lsrs	r6, r6, #21
    7dcc:	401d      	ands	r5, r3
    7dce:	2100      	movs	r1, #0
    7dd0:	0324      	lsls	r4, r4, #12
    7dd2:	0b23      	lsrs	r3, r4, #12
    7dd4:	0d0c      	lsrs	r4, r1, #20
    7dd6:	4a7e      	ldr	r2, [pc, #504]	; (7fd0 <__aeabi_dsub+0x34c>)
    7dd8:	0524      	lsls	r4, r4, #20
    7dda:	431c      	orrs	r4, r3
    7ddc:	4014      	ands	r4, r2
    7dde:	0533      	lsls	r3, r6, #20
    7de0:	4323      	orrs	r3, r4
    7de2:	005b      	lsls	r3, r3, #1
    7de4:	07ed      	lsls	r5, r5, #31
    7de6:	085b      	lsrs	r3, r3, #1
    7de8:	432b      	orrs	r3, r5
    7dea:	0038      	movs	r0, r7
    7dec:	0019      	movs	r1, r3
    7dee:	bc1c      	pop	{r2, r3, r4}
    7df0:	4690      	mov	r8, r2
    7df2:	4699      	mov	r9, r3
    7df4:	46a2      	mov	sl, r4
    7df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7df8:	2501      	movs	r5, #1
    7dfa:	4643      	mov	r3, r8
    7dfc:	0762      	lsls	r2, r4, #29
    7dfe:	08ff      	lsrs	r7, r7, #3
    7e00:	4317      	orrs	r7, r2
    7e02:	08e4      	lsrs	r4, r4, #3
    7e04:	401d      	ands	r5, r3
    7e06:	4b70      	ldr	r3, [pc, #448]	; (7fc8 <__aeabi_dsub+0x344>)
    7e08:	429e      	cmp	r6, r3
    7e0a:	d036      	beq.n	7e7a <__aeabi_dsub+0x1f6>
    7e0c:	0324      	lsls	r4, r4, #12
    7e0e:	0576      	lsls	r6, r6, #21
    7e10:	0b24      	lsrs	r4, r4, #12
    7e12:	0d76      	lsrs	r6, r6, #21
    7e14:	e7db      	b.n	7dce <__aeabi_dsub+0x14a>
    7e16:	4663      	mov	r3, ip
    7e18:	1af3      	subs	r3, r6, r3
    7e1a:	2b00      	cmp	r3, #0
    7e1c:	dc00      	bgt.n	7e20 <__aeabi_dsub+0x19c>
    7e1e:	e094      	b.n	7f4a <__aeabi_dsub+0x2c6>
    7e20:	4660      	mov	r0, ip
    7e22:	2800      	cmp	r0, #0
    7e24:	d035      	beq.n	7e92 <__aeabi_dsub+0x20e>
    7e26:	4868      	ldr	r0, [pc, #416]	; (7fc8 <__aeabi_dsub+0x344>)
    7e28:	4286      	cmp	r6, r0
    7e2a:	d0b1      	beq.n	7d90 <__aeabi_dsub+0x10c>
    7e2c:	2780      	movs	r7, #128	; 0x80
    7e2e:	043f      	lsls	r7, r7, #16
    7e30:	4339      	orrs	r1, r7
    7e32:	2b38      	cmp	r3, #56	; 0x38
    7e34:	dc00      	bgt.n	7e38 <__aeabi_dsub+0x1b4>
    7e36:	e0fd      	b.n	8034 <__aeabi_dsub+0x3b0>
    7e38:	430a      	orrs	r2, r1
    7e3a:	0017      	movs	r7, r2
    7e3c:	2100      	movs	r1, #0
    7e3e:	1e7a      	subs	r2, r7, #1
    7e40:	4197      	sbcs	r7, r2
    7e42:	4457      	add	r7, sl
    7e44:	4557      	cmp	r7, sl
    7e46:	4180      	sbcs	r0, r0
    7e48:	1909      	adds	r1, r1, r4
    7e4a:	4244      	negs	r4, r0
    7e4c:	190c      	adds	r4, r1, r4
    7e4e:	0223      	lsls	r3, r4, #8
    7e50:	d53a      	bpl.n	7ec8 <__aeabi_dsub+0x244>
    7e52:	4b5d      	ldr	r3, [pc, #372]	; (7fc8 <__aeabi_dsub+0x344>)
    7e54:	3601      	adds	r6, #1
    7e56:	429e      	cmp	r6, r3
    7e58:	d100      	bne.n	7e5c <__aeabi_dsub+0x1d8>
    7e5a:	e14b      	b.n	80f4 <__aeabi_dsub+0x470>
    7e5c:	2201      	movs	r2, #1
    7e5e:	4b5b      	ldr	r3, [pc, #364]	; (7fcc <__aeabi_dsub+0x348>)
    7e60:	401c      	ands	r4, r3
    7e62:	087b      	lsrs	r3, r7, #1
    7e64:	4017      	ands	r7, r2
    7e66:	431f      	orrs	r7, r3
    7e68:	07e2      	lsls	r2, r4, #31
    7e6a:	4317      	orrs	r7, r2
    7e6c:	0864      	lsrs	r4, r4, #1
    7e6e:	e78f      	b.n	7d90 <__aeabi_dsub+0x10c>
    7e70:	0008      	movs	r0, r1
    7e72:	4310      	orrs	r0, r2
    7e74:	d000      	beq.n	7e78 <__aeabi_dsub+0x1f4>
    7e76:	e724      	b.n	7cc2 <__aeabi_dsub+0x3e>
    7e78:	e721      	b.n	7cbe <__aeabi_dsub+0x3a>
    7e7a:	0023      	movs	r3, r4
    7e7c:	433b      	orrs	r3, r7
    7e7e:	d100      	bne.n	7e82 <__aeabi_dsub+0x1fe>
    7e80:	e1b9      	b.n	81f6 <__aeabi_dsub+0x572>
    7e82:	2280      	movs	r2, #128	; 0x80
    7e84:	0312      	lsls	r2, r2, #12
    7e86:	4314      	orrs	r4, r2
    7e88:	0324      	lsls	r4, r4, #12
    7e8a:	0b24      	lsrs	r4, r4, #12
    7e8c:	e79f      	b.n	7dce <__aeabi_dsub+0x14a>
    7e8e:	002e      	movs	r6, r5
    7e90:	e77e      	b.n	7d90 <__aeabi_dsub+0x10c>
    7e92:	0008      	movs	r0, r1
    7e94:	4310      	orrs	r0, r2
    7e96:	d100      	bne.n	7e9a <__aeabi_dsub+0x216>
    7e98:	e0ca      	b.n	8030 <__aeabi_dsub+0x3ac>
    7e9a:	1e58      	subs	r0, r3, #1
    7e9c:	4684      	mov	ip, r0
    7e9e:	2800      	cmp	r0, #0
    7ea0:	d000      	beq.n	7ea4 <__aeabi_dsub+0x220>
    7ea2:	e0e7      	b.n	8074 <__aeabi_dsub+0x3f0>
    7ea4:	4452      	add	r2, sl
    7ea6:	4552      	cmp	r2, sl
    7ea8:	4180      	sbcs	r0, r0
    7eaa:	1864      	adds	r4, r4, r1
    7eac:	4240      	negs	r0, r0
    7eae:	1824      	adds	r4, r4, r0
    7eb0:	0017      	movs	r7, r2
    7eb2:	2601      	movs	r6, #1
    7eb4:	0223      	lsls	r3, r4, #8
    7eb6:	d507      	bpl.n	7ec8 <__aeabi_dsub+0x244>
    7eb8:	2602      	movs	r6, #2
    7eba:	e7cf      	b.n	7e5c <__aeabi_dsub+0x1d8>
    7ebc:	4664      	mov	r4, ip
    7ebe:	432c      	orrs	r4, r5
    7ec0:	d100      	bne.n	7ec4 <__aeabi_dsub+0x240>
    7ec2:	e1b3      	b.n	822c <__aeabi_dsub+0x5a8>
    7ec4:	002c      	movs	r4, r5
    7ec6:	4667      	mov	r7, ip
    7ec8:	077b      	lsls	r3, r7, #29
    7eca:	d000      	beq.n	7ece <__aeabi_dsub+0x24a>
    7ecc:	e762      	b.n	7d94 <__aeabi_dsub+0x110>
    7ece:	0763      	lsls	r3, r4, #29
    7ed0:	08ff      	lsrs	r7, r7, #3
    7ed2:	431f      	orrs	r7, r3
    7ed4:	2501      	movs	r5, #1
    7ed6:	4643      	mov	r3, r8
    7ed8:	08e4      	lsrs	r4, r4, #3
    7eda:	401d      	ands	r5, r3
    7edc:	e793      	b.n	7e06 <__aeabi_dsub+0x182>
    7ede:	2d00      	cmp	r5, #0
    7ee0:	d178      	bne.n	7fd4 <__aeabi_dsub+0x350>
    7ee2:	1c75      	adds	r5, r6, #1
    7ee4:	056d      	lsls	r5, r5, #21
    7ee6:	0d6d      	lsrs	r5, r5, #21
    7ee8:	2d01      	cmp	r5, #1
    7eea:	dc00      	bgt.n	7eee <__aeabi_dsub+0x26a>
    7eec:	e0f2      	b.n	80d4 <__aeabi_dsub+0x450>
    7eee:	4650      	mov	r0, sl
    7ef0:	1a80      	subs	r0, r0, r2
    7ef2:	4582      	cmp	sl, r0
    7ef4:	41bf      	sbcs	r7, r7
    7ef6:	1a65      	subs	r5, r4, r1
    7ef8:	427f      	negs	r7, r7
    7efa:	1bed      	subs	r5, r5, r7
    7efc:	4684      	mov	ip, r0
    7efe:	0228      	lsls	r0, r5, #8
    7f00:	d400      	bmi.n	7f04 <__aeabi_dsub+0x280>
    7f02:	e08c      	b.n	801e <__aeabi_dsub+0x39a>
    7f04:	4650      	mov	r0, sl
    7f06:	1a17      	subs	r7, r2, r0
    7f08:	42ba      	cmp	r2, r7
    7f0a:	4192      	sbcs	r2, r2
    7f0c:	1b0c      	subs	r4, r1, r4
    7f0e:	4255      	negs	r5, r2
    7f10:	1b65      	subs	r5, r4, r5
    7f12:	4698      	mov	r8, r3
    7f14:	e714      	b.n	7d40 <__aeabi_dsub+0xbc>
    7f16:	2501      	movs	r5, #1
    7f18:	4643      	mov	r3, r8
    7f1a:	2400      	movs	r4, #0
    7f1c:	401d      	ands	r5, r3
    7f1e:	2700      	movs	r7, #0
    7f20:	e755      	b.n	7dce <__aeabi_dsub+0x14a>
    7f22:	4c2a      	ldr	r4, [pc, #168]	; (7fcc <__aeabi_dsub+0x348>)
    7f24:	1af6      	subs	r6, r6, r3
    7f26:	402c      	ands	r4, r5
    7f28:	e732      	b.n	7d90 <__aeabi_dsub+0x10c>
    7f2a:	003d      	movs	r5, r7
    7f2c:	3828      	subs	r0, #40	; 0x28
    7f2e:	4085      	lsls	r5, r0
    7f30:	2700      	movs	r7, #0
    7f32:	e717      	b.n	7d64 <__aeabi_dsub+0xe0>
    7f34:	0038      	movs	r0, r7
    7f36:	f000 faf9 	bl	852c <__clzsi2>
    7f3a:	3020      	adds	r0, #32
    7f3c:	e706      	b.n	7d4c <__aeabi_dsub+0xc8>
    7f3e:	430a      	orrs	r2, r1
    7f40:	0017      	movs	r7, r2
    7f42:	2100      	movs	r1, #0
    7f44:	1e7a      	subs	r2, r7, #1
    7f46:	4197      	sbcs	r7, r2
    7f48:	e6ee      	b.n	7d28 <__aeabi_dsub+0xa4>
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d000      	beq.n	7f50 <__aeabi_dsub+0x2cc>
    7f4e:	e0e5      	b.n	811c <__aeabi_dsub+0x498>
    7f50:	1c73      	adds	r3, r6, #1
    7f52:	469c      	mov	ip, r3
    7f54:	055b      	lsls	r3, r3, #21
    7f56:	0d5b      	lsrs	r3, r3, #21
    7f58:	2b01      	cmp	r3, #1
    7f5a:	dc00      	bgt.n	7f5e <__aeabi_dsub+0x2da>
    7f5c:	e09f      	b.n	809e <__aeabi_dsub+0x41a>
    7f5e:	4b1a      	ldr	r3, [pc, #104]	; (7fc8 <__aeabi_dsub+0x344>)
    7f60:	459c      	cmp	ip, r3
    7f62:	d100      	bne.n	7f66 <__aeabi_dsub+0x2e2>
    7f64:	e0c5      	b.n	80f2 <__aeabi_dsub+0x46e>
    7f66:	4452      	add	r2, sl
    7f68:	4552      	cmp	r2, sl
    7f6a:	4180      	sbcs	r0, r0
    7f6c:	1864      	adds	r4, r4, r1
    7f6e:	4240      	negs	r0, r0
    7f70:	1824      	adds	r4, r4, r0
    7f72:	07e7      	lsls	r7, r4, #31
    7f74:	0852      	lsrs	r2, r2, #1
    7f76:	4317      	orrs	r7, r2
    7f78:	0864      	lsrs	r4, r4, #1
    7f7a:	4666      	mov	r6, ip
    7f7c:	e708      	b.n	7d90 <__aeabi_dsub+0x10c>
    7f7e:	4812      	ldr	r0, [pc, #72]	; (7fc8 <__aeabi_dsub+0x344>)
    7f80:	4285      	cmp	r5, r0
    7f82:	d100      	bne.n	7f86 <__aeabi_dsub+0x302>
    7f84:	e085      	b.n	8092 <__aeabi_dsub+0x40e>
    7f86:	001d      	movs	r5, r3
    7f88:	e6bc      	b.n	7d04 <__aeabi_dsub+0x80>
    7f8a:	0029      	movs	r1, r5
    7f8c:	3e1f      	subs	r6, #31
    7f8e:	40f1      	lsrs	r1, r6
    7f90:	2b20      	cmp	r3, #32
    7f92:	d100      	bne.n	7f96 <__aeabi_dsub+0x312>
    7f94:	e07f      	b.n	8096 <__aeabi_dsub+0x412>
    7f96:	2240      	movs	r2, #64	; 0x40
    7f98:	1ad3      	subs	r3, r2, r3
    7f9a:	409d      	lsls	r5, r3
    7f9c:	432f      	orrs	r7, r5
    7f9e:	1e7d      	subs	r5, r7, #1
    7fa0:	41af      	sbcs	r7, r5
    7fa2:	2400      	movs	r4, #0
    7fa4:	430f      	orrs	r7, r1
    7fa6:	2600      	movs	r6, #0
    7fa8:	e78e      	b.n	7ec8 <__aeabi_dsub+0x244>
    7faa:	002b      	movs	r3, r5
    7fac:	000f      	movs	r7, r1
    7fae:	3b20      	subs	r3, #32
    7fb0:	40df      	lsrs	r7, r3
    7fb2:	2d20      	cmp	r5, #32
    7fb4:	d071      	beq.n	809a <__aeabi_dsub+0x416>
    7fb6:	2340      	movs	r3, #64	; 0x40
    7fb8:	1b5d      	subs	r5, r3, r5
    7fba:	40a9      	lsls	r1, r5
    7fbc:	430a      	orrs	r2, r1
    7fbe:	1e51      	subs	r1, r2, #1
    7fc0:	418a      	sbcs	r2, r1
    7fc2:	2100      	movs	r1, #0
    7fc4:	4317      	orrs	r7, r2
    7fc6:	e6af      	b.n	7d28 <__aeabi_dsub+0xa4>
    7fc8:	000007ff 	.word	0x000007ff
    7fcc:	ff7fffff 	.word	0xff7fffff
    7fd0:	800fffff 	.word	0x800fffff
    7fd4:	2e00      	cmp	r6, #0
    7fd6:	d03e      	beq.n	8056 <__aeabi_dsub+0x3d2>
    7fd8:	4eb3      	ldr	r6, [pc, #716]	; (82a8 <__aeabi_dsub+0x624>)
    7fda:	45b4      	cmp	ip, r6
    7fdc:	d045      	beq.n	806a <__aeabi_dsub+0x3e6>
    7fde:	2680      	movs	r6, #128	; 0x80
    7fe0:	0436      	lsls	r6, r6, #16
    7fe2:	426d      	negs	r5, r5
    7fe4:	4334      	orrs	r4, r6
    7fe6:	2d38      	cmp	r5, #56	; 0x38
    7fe8:	dd00      	ble.n	7fec <__aeabi_dsub+0x368>
    7fea:	e0a8      	b.n	813e <__aeabi_dsub+0x4ba>
    7fec:	2d1f      	cmp	r5, #31
    7fee:	dd00      	ble.n	7ff2 <__aeabi_dsub+0x36e>
    7ff0:	e11f      	b.n	8232 <__aeabi_dsub+0x5ae>
    7ff2:	2620      	movs	r6, #32
    7ff4:	0027      	movs	r7, r4
    7ff6:	4650      	mov	r0, sl
    7ff8:	1b76      	subs	r6, r6, r5
    7ffa:	40b7      	lsls	r7, r6
    7ffc:	40e8      	lsrs	r0, r5
    7ffe:	4307      	orrs	r7, r0
    8000:	4650      	mov	r0, sl
    8002:	40b0      	lsls	r0, r6
    8004:	1e46      	subs	r6, r0, #1
    8006:	41b0      	sbcs	r0, r6
    8008:	40ec      	lsrs	r4, r5
    800a:	4338      	orrs	r0, r7
    800c:	1a17      	subs	r7, r2, r0
    800e:	42ba      	cmp	r2, r7
    8010:	4192      	sbcs	r2, r2
    8012:	1b0c      	subs	r4, r1, r4
    8014:	4252      	negs	r2, r2
    8016:	1aa4      	subs	r4, r4, r2
    8018:	4666      	mov	r6, ip
    801a:	4698      	mov	r8, r3
    801c:	e68b      	b.n	7d36 <__aeabi_dsub+0xb2>
    801e:	4664      	mov	r4, ip
    8020:	4667      	mov	r7, ip
    8022:	432c      	orrs	r4, r5
    8024:	d000      	beq.n	8028 <__aeabi_dsub+0x3a4>
    8026:	e68b      	b.n	7d40 <__aeabi_dsub+0xbc>
    8028:	2500      	movs	r5, #0
    802a:	2600      	movs	r6, #0
    802c:	2700      	movs	r7, #0
    802e:	e6ea      	b.n	7e06 <__aeabi_dsub+0x182>
    8030:	001e      	movs	r6, r3
    8032:	e6ad      	b.n	7d90 <__aeabi_dsub+0x10c>
    8034:	2b1f      	cmp	r3, #31
    8036:	dc60      	bgt.n	80fa <__aeabi_dsub+0x476>
    8038:	2720      	movs	r7, #32
    803a:	1af8      	subs	r0, r7, r3
    803c:	000f      	movs	r7, r1
    803e:	4684      	mov	ip, r0
    8040:	4087      	lsls	r7, r0
    8042:	0010      	movs	r0, r2
    8044:	40d8      	lsrs	r0, r3
    8046:	4307      	orrs	r7, r0
    8048:	4660      	mov	r0, ip
    804a:	4082      	lsls	r2, r0
    804c:	1e50      	subs	r0, r2, #1
    804e:	4182      	sbcs	r2, r0
    8050:	40d9      	lsrs	r1, r3
    8052:	4317      	orrs	r7, r2
    8054:	e6f5      	b.n	7e42 <__aeabi_dsub+0x1be>
    8056:	0026      	movs	r6, r4
    8058:	4650      	mov	r0, sl
    805a:	4306      	orrs	r6, r0
    805c:	d005      	beq.n	806a <__aeabi_dsub+0x3e6>
    805e:	43ed      	mvns	r5, r5
    8060:	2d00      	cmp	r5, #0
    8062:	d0d3      	beq.n	800c <__aeabi_dsub+0x388>
    8064:	4e90      	ldr	r6, [pc, #576]	; (82a8 <__aeabi_dsub+0x624>)
    8066:	45b4      	cmp	ip, r6
    8068:	d1bd      	bne.n	7fe6 <__aeabi_dsub+0x362>
    806a:	000c      	movs	r4, r1
    806c:	0017      	movs	r7, r2
    806e:	4666      	mov	r6, ip
    8070:	4698      	mov	r8, r3
    8072:	e68d      	b.n	7d90 <__aeabi_dsub+0x10c>
    8074:	488c      	ldr	r0, [pc, #560]	; (82a8 <__aeabi_dsub+0x624>)
    8076:	4283      	cmp	r3, r0
    8078:	d00b      	beq.n	8092 <__aeabi_dsub+0x40e>
    807a:	4663      	mov	r3, ip
    807c:	e6d9      	b.n	7e32 <__aeabi_dsub+0x1ae>
    807e:	2d00      	cmp	r5, #0
    8080:	d000      	beq.n	8084 <__aeabi_dsub+0x400>
    8082:	e096      	b.n	81b2 <__aeabi_dsub+0x52e>
    8084:	0008      	movs	r0, r1
    8086:	4310      	orrs	r0, r2
    8088:	d100      	bne.n	808c <__aeabi_dsub+0x408>
    808a:	e0e2      	b.n	8252 <__aeabi_dsub+0x5ce>
    808c:	000c      	movs	r4, r1
    808e:	0017      	movs	r7, r2
    8090:	4698      	mov	r8, r3
    8092:	4e85      	ldr	r6, [pc, #532]	; (82a8 <__aeabi_dsub+0x624>)
    8094:	e67c      	b.n	7d90 <__aeabi_dsub+0x10c>
    8096:	2500      	movs	r5, #0
    8098:	e780      	b.n	7f9c <__aeabi_dsub+0x318>
    809a:	2100      	movs	r1, #0
    809c:	e78e      	b.n	7fbc <__aeabi_dsub+0x338>
    809e:	0023      	movs	r3, r4
    80a0:	4650      	mov	r0, sl
    80a2:	4303      	orrs	r3, r0
    80a4:	2e00      	cmp	r6, #0
    80a6:	d000      	beq.n	80aa <__aeabi_dsub+0x426>
    80a8:	e0a8      	b.n	81fc <__aeabi_dsub+0x578>
    80aa:	2b00      	cmp	r3, #0
    80ac:	d100      	bne.n	80b0 <__aeabi_dsub+0x42c>
    80ae:	e0de      	b.n	826e <__aeabi_dsub+0x5ea>
    80b0:	000b      	movs	r3, r1
    80b2:	4313      	orrs	r3, r2
    80b4:	d100      	bne.n	80b8 <__aeabi_dsub+0x434>
    80b6:	e66b      	b.n	7d90 <__aeabi_dsub+0x10c>
    80b8:	4452      	add	r2, sl
    80ba:	4552      	cmp	r2, sl
    80bc:	4180      	sbcs	r0, r0
    80be:	1864      	adds	r4, r4, r1
    80c0:	4240      	negs	r0, r0
    80c2:	1824      	adds	r4, r4, r0
    80c4:	0017      	movs	r7, r2
    80c6:	0223      	lsls	r3, r4, #8
    80c8:	d400      	bmi.n	80cc <__aeabi_dsub+0x448>
    80ca:	e6fd      	b.n	7ec8 <__aeabi_dsub+0x244>
    80cc:	4b77      	ldr	r3, [pc, #476]	; (82ac <__aeabi_dsub+0x628>)
    80ce:	4666      	mov	r6, ip
    80d0:	401c      	ands	r4, r3
    80d2:	e65d      	b.n	7d90 <__aeabi_dsub+0x10c>
    80d4:	0025      	movs	r5, r4
    80d6:	4650      	mov	r0, sl
    80d8:	4305      	orrs	r5, r0
    80da:	2e00      	cmp	r6, #0
    80dc:	d1cf      	bne.n	807e <__aeabi_dsub+0x3fa>
    80de:	2d00      	cmp	r5, #0
    80e0:	d14f      	bne.n	8182 <__aeabi_dsub+0x4fe>
    80e2:	000c      	movs	r4, r1
    80e4:	4314      	orrs	r4, r2
    80e6:	d100      	bne.n	80ea <__aeabi_dsub+0x466>
    80e8:	e0a0      	b.n	822c <__aeabi_dsub+0x5a8>
    80ea:	000c      	movs	r4, r1
    80ec:	0017      	movs	r7, r2
    80ee:	4698      	mov	r8, r3
    80f0:	e64e      	b.n	7d90 <__aeabi_dsub+0x10c>
    80f2:	4666      	mov	r6, ip
    80f4:	2400      	movs	r4, #0
    80f6:	2700      	movs	r7, #0
    80f8:	e685      	b.n	7e06 <__aeabi_dsub+0x182>
    80fa:	001f      	movs	r7, r3
    80fc:	0008      	movs	r0, r1
    80fe:	3f20      	subs	r7, #32
    8100:	40f8      	lsrs	r0, r7
    8102:	0007      	movs	r7, r0
    8104:	2b20      	cmp	r3, #32
    8106:	d100      	bne.n	810a <__aeabi_dsub+0x486>
    8108:	e08e      	b.n	8228 <__aeabi_dsub+0x5a4>
    810a:	2040      	movs	r0, #64	; 0x40
    810c:	1ac3      	subs	r3, r0, r3
    810e:	4099      	lsls	r1, r3
    8110:	430a      	orrs	r2, r1
    8112:	1e51      	subs	r1, r2, #1
    8114:	418a      	sbcs	r2, r1
    8116:	2100      	movs	r1, #0
    8118:	4317      	orrs	r7, r2
    811a:	e692      	b.n	7e42 <__aeabi_dsub+0x1be>
    811c:	2e00      	cmp	r6, #0
    811e:	d114      	bne.n	814a <__aeabi_dsub+0x4c6>
    8120:	0026      	movs	r6, r4
    8122:	4650      	mov	r0, sl
    8124:	4306      	orrs	r6, r0
    8126:	d062      	beq.n	81ee <__aeabi_dsub+0x56a>
    8128:	43db      	mvns	r3, r3
    812a:	2b00      	cmp	r3, #0
    812c:	d15c      	bne.n	81e8 <__aeabi_dsub+0x564>
    812e:	1887      	adds	r7, r0, r2
    8130:	4297      	cmp	r7, r2
    8132:	4192      	sbcs	r2, r2
    8134:	1864      	adds	r4, r4, r1
    8136:	4252      	negs	r2, r2
    8138:	18a4      	adds	r4, r4, r2
    813a:	4666      	mov	r6, ip
    813c:	e687      	b.n	7e4e <__aeabi_dsub+0x1ca>
    813e:	4650      	mov	r0, sl
    8140:	4320      	orrs	r0, r4
    8142:	1e44      	subs	r4, r0, #1
    8144:	41a0      	sbcs	r0, r4
    8146:	2400      	movs	r4, #0
    8148:	e760      	b.n	800c <__aeabi_dsub+0x388>
    814a:	4e57      	ldr	r6, [pc, #348]	; (82a8 <__aeabi_dsub+0x624>)
    814c:	45b4      	cmp	ip, r6
    814e:	d04e      	beq.n	81ee <__aeabi_dsub+0x56a>
    8150:	2680      	movs	r6, #128	; 0x80
    8152:	0436      	lsls	r6, r6, #16
    8154:	425b      	negs	r3, r3
    8156:	4334      	orrs	r4, r6
    8158:	2b38      	cmp	r3, #56	; 0x38
    815a:	dd00      	ble.n	815e <__aeabi_dsub+0x4da>
    815c:	e07f      	b.n	825e <__aeabi_dsub+0x5da>
    815e:	2b1f      	cmp	r3, #31
    8160:	dd00      	ble.n	8164 <__aeabi_dsub+0x4e0>
    8162:	e08b      	b.n	827c <__aeabi_dsub+0x5f8>
    8164:	2620      	movs	r6, #32
    8166:	0027      	movs	r7, r4
    8168:	4650      	mov	r0, sl
    816a:	1af6      	subs	r6, r6, r3
    816c:	40b7      	lsls	r7, r6
    816e:	40d8      	lsrs	r0, r3
    8170:	4307      	orrs	r7, r0
    8172:	4650      	mov	r0, sl
    8174:	40b0      	lsls	r0, r6
    8176:	1e46      	subs	r6, r0, #1
    8178:	41b0      	sbcs	r0, r6
    817a:	4307      	orrs	r7, r0
    817c:	40dc      	lsrs	r4, r3
    817e:	18bf      	adds	r7, r7, r2
    8180:	e7d6      	b.n	8130 <__aeabi_dsub+0x4ac>
    8182:	000d      	movs	r5, r1
    8184:	4315      	orrs	r5, r2
    8186:	d100      	bne.n	818a <__aeabi_dsub+0x506>
    8188:	e602      	b.n	7d90 <__aeabi_dsub+0x10c>
    818a:	4650      	mov	r0, sl
    818c:	1a80      	subs	r0, r0, r2
    818e:	4582      	cmp	sl, r0
    8190:	41bf      	sbcs	r7, r7
    8192:	1a65      	subs	r5, r4, r1
    8194:	427f      	negs	r7, r7
    8196:	1bed      	subs	r5, r5, r7
    8198:	4684      	mov	ip, r0
    819a:	0228      	lsls	r0, r5, #8
    819c:	d400      	bmi.n	81a0 <__aeabi_dsub+0x51c>
    819e:	e68d      	b.n	7ebc <__aeabi_dsub+0x238>
    81a0:	4650      	mov	r0, sl
    81a2:	1a17      	subs	r7, r2, r0
    81a4:	42ba      	cmp	r2, r7
    81a6:	4192      	sbcs	r2, r2
    81a8:	1b0c      	subs	r4, r1, r4
    81aa:	4252      	negs	r2, r2
    81ac:	1aa4      	subs	r4, r4, r2
    81ae:	4698      	mov	r8, r3
    81b0:	e5ee      	b.n	7d90 <__aeabi_dsub+0x10c>
    81b2:	000d      	movs	r5, r1
    81b4:	4315      	orrs	r5, r2
    81b6:	d100      	bne.n	81ba <__aeabi_dsub+0x536>
    81b8:	e76b      	b.n	8092 <__aeabi_dsub+0x40e>
    81ba:	4650      	mov	r0, sl
    81bc:	0767      	lsls	r7, r4, #29
    81be:	08c0      	lsrs	r0, r0, #3
    81c0:	4307      	orrs	r7, r0
    81c2:	2080      	movs	r0, #128	; 0x80
    81c4:	08e4      	lsrs	r4, r4, #3
    81c6:	0300      	lsls	r0, r0, #12
    81c8:	4204      	tst	r4, r0
    81ca:	d007      	beq.n	81dc <__aeabi_dsub+0x558>
    81cc:	08cd      	lsrs	r5, r1, #3
    81ce:	4205      	tst	r5, r0
    81d0:	d104      	bne.n	81dc <__aeabi_dsub+0x558>
    81d2:	002c      	movs	r4, r5
    81d4:	4698      	mov	r8, r3
    81d6:	08d7      	lsrs	r7, r2, #3
    81d8:	0749      	lsls	r1, r1, #29
    81da:	430f      	orrs	r7, r1
    81dc:	0f7b      	lsrs	r3, r7, #29
    81de:	00e4      	lsls	r4, r4, #3
    81e0:	431c      	orrs	r4, r3
    81e2:	00ff      	lsls	r7, r7, #3
    81e4:	4e30      	ldr	r6, [pc, #192]	; (82a8 <__aeabi_dsub+0x624>)
    81e6:	e5d3      	b.n	7d90 <__aeabi_dsub+0x10c>
    81e8:	4e2f      	ldr	r6, [pc, #188]	; (82a8 <__aeabi_dsub+0x624>)
    81ea:	45b4      	cmp	ip, r6
    81ec:	d1b4      	bne.n	8158 <__aeabi_dsub+0x4d4>
    81ee:	000c      	movs	r4, r1
    81f0:	0017      	movs	r7, r2
    81f2:	4666      	mov	r6, ip
    81f4:	e5cc      	b.n	7d90 <__aeabi_dsub+0x10c>
    81f6:	2700      	movs	r7, #0
    81f8:	2400      	movs	r4, #0
    81fa:	e5e8      	b.n	7dce <__aeabi_dsub+0x14a>
    81fc:	2b00      	cmp	r3, #0
    81fe:	d039      	beq.n	8274 <__aeabi_dsub+0x5f0>
    8200:	000b      	movs	r3, r1
    8202:	4313      	orrs	r3, r2
    8204:	d100      	bne.n	8208 <__aeabi_dsub+0x584>
    8206:	e744      	b.n	8092 <__aeabi_dsub+0x40e>
    8208:	08c0      	lsrs	r0, r0, #3
    820a:	0767      	lsls	r7, r4, #29
    820c:	4307      	orrs	r7, r0
    820e:	2080      	movs	r0, #128	; 0x80
    8210:	08e4      	lsrs	r4, r4, #3
    8212:	0300      	lsls	r0, r0, #12
    8214:	4204      	tst	r4, r0
    8216:	d0e1      	beq.n	81dc <__aeabi_dsub+0x558>
    8218:	08cb      	lsrs	r3, r1, #3
    821a:	4203      	tst	r3, r0
    821c:	d1de      	bne.n	81dc <__aeabi_dsub+0x558>
    821e:	08d7      	lsrs	r7, r2, #3
    8220:	0749      	lsls	r1, r1, #29
    8222:	430f      	orrs	r7, r1
    8224:	001c      	movs	r4, r3
    8226:	e7d9      	b.n	81dc <__aeabi_dsub+0x558>
    8228:	2100      	movs	r1, #0
    822a:	e771      	b.n	8110 <__aeabi_dsub+0x48c>
    822c:	2500      	movs	r5, #0
    822e:	2700      	movs	r7, #0
    8230:	e5e9      	b.n	7e06 <__aeabi_dsub+0x182>
    8232:	002e      	movs	r6, r5
    8234:	0027      	movs	r7, r4
    8236:	3e20      	subs	r6, #32
    8238:	40f7      	lsrs	r7, r6
    823a:	2d20      	cmp	r5, #32
    823c:	d02f      	beq.n	829e <__aeabi_dsub+0x61a>
    823e:	2640      	movs	r6, #64	; 0x40
    8240:	1b75      	subs	r5, r6, r5
    8242:	40ac      	lsls	r4, r5
    8244:	4650      	mov	r0, sl
    8246:	4320      	orrs	r0, r4
    8248:	1e44      	subs	r4, r0, #1
    824a:	41a0      	sbcs	r0, r4
    824c:	2400      	movs	r4, #0
    824e:	4338      	orrs	r0, r7
    8250:	e6dc      	b.n	800c <__aeabi_dsub+0x388>
    8252:	2480      	movs	r4, #128	; 0x80
    8254:	2500      	movs	r5, #0
    8256:	0324      	lsls	r4, r4, #12
    8258:	4e13      	ldr	r6, [pc, #76]	; (82a8 <__aeabi_dsub+0x624>)
    825a:	2700      	movs	r7, #0
    825c:	e5d3      	b.n	7e06 <__aeabi_dsub+0x182>
    825e:	4650      	mov	r0, sl
    8260:	4320      	orrs	r0, r4
    8262:	0007      	movs	r7, r0
    8264:	1e78      	subs	r0, r7, #1
    8266:	4187      	sbcs	r7, r0
    8268:	2400      	movs	r4, #0
    826a:	18bf      	adds	r7, r7, r2
    826c:	e760      	b.n	8130 <__aeabi_dsub+0x4ac>
    826e:	000c      	movs	r4, r1
    8270:	0017      	movs	r7, r2
    8272:	e58d      	b.n	7d90 <__aeabi_dsub+0x10c>
    8274:	000c      	movs	r4, r1
    8276:	0017      	movs	r7, r2
    8278:	4e0b      	ldr	r6, [pc, #44]	; (82a8 <__aeabi_dsub+0x624>)
    827a:	e589      	b.n	7d90 <__aeabi_dsub+0x10c>
    827c:	001e      	movs	r6, r3
    827e:	0027      	movs	r7, r4
    8280:	3e20      	subs	r6, #32
    8282:	40f7      	lsrs	r7, r6
    8284:	2b20      	cmp	r3, #32
    8286:	d00c      	beq.n	82a2 <__aeabi_dsub+0x61e>
    8288:	2640      	movs	r6, #64	; 0x40
    828a:	1af3      	subs	r3, r6, r3
    828c:	409c      	lsls	r4, r3
    828e:	4650      	mov	r0, sl
    8290:	4320      	orrs	r0, r4
    8292:	1e44      	subs	r4, r0, #1
    8294:	41a0      	sbcs	r0, r4
    8296:	4307      	orrs	r7, r0
    8298:	2400      	movs	r4, #0
    829a:	18bf      	adds	r7, r7, r2
    829c:	e748      	b.n	8130 <__aeabi_dsub+0x4ac>
    829e:	2400      	movs	r4, #0
    82a0:	e7d0      	b.n	8244 <__aeabi_dsub+0x5c0>
    82a2:	2400      	movs	r4, #0
    82a4:	e7f3      	b.n	828e <__aeabi_dsub+0x60a>
    82a6:	46c0      	nop			; (mov r8, r8)
    82a8:	000007ff 	.word	0x000007ff
    82ac:	ff7fffff 	.word	0xff7fffff

000082b0 <__aeabi_d2iz>:
    82b0:	b530      	push	{r4, r5, lr}
    82b2:	4d13      	ldr	r5, [pc, #76]	; (8300 <__aeabi_d2iz+0x50>)
    82b4:	030a      	lsls	r2, r1, #12
    82b6:	004b      	lsls	r3, r1, #1
    82b8:	0b12      	lsrs	r2, r2, #12
    82ba:	0d5b      	lsrs	r3, r3, #21
    82bc:	0fc9      	lsrs	r1, r1, #31
    82be:	2400      	movs	r4, #0
    82c0:	42ab      	cmp	r3, r5
    82c2:	dd10      	ble.n	82e6 <__aeabi_d2iz+0x36>
    82c4:	4c0f      	ldr	r4, [pc, #60]	; (8304 <__aeabi_d2iz+0x54>)
    82c6:	42a3      	cmp	r3, r4
    82c8:	dc0f      	bgt.n	82ea <__aeabi_d2iz+0x3a>
    82ca:	2480      	movs	r4, #128	; 0x80
    82cc:	4d0e      	ldr	r5, [pc, #56]	; (8308 <__aeabi_d2iz+0x58>)
    82ce:	0364      	lsls	r4, r4, #13
    82d0:	4322      	orrs	r2, r4
    82d2:	1aed      	subs	r5, r5, r3
    82d4:	2d1f      	cmp	r5, #31
    82d6:	dd0b      	ble.n	82f0 <__aeabi_d2iz+0x40>
    82d8:	480c      	ldr	r0, [pc, #48]	; (830c <__aeabi_d2iz+0x5c>)
    82da:	1ac3      	subs	r3, r0, r3
    82dc:	40da      	lsrs	r2, r3
    82de:	4254      	negs	r4, r2
    82e0:	2900      	cmp	r1, #0
    82e2:	d100      	bne.n	82e6 <__aeabi_d2iz+0x36>
    82e4:	0014      	movs	r4, r2
    82e6:	0020      	movs	r0, r4
    82e8:	bd30      	pop	{r4, r5, pc}
    82ea:	4b09      	ldr	r3, [pc, #36]	; (8310 <__aeabi_d2iz+0x60>)
    82ec:	18cc      	adds	r4, r1, r3
    82ee:	e7fa      	b.n	82e6 <__aeabi_d2iz+0x36>
    82f0:	4c08      	ldr	r4, [pc, #32]	; (8314 <__aeabi_d2iz+0x64>)
    82f2:	40e8      	lsrs	r0, r5
    82f4:	46a4      	mov	ip, r4
    82f6:	4463      	add	r3, ip
    82f8:	409a      	lsls	r2, r3
    82fa:	4302      	orrs	r2, r0
    82fc:	e7ef      	b.n	82de <__aeabi_d2iz+0x2e>
    82fe:	46c0      	nop			; (mov r8, r8)
    8300:	000003fe 	.word	0x000003fe
    8304:	0000041d 	.word	0x0000041d
    8308:	00000433 	.word	0x00000433
    830c:	00000413 	.word	0x00000413
    8310:	7fffffff 	.word	0x7fffffff
    8314:	fffffbed 	.word	0xfffffbed

00008318 <__aeabi_i2d>:
    8318:	b570      	push	{r4, r5, r6, lr}
    831a:	2800      	cmp	r0, #0
    831c:	d030      	beq.n	8380 <__aeabi_i2d+0x68>
    831e:	17c3      	asrs	r3, r0, #31
    8320:	18c4      	adds	r4, r0, r3
    8322:	405c      	eors	r4, r3
    8324:	0fc5      	lsrs	r5, r0, #31
    8326:	0020      	movs	r0, r4
    8328:	f000 f900 	bl	852c <__clzsi2>
    832c:	4b17      	ldr	r3, [pc, #92]	; (838c <__aeabi_i2d+0x74>)
    832e:	4a18      	ldr	r2, [pc, #96]	; (8390 <__aeabi_i2d+0x78>)
    8330:	1a1b      	subs	r3, r3, r0
    8332:	1ad2      	subs	r2, r2, r3
    8334:	2a1f      	cmp	r2, #31
    8336:	dd18      	ble.n	836a <__aeabi_i2d+0x52>
    8338:	4a16      	ldr	r2, [pc, #88]	; (8394 <__aeabi_i2d+0x7c>)
    833a:	1ad2      	subs	r2, r2, r3
    833c:	4094      	lsls	r4, r2
    833e:	2200      	movs	r2, #0
    8340:	0324      	lsls	r4, r4, #12
    8342:	055b      	lsls	r3, r3, #21
    8344:	0b24      	lsrs	r4, r4, #12
    8346:	0d5b      	lsrs	r3, r3, #21
    8348:	2100      	movs	r1, #0
    834a:	0010      	movs	r0, r2
    834c:	0324      	lsls	r4, r4, #12
    834e:	0d0a      	lsrs	r2, r1, #20
    8350:	0b24      	lsrs	r4, r4, #12
    8352:	0512      	lsls	r2, r2, #20
    8354:	4322      	orrs	r2, r4
    8356:	4c10      	ldr	r4, [pc, #64]	; (8398 <__aeabi_i2d+0x80>)
    8358:	051b      	lsls	r3, r3, #20
    835a:	4022      	ands	r2, r4
    835c:	4313      	orrs	r3, r2
    835e:	005b      	lsls	r3, r3, #1
    8360:	07ed      	lsls	r5, r5, #31
    8362:	085b      	lsrs	r3, r3, #1
    8364:	432b      	orrs	r3, r5
    8366:	0019      	movs	r1, r3
    8368:	bd70      	pop	{r4, r5, r6, pc}
    836a:	0021      	movs	r1, r4
    836c:	4091      	lsls	r1, r2
    836e:	000a      	movs	r2, r1
    8370:	210b      	movs	r1, #11
    8372:	1a08      	subs	r0, r1, r0
    8374:	40c4      	lsrs	r4, r0
    8376:	055b      	lsls	r3, r3, #21
    8378:	0324      	lsls	r4, r4, #12
    837a:	0b24      	lsrs	r4, r4, #12
    837c:	0d5b      	lsrs	r3, r3, #21
    837e:	e7e3      	b.n	8348 <__aeabi_i2d+0x30>
    8380:	2500      	movs	r5, #0
    8382:	2300      	movs	r3, #0
    8384:	2400      	movs	r4, #0
    8386:	2200      	movs	r2, #0
    8388:	e7de      	b.n	8348 <__aeabi_i2d+0x30>
    838a:	46c0      	nop			; (mov r8, r8)
    838c:	0000041e 	.word	0x0000041e
    8390:	00000433 	.word	0x00000433
    8394:	00000413 	.word	0x00000413
    8398:	800fffff 	.word	0x800fffff

0000839c <__aeabi_ui2d>:
    839c:	b510      	push	{r4, lr}
    839e:	1e04      	subs	r4, r0, #0
    83a0:	d028      	beq.n	83f4 <__aeabi_ui2d+0x58>
    83a2:	f000 f8c3 	bl	852c <__clzsi2>
    83a6:	4b15      	ldr	r3, [pc, #84]	; (83fc <__aeabi_ui2d+0x60>)
    83a8:	4a15      	ldr	r2, [pc, #84]	; (8400 <__aeabi_ui2d+0x64>)
    83aa:	1a1b      	subs	r3, r3, r0
    83ac:	1ad2      	subs	r2, r2, r3
    83ae:	2a1f      	cmp	r2, #31
    83b0:	dd15      	ble.n	83de <__aeabi_ui2d+0x42>
    83b2:	4a14      	ldr	r2, [pc, #80]	; (8404 <__aeabi_ui2d+0x68>)
    83b4:	1ad2      	subs	r2, r2, r3
    83b6:	4094      	lsls	r4, r2
    83b8:	2200      	movs	r2, #0
    83ba:	0324      	lsls	r4, r4, #12
    83bc:	055b      	lsls	r3, r3, #21
    83be:	0b24      	lsrs	r4, r4, #12
    83c0:	0d5b      	lsrs	r3, r3, #21
    83c2:	2100      	movs	r1, #0
    83c4:	0010      	movs	r0, r2
    83c6:	0324      	lsls	r4, r4, #12
    83c8:	0d0a      	lsrs	r2, r1, #20
    83ca:	0b24      	lsrs	r4, r4, #12
    83cc:	0512      	lsls	r2, r2, #20
    83ce:	4322      	orrs	r2, r4
    83d0:	4c0d      	ldr	r4, [pc, #52]	; (8408 <__aeabi_ui2d+0x6c>)
    83d2:	051b      	lsls	r3, r3, #20
    83d4:	4022      	ands	r2, r4
    83d6:	4313      	orrs	r3, r2
    83d8:	005b      	lsls	r3, r3, #1
    83da:	0859      	lsrs	r1, r3, #1
    83dc:	bd10      	pop	{r4, pc}
    83de:	0021      	movs	r1, r4
    83e0:	4091      	lsls	r1, r2
    83e2:	000a      	movs	r2, r1
    83e4:	210b      	movs	r1, #11
    83e6:	1a08      	subs	r0, r1, r0
    83e8:	40c4      	lsrs	r4, r0
    83ea:	055b      	lsls	r3, r3, #21
    83ec:	0324      	lsls	r4, r4, #12
    83ee:	0b24      	lsrs	r4, r4, #12
    83f0:	0d5b      	lsrs	r3, r3, #21
    83f2:	e7e6      	b.n	83c2 <__aeabi_ui2d+0x26>
    83f4:	2300      	movs	r3, #0
    83f6:	2400      	movs	r4, #0
    83f8:	2200      	movs	r2, #0
    83fa:	e7e2      	b.n	83c2 <__aeabi_ui2d+0x26>
    83fc:	0000041e 	.word	0x0000041e
    8400:	00000433 	.word	0x00000433
    8404:	00000413 	.word	0x00000413
    8408:	800fffff 	.word	0x800fffff

0000840c <__aeabi_f2d>:
    840c:	0041      	lsls	r1, r0, #1
    840e:	0e09      	lsrs	r1, r1, #24
    8410:	1c4b      	adds	r3, r1, #1
    8412:	b570      	push	{r4, r5, r6, lr}
    8414:	b2db      	uxtb	r3, r3
    8416:	0246      	lsls	r6, r0, #9
    8418:	0a75      	lsrs	r5, r6, #9
    841a:	0fc4      	lsrs	r4, r0, #31
    841c:	2b01      	cmp	r3, #1
    841e:	dd14      	ble.n	844a <__aeabi_f2d+0x3e>
    8420:	23e0      	movs	r3, #224	; 0xe0
    8422:	009b      	lsls	r3, r3, #2
    8424:	076d      	lsls	r5, r5, #29
    8426:	0b36      	lsrs	r6, r6, #12
    8428:	18cb      	adds	r3, r1, r3
    842a:	2100      	movs	r1, #0
    842c:	0d0a      	lsrs	r2, r1, #20
    842e:	0028      	movs	r0, r5
    8430:	0512      	lsls	r2, r2, #20
    8432:	4d1c      	ldr	r5, [pc, #112]	; (84a4 <__aeabi_f2d+0x98>)
    8434:	4332      	orrs	r2, r6
    8436:	055b      	lsls	r3, r3, #21
    8438:	402a      	ands	r2, r5
    843a:	085b      	lsrs	r3, r3, #1
    843c:	4313      	orrs	r3, r2
    843e:	005b      	lsls	r3, r3, #1
    8440:	07e4      	lsls	r4, r4, #31
    8442:	085b      	lsrs	r3, r3, #1
    8444:	4323      	orrs	r3, r4
    8446:	0019      	movs	r1, r3
    8448:	bd70      	pop	{r4, r5, r6, pc}
    844a:	2900      	cmp	r1, #0
    844c:	d114      	bne.n	8478 <__aeabi_f2d+0x6c>
    844e:	2d00      	cmp	r5, #0
    8450:	d01e      	beq.n	8490 <__aeabi_f2d+0x84>
    8452:	0028      	movs	r0, r5
    8454:	f000 f86a 	bl	852c <__clzsi2>
    8458:	280a      	cmp	r0, #10
    845a:	dc1c      	bgt.n	8496 <__aeabi_f2d+0x8a>
    845c:	230b      	movs	r3, #11
    845e:	002a      	movs	r2, r5
    8460:	1a1b      	subs	r3, r3, r0
    8462:	40da      	lsrs	r2, r3
    8464:	0003      	movs	r3, r0
    8466:	3315      	adds	r3, #21
    8468:	409d      	lsls	r5, r3
    846a:	4b0f      	ldr	r3, [pc, #60]	; (84a8 <__aeabi_f2d+0x9c>)
    846c:	0312      	lsls	r2, r2, #12
    846e:	1a1b      	subs	r3, r3, r0
    8470:	055b      	lsls	r3, r3, #21
    8472:	0b16      	lsrs	r6, r2, #12
    8474:	0d5b      	lsrs	r3, r3, #21
    8476:	e7d8      	b.n	842a <__aeabi_f2d+0x1e>
    8478:	2d00      	cmp	r5, #0
    847a:	d006      	beq.n	848a <__aeabi_f2d+0x7e>
    847c:	0b32      	lsrs	r2, r6, #12
    847e:	2680      	movs	r6, #128	; 0x80
    8480:	0336      	lsls	r6, r6, #12
    8482:	076d      	lsls	r5, r5, #29
    8484:	4316      	orrs	r6, r2
    8486:	4b09      	ldr	r3, [pc, #36]	; (84ac <__aeabi_f2d+0xa0>)
    8488:	e7cf      	b.n	842a <__aeabi_f2d+0x1e>
    848a:	4b08      	ldr	r3, [pc, #32]	; (84ac <__aeabi_f2d+0xa0>)
    848c:	2600      	movs	r6, #0
    848e:	e7cc      	b.n	842a <__aeabi_f2d+0x1e>
    8490:	2300      	movs	r3, #0
    8492:	2600      	movs	r6, #0
    8494:	e7c9      	b.n	842a <__aeabi_f2d+0x1e>
    8496:	0003      	movs	r3, r0
    8498:	002a      	movs	r2, r5
    849a:	3b0b      	subs	r3, #11
    849c:	409a      	lsls	r2, r3
    849e:	2500      	movs	r5, #0
    84a0:	e7e3      	b.n	846a <__aeabi_f2d+0x5e>
    84a2:	46c0      	nop			; (mov r8, r8)
    84a4:	800fffff 	.word	0x800fffff
    84a8:	00000389 	.word	0x00000389
    84ac:	000007ff 	.word	0x000007ff

000084b0 <__aeabi_cdrcmple>:
    84b0:	4684      	mov	ip, r0
    84b2:	1c10      	adds	r0, r2, #0
    84b4:	4662      	mov	r2, ip
    84b6:	468c      	mov	ip, r1
    84b8:	1c19      	adds	r1, r3, #0
    84ba:	4663      	mov	r3, ip
    84bc:	e000      	b.n	84c0 <__aeabi_cdcmpeq>
    84be:	46c0      	nop			; (mov r8, r8)

000084c0 <__aeabi_cdcmpeq>:
    84c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    84c2:	f000 f91b 	bl	86fc <__ledf2>
    84c6:	2800      	cmp	r0, #0
    84c8:	d401      	bmi.n	84ce <__aeabi_cdcmpeq+0xe>
    84ca:	2100      	movs	r1, #0
    84cc:	42c8      	cmn	r0, r1
    84ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000084d0 <__aeabi_dcmpeq>:
    84d0:	b510      	push	{r4, lr}
    84d2:	f000 f875 	bl	85c0 <__eqdf2>
    84d6:	4240      	negs	r0, r0
    84d8:	3001      	adds	r0, #1
    84da:	bd10      	pop	{r4, pc}

000084dc <__aeabi_dcmplt>:
    84dc:	b510      	push	{r4, lr}
    84de:	f000 f90d 	bl	86fc <__ledf2>
    84e2:	2800      	cmp	r0, #0
    84e4:	db01      	blt.n	84ea <__aeabi_dcmplt+0xe>
    84e6:	2000      	movs	r0, #0
    84e8:	bd10      	pop	{r4, pc}
    84ea:	2001      	movs	r0, #1
    84ec:	bd10      	pop	{r4, pc}
    84ee:	46c0      	nop			; (mov r8, r8)

000084f0 <__aeabi_dcmple>:
    84f0:	b510      	push	{r4, lr}
    84f2:	f000 f903 	bl	86fc <__ledf2>
    84f6:	2800      	cmp	r0, #0
    84f8:	dd01      	ble.n	84fe <__aeabi_dcmple+0xe>
    84fa:	2000      	movs	r0, #0
    84fc:	bd10      	pop	{r4, pc}
    84fe:	2001      	movs	r0, #1
    8500:	bd10      	pop	{r4, pc}
    8502:	46c0      	nop			; (mov r8, r8)

00008504 <__aeabi_dcmpgt>:
    8504:	b510      	push	{r4, lr}
    8506:	f000 f895 	bl	8634 <__gedf2>
    850a:	2800      	cmp	r0, #0
    850c:	dc01      	bgt.n	8512 <__aeabi_dcmpgt+0xe>
    850e:	2000      	movs	r0, #0
    8510:	bd10      	pop	{r4, pc}
    8512:	2001      	movs	r0, #1
    8514:	bd10      	pop	{r4, pc}
    8516:	46c0      	nop			; (mov r8, r8)

00008518 <__aeabi_dcmpge>:
    8518:	b510      	push	{r4, lr}
    851a:	f000 f88b 	bl	8634 <__gedf2>
    851e:	2800      	cmp	r0, #0
    8520:	da01      	bge.n	8526 <__aeabi_dcmpge+0xe>
    8522:	2000      	movs	r0, #0
    8524:	bd10      	pop	{r4, pc}
    8526:	2001      	movs	r0, #1
    8528:	bd10      	pop	{r4, pc}
    852a:	46c0      	nop			; (mov r8, r8)

0000852c <__clzsi2>:
    852c:	211c      	movs	r1, #28
    852e:	2301      	movs	r3, #1
    8530:	041b      	lsls	r3, r3, #16
    8532:	4298      	cmp	r0, r3
    8534:	d301      	bcc.n	853a <__clzsi2+0xe>
    8536:	0c00      	lsrs	r0, r0, #16
    8538:	3910      	subs	r1, #16
    853a:	0a1b      	lsrs	r3, r3, #8
    853c:	4298      	cmp	r0, r3
    853e:	d301      	bcc.n	8544 <__clzsi2+0x18>
    8540:	0a00      	lsrs	r0, r0, #8
    8542:	3908      	subs	r1, #8
    8544:	091b      	lsrs	r3, r3, #4
    8546:	4298      	cmp	r0, r3
    8548:	d301      	bcc.n	854e <__clzsi2+0x22>
    854a:	0900      	lsrs	r0, r0, #4
    854c:	3904      	subs	r1, #4
    854e:	a202      	add	r2, pc, #8	; (adr r2, 8558 <__clzsi2+0x2c>)
    8550:	5c10      	ldrb	r0, [r2, r0]
    8552:	1840      	adds	r0, r0, r1
    8554:	4770      	bx	lr
    8556:	46c0      	nop			; (mov r8, r8)
    8558:	02020304 	.word	0x02020304
    855c:	01010101 	.word	0x01010101
	...

00008568 <__clzdi2>:
    8568:	b510      	push	{r4, lr}
    856a:	2900      	cmp	r1, #0
    856c:	d103      	bne.n	8576 <__clzdi2+0xe>
    856e:	f7ff ffdd 	bl	852c <__clzsi2>
    8572:	3020      	adds	r0, #32
    8574:	e002      	b.n	857c <__clzdi2+0x14>
    8576:	1c08      	adds	r0, r1, #0
    8578:	f7ff ffd8 	bl	852c <__clzsi2>
    857c:	bd10      	pop	{r4, pc}
    857e:	46c0      	nop			; (mov r8, r8)

00008580 <__ctzsi2>:
    8580:	4241      	negs	r1, r0
    8582:	4008      	ands	r0, r1
    8584:	211c      	movs	r1, #28
    8586:	2301      	movs	r3, #1
    8588:	041b      	lsls	r3, r3, #16
    858a:	4298      	cmp	r0, r3
    858c:	d301      	bcc.n	8592 <__ctzsi2+0x12>
    858e:	0c00      	lsrs	r0, r0, #16
    8590:	3910      	subs	r1, #16
    8592:	0a1b      	lsrs	r3, r3, #8
    8594:	4298      	cmp	r0, r3
    8596:	d301      	bcc.n	859c <__ctzsi2+0x1c>
    8598:	0a00      	lsrs	r0, r0, #8
    859a:	3908      	subs	r1, #8
    859c:	091b      	lsrs	r3, r3, #4
    859e:	4298      	cmp	r0, r3
    85a0:	d301      	bcc.n	85a6 <__ctzsi2+0x26>
    85a2:	0900      	lsrs	r0, r0, #4
    85a4:	3904      	subs	r1, #4
    85a6:	a202      	add	r2, pc, #8	; (adr r2, 85b0 <__ctzsi2+0x30>)
    85a8:	5c10      	ldrb	r0, [r2, r0]
    85aa:	1a40      	subs	r0, r0, r1
    85ac:	4770      	bx	lr
    85ae:	46c0      	nop			; (mov r8, r8)
    85b0:	1d1d1c1b 	.word	0x1d1d1c1b
    85b4:	1e1e1e1e 	.word	0x1e1e1e1e
    85b8:	1f1f1f1f 	.word	0x1f1f1f1f
    85bc:	1f1f1f1f 	.word	0x1f1f1f1f

000085c0 <__eqdf2>:
    85c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    85c2:	464f      	mov	r7, r9
    85c4:	4646      	mov	r6, r8
    85c6:	46d6      	mov	lr, sl
    85c8:	005c      	lsls	r4, r3, #1
    85ca:	b5c0      	push	{r6, r7, lr}
    85cc:	031f      	lsls	r7, r3, #12
    85ce:	0fdb      	lsrs	r3, r3, #31
    85d0:	469a      	mov	sl, r3
    85d2:	4b17      	ldr	r3, [pc, #92]	; (8630 <__eqdf2+0x70>)
    85d4:	030e      	lsls	r6, r1, #12
    85d6:	004d      	lsls	r5, r1, #1
    85d8:	4684      	mov	ip, r0
    85da:	4680      	mov	r8, r0
    85dc:	0b36      	lsrs	r6, r6, #12
    85de:	0d6d      	lsrs	r5, r5, #21
    85e0:	0fc9      	lsrs	r1, r1, #31
    85e2:	4691      	mov	r9, r2
    85e4:	0b3f      	lsrs	r7, r7, #12
    85e6:	0d64      	lsrs	r4, r4, #21
    85e8:	2001      	movs	r0, #1
    85ea:	429d      	cmp	r5, r3
    85ec:	d008      	beq.n	8600 <__eqdf2+0x40>
    85ee:	429c      	cmp	r4, r3
    85f0:	d001      	beq.n	85f6 <__eqdf2+0x36>
    85f2:	42a5      	cmp	r5, r4
    85f4:	d00b      	beq.n	860e <__eqdf2+0x4e>
    85f6:	bc1c      	pop	{r2, r3, r4}
    85f8:	4690      	mov	r8, r2
    85fa:	4699      	mov	r9, r3
    85fc:	46a2      	mov	sl, r4
    85fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8600:	4663      	mov	r3, ip
    8602:	4333      	orrs	r3, r6
    8604:	d1f7      	bne.n	85f6 <__eqdf2+0x36>
    8606:	42ac      	cmp	r4, r5
    8608:	d1f5      	bne.n	85f6 <__eqdf2+0x36>
    860a:	433a      	orrs	r2, r7
    860c:	d1f3      	bne.n	85f6 <__eqdf2+0x36>
    860e:	2001      	movs	r0, #1
    8610:	42be      	cmp	r6, r7
    8612:	d1f0      	bne.n	85f6 <__eqdf2+0x36>
    8614:	45c8      	cmp	r8, r9
    8616:	d1ee      	bne.n	85f6 <__eqdf2+0x36>
    8618:	4551      	cmp	r1, sl
    861a:	d007      	beq.n	862c <__eqdf2+0x6c>
    861c:	2d00      	cmp	r5, #0
    861e:	d1ea      	bne.n	85f6 <__eqdf2+0x36>
    8620:	4663      	mov	r3, ip
    8622:	431e      	orrs	r6, r3
    8624:	0030      	movs	r0, r6
    8626:	1e46      	subs	r6, r0, #1
    8628:	41b0      	sbcs	r0, r6
    862a:	e7e4      	b.n	85f6 <__eqdf2+0x36>
    862c:	2000      	movs	r0, #0
    862e:	e7e2      	b.n	85f6 <__eqdf2+0x36>
    8630:	000007ff 	.word	0x000007ff

00008634 <__gedf2>:
    8634:	b5f0      	push	{r4, r5, r6, r7, lr}
    8636:	4645      	mov	r5, r8
    8638:	46de      	mov	lr, fp
    863a:	4657      	mov	r7, sl
    863c:	464e      	mov	r6, r9
    863e:	b5e0      	push	{r5, r6, r7, lr}
    8640:	031f      	lsls	r7, r3, #12
    8642:	0b3d      	lsrs	r5, r7, #12
    8644:	4f2c      	ldr	r7, [pc, #176]	; (86f8 <__gedf2+0xc4>)
    8646:	030e      	lsls	r6, r1, #12
    8648:	004c      	lsls	r4, r1, #1
    864a:	46ab      	mov	fp, r5
    864c:	005d      	lsls	r5, r3, #1
    864e:	4684      	mov	ip, r0
    8650:	0b36      	lsrs	r6, r6, #12
    8652:	0d64      	lsrs	r4, r4, #21
    8654:	0fc9      	lsrs	r1, r1, #31
    8656:	4690      	mov	r8, r2
    8658:	0d6d      	lsrs	r5, r5, #21
    865a:	0fdb      	lsrs	r3, r3, #31
    865c:	42bc      	cmp	r4, r7
    865e:	d02a      	beq.n	86b6 <__gedf2+0x82>
    8660:	4f25      	ldr	r7, [pc, #148]	; (86f8 <__gedf2+0xc4>)
    8662:	42bd      	cmp	r5, r7
    8664:	d02d      	beq.n	86c2 <__gedf2+0x8e>
    8666:	2c00      	cmp	r4, #0
    8668:	d10f      	bne.n	868a <__gedf2+0x56>
    866a:	4330      	orrs	r0, r6
    866c:	0007      	movs	r7, r0
    866e:	4681      	mov	r9, r0
    8670:	4278      	negs	r0, r7
    8672:	4178      	adcs	r0, r7
    8674:	b2c0      	uxtb	r0, r0
    8676:	2d00      	cmp	r5, #0
    8678:	d117      	bne.n	86aa <__gedf2+0x76>
    867a:	465f      	mov	r7, fp
    867c:	433a      	orrs	r2, r7
    867e:	d114      	bne.n	86aa <__gedf2+0x76>
    8680:	464b      	mov	r3, r9
    8682:	2000      	movs	r0, #0
    8684:	2b00      	cmp	r3, #0
    8686:	d00a      	beq.n	869e <__gedf2+0x6a>
    8688:	e006      	b.n	8698 <__gedf2+0x64>
    868a:	2d00      	cmp	r5, #0
    868c:	d102      	bne.n	8694 <__gedf2+0x60>
    868e:	4658      	mov	r0, fp
    8690:	4302      	orrs	r2, r0
    8692:	d001      	beq.n	8698 <__gedf2+0x64>
    8694:	4299      	cmp	r1, r3
    8696:	d018      	beq.n	86ca <__gedf2+0x96>
    8698:	4248      	negs	r0, r1
    869a:	2101      	movs	r1, #1
    869c:	4308      	orrs	r0, r1
    869e:	bc3c      	pop	{r2, r3, r4, r5}
    86a0:	4690      	mov	r8, r2
    86a2:	4699      	mov	r9, r3
    86a4:	46a2      	mov	sl, r4
    86a6:	46ab      	mov	fp, r5
    86a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    86aa:	2800      	cmp	r0, #0
    86ac:	d0f2      	beq.n	8694 <__gedf2+0x60>
    86ae:	2001      	movs	r0, #1
    86b0:	3b01      	subs	r3, #1
    86b2:	4318      	orrs	r0, r3
    86b4:	e7f3      	b.n	869e <__gedf2+0x6a>
    86b6:	0037      	movs	r7, r6
    86b8:	4307      	orrs	r7, r0
    86ba:	d0d1      	beq.n	8660 <__gedf2+0x2c>
    86bc:	2002      	movs	r0, #2
    86be:	4240      	negs	r0, r0
    86c0:	e7ed      	b.n	869e <__gedf2+0x6a>
    86c2:	465f      	mov	r7, fp
    86c4:	4317      	orrs	r7, r2
    86c6:	d0ce      	beq.n	8666 <__gedf2+0x32>
    86c8:	e7f8      	b.n	86bc <__gedf2+0x88>
    86ca:	42ac      	cmp	r4, r5
    86cc:	dce4      	bgt.n	8698 <__gedf2+0x64>
    86ce:	da03      	bge.n	86d8 <__gedf2+0xa4>
    86d0:	1e48      	subs	r0, r1, #1
    86d2:	2101      	movs	r1, #1
    86d4:	4308      	orrs	r0, r1
    86d6:	e7e2      	b.n	869e <__gedf2+0x6a>
    86d8:	455e      	cmp	r6, fp
    86da:	d8dd      	bhi.n	8698 <__gedf2+0x64>
    86dc:	d006      	beq.n	86ec <__gedf2+0xb8>
    86de:	2000      	movs	r0, #0
    86e0:	455e      	cmp	r6, fp
    86e2:	d2dc      	bcs.n	869e <__gedf2+0x6a>
    86e4:	2301      	movs	r3, #1
    86e6:	1e48      	subs	r0, r1, #1
    86e8:	4318      	orrs	r0, r3
    86ea:	e7d8      	b.n	869e <__gedf2+0x6a>
    86ec:	45c4      	cmp	ip, r8
    86ee:	d8d3      	bhi.n	8698 <__gedf2+0x64>
    86f0:	2000      	movs	r0, #0
    86f2:	45c4      	cmp	ip, r8
    86f4:	d3f6      	bcc.n	86e4 <__gedf2+0xb0>
    86f6:	e7d2      	b.n	869e <__gedf2+0x6a>
    86f8:	000007ff 	.word	0x000007ff

000086fc <__ledf2>:
    86fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    86fe:	464e      	mov	r6, r9
    8700:	4645      	mov	r5, r8
    8702:	46de      	mov	lr, fp
    8704:	4657      	mov	r7, sl
    8706:	005c      	lsls	r4, r3, #1
    8708:	b5e0      	push	{r5, r6, r7, lr}
    870a:	031f      	lsls	r7, r3, #12
    870c:	0fdb      	lsrs	r3, r3, #31
    870e:	4699      	mov	r9, r3
    8710:	4b2a      	ldr	r3, [pc, #168]	; (87bc <__ledf2+0xc0>)
    8712:	030e      	lsls	r6, r1, #12
    8714:	004d      	lsls	r5, r1, #1
    8716:	0fc9      	lsrs	r1, r1, #31
    8718:	4684      	mov	ip, r0
    871a:	0b36      	lsrs	r6, r6, #12
    871c:	0d6d      	lsrs	r5, r5, #21
    871e:	468b      	mov	fp, r1
    8720:	4690      	mov	r8, r2
    8722:	0b3f      	lsrs	r7, r7, #12
    8724:	0d64      	lsrs	r4, r4, #21
    8726:	429d      	cmp	r5, r3
    8728:	d020      	beq.n	876c <__ledf2+0x70>
    872a:	4b24      	ldr	r3, [pc, #144]	; (87bc <__ledf2+0xc0>)
    872c:	429c      	cmp	r4, r3
    872e:	d022      	beq.n	8776 <__ledf2+0x7a>
    8730:	2d00      	cmp	r5, #0
    8732:	d112      	bne.n	875a <__ledf2+0x5e>
    8734:	4330      	orrs	r0, r6
    8736:	4243      	negs	r3, r0
    8738:	4143      	adcs	r3, r0
    873a:	b2db      	uxtb	r3, r3
    873c:	2c00      	cmp	r4, #0
    873e:	d01f      	beq.n	8780 <__ledf2+0x84>
    8740:	2b00      	cmp	r3, #0
    8742:	d00c      	beq.n	875e <__ledf2+0x62>
    8744:	464b      	mov	r3, r9
    8746:	2001      	movs	r0, #1
    8748:	3b01      	subs	r3, #1
    874a:	4303      	orrs	r3, r0
    874c:	0018      	movs	r0, r3
    874e:	bc3c      	pop	{r2, r3, r4, r5}
    8750:	4690      	mov	r8, r2
    8752:	4699      	mov	r9, r3
    8754:	46a2      	mov	sl, r4
    8756:	46ab      	mov	fp, r5
    8758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    875a:	2c00      	cmp	r4, #0
    875c:	d016      	beq.n	878c <__ledf2+0x90>
    875e:	45cb      	cmp	fp, r9
    8760:	d017      	beq.n	8792 <__ledf2+0x96>
    8762:	465b      	mov	r3, fp
    8764:	4259      	negs	r1, r3
    8766:	2301      	movs	r3, #1
    8768:	430b      	orrs	r3, r1
    876a:	e7ef      	b.n	874c <__ledf2+0x50>
    876c:	0031      	movs	r1, r6
    876e:	2302      	movs	r3, #2
    8770:	4301      	orrs	r1, r0
    8772:	d1eb      	bne.n	874c <__ledf2+0x50>
    8774:	e7d9      	b.n	872a <__ledf2+0x2e>
    8776:	0039      	movs	r1, r7
    8778:	2302      	movs	r3, #2
    877a:	4311      	orrs	r1, r2
    877c:	d1e6      	bne.n	874c <__ledf2+0x50>
    877e:	e7d7      	b.n	8730 <__ledf2+0x34>
    8780:	433a      	orrs	r2, r7
    8782:	d1dd      	bne.n	8740 <__ledf2+0x44>
    8784:	2300      	movs	r3, #0
    8786:	2800      	cmp	r0, #0
    8788:	d0e0      	beq.n	874c <__ledf2+0x50>
    878a:	e7ea      	b.n	8762 <__ledf2+0x66>
    878c:	433a      	orrs	r2, r7
    878e:	d1e6      	bne.n	875e <__ledf2+0x62>
    8790:	e7e7      	b.n	8762 <__ledf2+0x66>
    8792:	42a5      	cmp	r5, r4
    8794:	dce5      	bgt.n	8762 <__ledf2+0x66>
    8796:	db05      	blt.n	87a4 <__ledf2+0xa8>
    8798:	42be      	cmp	r6, r7
    879a:	d8e2      	bhi.n	8762 <__ledf2+0x66>
    879c:	d007      	beq.n	87ae <__ledf2+0xb2>
    879e:	2300      	movs	r3, #0
    87a0:	42be      	cmp	r6, r7
    87a2:	d2d3      	bcs.n	874c <__ledf2+0x50>
    87a4:	4659      	mov	r1, fp
    87a6:	2301      	movs	r3, #1
    87a8:	3901      	subs	r1, #1
    87aa:	430b      	orrs	r3, r1
    87ac:	e7ce      	b.n	874c <__ledf2+0x50>
    87ae:	45c4      	cmp	ip, r8
    87b0:	d8d7      	bhi.n	8762 <__ledf2+0x66>
    87b2:	2300      	movs	r3, #0
    87b4:	45c4      	cmp	ip, r8
    87b6:	d3f5      	bcc.n	87a4 <__ledf2+0xa8>
    87b8:	e7c8      	b.n	874c <__ledf2+0x50>
    87ba:	46c0      	nop			; (mov r8, r8)
    87bc:	000007ff 	.word	0x000007ff

000087c0 <__libc_init_array>:
    87c0:	b570      	push	{r4, r5, r6, lr}
    87c2:	4e0d      	ldr	r6, [pc, #52]	; (87f8 <__libc_init_array+0x38>)
    87c4:	4d0d      	ldr	r5, [pc, #52]	; (87fc <__libc_init_array+0x3c>)
    87c6:	2400      	movs	r4, #0
    87c8:	1bad      	subs	r5, r5, r6
    87ca:	10ad      	asrs	r5, r5, #2
    87cc:	d005      	beq.n	87da <__libc_init_array+0x1a>
    87ce:	00a3      	lsls	r3, r4, #2
    87d0:	58f3      	ldr	r3, [r6, r3]
    87d2:	3401      	adds	r4, #1
    87d4:	4798      	blx	r3
    87d6:	42a5      	cmp	r5, r4
    87d8:	d1f9      	bne.n	87ce <__libc_init_array+0xe>
    87da:	f00d fa9f 	bl	15d1c <_init>
    87de:	4e08      	ldr	r6, [pc, #32]	; (8800 <__libc_init_array+0x40>)
    87e0:	4d08      	ldr	r5, [pc, #32]	; (8804 <__libc_init_array+0x44>)
    87e2:	2400      	movs	r4, #0
    87e4:	1bad      	subs	r5, r5, r6
    87e6:	10ad      	asrs	r5, r5, #2
    87e8:	d005      	beq.n	87f6 <__libc_init_array+0x36>
    87ea:	00a3      	lsls	r3, r4, #2
    87ec:	58f3      	ldr	r3, [r6, r3]
    87ee:	3401      	adds	r4, #1
    87f0:	4798      	blx	r3
    87f2:	42a5      	cmp	r5, r4
    87f4:	d1f9      	bne.n	87ea <__libc_init_array+0x2a>
    87f6:	bd70      	pop	{r4, r5, r6, pc}
    87f8:	00015d28 	.word	0x00015d28
    87fc:	00015d28 	.word	0x00015d28
    8800:	00015d28 	.word	0x00015d28
    8804:	00015d30 	.word	0x00015d30

00008808 <memcmp>:
    8808:	b510      	push	{r4, lr}
    880a:	2a03      	cmp	r2, #3
    880c:	d91c      	bls.n	8848 <memcmp+0x40>
    880e:	0003      	movs	r3, r0
    8810:	430b      	orrs	r3, r1
    8812:	079b      	lsls	r3, r3, #30
    8814:	d00f      	beq.n	8836 <memcmp+0x2e>
    8816:	7803      	ldrb	r3, [r0, #0]
    8818:	780c      	ldrb	r4, [r1, #0]
    881a:	1882      	adds	r2, r0, r2
    881c:	42a3      	cmp	r3, r4
    881e:	d004      	beq.n	882a <memcmp+0x22>
    8820:	e015      	b.n	884e <memcmp+0x46>
    8822:	7803      	ldrb	r3, [r0, #0]
    8824:	780c      	ldrb	r4, [r1, #0]
    8826:	42a3      	cmp	r3, r4
    8828:	d111      	bne.n	884e <memcmp+0x46>
    882a:	3001      	adds	r0, #1
    882c:	3101      	adds	r1, #1
    882e:	4282      	cmp	r2, r0
    8830:	d1f7      	bne.n	8822 <memcmp+0x1a>
    8832:	2000      	movs	r0, #0
    8834:	bd10      	pop	{r4, pc}
    8836:	6803      	ldr	r3, [r0, #0]
    8838:	680c      	ldr	r4, [r1, #0]
    883a:	42a3      	cmp	r3, r4
    883c:	d1eb      	bne.n	8816 <memcmp+0xe>
    883e:	3a04      	subs	r2, #4
    8840:	3004      	adds	r0, #4
    8842:	3104      	adds	r1, #4
    8844:	2a03      	cmp	r2, #3
    8846:	d8f6      	bhi.n	8836 <memcmp+0x2e>
    8848:	2a00      	cmp	r2, #0
    884a:	d1e4      	bne.n	8816 <memcmp+0xe>
    884c:	e7f1      	b.n	8832 <memcmp+0x2a>
    884e:	1b18      	subs	r0, r3, r4
    8850:	e7f0      	b.n	8834 <memcmp+0x2c>
    8852:	46c0      	nop			; (mov r8, r8)

00008854 <memcpy>:
    8854:	b5f0      	push	{r4, r5, r6, r7, lr}
    8856:	0005      	movs	r5, r0
    8858:	2a0f      	cmp	r2, #15
    885a:	d92f      	bls.n	88bc <memcpy+0x68>
    885c:	000b      	movs	r3, r1
    885e:	4303      	orrs	r3, r0
    8860:	079b      	lsls	r3, r3, #30
    8862:	d134      	bne.n	88ce <memcpy+0x7a>
    8864:	0016      	movs	r6, r2
    8866:	000c      	movs	r4, r1
    8868:	0003      	movs	r3, r0
    886a:	3e10      	subs	r6, #16
    886c:	0935      	lsrs	r5, r6, #4
    886e:	3501      	adds	r5, #1
    8870:	012d      	lsls	r5, r5, #4
    8872:	1945      	adds	r5, r0, r5
    8874:	6827      	ldr	r7, [r4, #0]
    8876:	601f      	str	r7, [r3, #0]
    8878:	6867      	ldr	r7, [r4, #4]
    887a:	605f      	str	r7, [r3, #4]
    887c:	68a7      	ldr	r7, [r4, #8]
    887e:	609f      	str	r7, [r3, #8]
    8880:	68e7      	ldr	r7, [r4, #12]
    8882:	3410      	adds	r4, #16
    8884:	60df      	str	r7, [r3, #12]
    8886:	3310      	adds	r3, #16
    8888:	429d      	cmp	r5, r3
    888a:	d1f3      	bne.n	8874 <memcpy+0x20>
    888c:	230f      	movs	r3, #15
    888e:	439e      	bics	r6, r3
    8890:	3610      	adds	r6, #16
    8892:	1985      	adds	r5, r0, r6
    8894:	1989      	adds	r1, r1, r6
    8896:	4013      	ands	r3, r2
    8898:	2b03      	cmp	r3, #3
    889a:	d91a      	bls.n	88d2 <memcpy+0x7e>
    889c:	1f1e      	subs	r6, r3, #4
    889e:	2300      	movs	r3, #0
    88a0:	08b4      	lsrs	r4, r6, #2
    88a2:	3401      	adds	r4, #1
    88a4:	00a4      	lsls	r4, r4, #2
    88a6:	58cf      	ldr	r7, [r1, r3]
    88a8:	50ef      	str	r7, [r5, r3]
    88aa:	3304      	adds	r3, #4
    88ac:	42a3      	cmp	r3, r4
    88ae:	d1fa      	bne.n	88a6 <memcpy+0x52>
    88b0:	2403      	movs	r4, #3
    88b2:	43a6      	bics	r6, r4
    88b4:	1d33      	adds	r3, r6, #4
    88b6:	4022      	ands	r2, r4
    88b8:	18c9      	adds	r1, r1, r3
    88ba:	18ed      	adds	r5, r5, r3
    88bc:	2a00      	cmp	r2, #0
    88be:	d005      	beq.n	88cc <memcpy+0x78>
    88c0:	2300      	movs	r3, #0
    88c2:	5ccc      	ldrb	r4, [r1, r3]
    88c4:	54ec      	strb	r4, [r5, r3]
    88c6:	3301      	adds	r3, #1
    88c8:	4293      	cmp	r3, r2
    88ca:	d1fa      	bne.n	88c2 <memcpy+0x6e>
    88cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    88ce:	0005      	movs	r5, r0
    88d0:	e7f6      	b.n	88c0 <memcpy+0x6c>
    88d2:	001a      	movs	r2, r3
    88d4:	e7f2      	b.n	88bc <memcpy+0x68>
    88d6:	46c0      	nop			; (mov r8, r8)

000088d8 <memset>:
    88d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    88da:	0783      	lsls	r3, r0, #30
    88dc:	d043      	beq.n	8966 <memset+0x8e>
    88de:	1e54      	subs	r4, r2, #1
    88e0:	2a00      	cmp	r2, #0
    88e2:	d03f      	beq.n	8964 <memset+0x8c>
    88e4:	b2ce      	uxtb	r6, r1
    88e6:	0002      	movs	r2, r0
    88e8:	2503      	movs	r5, #3
    88ea:	e002      	b.n	88f2 <memset+0x1a>
    88ec:	001a      	movs	r2, r3
    88ee:	3c01      	subs	r4, #1
    88f0:	d338      	bcc.n	8964 <memset+0x8c>
    88f2:	1c53      	adds	r3, r2, #1
    88f4:	7016      	strb	r6, [r2, #0]
    88f6:	422b      	tst	r3, r5
    88f8:	d1f8      	bne.n	88ec <memset+0x14>
    88fa:	2c03      	cmp	r4, #3
    88fc:	d92a      	bls.n	8954 <memset+0x7c>
    88fe:	22ff      	movs	r2, #255	; 0xff
    8900:	400a      	ands	r2, r1
    8902:	0215      	lsls	r5, r2, #8
    8904:	4315      	orrs	r5, r2
    8906:	042a      	lsls	r2, r5, #16
    8908:	4315      	orrs	r5, r2
    890a:	2c0f      	cmp	r4, #15
    890c:	d914      	bls.n	8938 <memset+0x60>
    890e:	0027      	movs	r7, r4
    8910:	001a      	movs	r2, r3
    8912:	3f10      	subs	r7, #16
    8914:	093e      	lsrs	r6, r7, #4
    8916:	3601      	adds	r6, #1
    8918:	0136      	lsls	r6, r6, #4
    891a:	199e      	adds	r6, r3, r6
    891c:	6015      	str	r5, [r2, #0]
    891e:	6055      	str	r5, [r2, #4]
    8920:	6095      	str	r5, [r2, #8]
    8922:	60d5      	str	r5, [r2, #12]
    8924:	3210      	adds	r2, #16
    8926:	4296      	cmp	r6, r2
    8928:	d1f8      	bne.n	891c <memset+0x44>
    892a:	220f      	movs	r2, #15
    892c:	4397      	bics	r7, r2
    892e:	3710      	adds	r7, #16
    8930:	19db      	adds	r3, r3, r7
    8932:	4014      	ands	r4, r2
    8934:	2c03      	cmp	r4, #3
    8936:	d90d      	bls.n	8954 <memset+0x7c>
    8938:	001a      	movs	r2, r3
    893a:	1f27      	subs	r7, r4, #4
    893c:	08be      	lsrs	r6, r7, #2
    893e:	3601      	adds	r6, #1
    8940:	00b6      	lsls	r6, r6, #2
    8942:	199e      	adds	r6, r3, r6
    8944:	c220      	stmia	r2!, {r5}
    8946:	42b2      	cmp	r2, r6
    8948:	d1fc      	bne.n	8944 <memset+0x6c>
    894a:	2203      	movs	r2, #3
    894c:	4397      	bics	r7, r2
    894e:	3704      	adds	r7, #4
    8950:	19db      	adds	r3, r3, r7
    8952:	4014      	ands	r4, r2
    8954:	2c00      	cmp	r4, #0
    8956:	d005      	beq.n	8964 <memset+0x8c>
    8958:	b2c9      	uxtb	r1, r1
    895a:	191c      	adds	r4, r3, r4
    895c:	7019      	strb	r1, [r3, #0]
    895e:	3301      	adds	r3, #1
    8960:	429c      	cmp	r4, r3
    8962:	d1fb      	bne.n	895c <memset+0x84>
    8964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8966:	0014      	movs	r4, r2
    8968:	0003      	movs	r3, r0
    896a:	e7c6      	b.n	88fa <memset+0x22>

0000896c <printf>:
    896c:	b40f      	push	{r0, r1, r2, r3}
    896e:	b500      	push	{lr}
    8970:	4906      	ldr	r1, [pc, #24]	; (898c <printf+0x20>)
    8972:	b083      	sub	sp, #12
    8974:	ab04      	add	r3, sp, #16
    8976:	6808      	ldr	r0, [r1, #0]
    8978:	cb04      	ldmia	r3!, {r2}
    897a:	6881      	ldr	r1, [r0, #8]
    897c:	9301      	str	r3, [sp, #4]
    897e:	f002 ff47 	bl	b810 <_vfprintf_r>
    8982:	b003      	add	sp, #12
    8984:	bc08      	pop	{r3}
    8986:	b004      	add	sp, #16
    8988:	4718      	bx	r3
    898a:	46c0      	nop			; (mov r8, r8)
    898c:	20000080 	.word	0x20000080

00008990 <_puts_r>:
    8990:	b530      	push	{r4, r5, lr}
    8992:	0004      	movs	r4, r0
    8994:	b089      	sub	sp, #36	; 0x24
    8996:	0008      	movs	r0, r1
    8998:	000d      	movs	r5, r1
    899a:	f000 fa0b 	bl	8db4 <strlen>
    899e:	ab04      	add	r3, sp, #16
    89a0:	4a21      	ldr	r2, [pc, #132]	; (8a28 <_puts_r+0x98>)
    89a2:	9301      	str	r3, [sp, #4]
    89a4:	2302      	movs	r3, #2
    89a6:	9206      	str	r2, [sp, #24]
    89a8:	2201      	movs	r2, #1
    89aa:	9302      	str	r3, [sp, #8]
    89ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    89ae:	9005      	str	r0, [sp, #20]
    89b0:	3001      	adds	r0, #1
    89b2:	9504      	str	r5, [sp, #16]
    89b4:	9207      	str	r2, [sp, #28]
    89b6:	9003      	str	r0, [sp, #12]
    89b8:	68a5      	ldr	r5, [r4, #8]
    89ba:	2b00      	cmp	r3, #0
    89bc:	d02f      	beq.n	8a1e <_puts_r+0x8e>
    89be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    89c0:	07db      	lsls	r3, r3, #31
    89c2:	d424      	bmi.n	8a0e <_puts_r+0x7e>
    89c4:	230c      	movs	r3, #12
    89c6:	5eea      	ldrsh	r2, [r5, r3]
    89c8:	b291      	uxth	r1, r2
    89ca:	058b      	lsls	r3, r1, #22
    89cc:	d51c      	bpl.n	8a08 <_puts_r+0x78>
    89ce:	2380      	movs	r3, #128	; 0x80
    89d0:	019b      	lsls	r3, r3, #6
    89d2:	4219      	tst	r1, r3
    89d4:	d105      	bne.n	89e2 <_puts_r+0x52>
    89d6:	4313      	orrs	r3, r2
    89d8:	81ab      	strh	r3, [r5, #12]
    89da:	6e6a      	ldr	r2, [r5, #100]	; 0x64
    89dc:	4b13      	ldr	r3, [pc, #76]	; (8a2c <_puts_r+0x9c>)
    89de:	4013      	ands	r3, r2
    89e0:	666b      	str	r3, [r5, #100]	; 0x64
    89e2:	0020      	movs	r0, r4
    89e4:	aa01      	add	r2, sp, #4
    89e6:	0029      	movs	r1, r5
    89e8:	f005 febc 	bl	e764 <__sfvwrite_r>
    89ec:	1e44      	subs	r4, r0, #1
    89ee:	41a0      	sbcs	r0, r4
    89f0:	4244      	negs	r4, r0
    89f2:	200a      	movs	r0, #10
    89f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    89f6:	4304      	orrs	r4, r0
    89f8:	07db      	lsls	r3, r3, #31
    89fa:	d402      	bmi.n	8a02 <_puts_r+0x72>
    89fc:	89ab      	ldrh	r3, [r5, #12]
    89fe:	059b      	lsls	r3, r3, #22
    8a00:	d509      	bpl.n	8a16 <_puts_r+0x86>
    8a02:	0020      	movs	r0, r4
    8a04:	b009      	add	sp, #36	; 0x24
    8a06:	bd30      	pop	{r4, r5, pc}
    8a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
    8a0a:	f006 f895 	bl	eb38 <__retarget_lock_acquire_recursive>
    8a0e:	230c      	movs	r3, #12
    8a10:	5eea      	ldrsh	r2, [r5, r3]
    8a12:	b291      	uxth	r1, r2
    8a14:	e7db      	b.n	89ce <_puts_r+0x3e>
    8a16:	6da8      	ldr	r0, [r5, #88]	; 0x58
    8a18:	f006 f890 	bl	eb3c <__retarget_lock_release_recursive>
    8a1c:	e7f1      	b.n	8a02 <_puts_r+0x72>
    8a1e:	0020      	movs	r0, r4
    8a20:	f005 fd18 	bl	e454 <__sinit>
    8a24:	e7cb      	b.n	89be <_puts_r+0x2e>
    8a26:	46c0      	nop			; (mov r8, r8)
    8a28:	00012f80 	.word	0x00012f80
    8a2c:	ffffdfff 	.word	0xffffdfff

00008a30 <puts>:
    8a30:	b510      	push	{r4, lr}
    8a32:	4b03      	ldr	r3, [pc, #12]	; (8a40 <puts+0x10>)
    8a34:	0001      	movs	r1, r0
    8a36:	6818      	ldr	r0, [r3, #0]
    8a38:	f7ff ffaa 	bl	8990 <_puts_r>
    8a3c:	bd10      	pop	{r4, pc}
    8a3e:	46c0      	nop			; (mov r8, r8)
    8a40:	20000080 	.word	0x20000080

00008a44 <snprintf>:
    8a44:	b40c      	push	{r2, r3}
    8a46:	b530      	push	{r4, r5, lr}
    8a48:	4b1e      	ldr	r3, [pc, #120]	; (8ac4 <snprintf+0x80>)
    8a4a:	b09d      	sub	sp, #116	; 0x74
    8a4c:	681d      	ldr	r5, [r3, #0]
    8a4e:	2900      	cmp	r1, #0
    8a50:	db33      	blt.n	8aba <snprintf+0x76>
    8a52:	2382      	movs	r3, #130	; 0x82
    8a54:	ac02      	add	r4, sp, #8
    8a56:	009b      	lsls	r3, r3, #2
    8a58:	81a3      	strh	r3, [r4, #12]
    8a5a:	9002      	str	r0, [sp, #8]
    8a5c:	6120      	str	r0, [r4, #16]
    8a5e:	2900      	cmp	r1, #0
    8a60:	d012      	beq.n	8a88 <snprintf+0x44>
    8a62:	2301      	movs	r3, #1
    8a64:	3901      	subs	r1, #1
    8a66:	425b      	negs	r3, r3
    8a68:	60a1      	str	r1, [r4, #8]
    8a6a:	6161      	str	r1, [r4, #20]
    8a6c:	81e3      	strh	r3, [r4, #14]
    8a6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8a70:	ab21      	add	r3, sp, #132	; 0x84
    8a72:	0021      	movs	r1, r4
    8a74:	0028      	movs	r0, r5
    8a76:	9301      	str	r3, [sp, #4]
    8a78:	f000 fcde 	bl	9438 <_svfprintf_r>
    8a7c:	1c43      	adds	r3, r0, #1
    8a7e:	db16      	blt.n	8aae <snprintf+0x6a>
    8a80:	2300      	movs	r3, #0
    8a82:	9a02      	ldr	r2, [sp, #8]
    8a84:	7013      	strb	r3, [r2, #0]
    8a86:	e00d      	b.n	8aa4 <snprintf+0x60>
    8a88:	2301      	movs	r3, #1
    8a8a:	425b      	negs	r3, r3
    8a8c:	60a1      	str	r1, [r4, #8]
    8a8e:	6161      	str	r1, [r4, #20]
    8a90:	81e3      	strh	r3, [r4, #14]
    8a92:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8a94:	ab21      	add	r3, sp, #132	; 0x84
    8a96:	0021      	movs	r1, r4
    8a98:	0028      	movs	r0, r5
    8a9a:	9301      	str	r3, [sp, #4]
    8a9c:	f000 fccc 	bl	9438 <_svfprintf_r>
    8aa0:	1c43      	adds	r3, r0, #1
    8aa2:	db07      	blt.n	8ab4 <snprintf+0x70>
    8aa4:	b01d      	add	sp, #116	; 0x74
    8aa6:	bc30      	pop	{r4, r5}
    8aa8:	bc08      	pop	{r3}
    8aaa:	b002      	add	sp, #8
    8aac:	4718      	bx	r3
    8aae:	238b      	movs	r3, #139	; 0x8b
    8ab0:	602b      	str	r3, [r5, #0]
    8ab2:	e7e5      	b.n	8a80 <snprintf+0x3c>
    8ab4:	238b      	movs	r3, #139	; 0x8b
    8ab6:	602b      	str	r3, [r5, #0]
    8ab8:	e7f4      	b.n	8aa4 <snprintf+0x60>
    8aba:	238b      	movs	r3, #139	; 0x8b
    8abc:	2001      	movs	r0, #1
    8abe:	602b      	str	r3, [r5, #0]
    8ac0:	4240      	negs	r0, r0
    8ac2:	e7ef      	b.n	8aa4 <snprintf+0x60>
    8ac4:	20000080 	.word	0x20000080

00008ac8 <sprintf>:
    8ac8:	b40e      	push	{r1, r2, r3}
    8aca:	b510      	push	{r4, lr}
    8acc:	b09d      	sub	sp, #116	; 0x74
    8ace:	a902      	add	r1, sp, #8
    8ad0:	9002      	str	r0, [sp, #8]
    8ad2:	6108      	str	r0, [r1, #16]
    8ad4:	480b      	ldr	r0, [pc, #44]	; (8b04 <sprintf+0x3c>)
    8ad6:	2482      	movs	r4, #130	; 0x82
    8ad8:	6088      	str	r0, [r1, #8]
    8ada:	6148      	str	r0, [r1, #20]
    8adc:	2001      	movs	r0, #1
    8ade:	4240      	negs	r0, r0
    8ae0:	ab1f      	add	r3, sp, #124	; 0x7c
    8ae2:	81c8      	strh	r0, [r1, #14]
    8ae4:	4808      	ldr	r0, [pc, #32]	; (8b08 <sprintf+0x40>)
    8ae6:	cb04      	ldmia	r3!, {r2}
    8ae8:	00a4      	lsls	r4, r4, #2
    8aea:	6800      	ldr	r0, [r0, #0]
    8aec:	9301      	str	r3, [sp, #4]
    8aee:	818c      	strh	r4, [r1, #12]
    8af0:	f000 fca2 	bl	9438 <_svfprintf_r>
    8af4:	2300      	movs	r3, #0
    8af6:	9a02      	ldr	r2, [sp, #8]
    8af8:	7013      	strb	r3, [r2, #0]
    8afa:	b01d      	add	sp, #116	; 0x74
    8afc:	bc10      	pop	{r4}
    8afe:	bc08      	pop	{r3}
    8b00:	b003      	add	sp, #12
    8b02:	4718      	bx	r3
    8b04:	7fffffff 	.word	0x7fffffff
    8b08:	20000080 	.word	0x20000080

00008b0c <sscanf>:
    8b0c:	b40e      	push	{r1, r2, r3}
    8b0e:	2381      	movs	r3, #129	; 0x81
    8b10:	b570      	push	{r4, r5, r6, lr}
    8b12:	b09d      	sub	sp, #116	; 0x74
    8b14:	ac02      	add	r4, sp, #8
    8b16:	ad21      	add	r5, sp, #132	; 0x84
    8b18:	009b      	lsls	r3, r3, #2
    8b1a:	cd40      	ldmia	r5!, {r6}
    8b1c:	81a3      	strh	r3, [r4, #12]
    8b1e:	9002      	str	r0, [sp, #8]
    8b20:	9006      	str	r0, [sp, #24]
    8b22:	f000 f947 	bl	8db4 <strlen>
    8b26:	4b0b      	ldr	r3, [pc, #44]	; (8b54 <sscanf+0x48>)
    8b28:	6060      	str	r0, [r4, #4]
    8b2a:	6223      	str	r3, [r4, #32]
    8b2c:	2300      	movs	r3, #0
    8b2e:	6323      	str	r3, [r4, #48]	; 0x30
    8b30:	6463      	str	r3, [r4, #68]	; 0x44
    8b32:	3b01      	subs	r3, #1
    8b34:	81e3      	strh	r3, [r4, #14]
    8b36:	4b08      	ldr	r3, [pc, #32]	; (8b58 <sscanf+0x4c>)
    8b38:	6160      	str	r0, [r4, #20]
    8b3a:	0032      	movs	r2, r6
    8b3c:	6818      	ldr	r0, [r3, #0]
    8b3e:	0021      	movs	r1, r4
    8b40:	002b      	movs	r3, r5
    8b42:	9501      	str	r5, [sp, #4]
    8b44:	f001 ff7c 	bl	aa40 <__ssvfscanf_r>
    8b48:	b01d      	add	sp, #116	; 0x74
    8b4a:	bc70      	pop	{r4, r5, r6}
    8b4c:	bc08      	pop	{r3}
    8b4e:	b003      	add	sp, #12
    8b50:	4718      	bx	r3
    8b52:	46c0      	nop			; (mov r8, r8)
    8b54:	00008b85 	.word	0x00008b85
    8b58:	20000080 	.word	0x20000080

00008b5c <__sread>:
    8b5c:	b570      	push	{r4, r5, r6, lr}
    8b5e:	000c      	movs	r4, r1
    8b60:	250e      	movs	r5, #14
    8b62:	5f49      	ldrsh	r1, [r1, r5]
    8b64:	f007 f8c2 	bl	fcec <_read_r>
    8b68:	2800      	cmp	r0, #0
    8b6a:	db03      	blt.n	8b74 <__sread+0x18>
    8b6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    8b6e:	181b      	adds	r3, r3, r0
    8b70:	6523      	str	r3, [r4, #80]	; 0x50
    8b72:	bd70      	pop	{r4, r5, r6, pc}
    8b74:	89a3      	ldrh	r3, [r4, #12]
    8b76:	4a02      	ldr	r2, [pc, #8]	; (8b80 <__sread+0x24>)
    8b78:	4013      	ands	r3, r2
    8b7a:	81a3      	strh	r3, [r4, #12]
    8b7c:	e7f9      	b.n	8b72 <__sread+0x16>
    8b7e:	46c0      	nop			; (mov r8, r8)
    8b80:	ffffefff 	.word	0xffffefff

00008b84 <__seofread>:
    8b84:	2000      	movs	r0, #0
    8b86:	4770      	bx	lr

00008b88 <__swrite>:
    8b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b8a:	0016      	movs	r6, r2
    8b8c:	001f      	movs	r7, r3
    8b8e:	220c      	movs	r2, #12
    8b90:	5e8b      	ldrsh	r3, [r1, r2]
    8b92:	0005      	movs	r5, r0
    8b94:	000c      	movs	r4, r1
    8b96:	05da      	lsls	r2, r3, #23
    8b98:	d507      	bpl.n	8baa <__swrite+0x22>
    8b9a:	230e      	movs	r3, #14
    8b9c:	5ec9      	ldrsh	r1, [r1, r3]
    8b9e:	2200      	movs	r2, #0
    8ba0:	2302      	movs	r3, #2
    8ba2:	f005 ffcd 	bl	eb40 <_lseek_r>
    8ba6:	220c      	movs	r2, #12
    8ba8:	5ea3      	ldrsh	r3, [r4, r2]
    8baa:	4a05      	ldr	r2, [pc, #20]	; (8bc0 <__swrite+0x38>)
    8bac:	0028      	movs	r0, r5
    8bae:	4013      	ands	r3, r2
    8bb0:	81a3      	strh	r3, [r4, #12]
    8bb2:	0032      	movs	r2, r6
    8bb4:	230e      	movs	r3, #14
    8bb6:	5ee1      	ldrsh	r1, [r4, r3]
    8bb8:	003b      	movs	r3, r7
    8bba:	f004 fa37 	bl	d02c <_write_r>
    8bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8bc0:	ffffefff 	.word	0xffffefff

00008bc4 <__sseek>:
    8bc4:	b570      	push	{r4, r5, r6, lr}
    8bc6:	000c      	movs	r4, r1
    8bc8:	250e      	movs	r5, #14
    8bca:	5f49      	ldrsh	r1, [r1, r5]
    8bcc:	f005 ffb8 	bl	eb40 <_lseek_r>
    8bd0:	1c43      	adds	r3, r0, #1
    8bd2:	d006      	beq.n	8be2 <__sseek+0x1e>
    8bd4:	2380      	movs	r3, #128	; 0x80
    8bd6:	89a2      	ldrh	r2, [r4, #12]
    8bd8:	015b      	lsls	r3, r3, #5
    8bda:	4313      	orrs	r3, r2
    8bdc:	81a3      	strh	r3, [r4, #12]
    8bde:	6520      	str	r0, [r4, #80]	; 0x50
    8be0:	bd70      	pop	{r4, r5, r6, pc}
    8be2:	89a3      	ldrh	r3, [r4, #12]
    8be4:	4a01      	ldr	r2, [pc, #4]	; (8bec <__sseek+0x28>)
    8be6:	4013      	ands	r3, r2
    8be8:	81a3      	strh	r3, [r4, #12]
    8bea:	e7f9      	b.n	8be0 <__sseek+0x1c>
    8bec:	ffffefff 	.word	0xffffefff

00008bf0 <__sclose>:
    8bf0:	b510      	push	{r4, lr}
    8bf2:	230e      	movs	r3, #14
    8bf4:	5ec9      	ldrsh	r1, [r1, r3]
    8bf6:	f004 faab 	bl	d150 <_close_r>
    8bfa:	bd10      	pop	{r4, pc}

00008bfc <strcasecmp>:
    8bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8bfe:	4647      	mov	r7, r8
    8c00:	46ce      	mov	lr, r9
    8c02:	4688      	mov	r8, r1
    8c04:	b580      	push	{r7, lr}
    8c06:	4681      	mov	r9, r0
    8c08:	2600      	movs	r6, #0
    8c0a:	2703      	movs	r7, #3
    8c0c:	464b      	mov	r3, r9
    8c0e:	5d9c      	ldrb	r4, [r3, r6]
    8c10:	f005 ff70 	bl	eaf4 <__locale_ctype_ptr>
    8c14:	1900      	adds	r0, r0, r4
    8c16:	7843      	ldrb	r3, [r0, #1]
    8c18:	403b      	ands	r3, r7
    8c1a:	2b01      	cmp	r3, #1
    8c1c:	d016      	beq.n	8c4c <strcasecmp+0x50>
    8c1e:	4643      	mov	r3, r8
    8c20:	5d9d      	ldrb	r5, [r3, r6]
    8c22:	f005 ff67 	bl	eaf4 <__locale_ctype_ptr>
    8c26:	1940      	adds	r0, r0, r5
    8c28:	7843      	ldrb	r3, [r0, #1]
    8c2a:	403b      	ands	r3, r7
    8c2c:	2b01      	cmp	r3, #1
    8c2e:	d005      	beq.n	8c3c <strcasecmp+0x40>
    8c30:	1b60      	subs	r0, r4, r5
    8c32:	d107      	bne.n	8c44 <strcasecmp+0x48>
    8c34:	2d00      	cmp	r5, #0
    8c36:	d005      	beq.n	8c44 <strcasecmp+0x48>
    8c38:	3601      	adds	r6, #1
    8c3a:	e7e7      	b.n	8c0c <strcasecmp+0x10>
    8c3c:	0028      	movs	r0, r5
    8c3e:	3020      	adds	r0, #32
    8c40:	1a20      	subs	r0, r4, r0
    8c42:	d0f9      	beq.n	8c38 <strcasecmp+0x3c>
    8c44:	bc0c      	pop	{r2, r3}
    8c46:	4690      	mov	r8, r2
    8c48:	4699      	mov	r9, r3
    8c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c4c:	3420      	adds	r4, #32
    8c4e:	e7e6      	b.n	8c1e <strcasecmp+0x22>

00008c50 <strchr>:
    8c50:	b570      	push	{r4, r5, r6, lr}
    8c52:	b2cc      	uxtb	r4, r1
    8c54:	2c00      	cmp	r4, #0
    8c56:	d03b      	beq.n	8cd0 <strchr+0x80>
    8c58:	0783      	lsls	r3, r0, #30
    8c5a:	d00e      	beq.n	8c7a <strchr+0x2a>
    8c5c:	7803      	ldrb	r3, [r0, #0]
    8c5e:	2b00      	cmp	r3, #0
    8c60:	d05b      	beq.n	8d1a <strchr+0xca>
    8c62:	429c      	cmp	r4, r3
    8c64:	d033      	beq.n	8cce <strchr+0x7e>
    8c66:	2203      	movs	r2, #3
    8c68:	e004      	b.n	8c74 <strchr+0x24>
    8c6a:	7803      	ldrb	r3, [r0, #0]
    8c6c:	2b00      	cmp	r3, #0
    8c6e:	d054      	beq.n	8d1a <strchr+0xca>
    8c70:	429c      	cmp	r4, r3
    8c72:	d02c      	beq.n	8cce <strchr+0x7e>
    8c74:	3001      	adds	r0, #1
    8c76:	4210      	tst	r0, r2
    8c78:	d1f7      	bne.n	8c6a <strchr+0x1a>
    8c7a:	25ff      	movs	r5, #255	; 0xff
    8c7c:	4029      	ands	r1, r5
    8c7e:	020d      	lsls	r5, r1, #8
    8c80:	4329      	orrs	r1, r5
    8c82:	040d      	lsls	r5, r1, #16
    8c84:	430d      	orrs	r5, r1
    8c86:	0029      	movs	r1, r5
    8c88:	6802      	ldr	r2, [r0, #0]
    8c8a:	4b26      	ldr	r3, [pc, #152]	; (8d24 <strchr+0xd4>)
    8c8c:	4051      	eors	r1, r2
    8c8e:	18d3      	adds	r3, r2, r3
    8c90:	4393      	bics	r3, r2
    8c92:	4a24      	ldr	r2, [pc, #144]	; (8d24 <strchr+0xd4>)
    8c94:	4e24      	ldr	r6, [pc, #144]	; (8d28 <strchr+0xd8>)
    8c96:	188a      	adds	r2, r1, r2
    8c98:	438a      	bics	r2, r1
    8c9a:	4313      	orrs	r3, r2
    8c9c:	4233      	tst	r3, r6
    8c9e:	d10c      	bne.n	8cba <strchr+0x6a>
    8ca0:	0029      	movs	r1, r5
    8ca2:	3004      	adds	r0, #4
    8ca4:	6802      	ldr	r2, [r0, #0]
    8ca6:	4b1f      	ldr	r3, [pc, #124]	; (8d24 <strchr+0xd4>)
    8ca8:	4051      	eors	r1, r2
    8caa:	18d3      	adds	r3, r2, r3
    8cac:	4393      	bics	r3, r2
    8cae:	4a1d      	ldr	r2, [pc, #116]	; (8d24 <strchr+0xd4>)
    8cb0:	188a      	adds	r2, r1, r2
    8cb2:	438a      	bics	r2, r1
    8cb4:	4313      	orrs	r3, r2
    8cb6:	4233      	tst	r3, r6
    8cb8:	d0f2      	beq.n	8ca0 <strchr+0x50>
    8cba:	7803      	ldrb	r3, [r0, #0]
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d104      	bne.n	8cca <strchr+0x7a>
    8cc0:	e02b      	b.n	8d1a <strchr+0xca>
    8cc2:	3001      	adds	r0, #1
    8cc4:	7803      	ldrb	r3, [r0, #0]
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d027      	beq.n	8d1a <strchr+0xca>
    8cca:	429c      	cmp	r4, r3
    8ccc:	d1f9      	bne.n	8cc2 <strchr+0x72>
    8cce:	bd70      	pop	{r4, r5, r6, pc}
    8cd0:	0783      	lsls	r3, r0, #30
    8cd2:	d00a      	beq.n	8cea <strchr+0x9a>
    8cd4:	7803      	ldrb	r3, [r0, #0]
    8cd6:	2b00      	cmp	r3, #0
    8cd8:	d0f9      	beq.n	8cce <strchr+0x7e>
    8cda:	2203      	movs	r2, #3
    8cdc:	e002      	b.n	8ce4 <strchr+0x94>
    8cde:	7803      	ldrb	r3, [r0, #0]
    8ce0:	2b00      	cmp	r3, #0
    8ce2:	d0f4      	beq.n	8cce <strchr+0x7e>
    8ce4:	3001      	adds	r0, #1
    8ce6:	4210      	tst	r0, r2
    8ce8:	d1f9      	bne.n	8cde <strchr+0x8e>
    8cea:	6801      	ldr	r1, [r0, #0]
    8cec:	4a0d      	ldr	r2, [pc, #52]	; (8d24 <strchr+0xd4>)
    8cee:	0003      	movs	r3, r0
    8cf0:	188a      	adds	r2, r1, r2
    8cf2:	480d      	ldr	r0, [pc, #52]	; (8d28 <strchr+0xd8>)
    8cf4:	438a      	bics	r2, r1
    8cf6:	4202      	tst	r2, r0
    8cf8:	d106      	bne.n	8d08 <strchr+0xb8>
    8cfa:	3304      	adds	r3, #4
    8cfc:	6819      	ldr	r1, [r3, #0]
    8cfe:	4a09      	ldr	r2, [pc, #36]	; (8d24 <strchr+0xd4>)
    8d00:	188a      	adds	r2, r1, r2
    8d02:	438a      	bics	r2, r1
    8d04:	4202      	tst	r2, r0
    8d06:	d0f8      	beq.n	8cfa <strchr+0xaa>
    8d08:	781a      	ldrb	r2, [r3, #0]
    8d0a:	0018      	movs	r0, r3
    8d0c:	2a00      	cmp	r2, #0
    8d0e:	d006      	beq.n	8d1e <strchr+0xce>
    8d10:	3001      	adds	r0, #1
    8d12:	7803      	ldrb	r3, [r0, #0]
    8d14:	2b00      	cmp	r3, #0
    8d16:	d1fb      	bne.n	8d10 <strchr+0xc0>
    8d18:	e7d9      	b.n	8cce <strchr+0x7e>
    8d1a:	2000      	movs	r0, #0
    8d1c:	e7d7      	b.n	8cce <strchr+0x7e>
    8d1e:	0018      	movs	r0, r3
    8d20:	e7d5      	b.n	8cce <strchr+0x7e>
    8d22:	46c0      	nop			; (mov r8, r8)
    8d24:	fefefeff 	.word	0xfefefeff
    8d28:	80808080 	.word	0x80808080

00008d2c <strcmp>:
    8d2c:	4602      	mov	r2, r0
    8d2e:	b570      	push	{r4, r5, r6, lr}
    8d30:	430a      	orrs	r2, r1
    8d32:	0792      	lsls	r2, r2, #30
    8d34:	d12a      	bne.n	8d8c <strcmp+0x60>
    8d36:	4d1e      	ldr	r5, [pc, #120]	; (8db0 <strcmp+0x84>)
    8d38:	01ee      	lsls	r6, r5, #7
    8d3a:	c804      	ldmia	r0!, {r2}
    8d3c:	c908      	ldmia	r1!, {r3}
    8d3e:	1b54      	subs	r4, r2, r5
    8d40:	4394      	bics	r4, r2
    8d42:	4034      	ands	r4, r6
    8d44:	d017      	beq.n	8d76 <strcmp+0x4a>
    8d46:	b2d0      	uxtb	r0, r2
    8d48:	b2d9      	uxtb	r1, r3
    8d4a:	1a40      	subs	r0, r0, r1
    8d4c:	0621      	lsls	r1, r4, #24
    8d4e:	4301      	orrs	r1, r0
    8d50:	d110      	bne.n	8d74 <strcmp+0x48>
    8d52:	b290      	uxth	r0, r2
    8d54:	b299      	uxth	r1, r3
    8d56:	1a40      	subs	r0, r0, r1
    8d58:	0421      	lsls	r1, r4, #16
    8d5a:	4301      	orrs	r1, r0
    8d5c:	d10a      	bne.n	8d74 <strcmp+0x48>
    8d5e:	0210      	lsls	r0, r2, #8
    8d60:	0219      	lsls	r1, r3, #8
    8d62:	0a00      	lsrs	r0, r0, #8
    8d64:	0a09      	lsrs	r1, r1, #8
    8d66:	1a40      	subs	r0, r0, r1
    8d68:	0221      	lsls	r1, r4, #8
    8d6a:	4301      	orrs	r1, r0
    8d6c:	d102      	bne.n	8d74 <strcmp+0x48>
    8d6e:	0e10      	lsrs	r0, r2, #24
    8d70:	0e19      	lsrs	r1, r3, #24
    8d72:	1a40      	subs	r0, r0, r1
    8d74:	bd70      	pop	{r4, r5, r6, pc}
    8d76:	429a      	cmp	r2, r3
    8d78:	d0df      	beq.n	8d3a <strcmp+0xe>
    8d7a:	ba10      	rev	r0, r2
    8d7c:	ba19      	rev	r1, r3
    8d7e:	4288      	cmp	r0, r1
    8d80:	d901      	bls.n	8d86 <strcmp+0x5a>
    8d82:	2001      	movs	r0, #1
    8d84:	bd70      	pop	{r4, r5, r6, pc}
    8d86:	2000      	movs	r0, #0
    8d88:	43c0      	mvns	r0, r0
    8d8a:	bd70      	pop	{r4, r5, r6, pc}
    8d8c:	7802      	ldrb	r2, [r0, #0]
    8d8e:	780b      	ldrb	r3, [r1, #0]
    8d90:	3001      	adds	r0, #1
    8d92:	3101      	adds	r1, #1
    8d94:	2a00      	cmp	r2, #0
    8d96:	d009      	beq.n	8dac <strcmp+0x80>
    8d98:	429a      	cmp	r2, r3
    8d9a:	d107      	bne.n	8dac <strcmp+0x80>
    8d9c:	7802      	ldrb	r2, [r0, #0]
    8d9e:	780b      	ldrb	r3, [r1, #0]
    8da0:	3001      	adds	r0, #1
    8da2:	3101      	adds	r1, #1
    8da4:	2a00      	cmp	r2, #0
    8da6:	d001      	beq.n	8dac <strcmp+0x80>
    8da8:	429a      	cmp	r2, r3
    8daa:	d0ef      	beq.n	8d8c <strcmp+0x60>
    8dac:	1ad0      	subs	r0, r2, r3
    8dae:	bd70      	pop	{r4, r5, r6, pc}
    8db0:	01010101 	.word	0x01010101

00008db4 <strlen>:
    8db4:	b510      	push	{r4, lr}
    8db6:	0783      	lsls	r3, r0, #30
    8db8:	d025      	beq.n	8e06 <strlen+0x52>
    8dba:	7803      	ldrb	r3, [r0, #0]
    8dbc:	2b00      	cmp	r3, #0
    8dbe:	d024      	beq.n	8e0a <strlen+0x56>
    8dc0:	0003      	movs	r3, r0
    8dc2:	2103      	movs	r1, #3
    8dc4:	e002      	b.n	8dcc <strlen+0x18>
    8dc6:	781a      	ldrb	r2, [r3, #0]
    8dc8:	2a00      	cmp	r2, #0
    8dca:	d01a      	beq.n	8e02 <strlen+0x4e>
    8dcc:	3301      	adds	r3, #1
    8dce:	420b      	tst	r3, r1
    8dd0:	d1f9      	bne.n	8dc6 <strlen+0x12>
    8dd2:	6819      	ldr	r1, [r3, #0]
    8dd4:	4a0e      	ldr	r2, [pc, #56]	; (8e10 <strlen+0x5c>)
    8dd6:	4c0f      	ldr	r4, [pc, #60]	; (8e14 <strlen+0x60>)
    8dd8:	188a      	adds	r2, r1, r2
    8dda:	438a      	bics	r2, r1
    8ddc:	4222      	tst	r2, r4
    8dde:	d106      	bne.n	8dee <strlen+0x3a>
    8de0:	3304      	adds	r3, #4
    8de2:	6819      	ldr	r1, [r3, #0]
    8de4:	4a0a      	ldr	r2, [pc, #40]	; (8e10 <strlen+0x5c>)
    8de6:	188a      	adds	r2, r1, r2
    8de8:	438a      	bics	r2, r1
    8dea:	4222      	tst	r2, r4
    8dec:	d0f8      	beq.n	8de0 <strlen+0x2c>
    8dee:	001a      	movs	r2, r3
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	2b00      	cmp	r3, #0
    8df4:	d003      	beq.n	8dfe <strlen+0x4a>
    8df6:	3201      	adds	r2, #1
    8df8:	7811      	ldrb	r1, [r2, #0]
    8dfa:	2900      	cmp	r1, #0
    8dfc:	d1fb      	bne.n	8df6 <strlen+0x42>
    8dfe:	1a10      	subs	r0, r2, r0
    8e00:	bd10      	pop	{r4, pc}
    8e02:	1a18      	subs	r0, r3, r0
    8e04:	e7fc      	b.n	8e00 <strlen+0x4c>
    8e06:	0003      	movs	r3, r0
    8e08:	e7e3      	b.n	8dd2 <strlen+0x1e>
    8e0a:	2000      	movs	r0, #0
    8e0c:	e7f8      	b.n	8e00 <strlen+0x4c>
    8e0e:	46c0      	nop			; (mov r8, r8)
    8e10:	fefefeff 	.word	0xfefefeff
    8e14:	80808080 	.word	0x80808080

00008e18 <critical_factorization>:
    8e18:	2301      	movs	r3, #1
    8e1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e1c:	4647      	mov	r7, r8
    8e1e:	46ce      	mov	lr, r9
    8e20:	4694      	mov	ip, r2
    8e22:	2201      	movs	r2, #1
    8e24:	4698      	mov	r8, r3
    8e26:	2401      	movs	r4, #1
    8e28:	2500      	movs	r5, #0
    8e2a:	b580      	push	{r7, lr}
    8e2c:	4252      	negs	r2, r2
    8e2e:	192b      	adds	r3, r5, r4
    8e30:	428b      	cmp	r3, r1
    8e32:	d20b      	bcs.n	8e4c <critical_factorization+0x34>
    8e34:	1886      	adds	r6, r0, r2
    8e36:	5cc7      	ldrb	r7, [r0, r3]
    8e38:	5d36      	ldrb	r6, [r6, r4]
    8e3a:	42b7      	cmp	r7, r6
    8e3c:	d22d      	bcs.n	8e9a <critical_factorization+0x82>
    8e3e:	1a9c      	subs	r4, r3, r2
    8e40:	46a0      	mov	r8, r4
    8e42:	001d      	movs	r5, r3
    8e44:	2401      	movs	r4, #1
    8e46:	192b      	adds	r3, r5, r4
    8e48:	428b      	cmp	r3, r1
    8e4a:	d3f3      	bcc.n	8e34 <critical_factorization+0x1c>
    8e4c:	4644      	mov	r4, r8
    8e4e:	4663      	mov	r3, ip
    8e50:	601c      	str	r4, [r3, #0]
    8e52:	2301      	movs	r3, #1
    8e54:	4699      	mov	r9, r3
    8e56:	3b02      	subs	r3, #2
    8e58:	2401      	movs	r4, #1
    8e5a:	2500      	movs	r5, #0
    8e5c:	4698      	mov	r8, r3
    8e5e:	192b      	adds	r3, r5, r4
    8e60:	4299      	cmp	r1, r3
    8e62:	d90d      	bls.n	8e80 <critical_factorization+0x68>
    8e64:	4646      	mov	r6, r8
    8e66:	1986      	adds	r6, r0, r6
    8e68:	5cc7      	ldrb	r7, [r0, r3]
    8e6a:	5d36      	ldrb	r6, [r6, r4]
    8e6c:	42b7      	cmp	r7, r6
    8e6e:	d91c      	bls.n	8eaa <critical_factorization+0x92>
    8e70:	4644      	mov	r4, r8
    8e72:	1b1c      	subs	r4, r3, r4
    8e74:	46a1      	mov	r9, r4
    8e76:	001d      	movs	r5, r3
    8e78:	2401      	movs	r4, #1
    8e7a:	192b      	adds	r3, r5, r4
    8e7c:	4299      	cmp	r1, r3
    8e7e:	d8f1      	bhi.n	8e64 <critical_factorization+0x4c>
    8e80:	4643      	mov	r3, r8
    8e82:	1c50      	adds	r0, r2, #1
    8e84:	3301      	adds	r3, #1
    8e86:	4283      	cmp	r3, r0
    8e88:	d303      	bcc.n	8e92 <critical_factorization+0x7a>
    8e8a:	4662      	mov	r2, ip
    8e8c:	4649      	mov	r1, r9
    8e8e:	0018      	movs	r0, r3
    8e90:	6011      	str	r1, [r2, #0]
    8e92:	bc0c      	pop	{r2, r3}
    8e94:	4690      	mov	r8, r2
    8e96:	4699      	mov	r9, r3
    8e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e9a:	42b7      	cmp	r7, r6
    8e9c:	d00d      	beq.n	8eba <critical_factorization+0xa2>
    8e9e:	2301      	movs	r3, #1
    8ea0:	002a      	movs	r2, r5
    8ea2:	4698      	mov	r8, r3
    8ea4:	3501      	adds	r5, #1
    8ea6:	2401      	movs	r4, #1
    8ea8:	e7c1      	b.n	8e2e <critical_factorization+0x16>
    8eaa:	42b7      	cmp	r7, r6
    8eac:	d009      	beq.n	8ec2 <critical_factorization+0xaa>
    8eae:	2301      	movs	r3, #1
    8eb0:	46a8      	mov	r8, r5
    8eb2:	4699      	mov	r9, r3
    8eb4:	3501      	adds	r5, #1
    8eb6:	2401      	movs	r4, #1
    8eb8:	e7d1      	b.n	8e5e <critical_factorization+0x46>
    8eba:	4544      	cmp	r4, r8
    8ebc:	d005      	beq.n	8eca <critical_factorization+0xb2>
    8ebe:	3401      	adds	r4, #1
    8ec0:	e7b5      	b.n	8e2e <critical_factorization+0x16>
    8ec2:	454c      	cmp	r4, r9
    8ec4:	d004      	beq.n	8ed0 <critical_factorization+0xb8>
    8ec6:	3401      	adds	r4, #1
    8ec8:	e7c9      	b.n	8e5e <critical_factorization+0x46>
    8eca:	001d      	movs	r5, r3
    8ecc:	2401      	movs	r4, #1
    8ece:	e7ae      	b.n	8e2e <critical_factorization+0x16>
    8ed0:	001d      	movs	r5, r3
    8ed2:	2401      	movs	r4, #1
    8ed4:	e7c3      	b.n	8e5e <critical_factorization+0x46>
    8ed6:	46c0      	nop			; (mov r8, r8)

00008ed8 <two_way_long_needle>:
    8ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8eda:	46de      	mov	lr, fp
    8edc:	4657      	mov	r7, sl
    8ede:	464e      	mov	r6, r9
    8ee0:	4645      	mov	r5, r8
    8ee2:	b5e0      	push	{r5, r6, r7, lr}
    8ee4:	0015      	movs	r5, r2
    8ee6:	4c7b      	ldr	r4, [pc, #492]	; (90d4 <two_way_long_needle+0x1fc>)
    8ee8:	0006      	movs	r6, r0
    8eea:	44a5      	add	sp, r4
    8eec:	aa03      	add	r2, sp, #12
    8eee:	000f      	movs	r7, r1
    8ef0:	0028      	movs	r0, r5
    8ef2:	0019      	movs	r1, r3
    8ef4:	001c      	movs	r4, r3
    8ef6:	f7ff ff8f 	bl	8e18 <critical_factorization>
    8efa:	4683      	mov	fp, r0
    8efc:	aaff      	add	r2, sp, #1020	; 0x3fc
    8efe:	ab04      	add	r3, sp, #16
    8f00:	3214      	adds	r2, #20
    8f02:	c310      	stmia	r3!, {r4}
    8f04:	4293      	cmp	r3, r2
    8f06:	d1fc      	bne.n	8f02 <two_way_long_needle+0x2a>
    8f08:	1e63      	subs	r3, r4, #1
    8f0a:	0029      	movs	r1, r5
    8f0c:	46a4      	mov	ip, r4
    8f0e:	2c00      	cmp	r4, #0
    8f10:	d009      	beq.n	8f26 <two_way_long_needle+0x4e>
    8f12:	2408      	movs	r4, #8
    8f14:	780a      	ldrb	r2, [r1, #0]
    8f16:	a802      	add	r0, sp, #8
    8f18:	0092      	lsls	r2, r2, #2
    8f1a:	1900      	adds	r0, r0, r4
    8f1c:	5083      	str	r3, [r0, r2]
    8f1e:	3101      	adds	r1, #1
    8f20:	3b01      	subs	r3, #1
    8f22:	d2f6      	bcs.n	8f12 <two_way_long_needle+0x3a>
    8f24:	4664      	mov	r4, ip
    8f26:	9b03      	ldr	r3, [sp, #12]
    8f28:	465a      	mov	r2, fp
    8f2a:	18e9      	adds	r1, r5, r3
    8f2c:	0028      	movs	r0, r5
    8f2e:	f7ff fc6b 	bl	8808 <memcmp>
    8f32:	2800      	cmp	r0, #0
    8f34:	d000      	beq.n	8f38 <two_way_long_needle+0x60>
    8f36:	e074      	b.n	9022 <two_way_long_needle+0x14a>
    8f38:	2300      	movs	r3, #0
    8f3a:	001a      	movs	r2, r3
    8f3c:	469a      	mov	sl, r3
    8f3e:	1e63      	subs	r3, r4, #1
    8f40:	4698      	mov	r8, r3
    8f42:	4659      	mov	r1, fp
    8f44:	2301      	movs	r3, #1
    8f46:	0038      	movs	r0, r7
    8f48:	46a1      	mov	r9, r4
    8f4a:	0017      	movs	r7, r2
    8f4c:	4644      	mov	r4, r8
    8f4e:	46b0      	mov	r8, r6
    8f50:	1a5b      	subs	r3, r3, r1
    8f52:	9301      	str	r3, [sp, #4]
    8f54:	9100      	str	r1, [sp, #0]
    8f56:	4656      	mov	r6, sl
    8f58:	444e      	add	r6, r9
    8f5a:	1a32      	subs	r2, r6, r0
    8f5c:	2100      	movs	r1, #0
    8f5e:	4440      	add	r0, r8
    8f60:	f006 f976 	bl	f250 <memchr>
    8f64:	2800      	cmp	r0, #0
    8f66:	d153      	bne.n	9010 <two_way_long_needle+0x138>
    8f68:	2e00      	cmp	r6, #0
    8f6a:	d051      	beq.n	9010 <two_way_long_needle+0x138>
    8f6c:	4643      	mov	r3, r8
    8f6e:	2108      	movs	r1, #8
    8f70:	199b      	adds	r3, r3, r6
    8f72:	3b01      	subs	r3, #1
    8f74:	781b      	ldrb	r3, [r3, #0]
    8f76:	aa02      	add	r2, sp, #8
    8f78:	009b      	lsls	r3, r3, #2
    8f7a:	1852      	adds	r2, r2, r1
    8f7c:	58d3      	ldr	r3, [r2, r3]
    8f7e:	2b00      	cmp	r3, #0
    8f80:	d00a      	beq.n	8f98 <two_way_long_needle+0xc0>
    8f82:	2f00      	cmp	r7, #0
    8f84:	d004      	beq.n	8f90 <two_way_long_needle+0xb8>
    8f86:	9a03      	ldr	r2, [sp, #12]
    8f88:	4293      	cmp	r3, r2
    8f8a:	d201      	bcs.n	8f90 <two_way_long_needle+0xb8>
    8f8c:	464b      	mov	r3, r9
    8f8e:	1a9b      	subs	r3, r3, r2
    8f90:	449a      	add	sl, r3
    8f92:	2700      	movs	r7, #0
    8f94:	0030      	movs	r0, r6
    8f96:	e7de      	b.n	8f56 <two_way_long_needle+0x7e>
    8f98:	9900      	ldr	r1, [sp, #0]
    8f9a:	003b      	movs	r3, r7
    8f9c:	428f      	cmp	r7, r1
    8f9e:	d200      	bcs.n	8fa2 <two_way_long_needle+0xca>
    8fa0:	000b      	movs	r3, r1
    8fa2:	42a3      	cmp	r3, r4
    8fa4:	d20d      	bcs.n	8fc2 <two_way_long_needle+0xea>
    8fa6:	4642      	mov	r2, r8
    8fa8:	4452      	add	r2, sl
    8faa:	e002      	b.n	8fb2 <two_way_long_needle+0xda>
    8fac:	3301      	adds	r3, #1
    8fae:	42a3      	cmp	r3, r4
    8fb0:	d207      	bcs.n	8fc2 <two_way_long_needle+0xea>
    8fb2:	5ce8      	ldrb	r0, [r5, r3]
    8fb4:	5cd1      	ldrb	r1, [r2, r3]
    8fb6:	4288      	cmp	r0, r1
    8fb8:	d0f8      	beq.n	8fac <two_way_long_needle+0xd4>
    8fba:	9a01      	ldr	r2, [sp, #4]
    8fbc:	4452      	add	r2, sl
    8fbe:	4692      	mov	sl, r2
    8fc0:	e7e6      	b.n	8f90 <two_way_long_needle+0xb8>
    8fc2:	9b00      	ldr	r3, [sp, #0]
    8fc4:	1e59      	subs	r1, r3, #1
    8fc6:	429f      	cmp	r7, r3
    8fc8:	d300      	bcc.n	8fcc <two_way_long_needle+0xf4>
    8fca:	e07d      	b.n	90c8 <two_way_long_needle+0x1f0>
    8fcc:	4642      	mov	r2, r8
    8fce:	4452      	add	r2, sl
    8fd0:	5c50      	ldrb	r0, [r2, r1]
    8fd2:	5c6b      	ldrb	r3, [r5, r1]
    8fd4:	4298      	cmp	r0, r3
    8fd6:	d000      	beq.n	8fda <two_way_long_needle+0x102>
    8fd8:	e074      	b.n	90c4 <two_way_long_needle+0x1ec>
    8fda:	1e7b      	subs	r3, r7, #1
    8fdc:	469b      	mov	fp, r3
    8fde:	0023      	movs	r3, r4
    8fe0:	46b4      	mov	ip, r6
    8fe2:	465c      	mov	r4, fp
    8fe4:	0016      	movs	r6, r2
    8fe6:	469b      	mov	fp, r3
    8fe8:	e004      	b.n	8ff4 <two_way_long_needle+0x11c>
    8fea:	5cea      	ldrb	r2, [r5, r3]
    8fec:	5cf0      	ldrb	r0, [r6, r3]
    8fee:	4282      	cmp	r2, r0
    8ff0:	d103      	bne.n	8ffa <two_way_long_needle+0x122>
    8ff2:	0019      	movs	r1, r3
    8ff4:	1e4b      	subs	r3, r1, #1
    8ff6:	42a3      	cmp	r3, r4
    8ff8:	d1f7      	bne.n	8fea <two_way_long_needle+0x112>
    8ffa:	4666      	mov	r6, ip
    8ffc:	465c      	mov	r4, fp
    8ffe:	3701      	adds	r7, #1
    9000:	428f      	cmp	r7, r1
    9002:	d863      	bhi.n	90cc <two_way_long_needle+0x1f4>
    9004:	464b      	mov	r3, r9
    9006:	9f03      	ldr	r7, [sp, #12]
    9008:	0030      	movs	r0, r6
    900a:	44ba      	add	sl, r7
    900c:	1bdf      	subs	r7, r3, r7
    900e:	e7a2      	b.n	8f56 <two_way_long_needle+0x7e>
    9010:	2000      	movs	r0, #0
    9012:	4b31      	ldr	r3, [pc, #196]	; (90d8 <two_way_long_needle+0x200>)
    9014:	449d      	add	sp, r3
    9016:	bc3c      	pop	{r2, r3, r4, r5}
    9018:	4690      	mov	r8, r2
    901a:	4699      	mov	r9, r3
    901c:	46a2      	mov	sl, r4
    901e:	46ab      	mov	fp, r5
    9020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9022:	465b      	mov	r3, fp
    9024:	1ae3      	subs	r3, r4, r3
    9026:	455b      	cmp	r3, fp
    9028:	d34a      	bcc.n	90c0 <two_way_long_needle+0x1e8>
    902a:	3301      	adds	r3, #1
    902c:	9303      	str	r3, [sp, #12]
    902e:	2300      	movs	r3, #0
    9030:	469a      	mov	sl, r3
    9032:	1e63      	subs	r3, r4, #1
    9034:	4698      	mov	r8, r3
    9036:	465a      	mov	r2, fp
    9038:	2301      	movs	r3, #1
    903a:	0038      	movs	r0, r7
    903c:	46a1      	mov	r9, r4
    903e:	4657      	mov	r7, sl
    9040:	4644      	mov	r4, r8
    9042:	46b0      	mov	r8, r6
    9044:	1a9b      	subs	r3, r3, r2
    9046:	9300      	str	r3, [sp, #0]
    9048:	464b      	mov	r3, r9
    904a:	18fe      	adds	r6, r7, r3
    904c:	1a32      	subs	r2, r6, r0
    904e:	2100      	movs	r1, #0
    9050:	4440      	add	r0, r8
    9052:	f006 f8fd 	bl	f250 <memchr>
    9056:	2800      	cmp	r0, #0
    9058:	d1da      	bne.n	9010 <two_way_long_needle+0x138>
    905a:	2e00      	cmp	r6, #0
    905c:	d0d8      	beq.n	9010 <two_way_long_needle+0x138>
    905e:	4643      	mov	r3, r8
    9060:	2108      	movs	r1, #8
    9062:	199b      	adds	r3, r3, r6
    9064:	3b01      	subs	r3, #1
    9066:	781b      	ldrb	r3, [r3, #0]
    9068:	aa02      	add	r2, sp, #8
    906a:	009b      	lsls	r3, r3, #2
    906c:	1852      	adds	r2, r2, r1
    906e:	58d3      	ldr	r3, [r2, r3]
    9070:	2b00      	cmp	r3, #0
    9072:	d122      	bne.n	90ba <two_way_long_needle+0x1e2>
    9074:	4643      	mov	r3, r8
    9076:	19d8      	adds	r0, r3, r7
    9078:	45a3      	cmp	fp, r4
    907a:	d20c      	bcs.n	9096 <two_way_long_needle+0x1be>
    907c:	465b      	mov	r3, fp
    907e:	5cc1      	ldrb	r1, [r0, r3]
    9080:	5cea      	ldrb	r2, [r5, r3]
    9082:	4291      	cmp	r1, r2
    9084:	d004      	beq.n	9090 <two_way_long_needle+0x1b8>
    9086:	e015      	b.n	90b4 <two_way_long_needle+0x1dc>
    9088:	5ce9      	ldrb	r1, [r5, r3]
    908a:	5cc2      	ldrb	r2, [r0, r3]
    908c:	4291      	cmp	r1, r2
    908e:	d111      	bne.n	90b4 <two_way_long_needle+0x1dc>
    9090:	3301      	adds	r3, #1
    9092:	42a3      	cmp	r3, r4
    9094:	d3f8      	bcc.n	9088 <two_way_long_needle+0x1b0>
    9096:	465b      	mov	r3, fp
    9098:	3b01      	subs	r3, #1
    909a:	d202      	bcs.n	90a2 <two_way_long_needle+0x1ca>
    909c:	e7b9      	b.n	9012 <two_way_long_needle+0x13a>
    909e:	3b01      	subs	r3, #1
    90a0:	d3b7      	bcc.n	9012 <two_way_long_needle+0x13a>
    90a2:	5ce9      	ldrb	r1, [r5, r3]
    90a4:	5cc2      	ldrb	r2, [r0, r3]
    90a6:	4291      	cmp	r1, r2
    90a8:	d0f9      	beq.n	909e <two_way_long_needle+0x1c6>
    90aa:	9b03      	ldr	r3, [sp, #12]
    90ac:	0030      	movs	r0, r6
    90ae:	469c      	mov	ip, r3
    90b0:	4467      	add	r7, ip
    90b2:	e7c9      	b.n	9048 <two_way_long_needle+0x170>
    90b4:	9a00      	ldr	r2, [sp, #0]
    90b6:	4694      	mov	ip, r2
    90b8:	4467      	add	r7, ip
    90ba:	18ff      	adds	r7, r7, r3
    90bc:	0030      	movs	r0, r6
    90be:	e7c3      	b.n	9048 <two_way_long_needle+0x170>
    90c0:	465b      	mov	r3, fp
    90c2:	e7b2      	b.n	902a <two_way_long_needle+0x152>
    90c4:	9900      	ldr	r1, [sp, #0]
    90c6:	e79a      	b.n	8ffe <two_way_long_needle+0x126>
    90c8:	0019      	movs	r1, r3
    90ca:	e798      	b.n	8ffe <two_way_long_needle+0x126>
    90cc:	4640      	mov	r0, r8
    90ce:	4450      	add	r0, sl
    90d0:	e79f      	b.n	9012 <two_way_long_needle+0x13a>
    90d2:	46c0      	nop			; (mov r8, r8)
    90d4:	fffffbec 	.word	0xfffffbec
    90d8:	00000414 	.word	0x00000414

000090dc <strstr>:
    90dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    90de:	4657      	mov	r7, sl
    90e0:	4645      	mov	r5, r8
    90e2:	46de      	mov	lr, fp
    90e4:	464e      	mov	r6, r9
    90e6:	b5e0      	push	{r5, r6, r7, lr}
    90e8:	7803      	ldrb	r3, [r0, #0]
    90ea:	b085      	sub	sp, #20
    90ec:	0007      	movs	r7, r0
    90ee:	000d      	movs	r5, r1
    90f0:	2b00      	cmp	r3, #0
    90f2:	d035      	beq.n	9160 <strstr+0x84>
    90f4:	7809      	ldrb	r1, [r1, #0]
    90f6:	1e0a      	subs	r2, r1, #0
    90f8:	d100      	bne.n	90fc <strstr+0x20>
    90fa:	e09f      	b.n	923c <strstr+0x160>
    90fc:	002c      	movs	r4, r5
    90fe:	2601      	movs	r6, #1
    9100:	e002      	b.n	9108 <strstr+0x2c>
    9102:	7822      	ldrb	r2, [r4, #0]
    9104:	2a00      	cmp	r2, #0
    9106:	d00b      	beq.n	9120 <strstr+0x44>
    9108:	1a9b      	subs	r3, r3, r2
    910a:	425a      	negs	r2, r3
    910c:	4153      	adcs	r3, r2
    910e:	3001      	adds	r0, #1
    9110:	401e      	ands	r6, r3
    9112:	7803      	ldrb	r3, [r0, #0]
    9114:	3401      	adds	r4, #1
    9116:	2b00      	cmp	r3, #0
    9118:	d1f3      	bne.n	9102 <strstr+0x26>
    911a:	7823      	ldrb	r3, [r4, #0]
    911c:	2b00      	cmp	r3, #0
    911e:	d122      	bne.n	9166 <strstr+0x8a>
    9120:	0038      	movs	r0, r7
    9122:	2e00      	cmp	r6, #0
    9124:	d006      	beq.n	9134 <strstr+0x58>
    9126:	b005      	add	sp, #20
    9128:	bc3c      	pop	{r2, r3, r4, r5}
    912a:	4690      	mov	r8, r2
    912c:	4699      	mov	r9, r3
    912e:	46a2      	mov	sl, r4
    9130:	46ab      	mov	fp, r5
    9132:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9134:	1c78      	adds	r0, r7, #1
    9136:	f7ff fd8b 	bl	8c50 <strchr>
    913a:	1b64      	subs	r4, r4, r5
    913c:	1e06      	subs	r6, r0, #0
    913e:	d012      	beq.n	9166 <strstr+0x8a>
    9140:	2c01      	cmp	r4, #1
    9142:	d0f0      	beq.n	9126 <strstr+0x4a>
    9144:	193f      	adds	r7, r7, r4
    9146:	2101      	movs	r1, #1
    9148:	42b8      	cmp	r0, r7
    914a:	d800      	bhi.n	914e <strstr+0x72>
    914c:	1a39      	subs	r1, r7, r0
    914e:	000f      	movs	r7, r1
    9150:	2c1f      	cmp	r4, #31
    9152:	d90a      	bls.n	916a <strstr+0x8e>
    9154:	0023      	movs	r3, r4
    9156:	002a      	movs	r2, r5
    9158:	0030      	movs	r0, r6
    915a:	f7ff febd 	bl	8ed8 <two_way_long_needle>
    915e:	e7e2      	b.n	9126 <strstr+0x4a>
    9160:	780b      	ldrb	r3, [r1, #0]
    9162:	2b00      	cmp	r3, #0
    9164:	d06a      	beq.n	923c <strstr+0x160>
    9166:	2000      	movs	r0, #0
    9168:	e7dd      	b.n	9126 <strstr+0x4a>
    916a:	aa03      	add	r2, sp, #12
    916c:	0021      	movs	r1, r4
    916e:	0028      	movs	r0, r5
    9170:	f7ff fe52 	bl	8e18 <critical_factorization>
    9174:	9b03      	ldr	r3, [sp, #12]
    9176:	4680      	mov	r8, r0
    9178:	0002      	movs	r2, r0
    917a:	18e9      	adds	r1, r5, r3
    917c:	0028      	movs	r0, r5
    917e:	f7ff fb43 	bl	8808 <memcmp>
    9182:	2800      	cmp	r0, #0
    9184:	d15c      	bne.n	9240 <strstr+0x164>
    9186:	2300      	movs	r3, #0
    9188:	4699      	mov	r9, r3
    918a:	4643      	mov	r3, r8
    918c:	3b01      	subs	r3, #1
    918e:	9300      	str	r3, [sp, #0]
    9190:	4642      	mov	r2, r8
    9192:	2301      	movs	r3, #1
    9194:	46b2      	mov	sl, r6
    9196:	0038      	movs	r0, r7
    9198:	464e      	mov	r6, r9
    919a:	464f      	mov	r7, r9
    919c:	1a9b      	subs	r3, r3, r2
    919e:	9301      	str	r3, [sp, #4]
    91a0:	19e3      	adds	r3, r4, r7
    91a2:	1a1a      	subs	r2, r3, r0
    91a4:	2100      	movs	r1, #0
    91a6:	4450      	add	r0, sl
    91a8:	4699      	mov	r9, r3
    91aa:	f006 f851 	bl	f250 <memchr>
    91ae:	2800      	cmp	r0, #0
    91b0:	d1d9      	bne.n	9166 <strstr+0x8a>
    91b2:	464b      	mov	r3, r9
    91b4:	2b00      	cmp	r3, #0
    91b6:	d0d6      	beq.n	9166 <strstr+0x8a>
    91b8:	4643      	mov	r3, r8
    91ba:	45b0      	cmp	r8, r6
    91bc:	d200      	bcs.n	91c0 <strstr+0xe4>
    91be:	0033      	movs	r3, r6
    91c0:	429c      	cmp	r4, r3
    91c2:	d90f      	bls.n	91e4 <strstr+0x108>
    91c4:	4652      	mov	r2, sl
    91c6:	18d2      	adds	r2, r2, r3
    91c8:	5ce9      	ldrb	r1, [r5, r3]
    91ca:	5dd2      	ldrb	r2, [r2, r7]
    91cc:	4291      	cmp	r1, r2
    91ce:	d12e      	bne.n	922e <strstr+0x152>
    91d0:	4652      	mov	r2, sl
    91d2:	19d0      	adds	r0, r2, r7
    91d4:	e003      	b.n	91de <strstr+0x102>
    91d6:	5ce9      	ldrb	r1, [r5, r3]
    91d8:	5cc2      	ldrb	r2, [r0, r3]
    91da:	4291      	cmp	r1, r2
    91dc:	d127      	bne.n	922e <strstr+0x152>
    91de:	3301      	adds	r3, #1
    91e0:	429c      	cmp	r4, r3
    91e2:	d1f8      	bne.n	91d6 <strstr+0xfa>
    91e4:	9a00      	ldr	r2, [sp, #0]
    91e6:	45b0      	cmp	r8, r6
    91e8:	d976      	bls.n	92d8 <strstr+0x1fc>
    91ea:	46bc      	mov	ip, r7
    91ec:	44d4      	add	ip, sl
    91ee:	4661      	mov	r1, ip
    91f0:	9b00      	ldr	r3, [sp, #0]
    91f2:	5cc9      	ldrb	r1, [r1, r3]
    91f4:	5ceb      	ldrb	r3, [r5, r3]
    91f6:	4299      	cmp	r1, r3
    91f8:	d16e      	bne.n	92d8 <strstr+0x1fc>
    91fa:	1e73      	subs	r3, r6, #1
    91fc:	469b      	mov	fp, r3
    91fe:	4663      	mov	r3, ip
    9200:	46a4      	mov	ip, r4
    9202:	465c      	mov	r4, fp
    9204:	46b3      	mov	fp, r6
    9206:	001e      	movs	r6, r3
    9208:	e004      	b.n	9214 <strstr+0x138>
    920a:	5ce8      	ldrb	r0, [r5, r3]
    920c:	5cf1      	ldrb	r1, [r6, r3]
    920e:	4288      	cmp	r0, r1
    9210:	d103      	bne.n	921a <strstr+0x13e>
    9212:	001a      	movs	r2, r3
    9214:	1e53      	subs	r3, r2, #1
    9216:	42a3      	cmp	r3, r4
    9218:	d1f7      	bne.n	920a <strstr+0x12e>
    921a:	4664      	mov	r4, ip
    921c:	465e      	mov	r6, fp
    921e:	3601      	adds	r6, #1
    9220:	4296      	cmp	r6, r2
    9222:	d85b      	bhi.n	92dc <strstr+0x200>
    9224:	9e03      	ldr	r6, [sp, #12]
    9226:	4648      	mov	r0, r9
    9228:	19bf      	adds	r7, r7, r6
    922a:	1ba6      	subs	r6, r4, r6
    922c:	e7b8      	b.n	91a0 <strstr+0xc4>
    922e:	9a01      	ldr	r2, [sp, #4]
    9230:	2600      	movs	r6, #0
    9232:	4694      	mov	ip, r2
    9234:	4467      	add	r7, ip
    9236:	18ff      	adds	r7, r7, r3
    9238:	4648      	mov	r0, r9
    923a:	e7b1      	b.n	91a0 <strstr+0xc4>
    923c:	0038      	movs	r0, r7
    923e:	e772      	b.n	9126 <strstr+0x4a>
    9240:	4643      	mov	r3, r8
    9242:	1ae3      	subs	r3, r4, r3
    9244:	4543      	cmp	r3, r8
    9246:	d200      	bcs.n	924a <strstr+0x16e>
    9248:	4643      	mov	r3, r8
    924a:	3301      	adds	r3, #1
    924c:	9303      	str	r3, [sp, #12]
    924e:	2300      	movs	r3, #0
    9250:	4642      	mov	r2, r8
    9252:	4699      	mov	r9, r3
    9254:	3301      	adds	r3, #1
    9256:	1a9b      	subs	r3, r3, r2
    9258:	464a      	mov	r2, r9
    925a:	46b3      	mov	fp, r6
    925c:	46b1      	mov	r9, r6
    925e:	0038      	movs	r0, r7
    9260:	469a      	mov	sl, r3
    9262:	0016      	movs	r6, r2
    9264:	44c3      	add	fp, r8
    9266:	19a7      	adds	r7, r4, r6
    9268:	1a3a      	subs	r2, r7, r0
    926a:	2100      	movs	r1, #0
    926c:	4448      	add	r0, r9
    926e:	f005 ffef 	bl	f250 <memchr>
    9272:	2800      	cmp	r0, #0
    9274:	d000      	beq.n	9278 <strstr+0x19c>
    9276:	e776      	b.n	9166 <strstr+0x8a>
    9278:	2f00      	cmp	r7, #0
    927a:	d100      	bne.n	927e <strstr+0x1a2>
    927c:	e773      	b.n	9166 <strstr+0x8a>
    927e:	464b      	mov	r3, r9
    9280:	1998      	adds	r0, r3, r6
    9282:	4544      	cmp	r4, r8
    9284:	d90f      	bls.n	92a6 <strstr+0x1ca>
    9286:	465b      	mov	r3, fp
    9288:	5d99      	ldrb	r1, [r3, r6]
    928a:	4643      	mov	r3, r8
    928c:	4648      	mov	r0, r9
    928e:	5cea      	ldrb	r2, [r5, r3]
    9290:	1980      	adds	r0, r0, r6
    9292:	4291      	cmp	r1, r2
    9294:	d004      	beq.n	92a0 <strstr+0x1c4>
    9296:	e016      	b.n	92c6 <strstr+0x1ea>
    9298:	5ce9      	ldrb	r1, [r5, r3]
    929a:	5cc2      	ldrb	r2, [r0, r3]
    929c:	4291      	cmp	r1, r2
    929e:	d112      	bne.n	92c6 <strstr+0x1ea>
    92a0:	3301      	adds	r3, #1
    92a2:	429c      	cmp	r4, r3
    92a4:	d1f8      	bne.n	9298 <strstr+0x1bc>
    92a6:	4643      	mov	r3, r8
    92a8:	3b01      	subs	r3, #1
    92aa:	d200      	bcs.n	92ae <strstr+0x1d2>
    92ac:	e73b      	b.n	9126 <strstr+0x4a>
    92ae:	5cc1      	ldrb	r1, [r0, r3]
    92b0:	5cea      	ldrb	r2, [r5, r3]
    92b2:	4291      	cmp	r1, r2
    92b4:	d004      	beq.n	92c0 <strstr+0x1e4>
    92b6:	e00a      	b.n	92ce <strstr+0x1f2>
    92b8:	5ce9      	ldrb	r1, [r5, r3]
    92ba:	5cc2      	ldrb	r2, [r0, r3]
    92bc:	4291      	cmp	r1, r2
    92be:	d106      	bne.n	92ce <strstr+0x1f2>
    92c0:	3b01      	subs	r3, #1
    92c2:	d2f9      	bcs.n	92b8 <strstr+0x1dc>
    92c4:	e72f      	b.n	9126 <strstr+0x4a>
    92c6:	4456      	add	r6, sl
    92c8:	18f6      	adds	r6, r6, r3
    92ca:	0038      	movs	r0, r7
    92cc:	e7cb      	b.n	9266 <strstr+0x18a>
    92ce:	9b03      	ldr	r3, [sp, #12]
    92d0:	0038      	movs	r0, r7
    92d2:	469c      	mov	ip, r3
    92d4:	4466      	add	r6, ip
    92d6:	e7c6      	b.n	9266 <strstr+0x18a>
    92d8:	4642      	mov	r2, r8
    92da:	e7a0      	b.n	921e <strstr+0x142>
    92dc:	46b9      	mov	r9, r7
    92de:	4650      	mov	r0, sl
    92e0:	4448      	add	r0, r9
    92e2:	e720      	b.n	9126 <strstr+0x4a>

000092e4 <_strtol_l.isra.0>:
    92e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    92e6:	4657      	mov	r7, sl
    92e8:	464e      	mov	r6, r9
    92ea:	46de      	mov	lr, fp
    92ec:	4645      	mov	r5, r8
    92ee:	b5e0      	push	{r5, r6, r7, lr}
    92f0:	001e      	movs	r6, r3
    92f2:	2308      	movs	r3, #8
    92f4:	b083      	sub	sp, #12
    92f6:	9001      	str	r0, [sp, #4]
    92f8:	9100      	str	r1, [sp, #0]
    92fa:	4692      	mov	sl, r2
    92fc:	000f      	movs	r7, r1
    92fe:	4699      	mov	r9, r3
    9300:	e000      	b.n	9304 <_strtol_l.isra.0+0x20>
    9302:	002f      	movs	r7, r5
    9304:	980c      	ldr	r0, [sp, #48]	; 0x30
    9306:	783c      	ldrb	r4, [r7, #0]
    9308:	f005 fbf0 	bl	eaec <__locale_ctype_ptr_l>
    930c:	464a      	mov	r2, r9
    930e:	1900      	adds	r0, r0, r4
    9310:	7843      	ldrb	r3, [r0, #1]
    9312:	1c7d      	adds	r5, r7, #1
    9314:	421a      	tst	r2, r3
    9316:	d1f4      	bne.n	9302 <_strtol_l.isra.0+0x1e>
    9318:	2c2d      	cmp	r4, #45	; 0x2d
    931a:	d04f      	beq.n	93bc <_strtol_l.isra.0+0xd8>
    931c:	2300      	movs	r3, #0
    931e:	4698      	mov	r8, r3
    9320:	2c2b      	cmp	r4, #43	; 0x2b
    9322:	d05c      	beq.n	93de <_strtol_l.isra.0+0xfa>
    9324:	2e00      	cmp	r6, #0
    9326:	d003      	beq.n	9330 <_strtol_l.isra.0+0x4c>
    9328:	2e10      	cmp	r6, #16
    932a:	d05b      	beq.n	93e4 <_strtol_l.isra.0+0x100>
    932c:	0037      	movs	r7, r6
    932e:	e003      	b.n	9338 <_strtol_l.isra.0+0x54>
    9330:	2c30      	cmp	r4, #48	; 0x30
    9332:	d063      	beq.n	93fc <_strtol_l.isra.0+0x118>
    9334:	270a      	movs	r7, #10
    9336:	260a      	movs	r6, #10
    9338:	4b35      	ldr	r3, [pc, #212]	; (9410 <_strtol_l.isra.0+0x12c>)
    933a:	0039      	movs	r1, r7
    933c:	4443      	add	r3, r8
    933e:	0018      	movs	r0, r3
    9340:	4699      	mov	r9, r3
    9342:	f7fd f899 	bl	6478 <__aeabi_uidivmod>
    9346:	4648      	mov	r0, r9
    9348:	468b      	mov	fp, r1
    934a:	0039      	movs	r1, r7
    934c:	f7fd f80e 	bl	636c <__udivsi3>
    9350:	2200      	movs	r2, #0
    9352:	0001      	movs	r1, r0
    9354:	2000      	movs	r0, #0
    9356:	0023      	movs	r3, r4
    9358:	3b30      	subs	r3, #48	; 0x30
    935a:	2b09      	cmp	r3, #9
    935c:	d907      	bls.n	936e <_strtol_l.isra.0+0x8a>
    935e:	3b11      	subs	r3, #17
    9360:	2b19      	cmp	r3, #25
    9362:	d903      	bls.n	936c <_strtol_l.isra.0+0x88>
    9364:	0023      	movs	r3, r4
    9366:	3b61      	subs	r3, #97	; 0x61
    9368:	2b19      	cmp	r3, #25
    936a:	d80d      	bhi.n	9388 <_strtol_l.isra.0+0xa4>
    936c:	330a      	adds	r3, #10
    936e:	429e      	cmp	r6, r3
    9370:	dd0a      	ble.n	9388 <_strtol_l.isra.0+0xa4>
    9372:	1c54      	adds	r4, r2, #1
    9374:	d005      	beq.n	9382 <_strtol_l.isra.0+0x9e>
    9376:	4281      	cmp	r1, r0
    9378:	d31d      	bcc.n	93b6 <_strtol_l.isra.0+0xd2>
    937a:	d01a      	beq.n	93b2 <_strtol_l.isra.0+0xce>
    937c:	2201      	movs	r2, #1
    937e:	4378      	muls	r0, r7
    9380:	1818      	adds	r0, r3, r0
    9382:	782c      	ldrb	r4, [r5, #0]
    9384:	3501      	adds	r5, #1
    9386:	e7e6      	b.n	9356 <_strtol_l.isra.0+0x72>
    9388:	1c53      	adds	r3, r2, #1
    938a:	d01c      	beq.n	93c6 <_strtol_l.isra.0+0xe2>
    938c:	4643      	mov	r3, r8
    938e:	2b00      	cmp	r3, #0
    9390:	d000      	beq.n	9394 <_strtol_l.isra.0+0xb0>
    9392:	4240      	negs	r0, r0
    9394:	4653      	mov	r3, sl
    9396:	2b00      	cmp	r3, #0
    9398:	d004      	beq.n	93a4 <_strtol_l.isra.0+0xc0>
    939a:	9b00      	ldr	r3, [sp, #0]
    939c:	2a00      	cmp	r2, #0
    939e:	d11c      	bne.n	93da <_strtol_l.isra.0+0xf6>
    93a0:	4652      	mov	r2, sl
    93a2:	6013      	str	r3, [r2, #0]
    93a4:	b003      	add	sp, #12
    93a6:	bc3c      	pop	{r2, r3, r4, r5}
    93a8:	4690      	mov	r8, r2
    93aa:	4699      	mov	r9, r3
    93ac:	46a2      	mov	sl, r4
    93ae:	46ab      	mov	fp, r5
    93b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93b2:	459b      	cmp	fp, r3
    93b4:	dae2      	bge.n	937c <_strtol_l.isra.0+0x98>
    93b6:	2201      	movs	r2, #1
    93b8:	4252      	negs	r2, r2
    93ba:	e7e2      	b.n	9382 <_strtol_l.isra.0+0x9e>
    93bc:	2301      	movs	r3, #1
    93be:	782c      	ldrb	r4, [r5, #0]
    93c0:	4698      	mov	r8, r3
    93c2:	1cbd      	adds	r5, r7, #2
    93c4:	e7ae      	b.n	9324 <_strtol_l.isra.0+0x40>
    93c6:	2322      	movs	r3, #34	; 0x22
    93c8:	9a01      	ldr	r2, [sp, #4]
    93ca:	4648      	mov	r0, r9
    93cc:	6013      	str	r3, [r2, #0]
    93ce:	4653      	mov	r3, sl
    93d0:	2b00      	cmp	r3, #0
    93d2:	d0e7      	beq.n	93a4 <_strtol_l.isra.0+0xc0>
    93d4:	1e6b      	subs	r3, r5, #1
    93d6:	4648      	mov	r0, r9
    93d8:	e7e2      	b.n	93a0 <_strtol_l.isra.0+0xbc>
    93da:	4681      	mov	r9, r0
    93dc:	e7fa      	b.n	93d4 <_strtol_l.isra.0+0xf0>
    93de:	782c      	ldrb	r4, [r5, #0]
    93e0:	1cbd      	adds	r5, r7, #2
    93e2:	e79f      	b.n	9324 <_strtol_l.isra.0+0x40>
    93e4:	2c30      	cmp	r4, #48	; 0x30
    93e6:	d111      	bne.n	940c <_strtol_l.isra.0+0x128>
    93e8:	2220      	movs	r2, #32
    93ea:	782b      	ldrb	r3, [r5, #0]
    93ec:	4393      	bics	r3, r2
    93ee:	2b58      	cmp	r3, #88	; 0x58
    93f0:	d10c      	bne.n	940c <_strtol_l.isra.0+0x128>
    93f2:	786c      	ldrb	r4, [r5, #1]
    93f4:	2710      	movs	r7, #16
    93f6:	3502      	adds	r5, #2
    93f8:	2610      	movs	r6, #16
    93fa:	e79d      	b.n	9338 <_strtol_l.isra.0+0x54>
    93fc:	2220      	movs	r2, #32
    93fe:	782b      	ldrb	r3, [r5, #0]
    9400:	4393      	bics	r3, r2
    9402:	2b58      	cmp	r3, #88	; 0x58
    9404:	d0f5      	beq.n	93f2 <_strtol_l.isra.0+0x10e>
    9406:	2708      	movs	r7, #8
    9408:	2608      	movs	r6, #8
    940a:	e795      	b.n	9338 <_strtol_l.isra.0+0x54>
    940c:	2710      	movs	r7, #16
    940e:	e793      	b.n	9338 <_strtol_l.isra.0+0x54>
    9410:	7fffffff 	.word	0x7fffffff

00009414 <_strtol_r>:
    9414:	b510      	push	{r4, lr}
    9416:	4c06      	ldr	r4, [pc, #24]	; (9430 <_strtol_r+0x1c>)
    9418:	b082      	sub	sp, #8
    941a:	6824      	ldr	r4, [r4, #0]
    941c:	6b64      	ldr	r4, [r4, #52]	; 0x34
    941e:	2c00      	cmp	r4, #0
    9420:	d004      	beq.n	942c <_strtol_r+0x18>
    9422:	9400      	str	r4, [sp, #0]
    9424:	f7ff ff5e 	bl	92e4 <_strtol_l.isra.0>
    9428:	b002      	add	sp, #8
    942a:	bd10      	pop	{r4, pc}
    942c:	4c01      	ldr	r4, [pc, #4]	; (9434 <_strtol_r+0x20>)
    942e:	e7f8      	b.n	9422 <_strtol_r+0xe>
    9430:	20000080 	.word	0x20000080
    9434:	200004b4 	.word	0x200004b4

00009438 <_svfprintf_r>:
    9438:	b5f0      	push	{r4, r5, r6, r7, lr}
    943a:	46de      	mov	lr, fp
    943c:	4645      	mov	r5, r8
    943e:	4657      	mov	r7, sl
    9440:	464e      	mov	r6, r9
    9442:	b5e0      	push	{r5, r6, r7, lr}
    9444:	b0c3      	sub	sp, #268	; 0x10c
    9446:	000d      	movs	r5, r1
    9448:	9106      	str	r1, [sp, #24]
    944a:	0014      	movs	r4, r2
    944c:	930f      	str	r3, [sp, #60]	; 0x3c
    944e:	9009      	str	r0, [sp, #36]	; 0x24
    9450:	f005 fb60 	bl	eb14 <_localeconv_r>
    9454:	6803      	ldr	r3, [r0, #0]
    9456:	0018      	movs	r0, r3
    9458:	9319      	str	r3, [sp, #100]	; 0x64
    945a:	f7ff fcab 	bl	8db4 <strlen>
    945e:	9018      	str	r0, [sp, #96]	; 0x60
    9460:	89ab      	ldrh	r3, [r5, #12]
    9462:	061b      	lsls	r3, r3, #24
    9464:	d505      	bpl.n	9472 <_svfprintf_r+0x3a>
    9466:	692b      	ldr	r3, [r5, #16]
    9468:	9307      	str	r3, [sp, #28]
    946a:	2b00      	cmp	r3, #0
    946c:	d101      	bne.n	9472 <_svfprintf_r+0x3a>
    946e:	f001 f863 	bl	a538 <_svfprintf_r+0x1100>
    9472:	ab32      	add	r3, sp, #200	; 0xc8
    9474:	9325      	str	r3, [sp, #148]	; 0x94
    9476:	2300      	movs	r3, #0
    9478:	46a3      	mov	fp, r4
    947a:	af25      	add	r7, sp, #148	; 0x94
    947c:	60bb      	str	r3, [r7, #8]
    947e:	607b      	str	r3, [r7, #4]
    9480:	9314      	str	r3, [sp, #80]	; 0x50
    9482:	9316      	str	r3, [sp, #88]	; 0x58
    9484:	9315      	str	r3, [sp, #84]	; 0x54
    9486:	ae32      	add	r6, sp, #200	; 0xc8
    9488:	9317      	str	r3, [sp, #92]	; 0x5c
    948a:	931a      	str	r3, [sp, #104]	; 0x68
    948c:	930a      	str	r3, [sp, #40]	; 0x28
    948e:	465b      	mov	r3, fp
    9490:	781b      	ldrb	r3, [r3, #0]
    9492:	465c      	mov	r4, fp
    9494:	2b00      	cmp	r3, #0
    9496:	d01c      	beq.n	94d2 <_svfprintf_r+0x9a>
    9498:	2b25      	cmp	r3, #37	; 0x25
    949a:	d102      	bne.n	94a2 <_svfprintf_r+0x6a>
    949c:	e019      	b.n	94d2 <_svfprintf_r+0x9a>
    949e:	2b25      	cmp	r3, #37	; 0x25
    94a0:	d003      	beq.n	94aa <_svfprintf_r+0x72>
    94a2:	3401      	adds	r4, #1
    94a4:	7823      	ldrb	r3, [r4, #0]
    94a6:	2b00      	cmp	r3, #0
    94a8:	d1f9      	bne.n	949e <_svfprintf_r+0x66>
    94aa:	465b      	mov	r3, fp
    94ac:	1ae5      	subs	r5, r4, r3
    94ae:	d010      	beq.n	94d2 <_svfprintf_r+0x9a>
    94b0:	465b      	mov	r3, fp
    94b2:	6033      	str	r3, [r6, #0]
    94b4:	68bb      	ldr	r3, [r7, #8]
    94b6:	6075      	str	r5, [r6, #4]
    94b8:	195b      	adds	r3, r3, r5
    94ba:	60bb      	str	r3, [r7, #8]
    94bc:	687b      	ldr	r3, [r7, #4]
    94be:	3301      	adds	r3, #1
    94c0:	607b      	str	r3, [r7, #4]
    94c2:	2b07      	cmp	r3, #7
    94c4:	dc2e      	bgt.n	9524 <_svfprintf_r+0xec>
    94c6:	3608      	adds	r6, #8
    94c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    94ca:	469c      	mov	ip, r3
    94cc:	44ac      	add	ip, r5
    94ce:	4663      	mov	r3, ip
    94d0:	930a      	str	r3, [sp, #40]	; 0x28
    94d2:	7823      	ldrb	r3, [r4, #0]
    94d4:	2b00      	cmp	r3, #0
    94d6:	d02e      	beq.n	9536 <_svfprintf_r+0xfe>
    94d8:	1c63      	adds	r3, r4, #1
    94da:	469b      	mov	fp, r3
    94dc:	2300      	movs	r3, #0
    94de:	aa16      	add	r2, sp, #88	; 0x58
    94e0:	77d3      	strb	r3, [r2, #31]
    94e2:	2201      	movs	r2, #1
    94e4:	4252      	negs	r2, r2
    94e6:	4692      	mov	sl, r2
    94e8:	2200      	movs	r2, #0
    94ea:	2100      	movs	r1, #0
    94ec:	920b      	str	r2, [sp, #44]	; 0x2c
    94ee:	3220      	adds	r2, #32
    94f0:	4691      	mov	r9, r2
    94f2:	3220      	adds	r2, #32
    94f4:	7863      	ldrb	r3, [r4, #1]
    94f6:	4688      	mov	r8, r1
    94f8:	2000      	movs	r0, #0
    94fa:	2400      	movs	r4, #0
    94fc:	4694      	mov	ip, r2
    94fe:	4659      	mov	r1, fp
    9500:	3101      	adds	r1, #1
    9502:	001a      	movs	r2, r3
    9504:	3a20      	subs	r2, #32
    9506:	2a58      	cmp	r2, #88	; 0x58
    9508:	d900      	bls.n	950c <_svfprintf_r+0xd4>
    950a:	e2fd      	b.n	9b08 <_svfprintf_r+0x6d0>
    950c:	4dd7      	ldr	r5, [pc, #860]	; (986c <_svfprintf_r+0x434>)
    950e:	0092      	lsls	r2, r2, #2
    9510:	58aa      	ldr	r2, [r5, r2]
    9512:	4697      	mov	pc, r2
    9514:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9516:	920f      	str	r2, [sp, #60]	; 0x3c
    9518:	425b      	negs	r3, r3
    951a:	930b      	str	r3, [sp, #44]	; 0x2c
    951c:	2304      	movs	r3, #4
    951e:	431c      	orrs	r4, r3
    9520:	780b      	ldrb	r3, [r1, #0]
    9522:	e7ed      	b.n	9500 <_svfprintf_r+0xc8>
    9524:	003a      	movs	r2, r7
    9526:	9906      	ldr	r1, [sp, #24]
    9528:	9809      	ldr	r0, [sp, #36]	; 0x24
    952a:	f008 f80d 	bl	11548 <__ssprint_r>
    952e:	2800      	cmp	r0, #0
    9530:	d109      	bne.n	9546 <_svfprintf_r+0x10e>
    9532:	ae32      	add	r6, sp, #200	; 0xc8
    9534:	e7c8      	b.n	94c8 <_svfprintf_r+0x90>
    9536:	68bb      	ldr	r3, [r7, #8]
    9538:	2b00      	cmp	r3, #0
    953a:	d004      	beq.n	9546 <_svfprintf_r+0x10e>
    953c:	003a      	movs	r2, r7
    953e:	9906      	ldr	r1, [sp, #24]
    9540:	9809      	ldr	r0, [sp, #36]	; 0x24
    9542:	f008 f801 	bl	11548 <__ssprint_r>
    9546:	9b06      	ldr	r3, [sp, #24]
    9548:	899b      	ldrh	r3, [r3, #12]
    954a:	065b      	lsls	r3, r3, #25
    954c:	d501      	bpl.n	9552 <_svfprintf_r+0x11a>
    954e:	f001 f8ce 	bl	a6ee <_svfprintf_r+0x12b6>
    9552:	980a      	ldr	r0, [sp, #40]	; 0x28
    9554:	b043      	add	sp, #268	; 0x10c
    9556:	bc3c      	pop	{r2, r3, r4, r5}
    9558:	4690      	mov	r8, r2
    955a:	4699      	mov	r9, r3
    955c:	46a2      	mov	sl, r4
    955e:	46ab      	mov	fp, r5
    9560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9562:	2201      	movs	r2, #1
    9564:	780b      	ldrb	r3, [r1, #0]
    9566:	4690      	mov	r8, r2
    9568:	202b      	movs	r0, #43	; 0x2b
    956a:	e7c9      	b.n	9500 <_svfprintf_r+0xc8>
    956c:	1c4b      	adds	r3, r1, #1
    956e:	469b      	mov	fp, r3
    9570:	780b      	ldrb	r3, [r1, #0]
    9572:	2b2a      	cmp	r3, #42	; 0x2a
    9574:	d101      	bne.n	957a <_svfprintf_r+0x142>
    9576:	f001 fa1b 	bl	a9b0 <_svfprintf_r+0x1578>
    957a:	001a      	movs	r2, r3
    957c:	2100      	movs	r1, #0
    957e:	3a30      	subs	r2, #48	; 0x30
    9580:	468a      	mov	sl, r1
    9582:	4659      	mov	r1, fp
    9584:	2a09      	cmp	r2, #9
    9586:	d8bc      	bhi.n	9502 <_svfprintf_r+0xca>
    9588:	0003      	movs	r3, r0
    958a:	0011      	movs	r1, r2
    958c:	4650      	mov	r0, sl
    958e:	465a      	mov	r2, fp
    9590:	469a      	mov	sl, r3
    9592:	46a3      	mov	fp, r4
    9594:	0083      	lsls	r3, r0, #2
    9596:	181b      	adds	r3, r3, r0
    9598:	7814      	ldrb	r4, [r2, #0]
    959a:	005b      	lsls	r3, r3, #1
    959c:	1858      	adds	r0, r3, r1
    959e:	0021      	movs	r1, r4
    95a0:	1c53      	adds	r3, r2, #1
    95a2:	3930      	subs	r1, #48	; 0x30
    95a4:	001a      	movs	r2, r3
    95a6:	2909      	cmp	r1, #9
    95a8:	d9f4      	bls.n	9594 <_svfprintf_r+0x15c>
    95aa:	4652      	mov	r2, sl
    95ac:	0019      	movs	r1, r3
    95ae:	4682      	mov	sl, r0
    95b0:	0023      	movs	r3, r4
    95b2:	0010      	movs	r0, r2
    95b4:	465c      	mov	r4, fp
    95b6:	e7a4      	b.n	9502 <_svfprintf_r+0xca>
    95b8:	2380      	movs	r3, #128	; 0x80
    95ba:	431c      	orrs	r4, r3
    95bc:	780b      	ldrb	r3, [r1, #0]
    95be:	e79f      	b.n	9500 <_svfprintf_r+0xc8>
    95c0:	468b      	mov	fp, r1
    95c2:	4641      	mov	r1, r8
    95c4:	9312      	str	r3, [sp, #72]	; 0x48
    95c6:	2900      	cmp	r1, #0
    95c8:	d001      	beq.n	95ce <_svfprintf_r+0x196>
    95ca:	f001 fa1f 	bl	aa0c <_svfprintf_r+0x15d4>
    95ce:	2310      	movs	r3, #16
    95d0:	431c      	orrs	r4, r3
    95d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    95d4:	06a3      	lsls	r3, r4, #26
    95d6:	d501      	bpl.n	95dc <_svfprintf_r+0x1a4>
    95d8:	f000 fe88 	bl	a2ec <_svfprintf_r+0xeb4>
    95dc:	06e3      	lsls	r3, r4, #27
    95de:	d501      	bpl.n	95e4 <_svfprintf_r+0x1ac>
    95e0:	f000 fd80 	bl	a0e4 <_svfprintf_r+0xcac>
    95e4:	0663      	lsls	r3, r4, #25
    95e6:	d401      	bmi.n	95ec <_svfprintf_r+0x1b4>
    95e8:	f000 fd7c 	bl	a0e4 <_svfprintf_r+0xcac>
    95ec:	2100      	movs	r1, #0
    95ee:	5e53      	ldrsh	r3, [r2, r1]
    95f0:	930c      	str	r3, [sp, #48]	; 0x30
    95f2:	3204      	adds	r2, #4
    95f4:	17db      	asrs	r3, r3, #31
    95f6:	930d      	str	r3, [sp, #52]	; 0x34
    95f8:	920f      	str	r2, [sp, #60]	; 0x3c
    95fa:	d501      	bpl.n	9600 <_svfprintf_r+0x1c8>
    95fc:	f000 fe86 	bl	a30c <_svfprintf_r+0xed4>
    9600:	990c      	ldr	r1, [sp, #48]	; 0x30
    9602:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9604:	0008      	movs	r0, r1
    9606:	ab16      	add	r3, sp, #88	; 0x58
    9608:	7fdb      	ldrb	r3, [r3, #31]
    960a:	4310      	orrs	r0, r2
    960c:	4698      	mov	r8, r3
    960e:	0002      	movs	r2, r0
    9610:	2301      	movs	r3, #1
    9612:	4651      	mov	r1, sl
    9614:	3101      	adds	r1, #1
    9616:	d100      	bne.n	961a <_svfprintf_r+0x1e2>
    9618:	e0ff      	b.n	981a <_svfprintf_r+0x3e2>
    961a:	2180      	movs	r1, #128	; 0x80
    961c:	0020      	movs	r0, r4
    961e:	4388      	bics	r0, r1
    9620:	9008      	str	r0, [sp, #32]
    9622:	2a00      	cmp	r2, #0
    9624:	d000      	beq.n	9628 <_svfprintf_r+0x1f0>
    9626:	e0fc      	b.n	9822 <_svfprintf_r+0x3ea>
    9628:	4652      	mov	r2, sl
    962a:	2a00      	cmp	r2, #0
    962c:	d001      	beq.n	9632 <_svfprintf_r+0x1fa>
    962e:	f000 fc2c 	bl	9e8a <_svfprintf_r+0xa52>
    9632:	2b00      	cmp	r3, #0
    9634:	d001      	beq.n	963a <_svfprintf_r+0x202>
    9636:	f000 fd04 	bl	a042 <_svfprintf_r+0xc0a>
    963a:	2001      	movs	r0, #1
    963c:	ab32      	add	r3, sp, #200	; 0xc8
    963e:	4020      	ands	r0, r4
    9640:	900e      	str	r0, [sp, #56]	; 0x38
    9642:	9311      	str	r3, [sp, #68]	; 0x44
    9644:	d008      	beq.n	9658 <_svfprintf_r+0x220>
    9646:	2327      	movs	r3, #39	; 0x27
    9648:	2130      	movs	r1, #48	; 0x30
    964a:	aa28      	add	r2, sp, #160	; 0xa0
    964c:	54d1      	strb	r1, [r2, r3]
    964e:	aa16      	add	r2, sp, #88	; 0x58
    9650:	4694      	mov	ip, r2
    9652:	3348      	adds	r3, #72	; 0x48
    9654:	4463      	add	r3, ip
    9656:	9311      	str	r3, [sp, #68]	; 0x44
    9658:	4653      	mov	r3, sl
    965a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    965c:	9307      	str	r3, [sp, #28]
    965e:	4592      	cmp	sl, r2
    9660:	da00      	bge.n	9664 <_svfprintf_r+0x22c>
    9662:	9207      	str	r2, [sp, #28]
    9664:	2300      	movs	r3, #0
    9666:	9313      	str	r3, [sp, #76]	; 0x4c
    9668:	4643      	mov	r3, r8
    966a:	2b00      	cmp	r3, #0
    966c:	d002      	beq.n	9674 <_svfprintf_r+0x23c>
    966e:	9b07      	ldr	r3, [sp, #28]
    9670:	3301      	adds	r3, #1
    9672:	9307      	str	r3, [sp, #28]
    9674:	2302      	movs	r3, #2
    9676:	9a08      	ldr	r2, [sp, #32]
    9678:	401a      	ands	r2, r3
    967a:	4691      	mov	r9, r2
    967c:	d002      	beq.n	9684 <_svfprintf_r+0x24c>
    967e:	9b07      	ldr	r3, [sp, #28]
    9680:	3302      	adds	r3, #2
    9682:	9307      	str	r3, [sp, #28]
    9684:	2384      	movs	r3, #132	; 0x84
    9686:	9a08      	ldr	r2, [sp, #32]
    9688:	401a      	ands	r2, r3
    968a:	9210      	str	r2, [sp, #64]	; 0x40
    968c:	d000      	beq.n	9690 <_svfprintf_r+0x258>
    968e:	e24d      	b.n	9b2c <_svfprintf_r+0x6f4>
    9690:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9692:	9a07      	ldr	r2, [sp, #28]
    9694:	1a9c      	subs	r4, r3, r2
    9696:	2c00      	cmp	r4, #0
    9698:	dc00      	bgt.n	969c <_svfprintf_r+0x264>
    969a:	e247      	b.n	9b2c <_svfprintf_r+0x6f4>
    969c:	4974      	ldr	r1, [pc, #464]	; (9870 <_svfprintf_r+0x438>)
    969e:	68ba      	ldr	r2, [r7, #8]
    96a0:	687b      	ldr	r3, [r7, #4]
    96a2:	4688      	mov	r8, r1
    96a4:	2c10      	cmp	r4, #16
    96a6:	dd1f      	ble.n	96e8 <_svfprintf_r+0x2b0>
    96a8:	0031      	movs	r1, r6
    96aa:	2510      	movs	r5, #16
    96ac:	4646      	mov	r6, r8
    96ae:	e003      	b.n	96b8 <_svfprintf_r+0x280>
    96b0:	3c10      	subs	r4, #16
    96b2:	3108      	adds	r1, #8
    96b4:	2c10      	cmp	r4, #16
    96b6:	dd15      	ble.n	96e4 <_svfprintf_r+0x2ac>
    96b8:	3210      	adds	r2, #16
    96ba:	3301      	adds	r3, #1
    96bc:	600e      	str	r6, [r1, #0]
    96be:	604d      	str	r5, [r1, #4]
    96c0:	60ba      	str	r2, [r7, #8]
    96c2:	607b      	str	r3, [r7, #4]
    96c4:	2b07      	cmp	r3, #7
    96c6:	ddf3      	ble.n	96b0 <_svfprintf_r+0x278>
    96c8:	003a      	movs	r2, r7
    96ca:	9906      	ldr	r1, [sp, #24]
    96cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    96ce:	f007 ff3b 	bl	11548 <__ssprint_r>
    96d2:	2800      	cmp	r0, #0
    96d4:	d000      	beq.n	96d8 <_svfprintf_r+0x2a0>
    96d6:	e736      	b.n	9546 <_svfprintf_r+0x10e>
    96d8:	3c10      	subs	r4, #16
    96da:	68ba      	ldr	r2, [r7, #8]
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	a932      	add	r1, sp, #200	; 0xc8
    96e0:	2c10      	cmp	r4, #16
    96e2:	dce9      	bgt.n	96b8 <_svfprintf_r+0x280>
    96e4:	46b0      	mov	r8, r6
    96e6:	000e      	movs	r6, r1
    96e8:	4641      	mov	r1, r8
    96ea:	6074      	str	r4, [r6, #4]
    96ec:	3301      	adds	r3, #1
    96ee:	18a4      	adds	r4, r4, r2
    96f0:	6031      	str	r1, [r6, #0]
    96f2:	60bc      	str	r4, [r7, #8]
    96f4:	607b      	str	r3, [r7, #4]
    96f6:	2b07      	cmp	r3, #7
    96f8:	dd01      	ble.n	96fe <_svfprintf_r+0x2c6>
    96fa:	f000 fca8 	bl	a04e <_svfprintf_r+0xc16>
    96fe:	ab16      	add	r3, sp, #88	; 0x58
    9700:	7fdb      	ldrb	r3, [r3, #31]
    9702:	3608      	adds	r6, #8
    9704:	4698      	mov	r8, r3
    9706:	e212      	b.n	9b2e <_svfprintf_r+0x6f6>
    9708:	468b      	mov	fp, r1
    970a:	4641      	mov	r1, r8
    970c:	9312      	str	r3, [sp, #72]	; 0x48
    970e:	2900      	cmp	r1, #0
    9710:	d001      	beq.n	9716 <_svfprintf_r+0x2de>
    9712:	f001 f977 	bl	aa04 <_svfprintf_r+0x15cc>
    9716:	2207      	movs	r2, #7
    9718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    971a:	3307      	adds	r3, #7
    971c:	4393      	bics	r3, r2
    971e:	3201      	adds	r2, #1
    9720:	4694      	mov	ip, r2
    9722:	449c      	add	ip, r3
    9724:	4662      	mov	r2, ip
    9726:	920f      	str	r2, [sp, #60]	; 0x3c
    9728:	681a      	ldr	r2, [r3, #0]
    972a:	9216      	str	r2, [sp, #88]	; 0x58
    972c:	685b      	ldr	r3, [r3, #4]
    972e:	2201      	movs	r2, #1
    9730:	9315      	str	r3, [sp, #84]	; 0x54
    9732:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9734:	9d16      	ldr	r5, [sp, #88]	; 0x58
    9736:	005b      	lsls	r3, r3, #1
    9738:	085b      	lsrs	r3, r3, #1
    973a:	4698      	mov	r8, r3
    973c:	4252      	negs	r2, r2
    973e:	4b4d      	ldr	r3, [pc, #308]	; (9874 <_svfprintf_r+0x43c>)
    9740:	0028      	movs	r0, r5
    9742:	4641      	mov	r1, r8
    9744:	f008 feca 	bl	124dc <__aeabi_dcmpun>
    9748:	2800      	cmp	r0, #0
    974a:	d001      	beq.n	9750 <_svfprintf_r+0x318>
    974c:	f000 fdfd 	bl	a34a <_svfprintf_r+0xf12>
    9750:	2201      	movs	r2, #1
    9752:	4b48      	ldr	r3, [pc, #288]	; (9874 <_svfprintf_r+0x43c>)
    9754:	4252      	negs	r2, r2
    9756:	0028      	movs	r0, r5
    9758:	4641      	mov	r1, r8
    975a:	f7fe fec9 	bl	84f0 <__aeabi_dcmple>
    975e:	2800      	cmp	r0, #0
    9760:	d001      	beq.n	9766 <_svfprintf_r+0x32e>
    9762:	f000 fdf2 	bl	a34a <_svfprintf_r+0xf12>
    9766:	2200      	movs	r2, #0
    9768:	2300      	movs	r3, #0
    976a:	9816      	ldr	r0, [sp, #88]	; 0x58
    976c:	9915      	ldr	r1, [sp, #84]	; 0x54
    976e:	f7fe feb5 	bl	84dc <__aeabi_dcmplt>
    9772:	2800      	cmp	r0, #0
    9774:	d001      	beq.n	977a <_svfprintf_r+0x342>
    9776:	f001 f822 	bl	a7be <_svfprintf_r+0x1386>
    977a:	ab16      	add	r3, sp, #88	; 0x58
    977c:	7fdb      	ldrb	r3, [r3, #31]
    977e:	4698      	mov	r8, r3
    9780:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9782:	2b47      	cmp	r3, #71	; 0x47
    9784:	dd01      	ble.n	978a <_svfprintf_r+0x352>
    9786:	f000 fec7 	bl	a518 <_svfprintf_r+0x10e0>
    978a:	4b3b      	ldr	r3, [pc, #236]	; (9878 <_svfprintf_r+0x440>)
    978c:	9311      	str	r3, [sp, #68]	; 0x44
    978e:	2380      	movs	r3, #128	; 0x80
    9790:	439c      	bics	r4, r3
    9792:	3b7d      	subs	r3, #125	; 0x7d
    9794:	9307      	str	r3, [sp, #28]
    9796:	930e      	str	r3, [sp, #56]	; 0x38
    9798:	2300      	movs	r3, #0
    979a:	9408      	str	r4, [sp, #32]
    979c:	469a      	mov	sl, r3
    979e:	9313      	str	r3, [sp, #76]	; 0x4c
    97a0:	e762      	b.n	9668 <_svfprintf_r+0x230>
    97a2:	2200      	movs	r2, #0
    97a4:	3b30      	subs	r3, #48	; 0x30
    97a6:	0015      	movs	r5, r2
    97a8:	001a      	movs	r2, r3
    97aa:	0003      	movs	r3, r0
    97ac:	9407      	str	r4, [sp, #28]
    97ae:	0008      	movs	r0, r1
    97b0:	002c      	movs	r4, r5
    97b2:	469b      	mov	fp, r3
    97b4:	00a3      	lsls	r3, r4, #2
    97b6:	191c      	adds	r4, r3, r4
    97b8:	7803      	ldrb	r3, [r0, #0]
    97ba:	0064      	lsls	r4, r4, #1
    97bc:	1914      	adds	r4, r2, r4
    97be:	001a      	movs	r2, r3
    97c0:	3101      	adds	r1, #1
    97c2:	3a30      	subs	r2, #48	; 0x30
    97c4:	0008      	movs	r0, r1
    97c6:	2a09      	cmp	r2, #9
    97c8:	d9f4      	bls.n	97b4 <_svfprintf_r+0x37c>
    97ca:	940b      	str	r4, [sp, #44]	; 0x2c
    97cc:	4658      	mov	r0, fp
    97ce:	9c07      	ldr	r4, [sp, #28]
    97d0:	e697      	b.n	9502 <_svfprintf_r+0xca>
    97d2:	2308      	movs	r3, #8
    97d4:	431c      	orrs	r4, r3
    97d6:	780b      	ldrb	r3, [r1, #0]
    97d8:	e692      	b.n	9500 <_svfprintf_r+0xc8>
    97da:	9312      	str	r3, [sp, #72]	; 0x48
    97dc:	2310      	movs	r3, #16
    97de:	431c      	orrs	r4, r3
    97e0:	468b      	mov	fp, r1
    97e2:	06a3      	lsls	r3, r4, #26
    97e4:	d500      	bpl.n	97e8 <_svfprintf_r+0x3b0>
    97e6:	e17b      	b.n	9ae0 <_svfprintf_r+0x6a8>
    97e8:	06e3      	lsls	r3, r4, #27
    97ea:	d501      	bpl.n	97f0 <_svfprintf_r+0x3b8>
    97ec:	f000 fc7e 	bl	a0ec <_svfprintf_r+0xcb4>
    97f0:	0663      	lsls	r3, r4, #25
    97f2:	d401      	bmi.n	97f8 <_svfprintf_r+0x3c0>
    97f4:	f000 fc7a 	bl	a0ec <_svfprintf_r+0xcb4>
    97f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    97fa:	881a      	ldrh	r2, [r3, #0]
    97fc:	920c      	str	r2, [sp, #48]	; 0x30
    97fe:	2200      	movs	r2, #0
    9800:	3304      	adds	r3, #4
    9802:	930f      	str	r3, [sp, #60]	; 0x3c
    9804:	2300      	movs	r3, #0
    9806:	920d      	str	r2, [sp, #52]	; 0x34
    9808:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    980a:	2100      	movs	r1, #0
    980c:	a816      	add	r0, sp, #88	; 0x58
    980e:	77c1      	strb	r1, [r0, #31]
    9810:	4688      	mov	r8, r1
    9812:	4651      	mov	r1, sl
    9814:	3101      	adds	r1, #1
    9816:	d000      	beq.n	981a <_svfprintf_r+0x3e2>
    9818:	e6ff      	b.n	961a <_svfprintf_r+0x1e2>
    981a:	2a00      	cmp	r2, #0
    981c:	d100      	bne.n	9820 <_svfprintf_r+0x3e8>
    981e:	e335      	b.n	9e8c <_svfprintf_r+0xa54>
    9820:	9408      	str	r4, [sp, #32]
    9822:	2b01      	cmp	r3, #1
    9824:	d100      	bne.n	9828 <_svfprintf_r+0x3f0>
    9826:	e3e5      	b.n	9ff4 <_svfprintf_r+0xbbc>
    9828:	2b02      	cmp	r3, #2
    982a:	d000      	beq.n	982e <_svfprintf_r+0x3f6>
    982c:	e362      	b.n	9ef4 <_svfprintf_r+0xabc>
    982e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    9830:	200f      	movs	r0, #15
    9832:	46a1      	mov	r9, r4
    9834:	46b4      	mov	ip, r6
    9836:	ab32      	add	r3, sp, #200	; 0xc8
    9838:	0019      	movs	r1, r3
    983a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    983c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    983e:	0004      	movs	r4, r0
    9840:	464d      	mov	r5, r9
    9842:	4014      	ands	r4, r2
    9844:	5d2c      	ldrb	r4, [r5, r4]
    9846:	071e      	lsls	r6, r3, #28
    9848:	0915      	lsrs	r5, r2, #4
    984a:	3901      	subs	r1, #1
    984c:	432e      	orrs	r6, r5
    984e:	700c      	strb	r4, [r1, #0]
    9850:	091c      	lsrs	r4, r3, #4
    9852:	0023      	movs	r3, r4
    9854:	0034      	movs	r4, r6
    9856:	0032      	movs	r2, r6
    9858:	431c      	orrs	r4, r3
    985a:	d1f0      	bne.n	983e <_svfprintf_r+0x406>
    985c:	920c      	str	r2, [sp, #48]	; 0x30
    985e:	930d      	str	r3, [sp, #52]	; 0x34
    9860:	ab32      	add	r3, sp, #200	; 0xc8
    9862:	1a5b      	subs	r3, r3, r1
    9864:	9111      	str	r1, [sp, #68]	; 0x44
    9866:	4666      	mov	r6, ip
    9868:	930e      	str	r3, [sp, #56]	; 0x38
    986a:	e6f5      	b.n	9658 <_svfprintf_r+0x220>
    986c:	000150f8 	.word	0x000150f8
    9870:	000152a0 	.word	0x000152a0
    9874:	7fefffff 	.word	0x7fefffff
    9878:	0001525c 	.word	0x0001525c
    987c:	9312      	str	r3, [sp, #72]	; 0x48
    987e:	2310      	movs	r3, #16
    9880:	431c      	orrs	r4, r3
    9882:	468b      	mov	fp, r1
    9884:	06a3      	lsls	r3, r4, #26
    9886:	d500      	bpl.n	988a <_svfprintf_r+0x452>
    9888:	e111      	b.n	9aae <_svfprintf_r+0x676>
    988a:	06e3      	lsls	r3, r4, #27
    988c:	d501      	bpl.n	9892 <_svfprintf_r+0x45a>
    988e:	f000 fc31 	bl	a0f4 <_svfprintf_r+0xcbc>
    9892:	0663      	lsls	r3, r4, #25
    9894:	d401      	bmi.n	989a <_svfprintf_r+0x462>
    9896:	f000 fc2d 	bl	a0f4 <_svfprintf_r+0xcbc>
    989a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    989c:	881a      	ldrh	r2, [r3, #0]
    989e:	920c      	str	r2, [sp, #48]	; 0x30
    98a0:	2200      	movs	r2, #0
    98a2:	3304      	adds	r3, #4
    98a4:	920d      	str	r2, [sp, #52]	; 0x34
    98a6:	930f      	str	r3, [sp, #60]	; 0x3c
    98a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    98aa:	2301      	movs	r3, #1
    98ac:	e7ad      	b.n	980a <_svfprintf_r+0x3d2>
    98ae:	468b      	mov	fp, r1
    98b0:	4641      	mov	r1, r8
    98b2:	9312      	str	r3, [sp, #72]	; 0x48
    98b4:	2900      	cmp	r1, #0
    98b6:	d001      	beq.n	98bc <_svfprintf_r+0x484>
    98b8:	f001 f890 	bl	a9dc <_svfprintf_r+0x15a4>
    98bc:	4bb8      	ldr	r3, [pc, #736]	; (9ba0 <_svfprintf_r+0x768>)
    98be:	9317      	str	r3, [sp, #92]	; 0x5c
    98c0:	06a3      	lsls	r3, r4, #26
    98c2:	d500      	bpl.n	98c6 <_svfprintf_r+0x48e>
    98c4:	e0ab      	b.n	9a1e <_svfprintf_r+0x5e6>
    98c6:	06e3      	lsls	r3, r4, #27
    98c8:	d501      	bpl.n	98ce <_svfprintf_r+0x496>
    98ca:	f000 fc07 	bl	a0dc <_svfprintf_r+0xca4>
    98ce:	0663      	lsls	r3, r4, #25
    98d0:	d401      	bmi.n	98d6 <_svfprintf_r+0x49e>
    98d2:	f000 fc03 	bl	a0dc <_svfprintf_r+0xca4>
    98d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    98d8:	881a      	ldrh	r2, [r3, #0]
    98da:	920c      	str	r2, [sp, #48]	; 0x30
    98dc:	2200      	movs	r2, #0
    98de:	3304      	adds	r3, #4
    98e0:	920d      	str	r2, [sp, #52]	; 0x34
    98e2:	930f      	str	r3, [sp, #60]	; 0x3c
    98e4:	07e3      	lsls	r3, r4, #31
    98e6:	d400      	bmi.n	98ea <_svfprintf_r+0x4b2>
    98e8:	e0a9      	b.n	9a3e <_svfprintf_r+0x606>
    98ea:	990c      	ldr	r1, [sp, #48]	; 0x30
    98ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    98ee:	000b      	movs	r3, r1
    98f0:	4313      	orrs	r3, r2
    98f2:	001a      	movs	r2, r3
    98f4:	2302      	movs	r3, #2
    98f6:	2a00      	cmp	r2, #0
    98f8:	d100      	bne.n	98fc <_svfprintf_r+0x4c4>
    98fa:	e786      	b.n	980a <_svfprintf_r+0x3d2>
    98fc:	2030      	movs	r0, #48	; 0x30
    98fe:	a91e      	add	r1, sp, #120	; 0x78
    9900:	7008      	strb	r0, [r1, #0]
    9902:	2548      	movs	r5, #72	; 0x48
    9904:	4668      	mov	r0, sp
    9906:	1940      	adds	r0, r0, r5
    9908:	7800      	ldrb	r0, [r0, #0]
    990a:	431c      	orrs	r4, r3
    990c:	7048      	strb	r0, [r1, #1]
    990e:	e77c      	b.n	980a <_svfprintf_r+0x3d2>
    9910:	468b      	mov	fp, r1
    9912:	4641      	mov	r1, r8
    9914:	2900      	cmp	r1, #0
    9916:	d001      	beq.n	991c <_svfprintf_r+0x4e4>
    9918:	f001 f883 	bl	aa22 <_svfprintf_r+0x15ea>
    991c:	06a3      	lsls	r3, r4, #26
    991e:	d501      	bpl.n	9924 <_svfprintf_r+0x4ec>
    9920:	f000 fde9 	bl	a4f6 <_svfprintf_r+0x10be>
    9924:	06e3      	lsls	r3, r4, #27
    9926:	d501      	bpl.n	992c <_svfprintf_r+0x4f4>
    9928:	f000 fd9b 	bl	a462 <_svfprintf_r+0x102a>
    992c:	0663      	lsls	r3, r4, #25
    992e:	d401      	bmi.n	9934 <_svfprintf_r+0x4fc>
    9930:	f000 fd97 	bl	a462 <_svfprintf_r+0x102a>
    9934:	4669      	mov	r1, sp
    9936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9938:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    993a:	681a      	ldr	r2, [r3, #0]
    993c:	3304      	adds	r3, #4
    993e:	9207      	str	r2, [sp, #28]
    9940:	8011      	strh	r1, [r2, #0]
    9942:	930f      	str	r3, [sp, #60]	; 0x3c
    9944:	e5a3      	b.n	948e <_svfprintf_r+0x56>
    9946:	464b      	mov	r3, r9
    9948:	431c      	orrs	r4, r3
    994a:	780b      	ldrb	r3, [r1, #0]
    994c:	e5d8      	b.n	9500 <_svfprintf_r+0xc8>
    994e:	9312      	str	r3, [sp, #72]	; 0x48
    9950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9952:	468b      	mov	fp, r1
    9954:	1d1d      	adds	r5, r3, #4
    9956:	681b      	ldr	r3, [r3, #0]
    9958:	a916      	add	r1, sp, #88	; 0x58
    995a:	001a      	movs	r2, r3
    995c:	9311      	str	r3, [sp, #68]	; 0x44
    995e:	2300      	movs	r3, #0
    9960:	77cb      	strb	r3, [r1, #31]
    9962:	2a00      	cmp	r2, #0
    9964:	d101      	bne.n	996a <_svfprintf_r+0x532>
    9966:	f000 fefb 	bl	a760 <_svfprintf_r+0x1328>
    996a:	4653      	mov	r3, sl
    996c:	3301      	adds	r3, #1
    996e:	d101      	bne.n	9974 <_svfprintf_r+0x53c>
    9970:	f000 fe38 	bl	a5e4 <_svfprintf_r+0x11ac>
    9974:	4652      	mov	r2, sl
    9976:	2100      	movs	r1, #0
    9978:	9811      	ldr	r0, [sp, #68]	; 0x44
    997a:	f005 fc69 	bl	f250 <memchr>
    997e:	2800      	cmp	r0, #0
    9980:	d101      	bne.n	9986 <_svfprintf_r+0x54e>
    9982:	f000 ff54 	bl	a82e <_svfprintf_r+0x13f6>
    9986:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9988:	1ac3      	subs	r3, r0, r3
    998a:	001a      	movs	r2, r3
    998c:	930e      	str	r3, [sp, #56]	; 0x38
    998e:	43db      	mvns	r3, r3
    9990:	17db      	asrs	r3, r3, #31
    9992:	401a      	ands	r2, r3
    9994:	ab16      	add	r3, sp, #88	; 0x58
    9996:	7fdb      	ldrb	r3, [r3, #31]
    9998:	9207      	str	r2, [sp, #28]
    999a:	4698      	mov	r8, r3
    999c:	2300      	movs	r3, #0
    999e:	950f      	str	r5, [sp, #60]	; 0x3c
    99a0:	9408      	str	r4, [sp, #32]
    99a2:	469a      	mov	sl, r3
    99a4:	9313      	str	r3, [sp, #76]	; 0x4c
    99a6:	e65f      	b.n	9668 <_svfprintf_r+0x230>
    99a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    99aa:	9312      	str	r3, [sp, #72]	; 0x48
    99ac:	6813      	ldr	r3, [r2, #0]
    99ae:	ad28      	add	r5, sp, #160	; 0xa0
    99b0:	9307      	str	r3, [sp, #28]
    99b2:	466b      	mov	r3, sp
    99b4:	7f1b      	ldrb	r3, [r3, #28]
    99b6:	468b      	mov	fp, r1
    99b8:	702b      	strb	r3, [r5, #0]
    99ba:	2300      	movs	r3, #0
    99bc:	a916      	add	r1, sp, #88	; 0x58
    99be:	77cb      	strb	r3, [r1, #31]
    99c0:	0013      	movs	r3, r2
    99c2:	3304      	adds	r3, #4
    99c4:	930f      	str	r3, [sp, #60]	; 0x3c
    99c6:	2300      	movs	r3, #0
    99c8:	9408      	str	r4, [sp, #32]
    99ca:	4698      	mov	r8, r3
    99cc:	3301      	adds	r3, #1
    99ce:	9307      	str	r3, [sp, #28]
    99d0:	930e      	str	r3, [sp, #56]	; 0x38
    99d2:	2300      	movs	r3, #0
    99d4:	9511      	str	r5, [sp, #68]	; 0x44
    99d6:	469a      	mov	sl, r3
    99d8:	9313      	str	r3, [sp, #76]	; 0x4c
    99da:	e64b      	b.n	9674 <_svfprintf_r+0x23c>
    99dc:	468b      	mov	fp, r1
    99de:	4641      	mov	r1, r8
    99e0:	9312      	str	r3, [sp, #72]	; 0x48
    99e2:	2900      	cmp	r1, #0
    99e4:	d100      	bne.n	99e8 <_svfprintf_r+0x5b0>
    99e6:	e5f4      	b.n	95d2 <_svfprintf_r+0x19a>
    99e8:	ab16      	add	r3, sp, #88	; 0x58
    99ea:	77d8      	strb	r0, [r3, #31]
    99ec:	e5f1      	b.n	95d2 <_svfprintf_r+0x19a>
    99ee:	4663      	mov	r3, ip
    99f0:	431c      	orrs	r4, r3
    99f2:	780b      	ldrb	r3, [r1, #0]
    99f4:	e584      	b.n	9500 <_svfprintf_r+0xc8>
    99f6:	780b      	ldrb	r3, [r1, #0]
    99f8:	2b6c      	cmp	r3, #108	; 0x6c
    99fa:	d101      	bne.n	9a00 <_svfprintf_r+0x5c8>
    99fc:	f000 fd86 	bl	a50c <_svfprintf_r+0x10d4>
    9a00:	2210      	movs	r2, #16
    9a02:	4314      	orrs	r4, r2
    9a04:	e57c      	b.n	9500 <_svfprintf_r+0xc8>
    9a06:	468b      	mov	fp, r1
    9a08:	4641      	mov	r1, r8
    9a0a:	9312      	str	r3, [sp, #72]	; 0x48
    9a0c:	2900      	cmp	r1, #0
    9a0e:	d001      	beq.n	9a14 <_svfprintf_r+0x5dc>
    9a10:	f000 ffe8 	bl	a9e4 <_svfprintf_r+0x15ac>
    9a14:	4b63      	ldr	r3, [pc, #396]	; (9ba4 <_svfprintf_r+0x76c>)
    9a16:	9317      	str	r3, [sp, #92]	; 0x5c
    9a18:	06a3      	lsls	r3, r4, #26
    9a1a:	d400      	bmi.n	9a1e <_svfprintf_r+0x5e6>
    9a1c:	e753      	b.n	98c6 <_svfprintf_r+0x48e>
    9a1e:	2207      	movs	r2, #7
    9a20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9a22:	3307      	adds	r3, #7
    9a24:	4393      	bics	r3, r2
    9a26:	3201      	adds	r2, #1
    9a28:	4694      	mov	ip, r2
    9a2a:	449c      	add	ip, r3
    9a2c:	4662      	mov	r2, ip
    9a2e:	920f      	str	r2, [sp, #60]	; 0x3c
    9a30:	681a      	ldr	r2, [r3, #0]
    9a32:	685b      	ldr	r3, [r3, #4]
    9a34:	920c      	str	r2, [sp, #48]	; 0x30
    9a36:	930d      	str	r3, [sp, #52]	; 0x34
    9a38:	07e3      	lsls	r3, r4, #31
    9a3a:	d500      	bpl.n	9a3e <_svfprintf_r+0x606>
    9a3c:	e755      	b.n	98ea <_svfprintf_r+0x4b2>
    9a3e:	990c      	ldr	r1, [sp, #48]	; 0x30
    9a40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9a42:	0008      	movs	r0, r1
    9a44:	4310      	orrs	r0, r2
    9a46:	2302      	movs	r3, #2
    9a48:	0002      	movs	r2, r0
    9a4a:	e6de      	b.n	980a <_svfprintf_r+0x3d2>
    9a4c:	468b      	mov	fp, r1
    9a4e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    9a50:	2230      	movs	r2, #48	; 0x30
    9a52:	680b      	ldr	r3, [r1, #0]
    9a54:	930c      	str	r3, [sp, #48]	; 0x30
    9a56:	2300      	movs	r3, #0
    9a58:	930d      	str	r3, [sp, #52]	; 0x34
    9a5a:	3302      	adds	r3, #2
    9a5c:	431c      	orrs	r4, r3
    9a5e:	ab1e      	add	r3, sp, #120	; 0x78
    9a60:	701a      	strb	r2, [r3, #0]
    9a62:	3248      	adds	r2, #72	; 0x48
    9a64:	705a      	strb	r2, [r3, #1]
    9a66:	000b      	movs	r3, r1
    9a68:	3304      	adds	r3, #4
    9a6a:	930f      	str	r3, [sp, #60]	; 0x3c
    9a6c:	4b4d      	ldr	r3, [pc, #308]	; (9ba4 <_svfprintf_r+0x76c>)
    9a6e:	9212      	str	r2, [sp, #72]	; 0x48
    9a70:	9317      	str	r3, [sp, #92]	; 0x5c
    9a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9a74:	2302      	movs	r3, #2
    9a76:	e6c8      	b.n	980a <_svfprintf_r+0x3d2>
    9a78:	2301      	movs	r3, #1
    9a7a:	431c      	orrs	r4, r3
    9a7c:	780b      	ldrb	r3, [r1, #0]
    9a7e:	e53f      	b.n	9500 <_svfprintf_r+0xc8>
    9a80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9a82:	1d1a      	adds	r2, r3, #4
    9a84:	681b      	ldr	r3, [r3, #0]
    9a86:	930b      	str	r3, [sp, #44]	; 0x2c
    9a88:	2b00      	cmp	r3, #0
    9a8a:	da00      	bge.n	9a8e <_svfprintf_r+0x656>
    9a8c:	e542      	b.n	9514 <_svfprintf_r+0xdc>
    9a8e:	780b      	ldrb	r3, [r1, #0]
    9a90:	920f      	str	r2, [sp, #60]	; 0x3c
    9a92:	e535      	b.n	9500 <_svfprintf_r+0xc8>
    9a94:	780b      	ldrb	r3, [r1, #0]
    9a96:	2800      	cmp	r0, #0
    9a98:	d000      	beq.n	9a9c <_svfprintf_r+0x664>
    9a9a:	e531      	b.n	9500 <_svfprintf_r+0xc8>
    9a9c:	2201      	movs	r2, #1
    9a9e:	3020      	adds	r0, #32
    9aa0:	4690      	mov	r8, r2
    9aa2:	e52d      	b.n	9500 <_svfprintf_r+0xc8>
    9aa4:	468b      	mov	fp, r1
    9aa6:	9312      	str	r3, [sp, #72]	; 0x48
    9aa8:	06a3      	lsls	r3, r4, #26
    9aaa:	d400      	bmi.n	9aae <_svfprintf_r+0x676>
    9aac:	e6ed      	b.n	988a <_svfprintf_r+0x452>
    9aae:	2207      	movs	r2, #7
    9ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ab2:	3307      	adds	r3, #7
    9ab4:	4393      	bics	r3, r2
    9ab6:	3201      	adds	r2, #1
    9ab8:	4694      	mov	ip, r2
    9aba:	449c      	add	ip, r3
    9abc:	4662      	mov	r2, ip
    9abe:	920f      	str	r2, [sp, #60]	; 0x3c
    9ac0:	681a      	ldr	r2, [r3, #0]
    9ac2:	685b      	ldr	r3, [r3, #4]
    9ac4:	0011      	movs	r1, r2
    9ac6:	001a      	movs	r2, r3
    9ac8:	0008      	movs	r0, r1
    9aca:	4310      	orrs	r0, r2
    9acc:	910c      	str	r1, [sp, #48]	; 0x30
    9ace:	920d      	str	r2, [sp, #52]	; 0x34
    9ad0:	2301      	movs	r3, #1
    9ad2:	0002      	movs	r2, r0
    9ad4:	e699      	b.n	980a <_svfprintf_r+0x3d2>
    9ad6:	468b      	mov	fp, r1
    9ad8:	9312      	str	r3, [sp, #72]	; 0x48
    9ada:	06a3      	lsls	r3, r4, #26
    9adc:	d400      	bmi.n	9ae0 <_svfprintf_r+0x6a8>
    9ade:	e683      	b.n	97e8 <_svfprintf_r+0x3b0>
    9ae0:	2207      	movs	r2, #7
    9ae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9ae4:	3307      	adds	r3, #7
    9ae6:	4393      	bics	r3, r2
    9ae8:	3201      	adds	r2, #1
    9aea:	4694      	mov	ip, r2
    9aec:	449c      	add	ip, r3
    9aee:	4662      	mov	r2, ip
    9af0:	920f      	str	r2, [sp, #60]	; 0x3c
    9af2:	681a      	ldr	r2, [r3, #0]
    9af4:	685b      	ldr	r3, [r3, #4]
    9af6:	0011      	movs	r1, r2
    9af8:	001a      	movs	r2, r3
    9afa:	0008      	movs	r0, r1
    9afc:	4310      	orrs	r0, r2
    9afe:	910c      	str	r1, [sp, #48]	; 0x30
    9b00:	920d      	str	r2, [sp, #52]	; 0x34
    9b02:	2300      	movs	r3, #0
    9b04:	0002      	movs	r2, r0
    9b06:	e680      	b.n	980a <_svfprintf_r+0x3d2>
    9b08:	468b      	mov	fp, r1
    9b0a:	4641      	mov	r1, r8
    9b0c:	9312      	str	r3, [sp, #72]	; 0x48
    9b0e:	2900      	cmp	r1, #0
    9b10:	d001      	beq.n	9b16 <_svfprintf_r+0x6de>
    9b12:	f000 ff7f 	bl	aa14 <_svfprintf_r+0x15dc>
    9b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b18:	2b00      	cmp	r3, #0
    9b1a:	d100      	bne.n	9b1e <_svfprintf_r+0x6e6>
    9b1c:	e50b      	b.n	9536 <_svfprintf_r+0xfe>
    9b1e:	ad28      	add	r5, sp, #160	; 0xa0
    9b20:	702b      	strb	r3, [r5, #0]
    9b22:	2300      	movs	r3, #0
    9b24:	aa16      	add	r2, sp, #88	; 0x58
    9b26:	77d3      	strb	r3, [r2, #31]
    9b28:	9408      	str	r4, [sp, #32]
    9b2a:	e74e      	b.n	99ca <_svfprintf_r+0x592>
    9b2c:	68bc      	ldr	r4, [r7, #8]
    9b2e:	4643      	mov	r3, r8
    9b30:	2b00      	cmp	r3, #0
    9b32:	d00f      	beq.n	9b54 <_svfprintf_r+0x71c>
    9b34:	aa16      	add	r2, sp, #88	; 0x58
    9b36:	231f      	movs	r3, #31
    9b38:	4694      	mov	ip, r2
    9b3a:	4463      	add	r3, ip
    9b3c:	6033      	str	r3, [r6, #0]
    9b3e:	2301      	movs	r3, #1
    9b40:	6073      	str	r3, [r6, #4]
    9b42:	687b      	ldr	r3, [r7, #4]
    9b44:	3401      	adds	r4, #1
    9b46:	3301      	adds	r3, #1
    9b48:	60bc      	str	r4, [r7, #8]
    9b4a:	607b      	str	r3, [r7, #4]
    9b4c:	2b07      	cmp	r3, #7
    9b4e:	dd00      	ble.n	9b52 <_svfprintf_r+0x71a>
    9b50:	e1b3      	b.n	9eba <_svfprintf_r+0xa82>
    9b52:	3608      	adds	r6, #8
    9b54:	464b      	mov	r3, r9
    9b56:	2b00      	cmp	r3, #0
    9b58:	d00c      	beq.n	9b74 <_svfprintf_r+0x73c>
    9b5a:	ab1e      	add	r3, sp, #120	; 0x78
    9b5c:	6033      	str	r3, [r6, #0]
    9b5e:	2302      	movs	r3, #2
    9b60:	6073      	str	r3, [r6, #4]
    9b62:	687b      	ldr	r3, [r7, #4]
    9b64:	3402      	adds	r4, #2
    9b66:	3301      	adds	r3, #1
    9b68:	60bc      	str	r4, [r7, #8]
    9b6a:	607b      	str	r3, [r7, #4]
    9b6c:	2b07      	cmp	r3, #7
    9b6e:	dd00      	ble.n	9b72 <_svfprintf_r+0x73a>
    9b70:	e1af      	b.n	9ed2 <_svfprintf_r+0xa9a>
    9b72:	3608      	adds	r6, #8
    9b74:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b76:	2b80      	cmp	r3, #128	; 0x80
    9b78:	d100      	bne.n	9b7c <_svfprintf_r+0x744>
    9b7a:	e120      	b.n	9dbe <_svfprintf_r+0x986>
    9b7c:	4653      	mov	r3, sl
    9b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9b80:	1a9d      	subs	r5, r3, r2
    9b82:	2d00      	cmp	r5, #0
    9b84:	dd3c      	ble.n	9c00 <_svfprintf_r+0x7c8>
    9b86:	4a08      	ldr	r2, [pc, #32]	; (9ba8 <_svfprintf_r+0x770>)
    9b88:	687b      	ldr	r3, [r7, #4]
    9b8a:	4691      	mov	r9, r2
    9b8c:	2d10      	cmp	r5, #16
    9b8e:	dd2c      	ble.n	9bea <_svfprintf_r+0x7b2>
    9b90:	2210      	movs	r2, #16
    9b92:	0021      	movs	r1, r4
    9b94:	4692      	mov	sl, r2
    9b96:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9b98:	0032      	movs	r2, r6
    9b9a:	002e      	movs	r6, r5
    9b9c:	464d      	mov	r5, r9
    9b9e:	e009      	b.n	9bb4 <_svfprintf_r+0x77c>
    9ba0:	0001526c 	.word	0x0001526c
    9ba4:	00015280 	.word	0x00015280
    9ba8:	000152b0 	.word	0x000152b0
    9bac:	3e10      	subs	r6, #16
    9bae:	3208      	adds	r2, #8
    9bb0:	2e10      	cmp	r6, #16
    9bb2:	dd16      	ble.n	9be2 <_svfprintf_r+0x7aa>
    9bb4:	4650      	mov	r0, sl
    9bb6:	3110      	adds	r1, #16
    9bb8:	3301      	adds	r3, #1
    9bba:	6015      	str	r5, [r2, #0]
    9bbc:	6050      	str	r0, [r2, #4]
    9bbe:	60b9      	str	r1, [r7, #8]
    9bc0:	607b      	str	r3, [r7, #4]
    9bc2:	2b07      	cmp	r3, #7
    9bc4:	ddf2      	ble.n	9bac <_svfprintf_r+0x774>
    9bc6:	003a      	movs	r2, r7
    9bc8:	9906      	ldr	r1, [sp, #24]
    9bca:	0020      	movs	r0, r4
    9bcc:	f007 fcbc 	bl	11548 <__ssprint_r>
    9bd0:	2800      	cmp	r0, #0
    9bd2:	d000      	beq.n	9bd6 <_svfprintf_r+0x79e>
    9bd4:	e4b7      	b.n	9546 <_svfprintf_r+0x10e>
    9bd6:	3e10      	subs	r6, #16
    9bd8:	68b9      	ldr	r1, [r7, #8]
    9bda:	687b      	ldr	r3, [r7, #4]
    9bdc:	aa32      	add	r2, sp, #200	; 0xc8
    9bde:	2e10      	cmp	r6, #16
    9be0:	dce8      	bgt.n	9bb4 <_svfprintf_r+0x77c>
    9be2:	46a9      	mov	r9, r5
    9be4:	000c      	movs	r4, r1
    9be6:	0035      	movs	r5, r6
    9be8:	0016      	movs	r6, r2
    9bea:	464a      	mov	r2, r9
    9bec:	1964      	adds	r4, r4, r5
    9bee:	3301      	adds	r3, #1
    9bf0:	6032      	str	r2, [r6, #0]
    9bf2:	6075      	str	r5, [r6, #4]
    9bf4:	60bc      	str	r4, [r7, #8]
    9bf6:	607b      	str	r3, [r7, #4]
    9bf8:	2b07      	cmp	r3, #7
    9bfa:	dd00      	ble.n	9bfe <_svfprintf_r+0x7c6>
    9bfc:	e151      	b.n	9ea2 <_svfprintf_r+0xa6a>
    9bfe:	3608      	adds	r6, #8
    9c00:	9b08      	ldr	r3, [sp, #32]
    9c02:	05db      	lsls	r3, r3, #23
    9c04:	d500      	bpl.n	9c08 <_svfprintf_r+0x7d0>
    9c06:	e0b6      	b.n	9d76 <_svfprintf_r+0x93e>
    9c08:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9c0a:	6033      	str	r3, [r6, #0]
    9c0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9c0e:	469c      	mov	ip, r3
    9c10:	6073      	str	r3, [r6, #4]
    9c12:	687b      	ldr	r3, [r7, #4]
    9c14:	4464      	add	r4, ip
    9c16:	3301      	adds	r3, #1
    9c18:	60bc      	str	r4, [r7, #8]
    9c1a:	607b      	str	r3, [r7, #4]
    9c1c:	2b07      	cmp	r3, #7
    9c1e:	dd00      	ble.n	9c22 <_svfprintf_r+0x7ea>
    9c20:	e09d      	b.n	9d5e <_svfprintf_r+0x926>
    9c22:	3608      	adds	r6, #8
    9c24:	9b08      	ldr	r3, [sp, #32]
    9c26:	075b      	lsls	r3, r3, #29
    9c28:	d541      	bpl.n	9cae <_svfprintf_r+0x876>
    9c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9c2c:	9a07      	ldr	r2, [sp, #28]
    9c2e:	1a9d      	subs	r5, r3, r2
    9c30:	2d00      	cmp	r5, #0
    9c32:	dd3c      	ble.n	9cae <_svfprintf_r+0x876>
    9c34:	4ac4      	ldr	r2, [pc, #784]	; (9f48 <_svfprintf_r+0xb10>)
    9c36:	687b      	ldr	r3, [r7, #4]
    9c38:	4690      	mov	r8, r2
    9c3a:	2d10      	cmp	r5, #16
    9c3c:	dd26      	ble.n	9c8c <_svfprintf_r+0x854>
    9c3e:	2210      	movs	r2, #16
    9c40:	0021      	movs	r1, r4
    9c42:	4691      	mov	r9, r2
    9c44:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9c46:	0032      	movs	r2, r6
    9c48:	002e      	movs	r6, r5
    9c4a:	9d06      	ldr	r5, [sp, #24]
    9c4c:	e003      	b.n	9c56 <_svfprintf_r+0x81e>
    9c4e:	3e10      	subs	r6, #16
    9c50:	3208      	adds	r2, #8
    9c52:	2e10      	cmp	r6, #16
    9c54:	dd17      	ble.n	9c86 <_svfprintf_r+0x84e>
    9c56:	48bc      	ldr	r0, [pc, #752]	; (9f48 <_svfprintf_r+0xb10>)
    9c58:	3110      	adds	r1, #16
    9c5a:	6010      	str	r0, [r2, #0]
    9c5c:	4648      	mov	r0, r9
    9c5e:	3301      	adds	r3, #1
    9c60:	6050      	str	r0, [r2, #4]
    9c62:	60b9      	str	r1, [r7, #8]
    9c64:	607b      	str	r3, [r7, #4]
    9c66:	2b07      	cmp	r3, #7
    9c68:	ddf1      	ble.n	9c4e <_svfprintf_r+0x816>
    9c6a:	003a      	movs	r2, r7
    9c6c:	0029      	movs	r1, r5
    9c6e:	0020      	movs	r0, r4
    9c70:	f007 fc6a 	bl	11548 <__ssprint_r>
    9c74:	2800      	cmp	r0, #0
    9c76:	d000      	beq.n	9c7a <_svfprintf_r+0x842>
    9c78:	e465      	b.n	9546 <_svfprintf_r+0x10e>
    9c7a:	3e10      	subs	r6, #16
    9c7c:	68b9      	ldr	r1, [r7, #8]
    9c7e:	687b      	ldr	r3, [r7, #4]
    9c80:	aa32      	add	r2, sp, #200	; 0xc8
    9c82:	2e10      	cmp	r6, #16
    9c84:	dce7      	bgt.n	9c56 <_svfprintf_r+0x81e>
    9c86:	0035      	movs	r5, r6
    9c88:	000c      	movs	r4, r1
    9c8a:	0016      	movs	r6, r2
    9c8c:	4642      	mov	r2, r8
    9c8e:	1964      	adds	r4, r4, r5
    9c90:	3301      	adds	r3, #1
    9c92:	c624      	stmia	r6!, {r2, r5}
    9c94:	60bc      	str	r4, [r7, #8]
    9c96:	607b      	str	r3, [r7, #4]
    9c98:	2b07      	cmp	r3, #7
    9c9a:	dd08      	ble.n	9cae <_svfprintf_r+0x876>
    9c9c:	003a      	movs	r2, r7
    9c9e:	9906      	ldr	r1, [sp, #24]
    9ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ca2:	f007 fc51 	bl	11548 <__ssprint_r>
    9ca6:	2800      	cmp	r0, #0
    9ca8:	d000      	beq.n	9cac <_svfprintf_r+0x874>
    9caa:	e44c      	b.n	9546 <_svfprintf_r+0x10e>
    9cac:	68bc      	ldr	r4, [r7, #8]
    9cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9cb0:	9907      	ldr	r1, [sp, #28]
    9cb2:	428b      	cmp	r3, r1
    9cb4:	da00      	bge.n	9cb8 <_svfprintf_r+0x880>
    9cb6:	000b      	movs	r3, r1
    9cb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9cba:	4694      	mov	ip, r2
    9cbc:	449c      	add	ip, r3
    9cbe:	4663      	mov	r3, ip
    9cc0:	930a      	str	r3, [sp, #40]	; 0x28
    9cc2:	2c00      	cmp	r4, #0
    9cc4:	d000      	beq.n	9cc8 <_svfprintf_r+0x890>
    9cc6:	e0d6      	b.n	9e76 <_svfprintf_r+0xa3e>
    9cc8:	2300      	movs	r3, #0
    9cca:	ae32      	add	r6, sp, #200	; 0xc8
    9ccc:	607b      	str	r3, [r7, #4]
    9cce:	f7ff fbde 	bl	948e <_svfprintf_r+0x56>
    9cd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9cd4:	2b01      	cmp	r3, #1
    9cd6:	dc00      	bgt.n	9cda <_svfprintf_r+0x8a2>
    9cd8:	e0ae      	b.n	9e38 <_svfprintf_r+0xa00>
    9cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9cdc:	3401      	adds	r4, #1
    9cde:	6033      	str	r3, [r6, #0]
    9ce0:	2301      	movs	r3, #1
    9ce2:	6073      	str	r3, [r6, #4]
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	60bc      	str	r4, [r7, #8]
    9ce8:	3301      	adds	r3, #1
    9cea:	607b      	str	r3, [r7, #4]
    9cec:	2b07      	cmp	r3, #7
    9cee:	dd00      	ble.n	9cf2 <_svfprintf_r+0x8ba>
    9cf0:	e2df      	b.n	a2b2 <_svfprintf_r+0xe7a>
    9cf2:	3608      	adds	r6, #8
    9cf4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9cf6:	3301      	adds	r3, #1
    9cf8:	6032      	str	r2, [r6, #0]
    9cfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9cfc:	4698      	mov	r8, r3
    9cfe:	4694      	mov	ip, r2
    9d00:	4464      	add	r4, ip
    9d02:	6072      	str	r2, [r6, #4]
    9d04:	60bc      	str	r4, [r7, #8]
    9d06:	607b      	str	r3, [r7, #4]
    9d08:	2b07      	cmp	r3, #7
    9d0a:	dd00      	ble.n	9d0e <_svfprintf_r+0x8d6>
    9d0c:	e2de      	b.n	a2cc <_svfprintf_r+0xe94>
    9d0e:	3608      	adds	r6, #8
    9d10:	2200      	movs	r2, #0
    9d12:	2300      	movs	r3, #0
    9d14:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d16:	9915      	ldr	r1, [sp, #84]	; 0x54
    9d18:	f7fe fbda 	bl	84d0 <__aeabi_dcmpeq>
    9d1c:	2800      	cmp	r0, #0
    9d1e:	d000      	beq.n	9d22 <_svfprintf_r+0x8ea>
    9d20:	e1a4      	b.n	a06c <_svfprintf_r+0xc34>
    9d22:	9d11      	ldr	r5, [sp, #68]	; 0x44
    9d24:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9d26:	3501      	adds	r5, #1
    9d28:	3b01      	subs	r3, #1
    9d2a:	6035      	str	r5, [r6, #0]
    9d2c:	6073      	str	r3, [r6, #4]
    9d2e:	18e4      	adds	r4, r4, r3
    9d30:	2301      	movs	r3, #1
    9d32:	469c      	mov	ip, r3
    9d34:	44e0      	add	r8, ip
    9d36:	4643      	mov	r3, r8
    9d38:	60bc      	str	r4, [r7, #8]
    9d3a:	607b      	str	r3, [r7, #4]
    9d3c:	2b07      	cmp	r3, #7
    9d3e:	dd00      	ble.n	9d42 <_svfprintf_r+0x90a>
    9d40:	e08b      	b.n	9e5a <_svfprintf_r+0xa22>
    9d42:	3608      	adds	r6, #8
    9d44:	ab21      	add	r3, sp, #132	; 0x84
    9d46:	6033      	str	r3, [r6, #0]
    9d48:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9d4a:	469c      	mov	ip, r3
    9d4c:	6073      	str	r3, [r6, #4]
    9d4e:	4643      	mov	r3, r8
    9d50:	4464      	add	r4, ip
    9d52:	3301      	adds	r3, #1
    9d54:	60bc      	str	r4, [r7, #8]
    9d56:	607b      	str	r3, [r7, #4]
    9d58:	2b07      	cmp	r3, #7
    9d5a:	dc00      	bgt.n	9d5e <_svfprintf_r+0x926>
    9d5c:	e761      	b.n	9c22 <_svfprintf_r+0x7ea>
    9d5e:	003a      	movs	r2, r7
    9d60:	9906      	ldr	r1, [sp, #24]
    9d62:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d64:	f007 fbf0 	bl	11548 <__ssprint_r>
    9d68:	2800      	cmp	r0, #0
    9d6a:	d001      	beq.n	9d70 <_svfprintf_r+0x938>
    9d6c:	f7ff fbeb 	bl	9546 <_svfprintf_r+0x10e>
    9d70:	68bc      	ldr	r4, [r7, #8]
    9d72:	ae32      	add	r6, sp, #200	; 0xc8
    9d74:	e756      	b.n	9c24 <_svfprintf_r+0x7ec>
    9d76:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9d78:	2b65      	cmp	r3, #101	; 0x65
    9d7a:	ddaa      	ble.n	9cd2 <_svfprintf_r+0x89a>
    9d7c:	2200      	movs	r2, #0
    9d7e:	2300      	movs	r3, #0
    9d80:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d82:	9915      	ldr	r1, [sp, #84]	; 0x54
    9d84:	f7fe fba4 	bl	84d0 <__aeabi_dcmpeq>
    9d88:	2800      	cmp	r0, #0
    9d8a:	d100      	bne.n	9d8e <_svfprintf_r+0x956>
    9d8c:	e0e2      	b.n	9f54 <_svfprintf_r+0xb1c>
    9d8e:	4b6f      	ldr	r3, [pc, #444]	; (9f4c <_svfprintf_r+0xb14>)
    9d90:	3401      	adds	r4, #1
    9d92:	6033      	str	r3, [r6, #0]
    9d94:	2301      	movs	r3, #1
    9d96:	6073      	str	r3, [r6, #4]
    9d98:	687b      	ldr	r3, [r7, #4]
    9d9a:	60bc      	str	r4, [r7, #8]
    9d9c:	3301      	adds	r3, #1
    9d9e:	607b      	str	r3, [r7, #4]
    9da0:	2b07      	cmp	r3, #7
    9da2:	dd00      	ble.n	9da6 <_svfprintf_r+0x96e>
    9da4:	e366      	b.n	a474 <_svfprintf_r+0x103c>
    9da6:	3608      	adds	r6, #8
    9da8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9daa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    9dac:	4293      	cmp	r3, r2
    9dae:	da00      	bge.n	9db2 <_svfprintf_r+0x97a>
    9db0:	e1a4      	b.n	a0fc <_svfprintf_r+0xcc4>
    9db2:	9b08      	ldr	r3, [sp, #32]
    9db4:	07db      	lsls	r3, r3, #31
    9db6:	d500      	bpl.n	9dba <_svfprintf_r+0x982>
    9db8:	e1a0      	b.n	a0fc <_svfprintf_r+0xcc4>
    9dba:	68bc      	ldr	r4, [r7, #8]
    9dbc:	e732      	b.n	9c24 <_svfprintf_r+0x7ec>
    9dbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9dc0:	9a07      	ldr	r2, [sp, #28]
    9dc2:	1a9d      	subs	r5, r3, r2
    9dc4:	2d00      	cmp	r5, #0
    9dc6:	dc00      	bgt.n	9dca <_svfprintf_r+0x992>
    9dc8:	e6d8      	b.n	9b7c <_svfprintf_r+0x744>
    9dca:	4a61      	ldr	r2, [pc, #388]	; (9f50 <_svfprintf_r+0xb18>)
    9dcc:	687b      	ldr	r3, [r7, #4]
    9dce:	4691      	mov	r9, r2
    9dd0:	2d10      	cmp	r5, #16
    9dd2:	dd25      	ble.n	9e20 <_svfprintf_r+0x9e8>
    9dd4:	2210      	movs	r2, #16
    9dd6:	0021      	movs	r1, r4
    9dd8:	4690      	mov	r8, r2
    9dda:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9ddc:	0032      	movs	r2, r6
    9dde:	464e      	mov	r6, r9
    9de0:	e003      	b.n	9dea <_svfprintf_r+0x9b2>
    9de2:	3d10      	subs	r5, #16
    9de4:	3208      	adds	r2, #8
    9de6:	2d10      	cmp	r5, #16
    9de8:	dd17      	ble.n	9e1a <_svfprintf_r+0x9e2>
    9dea:	4640      	mov	r0, r8
    9dec:	3110      	adds	r1, #16
    9dee:	3301      	adds	r3, #1
    9df0:	6016      	str	r6, [r2, #0]
    9df2:	6050      	str	r0, [r2, #4]
    9df4:	60b9      	str	r1, [r7, #8]
    9df6:	607b      	str	r3, [r7, #4]
    9df8:	2b07      	cmp	r3, #7
    9dfa:	ddf2      	ble.n	9de2 <_svfprintf_r+0x9aa>
    9dfc:	003a      	movs	r2, r7
    9dfe:	9906      	ldr	r1, [sp, #24]
    9e00:	0020      	movs	r0, r4
    9e02:	f007 fba1 	bl	11548 <__ssprint_r>
    9e06:	2800      	cmp	r0, #0
    9e08:	d001      	beq.n	9e0e <_svfprintf_r+0x9d6>
    9e0a:	f7ff fb9c 	bl	9546 <_svfprintf_r+0x10e>
    9e0e:	3d10      	subs	r5, #16
    9e10:	68b9      	ldr	r1, [r7, #8]
    9e12:	687b      	ldr	r3, [r7, #4]
    9e14:	aa32      	add	r2, sp, #200	; 0xc8
    9e16:	2d10      	cmp	r5, #16
    9e18:	dce7      	bgt.n	9dea <_svfprintf_r+0x9b2>
    9e1a:	46b1      	mov	r9, r6
    9e1c:	000c      	movs	r4, r1
    9e1e:	0016      	movs	r6, r2
    9e20:	464a      	mov	r2, r9
    9e22:	1964      	adds	r4, r4, r5
    9e24:	3301      	adds	r3, #1
    9e26:	6032      	str	r2, [r6, #0]
    9e28:	6075      	str	r5, [r6, #4]
    9e2a:	60bc      	str	r4, [r7, #8]
    9e2c:	607b      	str	r3, [r7, #4]
    9e2e:	2b07      	cmp	r3, #7
    9e30:	dd00      	ble.n	9e34 <_svfprintf_r+0x9fc>
    9e32:	e27e      	b.n	a332 <_svfprintf_r+0xefa>
    9e34:	3608      	adds	r6, #8
    9e36:	e6a1      	b.n	9b7c <_svfprintf_r+0x744>
    9e38:	2301      	movs	r3, #1
    9e3a:	9a08      	ldr	r2, [sp, #32]
    9e3c:	4213      	tst	r3, r2
    9e3e:	d000      	beq.n	9e42 <_svfprintf_r+0xa0a>
    9e40:	e74b      	b.n	9cda <_svfprintf_r+0x8a2>
    9e42:	6073      	str	r3, [r6, #4]
    9e44:	687b      	ldr	r3, [r7, #4]
    9e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9e48:	3301      	adds	r3, #1
    9e4a:	3401      	adds	r4, #1
    9e4c:	6032      	str	r2, [r6, #0]
    9e4e:	60bc      	str	r4, [r7, #8]
    9e50:	4698      	mov	r8, r3
    9e52:	607b      	str	r3, [r7, #4]
    9e54:	2b07      	cmp	r3, #7
    9e56:	dc00      	bgt.n	9e5a <_svfprintf_r+0xa22>
    9e58:	e773      	b.n	9d42 <_svfprintf_r+0x90a>
    9e5a:	003a      	movs	r2, r7
    9e5c:	9906      	ldr	r1, [sp, #24]
    9e5e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e60:	f007 fb72 	bl	11548 <__ssprint_r>
    9e64:	2800      	cmp	r0, #0
    9e66:	d001      	beq.n	9e6c <_svfprintf_r+0xa34>
    9e68:	f7ff fb6d 	bl	9546 <_svfprintf_r+0x10e>
    9e6c:	687b      	ldr	r3, [r7, #4]
    9e6e:	68bc      	ldr	r4, [r7, #8]
    9e70:	4698      	mov	r8, r3
    9e72:	ae32      	add	r6, sp, #200	; 0xc8
    9e74:	e766      	b.n	9d44 <_svfprintf_r+0x90c>
    9e76:	003a      	movs	r2, r7
    9e78:	9906      	ldr	r1, [sp, #24]
    9e7a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9e7c:	f007 fb64 	bl	11548 <__ssprint_r>
    9e80:	2800      	cmp	r0, #0
    9e82:	d100      	bne.n	9e86 <_svfprintf_r+0xa4e>
    9e84:	e720      	b.n	9cc8 <_svfprintf_r+0x890>
    9e86:	f7ff fb5e 	bl	9546 <_svfprintf_r+0x10e>
    9e8a:	9c08      	ldr	r4, [sp, #32]
    9e8c:	2b01      	cmp	r3, #1
    9e8e:	d100      	bne.n	9e92 <_svfprintf_r+0xa5a>
    9e90:	e184      	b.n	a19c <_svfprintf_r+0xd64>
    9e92:	2b02      	cmp	r3, #2
    9e94:	d129      	bne.n	9eea <_svfprintf_r+0xab2>
    9e96:	9408      	str	r4, [sp, #32]
    9e98:	2300      	movs	r3, #0
    9e9a:	2400      	movs	r4, #0
    9e9c:	930c      	str	r3, [sp, #48]	; 0x30
    9e9e:	940d      	str	r4, [sp, #52]	; 0x34
    9ea0:	e4c5      	b.n	982e <_svfprintf_r+0x3f6>
    9ea2:	003a      	movs	r2, r7
    9ea4:	9906      	ldr	r1, [sp, #24]
    9ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ea8:	f007 fb4e 	bl	11548 <__ssprint_r>
    9eac:	2800      	cmp	r0, #0
    9eae:	d001      	beq.n	9eb4 <_svfprintf_r+0xa7c>
    9eb0:	f7ff fb49 	bl	9546 <_svfprintf_r+0x10e>
    9eb4:	68bc      	ldr	r4, [r7, #8]
    9eb6:	ae32      	add	r6, sp, #200	; 0xc8
    9eb8:	e6a2      	b.n	9c00 <_svfprintf_r+0x7c8>
    9eba:	003a      	movs	r2, r7
    9ebc:	9906      	ldr	r1, [sp, #24]
    9ebe:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ec0:	f007 fb42 	bl	11548 <__ssprint_r>
    9ec4:	2800      	cmp	r0, #0
    9ec6:	d001      	beq.n	9ecc <_svfprintf_r+0xa94>
    9ec8:	f7ff fb3d 	bl	9546 <_svfprintf_r+0x10e>
    9ecc:	68bc      	ldr	r4, [r7, #8]
    9ece:	ae32      	add	r6, sp, #200	; 0xc8
    9ed0:	e640      	b.n	9b54 <_svfprintf_r+0x71c>
    9ed2:	003a      	movs	r2, r7
    9ed4:	9906      	ldr	r1, [sp, #24]
    9ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
    9ed8:	f007 fb36 	bl	11548 <__ssprint_r>
    9edc:	2800      	cmp	r0, #0
    9ede:	d001      	beq.n	9ee4 <_svfprintf_r+0xaac>
    9ee0:	f7ff fb31 	bl	9546 <_svfprintf_r+0x10e>
    9ee4:	68bc      	ldr	r4, [r7, #8]
    9ee6:	ae32      	add	r6, sp, #200	; 0xc8
    9ee8:	e644      	b.n	9b74 <_svfprintf_r+0x73c>
    9eea:	9408      	str	r4, [sp, #32]
    9eec:	2300      	movs	r3, #0
    9eee:	2400      	movs	r4, #0
    9ef0:	930c      	str	r3, [sp, #48]	; 0x30
    9ef2:	940d      	str	r4, [sp, #52]	; 0x34
    9ef4:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ef6:	990d      	ldr	r1, [sp, #52]	; 0x34
    9ef8:	465b      	mov	r3, fp
    9efa:	aa32      	add	r2, sp, #200	; 0xc8
    9efc:	9307      	str	r3, [sp, #28]
    9efe:	4691      	mov	r9, r2
    9f00:	46b3      	mov	fp, r6
    9f02:	e000      	b.n	9f06 <_svfprintf_r+0xace>
    9f04:	46a1      	mov	r9, r4
    9f06:	074a      	lsls	r2, r1, #29
    9f08:	4694      	mov	ip, r2
    9f0a:	464b      	mov	r3, r9
    9f0c:	4665      	mov	r5, ip
    9f0e:	1e5c      	subs	r4, r3, #1
    9f10:	08c6      	lsrs	r6, r0, #3
    9f12:	2307      	movs	r3, #7
    9f14:	08ca      	lsrs	r2, r1, #3
    9f16:	4335      	orrs	r5, r6
    9f18:	0011      	movs	r1, r2
    9f1a:	002a      	movs	r2, r5
    9f1c:	4003      	ands	r3, r0
    9f1e:	3330      	adds	r3, #48	; 0x30
    9f20:	7023      	strb	r3, [r4, #0]
    9f22:	0028      	movs	r0, r5
    9f24:	430a      	orrs	r2, r1
    9f26:	d1ed      	bne.n	9f04 <_svfprintf_r+0xacc>
    9f28:	900c      	str	r0, [sp, #48]	; 0x30
    9f2a:	910d      	str	r1, [sp, #52]	; 0x34
    9f2c:	9907      	ldr	r1, [sp, #28]
    9f2e:	465e      	mov	r6, fp
    9f30:	468b      	mov	fp, r1
    9f32:	9908      	ldr	r1, [sp, #32]
    9f34:	464a      	mov	r2, r9
    9f36:	9411      	str	r4, [sp, #68]	; 0x44
    9f38:	07c9      	lsls	r1, r1, #31
    9f3a:	d500      	bpl.n	9f3e <_svfprintf_r+0xb06>
    9f3c:	e13d      	b.n	a1ba <_svfprintf_r+0xd82>
    9f3e:	ab32      	add	r3, sp, #200	; 0xc8
    9f40:	1b1b      	subs	r3, r3, r4
    9f42:	930e      	str	r3, [sp, #56]	; 0x38
    9f44:	f7ff fb88 	bl	9658 <_svfprintf_r+0x220>
    9f48:	000152a0 	.word	0x000152a0
    9f4c:	0001529c 	.word	0x0001529c
    9f50:	000152b0 	.word	0x000152b0
    9f54:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9f56:	2800      	cmp	r0, #0
    9f58:	dc00      	bgt.n	9f5c <_svfprintf_r+0xb24>
    9f5a:	e296      	b.n	a48a <_svfprintf_r+0x1052>
    9f5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9f5e:	9914      	ldr	r1, [sp, #80]	; 0x50
    9f60:	0013      	movs	r3, r2
    9f62:	4690      	mov	r8, r2
    9f64:	428b      	cmp	r3, r1
    9f66:	dd00      	ble.n	9f6a <_svfprintf_r+0xb32>
    9f68:	4688      	mov	r8, r1
    9f6a:	4643      	mov	r3, r8
    9f6c:	2b00      	cmp	r3, #0
    9f6e:	dd0c      	ble.n	9f8a <_svfprintf_r+0xb52>
    9f70:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9f72:	4444      	add	r4, r8
    9f74:	6033      	str	r3, [r6, #0]
    9f76:	4643      	mov	r3, r8
    9f78:	6073      	str	r3, [r6, #4]
    9f7a:	687b      	ldr	r3, [r7, #4]
    9f7c:	60bc      	str	r4, [r7, #8]
    9f7e:	3301      	adds	r3, #1
    9f80:	607b      	str	r3, [r7, #4]
    9f82:	2b07      	cmp	r3, #7
    9f84:	dd00      	ble.n	9f88 <_svfprintf_r+0xb50>
    9f86:	e3b7      	b.n	a6f8 <_svfprintf_r+0x12c0>
    9f88:	3608      	adds	r6, #8
    9f8a:	4643      	mov	r3, r8
    9f8c:	43db      	mvns	r3, r3
    9f8e:	4642      	mov	r2, r8
    9f90:	17db      	asrs	r3, r3, #31
    9f92:	4013      	ands	r3, r2
    9f94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9f96:	1ad3      	subs	r3, r2, r3
    9f98:	4698      	mov	r8, r3
    9f9a:	2b00      	cmp	r3, #0
    9f9c:	dc00      	bgt.n	9fa0 <_svfprintf_r+0xb68>
    9f9e:	e128      	b.n	a1f2 <_svfprintf_r+0xdba>
    9fa0:	2b10      	cmp	r3, #16
    9fa2:	dc01      	bgt.n	9fa8 <_svfprintf_r+0xb70>
    9fa4:	f000 fce7 	bl	a976 <_svfprintf_r+0x153e>
    9fa8:	4acf      	ldr	r2, [pc, #828]	; (a2e8 <_svfprintf_r+0xeb0>)
    9faa:	0021      	movs	r1, r4
    9fac:	4691      	mov	r9, r2
    9fae:	2210      	movs	r2, #16
    9fb0:	687b      	ldr	r3, [r7, #4]
    9fb2:	4692      	mov	sl, r2
    9fb4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9fb6:	0032      	movs	r2, r6
    9fb8:	464c      	mov	r4, r9
    9fba:	4646      	mov	r6, r8
    9fbc:	e004      	b.n	9fc8 <_svfprintf_r+0xb90>
    9fbe:	3208      	adds	r2, #8
    9fc0:	3e10      	subs	r6, #16
    9fc2:	2e10      	cmp	r6, #16
    9fc4:	dc00      	bgt.n	9fc8 <_svfprintf_r+0xb90>
    9fc6:	e104      	b.n	a1d2 <_svfprintf_r+0xd9a>
    9fc8:	4650      	mov	r0, sl
    9fca:	3110      	adds	r1, #16
    9fcc:	3301      	adds	r3, #1
    9fce:	6014      	str	r4, [r2, #0]
    9fd0:	6050      	str	r0, [r2, #4]
    9fd2:	60b9      	str	r1, [r7, #8]
    9fd4:	607b      	str	r3, [r7, #4]
    9fd6:	2b07      	cmp	r3, #7
    9fd8:	ddf1      	ble.n	9fbe <_svfprintf_r+0xb86>
    9fda:	003a      	movs	r2, r7
    9fdc:	9906      	ldr	r1, [sp, #24]
    9fde:	0028      	movs	r0, r5
    9fe0:	f007 fab2 	bl	11548 <__ssprint_r>
    9fe4:	2800      	cmp	r0, #0
    9fe6:	d001      	beq.n	9fec <_svfprintf_r+0xbb4>
    9fe8:	f7ff faad 	bl	9546 <_svfprintf_r+0x10e>
    9fec:	68b9      	ldr	r1, [r7, #8]
    9fee:	687b      	ldr	r3, [r7, #4]
    9ff0:	aa32      	add	r2, sp, #200	; 0xc8
    9ff2:	e7e5      	b.n	9fc0 <_svfprintf_r+0xb88>
    9ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d100      	bne.n	9ffc <_svfprintf_r+0xbc4>
    9ffa:	e0ca      	b.n	a192 <_svfprintf_r+0xd5a>
    9ffc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    9ffe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a000:	ab32      	add	r3, sp, #200	; 0xc8
    a002:	46b1      	mov	r9, r6
    a004:	001e      	movs	r6, r3
    a006:	0020      	movs	r0, r4
    a008:	0029      	movs	r1, r5
    a00a:	220a      	movs	r2, #10
    a00c:	2300      	movs	r3, #0
    a00e:	f7fc fb23 	bl	6658 <__aeabi_uldivmod>
    a012:	3e01      	subs	r6, #1
    a014:	3230      	adds	r2, #48	; 0x30
    a016:	7032      	strb	r2, [r6, #0]
    a018:	2300      	movs	r3, #0
    a01a:	0020      	movs	r0, r4
    a01c:	0029      	movs	r1, r5
    a01e:	220a      	movs	r2, #10
    a020:	f7fc fb1a 	bl	6658 <__aeabi_uldivmod>
    a024:	0003      	movs	r3, r0
    a026:	0004      	movs	r4, r0
    a028:	000d      	movs	r5, r1
    a02a:	430b      	orrs	r3, r1
    a02c:	d1eb      	bne.n	a006 <_svfprintf_r+0xbce>
    a02e:	0032      	movs	r2, r6
    a030:	ab32      	add	r3, sp, #200	; 0xc8
    a032:	1a9b      	subs	r3, r3, r2
    a034:	9611      	str	r6, [sp, #68]	; 0x44
    a036:	940c      	str	r4, [sp, #48]	; 0x30
    a038:	950d      	str	r5, [sp, #52]	; 0x34
    a03a:	464e      	mov	r6, r9
    a03c:	930e      	str	r3, [sp, #56]	; 0x38
    a03e:	f7ff fb0b 	bl	9658 <_svfprintf_r+0x220>
    a042:	2300      	movs	r3, #0
    a044:	930e      	str	r3, [sp, #56]	; 0x38
    a046:	ab32      	add	r3, sp, #200	; 0xc8
    a048:	9311      	str	r3, [sp, #68]	; 0x44
    a04a:	f7ff fb05 	bl	9658 <_svfprintf_r+0x220>
    a04e:	003a      	movs	r2, r7
    a050:	9906      	ldr	r1, [sp, #24]
    a052:	9809      	ldr	r0, [sp, #36]	; 0x24
    a054:	f007 fa78 	bl	11548 <__ssprint_r>
    a058:	2800      	cmp	r0, #0
    a05a:	d001      	beq.n	a060 <_svfprintf_r+0xc28>
    a05c:	f7ff fa73 	bl	9546 <_svfprintf_r+0x10e>
    a060:	ab16      	add	r3, sp, #88	; 0x58
    a062:	7fdb      	ldrb	r3, [r3, #31]
    a064:	68bc      	ldr	r4, [r7, #8]
    a066:	4698      	mov	r8, r3
    a068:	ae32      	add	r6, sp, #200	; 0xc8
    a06a:	e560      	b.n	9b2e <_svfprintf_r+0x6f6>
    a06c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a06e:	1e5d      	subs	r5, r3, #1
    a070:	2d00      	cmp	r5, #0
    a072:	dc00      	bgt.n	a076 <_svfprintf_r+0xc3e>
    a074:	e666      	b.n	9d44 <_svfprintf_r+0x90c>
    a076:	4b9c      	ldr	r3, [pc, #624]	; (a2e8 <_svfprintf_r+0xeb0>)
    a078:	4699      	mov	r9, r3
    a07a:	2d10      	cmp	r5, #16
    a07c:	dd29      	ble.n	a0d2 <_svfprintf_r+0xc9a>
    a07e:	2310      	movs	r3, #16
    a080:	0032      	movs	r2, r6
    a082:	469a      	mov	sl, r3
    a084:	002e      	movs	r6, r5
    a086:	0021      	movs	r1, r4
    a088:	4643      	mov	r3, r8
    a08a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a08c:	464d      	mov	r5, r9
    a08e:	e003      	b.n	a098 <_svfprintf_r+0xc60>
    a090:	3e10      	subs	r6, #16
    a092:	3208      	adds	r2, #8
    a094:	2e10      	cmp	r6, #16
    a096:	dd17      	ble.n	a0c8 <_svfprintf_r+0xc90>
    a098:	4650      	mov	r0, sl
    a09a:	3110      	adds	r1, #16
    a09c:	3301      	adds	r3, #1
    a09e:	6015      	str	r5, [r2, #0]
    a0a0:	6050      	str	r0, [r2, #4]
    a0a2:	60b9      	str	r1, [r7, #8]
    a0a4:	607b      	str	r3, [r7, #4]
    a0a6:	2b07      	cmp	r3, #7
    a0a8:	ddf2      	ble.n	a090 <_svfprintf_r+0xc58>
    a0aa:	003a      	movs	r2, r7
    a0ac:	9906      	ldr	r1, [sp, #24]
    a0ae:	0020      	movs	r0, r4
    a0b0:	f007 fa4a 	bl	11548 <__ssprint_r>
    a0b4:	2800      	cmp	r0, #0
    a0b6:	d001      	beq.n	a0bc <_svfprintf_r+0xc84>
    a0b8:	f7ff fa45 	bl	9546 <_svfprintf_r+0x10e>
    a0bc:	3e10      	subs	r6, #16
    a0be:	68b9      	ldr	r1, [r7, #8]
    a0c0:	687b      	ldr	r3, [r7, #4]
    a0c2:	aa32      	add	r2, sp, #200	; 0xc8
    a0c4:	2e10      	cmp	r6, #16
    a0c6:	dce7      	bgt.n	a098 <_svfprintf_r+0xc60>
    a0c8:	46a9      	mov	r9, r5
    a0ca:	000c      	movs	r4, r1
    a0cc:	0035      	movs	r5, r6
    a0ce:	4698      	mov	r8, r3
    a0d0:	0016      	movs	r6, r2
    a0d2:	464b      	mov	r3, r9
    a0d4:	6075      	str	r5, [r6, #4]
    a0d6:	6033      	str	r3, [r6, #0]
    a0d8:	1964      	adds	r4, r4, r5
    a0da:	e629      	b.n	9d30 <_svfprintf_r+0x8f8>
    a0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0de:	681a      	ldr	r2, [r3, #0]
    a0e0:	f7ff fbfb 	bl	98da <_svfprintf_r+0x4a2>
    a0e4:	6813      	ldr	r3, [r2, #0]
    a0e6:	9307      	str	r3, [sp, #28]
    a0e8:	f7ff fa82 	bl	95f0 <_svfprintf_r+0x1b8>
    a0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0ee:	681a      	ldr	r2, [r3, #0]
    a0f0:	f7ff fb84 	bl	97fc <_svfprintf_r+0x3c4>
    a0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a0f6:	681a      	ldr	r2, [r3, #0]
    a0f8:	f7ff fbd1 	bl	989e <_svfprintf_r+0x466>
    a0fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a0fe:	68ba      	ldr	r2, [r7, #8]
    a100:	6033      	str	r3, [r6, #0]
    a102:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a104:	469c      	mov	ip, r3
    a106:	6073      	str	r3, [r6, #4]
    a108:	687b      	ldr	r3, [r7, #4]
    a10a:	4462      	add	r2, ip
    a10c:	3301      	adds	r3, #1
    a10e:	0014      	movs	r4, r2
    a110:	60ba      	str	r2, [r7, #8]
    a112:	607b      	str	r3, [r7, #4]
    a114:	2b07      	cmp	r3, #7
    a116:	dd00      	ble.n	a11a <_svfprintf_r+0xce2>
    a118:	e202      	b.n	a520 <_svfprintf_r+0x10e8>
    a11a:	3608      	adds	r6, #8
    a11c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a11e:	1e5d      	subs	r5, r3, #1
    a120:	2d00      	cmp	r5, #0
    a122:	dc00      	bgt.n	a126 <_svfprintf_r+0xcee>
    a124:	e57e      	b.n	9c24 <_svfprintf_r+0x7ec>
    a126:	4a70      	ldr	r2, [pc, #448]	; (a2e8 <_svfprintf_r+0xeb0>)
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	4691      	mov	r9, r2
    a12c:	2d10      	cmp	r5, #16
    a12e:	dd25      	ble.n	a17c <_svfprintf_r+0xd44>
    a130:	2210      	movs	r2, #16
    a132:	0021      	movs	r1, r4
    a134:	4690      	mov	r8, r2
    a136:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a138:	0032      	movs	r2, r6
    a13a:	002e      	movs	r6, r5
    a13c:	464d      	mov	r5, r9
    a13e:	e003      	b.n	a148 <_svfprintf_r+0xd10>
    a140:	3208      	adds	r2, #8
    a142:	3e10      	subs	r6, #16
    a144:	2e10      	cmp	r6, #16
    a146:	dd15      	ble.n	a174 <_svfprintf_r+0xd3c>
    a148:	4640      	mov	r0, r8
    a14a:	3110      	adds	r1, #16
    a14c:	3301      	adds	r3, #1
    a14e:	6015      	str	r5, [r2, #0]
    a150:	6050      	str	r0, [r2, #4]
    a152:	60b9      	str	r1, [r7, #8]
    a154:	607b      	str	r3, [r7, #4]
    a156:	2b07      	cmp	r3, #7
    a158:	ddf2      	ble.n	a140 <_svfprintf_r+0xd08>
    a15a:	003a      	movs	r2, r7
    a15c:	9906      	ldr	r1, [sp, #24]
    a15e:	0020      	movs	r0, r4
    a160:	f007 f9f2 	bl	11548 <__ssprint_r>
    a164:	2800      	cmp	r0, #0
    a166:	d001      	beq.n	a16c <_svfprintf_r+0xd34>
    a168:	f7ff f9ed 	bl	9546 <_svfprintf_r+0x10e>
    a16c:	68b9      	ldr	r1, [r7, #8]
    a16e:	687b      	ldr	r3, [r7, #4]
    a170:	aa32      	add	r2, sp, #200	; 0xc8
    a172:	e7e6      	b.n	a142 <_svfprintf_r+0xd0a>
    a174:	46a9      	mov	r9, r5
    a176:	000c      	movs	r4, r1
    a178:	0035      	movs	r5, r6
    a17a:	0016      	movs	r6, r2
    a17c:	464a      	mov	r2, r9
    a17e:	1964      	adds	r4, r4, r5
    a180:	3301      	adds	r3, #1
    a182:	6032      	str	r2, [r6, #0]
    a184:	6075      	str	r5, [r6, #4]
    a186:	60bc      	str	r4, [r7, #8]
    a188:	607b      	str	r3, [r7, #4]
    a18a:	2b07      	cmp	r3, #7
    a18c:	dc00      	bgt.n	a190 <_svfprintf_r+0xd58>
    a18e:	e548      	b.n	9c22 <_svfprintf_r+0x7ea>
    a190:	e5e5      	b.n	9d5e <_svfprintf_r+0x926>
    a192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a194:	2b09      	cmp	r3, #9
    a196:	d900      	bls.n	a19a <_svfprintf_r+0xd62>
    a198:	e730      	b.n	9ffc <_svfprintf_r+0xbc4>
    a19a:	9c08      	ldr	r4, [sp, #32]
    a19c:	2227      	movs	r2, #39	; 0x27
    a19e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a1a0:	a928      	add	r1, sp, #160	; 0xa0
    a1a2:	3330      	adds	r3, #48	; 0x30
    a1a4:	548b      	strb	r3, [r1, r2]
    a1a6:	2301      	movs	r3, #1
    a1a8:	aa16      	add	r2, sp, #88	; 0x58
    a1aa:	4694      	mov	ip, r2
    a1ac:	930e      	str	r3, [sp, #56]	; 0x38
    a1ae:	336e      	adds	r3, #110	; 0x6e
    a1b0:	4463      	add	r3, ip
    a1b2:	9408      	str	r4, [sp, #32]
    a1b4:	9311      	str	r3, [sp, #68]	; 0x44
    a1b6:	f7ff fa4f 	bl	9658 <_svfprintf_r+0x220>
    a1ba:	2b30      	cmp	r3, #48	; 0x30
    a1bc:	d100      	bne.n	a1c0 <_svfprintf_r+0xd88>
    a1be:	e20b      	b.n	a5d8 <_svfprintf_r+0x11a0>
    a1c0:	2330      	movs	r3, #48	; 0x30
    a1c2:	3a02      	subs	r2, #2
    a1c4:	7013      	strb	r3, [r2, #0]
    a1c6:	ab32      	add	r3, sp, #200	; 0xc8
    a1c8:	1a9b      	subs	r3, r3, r2
    a1ca:	930e      	str	r3, [sp, #56]	; 0x38
    a1cc:	9211      	str	r2, [sp, #68]	; 0x44
    a1ce:	f7ff fa43 	bl	9658 <_svfprintf_r+0x220>
    a1d2:	46b0      	mov	r8, r6
    a1d4:	46a1      	mov	r9, r4
    a1d6:	0016      	movs	r6, r2
    a1d8:	000c      	movs	r4, r1
    a1da:	464a      	mov	r2, r9
    a1dc:	6032      	str	r2, [r6, #0]
    a1de:	4642      	mov	r2, r8
    a1e0:	4444      	add	r4, r8
    a1e2:	3301      	adds	r3, #1
    a1e4:	6072      	str	r2, [r6, #4]
    a1e6:	60bc      	str	r4, [r7, #8]
    a1e8:	607b      	str	r3, [r7, #4]
    a1ea:	2b07      	cmp	r3, #7
    a1ec:	dd00      	ble.n	a1f0 <_svfprintf_r+0xdb8>
    a1ee:	e29c      	b.n	a72a <_svfprintf_r+0x12f2>
    a1f0:	3608      	adds	r6, #8
    a1f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a1f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a1f6:	4293      	cmp	r3, r2
    a1f8:	db4c      	blt.n	a294 <_svfprintf_r+0xe5c>
    a1fa:	9a08      	ldr	r2, [sp, #32]
    a1fc:	07d2      	lsls	r2, r2, #31
    a1fe:	d449      	bmi.n	a294 <_svfprintf_r+0xe5c>
    a200:	9a14      	ldr	r2, [sp, #80]	; 0x50
    a202:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a204:	1ad3      	subs	r3, r2, r3
    a206:	1a52      	subs	r2, r2, r1
    a208:	4690      	mov	r8, r2
    a20a:	429a      	cmp	r2, r3
    a20c:	dd00      	ble.n	a210 <_svfprintf_r+0xdd8>
    a20e:	4698      	mov	r8, r3
    a210:	4642      	mov	r2, r8
    a212:	2a00      	cmp	r2, #0
    a214:	dd0f      	ble.n	a236 <_svfprintf_r+0xdfe>
    a216:	9913      	ldr	r1, [sp, #76]	; 0x4c
    a218:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a21a:	468c      	mov	ip, r1
    a21c:	4462      	add	r2, ip
    a21e:	6032      	str	r2, [r6, #0]
    a220:	4642      	mov	r2, r8
    a222:	6072      	str	r2, [r6, #4]
    a224:	687a      	ldr	r2, [r7, #4]
    a226:	4444      	add	r4, r8
    a228:	3201      	adds	r2, #1
    a22a:	60bc      	str	r4, [r7, #8]
    a22c:	607a      	str	r2, [r7, #4]
    a22e:	2a07      	cmp	r2, #7
    a230:	dd00      	ble.n	a234 <_svfprintf_r+0xdfc>
    a232:	e286      	b.n	a742 <_svfprintf_r+0x130a>
    a234:	3608      	adds	r6, #8
    a236:	4642      	mov	r2, r8
    a238:	43d5      	mvns	r5, r2
    a23a:	17ed      	asrs	r5, r5, #31
    a23c:	4015      	ands	r5, r2
    a23e:	1b5d      	subs	r5, r3, r5
    a240:	2d00      	cmp	r5, #0
    a242:	dc00      	bgt.n	a246 <_svfprintf_r+0xe0e>
    a244:	e4ee      	b.n	9c24 <_svfprintf_r+0x7ec>
    a246:	4a28      	ldr	r2, [pc, #160]	; (a2e8 <_svfprintf_r+0xeb0>)
    a248:	687b      	ldr	r3, [r7, #4]
    a24a:	4691      	mov	r9, r2
    a24c:	2d10      	cmp	r5, #16
    a24e:	dd95      	ble.n	a17c <_svfprintf_r+0xd44>
    a250:	2210      	movs	r2, #16
    a252:	0021      	movs	r1, r4
    a254:	4690      	mov	r8, r2
    a256:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a258:	0032      	movs	r2, r6
    a25a:	002e      	movs	r6, r5
    a25c:	464d      	mov	r5, r9
    a25e:	e003      	b.n	a268 <_svfprintf_r+0xe30>
    a260:	3208      	adds	r2, #8
    a262:	3e10      	subs	r6, #16
    a264:	2e10      	cmp	r6, #16
    a266:	dd85      	ble.n	a174 <_svfprintf_r+0xd3c>
    a268:	4640      	mov	r0, r8
    a26a:	3110      	adds	r1, #16
    a26c:	3301      	adds	r3, #1
    a26e:	6015      	str	r5, [r2, #0]
    a270:	6050      	str	r0, [r2, #4]
    a272:	60b9      	str	r1, [r7, #8]
    a274:	607b      	str	r3, [r7, #4]
    a276:	2b07      	cmp	r3, #7
    a278:	ddf2      	ble.n	a260 <_svfprintf_r+0xe28>
    a27a:	003a      	movs	r2, r7
    a27c:	9906      	ldr	r1, [sp, #24]
    a27e:	0020      	movs	r0, r4
    a280:	f007 f962 	bl	11548 <__ssprint_r>
    a284:	2800      	cmp	r0, #0
    a286:	d001      	beq.n	a28c <_svfprintf_r+0xe54>
    a288:	f7ff f95d 	bl	9546 <_svfprintf_r+0x10e>
    a28c:	68b9      	ldr	r1, [r7, #8]
    a28e:	687b      	ldr	r3, [r7, #4]
    a290:	aa32      	add	r2, sp, #200	; 0xc8
    a292:	e7e6      	b.n	a262 <_svfprintf_r+0xe2a>
    a294:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a296:	6032      	str	r2, [r6, #0]
    a298:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a29a:	4694      	mov	ip, r2
    a29c:	6072      	str	r2, [r6, #4]
    a29e:	687a      	ldr	r2, [r7, #4]
    a2a0:	4464      	add	r4, ip
    a2a2:	3201      	adds	r2, #1
    a2a4:	60bc      	str	r4, [r7, #8]
    a2a6:	607a      	str	r2, [r7, #4]
    a2a8:	2a07      	cmp	r2, #7
    a2aa:	dd00      	ble.n	a2ae <_svfprintf_r+0xe76>
    a2ac:	e230      	b.n	a710 <_svfprintf_r+0x12d8>
    a2ae:	3608      	adds	r6, #8
    a2b0:	e7a6      	b.n	a200 <_svfprintf_r+0xdc8>
    a2b2:	003a      	movs	r2, r7
    a2b4:	9906      	ldr	r1, [sp, #24]
    a2b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    a2b8:	f007 f946 	bl	11548 <__ssprint_r>
    a2bc:	2800      	cmp	r0, #0
    a2be:	d001      	beq.n	a2c4 <_svfprintf_r+0xe8c>
    a2c0:	f7ff f941 	bl	9546 <_svfprintf_r+0x10e>
    a2c4:	68bc      	ldr	r4, [r7, #8]
    a2c6:	687b      	ldr	r3, [r7, #4]
    a2c8:	ae32      	add	r6, sp, #200	; 0xc8
    a2ca:	e513      	b.n	9cf4 <_svfprintf_r+0x8bc>
    a2cc:	003a      	movs	r2, r7
    a2ce:	9906      	ldr	r1, [sp, #24]
    a2d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a2d2:	f007 f939 	bl	11548 <__ssprint_r>
    a2d6:	2800      	cmp	r0, #0
    a2d8:	d001      	beq.n	a2de <_svfprintf_r+0xea6>
    a2da:	f7ff f934 	bl	9546 <_svfprintf_r+0x10e>
    a2de:	687b      	ldr	r3, [r7, #4]
    a2e0:	68bc      	ldr	r4, [r7, #8]
    a2e2:	4698      	mov	r8, r3
    a2e4:	ae32      	add	r6, sp, #200	; 0xc8
    a2e6:	e513      	b.n	9d10 <_svfprintf_r+0x8d8>
    a2e8:	000152b0 	.word	0x000152b0
    a2ec:	2307      	movs	r3, #7
    a2ee:	3207      	adds	r2, #7
    a2f0:	439a      	bics	r2, r3
    a2f2:	3301      	adds	r3, #1
    a2f4:	469c      	mov	ip, r3
    a2f6:	4494      	add	ip, r2
    a2f8:	4663      	mov	r3, ip
    a2fa:	930f      	str	r3, [sp, #60]	; 0x3c
    a2fc:	6853      	ldr	r3, [r2, #4]
    a2fe:	6812      	ldr	r2, [r2, #0]
    a300:	930d      	str	r3, [sp, #52]	; 0x34
    a302:	920c      	str	r2, [sp, #48]	; 0x30
    a304:	2b00      	cmp	r3, #0
    a306:	db01      	blt.n	a30c <_svfprintf_r+0xed4>
    a308:	f7ff f97a 	bl	9600 <_svfprintf_r+0x1c8>
    a30c:	980c      	ldr	r0, [sp, #48]	; 0x30
    a30e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a310:	2300      	movs	r3, #0
    a312:	4242      	negs	r2, r0
    a314:	418b      	sbcs	r3, r1
    a316:	0011      	movs	r1, r2
    a318:	001a      	movs	r2, r3
    a31a:	232d      	movs	r3, #45	; 0x2d
    a31c:	a816      	add	r0, sp, #88	; 0x58
    a31e:	77c3      	strb	r3, [r0, #31]
    a320:	0008      	movs	r0, r1
    a322:	4310      	orrs	r0, r2
    a324:	910c      	str	r1, [sp, #48]	; 0x30
    a326:	920d      	str	r2, [sp, #52]	; 0x34
    a328:	4698      	mov	r8, r3
    a32a:	0002      	movs	r2, r0
    a32c:	3b2c      	subs	r3, #44	; 0x2c
    a32e:	f7ff f970 	bl	9612 <_svfprintf_r+0x1da>
    a332:	003a      	movs	r2, r7
    a334:	9906      	ldr	r1, [sp, #24]
    a336:	9809      	ldr	r0, [sp, #36]	; 0x24
    a338:	f007 f906 	bl	11548 <__ssprint_r>
    a33c:	2800      	cmp	r0, #0
    a33e:	d001      	beq.n	a344 <_svfprintf_r+0xf0c>
    a340:	f7ff f901 	bl	9546 <_svfprintf_r+0x10e>
    a344:	68bc      	ldr	r4, [r7, #8]
    a346:	ae32      	add	r6, sp, #200	; 0xc8
    a348:	e418      	b.n	9b7c <_svfprintf_r+0x744>
    a34a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a34c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    a34e:	000a      	movs	r2, r1
    a350:	0008      	movs	r0, r1
    a352:	002b      	movs	r3, r5
    a354:	0029      	movs	r1, r5
    a356:	f008 f8c1 	bl	124dc <__aeabi_dcmpun>
    a35a:	2800      	cmp	r0, #0
    a35c:	d000      	beq.n	a360 <_svfprintf_r+0xf28>
    a35e:	e2e6      	b.n	a92e <_svfprintf_r+0x14f6>
    a360:	4653      	mov	r3, sl
    a362:	3301      	adds	r3, #1
    a364:	d100      	bne.n	a368 <_svfprintf_r+0xf30>
    a366:	e20d      	b.n	a784 <_svfprintf_r+0x134c>
    a368:	2320      	movs	r3, #32
    a36a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a36c:	439a      	bics	r2, r3
    a36e:	920e      	str	r2, [sp, #56]	; 0x38
    a370:	2a47      	cmp	r2, #71	; 0x47
    a372:	d100      	bne.n	a376 <_svfprintf_r+0xf3e>
    a374:	e11c      	b.n	a5b0 <_svfprintf_r+0x1178>
    a376:	2380      	movs	r3, #128	; 0x80
    a378:	005b      	lsls	r3, r3, #1
    a37a:	4323      	orrs	r3, r4
    a37c:	9308      	str	r3, [sp, #32]
    a37e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a380:	2b00      	cmp	r3, #0
    a382:	da00      	bge.n	a386 <_svfprintf_r+0xf4e>
    a384:	e221      	b.n	a7ca <_svfprintf_r+0x1392>
    a386:	9a16      	ldr	r2, [sp, #88]	; 0x58
    a388:	9307      	str	r3, [sp, #28]
    a38a:	2300      	movs	r3, #0
    a38c:	4691      	mov	r9, r2
    a38e:	9310      	str	r3, [sp, #64]	; 0x40
    a390:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a392:	2b66      	cmp	r3, #102	; 0x66
    a394:	d100      	bne.n	a398 <_svfprintf_r+0xf60>
    a396:	e1fc      	b.n	a792 <_svfprintf_r+0x135a>
    a398:	2b46      	cmp	r3, #70	; 0x46
    a39a:	d100      	bne.n	a39e <_svfprintf_r+0xf66>
    a39c:	e0db      	b.n	a556 <_svfprintf_r+0x111e>
    a39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a3a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    a3a2:	3a45      	subs	r2, #69	; 0x45
    a3a4:	0013      	movs	r3, r2
    a3a6:	4259      	negs	r1, r3
    a3a8:	4159      	adcs	r1, r3
    a3aa:	ab20      	add	r3, sp, #128	; 0x80
    a3ac:	000d      	movs	r5, r1
    a3ae:	9303      	str	r3, [sp, #12]
    a3b0:	ab1f      	add	r3, sp, #124	; 0x7c
    a3b2:	9302      	str	r3, [sp, #8]
    a3b4:	2302      	movs	r3, #2
    a3b6:	aa23      	add	r2, sp, #140	; 0x8c
    a3b8:	4455      	add	r5, sl
    a3ba:	921b      	str	r2, [sp, #108]	; 0x6c
    a3bc:	9204      	str	r2, [sp, #16]
    a3be:	9300      	str	r3, [sp, #0]
    a3c0:	9501      	str	r5, [sp, #4]
    a3c2:	9b07      	ldr	r3, [sp, #28]
    a3c4:	464a      	mov	r2, r9
    a3c6:	f002 ff7f 	bl	d2c8 <_dtoa_r>
    a3ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a3cc:	9011      	str	r0, [sp, #68]	; 0x44
    a3ce:	2b67      	cmp	r3, #103	; 0x67
    a3d0:	d000      	beq.n	a3d4 <_svfprintf_r+0xf9c>
    a3d2:	e239      	b.n	a848 <_svfprintf_r+0x1410>
    a3d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a3d6:	4698      	mov	r8, r3
    a3d8:	44a8      	add	r8, r5
    a3da:	07e3      	lsls	r3, r4, #31
    a3dc:	d400      	bmi.n	a3e0 <_svfprintf_r+0xfa8>
    a3de:	e28b      	b.n	a8f8 <_svfprintf_r+0x14c0>
    a3e0:	2300      	movs	r3, #0
    a3e2:	2200      	movs	r2, #0
    a3e4:	4648      	mov	r0, r9
    a3e6:	9907      	ldr	r1, [sp, #28]
    a3e8:	f7fe f872 	bl	84d0 <__aeabi_dcmpeq>
    a3ec:	4643      	mov	r3, r8
    a3ee:	2800      	cmp	r0, #0
    a3f0:	d10a      	bne.n	a408 <_svfprintf_r+0xfd0>
    a3f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a3f4:	4543      	cmp	r3, r8
    a3f6:	d207      	bcs.n	a408 <_svfprintf_r+0xfd0>
    a3f8:	2130      	movs	r1, #48	; 0x30
    a3fa:	4640      	mov	r0, r8
    a3fc:	1c5a      	adds	r2, r3, #1
    a3fe:	9223      	str	r2, [sp, #140]	; 0x8c
    a400:	7019      	strb	r1, [r3, #0]
    a402:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a404:	4298      	cmp	r0, r3
    a406:	d8f9      	bhi.n	a3fc <_svfprintf_r+0xfc4>
    a408:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a40a:	1a9b      	subs	r3, r3, r2
    a40c:	9314      	str	r3, [sp, #80]	; 0x50
    a40e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a410:	2b47      	cmp	r3, #71	; 0x47
    a412:	d100      	bne.n	a416 <_svfprintf_r+0xfde>
    a414:	e0f6      	b.n	a604 <_svfprintf_r+0x11cc>
    a416:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a418:	2b65      	cmp	r3, #101	; 0x65
    a41a:	dc00      	bgt.n	a41e <_svfprintf_r+0xfe6>
    a41c:	e226      	b.n	a86c <_svfprintf_r+0x1434>
    a41e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a420:	2b66      	cmp	r3, #102	; 0x66
    a422:	d100      	bne.n	a426 <_svfprintf_r+0xfee>
    a424:	e1f4      	b.n	a810 <_svfprintf_r+0x13d8>
    a426:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a428:	9313      	str	r3, [sp, #76]	; 0x4c
    a42a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a42c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a42e:	0019      	movs	r1, r3
    a430:	4291      	cmp	r1, r2
    a432:	dd00      	ble.n	a436 <_svfprintf_r+0xffe>
    a434:	e1d4      	b.n	a7e0 <_svfprintf_r+0x13a8>
    a436:	07e3      	lsls	r3, r4, #31
    a438:	d500      	bpl.n	a43c <_svfprintf_r+0x1004>
    a43a:	e249      	b.n	a8d0 <_svfprintf_r+0x1498>
    a43c:	43d3      	mvns	r3, r2
    a43e:	17db      	asrs	r3, r3, #31
    a440:	0011      	movs	r1, r2
    a442:	401a      	ands	r2, r3
    a444:	2367      	movs	r3, #103	; 0x67
    a446:	9207      	str	r2, [sp, #28]
    a448:	910e      	str	r1, [sp, #56]	; 0x38
    a44a:	9312      	str	r3, [sp, #72]	; 0x48
    a44c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a44e:	2b00      	cmp	r3, #0
    a450:	d000      	beq.n	a454 <_svfprintf_r+0x101c>
    a452:	e0cf      	b.n	a5f4 <_svfprintf_r+0x11bc>
    a454:	ab16      	add	r3, sp, #88	; 0x58
    a456:	7fdb      	ldrb	r3, [r3, #31]
    a458:	4698      	mov	r8, r3
    a45a:	2300      	movs	r3, #0
    a45c:	469a      	mov	sl, r3
    a45e:	f7ff f903 	bl	9668 <_svfprintf_r+0x230>
    a462:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a464:	990a      	ldr	r1, [sp, #40]	; 0x28
    a466:	6813      	ldr	r3, [r2, #0]
    a468:	6019      	str	r1, [r3, #0]
    a46a:	0013      	movs	r3, r2
    a46c:	3304      	adds	r3, #4
    a46e:	930f      	str	r3, [sp, #60]	; 0x3c
    a470:	f7ff f80d 	bl	948e <_svfprintf_r+0x56>
    a474:	003a      	movs	r2, r7
    a476:	9906      	ldr	r1, [sp, #24]
    a478:	9809      	ldr	r0, [sp, #36]	; 0x24
    a47a:	f007 f865 	bl	11548 <__ssprint_r>
    a47e:	2800      	cmp	r0, #0
    a480:	d001      	beq.n	a486 <_svfprintf_r+0x104e>
    a482:	f7ff f860 	bl	9546 <_svfprintf_r+0x10e>
    a486:	ae32      	add	r6, sp, #200	; 0xc8
    a488:	e48e      	b.n	9da8 <_svfprintf_r+0x970>
    a48a:	4bde      	ldr	r3, [pc, #888]	; (a804 <_svfprintf_r+0x13cc>)
    a48c:	3401      	adds	r4, #1
    a48e:	6033      	str	r3, [r6, #0]
    a490:	2301      	movs	r3, #1
    a492:	6073      	str	r3, [r6, #4]
    a494:	687b      	ldr	r3, [r7, #4]
    a496:	60bc      	str	r4, [r7, #8]
    a498:	3301      	adds	r3, #1
    a49a:	607b      	str	r3, [r7, #4]
    a49c:	2b07      	cmp	r3, #7
    a49e:	dc7a      	bgt.n	a596 <_svfprintf_r+0x115e>
    a4a0:	3608      	adds	r6, #8
    a4a2:	2800      	cmp	r0, #0
    a4a4:	d107      	bne.n	a4b6 <_svfprintf_r+0x107e>
    a4a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a4a8:	2b00      	cmp	r3, #0
    a4aa:	d104      	bne.n	a4b6 <_svfprintf_r+0x107e>
    a4ac:	9b08      	ldr	r3, [sp, #32]
    a4ae:	07db      	lsls	r3, r3, #31
    a4b0:	d401      	bmi.n	a4b6 <_svfprintf_r+0x107e>
    a4b2:	f7ff fbb7 	bl	9c24 <_svfprintf_r+0x7ec>
    a4b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    a4b8:	6033      	str	r3, [r6, #0]
    a4ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a4bc:	1919      	adds	r1, r3, r4
    a4be:	6073      	str	r3, [r6, #4]
    a4c0:	687b      	ldr	r3, [r7, #4]
    a4c2:	60b9      	str	r1, [r7, #8]
    a4c4:	3301      	adds	r3, #1
    a4c6:	607b      	str	r3, [r7, #4]
    a4c8:	2b07      	cmp	r3, #7
    a4ca:	dd00      	ble.n	a4ce <_svfprintf_r+0x1096>
    a4cc:	e1f2      	b.n	a8b4 <_svfprintf_r+0x147c>
    a4ce:	0032      	movs	r2, r6
    a4d0:	3208      	adds	r2, #8
    a4d2:	2800      	cmp	r0, #0
    a4d4:	da00      	bge.n	a4d8 <_svfprintf_r+0x10a0>
    a4d6:	e1cc      	b.n	a872 <_svfprintf_r+0x143a>
    a4d8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a4da:	3301      	adds	r3, #1
    a4dc:	6010      	str	r0, [r2, #0]
    a4de:	9814      	ldr	r0, [sp, #80]	; 0x50
    a4e0:	607b      	str	r3, [r7, #4]
    a4e2:	1844      	adds	r4, r0, r1
    a4e4:	6050      	str	r0, [r2, #4]
    a4e6:	60bc      	str	r4, [r7, #8]
    a4e8:	2b07      	cmp	r3, #7
    a4ea:	dd00      	ble.n	a4ee <_svfprintf_r+0x10b6>
    a4ec:	e437      	b.n	9d5e <_svfprintf_r+0x926>
    a4ee:	3208      	adds	r2, #8
    a4f0:	0016      	movs	r6, r2
    a4f2:	f7ff fb97 	bl	9c24 <_svfprintf_r+0x7ec>
    a4f6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    a4f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a4fa:	680b      	ldr	r3, [r1, #0]
    a4fc:	601a      	str	r2, [r3, #0]
    a4fe:	17d2      	asrs	r2, r2, #31
    a500:	605a      	str	r2, [r3, #4]
    a502:	000b      	movs	r3, r1
    a504:	3304      	adds	r3, #4
    a506:	930f      	str	r3, [sp, #60]	; 0x3c
    a508:	f7fe ffc1 	bl	948e <_svfprintf_r+0x56>
    a50c:	464b      	mov	r3, r9
    a50e:	3101      	adds	r1, #1
    a510:	431c      	orrs	r4, r3
    a512:	780b      	ldrb	r3, [r1, #0]
    a514:	f7fe fff4 	bl	9500 <_svfprintf_r+0xc8>
    a518:	4bbb      	ldr	r3, [pc, #748]	; (a808 <_svfprintf_r+0x13d0>)
    a51a:	9311      	str	r3, [sp, #68]	; 0x44
    a51c:	f7ff f937 	bl	978e <_svfprintf_r+0x356>
    a520:	003a      	movs	r2, r7
    a522:	9906      	ldr	r1, [sp, #24]
    a524:	9809      	ldr	r0, [sp, #36]	; 0x24
    a526:	f007 f80f 	bl	11548 <__ssprint_r>
    a52a:	2800      	cmp	r0, #0
    a52c:	d001      	beq.n	a532 <_svfprintf_r+0x10fa>
    a52e:	f7ff f80a 	bl	9546 <_svfprintf_r+0x10e>
    a532:	68bc      	ldr	r4, [r7, #8]
    a534:	ae32      	add	r6, sp, #200	; 0xc8
    a536:	e5f1      	b.n	a11c <_svfprintf_r+0xce4>
    a538:	2140      	movs	r1, #64	; 0x40
    a53a:	9809      	ldr	r0, [sp, #36]	; 0x24
    a53c:	f004 fb8c 	bl	ec58 <_malloc_r>
    a540:	9b06      	ldr	r3, [sp, #24]
    a542:	6018      	str	r0, [r3, #0]
    a544:	6118      	str	r0, [r3, #16]
    a546:	2800      	cmp	r0, #0
    a548:	d100      	bne.n	a54c <_svfprintf_r+0x1114>
    a54a:	e24f      	b.n	a9ec <_svfprintf_r+0x15b4>
    a54c:	2340      	movs	r3, #64	; 0x40
    a54e:	9a06      	ldr	r2, [sp, #24]
    a550:	6153      	str	r3, [r2, #20]
    a552:	f7fe ff8e 	bl	9472 <_svfprintf_r+0x3a>
    a556:	ab23      	add	r3, sp, #140	; 0x8c
    a558:	931b      	str	r3, [sp, #108]	; 0x6c
    a55a:	9304      	str	r3, [sp, #16]
    a55c:	ab20      	add	r3, sp, #128	; 0x80
    a55e:	9303      	str	r3, [sp, #12]
    a560:	ab1f      	add	r3, sp, #124	; 0x7c
    a562:	9302      	str	r3, [sp, #8]
    a564:	4653      	mov	r3, sl
    a566:	9301      	str	r3, [sp, #4]
    a568:	2303      	movs	r3, #3
    a56a:	464a      	mov	r2, r9
    a56c:	9300      	str	r3, [sp, #0]
    a56e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a570:	9b07      	ldr	r3, [sp, #28]
    a572:	f002 fea9 	bl	d2c8 <_dtoa_r>
    a576:	4655      	mov	r5, sl
    a578:	9011      	str	r0, [sp, #68]	; 0x44
    a57a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a57c:	4698      	mov	r8, r3
    a57e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a580:	44a8      	add	r8, r5
    a582:	2b46      	cmp	r3, #70	; 0x46
    a584:	d000      	beq.n	a588 <_svfprintf_r+0x1150>
    a586:	e72b      	b.n	a3e0 <_svfprintf_r+0xfa8>
    a588:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a58a:	781b      	ldrb	r3, [r3, #0]
    a58c:	2b30      	cmp	r3, #48	; 0x30
    a58e:	d016      	beq.n	a5be <_svfprintf_r+0x1186>
    a590:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a592:	4498      	add	r8, r3
    a594:	e724      	b.n	a3e0 <_svfprintf_r+0xfa8>
    a596:	003a      	movs	r2, r7
    a598:	9906      	ldr	r1, [sp, #24]
    a59a:	9809      	ldr	r0, [sp, #36]	; 0x24
    a59c:	f006 ffd4 	bl	11548 <__ssprint_r>
    a5a0:	2800      	cmp	r0, #0
    a5a2:	d001      	beq.n	a5a8 <_svfprintf_r+0x1170>
    a5a4:	f7fe ffcf 	bl	9546 <_svfprintf_r+0x10e>
    a5a8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a5aa:	68bc      	ldr	r4, [r7, #8]
    a5ac:	ae32      	add	r6, sp, #200	; 0xc8
    a5ae:	e778      	b.n	a4a2 <_svfprintf_r+0x106a>
    a5b0:	4653      	mov	r3, sl
    a5b2:	2b00      	cmp	r3, #0
    a5b4:	d000      	beq.n	a5b8 <_svfprintf_r+0x1180>
    a5b6:	e6de      	b.n	a376 <_svfprintf_r+0xf3e>
    a5b8:	3301      	adds	r3, #1
    a5ba:	469a      	mov	sl, r3
    a5bc:	e6db      	b.n	a376 <_svfprintf_r+0xf3e>
    a5be:	2200      	movs	r2, #0
    a5c0:	2300      	movs	r3, #0
    a5c2:	4648      	mov	r0, r9
    a5c4:	9907      	ldr	r1, [sp, #28]
    a5c6:	f7fd ff83 	bl	84d0 <__aeabi_dcmpeq>
    a5ca:	2800      	cmp	r0, #0
    a5cc:	d1e0      	bne.n	a590 <_svfprintf_r+0x1158>
    a5ce:	2301      	movs	r3, #1
    a5d0:	1b5b      	subs	r3, r3, r5
    a5d2:	931f      	str	r3, [sp, #124]	; 0x7c
    a5d4:	4498      	add	r8, r3
    a5d6:	e703      	b.n	a3e0 <_svfprintf_r+0xfa8>
    a5d8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a5da:	ab32      	add	r3, sp, #200	; 0xc8
    a5dc:	1a9b      	subs	r3, r3, r2
    a5de:	930e      	str	r3, [sp, #56]	; 0x38
    a5e0:	f7ff f83a 	bl	9658 <_svfprintf_r+0x220>
    a5e4:	9811      	ldr	r0, [sp, #68]	; 0x44
    a5e6:	f7fe fbe5 	bl	8db4 <strlen>
    a5ea:	0002      	movs	r2, r0
    a5ec:	900e      	str	r0, [sp, #56]	; 0x38
    a5ee:	0003      	movs	r3, r0
    a5f0:	f7ff f9cd 	bl	998e <_svfprintf_r+0x556>
    a5f4:	232d      	movs	r3, #45	; 0x2d
    a5f6:	aa16      	add	r2, sp, #88	; 0x58
    a5f8:	77d3      	strb	r3, [r2, #31]
    a5fa:	4698      	mov	r8, r3
    a5fc:	2300      	movs	r3, #0
    a5fe:	469a      	mov	sl, r3
    a600:	f7ff f835 	bl	966e <_svfprintf_r+0x236>
    a604:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a606:	9313      	str	r3, [sp, #76]	; 0x4c
    a608:	1cda      	adds	r2, r3, #3
    a60a:	db02      	blt.n	a612 <_svfprintf_r+0x11da>
    a60c:	459a      	cmp	sl, r3
    a60e:	db00      	blt.n	a612 <_svfprintf_r+0x11da>
    a610:	e70b      	b.n	a42a <_svfprintf_r+0xff2>
    a612:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a614:	3b02      	subs	r3, #2
    a616:	9312      	str	r3, [sp, #72]	; 0x48
    a618:	222c      	movs	r2, #44	; 0x2c
    a61a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a61c:	2148      	movs	r1, #72	; 0x48
    a61e:	1e5d      	subs	r5, r3, #1
    a620:	ab16      	add	r3, sp, #88	; 0x58
    a622:	189b      	adds	r3, r3, r2
    a624:	466a      	mov	r2, sp
    a626:	1852      	adds	r2, r2, r1
    a628:	7812      	ldrb	r2, [r2, #0]
    a62a:	951f      	str	r5, [sp, #124]	; 0x7c
    a62c:	701a      	strb	r2, [r3, #0]
    a62e:	2d00      	cmp	r5, #0
    a630:	da00      	bge.n	a634 <_svfprintf_r+0x11fc>
    a632:	e1a4      	b.n	a97e <_svfprintf_r+0x1546>
    a634:	212d      	movs	r1, #45	; 0x2d
    a636:	232b      	movs	r3, #43	; 0x2b
    a638:	aa16      	add	r2, sp, #88	; 0x58
    a63a:	1852      	adds	r2, r2, r1
    a63c:	7013      	strb	r3, [r2, #0]
    a63e:	2d09      	cmp	r5, #9
    a640:	dc00      	bgt.n	a644 <_svfprintf_r+0x120c>
    a642:	e14c      	b.n	a8de <_svfprintf_r+0x14a6>
    a644:	aa16      	add	r2, sp, #88	; 0x58
    a646:	233b      	movs	r3, #59	; 0x3b
    a648:	4694      	mov	ip, r2
    a64a:	4463      	add	r3, ip
    a64c:	469a      	mov	sl, r3
    a64e:	46b1      	mov	r9, r6
    a650:	46a0      	mov	r8, r4
    a652:	4656      	mov	r6, sl
    a654:	e000      	b.n	a658 <_svfprintf_r+0x1220>
    a656:	0026      	movs	r6, r4
    a658:	0028      	movs	r0, r5
    a65a:	210a      	movs	r1, #10
    a65c:	f7fb fff6 	bl	664c <__aeabi_idivmod>
    a660:	1e74      	subs	r4, r6, #1
    a662:	3130      	adds	r1, #48	; 0x30
    a664:	7021      	strb	r1, [r4, #0]
    a666:	0028      	movs	r0, r5
    a668:	210a      	movs	r1, #10
    a66a:	f7fb ff09 	bl	6480 <__divsi3>
    a66e:	0005      	movs	r5, r0
    a670:	2809      	cmp	r0, #9
    a672:	dcf0      	bgt.n	a656 <_svfprintf_r+0x121e>
    a674:	0023      	movs	r3, r4
    a676:	4644      	mov	r4, r8
    a678:	46b0      	mov	r8, r6
    a67a:	464e      	mov	r6, r9
    a67c:	4699      	mov	r9, r3
    a67e:	0003      	movs	r3, r0
    a680:	3330      	adds	r3, #48	; 0x30
    a682:	b2d8      	uxtb	r0, r3
    a684:	4643      	mov	r3, r8
    a686:	3b02      	subs	r3, #2
    a688:	7018      	strb	r0, [r3, #0]
    a68a:	459a      	cmp	sl, r3
    a68c:	d800      	bhi.n	a690 <_svfprintf_r+0x1258>
    a68e:	e1b4      	b.n	a9fa <_svfprintf_r+0x15c2>
    a690:	4642      	mov	r2, r8
    a692:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    a694:	4645      	mov	r5, r8
    a696:	1a99      	subs	r1, r3, r2
    a698:	2301      	movs	r3, #1
    a69a:	3107      	adds	r1, #7
    a69c:	425b      	negs	r3, r3
    a69e:	e001      	b.n	a6a4 <_svfprintf_r+0x126c>
    a6a0:	5ce8      	ldrb	r0, [r5, r3]
    a6a2:	3301      	adds	r3, #1
    a6a4:	aa21      	add	r2, sp, #132	; 0x84
    a6a6:	18d2      	adds	r2, r2, r3
    a6a8:	70d0      	strb	r0, [r2, #3]
    a6aa:	428b      	cmp	r3, r1
    a6ac:	d1f8      	bne.n	a6a0 <_svfprintf_r+0x1268>
    a6ae:	a916      	add	r1, sp, #88	; 0x58
    a6b0:	468c      	mov	ip, r1
    a6b2:	222e      	movs	r2, #46	; 0x2e
    a6b4:	464b      	mov	r3, r9
    a6b6:	4462      	add	r2, ip
    a6b8:	4694      	mov	ip, r2
    a6ba:	1afb      	subs	r3, r7, r3
    a6bc:	4463      	add	r3, ip
    a6be:	aa21      	add	r2, sp, #132	; 0x84
    a6c0:	9914      	ldr	r1, [sp, #80]	; 0x50
    a6c2:	1a9b      	subs	r3, r3, r2
    a6c4:	469c      	mov	ip, r3
    a6c6:	000a      	movs	r2, r1
    a6c8:	4462      	add	r2, ip
    a6ca:	931a      	str	r3, [sp, #104]	; 0x68
    a6cc:	920e      	str	r2, [sp, #56]	; 0x38
    a6ce:	2901      	cmp	r1, #1
    a6d0:	dc00      	bgt.n	a6d4 <_svfprintf_r+0x129c>
    a6d2:	e145      	b.n	a960 <_svfprintf_r+0x1528>
    a6d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a6d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a6d8:	4694      	mov	ip, r2
    a6da:	4463      	add	r3, ip
    a6dc:	001a      	movs	r2, r3
    a6de:	930e      	str	r3, [sp, #56]	; 0x38
    a6e0:	43db      	mvns	r3, r3
    a6e2:	17db      	asrs	r3, r3, #31
    a6e4:	401a      	ands	r2, r3
    a6e6:	2300      	movs	r3, #0
    a6e8:	9207      	str	r2, [sp, #28]
    a6ea:	9313      	str	r3, [sp, #76]	; 0x4c
    a6ec:	e6ae      	b.n	a44c <_svfprintf_r+0x1014>
    a6ee:	2301      	movs	r3, #1
    a6f0:	425b      	negs	r3, r3
    a6f2:	930a      	str	r3, [sp, #40]	; 0x28
    a6f4:	f7fe ff2d 	bl	9552 <_svfprintf_r+0x11a>
    a6f8:	003a      	movs	r2, r7
    a6fa:	9906      	ldr	r1, [sp, #24]
    a6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    a6fe:	f006 ff23 	bl	11548 <__ssprint_r>
    a702:	2800      	cmp	r0, #0
    a704:	d001      	beq.n	a70a <_svfprintf_r+0x12d2>
    a706:	f7fe ff1e 	bl	9546 <_svfprintf_r+0x10e>
    a70a:	68bc      	ldr	r4, [r7, #8]
    a70c:	ae32      	add	r6, sp, #200	; 0xc8
    a70e:	e43c      	b.n	9f8a <_svfprintf_r+0xb52>
    a710:	003a      	movs	r2, r7
    a712:	9906      	ldr	r1, [sp, #24]
    a714:	9809      	ldr	r0, [sp, #36]	; 0x24
    a716:	f006 ff17 	bl	11548 <__ssprint_r>
    a71a:	2800      	cmp	r0, #0
    a71c:	d001      	beq.n	a722 <_svfprintf_r+0x12ea>
    a71e:	f7fe ff12 	bl	9546 <_svfprintf_r+0x10e>
    a722:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a724:	68bc      	ldr	r4, [r7, #8]
    a726:	ae32      	add	r6, sp, #200	; 0xc8
    a728:	e56a      	b.n	a200 <_svfprintf_r+0xdc8>
    a72a:	003a      	movs	r2, r7
    a72c:	9906      	ldr	r1, [sp, #24]
    a72e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a730:	f006 ff0a 	bl	11548 <__ssprint_r>
    a734:	2800      	cmp	r0, #0
    a736:	d001      	beq.n	a73c <_svfprintf_r+0x1304>
    a738:	f7fe ff05 	bl	9546 <_svfprintf_r+0x10e>
    a73c:	68bc      	ldr	r4, [r7, #8]
    a73e:	ae32      	add	r6, sp, #200	; 0xc8
    a740:	e557      	b.n	a1f2 <_svfprintf_r+0xdba>
    a742:	003a      	movs	r2, r7
    a744:	9906      	ldr	r1, [sp, #24]
    a746:	9809      	ldr	r0, [sp, #36]	; 0x24
    a748:	f006 fefe 	bl	11548 <__ssprint_r>
    a74c:	2800      	cmp	r0, #0
    a74e:	d001      	beq.n	a754 <_svfprintf_r+0x131c>
    a750:	f7fe fef9 	bl	9546 <_svfprintf_r+0x10e>
    a754:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a756:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a758:	68bc      	ldr	r4, [r7, #8]
    a75a:	1a9b      	subs	r3, r3, r2
    a75c:	ae32      	add	r6, sp, #200	; 0xc8
    a75e:	e56a      	b.n	a236 <_svfprintf_r+0xdfe>
    a760:	4653      	mov	r3, sl
    a762:	9307      	str	r3, [sp, #28]
    a764:	2b06      	cmp	r3, #6
    a766:	d901      	bls.n	a76c <_svfprintf_r+0x1334>
    a768:	2306      	movs	r3, #6
    a76a:	9307      	str	r3, [sp, #28]
    a76c:	9b07      	ldr	r3, [sp, #28]
    a76e:	950f      	str	r5, [sp, #60]	; 0x3c
    a770:	930e      	str	r3, [sp, #56]	; 0x38
    a772:	2300      	movs	r3, #0
    a774:	4698      	mov	r8, r3
    a776:	469a      	mov	sl, r3
    a778:	9313      	str	r3, [sp, #76]	; 0x4c
    a77a:	4b24      	ldr	r3, [pc, #144]	; (a80c <_svfprintf_r+0x13d4>)
    a77c:	9408      	str	r4, [sp, #32]
    a77e:	9311      	str	r3, [sp, #68]	; 0x44
    a780:	f7fe ff78 	bl	9674 <_svfprintf_r+0x23c>
    a784:	2320      	movs	r3, #32
    a786:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a788:	439a      	bics	r2, r3
    a78a:	3b1a      	subs	r3, #26
    a78c:	920e      	str	r2, [sp, #56]	; 0x38
    a78e:	469a      	mov	sl, r3
    a790:	e5f1      	b.n	a376 <_svfprintf_r+0xf3e>
    a792:	ab23      	add	r3, sp, #140	; 0x8c
    a794:	931b      	str	r3, [sp, #108]	; 0x6c
    a796:	9304      	str	r3, [sp, #16]
    a798:	ab20      	add	r3, sp, #128	; 0x80
    a79a:	9303      	str	r3, [sp, #12]
    a79c:	ab1f      	add	r3, sp, #124	; 0x7c
    a79e:	9302      	str	r3, [sp, #8]
    a7a0:	4653      	mov	r3, sl
    a7a2:	9301      	str	r3, [sp, #4]
    a7a4:	2303      	movs	r3, #3
    a7a6:	464a      	mov	r2, r9
    a7a8:	9300      	str	r3, [sp, #0]
    a7aa:	9809      	ldr	r0, [sp, #36]	; 0x24
    a7ac:	9b07      	ldr	r3, [sp, #28]
    a7ae:	f002 fd8b 	bl	d2c8 <_dtoa_r>
    a7b2:	0003      	movs	r3, r0
    a7b4:	4453      	add	r3, sl
    a7b6:	9011      	str	r0, [sp, #68]	; 0x44
    a7b8:	4698      	mov	r8, r3
    a7ba:	4655      	mov	r5, sl
    a7bc:	e6e4      	b.n	a588 <_svfprintf_r+0x1150>
    a7be:	232d      	movs	r3, #45	; 0x2d
    a7c0:	aa16      	add	r2, sp, #88	; 0x58
    a7c2:	77d3      	strb	r3, [r2, #31]
    a7c4:	4698      	mov	r8, r3
    a7c6:	f7fe ffdb 	bl	9780 <_svfprintf_r+0x348>
    a7ca:	2280      	movs	r2, #128	; 0x80
    a7cc:	0612      	lsls	r2, r2, #24
    a7ce:	4694      	mov	ip, r2
    a7d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a7d2:	4699      	mov	r9, r3
    a7d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a7d6:	4463      	add	r3, ip
    a7d8:	9307      	str	r3, [sp, #28]
    a7da:	232d      	movs	r3, #45	; 0x2d
    a7dc:	9310      	str	r3, [sp, #64]	; 0x40
    a7de:	e5d7      	b.n	a390 <_svfprintf_r+0xf58>
    a7e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a7e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a7e4:	4694      	mov	ip, r2
    a7e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a7e8:	4463      	add	r3, ip
    a7ea:	930e      	str	r3, [sp, #56]	; 0x38
    a7ec:	2a00      	cmp	r2, #0
    a7ee:	dc00      	bgt.n	a7f2 <_svfprintf_r+0x13ba>
    a7f0:	e0ce      	b.n	a990 <_svfprintf_r+0x1558>
    a7f2:	001a      	movs	r2, r3
    a7f4:	43db      	mvns	r3, r3
    a7f6:	17db      	asrs	r3, r3, #31
    a7f8:	401a      	ands	r2, r3
    a7fa:	2367      	movs	r3, #103	; 0x67
    a7fc:	9207      	str	r2, [sp, #28]
    a7fe:	9312      	str	r3, [sp, #72]	; 0x48
    a800:	e624      	b.n	a44c <_svfprintf_r+0x1014>
    a802:	46c0      	nop			; (mov r8, r8)
    a804:	0001529c 	.word	0x0001529c
    a808:	00015260 	.word	0x00015260
    a80c:	00015294 	.word	0x00015294
    a810:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a812:	9313      	str	r3, [sp, #76]	; 0x4c
    a814:	2b00      	cmp	r3, #0
    a816:	dc00      	bgt.n	a81a <_svfprintf_r+0x13e2>
    a818:	e0d5      	b.n	a9c6 <_svfprintf_r+0x158e>
    a81a:	4652      	mov	r2, sl
    a81c:	2a00      	cmp	r2, #0
    a81e:	d000      	beq.n	a822 <_svfprintf_r+0x13ea>
    a820:	e092      	b.n	a948 <_svfprintf_r+0x1510>
    a822:	07e2      	lsls	r2, r4, #31
    a824:	d500      	bpl.n	a828 <_svfprintf_r+0x13f0>
    a826:	e08f      	b.n	a948 <_svfprintf_r+0x1510>
    a828:	9307      	str	r3, [sp, #28]
    a82a:	930e      	str	r3, [sp, #56]	; 0x38
    a82c:	e60e      	b.n	a44c <_svfprintf_r+0x1014>
    a82e:	ab16      	add	r3, sp, #88	; 0x58
    a830:	7fdb      	ldrb	r3, [r3, #31]
    a832:	950f      	str	r5, [sp, #60]	; 0x3c
    a834:	4698      	mov	r8, r3
    a836:	4653      	mov	r3, sl
    a838:	9307      	str	r3, [sp, #28]
    a83a:	930e      	str	r3, [sp, #56]	; 0x38
    a83c:	2300      	movs	r3, #0
    a83e:	9408      	str	r4, [sp, #32]
    a840:	469a      	mov	sl, r3
    a842:	9313      	str	r3, [sp, #76]	; 0x4c
    a844:	f7fe ff10 	bl	9668 <_svfprintf_r+0x230>
    a848:	9b11      	ldr	r3, [sp, #68]	; 0x44
    a84a:	4698      	mov	r8, r3
    a84c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a84e:	44a8      	add	r8, r5
    a850:	2b47      	cmp	r3, #71	; 0x47
    a852:	d000      	beq.n	a856 <_svfprintf_r+0x141e>
    a854:	e5c4      	b.n	a3e0 <_svfprintf_r+0xfa8>
    a856:	07e3      	lsls	r3, r4, #31
    a858:	d500      	bpl.n	a85c <_svfprintf_r+0x1424>
    a85a:	e68e      	b.n	a57a <_svfprintf_r+0x1142>
    a85c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a85e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    a860:	1a9b      	subs	r3, r3, r2
    a862:	9314      	str	r3, [sp, #80]	; 0x50
    a864:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a866:	2b47      	cmp	r3, #71	; 0x47
    a868:	d100      	bne.n	a86c <_svfprintf_r+0x1434>
    a86a:	e6cb      	b.n	a604 <_svfprintf_r+0x11cc>
    a86c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    a86e:	9313      	str	r3, [sp, #76]	; 0x4c
    a870:	e6d2      	b.n	a618 <_svfprintf_r+0x11e0>
    a872:	4244      	negs	r4, r0
    a874:	3010      	adds	r0, #16
    a876:	db00      	blt.n	a87a <_svfprintf_r+0x1442>
    a878:	e0d0      	b.n	aa1c <_svfprintf_r+0x15e4>
    a87a:	486e      	ldr	r0, [pc, #440]	; (aa34 <_svfprintf_r+0x15fc>)
    a87c:	2610      	movs	r6, #16
    a87e:	0005      	movs	r5, r0
    a880:	e003      	b.n	a88a <_svfprintf_r+0x1452>
    a882:	3208      	adds	r2, #8
    a884:	3c10      	subs	r4, #16
    a886:	2c10      	cmp	r4, #16
    a888:	dd38      	ble.n	a8fc <_svfprintf_r+0x14c4>
    a88a:	3110      	adds	r1, #16
    a88c:	3301      	adds	r3, #1
    a88e:	6015      	str	r5, [r2, #0]
    a890:	6056      	str	r6, [r2, #4]
    a892:	60b9      	str	r1, [r7, #8]
    a894:	607b      	str	r3, [r7, #4]
    a896:	2b07      	cmp	r3, #7
    a898:	ddf3      	ble.n	a882 <_svfprintf_r+0x144a>
    a89a:	003a      	movs	r2, r7
    a89c:	9906      	ldr	r1, [sp, #24]
    a89e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a8a0:	f006 fe52 	bl	11548 <__ssprint_r>
    a8a4:	2800      	cmp	r0, #0
    a8a6:	d001      	beq.n	a8ac <_svfprintf_r+0x1474>
    a8a8:	f7fe fe4d 	bl	9546 <_svfprintf_r+0x10e>
    a8ac:	68b9      	ldr	r1, [r7, #8]
    a8ae:	687b      	ldr	r3, [r7, #4]
    a8b0:	aa32      	add	r2, sp, #200	; 0xc8
    a8b2:	e7e7      	b.n	a884 <_svfprintf_r+0x144c>
    a8b4:	003a      	movs	r2, r7
    a8b6:	9906      	ldr	r1, [sp, #24]
    a8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    a8ba:	f006 fe45 	bl	11548 <__ssprint_r>
    a8be:	2800      	cmp	r0, #0
    a8c0:	d001      	beq.n	a8c6 <_svfprintf_r+0x148e>
    a8c2:	f7fe fe40 	bl	9546 <_svfprintf_r+0x10e>
    a8c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    a8c8:	68b9      	ldr	r1, [r7, #8]
    a8ca:	687b      	ldr	r3, [r7, #4]
    a8cc:	aa32      	add	r2, sp, #200	; 0xc8
    a8ce:	e600      	b.n	a4d2 <_svfprintf_r+0x109a>
    a8d0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a8d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a8d4:	4694      	mov	ip, r2
    a8d6:	4463      	add	r3, ip
    a8d8:	001a      	movs	r2, r3
    a8da:	930e      	str	r3, [sp, #56]	; 0x38
    a8dc:	e78a      	b.n	a7f4 <_svfprintf_r+0x13bc>
    a8de:	212e      	movs	r1, #46	; 0x2e
    a8e0:	2330      	movs	r3, #48	; 0x30
    a8e2:	aa16      	add	r2, sp, #88	; 0x58
    a8e4:	1852      	adds	r2, r2, r1
    a8e6:	7013      	strb	r3, [r2, #0]
    a8e8:	002b      	movs	r3, r5
    a8ea:	aa16      	add	r2, sp, #88	; 0x58
    a8ec:	3101      	adds	r1, #1
    a8ee:	3330      	adds	r3, #48	; 0x30
    a8f0:	1852      	adds	r2, r2, r1
    a8f2:	7013      	strb	r3, [r2, #0]
    a8f4:	ab22      	add	r3, sp, #136	; 0x88
    a8f6:	e6e2      	b.n	a6be <_svfprintf_r+0x1286>
    a8f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a8fa:	e585      	b.n	a408 <_svfprintf_r+0xfd0>
    a8fc:	46a9      	mov	r9, r5
    a8fe:	4648      	mov	r0, r9
    a900:	1909      	adds	r1, r1, r4
    a902:	3301      	adds	r3, #1
    a904:	6010      	str	r0, [r2, #0]
    a906:	6054      	str	r4, [r2, #4]
    a908:	60b9      	str	r1, [r7, #8]
    a90a:	3208      	adds	r2, #8
    a90c:	607b      	str	r3, [r7, #4]
    a90e:	2b07      	cmp	r3, #7
    a910:	dc00      	bgt.n	a914 <_svfprintf_r+0x14dc>
    a912:	e5e1      	b.n	a4d8 <_svfprintf_r+0x10a0>
    a914:	003a      	movs	r2, r7
    a916:	9906      	ldr	r1, [sp, #24]
    a918:	9809      	ldr	r0, [sp, #36]	; 0x24
    a91a:	f006 fe15 	bl	11548 <__ssprint_r>
    a91e:	2800      	cmp	r0, #0
    a920:	d001      	beq.n	a926 <_svfprintf_r+0x14ee>
    a922:	f7fe fe10 	bl	9546 <_svfprintf_r+0x10e>
    a926:	68b9      	ldr	r1, [r7, #8]
    a928:	687b      	ldr	r3, [r7, #4]
    a92a:	aa32      	add	r2, sp, #200	; 0xc8
    a92c:	e5d4      	b.n	a4d8 <_svfprintf_r+0x10a0>
    a92e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a930:	2b00      	cmp	r3, #0
    a932:	db38      	blt.n	a9a6 <_svfprintf_r+0x156e>
    a934:	ab16      	add	r3, sp, #88	; 0x58
    a936:	7fdb      	ldrb	r3, [r3, #31]
    a938:	4698      	mov	r8, r3
    a93a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a93c:	2b47      	cmp	r3, #71	; 0x47
    a93e:	dc2e      	bgt.n	a99e <_svfprintf_r+0x1566>
    a940:	4b3d      	ldr	r3, [pc, #244]	; (aa38 <_svfprintf_r+0x1600>)
    a942:	9311      	str	r3, [sp, #68]	; 0x44
    a944:	f7fe ff23 	bl	978e <_svfprintf_r+0x356>
    a948:	9a18      	ldr	r2, [sp, #96]	; 0x60
    a94a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a94c:	4694      	mov	ip, r2
    a94e:	4463      	add	r3, ip
    a950:	4453      	add	r3, sl
    a952:	001a      	movs	r2, r3
    a954:	930e      	str	r3, [sp, #56]	; 0x38
    a956:	43db      	mvns	r3, r3
    a958:	17db      	asrs	r3, r3, #31
    a95a:	401a      	ands	r2, r3
    a95c:	9207      	str	r2, [sp, #28]
    a95e:	e575      	b.n	a44c <_svfprintf_r+0x1014>
    a960:	2301      	movs	r3, #1
    a962:	4023      	ands	r3, r4
    a964:	9313      	str	r3, [sp, #76]	; 0x4c
    a966:	d000      	beq.n	a96a <_svfprintf_r+0x1532>
    a968:	e6b4      	b.n	a6d4 <_svfprintf_r+0x129c>
    a96a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a96c:	43d3      	mvns	r3, r2
    a96e:	17db      	asrs	r3, r3, #31
    a970:	401a      	ands	r2, r3
    a972:	9207      	str	r2, [sp, #28]
    a974:	e56a      	b.n	a44c <_svfprintf_r+0x1014>
    a976:	4a2f      	ldr	r2, [pc, #188]	; (aa34 <_svfprintf_r+0x15fc>)
    a978:	687b      	ldr	r3, [r7, #4]
    a97a:	4691      	mov	r9, r2
    a97c:	e42d      	b.n	a1da <_svfprintf_r+0xda2>
    a97e:	2301      	movs	r3, #1
    a980:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a982:	391b      	subs	r1, #27
    a984:	1a9d      	subs	r5, r3, r2
    a986:	aa16      	add	r2, sp, #88	; 0x58
    a988:	332c      	adds	r3, #44	; 0x2c
    a98a:	1852      	adds	r2, r2, r1
    a98c:	7013      	strb	r3, [r2, #0]
    a98e:	e656      	b.n	a63e <_svfprintf_r+0x1206>
    a990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a992:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    a994:	1a98      	subs	r0, r3, r2
    a996:	1c43      	adds	r3, r0, #1
    a998:	001a      	movs	r2, r3
    a99a:	930e      	str	r3, [sp, #56]	; 0x38
    a99c:	e72a      	b.n	a7f4 <_svfprintf_r+0x13bc>
    a99e:	4b27      	ldr	r3, [pc, #156]	; (aa3c <_svfprintf_r+0x1604>)
    a9a0:	9311      	str	r3, [sp, #68]	; 0x44
    a9a2:	f7fe fef4 	bl	978e <_svfprintf_r+0x356>
    a9a6:	232d      	movs	r3, #45	; 0x2d
    a9a8:	aa16      	add	r2, sp, #88	; 0x58
    a9aa:	77d3      	strb	r3, [r2, #31]
    a9ac:	4698      	mov	r8, r3
    a9ae:	e7c4      	b.n	a93a <_svfprintf_r+0x1502>
    a9b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a9b2:	1d1a      	adds	r2, r3, #4
    a9b4:	681b      	ldr	r3, [r3, #0]
    a9b6:	469a      	mov	sl, r3
    a9b8:	2b00      	cmp	r3, #0
    a9ba:	db36      	blt.n	aa2a <_svfprintf_r+0x15f2>
    a9bc:	784b      	ldrb	r3, [r1, #1]
    a9be:	920f      	str	r2, [sp, #60]	; 0x3c
    a9c0:	4659      	mov	r1, fp
    a9c2:	f7fe fd9d 	bl	9500 <_svfprintf_r+0xc8>
    a9c6:	4653      	mov	r3, sl
    a9c8:	2b00      	cmp	r3, #0
    a9ca:	d101      	bne.n	a9d0 <_svfprintf_r+0x1598>
    a9cc:	07e3      	lsls	r3, r4, #31
    a9ce:	d503      	bpl.n	a9d8 <_svfprintf_r+0x15a0>
    a9d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    a9d2:	1c58      	adds	r0, r3, #1
    a9d4:	0003      	movs	r3, r0
    a9d6:	e7bb      	b.n	a950 <_svfprintf_r+0x1518>
    a9d8:	2301      	movs	r3, #1
    a9da:	e725      	b.n	a828 <_svfprintf_r+0x13f0>
    a9dc:	ab16      	add	r3, sp, #88	; 0x58
    a9de:	77d8      	strb	r0, [r3, #31]
    a9e0:	f7fe ff6c 	bl	98bc <_svfprintf_r+0x484>
    a9e4:	ab16      	add	r3, sp, #88	; 0x58
    a9e6:	77d8      	strb	r0, [r3, #31]
    a9e8:	f7ff f814 	bl	9a14 <_svfprintf_r+0x5dc>
    a9ec:	230c      	movs	r3, #12
    a9ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a9f0:	6013      	str	r3, [r2, #0]
    a9f2:	3b0d      	subs	r3, #13
    a9f4:	930a      	str	r3, [sp, #40]	; 0x28
    a9f6:	f7fe fdac 	bl	9552 <_svfprintf_r+0x11a>
    a9fa:	aa16      	add	r2, sp, #88	; 0x58
    a9fc:	232e      	movs	r3, #46	; 0x2e
    a9fe:	4694      	mov	ip, r2
    aa00:	4463      	add	r3, ip
    aa02:	e65c      	b.n	a6be <_svfprintf_r+0x1286>
    aa04:	ab16      	add	r3, sp, #88	; 0x58
    aa06:	77d8      	strb	r0, [r3, #31]
    aa08:	f7fe fe85 	bl	9716 <_svfprintf_r+0x2de>
    aa0c:	ab16      	add	r3, sp, #88	; 0x58
    aa0e:	77d8      	strb	r0, [r3, #31]
    aa10:	f7fe fddd 	bl	95ce <_svfprintf_r+0x196>
    aa14:	ab16      	add	r3, sp, #88	; 0x58
    aa16:	77d8      	strb	r0, [r3, #31]
    aa18:	f7ff f87d 	bl	9b16 <_svfprintf_r+0x6de>
    aa1c:	4805      	ldr	r0, [pc, #20]	; (aa34 <_svfprintf_r+0x15fc>)
    aa1e:	4681      	mov	r9, r0
    aa20:	e76d      	b.n	a8fe <_svfprintf_r+0x14c6>
    aa22:	ab16      	add	r3, sp, #88	; 0x58
    aa24:	77d8      	strb	r0, [r3, #31]
    aa26:	f7fe ff79 	bl	991c <_svfprintf_r+0x4e4>
    aa2a:	2301      	movs	r3, #1
    aa2c:	425b      	negs	r3, r3
    aa2e:	469a      	mov	sl, r3
    aa30:	e7c4      	b.n	a9bc <_svfprintf_r+0x1584>
    aa32:	46c0      	nop			; (mov r8, r8)
    aa34:	000152b0 	.word	0x000152b0
    aa38:	00015264 	.word	0x00015264
    aa3c:	00015268 	.word	0x00015268

0000aa40 <__ssvfscanf_r>:
    aa40:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa42:	464e      	mov	r6, r9
    aa44:	4645      	mov	r5, r8
    aa46:	46de      	mov	lr, fp
    aa48:	4657      	mov	r7, sl
    aa4a:	b5e0      	push	{r5, r6, r7, lr}
    aa4c:	4cce      	ldr	r4, [pc, #824]	; (ad88 <__ssvfscanf_r+0x348>)
    aa4e:	000e      	movs	r6, r1
    aa50:	44a5      	add	sp, r4
    aa52:	9307      	str	r3, [sp, #28]
    aa54:	230c      	movs	r3, #12
    aa56:	5ec9      	ldrsh	r1, [r1, r3]
    aa58:	2380      	movs	r3, #128	; 0x80
    aa5a:	019b      	lsls	r3, r3, #6
    aa5c:	4680      	mov	r8, r0
    aa5e:	4219      	tst	r1, r3
    aa60:	d105      	bne.n	aa6e <__ssvfscanf_r+0x2e>
    aa62:	430b      	orrs	r3, r1
    aa64:	81b3      	strh	r3, [r6, #12]
    aa66:	6e71      	ldr	r1, [r6, #100]	; 0x64
    aa68:	4bc8      	ldr	r3, [pc, #800]	; (ad8c <__ssvfscanf_r+0x34c>)
    aa6a:	400b      	ands	r3, r1
    aa6c:	6673      	str	r3, [r6, #100]	; 0x64
    aa6e:	2300      	movs	r3, #0
    aa70:	0014      	movs	r4, r2
    aa72:	9309      	str	r3, [sp, #36]	; 0x24
    aa74:	9305      	str	r3, [sp, #20]
    aa76:	9308      	str	r3, [sp, #32]
    aa78:	7823      	ldrb	r3, [r4, #0]
    aa7a:	1c62      	adds	r2, r4, #1
    aa7c:	2700      	movs	r7, #0
    aa7e:	9311      	str	r3, [sp, #68]	; 0x44
    aa80:	4692      	mov	sl, r2
    aa82:	2b00      	cmp	r3, #0
    aa84:	d029      	beq.n	aada <__ssvfscanf_r+0x9a>
    aa86:	f004 f835 	bl	eaf4 <__locale_ctype_ptr>
    aa8a:	2508      	movs	r5, #8
    aa8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    aa8e:	18c0      	adds	r0, r0, r3
    aa90:	7842      	ldrb	r2, [r0, #1]
    aa92:	4015      	ands	r5, r2
    aa94:	d02b      	beq.n	aaee <__ssvfscanf_r+0xae>
    aa96:	6873      	ldr	r3, [r6, #4]
    aa98:	2408      	movs	r4, #8
    aa9a:	4645      	mov	r5, r8
    aa9c:	e00d      	b.n	aaba <__ssvfscanf_r+0x7a>
    aa9e:	f004 f829 	bl	eaf4 <__locale_ctype_ptr>
    aaa2:	6832      	ldr	r2, [r6, #0]
    aaa4:	7813      	ldrb	r3, [r2, #0]
    aaa6:	18c0      	adds	r0, r0, r3
    aaa8:	7843      	ldrb	r3, [r0, #1]
    aaaa:	421c      	tst	r4, r3
    aaac:	d00d      	beq.n	aaca <__ssvfscanf_r+0x8a>
    aaae:	6873      	ldr	r3, [r6, #4]
    aab0:	3201      	adds	r2, #1
    aab2:	3b01      	subs	r3, #1
    aab4:	3701      	adds	r7, #1
    aab6:	6073      	str	r3, [r6, #4]
    aab8:	6032      	str	r2, [r6, #0]
    aaba:	2b00      	cmp	r3, #0
    aabc:	dcef      	bgt.n	aa9e <__ssvfscanf_r+0x5e>
    aabe:	0031      	movs	r1, r6
    aac0:	0028      	movs	r0, r5
    aac2:	f006 fe13 	bl	116ec <__ssrefill_r>
    aac6:	2800      	cmp	r0, #0
    aac8:	d0e9      	beq.n	aa9e <__ssvfscanf_r+0x5e>
    aaca:	46a8      	mov	r8, r5
    aacc:	4654      	mov	r4, sl
    aace:	7823      	ldrb	r3, [r4, #0]
    aad0:	1c62      	adds	r2, r4, #1
    aad2:	9311      	str	r3, [sp, #68]	; 0x44
    aad4:	4692      	mov	sl, r2
    aad6:	2b00      	cmp	r3, #0
    aad8:	d1d5      	bne.n	aa86 <__ssvfscanf_r+0x46>
    aada:	9808      	ldr	r0, [sp, #32]
    aadc:	23ad      	movs	r3, #173	; 0xad
    aade:	009b      	lsls	r3, r3, #2
    aae0:	449d      	add	sp, r3
    aae2:	bc3c      	pop	{r2, r3, r4, r5}
    aae4:	4690      	mov	r8, r2
    aae6:	4699      	mov	r9, r3
    aae8:	46a2      	mov	sl, r4
    aaea:	46ab      	mov	fp, r5
    aaec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aaee:	2b25      	cmp	r3, #37	; 0x25
    aaf0:	d116      	bne.n	ab20 <__ssvfscanf_r+0xe0>
    aaf2:	7863      	ldrb	r3, [r4, #1]
    aaf4:	2400      	movs	r4, #0
    aaf6:	469b      	mov	fp, r3
    aaf8:	2300      	movs	r3, #0
    aafa:	4699      	mov	r9, r3
    aafc:	3301      	adds	r3, #1
    aafe:	9304      	str	r3, [sp, #16]
    ab00:	2004      	movs	r0, #4
    ab02:	465b      	mov	r3, fp
    ab04:	2202      	movs	r2, #2
    ab06:	46a3      	mov	fp, r4
    ab08:	4654      	mov	r4, sl
    ab0a:	3401      	adds	r4, #1
    ab0c:	9403      	str	r4, [sp, #12]
    ab0e:	2b78      	cmp	r3, #120	; 0x78
    ab10:	d900      	bls.n	ab14 <__ssvfscanf_r+0xd4>
    ab12:	e0d5      	b.n	acc0 <__ssvfscanf_r+0x280>
    ab14:	499e      	ldr	r1, [pc, #632]	; (ad90 <__ssvfscanf_r+0x350>)
    ab16:	009c      	lsls	r4, r3, #2
    ab18:	590c      	ldr	r4, [r1, r4]
    ab1a:	46a7      	mov	pc, r4
    ab1c:	9b03      	ldr	r3, [sp, #12]
    ab1e:	469a      	mov	sl, r3
    ab20:	6873      	ldr	r3, [r6, #4]
    ab22:	2b00      	cmp	r3, #0
    ab24:	dc01      	bgt.n	ab2a <__ssvfscanf_r+0xea>
    ab26:	f000 fd64 	bl	b5f2 <__ssvfscanf_r+0xbb2>
    ab2a:	4652      	mov	r2, sl
    ab2c:	6833      	ldr	r3, [r6, #0]
    ab2e:	3a01      	subs	r2, #1
    ab30:	7811      	ldrb	r1, [r2, #0]
    ab32:	781a      	ldrb	r2, [r3, #0]
    ab34:	4291      	cmp	r1, r2
    ab36:	d1d0      	bne.n	aada <__ssvfscanf_r+0x9a>
    ab38:	6872      	ldr	r2, [r6, #4]
    ab3a:	3301      	adds	r3, #1
    ab3c:	3a01      	subs	r2, #1
    ab3e:	6072      	str	r2, [r6, #4]
    ab40:	6033      	str	r3, [r6, #0]
    ab42:	3701      	adds	r7, #1
    ab44:	4654      	mov	r4, sl
    ab46:	e7c2      	b.n	aace <__ssvfscanf_r+0x8e>
    ab48:	4655      	mov	r5, sl
    ab4a:	1c83      	adds	r3, r0, #2
    ab4c:	d001      	beq.n	ab52 <__ssvfscanf_r+0x112>
    ab4e:	f000 fe1a 	bl	b786 <__ssvfscanf_r+0xd46>
    ab52:	6873      	ldr	r3, [r6, #4]
    ab54:	2b00      	cmp	r3, #0
    ab56:	dd01      	ble.n	ab5c <__ssvfscanf_r+0x11c>
    ab58:	f000 fc2a 	bl	b3b0 <__ssvfscanf_r+0x970>
    ab5c:	0031      	movs	r1, r6
    ab5e:	4640      	mov	r0, r8
    ab60:	f006 fdc4 	bl	116ec <__ssrefill_r>
    ab64:	2800      	cmp	r0, #0
    ab66:	d101      	bne.n	ab6c <__ssvfscanf_r+0x12c>
    ab68:	f000 fc22 	bl	b3b0 <__ssvfscanf_r+0x970>
    ab6c:	2d00      	cmp	r5, #0
    ab6e:	d101      	bne.n	ab74 <__ssvfscanf_r+0x134>
    ab70:	f000 fc2a 	bl	b3c8 <__ssvfscanf_r+0x988>
    ab74:	9b08      	ldr	r3, [sp, #32]
    ab76:	2b00      	cmp	r3, #0
    ab78:	d002      	beq.n	ab80 <__ssvfscanf_r+0x140>
    ab7a:	89b3      	ldrh	r3, [r6, #12]
    ab7c:	065b      	lsls	r3, r3, #25
    ab7e:	d5ac      	bpl.n	aada <__ssvfscanf_r+0x9a>
    ab80:	2301      	movs	r3, #1
    ab82:	425b      	negs	r3, r3
    ab84:	9308      	str	r3, [sp, #32]
    ab86:	e7a8      	b.n	aada <__ssvfscanf_r+0x9a>
    ab88:	4b82      	ldr	r3, [pc, #520]	; (ad94 <__ssvfscanf_r+0x354>)
    ab8a:	465c      	mov	r4, fp
    ab8c:	9309      	str	r3, [sp, #36]	; 0x24
    ab8e:	2300      	movs	r3, #0
    ab90:	9305      	str	r3, [sp, #20]
    ab92:	3303      	adds	r3, #3
    ab94:	469b      	mov	fp, r3
    ab96:	6873      	ldr	r3, [r6, #4]
    ab98:	2b00      	cmp	r3, #0
    ab9a:	dd27      	ble.n	abec <__ssvfscanf_r+0x1ac>
    ab9c:	464b      	mov	r3, r9
    ab9e:	065b      	lsls	r3, r3, #25
    aba0:	d42d      	bmi.n	abfe <__ssvfscanf_r+0x1be>
    aba2:	2308      	movs	r3, #8
    aba4:	469a      	mov	sl, r3
    aba6:	e001      	b.n	abac <__ssvfscanf_r+0x16c>
    aba8:	3201      	adds	r2, #1
    abaa:	6032      	str	r2, [r6, #0]
    abac:	f003 ffa2 	bl	eaf4 <__locale_ctype_ptr>
    abb0:	4651      	mov	r1, sl
    abb2:	6832      	ldr	r2, [r6, #0]
    abb4:	7813      	ldrb	r3, [r2, #0]
    abb6:	18c0      	adds	r0, r0, r3
    abb8:	7843      	ldrb	r3, [r0, #1]
    abba:	4219      	tst	r1, r3
    abbc:	d01f      	beq.n	abfe <__ssvfscanf_r+0x1be>
    abbe:	6873      	ldr	r3, [r6, #4]
    abc0:	3701      	adds	r7, #1
    abc2:	3b01      	subs	r3, #1
    abc4:	6073      	str	r3, [r6, #4]
    abc6:	2b00      	cmp	r3, #0
    abc8:	dcee      	bgt.n	aba8 <__ssvfscanf_r+0x168>
    abca:	0031      	movs	r1, r6
    abcc:	4640      	mov	r0, r8
    abce:	f006 fd8d 	bl	116ec <__ssrefill_r>
    abd2:	2800      	cmp	r0, #0
    abd4:	d0ea      	beq.n	abac <__ssvfscanf_r+0x16c>
    abd6:	e7cd      	b.n	ab74 <__ssvfscanf_r+0x134>
    abd8:	465c      	mov	r4, fp
    abda:	4b6f      	ldr	r3, [pc, #444]	; (ad98 <__ssvfscanf_r+0x358>)
    abdc:	9309      	str	r3, [sp, #36]	; 0x24
    abde:	230a      	movs	r3, #10
    abe0:	9305      	str	r3, [sp, #20]
    abe2:	3b07      	subs	r3, #7
    abe4:	469b      	mov	fp, r3
    abe6:	6873      	ldr	r3, [r6, #4]
    abe8:	2b00      	cmp	r3, #0
    abea:	dcd7      	bgt.n	ab9c <__ssvfscanf_r+0x15c>
    abec:	0031      	movs	r1, r6
    abee:	4640      	mov	r0, r8
    abf0:	f006 fd7c 	bl	116ec <__ssrefill_r>
    abf4:	2800      	cmp	r0, #0
    abf6:	d1bd      	bne.n	ab74 <__ssvfscanf_r+0x134>
    abf8:	464b      	mov	r3, r9
    abfa:	065b      	lsls	r3, r3, #25
    abfc:	d5d1      	bpl.n	aba2 <__ssvfscanf_r+0x162>
    abfe:	465b      	mov	r3, fp
    ac00:	2b02      	cmp	r3, #2
    ac02:	d100      	bne.n	ac06 <__ssvfscanf_r+0x1c6>
    ac04:	e326      	b.n	b254 <__ssvfscanf_r+0x814>
    ac06:	dc00      	bgt.n	ac0a <__ssvfscanf_r+0x1ca>
    ac08:	e21b      	b.n	b042 <__ssvfscanf_r+0x602>
    ac0a:	465b      	mov	r3, fp
    ac0c:	2b03      	cmp	r3, #3
    ac0e:	d100      	bne.n	ac12 <__ssvfscanf_r+0x1d2>
    ac10:	e28a      	b.n	b128 <__ssvfscanf_r+0x6e8>
    ac12:	2b04      	cmp	r3, #4
    ac14:	d000      	beq.n	ac18 <__ssvfscanf_r+0x1d8>
    ac16:	e25b      	b.n	b0d0 <__ssvfscanf_r+0x690>
    ac18:	4640      	mov	r0, r8
    ac1a:	f003 ff7b 	bl	eb14 <_localeconv_r>
    ac1e:	22ae      	movs	r2, #174	; 0xae
    ac20:	2100      	movs	r1, #0
    ac22:	6803      	ldr	r3, [r0, #0]
    ac24:	0052      	lsls	r2, r2, #1
    ac26:	930c      	str	r3, [sp, #48]	; 0x30
    ac28:	1e63      	subs	r3, r4, #1
    ac2a:	910d      	str	r1, [sp, #52]	; 0x34
    ac2c:	4293      	cmp	r3, r2
    ac2e:	d904      	bls.n	ac3a <__ssvfscanf_r+0x1fa>
    ac30:	3c5e      	subs	r4, #94	; 0x5e
    ac32:	3cff      	subs	r4, #255	; 0xff
    ac34:	940d      	str	r4, [sp, #52]	; 0x34
    ac36:	245e      	movs	r4, #94	; 0x5e
    ac38:	34ff      	adds	r4, #255	; 0xff
    ac3a:	23f0      	movs	r3, #240	; 0xf0
    ac3c:	464a      	mov	r2, r9
    ac3e:	00db      	lsls	r3, r3, #3
    ac40:	431a      	orrs	r2, r3
    ac42:	2300      	movs	r3, #0
    ac44:	9304      	str	r3, [sp, #16]
    ac46:	930e      	str	r3, [sp, #56]	; 0x38
    ac48:	930f      	str	r3, [sp, #60]	; 0x3c
    ac4a:	9306      	str	r3, [sp, #24]
    ac4c:	930b      	str	r3, [sp, #44]	; 0x2c
    ac4e:	ab54      	add	r3, sp, #336	; 0x150
    ac50:	469b      	mov	fp, r3
    ac52:	930a      	str	r3, [sp, #40]	; 0x28
    ac54:	4b51      	ldr	r3, [pc, #324]	; (ad9c <__ssvfscanf_r+0x35c>)
    ac56:	4691      	mov	r9, r2
    ac58:	469a      	mov	sl, r3
    ac5a:	002b      	movs	r3, r5
    ac5c:	003d      	movs	r5, r7
    ac5e:	465f      	mov	r7, fp
    ac60:	469b      	mov	fp, r3
    ac62:	6832      	ldr	r2, [r6, #0]
    ac64:	7811      	ldrb	r1, [r2, #0]
    ac66:	000b      	movs	r3, r1
    ac68:	3b2b      	subs	r3, #43	; 0x2b
    ac6a:	b2db      	uxtb	r3, r3
    ac6c:	2b4e      	cmp	r3, #78	; 0x4e
    ac6e:	d900      	bls.n	ac72 <__ssvfscanf_r+0x232>
    ac70:	e1d6      	b.n	b020 <__ssvfscanf_r+0x5e0>
    ac72:	4650      	mov	r0, sl
    ac74:	009b      	lsls	r3, r3, #2
    ac76:	58c3      	ldr	r3, [r0, r3]
    ac78:	469f      	mov	pc, r3
    ac7a:	2302      	movs	r3, #2
    ac7c:	465c      	mov	r4, fp
    ac7e:	469b      	mov	fp, r3
    ac80:	e789      	b.n	ab96 <__ssvfscanf_r+0x156>
    ac82:	465c      	mov	r4, fp
    ac84:	2388      	movs	r3, #136	; 0x88
    ac86:	464a      	mov	r2, r9
    ac88:	009b      	lsls	r3, r3, #2
    ac8a:	431a      	orrs	r2, r3
    ac8c:	4b42      	ldr	r3, [pc, #264]	; (ad98 <__ssvfscanf_r+0x358>)
    ac8e:	4691      	mov	r9, r2
    ac90:	9309      	str	r3, [sp, #36]	; 0x24
    ac92:	2310      	movs	r3, #16
    ac94:	9305      	str	r3, [sp, #20]
    ac96:	3b0d      	subs	r3, #13
    ac98:	469b      	mov	fp, r3
    ac9a:	e77c      	b.n	ab96 <__ssvfscanf_r+0x156>
    ac9c:	4653      	mov	r3, sl
    ac9e:	785b      	ldrb	r3, [r3, #1]
    aca0:	2b6c      	cmp	r3, #108	; 0x6c
    aca2:	d101      	bne.n	aca8 <__ssvfscanf_r+0x268>
    aca4:	f000 fcd0 	bl	b648 <__ssvfscanf_r+0xc08>
    aca8:	4649      	mov	r1, r9
    acaa:	9c04      	ldr	r4, [sp, #16]
    acac:	4321      	orrs	r1, r4
    acae:	4689      	mov	r9, r1
    acb0:	9903      	ldr	r1, [sp, #12]
    acb2:	468a      	mov	sl, r1
    acb4:	4654      	mov	r4, sl
    acb6:	3401      	adds	r4, #1
    acb8:	9403      	str	r4, [sp, #12]
    acba:	2b78      	cmp	r3, #120	; 0x78
    acbc:	d800      	bhi.n	acc0 <__ssvfscanf_r+0x280>
    acbe:	e729      	b.n	ab14 <__ssvfscanf_r+0xd4>
    acc0:	465c      	mov	r4, fp
    acc2:	469b      	mov	fp, r3
    acc4:	f003 ff16 	bl	eaf4 <__locale_ctype_ptr>
    acc8:	2303      	movs	r3, #3
    acca:	4458      	add	r0, fp
    accc:	7842      	ldrb	r2, [r0, #1]
    acce:	4013      	ands	r3, r2
    acd0:	2b01      	cmp	r3, #1
    acd2:	d100      	bne.n	acd6 <__ssvfscanf_r+0x296>
    acd4:	e30a      	b.n	b2ec <__ssvfscanf_r+0x8ac>
    acd6:	4b2f      	ldr	r3, [pc, #188]	; (ad94 <__ssvfscanf_r+0x354>)
    acd8:	e780      	b.n	abdc <__ssvfscanf_r+0x19c>
    acda:	465c      	mov	r4, fp
    acdc:	4b2e      	ldr	r3, [pc, #184]	; (ad98 <__ssvfscanf_r+0x358>)
    acde:	9309      	str	r3, [sp, #36]	; 0x24
    ace0:	2308      	movs	r3, #8
    ace2:	9305      	str	r3, [sp, #20]
    ace4:	3b05      	subs	r3, #5
    ace6:	469b      	mov	fp, r3
    ace8:	e755      	b.n	ab96 <__ssvfscanf_r+0x156>
    acea:	9b03      	ldr	r3, [sp, #12]
    acec:	469a      	mov	sl, r3
    acee:	464b      	mov	r3, r9
    acf0:	06db      	lsls	r3, r3, #27
    acf2:	d500      	bpl.n	acf6 <__ssvfscanf_r+0x2b6>
    acf4:	e6ea      	b.n	aacc <__ssvfscanf_r+0x8c>
    acf6:	464b      	mov	r3, r9
    acf8:	075b      	lsls	r3, r3, #29
    acfa:	d501      	bpl.n	ad00 <__ssvfscanf_r+0x2c0>
    acfc:	f000 fce2 	bl	b6c4 <__ssvfscanf_r+0xc84>
    ad00:	464b      	mov	r3, r9
    ad02:	07db      	lsls	r3, r3, #31
    ad04:	d500      	bpl.n	ad08 <__ssvfscanf_r+0x2c8>
    ad06:	e30e      	b.n	b326 <__ssvfscanf_r+0x8e6>
    ad08:	464b      	mov	r3, r9
    ad0a:	079b      	lsls	r3, r3, #30
    ad0c:	d400      	bmi.n	ad10 <__ssvfscanf_r+0x2d0>
    ad0e:	e30a      	b.n	b326 <__ssvfscanf_r+0x8e6>
    ad10:	9907      	ldr	r1, [sp, #28]
    ad12:	17fa      	asrs	r2, r7, #31
    ad14:	680b      	ldr	r3, [r1, #0]
    ad16:	4654      	mov	r4, sl
    ad18:	601f      	str	r7, [r3, #0]
    ad1a:	605a      	str	r2, [r3, #4]
    ad1c:	000b      	movs	r3, r1
    ad1e:	3304      	adds	r3, #4
    ad20:	9307      	str	r3, [sp, #28]
    ad22:	e6d4      	b.n	aace <__ssvfscanf_r+0x8e>
    ad24:	464b      	mov	r3, r9
    ad26:	4303      	orrs	r3, r0
    ad28:	4699      	mov	r9, r3
    ad2a:	4653      	mov	r3, sl
    ad2c:	9903      	ldr	r1, [sp, #12]
    ad2e:	785b      	ldrb	r3, [r3, #1]
    ad30:	468a      	mov	sl, r1
    ad32:	e6e9      	b.n	ab08 <__ssvfscanf_r+0xc8>
    ad34:	465c      	mov	r4, fp
    ad36:	4b17      	ldr	r3, [pc, #92]	; (ad94 <__ssvfscanf_r+0x354>)
    ad38:	e750      	b.n	abdc <__ssvfscanf_r+0x19c>
    ad3a:	2340      	movs	r3, #64	; 0x40
    ad3c:	464a      	mov	r2, r9
    ad3e:	431a      	orrs	r2, r3
    ad40:	2300      	movs	r3, #0
    ad42:	465c      	mov	r4, fp
    ad44:	4691      	mov	r9, r2
    ad46:	469b      	mov	fp, r3
    ad48:	e725      	b.n	ab96 <__ssvfscanf_r+0x156>
    ad4a:	ab14      	add	r3, sp, #80	; 0x50
    ad4c:	0018      	movs	r0, r3
    ad4e:	9903      	ldr	r1, [sp, #12]
    ad50:	f005 f9b0 	bl	100b4 <__sccl>
    ad54:	2340      	movs	r3, #64	; 0x40
    ad56:	464a      	mov	r2, r9
    ad58:	431a      	orrs	r2, r3
    ad5a:	3b3f      	subs	r3, #63	; 0x3f
    ad5c:	465c      	mov	r4, fp
    ad5e:	9003      	str	r0, [sp, #12]
    ad60:	4691      	mov	r9, r2
    ad62:	469b      	mov	fp, r3
    ad64:	e717      	b.n	ab96 <__ssvfscanf_r+0x156>
    ad66:	465c      	mov	r4, fp
    ad68:	2380      	movs	r3, #128	; 0x80
    ad6a:	e78c      	b.n	ac86 <__ssvfscanf_r+0x246>
    ad6c:	464a      	mov	r2, r9
    ad6e:	2301      	movs	r3, #1
    ad70:	431a      	orrs	r2, r3
    ad72:	465c      	mov	r4, fp
    ad74:	4691      	mov	r9, r2
    ad76:	e7b1      	b.n	acdc <__ssvfscanf_r+0x29c>
    ad78:	464b      	mov	r3, r9
    ad7a:	4313      	orrs	r3, r2
    ad7c:	e7d4      	b.n	ad28 <__ssvfscanf_r+0x2e8>
    ad7e:	2304      	movs	r3, #4
    ad80:	465c      	mov	r4, fp
    ad82:	469b      	mov	fp, r3
    ad84:	e707      	b.n	ab96 <__ssvfscanf_r+0x156>
    ad86:	46c0      	nop			; (mov r8, r8)
    ad88:	fffffd4c 	.word	0xfffffd4c
    ad8c:	ffffdfff 	.word	0xffffdfff
    ad90:	000152c0 	.word	0x000152c0
    ad94:	00009415 	.word	0x00009415
    ad98:	0001133d 	.word	0x0001133d
    ad9c:	000154a4 	.word	0x000154a4
    ada0:	2301      	movs	r3, #1
    ada2:	464a      	mov	r2, r9
    ada4:	431a      	orrs	r2, r3
    ada6:	465c      	mov	r4, fp
    ada8:	4691      	mov	r9, r2
    adaa:	4bc5      	ldr	r3, [pc, #788]	; (b0c0 <__ssvfscanf_r+0x680>)
    adac:	e716      	b.n	abdc <__ssvfscanf_r+0x19c>
    adae:	4659      	mov	r1, fp
    adb0:	008c      	lsls	r4, r1, #2
    adb2:	2130      	movs	r1, #48	; 0x30
    adb4:	4249      	negs	r1, r1
    adb6:	445c      	add	r4, fp
    adb8:	468b      	mov	fp, r1
    adba:	0064      	lsls	r4, r4, #1
    adbc:	18e3      	adds	r3, r4, r3
    adbe:	449b      	add	fp, r3
    adc0:	4653      	mov	r3, sl
    adc2:	9903      	ldr	r1, [sp, #12]
    adc4:	785b      	ldrb	r3, [r3, #1]
    adc6:	468a      	mov	sl, r1
    adc8:	e69e      	b.n	ab08 <__ssvfscanf_r+0xc8>
    adca:	464b      	mov	r3, r9
    adcc:	2110      	movs	r1, #16
    adce:	430b      	orrs	r3, r1
    add0:	e7aa      	b.n	ad28 <__ssvfscanf_r+0x2e8>
    add2:	9b04      	ldr	r3, [sp, #16]
    add4:	445b      	add	r3, fp
    add6:	2b00      	cmp	r3, #0
    add8:	d111      	bne.n	adfe <__ssvfscanf_r+0x3be>
    adda:	4648      	mov	r0, r9
    addc:	4bb9      	ldr	r3, [pc, #740]	; (b0c4 <__ssvfscanf_r+0x684>)
    adde:	4018      	ands	r0, r3
    ade0:	4681      	mov	r9, r0
    ade2:	7039      	strb	r1, [r7, #0]
    ade4:	3701      	adds	r7, #1
    ade6:	6873      	ldr	r3, [r6, #4]
    ade8:	3c01      	subs	r4, #1
    adea:	3b01      	subs	r3, #1
    adec:	3501      	adds	r5, #1
    adee:	6073      	str	r3, [r6, #4]
    adf0:	2b00      	cmp	r3, #0
    adf2:	dd23      	ble.n	ae3c <__ssvfscanf_r+0x3fc>
    adf4:	3201      	adds	r2, #1
    adf6:	6032      	str	r2, [r6, #0]
    adf8:	2c00      	cmp	r4, #0
    adfa:	d000      	beq.n	adfe <__ssvfscanf_r+0x3be>
    adfc:	e731      	b.n	ac62 <__ssvfscanf_r+0x222>
    adfe:	465b      	mov	r3, fp
    ae00:	46bb      	mov	fp, r7
    ae02:	002f      	movs	r7, r5
    ae04:	001d      	movs	r5, r3
    ae06:	9b06      	ldr	r3, [sp, #24]
    ae08:	2b00      	cmp	r3, #0
    ae0a:	d056      	beq.n	aeba <__ssvfscanf_r+0x47a>
    ae0c:	e251      	b.n	b2b2 <__ssvfscanf_r+0x872>
    ae0e:	464b      	mov	r3, r9
    ae10:	05db      	lsls	r3, r3, #23
    ae12:	d5de      	bpl.n	add2 <__ssvfscanf_r+0x392>
    ae14:	2380      	movs	r3, #128	; 0x80
    ae16:	4649      	mov	r1, r9
    ae18:	4399      	bics	r1, r3
    ae1a:	9b06      	ldr	r3, [sp, #24]
    ae1c:	4689      	mov	r9, r1
    ae1e:	3301      	adds	r3, #1
    ae20:	9306      	str	r3, [sp, #24]
    ae22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ae24:	2b00      	cmp	r3, #0
    ae26:	d0de      	beq.n	ade6 <__ssvfscanf_r+0x3a6>
    ae28:	3b01      	subs	r3, #1
    ae2a:	930d      	str	r3, [sp, #52]	; 0x34
    ae2c:	6873      	ldr	r3, [r6, #4]
    ae2e:	3401      	adds	r4, #1
    ae30:	3b01      	subs	r3, #1
    ae32:	3c01      	subs	r4, #1
    ae34:	3501      	adds	r5, #1
    ae36:	6073      	str	r3, [r6, #4]
    ae38:	2b00      	cmp	r3, #0
    ae3a:	dcdb      	bgt.n	adf4 <__ssvfscanf_r+0x3b4>
    ae3c:	0031      	movs	r1, r6
    ae3e:	4640      	mov	r0, r8
    ae40:	f006 fc54 	bl	116ec <__ssrefill_r>
    ae44:	2800      	cmp	r0, #0
    ae46:	d0d7      	beq.n	adf8 <__ssvfscanf_r+0x3b8>
    ae48:	e7d9      	b.n	adfe <__ssvfscanf_r+0x3be>
    ae4a:	2380      	movs	r3, #128	; 0x80
    ae4c:	4648      	mov	r0, r9
    ae4e:	4203      	tst	r3, r0
    ae50:	d0d5      	beq.n	adfe <__ssvfscanf_r+0x3be>
    ae52:	4398      	bics	r0, r3
    ae54:	4681      	mov	r9, r0
    ae56:	e7c4      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    ae58:	465b      	mov	r3, fp
    ae5a:	2b06      	cmp	r3, #6
    ae5c:	d1d0      	bne.n	ae00 <__ssvfscanf_r+0x3c0>
    ae5e:	2307      	movs	r3, #7
    ae60:	469b      	mov	fp, r3
    ae62:	e7be      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    ae64:	9b04      	ldr	r3, [sp, #16]
    ae66:	2b00      	cmp	r3, #0
    ae68:	d000      	beq.n	ae6c <__ssvfscanf_r+0x42c>
    ae6a:	e121      	b.n	b0b0 <__ssvfscanf_r+0x670>
    ae6c:	9b06      	ldr	r3, [sp, #24]
    ae6e:	2b00      	cmp	r3, #0
    ae70:	d106      	bne.n	ae80 <__ssvfscanf_r+0x440>
    ae72:	23e0      	movs	r3, #224	; 0xe0
    ae74:	4648      	mov	r0, r9
    ae76:	00db      	lsls	r3, r3, #3
    ae78:	4018      	ands	r0, r3
    ae7a:	4298      	cmp	r0, r3
    ae7c:	d100      	bne.n	ae80 <__ssvfscanf_r+0x440>
    ae7e:	e3db      	b.n	b638 <__ssvfscanf_r+0xbf8>
    ae80:	465b      	mov	r3, fp
    ae82:	2b01      	cmp	r3, #1
    ae84:	d001      	beq.n	ae8a <__ssvfscanf_r+0x44a>
    ae86:	2b04      	cmp	r3, #4
    ae88:	d1b9      	bne.n	adfe <__ssvfscanf_r+0x3be>
    ae8a:	465b      	mov	r3, fp
    ae8c:	3301      	adds	r3, #1
    ae8e:	b2db      	uxtb	r3, r3
    ae90:	469b      	mov	fp, r3
    ae92:	e7a6      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    ae94:	465b      	mov	r3, fp
    ae96:	2b00      	cmp	r3, #0
    ae98:	d000      	beq.n	ae9c <__ssvfscanf_r+0x45c>
    ae9a:	e0ff      	b.n	b09c <__ssvfscanf_r+0x65c>
    ae9c:	9b06      	ldr	r3, [sp, #24]
    ae9e:	2b00      	cmp	r3, #0
    aea0:	d000      	beq.n	aea4 <__ssvfscanf_r+0x464>
    aea2:	e202      	b.n	b2aa <__ssvfscanf_r+0x86a>
    aea4:	23e0      	movs	r3, #224	; 0xe0
    aea6:	4648      	mov	r0, r9
    aea8:	00db      	lsls	r3, r3, #3
    aeaa:	4018      	ands	r0, r3
    aeac:	4298      	cmp	r0, r3
    aeae:	d100      	bne.n	aeb2 <__ssvfscanf_r+0x472>
    aeb0:	e3ba      	b.n	b628 <__ssvfscanf_r+0xbe8>
    aeb2:	465b      	mov	r3, fp
    aeb4:	46bb      	mov	fp, r7
    aeb6:	002f      	movs	r7, r5
    aeb8:	001d      	movs	r5, r3
    aeba:	9b04      	ldr	r3, [sp, #16]
    aebc:	3b01      	subs	r3, #1
    aebe:	2b01      	cmp	r3, #1
    aec0:	d801      	bhi.n	aec6 <__ssvfscanf_r+0x486>
    aec2:	f000 fc63 	bl	b78c <__ssvfscanf_r+0xd4c>
    aec6:	1e6b      	subs	r3, r5, #1
    aec8:	2b06      	cmp	r3, #6
    aeca:	d820      	bhi.n	af0e <__ssvfscanf_r+0x4ce>
    aecc:	2d02      	cmp	r5, #2
    aece:	d801      	bhi.n	aed4 <__ssvfscanf_r+0x494>
    aed0:	f000 fc6e 	bl	b7b0 <__ssvfscanf_r+0xd70>
    aed4:	2d03      	cmp	r5, #3
    aed6:	d01a      	beq.n	af0e <__ssvfscanf_r+0x4ce>
    aed8:	3d04      	subs	r5, #4
    aeda:	b2ed      	uxtb	r5, r5
    aedc:	43ec      	mvns	r4, r5
    aede:	0033      	movs	r3, r6
    aee0:	445c      	add	r4, fp
    aee2:	46aa      	mov	sl, r5
    aee4:	4646      	mov	r6, r8
    aee6:	0025      	movs	r5, r4
    aee8:	46b8      	mov	r8, r7
    aeea:	465c      	mov	r4, fp
    aeec:	001f      	movs	r7, r3
    aeee:	3c01      	subs	r4, #1
    aef0:	7821      	ldrb	r1, [r4, #0]
    aef2:	003a      	movs	r2, r7
    aef4:	0030      	movs	r0, r6
    aef6:	f006 fbb7 	bl	11668 <_sungetc_r>
    aefa:	42a5      	cmp	r5, r4
    aefc:	d1f7      	bne.n	aeee <__ssvfscanf_r+0x4ae>
    aefe:	003b      	movs	r3, r7
    af00:	4647      	mov	r7, r8
    af02:	4655      	mov	r5, sl
    af04:	46b0      	mov	r8, r6
    af06:	46a3      	mov	fp, r4
    af08:	001e      	movs	r6, r3
    af0a:	3f01      	subs	r7, #1
    af0c:	1b7f      	subs	r7, r7, r5
    af0e:	464b      	mov	r3, r9
    af10:	05db      	lsls	r3, r3, #23
    af12:	d519      	bpl.n	af48 <__ssvfscanf_r+0x508>
    af14:	464b      	mov	r3, r9
    af16:	055b      	lsls	r3, r3, #21
    af18:	d501      	bpl.n	af1e <__ssvfscanf_r+0x4de>
    af1a:	f000 fc5b 	bl	b7d4 <__ssvfscanf_r+0xd94>
    af1e:	465b      	mov	r3, fp
    af20:	1e5c      	subs	r4, r3, #1
    af22:	7821      	ldrb	r1, [r4, #0]
    af24:	1e7d      	subs	r5, r7, #1
    af26:	2965      	cmp	r1, #101	; 0x65
    af28:	d008      	beq.n	af3c <__ssvfscanf_r+0x4fc>
    af2a:	2945      	cmp	r1, #69	; 0x45
    af2c:	d006      	beq.n	af3c <__ssvfscanf_r+0x4fc>
    af2e:	0032      	movs	r2, r6
    af30:	4640      	mov	r0, r8
    af32:	3c01      	subs	r4, #1
    af34:	f006 fb98 	bl	11668 <_sungetc_r>
    af38:	7821      	ldrb	r1, [r4, #0]
    af3a:	1ebd      	subs	r5, r7, #2
    af3c:	0032      	movs	r2, r6
    af3e:	4640      	mov	r0, r8
    af40:	f006 fb92 	bl	11668 <_sungetc_r>
    af44:	002f      	movs	r7, r5
    af46:	46a3      	mov	fp, r4
    af48:	464a      	mov	r2, r9
    af4a:	2310      	movs	r3, #16
    af4c:	4013      	ands	r3, r2
    af4e:	9a03      	ldr	r2, [sp, #12]
    af50:	4692      	mov	sl, r2
    af52:	d000      	beq.n	af56 <__ssvfscanf_r+0x516>
    af54:	e5ba      	b.n	aacc <__ssvfscanf_r+0x8c>
    af56:	465a      	mov	r2, fp
    af58:	7013      	strb	r3, [r2, #0]
    af5a:	23c0      	movs	r3, #192	; 0xc0
    af5c:	464a      	mov	r2, r9
    af5e:	00db      	lsls	r3, r3, #3
    af60:	4013      	ands	r3, r2
    af62:	2280      	movs	r2, #128	; 0x80
    af64:	00d2      	lsls	r2, r2, #3
    af66:	4293      	cmp	r3, r2
    af68:	d100      	bne.n	af6c <__ssvfscanf_r+0x52c>
    af6a:	e389      	b.n	b680 <__ssvfscanf_r+0xc40>
    af6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    af6e:	2b00      	cmp	r3, #0
    af70:	d000      	beq.n	af74 <__ssvfscanf_r+0x534>
    af72:	e1c0      	b.n	b2f6 <__ssvfscanf_r+0x8b6>
    af74:	2200      	movs	r2, #0
    af76:	990a      	ldr	r1, [sp, #40]	; 0x28
    af78:	4640      	mov	r0, r8
    af7a:	f006 f839 	bl	10ff0 <_strtod_r>
    af7e:	464b      	mov	r3, r9
    af80:	0004      	movs	r4, r0
    af82:	000d      	movs	r5, r1
    af84:	07db      	lsls	r3, r3, #31
    af86:	d403      	bmi.n	af90 <__ssvfscanf_r+0x550>
    af88:	464b      	mov	r3, r9
    af8a:	079b      	lsls	r3, r3, #30
    af8c:	d400      	bmi.n	af90 <__ssvfscanf_r+0x550>
    af8e:	e198      	b.n	b2c2 <__ssvfscanf_r+0x882>
    af90:	9a07      	ldr	r2, [sp, #28]
    af92:	6813      	ldr	r3, [r2, #0]
    af94:	601c      	str	r4, [r3, #0]
    af96:	605d      	str	r5, [r3, #4]
    af98:	0013      	movs	r3, r2
    af9a:	3304      	adds	r3, #4
    af9c:	9307      	str	r3, [sp, #28]
    af9e:	9b08      	ldr	r3, [sp, #32]
    afa0:	3301      	adds	r3, #1
    afa2:	9308      	str	r3, [sp, #32]
    afa4:	9b03      	ldr	r3, [sp, #12]
    afa6:	469a      	mov	sl, r3
    afa8:	4654      	mov	r4, sl
    afaa:	e590      	b.n	aace <__ssvfscanf_r+0x8e>
    afac:	465b      	mov	r3, fp
    afae:	2b02      	cmp	r3, #2
    afb0:	d000      	beq.n	afb4 <__ssvfscanf_r+0x574>
    afb2:	e725      	b.n	ae00 <__ssvfscanf_r+0x3c0>
    afb4:	2303      	movs	r3, #3
    afb6:	469b      	mov	fp, r3
    afb8:	e713      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    afba:	23a0      	movs	r3, #160	; 0xa0
    afbc:	4648      	mov	r0, r9
    afbe:	00db      	lsls	r3, r3, #3
    afc0:	4003      	ands	r3, r0
    afc2:	2080      	movs	r0, #128	; 0x80
    afc4:	00c0      	lsls	r0, r0, #3
    afc6:	4283      	cmp	r3, r0
    afc8:	d007      	beq.n	afda <__ssvfscanf_r+0x59a>
    afca:	464b      	mov	r3, r9
    afcc:	4203      	tst	r3, r0
    afce:	d100      	bne.n	afd2 <__ssvfscanf_r+0x592>
    afd0:	e715      	b.n	adfe <__ssvfscanf_r+0x3be>
    afd2:	9b06      	ldr	r3, [sp, #24]
    afd4:	2b00      	cmp	r3, #0
    afd6:	d100      	bne.n	afda <__ssvfscanf_r+0x59a>
    afd8:	e76b      	b.n	aeb2 <__ssvfscanf_r+0x472>
    afda:	2080      	movs	r0, #128	; 0x80
    afdc:	464b      	mov	r3, r9
    afde:	0080      	lsls	r0, r0, #2
    afe0:	4203      	tst	r3, r0
    afe2:	d104      	bne.n	afee <__ssvfscanf_r+0x5ae>
    afe4:	9b06      	ldr	r3, [sp, #24]
    afe6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    afe8:	970e      	str	r7, [sp, #56]	; 0x38
    afea:	1a1b      	subs	r3, r3, r0
    afec:	930f      	str	r3, [sp, #60]	; 0x3c
    afee:	4648      	mov	r0, r9
    aff0:	4b35      	ldr	r3, [pc, #212]	; (b0c8 <__ssvfscanf_r+0x688>)
    aff2:	4018      	ands	r0, r3
    aff4:	0003      	movs	r3, r0
    aff6:	20c0      	movs	r0, #192	; 0xc0
    aff8:	0040      	lsls	r0, r0, #1
    affa:	4318      	orrs	r0, r3
    affc:	2300      	movs	r3, #0
    affe:	4681      	mov	r9, r0
    b000:	9306      	str	r3, [sp, #24]
    b002:	e6ee      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    b004:	9b04      	ldr	r3, [sp, #16]
    b006:	2b01      	cmp	r3, #1
    b008:	d000      	beq.n	b00c <__ssvfscanf_r+0x5cc>
    b00a:	e6f8      	b.n	adfe <__ssvfscanf_r+0x3be>
    b00c:	2302      	movs	r3, #2
    b00e:	9304      	str	r3, [sp, #16]
    b010:	e6e7      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    b012:	465b      	mov	r3, fp
    b014:	2b07      	cmp	r3, #7
    b016:	d000      	beq.n	b01a <__ssvfscanf_r+0x5da>
    b018:	e6f2      	b.n	ae00 <__ssvfscanf_r+0x3c0>
    b01a:	2308      	movs	r3, #8
    b01c:	469b      	mov	fp, r3
    b01e:	e6e0      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    b020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b022:	781b      	ldrb	r3, [r3, #0]
    b024:	428b      	cmp	r3, r1
    b026:	d000      	beq.n	b02a <__ssvfscanf_r+0x5ea>
    b028:	e6e9      	b.n	adfe <__ssvfscanf_r+0x3be>
    b02a:	2080      	movs	r0, #128	; 0x80
    b02c:	464b      	mov	r3, r9
    b02e:	0080      	lsls	r0, r0, #2
    b030:	4203      	tst	r3, r0
    b032:	d100      	bne.n	b036 <__ssvfscanf_r+0x5f6>
    b034:	e6e3      	b.n	adfe <__ssvfscanf_r+0x3be>
    b036:	4825      	ldr	r0, [pc, #148]	; (b0cc <__ssvfscanf_r+0x68c>)
    b038:	4003      	ands	r3, r0
    b03a:	4699      	mov	r9, r3
    b03c:	9b06      	ldr	r3, [sp, #24]
    b03e:	930b      	str	r3, [sp, #44]	; 0x2c
    b040:	e6cf      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    b042:	2b01      	cmp	r3, #1
    b044:	d144      	bne.n	b0d0 <__ssvfscanf_r+0x690>
    b046:	2c00      	cmp	r4, #0
    b048:	d100      	bne.n	b04c <__ssvfscanf_r+0x60c>
    b04a:	3c01      	subs	r4, #1
    b04c:	464b      	mov	r3, r9
    b04e:	06db      	lsls	r3, r3, #27
    b050:	d400      	bmi.n	b054 <__ssvfscanf_r+0x614>
    b052:	e1c1      	b.n	b3d8 <__ssvfscanf_r+0x998>
    b054:	ab14      	add	r3, sp, #80	; 0x50
    b056:	2500      	movs	r5, #0
    b058:	469a      	mov	sl, r3
    b05a:	6832      	ldr	r2, [r6, #0]
    b05c:	4651      	mov	r1, sl
    b05e:	7813      	ldrb	r3, [r2, #0]
    b060:	5ccb      	ldrb	r3, [r1, r3]
    b062:	2b00      	cmp	r3, #0
    b064:	d015      	beq.n	b092 <__ssvfscanf_r+0x652>
    b066:	6873      	ldr	r3, [r6, #4]
    b068:	3201      	adds	r2, #1
    b06a:	3b01      	subs	r3, #1
    b06c:	3501      	adds	r5, #1
    b06e:	6073      	str	r3, [r6, #4]
    b070:	6032      	str	r2, [r6, #0]
    b072:	42ac      	cmp	r4, r5
    b074:	d010      	beq.n	b098 <__ssvfscanf_r+0x658>
    b076:	2b00      	cmp	r3, #0
    b078:	dcf0      	bgt.n	b05c <__ssvfscanf_r+0x61c>
    b07a:	0031      	movs	r1, r6
    b07c:	4640      	mov	r0, r8
    b07e:	f006 fb35 	bl	116ec <__ssrefill_r>
    b082:	2800      	cmp	r0, #0
    b084:	d108      	bne.n	b098 <__ssvfscanf_r+0x658>
    b086:	4651      	mov	r1, sl
    b088:	6832      	ldr	r2, [r6, #0]
    b08a:	7813      	ldrb	r3, [r2, #0]
    b08c:	5ccb      	ldrb	r3, [r1, r3]
    b08e:	2b00      	cmp	r3, #0
    b090:	d1e9      	bne.n	b066 <__ssvfscanf_r+0x626>
    b092:	2d00      	cmp	r5, #0
    b094:	d100      	bne.n	b098 <__ssvfscanf_r+0x658>
    b096:	e520      	b.n	aada <__ssvfscanf_r+0x9a>
    b098:	197f      	adds	r7, r7, r5
    b09a:	e783      	b.n	afa4 <__ssvfscanf_r+0x564>
    b09c:	465b      	mov	r3, fp
    b09e:	20fd      	movs	r0, #253	; 0xfd
    b0a0:	3b03      	subs	r3, #3
    b0a2:	4203      	tst	r3, r0
    b0a4:	d000      	beq.n	b0a8 <__ssvfscanf_r+0x668>
    b0a6:	e6aa      	b.n	adfe <__ssvfscanf_r+0x3be>
    b0a8:	3304      	adds	r3, #4
    b0aa:	b2db      	uxtb	r3, r3
    b0ac:	469b      	mov	fp, r3
    b0ae:	e698      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    b0b0:	9b04      	ldr	r3, [sp, #16]
    b0b2:	2b02      	cmp	r3, #2
    b0b4:	d000      	beq.n	b0b8 <__ssvfscanf_r+0x678>
    b0b6:	e6e3      	b.n	ae80 <__ssvfscanf_r+0x440>
    b0b8:	2303      	movs	r3, #3
    b0ba:	9304      	str	r3, [sp, #16]
    b0bc:	e691      	b.n	ade2 <__ssvfscanf_r+0x3a2>
    b0be:	46c0      	nop			; (mov r8, r8)
    b0c0:	00009415 	.word	0x00009415
    b0c4:	fffffe7f 	.word	0xfffffe7f
    b0c8:	fffff87f 	.word	0xfffff87f
    b0cc:	fffffd7f 	.word	0xfffffd7f
    b0d0:	2c00      	cmp	r4, #0
    b0d2:	d100      	bne.n	b0d6 <__ssvfscanf_r+0x696>
    b0d4:	3401      	adds	r4, #1
    b0d6:	464b      	mov	r3, r9
    b0d8:	07db      	lsls	r3, r3, #31
    b0da:	d500      	bpl.n	b0de <__ssvfscanf_r+0x69e>
    b0dc:	e1aa      	b.n	b434 <__ssvfscanf_r+0x9f4>
    b0de:	464b      	mov	r3, r9
    b0e0:	06db      	lsls	r3, r3, #27
    b0e2:	d400      	bmi.n	b0e6 <__ssvfscanf_r+0x6a6>
    b0e4:	e22f      	b.n	b546 <__ssvfscanf_r+0xb06>
    b0e6:	4643      	mov	r3, r8
    b0e8:	2500      	movs	r5, #0
    b0ea:	46b8      	mov	r8, r7
    b0ec:	001f      	movs	r7, r3
    b0ee:	e00c      	b.n	b10a <__ssvfscanf_r+0x6ca>
    b0f0:	6832      	ldr	r2, [r6, #0]
    b0f2:	18ed      	adds	r5, r5, r3
    b0f4:	4694      	mov	ip, r2
    b0f6:	1ae4      	subs	r4, r4, r3
    b0f8:	4463      	add	r3, ip
    b0fa:	6033      	str	r3, [r6, #0]
    b0fc:	0031      	movs	r1, r6
    b0fe:	0038      	movs	r0, r7
    b100:	f006 faf4 	bl	116ec <__ssrefill_r>
    b104:	2800      	cmp	r0, #0
    b106:	d000      	beq.n	b10a <__ssvfscanf_r+0x6ca>
    b108:	e214      	b.n	b534 <__ssvfscanf_r+0xaf4>
    b10a:	6873      	ldr	r3, [r6, #4]
    b10c:	42a3      	cmp	r3, r4
    b10e:	dbef      	blt.n	b0f0 <__ssvfscanf_r+0x6b0>
    b110:	1b1b      	subs	r3, r3, r4
    b112:	6073      	str	r3, [r6, #4]
    b114:	6833      	ldr	r3, [r6, #0]
    b116:	003a      	movs	r2, r7
    b118:	469c      	mov	ip, r3
    b11a:	4647      	mov	r7, r8
    b11c:	192d      	adds	r5, r5, r4
    b11e:	4464      	add	r4, ip
    b120:	4690      	mov	r8, r2
    b122:	6034      	str	r4, [r6, #0]
    b124:	197f      	adds	r7, r7, r5
    b126:	e73d      	b.n	afa4 <__ssvfscanf_r+0x564>
    b128:	22ae      	movs	r2, #174	; 0xae
    b12a:	2100      	movs	r1, #0
    b12c:	1e63      	subs	r3, r4, #1
    b12e:	0052      	lsls	r2, r2, #1
    b130:	468b      	mov	fp, r1
    b132:	4293      	cmp	r3, r2
    b134:	d904      	bls.n	b140 <__ssvfscanf_r+0x700>
    b136:	4bcb      	ldr	r3, [pc, #812]	; (b464 <__ssvfscanf_r+0xa24>)
    b138:	469b      	mov	fp, r3
    b13a:	44a3      	add	fp, r4
    b13c:	245e      	movs	r4, #94	; 0x5e
    b13e:	34ff      	adds	r4, #255	; 0xff
    b140:	23d8      	movs	r3, #216	; 0xd8
    b142:	464a      	mov	r2, r9
    b144:	011b      	lsls	r3, r3, #4
    b146:	431a      	orrs	r2, r3
    b148:	2300      	movs	r3, #0
    b14a:	469a      	mov	sl, r3
    b14c:	ab54      	add	r3, sp, #336	; 0x150
    b14e:	930a      	str	r3, [sp, #40]	; 0x28
    b150:	001d      	movs	r5, r3
    b152:	003b      	movs	r3, r7
    b154:	0017      	movs	r7, r2
    b156:	4699      	mov	r9, r3
    b158:	6832      	ldr	r2, [r6, #0]
    b15a:	7811      	ldrb	r1, [r2, #0]
    b15c:	000b      	movs	r3, r1
    b15e:	3b2b      	subs	r3, #43	; 0x2b
    b160:	b2db      	uxtb	r3, r3
    b162:	2b4d      	cmp	r3, #77	; 0x4d
    b164:	d81d      	bhi.n	b1a2 <__ssvfscanf_r+0x762>
    b166:	48c0      	ldr	r0, [pc, #768]	; (b468 <__ssvfscanf_r+0xa28>)
    b168:	009b      	lsls	r3, r3, #2
    b16a:	58c3      	ldr	r3, [r0, r3]
    b16c:	469f      	mov	pc, r3
    b16e:	23c0      	movs	r3, #192	; 0xc0
    b170:	2080      	movs	r0, #128	; 0x80
    b172:	00db      	lsls	r3, r3, #3
    b174:	403b      	ands	r3, r7
    b176:	0080      	lsls	r0, r0, #2
    b178:	4283      	cmp	r3, r0
    b17a:	d112      	bne.n	b1a2 <__ssvfscanf_r+0x762>
    b17c:	4bbb      	ldr	r3, [pc, #748]	; (b46c <__ssvfscanf_r+0xa2c>)
    b17e:	401f      	ands	r7, r3
    b180:	23a0      	movs	r3, #160	; 0xa0
    b182:	00db      	lsls	r3, r3, #3
    b184:	431f      	orrs	r7, r3
    b186:	2310      	movs	r3, #16
    b188:	9305      	str	r3, [sp, #20]
    b18a:	6873      	ldr	r3, [r6, #4]
    b18c:	7029      	strb	r1, [r5, #0]
    b18e:	3b01      	subs	r3, #1
    b190:	3501      	adds	r5, #1
    b192:	6073      	str	r3, [r6, #4]
    b194:	2b00      	cmp	r3, #0
    b196:	dd49      	ble.n	b22c <__ssvfscanf_r+0x7ec>
    b198:	3201      	adds	r2, #1
    b19a:	6032      	str	r2, [r6, #0]
    b19c:	3c01      	subs	r4, #1
    b19e:	2c00      	cmp	r4, #0
    b1a0:	d1da      	bne.n	b158 <__ssvfscanf_r+0x718>
    b1a2:	464b      	mov	r3, r9
    b1a4:	46b9      	mov	r9, r7
    b1a6:	001f      	movs	r7, r3
    b1a8:	464b      	mov	r3, r9
    b1aa:	05db      	lsls	r3, r3, #23
    b1ac:	d507      	bpl.n	b1be <__ssvfscanf_r+0x77e>
    b1ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1b0:	429d      	cmp	r5, r3
    b1b2:	d900      	bls.n	b1b6 <__ssvfscanf_r+0x776>
    b1b4:	e231      	b.n	b61a <__ssvfscanf_r+0xbda>
    b1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1b8:	429d      	cmp	r5, r3
    b1ba:	d100      	bne.n	b1be <__ssvfscanf_r+0x77e>
    b1bc:	e48d      	b.n	aada <__ssvfscanf_r+0x9a>
    b1be:	2310      	movs	r3, #16
    b1c0:	464a      	mov	r2, r9
    b1c2:	4013      	ands	r3, r2
    b1c4:	d100      	bne.n	b1c8 <__ssvfscanf_r+0x788>
    b1c6:	e0b7      	b.n	b338 <__ssvfscanf_r+0x8f8>
    b1c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b1ca:	1aed      	subs	r5, r5, r3
    b1cc:	4455      	add	r5, sl
    b1ce:	197f      	adds	r7, r7, r5
    b1d0:	e6e8      	b.n	afa4 <__ssvfscanf_r+0x564>
    b1d2:	9b05      	ldr	r3, [sp, #20]
    b1d4:	2b0a      	cmp	r3, #10
    b1d6:	dde4      	ble.n	b1a2 <__ssvfscanf_r+0x762>
    b1d8:	4ba5      	ldr	r3, [pc, #660]	; (b470 <__ssvfscanf_r+0xa30>)
    b1da:	401f      	ands	r7, r3
    b1dc:	e7d5      	b.n	b18a <__ssvfscanf_r+0x74a>
    b1de:	9b05      	ldr	r3, [sp, #20]
    b1e0:	48a4      	ldr	r0, [pc, #656]	; (b474 <__ssvfscanf_r+0xa34>)
    b1e2:	005b      	lsls	r3, r3, #1
    b1e4:	5e1b      	ldrsh	r3, [r3, r0]
    b1e6:	9305      	str	r3, [sp, #20]
    b1e8:	4ba1      	ldr	r3, [pc, #644]	; (b470 <__ssvfscanf_r+0xa30>)
    b1ea:	401f      	ands	r7, r3
    b1ec:	e7cd      	b.n	b18a <__ssvfscanf_r+0x74a>
    b1ee:	053b      	lsls	r3, r7, #20
    b1f0:	d5cb      	bpl.n	b18a <__ssvfscanf_r+0x74a>
    b1f2:	9b05      	ldr	r3, [sp, #20]
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d105      	bne.n	b204 <__ssvfscanf_r+0x7c4>
    b1f8:	2380      	movs	r3, #128	; 0x80
    b1fa:	009b      	lsls	r3, r3, #2
    b1fc:	431f      	orrs	r7, r3
    b1fe:	3bf9      	subs	r3, #249	; 0xf9
    b200:	3bff      	subs	r3, #255	; 0xff
    b202:	9305      	str	r3, [sp, #20]
    b204:	057b      	lsls	r3, r7, #21
    b206:	d459      	bmi.n	b2bc <__ssvfscanf_r+0x87c>
    b208:	4b9b      	ldr	r3, [pc, #620]	; (b478 <__ssvfscanf_r+0xa38>)
    b20a:	401f      	ands	r7, r3
    b20c:	465b      	mov	r3, fp
    b20e:	2b00      	cmp	r3, #0
    b210:	d004      	beq.n	b21c <__ssvfscanf_r+0x7dc>
    b212:	2301      	movs	r3, #1
    b214:	425b      	negs	r3, r3
    b216:	469c      	mov	ip, r3
    b218:	3401      	adds	r4, #1
    b21a:	44e3      	add	fp, ip
    b21c:	2301      	movs	r3, #1
    b21e:	469c      	mov	ip, r3
    b220:	6873      	ldr	r3, [r6, #4]
    b222:	44e2      	add	sl, ip
    b224:	3b01      	subs	r3, #1
    b226:	6073      	str	r3, [r6, #4]
    b228:	2b00      	cmp	r3, #0
    b22a:	dcb5      	bgt.n	b198 <__ssvfscanf_r+0x758>
    b22c:	0031      	movs	r1, r6
    b22e:	4640      	mov	r0, r8
    b230:	f006 fa5c 	bl	116ec <__ssrefill_r>
    b234:	2800      	cmp	r0, #0
    b236:	d0b1      	beq.n	b19c <__ssvfscanf_r+0x75c>
    b238:	e7b3      	b.n	b1a2 <__ssvfscanf_r+0x762>
    b23a:	9b05      	ldr	r3, [sp, #20]
    b23c:	488d      	ldr	r0, [pc, #564]	; (b474 <__ssvfscanf_r+0xa34>)
    b23e:	005b      	lsls	r3, r3, #1
    b240:	5e1b      	ldrsh	r3, [r3, r0]
    b242:	9305      	str	r3, [sp, #20]
    b244:	2b08      	cmp	r3, #8
    b246:	dcc7      	bgt.n	b1d8 <__ssvfscanf_r+0x798>
    b248:	e7ab      	b.n	b1a2 <__ssvfscanf_r+0x762>
    b24a:	2380      	movs	r3, #128	; 0x80
    b24c:	423b      	tst	r3, r7
    b24e:	d0a8      	beq.n	b1a2 <__ssvfscanf_r+0x762>
    b250:	439f      	bics	r7, r3
    b252:	e79a      	b.n	b18a <__ssvfscanf_r+0x74a>
    b254:	2c00      	cmp	r4, #0
    b256:	d100      	bne.n	b25a <__ssvfscanf_r+0x81a>
    b258:	3c01      	subs	r4, #1
    b25a:	2501      	movs	r5, #1
    b25c:	464b      	mov	r3, r9
    b25e:	401d      	ands	r5, r3
    b260:	d000      	beq.n	b264 <__ssvfscanf_r+0x824>
    b262:	e093      	b.n	b38c <__ssvfscanf_r+0x94c>
    b264:	464b      	mov	r3, r9
    b266:	06db      	lsls	r3, r3, #27
    b268:	d400      	bmi.n	b26c <__ssvfscanf_r+0x82c>
    b26a:	e183      	b.n	b574 <__ssvfscanf_r+0xb34>
    b26c:	2308      	movs	r3, #8
    b26e:	4699      	mov	r9, r3
    b270:	f003 fc40 	bl	eaf4 <__locale_ctype_ptr>
    b274:	4649      	mov	r1, r9
    b276:	6833      	ldr	r3, [r6, #0]
    b278:	781a      	ldrb	r2, [r3, #0]
    b27a:	1880      	adds	r0, r0, r2
    b27c:	7842      	ldrb	r2, [r0, #1]
    b27e:	4211      	tst	r1, r2
    b280:	d000      	beq.n	b284 <__ssvfscanf_r+0x844>
    b282:	e709      	b.n	b098 <__ssvfscanf_r+0x658>
    b284:	6872      	ldr	r2, [r6, #4]
    b286:	3301      	adds	r3, #1
    b288:	3a01      	subs	r2, #1
    b28a:	3501      	adds	r5, #1
    b28c:	6072      	str	r2, [r6, #4]
    b28e:	6033      	str	r3, [r6, #0]
    b290:	42ac      	cmp	r4, r5
    b292:	d100      	bne.n	b296 <__ssvfscanf_r+0x856>
    b294:	e700      	b.n	b098 <__ssvfscanf_r+0x658>
    b296:	2a00      	cmp	r2, #0
    b298:	dcea      	bgt.n	b270 <__ssvfscanf_r+0x830>
    b29a:	0031      	movs	r1, r6
    b29c:	4640      	mov	r0, r8
    b29e:	f006 fa25 	bl	116ec <__ssrefill_r>
    b2a2:	2800      	cmp	r0, #0
    b2a4:	d0e4      	beq.n	b270 <__ssvfscanf_r+0x830>
    b2a6:	197f      	adds	r7, r7, r5
    b2a8:	e67c      	b.n	afa4 <__ssvfscanf_r+0x564>
    b2aa:	465b      	mov	r3, fp
    b2ac:	46bb      	mov	fp, r7
    b2ae:	002f      	movs	r7, r5
    b2b0:	001d      	movs	r5, r3
    b2b2:	464a      	mov	r2, r9
    b2b4:	4b71      	ldr	r3, [pc, #452]	; (b47c <__ssvfscanf_r+0xa3c>)
    b2b6:	401a      	ands	r2, r3
    b2b8:	4691      	mov	r9, r2
    b2ba:	e5fe      	b.n	aeba <__ssvfscanf_r+0x47a>
    b2bc:	4b70      	ldr	r3, [pc, #448]	; (b480 <__ssvfscanf_r+0xa40>)
    b2be:	401f      	ands	r7, r3
    b2c0:	e763      	b.n	b18a <__ssvfscanf_r+0x74a>
    b2c2:	9b07      	ldr	r3, [sp, #28]
    b2c4:	1d1a      	adds	r2, r3, #4
    b2c6:	681b      	ldr	r3, [r3, #0]
    b2c8:	4692      	mov	sl, r2
    b2ca:	4699      	mov	r9, r3
    b2cc:	0002      	movs	r2, r0
    b2ce:	000b      	movs	r3, r1
    b2d0:	f007 f904 	bl	124dc <__aeabi_dcmpun>
    b2d4:	2800      	cmp	r0, #0
    b2d6:	d000      	beq.n	b2da <__ssvfscanf_r+0x89a>
    b2d8:	e28e      	b.n	b7f8 <__ssvfscanf_r+0xdb8>
    b2da:	0020      	movs	r0, r4
    b2dc:	0029      	movs	r1, r5
    b2de:	f007 f91d 	bl	1251c <__aeabi_d2f>
    b2e2:	464b      	mov	r3, r9
    b2e4:	6018      	str	r0, [r3, #0]
    b2e6:	4653      	mov	r3, sl
    b2e8:	9307      	str	r3, [sp, #28]
    b2ea:	e658      	b.n	af9e <__ssvfscanf_r+0x55e>
    b2ec:	464a      	mov	r2, r9
    b2ee:	431a      	orrs	r2, r3
    b2f0:	4691      	mov	r9, r2
    b2f2:	4b64      	ldr	r3, [pc, #400]	; (b484 <__ssvfscanf_r+0xa44>)
    b2f4:	e472      	b.n	abdc <__ssvfscanf_r+0x19c>
    b2f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2f8:	2200      	movs	r2, #0
    b2fa:	1c59      	adds	r1, r3, #1
    b2fc:	4640      	mov	r0, r8
    b2fe:	230a      	movs	r3, #10
    b300:	f7fe f888 	bl	9414 <_strtol_r>
    b304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b306:	1ac2      	subs	r2, r0, r3
    b308:	a90e      	add	r1, sp, #56	; 0x38
    b30a:	468c      	mov	ip, r1
    b30c:	4b5e      	ldr	r3, [pc, #376]	; (b488 <__ssvfscanf_r+0xa48>)
    b30e:	990e      	ldr	r1, [sp, #56]	; 0x38
    b310:	4463      	add	r3, ip
    b312:	4299      	cmp	r1, r3
    b314:	d302      	bcc.n	b31c <__ssvfscanf_r+0x8dc>
    b316:	4b5d      	ldr	r3, [pc, #372]	; (b48c <__ssvfscanf_r+0xa4c>)
    b318:	4463      	add	r3, ip
    b31a:	930e      	str	r3, [sp, #56]	; 0x38
    b31c:	495c      	ldr	r1, [pc, #368]	; (b490 <__ssvfscanf_r+0xa50>)
    b31e:	980e      	ldr	r0, [sp, #56]	; 0x38
    b320:	f7fd fbd2 	bl	8ac8 <sprintf>
    b324:	e626      	b.n	af74 <__ssvfscanf_r+0x534>
    b326:	9a07      	ldr	r2, [sp, #28]
    b328:	4654      	mov	r4, sl
    b32a:	6813      	ldr	r3, [r2, #0]
    b32c:	601f      	str	r7, [r3, #0]
    b32e:	0013      	movs	r3, r2
    b330:	3304      	adds	r3, #4
    b332:	9307      	str	r3, [sp, #28]
    b334:	f7ff fbcb 	bl	aace <__ssvfscanf_r+0x8e>
    b338:	702b      	strb	r3, [r5, #0]
    b33a:	2200      	movs	r2, #0
    b33c:	9b05      	ldr	r3, [sp, #20]
    b33e:	990a      	ldr	r1, [sp, #40]	; 0x28
    b340:	4640      	mov	r0, r8
    b342:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b344:	47a0      	blx	r4
    b346:	464b      	mov	r3, r9
    b348:	069b      	lsls	r3, r3, #26
    b34a:	d500      	bpl.n	b34e <__ssvfscanf_r+0x90e>
    b34c:	e15b      	b.n	b606 <__ssvfscanf_r+0xbc6>
    b34e:	464b      	mov	r3, r9
    b350:	075b      	lsls	r3, r3, #29
    b352:	d500      	bpl.n	b356 <__ssvfscanf_r+0x916>
    b354:	e1c6      	b.n	b6e4 <__ssvfscanf_r+0xca4>
    b356:	464b      	mov	r3, r9
    b358:	07db      	lsls	r3, r3, #31
    b35a:	d500      	bpl.n	b35e <__ssvfscanf_r+0x91e>
    b35c:	e153      	b.n	b606 <__ssvfscanf_r+0xbc6>
    b35e:	464b      	mov	r3, r9
    b360:	079b      	lsls	r3, r3, #30
    b362:	d400      	bmi.n	b366 <__ssvfscanf_r+0x926>
    b364:	e14f      	b.n	b606 <__ssvfscanf_r+0xbc6>
    b366:	4b4b      	ldr	r3, [pc, #300]	; (b494 <__ssvfscanf_r+0xa54>)
    b368:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b36a:	429a      	cmp	r2, r3
    b36c:	d100      	bne.n	b370 <__ssvfscanf_r+0x930>
    b36e:	e1b2      	b.n	b6d6 <__ssvfscanf_r+0xc96>
    b370:	9b05      	ldr	r3, [sp, #20]
    b372:	2200      	movs	r2, #0
    b374:	990a      	ldr	r1, [sp, #40]	; 0x28
    b376:	4640      	mov	r0, r8
    b378:	f005 ff28 	bl	111cc <_strtoll_r>
    b37c:	9a07      	ldr	r2, [sp, #28]
    b37e:	6813      	ldr	r3, [r2, #0]
    b380:	6018      	str	r0, [r3, #0]
    b382:	6059      	str	r1, [r3, #4]
    b384:	0013      	movs	r3, r2
    b386:	3304      	adds	r3, #4
    b388:	9307      	str	r3, [sp, #28]
    b38a:	e142      	b.n	b612 <__ssvfscanf_r+0xbd2>
    b38c:	ab12      	add	r3, sp, #72	; 0x48
    b38e:	2208      	movs	r2, #8
    b390:	0018      	movs	r0, r3
    b392:	2100      	movs	r1, #0
    b394:	9306      	str	r3, [sp, #24]
    b396:	f7fd fa9f 	bl	88d8 <memset>
    b39a:	2310      	movs	r3, #16
    b39c:	464a      	mov	r2, r9
    b39e:	401a      	ands	r2, r3
    b3a0:	ab11      	add	r3, sp, #68	; 0x44
    b3a2:	4693      	mov	fp, r2
    b3a4:	4699      	mov	r9, r3
    b3a6:	2a00      	cmp	r2, #0
    b3a8:	d100      	bne.n	b3ac <__ssvfscanf_r+0x96c>
    b3aa:	e17f      	b.n	b6ac <__ssvfscanf_r+0xc6c>
    b3ac:	2300      	movs	r3, #0
    b3ae:	001d      	movs	r5, r3
    b3b0:	f003 fba0 	bl	eaf4 <__locale_ctype_ptr>
    b3b4:	2208      	movs	r2, #8
    b3b6:	6833      	ldr	r3, [r6, #0]
    b3b8:	781b      	ldrb	r3, [r3, #0]
    b3ba:	18c0      	adds	r0, r0, r3
    b3bc:	7843      	ldrb	r3, [r0, #1]
    b3be:	421a      	tst	r2, r3
    b3c0:	d102      	bne.n	b3c8 <__ssvfscanf_r+0x988>
    b3c2:	2c00      	cmp	r4, #0
    b3c4:	d000      	beq.n	b3c8 <__ssvfscanf_r+0x988>
    b3c6:	e194      	b.n	b6f2 <__ssvfscanf_r+0xcb2>
    b3c8:	465b      	mov	r3, fp
    b3ca:	2b00      	cmp	r3, #0
    b3cc:	d000      	beq.n	b3d0 <__ssvfscanf_r+0x990>
    b3ce:	e5e9      	b.n	afa4 <__ssvfscanf_r+0x564>
    b3d0:	464b      	mov	r3, r9
    b3d2:	465a      	mov	r2, fp
    b3d4:	601a      	str	r2, [r3, #0]
    b3d6:	e5e2      	b.n	af9e <__ssvfscanf_r+0x55e>
    b3d8:	9b07      	ldr	r3, [sp, #28]
    b3da:	3c01      	subs	r4, #1
    b3dc:	1d1a      	adds	r2, r3, #4
    b3de:	681b      	ldr	r3, [r3, #0]
    b3e0:	4693      	mov	fp, r2
    b3e2:	4699      	mov	r9, r3
    b3e4:	001a      	movs	r2, r3
    b3e6:	444c      	add	r4, r9
    b3e8:	ab14      	add	r3, sp, #80	; 0x50
    b3ea:	46ba      	mov	sl, r7
    b3ec:	001d      	movs	r5, r3
    b3ee:	0027      	movs	r7, r4
    b3f0:	6833      	ldr	r3, [r6, #0]
    b3f2:	7819      	ldrb	r1, [r3, #0]
    b3f4:	5c69      	ldrb	r1, [r5, r1]
    b3f6:	2900      	cmp	r1, #0
    b3f8:	d100      	bne.n	b3fc <__ssvfscanf_r+0x9bc>
    b3fa:	e13e      	b.n	b67a <__ssvfscanf_r+0xc3a>
    b3fc:	6871      	ldr	r1, [r6, #4]
    b3fe:	1c54      	adds	r4, r2, #1
    b400:	3901      	subs	r1, #1
    b402:	6071      	str	r1, [r6, #4]
    b404:	1c59      	adds	r1, r3, #1
    b406:	6031      	str	r1, [r6, #0]
    b408:	781b      	ldrb	r3, [r3, #0]
    b40a:	7013      	strb	r3, [r2, #0]
    b40c:	42ba      	cmp	r2, r7
    b40e:	d100      	bne.n	b412 <__ssvfscanf_r+0x9d2>
    b410:	e124      	b.n	b65c <__ssvfscanf_r+0xc1c>
    b412:	6873      	ldr	r3, [r6, #4]
    b414:	2b00      	cmp	r3, #0
    b416:	dd01      	ble.n	b41c <__ssvfscanf_r+0x9dc>
    b418:	0022      	movs	r2, r4
    b41a:	e7e9      	b.n	b3f0 <__ssvfscanf_r+0x9b0>
    b41c:	0031      	movs	r1, r6
    b41e:	4640      	mov	r0, r8
    b420:	f006 f964 	bl	116ec <__ssrefill_r>
    b424:	2800      	cmp	r0, #0
    b426:	d0f7      	beq.n	b418 <__ssvfscanf_r+0x9d8>
    b428:	4657      	mov	r7, sl
    b42a:	45a1      	cmp	r9, r4
    b42c:	d000      	beq.n	b430 <__ssvfscanf_r+0x9f0>
    b42e:	e116      	b.n	b65e <__ssvfscanf_r+0xc1e>
    b430:	f7ff fba0 	bl	ab74 <__ssvfscanf_r+0x134>
    b434:	ab12      	add	r3, sp, #72	; 0x48
    b436:	2208      	movs	r2, #8
    b438:	0018      	movs	r0, r3
    b43a:	2100      	movs	r1, #0
    b43c:	9306      	str	r3, [sp, #24]
    b43e:	f7fd fa4b 	bl	88d8 <memset>
    b442:	2310      	movs	r3, #16
    b444:	464a      	mov	r2, r9
    b446:	401a      	ands	r2, r3
    b448:	9204      	str	r2, [sp, #16]
    b44a:	d100      	bne.n	b44e <__ssvfscanf_r+0xa0e>
    b44c:	e124      	b.n	b698 <__ssvfscanf_r+0xc58>
    b44e:	2300      	movs	r3, #0
    b450:	469b      	mov	fp, r3
    b452:	2c00      	cmp	r4, #0
    b454:	d100      	bne.n	b458 <__ssvfscanf_r+0xa18>
    b456:	e5a5      	b.n	afa4 <__ssvfscanf_r+0x564>
    b458:	9b06      	ldr	r3, [sp, #24]
    b45a:	46b9      	mov	r9, r7
    b45c:	2500      	movs	r5, #0
    b45e:	0027      	movs	r7, r4
    b460:	469a      	mov	sl, r3
    b462:	e02a      	b.n	b4ba <__ssvfscanf_r+0xa7a>
    b464:	fffffea3 	.word	0xfffffea3
    b468:	000155e0 	.word	0x000155e0
    b46c:	fffffdff 	.word	0xfffffdff
    b470:	fffff47f 	.word	0xfffff47f
    b474:	00015720 	.word	0x00015720
    b478:	fffffc7f 	.word	0xfffffc7f
    b47c:	fffffeff 	.word	0xfffffeff
    b480:	fffffa7f 	.word	0xfffffa7f
    b484:	00009415 	.word	0x00009415
    b488:	0000026b 	.word	0x0000026b
    b48c:	0000026a 	.word	0x0000026a
    b490:	00015718 	.word	0x00015718
    b494:	0001133d 	.word	0x0001133d
    b498:	9b04      	ldr	r3, [sp, #16]
    b49a:	2b00      	cmp	r3, #0
    b49c:	d146      	bne.n	b52c <__ssvfscanf_r+0xaec>
    b49e:	465a      	mov	r2, fp
    b4a0:	44a1      	add	r9, r4
    b4a2:	6013      	str	r3, [r2, #0]
    b4a4:	3f01      	subs	r7, #1
    b4a6:	2304      	movs	r3, #4
    b4a8:	469c      	mov	ip, r3
    b4aa:	2500      	movs	r5, #0
    b4ac:	44e3      	add	fp, ip
    b4ae:	6873      	ldr	r3, [r6, #4]
    b4b0:	2b00      	cmp	r3, #0
    b4b2:	dd2f      	ble.n	b514 <__ssvfscanf_r+0xad4>
    b4b4:	2f00      	cmp	r7, #0
    b4b6:	d100      	bne.n	b4ba <__ssvfscanf_r+0xa7a>
    b4b8:	e0fe      	b.n	b6b8 <__ssvfscanf_r+0xc78>
    b4ba:	f003 fb07 	bl	eacc <__locale_mb_cur_max>
    b4be:	42a8      	cmp	r0, r5
    b4c0:	d101      	bne.n	b4c6 <__ssvfscanf_r+0xa86>
    b4c2:	f7ff fb57 	bl	ab74 <__ssvfscanf_r+0x134>
    b4c6:	208c      	movs	r0, #140	; 0x8c
    b4c8:	6833      	ldr	r3, [r6, #0]
    b4ca:	0040      	lsls	r0, r0, #1
    b4cc:	781a      	ldrb	r2, [r3, #0]
    b4ce:	3301      	adds	r3, #1
    b4d0:	6033      	str	r3, [r6, #0]
    b4d2:	4653      	mov	r3, sl
    b4d4:	a90e      	add	r1, sp, #56	; 0x38
    b4d6:	1809      	adds	r1, r1, r0
    b4d8:	554a      	strb	r2, [r1, r5]
    b4da:	6872      	ldr	r2, [r6, #4]
    b4dc:	1c6c      	adds	r4, r5, #1
    b4de:	3a01      	subs	r2, #1
    b4e0:	6072      	str	r2, [r6, #4]
    b4e2:	4659      	mov	r1, fp
    b4e4:	9300      	str	r3, [sp, #0]
    b4e6:	aa54      	add	r2, sp, #336	; 0x150
    b4e8:	0023      	movs	r3, r4
    b4ea:	4640      	mov	r0, r8
    b4ec:	f003 fe68 	bl	f1c0 <_mbrtowc_r>
    b4f0:	1c43      	adds	r3, r0, #1
    b4f2:	d101      	bne.n	b4f8 <__ssvfscanf_r+0xab8>
    b4f4:	f7ff fb3e 	bl	ab74 <__ssvfscanf_r+0x134>
    b4f8:	2800      	cmp	r0, #0
    b4fa:	d0cd      	beq.n	b498 <__ssvfscanf_r+0xa58>
    b4fc:	0025      	movs	r5, r4
    b4fe:	1c83      	adds	r3, r0, #2
    b500:	d0d5      	beq.n	b4ae <__ssvfscanf_r+0xa6e>
    b502:	9b04      	ldr	r3, [sp, #16]
    b504:	44a1      	add	r9, r4
    b506:	3f01      	subs	r7, #1
    b508:	2500      	movs	r5, #0
    b50a:	2b00      	cmp	r3, #0
    b50c:	d0cb      	beq.n	b4a6 <__ssvfscanf_r+0xa66>
    b50e:	6873      	ldr	r3, [r6, #4]
    b510:	2b00      	cmp	r3, #0
    b512:	dccf      	bgt.n	b4b4 <__ssvfscanf_r+0xa74>
    b514:	0031      	movs	r1, r6
    b516:	4640      	mov	r0, r8
    b518:	f006 f8e8 	bl	116ec <__ssrefill_r>
    b51c:	2800      	cmp	r0, #0
    b51e:	d0c9      	beq.n	b4b4 <__ssvfscanf_r+0xa74>
    b520:	464f      	mov	r7, r9
    b522:	2d00      	cmp	r5, #0
    b524:	d100      	bne.n	b528 <__ssvfscanf_r+0xae8>
    b526:	e0c8      	b.n	b6ba <__ssvfscanf_r+0xc7a>
    b528:	f7ff fb24 	bl	ab74 <__ssvfscanf_r+0x134>
    b52c:	44a1      	add	r9, r4
    b52e:	3f01      	subs	r7, #1
    b530:	2500      	movs	r5, #0
    b532:	e7bc      	b.n	b4ae <__ssvfscanf_r+0xa6e>
    b534:	003b      	movs	r3, r7
    b536:	4647      	mov	r7, r8
    b538:	4698      	mov	r8, r3
    b53a:	2d00      	cmp	r5, #0
    b53c:	d101      	bne.n	b542 <__ssvfscanf_r+0xb02>
    b53e:	f7ff fb19 	bl	ab74 <__ssvfscanf_r+0x134>
    b542:	197f      	adds	r7, r7, r5
    b544:	e52e      	b.n	afa4 <__ssvfscanf_r+0x564>
    b546:	9b07      	ldr	r3, [sp, #28]
    b548:	2201      	movs	r2, #1
    b54a:	6819      	ldr	r1, [r3, #0]
    b54c:	1d1d      	adds	r5, r3, #4
    b54e:	9600      	str	r6, [sp, #0]
    b550:	0023      	movs	r3, r4
    b552:	4640      	mov	r0, r8
    b554:	f006 f8ea 	bl	1172c <_sfread_r>
    b558:	2800      	cmp	r0, #0
    b55a:	d101      	bne.n	b560 <__ssvfscanf_r+0xb20>
    b55c:	f7ff fb0a 	bl	ab74 <__ssvfscanf_r+0x134>
    b560:	9b08      	ldr	r3, [sp, #32]
    b562:	183f      	adds	r7, r7, r0
    b564:	3301      	adds	r3, #1
    b566:	9308      	str	r3, [sp, #32]
    b568:	9b03      	ldr	r3, [sp, #12]
    b56a:	9507      	str	r5, [sp, #28]
    b56c:	469a      	mov	sl, r3
    b56e:	4654      	mov	r4, sl
    b570:	f7ff faad 	bl	aace <__ssvfscanf_r+0x8e>
    b574:	9b07      	ldr	r3, [sp, #28]
    b576:	46b9      	mov	r9, r7
    b578:	1d1a      	adds	r2, r3, #4
    b57a:	681b      	ldr	r3, [r3, #0]
    b57c:	3c01      	subs	r4, #1
    b57e:	469a      	mov	sl, r3
    b580:	9306      	str	r3, [sp, #24]
    b582:	001d      	movs	r5, r3
    b584:	2308      	movs	r3, #8
    b586:	469b      	mov	fp, r3
    b588:	9204      	str	r2, [sp, #16]
    b58a:	44a2      	add	sl, r4
    b58c:	f003 fab2 	bl	eaf4 <__locale_ctype_ptr>
    b590:	4659      	mov	r1, fp
    b592:	6833      	ldr	r3, [r6, #0]
    b594:	781a      	ldrb	r2, [r3, #0]
    b596:	1880      	adds	r0, r0, r2
    b598:	7842      	ldrb	r2, [r0, #1]
    b59a:	4211      	tst	r1, r2
    b59c:	d179      	bne.n	b692 <__ssvfscanf_r+0xc52>
    b59e:	6872      	ldr	r2, [r6, #4]
    b5a0:	1c6c      	adds	r4, r5, #1
    b5a2:	3a01      	subs	r2, #1
    b5a4:	6072      	str	r2, [r6, #4]
    b5a6:	1c5a      	adds	r2, r3, #1
    b5a8:	6032      	str	r2, [r6, #0]
    b5aa:	781b      	ldrb	r3, [r3, #0]
    b5ac:	0027      	movs	r7, r4
    b5ae:	702b      	strb	r3, [r5, #0]
    b5b0:	4555      	cmp	r5, sl
    b5b2:	d00a      	beq.n	b5ca <__ssvfscanf_r+0xb8a>
    b5b4:	6873      	ldr	r3, [r6, #4]
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	dd01      	ble.n	b5be <__ssvfscanf_r+0xb7e>
    b5ba:	0025      	movs	r5, r4
    b5bc:	e7e6      	b.n	b58c <__ssvfscanf_r+0xb4c>
    b5be:	0031      	movs	r1, r6
    b5c0:	4640      	mov	r0, r8
    b5c2:	f006 f893 	bl	116ec <__ssrefill_r>
    b5c6:	2800      	cmp	r0, #0
    b5c8:	d0f7      	beq.n	b5ba <__ssvfscanf_r+0xb7a>
    b5ca:	464b      	mov	r3, r9
    b5cc:	46b9      	mov	r9, r7
    b5ce:	001f      	movs	r7, r3
    b5d0:	2300      	movs	r3, #0
    b5d2:	464a      	mov	r2, r9
    b5d4:	7013      	strb	r3, [r2, #0]
    b5d6:	464b      	mov	r3, r9
    b5d8:	9a06      	ldr	r2, [sp, #24]
    b5da:	1a9b      	subs	r3, r3, r2
    b5dc:	18ff      	adds	r7, r7, r3
    b5de:	9b08      	ldr	r3, [sp, #32]
    b5e0:	3301      	adds	r3, #1
    b5e2:	9308      	str	r3, [sp, #32]
    b5e4:	9b04      	ldr	r3, [sp, #16]
    b5e6:	9307      	str	r3, [sp, #28]
    b5e8:	9b03      	ldr	r3, [sp, #12]
    b5ea:	469a      	mov	sl, r3
    b5ec:	4654      	mov	r4, sl
    b5ee:	f7ff fa6e 	bl	aace <__ssvfscanf_r+0x8e>
    b5f2:	0031      	movs	r1, r6
    b5f4:	4640      	mov	r0, r8
    b5f6:	f006 f879 	bl	116ec <__ssrefill_r>
    b5fa:	2800      	cmp	r0, #0
    b5fc:	d101      	bne.n	b602 <__ssvfscanf_r+0xbc2>
    b5fe:	f7ff fa94 	bl	ab2a <__ssvfscanf_r+0xea>
    b602:	f7ff fab7 	bl	ab74 <__ssvfscanf_r+0x134>
    b606:	9a07      	ldr	r2, [sp, #28]
    b608:	6813      	ldr	r3, [r2, #0]
    b60a:	6018      	str	r0, [r3, #0]
    b60c:	0013      	movs	r3, r2
    b60e:	3304      	adds	r3, #4
    b610:	9307      	str	r3, [sp, #28]
    b612:	9b08      	ldr	r3, [sp, #32]
    b614:	3301      	adds	r3, #1
    b616:	9308      	str	r3, [sp, #32]
    b618:	e5d6      	b.n	b1c8 <__ssvfscanf_r+0x788>
    b61a:	3d01      	subs	r5, #1
    b61c:	7829      	ldrb	r1, [r5, #0]
    b61e:	0032      	movs	r2, r6
    b620:	4640      	mov	r0, r8
    b622:	f006 f821 	bl	11668 <_sungetc_r>
    b626:	e5c6      	b.n	b1b6 <__ssvfscanf_r+0x776>
    b628:	4648      	mov	r0, r9
    b62a:	4b78      	ldr	r3, [pc, #480]	; (b80c <__ssvfscanf_r+0xdcc>)
    b62c:	4018      	ands	r0, r3
    b62e:	2301      	movs	r3, #1
    b630:	4681      	mov	r9, r0
    b632:	469b      	mov	fp, r3
    b634:	f7ff fbd5 	bl	ade2 <__ssvfscanf_r+0x3a2>
    b638:	4648      	mov	r0, r9
    b63a:	4b74      	ldr	r3, [pc, #464]	; (b80c <__ssvfscanf_r+0xdcc>)
    b63c:	4018      	ands	r0, r3
    b63e:	2301      	movs	r3, #1
    b640:	4681      	mov	r9, r0
    b642:	9304      	str	r3, [sp, #16]
    b644:	f7ff fbcd 	bl	ade2 <__ssvfscanf_r+0x3a2>
    b648:	464b      	mov	r3, r9
    b64a:	2102      	movs	r1, #2
    b64c:	4313      	orrs	r3, r2
    b64e:	4699      	mov	r9, r3
    b650:	468c      	mov	ip, r1
    b652:	4653      	mov	r3, sl
    b654:	44e2      	add	sl, ip
    b656:	789b      	ldrb	r3, [r3, #2]
    b658:	f7ff fa56 	bl	ab08 <__ssvfscanf_r+0xc8>
    b65c:	4657      	mov	r7, sl
    b65e:	464b      	mov	r3, r9
    b660:	1ae5      	subs	r5, r4, r3
    b662:	d101      	bne.n	b668 <__ssvfscanf_r+0xc28>
    b664:	f7ff fa39 	bl	aada <__ssvfscanf_r+0x9a>
    b668:	2300      	movs	r3, #0
    b66a:	7023      	strb	r3, [r4, #0]
    b66c:	9b08      	ldr	r3, [sp, #32]
    b66e:	197f      	adds	r7, r7, r5
    b670:	3301      	adds	r3, #1
    b672:	9308      	str	r3, [sp, #32]
    b674:	465b      	mov	r3, fp
    b676:	9307      	str	r3, [sp, #28]
    b678:	e494      	b.n	afa4 <__ssvfscanf_r+0x564>
    b67a:	4657      	mov	r7, sl
    b67c:	0014      	movs	r4, r2
    b67e:	e7ee      	b.n	b65e <__ssvfscanf_r+0xc1e>
    b680:	9b06      	ldr	r3, [sp, #24]
    b682:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b684:	1a9a      	subs	r2, r3, r2
    b686:	d100      	bne.n	b68a <__ssvfscanf_r+0xc4a>
    b688:	e474      	b.n	af74 <__ssvfscanf_r+0x534>
    b68a:	465b      	mov	r3, fp
    b68c:	4252      	negs	r2, r2
    b68e:	930e      	str	r3, [sp, #56]	; 0x38
    b690:	e63a      	b.n	b308 <__ssvfscanf_r+0x8c8>
    b692:	464f      	mov	r7, r9
    b694:	46a9      	mov	r9, r5
    b696:	e79b      	b.n	b5d0 <__ssvfscanf_r+0xb90>
    b698:	9a07      	ldr	r2, [sp, #28]
    b69a:	0013      	movs	r3, r2
    b69c:	6812      	ldr	r2, [r2, #0]
    b69e:	3304      	adds	r3, #4
    b6a0:	4693      	mov	fp, r2
    b6a2:	9307      	str	r3, [sp, #28]
    b6a4:	2c00      	cmp	r4, #0
    b6a6:	d000      	beq.n	b6aa <__ssvfscanf_r+0xc6a>
    b6a8:	e6d6      	b.n	b458 <__ssvfscanf_r+0xa18>
    b6aa:	e478      	b.n	af9e <__ssvfscanf_r+0x55e>
    b6ac:	9b07      	ldr	r3, [sp, #28]
    b6ae:	681a      	ldr	r2, [r3, #0]
    b6b0:	3304      	adds	r3, #4
    b6b2:	4691      	mov	r9, r2
    b6b4:	9307      	str	r3, [sp, #28]
    b6b6:	e679      	b.n	b3ac <__ssvfscanf_r+0x96c>
    b6b8:	464f      	mov	r7, r9
    b6ba:	9b04      	ldr	r3, [sp, #16]
    b6bc:	2b00      	cmp	r3, #0
    b6be:	d100      	bne.n	b6c2 <__ssvfscanf_r+0xc82>
    b6c0:	e46d      	b.n	af9e <__ssvfscanf_r+0x55e>
    b6c2:	e46f      	b.n	afa4 <__ssvfscanf_r+0x564>
    b6c4:	9b07      	ldr	r3, [sp, #28]
    b6c6:	4654      	mov	r4, sl
    b6c8:	681a      	ldr	r2, [r3, #0]
    b6ca:	3304      	adds	r3, #4
    b6cc:	9203      	str	r2, [sp, #12]
    b6ce:	8017      	strh	r7, [r2, #0]
    b6d0:	9307      	str	r3, [sp, #28]
    b6d2:	f7ff f9fc 	bl	aace <__ssvfscanf_r+0x8e>
    b6d6:	9b05      	ldr	r3, [sp, #20]
    b6d8:	2200      	movs	r2, #0
    b6da:	990a      	ldr	r1, [sp, #40]	; 0x28
    b6dc:	4640      	mov	r0, r8
    b6de:	f005 ff21 	bl	11524 <_strtoull_r>
    b6e2:	e64b      	b.n	b37c <__ssvfscanf_r+0x93c>
    b6e4:	9b07      	ldr	r3, [sp, #28]
    b6e6:	681a      	ldr	r2, [r3, #0]
    b6e8:	3304      	adds	r3, #4
    b6ea:	9204      	str	r2, [sp, #16]
    b6ec:	8010      	strh	r0, [r2, #0]
    b6ee:	9307      	str	r3, [sp, #28]
    b6f0:	e78f      	b.n	b612 <__ssvfscanf_r+0xbd2>
    b6f2:	f003 f9eb 	bl	eacc <__locale_mb_cur_max>
    b6f6:	4285      	cmp	r5, r0
    b6f8:	d101      	bne.n	b6fe <__ssvfscanf_r+0xcbe>
    b6fa:	f7ff fa3b 	bl	ab74 <__ssvfscanf_r+0x134>
    b6fe:	208c      	movs	r0, #140	; 0x8c
    b700:	1c6b      	adds	r3, r5, #1
    b702:	469a      	mov	sl, r3
    b704:	6833      	ldr	r3, [r6, #0]
    b706:	0040      	lsls	r0, r0, #1
    b708:	781a      	ldrb	r2, [r3, #0]
    b70a:	a90e      	add	r1, sp, #56	; 0x38
    b70c:	1809      	adds	r1, r1, r0
    b70e:	554a      	strb	r2, [r1, r5]
    b710:	3301      	adds	r3, #1
    b712:	6872      	ldr	r2, [r6, #4]
    b714:	6033      	str	r3, [r6, #0]
    b716:	9b06      	ldr	r3, [sp, #24]
    b718:	3a01      	subs	r2, #1
    b71a:	6072      	str	r2, [r6, #4]
    b71c:	4649      	mov	r1, r9
    b71e:	9300      	str	r3, [sp, #0]
    b720:	aa54      	add	r2, sp, #336	; 0x150
    b722:	4653      	mov	r3, sl
    b724:	4640      	mov	r0, r8
    b726:	f003 fd4b 	bl	f1c0 <_mbrtowc_r>
    b72a:	1c43      	adds	r3, r0, #1
    b72c:	d101      	bne.n	b732 <__ssvfscanf_r+0xcf2>
    b72e:	f7ff fa21 	bl	ab74 <__ssvfscanf_r+0x134>
    b732:	2800      	cmp	r0, #0
    b734:	d001      	beq.n	b73a <__ssvfscanf_r+0xcfa>
    b736:	f7ff fa07 	bl	ab48 <__ssvfscanf_r+0x108>
    b73a:	464b      	mov	r3, r9
    b73c:	6018      	str	r0, [r3, #0]
    b73e:	f003 f9b9 	bl	eab4 <iswspace>
    b742:	1e05      	subs	r5, r0, #0
    b744:	d012      	beq.n	b76c <__ssvfscanf_r+0xd2c>
    b746:	4655      	mov	r5, sl
    b748:	2d00      	cmp	r5, #0
    b74a:	d100      	bne.n	b74e <__ssvfscanf_r+0xd0e>
    b74c:	e63c      	b.n	b3c8 <__ssvfscanf_r+0x988>
    b74e:	4644      	mov	r4, r8
    b750:	228c      	movs	r2, #140	; 0x8c
    b752:	ab0e      	add	r3, sp, #56	; 0x38
    b754:	0052      	lsls	r2, r2, #1
    b756:	3d01      	subs	r5, #1
    b758:	189b      	adds	r3, r3, r2
    b75a:	5d59      	ldrb	r1, [r3, r5]
    b75c:	0032      	movs	r2, r6
    b75e:	0020      	movs	r0, r4
    b760:	f005 ff82 	bl	11668 <_sungetc_r>
    b764:	2d00      	cmp	r5, #0
    b766:	d1f3      	bne.n	b750 <__ssvfscanf_r+0xd10>
    b768:	46a0      	mov	r8, r4
    b76a:	e62d      	b.n	b3c8 <__ssvfscanf_r+0x988>
    b76c:	465b      	mov	r3, fp
    b76e:	4457      	add	r7, sl
    b770:	3c01      	subs	r4, #1
    b772:	2b00      	cmp	r3, #0
    b774:	d001      	beq.n	b77a <__ssvfscanf_r+0xd3a>
    b776:	f7ff f9ec 	bl	ab52 <__ssvfscanf_r+0x112>
    b77a:	3304      	adds	r3, #4
    b77c:	469c      	mov	ip, r3
    b77e:	465d      	mov	r5, fp
    b780:	44e1      	add	r9, ip
    b782:	f7ff f9e6 	bl	ab52 <__ssvfscanf_r+0x112>
    b786:	464b      	mov	r3, r9
    b788:	6818      	ldr	r0, [r3, #0]
    b78a:	e7d8      	b.n	b73e <__ssvfscanf_r+0xcfe>
    b78c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b78e:	459b      	cmp	fp, r3
    b790:	d801      	bhi.n	b796 <__ssvfscanf_r+0xd56>
    b792:	f7ff f9a2 	bl	aada <__ssvfscanf_r+0x9a>
    b796:	465c      	mov	r4, fp
    b798:	4645      	mov	r5, r8
    b79a:	3c01      	subs	r4, #1
    b79c:	7821      	ldrb	r1, [r4, #0]
    b79e:	0032      	movs	r2, r6
    b7a0:	0028      	movs	r0, r5
    b7a2:	f005 ff61 	bl	11668 <_sungetc_r>
    b7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7a8:	429c      	cmp	r4, r3
    b7aa:	d1f6      	bne.n	b79a <__ssvfscanf_r+0xd5a>
    b7ac:	f7ff f995 	bl	aada <__ssvfscanf_r+0x9a>
    b7b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7b2:	465c      	mov	r4, fp
    b7b4:	4645      	mov	r5, r8
    b7b6:	459b      	cmp	fp, r3
    b7b8:	d801      	bhi.n	b7be <__ssvfscanf_r+0xd7e>
    b7ba:	f7ff f98e 	bl	aada <__ssvfscanf_r+0x9a>
    b7be:	3c01      	subs	r4, #1
    b7c0:	7821      	ldrb	r1, [r4, #0]
    b7c2:	0032      	movs	r2, r6
    b7c4:	0028      	movs	r0, r5
    b7c6:	f005 ff4f 	bl	11668 <_sungetc_r>
    b7ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7cc:	429c      	cmp	r4, r3
    b7ce:	d1f6      	bne.n	b7be <__ssvfscanf_r+0xd7e>
    b7d0:	f7ff f983 	bl	aada <__ssvfscanf_r+0x9a>
    b7d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7d6:	459b      	cmp	fp, r3
    b7d8:	d801      	bhi.n	b7de <__ssvfscanf_r+0xd9e>
    b7da:	f7ff f97e 	bl	aada <__ssvfscanf_r+0x9a>
    b7de:	465c      	mov	r4, fp
    b7e0:	4645      	mov	r5, r8
    b7e2:	3c01      	subs	r4, #1
    b7e4:	7821      	ldrb	r1, [r4, #0]
    b7e6:	0032      	movs	r2, r6
    b7e8:	0028      	movs	r0, r5
    b7ea:	f005 ff3d 	bl	11668 <_sungetc_r>
    b7ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b7f0:	429c      	cmp	r4, r3
    b7f2:	d1f6      	bne.n	b7e2 <__ssvfscanf_r+0xda2>
    b7f4:	f7ff f971 	bl	aada <__ssvfscanf_r+0x9a>
    b7f8:	2000      	movs	r0, #0
    b7fa:	f004 fc91 	bl	10120 <nanf>
    b7fe:	464b      	mov	r3, r9
    b800:	6018      	str	r0, [r3, #0]
    b802:	4653      	mov	r3, sl
    b804:	9307      	str	r3, [sp, #28]
    b806:	f7ff fbca 	bl	af9e <__ssvfscanf_r+0x55e>
    b80a:	46c0      	nop			; (mov r8, r8)
    b80c:	fffff87f 	.word	0xfffff87f

0000b810 <_vfprintf_r>:
    b810:	b5f0      	push	{r4, r5, r6, r7, lr}
    b812:	46de      	mov	lr, fp
    b814:	464e      	mov	r6, r9
    b816:	4645      	mov	r5, r8
    b818:	4657      	mov	r7, sl
    b81a:	b5e0      	push	{r5, r6, r7, lr}
    b81c:	b0c3      	sub	sp, #268	; 0x10c
    b81e:	4689      	mov	r9, r1
    b820:	0014      	movs	r4, r2
    b822:	001d      	movs	r5, r3
    b824:	930f      	str	r3, [sp, #60]	; 0x3c
    b826:	0006      	movs	r6, r0
    b828:	9006      	str	r0, [sp, #24]
    b82a:	f003 f973 	bl	eb14 <_localeconv_r>
    b82e:	6803      	ldr	r3, [r0, #0]
    b830:	0018      	movs	r0, r3
    b832:	9318      	str	r3, [sp, #96]	; 0x60
    b834:	f7fd fabe 	bl	8db4 <strlen>
    b838:	9017      	str	r0, [sp, #92]	; 0x5c
    b83a:	2e00      	cmp	r6, #0
    b83c:	d004      	beq.n	b848 <_vfprintf_r+0x38>
    b83e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    b840:	9307      	str	r3, [sp, #28]
    b842:	2b00      	cmp	r3, #0
    b844:	d100      	bne.n	b848 <_vfprintf_r+0x38>
    b846:	e0a7      	b.n	b998 <_vfprintf_r+0x188>
    b848:	464b      	mov	r3, r9
    b84a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b84c:	07db      	lsls	r3, r3, #31
    b84e:	d478      	bmi.n	b942 <_vfprintf_r+0x132>
    b850:	464b      	mov	r3, r9
    b852:	210c      	movs	r1, #12
    b854:	5e59      	ldrsh	r1, [r3, r1]
    b856:	b28b      	uxth	r3, r1
    b858:	059a      	lsls	r2, r3, #22
    b85a:	d56e      	bpl.n	b93a <_vfprintf_r+0x12a>
    b85c:	2280      	movs	r2, #128	; 0x80
    b85e:	0192      	lsls	r2, r2, #6
    b860:	4213      	tst	r3, r2
    b862:	d109      	bne.n	b878 <_vfprintf_r+0x68>
    b864:	430a      	orrs	r2, r1
    b866:	464b      	mov	r3, r9
    b868:	4649      	mov	r1, r9
    b86a:	819a      	strh	r2, [r3, #12]
    b86c:	6e49      	ldr	r1, [r1, #100]	; 0x64
    b86e:	4bcc      	ldr	r3, [pc, #816]	; (bba0 <_vfprintf_r+0x390>)
    b870:	400b      	ands	r3, r1
    b872:	4649      	mov	r1, r9
    b874:	664b      	str	r3, [r1, #100]	; 0x64
    b876:	b293      	uxth	r3, r2
    b878:	071a      	lsls	r2, r3, #28
    b87a:	d567      	bpl.n	b94c <_vfprintf_r+0x13c>
    b87c:	464a      	mov	r2, r9
    b87e:	6912      	ldr	r2, [r2, #16]
    b880:	2a00      	cmp	r2, #0
    b882:	d063      	beq.n	b94c <_vfprintf_r+0x13c>
    b884:	221a      	movs	r2, #26
    b886:	401a      	ands	r2, r3
    b888:	2a0a      	cmp	r2, #10
    b88a:	d100      	bne.n	b88e <_vfprintf_r+0x7e>
    b88c:	e088      	b.n	b9a0 <_vfprintf_r+0x190>
    b88e:	ab32      	add	r3, sp, #200	; 0xc8
    b890:	9325      	str	r3, [sp, #148]	; 0x94
    b892:	2300      	movs	r3, #0
    b894:	46cb      	mov	fp, r9
    b896:	af25      	add	r7, sp, #148	; 0x94
    b898:	60bb      	str	r3, [r7, #8]
    b89a:	607b      	str	r3, [r7, #4]
    b89c:	9407      	str	r4, [sp, #28]
    b89e:	9314      	str	r3, [sp, #80]	; 0x50
    b8a0:	9316      	str	r3, [sp, #88]	; 0x58
    b8a2:	9315      	str	r3, [sp, #84]	; 0x54
    b8a4:	ae32      	add	r6, sp, #200	; 0xc8
    b8a6:	9319      	str	r3, [sp, #100]	; 0x64
    b8a8:	931a      	str	r3, [sp, #104]	; 0x68
    b8aa:	930a      	str	r3, [sp, #40]	; 0x28
    b8ac:	9c07      	ldr	r4, [sp, #28]
    b8ae:	7823      	ldrb	r3, [r4, #0]
    b8b0:	2b00      	cmp	r3, #0
    b8b2:	d101      	bne.n	b8b8 <_vfprintf_r+0xa8>
    b8b4:	f000 fd9e 	bl	c3f4 <_vfprintf_r+0xbe4>
    b8b8:	2b25      	cmp	r3, #37	; 0x25
    b8ba:	d103      	bne.n	b8c4 <_vfprintf_r+0xb4>
    b8bc:	f000 fd9a 	bl	c3f4 <_vfprintf_r+0xbe4>
    b8c0:	2b25      	cmp	r3, #37	; 0x25
    b8c2:	d003      	beq.n	b8cc <_vfprintf_r+0xbc>
    b8c4:	3401      	adds	r4, #1
    b8c6:	7823      	ldrb	r3, [r4, #0]
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d1f9      	bne.n	b8c0 <_vfprintf_r+0xb0>
    b8cc:	9b07      	ldr	r3, [sp, #28]
    b8ce:	1ae5      	subs	r5, r4, r3
    b8d0:	d010      	beq.n	b8f4 <_vfprintf_r+0xe4>
    b8d2:	9b07      	ldr	r3, [sp, #28]
    b8d4:	6075      	str	r5, [r6, #4]
    b8d6:	6033      	str	r3, [r6, #0]
    b8d8:	68bb      	ldr	r3, [r7, #8]
    b8da:	195b      	adds	r3, r3, r5
    b8dc:	60bb      	str	r3, [r7, #8]
    b8de:	687b      	ldr	r3, [r7, #4]
    b8e0:	3301      	adds	r3, #1
    b8e2:	607b      	str	r3, [r7, #4]
    b8e4:	2b07      	cmp	r3, #7
    b8e6:	dc4c      	bgt.n	b982 <_vfprintf_r+0x172>
    b8e8:	3608      	adds	r6, #8
    b8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b8ec:	469c      	mov	ip, r3
    b8ee:	44ac      	add	ip, r5
    b8f0:	4663      	mov	r3, ip
    b8f2:	930a      	str	r3, [sp, #40]	; 0x28
    b8f4:	7823      	ldrb	r3, [r4, #0]
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d101      	bne.n	b8fe <_vfprintf_r+0xee>
    b8fa:	f000 fc99 	bl	c230 <_vfprintf_r+0xa20>
    b8fe:	1c63      	adds	r3, r4, #1
    b900:	9307      	str	r3, [sp, #28]
    b902:	2300      	movs	r3, #0
    b904:	aa16      	add	r2, sp, #88	; 0x58
    b906:	77d3      	strb	r3, [r2, #31]
    b908:	2201      	movs	r2, #1
    b90a:	4252      	negs	r2, r2
    b90c:	4692      	mov	sl, r2
    b90e:	2200      	movs	r2, #0
    b910:	920b      	str	r2, [sp, #44]	; 0x2c
    b912:	3220      	adds	r2, #32
    b914:	4691      	mov	r9, r2
    b916:	3220      	adds	r2, #32
    b918:	7863      	ldrb	r3, [r4, #1]
    b91a:	2100      	movs	r1, #0
    b91c:	2000      	movs	r0, #0
    b91e:	2400      	movs	r4, #0
    b920:	4694      	mov	ip, r2
    b922:	9a07      	ldr	r2, [sp, #28]
    b924:	3201      	adds	r2, #1
    b926:	9207      	str	r2, [sp, #28]
    b928:	001a      	movs	r2, r3
    b92a:	3a20      	subs	r2, #32
    b92c:	2a58      	cmp	r2, #88	; 0x58
    b92e:	d900      	bls.n	b932 <_vfprintf_r+0x122>
    b930:	e2e7      	b.n	bf02 <_vfprintf_r+0x6f2>
    b932:	4d9c      	ldr	r5, [pc, #624]	; (bba4 <_vfprintf_r+0x394>)
    b934:	0092      	lsls	r2, r2, #2
    b936:	58aa      	ldr	r2, [r5, r2]
    b938:	4697      	mov	pc, r2
    b93a:	464b      	mov	r3, r9
    b93c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b93e:	f003 f8fb 	bl	eb38 <__retarget_lock_acquire_recursive>
    b942:	464b      	mov	r3, r9
    b944:	210c      	movs	r1, #12
    b946:	5e59      	ldrsh	r1, [r3, r1]
    b948:	b28b      	uxth	r3, r1
    b94a:	e787      	b.n	b85c <_vfprintf_r+0x4c>
    b94c:	4649      	mov	r1, r9
    b94e:	9806      	ldr	r0, [sp, #24]
    b950:	f001 fb80 	bl	d054 <__swsetup_r>
    b954:	464b      	mov	r3, r9
    b956:	2800      	cmp	r0, #0
    b958:	d03a      	beq.n	b9d0 <_vfprintf_r+0x1c0>
    b95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    b95c:	07db      	lsls	r3, r3, #31
    b95e:	d405      	bmi.n	b96c <_vfprintf_r+0x15c>
    b960:	464b      	mov	r3, r9
    b962:	899b      	ldrh	r3, [r3, #12]
    b964:	059b      	lsls	r3, r3, #22
    b966:	d401      	bmi.n	b96c <_vfprintf_r+0x15c>
    b968:	f000 ffcf 	bl	c90a <_vfprintf_r+0x10fa>
    b96c:	2301      	movs	r3, #1
    b96e:	425b      	negs	r3, r3
    b970:	930a      	str	r3, [sp, #40]	; 0x28
    b972:	980a      	ldr	r0, [sp, #40]	; 0x28
    b974:	b043      	add	sp, #268	; 0x10c
    b976:	bc3c      	pop	{r2, r3, r4, r5}
    b978:	4690      	mov	r8, r2
    b97a:	4699      	mov	r9, r3
    b97c:	46a2      	mov	sl, r4
    b97e:	46ab      	mov	fp, r5
    b980:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b982:	003a      	movs	r2, r7
    b984:	4659      	mov	r1, fp
    b986:	9806      	ldr	r0, [sp, #24]
    b988:	f005 ff9c 	bl	118c4 <__sprint_r>
    b98c:	2800      	cmp	r0, #0
    b98e:	d001      	beq.n	b994 <_vfprintf_r+0x184>
    b990:	f000 fcce 	bl	c330 <_vfprintf_r+0xb20>
    b994:	ae32      	add	r6, sp, #200	; 0xc8
    b996:	e7a8      	b.n	b8ea <_vfprintf_r+0xda>
    b998:	9806      	ldr	r0, [sp, #24]
    b99a:	f002 fd5b 	bl	e454 <__sinit>
    b99e:	e753      	b.n	b848 <_vfprintf_r+0x38>
    b9a0:	464a      	mov	r2, r9
    b9a2:	210e      	movs	r1, #14
    b9a4:	5e52      	ldrsh	r2, [r2, r1]
    b9a6:	2a00      	cmp	r2, #0
    b9a8:	da00      	bge.n	b9ac <_vfprintf_r+0x19c>
    b9aa:	e770      	b.n	b88e <_vfprintf_r+0x7e>
    b9ac:	464a      	mov	r2, r9
    b9ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
    b9b0:	07d2      	lsls	r2, r2, #31
    b9b2:	d405      	bmi.n	b9c0 <_vfprintf_r+0x1b0>
    b9b4:	059b      	lsls	r3, r3, #22
    b9b6:	d403      	bmi.n	b9c0 <_vfprintf_r+0x1b0>
    b9b8:	464b      	mov	r3, r9
    b9ba:	6d98      	ldr	r0, [r3, #88]	; 0x58
    b9bc:	f003 f8be 	bl	eb3c <__retarget_lock_release_recursive>
    b9c0:	002b      	movs	r3, r5
    b9c2:	0022      	movs	r2, r4
    b9c4:	4649      	mov	r1, r9
    b9c6:	9806      	ldr	r0, [sp, #24]
    b9c8:	f001 fa8e 	bl	cee8 <__sbprintf>
    b9cc:	900a      	str	r0, [sp, #40]	; 0x28
    b9ce:	e7d0      	b.n	b972 <_vfprintf_r+0x162>
    b9d0:	899b      	ldrh	r3, [r3, #12]
    b9d2:	e757      	b.n	b884 <_vfprintf_r+0x74>
    b9d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b9d6:	920f      	str	r2, [sp, #60]	; 0x3c
    b9d8:	425b      	negs	r3, r3
    b9da:	930b      	str	r3, [sp, #44]	; 0x2c
    b9dc:	2304      	movs	r3, #4
    b9de:	431c      	orrs	r4, r3
    b9e0:	9b07      	ldr	r3, [sp, #28]
    b9e2:	781b      	ldrb	r3, [r3, #0]
    b9e4:	e79d      	b.n	b922 <_vfprintf_r+0x112>
    b9e6:	9b07      	ldr	r3, [sp, #28]
    b9e8:	2101      	movs	r1, #1
    b9ea:	781b      	ldrb	r3, [r3, #0]
    b9ec:	202b      	movs	r0, #43	; 0x2b
    b9ee:	e798      	b.n	b922 <_vfprintf_r+0x112>
    b9f0:	9b07      	ldr	r3, [sp, #28]
    b9f2:	1c5a      	adds	r2, r3, #1
    b9f4:	781b      	ldrb	r3, [r3, #0]
    b9f6:	4690      	mov	r8, r2
    b9f8:	2b2a      	cmp	r3, #42	; 0x2a
    b9fa:	d101      	bne.n	ba00 <_vfprintf_r+0x1f0>
    b9fc:	f001 fa38 	bl	ce70 <_vfprintf_r+0x1660>
    ba00:	001a      	movs	r2, r3
    ba02:	2500      	movs	r5, #0
    ba04:	3a30      	subs	r2, #48	; 0x30
    ba06:	46aa      	mov	sl, r5
    ba08:	2a09      	cmp	r2, #9
    ba0a:	d901      	bls.n	ba10 <_vfprintf_r+0x200>
    ba0c:	f001 f96d 	bl	ccea <_vfprintf_r+0x14da>
    ba10:	0025      	movs	r5, r4
    ba12:	4643      	mov	r3, r8
    ba14:	4654      	mov	r4, sl
    ba16:	4688      	mov	r8, r1
    ba18:	4682      	mov	sl, r0
    ba1a:	00a1      	lsls	r1, r4, #2
    ba1c:	190c      	adds	r4, r1, r4
    ba1e:	7818      	ldrb	r0, [r3, #0]
    ba20:	0064      	lsls	r4, r4, #1
    ba22:	18a4      	adds	r4, r4, r2
    ba24:	0002      	movs	r2, r0
    ba26:	1c59      	adds	r1, r3, #1
    ba28:	3a30      	subs	r2, #48	; 0x30
    ba2a:	000b      	movs	r3, r1
    ba2c:	2a09      	cmp	r2, #9
    ba2e:	d9f4      	bls.n	ba1a <_vfprintf_r+0x20a>
    ba30:	9107      	str	r1, [sp, #28]
    ba32:	0003      	movs	r3, r0
    ba34:	4641      	mov	r1, r8
    ba36:	4650      	mov	r0, sl
    ba38:	46a2      	mov	sl, r4
    ba3a:	002c      	movs	r4, r5
    ba3c:	e774      	b.n	b928 <_vfprintf_r+0x118>
    ba3e:	9312      	str	r3, [sp, #72]	; 0x48
    ba40:	2900      	cmp	r1, #0
    ba42:	d001      	beq.n	ba48 <_vfprintf_r+0x238>
    ba44:	f001 fa2e 	bl	cea4 <_vfprintf_r+0x1694>
    ba48:	4b57      	ldr	r3, [pc, #348]	; (bba8 <_vfprintf_r+0x398>)
    ba4a:	9319      	str	r3, [sp, #100]	; 0x64
    ba4c:	06a3      	lsls	r3, r4, #26
    ba4e:	d501      	bpl.n	ba54 <_vfprintf_r+0x244>
    ba50:	f000 fe9a 	bl	c788 <_vfprintf_r+0xf78>
    ba54:	06e3      	lsls	r3, r4, #27
    ba56:	d501      	bpl.n	ba5c <_vfprintf_r+0x24c>
    ba58:	f000 fd9a 	bl	c590 <_vfprintf_r+0xd80>
    ba5c:	0663      	lsls	r3, r4, #25
    ba5e:	d401      	bmi.n	ba64 <_vfprintf_r+0x254>
    ba60:	f000 fd96 	bl	c590 <_vfprintf_r+0xd80>
    ba64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ba66:	881a      	ldrh	r2, [r3, #0]
    ba68:	920c      	str	r2, [sp, #48]	; 0x30
    ba6a:	2200      	movs	r2, #0
    ba6c:	3304      	adds	r3, #4
    ba6e:	920d      	str	r2, [sp, #52]	; 0x34
    ba70:	930f      	str	r3, [sp, #60]	; 0x3c
    ba72:	07e3      	lsls	r3, r4, #31
    ba74:	d401      	bmi.n	ba7a <_vfprintf_r+0x26a>
    ba76:	f000 fd76 	bl	c566 <_vfprintf_r+0xd56>
    ba7a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ba7e:	000b      	movs	r3, r1
    ba80:	4313      	orrs	r3, r2
    ba82:	001a      	movs	r2, r3
    ba84:	2302      	movs	r3, #2
    ba86:	2a00      	cmp	r2, #0
    ba88:	d008      	beq.n	ba9c <_vfprintf_r+0x28c>
    ba8a:	2030      	movs	r0, #48	; 0x30
    ba8c:	a91e      	add	r1, sp, #120	; 0x78
    ba8e:	7008      	strb	r0, [r1, #0]
    ba90:	2548      	movs	r5, #72	; 0x48
    ba92:	4668      	mov	r0, sp
    ba94:	1940      	adds	r0, r0, r5
    ba96:	7800      	ldrb	r0, [r0, #0]
    ba98:	431c      	orrs	r4, r3
    ba9a:	7048      	strb	r0, [r1, #1]
    ba9c:	2100      	movs	r1, #0
    ba9e:	4688      	mov	r8, r1
    baa0:	a816      	add	r0, sp, #88	; 0x58
    baa2:	77c1      	strb	r1, [r0, #31]
    baa4:	4651      	mov	r1, sl
    baa6:	3101      	adds	r1, #1
    baa8:	d100      	bne.n	baac <_vfprintf_r+0x29c>
    baaa:	e0e6      	b.n	bc7a <_vfprintf_r+0x46a>
    baac:	2180      	movs	r1, #128	; 0x80
    baae:	0020      	movs	r0, r4
    bab0:	4388      	bics	r0, r1
    bab2:	9009      	str	r0, [sp, #36]	; 0x24
    bab4:	2a00      	cmp	r2, #0
    bab6:	d000      	beq.n	baba <_vfprintf_r+0x2aa>
    bab8:	e0e3      	b.n	bc82 <_vfprintf_r+0x472>
    baba:	4652      	mov	r2, sl
    babc:	2a00      	cmp	r2, #0
    babe:	d001      	beq.n	bac4 <_vfprintf_r+0x2b4>
    bac0:	f000 fc38 	bl	c334 <_vfprintf_r+0xb24>
    bac4:	2b00      	cmp	r3, #0
    bac6:	d001      	beq.n	bacc <_vfprintf_r+0x2bc>
    bac8:	f000 fd0c 	bl	c4e4 <_vfprintf_r+0xcd4>
    bacc:	2001      	movs	r0, #1
    bace:	ab32      	add	r3, sp, #200	; 0xc8
    bad0:	4020      	ands	r0, r4
    bad2:	900e      	str	r0, [sp, #56]	; 0x38
    bad4:	9311      	str	r3, [sp, #68]	; 0x44
    bad6:	d008      	beq.n	baea <_vfprintf_r+0x2da>
    bad8:	2327      	movs	r3, #39	; 0x27
    bada:	2130      	movs	r1, #48	; 0x30
    badc:	aa28      	add	r2, sp, #160	; 0xa0
    bade:	54d1      	strb	r1, [r2, r3]
    bae0:	aa16      	add	r2, sp, #88	; 0x58
    bae2:	4694      	mov	ip, r2
    bae4:	3348      	adds	r3, #72	; 0x48
    bae6:	4463      	add	r3, ip
    bae8:	9311      	str	r3, [sp, #68]	; 0x44
    baea:	4653      	mov	r3, sl
    baec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    baee:	9308      	str	r3, [sp, #32]
    baf0:	4592      	cmp	sl, r2
    baf2:	da00      	bge.n	baf6 <_vfprintf_r+0x2e6>
    baf4:	9208      	str	r2, [sp, #32]
    baf6:	2300      	movs	r3, #0
    baf8:	9313      	str	r3, [sp, #76]	; 0x4c
    bafa:	4643      	mov	r3, r8
    bafc:	2b00      	cmp	r3, #0
    bafe:	d002      	beq.n	bb06 <_vfprintf_r+0x2f6>
    bb00:	9b08      	ldr	r3, [sp, #32]
    bb02:	3301      	adds	r3, #1
    bb04:	9308      	str	r3, [sp, #32]
    bb06:	2302      	movs	r3, #2
    bb08:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb0a:	401a      	ands	r2, r3
    bb0c:	4691      	mov	r9, r2
    bb0e:	d002      	beq.n	bb16 <_vfprintf_r+0x306>
    bb10:	9b08      	ldr	r3, [sp, #32]
    bb12:	3302      	adds	r3, #2
    bb14:	9308      	str	r3, [sp, #32]
    bb16:	2384      	movs	r3, #132	; 0x84
    bb18:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb1a:	401a      	ands	r2, r3
    bb1c:	9210      	str	r2, [sp, #64]	; 0x40
    bb1e:	d000      	beq.n	bb22 <_vfprintf_r+0x312>
    bb20:	e207      	b.n	bf32 <_vfprintf_r+0x722>
    bb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    bb24:	9a08      	ldr	r2, [sp, #32]
    bb26:	1a9c      	subs	r4, r3, r2
    bb28:	2c00      	cmp	r4, #0
    bb2a:	dc00      	bgt.n	bb2e <_vfprintf_r+0x31e>
    bb2c:	e201      	b.n	bf32 <_vfprintf_r+0x722>
    bb2e:	491f      	ldr	r1, [pc, #124]	; (bbac <_vfprintf_r+0x39c>)
    bb30:	68ba      	ldr	r2, [r7, #8]
    bb32:	687b      	ldr	r3, [r7, #4]
    bb34:	4688      	mov	r8, r1
    bb36:	2c10      	cmp	r4, #16
    bb38:	dd21      	ble.n	bb7e <_vfprintf_r+0x36e>
    bb3a:	0031      	movs	r1, r6
    bb3c:	2510      	movs	r5, #16
    bb3e:	465e      	mov	r6, fp
    bb40:	e003      	b.n	bb4a <_vfprintf_r+0x33a>
    bb42:	3c10      	subs	r4, #16
    bb44:	3108      	adds	r1, #8
    bb46:	2c10      	cmp	r4, #16
    bb48:	dd17      	ble.n	bb7a <_vfprintf_r+0x36a>
    bb4a:	4640      	mov	r0, r8
    bb4c:	3210      	adds	r2, #16
    bb4e:	3301      	adds	r3, #1
    bb50:	6008      	str	r0, [r1, #0]
    bb52:	604d      	str	r5, [r1, #4]
    bb54:	60ba      	str	r2, [r7, #8]
    bb56:	607b      	str	r3, [r7, #4]
    bb58:	2b07      	cmp	r3, #7
    bb5a:	ddf2      	ble.n	bb42 <_vfprintf_r+0x332>
    bb5c:	003a      	movs	r2, r7
    bb5e:	0031      	movs	r1, r6
    bb60:	9806      	ldr	r0, [sp, #24]
    bb62:	f005 feaf 	bl	118c4 <__sprint_r>
    bb66:	2800      	cmp	r0, #0
    bb68:	d001      	beq.n	bb6e <_vfprintf_r+0x35e>
    bb6a:	f000 fccf 	bl	c50c <_vfprintf_r+0xcfc>
    bb6e:	3c10      	subs	r4, #16
    bb70:	68ba      	ldr	r2, [r7, #8]
    bb72:	687b      	ldr	r3, [r7, #4]
    bb74:	a932      	add	r1, sp, #200	; 0xc8
    bb76:	2c10      	cmp	r4, #16
    bb78:	dce7      	bgt.n	bb4a <_vfprintf_r+0x33a>
    bb7a:	46b3      	mov	fp, r6
    bb7c:	000e      	movs	r6, r1
    bb7e:	4641      	mov	r1, r8
    bb80:	6074      	str	r4, [r6, #4]
    bb82:	3301      	adds	r3, #1
    bb84:	18a4      	adds	r4, r4, r2
    bb86:	6031      	str	r1, [r6, #0]
    bb88:	60bc      	str	r4, [r7, #8]
    bb8a:	607b      	str	r3, [r7, #4]
    bb8c:	2b07      	cmp	r3, #7
    bb8e:	dd01      	ble.n	bb94 <_vfprintf_r+0x384>
    bb90:	f000 fcae 	bl	c4f0 <_vfprintf_r+0xce0>
    bb94:	ab16      	add	r3, sp, #88	; 0x58
    bb96:	7fdb      	ldrb	r3, [r3, #31]
    bb98:	3608      	adds	r6, #8
    bb9a:	4698      	mov	r8, r3
    bb9c:	e1ca      	b.n	bf34 <_vfprintf_r+0x724>
    bb9e:	46c0      	nop			; (mov r8, r8)
    bba0:	ffffdfff 	.word	0xffffdfff
    bba4:	00015744 	.word	0x00015744
    bba8:	00015280 	.word	0x00015280
    bbac:	000158a8 	.word	0x000158a8
    bbb0:	2200      	movs	r2, #0
    bbb2:	9d07      	ldr	r5, [sp, #28]
    bbb4:	3b30      	subs	r3, #48	; 0x30
    bbb6:	46a8      	mov	r8, r5
    bbb8:	920b      	str	r2, [sp, #44]	; 0x2c
    bbba:	001a      	movs	r2, r3
    bbbc:	9408      	str	r4, [sp, #32]
    bbbe:	002c      	movs	r4, r5
    bbc0:	4655      	mov	r5, sl
    bbc2:	4682      	mov	sl, r0
    bbc4:	4640      	mov	r0, r8
    bbc6:	4688      	mov	r8, r1
    bbc8:	0011      	movs	r1, r2
    bbca:	2200      	movs	r2, #0
    bbcc:	0093      	lsls	r3, r2, #2
    bbce:	189a      	adds	r2, r3, r2
    bbd0:	7803      	ldrb	r3, [r0, #0]
    bbd2:	0052      	lsls	r2, r2, #1
    bbd4:	188a      	adds	r2, r1, r2
    bbd6:	0019      	movs	r1, r3
    bbd8:	3401      	adds	r4, #1
    bbda:	3930      	subs	r1, #48	; 0x30
    bbdc:	0020      	movs	r0, r4
    bbde:	2909      	cmp	r1, #9
    bbe0:	d9f4      	bls.n	bbcc <_vfprintf_r+0x3bc>
    bbe2:	9407      	str	r4, [sp, #28]
    bbe4:	4650      	mov	r0, sl
    bbe6:	9c08      	ldr	r4, [sp, #32]
    bbe8:	920b      	str	r2, [sp, #44]	; 0x2c
    bbea:	4641      	mov	r1, r8
    bbec:	46aa      	mov	sl, r5
    bbee:	e69b      	b.n	b928 <_vfprintf_r+0x118>
    bbf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bbf2:	9312      	str	r3, [sp, #72]	; 0x48
    bbf4:	6813      	ldr	r3, [r2, #0]
    bbf6:	2120      	movs	r1, #32
    bbf8:	9308      	str	r3, [sp, #32]
    bbfa:	466b      	mov	r3, sp
    bbfc:	185b      	adds	r3, r3, r1
    bbfe:	781b      	ldrb	r3, [r3, #0]
    bc00:	ad28      	add	r5, sp, #160	; 0xa0
    bc02:	702b      	strb	r3, [r5, #0]
    bc04:	2300      	movs	r3, #0
    bc06:	a916      	add	r1, sp, #88	; 0x58
    bc08:	77cb      	strb	r3, [r1, #31]
    bc0a:	0013      	movs	r3, r2
    bc0c:	3304      	adds	r3, #4
    bc0e:	930f      	str	r3, [sp, #60]	; 0x3c
    bc10:	2300      	movs	r3, #0
    bc12:	9409      	str	r4, [sp, #36]	; 0x24
    bc14:	4698      	mov	r8, r3
    bc16:	3301      	adds	r3, #1
    bc18:	9308      	str	r3, [sp, #32]
    bc1a:	930e      	str	r3, [sp, #56]	; 0x38
    bc1c:	2300      	movs	r3, #0
    bc1e:	9511      	str	r5, [sp, #68]	; 0x44
    bc20:	469a      	mov	sl, r3
    bc22:	9313      	str	r3, [sp, #76]	; 0x4c
    bc24:	e76f      	b.n	bb06 <_vfprintf_r+0x2f6>
    bc26:	9312      	str	r3, [sp, #72]	; 0x48
    bc28:	2900      	cmp	r1, #0
    bc2a:	d001      	beq.n	bc30 <_vfprintf_r+0x420>
    bc2c:	f001 f94d 	bl	ceca <_vfprintf_r+0x16ba>
    bc30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bc32:	06a3      	lsls	r3, r4, #26
    bc34:	d501      	bpl.n	bc3a <_vfprintf_r+0x42a>
    bc36:	f000 fd5a 	bl	c6ee <_vfprintf_r+0xede>
    bc3a:	06e3      	lsls	r3, r4, #27
    bc3c:	d501      	bpl.n	bc42 <_vfprintf_r+0x432>
    bc3e:	f000 fcab 	bl	c598 <_vfprintf_r+0xd88>
    bc42:	0663      	lsls	r3, r4, #25
    bc44:	d401      	bmi.n	bc4a <_vfprintf_r+0x43a>
    bc46:	f000 fca7 	bl	c598 <_vfprintf_r+0xd88>
    bc4a:	2100      	movs	r1, #0
    bc4c:	5e53      	ldrsh	r3, [r2, r1]
    bc4e:	930c      	str	r3, [sp, #48]	; 0x30
    bc50:	3204      	adds	r2, #4
    bc52:	17db      	asrs	r3, r3, #31
    bc54:	930d      	str	r3, [sp, #52]	; 0x34
    bc56:	920f      	str	r2, [sp, #60]	; 0x3c
    bc58:	2b00      	cmp	r3, #0
    bc5a:	da01      	bge.n	bc60 <_vfprintf_r+0x450>
    bc5c:	f000 fdb2 	bl	c7c4 <_vfprintf_r+0xfb4>
    bc60:	990c      	ldr	r1, [sp, #48]	; 0x30
    bc62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bc64:	0008      	movs	r0, r1
    bc66:	4651      	mov	r1, sl
    bc68:	ab16      	add	r3, sp, #88	; 0x58
    bc6a:	7fdb      	ldrb	r3, [r3, #31]
    bc6c:	4310      	orrs	r0, r2
    bc6e:	4698      	mov	r8, r3
    bc70:	0002      	movs	r2, r0
    bc72:	2301      	movs	r3, #1
    bc74:	3101      	adds	r1, #1
    bc76:	d000      	beq.n	bc7a <_vfprintf_r+0x46a>
    bc78:	e718      	b.n	baac <_vfprintf_r+0x29c>
    bc7a:	2a00      	cmp	r2, #0
    bc7c:	d100      	bne.n	bc80 <_vfprintf_r+0x470>
    bc7e:	e35a      	b.n	c336 <_vfprintf_r+0xb26>
    bc80:	9409      	str	r4, [sp, #36]	; 0x24
    bc82:	2b01      	cmp	r3, #1
    bc84:	d101      	bne.n	bc8a <_vfprintf_r+0x47a>
    bc86:	f000 fc06 	bl	c496 <_vfprintf_r+0xc86>
    bc8a:	2b02      	cmp	r3, #2
    bc8c:	d000      	beq.n	bc90 <_vfprintf_r+0x480>
    bc8e:	e380      	b.n	c392 <_vfprintf_r+0xb82>
    bc90:	9c19      	ldr	r4, [sp, #100]	; 0x64
    bc92:	200f      	movs	r0, #15
    bc94:	46a1      	mov	r9, r4
    bc96:	46b4      	mov	ip, r6
    bc98:	ab32      	add	r3, sp, #200	; 0xc8
    bc9a:	0019      	movs	r1, r3
    bc9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bc9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bca0:	0004      	movs	r4, r0
    bca2:	464d      	mov	r5, r9
    bca4:	4014      	ands	r4, r2
    bca6:	5d2c      	ldrb	r4, [r5, r4]
    bca8:	071e      	lsls	r6, r3, #28
    bcaa:	0915      	lsrs	r5, r2, #4
    bcac:	3901      	subs	r1, #1
    bcae:	432e      	orrs	r6, r5
    bcb0:	700c      	strb	r4, [r1, #0]
    bcb2:	091c      	lsrs	r4, r3, #4
    bcb4:	0023      	movs	r3, r4
    bcb6:	0034      	movs	r4, r6
    bcb8:	0032      	movs	r2, r6
    bcba:	431c      	orrs	r4, r3
    bcbc:	d1f0      	bne.n	bca0 <_vfprintf_r+0x490>
    bcbe:	920c      	str	r2, [sp, #48]	; 0x30
    bcc0:	930d      	str	r3, [sp, #52]	; 0x34
    bcc2:	ab32      	add	r3, sp, #200	; 0xc8
    bcc4:	1a5b      	subs	r3, r3, r1
    bcc6:	9111      	str	r1, [sp, #68]	; 0x44
    bcc8:	4666      	mov	r6, ip
    bcca:	930e      	str	r3, [sp, #56]	; 0x38
    bccc:	e70d      	b.n	baea <_vfprintf_r+0x2da>
    bcce:	4663      	mov	r3, ip
    bcd0:	431c      	orrs	r4, r3
    bcd2:	9b07      	ldr	r3, [sp, #28]
    bcd4:	781b      	ldrb	r3, [r3, #0]
    bcd6:	e624      	b.n	b922 <_vfprintf_r+0x112>
    bcd8:	9b07      	ldr	r3, [sp, #28]
    bcda:	781b      	ldrb	r3, [r3, #0]
    bcdc:	2b6c      	cmp	r3, #108	; 0x6c
    bcde:	d101      	bne.n	bce4 <_vfprintf_r+0x4d4>
    bce0:	f000 fe8c 	bl	c9fc <_vfprintf_r+0x11ec>
    bce4:	2210      	movs	r2, #16
    bce6:	4314      	orrs	r4, r2
    bce8:	e61b      	b.n	b922 <_vfprintf_r+0x112>
    bcea:	2900      	cmp	r1, #0
    bcec:	d001      	beq.n	bcf2 <_vfprintf_r+0x4e2>
    bcee:	f001 f8d5 	bl	ce9c <_vfprintf_r+0x168c>
    bcf2:	06a3      	lsls	r3, r4, #26
    bcf4:	d501      	bpl.n	bcfa <_vfprintf_r+0x4ea>
    bcf6:	f000 fe76 	bl	c9e6 <_vfprintf_r+0x11d6>
    bcfa:	06e3      	lsls	r3, r4, #27
    bcfc:	d500      	bpl.n	bd00 <_vfprintf_r+0x4f0>
    bcfe:	e110      	b.n	bf22 <_vfprintf_r+0x712>
    bd00:	0663      	lsls	r3, r4, #25
    bd02:	d400      	bmi.n	bd06 <_vfprintf_r+0x4f6>
    bd04:	e10d      	b.n	bf22 <_vfprintf_r+0x712>
    bd06:	4669      	mov	r1, sp
    bd08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bd0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    bd0c:	681a      	ldr	r2, [r3, #0]
    bd0e:	3304      	adds	r3, #4
    bd10:	9208      	str	r2, [sp, #32]
    bd12:	8011      	strh	r1, [r2, #0]
    bd14:	930f      	str	r3, [sp, #60]	; 0x3c
    bd16:	e5c9      	b.n	b8ac <_vfprintf_r+0x9c>
    bd18:	990f      	ldr	r1, [sp, #60]	; 0x3c
    bd1a:	2230      	movs	r2, #48	; 0x30
    bd1c:	680b      	ldr	r3, [r1, #0]
    bd1e:	930c      	str	r3, [sp, #48]	; 0x30
    bd20:	2300      	movs	r3, #0
    bd22:	930d      	str	r3, [sp, #52]	; 0x34
    bd24:	3302      	adds	r3, #2
    bd26:	431c      	orrs	r4, r3
    bd28:	ab1e      	add	r3, sp, #120	; 0x78
    bd2a:	701a      	strb	r2, [r3, #0]
    bd2c:	3248      	adds	r2, #72	; 0x48
    bd2e:	705a      	strb	r2, [r3, #1]
    bd30:	000b      	movs	r3, r1
    bd32:	3304      	adds	r3, #4
    bd34:	930f      	str	r3, [sp, #60]	; 0x3c
    bd36:	4bc1      	ldr	r3, [pc, #772]	; (c03c <_vfprintf_r+0x82c>)
    bd38:	9212      	str	r2, [sp, #72]	; 0x48
    bd3a:	9319      	str	r3, [sp, #100]	; 0x64
    bd3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bd3e:	2302      	movs	r3, #2
    bd40:	e6ac      	b.n	ba9c <_vfprintf_r+0x28c>
    bd42:	464b      	mov	r3, r9
    bd44:	431c      	orrs	r4, r3
    bd46:	9b07      	ldr	r3, [sp, #28]
    bd48:	781b      	ldrb	r3, [r3, #0]
    bd4a:	e5ea      	b.n	b922 <_vfprintf_r+0x112>
    bd4c:	9312      	str	r3, [sp, #72]	; 0x48
    bd4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bd50:	a916      	add	r1, sp, #88	; 0x58
    bd52:	1d1d      	adds	r5, r3, #4
    bd54:	681b      	ldr	r3, [r3, #0]
    bd56:	001a      	movs	r2, r3
    bd58:	9311      	str	r3, [sp, #68]	; 0x44
    bd5a:	2300      	movs	r3, #0
    bd5c:	77cb      	strb	r3, [r1, #31]
    bd5e:	2a00      	cmp	r2, #0
    bd60:	d101      	bne.n	bd66 <_vfprintf_r+0x556>
    bd62:	f000 ff01 	bl	cb68 <_vfprintf_r+0x1358>
    bd66:	4653      	mov	r3, sl
    bd68:	3301      	adds	r3, #1
    bd6a:	d101      	bne.n	bd70 <_vfprintf_r+0x560>
    bd6c:	f000 fe64 	bl	ca38 <_vfprintf_r+0x1228>
    bd70:	4652      	mov	r2, sl
    bd72:	2100      	movs	r1, #0
    bd74:	9811      	ldr	r0, [sp, #68]	; 0x44
    bd76:	f003 fa6b 	bl	f250 <memchr>
    bd7a:	2800      	cmp	r0, #0
    bd7c:	d101      	bne.n	bd82 <_vfprintf_r+0x572>
    bd7e:	f000 ff78 	bl	cc72 <_vfprintf_r+0x1462>
    bd82:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bd84:	1ac3      	subs	r3, r0, r3
    bd86:	001a      	movs	r2, r3
    bd88:	930e      	str	r3, [sp, #56]	; 0x38
    bd8a:	43db      	mvns	r3, r3
    bd8c:	17db      	asrs	r3, r3, #31
    bd8e:	401a      	ands	r2, r3
    bd90:	ab16      	add	r3, sp, #88	; 0x58
    bd92:	7fdb      	ldrb	r3, [r3, #31]
    bd94:	9208      	str	r2, [sp, #32]
    bd96:	4698      	mov	r8, r3
    bd98:	2300      	movs	r3, #0
    bd9a:	950f      	str	r5, [sp, #60]	; 0x3c
    bd9c:	9409      	str	r4, [sp, #36]	; 0x24
    bd9e:	469a      	mov	sl, r3
    bda0:	9313      	str	r3, [sp, #76]	; 0x4c
    bda2:	e6aa      	b.n	bafa <_vfprintf_r+0x2ea>
    bda4:	2308      	movs	r3, #8
    bda6:	431c      	orrs	r4, r3
    bda8:	9b07      	ldr	r3, [sp, #28]
    bdaa:	781b      	ldrb	r3, [r3, #0]
    bdac:	e5b9      	b.n	b922 <_vfprintf_r+0x112>
    bdae:	9312      	str	r3, [sp, #72]	; 0x48
    bdb0:	2310      	movs	r3, #16
    bdb2:	431c      	orrs	r4, r3
    bdb4:	06a3      	lsls	r3, r4, #26
    bdb6:	d501      	bpl.n	bdbc <_vfprintf_r+0x5ac>
    bdb8:	f000 fca7 	bl	c70a <_vfprintf_r+0xefa>
    bdbc:	06e3      	lsls	r3, r4, #27
    bdbe:	d500      	bpl.n	bdc2 <_vfprintf_r+0x5b2>
    bdc0:	e3ee      	b.n	c5a0 <_vfprintf_r+0xd90>
    bdc2:	0663      	lsls	r3, r4, #25
    bdc4:	d400      	bmi.n	bdc8 <_vfprintf_r+0x5b8>
    bdc6:	e3eb      	b.n	c5a0 <_vfprintf_r+0xd90>
    bdc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bdca:	881a      	ldrh	r2, [r3, #0]
    bdcc:	920c      	str	r2, [sp, #48]	; 0x30
    bdce:	2200      	movs	r2, #0
    bdd0:	3304      	adds	r3, #4
    bdd2:	920d      	str	r2, [sp, #52]	; 0x34
    bdd4:	930f      	str	r3, [sp, #60]	; 0x3c
    bdd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bdd8:	2300      	movs	r3, #0
    bdda:	e65f      	b.n	ba9c <_vfprintf_r+0x28c>
    bddc:	9312      	str	r3, [sp, #72]	; 0x48
    bdde:	2310      	movs	r3, #16
    bde0:	431c      	orrs	r4, r3
    bde2:	06a3      	lsls	r3, r4, #26
    bde4:	d501      	bpl.n	bdea <_vfprintf_r+0x5da>
    bde6:	f000 fcba 	bl	c75e <_vfprintf_r+0xf4e>
    bdea:	06e3      	lsls	r3, r4, #27
    bdec:	d500      	bpl.n	bdf0 <_vfprintf_r+0x5e0>
    bdee:	e3da      	b.n	c5a6 <_vfprintf_r+0xd96>
    bdf0:	0663      	lsls	r3, r4, #25
    bdf2:	d400      	bmi.n	bdf6 <_vfprintf_r+0x5e6>
    bdf4:	e3d7      	b.n	c5a6 <_vfprintf_r+0xd96>
    bdf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bdf8:	881a      	ldrh	r2, [r3, #0]
    bdfa:	920c      	str	r2, [sp, #48]	; 0x30
    bdfc:	2200      	movs	r2, #0
    bdfe:	3304      	adds	r3, #4
    be00:	920d      	str	r2, [sp, #52]	; 0x34
    be02:	930f      	str	r3, [sp, #60]	; 0x3c
    be04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    be06:	2301      	movs	r3, #1
    be08:	e648      	b.n	ba9c <_vfprintf_r+0x28c>
    be0a:	9312      	str	r3, [sp, #72]	; 0x48
    be0c:	2900      	cmp	r1, #0
    be0e:	d001      	beq.n	be14 <_vfprintf_r+0x604>
    be10:	f001 f857 	bl	cec2 <_vfprintf_r+0x16b2>
    be14:	4b8a      	ldr	r3, [pc, #552]	; (c040 <_vfprintf_r+0x830>)
    be16:	9319      	str	r3, [sp, #100]	; 0x64
    be18:	e618      	b.n	ba4c <_vfprintf_r+0x23c>
    be1a:	2301      	movs	r3, #1
    be1c:	431c      	orrs	r4, r3
    be1e:	9b07      	ldr	r3, [sp, #28]
    be20:	781b      	ldrb	r3, [r3, #0]
    be22:	e57e      	b.n	b922 <_vfprintf_r+0x112>
    be24:	2380      	movs	r3, #128	; 0x80
    be26:	431c      	orrs	r4, r3
    be28:	9b07      	ldr	r3, [sp, #28]
    be2a:	781b      	ldrb	r3, [r3, #0]
    be2c:	e579      	b.n	b922 <_vfprintf_r+0x112>
    be2e:	9b07      	ldr	r3, [sp, #28]
    be30:	781b      	ldrb	r3, [r3, #0]
    be32:	2800      	cmp	r0, #0
    be34:	d000      	beq.n	be38 <_vfprintf_r+0x628>
    be36:	e574      	b.n	b922 <_vfprintf_r+0x112>
    be38:	2101      	movs	r1, #1
    be3a:	3020      	adds	r0, #32
    be3c:	e571      	b.n	b922 <_vfprintf_r+0x112>
    be3e:	9312      	str	r3, [sp, #72]	; 0x48
    be40:	2900      	cmp	r1, #0
    be42:	d001      	beq.n	be48 <_vfprintf_r+0x638>
    be44:	f001 f839 	bl	ceba <_vfprintf_r+0x16aa>
    be48:	2207      	movs	r2, #7
    be4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    be4c:	3307      	adds	r3, #7
    be4e:	4393      	bics	r3, r2
    be50:	3201      	adds	r2, #1
    be52:	4694      	mov	ip, r2
    be54:	449c      	add	ip, r3
    be56:	4662      	mov	r2, ip
    be58:	920f      	str	r2, [sp, #60]	; 0x3c
    be5a:	681a      	ldr	r2, [r3, #0]
    be5c:	9216      	str	r2, [sp, #88]	; 0x58
    be5e:	685b      	ldr	r3, [r3, #4]
    be60:	2201      	movs	r2, #1
    be62:	9315      	str	r3, [sp, #84]	; 0x54
    be64:	9b15      	ldr	r3, [sp, #84]	; 0x54
    be66:	9d16      	ldr	r5, [sp, #88]	; 0x58
    be68:	005b      	lsls	r3, r3, #1
    be6a:	085b      	lsrs	r3, r3, #1
    be6c:	4698      	mov	r8, r3
    be6e:	4252      	negs	r2, r2
    be70:	4b74      	ldr	r3, [pc, #464]	; (c044 <_vfprintf_r+0x834>)
    be72:	0028      	movs	r0, r5
    be74:	4641      	mov	r1, r8
    be76:	f006 fb31 	bl	124dc <__aeabi_dcmpun>
    be7a:	2800      	cmp	r0, #0
    be7c:	d001      	beq.n	be82 <_vfprintf_r+0x672>
    be7e:	f000 fcb4 	bl	c7ea <_vfprintf_r+0xfda>
    be82:	2201      	movs	r2, #1
    be84:	4b6f      	ldr	r3, [pc, #444]	; (c044 <_vfprintf_r+0x834>)
    be86:	4252      	negs	r2, r2
    be88:	0028      	movs	r0, r5
    be8a:	4641      	mov	r1, r8
    be8c:	f7fc fb30 	bl	84f0 <__aeabi_dcmple>
    be90:	2800      	cmp	r0, #0
    be92:	d001      	beq.n	be98 <_vfprintf_r+0x688>
    be94:	f000 fca9 	bl	c7ea <_vfprintf_r+0xfda>
    be98:	2200      	movs	r2, #0
    be9a:	2300      	movs	r3, #0
    be9c:	9816      	ldr	r0, [sp, #88]	; 0x58
    be9e:	9915      	ldr	r1, [sp, #84]	; 0x54
    bea0:	f7fc fb1c 	bl	84dc <__aeabi_dcmplt>
    bea4:	2800      	cmp	r0, #0
    bea6:	d001      	beq.n	beac <_vfprintf_r+0x69c>
    bea8:	f000 fd55 	bl	c956 <_vfprintf_r+0x1146>
    beac:	ab16      	add	r3, sp, #88	; 0x58
    beae:	7fdb      	ldrb	r3, [r3, #31]
    beb0:	4698      	mov	r8, r3
    beb2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    beb4:	2b47      	cmp	r3, #71	; 0x47
    beb6:	dd01      	ble.n	bebc <_vfprintf_r+0x6ac>
    beb8:	f000 fdb4 	bl	ca24 <_vfprintf_r+0x1214>
    bebc:	4b62      	ldr	r3, [pc, #392]	; (c048 <_vfprintf_r+0x838>)
    bebe:	9311      	str	r3, [sp, #68]	; 0x44
    bec0:	2380      	movs	r3, #128	; 0x80
    bec2:	439c      	bics	r4, r3
    bec4:	3b7d      	subs	r3, #125	; 0x7d
    bec6:	9308      	str	r3, [sp, #32]
    bec8:	930e      	str	r3, [sp, #56]	; 0x38
    beca:	2300      	movs	r3, #0
    becc:	9409      	str	r4, [sp, #36]	; 0x24
    bece:	469a      	mov	sl, r3
    bed0:	9313      	str	r3, [sp, #76]	; 0x4c
    bed2:	e612      	b.n	bafa <_vfprintf_r+0x2ea>
    bed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bed6:	1d1a      	adds	r2, r3, #4
    bed8:	681b      	ldr	r3, [r3, #0]
    beda:	930b      	str	r3, [sp, #44]	; 0x2c
    bedc:	2b00      	cmp	r3, #0
    bede:	da00      	bge.n	bee2 <_vfprintf_r+0x6d2>
    bee0:	e578      	b.n	b9d4 <_vfprintf_r+0x1c4>
    bee2:	9b07      	ldr	r3, [sp, #28]
    bee4:	920f      	str	r2, [sp, #60]	; 0x3c
    bee6:	781b      	ldrb	r3, [r3, #0]
    bee8:	e51b      	b.n	b922 <_vfprintf_r+0x112>
    beea:	9312      	str	r3, [sp, #72]	; 0x48
    beec:	2900      	cmp	r1, #0
    beee:	d001      	beq.n	bef4 <_vfprintf_r+0x6e4>
    bef0:	f000 ffcc 	bl	ce8c <_vfprintf_r+0x167c>
    bef4:	2310      	movs	r3, #16
    bef6:	431c      	orrs	r4, r3
    bef8:	e69a      	b.n	bc30 <_vfprintf_r+0x420>
    befa:	9312      	str	r3, [sp, #72]	; 0x48
    befc:	e771      	b.n	bde2 <_vfprintf_r+0x5d2>
    befe:	9312      	str	r3, [sp, #72]	; 0x48
    bf00:	e758      	b.n	bdb4 <_vfprintf_r+0x5a4>
    bf02:	9312      	str	r3, [sp, #72]	; 0x48
    bf04:	2900      	cmp	r1, #0
    bf06:	d001      	beq.n	bf0c <_vfprintf_r+0x6fc>
    bf08:	f000 ffd3 	bl	ceb2 <_vfprintf_r+0x16a2>
    bf0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    bf0e:	2b00      	cmp	r3, #0
    bf10:	d100      	bne.n	bf14 <_vfprintf_r+0x704>
    bf12:	e18d      	b.n	c230 <_vfprintf_r+0xa20>
    bf14:	ad28      	add	r5, sp, #160	; 0xa0
    bf16:	702b      	strb	r3, [r5, #0]
    bf18:	2300      	movs	r3, #0
    bf1a:	aa16      	add	r2, sp, #88	; 0x58
    bf1c:	77d3      	strb	r3, [r2, #31]
    bf1e:	9409      	str	r4, [sp, #36]	; 0x24
    bf20:	e678      	b.n	bc14 <_vfprintf_r+0x404>
    bf22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    bf24:	990a      	ldr	r1, [sp, #40]	; 0x28
    bf26:	6813      	ldr	r3, [r2, #0]
    bf28:	6019      	str	r1, [r3, #0]
    bf2a:	0013      	movs	r3, r2
    bf2c:	3304      	adds	r3, #4
    bf2e:	930f      	str	r3, [sp, #60]	; 0x3c
    bf30:	e4bc      	b.n	b8ac <_vfprintf_r+0x9c>
    bf32:	68bc      	ldr	r4, [r7, #8]
    bf34:	4643      	mov	r3, r8
    bf36:	2b00      	cmp	r3, #0
    bf38:	d00f      	beq.n	bf5a <_vfprintf_r+0x74a>
    bf3a:	aa16      	add	r2, sp, #88	; 0x58
    bf3c:	231f      	movs	r3, #31
    bf3e:	4694      	mov	ip, r2
    bf40:	4463      	add	r3, ip
    bf42:	6033      	str	r3, [r6, #0]
    bf44:	2301      	movs	r3, #1
    bf46:	6073      	str	r3, [r6, #4]
    bf48:	687b      	ldr	r3, [r7, #4]
    bf4a:	3401      	adds	r4, #1
    bf4c:	3301      	adds	r3, #1
    bf4e:	60bc      	str	r4, [r7, #8]
    bf50:	607b      	str	r3, [r7, #4]
    bf52:	2b07      	cmp	r3, #7
    bf54:	dd00      	ble.n	bf58 <_vfprintf_r+0x748>
    bf56:	e203      	b.n	c360 <_vfprintf_r+0xb50>
    bf58:	3608      	adds	r6, #8
    bf5a:	464b      	mov	r3, r9
    bf5c:	2b00      	cmp	r3, #0
    bf5e:	d00c      	beq.n	bf7a <_vfprintf_r+0x76a>
    bf60:	ab1e      	add	r3, sp, #120	; 0x78
    bf62:	6033      	str	r3, [r6, #0]
    bf64:	2302      	movs	r3, #2
    bf66:	6073      	str	r3, [r6, #4]
    bf68:	687b      	ldr	r3, [r7, #4]
    bf6a:	3402      	adds	r4, #2
    bf6c:	3301      	adds	r3, #1
    bf6e:	60bc      	str	r4, [r7, #8]
    bf70:	607b      	str	r3, [r7, #4]
    bf72:	2b07      	cmp	r3, #7
    bf74:	dd00      	ble.n	bf78 <_vfprintf_r+0x768>
    bf76:	e1fd      	b.n	c374 <_vfprintf_r+0xb64>
    bf78:	3608      	adds	r6, #8
    bf7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bf7c:	2b80      	cmp	r3, #128	; 0x80
    bf7e:	d100      	bne.n	bf82 <_vfprintf_r+0x772>
    bf80:	e173      	b.n	c26a <_vfprintf_r+0xa5a>
    bf82:	4653      	mov	r3, sl
    bf84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bf86:	1a9d      	subs	r5, r3, r2
    bf88:	2d00      	cmp	r5, #0
    bf8a:	dd32      	ble.n	bff2 <_vfprintf_r+0x7e2>
    bf8c:	4a2f      	ldr	r2, [pc, #188]	; (c04c <_vfprintf_r+0x83c>)
    bf8e:	687b      	ldr	r3, [r7, #4]
    bf90:	4691      	mov	r9, r2
    bf92:	2d10      	cmp	r5, #16
    bf94:	dd22      	ble.n	bfdc <_vfprintf_r+0x7cc>
    bf96:	2210      	movs	r2, #16
    bf98:	4692      	mov	sl, r2
    bf9a:	0022      	movs	r2, r4
    bf9c:	465c      	mov	r4, fp
    bf9e:	e003      	b.n	bfa8 <_vfprintf_r+0x798>
    bfa0:	3d10      	subs	r5, #16
    bfa2:	3608      	adds	r6, #8
    bfa4:	2d10      	cmp	r5, #16
    bfa6:	dd17      	ble.n	bfd8 <_vfprintf_r+0x7c8>
    bfa8:	4649      	mov	r1, r9
    bfaa:	6031      	str	r1, [r6, #0]
    bfac:	4651      	mov	r1, sl
    bfae:	3210      	adds	r2, #16
    bfb0:	3301      	adds	r3, #1
    bfb2:	6071      	str	r1, [r6, #4]
    bfb4:	60ba      	str	r2, [r7, #8]
    bfb6:	607b      	str	r3, [r7, #4]
    bfb8:	2b07      	cmp	r3, #7
    bfba:	ddf1      	ble.n	bfa0 <_vfprintf_r+0x790>
    bfbc:	003a      	movs	r2, r7
    bfbe:	0021      	movs	r1, r4
    bfc0:	9806      	ldr	r0, [sp, #24]
    bfc2:	f005 fc7f 	bl	118c4 <__sprint_r>
    bfc6:	2800      	cmp	r0, #0
    bfc8:	d000      	beq.n	bfcc <_vfprintf_r+0x7bc>
    bfca:	e18a      	b.n	c2e2 <_vfprintf_r+0xad2>
    bfcc:	3d10      	subs	r5, #16
    bfce:	68ba      	ldr	r2, [r7, #8]
    bfd0:	687b      	ldr	r3, [r7, #4]
    bfd2:	ae32      	add	r6, sp, #200	; 0xc8
    bfd4:	2d10      	cmp	r5, #16
    bfd6:	dce7      	bgt.n	bfa8 <_vfprintf_r+0x798>
    bfd8:	46a3      	mov	fp, r4
    bfda:	0014      	movs	r4, r2
    bfdc:	464a      	mov	r2, r9
    bfde:	1964      	adds	r4, r4, r5
    bfe0:	3301      	adds	r3, #1
    bfe2:	6032      	str	r2, [r6, #0]
    bfe4:	6075      	str	r5, [r6, #4]
    bfe6:	60bc      	str	r4, [r7, #8]
    bfe8:	607b      	str	r3, [r7, #4]
    bfea:	2b07      	cmp	r3, #7
    bfec:	dd00      	ble.n	bff0 <_vfprintf_r+0x7e0>
    bfee:	e1ad      	b.n	c34c <_vfprintf_r+0xb3c>
    bff0:	3608      	adds	r6, #8
    bff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bff4:	05db      	lsls	r3, r3, #23
    bff6:	d500      	bpl.n	bffa <_vfprintf_r+0x7ea>
    bff8:	e0be      	b.n	c178 <_vfprintf_r+0x968>
    bffa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    bffc:	6033      	str	r3, [r6, #0]
    bffe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c000:	469c      	mov	ip, r3
    c002:	6073      	str	r3, [r6, #4]
    c004:	687b      	ldr	r3, [r7, #4]
    c006:	4464      	add	r4, ip
    c008:	3301      	adds	r3, #1
    c00a:	60bc      	str	r4, [r7, #8]
    c00c:	607b      	str	r3, [r7, #4]
    c00e:	2b07      	cmp	r3, #7
    c010:	dd00      	ble.n	c014 <_vfprintf_r+0x804>
    c012:	e0a6      	b.n	c162 <_vfprintf_r+0x952>
    c014:	3608      	adds	r6, #8
    c016:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c018:	075b      	lsls	r3, r3, #29
    c01a:	d54a      	bpl.n	c0b2 <_vfprintf_r+0x8a2>
    c01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c01e:	9a08      	ldr	r2, [sp, #32]
    c020:	1a9d      	subs	r5, r3, r2
    c022:	2d00      	cmp	r5, #0
    c024:	dd45      	ble.n	c0b2 <_vfprintf_r+0x8a2>
    c026:	4a0a      	ldr	r2, [pc, #40]	; (c050 <_vfprintf_r+0x840>)
    c028:	687b      	ldr	r3, [r7, #4]
    c02a:	4690      	mov	r8, r2
    c02c:	2d10      	cmp	r5, #16
    c02e:	dd2f      	ble.n	c090 <_vfprintf_r+0x880>
    c030:	2210      	movs	r2, #16
    c032:	4691      	mov	r9, r2
    c034:	0022      	movs	r2, r4
    c036:	465c      	mov	r4, fp
    c038:	e010      	b.n	c05c <_vfprintf_r+0x84c>
    c03a:	46c0      	nop			; (mov r8, r8)
    c03c:	00015280 	.word	0x00015280
    c040:	0001526c 	.word	0x0001526c
    c044:	7fefffff 	.word	0x7fefffff
    c048:	0001525c 	.word	0x0001525c
    c04c:	000158b8 	.word	0x000158b8
    c050:	000158a8 	.word	0x000158a8
    c054:	3d10      	subs	r5, #16
    c056:	3608      	adds	r6, #8
    c058:	2d10      	cmp	r5, #16
    c05a:	dd17      	ble.n	c08c <_vfprintf_r+0x87c>
    c05c:	49d1      	ldr	r1, [pc, #836]	; (c3a4 <_vfprintf_r+0xb94>)
    c05e:	3210      	adds	r2, #16
    c060:	6031      	str	r1, [r6, #0]
    c062:	4649      	mov	r1, r9
    c064:	3301      	adds	r3, #1
    c066:	6071      	str	r1, [r6, #4]
    c068:	60ba      	str	r2, [r7, #8]
    c06a:	607b      	str	r3, [r7, #4]
    c06c:	2b07      	cmp	r3, #7
    c06e:	ddf1      	ble.n	c054 <_vfprintf_r+0x844>
    c070:	003a      	movs	r2, r7
    c072:	0021      	movs	r1, r4
    c074:	9806      	ldr	r0, [sp, #24]
    c076:	f005 fc25 	bl	118c4 <__sprint_r>
    c07a:	2800      	cmp	r0, #0
    c07c:	d000      	beq.n	c080 <_vfprintf_r+0x870>
    c07e:	e130      	b.n	c2e2 <_vfprintf_r+0xad2>
    c080:	3d10      	subs	r5, #16
    c082:	68ba      	ldr	r2, [r7, #8]
    c084:	687b      	ldr	r3, [r7, #4]
    c086:	ae32      	add	r6, sp, #200	; 0xc8
    c088:	2d10      	cmp	r5, #16
    c08a:	dce7      	bgt.n	c05c <_vfprintf_r+0x84c>
    c08c:	46a3      	mov	fp, r4
    c08e:	0014      	movs	r4, r2
    c090:	4642      	mov	r2, r8
    c092:	1964      	adds	r4, r4, r5
    c094:	3301      	adds	r3, #1
    c096:	c624      	stmia	r6!, {r2, r5}
    c098:	60bc      	str	r4, [r7, #8]
    c09a:	607b      	str	r3, [r7, #4]
    c09c:	2b07      	cmp	r3, #7
    c09e:	dd08      	ble.n	c0b2 <_vfprintf_r+0x8a2>
    c0a0:	003a      	movs	r2, r7
    c0a2:	4659      	mov	r1, fp
    c0a4:	9806      	ldr	r0, [sp, #24]
    c0a6:	f005 fc0d 	bl	118c4 <__sprint_r>
    c0aa:	2800      	cmp	r0, #0
    c0ac:	d000      	beq.n	c0b0 <_vfprintf_r+0x8a0>
    c0ae:	e13f      	b.n	c330 <_vfprintf_r+0xb20>
    c0b0:	68bc      	ldr	r4, [r7, #8]
    c0b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c0b4:	9908      	ldr	r1, [sp, #32]
    c0b6:	428b      	cmp	r3, r1
    c0b8:	da00      	bge.n	c0bc <_vfprintf_r+0x8ac>
    c0ba:	000b      	movs	r3, r1
    c0bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c0be:	4694      	mov	ip, r2
    c0c0:	449c      	add	ip, r3
    c0c2:	4663      	mov	r3, ip
    c0c4:	930a      	str	r3, [sp, #40]	; 0x28
    c0c6:	2c00      	cmp	r4, #0
    c0c8:	d000      	beq.n	c0cc <_vfprintf_r+0x8bc>
    c0ca:	e129      	b.n	c320 <_vfprintf_r+0xb10>
    c0cc:	2300      	movs	r3, #0
    c0ce:	ae32      	add	r6, sp, #200	; 0xc8
    c0d0:	607b      	str	r3, [r7, #4]
    c0d2:	f7ff fbeb 	bl	b8ac <_vfprintf_r+0x9c>
    c0d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c0d8:	2b01      	cmp	r3, #1
    c0da:	dc00      	bgt.n	c0de <_vfprintf_r+0x8ce>
    c0dc:	e103      	b.n	c2e6 <_vfprintf_r+0xad6>
    c0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c0e0:	3401      	adds	r4, #1
    c0e2:	6033      	str	r3, [r6, #0]
    c0e4:	2301      	movs	r3, #1
    c0e6:	6073      	str	r3, [r6, #4]
    c0e8:	687b      	ldr	r3, [r7, #4]
    c0ea:	60bc      	str	r4, [r7, #8]
    c0ec:	3301      	adds	r3, #1
    c0ee:	607b      	str	r3, [r7, #4]
    c0f0:	2b07      	cmp	r3, #7
    c0f2:	dd00      	ble.n	c0f6 <_vfprintf_r+0x8e6>
    c0f4:	e2ef      	b.n	c6d6 <_vfprintf_r+0xec6>
    c0f6:	3608      	adds	r6, #8
    c0f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c0fa:	3301      	adds	r3, #1
    c0fc:	6032      	str	r2, [r6, #0]
    c0fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c100:	4698      	mov	r8, r3
    c102:	4694      	mov	ip, r2
    c104:	4464      	add	r4, ip
    c106:	6072      	str	r2, [r6, #4]
    c108:	60bc      	str	r4, [r7, #8]
    c10a:	607b      	str	r3, [r7, #4]
    c10c:	2b07      	cmp	r3, #7
    c10e:	dd00      	ble.n	c112 <_vfprintf_r+0x902>
    c110:	e318      	b.n	c744 <_vfprintf_r+0xf34>
    c112:	3608      	adds	r6, #8
    c114:	2200      	movs	r2, #0
    c116:	2300      	movs	r3, #0
    c118:	9816      	ldr	r0, [sp, #88]	; 0x58
    c11a:	9915      	ldr	r1, [sp, #84]	; 0x54
    c11c:	f7fc f9d8 	bl	84d0 <__aeabi_dcmpeq>
    c120:	2800      	cmp	r0, #0
    c122:	d000      	beq.n	c126 <_vfprintf_r+0x916>
    c124:	e1f4      	b.n	c510 <_vfprintf_r+0xd00>
    c126:	9d11      	ldr	r5, [sp, #68]	; 0x44
    c128:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c12a:	3501      	adds	r5, #1
    c12c:	3b01      	subs	r3, #1
    c12e:	6035      	str	r5, [r6, #0]
    c130:	6073      	str	r3, [r6, #4]
    c132:	18e4      	adds	r4, r4, r3
    c134:	2301      	movs	r3, #1
    c136:	469c      	mov	ip, r3
    c138:	44e0      	add	r8, ip
    c13a:	4643      	mov	r3, r8
    c13c:	60bc      	str	r4, [r7, #8]
    c13e:	607b      	str	r3, [r7, #4]
    c140:	2b07      	cmp	r3, #7
    c142:	dd00      	ble.n	c146 <_vfprintf_r+0x936>
    c144:	e0e0      	b.n	c308 <_vfprintf_r+0xaf8>
    c146:	3608      	adds	r6, #8
    c148:	ab21      	add	r3, sp, #132	; 0x84
    c14a:	6033      	str	r3, [r6, #0]
    c14c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    c14e:	469c      	mov	ip, r3
    c150:	6073      	str	r3, [r6, #4]
    c152:	4643      	mov	r3, r8
    c154:	4464      	add	r4, ip
    c156:	3301      	adds	r3, #1
    c158:	60bc      	str	r4, [r7, #8]
    c15a:	607b      	str	r3, [r7, #4]
    c15c:	2b07      	cmp	r3, #7
    c15e:	dc00      	bgt.n	c162 <_vfprintf_r+0x952>
    c160:	e758      	b.n	c014 <_vfprintf_r+0x804>
    c162:	003a      	movs	r2, r7
    c164:	4659      	mov	r1, fp
    c166:	9806      	ldr	r0, [sp, #24]
    c168:	f005 fbac 	bl	118c4 <__sprint_r>
    c16c:	2800      	cmp	r0, #0
    c16e:	d000      	beq.n	c172 <_vfprintf_r+0x962>
    c170:	e0de      	b.n	c330 <_vfprintf_r+0xb20>
    c172:	68bc      	ldr	r4, [r7, #8]
    c174:	ae32      	add	r6, sp, #200	; 0xc8
    c176:	e74e      	b.n	c016 <_vfprintf_r+0x806>
    c178:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c17a:	2b65      	cmp	r3, #101	; 0x65
    c17c:	ddab      	ble.n	c0d6 <_vfprintf_r+0x8c6>
    c17e:	2200      	movs	r2, #0
    c180:	2300      	movs	r3, #0
    c182:	9816      	ldr	r0, [sp, #88]	; 0x58
    c184:	9915      	ldr	r1, [sp, #84]	; 0x54
    c186:	f7fc f9a3 	bl	84d0 <__aeabi_dcmpeq>
    c18a:	2800      	cmp	r0, #0
    c18c:	d100      	bne.n	c190 <_vfprintf_r+0x980>
    c18e:	e134      	b.n	c3fa <_vfprintf_r+0xbea>
    c190:	4b85      	ldr	r3, [pc, #532]	; (c3a8 <_vfprintf_r+0xb98>)
    c192:	3401      	adds	r4, #1
    c194:	6033      	str	r3, [r6, #0]
    c196:	2301      	movs	r3, #1
    c198:	6073      	str	r3, [r6, #4]
    c19a:	687b      	ldr	r3, [r7, #4]
    c19c:	60bc      	str	r4, [r7, #8]
    c19e:	3301      	adds	r3, #1
    c1a0:	607b      	str	r3, [r7, #4]
    c1a2:	2b07      	cmp	r3, #7
    c1a4:	dd00      	ble.n	c1a8 <_vfprintf_r+0x998>
    c1a6:	e3dc      	b.n	c962 <_vfprintf_r+0x1152>
    c1a8:	3608      	adds	r6, #8
    c1aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c1ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c1ae:	4293      	cmp	r3, r2
    c1b0:	db03      	blt.n	c1ba <_vfprintf_r+0x9aa>
    c1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c1b4:	07db      	lsls	r3, r3, #31
    c1b6:	d400      	bmi.n	c1ba <_vfprintf_r+0x9aa>
    c1b8:	e3b7      	b.n	c92a <_vfprintf_r+0x111a>
    c1ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c1bc:	68ba      	ldr	r2, [r7, #8]
    c1be:	6033      	str	r3, [r6, #0]
    c1c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c1c2:	469c      	mov	ip, r3
    c1c4:	6073      	str	r3, [r6, #4]
    c1c6:	687b      	ldr	r3, [r7, #4]
    c1c8:	4462      	add	r2, ip
    c1ca:	3301      	adds	r3, #1
    c1cc:	0014      	movs	r4, r2
    c1ce:	60ba      	str	r2, [r7, #8]
    c1d0:	607b      	str	r3, [r7, #4]
    c1d2:	2b07      	cmp	r3, #7
    c1d4:	dd01      	ble.n	c1da <_vfprintf_r+0x9ca>
    c1d6:	f000 fc19 	bl	ca0c <_vfprintf_r+0x11fc>
    c1da:	3608      	adds	r6, #8
    c1dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c1de:	1e5d      	subs	r5, r3, #1
    c1e0:	2d00      	cmp	r5, #0
    c1e2:	dc00      	bgt.n	c1e6 <_vfprintf_r+0x9d6>
    c1e4:	e717      	b.n	c016 <_vfprintf_r+0x806>
    c1e6:	4a71      	ldr	r2, [pc, #452]	; (c3ac <_vfprintf_r+0xb9c>)
    c1e8:	687b      	ldr	r3, [r7, #4]
    c1ea:	4691      	mov	r9, r2
    c1ec:	2d10      	cmp	r5, #16
    c1ee:	dc00      	bgt.n	c1f2 <_vfprintf_r+0x9e2>
    c1f0:	e1c3      	b.n	c57a <_vfprintf_r+0xd6a>
    c1f2:	2210      	movs	r2, #16
    c1f4:	4690      	mov	r8, r2
    c1f6:	0022      	movs	r2, r4
    c1f8:	464c      	mov	r4, r9
    c1fa:	46d9      	mov	r9, fp
    c1fc:	e004      	b.n	c208 <_vfprintf_r+0x9f8>
    c1fe:	3608      	adds	r6, #8
    c200:	3d10      	subs	r5, #16
    c202:	2d10      	cmp	r5, #16
    c204:	dc00      	bgt.n	c208 <_vfprintf_r+0x9f8>
    c206:	e37c      	b.n	c902 <_vfprintf_r+0x10f2>
    c208:	4641      	mov	r1, r8
    c20a:	3210      	adds	r2, #16
    c20c:	3301      	adds	r3, #1
    c20e:	6034      	str	r4, [r6, #0]
    c210:	6071      	str	r1, [r6, #4]
    c212:	60ba      	str	r2, [r7, #8]
    c214:	607b      	str	r3, [r7, #4]
    c216:	2b07      	cmp	r3, #7
    c218:	ddf1      	ble.n	c1fe <_vfprintf_r+0x9ee>
    c21a:	003a      	movs	r2, r7
    c21c:	4649      	mov	r1, r9
    c21e:	9806      	ldr	r0, [sp, #24]
    c220:	f005 fb50 	bl	118c4 <__sprint_r>
    c224:	2800      	cmp	r0, #0
    c226:	d10b      	bne.n	c240 <_vfprintf_r+0xa30>
    c228:	68ba      	ldr	r2, [r7, #8]
    c22a:	687b      	ldr	r3, [r7, #4]
    c22c:	ae32      	add	r6, sp, #200	; 0xc8
    c22e:	e7e7      	b.n	c200 <_vfprintf_r+0x9f0>
    c230:	68bb      	ldr	r3, [r7, #8]
    c232:	46d9      	mov	r9, fp
    c234:	2b00      	cmp	r3, #0
    c236:	d001      	beq.n	c23c <_vfprintf_r+0xa2c>
    c238:	f000 fd4c 	bl	ccd4 <_vfprintf_r+0x14c4>
    c23c:	2300      	movs	r3, #0
    c23e:	607b      	str	r3, [r7, #4]
    c240:	464b      	mov	r3, r9
    c242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    c244:	07db      	lsls	r3, r3, #31
    c246:	d40d      	bmi.n	c264 <_vfprintf_r+0xa54>
    c248:	464b      	mov	r3, r9
    c24a:	899b      	ldrh	r3, [r3, #12]
    c24c:	059a      	lsls	r2, r3, #22
    c24e:	d505      	bpl.n	c25c <_vfprintf_r+0xa4c>
    c250:	065b      	lsls	r3, r3, #25
    c252:	d401      	bmi.n	c258 <_vfprintf_r+0xa48>
    c254:	f7ff fb8d 	bl	b972 <_vfprintf_r+0x162>
    c258:	f7ff fb88 	bl	b96c <_vfprintf_r+0x15c>
    c25c:	464b      	mov	r3, r9
    c25e:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c260:	f002 fc6c 	bl	eb3c <__retarget_lock_release_recursive>
    c264:	464b      	mov	r3, r9
    c266:	899b      	ldrh	r3, [r3, #12]
    c268:	e7f2      	b.n	c250 <_vfprintf_r+0xa40>
    c26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c26c:	9a08      	ldr	r2, [sp, #32]
    c26e:	1a9d      	subs	r5, r3, r2
    c270:	2d00      	cmp	r5, #0
    c272:	dc00      	bgt.n	c276 <_vfprintf_r+0xa66>
    c274:	e685      	b.n	bf82 <_vfprintf_r+0x772>
    c276:	4a4d      	ldr	r2, [pc, #308]	; (c3ac <_vfprintf_r+0xb9c>)
    c278:	687b      	ldr	r3, [r7, #4]
    c27a:	4691      	mov	r9, r2
    c27c:	2d10      	cmp	r5, #16
    c27e:	dd24      	ble.n	c2ca <_vfprintf_r+0xaba>
    c280:	2210      	movs	r2, #16
    c282:	0021      	movs	r1, r4
    c284:	4690      	mov	r8, r2
    c286:	465c      	mov	r4, fp
    c288:	0032      	movs	r2, r6
    c28a:	464e      	mov	r6, r9
    c28c:	e003      	b.n	c296 <_vfprintf_r+0xa86>
    c28e:	3d10      	subs	r5, #16
    c290:	3208      	adds	r2, #8
    c292:	2d10      	cmp	r5, #16
    c294:	dd15      	ble.n	c2c2 <_vfprintf_r+0xab2>
    c296:	4640      	mov	r0, r8
    c298:	3110      	adds	r1, #16
    c29a:	3301      	adds	r3, #1
    c29c:	6016      	str	r6, [r2, #0]
    c29e:	6050      	str	r0, [r2, #4]
    c2a0:	60b9      	str	r1, [r7, #8]
    c2a2:	607b      	str	r3, [r7, #4]
    c2a4:	2b07      	cmp	r3, #7
    c2a6:	ddf2      	ble.n	c28e <_vfprintf_r+0xa7e>
    c2a8:	003a      	movs	r2, r7
    c2aa:	0021      	movs	r1, r4
    c2ac:	9806      	ldr	r0, [sp, #24]
    c2ae:	f005 fb09 	bl	118c4 <__sprint_r>
    c2b2:	2800      	cmp	r0, #0
    c2b4:	d115      	bne.n	c2e2 <_vfprintf_r+0xad2>
    c2b6:	3d10      	subs	r5, #16
    c2b8:	68b9      	ldr	r1, [r7, #8]
    c2ba:	687b      	ldr	r3, [r7, #4]
    c2bc:	aa32      	add	r2, sp, #200	; 0xc8
    c2be:	2d10      	cmp	r5, #16
    c2c0:	dce9      	bgt.n	c296 <_vfprintf_r+0xa86>
    c2c2:	46a3      	mov	fp, r4
    c2c4:	46b1      	mov	r9, r6
    c2c6:	000c      	movs	r4, r1
    c2c8:	0016      	movs	r6, r2
    c2ca:	464a      	mov	r2, r9
    c2cc:	1964      	adds	r4, r4, r5
    c2ce:	3301      	adds	r3, #1
    c2d0:	6032      	str	r2, [r6, #0]
    c2d2:	6075      	str	r5, [r6, #4]
    c2d4:	60bc      	str	r4, [r7, #8]
    c2d6:	607b      	str	r3, [r7, #4]
    c2d8:	2b07      	cmp	r3, #7
    c2da:	dd00      	ble.n	c2de <_vfprintf_r+0xace>
    c2dc:	e263      	b.n	c7a6 <_vfprintf_r+0xf96>
    c2de:	3608      	adds	r6, #8
    c2e0:	e64f      	b.n	bf82 <_vfprintf_r+0x772>
    c2e2:	46a1      	mov	r9, r4
    c2e4:	e7ac      	b.n	c240 <_vfprintf_r+0xa30>
    c2e6:	2301      	movs	r3, #1
    c2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c2ea:	4213      	tst	r3, r2
    c2ec:	d000      	beq.n	c2f0 <_vfprintf_r+0xae0>
    c2ee:	e6f6      	b.n	c0de <_vfprintf_r+0x8ce>
    c2f0:	6073      	str	r3, [r6, #4]
    c2f2:	687b      	ldr	r3, [r7, #4]
    c2f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c2f6:	3301      	adds	r3, #1
    c2f8:	3401      	adds	r4, #1
    c2fa:	6032      	str	r2, [r6, #0]
    c2fc:	60bc      	str	r4, [r7, #8]
    c2fe:	4698      	mov	r8, r3
    c300:	607b      	str	r3, [r7, #4]
    c302:	2b07      	cmp	r3, #7
    c304:	dc00      	bgt.n	c308 <_vfprintf_r+0xaf8>
    c306:	e71e      	b.n	c146 <_vfprintf_r+0x936>
    c308:	003a      	movs	r2, r7
    c30a:	4659      	mov	r1, fp
    c30c:	9806      	ldr	r0, [sp, #24]
    c30e:	f005 fad9 	bl	118c4 <__sprint_r>
    c312:	2800      	cmp	r0, #0
    c314:	d10c      	bne.n	c330 <_vfprintf_r+0xb20>
    c316:	687b      	ldr	r3, [r7, #4]
    c318:	68bc      	ldr	r4, [r7, #8]
    c31a:	4698      	mov	r8, r3
    c31c:	ae32      	add	r6, sp, #200	; 0xc8
    c31e:	e713      	b.n	c148 <_vfprintf_r+0x938>
    c320:	003a      	movs	r2, r7
    c322:	4659      	mov	r1, fp
    c324:	9806      	ldr	r0, [sp, #24]
    c326:	f005 facd 	bl	118c4 <__sprint_r>
    c32a:	2800      	cmp	r0, #0
    c32c:	d100      	bne.n	c330 <_vfprintf_r+0xb20>
    c32e:	e6cd      	b.n	c0cc <_vfprintf_r+0x8bc>
    c330:	46d9      	mov	r9, fp
    c332:	e785      	b.n	c240 <_vfprintf_r+0xa30>
    c334:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c336:	2b01      	cmp	r3, #1
    c338:	d100      	bne.n	c33c <_vfprintf_r+0xb2c>
    c33a:	e148      	b.n	c5ce <_vfprintf_r+0xdbe>
    c33c:	2b02      	cmp	r3, #2
    c33e:	d123      	bne.n	c388 <_vfprintf_r+0xb78>
    c340:	9409      	str	r4, [sp, #36]	; 0x24
    c342:	2300      	movs	r3, #0
    c344:	2400      	movs	r4, #0
    c346:	930c      	str	r3, [sp, #48]	; 0x30
    c348:	940d      	str	r4, [sp, #52]	; 0x34
    c34a:	e4a1      	b.n	bc90 <_vfprintf_r+0x480>
    c34c:	003a      	movs	r2, r7
    c34e:	4659      	mov	r1, fp
    c350:	9806      	ldr	r0, [sp, #24]
    c352:	f005 fab7 	bl	118c4 <__sprint_r>
    c356:	2800      	cmp	r0, #0
    c358:	d1ea      	bne.n	c330 <_vfprintf_r+0xb20>
    c35a:	68bc      	ldr	r4, [r7, #8]
    c35c:	ae32      	add	r6, sp, #200	; 0xc8
    c35e:	e648      	b.n	bff2 <_vfprintf_r+0x7e2>
    c360:	003a      	movs	r2, r7
    c362:	4659      	mov	r1, fp
    c364:	9806      	ldr	r0, [sp, #24]
    c366:	f005 faad 	bl	118c4 <__sprint_r>
    c36a:	2800      	cmp	r0, #0
    c36c:	d1e0      	bne.n	c330 <_vfprintf_r+0xb20>
    c36e:	68bc      	ldr	r4, [r7, #8]
    c370:	ae32      	add	r6, sp, #200	; 0xc8
    c372:	e5f2      	b.n	bf5a <_vfprintf_r+0x74a>
    c374:	003a      	movs	r2, r7
    c376:	4659      	mov	r1, fp
    c378:	9806      	ldr	r0, [sp, #24]
    c37a:	f005 faa3 	bl	118c4 <__sprint_r>
    c37e:	2800      	cmp	r0, #0
    c380:	d1d6      	bne.n	c330 <_vfprintf_r+0xb20>
    c382:	68bc      	ldr	r4, [r7, #8]
    c384:	ae32      	add	r6, sp, #200	; 0xc8
    c386:	e5f8      	b.n	bf7a <_vfprintf_r+0x76a>
    c388:	9409      	str	r4, [sp, #36]	; 0x24
    c38a:	2300      	movs	r3, #0
    c38c:	2400      	movs	r4, #0
    c38e:	930c      	str	r3, [sp, #48]	; 0x30
    c390:	940d      	str	r4, [sp, #52]	; 0x34
    c392:	980c      	ldr	r0, [sp, #48]	; 0x30
    c394:	990d      	ldr	r1, [sp, #52]	; 0x34
    c396:	4653      	mov	r3, sl
    c398:	aa32      	add	r2, sp, #200	; 0xc8
    c39a:	4691      	mov	r9, r2
    c39c:	9308      	str	r3, [sp, #32]
    c39e:	46b2      	mov	sl, r6
    c3a0:	e007      	b.n	c3b2 <_vfprintf_r+0xba2>
    c3a2:	46c0      	nop			; (mov r8, r8)
    c3a4:	000158a8 	.word	0x000158a8
    c3a8:	0001529c 	.word	0x0001529c
    c3ac:	000158b8 	.word	0x000158b8
    c3b0:	46a1      	mov	r9, r4
    c3b2:	074a      	lsls	r2, r1, #29
    c3b4:	4694      	mov	ip, r2
    c3b6:	464b      	mov	r3, r9
    c3b8:	4665      	mov	r5, ip
    c3ba:	1e5c      	subs	r4, r3, #1
    c3bc:	08c6      	lsrs	r6, r0, #3
    c3be:	2307      	movs	r3, #7
    c3c0:	08ca      	lsrs	r2, r1, #3
    c3c2:	4335      	orrs	r5, r6
    c3c4:	0011      	movs	r1, r2
    c3c6:	002a      	movs	r2, r5
    c3c8:	4003      	ands	r3, r0
    c3ca:	3330      	adds	r3, #48	; 0x30
    c3cc:	7023      	strb	r3, [r4, #0]
    c3ce:	0028      	movs	r0, r5
    c3d0:	430a      	orrs	r2, r1
    c3d2:	d1ed      	bne.n	c3b0 <_vfprintf_r+0xba0>
    c3d4:	900c      	str	r0, [sp, #48]	; 0x30
    c3d6:	910d      	str	r1, [sp, #52]	; 0x34
    c3d8:	9908      	ldr	r1, [sp, #32]
    c3da:	4656      	mov	r6, sl
    c3dc:	468a      	mov	sl, r1
    c3de:	9909      	ldr	r1, [sp, #36]	; 0x24
    c3e0:	464a      	mov	r2, r9
    c3e2:	9411      	str	r4, [sp, #68]	; 0x44
    c3e4:	07c9      	lsls	r1, r1, #31
    c3e6:	d500      	bpl.n	c3ea <_vfprintf_r+0xbda>
    c3e8:	e0e0      	b.n	c5ac <_vfprintf_r+0xd9c>
    c3ea:	ab32      	add	r3, sp, #200	; 0xc8
    c3ec:	1b1b      	subs	r3, r3, r4
    c3ee:	930e      	str	r3, [sp, #56]	; 0x38
    c3f0:	f7ff fb7b 	bl	baea <_vfprintf_r+0x2da>
    c3f4:	9c07      	ldr	r4, [sp, #28]
    c3f6:	f7ff fa7d 	bl	b8f4 <_vfprintf_r+0xe4>
    c3fa:	981f      	ldr	r0, [sp, #124]	; 0x7c
    c3fc:	2800      	cmp	r0, #0
    c3fe:	dc00      	bgt.n	c402 <_vfprintf_r+0xbf2>
    c400:	e2b9      	b.n	c976 <_vfprintf_r+0x1166>
    c402:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c404:	9914      	ldr	r1, [sp, #80]	; 0x50
    c406:	0013      	movs	r3, r2
    c408:	4690      	mov	r8, r2
    c40a:	428b      	cmp	r3, r1
    c40c:	dd00      	ble.n	c410 <_vfprintf_r+0xc00>
    c40e:	4688      	mov	r8, r1
    c410:	4643      	mov	r3, r8
    c412:	2b00      	cmp	r3, #0
    c414:	dd0c      	ble.n	c430 <_vfprintf_r+0xc20>
    c416:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c418:	4444      	add	r4, r8
    c41a:	6033      	str	r3, [r6, #0]
    c41c:	4643      	mov	r3, r8
    c41e:	6073      	str	r3, [r6, #4]
    c420:	687b      	ldr	r3, [r7, #4]
    c422:	60bc      	str	r4, [r7, #8]
    c424:	3301      	adds	r3, #1
    c426:	607b      	str	r3, [r7, #4]
    c428:	2b07      	cmp	r3, #7
    c42a:	dd00      	ble.n	c42e <_vfprintf_r+0xc1e>
    c42c:	e389      	b.n	cb42 <_vfprintf_r+0x1332>
    c42e:	3608      	adds	r6, #8
    c430:	4643      	mov	r3, r8
    c432:	43db      	mvns	r3, r3
    c434:	4642      	mov	r2, r8
    c436:	17db      	asrs	r3, r3, #31
    c438:	4013      	ands	r3, r2
    c43a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c43c:	1ad3      	subs	r3, r2, r3
    c43e:	4698      	mov	r8, r3
    c440:	2b00      	cmp	r3, #0
    c442:	dc00      	bgt.n	c446 <_vfprintf_r+0xc36>
    c444:	e0eb      	b.n	c61e <_vfprintf_r+0xe0e>
    c446:	2b10      	cmp	r3, #16
    c448:	dc01      	bgt.n	c44e <_vfprintf_r+0xc3e>
    c44a:	f000 fcd9 	bl	ce00 <_vfprintf_r+0x15f0>
    c44e:	4adc      	ldr	r2, [pc, #880]	; (c7c0 <_vfprintf_r+0xfb0>)
    c450:	687b      	ldr	r3, [r7, #4]
    c452:	4691      	mov	r9, r2
    c454:	2210      	movs	r2, #16
    c456:	464d      	mov	r5, r9
    c458:	4692      	mov	sl, r2
    c45a:	0022      	movs	r2, r4
    c45c:	4644      	mov	r4, r8
    c45e:	46d8      	mov	r8, fp
    c460:	e004      	b.n	c46c <_vfprintf_r+0xc5c>
    c462:	3608      	adds	r6, #8
    c464:	3c10      	subs	r4, #16
    c466:	2c10      	cmp	r4, #16
    c468:	dc00      	bgt.n	c46c <_vfprintf_r+0xc5c>
    c46a:	e0bf      	b.n	c5ec <_vfprintf_r+0xddc>
    c46c:	4651      	mov	r1, sl
    c46e:	3210      	adds	r2, #16
    c470:	3301      	adds	r3, #1
    c472:	6035      	str	r5, [r6, #0]
    c474:	6071      	str	r1, [r6, #4]
    c476:	60ba      	str	r2, [r7, #8]
    c478:	607b      	str	r3, [r7, #4]
    c47a:	2b07      	cmp	r3, #7
    c47c:	ddf1      	ble.n	c462 <_vfprintf_r+0xc52>
    c47e:	003a      	movs	r2, r7
    c480:	4641      	mov	r1, r8
    c482:	9806      	ldr	r0, [sp, #24]
    c484:	f005 fa1e 	bl	118c4 <__sprint_r>
    c488:	2800      	cmp	r0, #0
    c48a:	d000      	beq.n	c48e <_vfprintf_r+0xc7e>
    c48c:	e3b6      	b.n	cbfc <_vfprintf_r+0x13ec>
    c48e:	68ba      	ldr	r2, [r7, #8]
    c490:	687b      	ldr	r3, [r7, #4]
    c492:	ae32      	add	r6, sp, #200	; 0xc8
    c494:	e7e6      	b.n	c464 <_vfprintf_r+0xc54>
    c496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c498:	2b00      	cmp	r3, #0
    c49a:	d100      	bne.n	c49e <_vfprintf_r+0xc8e>
    c49c:	e092      	b.n	c5c4 <_vfprintf_r+0xdb4>
    c49e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    c4a0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    c4a2:	ab32      	add	r3, sp, #200	; 0xc8
    c4a4:	46b1      	mov	r9, r6
    c4a6:	001e      	movs	r6, r3
    c4a8:	0020      	movs	r0, r4
    c4aa:	0029      	movs	r1, r5
    c4ac:	220a      	movs	r2, #10
    c4ae:	2300      	movs	r3, #0
    c4b0:	f7fa f8d2 	bl	6658 <__aeabi_uldivmod>
    c4b4:	3e01      	subs	r6, #1
    c4b6:	3230      	adds	r2, #48	; 0x30
    c4b8:	7032      	strb	r2, [r6, #0]
    c4ba:	2300      	movs	r3, #0
    c4bc:	0020      	movs	r0, r4
    c4be:	0029      	movs	r1, r5
    c4c0:	220a      	movs	r2, #10
    c4c2:	f7fa f8c9 	bl	6658 <__aeabi_uldivmod>
    c4c6:	0003      	movs	r3, r0
    c4c8:	0004      	movs	r4, r0
    c4ca:	000d      	movs	r5, r1
    c4cc:	430b      	orrs	r3, r1
    c4ce:	d1eb      	bne.n	c4a8 <_vfprintf_r+0xc98>
    c4d0:	0032      	movs	r2, r6
    c4d2:	ab32      	add	r3, sp, #200	; 0xc8
    c4d4:	1a9b      	subs	r3, r3, r2
    c4d6:	9611      	str	r6, [sp, #68]	; 0x44
    c4d8:	940c      	str	r4, [sp, #48]	; 0x30
    c4da:	950d      	str	r5, [sp, #52]	; 0x34
    c4dc:	464e      	mov	r6, r9
    c4de:	930e      	str	r3, [sp, #56]	; 0x38
    c4e0:	f7ff fb03 	bl	baea <_vfprintf_r+0x2da>
    c4e4:	2300      	movs	r3, #0
    c4e6:	930e      	str	r3, [sp, #56]	; 0x38
    c4e8:	ab32      	add	r3, sp, #200	; 0xc8
    c4ea:	9311      	str	r3, [sp, #68]	; 0x44
    c4ec:	f7ff fafd 	bl	baea <_vfprintf_r+0x2da>
    c4f0:	003a      	movs	r2, r7
    c4f2:	4659      	mov	r1, fp
    c4f4:	9806      	ldr	r0, [sp, #24]
    c4f6:	f005 f9e5 	bl	118c4 <__sprint_r>
    c4fa:	2800      	cmp	r0, #0
    c4fc:	d000      	beq.n	c500 <_vfprintf_r+0xcf0>
    c4fe:	e717      	b.n	c330 <_vfprintf_r+0xb20>
    c500:	ab16      	add	r3, sp, #88	; 0x58
    c502:	7fdb      	ldrb	r3, [r3, #31]
    c504:	68bc      	ldr	r4, [r7, #8]
    c506:	4698      	mov	r8, r3
    c508:	ae32      	add	r6, sp, #200	; 0xc8
    c50a:	e513      	b.n	bf34 <_vfprintf_r+0x724>
    c50c:	46b1      	mov	r9, r6
    c50e:	e697      	b.n	c240 <_vfprintf_r+0xa30>
    c510:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c512:	1e5d      	subs	r5, r3, #1
    c514:	2d00      	cmp	r5, #0
    c516:	dc00      	bgt.n	c51a <_vfprintf_r+0xd0a>
    c518:	e616      	b.n	c148 <_vfprintf_r+0x938>
    c51a:	4ba9      	ldr	r3, [pc, #676]	; (c7c0 <_vfprintf_r+0xfb0>)
    c51c:	4699      	mov	r9, r3
    c51e:	2d10      	cmp	r5, #16
    c520:	dc00      	bgt.n	c524 <_vfprintf_r+0xd14>
    c522:	e10a      	b.n	c73a <_vfprintf_r+0xf2a>
    c524:	2310      	movs	r3, #16
    c526:	0022      	movs	r2, r4
    c528:	469a      	mov	sl, r3
    c52a:	465c      	mov	r4, fp
    c52c:	4643      	mov	r3, r8
    c52e:	e004      	b.n	c53a <_vfprintf_r+0xd2a>
    c530:	3608      	adds	r6, #8
    c532:	3d10      	subs	r5, #16
    c534:	2d10      	cmp	r5, #16
    c536:	dc00      	bgt.n	c53a <_vfprintf_r+0xd2a>
    c538:	e0fc      	b.n	c734 <_vfprintf_r+0xf24>
    c53a:	4649      	mov	r1, r9
    c53c:	6031      	str	r1, [r6, #0]
    c53e:	4651      	mov	r1, sl
    c540:	3210      	adds	r2, #16
    c542:	3301      	adds	r3, #1
    c544:	6071      	str	r1, [r6, #4]
    c546:	60ba      	str	r2, [r7, #8]
    c548:	607b      	str	r3, [r7, #4]
    c54a:	2b07      	cmp	r3, #7
    c54c:	ddf0      	ble.n	c530 <_vfprintf_r+0xd20>
    c54e:	003a      	movs	r2, r7
    c550:	0021      	movs	r1, r4
    c552:	9806      	ldr	r0, [sp, #24]
    c554:	f005 f9b6 	bl	118c4 <__sprint_r>
    c558:	2800      	cmp	r0, #0
    c55a:	d000      	beq.n	c55e <_vfprintf_r+0xd4e>
    c55c:	e6c1      	b.n	c2e2 <_vfprintf_r+0xad2>
    c55e:	68ba      	ldr	r2, [r7, #8]
    c560:	687b      	ldr	r3, [r7, #4]
    c562:	ae32      	add	r6, sp, #200	; 0xc8
    c564:	e7e5      	b.n	c532 <_vfprintf_r+0xd22>
    c566:	990c      	ldr	r1, [sp, #48]	; 0x30
    c568:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c56a:	0008      	movs	r0, r1
    c56c:	4310      	orrs	r0, r2
    c56e:	2302      	movs	r3, #2
    c570:	0002      	movs	r2, r0
    c572:	f7ff fa93 	bl	ba9c <_vfprintf_r+0x28c>
    c576:	46a3      	mov	fp, r4
    c578:	0014      	movs	r4, r2
    c57a:	464a      	mov	r2, r9
    c57c:	1964      	adds	r4, r4, r5
    c57e:	3301      	adds	r3, #1
    c580:	6032      	str	r2, [r6, #0]
    c582:	6075      	str	r5, [r6, #4]
    c584:	60bc      	str	r4, [r7, #8]
    c586:	607b      	str	r3, [r7, #4]
    c588:	2b07      	cmp	r3, #7
    c58a:	dc00      	bgt.n	c58e <_vfprintf_r+0xd7e>
    c58c:	e542      	b.n	c014 <_vfprintf_r+0x804>
    c58e:	e5e8      	b.n	c162 <_vfprintf_r+0x952>
    c590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c592:	681a      	ldr	r2, [r3, #0]
    c594:	f7ff fa68 	bl	ba68 <_vfprintf_r+0x258>
    c598:	6813      	ldr	r3, [r2, #0]
    c59a:	9308      	str	r3, [sp, #32]
    c59c:	f7ff fb57 	bl	bc4e <_vfprintf_r+0x43e>
    c5a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c5a2:	681a      	ldr	r2, [r3, #0]
    c5a4:	e412      	b.n	bdcc <_vfprintf_r+0x5bc>
    c5a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c5a8:	681a      	ldr	r2, [r3, #0]
    c5aa:	e426      	b.n	bdfa <_vfprintf_r+0x5ea>
    c5ac:	2b30      	cmp	r3, #48	; 0x30
    c5ae:	d100      	bne.n	c5b2 <_vfprintf_r+0xda2>
    c5b0:	e23c      	b.n	ca2c <_vfprintf_r+0x121c>
    c5b2:	2330      	movs	r3, #48	; 0x30
    c5b4:	3a02      	subs	r2, #2
    c5b6:	7013      	strb	r3, [r2, #0]
    c5b8:	ab32      	add	r3, sp, #200	; 0xc8
    c5ba:	1a9b      	subs	r3, r3, r2
    c5bc:	930e      	str	r3, [sp, #56]	; 0x38
    c5be:	9211      	str	r2, [sp, #68]	; 0x44
    c5c0:	f7ff fa93 	bl	baea <_vfprintf_r+0x2da>
    c5c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c5c6:	2b09      	cmp	r3, #9
    c5c8:	d900      	bls.n	c5cc <_vfprintf_r+0xdbc>
    c5ca:	e768      	b.n	c49e <_vfprintf_r+0xc8e>
    c5cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c5ce:	2227      	movs	r2, #39	; 0x27
    c5d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c5d2:	a928      	add	r1, sp, #160	; 0xa0
    c5d4:	3330      	adds	r3, #48	; 0x30
    c5d6:	548b      	strb	r3, [r1, r2]
    c5d8:	2301      	movs	r3, #1
    c5da:	aa16      	add	r2, sp, #88	; 0x58
    c5dc:	4694      	mov	ip, r2
    c5de:	930e      	str	r3, [sp, #56]	; 0x38
    c5e0:	336e      	adds	r3, #110	; 0x6e
    c5e2:	4463      	add	r3, ip
    c5e4:	9409      	str	r4, [sp, #36]	; 0x24
    c5e6:	9311      	str	r3, [sp, #68]	; 0x44
    c5e8:	f7ff fa7f 	bl	baea <_vfprintf_r+0x2da>
    c5ec:	46c3      	mov	fp, r8
    c5ee:	46a9      	mov	r9, r5
    c5f0:	46a0      	mov	r8, r4
    c5f2:	0014      	movs	r4, r2
    c5f4:	464a      	mov	r2, r9
    c5f6:	6032      	str	r2, [r6, #0]
    c5f8:	4642      	mov	r2, r8
    c5fa:	4444      	add	r4, r8
    c5fc:	3301      	adds	r3, #1
    c5fe:	6072      	str	r2, [r6, #4]
    c600:	60bc      	str	r4, [r7, #8]
    c602:	607b      	str	r3, [r7, #4]
    c604:	2b07      	cmp	r3, #7
    c606:	dc00      	bgt.n	c60a <_vfprintf_r+0xdfa>
    c608:	e18d      	b.n	c926 <_vfprintf_r+0x1116>
    c60a:	003a      	movs	r2, r7
    c60c:	4659      	mov	r1, fp
    c60e:	9806      	ldr	r0, [sp, #24]
    c610:	f005 f958 	bl	118c4 <__sprint_r>
    c614:	2800      	cmp	r0, #0
    c616:	d000      	beq.n	c61a <_vfprintf_r+0xe0a>
    c618:	e68a      	b.n	c330 <_vfprintf_r+0xb20>
    c61a:	68bc      	ldr	r4, [r7, #8]
    c61c:	ae32      	add	r6, sp, #200	; 0xc8
    c61e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c620:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c622:	4293      	cmp	r3, r2
    c624:	db00      	blt.n	c628 <_vfprintf_r+0xe18>
    c626:	e179      	b.n	c91c <_vfprintf_r+0x110c>
    c628:	9a18      	ldr	r2, [sp, #96]	; 0x60
    c62a:	6032      	str	r2, [r6, #0]
    c62c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    c62e:	4694      	mov	ip, r2
    c630:	6072      	str	r2, [r6, #4]
    c632:	687a      	ldr	r2, [r7, #4]
    c634:	4464      	add	r4, ip
    c636:	3201      	adds	r2, #1
    c638:	60bc      	str	r4, [r7, #8]
    c63a:	607a      	str	r2, [r7, #4]
    c63c:	2a07      	cmp	r2, #7
    c63e:	dd00      	ble.n	c642 <_vfprintf_r+0xe32>
    c640:	e176      	b.n	c930 <_vfprintf_r+0x1120>
    c642:	3608      	adds	r6, #8
    c644:	9a14      	ldr	r2, [sp, #80]	; 0x50
    c646:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c648:	1ad3      	subs	r3, r2, r3
    c64a:	1a52      	subs	r2, r2, r1
    c64c:	4690      	mov	r8, r2
    c64e:	429a      	cmp	r2, r3
    c650:	dd00      	ble.n	c654 <_vfprintf_r+0xe44>
    c652:	4698      	mov	r8, r3
    c654:	4642      	mov	r2, r8
    c656:	2a00      	cmp	r2, #0
    c658:	dd0f      	ble.n	c67a <_vfprintf_r+0xe6a>
    c65a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    c65c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c65e:	468c      	mov	ip, r1
    c660:	4462      	add	r2, ip
    c662:	6032      	str	r2, [r6, #0]
    c664:	4642      	mov	r2, r8
    c666:	6072      	str	r2, [r6, #4]
    c668:	687a      	ldr	r2, [r7, #4]
    c66a:	4444      	add	r4, r8
    c66c:	3201      	adds	r2, #1
    c66e:	60bc      	str	r4, [r7, #8]
    c670:	607a      	str	r2, [r7, #4]
    c672:	2a07      	cmp	r2, #7
    c674:	dd00      	ble.n	c678 <_vfprintf_r+0xe68>
    c676:	e289      	b.n	cb8c <_vfprintf_r+0x137c>
    c678:	3608      	adds	r6, #8
    c67a:	4642      	mov	r2, r8
    c67c:	43d5      	mvns	r5, r2
    c67e:	17ed      	asrs	r5, r5, #31
    c680:	4015      	ands	r5, r2
    c682:	1b5d      	subs	r5, r3, r5
    c684:	2d00      	cmp	r5, #0
    c686:	dc00      	bgt.n	c68a <_vfprintf_r+0xe7a>
    c688:	e4c5      	b.n	c016 <_vfprintf_r+0x806>
    c68a:	4a4d      	ldr	r2, [pc, #308]	; (c7c0 <_vfprintf_r+0xfb0>)
    c68c:	687b      	ldr	r3, [r7, #4]
    c68e:	4691      	mov	r9, r2
    c690:	2d10      	cmp	r5, #16
    c692:	dc00      	bgt.n	c696 <_vfprintf_r+0xe86>
    c694:	e771      	b.n	c57a <_vfprintf_r+0xd6a>
    c696:	2210      	movs	r2, #16
    c698:	4690      	mov	r8, r2
    c69a:	0022      	movs	r2, r4
    c69c:	465c      	mov	r4, fp
    c69e:	e004      	b.n	c6aa <_vfprintf_r+0xe9a>
    c6a0:	3608      	adds	r6, #8
    c6a2:	3d10      	subs	r5, #16
    c6a4:	2d10      	cmp	r5, #16
    c6a6:	dc00      	bgt.n	c6aa <_vfprintf_r+0xe9a>
    c6a8:	e765      	b.n	c576 <_vfprintf_r+0xd66>
    c6aa:	4649      	mov	r1, r9
    c6ac:	6031      	str	r1, [r6, #0]
    c6ae:	4641      	mov	r1, r8
    c6b0:	3210      	adds	r2, #16
    c6b2:	3301      	adds	r3, #1
    c6b4:	6071      	str	r1, [r6, #4]
    c6b6:	60ba      	str	r2, [r7, #8]
    c6b8:	607b      	str	r3, [r7, #4]
    c6ba:	2b07      	cmp	r3, #7
    c6bc:	ddf0      	ble.n	c6a0 <_vfprintf_r+0xe90>
    c6be:	003a      	movs	r2, r7
    c6c0:	0021      	movs	r1, r4
    c6c2:	9806      	ldr	r0, [sp, #24]
    c6c4:	f005 f8fe 	bl	118c4 <__sprint_r>
    c6c8:	2800      	cmp	r0, #0
    c6ca:	d000      	beq.n	c6ce <_vfprintf_r+0xebe>
    c6cc:	e609      	b.n	c2e2 <_vfprintf_r+0xad2>
    c6ce:	68ba      	ldr	r2, [r7, #8]
    c6d0:	687b      	ldr	r3, [r7, #4]
    c6d2:	ae32      	add	r6, sp, #200	; 0xc8
    c6d4:	e7e5      	b.n	c6a2 <_vfprintf_r+0xe92>
    c6d6:	003a      	movs	r2, r7
    c6d8:	4659      	mov	r1, fp
    c6da:	9806      	ldr	r0, [sp, #24]
    c6dc:	f005 f8f2 	bl	118c4 <__sprint_r>
    c6e0:	2800      	cmp	r0, #0
    c6e2:	d000      	beq.n	c6e6 <_vfprintf_r+0xed6>
    c6e4:	e624      	b.n	c330 <_vfprintf_r+0xb20>
    c6e6:	68bc      	ldr	r4, [r7, #8]
    c6e8:	687b      	ldr	r3, [r7, #4]
    c6ea:	ae32      	add	r6, sp, #200	; 0xc8
    c6ec:	e504      	b.n	c0f8 <_vfprintf_r+0x8e8>
    c6ee:	2307      	movs	r3, #7
    c6f0:	3207      	adds	r2, #7
    c6f2:	439a      	bics	r2, r3
    c6f4:	3301      	adds	r3, #1
    c6f6:	469c      	mov	ip, r3
    c6f8:	4494      	add	ip, r2
    c6fa:	4663      	mov	r3, ip
    c6fc:	930f      	str	r3, [sp, #60]	; 0x3c
    c6fe:	6853      	ldr	r3, [r2, #4]
    c700:	6812      	ldr	r2, [r2, #0]
    c702:	930d      	str	r3, [sp, #52]	; 0x34
    c704:	920c      	str	r2, [sp, #48]	; 0x30
    c706:	f7ff faa7 	bl	bc58 <_vfprintf_r+0x448>
    c70a:	2207      	movs	r2, #7
    c70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c70e:	3307      	adds	r3, #7
    c710:	4393      	bics	r3, r2
    c712:	3201      	adds	r2, #1
    c714:	4694      	mov	ip, r2
    c716:	449c      	add	ip, r3
    c718:	4662      	mov	r2, ip
    c71a:	920f      	str	r2, [sp, #60]	; 0x3c
    c71c:	681a      	ldr	r2, [r3, #0]
    c71e:	685b      	ldr	r3, [r3, #4]
    c720:	0011      	movs	r1, r2
    c722:	001a      	movs	r2, r3
    c724:	0008      	movs	r0, r1
    c726:	4310      	orrs	r0, r2
    c728:	910c      	str	r1, [sp, #48]	; 0x30
    c72a:	920d      	str	r2, [sp, #52]	; 0x34
    c72c:	2300      	movs	r3, #0
    c72e:	0002      	movs	r2, r0
    c730:	f7ff f9b4 	bl	ba9c <_vfprintf_r+0x28c>
    c734:	46a3      	mov	fp, r4
    c736:	4698      	mov	r8, r3
    c738:	0014      	movs	r4, r2
    c73a:	464b      	mov	r3, r9
    c73c:	6075      	str	r5, [r6, #4]
    c73e:	6033      	str	r3, [r6, #0]
    c740:	1964      	adds	r4, r4, r5
    c742:	e4f7      	b.n	c134 <_vfprintf_r+0x924>
    c744:	003a      	movs	r2, r7
    c746:	4659      	mov	r1, fp
    c748:	9806      	ldr	r0, [sp, #24]
    c74a:	f005 f8bb 	bl	118c4 <__sprint_r>
    c74e:	2800      	cmp	r0, #0
    c750:	d000      	beq.n	c754 <_vfprintf_r+0xf44>
    c752:	e5ed      	b.n	c330 <_vfprintf_r+0xb20>
    c754:	687b      	ldr	r3, [r7, #4]
    c756:	68bc      	ldr	r4, [r7, #8]
    c758:	4698      	mov	r8, r3
    c75a:	ae32      	add	r6, sp, #200	; 0xc8
    c75c:	e4da      	b.n	c114 <_vfprintf_r+0x904>
    c75e:	2207      	movs	r2, #7
    c760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c762:	3307      	adds	r3, #7
    c764:	4393      	bics	r3, r2
    c766:	3201      	adds	r2, #1
    c768:	4694      	mov	ip, r2
    c76a:	449c      	add	ip, r3
    c76c:	4662      	mov	r2, ip
    c76e:	920f      	str	r2, [sp, #60]	; 0x3c
    c770:	681a      	ldr	r2, [r3, #0]
    c772:	685b      	ldr	r3, [r3, #4]
    c774:	0011      	movs	r1, r2
    c776:	001a      	movs	r2, r3
    c778:	0008      	movs	r0, r1
    c77a:	4310      	orrs	r0, r2
    c77c:	910c      	str	r1, [sp, #48]	; 0x30
    c77e:	920d      	str	r2, [sp, #52]	; 0x34
    c780:	2301      	movs	r3, #1
    c782:	0002      	movs	r2, r0
    c784:	f7ff f98a 	bl	ba9c <_vfprintf_r+0x28c>
    c788:	2207      	movs	r2, #7
    c78a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c78c:	3307      	adds	r3, #7
    c78e:	4393      	bics	r3, r2
    c790:	3201      	adds	r2, #1
    c792:	4694      	mov	ip, r2
    c794:	449c      	add	ip, r3
    c796:	4662      	mov	r2, ip
    c798:	920f      	str	r2, [sp, #60]	; 0x3c
    c79a:	681a      	ldr	r2, [r3, #0]
    c79c:	685b      	ldr	r3, [r3, #4]
    c79e:	920c      	str	r2, [sp, #48]	; 0x30
    c7a0:	930d      	str	r3, [sp, #52]	; 0x34
    c7a2:	f7ff f966 	bl	ba72 <_vfprintf_r+0x262>
    c7a6:	003a      	movs	r2, r7
    c7a8:	4659      	mov	r1, fp
    c7aa:	9806      	ldr	r0, [sp, #24]
    c7ac:	f005 f88a 	bl	118c4 <__sprint_r>
    c7b0:	2800      	cmp	r0, #0
    c7b2:	d000      	beq.n	c7b6 <_vfprintf_r+0xfa6>
    c7b4:	e5bc      	b.n	c330 <_vfprintf_r+0xb20>
    c7b6:	68bc      	ldr	r4, [r7, #8]
    c7b8:	ae32      	add	r6, sp, #200	; 0xc8
    c7ba:	f7ff fbe2 	bl	bf82 <_vfprintf_r+0x772>
    c7be:	46c0      	nop			; (mov r8, r8)
    c7c0:	000158b8 	.word	0x000158b8
    c7c4:	980c      	ldr	r0, [sp, #48]	; 0x30
    c7c6:	990d      	ldr	r1, [sp, #52]	; 0x34
    c7c8:	2300      	movs	r3, #0
    c7ca:	4242      	negs	r2, r0
    c7cc:	418b      	sbcs	r3, r1
    c7ce:	0011      	movs	r1, r2
    c7d0:	001a      	movs	r2, r3
    c7d2:	232d      	movs	r3, #45	; 0x2d
    c7d4:	a816      	add	r0, sp, #88	; 0x58
    c7d6:	77c3      	strb	r3, [r0, #31]
    c7d8:	0008      	movs	r0, r1
    c7da:	4310      	orrs	r0, r2
    c7dc:	910c      	str	r1, [sp, #48]	; 0x30
    c7de:	920d      	str	r2, [sp, #52]	; 0x34
    c7e0:	4698      	mov	r8, r3
    c7e2:	0002      	movs	r2, r0
    c7e4:	3b2c      	subs	r3, #44	; 0x2c
    c7e6:	f7ff f95d 	bl	baa4 <_vfprintf_r+0x294>
    c7ea:	9916      	ldr	r1, [sp, #88]	; 0x58
    c7ec:	9d15      	ldr	r5, [sp, #84]	; 0x54
    c7ee:	000a      	movs	r2, r1
    c7f0:	0008      	movs	r0, r1
    c7f2:	002b      	movs	r3, r5
    c7f4:	0029      	movs	r1, r5
    c7f6:	f005 fe71 	bl	124dc <__aeabi_dcmpun>
    c7fa:	2800      	cmp	r0, #0
    c7fc:	d000      	beq.n	c800 <_vfprintf_r+0xff0>
    c7fe:	e2c6      	b.n	cd8e <_vfprintf_r+0x157e>
    c800:	4653      	mov	r3, sl
    c802:	3301      	adds	r3, #1
    c804:	d100      	bne.n	c808 <_vfprintf_r+0xff8>
    c806:	e09f      	b.n	c948 <_vfprintf_r+0x1138>
    c808:	2320      	movs	r3, #32
    c80a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c80c:	439a      	bics	r2, r3
    c80e:	920e      	str	r2, [sp, #56]	; 0x38
    c810:	2a47      	cmp	r2, #71	; 0x47
    c812:	d100      	bne.n	c816 <_vfprintf_r+0x1006>
    c814:	e1a1      	b.n	cb5a <_vfprintf_r+0x134a>
    c816:	2380      	movs	r3, #128	; 0x80
    c818:	005b      	lsls	r3, r3, #1
    c81a:	4323      	orrs	r3, r4
    c81c:	9309      	str	r3, [sp, #36]	; 0x24
    c81e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c820:	2b00      	cmp	r3, #0
    c822:	da00      	bge.n	c826 <_vfprintf_r+0x1016>
    c824:	e1ed      	b.n	cc02 <_vfprintf_r+0x13f2>
    c826:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c828:	9308      	str	r3, [sp, #32]
    c82a:	2300      	movs	r3, #0
    c82c:	4691      	mov	r9, r2
    c82e:	9310      	str	r3, [sp, #64]	; 0x40
    c830:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c832:	2b66      	cmp	r3, #102	; 0x66
    c834:	d100      	bne.n	c838 <_vfprintf_r+0x1028>
    c836:	e1b8      	b.n	cbaa <_vfprintf_r+0x139a>
    c838:	2b46      	cmp	r3, #70	; 0x46
    c83a:	d100      	bne.n	c83e <_vfprintf_r+0x102e>
    c83c:	e237      	b.n	ccae <_vfprintf_r+0x149e>
    c83e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c840:	9806      	ldr	r0, [sp, #24]
    c842:	3a45      	subs	r2, #69	; 0x45
    c844:	0013      	movs	r3, r2
    c846:	4259      	negs	r1, r3
    c848:	4159      	adcs	r1, r3
    c84a:	ab20      	add	r3, sp, #128	; 0x80
    c84c:	000d      	movs	r5, r1
    c84e:	9303      	str	r3, [sp, #12]
    c850:	ab1f      	add	r3, sp, #124	; 0x7c
    c852:	9302      	str	r3, [sp, #8]
    c854:	2302      	movs	r3, #2
    c856:	aa23      	add	r2, sp, #140	; 0x8c
    c858:	4455      	add	r5, sl
    c85a:	921b      	str	r2, [sp, #108]	; 0x6c
    c85c:	9204      	str	r2, [sp, #16]
    c85e:	9300      	str	r3, [sp, #0]
    c860:	9501      	str	r5, [sp, #4]
    c862:	9b08      	ldr	r3, [sp, #32]
    c864:	464a      	mov	r2, r9
    c866:	f000 fd2f 	bl	d2c8 <_dtoa_r>
    c86a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c86c:	9011      	str	r0, [sp, #68]	; 0x44
    c86e:	2b67      	cmp	r3, #103	; 0x67
    c870:	d000      	beq.n	c874 <_vfprintf_r+0x1064>
    c872:	e20b      	b.n	cc8c <_vfprintf_r+0x147c>
    c874:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c876:	4698      	mov	r8, r3
    c878:	44a8      	add	r8, r5
    c87a:	07e3      	lsls	r3, r4, #31
    c87c:	d400      	bmi.n	c880 <_vfprintf_r+0x1070>
    c87e:	e277      	b.n	cd70 <_vfprintf_r+0x1560>
    c880:	2300      	movs	r3, #0
    c882:	2200      	movs	r2, #0
    c884:	4648      	mov	r0, r9
    c886:	9908      	ldr	r1, [sp, #32]
    c888:	f7fb fe22 	bl	84d0 <__aeabi_dcmpeq>
    c88c:	4643      	mov	r3, r8
    c88e:	2800      	cmp	r0, #0
    c890:	d10a      	bne.n	c8a8 <_vfprintf_r+0x1098>
    c892:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c894:	4543      	cmp	r3, r8
    c896:	d207      	bcs.n	c8a8 <_vfprintf_r+0x1098>
    c898:	2130      	movs	r1, #48	; 0x30
    c89a:	4640      	mov	r0, r8
    c89c:	1c5a      	adds	r2, r3, #1
    c89e:	9223      	str	r2, [sp, #140]	; 0x8c
    c8a0:	7019      	strb	r1, [r3, #0]
    c8a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    c8a4:	4298      	cmp	r0, r3
    c8a6:	d8f9      	bhi.n	c89c <_vfprintf_r+0x108c>
    c8a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    c8aa:	1a9b      	subs	r3, r3, r2
    c8ac:	9314      	str	r3, [sp, #80]	; 0x50
    c8ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c8b0:	2b47      	cmp	r3, #71	; 0x47
    c8b2:	d100      	bne.n	c8b6 <_vfprintf_r+0x10a6>
    c8b4:	e0d0      	b.n	ca58 <_vfprintf_r+0x1248>
    c8b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c8b8:	2b65      	cmp	r3, #101	; 0x65
    c8ba:	dc00      	bgt.n	c8be <_vfprintf_r+0x10ae>
    c8bc:	e2d5      	b.n	ce6a <_vfprintf_r+0x165a>
    c8be:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c8c0:	2b66      	cmp	r3, #102	; 0x66
    c8c2:	d100      	bne.n	c8c6 <_vfprintf_r+0x10b6>
    c8c4:	e1c6      	b.n	cc54 <_vfprintf_r+0x1444>
    c8c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c8c8:	9313      	str	r3, [sp, #76]	; 0x4c
    c8ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c8cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    c8ce:	0019      	movs	r1, r3
    c8d0:	4291      	cmp	r1, r2
    c8d2:	dd00      	ble.n	c8d6 <_vfprintf_r+0x10c6>
    c8d4:	e1a0      	b.n	cc18 <_vfprintf_r+0x1408>
    c8d6:	07e3      	lsls	r3, r4, #31
    c8d8:	d500      	bpl.n	c8dc <_vfprintf_r+0x10cc>
    c8da:	e242      	b.n	cd62 <_vfprintf_r+0x1552>
    c8dc:	43d3      	mvns	r3, r2
    c8de:	17db      	asrs	r3, r3, #31
    c8e0:	0011      	movs	r1, r2
    c8e2:	401a      	ands	r2, r3
    c8e4:	2367      	movs	r3, #103	; 0x67
    c8e6:	9208      	str	r2, [sp, #32]
    c8e8:	910e      	str	r1, [sp, #56]	; 0x38
    c8ea:	9312      	str	r3, [sp, #72]	; 0x48
    c8ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c8ee:	2b00      	cmp	r3, #0
    c8f0:	d000      	beq.n	c8f4 <_vfprintf_r+0x10e4>
    c8f2:	e0a9      	b.n	ca48 <_vfprintf_r+0x1238>
    c8f4:	ab16      	add	r3, sp, #88	; 0x58
    c8f6:	7fdb      	ldrb	r3, [r3, #31]
    c8f8:	4698      	mov	r8, r3
    c8fa:	2300      	movs	r3, #0
    c8fc:	469a      	mov	sl, r3
    c8fe:	f7ff f8fc 	bl	bafa <_vfprintf_r+0x2ea>
    c902:	46cb      	mov	fp, r9
    c904:	46a1      	mov	r9, r4
    c906:	0014      	movs	r4, r2
    c908:	e637      	b.n	c57a <_vfprintf_r+0xd6a>
    c90a:	464b      	mov	r3, r9
    c90c:	6d98      	ldr	r0, [r3, #88]	; 0x58
    c90e:	f002 f915 	bl	eb3c <__retarget_lock_release_recursive>
    c912:	2301      	movs	r3, #1
    c914:	425b      	negs	r3, r3
    c916:	930a      	str	r3, [sp, #40]	; 0x28
    c918:	f7ff f82b 	bl	b972 <_vfprintf_r+0x162>
    c91c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c91e:	07d2      	lsls	r2, r2, #31
    c920:	d400      	bmi.n	c924 <_vfprintf_r+0x1114>
    c922:	e68f      	b.n	c644 <_vfprintf_r+0xe34>
    c924:	e680      	b.n	c628 <_vfprintf_r+0xe18>
    c926:	3608      	adds	r6, #8
    c928:	e679      	b.n	c61e <_vfprintf_r+0xe0e>
    c92a:	68bc      	ldr	r4, [r7, #8]
    c92c:	f7ff fb73 	bl	c016 <_vfprintf_r+0x806>
    c930:	003a      	movs	r2, r7
    c932:	4659      	mov	r1, fp
    c934:	9806      	ldr	r0, [sp, #24]
    c936:	f004 ffc5 	bl	118c4 <__sprint_r>
    c93a:	2800      	cmp	r0, #0
    c93c:	d000      	beq.n	c940 <_vfprintf_r+0x1130>
    c93e:	e4f7      	b.n	c330 <_vfprintf_r+0xb20>
    c940:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    c942:	68bc      	ldr	r4, [r7, #8]
    c944:	ae32      	add	r6, sp, #200	; 0xc8
    c946:	e67d      	b.n	c644 <_vfprintf_r+0xe34>
    c948:	2320      	movs	r3, #32
    c94a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    c94c:	439a      	bics	r2, r3
    c94e:	3b1a      	subs	r3, #26
    c950:	920e      	str	r2, [sp, #56]	; 0x38
    c952:	469a      	mov	sl, r3
    c954:	e75f      	b.n	c816 <_vfprintf_r+0x1006>
    c956:	232d      	movs	r3, #45	; 0x2d
    c958:	aa16      	add	r2, sp, #88	; 0x58
    c95a:	77d3      	strb	r3, [r2, #31]
    c95c:	4698      	mov	r8, r3
    c95e:	f7ff faa8 	bl	beb2 <_vfprintf_r+0x6a2>
    c962:	003a      	movs	r2, r7
    c964:	4659      	mov	r1, fp
    c966:	9806      	ldr	r0, [sp, #24]
    c968:	f004 ffac 	bl	118c4 <__sprint_r>
    c96c:	2800      	cmp	r0, #0
    c96e:	d000      	beq.n	c972 <_vfprintf_r+0x1162>
    c970:	e4de      	b.n	c330 <_vfprintf_r+0xb20>
    c972:	ae32      	add	r6, sp, #200	; 0xc8
    c974:	e419      	b.n	c1aa <_vfprintf_r+0x99a>
    c976:	4be3      	ldr	r3, [pc, #908]	; (cd04 <_vfprintf_r+0x14f4>)
    c978:	3401      	adds	r4, #1
    c97a:	6033      	str	r3, [r6, #0]
    c97c:	2301      	movs	r3, #1
    c97e:	6073      	str	r3, [r6, #4]
    c980:	687b      	ldr	r3, [r7, #4]
    c982:	60bc      	str	r4, [r7, #8]
    c984:	3301      	adds	r3, #1
    c986:	607b      	str	r3, [r7, #4]
    c988:	2b07      	cmp	r3, #7
    c98a:	dd00      	ble.n	c98e <_vfprintf_r+0x117e>
    c98c:	e155      	b.n	cc3a <_vfprintf_r+0x142a>
    c98e:	3608      	adds	r6, #8
    c990:	2800      	cmp	r0, #0
    c992:	d107      	bne.n	c9a4 <_vfprintf_r+0x1194>
    c994:	9b14      	ldr	r3, [sp, #80]	; 0x50
    c996:	2b00      	cmp	r3, #0
    c998:	d104      	bne.n	c9a4 <_vfprintf_r+0x1194>
    c99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c99c:	07db      	lsls	r3, r3, #31
    c99e:	d401      	bmi.n	c9a4 <_vfprintf_r+0x1194>
    c9a0:	f7ff fb39 	bl	c016 <_vfprintf_r+0x806>
    c9a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    c9a6:	6033      	str	r3, [r6, #0]
    c9a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    c9aa:	1919      	adds	r1, r3, r4
    c9ac:	6073      	str	r3, [r6, #4]
    c9ae:	687b      	ldr	r3, [r7, #4]
    c9b0:	60b9      	str	r1, [r7, #8]
    c9b2:	3301      	adds	r3, #1
    c9b4:	607b      	str	r3, [r7, #4]
    c9b6:	2b07      	cmp	r3, #7
    c9b8:	dd00      	ble.n	c9bc <_vfprintf_r+0x11ac>
    c9ba:	e1c4      	b.n	cd46 <_vfprintf_r+0x1536>
    c9bc:	0032      	movs	r2, r6
    c9be:	3208      	adds	r2, #8
    c9c0:	2800      	cmp	r0, #0
    c9c2:	da00      	bge.n	c9c6 <_vfprintf_r+0x11b6>
    c9c4:	e195      	b.n	ccf2 <_vfprintf_r+0x14e2>
    c9c6:	9811      	ldr	r0, [sp, #68]	; 0x44
    c9c8:	3301      	adds	r3, #1
    c9ca:	6010      	str	r0, [r2, #0]
    c9cc:	9814      	ldr	r0, [sp, #80]	; 0x50
    c9ce:	607b      	str	r3, [r7, #4]
    c9d0:	1844      	adds	r4, r0, r1
    c9d2:	6050      	str	r0, [r2, #4]
    c9d4:	60bc      	str	r4, [r7, #8]
    c9d6:	2b07      	cmp	r3, #7
    c9d8:	dd01      	ble.n	c9de <_vfprintf_r+0x11ce>
    c9da:	f7ff fbc2 	bl	c162 <_vfprintf_r+0x952>
    c9de:	3208      	adds	r2, #8
    c9e0:	0016      	movs	r6, r2
    c9e2:	f7ff fb18 	bl	c016 <_vfprintf_r+0x806>
    c9e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c9e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c9ea:	680b      	ldr	r3, [r1, #0]
    c9ec:	601a      	str	r2, [r3, #0]
    c9ee:	17d2      	asrs	r2, r2, #31
    c9f0:	605a      	str	r2, [r3, #4]
    c9f2:	000b      	movs	r3, r1
    c9f4:	3304      	adds	r3, #4
    c9f6:	930f      	str	r3, [sp, #60]	; 0x3c
    c9f8:	f7fe ff58 	bl	b8ac <_vfprintf_r+0x9c>
    c9fc:	464b      	mov	r3, r9
    c9fe:	9a07      	ldr	r2, [sp, #28]
    ca00:	431c      	orrs	r4, r3
    ca02:	3201      	adds	r2, #1
    ca04:	7813      	ldrb	r3, [r2, #0]
    ca06:	9207      	str	r2, [sp, #28]
    ca08:	f7fe ff8b 	bl	b922 <_vfprintf_r+0x112>
    ca0c:	003a      	movs	r2, r7
    ca0e:	4659      	mov	r1, fp
    ca10:	9806      	ldr	r0, [sp, #24]
    ca12:	f004 ff57 	bl	118c4 <__sprint_r>
    ca16:	2800      	cmp	r0, #0
    ca18:	d000      	beq.n	ca1c <_vfprintf_r+0x120c>
    ca1a:	e489      	b.n	c330 <_vfprintf_r+0xb20>
    ca1c:	68bc      	ldr	r4, [r7, #8]
    ca1e:	ae32      	add	r6, sp, #200	; 0xc8
    ca20:	f7ff fbdc 	bl	c1dc <_vfprintf_r+0x9cc>
    ca24:	4bb8      	ldr	r3, [pc, #736]	; (cd08 <_vfprintf_r+0x14f8>)
    ca26:	9311      	str	r3, [sp, #68]	; 0x44
    ca28:	f7ff fa4a 	bl	bec0 <_vfprintf_r+0x6b0>
    ca2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ca2e:	ab32      	add	r3, sp, #200	; 0xc8
    ca30:	1a9b      	subs	r3, r3, r2
    ca32:	930e      	str	r3, [sp, #56]	; 0x38
    ca34:	f7ff f859 	bl	baea <_vfprintf_r+0x2da>
    ca38:	9811      	ldr	r0, [sp, #68]	; 0x44
    ca3a:	f7fc f9bb 	bl	8db4 <strlen>
    ca3e:	0002      	movs	r2, r0
    ca40:	900e      	str	r0, [sp, #56]	; 0x38
    ca42:	0003      	movs	r3, r0
    ca44:	f7ff f9a1 	bl	bd8a <_vfprintf_r+0x57a>
    ca48:	232d      	movs	r3, #45	; 0x2d
    ca4a:	aa16      	add	r2, sp, #88	; 0x58
    ca4c:	77d3      	strb	r3, [r2, #31]
    ca4e:	4698      	mov	r8, r3
    ca50:	2300      	movs	r3, #0
    ca52:	469a      	mov	sl, r3
    ca54:	f7ff f854 	bl	bb00 <_vfprintf_r+0x2f0>
    ca58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ca5a:	9313      	str	r3, [sp, #76]	; 0x4c
    ca5c:	1cda      	adds	r2, r3, #3
    ca5e:	db02      	blt.n	ca66 <_vfprintf_r+0x1256>
    ca60:	459a      	cmp	sl, r3
    ca62:	db00      	blt.n	ca66 <_vfprintf_r+0x1256>
    ca64:	e731      	b.n	c8ca <_vfprintf_r+0x10ba>
    ca66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ca68:	3b02      	subs	r3, #2
    ca6a:	9312      	str	r3, [sp, #72]	; 0x48
    ca6c:	222c      	movs	r2, #44	; 0x2c
    ca6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ca70:	2148      	movs	r1, #72	; 0x48
    ca72:	1e5d      	subs	r5, r3, #1
    ca74:	ab16      	add	r3, sp, #88	; 0x58
    ca76:	189b      	adds	r3, r3, r2
    ca78:	466a      	mov	r2, sp
    ca7a:	1852      	adds	r2, r2, r1
    ca7c:	7812      	ldrb	r2, [r2, #0]
    ca7e:	951f      	str	r5, [sp, #124]	; 0x7c
    ca80:	701a      	strb	r2, [r3, #0]
    ca82:	2d00      	cmp	r5, #0
    ca84:	da00      	bge.n	ca88 <_vfprintf_r+0x1278>
    ca86:	e1cb      	b.n	ce20 <_vfprintf_r+0x1610>
    ca88:	212d      	movs	r1, #45	; 0x2d
    ca8a:	232b      	movs	r3, #43	; 0x2b
    ca8c:	aa16      	add	r2, sp, #88	; 0x58
    ca8e:	1852      	adds	r2, r2, r1
    ca90:	7013      	strb	r3, [r2, #0]
    ca92:	2d09      	cmp	r5, #9
    ca94:	dc00      	bgt.n	ca98 <_vfprintf_r+0x1288>
    ca96:	e16d      	b.n	cd74 <_vfprintf_r+0x1564>
    ca98:	aa16      	add	r2, sp, #88	; 0x58
    ca9a:	233b      	movs	r3, #59	; 0x3b
    ca9c:	4694      	mov	ip, r2
    ca9e:	4463      	add	r3, ip
    caa0:	469a      	mov	sl, r3
    caa2:	46b1      	mov	r9, r6
    caa4:	46a0      	mov	r8, r4
    caa6:	4656      	mov	r6, sl
    caa8:	e000      	b.n	caac <_vfprintf_r+0x129c>
    caaa:	0026      	movs	r6, r4
    caac:	0028      	movs	r0, r5
    caae:	210a      	movs	r1, #10
    cab0:	f7f9 fdcc 	bl	664c <__aeabi_idivmod>
    cab4:	1e74      	subs	r4, r6, #1
    cab6:	3130      	adds	r1, #48	; 0x30
    cab8:	7021      	strb	r1, [r4, #0]
    caba:	0028      	movs	r0, r5
    cabc:	210a      	movs	r1, #10
    cabe:	f7f9 fcdf 	bl	6480 <__divsi3>
    cac2:	0005      	movs	r5, r0
    cac4:	2809      	cmp	r0, #9
    cac6:	dcf0      	bgt.n	caaa <_vfprintf_r+0x129a>
    cac8:	0023      	movs	r3, r4
    caca:	4644      	mov	r4, r8
    cacc:	46b0      	mov	r8, r6
    cace:	464e      	mov	r6, r9
    cad0:	4699      	mov	r9, r3
    cad2:	0003      	movs	r3, r0
    cad4:	3330      	adds	r3, #48	; 0x30
    cad6:	b2d8      	uxtb	r0, r3
    cad8:	4643      	mov	r3, r8
    cada:	3b02      	subs	r3, #2
    cadc:	7018      	strb	r0, [r3, #0]
    cade:	459a      	cmp	sl, r3
    cae0:	d800      	bhi.n	cae4 <_vfprintf_r+0x12d4>
    cae2:	e1f6      	b.n	ced2 <_vfprintf_r+0x16c2>
    cae4:	4642      	mov	r2, r8
    cae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    cae8:	4645      	mov	r5, r8
    caea:	1a99      	subs	r1, r3, r2
    caec:	2301      	movs	r3, #1
    caee:	3107      	adds	r1, #7
    caf0:	425b      	negs	r3, r3
    caf2:	e001      	b.n	caf8 <_vfprintf_r+0x12e8>
    caf4:	5ce8      	ldrb	r0, [r5, r3]
    caf6:	3301      	adds	r3, #1
    caf8:	aa21      	add	r2, sp, #132	; 0x84
    cafa:	18d2      	adds	r2, r2, r3
    cafc:	70d0      	strb	r0, [r2, #3]
    cafe:	428b      	cmp	r3, r1
    cb00:	d1f8      	bne.n	caf4 <_vfprintf_r+0x12e4>
    cb02:	a916      	add	r1, sp, #88	; 0x58
    cb04:	468c      	mov	ip, r1
    cb06:	222e      	movs	r2, #46	; 0x2e
    cb08:	464b      	mov	r3, r9
    cb0a:	4462      	add	r2, ip
    cb0c:	4694      	mov	ip, r2
    cb0e:	1afb      	subs	r3, r7, r3
    cb10:	4463      	add	r3, ip
    cb12:	aa21      	add	r2, sp, #132	; 0x84
    cb14:	9914      	ldr	r1, [sp, #80]	; 0x50
    cb16:	1a9b      	subs	r3, r3, r2
    cb18:	469c      	mov	ip, r3
    cb1a:	000a      	movs	r2, r1
    cb1c:	4462      	add	r2, ip
    cb1e:	931a      	str	r3, [sp, #104]	; 0x68
    cb20:	920e      	str	r2, [sp, #56]	; 0x38
    cb22:	2901      	cmp	r1, #1
    cb24:	dc00      	bgt.n	cb28 <_vfprintf_r+0x1318>
    cb26:	e170      	b.n	ce0a <_vfprintf_r+0x15fa>
    cb28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cb2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb2c:	4694      	mov	ip, r2
    cb2e:	4463      	add	r3, ip
    cb30:	001a      	movs	r2, r3
    cb32:	930e      	str	r3, [sp, #56]	; 0x38
    cb34:	43db      	mvns	r3, r3
    cb36:	17db      	asrs	r3, r3, #31
    cb38:	401a      	ands	r2, r3
    cb3a:	2300      	movs	r3, #0
    cb3c:	9208      	str	r2, [sp, #32]
    cb3e:	9313      	str	r3, [sp, #76]	; 0x4c
    cb40:	e6d4      	b.n	c8ec <_vfprintf_r+0x10dc>
    cb42:	003a      	movs	r2, r7
    cb44:	4659      	mov	r1, fp
    cb46:	9806      	ldr	r0, [sp, #24]
    cb48:	f004 febc 	bl	118c4 <__sprint_r>
    cb4c:	2800      	cmp	r0, #0
    cb4e:	d001      	beq.n	cb54 <_vfprintf_r+0x1344>
    cb50:	f7ff fbee 	bl	c330 <_vfprintf_r+0xb20>
    cb54:	68bc      	ldr	r4, [r7, #8]
    cb56:	ae32      	add	r6, sp, #200	; 0xc8
    cb58:	e46a      	b.n	c430 <_vfprintf_r+0xc20>
    cb5a:	4653      	mov	r3, sl
    cb5c:	2b00      	cmp	r3, #0
    cb5e:	d000      	beq.n	cb62 <_vfprintf_r+0x1352>
    cb60:	e659      	b.n	c816 <_vfprintf_r+0x1006>
    cb62:	3301      	adds	r3, #1
    cb64:	469a      	mov	sl, r3
    cb66:	e656      	b.n	c816 <_vfprintf_r+0x1006>
    cb68:	4653      	mov	r3, sl
    cb6a:	9308      	str	r3, [sp, #32]
    cb6c:	2b06      	cmp	r3, #6
    cb6e:	d901      	bls.n	cb74 <_vfprintf_r+0x1364>
    cb70:	2306      	movs	r3, #6
    cb72:	9308      	str	r3, [sp, #32]
    cb74:	9b08      	ldr	r3, [sp, #32]
    cb76:	950f      	str	r5, [sp, #60]	; 0x3c
    cb78:	930e      	str	r3, [sp, #56]	; 0x38
    cb7a:	2300      	movs	r3, #0
    cb7c:	4698      	mov	r8, r3
    cb7e:	469a      	mov	sl, r3
    cb80:	9313      	str	r3, [sp, #76]	; 0x4c
    cb82:	4b62      	ldr	r3, [pc, #392]	; (cd0c <_vfprintf_r+0x14fc>)
    cb84:	9409      	str	r4, [sp, #36]	; 0x24
    cb86:	9311      	str	r3, [sp, #68]	; 0x44
    cb88:	f7fe ffbd 	bl	bb06 <_vfprintf_r+0x2f6>
    cb8c:	003a      	movs	r2, r7
    cb8e:	4659      	mov	r1, fp
    cb90:	9806      	ldr	r0, [sp, #24]
    cb92:	f004 fe97 	bl	118c4 <__sprint_r>
    cb96:	2800      	cmp	r0, #0
    cb98:	d001      	beq.n	cb9e <_vfprintf_r+0x138e>
    cb9a:	f7ff fbc9 	bl	c330 <_vfprintf_r+0xb20>
    cb9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cba0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    cba2:	68bc      	ldr	r4, [r7, #8]
    cba4:	1a9b      	subs	r3, r3, r2
    cba6:	ae32      	add	r6, sp, #200	; 0xc8
    cba8:	e567      	b.n	c67a <_vfprintf_r+0xe6a>
    cbaa:	ab23      	add	r3, sp, #140	; 0x8c
    cbac:	931b      	str	r3, [sp, #108]	; 0x6c
    cbae:	9304      	str	r3, [sp, #16]
    cbb0:	ab20      	add	r3, sp, #128	; 0x80
    cbb2:	9303      	str	r3, [sp, #12]
    cbb4:	ab1f      	add	r3, sp, #124	; 0x7c
    cbb6:	9302      	str	r3, [sp, #8]
    cbb8:	4653      	mov	r3, sl
    cbba:	9301      	str	r3, [sp, #4]
    cbbc:	2303      	movs	r3, #3
    cbbe:	464a      	mov	r2, r9
    cbc0:	9300      	str	r3, [sp, #0]
    cbc2:	9806      	ldr	r0, [sp, #24]
    cbc4:	9b08      	ldr	r3, [sp, #32]
    cbc6:	f000 fb7f 	bl	d2c8 <_dtoa_r>
    cbca:	0003      	movs	r3, r0
    cbcc:	4453      	add	r3, sl
    cbce:	4698      	mov	r8, r3
    cbd0:	4655      	mov	r5, sl
    cbd2:	9011      	str	r0, [sp, #68]	; 0x44
    cbd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cbd6:	781b      	ldrb	r3, [r3, #0]
    cbd8:	2b30      	cmp	r3, #48	; 0x30
    cbda:	d002      	beq.n	cbe2 <_vfprintf_r+0x13d2>
    cbdc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cbde:	4498      	add	r8, r3
    cbe0:	e64e      	b.n	c880 <_vfprintf_r+0x1070>
    cbe2:	2200      	movs	r2, #0
    cbe4:	2300      	movs	r3, #0
    cbe6:	4648      	mov	r0, r9
    cbe8:	9908      	ldr	r1, [sp, #32]
    cbea:	f7fb fc71 	bl	84d0 <__aeabi_dcmpeq>
    cbee:	2800      	cmp	r0, #0
    cbf0:	d1f4      	bne.n	cbdc <_vfprintf_r+0x13cc>
    cbf2:	2301      	movs	r3, #1
    cbf4:	1b5b      	subs	r3, r3, r5
    cbf6:	931f      	str	r3, [sp, #124]	; 0x7c
    cbf8:	4498      	add	r8, r3
    cbfa:	e641      	b.n	c880 <_vfprintf_r+0x1070>
    cbfc:	46c1      	mov	r9, r8
    cbfe:	f7ff fb1f 	bl	c240 <_vfprintf_r+0xa30>
    cc02:	2280      	movs	r2, #128	; 0x80
    cc04:	0612      	lsls	r2, r2, #24
    cc06:	4694      	mov	ip, r2
    cc08:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cc0a:	4699      	mov	r9, r3
    cc0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cc0e:	4463      	add	r3, ip
    cc10:	9308      	str	r3, [sp, #32]
    cc12:	232d      	movs	r3, #45	; 0x2d
    cc14:	9310      	str	r3, [sp, #64]	; 0x40
    cc16:	e60b      	b.n	c830 <_vfprintf_r+0x1020>
    cc18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cc1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc1c:	4694      	mov	ip, r2
    cc1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cc20:	4463      	add	r3, ip
    cc22:	930e      	str	r3, [sp, #56]	; 0x38
    cc24:	2a00      	cmp	r2, #0
    cc26:	dc00      	bgt.n	cc2a <_vfprintf_r+0x141a>
    cc28:	e0e3      	b.n	cdf2 <_vfprintf_r+0x15e2>
    cc2a:	001a      	movs	r2, r3
    cc2c:	43db      	mvns	r3, r3
    cc2e:	17db      	asrs	r3, r3, #31
    cc30:	401a      	ands	r2, r3
    cc32:	2367      	movs	r3, #103	; 0x67
    cc34:	9208      	str	r2, [sp, #32]
    cc36:	9312      	str	r3, [sp, #72]	; 0x48
    cc38:	e658      	b.n	c8ec <_vfprintf_r+0x10dc>
    cc3a:	003a      	movs	r2, r7
    cc3c:	4659      	mov	r1, fp
    cc3e:	9806      	ldr	r0, [sp, #24]
    cc40:	f004 fe40 	bl	118c4 <__sprint_r>
    cc44:	2800      	cmp	r0, #0
    cc46:	d001      	beq.n	cc4c <_vfprintf_r+0x143c>
    cc48:	f7ff fb72 	bl	c330 <_vfprintf_r+0xb20>
    cc4c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cc4e:	68bc      	ldr	r4, [r7, #8]
    cc50:	ae32      	add	r6, sp, #200	; 0xc8
    cc52:	e69d      	b.n	c990 <_vfprintf_r+0x1180>
    cc54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cc56:	9313      	str	r3, [sp, #76]	; 0x4c
    cc58:	2b00      	cmp	r3, #0
    cc5a:	dc00      	bgt.n	cc5e <_vfprintf_r+0x144e>
    cc5c:	e0f2      	b.n	ce44 <_vfprintf_r+0x1634>
    cc5e:	4652      	mov	r2, sl
    cc60:	2a00      	cmp	r2, #0
    cc62:	d000      	beq.n	cc66 <_vfprintf_r+0x1456>
    cc64:	e0a0      	b.n	cda8 <_vfprintf_r+0x1598>
    cc66:	07e2      	lsls	r2, r4, #31
    cc68:	d500      	bpl.n	cc6c <_vfprintf_r+0x145c>
    cc6a:	e09d      	b.n	cda8 <_vfprintf_r+0x1598>
    cc6c:	9308      	str	r3, [sp, #32]
    cc6e:	930e      	str	r3, [sp, #56]	; 0x38
    cc70:	e63c      	b.n	c8ec <_vfprintf_r+0x10dc>
    cc72:	ab16      	add	r3, sp, #88	; 0x58
    cc74:	7fdb      	ldrb	r3, [r3, #31]
    cc76:	950f      	str	r5, [sp, #60]	; 0x3c
    cc78:	4698      	mov	r8, r3
    cc7a:	4653      	mov	r3, sl
    cc7c:	9308      	str	r3, [sp, #32]
    cc7e:	930e      	str	r3, [sp, #56]	; 0x38
    cc80:	2300      	movs	r3, #0
    cc82:	9409      	str	r4, [sp, #36]	; 0x24
    cc84:	469a      	mov	sl, r3
    cc86:	9313      	str	r3, [sp, #76]	; 0x4c
    cc88:	f7fe ff37 	bl	bafa <_vfprintf_r+0x2ea>
    cc8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc8e:	4698      	mov	r8, r3
    cc90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cc92:	44a8      	add	r8, r5
    cc94:	2b47      	cmp	r3, #71	; 0x47
    cc96:	d000      	beq.n	cc9a <_vfprintf_r+0x148a>
    cc98:	e5f2      	b.n	c880 <_vfprintf_r+0x1070>
    cc9a:	07e3      	lsls	r3, r4, #31
    cc9c:	d400      	bmi.n	cca0 <_vfprintf_r+0x1490>
    cc9e:	e0dc      	b.n	ce5a <_vfprintf_r+0x164a>
    cca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cca2:	4698      	mov	r8, r3
    cca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cca6:	44a8      	add	r8, r5
    cca8:	2b46      	cmp	r3, #70	; 0x46
    ccaa:	d093      	beq.n	cbd4 <_vfprintf_r+0x13c4>
    ccac:	e5e8      	b.n	c880 <_vfprintf_r+0x1070>
    ccae:	ab23      	add	r3, sp, #140	; 0x8c
    ccb0:	931b      	str	r3, [sp, #108]	; 0x6c
    ccb2:	9304      	str	r3, [sp, #16]
    ccb4:	ab20      	add	r3, sp, #128	; 0x80
    ccb6:	9303      	str	r3, [sp, #12]
    ccb8:	ab1f      	add	r3, sp, #124	; 0x7c
    ccba:	9302      	str	r3, [sp, #8]
    ccbc:	4653      	mov	r3, sl
    ccbe:	9301      	str	r3, [sp, #4]
    ccc0:	2303      	movs	r3, #3
    ccc2:	464a      	mov	r2, r9
    ccc4:	9300      	str	r3, [sp, #0]
    ccc6:	9806      	ldr	r0, [sp, #24]
    ccc8:	9b08      	ldr	r3, [sp, #32]
    ccca:	f000 fafd 	bl	d2c8 <_dtoa_r>
    ccce:	4655      	mov	r5, sl
    ccd0:	9011      	str	r0, [sp, #68]	; 0x44
    ccd2:	e7e5      	b.n	cca0 <_vfprintf_r+0x1490>
    ccd4:	003a      	movs	r2, r7
    ccd6:	4659      	mov	r1, fp
    ccd8:	9806      	ldr	r0, [sp, #24]
    ccda:	f004 fdf3 	bl	118c4 <__sprint_r>
    ccde:	2800      	cmp	r0, #0
    cce0:	d101      	bne.n	cce6 <_vfprintf_r+0x14d6>
    cce2:	f7ff faab 	bl	c23c <_vfprintf_r+0xa2c>
    cce6:	f7ff faab 	bl	c240 <_vfprintf_r+0xa30>
    ccea:	4642      	mov	r2, r8
    ccec:	9207      	str	r2, [sp, #28]
    ccee:	f7fe fe1b 	bl	b928 <_vfprintf_r+0x118>
    ccf2:	4244      	negs	r4, r0
    ccf4:	3010      	adds	r0, #16
    ccf6:	db00      	blt.n	ccfa <_vfprintf_r+0x14ea>
    ccf8:	e0d8      	b.n	ceac <_vfprintf_r+0x169c>
    ccfa:	4805      	ldr	r0, [pc, #20]	; (cd10 <_vfprintf_r+0x1500>)
    ccfc:	2610      	movs	r6, #16
    ccfe:	0005      	movs	r5, r0
    cd00:	e00c      	b.n	cd1c <_vfprintf_r+0x150c>
    cd02:	46c0      	nop			; (mov r8, r8)
    cd04:	0001529c 	.word	0x0001529c
    cd08:	00015260 	.word	0x00015260
    cd0c:	00015294 	.word	0x00015294
    cd10:	000158b8 	.word	0x000158b8
    cd14:	3208      	adds	r2, #8
    cd16:	3c10      	subs	r4, #16
    cd18:	2c10      	cmp	r4, #16
    cd1a:	dd51      	ble.n	cdc0 <_vfprintf_r+0x15b0>
    cd1c:	3110      	adds	r1, #16
    cd1e:	3301      	adds	r3, #1
    cd20:	6015      	str	r5, [r2, #0]
    cd22:	6056      	str	r6, [r2, #4]
    cd24:	60b9      	str	r1, [r7, #8]
    cd26:	607b      	str	r3, [r7, #4]
    cd28:	2b07      	cmp	r3, #7
    cd2a:	ddf3      	ble.n	cd14 <_vfprintf_r+0x1504>
    cd2c:	003a      	movs	r2, r7
    cd2e:	4659      	mov	r1, fp
    cd30:	9806      	ldr	r0, [sp, #24]
    cd32:	f004 fdc7 	bl	118c4 <__sprint_r>
    cd36:	2800      	cmp	r0, #0
    cd38:	d001      	beq.n	cd3e <_vfprintf_r+0x152e>
    cd3a:	f7ff faf9 	bl	c330 <_vfprintf_r+0xb20>
    cd3e:	68b9      	ldr	r1, [r7, #8]
    cd40:	687b      	ldr	r3, [r7, #4]
    cd42:	aa32      	add	r2, sp, #200	; 0xc8
    cd44:	e7e7      	b.n	cd16 <_vfprintf_r+0x1506>
    cd46:	003a      	movs	r2, r7
    cd48:	4659      	mov	r1, fp
    cd4a:	9806      	ldr	r0, [sp, #24]
    cd4c:	f004 fdba 	bl	118c4 <__sprint_r>
    cd50:	2800      	cmp	r0, #0
    cd52:	d001      	beq.n	cd58 <_vfprintf_r+0x1548>
    cd54:	f7ff faec 	bl	c330 <_vfprintf_r+0xb20>
    cd58:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cd5a:	68b9      	ldr	r1, [r7, #8]
    cd5c:	687b      	ldr	r3, [r7, #4]
    cd5e:	aa32      	add	r2, sp, #200	; 0xc8
    cd60:	e62e      	b.n	c9c0 <_vfprintf_r+0x11b0>
    cd62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cd64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cd66:	4694      	mov	ip, r2
    cd68:	4463      	add	r3, ip
    cd6a:	001a      	movs	r2, r3
    cd6c:	930e      	str	r3, [sp, #56]	; 0x38
    cd6e:	e75d      	b.n	cc2c <_vfprintf_r+0x141c>
    cd70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    cd72:	e599      	b.n	c8a8 <_vfprintf_r+0x1098>
    cd74:	212e      	movs	r1, #46	; 0x2e
    cd76:	2330      	movs	r3, #48	; 0x30
    cd78:	aa16      	add	r2, sp, #88	; 0x58
    cd7a:	1852      	adds	r2, r2, r1
    cd7c:	7013      	strb	r3, [r2, #0]
    cd7e:	002b      	movs	r3, r5
    cd80:	aa16      	add	r2, sp, #88	; 0x58
    cd82:	3101      	adds	r1, #1
    cd84:	3330      	adds	r3, #48	; 0x30
    cd86:	1852      	adds	r2, r2, r1
    cd88:	7013      	strb	r3, [r2, #0]
    cd8a:	ab22      	add	r3, sp, #136	; 0x88
    cd8c:	e6c1      	b.n	cb12 <_vfprintf_r+0x1302>
    cd8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd90:	2b00      	cmp	r3, #0
    cd92:	db52      	blt.n	ce3a <_vfprintf_r+0x162a>
    cd94:	ab16      	add	r3, sp, #88	; 0x58
    cd96:	7fdb      	ldrb	r3, [r3, #31]
    cd98:	4698      	mov	r8, r3
    cd9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cd9c:	2b47      	cmp	r3, #71	; 0x47
    cd9e:	dc48      	bgt.n	ce32 <_vfprintf_r+0x1622>
    cda0:	4b4e      	ldr	r3, [pc, #312]	; (cedc <_vfprintf_r+0x16cc>)
    cda2:	9311      	str	r3, [sp, #68]	; 0x44
    cda4:	f7ff f88c 	bl	bec0 <_vfprintf_r+0x6b0>
    cda8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cdaa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cdac:	4694      	mov	ip, r2
    cdae:	4463      	add	r3, ip
    cdb0:	4453      	add	r3, sl
    cdb2:	001a      	movs	r2, r3
    cdb4:	930e      	str	r3, [sp, #56]	; 0x38
    cdb6:	43db      	mvns	r3, r3
    cdb8:	17db      	asrs	r3, r3, #31
    cdba:	401a      	ands	r2, r3
    cdbc:	9208      	str	r2, [sp, #32]
    cdbe:	e595      	b.n	c8ec <_vfprintf_r+0x10dc>
    cdc0:	46a9      	mov	r9, r5
    cdc2:	4648      	mov	r0, r9
    cdc4:	1909      	adds	r1, r1, r4
    cdc6:	3301      	adds	r3, #1
    cdc8:	6010      	str	r0, [r2, #0]
    cdca:	6054      	str	r4, [r2, #4]
    cdcc:	60b9      	str	r1, [r7, #8]
    cdce:	3208      	adds	r2, #8
    cdd0:	607b      	str	r3, [r7, #4]
    cdd2:	2b07      	cmp	r3, #7
    cdd4:	dc00      	bgt.n	cdd8 <_vfprintf_r+0x15c8>
    cdd6:	e5f6      	b.n	c9c6 <_vfprintf_r+0x11b6>
    cdd8:	003a      	movs	r2, r7
    cdda:	4659      	mov	r1, fp
    cddc:	9806      	ldr	r0, [sp, #24]
    cdde:	f004 fd71 	bl	118c4 <__sprint_r>
    cde2:	2800      	cmp	r0, #0
    cde4:	d001      	beq.n	cdea <_vfprintf_r+0x15da>
    cde6:	f7ff faa3 	bl	c330 <_vfprintf_r+0xb20>
    cdea:	68b9      	ldr	r1, [r7, #8]
    cdec:	687b      	ldr	r3, [r7, #4]
    cdee:	aa32      	add	r2, sp, #200	; 0xc8
    cdf0:	e5e9      	b.n	c9c6 <_vfprintf_r+0x11b6>
    cdf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cdf4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cdf6:	1a98      	subs	r0, r3, r2
    cdf8:	1c43      	adds	r3, r0, #1
    cdfa:	001a      	movs	r2, r3
    cdfc:	930e      	str	r3, [sp, #56]	; 0x38
    cdfe:	e715      	b.n	cc2c <_vfprintf_r+0x141c>
    ce00:	4a37      	ldr	r2, [pc, #220]	; (cee0 <_vfprintf_r+0x16d0>)
    ce02:	687b      	ldr	r3, [r7, #4]
    ce04:	4691      	mov	r9, r2
    ce06:	f7ff fbf5 	bl	c5f4 <_vfprintf_r+0xde4>
    ce0a:	2301      	movs	r3, #1
    ce0c:	4023      	ands	r3, r4
    ce0e:	9313      	str	r3, [sp, #76]	; 0x4c
    ce10:	d000      	beq.n	ce14 <_vfprintf_r+0x1604>
    ce12:	e689      	b.n	cb28 <_vfprintf_r+0x1318>
    ce14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ce16:	43d3      	mvns	r3, r2
    ce18:	17db      	asrs	r3, r3, #31
    ce1a:	401a      	ands	r2, r3
    ce1c:	9208      	str	r2, [sp, #32]
    ce1e:	e565      	b.n	c8ec <_vfprintf_r+0x10dc>
    ce20:	2301      	movs	r3, #1
    ce22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ce24:	391b      	subs	r1, #27
    ce26:	1a9d      	subs	r5, r3, r2
    ce28:	aa16      	add	r2, sp, #88	; 0x58
    ce2a:	332c      	adds	r3, #44	; 0x2c
    ce2c:	1852      	adds	r2, r2, r1
    ce2e:	7013      	strb	r3, [r2, #0]
    ce30:	e62f      	b.n	ca92 <_vfprintf_r+0x1282>
    ce32:	4b2c      	ldr	r3, [pc, #176]	; (cee4 <_vfprintf_r+0x16d4>)
    ce34:	9311      	str	r3, [sp, #68]	; 0x44
    ce36:	f7ff f843 	bl	bec0 <_vfprintf_r+0x6b0>
    ce3a:	232d      	movs	r3, #45	; 0x2d
    ce3c:	aa16      	add	r2, sp, #88	; 0x58
    ce3e:	77d3      	strb	r3, [r2, #31]
    ce40:	4698      	mov	r8, r3
    ce42:	e7aa      	b.n	cd9a <_vfprintf_r+0x158a>
    ce44:	4653      	mov	r3, sl
    ce46:	2b00      	cmp	r3, #0
    ce48:	d101      	bne.n	ce4e <_vfprintf_r+0x163e>
    ce4a:	07e3      	lsls	r3, r4, #31
    ce4c:	d503      	bpl.n	ce56 <_vfprintf_r+0x1646>
    ce4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ce50:	1c58      	adds	r0, r3, #1
    ce52:	0003      	movs	r3, r0
    ce54:	e7ac      	b.n	cdb0 <_vfprintf_r+0x15a0>
    ce56:	2301      	movs	r3, #1
    ce58:	e708      	b.n	cc6c <_vfprintf_r+0x145c>
    ce5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ce5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce5e:	1a9b      	subs	r3, r3, r2
    ce60:	9314      	str	r3, [sp, #80]	; 0x50
    ce62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce64:	2b47      	cmp	r3, #71	; 0x47
    ce66:	d100      	bne.n	ce6a <_vfprintf_r+0x165a>
    ce68:	e5f6      	b.n	ca58 <_vfprintf_r+0x1248>
    ce6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ce6c:	9313      	str	r3, [sp, #76]	; 0x4c
    ce6e:	e5fd      	b.n	ca6c <_vfprintf_r+0x125c>
    ce70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce72:	1d1d      	adds	r5, r3, #4
    ce74:	681b      	ldr	r3, [r3, #0]
    ce76:	46a8      	mov	r8, r5
    ce78:	469a      	mov	sl, r3
    ce7a:	2b00      	cmp	r3, #0
    ce7c:	db0a      	blt.n	ce94 <_vfprintf_r+0x1684>
    ce7e:	4645      	mov	r5, r8
    ce80:	9b07      	ldr	r3, [sp, #28]
    ce82:	950f      	str	r5, [sp, #60]	; 0x3c
    ce84:	785b      	ldrb	r3, [r3, #1]
    ce86:	9207      	str	r2, [sp, #28]
    ce88:	f7fe fd4b 	bl	b922 <_vfprintf_r+0x112>
    ce8c:	ab16      	add	r3, sp, #88	; 0x58
    ce8e:	77d8      	strb	r0, [r3, #31]
    ce90:	f7ff f830 	bl	bef4 <_vfprintf_r+0x6e4>
    ce94:	2301      	movs	r3, #1
    ce96:	425b      	negs	r3, r3
    ce98:	469a      	mov	sl, r3
    ce9a:	e7f0      	b.n	ce7e <_vfprintf_r+0x166e>
    ce9c:	ab16      	add	r3, sp, #88	; 0x58
    ce9e:	77d8      	strb	r0, [r3, #31]
    cea0:	f7fe ff27 	bl	bcf2 <_vfprintf_r+0x4e2>
    cea4:	ab16      	add	r3, sp, #88	; 0x58
    cea6:	77d8      	strb	r0, [r3, #31]
    cea8:	f7fe fdce 	bl	ba48 <_vfprintf_r+0x238>
    ceac:	480c      	ldr	r0, [pc, #48]	; (cee0 <_vfprintf_r+0x16d0>)
    ceae:	4681      	mov	r9, r0
    ceb0:	e787      	b.n	cdc2 <_vfprintf_r+0x15b2>
    ceb2:	ab16      	add	r3, sp, #88	; 0x58
    ceb4:	77d8      	strb	r0, [r3, #31]
    ceb6:	f7ff f829 	bl	bf0c <_vfprintf_r+0x6fc>
    ceba:	ab16      	add	r3, sp, #88	; 0x58
    cebc:	77d8      	strb	r0, [r3, #31]
    cebe:	f7fe ffc3 	bl	be48 <_vfprintf_r+0x638>
    cec2:	ab16      	add	r3, sp, #88	; 0x58
    cec4:	77d8      	strb	r0, [r3, #31]
    cec6:	f7fe ffa5 	bl	be14 <_vfprintf_r+0x604>
    ceca:	ab16      	add	r3, sp, #88	; 0x58
    cecc:	77d8      	strb	r0, [r3, #31]
    cece:	f7fe feaf 	bl	bc30 <_vfprintf_r+0x420>
    ced2:	aa16      	add	r2, sp, #88	; 0x58
    ced4:	232e      	movs	r3, #46	; 0x2e
    ced6:	4694      	mov	ip, r2
    ced8:	4463      	add	r3, ip
    ceda:	e61a      	b.n	cb12 <_vfprintf_r+0x1302>
    cedc:	00015264 	.word	0x00015264
    cee0:	000158b8 	.word	0x000158b8
    cee4:	00015268 	.word	0x00015268

0000cee8 <__sbprintf>:
    cee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    ceea:	0015      	movs	r5, r2
    ceec:	2202      	movs	r2, #2
    ceee:	4c1e      	ldr	r4, [pc, #120]	; (cf68 <__sbprintf+0x80>)
    cef0:	001f      	movs	r7, r3
    cef2:	898b      	ldrh	r3, [r1, #12]
    cef4:	44a5      	add	sp, r4
    cef6:	4393      	bics	r3, r2
    cef8:	466a      	mov	r2, sp
    cefa:	8193      	strh	r3, [r2, #12]
    cefc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    cefe:	0006      	movs	r6, r0
    cf00:	9319      	str	r3, [sp, #100]	; 0x64
    cf02:	89cb      	ldrh	r3, [r1, #14]
    cf04:	a816      	add	r0, sp, #88	; 0x58
    cf06:	81d3      	strh	r3, [r2, #14]
    cf08:	69cb      	ldr	r3, [r1, #28]
    cf0a:	000c      	movs	r4, r1
    cf0c:	9307      	str	r3, [sp, #28]
    cf0e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    cf10:	9309      	str	r3, [sp, #36]	; 0x24
    cf12:	ab1a      	add	r3, sp, #104	; 0x68
    cf14:	9300      	str	r3, [sp, #0]
    cf16:	9304      	str	r3, [sp, #16]
    cf18:	2380      	movs	r3, #128	; 0x80
    cf1a:	00db      	lsls	r3, r3, #3
    cf1c:	9302      	str	r3, [sp, #8]
    cf1e:	9305      	str	r3, [sp, #20]
    cf20:	2300      	movs	r3, #0
    cf22:	9306      	str	r3, [sp, #24]
    cf24:	f001 fe04 	bl	eb30 <__retarget_lock_init_recursive>
    cf28:	002a      	movs	r2, r5
    cf2a:	003b      	movs	r3, r7
    cf2c:	4669      	mov	r1, sp
    cf2e:	0030      	movs	r0, r6
    cf30:	f7fe fc6e 	bl	b810 <_vfprintf_r>
    cf34:	1e05      	subs	r5, r0, #0
    cf36:	db05      	blt.n	cf44 <__sbprintf+0x5c>
    cf38:	4669      	mov	r1, sp
    cf3a:	0030      	movs	r0, r6
    cf3c:	f001 fa30 	bl	e3a0 <_fflush_r>
    cf40:	2800      	cmp	r0, #0
    cf42:	d10e      	bne.n	cf62 <__sbprintf+0x7a>
    cf44:	466b      	mov	r3, sp
    cf46:	899b      	ldrh	r3, [r3, #12]
    cf48:	065b      	lsls	r3, r3, #25
    cf4a:	d503      	bpl.n	cf54 <__sbprintf+0x6c>
    cf4c:	2240      	movs	r2, #64	; 0x40
    cf4e:	89a3      	ldrh	r3, [r4, #12]
    cf50:	4313      	orrs	r3, r2
    cf52:	81a3      	strh	r3, [r4, #12]
    cf54:	9816      	ldr	r0, [sp, #88]	; 0x58
    cf56:	f001 fded 	bl	eb34 <__retarget_lock_close_recursive>
    cf5a:	0028      	movs	r0, r5
    cf5c:	4b03      	ldr	r3, [pc, #12]	; (cf6c <__sbprintf+0x84>)
    cf5e:	449d      	add	sp, r3
    cf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf62:	2501      	movs	r5, #1
    cf64:	426d      	negs	r5, r5
    cf66:	e7ed      	b.n	cf44 <__sbprintf+0x5c>
    cf68:	fffffb94 	.word	0xfffffb94
    cf6c:	0000046c 	.word	0x0000046c

0000cf70 <__swbuf_r>:
    cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf72:	0006      	movs	r6, r0
    cf74:	000d      	movs	r5, r1
    cf76:	0014      	movs	r4, r2
    cf78:	2800      	cmp	r0, #0
    cf7a:	d002      	beq.n	cf82 <__swbuf_r+0x12>
    cf7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
    cf7e:	2b00      	cmp	r3, #0
    cf80:	d04e      	beq.n	d020 <__swbuf_r+0xb0>
    cf82:	69a3      	ldr	r3, [r4, #24]
    cf84:	60a3      	str	r3, [r4, #8]
    cf86:	230c      	movs	r3, #12
    cf88:	5ee0      	ldrsh	r0, [r4, r3]
    cf8a:	b281      	uxth	r1, r0
    cf8c:	070b      	lsls	r3, r1, #28
    cf8e:	d53c      	bpl.n	d00a <__swbuf_r+0x9a>
    cf90:	6923      	ldr	r3, [r4, #16]
    cf92:	2b00      	cmp	r3, #0
    cf94:	d039      	beq.n	d00a <__swbuf_r+0x9a>
    cf96:	22ff      	movs	r2, #255	; 0xff
    cf98:	b2ef      	uxtb	r7, r5
    cf9a:	4015      	ands	r5, r2
    cf9c:	2280      	movs	r2, #128	; 0x80
    cf9e:	0192      	lsls	r2, r2, #6
    cfa0:	4211      	tst	r1, r2
    cfa2:	d015      	beq.n	cfd0 <__swbuf_r+0x60>
    cfa4:	6822      	ldr	r2, [r4, #0]
    cfa6:	6961      	ldr	r1, [r4, #20]
    cfa8:	1ad3      	subs	r3, r2, r3
    cfaa:	428b      	cmp	r3, r1
    cfac:	da1b      	bge.n	cfe6 <__swbuf_r+0x76>
    cfae:	3301      	adds	r3, #1
    cfb0:	68a1      	ldr	r1, [r4, #8]
    cfb2:	3901      	subs	r1, #1
    cfb4:	60a1      	str	r1, [r4, #8]
    cfb6:	1c51      	adds	r1, r2, #1
    cfb8:	6021      	str	r1, [r4, #0]
    cfba:	7017      	strb	r7, [r2, #0]
    cfbc:	6962      	ldr	r2, [r4, #20]
    cfbe:	429a      	cmp	r2, r3
    cfc0:	d01a      	beq.n	cff8 <__swbuf_r+0x88>
    cfc2:	89a3      	ldrh	r3, [r4, #12]
    cfc4:	07db      	lsls	r3, r3, #31
    cfc6:	d501      	bpl.n	cfcc <__swbuf_r+0x5c>
    cfc8:	2d0a      	cmp	r5, #10
    cfca:	d015      	beq.n	cff8 <__swbuf_r+0x88>
    cfcc:	0028      	movs	r0, r5
    cfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cfd0:	4302      	orrs	r2, r0
    cfd2:	6e61      	ldr	r1, [r4, #100]	; 0x64
    cfd4:	81a2      	strh	r2, [r4, #12]
    cfd6:	4a14      	ldr	r2, [pc, #80]	; (d028 <__swbuf_r+0xb8>)
    cfd8:	400a      	ands	r2, r1
    cfda:	6662      	str	r2, [r4, #100]	; 0x64
    cfdc:	6961      	ldr	r1, [r4, #20]
    cfde:	6822      	ldr	r2, [r4, #0]
    cfe0:	1ad3      	subs	r3, r2, r3
    cfe2:	428b      	cmp	r3, r1
    cfe4:	dbe3      	blt.n	cfae <__swbuf_r+0x3e>
    cfe6:	0021      	movs	r1, r4
    cfe8:	0030      	movs	r0, r6
    cfea:	f001 f9d9 	bl	e3a0 <_fflush_r>
    cfee:	2800      	cmp	r0, #0
    cff0:	d108      	bne.n	d004 <__swbuf_r+0x94>
    cff2:	6822      	ldr	r2, [r4, #0]
    cff4:	2301      	movs	r3, #1
    cff6:	e7db      	b.n	cfb0 <__swbuf_r+0x40>
    cff8:	0021      	movs	r1, r4
    cffa:	0030      	movs	r0, r6
    cffc:	f001 f9d0 	bl	e3a0 <_fflush_r>
    d000:	2800      	cmp	r0, #0
    d002:	d0e3      	beq.n	cfcc <__swbuf_r+0x5c>
    d004:	2501      	movs	r5, #1
    d006:	426d      	negs	r5, r5
    d008:	e7e0      	b.n	cfcc <__swbuf_r+0x5c>
    d00a:	0021      	movs	r1, r4
    d00c:	0030      	movs	r0, r6
    d00e:	f000 f821 	bl	d054 <__swsetup_r>
    d012:	2800      	cmp	r0, #0
    d014:	d1f6      	bne.n	d004 <__swbuf_r+0x94>
    d016:	230c      	movs	r3, #12
    d018:	5ee0      	ldrsh	r0, [r4, r3]
    d01a:	6923      	ldr	r3, [r4, #16]
    d01c:	b281      	uxth	r1, r0
    d01e:	e7ba      	b.n	cf96 <__swbuf_r+0x26>
    d020:	f001 fa18 	bl	e454 <__sinit>
    d024:	e7ad      	b.n	cf82 <__swbuf_r+0x12>
    d026:	46c0      	nop			; (mov r8, r8)
    d028:	ffffdfff 	.word	0xffffdfff

0000d02c <_write_r>:
    d02c:	b570      	push	{r4, r5, r6, lr}
    d02e:	0005      	movs	r5, r0
    d030:	0008      	movs	r0, r1
    d032:	0011      	movs	r1, r2
    d034:	2200      	movs	r2, #0
    d036:	4c06      	ldr	r4, [pc, #24]	; (d050 <_write_r+0x24>)
    d038:	6022      	str	r2, [r4, #0]
    d03a:	001a      	movs	r2, r3
    d03c:	f7f5 faf6 	bl	262c <_write>
    d040:	1c43      	adds	r3, r0, #1
    d042:	d000      	beq.n	d046 <_write_r+0x1a>
    d044:	bd70      	pop	{r4, r5, r6, pc}
    d046:	6823      	ldr	r3, [r4, #0]
    d048:	2b00      	cmp	r3, #0
    d04a:	d0fb      	beq.n	d044 <_write_r+0x18>
    d04c:	602b      	str	r3, [r5, #0]
    d04e:	e7f9      	b.n	d044 <_write_r+0x18>
    d050:	200018dc 	.word	0x200018dc

0000d054 <__swsetup_r>:
    d054:	4b33      	ldr	r3, [pc, #204]	; (d124 <__swsetup_r+0xd0>)
    d056:	b570      	push	{r4, r5, r6, lr}
    d058:	0005      	movs	r5, r0
    d05a:	6818      	ldr	r0, [r3, #0]
    d05c:	000c      	movs	r4, r1
    d05e:	2800      	cmp	r0, #0
    d060:	d002      	beq.n	d068 <__swsetup_r+0x14>
    d062:	6b83      	ldr	r3, [r0, #56]	; 0x38
    d064:	2b00      	cmp	r3, #0
    d066:	d03c      	beq.n	d0e2 <__swsetup_r+0x8e>
    d068:	230c      	movs	r3, #12
    d06a:	5ee2      	ldrsh	r2, [r4, r3]
    d06c:	b293      	uxth	r3, r2
    d06e:	0719      	lsls	r1, r3, #28
    d070:	d50d      	bpl.n	d08e <__swsetup_r+0x3a>
    d072:	6921      	ldr	r1, [r4, #16]
    d074:	2900      	cmp	r1, #0
    d076:	d015      	beq.n	d0a4 <__swsetup_r+0x50>
    d078:	07da      	lsls	r2, r3, #31
    d07a:	d521      	bpl.n	d0c0 <__swsetup_r+0x6c>
    d07c:	2300      	movs	r3, #0
    d07e:	60a3      	str	r3, [r4, #8]
    d080:	6963      	ldr	r3, [r4, #20]
    d082:	2000      	movs	r0, #0
    d084:	425b      	negs	r3, r3
    d086:	61a3      	str	r3, [r4, #24]
    d088:	2900      	cmp	r1, #0
    d08a:	d021      	beq.n	d0d0 <__swsetup_r+0x7c>
    d08c:	bd70      	pop	{r4, r5, r6, pc}
    d08e:	06d9      	lsls	r1, r3, #27
    d090:	d53f      	bpl.n	d112 <__swsetup_r+0xbe>
    d092:	075b      	lsls	r3, r3, #29
    d094:	d428      	bmi.n	d0e8 <__swsetup_r+0x94>
    d096:	6921      	ldr	r1, [r4, #16]
    d098:	2308      	movs	r3, #8
    d09a:	4313      	orrs	r3, r2
    d09c:	81a3      	strh	r3, [r4, #12]
    d09e:	b29b      	uxth	r3, r3
    d0a0:	2900      	cmp	r1, #0
    d0a2:	d1e9      	bne.n	d078 <__swsetup_r+0x24>
    d0a4:	22a0      	movs	r2, #160	; 0xa0
    d0a6:	2080      	movs	r0, #128	; 0x80
    d0a8:	0092      	lsls	r2, r2, #2
    d0aa:	0080      	lsls	r0, r0, #2
    d0ac:	401a      	ands	r2, r3
    d0ae:	4282      	cmp	r2, r0
    d0b0:	d0e2      	beq.n	d078 <__swsetup_r+0x24>
    d0b2:	0021      	movs	r1, r4
    d0b4:	0028      	movs	r0, r5
    d0b6:	f001 fd87 	bl	ebc8 <__smakebuf_r>
    d0ba:	89a3      	ldrh	r3, [r4, #12]
    d0bc:	6921      	ldr	r1, [r4, #16]
    d0be:	e7db      	b.n	d078 <__swsetup_r+0x24>
    d0c0:	2200      	movs	r2, #0
    d0c2:	079b      	lsls	r3, r3, #30
    d0c4:	d400      	bmi.n	d0c8 <__swsetup_r+0x74>
    d0c6:	6962      	ldr	r2, [r4, #20]
    d0c8:	60a2      	str	r2, [r4, #8]
    d0ca:	2000      	movs	r0, #0
    d0cc:	2900      	cmp	r1, #0
    d0ce:	d1dd      	bne.n	d08c <__swsetup_r+0x38>
    d0d0:	220c      	movs	r2, #12
    d0d2:	5ea3      	ldrsh	r3, [r4, r2]
    d0d4:	061a      	lsls	r2, r3, #24
    d0d6:	d5d9      	bpl.n	d08c <__swsetup_r+0x38>
    d0d8:	2240      	movs	r2, #64	; 0x40
    d0da:	4313      	orrs	r3, r2
    d0dc:	81a3      	strh	r3, [r4, #12]
    d0de:	3801      	subs	r0, #1
    d0e0:	e7d4      	b.n	d08c <__swsetup_r+0x38>
    d0e2:	f001 f9b7 	bl	e454 <__sinit>
    d0e6:	e7bf      	b.n	d068 <__swsetup_r+0x14>
    d0e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d0ea:	2900      	cmp	r1, #0
    d0ec:	d00a      	beq.n	d104 <__swsetup_r+0xb0>
    d0ee:	0023      	movs	r3, r4
    d0f0:	3340      	adds	r3, #64	; 0x40
    d0f2:	4299      	cmp	r1, r3
    d0f4:	d004      	beq.n	d100 <__swsetup_r+0xac>
    d0f6:	0028      	movs	r0, r5
    d0f8:	f001 fa56 	bl	e5a8 <_free_r>
    d0fc:	230c      	movs	r3, #12
    d0fe:	5ee2      	ldrsh	r2, [r4, r3]
    d100:	2300      	movs	r3, #0
    d102:	6323      	str	r3, [r4, #48]	; 0x30
    d104:	2324      	movs	r3, #36	; 0x24
    d106:	439a      	bics	r2, r3
    d108:	2300      	movs	r3, #0
    d10a:	6921      	ldr	r1, [r4, #16]
    d10c:	6063      	str	r3, [r4, #4]
    d10e:	6021      	str	r1, [r4, #0]
    d110:	e7c2      	b.n	d098 <__swsetup_r+0x44>
    d112:	2309      	movs	r3, #9
    d114:	602b      	str	r3, [r5, #0]
    d116:	2340      	movs	r3, #64	; 0x40
    d118:	2001      	movs	r0, #1
    d11a:	431a      	orrs	r2, r3
    d11c:	81a2      	strh	r2, [r4, #12]
    d11e:	4240      	negs	r0, r0
    d120:	e7b4      	b.n	d08c <__swsetup_r+0x38>
    d122:	46c0      	nop			; (mov r8, r8)
    d124:	20000080 	.word	0x20000080

0000d128 <register_fini>:
    d128:	4b03      	ldr	r3, [pc, #12]	; (d138 <register_fini+0x10>)
    d12a:	b510      	push	{r4, lr}
    d12c:	2b00      	cmp	r3, #0
    d12e:	d002      	beq.n	d136 <register_fini+0xe>
    d130:	4802      	ldr	r0, [pc, #8]	; (d13c <register_fini+0x14>)
    d132:	f000 f805 	bl	d140 <atexit>
    d136:	bd10      	pop	{r4, pc}
    d138:	00000000 	.word	0x00000000
    d13c:	0000e4d5 	.word	0x0000e4d5

0000d140 <atexit>:
    d140:	b510      	push	{r4, lr}
    d142:	0001      	movs	r1, r0
    d144:	2300      	movs	r3, #0
    d146:	2200      	movs	r2, #0
    d148:	2000      	movs	r0, #0
    d14a:	f004 fbd3 	bl	118f4 <__register_exitproc>
    d14e:	bd10      	pop	{r4, pc}

0000d150 <_close_r>:
    d150:	2300      	movs	r3, #0
    d152:	b570      	push	{r4, r5, r6, lr}
    d154:	4c06      	ldr	r4, [pc, #24]	; (d170 <_close_r+0x20>)
    d156:	0005      	movs	r5, r0
    d158:	0008      	movs	r0, r1
    d15a:	6023      	str	r3, [r4, #0]
    d15c:	f7f3 fd64 	bl	c28 <_close>
    d160:	1c43      	adds	r3, r0, #1
    d162:	d000      	beq.n	d166 <_close_r+0x16>
    d164:	bd70      	pop	{r4, r5, r6, pc}
    d166:	6823      	ldr	r3, [r4, #0]
    d168:	2b00      	cmp	r3, #0
    d16a:	d0fb      	beq.n	d164 <_close_r+0x14>
    d16c:	602b      	str	r3, [r5, #0]
    d16e:	e7f9      	b.n	d164 <_close_r+0x14>
    d170:	200018dc 	.word	0x200018dc

0000d174 <quorem>:
    d174:	b5f0      	push	{r4, r5, r6, r7, lr}
    d176:	4645      	mov	r5, r8
    d178:	4680      	mov	r8, r0
    d17a:	46de      	mov	lr, fp
    d17c:	4657      	mov	r7, sl
    d17e:	464e      	mov	r6, r9
    d180:	4642      	mov	r2, r8
    d182:	b5e0      	push	{r5, r6, r7, lr}
    d184:	690c      	ldr	r4, [r1, #16]
    d186:	6912      	ldr	r2, [r2, #16]
    d188:	b085      	sub	sp, #20
    d18a:	000b      	movs	r3, r1
    d18c:	9102      	str	r1, [sp, #8]
    d18e:	2000      	movs	r0, #0
    d190:	4294      	cmp	r4, r2
    d192:	dd00      	ble.n	d196 <quorem+0x22>
    d194:	e090      	b.n	d2b8 <quorem+0x144>
    d196:	2214      	movs	r2, #20
    d198:	4694      	mov	ip, r2
    d19a:	4463      	add	r3, ip
    d19c:	4699      	mov	r9, r3
    d19e:	464a      	mov	r2, r9
    d1a0:	3c01      	subs	r4, #1
    d1a2:	00a3      	lsls	r3, r4, #2
    d1a4:	18d6      	adds	r6, r2, r3
    d1a6:	2214      	movs	r2, #20
    d1a8:	4442      	add	r2, r8
    d1aa:	4693      	mov	fp, r2
    d1ac:	449b      	add	fp, r3
    d1ae:	6833      	ldr	r3, [r6, #0]
    d1b0:	0015      	movs	r5, r2
    d1b2:	1c59      	adds	r1, r3, #1
    d1b4:	465b      	mov	r3, fp
    d1b6:	6818      	ldr	r0, [r3, #0]
    d1b8:	9201      	str	r2, [sp, #4]
    d1ba:	f7f9 f8d7 	bl	636c <__udivsi3>
    d1be:	1e03      	subs	r3, r0, #0
    d1c0:	9000      	str	r0, [sp, #0]
    d1c2:	d042      	beq.n	d24a <quorem+0xd6>
    d1c4:	0029      	movs	r1, r5
    d1c6:	2700      	movs	r7, #0
    d1c8:	464d      	mov	r5, r9
    d1ca:	2000      	movs	r0, #0
    d1cc:	46b1      	mov	r9, r6
    d1ce:	46a2      	mov	sl, r4
    d1d0:	003e      	movs	r6, r7
    d1d2:	0004      	movs	r4, r0
    d1d4:	469c      	mov	ip, r3
    d1d6:	002f      	movs	r7, r5
    d1d8:	0008      	movs	r0, r1
    d1da:	9503      	str	r5, [sp, #12]
    d1dc:	4663      	mov	r3, ip
    d1de:	cf04      	ldmia	r7!, {r2}
    d1e0:	0415      	lsls	r5, r2, #16
    d1e2:	0c2d      	lsrs	r5, r5, #16
    d1e4:	435d      	muls	r5, r3
    d1e6:	0c12      	lsrs	r2, r2, #16
    d1e8:	435a      	muls	r2, r3
    d1ea:	19ad      	adds	r5, r5, r6
    d1ec:	0c2b      	lsrs	r3, r5, #16
    d1ee:	18d2      	adds	r2, r2, r3
    d1f0:	6803      	ldr	r3, [r0, #0]
    d1f2:	042d      	lsls	r5, r5, #16
    d1f4:	0419      	lsls	r1, r3, #16
    d1f6:	0c09      	lsrs	r1, r1, #16
    d1f8:	1909      	adds	r1, r1, r4
    d1fa:	0c16      	lsrs	r6, r2, #16
    d1fc:	0c2d      	lsrs	r5, r5, #16
    d1fe:	0412      	lsls	r2, r2, #16
    d200:	1b49      	subs	r1, r1, r5
    d202:	0c12      	lsrs	r2, r2, #16
    d204:	0c1b      	lsrs	r3, r3, #16
    d206:	1a9b      	subs	r3, r3, r2
    d208:	140a      	asrs	r2, r1, #16
    d20a:	189b      	adds	r3, r3, r2
    d20c:	0409      	lsls	r1, r1, #16
    d20e:	141c      	asrs	r4, r3, #16
    d210:	0c09      	lsrs	r1, r1, #16
    d212:	041b      	lsls	r3, r3, #16
    d214:	4319      	orrs	r1, r3
    d216:	c002      	stmia	r0!, {r1}
    d218:	45b9      	cmp	r9, r7
    d21a:	d2df      	bcs.n	d1dc <quorem+0x68>
    d21c:	9b03      	ldr	r3, [sp, #12]
    d21e:	464e      	mov	r6, r9
    d220:	4699      	mov	r9, r3
    d222:	465b      	mov	r3, fp
    d224:	681b      	ldr	r3, [r3, #0]
    d226:	4654      	mov	r4, sl
    d228:	2b00      	cmp	r3, #0
    d22a:	d10e      	bne.n	d24a <quorem+0xd6>
    d22c:	465b      	mov	r3, fp
    d22e:	9a01      	ldr	r2, [sp, #4]
    d230:	3b04      	subs	r3, #4
    d232:	429a      	cmp	r2, r3
    d234:	d304      	bcc.n	d240 <quorem+0xcc>
    d236:	e006      	b.n	d246 <quorem+0xd2>
    d238:	3b04      	subs	r3, #4
    d23a:	3c01      	subs	r4, #1
    d23c:	429a      	cmp	r2, r3
    d23e:	d202      	bcs.n	d246 <quorem+0xd2>
    d240:	6819      	ldr	r1, [r3, #0]
    d242:	2900      	cmp	r1, #0
    d244:	d0f8      	beq.n	d238 <quorem+0xc4>
    d246:	4643      	mov	r3, r8
    d248:	611c      	str	r4, [r3, #16]
    d24a:	9902      	ldr	r1, [sp, #8]
    d24c:	4640      	mov	r0, r8
    d24e:	f002 fb1d 	bl	f88c <__mcmp>
    d252:	2800      	cmp	r0, #0
    d254:	db2f      	blt.n	d2b6 <quorem+0x142>
    d256:	464f      	mov	r7, r9
    d258:	2000      	movs	r0, #0
    d25a:	9b00      	ldr	r3, [sp, #0]
    d25c:	9d01      	ldr	r5, [sp, #4]
    d25e:	3301      	adds	r3, #1
    d260:	9300      	str	r3, [sp, #0]
    d262:	682b      	ldr	r3, [r5, #0]
    d264:	cf02      	ldmia	r7!, {r1}
    d266:	041a      	lsls	r2, r3, #16
    d268:	0c12      	lsrs	r2, r2, #16
    d26a:	1810      	adds	r0, r2, r0
    d26c:	040a      	lsls	r2, r1, #16
    d26e:	0c12      	lsrs	r2, r2, #16
    d270:	1a82      	subs	r2, r0, r2
    d272:	0c09      	lsrs	r1, r1, #16
    d274:	0c1b      	lsrs	r3, r3, #16
    d276:	1a5b      	subs	r3, r3, r1
    d278:	1411      	asrs	r1, r2, #16
    d27a:	185b      	adds	r3, r3, r1
    d27c:	0412      	lsls	r2, r2, #16
    d27e:	1418      	asrs	r0, r3, #16
    d280:	0c12      	lsrs	r2, r2, #16
    d282:	041b      	lsls	r3, r3, #16
    d284:	4313      	orrs	r3, r2
    d286:	c508      	stmia	r5!, {r3}
    d288:	42be      	cmp	r6, r7
    d28a:	d2ea      	bcs.n	d262 <quorem+0xee>
    d28c:	9901      	ldr	r1, [sp, #4]
    d28e:	00a3      	lsls	r3, r4, #2
    d290:	468c      	mov	ip, r1
    d292:	4463      	add	r3, ip
    d294:	681a      	ldr	r2, [r3, #0]
    d296:	2a00      	cmp	r2, #0
    d298:	d10d      	bne.n	d2b6 <quorem+0x142>
    d29a:	3b04      	subs	r3, #4
    d29c:	000a      	movs	r2, r1
    d29e:	4299      	cmp	r1, r3
    d2a0:	d304      	bcc.n	d2ac <quorem+0x138>
    d2a2:	e006      	b.n	d2b2 <quorem+0x13e>
    d2a4:	3b04      	subs	r3, #4
    d2a6:	3c01      	subs	r4, #1
    d2a8:	429a      	cmp	r2, r3
    d2aa:	d202      	bcs.n	d2b2 <quorem+0x13e>
    d2ac:	6819      	ldr	r1, [r3, #0]
    d2ae:	2900      	cmp	r1, #0
    d2b0:	d0f8      	beq.n	d2a4 <quorem+0x130>
    d2b2:	4643      	mov	r3, r8
    d2b4:	611c      	str	r4, [r3, #16]
    d2b6:	9800      	ldr	r0, [sp, #0]
    d2b8:	b005      	add	sp, #20
    d2ba:	bc3c      	pop	{r2, r3, r4, r5}
    d2bc:	4690      	mov	r8, r2
    d2be:	4699      	mov	r9, r3
    d2c0:	46a2      	mov	sl, r4
    d2c2:	46ab      	mov	fp, r5
    d2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2c6:	46c0      	nop			; (mov r8, r8)

0000d2c8 <_dtoa_r>:
    d2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    d2ca:	4657      	mov	r7, sl
    d2cc:	464e      	mov	r6, r9
    d2ce:	4645      	mov	r5, r8
    d2d0:	46de      	mov	lr, fp
    d2d2:	b5e0      	push	{r5, r6, r7, lr}
    d2d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    d2d6:	b099      	sub	sp, #100	; 0x64
    d2d8:	4682      	mov	sl, r0
    d2da:	001d      	movs	r5, r3
    d2dc:	0016      	movs	r6, r2
    d2de:	001f      	movs	r7, r3
    d2e0:	2900      	cmp	r1, #0
    d2e2:	d009      	beq.n	d2f8 <_dtoa_r+0x30>
    d2e4:	2301      	movs	r3, #1
    d2e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d2e8:	4093      	lsls	r3, r2
    d2ea:	604a      	str	r2, [r1, #4]
    d2ec:	608b      	str	r3, [r1, #8]
    d2ee:	f002 f877 	bl	f3e0 <_Bfree>
    d2f2:	2300      	movs	r3, #0
    d2f4:	4652      	mov	r2, sl
    d2f6:	6413      	str	r3, [r2, #64]	; 0x40
    d2f8:	46b8      	mov	r8, r7
    d2fa:	2f00      	cmp	r7, #0
    d2fc:	db37      	blt.n	d36e <_dtoa_r+0xa6>
    d2fe:	2300      	movs	r3, #0
    d300:	9a25      	ldr	r2, [sp, #148]	; 0x94
    d302:	6013      	str	r3, [r2, #0]
    d304:	4642      	mov	r2, r8
    d306:	4bd6      	ldr	r3, [pc, #856]	; (d660 <_dtoa_r+0x398>)
    d308:	401a      	ands	r2, r3
    d30a:	429a      	cmp	r2, r3
    d30c:	d018      	beq.n	d340 <_dtoa_r+0x78>
    d30e:	2200      	movs	r2, #0
    d310:	2300      	movs	r3, #0
    d312:	0030      	movs	r0, r6
    d314:	0039      	movs	r1, r7
    d316:	f7fb f8db 	bl	84d0 <__aeabi_dcmpeq>
    d31a:	2800      	cmp	r0, #0
    d31c:	d02f      	beq.n	d37e <_dtoa_r+0xb6>
    d31e:	2301      	movs	r3, #1
    d320:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d322:	6013      	str	r3, [r2, #0]
    d324:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d326:	2b00      	cmp	r3, #0
    d328:	d100      	bne.n	d32c <_dtoa_r+0x64>
    d32a:	e22a      	b.n	d782 <_dtoa_r+0x4ba>
    d32c:	48cd      	ldr	r0, [pc, #820]	; (d664 <_dtoa_r+0x39c>)
    d32e:	6018      	str	r0, [r3, #0]
    d330:	3801      	subs	r0, #1
    d332:	b019      	add	sp, #100	; 0x64
    d334:	bc3c      	pop	{r2, r3, r4, r5}
    d336:	4690      	mov	r8, r2
    d338:	4699      	mov	r9, r3
    d33a:	46a2      	mov	sl, r4
    d33c:	46ab      	mov	fp, r5
    d33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d340:	4bc9      	ldr	r3, [pc, #804]	; (d668 <_dtoa_r+0x3a0>)
    d342:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d344:	6013      	str	r3, [r2, #0]
    d346:	2e00      	cmp	r6, #0
    d348:	d10b      	bne.n	d362 <_dtoa_r+0x9a>
    d34a:	4643      	mov	r3, r8
    d34c:	0318      	lsls	r0, r3, #12
    d34e:	d108      	bne.n	d362 <_dtoa_r+0x9a>
    d350:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d352:	48c6      	ldr	r0, [pc, #792]	; (d66c <_dtoa_r+0x3a4>)
    d354:	2b00      	cmp	r3, #0
    d356:	d0ec      	beq.n	d332 <_dtoa_r+0x6a>
    d358:	0003      	movs	r3, r0
    d35a:	3308      	adds	r3, #8
    d35c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    d35e:	6013      	str	r3, [r2, #0]
    d360:	e7e7      	b.n	d332 <_dtoa_r+0x6a>
    d362:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d364:	48c2      	ldr	r0, [pc, #776]	; (d670 <_dtoa_r+0x3a8>)
    d366:	2b00      	cmp	r3, #0
    d368:	d0e3      	beq.n	d332 <_dtoa_r+0x6a>
    d36a:	1cc3      	adds	r3, r0, #3
    d36c:	e7f6      	b.n	d35c <_dtoa_r+0x94>
    d36e:	2301      	movs	r3, #1
    d370:	9a25      	ldr	r2, [sp, #148]	; 0x94
    d372:	0068      	lsls	r0, r5, #1
    d374:	6013      	str	r3, [r2, #0]
    d376:	0843      	lsrs	r3, r0, #1
    d378:	4698      	mov	r8, r3
    d37a:	001f      	movs	r7, r3
    d37c:	e7c2      	b.n	d304 <_dtoa_r+0x3c>
    d37e:	ab16      	add	r3, sp, #88	; 0x58
    d380:	9301      	str	r3, [sp, #4]
    d382:	ab17      	add	r3, sp, #92	; 0x5c
    d384:	9300      	str	r3, [sp, #0]
    d386:	0032      	movs	r2, r6
    d388:	003b      	movs	r3, r7
    d38a:	4650      	mov	r0, sl
    d38c:	f002 fbc6 	bl	fb1c <__d2b>
    d390:	4643      	mov	r3, r8
    d392:	4683      	mov	fp, r0
    d394:	0d1a      	lsrs	r2, r3, #20
    d396:	d100      	bne.n	d39a <_dtoa_r+0xd2>
    d398:	e1d6      	b.n	d748 <_dtoa_r+0x480>
    d39a:	033b      	lsls	r3, r7, #12
    d39c:	4cb5      	ldr	r4, [pc, #724]	; (d674 <_dtoa_r+0x3ac>)
    d39e:	0b1b      	lsrs	r3, r3, #12
    d3a0:	431c      	orrs	r4, r3
    d3a2:	4bb5      	ldr	r3, [pc, #724]	; (d678 <_dtoa_r+0x3b0>)
    d3a4:	0030      	movs	r0, r6
    d3a6:	4698      	mov	r8, r3
    d3a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d3aa:	0021      	movs	r1, r4
    d3ac:	4699      	mov	r9, r3
    d3ae:	2300      	movs	r3, #0
    d3b0:	4490      	add	r8, r2
    d3b2:	930f      	str	r3, [sp, #60]	; 0x3c
    d3b4:	2200      	movs	r2, #0
    d3b6:	4bb1      	ldr	r3, [pc, #708]	; (d67c <_dtoa_r+0x3b4>)
    d3b8:	f7fa fc64 	bl	7c84 <__aeabi_dsub>
    d3bc:	4ab0      	ldr	r2, [pc, #704]	; (d680 <_dtoa_r+0x3b8>)
    d3be:	4bb1      	ldr	r3, [pc, #708]	; (d684 <_dtoa_r+0x3bc>)
    d3c0:	f7fa f9e0 	bl	7784 <__aeabi_dmul>
    d3c4:	4ab0      	ldr	r2, [pc, #704]	; (d688 <_dtoa_r+0x3c0>)
    d3c6:	4bb1      	ldr	r3, [pc, #708]	; (d68c <_dtoa_r+0x3c4>)
    d3c8:	f7f9 fb98 	bl	6afc <__aeabi_dadd>
    d3cc:	0004      	movs	r4, r0
    d3ce:	4640      	mov	r0, r8
    d3d0:	000d      	movs	r5, r1
    d3d2:	f7fa ffa1 	bl	8318 <__aeabi_i2d>
    d3d6:	4aae      	ldr	r2, [pc, #696]	; (d690 <_dtoa_r+0x3c8>)
    d3d8:	4bae      	ldr	r3, [pc, #696]	; (d694 <_dtoa_r+0x3cc>)
    d3da:	f7fa f9d3 	bl	7784 <__aeabi_dmul>
    d3de:	0002      	movs	r2, r0
    d3e0:	000b      	movs	r3, r1
    d3e2:	0020      	movs	r0, r4
    d3e4:	0029      	movs	r1, r5
    d3e6:	f7f9 fb89 	bl	6afc <__aeabi_dadd>
    d3ea:	0004      	movs	r4, r0
    d3ec:	000d      	movs	r5, r1
    d3ee:	f7fa ff5f 	bl	82b0 <__aeabi_d2iz>
    d3f2:	2200      	movs	r2, #0
    d3f4:	9003      	str	r0, [sp, #12]
    d3f6:	2300      	movs	r3, #0
    d3f8:	0020      	movs	r0, r4
    d3fa:	0029      	movs	r1, r5
    d3fc:	f7fb f86e 	bl	84dc <__aeabi_dcmplt>
    d400:	2800      	cmp	r0, #0
    d402:	d000      	beq.n	d406 <_dtoa_r+0x13e>
    d404:	e2b1      	b.n	d96a <_dtoa_r+0x6a2>
    d406:	2301      	movs	r3, #1
    d408:	9c03      	ldr	r4, [sp, #12]
    d40a:	930c      	str	r3, [sp, #48]	; 0x30
    d40c:	2c16      	cmp	r4, #22
    d40e:	d810      	bhi.n	d432 <_dtoa_r+0x16a>
    d410:	49a1      	ldr	r1, [pc, #644]	; (d698 <_dtoa_r+0x3d0>)
    d412:	00e3      	lsls	r3, r4, #3
    d414:	18c9      	adds	r1, r1, r3
    d416:	0032      	movs	r2, r6
    d418:	6808      	ldr	r0, [r1, #0]
    d41a:	6849      	ldr	r1, [r1, #4]
    d41c:	003b      	movs	r3, r7
    d41e:	f7fb f871 	bl	8504 <__aeabi_dcmpgt>
    d422:	2800      	cmp	r0, #0
    d424:	d100      	bne.n	d428 <_dtoa_r+0x160>
    d426:	e31d      	b.n	da64 <_dtoa_r+0x79c>
    d428:	0023      	movs	r3, r4
    d42a:	3b01      	subs	r3, #1
    d42c:	9303      	str	r3, [sp, #12]
    d42e:	2300      	movs	r3, #0
    d430:	930c      	str	r3, [sp, #48]	; 0x30
    d432:	464b      	mov	r3, r9
    d434:	4642      	mov	r2, r8
    d436:	1a9a      	subs	r2, r3, r2
    d438:	2300      	movs	r3, #0
    d43a:	9306      	str	r3, [sp, #24]
    d43c:	0013      	movs	r3, r2
    d43e:	3b01      	subs	r3, #1
    d440:	9304      	str	r3, [sp, #16]
    d442:	d500      	bpl.n	d446 <_dtoa_r+0x17e>
    d444:	e2a1      	b.n	d98a <_dtoa_r+0x6c2>
    d446:	9b03      	ldr	r3, [sp, #12]
    d448:	2b00      	cmp	r3, #0
    d44a:	da00      	bge.n	d44e <_dtoa_r+0x186>
    d44c:	e284      	b.n	d958 <_dtoa_r+0x690>
    d44e:	469c      	mov	ip, r3
    d450:	930d      	str	r3, [sp, #52]	; 0x34
    d452:	2300      	movs	r3, #0
    d454:	9a04      	ldr	r2, [sp, #16]
    d456:	4699      	mov	r9, r3
    d458:	0011      	movs	r1, r2
    d45a:	4461      	add	r1, ip
    d45c:	9104      	str	r1, [sp, #16]
    d45e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d460:	2b09      	cmp	r3, #9
    d462:	d900      	bls.n	d466 <_dtoa_r+0x19e>
    d464:	e18f      	b.n	d786 <_dtoa_r+0x4be>
    d466:	2401      	movs	r4, #1
    d468:	2b05      	cmp	r3, #5
    d46a:	dd02      	ble.n	d472 <_dtoa_r+0x1aa>
    d46c:	2400      	movs	r4, #0
    d46e:	3b04      	subs	r3, #4
    d470:	9322      	str	r3, [sp, #136]	; 0x88
    d472:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d474:	2b03      	cmp	r3, #3
    d476:	d101      	bne.n	d47c <_dtoa_r+0x1b4>
    d478:	f000 fcce 	bl	de18 <_dtoa_r+0xb50>
    d47c:	dc01      	bgt.n	d482 <_dtoa_r+0x1ba>
    d47e:	f000 fc92 	bl	dda6 <_dtoa_r+0xade>
    d482:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d484:	2b04      	cmp	r3, #4
    d486:	d101      	bne.n	d48c <_dtoa_r+0x1c4>
    d488:	f000 fc40 	bl	dd0c <_dtoa_r+0xa44>
    d48c:	2301      	movs	r3, #1
    d48e:	930b      	str	r3, [sp, #44]	; 0x2c
    d490:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d492:	2b05      	cmp	r3, #5
    d494:	d001      	beq.n	d49a <_dtoa_r+0x1d2>
    d496:	f000 fc8b 	bl	ddb0 <_dtoa_r+0xae8>
    d49a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    d49c:	9b03      	ldr	r3, [sp, #12]
    d49e:	4694      	mov	ip, r2
    d4a0:	4463      	add	r3, ip
    d4a2:	930e      	str	r3, [sp, #56]	; 0x38
    d4a4:	3301      	adds	r3, #1
    d4a6:	9307      	str	r3, [sp, #28]
    d4a8:	1e1d      	subs	r5, r3, #0
    d4aa:	dc01      	bgt.n	d4b0 <_dtoa_r+0x1e8>
    d4ac:	f000 fd49 	bl	df42 <_dtoa_r+0xc7a>
    d4b0:	9b07      	ldr	r3, [sp, #28]
    d4b2:	4698      	mov	r8, r3
    d4b4:	2300      	movs	r3, #0
    d4b6:	4652      	mov	r2, sl
    d4b8:	2100      	movs	r1, #0
    d4ba:	6453      	str	r3, [r2, #68]	; 0x44
    d4bc:	2d17      	cmp	r5, #23
    d4be:	d90a      	bls.n	d4d6 <_dtoa_r+0x20e>
    d4c0:	2201      	movs	r2, #1
    d4c2:	3304      	adds	r3, #4
    d4c4:	005b      	lsls	r3, r3, #1
    d4c6:	0018      	movs	r0, r3
    d4c8:	3014      	adds	r0, #20
    d4ca:	0011      	movs	r1, r2
    d4cc:	3201      	adds	r2, #1
    d4ce:	4285      	cmp	r5, r0
    d4d0:	d2f8      	bcs.n	d4c4 <_dtoa_r+0x1fc>
    d4d2:	4653      	mov	r3, sl
    d4d4:	6459      	str	r1, [r3, #68]	; 0x44
    d4d6:	4650      	mov	r0, sl
    d4d8:	f001 ff5a 	bl	f390 <_Balloc>
    d4dc:	4653      	mov	r3, sl
    d4de:	6418      	str	r0, [r3, #64]	; 0x40
    d4e0:	4643      	mov	r3, r8
    d4e2:	900a      	str	r0, [sp, #40]	; 0x28
    d4e4:	2b0e      	cmp	r3, #14
    d4e6:	d900      	bls.n	d4ea <_dtoa_r+0x222>
    d4e8:	e161      	b.n	d7ae <_dtoa_r+0x4e6>
    d4ea:	2c00      	cmp	r4, #0
    d4ec:	d100      	bne.n	d4f0 <_dtoa_r+0x228>
    d4ee:	e15e      	b.n	d7ae <_dtoa_r+0x4e6>
    d4f0:	9610      	str	r6, [sp, #64]	; 0x40
    d4f2:	9711      	str	r7, [sp, #68]	; 0x44
    d4f4:	9e03      	ldr	r6, [sp, #12]
    d4f6:	2e00      	cmp	r6, #0
    d4f8:	dc01      	bgt.n	d4fe <_dtoa_r+0x236>
    d4fa:	f000 fd25 	bl	df48 <_dtoa_r+0xc80>
    d4fe:	0032      	movs	r2, r6
    d500:	210f      	movs	r1, #15
    d502:	4b65      	ldr	r3, [pc, #404]	; (d698 <_dtoa_r+0x3d0>)
    d504:	400a      	ands	r2, r1
    d506:	00d2      	lsls	r2, r2, #3
    d508:	189b      	adds	r3, r3, r2
    d50a:	1136      	asrs	r6, r6, #4
    d50c:	681c      	ldr	r4, [r3, #0]
    d50e:	685d      	ldr	r5, [r3, #4]
    d510:	06f3      	lsls	r3, r6, #27
    d512:	d401      	bmi.n	d518 <_dtoa_r+0x250>
    d514:	f000 fcca 	bl	deac <_dtoa_r+0xbe4>
    d518:	4b60      	ldr	r3, [pc, #384]	; (d69c <_dtoa_r+0x3d4>)
    d51a:	400e      	ands	r6, r1
    d51c:	6a1a      	ldr	r2, [r3, #32]
    d51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d520:	9810      	ldr	r0, [sp, #64]	; 0x40
    d522:	9911      	ldr	r1, [sp, #68]	; 0x44
    d524:	f7f9 fdfa 	bl	711c <__aeabi_ddiv>
    d528:	2303      	movs	r3, #3
    d52a:	4698      	mov	r8, r3
    d52c:	9008      	str	r0, [sp, #32]
    d52e:	9109      	str	r1, [sp, #36]	; 0x24
    d530:	2e00      	cmp	r6, #0
    d532:	d011      	beq.n	d558 <_dtoa_r+0x290>
    d534:	4f59      	ldr	r7, [pc, #356]	; (d69c <_dtoa_r+0x3d4>)
    d536:	2301      	movs	r3, #1
    d538:	4233      	tst	r3, r6
    d53a:	d009      	beq.n	d550 <_dtoa_r+0x288>
    d53c:	469c      	mov	ip, r3
    d53e:	683a      	ldr	r2, [r7, #0]
    d540:	687b      	ldr	r3, [r7, #4]
    d542:	0020      	movs	r0, r4
    d544:	0029      	movs	r1, r5
    d546:	44e0      	add	r8, ip
    d548:	f7fa f91c 	bl	7784 <__aeabi_dmul>
    d54c:	0004      	movs	r4, r0
    d54e:	000d      	movs	r5, r1
    d550:	1076      	asrs	r6, r6, #1
    d552:	3708      	adds	r7, #8
    d554:	2e00      	cmp	r6, #0
    d556:	d1ee      	bne.n	d536 <_dtoa_r+0x26e>
    d558:	0022      	movs	r2, r4
    d55a:	9808      	ldr	r0, [sp, #32]
    d55c:	9909      	ldr	r1, [sp, #36]	; 0x24
    d55e:	002b      	movs	r3, r5
    d560:	f7f9 fddc 	bl	711c <__aeabi_ddiv>
    d564:	0006      	movs	r6, r0
    d566:	000f      	movs	r7, r1
    d568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d56a:	2b00      	cmp	r3, #0
    d56c:	d009      	beq.n	d582 <_dtoa_r+0x2ba>
    d56e:	2200      	movs	r2, #0
    d570:	4b40      	ldr	r3, [pc, #256]	; (d674 <_dtoa_r+0x3ac>)
    d572:	0030      	movs	r0, r6
    d574:	0039      	movs	r1, r7
    d576:	f7fa ffb1 	bl	84dc <__aeabi_dcmplt>
    d57a:	2800      	cmp	r0, #0
    d57c:	d001      	beq.n	d582 <_dtoa_r+0x2ba>
    d57e:	f000 fdc2 	bl	e106 <_dtoa_r+0xe3e>
    d582:	4640      	mov	r0, r8
    d584:	f7fa fec8 	bl	8318 <__aeabi_i2d>
    d588:	0032      	movs	r2, r6
    d58a:	003b      	movs	r3, r7
    d58c:	f7fa f8fa 	bl	7784 <__aeabi_dmul>
    d590:	2200      	movs	r2, #0
    d592:	4b43      	ldr	r3, [pc, #268]	; (d6a0 <_dtoa_r+0x3d8>)
    d594:	f7f9 fab2 	bl	6afc <__aeabi_dadd>
    d598:	4a42      	ldr	r2, [pc, #264]	; (d6a4 <_dtoa_r+0x3dc>)
    d59a:	000b      	movs	r3, r1
    d59c:	4694      	mov	ip, r2
    d59e:	4463      	add	r3, ip
    d5a0:	9008      	str	r0, [sp, #32]
    d5a2:	9109      	str	r1, [sp, #36]	; 0x24
    d5a4:	9309      	str	r3, [sp, #36]	; 0x24
    d5a6:	9b07      	ldr	r3, [sp, #28]
    d5a8:	2b00      	cmp	r3, #0
    d5aa:	d101      	bne.n	d5b0 <_dtoa_r+0x2e8>
    d5ac:	f000 fc50 	bl	de50 <_dtoa_r+0xb88>
    d5b0:	9b03      	ldr	r3, [sp, #12]
    d5b2:	9313      	str	r3, [sp, #76]	; 0x4c
    d5b4:	9b07      	ldr	r3, [sp, #28]
    d5b6:	9312      	str	r3, [sp, #72]	; 0x48
    d5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d5ba:	2b00      	cmp	r3, #0
    d5bc:	d101      	bne.n	d5c2 <_dtoa_r+0x2fa>
    d5be:	f000 fd1d 	bl	dffc <_dtoa_r+0xd34>
    d5c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d5c4:	2000      	movs	r0, #0
    d5c6:	1e5a      	subs	r2, r3, #1
    d5c8:	4b33      	ldr	r3, [pc, #204]	; (d698 <_dtoa_r+0x3d0>)
    d5ca:	00d2      	lsls	r2, r2, #3
    d5cc:	189b      	adds	r3, r3, r2
    d5ce:	681a      	ldr	r2, [r3, #0]
    d5d0:	685b      	ldr	r3, [r3, #4]
    d5d2:	4935      	ldr	r1, [pc, #212]	; (d6a8 <_dtoa_r+0x3e0>)
    d5d4:	f7f9 fda2 	bl	711c <__aeabi_ddiv>
    d5d8:	9a08      	ldr	r2, [sp, #32]
    d5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d5dc:	f7fa fb52 	bl	7c84 <__aeabi_dsub>
    d5e0:	9008      	str	r0, [sp, #32]
    d5e2:	9109      	str	r1, [sp, #36]	; 0x24
    d5e4:	0039      	movs	r1, r7
    d5e6:	0030      	movs	r0, r6
    d5e8:	f7fa fe62 	bl	82b0 <__aeabi_d2iz>
    d5ec:	0004      	movs	r4, r0
    d5ee:	f7fa fe93 	bl	8318 <__aeabi_i2d>
    d5f2:	0002      	movs	r2, r0
    d5f4:	000b      	movs	r3, r1
    d5f6:	0030      	movs	r0, r6
    d5f8:	0039      	movs	r1, r7
    d5fa:	f7fa fb43 	bl	7c84 <__aeabi_dsub>
    d5fe:	0005      	movs	r5, r0
    d600:	000e      	movs	r6, r1
    d602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d604:	3430      	adds	r4, #48	; 0x30
    d606:	1c51      	adds	r1, r2, #1
    d608:	b2e7      	uxtb	r7, r4
    d60a:	9114      	str	r1, [sp, #80]	; 0x50
    d60c:	7017      	strb	r7, [r2, #0]
    d60e:	0033      	movs	r3, r6
    d610:	9808      	ldr	r0, [sp, #32]
    d612:	9909      	ldr	r1, [sp, #36]	; 0x24
    d614:	002a      	movs	r2, r5
    d616:	f7fa ff75 	bl	8504 <__aeabi_dcmpgt>
    d61a:	2800      	cmp	r0, #0
    d61c:	d001      	beq.n	d622 <_dtoa_r+0x35a>
    d61e:	f000 fdfe 	bl	e21e <_dtoa_r+0xf56>
    d622:	002a      	movs	r2, r5
    d624:	0033      	movs	r3, r6
    d626:	2000      	movs	r0, #0
    d628:	4912      	ldr	r1, [pc, #72]	; (d674 <_dtoa_r+0x3ac>)
    d62a:	f7fa fb2b 	bl	7c84 <__aeabi_dsub>
    d62e:	0002      	movs	r2, r0
    d630:	000b      	movs	r3, r1
    d632:	9808      	ldr	r0, [sp, #32]
    d634:	9909      	ldr	r1, [sp, #36]	; 0x24
    d636:	f7fa ff65 	bl	8504 <__aeabi_dcmpgt>
    d63a:	2800      	cmp	r0, #0
    d63c:	d001      	beq.n	d642 <_dtoa_r+0x37a>
    d63e:	f000 fde7 	bl	e210 <_dtoa_r+0xf48>
    d642:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d644:	2b01      	cmp	r3, #1
    d646:	d101      	bne.n	d64c <_dtoa_r+0x384>
    d648:	f000 fc78 	bl	df3c <_dtoa_r+0xc74>
    d64c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d64e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d650:	4694      	mov	ip, r2
    d652:	4463      	add	r3, ip
    d654:	4698      	mov	r8, r3
    d656:	464b      	mov	r3, r9
    d658:	9312      	str	r3, [sp, #72]	; 0x48
    d65a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d65c:	4699      	mov	r9, r3
    d65e:	e038      	b.n	d6d2 <_dtoa_r+0x40a>
    d660:	7ff00000 	.word	0x7ff00000
    d664:	0001529d 	.word	0x0001529d
    d668:	0000270f 	.word	0x0000270f
    d66c:	000158c8 	.word	0x000158c8
    d670:	000158d4 	.word	0x000158d4
    d674:	3ff00000 	.word	0x3ff00000
    d678:	fffffc01 	.word	0xfffffc01
    d67c:	3ff80000 	.word	0x3ff80000
    d680:	636f4361 	.word	0x636f4361
    d684:	3fd287a7 	.word	0x3fd287a7
    d688:	8b60c8b3 	.word	0x8b60c8b3
    d68c:	3fc68a28 	.word	0x3fc68a28
    d690:	509f79fb 	.word	0x509f79fb
    d694:	3fd34413 	.word	0x3fd34413
    d698:	00015910 	.word	0x00015910
    d69c:	000158e8 	.word	0x000158e8
    d6a0:	401c0000 	.word	0x401c0000
    d6a4:	fcc00000 	.word	0xfcc00000
    d6a8:	3fe00000 	.word	0x3fe00000
    d6ac:	002a      	movs	r2, r5
    d6ae:	0033      	movs	r3, r6
    d6b0:	2000      	movs	r0, #0
    d6b2:	49b9      	ldr	r1, [pc, #740]	; (d998 <_dtoa_r+0x6d0>)
    d6b4:	f7fa fae6 	bl	7c84 <__aeabi_dsub>
    d6b8:	9a08      	ldr	r2, [sp, #32]
    d6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d6bc:	f7fa ff0e 	bl	84dc <__aeabi_dcmplt>
    d6c0:	2800      	cmp	r0, #0
    d6c2:	d001      	beq.n	d6c8 <_dtoa_r+0x400>
    d6c4:	f000 fd74 	bl	e1b0 <_dtoa_r+0xee8>
    d6c8:	46a1      	mov	r9, r4
    d6ca:	4544      	cmp	r4, r8
    d6cc:	d101      	bne.n	d6d2 <_dtoa_r+0x40a>
    d6ce:	f000 fc33 	bl	df38 <_dtoa_r+0xc70>
    d6d2:	9808      	ldr	r0, [sp, #32]
    d6d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    d6d6:	2200      	movs	r2, #0
    d6d8:	4bb0      	ldr	r3, [pc, #704]	; (d99c <_dtoa_r+0x6d4>)
    d6da:	f7fa f853 	bl	7784 <__aeabi_dmul>
    d6de:	2200      	movs	r2, #0
    d6e0:	4bae      	ldr	r3, [pc, #696]	; (d99c <_dtoa_r+0x6d4>)
    d6e2:	9008      	str	r0, [sp, #32]
    d6e4:	9109      	str	r1, [sp, #36]	; 0x24
    d6e6:	0028      	movs	r0, r5
    d6e8:	0031      	movs	r1, r6
    d6ea:	f7fa f84b 	bl	7784 <__aeabi_dmul>
    d6ee:	000d      	movs	r5, r1
    d6f0:	0004      	movs	r4, r0
    d6f2:	f7fa fddd 	bl	82b0 <__aeabi_d2iz>
    d6f6:	0007      	movs	r7, r0
    d6f8:	f7fa fe0e 	bl	8318 <__aeabi_i2d>
    d6fc:	0002      	movs	r2, r0
    d6fe:	000b      	movs	r3, r1
    d700:	0020      	movs	r0, r4
    d702:	0029      	movs	r1, r5
    d704:	f7fa fabe 	bl	7c84 <__aeabi_dsub>
    d708:	464b      	mov	r3, r9
    d70a:	3730      	adds	r7, #48	; 0x30
    d70c:	b2ff      	uxtb	r7, r7
    d70e:	1c5c      	adds	r4, r3, #1
    d710:	701f      	strb	r7, [r3, #0]
    d712:	9a08      	ldr	r2, [sp, #32]
    d714:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d716:	0005      	movs	r5, r0
    d718:	000e      	movs	r6, r1
    d71a:	f7fa fedf 	bl	84dc <__aeabi_dcmplt>
    d71e:	2800      	cmp	r0, #0
    d720:	d0c4      	beq.n	d6ac <_dtoa_r+0x3e4>
    d722:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d724:	9303      	str	r3, [sp, #12]
    d726:	4659      	mov	r1, fp
    d728:	4650      	mov	r0, sl
    d72a:	f001 fe59 	bl	f3e0 <_Bfree>
    d72e:	2300      	movs	r3, #0
    d730:	7023      	strb	r3, [r4, #0]
    d732:	9b03      	ldr	r3, [sp, #12]
    d734:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d736:	3301      	adds	r3, #1
    d738:	6013      	str	r3, [r2, #0]
    d73a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    d73c:	2b00      	cmp	r3, #0
    d73e:	d100      	bne.n	d742 <_dtoa_r+0x47a>
    d740:	e3a8      	b.n	de94 <_dtoa_r+0xbcc>
    d742:	601c      	str	r4, [r3, #0]
    d744:	980a      	ldr	r0, [sp, #40]	; 0x28
    d746:	e5f4      	b.n	d332 <_dtoa_r+0x6a>
    d748:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d74a:	4699      	mov	r9, r3
    d74c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d74e:	444b      	add	r3, r9
    d750:	001c      	movs	r4, r3
    d752:	4b93      	ldr	r3, [pc, #588]	; (d9a0 <_dtoa_r+0x6d8>)
    d754:	18e3      	adds	r3, r4, r3
    d756:	2b20      	cmp	r3, #32
    d758:	dc00      	bgt.n	d75c <_dtoa_r+0x494>
    d75a:	e17e      	b.n	da5a <_dtoa_r+0x792>
    d75c:	0031      	movs	r1, r6
    d75e:	4a91      	ldr	r2, [pc, #580]	; (d9a4 <_dtoa_r+0x6dc>)
    d760:	4640      	mov	r0, r8
    d762:	18a2      	adds	r2, r4, r2
    d764:	40d1      	lsrs	r1, r2
    d766:	000a      	movs	r2, r1
    d768:	2140      	movs	r1, #64	; 0x40
    d76a:	1acb      	subs	r3, r1, r3
    d76c:	4098      	lsls	r0, r3
    d76e:	4310      	orrs	r0, r2
    d770:	f7fa fe14 	bl	839c <__aeabi_ui2d>
    d774:	1e63      	subs	r3, r4, #1
    d776:	4698      	mov	r8, r3
    d778:	2301      	movs	r3, #1
    d77a:	4d8b      	ldr	r5, [pc, #556]	; (d9a8 <_dtoa_r+0x6e0>)
    d77c:	930f      	str	r3, [sp, #60]	; 0x3c
    d77e:	1949      	adds	r1, r1, r5
    d780:	e618      	b.n	d3b4 <_dtoa_r+0xec>
    d782:	488a      	ldr	r0, [pc, #552]	; (d9ac <_dtoa_r+0x6e4>)
    d784:	e5d5      	b.n	d332 <_dtoa_r+0x6a>
    d786:	2300      	movs	r3, #0
    d788:	4652      	mov	r2, sl
    d78a:	2100      	movs	r1, #0
    d78c:	6453      	str	r3, [r2, #68]	; 0x44
    d78e:	4650      	mov	r0, sl
    d790:	f001 fdfe 	bl	f390 <_Balloc>
    d794:	4653      	mov	r3, sl
    d796:	6418      	str	r0, [r3, #64]	; 0x40
    d798:	2301      	movs	r3, #1
    d79a:	425b      	negs	r3, r3
    d79c:	9307      	str	r3, [sp, #28]
    d79e:	930e      	str	r3, [sp, #56]	; 0x38
    d7a0:	3302      	adds	r3, #2
    d7a2:	2200      	movs	r2, #0
    d7a4:	930b      	str	r3, [sp, #44]	; 0x2c
    d7a6:	2300      	movs	r3, #0
    d7a8:	900a      	str	r0, [sp, #40]	; 0x28
    d7aa:	9223      	str	r2, [sp, #140]	; 0x8c
    d7ac:	9322      	str	r3, [sp, #136]	; 0x88
    d7ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	da00      	bge.n	d7b6 <_dtoa_r+0x4ee>
    d7b4:	e0ab      	b.n	d90e <_dtoa_r+0x646>
    d7b6:	9a03      	ldr	r2, [sp, #12]
    d7b8:	2a0e      	cmp	r2, #14
    d7ba:	dd00      	ble.n	d7be <_dtoa_r+0x4f6>
    d7bc:	e0a7      	b.n	d90e <_dtoa_r+0x646>
    d7be:	4b7c      	ldr	r3, [pc, #496]	; (d9b0 <_dtoa_r+0x6e8>)
    d7c0:	00d2      	lsls	r2, r2, #3
    d7c2:	189b      	adds	r3, r3, r2
    d7c4:	685c      	ldr	r4, [r3, #4]
    d7c6:	681b      	ldr	r3, [r3, #0]
    d7c8:	9304      	str	r3, [sp, #16]
    d7ca:	9405      	str	r4, [sp, #20]
    d7cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d7ce:	2b00      	cmp	r3, #0
    d7d0:	da00      	bge.n	d7d4 <_dtoa_r+0x50c>
    d7d2:	e2a7      	b.n	dd24 <_dtoa_r+0xa5c>
    d7d4:	9c04      	ldr	r4, [sp, #16]
    d7d6:	9d05      	ldr	r5, [sp, #20]
    d7d8:	0030      	movs	r0, r6
    d7da:	0022      	movs	r2, r4
    d7dc:	002b      	movs	r3, r5
    d7de:	0039      	movs	r1, r7
    d7e0:	f7f9 fc9c 	bl	711c <__aeabi_ddiv>
    d7e4:	f7fa fd64 	bl	82b0 <__aeabi_d2iz>
    d7e8:	4680      	mov	r8, r0
    d7ea:	f7fa fd95 	bl	8318 <__aeabi_i2d>
    d7ee:	0022      	movs	r2, r4
    d7f0:	002b      	movs	r3, r5
    d7f2:	f7f9 ffc7 	bl	7784 <__aeabi_dmul>
    d7f6:	0002      	movs	r2, r0
    d7f8:	000b      	movs	r3, r1
    d7fa:	0030      	movs	r0, r6
    d7fc:	0039      	movs	r1, r7
    d7fe:	f7fa fa41 	bl	7c84 <__aeabi_dsub>
    d802:	4643      	mov	r3, r8
    d804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d806:	3330      	adds	r3, #48	; 0x30
    d808:	7013      	strb	r3, [r2, #0]
    d80a:	9b07      	ldr	r3, [sp, #28]
    d80c:	0006      	movs	r6, r0
    d80e:	000f      	movs	r7, r1
    d810:	1c54      	adds	r4, r2, #1
    d812:	2b01      	cmp	r3, #1
    d814:	d04e      	beq.n	d8b4 <_dtoa_r+0x5ec>
    d816:	2200      	movs	r2, #0
    d818:	4b60      	ldr	r3, [pc, #384]	; (d99c <_dtoa_r+0x6d4>)
    d81a:	f7f9 ffb3 	bl	7784 <__aeabi_dmul>
    d81e:	2200      	movs	r2, #0
    d820:	2300      	movs	r3, #0
    d822:	0006      	movs	r6, r0
    d824:	000f      	movs	r7, r1
    d826:	f7fa fe53 	bl	84d0 <__aeabi_dcmpeq>
    d82a:	2800      	cmp	r0, #0
    d82c:	d000      	beq.n	d830 <_dtoa_r+0x568>
    d82e:	e77a      	b.n	d726 <_dtoa_r+0x45e>
    d830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d832:	9a07      	ldr	r2, [sp, #28]
    d834:	1c9d      	adds	r5, r3, #2
    d836:	469c      	mov	ip, r3
    d838:	465b      	mov	r3, fp
    d83a:	9306      	str	r3, [sp, #24]
    d83c:	4653      	mov	r3, sl
    d83e:	4462      	add	r2, ip
    d840:	46aa      	mov	sl, r5
    d842:	9c04      	ldr	r4, [sp, #16]
    d844:	9d05      	ldr	r5, [sp, #20]
    d846:	4691      	mov	r9, r2
    d848:	9307      	str	r3, [sp, #28]
    d84a:	e00f      	b.n	d86c <_dtoa_r+0x5a4>
    d84c:	2200      	movs	r2, #0
    d84e:	4b53      	ldr	r3, [pc, #332]	; (d99c <_dtoa_r+0x6d4>)
    d850:	f7f9 ff98 	bl	7784 <__aeabi_dmul>
    d854:	2301      	movs	r3, #1
    d856:	469c      	mov	ip, r3
    d858:	2200      	movs	r2, #0
    d85a:	2300      	movs	r3, #0
    d85c:	0006      	movs	r6, r0
    d85e:	000f      	movs	r7, r1
    d860:	44e2      	add	sl, ip
    d862:	f7fa fe35 	bl	84d0 <__aeabi_dcmpeq>
    d866:	2800      	cmp	r0, #0
    d868:	d000      	beq.n	d86c <_dtoa_r+0x5a4>
    d86a:	e2d9      	b.n	de20 <_dtoa_r+0xb58>
    d86c:	0022      	movs	r2, r4
    d86e:	002b      	movs	r3, r5
    d870:	0030      	movs	r0, r6
    d872:	0039      	movs	r1, r7
    d874:	f7f9 fc52 	bl	711c <__aeabi_ddiv>
    d878:	f7fa fd1a 	bl	82b0 <__aeabi_d2iz>
    d87c:	4680      	mov	r8, r0
    d87e:	f7fa fd4b 	bl	8318 <__aeabi_i2d>
    d882:	0022      	movs	r2, r4
    d884:	002b      	movs	r3, r5
    d886:	f7f9 ff7d 	bl	7784 <__aeabi_dmul>
    d88a:	0002      	movs	r2, r0
    d88c:	000b      	movs	r3, r1
    d88e:	0030      	movs	r0, r6
    d890:	0039      	movs	r1, r7
    d892:	f7fa f9f7 	bl	7c84 <__aeabi_dsub>
    d896:	4653      	mov	r3, sl
    d898:	4642      	mov	r2, r8
    d89a:	3b01      	subs	r3, #1
    d89c:	3230      	adds	r2, #48	; 0x30
    d89e:	0006      	movs	r6, r0
    d8a0:	000f      	movs	r7, r1
    d8a2:	46d3      	mov	fp, sl
    d8a4:	701a      	strb	r2, [r3, #0]
    d8a6:	45d1      	cmp	r9, sl
    d8a8:	d1d0      	bne.n	d84c <_dtoa_r+0x584>
    d8aa:	9b06      	ldr	r3, [sp, #24]
    d8ac:	4654      	mov	r4, sl
    d8ae:	469b      	mov	fp, r3
    d8b0:	9b07      	ldr	r3, [sp, #28]
    d8b2:	469a      	mov	sl, r3
    d8b4:	0032      	movs	r2, r6
    d8b6:	003b      	movs	r3, r7
    d8b8:	0030      	movs	r0, r6
    d8ba:	0039      	movs	r1, r7
    d8bc:	f7f9 f91e 	bl	6afc <__aeabi_dadd>
    d8c0:	0006      	movs	r6, r0
    d8c2:	000f      	movs	r7, r1
    d8c4:	0002      	movs	r2, r0
    d8c6:	000b      	movs	r3, r1
    d8c8:	9804      	ldr	r0, [sp, #16]
    d8ca:	9905      	ldr	r1, [sp, #20]
    d8cc:	f7fa fe06 	bl	84dc <__aeabi_dcmplt>
    d8d0:	2800      	cmp	r0, #0
    d8d2:	d10c      	bne.n	d8ee <_dtoa_r+0x626>
    d8d4:	9804      	ldr	r0, [sp, #16]
    d8d6:	9905      	ldr	r1, [sp, #20]
    d8d8:	0032      	movs	r2, r6
    d8da:	003b      	movs	r3, r7
    d8dc:	f7fa fdf8 	bl	84d0 <__aeabi_dcmpeq>
    d8e0:	2800      	cmp	r0, #0
    d8e2:	d100      	bne.n	d8e6 <_dtoa_r+0x61e>
    d8e4:	e71f      	b.n	d726 <_dtoa_r+0x45e>
    d8e6:	4643      	mov	r3, r8
    d8e8:	07db      	lsls	r3, r3, #31
    d8ea:	d400      	bmi.n	d8ee <_dtoa_r+0x626>
    d8ec:	e71b      	b.n	d726 <_dtoa_r+0x45e>
    d8ee:	1e65      	subs	r5, r4, #1
    d8f0:	782f      	ldrb	r7, [r5, #0]
    d8f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d8f4:	e006      	b.n	d904 <_dtoa_r+0x63c>
    d8f6:	429d      	cmp	r5, r3
    d8f8:	d100      	bne.n	d8fc <_dtoa_r+0x634>
    d8fa:	e351      	b.n	dfa0 <_dtoa_r+0xcd8>
    d8fc:	3c02      	subs	r4, #2
    d8fe:	7827      	ldrb	r7, [r4, #0]
    d900:	002c      	movs	r4, r5
    d902:	3d01      	subs	r5, #1
    d904:	2f39      	cmp	r7, #57	; 0x39
    d906:	d0f6      	beq.n	d8f6 <_dtoa_r+0x62e>
    d908:	3701      	adds	r7, #1
    d90a:	702f      	strb	r7, [r5, #0]
    d90c:	e70b      	b.n	d726 <_dtoa_r+0x45e>
    d90e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d910:	2a00      	cmp	r2, #0
    d912:	d04f      	beq.n	d9b4 <_dtoa_r+0x6ec>
    d914:	9a22      	ldr	r2, [sp, #136]	; 0x88
    d916:	2a01      	cmp	r2, #1
    d918:	dc00      	bgt.n	d91c <_dtoa_r+0x654>
    d91a:	e22c      	b.n	dd76 <_dtoa_r+0xaae>
    d91c:	9b07      	ldr	r3, [sp, #28]
    d91e:	1e5c      	subs	r4, r3, #1
    d920:	464b      	mov	r3, r9
    d922:	45a1      	cmp	r9, r4
    d924:	da00      	bge.n	d928 <_dtoa_r+0x660>
    d926:	e2b8      	b.n	de9a <_dtoa_r+0xbd2>
    d928:	1b1c      	subs	r4, r3, r4
    d92a:	9b07      	ldr	r3, [sp, #28]
    d92c:	2b00      	cmp	r3, #0
    d92e:	da00      	bge.n	d932 <_dtoa_r+0x66a>
    d930:	e3d4      	b.n	e0dc <_dtoa_r+0xe14>
    d932:	9b06      	ldr	r3, [sp, #24]
    d934:	9308      	str	r3, [sp, #32]
    d936:	9b07      	ldr	r3, [sp, #28]
    d938:	9a06      	ldr	r2, [sp, #24]
    d93a:	2101      	movs	r1, #1
    d93c:	4694      	mov	ip, r2
    d93e:	449c      	add	ip, r3
    d940:	4662      	mov	r2, ip
    d942:	9206      	str	r2, [sp, #24]
    d944:	9a04      	ldr	r2, [sp, #16]
    d946:	4650      	mov	r0, sl
    d948:	4694      	mov	ip, r2
    d94a:	449c      	add	ip, r3
    d94c:	4663      	mov	r3, ip
    d94e:	9304      	str	r3, [sp, #16]
    d950:	f001 fe28 	bl	f5a4 <__i2b>
    d954:	4680      	mov	r8, r0
    d956:	e032      	b.n	d9be <_dtoa_r+0x6f6>
    d958:	9a06      	ldr	r2, [sp, #24]
    d95a:	9b03      	ldr	r3, [sp, #12]
    d95c:	1ad2      	subs	r2, r2, r3
    d95e:	425b      	negs	r3, r3
    d960:	4699      	mov	r9, r3
    d962:	2300      	movs	r3, #0
    d964:	9206      	str	r2, [sp, #24]
    d966:	930d      	str	r3, [sp, #52]	; 0x34
    d968:	e579      	b.n	d45e <_dtoa_r+0x196>
    d96a:	9803      	ldr	r0, [sp, #12]
    d96c:	f7fa fcd4 	bl	8318 <__aeabi_i2d>
    d970:	000b      	movs	r3, r1
    d972:	0002      	movs	r2, r0
    d974:	0029      	movs	r1, r5
    d976:	0020      	movs	r0, r4
    d978:	f7fa fdaa 	bl	84d0 <__aeabi_dcmpeq>
    d97c:	0002      	movs	r2, r0
    d97e:	4250      	negs	r0, r2
    d980:	4150      	adcs	r0, r2
    d982:	9b03      	ldr	r3, [sp, #12]
    d984:	1a1b      	subs	r3, r3, r0
    d986:	9303      	str	r3, [sp, #12]
    d988:	e53d      	b.n	d406 <_dtoa_r+0x13e>
    d98a:	2301      	movs	r3, #1
    d98c:	1a9b      	subs	r3, r3, r2
    d98e:	9306      	str	r3, [sp, #24]
    d990:	2300      	movs	r3, #0
    d992:	9304      	str	r3, [sp, #16]
    d994:	e557      	b.n	d446 <_dtoa_r+0x17e>
    d996:	46c0      	nop			; (mov r8, r8)
    d998:	3ff00000 	.word	0x3ff00000
    d99c:	40240000 	.word	0x40240000
    d9a0:	00000432 	.word	0x00000432
    d9a4:	00000412 	.word	0x00000412
    d9a8:	fe100000 	.word	0xfe100000
    d9ac:	0001529c 	.word	0x0001529c
    d9b0:	00015910 	.word	0x00015910
    d9b4:	9b06      	ldr	r3, [sp, #24]
    d9b6:	464c      	mov	r4, r9
    d9b8:	9308      	str	r3, [sp, #32]
    d9ba:	2300      	movs	r3, #0
    d9bc:	4698      	mov	r8, r3
    d9be:	9908      	ldr	r1, [sp, #32]
    d9c0:	1e0b      	subs	r3, r1, #0
    d9c2:	dd0e      	ble.n	d9e2 <_dtoa_r+0x71a>
    d9c4:	9a04      	ldr	r2, [sp, #16]
    d9c6:	2a00      	cmp	r2, #0
    d9c8:	dd0b      	ble.n	d9e2 <_dtoa_r+0x71a>
    d9ca:	4293      	cmp	r3, r2
    d9cc:	dd00      	ble.n	d9d0 <_dtoa_r+0x708>
    d9ce:	e187      	b.n	dce0 <_dtoa_r+0xa18>
    d9d0:	9a06      	ldr	r2, [sp, #24]
    d9d2:	1ad2      	subs	r2, r2, r3
    d9d4:	9206      	str	r2, [sp, #24]
    d9d6:	9a08      	ldr	r2, [sp, #32]
    d9d8:	1ad2      	subs	r2, r2, r3
    d9da:	9208      	str	r2, [sp, #32]
    d9dc:	9a04      	ldr	r2, [sp, #16]
    d9de:	1ad3      	subs	r3, r2, r3
    d9e0:	9304      	str	r3, [sp, #16]
    d9e2:	464b      	mov	r3, r9
    d9e4:	2b00      	cmp	r3, #0
    d9e6:	d01a      	beq.n	da1e <_dtoa_r+0x756>
    d9e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9ea:	2b00      	cmp	r3, #0
    d9ec:	d100      	bne.n	d9f0 <_dtoa_r+0x728>
    d9ee:	e1bb      	b.n	dd68 <_dtoa_r+0xaa0>
    d9f0:	2c00      	cmp	r4, #0
    d9f2:	dd10      	ble.n	da16 <_dtoa_r+0x74e>
    d9f4:	4641      	mov	r1, r8
    d9f6:	0022      	movs	r2, r4
    d9f8:	4650      	mov	r0, sl
    d9fa:	f001 fe87 	bl	f70c <__pow5mult>
    d9fe:	465a      	mov	r2, fp
    da00:	0001      	movs	r1, r0
    da02:	4680      	mov	r8, r0
    da04:	4650      	mov	r0, sl
    da06:	f001 fdd7 	bl	f5b8 <__multiply>
    da0a:	0005      	movs	r5, r0
    da0c:	4659      	mov	r1, fp
    da0e:	4650      	mov	r0, sl
    da10:	f001 fce6 	bl	f3e0 <_Bfree>
    da14:	46ab      	mov	fp, r5
    da16:	464b      	mov	r3, r9
    da18:	1b1a      	subs	r2, r3, r4
    da1a:	d000      	beq.n	da1e <_dtoa_r+0x756>
    da1c:	e1a5      	b.n	dd6a <_dtoa_r+0xaa2>
    da1e:	2101      	movs	r1, #1
    da20:	4650      	mov	r0, sl
    da22:	f001 fdbf 	bl	f5a4 <__i2b>
    da26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    da28:	4681      	mov	r9, r0
    da2a:	2b00      	cmp	r3, #0
    da2c:	dd1d      	ble.n	da6a <_dtoa_r+0x7a2>
    da2e:	001a      	movs	r2, r3
    da30:	0001      	movs	r1, r0
    da32:	4650      	mov	r0, sl
    da34:	f001 fe6a 	bl	f70c <__pow5mult>
    da38:	9b22      	ldr	r3, [sp, #136]	; 0x88
    da3a:	4681      	mov	r9, r0
    da3c:	2b01      	cmp	r3, #1
    da3e:	dc00      	bgt.n	da42 <_dtoa_r+0x77a>
    da40:	e150      	b.n	dce4 <_dtoa_r+0xa1c>
    da42:	2400      	movs	r4, #0
    da44:	464b      	mov	r3, r9
    da46:	691b      	ldr	r3, [r3, #16]
    da48:	3303      	adds	r3, #3
    da4a:	009b      	lsls	r3, r3, #2
    da4c:	444b      	add	r3, r9
    da4e:	6858      	ldr	r0, [r3, #4]
    da50:	f001 fd60 	bl	f514 <__hi0bits>
    da54:	2320      	movs	r3, #32
    da56:	1a1b      	subs	r3, r3, r0
    da58:	e010      	b.n	da7c <_dtoa_r+0x7b4>
    da5a:	2220      	movs	r2, #32
    da5c:	0030      	movs	r0, r6
    da5e:	1ad3      	subs	r3, r2, r3
    da60:	4098      	lsls	r0, r3
    da62:	e685      	b.n	d770 <_dtoa_r+0x4a8>
    da64:	2300      	movs	r3, #0
    da66:	930c      	str	r3, [sp, #48]	; 0x30
    da68:	e4e3      	b.n	d432 <_dtoa_r+0x16a>
    da6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    da6c:	2400      	movs	r4, #0
    da6e:	2b01      	cmp	r3, #1
    da70:	dc00      	bgt.n	da74 <_dtoa_r+0x7ac>
    da72:	e18b      	b.n	dd8c <_dtoa_r+0xac4>
    da74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    da76:	2301      	movs	r3, #1
    da78:	2a00      	cmp	r2, #0
    da7a:	d1e3      	bne.n	da44 <_dtoa_r+0x77c>
    da7c:	9904      	ldr	r1, [sp, #16]
    da7e:	201f      	movs	r0, #31
    da80:	468c      	mov	ip, r1
    da82:	4463      	add	r3, ip
    da84:	4018      	ands	r0, r3
    da86:	d100      	bne.n	da8a <_dtoa_r+0x7c2>
    da88:	e0ae      	b.n	dbe8 <_dtoa_r+0x920>
    da8a:	2320      	movs	r3, #32
    da8c:	1a1b      	subs	r3, r3, r0
    da8e:	2b04      	cmp	r3, #4
    da90:	dc00      	bgt.n	da94 <_dtoa_r+0x7cc>
    da92:	e3cc      	b.n	e22e <_dtoa_r+0xf66>
    da94:	231c      	movs	r3, #28
    da96:	1a18      	subs	r0, r3, r0
    da98:	9b06      	ldr	r3, [sp, #24]
    da9a:	469c      	mov	ip, r3
    da9c:	4484      	add	ip, r0
    da9e:	4663      	mov	r3, ip
    daa0:	9306      	str	r3, [sp, #24]
    daa2:	9b08      	ldr	r3, [sp, #32]
    daa4:	469c      	mov	ip, r3
    daa6:	4484      	add	ip, r0
    daa8:	4663      	mov	r3, ip
    daaa:	468c      	mov	ip, r1
    daac:	4484      	add	ip, r0
    daae:	9308      	str	r3, [sp, #32]
    dab0:	4663      	mov	r3, ip
    dab2:	9304      	str	r3, [sp, #16]
    dab4:	9b06      	ldr	r3, [sp, #24]
    dab6:	2b00      	cmp	r3, #0
    dab8:	dd05      	ble.n	dac6 <_dtoa_r+0x7fe>
    daba:	4659      	mov	r1, fp
    dabc:	001a      	movs	r2, r3
    dabe:	4650      	mov	r0, sl
    dac0:	f001 fe84 	bl	f7cc <__lshift>
    dac4:	4683      	mov	fp, r0
    dac6:	9b04      	ldr	r3, [sp, #16]
    dac8:	2b00      	cmp	r3, #0
    daca:	dd05      	ble.n	dad8 <_dtoa_r+0x810>
    dacc:	4649      	mov	r1, r9
    dace:	001a      	movs	r2, r3
    dad0:	4650      	mov	r0, sl
    dad2:	f001 fe7b 	bl	f7cc <__lshift>
    dad6:	4681      	mov	r9, r0
    dad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dada:	2b00      	cmp	r3, #0
    dadc:	d000      	beq.n	dae0 <_dtoa_r+0x818>
    dade:	e094      	b.n	dc0a <_dtoa_r+0x942>
    dae0:	9b07      	ldr	r3, [sp, #28]
    dae2:	2b00      	cmp	r3, #0
    dae4:	dc00      	bgt.n	dae8 <_dtoa_r+0x820>
    dae6:	e175      	b.n	ddd4 <_dtoa_r+0xb0c>
    dae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    daea:	2b00      	cmp	r3, #0
    daec:	d100      	bne.n	daf0 <_dtoa_r+0x828>
    daee:	e0a6      	b.n	dc3e <_dtoa_r+0x976>
    daf0:	9b08      	ldr	r3, [sp, #32]
    daf2:	2b00      	cmp	r3, #0
    daf4:	dd05      	ble.n	db02 <_dtoa_r+0x83a>
    daf6:	4641      	mov	r1, r8
    daf8:	001a      	movs	r2, r3
    dafa:	4650      	mov	r0, sl
    dafc:	f001 fe66 	bl	f7cc <__lshift>
    db00:	4680      	mov	r8, r0
    db02:	4643      	mov	r3, r8
    db04:	930c      	str	r3, [sp, #48]	; 0x30
    db06:	2c00      	cmp	r4, #0
    db08:	d000      	beq.n	db0c <_dtoa_r+0x844>
    db0a:	e250      	b.n	dfae <_dtoa_r+0xce6>
    db0c:	9c07      	ldr	r4, [sp, #28]
    db0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    db10:	3c01      	subs	r4, #1
    db12:	0023      	movs	r3, r4
    db14:	4694      	mov	ip, r2
    db16:	4463      	add	r3, ip
    db18:	9308      	str	r3, [sp, #32]
    db1a:	2301      	movs	r3, #1
    db1c:	4033      	ands	r3, r6
    db1e:	9307      	str	r3, [sp, #28]
    db20:	464b      	mov	r3, r9
    db22:	9306      	str	r3, [sp, #24]
    db24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    db26:	4657      	mov	r7, sl
    db28:	4645      	mov	r5, r8
    db2a:	465e      	mov	r6, fp
    db2c:	4692      	mov	sl, r2
    db2e:	4698      	mov	r8, r3
    db30:	9b06      	ldr	r3, [sp, #24]
    db32:	0030      	movs	r0, r6
    db34:	0019      	movs	r1, r3
    db36:	4699      	mov	r9, r3
    db38:	f7ff fb1c 	bl	d174 <quorem>
    db3c:	0003      	movs	r3, r0
    db3e:	900b      	str	r0, [sp, #44]	; 0x2c
    db40:	3330      	adds	r3, #48	; 0x30
    db42:	0029      	movs	r1, r5
    db44:	0030      	movs	r0, r6
    db46:	9304      	str	r3, [sp, #16]
    db48:	f001 fea0 	bl	f88c <__mcmp>
    db4c:	4649      	mov	r1, r9
    db4e:	0004      	movs	r4, r0
    db50:	4642      	mov	r2, r8
    db52:	0038      	movs	r0, r7
    db54:	f001 feb4 	bl	f8c0 <__mdiff>
    db58:	68c3      	ldr	r3, [r0, #12]
    db5a:	4681      	mov	r9, r0
    db5c:	2b00      	cmp	r3, #0
    db5e:	d000      	beq.n	db62 <_dtoa_r+0x89a>
    db60:	e11e      	b.n	dda0 <_dtoa_r+0xad8>
    db62:	0001      	movs	r1, r0
    db64:	0030      	movs	r0, r6
    db66:	f001 fe91 	bl	f88c <__mcmp>
    db6a:	4683      	mov	fp, r0
    db6c:	4649      	mov	r1, r9
    db6e:	0038      	movs	r0, r7
    db70:	f001 fc36 	bl	f3e0 <_Bfree>
    db74:	465b      	mov	r3, fp
    db76:	9a22      	ldr	r2, [sp, #136]	; 0x88
    db78:	4313      	orrs	r3, r2
    db7a:	d103      	bne.n	db84 <_dtoa_r+0x8bc>
    db7c:	9b07      	ldr	r3, [sp, #28]
    db7e:	2b00      	cmp	r3, #0
    db80:	d100      	bne.n	db84 <_dtoa_r+0x8bc>
    db82:	e306      	b.n	e192 <_dtoa_r+0xeca>
    db84:	2c00      	cmp	r4, #0
    db86:	da00      	bge.n	db8a <_dtoa_r+0x8c2>
    db88:	e1a8      	b.n	dedc <_dtoa_r+0xc14>
    db8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    db8c:	431c      	orrs	r4, r3
    db8e:	d103      	bne.n	db98 <_dtoa_r+0x8d0>
    db90:	9b07      	ldr	r3, [sp, #28]
    db92:	2b00      	cmp	r3, #0
    db94:	d100      	bne.n	db98 <_dtoa_r+0x8d0>
    db96:	e1a1      	b.n	dedc <_dtoa_r+0xc14>
    db98:	465b      	mov	r3, fp
    db9a:	2b00      	cmp	r3, #0
    db9c:	dd00      	ble.n	dba0 <_dtoa_r+0x8d8>
    db9e:	e282      	b.n	e0a6 <_dtoa_r+0xdde>
    dba0:	4669      	mov	r1, sp
    dba2:	4652      	mov	r2, sl
    dba4:	4653      	mov	r3, sl
    dba6:	7c09      	ldrb	r1, [r1, #16]
    dba8:	1c5c      	adds	r4, r3, #1
    dbaa:	7011      	strb	r1, [r2, #0]
    dbac:	9a08      	ldr	r2, [sp, #32]
    dbae:	4552      	cmp	r2, sl
    dbb0:	d100      	bne.n	dbb4 <_dtoa_r+0x8ec>
    dbb2:	e28a      	b.n	e0ca <_dtoa_r+0xe02>
    dbb4:	0031      	movs	r1, r6
    dbb6:	2300      	movs	r3, #0
    dbb8:	220a      	movs	r2, #10
    dbba:	0038      	movs	r0, r7
    dbbc:	f001 fc1a 	bl	f3f4 <__multadd>
    dbc0:	2300      	movs	r3, #0
    dbc2:	0006      	movs	r6, r0
    dbc4:	220a      	movs	r2, #10
    dbc6:	0029      	movs	r1, r5
    dbc8:	0038      	movs	r0, r7
    dbca:	4545      	cmp	r5, r8
    dbcc:	d100      	bne.n	dbd0 <_dtoa_r+0x908>
    dbce:	e0e1      	b.n	dd94 <_dtoa_r+0xacc>
    dbd0:	f001 fc10 	bl	f3f4 <__multadd>
    dbd4:	4641      	mov	r1, r8
    dbd6:	0005      	movs	r5, r0
    dbd8:	2300      	movs	r3, #0
    dbda:	220a      	movs	r2, #10
    dbdc:	0038      	movs	r0, r7
    dbde:	f001 fc09 	bl	f3f4 <__multadd>
    dbe2:	46a2      	mov	sl, r4
    dbe4:	4680      	mov	r8, r0
    dbe6:	e7a3      	b.n	db30 <_dtoa_r+0x868>
    dbe8:	201c      	movs	r0, #28
    dbea:	9b06      	ldr	r3, [sp, #24]
    dbec:	469c      	mov	ip, r3
    dbee:	4484      	add	ip, r0
    dbf0:	4663      	mov	r3, ip
    dbf2:	9306      	str	r3, [sp, #24]
    dbf4:	9b08      	ldr	r3, [sp, #32]
    dbf6:	469c      	mov	ip, r3
    dbf8:	4484      	add	ip, r0
    dbfa:	4663      	mov	r3, ip
    dbfc:	9308      	str	r3, [sp, #32]
    dbfe:	9b04      	ldr	r3, [sp, #16]
    dc00:	469c      	mov	ip, r3
    dc02:	4484      	add	ip, r0
    dc04:	4663      	mov	r3, ip
    dc06:	9304      	str	r3, [sp, #16]
    dc08:	e754      	b.n	dab4 <_dtoa_r+0x7ec>
    dc0a:	4649      	mov	r1, r9
    dc0c:	4658      	mov	r0, fp
    dc0e:	f001 fe3d 	bl	f88c <__mcmp>
    dc12:	2800      	cmp	r0, #0
    dc14:	db00      	blt.n	dc18 <_dtoa_r+0x950>
    dc16:	e763      	b.n	dae0 <_dtoa_r+0x818>
    dc18:	9b03      	ldr	r3, [sp, #12]
    dc1a:	4659      	mov	r1, fp
    dc1c:	3b01      	subs	r3, #1
    dc1e:	9303      	str	r3, [sp, #12]
    dc20:	220a      	movs	r2, #10
    dc22:	2300      	movs	r3, #0
    dc24:	4650      	mov	r0, sl
    dc26:	f001 fbe5 	bl	f3f4 <__multadd>
    dc2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dc2c:	4683      	mov	fp, r0
    dc2e:	2b00      	cmp	r3, #0
    dc30:	d000      	beq.n	dc34 <_dtoa_r+0x96c>
    dc32:	e2ca      	b.n	e1ca <_dtoa_r+0xf02>
    dc34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    dc36:	2b00      	cmp	r3, #0
    dc38:	dc00      	bgt.n	dc3c <_dtoa_r+0x974>
    dc3a:	e2d8      	b.n	e1ee <_dtoa_r+0xf26>
    dc3c:	9307      	str	r3, [sp, #28]
    dc3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc40:	465d      	mov	r5, fp
    dc42:	2400      	movs	r4, #0
    dc44:	9f07      	ldr	r7, [sp, #28]
    dc46:	469b      	mov	fp, r3
    dc48:	e006      	b.n	dc58 <_dtoa_r+0x990>
    dc4a:	0029      	movs	r1, r5
    dc4c:	2300      	movs	r3, #0
    dc4e:	220a      	movs	r2, #10
    dc50:	4650      	mov	r0, sl
    dc52:	f001 fbcf 	bl	f3f4 <__multadd>
    dc56:	0005      	movs	r5, r0
    dc58:	4649      	mov	r1, r9
    dc5a:	0028      	movs	r0, r5
    dc5c:	f7ff fa8a 	bl	d174 <quorem>
    dc60:	465b      	mov	r3, fp
    dc62:	3030      	adds	r0, #48	; 0x30
    dc64:	5518      	strb	r0, [r3, r4]
    dc66:	3401      	adds	r4, #1
    dc68:	42bc      	cmp	r4, r7
    dc6a:	dbee      	blt.n	dc4a <_dtoa_r+0x982>
    dc6c:	46ab      	mov	fp, r5
    dc6e:	0006      	movs	r6, r0
    dc70:	9c07      	ldr	r4, [sp, #28]
    dc72:	2c00      	cmp	r4, #0
    dc74:	dc00      	bgt.n	dc78 <_dtoa_r+0x9b0>
    dc76:	e237      	b.n	e0e8 <_dtoa_r+0xe20>
    dc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dc7a:	2700      	movs	r7, #0
    dc7c:	469c      	mov	ip, r3
    dc7e:	4464      	add	r4, ip
    dc80:	4659      	mov	r1, fp
    dc82:	2201      	movs	r2, #1
    dc84:	4650      	mov	r0, sl
    dc86:	f001 fda1 	bl	f7cc <__lshift>
    dc8a:	4649      	mov	r1, r9
    dc8c:	4683      	mov	fp, r0
    dc8e:	f001 fdfd 	bl	f88c <__mcmp>
    dc92:	2800      	cmp	r0, #0
    dc94:	dc00      	bgt.n	dc98 <_dtoa_r+0x9d0>
    dc96:	e144      	b.n	df22 <_dtoa_r+0xc5a>
    dc98:	1e65      	subs	r5, r4, #1
    dc9a:	782b      	ldrb	r3, [r5, #0]
    dc9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    dc9e:	e006      	b.n	dcae <_dtoa_r+0x9e6>
    dca0:	4295      	cmp	r5, r2
    dca2:	d100      	bne.n	dca6 <_dtoa_r+0x9de>
    dca4:	e0b1      	b.n	de0a <_dtoa_r+0xb42>
    dca6:	3c02      	subs	r4, #2
    dca8:	7823      	ldrb	r3, [r4, #0]
    dcaa:	002c      	movs	r4, r5
    dcac:	3d01      	subs	r5, #1
    dcae:	2b39      	cmp	r3, #57	; 0x39
    dcb0:	d0f6      	beq.n	dca0 <_dtoa_r+0x9d8>
    dcb2:	3301      	adds	r3, #1
    dcb4:	702b      	strb	r3, [r5, #0]
    dcb6:	4649      	mov	r1, r9
    dcb8:	4650      	mov	r0, sl
    dcba:	f001 fb91 	bl	f3e0 <_Bfree>
    dcbe:	4643      	mov	r3, r8
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d100      	bne.n	dcc6 <_dtoa_r+0x9fe>
    dcc4:	e52f      	b.n	d726 <_dtoa_r+0x45e>
    dcc6:	2f00      	cmp	r7, #0
    dcc8:	d005      	beq.n	dcd6 <_dtoa_r+0xa0e>
    dcca:	4547      	cmp	r7, r8
    dccc:	d003      	beq.n	dcd6 <_dtoa_r+0xa0e>
    dcce:	0039      	movs	r1, r7
    dcd0:	4650      	mov	r0, sl
    dcd2:	f001 fb85 	bl	f3e0 <_Bfree>
    dcd6:	4641      	mov	r1, r8
    dcd8:	4650      	mov	r0, sl
    dcda:	f001 fb81 	bl	f3e0 <_Bfree>
    dcde:	e522      	b.n	d726 <_dtoa_r+0x45e>
    dce0:	0013      	movs	r3, r2
    dce2:	e675      	b.n	d9d0 <_dtoa_r+0x708>
    dce4:	2e00      	cmp	r6, #0
    dce6:	d000      	beq.n	dcea <_dtoa_r+0xa22>
    dce8:	e6ab      	b.n	da42 <_dtoa_r+0x77a>
    dcea:	033b      	lsls	r3, r7, #12
    dcec:	2400      	movs	r4, #0
    dcee:	2b00      	cmp	r3, #0
    dcf0:	d000      	beq.n	dcf4 <_dtoa_r+0xa2c>
    dcf2:	e6bf      	b.n	da74 <_dtoa_r+0x7ac>
    dcf4:	4bba      	ldr	r3, [pc, #744]	; (dfe0 <_dtoa_r+0xd18>)
    dcf6:	423b      	tst	r3, r7
    dcf8:	d100      	bne.n	dcfc <_dtoa_r+0xa34>
    dcfa:	e6bb      	b.n	da74 <_dtoa_r+0x7ac>
    dcfc:	9b06      	ldr	r3, [sp, #24]
    dcfe:	3401      	adds	r4, #1
    dd00:	3301      	adds	r3, #1
    dd02:	9306      	str	r3, [sp, #24]
    dd04:	9b04      	ldr	r3, [sp, #16]
    dd06:	3301      	adds	r3, #1
    dd08:	9304      	str	r3, [sp, #16]
    dd0a:	e6b3      	b.n	da74 <_dtoa_r+0x7ac>
    dd0c:	2301      	movs	r3, #1
    dd0e:	930b      	str	r3, [sp, #44]	; 0x2c
    dd10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    dd12:	2b00      	cmp	r3, #0
    dd14:	dc00      	bgt.n	dd18 <_dtoa_r+0xa50>
    dd16:	e0d1      	b.n	debc <_dtoa_r+0xbf4>
    dd18:	001d      	movs	r5, r3
    dd1a:	4698      	mov	r8, r3
    dd1c:	930e      	str	r3, [sp, #56]	; 0x38
    dd1e:	9307      	str	r3, [sp, #28]
    dd20:	f7ff fbc8 	bl	d4b4 <_dtoa_r+0x1ec>
    dd24:	9b07      	ldr	r3, [sp, #28]
    dd26:	2b00      	cmp	r3, #0
    dd28:	dd00      	ble.n	dd2c <_dtoa_r+0xa64>
    dd2a:	e553      	b.n	d7d4 <_dtoa_r+0x50c>
    dd2c:	d000      	beq.n	dd30 <_dtoa_r+0xa68>
    dd2e:	e0ad      	b.n	de8c <_dtoa_r+0xbc4>
    dd30:	9804      	ldr	r0, [sp, #16]
    dd32:	9905      	ldr	r1, [sp, #20]
    dd34:	2200      	movs	r2, #0
    dd36:	4bab      	ldr	r3, [pc, #684]	; (dfe4 <_dtoa_r+0xd1c>)
    dd38:	f7f9 fd24 	bl	7784 <__aeabi_dmul>
    dd3c:	003b      	movs	r3, r7
    dd3e:	0032      	movs	r2, r6
    dd40:	f7fa fbea 	bl	8518 <__aeabi_dcmpge>
    dd44:	2300      	movs	r3, #0
    dd46:	4699      	mov	r9, r3
    dd48:	4698      	mov	r8, r3
    dd4a:	2800      	cmp	r0, #0
    dd4c:	d055      	beq.n	ddfa <_dtoa_r+0xb32>
    dd4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    dd50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    dd52:	43db      	mvns	r3, r3
    dd54:	9303      	str	r3, [sp, #12]
    dd56:	4649      	mov	r1, r9
    dd58:	4650      	mov	r0, sl
    dd5a:	f001 fb41 	bl	f3e0 <_Bfree>
    dd5e:	4643      	mov	r3, r8
    dd60:	2b00      	cmp	r3, #0
    dd62:	d100      	bne.n	dd66 <_dtoa_r+0xa9e>
    dd64:	e4df      	b.n	d726 <_dtoa_r+0x45e>
    dd66:	e7b6      	b.n	dcd6 <_dtoa_r+0xa0e>
    dd68:	464a      	mov	r2, r9
    dd6a:	4659      	mov	r1, fp
    dd6c:	4650      	mov	r0, sl
    dd6e:	f001 fccd 	bl	f70c <__pow5mult>
    dd72:	4683      	mov	fp, r0
    dd74:	e653      	b.n	da1e <_dtoa_r+0x756>
    dd76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    dd78:	2a00      	cmp	r2, #0
    dd7a:	d100      	bne.n	dd7e <_dtoa_r+0xab6>
    dd7c:	e1b6      	b.n	e0ec <_dtoa_r+0xe24>
    dd7e:	4a9a      	ldr	r2, [pc, #616]	; (dfe8 <_dtoa_r+0xd20>)
    dd80:	464c      	mov	r4, r9
    dd82:	4694      	mov	ip, r2
    dd84:	9a06      	ldr	r2, [sp, #24]
    dd86:	4463      	add	r3, ip
    dd88:	9208      	str	r2, [sp, #32]
    dd8a:	e5d5      	b.n	d938 <_dtoa_r+0x670>
    dd8c:	2e00      	cmp	r6, #0
    dd8e:	d000      	beq.n	dd92 <_dtoa_r+0xaca>
    dd90:	e670      	b.n	da74 <_dtoa_r+0x7ac>
    dd92:	e7aa      	b.n	dcea <_dtoa_r+0xa22>
    dd94:	f001 fb2e 	bl	f3f4 <__multadd>
    dd98:	46a2      	mov	sl, r4
    dd9a:	0005      	movs	r5, r0
    dd9c:	4680      	mov	r8, r0
    dd9e:	e6c7      	b.n	db30 <_dtoa_r+0x868>
    dda0:	2301      	movs	r3, #1
    dda2:	469b      	mov	fp, r3
    dda4:	e6e2      	b.n	db6c <_dtoa_r+0x8a4>
    dda6:	2300      	movs	r3, #0
    dda8:	930b      	str	r3, [sp, #44]	; 0x2c
    ddaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ddac:	2b02      	cmp	r3, #2
    ddae:	d0af      	beq.n	dd10 <_dtoa_r+0xa48>
    ddb0:	2400      	movs	r4, #0
    ddb2:	4653      	mov	r3, sl
    ddb4:	0021      	movs	r1, r4
    ddb6:	645c      	str	r4, [r3, #68]	; 0x44
    ddb8:	4650      	mov	r0, sl
    ddba:	f001 fae9 	bl	f390 <_Balloc>
    ddbe:	4653      	mov	r3, sl
    ddc0:	6418      	str	r0, [r3, #64]	; 0x40
    ddc2:	2301      	movs	r3, #1
    ddc4:	425b      	negs	r3, r3
    ddc6:	9307      	str	r3, [sp, #28]
    ddc8:	930e      	str	r3, [sp, #56]	; 0x38
    ddca:	3302      	adds	r3, #2
    ddcc:	900a      	str	r0, [sp, #40]	; 0x28
    ddce:	9423      	str	r4, [sp, #140]	; 0x8c
    ddd0:	930b      	str	r3, [sp, #44]	; 0x2c
    ddd2:	e4ec      	b.n	d7ae <_dtoa_r+0x4e6>
    ddd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ddd6:	2b02      	cmp	r3, #2
    ddd8:	dc00      	bgt.n	dddc <_dtoa_r+0xb14>
    ddda:	e685      	b.n	dae8 <_dtoa_r+0x820>
    dddc:	9b07      	ldr	r3, [sp, #28]
    ddde:	2b00      	cmp	r3, #0
    dde0:	d1b5      	bne.n	dd4e <_dtoa_r+0xa86>
    dde2:	4649      	mov	r1, r9
    dde4:	2205      	movs	r2, #5
    dde6:	4650      	mov	r0, sl
    dde8:	f001 fb04 	bl	f3f4 <__multadd>
    ddec:	4681      	mov	r9, r0
    ddee:	0001      	movs	r1, r0
    ddf0:	4658      	mov	r0, fp
    ddf2:	f001 fd4b 	bl	f88c <__mcmp>
    ddf6:	2800      	cmp	r0, #0
    ddf8:	dda9      	ble.n	dd4e <_dtoa_r+0xa86>
    ddfa:	2331      	movs	r3, #49	; 0x31
    ddfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ddfe:	7013      	strb	r3, [r2, #0]
    de00:	9b03      	ldr	r3, [sp, #12]
    de02:	1c54      	adds	r4, r2, #1
    de04:	3301      	adds	r3, #1
    de06:	9303      	str	r3, [sp, #12]
    de08:	e7a5      	b.n	dd56 <_dtoa_r+0xa8e>
    de0a:	9b03      	ldr	r3, [sp, #12]
    de0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de0e:	3301      	adds	r3, #1
    de10:	9303      	str	r3, [sp, #12]
    de12:	2331      	movs	r3, #49	; 0x31
    de14:	7013      	strb	r3, [r2, #0]
    de16:	e74e      	b.n	dcb6 <_dtoa_r+0x9ee>
    de18:	2300      	movs	r3, #0
    de1a:	930b      	str	r3, [sp, #44]	; 0x2c
    de1c:	f7ff fb3d 	bl	d49a <_dtoa_r+0x1d2>
    de20:	9b06      	ldr	r3, [sp, #24]
    de22:	465c      	mov	r4, fp
    de24:	469b      	mov	fp, r3
    de26:	9b07      	ldr	r3, [sp, #28]
    de28:	469a      	mov	sl, r3
    de2a:	e47c      	b.n	d726 <_dtoa_r+0x45e>
    de2c:	4640      	mov	r0, r8
    de2e:	f7fa fa73 	bl	8318 <__aeabi_i2d>
    de32:	0032      	movs	r2, r6
    de34:	003b      	movs	r3, r7
    de36:	f7f9 fca5 	bl	7784 <__aeabi_dmul>
    de3a:	2200      	movs	r2, #0
    de3c:	4b6b      	ldr	r3, [pc, #428]	; (dfec <_dtoa_r+0xd24>)
    de3e:	f7f8 fe5d 	bl	6afc <__aeabi_dadd>
    de42:	4a6b      	ldr	r2, [pc, #428]	; (dff0 <_dtoa_r+0xd28>)
    de44:	000b      	movs	r3, r1
    de46:	4694      	mov	ip, r2
    de48:	4463      	add	r3, ip
    de4a:	9008      	str	r0, [sp, #32]
    de4c:	9109      	str	r1, [sp, #36]	; 0x24
    de4e:	9309      	str	r3, [sp, #36]	; 0x24
    de50:	2200      	movs	r2, #0
    de52:	4b64      	ldr	r3, [pc, #400]	; (dfe4 <_dtoa_r+0xd1c>)
    de54:	0030      	movs	r0, r6
    de56:	0039      	movs	r1, r7
    de58:	f7f9 ff14 	bl	7c84 <__aeabi_dsub>
    de5c:	9e08      	ldr	r6, [sp, #32]
    de5e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    de60:	0032      	movs	r2, r6
    de62:	003b      	movs	r3, r7
    de64:	0004      	movs	r4, r0
    de66:	000d      	movs	r5, r1
    de68:	f7fa fb4c 	bl	8504 <__aeabi_dcmpgt>
    de6c:	2800      	cmp	r0, #0
    de6e:	d000      	beq.n	de72 <_dtoa_r+0xbaa>
    de70:	e0b2      	b.n	dfd8 <_dtoa_r+0xd10>
    de72:	2080      	movs	r0, #128	; 0x80
    de74:	0600      	lsls	r0, r0, #24
    de76:	4684      	mov	ip, r0
    de78:	0039      	movs	r1, r7
    de7a:	4461      	add	r1, ip
    de7c:	000b      	movs	r3, r1
    de7e:	0032      	movs	r2, r6
    de80:	0020      	movs	r0, r4
    de82:	0029      	movs	r1, r5
    de84:	f7fa fb2a 	bl	84dc <__aeabi_dcmplt>
    de88:	2800      	cmp	r0, #0
    de8a:	d057      	beq.n	df3c <_dtoa_r+0xc74>
    de8c:	2300      	movs	r3, #0
    de8e:	4699      	mov	r9, r3
    de90:	4698      	mov	r8, r3
    de92:	e75c      	b.n	dd4e <_dtoa_r+0xa86>
    de94:	980a      	ldr	r0, [sp, #40]	; 0x28
    de96:	f7ff fa4c 	bl	d332 <_dtoa_r+0x6a>
    de9a:	1ae2      	subs	r2, r4, r3
    de9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    de9e:	46a1      	mov	r9, r4
    dea0:	469c      	mov	ip, r3
    dea2:	4494      	add	ip, r2
    dea4:	4663      	mov	r3, ip
    dea6:	2400      	movs	r4, #0
    dea8:	930d      	str	r3, [sp, #52]	; 0x34
    deaa:	e53e      	b.n	d92a <_dtoa_r+0x662>
    deac:	9a10      	ldr	r2, [sp, #64]	; 0x40
    deae:	9b11      	ldr	r3, [sp, #68]	; 0x44
    deb0:	9208      	str	r2, [sp, #32]
    deb2:	9309      	str	r3, [sp, #36]	; 0x24
    deb4:	2302      	movs	r3, #2
    deb6:	4698      	mov	r8, r3
    deb8:	f7ff fb3a 	bl	d530 <_dtoa_r+0x268>
    debc:	2300      	movs	r3, #0
    debe:	4652      	mov	r2, sl
    dec0:	2100      	movs	r1, #0
    dec2:	6453      	str	r3, [r2, #68]	; 0x44
    dec4:	4650      	mov	r0, sl
    dec6:	f001 fa63 	bl	f390 <_Balloc>
    deca:	4653      	mov	r3, sl
    decc:	6418      	str	r0, [r3, #64]	; 0x40
    dece:	2301      	movs	r3, #1
    ded0:	900a      	str	r0, [sp, #40]	; 0x28
    ded2:	9307      	str	r3, [sp, #28]
    ded4:	9323      	str	r3, [sp, #140]	; 0x8c
    ded6:	930e      	str	r3, [sp, #56]	; 0x38
    ded8:	f7ff fb07 	bl	d4ea <_dtoa_r+0x222>
    dedc:	4643      	mov	r3, r8
    dede:	930c      	str	r3, [sp, #48]	; 0x30
    dee0:	465b      	mov	r3, fp
    dee2:	9a06      	ldr	r2, [sp, #24]
    dee4:	46a8      	mov	r8, r5
    dee6:	46b3      	mov	fp, r6
    dee8:	4655      	mov	r5, sl
    deea:	9e04      	ldr	r6, [sp, #16]
    deec:	4691      	mov	r9, r2
    deee:	46ba      	mov	sl, r7
    def0:	2b00      	cmp	r3, #0
    def2:	dd10      	ble.n	df16 <_dtoa_r+0xc4e>
    def4:	4659      	mov	r1, fp
    def6:	2201      	movs	r2, #1
    def8:	0038      	movs	r0, r7
    defa:	f001 fc67 	bl	f7cc <__lshift>
    defe:	4649      	mov	r1, r9
    df00:	4683      	mov	fp, r0
    df02:	f001 fcc3 	bl	f88c <__mcmp>
    df06:	2800      	cmp	r0, #0
    df08:	dc00      	bgt.n	df0c <_dtoa_r+0xc44>
    df0a:	e157      	b.n	e1bc <_dtoa_r+0xef4>
    df0c:	2e39      	cmp	r6, #57	; 0x39
    df0e:	d100      	bne.n	df12 <_dtoa_r+0xc4a>
    df10:	e122      	b.n	e158 <_dtoa_r+0xe90>
    df12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    df14:	3631      	adds	r6, #49	; 0x31
    df16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df18:	4647      	mov	r7, r8
    df1a:	1c6c      	adds	r4, r5, #1
    df1c:	702e      	strb	r6, [r5, #0]
    df1e:	4698      	mov	r8, r3
    df20:	e6c9      	b.n	dcb6 <_dtoa_r+0x9ee>
    df22:	2800      	cmp	r0, #0
    df24:	d103      	bne.n	df2e <_dtoa_r+0xc66>
    df26:	07f3      	lsls	r3, r6, #31
    df28:	d501      	bpl.n	df2e <_dtoa_r+0xc66>
    df2a:	e6b5      	b.n	dc98 <_dtoa_r+0x9d0>
    df2c:	001c      	movs	r4, r3
    df2e:	1e63      	subs	r3, r4, #1
    df30:	781a      	ldrb	r2, [r3, #0]
    df32:	2a30      	cmp	r2, #48	; 0x30
    df34:	d0fa      	beq.n	df2c <_dtoa_r+0xc64>
    df36:	e6be      	b.n	dcb6 <_dtoa_r+0x9ee>
    df38:	9b12      	ldr	r3, [sp, #72]	; 0x48
    df3a:	4699      	mov	r9, r3
    df3c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    df3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    df40:	e435      	b.n	d7ae <_dtoa_r+0x4e6>
    df42:	2501      	movs	r5, #1
    df44:	f7ff fab4 	bl	d4b0 <_dtoa_r+0x1e8>
    df48:	9b03      	ldr	r3, [sp, #12]
    df4a:	2b00      	cmp	r3, #0
    df4c:	d100      	bne.n	df50 <_dtoa_r+0xc88>
    df4e:	e0d4      	b.n	e0fa <_dtoa_r+0xe32>
    df50:	9810      	ldr	r0, [sp, #64]	; 0x40
    df52:	9911      	ldr	r1, [sp, #68]	; 0x44
    df54:	425c      	negs	r4, r3
    df56:	230f      	movs	r3, #15
    df58:	4a26      	ldr	r2, [pc, #152]	; (dff4 <_dtoa_r+0xd2c>)
    df5a:	4023      	ands	r3, r4
    df5c:	00db      	lsls	r3, r3, #3
    df5e:	18d3      	adds	r3, r2, r3
    df60:	681a      	ldr	r2, [r3, #0]
    df62:	685b      	ldr	r3, [r3, #4]
    df64:	f7f9 fc0e 	bl	7784 <__aeabi_dmul>
    df68:	1124      	asrs	r4, r4, #4
    df6a:	0006      	movs	r6, r0
    df6c:	000f      	movs	r7, r1
    df6e:	2c00      	cmp	r4, #0
    df70:	d100      	bne.n	df74 <_dtoa_r+0xcac>
    df72:	e149      	b.n	e208 <_dtoa_r+0xf40>
    df74:	2302      	movs	r3, #2
    df76:	4698      	mov	r8, r3
    df78:	4d1f      	ldr	r5, [pc, #124]	; (dff8 <_dtoa_r+0xd30>)
    df7a:	2301      	movs	r3, #1
    df7c:	4223      	tst	r3, r4
    df7e:	d009      	beq.n	df94 <_dtoa_r+0xccc>
    df80:	469c      	mov	ip, r3
    df82:	682a      	ldr	r2, [r5, #0]
    df84:	686b      	ldr	r3, [r5, #4]
    df86:	0030      	movs	r0, r6
    df88:	0039      	movs	r1, r7
    df8a:	44e0      	add	r8, ip
    df8c:	f7f9 fbfa 	bl	7784 <__aeabi_dmul>
    df90:	0006      	movs	r6, r0
    df92:	000f      	movs	r7, r1
    df94:	1064      	asrs	r4, r4, #1
    df96:	3508      	adds	r5, #8
    df98:	2c00      	cmp	r4, #0
    df9a:	d1ee      	bne.n	df7a <_dtoa_r+0xcb2>
    df9c:	f7ff fae4 	bl	d568 <_dtoa_r+0x2a0>
    dfa0:	9b03      	ldr	r3, [sp, #12]
    dfa2:	2730      	movs	r7, #48	; 0x30
    dfa4:	3301      	adds	r3, #1
    dfa6:	9303      	str	r3, [sp, #12]
    dfa8:	2330      	movs	r3, #48	; 0x30
    dfaa:	702b      	strb	r3, [r5, #0]
    dfac:	e4ac      	b.n	d908 <_dtoa_r+0x640>
    dfae:	6859      	ldr	r1, [r3, #4]
    dfb0:	4650      	mov	r0, sl
    dfb2:	f001 f9ed 	bl	f390 <_Balloc>
    dfb6:	4643      	mov	r3, r8
    dfb8:	4641      	mov	r1, r8
    dfba:	0004      	movs	r4, r0
    dfbc:	691b      	ldr	r3, [r3, #16]
    dfbe:	310c      	adds	r1, #12
    dfc0:	1c9a      	adds	r2, r3, #2
    dfc2:	0092      	lsls	r2, r2, #2
    dfc4:	300c      	adds	r0, #12
    dfc6:	f7fa fc45 	bl	8854 <memcpy>
    dfca:	2201      	movs	r2, #1
    dfcc:	0021      	movs	r1, r4
    dfce:	4650      	mov	r0, sl
    dfd0:	f001 fbfc 	bl	f7cc <__lshift>
    dfd4:	900c      	str	r0, [sp, #48]	; 0x30
    dfd6:	e599      	b.n	db0c <_dtoa_r+0x844>
    dfd8:	2300      	movs	r3, #0
    dfda:	4699      	mov	r9, r3
    dfdc:	4698      	mov	r8, r3
    dfde:	e70c      	b.n	ddfa <_dtoa_r+0xb32>
    dfe0:	7ff00000 	.word	0x7ff00000
    dfe4:	40140000 	.word	0x40140000
    dfe8:	00000433 	.word	0x00000433
    dfec:	401c0000 	.word	0x401c0000
    dff0:	fcc00000 	.word	0xfcc00000
    dff4:	00015910 	.word	0x00015910
    dff8:	000158e8 	.word	0x000158e8
    dffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dffe:	498f      	ldr	r1, [pc, #572]	; (e23c <_dtoa_r+0xf74>)
    e000:	3b01      	subs	r3, #1
    e002:	00db      	lsls	r3, r3, #3
    e004:	18c9      	adds	r1, r1, r3
    e006:	6808      	ldr	r0, [r1, #0]
    e008:	6849      	ldr	r1, [r1, #4]
    e00a:	9a08      	ldr	r2, [sp, #32]
    e00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e00e:	f7f9 fbb9 	bl	7784 <__aeabi_dmul>
    e012:	9014      	str	r0, [sp, #80]	; 0x50
    e014:	9115      	str	r1, [sp, #84]	; 0x54
    e016:	0039      	movs	r1, r7
    e018:	0030      	movs	r0, r6
    e01a:	f7fa f949 	bl	82b0 <__aeabi_d2iz>
    e01e:	0005      	movs	r5, r0
    e020:	f7fa f97a 	bl	8318 <__aeabi_i2d>
    e024:	0002      	movs	r2, r0
    e026:	000b      	movs	r3, r1
    e028:	0030      	movs	r0, r6
    e02a:	0039      	movs	r1, r7
    e02c:	f7f9 fe2a 	bl	7c84 <__aeabi_dsub>
    e030:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e032:	9008      	str	r0, [sp, #32]
    e034:	9109      	str	r1, [sp, #36]	; 0x24
    e036:	990a      	ldr	r1, [sp, #40]	; 0x28
    e038:	001a      	movs	r2, r3
    e03a:	468c      	mov	ip, r1
    e03c:	3530      	adds	r5, #48	; 0x30
    e03e:	4462      	add	r2, ip
    e040:	1c4c      	adds	r4, r1, #1
    e042:	700d      	strb	r5, [r1, #0]
    e044:	4690      	mov	r8, r2
    e046:	2b01      	cmp	r3, #1
    e048:	d01b      	beq.n	e082 <_dtoa_r+0xdba>
    e04a:	9808      	ldr	r0, [sp, #32]
    e04c:	9909      	ldr	r1, [sp, #36]	; 0x24
    e04e:	0025      	movs	r5, r4
    e050:	2200      	movs	r2, #0
    e052:	4b7b      	ldr	r3, [pc, #492]	; (e240 <_dtoa_r+0xf78>)
    e054:	f7f9 fb96 	bl	7784 <__aeabi_dmul>
    e058:	000f      	movs	r7, r1
    e05a:	0006      	movs	r6, r0
    e05c:	f7fa f928 	bl	82b0 <__aeabi_d2iz>
    e060:	0004      	movs	r4, r0
    e062:	f7fa f959 	bl	8318 <__aeabi_i2d>
    e066:	3430      	adds	r4, #48	; 0x30
    e068:	0002      	movs	r2, r0
    e06a:	000b      	movs	r3, r1
    e06c:	0030      	movs	r0, r6
    e06e:	0039      	movs	r1, r7
    e070:	f7f9 fe08 	bl	7c84 <__aeabi_dsub>
    e074:	702c      	strb	r4, [r5, #0]
    e076:	3501      	adds	r5, #1
    e078:	45a8      	cmp	r8, r5
    e07a:	d1e9      	bne.n	e050 <_dtoa_r+0xd88>
    e07c:	4644      	mov	r4, r8
    e07e:	9008      	str	r0, [sp, #32]
    e080:	9109      	str	r1, [sp, #36]	; 0x24
    e082:	9814      	ldr	r0, [sp, #80]	; 0x50
    e084:	9915      	ldr	r1, [sp, #84]	; 0x54
    e086:	2200      	movs	r2, #0
    e088:	4b6e      	ldr	r3, [pc, #440]	; (e244 <_dtoa_r+0xf7c>)
    e08a:	f7f8 fd37 	bl	6afc <__aeabi_dadd>
    e08e:	9a08      	ldr	r2, [sp, #32]
    e090:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e092:	f7fa fa23 	bl	84dc <__aeabi_dcmplt>
    e096:	2800      	cmp	r0, #0
    e098:	d067      	beq.n	e16a <_dtoa_r+0xea2>
    e09a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e09c:	1e65      	subs	r5, r4, #1
    e09e:	9303      	str	r3, [sp, #12]
    e0a0:	782f      	ldrb	r7, [r5, #0]
    e0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e0a4:	e42e      	b.n	d904 <_dtoa_r+0x63c>
    e0a6:	4643      	mov	r3, r8
    e0a8:	46b3      	mov	fp, r6
    e0aa:	930c      	str	r3, [sp, #48]	; 0x30
    e0ac:	9e04      	ldr	r6, [sp, #16]
    e0ae:	9b06      	ldr	r3, [sp, #24]
    e0b0:	46a8      	mov	r8, r5
    e0b2:	4699      	mov	r9, r3
    e0b4:	4655      	mov	r5, sl
    e0b6:	46ba      	mov	sl, r7
    e0b8:	2e39      	cmp	r6, #57	; 0x39
    e0ba:	d04d      	beq.n	e158 <_dtoa_r+0xe90>
    e0bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e0be:	3601      	adds	r6, #1
    e0c0:	4647      	mov	r7, r8
    e0c2:	1c6c      	adds	r4, r5, #1
    e0c4:	702e      	strb	r6, [r5, #0]
    e0c6:	4698      	mov	r8, r3
    e0c8:	e5f5      	b.n	dcb6 <_dtoa_r+0x9ee>
    e0ca:	4642      	mov	r2, r8
    e0cc:	9b06      	ldr	r3, [sp, #24]
    e0ce:	46b3      	mov	fp, r6
    e0d0:	46ba      	mov	sl, r7
    e0d2:	9e04      	ldr	r6, [sp, #16]
    e0d4:	4699      	mov	r9, r3
    e0d6:	002f      	movs	r7, r5
    e0d8:	4690      	mov	r8, r2
    e0da:	e5d1      	b.n	dc80 <_dtoa_r+0x9b8>
    e0dc:	9b06      	ldr	r3, [sp, #24]
    e0de:	9a07      	ldr	r2, [sp, #28]
    e0e0:	1a9b      	subs	r3, r3, r2
    e0e2:	9308      	str	r3, [sp, #32]
    e0e4:	2300      	movs	r3, #0
    e0e6:	e427      	b.n	d938 <_dtoa_r+0x670>
    e0e8:	2401      	movs	r4, #1
    e0ea:	e5c5      	b.n	dc78 <_dtoa_r+0x9b0>
    e0ec:	2336      	movs	r3, #54	; 0x36
    e0ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e0f0:	464c      	mov	r4, r9
    e0f2:	1a9b      	subs	r3, r3, r2
    e0f4:	9a06      	ldr	r2, [sp, #24]
    e0f6:	9208      	str	r2, [sp, #32]
    e0f8:	e41e      	b.n	d938 <_dtoa_r+0x670>
    e0fa:	2302      	movs	r3, #2
    e0fc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    e0fe:	9f11      	ldr	r7, [sp, #68]	; 0x44
    e100:	4698      	mov	r8, r3
    e102:	f7ff fa31 	bl	d568 <_dtoa_r+0x2a0>
    e106:	9b07      	ldr	r3, [sp, #28]
    e108:	2b00      	cmp	r3, #0
    e10a:	d100      	bne.n	e10e <_dtoa_r+0xe46>
    e10c:	e68e      	b.n	de2c <_dtoa_r+0xb64>
    e10e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    e110:	2c00      	cmp	r4, #0
    e112:	dc00      	bgt.n	e116 <_dtoa_r+0xe4e>
    e114:	e712      	b.n	df3c <_dtoa_r+0xc74>
    e116:	9b03      	ldr	r3, [sp, #12]
    e118:	2200      	movs	r2, #0
    e11a:	3b01      	subs	r3, #1
    e11c:	9313      	str	r3, [sp, #76]	; 0x4c
    e11e:	0030      	movs	r0, r6
    e120:	4b47      	ldr	r3, [pc, #284]	; (e240 <_dtoa_r+0xf78>)
    e122:	0039      	movs	r1, r7
    e124:	f7f9 fb2e 	bl	7784 <__aeabi_dmul>
    e128:	0006      	movs	r6, r0
    e12a:	4640      	mov	r0, r8
    e12c:	000f      	movs	r7, r1
    e12e:	3001      	adds	r0, #1
    e130:	f7fa f8f2 	bl	8318 <__aeabi_i2d>
    e134:	0032      	movs	r2, r6
    e136:	003b      	movs	r3, r7
    e138:	f7f9 fb24 	bl	7784 <__aeabi_dmul>
    e13c:	2200      	movs	r2, #0
    e13e:	4b42      	ldr	r3, [pc, #264]	; (e248 <_dtoa_r+0xf80>)
    e140:	f7f8 fcdc 	bl	6afc <__aeabi_dadd>
    e144:	4a41      	ldr	r2, [pc, #260]	; (e24c <_dtoa_r+0xf84>)
    e146:	000b      	movs	r3, r1
    e148:	4694      	mov	ip, r2
    e14a:	4463      	add	r3, ip
    e14c:	9008      	str	r0, [sp, #32]
    e14e:	9109      	str	r1, [sp, #36]	; 0x24
    e150:	9412      	str	r4, [sp, #72]	; 0x48
    e152:	9309      	str	r3, [sp, #36]	; 0x24
    e154:	f7ff fa30 	bl	d5b8 <_dtoa_r+0x2f0>
    e158:	2339      	movs	r3, #57	; 0x39
    e15a:	702b      	strb	r3, [r5, #0]
    e15c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e15e:	4647      	mov	r7, r8
    e160:	1c6c      	adds	r4, r5, #1
    e162:	4698      	mov	r8, r3
    e164:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e166:	2339      	movs	r3, #57	; 0x39
    e168:	e5a1      	b.n	dcae <_dtoa_r+0x9e6>
    e16a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e16c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e16e:	2000      	movs	r0, #0
    e170:	4934      	ldr	r1, [pc, #208]	; (e244 <_dtoa_r+0xf7c>)
    e172:	f7f9 fd87 	bl	7c84 <__aeabi_dsub>
    e176:	9a08      	ldr	r2, [sp, #32]
    e178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e17a:	f7fa f9c3 	bl	8504 <__aeabi_dcmpgt>
    e17e:	2800      	cmp	r0, #0
    e180:	d101      	bne.n	e186 <_dtoa_r+0xebe>
    e182:	e6db      	b.n	df3c <_dtoa_r+0xc74>
    e184:	001c      	movs	r4, r3
    e186:	1e63      	subs	r3, r4, #1
    e188:	781a      	ldrb	r2, [r3, #0]
    e18a:	2a30      	cmp	r2, #48	; 0x30
    e18c:	d0fa      	beq.n	e184 <_dtoa_r+0xebc>
    e18e:	f7ff fac8 	bl	d722 <_dtoa_r+0x45a>
    e192:	4643      	mov	r3, r8
    e194:	46b3      	mov	fp, r6
    e196:	930c      	str	r3, [sp, #48]	; 0x30
    e198:	9e04      	ldr	r6, [sp, #16]
    e19a:	9b06      	ldr	r3, [sp, #24]
    e19c:	46a8      	mov	r8, r5
    e19e:	4699      	mov	r9, r3
    e1a0:	4655      	mov	r5, sl
    e1a2:	46ba      	mov	sl, r7
    e1a4:	2e39      	cmp	r6, #57	; 0x39
    e1a6:	d0d7      	beq.n	e158 <_dtoa_r+0xe90>
    e1a8:	2c00      	cmp	r4, #0
    e1aa:	dd00      	ble.n	e1ae <_dtoa_r+0xee6>
    e1ac:	e6b1      	b.n	df12 <_dtoa_r+0xc4a>
    e1ae:	e6b2      	b.n	df16 <_dtoa_r+0xc4e>
    e1b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e1b2:	464d      	mov	r5, r9
    e1b4:	9203      	str	r2, [sp, #12]
    e1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e1b8:	f7ff fba4 	bl	d904 <_dtoa_r+0x63c>
    e1bc:	2800      	cmp	r0, #0
    e1be:	d000      	beq.n	e1c2 <_dtoa_r+0xefa>
    e1c0:	e6a9      	b.n	df16 <_dtoa_r+0xc4e>
    e1c2:	07f3      	lsls	r3, r6, #31
    e1c4:	d400      	bmi.n	e1c8 <_dtoa_r+0xf00>
    e1c6:	e6a6      	b.n	df16 <_dtoa_r+0xc4e>
    e1c8:	e6a0      	b.n	df0c <_dtoa_r+0xc44>
    e1ca:	2300      	movs	r3, #0
    e1cc:	4641      	mov	r1, r8
    e1ce:	220a      	movs	r2, #10
    e1d0:	4650      	mov	r0, sl
    e1d2:	f001 f90f 	bl	f3f4 <__multadd>
    e1d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e1d8:	4680      	mov	r8, r0
    e1da:	2b00      	cmp	r3, #0
    e1dc:	dd01      	ble.n	e1e2 <_dtoa_r+0xf1a>
    e1de:	9307      	str	r3, [sp, #28]
    e1e0:	e486      	b.n	daf0 <_dtoa_r+0x828>
    e1e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e1e4:	2b02      	cmp	r3, #2
    e1e6:	dc1f      	bgt.n	e228 <_dtoa_r+0xf60>
    e1e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e1ea:	9307      	str	r3, [sp, #28]
    e1ec:	e480      	b.n	daf0 <_dtoa_r+0x828>
    e1ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e1f0:	2b02      	cmp	r3, #2
    e1f2:	dc19      	bgt.n	e228 <_dtoa_r+0xf60>
    e1f4:	4649      	mov	r1, r9
    e1f6:	f7fe ffbd 	bl	d174 <quorem>
    e1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e1fc:	3030      	adds	r0, #48	; 0x30
    e1fe:	7018      	strb	r0, [r3, #0]
    e200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e202:	0006      	movs	r6, r0
    e204:	9307      	str	r3, [sp, #28]
    e206:	e533      	b.n	dc70 <_dtoa_r+0x9a8>
    e208:	2302      	movs	r3, #2
    e20a:	4698      	mov	r8, r3
    e20c:	f7ff f9ac 	bl	d568 <_dtoa_r+0x2a0>
    e210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e212:	9c14      	ldr	r4, [sp, #80]	; 0x50
    e214:	9303      	str	r3, [sp, #12]
    e216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e218:	001d      	movs	r5, r3
    e21a:	f7ff fb73 	bl	d904 <_dtoa_r+0x63c>
    e21e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e220:	9c14      	ldr	r4, [sp, #80]	; 0x50
    e222:	9303      	str	r3, [sp, #12]
    e224:	f7ff fa7f 	bl	d726 <_dtoa_r+0x45e>
    e228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e22a:	9307      	str	r3, [sp, #28]
    e22c:	e5d6      	b.n	dddc <_dtoa_r+0xb14>
    e22e:	2b04      	cmp	r3, #4
    e230:	d100      	bne.n	e234 <_dtoa_r+0xf6c>
    e232:	e43f      	b.n	dab4 <_dtoa_r+0x7ec>
    e234:	233c      	movs	r3, #60	; 0x3c
    e236:	1a18      	subs	r0, r3, r0
    e238:	e4d7      	b.n	dbea <_dtoa_r+0x922>
    e23a:	46c0      	nop			; (mov r8, r8)
    e23c:	00015910 	.word	0x00015910
    e240:	40240000 	.word	0x40240000
    e244:	3fe00000 	.word	0x3fe00000
    e248:	401c0000 	.word	0x401c0000
    e24c:	fcc00000 	.word	0xfcc00000

0000e250 <__sflush_r>:
    e250:	b5f0      	push	{r4, r5, r6, r7, lr}
    e252:	46c6      	mov	lr, r8
    e254:	b500      	push	{lr}
    e256:	230c      	movs	r3, #12
    e258:	5eca      	ldrsh	r2, [r1, r3]
    e25a:	4680      	mov	r8, r0
    e25c:	b293      	uxth	r3, r2
    e25e:	000c      	movs	r4, r1
    e260:	0719      	lsls	r1, r3, #28
    e262:	d440      	bmi.n	e2e6 <__sflush_r+0x96>
    e264:	2380      	movs	r3, #128	; 0x80
    e266:	011b      	lsls	r3, r3, #4
    e268:	4313      	orrs	r3, r2
    e26a:	6862      	ldr	r2, [r4, #4]
    e26c:	81a3      	strh	r3, [r4, #12]
    e26e:	2a00      	cmp	r2, #0
    e270:	dc00      	bgt.n	e274 <__sflush_r+0x24>
    e272:	e070      	b.n	e356 <__sflush_r+0x106>
    e274:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e276:	2e00      	cmp	r6, #0
    e278:	d031      	beq.n	e2de <__sflush_r+0x8e>
    e27a:	4642      	mov	r2, r8
    e27c:	4641      	mov	r1, r8
    e27e:	6815      	ldr	r5, [r2, #0]
    e280:	2200      	movs	r2, #0
    e282:	b29b      	uxth	r3, r3
    e284:	600a      	str	r2, [r1, #0]
    e286:	04da      	lsls	r2, r3, #19
    e288:	d400      	bmi.n	e28c <__sflush_r+0x3c>
    e28a:	e069      	b.n	e360 <__sflush_r+0x110>
    e28c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e28e:	075b      	lsls	r3, r3, #29
    e290:	d506      	bpl.n	e2a0 <__sflush_r+0x50>
    e292:	6863      	ldr	r3, [r4, #4]
    e294:	1ad2      	subs	r2, r2, r3
    e296:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e298:	2b00      	cmp	r3, #0
    e29a:	d001      	beq.n	e2a0 <__sflush_r+0x50>
    e29c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e29e:	1ad2      	subs	r2, r2, r3
    e2a0:	2300      	movs	r3, #0
    e2a2:	69e1      	ldr	r1, [r4, #28]
    e2a4:	4640      	mov	r0, r8
    e2a6:	47b0      	blx	r6
    e2a8:	1c43      	adds	r3, r0, #1
    e2aa:	d03d      	beq.n	e328 <__sflush_r+0xd8>
    e2ac:	89a3      	ldrh	r3, [r4, #12]
    e2ae:	4a3a      	ldr	r2, [pc, #232]	; (e398 <__sflush_r+0x148>)
    e2b0:	4013      	ands	r3, r2
    e2b2:	2200      	movs	r2, #0
    e2b4:	6062      	str	r2, [r4, #4]
    e2b6:	6922      	ldr	r2, [r4, #16]
    e2b8:	b21b      	sxth	r3, r3
    e2ba:	81a3      	strh	r3, [r4, #12]
    e2bc:	6022      	str	r2, [r4, #0]
    e2be:	04db      	lsls	r3, r3, #19
    e2c0:	d447      	bmi.n	e352 <__sflush_r+0x102>
    e2c2:	4643      	mov	r3, r8
    e2c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e2c6:	601d      	str	r5, [r3, #0]
    e2c8:	2900      	cmp	r1, #0
    e2ca:	d008      	beq.n	e2de <__sflush_r+0x8e>
    e2cc:	0023      	movs	r3, r4
    e2ce:	3340      	adds	r3, #64	; 0x40
    e2d0:	4299      	cmp	r1, r3
    e2d2:	d002      	beq.n	e2da <__sflush_r+0x8a>
    e2d4:	4640      	mov	r0, r8
    e2d6:	f000 f967 	bl	e5a8 <_free_r>
    e2da:	2300      	movs	r3, #0
    e2dc:	6323      	str	r3, [r4, #48]	; 0x30
    e2de:	2000      	movs	r0, #0
    e2e0:	bc04      	pop	{r2}
    e2e2:	4690      	mov	r8, r2
    e2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e2e6:	6926      	ldr	r6, [r4, #16]
    e2e8:	2e00      	cmp	r6, #0
    e2ea:	d0f8      	beq.n	e2de <__sflush_r+0x8e>
    e2ec:	6822      	ldr	r2, [r4, #0]
    e2ee:	6026      	str	r6, [r4, #0]
    e2f0:	1b95      	subs	r5, r2, r6
    e2f2:	2200      	movs	r2, #0
    e2f4:	079b      	lsls	r3, r3, #30
    e2f6:	d100      	bne.n	e2fa <__sflush_r+0xaa>
    e2f8:	6962      	ldr	r2, [r4, #20]
    e2fa:	60a2      	str	r2, [r4, #8]
    e2fc:	2d00      	cmp	r5, #0
    e2fe:	dc04      	bgt.n	e30a <__sflush_r+0xba>
    e300:	e7ed      	b.n	e2de <__sflush_r+0x8e>
    e302:	1836      	adds	r6, r6, r0
    e304:	1a2d      	subs	r5, r5, r0
    e306:	2d00      	cmp	r5, #0
    e308:	dde9      	ble.n	e2de <__sflush_r+0x8e>
    e30a:	002b      	movs	r3, r5
    e30c:	0032      	movs	r2, r6
    e30e:	69e1      	ldr	r1, [r4, #28]
    e310:	4640      	mov	r0, r8
    e312:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e314:	47b8      	blx	r7
    e316:	2800      	cmp	r0, #0
    e318:	dcf3      	bgt.n	e302 <__sflush_r+0xb2>
    e31a:	2240      	movs	r2, #64	; 0x40
    e31c:	2001      	movs	r0, #1
    e31e:	89a3      	ldrh	r3, [r4, #12]
    e320:	4240      	negs	r0, r0
    e322:	4313      	orrs	r3, r2
    e324:	81a3      	strh	r3, [r4, #12]
    e326:	e7db      	b.n	e2e0 <__sflush_r+0x90>
    e328:	4643      	mov	r3, r8
    e32a:	6819      	ldr	r1, [r3, #0]
    e32c:	291d      	cmp	r1, #29
    e32e:	d8f4      	bhi.n	e31a <__sflush_r+0xca>
    e330:	4b1a      	ldr	r3, [pc, #104]	; (e39c <__sflush_r+0x14c>)
    e332:	2201      	movs	r2, #1
    e334:	40cb      	lsrs	r3, r1
    e336:	439a      	bics	r2, r3
    e338:	d1ef      	bne.n	e31a <__sflush_r+0xca>
    e33a:	89a3      	ldrh	r3, [r4, #12]
    e33c:	4e16      	ldr	r6, [pc, #88]	; (e398 <__sflush_r+0x148>)
    e33e:	6062      	str	r2, [r4, #4]
    e340:	4033      	ands	r3, r6
    e342:	6922      	ldr	r2, [r4, #16]
    e344:	b21b      	sxth	r3, r3
    e346:	81a3      	strh	r3, [r4, #12]
    e348:	6022      	str	r2, [r4, #0]
    e34a:	04db      	lsls	r3, r3, #19
    e34c:	d5b9      	bpl.n	e2c2 <__sflush_r+0x72>
    e34e:	2900      	cmp	r1, #0
    e350:	d1b7      	bne.n	e2c2 <__sflush_r+0x72>
    e352:	6520      	str	r0, [r4, #80]	; 0x50
    e354:	e7b5      	b.n	e2c2 <__sflush_r+0x72>
    e356:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    e358:	2a00      	cmp	r2, #0
    e35a:	dd00      	ble.n	e35e <__sflush_r+0x10e>
    e35c:	e78a      	b.n	e274 <__sflush_r+0x24>
    e35e:	e7be      	b.n	e2de <__sflush_r+0x8e>
    e360:	2200      	movs	r2, #0
    e362:	2301      	movs	r3, #1
    e364:	69e1      	ldr	r1, [r4, #28]
    e366:	4640      	mov	r0, r8
    e368:	47b0      	blx	r6
    e36a:	0002      	movs	r2, r0
    e36c:	1c43      	adds	r3, r0, #1
    e36e:	d002      	beq.n	e376 <__sflush_r+0x126>
    e370:	89a3      	ldrh	r3, [r4, #12]
    e372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e374:	e78b      	b.n	e28e <__sflush_r+0x3e>
    e376:	4643      	mov	r3, r8
    e378:	681b      	ldr	r3, [r3, #0]
    e37a:	2b00      	cmp	r3, #0
    e37c:	d0f8      	beq.n	e370 <__sflush_r+0x120>
    e37e:	2b1d      	cmp	r3, #29
    e380:	d001      	beq.n	e386 <__sflush_r+0x136>
    e382:	2b16      	cmp	r3, #22
    e384:	d103      	bne.n	e38e <__sflush_r+0x13e>
    e386:	4643      	mov	r3, r8
    e388:	2000      	movs	r0, #0
    e38a:	601d      	str	r5, [r3, #0]
    e38c:	e7a8      	b.n	e2e0 <__sflush_r+0x90>
    e38e:	2140      	movs	r1, #64	; 0x40
    e390:	89a3      	ldrh	r3, [r4, #12]
    e392:	430b      	orrs	r3, r1
    e394:	81a3      	strh	r3, [r4, #12]
    e396:	e7a3      	b.n	e2e0 <__sflush_r+0x90>
    e398:	fffff7ff 	.word	0xfffff7ff
    e39c:	20400001 	.word	0x20400001

0000e3a0 <_fflush_r>:
    e3a0:	b570      	push	{r4, r5, r6, lr}
    e3a2:	0005      	movs	r5, r0
    e3a4:	000c      	movs	r4, r1
    e3a6:	2800      	cmp	r0, #0
    e3a8:	d002      	beq.n	e3b0 <_fflush_r+0x10>
    e3aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
    e3ac:	2b00      	cmp	r3, #0
    e3ae:	d016      	beq.n	e3de <_fflush_r+0x3e>
    e3b0:	220c      	movs	r2, #12
    e3b2:	5ea3      	ldrsh	r3, [r4, r2]
    e3b4:	2600      	movs	r6, #0
    e3b6:	2b00      	cmp	r3, #0
    e3b8:	d00f      	beq.n	e3da <_fflush_r+0x3a>
    e3ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
    e3bc:	07d2      	lsls	r2, r2, #31
    e3be:	d401      	bmi.n	e3c4 <_fflush_r+0x24>
    e3c0:	059b      	lsls	r3, r3, #22
    e3c2:	d513      	bpl.n	e3ec <_fflush_r+0x4c>
    e3c4:	0021      	movs	r1, r4
    e3c6:	0028      	movs	r0, r5
    e3c8:	f7ff ff42 	bl	e250 <__sflush_r>
    e3cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    e3ce:	0006      	movs	r6, r0
    e3d0:	07db      	lsls	r3, r3, #31
    e3d2:	d402      	bmi.n	e3da <_fflush_r+0x3a>
    e3d4:	89a3      	ldrh	r3, [r4, #12]
    e3d6:	059b      	lsls	r3, r3, #22
    e3d8:	d504      	bpl.n	e3e4 <_fflush_r+0x44>
    e3da:	0030      	movs	r0, r6
    e3dc:	bd70      	pop	{r4, r5, r6, pc}
    e3de:	f000 f839 	bl	e454 <__sinit>
    e3e2:	e7e5      	b.n	e3b0 <_fflush_r+0x10>
    e3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e3e6:	f000 fba9 	bl	eb3c <__retarget_lock_release_recursive>
    e3ea:	e7f6      	b.n	e3da <_fflush_r+0x3a>
    e3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    e3ee:	f000 fba3 	bl	eb38 <__retarget_lock_acquire_recursive>
    e3f2:	e7e7      	b.n	e3c4 <_fflush_r+0x24>

0000e3f4 <_cleanup_r>:
    e3f4:	b510      	push	{r4, lr}
    e3f6:	4902      	ldr	r1, [pc, #8]	; (e400 <_cleanup_r+0xc>)
    e3f8:	f000 fb36 	bl	ea68 <_fwalk_reent>
    e3fc:	bd10      	pop	{r4, pc}
    e3fe:	46c0      	nop			; (mov r8, r8)
    e400:	00011a41 	.word	0x00011a41

0000e404 <std.isra.0>:
    e404:	2300      	movs	r3, #0
    e406:	b510      	push	{r4, lr}
    e408:	0004      	movs	r4, r0
    e40a:	6003      	str	r3, [r0, #0]
    e40c:	6043      	str	r3, [r0, #4]
    e40e:	6083      	str	r3, [r0, #8]
    e410:	8181      	strh	r1, [r0, #12]
    e412:	6643      	str	r3, [r0, #100]	; 0x64
    e414:	81c2      	strh	r2, [r0, #14]
    e416:	6103      	str	r3, [r0, #16]
    e418:	6143      	str	r3, [r0, #20]
    e41a:	6183      	str	r3, [r0, #24]
    e41c:	2208      	movs	r2, #8
    e41e:	2100      	movs	r1, #0
    e420:	305c      	adds	r0, #92	; 0x5c
    e422:	f7fa fa59 	bl	88d8 <memset>
    e426:	0020      	movs	r0, r4
    e428:	4b06      	ldr	r3, [pc, #24]	; (e444 <std.isra.0+0x40>)
    e42a:	61e4      	str	r4, [r4, #28]
    e42c:	6223      	str	r3, [r4, #32]
    e42e:	4b06      	ldr	r3, [pc, #24]	; (e448 <std.isra.0+0x44>)
    e430:	3058      	adds	r0, #88	; 0x58
    e432:	6263      	str	r3, [r4, #36]	; 0x24
    e434:	4b05      	ldr	r3, [pc, #20]	; (e44c <std.isra.0+0x48>)
    e436:	62a3      	str	r3, [r4, #40]	; 0x28
    e438:	4b05      	ldr	r3, [pc, #20]	; (e450 <std.isra.0+0x4c>)
    e43a:	62e3      	str	r3, [r4, #44]	; 0x2c
    e43c:	f000 fb78 	bl	eb30 <__retarget_lock_init_recursive>
    e440:	bd10      	pop	{r4, pc}
    e442:	46c0      	nop			; (mov r8, r8)
    e444:	00008b5d 	.word	0x00008b5d
    e448:	00008b89 	.word	0x00008b89
    e44c:	00008bc5 	.word	0x00008bc5
    e450:	00008bf1 	.word	0x00008bf1

0000e454 <__sinit>:
    e454:	b570      	push	{r4, r5, r6, lr}
    e456:	0004      	movs	r4, r0
    e458:	4d14      	ldr	r5, [pc, #80]	; (e4ac <__sinit+0x58>)
    e45a:	0028      	movs	r0, r5
    e45c:	f000 fb6c 	bl	eb38 <__retarget_lock_acquire_recursive>
    e460:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e462:	2b00      	cmp	r3, #0
    e464:	d11d      	bne.n	e4a2 <__sinit+0x4e>
    e466:	4a12      	ldr	r2, [pc, #72]	; (e4b0 <__sinit+0x5c>)
    e468:	2104      	movs	r1, #4
    e46a:	63e2      	str	r2, [r4, #60]	; 0x3c
    e46c:	22b8      	movs	r2, #184	; 0xb8
    e46e:	0092      	lsls	r2, r2, #2
    e470:	50a3      	str	r3, [r4, r2]
    e472:	23b9      	movs	r3, #185	; 0xb9
    e474:	2203      	movs	r2, #3
    e476:	009b      	lsls	r3, r3, #2
    e478:	50e2      	str	r2, [r4, r3]
    e47a:	3308      	adds	r3, #8
    e47c:	18e2      	adds	r2, r4, r3
    e47e:	3b04      	subs	r3, #4
    e480:	50e2      	str	r2, [r4, r3]
    e482:	6860      	ldr	r0, [r4, #4]
    e484:	2200      	movs	r2, #0
    e486:	f7ff ffbd 	bl	e404 <std.isra.0>
    e48a:	2201      	movs	r2, #1
    e48c:	2109      	movs	r1, #9
    e48e:	68a0      	ldr	r0, [r4, #8]
    e490:	f7ff ffb8 	bl	e404 <std.isra.0>
    e494:	2202      	movs	r2, #2
    e496:	2112      	movs	r1, #18
    e498:	68e0      	ldr	r0, [r4, #12]
    e49a:	f7ff ffb3 	bl	e404 <std.isra.0>
    e49e:	2301      	movs	r3, #1
    e4a0:	63a3      	str	r3, [r4, #56]	; 0x38
    e4a2:	0028      	movs	r0, r5
    e4a4:	f000 fb4a 	bl	eb3c <__retarget_lock_release_recursive>
    e4a8:	bd70      	pop	{r4, r5, r6, pc}
    e4aa:	46c0      	nop			; (mov r8, r8)
    e4ac:	200018c4 	.word	0x200018c4
    e4b0:	0000e3f5 	.word	0x0000e3f5

0000e4b4 <__sfp_lock_acquire>:
    e4b4:	b510      	push	{r4, lr}
    e4b6:	4802      	ldr	r0, [pc, #8]	; (e4c0 <__sfp_lock_acquire+0xc>)
    e4b8:	f000 fb3e 	bl	eb38 <__retarget_lock_acquire_recursive>
    e4bc:	bd10      	pop	{r4, pc}
    e4be:	46c0      	nop			; (mov r8, r8)
    e4c0:	200018d8 	.word	0x200018d8

0000e4c4 <__sfp_lock_release>:
    e4c4:	b510      	push	{r4, lr}
    e4c6:	4802      	ldr	r0, [pc, #8]	; (e4d0 <__sfp_lock_release+0xc>)
    e4c8:	f000 fb38 	bl	eb3c <__retarget_lock_release_recursive>
    e4cc:	bd10      	pop	{r4, pc}
    e4ce:	46c0      	nop			; (mov r8, r8)
    e4d0:	200018d8 	.word	0x200018d8

0000e4d4 <__libc_fini_array>:
    e4d4:	b570      	push	{r4, r5, r6, lr}
    e4d6:	4b09      	ldr	r3, [pc, #36]	; (e4fc <__libc_fini_array+0x28>)
    e4d8:	4c09      	ldr	r4, [pc, #36]	; (e500 <__libc_fini_array+0x2c>)
    e4da:	1ae4      	subs	r4, r4, r3
    e4dc:	10a4      	asrs	r4, r4, #2
    e4de:	d009      	beq.n	e4f4 <__libc_fini_array+0x20>
    e4e0:	4a08      	ldr	r2, [pc, #32]	; (e504 <__libc_fini_array+0x30>)
    e4e2:	18a5      	adds	r5, r4, r2
    e4e4:	00ad      	lsls	r5, r5, #2
    e4e6:	18ed      	adds	r5, r5, r3
    e4e8:	682b      	ldr	r3, [r5, #0]
    e4ea:	3c01      	subs	r4, #1
    e4ec:	4798      	blx	r3
    e4ee:	3d04      	subs	r5, #4
    e4f0:	2c00      	cmp	r4, #0
    e4f2:	d1f9      	bne.n	e4e8 <__libc_fini_array+0x14>
    e4f4:	f007 fc1c 	bl	15d30 <_fini>
    e4f8:	bd70      	pop	{r4, r5, r6, pc}
    e4fa:	46c0      	nop			; (mov r8, r8)
    e4fc:	00015d3c 	.word	0x00015d3c
    e500:	00015d40 	.word	0x00015d40
    e504:	3fffffff 	.word	0x3fffffff

0000e508 <_malloc_trim_r>:
    e508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e50a:	000c      	movs	r4, r1
    e50c:	0006      	movs	r6, r0
    e50e:	f000 ff2f 	bl	f370 <__malloc_lock>
    e512:	4f20      	ldr	r7, [pc, #128]	; (e594 <_malloc_trim_r+0x8c>)
    e514:	68bb      	ldr	r3, [r7, #8]
    e516:	685d      	ldr	r5, [r3, #4]
    e518:	2303      	movs	r3, #3
    e51a:	439d      	bics	r5, r3
    e51c:	4b1e      	ldr	r3, [pc, #120]	; (e598 <_malloc_trim_r+0x90>)
    e51e:	1b2c      	subs	r4, r5, r4
    e520:	469c      	mov	ip, r3
    e522:	4464      	add	r4, ip
    e524:	0b24      	lsrs	r4, r4, #12
    e526:	4b1d      	ldr	r3, [pc, #116]	; (e59c <_malloc_trim_r+0x94>)
    e528:	3c01      	subs	r4, #1
    e52a:	0324      	lsls	r4, r4, #12
    e52c:	429c      	cmp	r4, r3
    e52e:	dd07      	ble.n	e540 <_malloc_trim_r+0x38>
    e530:	2100      	movs	r1, #0
    e532:	0030      	movs	r0, r6
    e534:	f001 fdac 	bl	10090 <_sbrk_r>
    e538:	68bb      	ldr	r3, [r7, #8]
    e53a:	195b      	adds	r3, r3, r5
    e53c:	4298      	cmp	r0, r3
    e53e:	d004      	beq.n	e54a <_malloc_trim_r+0x42>
    e540:	0030      	movs	r0, r6
    e542:	f000 ff1d 	bl	f380 <__malloc_unlock>
    e546:	2000      	movs	r0, #0
    e548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e54a:	4261      	negs	r1, r4
    e54c:	0030      	movs	r0, r6
    e54e:	f001 fd9f 	bl	10090 <_sbrk_r>
    e552:	1c43      	adds	r3, r0, #1
    e554:	d00d      	beq.n	e572 <_malloc_trim_r+0x6a>
    e556:	2201      	movs	r2, #1
    e558:	68bb      	ldr	r3, [r7, #8]
    e55a:	1b2d      	subs	r5, r5, r4
    e55c:	4315      	orrs	r5, r2
    e55e:	605d      	str	r5, [r3, #4]
    e560:	4b0f      	ldr	r3, [pc, #60]	; (e5a0 <_malloc_trim_r+0x98>)
    e562:	0030      	movs	r0, r6
    e564:	681a      	ldr	r2, [r3, #0]
    e566:	1b14      	subs	r4, r2, r4
    e568:	601c      	str	r4, [r3, #0]
    e56a:	f000 ff09 	bl	f380 <__malloc_unlock>
    e56e:	2001      	movs	r0, #1
    e570:	e7ea      	b.n	e548 <_malloc_trim_r+0x40>
    e572:	2100      	movs	r1, #0
    e574:	0030      	movs	r0, r6
    e576:	f001 fd8b 	bl	10090 <_sbrk_r>
    e57a:	68ba      	ldr	r2, [r7, #8]
    e57c:	1a83      	subs	r3, r0, r2
    e57e:	2b0f      	cmp	r3, #15
    e580:	ddde      	ble.n	e540 <_malloc_trim_r+0x38>
    e582:	4908      	ldr	r1, [pc, #32]	; (e5a4 <_malloc_trim_r+0x9c>)
    e584:	6809      	ldr	r1, [r1, #0]
    e586:	1a40      	subs	r0, r0, r1
    e588:	4905      	ldr	r1, [pc, #20]	; (e5a0 <_malloc_trim_r+0x98>)
    e58a:	6008      	str	r0, [r1, #0]
    e58c:	2101      	movs	r1, #1
    e58e:	430b      	orrs	r3, r1
    e590:	6053      	str	r3, [r2, #4]
    e592:	e7d5      	b.n	e540 <_malloc_trim_r+0x38>
    e594:	20000620 	.word	0x20000620
    e598:	00000fef 	.word	0x00000fef
    e59c:	00000fff 	.word	0x00000fff
    e5a0:	20000dac 	.word	0x20000dac
    e5a4:	20000a28 	.word	0x20000a28

0000e5a8 <_free_r>:
    e5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5aa:	0004      	movs	r4, r0
    e5ac:	1e0d      	subs	r5, r1, #0
    e5ae:	d03c      	beq.n	e62a <_free_r+0x82>
    e5b0:	f000 fede 	bl	f370 <__malloc_lock>
    e5b4:	0029      	movs	r1, r5
    e5b6:	3908      	subs	r1, #8
    e5b8:	6848      	ldr	r0, [r1, #4]
    e5ba:	2301      	movs	r3, #1
    e5bc:	0005      	movs	r5, r0
    e5be:	2603      	movs	r6, #3
    e5c0:	439d      	bics	r5, r3
    e5c2:	194a      	adds	r2, r1, r5
    e5c4:	469c      	mov	ip, r3
    e5c6:	4f61      	ldr	r7, [pc, #388]	; (e74c <_free_r+0x1a4>)
    e5c8:	6853      	ldr	r3, [r2, #4]
    e5ca:	43b3      	bics	r3, r6
    e5cc:	68be      	ldr	r6, [r7, #8]
    e5ce:	42b2      	cmp	r2, r6
    e5d0:	d056      	beq.n	e680 <_free_r+0xd8>
    e5d2:	4666      	mov	r6, ip
    e5d4:	6053      	str	r3, [r2, #4]
    e5d6:	4206      	tst	r6, r0
    e5d8:	d10a      	bne.n	e5f0 <_free_r+0x48>
    e5da:	003e      	movs	r6, r7
    e5dc:	6808      	ldr	r0, [r1, #0]
    e5de:	3608      	adds	r6, #8
    e5e0:	1a09      	subs	r1, r1, r0
    e5e2:	182d      	adds	r5, r5, r0
    e5e4:	6888      	ldr	r0, [r1, #8]
    e5e6:	42b0      	cmp	r0, r6
    e5e8:	d065      	beq.n	e6b6 <_free_r+0x10e>
    e5ea:	68ce      	ldr	r6, [r1, #12]
    e5ec:	60c6      	str	r6, [r0, #12]
    e5ee:	60b0      	str	r0, [r6, #8]
    e5f0:	2001      	movs	r0, #1
    e5f2:	18d6      	adds	r6, r2, r3
    e5f4:	6876      	ldr	r6, [r6, #4]
    e5f6:	4206      	tst	r6, r0
    e5f8:	d033      	beq.n	e662 <_free_r+0xba>
    e5fa:	4b55      	ldr	r3, [pc, #340]	; (e750 <_free_r+0x1a8>)
    e5fc:	4328      	orrs	r0, r5
    e5fe:	6048      	str	r0, [r1, #4]
    e600:	514d      	str	r5, [r1, r5]
    e602:	429d      	cmp	r5, r3
    e604:	d812      	bhi.n	e62c <_free_r+0x84>
    e606:	08ed      	lsrs	r5, r5, #3
    e608:	3bff      	subs	r3, #255	; 0xff
    e60a:	10aa      	asrs	r2, r5, #2
    e60c:	3bff      	subs	r3, #255	; 0xff
    e60e:	4093      	lsls	r3, r2
    e610:	687a      	ldr	r2, [r7, #4]
    e612:	00ed      	lsls	r5, r5, #3
    e614:	4313      	orrs	r3, r2
    e616:	607b      	str	r3, [r7, #4]
    e618:	19ef      	adds	r7, r5, r7
    e61a:	68bb      	ldr	r3, [r7, #8]
    e61c:	60cf      	str	r7, [r1, #12]
    e61e:	608b      	str	r3, [r1, #8]
    e620:	60b9      	str	r1, [r7, #8]
    e622:	60d9      	str	r1, [r3, #12]
    e624:	0020      	movs	r0, r4
    e626:	f000 feab 	bl	f380 <__malloc_unlock>
    e62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e62c:	0a68      	lsrs	r0, r5, #9
    e62e:	2804      	cmp	r0, #4
    e630:	d850      	bhi.n	e6d4 <_free_r+0x12c>
    e632:	09a8      	lsrs	r0, r5, #6
    e634:	0002      	movs	r2, r0
    e636:	3039      	adds	r0, #57	; 0x39
    e638:	3238      	adds	r2, #56	; 0x38
    e63a:	00c0      	lsls	r0, r0, #3
    e63c:	1838      	adds	r0, r7, r0
    e63e:	3808      	subs	r0, #8
    e640:	6883      	ldr	r3, [r0, #8]
    e642:	2603      	movs	r6, #3
    e644:	4298      	cmp	r0, r3
    e646:	d04c      	beq.n	e6e2 <_free_r+0x13a>
    e648:	685a      	ldr	r2, [r3, #4]
    e64a:	43b2      	bics	r2, r6
    e64c:	4295      	cmp	r5, r2
    e64e:	d230      	bcs.n	e6b2 <_free_r+0x10a>
    e650:	689b      	ldr	r3, [r3, #8]
    e652:	4298      	cmp	r0, r3
    e654:	d1f8      	bne.n	e648 <_free_r+0xa0>
    e656:	68c3      	ldr	r3, [r0, #12]
    e658:	60cb      	str	r3, [r1, #12]
    e65a:	6088      	str	r0, [r1, #8]
    e65c:	6099      	str	r1, [r3, #8]
    e65e:	60c1      	str	r1, [r0, #12]
    e660:	e7e0      	b.n	e624 <_free_r+0x7c>
    e662:	18ed      	adds	r5, r5, r3
    e664:	4e3b      	ldr	r6, [pc, #236]	; (e754 <_free_r+0x1ac>)
    e666:	6893      	ldr	r3, [r2, #8]
    e668:	42b3      	cmp	r3, r6
    e66a:	d042      	beq.n	e6f2 <_free_r+0x14a>
    e66c:	68d2      	ldr	r2, [r2, #12]
    e66e:	4328      	orrs	r0, r5
    e670:	60da      	str	r2, [r3, #12]
    e672:	6093      	str	r3, [r2, #8]
    e674:	4b36      	ldr	r3, [pc, #216]	; (e750 <_free_r+0x1a8>)
    e676:	6048      	str	r0, [r1, #4]
    e678:	514d      	str	r5, [r1, r5]
    e67a:	429d      	cmp	r5, r3
    e67c:	d8d6      	bhi.n	e62c <_free_r+0x84>
    e67e:	e7c2      	b.n	e606 <_free_r+0x5e>
    e680:	4662      	mov	r2, ip
    e682:	18eb      	adds	r3, r5, r3
    e684:	4202      	tst	r2, r0
    e686:	d106      	bne.n	e696 <_free_r+0xee>
    e688:	680a      	ldr	r2, [r1, #0]
    e68a:	1a89      	subs	r1, r1, r2
    e68c:	6888      	ldr	r0, [r1, #8]
    e68e:	189b      	adds	r3, r3, r2
    e690:	68ca      	ldr	r2, [r1, #12]
    e692:	60c2      	str	r2, [r0, #12]
    e694:	6090      	str	r0, [r2, #8]
    e696:	2201      	movs	r2, #1
    e698:	431a      	orrs	r2, r3
    e69a:	604a      	str	r2, [r1, #4]
    e69c:	4a2e      	ldr	r2, [pc, #184]	; (e758 <_free_r+0x1b0>)
    e69e:	60b9      	str	r1, [r7, #8]
    e6a0:	6812      	ldr	r2, [r2, #0]
    e6a2:	4293      	cmp	r3, r2
    e6a4:	d3be      	bcc.n	e624 <_free_r+0x7c>
    e6a6:	4b2d      	ldr	r3, [pc, #180]	; (e75c <_free_r+0x1b4>)
    e6a8:	0020      	movs	r0, r4
    e6aa:	6819      	ldr	r1, [r3, #0]
    e6ac:	f7ff ff2c 	bl	e508 <_malloc_trim_r>
    e6b0:	e7b8      	b.n	e624 <_free_r+0x7c>
    e6b2:	0018      	movs	r0, r3
    e6b4:	e7cf      	b.n	e656 <_free_r+0xae>
    e6b6:	4666      	mov	r6, ip
    e6b8:	18d0      	adds	r0, r2, r3
    e6ba:	6840      	ldr	r0, [r0, #4]
    e6bc:	4230      	tst	r0, r6
    e6be:	d13f      	bne.n	e740 <_free_r+0x198>
    e6c0:	6890      	ldr	r0, [r2, #8]
    e6c2:	195d      	adds	r5, r3, r5
    e6c4:	68d3      	ldr	r3, [r2, #12]
    e6c6:	60c3      	str	r3, [r0, #12]
    e6c8:	6098      	str	r0, [r3, #8]
    e6ca:	4663      	mov	r3, ip
    e6cc:	432b      	orrs	r3, r5
    e6ce:	604b      	str	r3, [r1, #4]
    e6d0:	514d      	str	r5, [r1, r5]
    e6d2:	e7a7      	b.n	e624 <_free_r+0x7c>
    e6d4:	2814      	cmp	r0, #20
    e6d6:	d814      	bhi.n	e702 <_free_r+0x15a>
    e6d8:	0002      	movs	r2, r0
    e6da:	305c      	adds	r0, #92	; 0x5c
    e6dc:	325b      	adds	r2, #91	; 0x5b
    e6de:	00c0      	lsls	r0, r0, #3
    e6e0:	e7ac      	b.n	e63c <_free_r+0x94>
    e6e2:	2301      	movs	r3, #1
    e6e4:	1092      	asrs	r2, r2, #2
    e6e6:	4093      	lsls	r3, r2
    e6e8:	687a      	ldr	r2, [r7, #4]
    e6ea:	4313      	orrs	r3, r2
    e6ec:	607b      	str	r3, [r7, #4]
    e6ee:	0003      	movs	r3, r0
    e6f0:	e7b2      	b.n	e658 <_free_r+0xb0>
    e6f2:	4328      	orrs	r0, r5
    e6f4:	60d9      	str	r1, [r3, #12]
    e6f6:	6099      	str	r1, [r3, #8]
    e6f8:	60cb      	str	r3, [r1, #12]
    e6fa:	608b      	str	r3, [r1, #8]
    e6fc:	6048      	str	r0, [r1, #4]
    e6fe:	514d      	str	r5, [r1, r5]
    e700:	e790      	b.n	e624 <_free_r+0x7c>
    e702:	2854      	cmp	r0, #84	; 0x54
    e704:	d805      	bhi.n	e712 <_free_r+0x16a>
    e706:	0b28      	lsrs	r0, r5, #12
    e708:	0002      	movs	r2, r0
    e70a:	306f      	adds	r0, #111	; 0x6f
    e70c:	326e      	adds	r2, #110	; 0x6e
    e70e:	00c0      	lsls	r0, r0, #3
    e710:	e794      	b.n	e63c <_free_r+0x94>
    e712:	22aa      	movs	r2, #170	; 0xaa
    e714:	0052      	lsls	r2, r2, #1
    e716:	4290      	cmp	r0, r2
    e718:	d805      	bhi.n	e726 <_free_r+0x17e>
    e71a:	0be8      	lsrs	r0, r5, #15
    e71c:	0002      	movs	r2, r0
    e71e:	3078      	adds	r0, #120	; 0x78
    e720:	3277      	adds	r2, #119	; 0x77
    e722:	00c0      	lsls	r0, r0, #3
    e724:	e78a      	b.n	e63c <_free_r+0x94>
    e726:	4a0e      	ldr	r2, [pc, #56]	; (e760 <_free_r+0x1b8>)
    e728:	4290      	cmp	r0, r2
    e72a:	d805      	bhi.n	e738 <_free_r+0x190>
    e72c:	0ca8      	lsrs	r0, r5, #18
    e72e:	0002      	movs	r2, r0
    e730:	307d      	adds	r0, #125	; 0x7d
    e732:	327c      	adds	r2, #124	; 0x7c
    e734:	00c0      	lsls	r0, r0, #3
    e736:	e781      	b.n	e63c <_free_r+0x94>
    e738:	20fe      	movs	r0, #254	; 0xfe
    e73a:	227e      	movs	r2, #126	; 0x7e
    e73c:	0080      	lsls	r0, r0, #2
    e73e:	e77d      	b.n	e63c <_free_r+0x94>
    e740:	4663      	mov	r3, ip
    e742:	432b      	orrs	r3, r5
    e744:	604b      	str	r3, [r1, #4]
    e746:	6015      	str	r5, [r2, #0]
    e748:	e76c      	b.n	e624 <_free_r+0x7c>
    e74a:	46c0      	nop			; (mov r8, r8)
    e74c:	20000620 	.word	0x20000620
    e750:	000001ff 	.word	0x000001ff
    e754:	20000628 	.word	0x20000628
    e758:	20000a2c 	.word	0x20000a2c
    e75c:	20000ddc 	.word	0x20000ddc
    e760:	00000554 	.word	0x00000554

0000e764 <__sfvwrite_r>:
    e764:	b5f0      	push	{r4, r5, r6, r7, lr}
    e766:	464e      	mov	r6, r9
    e768:	46de      	mov	lr, fp
    e76a:	4657      	mov	r7, sl
    e76c:	4645      	mov	r5, r8
    e76e:	b5e0      	push	{r5, r6, r7, lr}
    e770:	6893      	ldr	r3, [r2, #8]
    e772:	b083      	sub	sp, #12
    e774:	9000      	str	r0, [sp, #0]
    e776:	000c      	movs	r4, r1
    e778:	0016      	movs	r6, r2
    e77a:	2b00      	cmp	r3, #0
    e77c:	d025      	beq.n	e7ca <__sfvwrite_r+0x66>
    e77e:	898b      	ldrh	r3, [r1, #12]
    e780:	071a      	lsls	r2, r3, #28
    e782:	d52a      	bpl.n	e7da <__sfvwrite_r+0x76>
    e784:	690a      	ldr	r2, [r1, #16]
    e786:	2a00      	cmp	r2, #0
    e788:	d027      	beq.n	e7da <__sfvwrite_r+0x76>
    e78a:	6832      	ldr	r2, [r6, #0]
    e78c:	4693      	mov	fp, r2
    e78e:	079a      	lsls	r2, r3, #30
    e790:	d52f      	bpl.n	e7f2 <__sfvwrite_r+0x8e>
    e792:	4bb2      	ldr	r3, [pc, #712]	; (ea5c <__sfvwrite_r+0x2f8>)
    e794:	2700      	movs	r7, #0
    e796:	2500      	movs	r5, #0
    e798:	4698      	mov	r8, r3
    e79a:	46b1      	mov	r9, r6
    e79c:	2d00      	cmp	r5, #0
    e79e:	d100      	bne.n	e7a2 <__sfvwrite_r+0x3e>
    e7a0:	e072      	b.n	e888 <__sfvwrite_r+0x124>
    e7a2:	002b      	movs	r3, r5
    e7a4:	4545      	cmp	r5, r8
    e7a6:	d900      	bls.n	e7aa <__sfvwrite_r+0x46>
    e7a8:	4bac      	ldr	r3, [pc, #688]	; (ea5c <__sfvwrite_r+0x2f8>)
    e7aa:	003a      	movs	r2, r7
    e7ac:	69e1      	ldr	r1, [r4, #28]
    e7ae:	9800      	ldr	r0, [sp, #0]
    e7b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e7b2:	47b0      	blx	r6
    e7b4:	2800      	cmp	r0, #0
    e7b6:	dc00      	bgt.n	e7ba <__sfvwrite_r+0x56>
    e7b8:	e073      	b.n	e8a2 <__sfvwrite_r+0x13e>
    e7ba:	464b      	mov	r3, r9
    e7bc:	689b      	ldr	r3, [r3, #8]
    e7be:	183f      	adds	r7, r7, r0
    e7c0:	1a2d      	subs	r5, r5, r0
    e7c2:	1a18      	subs	r0, r3, r0
    e7c4:	464b      	mov	r3, r9
    e7c6:	6098      	str	r0, [r3, #8]
    e7c8:	d1e8      	bne.n	e79c <__sfvwrite_r+0x38>
    e7ca:	2000      	movs	r0, #0
    e7cc:	b003      	add	sp, #12
    e7ce:	bc3c      	pop	{r2, r3, r4, r5}
    e7d0:	4690      	mov	r8, r2
    e7d2:	4699      	mov	r9, r3
    e7d4:	46a2      	mov	sl, r4
    e7d6:	46ab      	mov	fp, r5
    e7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7da:	0021      	movs	r1, r4
    e7dc:	9800      	ldr	r0, [sp, #0]
    e7de:	f7fe fc39 	bl	d054 <__swsetup_r>
    e7e2:	2800      	cmp	r0, #0
    e7e4:	d000      	beq.n	e7e8 <__sfvwrite_r+0x84>
    e7e6:	e130      	b.n	ea4a <__sfvwrite_r+0x2e6>
    e7e8:	6832      	ldr	r2, [r6, #0]
    e7ea:	89a3      	ldrh	r3, [r4, #12]
    e7ec:	4693      	mov	fp, r2
    e7ee:	079a      	lsls	r2, r3, #30
    e7f0:	d4cf      	bmi.n	e792 <__sfvwrite_r+0x2e>
    e7f2:	07da      	lsls	r2, r3, #31
    e7f4:	d55d      	bpl.n	e8b2 <__sfvwrite_r+0x14e>
    e7f6:	2300      	movs	r3, #0
    e7f8:	2000      	movs	r0, #0
    e7fa:	469a      	mov	sl, r3
    e7fc:	2700      	movs	r7, #0
    e7fe:	001d      	movs	r5, r3
    e800:	46b1      	mov	r9, r6
    e802:	e029      	b.n	e858 <__sfvwrite_r+0xf4>
    e804:	2800      	cmp	r0, #0
    e806:	d033      	beq.n	e870 <__sfvwrite_r+0x10c>
    e808:	46a8      	mov	r8, r5
    e80a:	42bd      	cmp	r5, r7
    e80c:	d900      	bls.n	e810 <__sfvwrite_r+0xac>
    e80e:	46b8      	mov	r8, r7
    e810:	6820      	ldr	r0, [r4, #0]
    e812:	6922      	ldr	r2, [r4, #16]
    e814:	4646      	mov	r6, r8
    e816:	6963      	ldr	r3, [r4, #20]
    e818:	4290      	cmp	r0, r2
    e81a:	d907      	bls.n	e82c <__sfvwrite_r+0xc8>
    e81c:	68a2      	ldr	r2, [r4, #8]
    e81e:	4694      	mov	ip, r2
    e820:	449c      	add	ip, r3
    e822:	4662      	mov	r2, ip
    e824:	9201      	str	r2, [sp, #4]
    e826:	45e0      	cmp	r8, ip
    e828:	dd00      	ble.n	e82c <__sfvwrite_r+0xc8>
    e82a:	e0e9      	b.n	ea00 <__sfvwrite_r+0x29c>
    e82c:	4598      	cmp	r8, r3
    e82e:	da00      	bge.n	e832 <__sfvwrite_r+0xce>
    e830:	e08f      	b.n	e952 <__sfvwrite_r+0x1ee>
    e832:	6a66      	ldr	r6, [r4, #36]	; 0x24
    e834:	4652      	mov	r2, sl
    e836:	69e1      	ldr	r1, [r4, #28]
    e838:	9800      	ldr	r0, [sp, #0]
    e83a:	47b0      	blx	r6
    e83c:	1e06      	subs	r6, r0, #0
    e83e:	dd30      	ble.n	e8a2 <__sfvwrite_r+0x13e>
    e840:	1bad      	subs	r5, r5, r6
    e842:	2001      	movs	r0, #1
    e844:	2d00      	cmp	r5, #0
    e846:	d026      	beq.n	e896 <__sfvwrite_r+0x132>
    e848:	464b      	mov	r3, r9
    e84a:	689b      	ldr	r3, [r3, #8]
    e84c:	44b2      	add	sl, r6
    e84e:	1bbf      	subs	r7, r7, r6
    e850:	1b9e      	subs	r6, r3, r6
    e852:	464b      	mov	r3, r9
    e854:	609e      	str	r6, [r3, #8]
    e856:	d0b8      	beq.n	e7ca <__sfvwrite_r+0x66>
    e858:	2f00      	cmp	r7, #0
    e85a:	d1d3      	bne.n	e804 <__sfvwrite_r+0xa0>
    e85c:	465b      	mov	r3, fp
    e85e:	681b      	ldr	r3, [r3, #0]
    e860:	469a      	mov	sl, r3
    e862:	465b      	mov	r3, fp
    e864:	685f      	ldr	r7, [r3, #4]
    e866:	2308      	movs	r3, #8
    e868:	469c      	mov	ip, r3
    e86a:	44e3      	add	fp, ip
    e86c:	2f00      	cmp	r7, #0
    e86e:	d0f5      	beq.n	e85c <__sfvwrite_r+0xf8>
    e870:	003a      	movs	r2, r7
    e872:	210a      	movs	r1, #10
    e874:	4650      	mov	r0, sl
    e876:	f000 fceb 	bl	f250 <memchr>
    e87a:	2800      	cmp	r0, #0
    e87c:	d100      	bne.n	e880 <__sfvwrite_r+0x11c>
    e87e:	e0e2      	b.n	ea46 <__sfvwrite_r+0x2e2>
    e880:	4653      	mov	r3, sl
    e882:	3001      	adds	r0, #1
    e884:	1ac5      	subs	r5, r0, r3
    e886:	e7bf      	b.n	e808 <__sfvwrite_r+0xa4>
    e888:	465b      	mov	r3, fp
    e88a:	681f      	ldr	r7, [r3, #0]
    e88c:	685d      	ldr	r5, [r3, #4]
    e88e:	2308      	movs	r3, #8
    e890:	469c      	mov	ip, r3
    e892:	44e3      	add	fp, ip
    e894:	e782      	b.n	e79c <__sfvwrite_r+0x38>
    e896:	0021      	movs	r1, r4
    e898:	9800      	ldr	r0, [sp, #0]
    e89a:	f7ff fd81 	bl	e3a0 <_fflush_r>
    e89e:	2800      	cmp	r0, #0
    e8a0:	d0d2      	beq.n	e848 <__sfvwrite_r+0xe4>
    e8a2:	220c      	movs	r2, #12
    e8a4:	5ea3      	ldrsh	r3, [r4, r2]
    e8a6:	2240      	movs	r2, #64	; 0x40
    e8a8:	2001      	movs	r0, #1
    e8aa:	4313      	orrs	r3, r2
    e8ac:	81a3      	strh	r3, [r4, #12]
    e8ae:	4240      	negs	r0, r0
    e8b0:	e78c      	b.n	e7cc <__sfvwrite_r+0x68>
    e8b2:	2200      	movs	r2, #0
    e8b4:	4691      	mov	r9, r2
    e8b6:	464d      	mov	r5, r9
    e8b8:	2d00      	cmp	r5, #0
    e8ba:	d023      	beq.n	e904 <__sfvwrite_r+0x1a0>
    e8bc:	68a2      	ldr	r2, [r4, #8]
    e8be:	4690      	mov	r8, r2
    e8c0:	2280      	movs	r2, #128	; 0x80
    e8c2:	0092      	lsls	r2, r2, #2
    e8c4:	4213      	tst	r3, r2
    e8c6:	d026      	beq.n	e916 <__sfvwrite_r+0x1b2>
    e8c8:	46c2      	mov	sl, r8
    e8ca:	4545      	cmp	r5, r8
    e8cc:	d34d      	bcc.n	e96a <__sfvwrite_r+0x206>
    e8ce:	2290      	movs	r2, #144	; 0x90
    e8d0:	00d2      	lsls	r2, r2, #3
    e8d2:	4213      	tst	r3, r2
    e8d4:	d14e      	bne.n	e974 <__sfvwrite_r+0x210>
    e8d6:	002f      	movs	r7, r5
    e8d8:	6820      	ldr	r0, [r4, #0]
    e8da:	4652      	mov	r2, sl
    e8dc:	4649      	mov	r1, r9
    e8de:	f000 fcf7 	bl	f2d0 <memmove>
    e8e2:	4642      	mov	r2, r8
    e8e4:	68a3      	ldr	r3, [r4, #8]
    e8e6:	1a98      	subs	r0, r3, r2
    e8e8:	6823      	ldr	r3, [r4, #0]
    e8ea:	60a0      	str	r0, [r4, #8]
    e8ec:	4453      	add	r3, sl
    e8ee:	6023      	str	r3, [r4, #0]
    e8f0:	68b3      	ldr	r3, [r6, #8]
    e8f2:	44b9      	add	r9, r7
    e8f4:	1bed      	subs	r5, r5, r7
    e8f6:	1bdf      	subs	r7, r3, r7
    e8f8:	60b7      	str	r7, [r6, #8]
    e8fa:	d100      	bne.n	e8fe <__sfvwrite_r+0x19a>
    e8fc:	e765      	b.n	e7ca <__sfvwrite_r+0x66>
    e8fe:	89a3      	ldrh	r3, [r4, #12]
    e900:	2d00      	cmp	r5, #0
    e902:	d1db      	bne.n	e8bc <__sfvwrite_r+0x158>
    e904:	465a      	mov	r2, fp
    e906:	6812      	ldr	r2, [r2, #0]
    e908:	4691      	mov	r9, r2
    e90a:	465a      	mov	r2, fp
    e90c:	6855      	ldr	r5, [r2, #4]
    e90e:	2208      	movs	r2, #8
    e910:	4694      	mov	ip, r2
    e912:	44e3      	add	fp, ip
    e914:	e7d0      	b.n	e8b8 <__sfvwrite_r+0x154>
    e916:	6820      	ldr	r0, [r4, #0]
    e918:	6923      	ldr	r3, [r4, #16]
    e91a:	4298      	cmp	r0, r3
    e91c:	d802      	bhi.n	e924 <__sfvwrite_r+0x1c0>
    e91e:	6967      	ldr	r7, [r4, #20]
    e920:	42bd      	cmp	r5, r7
    e922:	d259      	bcs.n	e9d8 <__sfvwrite_r+0x274>
    e924:	4647      	mov	r7, r8
    e926:	42af      	cmp	r7, r5
    e928:	d900      	bls.n	e92c <__sfvwrite_r+0x1c8>
    e92a:	002f      	movs	r7, r5
    e92c:	003a      	movs	r2, r7
    e92e:	4649      	mov	r1, r9
    e930:	f000 fcce 	bl	f2d0 <memmove>
    e934:	68a3      	ldr	r3, [r4, #8]
    e936:	6822      	ldr	r2, [r4, #0]
    e938:	1bdb      	subs	r3, r3, r7
    e93a:	19d2      	adds	r2, r2, r7
    e93c:	60a3      	str	r3, [r4, #8]
    e93e:	6022      	str	r2, [r4, #0]
    e940:	2b00      	cmp	r3, #0
    e942:	d1d5      	bne.n	e8f0 <__sfvwrite_r+0x18c>
    e944:	0021      	movs	r1, r4
    e946:	9800      	ldr	r0, [sp, #0]
    e948:	f7ff fd2a 	bl	e3a0 <_fflush_r>
    e94c:	2800      	cmp	r0, #0
    e94e:	d0cf      	beq.n	e8f0 <__sfvwrite_r+0x18c>
    e950:	e7a7      	b.n	e8a2 <__sfvwrite_r+0x13e>
    e952:	4642      	mov	r2, r8
    e954:	4651      	mov	r1, sl
    e956:	f000 fcbb 	bl	f2d0 <memmove>
    e95a:	4642      	mov	r2, r8
    e95c:	68a3      	ldr	r3, [r4, #8]
    e95e:	1a9b      	subs	r3, r3, r2
    e960:	60a3      	str	r3, [r4, #8]
    e962:	6823      	ldr	r3, [r4, #0]
    e964:	4443      	add	r3, r8
    e966:	6023      	str	r3, [r4, #0]
    e968:	e76a      	b.n	e840 <__sfvwrite_r+0xdc>
    e96a:	46a8      	mov	r8, r5
    e96c:	6820      	ldr	r0, [r4, #0]
    e96e:	002f      	movs	r7, r5
    e970:	46aa      	mov	sl, r5
    e972:	e7b2      	b.n	e8da <__sfvwrite_r+0x176>
    e974:	6921      	ldr	r1, [r4, #16]
    e976:	6822      	ldr	r2, [r4, #0]
    e978:	1a52      	subs	r2, r2, r1
    e97a:	4692      	mov	sl, r2
    e97c:	6962      	ldr	r2, [r4, #20]
    e97e:	0057      	lsls	r7, r2, #1
    e980:	18bf      	adds	r7, r7, r2
    e982:	0ffa      	lsrs	r2, r7, #31
    e984:	19d7      	adds	r7, r2, r7
    e986:	4652      	mov	r2, sl
    e988:	1c50      	adds	r0, r2, #1
    e98a:	107f      	asrs	r7, r7, #1
    e98c:	1940      	adds	r0, r0, r5
    e98e:	003a      	movs	r2, r7
    e990:	42b8      	cmp	r0, r7
    e992:	d901      	bls.n	e998 <__sfvwrite_r+0x234>
    e994:	0007      	movs	r7, r0
    e996:	0002      	movs	r2, r0
    e998:	055b      	lsls	r3, r3, #21
    e99a:	d542      	bpl.n	ea22 <__sfvwrite_r+0x2be>
    e99c:	0011      	movs	r1, r2
    e99e:	9800      	ldr	r0, [sp, #0]
    e9a0:	f000 f95a 	bl	ec58 <_malloc_r>
    e9a4:	4680      	mov	r8, r0
    e9a6:	1e03      	subs	r3, r0, #0
    e9a8:	d052      	beq.n	ea50 <__sfvwrite_r+0x2ec>
    e9aa:	4652      	mov	r2, sl
    e9ac:	6921      	ldr	r1, [r4, #16]
    e9ae:	f7f9 ff51 	bl	8854 <memcpy>
    e9b2:	89a3      	ldrh	r3, [r4, #12]
    e9b4:	4a2a      	ldr	r2, [pc, #168]	; (ea60 <__sfvwrite_r+0x2fc>)
    e9b6:	4013      	ands	r3, r2
    e9b8:	2280      	movs	r2, #128	; 0x80
    e9ba:	4313      	orrs	r3, r2
    e9bc:	81a3      	strh	r3, [r4, #12]
    e9be:	4643      	mov	r3, r8
    e9c0:	4640      	mov	r0, r8
    e9c2:	6123      	str	r3, [r4, #16]
    e9c4:	4653      	mov	r3, sl
    e9c6:	4450      	add	r0, sl
    e9c8:	6167      	str	r7, [r4, #20]
    e9ca:	1aff      	subs	r7, r7, r3
    e9cc:	60a7      	str	r7, [r4, #8]
    e9ce:	6020      	str	r0, [r4, #0]
    e9d0:	46a8      	mov	r8, r5
    e9d2:	002f      	movs	r7, r5
    e9d4:	46aa      	mov	sl, r5
    e9d6:	e780      	b.n	e8da <__sfvwrite_r+0x176>
    e9d8:	4b22      	ldr	r3, [pc, #136]	; (ea64 <__sfvwrite_r+0x300>)
    e9da:	0028      	movs	r0, r5
    e9dc:	429d      	cmp	r5, r3
    e9de:	d900      	bls.n	e9e2 <__sfvwrite_r+0x27e>
    e9e0:	0018      	movs	r0, r3
    e9e2:	0039      	movs	r1, r7
    e9e4:	f7f7 fd4c 	bl	6480 <__divsi3>
    e9e8:	003b      	movs	r3, r7
    e9ea:	464a      	mov	r2, r9
    e9ec:	4343      	muls	r3, r0
    e9ee:	69e1      	ldr	r1, [r4, #28]
    e9f0:	9800      	ldr	r0, [sp, #0]
    e9f2:	6a67      	ldr	r7, [r4, #36]	; 0x24
    e9f4:	47b8      	blx	r7
    e9f6:	2800      	cmp	r0, #0
    e9f8:	dc00      	bgt.n	e9fc <__sfvwrite_r+0x298>
    e9fa:	e752      	b.n	e8a2 <__sfvwrite_r+0x13e>
    e9fc:	0007      	movs	r7, r0
    e9fe:	e777      	b.n	e8f0 <__sfvwrite_r+0x18c>
    ea00:	4666      	mov	r6, ip
    ea02:	4651      	mov	r1, sl
    ea04:	f000 fc64 	bl	f2d0 <memmove>
    ea08:	46b4      	mov	ip, r6
    ea0a:	6823      	ldr	r3, [r4, #0]
    ea0c:	0021      	movs	r1, r4
    ea0e:	4463      	add	r3, ip
    ea10:	6023      	str	r3, [r4, #0]
    ea12:	9800      	ldr	r0, [sp, #0]
    ea14:	f7ff fcc4 	bl	e3a0 <_fflush_r>
    ea18:	2800      	cmp	r0, #0
    ea1a:	d000      	beq.n	ea1e <__sfvwrite_r+0x2ba>
    ea1c:	e741      	b.n	e8a2 <__sfvwrite_r+0x13e>
    ea1e:	9e01      	ldr	r6, [sp, #4]
    ea20:	e70e      	b.n	e840 <__sfvwrite_r+0xdc>
    ea22:	9800      	ldr	r0, [sp, #0]
    ea24:	f001 f976 	bl	fd14 <_realloc_r>
    ea28:	4680      	mov	r8, r0
    ea2a:	2800      	cmp	r0, #0
    ea2c:	d1c7      	bne.n	e9be <__sfvwrite_r+0x25a>
    ea2e:	9d00      	ldr	r5, [sp, #0]
    ea30:	6921      	ldr	r1, [r4, #16]
    ea32:	0028      	movs	r0, r5
    ea34:	f7ff fdb8 	bl	e5a8 <_free_r>
    ea38:	2280      	movs	r2, #128	; 0x80
    ea3a:	89a3      	ldrh	r3, [r4, #12]
    ea3c:	4393      	bics	r3, r2
    ea3e:	3a74      	subs	r2, #116	; 0x74
    ea40:	b21b      	sxth	r3, r3
    ea42:	602a      	str	r2, [r5, #0]
    ea44:	e72f      	b.n	e8a6 <__sfvwrite_r+0x142>
    ea46:	1c7d      	adds	r5, r7, #1
    ea48:	e6de      	b.n	e808 <__sfvwrite_r+0xa4>
    ea4a:	2001      	movs	r0, #1
    ea4c:	4240      	negs	r0, r0
    ea4e:	e6bd      	b.n	e7cc <__sfvwrite_r+0x68>
    ea50:	9a00      	ldr	r2, [sp, #0]
    ea52:	330c      	adds	r3, #12
    ea54:	6013      	str	r3, [r2, #0]
    ea56:	220c      	movs	r2, #12
    ea58:	5ea3      	ldrsh	r3, [r4, r2]
    ea5a:	e724      	b.n	e8a6 <__sfvwrite_r+0x142>
    ea5c:	7ffffc00 	.word	0x7ffffc00
    ea60:	fffffb7f 	.word	0xfffffb7f
    ea64:	7fffffff 	.word	0x7fffffff

0000ea68 <_fwalk_reent>:
    ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ea6a:	4647      	mov	r7, r8
    ea6c:	46ce      	mov	lr, r9
    ea6e:	b580      	push	{r7, lr}
    ea70:	27b8      	movs	r7, #184	; 0xb8
    ea72:	4680      	mov	r8, r0
    ea74:	00bf      	lsls	r7, r7, #2
    ea76:	4447      	add	r7, r8
    ea78:	4689      	mov	r9, r1
    ea7a:	2600      	movs	r6, #0
    ea7c:	2f00      	cmp	r7, #0
    ea7e:	d014      	beq.n	eaaa <_fwalk_reent+0x42>
    ea80:	687b      	ldr	r3, [r7, #4]
    ea82:	68bc      	ldr	r4, [r7, #8]
    ea84:	1e5d      	subs	r5, r3, #1
    ea86:	d40d      	bmi.n	eaa4 <_fwalk_reent+0x3c>
    ea88:	89a3      	ldrh	r3, [r4, #12]
    ea8a:	2b01      	cmp	r3, #1
    ea8c:	d907      	bls.n	ea9e <_fwalk_reent+0x36>
    ea8e:	220e      	movs	r2, #14
    ea90:	5ea3      	ldrsh	r3, [r4, r2]
    ea92:	3301      	adds	r3, #1
    ea94:	d003      	beq.n	ea9e <_fwalk_reent+0x36>
    ea96:	0021      	movs	r1, r4
    ea98:	4640      	mov	r0, r8
    ea9a:	47c8      	blx	r9
    ea9c:	4306      	orrs	r6, r0
    ea9e:	3468      	adds	r4, #104	; 0x68
    eaa0:	3d01      	subs	r5, #1
    eaa2:	d2f1      	bcs.n	ea88 <_fwalk_reent+0x20>
    eaa4:	683f      	ldr	r7, [r7, #0]
    eaa6:	2f00      	cmp	r7, #0
    eaa8:	d1ea      	bne.n	ea80 <_fwalk_reent+0x18>
    eaaa:	0030      	movs	r0, r6
    eaac:	bc0c      	pop	{r2, r3}
    eaae:	4690      	mov	r8, r2
    eab0:	4699      	mov	r9, r3
    eab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eab4 <iswspace>:
    eab4:	b510      	push	{r4, lr}
    eab6:	0004      	movs	r4, r0
    eab8:	2000      	movs	r0, #0
    eaba:	2cff      	cmp	r4, #255	; 0xff
    eabc:	d805      	bhi.n	eaca <iswspace+0x16>
    eabe:	f000 f819 	bl	eaf4 <__locale_ctype_ptr>
    eac2:	1904      	adds	r4, r0, r4
    eac4:	2008      	movs	r0, #8
    eac6:	7863      	ldrb	r3, [r4, #1]
    eac8:	4018      	ands	r0, r3
    eaca:	bd10      	pop	{r4, pc}

0000eacc <__locale_mb_cur_max>:
    eacc:	4b05      	ldr	r3, [pc, #20]	; (eae4 <__locale_mb_cur_max+0x18>)
    eace:	681b      	ldr	r3, [r3, #0]
    ead0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ead2:	2b00      	cmp	r3, #0
    ead4:	d003      	beq.n	eade <__locale_mb_cur_max+0x12>
    ead6:	2294      	movs	r2, #148	; 0x94
    ead8:	0052      	lsls	r2, r2, #1
    eada:	5c98      	ldrb	r0, [r3, r2]
    eadc:	4770      	bx	lr
    eade:	4b02      	ldr	r3, [pc, #8]	; (eae8 <__locale_mb_cur_max+0x1c>)
    eae0:	e7f9      	b.n	ead6 <__locale_mb_cur_max+0xa>
    eae2:	46c0      	nop			; (mov r8, r8)
    eae4:	20000080 	.word	0x20000080
    eae8:	200004b4 	.word	0x200004b4

0000eaec <__locale_ctype_ptr_l>:
    eaec:	23ec      	movs	r3, #236	; 0xec
    eaee:	58c0      	ldr	r0, [r0, r3]
    eaf0:	4770      	bx	lr
    eaf2:	46c0      	nop			; (mov r8, r8)

0000eaf4 <__locale_ctype_ptr>:
    eaf4:	4b04      	ldr	r3, [pc, #16]	; (eb08 <__locale_ctype_ptr+0x14>)
    eaf6:	681b      	ldr	r3, [r3, #0]
    eaf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    eafa:	2b00      	cmp	r3, #0
    eafc:	d002      	beq.n	eb04 <__locale_ctype_ptr+0x10>
    eafe:	22ec      	movs	r2, #236	; 0xec
    eb00:	5898      	ldr	r0, [r3, r2]
    eb02:	4770      	bx	lr
    eb04:	4b01      	ldr	r3, [pc, #4]	; (eb0c <__locale_ctype_ptr+0x18>)
    eb06:	e7fa      	b.n	eafe <__locale_ctype_ptr+0xa>
    eb08:	20000080 	.word	0x20000080
    eb0c:	200004b4 	.word	0x200004b4

0000eb10 <__localeconv_l>:
    eb10:	30f0      	adds	r0, #240	; 0xf0
    eb12:	4770      	bx	lr

0000eb14 <_localeconv_r>:
    eb14:	4b04      	ldr	r3, [pc, #16]	; (eb28 <_localeconv_r+0x14>)
    eb16:	681b      	ldr	r3, [r3, #0]
    eb18:	6b58      	ldr	r0, [r3, #52]	; 0x34
    eb1a:	2800      	cmp	r0, #0
    eb1c:	d001      	beq.n	eb22 <_localeconv_r+0xe>
    eb1e:	30f0      	adds	r0, #240	; 0xf0
    eb20:	4770      	bx	lr
    eb22:	4802      	ldr	r0, [pc, #8]	; (eb2c <_localeconv_r+0x18>)
    eb24:	e7fb      	b.n	eb1e <_localeconv_r+0xa>
    eb26:	46c0      	nop			; (mov r8, r8)
    eb28:	20000080 	.word	0x20000080
    eb2c:	200004b4 	.word	0x200004b4

0000eb30 <__retarget_lock_init_recursive>:
    eb30:	4770      	bx	lr
    eb32:	46c0      	nop			; (mov r8, r8)

0000eb34 <__retarget_lock_close_recursive>:
    eb34:	4770      	bx	lr
    eb36:	46c0      	nop			; (mov r8, r8)

0000eb38 <__retarget_lock_acquire_recursive>:
    eb38:	4770      	bx	lr
    eb3a:	46c0      	nop			; (mov r8, r8)

0000eb3c <__retarget_lock_release_recursive>:
    eb3c:	4770      	bx	lr
    eb3e:	46c0      	nop			; (mov r8, r8)

0000eb40 <_lseek_r>:
    eb40:	b570      	push	{r4, r5, r6, lr}
    eb42:	0005      	movs	r5, r0
    eb44:	0008      	movs	r0, r1
    eb46:	0011      	movs	r1, r2
    eb48:	2200      	movs	r2, #0
    eb4a:	4c06      	ldr	r4, [pc, #24]	; (eb64 <_lseek_r+0x24>)
    eb4c:	6022      	str	r2, [r4, #0]
    eb4e:	001a      	movs	r2, r3
    eb50:	f7f2 f874 	bl	c3c <_lseek>
    eb54:	1c43      	adds	r3, r0, #1
    eb56:	d000      	beq.n	eb5a <_lseek_r+0x1a>
    eb58:	bd70      	pop	{r4, r5, r6, pc}
    eb5a:	6823      	ldr	r3, [r4, #0]
    eb5c:	2b00      	cmp	r3, #0
    eb5e:	d0fb      	beq.n	eb58 <_lseek_r+0x18>
    eb60:	602b      	str	r3, [r5, #0]
    eb62:	e7f9      	b.n	eb58 <_lseek_r+0x18>
    eb64:	200018dc 	.word	0x200018dc

0000eb68 <__swhatbuf_r>:
    eb68:	b570      	push	{r4, r5, r6, lr}
    eb6a:	000c      	movs	r4, r1
    eb6c:	001e      	movs	r6, r3
    eb6e:	230e      	movs	r3, #14
    eb70:	5ec9      	ldrsh	r1, [r1, r3]
    eb72:	b090      	sub	sp, #64	; 0x40
    eb74:	0015      	movs	r5, r2
    eb76:	2900      	cmp	r1, #0
    eb78:	db15      	blt.n	eba6 <__swhatbuf_r+0x3e>
    eb7a:	aa01      	add	r2, sp, #4
    eb7c:	f003 f840 	bl	11c00 <_fstat_r>
    eb80:	2800      	cmp	r0, #0
    eb82:	db10      	blt.n	eba6 <__swhatbuf_r+0x3e>
    eb84:	22f0      	movs	r2, #240	; 0xf0
    eb86:	9b02      	ldr	r3, [sp, #8]
    eb88:	0212      	lsls	r2, r2, #8
    eb8a:	4013      	ands	r3, r2
    eb8c:	4a0d      	ldr	r2, [pc, #52]	; (ebc4 <__swhatbuf_r+0x5c>)
    eb8e:	2080      	movs	r0, #128	; 0x80
    eb90:	4694      	mov	ip, r2
    eb92:	4463      	add	r3, ip
    eb94:	425a      	negs	r2, r3
    eb96:	4153      	adcs	r3, r2
    eb98:	6033      	str	r3, [r6, #0]
    eb9a:	2380      	movs	r3, #128	; 0x80
    eb9c:	00db      	lsls	r3, r3, #3
    eb9e:	602b      	str	r3, [r5, #0]
    eba0:	0100      	lsls	r0, r0, #4
    eba2:	b010      	add	sp, #64	; 0x40
    eba4:	bd70      	pop	{r4, r5, r6, pc}
    eba6:	2300      	movs	r3, #0
    eba8:	6033      	str	r3, [r6, #0]
    ebaa:	89a3      	ldrh	r3, [r4, #12]
    ebac:	061b      	lsls	r3, r3, #24
    ebae:	d503      	bpl.n	ebb8 <__swhatbuf_r+0x50>
    ebb0:	2340      	movs	r3, #64	; 0x40
    ebb2:	2000      	movs	r0, #0
    ebb4:	602b      	str	r3, [r5, #0]
    ebb6:	e7f4      	b.n	eba2 <__swhatbuf_r+0x3a>
    ebb8:	2380      	movs	r3, #128	; 0x80
    ebba:	00db      	lsls	r3, r3, #3
    ebbc:	602b      	str	r3, [r5, #0]
    ebbe:	2000      	movs	r0, #0
    ebc0:	e7ef      	b.n	eba2 <__swhatbuf_r+0x3a>
    ebc2:	46c0      	nop			; (mov r8, r8)
    ebc4:	ffffe000 	.word	0xffffe000

0000ebc8 <__smakebuf_r>:
    ebc8:	b570      	push	{r4, r5, r6, lr}
    ebca:	898b      	ldrh	r3, [r1, #12]
    ebcc:	b082      	sub	sp, #8
    ebce:	0006      	movs	r6, r0
    ebd0:	000c      	movs	r4, r1
    ebd2:	079b      	lsls	r3, r3, #30
    ebd4:	d507      	bpl.n	ebe6 <__smakebuf_r+0x1e>
    ebd6:	0023      	movs	r3, r4
    ebd8:	3343      	adds	r3, #67	; 0x43
    ebda:	6023      	str	r3, [r4, #0]
    ebdc:	6123      	str	r3, [r4, #16]
    ebde:	2301      	movs	r3, #1
    ebe0:	6163      	str	r3, [r4, #20]
    ebe2:	b002      	add	sp, #8
    ebe4:	bd70      	pop	{r4, r5, r6, pc}
    ebe6:	ab01      	add	r3, sp, #4
    ebe8:	466a      	mov	r2, sp
    ebea:	f7ff ffbd 	bl	eb68 <__swhatbuf_r>
    ebee:	9900      	ldr	r1, [sp, #0]
    ebf0:	0005      	movs	r5, r0
    ebf2:	0030      	movs	r0, r6
    ebf4:	f000 f830 	bl	ec58 <_malloc_r>
    ebf8:	2800      	cmp	r0, #0
    ebfa:	d01e      	beq.n	ec3a <__smakebuf_r+0x72>
    ebfc:	2280      	movs	r2, #128	; 0x80
    ebfe:	4b15      	ldr	r3, [pc, #84]	; (ec54 <__smakebuf_r+0x8c>)
    ec00:	63f3      	str	r3, [r6, #60]	; 0x3c
    ec02:	89a3      	ldrh	r3, [r4, #12]
    ec04:	6020      	str	r0, [r4, #0]
    ec06:	4313      	orrs	r3, r2
    ec08:	9a00      	ldr	r2, [sp, #0]
    ec0a:	b21b      	sxth	r3, r3
    ec0c:	6162      	str	r2, [r4, #20]
    ec0e:	9a01      	ldr	r2, [sp, #4]
    ec10:	81a3      	strh	r3, [r4, #12]
    ec12:	6120      	str	r0, [r4, #16]
    ec14:	2a00      	cmp	r2, #0
    ec16:	d102      	bne.n	ec1e <__smakebuf_r+0x56>
    ec18:	432b      	orrs	r3, r5
    ec1a:	81a3      	strh	r3, [r4, #12]
    ec1c:	e7e1      	b.n	ebe2 <__smakebuf_r+0x1a>
    ec1e:	230e      	movs	r3, #14
    ec20:	5ee1      	ldrsh	r1, [r4, r3]
    ec22:	0030      	movs	r0, r6
    ec24:	f003 fbd4 	bl	123d0 <_isatty_r>
    ec28:	2800      	cmp	r0, #0
    ec2a:	d010      	beq.n	ec4e <__smakebuf_r+0x86>
    ec2c:	2203      	movs	r2, #3
    ec2e:	89a3      	ldrh	r3, [r4, #12]
    ec30:	4393      	bics	r3, r2
    ec32:	2201      	movs	r2, #1
    ec34:	4313      	orrs	r3, r2
    ec36:	b21b      	sxth	r3, r3
    ec38:	e7ee      	b.n	ec18 <__smakebuf_r+0x50>
    ec3a:	220c      	movs	r2, #12
    ec3c:	5ea3      	ldrsh	r3, [r4, r2]
    ec3e:	059a      	lsls	r2, r3, #22
    ec40:	d4cf      	bmi.n	ebe2 <__smakebuf_r+0x1a>
    ec42:	2203      	movs	r2, #3
    ec44:	4393      	bics	r3, r2
    ec46:	2202      	movs	r2, #2
    ec48:	4313      	orrs	r3, r2
    ec4a:	81a3      	strh	r3, [r4, #12]
    ec4c:	e7c3      	b.n	ebd6 <__smakebuf_r+0xe>
    ec4e:	220c      	movs	r2, #12
    ec50:	5ea3      	ldrsh	r3, [r4, r2]
    ec52:	e7e1      	b.n	ec18 <__smakebuf_r+0x50>
    ec54:	0000e3f5 	.word	0x0000e3f5

0000ec58 <_malloc_r>:
    ec58:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec5a:	4657      	mov	r7, sl
    ec5c:	4645      	mov	r5, r8
    ec5e:	46de      	mov	lr, fp
    ec60:	464e      	mov	r6, r9
    ec62:	b5e0      	push	{r5, r6, r7, lr}
    ec64:	000d      	movs	r5, r1
    ec66:	350b      	adds	r5, #11
    ec68:	b083      	sub	sp, #12
    ec6a:	0007      	movs	r7, r0
    ec6c:	2d16      	cmp	r5, #22
    ec6e:	d800      	bhi.n	ec72 <_malloc_r+0x1a>
    ec70:	e09f      	b.n	edb2 <_malloc_r+0x15a>
    ec72:	2307      	movs	r3, #7
    ec74:	439d      	bics	r5, r3
    ec76:	d500      	bpl.n	ec7a <_malloc_r+0x22>
    ec78:	e0c4      	b.n	ee04 <_malloc_r+0x1ac>
    ec7a:	42a9      	cmp	r1, r5
    ec7c:	d900      	bls.n	ec80 <_malloc_r+0x28>
    ec7e:	e0c1      	b.n	ee04 <_malloc_r+0x1ac>
    ec80:	f000 fb76 	bl	f370 <__malloc_lock>
    ec84:	23f8      	movs	r3, #248	; 0xf8
    ec86:	33ff      	adds	r3, #255	; 0xff
    ec88:	429d      	cmp	r5, r3
    ec8a:	d800      	bhi.n	ec8e <_malloc_r+0x36>
    ec8c:	e28f      	b.n	f1ae <_malloc_r+0x556>
    ec8e:	0a68      	lsrs	r0, r5, #9
    ec90:	d100      	bne.n	ec94 <_malloc_r+0x3c>
    ec92:	e0bb      	b.n	ee0c <_malloc_r+0x1b4>
    ec94:	2804      	cmp	r0, #4
    ec96:	d900      	bls.n	ec9a <_malloc_r+0x42>
    ec98:	e162      	b.n	ef60 <_malloc_r+0x308>
    ec9a:	2338      	movs	r3, #56	; 0x38
    ec9c:	4698      	mov	r8, r3
    ec9e:	09a8      	lsrs	r0, r5, #6
    eca0:	4480      	add	r8, r0
    eca2:	3039      	adds	r0, #57	; 0x39
    eca4:	00c1      	lsls	r1, r0, #3
    eca6:	4ed2      	ldr	r6, [pc, #840]	; (eff0 <_malloc_r+0x398>)
    eca8:	1871      	adds	r1, r6, r1
    ecaa:	3908      	subs	r1, #8
    ecac:	68cc      	ldr	r4, [r1, #12]
    ecae:	42a1      	cmp	r1, r4
    ecb0:	d019      	beq.n	ece6 <_malloc_r+0x8e>
    ecb2:	2303      	movs	r3, #3
    ecb4:	6862      	ldr	r2, [r4, #4]
    ecb6:	439a      	bics	r2, r3
    ecb8:	0013      	movs	r3, r2
    ecba:	1b52      	subs	r2, r2, r5
    ecbc:	2a0f      	cmp	r2, #15
    ecbe:	dd00      	ble.n	ecc2 <_malloc_r+0x6a>
    ecc0:	e0aa      	b.n	ee18 <_malloc_r+0x1c0>
    ecc2:	2a00      	cmp	r2, #0
    ecc4:	db00      	blt.n	ecc8 <_malloc_r+0x70>
    ecc6:	e088      	b.n	edda <_malloc_r+0x182>
    ecc8:	2303      	movs	r3, #3
    ecca:	469c      	mov	ip, r3
    eccc:	e008      	b.n	ece0 <_malloc_r+0x88>
    ecce:	4662      	mov	r2, ip
    ecd0:	6863      	ldr	r3, [r4, #4]
    ecd2:	4393      	bics	r3, r2
    ecd4:	1b5a      	subs	r2, r3, r5
    ecd6:	2a0f      	cmp	r2, #15
    ecd8:	dd00      	ble.n	ecdc <_malloc_r+0x84>
    ecda:	e09d      	b.n	ee18 <_malloc_r+0x1c0>
    ecdc:	2a00      	cmp	r2, #0
    ecde:	da7c      	bge.n	edda <_malloc_r+0x182>
    ece0:	68e4      	ldr	r4, [r4, #12]
    ece2:	42a1      	cmp	r1, r4
    ece4:	d1f3      	bne.n	ecce <_malloc_r+0x76>
    ece6:	0032      	movs	r2, r6
    ece8:	6934      	ldr	r4, [r6, #16]
    ecea:	3208      	adds	r2, #8
    ecec:	4294      	cmp	r4, r2
    ecee:	d100      	bne.n	ecf2 <_malloc_r+0x9a>
    ecf0:	e190      	b.n	f014 <_malloc_r+0x3bc>
    ecf2:	2303      	movs	r3, #3
    ecf4:	6861      	ldr	r1, [r4, #4]
    ecf6:	4399      	bics	r1, r3
    ecf8:	4689      	mov	r9, r1
    ecfa:	1b49      	subs	r1, r1, r5
    ecfc:	290f      	cmp	r1, #15
    ecfe:	dd00      	ble.n	ed02 <_malloc_r+0xaa>
    ed00:	e162      	b.n	efc8 <_malloc_r+0x370>
    ed02:	6172      	str	r2, [r6, #20]
    ed04:	6132      	str	r2, [r6, #16]
    ed06:	2900      	cmp	r1, #0
    ed08:	db00      	blt.n	ed0c <_malloc_r+0xb4>
    ed0a:	e087      	b.n	ee1c <_malloc_r+0x1c4>
    ed0c:	4ab9      	ldr	r2, [pc, #740]	; (eff4 <_malloc_r+0x39c>)
    ed0e:	464b      	mov	r3, r9
    ed10:	4591      	cmp	r9, r2
    ed12:	d900      	bls.n	ed16 <_malloc_r+0xbe>
    ed14:	e130      	b.n	ef78 <_malloc_r+0x320>
    ed16:	08db      	lsrs	r3, r3, #3
    ed18:	3aff      	subs	r2, #255	; 0xff
    ed1a:	1099      	asrs	r1, r3, #2
    ed1c:	3aff      	subs	r2, #255	; 0xff
    ed1e:	408a      	lsls	r2, r1
    ed20:	00db      	lsls	r3, r3, #3
    ed22:	6871      	ldr	r1, [r6, #4]
    ed24:	199b      	adds	r3, r3, r6
    ed26:	430a      	orrs	r2, r1
    ed28:	6899      	ldr	r1, [r3, #8]
    ed2a:	6072      	str	r2, [r6, #4]
    ed2c:	60e3      	str	r3, [r4, #12]
    ed2e:	60a1      	str	r1, [r4, #8]
    ed30:	609c      	str	r4, [r3, #8]
    ed32:	0013      	movs	r3, r2
    ed34:	60cc      	str	r4, [r1, #12]
    ed36:	2101      	movs	r1, #1
    ed38:	1082      	asrs	r2, r0, #2
    ed3a:	4091      	lsls	r1, r2
    ed3c:	4299      	cmp	r1, r3
    ed3e:	d86f      	bhi.n	ee20 <_malloc_r+0x1c8>
    ed40:	420b      	tst	r3, r1
    ed42:	d105      	bne.n	ed50 <_malloc_r+0xf8>
    ed44:	2203      	movs	r2, #3
    ed46:	4390      	bics	r0, r2
    ed48:	0049      	lsls	r1, r1, #1
    ed4a:	3004      	adds	r0, #4
    ed4c:	420b      	tst	r3, r1
    ed4e:	d0fb      	beq.n	ed48 <_malloc_r+0xf0>
    ed50:	2303      	movs	r3, #3
    ed52:	4698      	mov	r8, r3
    ed54:	00c3      	lsls	r3, r0, #3
    ed56:	4699      	mov	r9, r3
    ed58:	44b1      	add	r9, r6
    ed5a:	46cc      	mov	ip, r9
    ed5c:	4682      	mov	sl, r0
    ed5e:	4663      	mov	r3, ip
    ed60:	68dc      	ldr	r4, [r3, #12]
    ed62:	45a4      	cmp	ip, r4
    ed64:	d107      	bne.n	ed76 <_malloc_r+0x11e>
    ed66:	e157      	b.n	f018 <_malloc_r+0x3c0>
    ed68:	2a00      	cmp	r2, #0
    ed6a:	db00      	blt.n	ed6e <_malloc_r+0x116>
    ed6c:	e166      	b.n	f03c <_malloc_r+0x3e4>
    ed6e:	68e4      	ldr	r4, [r4, #12]
    ed70:	45a4      	cmp	ip, r4
    ed72:	d100      	bne.n	ed76 <_malloc_r+0x11e>
    ed74:	e150      	b.n	f018 <_malloc_r+0x3c0>
    ed76:	4642      	mov	r2, r8
    ed78:	6863      	ldr	r3, [r4, #4]
    ed7a:	4393      	bics	r3, r2
    ed7c:	1b5a      	subs	r2, r3, r5
    ed7e:	2a0f      	cmp	r2, #15
    ed80:	ddf2      	ble.n	ed68 <_malloc_r+0x110>
    ed82:	2001      	movs	r0, #1
    ed84:	4680      	mov	r8, r0
    ed86:	1961      	adds	r1, r4, r5
    ed88:	4305      	orrs	r5, r0
    ed8a:	6065      	str	r5, [r4, #4]
    ed8c:	68a0      	ldr	r0, [r4, #8]
    ed8e:	68e5      	ldr	r5, [r4, #12]
    ed90:	3608      	adds	r6, #8
    ed92:	60c5      	str	r5, [r0, #12]
    ed94:	60a8      	str	r0, [r5, #8]
    ed96:	4640      	mov	r0, r8
    ed98:	60f1      	str	r1, [r6, #12]
    ed9a:	60b1      	str	r1, [r6, #8]
    ed9c:	4310      	orrs	r0, r2
    ed9e:	6048      	str	r0, [r1, #4]
    eda0:	60ce      	str	r6, [r1, #12]
    eda2:	608e      	str	r6, [r1, #8]
    eda4:	0038      	movs	r0, r7
    eda6:	50e2      	str	r2, [r4, r3]
    eda8:	f000 faea 	bl	f380 <__malloc_unlock>
    edac:	0020      	movs	r0, r4
    edae:	3008      	adds	r0, #8
    edb0:	e021      	b.n	edf6 <_malloc_r+0x19e>
    edb2:	2910      	cmp	r1, #16
    edb4:	d826      	bhi.n	ee04 <_malloc_r+0x1ac>
    edb6:	0038      	movs	r0, r7
    edb8:	f000 fada 	bl	f370 <__malloc_lock>
    edbc:	2510      	movs	r5, #16
    edbe:	2318      	movs	r3, #24
    edc0:	2002      	movs	r0, #2
    edc2:	4e8b      	ldr	r6, [pc, #556]	; (eff0 <_malloc_r+0x398>)
    edc4:	18f3      	adds	r3, r6, r3
    edc6:	001a      	movs	r2, r3
    edc8:	685c      	ldr	r4, [r3, #4]
    edca:	3a08      	subs	r2, #8
    edcc:	4294      	cmp	r4, r2
    edce:	d100      	bne.n	edd2 <_malloc_r+0x17a>
    edd0:	e12e      	b.n	f030 <_malloc_r+0x3d8>
    edd2:	2303      	movs	r3, #3
    edd4:	6862      	ldr	r2, [r4, #4]
    edd6:	439a      	bics	r2, r3
    edd8:	0013      	movs	r3, r2
    edda:	68e2      	ldr	r2, [r4, #12]
    eddc:	68a1      	ldr	r1, [r4, #8]
    edde:	60ca      	str	r2, [r1, #12]
    ede0:	6091      	str	r1, [r2, #8]
    ede2:	2201      	movs	r2, #1
    ede4:	18e3      	adds	r3, r4, r3
    ede6:	6859      	ldr	r1, [r3, #4]
    ede8:	0038      	movs	r0, r7
    edea:	430a      	orrs	r2, r1
    edec:	605a      	str	r2, [r3, #4]
    edee:	f000 fac7 	bl	f380 <__malloc_unlock>
    edf2:	0020      	movs	r0, r4
    edf4:	3008      	adds	r0, #8
    edf6:	b003      	add	sp, #12
    edf8:	bc3c      	pop	{r2, r3, r4, r5}
    edfa:	4690      	mov	r8, r2
    edfc:	4699      	mov	r9, r3
    edfe:	46a2      	mov	sl, r4
    ee00:	46ab      	mov	fp, r5
    ee02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee04:	230c      	movs	r3, #12
    ee06:	2000      	movs	r0, #0
    ee08:	603b      	str	r3, [r7, #0]
    ee0a:	e7f4      	b.n	edf6 <_malloc_r+0x19e>
    ee0c:	2180      	movs	r1, #128	; 0x80
    ee0e:	233f      	movs	r3, #63	; 0x3f
    ee10:	2040      	movs	r0, #64	; 0x40
    ee12:	0089      	lsls	r1, r1, #2
    ee14:	4698      	mov	r8, r3
    ee16:	e746      	b.n	eca6 <_malloc_r+0x4e>
    ee18:	4640      	mov	r0, r8
    ee1a:	e764      	b.n	ece6 <_malloc_r+0x8e>
    ee1c:	464b      	mov	r3, r9
    ee1e:	e7e0      	b.n	ede2 <_malloc_r+0x18a>
    ee20:	2303      	movs	r3, #3
    ee22:	68b4      	ldr	r4, [r6, #8]
    ee24:	6862      	ldr	r2, [r4, #4]
    ee26:	439a      	bics	r2, r3
    ee28:	4690      	mov	r8, r2
    ee2a:	42aa      	cmp	r2, r5
    ee2c:	d303      	bcc.n	ee36 <_malloc_r+0x1de>
    ee2e:	1b53      	subs	r3, r2, r5
    ee30:	2b0f      	cmp	r3, #15
    ee32:	dd00      	ble.n	ee36 <_malloc_r+0x1de>
    ee34:	e086      	b.n	ef44 <_malloc_r+0x2ec>
    ee36:	0023      	movs	r3, r4
    ee38:	4443      	add	r3, r8
    ee3a:	4a6f      	ldr	r2, [pc, #444]	; (eff8 <_malloc_r+0x3a0>)
    ee3c:	9301      	str	r3, [sp, #4]
    ee3e:	4b6f      	ldr	r3, [pc, #444]	; (effc <_malloc_r+0x3a4>)
    ee40:	4693      	mov	fp, r2
    ee42:	681b      	ldr	r3, [r3, #0]
    ee44:	6812      	ldr	r2, [r2, #0]
    ee46:	18eb      	adds	r3, r5, r3
    ee48:	3201      	adds	r2, #1
    ee4a:	d100      	bne.n	ee4e <_malloc_r+0x1f6>
    ee4c:	e168      	b.n	f120 <_malloc_r+0x4c8>
    ee4e:	4a6c      	ldr	r2, [pc, #432]	; (f000 <_malloc_r+0x3a8>)
    ee50:	4694      	mov	ip, r2
    ee52:	4463      	add	r3, ip
    ee54:	0b1b      	lsrs	r3, r3, #12
    ee56:	031b      	lsls	r3, r3, #12
    ee58:	9300      	str	r3, [sp, #0]
    ee5a:	9900      	ldr	r1, [sp, #0]
    ee5c:	0038      	movs	r0, r7
    ee5e:	f001 f917 	bl	10090 <_sbrk_r>
    ee62:	0003      	movs	r3, r0
    ee64:	4681      	mov	r9, r0
    ee66:	3301      	adds	r3, #1
    ee68:	d061      	beq.n	ef2e <_malloc_r+0x2d6>
    ee6a:	9b01      	ldr	r3, [sp, #4]
    ee6c:	4283      	cmp	r3, r0
    ee6e:	d900      	bls.n	ee72 <_malloc_r+0x21a>
    ee70:	e0ff      	b.n	f072 <_malloc_r+0x41a>
    ee72:	4b64      	ldr	r3, [pc, #400]	; (f004 <_malloc_r+0x3ac>)
    ee74:	9a00      	ldr	r2, [sp, #0]
    ee76:	469a      	mov	sl, r3
    ee78:	681b      	ldr	r3, [r3, #0]
    ee7a:	469c      	mov	ip, r3
    ee7c:	4653      	mov	r3, sl
    ee7e:	4462      	add	r2, ip
    ee80:	601a      	str	r2, [r3, #0]
    ee82:	9b01      	ldr	r3, [sp, #4]
    ee84:	0011      	movs	r1, r2
    ee86:	4283      	cmp	r3, r0
    ee88:	d100      	bne.n	ee8c <_malloc_r+0x234>
    ee8a:	e155      	b.n	f138 <_malloc_r+0x4e0>
    ee8c:	465b      	mov	r3, fp
    ee8e:	681b      	ldr	r3, [r3, #0]
    ee90:	3301      	adds	r3, #1
    ee92:	d100      	bne.n	ee96 <_malloc_r+0x23e>
    ee94:	e16c      	b.n	f170 <_malloc_r+0x518>
    ee96:	464b      	mov	r3, r9
    ee98:	9a01      	ldr	r2, [sp, #4]
    ee9a:	1a9b      	subs	r3, r3, r2
    ee9c:	1859      	adds	r1, r3, r1
    ee9e:	4653      	mov	r3, sl
    eea0:	6019      	str	r1, [r3, #0]
    eea2:	2307      	movs	r3, #7
    eea4:	464a      	mov	r2, r9
    eea6:	4013      	ands	r3, r2
    eea8:	d100      	bne.n	eeac <_malloc_r+0x254>
    eeaa:	e124      	b.n	f0f6 <_malloc_r+0x49e>
    eeac:	2108      	movs	r1, #8
    eeae:	4689      	mov	r9, r1
    eeb0:	4955      	ldr	r1, [pc, #340]	; (f008 <_malloc_r+0x3b0>)
    eeb2:	1ad2      	subs	r2, r2, r3
    eeb4:	4491      	add	r9, r2
    eeb6:	1acb      	subs	r3, r1, r3
    eeb8:	9a00      	ldr	r2, [sp, #0]
    eeba:	0038      	movs	r0, r7
    eebc:	444a      	add	r2, r9
    eebe:	0511      	lsls	r1, r2, #20
    eec0:	0d09      	lsrs	r1, r1, #20
    eec2:	1a5b      	subs	r3, r3, r1
    eec4:	0019      	movs	r1, r3
    eec6:	469b      	mov	fp, r3
    eec8:	f001 f8e2 	bl	10090 <_sbrk_r>
    eecc:	1c43      	adds	r3, r0, #1
    eece:	d100      	bne.n	eed2 <_malloc_r+0x27a>
    eed0:	e142      	b.n	f158 <_malloc_r+0x500>
    eed2:	464b      	mov	r3, r9
    eed4:	1ac0      	subs	r0, r0, r3
    eed6:	2301      	movs	r3, #1
    eed8:	4458      	add	r0, fp
    eeda:	4318      	orrs	r0, r3
    eedc:	4653      	mov	r3, sl
    eede:	681b      	ldr	r3, [r3, #0]
    eee0:	445b      	add	r3, fp
    eee2:	0019      	movs	r1, r3
    eee4:	4653      	mov	r3, sl
    eee6:	6019      	str	r1, [r3, #0]
    eee8:	464b      	mov	r3, r9
    eeea:	60b3      	str	r3, [r6, #8]
    eeec:	6058      	str	r0, [r3, #4]
    eeee:	42b4      	cmp	r4, r6
    eef0:	d013      	beq.n	ef1a <_malloc_r+0x2c2>
    eef2:	4643      	mov	r3, r8
    eef4:	2b0f      	cmp	r3, #15
    eef6:	d800      	bhi.n	eefa <_malloc_r+0x2a2>
    eef8:	e0e8      	b.n	f0cc <_malloc_r+0x474>
    eefa:	4643      	mov	r3, r8
    eefc:	2207      	movs	r2, #7
    eefe:	6860      	ldr	r0, [r4, #4]
    ef00:	3b0c      	subs	r3, #12
    ef02:	4393      	bics	r3, r2
    ef04:	3a06      	subs	r2, #6
    ef06:	4002      	ands	r2, r0
    ef08:	2005      	movs	r0, #5
    ef0a:	431a      	orrs	r2, r3
    ef0c:	6062      	str	r2, [r4, #4]
    ef0e:	18e2      	adds	r2, r4, r3
    ef10:	6050      	str	r0, [r2, #4]
    ef12:	6090      	str	r0, [r2, #8]
    ef14:	2b0f      	cmp	r3, #15
    ef16:	d900      	bls.n	ef1a <_malloc_r+0x2c2>
    ef18:	e122      	b.n	f160 <_malloc_r+0x508>
    ef1a:	4b3c      	ldr	r3, [pc, #240]	; (f00c <_malloc_r+0x3b4>)
    ef1c:	681a      	ldr	r2, [r3, #0]
    ef1e:	4291      	cmp	r1, r2
    ef20:	d900      	bls.n	ef24 <_malloc_r+0x2cc>
    ef22:	6019      	str	r1, [r3, #0]
    ef24:	4b3a      	ldr	r3, [pc, #232]	; (f010 <_malloc_r+0x3b8>)
    ef26:	681a      	ldr	r2, [r3, #0]
    ef28:	4291      	cmp	r1, r2
    ef2a:	d900      	bls.n	ef2e <_malloc_r+0x2d6>
    ef2c:	6019      	str	r1, [r3, #0]
    ef2e:	2303      	movs	r3, #3
    ef30:	68b4      	ldr	r4, [r6, #8]
    ef32:	6862      	ldr	r2, [r4, #4]
    ef34:	439a      	bics	r2, r3
    ef36:	1b53      	subs	r3, r2, r5
    ef38:	4295      	cmp	r5, r2
    ef3a:	d900      	bls.n	ef3e <_malloc_r+0x2e6>
    ef3c:	e0c9      	b.n	f0d2 <_malloc_r+0x47a>
    ef3e:	2b0f      	cmp	r3, #15
    ef40:	dc00      	bgt.n	ef44 <_malloc_r+0x2ec>
    ef42:	e0c6      	b.n	f0d2 <_malloc_r+0x47a>
    ef44:	2201      	movs	r2, #1
    ef46:	0029      	movs	r1, r5
    ef48:	4313      	orrs	r3, r2
    ef4a:	4311      	orrs	r1, r2
    ef4c:	1965      	adds	r5, r4, r5
    ef4e:	6061      	str	r1, [r4, #4]
    ef50:	0038      	movs	r0, r7
    ef52:	60b5      	str	r5, [r6, #8]
    ef54:	606b      	str	r3, [r5, #4]
    ef56:	f000 fa13 	bl	f380 <__malloc_unlock>
    ef5a:	0020      	movs	r0, r4
    ef5c:	3008      	adds	r0, #8
    ef5e:	e74a      	b.n	edf6 <_malloc_r+0x19e>
    ef60:	2814      	cmp	r0, #20
    ef62:	d97a      	bls.n	f05a <_malloc_r+0x402>
    ef64:	2854      	cmp	r0, #84	; 0x54
    ef66:	d900      	bls.n	ef6a <_malloc_r+0x312>
    ef68:	e0ba      	b.n	f0e0 <_malloc_r+0x488>
    ef6a:	236e      	movs	r3, #110	; 0x6e
    ef6c:	4698      	mov	r8, r3
    ef6e:	0b28      	lsrs	r0, r5, #12
    ef70:	4480      	add	r8, r0
    ef72:	306f      	adds	r0, #111	; 0x6f
    ef74:	00c1      	lsls	r1, r0, #3
    ef76:	e696      	b.n	eca6 <_malloc_r+0x4e>
    ef78:	0a5a      	lsrs	r2, r3, #9
    ef7a:	2a04      	cmp	r2, #4
    ef7c:	d973      	bls.n	f066 <_malloc_r+0x40e>
    ef7e:	2a14      	cmp	r2, #20
    ef80:	d900      	bls.n	ef84 <_malloc_r+0x32c>
    ef82:	e0d0      	b.n	f126 <_malloc_r+0x4ce>
    ef84:	0011      	movs	r1, r2
    ef86:	325c      	adds	r2, #92	; 0x5c
    ef88:	315b      	adds	r1, #91	; 0x5b
    ef8a:	00d2      	lsls	r2, r2, #3
    ef8c:	2308      	movs	r3, #8
    ef8e:	425b      	negs	r3, r3
    ef90:	469c      	mov	ip, r3
    ef92:	18b2      	adds	r2, r6, r2
    ef94:	4494      	add	ip, r2
    ef96:	4663      	mov	r3, ip
    ef98:	689a      	ldr	r2, [r3, #8]
    ef9a:	2303      	movs	r3, #3
    ef9c:	4698      	mov	r8, r3
    ef9e:	4594      	cmp	ip, r2
    efa0:	d100      	bne.n	efa4 <_malloc_r+0x34c>
    efa2:	e0ab      	b.n	f0fc <_malloc_r+0x4a4>
    efa4:	4643      	mov	r3, r8
    efa6:	6851      	ldr	r1, [r2, #4]
    efa8:	4399      	bics	r1, r3
    efaa:	4589      	cmp	r9, r1
    efac:	d300      	bcc.n	efb0 <_malloc_r+0x358>
    efae:	e095      	b.n	f0dc <_malloc_r+0x484>
    efb0:	6892      	ldr	r2, [r2, #8]
    efb2:	4594      	cmp	ip, r2
    efb4:	d1f6      	bne.n	efa4 <_malloc_r+0x34c>
    efb6:	4663      	mov	r3, ip
    efb8:	68da      	ldr	r2, [r3, #12]
    efba:	6873      	ldr	r3, [r6, #4]
    efbc:	4661      	mov	r1, ip
    efbe:	60e2      	str	r2, [r4, #12]
    efc0:	60a1      	str	r1, [r4, #8]
    efc2:	6094      	str	r4, [r2, #8]
    efc4:	60cc      	str	r4, [r1, #12]
    efc6:	e6b6      	b.n	ed36 <_malloc_r+0xde>
    efc8:	2301      	movs	r3, #1
    efca:	1960      	adds	r0, r4, r5
    efcc:	431d      	orrs	r5, r3
    efce:	6065      	str	r5, [r4, #4]
    efd0:	6170      	str	r0, [r6, #20]
    efd2:	6130      	str	r0, [r6, #16]
    efd4:	60c2      	str	r2, [r0, #12]
    efd6:	6082      	str	r2, [r0, #8]
    efd8:	001a      	movs	r2, r3
    efda:	464b      	mov	r3, r9
    efdc:	430a      	orrs	r2, r1
    efde:	6042      	str	r2, [r0, #4]
    efe0:	0038      	movs	r0, r7
    efe2:	50e1      	str	r1, [r4, r3]
    efe4:	f000 f9cc 	bl	f380 <__malloc_unlock>
    efe8:	0020      	movs	r0, r4
    efea:	3008      	adds	r0, #8
    efec:	e703      	b.n	edf6 <_malloc_r+0x19e>
    efee:	46c0      	nop			; (mov r8, r8)
    eff0:	20000620 	.word	0x20000620
    eff4:	000001ff 	.word	0x000001ff
    eff8:	20000a28 	.word	0x20000a28
    effc:	20000ddc 	.word	0x20000ddc
    f000:	0000100f 	.word	0x0000100f
    f004:	20000dac 	.word	0x20000dac
    f008:	00001008 	.word	0x00001008
    f00c:	20000dd4 	.word	0x20000dd4
    f010:	20000dd8 	.word	0x20000dd8
    f014:	6873      	ldr	r3, [r6, #4]
    f016:	e68e      	b.n	ed36 <_malloc_r+0xde>
    f018:	2308      	movs	r3, #8
    f01a:	469b      	mov	fp, r3
    f01c:	3b07      	subs	r3, #7
    f01e:	44dc      	add	ip, fp
    f020:	469b      	mov	fp, r3
    f022:	44da      	add	sl, fp
    f024:	4643      	mov	r3, r8
    f026:	4652      	mov	r2, sl
    f028:	4213      	tst	r3, r2
    f02a:	d000      	beq.n	f02e <_malloc_r+0x3d6>
    f02c:	e697      	b.n	ed5e <_malloc_r+0x106>
    f02e:	e037      	b.n	f0a0 <_malloc_r+0x448>
    f030:	68dc      	ldr	r4, [r3, #12]
    f032:	3002      	adds	r0, #2
    f034:	42a3      	cmp	r3, r4
    f036:	d100      	bne.n	f03a <_malloc_r+0x3e2>
    f038:	e655      	b.n	ece6 <_malloc_r+0x8e>
    f03a:	e6ca      	b.n	edd2 <_malloc_r+0x17a>
    f03c:	2201      	movs	r2, #1
    f03e:	18e3      	adds	r3, r4, r3
    f040:	6859      	ldr	r1, [r3, #4]
    f042:	0038      	movs	r0, r7
    f044:	430a      	orrs	r2, r1
    f046:	605a      	str	r2, [r3, #4]
    f048:	68e3      	ldr	r3, [r4, #12]
    f04a:	68a2      	ldr	r2, [r4, #8]
    f04c:	60d3      	str	r3, [r2, #12]
    f04e:	609a      	str	r2, [r3, #8]
    f050:	f000 f996 	bl	f380 <__malloc_unlock>
    f054:	0020      	movs	r0, r4
    f056:	3008      	adds	r0, #8
    f058:	e6cd      	b.n	edf6 <_malloc_r+0x19e>
    f05a:	235b      	movs	r3, #91	; 0x5b
    f05c:	4698      	mov	r8, r3
    f05e:	4480      	add	r8, r0
    f060:	305c      	adds	r0, #92	; 0x5c
    f062:	00c1      	lsls	r1, r0, #3
    f064:	e61f      	b.n	eca6 <_malloc_r+0x4e>
    f066:	099a      	lsrs	r2, r3, #6
    f068:	0011      	movs	r1, r2
    f06a:	3239      	adds	r2, #57	; 0x39
    f06c:	3138      	adds	r1, #56	; 0x38
    f06e:	00d2      	lsls	r2, r2, #3
    f070:	e78c      	b.n	ef8c <_malloc_r+0x334>
    f072:	42b4      	cmp	r4, r6
    f074:	d000      	beq.n	f078 <_malloc_r+0x420>
    f076:	e75a      	b.n	ef2e <_malloc_r+0x2d6>
    f078:	4b4f      	ldr	r3, [pc, #316]	; (f1b8 <_malloc_r+0x560>)
    f07a:	9a00      	ldr	r2, [sp, #0]
    f07c:	469a      	mov	sl, r3
    f07e:	681b      	ldr	r3, [r3, #0]
    f080:	469c      	mov	ip, r3
    f082:	4653      	mov	r3, sl
    f084:	4462      	add	r2, ip
    f086:	0011      	movs	r1, r2
    f088:	601a      	str	r2, [r3, #0]
    f08a:	e6ff      	b.n	ee8c <_malloc_r+0x234>
    f08c:	2308      	movs	r3, #8
    f08e:	425b      	negs	r3, r3
    f090:	469c      	mov	ip, r3
    f092:	44e1      	add	r9, ip
    f094:	464b      	mov	r3, r9
    f096:	689b      	ldr	r3, [r3, #8]
    f098:	3801      	subs	r0, #1
    f09a:	4599      	cmp	r9, r3
    f09c:	d000      	beq.n	f0a0 <_malloc_r+0x448>
    f09e:	e084      	b.n	f1aa <_malloc_r+0x552>
    f0a0:	4643      	mov	r3, r8
    f0a2:	4203      	tst	r3, r0
    f0a4:	d1f2      	bne.n	f08c <_malloc_r+0x434>
    f0a6:	6873      	ldr	r3, [r6, #4]
    f0a8:	438b      	bics	r3, r1
    f0aa:	6073      	str	r3, [r6, #4]
    f0ac:	0049      	lsls	r1, r1, #1
    f0ae:	4299      	cmp	r1, r3
    f0b0:	d900      	bls.n	f0b4 <_malloc_r+0x45c>
    f0b2:	e6b5      	b.n	ee20 <_malloc_r+0x1c8>
    f0b4:	2900      	cmp	r1, #0
    f0b6:	d100      	bne.n	f0ba <_malloc_r+0x462>
    f0b8:	e6b2      	b.n	ee20 <_malloc_r+0x1c8>
    f0ba:	4650      	mov	r0, sl
    f0bc:	420b      	tst	r3, r1
    f0be:	d000      	beq.n	f0c2 <_malloc_r+0x46a>
    f0c0:	e648      	b.n	ed54 <_malloc_r+0xfc>
    f0c2:	0049      	lsls	r1, r1, #1
    f0c4:	3004      	adds	r0, #4
    f0c6:	420b      	tst	r3, r1
    f0c8:	d0fb      	beq.n	f0c2 <_malloc_r+0x46a>
    f0ca:	e643      	b.n	ed54 <_malloc_r+0xfc>
    f0cc:	2301      	movs	r3, #1
    f0ce:	464a      	mov	r2, r9
    f0d0:	6053      	str	r3, [r2, #4]
    f0d2:	0038      	movs	r0, r7
    f0d4:	f000 f954 	bl	f380 <__malloc_unlock>
    f0d8:	2000      	movs	r0, #0
    f0da:	e68c      	b.n	edf6 <_malloc_r+0x19e>
    f0dc:	4694      	mov	ip, r2
    f0de:	e76a      	b.n	efb6 <_malloc_r+0x35e>
    f0e0:	23aa      	movs	r3, #170	; 0xaa
    f0e2:	005b      	lsls	r3, r3, #1
    f0e4:	4298      	cmp	r0, r3
    f0e6:	d811      	bhi.n	f10c <_malloc_r+0x4b4>
    f0e8:	3bdd      	subs	r3, #221	; 0xdd
    f0ea:	4698      	mov	r8, r3
    f0ec:	0be8      	lsrs	r0, r5, #15
    f0ee:	4480      	add	r8, r0
    f0f0:	3078      	adds	r0, #120	; 0x78
    f0f2:	00c1      	lsls	r1, r0, #3
    f0f4:	e5d7      	b.n	eca6 <_malloc_r+0x4e>
    f0f6:	2380      	movs	r3, #128	; 0x80
    f0f8:	015b      	lsls	r3, r3, #5
    f0fa:	e6dd      	b.n	eeb8 <_malloc_r+0x260>
    f0fc:	1089      	asrs	r1, r1, #2
    f0fe:	3b02      	subs	r3, #2
    f100:	408b      	lsls	r3, r1
    f102:	6872      	ldr	r2, [r6, #4]
    f104:	4313      	orrs	r3, r2
    f106:	6073      	str	r3, [r6, #4]
    f108:	4662      	mov	r2, ip
    f10a:	e757      	b.n	efbc <_malloc_r+0x364>
    f10c:	4b2b      	ldr	r3, [pc, #172]	; (f1bc <_malloc_r+0x564>)
    f10e:	4298      	cmp	r0, r3
    f110:	d81c      	bhi.n	f14c <_malloc_r+0x4f4>
    f112:	237c      	movs	r3, #124	; 0x7c
    f114:	4698      	mov	r8, r3
    f116:	0ca8      	lsrs	r0, r5, #18
    f118:	4480      	add	r8, r0
    f11a:	307d      	adds	r0, #125	; 0x7d
    f11c:	00c1      	lsls	r1, r0, #3
    f11e:	e5c2      	b.n	eca6 <_malloc_r+0x4e>
    f120:	3310      	adds	r3, #16
    f122:	9300      	str	r3, [sp, #0]
    f124:	e699      	b.n	ee5a <_malloc_r+0x202>
    f126:	2a54      	cmp	r2, #84	; 0x54
    f128:	d826      	bhi.n	f178 <_malloc_r+0x520>
    f12a:	464b      	mov	r3, r9
    f12c:	0b1a      	lsrs	r2, r3, #12
    f12e:	0011      	movs	r1, r2
    f130:	326f      	adds	r2, #111	; 0x6f
    f132:	316e      	adds	r1, #110	; 0x6e
    f134:	00d2      	lsls	r2, r2, #3
    f136:	e729      	b.n	ef8c <_malloc_r+0x334>
    f138:	051b      	lsls	r3, r3, #20
    f13a:	d000      	beq.n	f13e <_malloc_r+0x4e6>
    f13c:	e6a6      	b.n	ee8c <_malloc_r+0x234>
    f13e:	2001      	movs	r0, #1
    f140:	9b00      	ldr	r3, [sp, #0]
    f142:	68b2      	ldr	r2, [r6, #8]
    f144:	4443      	add	r3, r8
    f146:	4303      	orrs	r3, r0
    f148:	6053      	str	r3, [r2, #4]
    f14a:	e6e6      	b.n	ef1a <_malloc_r+0x2c2>
    f14c:	21fe      	movs	r1, #254	; 0xfe
    f14e:	237e      	movs	r3, #126	; 0x7e
    f150:	207f      	movs	r0, #127	; 0x7f
    f152:	0089      	lsls	r1, r1, #2
    f154:	4698      	mov	r8, r3
    f156:	e5a6      	b.n	eca6 <_malloc_r+0x4e>
    f158:	2300      	movs	r3, #0
    f15a:	2001      	movs	r0, #1
    f15c:	469b      	mov	fp, r3
    f15e:	e6bd      	b.n	eedc <_malloc_r+0x284>
    f160:	0021      	movs	r1, r4
    f162:	0038      	movs	r0, r7
    f164:	3108      	adds	r1, #8
    f166:	f7ff fa1f 	bl	e5a8 <_free_r>
    f16a:	4653      	mov	r3, sl
    f16c:	6819      	ldr	r1, [r3, #0]
    f16e:	e6d4      	b.n	ef1a <_malloc_r+0x2c2>
    f170:	465b      	mov	r3, fp
    f172:	464a      	mov	r2, r9
    f174:	601a      	str	r2, [r3, #0]
    f176:	e694      	b.n	eea2 <_malloc_r+0x24a>
    f178:	21aa      	movs	r1, #170	; 0xaa
    f17a:	0049      	lsls	r1, r1, #1
    f17c:	428a      	cmp	r2, r1
    f17e:	d806      	bhi.n	f18e <_malloc_r+0x536>
    f180:	464b      	mov	r3, r9
    f182:	0bda      	lsrs	r2, r3, #15
    f184:	0011      	movs	r1, r2
    f186:	3278      	adds	r2, #120	; 0x78
    f188:	3177      	adds	r1, #119	; 0x77
    f18a:	00d2      	lsls	r2, r2, #3
    f18c:	e6fe      	b.n	ef8c <_malloc_r+0x334>
    f18e:	490b      	ldr	r1, [pc, #44]	; (f1bc <_malloc_r+0x564>)
    f190:	428a      	cmp	r2, r1
    f192:	d806      	bhi.n	f1a2 <_malloc_r+0x54a>
    f194:	464b      	mov	r3, r9
    f196:	0c9a      	lsrs	r2, r3, #18
    f198:	0011      	movs	r1, r2
    f19a:	327d      	adds	r2, #125	; 0x7d
    f19c:	317c      	adds	r1, #124	; 0x7c
    f19e:	00d2      	lsls	r2, r2, #3
    f1a0:	e6f4      	b.n	ef8c <_malloc_r+0x334>
    f1a2:	22fe      	movs	r2, #254	; 0xfe
    f1a4:	217e      	movs	r1, #126	; 0x7e
    f1a6:	0092      	lsls	r2, r2, #2
    f1a8:	e6f0      	b.n	ef8c <_malloc_r+0x334>
    f1aa:	6873      	ldr	r3, [r6, #4]
    f1ac:	e77e      	b.n	f0ac <_malloc_r+0x454>
    f1ae:	002b      	movs	r3, r5
    f1b0:	08e8      	lsrs	r0, r5, #3
    f1b2:	3308      	adds	r3, #8
    f1b4:	e605      	b.n	edc2 <_malloc_r+0x16a>
    f1b6:	46c0      	nop			; (mov r8, r8)
    f1b8:	20000dac 	.word	0x20000dac
    f1bc:	00000554 	.word	0x00000554

0000f1c0 <_mbrtowc_r>:
    f1c0:	b530      	push	{r4, r5, lr}
    f1c2:	0004      	movs	r4, r0
    f1c4:	b083      	sub	sp, #12
    f1c6:	2a00      	cmp	r2, #0
    f1c8:	d013      	beq.n	f1f2 <_mbrtowc_r+0x32>
    f1ca:	4813      	ldr	r0, [pc, #76]	; (f218 <_mbrtowc_r+0x58>)
    f1cc:	6800      	ldr	r0, [r0, #0]
    f1ce:	6b40      	ldr	r0, [r0, #52]	; 0x34
    f1d0:	2800      	cmp	r0, #0
    f1d2:	d01d      	beq.n	f210 <_mbrtowc_r+0x50>
    f1d4:	9d06      	ldr	r5, [sp, #24]
    f1d6:	9500      	str	r5, [sp, #0]
    f1d8:	25e4      	movs	r5, #228	; 0xe4
    f1da:	5945      	ldr	r5, [r0, r5]
    f1dc:	0020      	movs	r0, r4
    f1de:	47a8      	blx	r5
    f1e0:	1c43      	adds	r3, r0, #1
    f1e2:	d104      	bne.n	f1ee <_mbrtowc_r+0x2e>
    f1e4:	2300      	movs	r3, #0
    f1e6:	9a06      	ldr	r2, [sp, #24]
    f1e8:	6013      	str	r3, [r2, #0]
    f1ea:	338a      	adds	r3, #138	; 0x8a
    f1ec:	6023      	str	r3, [r4, #0]
    f1ee:	b003      	add	sp, #12
    f1f0:	bd30      	pop	{r4, r5, pc}
    f1f2:	4b09      	ldr	r3, [pc, #36]	; (f218 <_mbrtowc_r+0x58>)
    f1f4:	681b      	ldr	r3, [r3, #0]
    f1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f1f8:	2b00      	cmp	r3, #0
    f1fa:	d00b      	beq.n	f214 <_mbrtowc_r+0x54>
    f1fc:	9a06      	ldr	r2, [sp, #24]
    f1fe:	2100      	movs	r1, #0
    f200:	9200      	str	r2, [sp, #0]
    f202:	22e4      	movs	r2, #228	; 0xe4
    f204:	0020      	movs	r0, r4
    f206:	589d      	ldr	r5, [r3, r2]
    f208:	2301      	movs	r3, #1
    f20a:	4a04      	ldr	r2, [pc, #16]	; (f21c <_mbrtowc_r+0x5c>)
    f20c:	47a8      	blx	r5
    f20e:	e7e7      	b.n	f1e0 <_mbrtowc_r+0x20>
    f210:	4803      	ldr	r0, [pc, #12]	; (f220 <_mbrtowc_r+0x60>)
    f212:	e7df      	b.n	f1d4 <_mbrtowc_r+0x14>
    f214:	4b02      	ldr	r3, [pc, #8]	; (f220 <_mbrtowc_r+0x60>)
    f216:	e7f1      	b.n	f1fc <_mbrtowc_r+0x3c>
    f218:	20000080 	.word	0x20000080
    f21c:	000131f8 	.word	0x000131f8
    f220:	200004b4 	.word	0x200004b4

0000f224 <__ascii_mbtowc>:
    f224:	b082      	sub	sp, #8
    f226:	2900      	cmp	r1, #0
    f228:	d00a      	beq.n	f240 <__ascii_mbtowc+0x1c>
    f22a:	2a00      	cmp	r2, #0
    f22c:	d00b      	beq.n	f246 <__ascii_mbtowc+0x22>
    f22e:	2b00      	cmp	r3, #0
    f230:	d00b      	beq.n	f24a <__ascii_mbtowc+0x26>
    f232:	7813      	ldrb	r3, [r2, #0]
    f234:	600b      	str	r3, [r1, #0]
    f236:	7810      	ldrb	r0, [r2, #0]
    f238:	1e43      	subs	r3, r0, #1
    f23a:	4198      	sbcs	r0, r3
    f23c:	b002      	add	sp, #8
    f23e:	4770      	bx	lr
    f240:	a901      	add	r1, sp, #4
    f242:	2a00      	cmp	r2, #0
    f244:	d1f3      	bne.n	f22e <__ascii_mbtowc+0xa>
    f246:	2000      	movs	r0, #0
    f248:	e7f8      	b.n	f23c <__ascii_mbtowc+0x18>
    f24a:	2002      	movs	r0, #2
    f24c:	4240      	negs	r0, r0
    f24e:	e7f5      	b.n	f23c <__ascii_mbtowc+0x18>

0000f250 <memchr>:
    f250:	b570      	push	{r4, r5, r6, lr}
    f252:	b2cd      	uxtb	r5, r1
    f254:	0783      	lsls	r3, r0, #30
    f256:	d034      	beq.n	f2c2 <memchr+0x72>
    f258:	1e54      	subs	r4, r2, #1
    f25a:	2a00      	cmp	r2, #0
    f25c:	d01b      	beq.n	f296 <memchr+0x46>
    f25e:	7803      	ldrb	r3, [r0, #0]
    f260:	42ab      	cmp	r3, r5
    f262:	d019      	beq.n	f298 <memchr+0x48>
    f264:	2203      	movs	r2, #3
    f266:	e004      	b.n	f272 <memchr+0x22>
    f268:	3c01      	subs	r4, #1
    f26a:	d314      	bcc.n	f296 <memchr+0x46>
    f26c:	7803      	ldrb	r3, [r0, #0]
    f26e:	42ab      	cmp	r3, r5
    f270:	d012      	beq.n	f298 <memchr+0x48>
    f272:	3001      	adds	r0, #1
    f274:	4210      	tst	r0, r2
    f276:	d1f7      	bne.n	f268 <memchr+0x18>
    f278:	2c03      	cmp	r4, #3
    f27a:	d80e      	bhi.n	f29a <memchr+0x4a>
    f27c:	2c00      	cmp	r4, #0
    f27e:	d00a      	beq.n	f296 <memchr+0x46>
    f280:	7803      	ldrb	r3, [r0, #0]
    f282:	42ab      	cmp	r3, r5
    f284:	d008      	beq.n	f298 <memchr+0x48>
    f286:	1904      	adds	r4, r0, r4
    f288:	e002      	b.n	f290 <memchr+0x40>
    f28a:	7803      	ldrb	r3, [r0, #0]
    f28c:	42ab      	cmp	r3, r5
    f28e:	d003      	beq.n	f298 <memchr+0x48>
    f290:	3001      	adds	r0, #1
    f292:	4284      	cmp	r4, r0
    f294:	d1f9      	bne.n	f28a <memchr+0x3a>
    f296:	2000      	movs	r0, #0
    f298:	bd70      	pop	{r4, r5, r6, pc}
    f29a:	22ff      	movs	r2, #255	; 0xff
    f29c:	060b      	lsls	r3, r1, #24
    f29e:	0c1b      	lsrs	r3, r3, #16
    f2a0:	4011      	ands	r1, r2
    f2a2:	4319      	orrs	r1, r3
    f2a4:	040b      	lsls	r3, r1, #16
    f2a6:	4e08      	ldr	r6, [pc, #32]	; (f2c8 <memchr+0x78>)
    f2a8:	4319      	orrs	r1, r3
    f2aa:	6803      	ldr	r3, [r0, #0]
    f2ac:	4a07      	ldr	r2, [pc, #28]	; (f2cc <memchr+0x7c>)
    f2ae:	404b      	eors	r3, r1
    f2b0:	189a      	adds	r2, r3, r2
    f2b2:	439a      	bics	r2, r3
    f2b4:	4232      	tst	r2, r6
    f2b6:	d1e3      	bne.n	f280 <memchr+0x30>
    f2b8:	3c04      	subs	r4, #4
    f2ba:	3004      	adds	r0, #4
    f2bc:	2c03      	cmp	r4, #3
    f2be:	d8f4      	bhi.n	f2aa <memchr+0x5a>
    f2c0:	e7dc      	b.n	f27c <memchr+0x2c>
    f2c2:	0014      	movs	r4, r2
    f2c4:	e7d8      	b.n	f278 <memchr+0x28>
    f2c6:	46c0      	nop			; (mov r8, r8)
    f2c8:	80808080 	.word	0x80808080
    f2cc:	fefefeff 	.word	0xfefefeff

0000f2d0 <memmove>:
    f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2d2:	4288      	cmp	r0, r1
    f2d4:	d90a      	bls.n	f2ec <memmove+0x1c>
    f2d6:	188b      	adds	r3, r1, r2
    f2d8:	4298      	cmp	r0, r3
    f2da:	d207      	bcs.n	f2ec <memmove+0x1c>
    f2dc:	1e53      	subs	r3, r2, #1
    f2de:	2a00      	cmp	r2, #0
    f2e0:	d003      	beq.n	f2ea <memmove+0x1a>
    f2e2:	5cca      	ldrb	r2, [r1, r3]
    f2e4:	54c2      	strb	r2, [r0, r3]
    f2e6:	3b01      	subs	r3, #1
    f2e8:	d2fb      	bcs.n	f2e2 <memmove+0x12>
    f2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2ec:	0005      	movs	r5, r0
    f2ee:	2a0f      	cmp	r2, #15
    f2f0:	d808      	bhi.n	f304 <memmove+0x34>
    f2f2:	2a00      	cmp	r2, #0
    f2f4:	d0f9      	beq.n	f2ea <memmove+0x1a>
    f2f6:	2300      	movs	r3, #0
    f2f8:	5ccc      	ldrb	r4, [r1, r3]
    f2fa:	54ec      	strb	r4, [r5, r3]
    f2fc:	3301      	adds	r3, #1
    f2fe:	4293      	cmp	r3, r2
    f300:	d1fa      	bne.n	f2f8 <memmove+0x28>
    f302:	e7f2      	b.n	f2ea <memmove+0x1a>
    f304:	000b      	movs	r3, r1
    f306:	4303      	orrs	r3, r0
    f308:	079b      	lsls	r3, r3, #30
    f30a:	d12d      	bne.n	f368 <memmove+0x98>
    f30c:	0015      	movs	r5, r2
    f30e:	000c      	movs	r4, r1
    f310:	0003      	movs	r3, r0
    f312:	3d10      	subs	r5, #16
    f314:	092f      	lsrs	r7, r5, #4
    f316:	3701      	adds	r7, #1
    f318:	013f      	lsls	r7, r7, #4
    f31a:	19c7      	adds	r7, r0, r7
    f31c:	6826      	ldr	r6, [r4, #0]
    f31e:	601e      	str	r6, [r3, #0]
    f320:	6866      	ldr	r6, [r4, #4]
    f322:	605e      	str	r6, [r3, #4]
    f324:	68a6      	ldr	r6, [r4, #8]
    f326:	609e      	str	r6, [r3, #8]
    f328:	68e6      	ldr	r6, [r4, #12]
    f32a:	3410      	adds	r4, #16
    f32c:	60de      	str	r6, [r3, #12]
    f32e:	3310      	adds	r3, #16
    f330:	429f      	cmp	r7, r3
    f332:	d1f3      	bne.n	f31c <memmove+0x4c>
    f334:	240f      	movs	r4, #15
    f336:	43a5      	bics	r5, r4
    f338:	3510      	adds	r5, #16
    f33a:	1949      	adds	r1, r1, r5
    f33c:	4014      	ands	r4, r2
    f33e:	1945      	adds	r5, r0, r5
    f340:	2c03      	cmp	r4, #3
    f342:	d913      	bls.n	f36c <memmove+0x9c>
    f344:	2300      	movs	r3, #0
    f346:	1f27      	subs	r7, r4, #4
    f348:	08be      	lsrs	r6, r7, #2
    f34a:	3601      	adds	r6, #1
    f34c:	00b6      	lsls	r6, r6, #2
    f34e:	58cc      	ldr	r4, [r1, r3]
    f350:	50ec      	str	r4, [r5, r3]
    f352:	3304      	adds	r3, #4
    f354:	42b3      	cmp	r3, r6
    f356:	d1fa      	bne.n	f34e <memmove+0x7e>
    f358:	2603      	movs	r6, #3
    f35a:	43b7      	bics	r7, r6
    f35c:	1d3c      	adds	r4, r7, #4
    f35e:	1909      	adds	r1, r1, r4
    f360:	192d      	adds	r5, r5, r4
    f362:	4032      	ands	r2, r6
    f364:	d1c7      	bne.n	f2f6 <memmove+0x26>
    f366:	e7c0      	b.n	f2ea <memmove+0x1a>
    f368:	0005      	movs	r5, r0
    f36a:	e7c4      	b.n	f2f6 <memmove+0x26>
    f36c:	0022      	movs	r2, r4
    f36e:	e7c0      	b.n	f2f2 <memmove+0x22>

0000f370 <__malloc_lock>:
    f370:	b510      	push	{r4, lr}
    f372:	4802      	ldr	r0, [pc, #8]	; (f37c <__malloc_lock+0xc>)
    f374:	f7ff fbe0 	bl	eb38 <__retarget_lock_acquire_recursive>
    f378:	bd10      	pop	{r4, pc}
    f37a:	46c0      	nop			; (mov r8, r8)
    f37c:	200018c8 	.word	0x200018c8

0000f380 <__malloc_unlock>:
    f380:	b510      	push	{r4, lr}
    f382:	4802      	ldr	r0, [pc, #8]	; (f38c <__malloc_unlock+0xc>)
    f384:	f7ff fbda 	bl	eb3c <__retarget_lock_release_recursive>
    f388:	bd10      	pop	{r4, pc}
    f38a:	46c0      	nop			; (mov r8, r8)
    f38c:	200018c8 	.word	0x200018c8

0000f390 <_Balloc>:
    f390:	b570      	push	{r4, r5, r6, lr}
    f392:	0004      	movs	r4, r0
    f394:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    f396:	000d      	movs	r5, r1
    f398:	2800      	cmp	r0, #0
    f39a:	d00a      	beq.n	f3b2 <_Balloc+0x22>
    f39c:	00ab      	lsls	r3, r5, #2
    f39e:	18c3      	adds	r3, r0, r3
    f3a0:	6818      	ldr	r0, [r3, #0]
    f3a2:	2800      	cmp	r0, #0
    f3a4:	d00f      	beq.n	f3c6 <_Balloc+0x36>
    f3a6:	6802      	ldr	r2, [r0, #0]
    f3a8:	601a      	str	r2, [r3, #0]
    f3aa:	2300      	movs	r3, #0
    f3ac:	6103      	str	r3, [r0, #16]
    f3ae:	60c3      	str	r3, [r0, #12]
    f3b0:	bd70      	pop	{r4, r5, r6, pc}
    f3b2:	2221      	movs	r2, #33	; 0x21
    f3b4:	2104      	movs	r1, #4
    f3b6:	0020      	movs	r0, r4
    f3b8:	f002 fb16 	bl	119e8 <_calloc_r>
    f3bc:	64e0      	str	r0, [r4, #76]	; 0x4c
    f3be:	2800      	cmp	r0, #0
    f3c0:	d1ec      	bne.n	f39c <_Balloc+0xc>
    f3c2:	2000      	movs	r0, #0
    f3c4:	e7f4      	b.n	f3b0 <_Balloc+0x20>
    f3c6:	2601      	movs	r6, #1
    f3c8:	40ae      	lsls	r6, r5
    f3ca:	1d72      	adds	r2, r6, #5
    f3cc:	0092      	lsls	r2, r2, #2
    f3ce:	2101      	movs	r1, #1
    f3d0:	0020      	movs	r0, r4
    f3d2:	f002 fb09 	bl	119e8 <_calloc_r>
    f3d6:	2800      	cmp	r0, #0
    f3d8:	d0f3      	beq.n	f3c2 <_Balloc+0x32>
    f3da:	6045      	str	r5, [r0, #4]
    f3dc:	6086      	str	r6, [r0, #8]
    f3de:	e7e4      	b.n	f3aa <_Balloc+0x1a>

0000f3e0 <_Bfree>:
    f3e0:	2900      	cmp	r1, #0
    f3e2:	d006      	beq.n	f3f2 <_Bfree+0x12>
    f3e4:	684b      	ldr	r3, [r1, #4]
    f3e6:	009a      	lsls	r2, r3, #2
    f3e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    f3ea:	189b      	adds	r3, r3, r2
    f3ec:	681a      	ldr	r2, [r3, #0]
    f3ee:	600a      	str	r2, [r1, #0]
    f3f0:	6019      	str	r1, [r3, #0]
    f3f2:	4770      	bx	lr

0000f3f4 <__multadd>:
    f3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3f6:	46ce      	mov	lr, r9
    f3f8:	4647      	mov	r7, r8
    f3fa:	4681      	mov	r9, r0
    f3fc:	0008      	movs	r0, r1
    f3fe:	b580      	push	{r7, lr}
    f400:	000d      	movs	r5, r1
    f402:	690c      	ldr	r4, [r1, #16]
    f404:	001f      	movs	r7, r3
    f406:	2100      	movs	r1, #0
    f408:	3014      	adds	r0, #20
    f40a:	6803      	ldr	r3, [r0, #0]
    f40c:	3101      	adds	r1, #1
    f40e:	041e      	lsls	r6, r3, #16
    f410:	0c36      	lsrs	r6, r6, #16
    f412:	4356      	muls	r6, r2
    f414:	0c1b      	lsrs	r3, r3, #16
    f416:	4353      	muls	r3, r2
    f418:	19f6      	adds	r6, r6, r7
    f41a:	0c37      	lsrs	r7, r6, #16
    f41c:	19db      	adds	r3, r3, r7
    f41e:	0436      	lsls	r6, r6, #16
    f420:	0c1f      	lsrs	r7, r3, #16
    f422:	0c36      	lsrs	r6, r6, #16
    f424:	041b      	lsls	r3, r3, #16
    f426:	199b      	adds	r3, r3, r6
    f428:	c008      	stmia	r0!, {r3}
    f42a:	428c      	cmp	r4, r1
    f42c:	dced      	bgt.n	f40a <__multadd+0x16>
    f42e:	2f00      	cmp	r7, #0
    f430:	d008      	beq.n	f444 <__multadd+0x50>
    f432:	68ab      	ldr	r3, [r5, #8]
    f434:	429c      	cmp	r4, r3
    f436:	da0a      	bge.n	f44e <__multadd+0x5a>
    f438:	1d23      	adds	r3, r4, #4
    f43a:	009b      	lsls	r3, r3, #2
    f43c:	18eb      	adds	r3, r5, r3
    f43e:	3401      	adds	r4, #1
    f440:	605f      	str	r7, [r3, #4]
    f442:	612c      	str	r4, [r5, #16]
    f444:	0028      	movs	r0, r5
    f446:	bc0c      	pop	{r2, r3}
    f448:	4690      	mov	r8, r2
    f44a:	4699      	mov	r9, r3
    f44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f44e:	686b      	ldr	r3, [r5, #4]
    f450:	4648      	mov	r0, r9
    f452:	1c59      	adds	r1, r3, #1
    f454:	f7ff ff9c 	bl	f390 <_Balloc>
    f458:	0029      	movs	r1, r5
    f45a:	692b      	ldr	r3, [r5, #16]
    f45c:	4680      	mov	r8, r0
    f45e:	1c9a      	adds	r2, r3, #2
    f460:	0092      	lsls	r2, r2, #2
    f462:	310c      	adds	r1, #12
    f464:	300c      	adds	r0, #12
    f466:	f7f9 f9f5 	bl	8854 <memcpy>
    f46a:	686b      	ldr	r3, [r5, #4]
    f46c:	009a      	lsls	r2, r3, #2
    f46e:	464b      	mov	r3, r9
    f470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f472:	189b      	adds	r3, r3, r2
    f474:	681a      	ldr	r2, [r3, #0]
    f476:	602a      	str	r2, [r5, #0]
    f478:	601d      	str	r5, [r3, #0]
    f47a:	4645      	mov	r5, r8
    f47c:	e7dc      	b.n	f438 <__multadd+0x44>
    f47e:	46c0      	nop			; (mov r8, r8)

0000f480 <__s2b>:
    f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f482:	4647      	mov	r7, r8
    f484:	46ce      	mov	lr, r9
    f486:	0006      	movs	r6, r0
    f488:	0018      	movs	r0, r3
    f48a:	b580      	push	{r7, lr}
    f48c:	000d      	movs	r5, r1
    f48e:	3008      	adds	r0, #8
    f490:	2109      	movs	r1, #9
    f492:	4690      	mov	r8, r2
    f494:	001f      	movs	r7, r3
    f496:	f7f6 fff3 	bl	6480 <__divsi3>
    f49a:	2801      	cmp	r0, #1
    f49c:	dd38      	ble.n	f510 <__s2b+0x90>
    f49e:	2201      	movs	r2, #1
    f4a0:	2100      	movs	r1, #0
    f4a2:	0052      	lsls	r2, r2, #1
    f4a4:	3101      	adds	r1, #1
    f4a6:	4290      	cmp	r0, r2
    f4a8:	dcfb      	bgt.n	f4a2 <__s2b+0x22>
    f4aa:	0030      	movs	r0, r6
    f4ac:	f7ff ff70 	bl	f390 <_Balloc>
    f4b0:	9b08      	ldr	r3, [sp, #32]
    f4b2:	6143      	str	r3, [r0, #20]
    f4b4:	2301      	movs	r3, #1
    f4b6:	6103      	str	r3, [r0, #16]
    f4b8:	4643      	mov	r3, r8
    f4ba:	2b09      	cmp	r3, #9
    f4bc:	dd24      	ble.n	f508 <__s2b+0x88>
    f4be:	2309      	movs	r3, #9
    f4c0:	4699      	mov	r9, r3
    f4c2:	44a9      	add	r9, r5
    f4c4:	464c      	mov	r4, r9
    f4c6:	4445      	add	r5, r8
    f4c8:	7823      	ldrb	r3, [r4, #0]
    f4ca:	0001      	movs	r1, r0
    f4cc:	3b30      	subs	r3, #48	; 0x30
    f4ce:	220a      	movs	r2, #10
    f4d0:	0030      	movs	r0, r6
    f4d2:	3401      	adds	r4, #1
    f4d4:	f7ff ff8e 	bl	f3f4 <__multadd>
    f4d8:	42ac      	cmp	r4, r5
    f4da:	d1f5      	bne.n	f4c8 <__s2b+0x48>
    f4dc:	4645      	mov	r5, r8
    f4de:	3d08      	subs	r5, #8
    f4e0:	444d      	add	r5, r9
    f4e2:	4547      	cmp	r7, r8
    f4e4:	dd0c      	ble.n	f500 <__s2b+0x80>
    f4e6:	4643      	mov	r3, r8
    f4e8:	1aff      	subs	r7, r7, r3
    f4ea:	19ef      	adds	r7, r5, r7
    f4ec:	782b      	ldrb	r3, [r5, #0]
    f4ee:	0001      	movs	r1, r0
    f4f0:	3b30      	subs	r3, #48	; 0x30
    f4f2:	220a      	movs	r2, #10
    f4f4:	0030      	movs	r0, r6
    f4f6:	3501      	adds	r5, #1
    f4f8:	f7ff ff7c 	bl	f3f4 <__multadd>
    f4fc:	42bd      	cmp	r5, r7
    f4fe:	d1f5      	bne.n	f4ec <__s2b+0x6c>
    f500:	bc0c      	pop	{r2, r3}
    f502:	4690      	mov	r8, r2
    f504:	4699      	mov	r9, r3
    f506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f508:	2309      	movs	r3, #9
    f50a:	350a      	adds	r5, #10
    f50c:	4698      	mov	r8, r3
    f50e:	e7e8      	b.n	f4e2 <__s2b+0x62>
    f510:	2100      	movs	r1, #0
    f512:	e7ca      	b.n	f4aa <__s2b+0x2a>

0000f514 <__hi0bits>:
    f514:	0003      	movs	r3, r0
    f516:	0c02      	lsrs	r2, r0, #16
    f518:	2000      	movs	r0, #0
    f51a:	2a00      	cmp	r2, #0
    f51c:	d101      	bne.n	f522 <__hi0bits+0xe>
    f51e:	041b      	lsls	r3, r3, #16
    f520:	3010      	adds	r0, #16
    f522:	0e1a      	lsrs	r2, r3, #24
    f524:	d101      	bne.n	f52a <__hi0bits+0x16>
    f526:	3008      	adds	r0, #8
    f528:	021b      	lsls	r3, r3, #8
    f52a:	0f1a      	lsrs	r2, r3, #28
    f52c:	d101      	bne.n	f532 <__hi0bits+0x1e>
    f52e:	3004      	adds	r0, #4
    f530:	011b      	lsls	r3, r3, #4
    f532:	0f9a      	lsrs	r2, r3, #30
    f534:	d101      	bne.n	f53a <__hi0bits+0x26>
    f536:	3002      	adds	r0, #2
    f538:	009b      	lsls	r3, r3, #2
    f53a:	2b00      	cmp	r3, #0
    f53c:	db03      	blt.n	f546 <__hi0bits+0x32>
    f53e:	3001      	adds	r0, #1
    f540:	005b      	lsls	r3, r3, #1
    f542:	d400      	bmi.n	f546 <__hi0bits+0x32>
    f544:	2020      	movs	r0, #32
    f546:	4770      	bx	lr

0000f548 <__lo0bits>:
    f548:	6803      	ldr	r3, [r0, #0]
    f54a:	075a      	lsls	r2, r3, #29
    f54c:	d009      	beq.n	f562 <__lo0bits+0x1a>
    f54e:	2200      	movs	r2, #0
    f550:	07d9      	lsls	r1, r3, #31
    f552:	d404      	bmi.n	f55e <__lo0bits+0x16>
    f554:	079a      	lsls	r2, r3, #30
    f556:	d420      	bmi.n	f59a <__lo0bits+0x52>
    f558:	2202      	movs	r2, #2
    f55a:	089b      	lsrs	r3, r3, #2
    f55c:	6003      	str	r3, [r0, #0]
    f55e:	0010      	movs	r0, r2
    f560:	4770      	bx	lr
    f562:	0419      	lsls	r1, r3, #16
    f564:	2200      	movs	r2, #0
    f566:	2900      	cmp	r1, #0
    f568:	d101      	bne.n	f56e <__lo0bits+0x26>
    f56a:	0c1b      	lsrs	r3, r3, #16
    f56c:	3210      	adds	r2, #16
    f56e:	21ff      	movs	r1, #255	; 0xff
    f570:	4219      	tst	r1, r3
    f572:	d101      	bne.n	f578 <__lo0bits+0x30>
    f574:	3208      	adds	r2, #8
    f576:	0a1b      	lsrs	r3, r3, #8
    f578:	0719      	lsls	r1, r3, #28
    f57a:	d101      	bne.n	f580 <__lo0bits+0x38>
    f57c:	3204      	adds	r2, #4
    f57e:	091b      	lsrs	r3, r3, #4
    f580:	0799      	lsls	r1, r3, #30
    f582:	d101      	bne.n	f588 <__lo0bits+0x40>
    f584:	3202      	adds	r2, #2
    f586:	089b      	lsrs	r3, r3, #2
    f588:	07d9      	lsls	r1, r3, #31
    f58a:	d404      	bmi.n	f596 <__lo0bits+0x4e>
    f58c:	085b      	lsrs	r3, r3, #1
    f58e:	d101      	bne.n	f594 <__lo0bits+0x4c>
    f590:	2220      	movs	r2, #32
    f592:	e7e4      	b.n	f55e <__lo0bits+0x16>
    f594:	3201      	adds	r2, #1
    f596:	6003      	str	r3, [r0, #0]
    f598:	e7e1      	b.n	f55e <__lo0bits+0x16>
    f59a:	085b      	lsrs	r3, r3, #1
    f59c:	6003      	str	r3, [r0, #0]
    f59e:	2201      	movs	r2, #1
    f5a0:	e7dd      	b.n	f55e <__lo0bits+0x16>
    f5a2:	46c0      	nop			; (mov r8, r8)

0000f5a4 <__i2b>:
    f5a4:	b510      	push	{r4, lr}
    f5a6:	000c      	movs	r4, r1
    f5a8:	2101      	movs	r1, #1
    f5aa:	f7ff fef1 	bl	f390 <_Balloc>
    f5ae:	2301      	movs	r3, #1
    f5b0:	6144      	str	r4, [r0, #20]
    f5b2:	6103      	str	r3, [r0, #16]
    f5b4:	bd10      	pop	{r4, pc}
    f5b6:	46c0      	nop			; (mov r8, r8)

0000f5b8 <__multiply>:
    f5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f5ba:	4657      	mov	r7, sl
    f5bc:	464e      	mov	r6, r9
    f5be:	4645      	mov	r5, r8
    f5c0:	46de      	mov	lr, fp
    f5c2:	b5e0      	push	{r5, r6, r7, lr}
    f5c4:	6914      	ldr	r4, [r2, #16]
    f5c6:	690e      	ldr	r6, [r1, #16]
    f5c8:	b085      	sub	sp, #20
    f5ca:	000f      	movs	r7, r1
    f5cc:	0015      	movs	r5, r2
    f5ce:	42a6      	cmp	r6, r4
    f5d0:	da04      	bge.n	f5dc <__multiply+0x24>
    f5d2:	0033      	movs	r3, r6
    f5d4:	0017      	movs	r7, r2
    f5d6:	0026      	movs	r6, r4
    f5d8:	000d      	movs	r5, r1
    f5da:	001c      	movs	r4, r3
    f5dc:	1933      	adds	r3, r6, r4
    f5de:	4698      	mov	r8, r3
    f5e0:	68bb      	ldr	r3, [r7, #8]
    f5e2:	6879      	ldr	r1, [r7, #4]
    f5e4:	4598      	cmp	r8, r3
    f5e6:	dd00      	ble.n	f5ea <__multiply+0x32>
    f5e8:	3101      	adds	r1, #1
    f5ea:	f7ff fed1 	bl	f390 <_Balloc>
    f5ee:	2214      	movs	r2, #20
    f5f0:	0003      	movs	r3, r0
    f5f2:	4694      	mov	ip, r2
    f5f4:	4463      	add	r3, ip
    f5f6:	469b      	mov	fp, r3
    f5f8:	4643      	mov	r3, r8
    f5fa:	009b      	lsls	r3, r3, #2
    f5fc:	445b      	add	r3, fp
    f5fe:	0019      	movs	r1, r3
    f600:	9302      	str	r3, [sp, #8]
    f602:	9003      	str	r0, [sp, #12]
    f604:	465b      	mov	r3, fp
    f606:	2200      	movs	r2, #0
    f608:	458b      	cmp	fp, r1
    f60a:	d203      	bcs.n	f614 <__multiply+0x5c>
    f60c:	9902      	ldr	r1, [sp, #8]
    f60e:	c304      	stmia	r3!, {r2}
    f610:	4299      	cmp	r1, r3
    f612:	d8fc      	bhi.n	f60e <__multiply+0x56>
    f614:	2314      	movs	r3, #20
    f616:	00a4      	lsls	r4, r4, #2
    f618:	469a      	mov	sl, r3
    f61a:	3714      	adds	r7, #20
    f61c:	0023      	movs	r3, r4
    f61e:	46bc      	mov	ip, r7
    f620:	44aa      	add	sl, r5
    f622:	00b6      	lsls	r6, r6, #2
    f624:	4453      	add	r3, sl
    f626:	9700      	str	r7, [sp, #0]
    f628:	44b4      	add	ip, r6
    f62a:	9301      	str	r3, [sp, #4]
    f62c:	459a      	cmp	sl, r3
    f62e:	d24f      	bcs.n	f6d0 <__multiply+0x118>
    f630:	4653      	mov	r3, sl
    f632:	681b      	ldr	r3, [r3, #0]
    f634:	041e      	lsls	r6, r3, #16
    f636:	0c36      	lsrs	r6, r6, #16
    f638:	d020      	beq.n	f67c <__multiply+0xc4>
    f63a:	465c      	mov	r4, fp
    f63c:	2700      	movs	r7, #0
    f63e:	9d00      	ldr	r5, [sp, #0]
    f640:	0021      	movs	r1, r4
    f642:	cc08      	ldmia	r4!, {r3}
    f644:	cd04      	ldmia	r5!, {r2}
    f646:	4699      	mov	r9, r3
    f648:	4648      	mov	r0, r9
    f64a:	0413      	lsls	r3, r2, #16
    f64c:	0c1b      	lsrs	r3, r3, #16
    f64e:	4373      	muls	r3, r6
    f650:	0400      	lsls	r0, r0, #16
    f652:	0c00      	lsrs	r0, r0, #16
    f654:	181b      	adds	r3, r3, r0
    f656:	19d8      	adds	r0, r3, r7
    f658:	0c13      	lsrs	r3, r2, #16
    f65a:	464a      	mov	r2, r9
    f65c:	4373      	muls	r3, r6
    f65e:	0c12      	lsrs	r2, r2, #16
    f660:	189b      	adds	r3, r3, r2
    f662:	0c02      	lsrs	r2, r0, #16
    f664:	189b      	adds	r3, r3, r2
    f666:	0402      	lsls	r2, r0, #16
    f668:	0c1f      	lsrs	r7, r3, #16
    f66a:	0c12      	lsrs	r2, r2, #16
    f66c:	041b      	lsls	r3, r3, #16
    f66e:	4313      	orrs	r3, r2
    f670:	600b      	str	r3, [r1, #0]
    f672:	45ac      	cmp	ip, r5
    f674:	d8e4      	bhi.n	f640 <__multiply+0x88>
    f676:	4653      	mov	r3, sl
    f678:	6027      	str	r7, [r4, #0]
    f67a:	681b      	ldr	r3, [r3, #0]
    f67c:	0c1e      	lsrs	r6, r3, #16
    f67e:	d020      	beq.n	f6c2 <__multiply+0x10a>
    f680:	465b      	mov	r3, fp
    f682:	2100      	movs	r1, #0
    f684:	681b      	ldr	r3, [r3, #0]
    f686:	465c      	mov	r4, fp
    f688:	0018      	movs	r0, r3
    f68a:	000f      	movs	r7, r1
    f68c:	4662      	mov	r2, ip
    f68e:	9d00      	ldr	r5, [sp, #0]
    f690:	8829      	ldrh	r1, [r5, #0]
    f692:	0c00      	lsrs	r0, r0, #16
    f694:	4371      	muls	r1, r6
    f696:	1809      	adds	r1, r1, r0
    f698:	19c9      	adds	r1, r1, r7
    f69a:	041b      	lsls	r3, r3, #16
    f69c:	0408      	lsls	r0, r1, #16
    f69e:	0c1b      	lsrs	r3, r3, #16
    f6a0:	4303      	orrs	r3, r0
    f6a2:	6023      	str	r3, [r4, #0]
    f6a4:	cd08      	ldmia	r5!, {r3}
    f6a6:	6860      	ldr	r0, [r4, #4]
    f6a8:	0c1b      	lsrs	r3, r3, #16
    f6aa:	4373      	muls	r3, r6
    f6ac:	0407      	lsls	r7, r0, #16
    f6ae:	0c3f      	lsrs	r7, r7, #16
    f6b0:	19db      	adds	r3, r3, r7
    f6b2:	0c09      	lsrs	r1, r1, #16
    f6b4:	185b      	adds	r3, r3, r1
    f6b6:	0c1f      	lsrs	r7, r3, #16
    f6b8:	3404      	adds	r4, #4
    f6ba:	42aa      	cmp	r2, r5
    f6bc:	d8e8      	bhi.n	f690 <__multiply+0xd8>
    f6be:	4694      	mov	ip, r2
    f6c0:	6023      	str	r3, [r4, #0]
    f6c2:	2304      	movs	r3, #4
    f6c4:	4699      	mov	r9, r3
    f6c6:	9b01      	ldr	r3, [sp, #4]
    f6c8:	44ca      	add	sl, r9
    f6ca:	44cb      	add	fp, r9
    f6cc:	4553      	cmp	r3, sl
    f6ce:	d8af      	bhi.n	f630 <__multiply+0x78>
    f6d0:	4643      	mov	r3, r8
    f6d2:	2b00      	cmp	r3, #0
    f6d4:	dd0e      	ble.n	f6f4 <__multiply+0x13c>
    f6d6:	9b02      	ldr	r3, [sp, #8]
    f6d8:	3b04      	subs	r3, #4
    f6da:	681a      	ldr	r2, [r3, #0]
    f6dc:	2a00      	cmp	r2, #0
    f6de:	d109      	bne.n	f6f4 <__multiply+0x13c>
    f6e0:	4642      	mov	r2, r8
    f6e2:	e003      	b.n	f6ec <__multiply+0x134>
    f6e4:	3b04      	subs	r3, #4
    f6e6:	6819      	ldr	r1, [r3, #0]
    f6e8:	2900      	cmp	r1, #0
    f6ea:	d102      	bne.n	f6f2 <__multiply+0x13a>
    f6ec:	3a01      	subs	r2, #1
    f6ee:	2a00      	cmp	r2, #0
    f6f0:	d1f8      	bne.n	f6e4 <__multiply+0x12c>
    f6f2:	4690      	mov	r8, r2
    f6f4:	9b03      	ldr	r3, [sp, #12]
    f6f6:	4642      	mov	r2, r8
    f6f8:	0018      	movs	r0, r3
    f6fa:	611a      	str	r2, [r3, #16]
    f6fc:	b005      	add	sp, #20
    f6fe:	bc3c      	pop	{r2, r3, r4, r5}
    f700:	4690      	mov	r8, r2
    f702:	4699      	mov	r9, r3
    f704:	46a2      	mov	sl, r4
    f706:	46ab      	mov	fp, r5
    f708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f70a:	46c0      	nop			; (mov r8, r8)

0000f70c <__pow5mult>:
    f70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f70e:	4647      	mov	r7, r8
    f710:	46ce      	mov	lr, r9
    f712:	2303      	movs	r3, #3
    f714:	b580      	push	{r7, lr}
    f716:	4680      	mov	r8, r0
    f718:	000f      	movs	r7, r1
    f71a:	0014      	movs	r4, r2
    f71c:	4013      	ands	r3, r2
    f71e:	d13a      	bne.n	f796 <__pow5mult+0x8a>
    f720:	10a4      	asrs	r4, r4, #2
    f722:	003e      	movs	r6, r7
    f724:	2c00      	cmp	r4, #0
    f726:	d025      	beq.n	f774 <__pow5mult+0x68>
    f728:	4643      	mov	r3, r8
    f72a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    f72c:	2d00      	cmp	r5, #0
    f72e:	d03b      	beq.n	f7a8 <__pow5mult+0x9c>
    f730:	003e      	movs	r6, r7
    f732:	2300      	movs	r3, #0
    f734:	2701      	movs	r7, #1
    f736:	4699      	mov	r9, r3
    f738:	4227      	tst	r7, r4
    f73a:	d107      	bne.n	f74c <__pow5mult+0x40>
    f73c:	1064      	asrs	r4, r4, #1
    f73e:	d019      	beq.n	f774 <__pow5mult+0x68>
    f740:	6828      	ldr	r0, [r5, #0]
    f742:	2800      	cmp	r0, #0
    f744:	d01b      	beq.n	f77e <__pow5mult+0x72>
    f746:	0005      	movs	r5, r0
    f748:	4227      	tst	r7, r4
    f74a:	d0f7      	beq.n	f73c <__pow5mult+0x30>
    f74c:	002a      	movs	r2, r5
    f74e:	0031      	movs	r1, r6
    f750:	4640      	mov	r0, r8
    f752:	f7ff ff31 	bl	f5b8 <__multiply>
    f756:	2e00      	cmp	r6, #0
    f758:	d01b      	beq.n	f792 <__pow5mult+0x86>
    f75a:	4642      	mov	r2, r8
    f75c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    f75e:	6873      	ldr	r3, [r6, #4]
    f760:	4694      	mov	ip, r2
    f762:	009b      	lsls	r3, r3, #2
    f764:	4463      	add	r3, ip
    f766:	681a      	ldr	r2, [r3, #0]
    f768:	1064      	asrs	r4, r4, #1
    f76a:	6032      	str	r2, [r6, #0]
    f76c:	601e      	str	r6, [r3, #0]
    f76e:	0006      	movs	r6, r0
    f770:	2c00      	cmp	r4, #0
    f772:	d1e5      	bne.n	f740 <__pow5mult+0x34>
    f774:	0030      	movs	r0, r6
    f776:	bc0c      	pop	{r2, r3}
    f778:	4690      	mov	r8, r2
    f77a:	4699      	mov	r9, r3
    f77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f77e:	002a      	movs	r2, r5
    f780:	0029      	movs	r1, r5
    f782:	4640      	mov	r0, r8
    f784:	f7ff ff18 	bl	f5b8 <__multiply>
    f788:	464b      	mov	r3, r9
    f78a:	6028      	str	r0, [r5, #0]
    f78c:	6003      	str	r3, [r0, #0]
    f78e:	0005      	movs	r5, r0
    f790:	e7da      	b.n	f748 <__pow5mult+0x3c>
    f792:	0006      	movs	r6, r0
    f794:	e7d2      	b.n	f73c <__pow5mult+0x30>
    f796:	4a0b      	ldr	r2, [pc, #44]	; (f7c4 <__pow5mult+0xb8>)
    f798:	3b01      	subs	r3, #1
    f79a:	009b      	lsls	r3, r3, #2
    f79c:	589a      	ldr	r2, [r3, r2]
    f79e:	2300      	movs	r3, #0
    f7a0:	f7ff fe28 	bl	f3f4 <__multadd>
    f7a4:	0007      	movs	r7, r0
    f7a6:	e7bb      	b.n	f720 <__pow5mult+0x14>
    f7a8:	2101      	movs	r1, #1
    f7aa:	4640      	mov	r0, r8
    f7ac:	f7ff fdf0 	bl	f390 <_Balloc>
    f7b0:	4b05      	ldr	r3, [pc, #20]	; (f7c8 <__pow5mult+0xbc>)
    f7b2:	0005      	movs	r5, r0
    f7b4:	6143      	str	r3, [r0, #20]
    f7b6:	2301      	movs	r3, #1
    f7b8:	6103      	str	r3, [r0, #16]
    f7ba:	4643      	mov	r3, r8
    f7bc:	6498      	str	r0, [r3, #72]	; 0x48
    f7be:	2300      	movs	r3, #0
    f7c0:	6003      	str	r3, [r0, #0]
    f7c2:	e7b5      	b.n	f730 <__pow5mult+0x24>
    f7c4:	000159d8 	.word	0x000159d8
    f7c8:	00000271 	.word	0x00000271

0000f7cc <__lshift>:
    f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7ce:	464e      	mov	r6, r9
    f7d0:	4645      	mov	r5, r8
    f7d2:	46de      	mov	lr, fp
    f7d4:	4657      	mov	r7, sl
    f7d6:	b5e0      	push	{r5, r6, r7, lr}
    f7d8:	000e      	movs	r6, r1
    f7da:	6933      	ldr	r3, [r6, #16]
    f7dc:	1154      	asrs	r4, r2, #5
    f7de:	4698      	mov	r8, r3
    f7e0:	44a0      	add	r8, r4
    f7e2:	4643      	mov	r3, r8
    f7e4:	1c5d      	adds	r5, r3, #1
    f7e6:	68b3      	ldr	r3, [r6, #8]
    f7e8:	4683      	mov	fp, r0
    f7ea:	4691      	mov	r9, r2
    f7ec:	6849      	ldr	r1, [r1, #4]
    f7ee:	429d      	cmp	r5, r3
    f7f0:	dd03      	ble.n	f7fa <__lshift+0x2e>
    f7f2:	3101      	adds	r1, #1
    f7f4:	005b      	lsls	r3, r3, #1
    f7f6:	429d      	cmp	r5, r3
    f7f8:	dcfb      	bgt.n	f7f2 <__lshift+0x26>
    f7fa:	4658      	mov	r0, fp
    f7fc:	f7ff fdc8 	bl	f390 <_Balloc>
    f800:	0003      	movs	r3, r0
    f802:	4684      	mov	ip, r0
    f804:	3314      	adds	r3, #20
    f806:	2c00      	cmp	r4, #0
    f808:	dd06      	ble.n	f818 <__lshift+0x4c>
    f80a:	2100      	movs	r1, #0
    f80c:	00a4      	lsls	r4, r4, #2
    f80e:	001a      	movs	r2, r3
    f810:	191b      	adds	r3, r3, r4
    f812:	c202      	stmia	r2!, {r1}
    f814:	4293      	cmp	r3, r2
    f816:	d1fc      	bne.n	f812 <__lshift+0x46>
    f818:	6932      	ldr	r2, [r6, #16]
    f81a:	4648      	mov	r0, r9
    f81c:	0097      	lsls	r7, r2, #2
    f81e:	0031      	movs	r1, r6
    f820:	221f      	movs	r2, #31
    f822:	3114      	adds	r1, #20
    f824:	4010      	ands	r0, r2
    f826:	19cf      	adds	r7, r1, r7
    f828:	4681      	mov	r9, r0
    f82a:	2800      	cmp	r0, #0
    f82c:	d025      	beq.n	f87a <__lshift+0xae>
    f82e:	2220      	movs	r2, #32
    f830:	1a12      	subs	r2, r2, r0
    f832:	4692      	mov	sl, r2
    f834:	2200      	movs	r2, #0
    f836:	4648      	mov	r0, r9
    f838:	680c      	ldr	r4, [r1, #0]
    f83a:	4084      	lsls	r4, r0
    f83c:	4650      	mov	r0, sl
    f83e:	4314      	orrs	r4, r2
    f840:	601c      	str	r4, [r3, #0]
    f842:	c904      	ldmia	r1!, {r2}
    f844:	3304      	adds	r3, #4
    f846:	40c2      	lsrs	r2, r0
    f848:	428f      	cmp	r7, r1
    f84a:	d8f4      	bhi.n	f836 <__lshift+0x6a>
    f84c:	601a      	str	r2, [r3, #0]
    f84e:	2a00      	cmp	r2, #0
    f850:	d001      	beq.n	f856 <__lshift+0x8a>
    f852:	4645      	mov	r5, r8
    f854:	3502      	adds	r5, #2
    f856:	4663      	mov	r3, ip
    f858:	3d01      	subs	r5, #1
    f85a:	611d      	str	r5, [r3, #16]
    f85c:	6873      	ldr	r3, [r6, #4]
    f85e:	4660      	mov	r0, ip
    f860:	009a      	lsls	r2, r3, #2
    f862:	465b      	mov	r3, fp
    f864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    f866:	189b      	adds	r3, r3, r2
    f868:	681a      	ldr	r2, [r3, #0]
    f86a:	6032      	str	r2, [r6, #0]
    f86c:	601e      	str	r6, [r3, #0]
    f86e:	bc3c      	pop	{r2, r3, r4, r5}
    f870:	4690      	mov	r8, r2
    f872:	4699      	mov	r9, r3
    f874:	46a2      	mov	sl, r4
    f876:	46ab      	mov	fp, r5
    f878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f87a:	c904      	ldmia	r1!, {r2}
    f87c:	c304      	stmia	r3!, {r2}
    f87e:	428f      	cmp	r7, r1
    f880:	d9e9      	bls.n	f856 <__lshift+0x8a>
    f882:	c904      	ldmia	r1!, {r2}
    f884:	c304      	stmia	r3!, {r2}
    f886:	428f      	cmp	r7, r1
    f888:	d8f7      	bhi.n	f87a <__lshift+0xae>
    f88a:	e7e4      	b.n	f856 <__lshift+0x8a>

0000f88c <__mcmp>:
    f88c:	690a      	ldr	r2, [r1, #16]
    f88e:	6903      	ldr	r3, [r0, #16]
    f890:	b530      	push	{r4, r5, lr}
    f892:	0005      	movs	r5, r0
    f894:	1a98      	subs	r0, r3, r2
    f896:	d111      	bne.n	f8bc <__mcmp+0x30>
    f898:	0092      	lsls	r2, r2, #2
    f89a:	3514      	adds	r5, #20
    f89c:	3114      	adds	r1, #20
    f89e:	18ab      	adds	r3, r5, r2
    f8a0:	1889      	adds	r1, r1, r2
    f8a2:	e001      	b.n	f8a8 <__mcmp+0x1c>
    f8a4:	429d      	cmp	r5, r3
    f8a6:	d209      	bcs.n	f8bc <__mcmp+0x30>
    f8a8:	3b04      	subs	r3, #4
    f8aa:	3904      	subs	r1, #4
    f8ac:	681c      	ldr	r4, [r3, #0]
    f8ae:	680a      	ldr	r2, [r1, #0]
    f8b0:	4294      	cmp	r4, r2
    f8b2:	d0f7      	beq.n	f8a4 <__mcmp+0x18>
    f8b4:	4294      	cmp	r4, r2
    f8b6:	4180      	sbcs	r0, r0
    f8b8:	2201      	movs	r2, #1
    f8ba:	4310      	orrs	r0, r2
    f8bc:	bd30      	pop	{r4, r5, pc}
    f8be:	46c0      	nop			; (mov r8, r8)

0000f8c0 <__mdiff>:
    f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8c2:	4645      	mov	r5, r8
    f8c4:	46de      	mov	lr, fp
    f8c6:	4657      	mov	r7, sl
    f8c8:	464e      	mov	r6, r9
    f8ca:	0014      	movs	r4, r2
    f8cc:	690b      	ldr	r3, [r1, #16]
    f8ce:	6912      	ldr	r2, [r2, #16]
    f8d0:	b5e0      	push	{r5, r6, r7, lr}
    f8d2:	4688      	mov	r8, r1
    f8d4:	1a9d      	subs	r5, r3, r2
    f8d6:	d11a      	bne.n	f90e <__mdiff+0x4e>
    f8d8:	000f      	movs	r7, r1
    f8da:	2114      	movs	r1, #20
    f8dc:	468c      	mov	ip, r1
    f8de:	0092      	lsls	r2, r2, #2
    f8e0:	3714      	adds	r7, #20
    f8e2:	44a4      	add	ip, r4
    f8e4:	18bb      	adds	r3, r7, r2
    f8e6:	4462      	add	r2, ip
    f8e8:	e002      	b.n	f8f0 <__mdiff+0x30>
    f8ea:	429f      	cmp	r7, r3
    f8ec:	d300      	bcc.n	f8f0 <__mdiff+0x30>
    f8ee:	e070      	b.n	f9d2 <__mdiff+0x112>
    f8f0:	3b04      	subs	r3, #4
    f8f2:	3a04      	subs	r2, #4
    f8f4:	681e      	ldr	r6, [r3, #0]
    f8f6:	6811      	ldr	r1, [r2, #0]
    f8f8:	428e      	cmp	r6, r1
    f8fa:	d0f6      	beq.n	f8ea <__mdiff+0x2a>
    f8fc:	d300      	bcc.n	f900 <__mdiff+0x40>
    f8fe:	e071      	b.n	f9e4 <__mdiff+0x124>
    f900:	4643      	mov	r3, r8
    f902:	003e      	movs	r6, r7
    f904:	46a0      	mov	r8, r4
    f906:	4667      	mov	r7, ip
    f908:	001c      	movs	r4, r3
    f90a:	2501      	movs	r5, #1
    f90c:	e006      	b.n	f91c <__mdiff+0x5c>
    f90e:	2d00      	cmp	r5, #0
    f910:	db6a      	blt.n	f9e8 <__mdiff+0x128>
    f912:	4647      	mov	r7, r8
    f914:	0026      	movs	r6, r4
    f916:	2500      	movs	r5, #0
    f918:	3714      	adds	r7, #20
    f91a:	3614      	adds	r6, #20
    f91c:	4643      	mov	r3, r8
    f91e:	6859      	ldr	r1, [r3, #4]
    f920:	f7ff fd36 	bl	f390 <_Balloc>
    f924:	4643      	mov	r3, r8
    f926:	4681      	mov	r9, r0
    f928:	60c5      	str	r5, [r0, #12]
    f92a:	6918      	ldr	r0, [r3, #16]
    f92c:	464d      	mov	r5, r9
    f92e:	0083      	lsls	r3, r0, #2
    f930:	469c      	mov	ip, r3
    f932:	6923      	ldr	r3, [r4, #16]
    f934:	44bc      	add	ip, r7
    f936:	009b      	lsls	r3, r3, #2
    f938:	4698      	mov	r8, r3
    f93a:	2300      	movs	r3, #0
    f93c:	44b0      	add	r8, r6
    f93e:	3514      	adds	r5, #20
    f940:	469a      	mov	sl, r3
    f942:	e000      	b.n	f946 <__mdiff+0x86>
    f944:	0027      	movs	r7, r4
    f946:	ce04      	ldmia	r6!, {r2}
    f948:	003c      	movs	r4, r7
    f94a:	4693      	mov	fp, r2
    f94c:	4659      	mov	r1, fp
    f94e:	cc08      	ldmia	r4!, {r3}
    f950:	0409      	lsls	r1, r1, #16
    f952:	041a      	lsls	r2, r3, #16
    f954:	0c12      	lsrs	r2, r2, #16
    f956:	4452      	add	r2, sl
    f958:	0c09      	lsrs	r1, r1, #16
    f95a:	1a52      	subs	r2, r2, r1
    f95c:	0c19      	lsrs	r1, r3, #16
    f95e:	465b      	mov	r3, fp
    f960:	0c1b      	lsrs	r3, r3, #16
    f962:	1acb      	subs	r3, r1, r3
    f964:	1411      	asrs	r1, r2, #16
    f966:	185b      	adds	r3, r3, r1
    f968:	0412      	lsls	r2, r2, #16
    f96a:	1419      	asrs	r1, r3, #16
    f96c:	0c12      	lsrs	r2, r2, #16
    f96e:	041b      	lsls	r3, r3, #16
    f970:	468a      	mov	sl, r1
    f972:	4313      	orrs	r3, r2
    f974:	1d29      	adds	r1, r5, #4
    f976:	602b      	str	r3, [r5, #0]
    f978:	000d      	movs	r5, r1
    f97a:	45b0      	cmp	r8, r6
    f97c:	d8e2      	bhi.n	f944 <__mdiff+0x84>
    f97e:	45a4      	cmp	ip, r4
    f980:	d916      	bls.n	f9b0 <__mdiff+0xf0>
    f982:	cc08      	ldmia	r4!, {r3}
    f984:	041a      	lsls	r2, r3, #16
    f986:	0c12      	lsrs	r2, r2, #16
    f988:	4452      	add	r2, sl
    f98a:	1416      	asrs	r6, r2, #16
    f98c:	0c1b      	lsrs	r3, r3, #16
    f98e:	199b      	adds	r3, r3, r6
    f990:	0412      	lsls	r2, r2, #16
    f992:	141e      	asrs	r6, r3, #16
    f994:	0c12      	lsrs	r2, r2, #16
    f996:	041b      	lsls	r3, r3, #16
    f998:	4313      	orrs	r3, r2
    f99a:	46b2      	mov	sl, r6
    f99c:	c508      	stmia	r5!, {r3}
    f99e:	45a4      	cmp	ip, r4
    f9a0:	d8ef      	bhi.n	f982 <__mdiff+0xc2>
    f9a2:	4662      	mov	r2, ip
    f9a4:	2403      	movs	r4, #3
    f9a6:	1bd2      	subs	r2, r2, r7
    f9a8:	3a05      	subs	r2, #5
    f9aa:	43a2      	bics	r2, r4
    f9ac:	3204      	adds	r2, #4
    f9ae:	1889      	adds	r1, r1, r2
    f9b0:	3904      	subs	r1, #4
    f9b2:	2b00      	cmp	r3, #0
    f9b4:	d104      	bne.n	f9c0 <__mdiff+0x100>
    f9b6:	3904      	subs	r1, #4
    f9b8:	680b      	ldr	r3, [r1, #0]
    f9ba:	3801      	subs	r0, #1
    f9bc:	2b00      	cmp	r3, #0
    f9be:	d0fa      	beq.n	f9b6 <__mdiff+0xf6>
    f9c0:	464b      	mov	r3, r9
    f9c2:	6118      	str	r0, [r3, #16]
    f9c4:	4648      	mov	r0, r9
    f9c6:	bc3c      	pop	{r2, r3, r4, r5}
    f9c8:	4690      	mov	r8, r2
    f9ca:	4699      	mov	r9, r3
    f9cc:	46a2      	mov	sl, r4
    f9ce:	46ab      	mov	fp, r5
    f9d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f9d2:	2100      	movs	r1, #0
    f9d4:	f7ff fcdc 	bl	f390 <_Balloc>
    f9d8:	2301      	movs	r3, #1
    f9da:	6103      	str	r3, [r0, #16]
    f9dc:	2300      	movs	r3, #0
    f9de:	4681      	mov	r9, r0
    f9e0:	6143      	str	r3, [r0, #20]
    f9e2:	e7ef      	b.n	f9c4 <__mdiff+0x104>
    f9e4:	4666      	mov	r6, ip
    f9e6:	e799      	b.n	f91c <__mdiff+0x5c>
    f9e8:	0027      	movs	r7, r4
    f9ea:	000e      	movs	r6, r1
    f9ec:	46a0      	mov	r8, r4
    f9ee:	3714      	adds	r7, #20
    f9f0:	3614      	adds	r6, #20
    f9f2:	000c      	movs	r4, r1
    f9f4:	2501      	movs	r5, #1
    f9f6:	e791      	b.n	f91c <__mdiff+0x5c>

0000f9f8 <__ulp>:
    f9f8:	4b10      	ldr	r3, [pc, #64]	; (fa3c <__ulp+0x44>)
    f9fa:	b510      	push	{r4, lr}
    f9fc:	4019      	ands	r1, r3
    f9fe:	4b10      	ldr	r3, [pc, #64]	; (fa40 <__ulp+0x48>)
    fa00:	469c      	mov	ip, r3
    fa02:	4461      	add	r1, ip
    fa04:	2900      	cmp	r1, #0
    fa06:	dd04      	ble.n	fa12 <__ulp+0x1a>
    fa08:	2200      	movs	r2, #0
    fa0a:	000b      	movs	r3, r1
    fa0c:	0010      	movs	r0, r2
    fa0e:	0019      	movs	r1, r3
    fa10:	bd10      	pop	{r4, pc}
    fa12:	4249      	negs	r1, r1
    fa14:	1509      	asrs	r1, r1, #20
    fa16:	2200      	movs	r2, #0
    fa18:	2300      	movs	r3, #0
    fa1a:	2913      	cmp	r1, #19
    fa1c:	dd08      	ble.n	fa30 <__ulp+0x38>
    fa1e:	3914      	subs	r1, #20
    fa20:	2001      	movs	r0, #1
    fa22:	291e      	cmp	r1, #30
    fa24:	dc02      	bgt.n	fa2c <__ulp+0x34>
    fa26:	241f      	movs	r4, #31
    fa28:	1a61      	subs	r1, r4, r1
    fa2a:	4088      	lsls	r0, r1
    fa2c:	0002      	movs	r2, r0
    fa2e:	e7ed      	b.n	fa0c <__ulp+0x14>
    fa30:	2080      	movs	r0, #128	; 0x80
    fa32:	0300      	lsls	r0, r0, #12
    fa34:	4108      	asrs	r0, r1
    fa36:	0003      	movs	r3, r0
    fa38:	e7e8      	b.n	fa0c <__ulp+0x14>
    fa3a:	46c0      	nop			; (mov r8, r8)
    fa3c:	7ff00000 	.word	0x7ff00000
    fa40:	fcc00000 	.word	0xfcc00000

0000fa44 <__b2d>:
    fa44:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa46:	464f      	mov	r7, r9
    fa48:	4646      	mov	r6, r8
    fa4a:	46d6      	mov	lr, sl
    fa4c:	6904      	ldr	r4, [r0, #16]
    fa4e:	b5c0      	push	{r6, r7, lr}
    fa50:	00a4      	lsls	r4, r4, #2
    fa52:	0006      	movs	r6, r0
    fa54:	46a1      	mov	r9, r4
    fa56:	3614      	adds	r6, #20
    fa58:	44b1      	add	r9, r6
    fa5a:	464b      	mov	r3, r9
    fa5c:	4688      	mov	r8, r1
    fa5e:	1f1f      	subs	r7, r3, #4
    fa60:	683d      	ldr	r5, [r7, #0]
    fa62:	0028      	movs	r0, r5
    fa64:	f7ff fd56 	bl	f514 <__hi0bits>
    fa68:	2120      	movs	r1, #32
    fa6a:	4643      	mov	r3, r8
    fa6c:	1a0a      	subs	r2, r1, r0
    fa6e:	601a      	str	r2, [r3, #0]
    fa70:	280a      	cmp	r0, #10
    fa72:	dc20      	bgt.n	fab6 <__b2d+0x72>
    fa74:	3915      	subs	r1, #21
    fa76:	1a0b      	subs	r3, r1, r0
    fa78:	469a      	mov	sl, r3
    fa7a:	002b      	movs	r3, r5
    fa7c:	4652      	mov	r2, sl
    fa7e:	4926      	ldr	r1, [pc, #152]	; (fb18 <__b2d+0xd4>)
    fa80:	40d3      	lsrs	r3, r2
    fa82:	4688      	mov	r8, r1
    fa84:	0019      	movs	r1, r3
    fa86:	4644      	mov	r4, r8
    fa88:	4321      	orrs	r1, r4
    fa8a:	000b      	movs	r3, r1
    fa8c:	2100      	movs	r1, #0
    fa8e:	468c      	mov	ip, r1
    fa90:	42be      	cmp	r6, r7
    fa92:	d204      	bcs.n	fa9e <__b2d+0x5a>
    fa94:	464c      	mov	r4, r9
    fa96:	3c08      	subs	r4, #8
    fa98:	6824      	ldr	r4, [r4, #0]
    fa9a:	40d4      	lsrs	r4, r2
    fa9c:	46a4      	mov	ip, r4
    fa9e:	3015      	adds	r0, #21
    faa0:	4085      	lsls	r5, r0
    faa2:	4661      	mov	r1, ip
    faa4:	4329      	orrs	r1, r5
    faa6:	000a      	movs	r2, r1
    faa8:	0010      	movs	r0, r2
    faaa:	0019      	movs	r1, r3
    faac:	bc1c      	pop	{r2, r3, r4}
    faae:	4690      	mov	r8, r2
    fab0:	4699      	mov	r9, r3
    fab2:	46a2      	mov	sl, r4
    fab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fab6:	42be      	cmp	r6, r7
    fab8:	d21b      	bcs.n	faf2 <__b2d+0xae>
    faba:	2308      	movs	r3, #8
    fabc:	425b      	negs	r3, r3
    fabe:	469c      	mov	ip, r3
    fac0:	44cc      	add	ip, r9
    fac2:	4663      	mov	r3, ip
    fac4:	380b      	subs	r0, #11
    fac6:	681f      	ldr	r7, [r3, #0]
    fac8:	2800      	cmp	r0, #0
    faca:	d016      	beq.n	fafa <__b2d+0xb6>
    facc:	4085      	lsls	r5, r0
    face:	4b12      	ldr	r3, [pc, #72]	; (fb18 <__b2d+0xd4>)
    fad0:	1a09      	subs	r1, r1, r0
    fad2:	431d      	orrs	r5, r3
    fad4:	003b      	movs	r3, r7
    fad6:	40cb      	lsrs	r3, r1
    fad8:	001c      	movs	r4, r3
    fada:	432c      	orrs	r4, r5
    fadc:	0023      	movs	r3, r4
    fade:	4566      	cmp	r6, ip
    fae0:	d217      	bcs.n	fb12 <__b2d+0xce>
    fae2:	464c      	mov	r4, r9
    fae4:	3c0c      	subs	r4, #12
    fae6:	6824      	ldr	r4, [r4, #0]
    fae8:	4087      	lsls	r7, r0
    faea:	40cc      	lsrs	r4, r1
    faec:	4327      	orrs	r7, r4
    faee:	003a      	movs	r2, r7
    faf0:	e7da      	b.n	faa8 <__b2d+0x64>
    faf2:	380b      	subs	r0, #11
    faf4:	2700      	movs	r7, #0
    faf6:	2800      	cmp	r0, #0
    faf8:	d104      	bne.n	fb04 <__b2d+0xc0>
    fafa:	4907      	ldr	r1, [pc, #28]	; (fb18 <__b2d+0xd4>)
    fafc:	003a      	movs	r2, r7
    fafe:	4329      	orrs	r1, r5
    fb00:	000b      	movs	r3, r1
    fb02:	e7d1      	b.n	faa8 <__b2d+0x64>
    fb04:	4085      	lsls	r5, r0
    fb06:	2700      	movs	r7, #0
    fb08:	4903      	ldr	r1, [pc, #12]	; (fb18 <__b2d+0xd4>)
    fb0a:	003a      	movs	r2, r7
    fb0c:	4329      	orrs	r1, r5
    fb0e:	000b      	movs	r3, r1
    fb10:	e7ca      	b.n	faa8 <__b2d+0x64>
    fb12:	4087      	lsls	r7, r0
    fb14:	003a      	movs	r2, r7
    fb16:	e7c7      	b.n	faa8 <__b2d+0x64>
    fb18:	3ff00000 	.word	0x3ff00000

0000fb1c <__d2b>:
    fb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb1e:	2101      	movs	r1, #1
    fb20:	001c      	movs	r4, r3
    fb22:	b083      	sub	sp, #12
    fb24:	9e08      	ldr	r6, [sp, #32]
    fb26:	0015      	movs	r5, r2
    fb28:	f7ff fc32 	bl	f390 <_Balloc>
    fb2c:	0323      	lsls	r3, r4, #12
    fb2e:	0064      	lsls	r4, r4, #1
    fb30:	0007      	movs	r7, r0
    fb32:	0b1b      	lsrs	r3, r3, #12
    fb34:	0d64      	lsrs	r4, r4, #21
    fb36:	d002      	beq.n	fb3e <__d2b+0x22>
    fb38:	2280      	movs	r2, #128	; 0x80
    fb3a:	0352      	lsls	r2, r2, #13
    fb3c:	4313      	orrs	r3, r2
    fb3e:	9301      	str	r3, [sp, #4]
    fb40:	2d00      	cmp	r5, #0
    fb42:	d019      	beq.n	fb78 <__d2b+0x5c>
    fb44:	4668      	mov	r0, sp
    fb46:	9500      	str	r5, [sp, #0]
    fb48:	f7ff fcfe 	bl	f548 <__lo0bits>
    fb4c:	2800      	cmp	r0, #0
    fb4e:	d130      	bne.n	fbb2 <__d2b+0x96>
    fb50:	9b00      	ldr	r3, [sp, #0]
    fb52:	617b      	str	r3, [r7, #20]
    fb54:	9b01      	ldr	r3, [sp, #4]
    fb56:	61bb      	str	r3, [r7, #24]
    fb58:	1e5a      	subs	r2, r3, #1
    fb5a:	4193      	sbcs	r3, r2
    fb5c:	1c5d      	adds	r5, r3, #1
    fb5e:	613d      	str	r5, [r7, #16]
    fb60:	2c00      	cmp	r4, #0
    fb62:	d014      	beq.n	fb8e <__d2b+0x72>
    fb64:	4b19      	ldr	r3, [pc, #100]	; (fbcc <__d2b+0xb0>)
    fb66:	469c      	mov	ip, r3
    fb68:	2335      	movs	r3, #53	; 0x35
    fb6a:	4464      	add	r4, ip
    fb6c:	1824      	adds	r4, r4, r0
    fb6e:	1a18      	subs	r0, r3, r0
    fb70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fb72:	6034      	str	r4, [r6, #0]
    fb74:	6018      	str	r0, [r3, #0]
    fb76:	e019      	b.n	fbac <__d2b+0x90>
    fb78:	a801      	add	r0, sp, #4
    fb7a:	f7ff fce5 	bl	f548 <__lo0bits>
    fb7e:	9b01      	ldr	r3, [sp, #4]
    fb80:	3020      	adds	r0, #32
    fb82:	617b      	str	r3, [r7, #20]
    fb84:	2301      	movs	r3, #1
    fb86:	2501      	movs	r5, #1
    fb88:	613b      	str	r3, [r7, #16]
    fb8a:	2c00      	cmp	r4, #0
    fb8c:	d1ea      	bne.n	fb64 <__d2b+0x48>
    fb8e:	4b10      	ldr	r3, [pc, #64]	; (fbd0 <__d2b+0xb4>)
    fb90:	469c      	mov	ip, r3
    fb92:	4b10      	ldr	r3, [pc, #64]	; (fbd4 <__d2b+0xb8>)
    fb94:	4460      	add	r0, ip
    fb96:	18eb      	adds	r3, r5, r3
    fb98:	009b      	lsls	r3, r3, #2
    fb9a:	18fb      	adds	r3, r7, r3
    fb9c:	6030      	str	r0, [r6, #0]
    fb9e:	6958      	ldr	r0, [r3, #20]
    fba0:	f7ff fcb8 	bl	f514 <__hi0bits>
    fba4:	016b      	lsls	r3, r5, #5
    fba6:	1a18      	subs	r0, r3, r0
    fba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fbaa:	6018      	str	r0, [r3, #0]
    fbac:	0038      	movs	r0, r7
    fbae:	b003      	add	sp, #12
    fbb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fbb2:	9b01      	ldr	r3, [sp, #4]
    fbb4:	2220      	movs	r2, #32
    fbb6:	0019      	movs	r1, r3
    fbb8:	1a12      	subs	r2, r2, r0
    fbba:	4091      	lsls	r1, r2
    fbbc:	000a      	movs	r2, r1
    fbbe:	40c3      	lsrs	r3, r0
    fbc0:	9900      	ldr	r1, [sp, #0]
    fbc2:	9301      	str	r3, [sp, #4]
    fbc4:	430a      	orrs	r2, r1
    fbc6:	617a      	str	r2, [r7, #20]
    fbc8:	e7c5      	b.n	fb56 <__d2b+0x3a>
    fbca:	46c0      	nop			; (mov r8, r8)
    fbcc:	fffffbcd 	.word	0xfffffbcd
    fbd0:	fffffbce 	.word	0xfffffbce
    fbd4:	3fffffff 	.word	0x3fffffff

0000fbd8 <__ratio>:
    fbd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    fbda:	46ce      	mov	lr, r9
    fbdc:	4647      	mov	r7, r8
    fbde:	b580      	push	{r7, lr}
    fbe0:	b085      	sub	sp, #20
    fbe2:	4688      	mov	r8, r1
    fbe4:	a902      	add	r1, sp, #8
    fbe6:	4681      	mov	r9, r0
    fbe8:	f7ff ff2c 	bl	fa44 <__b2d>
    fbec:	0006      	movs	r6, r0
    fbee:	000f      	movs	r7, r1
    fbf0:	4640      	mov	r0, r8
    fbf2:	a903      	add	r1, sp, #12
    fbf4:	f7ff ff26 	bl	fa44 <__b2d>
    fbf8:	464b      	mov	r3, r9
    fbfa:	691b      	ldr	r3, [r3, #16]
    fbfc:	9000      	str	r0, [sp, #0]
    fbfe:	9101      	str	r1, [sp, #4]
    fc00:	469c      	mov	ip, r3
    fc02:	4643      	mov	r3, r8
    fc04:	691b      	ldr	r3, [r3, #16]
    fc06:	4698      	mov	r8, r3
    fc08:	4663      	mov	r3, ip
    fc0a:	4642      	mov	r2, r8
    fc0c:	1a9b      	subs	r3, r3, r2
    fc0e:	015b      	lsls	r3, r3, #5
    fc10:	469c      	mov	ip, r3
    fc12:	9a03      	ldr	r2, [sp, #12]
    fc14:	9b02      	ldr	r3, [sp, #8]
    fc16:	1a9b      	subs	r3, r3, r2
    fc18:	4698      	mov	r8, r3
    fc1a:	44c4      	add	ip, r8
    fc1c:	4663      	mov	r3, ip
    fc1e:	2b00      	cmp	r3, #0
    fc20:	dd0d      	ble.n	fc3e <__ratio+0x66>
    fc22:	051b      	lsls	r3, r3, #20
    fc24:	19dd      	adds	r5, r3, r7
    fc26:	002f      	movs	r7, r5
    fc28:	0002      	movs	r2, r0
    fc2a:	000b      	movs	r3, r1
    fc2c:	0030      	movs	r0, r6
    fc2e:	0039      	movs	r1, r7
    fc30:	f7f7 fa74 	bl	711c <__aeabi_ddiv>
    fc34:	b005      	add	sp, #20
    fc36:	bc0c      	pop	{r2, r3}
    fc38:	4690      	mov	r8, r2
    fc3a:	4699      	mov	r9, r3
    fc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fc3e:	4663      	mov	r3, ip
    fc40:	0518      	lsls	r0, r3, #20
    fc42:	1a0b      	subs	r3, r1, r0
    fc44:	9301      	str	r3, [sp, #4]
    fc46:	9800      	ldr	r0, [sp, #0]
    fc48:	9901      	ldr	r1, [sp, #4]
    fc4a:	e7ed      	b.n	fc28 <__ratio+0x50>

0000fc4c <__copybits>:
    fc4c:	0013      	movs	r3, r2
    fc4e:	b570      	push	{r4, r5, r6, lr}
    fc50:	1e4c      	subs	r4, r1, #1
    fc52:	6911      	ldr	r1, [r2, #16]
    fc54:	1164      	asrs	r4, r4, #5
    fc56:	3401      	adds	r4, #1
    fc58:	3314      	adds	r3, #20
    fc5a:	0089      	lsls	r1, r1, #2
    fc5c:	00a4      	lsls	r4, r4, #2
    fc5e:	1859      	adds	r1, r3, r1
    fc60:	1904      	adds	r4, r0, r4
    fc62:	428b      	cmp	r3, r1
    fc64:	d20b      	bcs.n	fc7e <__copybits+0x32>
    fc66:	0005      	movs	r5, r0
    fc68:	cb40      	ldmia	r3!, {r6}
    fc6a:	c540      	stmia	r5!, {r6}
    fc6c:	4299      	cmp	r1, r3
    fc6e:	d8fb      	bhi.n	fc68 <__copybits+0x1c>
    fc70:	2303      	movs	r3, #3
    fc72:	3218      	adds	r2, #24
    fc74:	1a9a      	subs	r2, r3, r2
    fc76:	1889      	adds	r1, r1, r2
    fc78:	4399      	bics	r1, r3
    fc7a:	3104      	adds	r1, #4
    fc7c:	1840      	adds	r0, r0, r1
    fc7e:	2300      	movs	r3, #0
    fc80:	4284      	cmp	r4, r0
    fc82:	d902      	bls.n	fc8a <__copybits+0x3e>
    fc84:	c008      	stmia	r0!, {r3}
    fc86:	4284      	cmp	r4, r0
    fc88:	d8fc      	bhi.n	fc84 <__copybits+0x38>
    fc8a:	bd70      	pop	{r4, r5, r6, pc}

0000fc8c <__any_on>:
    fc8c:	0002      	movs	r2, r0
    fc8e:	6903      	ldr	r3, [r0, #16]
    fc90:	b510      	push	{r4, lr}
    fc92:	3214      	adds	r2, #20
    fc94:	1148      	asrs	r0, r1, #5
    fc96:	4283      	cmp	r3, r0
    fc98:	da0f      	bge.n	fcba <__any_on+0x2e>
    fc9a:	009b      	lsls	r3, r3, #2
    fc9c:	18d3      	adds	r3, r2, r3
    fc9e:	429a      	cmp	r2, r3
    fca0:	d221      	bcs.n	fce6 <__any_on+0x5a>
    fca2:	3b04      	subs	r3, #4
    fca4:	6818      	ldr	r0, [r3, #0]
    fca6:	2800      	cmp	r0, #0
    fca8:	d004      	beq.n	fcb4 <__any_on+0x28>
    fcaa:	e01a      	b.n	fce2 <__any_on+0x56>
    fcac:	3b04      	subs	r3, #4
    fcae:	6819      	ldr	r1, [r3, #0]
    fcb0:	2900      	cmp	r1, #0
    fcb2:	d116      	bne.n	fce2 <__any_on+0x56>
    fcb4:	429a      	cmp	r2, r3
    fcb6:	d3f9      	bcc.n	fcac <__any_on+0x20>
    fcb8:	bd10      	pop	{r4, pc}
    fcba:	4283      	cmp	r3, r0
    fcbc:	dd0e      	ble.n	fcdc <__any_on+0x50>
    fcbe:	231f      	movs	r3, #31
    fcc0:	4019      	ands	r1, r3
    fcc2:	0083      	lsls	r3, r0, #2
    fcc4:	18d3      	adds	r3, r2, r3
    fcc6:	2900      	cmp	r1, #0
    fcc8:	d0e9      	beq.n	fc9e <__any_on+0x12>
    fcca:	681c      	ldr	r4, [r3, #0]
    fccc:	0020      	movs	r0, r4
    fcce:	40c8      	lsrs	r0, r1
    fcd0:	4088      	lsls	r0, r1
    fcd2:	0001      	movs	r1, r0
    fcd4:	2001      	movs	r0, #1
    fcd6:	428c      	cmp	r4, r1
    fcd8:	d1ee      	bne.n	fcb8 <__any_on+0x2c>
    fcda:	e7e0      	b.n	fc9e <__any_on+0x12>
    fcdc:	0083      	lsls	r3, r0, #2
    fcde:	18d3      	adds	r3, r2, r3
    fce0:	e7dd      	b.n	fc9e <__any_on+0x12>
    fce2:	2001      	movs	r0, #1
    fce4:	e7e8      	b.n	fcb8 <__any_on+0x2c>
    fce6:	2000      	movs	r0, #0
    fce8:	e7e6      	b.n	fcb8 <__any_on+0x2c>
    fcea:	46c0      	nop			; (mov r8, r8)

0000fcec <_read_r>:
    fcec:	b570      	push	{r4, r5, r6, lr}
    fcee:	0005      	movs	r5, r0
    fcf0:	0008      	movs	r0, r1
    fcf2:	0011      	movs	r1, r2
    fcf4:	2200      	movs	r2, #0
    fcf6:	4c06      	ldr	r4, [pc, #24]	; (fd10 <_read_r+0x24>)
    fcf8:	6022      	str	r2, [r4, #0]
    fcfa:	001a      	movs	r2, r3
    fcfc:	f7f2 fcac 	bl	2658 <_read>
    fd00:	1c43      	adds	r3, r0, #1
    fd02:	d000      	beq.n	fd06 <_read_r+0x1a>
    fd04:	bd70      	pop	{r4, r5, r6, pc}
    fd06:	6823      	ldr	r3, [r4, #0]
    fd08:	2b00      	cmp	r3, #0
    fd0a:	d0fb      	beq.n	fd04 <_read_r+0x18>
    fd0c:	602b      	str	r3, [r5, #0]
    fd0e:	e7f9      	b.n	fd04 <_read_r+0x18>
    fd10:	200018dc 	.word	0x200018dc

0000fd14 <_realloc_r>:
    fd14:	b5f0      	push	{r4, r5, r6, r7, lr}
    fd16:	464e      	mov	r6, r9
    fd18:	4645      	mov	r5, r8
    fd1a:	46de      	mov	lr, fp
    fd1c:	4657      	mov	r7, sl
    fd1e:	b5e0      	push	{r5, r6, r7, lr}
    fd20:	b085      	sub	sp, #20
    fd22:	9001      	str	r0, [sp, #4]
    fd24:	000e      	movs	r6, r1
    fd26:	0015      	movs	r5, r2
    fd28:	2900      	cmp	r1, #0
    fd2a:	d100      	bne.n	fd2e <_realloc_r+0x1a>
    fd2c:	e09e      	b.n	fe6c <_realloc_r+0x158>
    fd2e:	0037      	movs	r7, r6
    fd30:	9801      	ldr	r0, [sp, #4]
    fd32:	3f08      	subs	r7, #8
    fd34:	f7ff fb1c 	bl	f370 <__malloc_lock>
    fd38:	687a      	ldr	r2, [r7, #4]
    fd3a:	2303      	movs	r3, #3
    fd3c:	0014      	movs	r4, r2
    fd3e:	439c      	bics	r4, r3
    fd40:	002b      	movs	r3, r5
    fd42:	330b      	adds	r3, #11
    fd44:	46b9      	mov	r9, r7
    fd46:	2b16      	cmp	r3, #22
    fd48:	d847      	bhi.n	fdda <_realloc_r+0xc6>
    fd4a:	2110      	movs	r1, #16
    fd4c:	2310      	movs	r3, #16
    fd4e:	4688      	mov	r8, r1
    fd50:	4545      	cmp	r5, r8
    fd52:	d846      	bhi.n	fde2 <_realloc_r+0xce>
    fd54:	429c      	cmp	r4, r3
    fd56:	da49      	bge.n	fdec <_realloc_r+0xd8>
    fd58:	49cc      	ldr	r1, [pc, #816]	; (1008c <_realloc_r+0x378>)
    fd5a:	1938      	adds	r0, r7, r4
    fd5c:	468b      	mov	fp, r1
    fd5e:	6889      	ldr	r1, [r1, #8]
    fd60:	9002      	str	r0, [sp, #8]
    fd62:	4288      	cmp	r0, r1
    fd64:	d100      	bne.n	fd68 <_realloc_r+0x54>
    fd66:	e0c2      	b.n	feee <_realloc_r+0x1da>
    fd68:	2101      	movs	r1, #1
    fd6a:	468a      	mov	sl, r1
    fd6c:	6840      	ldr	r0, [r0, #4]
    fd6e:	0001      	movs	r1, r0
    fd70:	9003      	str	r0, [sp, #12]
    fd72:	4650      	mov	r0, sl
    fd74:	4381      	bics	r1, r0
    fd76:	468c      	mov	ip, r1
    fd78:	9902      	ldr	r1, [sp, #8]
    fd7a:	468b      	mov	fp, r1
    fd7c:	44dc      	add	ip, fp
    fd7e:	4661      	mov	r1, ip
    fd80:	6849      	ldr	r1, [r1, #4]
    fd82:	4201      	tst	r1, r0
    fd84:	d04d      	beq.n	fe22 <_realloc_r+0x10e>
    fd86:	4210      	tst	r0, r2
    fd88:	d100      	bne.n	fd8c <_realloc_r+0x78>
    fd8a:	e0a2      	b.n	fed2 <_realloc_r+0x1be>
    fd8c:	0029      	movs	r1, r5
    fd8e:	9801      	ldr	r0, [sp, #4]
    fd90:	f7fe ff62 	bl	ec58 <_malloc_r>
    fd94:	1e05      	subs	r5, r0, #0
    fd96:	d039      	beq.n	fe0c <_realloc_r+0xf8>
    fd98:	2301      	movs	r3, #1
    fd9a:	0002      	movs	r2, r0
    fd9c:	6879      	ldr	r1, [r7, #4]
    fd9e:	3a08      	subs	r2, #8
    fda0:	4399      	bics	r1, r3
    fda2:	187f      	adds	r7, r7, r1
    fda4:	42ba      	cmp	r2, r7
    fda6:	d100      	bne.n	fdaa <_realloc_r+0x96>
    fda8:	e12e      	b.n	10008 <_realloc_r+0x2f4>
    fdaa:	1f22      	subs	r2, r4, #4
    fdac:	2a24      	cmp	r2, #36	; 0x24
    fdae:	d900      	bls.n	fdb2 <_realloc_r+0x9e>
    fdb0:	e114      	b.n	ffdc <_realloc_r+0x2c8>
    fdb2:	2a13      	cmp	r2, #19
    fdb4:	d900      	bls.n	fdb8 <_realloc_r+0xa4>
    fdb6:	e0e8      	b.n	ff8a <_realloc_r+0x276>
    fdb8:	0003      	movs	r3, r0
    fdba:	0032      	movs	r2, r6
    fdbc:	6811      	ldr	r1, [r2, #0]
    fdbe:	6019      	str	r1, [r3, #0]
    fdc0:	6851      	ldr	r1, [r2, #4]
    fdc2:	6059      	str	r1, [r3, #4]
    fdc4:	6892      	ldr	r2, [r2, #8]
    fdc6:	609a      	str	r2, [r3, #8]
    fdc8:	9c01      	ldr	r4, [sp, #4]
    fdca:	0031      	movs	r1, r6
    fdcc:	0020      	movs	r0, r4
    fdce:	f7fe fbeb 	bl	e5a8 <_free_r>
    fdd2:	0020      	movs	r0, r4
    fdd4:	f7ff fad4 	bl	f380 <__malloc_unlock>
    fdd8:	e01b      	b.n	fe12 <_realloc_r+0xfe>
    fdda:	2107      	movs	r1, #7
    fddc:	438b      	bics	r3, r1
    fdde:	4698      	mov	r8, r3
    fde0:	d5b6      	bpl.n	fd50 <_realloc_r+0x3c>
    fde2:	230c      	movs	r3, #12
    fde4:	9a01      	ldr	r2, [sp, #4]
    fde6:	2500      	movs	r5, #0
    fde8:	6013      	str	r3, [r2, #0]
    fdea:	e012      	b.n	fe12 <_realloc_r+0xfe>
    fdec:	0035      	movs	r5, r6
    fdee:	4643      	mov	r3, r8
    fdf0:	1ae3      	subs	r3, r4, r3
    fdf2:	2b0f      	cmp	r3, #15
    fdf4:	d825      	bhi.n	fe42 <_realloc_r+0x12e>
    fdf6:	464b      	mov	r3, r9
    fdf8:	2201      	movs	r2, #1
    fdfa:	4649      	mov	r1, r9
    fdfc:	685b      	ldr	r3, [r3, #4]
    fdfe:	4013      	ands	r3, r2
    fe00:	4323      	orrs	r3, r4
    fe02:	604b      	str	r3, [r1, #4]
    fe04:	444c      	add	r4, r9
    fe06:	6863      	ldr	r3, [r4, #4]
    fe08:	431a      	orrs	r2, r3
    fe0a:	6062      	str	r2, [r4, #4]
    fe0c:	9801      	ldr	r0, [sp, #4]
    fe0e:	f7ff fab7 	bl	f380 <__malloc_unlock>
    fe12:	0028      	movs	r0, r5
    fe14:	b005      	add	sp, #20
    fe16:	bc3c      	pop	{r2, r3, r4, r5}
    fe18:	4690      	mov	r8, r2
    fe1a:	4699      	mov	r9, r3
    fe1c:	46a2      	mov	sl, r4
    fe1e:	46ab      	mov	fp, r5
    fe20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fe22:	2103      	movs	r1, #3
    fe24:	9803      	ldr	r0, [sp, #12]
    fe26:	468c      	mov	ip, r1
    fe28:	4388      	bics	r0, r1
    fe2a:	1821      	adds	r1, r4, r0
    fe2c:	468b      	mov	fp, r1
    fe2e:	4299      	cmp	r1, r3
    fe30:	db21      	blt.n	fe76 <_realloc_r+0x162>
    fe32:	9a02      	ldr	r2, [sp, #8]
    fe34:	0035      	movs	r5, r6
    fe36:	68d3      	ldr	r3, [r2, #12]
    fe38:	6892      	ldr	r2, [r2, #8]
    fe3a:	465c      	mov	r4, fp
    fe3c:	60d3      	str	r3, [r2, #12]
    fe3e:	609a      	str	r2, [r3, #8]
    fe40:	e7d5      	b.n	fdee <_realloc_r+0xda>
    fe42:	464a      	mov	r2, r9
    fe44:	2001      	movs	r0, #1
    fe46:	4646      	mov	r6, r8
    fe48:	6852      	ldr	r2, [r2, #4]
    fe4a:	4649      	mov	r1, r9
    fe4c:	4002      	ands	r2, r0
    fe4e:	4332      	orrs	r2, r6
    fe50:	464e      	mov	r6, r9
    fe52:	4441      	add	r1, r8
    fe54:	4303      	orrs	r3, r0
    fe56:	6072      	str	r2, [r6, #4]
    fe58:	444c      	add	r4, r9
    fe5a:	604b      	str	r3, [r1, #4]
    fe5c:	6863      	ldr	r3, [r4, #4]
    fe5e:	3108      	adds	r1, #8
    fe60:	4318      	orrs	r0, r3
    fe62:	6060      	str	r0, [r4, #4]
    fe64:	9801      	ldr	r0, [sp, #4]
    fe66:	f7fe fb9f 	bl	e5a8 <_free_r>
    fe6a:	e7cf      	b.n	fe0c <_realloc_r+0xf8>
    fe6c:	0011      	movs	r1, r2
    fe6e:	f7fe fef3 	bl	ec58 <_malloc_r>
    fe72:	0005      	movs	r5, r0
    fe74:	e7cd      	b.n	fe12 <_realloc_r+0xfe>
    fe76:	4651      	mov	r1, sl
    fe78:	4211      	tst	r1, r2
    fe7a:	d000      	beq.n	fe7e <_realloc_r+0x16a>
    fe7c:	e786      	b.n	fd8c <_realloc_r+0x78>
    fe7e:	4661      	mov	r1, ip
    fe80:	683a      	ldr	r2, [r7, #0]
    fe82:	1aba      	subs	r2, r7, r2
    fe84:	4692      	mov	sl, r2
    fe86:	6852      	ldr	r2, [r2, #4]
    fe88:	438a      	bics	r2, r1
    fe8a:	1880      	adds	r0, r0, r2
    fe8c:	4683      	mov	fp, r0
    fe8e:	44a3      	add	fp, r4
    fe90:	459b      	cmp	fp, r3
    fe92:	db26      	blt.n	fee2 <_realloc_r+0x1ce>
    fe94:	9a02      	ldr	r2, [sp, #8]
    fe96:	68d3      	ldr	r3, [r2, #12]
    fe98:	6892      	ldr	r2, [r2, #8]
    fe9a:	60d3      	str	r3, [r2, #12]
    fe9c:	609a      	str	r2, [r3, #8]
    fe9e:	4653      	mov	r3, sl
    fea0:	4652      	mov	r2, sl
    fea2:	4655      	mov	r5, sl
    fea4:	6892      	ldr	r2, [r2, #8]
    fea6:	68db      	ldr	r3, [r3, #12]
    fea8:	3508      	adds	r5, #8
    feaa:	60d3      	str	r3, [r2, #12]
    feac:	609a      	str	r2, [r3, #8]
    feae:	1f22      	subs	r2, r4, #4
    feb0:	2a24      	cmp	r2, #36	; 0x24
    feb2:	d900      	bls.n	feb6 <_realloc_r+0x1a2>
    feb4:	e096      	b.n	ffe4 <_realloc_r+0x2d0>
    feb6:	2a13      	cmp	r2, #19
    feb8:	d972      	bls.n	ffa0 <_realloc_r+0x28c>
    feba:	4653      	mov	r3, sl
    febc:	6831      	ldr	r1, [r6, #0]
    febe:	6099      	str	r1, [r3, #8]
    fec0:	6871      	ldr	r1, [r6, #4]
    fec2:	60d9      	str	r1, [r3, #12]
    fec4:	2a1b      	cmp	r2, #27
    fec6:	d900      	bls.n	feca <_realloc_r+0x1b6>
    fec8:	e0a4      	b.n	10014 <_realloc_r+0x300>
    feca:	0032      	movs	r2, r6
    fecc:	3310      	adds	r3, #16
    fece:	3208      	adds	r2, #8
    fed0:	e068      	b.n	ffa4 <_realloc_r+0x290>
    fed2:	683a      	ldr	r2, [r7, #0]
    fed4:	1aba      	subs	r2, r7, r2
    fed6:	4692      	mov	sl, r2
    fed8:	4651      	mov	r1, sl
    feda:	2203      	movs	r2, #3
    fedc:	6849      	ldr	r1, [r1, #4]
    fede:	4391      	bics	r1, r2
    fee0:	000a      	movs	r2, r1
    fee2:	4693      	mov	fp, r2
    fee4:	44a3      	add	fp, r4
    fee6:	459b      	cmp	fp, r3
    fee8:	da00      	bge.n	feec <_realloc_r+0x1d8>
    feea:	e74f      	b.n	fd8c <_realloc_r+0x78>
    feec:	e7d7      	b.n	fe9e <_realloc_r+0x18a>
    feee:	2003      	movs	r0, #3
    fef0:	9902      	ldr	r1, [sp, #8]
    fef2:	4684      	mov	ip, r0
    fef4:	6849      	ldr	r1, [r1, #4]
    fef6:	4381      	bics	r1, r0
    fef8:	4640      	mov	r0, r8
    fefa:	1909      	adds	r1, r1, r4
    fefc:	3010      	adds	r0, #16
    fefe:	9002      	str	r0, [sp, #8]
    ff00:	4281      	cmp	r1, r0
    ff02:	da58      	bge.n	ffb6 <_realloc_r+0x2a2>
    ff04:	07d2      	lsls	r2, r2, #31
    ff06:	d500      	bpl.n	ff0a <_realloc_r+0x1f6>
    ff08:	e740      	b.n	fd8c <_realloc_r+0x78>
    ff0a:	4660      	mov	r0, ip
    ff0c:	683a      	ldr	r2, [r7, #0]
    ff0e:	1aba      	subs	r2, r7, r2
    ff10:	4692      	mov	sl, r2
    ff12:	6852      	ldr	r2, [r2, #4]
    ff14:	4382      	bics	r2, r0
    ff16:	9802      	ldr	r0, [sp, #8]
    ff18:	1851      	adds	r1, r2, r1
    ff1a:	9103      	str	r1, [sp, #12]
    ff1c:	4288      	cmp	r0, r1
    ff1e:	dce0      	bgt.n	fee2 <_realloc_r+0x1ce>
    ff20:	4653      	mov	r3, sl
    ff22:	4652      	mov	r2, sl
    ff24:	4655      	mov	r5, sl
    ff26:	6892      	ldr	r2, [r2, #8]
    ff28:	68db      	ldr	r3, [r3, #12]
    ff2a:	3508      	adds	r5, #8
    ff2c:	60d3      	str	r3, [r2, #12]
    ff2e:	609a      	str	r2, [r3, #8]
    ff30:	1f22      	subs	r2, r4, #4
    ff32:	2a24      	cmp	r2, #36	; 0x24
    ff34:	d900      	bls.n	ff38 <_realloc_r+0x224>
    ff36:	e08e      	b.n	10056 <_realloc_r+0x342>
    ff38:	2a13      	cmp	r2, #19
    ff3a:	d800      	bhi.n	ff3e <_realloc_r+0x22a>
    ff3c:	e088      	b.n	10050 <_realloc_r+0x33c>
    ff3e:	4653      	mov	r3, sl
    ff40:	6831      	ldr	r1, [r6, #0]
    ff42:	6099      	str	r1, [r3, #8]
    ff44:	6871      	ldr	r1, [r6, #4]
    ff46:	60d9      	str	r1, [r3, #12]
    ff48:	2a1b      	cmp	r2, #27
    ff4a:	d900      	bls.n	ff4e <_realloc_r+0x23a>
    ff4c:	e088      	b.n	10060 <_realloc_r+0x34c>
    ff4e:	0032      	movs	r2, r6
    ff50:	3310      	adds	r3, #16
    ff52:	3208      	adds	r2, #8
    ff54:	6811      	ldr	r1, [r2, #0]
    ff56:	6019      	str	r1, [r3, #0]
    ff58:	6851      	ldr	r1, [r2, #4]
    ff5a:	6059      	str	r1, [r3, #4]
    ff5c:	6892      	ldr	r2, [r2, #8]
    ff5e:	609a      	str	r2, [r3, #8]
    ff60:	4651      	mov	r1, sl
    ff62:	465b      	mov	r3, fp
    ff64:	4642      	mov	r2, r8
    ff66:	4441      	add	r1, r8
    ff68:	6099      	str	r1, [r3, #8]
    ff6a:	9b03      	ldr	r3, [sp, #12]
    ff6c:	9801      	ldr	r0, [sp, #4]
    ff6e:	1a9a      	subs	r2, r3, r2
    ff70:	2301      	movs	r3, #1
    ff72:	431a      	orrs	r2, r3
    ff74:	604a      	str	r2, [r1, #4]
    ff76:	4652      	mov	r2, sl
    ff78:	6852      	ldr	r2, [r2, #4]
    ff7a:	4013      	ands	r3, r2
    ff7c:	4642      	mov	r2, r8
    ff7e:	4313      	orrs	r3, r2
    ff80:	4652      	mov	r2, sl
    ff82:	6053      	str	r3, [r2, #4]
    ff84:	f7ff f9fc 	bl	f380 <__malloc_unlock>
    ff88:	e743      	b.n	fe12 <_realloc_r+0xfe>
    ff8a:	6833      	ldr	r3, [r6, #0]
    ff8c:	6003      	str	r3, [r0, #0]
    ff8e:	6873      	ldr	r3, [r6, #4]
    ff90:	6043      	str	r3, [r0, #4]
    ff92:	2a1b      	cmp	r2, #27
    ff94:	d82d      	bhi.n	fff2 <_realloc_r+0x2de>
    ff96:	0003      	movs	r3, r0
    ff98:	0032      	movs	r2, r6
    ff9a:	3308      	adds	r3, #8
    ff9c:	3208      	adds	r2, #8
    ff9e:	e70d      	b.n	fdbc <_realloc_r+0xa8>
    ffa0:	002b      	movs	r3, r5
    ffa2:	0032      	movs	r2, r6
    ffa4:	6811      	ldr	r1, [r2, #0]
    ffa6:	465c      	mov	r4, fp
    ffa8:	6019      	str	r1, [r3, #0]
    ffaa:	6851      	ldr	r1, [r2, #4]
    ffac:	46d1      	mov	r9, sl
    ffae:	6059      	str	r1, [r3, #4]
    ffb0:	6892      	ldr	r2, [r2, #8]
    ffb2:	609a      	str	r2, [r3, #8]
    ffb4:	e71b      	b.n	fdee <_realloc_r+0xda>
    ffb6:	4643      	mov	r3, r8
    ffb8:	18fa      	adds	r2, r7, r3
    ffba:	465b      	mov	r3, fp
    ffbc:	609a      	str	r2, [r3, #8]
    ffbe:	4643      	mov	r3, r8
    ffc0:	1ac9      	subs	r1, r1, r3
    ffc2:	2301      	movs	r3, #1
    ffc4:	4319      	orrs	r1, r3
    ffc6:	6051      	str	r1, [r2, #4]
    ffc8:	687a      	ldr	r2, [r7, #4]
    ffca:	9801      	ldr	r0, [sp, #4]
    ffcc:	4013      	ands	r3, r2
    ffce:	4642      	mov	r2, r8
    ffd0:	4313      	orrs	r3, r2
    ffd2:	607b      	str	r3, [r7, #4]
    ffd4:	f7ff f9d4 	bl	f380 <__malloc_unlock>
    ffd8:	0035      	movs	r5, r6
    ffda:	e71a      	b.n	fe12 <_realloc_r+0xfe>
    ffdc:	0031      	movs	r1, r6
    ffde:	f7ff f977 	bl	f2d0 <memmove>
    ffe2:	e6f1      	b.n	fdc8 <_realloc_r+0xb4>
    ffe4:	0031      	movs	r1, r6
    ffe6:	0028      	movs	r0, r5
    ffe8:	f7ff f972 	bl	f2d0 <memmove>
    ffec:	465c      	mov	r4, fp
    ffee:	46d1      	mov	r9, sl
    fff0:	e6fd      	b.n	fdee <_realloc_r+0xda>
    fff2:	68b3      	ldr	r3, [r6, #8]
    fff4:	6083      	str	r3, [r0, #8]
    fff6:	68f3      	ldr	r3, [r6, #12]
    fff8:	60c3      	str	r3, [r0, #12]
    fffa:	2a24      	cmp	r2, #36	; 0x24
    fffc:	d015      	beq.n	1002a <_realloc_r+0x316>
    fffe:	0003      	movs	r3, r0
   10000:	0032      	movs	r2, r6
   10002:	3310      	adds	r3, #16
   10004:	3210      	adds	r2, #16
   10006:	e6d9      	b.n	fdbc <_realloc_r+0xa8>
   10008:	6853      	ldr	r3, [r2, #4]
   1000a:	2203      	movs	r2, #3
   1000c:	4393      	bics	r3, r2
   1000e:	18e4      	adds	r4, r4, r3
   10010:	0035      	movs	r5, r6
   10012:	e6ec      	b.n	fdee <_realloc_r+0xda>
   10014:	4653      	mov	r3, sl
   10016:	68b1      	ldr	r1, [r6, #8]
   10018:	6119      	str	r1, [r3, #16]
   1001a:	68f1      	ldr	r1, [r6, #12]
   1001c:	6159      	str	r1, [r3, #20]
   1001e:	2a24      	cmp	r2, #36	; 0x24
   10020:	d00c      	beq.n	1003c <_realloc_r+0x328>
   10022:	0032      	movs	r2, r6
   10024:	3318      	adds	r3, #24
   10026:	3210      	adds	r2, #16
   10028:	e7bc      	b.n	ffa4 <_realloc_r+0x290>
   1002a:	6933      	ldr	r3, [r6, #16]
   1002c:	0032      	movs	r2, r6
   1002e:	6103      	str	r3, [r0, #16]
   10030:	0003      	movs	r3, r0
   10032:	6971      	ldr	r1, [r6, #20]
   10034:	3318      	adds	r3, #24
   10036:	3218      	adds	r2, #24
   10038:	6141      	str	r1, [r0, #20]
   1003a:	e6bf      	b.n	fdbc <_realloc_r+0xa8>
   1003c:	4653      	mov	r3, sl
   1003e:	6932      	ldr	r2, [r6, #16]
   10040:	4651      	mov	r1, sl
   10042:	619a      	str	r2, [r3, #24]
   10044:	0032      	movs	r2, r6
   10046:	6970      	ldr	r0, [r6, #20]
   10048:	3320      	adds	r3, #32
   1004a:	3218      	adds	r2, #24
   1004c:	61c8      	str	r0, [r1, #28]
   1004e:	e7a9      	b.n	ffa4 <_realloc_r+0x290>
   10050:	002b      	movs	r3, r5
   10052:	0032      	movs	r2, r6
   10054:	e77e      	b.n	ff54 <_realloc_r+0x240>
   10056:	0031      	movs	r1, r6
   10058:	0028      	movs	r0, r5
   1005a:	f7ff f939 	bl	f2d0 <memmove>
   1005e:	e77f      	b.n	ff60 <_realloc_r+0x24c>
   10060:	4653      	mov	r3, sl
   10062:	68b1      	ldr	r1, [r6, #8]
   10064:	6119      	str	r1, [r3, #16]
   10066:	68f1      	ldr	r1, [r6, #12]
   10068:	6159      	str	r1, [r3, #20]
   1006a:	2a24      	cmp	r2, #36	; 0x24
   1006c:	d003      	beq.n	10076 <_realloc_r+0x362>
   1006e:	0032      	movs	r2, r6
   10070:	3318      	adds	r3, #24
   10072:	3210      	adds	r2, #16
   10074:	e76e      	b.n	ff54 <_realloc_r+0x240>
   10076:	4653      	mov	r3, sl
   10078:	6932      	ldr	r2, [r6, #16]
   1007a:	4651      	mov	r1, sl
   1007c:	619a      	str	r2, [r3, #24]
   1007e:	0032      	movs	r2, r6
   10080:	6970      	ldr	r0, [r6, #20]
   10082:	3320      	adds	r3, #32
   10084:	3218      	adds	r2, #24
   10086:	61c8      	str	r0, [r1, #28]
   10088:	e764      	b.n	ff54 <_realloc_r+0x240>
   1008a:	46c0      	nop			; (mov r8, r8)
   1008c:	20000620 	.word	0x20000620

00010090 <_sbrk_r>:
   10090:	2300      	movs	r3, #0
   10092:	b570      	push	{r4, r5, r6, lr}
   10094:	4c06      	ldr	r4, [pc, #24]	; (100b0 <_sbrk_r+0x20>)
   10096:	0005      	movs	r5, r0
   10098:	0008      	movs	r0, r1
   1009a:	6023      	str	r3, [r4, #0]
   1009c:	f7f0 fdb2 	bl	c04 <_sbrk>
   100a0:	1c43      	adds	r3, r0, #1
   100a2:	d000      	beq.n	100a6 <_sbrk_r+0x16>
   100a4:	bd70      	pop	{r4, r5, r6, pc}
   100a6:	6823      	ldr	r3, [r4, #0]
   100a8:	2b00      	cmp	r3, #0
   100aa:	d0fb      	beq.n	100a4 <_sbrk_r+0x14>
   100ac:	602b      	str	r3, [r5, #0]
   100ae:	e7f9      	b.n	100a4 <_sbrk_r+0x14>
   100b0:	200018dc 	.word	0x200018dc

000100b4 <__sccl>:
   100b4:	b570      	push	{r4, r5, r6, lr}
   100b6:	780c      	ldrb	r4, [r1, #0]
   100b8:	2c5e      	cmp	r4, #94	; 0x5e
   100ba:	d028      	beq.n	1010e <__sccl+0x5a>
   100bc:	1c4e      	adds	r6, r1, #1
   100be:	2500      	movs	r5, #0
   100c0:	2100      	movs	r1, #0
   100c2:	0003      	movs	r3, r0
   100c4:	1c42      	adds	r2, r0, #1
   100c6:	32ff      	adds	r2, #255	; 0xff
   100c8:	7019      	strb	r1, [r3, #0]
   100ca:	3301      	adds	r3, #1
   100cc:	429a      	cmp	r2, r3
   100ce:	d1fb      	bne.n	100c8 <__sccl+0x14>
   100d0:	1e71      	subs	r1, r6, #1
   100d2:	2c00      	cmp	r4, #0
   100d4:	d00e      	beq.n	100f4 <__sccl+0x40>
   100d6:	2301      	movs	r3, #1
   100d8:	406b      	eors	r3, r5
   100da:	5503      	strb	r3, [r0, r4]
   100dc:	7832      	ldrb	r2, [r6, #0]
   100de:	1c71      	adds	r1, r6, #1
   100e0:	2a2d      	cmp	r2, #45	; 0x2d
   100e2:	d009      	beq.n	100f8 <__sccl+0x44>
   100e4:	2a5d      	cmp	r2, #93	; 0x5d
   100e6:	d005      	beq.n	100f4 <__sccl+0x40>
   100e8:	2a00      	cmp	r2, #0
   100ea:	d002      	beq.n	100f2 <__sccl+0x3e>
   100ec:	0014      	movs	r4, r2
   100ee:	000e      	movs	r6, r1
   100f0:	e7f3      	b.n	100da <__sccl+0x26>
   100f2:	0031      	movs	r1, r6
   100f4:	0008      	movs	r0, r1
   100f6:	bd70      	pop	{r4, r5, r6, pc}
   100f8:	7872      	ldrb	r2, [r6, #1]
   100fa:	2a5d      	cmp	r2, #93	; 0x5d
   100fc:	d00c      	beq.n	10118 <__sccl+0x64>
   100fe:	4294      	cmp	r4, r2
   10100:	dc0a      	bgt.n	10118 <__sccl+0x64>
   10102:	3602      	adds	r6, #2
   10104:	3401      	adds	r4, #1
   10106:	5503      	strb	r3, [r0, r4]
   10108:	42a2      	cmp	r2, r4
   1010a:	dcfb      	bgt.n	10104 <__sccl+0x50>
   1010c:	e7e6      	b.n	100dc <__sccl+0x28>
   1010e:	1c8e      	adds	r6, r1, #2
   10110:	784c      	ldrb	r4, [r1, #1]
   10112:	2501      	movs	r5, #1
   10114:	2101      	movs	r1, #1
   10116:	e7d4      	b.n	100c2 <__sccl+0xe>
   10118:	242d      	movs	r4, #45	; 0x2d
   1011a:	000e      	movs	r6, r1
   1011c:	e7dd      	b.n	100da <__sccl+0x26>
   1011e:	46c0      	nop			; (mov r8, r8)

00010120 <nanf>:
   10120:	4800      	ldr	r0, [pc, #0]	; (10124 <nanf+0x4>)
   10122:	4770      	bx	lr
   10124:	7fc00000 	.word	0x7fc00000

00010128 <sulp>:
   10128:	b570      	push	{r4, r5, r6, lr}
   1012a:	0016      	movs	r6, r2
   1012c:	000d      	movs	r5, r1
   1012e:	f7ff fc63 	bl	f9f8 <__ulp>
   10132:	2e00      	cmp	r6, #0
   10134:	d00d      	beq.n	10152 <sulp+0x2a>
   10136:	236b      	movs	r3, #107	; 0x6b
   10138:	006a      	lsls	r2, r5, #1
   1013a:	0d52      	lsrs	r2, r2, #21
   1013c:	1a9b      	subs	r3, r3, r2
   1013e:	2b00      	cmp	r3, #0
   10140:	dd07      	ble.n	10152 <sulp+0x2a>
   10142:	2400      	movs	r4, #0
   10144:	4a03      	ldr	r2, [pc, #12]	; (10154 <sulp+0x2c>)
   10146:	051b      	lsls	r3, r3, #20
   10148:	189d      	adds	r5, r3, r2
   1014a:	002b      	movs	r3, r5
   1014c:	0022      	movs	r2, r4
   1014e:	f7f7 fb19 	bl	7784 <__aeabi_dmul>
   10152:	bd70      	pop	{r4, r5, r6, pc}
   10154:	3ff00000 	.word	0x3ff00000

00010158 <_strtod_l>:
   10158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1015a:	46de      	mov	lr, fp
   1015c:	4657      	mov	r7, sl
   1015e:	464e      	mov	r6, r9
   10160:	4645      	mov	r5, r8
   10162:	b5e0      	push	{r5, r6, r7, lr}
   10164:	001d      	movs	r5, r3
   10166:	2300      	movs	r3, #0
   10168:	b0a3      	sub	sp, #140	; 0x8c
   1016a:	9009      	str	r0, [sp, #36]	; 0x24
   1016c:	0028      	movs	r0, r5
   1016e:	000e      	movs	r6, r1
   10170:	931e      	str	r3, [sp, #120]	; 0x78
   10172:	4693      	mov	fp, r2
   10174:	f7fe fccc 	bl	eb10 <__localeconv_l>
   10178:	0007      	movs	r7, r0
   1017a:	6800      	ldr	r0, [r0, #0]
   1017c:	f7f8 fe1a 	bl	8db4 <strlen>
   10180:	2400      	movs	r4, #0
   10182:	2300      	movs	r3, #0
   10184:	9304      	str	r3, [sp, #16]
   10186:	9405      	str	r4, [sp, #20]
   10188:	0033      	movs	r3, r6
   1018a:	961d      	str	r6, [sp, #116]	; 0x74
   1018c:	781c      	ldrb	r4, [r3, #0]
   1018e:	9008      	str	r0, [sp, #32]
   10190:	49c4      	ldr	r1, [pc, #784]	; (104a4 <_strtod_l+0x34c>)
   10192:	2c2d      	cmp	r4, #45	; 0x2d
   10194:	d900      	bls.n	10198 <_strtod_l+0x40>
   10196:	e070      	b.n	1027a <_strtod_l+0x122>
   10198:	00a2      	lsls	r2, r4, #2
   1019a:	588a      	ldr	r2, [r1, r2]
   1019c:	4697      	mov	pc, r2
   1019e:	4689      	mov	r9, r1
   101a0:	0014      	movs	r4, r2
   101a2:	6839      	ldr	r1, [r7, #0]
   101a4:	9a08      	ldr	r2, [sp, #32]
   101a6:	4698      	mov	r8, r3
   101a8:	f002 f924 	bl	123f4 <strncmp>
   101ac:	2800      	cmp	r0, #0
   101ae:	d100      	bne.n	101b2 <_strtod_l+0x5a>
   101b0:	e084      	b.n	102bc <_strtod_l+0x164>
   101b2:	2200      	movs	r2, #0
   101b4:	2300      	movs	r3, #0
   101b6:	2000      	movs	r0, #0
   101b8:	950a      	str	r5, [sp, #40]	; 0x28
   101ba:	9208      	str	r2, [sp, #32]
   101bc:	2220      	movs	r2, #32
   101be:	0021      	movs	r1, r4
   101c0:	4391      	bics	r1, r2
   101c2:	2200      	movs	r2, #0
   101c4:	2945      	cmp	r1, #69	; 0x45
   101c6:	d100      	bne.n	101ca <_strtod_l+0x72>
   101c8:	e0a6      	b.n	10318 <_strtod_l+0x1c0>
   101ca:	2d00      	cmp	r5, #0
   101cc:	d000      	beq.n	101d0 <_strtod_l+0x78>
   101ce:	e104      	b.n	103da <_strtod_l+0x282>
   101d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   101d2:	4313      	orrs	r3, r2
   101d4:	d000      	beq.n	101d8 <_strtod_l+0x80>
   101d6:	e0f8      	b.n	103ca <_strtod_l+0x272>
   101d8:	9b08      	ldr	r3, [sp, #32]
   101da:	2b00      	cmp	r3, #0
   101dc:	d100      	bne.n	101e0 <_strtod_l+0x88>
   101de:	e13d      	b.n	1045c <_strtod_l+0x304>
   101e0:	465b      	mov	r3, fp
   101e2:	2400      	movs	r4, #0
   101e4:	2500      	movs	r5, #0
   101e6:	2b00      	cmp	r3, #0
   101e8:	d006      	beq.n	101f8 <_strtod_l+0xa0>
   101ea:	2300      	movs	r3, #0
   101ec:	9307      	str	r3, [sp, #28]
   101ee:	465b      	mov	r3, fp
   101f0:	601e      	str	r6, [r3, #0]
   101f2:	9b07      	ldr	r3, [sp, #28]
   101f4:	2b00      	cmp	r3, #0
   101f6:	d108      	bne.n	1020a <_strtod_l+0xb2>
   101f8:	0020      	movs	r0, r4
   101fa:	0029      	movs	r1, r5
   101fc:	b023      	add	sp, #140	; 0x8c
   101fe:	bc3c      	pop	{r2, r3, r4, r5}
   10200:	4690      	mov	r8, r2
   10202:	4699      	mov	r9, r3
   10204:	46a2      	mov	sl, r4
   10206:	46ab      	mov	fp, r5
   10208:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1020a:	2180      	movs	r1, #128	; 0x80
   1020c:	0609      	lsls	r1, r1, #24
   1020e:	186b      	adds	r3, r5, r1
   10210:	001d      	movs	r5, r3
   10212:	e7f1      	b.n	101f8 <_strtod_l+0xa0>
   10214:	2200      	movs	r2, #0
   10216:	9207      	str	r2, [sp, #28]
   10218:	1c5a      	adds	r2, r3, #1
   1021a:	921d      	str	r2, [sp, #116]	; 0x74
   1021c:	785c      	ldrb	r4, [r3, #1]
   1021e:	4692      	mov	sl, r2
   10220:	2c00      	cmp	r4, #0
   10222:	d0dd      	beq.n	101e0 <_strtod_l+0x88>
   10224:	2300      	movs	r3, #0
   10226:	930c      	str	r3, [sp, #48]	; 0x30
   10228:	2c30      	cmp	r4, #48	; 0x30
   1022a:	d02d      	beq.n	10288 <_strtod_l+0x130>
   1022c:	0023      	movs	r3, r4
   1022e:	3b30      	subs	r3, #48	; 0x30
   10230:	2b09      	cmp	r3, #9
   10232:	d900      	bls.n	10236 <_strtod_l+0xde>
   10234:	e38c      	b.n	10950 <_strtod_l+0x7f8>
   10236:	2300      	movs	r3, #0
   10238:	4650      	mov	r0, sl
   1023a:	2500      	movs	r5, #0
   1023c:	0019      	movs	r1, r3
   1023e:	0022      	movs	r2, r4
   10240:	e00c      	b.n	1025c <_strtod_l+0x104>
   10242:	009c      	lsls	r4, r3, #2
   10244:	18e3      	adds	r3, r4, r3
   10246:	005b      	lsls	r3, r3, #1
   10248:	189b      	adds	r3, r3, r2
   1024a:	3b30      	subs	r3, #48	; 0x30
   1024c:	3001      	adds	r0, #1
   1024e:	901d      	str	r0, [sp, #116]	; 0x74
   10250:	7802      	ldrb	r2, [r0, #0]
   10252:	3501      	adds	r5, #1
   10254:	0014      	movs	r4, r2
   10256:	3c30      	subs	r4, #48	; 0x30
   10258:	2c09      	cmp	r4, #9
   1025a:	d8a0      	bhi.n	1019e <_strtod_l+0x46>
   1025c:	2d08      	cmp	r5, #8
   1025e:	ddf0      	ble.n	10242 <_strtod_l+0xea>
   10260:	008c      	lsls	r4, r1, #2
   10262:	1864      	adds	r4, r4, r1
   10264:	0064      	lsls	r4, r4, #1
   10266:	18a4      	adds	r4, r4, r2
   10268:	0021      	movs	r1, r4
   1026a:	3930      	subs	r1, #48	; 0x30
   1026c:	e7ee      	b.n	1024c <_strtod_l+0xf4>
   1026e:	3301      	adds	r3, #1
   10270:	931d      	str	r3, [sp, #116]	; 0x74
   10272:	781c      	ldrb	r4, [r3, #0]
   10274:	2c2d      	cmp	r4, #45	; 0x2d
   10276:	d800      	bhi.n	1027a <_strtod_l+0x122>
   10278:	e78e      	b.n	10198 <_strtod_l+0x40>
   1027a:	469a      	mov	sl, r3
   1027c:	2300      	movs	r3, #0
   1027e:	9307      	str	r3, [sp, #28]
   10280:	2300      	movs	r3, #0
   10282:	930c      	str	r3, [sp, #48]	; 0x30
   10284:	2c30      	cmp	r4, #48	; 0x30
   10286:	d1d1      	bne.n	1022c <_strtod_l+0xd4>
   10288:	4653      	mov	r3, sl
   1028a:	785b      	ldrb	r3, [r3, #1]
   1028c:	2b58      	cmp	r3, #88	; 0x58
   1028e:	d100      	bne.n	10292 <_strtod_l+0x13a>
   10290:	e334      	b.n	108fc <_strtod_l+0x7a4>
   10292:	2b78      	cmp	r3, #120	; 0x78
   10294:	d100      	bne.n	10298 <_strtod_l+0x140>
   10296:	e331      	b.n	108fc <_strtod_l+0x7a4>
   10298:	4653      	mov	r3, sl
   1029a:	3301      	adds	r3, #1
   1029c:	001a      	movs	r2, r3
   1029e:	931d      	str	r3, [sp, #116]	; 0x74
   102a0:	7814      	ldrb	r4, [r2, #0]
   102a2:	3301      	adds	r3, #1
   102a4:	2c30      	cmp	r4, #48	; 0x30
   102a6:	d0f9      	beq.n	1029c <_strtod_l+0x144>
   102a8:	4692      	mov	sl, r2
   102aa:	2c00      	cmp	r4, #0
   102ac:	d100      	bne.n	102b0 <_strtod_l+0x158>
   102ae:	e08c      	b.n	103ca <_strtod_l+0x272>
   102b0:	2301      	movs	r3, #1
   102b2:	930c      	str	r3, [sp, #48]	; 0x30
   102b4:	e7ba      	b.n	1022c <_strtod_l+0xd4>
   102b6:	2201      	movs	r2, #1
   102b8:	9207      	str	r2, [sp, #28]
   102ba:	e7ad      	b.n	10218 <_strtod_l+0xc0>
   102bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   102be:	9b08      	ldr	r3, [sp, #32]
   102c0:	4694      	mov	ip, r2
   102c2:	4463      	add	r3, ip
   102c4:	931d      	str	r3, [sp, #116]	; 0x74
   102c6:	781c      	ldrb	r4, [r3, #0]
   102c8:	2300      	movs	r3, #0
   102ca:	950a      	str	r5, [sp, #40]	; 0x28
   102cc:	0022      	movs	r2, r4
   102ce:	3a30      	subs	r2, #48	; 0x30
   102d0:	2a09      	cmp	r2, #9
   102d2:	d900      	bls.n	102d6 <_strtod_l+0x17e>
   102d4:	e0e2      	b.n	1049c <_strtod_l+0x344>
   102d6:	1c5c      	adds	r4, r3, #1
   102d8:	4694      	mov	ip, r2
   102da:	2a00      	cmp	r2, #0
   102dc:	d101      	bne.n	102e2 <_strtod_l+0x18a>
   102de:	f000 fe76 	bl	10fce <_strtod_l+0xe76>
   102e2:	1900      	adds	r0, r0, r4
   102e4:	195b      	adds	r3, r3, r5
   102e6:	2c01      	cmp	r4, #1
   102e8:	d101      	bne.n	102ee <_strtod_l+0x196>
   102ea:	f000 fe6c 	bl	10fc6 <_strtod_l+0xe6e>
   102ee:	4644      	mov	r4, r8
   102f0:	e007      	b.n	10302 <_strtod_l+0x1aa>
   102f2:	00a1      	lsls	r1, r4, #2
   102f4:	190c      	adds	r4, r1, r4
   102f6:	0064      	lsls	r4, r4, #1
   102f8:	429f      	cmp	r7, r3
   102fa:	d101      	bne.n	10300 <_strtod_l+0x1a8>
   102fc:	f000 fbef 	bl	10ade <_strtod_l+0x986>
   10300:	003d      	movs	r5, r7
   10302:	1c6f      	adds	r7, r5, #1
   10304:	2d08      	cmp	r5, #8
   10306:	ddf4      	ble.n	102f2 <_strtod_l+0x19a>
   10308:	2f10      	cmp	r7, #16
   1030a:	dcf5      	bgt.n	102f8 <_strtod_l+0x1a0>
   1030c:	4649      	mov	r1, r9
   1030e:	0089      	lsls	r1, r1, #2
   10310:	4449      	add	r1, r9
   10312:	0049      	lsls	r1, r1, #1
   10314:	4689      	mov	r9, r1
   10316:	e7ef      	b.n	102f8 <_strtod_l+0x1a0>
   10318:	002a      	movs	r2, r5
   1031a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1031c:	431a      	orrs	r2, r3
   1031e:	430a      	orrs	r2, r1
   10320:	d100      	bne.n	10324 <_strtod_l+0x1cc>
   10322:	e75d      	b.n	101e0 <_strtod_l+0x88>
   10324:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   10326:	1c72      	adds	r2, r6, #1
   10328:	921d      	str	r2, [sp, #116]	; 0x74
   1032a:	7874      	ldrb	r4, [r6, #1]
   1032c:	2c2b      	cmp	r4, #43	; 0x2b
   1032e:	d100      	bne.n	10332 <_strtod_l+0x1da>
   10330:	e39a      	b.n	10a68 <_strtod_l+0x910>
   10332:	2c2d      	cmp	r4, #45	; 0x2d
   10334:	d100      	bne.n	10338 <_strtod_l+0x1e0>
   10336:	e230      	b.n	1079a <_strtod_l+0x642>
   10338:	2200      	movs	r2, #0
   1033a:	920d      	str	r2, [sp, #52]	; 0x34
   1033c:	0022      	movs	r2, r4
   1033e:	3a30      	subs	r2, #48	; 0x30
   10340:	2a09      	cmp	r2, #9
   10342:	d900      	bls.n	10346 <_strtod_l+0x1ee>
   10344:	e2f5      	b.n	10932 <_strtod_l+0x7da>
   10346:	2c30      	cmp	r4, #48	; 0x30
   10348:	d106      	bne.n	10358 <_strtod_l+0x200>
   1034a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   1034c:	3201      	adds	r2, #1
   1034e:	921d      	str	r2, [sp, #116]	; 0x74
   10350:	7814      	ldrb	r4, [r2, #0]
   10352:	3201      	adds	r2, #1
   10354:	2c30      	cmp	r4, #48	; 0x30
   10356:	d0fa      	beq.n	1034e <_strtod_l+0x1f6>
   10358:	0021      	movs	r1, r4
   1035a:	3931      	subs	r1, #49	; 0x31
   1035c:	2200      	movs	r2, #0
   1035e:	2908      	cmp	r1, #8
   10360:	d900      	bls.n	10364 <_strtod_l+0x20c>
   10362:	e732      	b.n	101ca <_strtod_l+0x72>
   10364:	991d      	ldr	r1, [sp, #116]	; 0x74
   10366:	0022      	movs	r2, r4
   10368:	1c4c      	adds	r4, r1, #1
   1036a:	941d      	str	r4, [sp, #116]	; 0x74
   1036c:	46a4      	mov	ip, r4
   1036e:	784c      	ldrb	r4, [r1, #1]
   10370:	000f      	movs	r7, r1
   10372:	910e      	str	r1, [sp, #56]	; 0x38
   10374:	0021      	movs	r1, r4
   10376:	3930      	subs	r1, #48	; 0x30
   10378:	3a30      	subs	r2, #48	; 0x30
   1037a:	2909      	cmp	r1, #9
   1037c:	d815      	bhi.n	103aa <_strtod_l+0x252>
   1037e:	0039      	movs	r1, r7
   10380:	469c      	mov	ip, r3
   10382:	0027      	movs	r7, r4
   10384:	3102      	adds	r1, #2
   10386:	0094      	lsls	r4, r2, #2
   10388:	18a4      	adds	r4, r4, r2
   1038a:	911d      	str	r1, [sp, #116]	; 0x74
   1038c:	0064      	lsls	r4, r4, #1
   1038e:	19e4      	adds	r4, r4, r7
   10390:	780f      	ldrb	r7, [r1, #0]
   10392:	0022      	movs	r2, r4
   10394:	003c      	movs	r4, r7
   10396:	3c30      	subs	r4, #48	; 0x30
   10398:	000b      	movs	r3, r1
   1039a:	3a30      	subs	r2, #48	; 0x30
   1039c:	3101      	adds	r1, #1
   1039e:	2c09      	cmp	r4, #9
   103a0:	d9f1      	bls.n	10386 <_strtod_l+0x22e>
   103a2:	0019      	movs	r1, r3
   103a4:	003c      	movs	r4, r7
   103a6:	4663      	mov	r3, ip
   103a8:	468c      	mov	ip, r1
   103aa:	4661      	mov	r1, ip
   103ac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   103ae:	1bc9      	subs	r1, r1, r7
   103b0:	2908      	cmp	r1, #8
   103b2:	dd00      	ble.n	103b6 <_strtod_l+0x25e>
   103b4:	e256      	b.n	10864 <_strtod_l+0x70c>
   103b6:	493c      	ldr	r1, [pc, #240]	; (104a8 <_strtod_l+0x350>)
   103b8:	428a      	cmp	r2, r1
   103ba:	dd00      	ble.n	103be <_strtod_l+0x266>
   103bc:	e252      	b.n	10864 <_strtod_l+0x70c>
   103be:	990d      	ldr	r1, [sp, #52]	; 0x34
   103c0:	2900      	cmp	r1, #0
   103c2:	d100      	bne.n	103c6 <_strtod_l+0x26e>
   103c4:	e701      	b.n	101ca <_strtod_l+0x72>
   103c6:	4252      	negs	r2, r2
   103c8:	e6ff      	b.n	101ca <_strtod_l+0x72>
   103ca:	2400      	movs	r4, #0
   103cc:	2500      	movs	r5, #0
   103ce:	465b      	mov	r3, fp
   103d0:	2b00      	cmp	r3, #0
   103d2:	d100      	bne.n	103d6 <_strtod_l+0x27e>
   103d4:	e70d      	b.n	101f2 <_strtod_l+0x9a>
   103d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   103d8:	e709      	b.n	101ee <_strtod_l+0x96>
   103da:	1a13      	subs	r3, r2, r0
   103dc:	9308      	str	r3, [sp, #32]
   103de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103e0:	2b00      	cmp	r3, #0
   103e2:	d100      	bne.n	103e6 <_strtod_l+0x28e>
   103e4:	950a      	str	r5, [sp, #40]	; 0x28
   103e6:	002c      	movs	r4, r5
   103e8:	2d10      	cmp	r5, #16
   103ea:	dd00      	ble.n	103ee <_strtod_l+0x296>
   103ec:	2410      	movs	r4, #16
   103ee:	4640      	mov	r0, r8
   103f0:	f7f7 ffd4 	bl	839c <__aeabi_ui2d>
   103f4:	9004      	str	r0, [sp, #16]
   103f6:	9105      	str	r1, [sp, #20]
   103f8:	2c09      	cmp	r4, #9
   103fa:	dd15      	ble.n	10428 <_strtod_l+0x2d0>
   103fc:	0022      	movs	r2, r4
   103fe:	4b2b      	ldr	r3, [pc, #172]	; (104ac <_strtod_l+0x354>)
   10400:	3a09      	subs	r2, #9
   10402:	00d2      	lsls	r2, r2, #3
   10404:	189b      	adds	r3, r3, r2
   10406:	681a      	ldr	r2, [r3, #0]
   10408:	685b      	ldr	r3, [r3, #4]
   1040a:	f7f7 f9bb 	bl	7784 <__aeabi_dmul>
   1040e:	0006      	movs	r6, r0
   10410:	4648      	mov	r0, r9
   10412:	000f      	movs	r7, r1
   10414:	f7f7 ffc2 	bl	839c <__aeabi_ui2d>
   10418:	0002      	movs	r2, r0
   1041a:	000b      	movs	r3, r1
   1041c:	0030      	movs	r0, r6
   1041e:	0039      	movs	r1, r7
   10420:	f7f6 fb6c 	bl	6afc <__aeabi_dadd>
   10424:	9004      	str	r0, [sp, #16]
   10426:	9105      	str	r1, [sp, #20]
   10428:	2d0f      	cmp	r5, #15
   1042a:	dc45      	bgt.n	104b8 <_strtod_l+0x360>
   1042c:	9b08      	ldr	r3, [sp, #32]
   1042e:	2b00      	cmp	r3, #0
   10430:	d031      	beq.n	10496 <_strtod_l+0x33e>
   10432:	9b08      	ldr	r3, [sp, #32]
   10434:	2b00      	cmp	r3, #0
   10436:	dc01      	bgt.n	1043c <_strtod_l+0x2e4>
   10438:	f000 fc69 	bl	10d0e <_strtod_l+0xbb6>
   1043c:	2b16      	cmp	r3, #22
   1043e:	dd01      	ble.n	10444 <_strtod_l+0x2ec>
   10440:	f000 fc15 	bl	10c6e <_strtod_l+0xb16>
   10444:	4919      	ldr	r1, [pc, #100]	; (104ac <_strtod_l+0x354>)
   10446:	00da      	lsls	r2, r3, #3
   10448:	1889      	adds	r1, r1, r2
   1044a:	6808      	ldr	r0, [r1, #0]
   1044c:	6849      	ldr	r1, [r1, #4]
   1044e:	9a04      	ldr	r2, [sp, #16]
   10450:	9b05      	ldr	r3, [sp, #20]
   10452:	f7f7 f997 	bl	7784 <__aeabi_dmul>
   10456:	0004      	movs	r4, r0
   10458:	000d      	movs	r5, r1
   1045a:	e7b8      	b.n	103ce <_strtod_l+0x276>
   1045c:	2c4e      	cmp	r4, #78	; 0x4e
   1045e:	d009      	beq.n	10474 <_strtod_l+0x31c>
   10460:	dc01      	bgt.n	10466 <_strtod_l+0x30e>
   10462:	f000 fc2b 	bl	10cbc <_strtod_l+0xb64>
   10466:	2c69      	cmp	r4, #105	; 0x69
   10468:	d101      	bne.n	1046e <_strtod_l+0x316>
   1046a:	f000 fc2b 	bl	10cc4 <_strtod_l+0xb6c>
   1046e:	2c6e      	cmp	r4, #110	; 0x6e
   10470:	d000      	beq.n	10474 <_strtod_l+0x31c>
   10472:	e6b5      	b.n	101e0 <_strtod_l+0x88>
   10474:	490e      	ldr	r1, [pc, #56]	; (104b0 <_strtod_l+0x358>)
   10476:	a81d      	add	r0, sp, #116	; 0x74
   10478:	f001 fec0 	bl	121fc <__match>
   1047c:	2800      	cmp	r0, #0
   1047e:	d100      	bne.n	10482 <_strtod_l+0x32a>
   10480:	e6ae      	b.n	101e0 <_strtod_l+0x88>
   10482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10484:	781b      	ldrb	r3, [r3, #0]
   10486:	2b28      	cmp	r3, #40	; 0x28
   10488:	d101      	bne.n	1048e <_strtod_l+0x336>
   1048a:	f000 fd0d 	bl	10ea8 <_strtod_l+0xd50>
   1048e:	4b09      	ldr	r3, [pc, #36]	; (104b4 <_strtod_l+0x35c>)
   10490:	9305      	str	r3, [sp, #20]
   10492:	2300      	movs	r3, #0
   10494:	9304      	str	r3, [sp, #16]
   10496:	9c04      	ldr	r4, [sp, #16]
   10498:	9d05      	ldr	r5, [sp, #20]
   1049a:	e798      	b.n	103ce <_strtod_l+0x276>
   1049c:	2201      	movs	r2, #1
   1049e:	9208      	str	r2, [sp, #32]
   104a0:	e68c      	b.n	101bc <_strtod_l+0x64>
   104a2:	46c0      	nop			; (mov r8, r8)
   104a4:	000159e4 	.word	0x000159e4
   104a8:	00004e1f 	.word	0x00004e1f
   104ac:	00015910 	.word	0x00015910
   104b0:	00015ac0 	.word	0x00015ac0
   104b4:	fff80000 	.word	0xfff80000
   104b8:	9b08      	ldr	r3, [sp, #32]
   104ba:	1b2c      	subs	r4, r5, r4
   104bc:	469c      	mov	ip, r3
   104be:	4464      	add	r4, ip
   104c0:	2c00      	cmp	r4, #0
   104c2:	dc00      	bgt.n	104c6 <_strtod_l+0x36e>
   104c4:	e31f      	b.n	10b06 <_strtod_l+0x9ae>
   104c6:	230f      	movs	r3, #15
   104c8:	4023      	ands	r3, r4
   104ca:	d00a      	beq.n	104e2 <_strtod_l+0x38a>
   104cc:	49d9      	ldr	r1, [pc, #868]	; (10834 <_strtod_l+0x6dc>)
   104ce:	00db      	lsls	r3, r3, #3
   104d0:	18c9      	adds	r1, r1, r3
   104d2:	6808      	ldr	r0, [r1, #0]
   104d4:	6849      	ldr	r1, [r1, #4]
   104d6:	9a04      	ldr	r2, [sp, #16]
   104d8:	9b05      	ldr	r3, [sp, #20]
   104da:	f7f7 f953 	bl	7784 <__aeabi_dmul>
   104de:	9004      	str	r0, [sp, #16]
   104e0:	9105      	str	r1, [sp, #20]
   104e2:	230f      	movs	r3, #15
   104e4:	439c      	bics	r4, r3
   104e6:	d000      	beq.n	104ea <_strtod_l+0x392>
   104e8:	e15d      	b.n	107a6 <_strtod_l+0x64e>
   104ea:	2300      	movs	r3, #0
   104ec:	930c      	str	r3, [sp, #48]	; 0x30
   104ee:	4643      	mov	r3, r8
   104f0:	9300      	str	r3, [sp, #0]
   104f2:	002b      	movs	r3, r5
   104f4:	9d09      	ldr	r5, [sp, #36]	; 0x24
   104f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   104f8:	4651      	mov	r1, sl
   104fa:	0028      	movs	r0, r5
   104fc:	f7fe ffc0 	bl	f480 <__s2b>
   10500:	2800      	cmp	r0, #0
   10502:	d100      	bne.n	10506 <_strtod_l+0x3ae>
   10504:	e255      	b.n	109b2 <_strtod_l+0x85a>
   10506:	9908      	ldr	r1, [sp, #32]
   10508:	424b      	negs	r3, r1
   1050a:	17ca      	asrs	r2, r1, #31
   1050c:	401a      	ands	r2, r3
   1050e:	920e      	str	r2, [sp, #56]	; 0x38
   10510:	43ca      	mvns	r2, r1
   10512:	000b      	movs	r3, r1
   10514:	17d2      	asrs	r2, r2, #31
   10516:	4013      	ands	r3, r2
   10518:	930d      	str	r3, [sp, #52]	; 0x34
   1051a:	2300      	movs	r3, #0
   1051c:	4699      	mov	r9, r3
   1051e:	4698      	mov	r8, r3
   10520:	465b      	mov	r3, fp
   10522:	4683      	mov	fp, r0
   10524:	9315      	str	r3, [sp, #84]	; 0x54
   10526:	e0f4      	b.n	10712 <_strtod_l+0x5ba>
   10528:	1ac9      	subs	r1, r1, r3
   1052a:	1a52      	subs	r2, r2, r1
   1052c:	291f      	cmp	r1, #31
   1052e:	dd00      	ble.n	10532 <_strtod_l+0x3da>
   10530:	e1b5      	b.n	1089e <_strtod_l+0x746>
   10532:	2301      	movs	r3, #1
   10534:	408b      	lsls	r3, r1
   10536:	9310      	str	r3, [sp, #64]	; 0x40
   10538:	2300      	movs	r3, #0
   1053a:	9311      	str	r3, [sp, #68]	; 0x44
   1053c:	18bb      	adds	r3, r7, r2
   1053e:	469a      	mov	sl, r3
   10540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10542:	18b6      	adds	r6, r6, r2
   10544:	469c      	mov	ip, r3
   10546:	003b      	movs	r3, r7
   10548:	4466      	add	r6, ip
   1054a:	4557      	cmp	r7, sl
   1054c:	dd00      	ble.n	10550 <_strtod_l+0x3f8>
   1054e:	4653      	mov	r3, sl
   10550:	42b3      	cmp	r3, r6
   10552:	dd00      	ble.n	10556 <_strtod_l+0x3fe>
   10554:	0033      	movs	r3, r6
   10556:	2b00      	cmp	r3, #0
   10558:	dd04      	ble.n	10564 <_strtod_l+0x40c>
   1055a:	4652      	mov	r2, sl
   1055c:	1ad2      	subs	r2, r2, r3
   1055e:	4692      	mov	sl, r2
   10560:	1af6      	subs	r6, r6, r3
   10562:	1aff      	subs	r7, r7, r3
   10564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10566:	2b00      	cmp	r3, #0
   10568:	d015      	beq.n	10596 <_strtod_l+0x43e>
   1056a:	4641      	mov	r1, r8
   1056c:	001a      	movs	r2, r3
   1056e:	0028      	movs	r0, r5
   10570:	f7ff f8cc 	bl	f70c <__pow5mult>
   10574:	4680      	mov	r8, r0
   10576:	2800      	cmp	r0, #0
   10578:	d100      	bne.n	1057c <_strtod_l+0x424>
   1057a:	e252      	b.n	10a22 <_strtod_l+0x8ca>
   1057c:	0001      	movs	r1, r0
   1057e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   10580:	0028      	movs	r0, r5
   10582:	f7ff f819 	bl	f5b8 <__multiply>
   10586:	1e04      	subs	r4, r0, #0
   10588:	d100      	bne.n	1058c <_strtod_l+0x434>
   1058a:	e24a      	b.n	10a22 <_strtod_l+0x8ca>
   1058c:	991e      	ldr	r1, [sp, #120]	; 0x78
   1058e:	0028      	movs	r0, r5
   10590:	f7fe ff26 	bl	f3e0 <_Bfree>
   10594:	941e      	str	r4, [sp, #120]	; 0x78
   10596:	4653      	mov	r3, sl
   10598:	2b00      	cmp	r3, #0
   1059a:	dd08      	ble.n	105ae <_strtod_l+0x456>
   1059c:	4652      	mov	r2, sl
   1059e:	991e      	ldr	r1, [sp, #120]	; 0x78
   105a0:	0028      	movs	r0, r5
   105a2:	f7ff f913 	bl	f7cc <__lshift>
   105a6:	901e      	str	r0, [sp, #120]	; 0x78
   105a8:	2800      	cmp	r0, #0
   105aa:	d100      	bne.n	105ae <_strtod_l+0x456>
   105ac:	e3c2      	b.n	10d34 <_strtod_l+0xbdc>
   105ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   105b0:	2b00      	cmp	r3, #0
   105b2:	d008      	beq.n	105c6 <_strtod_l+0x46e>
   105b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   105b6:	9908      	ldr	r1, [sp, #32]
   105b8:	0028      	movs	r0, r5
   105ba:	f7ff f8a7 	bl	f70c <__pow5mult>
   105be:	9008      	str	r0, [sp, #32]
   105c0:	2800      	cmp	r0, #0
   105c2:	d100      	bne.n	105c6 <_strtod_l+0x46e>
   105c4:	e22d      	b.n	10a22 <_strtod_l+0x8ca>
   105c6:	2e00      	cmp	r6, #0
   105c8:	dd08      	ble.n	105dc <_strtod_l+0x484>
   105ca:	0032      	movs	r2, r6
   105cc:	9908      	ldr	r1, [sp, #32]
   105ce:	0028      	movs	r0, r5
   105d0:	f7ff f8fc 	bl	f7cc <__lshift>
   105d4:	9008      	str	r0, [sp, #32]
   105d6:	2800      	cmp	r0, #0
   105d8:	d100      	bne.n	105dc <_strtod_l+0x484>
   105da:	e222      	b.n	10a22 <_strtod_l+0x8ca>
   105dc:	2f00      	cmp	r7, #0
   105de:	dd08      	ble.n	105f2 <_strtod_l+0x49a>
   105e0:	4641      	mov	r1, r8
   105e2:	003a      	movs	r2, r7
   105e4:	0028      	movs	r0, r5
   105e6:	f7ff f8f1 	bl	f7cc <__lshift>
   105ea:	4680      	mov	r8, r0
   105ec:	2800      	cmp	r0, #0
   105ee:	d100      	bne.n	105f2 <_strtod_l+0x49a>
   105f0:	e217      	b.n	10a22 <_strtod_l+0x8ca>
   105f2:	9a08      	ldr	r2, [sp, #32]
   105f4:	991e      	ldr	r1, [sp, #120]	; 0x78
   105f6:	0028      	movs	r0, r5
   105f8:	f7ff f962 	bl	f8c0 <__mdiff>
   105fc:	4681      	mov	r9, r0
   105fe:	2800      	cmp	r0, #0
   10600:	d100      	bne.n	10604 <_strtod_l+0x4ac>
   10602:	e20e      	b.n	10a22 <_strtod_l+0x8ca>
   10604:	68c3      	ldr	r3, [r0, #12]
   10606:	4641      	mov	r1, r8
   10608:	930f      	str	r3, [sp, #60]	; 0x3c
   1060a:	2300      	movs	r3, #0
   1060c:	60c3      	str	r3, [r0, #12]
   1060e:	f7ff f93d 	bl	f88c <__mcmp>
   10612:	2800      	cmp	r0, #0
   10614:	da01      	bge.n	1061a <_strtod_l+0x4c2>
   10616:	f000 fbd8 	bl	10dca <_strtod_l+0xc72>
   1061a:	d100      	bne.n	1061e <_strtod_l+0x4c6>
   1061c:	e38e      	b.n	10d3c <_strtod_l+0xbe4>
   1061e:	4641      	mov	r1, r8
   10620:	4648      	mov	r0, r9
   10622:	f7ff fad9 	bl	fbd8 <__ratio>
   10626:	2380      	movs	r3, #128	; 0x80
   10628:	2200      	movs	r2, #0
   1062a:	05db      	lsls	r3, r3, #23
   1062c:	0006      	movs	r6, r0
   1062e:	000f      	movs	r7, r1
   10630:	f7f7 ff5e 	bl	84f0 <__aeabi_dcmple>
   10634:	2800      	cmp	r0, #0
   10636:	d100      	bne.n	1063a <_strtod_l+0x4e2>
   10638:	e116      	b.n	10868 <_strtod_l+0x710>
   1063a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1063c:	2b00      	cmp	r3, #0
   1063e:	d100      	bne.n	10642 <_strtod_l+0x4ea>
   10640:	e135      	b.n	108ae <_strtod_l+0x756>
   10642:	9b05      	ldr	r3, [sp, #20]
   10644:	2600      	movs	r6, #0
   10646:	9310      	str	r3, [sp, #64]	; 0x40
   10648:	2300      	movs	r3, #0
   1064a:	9311      	str	r3, [sp, #68]	; 0x44
   1064c:	4b7a      	ldr	r3, [pc, #488]	; (10838 <_strtod_l+0x6e0>)
   1064e:	4f7a      	ldr	r7, [pc, #488]	; (10838 <_strtod_l+0x6e0>)
   10650:	9314      	str	r3, [sp, #80]	; 0x50
   10652:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10654:	4a79      	ldr	r2, [pc, #484]	; (1083c <_strtod_l+0x6e4>)
   10656:	4013      	ands	r3, r2
   10658:	469a      	mov	sl, r3
   1065a:	4b79      	ldr	r3, [pc, #484]	; (10840 <_strtod_l+0x6e8>)
   1065c:	459a      	cmp	sl, r3
   1065e:	d100      	bne.n	10662 <_strtod_l+0x50a>
   10660:	e1af      	b.n	109c2 <_strtod_l+0x86a>
   10662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10664:	2b00      	cmp	r3, #0
   10666:	d02a      	beq.n	106be <_strtod_l+0x566>
   10668:	23d4      	movs	r3, #212	; 0xd4
   1066a:	04db      	lsls	r3, r3, #19
   1066c:	459a      	cmp	sl, r3
   1066e:	d826      	bhi.n	106be <_strtod_l+0x566>
   10670:	9c14      	ldr	r4, [sp, #80]	; 0x50
   10672:	4a74      	ldr	r2, [pc, #464]	; (10844 <_strtod_l+0x6ec>)
   10674:	4b74      	ldr	r3, [pc, #464]	; (10848 <_strtod_l+0x6f0>)
   10676:	9811      	ldr	r0, [sp, #68]	; 0x44
   10678:	0021      	movs	r1, r4
   1067a:	f7f7 ff39 	bl	84f0 <__aeabi_dcmple>
   1067e:	2800      	cmp	r0, #0
   10680:	d018      	beq.n	106b4 <_strtod_l+0x55c>
   10682:	9811      	ldr	r0, [sp, #68]	; 0x44
   10684:	0021      	movs	r1, r4
   10686:	f7f6 f83b 	bl	6700 <__aeabi_d2uiz>
   1068a:	2800      	cmp	r0, #0
   1068c:	d100      	bne.n	10690 <_strtod_l+0x538>
   1068e:	e310      	b.n	10cb2 <_strtod_l+0xb5a>
   10690:	f7f7 fe84 	bl	839c <__aeabi_ui2d>
   10694:	9011      	str	r0, [sp, #68]	; 0x44
   10696:	9114      	str	r1, [sp, #80]	; 0x50
   10698:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1069a:	2b00      	cmp	r3, #0
   1069c:	d000      	beq.n	106a0 <_strtod_l+0x548>
   1069e:	e303      	b.n	10ca8 <_strtod_l+0xb50>
   106a0:	2280      	movs	r2, #128	; 0x80
   106a2:	0612      	lsls	r2, r2, #24
   106a4:	4694      	mov	ip, r2
   106a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   106a8:	9318      	str	r3, [sp, #96]	; 0x60
   106aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   106ac:	4463      	add	r3, ip
   106ae:	9319      	str	r3, [sp, #100]	; 0x64
   106b0:	9e18      	ldr	r6, [sp, #96]	; 0x60
   106b2:	9f19      	ldr	r7, [sp, #100]	; 0x64
   106b4:	23d6      	movs	r3, #214	; 0xd6
   106b6:	4652      	mov	r2, sl
   106b8:	04db      	lsls	r3, r3, #19
   106ba:	18fb      	adds	r3, r7, r3
   106bc:	1a9f      	subs	r7, r3, r2
   106be:	980a      	ldr	r0, [sp, #40]	; 0x28
   106c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   106c2:	f7ff f999 	bl	f9f8 <__ulp>
   106c6:	0002      	movs	r2, r0
   106c8:	000b      	movs	r3, r1
   106ca:	0030      	movs	r0, r6
   106cc:	0039      	movs	r1, r7
   106ce:	f7f7 f859 	bl	7784 <__aeabi_dmul>
   106d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   106d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   106d6:	f7f6 fa11 	bl	6afc <__aeabi_dadd>
   106da:	0003      	movs	r3, r0
   106dc:	000c      	movs	r4, r1
   106de:	9304      	str	r3, [sp, #16]
   106e0:	9405      	str	r4, [sp, #20]
   106e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   106e4:	2b00      	cmp	r3, #0
   106e6:	d104      	bne.n	106f2 <_strtod_l+0x59a>
   106e8:	4b54      	ldr	r3, [pc, #336]	; (1083c <_strtod_l+0x6e4>)
   106ea:	4023      	ands	r3, r4
   106ec:	459a      	cmp	sl, r3
   106ee:	d100      	bne.n	106f2 <_strtod_l+0x59a>
   106f0:	e1bd      	b.n	10a6e <_strtod_l+0x916>
   106f2:	991e      	ldr	r1, [sp, #120]	; 0x78
   106f4:	0028      	movs	r0, r5
   106f6:	f7fe fe73 	bl	f3e0 <_Bfree>
   106fa:	9908      	ldr	r1, [sp, #32]
   106fc:	0028      	movs	r0, r5
   106fe:	f7fe fe6f 	bl	f3e0 <_Bfree>
   10702:	4641      	mov	r1, r8
   10704:	0028      	movs	r0, r5
   10706:	f7fe fe6b 	bl	f3e0 <_Bfree>
   1070a:	4649      	mov	r1, r9
   1070c:	0028      	movs	r0, r5
   1070e:	f7fe fe67 	bl	f3e0 <_Bfree>
   10712:	465b      	mov	r3, fp
   10714:	0028      	movs	r0, r5
   10716:	6859      	ldr	r1, [r3, #4]
   10718:	f7fe fe3a 	bl	f390 <_Balloc>
   1071c:	9008      	str	r0, [sp, #32]
   1071e:	2800      	cmp	r0, #0
   10720:	d100      	bne.n	10724 <_strtod_l+0x5cc>
   10722:	e17e      	b.n	10a22 <_strtod_l+0x8ca>
   10724:	465a      	mov	r2, fp
   10726:	4659      	mov	r1, fp
   10728:	6912      	ldr	r2, [r2, #16]
   1072a:	310c      	adds	r1, #12
   1072c:	3202      	adds	r2, #2
   1072e:	0092      	lsls	r2, r2, #2
   10730:	300c      	adds	r0, #12
   10732:	f7f8 f88f 	bl	8854 <memcpy>
   10736:	9b04      	ldr	r3, [sp, #16]
   10738:	9c05      	ldr	r4, [sp, #20]
   1073a:	0019      	movs	r1, r3
   1073c:	0022      	movs	r2, r4
   1073e:	ab20      	add	r3, sp, #128	; 0x80
   10740:	9301      	str	r3, [sp, #4]
   10742:	ab1f      	add	r3, sp, #124	; 0x7c
   10744:	910a      	str	r1, [sp, #40]	; 0x28
   10746:	920b      	str	r2, [sp, #44]	; 0x2c
   10748:	9300      	str	r3, [sp, #0]
   1074a:	000a      	movs	r2, r1
   1074c:	0023      	movs	r3, r4
   1074e:	0028      	movs	r0, r5
   10750:	f7ff f9e4 	bl	fb1c <__d2b>
   10754:	901e      	str	r0, [sp, #120]	; 0x78
   10756:	2800      	cmp	r0, #0
   10758:	d100      	bne.n	1075c <_strtod_l+0x604>
   1075a:	e2eb      	b.n	10d34 <_strtod_l+0xbdc>
   1075c:	2101      	movs	r1, #1
   1075e:	0028      	movs	r0, r5
   10760:	f7fe ff20 	bl	f5a4 <__i2b>
   10764:	4680      	mov	r8, r0
   10766:	2800      	cmp	r0, #0
   10768:	d100      	bne.n	1076c <_strtod_l+0x614>
   1076a:	e15a      	b.n	10a22 <_strtod_l+0x8ca>
   1076c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1076e:	2b00      	cmp	r3, #0
   10770:	da00      	bge.n	10774 <_strtod_l+0x61c>
   10772:	e090      	b.n	10896 <_strtod_l+0x73e>
   10774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   10776:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   10778:	18d7      	adds	r7, r2, r3
   1077a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1077c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1077e:	1a5b      	subs	r3, r3, r1
   10780:	2136      	movs	r1, #54	; 0x36
   10782:	189b      	adds	r3, r3, r2
   10784:	1a8a      	subs	r2, r1, r2
   10786:	4931      	ldr	r1, [pc, #196]	; (1084c <_strtod_l+0x6f4>)
   10788:	3b01      	subs	r3, #1
   1078a:	428b      	cmp	r3, r1
   1078c:	da00      	bge.n	10790 <_strtod_l+0x638>
   1078e:	e6cb      	b.n	10528 <_strtod_l+0x3d0>
   10790:	2300      	movs	r3, #0
   10792:	9311      	str	r3, [sp, #68]	; 0x44
   10794:	3301      	adds	r3, #1
   10796:	9310      	str	r3, [sp, #64]	; 0x40
   10798:	e6d0      	b.n	1053c <_strtod_l+0x3e4>
   1079a:	2201      	movs	r2, #1
   1079c:	920d      	str	r2, [sp, #52]	; 0x34
   1079e:	1cb2      	adds	r2, r6, #2
   107a0:	921d      	str	r2, [sp, #116]	; 0x74
   107a2:	78b4      	ldrb	r4, [r6, #2]
   107a4:	e5ca      	b.n	1033c <_strtod_l+0x1e4>
   107a6:	239a      	movs	r3, #154	; 0x9a
   107a8:	005b      	lsls	r3, r3, #1
   107aa:	429c      	cmp	r4, r3
   107ac:	dd00      	ble.n	107b0 <_strtod_l+0x658>
   107ae:	e100      	b.n	109b2 <_strtod_l+0x85a>
   107b0:	1124      	asrs	r4, r4, #4
   107b2:	2c01      	cmp	r4, #1
   107b4:	dc00      	bgt.n	107b8 <_strtod_l+0x660>
   107b6:	e361      	b.n	10e7c <_strtod_l+0xd24>
   107b8:	9804      	ldr	r0, [sp, #16]
   107ba:	9905      	ldr	r1, [sp, #20]
   107bc:	2201      	movs	r2, #1
   107be:	4b24      	ldr	r3, [pc, #144]	; (10850 <_strtod_l+0x6f8>)
   107c0:	2700      	movs	r7, #0
   107c2:	930c      	str	r3, [sp, #48]	; 0x30
   107c4:	001e      	movs	r6, r3
   107c6:	4691      	mov	r9, r2
   107c8:	2300      	movs	r3, #0
   107ca:	464a      	mov	r2, r9
   107cc:	4222      	tst	r2, r4
   107ce:	d004      	beq.n	107da <_strtod_l+0x682>
   107d0:	6832      	ldr	r2, [r6, #0]
   107d2:	6873      	ldr	r3, [r6, #4]
   107d4:	f7f6 ffd6 	bl	7784 <__aeabi_dmul>
   107d8:	2301      	movs	r3, #1
   107da:	3701      	adds	r7, #1
   107dc:	1064      	asrs	r4, r4, #1
   107de:	3608      	adds	r6, #8
   107e0:	2c01      	cmp	r4, #1
   107e2:	d1f2      	bne.n	107ca <_strtod_l+0x672>
   107e4:	2b00      	cmp	r3, #0
   107e6:	d001      	beq.n	107ec <_strtod_l+0x694>
   107e8:	f000 fbf4 	bl	10fd4 <_strtod_l+0xe7c>
   107ec:	4a19      	ldr	r2, [pc, #100]	; (10854 <_strtod_l+0x6fc>)
   107ee:	9b05      	ldr	r3, [sp, #20]
   107f0:	4694      	mov	ip, r2
   107f2:	4463      	add	r3, ip
   107f4:	9305      	str	r3, [sp, #20]
   107f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   107f8:	00ff      	lsls	r7, r7, #3
   107fa:	469c      	mov	ip, r3
   107fc:	9a04      	ldr	r2, [sp, #16]
   107fe:	9b05      	ldr	r3, [sp, #20]
   10800:	4467      	add	r7, ip
   10802:	6838      	ldr	r0, [r7, #0]
   10804:	6879      	ldr	r1, [r7, #4]
   10806:	f7f6 ffbd 	bl	7784 <__aeabi_dmul>
   1080a:	000a      	movs	r2, r1
   1080c:	0003      	movs	r3, r0
   1080e:	0014      	movs	r4, r2
   10810:	9304      	str	r3, [sp, #16]
   10812:	9405      	str	r4, [sp, #20]
   10814:	4b09      	ldr	r3, [pc, #36]	; (1083c <_strtod_l+0x6e4>)
   10816:	4013      	ands	r3, r2
   10818:	4a0f      	ldr	r2, [pc, #60]	; (10858 <_strtod_l+0x700>)
   1081a:	4293      	cmp	r3, r2
   1081c:	d900      	bls.n	10820 <_strtod_l+0x6c8>
   1081e:	e0c8      	b.n	109b2 <_strtod_l+0x85a>
   10820:	4a0e      	ldr	r2, [pc, #56]	; (1085c <_strtod_l+0x704>)
   10822:	4293      	cmp	r3, r2
   10824:	d800      	bhi.n	10828 <_strtod_l+0x6d0>
   10826:	e308      	b.n	10e3a <_strtod_l+0xce2>
   10828:	4b0d      	ldr	r3, [pc, #52]	; (10860 <_strtod_l+0x708>)
   1082a:	9305      	str	r3, [sp, #20]
   1082c:	2301      	movs	r3, #1
   1082e:	425b      	negs	r3, r3
   10830:	9304      	str	r3, [sp, #16]
   10832:	e65a      	b.n	104ea <_strtod_l+0x392>
   10834:	00015910 	.word	0x00015910
   10838:	3ff00000 	.word	0x3ff00000
   1083c:	7ff00000 	.word	0x7ff00000
   10840:	7fe00000 	.word	0x7fe00000
   10844:	ffc00000 	.word	0xffc00000
   10848:	41dfffff 	.word	0x41dfffff
   1084c:	fffffc02 	.word	0xfffffc02
   10850:	000158e8 	.word	0x000158e8
   10854:	fcb00000 	.word	0xfcb00000
   10858:	7ca00000 	.word	0x7ca00000
   1085c:	7c900000 	.word	0x7c900000
   10860:	7fefffff 	.word	0x7fefffff
   10864:	4ace      	ldr	r2, [pc, #824]	; (10ba0 <_strtod_l+0xa48>)
   10866:	e5aa      	b.n	103be <_strtod_l+0x266>
   10868:	4bce      	ldr	r3, [pc, #824]	; (10ba4 <_strtod_l+0xa4c>)
   1086a:	2200      	movs	r2, #0
   1086c:	0030      	movs	r0, r6
   1086e:	0039      	movs	r1, r7
   10870:	f7f6 ff88 	bl	7784 <__aeabi_dmul>
   10874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10876:	9011      	str	r0, [sp, #68]	; 0x44
   10878:	9114      	str	r1, [sp, #80]	; 0x50
   1087a:	2b00      	cmp	r3, #0
   1087c:	d139      	bne.n	108f2 <_strtod_l+0x79a>
   1087e:	2280      	movs	r2, #128	; 0x80
   10880:	0612      	lsls	r2, r2, #24
   10882:	000b      	movs	r3, r1
   10884:	4694      	mov	ip, r2
   10886:	4463      	add	r3, ip
   10888:	9012      	str	r0, [sp, #72]	; 0x48
   1088a:	9313      	str	r3, [sp, #76]	; 0x4c
   1088c:	9b05      	ldr	r3, [sp, #20]
   1088e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   10890:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   10892:	9310      	str	r3, [sp, #64]	; 0x40
   10894:	e6dd      	b.n	10652 <_strtod_l+0x4fa>
   10896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10898:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1089a:	1ad6      	subs	r6, r2, r3
   1089c:	e76d      	b.n	1077a <_strtod_l+0x622>
   1089e:	49c2      	ldr	r1, [pc, #776]	; (10ba8 <_strtod_l+0xa50>)
   108a0:	1acb      	subs	r3, r1, r3
   108a2:	2101      	movs	r1, #1
   108a4:	4099      	lsls	r1, r3
   108a6:	2301      	movs	r3, #1
   108a8:	9111      	str	r1, [sp, #68]	; 0x44
   108aa:	9310      	str	r3, [sp, #64]	; 0x40
   108ac:	e646      	b.n	1053c <_strtod_l+0x3e4>
   108ae:	9904      	ldr	r1, [sp, #16]
   108b0:	9a05      	ldr	r2, [sp, #20]
   108b2:	2900      	cmp	r1, #0
   108b4:	d140      	bne.n	10938 <_strtod_l+0x7e0>
   108b6:	9210      	str	r2, [sp, #64]	; 0x40
   108b8:	0313      	lsls	r3, r2, #12
   108ba:	d142      	bne.n	10942 <_strtod_l+0x7ea>
   108bc:	2200      	movs	r2, #0
   108be:	4bbb      	ldr	r3, [pc, #748]	; (10bac <_strtod_l+0xa54>)
   108c0:	0030      	movs	r0, r6
   108c2:	0039      	movs	r1, r7
   108c4:	f7f7 fe0a 	bl	84dc <__aeabi_dcmplt>
   108c8:	2800      	cmp	r0, #0
   108ca:	d000      	beq.n	108ce <_strtod_l+0x776>
   108cc:	e2bf      	b.n	10e4e <_strtod_l+0xcf6>
   108ce:	2200      	movs	r2, #0
   108d0:	4bb4      	ldr	r3, [pc, #720]	; (10ba4 <_strtod_l+0xa4c>)
   108d2:	0030      	movs	r0, r6
   108d4:	0039      	movs	r1, r7
   108d6:	f7f6 ff55 	bl	7784 <__aeabi_dmul>
   108da:	2280      	movs	r2, #128	; 0x80
   108dc:	0612      	lsls	r2, r2, #24
   108de:	000b      	movs	r3, r1
   108e0:	4694      	mov	ip, r2
   108e2:	4463      	add	r3, ip
   108e4:	9011      	str	r0, [sp, #68]	; 0x44
   108e6:	9114      	str	r1, [sp, #80]	; 0x50
   108e8:	901a      	str	r0, [sp, #104]	; 0x68
   108ea:	931b      	str	r3, [sp, #108]	; 0x6c
   108ec:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   108ee:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   108f0:	e6af      	b.n	10652 <_strtod_l+0x4fa>
   108f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   108f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   108f6:	9212      	str	r2, [sp, #72]	; 0x48
   108f8:	9313      	str	r3, [sp, #76]	; 0x4c
   108fa:	e7c7      	b.n	1088c <_strtod_l+0x734>
   108fc:	9b07      	ldr	r3, [sp, #28]
   108fe:	9502      	str	r5, [sp, #8]
   10900:	9301      	str	r3, [sp, #4]
   10902:	ab1e      	add	r3, sp, #120	; 0x78
   10904:	9300      	str	r3, [sp, #0]
   10906:	4aaa      	ldr	r2, [pc, #680]	; (10bb0 <_strtod_l+0xa58>)
   10908:	ab1f      	add	r3, sp, #124	; 0x7c
   1090a:	a91d      	add	r1, sp, #116	; 0x74
   1090c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1090e:	f001 f9e1 	bl	11cd4 <__gethex>
   10912:	2407      	movs	r4, #7
   10914:	0005      	movs	r5, r0
   10916:	4004      	ands	r4, r0
   10918:	d100      	bne.n	1091c <_strtod_l+0x7c4>
   1091a:	e556      	b.n	103ca <_strtod_l+0x272>
   1091c:	2c06      	cmp	r4, #6
   1091e:	d000      	beq.n	10922 <_strtod_l+0x7ca>
   10920:	e15e      	b.n	10be0 <_strtod_l+0xa88>
   10922:	4653      	mov	r3, sl
   10924:	3301      	adds	r3, #1
   10926:	931d      	str	r3, [sp, #116]	; 0x74
   10928:	2300      	movs	r3, #0
   1092a:	2400      	movs	r4, #0
   1092c:	2500      	movs	r5, #0
   1092e:	9307      	str	r3, [sp, #28]
   10930:	e54d      	b.n	103ce <_strtod_l+0x276>
   10932:	961d      	str	r6, [sp, #116]	; 0x74
   10934:	2200      	movs	r2, #0
   10936:	e448      	b.n	101ca <_strtod_l+0x72>
   10938:	2901      	cmp	r1, #1
   1093a:	d100      	bne.n	1093e <_strtod_l+0x7e6>
   1093c:	e1d8      	b.n	10cf0 <_strtod_l+0xb98>
   1093e:	9b05      	ldr	r3, [sp, #20]
   10940:	9310      	str	r3, [sp, #64]	; 0x40
   10942:	2300      	movs	r3, #0
   10944:	9311      	str	r3, [sp, #68]	; 0x44
   10946:	4b99      	ldr	r3, [pc, #612]	; (10bac <_strtod_l+0xa54>)
   10948:	2600      	movs	r6, #0
   1094a:	4f9a      	ldr	r7, [pc, #616]	; (10bb4 <_strtod_l+0xa5c>)
   1094c:	9314      	str	r3, [sp, #80]	; 0x50
   1094e:	e680      	b.n	10652 <_strtod_l+0x4fa>
   10950:	6839      	ldr	r1, [r7, #0]
   10952:	9a08      	ldr	r2, [sp, #32]
   10954:	4650      	mov	r0, sl
   10956:	f001 fd4d 	bl	123f4 <strncmp>
   1095a:	900a      	str	r0, [sp, #40]	; 0x28
   1095c:	2800      	cmp	r0, #0
   1095e:	d009      	beq.n	10974 <_strtod_l+0x81c>
   10960:	2300      	movs	r3, #0
   10962:	2200      	movs	r2, #0
   10964:	930a      	str	r3, [sp, #40]	; 0x28
   10966:	4699      	mov	r9, r3
   10968:	4698      	mov	r8, r3
   1096a:	2000      	movs	r0, #0
   1096c:	2500      	movs	r5, #0
   1096e:	9208      	str	r2, [sp, #32]
   10970:	f7ff fc24 	bl	101bc <_strtod_l+0x64>
   10974:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10976:	9b08      	ldr	r3, [sp, #32]
   10978:	4694      	mov	ip, r2
   1097a:	4463      	add	r3, ip
   1097c:	931d      	str	r3, [sp, #116]	; 0x74
   1097e:	781c      	ldrb	r4, [r3, #0]
   10980:	0019      	movs	r1, r3
   10982:	1c5a      	adds	r2, r3, #1
   10984:	2300      	movs	r3, #0
   10986:	2c30      	cmp	r4, #48	; 0x30
   10988:	d105      	bne.n	10996 <_strtod_l+0x83e>
   1098a:	921d      	str	r2, [sp, #116]	; 0x74
   1098c:	7814      	ldrb	r4, [r2, #0]
   1098e:	1a53      	subs	r3, r2, r1
   10990:	3201      	adds	r2, #1
   10992:	2c30      	cmp	r4, #48	; 0x30
   10994:	d0f9      	beq.n	1098a <_strtod_l+0x832>
   10996:	0022      	movs	r2, r4
   10998:	3a31      	subs	r2, #49	; 0x31
   1099a:	2a08      	cmp	r2, #8
   1099c:	d800      	bhi.n	109a0 <_strtod_l+0x848>
   1099e:	e153      	b.n	10c48 <_strtod_l+0xaf0>
   109a0:	2200      	movs	r2, #0
   109a2:	4691      	mov	r9, r2
   109a4:	4690      	mov	r8, r2
   109a6:	3201      	adds	r2, #1
   109a8:	2000      	movs	r0, #0
   109aa:	2500      	movs	r5, #0
   109ac:	9208      	str	r2, [sp, #32]
   109ae:	f7ff fc05 	bl	101bc <_strtod_l+0x64>
   109b2:	2322      	movs	r3, #34	; 0x22
   109b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109b6:	6013      	str	r3, [r2, #0]
   109b8:	4b7f      	ldr	r3, [pc, #508]	; (10bb8 <_strtod_l+0xa60>)
   109ba:	9305      	str	r3, [sp, #20]
   109bc:	2300      	movs	r3, #0
   109be:	9304      	str	r3, [sp, #16]
   109c0:	e569      	b.n	10496 <_strtod_l+0x33e>
   109c2:	497e      	ldr	r1, [pc, #504]	; (10bbc <_strtod_l+0xa64>)
   109c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   109c6:	468c      	mov	ip, r1
   109c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   109ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   109cc:	4462      	add	r2, ip
   109ce:	9205      	str	r2, [sp, #20]
   109d0:	960a      	str	r6, [sp, #40]	; 0x28
   109d2:	970b      	str	r7, [sp, #44]	; 0x2c
   109d4:	9e04      	ldr	r6, [sp, #16]
   109d6:	9f05      	ldr	r7, [sp, #20]
   109d8:	0030      	movs	r0, r6
   109da:	0039      	movs	r1, r7
   109dc:	9316      	str	r3, [sp, #88]	; 0x58
   109de:	9417      	str	r4, [sp, #92]	; 0x5c
   109e0:	f7ff f80a 	bl	f9f8 <__ulp>
   109e4:	0002      	movs	r2, r0
   109e6:	000b      	movs	r3, r1
   109e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   109ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   109ec:	f7f6 feca 	bl	7784 <__aeabi_dmul>
   109f0:	0032      	movs	r2, r6
   109f2:	003b      	movs	r3, r7
   109f4:	f7f6 f882 	bl	6afc <__aeabi_dadd>
   109f8:	4b6f      	ldr	r3, [pc, #444]	; (10bb8 <_strtod_l+0xa60>)
   109fa:	4a71      	ldr	r2, [pc, #452]	; (10bc0 <_strtod_l+0xa68>)
   109fc:	9004      	str	r0, [sp, #16]
   109fe:	9105      	str	r1, [sp, #20]
   10a00:	400b      	ands	r3, r1
   10a02:	4293      	cmp	r3, r2
   10a04:	d800      	bhi.n	10a08 <_strtod_l+0x8b0>
   10a06:	e0c6      	b.n	10b96 <_strtod_l+0xa3e>
   10a08:	4b6e      	ldr	r3, [pc, #440]	; (10bc4 <_strtod_l+0xa6c>)
   10a0a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10a0c:	429a      	cmp	r2, r3
   10a0e:	d005      	beq.n	10a1c <_strtod_l+0x8c4>
   10a10:	4b6c      	ldr	r3, [pc, #432]	; (10bc4 <_strtod_l+0xa6c>)
   10a12:	9305      	str	r3, [sp, #20]
   10a14:	2301      	movs	r3, #1
   10a16:	425b      	negs	r3, r3
   10a18:	9304      	str	r3, [sp, #16]
   10a1a:	e66a      	b.n	106f2 <_strtod_l+0x59a>
   10a1c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a1e:	3301      	adds	r3, #1
   10a20:	d1f6      	bne.n	10a10 <_strtod_l+0x8b8>
   10a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10a24:	46da      	mov	sl, fp
   10a26:	469b      	mov	fp, r3
   10a28:	981e      	ldr	r0, [sp, #120]	; 0x78
   10a2a:	2322      	movs	r3, #34	; 0x22
   10a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a2e:	6013      	str	r3, [r2, #0]
   10a30:	4b61      	ldr	r3, [pc, #388]	; (10bb8 <_strtod_l+0xa60>)
   10a32:	9305      	str	r3, [sp, #20]
   10a34:	2300      	movs	r3, #0
   10a36:	9304      	str	r3, [sp, #16]
   10a38:	9c04      	ldr	r4, [sp, #16]
   10a3a:	9d05      	ldr	r5, [sp, #20]
   10a3c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   10a3e:	0001      	movs	r1, r0
   10a40:	0030      	movs	r0, r6
   10a42:	f7fe fccd 	bl	f3e0 <_Bfree>
   10a46:	9908      	ldr	r1, [sp, #32]
   10a48:	0030      	movs	r0, r6
   10a4a:	f7fe fcc9 	bl	f3e0 <_Bfree>
   10a4e:	4641      	mov	r1, r8
   10a50:	0030      	movs	r0, r6
   10a52:	f7fe fcc5 	bl	f3e0 <_Bfree>
   10a56:	4651      	mov	r1, sl
   10a58:	0030      	movs	r0, r6
   10a5a:	f7fe fcc1 	bl	f3e0 <_Bfree>
   10a5e:	4649      	mov	r1, r9
   10a60:	0030      	movs	r0, r6
   10a62:	f7fe fcbd 	bl	f3e0 <_Bfree>
   10a66:	e4b2      	b.n	103ce <_strtod_l+0x276>
   10a68:	2200      	movs	r2, #0
   10a6a:	920d      	str	r2, [sp, #52]	; 0x34
   10a6c:	e697      	b.n	1079e <_strtod_l+0x646>
   10a6e:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10a70:	9e14      	ldr	r6, [sp, #80]	; 0x50
   10a72:	0038      	movs	r0, r7
   10a74:	0031      	movs	r1, r6
   10a76:	f7f7 fc1b 	bl	82b0 <__aeabi_d2iz>
   10a7a:	f7f7 fc4d 	bl	8318 <__aeabi_i2d>
   10a7e:	000b      	movs	r3, r1
   10a80:	0002      	movs	r2, r0
   10a82:	0031      	movs	r1, r6
   10a84:	0038      	movs	r0, r7
   10a86:	f7f7 f8fd 	bl	7c84 <__aeabi_dsub>
   10a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10a8c:	0006      	movs	r6, r0
   10a8e:	000f      	movs	r7, r1
   10a90:	2b00      	cmp	r3, #0
   10a92:	d112      	bne.n	10aba <_strtod_l+0x962>
   10a94:	9b04      	ldr	r3, [sp, #16]
   10a96:	2b00      	cmp	r3, #0
   10a98:	d10f      	bne.n	10aba <_strtod_l+0x962>
   10a9a:	0324      	lsls	r4, r4, #12
   10a9c:	d10d      	bne.n	10aba <_strtod_l+0x962>
   10a9e:	4a4a      	ldr	r2, [pc, #296]	; (10bc8 <_strtod_l+0xa70>)
   10aa0:	4b4a      	ldr	r3, [pc, #296]	; (10bcc <_strtod_l+0xa74>)
   10aa2:	f7f7 fd1b 	bl	84dc <__aeabi_dcmplt>
   10aa6:	2800      	cmp	r0, #0
   10aa8:	d100      	bne.n	10aac <_strtod_l+0x954>
   10aaa:	e622      	b.n	106f2 <_strtod_l+0x59a>
   10aac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10aae:	46da      	mov	sl, fp
   10ab0:	9c04      	ldr	r4, [sp, #16]
   10ab2:	9d05      	ldr	r5, [sp, #20]
   10ab4:	469b      	mov	fp, r3
   10ab6:	981e      	ldr	r0, [sp, #120]	; 0x78
   10ab8:	e7c0      	b.n	10a3c <_strtod_l+0x8e4>
   10aba:	4a43      	ldr	r2, [pc, #268]	; (10bc8 <_strtod_l+0xa70>)
   10abc:	4b44      	ldr	r3, [pc, #272]	; (10bd0 <_strtod_l+0xa78>)
   10abe:	0030      	movs	r0, r6
   10ac0:	0039      	movs	r1, r7
   10ac2:	f7f7 fd0b 	bl	84dc <__aeabi_dcmplt>
   10ac6:	2800      	cmp	r0, #0
   10ac8:	d1f0      	bne.n	10aac <_strtod_l+0x954>
   10aca:	4a42      	ldr	r2, [pc, #264]	; (10bd4 <_strtod_l+0xa7c>)
   10acc:	4b35      	ldr	r3, [pc, #212]	; (10ba4 <_strtod_l+0xa4c>)
   10ace:	0030      	movs	r0, r6
   10ad0:	0039      	movs	r1, r7
   10ad2:	f7f7 fd17 	bl	8504 <__aeabi_dcmpgt>
   10ad6:	2800      	cmp	r0, #0
   10ad8:	d100      	bne.n	10adc <_strtod_l+0x984>
   10ada:	e60a      	b.n	106f2 <_strtod_l+0x59a>
   10adc:	e7e6      	b.n	10aac <_strtod_l+0x954>
   10ade:	46a0      	mov	r8, r4
   10ae0:	991d      	ldr	r1, [sp, #116]	; 0x74
   10ae2:	3502      	adds	r5, #2
   10ae4:	2f08      	cmp	r7, #8
   10ae6:	dc00      	bgt.n	10aea <_strtod_l+0x992>
   10ae8:	e0b9      	b.n	10c5e <_strtod_l+0xb06>
   10aea:	2300      	movs	r3, #0
   10aec:	2d10      	cmp	r5, #16
   10aee:	dc05      	bgt.n	10afc <_strtod_l+0x9a4>
   10af0:	464c      	mov	r4, r9
   10af2:	00a4      	lsls	r4, r4, #2
   10af4:	444c      	add	r4, r9
   10af6:	4691      	mov	r9, r2
   10af8:	0064      	lsls	r4, r4, #1
   10afa:	44a1      	add	r9, r4
   10afc:	1c4a      	adds	r2, r1, #1
   10afe:	921d      	str	r2, [sp, #116]	; 0x74
   10b00:	784c      	ldrb	r4, [r1, #1]
   10b02:	f7ff fbe3 	bl	102cc <_strtod_l+0x174>
   10b06:	2c00      	cmp	r4, #0
   10b08:	d100      	bne.n	10b0c <_strtod_l+0x9b4>
   10b0a:	e4ee      	b.n	104ea <_strtod_l+0x392>
   10b0c:	230f      	movs	r3, #15
   10b0e:	4264      	negs	r4, r4
   10b10:	4023      	ands	r3, r4
   10b12:	d00a      	beq.n	10b2a <_strtod_l+0x9d2>
   10b14:	9804      	ldr	r0, [sp, #16]
   10b16:	9905      	ldr	r1, [sp, #20]
   10b18:	4a2f      	ldr	r2, [pc, #188]	; (10bd8 <_strtod_l+0xa80>)
   10b1a:	00db      	lsls	r3, r3, #3
   10b1c:	18d3      	adds	r3, r2, r3
   10b1e:	681a      	ldr	r2, [r3, #0]
   10b20:	685b      	ldr	r3, [r3, #4]
   10b22:	f7f6 fafb 	bl	711c <__aeabi_ddiv>
   10b26:	9004      	str	r0, [sp, #16]
   10b28:	9105      	str	r1, [sp, #20]
   10b2a:	1124      	asrs	r4, r4, #4
   10b2c:	d100      	bne.n	10b30 <_strtod_l+0x9d8>
   10b2e:	e4dc      	b.n	104ea <_strtod_l+0x392>
   10b30:	2c1f      	cmp	r4, #31
   10b32:	dc29      	bgt.n	10b88 <_strtod_l+0xa30>
   10b34:	2310      	movs	r3, #16
   10b36:	4023      	ands	r3, r4
   10b38:	930c      	str	r3, [sp, #48]	; 0x30
   10b3a:	d100      	bne.n	10b3e <_strtod_l+0x9e6>
   10b3c:	e1c5      	b.n	10eca <_strtod_l+0xd72>
   10b3e:	236a      	movs	r3, #106	; 0x6a
   10b40:	930c      	str	r3, [sp, #48]	; 0x30
   10b42:	2c00      	cmp	r4, #0
   10b44:	dc00      	bgt.n	10b48 <_strtod_l+0x9f0>
   10b46:	e1c4      	b.n	10ed2 <_strtod_l+0xd7a>
   10b48:	9804      	ldr	r0, [sp, #16]
   10b4a:	9905      	ldr	r1, [sp, #20]
   10b4c:	2300      	movs	r3, #0
   10b4e:	2701      	movs	r7, #1
   10b50:	4e22      	ldr	r6, [pc, #136]	; (10bdc <_strtod_l+0xa84>)
   10b52:	4227      	tst	r7, r4
   10b54:	d004      	beq.n	10b60 <_strtod_l+0xa08>
   10b56:	6832      	ldr	r2, [r6, #0]
   10b58:	6873      	ldr	r3, [r6, #4]
   10b5a:	f7f6 fe13 	bl	7784 <__aeabi_dmul>
   10b5e:	2301      	movs	r3, #1
   10b60:	1064      	asrs	r4, r4, #1
   10b62:	3608      	adds	r6, #8
   10b64:	2c00      	cmp	r4, #0
   10b66:	d1f4      	bne.n	10b52 <_strtod_l+0x9fa>
   10b68:	2b00      	cmp	r3, #0
   10b6a:	d000      	beq.n	10b6e <_strtod_l+0xa16>
   10b6c:	e221      	b.n	10fb2 <_strtod_l+0xe5a>
   10b6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10b70:	2b00      	cmp	r3, #0
   10b72:	d000      	beq.n	10b76 <_strtod_l+0xa1e>
   10b74:	e1ad      	b.n	10ed2 <_strtod_l+0xd7a>
   10b76:	9804      	ldr	r0, [sp, #16]
   10b78:	9905      	ldr	r1, [sp, #20]
   10b7a:	2200      	movs	r2, #0
   10b7c:	2300      	movs	r3, #0
   10b7e:	f7f7 fca7 	bl	84d0 <__aeabi_dcmpeq>
   10b82:	2800      	cmp	r0, #0
   10b84:	d100      	bne.n	10b88 <_strtod_l+0xa30>
   10b86:	e4b2      	b.n	104ee <_strtod_l+0x396>
   10b88:	2322      	movs	r3, #34	; 0x22
   10b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10b8c:	2400      	movs	r4, #0
   10b8e:	6013      	str	r3, [r2, #0]
   10b90:	2500      	movs	r5, #0
   10b92:	f7ff fc1c 	bl	103ce <_strtod_l+0x276>
   10b96:	23d4      	movs	r3, #212	; 0xd4
   10b98:	049b      	lsls	r3, r3, #18
   10b9a:	18cc      	adds	r4, r1, r3
   10b9c:	9405      	str	r4, [sp, #20]
   10b9e:	e5a0      	b.n	106e2 <_strtod_l+0x58a>
   10ba0:	00004e1f 	.word	0x00004e1f
   10ba4:	3fe00000 	.word	0x3fe00000
   10ba8:	fffffbe2 	.word	0xfffffbe2
   10bac:	3ff00000 	.word	0x3ff00000
   10bb0:	00015ac4 	.word	0x00015ac4
   10bb4:	bff00000 	.word	0xbff00000
   10bb8:	7ff00000 	.word	0x7ff00000
   10bbc:	fcb00000 	.word	0xfcb00000
   10bc0:	7c9fffff 	.word	0x7c9fffff
   10bc4:	7fefffff 	.word	0x7fefffff
   10bc8:	94a03595 	.word	0x94a03595
   10bcc:	3fcfffff 	.word	0x3fcfffff
   10bd0:	3fdfffff 	.word	0x3fdfffff
   10bd4:	35afe535 	.word	0x35afe535
   10bd8:	00015910 	.word	0x00015910
   10bdc:	00015af0 	.word	0x00015af0
   10be0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   10be2:	2a00      	cmp	r2, #0
   10be4:	d007      	beq.n	10bf6 <_strtod_l+0xa9e>
   10be6:	2135      	movs	r1, #53	; 0x35
   10be8:	a820      	add	r0, sp, #128	; 0x80
   10bea:	f7ff f82f 	bl	fc4c <__copybits>
   10bee:	991e      	ldr	r1, [sp, #120]	; 0x78
   10bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10bf2:	f7fe fbf5 	bl	f3e0 <_Bfree>
   10bf6:	2c05      	cmp	r4, #5
   10bf8:	d808      	bhi.n	10c0c <_strtod_l+0xab4>
   10bfa:	4bd1      	ldr	r3, [pc, #836]	; (10f40 <_strtod_l+0xde8>)
   10bfc:	00a4      	lsls	r4, r4, #2
   10bfe:	591b      	ldr	r3, [r3, r4]
   10c00:	469f      	mov	pc, r3
   10c02:	4bd0      	ldr	r3, [pc, #832]	; (10f44 <_strtod_l+0xdec>)
   10c04:	9305      	str	r3, [sp, #20]
   10c06:	2301      	movs	r3, #1
   10c08:	425b      	negs	r3, r3
   10c0a:	9304      	str	r3, [sp, #16]
   10c0c:	072b      	lsls	r3, r5, #28
   10c0e:	d400      	bmi.n	10c12 <_strtod_l+0xaba>
   10c10:	e441      	b.n	10496 <_strtod_l+0x33e>
   10c12:	2380      	movs	r3, #128	; 0x80
   10c14:	9a05      	ldr	r2, [sp, #20]
   10c16:	061b      	lsls	r3, r3, #24
   10c18:	431a      	orrs	r2, r3
   10c1a:	9205      	str	r2, [sp, #20]
   10c1c:	e43b      	b.n	10496 <_strtod_l+0x33e>
   10c1e:	4bca      	ldr	r3, [pc, #808]	; (10f48 <_strtod_l+0xdf0>)
   10c20:	9305      	str	r3, [sp, #20]
   10c22:	e7f3      	b.n	10c0c <_strtod_l+0xab4>
   10c24:	9b20      	ldr	r3, [sp, #128]	; 0x80
   10c26:	9304      	str	r3, [sp, #16]
   10c28:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10c2a:	9305      	str	r3, [sp, #20]
   10c2c:	e7ee      	b.n	10c0c <_strtod_l+0xab4>
   10c2e:	49c7      	ldr	r1, [pc, #796]	; (10f4c <_strtod_l+0xdf4>)
   10c30:	9b20      	ldr	r3, [sp, #128]	; 0x80
   10c32:	468c      	mov	ip, r1
   10c34:	9304      	str	r3, [sp, #16]
   10c36:	4ac6      	ldr	r2, [pc, #792]	; (10f50 <_strtod_l+0xdf8>)
   10c38:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10c3a:	401a      	ands	r2, r3
   10c3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10c3e:	4463      	add	r3, ip
   10c40:	051b      	lsls	r3, r3, #20
   10c42:	431a      	orrs	r2, r3
   10c44:	9205      	str	r2, [sp, #20]
   10c46:	e7e1      	b.n	10c0c <_strtod_l+0xab4>
   10c48:	2230      	movs	r2, #48	; 0x30
   10c4a:	1c58      	adds	r0, r3, #1
   10c4c:	2300      	movs	r3, #0
   10c4e:	991d      	ldr	r1, [sp, #116]	; 0x74
   10c50:	4252      	negs	r2, r2
   10c52:	4694      	mov	ip, r2
   10c54:	468a      	mov	sl, r1
   10c56:	4698      	mov	r8, r3
   10c58:	2501      	movs	r5, #1
   10c5a:	4699      	mov	r9, r3
   10c5c:	44a4      	add	ip, r4
   10c5e:	4643      	mov	r3, r8
   10c60:	009c      	lsls	r4, r3, #2
   10c62:	4444      	add	r4, r8
   10c64:	0064      	lsls	r4, r4, #1
   10c66:	4464      	add	r4, ip
   10c68:	46a0      	mov	r8, r4
   10c6a:	2300      	movs	r3, #0
   10c6c:	e746      	b.n	10afc <_strtod_l+0x9a4>
   10c6e:	2325      	movs	r3, #37	; 0x25
   10c70:	9e08      	ldr	r6, [sp, #32]
   10c72:	1b5b      	subs	r3, r3, r5
   10c74:	429e      	cmp	r6, r3
   10c76:	dd01      	ble.n	10c7c <_strtod_l+0xb24>
   10c78:	f7ff fc1e 	bl	104b8 <_strtod_l+0x360>
   10c7c:	230f      	movs	r3, #15
   10c7e:	4cb5      	ldr	r4, [pc, #724]	; (10f54 <_strtod_l+0xdfc>)
   10c80:	1b5d      	subs	r5, r3, r5
   10c82:	00e9      	lsls	r1, r5, #3
   10c84:	1b75      	subs	r5, r6, r5
   10c86:	1861      	adds	r1, r4, r1
   10c88:	00ed      	lsls	r5, r5, #3
   10c8a:	1964      	adds	r4, r4, r5
   10c8c:	9a04      	ldr	r2, [sp, #16]
   10c8e:	9b05      	ldr	r3, [sp, #20]
   10c90:	6808      	ldr	r0, [r1, #0]
   10c92:	6849      	ldr	r1, [r1, #4]
   10c94:	f7f6 fd76 	bl	7784 <__aeabi_dmul>
   10c98:	6822      	ldr	r2, [r4, #0]
   10c9a:	6863      	ldr	r3, [r4, #4]
   10c9c:	f7f6 fd72 	bl	7784 <__aeabi_dmul>
   10ca0:	0004      	movs	r4, r0
   10ca2:	000d      	movs	r5, r1
   10ca4:	f7ff fb93 	bl	103ce <_strtod_l+0x276>
   10ca8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10caa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10cac:	9218      	str	r2, [sp, #96]	; 0x60
   10cae:	9319      	str	r3, [sp, #100]	; 0x64
   10cb0:	e4fe      	b.n	106b0 <_strtod_l+0x558>
   10cb2:	2300      	movs	r3, #0
   10cb4:	9311      	str	r3, [sp, #68]	; 0x44
   10cb6:	4ba8      	ldr	r3, [pc, #672]	; (10f58 <_strtod_l+0xe00>)
   10cb8:	9314      	str	r3, [sp, #80]	; 0x50
   10cba:	e4ed      	b.n	10698 <_strtod_l+0x540>
   10cbc:	2c49      	cmp	r4, #73	; 0x49
   10cbe:	d001      	beq.n	10cc4 <_strtod_l+0xb6c>
   10cc0:	f7ff fa8e 	bl	101e0 <_strtod_l+0x88>
   10cc4:	49a5      	ldr	r1, [pc, #660]	; (10f5c <_strtod_l+0xe04>)
   10cc6:	a81d      	add	r0, sp, #116	; 0x74
   10cc8:	f001 fa98 	bl	121fc <__match>
   10ccc:	2800      	cmp	r0, #0
   10cce:	d101      	bne.n	10cd4 <_strtod_l+0xb7c>
   10cd0:	f7ff fa86 	bl	101e0 <_strtod_l+0x88>
   10cd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10cd6:	49a2      	ldr	r1, [pc, #648]	; (10f60 <_strtod_l+0xe08>)
   10cd8:	3b01      	subs	r3, #1
   10cda:	a81d      	add	r0, sp, #116	; 0x74
   10cdc:	931d      	str	r3, [sp, #116]	; 0x74
   10cde:	f001 fa8d 	bl	121fc <__match>
   10ce2:	2800      	cmp	r0, #0
   10ce4:	d000      	beq.n	10ce8 <_strtod_l+0xb90>
   10ce6:	e667      	b.n	109b8 <_strtod_l+0x860>
   10ce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10cea:	3301      	adds	r3, #1
   10cec:	931d      	str	r3, [sp, #116]	; 0x74
   10cee:	e663      	b.n	109b8 <_strtod_l+0x860>
   10cf0:	9b05      	ldr	r3, [sp, #20]
   10cf2:	9310      	str	r3, [sp, #64]	; 0x40
   10cf4:	2b00      	cmp	r3, #0
   10cf6:	d000      	beq.n	10cfa <_strtod_l+0xba2>
   10cf8:	e623      	b.n	10942 <_strtod_l+0x7ea>
   10cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10cfc:	46da      	mov	sl, fp
   10cfe:	469b      	mov	fp, r3
   10d00:	2322      	movs	r3, #34	; 0x22
   10d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10d04:	981e      	ldr	r0, [sp, #120]	; 0x78
   10d06:	6013      	str	r3, [r2, #0]
   10d08:	2400      	movs	r4, #0
   10d0a:	2500      	movs	r5, #0
   10d0c:	e696      	b.n	10a3c <_strtod_l+0x8e4>
   10d0e:	9a08      	ldr	r2, [sp, #32]
   10d10:	0013      	movs	r3, r2
   10d12:	3316      	adds	r3, #22
   10d14:	da01      	bge.n	10d1a <_strtod_l+0xbc2>
   10d16:	f7ff fbcf 	bl	104b8 <_strtod_l+0x360>
   10d1a:	00d0      	lsls	r0, r2, #3
   10d1c:	4a8d      	ldr	r2, [pc, #564]	; (10f54 <_strtod_l+0xdfc>)
   10d1e:	1a12      	subs	r2, r2, r0
   10d20:	6853      	ldr	r3, [r2, #4]
   10d22:	6812      	ldr	r2, [r2, #0]
   10d24:	9804      	ldr	r0, [sp, #16]
   10d26:	9905      	ldr	r1, [sp, #20]
   10d28:	f7f6 f9f8 	bl	711c <__aeabi_ddiv>
   10d2c:	0004      	movs	r4, r0
   10d2e:	000d      	movs	r5, r1
   10d30:	f7ff fb4d 	bl	103ce <_strtod_l+0x276>
   10d34:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10d36:	46da      	mov	sl, fp
   10d38:	469b      	mov	fp, r3
   10d3a:	e676      	b.n	10a2a <_strtod_l+0x8d2>
   10d3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10d3e:	46da      	mov	sl, fp
   10d40:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10d42:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10d44:	469b      	mov	fp, r3
   10d46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10d48:	2b00      	cmp	r3, #0
   10d4a:	d100      	bne.n	10d4e <_strtod_l+0xbf6>
   10d4c:	e08d      	b.n	10e6a <_strtod_l+0xd12>
   10d4e:	9804      	ldr	r0, [sp, #16]
   10d50:	9905      	ldr	r1, [sp, #20]
   10d52:	030b      	lsls	r3, r1, #12
   10d54:	000a      	movs	r2, r1
   10d56:	4983      	ldr	r1, [pc, #524]	; (10f64 <_strtod_l+0xe0c>)
   10d58:	0b1b      	lsrs	r3, r3, #12
   10d5a:	428b      	cmp	r3, r1
   10d5c:	d100      	bne.n	10d60 <_strtod_l+0xc08>
   10d5e:	e0cc      	b.n	10efa <_strtod_l+0xda2>
   10d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10d62:	2b00      	cmp	r3, #0
   10d64:	d100      	bne.n	10d68 <_strtod_l+0xc10>
   10d66:	e07b      	b.n	10e60 <_strtod_l+0xd08>
   10d68:	9a05      	ldr	r2, [sp, #20]
   10d6a:	4213      	tst	r3, r2
   10d6c:	d010      	beq.n	10d90 <_strtod_l+0xc38>
   10d6e:	9804      	ldr	r0, [sp, #16]
   10d70:	9905      	ldr	r1, [sp, #20]
   10d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10d74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10d76:	2b00      	cmp	r3, #0
   10d78:	d100      	bne.n	10d7c <_strtod_l+0xc24>
   10d7a:	e083      	b.n	10e84 <_strtod_l+0xd2c>
   10d7c:	f7ff f9d4 	bl	10128 <sulp>
   10d80:	0002      	movs	r2, r0
   10d82:	000b      	movs	r3, r1
   10d84:	0020      	movs	r0, r4
   10d86:	0029      	movs	r1, r5
   10d88:	f7f5 feb8 	bl	6afc <__aeabi_dadd>
   10d8c:	0004      	movs	r4, r0
   10d8e:	000d      	movs	r5, r1
   10d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10d92:	2b00      	cmp	r3, #0
   10d94:	d017      	beq.n	10dc6 <_strtod_l+0xc6e>
   10d96:	4b74      	ldr	r3, [pc, #464]	; (10f68 <_strtod_l+0xe10>)
   10d98:	0020      	movs	r0, r4
   10d9a:	9317      	str	r3, [sp, #92]	; 0x5c
   10d9c:	2300      	movs	r3, #0
   10d9e:	9316      	str	r3, [sp, #88]	; 0x58
   10da0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   10da2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10da4:	0029      	movs	r1, r5
   10da6:	f7f6 fced 	bl	7784 <__aeabi_dmul>
   10daa:	0002      	movs	r2, r0
   10dac:	000b      	movs	r3, r1
   10dae:	0004      	movs	r4, r0
   10db0:	000d      	movs	r5, r1
   10db2:	9204      	str	r2, [sp, #16]
   10db4:	9305      	str	r3, [sp, #20]
   10db6:	2900      	cmp	r1, #0
   10db8:	d105      	bne.n	10dc6 <_strtod_l+0xc6e>
   10dba:	9b04      	ldr	r3, [sp, #16]
   10dbc:	2b00      	cmp	r3, #0
   10dbe:	d102      	bne.n	10dc6 <_strtod_l+0xc6e>
   10dc0:	2322      	movs	r3, #34	; 0x22
   10dc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10dc4:	6013      	str	r3, [r2, #0]
   10dc6:	981e      	ldr	r0, [sp, #120]	; 0x78
   10dc8:	e638      	b.n	10a3c <_strtod_l+0x8e4>
   10dca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10dcc:	46da      	mov	sl, fp
   10dce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10dd0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   10dd2:	469b      	mov	fp, r3
   10dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10dd6:	2b00      	cmp	r3, #0
   10dd8:	d1da      	bne.n	10d90 <_strtod_l+0xc38>
   10dda:	9904      	ldr	r1, [sp, #16]
   10ddc:	9a05      	ldr	r2, [sp, #20]
   10dde:	2900      	cmp	r1, #0
   10de0:	d1d6      	bne.n	10d90 <_strtod_l+0xc38>
   10de2:	0313      	lsls	r3, r2, #12
   10de4:	d1d4      	bne.n	10d90 <_strtod_l+0xc38>
   10de6:	4b58      	ldr	r3, [pc, #352]	; (10f48 <_strtod_l+0xdf0>)
   10de8:	4013      	ands	r3, r2
   10dea:	22d6      	movs	r2, #214	; 0xd6
   10dec:	04d2      	lsls	r2, r2, #19
   10dee:	4293      	cmp	r3, r2
   10df0:	d9ce      	bls.n	10d90 <_strtod_l+0xc38>
   10df2:	464b      	mov	r3, r9
   10df4:	695b      	ldr	r3, [r3, #20]
   10df6:	2b00      	cmp	r3, #0
   10df8:	d103      	bne.n	10e02 <_strtod_l+0xcaa>
   10dfa:	464b      	mov	r3, r9
   10dfc:	691b      	ldr	r3, [r3, #16]
   10dfe:	2b01      	cmp	r3, #1
   10e00:	ddc6      	ble.n	10d90 <_strtod_l+0xc38>
   10e02:	4649      	mov	r1, r9
   10e04:	2201      	movs	r2, #1
   10e06:	9809      	ldr	r0, [sp, #36]	; 0x24
   10e08:	f7fe fce0 	bl	f7cc <__lshift>
   10e0c:	4641      	mov	r1, r8
   10e0e:	4681      	mov	r9, r0
   10e10:	f7fe fd3c 	bl	f88c <__mcmp>
   10e14:	2800      	cmp	r0, #0
   10e16:	ddbb      	ble.n	10d90 <_strtod_l+0xc38>
   10e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e1a:	2b00      	cmp	r3, #0
   10e1c:	d100      	bne.n	10e20 <_strtod_l+0xcc8>
   10e1e:	e0b2      	b.n	10f86 <_strtod_l+0xe2e>
   10e20:	9a05      	ldr	r2, [sp, #20]
   10e22:	4b49      	ldr	r3, [pc, #292]	; (10f48 <_strtod_l+0xdf0>)
   10e24:	4013      	ands	r3, r2
   10e26:	22d6      	movs	r2, #214	; 0xd6
   10e28:	04d2      	lsls	r2, r2, #19
   10e2a:	4293      	cmp	r3, r2
   10e2c:	dd00      	ble.n	10e30 <_strtod_l+0xcd8>
   10e2e:	e0aa      	b.n	10f86 <_strtod_l+0xe2e>
   10e30:	22dc      	movs	r2, #220	; 0xdc
   10e32:	0492      	lsls	r2, r2, #18
   10e34:	4293      	cmp	r3, r2
   10e36:	dcae      	bgt.n	10d96 <_strtod_l+0xc3e>
   10e38:	e762      	b.n	10d00 <_strtod_l+0xba8>
   10e3a:	22d4      	movs	r2, #212	; 0xd4
   10e3c:	0492      	lsls	r2, r2, #18
   10e3e:	0023      	movs	r3, r4
   10e40:	4694      	mov	ip, r2
   10e42:	4463      	add	r3, ip
   10e44:	9305      	str	r3, [sp, #20]
   10e46:	2300      	movs	r3, #0
   10e48:	930c      	str	r3, [sp, #48]	; 0x30
   10e4a:	f7ff fb50 	bl	104ee <_strtod_l+0x396>
   10e4e:	2300      	movs	r3, #0
   10e50:	4c46      	ldr	r4, [pc, #280]	; (10f6c <_strtod_l+0xe14>)
   10e52:	931a      	str	r3, [sp, #104]	; 0x68
   10e54:	941b      	str	r4, [sp, #108]	; 0x6c
   10e56:	2300      	movs	r3, #0
   10e58:	9311      	str	r3, [sp, #68]	; 0x44
   10e5a:	4b45      	ldr	r3, [pc, #276]	; (10f70 <_strtod_l+0xe18>)
   10e5c:	9314      	str	r3, [sp, #80]	; 0x50
   10e5e:	e545      	b.n	108ec <_strtod_l+0x794>
   10e60:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10e62:	9a04      	ldr	r2, [sp, #16]
   10e64:	4213      	tst	r3, r2
   10e66:	d093      	beq.n	10d90 <_strtod_l+0xc38>
   10e68:	e781      	b.n	10d6e <_strtod_l+0xc16>
   10e6a:	9904      	ldr	r1, [sp, #16]
   10e6c:	9a05      	ldr	r2, [sp, #20]
   10e6e:	0313      	lsls	r3, r2, #12
   10e70:	d000      	beq.n	10e74 <_strtod_l+0xd1c>
   10e72:	e775      	b.n	10d60 <_strtod_l+0xc08>
   10e74:	2900      	cmp	r1, #0
   10e76:	d000      	beq.n	10e7a <_strtod_l+0xd22>
   10e78:	e772      	b.n	10d60 <_strtod_l+0xc08>
   10e7a:	e7cd      	b.n	10e18 <_strtod_l+0xcc0>
   10e7c:	4b3d      	ldr	r3, [pc, #244]	; (10f74 <_strtod_l+0xe1c>)
   10e7e:	2700      	movs	r7, #0
   10e80:	930c      	str	r3, [sp, #48]	; 0x30
   10e82:	e4b3      	b.n	107ec <_strtod_l+0x694>
   10e84:	f7ff f950 	bl	10128 <sulp>
   10e88:	0002      	movs	r2, r0
   10e8a:	000b      	movs	r3, r1
   10e8c:	0020      	movs	r0, r4
   10e8e:	0029      	movs	r1, r5
   10e90:	f7f6 fef8 	bl	7c84 <__aeabi_dsub>
   10e94:	2200      	movs	r2, #0
   10e96:	2300      	movs	r3, #0
   10e98:	0004      	movs	r4, r0
   10e9a:	000d      	movs	r5, r1
   10e9c:	f7f7 fb18 	bl	84d0 <__aeabi_dcmpeq>
   10ea0:	2800      	cmp	r0, #0
   10ea2:	d000      	beq.n	10ea6 <_strtod_l+0xd4e>
   10ea4:	e72c      	b.n	10d00 <_strtod_l+0xba8>
   10ea6:	e773      	b.n	10d90 <_strtod_l+0xc38>
   10ea8:	aa20      	add	r2, sp, #128	; 0x80
   10eaa:	4933      	ldr	r1, [pc, #204]	; (10f78 <_strtod_l+0xe20>)
   10eac:	a81d      	add	r0, sp, #116	; 0x74
   10eae:	f001 f9bb 	bl	12228 <__hexnan>
   10eb2:	2805      	cmp	r0, #5
   10eb4:	d001      	beq.n	10eba <_strtod_l+0xd62>
   10eb6:	f7ff faea 	bl	1048e <_strtod_l+0x336>
   10eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
   10ebc:	4a22      	ldr	r2, [pc, #136]	; (10f48 <_strtod_l+0xdf0>)
   10ebe:	431a      	orrs	r2, r3
   10ec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   10ec2:	9205      	str	r2, [sp, #20]
   10ec4:	9304      	str	r3, [sp, #16]
   10ec6:	f7ff fae6 	bl	10496 <_strtod_l+0x33e>
   10eca:	2c00      	cmp	r4, #0
   10ecc:	dd00      	ble.n	10ed0 <_strtod_l+0xd78>
   10ece:	e63b      	b.n	10b48 <_strtod_l+0x9f0>
   10ed0:	e651      	b.n	10b76 <_strtod_l+0xa1e>
   10ed2:	9b04      	ldr	r3, [sp, #16]
   10ed4:	9c05      	ldr	r4, [sp, #20]
   10ed6:	236b      	movs	r3, #107	; 0x6b
   10ed8:	0061      	lsls	r1, r4, #1
   10eda:	0d49      	lsrs	r1, r1, #21
   10edc:	0022      	movs	r2, r4
   10ede:	1a5b      	subs	r3, r3, r1
   10ee0:	2b00      	cmp	r3, #0
   10ee2:	dc00      	bgt.n	10ee6 <_strtod_l+0xd8e>
   10ee4:	e647      	b.n	10b76 <_strtod_l+0xa1e>
   10ee6:	2b1f      	cmp	r3, #31
   10ee8:	dd5c      	ble.n	10fa4 <_strtod_l+0xe4c>
   10eea:	2100      	movs	r1, #0
   10eec:	9104      	str	r1, [sp, #16]
   10eee:	2b34      	cmp	r3, #52	; 0x34
   10ef0:	dd62      	ble.n	10fb8 <_strtod_l+0xe60>
   10ef2:	23dc      	movs	r3, #220	; 0xdc
   10ef4:	049b      	lsls	r3, r3, #18
   10ef6:	9305      	str	r3, [sp, #20]
   10ef8:	e63d      	b.n	10b76 <_strtod_l+0xa1e>
   10efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10efc:	9904      	ldr	r1, [sp, #16]
   10efe:	2b00      	cmp	r3, #0
   10f00:	d03e      	beq.n	10f80 <_strtod_l+0xe28>
   10f02:	20d4      	movs	r0, #212	; 0xd4
   10f04:	4b10      	ldr	r3, [pc, #64]	; (10f48 <_strtod_l+0xdf0>)
   10f06:	04c0      	lsls	r0, r0, #19
   10f08:	4013      	ands	r3, r2
   10f0a:	4283      	cmp	r3, r0
   10f0c:	d838      	bhi.n	10f80 <_strtod_l+0xe28>
   10f0e:	206b      	movs	r0, #107	; 0x6b
   10f10:	0d1b      	lsrs	r3, r3, #20
   10f12:	1ac0      	subs	r0, r0, r3
   10f14:	2301      	movs	r3, #1
   10f16:	425b      	negs	r3, r3
   10f18:	4083      	lsls	r3, r0
   10f1a:	428b      	cmp	r3, r1
   10f1c:	d000      	beq.n	10f20 <_strtod_l+0xdc8>
   10f1e:	e71f      	b.n	10d60 <_strtod_l+0xc08>
   10f20:	4916      	ldr	r1, [pc, #88]	; (10f7c <_strtod_l+0xe24>)
   10f22:	428a      	cmp	r2, r1
   10f24:	d05a      	beq.n	10fdc <_strtod_l+0xe84>
   10f26:	2180      	movs	r1, #128	; 0x80
   10f28:	4b07      	ldr	r3, [pc, #28]	; (10f48 <_strtod_l+0xdf0>)
   10f2a:	0349      	lsls	r1, r1, #13
   10f2c:	401a      	ands	r2, r3
   10f2e:	0013      	movs	r3, r2
   10f30:	468c      	mov	ip, r1
   10f32:	4463      	add	r3, ip
   10f34:	9305      	str	r3, [sp, #20]
   10f36:	2300      	movs	r3, #0
   10f38:	9304      	str	r3, [sp, #16]
   10f3a:	9c04      	ldr	r4, [sp, #16]
   10f3c:	9d05      	ldr	r5, [sp, #20]
   10f3e:	e727      	b.n	10d90 <_strtod_l+0xc38>
   10f40:	00015a9c 	.word	0x00015a9c
   10f44:	7fffffff 	.word	0x7fffffff
   10f48:	7ff00000 	.word	0x7ff00000
   10f4c:	00000433 	.word	0x00000433
   10f50:	ffefffff 	.word	0xffefffff
   10f54:	00015910 	.word	0x00015910
   10f58:	3ff00000 	.word	0x3ff00000
   10f5c:	00015ab4 	.word	0x00015ab4
   10f60:	00015ab8 	.word	0x00015ab8
   10f64:	000fffff 	.word	0x000fffff
   10f68:	39500000 	.word	0x39500000
   10f6c:	bfe00000 	.word	0xbfe00000
   10f70:	3fe00000 	.word	0x3fe00000
   10f74:	000158e8 	.word	0x000158e8
   10f78:	00015ad8 	.word	0x00015ad8
   10f7c:	7fefffff 	.word	0x7fefffff
   10f80:	2301      	movs	r3, #1
   10f82:	425b      	negs	r3, r3
   10f84:	e7c9      	b.n	10f1a <_strtod_l+0xdc2>
   10f86:	9a05      	ldr	r2, [sp, #20]
   10f88:	4b16      	ldr	r3, [pc, #88]	; (10fe4 <_strtod_l+0xe8c>)
   10f8a:	4013      	ands	r3, r2
   10f8c:	4a16      	ldr	r2, [pc, #88]	; (10fe8 <_strtod_l+0xe90>)
   10f8e:	4694      	mov	ip, r2
   10f90:	4a16      	ldr	r2, [pc, #88]	; (10fec <_strtod_l+0xe94>)
   10f92:	4463      	add	r3, ip
   10f94:	431a      	orrs	r2, r3
   10f96:	2301      	movs	r3, #1
   10f98:	425b      	negs	r3, r3
   10f9a:	9205      	str	r2, [sp, #20]
   10f9c:	9304      	str	r3, [sp, #16]
   10f9e:	9c04      	ldr	r4, [sp, #16]
   10fa0:	9d05      	ldr	r5, [sp, #20]
   10fa2:	e6f5      	b.n	10d90 <_strtod_l+0xc38>
   10fa4:	2201      	movs	r2, #1
   10fa6:	4252      	negs	r2, r2
   10fa8:	409a      	lsls	r2, r3
   10faa:	9b04      	ldr	r3, [sp, #16]
   10fac:	4013      	ands	r3, r2
   10fae:	9304      	str	r3, [sp, #16]
   10fb0:	e5e1      	b.n	10b76 <_strtod_l+0xa1e>
   10fb2:	9004      	str	r0, [sp, #16]
   10fb4:	9105      	str	r1, [sp, #20]
   10fb6:	e5da      	b.n	10b6e <_strtod_l+0xa16>
   10fb8:	2101      	movs	r1, #1
   10fba:	3b20      	subs	r3, #32
   10fbc:	4249      	negs	r1, r1
   10fbe:	4099      	lsls	r1, r3
   10fc0:	400a      	ands	r2, r1
   10fc2:	9205      	str	r2, [sp, #20]
   10fc4:	e5d7      	b.n	10b76 <_strtod_l+0xa1e>
   10fc6:	002f      	movs	r7, r5
   10fc8:	991d      	ldr	r1, [sp, #116]	; 0x74
   10fca:	3501      	adds	r5, #1
   10fcc:	e58a      	b.n	10ae4 <_strtod_l+0x98c>
   10fce:	991d      	ldr	r1, [sp, #116]	; 0x74
   10fd0:	0023      	movs	r3, r4
   10fd2:	e593      	b.n	10afc <_strtod_l+0x9a4>
   10fd4:	9004      	str	r0, [sp, #16]
   10fd6:	9105      	str	r1, [sp, #20]
   10fd8:	f7ff fc08 	bl	107ec <_strtod_l+0x694>
   10fdc:	3301      	adds	r3, #1
   10fde:	d1a2      	bne.n	10f26 <_strtod_l+0xdce>
   10fe0:	e522      	b.n	10a28 <_strtod_l+0x8d0>
   10fe2:	46c0      	nop			; (mov r8, r8)
   10fe4:	7ff00000 	.word	0x7ff00000
   10fe8:	fff00000 	.word	0xfff00000
   10fec:	000fffff 	.word	0x000fffff

00010ff0 <_strtod_r>:
   10ff0:	4b05      	ldr	r3, [pc, #20]	; (11008 <_strtod_r+0x18>)
   10ff2:	b510      	push	{r4, lr}
   10ff4:	681b      	ldr	r3, [r3, #0]
   10ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   10ff8:	2b00      	cmp	r3, #0
   10ffa:	d002      	beq.n	11002 <_strtod_r+0x12>
   10ffc:	f7ff f8ac 	bl	10158 <_strtod_l>
   11000:	bd10      	pop	{r4, pc}
   11002:	4b02      	ldr	r3, [pc, #8]	; (1100c <_strtod_r+0x1c>)
   11004:	e7fa      	b.n	10ffc <_strtod_r+0xc>
   11006:	46c0      	nop			; (mov r8, r8)
   11008:	20000080 	.word	0x20000080
   1100c:	200004b4 	.word	0x200004b4

00011010 <_strtoll_l.isra.0>:
   11010:	b5f0      	push	{r4, r5, r6, r7, lr}
   11012:	46de      	mov	lr, fp
   11014:	4657      	mov	r7, sl
   11016:	464e      	mov	r6, r9
   11018:	4645      	mov	r5, r8
   1101a:	b5e0      	push	{r5, r6, r7, lr}
   1101c:	001f      	movs	r7, r3
   1101e:	2308      	movs	r3, #8
   11020:	b089      	sub	sp, #36	; 0x24
   11022:	9007      	str	r0, [sp, #28]
   11024:	9106      	str	r1, [sp, #24]
   11026:	4693      	mov	fp, r2
   11028:	000e      	movs	r6, r1
   1102a:	4698      	mov	r8, r3
   1102c:	e000      	b.n	11030 <_strtoll_l.isra.0+0x20>
   1102e:	002e      	movs	r6, r5
   11030:	9812      	ldr	r0, [sp, #72]	; 0x48
   11032:	7834      	ldrb	r4, [r6, #0]
   11034:	f7fd fd5a 	bl	eaec <__locale_ctype_ptr_l>
   11038:	4642      	mov	r2, r8
   1103a:	1900      	adds	r0, r0, r4
   1103c:	7843      	ldrb	r3, [r0, #1]
   1103e:	1c75      	adds	r5, r6, #1
   11040:	421a      	tst	r2, r3
   11042:	d1f4      	bne.n	1102e <_strtoll_l.isra.0+0x1e>
   11044:	2c2d      	cmp	r4, #45	; 0x2d
   11046:	d100      	bne.n	1104a <_strtoll_l.isra.0+0x3a>
   11048:	e087      	b.n	1115a <_strtoll_l.isra.0+0x14a>
   1104a:	2300      	movs	r3, #0
   1104c:	9303      	str	r3, [sp, #12]
   1104e:	2c2b      	cmp	r4, #43	; 0x2b
   11050:	d100      	bne.n	11054 <_strtoll_l.isra.0+0x44>
   11052:	e094      	b.n	1117e <_strtoll_l.isra.0+0x16e>
   11054:	2f00      	cmp	r7, #0
   11056:	d00e      	beq.n	11076 <_strtoll_l.isra.0+0x66>
   11058:	2f10      	cmp	r7, #16
   1105a:	d100      	bne.n	1105e <_strtoll_l.isra.0+0x4e>
   1105c:	e092      	b.n	11184 <_strtoll_l.isra.0+0x174>
   1105e:	17fb      	asrs	r3, r7, #31
   11060:	4699      	mov	r9, r3
   11062:	9b03      	ldr	r3, [sp, #12]
   11064:	46ba      	mov	sl, r7
   11066:	2b00      	cmp	r3, #0
   11068:	d110      	bne.n	1108c <_strtoll_l.isra.0+0x7c>
   1106a:	2301      	movs	r3, #1
   1106c:	425b      	negs	r3, r3
   1106e:	9304      	str	r3, [sp, #16]
   11070:	4b55      	ldr	r3, [pc, #340]	; (111c8 <_strtoll_l.isra.0+0x1b8>)
   11072:	9305      	str	r3, [sp, #20]
   11074:	e00f      	b.n	11096 <_strtoll_l.isra.0+0x86>
   11076:	2c30      	cmp	r4, #48	; 0x30
   11078:	d100      	bne.n	1107c <_strtoll_l.isra.0+0x6c>
   1107a:	e092      	b.n	111a2 <_strtoll_l.isra.0+0x192>
   1107c:	230a      	movs	r3, #10
   1107e:	469a      	mov	sl, r3
   11080:	2300      	movs	r3, #0
   11082:	270a      	movs	r7, #10
   11084:	4699      	mov	r9, r3
   11086:	9b03      	ldr	r3, [sp, #12]
   11088:	2b00      	cmp	r3, #0
   1108a:	d0ee      	beq.n	1106a <_strtoll_l.isra.0+0x5a>
   1108c:	2300      	movs	r3, #0
   1108e:	9304      	str	r3, [sp, #16]
   11090:	2380      	movs	r3, #128	; 0x80
   11092:	061b      	lsls	r3, r3, #24
   11094:	9305      	str	r3, [sp, #20]
   11096:	9904      	ldr	r1, [sp, #16]
   11098:	9e05      	ldr	r6, [sp, #20]
   1109a:	4688      	mov	r8, r1
   1109c:	0008      	movs	r0, r1
   1109e:	4652      	mov	r2, sl
   110a0:	0031      	movs	r1, r6
   110a2:	464b      	mov	r3, r9
   110a4:	f7f5 fad8 	bl	6658 <__aeabi_uldivmod>
   110a8:	4640      	mov	r0, r8
   110aa:	9202      	str	r2, [sp, #8]
   110ac:	0031      	movs	r1, r6
   110ae:	4652      	mov	r2, sl
   110b0:	464b      	mov	r3, r9
   110b2:	f7f5 fad1 	bl	6658 <__aeabi_uldivmod>
   110b6:	2200      	movs	r2, #0
   110b8:	4680      	mov	r8, r0
   110ba:	000e      	movs	r6, r1
   110bc:	2000      	movs	r0, #0
   110be:	2100      	movs	r1, #0
   110c0:	e019      	b.n	110f6 <_strtoll_l.isra.0+0xe6>
   110c2:	001c      	movs	r4, r3
   110c4:	42a7      	cmp	r7, r4
   110c6:	dd21      	ble.n	1110c <_strtoll_l.isra.0+0xfc>
   110c8:	1c53      	adds	r3, r2, #1
   110ca:	d012      	beq.n	110f2 <_strtoll_l.isra.0+0xe2>
   110cc:	42b1      	cmp	r1, r6
   110ce:	d83b      	bhi.n	11148 <_strtoll_l.isra.0+0x138>
   110d0:	d101      	bne.n	110d6 <_strtoll_l.isra.0+0xc6>
   110d2:	4540      	cmp	r0, r8
   110d4:	d838      	bhi.n	11148 <_strtoll_l.isra.0+0x138>
   110d6:	4580      	cmp	r8, r0
   110d8:	d031      	beq.n	1113e <_strtoll_l.isra.0+0x12e>
   110da:	4652      	mov	r2, sl
   110dc:	464b      	mov	r3, r9
   110de:	f7f5 fadb 	bl	6698 <__aeabi_lmul>
   110e2:	17e3      	asrs	r3, r4, #31
   110e4:	9400      	str	r4, [sp, #0]
   110e6:	9301      	str	r3, [sp, #4]
   110e8:	9b00      	ldr	r3, [sp, #0]
   110ea:	9c01      	ldr	r4, [sp, #4]
   110ec:	2201      	movs	r2, #1
   110ee:	18c0      	adds	r0, r0, r3
   110f0:	4161      	adcs	r1, r4
   110f2:	782c      	ldrb	r4, [r5, #0]
   110f4:	3501      	adds	r5, #1
   110f6:	0023      	movs	r3, r4
   110f8:	3b30      	subs	r3, #48	; 0x30
   110fa:	2b09      	cmp	r3, #9
   110fc:	d9e1      	bls.n	110c2 <_strtoll_l.isra.0+0xb2>
   110fe:	0023      	movs	r3, r4
   11100:	3b41      	subs	r3, #65	; 0x41
   11102:	2b19      	cmp	r3, #25
   11104:	d823      	bhi.n	1114e <_strtoll_l.isra.0+0x13e>
   11106:	3c37      	subs	r4, #55	; 0x37
   11108:	42a7      	cmp	r7, r4
   1110a:	dcdd      	bgt.n	110c8 <_strtoll_l.isra.0+0xb8>
   1110c:	1c53      	adds	r3, r2, #1
   1110e:	d029      	beq.n	11164 <_strtoll_l.isra.0+0x154>
   11110:	9b03      	ldr	r3, [sp, #12]
   11112:	2b00      	cmp	r3, #0
   11114:	d004      	beq.n	11120 <_strtoll_l.isra.0+0x110>
   11116:	0003      	movs	r3, r0
   11118:	000c      	movs	r4, r1
   1111a:	2100      	movs	r1, #0
   1111c:	4258      	negs	r0, r3
   1111e:	41a1      	sbcs	r1, r4
   11120:	465b      	mov	r3, fp
   11122:	2b00      	cmp	r3, #0
   11124:	d004      	beq.n	11130 <_strtoll_l.isra.0+0x120>
   11126:	9b06      	ldr	r3, [sp, #24]
   11128:	2a00      	cmp	r2, #0
   1112a:	d125      	bne.n	11178 <_strtoll_l.isra.0+0x168>
   1112c:	465a      	mov	r2, fp
   1112e:	6013      	str	r3, [r2, #0]
   11130:	b009      	add	sp, #36	; 0x24
   11132:	bc3c      	pop	{r2, r3, r4, r5}
   11134:	4690      	mov	r8, r2
   11136:	4699      	mov	r9, r3
   11138:	46a2      	mov	sl, r4
   1113a:	46ab      	mov	fp, r5
   1113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1113e:	428e      	cmp	r6, r1
   11140:	d1cb      	bne.n	110da <_strtoll_l.isra.0+0xca>
   11142:	9b02      	ldr	r3, [sp, #8]
   11144:	42a3      	cmp	r3, r4
   11146:	dac8      	bge.n	110da <_strtoll_l.isra.0+0xca>
   11148:	2201      	movs	r2, #1
   1114a:	4252      	negs	r2, r2
   1114c:	e7d1      	b.n	110f2 <_strtoll_l.isra.0+0xe2>
   1114e:	0023      	movs	r3, r4
   11150:	3b61      	subs	r3, #97	; 0x61
   11152:	2b19      	cmp	r3, #25
   11154:	d8da      	bhi.n	1110c <_strtoll_l.isra.0+0xfc>
   11156:	3c57      	subs	r4, #87	; 0x57
   11158:	e7b4      	b.n	110c4 <_strtoll_l.isra.0+0xb4>
   1115a:	2301      	movs	r3, #1
   1115c:	782c      	ldrb	r4, [r5, #0]
   1115e:	9303      	str	r3, [sp, #12]
   11160:	1cb5      	adds	r5, r6, #2
   11162:	e777      	b.n	11054 <_strtoll_l.isra.0+0x44>
   11164:	2322      	movs	r3, #34	; 0x22
   11166:	9a07      	ldr	r2, [sp, #28]
   11168:	6013      	str	r3, [r2, #0]
   1116a:	465b      	mov	r3, fp
   1116c:	2b00      	cmp	r3, #0
   1116e:	d028      	beq.n	111c2 <_strtoll_l.isra.0+0x1b2>
   11170:	1e6b      	subs	r3, r5, #1
   11172:	9804      	ldr	r0, [sp, #16]
   11174:	9905      	ldr	r1, [sp, #20]
   11176:	e7d9      	b.n	1112c <_strtoll_l.isra.0+0x11c>
   11178:	9004      	str	r0, [sp, #16]
   1117a:	9105      	str	r1, [sp, #20]
   1117c:	e7f8      	b.n	11170 <_strtoll_l.isra.0+0x160>
   1117e:	782c      	ldrb	r4, [r5, #0]
   11180:	1cb5      	adds	r5, r6, #2
   11182:	e767      	b.n	11054 <_strtoll_l.isra.0+0x44>
   11184:	2c30      	cmp	r4, #48	; 0x30
   11186:	d117      	bne.n	111b8 <_strtoll_l.isra.0+0x1a8>
   11188:	2220      	movs	r2, #32
   1118a:	782b      	ldrb	r3, [r5, #0]
   1118c:	4393      	bics	r3, r2
   1118e:	2b58      	cmp	r3, #88	; 0x58
   11190:	d112      	bne.n	111b8 <_strtoll_l.isra.0+0x1a8>
   11192:	2310      	movs	r3, #16
   11194:	469a      	mov	sl, r3
   11196:	2300      	movs	r3, #0
   11198:	786c      	ldrb	r4, [r5, #1]
   1119a:	4699      	mov	r9, r3
   1119c:	3502      	adds	r5, #2
   1119e:	2710      	movs	r7, #16
   111a0:	e771      	b.n	11086 <_strtoll_l.isra.0+0x76>
   111a2:	2220      	movs	r2, #32
   111a4:	782b      	ldrb	r3, [r5, #0]
   111a6:	4393      	bics	r3, r2
   111a8:	2b58      	cmp	r3, #88	; 0x58
   111aa:	d0f2      	beq.n	11192 <_strtoll_l.isra.0+0x182>
   111ac:	2308      	movs	r3, #8
   111ae:	469a      	mov	sl, r3
   111b0:	2300      	movs	r3, #0
   111b2:	2708      	movs	r7, #8
   111b4:	4699      	mov	r9, r3
   111b6:	e766      	b.n	11086 <_strtoll_l.isra.0+0x76>
   111b8:	2310      	movs	r3, #16
   111ba:	469a      	mov	sl, r3
   111bc:	2300      	movs	r3, #0
   111be:	4699      	mov	r9, r3
   111c0:	e761      	b.n	11086 <_strtoll_l.isra.0+0x76>
   111c2:	9804      	ldr	r0, [sp, #16]
   111c4:	9905      	ldr	r1, [sp, #20]
   111c6:	e7b3      	b.n	11130 <_strtoll_l.isra.0+0x120>
   111c8:	7fffffff 	.word	0x7fffffff

000111cc <_strtoll_r>:
   111cc:	b510      	push	{r4, lr}
   111ce:	4c06      	ldr	r4, [pc, #24]	; (111e8 <_strtoll_r+0x1c>)
   111d0:	b082      	sub	sp, #8
   111d2:	6824      	ldr	r4, [r4, #0]
   111d4:	6b64      	ldr	r4, [r4, #52]	; 0x34
   111d6:	2c00      	cmp	r4, #0
   111d8:	d004      	beq.n	111e4 <_strtoll_r+0x18>
   111da:	9400      	str	r4, [sp, #0]
   111dc:	f7ff ff18 	bl	11010 <_strtoll_l.isra.0>
   111e0:	b002      	add	sp, #8
   111e2:	bd10      	pop	{r4, pc}
   111e4:	4c01      	ldr	r4, [pc, #4]	; (111ec <_strtoll_r+0x20>)
   111e6:	e7f8      	b.n	111da <_strtoll_r+0xe>
   111e8:	20000080 	.word	0x20000080
   111ec:	200004b4 	.word	0x200004b4

000111f0 <_strtoul_l.isra.0>:
   111f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   111f2:	4657      	mov	r7, sl
   111f4:	464e      	mov	r6, r9
   111f6:	46de      	mov	lr, fp
   111f8:	4645      	mov	r5, r8
   111fa:	b5e0      	push	{r5, r6, r7, lr}
   111fc:	001e      	movs	r6, r3
   111fe:	2308      	movs	r3, #8
   11200:	b083      	sub	sp, #12
   11202:	4683      	mov	fp, r0
   11204:	4689      	mov	r9, r1
   11206:	4692      	mov	sl, r2
   11208:	000f      	movs	r7, r1
   1120a:	4698      	mov	r8, r3
   1120c:	e000      	b.n	11210 <_strtoul_l.isra.0+0x20>
   1120e:	002f      	movs	r7, r5
   11210:	980c      	ldr	r0, [sp, #48]	; 0x30
   11212:	783c      	ldrb	r4, [r7, #0]
   11214:	f7fd fc6a 	bl	eaec <__locale_ctype_ptr_l>
   11218:	4642      	mov	r2, r8
   1121a:	1900      	adds	r0, r0, r4
   1121c:	7843      	ldrb	r3, [r0, #1]
   1121e:	1c7d      	adds	r5, r7, #1
   11220:	421a      	tst	r2, r3
   11222:	d1f4      	bne.n	1120e <_strtoul_l.isra.0+0x1e>
   11224:	2c2d      	cmp	r4, #45	; 0x2d
   11226:	d05b      	beq.n	112e0 <_strtoul_l.isra.0+0xf0>
   11228:	2300      	movs	r3, #0
   1122a:	9301      	str	r3, [sp, #4]
   1122c:	2c2b      	cmp	r4, #43	; 0x2b
   1122e:	d05c      	beq.n	112ea <_strtoul_l.isra.0+0xfa>
   11230:	2e00      	cmp	r6, #0
   11232:	d00e      	beq.n	11252 <_strtoul_l.isra.0+0x62>
   11234:	2e10      	cmp	r6, #16
   11236:	d05b      	beq.n	112f0 <_strtoul_l.isra.0+0x100>
   11238:	2001      	movs	r0, #1
   1123a:	0031      	movs	r1, r6
   1123c:	4240      	negs	r0, r0
   1123e:	f7f5 f895 	bl	636c <__udivsi3>
   11242:	0007      	movs	r7, r0
   11244:	2001      	movs	r0, #1
   11246:	0031      	movs	r1, r6
   11248:	4240      	negs	r0, r0
   1124a:	46b0      	mov	r8, r6
   1124c:	f7f5 f914 	bl	6478 <__aeabi_uidivmod>
   11250:	e006      	b.n	11260 <_strtoul_l.isra.0+0x70>
   11252:	2c30      	cmp	r4, #48	; 0x30
   11254:	d05b      	beq.n	1130e <_strtoul_l.isra.0+0x11e>
   11256:	230a      	movs	r3, #10
   11258:	2105      	movs	r1, #5
   1125a:	4698      	mov	r8, r3
   1125c:	260a      	movs	r6, #10
   1125e:	4f34      	ldr	r7, [pc, #208]	; (11330 <_strtoul_l.isra.0+0x140>)
   11260:	2200      	movs	r2, #0
   11262:	2000      	movs	r0, #0
   11264:	0023      	movs	r3, r4
   11266:	3b30      	subs	r3, #48	; 0x30
   11268:	2b09      	cmp	r3, #9
   1126a:	d907      	bls.n	1127c <_strtoul_l.isra.0+0x8c>
   1126c:	3b11      	subs	r3, #17
   1126e:	2b19      	cmp	r3, #25
   11270:	d903      	bls.n	1127a <_strtoul_l.isra.0+0x8a>
   11272:	0023      	movs	r3, r4
   11274:	3b61      	subs	r3, #97	; 0x61
   11276:	2b19      	cmp	r3, #25
   11278:	d80e      	bhi.n	11298 <_strtoul_l.isra.0+0xa8>
   1127a:	330a      	adds	r3, #10
   1127c:	429e      	cmp	r6, r3
   1127e:	dd0b      	ble.n	11298 <_strtoul_l.isra.0+0xa8>
   11280:	2a00      	cmp	r2, #0
   11282:	db20      	blt.n	112c6 <_strtoul_l.isra.0+0xd6>
   11284:	42b8      	cmp	r0, r7
   11286:	d81e      	bhi.n	112c6 <_strtoul_l.isra.0+0xd6>
   11288:	d01b      	beq.n	112c2 <_strtoul_l.isra.0+0xd2>
   1128a:	4642      	mov	r2, r8
   1128c:	4350      	muls	r0, r2
   1128e:	2201      	movs	r2, #1
   11290:	1818      	adds	r0, r3, r0
   11292:	782c      	ldrb	r4, [r5, #0]
   11294:	3501      	adds	r5, #1
   11296:	e7e5      	b.n	11264 <_strtoul_l.isra.0+0x74>
   11298:	2a00      	cmp	r2, #0
   1129a:	db17      	blt.n	112cc <_strtoul_l.isra.0+0xdc>
   1129c:	9b01      	ldr	r3, [sp, #4]
   1129e:	2b00      	cmp	r3, #0
   112a0:	d000      	beq.n	112a4 <_strtoul_l.isra.0+0xb4>
   112a2:	4240      	negs	r0, r0
   112a4:	4653      	mov	r3, sl
   112a6:	2b00      	cmp	r3, #0
   112a8:	d004      	beq.n	112b4 <_strtoul_l.isra.0+0xc4>
   112aa:	464b      	mov	r3, r9
   112ac:	2a00      	cmp	r2, #0
   112ae:	d115      	bne.n	112dc <_strtoul_l.isra.0+0xec>
   112b0:	4652      	mov	r2, sl
   112b2:	6013      	str	r3, [r2, #0]
   112b4:	b003      	add	sp, #12
   112b6:	bc3c      	pop	{r2, r3, r4, r5}
   112b8:	4690      	mov	r8, r2
   112ba:	4699      	mov	r9, r3
   112bc:	46a2      	mov	sl, r4
   112be:	46ab      	mov	fp, r5
   112c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   112c2:	428b      	cmp	r3, r1
   112c4:	dde1      	ble.n	1128a <_strtoul_l.isra.0+0x9a>
   112c6:	2201      	movs	r2, #1
   112c8:	4252      	negs	r2, r2
   112ca:	e7e2      	b.n	11292 <_strtoul_l.isra.0+0xa2>
   112cc:	2322      	movs	r3, #34	; 0x22
   112ce:	465a      	mov	r2, fp
   112d0:	2001      	movs	r0, #1
   112d2:	6013      	str	r3, [r2, #0]
   112d4:	4653      	mov	r3, sl
   112d6:	4240      	negs	r0, r0
   112d8:	2b00      	cmp	r3, #0
   112da:	d0eb      	beq.n	112b4 <_strtoul_l.isra.0+0xc4>
   112dc:	1e6b      	subs	r3, r5, #1
   112de:	e7e7      	b.n	112b0 <_strtoul_l.isra.0+0xc0>
   112e0:	2301      	movs	r3, #1
   112e2:	782c      	ldrb	r4, [r5, #0]
   112e4:	9301      	str	r3, [sp, #4]
   112e6:	1cbd      	adds	r5, r7, #2
   112e8:	e7a2      	b.n	11230 <_strtoul_l.isra.0+0x40>
   112ea:	782c      	ldrb	r4, [r5, #0]
   112ec:	1cbd      	adds	r5, r7, #2
   112ee:	e79f      	b.n	11230 <_strtoul_l.isra.0+0x40>
   112f0:	2c30      	cmp	r4, #48	; 0x30
   112f2:	d117      	bne.n	11324 <_strtoul_l.isra.0+0x134>
   112f4:	2220      	movs	r2, #32
   112f6:	782b      	ldrb	r3, [r5, #0]
   112f8:	4393      	bics	r3, r2
   112fa:	2b58      	cmp	r3, #88	; 0x58
   112fc:	d112      	bne.n	11324 <_strtoul_l.isra.0+0x134>
   112fe:	2310      	movs	r3, #16
   11300:	786c      	ldrb	r4, [r5, #1]
   11302:	210f      	movs	r1, #15
   11304:	3502      	adds	r5, #2
   11306:	4f0b      	ldr	r7, [pc, #44]	; (11334 <_strtoul_l.isra.0+0x144>)
   11308:	4698      	mov	r8, r3
   1130a:	2610      	movs	r6, #16
   1130c:	e7a8      	b.n	11260 <_strtoul_l.isra.0+0x70>
   1130e:	2220      	movs	r2, #32
   11310:	782b      	ldrb	r3, [r5, #0]
   11312:	4393      	bics	r3, r2
   11314:	2b58      	cmp	r3, #88	; 0x58
   11316:	d0f2      	beq.n	112fe <_strtoul_l.isra.0+0x10e>
   11318:	2308      	movs	r3, #8
   1131a:	2107      	movs	r1, #7
   1131c:	4f06      	ldr	r7, [pc, #24]	; (11338 <_strtoul_l.isra.0+0x148>)
   1131e:	4698      	mov	r8, r3
   11320:	2608      	movs	r6, #8
   11322:	e79d      	b.n	11260 <_strtoul_l.isra.0+0x70>
   11324:	2310      	movs	r3, #16
   11326:	210f      	movs	r1, #15
   11328:	4f02      	ldr	r7, [pc, #8]	; (11334 <_strtoul_l.isra.0+0x144>)
   1132a:	4698      	mov	r8, r3
   1132c:	e798      	b.n	11260 <_strtoul_l.isra.0+0x70>
   1132e:	46c0      	nop			; (mov r8, r8)
   11330:	19999999 	.word	0x19999999
   11334:	0fffffff 	.word	0x0fffffff
   11338:	1fffffff 	.word	0x1fffffff

0001133c <_strtoul_r>:
   1133c:	b510      	push	{r4, lr}
   1133e:	4c06      	ldr	r4, [pc, #24]	; (11358 <_strtoul_r+0x1c>)
   11340:	b082      	sub	sp, #8
   11342:	6824      	ldr	r4, [r4, #0]
   11344:	6b64      	ldr	r4, [r4, #52]	; 0x34
   11346:	2c00      	cmp	r4, #0
   11348:	d004      	beq.n	11354 <_strtoul_r+0x18>
   1134a:	9400      	str	r4, [sp, #0]
   1134c:	f7ff ff50 	bl	111f0 <_strtoul_l.isra.0>
   11350:	b002      	add	sp, #8
   11352:	bd10      	pop	{r4, pc}
   11354:	4c01      	ldr	r4, [pc, #4]	; (1135c <_strtoul_r+0x20>)
   11356:	e7f8      	b.n	1134a <_strtoul_r+0xe>
   11358:	20000080 	.word	0x20000080
   1135c:	200004b4 	.word	0x200004b4

00011360 <_strtoull_l.isra.0>:
   11360:	b5f0      	push	{r4, r5, r6, r7, lr}
   11362:	46de      	mov	lr, fp
   11364:	4657      	mov	r7, sl
   11366:	464e      	mov	r6, r9
   11368:	4645      	mov	r5, r8
   1136a:	b5e0      	push	{r5, r6, r7, lr}
   1136c:	001e      	movs	r6, r3
   1136e:	2308      	movs	r3, #8
   11370:	b087      	sub	sp, #28
   11372:	9005      	str	r0, [sp, #20]
   11374:	9104      	str	r1, [sp, #16]
   11376:	4693      	mov	fp, r2
   11378:	000f      	movs	r7, r1
   1137a:	4698      	mov	r8, r3
   1137c:	e000      	b.n	11380 <_strtoull_l.isra.0+0x20>
   1137e:	002f      	movs	r7, r5
   11380:	9810      	ldr	r0, [sp, #64]	; 0x40
   11382:	783c      	ldrb	r4, [r7, #0]
   11384:	f7fd fbb2 	bl	eaec <__locale_ctype_ptr_l>
   11388:	4642      	mov	r2, r8
   1138a:	1900      	adds	r0, r0, r4
   1138c:	7843      	ldrb	r3, [r0, #1]
   1138e:	1c7d      	adds	r5, r7, #1
   11390:	421a      	tst	r2, r3
   11392:	d1f4      	bne.n	1137e <_strtoull_l.isra.0+0x1e>
   11394:	2c2d      	cmp	r4, #45	; 0x2d
   11396:	d100      	bne.n	1139a <_strtoull_l.isra.0+0x3a>
   11398:	e085      	b.n	114a6 <_strtoull_l.isra.0+0x146>
   1139a:	2300      	movs	r3, #0
   1139c:	9303      	str	r3, [sp, #12]
   1139e:	2c2b      	cmp	r4, #43	; 0x2b
   113a0:	d100      	bne.n	113a4 <_strtoull_l.isra.0+0x44>
   113a2:	e085      	b.n	114b0 <_strtoull_l.isra.0+0x150>
   113a4:	2e00      	cmp	r6, #0
   113a6:	d016      	beq.n	113d6 <_strtoull_l.isra.0+0x76>
   113a8:	2e10      	cmp	r6, #16
   113aa:	d100      	bne.n	113ae <_strtoull_l.isra.0+0x4e>
   113ac:	e083      	b.n	114b6 <_strtoull_l.isra.0+0x156>
   113ae:	17f3      	asrs	r3, r6, #31
   113b0:	0032      	movs	r2, r6
   113b2:	2001      	movs	r0, #1
   113b4:	4240      	negs	r0, r0
   113b6:	17c1      	asrs	r1, r0, #31
   113b8:	4699      	mov	r9, r3
   113ba:	f7f5 f94d 	bl	6658 <__aeabi_uldivmod>
   113be:	0032      	movs	r2, r6
   113c0:	4680      	mov	r8, r0
   113c2:	000f      	movs	r7, r1
   113c4:	464b      	mov	r3, r9
   113c6:	2001      	movs	r0, #1
   113c8:	4240      	negs	r0, r0
   113ca:	17c1      	asrs	r1, r0, #31
   113cc:	f7f5 f944 	bl	6658 <__aeabi_uldivmod>
   113d0:	46b2      	mov	sl, r6
   113d2:	9202      	str	r2, [sp, #8]
   113d4:	e00c      	b.n	113f0 <_strtoull_l.isra.0+0x90>
   113d6:	2c30      	cmp	r4, #48	; 0x30
   113d8:	d100      	bne.n	113dc <_strtoull_l.isra.0+0x7c>
   113da:	e080      	b.n	114de <_strtoull_l.isra.0+0x17e>
   113dc:	2305      	movs	r3, #5
   113de:	9302      	str	r3, [sp, #8]
   113e0:	4b4c      	ldr	r3, [pc, #304]	; (11514 <_strtoull_l.isra.0+0x1b4>)
   113e2:	260a      	movs	r6, #10
   113e4:	4698      	mov	r8, r3
   113e6:	230a      	movs	r3, #10
   113e8:	469a      	mov	sl, r3
   113ea:	2300      	movs	r3, #0
   113ec:	4699      	mov	r9, r3
   113ee:	4f4a      	ldr	r7, [pc, #296]	; (11518 <_strtoull_l.isra.0+0x1b8>)
   113f0:	2200      	movs	r2, #0
   113f2:	2000      	movs	r0, #0
   113f4:	2100      	movs	r1, #0
   113f6:	e019      	b.n	1142c <_strtoull_l.isra.0+0xcc>
   113f8:	001c      	movs	r4, r3
   113fa:	42a6      	cmp	r6, r4
   113fc:	dd21      	ble.n	11442 <_strtoull_l.isra.0+0xe2>
   113fe:	2a00      	cmp	r2, #0
   11400:	db3d      	blt.n	1147e <_strtoull_l.isra.0+0x11e>
   11402:	42b9      	cmp	r1, r7
   11404:	d83b      	bhi.n	1147e <_strtoull_l.isra.0+0x11e>
   11406:	d101      	bne.n	1140c <_strtoull_l.isra.0+0xac>
   11408:	4540      	cmp	r0, r8
   1140a:	d838      	bhi.n	1147e <_strtoull_l.isra.0+0x11e>
   1140c:	4540      	cmp	r0, r8
   1140e:	d031      	beq.n	11474 <_strtoull_l.isra.0+0x114>
   11410:	4652      	mov	r2, sl
   11412:	464b      	mov	r3, r9
   11414:	f7f5 f940 	bl	6698 <__aeabi_lmul>
   11418:	17e3      	asrs	r3, r4, #31
   1141a:	9400      	str	r4, [sp, #0]
   1141c:	9301      	str	r3, [sp, #4]
   1141e:	9b00      	ldr	r3, [sp, #0]
   11420:	9c01      	ldr	r4, [sp, #4]
   11422:	2201      	movs	r2, #1
   11424:	18c0      	adds	r0, r0, r3
   11426:	4161      	adcs	r1, r4
   11428:	782c      	ldrb	r4, [r5, #0]
   1142a:	3501      	adds	r5, #1
   1142c:	0023      	movs	r3, r4
   1142e:	3b30      	subs	r3, #48	; 0x30
   11430:	2b09      	cmp	r3, #9
   11432:	d9e1      	bls.n	113f8 <_strtoull_l.isra.0+0x98>
   11434:	0023      	movs	r3, r4
   11436:	3b41      	subs	r3, #65	; 0x41
   11438:	2b19      	cmp	r3, #25
   1143a:	d823      	bhi.n	11484 <_strtoull_l.isra.0+0x124>
   1143c:	3c37      	subs	r4, #55	; 0x37
   1143e:	42a6      	cmp	r6, r4
   11440:	dcdd      	bgt.n	113fe <_strtoull_l.isra.0+0x9e>
   11442:	2a00      	cmp	r2, #0
   11444:	db24      	blt.n	11490 <_strtoull_l.isra.0+0x130>
   11446:	9b03      	ldr	r3, [sp, #12]
   11448:	2b00      	cmp	r3, #0
   1144a:	d004      	beq.n	11456 <_strtoull_l.isra.0+0xf6>
   1144c:	0003      	movs	r3, r0
   1144e:	000c      	movs	r4, r1
   11450:	2100      	movs	r1, #0
   11452:	4258      	negs	r0, r3
   11454:	41a1      	sbcs	r1, r4
   11456:	465b      	mov	r3, fp
   11458:	2b00      	cmp	r3, #0
   1145a:	d004      	beq.n	11466 <_strtoull_l.isra.0+0x106>
   1145c:	9b04      	ldr	r3, [sp, #16]
   1145e:	2a00      	cmp	r2, #0
   11460:	d11f      	bne.n	114a2 <_strtoull_l.isra.0+0x142>
   11462:	465a      	mov	r2, fp
   11464:	6013      	str	r3, [r2, #0]
   11466:	b007      	add	sp, #28
   11468:	bc3c      	pop	{r2, r3, r4, r5}
   1146a:	4690      	mov	r8, r2
   1146c:	4699      	mov	r9, r3
   1146e:	46a2      	mov	sl, r4
   11470:	46ab      	mov	fp, r5
   11472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11474:	42b9      	cmp	r1, r7
   11476:	d1cb      	bne.n	11410 <_strtoull_l.isra.0+0xb0>
   11478:	9b02      	ldr	r3, [sp, #8]
   1147a:	429c      	cmp	r4, r3
   1147c:	ddc8      	ble.n	11410 <_strtoull_l.isra.0+0xb0>
   1147e:	2201      	movs	r2, #1
   11480:	4252      	negs	r2, r2
   11482:	e7d1      	b.n	11428 <_strtoull_l.isra.0+0xc8>
   11484:	0023      	movs	r3, r4
   11486:	3b61      	subs	r3, #97	; 0x61
   11488:	2b19      	cmp	r3, #25
   1148a:	d8da      	bhi.n	11442 <_strtoull_l.isra.0+0xe2>
   1148c:	3c57      	subs	r4, #87	; 0x57
   1148e:	e7b4      	b.n	113fa <_strtoull_l.isra.0+0x9a>
   11490:	2322      	movs	r3, #34	; 0x22
   11492:	9a05      	ldr	r2, [sp, #20]
   11494:	2001      	movs	r0, #1
   11496:	4240      	negs	r0, r0
   11498:	17c1      	asrs	r1, r0, #31
   1149a:	6013      	str	r3, [r2, #0]
   1149c:	465b      	mov	r3, fp
   1149e:	2b00      	cmp	r3, #0
   114a0:	d0e1      	beq.n	11466 <_strtoull_l.isra.0+0x106>
   114a2:	1e6b      	subs	r3, r5, #1
   114a4:	e7dd      	b.n	11462 <_strtoull_l.isra.0+0x102>
   114a6:	2301      	movs	r3, #1
   114a8:	782c      	ldrb	r4, [r5, #0]
   114aa:	9303      	str	r3, [sp, #12]
   114ac:	1cbd      	adds	r5, r7, #2
   114ae:	e779      	b.n	113a4 <_strtoull_l.isra.0+0x44>
   114b0:	782c      	ldrb	r4, [r5, #0]
   114b2:	1cbd      	adds	r5, r7, #2
   114b4:	e776      	b.n	113a4 <_strtoull_l.isra.0+0x44>
   114b6:	2c30      	cmp	r4, #48	; 0x30
   114b8:	d121      	bne.n	114fe <_strtoull_l.isra.0+0x19e>
   114ba:	2220      	movs	r2, #32
   114bc:	782b      	ldrb	r3, [r5, #0]
   114be:	4393      	bics	r3, r2
   114c0:	2b58      	cmp	r3, #88	; 0x58
   114c2:	d11c      	bne.n	114fe <_strtoull_l.isra.0+0x19e>
   114c4:	230f      	movs	r3, #15
   114c6:	9302      	str	r3, [sp, #8]
   114c8:	3b10      	subs	r3, #16
   114ca:	4698      	mov	r8, r3
   114cc:	3311      	adds	r3, #17
   114ce:	469a      	mov	sl, r3
   114d0:	2300      	movs	r3, #0
   114d2:	786c      	ldrb	r4, [r5, #1]
   114d4:	4f11      	ldr	r7, [pc, #68]	; (1151c <_strtoull_l.isra.0+0x1bc>)
   114d6:	3502      	adds	r5, #2
   114d8:	4699      	mov	r9, r3
   114da:	2610      	movs	r6, #16
   114dc:	e788      	b.n	113f0 <_strtoull_l.isra.0+0x90>
   114de:	2220      	movs	r2, #32
   114e0:	782b      	ldrb	r3, [r5, #0]
   114e2:	4393      	bics	r3, r2
   114e4:	2b58      	cmp	r3, #88	; 0x58
   114e6:	d0ed      	beq.n	114c4 <_strtoull_l.isra.0+0x164>
   114e8:	2307      	movs	r3, #7
   114ea:	9302      	str	r3, [sp, #8]
   114ec:	3b08      	subs	r3, #8
   114ee:	4698      	mov	r8, r3
   114f0:	3309      	adds	r3, #9
   114f2:	469a      	mov	sl, r3
   114f4:	2300      	movs	r3, #0
   114f6:	4f0a      	ldr	r7, [pc, #40]	; (11520 <_strtoull_l.isra.0+0x1c0>)
   114f8:	4699      	mov	r9, r3
   114fa:	2608      	movs	r6, #8
   114fc:	e778      	b.n	113f0 <_strtoull_l.isra.0+0x90>
   114fe:	230f      	movs	r3, #15
   11500:	9302      	str	r3, [sp, #8]
   11502:	3b10      	subs	r3, #16
   11504:	4698      	mov	r8, r3
   11506:	3311      	adds	r3, #17
   11508:	469a      	mov	sl, r3
   1150a:	2300      	movs	r3, #0
   1150c:	4f03      	ldr	r7, [pc, #12]	; (1151c <_strtoull_l.isra.0+0x1bc>)
   1150e:	4699      	mov	r9, r3
   11510:	e76e      	b.n	113f0 <_strtoull_l.isra.0+0x90>
   11512:	46c0      	nop			; (mov r8, r8)
   11514:	99999999 	.word	0x99999999
   11518:	19999999 	.word	0x19999999
   1151c:	0fffffff 	.word	0x0fffffff
   11520:	1fffffff 	.word	0x1fffffff

00011524 <_strtoull_r>:
   11524:	b510      	push	{r4, lr}
   11526:	4c06      	ldr	r4, [pc, #24]	; (11540 <_strtoull_r+0x1c>)
   11528:	b082      	sub	sp, #8
   1152a:	6824      	ldr	r4, [r4, #0]
   1152c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   1152e:	2c00      	cmp	r4, #0
   11530:	d004      	beq.n	1153c <_strtoull_r+0x18>
   11532:	9400      	str	r4, [sp, #0]
   11534:	f7ff ff14 	bl	11360 <_strtoull_l.isra.0>
   11538:	b002      	add	sp, #8
   1153a:	bd10      	pop	{r4, pc}
   1153c:	4c01      	ldr	r4, [pc, #4]	; (11544 <_strtoull_r+0x20>)
   1153e:	e7f8      	b.n	11532 <_strtoull_r+0xe>
   11540:	20000080 	.word	0x20000080
   11544:	200004b4 	.word	0x200004b4

00011548 <__ssprint_r>:
   11548:	b5f0      	push	{r4, r5, r6, r7, lr}
   1154a:	4657      	mov	r7, sl
   1154c:	464e      	mov	r6, r9
   1154e:	46de      	mov	lr, fp
   11550:	4645      	mov	r5, r8
   11552:	b5e0      	push	{r5, r6, r7, lr}
   11554:	6893      	ldr	r3, [r2, #8]
   11556:	b083      	sub	sp, #12
   11558:	9001      	str	r0, [sp, #4]
   1155a:	000e      	movs	r6, r1
   1155c:	4692      	mov	sl, r2
   1155e:	2b00      	cmp	r3, #0
   11560:	d070      	beq.n	11644 <__ssprint_r+0xfc>
   11562:	688d      	ldr	r5, [r1, #8]
   11564:	6813      	ldr	r3, [r2, #0]
   11566:	002c      	movs	r4, r5
   11568:	6808      	ldr	r0, [r1, #0]
   1156a:	001d      	movs	r5, r3
   1156c:	e046      	b.n	115fc <__ssprint_r+0xb4>
   1156e:	2290      	movs	r2, #144	; 0x90
   11570:	89b3      	ldrh	r3, [r6, #12]
   11572:	00d2      	lsls	r2, r2, #3
   11574:	4213      	tst	r3, r2
   11576:	d030      	beq.n	115da <__ssprint_r+0x92>
   11578:	6931      	ldr	r1, [r6, #16]
   1157a:	1a42      	subs	r2, r0, r1
   1157c:	4693      	mov	fp, r2
   1157e:	6970      	ldr	r0, [r6, #20]
   11580:	0042      	lsls	r2, r0, #1
   11582:	1812      	adds	r2, r2, r0
   11584:	0fd0      	lsrs	r0, r2, #31
   11586:	1882      	adds	r2, r0, r2
   11588:	1052      	asrs	r2, r2, #1
   1158a:	4690      	mov	r8, r2
   1158c:	465a      	mov	r2, fp
   1158e:	1c50      	adds	r0, r2, #1
   11590:	19c0      	adds	r0, r0, r7
   11592:	4642      	mov	r2, r8
   11594:	4540      	cmp	r0, r8
   11596:	d901      	bls.n	1159c <__ssprint_r+0x54>
   11598:	4680      	mov	r8, r0
   1159a:	0002      	movs	r2, r0
   1159c:	2080      	movs	r0, #128	; 0x80
   1159e:	00c0      	lsls	r0, r0, #3
   115a0:	4203      	tst	r3, r0
   115a2:	d038      	beq.n	11616 <__ssprint_r+0xce>
   115a4:	0011      	movs	r1, r2
   115a6:	9801      	ldr	r0, [sp, #4]
   115a8:	f7fd fb56 	bl	ec58 <_malloc_r>
   115ac:	1e04      	subs	r4, r0, #0
   115ae:	d054      	beq.n	1165a <__ssprint_r+0x112>
   115b0:	465a      	mov	r2, fp
   115b2:	6931      	ldr	r1, [r6, #16]
   115b4:	f7f7 f94e 	bl	8854 <memcpy>
   115b8:	89b3      	ldrh	r3, [r6, #12]
   115ba:	4a2a      	ldr	r2, [pc, #168]	; (11664 <__ssprint_r+0x11c>)
   115bc:	4013      	ands	r3, r2
   115be:	2280      	movs	r2, #128	; 0x80
   115c0:	4313      	orrs	r3, r2
   115c2:	81b3      	strh	r3, [r6, #12]
   115c4:	4643      	mov	r3, r8
   115c6:	0020      	movs	r0, r4
   115c8:	465a      	mov	r2, fp
   115ca:	6134      	str	r4, [r6, #16]
   115cc:	46b8      	mov	r8, r7
   115ce:	003c      	movs	r4, r7
   115d0:	4458      	add	r0, fp
   115d2:	6173      	str	r3, [r6, #20]
   115d4:	1a9b      	subs	r3, r3, r2
   115d6:	6030      	str	r0, [r6, #0]
   115d8:	60b3      	str	r3, [r6, #8]
   115da:	4642      	mov	r2, r8
   115dc:	4649      	mov	r1, r9
   115de:	f7fd fe77 	bl	f2d0 <memmove>
   115e2:	68b3      	ldr	r3, [r6, #8]
   115e4:	1b1c      	subs	r4, r3, r4
   115e6:	6833      	ldr	r3, [r6, #0]
   115e8:	60b4      	str	r4, [r6, #8]
   115ea:	4443      	add	r3, r8
   115ec:	6033      	str	r3, [r6, #0]
   115ee:	0018      	movs	r0, r3
   115f0:	4653      	mov	r3, sl
   115f2:	689b      	ldr	r3, [r3, #8]
   115f4:	1bdf      	subs	r7, r3, r7
   115f6:	4653      	mov	r3, sl
   115f8:	609f      	str	r7, [r3, #8]
   115fa:	d023      	beq.n	11644 <__ssprint_r+0xfc>
   115fc:	686f      	ldr	r7, [r5, #4]
   115fe:	002b      	movs	r3, r5
   11600:	3508      	adds	r5, #8
   11602:	2f00      	cmp	r7, #0
   11604:	d0fa      	beq.n	115fc <__ssprint_r+0xb4>
   11606:	681b      	ldr	r3, [r3, #0]
   11608:	46a0      	mov	r8, r4
   1160a:	4699      	mov	r9, r3
   1160c:	42a7      	cmp	r7, r4
   1160e:	d2ae      	bcs.n	1156e <__ssprint_r+0x26>
   11610:	003c      	movs	r4, r7
   11612:	46b8      	mov	r8, r7
   11614:	e7e1      	b.n	115da <__ssprint_r+0x92>
   11616:	9801      	ldr	r0, [sp, #4]
   11618:	f7fe fb7c 	bl	fd14 <_realloc_r>
   1161c:	1e04      	subs	r4, r0, #0
   1161e:	d1d1      	bne.n	115c4 <__ssprint_r+0x7c>
   11620:	9c01      	ldr	r4, [sp, #4]
   11622:	6931      	ldr	r1, [r6, #16]
   11624:	0020      	movs	r0, r4
   11626:	f7fc ffbf 	bl	e5a8 <_free_r>
   1162a:	230c      	movs	r3, #12
   1162c:	6023      	str	r3, [r4, #0]
   1162e:	2240      	movs	r2, #64	; 0x40
   11630:	89b3      	ldrh	r3, [r6, #12]
   11632:	2001      	movs	r0, #1
   11634:	4313      	orrs	r3, r2
   11636:	81b3      	strh	r3, [r6, #12]
   11638:	4652      	mov	r2, sl
   1163a:	2300      	movs	r3, #0
   1163c:	4240      	negs	r0, r0
   1163e:	6093      	str	r3, [r2, #8]
   11640:	6053      	str	r3, [r2, #4]
   11642:	e003      	b.n	1164c <__ssprint_r+0x104>
   11644:	2300      	movs	r3, #0
   11646:	4652      	mov	r2, sl
   11648:	2000      	movs	r0, #0
   1164a:	6053      	str	r3, [r2, #4]
   1164c:	b003      	add	sp, #12
   1164e:	bc3c      	pop	{r2, r3, r4, r5}
   11650:	4690      	mov	r8, r2
   11652:	4699      	mov	r9, r3
   11654:	46a2      	mov	sl, r4
   11656:	46ab      	mov	fp, r5
   11658:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1165a:	230c      	movs	r3, #12
   1165c:	9a01      	ldr	r2, [sp, #4]
   1165e:	6013      	str	r3, [r2, #0]
   11660:	e7e5      	b.n	1162e <__ssprint_r+0xe6>
   11662:	46c0      	nop			; (mov r8, r8)
   11664:	fffffb7f 	.word	0xfffffb7f

00011668 <_sungetc_r>:
   11668:	b570      	push	{r4, r5, r6, lr}
   1166a:	0014      	movs	r4, r2
   1166c:	1c4b      	adds	r3, r1, #1
   1166e:	d01b      	beq.n	116a8 <_sungetc_r+0x40>
   11670:	8993      	ldrh	r3, [r2, #12]
   11672:	2220      	movs	r2, #32
   11674:	25ff      	movs	r5, #255	; 0xff
   11676:	4393      	bics	r3, r2
   11678:	81a3      	strh	r3, [r4, #12]
   1167a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1167c:	b2ce      	uxtb	r6, r1
   1167e:	400d      	ands	r5, r1
   11680:	2b00      	cmp	r3, #0
   11682:	d014      	beq.n	116ae <_sungetc_r+0x46>
   11684:	6863      	ldr	r3, [r4, #4]
   11686:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11688:	4293      	cmp	r3, r2
   1168a:	da08      	bge.n	1169e <_sungetc_r+0x36>
   1168c:	6823      	ldr	r3, [r4, #0]
   1168e:	3b01      	subs	r3, #1
   11690:	6023      	str	r3, [r4, #0]
   11692:	701e      	strb	r6, [r3, #0]
   11694:	6863      	ldr	r3, [r4, #4]
   11696:	3301      	adds	r3, #1
   11698:	6063      	str	r3, [r4, #4]
   1169a:	0028      	movs	r0, r5
   1169c:	bd70      	pop	{r4, r5, r6, pc}
   1169e:	0021      	movs	r1, r4
   116a0:	f000 f88c 	bl	117bc <__submore>
   116a4:	2800      	cmp	r0, #0
   116a6:	d0f1      	beq.n	1168c <_sungetc_r+0x24>
   116a8:	2501      	movs	r5, #1
   116aa:	426d      	negs	r5, r5
   116ac:	e7f5      	b.n	1169a <_sungetc_r+0x32>
   116ae:	6922      	ldr	r2, [r4, #16]
   116b0:	6823      	ldr	r3, [r4, #0]
   116b2:	2a00      	cmp	r2, #0
   116b4:	d005      	beq.n	116c2 <_sungetc_r+0x5a>
   116b6:	429a      	cmp	r2, r3
   116b8:	d203      	bcs.n	116c2 <_sungetc_r+0x5a>
   116ba:	1e5a      	subs	r2, r3, #1
   116bc:	7811      	ldrb	r1, [r2, #0]
   116be:	428d      	cmp	r5, r1
   116c0:	d00f      	beq.n	116e2 <_sungetc_r+0x7a>
   116c2:	63a3      	str	r3, [r4, #56]	; 0x38
   116c4:	0023      	movs	r3, r4
   116c6:	3340      	adds	r3, #64	; 0x40
   116c8:	6323      	str	r3, [r4, #48]	; 0x30
   116ca:	2303      	movs	r3, #3
   116cc:	6862      	ldr	r2, [r4, #4]
   116ce:	6363      	str	r3, [r4, #52]	; 0x34
   116d0:	333f      	adds	r3, #63	; 0x3f
   116d2:	63e2      	str	r2, [r4, #60]	; 0x3c
   116d4:	54e6      	strb	r6, [r4, r3]
   116d6:	0023      	movs	r3, r4
   116d8:	3342      	adds	r3, #66	; 0x42
   116da:	6023      	str	r3, [r4, #0]
   116dc:	2301      	movs	r3, #1
   116de:	6063      	str	r3, [r4, #4]
   116e0:	e7db      	b.n	1169a <_sungetc_r+0x32>
   116e2:	6863      	ldr	r3, [r4, #4]
   116e4:	6022      	str	r2, [r4, #0]
   116e6:	3301      	adds	r3, #1
   116e8:	6063      	str	r3, [r4, #4]
   116ea:	e7d6      	b.n	1169a <_sungetc_r+0x32>

000116ec <__ssrefill_r>:
   116ec:	b510      	push	{r4, lr}
   116ee:	000c      	movs	r4, r1
   116f0:	6b09      	ldr	r1, [r1, #48]	; 0x30
   116f2:	2900      	cmp	r1, #0
   116f4:	d00f      	beq.n	11716 <__ssrefill_r+0x2a>
   116f6:	0023      	movs	r3, r4
   116f8:	3340      	adds	r3, #64	; 0x40
   116fa:	4299      	cmp	r1, r3
   116fc:	d001      	beq.n	11702 <__ssrefill_r+0x16>
   116fe:	f7fc ff53 	bl	e5a8 <_free_r>
   11702:	2300      	movs	r3, #0
   11704:	6323      	str	r3, [r4, #48]	; 0x30
   11706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11708:	6063      	str	r3, [r4, #4]
   1170a:	2b00      	cmp	r3, #0
   1170c:	d003      	beq.n	11716 <__ssrefill_r+0x2a>
   1170e:	2000      	movs	r0, #0
   11710:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   11712:	6023      	str	r3, [r4, #0]
   11714:	bd10      	pop	{r4, pc}
   11716:	6923      	ldr	r3, [r4, #16]
   11718:	2220      	movs	r2, #32
   1171a:	6023      	str	r3, [r4, #0]
   1171c:	2300      	movs	r3, #0
   1171e:	2001      	movs	r0, #1
   11720:	6063      	str	r3, [r4, #4]
   11722:	89a3      	ldrh	r3, [r4, #12]
   11724:	4240      	negs	r0, r0
   11726:	4313      	orrs	r3, r2
   11728:	81a3      	strh	r3, [r4, #12]
   1172a:	e7f3      	b.n	11714 <__ssrefill_r+0x28>

0001172c <_sfread_r>:
   1172c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1172e:	46de      	mov	lr, fp
   11730:	4657      	mov	r7, sl
   11732:	4645      	mov	r5, r8
   11734:	464e      	mov	r6, r9
   11736:	469b      	mov	fp, r3
   11738:	b5e0      	push	{r5, r6, r7, lr}
   1173a:	b083      	sub	sp, #12
   1173c:	0013      	movs	r3, r2
   1173e:	9201      	str	r2, [sp, #4]
   11740:	465a      	mov	r2, fp
   11742:	4353      	muls	r3, r2
   11744:	4680      	mov	r8, r0
   11746:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   11748:	469a      	mov	sl, r3
   1174a:	2b00      	cmp	r3, #0
   1174c:	d026      	beq.n	1179c <_sfread_r+0x70>
   1174e:	001f      	movs	r7, r3
   11750:	2300      	movs	r3, #0
   11752:	000e      	movs	r6, r1
   11754:	4699      	mov	r9, r3
   11756:	e011      	b.n	1177c <_sfread_r+0x50>
   11758:	6821      	ldr	r1, [r4, #0]
   1175a:	0030      	movs	r0, r6
   1175c:	002a      	movs	r2, r5
   1175e:	f7f7 f879 	bl	8854 <memcpy>
   11762:	6823      	ldr	r3, [r4, #0]
   11764:	0021      	movs	r1, r4
   11766:	195b      	adds	r3, r3, r5
   11768:	6023      	str	r3, [r4, #0]
   1176a:	464b      	mov	r3, r9
   1176c:	4640      	mov	r0, r8
   1176e:	6063      	str	r3, [r4, #4]
   11770:	1976      	adds	r6, r6, r5
   11772:	1b7f      	subs	r7, r7, r5
   11774:	f7ff ffba 	bl	116ec <__ssrefill_r>
   11778:	2800      	cmp	r0, #0
   1177a:	d117      	bne.n	117ac <_sfread_r+0x80>
   1177c:	6865      	ldr	r5, [r4, #4]
   1177e:	42af      	cmp	r7, r5
   11780:	d8ea      	bhi.n	11758 <_sfread_r+0x2c>
   11782:	003a      	movs	r2, r7
   11784:	6821      	ldr	r1, [r4, #0]
   11786:	0030      	movs	r0, r6
   11788:	f7f7 f864 	bl	8854 <memcpy>
   1178c:	6863      	ldr	r3, [r4, #4]
   1178e:	46da      	mov	sl, fp
   11790:	1bdb      	subs	r3, r3, r7
   11792:	6063      	str	r3, [r4, #4]
   11794:	6823      	ldr	r3, [r4, #0]
   11796:	469c      	mov	ip, r3
   11798:	4467      	add	r7, ip
   1179a:	6027      	str	r7, [r4, #0]
   1179c:	4650      	mov	r0, sl
   1179e:	b003      	add	sp, #12
   117a0:	bc3c      	pop	{r2, r3, r4, r5}
   117a2:	4690      	mov	r8, r2
   117a4:	4699      	mov	r9, r3
   117a6:	46a2      	mov	sl, r4
   117a8:	46ab      	mov	fp, r5
   117aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117ac:	4653      	mov	r3, sl
   117ae:	9901      	ldr	r1, [sp, #4]
   117b0:	1bd8      	subs	r0, r3, r7
   117b2:	f7f4 fddb 	bl	636c <__udivsi3>
   117b6:	4682      	mov	sl, r0
   117b8:	e7f0      	b.n	1179c <_sfread_r+0x70>
   117ba:	46c0      	nop			; (mov r8, r8)

000117bc <__submore>:
   117bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   117be:	000c      	movs	r4, r1
   117c0:	0023      	movs	r3, r4
   117c2:	46c6      	mov	lr, r8
   117c4:	6b09      	ldr	r1, [r1, #48]	; 0x30
   117c6:	3340      	adds	r3, #64	; 0x40
   117c8:	b500      	push	{lr}
   117ca:	4299      	cmp	r1, r3
   117cc:	d015      	beq.n	117fa <__submore+0x3e>
   117ce:	6b66      	ldr	r6, [r4, #52]	; 0x34
   117d0:	0077      	lsls	r7, r6, #1
   117d2:	003a      	movs	r2, r7
   117d4:	f7fe fa9e 	bl	fd14 <_realloc_r>
   117d8:	1e05      	subs	r5, r0, #0
   117da:	d028      	beq.n	1182e <__submore+0x72>
   117dc:	1983      	adds	r3, r0, r6
   117de:	4698      	mov	r8, r3
   117e0:	0001      	movs	r1, r0
   117e2:	0032      	movs	r2, r6
   117e4:	0018      	movs	r0, r3
   117e6:	f7f7 f835 	bl	8854 <memcpy>
   117ea:	4643      	mov	r3, r8
   117ec:	2000      	movs	r0, #0
   117ee:	6023      	str	r3, [r4, #0]
   117f0:	6325      	str	r5, [r4, #48]	; 0x30
   117f2:	6367      	str	r7, [r4, #52]	; 0x34
   117f4:	bc04      	pop	{r2}
   117f6:	4690      	mov	r8, r2
   117f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   117fa:	2580      	movs	r5, #128	; 0x80
   117fc:	00ed      	lsls	r5, r5, #3
   117fe:	0029      	movs	r1, r5
   11800:	f7fd fa2a 	bl	ec58 <_malloc_r>
   11804:	2800      	cmp	r0, #0
   11806:	d012      	beq.n	1182e <__submore+0x72>
   11808:	2342      	movs	r3, #66	; 0x42
   1180a:	6320      	str	r0, [r4, #48]	; 0x30
   1180c:	6365      	str	r5, [r4, #52]	; 0x34
   1180e:	5ce2      	ldrb	r2, [r4, r3]
   11810:	4b08      	ldr	r3, [pc, #32]	; (11834 <__submore+0x78>)
   11812:	54c2      	strb	r2, [r0, r3]
   11814:	2341      	movs	r3, #65	; 0x41
   11816:	5ce2      	ldrb	r2, [r4, r3]
   11818:	4b07      	ldr	r3, [pc, #28]	; (11838 <__submore+0x7c>)
   1181a:	54c2      	strb	r2, [r0, r3]
   1181c:	2340      	movs	r3, #64	; 0x40
   1181e:	5ce2      	ldrb	r2, [r4, r3]
   11820:	4b06      	ldr	r3, [pc, #24]	; (1183c <__submore+0x80>)
   11822:	469c      	mov	ip, r3
   11824:	54c2      	strb	r2, [r0, r3]
   11826:	4460      	add	r0, ip
   11828:	6020      	str	r0, [r4, #0]
   1182a:	2000      	movs	r0, #0
   1182c:	e7e2      	b.n	117f4 <__submore+0x38>
   1182e:	2001      	movs	r0, #1
   11830:	4240      	negs	r0, r0
   11832:	e7df      	b.n	117f4 <__submore+0x38>
   11834:	000003ff 	.word	0x000003ff
   11838:	000003fe 	.word	0x000003fe
   1183c:	000003fd 	.word	0x000003fd

00011840 <__sprint_r.part.0>:
   11840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11842:	464e      	mov	r6, r9
   11844:	4645      	mov	r5, r8
   11846:	46de      	mov	lr, fp
   11848:	4657      	mov	r7, sl
   1184a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1184c:	b5e0      	push	{r5, r6, r7, lr}
   1184e:	4680      	mov	r8, r0
   11850:	000e      	movs	r6, r1
   11852:	4691      	mov	r9, r2
   11854:	049b      	lsls	r3, r3, #18
   11856:	d531      	bpl.n	118bc <__sprint_r.part.0+0x7c>
   11858:	6813      	ldr	r3, [r2, #0]
   1185a:	469a      	mov	sl, r3
   1185c:	6893      	ldr	r3, [r2, #8]
   1185e:	2b00      	cmp	r3, #0
   11860:	d02a      	beq.n	118b8 <__sprint_r.part.0+0x78>
   11862:	4652      	mov	r2, sl
   11864:	6852      	ldr	r2, [r2, #4]
   11866:	2500      	movs	r5, #0
   11868:	4693      	mov	fp, r2
   1186a:	0897      	lsrs	r7, r2, #2
   1186c:	4652      	mov	r2, sl
   1186e:	6814      	ldr	r4, [r2, #0]
   11870:	d104      	bne.n	1187c <__sprint_r.part.0+0x3c>
   11872:	e016      	b.n	118a2 <__sprint_r.part.0+0x62>
   11874:	3501      	adds	r5, #1
   11876:	3404      	adds	r4, #4
   11878:	42af      	cmp	r7, r5
   1187a:	d010      	beq.n	1189e <__sprint_r.part.0+0x5e>
   1187c:	0032      	movs	r2, r6
   1187e:	6821      	ldr	r1, [r4, #0]
   11880:	4640      	mov	r0, r8
   11882:	f000 f98f 	bl	11ba4 <_fputwc_r>
   11886:	1c43      	adds	r3, r0, #1
   11888:	d1f4      	bne.n	11874 <__sprint_r.part.0+0x34>
   1188a:	464a      	mov	r2, r9
   1188c:	2300      	movs	r3, #0
   1188e:	6093      	str	r3, [r2, #8]
   11890:	6053      	str	r3, [r2, #4]
   11892:	bc3c      	pop	{r2, r3, r4, r5}
   11894:	4690      	mov	r8, r2
   11896:	4699      	mov	r9, r3
   11898:	46a2      	mov	sl, r4
   1189a:	46ab      	mov	fp, r5
   1189c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1189e:	464b      	mov	r3, r9
   118a0:	689b      	ldr	r3, [r3, #8]
   118a2:	465a      	mov	r2, fp
   118a4:	2103      	movs	r1, #3
   118a6:	438a      	bics	r2, r1
   118a8:	1a9b      	subs	r3, r3, r2
   118aa:	464a      	mov	r2, r9
   118ac:	6093      	str	r3, [r2, #8]
   118ae:	2208      	movs	r2, #8
   118b0:	4694      	mov	ip, r2
   118b2:	44e2      	add	sl, ip
   118b4:	2b00      	cmp	r3, #0
   118b6:	d1d4      	bne.n	11862 <__sprint_r.part.0+0x22>
   118b8:	2000      	movs	r0, #0
   118ba:	e7e6      	b.n	1188a <__sprint_r.part.0+0x4a>
   118bc:	f7fc ff52 	bl	e764 <__sfvwrite_r>
   118c0:	e7e3      	b.n	1188a <__sprint_r.part.0+0x4a>
   118c2:	46c0      	nop			; (mov r8, r8)

000118c4 <__sprint_r>:
   118c4:	6893      	ldr	r3, [r2, #8]
   118c6:	b510      	push	{r4, lr}
   118c8:	2b00      	cmp	r3, #0
   118ca:	d002      	beq.n	118d2 <__sprint_r+0xe>
   118cc:	f7ff ffb8 	bl	11840 <__sprint_r.part.0>
   118d0:	bd10      	pop	{r4, pc}
   118d2:	6053      	str	r3, [r2, #4]
   118d4:	2000      	movs	r0, #0
   118d6:	e7fb      	b.n	118d0 <__sprint_r+0xc>

000118d8 <__ascii_wctomb>:
   118d8:	2900      	cmp	r1, #0
   118da:	d004      	beq.n	118e6 <__ascii_wctomb+0xe>
   118dc:	2aff      	cmp	r2, #255	; 0xff
   118de:	d804      	bhi.n	118ea <__ascii_wctomb+0x12>
   118e0:	2001      	movs	r0, #1
   118e2:	700a      	strb	r2, [r1, #0]
   118e4:	4770      	bx	lr
   118e6:	2000      	movs	r0, #0
   118e8:	e7fc      	b.n	118e4 <__ascii_wctomb+0xc>
   118ea:	238a      	movs	r3, #138	; 0x8a
   118ec:	6003      	str	r3, [r0, #0]
   118ee:	2001      	movs	r0, #1
   118f0:	4240      	negs	r0, r0
   118f2:	e7f7      	b.n	118e4 <__ascii_wctomb+0xc>

000118f4 <__register_exitproc>:
   118f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   118f6:	464e      	mov	r6, r9
   118f8:	4645      	mov	r5, r8
   118fa:	46de      	mov	lr, fp
   118fc:	4657      	mov	r7, sl
   118fe:	b5e0      	push	{r5, r6, r7, lr}
   11900:	4d36      	ldr	r5, [pc, #216]	; (119dc <__register_exitproc+0xe8>)
   11902:	b083      	sub	sp, #12
   11904:	0006      	movs	r6, r0
   11906:	6828      	ldr	r0, [r5, #0]
   11908:	4698      	mov	r8, r3
   1190a:	000f      	movs	r7, r1
   1190c:	4691      	mov	r9, r2
   1190e:	f7fd f913 	bl	eb38 <__retarget_lock_acquire_recursive>
   11912:	4b33      	ldr	r3, [pc, #204]	; (119e0 <__register_exitproc+0xec>)
   11914:	681c      	ldr	r4, [r3, #0]
   11916:	23a4      	movs	r3, #164	; 0xa4
   11918:	005b      	lsls	r3, r3, #1
   1191a:	58e0      	ldr	r0, [r4, r3]
   1191c:	2800      	cmp	r0, #0
   1191e:	d052      	beq.n	119c6 <__register_exitproc+0xd2>
   11920:	6843      	ldr	r3, [r0, #4]
   11922:	2b1f      	cmp	r3, #31
   11924:	dc13      	bgt.n	1194e <__register_exitproc+0x5a>
   11926:	1c5a      	adds	r2, r3, #1
   11928:	9201      	str	r2, [sp, #4]
   1192a:	2e00      	cmp	r6, #0
   1192c:	d128      	bne.n	11980 <__register_exitproc+0x8c>
   1192e:	9a01      	ldr	r2, [sp, #4]
   11930:	3302      	adds	r3, #2
   11932:	009b      	lsls	r3, r3, #2
   11934:	6042      	str	r2, [r0, #4]
   11936:	501f      	str	r7, [r3, r0]
   11938:	6828      	ldr	r0, [r5, #0]
   1193a:	f7fd f8ff 	bl	eb3c <__retarget_lock_release_recursive>
   1193e:	2000      	movs	r0, #0
   11940:	b003      	add	sp, #12
   11942:	bc3c      	pop	{r2, r3, r4, r5}
   11944:	4690      	mov	r8, r2
   11946:	4699      	mov	r9, r3
   11948:	46a2      	mov	sl, r4
   1194a:	46ab      	mov	fp, r5
   1194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1194e:	4b25      	ldr	r3, [pc, #148]	; (119e4 <__register_exitproc+0xf0>)
   11950:	2b00      	cmp	r3, #0
   11952:	d03d      	beq.n	119d0 <__register_exitproc+0xdc>
   11954:	20c8      	movs	r0, #200	; 0xc8
   11956:	0040      	lsls	r0, r0, #1
   11958:	e000      	b.n	1195c <__register_exitproc+0x68>
   1195a:	bf00      	nop
   1195c:	2800      	cmp	r0, #0
   1195e:	d037      	beq.n	119d0 <__register_exitproc+0xdc>
   11960:	22a4      	movs	r2, #164	; 0xa4
   11962:	2300      	movs	r3, #0
   11964:	0052      	lsls	r2, r2, #1
   11966:	58a1      	ldr	r1, [r4, r2]
   11968:	6043      	str	r3, [r0, #4]
   1196a:	6001      	str	r1, [r0, #0]
   1196c:	50a0      	str	r0, [r4, r2]
   1196e:	3240      	adds	r2, #64	; 0x40
   11970:	5083      	str	r3, [r0, r2]
   11972:	3204      	adds	r2, #4
   11974:	5083      	str	r3, [r0, r2]
   11976:	3301      	adds	r3, #1
   11978:	9301      	str	r3, [sp, #4]
   1197a:	2300      	movs	r3, #0
   1197c:	2e00      	cmp	r6, #0
   1197e:	d0d6      	beq.n	1192e <__register_exitproc+0x3a>
   11980:	009a      	lsls	r2, r3, #2
   11982:	4692      	mov	sl, r2
   11984:	4482      	add	sl, r0
   11986:	464a      	mov	r2, r9
   11988:	2188      	movs	r1, #136	; 0x88
   1198a:	4654      	mov	r4, sl
   1198c:	5062      	str	r2, [r4, r1]
   1198e:	22c4      	movs	r2, #196	; 0xc4
   11990:	0052      	lsls	r2, r2, #1
   11992:	4691      	mov	r9, r2
   11994:	4481      	add	r9, r0
   11996:	464a      	mov	r2, r9
   11998:	3987      	subs	r1, #135	; 0x87
   1199a:	4099      	lsls	r1, r3
   1199c:	6812      	ldr	r2, [r2, #0]
   1199e:	468b      	mov	fp, r1
   119a0:	430a      	orrs	r2, r1
   119a2:	4694      	mov	ip, r2
   119a4:	464a      	mov	r2, r9
   119a6:	4661      	mov	r1, ip
   119a8:	6011      	str	r1, [r2, #0]
   119aa:	2284      	movs	r2, #132	; 0x84
   119ac:	4641      	mov	r1, r8
   119ae:	0052      	lsls	r2, r2, #1
   119b0:	50a1      	str	r1, [r4, r2]
   119b2:	2e02      	cmp	r6, #2
   119b4:	d1bb      	bne.n	1192e <__register_exitproc+0x3a>
   119b6:	0002      	movs	r2, r0
   119b8:	465c      	mov	r4, fp
   119ba:	328d      	adds	r2, #141	; 0x8d
   119bc:	32ff      	adds	r2, #255	; 0xff
   119be:	6811      	ldr	r1, [r2, #0]
   119c0:	430c      	orrs	r4, r1
   119c2:	6014      	str	r4, [r2, #0]
   119c4:	e7b3      	b.n	1192e <__register_exitproc+0x3a>
   119c6:	0020      	movs	r0, r4
   119c8:	304d      	adds	r0, #77	; 0x4d
   119ca:	30ff      	adds	r0, #255	; 0xff
   119cc:	50e0      	str	r0, [r4, r3]
   119ce:	e7a7      	b.n	11920 <__register_exitproc+0x2c>
   119d0:	6828      	ldr	r0, [r5, #0]
   119d2:	f7fd f8b3 	bl	eb3c <__retarget_lock_release_recursive>
   119d6:	2001      	movs	r0, #1
   119d8:	4240      	negs	r0, r0
   119da:	e7b1      	b.n	11940 <__register_exitproc+0x4c>
   119dc:	200004b0 	.word	0x200004b0
   119e0:	000150f4 	.word	0x000150f4
   119e4:	00000000 	.word	0x00000000

000119e8 <_calloc_r>:
   119e8:	b510      	push	{r4, lr}
   119ea:	4351      	muls	r1, r2
   119ec:	f7fd f934 	bl	ec58 <_malloc_r>
   119f0:	1e04      	subs	r4, r0, #0
   119f2:	d01c      	beq.n	11a2e <_calloc_r+0x46>
   119f4:	0003      	movs	r3, r0
   119f6:	3b08      	subs	r3, #8
   119f8:	685a      	ldr	r2, [r3, #4]
   119fa:	2303      	movs	r3, #3
   119fc:	439a      	bics	r2, r3
   119fe:	3a04      	subs	r2, #4
   11a00:	2a24      	cmp	r2, #36	; 0x24
   11a02:	d816      	bhi.n	11a32 <_calloc_r+0x4a>
   11a04:	0003      	movs	r3, r0
   11a06:	2a13      	cmp	r2, #19
   11a08:	d90d      	bls.n	11a26 <_calloc_r+0x3e>
   11a0a:	2100      	movs	r1, #0
   11a0c:	3308      	adds	r3, #8
   11a0e:	6001      	str	r1, [r0, #0]
   11a10:	6041      	str	r1, [r0, #4]
   11a12:	2a1b      	cmp	r2, #27
   11a14:	d907      	bls.n	11a26 <_calloc_r+0x3e>
   11a16:	6081      	str	r1, [r0, #8]
   11a18:	60c1      	str	r1, [r0, #12]
   11a1a:	2a24      	cmp	r2, #36	; 0x24
   11a1c:	d10d      	bne.n	11a3a <_calloc_r+0x52>
   11a1e:	0003      	movs	r3, r0
   11a20:	6101      	str	r1, [r0, #16]
   11a22:	3318      	adds	r3, #24
   11a24:	6141      	str	r1, [r0, #20]
   11a26:	2200      	movs	r2, #0
   11a28:	601a      	str	r2, [r3, #0]
   11a2a:	605a      	str	r2, [r3, #4]
   11a2c:	609a      	str	r2, [r3, #8]
   11a2e:	0020      	movs	r0, r4
   11a30:	bd10      	pop	{r4, pc}
   11a32:	2100      	movs	r1, #0
   11a34:	f7f6 ff50 	bl	88d8 <memset>
   11a38:	e7f9      	b.n	11a2e <_calloc_r+0x46>
   11a3a:	0003      	movs	r3, r0
   11a3c:	3310      	adds	r3, #16
   11a3e:	e7f2      	b.n	11a26 <_calloc_r+0x3e>

00011a40 <_fclose_r>:
   11a40:	b570      	push	{r4, r5, r6, lr}
   11a42:	0005      	movs	r5, r0
   11a44:	1e0c      	subs	r4, r1, #0
   11a46:	d040      	beq.n	11aca <_fclose_r+0x8a>
   11a48:	2800      	cmp	r0, #0
   11a4a:	d002      	beq.n	11a52 <_fclose_r+0x12>
   11a4c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11a4e:	2b00      	cmp	r3, #0
   11a50:	d03e      	beq.n	11ad0 <_fclose_r+0x90>
   11a52:	2601      	movs	r6, #1
   11a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11a56:	4233      	tst	r3, r6
   11a58:	d133      	bne.n	11ac2 <_fclose_r+0x82>
   11a5a:	89a3      	ldrh	r3, [r4, #12]
   11a5c:	059b      	lsls	r3, r3, #22
   11a5e:	d543      	bpl.n	11ae8 <_fclose_r+0xa8>
   11a60:	0021      	movs	r1, r4
   11a62:	0028      	movs	r0, r5
   11a64:	f7fc fbf4 	bl	e250 <__sflush_r>
   11a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11a6a:	0006      	movs	r6, r0
   11a6c:	2b00      	cmp	r3, #0
   11a6e:	d004      	beq.n	11a7a <_fclose_r+0x3a>
   11a70:	69e1      	ldr	r1, [r4, #28]
   11a72:	0028      	movs	r0, r5
   11a74:	4798      	blx	r3
   11a76:	2800      	cmp	r0, #0
   11a78:	db44      	blt.n	11b04 <_fclose_r+0xc4>
   11a7a:	89a3      	ldrh	r3, [r4, #12]
   11a7c:	061b      	lsls	r3, r3, #24
   11a7e:	d42a      	bmi.n	11ad6 <_fclose_r+0x96>
   11a80:	6b21      	ldr	r1, [r4, #48]	; 0x30
   11a82:	2900      	cmp	r1, #0
   11a84:	d008      	beq.n	11a98 <_fclose_r+0x58>
   11a86:	0023      	movs	r3, r4
   11a88:	3340      	adds	r3, #64	; 0x40
   11a8a:	4299      	cmp	r1, r3
   11a8c:	d002      	beq.n	11a94 <_fclose_r+0x54>
   11a8e:	0028      	movs	r0, r5
   11a90:	f7fc fd8a 	bl	e5a8 <_free_r>
   11a94:	2300      	movs	r3, #0
   11a96:	6323      	str	r3, [r4, #48]	; 0x30
   11a98:	6c61      	ldr	r1, [r4, #68]	; 0x44
   11a9a:	2900      	cmp	r1, #0
   11a9c:	d004      	beq.n	11aa8 <_fclose_r+0x68>
   11a9e:	0028      	movs	r0, r5
   11aa0:	f7fc fd82 	bl	e5a8 <_free_r>
   11aa4:	2300      	movs	r3, #0
   11aa6:	6463      	str	r3, [r4, #68]	; 0x44
   11aa8:	f7fc fd04 	bl	e4b4 <__sfp_lock_acquire>
   11aac:	2300      	movs	r3, #0
   11aae:	81a3      	strh	r3, [r4, #12]
   11ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11ab2:	07db      	lsls	r3, r3, #31
   11ab4:	d514      	bpl.n	11ae0 <_fclose_r+0xa0>
   11ab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11ab8:	f7fd f83c 	bl	eb34 <__retarget_lock_close_recursive>
   11abc:	f7fc fd02 	bl	e4c4 <__sfp_lock_release>
   11ac0:	e004      	b.n	11acc <_fclose_r+0x8c>
   11ac2:	220c      	movs	r2, #12
   11ac4:	5ea3      	ldrsh	r3, [r4, r2]
   11ac6:	2b00      	cmp	r3, #0
   11ac8:	d1ca      	bne.n	11a60 <_fclose_r+0x20>
   11aca:	2600      	movs	r6, #0
   11acc:	0030      	movs	r0, r6
   11ace:	bd70      	pop	{r4, r5, r6, pc}
   11ad0:	f7fc fcc0 	bl	e454 <__sinit>
   11ad4:	e7bd      	b.n	11a52 <_fclose_r+0x12>
   11ad6:	6921      	ldr	r1, [r4, #16]
   11ad8:	0028      	movs	r0, r5
   11ada:	f7fc fd65 	bl	e5a8 <_free_r>
   11ade:	e7cf      	b.n	11a80 <_fclose_r+0x40>
   11ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11ae2:	f7fd f82b 	bl	eb3c <__retarget_lock_release_recursive>
   11ae6:	e7e6      	b.n	11ab6 <_fclose_r+0x76>
   11ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11aea:	f7fd f825 	bl	eb38 <__retarget_lock_acquire_recursive>
   11aee:	220c      	movs	r2, #12
   11af0:	5ea3      	ldrsh	r3, [r4, r2]
   11af2:	2b00      	cmp	r3, #0
   11af4:	d1b4      	bne.n	11a60 <_fclose_r+0x20>
   11af6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11af8:	401e      	ands	r6, r3
   11afa:	d1e6      	bne.n	11aca <_fclose_r+0x8a>
   11afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11afe:	f7fd f81d 	bl	eb3c <__retarget_lock_release_recursive>
   11b02:	e7e3      	b.n	11acc <_fclose_r+0x8c>
   11b04:	2601      	movs	r6, #1
   11b06:	4276      	negs	r6, r6
   11b08:	e7b7      	b.n	11a7a <_fclose_r+0x3a>
   11b0a:	46c0      	nop			; (mov r8, r8)

00011b0c <__fputwc>:
   11b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b0e:	46ce      	mov	lr, r9
   11b10:	4647      	mov	r7, r8
   11b12:	b580      	push	{r7, lr}
   11b14:	b085      	sub	sp, #20
   11b16:	4680      	mov	r8, r0
   11b18:	4689      	mov	r9, r1
   11b1a:	0014      	movs	r4, r2
   11b1c:	f7fc ffd6 	bl	eacc <__locale_mb_cur_max>
   11b20:	2801      	cmp	r0, #1
   11b22:	d031      	beq.n	11b88 <__fputwc+0x7c>
   11b24:	0023      	movs	r3, r4
   11b26:	af03      	add	r7, sp, #12
   11b28:	335c      	adds	r3, #92	; 0x5c
   11b2a:	464a      	mov	r2, r9
   11b2c:	0039      	movs	r1, r7
   11b2e:	4640      	mov	r0, r8
   11b30:	f000 fcaa 	bl	12488 <_wcrtomb_r>
   11b34:	0006      	movs	r6, r0
   11b36:	1c43      	adds	r3, r0, #1
   11b38:	d021      	beq.n	11b7e <__fputwc+0x72>
   11b3a:	2800      	cmp	r0, #0
   11b3c:	d030      	beq.n	11ba0 <__fputwc+0x94>
   11b3e:	7839      	ldrb	r1, [r7, #0]
   11b40:	2500      	movs	r5, #0
   11b42:	e007      	b.n	11b54 <__fputwc+0x48>
   11b44:	6823      	ldr	r3, [r4, #0]
   11b46:	1c5a      	adds	r2, r3, #1
   11b48:	6022      	str	r2, [r4, #0]
   11b4a:	7019      	strb	r1, [r3, #0]
   11b4c:	3501      	adds	r5, #1
   11b4e:	42b5      	cmp	r5, r6
   11b50:	d226      	bcs.n	11ba0 <__fputwc+0x94>
   11b52:	5d79      	ldrb	r1, [r7, r5]
   11b54:	68a3      	ldr	r3, [r4, #8]
   11b56:	3b01      	subs	r3, #1
   11b58:	60a3      	str	r3, [r4, #8]
   11b5a:	2b00      	cmp	r3, #0
   11b5c:	daf2      	bge.n	11b44 <__fputwc+0x38>
   11b5e:	69a2      	ldr	r2, [r4, #24]
   11b60:	4293      	cmp	r3, r2
   11b62:	db01      	blt.n	11b68 <__fputwc+0x5c>
   11b64:	290a      	cmp	r1, #10
   11b66:	d1ed      	bne.n	11b44 <__fputwc+0x38>
   11b68:	0022      	movs	r2, r4
   11b6a:	4640      	mov	r0, r8
   11b6c:	f7fb fa00 	bl	cf70 <__swbuf_r>
   11b70:	1c43      	adds	r3, r0, #1
   11b72:	d1eb      	bne.n	11b4c <__fputwc+0x40>
   11b74:	b005      	add	sp, #20
   11b76:	bc0c      	pop	{r2, r3}
   11b78:	4690      	mov	r8, r2
   11b7a:	4699      	mov	r9, r3
   11b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b7e:	2240      	movs	r2, #64	; 0x40
   11b80:	89a3      	ldrh	r3, [r4, #12]
   11b82:	4313      	orrs	r3, r2
   11b84:	81a3      	strh	r3, [r4, #12]
   11b86:	e7f5      	b.n	11b74 <__fputwc+0x68>
   11b88:	464b      	mov	r3, r9
   11b8a:	3b01      	subs	r3, #1
   11b8c:	2bfe      	cmp	r3, #254	; 0xfe
   11b8e:	d8c9      	bhi.n	11b24 <__fputwc+0x18>
   11b90:	466a      	mov	r2, sp
   11b92:	464b      	mov	r3, r9
   11b94:	71d3      	strb	r3, [r2, #7]
   11b96:	79d1      	ldrb	r1, [r2, #7]
   11b98:	af03      	add	r7, sp, #12
   11b9a:	7039      	strb	r1, [r7, #0]
   11b9c:	2601      	movs	r6, #1
   11b9e:	e7cf      	b.n	11b40 <__fputwc+0x34>
   11ba0:	4648      	mov	r0, r9
   11ba2:	e7e7      	b.n	11b74 <__fputwc+0x68>

00011ba4 <_fputwc_r>:
   11ba4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11ba6:	b570      	push	{r4, r5, r6, lr}
   11ba8:	0005      	movs	r5, r0
   11baa:	000e      	movs	r6, r1
   11bac:	0014      	movs	r4, r2
   11bae:	07db      	lsls	r3, r3, #31
   11bb0:	d41e      	bmi.n	11bf0 <_fputwc_r+0x4c>
   11bb2:	230c      	movs	r3, #12
   11bb4:	5ed2      	ldrsh	r2, [r2, r3]
   11bb6:	b291      	uxth	r1, r2
   11bb8:	058b      	lsls	r3, r1, #22
   11bba:	d516      	bpl.n	11bea <_fputwc_r+0x46>
   11bbc:	2380      	movs	r3, #128	; 0x80
   11bbe:	019b      	lsls	r3, r3, #6
   11bc0:	4219      	tst	r1, r3
   11bc2:	d104      	bne.n	11bce <_fputwc_r+0x2a>
   11bc4:	431a      	orrs	r2, r3
   11bc6:	81a2      	strh	r2, [r4, #12]
   11bc8:	6e62      	ldr	r2, [r4, #100]	; 0x64
   11bca:	4313      	orrs	r3, r2
   11bcc:	6663      	str	r3, [r4, #100]	; 0x64
   11bce:	0028      	movs	r0, r5
   11bd0:	0022      	movs	r2, r4
   11bd2:	0031      	movs	r1, r6
   11bd4:	f7ff ff9a 	bl	11b0c <__fputwc>
   11bd8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   11bda:	0005      	movs	r5, r0
   11bdc:	07db      	lsls	r3, r3, #31
   11bde:	d402      	bmi.n	11be6 <_fputwc_r+0x42>
   11be0:	89a3      	ldrh	r3, [r4, #12]
   11be2:	059b      	lsls	r3, r3, #22
   11be4:	d508      	bpl.n	11bf8 <_fputwc_r+0x54>
   11be6:	0028      	movs	r0, r5
   11be8:	bd70      	pop	{r4, r5, r6, pc}
   11bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11bec:	f7fc ffa4 	bl	eb38 <__retarget_lock_acquire_recursive>
   11bf0:	230c      	movs	r3, #12
   11bf2:	5ee2      	ldrsh	r2, [r4, r3]
   11bf4:	b291      	uxth	r1, r2
   11bf6:	e7e1      	b.n	11bbc <_fputwc_r+0x18>
   11bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11bfa:	f7fc ff9f 	bl	eb3c <__retarget_lock_release_recursive>
   11bfe:	e7f2      	b.n	11be6 <_fputwc_r+0x42>

00011c00 <_fstat_r>:
   11c00:	2300      	movs	r3, #0
   11c02:	b570      	push	{r4, r5, r6, lr}
   11c04:	4c07      	ldr	r4, [pc, #28]	; (11c24 <_fstat_r+0x24>)
   11c06:	0005      	movs	r5, r0
   11c08:	0008      	movs	r0, r1
   11c0a:	0011      	movs	r1, r2
   11c0c:	6023      	str	r3, [r4, #0]
   11c0e:	f7ef f80e 	bl	c2e <_fstat>
   11c12:	1c43      	adds	r3, r0, #1
   11c14:	d000      	beq.n	11c18 <_fstat_r+0x18>
   11c16:	bd70      	pop	{r4, r5, r6, pc}
   11c18:	6823      	ldr	r3, [r4, #0]
   11c1a:	2b00      	cmp	r3, #0
   11c1c:	d0fb      	beq.n	11c16 <_fstat_r+0x16>
   11c1e:	602b      	str	r3, [r5, #0]
   11c20:	e7f9      	b.n	11c16 <_fstat_r+0x16>
   11c22:	46c0      	nop			; (mov r8, r8)
   11c24:	200018dc 	.word	0x200018dc

00011c28 <rshift>:
   11c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   11c2a:	46ce      	mov	lr, r9
   11c2c:	4647      	mov	r7, r8
   11c2e:	0005      	movs	r5, r0
   11c30:	6902      	ldr	r2, [r0, #16]
   11c32:	b580      	push	{r7, lr}
   11c34:	3514      	adds	r5, #20
   11c36:	114c      	asrs	r4, r1, #5
   11c38:	4294      	cmp	r4, r2
   11c3a:	da2c      	bge.n	11c96 <rshift+0x6e>
   11c3c:	0092      	lsls	r2, r2, #2
   11c3e:	18af      	adds	r7, r5, r2
   11c40:	231f      	movs	r3, #31
   11c42:	00a2      	lsls	r2, r4, #2
   11c44:	4691      	mov	r9, r2
   11c46:	400b      	ands	r3, r1
   11c48:	44a9      	add	r9, r5
   11c4a:	469c      	mov	ip, r3
   11c4c:	2b00      	cmp	r3, #0
   11c4e:	d02a      	beq.n	11ca6 <rshift+0x7e>
   11c50:	4662      	mov	r2, ip
   11c52:	2320      	movs	r3, #32
   11c54:	1a9b      	subs	r3, r3, r2
   11c56:	4698      	mov	r8, r3
   11c58:	464b      	mov	r3, r9
   11c5a:	681e      	ldr	r6, [r3, #0]
   11c5c:	1d1c      	adds	r4, r3, #4
   11c5e:	40d6      	lsrs	r6, r2
   11c60:	42a7      	cmp	r7, r4
   11c62:	d935      	bls.n	11cd0 <rshift+0xa8>
   11c64:	0029      	movs	r1, r5
   11c66:	4642      	mov	r2, r8
   11c68:	6823      	ldr	r3, [r4, #0]
   11c6a:	4093      	lsls	r3, r2
   11c6c:	4333      	orrs	r3, r6
   11c6e:	c108      	stmia	r1!, {r3}
   11c70:	4663      	mov	r3, ip
   11c72:	cc40      	ldmia	r4!, {r6}
   11c74:	40de      	lsrs	r6, r3
   11c76:	42a7      	cmp	r7, r4
   11c78:	d8f5      	bhi.n	11c66 <rshift+0x3e>
   11c7a:	464b      	mov	r3, r9
   11c7c:	1afa      	subs	r2, r7, r3
   11c7e:	2303      	movs	r3, #3
   11c80:	3a05      	subs	r2, #5
   11c82:	439a      	bics	r2, r3
   11c84:	3204      	adds	r2, #4
   11c86:	18aa      	adds	r2, r5, r2
   11c88:	6016      	str	r6, [r2, #0]
   11c8a:	2e00      	cmp	r6, #0
   11c8c:	d01d      	beq.n	11cca <rshift+0xa2>
   11c8e:	1d13      	adds	r3, r2, #4
   11c90:	1b5b      	subs	r3, r3, r5
   11c92:	109b      	asrs	r3, r3, #2
   11c94:	e015      	b.n	11cc2 <rshift+0x9a>
   11c96:	2300      	movs	r3, #0
   11c98:	6103      	str	r3, [r0, #16]
   11c9a:	2300      	movs	r3, #0
   11c9c:	6143      	str	r3, [r0, #20]
   11c9e:	bc0c      	pop	{r2, r3}
   11ca0:	4690      	mov	r8, r2
   11ca2:	4699      	mov	r9, r3
   11ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11ca6:	4649      	mov	r1, r9
   11ca8:	454f      	cmp	r7, r9
   11caa:	d9f4      	bls.n	11c96 <rshift+0x6e>
   11cac:	c910      	ldmia	r1!, {r4}
   11cae:	c510      	stmia	r5!, {r4}
   11cb0:	428f      	cmp	r7, r1
   11cb2:	d8fb      	bhi.n	11cac <rshift+0x84>
   11cb4:	464b      	mov	r3, r9
   11cb6:	43db      	mvns	r3, r3
   11cb8:	2203      	movs	r2, #3
   11cba:	19db      	adds	r3, r3, r7
   11cbc:	4393      	bics	r3, r2
   11cbe:	3304      	adds	r3, #4
   11cc0:	109b      	asrs	r3, r3, #2
   11cc2:	6103      	str	r3, [r0, #16]
   11cc4:	2b00      	cmp	r3, #0
   11cc6:	d1ea      	bne.n	11c9e <rshift+0x76>
   11cc8:	e7e7      	b.n	11c9a <rshift+0x72>
   11cca:	1b53      	subs	r3, r2, r5
   11ccc:	109b      	asrs	r3, r3, #2
   11cce:	e7f8      	b.n	11cc2 <rshift+0x9a>
   11cd0:	002a      	movs	r2, r5
   11cd2:	e7d9      	b.n	11c88 <rshift+0x60>

00011cd4 <__gethex>:
   11cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   11cd6:	46de      	mov	lr, fp
   11cd8:	464e      	mov	r6, r9
   11cda:	4657      	mov	r7, sl
   11cdc:	4645      	mov	r5, r8
   11cde:	b5e0      	push	{r5, r6, r7, lr}
   11ce0:	b08b      	sub	sp, #44	; 0x2c
   11ce2:	9006      	str	r0, [sp, #24]
   11ce4:	9816      	ldr	r0, [sp, #88]	; 0x58
   11ce6:	4689      	mov	r9, r1
   11ce8:	4693      	mov	fp, r2
   11cea:	9309      	str	r3, [sp, #36]	; 0x24
   11cec:	f7fc ff10 	bl	eb10 <__localeconv_l>
   11cf0:	6803      	ldr	r3, [r0, #0]
   11cf2:	0018      	movs	r0, r3
   11cf4:	001c      	movs	r4, r3
   11cf6:	9304      	str	r3, [sp, #16]
   11cf8:	f7f7 f85c 	bl	8db4 <strlen>
   11cfc:	46a4      	mov	ip, r4
   11cfe:	0002      	movs	r2, r0
   11d00:	4462      	add	r2, ip
   11d02:	0013      	movs	r3, r2
   11d04:	3b01      	subs	r3, #1
   11d06:	781b      	ldrb	r3, [r3, #0]
   11d08:	9002      	str	r0, [sp, #8]
   11d0a:	9301      	str	r3, [sp, #4]
   11d0c:	464b      	mov	r3, r9
   11d0e:	681c      	ldr	r4, [r3, #0]
   11d10:	78a2      	ldrb	r2, [r4, #2]
   11d12:	2a30      	cmp	r2, #48	; 0x30
   11d14:	d000      	beq.n	11d18 <__gethex+0x44>
   11d16:	e1c4      	b.n	120a2 <__gethex+0x3ce>
   11d18:	2102      	movs	r1, #2
   11d1a:	4249      	negs	r1, r1
   11d1c:	1ce3      	adds	r3, r4, #3
   11d1e:	1b09      	subs	r1, r1, r4
   11d20:	18c8      	adds	r0, r1, r3
   11d22:	001c      	movs	r4, r3
   11d24:	3301      	adds	r3, #1
   11d26:	1e5a      	subs	r2, r3, #1
   11d28:	7812      	ldrb	r2, [r2, #0]
   11d2a:	2a30      	cmp	r2, #48	; 0x30
   11d2c:	d0f8      	beq.n	11d20 <__gethex+0x4c>
   11d2e:	4680      	mov	r8, r0
   11d30:	4fbf      	ldr	r7, [pc, #764]	; (12030 <__gethex+0x35c>)
   11d32:	5cbb      	ldrb	r3, [r7, r2]
   11d34:	2b00      	cmp	r3, #0
   11d36:	d100      	bne.n	11d3a <__gethex+0x66>
   11d38:	e0b0      	b.n	11e9c <__gethex+0x1c8>
   11d3a:	2200      	movs	r2, #0
   11d3c:	2600      	movs	r6, #0
   11d3e:	4692      	mov	sl, r2
   11d40:	7823      	ldrb	r3, [r4, #0]
   11d42:	5cfb      	ldrb	r3, [r7, r3]
   11d44:	0025      	movs	r5, r4
   11d46:	2b00      	cmp	r3, #0
   11d48:	d004      	beq.n	11d54 <__gethex+0x80>
   11d4a:	3501      	adds	r5, #1
   11d4c:	782b      	ldrb	r3, [r5, #0]
   11d4e:	5cfb      	ldrb	r3, [r7, r3]
   11d50:	2b00      	cmp	r3, #0
   11d52:	d1fa      	bne.n	11d4a <__gethex+0x76>
   11d54:	9a02      	ldr	r2, [sp, #8]
   11d56:	9904      	ldr	r1, [sp, #16]
   11d58:	0028      	movs	r0, r5
   11d5a:	f000 fb4b 	bl	123f4 <strncmp>
   11d5e:	2800      	cmp	r0, #0
   11d60:	d100      	bne.n	11d64 <__gethex+0x90>
   11d62:	e08b      	b.n	11e7c <__gethex+0x1a8>
   11d64:	782b      	ldrb	r3, [r5, #0]
   11d66:	2e00      	cmp	r6, #0
   11d68:	d100      	bne.n	11d6c <__gethex+0x98>
   11d6a:	e189      	b.n	12080 <__gethex+0x3ac>
   11d6c:	1b76      	subs	r6, r6, r5
   11d6e:	00b2      	lsls	r2, r6, #2
   11d70:	9203      	str	r2, [sp, #12]
   11d72:	2b50      	cmp	r3, #80	; 0x50
   11d74:	d100      	bne.n	11d78 <__gethex+0xa4>
   11d76:	e0b4      	b.n	11ee2 <__gethex+0x20e>
   11d78:	002e      	movs	r6, r5
   11d7a:	2b70      	cmp	r3, #112	; 0x70
   11d7c:	d100      	bne.n	11d80 <__gethex+0xac>
   11d7e:	e0b0      	b.n	11ee2 <__gethex+0x20e>
   11d80:	464b      	mov	r3, r9
   11d82:	601d      	str	r5, [r3, #0]
   11d84:	4653      	mov	r3, sl
   11d86:	2b00      	cmp	r3, #0
   11d88:	d000      	beq.n	11d8c <__gethex+0xb8>
   11d8a:	e098      	b.n	11ebe <__gethex+0x1ea>
   11d8c:	1b33      	subs	r3, r6, r4
   11d8e:	3b01      	subs	r3, #1
   11d90:	2100      	movs	r1, #0
   11d92:	2b07      	cmp	r3, #7
   11d94:	dd03      	ble.n	11d9e <__gethex+0xca>
   11d96:	3101      	adds	r1, #1
   11d98:	105b      	asrs	r3, r3, #1
   11d9a:	2b07      	cmp	r3, #7
   11d9c:	dcfb      	bgt.n	11d96 <__gethex+0xc2>
   11d9e:	9806      	ldr	r0, [sp, #24]
   11da0:	f7fd faf6 	bl	f390 <_Balloc>
   11da4:	0003      	movs	r3, r0
   11da6:	3314      	adds	r3, #20
   11da8:	9005      	str	r0, [sp, #20]
   11daa:	9308      	str	r3, [sp, #32]
   11dac:	42b4      	cmp	r4, r6
   11dae:	d300      	bcc.n	11db2 <__gethex+0xde>
   11db0:	e1c3      	b.n	1213a <__gethex+0x466>
   11db2:	469a      	mov	sl, r3
   11db4:	2300      	movs	r3, #0
   11db6:	9a02      	ldr	r2, [sp, #8]
   11db8:	4698      	mov	r8, r3
   11dba:	4699      	mov	r9, r3
   11dbc:	3301      	adds	r3, #1
   11dbe:	1a9b      	subs	r3, r3, r2
   11dc0:	9307      	str	r3, [sp, #28]
   11dc2:	0023      	movs	r3, r4
   11dc4:	4644      	mov	r4, r8
   11dc6:	4698      	mov	r8, r3
   11dc8:	e00e      	b.n	11de8 <__gethex+0x114>
   11dca:	2c20      	cmp	r4, #32
   11dcc:	d05b      	beq.n	11e86 <__gethex+0x1b2>
   11dce:	0022      	movs	r2, r4
   11dd0:	3404      	adds	r4, #4
   11dd2:	210f      	movs	r1, #15
   11dd4:	782b      	ldrb	r3, [r5, #0]
   11dd6:	002e      	movs	r6, r5
   11dd8:	5cfb      	ldrb	r3, [r7, r3]
   11dda:	400b      	ands	r3, r1
   11ddc:	4093      	lsls	r3, r2
   11dde:	464a      	mov	r2, r9
   11de0:	431a      	orrs	r2, r3
   11de2:	4691      	mov	r9, r2
   11de4:	4546      	cmp	r6, r8
   11de6:	d911      	bls.n	11e0c <__gethex+0x138>
   11de8:	1e75      	subs	r5, r6, #1
   11dea:	782b      	ldrb	r3, [r5, #0]
   11dec:	9a01      	ldr	r2, [sp, #4]
   11dee:	4293      	cmp	r3, r2
   11df0:	d1eb      	bne.n	11dca <__gethex+0xf6>
   11df2:	9b07      	ldr	r3, [sp, #28]
   11df4:	18ee      	adds	r6, r5, r3
   11df6:	4546      	cmp	r6, r8
   11df8:	d3e7      	bcc.n	11dca <__gethex+0xf6>
   11dfa:	9a02      	ldr	r2, [sp, #8]
   11dfc:	9904      	ldr	r1, [sp, #16]
   11dfe:	0030      	movs	r0, r6
   11e00:	f000 faf8 	bl	123f4 <strncmp>
   11e04:	2800      	cmp	r0, #0
   11e06:	d1e0      	bne.n	11dca <__gethex+0xf6>
   11e08:	4546      	cmp	r6, r8
   11e0a:	d8ed      	bhi.n	11de8 <__gethex+0x114>
   11e0c:	4653      	mov	r3, sl
   11e0e:	464a      	mov	r2, r9
   11e10:	c304      	stmia	r3!, {r2}
   11e12:	9a08      	ldr	r2, [sp, #32]
   11e14:	4648      	mov	r0, r9
   11e16:	1a9b      	subs	r3, r3, r2
   11e18:	9a05      	ldr	r2, [sp, #20]
   11e1a:	109b      	asrs	r3, r3, #2
   11e1c:	6113      	str	r3, [r2, #16]
   11e1e:	015c      	lsls	r4, r3, #5
   11e20:	f7fd fb78 	bl	f514 <__hi0bits>
   11e24:	465b      	mov	r3, fp
   11e26:	681d      	ldr	r5, [r3, #0]
   11e28:	1a24      	subs	r4, r4, r0
   11e2a:	42ac      	cmp	r4, r5
   11e2c:	dd00      	ble.n	11e30 <__gethex+0x15c>
   11e2e:	e101      	b.n	12034 <__gethex+0x360>
   11e30:	2600      	movs	r6, #0
   11e32:	42ac      	cmp	r4, r5
   11e34:	da00      	bge.n	11e38 <__gethex+0x164>
   11e36:	e126      	b.n	12086 <__gethex+0x3b2>
   11e38:	465b      	mov	r3, fp
   11e3a:	9a03      	ldr	r2, [sp, #12]
   11e3c:	689b      	ldr	r3, [r3, #8]
   11e3e:	429a      	cmp	r2, r3
   11e40:	dd00      	ble.n	11e44 <__gethex+0x170>
   11e42:	e0ba      	b.n	11fba <__gethex+0x2e6>
   11e44:	465b      	mov	r3, fp
   11e46:	9903      	ldr	r1, [sp, #12]
   11e48:	685b      	ldr	r3, [r3, #4]
   11e4a:	4299      	cmp	r1, r3
   11e4c:	da00      	bge.n	11e50 <__gethex+0x17c>
   11e4e:	e0d5      	b.n	11ffc <__gethex+0x328>
   11e50:	2401      	movs	r4, #1
   11e52:	2e00      	cmp	r6, #0
   11e54:	d00b      	beq.n	11e6e <__gethex+0x19a>
   11e56:	465b      	mov	r3, fp
   11e58:	68db      	ldr	r3, [r3, #12]
   11e5a:	2b02      	cmp	r3, #2
   11e5c:	d100      	bne.n	11e60 <__gethex+0x18c>
   11e5e:	e152      	b.n	12106 <__gethex+0x432>
   11e60:	2b03      	cmp	r3, #3
   11e62:	d100      	bne.n	11e66 <__gethex+0x192>
   11e64:	e153      	b.n	1210e <__gethex+0x43a>
   11e66:	2b01      	cmp	r3, #1
   11e68:	d069      	beq.n	11f3e <__gethex+0x26a>
   11e6a:	2310      	movs	r3, #16
   11e6c:	431c      	orrs	r4, r3
   11e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11e70:	9a05      	ldr	r2, [sp, #20]
   11e72:	601a      	str	r2, [r3, #0]
   11e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e76:	9a03      	ldr	r2, [sp, #12]
   11e78:	601a      	str	r2, [r3, #0]
   11e7a:	e026      	b.n	11eca <__gethex+0x1f6>
   11e7c:	2e00      	cmp	r6, #0
   11e7e:	d100      	bne.n	11e82 <__gethex+0x1ae>
   11e80:	e133      	b.n	120ea <__gethex+0x416>
   11e82:	782b      	ldrb	r3, [r5, #0]
   11e84:	e772      	b.n	11d6c <__gethex+0x98>
   11e86:	4653      	mov	r3, sl
   11e88:	464a      	mov	r2, r9
   11e8a:	601a      	str	r2, [r3, #0]
   11e8c:	2304      	movs	r3, #4
   11e8e:	469c      	mov	ip, r3
   11e90:	2300      	movs	r3, #0
   11e92:	44e2      	add	sl, ip
   11e94:	2200      	movs	r2, #0
   11e96:	2404      	movs	r4, #4
   11e98:	4699      	mov	r9, r3
   11e9a:	e79a      	b.n	11dd2 <__gethex+0xfe>
   11e9c:	9d02      	ldr	r5, [sp, #8]
   11e9e:	9904      	ldr	r1, [sp, #16]
   11ea0:	002a      	movs	r2, r5
   11ea2:	0020      	movs	r0, r4
   11ea4:	f000 faa6 	bl	123f4 <strncmp>
   11ea8:	2800      	cmp	r0, #0
   11eaa:	d100      	bne.n	11eae <__gethex+0x1da>
   11eac:	e091      	b.n	11fd2 <__gethex+0x2fe>
   11eae:	0025      	movs	r5, r4
   11eb0:	7822      	ldrb	r2, [r4, #0]
   11eb2:	2a50      	cmp	r2, #80	; 0x50
   11eb4:	d011      	beq.n	11eda <__gethex+0x206>
   11eb6:	2a70      	cmp	r2, #112	; 0x70
   11eb8:	d00f      	beq.n	11eda <__gethex+0x206>
   11eba:	464b      	mov	r3, r9
   11ebc:	601d      	str	r5, [r3, #0]
   11ebe:	4643      	mov	r3, r8
   11ec0:	425a      	negs	r2, r3
   11ec2:	4153      	adcs	r3, r2
   11ec4:	2406      	movs	r4, #6
   11ec6:	425b      	negs	r3, r3
   11ec8:	401c      	ands	r4, r3
   11eca:	0020      	movs	r0, r4
   11ecc:	b00b      	add	sp, #44	; 0x2c
   11ece:	bc3c      	pop	{r2, r3, r4, r5}
   11ed0:	4690      	mov	r8, r2
   11ed2:	4699      	mov	r9, r3
   11ed4:	46a2      	mov	sl, r4
   11ed6:	46ab      	mov	fp, r5
   11ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11eda:	2300      	movs	r3, #0
   11edc:	9303      	str	r3, [sp, #12]
   11ede:	3301      	adds	r3, #1
   11ee0:	469a      	mov	sl, r3
   11ee2:	786b      	ldrb	r3, [r5, #1]
   11ee4:	2b2b      	cmp	r3, #43	; 0x2b
   11ee6:	d100      	bne.n	11eea <__gethex+0x216>
   11ee8:	e09f      	b.n	1202a <__gethex+0x356>
   11eea:	2101      	movs	r1, #1
   11eec:	2b2d      	cmp	r3, #45	; 0x2d
   11eee:	d16d      	bne.n	11fcc <__gethex+0x2f8>
   11ef0:	78ab      	ldrb	r3, [r5, #2]
   11ef2:	1ca8      	adds	r0, r5, #2
   11ef4:	5cfb      	ldrb	r3, [r7, r3]
   11ef6:	002e      	movs	r6, r5
   11ef8:	1e5a      	subs	r2, r3, #1
   11efa:	2a18      	cmp	r2, #24
   11efc:	d900      	bls.n	11f00 <__gethex+0x22c>
   11efe:	e73f      	b.n	11d80 <__gethex+0xac>
   11f00:	1c42      	adds	r2, r0, #1
   11f02:	7840      	ldrb	r0, [r0, #1]
   11f04:	3b10      	subs	r3, #16
   11f06:	5c38      	ldrb	r0, [r7, r0]
   11f08:	1e46      	subs	r6, r0, #1
   11f0a:	2e18      	cmp	r6, #24
   11f0c:	d80c      	bhi.n	11f28 <__gethex+0x254>
   11f0e:	0006      	movs	r6, r0
   11f10:	0098      	lsls	r0, r3, #2
   11f12:	18c0      	adds	r0, r0, r3
   11f14:	0040      	lsls	r0, r0, #1
   11f16:	1980      	adds	r0, r0, r6
   11f18:	0003      	movs	r3, r0
   11f1a:	3201      	adds	r2, #1
   11f1c:	7810      	ldrb	r0, [r2, #0]
   11f1e:	3b10      	subs	r3, #16
   11f20:	5c3e      	ldrb	r6, [r7, r0]
   11f22:	1e70      	subs	r0, r6, #1
   11f24:	2818      	cmp	r0, #24
   11f26:	d9f3      	bls.n	11f10 <__gethex+0x23c>
   11f28:	2900      	cmp	r1, #0
   11f2a:	d000      	beq.n	11f2e <__gethex+0x25a>
   11f2c:	425b      	negs	r3, r3
   11f2e:	9903      	ldr	r1, [sp, #12]
   11f30:	002e      	movs	r6, r5
   11f32:	468c      	mov	ip, r1
   11f34:	449c      	add	ip, r3
   11f36:	4663      	mov	r3, ip
   11f38:	0015      	movs	r5, r2
   11f3a:	9303      	str	r3, [sp, #12]
   11f3c:	e720      	b.n	11d80 <__gethex+0xac>
   11f3e:	07b2      	lsls	r2, r6, #30
   11f40:	d593      	bpl.n	11e6a <__gethex+0x196>
   11f42:	9a08      	ldr	r2, [sp, #32]
   11f44:	6812      	ldr	r2, [r2, #0]
   11f46:	4316      	orrs	r6, r2
   11f48:	9201      	str	r2, [sp, #4]
   11f4a:	4233      	tst	r3, r6
   11f4c:	d100      	bne.n	11f50 <__gethex+0x27c>
   11f4e:	e78c      	b.n	11e6a <__gethex+0x196>
   11f50:	9b05      	ldr	r3, [sp, #20]
   11f52:	691f      	ldr	r7, [r3, #16]
   11f54:	9b08      	ldr	r3, [sp, #32]
   11f56:	00b9      	lsls	r1, r7, #2
   11f58:	4688      	mov	r8, r1
   11f5a:	001a      	movs	r2, r3
   11f5c:	4442      	add	r2, r8
   11f5e:	0016      	movs	r6, r2
   11f60:	2100      	movs	r1, #0
   11f62:	469c      	mov	ip, r3
   11f64:	e003      	b.n	11f6e <__gethex+0x29a>
   11f66:	c302      	stmia	r3!, {r1}
   11f68:	429e      	cmp	r6, r3
   11f6a:	d800      	bhi.n	11f6e <__gethex+0x29a>
   11f6c:	e0ff      	b.n	1216e <__gethex+0x49a>
   11f6e:	681a      	ldr	r2, [r3, #0]
   11f70:	1c50      	adds	r0, r2, #1
   11f72:	d0f8      	beq.n	11f66 <__gethex+0x292>
   11f74:	3201      	adds	r2, #1
   11f76:	4660      	mov	r0, ip
   11f78:	601a      	str	r2, [r3, #0]
   11f7a:	2c02      	cmp	r4, #2
   11f7c:	d100      	bne.n	11f80 <__gethex+0x2ac>
   11f7e:	e10c      	b.n	1219a <__gethex+0x4c6>
   11f80:	231f      	movs	r3, #31
   11f82:	2421      	movs	r4, #33	; 0x21
   11f84:	401d      	ands	r5, r3
   11f86:	d100      	bne.n	11f8a <__gethex+0x2b6>
   11f88:	e771      	b.n	11e6e <__gethex+0x19a>
   11f8a:	4440      	add	r0, r8
   11f8c:	3804      	subs	r0, #4
   11f8e:	6800      	ldr	r0, [r0, #0]
   11f90:	f7fd fac0 	bl	f514 <__hi0bits>
   11f94:	2320      	movs	r3, #32
   11f96:	1b5d      	subs	r5, r3, r5
   11f98:	42a8      	cmp	r0, r5
   11f9a:	db00      	blt.n	11f9e <__gethex+0x2ca>
   11f9c:	e767      	b.n	11e6e <__gethex+0x19a>
   11f9e:	2101      	movs	r1, #1
   11fa0:	9805      	ldr	r0, [sp, #20]
   11fa2:	f7ff fe41 	bl	11c28 <rshift>
   11fa6:	9b03      	ldr	r3, [sp, #12]
   11fa8:	2421      	movs	r4, #33	; 0x21
   11faa:	3301      	adds	r3, #1
   11fac:	001a      	movs	r2, r3
   11fae:	9303      	str	r3, [sp, #12]
   11fb0:	465b      	mov	r3, fp
   11fb2:	689b      	ldr	r3, [r3, #8]
   11fb4:	429a      	cmp	r2, r3
   11fb6:	dc00      	bgt.n	11fba <__gethex+0x2e6>
   11fb8:	e759      	b.n	11e6e <__gethex+0x19a>
   11fba:	9905      	ldr	r1, [sp, #20]
   11fbc:	9806      	ldr	r0, [sp, #24]
   11fbe:	f7fd fa0f 	bl	f3e0 <_Bfree>
   11fc2:	2300      	movs	r3, #0
   11fc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11fc6:	24a3      	movs	r4, #163	; 0xa3
   11fc8:	6013      	str	r3, [r2, #0]
   11fca:	e77e      	b.n	11eca <__gethex+0x1f6>
   11fcc:	1c68      	adds	r0, r5, #1
   11fce:	2100      	movs	r1, #0
   11fd0:	e790      	b.n	11ef4 <__gethex+0x220>
   11fd2:	1965      	adds	r5, r4, r5
   11fd4:	782a      	ldrb	r2, [r5, #0]
   11fd6:	5cbb      	ldrb	r3, [r7, r2]
   11fd8:	2b00      	cmp	r3, #0
   11fda:	d100      	bne.n	11fde <__gethex+0x30a>
   11fdc:	e769      	b.n	11eb2 <__gethex+0x1de>
   11fde:	002c      	movs	r4, r5
   11fe0:	2a30      	cmp	r2, #48	; 0x30
   11fe2:	d104      	bne.n	11fee <__gethex+0x31a>
   11fe4:	3401      	adds	r4, #1
   11fe6:	7823      	ldrb	r3, [r4, #0]
   11fe8:	2b30      	cmp	r3, #48	; 0x30
   11fea:	d0fb      	beq.n	11fe4 <__gethex+0x310>
   11fec:	5cfb      	ldrb	r3, [r7, r3]
   11fee:	4259      	negs	r1, r3
   11ff0:	4159      	adcs	r1, r3
   11ff2:	2201      	movs	r2, #1
   11ff4:	468a      	mov	sl, r1
   11ff6:	002e      	movs	r6, r5
   11ff8:	4690      	mov	r8, r2
   11ffa:	e6a3      	b.n	11d44 <__gethex+0x70>
   11ffc:	1a5c      	subs	r4, r3, r1
   11ffe:	42a5      	cmp	r5, r4
   12000:	dc53      	bgt.n	120aa <__gethex+0x3d6>
   12002:	465a      	mov	r2, fp
   12004:	68d2      	ldr	r2, [r2, #12]
   12006:	2a02      	cmp	r2, #2
   12008:	d100      	bne.n	1200c <__gethex+0x338>
   1200a:	e0ac      	b.n	12166 <__gethex+0x492>
   1200c:	2a03      	cmp	r2, #3
   1200e:	d100      	bne.n	12012 <__gethex+0x33e>
   12010:	e084      	b.n	1211c <__gethex+0x448>
   12012:	2a01      	cmp	r2, #1
   12014:	d100      	bne.n	12018 <__gethex+0x344>
   12016:	e097      	b.n	12148 <__gethex+0x474>
   12018:	9905      	ldr	r1, [sp, #20]
   1201a:	9806      	ldr	r0, [sp, #24]
   1201c:	f7fd f9e0 	bl	f3e0 <_Bfree>
   12020:	2300      	movs	r3, #0
   12022:	9a14      	ldr	r2, [sp, #80]	; 0x50
   12024:	2450      	movs	r4, #80	; 0x50
   12026:	6013      	str	r3, [r2, #0]
   12028:	e74f      	b.n	11eca <__gethex+0x1f6>
   1202a:	2100      	movs	r1, #0
   1202c:	e760      	b.n	11ef0 <__gethex+0x21c>
   1202e:	46c0      	nop			; (mov r8, r8)
   12030:	00015c1c 	.word	0x00015c1c
   12034:	1b64      	subs	r4, r4, r5
   12036:	0021      	movs	r1, r4
   12038:	9805      	ldr	r0, [sp, #20]
   1203a:	f7fd fe27 	bl	fc8c <__any_on>
   1203e:	1e06      	subs	r6, r0, #0
   12040:	d014      	beq.n	1206c <__gethex+0x398>
   12042:	211f      	movs	r1, #31
   12044:	2301      	movs	r3, #1
   12046:	1e60      	subs	r0, r4, #1
   12048:	4001      	ands	r1, r0
   1204a:	408b      	lsls	r3, r1
   1204c:	1142      	asrs	r2, r0, #5
   1204e:	9908      	ldr	r1, [sp, #32]
   12050:	0092      	lsls	r2, r2, #2
   12052:	588a      	ldr	r2, [r1, r2]
   12054:	2601      	movs	r6, #1
   12056:	421a      	tst	r2, r3
   12058:	d008      	beq.n	1206c <__gethex+0x398>
   1205a:	2801      	cmp	r0, #1
   1205c:	dd72      	ble.n	12144 <__gethex+0x470>
   1205e:	1ea1      	subs	r1, r4, #2
   12060:	9805      	ldr	r0, [sp, #20]
   12062:	f7fd fe13 	bl	fc8c <__any_on>
   12066:	2800      	cmp	r0, #0
   12068:	d06c      	beq.n	12144 <__gethex+0x470>
   1206a:	2603      	movs	r6, #3
   1206c:	0021      	movs	r1, r4
   1206e:	9805      	ldr	r0, [sp, #20]
   12070:	f7ff fdda 	bl	11c28 <rshift>
   12074:	9b03      	ldr	r3, [sp, #12]
   12076:	469c      	mov	ip, r3
   12078:	44a4      	add	ip, r4
   1207a:	4663      	mov	r3, ip
   1207c:	9303      	str	r3, [sp, #12]
   1207e:	e6db      	b.n	11e38 <__gethex+0x164>
   12080:	2200      	movs	r2, #0
   12082:	9203      	str	r2, [sp, #12]
   12084:	e675      	b.n	11d72 <__gethex+0x9e>
   12086:	1b2c      	subs	r4, r5, r4
   12088:	0022      	movs	r2, r4
   1208a:	9905      	ldr	r1, [sp, #20]
   1208c:	9806      	ldr	r0, [sp, #24]
   1208e:	f7fd fb9d 	bl	f7cc <__lshift>
   12092:	0003      	movs	r3, r0
   12094:	9a03      	ldr	r2, [sp, #12]
   12096:	3314      	adds	r3, #20
   12098:	1b12      	subs	r2, r2, r4
   1209a:	9005      	str	r0, [sp, #20]
   1209c:	9203      	str	r2, [sp, #12]
   1209e:	9308      	str	r3, [sp, #32]
   120a0:	e6ca      	b.n	11e38 <__gethex+0x164>
   120a2:	2300      	movs	r3, #0
   120a4:	3402      	adds	r4, #2
   120a6:	4698      	mov	r8, r3
   120a8:	e642      	b.n	11d30 <__gethex+0x5c>
   120aa:	1e67      	subs	r7, r4, #1
   120ac:	2e00      	cmp	r6, #0
   120ae:	d133      	bne.n	12118 <__gethex+0x444>
   120b0:	2f00      	cmp	r7, #0
   120b2:	d004      	beq.n	120be <__gethex+0x3ea>
   120b4:	0039      	movs	r1, r7
   120b6:	9805      	ldr	r0, [sp, #20]
   120b8:	f7fd fde8 	bl	fc8c <__any_on>
   120bc:	0006      	movs	r6, r0
   120be:	231f      	movs	r3, #31
   120c0:	117a      	asrs	r2, r7, #5
   120c2:	401f      	ands	r7, r3
   120c4:	3b1e      	subs	r3, #30
   120c6:	40bb      	lsls	r3, r7
   120c8:	9908      	ldr	r1, [sp, #32]
   120ca:	0092      	lsls	r2, r2, #2
   120cc:	588a      	ldr	r2, [r1, r2]
   120ce:	421a      	tst	r2, r3
   120d0:	d001      	beq.n	120d6 <__gethex+0x402>
   120d2:	2302      	movs	r3, #2
   120d4:	431e      	orrs	r6, r3
   120d6:	0021      	movs	r1, r4
   120d8:	9805      	ldr	r0, [sp, #20]
   120da:	f7ff fda5 	bl	11c28 <rshift>
   120de:	465b      	mov	r3, fp
   120e0:	685b      	ldr	r3, [r3, #4]
   120e2:	1b2d      	subs	r5, r5, r4
   120e4:	9303      	str	r3, [sp, #12]
   120e6:	2402      	movs	r4, #2
   120e8:	e6b3      	b.n	11e52 <__gethex+0x17e>
   120ea:	9b02      	ldr	r3, [sp, #8]
   120ec:	18ee      	adds	r6, r5, r3
   120ee:	7833      	ldrb	r3, [r6, #0]
   120f0:	0035      	movs	r5, r6
   120f2:	5cfa      	ldrb	r2, [r7, r3]
   120f4:	2a00      	cmp	r2, #0
   120f6:	d100      	bne.n	120fa <__gethex+0x426>
   120f8:	e638      	b.n	11d6c <__gethex+0x98>
   120fa:	3501      	adds	r5, #1
   120fc:	782b      	ldrb	r3, [r5, #0]
   120fe:	5cfa      	ldrb	r2, [r7, r3]
   12100:	2a00      	cmp	r2, #0
   12102:	d1fa      	bne.n	120fa <__gethex+0x426>
   12104:	e632      	b.n	11d6c <__gethex+0x98>
   12106:	2301      	movs	r3, #1
   12108:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1210a:	1a9b      	subs	r3, r3, r2
   1210c:	9315      	str	r3, [sp, #84]	; 0x54
   1210e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   12110:	2b00      	cmp	r3, #0
   12112:	d100      	bne.n	12116 <__gethex+0x442>
   12114:	e6a9      	b.n	11e6a <__gethex+0x196>
   12116:	e71b      	b.n	11f50 <__gethex+0x27c>
   12118:	2601      	movs	r6, #1
   1211a:	e7d0      	b.n	120be <__gethex+0x3ea>
   1211c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1211e:	2a00      	cmp	r2, #0
   12120:	d100      	bne.n	12124 <__gethex+0x450>
   12122:	e779      	b.n	12018 <__gethex+0x344>
   12124:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12126:	9908      	ldr	r1, [sp, #32]
   12128:	6013      	str	r3, [r2, #0]
   1212a:	2301      	movs	r3, #1
   1212c:	9a05      	ldr	r2, [sp, #20]
   1212e:	2462      	movs	r4, #98	; 0x62
   12130:	6113      	str	r3, [r2, #16]
   12132:	600b      	str	r3, [r1, #0]
   12134:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12136:	601a      	str	r2, [r3, #0]
   12138:	e6c7      	b.n	11eca <__gethex+0x1f6>
   1213a:	9b08      	ldr	r3, [sp, #32]
   1213c:	469a      	mov	sl, r3
   1213e:	2300      	movs	r3, #0
   12140:	4699      	mov	r9, r3
   12142:	e663      	b.n	11e0c <__gethex+0x138>
   12144:	2602      	movs	r6, #2
   12146:	e791      	b.n	1206c <__gethex+0x398>
   12148:	42a5      	cmp	r5, r4
   1214a:	d000      	beq.n	1214e <__gethex+0x47a>
   1214c:	e764      	b.n	12018 <__gethex+0x344>
   1214e:	2d01      	cmp	r5, #1
   12150:	dde8      	ble.n	12124 <__gethex+0x450>
   12152:	1e69      	subs	r1, r5, #1
   12154:	9805      	ldr	r0, [sp, #20]
   12156:	f7fd fd99 	bl	fc8c <__any_on>
   1215a:	2800      	cmp	r0, #0
   1215c:	d100      	bne.n	12160 <__gethex+0x48c>
   1215e:	e75b      	b.n	12018 <__gethex+0x344>
   12160:	465b      	mov	r3, fp
   12162:	685b      	ldr	r3, [r3, #4]
   12164:	e7de      	b.n	12124 <__gethex+0x450>
   12166:	9a15      	ldr	r2, [sp, #84]	; 0x54
   12168:	2a00      	cmp	r2, #0
   1216a:	d0db      	beq.n	12124 <__gethex+0x450>
   1216c:	e754      	b.n	12018 <__gethex+0x344>
   1216e:	9b05      	ldr	r3, [sp, #20]
   12170:	689b      	ldr	r3, [r3, #8]
   12172:	9301      	str	r3, [sp, #4]
   12174:	429f      	cmp	r7, r3
   12176:	da23      	bge.n	121c0 <__gethex+0x4ec>
   12178:	003b      	movs	r3, r7
   1217a:	9808      	ldr	r0, [sp, #32]
   1217c:	9905      	ldr	r1, [sp, #20]
   1217e:	1c5a      	adds	r2, r3, #1
   12180:	468c      	mov	ip, r1
   12182:	610a      	str	r2, [r1, #16]
   12184:	2101      	movs	r1, #1
   12186:	3304      	adds	r3, #4
   12188:	009b      	lsls	r3, r3, #2
   1218a:	4463      	add	r3, ip
   1218c:	6059      	str	r1, [r3, #4]
   1218e:	2c02      	cmp	r4, #2
   12190:	d003      	beq.n	1219a <__gethex+0x4c6>
   12192:	4297      	cmp	r7, r2
   12194:	da00      	bge.n	12198 <__gethex+0x4c4>
   12196:	e702      	b.n	11f9e <__gethex+0x2ca>
   12198:	e6f2      	b.n	11f80 <__gethex+0x2ac>
   1219a:	465b      	mov	r3, fp
   1219c:	681b      	ldr	r3, [r3, #0]
   1219e:	2422      	movs	r4, #34	; 0x22
   121a0:	3b01      	subs	r3, #1
   121a2:	429d      	cmp	r5, r3
   121a4:	d000      	beq.n	121a8 <__gethex+0x4d4>
   121a6:	e662      	b.n	11e6e <__gethex+0x19a>
   121a8:	231f      	movs	r3, #31
   121aa:	116a      	asrs	r2, r5, #5
   121ac:	401d      	ands	r5, r3
   121ae:	3b1e      	subs	r3, #30
   121b0:	40ab      	lsls	r3, r5
   121b2:	0092      	lsls	r2, r2, #2
   121b4:	5814      	ldr	r4, [r2, r0]
   121b6:	4023      	ands	r3, r4
   121b8:	425c      	negs	r4, r3
   121ba:	415c      	adcs	r4, r3
   121bc:	3421      	adds	r4, #33	; 0x21
   121be:	e656      	b.n	11e6e <__gethex+0x19a>
   121c0:	9b05      	ldr	r3, [sp, #20]
   121c2:	685a      	ldr	r2, [r3, #4]
   121c4:	9b06      	ldr	r3, [sp, #24]
   121c6:	1c51      	adds	r1, r2, #1
   121c8:	0018      	movs	r0, r3
   121ca:	4699      	mov	r9, r3
   121cc:	9201      	str	r2, [sp, #4]
   121ce:	f7fd f8df 	bl	f390 <_Balloc>
   121d2:	0006      	movs	r6, r0
   121d4:	9b05      	ldr	r3, [sp, #20]
   121d6:	300c      	adds	r0, #12
   121d8:	691a      	ldr	r2, [r3, #16]
   121da:	330c      	adds	r3, #12
   121dc:	9201      	str	r2, [sp, #4]
   121de:	3202      	adds	r2, #2
   121e0:	0019      	movs	r1, r3
   121e2:	0092      	lsls	r2, r2, #2
   121e4:	f7f6 fb36 	bl	8854 <memcpy>
   121e8:	4648      	mov	r0, r9
   121ea:	9905      	ldr	r1, [sp, #20]
   121ec:	f7fd f8f8 	bl	f3e0 <_Bfree>
   121f0:	0030      	movs	r0, r6
   121f2:	6933      	ldr	r3, [r6, #16]
   121f4:	3014      	adds	r0, #20
   121f6:	9605      	str	r6, [sp, #20]
   121f8:	e7c0      	b.n	1217c <__gethex+0x4a8>
   121fa:	46c0      	nop			; (mov r8, r8)

000121fc <__match>:
   121fc:	b530      	push	{r4, r5, lr}
   121fe:	6802      	ldr	r2, [r0, #0]
   12200:	e008      	b.n	12214 <__match+0x18>
   12202:	7813      	ldrb	r3, [r2, #0]
   12204:	001d      	movs	r5, r3
   12206:	3d41      	subs	r5, #65	; 0x41
   12208:	2d19      	cmp	r5, #25
   1220a:	d800      	bhi.n	1220e <__match+0x12>
   1220c:	3320      	adds	r3, #32
   1220e:	3101      	adds	r1, #1
   12210:	42a3      	cmp	r3, r4
   12212:	d106      	bne.n	12222 <__match+0x26>
   12214:	780c      	ldrb	r4, [r1, #0]
   12216:	3201      	adds	r2, #1
   12218:	2c00      	cmp	r4, #0
   1221a:	d1f2      	bne.n	12202 <__match+0x6>
   1221c:	6002      	str	r2, [r0, #0]
   1221e:	2001      	movs	r0, #1
   12220:	bd30      	pop	{r4, r5, pc}
   12222:	2000      	movs	r0, #0
   12224:	e7fc      	b.n	12220 <__match+0x24>
   12226:	46c0      	nop			; (mov r8, r8)

00012228 <__hexnan>:
   12228:	b5f0      	push	{r4, r5, r6, r7, lr}
   1222a:	4657      	mov	r7, sl
   1222c:	46de      	mov	lr, fp
   1222e:	464e      	mov	r6, r9
   12230:	4645      	mov	r5, r8
   12232:	4692      	mov	sl, r2
   12234:	680a      	ldr	r2, [r1, #0]
   12236:	211f      	movs	r1, #31
   12238:	b5e0      	push	{r5, r6, r7, lr}
   1223a:	1153      	asrs	r3, r2, #5
   1223c:	b085      	sub	sp, #20
   1223e:	009b      	lsls	r3, r3, #2
   12240:	4011      	ands	r1, r2
   12242:	9001      	str	r0, [sp, #4]
   12244:	4453      	add	r3, sl
   12246:	9103      	str	r1, [sp, #12]
   12248:	2900      	cmp	r1, #0
   1224a:	d000      	beq.n	1224e <__hexnan+0x26>
   1224c:	3304      	adds	r3, #4
   1224e:	3b04      	subs	r3, #4
   12250:	469b      	mov	fp, r3
   12252:	2300      	movs	r3, #0
   12254:	465a      	mov	r2, fp
   12256:	6013      	str	r3, [r2, #0]
   12258:	9b01      	ldr	r3, [sp, #4]
   1225a:	465c      	mov	r4, fp
   1225c:	6818      	ldr	r0, [r3, #0]
   1225e:	2300      	movs	r3, #0
   12260:	7841      	ldrb	r1, [r0, #1]
   12262:	9300      	str	r3, [sp, #0]
   12264:	4b59      	ldr	r3, [pc, #356]	; (123cc <__hexnan+0x1a4>)
   12266:	46d8      	mov	r8, fp
   12268:	2500      	movs	r5, #0
   1226a:	2200      	movs	r2, #0
   1226c:	4699      	mov	r9, r3
   1226e:	9402      	str	r4, [sp, #8]
   12270:	1c46      	adds	r6, r0, #1
   12272:	2900      	cmp	r1, #0
   12274:	d036      	beq.n	122e4 <__hexnan+0xbc>
   12276:	464b      	mov	r3, r9
   12278:	5c5b      	ldrb	r3, [r3, r1]
   1227a:	2b00      	cmp	r3, #0
   1227c:	d158      	bne.n	12330 <__hexnan+0x108>
   1227e:	2920      	cmp	r1, #32
   12280:	d868      	bhi.n	12354 <__hexnan+0x12c>
   12282:	9b00      	ldr	r3, [sp, #0]
   12284:	429a      	cmp	r2, r3
   12286:	dd28      	ble.n	122da <__hexnan+0xb2>
   12288:	4544      	cmp	r4, r8
   1228a:	d21c      	bcs.n	122c6 <__hexnan+0x9e>
   1228c:	2d07      	cmp	r5, #7
   1228e:	dc1a      	bgt.n	122c6 <__hexnan+0x9e>
   12290:	2308      	movs	r3, #8
   12292:	1b5d      	subs	r5, r3, r5
   12294:	00ad      	lsls	r5, r5, #2
   12296:	3318      	adds	r3, #24
   12298:	1b5b      	subs	r3, r3, r5
   1229a:	469c      	mov	ip, r3
   1229c:	4661      	mov	r1, ip
   1229e:	6823      	ldr	r3, [r4, #0]
   122a0:	0020      	movs	r0, r4
   122a2:	4647      	mov	r7, r8
   122a4:	4694      	mov	ip, r2
   122a6:	46a0      	mov	r8, r4
   122a8:	000a      	movs	r2, r1
   122aa:	001c      	movs	r4, r3
   122ac:	6841      	ldr	r1, [r0, #4]
   122ae:	000b      	movs	r3, r1
   122b0:	4093      	lsls	r3, r2
   122b2:	40e9      	lsrs	r1, r5
   122b4:	4323      	orrs	r3, r4
   122b6:	c008      	stmia	r0!, {r3}
   122b8:	000c      	movs	r4, r1
   122ba:	6001      	str	r1, [r0, #0]
   122bc:	4287      	cmp	r7, r0
   122be:	d8f5      	bhi.n	122ac <__hexnan+0x84>
   122c0:	4644      	mov	r4, r8
   122c2:	4662      	mov	r2, ip
   122c4:	46b8      	mov	r8, r7
   122c6:	2508      	movs	r5, #8
   122c8:	4554      	cmp	r4, sl
   122ca:	d906      	bls.n	122da <__hexnan+0xb2>
   122cc:	1f23      	subs	r3, r4, #4
   122ce:	2100      	movs	r1, #0
   122d0:	4698      	mov	r8, r3
   122d2:	001c      	movs	r4, r3
   122d4:	2500      	movs	r5, #0
   122d6:	6019      	str	r1, [r3, #0]
   122d8:	9200      	str	r2, [sp, #0]
   122da:	0030      	movs	r0, r6
   122dc:	7841      	ldrb	r1, [r0, #1]
   122de:	1c46      	adds	r6, r0, #1
   122e0:	2900      	cmp	r1, #0
   122e2:	d1c8      	bne.n	12276 <__hexnan+0x4e>
   122e4:	9b02      	ldr	r3, [sp, #8]
   122e6:	469c      	mov	ip, r3
   122e8:	2a00      	cmp	r2, #0
   122ea:	d037      	beq.n	1235c <__hexnan+0x134>
   122ec:	4544      	cmp	r4, r8
   122ee:	d201      	bcs.n	122f4 <__hexnan+0xcc>
   122f0:	2d07      	cmp	r5, #7
   122f2:	dd57      	ble.n	123a4 <__hexnan+0x17c>
   122f4:	4554      	cmp	r4, sl
   122f6:	d939      	bls.n	1236c <__hexnan+0x144>
   122f8:	4653      	mov	r3, sl
   122fa:	4659      	mov	r1, fp
   122fc:	cc04      	ldmia	r4!, {r2}
   122fe:	601a      	str	r2, [r3, #0]
   12300:	3304      	adds	r3, #4
   12302:	42a1      	cmp	r1, r4
   12304:	d2fa      	bcs.n	122fc <__hexnan+0xd4>
   12306:	2200      	movs	r2, #0
   12308:	c304      	stmia	r3!, {r2}
   1230a:	4299      	cmp	r1, r3
   1230c:	d2fc      	bcs.n	12308 <__hexnan+0xe0>
   1230e:	468b      	mov	fp, r1
   12310:	680b      	ldr	r3, [r1, #0]
   12312:	2b00      	cmp	r3, #0
   12314:	d10a      	bne.n	1232c <__hexnan+0x104>
   12316:	4663      	mov	r3, ip
   12318:	4652      	mov	r2, sl
   1231a:	45da      	cmp	sl, fp
   1231c:	d102      	bne.n	12324 <__hexnan+0xfc>
   1231e:	e035      	b.n	1238c <__hexnan+0x164>
   12320:	429a      	cmp	r2, r3
   12322:	d032      	beq.n	1238a <__hexnan+0x162>
   12324:	3b04      	subs	r3, #4
   12326:	6819      	ldr	r1, [r3, #0]
   12328:	2900      	cmp	r1, #0
   1232a:	d0f9      	beq.n	12320 <__hexnan+0xf8>
   1232c:	2005      	movs	r0, #5
   1232e:	e016      	b.n	1235e <__hexnan+0x136>
   12330:	3501      	adds	r5, #1
   12332:	3201      	adds	r2, #1
   12334:	2d08      	cmp	r5, #8
   12336:	dd05      	ble.n	12344 <__hexnan+0x11c>
   12338:	4554      	cmp	r4, sl
   1233a:	d9ce      	bls.n	122da <__hexnan+0xb2>
   1233c:	2100      	movs	r1, #0
   1233e:	2501      	movs	r5, #1
   12340:	3c04      	subs	r4, #4
   12342:	6021      	str	r1, [r4, #0]
   12344:	200f      	movs	r0, #15
   12346:	6821      	ldr	r1, [r4, #0]
   12348:	4003      	ands	r3, r0
   1234a:	0109      	lsls	r1, r1, #4
   1234c:	430b      	orrs	r3, r1
   1234e:	6023      	str	r3, [r4, #0]
   12350:	0030      	movs	r0, r6
   12352:	e7c3      	b.n	122dc <__hexnan+0xb4>
   12354:	9b02      	ldr	r3, [sp, #8]
   12356:	469c      	mov	ip, r3
   12358:	2929      	cmp	r1, #41	; 0x29
   1235a:	d01f      	beq.n	1239c <__hexnan+0x174>
   1235c:	2004      	movs	r0, #4
   1235e:	b005      	add	sp, #20
   12360:	bc3c      	pop	{r2, r3, r4, r5}
   12362:	4690      	mov	r8, r2
   12364:	4699      	mov	r9, r3
   12366:	46a2      	mov	sl, r4
   12368:	46ab      	mov	fp, r5
   1236a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1236c:	9b03      	ldr	r3, [sp, #12]
   1236e:	2b00      	cmp	r3, #0
   12370:	d011      	beq.n	12396 <__hexnan+0x16e>
   12372:	2220      	movs	r2, #32
   12374:	9b03      	ldr	r3, [sp, #12]
   12376:	1ad2      	subs	r2, r2, r3
   12378:	2301      	movs	r3, #1
   1237a:	425b      	negs	r3, r3
   1237c:	40d3      	lsrs	r3, r2
   1237e:	465a      	mov	r2, fp
   12380:	6812      	ldr	r2, [r2, #0]
   12382:	4013      	ands	r3, r2
   12384:	465a      	mov	r2, fp
   12386:	6013      	str	r3, [r2, #0]
   12388:	e7c3      	b.n	12312 <__hexnan+0xea>
   1238a:	4692      	mov	sl, r2
   1238c:	2301      	movs	r3, #1
   1238e:	4652      	mov	r2, sl
   12390:	2005      	movs	r0, #5
   12392:	6013      	str	r3, [r2, #0]
   12394:	e7e3      	b.n	1235e <__hexnan+0x136>
   12396:	465b      	mov	r3, fp
   12398:	681b      	ldr	r3, [r3, #0]
   1239a:	e7ba      	b.n	12312 <__hexnan+0xea>
   1239c:	9b01      	ldr	r3, [sp, #4]
   1239e:	3002      	adds	r0, #2
   123a0:	6018      	str	r0, [r3, #0]
   123a2:	e7a1      	b.n	122e8 <__hexnan+0xc0>
   123a4:	2308      	movs	r3, #8
   123a6:	1b5d      	subs	r5, r3, r5
   123a8:	6823      	ldr	r3, [r4, #0]
   123aa:	2620      	movs	r6, #32
   123ac:	0021      	movs	r1, r4
   123ae:	4647      	mov	r7, r8
   123b0:	001a      	movs	r2, r3
   123b2:	00ad      	lsls	r5, r5, #2
   123b4:	1b76      	subs	r6, r6, r5
   123b6:	6848      	ldr	r0, [r1, #4]
   123b8:	0003      	movs	r3, r0
   123ba:	40b3      	lsls	r3, r6
   123bc:	4313      	orrs	r3, r2
   123be:	0002      	movs	r2, r0
   123c0:	40ea      	lsrs	r2, r5
   123c2:	c108      	stmia	r1!, {r3}
   123c4:	600a      	str	r2, [r1, #0]
   123c6:	428f      	cmp	r7, r1
   123c8:	d8f5      	bhi.n	123b6 <__hexnan+0x18e>
   123ca:	e793      	b.n	122f4 <__hexnan+0xcc>
   123cc:	00015c1c 	.word	0x00015c1c

000123d0 <_isatty_r>:
   123d0:	2300      	movs	r3, #0
   123d2:	b570      	push	{r4, r5, r6, lr}
   123d4:	4c06      	ldr	r4, [pc, #24]	; (123f0 <_isatty_r+0x20>)
   123d6:	0005      	movs	r5, r0
   123d8:	0008      	movs	r0, r1
   123da:	6023      	str	r3, [r4, #0]
   123dc:	f7ee fc2c 	bl	c38 <_isatty>
   123e0:	1c43      	adds	r3, r0, #1
   123e2:	d000      	beq.n	123e6 <_isatty_r+0x16>
   123e4:	bd70      	pop	{r4, r5, r6, pc}
   123e6:	6823      	ldr	r3, [r4, #0]
   123e8:	2b00      	cmp	r3, #0
   123ea:	d0fb      	beq.n	123e4 <_isatty_r+0x14>
   123ec:	602b      	str	r3, [r5, #0]
   123ee:	e7f9      	b.n	123e4 <_isatty_r+0x14>
   123f0:	200018dc 	.word	0x200018dc

000123f4 <strncmp>:
   123f4:	b530      	push	{r4, r5, lr}
   123f6:	2400      	movs	r4, #0
   123f8:	2a00      	cmp	r2, #0
   123fa:	d039      	beq.n	12470 <strncmp+0x7c>
   123fc:	0003      	movs	r3, r0
   123fe:	430b      	orrs	r3, r1
   12400:	079b      	lsls	r3, r3, #30
   12402:	d120      	bne.n	12446 <strncmp+0x52>
   12404:	2a03      	cmp	r2, #3
   12406:	d91e      	bls.n	12446 <strncmp+0x52>
   12408:	6803      	ldr	r3, [r0, #0]
   1240a:	680d      	ldr	r5, [r1, #0]
   1240c:	42ab      	cmp	r3, r5
   1240e:	d11a      	bne.n	12446 <strncmp+0x52>
   12410:	3a04      	subs	r2, #4
   12412:	2a00      	cmp	r2, #0
   12414:	d02c      	beq.n	12470 <strncmp+0x7c>
   12416:	4d1a      	ldr	r5, [pc, #104]	; (12480 <strncmp+0x8c>)
   12418:	195d      	adds	r5, r3, r5
   1241a:	439d      	bics	r5, r3
   1241c:	002b      	movs	r3, r5
   1241e:	4d19      	ldr	r5, [pc, #100]	; (12484 <strncmp+0x90>)
   12420:	422b      	tst	r3, r5
   12422:	d00c      	beq.n	1243e <strncmp+0x4a>
   12424:	e024      	b.n	12470 <strncmp+0x7c>
   12426:	6803      	ldr	r3, [r0, #0]
   12428:	680c      	ldr	r4, [r1, #0]
   1242a:	42a3      	cmp	r3, r4
   1242c:	d10b      	bne.n	12446 <strncmp+0x52>
   1242e:	3a04      	subs	r2, #4
   12430:	2a00      	cmp	r2, #0
   12432:	d01f      	beq.n	12474 <strncmp+0x80>
   12434:	4c12      	ldr	r4, [pc, #72]	; (12480 <strncmp+0x8c>)
   12436:	191c      	adds	r4, r3, r4
   12438:	439c      	bics	r4, r3
   1243a:	422c      	tst	r4, r5
   1243c:	d11a      	bne.n	12474 <strncmp+0x80>
   1243e:	3004      	adds	r0, #4
   12440:	3104      	adds	r1, #4
   12442:	2a03      	cmp	r2, #3
   12444:	d8ef      	bhi.n	12426 <strncmp+0x32>
   12446:	7803      	ldrb	r3, [r0, #0]
   12448:	780d      	ldrb	r5, [r1, #0]
   1244a:	3a01      	subs	r2, #1
   1244c:	429d      	cmp	r5, r3
   1244e:	d113      	bne.n	12478 <strncmp+0x84>
   12450:	2a00      	cmp	r2, #0
   12452:	d00f      	beq.n	12474 <strncmp+0x80>
   12454:	2d00      	cmp	r5, #0
   12456:	d00d      	beq.n	12474 <strncmp+0x80>
   12458:	2301      	movs	r3, #1
   1245a:	e004      	b.n	12466 <strncmp+0x72>
   1245c:	429a      	cmp	r2, r3
   1245e:	d009      	beq.n	12474 <strncmp+0x80>
   12460:	3301      	adds	r3, #1
   12462:	2c00      	cmp	r4, #0
   12464:	d006      	beq.n	12474 <strncmp+0x80>
   12466:	5cc4      	ldrb	r4, [r0, r3]
   12468:	5ccd      	ldrb	r5, [r1, r3]
   1246a:	42ac      	cmp	r4, r5
   1246c:	d0f6      	beq.n	1245c <strncmp+0x68>
   1246e:	1b64      	subs	r4, r4, r5
   12470:	0020      	movs	r0, r4
   12472:	bd30      	pop	{r4, r5, pc}
   12474:	2400      	movs	r4, #0
   12476:	e7fb      	b.n	12470 <strncmp+0x7c>
   12478:	001c      	movs	r4, r3
   1247a:	1b64      	subs	r4, r4, r5
   1247c:	e7f8      	b.n	12470 <strncmp+0x7c>
   1247e:	46c0      	nop			; (mov r8, r8)
   12480:	fefefeff 	.word	0xfefefeff
   12484:	80808080 	.word	0x80808080

00012488 <_wcrtomb_r>:
   12488:	b570      	push	{r4, r5, r6, lr}
   1248a:	001d      	movs	r5, r3
   1248c:	4b11      	ldr	r3, [pc, #68]	; (124d4 <_wcrtomb_r+0x4c>)
   1248e:	b084      	sub	sp, #16
   12490:	681b      	ldr	r3, [r3, #0]
   12492:	0004      	movs	r4, r0
   12494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12496:	2900      	cmp	r1, #0
   12498:	d00e      	beq.n	124b8 <_wcrtomb_r+0x30>
   1249a:	2b00      	cmp	r3, #0
   1249c:	d016      	beq.n	124cc <_wcrtomb_r+0x44>
   1249e:	20e0      	movs	r0, #224	; 0xe0
   124a0:	581e      	ldr	r6, [r3, r0]
   124a2:	002b      	movs	r3, r5
   124a4:	0020      	movs	r0, r4
   124a6:	47b0      	blx	r6
   124a8:	1c43      	adds	r3, r0, #1
   124aa:	d103      	bne.n	124b4 <_wcrtomb_r+0x2c>
   124ac:	2300      	movs	r3, #0
   124ae:	602b      	str	r3, [r5, #0]
   124b0:	338a      	adds	r3, #138	; 0x8a
   124b2:	6023      	str	r3, [r4, #0]
   124b4:	b004      	add	sp, #16
   124b6:	bd70      	pop	{r4, r5, r6, pc}
   124b8:	2b00      	cmp	r3, #0
   124ba:	d009      	beq.n	124d0 <_wcrtomb_r+0x48>
   124bc:	22e0      	movs	r2, #224	; 0xe0
   124be:	a901      	add	r1, sp, #4
   124c0:	589e      	ldr	r6, [r3, r2]
   124c2:	0020      	movs	r0, r4
   124c4:	002b      	movs	r3, r5
   124c6:	2200      	movs	r2, #0
   124c8:	47b0      	blx	r6
   124ca:	e7ed      	b.n	124a8 <_wcrtomb_r+0x20>
   124cc:	4b02      	ldr	r3, [pc, #8]	; (124d8 <_wcrtomb_r+0x50>)
   124ce:	e7e6      	b.n	1249e <_wcrtomb_r+0x16>
   124d0:	4b01      	ldr	r3, [pc, #4]	; (124d8 <_wcrtomb_r+0x50>)
   124d2:	e7f3      	b.n	124bc <_wcrtomb_r+0x34>
   124d4:	20000080 	.word	0x20000080
   124d8:	200004b4 	.word	0x200004b4

000124dc <__aeabi_dcmpun>:
   124dc:	b570      	push	{r4, r5, r6, lr}
   124de:	4e0e      	ldr	r6, [pc, #56]	; (12518 <__aeabi_dcmpun+0x3c>)
   124e0:	030d      	lsls	r5, r1, #12
   124e2:	031c      	lsls	r4, r3, #12
   124e4:	0049      	lsls	r1, r1, #1
   124e6:	005b      	lsls	r3, r3, #1
   124e8:	0b2d      	lsrs	r5, r5, #12
   124ea:	0d49      	lsrs	r1, r1, #21
   124ec:	0b24      	lsrs	r4, r4, #12
   124ee:	0d5b      	lsrs	r3, r3, #21
   124f0:	42b1      	cmp	r1, r6
   124f2:	d004      	beq.n	124fe <__aeabi_dcmpun+0x22>
   124f4:	4908      	ldr	r1, [pc, #32]	; (12518 <__aeabi_dcmpun+0x3c>)
   124f6:	2000      	movs	r0, #0
   124f8:	428b      	cmp	r3, r1
   124fa:	d008      	beq.n	1250e <__aeabi_dcmpun+0x32>
   124fc:	bd70      	pop	{r4, r5, r6, pc}
   124fe:	4305      	orrs	r5, r0
   12500:	2001      	movs	r0, #1
   12502:	2d00      	cmp	r5, #0
   12504:	d1fa      	bne.n	124fc <__aeabi_dcmpun+0x20>
   12506:	4904      	ldr	r1, [pc, #16]	; (12518 <__aeabi_dcmpun+0x3c>)
   12508:	2000      	movs	r0, #0
   1250a:	428b      	cmp	r3, r1
   1250c:	d1f6      	bne.n	124fc <__aeabi_dcmpun+0x20>
   1250e:	4314      	orrs	r4, r2
   12510:	0020      	movs	r0, r4
   12512:	1e44      	subs	r4, r0, #1
   12514:	41a0      	sbcs	r0, r4
   12516:	e7f1      	b.n	124fc <__aeabi_dcmpun+0x20>
   12518:	000007ff 	.word	0x000007ff

0001251c <__aeabi_d2f>:
   1251c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1251e:	004c      	lsls	r4, r1, #1
   12520:	0d64      	lsrs	r4, r4, #21
   12522:	030b      	lsls	r3, r1, #12
   12524:	1c62      	adds	r2, r4, #1
   12526:	0f45      	lsrs	r5, r0, #29
   12528:	0a5b      	lsrs	r3, r3, #9
   1252a:	0552      	lsls	r2, r2, #21
   1252c:	432b      	orrs	r3, r5
   1252e:	0fc9      	lsrs	r1, r1, #31
   12530:	00c5      	lsls	r5, r0, #3
   12532:	0d52      	lsrs	r2, r2, #21
   12534:	2a01      	cmp	r2, #1
   12536:	dd28      	ble.n	1258a <__aeabi_d2f+0x6e>
   12538:	4a3a      	ldr	r2, [pc, #232]	; (12624 <__aeabi_d2f+0x108>)
   1253a:	18a6      	adds	r6, r4, r2
   1253c:	2efe      	cmp	r6, #254	; 0xfe
   1253e:	dc1b      	bgt.n	12578 <__aeabi_d2f+0x5c>
   12540:	2e00      	cmp	r6, #0
   12542:	dd3e      	ble.n	125c2 <__aeabi_d2f+0xa6>
   12544:	0180      	lsls	r0, r0, #6
   12546:	0002      	movs	r2, r0
   12548:	1e50      	subs	r0, r2, #1
   1254a:	4182      	sbcs	r2, r0
   1254c:	0f6d      	lsrs	r5, r5, #29
   1254e:	432a      	orrs	r2, r5
   12550:	00db      	lsls	r3, r3, #3
   12552:	4313      	orrs	r3, r2
   12554:	075a      	lsls	r2, r3, #29
   12556:	d004      	beq.n	12562 <__aeabi_d2f+0x46>
   12558:	220f      	movs	r2, #15
   1255a:	401a      	ands	r2, r3
   1255c:	2a04      	cmp	r2, #4
   1255e:	d000      	beq.n	12562 <__aeabi_d2f+0x46>
   12560:	3304      	adds	r3, #4
   12562:	2280      	movs	r2, #128	; 0x80
   12564:	04d2      	lsls	r2, r2, #19
   12566:	401a      	ands	r2, r3
   12568:	d05a      	beq.n	12620 <__aeabi_d2f+0x104>
   1256a:	3601      	adds	r6, #1
   1256c:	2eff      	cmp	r6, #255	; 0xff
   1256e:	d003      	beq.n	12578 <__aeabi_d2f+0x5c>
   12570:	019b      	lsls	r3, r3, #6
   12572:	0a5b      	lsrs	r3, r3, #9
   12574:	b2f4      	uxtb	r4, r6
   12576:	e001      	b.n	1257c <__aeabi_d2f+0x60>
   12578:	24ff      	movs	r4, #255	; 0xff
   1257a:	2300      	movs	r3, #0
   1257c:	0258      	lsls	r0, r3, #9
   1257e:	05e4      	lsls	r4, r4, #23
   12580:	0a40      	lsrs	r0, r0, #9
   12582:	07c9      	lsls	r1, r1, #31
   12584:	4320      	orrs	r0, r4
   12586:	4308      	orrs	r0, r1
   12588:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1258a:	2c00      	cmp	r4, #0
   1258c:	d007      	beq.n	1259e <__aeabi_d2f+0x82>
   1258e:	431d      	orrs	r5, r3
   12590:	d0f2      	beq.n	12578 <__aeabi_d2f+0x5c>
   12592:	2080      	movs	r0, #128	; 0x80
   12594:	00db      	lsls	r3, r3, #3
   12596:	0480      	lsls	r0, r0, #18
   12598:	4303      	orrs	r3, r0
   1259a:	26ff      	movs	r6, #255	; 0xff
   1259c:	e7da      	b.n	12554 <__aeabi_d2f+0x38>
   1259e:	432b      	orrs	r3, r5
   125a0:	d003      	beq.n	125aa <__aeabi_d2f+0x8e>
   125a2:	2305      	movs	r3, #5
   125a4:	08db      	lsrs	r3, r3, #3
   125a6:	2cff      	cmp	r4, #255	; 0xff
   125a8:	d003      	beq.n	125b2 <__aeabi_d2f+0x96>
   125aa:	025b      	lsls	r3, r3, #9
   125ac:	0a5b      	lsrs	r3, r3, #9
   125ae:	b2e4      	uxtb	r4, r4
   125b0:	e7e4      	b.n	1257c <__aeabi_d2f+0x60>
   125b2:	2b00      	cmp	r3, #0
   125b4:	d032      	beq.n	1261c <__aeabi_d2f+0x100>
   125b6:	2080      	movs	r0, #128	; 0x80
   125b8:	03c0      	lsls	r0, r0, #15
   125ba:	4303      	orrs	r3, r0
   125bc:	025b      	lsls	r3, r3, #9
   125be:	0a5b      	lsrs	r3, r3, #9
   125c0:	e7dc      	b.n	1257c <__aeabi_d2f+0x60>
   125c2:	0032      	movs	r2, r6
   125c4:	3217      	adds	r2, #23
   125c6:	db14      	blt.n	125f2 <__aeabi_d2f+0xd6>
   125c8:	2280      	movs	r2, #128	; 0x80
   125ca:	271e      	movs	r7, #30
   125cc:	0412      	lsls	r2, r2, #16
   125ce:	4313      	orrs	r3, r2
   125d0:	1bbf      	subs	r7, r7, r6
   125d2:	2f1f      	cmp	r7, #31
   125d4:	dc0f      	bgt.n	125f6 <__aeabi_d2f+0xda>
   125d6:	4a14      	ldr	r2, [pc, #80]	; (12628 <__aeabi_d2f+0x10c>)
   125d8:	4694      	mov	ip, r2
   125da:	4464      	add	r4, ip
   125dc:	002a      	movs	r2, r5
   125de:	40a5      	lsls	r5, r4
   125e0:	002e      	movs	r6, r5
   125e2:	40a3      	lsls	r3, r4
   125e4:	1e75      	subs	r5, r6, #1
   125e6:	41ae      	sbcs	r6, r5
   125e8:	40fa      	lsrs	r2, r7
   125ea:	4333      	orrs	r3, r6
   125ec:	4313      	orrs	r3, r2
   125ee:	2600      	movs	r6, #0
   125f0:	e7b0      	b.n	12554 <__aeabi_d2f+0x38>
   125f2:	2400      	movs	r4, #0
   125f4:	e7d5      	b.n	125a2 <__aeabi_d2f+0x86>
   125f6:	2202      	movs	r2, #2
   125f8:	4252      	negs	r2, r2
   125fa:	1b96      	subs	r6, r2, r6
   125fc:	001a      	movs	r2, r3
   125fe:	40f2      	lsrs	r2, r6
   12600:	2f20      	cmp	r7, #32
   12602:	d009      	beq.n	12618 <__aeabi_d2f+0xfc>
   12604:	4809      	ldr	r0, [pc, #36]	; (1262c <__aeabi_d2f+0x110>)
   12606:	4684      	mov	ip, r0
   12608:	4464      	add	r4, ip
   1260a:	40a3      	lsls	r3, r4
   1260c:	432b      	orrs	r3, r5
   1260e:	1e5d      	subs	r5, r3, #1
   12610:	41ab      	sbcs	r3, r5
   12612:	2600      	movs	r6, #0
   12614:	4313      	orrs	r3, r2
   12616:	e79d      	b.n	12554 <__aeabi_d2f+0x38>
   12618:	2300      	movs	r3, #0
   1261a:	e7f7      	b.n	1260c <__aeabi_d2f+0xf0>
   1261c:	2300      	movs	r3, #0
   1261e:	e7ad      	b.n	1257c <__aeabi_d2f+0x60>
   12620:	0034      	movs	r4, r6
   12622:	e7bf      	b.n	125a4 <__aeabi_d2f+0x88>
   12624:	fffffc80 	.word	0xfffffc80
   12628:	fffffc82 	.word	0xfffffc82
   1262c:	fffffca2 	.word	0xfffffca2
   12630:	682f2e2e 	.word	0x682f2e2e
   12634:	732f6c61 	.word	0x732f6c61
   12638:	682f6372 	.word	0x682f6372
   1263c:	695f6c61 	.word	0x695f6c61
   12640:	6d5f6332 	.word	0x6d5f6332
   12644:	6e79735f 	.word	0x6e79735f
   12648:	00632e63 	.word	0x00632e63
   1264c:	682f2e2e 	.word	0x682f2e2e
   12650:	732f6c61 	.word	0x732f6c61
   12654:	682f6372 	.word	0x682f6372
   12658:	695f6c61 	.word	0x695f6c61
   1265c:	00632e6f 	.word	0x00632e6f
   12660:	682f2e2e 	.word	0x682f2e2e
   12664:	732f6c61 	.word	0x732f6c61
   12668:	682f6372 	.word	0x682f6372
   1266c:	735f6c61 	.word	0x735f6c61
   12670:	6d5f6970 	.word	0x6d5f6970
   12674:	6e79735f 	.word	0x6e79735f
   12678:	00632e63 	.word	0x00632e63
   1267c:	682f2e2e 	.word	0x682f2e2e
   12680:	732f6c61 	.word	0x732f6c61
   12684:	682f6372 	.word	0x682f6372
   12688:	745f6c61 	.word	0x745f6c61
   1268c:	72656d69 	.word	0x72656d69
   12690:	0000632e 	.word	0x0000632e
   12694:	682f2e2e 	.word	0x682f2e2e
   12698:	732f6c61 	.word	0x732f6c61
   1269c:	682f6372 	.word	0x682f6372
   126a0:	755f6c61 	.word	0x755f6c61
   126a4:	74726173 	.word	0x74726173
   126a8:	7973615f 	.word	0x7973615f
   126ac:	632e636e 	.word	0x632e636e
   126b0:	00000000 	.word	0x00000000
   126b4:	682f2e2e 	.word	0x682f2e2e
   126b8:	752f6c61 	.word	0x752f6c61
   126bc:	736c6974 	.word	0x736c6974
   126c0:	6372732f 	.word	0x6372732f
   126c4:	6974752f 	.word	0x6974752f
   126c8:	6c5f736c 	.word	0x6c5f736c
   126cc:	2e747369 	.word	0x2e747369
   126d0:	00000063 	.word	0x00000063
   126d4:	682f2e2e 	.word	0x682f2e2e
   126d8:	752f6c61 	.word	0x752f6c61
   126dc:	736c6974 	.word	0x736c6974
   126e0:	6372732f 	.word	0x6372732f
   126e4:	6974752f 	.word	0x6974752f
   126e8:	725f736c 	.word	0x725f736c
   126ec:	62676e69 	.word	0x62676e69
   126f0:	65666675 	.word	0x65666675
   126f4:	00632e72 	.word	0x00632e72
   126f8:	682f2e2e 	.word	0x682f2e2e
   126fc:	652f6c70 	.word	0x652f6c70
   12700:	682f6369 	.word	0x682f6369
   12704:	655f6c70 	.word	0x655f6c70
   12708:	632e6369 	.word	0x632e6369
   1270c:	00000000 	.word	0x00000000

00012710 <_map>:
   12710:	00000008 00000028 682f2e2e 722f6c70     ....(...../hpl/r
   12720:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   12730:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   12740:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0001274c <_i2cms>:
   1274c:	00000002 00200014 00000100 00003736     ...... .....67..
   1275c:	000000d7 02dc6c00                       .....l..

00012764 <_usarts>:
   12764:	00000004 40010004 00030000 0000d555     .......@....U...

00012774 <sercomspi_regs>:
   12774:	0020000c 00020000 00000000 00000008     .. .............
   12784:	0020000c 00020000 00000000 03000008     .. .............
   12794:	000030fa 0000310e 00003126 0000313e     .0...1..&1..>1..
   127a4:	00003166 00003180 0000323c 000031a8     f1...1..<2...1..
   127b4:	000031cc 000031d6 000031e0 000031f8     .1...1...1...1..
   127c4:	0000321e 00003988 00003992 0000399c     .2...9...9...9..
   127d4:	000039a4 000039ae 000039b8              .9...9...9..

000127e0 <ExCvt>:
   127e0:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
   127f0:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
   12800:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
   12810:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   12820:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
   12830:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   12840:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
   12850:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   12860:	33544146 20202032 00000000 3a2c2b2a     FAT32   ....*+,:
   12870:	3e3d3c3b 227c5d5b 00007f3f 656c6946     ;<=>[]|"?...File
   12880:	6f6c6320 2e646573 0000000d 63204453      closed.....SD c
   12890:	20647261 6e756f6d 20646574 63637573     ard mounted succ
   128a0:	66737365 796c6c75 00000d2e 63204453     essfully....SD c
   128b0:	20647261 6e756f6d 61662074 64656c69     ard mount failed
   128c0:	00000d2e 7473694c 20676e69 656c6966     ....Listing file
   128d0:	6e692073 72696420 6f746365 203a7972     s in directory: 
   128e0:	0a0d7325 00000000 5249445b 2520205d     %s......[DIR]  %
   128f0:	000a0d73 4c49465b 25205d45 25282073     s...[FILE] %s (%
   12900:	6220756c 73657479 000a0d29 6c696146     lu bytes)...Fail
   12910:	74206465 706f206f 64206e65 63657269     ed to open direc
   12920:	79726f74 7325203a 00000a0d 64616552     tory: %s....Read
   12930:	20676e69 656c6966 7325203a 00000a0d     ing file: %s....
   12940:	656c6946 65706f20 3a64656e 0d732520     File opened: %s.
   12950:	0000000a 6c696146 74206465 706f206f     ....Failed to op
   12960:	66206e65 3a656c69 0d732520 0000000a     en file: %s.....
   12970:	20646e45 6620666f 20656c69 63616572     End of file reac
   12980:	3a646568 0d732520 0000000a 6c696146     hed: %s.....Fail
   12990:	74206465 6572206f 66206461 3a656c69     ed to read file:
   129a0:	0d732520 0000000a 6c696146 74206465      %s.....Failed t
   129b0:	7277206f 20657469 66206f74 3a656c69     o write to file:
   129c0:	0d732520 0000000a                        %s.....

000129c8 <favicon_ico>:
   129c8:	474e5089 0a1a0a0d 0d000000 52444849     .PNG........IHDR
   129d8:	20000000 20000000 00000608 7a7a7300     ... ... .....szz
   129e8:	000000f4 49427304 08080854 64087c08     .....sBIT....|.d
   129f8:	00000088 59487009 00000073 000000ec     .....pHYs.......
   12a08:	287901ec 0000bd71 45741900 6f537458     ..y(q.....tEXtSo
   12a18:	61777466 77006572 692e7777 63736b6e     ftware.www.inksc
   12a28:	2e657061 9b67726f 001a3cee 49ff0400     ape.org..<.....I
   12a38:	58544144 7997c585 1c57144c ec333fc7     DATX...yL.W..?3.
   12a48:	2ebb5cb2 8882a2b0 45141647 d62ecf1a     .\......G..E....
   12a58:	61ed5ab6 d5624a2b 1de34da6 dad46aaf     .Z.a+Jb..M...j..
   12a68:	6351b5a4 5a969b1b c6a26adb a53136da     ..Qc...Z.j...61.
   12a78:	21a2d135 278d623d ada236b6 8820ae88     5..!=b.'.6.... .
   12a88:	22c8825c ccc7b2c8 40ff4cce a8239017     \..".....L.@..#.
   12a98:	4cffbf68 7efdef7e 3379fbef 819bdef3     h..L~..~..y3....
   12aa8:	ddc259ff fc10106b 80ddbd84 24860047     .Y..k.......G..$
   12ab8:	16fe2626 3da31313 f2f2f749 b76ed172     &&.....=I...r.n.
   12ac8:	8480eaa7 b8d4d4d4 e2c763b1 aca8b972     .........c..r...
   12ad8:	9336ecac 2458d8d8 74e9c249 08d8d8d2     ..6...X$I..t....
   12ae8:	7d3e9f40 64ad5ab0 b7626666 5ae807db     @.>}.Z.dffb....Z
   12af8:	b6deec16 dd6d578e 7dac2377 3e5c384d     .....Wm.w#.}M8\>
   12b08:	9c246a2a 8f26beb5 76db02fd 228a2167     *j$...&....vg!."
   12b18:	2200ad00 a70b0a4d 001b7405 37b03034     ..."M....t..40.7
   12b28:	10004e8c 72a659d0 56c1d2e6 eb76ba19     .N...Y.r...V..v.
   12b38:	dbadd13a 782fa70a a8922bc8 d0d155ae     :...../x.+...U..
   12b48:	30053088 13206074 33d10546 0809e3bc     .0.0t` .F..3....
   12b58:	6d36c601 b1c8065d 50f6f97b 9110c603     ..6m]...{..P....
   12b68:	b10647e7 88899a60 0aaa221e 8a3ed565     .G..`...."..e.>.
   12b78:	efd664ca 69248dba 62619e2c 4ba1a274     .d....$i,.abt..K
   12b88:	b00a76e3 7a1ddf7d 2c5c8846 88310894     .v..}..zF.\,..1.
   12b98:	8222b67c dfd110b0 034f75bf 1be6ab00     |."......uO.....
   12ba8:	79eac6b1 a7042539 77f3654b ec3bec75     ...y9%..Ke.wu.;.
   12bb8:	11a5e3e4 1d0a0504 d8800f0d a99ce759     ............Y...
   12bc8:	dfdcec61 1922a5c0 2b4370db 9972a2f3     a....."..pC+..r.
   12bd8:	fc7da733 fb34dd95 110b0a7b 822cbcd9     3.}...4.{.....,.
   12be8:	31852fd9 ea2dc367 01c3ea9d 778d3ec8     ./.1g.-......>.w
   12bf8:	c765acbf fa7e16fb b17b0a24 b74dfccc     ..e...~.$.{...M.
   12c08:	352abdc8 3290cbf5 67b8c75e db4ac875     ..*5...2^..gu.J.
   12c18:	621a8e59 6605c3e0 835a7d96 b2bc7724     Y..b...f.}Z.$w..
   12c28:	a8a805da ba4ef1f6 d1a48f03 830eb7af     ......N.........
   12c38:	ebe9605e 89aeb626 4689d0e4 083ba456     ^`..&......FV.;.
   12c48:	6f18120e 2dbc640b dbfdc190 46e1927f     ...o.d.-.......F
   12c58:	95805111 3cb81c5b a9b443ed 2361e80c     .Q..[..<.C....a#
   12c68:	37c150d6 f36b0f9f 9b0246d6 371b803e     .P.7..k..F..>..7
   12c78:	22b1981b 02d5eb8b e64dcf89 6c55cb99     ..."......M...Ul
   12c88:	9b54fc5c c147fbc1 639b3b8f 39d65bd5     \.T...G..;.c.[.9
   12c98:	00742e80 73fdd773 2eda3a37 8ac93df1     ..t.s..s7:...=..
   12ca8:	0f747448 642baae4 b8a4ac5d fcd3a4b0     Htt...+d].......
   12cb8:	021d1e96 557b7ecc 4ee90697 9e0aba75     .....~{U...Nu...
   12cc8:	27781e84 79fd507c ff4a77f8 fb9ff6ce     ..x'|P.y.wJ.....
   12cd8:	8d9c29b2 0fb476db 2e42ee70 8d3b1ebf     .)...v..p.B...;.
   12ce8:	3b98144e 8d010d2b 46befb83 4dc62553     N..;+......FS%.M
   12cf8:	f2524998 21451418 af1d3d3d 8a4a4bd7     .IR...E!==...KJ.
   12d08:	70d54d0d 7bfc5dbb 48c5b721 a7a7d31a     .M.p.].{!..H....
   12d18:	cc9c9c91 c967f395 80011a1c 6f34f490     ......g.......4o
   12d28:	2ce4edec cd9a3ac8 c5ed1f0b 8c8778db     ...,.:.......x..
   12d38:	a66356af 1a6b5d92 cc8a8531 52419f5a     .Vc..]k.1...Z.AR
   12d48:	0e1c18f2 21a16107 626938bc 6270ca8b     .....a.!.8ib..pb
   12d58:	a3f8c6fb 2e7afaba 9c92e6e6 aaa28c9c     ......z.........
   12d68:	ee7a735c 94e085ba f79696e4 434d023d     \sz.........=.MC
   12d78:	49141555 02451442 6b2bc008 f346aa28     U..IB.E...+k(.F.
   12d88:	251753c7 14dfe534 d5095e65 c37f1003     .S.%4...e^......
   12d98:	636f79ce a73300c7 d373224c 1d7a0c3c     .yoc..3.L"s.<.z.
   12da8:	01a66773 76c77ab0 899b927c c004de53     sg...z.v|...S...
   12db8:	f6e0b162 fc763878 b2de8764 5a5a47cf     b...x8v.d....GZZ
   12dc8:	1816bd53 d79af040 85111be8 f82664c5     S...@........d&.
   12dd8:	dcab6e6c 83890056 9c1c4813 fe612ad0     ln..V....H...*a.
   12de8:	62ad0d92 bb591451 e6cebdf6 10e64ade     ...bQ.Y......J..
   12df8:	3fbf9713 207d6dce 7c10a6aa e018ea47     ...?.m} ...|G...
   12e08:	82c96871 e7e7e495 7d35f3e3 f95ff511     qh........5}.._.
   12e18:	f3805b56 70e1cee7 238dfc38 edc08c47     V[.....p8..#G...
   12e28:	b8ad7376 d3c78f18 151540ad 16151415     vs.......@......
   12e38:	d3939392 0a69a00c 8844d29a afd72500     ......i...D..%..
   12e48:	b20a28a1 ef6e69e4 47474546 0335a023     .(...in.FEGG#.5.
   12e58:	19c39b84 5e106834 633087af d51401f3     ....4h.^..0c....
   12e68:	9bb757ab 0d252403 49d4fb23 01aa803f     .W...$%.#..I?...
   12e78:	94f1f1f1 b5609694 d3163fc6 75adaa96     ......`..?.....u
   12e88:	0064fb20 f1cc0055 1ea3d6f1 259fa7b7      .d.U..........%
   12e98:	d3a8d232 9589fdeb 933e5555 b0f158d1     2.......UU>..X..
   12ea8:	c78f6e46 f6043060 df358636 43871ad5     Fn..`0..6.5....C
   12eb8:	15f5ebd3 17d6a69a e89d5c14 e2e25ddf     .........\...]..
   12ec8:	5f2cf6e2 c59e6cbe 6f27f162 6145f2d9     ..,_.l..b.'o..Ea
   12ed8:	f59e5e5e c9800161 fc2d168b f9b366c5     ^^..a.....-..f..
   12ee8:	43f19567 471fcd46 2a070c8e 7432c5a1     g..CF..G...*..2t
   12ef8:	0ea75cb9 8a79f81c 57f66cd9 95d5d5d7     .\....y..l.W....
   12f08:	4039823e 271389e1 cb4b4aab 05f900fc     >.9@...'.JK.....
   12f18:	dd400d05 fdfef8bd b7d00c35 4780eb88     ..@.....5......G
   12f28:	ffba55fd c809d7c7 793ee41d 971e07fd     .U........>y....
   12f38:	2862fbd7 0000d764 45490000 42ae444e     ..b(d.....IEND.B
   12f48:	00008260 0000002f 74736574 7478742e     `.../...test.txt
   12f58:	00000000 6d617845 20656c70 656e696c     ....Example line
   12f68:	206f7420 65707061 7420646e 6874206f      to append to th
   12f78:	69662065 0d2e656c 0000000a 656e694c     e file......Line
   12f88:	69727720 6e657474 63757320 73736563      written success
   12f98:	6c6c7566 000d2e79 666e6f63 742e6769     fully...config.t
   12fa8:	00007478 64616552 756c2520 74796220     xt..Read %lu byt
   12fb8:	203a7365 732a2e25 00000a0d 65480a0d     es: %.*s......He
   12fc8:	2c6f6c6c 4d415320 21313244 0000000d     llo, SAMD21!....
   12fd8:	66667542 4f207265 66726576 00776f6c     Buffer Overflow.
   12fe8:	46465542 4e454c20 0064253d 5054554f     BUFF LEN=%d.OUTP
   12ff8:	4154533a 33252054 00000073 0046464f     :STAT %3s...OFF.
   13008:	7074754f 69207475 464f2073 00000d46     Output is OFF...
   13018:	00006b6f 00004e4f 7074754f 69207475     ok..ON..Output i
   13028:	4e4f2073 0000000d 5341454d 5e5b253a     s ON....MEAS:%[^
   13038:	00005d3f 544c4f56 00000000 7361654d     ?]..VOLT....Meas
   13048:	20657275 746c6f56 20656761 6d6d6f63     ure Voltage comm
   13058:	0d646e61 00000000 302e3834 00003133     and.....48.031..
   13068:	52525543 00000000 7361654d 20657275     CURR....Measure 
   13078:	72727543 20746e65 6d6d6f63 0d646e61     Current command.
   13088:	00000000 32312e30 00000031 5453522a     ....0.121...*RST
   13098:	00000000 20544547 0000202f 65646e69     ....GET / ..inde
   130a8:	74682e78 73206c6d 0d646e65 00000000     x.html send.....
   130b8:	20544547 7661662f 6e6f6369 6f63692e     GET /favicon.ico
   130c8:	00000000 69766166 2e6e6f63 206f6369     ....favicon.ico 
   130d8:	646e6573 0000000d 50545448 312e312f     send....HTTP/1.1
   130e8:	30303220 0d4b4f20 6e6f430a 746e6574      200 OK..Content
   130f8:	7079542d 69203a65 6567616d 692d782f     -Type: image/x-i
   13108:	0d6e6f63 000a0a0d 20544547 7465672f     con.....GET /get
   13118:	6c61765f 00000073 50545448 312e312f     _vals...HTTP/1.1
   13128:	30303220 0d4b4f20 6e6f430a 746e6574      200 OK..Content
   13138:	7079542d 61203a65 696c7070 69746163     -Type: applicati
   13148:	6a2f6e6f 0d6e6f73 7b0a0a0d 706d6122     on/json....{"amp
   13158:	2e253a22 222c6633 746c6f76 2e253a22     ":%.3f,"volt":%.
   13168:	222c6633 74746177 2e253a22 222c6633     3f,"watt":%.3f,"
   13178:	44706d61 3a224d4d 66332e25 6f76222c     ampDMM":%.3f,"vo
   13188:	4d44746c 253a224d 2c66332e 74756f22     ltDMM":%.3f,"out
   13198:	74617453 253a2265 72222c64 3a226d65     State":%d,"rem":
   131a8:	222c6425 22727265 2c64253a 306e6922     %d,"err":%d,"in0
   131b8:	64253a22 6e69222c 253a2231 69222c64     ":%d,"in1":%d,"i
   131c8:	3a22326e 007d6425 20544547 7465732f     n2":%d}.GET /set
   131d8:	6c61765f 00000073 3d706d61 76266625     _vals...amp=%f&v
   131e8:	3d746c6f 00006625 203b6625 0a0d6625     olt=%f..%f; %f..
   131f8:	00000000 50545448 312e312f 30303220     ....HTTP/1.1 200
   13208:	0d4b4f20 6e6f430a 746e6574 7079542d      OK..Content-Typ
   13218:	61203a65 696c7070 69746163 6a2f6e6f     e: application/j
   13228:	0d6e6f73 7b0a0a0d 63757322 73736563     son....{"success
   13238:	72743a22 007d6575 20544547 6e6f632f     ":true}.GET /con
   13248:	6c6f7274 00000000 69766564 253d6563     trol....device=%
   13258:	5d265e5b 74636126 3d6e6f69 00007325     [^&]&action=%s..
   13268:	203b7325 0a0d7325 00000000 006e6166     %s; %s......fan.
   13278:	00006e6f 006d6572 00757370              on..rem.psu.

00013284 <psu_page>:
   13284:	50545448 312e312f 30303220 0d4b4f20     HTTP/1.1 200 OK.
   13294:	6e6f430a 746e6574 7079542d 74203a65     .Content-Type: t
   132a4:	2f747865 6c6d7468 0a0a0d0d 4f44213c     ext/html....<!DO
   132b4:	50595443 74682045 0a3e6c6d 6d74683c     CTYPE html>.<htm
   132c4:	616c206c 223d676e 3e226e65 65683c0a     l lang="en">.<he
   132d4:	0a3e6461 74656d3c 68632061 65737261     ad>.<meta charse
   132e4:	55223d74 382d4654 3c0a3e22 6c746974     t="UTF-8">.<titl
   132f4:	6f503e65 20726577 70707553 4320796c     e>Power Supply C
   13304:	72746e6f 2f3c6c6f 6c746974 3c0a3e65     ontrol</title>.<
   13314:	6c797473 620a3e65 2079646f 6f660a7b     style>.body {.fo
   13324:	662d746e 6c696d61 41203a79 6c616972     nt-family: Arial
   13334:	6173202c 732d736e 66697265 69640a3b     , sans-serif;.di
   13344:	616c7073 66203a79 3b78656c 656c660a     splay: flex;.fle
   13354:	69642d78 74636572 3a6e6f69 6c6f6320     x-direction: col
   13364:	3b6e6d75 696c610a 692d6e67 736d6574     umn;.align-items
   13374:	6563203a 7265746e 61700a3b 6e696464     : center;.paddin
   13384:	32203a67 3b787030 6361620a 6f72676b     g: 20px;.backgro
   13394:	3a646e75 30662320 30663066 0a7d0a3b     und: #f0f0f0;.}.
   133a4:	6e6f632e 6e696174 7b207265 78616d0a     .container {.max
   133b4:	6469772d 203a6874 70303034 770a3b78     -width: 400px;.w
   133c4:	68746469 3031203a 0a3b2530 6b636162     idth: 100%;.back
   133d4:	756f7267 203a646e 74696877 700a3b65     ground: white;.p
   133e4:	69646461 203a676e 78703032 6f620a3b     adding: 20px;.bo
   133f4:	72656472 6461722d 3a737569 70303120     rder-radius: 10p
   13404:	620a3b78 732d786f 6f646168 30203a77     x;.box-shadow: 0
   13414:	31203020 20787030 61626772 202c3028      0 10px rgba(0, 
   13424:	30202c30 2e30202c 0a3b2931 742e0a7d     0, 0, 0.1);.}..t
   13434:	656c7469 740a7b20 2d747865 67696c61     itle {.text-alig
   13444:	63203a6e 65746e65 6d0a3b72 69677261     n: center;.margi
   13454:	6f622d6e 6d6f7474 3032203a 0a3b7870     n-bottom: 20px;.
   13464:	722e0a7d 202c776f 706e692e 722d7475     }..row, .input-r
   13474:	202c776f 6572702e 2d746573 20776f72     ow, .preset-row 
   13484:	69640a7b 616c7073 66203a79 3b78656c     {.display: flex;
   13494:	73756a0a 79666974 6e6f632d 746e6574     .justify-content
   134a4:	7073203a 2d656361 77746562 3b6e6565     : space-between;
   134b4:	696c610a 692d6e67 736d6574 6563203a     .align-items: ce
   134c4:	7265746e 616d0a3b 6e696772 746f622d     nter;.margin-bot
   134d4:	3a6d6f74 70303120 7d0a3b78 6f722e0a     tom: 10px;.}..ro
   134e4:	616c2077 2c6c6562 6e692e20 2d747570     w label, .input-
   134f4:	20776f72 6562616c 2e202c6c 73657270     row label, .pres
   13504:	722d7465 6c20776f 6c656261 660a7b20     et-row label {.f
   13514:	3a78656c 0a3b3120 722e0a7d 6920776f     lex: 1;.}..row i
   13524:	7475706e 692e202c 7475706e 776f722d     nput, .input-row
   13534:	706e6920 202c7475 6572702e 2d746573      input, .preset-
   13544:	20776f72 75706e69 0a7b2074 74646977     row input {.widt
   13554:	31203a68 78703030 65740a3b 612d7478     h: 100px;.text-a
   13564:	6e67696c 6563203a 7265746e 0a7d0a3b     lign: center;.}.
   13574:	7475622e 2d6e6f74 20776f72 69640a7b     .button-row {.di
   13584:	616c7073 66203a79 3b78656c 73756a0a     splay: flex;.jus
   13594:	79666974 6e6f632d 746e6574 7073203a     tify-content: sp
   135a4:	2d656361 77746562 3b6e6565 72616d0a     ace-between;.mar
   135b4:	2d6e6967 3a706f74 70303220 7d0a3b78     gin-top: 20px;.}
   135c4:	75622e0a 6e6f7474 770a7b20 68746469     ..button {.width
   135d4:	3834203a 700a3b25 69646461 203a676e     : 48%;.padding: 
   135e4:	78703031 61620a3b 72676b63 646e756f     10px;.background
   135f4:	3023203a 66623730 630a3b66 726f6c6f     : #007bff;.color
   13604:	6877203a 3b657469 726f620a 3a726564     : white;.border:
   13614:	6e6f6e20 620a3b65 6564726f 61722d72      none;.border-ra
   13624:	73756964 7035203a 630a3b78 6f737275     dius: 5px;.curso
   13634:	70203a72 746e696f 0a3b7265 622e0a7d     r: pointer;.}..b
   13644:	6f747475 6f683a6e 20726576 61620a7b     utton:hover {.ba
   13654:	72676b63 646e756f 3023203a 62363530     ckground: #0056b
   13664:	7d0a3b33 72702e0a 74657365 776f722d     3;.}..preset-row
   13674:	640a7b20 6c707369 203a7961 78656c66      {.display: flex
   13684:	756a0a3b 66697473 6f632d79 6e65746e     ;.justify-conten
   13694:	73203a74 65636170 7465622d 6e656577     t: space-between
   136a4:	616d0a3b 6e696772 706f742d 3032203a     ;.margin-top: 20
   136b4:	0a3b7870 702e0a7d 65736572 75622d74     px;.}..preset-bu
   136c4:	6e6f7474 770a7b20 68746469 3233203a     tton {.width: 32
   136d4:	700a3b25 69646461 203a676e 78703031     %;.padding: 10px
   136e4:	61620a3b 72676b63 646e756f 3223203a     ;.background: #2
   136f4:	34376138 630a3b35 726f6c6f 6877203a     8a745;.color: wh
   13704:	3b657469 726f620a 3a726564 6e6f6e20     ite;.border: non
   13714:	620a3b65 6564726f 61722d72 73756964     e;.border-radius
   13724:	7035203a 630a3b78 6f737275 70203a72     : 5px;.cursor: p
   13734:	746e696f 0a3b7265 702e0a7d 65736572     ointer;.}..prese
   13744:	75622d74 6e6f7474 766f683a 7b207265     t-button:hover {
   13754:	6361620a 6f72676b 3a646e75 31322320     .background: #21
   13764:	38333838 0a7d0a3b 7065732e 74617261     8838;.}..separat
   13774:	7b20726f 6469770a 203a6874 25303031     or {.width: 100%
   13784:	65680a3b 74686769 7031203a 620a3b78     ;.height: 1px;.b
   13794:	676b6361 6e756f72 23203a64 3b646464     ackground: #ddd;
   137a4:	72616d0a 3a6e6967 70303220 3b302078     .margin: 20px 0;
   137b4:	2e0a7d0a 20776f72 6170732e 2d646563     .}..row .spaced-
   137c4:	75706e69 0a7b2074 6772616d 6c2d6e69     input {.margin-l
   137d4:	3a746665 70303120 7d0a3b78 74732e0a     eft: 10px;.}..st
   137e4:	73757461 646e692d 74616369 7b20726f     atus-indicator {
   137f4:	6469770a 203a6874 78703032 65680a3b     .width: 20px;.he
   13804:	74686769 3032203a 0a3b7870 64726f62     ight: 20px;.bord
   13814:	722d7265 75696461 35203a73 0a3b2530     er-radius: 50%;.
   13824:	6b636162 756f7267 203a646e 63636323     background: #ccc
   13834:	2a2f203b 66654420 746c7561 206f7420     ; /* Default to 
   13844:	79617267 0a2f2a20 692e0a7d 6369646e     gray */.}..indic
   13854:	726f7461 6e6f632d 6e696174 7b207265     ator-container {
   13864:	7369640a 79616c70 6c66203a 0a3b7865     .display: flex;.
   13874:	78656c66 7269642d 69746365 203a6e6f     flex-direction: 
   13884:	756c6f63 0a3b6e6d 67696c61 74692d6e     column;.align-it
   13894:	3a736d65 6e656320 3b726574 2e0a7d0a     ems: center;.}..
   138a4:	69646e69 6f746163 616c2d72 206c6562     indicator-label 
   138b4:	616d0a7b 6e696772 706f742d 7035203a     {.margin-top: 5p
   138c4:	740a3b78 2d747865 67696c61 63203a6e     x;.text-align: c
   138d4:	65746e65 7d0a3b72 68632e0a 626b6365     enter;.}..checkb
   138e4:	632d786f 61746e6f 72656e69 640a7b20     ox-container {.d
   138f4:	6c707369 203a7961 78656c66 6c610a3b     isplay: flex;.al
   13904:	2d6e6769 6d657469 63203a73 65746e65     ign-items: cente
   13914:	6d0a3b72 69677261 656c2d6e 203a7466     r;.margin-left: 
   13924:	78703031 0a7d0a3b 6568632e 6f626b63     10px;.}..checkbo
   13934:	6f632d78 6961746e 2072656e 6562616c     x-container labe
   13944:	0a7b206c 6772616d 6c2d6e69 3a746665     l {.margin-left:
   13954:	78703520 0a7d0a3b 74732f3c 3e656c79      5px;.}.</style>
   13964:	682f3c0a 3e646165 6f623c0a 0a3e7964     .</head>.<body>.
   13974:	7669643c 616c6320 223d7373 746e6f63     <div class="cont
   13984:	656e6961 0a3e2272 2031683c 73616c63     ainer">.<h1 clas
   13994:	74223d73 656c7469 6f503e22 20726577     s="title">Power 
   139a4:	70707553 4320796c 72746e6f 2f3c6c6f     Supply Control</
   139b4:	0a3e3168 7669643c 616c6320 223d7373     h1>.<div class="
   139c4:	22776f72 6c3c0a3e 6c656261 6572503e     row">.<label>Pre
   139d4:	20746573 20706d41 4d44202f 2f3c3a4d     set Amp / DMM:</
   139e4:	6562616c 3c0a3e6c 75706e69 79742074     label>.<input ty
   139f4:	223d6570 74786574 64692022 6d61223d     pe="text" id="am
   13a04:	65732d70 72202274 6f646165 20796c6e     p-set" readonly 
   13a14:	73616c63 73223d73 65636170 6e692d64     class="spaced-in
   13a24:	22747570 693c0a3e 7475706e 70797420     put">.<input typ
   13a34:	74223d65 22747865 3d646920 706d6122     e="text" id="amp
   13a44:	6d6d642d 65722022 6e6f6461 6320796c     -dmm" readonly c
   13a54:	7373616c 7073223d 64656361 706e692d     lass="spaced-inp
   13a64:	3e227475 642f3c0a 0a3e7669 7669643c     ut">.</div>.<div
   13a74:	616c6320 223d7373 22776f72 6c3c0a3e      class="row">.<l
   13a84:	6c656261 6572503e 20746573 746c6f56     abel>Preset Volt
   13a94:	44202f20 3c3a4d4d 62616c2f 0a3e6c65      / DMM:</label>.
   13aa4:	706e693c 74207475 3d657079 78657422     <input type="tex
   13ab4:	69202274 76223d64 2d746c6f 22746573     t" id="volt-set"
   13ac4:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   13ad4:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   13ae4:	706e693c 74207475 3d657079 78657422     <input type="tex
   13af4:	69202274 76223d64 2d746c6f 226d6d64     t" id="volt-dmm"
   13b04:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   13b14:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   13b24:	69642f3c 3c0a3e76 20766964 73616c63     </div>.<div clas
   13b34:	72223d73 3e22776f 616c3c0a 3e6c6562     s="row">.<label>
   13b44:	74746157 57202d20 20747461 3a4d4d44     Watt - Watt DMM:
   13b54:	616c2f3c 3e6c6562 6e693c0a 20747570     </label>.<input 
   13b64:	65707974 6574223d 20227478 223d6469     type="text" id="
   13b74:	74746177 7369642d 79616c70 65722022     watt-display" re
   13b84:	6e6f6461 0a3e796c 69642f3c 3c0a3e76     adonly>.</div>.<
   13b94:	20766964 73616c63 69223d73 7475706e     div class="input
   13ba4:	776f722d 3c0a3e22 6562616c 6f66206c     -row">.<label fo
   13bb4:	61223d72 692d706d 7475706e 65533e22     r="amp-input">Se
   13bc4:	654e2074 6d412077 2f3c3a70 6562616c     t New Amp:</labe
   13bd4:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   13be4:	74786574 64692022 6d61223d 6e692d70     text" id="amp-in
   13bf4:	22747570 2f3c0a3e 3e766964 69643c0a     put">.</div>.<di
   13c04:	6c632076 3d737361 706e6922 722d7475     v class="input-r
   13c14:	3e22776f 616c3c0a 206c6562 3d726f66     ow">.<label for=
   13c24:	6c6f7622 6e692d74 22747570 7465533e     "volt-input">Set
   13c34:	77654e20 6c6f5620 2f3c3a74 6562616c      New Volt:</labe
   13c44:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   13c54:	74786574 64692022 6f76223d 692d746c     text" id="volt-i
   13c64:	7475706e 3c0a3e22 7669642f 643c0a3e     nput">.</div>.<d
   13c74:	63207669 7373616c 7562223d 6e6f7474     iv class="button
   13c84:	776f722d 3c0a3e22 20766964 73616c63     -row">.<div clas
   13c94:	69223d73 6369646e 726f7461 6e6f632d     s="indicator-con
   13ca4:	6e696174 3e227265 69643c0a 6c632076     tainer">.<div cl
   13cb4:	3d737361 61747322 2d737574 69646e69     ass="status-indi
   13cc4:	6f746163 69202272 73223d64 75746174     cator" id="statu
   13cd4:	6e692d73 61636964 22726f74 642f3c3e     s-indicator"></d
   13ce4:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   13cf4:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   13d04:	74754f3e 69642f3c 3c0a3e76 7669642f     >Out</div>.</div
   13d14:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   13d24:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   13d34:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   13d44:	74617473 692d7375 6369646e 726f7461     status-indicator
   13d54:	64692022 7265223d 6e692d72 61636964     " id="err-indica
   13d64:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   13d74:	616c6320 223d7373 69646e69 6f746163      class="indicato
   13d84:	616c2d72 226c6562 7272453e 69642f3c     r-label">Err</di
   13d94:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   13da4:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   13db4:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   13dc4:	616c6320 223d7373 74617473 692d7375      class="status-i
   13dd4:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   13de4:	6e692d30 61636964 22726f74 642f3c3e     0-indicator"></d
   13df4:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   13e04:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   13e14:	304e493e 69642f3c 3c0a3e76 7669642f     >IN0</div>.</div
   13e24:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   13e34:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   13e44:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   13e54:	74617473 692d7375 6369646e 726f7461     status-indicator
   13e64:	64692022 6e69223d 6e692d31 61636964     " id="in1-indica
   13e74:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   13e84:	616c6320 223d7373 69646e69 6f746163      class="indicato
   13e94:	616c2d72 226c6562 314e493e 69642f3c     r-label">IN1</di
   13ea4:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   13eb4:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   13ec4:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   13ed4:	616c6320 223d7373 74617473 692d7375      class="status-i
   13ee4:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   13ef4:	6e692d32 61636964 22726f74 642f3c3e     2-indicator"></d
   13f04:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   13f14:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   13f24:	324e493e 69642f3c 3c0a3e76 7669642f     >IN2</div>.</div
   13f34:	3c0a0a3e 20766964 73616c63 63223d73     >..<div class="c
   13f44:	6b636568 2d786f62 746e6f63 656e6961     heckbox-containe
   13f54:	0a3e2272 706e693c 74207475 3d657079     r">.<input type=
   13f64:	65686322 6f626b63 69202278 72223d64     "checkbox" id="r
   13f74:	746f6d65 6f632d65 6f72746e 68632d6c     emote-control-ch
   13f84:	626b6365 3e22786f 616c3c0a 206c6562     eckbox">.<label 
   13f94:	3d726f66 6d657222 2d65746f 746e6f63     for="remote-cont
   13fa4:	2d6c6f72 63656863 786f626b 65523e22     rol-checkbox">Re
   13fb4:	65746f6d 6e6f4320 6c6f7274 616c2f3c     mote Control</la
   13fc4:	3e6c6562 642f3c0a 0a3e7669 69642f3c     bel>.</div>.</di
   13fd4:	0a0a3e76 7669643c 616c6320 223d7373     v>..<div class="
   13fe4:	74747562 722d6e6f 3e22776f 75623c0a     button-row">.<bu
   13ff4:	6e6f7474 616c6320 223d7373 74747562     tton class="butt
   14004:	20226e6f 6c797473 6d223d65 69677261     on" style="margi
   14014:	656c2d6e 203a7466 6f747561 6f20223b     n-left: auto;" o
   14024:	696c636e 223d6b63 56746573 65756c61     nclick="setValue
   14034:	22292873 7465533e 6c615620 3c736575     s()">Set Values<
   14044:	7475622f 3e6e6f74 642f3c0a 0a3e7669     /button>.</div>.
   14054:	7669643c 616c6320 223d7373 74747562     <div class="butt
   14064:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   14074:	616c6320 223d7373 74747562 20226e6f      class="button" 
   14084:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   14094:	69766544 27286563 27757370 6e6f272c     Device('psu','on
   140a4:	3e222927 6e727554 55535020 3c6e4f20     ')">Turn PSU On<
   140b4:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   140c4:	616c6320 223d7373 74747562 20226e6f      class="button" 
   140d4:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   140e4:	69766544 27286563 27757370 666f272c     Device('psu','of
   140f4:	22292766 7275543e 5350206e 664f2055     f')">Turn PSU Of
   14104:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   14114:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   14124:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   14134:	7669643c 616c6320 223d7373 74747562     <div class="butt
   14144:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   14154:	616c6320 223d7373 74747562 20226e6f      class="button" 
   14164:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   14174:	69766544 27286563 276e6166 6e6f272c     Device('fan','on
   14184:	3e222927 6e727554 6e614620 3c6e4f20     ')">Turn Fan On<
   14194:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   141a4:	616c6320 223d7373 74747562 20226e6f      class="button" 
   141b4:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   141c4:	69766544 27286563 276e6166 666f272c     Device('fan','of
   141d4:	22292766 7275543e 6146206e 664f206e     f')">Turn Fan Of
   141e4:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   141f4:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   14204:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   14214:	7669643c 616c6320 223d7373 73657270     <div class="pres
   14224:	722d7465 3e22776f 75623c0a 6e6f7474     et-row">.<button
   14234:	616c6320 223d7373 73657270 622d7465      class="preset-b
   14244:	6f747475 6f20226e 696c636e 223d6b63     utton" onclick="
   14254:	50746573 65736572 29312874 56353e22     setPreset(1)">5V
   14264:	3c413120 7475622f 3e6e6f74 75623c0a      1A</button>.<bu
   14274:	6e6f7474 616c6320 223d7373 73657270     tton class="pres
   14284:	622d7465 6f747475 6f20226e 696c636e     et-button" oncli
   14294:	223d6b63 50746573 65736572 29322874     ck="setPreset(2)
   142a4:	32313e22 41322056 75622f3c 6e6f7474     ">12V 2A</button
   142b4:	623c0a3e 6f747475 6c63206e 3d737361     >.<button class=
   142c4:	65727022 2d746573 74747562 20226e6f     "preset-button" 
   142d4:	6c636e6f 3d6b6369 74657322 73657250     onclick="setPres
   142e4:	33287465 323e2229 32205634 622f3c41     et(3)">24V 2A</b
   142f4:	6f747475 3c0a3e6e 7669642f 2f3c0a3e     utton>.</div>.</
   14304:	3e766964 63733c0a 74706972 75660a3e     div>.<script>.fu
   14314:	6974636e 66206e6f 68637465 756c6156     nction fetchValu
   14324:	29287365 660a7b20 68637465 672f2728     es() {.fetch('/g
   14334:	765f7465 27736c61 742e0a29 286e6568     et_vals')..then(
   14344:	70736572 65736e6f 203e3d20 70736572     response => resp
   14354:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   14364:	64286e65 20617461 7b203e3d 636f640a     en(data => {.doc
   14374:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   14384:	64497942 6d612728 65732d70 2e292774     ById('amp-set').
   14394:	756c6176 203d2065 61746164 706d612e     value = data.amp
   143a4:	466f742e 64657869 3b293228 636f640a     .toFixed(2);.doc
   143b4:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   143c4:	64497942 6f762728 732d746c 29277465     ById('volt-set')
   143d4:	6c61762e 3d206575 74616420 6f762e61     .value = data.vo
   143e4:	742e746c 7869466f 32286465 640a3b29     lt.toFixed(2);.d
   143f4:	6d75636f 2e746e65 45746567 656d656c     ocument.getEleme
   14404:	7942746e 27286449 74746177 7369642d     ntById('watt-dis
   14414:	79616c70 762e2927 65756c61 64203d20     play').value = d
   14424:	2e617461 74746177 466f742e 64657869     ata.watt.toFixed
   14434:	3b293228 636f640a 6e656d75 65672e74     (2);.document.ge
   14444:	656c4574 746e656d 64497942 6d612728     tElementById('am
   14454:	6d642d70 2e29276d 756c6176 203d2065     p-dmm').value = 
   14464:	61746164 706d612e 2e4d4d44 69466f74     data.ampDMM.toFi
   14474:	28646578 0a3b2932 75636f64 746e656d     xed(2);.document
   14484:	7465672e 6d656c45 42746e65 28644979     .getElementById(
   14494:	6c6f7627 6d642d74 2e29276d 756c6176     'volt-dmm').valu
   144a4:	203d2065 61746164 6c6f762e 4d4d4474     e = data.voltDMM
   144b4:	466f742e 64657869 3b293228 2f2f0a0a     .toFixed(2);..//
   144c4:	64705520 20657461 20656874 74617473      Update the stat
   144d4:	69207375 6369646e 726f7461 6c6f6320     us indicator col
   144e4:	6220726f 64657361 206e6f20 5374756f     or based on outS
   144f4:	65746174 6e6f630a 73207473 75746174     tate.const statu
   14504:	646e4973 74616369 3d20726f 636f6420     sIndicator = doc
   14514:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   14524:	64497942 74732728 73757461 646e692d     ById('status-ind
   14534:	74616369 2927726f 66690a3b 61642820     icator');.if (da
   14544:	6f2e6174 74537475 20657461 203d3d3d     ta.outState === 
   14554:	7b202930 6174730a 49737574 6369646e     0) {.statusIndic
   14564:	726f7461 7974732e 622e656c 676b6361     ator.style.backg
   14574:	6e756f72 203d2064 63632327 203b2763     round = '#ccc'; 
   14584:	67202f2f 0a796172 6c65207d 69206573     // gray.} else i
   14594:	64282066 2e617461 5374756f 65746174     f (data.outState
   145a4:	3d3d3d20 20293120 74730a7b 73757461      === 1) {.status
   145b4:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   145c4:	6b636162 756f7267 3d20646e 32232720     background = '#2
   145d4:	34376138 203b2735 67202f2f 6e656572     8a745'; // green
   145e4:	65207d0a 2065736c 28206669 61746164     .} else if (data
   145f4:	74756f2e 74617453 3d3d2065 2932203d     .outState === 2)
   14604:	730a7b20 75746174 646e4973 74616369      {.statusIndicat
   14614:	732e726f 656c7974 6361622e 6f72676b     or.style.backgro
   14624:	20646e75 2327203d 35336364 3b273534     und = '#dc3545';
   14634:	202f2f20 0a646572 2f0a0a7d 7055202f      // red.}..// Up
   14644:	65746164 65687420 72726520 6920726f     date the error i
   14654:	6369646e 726f7461 6c6f6320 6220726f     ndicator color b
   14664:	64657361 206e6f20 0a727265 736e6f63     ased on err.cons
   14674:	72652074 646e4972 74616369 3d20726f     t errIndicator =
   14684:	636f6420 6e656d75 65672e74 656c4574      document.getEle
   14694:	746e656d 64497942 72652728 6e692d72     mentById('err-in
   146a4:	61636964 27726f74 650a3b29 6e497272     dicator');.errIn
   146b4:	61636964 2e726f74 6c797473 61622e65     dicator.style.ba
   146c4:	72676b63 646e756f 64203d20 2e617461     ckground = data.
   146d4:	20727265 203d3d3d 203f2031 63642327     err === 1 ? '#dc
   146e4:	35343533 203a2027 63632327 203b2763     3545' : '#ccc'; 
   146f4:	72202f2f 69206465 72652066 2c726f72     // red if error,
   14704:	61726720 746f2079 77726568 0a657369      gray otherwise.
   14714:	202f2f0a 61647055 74206574 49206568     .// Update the I
   14724:	202c304e 2c314e49 324e4920 646e6920     N0, IN1, IN2 ind
   14734:	74616369 2073726f 65736162 6e6f2064     icators based on
   14744:	306e6920 6e69202c 69202c31 630a326e      in0, in1, in2.c
   14754:	74736e6f 306e6920 69646e49 6f746163     onst in0Indicato
   14764:	203d2072 75636f64 746e656d 7465672e     r = document.get
   14774:	6d656c45 42746e65 28644979 306e6927     ElementById('in0
   14784:	646e692d 74616369 2927726f 6f630a3b     -indicator');.co
   14794:	2074736e 49316e69 6369646e 726f7461     nst in1Indicator
   147a4:	64203d20 6d75636f 2e746e65 45746567      = document.getE
   147b4:	656d656c 7942746e 27286449 2d316e69     lementById('in1-
   147c4:	69646e69 6f746163 3b292772 6e6f630a     indicator');.con
   147d4:	69207473 6e49326e 61636964 20726f74     st in2Indicator 
   147e4:	6f64203d 656d7563 672e746e 6c457465     = document.getEl
   147f4:	6e656d65 49794274 69272864 692d326e     ementById('in2-i
   14804:	6369646e 726f7461 0a3b2927 306e690a     ndicator');..in0
   14814:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   14824:	6b636162 756f7267 3d20646e 74616420     background = dat
   14834:	6e692e61 3d3d2030 2031203d 2327203f     a.in0 === 1 ? '#
   14844:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   14854:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   14864:	65766974 7267202c 6f207961 72656874     tive, gray other
   14874:	65736977 316e690a 69646e49 6f746163     wise.in1Indicato
   14884:	74732e72 2e656c79 6b636162 756f7267     r.style.backgrou
   14894:	3d20646e 74616420 6e692e61 3d3d2031     nd = data.in1 ==
   148a4:	2031203d 2327203f 37613832 20273534     = 1 ? '#28a745' 
   148b4:	2327203a 27636363 2f2f203b 65726720     : '#ccc'; // gre
   148c4:	69206e65 63612066 65766974 7267202c     en if active, gr
   148d4:	6f207961 72656874 65736977 326e690a     ay otherwise.in2
   148e4:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   148f4:	6b636162 756f7267 3d20646e 74616420     background = dat
   14904:	6e692e61 3d3d2032 2031203d 2327203f     a.in2 === 1 ? '#
   14914:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   14924:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   14934:	65766974 7267202c 6f207961 72656874     tive, gray other
   14944:	65736977 2f2f0a0a 64705520 20657461     wise..// Update 
   14954:	20656874 63656863 786f626b 61747320     the checkbox sta
   14964:	62206574 64657361 206e6f20 6f6d6572     te based on remo
   14974:	74436574 640a6c72 6d75636f 2e746e65     teCtrl.document.
   14984:	45746567 656d656c 7942746e 27286449     getElementById('
   14994:	6f6d6572 632d6574 72746e6f 632d6c6f     remote-control-c
   149a4:	6b636568 27786f62 68632e29 656b6365     heckbox').checke
   149b4:	203d2064 61746164 6d65722e 3d3d3d20     d = data.rem ===
   149c4:	0a3b3120 2e0a297d 63746163 72652868      1;.})..catch(er
   149d4:	20726f72 63203e3d 6f736e6f 652e656c     ror => console.e
   149e4:	726f7272 72452728 20726f72 63746566     rror('Error fetc
   149f4:	676e6968 6c617620 3a736575 65202c27     hing values:', e
   14a04:	726f7272 0a3b2929 660a0a7d 74636e75     rror));.}..funct
   14a14:	206e6f69 56746573 65756c61 20292873     ion setValues() 
   14a24:	6f630a7b 2074736e 20706d61 6170203d     {.const amp = pa
   14a34:	46657372 74616f6c 636f6428 6e656d75     rseFloat(documen
   14a44:	65672e74 656c4574 746e656d 64497942     t.getElementById
   14a54:	6d612728 6e692d70 27747570 61762e29     ('amp-input').va
   14a64:	2965756c 6f630a3b 2074736e 746c6f76     lue);.const volt
   14a74:	70203d20 65737261 616f6c46 6f642874      = parseFloat(do
   14a84:	656d7563 672e746e 6c457465 6e656d65     cument.getElemen
   14a94:	49794274 76272864 2d746c6f 75706e69     tById('volt-inpu
   14aa4:	2e292774 756c6176 0a3b2965 63746566     t').value);.fetc
   14ab4:	2f602868 5f746573 736c6176 706d613f     h(`/set_vals?amp
   14ac4:	617b243d 267d706d 746c6f76 767b243d     =${amp}&volt=${v
   14ad4:	7d746c6f 2e0a2960 6e656874 73657228     olt}`)..then(res
   14ae4:	736e6f70 3e3d2065 73657220 736e6f70     ponse => respons
   14af4:	736a2e65 29286e6f 742e0a29 286e6568     e.json())..then(
   14b04:	61746164 203e3d20 66690a7b 61642820     data => {.if (da
   14b14:	732e6174 65636375 20297373 65660a7b     ta.success) {.fe
   14b24:	56686374 65756c61 3b292873 65207d0a     tchValues();.} e
   14b34:	2065736c 6c610a7b 28747265 72724527     lse {.alert('Err
   14b44:	7320726f 69747465 7620676e 65756c61     or setting value
   14b54:	3b292773 7d0a7d0a 632e0a29 68637461     s');.}.})..catch
   14b64:	72726528 3d20726f 6f63203e 6c6f736e     (error => consol
   14b74:	72652e65 28726f72 72724527 7320726f     e.error('Error s
   14b84:	69747465 7620676e 65756c61 2c273a73     etting values:',
   14b94:	72726520 2929726f 0a7d0a3b 6e75660a      error));.}..fun
   14ba4:	6f697463 6f63206e 6f72746e 7665446c     ction controlDev
   14bb4:	28656369 69766564 202c6563 69746361     ice(device, acti
   14bc4:	20296e6f 65660a7b 28686374 6f632f60     on) {.fetch(`/co
   14bd4:	6f72746e 65643f6c 65636976 647b243d     ntrol?device=${d
   14be4:	63697665 61267d65 6f697463 7b243d6e     evice}&action=${
   14bf4:	69746361 607d6e6f 742e0a29 286e6568     action}`)..then(
   14c04:	70736572 65736e6f 203e3d20 70736572     response => resp
   14c14:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   14c24:	64286e65 20617461 7b203e3d 2066690a     en(data => {.if 
   14c34:	74616428 75732e61 73656363 7b202973     (data.success) {
   14c44:	656c610a 60287472 65647b24 65636976     .alert(`${device
   14c54:	556f742e 72657070 65736143 207d2928     .toUpperCase()} 
   14c64:	63617b24 6e6f6974 556f742e 72657070     ${action.toUpper
   14c74:	65736143 207d2928 63637553 66737365     Case()} Successf
   14c84:	29606c75 207d0a3b 65736c65 610a7b20     ul`);.} else {.a
   14c94:	7472656c 72456028 20726f72 63617b24     lert(`Error ${ac
   14ca4:	6e6f6974 676e697d 647b2420 63697665     tion}ing ${devic
   14cb4:	29607d65 0a7d0a3b 2e0a297d 63746163     e}`);.}.})..catc
   14cc4:	72652868 20726f72 63203e3d 6f736e6f     h(error => conso
   14cd4:	652e656c 726f7272 72456028 20726f72     le.error(`Error 
   14ce4:	63617b24 6e6f6974 676e697d 647b2420     ${action}ing ${d
   14cf4:	63697665 603a7d65 7265202c 29726f72     evice}:`, error)
   14d04:	7d0a3b29 75660a0a 6974636e 73206e6f     );.}..function s
   14d14:	72507465 74657365 65727028 29746573     etPreset(preset)
   14d24:	6c0a7b20 61207465 202c706d 746c6f76      {.let amp, volt
   14d34:	66690a3b 72702820 74657365 203d3d20     ;.if (preset == 
   14d44:	7b202931 706d610a 31203d20 3b35322e     1) {.amp = 1.25;
   14d54:	6c6f760a 203d2074 3b332e35 65207d0a     .volt = 5.3;.} e
   14d64:	2065736c 28206669 73657270 3d207465     lse if (preset =
   14d74:	2932203d 610a7b20 3d20706d 302e3220     = 2) {.amp = 2.0
   14d84:	6f760a3b 3d20746c 2e323120 7d0a3b30     ;.volt = 12.0;.}
   14d94:	736c6520 66692065 72702820 74657365      else if (preset
   14da4:	203d3d20 7b202933 706d610a 32203d20      == 3) {.amp = 2
   14db4:	0a3b302e 746c6f76 32203d20 3b302e34     .0;.volt = 24.0;
   14dc4:	640a7d0a 6d75636f 2e746e65 45746567     .}.document.getE
   14dd4:	656d656c 7942746e 27286449 2d706d61     lementById('amp-
   14de4:	75706e69 2e292774 756c6176 203d2065     input').value = 
   14df4:	3b706d61 636f640a 6e656d75 65672e74     amp;.document.ge
   14e04:	656c4574 746e656d 64497942 6f762728     tElementById('vo
   14e14:	692d746c 7475706e 762e2927 65756c61     lt-input').value
   14e24:	76203d20 3b746c6f 7465730a 756c6156      = volt;.setValu
   14e34:	29287365 0a7d0a3b 636f640a 6e656d75     es();.}..documen
   14e44:	65672e74 656c4574 746e656d 64497942     t.getElementById
   14e54:	65722728 65746f6d 6e6f632d 6c6f7274     ('remote-control
   14e64:	6568632d 6f626b63 2e292778 45646461     -checkbox').addE
   14e74:	746e6576 7473694c 72656e65 68632728     ventListener('ch
   14e84:	65676e61 66202c27 74636e75 286e6f69     ange', function(
   14e94:	0a7b2029 736e6f63 63612074 6e6f6974     ) {.const action
   14ea4:	74203d20 2e736968 63656863 2064656b      = this.checked 
   14eb4:	6f27203f 3a20276e 666f2720 0a3b2766     ? 'on' : 'off';.
   14ec4:	63746566 2f602868 746e6f63 3f6c6f72     fetch(`/control?
   14ed4:	69766564 723d6563 61266d65 6f697463     device=rem&actio
   14ee4:	7b243d6e 69746361 607d6e6f 742e0a29     n=${action}`)..t
   14ef4:	286e6568 70736572 65736e6f 203e3d20     hen(response => 
   14f04:	70736572 65736e6f 6f736a2e 2929286e     response.json())
   14f14:	68742e0a 64286e65 20617461 7b203e3d     ..then(data => {
   14f24:	2066690a 74616428 75732e61 73656363     .if (data.succes
   14f34:	7b202973 6e6f630a 656c6f73 676f6c2e     s) {.console.log
   14f44:	65526028 65746f6d 6e6f6320 6c6f7274     (`Remote control
   14f54:	617b2420 6f697463 73207d6e 65636375      ${action} succe
   14f64:	75667373 3b29606c 65207d0a 2065736c     ssful`);.} else 
   14f74:	6c610a7b 28747265 72724560 2420726f     {.alert(`Error $
   14f84:	7463617b 7d6e6f69 20676e69 6f6d6572     {action}ing remo
   14f94:	63206574 72746e6f 29606c6f 0a7d0a3b     te control`);.}.
   14fa4:	2e0a297d 63746163 72652868 20726f72     })..catch(error 
   14fb4:	63203e3d 6f736e6f 652e656c 726f7272     => console.error
   14fc4:	72456028 20726f72 63617b24 6e6f6974     (`Error ${action
   14fd4:	676e697d 6d657220 2065746f 746e6f63     }ing remote cont
   14fe4:	3a6c6f72 65202c60 726f7272 0a3b2929     rol:`, error));.
   14ff4:	0a3b297d 7465730a 65746e49 6c617672     });..setInterval
   15004:	74656628 61566863 7365756c 3031202c     (fetchValues, 10
   15014:	3b293030 732f3c0a 70697263 3c0a3e74     00);.</script>.<
   15024:	646f622f 3c0a3e79 6d74682f 000a3e6c     /body>.</html>..
   15034:	000069e8 00006938 00006938 00006936     .i..8i..8i..6i..
   15044:	000069da 000069da 000069d0 00006936     .i...i...i..6i..
   15054:	000069da 000069d0 000069da 00006936     .i...i...i..6i..
   15064:	000069e0 000069e0 000069e0 00006a70     .i...i...i..pj..
   15074:	00007314 000072f6 000072b0 000071ce     .s...r...r...q..
   15084:	000072b0 000072e8 000072b0 000071ce     .r...r...r...q..
   15094:	000072f6 000072f6 000072e8 000071ce     .r...r...r...q..
   150a4:	000071c6 000071c6 000071c6 0000752c     .q...q...q..,u..
   150b4:	00007974 00007834 00007834 00007830     ty..4x..4x..0x..
   150c4:	0000794c 0000794c 0000793e 00007830     Ly..Ly..>y..0x..
   150d4:	0000794c 0000793e 0000794c 00007830     Ly..>y..Ly..0x..
   150e4:	00007954 00007954 00007954 00007b58     Ty..Ty..Ty..X{..

000150f4 <_global_impure_ptr>:
   150f4:	20000088 00009a94 00009b08 00009b08     ... ............
   15104:	00009a78 00009b08 00009b08 00009b08     x...............
   15114:	00009b08 00009b08 00009b08 00009a80     ................
   15124:	00009562 00009b08 0000951c 0000956c     b...........l...
   15134:	00009b08 000095b8 000097a2 000097a2     ................
   15144:	000097a2 000097a2 000097a2 000097a2     ................
   15154:	000097a2 000097a2 000097a2 00009b08     ................
   15164:	00009b08 00009b08 00009b08 00009b08     ................
   15174:	00009b08 00009b08 00009b08 00009b08     ................
   15184:	00009b08 000095c0 00009708 00009b08     ................
   15194:	00009708 00009b08 00009b08 00009b08     ................
   151a4:	00009b08 000097d2 00009b08 00009b08     ................
   151b4:	000097da 00009b08 00009b08 00009b08     ................
   151c4:	00009b08 00009b08 0000987c 00009b08     ........|.......
   151d4:	00009b08 000098ae 00009b08 00009b08     ................
   151e4:	00009b08 00009b08 00009b08 00009b08     ................
   151f4:	00009b08 00009b08 00009b08 00009b08     ................
   15204:	000099a8 000099dc 00009708 00009708     ................
   15214:	00009708 000099ee 000099dc 00009b08     ................
   15224:	00009b08 000099f6 00009b08 00009910     ................
   15234:	00009ad6 00009a4c 00009946 00009b08     ....L...F.......
   15244:	0000994e 00009b08 00009aa4 00009b08     N...............
   15254:	00009b08 00009a06 00464e49 00666e69     ........INF.inf.
   15264:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   15274:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   15284:	37363534 62613938 66656463 00000000     456789abcdef....
   15294:	6c756e28 0000296c 00000030              (null)..0...

000152a0 <blanks.7223>:
   152a0:	20202020 20202020 20202020 20202020                     

000152b0 <zeroes.7224>:
   152b0:	30303030 30303030 30303030 30303030     0000000000000000
   152c0:	0000ab80 0000acc0 0000acc0 0000acc0     ................
   152d0:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   152e0:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   152f0:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15300:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15310:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15320:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15330:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15340:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15350:	0000acc0 0000ab1c 0000acc0 0000acc0     ................
   15360:	0000acc0 0000acc0 0000adca 0000acc0     ................
   15370:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15380:	0000adae 0000adae 0000adae 0000adae     ................
   15390:	0000adae 0000adae 0000adae 0000adae     ................
   153a0:	0000adae 0000adae 0000acc0 0000acc0     ................
   153b0:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   153c0:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   153d0:	0000ada0 0000ad7e 0000acc0 0000ad7e     ....~.......~...
   153e0:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   153f0:	0000ad78 0000acc0 0000acc0 0000ad6c     x...........l...
   15400:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15410:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15420:	0000ad66 0000acc0 0000acc0 0000ad4a     f...........J...
   15430:	0000acc0 0000acc0 0000acc0 0000acc0     ................
   15440:	0000acc0 0000acc0 0000acc0 0000ad3a     ............:...
   15450:	0000ad34 0000ad7e 0000ad7e 0000ad7e     4...~...~...~...
   15460:	0000ad24 0000ab88 0000acc0 0000acc0     $...............
   15470:	0000ac9c 0000acc0 0000acea 0000acda     ................
   15480:	0000ac82 0000acc0 0000acc0 0000ac7a     ............z...
   15490:	0000acc0 0000abd8 0000acc0 0000acc0     ................
   154a0:	0000ad66 0000ae4a 0000b020 0000ae4a     f...J... ...J...
   154b0:	0000b020 0000b020 0000ae0e 0000add2      ... ...........
   154c0:	0000add2 0000add2 0000add2 0000add2     ................
   154d0:	0000add2 0000add2 0000add2 0000add2     ................
   154e0:	0000b020 0000b020 0000b020 0000b020      ... ... ... ...
   154f0:	0000b020 0000b020 0000b020 0000b004      ... ... .......
   15500:	0000b020 0000b020 0000b020 0000afba      ... ... .......
   15510:	0000afac 0000b020 0000b020 0000ae94     .... ... .......
   15520:	0000b020 0000b020 0000b020 0000b020      ... ... ... ...
   15530:	0000ae64 0000b020 0000b020 0000b020     d... ... ... ...
   15540:	0000b020 0000b020 0000ae58 0000b020      ... ...X... ...
   15550:	0000b020 0000b020 0000b020 0000b012      ... ... .......
   15560:	0000b020 0000b020 0000b020 0000b020      ... ... ... ...
   15570:	0000b020 0000b020 0000b020 0000b004      ... ... .......
   15580:	0000b020 0000b020 0000b020 0000afba      ... ... .......
   15590:	0000afac 0000b020 0000b020 0000ae94     .... ... .......
   155a0:	0000b020 0000b020 0000b020 0000b020      ... ... ... ...
   155b0:	0000ae64 0000b020 0000b020 0000b020     d... ... ... ...
   155c0:	0000b020 0000b020 0000ae58 0000b020      ... ...X... ...
   155d0:	0000b020 0000b020 0000b020 0000b012      ... ... .......
   155e0:	0000b24a 0000b1a2 0000b24a 0000b1a2     J.......J.......
   155f0:	0000b1a2 0000b1ee 0000b1de 0000b1de     ................
   15600:	0000b1de 0000b1de 0000b1de 0000b1de     ................
   15610:	0000b1de 0000b23a 0000b23a 0000b1a2     ....:...:.......
   15620:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   15630:	0000b1a2 0000b1a2 0000b1d2 0000b1d2     ................
   15640:	0000b1d2 0000b1d2 0000b1d2 0000b1d2     ................
   15650:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   15660:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   15670:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   15680:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   15690:	0000b1a2 0000b16e 0000b1a2 0000b1a2     ....n...........
   156a0:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   156b0:	0000b1a2 0000b1a2 0000b1d2 0000b1d2     ................
   156c0:	0000b1d2 0000b1d2 0000b1d2 0000b1d2     ................
   156d0:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   156e0:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   156f0:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   15700:	0000b1a2 0000b1a2 0000b1a2 0000b1a2     ................
   15710:	0000b1a2 0000b16e 646c2565 00000000     ....n...e%ld....

00015720 <basefix.7294>:
   15720:	0001000a 00030002 00050004 00070006     ................
   15730:	00090008 000b000a 000d000c 000f000e     ................
   15740:	00000010 0000be2e 0000bf02 0000bf02     ................
   15750:	0000be1a 0000bf02 0000bf02 0000bf02     ................
   15760:	0000bf02 0000bf02 0000bf02 0000bed4     ................
   15770:	0000b9e6 0000bf02 0000b9dc 0000b9f0     ................
   15780:	0000bf02 0000be24 0000bbb0 0000bbb0     ....$...........
   15790:	0000bbb0 0000bbb0 0000bbb0 0000bbb0     ................
   157a0:	0000bbb0 0000bbb0 0000bbb0 0000bf02     ................
   157b0:	0000bf02 0000bf02 0000bf02 0000bf02     ................
   157c0:	0000bf02 0000bf02 0000bf02 0000bf02     ................
   157d0:	0000bf02 0000beea 0000be3e 0000bf02     ........>.......
   157e0:	0000be3e 0000bf02 0000bf02 0000bf02     >...............
   157f0:	0000bf02 0000bda4 0000bf02 0000bf02     ................
   15800:	0000bdae 0000bf02 0000bf02 0000bf02     ................
   15810:	0000bf02 0000bf02 0000bddc 0000bf02     ................
   15820:	0000bf02 0000be0a 0000bf02 0000bf02     ................
   15830:	0000bf02 0000bf02 0000bf02 0000bf02     ................
   15840:	0000bf02 0000bf02 0000bf02 0000bf02     ................
   15850:	0000bbf0 0000bc26 0000be3e 0000be3e     ....&...>...>...
   15860:	0000be3e 0000bcce 0000bc26 0000bf02     >.......&.......
   15870:	0000bf02 0000bcd8 0000bf02 0000bcea     ................
   15880:	0000befe 0000bd18 0000bd42 0000bf02     ........B.......
   15890:	0000bd4c 0000bf02 0000befa 0000bf02     L...............
   158a0:	0000bf02 0000ba3e                       ....>...

000158a8 <blanks.7238>:
   158a8:	20202020 20202020 20202020 20202020                     

000158b8 <zeroes.7239>:
   158b8:	30303030 30303030 30303030 30303030     0000000000000000
   158c8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   158d8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000158e8 <__mprec_bigtens>:
   158e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   158f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15908:	7f73bf3c 75154fdd                       <.s..O.u

00015910 <__mprec_tens>:
   15910:	00000000 3ff00000 00000000 40240000     .......?......$@
   15920:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15930:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   15940:	00000000 412e8480 00000000 416312d0     .......A......cA
   15950:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   15960:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   15970:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   15980:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   15990:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   159a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   159b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   159c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   159d0:	79d99db4 44ea7843                       ...yCx.D

000159d8 <p05.6055>:
   159d8:	00000005 00000019 0000007d 000101e0     ........}.......
   159e8:	0001027a 0001027a 0001027a 0001027a     z...z...z...z...
   159f8:	0001027a 0001027a 0001027a 0001027a     z...z...z...z...
   15a08:	0001026e 0001026e 0001026e 0001026e     n...n...n...n...
   15a18:	0001026e 0001027a 0001027a 0001027a     n...z...z...z...
   15a28:	0001027a 0001027a 0001027a 0001027a     z...z...z...z...
   15a38:	0001027a 0001027a 0001027a 0001027a     z...z...z...z...
   15a48:	0001027a 0001027a 0001027a 0001027a     z...z...z...z...
   15a58:	0001027a 0001027a 0001027a 0001026e     z...z...z...n...
   15a68:	0001027a 0001027a 0001027a 0001027a     z...z...z...z...
   15a78:	0001027a 0001027a 0001027a 0001027a     z...z...z...z...
   15a88:	0001027a 0001027a 00010214 0001027a     z...z.......z...
   15a98:	000102b6 00010c0c 00010c2e 00010c24     ............$...
   15aa8:	00010c1e 00010c02 00010c2e 0000666e     ............nf..
   15ab8:	74696e69 00000079 00006e61              inity...an..

00015ac4 <fpi.6141>:
   15ac4:	00000035 fffffbce 000003cb 00000001     5...............
   15ad4:	00000000                                ....

00015ad8 <fpinan.6177>:
   15ad8:	00000034 fffffbce 000003cb 00000001     4...............
	...

00015af0 <tinytens>:
   15af0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   15b00:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   15b10:	64ac6f43 11680628                       Co.d(.h.

00015b18 <_ctype_>:
   15b18:	20202000 20202020 28282020 20282828     .         ((((( 
   15b28:	20202020 20202020 20202020 20202020                     
   15b38:	10108820 10101010 10101010 10101010      ...............
   15b48:	04040410 04040404 10040404 10101010     ................
   15b58:	41411010 41414141 01010101 01010101     ..AAAAAA........
   15b68:	01010101 01010101 01010101 10101010     ................
   15b78:	42421010 42424242 02020202 02020202     ..BBBBBB........
   15b88:	02020202 02020202 02020202 10101010     ................
   15b98:	00000020 00000000 00000000 00000000      ...............
	...

00015c1c <__hexdig>:
	...
   15c4c:	13121110 17161514 00001918 00000000     ................
   15c5c:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
   15c7c:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

00015d1c <_init>:
   15d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d1e:	46c0      	nop			; (mov r8, r8)
   15d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
   15d22:	bc08      	pop	{r3}
   15d24:	469e      	mov	lr, r3
   15d26:	4770      	bx	lr

00015d28 <__init_array_start>:
   15d28:	0000d129 	.word	0x0000d129

00015d2c <__frame_dummy_init_array_entry>:
   15d2c:	000000cd                                ....

00015d30 <_fini>:
   15d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d32:	46c0      	nop			; (mov r8, r8)
   15d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   15d36:	bc08      	pop	{r3}
   15d38:	469e      	mov	lr, r3
   15d3a:	4770      	bx	lr

00015d3c <__fini_array_start>:
   15d3c:	000000a5 	.word	0x000000a5
