
PSU_ETH_Controller_s21_async_ser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00019788  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00019788  00019788  00029788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a38  20000000  00019790  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000ec8  20000a38  0001a1c8  00030a38  2**2
                  ALLOC
  4 .stack        00002000  20001900  0001b090  00030a38  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00030a38  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a62  2**0
                  CONTENTS, READONLY
  7 .debug_info   0005390c  00000000  00000000  00030abb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000063dc  00000000  00000000  000843c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00031d3a  00000000  00000000  0008a7a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001188  00000000  00000000  000bc4dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00007240  00000000  00000000  000bd665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b3f4  00000000  00000000  000c48a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a70a  00000000  00000000  000cfc99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00064560  00000000  00000000  000ea3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000502c  00000000  00000000  0014e904  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
The user must provide a valid pointer to an empty
ADS1x1x_config_t structure.
*/
/**************************************************************************/
uint8_t ADS1x1x_init(ADS1x1x_config_t *p_config, ADS1x1x_chip_t chip, uint8_t i2c_address, ADS1x1x_mux_t input, ADS1x1x_pga_t gain)
{
       0:	00 39 00 20 09 01 00 00 05 01 00 00 05 01 00 00     .9. ............
	...


void ADS1x1x_set_config_bitfield(ADS1x1x_config_t *p_config, uint16_t value, uint16_t mask)
{
	p_config->config &= ~mask;
	p_config->config |= (value & mask);
      2c:	05 01 00 00 00 00 00 00 00 00 00 00 05 01 00 00     ................
      3c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      4c:	e1 0e 00 00 dd 0c 00 00 05 01 00 00 05 01 00 00     ................
      5c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      6c:	61 10 00 00 05 01 00 00 05 01 00 00 05 01 00 00     a...............
      7c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      8c:	fd 18 00 00 35 19 00 00 05 01 00 00 05 01 00 00     ....5...........
      9c:	05 01 00 00 05 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000a38 	.word	0x20000a38
      c4:	00000000 	.word	0x00000000
      c8:	00019790 	.word	0x00019790

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000a3c 	.word	0x20000a3c
      f8:	00019790 	.word	0x00019790
      fc:	00019790 	.word	0x00019790
     100:	00000000 	.word	0x00000000

00000104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     104:	e7fe      	b.n	104 <Dummy_Handler>
     106:	46c0      	nop			; (mov r8, r8)

00000108 <Reset_Handler>:
        if (pSrc != pDest) {
     108:	4914      	ldr	r1, [pc, #80]	; (15c <Reset_Handler+0x54>)
     10a:	4815      	ldr	r0, [pc, #84]	; (160 <Reset_Handler+0x58>)
{
     10c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     10e:	4281      	cmp	r1, r0
     110:	d009      	beq.n	126 <Reset_Handler+0x1e>
                for (; pDest < &_erelocate;) {
     112:	4b14      	ldr	r3, [pc, #80]	; (164 <Reset_Handler+0x5c>)
     114:	4298      	cmp	r0, r3
     116:	d206      	bcs.n	126 <Reset_Handler+0x1e>
                        *pDest++ = *pSrc++;
     118:	43c2      	mvns	r2, r0
     11a:	18d2      	adds	r2, r2, r3
     11c:	0892      	lsrs	r2, r2, #2
     11e:	3201      	adds	r2, #1
     120:	0092      	lsls	r2, r2, #2
     122:	4b11      	ldr	r3, [pc, #68]	; (168 <Reset_Handler+0x60>)
     124:	4798      	blx	r3
        for (pDest = &_szero; pDest < &_ezero;) {
     126:	4811      	ldr	r0, [pc, #68]	; (16c <Reset_Handler+0x64>)
     128:	4b11      	ldr	r3, [pc, #68]	; (170 <Reset_Handler+0x68>)
     12a:	4298      	cmp	r0, r3
     12c:	d207      	bcs.n	13e <Reset_Handler+0x36>
                *pDest++ = 0;
     12e:	43c2      	mvns	r2, r0
     130:	18d2      	adds	r2, r2, r3
     132:	0892      	lsrs	r2, r2, #2
     134:	3201      	adds	r2, #1
     136:	0092      	lsls	r2, r2, #2
     138:	2100      	movs	r1, #0
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <Reset_Handler+0x6c>)
     13c:	4798      	blx	r3
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     13e:	21ff      	movs	r1, #255	; 0xff
     140:	4b0d      	ldr	r3, [pc, #52]	; (178 <Reset_Handler+0x70>)
     142:	4a0e      	ldr	r2, [pc, #56]	; (17c <Reset_Handler+0x74>)
     144:	438b      	bics	r3, r1
     146:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     148:	4a0d      	ldr	r2, [pc, #52]	; (180 <Reset_Handler+0x78>)
     14a:	397f      	subs	r1, #127	; 0x7f
     14c:	6853      	ldr	r3, [r2, #4]
     14e:	430b      	orrs	r3, r1
     150:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     152:	4b0c      	ldr	r3, [pc, #48]	; (184 <Reset_Handler+0x7c>)
     154:	4798      	blx	r3
        main();
     156:	4b0c      	ldr	r3, [pc, #48]	; (188 <Reset_Handler+0x80>)
     158:	4798      	blx	r3
     15a:	e7fe      	b.n	15a <Reset_Handler+0x52>
     15c:	00019790 	.word	0x00019790
     160:	20000000 	.word	0x20000000
     164:	20000a38 	.word	0x20000a38
     168:	0000b5f9 	.word	0x0000b5f9
     16c:	20000a38 	.word	0x20000a38
     170:	20001900 	.word	0x20001900
     174:	0000b67d 	.word	0x0000b67d
     178:	00000000 	.word	0x00000000
     17c:	e000ed00 	.word	0xe000ed00
     180:	41004000 	.word	0x41004000
     184:	0000afe9 	.word	0x0000afe9
     188:	00008f7d 	.word	0x00008f7d

0000018c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     18c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     190:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     192:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     194:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     198:	4770      	bx	lr
     19a:	46c0      	nop			; (mov r8, r8)

0000019c <atomic_leave_critical>:
     19c:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     1a0:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     1a2:	f383 8810 	msr	PRIMASK, r3
}
     1a6:	4770      	bx	lr

000001a8 <delay_us>:
/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
	_delay_cycles(hardware, _get_cycles_for_us(us));
     1a8:	4b04      	ldr	r3, [pc, #16]	; (1bc <delay_us+0x14>)
{
     1aa:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     1ac:	681c      	ldr	r4, [r3, #0]
     1ae:	4b04      	ldr	r3, [pc, #16]	; (1c0 <delay_us+0x18>)
     1b0:	4798      	blx	r3
     1b2:	4b04      	ldr	r3, [pc, #16]	; (1c4 <delay_us+0x1c>)
     1b4:	0001      	movs	r1, r0
     1b6:	0020      	movs	r0, r4
     1b8:	4798      	blx	r3
}
     1ba:	bd10      	pop	{r4, pc}
     1bc:	20000a54 	.word	0x20000a54
     1c0:	00000bb9 	.word	0x00000bb9
     1c4:	00000bed 	.word	0x00000bed

000001c8 <delay_ms>:
/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     1c8:	4b04      	ldr	r3, [pc, #16]	; (1dc <delay_ms+0x14>)
{
     1ca:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     1cc:	681c      	ldr	r4, [r3, #0]
     1ce:	4b04      	ldr	r3, [pc, #16]	; (1e0 <delay_ms+0x18>)
     1d0:	4798      	blx	r3
     1d2:	4b04      	ldr	r3, [pc, #16]	; (1e4 <delay_ms+0x1c>)
     1d4:	0001      	movs	r1, r0
     1d6:	0020      	movs	r0, r4
     1d8:	4798      	blx	r3
}
     1da:	bd10      	pop	{r4, pc}
     1dc:	20000a54 	.word	0x20000a54
     1e0:	00000bd1 	.word	0x00000bd1
     1e4:	00000bed 	.word	0x00000bed

000001e8 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     1e8:	b510      	push	{r4, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     1ea:	4c0d      	ldr	r4, [pc, #52]	; (220 <process_ext_irq+0x38>)
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     1ec:	2201      	movs	r2, #1
		if (ext_irqs[middle].pin == pin) {
     1ee:	6861      	ldr	r1, [r4, #4]
	while (upper >= lower) {
     1f0:	e004      	b.n	1fc <process_ext_irq+0x14>
     1f2:	4281      	cmp	r1, r0
     1f4:	d00c      	beq.n	210 <process_ext_irq+0x28>
		}

		if (ext_irqs[middle].pin < pin) {
			lower = middle + 1;
		} else {
			upper = middle - 1;
     1f6:	22ff      	movs	r2, #255	; 0xff
		middle = (upper + lower) >> 1;
     1f8:	105b      	asrs	r3, r3, #1
		if (middle >= EXT_IRQ_AMOUNT) {
     1fa:	d108      	bne.n	20e <process_ext_irq+0x26>
     1fc:	0013      	movs	r3, r2
     1fe:	4281      	cmp	r1, r0
     200:	d2f7      	bcs.n	1f2 <process_ext_irq+0xa>
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     202:	2300      	movs	r3, #0
		middle = (upper + lower) >> 1;
     204:	189b      	adds	r3, r3, r2
     206:	1059      	asrs	r1, r3, #1
			lower = middle + 1;
     208:	2301      	movs	r3, #1
		if (middle >= EXT_IRQ_AMOUNT) {
     20a:	2900      	cmp	r1, #0
     20c:	d0fa      	beq.n	204 <process_ext_irq+0x1c>
		}
	}
}
     20e:	bd10      	pop	{r4, pc}
		middle = (upper + lower) >> 1;
     210:	1052      	asrs	r2, r2, #1
		if (middle >= EXT_IRQ_AMOUNT) {
     212:	d1fc      	bne.n	20e <process_ext_irq+0x26>
			if (ext_irqs[middle].cb) {
     214:	6823      	ldr	r3, [r4, #0]
     216:	2b00      	cmp	r3, #0
     218:	d0f9      	beq.n	20e <process_ext_irq+0x26>
				ext_irqs[middle].cb();
     21a:	4798      	blx	r3
     21c:	e7f7      	b.n	20e <process_ext_irq+0x26>
     21e:	46c0      	nop			; (mov r8, r8)
     220:	20000a58 	.word	0x20000a58

00000224 <ext_irq_init>:
		ext_irqs[i].pin = 0xFFFFFFFF;
     224:	2201      	movs	r2, #1
     226:	4b05      	ldr	r3, [pc, #20]	; (23c <ext_irq_init+0x18>)
     228:	4252      	negs	r2, r2
{
     22a:	b510      	push	{r4, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     22c:	605a      	str	r2, [r3, #4]
		ext_irqs[i].cb  = NULL;
     22e:	2200      	movs	r2, #0
	return _ext_irq_init(process_ext_irq);
     230:	4803      	ldr	r0, [pc, #12]	; (240 <ext_irq_init+0x1c>)
		ext_irqs[i].cb  = NULL;
     232:	601a      	str	r2, [r3, #0]
	return _ext_irq_init(process_ext_irq);
     234:	4b03      	ldr	r3, [pc, #12]	; (244 <ext_irq_init+0x20>)
     236:	4798      	blx	r3
}
     238:	bd10      	pop	{r4, pc}
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	20000a58 	.word	0x20000a58
     240:	000001e9 	.word	0x000001e9
     244:	00000c2d 	.word	0x00000c2d

00000248 <ext_irq_register>:
		if (ext_irqs[i].pin == pin) {
     248:	4b0d      	ldr	r3, [pc, #52]	; (280 <ext_irq_register+0x38>)
{
     24a:	b510      	push	{r4, lr}
		if (ext_irqs[i].pin == pin) {
     24c:	685a      	ldr	r2, [r3, #4]
     24e:	4282      	cmp	r2, r0
     250:	d00d      	beq.n	26e <ext_irq_register+0x26>
	if (NULL == cb) {
     252:	2900      	cmp	r1, #0
     254:	d002      	beq.n	25c <ext_irq_register+0x14>
			if (NULL == ext_irqs[i].cb) {
     256:	681a      	ldr	r2, [r3, #0]
     258:	2a00      	cmp	r2, #0
     25a:	d002      	beq.n	262 <ext_irq_register+0x1a>
			return ERR_INVALID_ARG;
     25c:	200d      	movs	r0, #13
     25e:	4240      	negs	r0, r0
}
     260:	bd10      	pop	{r4, pc}
				ext_irqs[i].cb  = cb;
     262:	6019      	str	r1, [r3, #0]
				ext_irqs[i].pin = pin;
     264:	6058      	str	r0, [r3, #4]
	return _ext_irq_enable(pin, true);
     266:	2101      	movs	r1, #1
     268:	4b06      	ldr	r3, [pc, #24]	; (284 <ext_irq_register+0x3c>)
     26a:	4798      	blx	r3
     26c:	e7f8      	b.n	260 <ext_irq_register+0x18>
			ext_irqs[i].cb = cb;
     26e:	6019      	str	r1, [r3, #0]
	if (NULL == cb) {
     270:	2900      	cmp	r1, #0
     272:	d1f8      	bne.n	266 <ext_irq_register+0x1e>
		return _ext_irq_enable(pin, false);
     274:	2100      	movs	r1, #0
     276:	0010      	movs	r0, r2
     278:	4b02      	ldr	r3, [pc, #8]	; (284 <ext_irq_register+0x3c>)
     27a:	4798      	blx	r3
     27c:	e7f0      	b.n	260 <ext_irq_register+0x18>
     27e:	46c0      	nop			; (mov r8, r8)
     280:	20000a58 	.word	0x20000a58
     284:	00000cb1 	.word	0x00000cb1

00000288 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     288:	b510      	push	{r4, lr}
     28a:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     28c:	3814      	subs	r0, #20
     28e:	8b82      	ldrh	r2, [r0, #28]
{
     290:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     292:	ab01      	add	r3, sp, #4
     294:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
	msg.flags  = I2C_M_STOP;
     296:	4a06      	ldr	r2, [pc, #24]	; (2b0 <i2c_m_sync_write+0x28>)
	msg.buffer = (uint8_t *)buf;
     298:	9103      	str	r1, [sp, #12]
	msg.flags  = I2C_M_STOP;
     29a:	805a      	strh	r2, [r3, #2]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     29c:	0019      	movs	r1, r3
     29e:	4b05      	ldr	r3, [pc, #20]	; (2b4 <i2c_m_sync_write+0x2c>)
	msg.len    = n;
     2a0:	9402      	str	r4, [sp, #8]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     2a2:	4798      	blx	r3

	if (ret) {
     2a4:	2800      	cmp	r0, #0
     2a6:	d100      	bne.n	2aa <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     2a8:	0020      	movs	r0, r4
}
     2aa:	b004      	add	sp, #16
     2ac:	bd10      	pop	{r4, pc}
     2ae:	46c0      	nop			; (mov r8, r8)
     2b0:	ffff8000 	.word	0xffff8000
     2b4:	000011d1 	.word	0x000011d1

000002b8 <i2c_m_sync_read>:
{
     2b8:	b510      	push	{r4, lr}
     2ba:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     2bc:	3814      	subs	r0, #20
     2be:	8b82      	ldrh	r2, [r0, #28]
{
     2c0:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     2c2:	ab01      	add	r3, sp, #4
     2c4:	801a      	strh	r2, [r3, #0]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     2c6:	4a06      	ldr	r2, [pc, #24]	; (2e0 <i2c_m_sync_read+0x28>)
	msg.buffer = buf;
     2c8:	9103      	str	r1, [sp, #12]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     2ca:	805a      	strh	r2, [r3, #2]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     2cc:	0019      	movs	r1, r3
     2ce:	4b05      	ldr	r3, [pc, #20]	; (2e4 <i2c_m_sync_read+0x2c>)
	msg.len    = n;
     2d0:	9402      	str	r4, [sp, #8]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     2d2:	4798      	blx	r3
	if (ret) {
     2d4:	2800      	cmp	r0, #0
     2d6:	d100      	bne.n	2da <i2c_m_sync_read+0x22>
	return n;
     2d8:	0020      	movs	r0, r4
}
     2da:	b004      	add	sp, #16
     2dc:	bd10      	pop	{r4, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	ffff8001 	.word	0xffff8001
     2e4:	000011d1 	.word	0x000011d1

000002e8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     2e8:	b570      	push	{r4, r5, r6, lr}
     2ea:	0004      	movs	r4, r0
	int32_t init_status;
	ASSERT(i2c);
     2ec:	1e43      	subs	r3, r0, #1
     2ee:	4198      	sbcs	r0, r3
{
     2f0:	000d      	movs	r5, r1
	ASSERT(i2c);
     2f2:	b2c0      	uxtb	r0, r0
     2f4:	4907      	ldr	r1, [pc, #28]	; (314 <i2c_m_sync_init+0x2c>)
     2f6:	4b08      	ldr	r3, [pc, #32]	; (318 <i2c_m_sync_init+0x30>)
     2f8:	225e      	movs	r2, #94	; 0x5e
     2fa:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     2fc:	0029      	movs	r1, r5
     2fe:	0020      	movs	r0, r4
     300:	4b06      	ldr	r3, [pc, #24]	; (31c <i2c_m_sync_init+0x34>)
     302:	4798      	blx	r3
	if (init_status) {
     304:	2800      	cmp	r0, #0
     306:	d103      	bne.n	310 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     308:	4b05      	ldr	r3, [pc, #20]	; (320 <i2c_m_sync_init+0x38>)
     30a:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     30c:	4b05      	ldr	r3, [pc, #20]	; (324 <i2c_m_sync_init+0x3c>)
     30e:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     310:	bd70      	pop	{r4, r5, r6, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	0001548c 	.word	0x0001548c
     318:	00000a1d 	.word	0x00000a1d
     31c:	000010bd 	.word	0x000010bd
     320:	000002b9 	.word	0x000002b9
     324:	00000289 	.word	0x00000289

00000328 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     328:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     32a:	4b01      	ldr	r3, [pc, #4]	; (330 <i2c_m_sync_enable+0x8>)
     32c:	4798      	blx	r3
}
     32e:	bd10      	pop	{r4, pc}
     330:	0000115d 	.word	0x0000115d

00000334 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     334:	3014      	adds	r0, #20
     336:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     338:	2000      	movs	r0, #0
     33a:	4770      	bx	lr

0000033c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     33c:	b510      	push	{r4, lr}
	//ASSERT(io_descr && buf);
	return io_descr->write(io_descr, buf, length);
     33e:	6803      	ldr	r3, [r0, #0]
     340:	4798      	blx	r3
}
     342:	bd10      	pop	{r4, pc}

00000344 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     344:	b570      	push	{r4, r5, r6, lr}
     346:	0004      	movs	r4, r0
     348:	000d      	movs	r5, r1
     34a:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     34c:	2800      	cmp	r0, #0
     34e:	d00d      	beq.n	36c <io_read+0x28>
     350:	0008      	movs	r0, r1
     352:	1e43      	subs	r3, r0, #1
     354:	4198      	sbcs	r0, r3
     356:	b2c0      	uxtb	r0, r0
     358:	223d      	movs	r2, #61	; 0x3d
     35a:	4905      	ldr	r1, [pc, #20]	; (370 <io_read+0x2c>)
     35c:	4b05      	ldr	r3, [pc, #20]	; (374 <io_read+0x30>)
     35e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     360:	0032      	movs	r2, r6
     362:	0029      	movs	r1, r5
     364:	6863      	ldr	r3, [r4, #4]
     366:	0020      	movs	r0, r4
     368:	4798      	blx	r3
}
     36a:	bd70      	pop	{r4, r5, r6, pc}
     36c:	2000      	movs	r0, #0
     36e:	e7f3      	b.n	358 <io_read+0x14>
     370:	000154a8 	.word	0x000154a8
     374:	00000a1d 	.word	0x00000a1d

00000378 <_spi_m_sync_io_write>:
 *  \return Operation status.
 *  \retval size Success.
 *  \retval >=0 Timeout, with number of characters transferred.
 */
static int32_t _spi_m_sync_io_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	46c6      	mov	lr, r8
     37c:	0004      	movs	r4, r0
	ASSERT(io);
     37e:	1e43      	subs	r3, r0, #1
     380:	4198      	sbcs	r0, r3
{
     382:	b500      	push	{lr}
	ASSERT(io);
     384:	4d0f      	ldr	r5, [pc, #60]	; (3c4 <_spi_m_sync_io_write+0x4c>)
     386:	4b10      	ldr	r3, [pc, #64]	; (3c8 <_spi_m_sync_io_write+0x50>)
{
     388:	b084      	sub	sp, #16
     38a:	000f      	movs	r7, r1
     38c:	0016      	movs	r6, r2
	ASSERT(io);
     38e:	0029      	movs	r1, r5
     390:	b2c0      	uxtb	r0, r0
     392:	22a3      	movs	r2, #163	; 0xa3
     394:	4698      	mov	r8, r3
     396:	4798      	blx	r3

	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     398:	0020      	movs	r0, r4
     39a:	380c      	subs	r0, #12

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     39c:	1e43      	subs	r3, r0, #1
     39e:	4198      	sbcs	r0, r3
     3a0:	22b3      	movs	r2, #179	; 0xb3
     3a2:	0029      	movs	r1, r5
     3a4:	b2c0      	uxtb	r0, r0
     3a6:	47c0      	blx	r8

	msg.txbuf = p_xfer->txbuf;
	msg.rxbuf = p_xfer->rxbuf;
     3a8:	2300      	movs	r3, #0
	msg.size  = p_xfer->size;
	return _spi_m_sync_trans(&spi->dev, &msg);
     3aa:	0020      	movs	r0, r4
	msg.rxbuf = p_xfer->rxbuf;
     3ac:	9302      	str	r3, [sp, #8]
	return _spi_m_sync_trans(&spi->dev, &msg);
     3ae:	a901      	add	r1, sp, #4
     3b0:	4b06      	ldr	r3, [pc, #24]	; (3cc <_spi_m_sync_io_write+0x54>)
     3b2:	3808      	subs	r0, #8
	msg.txbuf = p_xfer->txbuf;
     3b4:	9701      	str	r7, [sp, #4]
	xfer.size  = length;
     3b6:	9603      	str	r6, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     3b8:	4798      	blx	r3
}
     3ba:	b004      	add	sp, #16
     3bc:	bc04      	pop	{r2}
     3be:	4690      	mov	r8, r2
     3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	000154bc 	.word	0x000154bc
     3c8:	00000a1d 	.word	0x00000a1d
     3cc:	0000171d 	.word	0x0000171d

000003d0 <_spi_m_sync_io_read>:
{
     3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3d2:	46c6      	mov	lr, r8
     3d4:	0004      	movs	r4, r0
	ASSERT(io);
     3d6:	1e43      	subs	r3, r0, #1
     3d8:	4198      	sbcs	r0, r3
{
     3da:	b500      	push	{lr}
	ASSERT(io);
     3dc:	4d0f      	ldr	r5, [pc, #60]	; (41c <_spi_m_sync_io_read+0x4c>)
     3de:	4b10      	ldr	r3, [pc, #64]	; (420 <_spi_m_sync_io_read+0x50>)
{
     3e0:	b084      	sub	sp, #16
     3e2:	000f      	movs	r7, r1
     3e4:	0016      	movs	r6, r2
	ASSERT(io);
     3e6:	0029      	movs	r1, r5
     3e8:	b2c0      	uxtb	r0, r0
     3ea:	2287      	movs	r2, #135	; 0x87
     3ec:	4698      	mov	r8, r3
     3ee:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     3f0:	0020      	movs	r0, r4
     3f2:	380c      	subs	r0, #12
	ASSERT(spi && p_xfer);
     3f4:	1e43      	subs	r3, r0, #1
     3f6:	4198      	sbcs	r0, r3
     3f8:	22b3      	movs	r2, #179	; 0xb3
     3fa:	0029      	movs	r1, r5
     3fc:	b2c0      	uxtb	r0, r0
     3fe:	47c0      	blx	r8
	msg.txbuf = p_xfer->txbuf;
     400:	2300      	movs	r3, #0
	return _spi_m_sync_trans(&spi->dev, &msg);
     402:	0020      	movs	r0, r4
	msg.txbuf = p_xfer->txbuf;
     404:	9301      	str	r3, [sp, #4]
	return _spi_m_sync_trans(&spi->dev, &msg);
     406:	a901      	add	r1, sp, #4
     408:	4b06      	ldr	r3, [pc, #24]	; (424 <_spi_m_sync_io_read+0x54>)
     40a:	3808      	subs	r0, #8
	msg.rxbuf = p_xfer->rxbuf;
     40c:	9702      	str	r7, [sp, #8]
	xfer.size  = length;
     40e:	9603      	str	r6, [sp, #12]
	return _spi_m_sync_trans(&spi->dev, &msg);
     410:	4798      	blx	r3
}
     412:	b004      	add	sp, #16
     414:	bc04      	pop	{r2}
     416:	4690      	mov	r8, r2
     418:	bdf0      	pop	{r4, r5, r6, r7, pc}
     41a:	46c0      	nop			; (mov r8, r8)
     41c:	000154bc 	.word	0x000154bc
     420:	00000a1d 	.word	0x00000a1d
     424:	0000171d 	.word	0x0000171d

00000428 <spi_m_sync_init>:
{
     428:	b570      	push	{r4, r5, r6, lr}
     42a:	0004      	movs	r4, r0
     42c:	000d      	movs	r5, r1
	ASSERT(spi && hw);
     42e:	2800      	cmp	r0, #0
     430:	d016      	beq.n	460 <spi_m_sync_init+0x38>
     432:	0008      	movs	r0, r1
     434:	1e43      	subs	r3, r0, #1
     436:	4198      	sbcs	r0, r3
     438:	b2c0      	uxtb	r0, r0
     43a:	490a      	ldr	r1, [pc, #40]	; (464 <spi_m_sync_init+0x3c>)
     43c:	4b0a      	ldr	r3, [pc, #40]	; (468 <spi_m_sync_init+0x40>)
     43e:	2240      	movs	r2, #64	; 0x40
     440:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     442:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     444:	1d20      	adds	r0, r4, #4
     446:	0029      	movs	r1, r5
     448:	4b08      	ldr	r3, [pc, #32]	; (46c <spi_m_sync_init+0x44>)
     44a:	4798      	blx	r3
	if (rc < 0) {
     44c:	2800      	cmp	r0, #0
     44e:	db06      	blt.n	45e <spi_m_sync_init+0x36>
	return ERR_NONE;
     450:	2000      	movs	r0, #0
	spi->flags    = SPI_DEACTIVATE_NEXT;
     452:	4b07      	ldr	r3, [pc, #28]	; (470 <spi_m_sync_init+0x48>)
     454:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     456:	4b07      	ldr	r3, [pc, #28]	; (474 <spi_m_sync_init+0x4c>)
     458:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     45a:	4b07      	ldr	r3, [pc, #28]	; (478 <spi_m_sync_init+0x50>)
     45c:	60e3      	str	r3, [r4, #12]
}
     45e:	bd70      	pop	{r4, r5, r6, pc}
     460:	2000      	movs	r0, #0
     462:	e7ea      	b.n	43a <spi_m_sync_init+0x12>
     464:	000154bc 	.word	0x000154bc
     468:	00000a1d 	.word	0x00000a1d
     46c:	00001595 	.word	0x00001595
     470:	ffff8000 	.word	0xffff8000
     474:	000003d1 	.word	0x000003d1
     478:	00000379 	.word	0x00000379

0000047c <spi_m_sync_enable>:
{
     47c:	b510      	push	{r4, lr}
     47e:	0004      	movs	r4, r0
	ASSERT(spi);
     480:	1e43      	subs	r3, r0, #1
     482:	4198      	sbcs	r0, r3
     484:	2257      	movs	r2, #87	; 0x57
     486:	4904      	ldr	r1, [pc, #16]	; (498 <spi_m_sync_enable+0x1c>)
     488:	b2c0      	uxtb	r0, r0
     48a:	4b04      	ldr	r3, [pc, #16]	; (49c <spi_m_sync_enable+0x20>)
     48c:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     48e:	1d20      	adds	r0, r4, #4
     490:	4b03      	ldr	r3, [pc, #12]	; (4a0 <spi_m_sync_enable+0x24>)
     492:	4798      	blx	r3
}
     494:	bd10      	pop	{r4, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	000154bc 	.word	0x000154bc
     49c:	00000a1d 	.word	0x00000a1d
     4a0:	000016d5 	.word	0x000016d5

000004a4 <spi_m_sync_get_io_descriptor>:
}

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     4a4:	b570      	push	{r4, r5, r6, lr}
     4a6:	0004      	movs	r4, r0
     4a8:	000d      	movs	r5, r1
	ASSERT(spi && io);
     4aa:	2800      	cmp	r0, #0
     4ac:	d00b      	beq.n	4c6 <spi_m_sync_get_io_descriptor+0x22>
     4ae:	0008      	movs	r0, r1
     4b0:	1e43      	subs	r3, r0, #1
     4b2:	4198      	sbcs	r0, r3
     4b4:	b2c0      	uxtb	r0, r0
     4b6:	22bd      	movs	r2, #189	; 0xbd
     4b8:	4904      	ldr	r1, [pc, #16]	; (4cc <spi_m_sync_get_io_descriptor+0x28>)
     4ba:	4b05      	ldr	r3, [pc, #20]	; (4d0 <spi_m_sync_get_io_descriptor+0x2c>)
	*io = &spi->io;
     4bc:	340c      	adds	r4, #12
	ASSERT(spi && io);
     4be:	4798      	blx	r3
	*io = &spi->io;
     4c0:	602c      	str	r4, [r5, #0]
	return 0;
}
     4c2:	2000      	movs	r0, #0
     4c4:	bd70      	pop	{r4, r5, r6, pc}
     4c6:	2000      	movs	r0, #0
     4c8:	e7f5      	b.n	4b6 <spi_m_sync_get_io_descriptor+0x12>
     4ca:	46c0      	nop			; (mov r8, r8)
     4cc:	000154bc 	.word	0x000154bc
     4d0:	00000a1d 	.word	0x00000a1d

000004d4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d6:	4645      	mov	r5, r8
     4d8:	464e      	mov	r6, r9
     4da:	46de      	mov	lr, fp
     4dc:	4657      	mov	r7, sl
     4de:	b5e0      	push	{r5, r6, r7, lr}
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     4e0:	6903      	ldr	r3, [r0, #16]
{
     4e2:	b083      	sub	sp, #12
	uint32_t                 time  = ++timer->time;
     4e4:	1c5d      	adds	r5, r3, #1
     4e6:	4698      	mov	r8, r3

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     4e8:	7e03      	ldrb	r3, [r0, #24]
{
     4ea:	0006      	movs	r6, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     4ec:	6944      	ldr	r4, [r0, #20]
	uint32_t                 time  = ++timer->time;
     4ee:	6105      	str	r5, [r0, #16]
	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     4f0:	07db      	lsls	r3, r3, #31
     4f2:	d446      	bmi.n	582 <timer_process_counted+0xae>
     4f4:	7e03      	ldrb	r3, [r0, #24]
     4f6:	079b      	lsls	r3, r3, #30
     4f8:	d443      	bmi.n	582 <timer_process_counted+0xae>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     4fa:	2c00      	cmp	r4, #0
     4fc:	d045      	beq.n	58a <timer_process_counted+0xb6>
     4fe:	6863      	ldr	r3, [r4, #4]
     500:	68a2      	ldr	r2, [r4, #8]
     502:	1aeb      	subs	r3, r5, r3
     504:	429a      	cmp	r2, r3
     506:	d840      	bhi.n	58a <timer_process_counted+0xb6>
     508:	2314      	movs	r3, #20
     50a:	4699      	mov	r9, r3
     50c:	4b27      	ldr	r3, [pc, #156]	; (5ac <timer_process_counted+0xd8>)
     50e:	4481      	add	r9, r0
     510:	469a      	mov	sl, r3
		list_insert_after(prev, new_task);
     512:	4b27      	ldr	r3, [pc, #156]	; (5b0 <timer_process_counted+0xdc>)
     514:	469b      	mov	fp, r3
     516:	e00b      	b.n	530 <timer_process_counted+0x5c>
     518:	6977      	ldr	r7, [r6, #20]
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     51a:	68e3      	ldr	r3, [r4, #12]
     51c:	0020      	movs	r0, r4
     51e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     520:	2f00      	cmp	r7, #0
     522:	d032      	beq.n	58a <timer_process_counted+0xb6>
     524:	687b      	ldr	r3, [r7, #4]
     526:	68ba      	ldr	r2, [r7, #8]
     528:	003c      	movs	r4, r7
     52a:	1aeb      	subs	r3, r5, r3
     52c:	4293      	cmp	r3, r2
     52e:	d32c      	bcc.n	58a <timer_process_counted+0xb6>
		list_remove_head(&timer->tasks);
     530:	4648      	mov	r0, r9
     532:	47d0      	blx	sl
		if (TIMER_TASK_REPEAT == tmp->mode) {
     534:	7c23      	ldrb	r3, [r4, #16]
     536:	2b01      	cmp	r3, #1
     538:	d1ee      	bne.n	518 <timer_process_counted+0x44>
     53a:	6977      	ldr	r7, [r6, #20]
			tmp->time_label = time;
     53c:	6065      	str	r5, [r4, #4]
	if (!head) {
     53e:	2f00      	cmp	r7, #0
     540:	d02f      	beq.n	5a2 <timer_process_counted+0xce>
     542:	0038      	movs	r0, r7
     544:	46bc      	mov	ip, r7
     546:	68a2      	ldr	r2, [r4, #8]
     548:	2100      	movs	r1, #0
     54a:	4647      	mov	r7, r8
     54c:	9401      	str	r4, [sp, #4]
     54e:	e008      	b.n	562 <timer_process_counted+0x8e>
			time_left = it->interval - (time - it->time_label);
     550:	4443      	add	r3, r8
     552:	1b5b      	subs	r3, r3, r5
		if (time_left >= new_task->interval)
     554:	429a      	cmp	r2, r3
     556:	d90d      	bls.n	574 <timer_process_counted+0xa0>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     558:	6803      	ldr	r3, [r0, #0]
     55a:	0001      	movs	r1, r0
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     55c:	2b00      	cmp	r3, #0
     55e:	d01b      	beq.n	598 <timer_process_counted+0xc4>
     560:	0018      	movs	r0, r3
			time_left = it->interval - (time - it->time_label);
     562:	6884      	ldr	r4, [r0, #8]
		if (it->time_label <= time) {
     564:	6843      	ldr	r3, [r0, #4]
			time_left = it->interval - (time - it->time_label);
     566:	46a0      	mov	r8, r4
		if (it->time_label <= time) {
     568:	429d      	cmp	r5, r3
     56a:	d2f1      	bcs.n	550 <timer_process_counted+0x7c>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     56c:	4443      	add	r3, r8
     56e:	1bdb      	subs	r3, r3, r7
		if (time_left >= new_task->interval)
     570:	429a      	cmp	r2, r3
     572:	d8f1      	bhi.n	558 <timer_process_counted+0x84>
     574:	46b8      	mov	r8, r7
     576:	4667      	mov	r7, ip
     578:	9c01      	ldr	r4, [sp, #4]
	if (it == head) {
     57a:	4287      	cmp	r7, r0
     57c:	d011      	beq.n	5a2 <timer_process_counted+0xce>
     57e:	0008      	movs	r0, r1
     580:	e00c      	b.n	59c <timer_process_counted+0xc8>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     582:	2202      	movs	r2, #2
     584:	7e33      	ldrb	r3, [r6, #24]
     586:	4313      	orrs	r3, r2
     588:	7633      	strb	r3, [r6, #24]
	}
}
     58a:	b003      	add	sp, #12
     58c:	bc3c      	pop	{r2, r3, r4, r5}
     58e:	4690      	mov	r8, r2
     590:	4699      	mov	r9, r3
     592:	46a2      	mov	sl, r4
     594:	46ab      	mov	fp, r5
     596:	bdf0      	pop	{r4, r5, r6, r7, pc}
     598:	46b8      	mov	r8, r7
     59a:	9c01      	ldr	r4, [sp, #4]
		list_insert_after(prev, new_task);
     59c:	0021      	movs	r1, r4
     59e:	47d8      	blx	fp
     5a0:	e7ba      	b.n	518 <timer_process_counted+0x44>
		list_insert_as_head(list, new_task);
     5a2:	0021      	movs	r1, r4
     5a4:	4648      	mov	r0, r9
     5a6:	4b03      	ldr	r3, [pc, #12]	; (5b4 <timer_process_counted+0xe0>)
     5a8:	4798      	blx	r3
     5aa:	e7b5      	b.n	518 <timer_process_counted+0x44>
     5ac:	00000a81 	.word	0x00000a81
     5b0:	00000a79 	.word	0x00000a79
     5b4:	00000a41 	.word	0x00000a41

000005b8 <timer_init>:
{
     5b8:	b570      	push	{r4, r5, r6, lr}
     5ba:	0004      	movs	r4, r0
     5bc:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     5be:	2800      	cmp	r0, #0
     5c0:	d011      	beq.n	5e6 <timer_init+0x2e>
     5c2:	0008      	movs	r0, r1
     5c4:	1e43      	subs	r3, r0, #1
     5c6:	4198      	sbcs	r0, r3
     5c8:	b2c0      	uxtb	r0, r0
     5ca:	223b      	movs	r2, #59	; 0x3b
     5cc:	4907      	ldr	r1, [pc, #28]	; (5ec <timer_init+0x34>)
     5ce:	4b08      	ldr	r3, [pc, #32]	; (5f0 <timer_init+0x38>)
     5d0:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     5d2:	0029      	movs	r1, r5
     5d4:	0020      	movs	r0, r4
     5d6:	4b07      	ldr	r3, [pc, #28]	; (5f4 <timer_init+0x3c>)
     5d8:	4798      	blx	r3
	descr->time                           = 0;
     5da:	2300      	movs	r3, #0
     5dc:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     5de:	4b06      	ldr	r3, [pc, #24]	; (5f8 <timer_init+0x40>)
}
     5e0:	2000      	movs	r0, #0
	descr->device.timer_cb.period_expired = timer_process_counted;
     5e2:	6023      	str	r3, [r4, #0]
}
     5e4:	bd70      	pop	{r4, r5, r6, pc}
     5e6:	2000      	movs	r0, #0
     5e8:	e7ef      	b.n	5ca <timer_init+0x12>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	000154d8 	.word	0x000154d8
     5f0:	00000a1d 	.word	0x00000a1d
     5f4:	00000e25 	.word	0x00000e25
     5f8:	000004d5 	.word	0x000004d5

000005fc <timer_start>:
{
     5fc:	b510      	push	{r4, lr}
     5fe:	0004      	movs	r4, r0
	ASSERT(descr);
     600:	1e43      	subs	r3, r0, #1
     602:	4198      	sbcs	r0, r3
     604:	2253      	movs	r2, #83	; 0x53
     606:	b2c0      	uxtb	r0, r0
     608:	4b07      	ldr	r3, [pc, #28]	; (628 <timer_start+0x2c>)
     60a:	4908      	ldr	r1, [pc, #32]	; (62c <timer_start+0x30>)
     60c:	4798      	blx	r3
	if (_timer_is_started(&descr->device)) {
     60e:	0020      	movs	r0, r4
     610:	4b07      	ldr	r3, [pc, #28]	; (630 <timer_start+0x34>)
     612:	4798      	blx	r3
     614:	2800      	cmp	r0, #0
     616:	d104      	bne.n	622 <timer_start+0x26>
	_timer_start(&descr->device);
     618:	0020      	movs	r0, r4
     61a:	4b06      	ldr	r3, [pc, #24]	; (634 <timer_start+0x38>)
     61c:	4798      	blx	r3
	return ERR_NONE;
     61e:	2000      	movs	r0, #0
}
     620:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     622:	2011      	movs	r0, #17
     624:	4240      	negs	r0, r0
     626:	e7fb      	b.n	620 <timer_start+0x24>
     628:	00000a1d 	.word	0x00000a1d
     62c:	000154d8 	.word	0x000154d8
     630:	00000ec9 	.word	0x00000ec9
     634:	00000e79 	.word	0x00000e79

00000638 <timer_add_task>:
{
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	46d6      	mov	lr, sl
     63c:	464f      	mov	r7, r9
     63e:	4646      	mov	r6, r8
     640:	b5c0      	push	{r6, r7, lr}
     642:	0004      	movs	r4, r0
     644:	b082      	sub	sp, #8
     646:	468a      	mov	sl, r1
	ASSERT(descr && task);
     648:	2800      	cmp	r0, #0
     64a:	d05a      	beq.n	702 <timer_add_task+0xca>
     64c:	0008      	movs	r0, r1
     64e:	1e43      	subs	r3, r0, #1
     650:	4198      	sbcs	r0, r3
     652:	b2c0      	uxtb	r0, r0
     654:	4f33      	ldr	r7, [pc, #204]	; (724 <timer_add_task+0xec>)
     656:	4b34      	ldr	r3, [pc, #208]	; (728 <timer_add_task+0xf0>)
     658:	227a      	movs	r2, #122	; 0x7a
     65a:	0039      	movs	r1, r7
     65c:	4699      	mov	r9, r3
     65e:	4798      	blx	r3
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     660:	2201      	movs	r2, #1
     662:	7e23      	ldrb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     664:	4651      	mov	r1, sl
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     666:	4313      	orrs	r3, r2
     668:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     66a:	2314      	movs	r3, #20
     66c:	4698      	mov	r8, r3
     66e:	44a0      	add	r8, r4
     670:	4640      	mov	r0, r8
     672:	4b2e      	ldr	r3, [pc, #184]	; (72c <timer_add_task+0xf4>)
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     674:	2601      	movs	r6, #1
	if (is_list_element(&descr->tasks, task)) {
     676:	4798      	blx	r3
     678:	2800      	cmp	r0, #0
     67a:	d149      	bne.n	710 <timer_add_task+0xd8>
	task->time_label = descr->time;
     67c:	4653      	mov	r3, sl
     67e:	6922      	ldr	r2, [r4, #16]
     680:	605a      	str	r2, [r3, #4]
	return (void *)list->head;
     682:	6963      	ldr	r3, [r4, #20]
     684:	469c      	mov	ip, r3
	if (!head) {
     686:	2b00      	cmp	r3, #0
     688:	d03d      	beq.n	706 <timer_add_task+0xce>
     68a:	4653      	mov	r3, sl
     68c:	4660      	mov	r0, ip
     68e:	6899      	ldr	r1, [r3, #8]
     690:	2700      	movs	r7, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     692:	1ab6      	subs	r6, r6, r2
     694:	e00a      	b.n	6ac <timer_add_task+0x74>
			time_left = it->interval - (time - it->time_label);
     696:	6885      	ldr	r5, [r0, #8]
     698:	46a9      	mov	r9, r5
     69a:	444b      	add	r3, r9
     69c:	1a9b      	subs	r3, r3, r2
		if (time_left >= new_task->interval)
     69e:	428b      	cmp	r3, r1
     6a0:	d20d      	bcs.n	6be <timer_add_task+0x86>
	return element ? ((struct list_element *)element)->next : NULL;
     6a2:	6803      	ldr	r3, [r0, #0]
     6a4:	0007      	movs	r7, r0
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     6a6:	2b00      	cmp	r3, #0
     6a8:	d00c      	beq.n	6c4 <timer_add_task+0x8c>
     6aa:	0018      	movs	r0, r3
		if (it->time_label <= time) {
     6ac:	6843      	ldr	r3, [r0, #4]
     6ae:	429a      	cmp	r2, r3
     6b0:	d2f1      	bcs.n	696 <timer_add_task+0x5e>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     6b2:	6885      	ldr	r5, [r0, #8]
     6b4:	18f3      	adds	r3, r6, r3
     6b6:	46a9      	mov	r9, r5
     6b8:	444b      	add	r3, r9
		if (time_left >= new_task->interval)
     6ba:	428b      	cmp	r3, r1
     6bc:	d3f1      	bcc.n	6a2 <timer_add_task+0x6a>
	if (it == head) {
     6be:	4584      	cmp	ip, r0
     6c0:	d021      	beq.n	706 <timer_add_task+0xce>
     6c2:	0038      	movs	r0, r7
		list_insert_after(prev, new_task);
     6c4:	4651      	mov	r1, sl
     6c6:	4b1a      	ldr	r3, [pc, #104]	; (730 <timer_add_task+0xf8>)
     6c8:	4798      	blx	r3
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6ca:	2201      	movs	r2, #1
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     6cc:	2502      	movs	r5, #2
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6ce:	7e23      	ldrb	r3, [r4, #24]
	return ERR_NONE;
     6d0:	2600      	movs	r6, #0
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6d2:	4393      	bics	r3, r2
     6d4:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     6d6:	7e23      	ldrb	r3, [r4, #24]
     6d8:	421d      	tst	r5, r3
     6da:	d00b      	beq.n	6f4 <timer_add_task+0xbc>
		CRITICAL_SECTION_ENTER()
     6dc:	a801      	add	r0, sp, #4
     6de:	4b15      	ldr	r3, [pc, #84]	; (734 <timer_add_task+0xfc>)
     6e0:	4798      	blx	r3
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     6e2:	7e23      	ldrb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     6e4:	0020      	movs	r0, r4
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     6e6:	43ab      	bics	r3, r5
     6e8:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     6ea:	4b13      	ldr	r3, [pc, #76]	; (738 <timer_add_task+0x100>)
     6ec:	4798      	blx	r3
		CRITICAL_SECTION_LEAVE()
     6ee:	a801      	add	r0, sp, #4
     6f0:	4b12      	ldr	r3, [pc, #72]	; (73c <timer_add_task+0x104>)
     6f2:	4798      	blx	r3
}
     6f4:	0030      	movs	r0, r6
     6f6:	b002      	add	sp, #8
     6f8:	bc1c      	pop	{r2, r3, r4}
     6fa:	4690      	mov	r8, r2
     6fc:	4699      	mov	r9, r3
     6fe:	46a2      	mov	sl, r4
     700:	bdf0      	pop	{r4, r5, r6, r7, pc}
     702:	2000      	movs	r0, #0
     704:	e7a6      	b.n	654 <timer_add_task+0x1c>
		list_insert_as_head(list, new_task);
     706:	4651      	mov	r1, sl
     708:	4640      	mov	r0, r8
     70a:	4b0d      	ldr	r3, [pc, #52]	; (740 <timer_add_task+0x108>)
     70c:	4798      	blx	r3
     70e:	e7dc      	b.n	6ca <timer_add_task+0x92>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     710:	7e23      	ldrb	r3, [r4, #24]
		ASSERT(false);
     712:	227f      	movs	r2, #127	; 0x7f
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     714:	43b3      	bics	r3, r6
     716:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     718:	0039      	movs	r1, r7
     71a:	2000      	movs	r0, #0
     71c:	47c8      	blx	r9
		return ERR_ALREADY_INITIALIZED;
     71e:	3e13      	subs	r6, #19
     720:	e7e8      	b.n	6f4 <timer_add_task+0xbc>
     722:	46c0      	nop			; (mov r8, r8)
     724:	000154d8 	.word	0x000154d8
     728:	00000a1d 	.word	0x00000a1d
     72c:	00000a25 	.word	0x00000a25
     730:	00000a79 	.word	0x00000a79
     734:	0000018d 	.word	0x0000018d
     738:	00000ed9 	.word	0x00000ed9
     73c:	0000019d 	.word	0x0000019d
     740:	00000a41 	.word	0x00000a41

00000744 <usart_transmission_complete>:
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     744:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     746:	3808      	subs	r0, #8
{
     748:	b510      	push	{r4, lr}
	descr->stat = 0;
     74a:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     74c:	6a43      	ldr	r3, [r0, #36]	; 0x24
     74e:	2b00      	cmp	r3, #0
     750:	d000      	beq.n	754 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     752:	4798      	blx	r3
	}
}
     754:	bd10      	pop	{r4, pc}
     756:	46c0      	nop			; (mov r8, r8)

00000758 <usart_error>:
 */
static void usart_error(struct _usart_async_device *device)
{
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);

	descr->stat = 0;
     758:	2300      	movs	r3, #0
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     75a:	3808      	subs	r0, #8
{
     75c:	b510      	push	{r4, lr}
	descr->stat = 0;
     75e:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     760:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     762:	2b00      	cmp	r3, #0
     764:	d000      	beq.n	768 <usart_error+0x10>
		descr->usart_cb.error(descr);
     766:	4798      	blx	r3
	}
}
     768:	bd10      	pop	{r4, pc}
     76a:	46c0      	nop			; (mov r8, r8)

0000076c <usart_fill_rx_buffer>:
{
     76c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     76e:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     770:	4b04      	ldr	r3, [pc, #16]	; (784 <usart_fill_rx_buffer+0x18>)
     772:	302c      	adds	r0, #44	; 0x2c
     774:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     776:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     778:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     77a:	2b00      	cmp	r3, #0
     77c:	d001      	beq.n	782 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     77e:	0020      	movs	r0, r4
     780:	4798      	blx	r3
}
     782:	bd10      	pop	{r4, pc}
     784:	00000b1d 	.word	0x00000b1d

00000788 <usart_async_write>:
{
     788:	b570      	push	{r4, r5, r6, lr}
     78a:	0004      	movs	r4, r0
     78c:	000e      	movs	r6, r1
     78e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     790:	2800      	cmp	r0, #0
     792:	d01c      	beq.n	7ce <usart_async_write+0x46>
     794:	2900      	cmp	r1, #0
     796:	d01a      	beq.n	7ce <usart_async_write+0x46>
     798:	0010      	movs	r0, r2
     79a:	1e43      	subs	r3, r0, #1
     79c:	4198      	sbcs	r0, r3
     79e:	b2c0      	uxtb	r0, r0
     7a0:	223c      	movs	r2, #60	; 0x3c
     7a2:	490d      	ldr	r1, [pc, #52]	; (7d8 <usart_async_write+0x50>)
     7a4:	32ff      	adds	r2, #255	; 0xff
     7a6:	4b0d      	ldr	r3, [pc, #52]	; (7dc <usart_async_write+0x54>)
     7a8:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     7aa:	2344      	movs	r3, #68	; 0x44
     7ac:	224c      	movs	r2, #76	; 0x4c
     7ae:	5ae0      	ldrh	r0, [r4, r3]
     7b0:	5aa1      	ldrh	r1, [r4, r2]
     7b2:	4288      	cmp	r0, r1
     7b4:	d10d      	bne.n	7d2 <usart_async_write+0x4a>
	descr->tx_buffer        = (uint8_t *)buf;
     7b6:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     7b8:	52a5      	strh	r5, [r4, r2]
	descr->tx_por           = 0;
     7ba:	2200      	movs	r2, #0
	_usart_async_enable_byte_sent_irq(&descr->device);
     7bc:	0020      	movs	r0, r4
	descr->tx_por           = 0;
     7be:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     7c0:	3b43      	subs	r3, #67	; 0x43
     7c2:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     7c4:	3008      	adds	r0, #8
     7c6:	4b06      	ldr	r3, [pc, #24]	; (7e0 <usart_async_write+0x58>)
     7c8:	4798      	blx	r3
	return (int32_t)length;
     7ca:	0028      	movs	r0, r5
}
     7cc:	bd70      	pop	{r4, r5, r6, pc}
     7ce:	2000      	movs	r0, #0
     7d0:	e7e6      	b.n	7a0 <usart_async_write+0x18>
		return ERR_NO_RESOURCE;
     7d2:	201c      	movs	r0, #28
     7d4:	4240      	negs	r0, r0
     7d6:	e7f9      	b.n	7cc <usart_async_write+0x44>
     7d8:	000154f0 	.word	0x000154f0
     7dc:	00000a1d 	.word	0x00000a1d
     7e0:	00000ffd 	.word	0x00000ffd

000007e4 <usart_process_byte_sent>:
	if (descr->tx_por != descr->tx_buffer_length) {
     7e4:	0003      	movs	r3, r0
{
     7e6:	b570      	push	{r4, r5, r6, lr}
	if (descr->tx_por != descr->tx_buffer_length) {
     7e8:	2144      	movs	r1, #68	; 0x44
{
     7ea:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     7ec:	204c      	movs	r0, #76	; 0x4c
     7ee:	3b08      	subs	r3, #8
     7f0:	5a5a      	ldrh	r2, [r3, r1]
     7f2:	5a18      	ldrh	r0, [r3, r0]
     7f4:	4290      	cmp	r0, r2
     7f6:	d00a      	beq.n	80e <usart_process_byte_sent+0x2a>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     7f8:	6c98      	ldr	r0, [r3, #72]	; 0x48
     7fa:	1c55      	adds	r5, r2, #1
     7fc:	525d      	strh	r5, [r3, r1]
     7fe:	5c81      	ldrb	r1, [r0, r2]
     800:	4b05      	ldr	r3, [pc, #20]	; (818 <usart_process_byte_sent+0x34>)
     802:	0020      	movs	r0, r4
     804:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     806:	0020      	movs	r0, r4
     808:	4b04      	ldr	r3, [pc, #16]	; (81c <usart_process_byte_sent+0x38>)
     80a:	4798      	blx	r3
}
     80c:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     80e:	0020      	movs	r0, r4
     810:	4b03      	ldr	r3, [pc, #12]	; (820 <usart_process_byte_sent+0x3c>)
     812:	4798      	blx	r3
}
     814:	e7fa      	b.n	80c <usart_process_byte_sent+0x28>
     816:	46c0      	nop			; (mov r8, r8)
     818:	00000ff5 	.word	0x00000ff5
     81c:	00000ffd 	.word	0x00000ffd
     820:	00001005 	.word	0x00001005

00000824 <usart_async_read>:
{
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	4647      	mov	r7, r8
     828:	46ce      	mov	lr, r9
     82a:	b580      	push	{r7, lr}
     82c:	000d      	movs	r5, r1
     82e:	b083      	sub	sp, #12
     830:	1e07      	subs	r7, r0, #0
     832:	4690      	mov	r8, r2
	ASSERT(descr && buf && length);
     834:	d032      	beq.n	89c <usart_async_read+0x78>
     836:	2900      	cmp	r1, #0
     838:	d030      	beq.n	89c <usart_async_read+0x78>
     83a:	0010      	movs	r0, r2
     83c:	1e43      	subs	r3, r0, #1
     83e:	4198      	sbcs	r0, r3
     840:	b2c0      	uxtb	r0, r0
     842:	22ac      	movs	r2, #172	; 0xac
     844:	4917      	ldr	r1, [pc, #92]	; (8a4 <usart_async_read+0x80>)
     846:	0052      	lsls	r2, r2, #1
     848:	4b17      	ldr	r3, [pc, #92]	; (8a8 <usart_async_read+0x84>)
     84a:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     84c:	3734      	adds	r7, #52	; 0x34
	CRITICAL_SECTION_ENTER()
     84e:	a801      	add	r0, sp, #4
     850:	4b16      	ldr	r3, [pc, #88]	; (8ac <usart_async_read+0x88>)
     852:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     854:	4b16      	ldr	r3, [pc, #88]	; (8b0 <usart_async_read+0x8c>)
     856:	0038      	movs	r0, r7
     858:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
     85a:	4b16      	ldr	r3, [pc, #88]	; (8b4 <usart_async_read+0x90>)
	num = ringbuffer_num(&descr->rx);
     85c:	0006      	movs	r6, r0
	CRITICAL_SECTION_LEAVE()
     85e:	a801      	add	r0, sp, #4
     860:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     862:	2e00      	cmp	r6, #0
     864:	d01c      	beq.n	8a0 <usart_async_read+0x7c>
     866:	4643      	mov	r3, r8
     868:	2b00      	cmp	r3, #0
     86a:	d019      	beq.n	8a0 <usart_async_read+0x7c>
     86c:	4b12      	ldr	r3, [pc, #72]	; (8b8 <usart_async_read+0x94>)
     86e:	3e01      	subs	r6, #1
     870:	19ae      	adds	r6, r5, r6
     872:	2400      	movs	r4, #0
     874:	4699      	mov	r9, r3
     876:	e002      	b.n	87e <usart_async_read+0x5a>
     878:	3501      	adds	r5, #1
     87a:	45a0      	cmp	r8, r4
     87c:	d00c      	beq.n	898 <usart_async_read+0x74>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     87e:	3401      	adds	r4, #1
     880:	0029      	movs	r1, r5
     882:	0038      	movs	r0, r7
     884:	b2a4      	uxth	r4, r4
     886:	47c8      	blx	r9
	while ((was_read < num) && (was_read < length)) {
     888:	42ae      	cmp	r6, r5
     88a:	d1f5      	bne.n	878 <usart_async_read+0x54>
     88c:	0020      	movs	r0, r4
}
     88e:	b003      	add	sp, #12
     890:	bc0c      	pop	{r2, r3}
     892:	4690      	mov	r8, r2
     894:	4699      	mov	r9, r3
     896:	bdf0      	pop	{r4, r5, r6, r7, pc}
     898:	4640      	mov	r0, r8
     89a:	e7f8      	b.n	88e <usart_async_read+0x6a>
     89c:	2000      	movs	r0, #0
     89e:	e7d0      	b.n	842 <usart_async_read+0x1e>
	while ((was_read < num) && (was_read < length)) {
     8a0:	2000      	movs	r0, #0
	return (int32_t)was_read;
     8a2:	e7f4      	b.n	88e <usart_async_read+0x6a>
     8a4:	000154f0 	.word	0x000154f0
     8a8:	00000a1d 	.word	0x00000a1d
     8ac:	0000018d 	.word	0x0000018d
     8b0:	00000b5d 	.word	0x00000b5d
     8b4:	0000019d 	.word	0x0000019d
     8b8:	00000ad5 	.word	0x00000ad5

000008bc <usart_async_init>:
{
     8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8be:	0004      	movs	r4, r0
     8c0:	000d      	movs	r5, r1
     8c2:	0016      	movs	r6, r2
     8c4:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     8c6:	2800      	cmp	r0, #0
     8c8:	d027      	beq.n	91a <usart_async_init+0x5e>
     8ca:	2900      	cmp	r1, #0
     8cc:	d025      	beq.n	91a <usart_async_init+0x5e>
     8ce:	2a00      	cmp	r2, #0
     8d0:	d023      	beq.n	91a <usart_async_init+0x5e>
     8d2:	0018      	movs	r0, r3
     8d4:	1e43      	subs	r3, r0, #1
     8d6:	4198      	sbcs	r0, r3
     8d8:	b2c0      	uxtb	r0, r0
     8da:	223a      	movs	r2, #58	; 0x3a
     8dc:	4911      	ldr	r1, [pc, #68]	; (924 <usart_async_init+0x68>)
     8de:	4b12      	ldr	r3, [pc, #72]	; (928 <usart_async_init+0x6c>)
     8e0:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     8e2:	0020      	movs	r0, r4
     8e4:	003a      	movs	r2, r7
     8e6:	0031      	movs	r1, r6
     8e8:	3034      	adds	r0, #52	; 0x34
     8ea:	4b10      	ldr	r3, [pc, #64]	; (92c <usart_async_init+0x70>)
     8ec:	4798      	blx	r3
     8ee:	2800      	cmp	r0, #0
     8f0:	d115      	bne.n	91e <usart_async_init+0x62>
	init_status = _usart_async_init(&descr->device, hw);
     8f2:	0020      	movs	r0, r4
     8f4:	0029      	movs	r1, r5
     8f6:	3008      	adds	r0, #8
     8f8:	4b0d      	ldr	r3, [pc, #52]	; (930 <usart_async_init+0x74>)
     8fa:	4798      	blx	r3
	if (init_status) {
     8fc:	2800      	cmp	r0, #0
     8fe:	d10b      	bne.n	918 <usart_async_init+0x5c>
	descr->io.read  = usart_async_read;
     900:	4b0c      	ldr	r3, [pc, #48]	; (934 <usart_async_init+0x78>)
     902:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     904:	4b0c      	ldr	r3, [pc, #48]	; (938 <usart_async_init+0x7c>)
     906:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     908:	4b0c      	ldr	r3, [pc, #48]	; (93c <usart_async_init+0x80>)
     90a:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     90c:	4b0c      	ldr	r3, [pc, #48]	; (940 <usart_async_init+0x84>)
     90e:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     910:	4b0c      	ldr	r3, [pc, #48]	; (944 <usart_async_init+0x88>)
     912:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     914:	4b0c      	ldr	r3, [pc, #48]	; (948 <usart_async_init+0x8c>)
     916:	6163      	str	r3, [r4, #20]
}
     918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     91a:	2000      	movs	r0, #0
     91c:	e7dd      	b.n	8da <usart_async_init+0x1e>
		return ERR_INVALID_ARG;
     91e:	200d      	movs	r0, #13
     920:	4240      	negs	r0, r0
     922:	e7f9      	b.n	918 <usart_async_init+0x5c>
     924:	000154f0 	.word	0x000154f0
     928:	00000a1d 	.word	0x00000a1d
     92c:	00000a91 	.word	0x00000a91
     930:	00000f05 	.word	0x00000f05
     934:	00000825 	.word	0x00000825
     938:	00000789 	.word	0x00000789
     93c:	000007e5 	.word	0x000007e5
     940:	0000076d 	.word	0x0000076d
     944:	00000745 	.word	0x00000745
     948:	00000759 	.word	0x00000759

0000094c <usart_async_enable>:
{
     94c:	b510      	push	{r4, lr}
     94e:	0004      	movs	r4, r0
	ASSERT(descr);
     950:	1e43      	subs	r3, r0, #1
     952:	4198      	sbcs	r0, r3
     954:	2261      	movs	r2, #97	; 0x61
     956:	4905      	ldr	r1, [pc, #20]	; (96c <usart_async_enable+0x20>)
     958:	b2c0      	uxtb	r0, r0
     95a:	4b05      	ldr	r3, [pc, #20]	; (970 <usart_async_enable+0x24>)
     95c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     95e:	0020      	movs	r0, r4
     960:	4b04      	ldr	r3, [pc, #16]	; (974 <usart_async_enable+0x28>)
     962:	3008      	adds	r0, #8
     964:	4798      	blx	r3
}
     966:	2000      	movs	r0, #0
     968:	bd10      	pop	{r4, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	000154f0 	.word	0x000154f0
     970:	00000a1d 	.word	0x00000a1d
     974:	00000fe1 	.word	0x00000fe1

00000978 <usart_async_get_io_descriptor>:
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	0004      	movs	r4, r0
     97c:	000d      	movs	r5, r1
	ASSERT(descr && io);
     97e:	2800      	cmp	r0, #0
     980:	d00a      	beq.n	998 <usart_async_get_io_descriptor+0x20>
     982:	0008      	movs	r0, r1
     984:	1e43      	subs	r3, r0, #1
     986:	4198      	sbcs	r0, r3
     988:	b2c0      	uxtb	r0, r0
     98a:	2277      	movs	r2, #119	; 0x77
     98c:	4903      	ldr	r1, [pc, #12]	; (99c <usart_async_get_io_descriptor+0x24>)
     98e:	4b04      	ldr	r3, [pc, #16]	; (9a0 <usart_async_get_io_descriptor+0x28>)
     990:	4798      	blx	r3
	*io = &descr->io;
     992:	602c      	str	r4, [r5, #0]
}
     994:	2000      	movs	r0, #0
     996:	bd70      	pop	{r4, r5, r6, pc}
     998:	2000      	movs	r0, #0
     99a:	e7f6      	b.n	98a <usart_async_get_io_descriptor+0x12>
     99c:	000154f0 	.word	0x000154f0
     9a0:	00000a1d 	.word	0x00000a1d

000009a4 <usart_async_register_callback>:
{
     9a4:	b570      	push	{r4, r5, r6, lr}
     9a6:	0005      	movs	r5, r0
	ASSERT(descr);
     9a8:	1e43      	subs	r3, r0, #1
     9aa:	4198      	sbcs	r0, r3
{
     9ac:	000e      	movs	r6, r1
     9ae:	0014      	movs	r4, r2
	ASSERT(descr);
     9b0:	b2c0      	uxtb	r0, r0
     9b2:	2283      	movs	r2, #131	; 0x83
     9b4:	4916      	ldr	r1, [pc, #88]	; (a10 <usart_async_register_callback+0x6c>)
     9b6:	4b17      	ldr	r3, [pc, #92]	; (a14 <usart_async_register_callback+0x70>)
     9b8:	4798      	blx	r3
	switch (type) {
     9ba:	2e01      	cmp	r6, #1
     9bc:	d01c      	beq.n	9f8 <usart_async_register_callback+0x54>
     9be:	2e00      	cmp	r6, #0
     9c0:	d00f      	beq.n	9e2 <usart_async_register_callback+0x3e>
     9c2:	2e02      	cmp	r6, #2
     9c4:	d002      	beq.n	9cc <usart_async_register_callback+0x28>
		return ERR_INVALID_ARG;
     9c6:	200d      	movs	r0, #13
     9c8:	4240      	negs	r0, r0
}
     9ca:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.error = cb;
     9cc:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     9ce:	0028      	movs	r0, r5
     9d0:	1e62      	subs	r2, r4, #1
     9d2:	4194      	sbcs	r4, r2
     9d4:	3008      	adds	r0, #8
     9d6:	b2e2      	uxtb	r2, r4
     9d8:	2103      	movs	r1, #3
     9da:	4b0f      	ldr	r3, [pc, #60]	; (a18 <usart_async_register_callback+0x74>)
     9dc:	4798      	blx	r3
	return ERR_NONE;
     9de:	2000      	movs	r0, #0
		break;
     9e0:	e7f3      	b.n	9ca <usart_async_register_callback+0x26>
		descr->usart_cb.rx_done = cb;
     9e2:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     9e4:	0028      	movs	r0, r5
     9e6:	1e62      	subs	r2, r4, #1
     9e8:	4194      	sbcs	r4, r2
     9ea:	3008      	adds	r0, #8
     9ec:	b2e2      	uxtb	r2, r4
     9ee:	2101      	movs	r1, #1
     9f0:	4b09      	ldr	r3, [pc, #36]	; (a18 <usart_async_register_callback+0x74>)
     9f2:	4798      	blx	r3
	return ERR_NONE;
     9f4:	2000      	movs	r0, #0
		break;
     9f6:	e7e8      	b.n	9ca <usart_async_register_callback+0x26>
		descr->usart_cb.tx_done = cb;
     9f8:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     9fa:	0028      	movs	r0, r5
     9fc:	1e62      	subs	r2, r4, #1
     9fe:	4194      	sbcs	r4, r2
     a00:	3008      	adds	r0, #8
     a02:	b2e2      	uxtb	r2, r4
     a04:	2102      	movs	r1, #2
     a06:	4b04      	ldr	r3, [pc, #16]	; (a18 <usart_async_register_callback+0x74>)
     a08:	4798      	blx	r3
	return ERR_NONE;
     a0a:	2000      	movs	r0, #0
		break;
     a0c:	e7dd      	b.n	9ca <usart_async_register_callback+0x26>
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	000154f0 	.word	0x000154f0
     a14:	00000a1d 	.word	0x00000a1d
     a18:	0000100d 	.word	0x0000100d

00000a1c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a1c:	2800      	cmp	r0, #0
     a1e:	d100      	bne.n	a22 <assert+0x6>
		__asm("BKPT #0");
     a20:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a22:	4770      	bx	lr

00000a24 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a24:	6803      	ldr	r3, [r0, #0]
     a26:	2b00      	cmp	r3, #0
     a28:	d103      	bne.n	a32 <is_list_element+0xe>
     a2a:	e006      	b.n	a3a <is_list_element+0x16>
     a2c:	681b      	ldr	r3, [r3, #0]
     a2e:	2b00      	cmp	r3, #0
     a30:	d003      	beq.n	a3a <is_list_element+0x16>
		if (it == element) {
     a32:	4299      	cmp	r1, r3
     a34:	d1fa      	bne.n	a2c <is_list_element+0x8>
			return true;
     a36:	2001      	movs	r0, #1
     a38:	e000      	b.n	a3c <is_list_element+0x18>
		}
	}

	return false;
     a3a:	2000      	movs	r0, #0
}
     a3c:	4770      	bx	lr
     a3e:	46c0      	nop			; (mov r8, r8)

00000a40 <list_insert_as_head>:
	for (it = list->head; it; it = it->next) {
     a40:	6803      	ldr	r3, [r0, #0]

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     a42:	b570      	push	{r4, r5, r6, lr}
     a44:	0005      	movs	r5, r0
     a46:	000c      	movs	r4, r1
	for (it = list->head; it; it = it->next) {
     a48:	2b00      	cmp	r3, #0
     a4a:	d103      	bne.n	a54 <list_insert_as_head+0x14>
     a4c:	e006      	b.n	a5c <list_insert_as_head+0x1c>
     a4e:	681b      	ldr	r3, [r3, #0]
     a50:	2b00      	cmp	r3, #0
     a52:	d003      	beq.n	a5c <list_insert_as_head+0x1c>
		if (it == element) {
     a54:	429c      	cmp	r4, r3
     a56:	d1fa      	bne.n	a4e <list_insert_as_head+0xe>
     a58:	2000      	movs	r0, #0
     a5a:	e000      	b.n	a5e <list_insert_as_head+0x1e>
	for (it = list->head; it; it = it->next) {
     a5c:	2001      	movs	r0, #1
	ASSERT(!is_list_element(list, element));
     a5e:	2239      	movs	r2, #57	; 0x39
     a60:	4903      	ldr	r1, [pc, #12]	; (a70 <list_insert_as_head+0x30>)
     a62:	4b04      	ldr	r3, [pc, #16]	; (a74 <list_insert_as_head+0x34>)
     a64:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     a66:	682b      	ldr	r3, [r5, #0]
     a68:	6023      	str	r3, [r4, #0]
	list->head                             = (struct list_element *)element;
     a6a:	602c      	str	r4, [r5, #0]
}
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	00015510 	.word	0x00015510
     a74:	00000a1d 	.word	0x00000a1d

00000a78 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     a78:	6803      	ldr	r3, [r0, #0]
     a7a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     a7c:	6001      	str	r1, [r0, #0]
}
     a7e:	4770      	bx	lr

00000a80 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     a80:	6803      	ldr	r3, [r0, #0]
     a82:	2b00      	cmp	r3, #0
     a84:	d001      	beq.n	a8a <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     a86:	681a      	ldr	r2, [r3, #0]
     a88:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     a8a:	0018      	movs	r0, r3
     a8c:	4770      	bx	lr
     a8e:	46c0      	nop			; (mov r8, r8)

00000a90 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     a90:	b570      	push	{r4, r5, r6, lr}
     a92:	0005      	movs	r5, r0
     a94:	000e      	movs	r6, r1
     a96:	0014      	movs	r4, r2
	ASSERT(rb && buf && size);
     a98:	2800      	cmp	r0, #0
     a9a:	d012      	beq.n	ac2 <ringbuffer_init+0x32>
     a9c:	2900      	cmp	r1, #0
     a9e:	d010      	beq.n	ac2 <ringbuffer_init+0x32>
     aa0:	0010      	movs	r0, r2
     aa2:	1e43      	subs	r3, r0, #1
     aa4:	4198      	sbcs	r0, r3
     aa6:	b2c0      	uxtb	r0, r0
     aa8:	4b08      	ldr	r3, [pc, #32]	; (acc <ringbuffer_init+0x3c>)
     aaa:	2228      	movs	r2, #40	; 0x28
     aac:	4908      	ldr	r1, [pc, #32]	; (ad0 <ringbuffer_init+0x40>)
     aae:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     ab0:	1e63      	subs	r3, r4, #1
     ab2:	401c      	ands	r4, r3
     ab4:	d107      	bne.n	ac6 <ringbuffer_init+0x36>
	rb->size        = size - 1;
	rb->read_index  = 0;
	rb->write_index = rb->read_index;
	rb->buf         = (uint8_t *)buf;

	return ERR_NONE;
     ab6:	2000      	movs	r0, #0
	rb->size        = size - 1;
     ab8:	606b      	str	r3, [r5, #4]
	rb->read_index  = 0;
     aba:	60ac      	str	r4, [r5, #8]
	rb->write_index = rb->read_index;
     abc:	60ec      	str	r4, [r5, #12]
	rb->buf         = (uint8_t *)buf;
     abe:	602e      	str	r6, [r5, #0]
}
     ac0:	bd70      	pop	{r4, r5, r6, pc}
     ac2:	2000      	movs	r0, #0
     ac4:	e7f0      	b.n	aa8 <ringbuffer_init+0x18>
		return ERR_INVALID_ARG;
     ac6:	200d      	movs	r0, #13
     ac8:	4240      	negs	r0, r0
     aca:	e7f9      	b.n	ac0 <ringbuffer_init+0x30>
     acc:	00000a1d 	.word	0x00000a1d
     ad0:	00015530 	.word	0x00015530

00000ad4 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     ad4:	b570      	push	{r4, r5, r6, lr}
     ad6:	0004      	movs	r4, r0
     ad8:	000d      	movs	r5, r1
	ASSERT(rb && data);
     ada:	2800      	cmp	r0, #0
     adc:	d015      	beq.n	b0a <ringbuffer_get+0x36>
     ade:	0008      	movs	r0, r1
     ae0:	1e43      	subs	r3, r0, #1
     ae2:	4198      	sbcs	r0, r3
     ae4:	b2c0      	uxtb	r0, r0
     ae6:	2240      	movs	r2, #64	; 0x40
     ae8:	4b0a      	ldr	r3, [pc, #40]	; (b14 <ringbuffer_get+0x40>)
     aea:	490b      	ldr	r1, [pc, #44]	; (b18 <ringbuffer_get+0x44>)
     aec:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     aee:	68a3      	ldr	r3, [r4, #8]
     af0:	68e2      	ldr	r2, [r4, #12]
     af2:	429a      	cmp	r2, r3
     af4:	d00b      	beq.n	b0e <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
		rb->read_index++;
		return ERR_NONE;
     af6:	2000      	movs	r0, #0
		*data = rb->buf[rb->read_index & rb->size];
     af8:	6862      	ldr	r2, [r4, #4]
     afa:	4013      	ands	r3, r2
     afc:	6822      	ldr	r2, [r4, #0]
     afe:	5cd3      	ldrb	r3, [r2, r3]
     b00:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     b02:	68a3      	ldr	r3, [r4, #8]
     b04:	3301      	adds	r3, #1
     b06:	60a3      	str	r3, [r4, #8]
	}

	return ERR_NOT_FOUND;
}
     b08:	bd70      	pop	{r4, r5, r6, pc}
     b0a:	2000      	movs	r0, #0
     b0c:	e7eb      	b.n	ae6 <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
     b0e:	200a      	movs	r0, #10
     b10:	4240      	negs	r0, r0
     b12:	e7f9      	b.n	b08 <ringbuffer_get+0x34>
     b14:	00000a1d 	.word	0x00000a1d
     b18:	00015530 	.word	0x00015530

00000b1c <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     b1c:	b570      	push	{r4, r5, r6, lr}
     b1e:	0004      	movs	r4, r0
	ASSERT(rb);
     b20:	1e43      	subs	r3, r0, #1
     b22:	4198      	sbcs	r0, r3
{
     b24:	000d      	movs	r5, r1
	ASSERT(rb);
     b26:	2251      	movs	r2, #81	; 0x51
     b28:	490a      	ldr	r1, [pc, #40]	; (b54 <ringbuffer_put+0x38>)
     b2a:	4b0b      	ldr	r3, [pc, #44]	; (b58 <ringbuffer_put+0x3c>)
     b2c:	b2c0      	uxtb	r0, r0
     b2e:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     b30:	68e2      	ldr	r2, [r4, #12]
     b32:	6863      	ldr	r3, [r4, #4]
     b34:	4013      	ands	r3, r2
     b36:	6822      	ldr	r2, [r4, #0]
     b38:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     b3a:	68e3      	ldr	r3, [r4, #12]
     b3c:	68a2      	ldr	r2, [r4, #8]
     b3e:	6861      	ldr	r1, [r4, #4]
     b40:	1a9a      	subs	r2, r3, r2
     b42:	428a      	cmp	r2, r1
     b44:	d901      	bls.n	b4a <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     b46:	1a59      	subs	r1, r3, r1
     b48:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     b4a:	3301      	adds	r3, #1

	return ERR_NONE;
}
     b4c:	2000      	movs	r0, #0
	rb->write_index++;
     b4e:	60e3      	str	r3, [r4, #12]
}
     b50:	bd70      	pop	{r4, r5, r6, pc}
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	00015530 	.word	0x00015530
     b58:	00000a1d 	.word	0x00000a1d

00000b5c <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     b5c:	b510      	push	{r4, lr}
     b5e:	0004      	movs	r4, r0
	ASSERT(rb);
     b60:	1e43      	subs	r3, r0, #1
     b62:	4198      	sbcs	r0, r3
     b64:	2267      	movs	r2, #103	; 0x67
     b66:	b2c0      	uxtb	r0, r0
     b68:	4903      	ldr	r1, [pc, #12]	; (b78 <ringbuffer_num+0x1c>)
     b6a:	4b04      	ldr	r3, [pc, #16]	; (b7c <ringbuffer_num+0x20>)
     b6c:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     b6e:	68e0      	ldr	r0, [r4, #12]
     b70:	68a3      	ldr	r3, [r4, #8]
     b72:	1ac0      	subs	r0, r0, r3
}
     b74:	bd10      	pop	{r4, pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	00015530 	.word	0x00015530
     b7c:	00000a1d 	.word	0x00000a1d

00000b80 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     b80:	4a04      	ldr	r2, [pc, #16]	; (b94 <_sbrk+0x14>)
     b82:	6813      	ldr	r3, [r2, #0]
     b84:	2b00      	cmp	r3, #0
     b86:	d003      	beq.n	b90 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	heap += incr;
     b88:	1818      	adds	r0, r3, r0
     b8a:	6010      	str	r0, [r2, #0]

	return (caddr_t)prev_heap;
}
     b8c:	0018      	movs	r0, r3
     b8e:	4770      	bx	lr
     b90:	4b01      	ldr	r3, [pc, #4]	; (b98 <_sbrk+0x18>)
     b92:	e7f9      	b.n	b88 <_sbrk+0x8>
     b94:	20000a60 	.word	0x20000a60
     b98:	20003900 	.word	0x20003900

00000b9c <_close>:
 */
extern int _close(int file)
{
	(void)file;
	return -1;
}
     b9c:	2001      	movs	r0, #1
     b9e:	4240      	negs	r0, r0
     ba0:	4770      	bx	lr
     ba2:	46c0      	nop			; (mov r8, r8)

00000ba4 <_fstat>:
 * \brief Replacement of C library of _fstat
 */
extern int _fstat(int file, struct stat *st)
{
	(void)file;
	st->st_mode = S_IFCHR;
     ba4:	2380      	movs	r3, #128	; 0x80
     ba6:	019b      	lsls	r3, r3, #6

	return 0;
}
     ba8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
     baa:	604b      	str	r3, [r1, #4]
}
     bac:	4770      	bx	lr
     bae:	46c0      	nop			; (mov r8, r8)

00000bb0 <_isatty>:
 */
extern int _isatty(int file)
{
	(void)file;
	return 1;
}
     bb0:	2001      	movs	r0, #1
     bb2:	4770      	bx	lr

00000bb4 <_lseek>:
 */
extern int _lseek(int file, int ptr, int dir)
{
	(void)file, (void)ptr, (void)dir;
	return 0;
}
     bb4:	2000      	movs	r0, #0
     bb6:	4770      	bx	lr

00000bb8 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     bb8:	b510      	push	{r4, lr}
		return (us * (freq / 100000) + 29) / 30;
     bba:	0103      	lsls	r3, r0, #4
     bbc:	1a18      	subs	r0, r3, r0
     bbe:	0140      	lsls	r0, r0, #5
     bc0:	301d      	adds	r0, #29
     bc2:	211e      	movs	r1, #30
     bc4:	4b01      	ldr	r3, [pc, #4]	; (bcc <_get_cycles_for_us+0x14>)
     bc6:	4798      	blx	r3
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     bc8:	bd10      	pop	{r4, pc}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	000091b5 	.word	0x000091b5

00000bd0 <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000) + 2) / 3 * 100;
     bd0:	0103      	lsls	r3, r0, #4
     bd2:	1a18      	subs	r0, r3, r0
     bd4:	0140      	lsls	r0, r0, #5

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     bd6:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     bd8:	4b03      	ldr	r3, [pc, #12]	; (be8 <_get_cycles_for_ms+0x18>)
     bda:	3002      	adds	r0, #2
     bdc:	2103      	movs	r1, #3
     bde:	4798      	blx	r3
     be0:	2364      	movs	r3, #100	; 0x64
     be2:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     be4:	bd10      	pop	{r4, pc}
     be6:	46c0      	nop			; (mov r8, r8)
     be8:	000091b5 	.word	0x000091b5

00000bec <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     bec:	3901      	subs	r1, #1
     bee:	d8fd      	bhi.n	bec <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     bf0:	4770      	bx	lr
     bf2:	46c0      	nop			; (mov r8, r8)

00000bf4 <_init_chip>:
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     bf4:	2106      	movs	r1, #6

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bf6:	b510      	push	{r4, lr}
     bf8:	4a07      	ldr	r2, [pc, #28]	; (c18 <_init_chip+0x24>)
     bfa:	6853      	ldr	r3, [r2, #4]
     bfc:	430b      	orrs	r3, r1
     bfe:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     c00:	4b06      	ldr	r3, [pc, #24]	; (c1c <_init_chip+0x28>)
     c02:	4798      	blx	r3
	_sysctrl_init_sources();
     c04:	4b06      	ldr	r3, [pc, #24]	; (c20 <_init_chip+0x2c>)
     c06:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     c08:	2008      	movs	r0, #8
     c0a:	4c06      	ldr	r4, [pc, #24]	; (c24 <_init_chip+0x30>)
     c0c:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     c0e:	4b06      	ldr	r3, [pc, #24]	; (c28 <_init_chip+0x34>)
     c10:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c12:	20f7      	movs	r0, #247	; 0xf7
     c14:	47a0      	blx	r4
}
     c16:	bd10      	pop	{r4, pc}
     c18:	41004000 	.word	0x41004000
     c1c:	00000e05 	.word	0x00000e05
     c20:	00001839 	.word	0x00001839
     c24:	00000db1 	.word	0x00000db1
     c28:	0000187d 	.word	0x0000187d

00000c2c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c2c:	4a1d      	ldr	r2, [pc, #116]	; (ca4 <_ext_irq_init+0x78>)
     c2e:	7853      	ldrb	r3, [r2, #1]
     c30:	09db      	lsrs	r3, r3, #7
     c32:	d1fc      	bne.n	c2e <_ext_irq_init+0x2>
     c34:	4a1b      	ldr	r2, [pc, #108]	; (ca4 <_ext_irq_init+0x78>)
     c36:	7853      	ldrb	r3, [r2, #1]
     c38:	09db      	lsrs	r3, r3, #7
     c3a:	d1fc      	bne.n	c36 <_ext_irq_init+0xa>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     c3c:	7811      	ldrb	r1, [r2, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     c3e:	0789      	lsls	r1, r1, #30
     c40:	d508      	bpl.n	c54 <_ext_irq_init+0x28>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     c42:	7013      	strb	r3, [r2, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c44:	4a17      	ldr	r2, [pc, #92]	; (ca4 <_ext_irq_init+0x78>)
     c46:	7853      	ldrb	r3, [r2, #1]
     c48:	09db      	lsrs	r3, r3, #7
     c4a:	d1fc      	bne.n	c46 <_ext_irq_init+0x1a>
     c4c:	4a15      	ldr	r2, [pc, #84]	; (ca4 <_ext_irq_init+0x78>)
     c4e:	7853      	ldrb	r3, [r2, #1]
     c50:	09db      	lsrs	r3, r3, #7
     c52:	d1fc      	bne.n	c4e <_ext_irq_init+0x22>
	((Eic *)hw)->CTRL.reg = data;
     c54:	2301      	movs	r3, #1
     c56:	4a13      	ldr	r2, [pc, #76]	; (ca4 <_ext_irq_init+0x78>)
     c58:	7013      	strb	r3, [r2, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c5a:	7853      	ldrb	r3, [r2, #1]
     c5c:	09db      	lsrs	r3, r3, #7
     c5e:	d1fc      	bne.n	c5a <_ext_irq_init+0x2e>
     c60:	4a10      	ldr	r2, [pc, #64]	; (ca4 <_ext_irq_init+0x78>)
     c62:	7853      	ldrb	r3, [r2, #1]
     c64:	09db      	lsrs	r3, r3, #7
     c66:	d1fc      	bne.n	c62 <_ext_irq_init+0x36>
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     c68:	2102      	movs	r1, #2
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     c6a:	7093      	strb	r3, [r2, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     c6c:	6053      	str	r3, [r2, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     c6e:	6153      	str	r3, [r2, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     c70:	6193      	str	r3, [r2, #24]
     c72:	61d3      	str	r3, [r2, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     c74:	7813      	ldrb	r3, [r2, #0]
     c76:	430b      	orrs	r3, r1
     c78:	7013      	strb	r3, [r2, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c7a:	4a0a      	ldr	r2, [pc, #40]	; (ca4 <_ext_irq_init+0x78>)
     c7c:	7853      	ldrb	r3, [r2, #1]
     c7e:	09db      	lsrs	r3, r3, #7
     c80:	d1fc      	bne.n	c7c <_ext_irq_init+0x50>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c82:	2210      	movs	r2, #16
     c84:	2180      	movs	r1, #128	; 0x80
     c86:	4b08      	ldr	r3, [pc, #32]	; (ca8 <_ext_irq_init+0x7c>)
     c88:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     c8a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c8e:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c92:	3101      	adds	r1, #1
     c94:	31ff      	adds	r1, #255	; 0xff
     c96:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c98:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     c9a:	4b04      	ldr	r3, [pc, #16]	; (cac <_ext_irq_init+0x80>)
     c9c:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     c9e:	2000      	movs	r0, #0
     ca0:	4770      	bx	lr
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	40001800 	.word	0x40001800
     ca8:	e000e100 	.word	0xe000e100
     cac:	20000a64 	.word	0x20000a64

00000cb0 <_ext_irq_enable>:
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;

	for (; i < ARRAY_SIZE(_map); i++) {
		if (_map[i].pin == pin) {
     cb0:	2828      	cmp	r0, #40	; 0x28
     cb2:	d002      	beq.n	cba <_ext_irq_enable+0xa>
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
		return ERR_INVALID_ARG;
     cb4:	200d      	movs	r0, #13
     cb6:	4240      	negs	r0, r0
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
}
     cb8:	4770      	bx	lr
	if (enable) {
     cba:	2900      	cmp	r1, #0
     cbc:	d106      	bne.n	ccc <_ext_irq_enable+0x1c>
	((Eic *)hw)->INTENCLR.reg = mask;
     cbe:	2280      	movs	r2, #128	; 0x80
     cc0:	4b05      	ldr	r3, [pc, #20]	; (cd8 <_ext_irq_enable+0x28>)
     cc2:	0052      	lsls	r2, r2, #1
     cc4:	609a      	str	r2, [r3, #8]
	return ERR_NONE;
     cc6:	2000      	movs	r0, #0
	((Eic *)hw)->INTFLAG.reg = mask;
     cc8:	611a      	str	r2, [r3, #16]
     cca:	e7f5      	b.n	cb8 <_ext_irq_enable+0x8>
	((Eic *)hw)->INTENSET.reg = mask;
     ccc:	2280      	movs	r2, #128	; 0x80
     cce:	4b02      	ldr	r3, [pc, #8]	; (cd8 <_ext_irq_enable+0x28>)
     cd0:	0052      	lsls	r2, r2, #1
     cd2:	60da      	str	r2, [r3, #12]
     cd4:	2000      	movs	r0, #0
     cd6:	e7ef      	b.n	cb8 <_ext_irq_enable+0x8>
     cd8:	40001800 	.word	0x40001800

00000cdc <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cde:	46ce      	mov	lr, r9
     ce0:	4647      	mov	r7, r8
     ce2:	b580      	push	{r7, lr}
	return ((Eic *)hw)->INTFLAG.reg;
     ce4:	4b2c      	ldr	r3, [pc, #176]	; (d98 <EIC_Handler+0xbc>)
     ce6:	b083      	sub	sp, #12
     ce8:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     cea:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     cec:	400a      	ands	r2, r1
     cee:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     cf0:	9a01      	ldr	r2, [sp, #4]

	ASSERT(callback);
     cf2:	492a      	ldr	r1, [pc, #168]	; (d9c <EIC_Handler+0xc0>)
	((Eic *)hw)->INTFLAG.reg = mask;
     cf4:	611a      	str	r2, [r3, #16]
     cf6:	4b2a      	ldr	r3, [pc, #168]	; (da0 <EIC_Handler+0xc4>)
     cf8:	22d2      	movs	r2, #210	; 0xd2
     cfa:	6818      	ldr	r0, [r3, #0]
     cfc:	4699      	mov	r9, r3
     cfe:	1e43      	subs	r3, r0, #1
     d00:	4198      	sbcs	r0, r3
     d02:	4b28      	ldr	r3, [pc, #160]	; (da4 <EIC_Handler+0xc8>)
     d04:	b2c0      	uxtb	r0, r0
     d06:	4798      	blx	r3

	while (flags) {
     d08:	9b01      	ldr	r3, [sp, #4]
     d0a:	2b00      	cmp	r3, #0
     d0c:	d038      	beq.n	d80 <EIC_Handler+0xa4>
     d0e:	2601      	movs	r6, #1
     d10:	4f25      	ldr	r7, [pc, #148]	; (da8 <EIC_Handler+0xcc>)
     d12:	4d26      	ldr	r5, [pc, #152]	; (dac <EIC_Handler+0xd0>)
     d14:	4276      	negs	r6, r6
		pos = ffs(flags) - 1;
     d16:	9801      	ldr	r0, [sp, #4]
     d18:	47b8      	blx	r7
     d1a:	3801      	subs	r0, #1
     d1c:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d1e:	1c63      	adds	r3, r4, #1
     d20:	d024      	beq.n	d6c <EIC_Handler+0x90>
	while (flags) {
     d22:	2301      	movs	r3, #1
     d24:	4698      	mov	r8, r3
     d26:	2208      	movs	r2, #8
     d28:	2001      	movs	r0, #1
     d2a:	2100      	movs	r1, #0
     d2c:	2301      	movs	r3, #1
     d2e:	e007      	b.n	d40 <EIC_Handler+0x64>
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
     d30:	3301      	adds	r3, #1
     d32:	b2d9      	uxtb	r1, r3
			while (upper >= lower) {
     d34:	4281      	cmp	r1, r0
     d36:	d80c      	bhi.n	d52 <EIC_Handler+0x76>
     d38:	1843      	adds	r3, r0, r1
     d3a:	105a      	asrs	r2, r3, #1
     d3c:	00d2      	lsls	r2, r2, #3
     d3e:	5d52      	ldrb	r2, [r2, r5]
				middle = (upper + lower) >> 1;
     d40:	105b      	asrs	r3, r3, #1
     d42:	b2db      	uxtb	r3, r3
				if (_map[middle].extint == pos) {
     d44:	42a2      	cmp	r2, r4
     d46:	d020      	beq.n	d8a <EIC_Handler+0xae>
				if (_map[middle].extint < pos) {
     d48:	dbf2      	blt.n	d30 <EIC_Handler+0x54>
				} else {
					upper = middle - 1;
     d4a:	3b01      	subs	r3, #1
     d4c:	b2d8      	uxtb	r0, r3
			while (upper >= lower) {
     d4e:	4288      	cmp	r0, r1
     d50:	d2f2      	bcs.n	d38 <EIC_Handler+0x5c>
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     d52:	1c73      	adds	r3, r6, #1
     d54:	d11a      	bne.n	d8c <EIC_Handler+0xb0>
				callback(pin);
			}
			flags &= ~(1ul << pos);
     d56:	4642      	mov	r2, r8
     d58:	40a2      	lsls	r2, r4
     d5a:	9b01      	ldr	r3, [sp, #4]
     d5c:	4393      	bics	r3, r2
     d5e:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     d60:	9801      	ldr	r0, [sp, #4]
     d62:	47b8      	blx	r7
     d64:	3801      	subs	r0, #1
     d66:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d68:	1c63      	adds	r3, r4, #1
     d6a:	d1dc      	bne.n	d26 <EIC_Handler+0x4a>
	return ((Eic *)hw)->INTFLAG.reg;
     d6c:	4b0a      	ldr	r3, [pc, #40]	; (d98 <EIC_Handler+0xbc>)
     d6e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d70:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d72:	400a      	ands	r2, r1
     d74:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     d76:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d78:	611a      	str	r2, [r3, #16]
	while (flags) {
     d7a:	9b01      	ldr	r3, [sp, #4]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d1ca      	bne.n	d16 <EIC_Handler+0x3a>
	}
}
     d80:	b003      	add	sp, #12
     d82:	bc0c      	pop	{r2, r3}
     d84:	4690      	mov	r8, r2
     d86:	4699      	mov	r9, r3
     d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pin = _map[middle].pin;
     d8a:	2628      	movs	r6, #40	; 0x28
				callback(pin);
     d8c:	464b      	mov	r3, r9
     d8e:	0030      	movs	r0, r6
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	4798      	blx	r3
     d94:	e7df      	b.n	d56 <EIC_Handler+0x7a>
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	40001800 	.word	0x40001800
     d9c:	00015554 	.word	0x00015554
     da0:	20000a64 	.word	0x20000a64
     da4:	00000a1d 	.word	0x00000a1d
     da8:	00009535 	.word	0x00009535
     dac:	0001556c 	.word	0x0001556c

00000db0 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     db0:	07c3      	lsls	r3, r0, #31
     db2:	d508      	bpl.n	dc6 <_gclk_init_generators_by_fref+0x16>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     db4:	2380      	movs	r3, #128	; 0x80
     db6:	4a0f      	ldr	r2, [pc, #60]	; (df4 <_gclk_init_generators_by_fref+0x44>)
     db8:	005b      	lsls	r3, r3, #1
     dba:	6093      	str	r3, [r2, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     dbc:	4b0e      	ldr	r3, [pc, #56]	; (df8 <_gclk_init_generators_by_fref+0x48>)
     dbe:	6053      	str	r3, [r2, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     dc0:	7853      	ldrb	r3, [r2, #1]
     dc2:	09db      	lsrs	r3, r3, #7
     dc4:	d1fc      	bne.n	dc0 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     dc6:	0783      	lsls	r3, r0, #30
     dc8:	d508      	bpl.n	ddc <_gclk_init_generators_by_fref+0x2c>
	((Gclk *)hw)->GENDIV.reg = data;
     dca:	2302      	movs	r3, #2
     dcc:	4a09      	ldr	r2, [pc, #36]	; (df4 <_gclk_init_generators_by_fref+0x44>)
     dce:	33ff      	adds	r3, #255	; 0xff
     dd0:	6093      	str	r3, [r2, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     dd2:	4b0a      	ldr	r3, [pc, #40]	; (dfc <_gclk_init_generators_by_fref+0x4c>)
     dd4:	6053      	str	r3, [r2, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     dd6:	7853      	ldrb	r3, [r2, #1]
     dd8:	09db      	lsrs	r3, r3, #7
     dda:	d1fc      	bne.n	dd6 <_gclk_init_generators_by_fref+0x26>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     ddc:	0703      	lsls	r3, r0, #28
     dde:	d508      	bpl.n	df2 <_gclk_init_generators_by_fref+0x42>
	((Gclk *)hw)->GENDIV.reg = data;
     de0:	2304      	movs	r3, #4
     de2:	4a04      	ldr	r2, [pc, #16]	; (df4 <_gclk_init_generators_by_fref+0x44>)
     de4:	33ff      	adds	r3, #255	; 0xff
     de6:	6093      	str	r3, [r2, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     de8:	4b05      	ldr	r3, [pc, #20]	; (e00 <_gclk_init_generators_by_fref+0x50>)
     dea:	6053      	str	r3, [r2, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     dec:	7853      	ldrb	r3, [r2, #1]
     dee:	09db      	lsrs	r3, r3, #7
     df0:	d1fc      	bne.n	dec <_gclk_init_generators_by_fref+0x3c>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
     df2:	4770      	bx	lr
     df4:	40000c00 	.word	0x40000c00
     df8:	00010700 	.word	0x00010700
     dfc:	00010601 	.word	0x00010601
     e00:	00010303 	.word	0x00010303

00000e04 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     e04:	4b06      	ldr	r3, [pc, #24]	; (e20 <_pm_init+0x1c>)
     e06:	7a1a      	ldrb	r2, [r3, #8]
     e08:	b2d2      	uxtb	r2, r2
     e0a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     e0c:	7a5a      	ldrb	r2, [r3, #9]
     e0e:	b2d2      	uxtb	r2, r2
     e10:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     e12:	7a9a      	ldrb	r2, [r3, #10]
     e14:	b2d2      	uxtb	r2, r2
     e16:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     e18:	7ada      	ldrb	r2, [r3, #11]
     e1a:	b2d2      	uxtb	r2, r2
     e1c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     e1e:	4770      	bx	lr
     e20:	40000400 	.word	0x40000400

00000e24 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     e24:	b570      	push	{r4, r5, r6, lr}
     e26:	0005      	movs	r5, r0
	ASSERT(dev);
     e28:	1e43      	subs	r3, r0, #1
     e2a:	4198      	sbcs	r0, r3
{
     e2c:	000c      	movs	r4, r1
	ASSERT(dev);
     e2e:	4b0f      	ldr	r3, [pc, #60]	; (e6c <_timer_init+0x48>)
     e30:	b2c0      	uxtb	r0, r0
     e32:	2230      	movs	r2, #48	; 0x30
     e34:	490e      	ldr	r1, [pc, #56]	; (e70 <_timer_init+0x4c>)
     e36:	4798      	blx	r3
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     e38:	2301      	movs	r3, #1

	uint16_t register_value;
	dev->hw = hw;
     e3a:	60ec      	str	r4, [r5, #12]
     e3c:	8023      	strh	r3, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e3e:	7aa3      	ldrb	r3, [r4, #10]
     e40:	09db      	lsrs	r3, r3, #7
     e42:	d1fc      	bne.n	e3e <_timer_init+0x1a>
     e44:	7aa3      	ldrb	r3, [r4, #10]
     e46:	09db      	lsrs	r3, r3, #7
     e48:	d1fc      	bne.n	e44 <_timer_init+0x20>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     e4a:	3380      	adds	r3, #128	; 0x80
     e4c:	8023      	strh	r3, [r4, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e4e:	7aa3      	ldrb	r3, [r4, #10]
     e50:	09db      	lsrs	r3, r3, #7
     e52:	d1fc      	bne.n	e4e <_timer_init+0x2a>

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     e54:	69a3      	ldr	r3, [r4, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     e56:	230a      	movs	r3, #10
     e58:	61a3      	str	r3, [r4, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e5a:	7aa3      	ldrb	r3, [r4, #10]
     e5c:	09db      	lsrs	r3, r3, #7
     e5e:	d1fc      	bne.n	e5a <_timer_init+0x36>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     e60:	3301      	adds	r3, #1
     e62:	71e3      	strb	r3, [r4, #7]
	        | (CONF_RTC_PEREO4 << RTC_MODE0_EVCTRL_PEREO4_Pos) | (CONF_RTC_PEREO5 << RTC_MODE0_EVCTRL_PEREO5_Pos)
	        | (CONF_RTC_PEREO6 << RTC_MODE0_EVCTRL_PEREO6_Pos) | (CONF_RTC_PEREO7 << RTC_MODE0_EVCTRL_PEREO7_Pos)
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	_rtc_dev = dev;
     e64:	4b03      	ldr	r3, [pc, #12]	; (e74 <_timer_init+0x50>)

	return ERR_NONE;
}
     e66:	2000      	movs	r0, #0
	_rtc_dev = dev;
     e68:	601d      	str	r5, [r3, #0]
}
     e6a:	bd70      	pop	{r4, r5, r6, pc}
     e6c:	00000a1d 	.word	0x00000a1d
     e70:	00015574 	.word	0x00015574
     e74:	20000a68 	.word	0x20000a68

00000e78 <_timer_start>:

/**
 * \brief Start hardware timer
 */
void _timer_start(struct _timer_device *const dev)
{
     e78:	b510      	push	{r4, lr}
     e7a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     e7c:	d01c      	beq.n	eb8 <_timer_start+0x40>
     e7e:	68c0      	ldr	r0, [r0, #12]
     e80:	1e43      	subs	r3, r0, #1
     e82:	4198      	sbcs	r0, r3
     e84:	b2c0      	uxtb	r0, r0
     e86:	2267      	movs	r2, #103	; 0x67
     e88:	4b0c      	ldr	r3, [pc, #48]	; (ebc <_timer_start+0x44>)
     e8a:	490d      	ldr	r1, [pc, #52]	; (ec0 <_timer_start+0x48>)
     e8c:	4798      	blx	r3
     e8e:	2208      	movs	r2, #8
     e90:	4b0c      	ldr	r3, [pc, #48]	; (ec4 <_timer_start+0x4c>)
     e92:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(RTC_IRQn);
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
     e94:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     e96:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
     e98:	2300      	movs	r3, #0
     e9a:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e9c:	7a93      	ldrb	r3, [r2, #10]
     e9e:	09db      	lsrs	r3, r3, #7
     ea0:	d1fc      	bne.n	e9c <_timer_start+0x24>
     ea2:	7a93      	ldrb	r3, [r2, #10]
     ea4:	09db      	lsrs	r3, r3, #7
     ea6:	d1fc      	bne.n	ea2 <_timer_start+0x2a>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     ea8:	2102      	movs	r1, #2
     eaa:	8813      	ldrh	r3, [r2, #0]
     eac:	430b      	orrs	r3, r1
     eae:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     eb0:	7a93      	ldrb	r3, [r2, #10]
     eb2:	09db      	lsrs	r3, r3, #7
     eb4:	d1fc      	bne.n	eb0 <_timer_start+0x38>
	hri_rtcmode0_wait_for_sync(dev->hw);
	hri_rtcmode0_set_CTRL_ENABLE_bit(dev->hw);
}
     eb6:	bd10      	pop	{r4, pc}
     eb8:	2000      	movs	r0, #0
     eba:	e7e4      	b.n	e86 <_timer_start+0xe>
     ebc:	00000a1d 	.word	0x00000a1d
     ec0:	00015574 	.word	0x00015574
     ec4:	e000e100 	.word	0xe000e100

00000ec8 <_timer_is_started>:
/**
 * \brief Check if timer is running
 */
bool _timer_is_started(const struct _timer_device *const dev)
{
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
     ec8:	68c2      	ldr	r2, [r0, #12]
     eca:	7a93      	ldrb	r3, [r2, #10]
     ecc:	09db      	lsrs	r3, r3, #7
     ece:	d1fc      	bne.n	eca <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     ed0:	8810      	ldrh	r0, [r2, #0]
	return (bool)tmp;
     ed2:	0780      	lsls	r0, r0, #30
     ed4:	0fc0      	lsrs	r0, r0, #31
}
     ed6:	4770      	bx	lr

00000ed8 <_timer_set_irq>:
 * \brief Set timer IRQ
 */
void _timer_set_irq(struct _timer_device *const dev)
{
	(void)dev;
}
     ed8:	4770      	bx	lr
     eda:	46c0      	nop			; (mov r8, r8)

00000edc <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     edc:	2000      	movs	r0, #0
     ede:	4770      	bx	lr

00000ee0 <RTC_Handler>:
/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
	_rtc_timer_interrupt_handler(_rtc_dev);
     ee0:	4b07      	ldr	r3, [pc, #28]	; (f00 <RTC_Handler+0x20>)
{
     ee2:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     ee4:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
     ee6:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     ee8:	7a1a      	ldrb	r2, [r3, #8]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     eea:	07d2      	lsls	r2, r2, #31
     eec:	d507      	bpl.n	efe <RTC_Handler+0x1e>
		if (dev->timer_cb.period_expired) {
     eee:	6822      	ldr	r2, [r4, #0]
     ef0:	2a00      	cmp	r2, #0
     ef2:	d002      	beq.n	efa <RTC_Handler+0x1a>
			dev->timer_cb.period_expired(dev);
     ef4:	0020      	movs	r0, r4
     ef6:	4790      	blx	r2
     ef8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     efa:	2201      	movs	r2, #1
     efc:	721a      	strb	r2, [r3, #8]
}
     efe:	bd10      	pop	{r4, pc}
     f00:	20000a68 	.word	0x20000a68

00000f04 <_usart_async_init>:

/**
 * \brief Initialize asynchronous SERCOM USART
 */
int32_t _usart_async_init(struct _usart_async_device *const device, void *const hw)
{
     f04:	b5f0      	push	{r4, r5, r6, r7, lr}
     f06:	46c6      	mov	lr, r8
     f08:	0006      	movs	r6, r0
	int32_t init_status;

	ASSERT(device);
     f0a:	1e43      	subs	r3, r0, #1
     f0c:	4198      	sbcs	r0, r3
{
     f0e:	000c      	movs	r4, r1
	ASSERT(device);
     f10:	4f2a      	ldr	r7, [pc, #168]	; (fbc <_usart_async_init+0xb8>)
     f12:	4b2b      	ldr	r3, [pc, #172]	; (fc0 <_usart_async_init+0xbc>)
{
     f14:	b500      	push	{lr}
	ASSERT(device);
     f16:	b2c0      	uxtb	r0, r0
     f18:	22b1      	movs	r2, #177	; 0xb1
     f1a:	0039      	movs	r1, r7
     f1c:	4698      	mov	r8, r3
     f1e:	4798      	blx	r3
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     f20:	4b28      	ldr	r3, [pc, #160]	; (fc4 <_usart_async_init+0xc0>)
     f22:	18e5      	adds	r5, r4, r3
     f24:	0aad      	lsrs	r5, r5, #10
     f26:	b2ed      	uxtb	r5, r5
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
		if (_usarts[i].number == sercom_offset) {
     f28:	2d04      	cmp	r5, #4
     f2a:	d003      	beq.n	f34 <_usart_async_init+0x30>
			return i;
		}
	}

	ASSERT(false);
     f2c:	4a26      	ldr	r2, [pc, #152]	; (fc8 <_usart_async_init+0xc4>)
     f2e:	0039      	movs	r1, r7
     f30:	2000      	movs	r0, #0
     f32:	47c0      	blx	r8
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
}

static inline void hri_sercomusart_wait_for_sync(const void *const hw)
{
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f34:	8a23      	ldrh	r3, [r4, #16]
     f36:	0bdb      	lsrs	r3, r3, #15
     f38:	d1fc      	bne.n	f34 <_usart_async_init+0x30>
     f3a:	8a23      	ldrh	r3, [r4, #16]
     f3c:	0bdb      	lsrs	r3, r3, #15
     f3e:	d1fc      	bne.n	f3a <_usart_async_init+0x36>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     f40:	6822      	ldr	r2, [r4, #0]
static int32_t _usart_init(void *const hw)
{
	uint8_t i = _get_sercom_index(hw);

	hri_sercomusart_wait_for_sync(hw);
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     f42:	0792      	lsls	r2, r2, #30
     f44:	d506      	bpl.n	f54 <_usart_async_init+0x50>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f46:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f48:	8a23      	ldrh	r3, [r4, #16]
     f4a:	0bdb      	lsrs	r3, r3, #15
     f4c:	d1fc      	bne.n	f48 <_usart_async_init+0x44>
     f4e:	8a23      	ldrh	r3, [r4, #16]
     f50:	0bdb      	lsrs	r3, r3, #15
     f52:	d1fc      	bne.n	f4e <_usart_async_init+0x4a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f54:	2301      	movs	r3, #1
     f56:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f58:	8a23      	ldrh	r3, [r4, #16]
     f5a:	0bdb      	lsrs	r3, r3, #15
     f5c:	d1fc      	bne.n	f58 <_usart_async_init+0x54>
     f5e:	8a23      	ldrh	r3, [r4, #16]
     f60:	0bdb      	lsrs	r3, r3, #15
     f62:	d1fc      	bne.n	f5e <_usart_async_init+0x5a>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f64:	4b19      	ldr	r3, [pc, #100]	; (fcc <_usart_async_init+0xc8>)
     f66:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f68:	8a23      	ldrh	r3, [r4, #16]
     f6a:	0bdb      	lsrs	r3, r3, #15
     f6c:	d1fc      	bne.n	f68 <_usart_async_init+0x64>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     f6e:	23c0      	movs	r3, #192	; 0xc0
     f70:	029b      	lsls	r3, r3, #10
     f72:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f74:	8a23      	ldrh	r3, [r4, #16]
     f76:	0bdb      	lsrs	r3, r3, #15
     f78:	d1fc      	bne.n	f74 <_usart_async_init+0x70>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     f7a:	4a15      	ldr	r2, [pc, #84]	; (fd0 <_usart_async_init+0xcc>)
     f7c:	8162      	strh	r2, [r4, #10]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     f7e:	7223      	strb	r3, [r4, #8]
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM4) {
     f80:	4b14      	ldr	r3, [pc, #80]	; (fd4 <_usart_async_init+0xd0>)
	device->hw = hw;
     f82:	61b4      	str	r4, [r6, #24]
	if (hw == SERCOM4) {
     f84:	429c      	cmp	r4, r3
     f86:	d016      	beq.n	fb6 <_usart_async_init+0xb2>
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     f88:	3507      	adds	r5, #7
  if ((int32_t)(IRQn) >= 0)
     f8a:	b2eb      	uxtb	r3, r5
     f8c:	062a      	lsls	r2, r5, #24
     f8e:	d40e      	bmi.n	fae <_usart_async_init+0xaa>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f90:	221f      	movs	r2, #31
     f92:	401a      	ands	r2, r3
     f94:	2301      	movs	r3, #1
     f96:	2180      	movs	r1, #128	; 0x80
     f98:	4093      	lsls	r3, r2
     f9a:	4a0f      	ldr	r2, [pc, #60]	; (fd8 <_usart_async_init+0xd4>)
     f9c:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     f9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     fa2:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fa6:	3101      	adds	r1, #1
     fa8:	31ff      	adds	r1, #255	; 0xff
     faa:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fac:	6013      	str	r3, [r2, #0]
}
     fae:	2000      	movs	r0, #0
     fb0:	bc04      	pop	{r2}
     fb2:	4690      	mov	r8, r2
     fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_sercom4_dev = (struct _usart_async_device *)dev;
     fb6:	4b09      	ldr	r3, [pc, #36]	; (fdc <_usart_async_init+0xd8>)
     fb8:	601e      	str	r6, [r3, #0]
     fba:	e7e5      	b.n	f88 <_usart_async_init+0x84>
     fbc:	0001558c 	.word	0x0001558c
     fc0:	00000a1d 	.word	0x00000a1d
     fc4:	bdfff800 	.word	0xbdfff800
     fc8:	0000024e 	.word	0x0000024e
     fcc:	40010004 	.word	0x40010004
     fd0:	fffffe5c 	.word	0xfffffe5c
     fd4:	42001800 	.word	0x42001800
     fd8:	e000e100 	.word	0xe000e100
     fdc:	20000a6c 	.word	0x20000a6c

00000fe0 <_usart_async_enable>:
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     fe0:	2102      	movs	r1, #2
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     fe2:	6982      	ldr	r2, [r0, #24]
     fe4:	6813      	ldr	r3, [r2, #0]
     fe6:	430b      	orrs	r3, r1
     fe8:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     fea:	8a13      	ldrh	r3, [r2, #16]
     fec:	0bdb      	lsrs	r3, r3, #15
     fee:	d1fc      	bne.n	fea <_usart_async_enable+0xa>
}
     ff0:	4770      	bx	lr
     ff2:	46c0      	nop			; (mov r8, r8)

00000ff4 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     ff4:	6983      	ldr	r3, [r0, #24]
     ff6:	b289      	uxth	r1, r1
}

static inline void hri_sercomusart_write_DATA_reg(const void *const hw, hri_sercomusart_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DATA.reg = data;
     ff8:	8319      	strh	r1, [r3, #24]
}
     ffa:	4770      	bx	lr

00000ffc <_usart_async_enable_byte_sent_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     ffc:	2201      	movs	r2, #1
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     ffe:	6983      	ldr	r3, [r0, #24]
    1000:	735a      	strb	r2, [r3, #13]
}
    1002:	4770      	bx	lr

00001004 <_usart_async_enable_tx_done_irq>:
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1004:	2202      	movs	r2, #2
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1006:	6983      	ldr	r3, [r0, #24]
    1008:	735a      	strb	r2, [r3, #13]
}
    100a:	4770      	bx	lr

0000100c <_usart_async_set_irq_state>:
{
    100c:	b570      	push	{r4, r5, r6, lr}
    100e:	0004      	movs	r4, r0
    1010:	0016      	movs	r6, r2
	ASSERT(device);
    1012:	1e43      	subs	r3, r0, #1
    1014:	4198      	sbcs	r0, r3
    1016:	2284      	movs	r2, #132	; 0x84
{
    1018:	000d      	movs	r5, r1
	ASSERT(device);
    101a:	0092      	lsls	r2, r2, #2
    101c:	4b0e      	ldr	r3, [pc, #56]	; (1058 <_usart_async_set_irq_state+0x4c>)
    101e:	b2c0      	uxtb	r0, r0
    1020:	490e      	ldr	r1, [pc, #56]	; (105c <_usart_async_set_irq_state+0x50>)
    1022:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    1024:	2302      	movs	r3, #2
    1026:	002a      	movs	r2, r5
    1028:	439a      	bics	r2, r3
    102a:	d002      	beq.n	1032 <_usart_async_set_irq_state+0x26>
	} else if (USART_ASYNC_RX_DONE == type) {
    102c:	2d01      	cmp	r5, #1
    102e:	d00a      	beq.n	1046 <_usart_async_set_irq_state+0x3a>
}
    1030:	bd70      	pop	{r4, r5, r6, pc}
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    1032:	69a2      	ldr	r2, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1034:	2101      	movs	r1, #1
	if (value == 0x0) {
    1036:	2e00      	cmp	r6, #0
    1038:	d102      	bne.n	1040 <_usart_async_set_irq_state+0x34>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    103a:	7311      	strb	r1, [r2, #12]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    103c:	7313      	strb	r3, [r2, #12]
    103e:	e7f7      	b.n	1030 <_usart_async_set_irq_state+0x24>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    1040:	7351      	strb	r1, [r2, #13]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1042:	7353      	strb	r3, [r2, #13]
    1044:	e7f4      	b.n	1030 <_usart_async_set_irq_state+0x24>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    1046:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1048:	2204      	movs	r2, #4
	if (value == 0x0) {
    104a:	2e00      	cmp	r6, #0
    104c:	d001      	beq.n	1052 <_usart_async_set_irq_state+0x46>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    104e:	735a      	strb	r2, [r3, #13]
}
    1050:	e7ee      	b.n	1030 <_usart_async_set_irq_state+0x24>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    1052:	731a      	strb	r2, [r3, #12]
    1054:	e7ec      	b.n	1030 <_usart_async_set_irq_state+0x24>
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	00000a1d 	.word	0x00000a1d
    105c:	0001558c 	.word	0x0001558c

00001060 <SERCOM4_Handler>:
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    1060:	2201      	movs	r2, #1
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1062:	4b14      	ldr	r3, [pc, #80]	; (10b4 <SERCOM4_Handler+0x54>)
{
    1064:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
    1066:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
    1068:	6983      	ldr	r3, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    106a:	7b99      	ldrb	r1, [r3, #14]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
    106c:	420a      	tst	r2, r1
    106e:	d002      	beq.n	1076 <SERCOM4_Handler+0x16>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
    1070:	7b59      	ldrb	r1, [r3, #13]
    1072:	420a      	tst	r2, r1
    1074:	d110      	bne.n	1098 <SERCOM4_Handler+0x38>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1076:	7b9a      	ldrb	r2, [r3, #14]
    1078:	2101      	movs	r1, #1
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
    107a:	0792      	lsls	r2, r2, #30
    107c:	d503      	bpl.n	1086 <SERCOM4_Handler+0x26>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
    107e:	7b5a      	ldrb	r2, [r3, #13]
    1080:	0852      	lsrs	r2, r2, #1
    1082:	4211      	tst	r1, r2
    1084:	d10c      	bne.n	10a0 <SERCOM4_Handler+0x40>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    1086:	7b9a      	ldrb	r2, [r3, #14]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
    1088:	0752      	lsls	r2, r2, #29
    108a:	d504      	bpl.n	1096 <SERCOM4_Handler+0x36>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
    108c:	8a1a      	ldrh	r2, [r3, #16]
		if (hri_sercomusart_read_STATUS_reg(hw)
    108e:	0752      	lsls	r2, r2, #29
    1090:	d00b      	beq.n	10aa <SERCOM4_Handler+0x4a>
	((Sercom *)hw)->USART.STATUS.reg = mask;
    1092:	4a09      	ldr	r2, [pc, #36]	; (10b8 <SERCOM4_Handler+0x58>)
    1094:	821a      	strh	r2, [r3, #16]
}
    1096:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    1098:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_byte_sent(device);
    109a:	6803      	ldr	r3, [r0, #0]
    109c:	4798      	blx	r3
    109e:	e7fa      	b.n	1096 <SERCOM4_Handler+0x36>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    10a0:	2202      	movs	r2, #2
    10a2:	731a      	strb	r2, [r3, #12]
		device->usart_cb.tx_done_cb(device);
    10a4:	6883      	ldr	r3, [r0, #8]
    10a6:	4798      	blx	r3
    10a8:	e7f5      	b.n	1096 <SERCOM4_Handler+0x36>
	return ((Sercom *)hw)->USART.DATA.reg;
    10aa:	8b19      	ldrh	r1, [r3, #24]
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
    10ac:	6843      	ldr	r3, [r0, #4]
    10ae:	b2c9      	uxtb	r1, r1
    10b0:	4798      	blx	r3
}
    10b2:	e7f0      	b.n	1096 <SERCOM4_Handler+0x36>
    10b4:	20000a6c 	.word	0x20000a6c
    10b8:	ffff8007 	.word	0xffff8007

000010bc <_i2c_m_sync_init>:
 * \brief Initialize sercom i2c module to use in sync mode
 *
 * \param[in] i2c_dev The pointer to i2c device
 */
int32_t _i2c_m_sync_init(struct _i2c_m_sync_device *const i2c_dev, void *const hw)
{
    10bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    10be:	4b20      	ldr	r3, [pc, #128]	; (1140 <_i2c_m_sync_init+0x84>)
{
    10c0:	0005      	movs	r5, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    10c2:	18cb      	adds	r3, r1, r3
    10c4:	0a9b      	lsrs	r3, r3, #10
		if (_i2cms[i].number == sercom_offset) {
    10c6:	b2db      	uxtb	r3, r3
{
    10c8:	000c      	movs	r4, r1
    10ca:	4f1e      	ldr	r7, [pc, #120]	; (1144 <_i2c_m_sync_init+0x88>)
		if (_i2cms[i].number == sercom_offset) {
    10cc:	2b02      	cmp	r3, #2
    10ce:	d035      	beq.n	113c <_i2c_m_sync_init+0x80>
	ASSERT(false);
    10d0:	4a1d      	ldr	r2, [pc, #116]	; (1148 <_i2c_m_sync_init+0x8c>)
    10d2:	0039      	movs	r1, r7
    10d4:	2000      	movs	r0, #0
    10d6:	4e1d      	ldr	r6, [pc, #116]	; (114c <_i2c_m_sync_init+0x90>)
    10d8:	47b0      	blx	r6
	uint8_t i = _get_i2cm_index(hw);

	ASSERT(i2c_dev);
    10da:	0028      	movs	r0, r5
    10dc:	1e43      	subs	r3, r0, #1
    10de:	4198      	sbcs	r0, r3
    10e0:	4a1b      	ldr	r2, [pc, #108]	; (1150 <_i2c_m_sync_init+0x94>)
    10e2:	b2c0      	uxtb	r0, r0
    10e4:	0039      	movs	r1, r7
    10e6:	47b0      	blx	r6

	i2c_dev->hw = hw;
    10e8:	612c      	str	r4, [r5, #16]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10ea:	8a23      	ldrh	r3, [r4, #16]
    10ec:	0bdb      	lsrs	r3, r3, #15
    10ee:	d1fc      	bne.n	10ea <_i2c_m_sync_init+0x2e>
    10f0:	8a23      	ldrh	r3, [r4, #16]
    10f2:	0bdb      	lsrs	r3, r3, #15
    10f4:	d1fc      	bne.n	10f0 <_i2c_m_sync_init+0x34>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    10f6:	6822      	ldr	r2, [r4, #0]

	hri_sercomi2cm_wait_for_sync(hw);
	if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    10f8:	0792      	lsls	r2, r2, #30
    10fa:	d506      	bpl.n	110a <_i2c_m_sync_init+0x4e>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10fc:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10fe:	8a23      	ldrh	r3, [r4, #16]
    1100:	0bdb      	lsrs	r3, r3, #15
    1102:	d1fc      	bne.n	10fe <_i2c_m_sync_init+0x42>
    1104:	8a23      	ldrh	r3, [r4, #16]
    1106:	0bdb      	lsrs	r3, r3, #15
    1108:	d1fc      	bne.n	1104 <_i2c_m_sync_init+0x48>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    110a:	2301      	movs	r3, #1
    110c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    110e:	8a23      	ldrh	r3, [r4, #16]
    1110:	0bdb      	lsrs	r3, r3, #15
    1112:	d1fc      	bne.n	110e <_i2c_m_sync_init+0x52>
    1114:	8a23      	ldrh	r3, [r4, #16]
    1116:	0bdb      	lsrs	r3, r3, #15
    1118:	d1fc      	bne.n	1114 <_i2c_m_sync_init+0x58>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    111a:	4b0e      	ldr	r3, [pc, #56]	; (1154 <_i2c_m_sync_init+0x98>)
    111c:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    111e:	8a23      	ldrh	r3, [r4, #16]
    1120:	0bdb      	lsrs	r3, r3, #15
    1122:	d1fc      	bne.n	111e <_i2c_m_sync_init+0x62>
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1124:	3301      	adds	r3, #1
    1126:	33ff      	adds	r3, #255	; 0xff
    1128:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    112a:	8a23      	ldrh	r3, [r4, #16]
    112c:	0bdb      	lsrs	r3, r3, #15
    112e:	d1fc      	bne.n	112a <_i2c_m_sync_init+0x6e>
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1130:	4b09      	ldr	r3, [pc, #36]	; (1158 <_i2c_m_sync_init+0x9c>)
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);

	i2c_dev->service.trise = _i2cms[i].trise;

	return ERR_NONE;
}
    1132:	2000      	movs	r0, #0
    1134:	8163      	strh	r3, [r4, #10]
	i2c_dev->service.trise = _i2cms[i].trise;
    1136:	23d7      	movs	r3, #215	; 0xd7
    1138:	81eb      	strh	r3, [r5, #14]
}
    113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    113c:	4e03      	ldr	r6, [pc, #12]	; (114c <_i2c_m_sync_init+0x90>)
    113e:	e7cc      	b.n	10da <_i2c_m_sync_init+0x1e>
    1140:	bdfff800 	.word	0xbdfff800
    1144:	0001558c 	.word	0x0001558c
    1148:	0000038a 	.word	0x0000038a
    114c:	00000a1d 	.word	0x00000a1d
    1150:	000004ff 	.word	0x000004ff
    1154:	00200014 	.word	0x00200014
    1158:	00003736 	.word	0x00003736

0000115c <_i2c_m_sync_enable>:
{
	int   timeout         = 65535;
	int   timeout_attempt = 4;
	void *hw              = i2c_dev->hw;

	ASSERT(i2c_dev);
    115c:	22a6      	movs	r2, #166	; 0xa6
{
    115e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1160:	0007      	movs	r7, r0
	ASSERT(i2c_dev);
    1162:	4e17      	ldr	r6, [pc, #92]	; (11c0 <_i2c_m_sync_enable+0x64>)
	void *hw              = i2c_dev->hw;
    1164:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1166:	00d2      	lsls	r2, r2, #3
    1168:	0031      	movs	r1, r6
    116a:	2001      	movs	r0, #1
    116c:	4d15      	ldr	r5, [pc, #84]	; (11c4 <_i2c_m_sync_enable+0x68>)
    116e:	47a8      	blx	r5
	ASSERT(i2c_dev->hw);
    1170:	6938      	ldr	r0, [r7, #16]
    1172:	4a15      	ldr	r2, [pc, #84]	; (11c8 <_i2c_m_sync_enable+0x6c>)
    1174:	1e43      	subs	r3, r0, #1
    1176:	4198      	sbcs	r0, r3
    1178:	0031      	movs	r1, r6
    117a:	b2c0      	uxtb	r0, r0
    117c:	47a8      	blx	r5
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    117e:	2202      	movs	r2, #2
    1180:	6823      	ldr	r3, [r4, #0]
    1182:	4313      	orrs	r3, r2
    1184:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1186:	8a23      	ldrh	r3, [r4, #16]
    1188:	0bdb      	lsrs	r3, r3, #15
    118a:	d1fc      	bne.n	1186 <_i2c_m_sync_enable+0x2a>
    118c:	2004      	movs	r0, #4
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    118e:	2103      	movs	r1, #3
		if (timeout <= 0) {
			if (--timeout_attempt)
				timeout = 65535;
			else
				return I2C_ERR_BUSY;
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    1190:	2510      	movs	r5, #16
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1192:	4a0e      	ldr	r2, [pc, #56]	; (11cc <_i2c_m_sync_enable+0x70>)
    1194:	8a23      	ldrh	r3, [r4, #16]
    1196:	0bdb      	lsrs	r3, r3, #15
    1198:	d1fc      	bne.n	1194 <_i2c_m_sync_enable+0x38>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    119a:	8a23      	ldrh	r3, [r4, #16]
    119c:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    119e:	400b      	ands	r3, r1
    11a0:	2b01      	cmp	r3, #1
    11a2:	d007      	beq.n	11b4 <_i2c_m_sync_enable+0x58>
    11a4:	3a01      	subs	r2, #1
		if (timeout <= 0) {
    11a6:	2a00      	cmp	r2, #0
    11a8:	d1f4      	bne.n	1194 <_i2c_m_sync_enable+0x38>
    11aa:	3801      	subs	r0, #1
			if (--timeout_attempt)
    11ac:	2800      	cmp	r0, #0
    11ae:	d003      	beq.n	11b8 <_i2c_m_sync_enable+0x5c>
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    11b0:	8225      	strh	r5, [r4, #16]
    11b2:	e7ee      	b.n	1192 <_i2c_m_sync_enable+0x36>
		}
	}

	return ERR_NONE;
    11b4:	2000      	movs	r0, #0
}
    11b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return I2C_ERR_BUSY;
    11b8:	2006      	movs	r0, #6
    11ba:	4240      	negs	r0, r0
    11bc:	e7fb      	b.n	11b6 <_i2c_m_sync_enable+0x5a>
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	0001558c 	.word	0x0001558c
    11c4:	00000a1d 	.word	0x00000a1d
    11c8:	00000531 	.word	0x00000531
    11cc:	0000ffff 	.word	0x0000ffff

000011d0 <_i2c_m_sync_transfer>:
 * \return Transfer status.
 * \retval 0 Transfer success
 * \retval <0 Transfer fail or partial fail, return the error code
 */
int32_t _i2c_m_sync_transfer(struct _i2c_m_sync_device *const i2c_dev, struct _i2c_m_msg *msg)
{
    11d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11d2:	46de      	mov	lr, fp
    11d4:	4645      	mov	r5, r8
    11d6:	464e      	mov	r6, r9
    11d8:	4657      	mov	r7, sl
    11da:	b5e0      	push	{r5, r6, r7, lr}
    11dc:	0005      	movs	r5, r0
	uint32_t flags;
	int      ret;
	void *   hw = i2c_dev->hw;

	ASSERT(i2c_dev);
    11de:	4bb3      	ldr	r3, [pc, #716]	; (14ac <_i2c_m_sync_transfer+0x2dc>)
{
    11e0:	468b      	mov	fp, r1
	ASSERT(i2c_dev);
    11e2:	4699      	mov	r9, r3
    11e4:	0019      	movs	r1, r3
    11e6:	4bb2      	ldr	r3, [pc, #712]	; (14b0 <_i2c_m_sync_transfer+0x2e0>)
	void *   hw = i2c_dev->hw;
    11e8:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    11ea:	4ab2      	ldr	r2, [pc, #712]	; (14b4 <_i2c_m_sync_transfer+0x2e4>)
    11ec:	2001      	movs	r0, #1
    11ee:	4698      	mov	r8, r3
    11f0:	4798      	blx	r3
	ASSERT(i2c_dev->hw);
    11f2:	6928      	ldr	r0, [r5, #16]
    11f4:	4ab0      	ldr	r2, [pc, #704]	; (14b8 <_i2c_m_sync_transfer+0x2e8>)
    11f6:	1e43      	subs	r3, r0, #1
    11f8:	4198      	sbcs	r0, r3
    11fa:	4649      	mov	r1, r9
    11fc:	b2c0      	uxtb	r0, r0
    11fe:	47c0      	blx	r8
	ASSERT(msg);
    1200:	4658      	mov	r0, fp
    1202:	1e43      	subs	r3, r0, #1
    1204:	4198      	sbcs	r0, r3
    1206:	4aad      	ldr	r2, [pc, #692]	; (14bc <_i2c_m_sync_transfer+0x2ec>)
    1208:	b2c0      	uxtb	r0, r0
    120a:	4649      	mov	r1, r9
    120c:	47c0      	blx	r8

	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    120e:	2380      	movs	r3, #128	; 0x80
    1210:	886a      	ldrh	r2, [r5, #2]
    1212:	005b      	lsls	r3, r3, #1
    1214:	421a      	tst	r2, r3
    1216:	d000      	beq.n	121a <_i2c_m_sync_transfer+0x4a>
    1218:	e195      	b.n	1546 <_i2c_m_sync_transfer+0x376>
		return I2C_ERR_BUSY;
	}

	msg->flags |= I2C_M_BUSY;
    121a:	465a      	mov	r2, fp
    121c:	4659      	mov	r1, fp
    121e:	8852      	ldrh	r2, [r2, #2]
    1220:	431a      	orrs	r2, r3
    1222:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
    1224:	002a      	movs	r2, r5
    1226:	c9c1      	ldmia	r1!, {r0, r6, r7}
    1228:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    122a:	6862      	ldr	r2, [r4, #4]
    122c:	4313      	orrs	r3, r2
    122e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1230:	8a23      	ldrh	r3, [r4, #16]
    1232:	0bdb      	lsrs	r3, r3, #15
    1234:	d1fc      	bne.n	1230 <_i2c_m_sync_transfer+0x60>
	void *             hw  = i2c_dev->hw;
    1236:	692f      	ldr	r7, [r5, #16]
	ASSERT(i2c_dev);
    1238:	4aa1      	ldr	r2, [pc, #644]	; (14c0 <_i2c_m_sync_transfer+0x2f0>)
    123a:	4649      	mov	r1, r9
    123c:	2001      	movs	r0, #1
    123e:	47c0      	blx	r8
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1240:	687b      	ldr	r3, [r7, #4]
    1242:	4aa0      	ldr	r2, [pc, #640]	; (14c4 <_i2c_m_sync_transfer+0x2f4>)
    1244:	4013      	ands	r3, r2
    1246:	607b      	str	r3, [r7, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1248:	8a3b      	ldrh	r3, [r7, #16]
    124a:	0bdb      	lsrs	r3, r3, #15
    124c:	d1fc      	bne.n	1248 <_i2c_m_sync_transfer+0x78>
	hri_sercomi2cm_write_ADDR_reg(hw, ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0));
    124e:	2201      	movs	r2, #1
    1250:	8869      	ldrh	r1, [r5, #2]
    1252:	882b      	ldrh	r3, [r5, #0]
    1254:	400a      	ands	r2, r1
    1256:	005b      	lsls	r3, r3, #1
    1258:	4313      	orrs	r3, r2
    125a:	b2db      	uxtb	r3, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    125c:	753b      	strb	r3, [r7, #20]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    125e:	8a3b      	ldrh	r3, [r7, #16]
    1260:	0bdb      	lsrs	r3, r3, #15
    1262:	d1fc      	bne.n	125e <_i2c_m_sync_transfer+0x8e>
	void *   hw      = i2c_dev->hw;
    1264:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1266:	4a98      	ldr	r2, [pc, #608]	; (14c8 <_i2c_m_sync_transfer+0x2f8>)
    1268:	7b8b      	ldrb	r3, [r1, #14]
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    126a:	2003      	movs	r0, #3
    126c:	b2db      	uxtb	r3, r3
    126e:	e004      	b.n	127a <_i2c_m_sync_transfer+0xaa>
    1270:	7b8b      	ldrb	r3, [r1, #14]
    1272:	3a01      	subs	r2, #1
    1274:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    1276:	2a00      	cmp	r2, #0
    1278:	d001      	beq.n	127e <_i2c_m_sync_transfer+0xae>
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    127a:	4218      	tst	r0, r3
    127c:	d0f8      	beq.n	1270 <_i2c_m_sync_transfer+0xa0>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    127e:	8a3a      	ldrh	r2, [r7, #16]
    1280:	0bd2      	lsrs	r2, r2, #15
    1282:	d1fc      	bne.n	127e <_i2c_m_sync_transfer+0xae>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1284:	8a38      	ldrh	r0, [r7, #16]
	if (flags & MB_FLAG) {
    1286:	3201      	adds	r2, #1
    1288:	b280      	uxth	r0, r0
    128a:	421a      	tst	r2, r3
    128c:	d01b      	beq.n	12c6 <_i2c_m_sync_transfer+0xf6>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    128e:	0783      	lsls	r3, r0, #30
    1290:	d400      	bmi.n	1294 <_i2c_m_sync_transfer+0xc4>
    1292:	e0d4      	b.n	143e <_i2c_m_sync_transfer+0x26e>
			msg->flags |= I2C_M_FAIL;
    1294:	2380      	movs	r3, #128	; 0x80
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1296:	73ba      	strb	r2, [r7, #14]
    1298:	8869      	ldrh	r1, [r5, #2]
    129a:	015b      	lsls	r3, r3, #5
    129c:	430b      	orrs	r3, r1
    129e:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    12a0:	886b      	ldrh	r3, [r5, #2]
    12a2:	498a      	ldr	r1, [pc, #552]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    12a4:	400b      	ands	r3, r1
    12a6:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    12a8:	0003      	movs	r3, r0
    12aa:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
    12ac:	4258      	negs	r0, r3
    12ae:	4158      	adcs	r0, r3
    12b0:	3805      	subs	r0, #5
	hri_sercomi2cm_set_CTRLB_SMEN_bit(hw);

	ret = _sercom_i2c_sync_send_address(i2c_dev);

	if (ret) {
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    12b2:	886b      	ldrh	r3, [r5, #2]
    12b4:	4a85      	ldr	r2, [pc, #532]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    12b6:	4013      	ands	r3, r2
    12b8:	806b      	strh	r3, [r5, #2]

		ret = _sercom_i2c_sync_analyse_flags(hw, flags, &i2c_dev->service.msg);
	}

	return ret;
}
    12ba:	bc3c      	pop	{r2, r3, r4, r5}
    12bc:	4690      	mov	r8, r2
    12be:	4699      	mov	r9, r3
    12c0:	46a2      	mov	sl, r4
    12c2:	46ab      	mov	fp, r5
    12c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (flags & SB_FLAG) {
    12c6:	079b      	lsls	r3, r3, #30
    12c8:	d512      	bpl.n	12f0 <_i2c_m_sync_transfer+0x120>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    12ca:	686b      	ldr	r3, [r5, #4]
    12cc:	2b00      	cmp	r3, #0
    12ce:	d100      	bne.n	12d2 <_i2c_m_sync_transfer+0x102>
    12d0:	e13c      	b.n	154c <_i2c_m_sync_transfer+0x37c>
    12d2:	0742      	lsls	r2, r0, #29
    12d4:	d500      	bpl.n	12d8 <_i2c_m_sync_transfer+0x108>
    12d6:	e139      	b.n	154c <_i2c_m_sync_transfer+0x37c>
			msg->len--;
    12d8:	3b01      	subs	r3, #1
    12da:	606b      	str	r3, [r5, #4]
			if (msg->len == 0) {
    12dc:	2b00      	cmp	r3, #0
    12de:	d100      	bne.n	12e2 <_i2c_m_sync_transfer+0x112>
    12e0:	e0bc      	b.n	145c <_i2c_m_sync_transfer+0x28c>
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    12e2:	68ab      	ldr	r3, [r5, #8]
    12e4:	1c5a      	adds	r2, r3, #1
    12e6:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    12e8:	7e3a      	ldrb	r2, [r7, #24]
    12ea:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    12ec:	2302      	movs	r3, #2
    12ee:	73bb      	strb	r3, [r7, #14]
			return I2C_OK;
    12f0:	2300      	movs	r3, #0
    12f2:	469a      	mov	sl, r3
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    12f4:	3301      	adds	r3, #1
    12f6:	33ff      	adds	r3, #255	; 0xff
    12f8:	469c      	mov	ip, r3
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    12fa:	3bfc      	subs	r3, #252	; 0xfc
    12fc:	4698      	mov	r8, r3
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    12fe:	2380      	movs	r3, #128	; 0x80
    1300:	02db      	lsls	r3, r3, #11
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1302:	2103      	movs	r1, #3
	if (flags & MB_FLAG) {
    1304:	2701      	movs	r7, #1
	} else if (flags & SB_FLAG) {
    1306:	2002      	movs	r0, #2
    1308:	4699      	mov	r9, r3
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    130a:	4662      	mov	r2, ip
    130c:	886b      	ldrh	r3, [r5, #2]
    130e:	4213      	tst	r3, r2
    1310:	d02a      	beq.n	1368 <_i2c_m_sync_transfer+0x198>
	void *   hw      = i2c_dev->hw;
    1312:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1314:	4a6c      	ldr	r2, [pc, #432]	; (14c8 <_i2c_m_sync_transfer+0x2f8>)
    1316:	7bb3      	ldrb	r3, [r6, #14]
    1318:	b2db      	uxtb	r3, r3
    131a:	e004      	b.n	1326 <_i2c_m_sync_transfer+0x156>
    131c:	7bb3      	ldrb	r3, [r6, #14]
    131e:	3a01      	subs	r2, #1
    1320:	b2db      	uxtb	r3, r3
		if (timeout-- == 0) {
    1322:	2a00      	cmp	r2, #0
    1324:	d06f      	beq.n	1406 <_i2c_m_sync_transfer+0x236>
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1326:	4219      	tst	r1, r3
    1328:	d0f8      	beq.n	131c <_i2c_m_sync_transfer+0x14c>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    132a:	8a22      	ldrh	r2, [r4, #16]
    132c:	0bd2      	lsrs	r2, r2, #15
    132e:	d1fc      	bne.n	132a <_i2c_m_sync_transfer+0x15a>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1330:	8a22      	ldrh	r2, [r4, #16]
    1332:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    1334:	421f      	tst	r7, r3
    1336:	d019      	beq.n	136c <_i2c_m_sync_transfer+0x19c>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1338:	4210      	tst	r0, r2
    133a:	d03f      	beq.n	13bc <_i2c_m_sync_transfer+0x1ec>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    133c:	73a7      	strb	r7, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    133e:	886b      	ldrh	r3, [r5, #2]
    1340:	469a      	mov	sl, r3
    1342:	2380      	movs	r3, #128	; 0x80
    1344:	4656      	mov	r6, sl
    1346:	015b      	lsls	r3, r3, #5
    1348:	4333      	orrs	r3, r6
    134a:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    134c:	886b      	ldrh	r3, [r5, #2]
    134e:	4e5f      	ldr	r6, [pc, #380]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    1350:	4033      	ands	r3, r6
    1352:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1354:	0013      	movs	r3, r2
    1356:	403b      	ands	r3, r7
				return I2C_ERR_BUS;
    1358:	425a      	negs	r2, r3
    135a:	415a      	adcs	r2, r3
    135c:	1f53      	subs	r3, r2, #5
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    135e:	4662      	mov	r2, ip
				return I2C_ERR_BUS;
    1360:	469a      	mov	sl, r3
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1362:	886b      	ldrh	r3, [r5, #2]
    1364:	4213      	tst	r3, r2
    1366:	d1d4      	bne.n	1312 <_i2c_m_sync_transfer+0x142>
    1368:	4650      	mov	r0, sl
    136a:	e7a6      	b.n	12ba <_i2c_m_sync_transfer+0xea>
	return I2C_OK;
    136c:	2600      	movs	r6, #0
    136e:	46b2      	mov	sl, r6
	} else if (flags & SB_FLAG) {
    1370:	4218      	tst	r0, r3
    1372:	d0ca      	beq.n	130a <_i2c_m_sync_transfer+0x13a>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1374:	686b      	ldr	r3, [r5, #4]
    1376:	2b00      	cmp	r3, #0
    1378:	d100      	bne.n	137c <_i2c_m_sync_transfer+0x1ac>
    137a:	e0a9      	b.n	14d0 <_i2c_m_sync_transfer+0x300>
    137c:	4646      	mov	r6, r8
    137e:	4216      	tst	r6, r2
    1380:	d000      	beq.n	1384 <_i2c_m_sync_transfer+0x1b4>
    1382:	e0a5      	b.n	14d0 <_i2c_m_sync_transfer+0x300>
			msg->len--;
    1384:	3b01      	subs	r3, #1
    1386:	606b      	str	r3, [r5, #4]
			if (msg->len == 0) {
    1388:	2b00      	cmp	r3, #0
    138a:	d10e      	bne.n	13aa <_i2c_m_sync_transfer+0x1da>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    138c:	464a      	mov	r2, r9
    138e:	6863      	ldr	r3, [r4, #4]
    1390:	4313      	orrs	r3, r2
    1392:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1394:	8a23      	ldrh	r3, [r4, #16]
    1396:	0bdb      	lsrs	r3, r3, #15
    1398:	d1fc      	bne.n	1394 <_i2c_m_sync_transfer+0x1c4>
				if (msg->flags & I2C_M_STOP) {
    139a:	886b      	ldrh	r3, [r5, #2]
    139c:	b21b      	sxth	r3, r3
    139e:	2b00      	cmp	r3, #0
    13a0:	db3d      	blt.n	141e <_i2c_m_sync_transfer+0x24e>
				msg->flags &= ~I2C_M_BUSY;
    13a2:	886b      	ldrh	r3, [r5, #2]
    13a4:	4a49      	ldr	r2, [pc, #292]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    13a6:	4013      	ands	r3, r2
    13a8:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    13aa:	68ab      	ldr	r3, [r5, #8]
    13ac:	1c5a      	adds	r2, r3, #1
    13ae:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    13b0:	7e22      	ldrb	r2, [r4, #24]
    13b2:	701a      	strb	r2, [r3, #0]
	return I2C_OK;
    13b4:	2300      	movs	r3, #0
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    13b6:	73a0      	strb	r0, [r4, #14]
    13b8:	469a      	mov	sl, r3
    13ba:	e7a6      	b.n	130a <_i2c_m_sync_transfer+0x13a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    13bc:	4643      	mov	r3, r8
    13be:	4213      	tst	r3, r2
    13c0:	d000      	beq.n	13c4 <_i2c_m_sync_transfer+0x1f4>
    13c2:	e08a      	b.n	14da <_i2c_m_sync_transfer+0x30a>
			if (msg->len == 0) {
    13c4:	686b      	ldr	r3, [r5, #4]
    13c6:	2b00      	cmp	r3, #0
    13c8:	d10a      	bne.n	13e0 <_i2c_m_sync_transfer+0x210>
				if (msg->flags & I2C_M_STOP) {
    13ca:	886b      	ldrh	r3, [r5, #2]
    13cc:	b21b      	sxth	r3, r3
    13ce:	2b00      	cmp	r3, #0
    13d0:	db10      	blt.n	13f4 <_i2c_m_sync_transfer+0x224>
				msg->flags &= ~I2C_M_BUSY;
    13d2:	886b      	ldrh	r3, [r5, #2]
    13d4:	4a3d      	ldr	r2, [pc, #244]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    13d6:	4013      	ands	r3, r2
    13d8:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
    13da:	2300      	movs	r3, #0
    13dc:	469a      	mov	sl, r3
    13de:	e794      	b.n	130a <_i2c_m_sync_transfer+0x13a>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    13e0:	68aa      	ldr	r2, [r5, #8]
				msg->len--;
    13e2:	3b01      	subs	r3, #1
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    13e4:	7816      	ldrb	r6, [r2, #0]
				msg->buffer++;
    13e6:	3201      	adds	r2, #1
	((Sercom *)hw)->I2CM.DATA.reg = data;
    13e8:	7626      	strb	r6, [r4, #24]
				msg->len--;
    13ea:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    13ec:	2300      	movs	r3, #0
				msg->buffer++;
    13ee:	60aa      	str	r2, [r5, #8]
			return I2C_OK;
    13f0:	469a      	mov	sl, r3
    13f2:	e78a      	b.n	130a <_i2c_m_sync_transfer+0x13a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    13f4:	23c0      	movs	r3, #192	; 0xc0
    13f6:	6862      	ldr	r2, [r4, #4]
    13f8:	029b      	lsls	r3, r3, #10
    13fa:	4313      	orrs	r3, r2
    13fc:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    13fe:	8a23      	ldrh	r3, [r4, #16]
    1400:	0bdb      	lsrs	r3, r3, #15
    1402:	d1fc      	bne.n	13fe <_i2c_m_sync_transfer+0x22e>
    1404:	e7e5      	b.n	13d2 <_i2c_m_sync_transfer+0x202>
			if (msg->flags & I2C_M_STOP) {
    1406:	465b      	mov	r3, fp
    1408:	885b      	ldrh	r3, [r3, #2]
    140a:	b21b      	sxth	r3, r3
    140c:	2b00      	cmp	r3, #0
    140e:	db36      	blt.n	147e <_i2c_m_sync_transfer+0x2ae>
			return ret;
    1410:	2005      	movs	r0, #5
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1412:	886b      	ldrh	r3, [r5, #2]
    1414:	4a2d      	ldr	r2, [pc, #180]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
			return ret;
    1416:	4240      	negs	r0, r0
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1418:	4013      	ands	r3, r2
    141a:	806b      	strh	r3, [r5, #2]
			return ret;
    141c:	e74d      	b.n	12ba <_i2c_m_sync_transfer+0xea>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    141e:	6863      	ldr	r3, [r4, #4]
    1420:	4a2a      	ldr	r2, [pc, #168]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    1422:	4013      	ands	r3, r2
    1424:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1426:	8a23      	ldrh	r3, [r4, #16]
    1428:	0bdb      	lsrs	r3, r3, #15
    142a:	d1fc      	bne.n	1426 <_i2c_m_sync_transfer+0x256>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    142c:	23c0      	movs	r3, #192	; 0xc0
    142e:	6862      	ldr	r2, [r4, #4]
    1430:	029b      	lsls	r3, r3, #10
    1432:	4313      	orrs	r3, r2
    1434:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1436:	8a23      	ldrh	r3, [r4, #16]
    1438:	0bdb      	lsrs	r3, r3, #15
    143a:	d1fc      	bne.n	1436 <_i2c_m_sync_transfer+0x266>
    143c:	e7b1      	b.n	13a2 <_i2c_m_sync_transfer+0x1d2>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    143e:	0743      	lsls	r3, r0, #29
    1440:	d500      	bpl.n	1444 <_i2c_m_sync_transfer+0x274>
    1442:	e088      	b.n	1556 <_i2c_m_sync_transfer+0x386>
			if (msg->len == 0) {
    1444:	686b      	ldr	r3, [r5, #4]
    1446:	2b00      	cmp	r3, #0
    1448:	d128      	bne.n	149c <_i2c_m_sync_transfer+0x2cc>
				if (msg->flags & I2C_M_STOP) {
    144a:	886b      	ldrh	r3, [r5, #2]
    144c:	b21b      	sxth	r3, r3
    144e:	2b00      	cmp	r3, #0
    1450:	db57      	blt.n	1502 <_i2c_m_sync_transfer+0x332>
				msg->flags &= ~I2C_M_BUSY;
    1452:	886b      	ldrh	r3, [r5, #2]
    1454:	4a1d      	ldr	r2, [pc, #116]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    1456:	4013      	ands	r3, r2
    1458:	806b      	strh	r3, [r5, #2]
    145a:	e749      	b.n	12f0 <_i2c_m_sync_transfer+0x120>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    145c:	2380      	movs	r3, #128	; 0x80
    145e:	687a      	ldr	r2, [r7, #4]
    1460:	02db      	lsls	r3, r3, #11
    1462:	4313      	orrs	r3, r2
    1464:	607b      	str	r3, [r7, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1466:	8a3b      	ldrh	r3, [r7, #16]
    1468:	0bdb      	lsrs	r3, r3, #15
    146a:	d1fc      	bne.n	1466 <_i2c_m_sync_transfer+0x296>
				if (msg->flags & I2C_M_STOP) {
    146c:	886b      	ldrh	r3, [r5, #2]
    146e:	b21b      	sxth	r3, r3
    1470:	2b00      	cmp	r3, #0
    1472:	db4f      	blt.n	1514 <_i2c_m_sync_transfer+0x344>
				msg->flags &= ~I2C_M_BUSY;
    1474:	886b      	ldrh	r3, [r5, #2]
    1476:	4a15      	ldr	r2, [pc, #84]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
    1478:	4013      	ands	r3, r2
    147a:	806b      	strh	r3, [r5, #2]
    147c:	e731      	b.n	12e2 <_i2c_m_sync_transfer+0x112>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    147e:	23c0      	movs	r3, #192	; 0xc0
    1480:	6862      	ldr	r2, [r4, #4]
    1482:	029b      	lsls	r3, r3, #10
    1484:	4313      	orrs	r3, r2
    1486:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1488:	8a23      	ldrh	r3, [r4, #16]
    148a:	0bdb      	lsrs	r3, r3, #15
    148c:	d1fc      	bne.n	1488 <_i2c_m_sync_transfer+0x2b8>
			return ret;
    148e:	2005      	movs	r0, #5
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1490:	886b      	ldrh	r3, [r5, #2]
    1492:	4a0e      	ldr	r2, [pc, #56]	; (14cc <_i2c_m_sync_transfer+0x2fc>)
			return ret;
    1494:	4240      	negs	r0, r0
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1496:	4013      	ands	r3, r2
    1498:	806b      	strh	r3, [r5, #2]
    149a:	e70e      	b.n	12ba <_i2c_m_sync_transfer+0xea>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    149c:	68aa      	ldr	r2, [r5, #8]
				msg->len--;
    149e:	3b01      	subs	r3, #1
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    14a0:	7811      	ldrb	r1, [r2, #0]
				msg->buffer++;
    14a2:	3201      	adds	r2, #1
	((Sercom *)hw)->I2CM.DATA.reg = data;
    14a4:	7639      	strb	r1, [r7, #24]
    14a6:	60aa      	str	r2, [r5, #8]
				msg->len--;
    14a8:	606b      	str	r3, [r5, #4]
    14aa:	e721      	b.n	12f0 <_i2c_m_sync_transfer+0x120>
    14ac:	0001558c 	.word	0x0001558c
    14b0:	00000a1d 	.word	0x00000a1d
    14b4:	000005c3 	.word	0x000005c3
    14b8:	000005c4 	.word	0x000005c4
    14bc:	000005c5 	.word	0x000005c5
    14c0:	000005a9 	.word	0x000005a9
    14c4:	fffbffff 	.word	0xfffbffff
    14c8:	0000ffff 	.word	0x0000ffff
    14cc:	fffffeff 	.word	0xfffffeff
			return I2C_NACK;
    14d0:	2302      	movs	r3, #2
    14d2:	425b      	negs	r3, r3
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    14d4:	73a0      	strb	r0, [r4, #14]
    14d6:	469a      	mov	sl, r3
    14d8:	e717      	b.n	130a <_i2c_m_sync_transfer+0x13a>
				if (msg->len > 0) {
    14da:	686b      	ldr	r3, [r5, #4]
    14dc:	2b00      	cmp	r3, #0
    14de:	dd04      	ble.n	14ea <_i2c_m_sync_transfer+0x31a>
					msg->flags |= I2C_M_FAIL;
    14e0:	2380      	movs	r3, #128	; 0x80
    14e2:	886a      	ldrh	r2, [r5, #2]
    14e4:	015b      	lsls	r3, r3, #5
    14e6:	4313      	orrs	r3, r2
    14e8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    14ea:	886b      	ldrh	r3, [r5, #2]
    14ec:	b21b      	sxth	r3, r3
    14ee:	2b00      	cmp	r3, #0
    14f0:	db20      	blt.n	1534 <_i2c_m_sync_transfer+0x364>
				msg->flags &= ~I2C_M_BUSY;
    14f2:	886b      	ldrh	r3, [r5, #2]
    14f4:	4a26      	ldr	r2, [pc, #152]	; (1590 <_i2c_m_sync_transfer+0x3c0>)
    14f6:	4013      	ands	r3, r2
    14f8:	806b      	strh	r3, [r5, #2]
    14fa:	2302      	movs	r3, #2
    14fc:	425b      	negs	r3, r3
    14fe:	469a      	mov	sl, r3
    1500:	e703      	b.n	130a <_i2c_m_sync_transfer+0x13a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1502:	23c0      	movs	r3, #192	; 0xc0
    1504:	687a      	ldr	r2, [r7, #4]
    1506:	029b      	lsls	r3, r3, #10
    1508:	4313      	orrs	r3, r2
    150a:	607b      	str	r3, [r7, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    150c:	8a3b      	ldrh	r3, [r7, #16]
    150e:	0bdb      	lsrs	r3, r3, #15
    1510:	d1fc      	bne.n	150c <_i2c_m_sync_transfer+0x33c>
    1512:	e79e      	b.n	1452 <_i2c_m_sync_transfer+0x282>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1514:	687b      	ldr	r3, [r7, #4]
    1516:	4a1e      	ldr	r2, [pc, #120]	; (1590 <_i2c_m_sync_transfer+0x3c0>)
    1518:	4013      	ands	r3, r2
    151a:	607b      	str	r3, [r7, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    151c:	8a3b      	ldrh	r3, [r7, #16]
    151e:	0bdb      	lsrs	r3, r3, #15
    1520:	d1fc      	bne.n	151c <_i2c_m_sync_transfer+0x34c>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1522:	23c0      	movs	r3, #192	; 0xc0
    1524:	687a      	ldr	r2, [r7, #4]
    1526:	029b      	lsls	r3, r3, #10
    1528:	4313      	orrs	r3, r2
    152a:	607b      	str	r3, [r7, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    152c:	8a3b      	ldrh	r3, [r7, #16]
    152e:	0bdb      	lsrs	r3, r3, #15
    1530:	d1fc      	bne.n	152c <_i2c_m_sync_transfer+0x35c>
    1532:	e79f      	b.n	1474 <_i2c_m_sync_transfer+0x2a4>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1534:	23c0      	movs	r3, #192	; 0xc0
    1536:	6862      	ldr	r2, [r4, #4]
    1538:	029b      	lsls	r3, r3, #10
    153a:	4313      	orrs	r3, r2
    153c:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    153e:	8a23      	ldrh	r3, [r4, #16]
    1540:	0bdb      	lsrs	r3, r3, #15
    1542:	d1fc      	bne.n	153e <_i2c_m_sync_transfer+0x36e>
    1544:	e7d5      	b.n	14f2 <_i2c_m_sync_transfer+0x322>
		return I2C_ERR_BUSY;
    1546:	2006      	movs	r0, #6
    1548:	4240      	negs	r0, r0
    154a:	e6b6      	b.n	12ba <_i2c_m_sync_transfer+0xea>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    154c:	2302      	movs	r3, #2
			return I2C_NACK;
    154e:	2002      	movs	r0, #2
    1550:	73bb      	strb	r3, [r7, #14]
    1552:	4240      	negs	r0, r0
    1554:	e6ad      	b.n	12b2 <_i2c_m_sync_transfer+0xe2>
				if (msg->len > 0) {
    1556:	686b      	ldr	r3, [r5, #4]
    1558:	2b00      	cmp	r3, #0
    155a:	dd04      	ble.n	1566 <_i2c_m_sync_transfer+0x396>
					msg->flags |= I2C_M_FAIL;
    155c:	2380      	movs	r3, #128	; 0x80
    155e:	886a      	ldrh	r2, [r5, #2]
    1560:	015b      	lsls	r3, r3, #5
    1562:	4313      	orrs	r3, r2
    1564:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1566:	886b      	ldrh	r3, [r5, #2]
    1568:	b21b      	sxth	r3, r3
    156a:	2b00      	cmp	r3, #0
    156c:	db06      	blt.n	157c <_i2c_m_sync_transfer+0x3ac>
				msg->flags &= ~I2C_M_BUSY;
    156e:	2002      	movs	r0, #2
    1570:	886b      	ldrh	r3, [r5, #2]
    1572:	4a07      	ldr	r2, [pc, #28]	; (1590 <_i2c_m_sync_transfer+0x3c0>)
    1574:	4240      	negs	r0, r0
    1576:	4013      	ands	r3, r2
    1578:	806b      	strh	r3, [r5, #2]
    157a:	e69a      	b.n	12b2 <_i2c_m_sync_transfer+0xe2>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    157c:	23c0      	movs	r3, #192	; 0xc0
    157e:	687a      	ldr	r2, [r7, #4]
    1580:	029b      	lsls	r3, r3, #10
    1582:	4313      	orrs	r3, r2
    1584:	607b      	str	r3, [r7, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1586:	8a3b      	ldrh	r3, [r7, #16]
    1588:	0bdb      	lsrs	r3, r3, #15
    158a:	d1fc      	bne.n	1586 <_i2c_m_sync_transfer+0x3b6>
    158c:	e7ef      	b.n	156e <_i2c_m_sync_transfer+0x39e>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	fffffeff 	.word	0xfffffeff

00001594 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    1594:	b5f0      	push	{r4, r5, r6, r7, lr}
    1596:	46c6      	mov	lr, r8
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    1598:	4b44      	ldr	r3, [pc, #272]	; (16ac <_spi_m_sync_init+0x118>)
{
    159a:	b500      	push	{lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
    159c:	18cb      	adds	r3, r1, r3
    159e:	0a9b      	lsrs	r3, r3, #10
    15a0:	b2db      	uxtb	r3, r3
{
    15a2:	0006      	movs	r6, r0
    15a4:	000c      	movs	r4, r1
		if (sercomspi_regs[i].n == n) {
    15a6:	2b00      	cmp	r3, #0
    15a8:	d100      	bne.n	15ac <_spi_m_sync_init+0x18>
    15aa:	e068      	b.n	167e <_spi_m_sync_init+0xea>
    15ac:	2b03      	cmp	r3, #3
    15ae:	d100      	bne.n	15b2 <_spi_m_sync_init+0x1e>
    15b0:	e071      	b.n	1696 <_spi_m_sync_init+0x102>
	return NULL;
    15b2:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    15b4:	2800      	cmp	r0, #0
    15b6:	d100      	bne.n	15ba <_spi_m_sync_init+0x26>
    15b8:	e070      	b.n	169c <_spi_m_sync_init+0x108>
    15ba:	0020      	movs	r0, r4
    15bc:	4b3c      	ldr	r3, [pc, #240]	; (16b0 <_spi_m_sync_init+0x11c>)
    15be:	4a3d      	ldr	r2, [pc, #244]	; (16b4 <_spi_m_sync_init+0x120>)
    15c0:	4698      	mov	r8, r3
    15c2:	1e43      	subs	r3, r0, #1
    15c4:	4198      	sbcs	r0, r3
    15c6:	4641      	mov	r1, r8
    15c8:	b2c0      	uxtb	r0, r0
    15ca:	4f3b      	ldr	r7, [pc, #236]	; (16b8 <_spi_m_sync_init+0x124>)
    15cc:	47b8      	blx	r7

	if (regs == NULL) {
    15ce:	2d00      	cmp	r5, #0
    15d0:	d100      	bne.n	15d4 <_spi_m_sync_init+0x40>
    15d2:	e068      	b.n	16a6 <_spi_m_sync_init+0x112>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    15d4:	8a23      	ldrh	r3, [r4, #16]
    15d6:	0bdb      	lsrs	r3, r3, #15
    15d8:	d1fc      	bne.n	15d4 <_spi_m_sync_init+0x40>
    15da:	8a23      	ldrh	r3, [r4, #16]
    15dc:	0bdb      	lsrs	r3, r3, #15
    15de:	d1fc      	bne.n	15da <_spi_m_sync_init+0x46>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    15e0:	6822      	ldr	r2, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    15e2:	0792      	lsls	r2, r2, #30
    15e4:	d506      	bpl.n	15f4 <_spi_m_sync_init+0x60>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    15e6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    15e8:	8a23      	ldrh	r3, [r4, #16]
    15ea:	0bdb      	lsrs	r3, r3, #15
    15ec:	d1fc      	bne.n	15e8 <_spi_m_sync_init+0x54>
    15ee:	8a23      	ldrh	r3, [r4, #16]
    15f0:	0bdb      	lsrs	r3, r3, #15
    15f2:	d1fc      	bne.n	15ee <_spi_m_sync_init+0x5a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    15f4:	2301      	movs	r3, #1
    15f6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    15f8:	8a23      	ldrh	r3, [r4, #16]
    15fa:	0bdb      	lsrs	r3, r3, #15
    15fc:	d1fc      	bne.n	15f8 <_spi_m_sync_init+0x64>
    15fe:	8a23      	ldrh	r3, [r4, #16]
    1600:	0bdb      	lsrs	r3, r3, #15
    1602:	d1fc      	bne.n	15fe <_spi_m_sync_init+0x6a>
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1604:	682a      	ldr	r2, [r5, #0]
    1606:	331c      	adds	r3, #28
	dev->prvt = hw;
    1608:	6034      	str	r4, [r6, #0]
	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    160a:	4013      	ands	r3, r2
    160c:	2b08      	cmp	r3, #8
    160e:	d01f      	beq.n	1650 <_spi_m_sync_init+0xbc>
	ASSERT(hw && regs);
    1610:	4a2a      	ldr	r2, [pc, #168]	; (16bc <_spi_m_sync_init+0x128>)
    1612:	4641      	mov	r1, r8
    1614:	2001      	movs	r0, #1
    1616:	47b8      	blx	r7
	hri_sercomspi_write_CTRLA_reg(
    1618:	682a      	ldr	r2, [r5, #0]
    161a:	4b29      	ldr	r3, [pc, #164]	; (16c0 <_spi_m_sync_init+0x12c>)
    161c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    161e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1620:	8a23      	ldrh	r3, [r4, #16]
    1622:	0bdb      	lsrs	r3, r3, #15
    1624:	d1fc      	bne.n	1620 <_spi_m_sync_init+0x8c>
	hri_sercomspi_write_CTRLB_reg(
    1626:	2380      	movs	r3, #128	; 0x80
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    1628:	686a      	ldr	r2, [r5, #4]
    162a:	4926      	ldr	r1, [pc, #152]	; (16c4 <_spi_m_sync_init+0x130>)
	hri_sercomspi_write_CTRLB_reg(
    162c:	029b      	lsls	r3, r3, #10
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    162e:	4011      	ands	r1, r2
	hri_sercomspi_write_CTRLB_reg(
    1630:	430b      	orrs	r3, r1
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1632:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    1634:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1636:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1638:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    163a:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    163c:	2307      	movs	r3, #7
    163e:	4013      	ands	r3, r2
    1640:	1e5a      	subs	r2, r3, #1
    1642:	4193      	sbcs	r3, r2

	return ERR_NONE;
    1644:	2000      	movs	r0, #0
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1646:	3301      	adds	r3, #1
    1648:	7133      	strb	r3, [r6, #4]
}
    164a:	bc04      	pop	{r2}
    164c:	4690      	mov	r8, r2
    164e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ASSERT(hw && regs);
    1650:	4a1d      	ldr	r2, [pc, #116]	; (16c8 <_spi_m_sync_init+0x134>)
    1652:	4641      	mov	r1, r8
    1654:	2001      	movs	r0, #1
    1656:	47b8      	blx	r7
	hri_sercomspi_write_CTRLA_reg(
    1658:	682a      	ldr	r2, [r5, #0]
    165a:	4b19      	ldr	r3, [pc, #100]	; (16c0 <_spi_m_sync_init+0x12c>)
    165c:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    165e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1660:	8a23      	ldrh	r3, [r4, #16]
    1662:	0bdb      	lsrs	r3, r3, #15
    1664:	d1fc      	bne.n	1660 <_spi_m_sync_init+0xcc>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    1666:	686a      	ldr	r2, [r5, #4]
    1668:	4b18      	ldr	r3, [pc, #96]	; (16cc <_spi_m_sync_init+0x138>)
    166a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    166c:	6063      	str	r3, [r4, #4]
	((Sercom *)hw)->SPI.ADDR.reg = data;
    166e:	68ab      	ldr	r3, [r5, #8]
    1670:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1672:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1674:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    1676:	8a23      	ldrh	r3, [r4, #16]
    1678:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    167a:	d1fc      	bne.n	1676 <_spi_m_sync_init+0xe2>
    167c:	e7de      	b.n	163c <_spi_m_sync_init+0xa8>
		if (sercomspi_regs[i].n == n) {
    167e:	4d14      	ldr	r5, [pc, #80]	; (16d0 <_spi_m_sync_init+0x13c>)
	ASSERT(dev && hw);
    1680:	2e00      	cmp	r6, #0
    1682:	d000      	beq.n	1686 <_spi_m_sync_init+0xf2>
    1684:	e799      	b.n	15ba <_spi_m_sync_init+0x26>
    1686:	4b0a      	ldr	r3, [pc, #40]	; (16b0 <_spi_m_sync_init+0x11c>)
    1688:	4a0a      	ldr	r2, [pc, #40]	; (16b4 <_spi_m_sync_init+0x120>)
    168a:	0019      	movs	r1, r3
    168c:	2000      	movs	r0, #0
    168e:	4f0a      	ldr	r7, [pc, #40]	; (16b8 <_spi_m_sync_init+0x124>)
    1690:	4698      	mov	r8, r3
    1692:	47b8      	blx	r7
    1694:	e79e      	b.n	15d4 <_spi_m_sync_init+0x40>
		if (sercomspi_regs[i].n == n) {
    1696:	4d0e      	ldr	r5, [pc, #56]	; (16d0 <_spi_m_sync_init+0x13c>)
    1698:	3510      	adds	r5, #16
    169a:	e7f1      	b.n	1680 <_spi_m_sync_init+0xec>
	ASSERT(dev && hw);
    169c:	4a05      	ldr	r2, [pc, #20]	; (16b4 <_spi_m_sync_init+0x120>)
    169e:	4904      	ldr	r1, [pc, #16]	; (16b0 <_spi_m_sync_init+0x11c>)
    16a0:	2000      	movs	r0, #0
    16a2:	4b05      	ldr	r3, [pc, #20]	; (16b8 <_spi_m_sync_init+0x124>)
    16a4:	4798      	blx	r3
		return ERR_INVALID_ARG;
    16a6:	200d      	movs	r0, #13
    16a8:	4240      	negs	r0, r0
    16aa:	e7ce      	b.n	164a <_spi_m_sync_init+0xb6>
    16ac:	bdfff800 	.word	0xbdfff800
    16b0:	0001558c 	.word	0x0001558c
    16b4:	000008cb 	.word	0x000008cb
    16b8:	00000a1d 	.word	0x00000a1d
    16bc:	0000089a 	.word	0x0000089a
    16c0:	fffffefc 	.word	0xfffffefc
    16c4:	fffd3fbf 	.word	0xfffd3fbf
    16c8:	000008ab 	.word	0x000008ab
    16cc:	00020040 	.word	0x00020040
    16d0:	000155a8 	.word	0x000155a8

000016d4 <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    16d4:	b510      	push	{r4, lr}
    16d6:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    16d8:	d014      	beq.n	1704 <_spi_m_sync_enable+0x30>
    16da:	6800      	ldr	r0, [r0, #0]
    16dc:	1e43      	subs	r3, r0, #1
    16de:	4198      	sbcs	r0, r3
    16e0:	b2c0      	uxtb	r0, r0
    16e2:	4a0b      	ldr	r2, [pc, #44]	; (1710 <_spi_m_sync_enable+0x3c>)
    16e4:	4b0b      	ldr	r3, [pc, #44]	; (1714 <_spi_m_sync_enable+0x40>)
    16e6:	490c      	ldr	r1, [pc, #48]	; (1718 <_spi_m_sync_enable+0x44>)
    16e8:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    16ea:	6822      	ldr	r2, [r4, #0]
    16ec:	8a13      	ldrh	r3, [r2, #16]
    16ee:	0bdb      	lsrs	r3, r3, #15
	if (hri_sercomspi_is_syncing(hw)) {
    16f0:	d10a      	bne.n	1708 <_spi_m_sync_enable+0x34>
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    16f2:	2102      	movs	r1, #2
    16f4:	6813      	ldr	r3, [r2, #0]
    16f6:	430b      	orrs	r3, r1
    16f8:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    16fa:	8a13      	ldrh	r3, [r2, #16]
    16fc:	0bdb      	lsrs	r3, r3, #15
    16fe:	d1fc      	bne.n	16fa <_spi_m_sync_enable+0x26>
	return ERR_NONE;
    1700:	2000      	movs	r0, #0
}
    1702:	bd10      	pop	{r4, pc}
    1704:	2000      	movs	r0, #0
    1706:	e7ec      	b.n	16e2 <_spi_m_sync_enable+0xe>
		return ERR_BUSY;
    1708:	2004      	movs	r0, #4
    170a:	4240      	negs	r0, r0
	return _spi_sync_enable(dev->prvt);
    170c:	e7f9      	b.n	1702 <_spi_m_sync_enable+0x2e>
    170e:	46c0      	nop			; (mov r8, r8)
    1710:	00000932 	.word	0x00000932
    1714:	00000a1d 	.word	0x00000a1d
    1718:	0001558c 	.word	0x0001558c

0000171c <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    171e:	46ce      	mov	lr, r9
    1720:	4647      	mov	r7, r8
    1722:	b580      	push	{r7, lr}
	void *                 hw   = dev->prvt;
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1724:	680b      	ldr	r3, [r1, #0]
	void *                 hw   = dev->prvt;
    1726:	6804      	ldr	r4, [r0, #0]
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1728:	4699      	mov	r9, r3
    172a:	7903      	ldrb	r3, [r0, #4]

	ASSERT(dev && hw);
    172c:	0020      	movs	r0, r4
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    172e:	4698      	mov	r8, r3
	ASSERT(dev && hw);
    1730:	1e43      	subs	r3, r0, #1
    1732:	4198      	sbcs	r0, r3
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1734:	684d      	ldr	r5, [r1, #4]
	ASSERT(dev && hw);
    1736:	4b3c      	ldr	r3, [pc, #240]	; (1828 <_spi_m_sync_trans+0x10c>)
{
    1738:	000e      	movs	r6, r1
	ASSERT(dev && hw);
    173a:	b2c0      	uxtb	r0, r0
    173c:	4a3b      	ldr	r2, [pc, #236]	; (182c <_spi_m_sync_trans+0x110>)
    173e:	493c      	ldr	r1, [pc, #240]	; (1830 <_spi_m_sync_trans+0x114>)
    1740:	4798      	blx	r3
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    1742:	8a23      	ldrh	r3, [r4, #16]
    1744:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    1746:	d168      	bne.n	181a <_spi_m_sync_trans+0xfe>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1748:	8a23      	ldrh	r3, [r4, #16]
    174a:	0bdb      	lsrs	r3, r3, #15
    174c:	d1fc      	bne.n	1748 <_spi_m_sync_trans+0x2c>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    174e:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1750:	079b      	lsls	r3, r3, #30
    1752:	d565      	bpl.n	1820 <_spi_m_sync_trans+0x104>
    1754:	4643      	mov	r3, r8
    1756:	2200      	movs	r2, #0
    1758:	2000      	movs	r0, #0
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    175a:	2104      	movs	r1, #4
    175c:	2b01      	cmp	r3, #1
    175e:	d933      	bls.n	17c8 <_spi_m_sync_trans+0xac>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1760:	2301      	movs	r3, #1
    1762:	469c      	mov	ip, r3
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1764:	7ba3      	ldrb	r3, [r4, #14]
    1766:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1768:	4219      	tst	r1, r3
    176a:	d016      	beq.n	179a <_spi_m_sync_trans+0x7e>
	return ((Sercom *)hw)->SPI.DATA.reg;
    176c:	8b23      	ldrh	r3, [r4, #24]
    176e:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
    1770:	2d00      	cmp	r5, #0
    1772:	d003      	beq.n	177c <_spi_m_sync_trans+0x60>
		*ctrl->rxbuf++ = (uint8_t)data;
    1774:	702b      	strb	r3, [r5, #0]
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1776:	0a1b      	lsrs	r3, r3, #8
    1778:	706b      	strb	r3, [r5, #1]
    177a:	3502      	adds	r5, #2
	ctrl->rxcnt++;
    177c:	3201      	adds	r2, #1
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    177e:	68b3      	ldr	r3, [r6, #8]
    1780:	4298      	cmp	r0, r3
    1782:	d3ef      	bcc.n	1764 <_spi_m_sync_trans+0x48>
    1784:	4293      	cmp	r3, r2
    1786:	d8ed      	bhi.n	1764 <_spi_m_sync_trans+0x48>
	tmp &= mask;
    1788:	2203      	movs	r2, #3
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    178a:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    178c:	421a      	tst	r2, r3
    178e:	d0fc      	beq.n	178a <_spi_m_sync_trans+0x6e>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1790:	73a2      	strb	r2, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1792:	bc0c      	pop	{r2, r3}
    1794:	4690      	mov	r8, r2
    1796:	4699      	mov	r9, r3
    1798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (ctrl.rxcnt >= ctrl.txcnt) {
    179a:	4290      	cmp	r0, r2
    179c:	d8ef      	bhi.n	177e <_spi_m_sync_trans+0x62>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    179e:	4667      	mov	r7, ip
    17a0:	421f      	tst	r7, r3
    17a2:	d0ec      	beq.n	177e <_spi_m_sync_trans+0x62>
	if (ctrl->txbuf) {
    17a4:	464b      	mov	r3, r9
    17a6:	2b00      	cmp	r3, #0
    17a8:	d00c      	beq.n	17c4 <_spi_m_sync_trans+0xa8>
    17aa:	781b      	ldrb	r3, [r3, #0]
    17ac:	4698      	mov	r8, r3
    17ae:	464b      	mov	r3, r9
    17b0:	4647      	mov	r7, r8
    17b2:	785b      	ldrb	r3, [r3, #1]
    17b4:	021b      	lsls	r3, r3, #8
    17b6:	433b      	orrs	r3, r7
			ctrl->txbuf++;
    17b8:	2702      	movs	r7, #2
    17ba:	46b8      	mov	r8, r7
    17bc:	44c1      	add	r9, r8
	ctrl->txcnt++;
    17be:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    17c0:	8323      	strh	r3, [r4, #24]
    17c2:	e7dc      	b.n	177e <_spi_m_sync_trans+0x62>
	if (ctrl->txbuf) {
    17c4:	4b1b      	ldr	r3, [pc, #108]	; (1834 <_spi_m_sync_trans+0x118>)
    17c6:	e7fa      	b.n	17be <_spi_m_sync_trans+0xa2>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17c8:	2301      	movs	r3, #1
    17ca:	469c      	mov	ip, r3
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    17cc:	7ba3      	ldrb	r3, [r4, #14]
    17ce:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    17d0:	4219      	tst	r1, r3
    17d2:	d00f      	beq.n	17f4 <_spi_m_sync_trans+0xd8>
	return ((Sercom *)hw)->SPI.DATA.reg;
    17d4:	8b23      	ldrh	r3, [r4, #24]
    17d6:	b29b      	uxth	r3, r3
	if (ctrl->rxbuf) {
    17d8:	2d00      	cmp	r5, #0
    17da:	d001      	beq.n	17e0 <_spi_m_sync_trans+0xc4>
		*ctrl->rxbuf++ = (uint8_t)data;
    17dc:	702b      	strb	r3, [r5, #0]
    17de:	3501      	adds	r5, #1
	ctrl->rxcnt++;
    17e0:	3201      	adds	r2, #1
		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    17e2:	68b3      	ldr	r3, [r6, #8]
    17e4:	4283      	cmp	r3, r0
    17e6:	d8f1      	bhi.n	17cc <_spi_m_sync_trans+0xb0>
    17e8:	429a      	cmp	r2, r3
    17ea:	d2cd      	bcs.n	1788 <_spi_m_sync_trans+0x6c>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    17ec:	7ba3      	ldrb	r3, [r4, #14]
    17ee:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    17f0:	4219      	tst	r1, r3
    17f2:	d1ef      	bne.n	17d4 <_spi_m_sync_trans+0xb8>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    17f4:	4290      	cmp	r0, r2
    17f6:	d8f4      	bhi.n	17e2 <_spi_m_sync_trans+0xc6>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    17f8:	4667      	mov	r7, ip
    17fa:	421f      	tst	r7, r3
    17fc:	d0f1      	beq.n	17e2 <_spi_m_sync_trans+0xc6>
	if (ctrl->txbuf) {
    17fe:	464b      	mov	r3, r9
    1800:	2b00      	cmp	r3, #0
    1802:	d008      	beq.n	1816 <_spi_m_sync_trans+0xfa>
		data = *ctrl->txbuf++;
    1804:	2701      	movs	r7, #1
    1806:	464b      	mov	r3, r9
    1808:	46b8      	mov	r8, r7
    180a:	781b      	ldrb	r3, [r3, #0]
    180c:	44c1      	add	r9, r8
    180e:	b29b      	uxth	r3, r3
	ctrl->txcnt++;
    1810:	3001      	adds	r0, #1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1812:	8323      	strh	r3, [r4, #24]
    1814:	e7e5      	b.n	17e2 <_spi_m_sync_trans+0xc6>
	if (ctrl->txbuf) {
    1816:	4b07      	ldr	r3, [pc, #28]	; (1834 <_spi_m_sync_trans+0x118>)
    1818:	e7fa      	b.n	1810 <_spi_m_sync_trans+0xf4>
		return ERR_BUSY;
    181a:	2004      	movs	r0, #4
    181c:	4240      	negs	r0, r0
    181e:	e7b8      	b.n	1792 <_spi_m_sync_trans+0x76>
		return ERR_NOT_INITIALIZED;
    1820:	2014      	movs	r0, #20
    1822:	4240      	negs	r0, r0
    1824:	e7b5      	b.n	1792 <_spi_m_sync_trans+0x76>
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	00000a1d 	.word	0x00000a1d
    182c:	00000a29 	.word	0x00000a29
    1830:	0001558c 	.word	0x0001558c
    1834:	000001ff 	.word	0x000001ff

00001838 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1838:	4b0d      	ldr	r3, [pc, #52]	; (1870 <_sysctrl_init_sources+0x38>)
	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    183a:	480e      	ldr	r0, [pc, #56]	; (1874 <_sysctrl_init_sources+0x3c>)
    183c:	6a1a      	ldr	r2, [r3, #32]
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    183e:	6a19      	ldr	r1, [r3, #32]
    1840:	4002      	ands	r2, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1842:	0f89      	lsrs	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1844:	480c      	ldr	r0, [pc, #48]	; (1878 <_sysctrl_init_sources+0x40>)
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1846:	0789      	lsls	r1, r1, #30
	hri_sysctrl_write_OSC8M_reg(hw,
    1848:	4301      	orrs	r1, r0
    184a:	430a      	orrs	r2, r1
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    184c:	2102      	movs	r1, #2
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    184e:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1850:	699a      	ldr	r2, [r3, #24]
    1852:	430a      	orrs	r2, r1
    1854:	619a      	str	r2, [r3, #24]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1856:	221f      	movs	r2, #31
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1858:	7f19      	ldrb	r1, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    185a:	400a      	ands	r2, r1
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    185c:	2108      	movs	r1, #8
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    185e:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1860:	68da      	ldr	r2, [r3, #12]
    1862:	4211      	tst	r1, r2
    1864:	d0fc      	beq.n	1860 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1866:	2180      	movs	r1, #128	; 0x80
    1868:	6a1a      	ldr	r2, [r3, #32]
    186a:	430a      	orrs	r2, r1
    186c:	621a      	str	r2, [r3, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    186e:	4770      	bx	lr
    1870:	40000800 	.word	0x40000800
    1874:	0fff0000 	.word	0x0fff0000
    1878:	00000302 	.word	0x00000302

0000187c <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    187c:	2302      	movs	r3, #2
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    187e:	2110      	movs	r1, #16
    1880:	4a1a      	ldr	r2, [pc, #104]	; (18ec <_sysctrl_init_referenced_generators+0x70>)
    1882:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1884:	68d3      	ldr	r3, [r2, #12]
    1886:	4219      	tst	r1, r3
    1888:	d0fc      	beq.n	1884 <_sysctrl_init_referenced_generators+0x8>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    188a:	4b19      	ldr	r3, [pc, #100]	; (18f0 <_sysctrl_init_referenced_generators+0x74>)
    188c:	62d3      	str	r3, [r2, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    188e:	4b19      	ldr	r3, [pc, #100]	; (18f4 <_sysctrl_init_referenced_generators+0x78>)
    1890:	681b      	ldr	r3, [r3, #0]
    1892:	0e9b      	lsrs	r3, r3, #26
    1894:	2b3f      	cmp	r3, #63	; 0x3f
    1896:	d026      	beq.n	18e6 <_sysctrl_init_referenced_generators+0x6a>
    1898:	2280      	movs	r2, #128	; 0x80
    189a:	029b      	lsls	r3, r3, #10
    189c:	0092      	lsls	r2, r2, #2
    189e:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    18a0:	4a12      	ldr	r2, [pc, #72]	; (18ec <_sysctrl_init_referenced_generators+0x70>)
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
			;
	} else {
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    18a2:	2110      	movs	r1, #16
    18a4:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    18a6:	2302      	movs	r3, #2
    18a8:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    18aa:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    18ac:	075b      	lsls	r3, r3, #29
    18ae:	d513      	bpl.n	18d8 <_sysctrl_init_referenced_generators+0x5c>
	tmp &= mask;
    18b0:	21d0      	movs	r1, #208	; 0xd0
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    18b2:	68d3      	ldr	r3, [r2, #12]
	tmp &= mask;
    18b4:	400b      	ands	r3, r1
		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    18b6:	2bd0      	cmp	r3, #208	; 0xd0
    18b8:	d1fb      	bne.n	18b2 <_sysctrl_init_referenced_generators+0x36>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    18ba:	2180      	movs	r1, #128	; 0x80
    18bc:	4a0b      	ldr	r2, [pc, #44]	; (18ec <_sysctrl_init_referenced_generators+0x70>)
    18be:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    18c0:	430b      	orrs	r3, r1
    18c2:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    18c4:	4a0c      	ldr	r2, [pc, #48]	; (18f8 <_sysctrl_init_referenced_generators+0x7c>)
    18c6:	7853      	ldrb	r3, [r2, #1]
	hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    18c8:	09db      	lsrs	r3, r3, #7
    18ca:	d1fc      	bne.n	18c6 <_sysctrl_init_referenced_generators+0x4a>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    18cc:	2102      	movs	r1, #2
    18ce:	4a07      	ldr	r2, [pc, #28]	; (18ec <_sysctrl_init_referenced_generators+0x70>)
    18d0:	6993      	ldr	r3, [r2, #24]
    18d2:	438b      	bics	r3, r1
    18d4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    18d6:	4770      	bx	lr
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    18d8:	68d3      	ldr	r3, [r2, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    18da:	4219      	tst	r1, r3
    18dc:	d1ed      	bne.n	18ba <_sysctrl_init_referenced_generators+0x3e>
    18de:	68d3      	ldr	r3, [r2, #12]
    18e0:	4219      	tst	r1, r3
    18e2:	d0f9      	beq.n	18d8 <_sysctrl_init_referenced_generators+0x5c>
    18e4:	e7e9      	b.n	18ba <_sysctrl_init_referenced_generators+0x3e>
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    18e6:	23fc      	movs	r3, #252	; 0xfc
    18e8:	01db      	lsls	r3, r3, #7
    18ea:	e7d9      	b.n	18a0 <_sysctrl_init_referenced_generators+0x24>
    18ec:	40000800 	.word	0x40000800
    18f0:	04010000 	.word	0x04010000
    18f4:	00806024 	.word	0x00806024
    18f8:	40000c00 	.word	0x40000c00

000018fc <TC6_Handler>:
/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
	tc_pwm_interrupt_handler(_tc6_dev);
    18fc:	4b0c      	ldr	r3, [pc, #48]	; (1930 <TC6_Handler+0x34>)
{
    18fe:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc6_dev);
    1900:	681d      	ldr	r5, [r3, #0]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1902:	2301      	movs	r3, #1
	void *const hw = device->hw;
    1904:	692c      	ldr	r4, [r5, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1906:	7ba2      	ldrb	r2, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1908:	4213      	tst	r3, r2
    190a:	d005      	beq.n	1918 <TC6_Handler+0x1c>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    190c:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    190e:	682b      	ldr	r3, [r5, #0]
    1910:	2b00      	cmp	r3, #0
    1912:	d001      	beq.n	1918 <TC6_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    1914:	0028      	movs	r0, r5
    1916:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1918:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    191a:	079b      	lsls	r3, r3, #30
    191c:	d506      	bpl.n	192c <TC6_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    191e:	2302      	movs	r3, #2
    1920:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    1922:	686b      	ldr	r3, [r5, #4]
    1924:	2b00      	cmp	r3, #0
    1926:	d001      	beq.n	192c <TC6_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1928:	0028      	movs	r0, r5
    192a:	4798      	blx	r3
}
    192c:	bd70      	pop	{r4, r5, r6, pc}
    192e:	46c0      	nop			; (mov r8, r8)
    1930:	20000a70 	.word	0x20000a70

00001934 <TC7_Handler>:
/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
	tc_pwm_interrupt_handler(_tc7_dev);
    1934:	4b0c      	ldr	r3, [pc, #48]	; (1968 <TC7_Handler+0x34>)
{
    1936:	b570      	push	{r4, r5, r6, lr}
	tc_pwm_interrupt_handler(_tc7_dev);
    1938:	681d      	ldr	r5, [r3, #0]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    193a:	2301      	movs	r3, #1
	void *const hw = device->hw;
    193c:	692c      	ldr	r4, [r5, #16]
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    193e:	7ba2      	ldrb	r2, [r4, #14]
	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1940:	4213      	tst	r3, r2
    1942:	d005      	beq.n	1950 <TC7_Handler+0x1c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1944:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_period_cb) {
    1946:	682b      	ldr	r3, [r5, #0]
    1948:	2b00      	cmp	r3, #0
    194a:	d001      	beq.n	1950 <TC7_Handler+0x1c>
			device->callback.pwm_period_cb(device);
    194c:	0028      	movs	r0, r5
    194e:	4798      	blx	r3
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1950:	7b63      	ldrb	r3, [r4, #13]
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1952:	079b      	lsls	r3, r3, #30
    1954:	d506      	bpl.n	1964 <TC7_Handler+0x30>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1956:	2302      	movs	r3, #2
    1958:	73a3      	strb	r3, [r4, #14]
		if (NULL != device->callback.pwm_error_cb) {
    195a:	686b      	ldr	r3, [r5, #4]
    195c:	2b00      	cmp	r3, #0
    195e:	d001      	beq.n	1964 <TC7_Handler+0x30>
			device->callback.pwm_error_cb(device);
    1960:	0028      	movs	r0, r5
    1962:	4798      	blx	r3
}
    1964:	bd70      	pop	{r4, r5, r6, pc}
    1966:	46c0      	nop			; (mov r8, r8)
    1968:	20000a74 	.word	0x20000a74

0000196c <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(uint16_t Width, uint16_t Height, uint16_t Rotate, uint16_t Color)
{
    196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    Paint.WidthMemory = Width;
    196e:	4c0e      	ldr	r4, [pc, #56]	; (19a8 <Paint_NewImage+0x3c>)
{
    1970:	0017      	movs	r7, r2
    Paint.WidthMemory = Width;
    1972:	8120      	strh	r0, [r4, #8]
    Paint.HeightMemory = Height;
    1974:	8161      	strh	r1, [r4, #10]
    Paint.Color = Color;    
    1976:	81a3      	strh	r3, [r4, #12]
    Paint.WidthByte = Width;
    1978:	8260      	strh	r0, [r4, #18]
    Paint.HeightByte = Height;    
    197a:	82a1      	strh	r1, [r4, #20]
{
    197c:	000e      	movs	r6, r1
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    197e:	8a61      	ldrh	r1, [r4, #18]
    1980:	8aa2      	ldrh	r2, [r4, #20]
    1982:	4b0a      	ldr	r3, [pc, #40]	; (19ac <Paint_NewImage+0x40>)
{
    1984:	0005      	movs	r5, r0
    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
    1986:	b289      	uxth	r1, r1
    1988:	b292      	uxth	r2, r2
    198a:	4809      	ldr	r0, [pc, #36]	; (19b0 <Paint_NewImage+0x44>)
    198c:	4798      	blx	r3
   
    Paint.Rotate = Rotate;
    Paint.Mirror = MIRROR_NONE;
    198e:	2300      	movs	r3, #0
    Paint.Rotate = Rotate;
    1990:	81e7      	strh	r7, [r4, #14]
    Paint.Mirror = MIRROR_NONE;
    1992:	8223      	strh	r3, [r4, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
    1994:	2f00      	cmp	r7, #0
    1996:	d004      	beq.n	19a2 <Paint_NewImage+0x36>
    1998:	2fb4      	cmp	r7, #180	; 0xb4
    199a:	d002      	beq.n	19a2 <Paint_NewImage+0x36>
        Paint.Width = Width;
        Paint.Height = Height;
    } else {
        Paint.Width = Height;
    199c:	80a6      	strh	r6, [r4, #4]
        Paint.Height = Width;
    199e:	80e5      	strh	r5, [r4, #6]
    }
}
    19a0:	e001      	b.n	19a6 <Paint_NewImage+0x3a>
        Paint.Width = Width;
    19a2:	80a5      	strh	r5, [r4, #4]
        Paint.Height = Height;
    19a4:	80e6      	strh	r6, [r4, #6]
}
    19a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a8:	20000f6c 	.word	0x20000f6c
    19ac:	0000b731 	.word	0x0000b731
    19b0:	000161a8 	.word	0x000161a8

000019b4 <Paint_SetClearFuntion>:
parameter:
      Clear :   Pointer to Clear funtion 
******************************************************************************/
void Paint_SetClearFuntion(void (*Clear)(uint16_t))
{
  CLEAR=Clear;
    19b4:	4b01      	ldr	r3, [pc, #4]	; (19bc <Paint_SetClearFuntion+0x8>)
    19b6:	6018      	str	r0, [r3, #0]
}
    19b8:	4770      	bx	lr
    19ba:	46c0      	nop			; (mov r8, r8)
    19bc:	20000f84 	.word	0x20000f84

000019c0 <Paint_SetDisplayFuntion>:
parameter:
      Display :   Pointer to display funtion 
******************************************************************************/
void Paint_SetDisplayFuntion(void (*Display)(uint16_t,uint16_t,uint16_t))
{
  DISPLAY=Display;
    19c0:	4b01      	ldr	r3, [pc, #4]	; (19c8 <Paint_SetDisplayFuntion+0x8>)
    19c2:	6018      	str	r0, [r3, #0]
}
    19c4:	4770      	bx	lr
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	20000f68 	.word	0x20000f68

000019cc <Paint_SetPixel>:
    Xpoint  :   At point X
    Ypoint  :   At point Y
    Color   :   Painted colors
******************************************************************************/
void Paint_SetPixel(uint16_t Xpoint, uint16_t Ypoint, uint16_t Color)
{
    19cc:	b570      	push	{r4, r5, r6, lr}
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
    19ce:	4b26      	ldr	r3, [pc, #152]	; (1a68 <Paint_SetPixel+0x9c>)
    19d0:	889c      	ldrh	r4, [r3, #4]
    19d2:	4284      	cmp	r4, r0
    19d4:	d300      	bcc.n	19d8 <Paint_SetPixel+0xc>
    19d6:	88dc      	ldrh	r4, [r3, #6]
        //Debug("Exceeding display boundaries\r\n");
        //return;
    }      
    uint16_t X, Y;

    switch(Paint.Rotate) {
    19d8:	89dc      	ldrh	r4, [r3, #14]
    19da:	b2a4      	uxth	r4, r4
    19dc:	2c5a      	cmp	r4, #90	; 0x5a
    19de:	d038      	beq.n	1a52 <Paint_SetPixel+0x86>
    19e0:	d934      	bls.n	1a4c <Paint_SetPixel+0x80>
    19e2:	2cb4      	cmp	r4, #180	; 0xb4
    19e4:	d021      	beq.n	1a2a <Paint_SetPixel+0x5e>
    19e6:	2587      	movs	r5, #135	; 0x87
    19e8:	006d      	lsls	r5, r5, #1
    19ea:	42ac      	cmp	r4, r5
    19ec:	d11c      	bne.n	1a28 <Paint_SetPixel+0x5c>
        X = Paint.WidthMemory - Xpoint - 1;
        Y = Paint.HeightMemory - Ypoint - 1;
        break;
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
    19ee:	895c      	ldrh	r4, [r3, #10]
    19f0:	3c01      	subs	r4, #1
    19f2:	1a24      	subs	r4, r4, r0
        X = Ypoint;
    19f4:	0008      	movs	r0, r1
        Y = Paint.HeightMemory - Xpoint - 1;
    19f6:	b2a1      	uxth	r1, r4

    default:
        return;
    }
    
    switch(Paint.Mirror) {
    19f8:	8a1c      	ldrh	r4, [r3, #16]
    19fa:	b2a4      	uxth	r4, r4
    19fc:	2c01      	cmp	r4, #1
    19fe:	d020      	beq.n	1a42 <Paint_SetPixel+0x76>
    1a00:	2c00      	cmp	r4, #0
    1a02:	d00b      	beq.n	1a1c <Paint_SetPixel+0x50>
    1a04:	2c02      	cmp	r4, #2
    1a06:	d005      	beq.n	1a14 <Paint_SetPixel+0x48>
    1a08:	2c03      	cmp	r4, #3
    1a0a:	d10d      	bne.n	1a28 <Paint_SetPixel+0x5c>
        break;
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
        break;
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
    1a0c:	891c      	ldrh	r4, [r3, #8]
    1a0e:	3c01      	subs	r4, #1
    1a10:	1a20      	subs	r0, r4, r0
    1a12:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Y - 1;
    1a14:	895c      	ldrh	r4, [r3, #10]
    1a16:	3c01      	subs	r4, #1
    1a18:	1a61      	subs	r1, r4, r1
    1a1a:	b289      	uxth	r1, r1
    default:
        return;
    }

    // printf("x = %d, y = %d\r\n", X, Y);
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
    1a1c:	891c      	ldrh	r4, [r3, #8]
    1a1e:	42a0      	cmp	r0, r4
    1a20:	d802      	bhi.n	1a28 <Paint_SetPixel+0x5c>
    1a22:	895b      	ldrh	r3, [r3, #10]
    1a24:	4299      	cmp	r1, r3
    1a26:	d91a      	bls.n	1a5e <Paint_SetPixel+0x92>
        return;
    }
    
   // UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
		DISPLAY(X,Y, Color);
}
    1a28:	bd70      	pop	{r4, r5, r6, pc}
        X = Paint.WidthMemory - Xpoint - 1;
    1a2a:	891c      	ldrh	r4, [r3, #8]
    1a2c:	3c01      	subs	r4, #1
    1a2e:	1a20      	subs	r0, r4, r0
        Y = Paint.HeightMemory - Ypoint - 1;
    1a30:	895c      	ldrh	r4, [r3, #10]
        X = Paint.WidthMemory - Xpoint - 1;
    1a32:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Ypoint - 1;
    1a34:	3c01      	subs	r4, #1
    1a36:	1a61      	subs	r1, r4, r1
    switch(Paint.Mirror) {
    1a38:	8a1c      	ldrh	r4, [r3, #16]
        Y = Paint.HeightMemory - Ypoint - 1;
    1a3a:	b289      	uxth	r1, r1
    switch(Paint.Mirror) {
    1a3c:	b2a4      	uxth	r4, r4
    1a3e:	2c01      	cmp	r4, #1
    1a40:	d1de      	bne.n	1a00 <Paint_SetPixel+0x34>
        X = Paint.WidthMemory - X - 1;
    1a42:	891c      	ldrh	r4, [r3, #8]
    1a44:	3c01      	subs	r4, #1
    1a46:	1a20      	subs	r0, r4, r0
    1a48:	b280      	uxth	r0, r0
        break;
    1a4a:	e7e7      	b.n	1a1c <Paint_SetPixel+0x50>
    switch(Paint.Rotate) {
    1a4c:	2c00      	cmp	r4, #0
    1a4e:	d0d3      	beq.n	19f8 <Paint_SetPixel+0x2c>
    1a50:	e7ea      	b.n	1a28 <Paint_SetPixel+0x5c>
        X = Paint.WidthMemory - Ypoint - 1;
    1a52:	891c      	ldrh	r4, [r3, #8]
    1a54:	3c01      	subs	r4, #1
    1a56:	1a64      	subs	r4, r4, r1
        break;
    1a58:	0001      	movs	r1, r0
        X = Paint.WidthMemory - Ypoint - 1;
    1a5a:	b2a0      	uxth	r0, r4
        break;
    1a5c:	e7cc      	b.n	19f8 <Paint_SetPixel+0x2c>
		DISPLAY(X,Y, Color);
    1a5e:	4b03      	ldr	r3, [pc, #12]	; (1a6c <Paint_SetPixel+0xa0>)
    1a60:	681b      	ldr	r3, [r3, #0]
    1a62:	4798      	blx	r3
    1a64:	e7e0      	b.n	1a28 <Paint_SetPixel+0x5c>
    1a66:	46c0      	nop			; (mov r8, r8)
    1a68:	20000f6c 	.word	0x20000f6c
    1a6c:	20000f68 	.word	0x20000f68

00001a70 <Paint_DrawChar.part.2>:
    Acsii_Char       ：To display the English characters
    Font             ：A structure pointer that displays a character size
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
    1a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a72:	4657      	mov	r7, sl
    1a74:	46de      	mov	lr, fp
    1a76:	4645      	mov	r5, r8
    1a78:	464e      	mov	r6, r9
    1a7a:	001c      	movs	r4, r3
    1a7c:	b5e0      	push	{r5, r6, r7, lr}
		// Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
		return;
	}

	// Обчислення зміщення символу в таблиці шрифтів
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    1a7e:	2707      	movs	r7, #7
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
    1a80:	b087      	sub	sp, #28
    1a82:	9301      	str	r3, [sp, #4]
    1a84:	ab10      	add	r3, sp, #64	; 0x40
    1a86:	9003      	str	r0, [sp, #12]
    1a88:	0010      	movs	r0, r2
    1a8a:	881a      	ldrh	r2, [r3, #0]
    1a8c:	ab11      	add	r3, sp, #68	; 0x44
    1a8e:	4693      	mov	fp, r2
    1a90:	881a      	ldrh	r2, [r3, #0]
    1a92:	9104      	str	r1, [sp, #16]
    1a94:	9202      	str	r2, [sp, #8]
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    1a96:	88a2      	ldrh	r2, [r4, #4]
    1a98:	3820      	subs	r0, #32
    1a9a:	4017      	ands	r7, r2
    1a9c:	1e7b      	subs	r3, r7, #1
    1a9e:	419f      	sbcs	r7, r3
    1aa0:	08d3      	lsrs	r3, r2, #3
    1aa2:	18fb      	adds	r3, r7, r3
    1aa4:	0007      	movs	r7, r0
void Paint_DrawChar(uint16_t Xpoint, uint16_t Ypoint, const char Acsii_Char,
    1aa6:	000d      	movs	r5, r1
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    1aa8:	88e1      	ldrh	r1, [r4, #6]
	const unsigned char *ptr = &Font->table[Char_Offset];

	for (Page = 0; Page < Font->Height; Page++) {
    1aaa:	46aa      	mov	sl, r5
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
    1aac:	434f      	muls	r7, r1
    1aae:	435f      	muls	r7, r3
	const unsigned char *ptr = &Font->table[Char_Offset];
    1ab0:	6823      	ldr	r3, [r4, #0]
    1ab2:	469c      	mov	ip, r3
    1ab4:	9305      	str	r3, [sp, #20]
    1ab6:	4467      	add	r7, ip
	for (Page = 0; Page < Font->Height; Page++) {
    1ab8:	2900      	cmp	r1, #0
    1aba:	d100      	bne.n	1abe <Paint_DrawChar.part.2+0x4e>
    1abc:	e0d6      	b.n	1c6c <Paint_DrawChar.part.2+0x1fc>
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
    1abe:	4b82      	ldr	r3, [pc, #520]	; (1cc8 <Paint_DrawChar.part.2+0x258>)
    1ac0:	4698      	mov	r8, r3
    1ac2:	4699      	mov	r9, r3
		for (Column = 0; Column < Font->Width; Column++) {
    1ac4:	9e03      	ldr	r6, [sp, #12]
    1ac6:	2500      	movs	r5, #0
    1ac8:	2a00      	cmp	r2, #0
    1aca:	d14a      	bne.n	1b62 <Paint_DrawChar.part.2+0xf2>
    1acc:	e0c2      	b.n	1c54 <Paint_DrawChar.part.2+0x1e4>
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
    1ace:	464b      	mov	r3, r9
    1ad0:	889b      	ldrh	r3, [r3, #4]
    1ad2:	42b3      	cmp	r3, r6
    1ad4:	d301      	bcc.n	1ada <Paint_DrawChar.part.2+0x6a>
    1ad6:	464b      	mov	r3, r9
    1ad8:	88db      	ldrh	r3, [r3, #6]
    switch(Paint.Rotate) {
    1ada:	464b      	mov	r3, r9
    1adc:	89db      	ldrh	r3, [r3, #14]
    1ade:	b29b      	uxth	r3, r3
    1ae0:	2b5a      	cmp	r3, #90	; 0x5a
    1ae2:	d100      	bne.n	1ae6 <Paint_DrawChar.part.2+0x76>
    1ae4:	e0d1      	b.n	1c8a <Paint_DrawChar.part.2+0x21a>
    1ae6:	d800      	bhi.n	1aea <Paint_DrawChar.part.2+0x7a>
    1ae8:	e09f      	b.n	1c2a <Paint_DrawChar.part.2+0x1ba>
    1aea:	2bb4      	cmp	r3, #180	; 0xb4
    1aec:	d100      	bne.n	1af0 <Paint_DrawChar.part.2+0x80>
    1aee:	e0df      	b.n	1cb0 <Paint_DrawChar.part.2+0x240>
    1af0:	2187      	movs	r1, #135	; 0x87
    1af2:	0049      	lsls	r1, r1, #1
    1af4:	428b      	cmp	r3, r1
    1af6:	d129      	bne.n	1b4c <Paint_DrawChar.part.2+0xdc>
        Y = Paint.HeightMemory - Xpoint - 1;
    1af8:	464b      	mov	r3, r9
        X = Ypoint;
    1afa:	4650      	mov	r0, sl
        Y = Paint.HeightMemory - Xpoint - 1;
    1afc:	8959      	ldrh	r1, [r3, #10]
    1afe:	3901      	subs	r1, #1
    1b00:	1b89      	subs	r1, r1, r6
    1b02:	b289      	uxth	r1, r1
    switch(Paint.Mirror) {
    1b04:	464b      	mov	r3, r9
    1b06:	8a1b      	ldrh	r3, [r3, #16]
    1b08:	b29b      	uxth	r3, r3
    1b0a:	2b01      	cmp	r3, #1
    1b0c:	d100      	bne.n	1b10 <Paint_DrawChar.part.2+0xa0>
    1b0e:	e096      	b.n	1c3e <Paint_DrawChar.part.2+0x1ce>
    1b10:	2b00      	cmp	r3, #0
    1b12:	d00d      	beq.n	1b30 <Paint_DrawChar.part.2+0xc0>
    1b14:	2b02      	cmp	r3, #2
    1b16:	d006      	beq.n	1b26 <Paint_DrawChar.part.2+0xb6>
    1b18:	2b03      	cmp	r3, #3
    1b1a:	d117      	bne.n	1b4c <Paint_DrawChar.part.2+0xdc>
        X = Paint.WidthMemory - X - 1;
    1b1c:	464b      	mov	r3, r9
    1b1e:	891b      	ldrh	r3, [r3, #8]
    1b20:	3b01      	subs	r3, #1
    1b22:	1a18      	subs	r0, r3, r0
    1b24:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Y - 1;
    1b26:	464b      	mov	r3, r9
    1b28:	895b      	ldrh	r3, [r3, #10]
    1b2a:	3b01      	subs	r3, #1
    1b2c:	1a59      	subs	r1, r3, r1
    1b2e:	b289      	uxth	r1, r1
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
    1b30:	464b      	mov	r3, r9
    1b32:	891b      	ldrh	r3, [r3, #8]
    1b34:	4283      	cmp	r3, r0
    1b36:	d309      	bcc.n	1b4c <Paint_DrawChar.part.2+0xdc>
    1b38:	464b      	mov	r3, r9
    1b3a:	895b      	ldrh	r3, [r3, #10]
    1b3c:	428b      	cmp	r3, r1
    1b3e:	d305      	bcc.n	1b4c <Paint_DrawChar.part.2+0xdc>
		DISPLAY(X,Y, Color);
    1b40:	4b62      	ldr	r3, [pc, #392]	; (1ccc <Paint_DrawChar.part.2+0x25c>)
    1b42:	9a02      	ldr	r2, [sp, #8]
    1b44:	681b      	ldr	r3, [r3, #0]
    1b46:	4798      	blx	r3
    1b48:	9b01      	ldr	r3, [sp, #4]
    1b4a:	889a      	ldrh	r2, [r3, #4]
				}
			}

			// Один піксель = 8 бітів
			if (Column % 8 == 7) {
				ptr++;
    1b4c:	3c07      	subs	r4, #7
    1b4e:	4263      	negs	r3, r4
    1b50:	415c      	adcs	r4, r3
		for (Column = 0; Column < Font->Width; Column++) {
    1b52:	3501      	adds	r5, #1
    1b54:	3601      	adds	r6, #1
    1b56:	b2ad      	uxth	r5, r5
				ptr++;
    1b58:	193f      	adds	r7, r7, r4
    1b5a:	b2b6      	uxth	r6, r6
		for (Column = 0; Column < Font->Width; Column++) {
    1b5c:	4295      	cmp	r5, r2
    1b5e:	d300      	bcc.n	1b62 <Paint_DrawChar.part.2+0xf2>
    1b60:	e073      	b.n	1c4a <Paint_DrawChar.part.2+0x1da>
    1b62:	2407      	movs	r4, #7
			if (FONT_BACKGROUND == Color_Background) { // Прискорення сканування
    1b64:	4b5a      	ldr	r3, [pc, #360]	; (1cd0 <Paint_DrawChar.part.2+0x260>)
    1b66:	402c      	ands	r4, r5
				if (*ptr & (0x80 >> (Column % 8))) {
    1b68:	7839      	ldrb	r1, [r7, #0]
			if (FONT_BACKGROUND == Color_Background) { // Прискорення сканування
    1b6a:	459b      	cmp	fp, r3
    1b6c:	d042      	beq.n	1bf4 <Paint_DrawChar.part.2+0x184>
				if (*ptr & (0x80 >> (Column % 8))) {
    1b6e:	2380      	movs	r3, #128	; 0x80
    1b70:	4123      	asrs	r3, r4
    1b72:	420b      	tst	r3, r1
    1b74:	d1ab      	bne.n	1ace <Paint_DrawChar.part.2+0x5e>
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
    1b76:	4643      	mov	r3, r8
    1b78:	889b      	ldrh	r3, [r3, #4]
    1b7a:	42b3      	cmp	r3, r6
    1b7c:	d301      	bcc.n	1b82 <Paint_DrawChar.part.2+0x112>
    1b7e:	4643      	mov	r3, r8
    1b80:	88db      	ldrh	r3, [r3, #6]
    switch(Paint.Rotate) {
    1b82:	4643      	mov	r3, r8
    1b84:	89db      	ldrh	r3, [r3, #14]
    1b86:	b29b      	uxth	r3, r3
    1b88:	2b5a      	cmp	r3, #90	; 0x5a
    1b8a:	d100      	bne.n	1b8e <Paint_DrawChar.part.2+0x11e>
    1b8c:	e075      	b.n	1c7a <Paint_DrawChar.part.2+0x20a>
    1b8e:	d93d      	bls.n	1c0c <Paint_DrawChar.part.2+0x19c>
    1b90:	2bb4      	cmp	r3, #180	; 0xb4
    1b92:	d100      	bne.n	1b96 <Paint_DrawChar.part.2+0x126>
    1b94:	e081      	b.n	1c9a <Paint_DrawChar.part.2+0x22a>
    1b96:	2187      	movs	r1, #135	; 0x87
    1b98:	0049      	lsls	r1, r1, #1
    1b9a:	428b      	cmp	r3, r1
    1b9c:	d1d6      	bne.n	1b4c <Paint_DrawChar.part.2+0xdc>
        Y = Paint.HeightMemory - Xpoint - 1;
    1b9e:	4643      	mov	r3, r8
        X = Ypoint;
    1ba0:	4650      	mov	r0, sl
        Y = Paint.HeightMemory - Xpoint - 1;
    1ba2:	8959      	ldrh	r1, [r3, #10]
    1ba4:	3901      	subs	r1, #1
    1ba6:	1b89      	subs	r1, r1, r6
    1ba8:	b289      	uxth	r1, r1
    switch(Paint.Mirror) {
    1baa:	4643      	mov	r3, r8
    1bac:	8a1b      	ldrh	r3, [r3, #16]
    1bae:	b29b      	uxth	r3, r3
    1bb0:	2b01      	cmp	r3, #1
    1bb2:	d034      	beq.n	1c1e <Paint_DrawChar.part.2+0x1ae>
    1bb4:	2b00      	cmp	r3, #0
    1bb6:	d00d      	beq.n	1bd4 <Paint_DrawChar.part.2+0x164>
    1bb8:	2b02      	cmp	r3, #2
    1bba:	d006      	beq.n	1bca <Paint_DrawChar.part.2+0x15a>
    1bbc:	2b03      	cmp	r3, #3
    1bbe:	d1c5      	bne.n	1b4c <Paint_DrawChar.part.2+0xdc>
        X = Paint.WidthMemory - X - 1;
    1bc0:	4643      	mov	r3, r8
    1bc2:	891b      	ldrh	r3, [r3, #8]
    1bc4:	3b01      	subs	r3, #1
    1bc6:	1a18      	subs	r0, r3, r0
    1bc8:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Y - 1;
    1bca:	4643      	mov	r3, r8
    1bcc:	895b      	ldrh	r3, [r3, #10]
    1bce:	3b01      	subs	r3, #1
    1bd0:	1a59      	subs	r1, r3, r1
    1bd2:	b289      	uxth	r1, r1
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
    1bd4:	4643      	mov	r3, r8
    1bd6:	891b      	ldrh	r3, [r3, #8]
    1bd8:	4283      	cmp	r3, r0
    1bda:	d3b7      	bcc.n	1b4c <Paint_DrawChar.part.2+0xdc>
    1bdc:	4643      	mov	r3, r8
    1bde:	895b      	ldrh	r3, [r3, #10]
    1be0:	428b      	cmp	r3, r1
    1be2:	d3b3      	bcc.n	1b4c <Paint_DrawChar.part.2+0xdc>
		DISPLAY(X,Y, Color);
    1be4:	4b39      	ldr	r3, [pc, #228]	; (1ccc <Paint_DrawChar.part.2+0x25c>)
    1be6:	465a      	mov	r2, fp
    1be8:	681b      	ldr	r3, [r3, #0]
    1bea:	9305      	str	r3, [sp, #20]
    1bec:	4798      	blx	r3
    1bee:	9b01      	ldr	r3, [sp, #4]
    1bf0:	889a      	ldrh	r2, [r3, #4]
    1bf2:	e7ab      	b.n	1b4c <Paint_DrawChar.part.2+0xdc>
				if (*ptr & (0x80 >> (Column % 8))) {
    1bf4:	2380      	movs	r3, #128	; 0x80
    1bf6:	4123      	asrs	r3, r4
    1bf8:	420b      	tst	r3, r1
    1bfa:	d0a7      	beq.n	1b4c <Paint_DrawChar.part.2+0xdc>
					Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
    1bfc:	9a02      	ldr	r2, [sp, #8]
    1bfe:	4b35      	ldr	r3, [pc, #212]	; (1cd4 <Paint_DrawChar.part.2+0x264>)
    1c00:	4651      	mov	r1, sl
    1c02:	0030      	movs	r0, r6
    1c04:	4798      	blx	r3
    1c06:	9b01      	ldr	r3, [sp, #4]
    1c08:	889a      	ldrh	r2, [r3, #4]
    1c0a:	e79f      	b.n	1b4c <Paint_DrawChar.part.2+0xdc>
    switch(Paint.Rotate) {
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d19d      	bne.n	1b4c <Paint_DrawChar.part.2+0xdc>
    switch(Paint.Mirror) {
    1c10:	4643      	mov	r3, r8
    1c12:	8a1b      	ldrh	r3, [r3, #16]
        Y = Ypoint;  
    1c14:	4651      	mov	r1, sl
    switch(Paint.Mirror) {
    1c16:	b29b      	uxth	r3, r3
    switch(Paint.Rotate) {
    1c18:	0030      	movs	r0, r6
    switch(Paint.Mirror) {
    1c1a:	2b01      	cmp	r3, #1
    1c1c:	d1ca      	bne.n	1bb4 <Paint_DrawChar.part.2+0x144>
        X = Paint.WidthMemory - X - 1;
    1c1e:	4643      	mov	r3, r8
    1c20:	891b      	ldrh	r3, [r3, #8]
    1c22:	3b01      	subs	r3, #1
    1c24:	1a18      	subs	r0, r3, r0
    1c26:	b280      	uxth	r0, r0
    1c28:	e7d4      	b.n	1bd4 <Paint_DrawChar.part.2+0x164>
    switch(Paint.Rotate) {
    1c2a:	2b00      	cmp	r3, #0
    1c2c:	d18e      	bne.n	1b4c <Paint_DrawChar.part.2+0xdc>
    switch(Paint.Mirror) {
    1c2e:	464b      	mov	r3, r9
    1c30:	8a1b      	ldrh	r3, [r3, #16]
        Y = Ypoint;  
    1c32:	4651      	mov	r1, sl
    switch(Paint.Mirror) {
    1c34:	b29b      	uxth	r3, r3
    switch(Paint.Rotate) {
    1c36:	0030      	movs	r0, r6
    switch(Paint.Mirror) {
    1c38:	2b01      	cmp	r3, #1
    1c3a:	d000      	beq.n	1c3e <Paint_DrawChar.part.2+0x1ce>
    1c3c:	e768      	b.n	1b10 <Paint_DrawChar.part.2+0xa0>
        X = Paint.WidthMemory - X - 1;
    1c3e:	464b      	mov	r3, r9
    1c40:	891b      	ldrh	r3, [r3, #8]
    1c42:	3b01      	subs	r3, #1
    1c44:	1a18      	subs	r0, r3, r0
    1c46:	b280      	uxth	r0, r0
    1c48:	e772      	b.n	1b30 <Paint_DrawChar.part.2+0xc0>
			}
		} // Завершення рядка
		if (Font->Width % 8 != 0) {
    1c4a:	0753      	lsls	r3, r2, #29
    1c4c:	d000      	beq.n	1c50 <Paint_DrawChar.part.2+0x1e0>
			ptr++;
    1c4e:	3701      	adds	r7, #1
    1c50:	9b01      	ldr	r3, [sp, #4]
    1c52:	88d9      	ldrh	r1, [r3, #6]
    1c54:	4653      	mov	r3, sl
    1c56:	9804      	ldr	r0, [sp, #16]
    1c58:	1a1b      	subs	r3, r3, r0
    1c5a:	4650      	mov	r0, sl
    1c5c:	3301      	adds	r3, #1
    1c5e:	3001      	adds	r0, #1
    1c60:	b280      	uxth	r0, r0
    1c62:	b29b      	uxth	r3, r3
    1c64:	4682      	mov	sl, r0
	for (Page = 0; Page < Font->Height; Page++) {
    1c66:	428b      	cmp	r3, r1
    1c68:	d200      	bcs.n	1c6c <Paint_DrawChar.part.2+0x1fc>
    1c6a:	e72b      	b.n	1ac4 <Paint_DrawChar.part.2+0x54>
		}
	} // Завершення символу
}
    1c6c:	b007      	add	sp, #28
    1c6e:	bc3c      	pop	{r2, r3, r4, r5}
    1c70:	4690      	mov	r8, r2
    1c72:	4699      	mov	r9, r3
    1c74:	46a2      	mov	sl, r4
    1c76:	46ab      	mov	fp, r5
    1c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        X = Paint.WidthMemory - Ypoint - 1;
    1c7a:	4643      	mov	r3, r8
    1c7c:	8918      	ldrh	r0, [r3, #8]
    1c7e:	4653      	mov	r3, sl
    1c80:	3801      	subs	r0, #1
    1c82:	1ac0      	subs	r0, r0, r3
    1c84:	b280      	uxth	r0, r0
    1c86:	0031      	movs	r1, r6
    1c88:	e78f      	b.n	1baa <Paint_DrawChar.part.2+0x13a>
    1c8a:	464b      	mov	r3, r9
    1c8c:	8918      	ldrh	r0, [r3, #8]
    1c8e:	4653      	mov	r3, sl
    1c90:	3801      	subs	r0, #1
    1c92:	1ac0      	subs	r0, r0, r3
    1c94:	b280      	uxth	r0, r0
    1c96:	0031      	movs	r1, r6
    1c98:	e734      	b.n	1b04 <Paint_DrawChar.part.2+0x94>
        X = Paint.WidthMemory - Xpoint - 1;
    1c9a:	4643      	mov	r3, r8
    1c9c:	8918      	ldrh	r0, [r3, #8]
        Y = Paint.HeightMemory - Ypoint - 1;
    1c9e:	8959      	ldrh	r1, [r3, #10]
    1ca0:	4653      	mov	r3, sl
        X = Paint.WidthMemory - Xpoint - 1;
    1ca2:	3801      	subs	r0, #1
        Y = Paint.HeightMemory - Ypoint - 1;
    1ca4:	3901      	subs	r1, #1
        X = Paint.WidthMemory - Xpoint - 1;
    1ca6:	1b80      	subs	r0, r0, r6
        Y = Paint.HeightMemory - Ypoint - 1;
    1ca8:	1ac9      	subs	r1, r1, r3
        X = Paint.WidthMemory - Xpoint - 1;
    1caa:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Ypoint - 1;
    1cac:	b289      	uxth	r1, r1
    1cae:	e77c      	b.n	1baa <Paint_DrawChar.part.2+0x13a>
        X = Paint.WidthMemory - Xpoint - 1;
    1cb0:	464b      	mov	r3, r9
    1cb2:	8918      	ldrh	r0, [r3, #8]
        Y = Paint.HeightMemory - Ypoint - 1;
    1cb4:	8959      	ldrh	r1, [r3, #10]
    1cb6:	4653      	mov	r3, sl
        X = Paint.WidthMemory - Xpoint - 1;
    1cb8:	3801      	subs	r0, #1
        Y = Paint.HeightMemory - Ypoint - 1;
    1cba:	3901      	subs	r1, #1
        X = Paint.WidthMemory - Xpoint - 1;
    1cbc:	1b80      	subs	r0, r0, r6
        Y = Paint.HeightMemory - Ypoint - 1;
    1cbe:	1ac9      	subs	r1, r1, r3
        X = Paint.WidthMemory - Xpoint - 1;
    1cc0:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Ypoint - 1;
    1cc2:	b289      	uxth	r1, r1
    1cc4:	e71e      	b.n	1b04 <Paint_DrawChar.part.2+0x94>
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	20000f6c 	.word	0x20000f6c
    1ccc:	20000f68 	.word	0x20000f68
    1cd0:	0000ffff 	.word	0x0000ffff
    1cd4:	000019cd 	.word	0x000019cd

00001cd8 <Paint_DrawString_EN>:
    Color_Background : Select the background color of the English character
    Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void Paint_DrawString_EN(uint16_t Xstart, uint16_t Ystart, const char * pString,
                         sFONT* Font, uint16_t Color_Background, uint16_t Color_Foreground )
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	4657      	mov	r7, sl
    1cdc:	464e      	mov	r6, r9
    1cde:	46de      	mov	lr, fp
    1ce0:	4645      	mov	r5, r8
    1ce2:	b5e0      	push	{r5, r6, r7, lr}
    1ce4:	b085      	sub	sp, #20
    1ce6:	4698      	mov	r8, r3
    1ce8:	ab0e      	add	r3, sp, #56	; 0x38
    1cea:	881b      	ldrh	r3, [r3, #0]
    uint16_t Xpoint = Xstart;
    uint16_t Ypoint = Ystart;

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
    1cec:	4e27      	ldr	r6, [pc, #156]	; (1d8c <Paint_DrawString_EN+0xb4>)
{
    1cee:	9303      	str	r3, [sp, #12]
    1cf0:	ab0f      	add	r3, sp, #60	; 0x3c
    1cf2:	881b      	ldrh	r3, [r3, #0]
    1cf4:	4681      	mov	r9, r0
    1cf6:	469b      	mov	fp, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
    1cf8:	88b3      	ldrh	r3, [r6, #4]
{
    1cfa:	468a      	mov	sl, r1
    1cfc:	0017      	movs	r7, r2
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
    1cfe:	4298      	cmp	r0, r3
    1d00:	d800      	bhi.n	1d04 <Paint_DrawString_EN+0x2c>
    1d02:	88f3      	ldrh	r3, [r6, #6]
        //Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        //return;
    }

    while (* pString != '\0') {
    1d04:	783a      	ldrb	r2, [r7, #0]
    1d06:	2a00      	cmp	r2, #0
    1d08:	d038      	beq.n	1d7c <Paint_DrawString_EN+0xa4>
    1d0a:	4643      	mov	r3, r8
    1d0c:	4655      	mov	r5, sl
    1d0e:	8899      	ldrh	r1, [r3, #4]
    1d10:	464c      	mov	r4, r9
    1d12:	9702      	str	r7, [sp, #8]
    1d14:	e015      	b.n	1d42 <Paint_DrawString_EN+0x6a>
    1d16:	4643      	mov	r3, r8
    1d18:	88db      	ldrh	r3, [r3, #6]
            Xpoint = Xstart;
            Ypoint += Font->Height;
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
    1d1a:	88f0      	ldrh	r0, [r6, #6]
    1d1c:	18eb      	adds	r3, r5, r3
    1d1e:	4283      	cmp	r3, r0
    1d20:	dd01      	ble.n	1d26 <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
            Ypoint = Ystart;
    1d22:	4655      	mov	r5, sl
    1d24:	464c      	mov	r4, r9
	if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
    1d26:	88b3      	ldrh	r3, [r6, #4]
    1d28:	429c      	cmp	r4, r3
    1d2a:	d802      	bhi.n	1d32 <Paint_DrawString_EN+0x5a>
    1d2c:	88f3      	ldrh	r3, [r6, #6]
    1d2e:	429d      	cmp	r5, r3
    1d30:	d911      	bls.n	1d56 <Paint_DrawString_EN+0x7e>
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);

        //The next character of the address
        pString ++;
    1d32:	9b02      	ldr	r3, [sp, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
    1d34:	1864      	adds	r4, r4, r1
        pString ++;
    1d36:	3301      	adds	r3, #1
    while (* pString != '\0') {
    1d38:	781a      	ldrb	r2, [r3, #0]
        pString ++;
    1d3a:	9302      	str	r3, [sp, #8]
        Xpoint += Font->Width;
    1d3c:	b2a4      	uxth	r4, r4
    while (* pString != '\0') {
    1d3e:	2a00      	cmp	r2, #0
    1d40:	d01c      	beq.n	1d7c <Paint_DrawString_EN+0xa4>
        if ((Xpoint + Font->Width ) > Paint.Width ) {
    1d42:	88b3      	ldrh	r3, [r6, #4]
    1d44:	1860      	adds	r0, r4, r1
    1d46:	4298      	cmp	r0, r3
    1d48:	dde5      	ble.n	1d16 <Paint_DrawString_EN+0x3e>
            Ypoint += Font->Height;
    1d4a:	4643      	mov	r3, r8
    1d4c:	88db      	ldrh	r3, [r3, #6]
    1d4e:	464c      	mov	r4, r9
    1d50:	195d      	adds	r5, r3, r5
    1d52:	b2ad      	uxth	r5, r5
    1d54:	e7e1      	b.n	1d1a <Paint_DrawString_EN+0x42>
    1d56:	465b      	mov	r3, fp
    1d58:	9301      	str	r3, [sp, #4]
    1d5a:	9b03      	ldr	r3, [sp, #12]
    1d5c:	0029      	movs	r1, r5
    1d5e:	9300      	str	r3, [sp, #0]
    1d60:	0020      	movs	r0, r4
    1d62:	4643      	mov	r3, r8
    1d64:	4f0a      	ldr	r7, [pc, #40]	; (1d90 <Paint_DrawString_EN+0xb8>)
    1d66:	47b8      	blx	r7
    1d68:	4643      	mov	r3, r8
    1d6a:	8899      	ldrh	r1, [r3, #4]
        pString ++;
    1d6c:	9b02      	ldr	r3, [sp, #8]
        Xpoint += Font->Width;
    1d6e:	1864      	adds	r4, r4, r1
        pString ++;
    1d70:	3301      	adds	r3, #1
    while (* pString != '\0') {
    1d72:	781a      	ldrb	r2, [r3, #0]
        pString ++;
    1d74:	9302      	str	r3, [sp, #8]
        Xpoint += Font->Width;
    1d76:	b2a4      	uxth	r4, r4
    while (* pString != '\0') {
    1d78:	2a00      	cmp	r2, #0
    1d7a:	d1e2      	bne.n	1d42 <Paint_DrawString_EN+0x6a>
    }
}
    1d7c:	b005      	add	sp, #20
    1d7e:	bc3c      	pop	{r2, r3, r4, r5}
    1d80:	4690      	mov	r8, r2
    1d82:	4699      	mov	r9, r3
    1d84:	46a2      	mov	sl, r4
    1d86:	46ab      	mov	fp, r5
    1d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d8a:	46c0      	nop			; (mov r8, r8)
    1d8c:	20000f6c 	.word	0x20000f6c
    1d90:	00001a71 	.word	0x00001a71

00001d94 <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
void OLED_InitReg(void)
{
    1d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d96:	46de      	mov	lr, fp
    1d98:	4657      	mov	r7, sl
    1d9a:	464e      	mov	r6, r9
    1d9c:	4645      	mov	r5, r8
    1d9e:	206f      	movs	r0, #111	; 0x6f
    1da0:	23fd      	movs	r3, #253	; 0xfd
    1da2:	b5e0      	push	{r5, r6, r7, lr}
    1da4:	b09d      	sub	sp, #116	; 0x74
    1da6:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = ~data;
}

static inline void hri_port_clear_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1da8:	24c0      	movs	r4, #192	; 0xc0
    1daa:	2780      	movs	r7, #128	; 0x80
    1dac:	2580      	movs	r5, #128	; 0x80
    1dae:	7003      	strb	r3, [r0, #0]
    1db0:	469a      	mov	sl, r3
    1db2:	2394      	movs	r3, #148	; 0x94
    1db4:	05e4      	lsls	r4, r4, #23
    1db6:	022d      	lsls	r5, r5, #8
    1db8:	027f      	lsls	r7, r7, #9
    EXT_SPI_WriteBuff(&Reg, 1);
    1dba:	4efe      	ldr	r6, [pc, #1016]	; (21b4 <STACK_SIZE+0x1b4>)
    1dbc:	50e7      	str	r7, [r4, r3]
    1dbe:	2101      	movs	r1, #1
    1dc0:	6165      	str	r5, [r4, #20]
    1dc2:	4699      	mov	r9, r3
    1dc4:	47b0      	blx	r6
    1dc6:	206e      	movs	r0, #110	; 0x6e
    1dc8:	2312      	movs	r3, #18
    1dca:	4468      	add	r0, sp
    1dcc:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1dce:	2398      	movs	r3, #152	; 0x98
    EXT_SPI_WriteBuff(&Data, 1);
    1dd0:	2101      	movs	r1, #1
    1dd2:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dd4:	6165      	str	r5, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1dd6:	4698      	mov	r8, r3
    1dd8:	47b0      	blx	r6
    1dda:	206d      	movs	r0, #109	; 0x6d
    1ddc:	4653      	mov	r3, sl
    1dde:	4468      	add	r0, sp
    1de0:	61a5      	str	r5, [r4, #24]
    1de2:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1de4:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1de6:	2101      	movs	r1, #1
    1de8:	50e7      	str	r7, [r4, r3]
    1dea:	6165      	str	r5, [r4, #20]
    1dec:	47b0      	blx	r6
    1dee:	23b1      	movs	r3, #177	; 0xb1
    1df0:	a81b      	add	r0, sp, #108	; 0x6c
    1df2:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1df4:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1df6:	2101      	movs	r1, #1
    1df8:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dfa:	6165      	str	r5, [r4, #20]
    1dfc:	47b0      	blx	r6
    1dfe:	206b      	movs	r0, #107	; 0x6b
    1e00:	23ae      	movs	r3, #174	; 0xae
    1e02:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e04:	61a5      	str	r5, [r4, #24]
    1e06:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e08:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1e0a:	2101      	movs	r1, #1
    1e0c:	50e7      	str	r7, [r4, r3]
    1e0e:	6165      	str	r5, [r4, #20]
    1e10:	47b0      	blx	r6
    1e12:	206a      	movs	r0, #106	; 0x6a
    1e14:	23b3      	movs	r3, #179	; 0xb3
    1e16:	4468      	add	r0, sp
    1e18:	7003      	strb	r3, [r0, #0]
    1e1a:	464b      	mov	r3, r9
    1e1c:	2101      	movs	r1, #1
    1e1e:	50e7      	str	r7, [r4, r3]
    1e20:	6165      	str	r5, [r4, #20]
    1e22:	47b0      	blx	r6
    1e24:	2069      	movs	r0, #105	; 0x69
    1e26:	23f1      	movs	r3, #241	; 0xf1
    1e28:	4468      	add	r0, sp
    1e2a:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e2c:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1e2e:	2101      	movs	r1, #1
    1e30:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e32:	6165      	str	r5, [r4, #20]
    1e34:	47b0      	blx	r6
    1e36:	23ca      	movs	r3, #202	; 0xca
    1e38:	a81a      	add	r0, sp, #104	; 0x68
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e3a:	61a5      	str	r5, [r4, #24]
    1e3c:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e3e:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1e40:	2101      	movs	r1, #1
    1e42:	50e7      	str	r7, [r4, r3]
    1e44:	6165      	str	r5, [r4, #20]
    1e46:	47b0      	blx	r6
    1e48:	2067      	movs	r0, #103	; 0x67
    1e4a:	237f      	movs	r3, #127	; 0x7f
    1e4c:	4468      	add	r0, sp
    1e4e:	7003      	strb	r3, [r0, #0]
    1e50:	469b      	mov	fp, r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e52:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1e54:	2101      	movs	r1, #1
    1e56:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e58:	6165      	str	r5, [r4, #20]
    1e5a:	47b0      	blx	r6
    1e5c:	2066      	movs	r0, #102	; 0x66
    1e5e:	23a0      	movs	r3, #160	; 0xa0
    1e60:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e62:	61a5      	str	r5, [r4, #24]
    1e64:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e66:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1e68:	2101      	movs	r1, #1
    1e6a:	50e7      	str	r7, [r4, r3]
    1e6c:	6165      	str	r5, [r4, #20]
    1e6e:	47b0      	blx	r6
    1e70:	2065      	movs	r0, #101	; 0x65
    1e72:	2374      	movs	r3, #116	; 0x74
    1e74:	4468      	add	r0, sp
    1e76:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e78:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1e7a:	2101      	movs	r1, #1
    1e7c:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e7e:	6165      	str	r5, [r4, #20]
    1e80:	47b0      	blx	r6
    1e82:	2315      	movs	r3, #21
    1e84:	a819      	add	r0, sp, #100	; 0x64
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e86:	61a5      	str	r5, [r4, #24]
    1e88:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e8a:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1e8c:	2101      	movs	r1, #1
    1e8e:	50e7      	str	r7, [r4, r3]
    1e90:	6165      	str	r5, [r4, #20]
    1e92:	47b0      	blx	r6
    1e94:	2063      	movs	r0, #99	; 0x63
    1e96:	2300      	movs	r3, #0
    1e98:	4468      	add	r0, sp
    1e9a:	469a      	mov	sl, r3
    1e9c:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e9e:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1ea0:	2101      	movs	r1, #1
    1ea2:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ea4:	6165      	str	r5, [r4, #20]
    1ea6:	47b0      	blx	r6
    1ea8:	2062      	movs	r0, #98	; 0x62
    1eaa:	465b      	mov	r3, fp
    1eac:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1eae:	61a5      	str	r5, [r4, #24]
    1eb0:	7003      	strb	r3, [r0, #0]
    1eb2:	4643      	mov	r3, r8
    1eb4:	2101      	movs	r1, #1
    1eb6:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1eb8:	6165      	str	r5, [r4, #20]
    1eba:	47b0      	blx	r6
    1ebc:	2061      	movs	r0, #97	; 0x61
    1ebe:	2375      	movs	r3, #117	; 0x75
    1ec0:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ec2:	61a5      	str	r5, [r4, #24]
    1ec4:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ec6:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1ec8:	2101      	movs	r1, #1
    1eca:	50e7      	str	r7, [r4, r3]
    1ecc:	6165      	str	r5, [r4, #20]
    1ece:	47b0      	blx	r6
    1ed0:	4653      	mov	r3, sl
    1ed2:	a818      	add	r0, sp, #96	; 0x60
    1ed4:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ed6:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1ed8:	2101      	movs	r1, #1
    1eda:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1edc:	6165      	str	r5, [r4, #20]
    1ede:	47b0      	blx	r6
    1ee0:	205f      	movs	r0, #95	; 0x5f
    1ee2:	465b      	mov	r3, fp
    1ee4:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ee6:	61a5      	str	r5, [r4, #24]
    1ee8:	7003      	strb	r3, [r0, #0]
    1eea:	4643      	mov	r3, r8
    1eec:	2101      	movs	r1, #1
    1eee:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ef0:	6165      	str	r5, [r4, #20]
    1ef2:	47b0      	blx	r6
    1ef4:	205e      	movs	r0, #94	; 0x5e
    1ef6:	23a1      	movs	r3, #161	; 0xa1
    1ef8:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1efa:	61a5      	str	r5, [r4, #24]
    1efc:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1efe:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1f00:	2101      	movs	r1, #1
    1f02:	50e7      	str	r7, [r4, r3]
    1f04:	6165      	str	r5, [r4, #20]
    1f06:	47b0      	blx	r6
    1f08:	205d      	movs	r0, #93	; 0x5d
    1f0a:	4653      	mov	r3, sl
    1f0c:	4468      	add	r0, sp
    1f0e:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f10:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1f12:	2101      	movs	r1, #1
    1f14:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f16:	6165      	str	r5, [r4, #20]
    1f18:	47b0      	blx	r6
    1f1a:	23a2      	movs	r3, #162	; 0xa2
    1f1c:	a817      	add	r0, sp, #92	; 0x5c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f1e:	61a5      	str	r5, [r4, #24]
    1f20:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f22:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1f24:	2101      	movs	r1, #1
    1f26:	50e7      	str	r7, [r4, r3]
    1f28:	6165      	str	r5, [r4, #20]
    1f2a:	47b0      	blx	r6
    1f2c:	205b      	movs	r0, #91	; 0x5b
    1f2e:	4653      	mov	r3, sl
    1f30:	4468      	add	r0, sp
    1f32:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f34:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1f36:	2101      	movs	r1, #1
    1f38:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f3a:	6165      	str	r5, [r4, #20]
    1f3c:	47b0      	blx	r6
    1f3e:	205a      	movs	r0, #90	; 0x5a
    1f40:	23b5      	movs	r3, #181	; 0xb5
    1f42:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f44:	61a5      	str	r5, [r4, #24]
    1f46:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f48:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1f4a:	2101      	movs	r1, #1
    1f4c:	50e7      	str	r7, [r4, r3]
    1f4e:	6165      	str	r5, [r4, #20]
    1f50:	47b0      	blx	r6
    1f52:	2059      	movs	r0, #89	; 0x59
    1f54:	4653      	mov	r3, sl
    1f56:	4468      	add	r0, sp
    1f58:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f5a:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1f5c:	2101      	movs	r1, #1
    1f5e:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f60:	6165      	str	r5, [r4, #20]
    1f62:	47b0      	blx	r6
    1f64:	23ab      	movs	r3, #171	; 0xab
    1f66:	a816      	add	r0, sp, #88	; 0x58
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f68:	61a5      	str	r5, [r4, #24]
    1f6a:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f6c:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1f6e:	2101      	movs	r1, #1
    1f70:	50e7      	str	r7, [r4, r3]
    1f72:	6165      	str	r5, [r4, #20]
    1f74:	47b0      	blx	r6
    1f76:	2057      	movs	r0, #87	; 0x57
    1f78:	2301      	movs	r3, #1
    1f7a:	4468      	add	r0, sp
    1f7c:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f7e:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1f80:	2101      	movs	r1, #1
    1f82:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f84:	6165      	str	r5, [r4, #20]
    1f86:	47b0      	blx	r6
    1f88:	2056      	movs	r0, #86	; 0x56
    1f8a:	23b1      	movs	r3, #177	; 0xb1
    1f8c:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f8e:	61a5      	str	r5, [r4, #24]
    1f90:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f92:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1f94:	2101      	movs	r1, #1
    1f96:	50e7      	str	r7, [r4, r3]
    1f98:	6165      	str	r5, [r4, #20]
    1f9a:	47b0      	blx	r6
    1f9c:	2055      	movs	r0, #85	; 0x55
    1f9e:	2332      	movs	r3, #50	; 0x32
    1fa0:	4468      	add	r0, sp
    1fa2:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1fa4:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1fa6:	2101      	movs	r1, #1
    1fa8:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1faa:	6165      	str	r5, [r4, #20]
    1fac:	47b0      	blx	r6
    1fae:	23be      	movs	r3, #190	; 0xbe
    1fb0:	a815      	add	r0, sp, #84	; 0x54
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1fb2:	61a5      	str	r5, [r4, #24]
    1fb4:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1fb6:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1fb8:	2101      	movs	r1, #1
    1fba:	50e7      	str	r7, [r4, r3]
    1fbc:	6165      	str	r5, [r4, #20]
    1fbe:	47b0      	blx	r6
    1fc0:	2053      	movs	r0, #83	; 0x53
    1fc2:	2305      	movs	r3, #5
    1fc4:	4468      	add	r0, sp
    1fc6:	7003      	strb	r3, [r0, #0]
    1fc8:	469b      	mov	fp, r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1fca:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    1fcc:	2101      	movs	r1, #1
    1fce:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1fd0:	6165      	str	r5, [r4, #20]
    1fd2:	47b0      	blx	r6
    1fd4:	2052      	movs	r0, #82	; 0x52
    1fd6:	23a6      	movs	r3, #166	; 0xa6
    1fd8:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1fda:	61a5      	str	r5, [r4, #24]
    1fdc:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1fde:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    1fe0:	2101      	movs	r1, #1
    1fe2:	50e7      	str	r7, [r4, r3]
    1fe4:	6165      	str	r5, [r4, #20]
    1fe6:	47b0      	blx	r6
    1fe8:	2051      	movs	r0, #81	; 0x51
    1fea:	23c1      	movs	r3, #193	; 0xc1
    1fec:	4468      	add	r0, sp
    1fee:	7003      	strb	r3, [r0, #0]
    1ff0:	464b      	mov	r3, r9
    1ff2:	2101      	movs	r1, #1
    1ff4:	50e7      	str	r7, [r4, r3]
    1ff6:	6165      	str	r5, [r4, #20]
    1ff8:	47b0      	blx	r6
    1ffa:	2388      	movs	r3, #136	; 0x88
    1ffc:	a814      	add	r0, sp, #80	; 0x50
    1ffe:	7003      	strb	r3, [r0, #0]
    2000:	469a      	mov	sl, r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2002:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    2004:	2101      	movs	r1, #1
    2006:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2008:	6165      	str	r5, [r4, #20]
    200a:	47b0      	blx	r6
    200c:	204f      	movs	r0, #79	; 0x4f
    200e:	23a0      	movs	r3, #160	; 0xa0
    2010:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2012:	61a5      	str	r5, [r4, #24]
    2014:	7003      	strb	r3, [r0, #0]
    2016:	4643      	mov	r3, r8
    2018:	2101      	movs	r1, #1
    201a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    201c:	6165      	str	r5, [r4, #20]
    201e:	47b0      	blx	r6
    2020:	204e      	movs	r0, #78	; 0x4e
    2022:	4653      	mov	r3, sl
    2024:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2026:	61a5      	str	r5, [r4, #24]
    2028:	7003      	strb	r3, [r0, #0]
    202a:	4643      	mov	r3, r8
    202c:	2101      	movs	r1, #1
    202e:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2030:	6165      	str	r5, [r4, #20]
    2032:	47b0      	blx	r6
    2034:	204d      	movs	r0, #77	; 0x4d
    2036:	23c7      	movs	r3, #199	; 0xc7
    2038:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    203a:	61a5      	str	r5, [r4, #24]
    203c:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    203e:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    2040:	2101      	movs	r1, #1
    2042:	50e7      	str	r7, [r4, r3]
    2044:	6165      	str	r5, [r4, #20]
    2046:	47b0      	blx	r6
    2048:	230f      	movs	r3, #15
    204a:	a813      	add	r0, sp, #76	; 0x4c
    204c:	7003      	strb	r3, [r0, #0]
    204e:	469a      	mov	sl, r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2050:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    2052:	2101      	movs	r1, #1
    2054:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2056:	6165      	str	r5, [r4, #20]
    2058:	47b0      	blx	r6
    205a:	204b      	movs	r0, #75	; 0x4b
    205c:	23b8      	movs	r3, #184	; 0xb8
    205e:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2060:	61a5      	str	r5, [r4, #24]
    2062:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2064:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    2066:	2101      	movs	r1, #1
    2068:	50e7      	str	r7, [r4, r3]
    206a:	6165      	str	r5, [r4, #20]
    206c:	47b0      	blx	r6
    206e:	204a      	movs	r0, #74	; 0x4a
    2070:	2302      	movs	r3, #2
    2072:	4468      	add	r0, sp
    2074:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2076:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    2078:	2101      	movs	r1, #1
    207a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    207c:	6165      	str	r5, [r4, #20]
    207e:	47b0      	blx	r6
    2080:	2049      	movs	r0, #73	; 0x49
    2082:	2303      	movs	r3, #3
    2084:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2086:	61a5      	str	r5, [r4, #24]
    2088:	7003      	strb	r3, [r0, #0]
    208a:	4643      	mov	r3, r8
    208c:	2101      	movs	r1, #1
    208e:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2090:	6165      	str	r5, [r4, #20]
    2092:	47b0      	blx	r6
    2094:	2304      	movs	r3, #4
    2096:	a812      	add	r0, sp, #72	; 0x48
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2098:	61a5      	str	r5, [r4, #24]
    209a:	7003      	strb	r3, [r0, #0]
    209c:	4643      	mov	r3, r8
    209e:	2101      	movs	r1, #1
    20a0:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20a2:	6165      	str	r5, [r4, #20]
    20a4:	47b0      	blx	r6
    20a6:	2047      	movs	r0, #71	; 0x47
    20a8:	465b      	mov	r3, fp
    20aa:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20ac:	61a5      	str	r5, [r4, #24]
    20ae:	7003      	strb	r3, [r0, #0]
    20b0:	4643      	mov	r3, r8
    20b2:	2101      	movs	r1, #1
    20b4:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20b6:	6165      	str	r5, [r4, #20]
    20b8:	47b0      	blx	r6
    20ba:	2046      	movs	r0, #70	; 0x46
    20bc:	2306      	movs	r3, #6
    20be:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20c0:	61a5      	str	r5, [r4, #24]
    20c2:	7003      	strb	r3, [r0, #0]
    20c4:	4643      	mov	r3, r8
    20c6:	2101      	movs	r1, #1
    20c8:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20ca:	6165      	str	r5, [r4, #20]
    20cc:	47b0      	blx	r6
    20ce:	2045      	movs	r0, #69	; 0x45
    20d0:	2307      	movs	r3, #7
    20d2:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20d4:	61a5      	str	r5, [r4, #24]
    20d6:	7003      	strb	r3, [r0, #0]
    20d8:	4643      	mov	r3, r8
    20da:	2101      	movs	r1, #1
    20dc:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20de:	6165      	str	r5, [r4, #20]
    20e0:	47b0      	blx	r6
    20e2:	2308      	movs	r3, #8
    20e4:	a811      	add	r0, sp, #68	; 0x44
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20e6:	61a5      	str	r5, [r4, #24]
    20e8:	7003      	strb	r3, [r0, #0]
    20ea:	4643      	mov	r3, r8
    20ec:	2101      	movs	r1, #1
    20ee:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20f0:	6165      	str	r5, [r4, #20]
    20f2:	47b0      	blx	r6
    20f4:	2043      	movs	r0, #67	; 0x43
    20f6:	2309      	movs	r3, #9
    20f8:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    20fa:	61a5      	str	r5, [r4, #24]
    20fc:	7003      	strb	r3, [r0, #0]
    20fe:	4643      	mov	r3, r8
    2100:	2101      	movs	r1, #1
    2102:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2104:	6165      	str	r5, [r4, #20]
    2106:	47b0      	blx	r6
    2108:	2042      	movs	r0, #66	; 0x42
    210a:	230a      	movs	r3, #10
    210c:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    210e:	61a5      	str	r5, [r4, #24]
    2110:	7003      	strb	r3, [r0, #0]
    2112:	4643      	mov	r3, r8
    2114:	2101      	movs	r1, #1
    2116:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2118:	6165      	str	r5, [r4, #20]
    211a:	47b0      	blx	r6
    211c:	2041      	movs	r0, #65	; 0x41
    211e:	230b      	movs	r3, #11
    2120:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2122:	61a5      	str	r5, [r4, #24]
    2124:	7003      	strb	r3, [r0, #0]
    2126:	4643      	mov	r3, r8
    2128:	2101      	movs	r1, #1
    212a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    212c:	6165      	str	r5, [r4, #20]
    212e:	47b0      	blx	r6
    2130:	230c      	movs	r3, #12
    2132:	a810      	add	r0, sp, #64	; 0x40
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2134:	61a5      	str	r5, [r4, #24]
    2136:	7003      	strb	r3, [r0, #0]
    2138:	4643      	mov	r3, r8
    213a:	2101      	movs	r1, #1
    213c:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    213e:	6165      	str	r5, [r4, #20]
    2140:	47b0      	blx	r6
    2142:	203f      	movs	r0, #63	; 0x3f
    2144:	230d      	movs	r3, #13
    2146:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2148:	61a5      	str	r5, [r4, #24]
    214a:	7003      	strb	r3, [r0, #0]
    214c:	4643      	mov	r3, r8
    214e:	2101      	movs	r1, #1
    2150:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2152:	6165      	str	r5, [r4, #20]
    2154:	47b0      	blx	r6
    2156:	203e      	movs	r0, #62	; 0x3e
    2158:	230e      	movs	r3, #14
    215a:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    215c:	61a5      	str	r5, [r4, #24]
    215e:	7003      	strb	r3, [r0, #0]
    2160:	4643      	mov	r3, r8
    2162:	2101      	movs	r1, #1
    2164:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2166:	6165      	str	r5, [r4, #20]
    2168:	47b0      	blx	r6
    216a:	203d      	movs	r0, #61	; 0x3d
    216c:	4653      	mov	r3, sl
    216e:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2170:	61a5      	str	r5, [r4, #24]
    2172:	7003      	strb	r3, [r0, #0]
    2174:	4643      	mov	r3, r8
    2176:	2101      	movs	r1, #1
    2178:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    217a:	6165      	str	r5, [r4, #20]
    217c:	47b0      	blx	r6
    217e:	2310      	movs	r3, #16
    2180:	a80f      	add	r0, sp, #60	; 0x3c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2182:	61a5      	str	r5, [r4, #24]
    2184:	7003      	strb	r3, [r0, #0]
    2186:	4643      	mov	r3, r8
    2188:	2101      	movs	r1, #1
    218a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    218c:	6165      	str	r5, [r4, #20]
    218e:	47b0      	blx	r6
    2190:	203b      	movs	r0, #59	; 0x3b
    2192:	2311      	movs	r3, #17
    2194:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2196:	61a5      	str	r5, [r4, #24]
    2198:	7003      	strb	r3, [r0, #0]
    219a:	4643      	mov	r3, r8
    219c:	2101      	movs	r1, #1
    219e:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21a0:	6165      	str	r5, [r4, #20]
    21a2:	47b0      	blx	r6
    21a4:	203a      	movs	r0, #58	; 0x3a
    21a6:	2312      	movs	r3, #18
    21a8:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21aa:	61a5      	str	r5, [r4, #24]
    21ac:	7003      	strb	r3, [r0, #0]
    21ae:	4643      	mov	r3, r8
    21b0:	2101      	movs	r1, #1
    21b2:	e001      	b.n	21b8 <STACK_SIZE+0x1b8>
    21b4:	00002fc5 	.word	0x00002fc5
    21b8:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21ba:	6165      	str	r5, [r4, #20]
    21bc:	47b0      	blx	r6
    21be:	2039      	movs	r0, #57	; 0x39
    21c0:	2313      	movs	r3, #19
    21c2:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21c4:	61a5      	str	r5, [r4, #24]
    21c6:	7003      	strb	r3, [r0, #0]
    21c8:	4643      	mov	r3, r8
    21ca:	2101      	movs	r1, #1
    21cc:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21ce:	6165      	str	r5, [r4, #20]
    21d0:	47b0      	blx	r6
    21d2:	2315      	movs	r3, #21
    21d4:	a80e      	add	r0, sp, #56	; 0x38
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21d6:	61a5      	str	r5, [r4, #24]
    21d8:	7003      	strb	r3, [r0, #0]
    21da:	4643      	mov	r3, r8
    21dc:	2101      	movs	r1, #1
    21de:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21e0:	6165      	str	r5, [r4, #20]
    21e2:	47b0      	blx	r6
    21e4:	2037      	movs	r0, #55	; 0x37
    21e6:	2317      	movs	r3, #23
    21e8:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21ea:	61a5      	str	r5, [r4, #24]
    21ec:	7003      	strb	r3, [r0, #0]
    21ee:	4643      	mov	r3, r8
    21f0:	2101      	movs	r1, #1
    21f2:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    21f4:	6165      	str	r5, [r4, #20]
    21f6:	47b0      	blx	r6
    21f8:	2036      	movs	r0, #54	; 0x36
    21fa:	2319      	movs	r3, #25
    21fc:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    21fe:	61a5      	str	r5, [r4, #24]
    2200:	7003      	strb	r3, [r0, #0]
    2202:	4643      	mov	r3, r8
    2204:	2101      	movs	r1, #1
    2206:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2208:	6165      	str	r5, [r4, #20]
    220a:	47b0      	blx	r6
    220c:	2035      	movs	r0, #53	; 0x35
    220e:	231b      	movs	r3, #27
    2210:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2212:	61a5      	str	r5, [r4, #24]
    2214:	7003      	strb	r3, [r0, #0]
    2216:	4643      	mov	r3, r8
    2218:	2101      	movs	r1, #1
    221a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    221c:	6165      	str	r5, [r4, #20]
    221e:	47b0      	blx	r6
    2220:	231d      	movs	r3, #29
    2222:	a80d      	add	r0, sp, #52	; 0x34
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2224:	61a5      	str	r5, [r4, #24]
    2226:	7003      	strb	r3, [r0, #0]
    2228:	4643      	mov	r3, r8
    222a:	2101      	movs	r1, #1
    222c:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    222e:	6165      	str	r5, [r4, #20]
    2230:	47b0      	blx	r6
    2232:	2033      	movs	r0, #51	; 0x33
    2234:	231f      	movs	r3, #31
    2236:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2238:	61a5      	str	r5, [r4, #24]
    223a:	7003      	strb	r3, [r0, #0]
    223c:	4643      	mov	r3, r8
    223e:	2101      	movs	r1, #1
    2240:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2242:	6165      	str	r5, [r4, #20]
    2244:	47b0      	blx	r6
    2246:	2032      	movs	r0, #50	; 0x32
    2248:	2321      	movs	r3, #33	; 0x21
    224a:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    224c:	61a5      	str	r5, [r4, #24]
    224e:	7003      	strb	r3, [r0, #0]
    2250:	4643      	mov	r3, r8
    2252:	2101      	movs	r1, #1
    2254:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2256:	6165      	str	r5, [r4, #20]
    2258:	47b0      	blx	r6
    225a:	2031      	movs	r0, #49	; 0x31
    225c:	2323      	movs	r3, #35	; 0x23
    225e:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2260:	61a5      	str	r5, [r4, #24]
    2262:	7003      	strb	r3, [r0, #0]
    2264:	4643      	mov	r3, r8
    2266:	2101      	movs	r1, #1
    2268:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    226a:	6165      	str	r5, [r4, #20]
    226c:	47b0      	blx	r6
    226e:	2325      	movs	r3, #37	; 0x25
    2270:	a80c      	add	r0, sp, #48	; 0x30
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2272:	61a5      	str	r5, [r4, #24]
    2274:	7003      	strb	r3, [r0, #0]
    2276:	4643      	mov	r3, r8
    2278:	2101      	movs	r1, #1
    227a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    227c:	6165      	str	r5, [r4, #20]
    227e:	47b0      	blx	r6
    2280:	202f      	movs	r0, #47	; 0x2f
    2282:	2327      	movs	r3, #39	; 0x27
    2284:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2286:	61a5      	str	r5, [r4, #24]
    2288:	7003      	strb	r3, [r0, #0]
    228a:	4643      	mov	r3, r8
    228c:	2101      	movs	r1, #1
    228e:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2290:	6165      	str	r5, [r4, #20]
    2292:	47b0      	blx	r6
    2294:	202e      	movs	r0, #46	; 0x2e
    2296:	232a      	movs	r3, #42	; 0x2a
    2298:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    229a:	61a5      	str	r5, [r4, #24]
    229c:	7003      	strb	r3, [r0, #0]
    229e:	4643      	mov	r3, r8
    22a0:	2101      	movs	r1, #1
    22a2:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22a4:	6165      	str	r5, [r4, #20]
    22a6:	47b0      	blx	r6
    22a8:	202d      	movs	r0, #45	; 0x2d
    22aa:	232d      	movs	r3, #45	; 0x2d
    22ac:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22ae:	61a5      	str	r5, [r4, #24]
    22b0:	7003      	strb	r3, [r0, #0]
    22b2:	4643      	mov	r3, r8
    22b4:	2101      	movs	r1, #1
    22b6:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22b8:	6165      	str	r5, [r4, #20]
    22ba:	47b0      	blx	r6
    22bc:	2330      	movs	r3, #48	; 0x30
    22be:	a80b      	add	r0, sp, #44	; 0x2c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22c0:	61a5      	str	r5, [r4, #24]
    22c2:	7003      	strb	r3, [r0, #0]
    22c4:	4643      	mov	r3, r8
    22c6:	2101      	movs	r1, #1
    22c8:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22ca:	6165      	str	r5, [r4, #20]
    22cc:	47b0      	blx	r6
    22ce:	202b      	movs	r0, #43	; 0x2b
    22d0:	2333      	movs	r3, #51	; 0x33
    22d2:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22d4:	61a5      	str	r5, [r4, #24]
    22d6:	7003      	strb	r3, [r0, #0]
    22d8:	4643      	mov	r3, r8
    22da:	2101      	movs	r1, #1
    22dc:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22de:	6165      	str	r5, [r4, #20]
    22e0:	47b0      	blx	r6
    22e2:	202a      	movs	r0, #42	; 0x2a
    22e4:	2336      	movs	r3, #54	; 0x36
    22e6:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22e8:	61a5      	str	r5, [r4, #24]
    22ea:	7003      	strb	r3, [r0, #0]
    22ec:	4643      	mov	r3, r8
    22ee:	2101      	movs	r1, #1
    22f0:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    22f2:	6165      	str	r5, [r4, #20]
    22f4:	47b0      	blx	r6
    22f6:	2029      	movs	r0, #41	; 0x29
    22f8:	2339      	movs	r3, #57	; 0x39
    22fa:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    22fc:	61a5      	str	r5, [r4, #24]
    22fe:	7003      	strb	r3, [r0, #0]
    2300:	4643      	mov	r3, r8
    2302:	2101      	movs	r1, #1
    2304:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2306:	6165      	str	r5, [r4, #20]
    2308:	47b0      	blx	r6
    230a:	233c      	movs	r3, #60	; 0x3c
    230c:	a80a      	add	r0, sp, #40	; 0x28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    230e:	61a5      	str	r5, [r4, #24]
    2310:	7003      	strb	r3, [r0, #0]
    2312:	4643      	mov	r3, r8
    2314:	2101      	movs	r1, #1
    2316:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2318:	6165      	str	r5, [r4, #20]
    231a:	47b0      	blx	r6
    231c:	2027      	movs	r0, #39	; 0x27
    231e:	233f      	movs	r3, #63	; 0x3f
    2320:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2322:	61a5      	str	r5, [r4, #24]
    2324:	7003      	strb	r3, [r0, #0]
    2326:	4643      	mov	r3, r8
    2328:	2101      	movs	r1, #1
    232a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    232c:	6165      	str	r5, [r4, #20]
    232e:	47b0      	blx	r6
    2330:	2026      	movs	r0, #38	; 0x26
    2332:	2342      	movs	r3, #66	; 0x42
    2334:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2336:	61a5      	str	r5, [r4, #24]
    2338:	7003      	strb	r3, [r0, #0]
    233a:	4643      	mov	r3, r8
    233c:	2101      	movs	r1, #1
    233e:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2340:	6165      	str	r5, [r4, #20]
    2342:	47b0      	blx	r6
    2344:	2025      	movs	r0, #37	; 0x25
    2346:	2345      	movs	r3, #69	; 0x45
    2348:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    234a:	61a5      	str	r5, [r4, #24]
    234c:	7003      	strb	r3, [r0, #0]
    234e:	4643      	mov	r3, r8
    2350:	2101      	movs	r1, #1
    2352:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2354:	6165      	str	r5, [r4, #20]
    2356:	47b0      	blx	r6
    2358:	2348      	movs	r3, #72	; 0x48
    235a:	a809      	add	r0, sp, #36	; 0x24
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    235c:	61a5      	str	r5, [r4, #24]
    235e:	7003      	strb	r3, [r0, #0]
    2360:	4643      	mov	r3, r8
    2362:	2101      	movs	r1, #1
    2364:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2366:	6165      	str	r5, [r4, #20]
    2368:	47b0      	blx	r6
    236a:	2023      	movs	r0, #35	; 0x23
    236c:	234c      	movs	r3, #76	; 0x4c
    236e:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2370:	61a5      	str	r5, [r4, #24]
    2372:	7003      	strb	r3, [r0, #0]
    2374:	4643      	mov	r3, r8
    2376:	2101      	movs	r1, #1
    2378:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    237a:	6165      	str	r5, [r4, #20]
    237c:	47b0      	blx	r6
    237e:	2022      	movs	r0, #34	; 0x22
    2380:	2350      	movs	r3, #80	; 0x50
    2382:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2384:	61a5      	str	r5, [r4, #24]
    2386:	7003      	strb	r3, [r0, #0]
    2388:	4643      	mov	r3, r8
    238a:	2101      	movs	r1, #1
    238c:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    238e:	6165      	str	r5, [r4, #20]
    2390:	47b0      	blx	r6
    2392:	2021      	movs	r0, #33	; 0x21
    2394:	2354      	movs	r3, #84	; 0x54
    2396:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2398:	61a5      	str	r5, [r4, #24]
    239a:	7003      	strb	r3, [r0, #0]
    239c:	4643      	mov	r3, r8
    239e:	2101      	movs	r1, #1
    23a0:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23a2:	6165      	str	r5, [r4, #20]
    23a4:	47b0      	blx	r6
    23a6:	2358      	movs	r3, #88	; 0x58
    23a8:	a808      	add	r0, sp, #32
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23aa:	61a5      	str	r5, [r4, #24]
    23ac:	7003      	strb	r3, [r0, #0]
    23ae:	4643      	mov	r3, r8
    23b0:	2101      	movs	r1, #1
    23b2:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23b4:	6165      	str	r5, [r4, #20]
    23b6:	47b0      	blx	r6
    23b8:	201f      	movs	r0, #31
    23ba:	235c      	movs	r3, #92	; 0x5c
    23bc:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23be:	61a5      	str	r5, [r4, #24]
    23c0:	7003      	strb	r3, [r0, #0]
    23c2:	4643      	mov	r3, r8
    23c4:	2101      	movs	r1, #1
    23c6:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23c8:	6165      	str	r5, [r4, #20]
    23ca:	47b0      	blx	r6
    23cc:	201e      	movs	r0, #30
    23ce:	2360      	movs	r3, #96	; 0x60
    23d0:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23d2:	61a5      	str	r5, [r4, #24]
    23d4:	7003      	strb	r3, [r0, #0]
    23d6:	4643      	mov	r3, r8
    23d8:	2101      	movs	r1, #1
    23da:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23dc:	6165      	str	r5, [r4, #20]
    23de:	47b0      	blx	r6
    23e0:	201d      	movs	r0, #29
    23e2:	2364      	movs	r3, #100	; 0x64
    23e4:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23e6:	61a5      	str	r5, [r4, #24]
    23e8:	7003      	strb	r3, [r0, #0]
    23ea:	4643      	mov	r3, r8
    23ec:	2101      	movs	r1, #1
    23ee:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    23f0:	6165      	str	r5, [r4, #20]
    23f2:	47b0      	blx	r6
    23f4:	2368      	movs	r3, #104	; 0x68
    23f6:	a807      	add	r0, sp, #28
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    23f8:	61a5      	str	r5, [r4, #24]
    23fa:	7003      	strb	r3, [r0, #0]
    23fc:	4643      	mov	r3, r8
    23fe:	2101      	movs	r1, #1
    2400:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2402:	6165      	str	r5, [r4, #20]
    2404:	47b0      	blx	r6
    2406:	201b      	movs	r0, #27
    2408:	236c      	movs	r3, #108	; 0x6c
    240a:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    240c:	61a5      	str	r5, [r4, #24]
    240e:	7003      	strb	r3, [r0, #0]
    2410:	4643      	mov	r3, r8
    2412:	2101      	movs	r1, #1
    2414:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2416:	6165      	str	r5, [r4, #20]
    2418:	47b0      	blx	r6
    241a:	201a      	movs	r0, #26
    241c:	2370      	movs	r3, #112	; 0x70
    241e:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2420:	61a5      	str	r5, [r4, #24]
    2422:	7003      	strb	r3, [r0, #0]
    2424:	4643      	mov	r3, r8
    2426:	2101      	movs	r1, #1
    2428:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    242a:	6165      	str	r5, [r4, #20]
    242c:	47b0      	blx	r6
    242e:	2019      	movs	r0, #25
    2430:	2374      	movs	r3, #116	; 0x74
    2432:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2434:	61a5      	str	r5, [r4, #24]
    2436:	7003      	strb	r3, [r0, #0]
    2438:	4643      	mov	r3, r8
    243a:	2101      	movs	r1, #1
    243c:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    243e:	6165      	str	r5, [r4, #20]
    2440:	47b0      	blx	r6
    2442:	2378      	movs	r3, #120	; 0x78
    2444:	a806      	add	r0, sp, #24
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2446:	61a5      	str	r5, [r4, #24]
    2448:	7003      	strb	r3, [r0, #0]
    244a:	4643      	mov	r3, r8
    244c:	2101      	movs	r1, #1
    244e:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2450:	6165      	str	r5, [r4, #20]
    2452:	47b0      	blx	r6
    2454:	2017      	movs	r0, #23
    2456:	237d      	movs	r3, #125	; 0x7d
    2458:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    245a:	61a5      	str	r5, [r4, #24]
    245c:	7003      	strb	r3, [r0, #0]
    245e:	4643      	mov	r3, r8
    2460:	2101      	movs	r1, #1
    2462:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2464:	6165      	str	r5, [r4, #20]
    2466:	47b0      	blx	r6
    2468:	2016      	movs	r0, #22
    246a:	2382      	movs	r3, #130	; 0x82
    246c:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    246e:	61a5      	str	r5, [r4, #24]
    2470:	7003      	strb	r3, [r0, #0]
    2472:	4643      	mov	r3, r8
    2474:	2101      	movs	r1, #1
    2476:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2478:	6165      	str	r5, [r4, #20]
    247a:	47b0      	blx	r6
    247c:	2015      	movs	r0, #21
    247e:	2387      	movs	r3, #135	; 0x87
    2480:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2482:	61a5      	str	r5, [r4, #24]
    2484:	7003      	strb	r3, [r0, #0]
    2486:	4643      	mov	r3, r8
    2488:	2101      	movs	r1, #1
    248a:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    248c:	6165      	str	r5, [r4, #20]
    248e:	47b0      	blx	r6
    2490:	238c      	movs	r3, #140	; 0x8c
    2492:	a805      	add	r0, sp, #20
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2494:	61a5      	str	r5, [r4, #24]
    2496:	7003      	strb	r3, [r0, #0]
    2498:	4643      	mov	r3, r8
    249a:	2101      	movs	r1, #1
    249c:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    249e:	6165      	str	r5, [r4, #20]
    24a0:	47b0      	blx	r6
    24a2:	2013      	movs	r0, #19
    24a4:	2391      	movs	r3, #145	; 0x91
    24a6:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24a8:	61a5      	str	r5, [r4, #24]
    24aa:	7003      	strb	r3, [r0, #0]
    24ac:	4643      	mov	r3, r8
    24ae:	2101      	movs	r1, #1
    24b0:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24b2:	6165      	str	r5, [r4, #20]
    24b4:	47b0      	blx	r6
    24b6:	2012      	movs	r0, #18
    24b8:	2396      	movs	r3, #150	; 0x96
    24ba:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24bc:	61a5      	str	r5, [r4, #24]
    24be:	7003      	strb	r3, [r0, #0]
    24c0:	4643      	mov	r3, r8
    24c2:	2101      	movs	r1, #1
    24c4:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24c6:	6165      	str	r5, [r4, #20]
    24c8:	47b0      	blx	r6
    24ca:	2011      	movs	r0, #17
    24cc:	239b      	movs	r3, #155	; 0x9b
    24ce:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24d0:	61a5      	str	r5, [r4, #24]
    24d2:	7003      	strb	r3, [r0, #0]
    24d4:	4643      	mov	r3, r8
    24d6:	2101      	movs	r1, #1
    24d8:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24da:	6165      	str	r5, [r4, #20]
    24dc:	47b0      	blx	r6
    24de:	23a0      	movs	r3, #160	; 0xa0
    24e0:	a804      	add	r0, sp, #16
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24e2:	61a5      	str	r5, [r4, #24]
    24e4:	7003      	strb	r3, [r0, #0]
    24e6:	4643      	mov	r3, r8
    24e8:	2101      	movs	r1, #1
    24ea:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    24ec:	6165      	str	r5, [r4, #20]
    24ee:	47b0      	blx	r6
    24f0:	200f      	movs	r0, #15
    24f2:	23a5      	movs	r3, #165	; 0xa5
    24f4:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    24f6:	61a5      	str	r5, [r4, #24]
    24f8:	7003      	strb	r3, [r0, #0]
    24fa:	4643      	mov	r3, r8
    24fc:	2101      	movs	r1, #1
    24fe:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2500:	6165      	str	r5, [r4, #20]
    2502:	47b0      	blx	r6
    2504:	200e      	movs	r0, #14
    2506:	23aa      	movs	r3, #170	; 0xaa
    2508:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    250a:	61a5      	str	r5, [r4, #24]
    250c:	7003      	strb	r3, [r0, #0]
    250e:	4643      	mov	r3, r8
    2510:	2101      	movs	r1, #1
    2512:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2514:	6165      	str	r5, [r4, #20]
    2516:	47b0      	blx	r6
    2518:	200d      	movs	r0, #13
    251a:	23af      	movs	r3, #175	; 0xaf
    251c:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    251e:	61a5      	str	r5, [r4, #24]
    2520:	469a      	mov	sl, r3
    2522:	7003      	strb	r3, [r0, #0]
    2524:	4643      	mov	r3, r8
    2526:	2101      	movs	r1, #1
    2528:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    252a:	6165      	str	r5, [r4, #20]
    252c:	47b0      	blx	r6
    252e:	23b4      	movs	r3, #180	; 0xb4
    2530:	a803      	add	r0, sp, #12
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2532:	61a5      	str	r5, [r4, #24]
    2534:	469b      	mov	fp, r3
    2536:	7003      	strb	r3, [r0, #0]
    2538:	4643      	mov	r3, r8
    253a:	2101      	movs	r1, #1
    253c:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    253e:	6165      	str	r5, [r4, #20]
    2540:	47b0      	blx	r6
    2542:	200b      	movs	r0, #11
    2544:	465b      	mov	r3, fp
    2546:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2548:	61a5      	str	r5, [r4, #24]
    254a:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    254c:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    254e:	2101      	movs	r1, #1
    2550:	50e7      	str	r7, [r4, r3]
    2552:	6165      	str	r5, [r4, #20]
    2554:	47b0      	blx	r6
    2556:	200a      	movs	r0, #10
    2558:	23a0      	movs	r3, #160	; 0xa0
    255a:	4468      	add	r0, sp
    255c:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    255e:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    2560:	2101      	movs	r1, #1
    2562:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2564:	6165      	str	r5, [r4, #20]
    2566:	47b0      	blx	r6
    2568:	2009      	movs	r0, #9
    256a:	23b5      	movs	r3, #181	; 0xb5
    256c:	4468      	add	r0, sp
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    256e:	61a5      	str	r5, [r4, #24]
    2570:	7003      	strb	r3, [r0, #0]
    2572:	4643      	mov	r3, r8
    2574:	2101      	movs	r1, #1
    2576:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2578:	6165      	str	r5, [r4, #20]
    257a:	47b0      	blx	r6
    257c:	2355      	movs	r3, #85	; 0x55
    257e:	a802      	add	r0, sp, #8
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2580:	61a5      	str	r5, [r4, #24]
    2582:	7003      	strb	r3, [r0, #0]
    2584:	4643      	mov	r3, r8
    2586:	2101      	movs	r1, #1
    2588:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    258a:	6165      	str	r5, [r4, #20]
    258c:	47b0      	blx	r6
    258e:	466b      	mov	r3, sp
    2590:	1dd8      	adds	r0, r3, #7
    2592:	23b6      	movs	r3, #182	; 0xb6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2594:	61a5      	str	r5, [r4, #24]
    2596:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2598:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    259a:	2101      	movs	r1, #1
    259c:	50e7      	str	r7, [r4, r3]
    259e:	6165      	str	r5, [r4, #20]
    25a0:	47b0      	blx	r6
    25a2:	466b      	mov	r3, sp
    25a4:	1d98      	adds	r0, r3, #6
    25a6:	2301      	movs	r3, #1
    25a8:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25aa:	4643      	mov	r3, r8
    EXT_SPI_WriteBuff(&Data, 1);
    25ac:	2101      	movs	r1, #1
    25ae:	50e7      	str	r7, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25b0:	6165      	str	r5, [r4, #20]
    25b2:	47b0      	blx	r6
    25b4:	466b      	mov	r3, sp
    25b6:	1d58      	adds	r0, r3, #5
    25b8:	4653      	mov	r3, sl
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25ba:	61a5      	str	r5, [r4, #24]
    25bc:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25be:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Reg, 1);
    25c0:	2101      	movs	r1, #1
    25c2:	50e7      	str	r7, [r4, r3]
    25c4:	6165      	str	r5, [r4, #20]
    25c6:	47b0      	blx	r6

   OLED_WriteReg(0xb6);                               //Set Second Pre-charge period
   OLED_WriteData(0x01);

   OLED_WriteReg(0xaf);
}
    25c8:	b01d      	add	sp, #116	; 0x74
    25ca:	bc3c      	pop	{r2, r3, r4, r5}
    25cc:	4690      	mov	r8, r2
    25ce:	4699      	mov	r9, r3
    25d0:	46a2      	mov	sl, r4
    25d2:	46ab      	mov	fp, r5
    25d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25d6:	46c0      	nop			; (mov r8, r8)

000025d8 <OLED_1in5_rgb_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_rgb_Init(void)
{
    25d8:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25da:	24c0      	movs	r4, #192	; 0xc0
    25dc:	2680      	movs	r6, #128	; 0x80
    25de:	05e4      	lsls	r4, r4, #23
    25e0:	0336      	lsls	r6, r6, #12
    25e2:	b082      	sub	sp, #8
    delay_ms(100);
    25e4:	4d0e      	ldr	r5, [pc, #56]	; (2620 <OLED_1in5_rgb_Init+0x48>)
    25e6:	61a6      	str	r6, [r4, #24]
    25e8:	2064      	movs	r0, #100	; 0x64
    25ea:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    25ec:	6166      	str	r6, [r4, #20]
    delay_ms(100);
    25ee:	2064      	movs	r0, #100	; 0x64
    25f0:	47a8      	blx	r5
    delay_ms(100);
    25f2:	2064      	movs	r0, #100	; 0x64
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    25f4:	61a6      	str	r6, [r4, #24]
    25f6:	47a8      	blx	r5
    //Hardware reset
    OLED_Reset();

    //Set the initialization register
    OLED_InitReg();
    25f8:	4b0a      	ldr	r3, [pc, #40]	; (2624 <OLED_1in5_rgb_Init+0x4c>)
    25fa:	4798      	blx	r3
    delay_ms(200);
    25fc:	20c8      	movs	r0, #200	; 0xc8
    25fe:	47a8      	blx	r5
    2600:	466b      	mov	r3, sp
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2602:	2280      	movs	r2, #128	; 0x80
    2604:	1dd8      	adds	r0, r3, #7
    2606:	23af      	movs	r3, #175	; 0xaf
    2608:	0252      	lsls	r2, r2, #9
    260a:	7003      	strb	r3, [r0, #0]
    260c:	3b1b      	subs	r3, #27
    260e:	50e2      	str	r2, [r4, r3]
    2610:	2380      	movs	r3, #128	; 0x80
    2612:	021b      	lsls	r3, r3, #8
    2614:	6163      	str	r3, [r4, #20]
    EXT_SPI_WriteBuff(&Reg, 1);
    2616:	2101      	movs	r1, #1
    2618:	4b03      	ldr	r3, [pc, #12]	; (2628 <OLED_1in5_rgb_Init+0x50>)
    261a:	4798      	blx	r3

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
}
    261c:	b002      	add	sp, #8
    261e:	bd70      	pop	{r4, r5, r6, pc}
    2620:	000001c9 	.word	0x000001c9
    2624:	00001d95 	.word	0x00001d95
    2628:	00002fc5 	.word	0x00002fc5

0000262c <OLED_1in5_rgb_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_rgb_Clear(uint16_t Color)
{
    262c:	b5f0      	push	{r4, r5, r6, r7, lr}
    262e:	46de      	mov	lr, fp
    2630:	4657      	mov	r7, sl
    2632:	464e      	mov	r6, r9
    2634:	4645      	mov	r5, r8
    2636:	b5e0      	push	{r5, r6, r7, lr}
    2638:	b0c3      	sub	sp, #268	; 0x10c
    263a:	466b      	mov	r3, sp
    263c:	4680      	mov	r8, r0
    263e:	25c0      	movs	r5, #192	; 0xc0
    2640:	1dd8      	adds	r0, r3, #7
    2642:	2780      	movs	r7, #128	; 0x80
    2644:	2315      	movs	r3, #21
    2646:	2680      	movs	r6, #128	; 0x80
    2648:	05ed      	lsls	r5, r5, #23
    264a:	0236      	lsls	r6, r6, #8
    264c:	027f      	lsls	r7, r7, #9
    264e:	7003      	strb	r3, [r0, #0]
    2650:	337f      	adds	r3, #127	; 0x7f
    EXT_SPI_WriteBuff(&Reg, 1);
    2652:	4c37      	ldr	r4, [pc, #220]	; (2730 <OLED_1in5_rgb_Clear+0x104>)
    2654:	50ef      	str	r7, [r5, r3]
    2656:	2101      	movs	r1, #1
    2658:	616e      	str	r6, [r5, #20]
    265a:	469a      	mov	sl, r3
    265c:	47a0      	blx	r4
    265e:	466b      	mov	r3, sp
    2660:	1d98      	adds	r0, r3, #6
    2662:	2300      	movs	r3, #0
    2664:	7003      	strb	r3, [r0, #0]
    2666:	469b      	mov	fp, r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2668:	2398      	movs	r3, #152	; 0x98
    EXT_SPI_WriteBuff(&Data, 1);
    266a:	2101      	movs	r1, #1
    266c:	50ef      	str	r7, [r5, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    266e:	616e      	str	r6, [r5, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2670:	4699      	mov	r9, r3
    2672:	47a0      	blx	r4
    2674:	466b      	mov	r3, sp
    2676:	1d58      	adds	r0, r3, #5
    2678:	237f      	movs	r3, #127	; 0x7f
    267a:	61ae      	str	r6, [r5, #24]
    267c:	7003      	strb	r3, [r0, #0]
    267e:	464b      	mov	r3, r9
    2680:	2101      	movs	r1, #1
    2682:	50ef      	str	r7, [r5, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2684:	616e      	str	r6, [r5, #20]
    2686:	47a0      	blx	r4
    2688:	2375      	movs	r3, #117	; 0x75
    268a:	a801      	add	r0, sp, #4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    268c:	61ae      	str	r6, [r5, #24]
    268e:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2690:	4653      	mov	r3, sl
    EXT_SPI_WriteBuff(&Reg, 1);
    2692:	2101      	movs	r1, #1
    2694:	50ef      	str	r7, [r5, r3]
    2696:	616e      	str	r6, [r5, #20]
    2698:	47a0      	blx	r4
    269a:	466b      	mov	r3, sp
    269c:	1cd8      	adds	r0, r3, #3
    269e:	465b      	mov	r3, fp
    26a0:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    26a2:	464b      	mov	r3, r9
    EXT_SPI_WriteBuff(&Data, 1);
    26a4:	2101      	movs	r1, #1
    26a6:	50ef      	str	r7, [r5, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    26a8:	616e      	str	r6, [r5, #20]
    26aa:	47a0      	blx	r4
    26ac:	466b      	mov	r3, sp
    26ae:	1c98      	adds	r0, r3, #2
    26b0:	237f      	movs	r3, #127	; 0x7f
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    26b2:	61ae      	str	r6, [r5, #24]
    26b4:	7003      	strb	r3, [r0, #0]
    26b6:	464b      	mov	r3, r9
    26b8:	2101      	movs	r1, #1
    26ba:	50ef      	str	r7, [r5, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    26bc:	616e      	str	r6, [r5, #20]
    26be:	47a0      	blx	r4
    26c0:	466b      	mov	r3, sp
    26c2:	1c58      	adds	r0, r3, #1
    26c4:	235c      	movs	r3, #92	; 0x5c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    26c6:	61ae      	str	r6, [r5, #24]
    26c8:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    26ca:	4653      	mov	r3, sl
    EXT_SPI_WriteBuff(&Reg, 1);
    26cc:	2101      	movs	r1, #1
    26ce:	50ef      	str	r7, [r5, r3]
    26d0:	616e      	str	r6, [r5, #20]
    26d2:	47a0      	blx	r4
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    26d4:	464b      	mov	r3, r9
    26d6:	50ef      	str	r7, [r5, r3]
	OLED_CS_1;
	
}

uint16_t convertColor(uint16_t color) {
	uint8_t blue = (color & 0x001F) >> 1;  // b4..b1 (?????? 4 ????)
    26d8:	4643      	mov	r3, r8
	uint8_t red = (color & 0xF800) >> 12; // r4..r1 (?????? 4 ????)
	uint8_t green = (color & 0x07E0) >> 7; // g5..g2 (?????? 4 ????)
    26da:	4641      	mov	r1, r8
	uint8_t blue = (color & 0x001F) >> 1;  // b4..b1 (?????? 4 ????)
    26dc:	105a      	asrs	r2, r3, #1
    26de:	230f      	movs	r3, #15
	uint8_t green = (color & 0x07E0) >> 7; // g5..g2 (?????? 4 ????)
    26e0:	11c9      	asrs	r1, r1, #7
	uint16_t newColor = (blue << 12) | (red << 8) | (green << 4);
    26e2:	401a      	ands	r2, r3
    26e4:	400b      	ands	r3, r1
    26e6:	011b      	lsls	r3, r3, #4
    26e8:	0312      	lsls	r2, r2, #12
    26ea:	431a      	orrs	r2, r3
    26ec:	4643      	mov	r3, r8
    26ee:	0b1b      	lsrs	r3, r3, #12
    26f0:	021b      	lsls	r3, r3, #8
    26f2:	4313      	orrs	r3, r2
    26f4:	041a      	lsls	r2, r3, #16
    26f6:	431a      	orrs	r2, r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    26f8:	616e      	str	r6, [r5, #20]
    26fa:	ab02      	add	r3, sp, #8
    26fc:	a942      	add	r1, sp, #264	; 0x108
	    tmpData[i] = Color;
    26fe:	c304      	stmia	r3!, {r2}
    2700:	428b      	cmp	r3, r1
    2702:	d1fc      	bne.n	26fe <OLED_1in5_rgb_Clear+0xd2>
    2704:	2580      	movs	r5, #128	; 0x80
	    EXT_SPI_WriteBuff((uint8_t*)tmpData, OLED_1in5_RGB_HEIGHT * 2);
    2706:	2180      	movs	r1, #128	; 0x80
    2708:	3d01      	subs	r5, #1
    270a:	0049      	lsls	r1, r1, #1
    270c:	a802      	add	r0, sp, #8
    270e:	b2ad      	uxth	r5, r5
    2710:	47a0      	blx	r4
    for (i = 0; i < OLED_1in5_RGB_WIDTH; i++) {
    2712:	2d00      	cmp	r5, #0
    2714:	d1f7      	bne.n	2706 <OLED_1in5_rgb_Clear+0xda>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2716:	2280      	movs	r2, #128	; 0x80
    2718:	23c0      	movs	r3, #192	; 0xc0
    271a:	0212      	lsls	r2, r2, #8
    271c:	05db      	lsls	r3, r3, #23
    271e:	619a      	str	r2, [r3, #24]
}
    2720:	b043      	add	sp, #268	; 0x10c
    2722:	bc3c      	pop	{r2, r3, r4, r5}
    2724:	4690      	mov	r8, r2
    2726:	4699      	mov	r9, r3
    2728:	46a2      	mov	sl, r4
    272a:	46ab      	mov	fp, r5
    272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    272e:	46c0      	nop			; (mov r8, r8)
    2730:	00002fc5 	.word	0x00002fc5

00002734 <OLED_1in5_DrawPaint>:
{
    2734:	b5f0      	push	{r4, r5, r6, r7, lr}
    2736:	46de      	mov	lr, fp
    2738:	4657      	mov	r7, sl
    273a:	464e      	mov	r6, r9
    273c:	4645      	mov	r5, r8
    273e:	b5e0      	push	{r5, r6, r7, lr}
    2740:	b085      	sub	sp, #20
    2742:	ab02      	add	r3, sp, #8
    2744:	4681      	mov	r9, r0
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2746:	24c0      	movs	r4, #192	; 0xc0
    2748:	1c98      	adds	r0, r3, #2
    274a:	2680      	movs	r6, #128	; 0x80
    274c:	2315      	movs	r3, #21
    274e:	2580      	movs	r5, #128	; 0x80
    2750:	05e4      	lsls	r4, r4, #23
    2752:	022d      	lsls	r5, r5, #8
    2754:	0276      	lsls	r6, r6, #9
    2756:	7003      	strb	r3, [r0, #0]
    2758:	337f      	adds	r3, #127	; 0x7f
    EXT_SPI_WriteBuff(&Reg, 1);
    275a:	4f2f      	ldr	r7, [pc, #188]	; (2818 <OLED_1in5_DrawPaint+0xe4>)
{
    275c:	9200      	str	r2, [sp, #0]
    275e:	4688      	mov	r8, r1
    2760:	50e6      	str	r6, [r4, r3]
    EXT_SPI_WriteBuff(&Reg, 1);
    2762:	2101      	movs	r1, #1
    2764:	6165      	str	r5, [r4, #20]
    2766:	469b      	mov	fp, r3
    2768:	47b8      	blx	r7
	OLED_WriteData(Xstart);
    276a:	466a      	mov	r2, sp
    276c:	464b      	mov	r3, r9
    276e:	71d3      	strb	r3, [r2, #7]
    2770:	79d3      	ldrb	r3, [r2, #7]
    EXT_SPI_WriteBuff(&Data, 1);
    2772:	2101      	movs	r1, #1
	OLED_WriteData(Xstart);
    2774:	4699      	mov	r9, r3
    2776:	ab02      	add	r3, sp, #8
    2778:	1cd8      	adds	r0, r3, #3
    277a:	464b      	mov	r3, r9
    277c:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    277e:	2398      	movs	r3, #152	; 0x98
    2780:	50e6      	str	r6, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2782:	6165      	str	r5, [r4, #20]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2784:	469a      	mov	sl, r3
    EXT_SPI_WriteBuff(&Data, 1);
    2786:	47b8      	blx	r7
	OLED_WriteData(Xend-1);
    2788:	464b      	mov	r3, r9
    278a:	a803      	add	r0, sp, #12
    278c:	3b01      	subs	r3, #1
    278e:	61a5      	str	r5, [r4, #24]
    2790:	7003      	strb	r3, [r0, #0]
    2792:	4653      	mov	r3, sl
    EXT_SPI_WriteBuff(&Data, 1);
    2794:	2101      	movs	r1, #1
    2796:	50e6      	str	r6, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2798:	6165      	str	r5, [r4, #20]
    279a:	47b8      	blx	r7
    279c:	ab02      	add	r3, sp, #8
    279e:	1d58      	adds	r0, r3, #5
    27a0:	2375      	movs	r3, #117	; 0x75
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27a2:	61a5      	str	r5, [r4, #24]
    27a4:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27a6:	465b      	mov	r3, fp
    EXT_SPI_WriteBuff(&Reg, 1);
    27a8:	2101      	movs	r1, #1
    27aa:	50e6      	str	r6, [r4, r3]
    27ac:	6165      	str	r5, [r4, #20]
    27ae:	47b8      	blx	r7
	OLED_WriteData(Ystart);
    27b0:	466a      	mov	r2, sp
    27b2:	4643      	mov	r3, r8
    27b4:	71d3      	strb	r3, [r2, #7]
    27b6:	79d3      	ldrb	r3, [r2, #7]
    EXT_SPI_WriteBuff(&Data, 1);
    27b8:	2101      	movs	r1, #1
	OLED_WriteData(Ystart);
    27ba:	4698      	mov	r8, r3
    27bc:	ab02      	add	r3, sp, #8
    27be:	1d98      	adds	r0, r3, #6
    27c0:	4643      	mov	r3, r8
    27c2:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27c4:	4653      	mov	r3, sl
    27c6:	50e6      	str	r6, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27c8:	6165      	str	r5, [r4, #20]
    EXT_SPI_WriteBuff(&Data, 1);
    27ca:	47b8      	blx	r7
    27cc:	ab02      	add	r3, sp, #8
    27ce:	1dd8      	adds	r0, r3, #7
	OLED_WriteData(Yend-1);
    27d0:	4643      	mov	r3, r8
    27d2:	3b01      	subs	r3, #1
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27d4:	61a5      	str	r5, [r4, #24]
    27d6:	7003      	strb	r3, [r0, #0]
    27d8:	4653      	mov	r3, sl
    EXT_SPI_WriteBuff(&Data, 1);
    27da:	2101      	movs	r1, #1
    27dc:	50e6      	str	r6, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27de:	6165      	str	r5, [r4, #20]
    27e0:	47b8      	blx	r7
    27e2:	ab02      	add	r3, sp, #8
    27e4:	1c58      	adds	r0, r3, #1
    27e6:	235c      	movs	r3, #92	; 0x5c
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27e8:	61a5      	str	r5, [r4, #24]
    27ea:	7003      	strb	r3, [r0, #0]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27ec:	465b      	mov	r3, fp
    EXT_SPI_WriteBuff(&Reg, 1);
    27ee:	2101      	movs	r1, #1
    27f0:	50e6      	str	r6, [r4, r3]
    27f2:	6165      	str	r5, [r4, #20]
    27f4:	47b8      	blx	r7
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    27f6:	4653      	mov	r3, sl
    27f8:	50e6      	str	r6, [r4, r3]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    27fa:	6165      	str	r5, [r4, #20]
	EXT_SPI_write_Byte(Data >>8);
    27fc:	9f00      	ldr	r7, [sp, #0]
    27fe:	4e07      	ldr	r6, [pc, #28]	; (281c <OLED_1in5_DrawPaint+0xe8>)
    2800:	0a38      	lsrs	r0, r7, #8
    2802:	47b0      	blx	r6
	EXT_SPI_write_Byte(Data & 0xff);
    2804:	b2f8      	uxtb	r0, r7
    2806:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2808:	61a5      	str	r5, [r4, #24]
}
    280a:	b005      	add	sp, #20
    280c:	bc3c      	pop	{r2, r3, r4, r5}
    280e:	4690      	mov	r8, r2
    2810:	4699      	mov	r9, r3
    2812:	46a2      	mov	sl, r4
    2814:	46ab      	mov	fp, r5
    2816:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2818:	00002fc5 	.word	0x00002fc5
    281c:	00002fe1 	.word	0x00002fe1

00002820 <tx_cb_USART>:
}

static void tx_cb_USART(const struct usart_async_descriptor *const io_descr)
{
	
	serialTransmitting = 0;
    2820:	2200      	movs	r2, #0
    2822:	4b01      	ldr	r3, [pc, #4]	; (2828 <tx_cb_USART+0x8>)
    2824:	701a      	strb	r2, [r3, #0]
}
    2826:	4770      	bx	lr
    2828:	20000aa6 	.word	0x20000aa6

0000282c <TIMER_0_task1_cb>:
	return res;
}

static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
	adcConversionRequest = 1;
    282c:	2201      	movs	r2, #1
    282e:	4b01      	ldr	r3, [pc, #4]	; (2834 <TIMER_0_task1_cb+0x8>)
    2830:	701a      	strb	r2, [r3, #0]
}
    2832:	4770      	bx	lr
    2834:	20000aa0 	.word	0x20000aa0

00002838 <TIMER_0_task2_cb>:
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2838:	2280      	movs	r2, #128	; 0x80
    283a:	23c0      	movs	r3, #192	; 0xc0
    283c:	0412      	lsls	r2, r2, #16
    283e:	05db      	lsls	r3, r3, #23
    2840:	61da      	str	r2, [r3, #28]

static void TIMER_0_task2_cb(const struct timer_task *const timer_task)
{
	gpio_toggle_pin_level(GLD);
	
}
    2842:	4770      	bx	lr

00002844 <err_cb_USART>:
static void err_cb_USART(const struct usart_async_descriptor *const io_descr) {
    2844:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2846:	24c0      	movs	r4, #192	; 0xc0
    2848:	2580      	movs	r5, #128	; 0x80
    284a:	05e4      	lsls	r4, r4, #23
    284c:	04ad      	lsls	r5, r5, #18
    284e:	61a5      	str	r5, [r4, #24]
	delay_ms(soundTime);
    2850:	2002      	movs	r0, #2
    2852:	4b04      	ldr	r3, [pc, #16]	; (2864 <err_cb_USART+0x20>)
    2854:	4798      	blx	r3
	errorCounter++;
    2856:	4a04      	ldr	r2, [pc, #16]	; (2868 <err_cb_USART+0x24>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2858:	6165      	str	r5, [r4, #20]
    285a:	7813      	ldrb	r3, [r2, #0]
    285c:	3301      	adds	r3, #1
    285e:	b2db      	uxtb	r3, r3
    2860:	7013      	strb	r3, [r2, #0]
}
    2862:	bd70      	pop	{r4, r5, r6, pc}
    2864:	000001c9 	.word	0x000001c9
    2868:	20000aa1 	.word	0x20000aa1

0000286c <rx_cb_USART>:
static void rx_cb_USART(const struct usart_async_descriptor *const io_descr) {
    286c:	b5f0      	push	{r4, r5, r6, r7, lr}
    286e:	46de      	mov	lr, fp
    2870:	4657      	mov	r7, sl
    2872:	464e      	mov	r6, r9
    2874:	4645      	mov	r5, r8
    2876:	b5e0      	push	{r5, r6, r7, lr}
    2878:	b0a3      	sub	sp, #140	; 0x8c
	bytesRead = io_read(&DEBUG_SERIAL, buffer, RX_BUFFER_SIZE);
    287a:	2280      	movs	r2, #128	; 0x80
    287c:	a902      	add	r1, sp, #8
    287e:	482b      	ldr	r0, [pc, #172]	; (292c <rx_cb_USART+0xc0>)
    2880:	4b2b      	ldr	r3, [pc, #172]	; (2930 <rx_cb_USART+0xc4>)
    2882:	4798      	blx	r3
	if (bytesRead > 0) {
    2884:	2800      	cmp	r0, #0
    2886:	dd40      	ble.n	290a <rx_cb_USART+0x9e>
					rx_buffer[serialReceivedBytesCounter] = '\0'; // ?????????? ?????
    2888:	492a      	ldr	r1, [pc, #168]	; (2934 <rx_cb_USART+0xc8>)
    288a:	ab02      	add	r3, sp, #8
    288c:	4688      	mov	r8, r1
    288e:	492a      	ldr	r1, [pc, #168]	; (2938 <rx_cb_USART+0xcc>)
    2890:	1818      	adds	r0, r3, r0
    2892:	468a      	mov	sl, r1
					serialComplete = 1;
    2894:	4929      	ldr	r1, [pc, #164]	; (293c <rx_cb_USART+0xd0>)
    2896:	4a2a      	ldr	r2, [pc, #168]	; (2940 <rx_cb_USART+0xd4>)
					serialReceiving = 0; // ???????????? ??????
    2898:	2600      	movs	r6, #0
					serialComplete = 1;
    289a:	4689      	mov	r9, r1
    289c:	46c3      	mov	fp, r8
    289e:	e01b      	b.n	28d8 <rx_cb_USART+0x6c>
			if (serialReceiving == 0 && inChar != '\r' && inChar != '\n') {
    28a0:	2c0d      	cmp	r4, #13
    28a2:	d039      	beq.n	2918 <rx_cb_USART+0xac>
    28a4:	2c0a      	cmp	r4, #10
    28a6:	d037      	beq.n	2918 <rx_cb_USART+0xac>
				serialReceiving = 1;
    28a8:	2501      	movs	r5, #1
    28aa:	7015      	strb	r5, [r2, #0]
				serialReceivedBytesCounter = 0;
    28ac:	4d21      	ldr	r5, [pc, #132]	; (2934 <rx_cb_USART+0xc8>)
    28ae:	7029      	strb	r1, [r5, #0]
			if (serialReceiving) {
    28b0:	7811      	ldrb	r1, [r2, #0]
    28b2:	2900      	cmp	r1, #0
    28b4:	d00d      	beq.n	28d2 <rx_cb_USART+0x66>
					} else if (serialReceivedBytesCounter < RX_BUFFER_SIZE - 1) {
    28b6:	7829      	ldrb	r1, [r5, #0]
    28b8:	297e      	cmp	r1, #126	; 0x7e
    28ba:	d831      	bhi.n	2920 <rx_cb_USART+0xb4>
					rx_buffer[serialReceivedBytesCounter++] = inChar;
    28bc:	7829      	ldrb	r1, [r5, #0]
    28be:	b2c9      	uxtb	r1, r1
    28c0:	1c4f      	adds	r7, r1, #1
    28c2:	9100      	str	r1, [sp, #0]
    28c4:	4669      	mov	r1, sp
    28c6:	71cf      	strb	r7, [r1, #7]
    28c8:	79cf      	ldrb	r7, [r1, #7]
    28ca:	9900      	ldr	r1, [sp, #0]
    28cc:	702f      	strb	r7, [r5, #0]
    28ce:	4d1a      	ldr	r5, [pc, #104]	; (2938 <rx_cb_USART+0xcc>)
    28d0:	546c      	strb	r4, [r5, r1]
    28d2:	3301      	adds	r3, #1
		for (int i = 0; i < bytesRead; i++) {
    28d4:	4283      	cmp	r3, r0
    28d6:	d018      	beq.n	290a <rx_cb_USART+0x9e>
			if (serialReceiving == 0 && inChar != '\r' && inChar != '\n') {
    28d8:	7811      	ldrb	r1, [r2, #0]
			uint8_t inChar = buffer[i];
    28da:	781c      	ldrb	r4, [r3, #0]
			if (serialReceiving == 0 && inChar != '\r' && inChar != '\n') {
    28dc:	b2c9      	uxtb	r1, r1
    28de:	2900      	cmp	r1, #0
    28e0:	d0de      	beq.n	28a0 <rx_cb_USART+0x34>
			if (serialReceiving) {
    28e2:	7811      	ldrb	r1, [r2, #0]
    28e4:	2900      	cmp	r1, #0
    28e6:	d0f4      	beq.n	28d2 <rx_cb_USART+0x66>
				if (inChar == '\r' || inChar == '\n') {
    28e8:	2c0d      	cmp	r4, #13
    28ea:	d002      	beq.n	28f2 <rx_cb_USART+0x86>
    28ec:	465d      	mov	r5, fp
    28ee:	2c0a      	cmp	r4, #10
    28f0:	d1e1      	bne.n	28b6 <rx_cb_USART+0x4a>
					rx_buffer[serialReceivedBytesCounter] = '\0'; // ?????????? ?????
    28f2:	4641      	mov	r1, r8
    28f4:	4654      	mov	r4, sl
    28f6:	7809      	ldrb	r1, [r1, #0]
    28f8:	3301      	adds	r3, #1
    28fa:	b2c9      	uxtb	r1, r1
    28fc:	5466      	strb	r6, [r4, r1]
					serialComplete = 1;
    28fe:	2101      	movs	r1, #1
    2900:	464c      	mov	r4, r9
    2902:	7021      	strb	r1, [r4, #0]
					serialReceiving = 0;
    2904:	7016      	strb	r6, [r2, #0]
		for (int i = 0; i < bytesRead; i++) {
    2906:	4283      	cmp	r3, r0
    2908:	d1e6      	bne.n	28d8 <rx_cb_USART+0x6c>
}
    290a:	b023      	add	sp, #140	; 0x8c
    290c:	bc3c      	pop	{r2, r3, r4, r5}
    290e:	4690      	mov	r8, r2
    2910:	4699      	mov	r9, r3
    2912:	46a2      	mov	sl, r4
    2914:	46ab      	mov	fp, r5
    2916:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (serialReceiving) {
    2918:	7811      	ldrb	r1, [r2, #0]
    291a:	2900      	cmp	r1, #0
    291c:	d1e9      	bne.n	28f2 <rx_cb_USART+0x86>
    291e:	e7d8      	b.n	28d2 <rx_cb_USART+0x66>
					serialBufferOverflow = 1;
    2920:	2101      	movs	r1, #1
    2922:	4c08      	ldr	r4, [pc, #32]	; (2944 <rx_cb_USART+0xd8>)
					serialReceiving = 0; // ???????????? ??????
    2924:	7016      	strb	r6, [r2, #0]
					serialBufferOverflow = 1;
    2926:	7021      	strb	r1, [r4, #0]
    2928:	e7d3      	b.n	28d2 <rx_cb_USART+0x66>
    292a:	46c0      	nop			; (mov r8, r8)
    292c:	20001048 	.word	0x20001048
    2930:	00000345 	.word	0x00000345
    2934:	20000aa4 	.word	0x20000aa4
    2938:	20000f8c 	.word	0x20000f8c
    293c:	20000aa3 	.word	0x20000aa3
    2940:	20000aa5 	.word	0x20000aa5
    2944:	20000aa2 	.word	0x20000aa2

00002948 <ETH_Handler>:
    2948:	4770      	bx	lr
    294a:	46c0      	nop			; (mov r8, r8)

0000294c <buzer>:
void buzer(uint16_t soundTime){
    294c:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    294e:	24c0      	movs	r4, #192	; 0xc0
    2950:	2580      	movs	r5, #128	; 0x80
    2952:	05e4      	lsls	r4, r4, #23
    2954:	04ad      	lsls	r5, r5, #18
    2956:	61a5      	str	r5, [r4, #24]
	delay_ms(soundTime);
    2958:	4b01      	ldr	r3, [pc, #4]	; (2960 <buzer+0x14>)
    295a:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    295c:	6165      	str	r5, [r4, #20]
}
    295e:	bd70      	pop	{r4, r5, r6, pc}
    2960:	000001c9 	.word	0x000001c9

00002964 <gpio_init>:
    2964:	22c0      	movs	r2, #192	; 0xc0
    2966:	2380      	movs	r3, #128	; 0x80
void gpio_init(void){
    2968:	b5f0      	push	{r4, r5, r6, r7, lr}
    296a:	46de      	mov	lr, fp
    296c:	4657      	mov	r7, sl
    296e:	464e      	mov	r6, r9
    2970:	4645      	mov	r5, r8

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2972:	2480      	movs	r4, #128	; 0x80
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2974:	05d2      	lsls	r2, r2, #23
    2976:	039b      	lsls	r3, r3, #14
    2978:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    297a:	49b7      	ldr	r1, [pc, #732]	; (2c58 <gpio_init+0x2f4>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    297c:	6153      	str	r3, [r2, #20]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    297e:	2555      	movs	r5, #85	; 0x55
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2980:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2982:	4bb6      	ldr	r3, [pc, #728]	; (2c5c <gpio_init+0x2f8>)
    2984:	05e4      	lsls	r4, r4, #23
    2986:	629c      	str	r4, [r3, #40]	; 0x28
    2988:	6299      	str	r1, [r3, #40]	; 0x28
	tmp &= ~PORT_PINCFG_PMUXEN;
    298a:	2101      	movs	r1, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    298c:	5d58      	ldrb	r0, [r3, r5]
    298e:	26d1      	movs	r6, #209	; 0xd1
	tmp &= ~PORT_PINCFG_PMUXEN;
    2990:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2992:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2994:	2080      	movs	r0, #128	; 0x80
    2996:	353f      	adds	r5, #63	; 0x3f
    2998:	0280      	lsls	r0, r0, #10
    299a:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    299c:	3d0c      	subs	r5, #12
    299e:	5150      	str	r0, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29a0:	20a8      	movs	r0, #168	; 0xa8
    29a2:	4daf      	ldr	r5, [pc, #700]	; (2c60 <gpio_init+0x2fc>)
    29a4:	501c      	str	r4, [r3, r0]
    29a6:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29a8:	5d9d      	ldrb	r5, [r3, r6]
    29aa:	2747      	movs	r7, #71	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
    29ac:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29ae:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    29b0:	2580      	movs	r5, #128	; 0x80
    29b2:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    29b4:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29b6:	4dab      	ldr	r5, [pc, #684]	; (2c64 <gpio_init+0x300>)
    29b8:	629d      	str	r5, [r3, #40]	; 0x28
    29ba:	25c0      	movs	r5, #192	; 0xc0
    29bc:	062d      	lsls	r5, r5, #24
    29be:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29c0:	5dde      	ldrb	r6, [r3, r7]
	tmp &= ~PORT_PINCFG_PMUXEN;
    29c2:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29c4:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29c6:	2680      	movs	r6, #128	; 0x80
    29c8:	0076      	lsls	r6, r6, #1
    29ca:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    29cc:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29ce:	4ea6      	ldr	r6, [pc, #664]	; (2c68 <gpio_init+0x304>)
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29d0:	3701      	adds	r7, #1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29d2:	629e      	str	r6, [r3, #40]	; 0x28
    29d4:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29d6:	2580      	movs	r5, #128	; 0x80
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29d8:	5dde      	ldrb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29da:	00ad      	lsls	r5, r5, #2
	tmp &= ~PORT_PINCFG_PMUXEN;
    29dc:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29de:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29e0:	46ac      	mov	ip, r5
    29e2:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    29e4:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29e6:	4da1      	ldr	r5, [pc, #644]	; (2c6c <gpio_init+0x308>)
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29e8:	3701      	adds	r7, #1
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    29ea:	629d      	str	r5, [r3, #40]	; 0x28
    29ec:	25c0      	movs	r5, #192	; 0xc0
    29ee:	062d      	lsls	r5, r5, #24
    29f0:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29f2:	2580      	movs	r5, #128	; 0x80
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    29f4:	5dde      	ldrb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29f6:	00ed      	lsls	r5, r5, #3
	tmp &= ~PORT_PINCFG_PMUXEN;
    29f8:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    29fa:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    29fc:	46a9      	mov	r9, r5
    29fe:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a00:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a02:	25c0      	movs	r5, #192	; 0xc0
    2a04:	4e9a      	ldr	r6, [pc, #616]	; (2c70 <gpio_init+0x30c>)
    2a06:	062d      	lsls	r5, r5, #24
    2a08:	629e      	str	r6, [r3, #40]	; 0x28
    2a0a:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2a0c:	2580      	movs	r5, #128	; 0x80
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a0e:	3701      	adds	r7, #1
    2a10:	5dde      	ldrb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2a12:	012d      	lsls	r5, r5, #4
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a14:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a16:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2a18:	6055      	str	r5, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a1a:	4d96      	ldr	r5, [pc, #600]	; (2c74 <gpio_init+0x310>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2a1c:	2604      	movs	r6, #4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a1e:	629d      	str	r5, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2a20:	254b      	movs	r5, #75	; 0x4b
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a22:	4f95      	ldr	r7, [pc, #596]	; (2c78 <gpio_init+0x314>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2a24:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a26:	629f      	str	r7, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2a28:	5d5d      	ldrb	r5, [r3, r5]
    2a2a:	43b5      	bics	r5, r6
    2a2c:	46ab      	mov	fp, r5
    2a2e:	4645      	mov	r5, r8
    2a30:	465e      	mov	r6, fp
    2a32:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a34:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a36:	438d      	bics	r5, r1
    2a38:	46ab      	mov	fp, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a3a:	4645      	mov	r5, r8
    2a3c:	465e      	mov	r6, fp
    2a3e:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2a40:	2580      	movs	r5, #128	; 0x80
    2a42:	022d      	lsls	r5, r5, #8
    2a44:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a46:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a48:	4d8c      	ldr	r5, [pc, #560]	; (2c7c <gpio_init+0x318>)
    2a4a:	629d      	str	r5, [r3, #40]	; 0x28
    2a4c:	25c0      	movs	r5, #192	; 0xc0
    2a4e:	062d      	lsls	r5, r5, #24
    2a50:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a52:	254f      	movs	r5, #79	; 0x4f
    2a54:	46aa      	mov	sl, r5
    2a56:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a58:	438d      	bics	r5, r1
    2a5a:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a5c:	4655      	mov	r5, sl
    2a5e:	4646      	mov	r6, r8
    2a60:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2a62:	2580      	movs	r5, #128	; 0x80
    2a64:	042d      	lsls	r5, r5, #16
    2a66:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a68:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a6a:	4d85      	ldr	r5, [pc, #532]	; (2c80 <gpio_init+0x31c>)
    2a6c:	629c      	str	r4, [r3, #40]	; 0x28
    2a6e:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a70:	2557      	movs	r5, #87	; 0x57
    2a72:	46ab      	mov	fp, r5
    2a74:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a76:	438d      	bics	r5, r1
    2a78:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2a7a:	465d      	mov	r5, fp
    2a7c:	4646      	mov	r6, r8
    2a7e:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2a80:	4666      	mov	r6, ip
    2a82:	3541      	adds	r5, #65	; 0x41
    2a84:	5156      	str	r6, [r2, r5]
    2a86:	46ab      	mov	fp, r5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2a88:	3d10      	subs	r5, #16
    2a8a:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2a8c:	4d77      	ldr	r5, [pc, #476]	; (2c6c <gpio_init+0x308>)
    2a8e:	501d      	str	r5, [r3, r0]
    2a90:	25c0      	movs	r5, #192	; 0xc0
    2a92:	062d      	lsls	r5, r5, #24
    2a94:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2a96:	25c9      	movs	r5, #201	; 0xc9
    2a98:	46a8      	mov	r8, r5
    2a9a:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2a9c:	438d      	bics	r5, r1
    2a9e:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2aa0:	4645      	mov	r5, r8
    2aa2:	4666      	mov	r6, ip
    2aa4:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2aa6:	464e      	mov	r6, r9
    2aa8:	3d45      	subs	r5, #69	; 0x45
    2aaa:	46ac      	mov	ip, r5
    2aac:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2aae:	4d75      	ldr	r5, [pc, #468]	; (2c84 <gpio_init+0x320>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2ab0:	2604      	movs	r6, #4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ab2:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2ab4:	25ca      	movs	r5, #202	; 0xca
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ab6:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2ab8:	46a8      	mov	r8, r5
    2aba:	5d5d      	ldrb	r5, [r3, r5]
    2abc:	43b5      	bics	r5, r6
    2abe:	46a9      	mov	r9, r5
    2ac0:	4645      	mov	r5, r8
    2ac2:	464e      	mov	r6, r9
    2ac4:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ac6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ac8:	438d      	bics	r5, r1
    2aca:	46a9      	mov	r9, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2acc:	4645      	mov	r5, r8
    2ace:	464e      	mov	r6, r9
    2ad0:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2ad2:	2680      	movs	r6, #128	; 0x80
    2ad4:	4665      	mov	r5, ip
    2ad6:	0136      	lsls	r6, r6, #4
    2ad8:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ada:	4d66      	ldr	r5, [pc, #408]	; (2c74 <gpio_init+0x310>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2adc:	2604      	movs	r6, #4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ade:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2ae0:	25cb      	movs	r5, #203	; 0xcb
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ae2:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2ae4:	46a8      	mov	r8, r5
    2ae6:	5d5d      	ldrb	r5, [r3, r5]
    2ae8:	43b5      	bics	r5, r6
    2aea:	46a9      	mov	r9, r5
    2aec:	4645      	mov	r5, r8
    2aee:	464e      	mov	r6, r9
    2af0:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2af2:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2af4:	438d      	bics	r5, r1
    2af6:	46a9      	mov	r9, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2af8:	4645      	mov	r5, r8
    2afa:	464e      	mov	r6, r9
    2afc:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2afe:	2580      	movs	r5, #128	; 0x80
    2b00:	03ed      	lsls	r5, r5, #15
    2b02:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b04:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b06:	4d60      	ldr	r5, [pc, #384]	; (2c88 <gpio_init+0x324>)
    2b08:	629c      	str	r4, [r3, #40]	; 0x28
    2b0a:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b0c:	2556      	movs	r5, #86	; 0x56
    2b0e:	46a9      	mov	r9, r5
    2b10:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b12:	438d      	bics	r5, r1
    2b14:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b16:	464d      	mov	r5, r9
    2b18:	4646      	mov	r6, r8
    2b1a:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b1c:	2580      	movs	r5, #128	; 0x80
    2b1e:	046d      	lsls	r5, r5, #17
    2b20:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b22:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b24:	4d59      	ldr	r5, [pc, #356]	; (2c8c <gpio_init+0x328>)
    2b26:	629c      	str	r4, [r3, #40]	; 0x28
    2b28:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b2a:	2558      	movs	r5, #88	; 0x58
    2b2c:	46a9      	mov	r9, r5
    2b2e:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b30:	438d      	bics	r5, r1
    2b32:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b34:	464d      	mov	r5, r9
    2b36:	4646      	mov	r6, r8
    2b38:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2b3a:	2580      	movs	r5, #128	; 0x80
    2b3c:	04ad      	lsls	r5, r5, #18
    2b3e:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2b40:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b42:	4d53      	ldr	r5, [pc, #332]	; (2c90 <gpio_init+0x32c>)
    2b44:	629c      	str	r4, [r3, #40]	; 0x28
    2b46:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b48:	2559      	movs	r5, #89	; 0x59
    2b4a:	46a9      	mov	r9, r5
    2b4c:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b4e:	438d      	bics	r5, r1
    2b50:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b52:	464d      	mov	r5, r9
    2b54:	4646      	mov	r6, r8
    2b56:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b58:	3d19      	subs	r5, #25
    2b5a:	46a8      	mov	r8, r5
    2b5c:	4665      	mov	r5, ip
    2b5e:	4646      	mov	r6, r8
    2b60:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b62:	4d4c      	ldr	r5, [pc, #304]	; (2c94 <gpio_init+0x330>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b64:	3e3c      	subs	r6, #60	; 0x3c
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b66:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b68:	25c6      	movs	r5, #198	; 0xc6
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b6a:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b6c:	46a8      	mov	r8, r5
    2b6e:	5d5d      	ldrb	r5, [r3, r5]
    2b70:	43b5      	bics	r5, r6
    2b72:	46a9      	mov	r9, r5
    2b74:	4645      	mov	r5, r8
    2b76:	464e      	mov	r6, r9
    2b78:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2b7a:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2b7c:	438d      	bics	r5, r1
    2b7e:	46a9      	mov	r9, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2b80:	4645      	mov	r5, r8
    2b82:	464e      	mov	r6, r9
    2b84:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2b86:	3da6      	subs	r5, #166	; 0xa6
    2b88:	46a8      	mov	r8, r5
    2b8a:	4665      	mov	r5, ip
    2b8c:	4646      	mov	r6, r8
    2b8e:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b90:	4d41      	ldr	r5, [pc, #260]	; (2c98 <gpio_init+0x334>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b92:	3e1c      	subs	r6, #28
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b94:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b96:	25c5      	movs	r5, #197	; 0xc5
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2b98:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2b9a:	46a8      	mov	r8, r5
    2b9c:	5d5d      	ldrb	r5, [r3, r5]
    2b9e:	43b5      	bics	r5, r6
    2ba0:	46a9      	mov	r9, r5
    2ba2:	4645      	mov	r5, r8
    2ba4:	464e      	mov	r6, r9
    2ba6:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ba8:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2baa:	438d      	bics	r5, r1
    2bac:	46a9      	mov	r9, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2bae:	4645      	mov	r5, r8
    2bb0:	464e      	mov	r6, r9
    2bb2:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2bb4:	3db5      	subs	r5, #181	; 0xb5
    2bb6:	46a8      	mov	r8, r5
    2bb8:	4665      	mov	r5, ip
    2bba:	4646      	mov	r6, r8
    2bbc:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bbe:	4d37      	ldr	r5, [pc, #220]	; (2c9c <gpio_init+0x338>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2bc0:	3e0c      	subs	r6, #12
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bc2:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2bc4:	25c4      	movs	r5, #196	; 0xc4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bc6:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2bc8:	46a8      	mov	r8, r5
    2bca:	5d5d      	ldrb	r5, [r3, r5]
    2bcc:	43b5      	bics	r5, r6
    2bce:	46a9      	mov	r9, r5
    2bd0:	4645      	mov	r5, r8
    2bd2:	464e      	mov	r6, r9
    2bd4:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2bd6:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2bd8:	438d      	bics	r5, r1
    2bda:	46a9      	mov	r9, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2bdc:	4645      	mov	r5, r8
    2bde:	464e      	mov	r6, r9
    2be0:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2be2:	4665      	mov	r5, ip
    2be4:	2680      	movs	r6, #128	; 0x80
    2be6:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2be8:	4d2d      	ldr	r5, [pc, #180]	; (2ca0 <gpio_init+0x33c>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2bea:	3e7c      	subs	r6, #124	; 0x7c
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2bec:	501d      	str	r5, [r3, r0]
    2bee:	501f      	str	r7, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2bf0:	27c7      	movs	r7, #199	; 0xc7
    2bf2:	5ddd      	ldrb	r5, [r3, r7]
    2bf4:	43b5      	bics	r5, r6
    2bf6:	55dd      	strb	r5, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2bf8:	2580      	movs	r5, #128	; 0x80
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2bfa:	5dde      	ldrb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2bfc:	022d      	lsls	r5, r5, #8
	tmp &= ~PORT_PINCFG_PMUXEN;
    2bfe:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c00:	55de      	strb	r6, [r3, r7]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c02:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c04:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c06:	4d1d      	ldr	r5, [pc, #116]	; (2c7c <gpio_init+0x318>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c08:	4656      	mov	r6, sl
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c0a:	629d      	str	r5, [r3, #40]	; 0x28
    2c0c:	25c0      	movs	r5, #192	; 0xc0
    2c0e:	062d      	lsls	r5, r5, #24
    2c10:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c12:	4655      	mov	r5, sl
    2c14:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c16:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c18:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c1a:	2580      	movs	r5, #128	; 0x80
    2c1c:	465e      	mov	r6, fp
    2c1e:	026d      	lsls	r5, r5, #9
    2c20:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c22:	3e10      	subs	r6, #16
    2c24:	5195      	str	r5, [r2, r6]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c26:	4d1f      	ldr	r5, [pc, #124]	; (2ca4 <gpio_init+0x340>)
    2c28:	501c      	str	r4, [r3, r0]
    2c2a:	501d      	str	r5, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c2c:	25d0      	movs	r5, #208	; 0xd0
    2c2e:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c30:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c32:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2c34:	2080      	movs	r0, #128	; 0x80
    2c36:	0300      	lsls	r0, r0, #12
    2c38:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2c3a:	6090      	str	r0, [r2, #8]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c3c:	2053      	movs	r0, #83	; 0x53
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2c3e:	4a1a      	ldr	r2, [pc, #104]	; (2ca8 <gpio_init+0x344>)
    2c40:	629c      	str	r4, [r3, #40]	; 0x28
    2c42:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2c44:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2c46:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2c48:	541a      	strb	r2, [r3, r0]
}
    2c4a:	bc3c      	pop	{r2, r3, r4, r5}
    2c4c:	4690      	mov	r8, r2
    2c4e:	4699      	mov	r9, r3
    2c50:	46a2      	mov	sl, r4
    2c52:	46ab      	mov	fp, r5
    2c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c56:	46c0      	nop			; (mov r8, r8)
    2c58:	c0000020 	.word	0xc0000020
    2c5c:	41004400 	.word	0x41004400
    2c60:	c0000002 	.word	0xc0000002
    2c64:	40000080 	.word	0x40000080
    2c68:	40000100 	.word	0x40000100
    2c6c:	40000200 	.word	0x40000200
    2c70:	40000400 	.word	0x40000400
    2c74:	40020800 	.word	0x40020800
    2c78:	c0020000 	.word	0xc0020000
    2c7c:	40008000 	.word	0x40008000
    2c80:	c0000080 	.word	0xc0000080
    2c84:	40020400 	.word	0x40020400
    2c88:	c0000040 	.word	0xc0000040
    2c8c:	c0000100 	.word	0xc0000100
    2c90:	c0000200 	.word	0xc0000200
    2c94:	40020040 	.word	0x40020040
    2c98:	40020020 	.word	0x40020020
    2c9c:	40020010 	.word	0x40020010
    2ca0:	40020080 	.word	0x40020080
    2ca4:	c0000001 	.word	0xc0000001
    2ca8:	c0000008 	.word	0xc0000008

00002cac <ETH_SPI_init>:
void ETH_SPI_init(void){
    2cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cae:	46de      	mov	lr, fp
    2cb0:	4657      	mov	r7, sl
    2cb2:	464e      	mov	r6, r9
    2cb4:	4645      	mov	r5, r8
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    2cb6:	2104      	movs	r1, #4
    2cb8:	b5e0      	push	{r5, r6, r7, lr}
    2cba:	4a3c      	ldr	r2, [pc, #240]	; (2dac <ETH_SPI_init+0x100>)
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    2cbc:	4f3c      	ldr	r7, [pc, #240]	; (2db0 <ETH_SPI_init+0x104>)
    2cbe:	6a13      	ldr	r3, [r2, #32]
    2cc0:	468a      	mov	sl, r1
    2cc2:	430b      	orrs	r3, r1
    2cc4:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
    2cc6:	4a3b      	ldr	r2, [pc, #236]	; (2db4 <ETH_SPI_init+0x108>)
    2cc8:	4b3b      	ldr	r3, [pc, #236]	; (2db8 <ETH_SPI_init+0x10c>)
    2cca:	0038      	movs	r0, r7
    2ccc:	805a      	strh	r2, [r3, #2]
    2cce:	4b3b      	ldr	r3, [pc, #236]	; (2dbc <ETH_SPI_init+0x110>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2cd0:	25c0      	movs	r5, #192	; 0xc0
    2cd2:	4699      	mov	r9, r3
    2cd4:	0019      	movs	r1, r3
    2cd6:	4b3a      	ldr	r3, [pc, #232]	; (2dc0 <ETH_SPI_init+0x114>)
    2cd8:	05ed      	lsls	r5, r5, #23
    2cda:	4698      	mov	r8, r3
    2cdc:	4798      	blx	r3
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2cde:	2101      	movs	r1, #1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ce0:	2310      	movs	r3, #16
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2ce2:	468c      	mov	ip, r1
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2ce4:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ce6:	4c37      	ldr	r4, [pc, #220]	; (2dc4 <ETH_SPI_init+0x118>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ce8:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cea:	4b37      	ldr	r3, [pc, #220]	; (2dc8 <ETH_SPI_init+0x11c>)
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cec:	2244      	movs	r2, #68	; 0x44
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cee:	62a3      	str	r3, [r4, #40]	; 0x28
    2cf0:	23c0      	movs	r3, #192	; 0xc0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2cf2:	2601      	movs	r6, #1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2cf4:	4661      	mov	r1, ip
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2cf6:	061b      	lsls	r3, r3, #24
    2cf8:	62a3      	str	r3, [r4, #40]	; 0x28
    2cfa:	469b      	mov	fp, r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2cfc:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2cfe:	200f      	movs	r0, #15
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d00:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d02:	430b      	orrs	r3, r1
	tmp |= PORT_PMUX_PMUXE(data);
    2d04:	2103      	movs	r1, #3
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d06:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d08:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d0a:	3a12      	subs	r2, #18
    2d0c:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2d0e:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    2d10:	430b      	orrs	r3, r1
    2d12:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2d14:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2d16:	2320      	movs	r3, #32
    2d18:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d1a:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d1c:	4b2b      	ldr	r3, [pc, #172]	; (2dcc <ETH_SPI_init+0x120>)
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d1e:	4661      	mov	r1, ip
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d20:	62a3      	str	r3, [r4, #40]	; 0x28
    2d22:	465b      	mov	r3, fp
    2d24:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d26:	2345      	movs	r3, #69	; 0x45
    2d28:	469b      	mov	fp, r3
    2d2a:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d2c:	43b3      	bics	r3, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d2e:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d30:	4659      	mov	r1, fp
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d32:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d34:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d36:	5ca3      	ldrb	r3, [r4, r2]
	tmp |= PORT_PMUX_PMUXO(data);
    2d38:	3915      	subs	r1, #21
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2d3a:	4003      	ands	r3, r0
	tmp |= PORT_PMUX_PMUXO(data);
    2d3c:	430b      	orrs	r3, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2d3e:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2d40:	2340      	movs	r3, #64	; 0x40
    2d42:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d44:	4b22      	ldr	r3, [pc, #136]	; (2dd0 <ETH_SPI_init+0x124>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2d46:	4651      	mov	r1, sl
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d48:	62a3      	str	r3, [r4, #40]	; 0x28
    2d4a:	4b22      	ldr	r3, [pc, #136]	; (2dd4 <ETH_SPI_init+0x128>)
    2d4c:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2d4e:	2346      	movs	r3, #70	; 0x46
    2d50:	5ce2      	ldrb	r2, [r4, r3]
    2d52:	438a      	bics	r2, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d54:	4661      	mov	r1, ip
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2d56:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d58:	5ce2      	ldrb	r2, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d5a:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2d5c:	430a      	orrs	r2, r1
    2d5e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d60:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d62:	2233      	movs	r2, #51	; 0x33
	tmp |= PORT_PMUX_PMUXE(data);
    2d64:	2103      	movs	r1, #3
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2d66:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2d68:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    2d6a:	430b      	orrs	r3, r1
    2d6c:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2d6e:	54a3      	strb	r3, [r4, r2]
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    2d70:	4649      	mov	r1, r9
    2d72:	0038      	movs	r0, r7
    2d74:	47c0      	blx	r8
	spi_m_sync_get_io_descriptor(&ETH_SPI, &eth_spi);
    2d76:	4918      	ldr	r1, [pc, #96]	; (2dd8 <ETH_SPI_init+0x12c>)
    2d78:	0038      	movs	r0, r7
    2d7a:	4b18      	ldr	r3, [pc, #96]	; (2ddc <ETH_SPI_init+0x130>)
    2d7c:	4798      	blx	r3
	spi_m_sync_enable(&ETH_SPI);
    2d7e:	0038      	movs	r0, r7
    2d80:	4b17      	ldr	r3, [pc, #92]	; (2de0 <ETH_SPI_init+0x134>)
    2d82:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2d84:	2380      	movs	r3, #128	; 0x80
    2d86:	031b      	lsls	r3, r3, #12
    2d88:	61ab      	str	r3, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2d8a:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d8c:	2380      	movs	r3, #128	; 0x80
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d8e:	2253      	movs	r2, #83	; 0x53
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2d90:	05db      	lsls	r3, r3, #23
    2d92:	62a3      	str	r3, [r4, #40]	; 0x28
    2d94:	4b13      	ldr	r3, [pc, #76]	; (2de4 <ETH_SPI_init+0x138>)
    2d96:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2d98:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2d9a:	43b3      	bics	r3, r6
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2d9c:	54a3      	strb	r3, [r4, r2]
}
    2d9e:	bc3c      	pop	{r2, r3, r4, r5}
    2da0:	4690      	mov	r8, r2
    2da2:	4699      	mov	r9, r3
    2da4:	46a2      	mov	sl, r4
    2da6:	46ab      	mov	fp, r5
    2da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2daa:	46c0      	nop			; (mov r8, r8)
    2dac:	40000400 	.word	0x40000400
    2db0:	20001028 	.word	0x20001028
    2db4:	0000400d 	.word	0x0000400d
    2db8:	40000c00 	.word	0x40000c00
    2dbc:	42000800 	.word	0x42000800
    2dc0:	00000429 	.word	0x00000429
    2dc4:	41004400 	.word	0x41004400
    2dc8:	40000010 	.word	0x40000010
    2dcc:	40000020 	.word	0x40000020
    2dd0:	40020040 	.word	0x40020040
    2dd4:	c0020000 	.word	0xc0020000
    2dd8:	20000f88 	.word	0x20000f88
    2ddc:	000004a5 	.word	0x000004a5
    2de0:	0000047d 	.word	0x0000047d
    2de4:	c0000008 	.word	0xc0000008

00002de8 <W5500_Select>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2de8:	23c0      	movs	r3, #192	; 0xc0
    2dea:	2280      	movs	r2, #128	; 0x80
    2dec:	05db      	lsls	r3, r3, #23
    2dee:	615a      	str	r2, [r3, #20]
}
    2df0:	4770      	bx	lr
    2df2:	46c0      	nop			; (mov r8, r8)

00002df4 <W5500_Unselect>:
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2df4:	23c0      	movs	r3, #192	; 0xc0
    2df6:	2280      	movs	r2, #128	; 0x80
    2df8:	05db      	lsls	r3, r3, #23
    2dfa:	619a      	str	r2, [r3, #24]
}
    2dfc:	4770      	bx	lr
    2dfe:	46c0      	nop			; (mov r8, r8)

00002e00 <W5500_ReadBuff>:
void W5500_ReadBuff(uint8_t* buff, uint16_t len){
    2e00:	b510      	push	{r4, lr}
	io_read(eth_spi,buff,len);
    2e02:	4b04      	ldr	r3, [pc, #16]	; (2e14 <W5500_ReadBuff+0x14>)
void W5500_ReadBuff(uint8_t* buff, uint16_t len){
    2e04:	000a      	movs	r2, r1
	io_read(eth_spi,buff,len);
    2e06:	681b      	ldr	r3, [r3, #0]
    2e08:	0001      	movs	r1, r0
    2e0a:	0018      	movs	r0, r3
    2e0c:	4b02      	ldr	r3, [pc, #8]	; (2e18 <W5500_ReadBuff+0x18>)
    2e0e:	4798      	blx	r3
}
    2e10:	bd10      	pop	{r4, pc}
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	20000f88 	.word	0x20000f88
    2e18:	00000345 	.word	0x00000345

00002e1c <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len){
    2e1c:	b510      	push	{r4, lr}
	io_write(eth_spi,buff,len);
    2e1e:	4b04      	ldr	r3, [pc, #16]	; (2e30 <W5500_WriteBuff+0x14>)
void W5500_WriteBuff(uint8_t* buff, uint16_t len){
    2e20:	000a      	movs	r2, r1
	io_write(eth_spi,buff,len);
    2e22:	681b      	ldr	r3, [r3, #0]
    2e24:	0001      	movs	r1, r0
    2e26:	0018      	movs	r0, r3
    2e28:	4b02      	ldr	r3, [pc, #8]	; (2e34 <W5500_WriteBuff+0x18>)
    2e2a:	4798      	blx	r3
}
    2e2c:	bd10      	pop	{r4, pc}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	20000f88 	.word	0x20000f88
    2e34:	0000033d 	.word	0x0000033d

00002e38 <W5500_ReadByte>:
uint8_t W5500_ReadByte(void){
    2e38:	b510      	push	{r4, lr}
    2e3a:	b082      	sub	sp, #8
	uint8_t data_byte = 0;
    2e3c:	466b      	mov	r3, sp
    2e3e:	1ddc      	adds	r4, r3, #7
    2e40:	2300      	movs	r3, #0
    2e42:	7023      	strb	r3, [r4, #0]
	io_read(eth_spi,&data_byte,1);
    2e44:	4b04      	ldr	r3, [pc, #16]	; (2e58 <W5500_ReadByte+0x20>)
    2e46:	2201      	movs	r2, #1
    2e48:	6818      	ldr	r0, [r3, #0]
    2e4a:	0021      	movs	r1, r4
    2e4c:	4b03      	ldr	r3, [pc, #12]	; (2e5c <W5500_ReadByte+0x24>)
    2e4e:	4798      	blx	r3
	return data_byte;
    2e50:	7820      	ldrb	r0, [r4, #0]
}
    2e52:	b002      	add	sp, #8
    2e54:	bd10      	pop	{r4, pc}
    2e56:	46c0      	nop			; (mov r8, r8)
    2e58:	20000f88 	.word	0x20000f88
    2e5c:	00000345 	.word	0x00000345

00002e60 <W5500_Write_byte>:
void W5500_Write_byte(uint8_t byte){
    2e60:	b500      	push	{lr}
    2e62:	b083      	sub	sp, #12
    2e64:	466b      	mov	r3, sp
    2e66:	1dd9      	adds	r1, r3, #7
	io_write(eth_spi, &byte, 1);
    2e68:	4b03      	ldr	r3, [pc, #12]	; (2e78 <W5500_Write_byte+0x18>)
void W5500_Write_byte(uint8_t byte){
    2e6a:	7008      	strb	r0, [r1, #0]
	io_write(eth_spi, &byte, 1);
    2e6c:	2201      	movs	r2, #1
    2e6e:	6818      	ldr	r0, [r3, #0]
    2e70:	4b02      	ldr	r3, [pc, #8]	; (2e7c <W5500_Write_byte+0x1c>)
    2e72:	4798      	blx	r3
}
    2e74:	b003      	add	sp, #12
    2e76:	bd00      	pop	{pc}
    2e78:	20000f88 	.word	0x20000f88
    2e7c:	0000033d 	.word	0x0000033d

00002e80 <EXT_SPI_init>:
void EXT_SPI_init(void){
    2e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e82:	46de      	mov	lr, fp
    2e84:	4657      	mov	r7, sl
    2e86:	464e      	mov	r6, r9
    2e88:	4645      	mov	r5, r8
    2e8a:	2120      	movs	r1, #32
    2e8c:	b5e0      	push	{r5, r6, r7, lr}
	tmp &= ~PORT_PINCFG_PMUXEN;
    2e8e:	2701      	movs	r7, #1
    2e90:	4a37      	ldr	r2, [pc, #220]	; (2f70 <EXT_SPI_init+0xf0>)
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    2e92:	4c38      	ldr	r4, [pc, #224]	; (2f74 <EXT_SPI_init+0xf4>)
    2e94:	6a13      	ldr	r3, [r2, #32]
    2e96:	4e38      	ldr	r6, [pc, #224]	; (2f78 <EXT_SPI_init+0xf8>)
    2e98:	430b      	orrs	r3, r1
    2e9a:	6213      	str	r3, [r2, #32]
    2e9c:	4a37      	ldr	r2, [pc, #220]	; (2f7c <EXT_SPI_init+0xfc>)
    2e9e:	4b38      	ldr	r3, [pc, #224]	; (2f80 <EXT_SPI_init+0x100>)
    2ea0:	0031      	movs	r1, r6
    2ea2:	805a      	strh	r2, [r3, #2]
    2ea4:	4b37      	ldr	r3, [pc, #220]	; (2f84 <EXT_SPI_init+0x104>)
    2ea6:	0020      	movs	r0, r4
    2ea8:	469b      	mov	fp, r3
    2eaa:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eac:	22c0      	movs	r2, #192	; 0xc0
    2eae:	2380      	movs	r3, #128	; 0x80
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2eb0:	2180      	movs	r1, #128	; 0x80
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2eb2:	2050      	movs	r0, #80	; 0x50
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2eb4:	46b8      	mov	r8, r7
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eb6:	05d2      	lsls	r2, r2, #23
    2eb8:	025b      	lsls	r3, r3, #9
    2eba:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ebc:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ebe:	4b32      	ldr	r3, [pc, #200]	; (2f88 <EXT_SPI_init+0x108>)
    2ec0:	05c9      	lsls	r1, r1, #23
    2ec2:	6299      	str	r1, [r3, #40]	; 0x28
    2ec4:	468a      	mov	sl, r1
    2ec6:	4931      	ldr	r1, [pc, #196]	; (2f8c <EXT_SPI_init+0x10c>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ec8:	46b9      	mov	r9, r7
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2eca:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2ecc:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2ece:	464d      	mov	r5, r9
    2ed0:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2ed2:	4647      	mov	r7, r8
    2ed4:	4339      	orrs	r1, r7
    2ed6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2ed8:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2eda:	2138      	movs	r1, #56	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2edc:	270f      	movs	r7, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2ede:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2ee0:	46bc      	mov	ip, r7
    2ee2:	43b8      	bics	r0, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2ee4:	2703      	movs	r7, #3
    2ee6:	4338      	orrs	r0, r7
    2ee8:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2eea:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2eec:	2080      	movs	r0, #128	; 0x80
    2eee:	0280      	lsls	r0, r0, #10
    2ef0:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2ef2:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2ef4:	4650      	mov	r0, sl
    2ef6:	6298      	str	r0, [r3, #40]	; 0x28
    2ef8:	4825      	ldr	r0, [pc, #148]	; (2f90 <EXT_SPI_init+0x110>)
    2efa:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2efc:	2051      	movs	r0, #81	; 0x51
    2efe:	4682      	mov	sl, r0
    2f00:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f02:	43a8      	bics	r0, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f04:	4645      	mov	r5, r8
    2f06:	4328      	orrs	r0, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f08:	4655      	mov	r5, sl
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f0a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f0c:	5558      	strb	r0, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2f0e:	4665      	mov	r5, ip
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f10:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2f12:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    2f14:	3521      	adds	r5, #33	; 0x21
    2f16:	4328      	orrs	r0, r5
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f18:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2f1a:	2180      	movs	r1, #128	; 0x80
    2f1c:	02c9      	lsls	r1, r1, #11
    2f1e:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f20:	4a1c      	ldr	r2, [pc, #112]	; (2f94 <EXT_SPI_init+0x114>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f22:	2004      	movs	r0, #4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2f24:	629a      	str	r2, [r3, #40]	; 0x28
    2f26:	4a1c      	ldr	r2, [pc, #112]	; (2f98 <EXT_SPI_init+0x118>)
    2f28:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f2a:	2252      	movs	r2, #82	; 0x52
    2f2c:	5c99      	ldrb	r1, [r3, r2]
    2f2e:	4381      	bics	r1, r0
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f30:	4648      	mov	r0, r9
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2f32:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2f34:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2f36:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2f38:	4640      	mov	r0, r8
    2f3a:	4301      	orrs	r1, r0
    2f3c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2f3e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f40:	2139      	movs	r1, #57	; 0x39
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f42:	4660      	mov	r0, ip
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2f44:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2f46:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    2f48:	433a      	orrs	r2, r7
    2f4a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2f4c:	545a      	strb	r2, [r3, r1]
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    2f4e:	0020      	movs	r0, r4
    2f50:	0031      	movs	r1, r6
    2f52:	47d8      	blx	fp
	spi_m_sync_get_io_descriptor(&EXT_SPI, &ext_spi);
    2f54:	4911      	ldr	r1, [pc, #68]	; (2f9c <EXT_SPI_init+0x11c>)
    2f56:	0020      	movs	r0, r4
    2f58:	4b11      	ldr	r3, [pc, #68]	; (2fa0 <EXT_SPI_init+0x120>)
    2f5a:	4798      	blx	r3
	spi_m_sync_enable(&EXT_SPI);
    2f5c:	0020      	movs	r0, r4
    2f5e:	4b11      	ldr	r3, [pc, #68]	; (2fa4 <EXT_SPI_init+0x124>)
    2f60:	4798      	blx	r3
}
    2f62:	bc3c      	pop	{r2, r3, r4, r5}
    2f64:	4690      	mov	r8, r2
    2f66:	4699      	mov	r9, r3
    2f68:	46a2      	mov	sl, r4
    2f6a:	46ab      	mov	fp, r5
    2f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	40000400 	.word	0x40000400
    2f74:	20001010 	.word	0x20001010
    2f78:	42001400 	.word	0x42001400
    2f7c:	00004010 	.word	0x00004010
    2f80:	40000c00 	.word	0x40000c00
    2f84:	00000429 	.word	0x00000429
    2f88:	41004400 	.word	0x41004400
    2f8c:	c0000001 	.word	0xc0000001
    2f90:	c0000002 	.word	0xc0000002
    2f94:	40020000 	.word	0x40020000
    2f98:	c0020004 	.word	0xc0020004
    2f9c:	2000100c 	.word	0x2000100c
    2fa0:	000004a5 	.word	0x000004a5
    2fa4:	0000047d 	.word	0x0000047d

00002fa8 <EXT_SPI_ReadBuff>:
void EXT_SPI_ReadBuff(uint8_t* buff, uint16_t len){
    2fa8:	b510      	push	{r4, lr}
	io_read(ext_spi,buff,len);
    2faa:	4b04      	ldr	r3, [pc, #16]	; (2fbc <EXT_SPI_ReadBuff+0x14>)
void EXT_SPI_ReadBuff(uint8_t* buff, uint16_t len){
    2fac:	000a      	movs	r2, r1
	io_read(ext_spi,buff,len);
    2fae:	681b      	ldr	r3, [r3, #0]
    2fb0:	0001      	movs	r1, r0
    2fb2:	0018      	movs	r0, r3
    2fb4:	4b02      	ldr	r3, [pc, #8]	; (2fc0 <EXT_SPI_ReadBuff+0x18>)
    2fb6:	4798      	blx	r3
}
    2fb8:	bd10      	pop	{r4, pc}
    2fba:	46c0      	nop			; (mov r8, r8)
    2fbc:	2000100c 	.word	0x2000100c
    2fc0:	00000345 	.word	0x00000345

00002fc4 <EXT_SPI_WriteBuff>:
void EXT_SPI_WriteBuff(uint8_t* buff, uint16_t len){
    2fc4:	b510      	push	{r4, lr}
	io_write(ext_spi,buff,len);
    2fc6:	4b04      	ldr	r3, [pc, #16]	; (2fd8 <EXT_SPI_WriteBuff+0x14>)
void EXT_SPI_WriteBuff(uint8_t* buff, uint16_t len){
    2fc8:	000a      	movs	r2, r1
	io_write(ext_spi,buff,len);
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	0001      	movs	r1, r0
    2fce:	0018      	movs	r0, r3
    2fd0:	4b02      	ldr	r3, [pc, #8]	; (2fdc <EXT_SPI_WriteBuff+0x18>)
    2fd2:	4798      	blx	r3
}
    2fd4:	bd10      	pop	{r4, pc}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	2000100c 	.word	0x2000100c
    2fdc:	0000033d 	.word	0x0000033d

00002fe0 <EXT_SPI_write_Byte>:
void EXT_SPI_write_Byte(uint8_t arg){
    2fe0:	b500      	push	{lr}
    2fe2:	b083      	sub	sp, #12
    2fe4:	466b      	mov	r3, sp
    2fe6:	1dd9      	adds	r1, r3, #7
	io_write(ext_spi, &arg, 1);
    2fe8:	4b03      	ldr	r3, [pc, #12]	; (2ff8 <EXT_SPI_write_Byte+0x18>)
void EXT_SPI_write_Byte(uint8_t arg){
    2fea:	7008      	strb	r0, [r1, #0]
	io_write(ext_spi, &arg, 1);
    2fec:	2201      	movs	r2, #1
    2fee:	6818      	ldr	r0, [r3, #0]
    2ff0:	4b02      	ldr	r3, [pc, #8]	; (2ffc <EXT_SPI_write_Byte+0x1c>)
    2ff2:	4798      	blx	r3
}
    2ff4:	b003      	add	sp, #12
    2ff6:	bd00      	pop	{pc}
    2ff8:	2000100c 	.word	0x2000100c
    2ffc:	0000033d 	.word	0x0000033d

00003000 <EXT_I2C_init>:
void EXT_I2C_init(void){
    3000:	b5f0      	push	{r4, r5, r6, r7, lr}
    3002:	46c6      	mov	lr, r8
    3004:	2110      	movs	r1, #16
    3006:	b500      	push	{lr}
    3008:	4a1d      	ldr	r2, [pc, #116]	; (3080 <EXT_I2C_init+0x80>)
	i2c_m_sync_init(&EXT_I2C, SERCOM2);
    300a:	4c1e      	ldr	r4, [pc, #120]	; (3084 <EXT_I2C_init+0x84>)
    300c:	6a13      	ldr	r3, [r2, #32]
    300e:	0020      	movs	r0, r4
    3010:	430b      	orrs	r3, r1
    3012:	6213      	str	r3, [r2, #32]
    3014:	4b1c      	ldr	r3, [pc, #112]	; (3088 <EXT_I2C_init+0x88>)
    3016:	4a1d      	ldr	r2, [pc, #116]	; (308c <EXT_I2C_init+0x8c>)
    3018:	491d      	ldr	r1, [pc, #116]	; (3090 <EXT_I2C_init+0x90>)
    301a:	805a      	strh	r2, [r3, #2]
    301c:	4a1d      	ldr	r2, [pc, #116]	; (3094 <EXT_I2C_init+0x94>)
	tmp &= ~PORT_PINCFG_PMUXEN;
    301e:	2701      	movs	r7, #1
    3020:	805a      	strh	r2, [r3, #2]
    3022:	4b1d      	ldr	r3, [pc, #116]	; (3098 <EXT_I2C_init+0x98>)
    3024:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3026:	204c      	movs	r0, #76	; 0x4c
    3028:	2204      	movs	r2, #4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    302a:	2601      	movs	r6, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    302c:	4b1b      	ldr	r3, [pc, #108]	; (309c <EXT_I2C_init+0x9c>)
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    302e:	2536      	movs	r5, #54	; 0x36
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    3030:	5c19      	ldrb	r1, [r3, r0]
    3032:	4391      	bics	r1, r2
    3034:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3036:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3038:	43b9      	bics	r1, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    303a:	4331      	orrs	r1, r6
    303c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    303e:	5419      	strb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3040:	210f      	movs	r1, #15
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3042:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    3044:	4688      	mov	r8, r1
    3046:	4388      	bics	r0, r1
	tmp |= PORT_PMUX_PMUXE(data);
    3048:	390d      	subs	r1, #13
    304a:	4308      	orrs	r0, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    304c:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    304e:	204d      	movs	r0, #77	; 0x4d
    3050:	5c19      	ldrb	r1, [r3, r0]
    3052:	4391      	bics	r1, r2
    3054:	5419      	strb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3056:	4641      	mov	r1, r8
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3058:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    305a:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    305c:	4332      	orrs	r2, r6
    305e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3060:	541a      	strb	r2, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3062:	5d5a      	ldrb	r2, [r3, r5]
	i2c_m_sync_get_io_descriptor(&EXT_I2C, &ext_i2c);
    3064:	0020      	movs	r0, r4
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    3066:	4011      	ands	r1, r2
	tmp |= PORT_PMUX_PMUXO(data);
    3068:	2220      	movs	r2, #32
    306a:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    306c:	5559      	strb	r1, [r3, r5]
    306e:	490c      	ldr	r1, [pc, #48]	; (30a0 <EXT_I2C_init+0xa0>)
    3070:	4b0c      	ldr	r3, [pc, #48]	; (30a4 <EXT_I2C_init+0xa4>)
    3072:	4798      	blx	r3
	i2c_m_sync_enable(&EXT_I2C);
    3074:	0020      	movs	r0, r4
    3076:	4b0c      	ldr	r3, [pc, #48]	; (30a8 <EXT_I2C_init+0xa8>)
    3078:	4798      	blx	r3
}
    307a:	bc04      	pop	{r2}
    307c:	4690      	mov	r8, r2
    307e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3080:	40000400 	.word	0x40000400
    3084:	200010b4 	.word	0x200010b4
    3088:	40000c00 	.word	0x40000c00
    308c:	0000400f 	.word	0x0000400f
    3090:	42001000 	.word	0x42001000
    3094:	0000430c 	.word	0x0000430c
    3098:	000002e9 	.word	0x000002e9
    309c:	41004400 	.word	0x41004400
    30a0:	20001044 	.word	0x20001044
    30a4:	00000335 	.word	0x00000335
    30a8:	00000329 	.word	0x00000329

000030ac <rxBytesGet>:
	return serialComplete;
    30ac:	4b01      	ldr	r3, [pc, #4]	; (30b4 <rxBytesGet+0x8>)
    30ae:	7818      	ldrb	r0, [r3, #0]
    30b0:	b2c0      	uxtb	r0, r0
}
    30b2:	4770      	bx	lr
    30b4:	20000aa3 	.word	0x20000aa3

000030b8 <SerialReady>:
uint8_t SerialReady(uint8_t* buff) {
    30b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ba:	46c6      	mov	lr, r8
    30bc:	b500      	push	{lr}
	if (serialBufferOverflow) {
    30be:	4d13      	ldr	r5, [pc, #76]	; (310c <SerialReady+0x54>)
    30c0:	782b      	ldrb	r3, [r5, #0]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d006      	beq.n	30d4 <SerialReady+0x1c>
		serialBufferOverflow = 0; // ???????? ???? ????????????
    30c6:	2300      	movs	r3, #0
		return 2; // ??? ??? ????????????
    30c8:	2402      	movs	r4, #2
		serialBufferOverflow = 0; // ???????? ???? ????????????
    30ca:	702b      	strb	r3, [r5, #0]
}
    30cc:	0020      	movs	r0, r4
    30ce:	bc04      	pop	{r2}
    30d0:	4690      	mov	r8, r2
    30d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (serialComplete) {
    30d4:	4e0e      	ldr	r6, [pc, #56]	; (3110 <SerialReady+0x58>)
	return 0; // ???? ?? ?? ??????
    30d6:	2400      	movs	r4, #0
	if (serialComplete) {
    30d8:	7833      	ldrb	r3, [r6, #0]
    30da:	2b00      	cmp	r3, #0
    30dc:	d0f6      	beq.n	30cc <SerialReady+0x14>
		memcpy(buff, rx_buffer, serialReceivedBytesCounter + 1); // ???????? ? '\0'
    30de:	4b0d      	ldr	r3, [pc, #52]	; (3114 <SerialReady+0x5c>)
    30e0:	4f0d      	ldr	r7, [pc, #52]	; (3118 <SerialReady+0x60>)
    30e2:	4698      	mov	r8, r3
    30e4:	783a      	ldrb	r2, [r7, #0]
    30e6:	0019      	movs	r1, r3
    30e8:	3201      	adds	r2, #1
    30ea:	4b0c      	ldr	r3, [pc, #48]	; (311c <SerialReady+0x64>)
    30ec:	4798      	blx	r3
		memset(rx_buffer, 0, RX_BUFFER_SIZE);                   // ???????? ?????
    30ee:	4b0c      	ldr	r3, [pc, #48]	; (3120 <SerialReady+0x68>)
    30f0:	2280      	movs	r2, #128	; 0x80
    30f2:	2100      	movs	r1, #0
    30f4:	4640      	mov	r0, r8
    30f6:	4798      	blx	r3
		DEBUG_SERIAL.rx.read_index = 0;
    30f8:	4b0a      	ldr	r3, [pc, #40]	; (3124 <SerialReady+0x6c>)
		serialComplete = 0;
    30fa:	7034      	strb	r4, [r6, #0]
		DEBUG_SERIAL.rx.read_index = 0;
    30fc:	63dc      	str	r4, [r3, #60]	; 0x3c
		DEBUG_SERIAL.rx.write_index = 0;
    30fe:	641c      	str	r4, [r3, #64]	; 0x40
		serialReceiving = 0;
    3100:	4b09      	ldr	r3, [pc, #36]	; (3128 <SerialReady+0x70>)
		serialReceivedBytesCounter = 0;
    3102:	703c      	strb	r4, [r7, #0]
		serialReceiving = 0;
    3104:	701c      	strb	r4, [r3, #0]
		serialBufferOverflow = 0;
    3106:	702c      	strb	r4, [r5, #0]
		return 1; // ??????? ???????? ????
    3108:	3401      	adds	r4, #1
    310a:	e7df      	b.n	30cc <SerialReady+0x14>
    310c:	20000aa2 	.word	0x20000aa2
    3110:	20000aa3 	.word	0x20000aa3
    3114:	20000f8c 	.word	0x20000f8c
    3118:	20000aa4 	.word	0x20000aa4
    311c:	0000b5f9 	.word	0x0000b5f9
    3120:	0000b67d 	.word	0x0000b67d
    3124:	20001048 	.word	0x20001048
    3128:	20000aa5 	.word	0x20000aa5

0000312c <DEBUG_Serial_init>:
    312c:	2140      	movs	r1, #64	; 0x40
void DEBUG_Serial_init(void) {
    312e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3130:	4a27      	ldr	r2, [pc, #156]	; (31d0 <DEBUG_Serial_init+0xa4>)
	usart_async_init(&DEBUG_SERIAL, SERCOM4, rx_buffer, RX_BUFFER_SIZE, (void *)NULL);
    3132:	4c28      	ldr	r4, [pc, #160]	; (31d4 <DEBUG_Serial_init+0xa8>)
    3134:	6a13      	ldr	r3, [r2, #32]
void DEBUG_Serial_init(void) {
    3136:	b085      	sub	sp, #20
    3138:	430b      	orrs	r3, r1
    313a:	6213      	str	r3, [r2, #32]
    313c:	4a26      	ldr	r2, [pc, #152]	; (31d8 <DEBUG_Serial_init+0xac>)
    313e:	4b27      	ldr	r3, [pc, #156]	; (31dc <DEBUG_Serial_init+0xb0>)
	usart_async_init(&DEBUG_SERIAL, SERCOM4, rx_buffer, RX_BUFFER_SIZE, (void *)NULL);
    3140:	4927      	ldr	r1, [pc, #156]	; (31e0 <DEBUG_Serial_init+0xb4>)
    3142:	805a      	strh	r2, [r3, #2]
    3144:	2300      	movs	r3, #0
    3146:	4a27      	ldr	r2, [pc, #156]	; (31e4 <DEBUG_Serial_init+0xb8>)
    3148:	9300      	str	r3, [sp, #0]
    314a:	4d27      	ldr	r5, [pc, #156]	; (31e8 <DEBUG_Serial_init+0xbc>)
    314c:	3380      	adds	r3, #128	; 0x80
    314e:	0020      	movs	r0, r4
    3150:	47a8      	blx	r5
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3152:	21cc      	movs	r1, #204	; 0xcc
	tmp &= ~PORT_PINCFG_PMUXEN;
    3154:	2001      	movs	r0, #1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3156:	2701      	movs	r7, #1
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3158:	4b24      	ldr	r3, [pc, #144]	; (31ec <DEBUG_Serial_init+0xc0>)
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    315a:	260f      	movs	r6, #15
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    315c:	5c5a      	ldrb	r2, [r3, r1]
	tmp |= PORT_PMUX_PMUXE(data);
    315e:	2502      	movs	r5, #2
	tmp &= ~PORT_PINCFG_PMUXEN;
    3160:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    3162:	433a      	orrs	r2, r7
    3164:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3166:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3168:	22b6      	movs	r2, #182	; 0xb6
	tmp &= ~PORT_PINCFG_PMUXEN;
    316a:	4684      	mov	ip, r0
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    316c:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    316e:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
    3170:	4328      	orrs	r0, r5
    3172:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3174:	5498      	strb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    3176:	4660      	mov	r0, ip
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    3178:	3218      	adds	r2, #24
    317a:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    317c:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    317e:	4339      	orrs	r1, r7
    3180:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    3182:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    3184:	21b7      	movs	r1, #183	; 0xb7
    3186:	5c5a      	ldrb	r2, [r3, r1]
	usart_async_get_io_descriptor(&DEBUG_SERIAL, &debug_serial);
    3188:	0020      	movs	r0, r4
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    318a:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    318c:	432a      	orrs	r2, r5
    318e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    3190:	545a      	strb	r2, [r3, r1]
    3192:	4b17      	ldr	r3, [pc, #92]	; (31f0 <DEBUG_Serial_init+0xc4>)
    3194:	4917      	ldr	r1, [pc, #92]	; (31f4 <DEBUG_Serial_init+0xc8>)
    3196:	4798      	blx	r3
	usart_async_register_callback(&DEBUG_SERIAL, USART_ASYNC_TXC_CB, tx_cb_USART);
    3198:	4d17      	ldr	r5, [pc, #92]	; (31f8 <DEBUG_Serial_init+0xcc>)
    319a:	4a18      	ldr	r2, [pc, #96]	; (31fc <DEBUG_Serial_init+0xd0>)
    319c:	2101      	movs	r1, #1
    319e:	0020      	movs	r0, r4
    31a0:	47a8      	blx	r5
	usart_async_register_callback(&DEBUG_SERIAL, USART_ASYNC_RXC_CB, rx_cb_USART);
    31a2:	4a17      	ldr	r2, [pc, #92]	; (3200 <DEBUG_Serial_init+0xd4>)
    31a4:	2100      	movs	r1, #0
    31a6:	0020      	movs	r0, r4
    31a8:	47a8      	blx	r5
	usart_async_register_callback(&DEBUG_SERIAL, USART_ASYNC_ERROR_CB, err_cb_USART);
    31aa:	4a16      	ldr	r2, [pc, #88]	; (3204 <DEBUG_Serial_init+0xd8>)
    31ac:	2102      	movs	r1, #2
    31ae:	0020      	movs	r0, r4
    31b0:	47a8      	blx	r5
    31b2:	4d15      	ldr	r5, [pc, #84]	; (3208 <DEBUG_Serial_init+0xdc>)
	while (io_read(&DEBUG_SERIAL, &dummy, 1));
    31b4:	230f      	movs	r3, #15
    31b6:	446b      	add	r3, sp
    31b8:	2201      	movs	r2, #1
    31ba:	0019      	movs	r1, r3
    31bc:	0020      	movs	r0, r4
    31be:	47a8      	blx	r5
    31c0:	2800      	cmp	r0, #0
    31c2:	d1f7      	bne.n	31b4 <DEBUG_Serial_init+0x88>
	usart_async_enable(&DEBUG_SERIAL);
    31c4:	0020      	movs	r0, r4
    31c6:	4b11      	ldr	r3, [pc, #68]	; (320c <DEBUG_Serial_init+0xe0>)
    31c8:	4798      	blx	r3
}
    31ca:	b005      	add	sp, #20
    31cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	40000400 	.word	0x40000400
    31d4:	20001048 	.word	0x20001048
    31d8:	00004011 	.word	0x00004011
    31dc:	40000c00 	.word	0x40000c00
    31e0:	42001800 	.word	0x42001800
    31e4:	20000f8c 	.word	0x20000f8c
    31e8:	000008bd 	.word	0x000008bd
    31ec:	41004400 	.word	0x41004400
    31f0:	00000979 	.word	0x00000979
    31f4:	20001040 	.word	0x20001040
    31f8:	000009a5 	.word	0x000009a5
    31fc:	00002821 	.word	0x00002821
    3200:	0000286d 	.word	0x0000286d
    3204:	00002845 	.word	0x00002845
    3208:	00000345 	.word	0x00000345
    320c:	0000094d 	.word	0x0000094d

00003210 <mcu_init>:
{
    3210:	b5f0      	push	{r4, r5, r6, r7, lr}
    3212:	46c6      	mov	lr, r8
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    3214:	4b2c      	ldr	r3, [pc, #176]	; (32c8 <mcu_init+0xb8>)
    3216:	b500      	push	{lr}
    3218:	4798      	blx	r3
	gpio_init();
    321a:	4b2c      	ldr	r3, [pc, #176]	; (32cc <mcu_init+0xbc>)
    321c:	4798      	blx	r3
	ETH_SPI_init();
    321e:	4b2c      	ldr	r3, [pc, #176]	; (32d0 <mcu_init+0xc0>)
    3220:	4798      	blx	r3
	EXT_SPI_init();
    3222:	4b2c      	ldr	r3, [pc, #176]	; (32d4 <mcu_init+0xc4>)
    3224:	4798      	blx	r3
	EXT_I2C_init();
    3226:	4b2c      	ldr	r3, [pc, #176]	; (32d8 <mcu_init+0xc8>)
    3228:	4798      	blx	r3
	DEBUG_Serial_init();
    322a:	4b2c      	ldr	r3, [pc, #176]	; (32dc <mcu_init+0xcc>)
    322c:	4798      	blx	r3
	ext_irq_register(ETH_INT, ETH_Handler);
    322e:	492c      	ldr	r1, [pc, #176]	; (32e0 <mcu_init+0xd0>)
    3230:	4b2c      	ldr	r3, [pc, #176]	; (32e4 <mcu_init+0xd4>)
    3232:	2028      	movs	r0, #40	; 0x28
    3234:	4798      	blx	r3
		PM->APBAMASK.reg |= 1 << peripheral;
    3236:	2120      	movs	r1, #32
    3238:	4a2b      	ldr	r2, [pc, #172]	; (32e8 <mcu_init+0xd8>)
    323a:	4f2c      	ldr	r7, [pc, #176]	; (32ec <mcu_init+0xdc>)
    323c:	6993      	ldr	r3, [r2, #24]
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_IRQ, RTC, _rtc_get_timer());
	
	TIMER_task1.interval = 32768/16;
	TIMER_task1.cb       = TIMER_0_task1_cb;
	TIMER_task1.mode     = TIMER_TASK_REPEAT;
    323e:	2601      	movs	r6, #1
    3240:	430b      	orrs	r3, r1
    3242:	6193      	str	r3, [r2, #24]
    3244:	4b2a      	ldr	r3, [pc, #168]	; (32f0 <mcu_init+0xe0>)
    3246:	807b      	strh	r3, [r7, #2]
	timer_init(&TIMER_IRQ, RTC, _rtc_get_timer());
    3248:	4b2a      	ldr	r3, [pc, #168]	; (32f4 <mcu_init+0xe4>)
    324a:	4798      	blx	r3
    324c:	4c2a      	ldr	r4, [pc, #168]	; (32f8 <mcu_init+0xe8>)
    324e:	0002      	movs	r2, r0
    3250:	492a      	ldr	r1, [pc, #168]	; (32fc <mcu_init+0xec>)
    3252:	0020      	movs	r0, r4
    3254:	4b2a      	ldr	r3, [pc, #168]	; (3300 <mcu_init+0xf0>)
    3256:	4798      	blx	r3
	TIMER_task1.interval = 32768/16;
    3258:	2380      	movs	r3, #128	; 0x80
	
	TIMER_task2.interval = 32768/16;
    325a:	4d2a      	ldr	r5, [pc, #168]	; (3304 <mcu_init+0xf4>)
	TIMER_task1.interval = 32768/16;
    325c:	492a      	ldr	r1, [pc, #168]	; (3308 <mcu_init+0xf8>)
    325e:	011b      	lsls	r3, r3, #4
	TIMER_task2.interval = 32768/16;
    3260:	60ab      	str	r3, [r5, #8]
	TIMER_task1.interval = 32768/16;
    3262:	608b      	str	r3, [r1, #8]
	TIMER_task2.cb       = TIMER_0_task2_cb;
    3264:	4b29      	ldr	r3, [pc, #164]	; (330c <mcu_init+0xfc>)
	TIMER_task1.cb       = TIMER_0_task1_cb;
    3266:	4a2a      	ldr	r2, [pc, #168]	; (3310 <mcu_init+0x100>)
	TIMER_task2.cb       = TIMER_0_task2_cb;
    3268:	60eb      	str	r3, [r5, #12]
	TIMER_task2.mode     = TIMER_TASK_REPEAT;

	timer_add_task(&TIMER_IRQ, &TIMER_task1);
    326a:	4b2a      	ldr	r3, [pc, #168]	; (3314 <mcu_init+0x104>)
    326c:	0020      	movs	r0, r4
	TIMER_task1.cb       = TIMER_0_task1_cb;
    326e:	60ca      	str	r2, [r1, #12]
	timer_add_task(&TIMER_IRQ, &TIMER_task1);
    3270:	4698      	mov	r8, r3
	TIMER_task1.mode     = TIMER_TASK_REPEAT;
    3272:	740e      	strb	r6, [r1, #16]
	TIMER_task2.mode     = TIMER_TASK_REPEAT;
    3274:	742e      	strb	r6, [r5, #16]
	timer_add_task(&TIMER_IRQ, &TIMER_task1);
    3276:	4798      	blx	r3
	timer_add_task(&TIMER_IRQ, &TIMER_task2);
    3278:	0029      	movs	r1, r5
    327a:	0020      	movs	r0, r4
    327c:	47c0      	blx	r8
	timer_start(&TIMER_IRQ);
    327e:	0020      	movs	r0, r4
    3280:	4b25      	ldr	r3, [pc, #148]	; (3318 <mcu_init+0x108>)
    3282:	4798      	blx	r3
    3284:	4b25      	ldr	r3, [pc, #148]	; (331c <mcu_init+0x10c>)
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    3286:	2180      	movs	r1, #128	; 0x80
    3288:	22c0      	movs	r2, #192	; 0xc0
    328a:	807b      	strh	r3, [r7, #2]
    328c:	2384      	movs	r3, #132	; 0x84
    328e:	0049      	lsls	r1, r1, #1
    3290:	05d2      	lsls	r2, r2, #23
    3292:	50d1      	str	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    3294:	22a8      	movs	r2, #168	; 0xa8
    3296:	4b22      	ldr	r3, [pc, #136]	; (3320 <mcu_init+0x110>)
    3298:	4922      	ldr	r1, [pc, #136]	; (3324 <mcu_init+0x114>)
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    329a:	2004      	movs	r0, #4
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    329c:	5099      	str	r1, [r3, r2]
    329e:	4922      	ldr	r1, [pc, #136]	; (3328 <mcu_init+0x118>)
    32a0:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    32a2:	21c8      	movs	r1, #200	; 0xc8
    32a4:	5c5a      	ldrb	r2, [r3, r1]
    32a6:	4382      	bics	r2, r0
    32a8:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    32aa:	5c5a      	ldrb	r2, [r3, r1]
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    32ac:	3803      	subs	r0, #3
	tmp &= ~PORT_PINCFG_PMUXEN;
    32ae:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    32b0:	4302      	orrs	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    32b2:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    32b4:	3914      	subs	r1, #20
    32b6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    32b8:	300e      	adds	r0, #14
    32ba:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    32bc:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    32be:	4b1b      	ldr	r3, [pc, #108]	; (332c <mcu_init+0x11c>)
    32c0:	4798      	blx	r3
}
    32c2:	bc04      	pop	{r2}
    32c4:	4690      	mov	r8, r2
    32c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32c8:	00000bf5 	.word	0x00000bf5
    32cc:	00002965 	.word	0x00002965
    32d0:	00002cad 	.word	0x00002cad
    32d4:	00002e81 	.word	0x00002e81
    32d8:	00003001 	.word	0x00003001
    32dc:	0000312d 	.word	0x0000312d
    32e0:	00002949 	.word	0x00002949
    32e4:	00000249 	.word	0x00000249
    32e8:	40000400 	.word	0x40000400
    32ec:	40000c00 	.word	0x40000c00
    32f0:	00004302 	.word	0x00004302
    32f4:	00000edd 	.word	0x00000edd
    32f8:	20001098 	.word	0x20001098
    32fc:	40001400 	.word	0x40001400
    3300:	000005b9 	.word	0x000005b9
    3304:	20000a8c 	.word	0x20000a8c
    3308:	20000a78 	.word	0x20000a78
    330c:	00002839 	.word	0x00002839
    3310:	0000282d 	.word	0x0000282d
    3314:	00000639 	.word	0x00000639
    3318:	000005fd 	.word	0x000005fd
    331c:	00004103 	.word	0x00004103
    3320:	41004400 	.word	0x41004400
    3324:	40020100 	.word	0x40020100
    3328:	c0020000 	.word	0xc0020000
    332c:	00000225 	.word	0x00000225

00003330 <SerialWrite>:
void SerialWrite(uint8_t* buff) {
    3330:	b570      	push	{r4, r5, r6, lr}
	uint8_t buffLen = strlen((char *)buff);
    3332:	4b13      	ldr	r3, [pc, #76]	; (3380 <SerialWrite+0x50>)
void SerialWrite(uint8_t* buff) {
    3334:	0005      	movs	r5, r0
	uint8_t buffLen = strlen((char *)buff);
    3336:	4798      	blx	r3
    3338:	b2c0      	uxtb	r0, r0
	if (buffLen >= 1) {
    333a:	2800      	cmp	r0, #0
    333c:	d100      	bne.n	3340 <SerialWrite+0x10>
}
    333e:	bd70      	pop	{r4, r5, r6, pc}
		serialTransmitting = 1;
    3340:	2301      	movs	r3, #1
		io_write(debug_serial, buff, buffLen);
    3342:	4e10      	ldr	r6, [pc, #64]	; (3384 <SerialWrite+0x54>)
		serialTransmitting = 1;
    3344:	4c10      	ldr	r4, [pc, #64]	; (3388 <SerialWrite+0x58>)
		io_write(debug_serial, buff, buffLen);
    3346:	b282      	uxth	r2, r0
    3348:	0029      	movs	r1, r5
    334a:	6830      	ldr	r0, [r6, #0]
    334c:	4d0f      	ldr	r5, [pc, #60]	; (338c <SerialWrite+0x5c>)
		serialTransmitting = 1;
    334e:	7023      	strb	r3, [r4, #0]
		io_write(debug_serial, buff, buffLen);
    3350:	47a8      	blx	r5
		while (serialTransmitting && --timeout);
    3352:	4b0f      	ldr	r3, [pc, #60]	; (3390 <SerialWrite+0x60>)
    3354:	e002      	b.n	335c <SerialWrite+0x2c>
    3356:	3b01      	subs	r3, #1
    3358:	2b00      	cmp	r3, #0
    335a:	d002      	beq.n	3362 <SerialWrite+0x32>
    335c:	7822      	ldrb	r2, [r4, #0]
    335e:	2a00      	cmp	r2, #0
    3360:	d1f9      	bne.n	3356 <SerialWrite+0x26>
		serialTransmitting = 1;
    3362:	2301      	movs	r3, #1
		io_write(debug_serial, "\r\n", 2);
    3364:	6830      	ldr	r0, [r6, #0]
    3366:	2202      	movs	r2, #2
    3368:	490a      	ldr	r1, [pc, #40]	; (3394 <SerialWrite+0x64>)
		serialTransmitting = 1;
    336a:	7023      	strb	r3, [r4, #0]
		io_write(debug_serial, "\r\n", 2);
    336c:	47a8      	blx	r5
		while (serialTransmitting && --timeout);
    336e:	4b08      	ldr	r3, [pc, #32]	; (3390 <SerialWrite+0x60>)
    3370:	e002      	b.n	3378 <SerialWrite+0x48>
    3372:	3b01      	subs	r3, #1
    3374:	2b00      	cmp	r3, #0
    3376:	d0e2      	beq.n	333e <SerialWrite+0xe>
    3378:	7822      	ldrb	r2, [r4, #0]
    337a:	2a00      	cmp	r2, #0
    337c:	d1f9      	bne.n	3372 <SerialWrite+0x42>
    337e:	e7de      	b.n	333e <SerialWrite+0xe>
    3380:	0000bb9d 	.word	0x0000bb9d
    3384:	20001040 	.word	0x20001040
    3388:	20000aa6 	.word	0x20000aa6
    338c:	0000033d 	.word	0x0000033d
    3390:	000186a0 	.word	0x000186a0
    3394:	00018928 	.word	0x00018928

00003398 <_write>:
	serialTransmitting = 1;
    3398:	2301      	movs	r3, #1
uint32_t _write(int file, char *ptr, int len) {
    339a:	b570      	push	{r4, r5, r6, lr}
	serialTransmitting = 1;
    339c:	4c06      	ldr	r4, [pc, #24]	; (33b8 <_write+0x20>)
uint32_t _write(int file, char *ptr, int len) {
    339e:	0015      	movs	r5, r2
	serialTransmitting = 1;
    33a0:	7023      	strb	r3, [r4, #0]
	io_write(debug_serial, (uint8_t *)ptr, len);
    33a2:	4b06      	ldr	r3, [pc, #24]	; (33bc <_write+0x24>)
    33a4:	b292      	uxth	r2, r2
    33a6:	6818      	ldr	r0, [r3, #0]
    33a8:	4b05      	ldr	r3, [pc, #20]	; (33c0 <_write+0x28>)
    33aa:	4798      	blx	r3
	while (serialTransmitting); 
    33ac:	7823      	ldrb	r3, [r4, #0]
    33ae:	2b00      	cmp	r3, #0
    33b0:	d1fc      	bne.n	33ac <_write+0x14>
}
    33b2:	0028      	movs	r0, r5
    33b4:	bd70      	pop	{r4, r5, r6, pc}
    33b6:	46c0      	nop			; (mov r8, r8)
    33b8:	20000aa6 	.word	0x20000aa6
    33bc:	20001040 	.word	0x20001040
    33c0:	0000033d 	.word	0x0000033d

000033c4 <_read>:
}
    33c4:	2000      	movs	r0, #0
    33c6:	4770      	bx	lr

000033c8 <GetIpSwitch>:
uint8_t GetIpSwitch(void){
    33c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ca:	46de      	mov	lr, fp
    33cc:	4657      	mov	r7, sl
    33ce:	464e      	mov	r6, r9
    33d0:	4645      	mov	r5, r8
    33d2:	b5e0      	push	{r5, r6, r7, lr}
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    33d4:	4b30      	ldr	r3, [pc, #192]	; (3498 <GetIpSwitch+0xd0>)
    33d6:	b087      	sub	sp, #28
    33d8:	a805      	add	r0, sp, #20
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    33da:	25c0      	movs	r5, #192	; 0xc0
    33dc:	469b      	mov	fp, r3
    33de:	4798      	blx	r3
    33e0:	2380      	movs	r3, #128	; 0x80
    33e2:	05ed      	lsls	r5, r5, #23
    33e4:	58e8      	ldr	r0, [r5, r3]
    33e6:	469a      	mov	sl, r3
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    33e8:	4b2c      	ldr	r3, [pc, #176]	; (349c <GetIpSwitch+0xd4>)
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    33ea:	2790      	movs	r7, #144	; 0x90
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    33ec:	4699      	mov	r9, r3
    33ee:	23a0      	movs	r3, #160	; 0xa0
    33f0:	4698      	mov	r8, r3
    33f2:	464b      	mov	r3, r9
    33f4:	4642      	mov	r2, r8
    33f6:	589a      	ldr	r2, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    33f8:	59eb      	ldr	r3, [r5, r7]
	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;

	CRITICAL_SECTION_LEAVE();
    33fa:	4e29      	ldr	r6, [pc, #164]	; (34a0 <GetIpSwitch+0xd8>)
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    33fc:	4053      	eors	r3, r2
    33fe:	4018      	ands	r0, r3
    3400:	4050      	eors	r0, r2
	CRITICAL_SECTION_LEAVE();
    3402:	aa05      	add	r2, sp, #20
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3404:	9001      	str	r0, [sp, #4]
	CRITICAL_SECTION_LEAVE();
    3406:	0010      	movs	r0, r2
    3408:	47b0      	blx	r6
	CRITICAL_SECTION_ENTER();
    340a:	aa04      	add	r2, sp, #16
    340c:	0010      	movs	r0, r2
    340e:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3410:	4652      	mov	r2, sl
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3412:	4641      	mov	r1, r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3414:	58ac      	ldr	r4, [r5, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3416:	464a      	mov	r2, r9
    3418:	5852      	ldr	r2, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    341a:	59eb      	ldr	r3, [r5, r7]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    341c:	4053      	eors	r3, r2
    341e:	401c      	ands	r4, r3
    3420:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    3422:	aa04      	add	r2, sp, #16
    3424:	0010      	movs	r0, r2
    3426:	47b0      	blx	r6
	CRITICAL_SECTION_ENTER();
    3428:	aa03      	add	r2, sp, #12
    342a:	0010      	movs	r0, r2
    342c:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    342e:	4652      	mov	r2, sl
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3430:	4641      	mov	r1, r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3432:	58ab      	ldr	r3, [r5, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    3434:	464a      	mov	r2, r9
    3436:	5851      	ldr	r1, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3438:	59ea      	ldr	r2, [r5, r7]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    343a:	404a      	eors	r2, r1
    343c:	4013      	ands	r3, r2
    343e:	404b      	eors	r3, r1
	CRITICAL_SECTION_LEAVE();
    3440:	a903      	add	r1, sp, #12
    3442:	0008      	movs	r0, r1
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3444:	9300      	str	r3, [sp, #0]
	CRITICAL_SECTION_LEAVE();
    3446:	47b0      	blx	r6
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    3448:	09e0      	lsrs	r0, r4, #7
    344a:	2401      	movs	r4, #1
    344c:	9a00      	ldr	r2, [sp, #0]
    344e:	4020      	ands	r0, r4
    3450:	0993      	lsrs	r3, r2, #6
    3452:	4023      	ands	r3, r4
	res |= (gpio_get_pin_level(IP_B2) << 2);
    3454:	009b      	lsls	r3, r3, #2
	res |= (gpio_get_pin_level(IP_B1) << 1);
    3456:	0040      	lsls	r0, r0, #1
	res |= (gpio_get_pin_level(IP_B2) << 2);
    3458:	4318      	orrs	r0, r3
    345a:	9b01      	ldr	r3, [sp, #4]
    345c:	095b      	lsrs	r3, r3, #5
    345e:	4023      	ands	r3, r4
    3460:	4318      	orrs	r0, r3
    3462:	9000      	str	r0, [sp, #0]
	CRITICAL_SECTION_ENTER();
    3464:	a802      	add	r0, sp, #8
    3466:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    3468:	4652      	mov	r2, sl
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    346a:	4641      	mov	r1, r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    346c:	58ab      	ldr	r3, [r5, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    346e:	464a      	mov	r2, r9
    3470:	5850      	ldr	r0, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    3472:	59ed      	ldr	r5, [r5, r7]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    3474:	4045      	eors	r5, r0
    3476:	401d      	ands	r5, r3
    3478:	4045      	eors	r5, r0
	CRITICAL_SECTION_LEAVE();
    347a:	a802      	add	r0, sp, #8
    347c:	47b0      	blx	r6
    347e:	0928      	lsrs	r0, r5, #4
    3480:	4020      	ands	r0, r4
	return res;
    3482:	9b00      	ldr	r3, [sp, #0]
	res |= (gpio_get_pin_level(IP_B3) << 3);
    3484:	00c0      	lsls	r0, r0, #3
	return res;
    3486:	4318      	orrs	r0, r3
}
    3488:	b007      	add	sp, #28
    348a:	bc3c      	pop	{r2, r3, r4, r5}
    348c:	4690      	mov	r8, r2
    348e:	4699      	mov	r9, r3
    3490:	46a2      	mov	sl, r4
    3492:	46ab      	mov	fp, r5
    3494:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3496:	46c0      	nop			; (mov r8, r8)
    3498:	0000018d 	.word	0x0000018d
    349c:	41004400 	.word	0x41004400
    34a0:	0000019d 	.word	0x0000019d

000034a4 <adcRequest>:
	adcConversionRequest = 0;
    34a4:	2200      	movs	r2, #0
	uint8_t retVal = adcConversionRequest;
    34a6:	4b02      	ldr	r3, [pc, #8]	; (34b0 <adcRequest+0xc>)
    34a8:	7818      	ldrb	r0, [r3, #0]
	adcConversionRequest = 0;
    34aa:	701a      	strb	r2, [r3, #0]
}
    34ac:	4770      	bx	lr
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	20000aa0 	.word	0x20000aa0

000034b4 <netInit>:
	.gw   = {192, 168, 1, 1},						// Gateway address
.dhcp = NETINFO_STATIC};						//Static IP configuration


uint8_t netInit(void){
	psuErr = 1;
    34b4:	2201      	movs	r2, #1
    34b6:	4b1f      	ldr	r3, [pc, #124]	; (3534 <netInit+0x80>)
uint8_t netInit(void){
    34b8:	b570      	push	{r4, r5, r6, lr}
	
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
    34ba:	491f      	ldr	r1, [pc, #124]	; (3538 <netInit+0x84>)
	psuErr = 1;
    34bc:	701a      	strb	r2, [r3, #0]
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
    34be:	481f      	ldr	r0, [pc, #124]	; (353c <netInit+0x88>)
    34c0:	4b1f      	ldr	r3, [pc, #124]	; (3540 <netInit+0x8c>)
    34c2:	4798      	blx	r3
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_Write_byte);
    34c4:	491f      	ldr	r1, [pc, #124]	; (3544 <netInit+0x90>)
    34c6:	4820      	ldr	r0, [pc, #128]	; (3548 <netInit+0x94>)
    34c8:	4b20      	ldr	r3, [pc, #128]	; (354c <netInit+0x98>)
    34ca:	4798      	blx	r3
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
    34cc:	4920      	ldr	r1, [pc, #128]	; (3550 <netInit+0x9c>)
    34ce:	4821      	ldr	r0, [pc, #132]	; (3554 <netInit+0xa0>)
    34d0:	4b21      	ldr	r3, [pc, #132]	; (3558 <netInit+0xa4>)
    34d2:	4798      	blx	r3
	wizphy_reset();
    34d4:	4b21      	ldr	r3, [pc, #132]	; (355c <netInit+0xa8>)
    34d6:	4798      	blx	r3
	delay_ms(100);
    34d8:	2064      	movs	r0, #100	; 0x64
    34da:	4b21      	ldr	r3, [pc, #132]	; (3560 <netInit+0xac>)
    34dc:	4798      	blx	r3
	wizchip_init(rx_tx_buff_sizes,rx_tx_buff_sizes);
    34de:	4821      	ldr	r0, [pc, #132]	; (3564 <netInit+0xb0>)
    34e0:	4b21      	ldr	r3, [pc, #132]	; (3568 <netInit+0xb4>)
    34e2:	0001      	movs	r1, r0
    34e4:	4798      	blx	r3
	netInfo.ip[3] = 90+GetIpSwitch();
    34e6:	4b21      	ldr	r3, [pc, #132]	; (356c <netInit+0xb8>)
    34e8:	4798      	blx	r3
    34ea:	4c21      	ldr	r4, [pc, #132]	; (3570 <netInit+0xbc>)
    34ec:	305a      	adds	r0, #90	; 0x5a
    34ee:	7260      	strb	r0, [r4, #9]
	wizchip_setnetinfo(&netInfo);
    34f0:	4b20      	ldr	r3, [pc, #128]	; (3574 <netInit+0xc0>)
    34f2:	0020      	movs	r0, r4
    34f4:	4798      	blx	r3
	ctlnetwork(CN_SET_NETINFO, (void*) &netInfo);
    34f6:	4b20      	ldr	r3, [pc, #128]	; (3578 <netInit+0xc4>)
    34f8:	0021      	movs	r1, r4
    34fa:	2000      	movs	r0, #0
    34fc:	4798      	blx	r3
	
	
	setIMR(0xff);
    34fe:	20b0      	movs	r0, #176	; 0xb0
    3500:	4d1e      	ldr	r5, [pc, #120]	; (357c <netInit+0xc8>)
    3502:	21ff      	movs	r1, #255	; 0xff
    3504:	0140      	lsls	r0, r0, #5
    3506:	47a8      	blx	r5
	setSIMR(0xff);
    3508:	20c0      	movs	r0, #192	; 0xc0
    350a:	21ff      	movs	r1, #255	; 0xff
    350c:	0140      	lsls	r0, r0, #5
    350e:	47a8      	blx	r5
	setINTLEVEL(1);
    3510:	2098      	movs	r0, #152	; 0x98
    3512:	2100      	movs	r1, #0
    3514:	0140      	lsls	r0, r0, #5
    3516:	47a8      	blx	r5
    3518:	20a0      	movs	r0, #160	; 0xa0
    351a:	2101      	movs	r1, #1
    351c:	0140      	lsls	r0, r0, #5
    351e:	47a8      	blx	r5
    3520:	4c17      	ldr	r4, [pc, #92]	; (3580 <netInit+0xcc>)
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    3522:	4e18      	ldr	r6, [pc, #96]	; (3584 <netInit+0xd0>)
		//setINTLEVEL(500);
		//setSn_IMR(HTTP_SOCKET, 0x04);
		setSn_IMR(HTTP_SOCKET, 0x04);
    3524:	0020      	movs	r0, r4
    3526:	2104      	movs	r1, #4
    3528:	3420      	adds	r4, #32
    352a:	47a8      	blx	r5
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    352c:	42b4      	cmp	r4, r6
    352e:	d1f9      	bne.n	3524 <netInit+0x70>
		//setSn_IR(HTTP_SOCKET, 0x1F);
	}
	return 1;
}
    3530:	2001      	movs	r0, #1
    3532:	bd70      	pop	{r4, r5, r6, pc}
    3534:	20000b29 	.word	0x20000b29
    3538:	00002df5 	.word	0x00002df5
    353c:	00002de9 	.word	0x00002de9
    3540:	00004d81 	.word	0x00004d81
    3544:	00002e61 	.word	0x00002e61
    3548:	00002e39 	.word	0x00002e39
    354c:	00004da5 	.word	0x00004da5
    3550:	00002e1d 	.word	0x00002e1d
    3554:	00002e01 	.word	0x00002e01
    3558:	00004dd1 	.word	0x00004dd1
    355c:	000050ad 	.word	0x000050ad
    3560:	000001c9 	.word	0x000001c9
    3564:	20000034 	.word	0x20000034
    3568:	00004f2d 	.word	0x00004f2d
    356c:	000033c9 	.word	0x000033c9
    3570:	2000001c 	.word	0x2000001c
    3574:	000050dd 	.word	0x000050dd
    3578:	00004dfd 	.word	0x00004dfd
    357c:	00004a19 	.word	0x00004a19
    3580:	00002c08 	.word	0x00002c08
    3584:	00002d08 	.word	0x00002d08

00003588 <netHandler>:

void netHandler(void){
	if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    3588:	23c2      	movs	r3, #194	; 0xc2
void netHandler(void){
    358a:	b5f0      	push	{r4, r5, r6, r7, lr}
    358c:	4657      	mov	r7, sl
    358e:	46de      	mov	lr, fp
    3590:	464e      	mov	r6, r9
    3592:	4645      	mov	r5, r8
	if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    3594:	009b      	lsls	r3, r3, #2
    3596:	469c      	mov	ip, r3
void netHandler(void){
    3598:	b5e0      	push	{r5, r6, r7, lr}
	if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    359a:	4cd6      	ldr	r4, [pc, #856]	; (38f4 <netHandler+0x36c>)
void netHandler(void){
    359c:	b0dd      	sub	sp, #372	; 0x174
	if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    359e:	7820      	ldrb	r0, [r4, #0]
    35a0:	4fd5      	ldr	r7, [pc, #852]	; (38f8 <netHandler+0x370>)
    35a2:	0140      	lsls	r0, r0, #5
    35a4:	4460      	add	r0, ip
    35a6:	47b8      	blx	r7
    35a8:	2800      	cmp	r0, #0
    35aa:	d100      	bne.n	35ae <netHandler+0x26>
    35ac:	e117      	b.n	37de <netHandler+0x256>
		socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
		listen(UdpRxSockNum);
	}
	
	if(getSn_IR(UdpRxSockNum)){ // & Sn_CR_RECV
    35ae:	2382      	movs	r3, #130	; 0x82
    35b0:	009b      	lsls	r3, r3, #2
    35b2:	469c      	mov	ip, r3
    35b4:	7820      	ldrb	r0, [r4, #0]
    35b6:	0140      	lsls	r0, r0, #5
    35b8:	4460      	add	r0, ip
    35ba:	47b8      	blx	r7
    35bc:	06c3      	lsls	r3, r0, #27
    35be:	d000      	beq.n	35c2 <netHandler+0x3a>
    35c0:	e0b7      	b.n	3732 <netHandler+0x1aa>
    35c2:	4bce      	ldr	r3, [pc, #824]	; (38fc <netHandler+0x374>)
			uint16_t port;
			if (udp_size > DATA_BUFF_SIZE) udp_size = DATA_BUFF_SIZE;
			memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
			uint16_t ret = recvfrom(UdpRxSockNum, (uint8_t*)TCP_RX_BUF, udp_size, ip, &port);
			// UDP Datagram - TCP_RX_BUF
			uint8_t okFlg = 0;
    35c4:	2605      	movs	r6, #5
    35c6:	469b      	mov	fp, r3
    35c8:	4bcd      	ldr	r3, [pc, #820]	; (3900 <netHandler+0x378>)
    35ca:	4699      	mov	r9, r3
					while (sent_length < total_length) {
						size_t chunk_size = (total_length - sent_length > 2048) ? 2048 : total_length - sent_length;
						send(HTTP_SOCKET, (uint8_t *)(psu_page + sent_length), chunk_size);
						//uint8_t msCount = 0;
						while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
							delay_ms(1);
    35cc:	4bcd      	ldr	r3, [pc, #820]	; (3904 <netHandler+0x37c>)
    35ce:	464d      	mov	r5, r9
    35d0:	469a      	mov	sl, r3
    35d2:	4bcd      	ldr	r3, [pc, #820]	; (3908 <netHandler+0x380>)
    35d4:	4699      	mov	r9, r3
    35d6:	44a9      	add	r9, r5
		if (getSn_SR(HTTP_SOCKET) == SOCK_ESTABLISHED) {
    35d8:	4648      	mov	r0, r9
    35da:	47b8      	blx	r7
    35dc:	2817      	cmp	r0, #23
    35de:	d039      	beq.n	3654 <netHandler+0xcc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    35e0:	2180      	movs	r1, #128	; 0x80
					delay_ms(1);
				}
				close(HTTP_SOCKET);
			}
		}
		if(outState == 1){
    35e2:	4bca      	ldr	r3, [pc, #808]	; (390c <netHandler+0x384>)
    35e4:	0289      	lsls	r1, r1, #10
    35e6:	781b      	ldrb	r3, [r3, #0]
    35e8:	2b01      	cmp	r3, #1
    35ea:	d02e      	beq.n	364a <netHandler+0xc2>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    35ec:	22c0      	movs	r2, #192	; 0xc0
    35ee:	2394      	movs	r3, #148	; 0x94
    35f0:	05d2      	lsls	r2, r2, #23
    35f2:	50d1      	str	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    35f4:	2280      	movs	r2, #128	; 0x80
			gpio_set_pin_level(PSU_OUT_EN, true);
			}else{
			gpio_set_pin_level(PSU_OUT_EN, false);
			
		}
		if(remoteCtrl == 1){
    35f6:	4bc6      	ldr	r3, [pc, #792]	; (3910 <netHandler+0x388>)
    35f8:	0392      	lsls	r2, r2, #14
    35fa:	781b      	ldrb	r3, [r3, #0]
    35fc:	2b01      	cmp	r3, #1
    35fe:	d020      	beq.n	3642 <netHandler+0xba>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3600:	23c0      	movs	r3, #192	; 0xc0
    3602:	05db      	lsls	r3, r3, #23
    3604:	615a      	str	r2, [r3, #20]
		}
		//if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSE_WAIT) {
		//disconnect(HTTP_SOCKET);
		//}

		if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSED) {
    3606:	4648      	mov	r0, r9
    3608:	47b8      	blx	r7
    360a:	2800      	cmp	r0, #0
    360c:	d00e      	beq.n	362c <netHandler+0xa4>
    360e:	2302      	movs	r3, #2
    3610:	469c      	mov	ip, r3
	for (uint8_t HTTP_SOCKET = 5; HTTP_SOCKET <= 7; HTTP_SOCKET++) {
    3612:	3601      	adds	r6, #1
    3614:	b2f6      	uxtb	r6, r6
    3616:	44e3      	add	fp, ip
    3618:	3520      	adds	r5, #32
    361a:	2e08      	cmp	r6, #8
    361c:	d1d9      	bne.n	35d2 <netHandler+0x4a>
			socket(HTTP_SOCKET, Sn_MR_TCP, socketPort[HTTP_SOCKET], 0);
			listen(HTTP_SOCKET);
		}
	}
	
    361e:	b05d      	add	sp, #372	; 0x174
    3620:	bc3c      	pop	{r2, r3, r4, r5}
    3622:	4690      	mov	r8, r2
    3624:	4699      	mov	r9, r3
    3626:	46a2      	mov	sl, r4
    3628:	46ab      	mov	fp, r5
    362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			socket(HTTP_SOCKET, Sn_MR_TCP, socketPort[HTTP_SOCKET], 0);
    362c:	465b      	mov	r3, fp
    362e:	2101      	movs	r1, #1
    3630:	895a      	ldrh	r2, [r3, #10]
    3632:	0030      	movs	r0, r6
    3634:	2300      	movs	r3, #0
    3636:	4cb7      	ldr	r4, [pc, #732]	; (3914 <netHandler+0x38c>)
    3638:	47a0      	blx	r4
			listen(HTTP_SOCKET);
    363a:	0030      	movs	r0, r6
    363c:	4bb6      	ldr	r3, [pc, #728]	; (3918 <netHandler+0x390>)
    363e:	4798      	blx	r3
    3640:	e7e5      	b.n	360e <netHandler+0x86>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    3642:	23c0      	movs	r3, #192	; 0xc0
    3644:	05db      	lsls	r3, r3, #23
    3646:	619a      	str	r2, [r3, #24]
    3648:	e7dd      	b.n	3606 <netHandler+0x7e>
    364a:	22c0      	movs	r2, #192	; 0xc0
    364c:	3397      	adds	r3, #151	; 0x97
    364e:	05d2      	lsls	r2, r2, #23
    3650:	50d1      	str	r1, [r2, r3]
    3652:	e7cf      	b.n	35f4 <netHandler+0x6c>
			getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
    3654:	aa18      	add	r2, sp, #96	; 0x60
    3656:	2104      	movs	r1, #4
    3658:	4bb0      	ldr	r3, [pc, #704]	; (391c <netHandler+0x394>)
    365a:	0030      	movs	r0, r6
    365c:	4798      	blx	r3
			uint16_t res_size = getSn_RX_RSR(HTTP_SOCKET);
    365e:	0030      	movs	r0, r6
    3660:	4baf      	ldr	r3, [pc, #700]	; (3920 <netHandler+0x398>)
    3662:	4798      	blx	r3
    3664:	1e04      	subs	r4, r0, #0
			if (res_size > 0) {
    3666:	d0bb      	beq.n	35e0 <netHandler+0x58>
				memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    3668:	2280      	movs	r2, #128	; 0x80
    366a:	4bae      	ldr	r3, [pc, #696]	; (3924 <netHandler+0x39c>)
    366c:	0112      	lsls	r2, r2, #4
    366e:	0018      	movs	r0, r3
    3670:	4698      	mov	r8, r3
    3672:	2100      	movs	r1, #0
    3674:	4bac      	ldr	r3, [pc, #688]	; (3928 <netHandler+0x3a0>)
    3676:	4798      	blx	r3
				recv(HTTP_SOCKET, (uint8_t *)TCP_RX_BUF, res_size);
    3678:	2380      	movs	r3, #128	; 0x80
    367a:	1c22      	adds	r2, r4, #0
    367c:	011b      	lsls	r3, r3, #4
    367e:	429c      	cmp	r4, r3
    3680:	d900      	bls.n	3684 <netHandler+0xfc>
    3682:	e0b7      	b.n	37f4 <netHandler+0x26c>
    3684:	4641      	mov	r1, r8
    3686:	b292      	uxth	r2, r2
    3688:	0030      	movs	r0, r6
    368a:	4ba8      	ldr	r3, [pc, #672]	; (392c <netHandler+0x3a4>)
    368c:	4798      	blx	r3
				if (strstr((char *)TCP_RX_BUF, "GET / ") != NULL) {
    368e:	49a8      	ldr	r1, [pc, #672]	; (3930 <netHandler+0x3a8>)
    3690:	4640      	mov	r0, r8
    3692:	4ca8      	ldr	r4, [pc, #672]	; (3934 <netHandler+0x3ac>)
    3694:	47a0      	blx	r4
    3696:	2800      	cmp	r0, #0
    3698:	d100      	bne.n	369c <netHandler+0x114>
    369a:	e0ae      	b.n	37fa <netHandler+0x272>
					printf("index.html send\r\n");
    369c:	4ba6      	ldr	r3, [pc, #664]	; (3938 <netHandler+0x3b0>)
    369e:	48a7      	ldr	r0, [pc, #668]	; (393c <netHandler+0x3b4>)
    36a0:	4798      	blx	r3
					size_t sent_length = 0;
    36a2:	2300      	movs	r3, #0
    36a4:	4aa6      	ldr	r2, [pc, #664]	; (3940 <netHandler+0x3b8>)
    36a6:	9213      	str	r2, [sp, #76]	; 0x4c
    36a8:	4aa6      	ldr	r2, [pc, #664]	; (3944 <netHandler+0x3bc>)
    36aa:	4690      	mov	r8, r2
						size_t chunk_size = (total_length - sent_length > 2048) ? 2048 : total_length - sent_length;
    36ac:	464a      	mov	r2, r9
    36ae:	4699      	mov	r9, r3
    36b0:	465b      	mov	r3, fp
    36b2:	9214      	str	r2, [sp, #80]	; 0x50
    36b4:	9315      	str	r3, [sp, #84]	; 0x54
    36b6:	464a      	mov	r2, r9
    36b8:	4ba3      	ldr	r3, [pc, #652]	; (3948 <netHandler+0x3c0>)
    36ba:	1a9b      	subs	r3, r3, r2
    36bc:	469b      	mov	fp, r3
    36be:	2380      	movs	r3, #128	; 0x80
    36c0:	011b      	lsls	r3, r3, #4
    36c2:	459b      	cmp	fp, r3
    36c4:	d900      	bls.n	36c8 <netHandler+0x140>
    36c6:	469b      	mov	fp, r3
						send(HTTP_SOCKET, (uint8_t *)(psu_page + sent_length), chunk_size);
    36c8:	466a      	mov	r2, sp
    36ca:	2140      	movs	r1, #64	; 0x40
    36cc:	465b      	mov	r3, fp
    36ce:	1852      	adds	r2, r2, r1
    36d0:	8013      	strh	r3, [r2, #0]
    36d2:	466b      	mov	r3, sp
    36d4:	2240      	movs	r2, #64	; 0x40
    36d6:	189b      	adds	r3, r3, r2
    36d8:	881a      	ldrh	r2, [r3, #0]
    36da:	4b9c      	ldr	r3, [pc, #624]	; (394c <netHandler+0x3c4>)
    36dc:	0030      	movs	r0, r6
    36de:	444b      	add	r3, r9
    36e0:	0019      	movs	r1, r3
    36e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    36e4:	4798      	blx	r3
						while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    36e6:	e001      	b.n	36ec <netHandler+0x164>
							delay_ms(1);
    36e8:	2001      	movs	r0, #1
    36ea:	47d0      	blx	sl
						while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    36ec:	0030      	movs	r0, r6
    36ee:	47c0      	blx	r8
    36f0:	0004      	movs	r4, r0
    36f2:	0028      	movs	r0, r5
    36f4:	47b8      	blx	r7
    36f6:	0280      	lsls	r0, r0, #10
    36f8:	4284      	cmp	r4, r0
    36fa:	d1f5      	bne.n	36e8 <netHandler+0x160>
					while (sent_length < total_length) {
    36fc:	4b94      	ldr	r3, [pc, #592]	; (3950 <netHandler+0x3c8>)
						sent_length += chunk_size;
    36fe:	44d9      	add	r9, fp
					while (sent_length < total_length) {
    3700:	4599      	cmp	r9, r3
    3702:	d9d8      	bls.n	36b6 <netHandler+0x12e>
    3704:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3706:	4699      	mov	r9, r3
    3708:	9b15      	ldr	r3, [sp, #84]	; 0x54
    370a:	469b      	mov	fp, r3
				disconnect(HTTP_SOCKET);
    370c:	0030      	movs	r0, r6
    370e:	4b91      	ldr	r3, [pc, #580]	; (3954 <netHandler+0x3cc>)
    3710:	4798      	blx	r3
				while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    3712:	e002      	b.n	371a <netHandler+0x192>
					delay_ms(1);
    3714:	2001      	movs	r0, #1
    3716:	4b7b      	ldr	r3, [pc, #492]	; (3904 <netHandler+0x37c>)
    3718:	4798      	blx	r3
				while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    371a:	0030      	movs	r0, r6
    371c:	47c0      	blx	r8
    371e:	0004      	movs	r4, r0
    3720:	0028      	movs	r0, r5
    3722:	47b8      	blx	r7
    3724:	0280      	lsls	r0, r0, #10
    3726:	4284      	cmp	r4, r0
    3728:	d1f4      	bne.n	3714 <netHandler+0x18c>
				close(HTTP_SOCKET);
    372a:	0030      	movs	r0, r6
    372c:	4b8a      	ldr	r3, [pc, #552]	; (3958 <netHandler+0x3d0>)
    372e:	4798      	blx	r3
    3730:	e756      	b.n	35e0 <netHandler+0x58>
		uint16_t udp_size = getSn_RX_RSR(UdpRxSockNum);
    3732:	7820      	ldrb	r0, [r4, #0]
    3734:	4b7a      	ldr	r3, [pc, #488]	; (3920 <netHandler+0x398>)
    3736:	4798      	blx	r3
    3738:	1e05      	subs	r5, r0, #0
		if (udp_size > 0) {
    373a:	d100      	bne.n	373e <netHandler+0x1b6>
    373c:	e741      	b.n	35c2 <netHandler+0x3a>
			memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    373e:	2380      	movs	r3, #128	; 0x80
    3740:	011b      	lsls	r3, r3, #4
    3742:	4698      	mov	r8, r3
    3744:	4e77      	ldr	r6, [pc, #476]	; (3924 <netHandler+0x39c>)
    3746:	001a      	movs	r2, r3
    3748:	2100      	movs	r1, #0
    374a:	0030      	movs	r0, r6
    374c:	4b76      	ldr	r3, [pc, #472]	; (3928 <netHandler+0x3a0>)
    374e:	4798      	blx	r3
			uint16_t ret = recvfrom(UdpRxSockNum, (uint8_t*)TCP_RX_BUF, udp_size, ip, &port);
    3750:	1c2a      	adds	r2, r5, #0
    3752:	4545      	cmp	r5, r8
    3754:	d900      	bls.n	3758 <netHandler+0x1d0>
    3756:	4642      	mov	r2, r8
    3758:	a906      	add	r1, sp, #24
    375a:	468c      	mov	ip, r1
    375c:	2346      	movs	r3, #70	; 0x46
    375e:	4463      	add	r3, ip
    3760:	7820      	ldrb	r0, [r4, #0]
    3762:	b292      	uxth	r2, r2
    3764:	9300      	str	r3, [sp, #0]
    3766:	0031      	movs	r1, r6
    3768:	ab18      	add	r3, sp, #96	; 0x60
    376a:	4c7c      	ldr	r4, [pc, #496]	; (395c <netHandler+0x3d4>)
    376c:	47a0      	blx	r4
			if (sscanf(TCP_RX_BUF, "OUTP:STAT %3s", state) == 1) {
    376e:	aa19      	add	r2, sp, #100	; 0x64
    3770:	497b      	ldr	r1, [pc, #492]	; (3960 <netHandler+0x3d8>)
    3772:	0030      	movs	r0, r6
    3774:	4d7b      	ldr	r5, [pc, #492]	; (3964 <netHandler+0x3dc>)
    3776:	47a8      	blx	r5
    3778:	2801      	cmp	r0, #1
    377a:	d100      	bne.n	377e <netHandler+0x1f6>
    377c:	e136      	b.n	39ec <netHandler+0x464>
			uint8_t okFlg = 0;
    377e:	2300      	movs	r3, #0
    3780:	4698      	mov	r8, r3
    3782:	4b79      	ldr	r3, [pc, #484]	; (3968 <netHandler+0x3e0>)
    3784:	4c79      	ldr	r4, [pc, #484]	; (396c <netHandler+0x3e4>)
    3786:	4699      	mov	r9, r3
			if (sscanf(TCP_RX_BUF, "MEAS:%[^?]", command) == 1) {
    3788:	aa1c      	add	r2, sp, #112	; 0x70
    378a:	4979      	ldr	r1, [pc, #484]	; (3970 <netHandler+0x3e8>)
    378c:	0030      	movs	r0, r6
    378e:	47a8      	blx	r5
    3790:	2801      	cmp	r0, #1
    3792:	d100      	bne.n	3796 <netHandler+0x20e>
    3794:	e08d      	b.n	38b2 <netHandler+0x32a>
			if(strcasecmp(TCP_RX_BUF, "*RST") == 0){
    3796:	4977      	ldr	r1, [pc, #476]	; (3974 <netHandler+0x3ec>)
    3798:	0030      	movs	r0, r6
    379a:	47c8      	blx	r9
    379c:	2800      	cmp	r0, #0
    379e:	d100      	bne.n	37a2 <netHandler+0x21a>
    37a0:	e0a1      	b.n	38e6 <netHandler+0x35e>
				if(okFlg == 0){
    37a2:	4643      	mov	r3, r8
    37a4:	2b00      	cmp	r3, #0
    37a6:	d101      	bne.n	37ac <netHandler+0x224>
					sprintf(UdpAnsver, "err");
    37a8:	4b73      	ldr	r3, [pc, #460]	; (3978 <netHandler+0x3f0>)
    37aa:	6023      	str	r3, [r4, #0]
			result = socket(UdpTxSockNum, Sn_MR_UDP, UdpTxPort, SF_IO_NONBLOCK);
    37ac:	4b73      	ldr	r3, [pc, #460]	; (397c <netHandler+0x3f4>)
    37ae:	4e74      	ldr	r6, [pc, #464]	; (3980 <netHandler+0x3f8>)
    37b0:	2102      	movs	r1, #2
    37b2:	8832      	ldrh	r2, [r6, #0]
    37b4:	4698      	mov	r8, r3
    37b6:	7818      	ldrb	r0, [r3, #0]
    37b8:	4d56      	ldr	r5, [pc, #344]	; (3914 <netHandler+0x38c>)
    37ba:	2301      	movs	r3, #1
    37bc:	47a8      	blx	r5
    37be:	4d71      	ldr	r5, [pc, #452]	; (3984 <netHandler+0x3fc>)
			result = sendto(UdpTxSockNum, (uint8_t*)UdpAnsver, strlen(UdpAnsver), UdpDestAddress, UdpTxPort);
    37c0:	4b71      	ldr	r3, [pc, #452]	; (3988 <netHandler+0x400>)
			result = socket(UdpTxSockNum, Sn_MR_UDP, UdpTxPort, SF_IO_NONBLOCK);
    37c2:	7028      	strb	r0, [r5, #0]
			result = sendto(UdpTxSockNum, (uint8_t*)UdpAnsver, strlen(UdpAnsver), UdpDestAddress, UdpTxPort);
    37c4:	0020      	movs	r0, r4
    37c6:	4798      	blx	r3
    37c8:	4643      	mov	r3, r8
    37ca:	b282      	uxth	r2, r0
    37cc:	7818      	ldrb	r0, [r3, #0]
    37ce:	8833      	ldrh	r3, [r6, #0]
    37d0:	0021      	movs	r1, r4
    37d2:	9300      	str	r3, [sp, #0]
    37d4:	4c6d      	ldr	r4, [pc, #436]	; (398c <netHandler+0x404>)
    37d6:	4b6e      	ldr	r3, [pc, #440]	; (3990 <netHandler+0x408>)
    37d8:	47a0      	blx	r4
    37da:	7028      	strb	r0, [r5, #0]
    37dc:	e6f1      	b.n	35c2 <netHandler+0x3a>
		socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
    37de:	4b6d      	ldr	r3, [pc, #436]	; (3994 <netHandler+0x40c>)
    37e0:	7820      	ldrb	r0, [r4, #0]
    37e2:	881a      	ldrh	r2, [r3, #0]
    37e4:	2102      	movs	r1, #2
    37e6:	2380      	movs	r3, #128	; 0x80
    37e8:	4d4a      	ldr	r5, [pc, #296]	; (3914 <netHandler+0x38c>)
    37ea:	47a8      	blx	r5
		listen(UdpRxSockNum);
    37ec:	7820      	ldrb	r0, [r4, #0]
    37ee:	4b4a      	ldr	r3, [pc, #296]	; (3918 <netHandler+0x390>)
    37f0:	4798      	blx	r3
    37f2:	e6dc      	b.n	35ae <netHandler+0x26>
				recv(HTTP_SOCKET, (uint8_t *)TCP_RX_BUF, res_size);
    37f4:	4b68      	ldr	r3, [pc, #416]	; (3998 <netHandler+0x410>)
    37f6:	881a      	ldrh	r2, [r3, #0]
    37f8:	e744      	b.n	3684 <netHandler+0xfc>
					} else if (strstr((char *)TCP_RX_BUF, "GET /favicon.ico") != NULL) {
    37fa:	4968      	ldr	r1, [pc, #416]	; (399c <netHandler+0x414>)
    37fc:	4640      	mov	r0, r8
    37fe:	47a0      	blx	r4
    3800:	9010      	str	r0, [sp, #64]	; 0x40
    3802:	2800      	cmp	r0, #0
    3804:	d00f      	beq.n	3826 <netHandler+0x29e>
					printf("favicon.ico send\r\n");
    3806:	4b4c      	ldr	r3, [pc, #304]	; (3938 <netHandler+0x3b0>)
    3808:	4865      	ldr	r0, [pc, #404]	; (39a0 <netHandler+0x418>)
    380a:	4798      	blx	r3
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: image/x-icon\r\r\n\n", 47);
    380c:	4b4c      	ldr	r3, [pc, #304]	; (3940 <netHandler+0x3b8>)
    380e:	222f      	movs	r2, #47	; 0x2f
    3810:	4964      	ldr	r1, [pc, #400]	; (39a4 <netHandler+0x41c>)
    3812:	0030      	movs	r0, r6
    3814:	001c      	movs	r4, r3
    3816:	4798      	blx	r3
					send(HTTP_SOCKET, (uint8_t *)favicon_ico, sizeof(favicon_ico));
    3818:	4a63      	ldr	r2, [pc, #396]	; (39a8 <netHandler+0x420>)
    381a:	4964      	ldr	r1, [pc, #400]	; (39ac <netHandler+0x424>)
    381c:	0030      	movs	r0, r6
    381e:	47a0      	blx	r4
    3820:	4b48      	ldr	r3, [pc, #288]	; (3944 <netHandler+0x3bc>)
    3822:	4698      	mov	r8, r3
    3824:	e772      	b.n	370c <netHandler+0x184>
					} else if (strstr((char *)TCP_RX_BUF, "GET /get_vals") != NULL) {
    3826:	4962      	ldr	r1, [pc, #392]	; (39b0 <netHandler+0x428>)
    3828:	4640      	mov	r0, r8
    382a:	47a0      	blx	r4
    382c:	2800      	cmp	r0, #0
    382e:	d100      	bne.n	3832 <netHandler+0x2aa>
    3830:	e105      	b.n	3a3e <netHandler+0x4b6>
					float watt = ampDMM * voltDMM;
    3832:	4b60      	ldr	r3, [pc, #384]	; (39b4 <netHandler+0x42c>)
    3834:	681c      	ldr	r4, [r3, #0]
    3836:	4b60      	ldr	r3, [pc, #384]	; (39b8 <netHandler+0x430>)
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	1c1a      	adds	r2, r3, #0
					snprintf(json_response, sizeof(json_response),
    383c:	2301      	movs	r3, #1
    383e:	930f      	str	r3, [sp, #60]	; 0x3c
    3840:	930e      	str	r3, [sp, #56]	; 0x38
    3842:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3844:	1c10      	adds	r0, r2, #0
    3846:	930d      	str	r3, [sp, #52]	; 0x34
    3848:	4b5c      	ldr	r3, [pc, #368]	; (39bc <netHandler+0x434>)
    384a:	9210      	str	r2, [sp, #64]	; 0x40
    384c:	781b      	ldrb	r3, [r3, #0]
    384e:	930c      	str	r3, [sp, #48]	; 0x30
    3850:	4b2f      	ldr	r3, [pc, #188]	; (3910 <netHandler+0x388>)
    3852:	781b      	ldrb	r3, [r3, #0]
    3854:	930b      	str	r3, [sp, #44]	; 0x2c
    3856:	4b2d      	ldr	r3, [pc, #180]	; (390c <netHandler+0x384>)
    3858:	781b      	ldrb	r3, [r3, #0]
    385a:	930a      	str	r3, [sp, #40]	; 0x28
    385c:	4b58      	ldr	r3, [pc, #352]	; (39c0 <netHandler+0x438>)
    385e:	4698      	mov	r8, r3
    3860:	4798      	blx	r3
    3862:	9008      	str	r0, [sp, #32]
    3864:	9109      	str	r1, [sp, #36]	; 0x24
    3866:	1c20      	adds	r0, r4, #0
    3868:	47c0      	blx	r8
					float watt = ampDMM * voltDMM;
    386a:	4b56      	ldr	r3, [pc, #344]	; (39c4 <netHandler+0x43c>)
					snprintf(json_response, sizeof(json_response),
    386c:	9006      	str	r0, [sp, #24]
    386e:	9107      	str	r1, [sp, #28]
					float watt = ampDMM * voltDMM;
    3870:	9910      	ldr	r1, [sp, #64]	; 0x40
    3872:	1c20      	adds	r0, r4, #0
    3874:	4798      	blx	r3
					snprintf(json_response, sizeof(json_response),
    3876:	47c0      	blx	r8
    3878:	9004      	str	r0, [sp, #16]
    387a:	9105      	str	r1, [sp, #20]
    387c:	4b52      	ldr	r3, [pc, #328]	; (39c8 <netHandler+0x440>)
    387e:	6818      	ldr	r0, [r3, #0]
    3880:	47c0      	blx	r8
    3882:	9002      	str	r0, [sp, #8]
    3884:	9103      	str	r1, [sp, #12]
    3886:	4b51      	ldr	r3, [pc, #324]	; (39cc <netHandler+0x444>)
    3888:	6818      	ldr	r0, [r3, #0]
    388a:	47c0      	blx	r8
    388c:	9000      	str	r0, [sp, #0]
    388e:	9101      	str	r1, [sp, #4]
    3890:	2180      	movs	r1, #128	; 0x80
    3892:	4a4f      	ldr	r2, [pc, #316]	; (39d0 <netHandler+0x448>)
    3894:	0049      	lsls	r1, r1, #1
    3896:	4b4f      	ldr	r3, [pc, #316]	; (39d4 <netHandler+0x44c>)
    3898:	a81c      	add	r0, sp, #112	; 0x70
    389a:	4798      	blx	r3
					send(HTTP_SOCKET, (uint8_t *)json_response, strlen(json_response));
    389c:	a81c      	add	r0, sp, #112	; 0x70
    389e:	4b3a      	ldr	r3, [pc, #232]	; (3988 <netHandler+0x400>)
    38a0:	4798      	blx	r3
    38a2:	a91c      	add	r1, sp, #112	; 0x70
    38a4:	b282      	uxth	r2, r0
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    38a6:	0030      	movs	r0, r6
    38a8:	4b25      	ldr	r3, [pc, #148]	; (3940 <netHandler+0x3b8>)
    38aa:	4798      	blx	r3
    38ac:	4b25      	ldr	r3, [pc, #148]	; (3944 <netHandler+0x3bc>)
    38ae:	4698      	mov	r8, r3
    38b0:	e72c      	b.n	370c <netHandler+0x184>
				if (strcasecmp(command, "VOLT") == 0) {
    38b2:	4949      	ldr	r1, [pc, #292]	; (39d8 <netHandler+0x450>)
    38b4:	a81c      	add	r0, sp, #112	; 0x70
    38b6:	47c8      	blx	r9
    38b8:	2800      	cmp	r0, #0
    38ba:	d100      	bne.n	38be <netHandler+0x336>
    38bc:	e0a6      	b.n	3a0c <netHandler+0x484>
					} else if (strcasecmp(command, "CURR") == 0) {
    38be:	4947      	ldr	r1, [pc, #284]	; (39dc <netHandler+0x454>)
    38c0:	a81c      	add	r0, sp, #112	; 0x70
    38c2:	47c8      	blx	r9
    38c4:	2800      	cmp	r0, #0
    38c6:	d000      	beq.n	38ca <netHandler+0x342>
    38c8:	e765      	b.n	3796 <netHandler+0x20e>
					printf("Measure Current command\r\n");
    38ca:	4b1b      	ldr	r3, [pc, #108]	; (3938 <netHandler+0x3b0>)
    38cc:	4844      	ldr	r0, [pc, #272]	; (39e0 <netHandler+0x458>)
    38ce:	4798      	blx	r3
					sprintf(UdpAnsver, "0.121");
    38d0:	4b44      	ldr	r3, [pc, #272]	; (39e4 <netHandler+0x45c>)
    38d2:	681a      	ldr	r2, [r3, #0]
    38d4:	6022      	str	r2, [r4, #0]
    38d6:	889b      	ldrh	r3, [r3, #4]
    38d8:	80a3      	strh	r3, [r4, #4]
			if(strcasecmp(TCP_RX_BUF, "*RST") == 0){
    38da:	4926      	ldr	r1, [pc, #152]	; (3974 <netHandler+0x3ec>)
    38dc:	0030      	movs	r0, r6
    38de:	47c8      	blx	r9
    38e0:	2800      	cmp	r0, #0
    38e2:	d000      	beq.n	38e6 <netHandler+0x35e>
    38e4:	e762      	b.n	37ac <netHandler+0x224>
				sprintf(UdpAnsver, "ok");
    38e6:	4b40      	ldr	r3, [pc, #256]	; (39e8 <netHandler+0x460>)
    38e8:	881a      	ldrh	r2, [r3, #0]
    38ea:	8022      	strh	r2, [r4, #0]
    38ec:	789b      	ldrb	r3, [r3, #2]
    38ee:	70a3      	strb	r3, [r4, #2]
    38f0:	e75c      	b.n	37ac <netHandler+0x224>
    38f2:	46c0      	nop			; (mov r8, r8)
    38f4:	2000000e 	.word	0x2000000e
    38f8:	000049bd 	.word	0x000049bd
    38fc:	2000003c 	.word	0x2000003c
    3900:	00001fa8 	.word	0x00001fa8
    3904:	000001c9 	.word	0x000001c9
    3908:	ffffe400 	.word	0xffffe400
    390c:	20000033 	.word	0x20000033
    3910:	20000b2a 	.word	0x20000b2a
    3914:	00003bc5 	.word	0x00003bc5
    3918:	00003e4d 	.word	0x00003e4d
    391c:	0000487d 	.word	0x0000487d
    3920:	00004bc1 	.word	0x00004bc1
    3924:	200010d4 	.word	0x200010d4
    3928:	0000b67d 	.word	0x0000b67d
    392c:	00004229 	.word	0x00004229
    3930:	000167f8 	.word	0x000167f8
    3934:	0000bec5 	.word	0x0000bec5
    3938:	0000b7f5 	.word	0x0000b7f5
    393c:	00016800 	.word	0x00016800
    3940:	00004031 	.word	0x00004031
    3944:	00004b65 	.word	0x00004b65
    3948:	00001daf 	.word	0x00001daf
    394c:	000169e0 	.word	0x000169e0
    3950:	00001dae 	.word	0x00001dae
    3954:	00003f21 	.word	0x00003f21
    3958:	00003db5 	.word	0x00003db5
    395c:	000045e5 	.word	0x000045e5
    3960:	00016750 	.word	0x00016750
    3964:	0000b8f5 	.word	0x0000b8f5
    3968:	0000b9e5 	.word	0x0000b9e5
    396c:	20000aa8 	.word	0x20000aa8
    3970:	0001678c 	.word	0x0001678c
    3974:	000167f0 	.word	0x000167f0
    3978:	00727265 	.word	0x00727265
    397c:	20000b28 	.word	0x20000b28
    3980:	20000010 	.word	0x20000010
    3984:	200018d4 	.word	0x200018d4
    3988:	0000bb9d 	.word	0x0000bb9d
    398c:	00004411 	.word	0x00004411
    3990:	20000008 	.word	0x20000008
    3994:	2000000c 	.word	0x2000000c
    3998:	000161ca 	.word	0x000161ca
    399c:	00016814 	.word	0x00016814
    39a0:	00016828 	.word	0x00016828
    39a4:	0001683c 	.word	0x0001683c
    39a8:	00000582 	.word	0x00000582
    39ac:	000161cc 	.word	0x000161cc
    39b0:	0001686c 	.word	0x0001686c
    39b4:	20000018 	.word	0x20000018
    39b8:	20000050 	.word	0x20000050
    39bc:	20000b29 	.word	0x20000b29
    39c0:	0000ac35 	.word	0x0000ac35
    39c4:	00009705 	.word	0x00009705
    39c8:	2000004c 	.word	0x2000004c
    39cc:	20000014 	.word	0x20000014
    39d0:	0001687c 	.word	0x0001687c
    39d4:	0000b82d 	.word	0x0000b82d
    39d8:	00016798 	.word	0x00016798
    39dc:	000167c4 	.word	0x000167c4
    39e0:	000167cc 	.word	0x000167cc
    39e4:	000167e8 	.word	0x000167e8
    39e8:	00016774 	.word	0x00016774
				if (strcasecmp(state, "OFF") == 0) {
    39ec:	4b57      	ldr	r3, [pc, #348]	; (3b4c <netHandler+0x5c4>)
    39ee:	4958      	ldr	r1, [pc, #352]	; (3b50 <netHandler+0x5c8>)
    39f0:	a819      	add	r0, sp, #100	; 0x64
    39f2:	4699      	mov	r9, r3
    39f4:	4798      	blx	r3
    39f6:	2800      	cmp	r0, #0
    39f8:	d013      	beq.n	3a22 <netHandler+0x49a>
					} else if (strcasecmp(state, "ON") == 0) {
    39fa:	4956      	ldr	r1, [pc, #344]	; (3b54 <netHandler+0x5cc>)
    39fc:	a819      	add	r0, sp, #100	; 0x64
    39fe:	47c8      	blx	r9
    3a00:	2800      	cmp	r0, #0
    3a02:	d01a      	beq.n	3a3a <netHandler+0x4b2>
			uint8_t okFlg = 0;
    3a04:	2300      	movs	r3, #0
    3a06:	4c54      	ldr	r4, [pc, #336]	; (3b58 <netHandler+0x5d0>)
    3a08:	4698      	mov	r8, r3
    3a0a:	e6bd      	b.n	3788 <netHandler+0x200>
					printf("Measure Voltage command\r\n");
    3a0c:	4b53      	ldr	r3, [pc, #332]	; (3b5c <netHandler+0x5d4>)
    3a0e:	4854      	ldr	r0, [pc, #336]	; (3b60 <netHandler+0x5d8>)
    3a10:	4798      	blx	r3
					sprintf(UdpAnsver, "48.031");
    3a12:	4b54      	ldr	r3, [pc, #336]	; (3b64 <netHandler+0x5dc>)
    3a14:	681a      	ldr	r2, [r3, #0]
    3a16:	6022      	str	r2, [r4, #0]
    3a18:	889a      	ldrh	r2, [r3, #4]
    3a1a:	80a2      	strh	r2, [r4, #4]
    3a1c:	799b      	ldrb	r3, [r3, #6]
    3a1e:	71a3      	strb	r3, [r4, #6]
    3a20:	e75b      	b.n	38da <netHandler+0x352>
					printf("Output is OFF\r\n");
    3a22:	4851      	ldr	r0, [pc, #324]	; (3b68 <netHandler+0x5e0>)
					printf("Output is ON\r\n");
    3a24:	4b4d      	ldr	r3, [pc, #308]	; (3b5c <netHandler+0x5d4>)
    3a26:	4798      	blx	r3
					sprintf(UdpAnsver, "ok");
    3a28:	4b50      	ldr	r3, [pc, #320]	; (3b6c <netHandler+0x5e4>)
    3a2a:	4c4b      	ldr	r4, [pc, #300]	; (3b58 <netHandler+0x5d0>)
    3a2c:	881a      	ldrh	r2, [r3, #0]
    3a2e:	8022      	strh	r2, [r4, #0]
    3a30:	789b      	ldrb	r3, [r3, #2]
    3a32:	70a3      	strb	r3, [r4, #2]
					okFlg = 1;
    3a34:	2301      	movs	r3, #1
    3a36:	4698      	mov	r8, r3
    3a38:	e6a6      	b.n	3788 <netHandler+0x200>
					printf("Output is ON\r\n");
    3a3a:	484d      	ldr	r0, [pc, #308]	; (3b70 <netHandler+0x5e8>)
    3a3c:	e7f2      	b.n	3a24 <netHandler+0x49c>
					} else if (strstr((char *)TCP_RX_BUF, "GET /set_vals") != NULL) {
    3a3e:	494d      	ldr	r1, [pc, #308]	; (3b74 <netHandler+0x5ec>)
    3a40:	4640      	mov	r0, r8
    3a42:	47a0      	blx	r4
    3a44:	2800      	cmp	r0, #0
    3a46:	d01d      	beq.n	3a84 <netHandler+0x4fc>
					sscanf(query_string, "amp=%f&volt=%f", &amp, &volt);
    3a48:	4b4b      	ldr	r3, [pc, #300]	; (3b78 <netHandler+0x5f0>)
    3a4a:	494c      	ldr	r1, [pc, #304]	; (3b7c <netHandler+0x5f4>)
    3a4c:	4698      	mov	r8, r3
    3a4e:	4c4c      	ldr	r4, [pc, #304]	; (3b80 <netHandler+0x5f8>)
    3a50:	4642      	mov	r2, r8
    3a52:	4b4c      	ldr	r3, [pc, #304]	; (3b84 <netHandler+0x5fc>)
					char *query_string = strstr((char *)TCP_RX_BUF, "GET /set_vals") + strlen("GET /set_vals?");
    3a54:	300e      	adds	r0, #14
					sscanf(query_string, "amp=%f&volt=%f", &amp, &volt);
    3a56:	47a0      	blx	r4
					printf("%f; %f\r\n", amp, volt);
    3a58:	4643      	mov	r3, r8
    3a5a:	4c4b      	ldr	r4, [pc, #300]	; (3b88 <netHandler+0x600>)
    3a5c:	6818      	ldr	r0, [r3, #0]
    3a5e:	47a0      	blx	r4
    3a60:	4b48      	ldr	r3, [pc, #288]	; (3b84 <netHandler+0x5fc>)
    3a62:	9010      	str	r0, [sp, #64]	; 0x40
    3a64:	9111      	str	r1, [sp, #68]	; 0x44
    3a66:	6818      	ldr	r0, [r3, #0]
    3a68:	47a0      	blx	r4
    3a6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3a6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    3a6e:	9000      	str	r0, [sp, #0]
    3a70:	9101      	str	r1, [sp, #4]
    3a72:	4946      	ldr	r1, [pc, #280]	; (3b8c <netHandler+0x604>)
    3a74:	4846      	ldr	r0, [pc, #280]	; (3b90 <netHandler+0x608>)
    3a76:	4788      	blx	r1
					remoteCtrl = 1;
    3a78:	2301      	movs	r3, #1
    3a7a:	4a46      	ldr	r2, [pc, #280]	; (3b94 <netHandler+0x60c>)
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    3a7c:	4946      	ldr	r1, [pc, #280]	; (3b98 <netHandler+0x610>)
					remoteCtrl = 1;
    3a7e:	7013      	strb	r3, [r2, #0]
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 67);
    3a80:	2243      	movs	r2, #67	; 0x43
    3a82:	e710      	b.n	38a6 <netHandler+0x31e>
					} else if (strstr((char *)TCP_RX_BUF, "GET /control") != NULL) {
    3a84:	4945      	ldr	r1, [pc, #276]	; (3b9c <netHandler+0x614>)
    3a86:	4640      	mov	r0, r8
    3a88:	47a0      	blx	r4
    3a8a:	2800      	cmp	r0, #0
    3a8c:	d100      	bne.n	3a90 <netHandler+0x508>
    3a8e:	e70d      	b.n	38ac <netHandler+0x324>
					sscanf(query_string, "device=%[^&]&action=%s", device, action);
    3a90:	ab1c      	add	r3, sp, #112	; 0x70
    3a92:	aa19      	add	r2, sp, #100	; 0x64
    3a94:	4942      	ldr	r1, [pc, #264]	; (3ba0 <netHandler+0x618>)
    3a96:	4c3a      	ldr	r4, [pc, #232]	; (3b80 <netHandler+0x5f8>)
					char *query_string = strstr((char *)TCP_RX_BUF, "GET /control") + strlen("GET /control?");
    3a98:	300d      	adds	r0, #13
					sscanf(query_string, "device=%[^&]&action=%s", device, action);
    3a9a:	47a0      	blx	r4
					printf("%s; %s\r\n", device, action);
    3a9c:	a919      	add	r1, sp, #100	; 0x64
    3a9e:	aa1c      	add	r2, sp, #112	; 0x70
    3aa0:	4840      	ldr	r0, [pc, #256]	; (3ba4 <netHandler+0x61c>)
    3aa2:	4b3a      	ldr	r3, [pc, #232]	; (3b8c <netHandler+0x604>)
    3aa4:	4798      	blx	r3
					if (strcmp(device, "fan") == 0) {
    3aa6:	4940      	ldr	r1, [pc, #256]	; (3ba8 <netHandler+0x620>)
    3aa8:	a819      	add	r0, sp, #100	; 0x64
    3aaa:	4c40      	ldr	r4, [pc, #256]	; (3bac <netHandler+0x624>)
    3aac:	47a0      	blx	r4
    3aae:	2800      	cmp	r0, #0
    3ab0:	d02f      	beq.n	3b12 <netHandler+0x58a>
						} else if (strcmp(device, "rem") == 0) {
    3ab2:	493f      	ldr	r1, [pc, #252]	; (3bb0 <netHandler+0x628>)
    3ab4:	a819      	add	r0, sp, #100	; 0x64
    3ab6:	47a0      	blx	r4
    3ab8:	2800      	cmp	r0, #0
    3aba:	d017      	beq.n	3aec <netHandler+0x564>
						} else if (strcmp(device, "psu") == 0) {
    3abc:	493d      	ldr	r1, [pc, #244]	; (3bb4 <netHandler+0x62c>)
    3abe:	a819      	add	r0, sp, #100	; 0x64
    3ac0:	47a0      	blx	r4
    3ac2:	2800      	cmp	r0, #0
    3ac4:	d002      	beq.n	3acc <netHandler+0x544>
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    3ac6:	2241      	movs	r2, #65	; 0x41
    3ac8:	4933      	ldr	r1, [pc, #204]	; (3b98 <netHandler+0x610>)
    3aca:	e6ec      	b.n	38a6 <netHandler+0x31e>
						buzer(3);
    3acc:	4b3a      	ldr	r3, [pc, #232]	; (3bb8 <netHandler+0x630>)
    3ace:	3003      	adds	r0, #3
    3ad0:	4798      	blx	r3
						outState = (strcmp(action, "on") == 0) ? 1 : 0;
    3ad2:	493a      	ldr	r1, [pc, #232]	; (3bbc <netHandler+0x634>)
    3ad4:	a81c      	add	r0, sp, #112	; 0x70
    3ad6:	47a0      	blx	r4
    3ad8:	0003      	movs	r3, r0
    3ada:	4258      	negs	r0, r3
    3adc:	4158      	adcs	r0, r3
    3ade:	4b38      	ldr	r3, [pc, #224]	; (3bc0 <netHandler+0x638>)
						remoteCtrl = 1;
    3ae0:	4a2c      	ldr	r2, [pc, #176]	; (3b94 <netHandler+0x60c>)
						outState = (strcmp(action, "on") == 0) ? 1 : 0;
    3ae2:	7018      	strb	r0, [r3, #0]
						remoteCtrl = 1;
    3ae4:	2301      	movs	r3, #1
    3ae6:	7013      	strb	r3, [r2, #0]
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    3ae8:	2241      	movs	r2, #65	; 0x41
    3aea:	e7ed      	b.n	3ac8 <netHandler+0x540>
						buzer(3);
    3aec:	4b32      	ldr	r3, [pc, #200]	; (3bb8 <netHandler+0x630>)
    3aee:	3003      	adds	r0, #3
    3af0:	4798      	blx	r3
						remoteCtrl = (strcmp(action, "on") == 0);
    3af2:	4932      	ldr	r1, [pc, #200]	; (3bbc <netHandler+0x634>)
    3af4:	a81c      	add	r0, sp, #112	; 0x70
    3af6:	47a0      	blx	r4
    3af8:	4243      	negs	r3, r0
    3afa:	4143      	adcs	r3, r0
    3afc:	4a25      	ldr	r2, [pc, #148]	; (3b94 <netHandler+0x60c>)
    3afe:	7013      	strb	r3, [r2, #0]
    3b00:	2280      	movs	r2, #128	; 0x80
    3b02:	23c0      	movs	r3, #192	; 0xc0
    3b04:	00d2      	lsls	r2, r2, #3
    3b06:	05db      	lsls	r3, r3, #23
	if (level) {
    3b08:	2800      	cmp	r0, #0
    3b0a:	d11a      	bne.n	3b42 <netHandler+0x5ba>
    3b0c:	619a      	str	r2, [r3, #24]
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    3b0e:	2241      	movs	r2, #65	; 0x41
    3b10:	e7da      	b.n	3ac8 <netHandler+0x540>
						buzer(3);
    3b12:	3003      	adds	r0, #3
    3b14:	4b28      	ldr	r3, [pc, #160]	; (3bb8 <netHandler+0x630>)
    3b16:	4798      	blx	r3
						gpio_set_pin_level(O2, strcmp(action, "on") == 0);
    3b18:	4b28      	ldr	r3, [pc, #160]	; (3bbc <netHandler+0x634>)
    3b1a:	a81c      	add	r0, sp, #112	; 0x70
    3b1c:	0019      	movs	r1, r3
    3b1e:	4698      	mov	r8, r3
    3b20:	47a0      	blx	r4
    3b22:	2280      	movs	r2, #128	; 0x80
    3b24:	23c0      	movs	r3, #192	; 0xc0
    3b26:	0052      	lsls	r2, r2, #1
    3b28:	05db      	lsls	r3, r3, #23
    3b2a:	2800      	cmp	r0, #0
    3b2c:	d10c      	bne.n	3b48 <netHandler+0x5c0>
    3b2e:	619a      	str	r2, [r3, #24]
						gpio_set_pin_level(O3, strcmp(action, "on") == 0);
    3b30:	4641      	mov	r1, r8
    3b32:	a81c      	add	r0, sp, #112	; 0x70
    3b34:	47a0      	blx	r4
    3b36:	2280      	movs	r2, #128	; 0x80
    3b38:	23c0      	movs	r3, #192	; 0xc0
    3b3a:	0092      	lsls	r2, r2, #2
    3b3c:	05db      	lsls	r3, r3, #23
    3b3e:	2800      	cmp	r0, #0
    3b40:	d0e4      	beq.n	3b0c <netHandler+0x584>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    3b42:	615a      	str	r2, [r3, #20]
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    3b44:	2241      	movs	r2, #65	; 0x41
    3b46:	e7bf      	b.n	3ac8 <netHandler+0x540>
    3b48:	615a      	str	r2, [r3, #20]
    3b4a:	e7f1      	b.n	3b30 <netHandler+0x5a8>
    3b4c:	0000b9e5 	.word	0x0000b9e5
    3b50:	00016760 	.word	0x00016760
    3b54:	00016778 	.word	0x00016778
    3b58:	20000aa8 	.word	0x20000aa8
    3b5c:	0000b7f5 	.word	0x0000b7f5
    3b60:	000167a0 	.word	0x000167a0
    3b64:	000167bc 	.word	0x000167bc
    3b68:	00016764 	.word	0x00016764
    3b6c:	00016774 	.word	0x00016774
    3b70:	0001677c 	.word	0x0001677c
    3b74:	0001692c 	.word	0x0001692c
    3b78:	20000014 	.word	0x20000014
    3b7c:	0001693c 	.word	0x0001693c
    3b80:	0000b8f5 	.word	0x0000b8f5
    3b84:	2000004c 	.word	0x2000004c
    3b88:	0000ac35 	.word	0x0000ac35
    3b8c:	0000b731 	.word	0x0000b731
    3b90:	0001694c 	.word	0x0001694c
    3b94:	20000b2a 	.word	0x20000b2a
    3b98:	00016958 	.word	0x00016958
    3b9c:	0001699c 	.word	0x0001699c
    3ba0:	000169ac 	.word	0x000169ac
    3ba4:	000169c4 	.word	0x000169c4
    3ba8:	000169d0 	.word	0x000169d0
    3bac:	0000bb15 	.word	0x0000bb15
    3bb0:	000169d8 	.word	0x000169d8
    3bb4:	000169dc 	.word	0x000169dc
    3bb8:	0000294d 	.word	0x0000294d
    3bbc:	000169d4 	.word	0x000169d4
    3bc0:	20000033 	.word	0x20000033

00003bc4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
    3bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bc6:	4657      	mov	r7, sl
    3bc8:	464e      	mov	r6, r9
    3bca:	46de      	mov	lr, fp
    3bcc:	4645      	mov	r5, r8
    3bce:	b5e0      	push	{r5, r6, r7, lr}
    3bd0:	b087      	sub	sp, #28
    3bd2:	0007      	movs	r7, r0
    3bd4:	4689      	mov	r9, r1
    3bd6:	9200      	str	r2, [sp, #0]
    3bd8:	469a      	mov	sl, r3
	CHECK_SOCKNUM();
    3bda:	2808      	cmp	r0, #8
    3bdc:	d900      	bls.n	3be0 <socket+0x1c>
    3bde:	e0d2      	b.n	3d86 <socket+0x1c2>
	switch(protocol)
    3be0:	2901      	cmp	r1, #1
    3be2:	d100      	bne.n	3be6 <socket+0x22>
    3be4:	e092      	b.n	3d0c <socket+0x148>
    3be6:	2900      	cmp	r1, #0
    3be8:	d100      	bne.n	3bec <socket+0x28>
    3bea:	e086      	b.n	3cfa <socket+0x136>
    3bec:	2904      	cmp	r1, #4
    3bee:	d900      	bls.n	3bf2 <socket+0x2e>
    3bf0:	e083      	b.n	3cfa <socket+0x136>
      default :
         return SOCKERR_SOCKMODE;
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    3bf2:	4653      	mov	r3, sl
    3bf4:	075b      	lsls	r3, r3, #29
    3bf6:	d500      	bpl.n	3bfa <socket+0x36>
    3bf8:	e0a2      	b.n	3d40 <socket+0x17c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
    3bfa:	4653      	mov	r3, sl
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d100      	bne.n	3c02 <socket+0x3e>
    3c00:	e0b8      	b.n	3d74 <socket+0x1b0>
	{
   	switch(protocol)
    3c02:	464b      	mov	r3, r9
    3c04:	2b01      	cmp	r3, #1
    3c06:	d100      	bne.n	3c0a <socket+0x46>
    3c08:	e09d      	b.n	3d46 <socket+0x182>
    3c0a:	2b02      	cmp	r3, #2
    3c0c:	d100      	bne.n	3c10 <socket+0x4c>
    3c0e:	e08a      	b.n	3d26 <socket+0x162>
    3c10:	4653      	mov	r3, sl
    3c12:	466a      	mov	r2, sp
    3c14:	7113      	strb	r3, [r2, #4]
    3c16:	7913      	ldrb	r3, [r2, #4]
    3c18:	b25b      	sxtb	r3, r3
    3c1a:	9301      	str	r3, [sp, #4]
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
    3c1c:	2308      	movs	r3, #8
    3c1e:	4698      	mov	r8, r3
    3c20:	0178      	lsls	r0, r7, #5
    3c22:	4480      	add	r8, r0
    3c24:	4643      	mov	r3, r8
    3c26:	1c5d      	adds	r5, r3, #1
    3c28:	35ff      	adds	r5, #255	; 0xff
    3c2a:	4b58      	ldr	r3, [pc, #352]	; (3d8c <socket+0x1c8>)
    3c2c:	2110      	movs	r1, #16
    3c2e:	0028      	movs	r0, r5
    3c30:	469b      	mov	fp, r3
    3c32:	4798      	blx	r3
    3c34:	4c56      	ldr	r4, [pc, #344]	; (3d90 <socket+0x1cc>)
   /* wait to process the command... */
	while( getSn_CR(sn) );
    3c36:	0028      	movs	r0, r5
    3c38:	47a0      	blx	r4
    3c3a:	2800      	cmp	r0, #0
    3c3c:	d1fb      	bne.n	3c36 <socket+0x72>
    3c3e:	0006      	movs	r6, r0
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
    3c40:	2080      	movs	r0, #128	; 0x80
    3c42:	0080      	lsls	r0, r0, #2
    3c44:	211f      	movs	r1, #31
    3c46:	4440      	add	r0, r8
    3c48:	47d8      	blx	fp
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
    3c4a:	2301      	movs	r3, #1
    3c4c:	40bb      	lsls	r3, r7
    3c4e:	43db      	mvns	r3, r3
    3c50:	b21b      	sxth	r3, r3
    3c52:	001a      	movs	r2, r3
    3c54:	9302      	str	r3, [sp, #8]
    3c56:	4b4f      	ldr	r3, [pc, #316]	; (3d94 <socket+0x1d0>)
    3c58:	494e      	ldr	r1, [pc, #312]	; (3d94 <socket+0x1d0>)
    3c5a:	881b      	ldrh	r3, [r3, #0]
    3c5c:	4013      	ands	r3, r2
    3c5e:	800b      	strh	r3, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
    3c60:	4b4d      	ldr	r3, [pc, #308]	; (3d98 <socket+0x1d4>)
    3c62:	881b      	ldrh	r3, [r3, #0]
    3c64:	4013      	ands	r3, r2
    3c66:	4a4c      	ldr	r2, [pc, #304]	; (3d98 <socket+0x1d4>)
    3c68:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
    3c6a:	4a4c      	ldr	r2, [pc, #304]	; (3d9c <socket+0x1d8>)
    3c6c:	007b      	lsls	r3, r7, #1
    3c6e:	52d6      	strh	r6, [r2, r3]
    3c70:	26c0      	movs	r6, #192	; 0xc0
    3c72:	9303      	str	r3, [sp, #12]
	sock_pack_info[sn] = 0;
    3c74:	2300      	movs	r3, #0
    3c76:	4a4a      	ldr	r2, [pc, #296]	; (3da0 <socket+0x1dc>)
    3c78:	00b6      	lsls	r6, r6, #2
    3c7a:	55d3      	strb	r3, [r2, r7]
    3c7c:	4446      	add	r6, r8
	while(getSn_SR(sn) != SOCK_CLOSED);
    3c7e:	0030      	movs	r0, r6
    3c80:	47a0      	blx	r4
    3c82:	2800      	cmp	r0, #0
    3c84:	d1fb      	bne.n	3c7e <socket+0xba>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    3c86:	230f      	movs	r3, #15
    3c88:	9901      	ldr	r1, [sp, #4]
    3c8a:	4640      	mov	r0, r8
    3c8c:	4399      	bics	r1, r3
    3c8e:	464b      	mov	r3, r9
    3c90:	4319      	orrs	r1, r3
    3c92:	b2c9      	uxtb	r1, r1
    3c94:	47d8      	blx	fp
	if(!port)
    3c96:	9b00      	ldr	r3, [sp, #0]
    3c98:	2b00      	cmp	r3, #0
    3c9a:	d05f      	beq.n	3d5c <socket+0x198>
    3c9c:	0a19      	lsrs	r1, r3, #8
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	4699      	mov	r9, r3
   setSn_PORT(sn,port);	
    3ca2:	2080      	movs	r0, #128	; 0x80
    3ca4:	00c0      	lsls	r0, r0, #3
    3ca6:	4440      	add	r0, r8
    3ca8:	47d8      	blx	fp
    3caa:	20a0      	movs	r0, #160	; 0xa0
    3cac:	00c0      	lsls	r0, r0, #3
    3cae:	4440      	add	r0, r8
    3cb0:	4649      	mov	r1, r9
    3cb2:	47d8      	blx	fp
   setSn_CR(sn,Sn_CR_OPEN);
    3cb4:	2101      	movs	r1, #1
    3cb6:	0028      	movs	r0, r5
    3cb8:	47d8      	blx	fp
   while(getSn_CR(sn));
    3cba:	0028      	movs	r0, r5
    3cbc:	47a0      	blx	r4
    3cbe:	2800      	cmp	r0, #0
    3cc0:	d1fb      	bne.n	3cba <socket+0xf6>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
    3cc2:	2201      	movs	r2, #1
    3cc4:	4655      	mov	r5, sl
    3cc6:	402a      	ands	r2, r5
    3cc8:	40ba      	lsls	r2, r7
   sock_io_mode &= ~(1 <<sn);
    3cca:	4b32      	ldr	r3, [pc, #200]	; (3d94 <socket+0x1d0>)
    3ccc:	9902      	ldr	r1, [sp, #8]
    3cce:	881b      	ldrh	r3, [r3, #0]
    3cd0:	400b      	ands	r3, r1
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
    3cd2:	4313      	orrs	r3, r2
    3cd4:	4a2f      	ldr	r2, [pc, #188]	; (3d94 <socket+0x1d0>)
    3cd6:	8013      	strh	r3, [r2, #0]
   sock_is_sending &= ~(1<<sn);
    3cd8:	4b2f      	ldr	r3, [pc, #188]	; (3d98 <socket+0x1d4>)
    3cda:	4a2f      	ldr	r2, [pc, #188]	; (3d98 <socket+0x1d4>)
    3cdc:	881b      	ldrh	r3, [r3, #0]
    3cde:	400b      	ands	r3, r1
    3ce0:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
    3ce2:	4b2e      	ldr	r3, [pc, #184]	; (3d9c <socket+0x1d8>)
    3ce4:	9a03      	ldr	r2, [sp, #12]
    3ce6:	5298      	strh	r0, [r3, r2]
   sock_pack_info[sn] = PACK_COMPLETED;
    3ce8:	2300      	movs	r3, #0
    3cea:	4a2d      	ldr	r2, [pc, #180]	; (3da0 <socket+0x1dc>)
    3cec:	55d3      	strb	r3, [r2, r7]
   while(getSn_SR(sn) == SOCK_CLOSED);
    3cee:	0030      	movs	r0, r6
    3cf0:	47a0      	blx	r4
    3cf2:	2800      	cmp	r0, #0
    3cf4:	d0fb      	beq.n	3cee <socket+0x12a>
   return (int8_t)sn;
    3cf6:	b278      	sxtb	r0, r7
    3cf8:	e001      	b.n	3cfe <socket+0x13a>
         return SOCKERR_SOCKMODE;
    3cfa:	2005      	movs	r0, #5
    3cfc:	4240      	negs	r0, r0
}	   
    3cfe:	b007      	add	sp, #28
    3d00:	bc3c      	pop	{r2, r3, r4, r5}
    3d02:	4690      	mov	r8, r2
    3d04:	4699      	mov	r9, r3
    3d06:	46a2      	mov	sl, r4
    3d08:	46ab      	mov	fp, r5
    3d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            getSIPR((uint8_t*)&taddr);
    3d0c:	20f0      	movs	r0, #240	; 0xf0
    3d0e:	4b25      	ldr	r3, [pc, #148]	; (3da4 <socket+0x1e0>)
    3d10:	0100      	lsls	r0, r0, #4
    3d12:	2204      	movs	r2, #4
    3d14:	a905      	add	r1, sp, #20
    3d16:	4798      	blx	r3
            if(taddr == 0) return SOCKERR_SOCKINIT;
    3d18:	2003      	movs	r0, #3
    3d1a:	9b05      	ldr	r3, [sp, #20]
    3d1c:	4240      	negs	r0, r0
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d000      	beq.n	3d24 <socket+0x160>
    3d22:	e766      	b.n	3bf2 <socket+0x2e>
    3d24:	e7eb      	b.n	3cfe <socket+0x13a>
   	      if(flag & SF_IGMP_VER2)
    3d26:	4653      	mov	r3, sl
    3d28:	069b      	lsls	r3, r3, #26
    3d2a:	d402      	bmi.n	3d32 <socket+0x16e>
      	      if(flag & SF_UNI_BLOCK)
    3d2c:	4653      	mov	r3, sl
    3d2e:	06db      	lsls	r3, r3, #27
    3d30:	d50d      	bpl.n	3d4e <socket+0x18a>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    3d32:	466a      	mov	r2, sp
    3d34:	4653      	mov	r3, sl
    3d36:	2104      	movs	r1, #4
    3d38:	7113      	strb	r3, [r2, #4]
    3d3a:	5651      	ldrsb	r1, [r2, r1]
    3d3c:	2900      	cmp	r1, #0
    3d3e:	db0b      	blt.n	3d58 <socket+0x194>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    3d40:	2006      	movs	r0, #6
    3d42:	4240      	negs	r0, r0
    3d44:	e7db      	b.n	3cfe <socket+0x13a>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
    3d46:	2321      	movs	r3, #33	; 0x21
    3d48:	4652      	mov	r2, sl
    3d4a:	4213      	tst	r3, r2
    3d4c:	d0f8      	beq.n	3d40 <socket+0x17c>
    3d4e:	466a      	mov	r2, sp
    3d50:	4653      	mov	r3, sl
    3d52:	2104      	movs	r1, #4
    3d54:	7113      	strb	r3, [r2, #4]
    3d56:	5651      	ldrsb	r1, [r2, r1]
    3d58:	9101      	str	r1, [sp, #4]
    3d5a:	e75f      	b.n	3c1c <socket+0x58>
	   port = sock_any_port++;
    3d5c:	4912      	ldr	r1, [pc, #72]	; (3da8 <socket+0x1e4>)
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    3d5e:	4813      	ldr	r0, [pc, #76]	; (3dac <socket+0x1e8>)
	   port = sock_any_port++;
    3d60:	880a      	ldrh	r2, [r1, #0]
    3d62:	1c53      	adds	r3, r2, #1
    3d64:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    3d66:	4283      	cmp	r3, r0
    3d68:	d007      	beq.n	3d7a <socket+0x1b6>
	   port = sock_any_port++;
    3d6a:	800b      	strh	r3, [r1, #0]
    3d6c:	b2d3      	uxtb	r3, r2
    3d6e:	0a11      	lsrs	r1, r2, #8
    3d70:	4699      	mov	r9, r3
    3d72:	e796      	b.n	3ca2 <socket+0xde>
    3d74:	2100      	movs	r1, #0
    3d76:	9101      	str	r1, [sp, #4]
    3d78:	e750      	b.n	3c1c <socket+0x58>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    3d7a:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <socket+0x1ec>)
    3d7c:	800b      	strh	r3, [r1, #0]
    3d7e:	23ef      	movs	r3, #239	; 0xef
    3d80:	21ff      	movs	r1, #255	; 0xff
    3d82:	4699      	mov	r9, r3
    3d84:	e78d      	b.n	3ca2 <socket+0xde>
	CHECK_SOCKNUM();
    3d86:	2001      	movs	r0, #1
    3d88:	4240      	negs	r0, r0
    3d8a:	e7b8      	b.n	3cfe <socket+0x13a>
    3d8c:	00004a19 	.word	0x00004a19
    3d90:	000049bd 	.word	0x000049bd
    3d94:	20000b2c 	.word	0x20000b2c
    3d98:	20000b2e 	.word	0x20000b2e
    3d9c:	20000b38 	.word	0x20000b38
    3da0:	20000b30 	.word	0x20000b30
    3da4:	00004a75 	.word	0x00004a75
    3da8:	20000054 	.word	0x20000054
    3dac:	0000fff0 	.word	0x0000fff0
    3db0:	ffffc000 	.word	0xffffc000

00003db4 <close>:
{
    3db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3db6:	4647      	mov	r7, r8
    3db8:	46ce      	mov	lr, r9
    3dba:	4680      	mov	r8, r0
    3dbc:	b580      	push	{r7, lr}
	CHECK_SOCKNUM();
    3dbe:	2808      	cmp	r0, #8
    3dc0:	d834      	bhi.n	3e2c <close+0x78>
	setSn_CR(sn,Sn_CR_CLOSE);
    3dc2:	0146      	lsls	r6, r0, #5
    3dc4:	3608      	adds	r6, #8
    3dc6:	1c77      	adds	r7, r6, #1
    3dc8:	4b1a      	ldr	r3, [pc, #104]	; (3e34 <close+0x80>)
    3dca:	37ff      	adds	r7, #255	; 0xff
    3dcc:	2110      	movs	r1, #16
    3dce:	0038      	movs	r0, r7
    3dd0:	4699      	mov	r9, r3
    3dd2:	4798      	blx	r3
    3dd4:	4d18      	ldr	r5, [pc, #96]	; (3e38 <close+0x84>)
	while( getSn_CR(sn) );
    3dd6:	0038      	movs	r0, r7
    3dd8:	47a8      	blx	r5
    3dda:	1e04      	subs	r4, r0, #0
    3ddc:	d1fb      	bne.n	3dd6 <close+0x22>
	setSn_IR(sn, 0xFF);
    3dde:	2380      	movs	r3, #128	; 0x80
    3de0:	009b      	lsls	r3, r3, #2
    3de2:	18f0      	adds	r0, r6, r3
    3de4:	211f      	movs	r1, #31
    3de6:	47c8      	blx	r9
	sock_io_mode &= ~(1<<sn);
    3de8:	4642      	mov	r2, r8
    3dea:	2301      	movs	r3, #1
    3dec:	4093      	lsls	r3, r2
    3dee:	43db      	mvns	r3, r3
    3df0:	4912      	ldr	r1, [pc, #72]	; (3e3c <close+0x88>)
    3df2:	b21b      	sxth	r3, r3
    3df4:	880a      	ldrh	r2, [r1, #0]
    3df6:	401a      	ands	r2, r3
    3df8:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
    3dfa:	4911      	ldr	r1, [pc, #68]	; (3e40 <close+0x8c>)
    3dfc:	880a      	ldrh	r2, [r1, #0]
    3dfe:	4013      	ands	r3, r2
    3e00:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
    3e02:	4643      	mov	r3, r8
    3e04:	005a      	lsls	r2, r3, #1
    3e06:	4b0f      	ldr	r3, [pc, #60]	; (3e44 <close+0x90>)
	sock_pack_info[sn] = 0;
    3e08:	4641      	mov	r1, r8
	sock_remained_size[sn] = 0;
    3e0a:	52d4      	strh	r4, [r2, r3]
	sock_pack_info[sn] = 0;
    3e0c:	2200      	movs	r2, #0
    3e0e:	4b0e      	ldr	r3, [pc, #56]	; (3e48 <close+0x94>)
    3e10:	545a      	strb	r2, [r3, r1]
    3e12:	23c0      	movs	r3, #192	; 0xc0
    3e14:	009b      	lsls	r3, r3, #2
    3e16:	469c      	mov	ip, r3
    3e18:	4466      	add	r6, ip
	while(getSn_SR(sn) != SOCK_CLOSED);
    3e1a:	0030      	movs	r0, r6
    3e1c:	47a8      	blx	r5
    3e1e:	2800      	cmp	r0, #0
    3e20:	d1fb      	bne.n	3e1a <close+0x66>
	return SOCK_OK;
    3e22:	3001      	adds	r0, #1
}
    3e24:	bc0c      	pop	{r2, r3}
    3e26:	4690      	mov	r8, r2
    3e28:	4699      	mov	r9, r3
    3e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
    3e2c:	2001      	movs	r0, #1
    3e2e:	4240      	negs	r0, r0
    3e30:	e7f8      	b.n	3e24 <close+0x70>
    3e32:	46c0      	nop			; (mov r8, r8)
    3e34:	00004a19 	.word	0x00004a19
    3e38:	000049bd 	.word	0x000049bd
    3e3c:	20000b2c 	.word	0x20000b2c
    3e40:	20000b2e 	.word	0x20000b2e
    3e44:	20000b38 	.word	0x20000b38
    3e48:	20000b30 	.word	0x20000b30

00003e4c <listen>:

int8_t listen(uint8_t sn)
{
    3e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e4e:	464f      	mov	r7, r9
    3e50:	46d6      	mov	lr, sl
    3e52:	4646      	mov	r6, r8
    3e54:	b5c0      	push	{r6, r7, lr}
    3e56:	0007      	movs	r7, r0
	CHECK_SOCKNUM();
    3e58:	2808      	cmp	r0, #8
    3e5a:	d82b      	bhi.n	3eb4 <listen+0x68>
   CHECK_SOCKMODE(Sn_MR_TCP);
    3e5c:	0146      	lsls	r6, r0, #5
    3e5e:	3608      	adds	r6, #8
    3e60:	0030      	movs	r0, r6
    3e62:	4c29      	ldr	r4, [pc, #164]	; (3f08 <listen+0xbc>)
    3e64:	47a0      	blx	r4
    3e66:	230f      	movs	r3, #15
    3e68:	4018      	ands	r0, r3
    3e6a:	2801      	cmp	r0, #1
    3e6c:	d11c      	bne.n	3ea8 <listen+0x5c>
	CHECK_SOCKINIT();
    3e6e:	23c0      	movs	r3, #192	; 0xc0
    3e70:	009b      	lsls	r3, r3, #2
    3e72:	4698      	mov	r8, r3
    3e74:	44b0      	add	r8, r6
    3e76:	4640      	mov	r0, r8
    3e78:	47a0      	blx	r4
    3e7a:	2813      	cmp	r0, #19
    3e7c:	d117      	bne.n	3eae <listen+0x62>
	setSn_CR(sn,Sn_CR_LISTEN);
    3e7e:	1c75      	adds	r5, r6, #1
    3e80:	35ff      	adds	r5, #255	; 0xff
    3e82:	4b22      	ldr	r3, [pc, #136]	; (3f0c <listen+0xc0>)
    3e84:	2102      	movs	r1, #2
    3e86:	0028      	movs	r0, r5
    3e88:	4699      	mov	r9, r3
    3e8a:	4798      	blx	r3
	while(getSn_CR(sn));
    3e8c:	0028      	movs	r0, r5
    3e8e:	47a0      	blx	r4
    3e90:	2800      	cmp	r0, #0
    3e92:	d1fb      	bne.n	3e8c <listen+0x40>
   while(getSn_SR(sn) != SOCK_LISTEN)
    3e94:	4640      	mov	r0, r8
    3e96:	47a0      	blx	r4
    3e98:	2814      	cmp	r0, #20
    3e9a:	d10e      	bne.n	3eba <listen+0x6e>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
    3e9c:	3813      	subs	r0, #19
}
    3e9e:	bc1c      	pop	{r2, r3, r4}
    3ea0:	4690      	mov	r8, r2
    3ea2:	4699      	mov	r9, r3
    3ea4:	46a2      	mov	sl, r4
    3ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   CHECK_SOCKMODE(Sn_MR_TCP);
    3ea8:	2005      	movs	r0, #5
    3eaa:	4240      	negs	r0, r0
    3eac:	e7f7      	b.n	3e9e <listen+0x52>
	CHECK_SOCKINIT();
    3eae:	2003      	movs	r0, #3
    3eb0:	4240      	negs	r0, r0
    3eb2:	e7f4      	b.n	3e9e <listen+0x52>
	CHECK_SOCKNUM();
    3eb4:	2001      	movs	r0, #1
    3eb6:	4240      	negs	r0, r0
    3eb8:	e7f1      	b.n	3e9e <listen+0x52>
	setSn_CR(sn,Sn_CR_CLOSE);
    3eba:	2110      	movs	r1, #16
    3ebc:	0028      	movs	r0, r5
    3ebe:	47c8      	blx	r9
	while( getSn_CR(sn) );
    3ec0:	0028      	movs	r0, r5
    3ec2:	47a0      	blx	r4
    3ec4:	4682      	mov	sl, r0
    3ec6:	2800      	cmp	r0, #0
    3ec8:	d1fa      	bne.n	3ec0 <listen+0x74>
	setSn_IR(sn, 0xFF);
    3eca:	2380      	movs	r3, #128	; 0x80
    3ecc:	009b      	lsls	r3, r3, #2
    3ece:	18f0      	adds	r0, r6, r3
    3ed0:	211f      	movs	r1, #31
    3ed2:	47c8      	blx	r9
	sock_io_mode &= ~(1<<sn);
    3ed4:	2301      	movs	r3, #1
    3ed6:	40bb      	lsls	r3, r7
    3ed8:	43db      	mvns	r3, r3
    3eda:	490d      	ldr	r1, [pc, #52]	; (3f10 <listen+0xc4>)
    3edc:	b21b      	sxth	r3, r3
    3ede:	880a      	ldrh	r2, [r1, #0]
    3ee0:	401a      	ands	r2, r3
    3ee2:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
    3ee4:	490b      	ldr	r1, [pc, #44]	; (3f14 <listen+0xc8>)
    3ee6:	880a      	ldrh	r2, [r1, #0]
    3ee8:	4013      	ands	r3, r2
    3eea:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
    3eec:	4651      	mov	r1, sl
    3eee:	4b0a      	ldr	r3, [pc, #40]	; (3f18 <listen+0xcc>)
    3ef0:	007a      	lsls	r2, r7, #1
    3ef2:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
    3ef4:	2200      	movs	r2, #0
    3ef6:	4b09      	ldr	r3, [pc, #36]	; (3f1c <listen+0xd0>)
    3ef8:	55da      	strb	r2, [r3, r7]
	while(getSn_SR(sn) != SOCK_CLOSED);
    3efa:	4640      	mov	r0, r8
    3efc:	47a0      	blx	r4
    3efe:	2800      	cmp	r0, #0
    3f00:	d1fb      	bne.n	3efa <listen+0xae>
         return SOCKERR_SOCKCLOSED;
    3f02:	3804      	subs	r0, #4
    3f04:	e7cb      	b.n	3e9e <listen+0x52>
    3f06:	46c0      	nop			; (mov r8, r8)
    3f08:	000049bd 	.word	0x000049bd
    3f0c:	00004a19 	.word	0x00004a19
    3f10:	20000b2c 	.word	0x20000b2c
    3f14:	20000b2e 	.word	0x20000b2e
    3f18:	20000b38 	.word	0x20000b38
    3f1c:	20000b30 	.word	0x20000b30

00003f20 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
    3f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f22:	464e      	mov	r6, r9
    3f24:	46de      	mov	lr, fp
    3f26:	4657      	mov	r7, sl
    3f28:	4645      	mov	r5, r8
    3f2a:	b5e0      	push	{r5, r6, r7, lr}
    3f2c:	4681      	mov	r9, r0
    3f2e:	b083      	sub	sp, #12
   CHECK_SOCKNUM();
    3f30:	2808      	cmp	r0, #8
    3f32:	d900      	bls.n	3f36 <disconnect+0x16>
    3f34:	e06d      	b.n	4012 <disconnect+0xf2>
   CHECK_SOCKMODE(Sn_MR_TCP);
    3f36:	0146      	lsls	r6, r0, #5
    3f38:	3608      	adds	r6, #8
    3f3a:	0030      	movs	r0, r6
    3f3c:	4c36      	ldr	r4, [pc, #216]	; (4018 <disconnect+0xf8>)
    3f3e:	47a0      	blx	r4
    3f40:	230f      	movs	r3, #15
    3f42:	4018      	ands	r0, r3
    3f44:	2801      	cmp	r0, #1
    3f46:	d161      	bne.n	400c <disconnect+0xec>
	setSn_CR(sn,Sn_CR_DISCON);
    3f48:	1c75      	adds	r5, r6, #1
    3f4a:	35ff      	adds	r5, #255	; 0xff
    3f4c:	2108      	movs	r1, #8
    3f4e:	0028      	movs	r0, r5
    3f50:	4b32      	ldr	r3, [pc, #200]	; (401c <disconnect+0xfc>)
    3f52:	4798      	blx	r3
	/* wait to process the command... */
	while(getSn_CR(sn));
    3f54:	0028      	movs	r0, r5
    3f56:	47a0      	blx	r4
    3f58:	2800      	cmp	r0, #0
    3f5a:	d1fb      	bne.n	3f54 <disconnect+0x34>
	sock_is_sending &= ~(1<<sn);
    3f5c:	2201      	movs	r2, #1
    3f5e:	4649      	mov	r1, r9
    3f60:	0013      	movs	r3, r2
    3f62:	408b      	lsls	r3, r1
    3f64:	43db      	mvns	r3, r3
    3f66:	b21b      	sxth	r3, r3
    3f68:	0019      	movs	r1, r3
    3f6a:	9301      	str	r3, [sp, #4]
    3f6c:	4b2c      	ldr	r3, [pc, #176]	; (4020 <disconnect+0x100>)
    3f6e:	469a      	mov	sl, r3
    3f70:	881b      	ldrh	r3, [r3, #0]
    3f72:	400b      	ands	r3, r1
    3f74:	4651      	mov	r1, sl
    3f76:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    3f78:	4649      	mov	r1, r9
    3f7a:	4b2a      	ldr	r3, [pc, #168]	; (4024 <disconnect+0x104>)
    3f7c:	469b      	mov	fp, r3
    3f7e:	881b      	ldrh	r3, [r3, #0]
    3f80:	410b      	asrs	r3, r1
    3f82:	421a      	tst	r2, r3
    3f84:	d114      	bne.n	3fb0 <disconnect+0x90>
    3f86:	23c0      	movs	r3, #192	; 0xc0
    3f88:	009b      	lsls	r3, r3, #2
    3f8a:	18f7      	adds	r7, r6, r3
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
    3f8c:	3b01      	subs	r3, #1
    3f8e:	3bff      	subs	r3, #255	; 0xff
    3f90:	469c      	mov	ip, r3
    3f92:	3bf9      	subs	r3, #249	; 0xf9
    3f94:	3bff      	subs	r3, #255	; 0xff
    3f96:	4466      	add	r6, ip
    3f98:	4698      	mov	r8, r3
    3f9a:	e004      	b.n	3fa6 <disconnect+0x86>
    3f9c:	0030      	movs	r0, r6
    3f9e:	47a0      	blx	r4
    3fa0:	4643      	mov	r3, r8
    3fa2:	4203      	tst	r3, r0
    3fa4:	d10b      	bne.n	3fbe <disconnect+0x9e>
	while(getSn_SR(sn) != SOCK_CLOSED)
    3fa6:	0038      	movs	r0, r7
    3fa8:	47a0      	blx	r4
    3faa:	2800      	cmp	r0, #0
    3fac:	d1f6      	bne.n	3f9c <disconnect+0x7c>
	   {
	      close(sn);
	      return SOCKERR_TIMEOUT;
	   }
	}
	return SOCK_OK;
    3fae:	3001      	adds	r0, #1
}
    3fb0:	b003      	add	sp, #12
    3fb2:	bc3c      	pop	{r2, r3, r4, r5}
    3fb4:	4690      	mov	r8, r2
    3fb6:	4699      	mov	r9, r3
    3fb8:	46a2      	mov	sl, r4
    3fba:	46ab      	mov	fp, r5
    3fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	setSn_CR(sn,Sn_CR_CLOSE);
    3fbe:	2110      	movs	r1, #16
    3fc0:	0028      	movs	r0, r5
    3fc2:	4b16      	ldr	r3, [pc, #88]	; (401c <disconnect+0xfc>)
    3fc4:	4798      	blx	r3
	while( getSn_CR(sn) );
    3fc6:	0028      	movs	r0, r5
    3fc8:	47a0      	blx	r4
    3fca:	4680      	mov	r8, r0
    3fcc:	2800      	cmp	r0, #0
    3fce:	d1fa      	bne.n	3fc6 <disconnect+0xa6>
	setSn_IR(sn, 0xFF);
    3fd0:	211f      	movs	r1, #31
    3fd2:	4b12      	ldr	r3, [pc, #72]	; (401c <disconnect+0xfc>)
    3fd4:	0030      	movs	r0, r6
    3fd6:	4798      	blx	r3
	sock_io_mode &= ~(1<<sn);
    3fd8:	465b      	mov	r3, fp
    3fda:	4659      	mov	r1, fp
    3fdc:	9a01      	ldr	r2, [sp, #4]
    3fde:	881b      	ldrh	r3, [r3, #0]
    3fe0:	4013      	ands	r3, r2
    3fe2:	800b      	strh	r3, [r1, #0]
	sock_is_sending &= ~(1<<sn);
    3fe4:	4653      	mov	r3, sl
    3fe6:	881b      	ldrh	r3, [r3, #0]
	sock_remained_size[sn] = 0;
    3fe8:	4641      	mov	r1, r8
	sock_is_sending &= ~(1<<sn);
    3fea:	4013      	ands	r3, r2
    3fec:	4652      	mov	r2, sl
    3fee:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
    3ff0:	464b      	mov	r3, r9
    3ff2:	005a      	lsls	r2, r3, #1
    3ff4:	4b0c      	ldr	r3, [pc, #48]	; (4028 <disconnect+0x108>)
    3ff6:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
    3ff8:	2200      	movs	r2, #0
    3ffa:	4649      	mov	r1, r9
    3ffc:	4b0b      	ldr	r3, [pc, #44]	; (402c <disconnect+0x10c>)
    3ffe:	545a      	strb	r2, [r3, r1]
	while(getSn_SR(sn) != SOCK_CLOSED);
    4000:	0038      	movs	r0, r7
    4002:	47a0      	blx	r4
    4004:	2800      	cmp	r0, #0
    4006:	d1fb      	bne.n	4000 <disconnect+0xe0>
	      return SOCKERR_TIMEOUT;
    4008:	380d      	subs	r0, #13
    400a:	e7d1      	b.n	3fb0 <disconnect+0x90>
   CHECK_SOCKMODE(Sn_MR_TCP);
    400c:	2005      	movs	r0, #5
    400e:	4240      	negs	r0, r0
    4010:	e7ce      	b.n	3fb0 <disconnect+0x90>
   CHECK_SOCKNUM();
    4012:	2001      	movs	r0, #1
    4014:	4240      	negs	r0, r0
    4016:	e7cb      	b.n	3fb0 <disconnect+0x90>
    4018:	000049bd 	.word	0x000049bd
    401c:	00004a19 	.word	0x00004a19
    4020:	20000b2e 	.word	0x20000b2e
    4024:	20000b2c 	.word	0x20000b2c
    4028:	20000b38 	.word	0x20000b38
    402c:	20000b30 	.word	0x20000b30

00004030 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
    4030:	b5f0      	push	{r4, r5, r6, r7, lr}
    4032:	464e      	mov	r6, r9
    4034:	4645      	mov	r5, r8
    4036:	46de      	mov	lr, fp
    4038:	4657      	mov	r7, sl
    403a:	b5e0      	push	{r5, r6, r7, lr}
    403c:	b083      	sub	sp, #12
    403e:	0006      	movs	r6, r0
    4040:	9101      	str	r1, [sp, #4]
    4042:	0015      	movs	r5, r2
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    4044:	2808      	cmp	r0, #8
    4046:	d900      	bls.n	404a <send+0x1a>
    4048:	e0ac      	b.n	41a4 <send+0x174>
   CHECK_SOCKMODE(Sn_MR_TCP);
    404a:	0140      	lsls	r0, r0, #5
    404c:	3008      	adds	r0, #8
    404e:	4c6e      	ldr	r4, [pc, #440]	; (4208 <send+0x1d8>)
    4050:	0007      	movs	r7, r0
    4052:	9000      	str	r0, [sp, #0]
    4054:	47a0      	blx	r4
    4056:	230f      	movs	r3, #15
    4058:	4018      	ands	r0, r3
    405a:	2801      	cmp	r0, #1
    405c:	d000      	beq.n	4060 <send+0x30>
    405e:	e0a4      	b.n	41aa <send+0x17a>
   CHECK_SOCKDATA();
    4060:	2d00      	cmp	r5, #0
    4062:	d100      	bne.n	4066 <send+0x36>
    4064:	e0a4      	b.n	41b0 <send+0x180>
   tmp = getSn_SR(sn);
    4066:	23c0      	movs	r3, #192	; 0xc0
    4068:	009b      	lsls	r3, r3, #2
    406a:	0038      	movs	r0, r7
    406c:	469c      	mov	ip, r3
    406e:	4460      	add	r0, ip
    4070:	4680      	mov	r8, r0
    4072:	47a0      	blx	r4
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    4074:	2817      	cmp	r0, #23
    4076:	d002      	beq.n	407e <send+0x4e>
    4078:	281c      	cmp	r0, #28
    407a:	d000      	beq.n	407e <send+0x4e>
    407c:	e084      	b.n	4188 <send+0x158>
   if( sock_is_sending & (1<<sn) )
    407e:	4b63      	ldr	r3, [pc, #396]	; (420c <send+0x1dc>)
    4080:	2701      	movs	r7, #1
    4082:	881b      	ldrh	r3, [r3, #0]
    4084:	4133      	asrs	r3, r6
    4086:	421f      	tst	r7, r3
    4088:	d13c      	bne.n	4104 <send+0xd4>
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
   }
   freesize = getSn_TxMAX(sn);
    408a:	22f8      	movs	r2, #248	; 0xf8
    408c:	0152      	lsls	r2, r2, #5
    408e:	4694      	mov	ip, r2
    4090:	9b00      	ldr	r3, [sp, #0]
    4092:	4463      	add	r3, ip
    4094:	0018      	movs	r0, r3
    4096:	47a0      	blx	r4
    4098:	0280      	lsls	r0, r0, #10
    409a:	1c07      	adds	r7, r0, #0
    409c:	b280      	uxth	r0, r0
    409e:	42a8      	cmp	r0, r5
    40a0:	d900      	bls.n	40a4 <send+0x74>
    40a2:	1c2f      	adds	r7, r5, #0
    40a4:	2301      	movs	r3, #1
    40a6:	40b3      	lsls	r3, r6
    40a8:	4699      	mov	r9, r3
    40aa:	4b59      	ldr	r3, [pc, #356]	; (4210 <send+0x1e0>)
    40ac:	b2bf      	uxth	r7, r7
    40ae:	469a      	mov	sl, r3
    40b0:	4b58      	ldr	r3, [pc, #352]	; (4214 <send+0x1e4>)
    40b2:	469b      	mov	fp, r3
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
    40b4:	0030      	movs	r0, r6
    40b6:	47d8      	blx	fp
    40b8:	0005      	movs	r5, r0
      tmp = getSn_SR(sn);
    40ba:	4640      	mov	r0, r8
    40bc:	47a0      	blx	r4
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    40be:	2817      	cmp	r0, #23
    40c0:	d001      	beq.n	40c6 <send+0x96>
    40c2:	281c      	cmp	r0, #28
    40c4:	d135      	bne.n	4132 <send+0x102>
      {
         close(sn);
         return SOCKERR_SOCKSTATUS;
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    40c6:	4653      	mov	r3, sl
    40c8:	464a      	mov	r2, r9
    40ca:	881b      	ldrh	r3, [r3, #0]
    40cc:	421a      	tst	r2, r3
    40ce:	d02d      	beq.n	412c <send+0xfc>
    40d0:	42bd      	cmp	r5, r7
    40d2:	d323      	bcc.n	411c <send+0xec>
      if(len <= freesize) break;
   }
   wiz_send_data(sn, buf, len);
    40d4:	9901      	ldr	r1, [sp, #4]
    40d6:	0030      	movs	r0, r6
    40d8:	4b4f      	ldr	r3, [pc, #316]	; (4218 <send+0x1e8>)
    40da:	003a      	movs	r2, r7
    40dc:	4798      	blx	r3

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
    40de:	9d00      	ldr	r5, [sp, #0]
    40e0:	2120      	movs	r1, #32
    40e2:	3501      	adds	r5, #1
    40e4:	35ff      	adds	r5, #255	; 0xff
    40e6:	0028      	movs	r0, r5
    40e8:	4b4c      	ldr	r3, [pc, #304]	; (421c <send+0x1ec>)
    40ea:	4798      	blx	r3
   /* wait to process the command... */
   while(getSn_CR(sn));
    40ec:	0028      	movs	r0, r5
    40ee:	47a0      	blx	r4
    40f0:	2800      	cmp	r0, #0
    40f2:	d1fb      	bne.n	40ec <send+0xbc>
   sock_is_sending |= (1 << sn);
    40f4:	464a      	mov	r2, r9
    40f6:	4b45      	ldr	r3, [pc, #276]	; (420c <send+0x1dc>)
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    40f8:	0038      	movs	r0, r7
   sock_is_sending |= (1 << sn);
    40fa:	881b      	ldrh	r3, [r3, #0]
    40fc:	4313      	orrs	r3, r2
    40fe:	4a43      	ldr	r2, [pc, #268]	; (420c <send+0x1dc>)
    4100:	8013      	strh	r3, [r2, #0]
   return (int32_t)len;
    4102:	e00c      	b.n	411e <send+0xee>
      tmp = getSn_IR(sn);
    4104:	2280      	movs	r2, #128	; 0x80
    4106:	0092      	lsls	r2, r2, #2
    4108:	4694      	mov	ip, r2
    410a:	9b00      	ldr	r3, [sp, #0]
    410c:	4463      	add	r3, ip
    410e:	0018      	movs	r0, r3
    4110:	4699      	mov	r9, r3
    4112:	47a0      	blx	r4
      if(tmp & Sn_IR_SENDOK)
    4114:	06c3      	lsls	r3, r0, #27
    4116:	d43a      	bmi.n	418e <send+0x15e>
      else if(tmp & Sn_IR_TIMEOUT)
    4118:	0703      	lsls	r3, r0, #28
    411a:	d44c      	bmi.n	41b6 <send+0x186>
      else return SOCK_BUSY;
    411c:	2000      	movs	r0, #0
}
    411e:	b003      	add	sp, #12
    4120:	bc3c      	pop	{r2, r3, r4, r5}
    4122:	4690      	mov	r8, r2
    4124:	4699      	mov	r9, r3
    4126:	46a2      	mov	sl, r4
    4128:	46ab      	mov	fp, r5
    412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(len <= freesize) break;
    412c:	42bd      	cmp	r5, r7
    412e:	d3c1      	bcc.n	40b4 <send+0x84>
    4130:	e7d0      	b.n	40d4 <send+0xa4>
	setSn_CR(sn,Sn_CR_CLOSE);
    4132:	9b00      	ldr	r3, [sp, #0]
    4134:	2110      	movs	r1, #16
    4136:	1c5f      	adds	r7, r3, #1
    4138:	37ff      	adds	r7, #255	; 0xff
    413a:	4b38      	ldr	r3, [pc, #224]	; (421c <send+0x1ec>)
    413c:	0038      	movs	r0, r7
    413e:	469b      	mov	fp, r3
    4140:	4798      	blx	r3
	while( getSn_CR(sn) );
    4142:	0038      	movs	r0, r7
    4144:	47a0      	blx	r4
    4146:	1e05      	subs	r5, r0, #0
    4148:	d1fb      	bne.n	4142 <send+0x112>
	setSn_IR(sn, 0xFF);
    414a:	2280      	movs	r2, #128	; 0x80
    414c:	0092      	lsls	r2, r2, #2
    414e:	4694      	mov	ip, r2
    4150:	9b00      	ldr	r3, [sp, #0]
    4152:	211f      	movs	r1, #31
    4154:	4463      	add	r3, ip
    4156:	0018      	movs	r0, r3
    4158:	47d8      	blx	fp
	sock_io_mode &= ~(1<<sn);
    415a:	464b      	mov	r3, r9
    415c:	4652      	mov	r2, sl
    415e:	43db      	mvns	r3, r3
    4160:	4651      	mov	r1, sl
    4162:	8812      	ldrh	r2, [r2, #0]
    4164:	b21b      	sxth	r3, r3
    4166:	401a      	ands	r2, r3
    4168:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
    416a:	4a28      	ldr	r2, [pc, #160]	; (420c <send+0x1dc>)
    416c:	8812      	ldrh	r2, [r2, #0]
    416e:	4013      	ands	r3, r2
    4170:	4a26      	ldr	r2, [pc, #152]	; (420c <send+0x1dc>)
    4172:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
    4174:	4b2a      	ldr	r3, [pc, #168]	; (4220 <send+0x1f0>)
    4176:	0072      	lsls	r2, r6, #1
    4178:	52d5      	strh	r5, [r2, r3]
	sock_pack_info[sn] = 0;
    417a:	2200      	movs	r2, #0
    417c:	4b29      	ldr	r3, [pc, #164]	; (4224 <send+0x1f4>)
    417e:	559a      	strb	r2, [r3, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
    4180:	4640      	mov	r0, r8
    4182:	47a0      	blx	r4
    4184:	2800      	cmp	r0, #0
    4186:	d1fb      	bne.n	4180 <send+0x150>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    4188:	2007      	movs	r0, #7
    418a:	4240      	negs	r0, r0
    418c:	e7c7      	b.n	411e <send+0xee>
         sock_is_sending &= ~(1<<sn);         
    418e:	40b7      	lsls	r7, r6
         setSn_IR(sn, Sn_IR_SENDOK);
    4190:	4b22      	ldr	r3, [pc, #136]	; (421c <send+0x1ec>)
    4192:	2110      	movs	r1, #16
    4194:	4648      	mov	r0, r9
    4196:	4798      	blx	r3
         sock_is_sending &= ~(1<<sn);         
    4198:	4b1c      	ldr	r3, [pc, #112]	; (420c <send+0x1dc>)
    419a:	4a1c      	ldr	r2, [pc, #112]	; (420c <send+0x1dc>)
    419c:	881b      	ldrh	r3, [r3, #0]
    419e:	43bb      	bics	r3, r7
    41a0:	8013      	strh	r3, [r2, #0]
    41a2:	e772      	b.n	408a <send+0x5a>
   CHECK_SOCKNUM();
    41a4:	2001      	movs	r0, #1
    41a6:	4240      	negs	r0, r0
    41a8:	e7b9      	b.n	411e <send+0xee>
   CHECK_SOCKMODE(Sn_MR_TCP);
    41aa:	2005      	movs	r0, #5
    41ac:	4240      	negs	r0, r0
    41ae:	e7b6      	b.n	411e <send+0xee>
   CHECK_SOCKDATA();
    41b0:	200e      	movs	r0, #14
    41b2:	4240      	negs	r0, r0
    41b4:	e7b3      	b.n	411e <send+0xee>
	setSn_CR(sn,Sn_CR_CLOSE);
    41b6:	9f00      	ldr	r7, [sp, #0]
    41b8:	4b18      	ldr	r3, [pc, #96]	; (421c <send+0x1ec>)
    41ba:	3701      	adds	r7, #1
    41bc:	37ff      	adds	r7, #255	; 0xff
    41be:	2110      	movs	r1, #16
    41c0:	0038      	movs	r0, r7
    41c2:	469b      	mov	fp, r3
    41c4:	4798      	blx	r3
	while( getSn_CR(sn) );
    41c6:	0038      	movs	r0, r7
    41c8:	47a0      	blx	r4
    41ca:	1e05      	subs	r5, r0, #0
    41cc:	d1fb      	bne.n	41c6 <send+0x196>
	setSn_IR(sn, 0xFF);
    41ce:	211f      	movs	r1, #31
    41d0:	4648      	mov	r0, r9
    41d2:	47d8      	blx	fp
	sock_io_mode &= ~(1<<sn);
    41d4:	2301      	movs	r3, #1
    41d6:	40b3      	lsls	r3, r6
    41d8:	43db      	mvns	r3, r3
    41da:	490d      	ldr	r1, [pc, #52]	; (4210 <send+0x1e0>)
    41dc:	b21b      	sxth	r3, r3
    41de:	880a      	ldrh	r2, [r1, #0]
    41e0:	401a      	ands	r2, r3
    41e2:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
    41e4:	4a09      	ldr	r2, [pc, #36]	; (420c <send+0x1dc>)
    41e6:	8812      	ldrh	r2, [r2, #0]
    41e8:	4013      	ands	r3, r2
    41ea:	4a08      	ldr	r2, [pc, #32]	; (420c <send+0x1dc>)
    41ec:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
    41ee:	4b0c      	ldr	r3, [pc, #48]	; (4220 <send+0x1f0>)
    41f0:	0072      	lsls	r2, r6, #1
    41f2:	52d5      	strh	r5, [r2, r3]
	sock_pack_info[sn] = 0;
    41f4:	2200      	movs	r2, #0
    41f6:	4b0b      	ldr	r3, [pc, #44]	; (4224 <send+0x1f4>)
    41f8:	559a      	strb	r2, [r3, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
    41fa:	4640      	mov	r0, r8
    41fc:	47a0      	blx	r4
    41fe:	2800      	cmp	r0, #0
    4200:	d1fb      	bne.n	41fa <send+0x1ca>
         return SOCKERR_TIMEOUT;
    4202:	380d      	subs	r0, #13
    4204:	e78b      	b.n	411e <send+0xee>
    4206:	46c0      	nop			; (mov r8, r8)
    4208:	000049bd 	.word	0x000049bd
    420c:	20000b2e 	.word	0x20000b2e
    4210:	20000b2c 	.word	0x20000b2c
    4214:	00004b65 	.word	0x00004b65
    4218:	00004c1d 	.word	0x00004c1d
    421c:	00004a19 	.word	0x00004a19
    4220:	20000b38 	.word	0x20000b38
    4224:	20000b30 	.word	0x20000b30

00004228 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    4228:	b5f0      	push	{r4, r5, r6, r7, lr}
    422a:	464e      	mov	r6, r9
    422c:	46de      	mov	lr, fp
    422e:	4657      	mov	r7, sl
    4230:	4645      	mov	r5, r8
    4232:	b5e0      	push	{r5, r6, r7, lr}
    4234:	b085      	sub	sp, #20
    4236:	0006      	movs	r6, r0
    4238:	9102      	str	r1, [sp, #8]
    423a:	0014      	movs	r4, r2
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    423c:	2808      	cmp	r0, #8
    423e:	d900      	bls.n	4242 <recv+0x1a>
    4240:	e0cb      	b.n	43da <recv+0x1b2>
   CHECK_SOCKMODE(Sn_MR_TCP);
    4242:	0140      	lsls	r0, r0, #5
    4244:	3008      	adds	r0, #8
    4246:	4d69      	ldr	r5, [pc, #420]	; (43ec <recv+0x1c4>)
    4248:	0007      	movs	r7, r0
    424a:	9001      	str	r0, [sp, #4]
    424c:	47a8      	blx	r5
    424e:	230f      	movs	r3, #15
    4250:	4018      	ands	r0, r3
    4252:	2801      	cmp	r0, #1
    4254:	d000      	beq.n	4258 <recv+0x30>
    4256:	e0c3      	b.n	43e0 <recv+0x1b8>
   CHECK_SOCKDATA();
    4258:	2c00      	cmp	r4, #0
    425a:	d100      	bne.n	425e <recv+0x36>
    425c:	e0c3      	b.n	43e6 <recv+0x1be>
   
   recvsize = getSn_RxMAX(sn);
    425e:	23f0      	movs	r3, #240	; 0xf0
    4260:	015b      	lsls	r3, r3, #5
    4262:	469c      	mov	ip, r3
    4264:	0038      	movs	r0, r7
    4266:	4460      	add	r0, ip
    4268:	47a8      	blx	r5
    426a:	0280      	lsls	r0, r0, #10
    426c:	1c03      	adds	r3, r0, #0
    426e:	b280      	uxth	r0, r0
    4270:	42a0      	cmp	r0, r4
    4272:	d852      	bhi.n	431a <recv+0xf2>
    4274:	21c0      	movs	r1, #192	; 0xc0
    4276:	9a01      	ldr	r2, [sp, #4]
    4278:	b29b      	uxth	r3, r3
    427a:	0089      	lsls	r1, r1, #2
    427c:	468c      	mov	ip, r1
    427e:	9303      	str	r3, [sp, #12]
    4280:	0013      	movs	r3, r2
    4282:	4463      	add	r3, ip
    4284:	4698      	mov	r8, r3
    4286:	2301      	movs	r3, #1
    4288:	40b3      	lsls	r3, r6
    428a:	4699      	mov	r9, r3
    428c:	4b58      	ldr	r3, [pc, #352]	; (43f0 <recv+0x1c8>)
    428e:	469a      	mov	sl, r3
         if (tmp != SOCK_ESTABLISHED)
         {
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    4290:	0013      	movs	r3, r2
    4292:	22f8      	movs	r2, #248	; 0xf8
    4294:	0152      	lsls	r2, r2, #5
    4296:	4694      	mov	ip, r2
    4298:	4463      	add	r3, ip
    429a:	9300      	str	r3, [sp, #0]
            {
               close(sn);
               return SOCKERR_SOCKSTATUS;
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    429c:	4b55      	ldr	r3, [pc, #340]	; (43f4 <recv+0x1cc>)
    429e:	469b      	mov	fp, r3
         recvsize = getSn_RX_RSR(sn);
    42a0:	0030      	movs	r0, r6
    42a2:	47d0      	blx	sl
    42a4:	0004      	movs	r4, r0
         tmp = getSn_SR(sn);
    42a6:	4640      	mov	r0, r8
    42a8:	47a8      	blx	r5
         if (tmp != SOCK_ESTABLISHED)
    42aa:	2817      	cmp	r0, #23
    42ac:	d00c      	beq.n	42c8 <recv+0xa0>
            if(tmp == SOCK_CLOSE_WAIT)
    42ae:	281c      	cmp	r0, #28
    42b0:	d135      	bne.n	431e <recv+0xf6>
               if(recvsize != 0) break;
    42b2:	2c00      	cmp	r4, #0
    42b4:	d110      	bne.n	42d8 <recv+0xb0>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    42b6:	4b50      	ldr	r3, [pc, #320]	; (43f8 <recv+0x1d0>)
    42b8:	0030      	movs	r0, r6
    42ba:	4798      	blx	r3
    42bc:	0007      	movs	r7, r0
    42be:	9800      	ldr	r0, [sp, #0]
    42c0:	47a8      	blx	r5
    42c2:	0280      	lsls	r0, r0, #10
    42c4:	4287      	cmp	r7, r0
    42c6:	d058      	beq.n	437a <recv+0x152>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    42c8:	465b      	mov	r3, fp
    42ca:	464a      	mov	r2, r9
    42cc:	881b      	ldrh	r3, [r3, #0]
    42ce:	421a      	tst	r2, r3
    42d0:	d020      	beq.n	4314 <recv+0xec>
    42d2:	2c00      	cmp	r4, #0
    42d4:	d100      	bne.n	42d8 <recv+0xb0>
    42d6:	e07e      	b.n	43d6 <recv+0x1ae>
    42d8:	9a03      	ldr	r2, [sp, #12]
    42da:	1c27      	adds	r7, r4, #0
    42dc:	4294      	cmp	r4, r2
    42de:	d900      	bls.n	42e2 <recv+0xba>
    42e0:	1c17      	adds	r7, r2, #0
    42e2:	b2bf      	uxth	r7, r7
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
   wiz_recv_data(sn, buf, len);
    42e4:	9902      	ldr	r1, [sp, #8]
    42e6:	0030      	movs	r0, r6
    42e8:	4b44      	ldr	r3, [pc, #272]	; (43fc <recv+0x1d4>)
    42ea:	003a      	movs	r2, r7
    42ec:	4798      	blx	r3
   setSn_CR(sn,Sn_CR_RECV);
    42ee:	9c01      	ldr	r4, [sp, #4]
    42f0:	2140      	movs	r1, #64	; 0x40
    42f2:	3401      	adds	r4, #1
    42f4:	34ff      	adds	r4, #255	; 0xff
    42f6:	0020      	movs	r0, r4
    42f8:	4b41      	ldr	r3, [pc, #260]	; (4400 <recv+0x1d8>)
    42fa:	4798      	blx	r3
   while(getSn_CR(sn));
    42fc:	0020      	movs	r0, r4
    42fe:	47a8      	blx	r5
    4300:	2800      	cmp	r0, #0
    4302:	d1fb      	bne.n	42fc <recv+0xd4>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    4304:	0038      	movs	r0, r7
}
    4306:	b005      	add	sp, #20
    4308:	bc3c      	pop	{r2, r3, r4, r5}
    430a:	4690      	mov	r8, r2
    430c:	4699      	mov	r9, r3
    430e:	46a2      	mov	sl, r4
    4310:	46ab      	mov	fp, r5
    4312:	bdf0      	pop	{r4, r5, r6, r7, pc}
         if(recvsize != 0) break;
    4314:	2c00      	cmp	r4, #0
    4316:	d0c3      	beq.n	42a0 <recv+0x78>
    4318:	e7de      	b.n	42d8 <recv+0xb0>
    431a:	1c23      	adds	r3, r4, #0
    431c:	e7aa      	b.n	4274 <recv+0x4c>
	setSn_CR(sn,Sn_CR_CLOSE);
    431e:	9b01      	ldr	r3, [sp, #4]
    4320:	2110      	movs	r1, #16
    4322:	1c5f      	adds	r7, r3, #1
    4324:	37ff      	adds	r7, #255	; 0xff
    4326:	4b36      	ldr	r3, [pc, #216]	; (4400 <recv+0x1d8>)
    4328:	0038      	movs	r0, r7
    432a:	469a      	mov	sl, r3
    432c:	4798      	blx	r3
	while( getSn_CR(sn) );
    432e:	0038      	movs	r0, r7
    4330:	47a8      	blx	r5
    4332:	2800      	cmp	r0, #0
    4334:	d1fb      	bne.n	432e <recv+0x106>
	setSn_IR(sn, 0xFF);
    4336:	2280      	movs	r2, #128	; 0x80
    4338:	0092      	lsls	r2, r2, #2
    433a:	4694      	mov	ip, r2
    433c:	9b01      	ldr	r3, [sp, #4]
    433e:	0004      	movs	r4, r0
    4340:	4463      	add	r3, ip
    4342:	0018      	movs	r0, r3
    4344:	211f      	movs	r1, #31
    4346:	47d0      	blx	sl
	sock_io_mode &= ~(1<<sn);
    4348:	464b      	mov	r3, r9
    434a:	43db      	mvns	r3, r3
    434c:	4929      	ldr	r1, [pc, #164]	; (43f4 <recv+0x1cc>)
    434e:	b21b      	sxth	r3, r3
    4350:	880a      	ldrh	r2, [r1, #0]
    4352:	401a      	ands	r2, r3
    4354:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
    4356:	492b      	ldr	r1, [pc, #172]	; (4404 <recv+0x1dc>)
    4358:	880a      	ldrh	r2, [r1, #0]
    435a:	4013      	ands	r3, r2
    435c:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
    435e:	4b2a      	ldr	r3, [pc, #168]	; (4408 <recv+0x1e0>)
    4360:	0072      	lsls	r2, r6, #1
    4362:	52d4      	strh	r4, [r2, r3]
	sock_pack_info[sn] = 0;
    4364:	2200      	movs	r2, #0
    4366:	4644      	mov	r4, r8
    4368:	4b28      	ldr	r3, [pc, #160]	; (440c <recv+0x1e4>)
    436a:	559a      	strb	r2, [r3, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
    436c:	0020      	movs	r0, r4
    436e:	47a8      	blx	r5
    4370:	2800      	cmp	r0, #0
    4372:	d1fb      	bne.n	436c <recv+0x144>
                  return SOCKERR_SOCKSTATUS;
    4374:	2007      	movs	r0, #7
    4376:	4240      	negs	r0, r0
    4378:	e7c5      	b.n	4306 <recv+0xde>
	setSn_CR(sn,Sn_CR_CLOSE);
    437a:	9b01      	ldr	r3, [sp, #4]
    437c:	2110      	movs	r1, #16
    437e:	1c5f      	adds	r7, r3, #1
    4380:	37ff      	adds	r7, #255	; 0xff
    4382:	4b1f      	ldr	r3, [pc, #124]	; (4400 <recv+0x1d8>)
    4384:	0038      	movs	r0, r7
    4386:	469a      	mov	sl, r3
    4388:	4798      	blx	r3
	while( getSn_CR(sn) );
    438a:	0038      	movs	r0, r7
    438c:	47a8      	blx	r5
    438e:	2800      	cmp	r0, #0
    4390:	d1fb      	bne.n	438a <recv+0x162>
	setSn_IR(sn, 0xFF);
    4392:	2280      	movs	r2, #128	; 0x80
    4394:	0092      	lsls	r2, r2, #2
    4396:	4694      	mov	ip, r2
    4398:	9b01      	ldr	r3, [sp, #4]
    439a:	0004      	movs	r4, r0
    439c:	4463      	add	r3, ip
    439e:	0018      	movs	r0, r3
    43a0:	211f      	movs	r1, #31
    43a2:	47d0      	blx	sl
	sock_io_mode &= ~(1<<sn);
    43a4:	464b      	mov	r3, r9
    43a6:	43db      	mvns	r3, r3
    43a8:	4912      	ldr	r1, [pc, #72]	; (43f4 <recv+0x1cc>)
    43aa:	b21b      	sxth	r3, r3
    43ac:	880a      	ldrh	r2, [r1, #0]
    43ae:	401a      	ands	r2, r3
    43b0:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
    43b2:	4914      	ldr	r1, [pc, #80]	; (4404 <recv+0x1dc>)
    43b4:	880a      	ldrh	r2, [r1, #0]
    43b6:	4013      	ands	r3, r2
    43b8:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
    43ba:	4b13      	ldr	r3, [pc, #76]	; (4408 <recv+0x1e0>)
    43bc:	0072      	lsls	r2, r6, #1
    43be:	52d4      	strh	r4, [r2, r3]
	sock_pack_info[sn] = 0;
    43c0:	2200      	movs	r2, #0
    43c2:	4644      	mov	r4, r8
    43c4:	4b11      	ldr	r3, [pc, #68]	; (440c <recv+0x1e4>)
    43c6:	559a      	strb	r2, [r3, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
    43c8:	0020      	movs	r0, r4
    43ca:	47a8      	blx	r5
    43cc:	2800      	cmp	r0, #0
    43ce:	d1fb      	bne.n	43c8 <recv+0x1a0>
                  return SOCKERR_SOCKSTATUS;
    43d0:	2007      	movs	r0, #7
    43d2:	4240      	negs	r0, r0
    43d4:	e797      	b.n	4306 <recv+0xde>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    43d6:	2000      	movs	r0, #0
    43d8:	e795      	b.n	4306 <recv+0xde>
   CHECK_SOCKNUM();
    43da:	2001      	movs	r0, #1
    43dc:	4240      	negs	r0, r0
    43de:	e792      	b.n	4306 <recv+0xde>
   CHECK_SOCKMODE(Sn_MR_TCP);
    43e0:	2005      	movs	r0, #5
    43e2:	4240      	negs	r0, r0
    43e4:	e78f      	b.n	4306 <recv+0xde>
   CHECK_SOCKDATA();
    43e6:	200e      	movs	r0, #14
    43e8:	4240      	negs	r0, r0
    43ea:	e78c      	b.n	4306 <recv+0xde>
    43ec:	000049bd 	.word	0x000049bd
    43f0:	00004bc1 	.word	0x00004bc1
    43f4:	20000b2c 	.word	0x20000b2c
    43f8:	00004b65 	.word	0x00004b65
    43fc:	00004c91 	.word	0x00004c91
    4400:	00004a19 	.word	0x00004a19
    4404:	20000b2e 	.word	0x20000b2e
    4408:	20000b38 	.word	0x20000b38
    440c:	20000b30 	.word	0x20000b30

00004410 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
    4410:	b5f0      	push	{r4, r5, r6, r7, lr}
    4412:	4645      	mov	r5, r8
    4414:	4657      	mov	r7, sl
    4416:	464e      	mov	r6, r9
    4418:	46de      	mov	lr, fp
    441a:	b5e0      	push	{r5, r6, r7, lr}
    441c:	b083      	sub	sp, #12
    441e:	4698      	mov	r8, r3
    4420:	ab0c      	add	r3, sp, #48	; 0x30
    4422:	0007      	movs	r7, r0
    4424:	9101      	str	r1, [sp, #4]
    4426:	0016      	movs	r6, r2
    4428:	881d      	ldrh	r5, [r3, #0]
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    442a:	2808      	cmp	r0, #8
    442c:	d900      	bls.n	4430 <sendto+0x20>
    442e:	e0c3      	b.n	45b8 <sendto+0x1a8>
   switch(getSn_MR(sn) & 0x0F)
    4430:	0143      	lsls	r3, r0, #5
    4432:	3308      	adds	r3, #8
    4434:	0018      	movs	r0, r3
    4436:	4c65      	ldr	r4, [pc, #404]	; (45cc <sendto+0x1bc>)
    4438:	9300      	str	r3, [sp, #0]
    443a:	47a0      	blx	r4
    443c:	230f      	movs	r3, #15
    443e:	4018      	ands	r0, r3
    4440:	3802      	subs	r0, #2
    4442:	2802      	cmp	r0, #2
    4444:	d900      	bls.n	4448 <sendto+0x38>
    4446:	e0ba      	b.n	45be <sendto+0x1ae>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    4448:	2e00      	cmp	r6, #0
    444a:	d100      	bne.n	444e <sendto+0x3e>
    444c:	e0ba      	b.n	45c4 <sendto+0x1b4>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
    444e:	4643      	mov	r3, r8
    4450:	781a      	ldrb	r2, [r3, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    4452:	785b      	ldrb	r3, [r3, #1]
    4454:	0212      	lsls	r2, r2, #8
    4456:	189a      	adds	r2, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    4458:	4643      	mov	r3, r8
    445a:	789b      	ldrb	r3, [r3, #2]
    445c:	0212      	lsls	r2, r2, #8
    445e:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    4460:	4642      	mov	r2, r8
    4462:	78d2      	ldrb	r2, [r2, #3]
    4464:	021b      	lsls	r3, r3, #8
    4466:	18d3      	adds	r3, r2, r3
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    4468:	2b00      	cmp	r3, #0
    446a:	d100      	bne.n	446e <sendto+0x5e>
    446c:	e093      	b.n	4596 <sendto+0x186>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    446e:	2d00      	cmp	r5, #0
    4470:	d100      	bne.n	4474 <sendto+0x64>
    4472:	e086      	b.n	4582 <sendto+0x172>
   tmp = getSn_SR(sn);
    4474:	22c0      	movs	r2, #192	; 0xc0
    4476:	0092      	lsls	r2, r2, #2
    4478:	4694      	mov	ip, r2
    447a:	9b00      	ldr	r3, [sp, #0]
    447c:	4463      	add	r3, ip
    447e:	0018      	movs	r0, r3
    4480:	4699      	mov	r9, r3
    4482:	47a0      	blx	r4
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    4484:	2842      	cmp	r0, #66	; 0x42
    4486:	d00c      	beq.n	44a2 <sendto+0x92>
    4488:	23ef      	movs	r3, #239	; 0xef
    448a:	4018      	ands	r0, r3
    448c:	2822      	cmp	r0, #34	; 0x22
    448e:	d008      	beq.n	44a2 <sendto+0x92>
    4490:	2007      	movs	r0, #7
    4492:	4240      	negs	r0, r0
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    4494:	b003      	add	sp, #12
    4496:	bc3c      	pop	{r2, r3, r4, r5}
    4498:	4690      	mov	r8, r2
    449a:	4699      	mov	r9, r3
    449c:	46a2      	mov	sl, r4
    449e:	46ab      	mov	fp, r5
    44a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   setSn_DIPR(sn,addr);
    44a2:	20c0      	movs	r0, #192	; 0xc0
    44a4:	0100      	lsls	r0, r0, #4
    44a6:	4684      	mov	ip, r0
    44a8:	9b00      	ldr	r3, [sp, #0]
    44aa:	2204      	movs	r2, #4
    44ac:	4463      	add	r3, ip
    44ae:	0018      	movs	r0, r3
    44b0:	4641      	mov	r1, r8
    44b2:	4b47      	ldr	r3, [pc, #284]	; (45d0 <sendto+0x1c0>)
    44b4:	4798      	blx	r3
   setSn_DPORT(sn,port);      
    44b6:	2380      	movs	r3, #128	; 0x80
    44b8:	9a00      	ldr	r2, [sp, #0]
    44ba:	015b      	lsls	r3, r3, #5
    44bc:	0010      	movs	r0, r2
    44be:	469c      	mov	ip, r3
    44c0:	0a29      	lsrs	r1, r5, #8
    44c2:	4460      	add	r0, ip
    44c4:	4b43      	ldr	r3, [pc, #268]	; (45d4 <sendto+0x1c4>)
    44c6:	4798      	blx	r3
    44c8:	2388      	movs	r3, #136	; 0x88
    44ca:	b2e9      	uxtb	r1, r5
    44cc:	9d00      	ldr	r5, [sp, #0]
    44ce:	015b      	lsls	r3, r3, #5
    44d0:	469c      	mov	ip, r3
    44d2:	0028      	movs	r0, r5
    44d4:	4b3f      	ldr	r3, [pc, #252]	; (45d4 <sendto+0x1c4>)
    44d6:	4460      	add	r0, ip
    44d8:	4798      	blx	r3
   freesize = getSn_TxMAX(sn);
    44da:	23f8      	movs	r3, #248	; 0xf8
    44dc:	015b      	lsls	r3, r3, #5
    44de:	469c      	mov	ip, r3
    44e0:	0028      	movs	r0, r5
    44e2:	4460      	add	r0, ip
    44e4:	47a0      	blx	r4
    44e6:	0280      	lsls	r0, r0, #10
    44e8:	1c03      	adds	r3, r0, #0
    44ea:	b280      	uxth	r0, r0
    44ec:	42b0      	cmp	r0, r6
    44ee:	d850      	bhi.n	4592 <sendto+0x182>
    44f0:	b29e      	uxth	r6, r3
    44f2:	2301      	movs	r3, #1
    44f4:	40bb      	lsls	r3, r7
    44f6:	4698      	mov	r8, r3
    44f8:	4b37      	ldr	r3, [pc, #220]	; (45d8 <sendto+0x1c8>)
      freesize = getSn_TX_FSR(sn);
    44fa:	0038      	movs	r0, r7
    44fc:	469a      	mov	sl, r3
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    44fe:	4b37      	ldr	r3, [pc, #220]	; (45dc <sendto+0x1cc>)
    4500:	469b      	mov	fp, r3
      freesize = getSn_TX_FSR(sn);
    4502:	47d0      	blx	sl
    4504:	0005      	movs	r5, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    4506:	4648      	mov	r0, r9
    4508:	47a0      	blx	r4
    450a:	2800      	cmp	r0, #0
    450c:	d036      	beq.n	457c <sendto+0x16c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    450e:	465b      	mov	r3, fp
    4510:	4642      	mov	r2, r8
    4512:	881b      	ldrh	r3, [r3, #0]
    4514:	421a      	tst	r2, r3
    4516:	d028      	beq.n	456a <sendto+0x15a>
    4518:	42ae      	cmp	r6, r5
    451a:	d844      	bhi.n	45a6 <sendto+0x196>
	wiz_send_data(sn, buf, len);
    451c:	9901      	ldr	r1, [sp, #4]
    451e:	0038      	movs	r0, r7
    4520:	4b2f      	ldr	r3, [pc, #188]	; (45e0 <sendto+0x1d0>)
    4522:	0032      	movs	r2, r6
    4524:	4798      	blx	r3
	setSn_CR(sn,Sn_CR_SEND);
    4526:	9b00      	ldr	r3, [sp, #0]
    4528:	2120      	movs	r1, #32
    452a:	1c5d      	adds	r5, r3, #1
    452c:	35ff      	adds	r5, #255	; 0xff
    452e:	0028      	movs	r0, r5
    4530:	4b28      	ldr	r3, [pc, #160]	; (45d4 <sendto+0x1c4>)
    4532:	4798      	blx	r3
	while(getSn_CR(sn));
    4534:	0028      	movs	r0, r5
    4536:	47a0      	blx	r4
    4538:	2800      	cmp	r0, #0
    453a:	d1fb      	bne.n	4534 <sendto+0x124>
    453c:	2280      	movs	r2, #128	; 0x80
    453e:	0092      	lsls	r2, r2, #2
    4540:	4694      	mov	ip, r2
    4542:	9b00      	ldr	r3, [sp, #0]
      if(tmp & Sn_IR_SENDOK)
    4544:	2710      	movs	r7, #16
    4546:	4463      	add	r3, ip
    4548:	001d      	movs	r5, r3
      else if(tmp & Sn_IR_TIMEOUT)
    454a:	2308      	movs	r3, #8
    454c:	4698      	mov	r8, r3
    454e:	e002      	b.n	4556 <sendto+0x146>
    4550:	4643      	mov	r3, r8
    4552:	4203      	tst	r3, r0
    4554:	d129      	bne.n	45aa <sendto+0x19a>
      tmp = getSn_IR(sn);
    4556:	0028      	movs	r0, r5
    4558:	47a0      	blx	r4
      if(tmp & Sn_IR_SENDOK)
    455a:	4207      	tst	r7, r0
    455c:	d0f8      	beq.n	4550 <sendto+0x140>
         setSn_IR(sn, Sn_IR_SENDOK);
    455e:	0028      	movs	r0, r5
    4560:	2110      	movs	r1, #16
    4562:	4b1c      	ldr	r3, [pc, #112]	; (45d4 <sendto+0x1c4>)
    4564:	4798      	blx	r3
   return (int32_t)len;
    4566:	0030      	movs	r0, r6
    4568:	e794      	b.n	4494 <sendto+0x84>
      if(len <= freesize) break;
    456a:	42ae      	cmp	r6, r5
    456c:	d9d6      	bls.n	451c <sendto+0x10c>
      freesize = getSn_TX_FSR(sn);
    456e:	0038      	movs	r0, r7
    4570:	47d0      	blx	sl
    4572:	0005      	movs	r5, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    4574:	4648      	mov	r0, r9
    4576:	47a0      	blx	r4
    4578:	2800      	cmp	r0, #0
    457a:	d1c8      	bne.n	450e <sendto+0xfe>
    457c:	2004      	movs	r0, #4
    457e:	4240      	negs	r0, r0
    4580:	e788      	b.n	4494 <sendto+0x84>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    4582:	9800      	ldr	r0, [sp, #0]
    4584:	47a0      	blx	r4
    4586:	0743      	lsls	r3, r0, #29
    4588:	d500      	bpl.n	458c <sendto+0x17c>
    458a:	e773      	b.n	4474 <sendto+0x64>
    458c:	200b      	movs	r0, #11
    458e:	4240      	negs	r0, r0
    4590:	e780      	b.n	4494 <sendto+0x84>
    4592:	1c33      	adds	r3, r6, #0
    4594:	e7ac      	b.n	44f0 <sendto+0xe0>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    4596:	9800      	ldr	r0, [sp, #0]
    4598:	47a0      	blx	r4
    459a:	0743      	lsls	r3, r0, #29
    459c:	d500      	bpl.n	45a0 <sendto+0x190>
    459e:	e766      	b.n	446e <sendto+0x5e>
    45a0:	200c      	movs	r0, #12
    45a2:	4240      	negs	r0, r0
    45a4:	e776      	b.n	4494 <sendto+0x84>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    45a6:	2000      	movs	r0, #0
    45a8:	e774      	b.n	4494 <sendto+0x84>
         setSn_IR(sn, Sn_IR_TIMEOUT);
    45aa:	0028      	movs	r0, r5
    45ac:	2108      	movs	r1, #8
    45ae:	4b09      	ldr	r3, [pc, #36]	; (45d4 <sendto+0x1c4>)
    45b0:	4798      	blx	r3
         return SOCKERR_TIMEOUT;
    45b2:	200d      	movs	r0, #13
    45b4:	4240      	negs	r0, r0
    45b6:	e76d      	b.n	4494 <sendto+0x84>
   CHECK_SOCKNUM();
    45b8:	2001      	movs	r0, #1
    45ba:	4240      	negs	r0, r0
    45bc:	e76a      	b.n	4494 <sendto+0x84>
         return SOCKERR_SOCKMODE;
    45be:	2005      	movs	r0, #5
    45c0:	4240      	negs	r0, r0
    45c2:	e767      	b.n	4494 <sendto+0x84>
   CHECK_SOCKDATA();
    45c4:	200e      	movs	r0, #14
    45c6:	4240      	negs	r0, r0
    45c8:	e764      	b.n	4494 <sendto+0x84>
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	000049bd 	.word	0x000049bd
    45d0:	00004aed 	.word	0x00004aed
    45d4:	00004a19 	.word	0x00004a19
    45d8:	00004b65 	.word	0x00004b65
    45dc:	20000b2c 	.word	0x20000b2c
    45e0:	00004c1d 	.word	0x00004c1d

000045e4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    45e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    45e6:	4657      	mov	r7, sl
    45e8:	464e      	mov	r6, r9
    45ea:	46de      	mov	lr, fp
    45ec:	4645      	mov	r5, r8
    45ee:	b5e0      	push	{r5, r6, r7, lr}
    45f0:	b089      	sub	sp, #36	; 0x24
    45f2:	0006      	movs	r6, r0
    45f4:	9103      	str	r1, [sp, #12]
    45f6:	0017      	movs	r7, r2
    45f8:	9204      	str	r2, [sp, #16]
    45fa:	9305      	str	r3, [sp, #20]
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    45fc:	2808      	cmp	r0, #8
    45fe:	d900      	bls.n	4602 <recvfrom+0x1e>
    4600:	e0c1      	b.n	4786 <recvfrom+0x1a2>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    4602:	0144      	lsls	r4, r0, #5
    4604:	3408      	adds	r4, #8
    4606:	0020      	movs	r0, r4
    4608:	4d91      	ldr	r5, [pc, #580]	; (4850 <recvfrom+0x26c>)
    460a:	9401      	str	r4, [sp, #4]
    460c:	47a8      	blx	r5
    460e:	230f      	movs	r3, #15
    4610:	4003      	ands	r3, r0
    4612:	3b02      	subs	r3, #2
    4614:	9002      	str	r0, [sp, #8]
    4616:	2b02      	cmp	r3, #2
    4618:	d900      	bls.n	461c <recvfrom+0x38>
    461a:	e110      	b.n	483e <recvfrom+0x25a>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    461c:	2f00      	cmp	r7, #0
    461e:	d100      	bne.n	4622 <recvfrom+0x3e>
    4620:	e111      	b.n	4846 <recvfrom+0x262>
   if(sock_remained_size[sn] == 0)
    4622:	4a8c      	ldr	r2, [pc, #560]	; (4854 <recvfrom+0x270>)
    4624:	0073      	lsls	r3, r6, #1
    4626:	9300      	str	r3, [sp, #0]
    4628:	5ad3      	ldrh	r3, [r2, r3]
    462a:	2b00      	cmp	r3, #0
    462c:	d152      	bne.n	46d4 <recvfrom+0xf0>
    462e:	23c0      	movs	r3, #192	; 0xc0
    4630:	009b      	lsls	r3, r3, #2
    4632:	469c      	mov	ip, r3
    4634:	2301      	movs	r3, #1
    4636:	40b3      	lsls	r3, r6
    4638:	4698      	mov	r8, r3
    463a:	4b87      	ldr	r3, [pc, #540]	; (4858 <recvfrom+0x274>)
    463c:	4464      	add	r4, ip
    463e:	4699      	mov	r9, r3
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    4640:	4b86      	ldr	r3, [pc, #536]	; (485c <recvfrom+0x278>)
    4642:	0027      	movs	r7, r4
    4644:	469b      	mov	fp, r3
         pack_len = getSn_RX_RSR(sn);
    4646:	0030      	movs	r0, r6
    4648:	47c8      	blx	r9
    464a:	0004      	movs	r4, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    464c:	0038      	movs	r0, r7
    464e:	47a8      	blx	r5
    4650:	2800      	cmp	r0, #0
    4652:	d100      	bne.n	4656 <recvfrom+0x72>
    4654:	e093      	b.n	477e <recvfrom+0x19a>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    4656:	465b      	mov	r3, fp
    4658:	4642      	mov	r2, r8
    465a:	881b      	ldrh	r3, [r3, #0]
    465c:	421a      	tst	r2, r3
    465e:	d100      	bne.n	4662 <recvfrom+0x7e>
    4660:	e088      	b.n	4774 <recvfrom+0x190>
    4662:	1e27      	subs	r7, r4, #0
    4664:	d100      	bne.n	4668 <recvfrom+0x84>
    4666:	e092      	b.n	478e <recvfrom+0x1aa>
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    4668:	2307      	movs	r3, #7
    466a:	9a02      	ldr	r2, [sp, #8]
    466c:	4013      	ands	r3, r2
    466e:	2b03      	cmp	r3, #3
    4670:	d04a      	beq.n	4708 <recvfrom+0x124>
    4672:	2b04      	cmp	r3, #4
    4674:	d100      	bne.n	4678 <recvfrom+0x94>
    4676:	e0b7      	b.n	47e8 <recvfrom+0x204>
    4678:	46a2      	mov	sl, r4
    467a:	2b02      	cmp	r3, #2
    467c:	d135      	bne.n	46ea <recvfrom+0x106>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
    467e:	4b75      	ldr	r3, [pc, #468]	; (4854 <recvfrom+0x270>)
    4680:	9a00      	ldr	r2, [sp, #0]
    4682:	5a9b      	ldrh	r3, [r3, r2]
    4684:	2b00      	cmp	r3, #0
    4686:	d144      	bne.n	4712 <recvfrom+0x12e>
	      {
   			wiz_recv_data(sn, head, 8);
    4688:	4b75      	ldr	r3, [pc, #468]	; (4860 <recvfrom+0x27c>)
    468a:	af06      	add	r7, sp, #24
    468c:	0039      	movs	r1, r7
    468e:	0030      	movs	r0, r6
    4690:	2208      	movs	r2, #8
    4692:	469a      	mov	sl, r3
    4694:	4798      	blx	r3
   			setSn_CR(sn,Sn_CR_RECV);
    4696:	9c01      	ldr	r4, [sp, #4]
    4698:	4b72      	ldr	r3, [pc, #456]	; (4864 <recvfrom+0x280>)
    469a:	3401      	adds	r4, #1
    469c:	34ff      	adds	r4, #255	; 0xff
    469e:	2140      	movs	r1, #64	; 0x40
    46a0:	0020      	movs	r0, r4
    46a2:	4699      	mov	r9, r3
    46a4:	4798      	blx	r3
   			while(getSn_CR(sn));
    46a6:	0020      	movs	r0, r4
    46a8:	47a8      	blx	r5
    46aa:	2800      	cmp	r0, #0
    46ac:	d1fb      	bne.n	46a6 <recvfrom+0xc2>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
    46ae:	9a05      	ldr	r2, [sp, #20]
    46b0:	783b      	ldrb	r3, [r7, #0]
    46b2:	7013      	strb	r3, [r2, #0]
      			addr[1] = head[1];
    46b4:	787b      	ldrb	r3, [r7, #1]
    46b6:	7053      	strb	r3, [r2, #1]
      			addr[2] = head[2];
    46b8:	78bb      	ldrb	r3, [r7, #2]
    46ba:	7093      	strb	r3, [r2, #2]
      			addr[3] = head[3];
    46bc:	78fb      	ldrb	r3, [r7, #3]
    46be:	70d3      	strb	r3, [r2, #3]
      			*port = head[4];
    46c0:	793a      	ldrb	r2, [r7, #4]
      			*port = (*port << 8) + head[5];
    46c2:	797b      	ldrb	r3, [r7, #5]
    46c4:	0212      	lsls	r2, r2, #8
    46c6:	189b      	adds	r3, r3, r2
    46c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    46ca:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
    46cc:	79ba      	ldrb	r2, [r7, #6]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    46ce:	79fb      	ldrb	r3, [r7, #7]
    46d0:	0212      	lsls	r2, r2, #8
    46d2:	e07e      	b.n	47d2 <recvfrom+0x1ee>
	switch (mr & 0x07)
    46d4:	2207      	movs	r2, #7
    46d6:	4002      	ands	r2, r0
    46d8:	2a03      	cmp	r2, #3
    46da:	d015      	beq.n	4708 <recvfrom+0x124>
    46dc:	2a04      	cmp	r2, #4
    46de:	d018      	beq.n	4712 <recvfrom+0x12e>
    46e0:	2a02      	cmp	r2, #2
    46e2:	d016      	beq.n	4712 <recvfrom+0x12e>
    46e4:	2300      	movs	r3, #0
	uint16_t pack_len=0;
    46e6:	2700      	movs	r7, #0
	switch (mr & 0x07)
    46e8:	469a      	mov	sl, r3
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    46ea:	4b5f      	ldr	r3, [pc, #380]	; (4868 <recvfrom+0x284>)
    46ec:	0039      	movs	r1, r7
    46ee:	0030      	movs	r0, r6
    46f0:	4798      	blx	r3
         sock_remained_size[sn] = pack_len;
    46f2:	4b58      	ldr	r3, [pc, #352]	; (4854 <recvfrom+0x270>)
    46f4:	9a00      	ldr	r2, [sp, #0]
    46f6:	9c01      	ldr	r4, [sp, #4]
    46f8:	529f      	strh	r7, [r3, r2]
    46fa:	4b5a      	ldr	r3, [pc, #360]	; (4864 <recvfrom+0x280>)
    46fc:	3401      	adds	r4, #1
    46fe:	4699      	mov	r9, r3
    4700:	4b5a      	ldr	r3, [pc, #360]	; (486c <recvfrom+0x288>)
    4702:	34ff      	adds	r4, #255	; 0xff
    4704:	4698      	mov	r8, r3
         break;
    4706:	e018      	b.n	473a <recvfrom+0x156>
		   if(sock_remained_size[sn] == 0)
    4708:	4b52      	ldr	r3, [pc, #328]	; (4854 <recvfrom+0x270>)
    470a:	9a00      	ldr	r2, [sp, #0]
    470c:	5a9b      	ldrh	r3, [r3, r2]
    470e:	2b00      	cmp	r3, #0
    4710:	d040      	beq.n	4794 <recvfrom+0x1b0>
    4712:	4a53      	ldr	r2, [pc, #332]	; (4860 <recvfrom+0x27c>)
    4714:	9c01      	ldr	r4, [sp, #4]
    4716:	4692      	mov	sl, r2
    4718:	4a52      	ldr	r2, [pc, #328]	; (4864 <recvfrom+0x280>)
    471a:	3401      	adds	r4, #1
    471c:	4691      	mov	r9, r2
    471e:	4a53      	ldr	r2, [pc, #332]	; (486c <recvfrom+0x288>)
    4720:	34ff      	adds	r4, #255	; 0xff
    4722:	4690      	mov	r8, r2
    4724:	9a04      	ldr	r2, [sp, #16]
    4726:	1c17      	adds	r7, r2, #0
    4728:	429a      	cmp	r2, r3
    472a:	d900      	bls.n	472e <recvfrom+0x14a>
    472c:	1c1f      	adds	r7, r3, #0
    472e:	b2bf      	uxth	r7, r7
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    4730:	003a      	movs	r2, r7
    4732:	9903      	ldr	r1, [sp, #12]
    4734:	0030      	movs	r0, r6
    4736:	47d0      	blx	sl
    4738:	46ba      	mov	sl, r7
   }
	setSn_CR(sn,Sn_CR_RECV);
    473a:	2140      	movs	r1, #64	; 0x40
    473c:	0020      	movs	r0, r4
    473e:	47c8      	blx	r9
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    4740:	0020      	movs	r0, r4
    4742:	47a8      	blx	r5
    4744:	2800      	cmp	r0, #0
    4746:	d1fb      	bne.n	4740 <recvfrom+0x15c>
	sock_remained_size[sn] -= pack_len;
    4748:	4942      	ldr	r1, [pc, #264]	; (4854 <recvfrom+0x270>)
    474a:	9a00      	ldr	r2, [sp, #0]
    474c:	5a8b      	ldrh	r3, [r1, r2]
    474e:	1bdf      	subs	r7, r3, r7
    4750:	b2bf      	uxth	r7, r7
    4752:	528f      	strh	r7, [r1, r2]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    4754:	2f00      	cmp	r7, #0
    4756:	d003      	beq.n	4760 <recvfrom+0x17c>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    4758:	4643      	mov	r3, r8
    475a:	5d98      	ldrb	r0, [r3, r6]
    475c:	2301      	movs	r3, #1
    475e:	4318      	orrs	r0, r3
    4760:	4643      	mov	r3, r8
    4762:	5598      	strb	r0, [r3, r6]
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
}
    4764:	4650      	mov	r0, sl
    4766:	b009      	add	sp, #36	; 0x24
    4768:	bc3c      	pop	{r2, r3, r4, r5}
    476a:	4690      	mov	r8, r2
    476c:	4699      	mov	r9, r3
    476e:	46a2      	mov	sl, r4
    4770:	46ab      	mov	fp, r5
    4772:	bdf0      	pop	{r4, r5, r6, r7, pc}
         if(pack_len != 0) break;
    4774:	2c00      	cmp	r4, #0
    4776:	d100      	bne.n	477a <recvfrom+0x196>
    4778:	e765      	b.n	4646 <recvfrom+0x62>
    477a:	0027      	movs	r7, r4
    477c:	e774      	b.n	4668 <recvfrom+0x84>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    477e:	2304      	movs	r3, #4
    4780:	425b      	negs	r3, r3
    4782:	469a      	mov	sl, r3
    4784:	e7ee      	b.n	4764 <recvfrom+0x180>
   CHECK_SOCKNUM();
    4786:	2301      	movs	r3, #1
    4788:	425b      	negs	r3, r3
    478a:	469a      	mov	sl, r3
    478c:	e7ea      	b.n	4764 <recvfrom+0x180>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    478e:	2300      	movs	r3, #0
    4790:	469a      	mov	sl, r3
    4792:	e7e7      	b.n	4764 <recvfrom+0x180>
   			wiz_recv_data(sn, head, 6);
    4794:	4b32      	ldr	r3, [pc, #200]	; (4860 <recvfrom+0x27c>)
    4796:	af06      	add	r7, sp, #24
    4798:	0039      	movs	r1, r7
    479a:	0030      	movs	r0, r6
    479c:	2206      	movs	r2, #6
    479e:	469a      	mov	sl, r3
    47a0:	4798      	blx	r3
   			setSn_CR(sn,Sn_CR_RECV);
    47a2:	9c01      	ldr	r4, [sp, #4]
    47a4:	4b2f      	ldr	r3, [pc, #188]	; (4864 <recvfrom+0x280>)
    47a6:	3401      	adds	r4, #1
    47a8:	34ff      	adds	r4, #255	; 0xff
    47aa:	2140      	movs	r1, #64	; 0x40
    47ac:	0020      	movs	r0, r4
    47ae:	4699      	mov	r9, r3
    47b0:	4798      	blx	r3
   			while(getSn_CR(sn));
    47b2:	0020      	movs	r0, r4
    47b4:	47a8      	blx	r5
    47b6:	2800      	cmp	r0, #0
    47b8:	d1fb      	bne.n	47b2 <recvfrom+0x1ce>
   			addr[0] = head[0];
    47ba:	9a05      	ldr	r2, [sp, #20]
    47bc:	783b      	ldrb	r3, [r7, #0]
    47be:	7013      	strb	r3, [r2, #0]
   			addr[1] = head[1];
    47c0:	787b      	ldrb	r3, [r7, #1]
    47c2:	7053      	strb	r3, [r2, #1]
   			addr[2] = head[2];
    47c4:	78bb      	ldrb	r3, [r7, #2]
    47c6:	7093      	strb	r3, [r2, #2]
   			addr[3] = head[3];
    47c8:	78fb      	ldrb	r3, [r7, #3]
    47ca:	70d3      	strb	r3, [r2, #3]
   			sock_remained_size[sn] = head[4];
    47cc:	793a      	ldrb	r2, [r7, #4]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    47ce:	797b      	ldrb	r3, [r7, #5]
    47d0:	0212      	lsls	r2, r2, #8
    47d2:	189b      	adds	r3, r3, r2
    47d4:	9900      	ldr	r1, [sp, #0]
    47d6:	4a1f      	ldr	r2, [pc, #124]	; (4854 <recvfrom+0x270>)
    47d8:	b29b      	uxth	r3, r3
    47da:	5253      	strh	r3, [r2, r1]
   			sock_pack_info[sn] = PACK_FIRST;
    47dc:	4a23      	ldr	r2, [pc, #140]	; (486c <recvfrom+0x288>)
    47de:	4690      	mov	r8, r2
    47e0:	2280      	movs	r2, #128	; 0x80
    47e2:	4641      	mov	r1, r8
    47e4:	558a      	strb	r2, [r1, r6]
    47e6:	e79d      	b.n	4724 <recvfrom+0x140>
    47e8:	4b1a      	ldr	r3, [pc, #104]	; (4854 <recvfrom+0x270>)
    47ea:	9a00      	ldr	r2, [sp, #0]
    47ec:	5a9b      	ldrh	r3, [r3, r2]
	      if(sock_remained_size[sn] == 0)
    47ee:	2b00      	cmp	r3, #0
    47f0:	d000      	beq.n	47f4 <recvfrom+0x210>
    47f2:	e78e      	b.n	4712 <recvfrom+0x12e>
   			wiz_recv_data(sn, head, 2);
    47f4:	4b1a      	ldr	r3, [pc, #104]	; (4860 <recvfrom+0x27c>)
    47f6:	af06      	add	r7, sp, #24
    47f8:	0039      	movs	r1, r7
    47fa:	0030      	movs	r0, r6
    47fc:	2202      	movs	r2, #2
    47fe:	469a      	mov	sl, r3
    4800:	4798      	blx	r3
   			setSn_CR(sn,Sn_CR_RECV);
    4802:	9c01      	ldr	r4, [sp, #4]
    4804:	4b17      	ldr	r3, [pc, #92]	; (4864 <recvfrom+0x280>)
    4806:	3401      	adds	r4, #1
    4808:	34ff      	adds	r4, #255	; 0xff
    480a:	2140      	movs	r1, #64	; 0x40
    480c:	0020      	movs	r0, r4
    480e:	4699      	mov	r9, r3
    4810:	4798      	blx	r3
   			while(getSn_CR(sn));
    4812:	0020      	movs	r0, r4
    4814:	47a8      	blx	r5
    4816:	2800      	cmp	r0, #0
    4818:	d1fb      	bne.n	4812 <recvfrom+0x22e>
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    481a:	787b      	ldrb	r3, [r7, #1]
    			sock_remained_size[sn] = head[0];
    481c:	783a      	ldrb	r2, [r7, #0]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    481e:	3b02      	subs	r3, #2
    4820:	0212      	lsls	r2, r2, #8
    4822:	189b      	adds	r3, r3, r2
    4824:	9900      	ldr	r1, [sp, #0]
    4826:	4a0b      	ldr	r2, [pc, #44]	; (4854 <recvfrom+0x270>)
    4828:	b29b      	uxth	r3, r3
    482a:	5253      	strh	r3, [r2, r1]
   			if(sock_remained_size[sn] > 1514) 
    482c:	4a10      	ldr	r2, [pc, #64]	; (4870 <recvfrom+0x28c>)
    482e:	4293      	cmp	r3, r2
    4830:	d9d4      	bls.n	47dc <recvfrom+0x1f8>
   			   close(sn);
    4832:	4b10      	ldr	r3, [pc, #64]	; (4874 <recvfrom+0x290>)
    4834:	0030      	movs	r0, r6
    4836:	4798      	blx	r3
   			   return SOCKFATAL_PACKLEN;
    4838:	4b0f      	ldr	r3, [pc, #60]	; (4878 <recvfrom+0x294>)
    483a:	469a      	mov	sl, r3
    483c:	e792      	b.n	4764 <recvfrom+0x180>
         return SOCKERR_SOCKMODE;
    483e:	2305      	movs	r3, #5
    4840:	425b      	negs	r3, r3
    4842:	469a      	mov	sl, r3
    4844:	e78e      	b.n	4764 <recvfrom+0x180>
   CHECK_SOCKDATA();
    4846:	230e      	movs	r3, #14
    4848:	425b      	negs	r3, r3
    484a:	469a      	mov	sl, r3
    484c:	e78a      	b.n	4764 <recvfrom+0x180>
    484e:	46c0      	nop			; (mov r8, r8)
    4850:	000049bd 	.word	0x000049bd
    4854:	20000b38 	.word	0x20000b38
    4858:	00004bc1 	.word	0x00004bc1
    485c:	20000b2c 	.word	0x20000b2c
    4860:	00004c91 	.word	0x00004c91
    4864:	00004a19 	.word	0x00004a19
    4868:	00004d05 	.word	0x00004d05
    486c:	20000b30 	.word	0x20000b30
    4870:	000005ea 	.word	0x000005ea
    4874:	00003db5 	.word	0x00003db5
    4878:	fffffc17 	.word	0xfffffc17

0000487c <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
    487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    487e:	0004      	movs	r4, r0
    4880:	0015      	movs	r5, r2
   CHECK_SOCKNUM();
    4882:	2808      	cmp	r0, #8
    4884:	d900      	bls.n	4888 <getsockopt+0xc>
    4886:	e07f      	b.n	4988 <getsockopt+0x10c>
   switch(sotype)
    4888:	290c      	cmp	r1, #12
    488a:	d900      	bls.n	488e <getsockopt+0x12>
    488c:	e079      	b.n	4982 <getsockopt+0x106>
    488e:	4b41      	ldr	r3, [pc, #260]	; (4994 <getsockopt+0x118>)
    4890:	0089      	lsls	r1, r1, #2
    4892:	585b      	ldr	r3, [r3, r1]
    4894:	469f      	mov	pc, r3
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
         break;
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
            *(uint16_t*)arg = getSn_RX_RSR(sn);
    4896:	0020      	movs	r0, r4
    4898:	4b3f      	ldr	r3, [pc, #252]	; (4998 <getsockopt+0x11c>)
    489a:	4798      	blx	r3
    489c:	8028      	strh	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    489e:	2001      	movs	r0, #1
}
    48a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         *(uint8_t*) arg = getSn_SR(sn);
    48a2:	23c2      	movs	r3, #194	; 0xc2
    48a4:	0144      	lsls	r4, r0, #5
    48a6:	009b      	lsls	r3, r3, #2
    48a8:	18e0      	adds	r0, r4, r3
    48aa:	4b3c      	ldr	r3, [pc, #240]	; (499c <getsockopt+0x120>)
    48ac:	4798      	blx	r3
    48ae:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    48b0:	2001      	movs	r0, #1
         break;
    48b2:	e7f5      	b.n	48a0 <getsockopt+0x24>
         if(getSn_MR(sn) & Sn_MR_TCP)
    48b4:	0140      	lsls	r0, r0, #5
    48b6:	4b39      	ldr	r3, [pc, #228]	; (499c <getsockopt+0x120>)
    48b8:	3008      	adds	r0, #8
    48ba:	4798      	blx	r3
    48bc:	07c3      	lsls	r3, r0, #31
    48be:	d4ea      	bmi.n	4896 <getsockopt+0x1a>
            *(uint16_t*)arg = sock_remained_size[sn];
    48c0:	4b37      	ldr	r3, [pc, #220]	; (49a0 <getsockopt+0x124>)
    48c2:	0064      	lsls	r4, r4, #1
    48c4:	5ae3      	ldrh	r3, [r4, r3]
   return SOCK_OK;
    48c6:	2001      	movs	r0, #1
            *(uint16_t*)arg = sock_remained_size[sn];
    48c8:	802b      	strh	r3, [r5, #0]
    48ca:	e7e9      	b.n	48a0 <getsockopt+0x24>
         if((getSn_MR(sn) == Sn_MR_TCP))
    48cc:	0140      	lsls	r0, r0, #5
    48ce:	3008      	adds	r0, #8
    48d0:	4b32      	ldr	r3, [pc, #200]	; (499c <getsockopt+0x120>)
    48d2:	4798      	blx	r3
    48d4:	2801      	cmp	r0, #1
    48d6:	d05a      	beq.n	498e <getsockopt+0x112>
         *(uint8_t*)arg = sock_pack_info[sn];
    48d8:	4b32      	ldr	r3, [pc, #200]	; (49a4 <getsockopt+0x128>)
   return SOCK_OK;
    48da:	2001      	movs	r0, #1
         *(uint8_t*)arg = sock_pack_info[sn];
    48dc:	5d1b      	ldrb	r3, [r3, r4]
    48de:	702b      	strb	r3, [r5, #0]
         break;
    48e0:	e7de      	b.n	48a0 <getsockopt+0x24>
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
    48e2:	0144      	lsls	r4, r0, #5
    48e4:	0020      	movs	r0, r4
    48e6:	4b2d      	ldr	r3, [pc, #180]	; (499c <getsockopt+0x120>)
    48e8:	3008      	adds	r0, #8
    48ea:	4798      	blx	r3
    48ec:	230f      	movs	r3, #15
    48ee:	4398      	bics	r0, r3
    48f0:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    48f2:	2001      	movs	r0, #1
         break;
    48f4:	e7d4      	b.n	48a0 <getsockopt+0x24>
         *(uint8_t*) arg = getSn_TTL(sn);
    48f6:	4b2c      	ldr	r3, [pc, #176]	; (49a8 <getsockopt+0x12c>)
    48f8:	0140      	lsls	r0, r0, #5
         *(uint8_t*) arg = getSn_TOS(sn);
    48fa:	469c      	mov	ip, r3
    48fc:	4b27      	ldr	r3, [pc, #156]	; (499c <getsockopt+0x120>)
    48fe:	4460      	add	r0, ip
    4900:	4798      	blx	r3
    4902:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    4904:	2001      	movs	r0, #1
         break;
    4906:	e7cb      	b.n	48a0 <getsockopt+0x24>
         *(uint8_t*) arg = getSn_TOS(sn);
    4908:	0140      	lsls	r0, r0, #5
    490a:	4b28      	ldr	r3, [pc, #160]	; (49ac <getsockopt+0x130>)
    490c:	e7f5      	b.n	48fa <getsockopt+0x7e>
         *(uint16_t*) arg = getSn_MSSR(sn);
    490e:	2390      	movs	r3, #144	; 0x90
    4910:	0144      	lsls	r4, r0, #5
    4912:	015b      	lsls	r3, r3, #5
    4914:	3408      	adds	r4, #8
    4916:	18e0      	adds	r0, r4, r3
    4918:	4f20      	ldr	r7, [pc, #128]	; (499c <getsockopt+0x120>)
    491a:	47b8      	blx	r7
    491c:	2398      	movs	r3, #152	; 0x98
    491e:	0006      	movs	r6, r0
         *(uint16_t*) arg = getSn_DPORT(sn);
    4920:	015b      	lsls	r3, r3, #5
    4922:	18e0      	adds	r0, r4, r3
    4924:	47b8      	blx	r7
    4926:	0236      	lsls	r6, r6, #8
    4928:	1830      	adds	r0, r6, r0
    492a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    492c:	2001      	movs	r0, #1
         break;
    492e:	e7b7      	b.n	48a0 <getsockopt+0x24>
         getSn_DIPR(sn, (uint8_t*)arg);
    4930:	4b1f      	ldr	r3, [pc, #124]	; (49b0 <getsockopt+0x134>)
    4932:	0140      	lsls	r0, r0, #5
    4934:	469c      	mov	ip, r3
    4936:	2204      	movs	r2, #4
    4938:	4460      	add	r0, ip
    493a:	0029      	movs	r1, r5
    493c:	4b1d      	ldr	r3, [pc, #116]	; (49b4 <getsockopt+0x138>)
    493e:	4798      	blx	r3
   return SOCK_OK;
    4940:	2001      	movs	r0, #1
         break;
    4942:	e7ad      	b.n	48a0 <getsockopt+0x24>
         *(uint16_t*) arg = getSn_DPORT(sn);
    4944:	2380      	movs	r3, #128	; 0x80
    4946:	0144      	lsls	r4, r0, #5
    4948:	015b      	lsls	r3, r3, #5
    494a:	3408      	adds	r4, #8
    494c:	18e0      	adds	r0, r4, r3
    494e:	4f13      	ldr	r7, [pc, #76]	; (499c <getsockopt+0x120>)
    4950:	47b8      	blx	r7
    4952:	2388      	movs	r3, #136	; 0x88
    4954:	0006      	movs	r6, r0
    4956:	e7e3      	b.n	4920 <getsockopt+0xa4>
         CHECK_SOCKMODE(Sn_MR_TCP);
    4958:	0144      	lsls	r4, r0, #5
    495a:	3408      	adds	r4, #8
    495c:	0020      	movs	r0, r4
    495e:	4e0f      	ldr	r6, [pc, #60]	; (499c <getsockopt+0x120>)
    4960:	47b0      	blx	r6
    4962:	230f      	movs	r3, #15
    4964:	4018      	ands	r0, r3
    4966:	2801      	cmp	r0, #1
    4968:	d111      	bne.n	498e <getsockopt+0x112>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
    496a:	23bc      	movs	r3, #188	; 0xbc
    496c:	019b      	lsls	r3, r3, #6
    496e:	18e0      	adds	r0, r4, r3
    4970:	47b0      	blx	r6
    4972:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    4974:	2001      	movs	r0, #1
         break;
    4976:	e793      	b.n	48a0 <getsockopt+0x24>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
    4978:	4b0f      	ldr	r3, [pc, #60]	; (49b8 <getsockopt+0x13c>)
    497a:	4798      	blx	r3
    497c:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    497e:	2001      	movs	r0, #1
         break;
    4980:	e78e      	b.n	48a0 <getsockopt+0x24>
         return SOCKERR_SOCKOPT;
    4982:	2002      	movs	r0, #2
    4984:	4240      	negs	r0, r0
    4986:	e78b      	b.n	48a0 <getsockopt+0x24>
   CHECK_SOCKNUM();
    4988:	2001      	movs	r0, #1
    498a:	4240      	negs	r0, r0
    498c:	e788      	b.n	48a0 <getsockopt+0x24>
         CHECK_SOCKMODE(Sn_MR_TCP);
    498e:	2005      	movs	r0, #5
    4990:	4240      	negs	r0, r0
    4992:	e785      	b.n	48a0 <getsockopt+0x24>
    4994:	00018790 	.word	0x00018790
    4998:	00004bc1 	.word	0x00004bc1
    499c:	000049bd 	.word	0x000049bd
    49a0:	20000b38 	.word	0x20000b38
    49a4:	20000b30 	.word	0x20000b30
    49a8:	00001608 	.word	0x00001608
    49ac:	00001508 	.word	0x00001508
    49b0:	00000c08 	.word	0x00000c08
    49b4:	00004a75 	.word	0x00004a75
    49b8:	00004b65 	.word	0x00004b65

000049bc <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    49bc:	b530      	push	{r4, r5, lr}
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    49be:	4c15      	ldr	r4, [pc, #84]	; (4a14 <WIZCHIP_READ+0x58>)
{
    49c0:	b083      	sub	sp, #12
   WIZCHIP_CRITICAL_ENTER();
    49c2:	68e3      	ldr	r3, [r4, #12]
{
    49c4:	0005      	movs	r5, r0
   WIZCHIP_CRITICAL_ENTER();
    49c6:	4798      	blx	r3
   WIZCHIP.CS._select();
    49c8:	6963      	ldr	r3, [r4, #20]
    49ca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    49cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    49ce:	2b00      	cmp	r3, #0
    49d0:	d014      	beq.n	49fc <WIZCHIP_READ+0x40>
    49d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    49d4:	2b00      	cmp	r3, #0
    49d6:	d011      	beq.n	49fc <WIZCHIP_READ+0x40>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    49d8:	a801      	add	r0, sp, #4
    49da:	0c2a      	lsrs	r2, r5, #16
    49dc:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    49de:	0a2a      	lsrs	r2, r5, #8
    49e0:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    49e2:	7085      	strb	r5, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    49e4:	2103      	movs	r1, #3
    49e6:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    49e8:	69e3      	ldr	r3, [r4, #28]
    49ea:	4798      	blx	r3
    49ec:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
    49ee:	69a3      	ldr	r3, [r4, #24]
    49f0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    49f2:	6923      	ldr	r3, [r4, #16]
    49f4:	4798      	blx	r3
   return ret;
}
    49f6:	0028      	movs	r0, r5
    49f8:	b003      	add	sp, #12
    49fa:	bd30      	pop	{r4, r5, pc}
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    49fc:	0c28      	lsrs	r0, r5, #16
    49fe:	6a23      	ldr	r3, [r4, #32]
    4a00:	b2c0      	uxtb	r0, r0
    4a02:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    4a04:	0a28      	lsrs	r0, r5, #8
    4a06:	6a23      	ldr	r3, [r4, #32]
    4a08:	b2c0      	uxtb	r0, r0
    4a0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    4a0c:	b2e8      	uxtb	r0, r5
    4a0e:	6a23      	ldr	r3, [r4, #32]
    4a10:	4798      	blx	r3
    4a12:	e7e9      	b.n	49e8 <WIZCHIP_READ+0x2c>
    4a14:	20000058 	.word	0x20000058

00004a18 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    4a18:	b570      	push	{r4, r5, r6, lr}
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    4a1a:	4c15      	ldr	r4, [pc, #84]	; (4a70 <WIZCHIP_WRITE+0x58>)
{
    4a1c:	b082      	sub	sp, #8
   WIZCHIP_CRITICAL_ENTER();
    4a1e:	68e3      	ldr	r3, [r4, #12]
{
    4a20:	0005      	movs	r5, r0
    4a22:	000e      	movs	r6, r1
   WIZCHIP_CRITICAL_ENTER();
    4a24:	4798      	blx	r3
   WIZCHIP.CS._select();
    4a26:	6963      	ldr	r3, [r4, #20]
    4a28:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    4a2a:	2004      	movs	r0, #4

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    4a2c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    4a2e:	4305      	orrs	r5, r0
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    4a30:	2b00      	cmp	r3, #0
    4a32:	d00e      	beq.n	4a52 <WIZCHIP_WRITE+0x3a>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    4a34:	a801      	add	r0, sp, #4
    4a36:	0c2a      	lsrs	r2, r5, #16
    4a38:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    4a3a:	0a2a      	lsrs	r2, r5, #8
    4a3c:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    4a3e:	7085      	strb	r5, [r0, #2]
		spi_data[3] = wb;
    4a40:	70c6      	strb	r6, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    4a42:	2104      	movs	r1, #4
    4a44:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    4a46:	69a3      	ldr	r3, [r4, #24]
    4a48:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    4a4a:	6923      	ldr	r3, [r4, #16]
    4a4c:	4798      	blx	r3
}
    4a4e:	b002      	add	sp, #8
    4a50:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    4a52:	0c28      	lsrs	r0, r5, #16
    4a54:	6a23      	ldr	r3, [r4, #32]
    4a56:	b2c0      	uxtb	r0, r0
    4a58:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    4a5a:	0a28      	lsrs	r0, r5, #8
    4a5c:	6a23      	ldr	r3, [r4, #32]
    4a5e:	b2c0      	uxtb	r0, r0
    4a60:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    4a62:	b2e8      	uxtb	r0, r5
    4a64:	6a23      	ldr	r3, [r4, #32]
    4a66:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
    4a68:	0030      	movs	r0, r6
    4a6a:	6a23      	ldr	r3, [r4, #32]
    4a6c:	4798      	blx	r3
    4a6e:	e7ea      	b.n	4a46 <WIZCHIP_WRITE+0x2e>
    4a70:	20000058 	.word	0x20000058

00004a74 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    4a74:	b5f0      	push	{r4, r5, r6, r7, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    4a76:	4d1c      	ldr	r5, [pc, #112]	; (4ae8 <WIZCHIP_READ_BUF+0x74>)
{
    4a78:	b083      	sub	sp, #12
   WIZCHIP_CRITICAL_ENTER();
    4a7a:	68eb      	ldr	r3, [r5, #12]
{
    4a7c:	0007      	movs	r7, r0
    4a7e:	000c      	movs	r4, r1
    4a80:	0016      	movs	r6, r2
   WIZCHIP_CRITICAL_ENTER();
    4a82:	4798      	blx	r3
   WIZCHIP.CS._select();
    4a84:	696b      	ldr	r3, [r5, #20]
    4a86:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    4a88:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4a8a:	2b00      	cmp	r3, #0
    4a8c:	d014      	beq.n	4ab8 <WIZCHIP_READ_BUF+0x44>
    4a8e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4a90:	2b00      	cmp	r3, #0
    4a92:	d011      	beq.n	4ab8 <WIZCHIP_READ_BUF+0x44>
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    4a94:	a801      	add	r0, sp, #4
    4a96:	0c3a      	lsrs	r2, r7, #16
    4a98:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    4a9a:	0a3a      	lsrs	r2, r7, #8
    4a9c:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    4a9e:	7087      	strb	r7, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    4aa0:	2103      	movs	r1, #3
    4aa2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    4aa4:	0031      	movs	r1, r6
    4aa6:	0020      	movs	r0, r4
    4aa8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4aaa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    4aac:	69ab      	ldr	r3, [r5, #24]
    4aae:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    4ab0:	692b      	ldr	r3, [r5, #16]
    4ab2:	4798      	blx	r3
}
    4ab4:	b003      	add	sp, #12
    4ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    4ab8:	0c38      	lsrs	r0, r7, #16
    4aba:	b2c0      	uxtb	r0, r0
    4abc:	6a2b      	ldr	r3, [r5, #32]
    4abe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    4ac0:	0a38      	lsrs	r0, r7, #8
    4ac2:	b2c0      	uxtb	r0, r0
    4ac4:	6a2b      	ldr	r3, [r5, #32]
    4ac6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    4ac8:	b2f8      	uxtb	r0, r7
    4aca:	6a2b      	ldr	r3, [r5, #32]
    4acc:	4798      	blx	r3
		for(i = 0; i < len; i++)
    4ace:	2e00      	cmp	r6, #0
    4ad0:	d0ec      	beq.n	4aac <WIZCHIP_READ_BUF+0x38>
    4ad2:	3e01      	subs	r6, #1
    4ad4:	b2b6      	uxth	r6, r6
    4ad6:	3601      	adds	r6, #1
    4ad8:	19a6      	adds	r6, r4, r6
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    4ada:	69eb      	ldr	r3, [r5, #28]
    4adc:	4798      	blx	r3
    4ade:	7020      	strb	r0, [r4, #0]
    4ae0:	3401      	adds	r4, #1
		for(i = 0; i < len; i++)
    4ae2:	42b4      	cmp	r4, r6
    4ae4:	d1f9      	bne.n	4ada <WIZCHIP_READ_BUF+0x66>
    4ae6:	e7e1      	b.n	4aac <WIZCHIP_READ_BUF+0x38>
    4ae8:	20000058 	.word	0x20000058

00004aec <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    4aec:	b5f0      	push	{r4, r5, r6, r7, lr}
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    4aee:	4c1c      	ldr	r4, [pc, #112]	; (4b60 <WIZCHIP_WRITE_BUF+0x74>)
{
    4af0:	b083      	sub	sp, #12
   WIZCHIP_CRITICAL_ENTER();
    4af2:	68e3      	ldr	r3, [r4, #12]
{
    4af4:	0006      	movs	r6, r0
    4af6:	000d      	movs	r5, r1
    4af8:	0017      	movs	r7, r2
   WIZCHIP_CRITICAL_ENTER();
    4afa:	4798      	blx	r3
   WIZCHIP.CS._select();
    4afc:	6963      	ldr	r3, [r4, #20]
    4afe:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    4b00:	2004      	movs	r0, #4

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    4b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    4b04:	4306      	orrs	r6, r0
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    4b06:	2b00      	cmp	r3, #0
    4b08:	d011      	beq.n	4b2e <WIZCHIP_WRITE_BUF+0x42>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    4b0a:	a801      	add	r0, sp, #4
    4b0c:	0c32      	lsrs	r2, r6, #16
    4b0e:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    4b10:	0a32      	lsrs	r2, r6, #8
    4b12:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    4b14:	7086      	strb	r6, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    4b16:	2103      	movs	r1, #3
    4b18:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    4b1a:	0039      	movs	r1, r7
    4b1c:	0028      	movs	r0, r5
    4b1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b20:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    4b22:	69a3      	ldr	r3, [r4, #24]
    4b24:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    4b26:	6923      	ldr	r3, [r4, #16]
    4b28:	4798      	blx	r3
}
    4b2a:	b003      	add	sp, #12
    4b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    4b2e:	0c30      	lsrs	r0, r6, #16
    4b30:	b2c0      	uxtb	r0, r0
    4b32:	6a23      	ldr	r3, [r4, #32]
    4b34:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    4b36:	0a30      	lsrs	r0, r6, #8
    4b38:	b2c0      	uxtb	r0, r0
    4b3a:	6a23      	ldr	r3, [r4, #32]
    4b3c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    4b3e:	b2f0      	uxtb	r0, r6
    4b40:	6a23      	ldr	r3, [r4, #32]
    4b42:	4798      	blx	r3
		for(i = 0; i < len; i++)
    4b44:	2f00      	cmp	r7, #0
    4b46:	d0ec      	beq.n	4b22 <WIZCHIP_WRITE_BUF+0x36>
    4b48:	3f01      	subs	r7, #1
    4b4a:	b2be      	uxth	r6, r7
    4b4c:	3601      	adds	r6, #1
    4b4e:	19ae      	adds	r6, r5, r6
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    4b50:	7828      	ldrb	r0, [r5, #0]
    4b52:	6a23      	ldr	r3, [r4, #32]
    4b54:	3501      	adds	r5, #1
    4b56:	4798      	blx	r3
		for(i = 0; i < len; i++)
    4b58:	42b5      	cmp	r5, r6
    4b5a:	d1f9      	bne.n	4b50 <WIZCHIP_WRITE_BUF+0x64>
    4b5c:	e7e1      	b.n	4b22 <WIZCHIP_WRITE_BUF+0x36>
    4b5e:	46c0      	nop			; (mov r8, r8)
    4b60:	20000058 	.word	0x20000058

00004b64 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    4b64:	2380      	movs	r3, #128	; 0x80
    4b66:	019b      	lsls	r3, r3, #6
    4b68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b6a:	0140      	lsls	r0, r0, #5
    4b6c:	46c6      	mov	lr, r8
    4b6e:	4698      	mov	r8, r3
    4b70:	3301      	adds	r3, #1
    4b72:	3008      	adds	r0, #8
    4b74:	33ff      	adds	r3, #255	; 0xff
    4b76:	0007      	movs	r7, r0
    4b78:	469c      	mov	ip, r3
    4b7a:	b500      	push	{lr}
    4b7c:	4480      	add	r8, r0
    4b7e:	4467      	add	r7, ip
   uint16_t val=0,val1=0;
    4b80:	2500      	movs	r5, #0
    4b82:	4e0e      	ldr	r6, [pc, #56]	; (4bbc <getSn_TX_FSR+0x58>)
    4b84:	e001      	b.n	4b8a <getSn_TX_FSR+0x26>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
    4b86:	42a5      	cmp	r5, r4
    4b88:	d013      	beq.n	4bb2 <getSn_TX_FSR+0x4e>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    4b8a:	4640      	mov	r0, r8
    4b8c:	47b0      	blx	r6
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    4b8e:	0200      	lsls	r0, r0, #8
    4b90:	b284      	uxth	r4, r0
    4b92:	0038      	movs	r0, r7
    4b94:	47b0      	blx	r6
    4b96:	1824      	adds	r4, r4, r0
    4b98:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    4b9a:	2c00      	cmp	r4, #0
    4b9c:	d0f3      	beq.n	4b86 <getSn_TX_FSR+0x22>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    4b9e:	4640      	mov	r0, r8
    4ba0:	47b0      	blx	r6
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    4ba2:	0200      	lsls	r0, r0, #8
    4ba4:	b285      	uxth	r5, r0
    4ba6:	0038      	movs	r0, r7
    4ba8:	47b0      	blx	r6
    4baa:	182d      	adds	r5, r5, r0
    4bac:	b2ad      	uxth	r5, r5
   }while (val != val1);
    4bae:	42a5      	cmp	r5, r4
    4bb0:	d1eb      	bne.n	4b8a <getSn_TX_FSR+0x26>
   return val;
}
    4bb2:	0028      	movs	r0, r5
    4bb4:	bc04      	pop	{r2}
    4bb6:	4690      	mov	r8, r2
    4bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bba:	46c0      	nop			; (mov r8, r8)
    4bbc:	000049bd 	.word	0x000049bd

00004bc0 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    4bc0:	2398      	movs	r3, #152	; 0x98
    4bc2:	019b      	lsls	r3, r3, #6
    4bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4bc6:	0140      	lsls	r0, r0, #5
    4bc8:	46c6      	mov	lr, r8
    4bca:	4698      	mov	r8, r3
    4bcc:	3301      	adds	r3, #1
    4bce:	3008      	adds	r0, #8
    4bd0:	33ff      	adds	r3, #255	; 0xff
    4bd2:	0007      	movs	r7, r0
    4bd4:	469c      	mov	ip, r3
    4bd6:	b500      	push	{lr}
    4bd8:	4480      	add	r8, r0
    4bda:	4467      	add	r7, ip
   uint16_t val=0,val1=0;
    4bdc:	2500      	movs	r5, #0
    4bde:	4e0e      	ldr	r6, [pc, #56]	; (4c18 <getSn_RX_RSR+0x58>)
    4be0:	e001      	b.n	4be6 <getSn_RX_RSR+0x26>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
    4be2:	42a5      	cmp	r5, r4
    4be4:	d013      	beq.n	4c0e <getSn_RX_RSR+0x4e>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    4be6:	4640      	mov	r0, r8
    4be8:	47b0      	blx	r6
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    4bea:	0200      	lsls	r0, r0, #8
    4bec:	b284      	uxth	r4, r0
    4bee:	0038      	movs	r0, r7
    4bf0:	47b0      	blx	r6
    4bf2:	1824      	adds	r4, r4, r0
    4bf4:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    4bf6:	2c00      	cmp	r4, #0
    4bf8:	d0f3      	beq.n	4be2 <getSn_RX_RSR+0x22>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    4bfa:	4640      	mov	r0, r8
    4bfc:	47b0      	blx	r6
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    4bfe:	0200      	lsls	r0, r0, #8
    4c00:	b285      	uxth	r5, r0
    4c02:	0038      	movs	r0, r7
    4c04:	47b0      	blx	r6
    4c06:	182d      	adds	r5, r5, r0
    4c08:	b2ad      	uxth	r5, r5
   }while (val != val1);
    4c0a:	42a5      	cmp	r5, r4
    4c0c:	d1eb      	bne.n	4be6 <getSn_RX_RSR+0x26>
   return val;
}
    4c0e:	0028      	movs	r0, r5
    4c10:	bc04      	pop	{r2}
    4c12:	4690      	mov	r8, r2
    4c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	000049bd 	.word	0x000049bd

00004c1c <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    4c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c1e:	464f      	mov	r7, r9
    4c20:	46d6      	mov	lr, sl
    4c22:	4646      	mov	r6, r8
    4c24:	4689      	mov	r9, r1
    4c26:	b5c0      	push	{r6, r7, lr}
    4c28:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    4c2a:	d026      	beq.n	4c7a <wiz_send_data+0x5e>
   ptr = getSn_TX_WR(sn);
    4c2c:	2390      	movs	r3, #144	; 0x90
    4c2e:	0085      	lsls	r5, r0, #2
    4c30:	1c6e      	adds	r6, r5, #1
    4c32:	00f6      	lsls	r6, r6, #3
    4c34:	019b      	lsls	r3, r3, #6
    4c36:	18f7      	adds	r7, r6, r3
    4c38:	4b12      	ldr	r3, [pc, #72]	; (4c84 <wiz_send_data+0x68>)
    4c3a:	0038      	movs	r0, r7
    4c3c:	469a      	mov	sl, r3
    4c3e:	4798      	blx	r3
    4c40:	2394      	movs	r3, #148	; 0x94
    4c42:	019b      	lsls	r3, r3, #6
    4c44:	469c      	mov	ip, r3
    4c46:	4680      	mov	r8, r0
    4c48:	4466      	add	r6, ip
    4c4a:	0030      	movs	r0, r6
    4c4c:	47d0      	blx	sl
    4c4e:	4643      	mov	r3, r8
    4c50:	021b      	lsls	r3, r3, #8
    4c52:	1818      	adds	r0, r3, r0
    4c54:	b283      	uxth	r3, r0
    4c56:	4698      	mov	r8, r3
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    4c58:	1ca8      	adds	r0, r5, #2
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    4c5a:	0022      	movs	r2, r4
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    4c5c:	021d      	lsls	r5, r3, #8
    4c5e:	00c0      	lsls	r0, r0, #3
   
   ptr += len;
    4c60:	4444      	add	r4, r8
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    4c62:	1940      	adds	r0, r0, r5
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    4c64:	4649      	mov	r1, r9
    4c66:	4b08      	ldr	r3, [pc, #32]	; (4c88 <wiz_send_data+0x6c>)
   ptr += len;
    4c68:	b2a4      	uxth	r4, r4
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    4c6a:	4798      	blx	r3
   setSn_TX_WR(sn,ptr);
    4c6c:	0a21      	lsrs	r1, r4, #8
    4c6e:	0038      	movs	r0, r7
    4c70:	4d06      	ldr	r5, [pc, #24]	; (4c8c <wiz_send_data+0x70>)
    4c72:	47a8      	blx	r5
    4c74:	b2e1      	uxtb	r1, r4
    4c76:	0030      	movs	r0, r6
    4c78:	47a8      	blx	r5
}
    4c7a:	bc1c      	pop	{r2, r3, r4}
    4c7c:	4690      	mov	r8, r2
    4c7e:	4699      	mov	r9, r3
    4c80:	46a2      	mov	sl, r4
    4c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c84:	000049bd 	.word	0x000049bd
    4c88:	00004aed 	.word	0x00004aed
    4c8c:	00004a19 	.word	0x00004a19

00004c90 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    4c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c92:	464f      	mov	r7, r9
    4c94:	46d6      	mov	lr, sl
    4c96:	4646      	mov	r6, r8
    4c98:	4689      	mov	r9, r1
    4c9a:	b5c0      	push	{r6, r7, lr}
    4c9c:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    4c9e:	d026      	beq.n	4cee <wiz_recv_data+0x5e>
   ptr = getSn_RX_RD(sn);
    4ca0:	23a0      	movs	r3, #160	; 0xa0
    4ca2:	0085      	lsls	r5, r0, #2
    4ca4:	1c6e      	adds	r6, r5, #1
    4ca6:	00f6      	lsls	r6, r6, #3
    4ca8:	019b      	lsls	r3, r3, #6
    4caa:	18f7      	adds	r7, r6, r3
    4cac:	4b12      	ldr	r3, [pc, #72]	; (4cf8 <wiz_recv_data+0x68>)
    4cae:	0038      	movs	r0, r7
    4cb0:	469a      	mov	sl, r3
    4cb2:	4798      	blx	r3
    4cb4:	23a4      	movs	r3, #164	; 0xa4
    4cb6:	019b      	lsls	r3, r3, #6
    4cb8:	469c      	mov	ip, r3
    4cba:	4680      	mov	r8, r0
    4cbc:	4466      	add	r6, ip
    4cbe:	0030      	movs	r0, r6
    4cc0:	47d0      	blx	sl
    4cc2:	4643      	mov	r3, r8
    4cc4:	021b      	lsls	r3, r3, #8
    4cc6:	1818      	adds	r0, r3, r0
    4cc8:	b283      	uxth	r3, r0
    4cca:	4698      	mov	r8, r3
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    4ccc:	1ce8      	adds	r0, r5, #3
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    4cce:	0022      	movs	r2, r4
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    4cd0:	021d      	lsls	r5, r3, #8
    4cd2:	00c0      	lsls	r0, r0, #3
   ptr += len;
    4cd4:	4444      	add	r4, r8
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    4cd6:	1940      	adds	r0, r0, r5
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    4cd8:	4649      	mov	r1, r9
    4cda:	4b08      	ldr	r3, [pc, #32]	; (4cfc <wiz_recv_data+0x6c>)
   ptr += len;
    4cdc:	b2a4      	uxth	r4, r4
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    4cde:	4798      	blx	r3
   
   setSn_RX_RD(sn,ptr);
    4ce0:	0a21      	lsrs	r1, r4, #8
    4ce2:	0038      	movs	r0, r7
    4ce4:	4d06      	ldr	r5, [pc, #24]	; (4d00 <wiz_recv_data+0x70>)
    4ce6:	47a8      	blx	r5
    4ce8:	b2e1      	uxtb	r1, r4
    4cea:	0030      	movs	r0, r6
    4cec:	47a8      	blx	r5
}
    4cee:	bc1c      	pop	{r2, r3, r4}
    4cf0:	4690      	mov	r8, r2
    4cf2:	4699      	mov	r9, r3
    4cf4:	46a2      	mov	sl, r4
    4cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4cf8:	000049bd 	.word	0x000049bd
    4cfc:	00004a75 	.word	0x00004a75
    4d00:	00004a19 	.word	0x00004a19

00004d04 <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    4d04:	23a0      	movs	r3, #160	; 0xa0
{
    4d06:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d08:	46c6      	mov	lr, r8
   ptr = getSn_RX_RD(sn);
    4d0a:	0140      	lsls	r0, r0, #5
    4d0c:	3008      	adds	r0, #8
    4d0e:	019b      	lsls	r3, r3, #6
    4d10:	18c7      	adds	r7, r0, r3
    4d12:	4b0e      	ldr	r3, [pc, #56]	; (4d4c <wiz_recv_ignore+0x48>)
{
    4d14:	b500      	push	{lr}
   ptr = getSn_RX_RD(sn);
    4d16:	0006      	movs	r6, r0
    4d18:	0038      	movs	r0, r7
    4d1a:	4698      	mov	r8, r3
{
    4d1c:	000c      	movs	r4, r1
   ptr = getSn_RX_RD(sn);
    4d1e:	4798      	blx	r3
    4d20:	23a4      	movs	r3, #164	; 0xa4
    4d22:	019b      	lsls	r3, r3, #6
    4d24:	469c      	mov	ip, r3
    4d26:	4466      	add	r6, ip
    4d28:	0005      	movs	r5, r0
    4d2a:	0030      	movs	r0, r6
    4d2c:	47c0      	blx	r8
    4d2e:	022d      	lsls	r5, r5, #8
   ptr += len;
    4d30:	1824      	adds	r4, r4, r0
    4d32:	192c      	adds	r4, r5, r4
    4d34:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
    4d36:	0038      	movs	r0, r7
    4d38:	4d05      	ldr	r5, [pc, #20]	; (4d50 <wiz_recv_ignore+0x4c>)
    4d3a:	0a21      	lsrs	r1, r4, #8
    4d3c:	47a8      	blx	r5
    4d3e:	0030      	movs	r0, r6
    4d40:	b2e1      	uxtb	r1, r4
    4d42:	47a8      	blx	r5
}
    4d44:	bc04      	pop	{r2}
    4d46:	4690      	mov	r8, r2
    4d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d4a:	46c0      	nop			; (mov r8, r8)
    4d4c:	000049bd 	.word	0x000049bd
    4d50:	00004a19 	.word	0x00004a19

00004d54 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
    4d54:	4770      	bx	lr
    4d56:	46c0      	nop			; (mov r8, r8)

00004d58 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
    4d58:	7800      	ldrb	r0, [r0, #0]
    4d5a:	b2c0      	uxtb	r0, r0
    4d5c:	4770      	bx	lr
    4d5e:	46c0      	nop			; (mov r8, r8)

00004d60 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
    4d60:	7001      	strb	r1, [r0, #0]
    4d62:	4770      	bx	lr

00004d64 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
    4d64:	2000      	movs	r0, #0
    4d66:	4770      	bx	lr

00004d68 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
    4d68:	4770      	bx	lr
    4d6a:	46c0      	nop			; (mov r8, r8)

00004d6c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
    4d6c:	4770      	bx	lr
    4d6e:	46c0      	nop			; (mov r8, r8)

00004d70 <wizchip_spi_readburst>:
    4d70:	4770      	bx	lr
    4d72:	46c0      	nop			; (mov r8, r8)

00004d74 <wizchip_cris_enter>:
    4d74:	4770      	bx	lr
    4d76:	46c0      	nop			; (mov r8, r8)

00004d78 <wizchip_cris_exit>:
    4d78:	4770      	bx	lr
    4d7a:	46c0      	nop			; (mov r8, r8)

00004d7c <wizchip_cs_select>:
    4d7c:	4770      	bx	lr
    4d7e:	46c0      	nop			; (mov r8, r8)

00004d80 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
    4d80:	2800      	cmp	r0, #0
    4d82:	d005      	beq.n	4d90 <reg_wizchip_cs_cbfunc+0x10>
    4d84:	2900      	cmp	r1, #0
    4d86:	d003      	beq.n	4d90 <reg_wizchip_cs_cbfunc+0x10>
    4d88:	4b03      	ldr	r3, [pc, #12]	; (4d98 <reg_wizchip_cs_cbfunc+0x18>)
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
   }
}
    4d8a:	6199      	str	r1, [r3, #24]
    4d8c:	6158      	str	r0, [r3, #20]
    4d8e:	4770      	bx	lr
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
    4d90:	4902      	ldr	r1, [pc, #8]	; (4d9c <reg_wizchip_cs_cbfunc+0x1c>)
      WIZCHIP.CS._select   = wizchip_cs_select;
    4d92:	4803      	ldr	r0, [pc, #12]	; (4da0 <reg_wizchip_cs_cbfunc+0x20>)
    4d94:	e7f8      	b.n	4d88 <reg_wizchip_cs_cbfunc+0x8>
    4d96:	46c0      	nop			; (mov r8, r8)
    4d98:	20000058 	.word	0x20000058
    4d9c:	00004d55 	.word	0x00004d55
    4da0:	00004d7d 	.word	0x00004d7d

00004da4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
    4da4:	4b07      	ldr	r3, [pc, #28]	; (4dc4 <reg_wizchip_spi_cbfunc+0x20>)
    4da6:	881a      	ldrh	r2, [r3, #0]
    4da8:	0592      	lsls	r2, r2, #22
    4daa:	d400      	bmi.n	4dae <reg_wizchip_spi_cbfunc+0xa>
    4dac:	e7fe      	b.n	4dac <reg_wizchip_spi_cbfunc+0x8>
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
   
   if(!spi_rb || !spi_wb)
    4dae:	2800      	cmp	r0, #0
    4db0:	d004      	beq.n	4dbc <reg_wizchip_spi_cbfunc+0x18>
    4db2:	2900      	cmp	r1, #0
    4db4:	d002      	beq.n	4dbc <reg_wizchip_spi_cbfunc+0x18>
    4db6:	6219      	str	r1, [r3, #32]
    4db8:	61d8      	str	r0, [r3, #28]
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
   }
}
    4dba:	4770      	bx	lr
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
    4dbc:	4902      	ldr	r1, [pc, #8]	; (4dc8 <reg_wizchip_spi_cbfunc+0x24>)
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
    4dbe:	4803      	ldr	r0, [pc, #12]	; (4dcc <reg_wizchip_spi_cbfunc+0x28>)
    4dc0:	e7f9      	b.n	4db6 <reg_wizchip_spi_cbfunc+0x12>
    4dc2:	46c0      	nop			; (mov r8, r8)
    4dc4:	20000058 	.word	0x20000058
    4dc8:	00004d69 	.word	0x00004d69
    4dcc:	00004d65 	.word	0x00004d65

00004dd0 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
    4dd0:	4b07      	ldr	r3, [pc, #28]	; (4df0 <reg_wizchip_spiburst_cbfunc+0x20>)
    4dd2:	881a      	ldrh	r2, [r3, #0]
    4dd4:	0592      	lsls	r2, r2, #22
    4dd6:	d400      	bmi.n	4dda <reg_wizchip_spiburst_cbfunc+0xa>
    4dd8:	e7fe      	b.n	4dd8 <reg_wizchip_spiburst_cbfunc+0x8>
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));

   if(!spi_rb || !spi_wb)
    4dda:	2800      	cmp	r0, #0
    4ddc:	d004      	beq.n	4de8 <reg_wizchip_spiburst_cbfunc+0x18>
    4dde:	2900      	cmp	r1, #0
    4de0:	d002      	beq.n	4de8 <reg_wizchip_spiburst_cbfunc+0x18>
    4de2:	6299      	str	r1, [r3, #40]	; 0x28
    4de4:	6258      	str	r0, [r3, #36]	; 0x24
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}
    4de6:	4770      	bx	lr
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
    4de8:	4902      	ldr	r1, [pc, #8]	; (4df4 <reg_wizchip_spiburst_cbfunc+0x24>)
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
    4dea:	4803      	ldr	r0, [pc, #12]	; (4df8 <reg_wizchip_spiburst_cbfunc+0x28>)
    4dec:	e7f9      	b.n	4de2 <reg_wizchip_spiburst_cbfunc+0x12>
    4dee:	46c0      	nop			; (mov r8, r8)
    4df0:	20000058 	.word	0x20000058
    4df4:	00004d6d 	.word	0x00004d6d
    4df8:	00004d71 	.word	0x00004d71

00004dfc <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
    4dfc:	b570      	push	{r4, r5, r6, lr}
    4dfe:	000c      	movs	r4, r1
   
   switch(cntype)
    4e00:	2805      	cmp	r0, #5
    4e02:	d900      	bls.n	4e06 <ctlnetwork+0xa>
    4e04:	e081      	b.n	4f0a <ctlnetwork+0x10e>
    4e06:	4b42      	ldr	r3, [pc, #264]	; (4f10 <ctlnetwork+0x114>)
    4e08:	0080      	lsls	r0, r0, #2
    4e0a:	581b      	ldr	r3, [r3, r0]
    4e0c:	469f      	mov	pc, r3
   return (netmode_type) getMR();
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
   setRCR(nettime->retry_cnt);
    4e0e:	20d8      	movs	r0, #216	; 0xd8
    4e10:	4d40      	ldr	r5, [pc, #256]	; (4f14 <ctlnetwork+0x118>)
    4e12:	7809      	ldrb	r1, [r1, #0]
    4e14:	0140      	lsls	r0, r0, #5
    4e16:	47a8      	blx	r5
   setRTR(nettime->time_100us);
    4e18:	20c8      	movs	r0, #200	; 0xc8
    4e1a:	8861      	ldrh	r1, [r4, #2]
    4e1c:	0140      	lsls	r0, r0, #5
    4e1e:	0a09      	lsrs	r1, r1, #8
    4e20:	47a8      	blx	r5
    4e22:	20d0      	movs	r0, #208	; 0xd0
    4e24:	78a1      	ldrb	r1, [r4, #2]
    4e26:	0140      	lsls	r0, r0, #5
    4e28:	47a8      	blx	r5
   return 0;
    4e2a:	2000      	movs	r0, #0
}
    4e2c:	bd70      	pop	{r4, r5, r6, pc}
}

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
   nettime->retry_cnt = getRCR();
    4e2e:	20d8      	movs	r0, #216	; 0xd8
    4e30:	4e39      	ldr	r6, [pc, #228]	; (4f18 <ctlnetwork+0x11c>)
    4e32:	0140      	lsls	r0, r0, #5
    4e34:	47b0      	blx	r6
    4e36:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
    4e38:	20c8      	movs	r0, #200	; 0xc8
    4e3a:	0140      	lsls	r0, r0, #5
    4e3c:	47b0      	blx	r6
    4e3e:	0005      	movs	r5, r0
    4e40:	20d0      	movs	r0, #208	; 0xd0
    4e42:	0140      	lsls	r0, r0, #5
    4e44:	47b0      	blx	r6
    4e46:	022d      	lsls	r5, r5, #8
    4e48:	1828      	adds	r0, r5, r0
    4e4a:	8060      	strh	r0, [r4, #2]
   return 0;
    4e4c:	2000      	movs	r0, #0
    4e4e:	e7ed      	b.n	4e2c <ctlnetwork+0x30>
   setSHAR(pnetinfo->mac);
    4e50:	2090      	movs	r0, #144	; 0x90
    4e52:	4d32      	ldr	r5, [pc, #200]	; (4f1c <ctlnetwork+0x120>)
    4e54:	2206      	movs	r2, #6
    4e56:	0100      	lsls	r0, r0, #4
    4e58:	47a8      	blx	r5
   setGAR(pnetinfo->gw);
    4e5a:	0021      	movs	r1, r4
    4e5c:	2080      	movs	r0, #128	; 0x80
    4e5e:	310e      	adds	r1, #14
    4e60:	2204      	movs	r2, #4
    4e62:	0040      	lsls	r0, r0, #1
    4e64:	47a8      	blx	r5
   setSUBR(pnetinfo->sn);
    4e66:	0021      	movs	r1, r4
    4e68:	20a0      	movs	r0, #160	; 0xa0
    4e6a:	310a      	adds	r1, #10
    4e6c:	2204      	movs	r2, #4
    4e6e:	00c0      	lsls	r0, r0, #3
    4e70:	47a8      	blx	r5
   setSIPR(pnetinfo->ip);
    4e72:	20f0      	movs	r0, #240	; 0xf0
    4e74:	2204      	movs	r2, #4
    4e76:	0100      	lsls	r0, r0, #4
    4e78:	1da1      	adds	r1, r4, #6
    4e7a:	47a8      	blx	r5
   _DNS_[0] = pnetinfo->dns[0];
    4e7c:	7ca2      	ldrb	r2, [r4, #18]
    4e7e:	4b28      	ldr	r3, [pc, #160]	; (4f20 <ctlnetwork+0x124>)
   return 0;
    4e80:	2000      	movs	r0, #0
   _DNS_[0] = pnetinfo->dns[0];
    4e82:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
    4e84:	7ce2      	ldrb	r2, [r4, #19]
    4e86:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
    4e88:	7d22      	ldrb	r2, [r4, #20]
    4e8a:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
    4e8c:	7d62      	ldrb	r2, [r4, #21]
    4e8e:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
    4e90:	7da2      	ldrb	r2, [r4, #22]
    4e92:	4b24      	ldr	r3, [pc, #144]	; (4f24 <ctlnetwork+0x128>)
    4e94:	701a      	strb	r2, [r3, #0]
    4e96:	e7c9      	b.n	4e2c <ctlnetwork+0x30>
   getSHAR(pnetinfo->mac);
    4e98:	2090      	movs	r0, #144	; 0x90
    4e9a:	4d23      	ldr	r5, [pc, #140]	; (4f28 <ctlnetwork+0x12c>)
    4e9c:	2206      	movs	r2, #6
    4e9e:	0100      	lsls	r0, r0, #4
    4ea0:	47a8      	blx	r5
   getGAR(pnetinfo->gw);
    4ea2:	0021      	movs	r1, r4
    4ea4:	2080      	movs	r0, #128	; 0x80
    4ea6:	310e      	adds	r1, #14
    4ea8:	2204      	movs	r2, #4
    4eaa:	0040      	lsls	r0, r0, #1
    4eac:	47a8      	blx	r5
   getSUBR(pnetinfo->sn);
    4eae:	0021      	movs	r1, r4
    4eb0:	20a0      	movs	r0, #160	; 0xa0
    4eb2:	310a      	adds	r1, #10
    4eb4:	2204      	movs	r2, #4
    4eb6:	00c0      	lsls	r0, r0, #3
    4eb8:	47a8      	blx	r5
   getSIPR(pnetinfo->ip);
    4eba:	20f0      	movs	r0, #240	; 0xf0
    4ebc:	2204      	movs	r2, #4
    4ebe:	0100      	lsls	r0, r0, #4
    4ec0:	1da1      	adds	r1, r4, #6
    4ec2:	47a8      	blx	r5
   pnetinfo->dns[0]= _DNS_[0];
    4ec4:	4b16      	ldr	r3, [pc, #88]	; (4f20 <ctlnetwork+0x124>)
   return 0;
    4ec6:	2000      	movs	r0, #0
   pnetinfo->dns[0]= _DNS_[0];
    4ec8:	781a      	ldrb	r2, [r3, #0]
    4eca:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
    4ecc:	785a      	ldrb	r2, [r3, #1]
    4ece:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
    4ed0:	789a      	ldrb	r2, [r3, #2]
    4ed2:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
    4ed4:	78db      	ldrb	r3, [r3, #3]
    4ed6:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
    4ed8:	4b12      	ldr	r3, [pc, #72]	; (4f24 <ctlnetwork+0x128>)
    4eda:	781b      	ldrb	r3, [r3, #0]
    4edc:	75a3      	strb	r3, [r4, #22]
    4ede:	e7a5      	b.n	4e2c <ctlnetwork+0x30>
         return wizchip_setnetmode(*(netmode_type*)arg);
    4ee0:	780c      	ldrb	r4, [r1, #0]
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    4ee2:	233a      	movs	r3, #58	; 0x3a
    4ee4:	0022      	movs	r2, r4
    4ee6:	439a      	bics	r2, r3
    4ee8:	d10f      	bne.n	4f0a <ctlnetwork+0x10e>
   tmp = getMR();
    4eea:	4b0b      	ldr	r3, [pc, #44]	; (4f18 <ctlnetwork+0x11c>)
    4eec:	2000      	movs	r0, #0
    4eee:	4798      	blx	r3
   tmp |= (uint8_t)netmode;
    4ef0:	4304      	orrs	r4, r0
   setMR(tmp);
    4ef2:	b2e1      	uxtb	r1, r4
    4ef4:	2000      	movs	r0, #0
    4ef6:	4b07      	ldr	r3, [pc, #28]	; (4f14 <ctlnetwork+0x118>)
    4ef8:	4798      	blx	r3
   return 0;
    4efa:	2000      	movs	r0, #0
    4efc:	e796      	b.n	4e2c <ctlnetwork+0x30>
   return (netmode_type) getMR();
    4efe:	2000      	movs	r0, #0
    4f00:	4b05      	ldr	r3, [pc, #20]	; (4f18 <ctlnetwork+0x11c>)
    4f02:	4798      	blx	r3
         *(netmode_type*)arg = wizchip_getnetmode();
    4f04:	7020      	strb	r0, [r4, #0]
   return 0;
    4f06:	2000      	movs	r0, #0
         break;
    4f08:	e790      	b.n	4e2c <ctlnetwork+0x30>
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    4f0a:	2001      	movs	r0, #1
    4f0c:	4240      	negs	r0, r0
    4f0e:	e78d      	b.n	4e2c <ctlnetwork+0x30>
    4f10:	000187c4 	.word	0x000187c4
    4f14:	00004a19 	.word	0x00004a19
    4f18:	000049bd 	.word	0x000049bd
    4f1c:	00004aed 	.word	0x00004aed
    4f20:	20000b4c 	.word	0x20000b4c
    4f24:	20000b48 	.word	0x20000b48
    4f28:	00004a75 	.word	0x00004a75

00004f2c <wizchip_init>:
{
    4f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2e:	46c6      	mov	lr, r8
    4f30:	0004      	movs	r4, r0
   getSHAR(mac);
    4f32:	2090      	movs	r0, #144	; 0x90
{
    4f34:	b500      	push	{lr}
    4f36:	b086      	sub	sp, #24
   getSHAR(mac);
    4f38:	4e55      	ldr	r6, [pc, #340]	; (5090 <wizchip_init+0x164>)
    4f3a:	2206      	movs	r2, #6
    4f3c:	0100      	lsls	r0, r0, #4
{
    4f3e:	000d      	movs	r5, r1
   getSHAR(mac);
    4f40:	a904      	add	r1, sp, #16
    4f42:	47b0      	blx	r6
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
    4f44:	2080      	movs	r0, #128	; 0x80
    4f46:	2204      	movs	r2, #4
    4f48:	a901      	add	r1, sp, #4
    4f4a:	0040      	lsls	r0, r0, #1
    4f4c:	47b0      	blx	r6
    4f4e:	20a0      	movs	r0, #160	; 0xa0
    4f50:	2204      	movs	r2, #4
    4f52:	a902      	add	r1, sp, #8
    4f54:	00c0      	lsls	r0, r0, #3
    4f56:	47b0      	blx	r6
    4f58:	20f0      	movs	r0, #240	; 0xf0
    4f5a:	2204      	movs	r2, #4
    4f5c:	a903      	add	r1, sp, #12
    4f5e:	0100      	lsls	r0, r0, #4
    4f60:	47b0      	blx	r6
   setMR(MR_RST);
    4f62:	2180      	movs	r1, #128	; 0x80
    4f64:	2000      	movs	r0, #0
    4f66:	4e4b      	ldr	r6, [pc, #300]	; (5094 <wizchip_init+0x168>)
    4f68:	47b0      	blx	r6
   getMR(); // for delay
    4f6a:	4b4b      	ldr	r3, [pc, #300]	; (5098 <wizchip_init+0x16c>)
    4f6c:	2000      	movs	r0, #0
    4f6e:	4798      	blx	r3
   setSHAR(mac);
    4f70:	2090      	movs	r0, #144	; 0x90
    4f72:	4f4a      	ldr	r7, [pc, #296]	; (509c <wizchip_init+0x170>)
    4f74:	2206      	movs	r2, #6
    4f76:	a904      	add	r1, sp, #16
    4f78:	0100      	lsls	r0, r0, #4
    4f7a:	47b8      	blx	r7
   setGAR(gw);
    4f7c:	2080      	movs	r0, #128	; 0x80
    4f7e:	2204      	movs	r2, #4
    4f80:	a901      	add	r1, sp, #4
    4f82:	0040      	lsls	r0, r0, #1
    4f84:	47b8      	blx	r7
   setSUBR(sn);
    4f86:	20a0      	movs	r0, #160	; 0xa0
    4f88:	2204      	movs	r2, #4
    4f8a:	a902      	add	r1, sp, #8
    4f8c:	00c0      	lsls	r0, r0, #3
    4f8e:	47b8      	blx	r7
   setSIPR(sip);
    4f90:	20f0      	movs	r0, #240	; 0xf0
    4f92:	2204      	movs	r2, #4
    4f94:	a903      	add	r1, sp, #12
    4f96:	0100      	lsls	r0, r0, #4
    4f98:	47b8      	blx	r7
   if(txsize)
    4f9a:	2c00      	cmp	r4, #0
    4f9c:	d037      	beq.n	500e <wizchip_init+0xe2>
			tmp += txsize[i];
    4f9e:	7823      	ldrb	r3, [r4, #0]
			if(tmp > 16) return -1;
    4fa0:	b25a      	sxtb	r2, r3
    4fa2:	2a10      	cmp	r2, #16
    4fa4:	dd00      	ble.n	4fa8 <wizchip_init+0x7c>
    4fa6:	e06f      	b.n	5088 <wizchip_init+0x15c>
			tmp += txsize[i];
    4fa8:	7862      	ldrb	r2, [r4, #1]
    4faa:	189b      	adds	r3, r3, r2
    4fac:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    4fae:	b25a      	sxtb	r2, r3
    4fb0:	2a10      	cmp	r2, #16
    4fb2:	dc69      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += txsize[i];
    4fb4:	78a2      	ldrb	r2, [r4, #2]
    4fb6:	189b      	adds	r3, r3, r2
    4fb8:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    4fba:	b25a      	sxtb	r2, r3
    4fbc:	2a10      	cmp	r2, #16
    4fbe:	dc63      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += txsize[i];
    4fc0:	78e2      	ldrb	r2, [r4, #3]
    4fc2:	189b      	adds	r3, r3, r2
    4fc4:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    4fc6:	b25a      	sxtb	r2, r3
    4fc8:	2a10      	cmp	r2, #16
    4fca:	dc5d      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += txsize[i];
    4fcc:	7922      	ldrb	r2, [r4, #4]
    4fce:	189b      	adds	r3, r3, r2
    4fd0:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    4fd2:	b25a      	sxtb	r2, r3
    4fd4:	2a10      	cmp	r2, #16
    4fd6:	dc57      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += txsize[i];
    4fd8:	7962      	ldrb	r2, [r4, #5]
    4fda:	189b      	adds	r3, r3, r2
    4fdc:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    4fde:	b25a      	sxtb	r2, r3
    4fe0:	2a10      	cmp	r2, #16
    4fe2:	dc51      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += txsize[i];
    4fe4:	79a2      	ldrb	r2, [r4, #6]
    4fe6:	189b      	adds	r3, r3, r2
    4fe8:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    4fea:	b25a      	sxtb	r2, r3
    4fec:	2a10      	cmp	r2, #16
    4fee:	dc4b      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += txsize[i];
    4ff0:	79e2      	ldrb	r2, [r4, #7]
    4ff2:	189b      	adds	r3, r3, r2
			if(tmp > 16) return -1;
    4ff4:	b25b      	sxtb	r3, r3
    4ff6:	2b10      	cmp	r3, #16
    4ff8:	dc46      	bgt.n	5088 <wizchip_init+0x15c>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    4ffa:	4b29      	ldr	r3, [pc, #164]	; (50a0 <wizchip_init+0x174>)
			if(tmp > 16) return -1;
    4ffc:	4f29      	ldr	r7, [pc, #164]	; (50a4 <wizchip_init+0x178>)
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    4ffe:	4698      	mov	r8, r3
			setSn_TXBUF_SIZE(i, txsize[i]);
    5000:	7821      	ldrb	r1, [r4, #0]
    5002:	0038      	movs	r0, r7
    5004:	3720      	adds	r7, #32
    5006:	47b0      	blx	r6
    5008:	3401      	adds	r4, #1
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    500a:	4547      	cmp	r7, r8
    500c:	d1f8      	bne.n	5000 <wizchip_init+0xd4>
   if(rxsize)
    500e:	2d00      	cmp	r5, #0
    5010:	d035      	beq.n	507e <wizchip_init+0x152>
			tmp += rxsize[i];
    5012:	782b      	ldrb	r3, [r5, #0]
			if(tmp > 16) return -1;
    5014:	b25a      	sxtb	r2, r3
    5016:	2a10      	cmp	r2, #16
    5018:	dc36      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += rxsize[i];
    501a:	786a      	ldrb	r2, [r5, #1]
    501c:	189b      	adds	r3, r3, r2
    501e:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    5020:	b25a      	sxtb	r2, r3
    5022:	2a10      	cmp	r2, #16
    5024:	dc30      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += rxsize[i];
    5026:	78aa      	ldrb	r2, [r5, #2]
    5028:	189b      	adds	r3, r3, r2
    502a:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    502c:	b25a      	sxtb	r2, r3
    502e:	2a10      	cmp	r2, #16
    5030:	dc2a      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += rxsize[i];
    5032:	78ea      	ldrb	r2, [r5, #3]
    5034:	189b      	adds	r3, r3, r2
    5036:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    5038:	b25a      	sxtb	r2, r3
    503a:	2a10      	cmp	r2, #16
    503c:	dc24      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += rxsize[i];
    503e:	792a      	ldrb	r2, [r5, #4]
    5040:	189b      	adds	r3, r3, r2
    5042:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    5044:	b25a      	sxtb	r2, r3
    5046:	2a10      	cmp	r2, #16
    5048:	dc1e      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += rxsize[i];
    504a:	796a      	ldrb	r2, [r5, #5]
    504c:	189b      	adds	r3, r3, r2
    504e:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    5050:	b25a      	sxtb	r2, r3
    5052:	2a10      	cmp	r2, #16
    5054:	dc18      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += rxsize[i];
    5056:	79aa      	ldrb	r2, [r5, #6]
    5058:	189b      	adds	r3, r3, r2
    505a:	b2db      	uxtb	r3, r3
			if(tmp > 16) return -1;
    505c:	b25a      	sxtb	r2, r3
    505e:	2a10      	cmp	r2, #16
    5060:	dc12      	bgt.n	5088 <wizchip_init+0x15c>
			tmp += rxsize[i];
    5062:	79ea      	ldrb	r2, [r5, #7]
    5064:	189b      	adds	r3, r3, r2
			if(tmp > 16) return -1;
    5066:	b25b      	sxtb	r3, r3
    5068:	2b10      	cmp	r3, #16
    506a:	dc0d      	bgt.n	5088 <wizchip_init+0x15c>
    506c:	4c0e      	ldr	r4, [pc, #56]	; (50a8 <wizchip_init+0x17c>)
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    506e:	4f0d      	ldr	r7, [pc, #52]	; (50a4 <wizchip_init+0x178>)
			setSn_RXBUF_SIZE(i, rxsize[i]);
    5070:	7829      	ldrb	r1, [r5, #0]
    5072:	0020      	movs	r0, r4
    5074:	3420      	adds	r4, #32
    5076:	47b0      	blx	r6
    5078:	3501      	adds	r5, #1
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    507a:	42bc      	cmp	r4, r7
    507c:	d1f8      	bne.n	5070 <wizchip_init+0x144>
   return 0;
    507e:	2000      	movs	r0, #0
}
    5080:	b006      	add	sp, #24
    5082:	bc04      	pop	{r2}
    5084:	4690      	mov	r8, r2
    5086:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(tmp > 16) return -1;
    5088:	2001      	movs	r0, #1
    508a:	4240      	negs	r0, r0
    508c:	e7f8      	b.n	5080 <wizchip_init+0x154>
    508e:	46c0      	nop			; (mov r8, r8)
    5090:	00004a75 	.word	0x00004a75
    5094:	00004a19 	.word	0x00004a19
    5098:	000049bd 	.word	0x000049bd
    509c:	00004aed 	.word	0x00004aed
    50a0:	00002008 	.word	0x00002008
    50a4:	00001f08 	.word	0x00001f08
    50a8:	00001e08 	.word	0x00001e08

000050ac <wizphy_reset>:
{
    50ac:	b570      	push	{r4, r5, r6, lr}
   uint8_t tmp = getPHYCFGR();
    50ae:	24b8      	movs	r4, #184	; 0xb8
    50b0:	01a4      	lsls	r4, r4, #6
    50b2:	4e08      	ldr	r6, [pc, #32]	; (50d4 <wizphy_reset+0x28>)
    50b4:	0020      	movs	r0, r4
    50b6:	47b0      	blx	r6
   setPHYCFGR(tmp);
    50b8:	217f      	movs	r1, #127	; 0x7f
    50ba:	4d07      	ldr	r5, [pc, #28]	; (50d8 <wizphy_reset+0x2c>)
    50bc:	4001      	ands	r1, r0
    50be:	0020      	movs	r0, r4
    50c0:	47a8      	blx	r5
   tmp = getPHYCFGR();
    50c2:	0020      	movs	r0, r4
    50c4:	47b0      	blx	r6
   tmp |= ~PHYCFGR_RST;
    50c6:	2180      	movs	r1, #128	; 0x80
    50c8:	4249      	negs	r1, r1
    50ca:	4301      	orrs	r1, r0
   setPHYCFGR(tmp);
    50cc:	b2c9      	uxtb	r1, r1
    50ce:	0020      	movs	r0, r4
    50d0:	47a8      	blx	r5
}
    50d2:	bd70      	pop	{r4, r5, r6, pc}
    50d4:	000049bd 	.word	0x000049bd
    50d8:	00004a19 	.word	0x00004a19

000050dc <wizchip_setnetinfo>:
{
    50dc:	b570      	push	{r4, r5, r6, lr}
   setSHAR(pnetinfo->mac);
    50de:	0001      	movs	r1, r0
{
    50e0:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
    50e2:	2090      	movs	r0, #144	; 0x90
    50e4:	4d10      	ldr	r5, [pc, #64]	; (5128 <wizchip_setnetinfo+0x4c>)
    50e6:	2206      	movs	r2, #6
    50e8:	0100      	lsls	r0, r0, #4
    50ea:	47a8      	blx	r5
   setGAR(pnetinfo->gw);
    50ec:	0021      	movs	r1, r4
    50ee:	2080      	movs	r0, #128	; 0x80
    50f0:	310e      	adds	r1, #14
    50f2:	2204      	movs	r2, #4
    50f4:	0040      	lsls	r0, r0, #1
    50f6:	47a8      	blx	r5
   setSUBR(pnetinfo->sn);
    50f8:	0021      	movs	r1, r4
    50fa:	20a0      	movs	r0, #160	; 0xa0
    50fc:	310a      	adds	r1, #10
    50fe:	2204      	movs	r2, #4
    5100:	00c0      	lsls	r0, r0, #3
    5102:	47a8      	blx	r5
   setSIPR(pnetinfo->ip);
    5104:	20f0      	movs	r0, #240	; 0xf0
    5106:	1da1      	adds	r1, r4, #6
    5108:	2204      	movs	r2, #4
    510a:	0100      	lsls	r0, r0, #4
    510c:	47a8      	blx	r5
   _DNS_[0] = pnetinfo->dns[0];
    510e:	7ca2      	ldrb	r2, [r4, #18]
    5110:	4b06      	ldr	r3, [pc, #24]	; (512c <wizchip_setnetinfo+0x50>)
    5112:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
    5114:	7ce2      	ldrb	r2, [r4, #19]
    5116:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
    5118:	7d22      	ldrb	r2, [r4, #20]
    511a:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
    511c:	7d62      	ldrb	r2, [r4, #21]
    511e:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
    5120:	7da2      	ldrb	r2, [r4, #22]
    5122:	4b03      	ldr	r3, [pc, #12]	; (5130 <wizchip_setnetinfo+0x54>)
    5124:	701a      	strb	r2, [r3, #0]
}
    5126:	bd70      	pop	{r4, r5, r6, pc}
    5128:	00004aed 	.word	0x00004aed
    512c:	20000b4c 	.word	0x20000b4c
    5130:	20000b48 	.word	0x20000b48

00005134 <check_fs.part.7>:
/* Load a sector and check if it is an FAT VBR                           */
/*-----------------------------------------------------------------------*/

/* Check what the sector is */

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
    5134:	b570      	push	{r4, r5, r6, lr}
    5136:	0004      	movs	r4, r0
	rv = ptr[1];
    5138:	4b3f      	ldr	r3, [pc, #252]	; (5238 <check_fs.part.7+0x104>)
	rv = rv << 8 | ptr[0];
    513a:	5cc0      	ldrb	r0, [r0, r3]
    513c:	4b3f      	ldr	r3, [pc, #252]	; (523c <check_fs.part.7+0x108>)
    513e:	0200      	lsls	r0, r0, #8
    5140:	5ce5      	ldrb	r5, [r4, r3]
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
	sign = ld_word(fs->win + BS_55AA);
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
    5142:	3bff      	subs	r3, #255	; 0xff
    5144:	3bff      	subs	r3, #255	; 0xff
    5146:	5ce3      	ldrb	r3, [r4, r3]
	rv = rv << 8 | ptr[0];
    5148:	4305      	orrs	r5, r0
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
    514a:	2beb      	cmp	r3, #235	; 0xeb
    514c:	d009      	beq.n	5162 <check_fs.part.7+0x2e>
    514e:	3318      	adds	r3, #24
    5150:	b2db      	uxtb	r3, r3
    5152:	2b01      	cmp	r3, #1
    5154:	d905      	bls.n	5162 <check_fs.part.7+0x2e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
				return 0;	/* It can be presumed an FAT VBR */
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    5156:	4b3a      	ldr	r3, [pc, #232]	; (5240 <check_fs.part.7+0x10c>)
    5158:	18e8      	adds	r0, r5, r3
    515a:	1e43      	subs	r3, r0, #1
    515c:	4198      	sbcs	r0, r3
    515e:	3002      	adds	r0, #2
}
    5160:	bd70      	pop	{r4, r5, r6, pc}
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    5162:	4b38      	ldr	r3, [pc, #224]	; (5244 <check_fs.part.7+0x110>)
    5164:	429d      	cmp	r5, r3
    5166:	d04b      	beq.n	5200 <check_fs.part.7+0xcc>
	rv = ptr[1];
    5168:	233c      	movs	r3, #60	; 0x3c
	rv = rv << 8 | ptr[0];
    516a:	5ce2      	ldrb	r2, [r4, r3]
    516c:	3b01      	subs	r3, #1
    516e:	5ce3      	ldrb	r3, [r4, r3]
    5170:	0212      	lsls	r2, r2, #8
    5172:	4313      	orrs	r3, r2
		b = fs->win[BPB_SecPerClus];
    5174:	223d      	movs	r2, #61	; 0x3d
    5176:	5ca1      	ldrb	r1, [r4, r2]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    5178:	1e5a      	subs	r2, r3, #1
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    517a:	2003      	movs	r0, #3
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    517c:	4213      	tst	r3, r2
    517e:	d1ef      	bne.n	5160 <check_fs.part.7+0x2c>
    5180:	2280      	movs	r2, #128	; 0x80
    5182:	0092      	lsls	r2, r2, #2
    5184:	4293      	cmp	r3, r2
    5186:	d1eb      	bne.n	5160 <check_fs.part.7+0x2c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
    5188:	2900      	cmp	r1, #0
    518a:	d0e4      	beq.n	5156 <check_fs.part.7+0x22>
    518c:	1e4b      	subs	r3, r1, #1
    518e:	4219      	tst	r1, r3
    5190:	d1e1      	bne.n	5156 <check_fs.part.7+0x22>
	rv = ptr[1];
    5192:	233f      	movs	r3, #63	; 0x3f
	rv = rv << 8 | ptr[0];
    5194:	5ce2      	ldrb	r2, [r4, r3]
    5196:	3b01      	subs	r3, #1
    5198:	5ce3      	ldrb	r3, [r4, r3]
    519a:	0212      	lsls	r2, r2, #8
    519c:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
    519e:	d0da      	beq.n	5156 <check_fs.part.7+0x22>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
    51a0:	2340      	movs	r3, #64	; 0x40
    51a2:	5ce3      	ldrb	r3, [r4, r3]
    51a4:	3b01      	subs	r3, #1
    51a6:	2b01      	cmp	r3, #1
    51a8:	d8d5      	bhi.n	5156 <check_fs.part.7+0x22>
	rv = ptr[1];
    51aa:	2342      	movs	r3, #66	; 0x42
	rv = rv << 8 | ptr[0];
    51ac:	5ce2      	ldrb	r2, [r4, r3]
    51ae:	3b01      	subs	r3, #1
    51b0:	5ce3      	ldrb	r3, [r4, r3]
    51b2:	0212      	lsls	r2, r2, #8
    51b4:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
    51b6:	d0ce      	beq.n	5156 <check_fs.part.7+0x22>
	rv = ptr[1];
    51b8:	2344      	movs	r3, #68	; 0x44
	rv = rv << 8 | ptr[0];
    51ba:	5ce2      	ldrb	r2, [r4, r3]
    51bc:	3b01      	subs	r3, #1
    51be:	5ce3      	ldrb	r3, [r4, r3]
    51c0:	0212      	lsls	r2, r2, #8
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
    51c2:	4313      	orrs	r3, r2
    51c4:	2b7f      	cmp	r3, #127	; 0x7f
    51c6:	d811      	bhi.n	51ec <check_fs.part.7+0xb8>
	rv = rv << 8 | ptr[2];
    51c8:	2352      	movs	r3, #82	; 0x52
    51ca:	5ce2      	ldrb	r2, [r4, r3]
    51cc:	0023      	movs	r3, r4
    51ce:	3352      	adds	r3, #82	; 0x52
    51d0:	785b      	ldrb	r3, [r3, #1]
    51d2:	021b      	lsls	r3, r3, #8
    51d4:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    51d6:	2251      	movs	r2, #81	; 0x51
    51d8:	5ca2      	ldrb	r2, [r4, r2]
    51da:	021b      	lsls	r3, r3, #8
    51dc:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    51de:	2250      	movs	r2, #80	; 0x50
    51e0:	5ca2      	ldrb	r2, [r4, r2]
    51e2:	021b      	lsls	r3, r3, #8
    51e4:	4313      	orrs	r3, r2
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
    51e6:	4a18      	ldr	r2, [pc, #96]	; (5248 <check_fs.part.7+0x114>)
    51e8:	4293      	cmp	r3, r2
    51ea:	d9b4      	bls.n	5156 <check_fs.part.7+0x22>
	rv = ptr[1];
    51ec:	2347      	movs	r3, #71	; 0x47
			return 0;	/* It is an FAT32 VBR */
    51ee:	2000      	movs	r0, #0
	rv = rv << 8 | ptr[0];
    51f0:	5ce2      	ldrb	r2, [r4, r3]
    51f2:	3b01      	subs	r3, #1
    51f4:	5ce3      	ldrb	r3, [r4, r3]
    51f6:	0212      	lsls	r2, r2, #8
    51f8:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
    51fa:	4283      	cmp	r3, r0
    51fc:	d0ab      	beq.n	5156 <check_fs.part.7+0x22>
    51fe:	e7af      	b.n	5160 <check_fs.part.7+0x2c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    5200:	0020      	movs	r0, r4
    5202:	4b12      	ldr	r3, [pc, #72]	; (524c <check_fs.part.7+0x118>)
    5204:	2208      	movs	r2, #8
    5206:	4912      	ldr	r1, [pc, #72]	; (5250 <check_fs.part.7+0x11c>)
    5208:	3082      	adds	r0, #130	; 0x82
    520a:	4798      	blx	r3
    520c:	0003      	movs	r3, r0
			return 0;	/* It is an FAT32 VBR */
    520e:	2000      	movs	r0, #0
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    5210:	2b00      	cmp	r3, #0
    5212:	d0a5      	beq.n	5160 <check_fs.part.7+0x2c>
	rv = ptr[1];
    5214:	233c      	movs	r3, #60	; 0x3c
	rv = rv << 8 | ptr[0];
    5216:	5ce2      	ldrb	r2, [r4, r3]
    5218:	3b01      	subs	r3, #1
    521a:	5ce3      	ldrb	r3, [r4, r3]
    521c:	0212      	lsls	r2, r2, #8
    521e:	4313      	orrs	r3, r2
		b = fs->win[BPB_SecPerClus];
    5220:	223d      	movs	r2, #61	; 0x3d
    5222:	5ca1      	ldrb	r1, [r4, r2]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    5224:	1e5a      	subs	r2, r3, #1
    5226:	4213      	tst	r3, r2
    5228:	d103      	bne.n	5232 <check_fs.part.7+0xfe>
    522a:	2280      	movs	r2, #128	; 0x80
    522c:	0092      	lsls	r2, r2, #2
    522e:	4293      	cmp	r3, r2
    5230:	d0aa      	beq.n	5188 <check_fs.part.7+0x54>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    5232:	2002      	movs	r0, #2
    5234:	e794      	b.n	5160 <check_fs.part.7+0x2c>
    5236:	46c0      	nop			; (mov r8, r8)
    5238:	0000022f 	.word	0x0000022f
    523c:	0000022e 	.word	0x0000022e
    5240:	ffff55ab 	.word	0xffff55ab
    5244:	0000aa55 	.word	0x0000aa55
    5248:	0000ffff 	.word	0x0000ffff
    524c:	0000b5ad 	.word	0x0000b5ad
    5250:	0001885c 	.word	0x0001885c

00005254 <move_window>:
	if (sect != fs->winsect) {	/* Window offset changed? */
    5254:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
    5256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5258:	0004      	movs	r4, r0
    525a:	000d      	movs	r5, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
    525c:	428a      	cmp	r2, r1
    525e:	d02b      	beq.n	52b8 <move_window+0x64>
    5260:	0006      	movs	r6, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5262:	7903      	ldrb	r3, [r0, #4]
    5264:	3630      	adds	r6, #48	; 0x30
    5266:	2b00      	cmp	r3, #0
    5268:	d10d      	bne.n	5286 <move_window+0x32>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    526a:	0031      	movs	r1, r6
    526c:	7860      	ldrb	r0, [r4, #1]
    526e:	2301      	movs	r3, #1
    5270:	002a      	movs	r2, r5
    5272:	4e12      	ldr	r6, [pc, #72]	; (52bc <move_window+0x68>)
    5274:	47b0      	blx	r6
    5276:	2800      	cmp	r0, #0
    5278:	d101      	bne.n	527e <move_window+0x2a>
			fs->winsect = sect;
    527a:	62e5      	str	r5, [r4, #44]	; 0x2c
}
    527c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
    527e:	2501      	movs	r5, #1
				res = FR_DISK_ERR;
    5280:	2001      	movs	r0, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
    5282:	426d      	negs	r5, r5
    5284:	e7f9      	b.n	527a <move_window+0x26>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5286:	2301      	movs	r3, #1
    5288:	7840      	ldrb	r0, [r0, #1]
    528a:	0031      	movs	r1, r6
    528c:	4f0c      	ldr	r7, [pc, #48]	; (52c0 <move_window+0x6c>)
    528e:	47b8      	blx	r7
    5290:	0003      	movs	r3, r0
    5292:	2001      	movs	r0, #1
    5294:	2b00      	cmp	r3, #0
    5296:	d1f1      	bne.n	527c <move_window+0x28>
			fs->wflag = 0;	/* Clear window dirty flag */
    5298:	7123      	strb	r3, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    529a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    529c:	6a23      	ldr	r3, [r4, #32]
    529e:	69a1      	ldr	r1, [r4, #24]
    52a0:	1ad3      	subs	r3, r2, r3
    52a2:	428b      	cmp	r3, r1
    52a4:	d2e1      	bcs.n	526a <move_window+0x16>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    52a6:	78e3      	ldrb	r3, [r4, #3]
    52a8:	2b02      	cmp	r3, #2
    52aa:	d1de      	bne.n	526a <move_window+0x16>
    52ac:	1852      	adds	r2, r2, r1
    52ae:	7860      	ldrb	r0, [r4, #1]
    52b0:	3b01      	subs	r3, #1
    52b2:	0031      	movs	r1, r6
    52b4:	47b8      	blx	r7
    52b6:	e7d8      	b.n	526a <move_window+0x16>
	FRESULT res = FR_OK;
    52b8:	2000      	movs	r0, #0
    52ba:	e7df      	b.n	527c <move_window+0x28>
    52bc:	00008b95 	.word	0x00008b95
    52c0:	00008c85 	.word	0x00008c85

000052c4 <sync_fs>:
{
    52c4:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Is the disk access window dirty? */
    52c6:	7903      	ldrb	r3, [r0, #4]
{
    52c8:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
    52ca:	2b00      	cmp	r3, #0
    52cc:	d10b      	bne.n	52e6 <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    52ce:	7823      	ldrb	r3, [r4, #0]
    52d0:	2b03      	cmp	r3, #3
    52d2:	d024      	beq.n	531e <sync_fs+0x5a>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    52d4:	4b37      	ldr	r3, [pc, #220]	; (53b4 <sync_fs+0xf0>)
    52d6:	7860      	ldrb	r0, [r4, #1]
    52d8:	2200      	movs	r2, #0
    52da:	2100      	movs	r1, #0
    52dc:	4798      	blx	r3
    52de:	1e43      	subs	r3, r0, #1
    52e0:	4198      	sbcs	r0, r3
    52e2:	b2c0      	uxtb	r0, r0
}
    52e4:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    52e6:	0006      	movs	r6, r0
    52e8:	3630      	adds	r6, #48	; 0x30
    52ea:	2301      	movs	r3, #1
    52ec:	7840      	ldrb	r0, [r0, #1]
    52ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    52f0:	0031      	movs	r1, r6
    52f2:	4d31      	ldr	r5, [pc, #196]	; (53b8 <sync_fs+0xf4>)
    52f4:	47a8      	blx	r5
    52f6:	0003      	movs	r3, r0
    52f8:	2001      	movs	r0, #1
    52fa:	2b00      	cmp	r3, #0
    52fc:	d1f2      	bne.n	52e4 <sync_fs+0x20>
			fs->wflag = 0;	/* Clear window dirty flag */
    52fe:	7123      	strb	r3, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5300:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5302:	6a23      	ldr	r3, [r4, #32]
    5304:	69a1      	ldr	r1, [r4, #24]
    5306:	1ad3      	subs	r3, r2, r3
    5308:	428b      	cmp	r3, r1
    530a:	d2e0      	bcs.n	52ce <sync_fs+0xa>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    530c:	78e3      	ldrb	r3, [r4, #3]
    530e:	2b02      	cmp	r3, #2
    5310:	d1dd      	bne.n	52ce <sync_fs+0xa>
    5312:	1852      	adds	r2, r2, r1
    5314:	7860      	ldrb	r0, [r4, #1]
    5316:	3b01      	subs	r3, #1
    5318:	0031      	movs	r1, r6
    531a:	47a8      	blx	r5
    531c:	e7d7      	b.n	52ce <sync_fs+0xa>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    531e:	7963      	ldrb	r3, [r4, #5]
    5320:	2b01      	cmp	r3, #1
    5322:	d1d7      	bne.n	52d4 <sync_fs+0x10>
			memset(fs->win, 0, sizeof fs->win);
    5324:	0025      	movs	r5, r4
    5326:	2280      	movs	r2, #128	; 0x80
    5328:	3530      	adds	r5, #48	; 0x30
    532a:	0092      	lsls	r2, r2, #2
    532c:	2100      	movs	r1, #0
    532e:	0028      	movs	r0, r5
    5330:	4b22      	ldr	r3, [pc, #136]	; (53bc <sync_fs+0xf8>)
    5332:	4798      	blx	r3
	*ptr++ = (BYTE)val; val >>= 8;
    5334:	2255      	movs	r2, #85	; 0x55
	*ptr++ = (BYTE)val;
    5336:	2133      	movs	r1, #51	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
    5338:	2085      	movs	r0, #133	; 0x85
	*ptr++ = (BYTE)val; val >>= 8;
    533a:	4b21      	ldr	r3, [pc, #132]	; (53c0 <sync_fs+0xfc>)
	*ptr++ = (BYTE)val; val >>= 8;
    533c:	0080      	lsls	r0, r0, #2
	*ptr++ = (BYTE)val; val >>= 8;
    533e:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val;
    5340:	4b20      	ldr	r3, [pc, #128]	; (53c4 <sync_fs+0x100>)
    5342:	3255      	adds	r2, #85	; 0x55
    5344:	54e2      	strb	r2, [r4, r3]
	*ptr++ = (BYTE)val; val >>= 8;
    5346:	3bde      	subs	r3, #222	; 0xde
    5348:	3bff      	subs	r3, #255	; 0xff
    534a:	3a7a      	subs	r2, #122	; 0x7a
    534c:	54a3      	strb	r3, [r4, r2]
	*ptr++ = (BYTE)val; val >>= 8;
    534e:	3201      	adds	r2, #1
    5350:	54a3      	strb	r3, [r4, r2]
	*ptr++ = (BYTE)val; val >>= 8;
    5352:	330f      	adds	r3, #15
    5354:	3201      	adds	r2, #1
    5356:	54a3      	strb	r3, [r4, r2]
	*ptr++ = (BYTE)val;
    5358:	320f      	adds	r2, #15
    535a:	5462      	strb	r2, [r4, r1]
	*ptr++ = (BYTE)val; val >>= 8;
    535c:	313f      	adds	r1, #63	; 0x3f
    535e:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
    5360:	4819      	ldr	r0, [pc, #100]	; (53c8 <sync_fs+0x104>)
    5362:	5421      	strb	r1, [r4, r0]
	*ptr++ = (BYTE)val; val >>= 8;
    5364:	4919      	ldr	r1, [pc, #100]	; (53cc <sync_fs+0x108>)
    5366:	5462      	strb	r2, [r4, r1]
	*ptr++ = (BYTE)val;
    5368:	4a19      	ldr	r2, [pc, #100]	; (53d0 <sync_fs+0x10c>)
    536a:	54a3      	strb	r3, [r4, r2]
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    536c:	6923      	ldr	r3, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
    536e:	3201      	adds	r2, #1
    5370:	54a3      	strb	r3, [r4, r2]
	*ptr++ = (BYTE)val; val >>= 8;
    5372:	4a18      	ldr	r2, [pc, #96]	; (53d4 <sync_fs+0x110>)
	*ptr++ = (BYTE)val; val >>= 8;
    5374:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
    5376:	54a1      	strb	r1, [r4, r2]
	*ptr++ = (BYTE)val; val >>= 8;
    5378:	4a17      	ldr	r2, [pc, #92]	; (53d8 <sync_fs+0x114>)
	*ptr++ = (BYTE)val; val >>= 8;
    537a:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
    537c:	54a1      	strb	r1, [r4, r2]
	*ptr++ = (BYTE)val;
    537e:	4a17      	ldr	r2, [pc, #92]	; (53dc <sync_fs+0x118>)
	*ptr++ = (BYTE)val; val >>= 8;
    5380:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
    5382:	54a3      	strb	r3, [r4, r2]
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    5384:	68e3      	ldr	r3, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
    5386:	3201      	adds	r2, #1
    5388:	54a3      	strb	r3, [r4, r2]
	*ptr++ = (BYTE)val; val >>= 8;
    538a:	4a15      	ldr	r2, [pc, #84]	; (53e0 <sync_fs+0x11c>)
	*ptr++ = (BYTE)val; val >>= 8;
    538c:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
    538e:	54a1      	strb	r1, [r4, r2]
	*ptr++ = (BYTE)val; val >>= 8;
    5390:	4a14      	ldr	r2, [pc, #80]	; (53e4 <sync_fs+0x120>)
	*ptr++ = (BYTE)val; val >>= 8;
    5392:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
    5394:	54a1      	strb	r1, [r4, r2]
	*ptr++ = (BYTE)val;
    5396:	4a14      	ldr	r2, [pc, #80]	; (53e8 <sync_fs+0x124>)
	*ptr++ = (BYTE)val; val >>= 8;
    5398:	0e1b      	lsrs	r3, r3, #24
	*ptr++ = (BYTE)val;
    539a:	54a3      	strb	r3, [r4, r2]
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    539c:	69e3      	ldr	r3, [r4, #28]
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    539e:	0029      	movs	r1, r5
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    53a0:	1c5a      	adds	r2, r3, #1
    53a2:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    53a4:	2301      	movs	r3, #1
    53a6:	7860      	ldrb	r0, [r4, #1]
    53a8:	4d03      	ldr	r5, [pc, #12]	; (53b8 <sync_fs+0xf4>)
    53aa:	47a8      	blx	r5
			fs->fsi_flag = 0;
    53ac:	2300      	movs	r3, #0
    53ae:	7163      	strb	r3, [r4, #5]
    53b0:	e790      	b.n	52d4 <sync_fs+0x10>
    53b2:	46c0      	nop			; (mov r8, r8)
    53b4:	00008e19 	.word	0x00008e19
    53b8:	00008c85 	.word	0x00008c85
    53bc:	0000b67d 	.word	0x0000b67d
    53c0:	0000022e 	.word	0x0000022e
    53c4:	0000022f 	.word	0x0000022f
    53c8:	00000215 	.word	0x00000215
    53cc:	00000216 	.word	0x00000216
    53d0:	00000217 	.word	0x00000217
    53d4:	00000219 	.word	0x00000219
    53d8:	0000021a 	.word	0x0000021a
    53dc:	0000021b 	.word	0x0000021b
    53e0:	0000021d 	.word	0x0000021d
    53e4:	0000021e 	.word	0x0000021e
    53e8:	0000021f 	.word	0x0000021f

000053ec <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
    53ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ee:	464e      	mov	r6, r9
    53f0:	46de      	mov	lr, fp
    53f2:	4657      	mov	r7, sl
    53f4:	4645      	mov	r5, r8
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
    53f6:	2300      	movs	r3, #0
{
    53f8:	b5e0      	push	{r5, r6, r7, lr}
	tt = tp = *path;
    53fa:	6806      	ldr	r6, [r0, #0]
{
    53fc:	b083      	sub	sp, #12
	*rfs = 0;
    53fe:	600b      	str	r3, [r1, #0]
	if (!tp) return vol;	/* Invalid path name? */
    5400:	2e00      	cmp	r6, #0
    5402:	d032      	beq.n	546a <mount_volume+0x7e>
    5404:	0033      	movs	r3, r6
    5406:	e002      	b.n	540e <mount_volume+0x22>
		tc = *tt++;
    5408:	002b      	movs	r3, r5
	} while (!IsTerminator(tc) && tc != ':');
    540a:	2c3a      	cmp	r4, #58	; 0x3a
    540c:	d02a      	beq.n	5464 <mount_volume+0x78>
		tc = *tt++;
    540e:	781c      	ldrb	r4, [r3, #0]
    5410:	1c5d      	adds	r5, r3, #1
	} while (!IsTerminator(tc) && tc != ':');
    5412:	2c20      	cmp	r4, #32
    5414:	d8f8      	bhi.n	5408 <mount_volume+0x1c>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    5416:	4bca      	ldr	r3, [pc, #808]	; (5740 <mount_volume+0x354>)
    5418:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    541a:	2c00      	cmp	r4, #0
    541c:	d027      	beq.n	546e <mount_volume+0x82>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    541e:	2501      	movs	r5, #1
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    5420:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    5422:	43aa      	bics	r2, r5
	*rfs = fs;							/* Return pointer to the filesystem object */
    5424:	600c      	str	r4, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    5426:	0016      	movs	r6, r2
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    5428:	2b00      	cmp	r3, #0
    542a:	d00b      	beq.n	5444 <mount_volume+0x58>
		stat = disk_status(fs->pdrv);
    542c:	7860      	ldrb	r0, [r4, #1]
    542e:	4bc5      	ldr	r3, [pc, #788]	; (5744 <mount_volume+0x358>)
    5430:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    5432:	4205      	tst	r5, r0
    5434:	d106      	bne.n	5444 <mount_volume+0x58>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The filesystem object is already valid */
    5436:	2500      	movs	r5, #0
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    5438:	2e00      	cmp	r6, #0
    543a:	d00b      	beq.n	5454 <mount_volume+0x68>
    543c:	0743      	lsls	r3, r0, #29
    543e:	d509      	bpl.n	5454 <mount_volume+0x68>
				return FR_WRITE_PROTECTED;
    5440:	250a      	movs	r5, #10
    5442:	e007      	b.n	5454 <mount_volume+0x68>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
    5444:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    5446:	7860      	ldrb	r0, [r4, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    5448:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    544a:	4bbf      	ldr	r3, [pc, #764]	; (5748 <mount_volume+0x35c>)
    544c:	4798      	blx	r3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    544e:	2503      	movs	r5, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    5450:	07c3      	lsls	r3, r0, #31
    5452:	d50e      	bpl.n	5472 <mount_volume+0x86>
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
}
    5454:	0028      	movs	r0, r5
    5456:	b003      	add	sp, #12
    5458:	bc3c      	pop	{r2, r3, r4, r5}
    545a:	4690      	mov	r8, r2
    545c:	4699      	mov	r9, r3
    545e:	46a2      	mov	sl, r4
    5460:	46ab      	mov	fp, r5
    5462:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    5464:	1cb4      	adds	r4, r6, #2
    5466:	42a5      	cmp	r5, r4
    5468:	d025      	beq.n	54b6 <mount_volume+0xca>
	if (vol < 0) return FR_INVALID_DRIVE;
    546a:	250b      	movs	r5, #11
    546c:	e7f2      	b.n	5454 <mount_volume+0x68>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    546e:	250c      	movs	r5, #12
    5470:	e7f0      	b.n	5454 <mount_volume+0x68>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    5472:	2e00      	cmp	r6, #0
    5474:	d001      	beq.n	547a <mount_volume+0x8e>
    5476:	0743      	lsls	r3, r0, #29
    5478:	d4e2      	bmi.n	5440 <mount_volume+0x54>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    547a:	2701      	movs	r7, #1
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    547c:	0025      	movs	r5, r4
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    547e:	2300      	movs	r3, #0
    5480:	427f      	negs	r7, r7
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5482:	3530      	adds	r5, #48	; 0x30
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    5484:	7123      	strb	r3, [r4, #4]
    5486:	62e7      	str	r7, [r4, #44]	; 0x2c
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5488:	7860      	ldrb	r0, [r4, #1]
    548a:	3301      	adds	r3, #1
    548c:	2200      	movs	r2, #0
    548e:	0029      	movs	r1, r5
    5490:	4eae      	ldr	r6, [pc, #696]	; (574c <mount_volume+0x360>)
    5492:	47b0      	blx	r6
    5494:	4680      	mov	r8, r0
    5496:	2800      	cmp	r0, #0
    5498:	d117      	bne.n	54ca <mount_volume+0xde>
    549a:	4bad      	ldr	r3, [pc, #692]	; (5750 <mount_volume+0x364>)
			fs->winsect = sect;
    549c:	62e0      	str	r0, [r4, #44]	; 0x2c
    549e:	0020      	movs	r0, r4
    54a0:	4699      	mov	r9, r3
    54a2:	4798      	blx	r3
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    54a4:	2802      	cmp	r0, #2
    54a6:	d100      	bne.n	54aa <mount_volume+0xbe>
    54a8:	e0ca      	b.n	5640 <mount_volume+0x254>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    54aa:	2804      	cmp	r0, #4
    54ac:	d00e      	beq.n	54cc <mount_volume+0xe0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    54ae:	2801      	cmp	r0, #1
    54b0:	d923      	bls.n	54fa <mount_volume+0x10e>
    54b2:	250d      	movs	r5, #13
    54b4:	e7ce      	b.n	5454 <mount_volume+0x68>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    54b6:	7834      	ldrb	r4, [r6, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
    54b8:	250b      	movs	r5, #11
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    54ba:	2c30      	cmp	r4, #48	; 0x30
    54bc:	d1ca      	bne.n	5454 <mount_volume+0x68>
			*path = tt;		/* Snip the drive prefix off */
    54be:	6003      	str	r3, [r0, #0]
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    54c0:	4b9f      	ldr	r3, [pc, #636]	; (5740 <mount_volume+0x354>)
    54c2:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    54c4:	2c00      	cmp	r4, #0
    54c6:	d1aa      	bne.n	541e <mount_volume+0x32>
    54c8:	e7d1      	b.n	546e <mount_volume+0x82>
			fs->winsect = sect;
    54ca:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    54cc:	2501      	movs	r5, #1
    54ce:	e7c1      	b.n	5454 <mount_volume+0x68>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    54d0:	4643      	mov	r3, r8
    54d2:	7123      	strb	r3, [r4, #4]
	if (sect != fs->winsect) {	/* Window offset changed? */
    54d4:	465b      	mov	r3, fp
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    54d6:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    54d8:	3301      	adds	r3, #1
    54da:	d009      	beq.n	54f0 <mount_volume+0x104>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    54dc:	7860      	ldrb	r0, [r4, #1]
    54de:	2301      	movs	r3, #1
    54e0:	465a      	mov	r2, fp
    54e2:	0029      	movs	r1, r5
    54e4:	47b0      	blx	r6
    54e6:	2800      	cmp	r0, #0
    54e8:	d000      	beq.n	54ec <mount_volume+0x100>
    54ea:	e15c      	b.n	57a6 <mount_volume+0x3ba>
			fs->winsect = sect;
    54ec:	465b      	mov	r3, fp
    54ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    54f0:	0020      	movs	r0, r4
    54f2:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
    54f4:	2801      	cmp	r0, #1
    54f6:	d900      	bls.n	54fa <mount_volume+0x10e>
    54f8:	e0ea      	b.n	56d0 <mount_volume+0x2e4>
	rv = ptr[1];
    54fa:	233c      	movs	r3, #60	; 0x3c
	rv = rv << 8 | ptr[0];
    54fc:	5ce2      	ldrb	r2, [r4, r3]
    54fe:	3b01      	subs	r3, #1
    5500:	5ce3      	ldrb	r3, [r4, r3]
    5502:	0212      	lsls	r2, r2, #8
    5504:	4313      	orrs	r3, r2
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    5506:	2280      	movs	r2, #128	; 0x80
    5508:	b21b      	sxth	r3, r3
    550a:	0092      	lsls	r2, r2, #2
    550c:	4293      	cmp	r3, r2
    550e:	d1d0      	bne.n	54b2 <mount_volume+0xc6>
	rv = ptr[1];
    5510:	2347      	movs	r3, #71	; 0x47
	rv = rv << 8 | ptr[0];
    5512:	3abb      	subs	r2, #187	; 0xbb
    5514:	5ce3      	ldrb	r3, [r4, r3]
    5516:	3aff      	subs	r2, #255	; 0xff
    5518:	5ca2      	ldrb	r2, [r4, r2]
    551a:	021b      	lsls	r3, r3, #8
    551c:	431a      	orrs	r2, r3
    551e:	4690      	mov	r8, r2
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    5520:	1e13      	subs	r3, r2, #0
    5522:	d10f      	bne.n	5544 <mount_volume+0x158>
	rv = rv << 8 | ptr[2];
    5524:	3356      	adds	r3, #86	; 0x56
    5526:	5ce2      	ldrb	r2, [r4, r3]
    5528:	0023      	movs	r3, r4
    552a:	3356      	adds	r3, #86	; 0x56
    552c:	785b      	ldrb	r3, [r3, #1]
    552e:	021b      	lsls	r3, r3, #8
    5530:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    5532:	2255      	movs	r2, #85	; 0x55
    5534:	5ca2      	ldrb	r2, [r4, r2]
    5536:	021b      	lsls	r3, r3, #8
    5538:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    553a:	2254      	movs	r2, #84	; 0x54
    553c:	5ca2      	ldrb	r2, [r4, r2]
    553e:	021b      	lsls	r3, r3, #8
    5540:	431a      	orrs	r2, r3
    5542:	4690      	mov	r8, r2
		fs->fsize = fasize;
    5544:	4643      	mov	r3, r8
    5546:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    5548:	2340      	movs	r3, #64	; 0x40
    554a:	5ce3      	ldrb	r3, [r4, r3]
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
    554c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    554e:	1e5a      	subs	r2, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    5550:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    5552:	2a01      	cmp	r2, #1
    5554:	d8ad      	bhi.n	54b2 <mount_volume+0xc6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    5556:	4642      	mov	r2, r8
    5558:	435a      	muls	r2, r3
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    555a:	233d      	movs	r3, #61	; 0x3d
    555c:	5ce1      	ldrb	r1, [r4, r3]
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    555e:	4692      	mov	sl, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    5560:	b28b      	uxth	r3, r1
    5562:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    5564:	2b00      	cmp	r3, #0
    5566:	d0a4      	beq.n	54b2 <mount_volume+0xc6>
    5568:	1e4b      	subs	r3, r1, #1
    556a:	4219      	tst	r1, r3
    556c:	d1a1      	bne.n	54b2 <mount_volume+0xc6>
	rv = ptr[1];
    556e:	2342      	movs	r3, #66	; 0x42
	rv = rv << 8 | ptr[0];
    5570:	2241      	movs	r2, #65	; 0x41
    5572:	5ce3      	ldrb	r3, [r4, r3]
    5574:	5ca2      	ldrb	r2, [r4, r2]
    5576:	021b      	lsls	r3, r3, #8
    5578:	431a      	orrs	r2, r3
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    557a:	0013      	movs	r3, r2
	rv = rv << 8 | ptr[0];
    557c:	4691      	mov	r9, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    557e:	8122      	strh	r2, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    5580:	071b      	lsls	r3, r3, #28
    5582:	d196      	bne.n	54b2 <mount_volume+0xc6>
	rv = ptr[1];
    5584:	2344      	movs	r3, #68	; 0x44
	rv = rv << 8 | ptr[0];
    5586:	2243      	movs	r2, #67	; 0x43
    5588:	5ce3      	ldrb	r3, [r4, r3]
    558a:	5ca0      	ldrb	r0, [r4, r2]
    558c:	021b      	lsls	r3, r3, #8
    558e:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    5590:	d10e      	bne.n	55b0 <mount_volume+0x1c4>
	rv = rv << 8 | ptr[2];
    5592:	2352      	movs	r3, #82	; 0x52
    5594:	5ce2      	ldrb	r2, [r4, r3]
    5596:	0023      	movs	r3, r4
    5598:	3352      	adds	r3, #82	; 0x52
    559a:	785b      	ldrb	r3, [r3, #1]
    559c:	021b      	lsls	r3, r3, #8
    559e:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    55a0:	2251      	movs	r2, #81	; 0x51
    55a2:	5ca0      	ldrb	r0, [r4, r2]
    55a4:	021b      	lsls	r3, r3, #8
	rv = rv << 8 | ptr[0];
    55a6:	3a01      	subs	r2, #1
	rv = rv << 8 | ptr[1];
    55a8:	4303      	orrs	r3, r0
	rv = rv << 8 | ptr[0];
    55aa:	5ca0      	ldrb	r0, [r4, r2]
    55ac:	021b      	lsls	r3, r3, #8
    55ae:	4318      	orrs	r0, r3
	rv = ptr[1];
    55b0:	233f      	movs	r3, #63	; 0x3f
	rv = rv << 8 | ptr[0];
    55b2:	223e      	movs	r2, #62	; 0x3e
    55b4:	5ce3      	ldrb	r3, [r4, r3]
    55b6:	5ca5      	ldrb	r5, [r4, r2]
    55b8:	021b      	lsls	r3, r3, #8
    55ba:	431d      	orrs	r5, r3
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    55bc:	d100      	bne.n	55c0 <mount_volume+0x1d4>
    55be:	e778      	b.n	54b2 <mount_volume+0xc6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    55c0:	464b      	mov	r3, r9
    55c2:	091f      	lsrs	r7, r3, #4
    55c4:	197f      	adds	r7, r7, r5
    55c6:	4457      	add	r7, sl
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    55c8:	42b8      	cmp	r0, r7
    55ca:	d200      	bcs.n	55ce <mount_volume+0x1e2>
    55cc:	e771      	b.n	54b2 <mount_volume+0xc6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    55ce:	4b61      	ldr	r3, [pc, #388]	; (5754 <mount_volume+0x368>)
    55d0:	1bc0      	subs	r0, r0, r7
    55d2:	4798      	blx	r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    55d4:	4b60      	ldr	r3, [pc, #384]	; (5758 <mount_volume+0x36c>)
    55d6:	1e42      	subs	r2, r0, #1
    55d8:	429a      	cmp	r2, r3
    55da:	d900      	bls.n	55de <mount_volume+0x1f2>
    55dc:	e769      	b.n	54b2 <mount_volume+0xc6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    55de:	4b5f      	ldr	r3, [pc, #380]	; (575c <mount_volume+0x370>)
    55e0:	4298      	cmp	r0, r3
    55e2:	d900      	bls.n	55e6 <mount_volume+0x1fa>
    55e4:	e0ff      	b.n	57e6 <mount_volume+0x3fa>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    55e6:	4b5e      	ldr	r3, [pc, #376]	; (5760 <mount_volume+0x374>)
    55e8:	4298      	cmp	r0, r3
    55ea:	d900      	bls.n	55ee <mount_volume+0x202>
    55ec:	e0eb      	b.n	57c6 <mount_volume+0x3da>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    55ee:	464b      	mov	r3, r9
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    55f0:	1975      	adds	r5, r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    55f2:	3002      	adds	r0, #2
		fs->volbase = bsect;							/* Volume start sector */
    55f4:	61e6      	str	r6, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
    55f6:	19f6      	adds	r6, r6, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    55f8:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    55fa:	6225      	str	r5, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    55fc:	62a6      	str	r6, [r4, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    55fe:	2b00      	cmp	r3, #0
    5600:	d100      	bne.n	5604 <mount_volume+0x218>
    5602:	e756      	b.n	54b2 <mount_volume+0xc6>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    5604:	2201      	movs	r2, #1
    5606:	0043      	lsls	r3, r0, #1
    5608:	181b      	adds	r3, r3, r0
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    560a:	4455      	add	r5, sl
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    560c:	085b      	lsrs	r3, r3, #1
    560e:	4010      	ands	r0, r2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    5610:	6265      	str	r5, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    5612:	1818      	adds	r0, r3, r0
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    5614:	4b53      	ldr	r3, [pc, #332]	; (5764 <mount_volume+0x378>)
    5616:	469c      	mov	ip, r3
    5618:	4460      	add	r0, ip
    561a:	0a40      	lsrs	r0, r0, #9
    561c:	4580      	cmp	r8, r0
    561e:	d200      	bcs.n	5622 <mount_volume+0x236>
    5620:	e747      	b.n	54b2 <mount_volume+0xc6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    5622:	2301      	movs	r3, #1
    5624:	425b      	negs	r3, r3
    5626:	6123      	str	r3, [r4, #16]
    5628:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
    562a:	3381      	adds	r3, #129	; 0x81
    562c:	7163      	strb	r3, [r4, #5]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
    562e:	7022      	strb	r2, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    5630:	4a4d      	ldr	r2, [pc, #308]	; (5768 <mount_volume+0x37c>)
	return FR_OK;
    5632:	2500      	movs	r5, #0
	fs->id = ++Fsid;		/* Volume mount ID */
    5634:	8813      	ldrh	r3, [r2, #0]
    5636:	3301      	adds	r3, #1
    5638:	b29b      	uxth	r3, r3
    563a:	8013      	strh	r3, [r2, #0]
    563c:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
    563e:	e709      	b.n	5454 <mount_volume+0x68>
	rv = rv << 8 | ptr[2];
    5640:	23fc      	movs	r3, #252	; 0xfc
    5642:	005b      	lsls	r3, r3, #1
    5644:	5ce2      	ldrb	r2, [r4, r3]
    5646:	0023      	movs	r3, r4
    5648:	33f9      	adds	r3, #249	; 0xf9
    564a:	33ff      	adds	r3, #255	; 0xff
    564c:	785b      	ldrb	r3, [r3, #1]
    564e:	021b      	lsls	r3, r3, #8
    5650:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    5652:	22f8      	movs	r2, #248	; 0xf8
    5654:	32ff      	adds	r2, #255	; 0xff
    5656:	5ca2      	ldrb	r2, [r4, r2]
    5658:	021b      	lsls	r3, r3, #8
    565a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    565c:	22fb      	movs	r2, #251	; 0xfb
    565e:	0052      	lsls	r2, r2, #1
    5660:	5ca2      	ldrb	r2, [r4, r2]
    5662:	021b      	lsls	r3, r3, #8
    5664:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    5666:	2382      	movs	r3, #130	; 0x82
    5668:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    566a:	4693      	mov	fp, r2
	rv = rv << 8 | ptr[2];
    566c:	5ce2      	ldrb	r2, [r4, r3]
    566e:	18e3      	adds	r3, r4, r3
    5670:	785b      	ldrb	r3, [r3, #1]
    5672:	021b      	lsls	r3, r3, #8
    5674:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    5676:	4a3d      	ldr	r2, [pc, #244]	; (576c <mount_volume+0x380>)
    5678:	021b      	lsls	r3, r3, #8
    567a:	5ca2      	ldrb	r2, [r4, r2]
    567c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    567e:	4a3c      	ldr	r2, [pc, #240]	; (5770 <mount_volume+0x384>)
    5680:	021b      	lsls	r3, r3, #8
    5682:	5ca2      	ldrb	r2, [r4, r2]
    5684:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    5686:	2386      	movs	r3, #134	; 0x86
    5688:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    568a:	4692      	mov	sl, r2
	rv = rv << 8 | ptr[2];
    568c:	5ce2      	ldrb	r2, [r4, r3]
    568e:	18e3      	adds	r3, r4, r3
    5690:	785b      	ldrb	r3, [r3, #1]
    5692:	021b      	lsls	r3, r3, #8
    5694:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    5696:	4a37      	ldr	r2, [pc, #220]	; (5774 <mount_volume+0x388>)
    5698:	021b      	lsls	r3, r3, #8
    569a:	5ca2      	ldrb	r2, [r4, r2]
    569c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    569e:	4a36      	ldr	r2, [pc, #216]	; (5778 <mount_volume+0x38c>)
    56a0:	021b      	lsls	r3, r3, #8
    56a2:	5ca2      	ldrb	r2, [r4, r2]
    56a4:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    56a6:	238a      	movs	r3, #138	; 0x8a
    56a8:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    56aa:	9200      	str	r2, [sp, #0]
	rv = rv << 8 | ptr[2];
    56ac:	5ce2      	ldrb	r2, [r4, r3]
    56ae:	18e3      	adds	r3, r4, r3
    56b0:	785b      	ldrb	r3, [r3, #1]
    56b2:	021b      	lsls	r3, r3, #8
    56b4:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    56b6:	4a31      	ldr	r2, [pc, #196]	; (577c <mount_volume+0x390>)
    56b8:	021b      	lsls	r3, r3, #8
    56ba:	5ca2      	ldrb	r2, [r4, r2]
    56bc:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    56be:	4a30      	ldr	r2, [pc, #192]	; (5780 <mount_volume+0x394>)
    56c0:	021b      	lsls	r3, r3, #8
    56c2:	5ca2      	ldrb	r2, [r4, r2]
    56c4:	431a      	orrs	r2, r3
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    56c6:	465b      	mov	r3, fp
	rv = rv << 8 | ptr[0];
    56c8:	9201      	str	r2, [sp, #4]
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    56ca:	2b00      	cmp	r3, #0
    56cc:	d000      	beq.n	56d0 <mount_volume+0x2e4>
    56ce:	e6ff      	b.n	54d0 <mount_volume+0xe4>
    56d0:	4653      	mov	r3, sl
    56d2:	2b00      	cmp	r3, #0
    56d4:	d123      	bne.n	571e <mount_volume+0x332>
    56d6:	9b00      	ldr	r3, [sp, #0]
    56d8:	2b00      	cmp	r3, #0
    56da:	d153      	bne.n	5784 <mount_volume+0x398>
    56dc:	9b01      	ldr	r3, [sp, #4]
    56de:	2b00      	cmp	r3, #0
    56e0:	d100      	bne.n	56e4 <mount_volume+0x2f8>
    56e2:	e6e6      	b.n	54b2 <mount_volume+0xc6>
    56e4:	001a      	movs	r2, r3
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    56e6:	2300      	movs	r3, #0
    56e8:	2701      	movs	r7, #1
    56ea:	7123      	strb	r3, [r4, #4]
	if (sect != fs->winsect) {	/* Window offset changed? */
    56ec:	0013      	movs	r3, r2
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    56ee:	427f      	negs	r7, r7
    56f0:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    56f2:	3301      	adds	r3, #1
    56f4:	d009      	beq.n	570a <mount_volume+0x31e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    56f6:	7860      	ldrb	r0, [r4, #1]
    56f8:	2301      	movs	r3, #1
    56fa:	0029      	movs	r1, r5
    56fc:	4690      	mov	r8, r2
    56fe:	47b0      	blx	r6
    5700:	2800      	cmp	r0, #0
    5702:	d000      	beq.n	5706 <mount_volume+0x31a>
    5704:	e6e1      	b.n	54ca <mount_volume+0xde>
			fs->winsect = sect;
    5706:	4643      	mov	r3, r8
    5708:	62e3      	str	r3, [r4, #44]	; 0x2c
    570a:	0020      	movs	r0, r4
    570c:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
    570e:	2801      	cmp	r0, #1
    5710:	d800      	bhi.n	5714 <mount_volume+0x328>
    5712:	e6f2      	b.n	54fa <mount_volume+0x10e>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    5714:	2804      	cmp	r0, #4
    5716:	d100      	bne.n	571a <mount_volume+0x32e>
    5718:	e6d8      	b.n	54cc <mount_volume+0xe0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    571a:	250d      	movs	r5, #13
    571c:	e69a      	b.n	5454 <mount_volume+0x68>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    571e:	2300      	movs	r3, #0
    5720:	2701      	movs	r7, #1
    5722:	7123      	strb	r3, [r4, #4]
	if (sect != fs->winsect) {	/* Window offset changed? */
    5724:	4653      	mov	r3, sl
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    5726:	427f      	negs	r7, r7
    5728:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    572a:	3301      	adds	r3, #1
    572c:	d046      	beq.n	57bc <mount_volume+0x3d0>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    572e:	7860      	ldrb	r0, [r4, #1]
    5730:	2301      	movs	r3, #1
    5732:	4652      	mov	r2, sl
    5734:	0029      	movs	r1, r5
    5736:	47b0      	blx	r6
    5738:	2800      	cmp	r0, #0
    573a:	d03d      	beq.n	57b8 <mount_volume+0x3cc>
			fs->winsect = sect;
    573c:	62e7      	str	r7, [r4, #44]	; 0x2c
    573e:	e7ca      	b.n	56d6 <mount_volume+0x2ea>
    5740:	20000b50 	.word	0x20000b50
    5744:	00008a51 	.word	0x00008a51
    5748:	00008a65 	.word	0x00008a65
    574c:	00008b95 	.word	0x00008b95
    5750:	00005135 	.word	0x00005135
    5754:	000091b5 	.word	0x000091b5
    5758:	0ffffff4 	.word	0x0ffffff4
    575c:	0000fff5 	.word	0x0000fff5
    5760:	00000ff5 	.word	0x00000ff5
    5764:	000001ff 	.word	0x000001ff
    5768:	20000b54 	.word	0x20000b54
    576c:	00000207 	.word	0x00000207
    5770:	00000206 	.word	0x00000206
    5774:	00000217 	.word	0x00000217
    5778:	00000216 	.word	0x00000216
    577c:	00000227 	.word	0x00000227
    5780:	00000226 	.word	0x00000226
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    5784:	2300      	movs	r3, #0
    5786:	2701      	movs	r7, #1
    5788:	7123      	strb	r3, [r4, #4]
	if (sect != fs->winsect) {	/* Window offset changed? */
    578a:	9b00      	ldr	r3, [sp, #0]
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    578c:	427f      	negs	r7, r7
    578e:	62e7      	str	r7, [r4, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    5790:	3301      	adds	r3, #1
    5792:	d00c      	beq.n	57ae <mount_volume+0x3c2>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5794:	7860      	ldrb	r0, [r4, #1]
    5796:	2301      	movs	r3, #1
    5798:	9a00      	ldr	r2, [sp, #0]
    579a:	0029      	movs	r1, r5
    579c:	47b0      	blx	r6
    579e:	2800      	cmp	r0, #0
    57a0:	d003      	beq.n	57aa <mount_volume+0x3be>
			fs->winsect = sect;
    57a2:	62e7      	str	r7, [r4, #44]	; 0x2c
    57a4:	e79a      	b.n	56dc <mount_volume+0x2f0>
    57a6:	62e7      	str	r7, [r4, #44]	; 0x2c
    57a8:	e792      	b.n	56d0 <mount_volume+0x2e4>
    57aa:	9b00      	ldr	r3, [sp, #0]
    57ac:	62e3      	str	r3, [r4, #44]	; 0x2c
    57ae:	0020      	movs	r0, r4
    57b0:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
    57b2:	2801      	cmp	r0, #1
    57b4:	d892      	bhi.n	56dc <mount_volume+0x2f0>
    57b6:	e6a0      	b.n	54fa <mount_volume+0x10e>
			fs->winsect = sect;
    57b8:	4653      	mov	r3, sl
    57ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    57bc:	0020      	movs	r0, r4
    57be:	47c8      	blx	r9
	} while (part == 0 && fmt >= 2 && ++i < 4);
    57c0:	2801      	cmp	r0, #1
    57c2:	d888      	bhi.n	56d6 <mount_volume+0x2ea>
    57c4:	e699      	b.n	54fa <mount_volume+0x10e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    57c6:	464b      	mov	r3, r9
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    57c8:	1975      	adds	r5, r6, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    57ca:	3002      	adds	r0, #2
		fs->volbase = bsect;							/* Volume start sector */
    57cc:	61e6      	str	r6, [r4, #28]
		fs->database = bsect + sysect;					/* Data start sector */
    57ce:	19f6      	adds	r6, r6, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    57d0:	6160      	str	r0, [r4, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    57d2:	6225      	str	r5, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    57d4:	62a6      	str	r6, [r4, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    57d6:	2b00      	cmp	r3, #0
    57d8:	d100      	bne.n	57dc <mount_volume+0x3f0>
    57da:	e66a      	b.n	54b2 <mount_volume+0xc6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    57dc:	4455      	add	r5, sl
    57de:	6265      	str	r5, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    57e0:	0040      	lsls	r0, r0, #1
    57e2:	2202      	movs	r2, #2
    57e4:	e716      	b.n	5614 <mount_volume+0x228>
	rv = ptr[1];
    57e6:	235b      	movs	r3, #91	; 0x5b
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    57e8:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    57ea:	1975      	adds	r5, r6, r5
		fs->database = bsect + sysect;					/* Data start sector */
    57ec:	19f7      	adds	r7, r6, r7
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    57ee:	6160      	str	r0, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
    57f0:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    57f2:	6225      	str	r5, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    57f4:	62a7      	str	r7, [r4, #40]	; 0x28
	rv = rv << 8 | ptr[0];
    57f6:	5ce2      	ldrb	r2, [r4, r3]
    57f8:	3b01      	subs	r3, #1
    57fa:	5ce3      	ldrb	r3, [r4, r3]
    57fc:	0212      	lsls	r2, r2, #8
    57fe:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    5800:	d000      	beq.n	5804 <mount_volume+0x418>
    5802:	e656      	b.n	54b2 <mount_volume+0xc6>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    5804:	464b      	mov	r3, r9
    5806:	2b00      	cmp	r3, #0
    5808:	d000      	beq.n	580c <mount_volume+0x420>
    580a:	e652      	b.n	54b2 <mount_volume+0xc6>
	rv = rv << 8 | ptr[2];
    580c:	335e      	adds	r3, #94	; 0x5e
    580e:	5ce2      	ldrb	r2, [r4, r3]
    5810:	0023      	movs	r3, r4
    5812:	335e      	adds	r3, #94	; 0x5e
    5814:	785b      	ldrb	r3, [r3, #1]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    5816:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[2];
    5818:	021b      	lsls	r3, r3, #8
    581a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    581c:	225d      	movs	r2, #93	; 0x5d
    581e:	5ca2      	ldrb	r2, [r4, r2]
    5820:	021b      	lsls	r3, r3, #8
    5822:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    5824:	225c      	movs	r2, #92	; 0x5c
    5826:	5ca2      	ldrb	r2, [r4, r2]
    5828:	021b      	lsls	r3, r3, #8
    582a:	4313      	orrs	r3, r2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    582c:	6263      	str	r3, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    582e:	4b39      	ldr	r3, [pc, #228]	; (5914 <mount_volume+0x528>)
    5830:	18c3      	adds	r3, r0, r3
    5832:	0a5b      	lsrs	r3, r3, #9
    5834:	4598      	cmp	r8, r3
    5836:	d200      	bcs.n	583a <mount_volume+0x44e>
    5838:	e63b      	b.n	54b2 <mount_volume+0xc6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    583a:	2301      	movs	r3, #1
    583c:	425b      	negs	r3, r3
    583e:	6123      	str	r3, [r4, #16]
    5840:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
    5842:	3381      	adds	r3, #129	; 0x81
    5844:	7163      	strb	r3, [r4, #5]
	rv = ptr[1];
    5846:	3b1f      	subs	r3, #31
	rv = rv << 8 | ptr[0];
    5848:	5ce2      	ldrb	r2, [r4, r3]
    584a:	3b01      	subs	r3, #1
    584c:	5ce3      	ldrb	r3, [r4, r3]
    584e:	0212      	lsls	r2, r2, #8
    5850:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    5852:	2b01      	cmp	r3, #1
    5854:	d001      	beq.n	585a <mount_volume+0x46e>
    5856:	2203      	movs	r2, #3
    5858:	e6e9      	b.n	562e <mount_volume+0x242>
			&& move_window(fs, bsect + 1) == FR_OK)
    585a:	1c71      	adds	r1, r6, #1
    585c:	0020      	movs	r0, r4
    585e:	4b2e      	ldr	r3, [pc, #184]	; (5918 <mount_volume+0x52c>)
    5860:	4798      	blx	r3
    5862:	2203      	movs	r2, #3
    5864:	2800      	cmp	r0, #0
    5866:	d000      	beq.n	586a <mount_volume+0x47e>
    5868:	e6e1      	b.n	562e <mount_volume+0x242>
			fs->fsi_flag = 0;
    586a:	464b      	mov	r3, r9
    586c:	7163      	strb	r3, [r4, #5]
	rv = ptr[1];
    586e:	4b2b      	ldr	r3, [pc, #172]	; (591c <mount_volume+0x530>)
	rv = rv << 8 | ptr[0];
    5870:	5ce1      	ldrb	r1, [r4, r3]
    5872:	4b2b      	ldr	r3, [pc, #172]	; (5920 <mount_volume+0x534>)
    5874:	0209      	lsls	r1, r1, #8
    5876:	5ce3      	ldrb	r3, [r4, r3]
    5878:	430b      	orrs	r3, r1
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    587a:	492a      	ldr	r1, [pc, #168]	; (5924 <mount_volume+0x538>)
    587c:	b21b      	sxth	r3, r3
    587e:	428b      	cmp	r3, r1
    5880:	d000      	beq.n	5884 <mount_volume+0x498>
    5882:	e6d4      	b.n	562e <mount_volume+0x242>
	rv = rv << 8 | ptr[2];
    5884:	2332      	movs	r3, #50	; 0x32
    5886:	5ce2      	ldrb	r2, [r4, r3]
    5888:	3301      	adds	r3, #1
    588a:	5ce3      	ldrb	r3, [r4, r3]
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    588c:	4926      	ldr	r1, [pc, #152]	; (5928 <mount_volume+0x53c>)
	rv = rv << 8 | ptr[2];
    588e:	021b      	lsls	r3, r3, #8
    5890:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    5892:	2231      	movs	r2, #49	; 0x31
    5894:	5ca2      	ldrb	r2, [r4, r2]
    5896:	021b      	lsls	r3, r3, #8
    5898:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    589a:	2230      	movs	r2, #48	; 0x30
    589c:	5ca2      	ldrb	r2, [r4, r2]
    589e:	021b      	lsls	r3, r3, #8
    58a0:	4313      	orrs	r3, r2
    58a2:	2203      	movs	r2, #3
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    58a4:	428b      	cmp	r3, r1
    58a6:	d000      	beq.n	58aa <mount_volume+0x4be>
    58a8:	e6c1      	b.n	562e <mount_volume+0x242>
	rv = rv << 8 | ptr[2];
    58aa:	4b20      	ldr	r3, [pc, #128]	; (592c <mount_volume+0x540>)
    58ac:	5ce1      	ldrb	r1, [r4, r3]
    58ae:	18e3      	adds	r3, r4, r3
    58b0:	785b      	ldrb	r3, [r3, #1]
    58b2:	021b      	lsls	r3, r3, #8
    58b4:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[1];
    58b6:	491e      	ldr	r1, [pc, #120]	; (5930 <mount_volume+0x544>)
    58b8:	021b      	lsls	r3, r3, #8
    58ba:	5c61      	ldrb	r1, [r4, r1]
    58bc:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[0];
    58be:	2185      	movs	r1, #133	; 0x85
    58c0:	0089      	lsls	r1, r1, #2
    58c2:	5c61      	ldrb	r1, [r4, r1]
    58c4:	021b      	lsls	r3, r3, #8
    58c6:	430b      	orrs	r3, r1
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    58c8:	491a      	ldr	r1, [pc, #104]	; (5934 <mount_volume+0x548>)
    58ca:	428b      	cmp	r3, r1
    58cc:	d000      	beq.n	58d0 <mount_volume+0x4e4>
    58ce:	e6ae      	b.n	562e <mount_volume+0x242>
	rv = rv << 8 | ptr[2];
    58d0:	4b19      	ldr	r3, [pc, #100]	; (5938 <mount_volume+0x54c>)
    58d2:	5ce1      	ldrb	r1, [r4, r3]
    58d4:	18e3      	adds	r3, r4, r3
    58d6:	785b      	ldrb	r3, [r3, #1]
    58d8:	021b      	lsls	r3, r3, #8
    58da:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[1];
    58dc:	4917      	ldr	r1, [pc, #92]	; (593c <mount_volume+0x550>)
    58de:	021b      	lsls	r3, r3, #8
    58e0:	5c61      	ldrb	r1, [r4, r1]
    58e2:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[0];
    58e4:	2186      	movs	r1, #134	; 0x86
    58e6:	0089      	lsls	r1, r1, #2
    58e8:	5c61      	ldrb	r1, [r4, r1]
    58ea:	021b      	lsls	r3, r3, #8
    58ec:	430b      	orrs	r3, r1
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    58ee:	6123      	str	r3, [r4, #16]
	rv = rv << 8 | ptr[2];
    58f0:	4b13      	ldr	r3, [pc, #76]	; (5940 <mount_volume+0x554>)
    58f2:	5ce1      	ldrb	r1, [r4, r3]
    58f4:	18e3      	adds	r3, r4, r3
    58f6:	785b      	ldrb	r3, [r3, #1]
    58f8:	021b      	lsls	r3, r3, #8
    58fa:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[1];
    58fc:	4911      	ldr	r1, [pc, #68]	; (5944 <mount_volume+0x558>)
    58fe:	021b      	lsls	r3, r3, #8
    5900:	5c61      	ldrb	r1, [r4, r1]
    5902:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[0];
    5904:	2187      	movs	r1, #135	; 0x87
    5906:	0089      	lsls	r1, r1, #2
    5908:	5c61      	ldrb	r1, [r4, r1]
    590a:	021b      	lsls	r3, r3, #8
    590c:	430b      	orrs	r3, r1
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    590e:	60e3      	str	r3, [r4, #12]
    5910:	e68d      	b.n	562e <mount_volume+0x242>
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	000001ff 	.word	0x000001ff
    5918:	00005255 	.word	0x00005255
    591c:	0000022f 	.word	0x0000022f
    5920:	0000022e 	.word	0x0000022e
    5924:	ffffaa55 	.word	0xffffaa55
    5928:	41615252 	.word	0x41615252
    592c:	00000216 	.word	0x00000216
    5930:	00000215 	.word	0x00000215
    5934:	61417272 	.word	0x61417272
    5938:	0000021a 	.word	0x0000021a
    593c:	00000219 	.word	0x00000219
    5940:	0000021e 	.word	0x0000021e
    5944:	0000021d 	.word	0x0000021d

00005948 <put_fat.part.8>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
    5948:	b5f0      	push	{r4, r5, r6, r7, lr}
    594a:	4645      	mov	r5, r8
    594c:	46de      	mov	lr, fp
    594e:	4657      	mov	r7, sl
    5950:	464e      	mov	r6, r9
    5952:	b5e0      	push	{r5, r6, r7, lr}
		switch (fs->fs_type) {
    5954:	7803      	ldrb	r3, [r0, #0]
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
    5956:	b083      	sub	sp, #12
    5958:	0004      	movs	r4, r0
    595a:	000d      	movs	r5, r1
    595c:	4690      	mov	r8, r2
		switch (fs->fs_type) {
    595e:	2b02      	cmp	r3, #2
    5960:	d100      	bne.n	5964 <put_fat.part.8+0x1c>
    5962:	e09c      	b.n	5a9e <put_fat.part.8+0x156>
    5964:	2b03      	cmp	r3, #3
    5966:	d069      	beq.n	5a3c <put_fat.part.8+0xf4>
	FRESULT res = FR_INT_ERR;
    5968:	2002      	movs	r0, #2
		switch (fs->fs_type) {
    596a:	2b01      	cmp	r3, #1
    596c:	d006      	beq.n	597c <put_fat.part.8+0x34>
}
    596e:	b003      	add	sp, #12
    5970:	bc3c      	pop	{r2, r3, r4, r5}
    5972:	4690      	mov	r8, r2
    5974:	4699      	mov	r9, r3
    5976:	46a2      	mov	sl, r4
    5978:	46ab      	mov	fp, r5
    597a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    597c:	6a22      	ldr	r2, [r4, #32]
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    597e:	084e      	lsrs	r6, r1, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5980:	4691      	mov	r9, r2
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    5982:	1873      	adds	r3, r6, r1
    5984:	9301      	str	r3, [sp, #4]
	if (sect != fs->winsect) {	/* Window offset changed? */
    5986:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5988:	0a5b      	lsrs	r3, r3, #9
    598a:	4499      	add	r9, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    598c:	4591      	cmp	r9, r2
    598e:	d100      	bne.n	5992 <put_fat.part.8+0x4a>
    5990:	e11b      	b.n	5bca <put_fat.part.8+0x282>
    5992:	0027      	movs	r7, r4
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5994:	7923      	ldrb	r3, [r4, #4]
    5996:	3730      	adds	r7, #48	; 0x30
    5998:	2b00      	cmp	r3, #0
    599a:	d000      	beq.n	599e <put_fat.part.8+0x56>
    599c:	e0a6      	b.n	5aec <put_fat.part.8+0x1a4>
    599e:	46ba      	mov	sl, r7
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    59a0:	0039      	movs	r1, r7
    59a2:	7860      	ldrb	r0, [r4, #1]
    59a4:	2301      	movs	r3, #1
    59a6:	464a      	mov	r2, r9
    59a8:	4f91      	ldr	r7, [pc, #580]	; (5bf0 <put_fat.part.8+0x2a8>)
    59aa:	47b8      	blx	r7
    59ac:	2800      	cmp	r0, #0
    59ae:	d000      	beq.n	59b2 <put_fat.part.8+0x6a>
    59b0:	e0e8      	b.n	5b84 <put_fat.part.8+0x23c>
			fs->winsect = sect;
    59b2:	464b      	mov	r3, r9
    59b4:	62e3      	str	r3, [r4, #44]	; 0x2c
			p = fs->win + bc++ % SS(fs);
    59b6:	9b01      	ldr	r3, [sp, #4]
    59b8:	05de      	lsls	r6, r3, #23
    59ba:	1c5f      	adds	r7, r3, #1
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    59bc:	2301      	movs	r3, #1
			p = fs->win + bc++ % SS(fs);
    59be:	0df6      	lsrs	r6, r6, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    59c0:	401d      	ands	r5, r3
			p = fs->win + bc++ % SS(fs);
    59c2:	4456      	add	r6, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    59c4:	46ab      	mov	fp, r5
    59c6:	2d00      	cmp	r5, #0
    59c8:	d100      	bne.n	59cc <put_fat.part.8+0x84>
    59ca:	e0e0      	b.n	5b8e <put_fat.part.8+0x246>
    59cc:	220f      	movs	r2, #15
    59ce:	7831      	ldrb	r1, [r6, #0]
    59d0:	4011      	ands	r1, r2
    59d2:	4642      	mov	r2, r8
    59d4:	0112      	lsls	r2, r2, #4
    59d6:	430a      	orrs	r2, r1
    59d8:	7032      	strb	r2, [r6, #0]
			fs->wflag = 1;
    59da:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    59dc:	6a23      	ldr	r3, [r4, #32]
    59de:	0a7e      	lsrs	r6, r7, #9
    59e0:	469c      	mov	ip, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    59e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    59e4:	4466      	add	r6, ip
	if (sect != fs->winsect) {	/* Window offset changed? */
    59e6:	42b2      	cmp	r2, r6
    59e8:	d100      	bne.n	59ec <put_fat.part.8+0xa4>
    59ea:	e0fc      	b.n	5be6 <put_fat.part.8+0x29e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    59ec:	7860      	ldrb	r0, [r4, #1]
    59ee:	2301      	movs	r3, #1
    59f0:	4651      	mov	r1, sl
    59f2:	4d80      	ldr	r5, [pc, #512]	; (5bf4 <put_fat.part.8+0x2ac>)
    59f4:	47a8      	blx	r5
    59f6:	2800      	cmp	r0, #0
    59f8:	d000      	beq.n	59fc <put_fat.part.8+0xb4>
    59fa:	e0c6      	b.n	5b8a <put_fat.part.8+0x242>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    59fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    59fe:	6a23      	ldr	r3, [r4, #32]
    5a00:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5a02:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5a04:	1ad3      	subs	r3, r2, r3
    5a06:	428b      	cmp	r3, r1
    5a08:	d203      	bcs.n	5a12 <put_fat.part.8+0xca>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5a0a:	78e3      	ldrb	r3, [r4, #3]
    5a0c:	2b02      	cmp	r3, #2
    5a0e:	d100      	bne.n	5a12 <put_fat.part.8+0xca>
    5a10:	e0e3      	b.n	5bda <put_fat.part.8+0x292>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5a12:	7860      	ldrb	r0, [r4, #1]
    5a14:	2301      	movs	r3, #1
    5a16:	0032      	movs	r2, r6
    5a18:	4651      	mov	r1, sl
    5a1a:	4d75      	ldr	r5, [pc, #468]	; (5bf0 <put_fat.part.8+0x2a8>)
    5a1c:	47a8      	blx	r5
    5a1e:	2800      	cmp	r0, #0
    5a20:	d000      	beq.n	5a24 <put_fat.part.8+0xdc>
    5a22:	e0af      	b.n	5b84 <put_fat.part.8+0x23c>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    5a24:	465b      	mov	r3, fp
			p = fs->win + bc % SS(fs);
    5a26:	05ff      	lsls	r7, r7, #23
    5a28:	0dff      	lsrs	r7, r7, #23
			fs->winsect = sect;
    5a2a:	62e6      	str	r6, [r4, #44]	; 0x2c
			p = fs->win + bc % SS(fs);
    5a2c:	4457      	add	r7, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d100      	bne.n	5a34 <put_fat.part.8+0xec>
    5a32:	e0ba      	b.n	5baa <put_fat.part.8+0x262>
    5a34:	4643      	mov	r3, r8
    5a36:	091b      	lsrs	r3, r3, #4
    5a38:	b2db      	uxtb	r3, r3
    5a3a:	e0bd      	b.n	5bb8 <put_fat.part.8+0x270>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    5a3c:	6a03      	ldr	r3, [r0, #32]
    5a3e:	09ce      	lsrs	r6, r1, #7
    5a40:	469c      	mov	ip, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5a42:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    5a44:	4466      	add	r6, ip
    5a46:	46b3      	mov	fp, r6
	if (sect != fs->winsect) {	/* Window offset changed? */
    5a48:	4296      	cmp	r6, r2
    5a4a:	d100      	bne.n	5a4e <put_fat.part.8+0x106>
    5a4c:	e0c1      	b.n	5bd2 <put_fat.part.8+0x28a>
    5a4e:	0007      	movs	r7, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5a50:	7903      	ldrb	r3, [r0, #4]
    5a52:	3730      	adds	r7, #48	; 0x30
    5a54:	2b00      	cmp	r3, #0
    5a56:	d17b      	bne.n	5b50 <put_fat.part.8+0x208>
    5a58:	46b9      	mov	r9, r7
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5a5a:	0039      	movs	r1, r7
    5a5c:	7860      	ldrb	r0, [r4, #1]
    5a5e:	2301      	movs	r3, #1
    5a60:	465a      	mov	r2, fp
    5a62:	4f63      	ldr	r7, [pc, #396]	; (5bf0 <put_fat.part.8+0x2a8>)
    5a64:	47b8      	blx	r7
    5a66:	2800      	cmp	r0, #0
    5a68:	d000      	beq.n	5a6c <put_fat.part.8+0x124>
    5a6a:	e08b      	b.n	5b84 <put_fat.part.8+0x23c>
			fs->winsect = sect;
    5a6c:	465b      	mov	r3, fp
    5a6e:	62e3      	str	r3, [r4, #44]	; 0x2c
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    5a70:	22fe      	movs	r2, #254	; 0xfe
    5a72:	4643      	mov	r3, r8
    5a74:	0052      	lsls	r2, r2, #1
    5a76:	00ad      	lsls	r5, r5, #2
    5a78:	4015      	ands	r5, r2
    5a7a:	444d      	add	r5, r9
	rv = rv << 8 | ptr[2];
    5a7c:	78ea      	ldrb	r2, [r5, #3]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    5a7e:	011b      	lsls	r3, r3, #4
    5a80:	0912      	lsrs	r2, r2, #4
    5a82:	091b      	lsrs	r3, r3, #4
    5a84:	0712      	lsls	r2, r2, #28
    5a86:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
    5a88:	0a13      	lsrs	r3, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
    5a8a:	706b      	strb	r3, [r5, #1]
    5a8c:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
    5a8e:	70ab      	strb	r3, [r5, #2]
			fs->wflag = 1;
    5a90:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
    5a92:	702a      	strb	r2, [r5, #0]
	*ptr++ = (BYTE)val; val >>= 8;
    5a94:	0e12      	lsrs	r2, r2, #24
	*ptr++ = (BYTE)val;
    5a96:	70ea      	strb	r2, [r5, #3]
			fs->wflag = 1;
    5a98:	2000      	movs	r0, #0
    5a9a:	7123      	strb	r3, [r4, #4]
    5a9c:	e767      	b.n	596e <put_fat.part.8+0x26>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    5a9e:	6a03      	ldr	r3, [r0, #32]
    5aa0:	0a0e      	lsrs	r6, r1, #8
    5aa2:	469c      	mov	ip, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5aa4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    5aa6:	4466      	add	r6, ip
    5aa8:	46b3      	mov	fp, r6
	if (sect != fs->winsect) {	/* Window offset changed? */
    5aaa:	4296      	cmp	r6, r2
    5aac:	d100      	bne.n	5ab0 <put_fat.part.8+0x168>
    5aae:	e088      	b.n	5bc2 <put_fat.part.8+0x27a>
    5ab0:	0007      	movs	r7, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5ab2:	7903      	ldrb	r3, [r0, #4]
    5ab4:	3730      	adds	r7, #48	; 0x30
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d132      	bne.n	5b20 <put_fat.part.8+0x1d8>
    5aba:	46b9      	mov	r9, r7
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5abc:	0039      	movs	r1, r7
    5abe:	7860      	ldrb	r0, [r4, #1]
    5ac0:	2301      	movs	r3, #1
    5ac2:	465a      	mov	r2, fp
    5ac4:	4f4a      	ldr	r7, [pc, #296]	; (5bf0 <put_fat.part.8+0x2a8>)
    5ac6:	47b8      	blx	r7
    5ac8:	2800      	cmp	r0, #0
    5aca:	d15b      	bne.n	5b84 <put_fat.part.8+0x23c>
			fs->winsect = sect;
    5acc:	465b      	mov	r3, fp
    5ace:	62e3      	str	r3, [r4, #44]	; 0x2c
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    5ad0:	23ff      	movs	r3, #255	; 0xff
    5ad2:	006d      	lsls	r5, r5, #1
    5ad4:	005b      	lsls	r3, r3, #1
    5ad6:	401d      	ands	r5, r3
	*ptr++ = (BYTE)val; val >>= 8;
    5ad8:	4643      	mov	r3, r8
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    5ada:	444d      	add	r5, r9
	*ptr++ = (BYTE)val; val >>= 8;
    5adc:	702b      	strb	r3, [r5, #0]
    5ade:	4643      	mov	r3, r8
    5ae0:	0a1a      	lsrs	r2, r3, #8
			fs->wflag = 1;
    5ae2:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
    5ae4:	706a      	strb	r2, [r5, #1]
			fs->wflag = 1;
    5ae6:	2000      	movs	r0, #0
    5ae8:	7123      	strb	r3, [r4, #4]
    5aea:	e740      	b.n	596e <put_fat.part.8+0x26>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5aec:	7860      	ldrb	r0, [r4, #1]
    5aee:	2301      	movs	r3, #1
    5af0:	0039      	movs	r1, r7
    5af2:	4e40      	ldr	r6, [pc, #256]	; (5bf4 <put_fat.part.8+0x2ac>)
    5af4:	46ba      	mov	sl, r7
    5af6:	47b0      	blx	r6
    5af8:	2800      	cmp	r0, #0
    5afa:	d146      	bne.n	5b8a <put_fat.part.8+0x242>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5afe:	6a23      	ldr	r3, [r4, #32]
    5b00:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5b02:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5b04:	1ad3      	subs	r3, r2, r3
    5b06:	428b      	cmp	r3, r1
    5b08:	d300      	bcc.n	5b0c <put_fat.part.8+0x1c4>
    5b0a:	e748      	b.n	599e <put_fat.part.8+0x56>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5b0c:	78e3      	ldrb	r3, [r4, #3]
    5b0e:	2b02      	cmp	r3, #2
    5b10:	d000      	beq.n	5b14 <put_fat.part.8+0x1cc>
    5b12:	e744      	b.n	599e <put_fat.part.8+0x56>
    5b14:	1852      	adds	r2, r2, r1
    5b16:	7860      	ldrb	r0, [r4, #1]
    5b18:	3b01      	subs	r3, #1
    5b1a:	0039      	movs	r1, r7
    5b1c:	47b0      	blx	r6
    5b1e:	e73f      	b.n	59a0 <put_fat.part.8+0x58>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5b20:	7840      	ldrb	r0, [r0, #1]
    5b22:	2301      	movs	r3, #1
    5b24:	0039      	movs	r1, r7
    5b26:	4e33      	ldr	r6, [pc, #204]	; (5bf4 <put_fat.part.8+0x2ac>)
    5b28:	46b9      	mov	r9, r7
    5b2a:	47b0      	blx	r6
    5b2c:	2800      	cmp	r0, #0
    5b2e:	d12c      	bne.n	5b8a <put_fat.part.8+0x242>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5b30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5b32:	6a23      	ldr	r3, [r4, #32]
    5b34:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5b36:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5b38:	1ad3      	subs	r3, r2, r3
    5b3a:	428b      	cmp	r3, r1
    5b3c:	d2bd      	bcs.n	5aba <put_fat.part.8+0x172>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5b3e:	78e3      	ldrb	r3, [r4, #3]
    5b40:	2b02      	cmp	r3, #2
    5b42:	d1ba      	bne.n	5aba <put_fat.part.8+0x172>
    5b44:	1852      	adds	r2, r2, r1
    5b46:	7860      	ldrb	r0, [r4, #1]
    5b48:	3b01      	subs	r3, #1
    5b4a:	0039      	movs	r1, r7
    5b4c:	47b0      	blx	r6
    5b4e:	e7b5      	b.n	5abc <put_fat.part.8+0x174>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5b50:	7840      	ldrb	r0, [r0, #1]
    5b52:	2301      	movs	r3, #1
    5b54:	0039      	movs	r1, r7
    5b56:	4e27      	ldr	r6, [pc, #156]	; (5bf4 <put_fat.part.8+0x2ac>)
    5b58:	46b9      	mov	r9, r7
    5b5a:	47b0      	blx	r6
    5b5c:	2800      	cmp	r0, #0
    5b5e:	d114      	bne.n	5b8a <put_fat.part.8+0x242>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5b60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    5b62:	6a23      	ldr	r3, [r4, #32]
    5b64:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5b66:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5b68:	1ad3      	subs	r3, r2, r3
    5b6a:	428b      	cmp	r3, r1
    5b6c:	d300      	bcc.n	5b70 <put_fat.part.8+0x228>
    5b6e:	e773      	b.n	5a58 <put_fat.part.8+0x110>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5b70:	78e3      	ldrb	r3, [r4, #3]
    5b72:	2b02      	cmp	r3, #2
    5b74:	d000      	beq.n	5b78 <put_fat.part.8+0x230>
    5b76:	e76f      	b.n	5a58 <put_fat.part.8+0x110>
    5b78:	1852      	adds	r2, r2, r1
    5b7a:	7860      	ldrb	r0, [r4, #1]
    5b7c:	3b01      	subs	r3, #1
    5b7e:	0039      	movs	r1, r7
    5b80:	47b0      	blx	r6
    5b82:	e76a      	b.n	5a5a <put_fat.part.8+0x112>
			fs->winsect = sect;
    5b84:	2301      	movs	r3, #1
    5b86:	425b      	negs	r3, r3
    5b88:	62e3      	str	r3, [r4, #44]	; 0x2c
    5b8a:	2001      	movs	r0, #1
    5b8c:	e6ef      	b.n	596e <put_fat.part.8+0x26>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    5b8e:	4642      	mov	r2, r8
    5b90:	7032      	strb	r2, [r6, #0]
			fs->wflag = 1;
    5b92:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5b94:	6a23      	ldr	r3, [r4, #32]
    5b96:	0a7e      	lsrs	r6, r7, #9
    5b98:	469c      	mov	ip, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5b9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    5b9c:	4466      	add	r6, ip
	if (sect != fs->winsect) {	/* Window offset changed? */
    5b9e:	42b2      	cmp	r2, r6
    5ba0:	d000      	beq.n	5ba4 <put_fat.part.8+0x25c>
    5ba2:	e723      	b.n	59ec <put_fat.part.8+0xa4>
			p = fs->win + bc % SS(fs);
    5ba4:	05ff      	lsls	r7, r7, #23
    5ba6:	0dff      	lsrs	r7, r7, #23
    5ba8:	4457      	add	r7, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    5baa:	4642      	mov	r2, r8
    5bac:	210f      	movs	r1, #15
    5bae:	783b      	ldrb	r3, [r7, #0]
    5bb0:	0a12      	lsrs	r2, r2, #8
    5bb2:	438b      	bics	r3, r1
    5bb4:	4011      	ands	r1, r2
    5bb6:	430b      	orrs	r3, r1
    5bb8:	703b      	strb	r3, [r7, #0]
			fs->wflag = 1;
    5bba:	2301      	movs	r3, #1
    5bbc:	2000      	movs	r0, #0
    5bbe:	7123      	strb	r3, [r4, #4]
    5bc0:	e6d5      	b.n	596e <put_fat.part.8+0x26>
    5bc2:	2330      	movs	r3, #48	; 0x30
    5bc4:	4699      	mov	r9, r3
    5bc6:	4481      	add	r9, r0
    5bc8:	e782      	b.n	5ad0 <put_fat.part.8+0x188>
    5bca:	2330      	movs	r3, #48	; 0x30
    5bcc:	469a      	mov	sl, r3
    5bce:	44a2      	add	sl, r4
    5bd0:	e6f1      	b.n	59b6 <put_fat.part.8+0x6e>
    5bd2:	2330      	movs	r3, #48	; 0x30
    5bd4:	4699      	mov	r9, r3
    5bd6:	4481      	add	r9, r0
    5bd8:	e74a      	b.n	5a70 <put_fat.part.8+0x128>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5bda:	1852      	adds	r2, r2, r1
    5bdc:	7860      	ldrb	r0, [r4, #1]
    5bde:	3b01      	subs	r3, #1
    5be0:	4651      	mov	r1, sl
    5be2:	47a8      	blx	r5
    5be4:	e715      	b.n	5a12 <put_fat.part.8+0xca>
			p = fs->win + bc % SS(fs);
    5be6:	05ff      	lsls	r7, r7, #23
    5be8:	0dff      	lsrs	r7, r7, #23
    5bea:	4457      	add	r7, sl
    5bec:	e722      	b.n	5a34 <put_fat.part.8+0xec>
    5bee:	46c0      	nop			; (mov r8, r8)
    5bf0:	00008b95 	.word	0x00008b95
    5bf4:	00008c85 	.word	0x00008c85

00005bf8 <remove_chain>:
{
    5bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bfa:	464e      	mov	r6, r9
    5bfc:	46de      	mov	lr, fp
    5bfe:	4657      	mov	r7, sl
    5c00:	4645      	mov	r5, r8
    5c02:	b5e0      	push	{r5, r6, r7, lr}
    5c04:	000c      	movs	r4, r1
    5c06:	b083      	sub	sp, #12
    5c08:	4681      	mov	r9, r0
    5c0a:	0011      	movs	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    5c0c:	2c01      	cmp	r4, #1
    5c0e:	d903      	bls.n	5c18 <remove_chain+0x20>
	FATFS *fs = obj->fs;
    5c10:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    5c12:	696b      	ldr	r3, [r5, #20]
    5c14:	429c      	cmp	r4, r3
    5c16:	d307      	bcc.n	5c28 <remove_chain+0x30>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    5c18:	2002      	movs	r0, #2
}
    5c1a:	b003      	add	sp, #12
    5c1c:	bc3c      	pop	{r2, r3, r4, r5}
    5c1e:	4690      	mov	r8, r2
    5c20:	4699      	mov	r9, r3
    5c22:	46a2      	mov	sl, r4
    5c24:	46ab      	mov	fp, r5
    5c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    5c28:	2a00      	cmp	r2, #0
    5c2a:	d00e      	beq.n	5c4a <remove_chain+0x52>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    5c2c:	2a01      	cmp	r2, #1
    5c2e:	d9f3      	bls.n	5c18 <remove_chain+0x20>
    5c30:	4293      	cmp	r3, r2
    5c32:	d9f1      	bls.n	5c18 <remove_chain+0x20>
    5c34:	2201      	movs	r2, #1
    5c36:	0028      	movs	r0, r5
    5c38:	4252      	negs	r2, r2
    5c3a:	4ba9      	ldr	r3, [pc, #676]	; (5ee0 <remove_chain+0x2e8>)
    5c3c:	4798      	blx	r3
		if (res != FR_OK) return res;
    5c3e:	2800      	cmp	r0, #0
    5c40:	d1eb      	bne.n	5c1a <remove_chain+0x22>
    5c42:	464b      	mov	r3, r9
    5c44:	681e      	ldr	r6, [r3, #0]
    5c46:	6973      	ldr	r3, [r6, #20]
    5c48:	e000      	b.n	5c4c <remove_chain+0x54>
    5c4a:	002e      	movs	r6, r5
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5c4c:	4aa5      	ldr	r2, [pc, #660]	; (5ee4 <remove_chain+0x2ec>)
    5c4e:	4693      	mov	fp, r2
    5c50:	464a      	mov	r2, r9
    5c52:	9200      	str	r2, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    5c54:	42a3      	cmp	r3, r4
    5c56:	d9df      	bls.n	5c18 <remove_chain+0x20>
		switch (fs->fs_type) {
    5c58:	7833      	ldrb	r3, [r6, #0]
    5c5a:	2b02      	cmp	r3, #2
    5c5c:	d054      	beq.n	5d08 <remove_chain+0x110>
    5c5e:	2b03      	cmp	r3, #3
    5c60:	d100      	bne.n	5c64 <remove_chain+0x6c>
    5c62:	e09d      	b.n	5da0 <remove_chain+0x1a8>
    5c64:	2b01      	cmp	r3, #1
    5c66:	d1d7      	bne.n	5c18 <remove_chain+0x20>
			bc = (UINT)clst; bc += bc / 2;
    5c68:	0863      	lsrs	r3, r4, #1
    5c6a:	4698      	mov	r8, r3
    5c6c:	44a0      	add	r8, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    5c6e:	4642      	mov	r2, r8
    5c70:	0a52      	lsrs	r2, r2, #9
    5c72:	4691      	mov	r9, r2
    5c74:	6a33      	ldr	r3, [r6, #32]
	if (sect != fs->winsect) {	/* Window offset changed? */
    5c76:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    5c78:	4499      	add	r9, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5c7a:	4591      	cmp	r9, r2
    5c7c:	d013      	beq.n	5ca6 <remove_chain+0xae>
    5c7e:	2130      	movs	r1, #48	; 0x30
    5c80:	468a      	mov	sl, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5c82:	7933      	ldrb	r3, [r6, #4]
    5c84:	44b2      	add	sl, r6
    5c86:	2b00      	cmp	r3, #0
    5c88:	d000      	beq.n	5c8c <remove_chain+0x94>
    5c8a:	e0eb      	b.n	5e64 <remove_chain+0x26c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5c8c:	7870      	ldrb	r0, [r6, #1]
    5c8e:	2301      	movs	r3, #1
    5c90:	464a      	mov	r2, r9
    5c92:	4651      	mov	r1, sl
    5c94:	4f93      	ldr	r7, [pc, #588]	; (5ee4 <remove_chain+0x2ec>)
    5c96:	47b8      	blx	r7
    5c98:	2800      	cmp	r0, #0
    5c9a:	d000      	beq.n	5c9e <remove_chain+0xa6>
    5c9c:	e0aa      	b.n	5df4 <remove_chain+0x1fc>
			fs->winsect = sect;
    5c9e:	464b      	mov	r3, r9
    5ca0:	464a      	mov	r2, r9
    5ca2:	62f3      	str	r3, [r6, #44]	; 0x2c
    5ca4:	6a33      	ldr	r3, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    5ca6:	2101      	movs	r1, #1
    5ca8:	4441      	add	r1, r8
    5caa:	4689      	mov	r9, r1
    5cac:	4641      	mov	r1, r8
    5cae:	05c9      	lsls	r1, r1, #23
    5cb0:	0dc9      	lsrs	r1, r1, #23
    5cb2:	1871      	adds	r1, r6, r1
    5cb4:	3130      	adds	r1, #48	; 0x30
    5cb6:	7809      	ldrb	r1, [r1, #0]
    5cb8:	9101      	str	r1, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    5cba:	4649      	mov	r1, r9
    5cbc:	0a49      	lsrs	r1, r1, #9
    5cbe:	4688      	mov	r8, r1
    5cc0:	4498      	add	r8, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5cc2:	4590      	cmp	r8, r2
    5cc4:	d011      	beq.n	5cea <remove_chain+0xf2>
    5cc6:	2130      	movs	r1, #48	; 0x30
    5cc8:	468a      	mov	sl, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5cca:	7933      	ldrb	r3, [r6, #4]
    5ccc:	44b2      	add	sl, r6
    5cce:	2b00      	cmp	r3, #0
    5cd0:	d000      	beq.n	5cd4 <remove_chain+0xdc>
    5cd2:	e0eb      	b.n	5eac <remove_chain+0x2b4>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5cd4:	7870      	ldrb	r0, [r6, #1]
    5cd6:	2301      	movs	r3, #1
    5cd8:	4642      	mov	r2, r8
    5cda:	4651      	mov	r1, sl
    5cdc:	4f81      	ldr	r7, [pc, #516]	; (5ee4 <remove_chain+0x2ec>)
    5cde:	47b8      	blx	r7
    5ce0:	2800      	cmp	r0, #0
    5ce2:	d000      	beq.n	5ce6 <remove_chain+0xee>
    5ce4:	e086      	b.n	5df4 <remove_chain+0x1fc>
			fs->winsect = sect;
    5ce6:	4643      	mov	r3, r8
    5ce8:	62f3      	str	r3, [r6, #44]	; 0x2c
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    5cea:	464b      	mov	r3, r9
    5cec:	05db      	lsls	r3, r3, #23
    5cee:	0ddb      	lsrs	r3, r3, #23
    5cf0:	18f6      	adds	r6, r6, r3
    5cf2:	3630      	adds	r6, #48	; 0x30
    5cf4:	7833      	ldrb	r3, [r6, #0]
    5cf6:	9a01      	ldr	r2, [sp, #4]
    5cf8:	021b      	lsls	r3, r3, #8
    5cfa:	4313      	orrs	r3, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    5cfc:	07e2      	lsls	r2, r4, #31
    5cfe:	d476      	bmi.n	5dee <remove_chain+0x1f6>
    5d00:	051b      	lsls	r3, r3, #20
    5d02:	0d1b      	lsrs	r3, r3, #20
    5d04:	4698      	mov	r8, r3
    5d06:	e021      	b.n	5d4c <remove_chain+0x154>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    5d08:	6a32      	ldr	r2, [r6, #32]
    5d0a:	0a23      	lsrs	r3, r4, #8
    5d0c:	4690      	mov	r8, r2
	if (sect != fs->winsect) {	/* Window offset changed? */
    5d0e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    5d10:	4498      	add	r8, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5d12:	4590      	cmp	r8, r2
    5d14:	d100      	bne.n	5d18 <remove_chain+0x120>
    5d16:	e0bf      	b.n	5e98 <remove_chain+0x2a0>
    5d18:	2130      	movs	r1, #48	; 0x30
    5d1a:	4689      	mov	r9, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5d1c:	7933      	ldrb	r3, [r6, #4]
    5d1e:	44b1      	add	r9, r6
    5d20:	2b00      	cmp	r3, #0
    5d22:	d000      	beq.n	5d26 <remove_chain+0x12e>
    5d24:	e084      	b.n	5e30 <remove_chain+0x238>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5d26:	7870      	ldrb	r0, [r6, #1]
    5d28:	2301      	movs	r3, #1
    5d2a:	4642      	mov	r2, r8
    5d2c:	4649      	mov	r1, r9
    5d2e:	47d8      	blx	fp
    5d30:	2800      	cmp	r0, #0
    5d32:	d15f      	bne.n	5df4 <remove_chain+0x1fc>
			fs->winsect = sect;
    5d34:	4643      	mov	r3, r8
    5d36:	62f3      	str	r3, [r6, #44]	; 0x2c
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    5d38:	23ff      	movs	r3, #255	; 0xff
    5d3a:	0061      	lsls	r1, r4, #1
    5d3c:	005b      	lsls	r3, r3, #1
    5d3e:	4019      	ands	r1, r3
    5d40:	4449      	add	r1, r9
	rv = rv << 8 | ptr[0];
    5d42:	784b      	ldrb	r3, [r1, #1]
    5d44:	780a      	ldrb	r2, [r1, #0]
    5d46:	021b      	lsls	r3, r3, #8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    5d48:	431a      	orrs	r2, r3
    5d4a:	4690      	mov	r8, r2
		if (nxt == 0) break;				/* Empty cluster? */
    5d4c:	4643      	mov	r3, r8
    5d4e:	2b00      	cmp	r3, #0
    5d50:	d100      	bne.n	5d54 <remove_chain+0x15c>
    5d52:	e0a9      	b.n	5ea8 <remove_chain+0x2b0>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    5d54:	4643      	mov	r3, r8
    5d56:	2b01      	cmp	r3, #1
    5d58:	d100      	bne.n	5d5c <remove_chain+0x164>
    5d5a:	e75d      	b.n	5c18 <remove_chain+0x20>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    5d5c:	2c01      	cmp	r4, #1
    5d5e:	d800      	bhi.n	5d62 <remove_chain+0x16a>
    5d60:	e75a      	b.n	5c18 <remove_chain+0x20>
    5d62:	696b      	ldr	r3, [r5, #20]
    5d64:	42a3      	cmp	r3, r4
    5d66:	d800      	bhi.n	5d6a <remove_chain+0x172>
    5d68:	e756      	b.n	5c18 <remove_chain+0x20>
    5d6a:	2200      	movs	r2, #0
    5d6c:	0021      	movs	r1, r4
    5d6e:	0028      	movs	r0, r5
    5d70:	4b5b      	ldr	r3, [pc, #364]	; (5ee0 <remove_chain+0x2e8>)
    5d72:	4798      	blx	r3
			if (res != FR_OK) return res;
    5d74:	2800      	cmp	r0, #0
    5d76:	d000      	beq.n	5d7a <remove_chain+0x182>
    5d78:	e74f      	b.n	5c1a <remove_chain+0x22>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    5d7a:	696a      	ldr	r2, [r5, #20]
    5d7c:	692b      	ldr	r3, [r5, #16]
    5d7e:	1e91      	subs	r1, r2, #2
    5d80:	428b      	cmp	r3, r1
    5d82:	d205      	bcs.n	5d90 <remove_chain+0x198>
			fs->fsi_flag |= 1;
    5d84:	2101      	movs	r1, #1
			fs->free_clst++;
    5d86:	3301      	adds	r3, #1
    5d88:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    5d8a:	796b      	ldrb	r3, [r5, #5]
    5d8c:	430b      	orrs	r3, r1
    5d8e:	716b      	strb	r3, [r5, #5]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    5d90:	4542      	cmp	r2, r8
    5d92:	d800      	bhi.n	5d96 <remove_chain+0x19e>
    5d94:	e088      	b.n	5ea8 <remove_chain+0x2b0>
    5d96:	9b00      	ldr	r3, [sp, #0]
    5d98:	4644      	mov	r4, r8
    5d9a:	681e      	ldr	r6, [r3, #0]
    5d9c:	6973      	ldr	r3, [r6, #20]
    5d9e:	e759      	b.n	5c54 <remove_chain+0x5c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    5da0:	6a32      	ldr	r2, [r6, #32]
    5da2:	09e3      	lsrs	r3, r4, #7
    5da4:	4690      	mov	r8, r2
	if (sect != fs->winsect) {	/* Window offset changed? */
    5da6:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    5da8:	4498      	add	r8, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5daa:	4590      	cmp	r8, r2
    5dac:	d078      	beq.n	5ea0 <remove_chain+0x2a8>
    5dae:	2130      	movs	r1, #48	; 0x30
    5db0:	4689      	mov	r9, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5db2:	7933      	ldrb	r3, [r6, #4]
    5db4:	44b1      	add	r9, r6
    5db6:	2b00      	cmp	r3, #0
    5db8:	d121      	bne.n	5dfe <remove_chain+0x206>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5dba:	7870      	ldrb	r0, [r6, #1]
    5dbc:	2301      	movs	r3, #1
    5dbe:	4642      	mov	r2, r8
    5dc0:	4649      	mov	r1, r9
    5dc2:	4f48      	ldr	r7, [pc, #288]	; (5ee4 <remove_chain+0x2ec>)
    5dc4:	47b8      	blx	r7
    5dc6:	2800      	cmp	r0, #0
    5dc8:	d114      	bne.n	5df4 <remove_chain+0x1fc>
			fs->winsect = sect;
    5dca:	4643      	mov	r3, r8
    5dcc:	62f3      	str	r3, [r6, #44]	; 0x2c
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    5dce:	23fe      	movs	r3, #254	; 0xfe
    5dd0:	00a1      	lsls	r1, r4, #2
    5dd2:	005b      	lsls	r3, r3, #1
    5dd4:	4019      	ands	r1, r3
    5dd6:	4449      	add	r1, r9
	rv = rv << 8 | ptr[2];
    5dd8:	78cb      	ldrb	r3, [r1, #3]
    5dda:	788a      	ldrb	r2, [r1, #2]
    5ddc:	021b      	lsls	r3, r3, #8
    5dde:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    5de0:	784a      	ldrb	r2, [r1, #1]
    5de2:	021b      	lsls	r3, r3, #8
    5de4:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[0];
    5de6:	780b      	ldrb	r3, [r1, #0]
    5de8:	0212      	lsls	r2, r2, #8
    5dea:	4313      	orrs	r3, r2
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    5dec:	011b      	lsls	r3, r3, #4
    5dee:	091b      	lsrs	r3, r3, #4
    5df0:	4698      	mov	r8, r3
    5df2:	e7ab      	b.n	5d4c <remove_chain+0x154>
			fs->winsect = sect;
    5df4:	2301      	movs	r3, #1
    5df6:	425b      	negs	r3, r3
    5df8:	62f3      	str	r3, [r6, #44]	; 0x2c
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    5dfa:	2001      	movs	r0, #1
    5dfc:	e70d      	b.n	5c1a <remove_chain+0x22>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5dfe:	7870      	ldrb	r0, [r6, #1]
    5e00:	2301      	movs	r3, #1
    5e02:	4649      	mov	r1, r9
    5e04:	4f38      	ldr	r7, [pc, #224]	; (5ee8 <remove_chain+0x2f0>)
    5e06:	47b8      	blx	r7
    5e08:	2800      	cmp	r0, #0
    5e0a:	d10f      	bne.n	5e2c <remove_chain+0x234>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5e0c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    5e0e:	6a33      	ldr	r3, [r6, #32]
    5e10:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5e12:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5e14:	1ad3      	subs	r3, r2, r3
    5e16:	428b      	cmp	r3, r1
    5e18:	d2cf      	bcs.n	5dba <remove_chain+0x1c2>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5e1a:	78f3      	ldrb	r3, [r6, #3]
    5e1c:	2b02      	cmp	r3, #2
    5e1e:	d1cc      	bne.n	5dba <remove_chain+0x1c2>
    5e20:	1852      	adds	r2, r2, r1
    5e22:	7870      	ldrb	r0, [r6, #1]
    5e24:	3b01      	subs	r3, #1
    5e26:	4649      	mov	r1, r9
    5e28:	47b8      	blx	r7
    5e2a:	e7c6      	b.n	5dba <remove_chain+0x1c2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    5e2c:	2001      	movs	r0, #1
    5e2e:	e6f4      	b.n	5c1a <remove_chain+0x22>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5e30:	7870      	ldrb	r0, [r6, #1]
    5e32:	2301      	movs	r3, #1
    5e34:	4649      	mov	r1, r9
    5e36:	4f2c      	ldr	r7, [pc, #176]	; (5ee8 <remove_chain+0x2f0>)
    5e38:	47b8      	blx	r7
    5e3a:	2800      	cmp	r0, #0
    5e3c:	d1f6      	bne.n	5e2c <remove_chain+0x234>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5e3e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    5e40:	6a33      	ldr	r3, [r6, #32]
    5e42:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5e44:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5e46:	1ad3      	subs	r3, r2, r3
    5e48:	428b      	cmp	r3, r1
    5e4a:	d300      	bcc.n	5e4e <remove_chain+0x256>
    5e4c:	e76b      	b.n	5d26 <remove_chain+0x12e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5e4e:	78f3      	ldrb	r3, [r6, #3]
    5e50:	2b02      	cmp	r3, #2
    5e52:	d000      	beq.n	5e56 <remove_chain+0x25e>
    5e54:	e767      	b.n	5d26 <remove_chain+0x12e>
    5e56:	1852      	adds	r2, r2, r1
    5e58:	7870      	ldrb	r0, [r6, #1]
    5e5a:	3b01      	subs	r3, #1
    5e5c:	4649      	mov	r1, r9
    5e5e:	4f22      	ldr	r7, [pc, #136]	; (5ee8 <remove_chain+0x2f0>)
    5e60:	47b8      	blx	r7
    5e62:	e760      	b.n	5d26 <remove_chain+0x12e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5e64:	7870      	ldrb	r0, [r6, #1]
    5e66:	2301      	movs	r3, #1
    5e68:	4651      	mov	r1, sl
    5e6a:	4f1f      	ldr	r7, [pc, #124]	; (5ee8 <remove_chain+0x2f0>)
    5e6c:	47b8      	blx	r7
    5e6e:	2800      	cmp	r0, #0
    5e70:	d1dc      	bne.n	5e2c <remove_chain+0x234>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5e72:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    5e74:	6a33      	ldr	r3, [r6, #32]
    5e76:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5e78:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5e7a:	1ad3      	subs	r3, r2, r3
    5e7c:	428b      	cmp	r3, r1
    5e7e:	d300      	bcc.n	5e82 <remove_chain+0x28a>
    5e80:	e704      	b.n	5c8c <remove_chain+0x94>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5e82:	78f3      	ldrb	r3, [r6, #3]
    5e84:	2b02      	cmp	r3, #2
    5e86:	d000      	beq.n	5e8a <remove_chain+0x292>
    5e88:	e700      	b.n	5c8c <remove_chain+0x94>
    5e8a:	1852      	adds	r2, r2, r1
    5e8c:	7870      	ldrb	r0, [r6, #1]
    5e8e:	3b01      	subs	r3, #1
    5e90:	4651      	mov	r1, sl
    5e92:	4f15      	ldr	r7, [pc, #84]	; (5ee8 <remove_chain+0x2f0>)
    5e94:	47b8      	blx	r7
    5e96:	e6f9      	b.n	5c8c <remove_chain+0x94>
    5e98:	2330      	movs	r3, #48	; 0x30
    5e9a:	4699      	mov	r9, r3
    5e9c:	44b1      	add	r9, r6
    5e9e:	e74b      	b.n	5d38 <remove_chain+0x140>
    5ea0:	2330      	movs	r3, #48	; 0x30
    5ea2:	4699      	mov	r9, r3
    5ea4:	44b1      	add	r9, r6
    5ea6:	e792      	b.n	5dce <remove_chain+0x1d6>
	return FR_OK;
    5ea8:	2000      	movs	r0, #0
    5eaa:	e6b6      	b.n	5c1a <remove_chain+0x22>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    5eac:	7870      	ldrb	r0, [r6, #1]
    5eae:	2301      	movs	r3, #1
    5eb0:	4651      	mov	r1, sl
    5eb2:	4f0d      	ldr	r7, [pc, #52]	; (5ee8 <remove_chain+0x2f0>)
    5eb4:	47b8      	blx	r7
    5eb6:	2800      	cmp	r0, #0
    5eb8:	d1b8      	bne.n	5e2c <remove_chain+0x234>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5eba:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    5ebc:	6a33      	ldr	r3, [r6, #32]
    5ebe:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    5ec0:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    5ec2:	1ad3      	subs	r3, r2, r3
    5ec4:	428b      	cmp	r3, r1
    5ec6:	d300      	bcc.n	5eca <remove_chain+0x2d2>
    5ec8:	e704      	b.n	5cd4 <remove_chain+0xdc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    5eca:	78f3      	ldrb	r3, [r6, #3]
    5ecc:	2b02      	cmp	r3, #2
    5ece:	d000      	beq.n	5ed2 <remove_chain+0x2da>
    5ed0:	e700      	b.n	5cd4 <remove_chain+0xdc>
    5ed2:	1852      	adds	r2, r2, r1
    5ed4:	7870      	ldrb	r0, [r6, #1]
    5ed6:	3b01      	subs	r3, #1
    5ed8:	4651      	mov	r1, sl
    5eda:	4f03      	ldr	r7, [pc, #12]	; (5ee8 <remove_chain+0x2f0>)
    5edc:	47b8      	blx	r7
    5ede:	e6f9      	b.n	5cd4 <remove_chain+0xdc>
    5ee0:	00005949 	.word	0x00005949
    5ee4:	00008b95 	.word	0x00008b95
    5ee8:	00008c85 	.word	0x00008c85

00005eec <get_fat.isra.9>:
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
    5eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eee:	4645      	mov	r5, r8
    5ef0:	46de      	mov	lr, fp
    5ef2:	4657      	mov	r7, sl
    5ef4:	464e      	mov	r6, r9
    5ef6:	0004      	movs	r4, r0
    5ef8:	b5e0      	push	{r5, r6, r7, lr}
		val = 1;	/* Internal error */
    5efa:	2001      	movs	r0, #1
static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
    5efc:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    5efe:	2901      	cmp	r1, #1
    5f00:	d909      	bls.n	5f16 <get_fat.isra.9+0x2a>
    5f02:	6963      	ldr	r3, [r4, #20]
    5f04:	4299      	cmp	r1, r3
    5f06:	d206      	bcs.n	5f16 <get_fat.isra.9+0x2a>
		switch (fs->fs_type) {
    5f08:	7823      	ldrb	r3, [r4, #0]
    5f0a:	2b02      	cmp	r3, #2
    5f0c:	d054      	beq.n	5fb8 <get_fat.isra.9+0xcc>
    5f0e:	2b03      	cmp	r3, #3
    5f10:	d06d      	beq.n	5fee <get_fat.isra.9+0x102>
    5f12:	2b01      	cmp	r3, #1
    5f14:	d005      	beq.n	5f22 <get_fat.isra.9+0x36>
}
    5f16:	bc3c      	pop	{r2, r3, r4, r5}
    5f18:	4690      	mov	r8, r2
    5f1a:	4699      	mov	r9, r3
    5f1c:	46a2      	mov	sl, r4
    5f1e:	46ab      	mov	fp, r5
    5f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bc = (UINT)clst; bc += bc / 2;
    5f22:	084b      	lsrs	r3, r1, #1
    5f24:	4698      	mov	r8, r3
    5f26:	4488      	add	r8, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    5f28:	4642      	mov	r2, r8
    5f2a:	0a57      	lsrs	r7, r2, #9
    5f2c:	46ba      	mov	sl, r7
    5f2e:	6a23      	ldr	r3, [r4, #32]
	if (sect != fs->winsect) {	/* Window offset changed? */
    5f30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    5f32:	449a      	add	sl, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5f34:	4592      	cmp	sl, r2
    5f36:	d011      	beq.n	5f5c <get_fat.isra.9+0x70>
    5f38:	0026      	movs	r6, r4
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5f3a:	7923      	ldrb	r3, [r4, #4]
    5f3c:	3630      	adds	r6, #48	; 0x30
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d000      	beq.n	5f44 <get_fat.isra.9+0x58>
    5f42:	e0bd      	b.n	60c0 <get_fat.isra.9+0x1d4>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5f44:	0031      	movs	r1, r6
    5f46:	7860      	ldrb	r0, [r4, #1]
    5f48:	2301      	movs	r3, #1
    5f4a:	4652      	mov	r2, sl
    5f4c:	4e79      	ldr	r6, [pc, #484]	; (6134 <get_fat.isra.9+0x248>)
    5f4e:	47b0      	blx	r6
    5f50:	2800      	cmp	r0, #0
    5f52:	d148      	bne.n	5fe6 <get_fat.isra.9+0xfa>
			fs->winsect = sect;
    5f54:	4653      	mov	r3, sl
    5f56:	4652      	mov	r2, sl
    5f58:	62e3      	str	r3, [r4, #44]	; 0x2c
    5f5a:	6a23      	ldr	r3, [r4, #32]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    5f5c:	2101      	movs	r1, #1
    5f5e:	4441      	add	r1, r8
    5f60:	4689      	mov	r9, r1
    5f62:	4641      	mov	r1, r8
    5f64:	05c9      	lsls	r1, r1, #23
    5f66:	0dc9      	lsrs	r1, r1, #23
    5f68:	1861      	adds	r1, r4, r1
    5f6a:	3130      	adds	r1, #48	; 0x30
    5f6c:	7809      	ldrb	r1, [r1, #0]
    5f6e:	4688      	mov	r8, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    5f70:	4649      	mov	r1, r9
    5f72:	0a4f      	lsrs	r7, r1, #9
    5f74:	46bb      	mov	fp, r7
    5f76:	449b      	add	fp, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5f78:	4593      	cmp	fp, r2
    5f7a:	d00f      	beq.n	5f9c <get_fat.isra.9+0xb0>
    5f7c:	0026      	movs	r6, r4
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5f7e:	7923      	ldrb	r3, [r4, #4]
    5f80:	3630      	adds	r6, #48	; 0x30
    5f82:	2b00      	cmp	r3, #0
    5f84:	d000      	beq.n	5f88 <get_fat.isra.9+0x9c>
    5f86:	e0bc      	b.n	6102 <get_fat.isra.9+0x216>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5f88:	0031      	movs	r1, r6
    5f8a:	7860      	ldrb	r0, [r4, #1]
    5f8c:	2301      	movs	r3, #1
    5f8e:	465a      	mov	r2, fp
    5f90:	4e68      	ldr	r6, [pc, #416]	; (6134 <get_fat.isra.9+0x248>)
    5f92:	47b0      	blx	r6
    5f94:	2800      	cmp	r0, #0
    5f96:	d126      	bne.n	5fe6 <get_fat.isra.9+0xfa>
			fs->winsect = sect;
    5f98:	465b      	mov	r3, fp
    5f9a:	62e3      	str	r3, [r4, #44]	; 0x2c
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    5f9c:	464b      	mov	r3, r9
    5f9e:	05db      	lsls	r3, r3, #23
    5fa0:	0ddb      	lsrs	r3, r3, #23
    5fa2:	18e4      	adds	r4, r4, r3
    5fa4:	4643      	mov	r3, r8
    5fa6:	3430      	adds	r4, #48	; 0x30
    5fa8:	7820      	ldrb	r0, [r4, #0]
    5faa:	0200      	lsls	r0, r0, #8
    5fac:	4318      	orrs	r0, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    5fae:	07eb      	lsls	r3, r5, #31
    5fb0:	d445      	bmi.n	603e <get_fat.isra.9+0x152>
    5fb2:	0500      	lsls	r0, r0, #20
    5fb4:	0d00      	lsrs	r0, r0, #20
    5fb6:	e7ae      	b.n	5f16 <get_fat.isra.9+0x2a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    5fb8:	6a23      	ldr	r3, [r4, #32]
    5fba:	0a0f      	lsrs	r7, r1, #8
    5fbc:	469c      	mov	ip, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5fbe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    5fc0:	4467      	add	r7, ip
    5fc2:	46ba      	mov	sl, r7
	if (sect != fs->winsect) {	/* Window offset changed? */
    5fc4:	4297      	cmp	r7, r2
    5fc6:	d100      	bne.n	5fca <get_fat.isra.9+0xde>
    5fc8:	e097      	b.n	60fa <get_fat.isra.9+0x20e>
    5fca:	0026      	movs	r6, r4
	if (fs->wflag) {	/* Is the disk access window dirty? */
    5fcc:	7923      	ldrb	r3, [r4, #4]
    5fce:	3630      	adds	r6, #48	; 0x30
    5fd0:	2b00      	cmp	r3, #0
    5fd2:	d142      	bne.n	605a <get_fat.isra.9+0x16e>
    5fd4:	46b0      	mov	r8, r6
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    5fd6:	0031      	movs	r1, r6
    5fd8:	7860      	ldrb	r0, [r4, #1]
    5fda:	2301      	movs	r3, #1
    5fdc:	4652      	mov	r2, sl
    5fde:	4e55      	ldr	r6, [pc, #340]	; (6134 <get_fat.isra.9+0x248>)
    5fe0:	47b0      	blx	r6
    5fe2:	2800      	cmp	r0, #0
    5fe4:	d02d      	beq.n	6042 <get_fat.isra.9+0x156>
			fs->winsect = sect;
    5fe6:	2001      	movs	r0, #1
    5fe8:	4240      	negs	r0, r0
    5fea:	62e0      	str	r0, [r4, #44]	; 0x2c
    5fec:	e793      	b.n	5f16 <get_fat.isra.9+0x2a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    5fee:	6a23      	ldr	r3, [r4, #32]
    5ff0:	09cf      	lsrs	r7, r1, #7
    5ff2:	469c      	mov	ip, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    5ff4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    5ff6:	4467      	add	r7, ip
    5ff8:	46ba      	mov	sl, r7
	if (sect != fs->winsect) {	/* Window offset changed? */
    5ffa:	4297      	cmp	r7, r2
    5ffc:	d079      	beq.n	60f2 <get_fat.isra.9+0x206>
    5ffe:	0026      	movs	r6, r4
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6000:	7923      	ldrb	r3, [r4, #4]
    6002:	3630      	adds	r6, #48	; 0x30
    6004:	2b00      	cmp	r3, #0
    6006:	d140      	bne.n	608a <get_fat.isra.9+0x19e>
    6008:	46b0      	mov	r8, r6
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    600a:	0031      	movs	r1, r6
    600c:	7860      	ldrb	r0, [r4, #1]
    600e:	2301      	movs	r3, #1
    6010:	4652      	mov	r2, sl
    6012:	4e48      	ldr	r6, [pc, #288]	; (6134 <get_fat.isra.9+0x248>)
    6014:	47b0      	blx	r6
    6016:	2800      	cmp	r0, #0
    6018:	d1e5      	bne.n	5fe6 <get_fat.isra.9+0xfa>
			fs->winsect = sect;
    601a:	4653      	mov	r3, sl
    601c:	62e3      	str	r3, [r4, #44]	; 0x2c
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    601e:	23fe      	movs	r3, #254	; 0xfe
    6020:	00ad      	lsls	r5, r5, #2
    6022:	005b      	lsls	r3, r3, #1
    6024:	401d      	ands	r5, r3
    6026:	4445      	add	r5, r8
	rv = rv << 8 | ptr[2];
    6028:	78eb      	ldrb	r3, [r5, #3]
    602a:	78a8      	ldrb	r0, [r5, #2]
    602c:	021b      	lsls	r3, r3, #8
    602e:	4303      	orrs	r3, r0
	rv = rv << 8 | ptr[1];
    6030:	7868      	ldrb	r0, [r5, #1]
    6032:	021b      	lsls	r3, r3, #8
    6034:	4303      	orrs	r3, r0
	rv = rv << 8 | ptr[0];
    6036:	7828      	ldrb	r0, [r5, #0]
    6038:	021b      	lsls	r3, r3, #8
    603a:	4318      	orrs	r0, r3
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    603c:	0100      	lsls	r0, r0, #4
    603e:	0900      	lsrs	r0, r0, #4
    6040:	e769      	b.n	5f16 <get_fat.isra.9+0x2a>
			fs->winsect = sect;
    6042:	4653      	mov	r3, sl
    6044:	62e3      	str	r3, [r4, #44]	; 0x2c
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    6046:	23ff      	movs	r3, #255	; 0xff
    6048:	006d      	lsls	r5, r5, #1
    604a:	005b      	lsls	r3, r3, #1
    604c:	401d      	ands	r5, r3
    604e:	4445      	add	r5, r8
	rv = rv << 8 | ptr[0];
    6050:	786b      	ldrb	r3, [r5, #1]
    6052:	7828      	ldrb	r0, [r5, #0]
    6054:	021b      	lsls	r3, r3, #8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    6056:	4318      	orrs	r0, r3
    6058:	e75d      	b.n	5f16 <get_fat.isra.9+0x2a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    605a:	7860      	ldrb	r0, [r4, #1]
    605c:	2301      	movs	r3, #1
    605e:	0031      	movs	r1, r6
    6060:	4f35      	ldr	r7, [pc, #212]	; (6138 <get_fat.isra.9+0x24c>)
    6062:	46b0      	mov	r8, r6
    6064:	47b8      	blx	r7
    6066:	2800      	cmp	r0, #0
    6068:	d127      	bne.n	60ba <get_fat.isra.9+0x1ce>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    606a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    606c:	6a23      	ldr	r3, [r4, #32]
    606e:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    6070:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6072:	1ad3      	subs	r3, r2, r3
    6074:	428b      	cmp	r3, r1
    6076:	d2ad      	bcs.n	5fd4 <get_fat.isra.9+0xe8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6078:	78e3      	ldrb	r3, [r4, #3]
    607a:	2b02      	cmp	r3, #2
    607c:	d1aa      	bne.n	5fd4 <get_fat.isra.9+0xe8>
    607e:	1852      	adds	r2, r2, r1
    6080:	7860      	ldrb	r0, [r4, #1]
    6082:	3b01      	subs	r3, #1
    6084:	0031      	movs	r1, r6
    6086:	47b8      	blx	r7
    6088:	e7a5      	b.n	5fd6 <get_fat.isra.9+0xea>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    608a:	7860      	ldrb	r0, [r4, #1]
    608c:	2301      	movs	r3, #1
    608e:	0031      	movs	r1, r6
    6090:	4f29      	ldr	r7, [pc, #164]	; (6138 <get_fat.isra.9+0x24c>)
    6092:	46b0      	mov	r8, r6
    6094:	47b8      	blx	r7
    6096:	2800      	cmp	r0, #0
    6098:	d10f      	bne.n	60ba <get_fat.isra.9+0x1ce>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    609a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    609c:	6a23      	ldr	r3, [r4, #32]
    609e:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    60a0:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    60a2:	1ad3      	subs	r3, r2, r3
    60a4:	428b      	cmp	r3, r1
    60a6:	d2af      	bcs.n	6008 <get_fat.isra.9+0x11c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    60a8:	78e3      	ldrb	r3, [r4, #3]
    60aa:	2b02      	cmp	r3, #2
    60ac:	d1ac      	bne.n	6008 <get_fat.isra.9+0x11c>
    60ae:	1852      	adds	r2, r2, r1
    60b0:	7860      	ldrb	r0, [r4, #1]
    60b2:	3b01      	subs	r3, #1
    60b4:	0031      	movs	r1, r6
    60b6:	47b8      	blx	r7
    60b8:	e7a7      	b.n	600a <get_fat.isra.9+0x11e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    60ba:	2001      	movs	r0, #1
    60bc:	4240      	negs	r0, r0
    60be:	e72a      	b.n	5f16 <get_fat.isra.9+0x2a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    60c0:	7860      	ldrb	r0, [r4, #1]
    60c2:	2301      	movs	r3, #1
    60c4:	0031      	movs	r1, r6
    60c6:	4f1c      	ldr	r7, [pc, #112]	; (6138 <get_fat.isra.9+0x24c>)
    60c8:	47b8      	blx	r7
    60ca:	2800      	cmp	r0, #0
    60cc:	d1f5      	bne.n	60ba <get_fat.isra.9+0x1ce>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    60ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    60d0:	6a23      	ldr	r3, [r4, #32]
    60d2:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    60d4:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    60d6:	1ad3      	subs	r3, r2, r3
    60d8:	428b      	cmp	r3, r1
    60da:	d300      	bcc.n	60de <get_fat.isra.9+0x1f2>
    60dc:	e732      	b.n	5f44 <get_fat.isra.9+0x58>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    60de:	78e3      	ldrb	r3, [r4, #3]
    60e0:	2b02      	cmp	r3, #2
    60e2:	d000      	beq.n	60e6 <get_fat.isra.9+0x1fa>
    60e4:	e72e      	b.n	5f44 <get_fat.isra.9+0x58>
    60e6:	1852      	adds	r2, r2, r1
    60e8:	7860      	ldrb	r0, [r4, #1]
    60ea:	3b01      	subs	r3, #1
    60ec:	0031      	movs	r1, r6
    60ee:	47b8      	blx	r7
    60f0:	e728      	b.n	5f44 <get_fat.isra.9+0x58>
    60f2:	2330      	movs	r3, #48	; 0x30
    60f4:	4698      	mov	r8, r3
    60f6:	44a0      	add	r8, r4
    60f8:	e791      	b.n	601e <get_fat.isra.9+0x132>
    60fa:	2330      	movs	r3, #48	; 0x30
    60fc:	4698      	mov	r8, r3
    60fe:	44a0      	add	r8, r4
    6100:	e7a1      	b.n	6046 <get_fat.isra.9+0x15a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6102:	7860      	ldrb	r0, [r4, #1]
    6104:	2301      	movs	r3, #1
    6106:	0031      	movs	r1, r6
    6108:	4f0b      	ldr	r7, [pc, #44]	; (6138 <get_fat.isra.9+0x24c>)
    610a:	47b8      	blx	r7
    610c:	2800      	cmp	r0, #0
    610e:	d1d4      	bne.n	60ba <get_fat.isra.9+0x1ce>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6110:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6112:	6a23      	ldr	r3, [r4, #32]
    6114:	69a1      	ldr	r1, [r4, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    6116:	7120      	strb	r0, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6118:	1ad3      	subs	r3, r2, r3
    611a:	428b      	cmp	r3, r1
    611c:	d300      	bcc.n	6120 <get_fat.isra.9+0x234>
    611e:	e733      	b.n	5f88 <get_fat.isra.9+0x9c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6120:	78e3      	ldrb	r3, [r4, #3]
    6122:	2b02      	cmp	r3, #2
    6124:	d000      	beq.n	6128 <get_fat.isra.9+0x23c>
    6126:	e72f      	b.n	5f88 <get_fat.isra.9+0x9c>
    6128:	1852      	adds	r2, r2, r1
    612a:	7860      	ldrb	r0, [r4, #1]
    612c:	3b01      	subs	r3, #1
    612e:	0031      	movs	r1, r6
    6130:	47b8      	blx	r7
    6132:	e729      	b.n	5f88 <get_fat.isra.9+0x9c>
    6134:	00008b95 	.word	0x00008b95
    6138:	00008c85 	.word	0x00008c85

0000613c <create_chain>:
{
    613c:	b5f0      	push	{r4, r5, r6, r7, lr}
    613e:	4657      	mov	r7, sl
    6140:	464e      	mov	r6, r9
    6142:	4645      	mov	r5, r8
    6144:	46de      	mov	lr, fp
    6146:	b5e0      	push	{r5, r6, r7, lr}
    6148:	4680      	mov	r8, r0
    614a:	b085      	sub	sp, #20
    614c:	468a      	mov	sl, r1
	FATFS *fs = obj->fs;
    614e:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
    6150:	2900      	cmp	r1, #0
    6152:	d000      	beq.n	6156 <create_chain+0x1a>
    6154:	e093      	b.n	627e <create_chain+0x142>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    6156:	68f3      	ldr	r3, [r6, #12]
    6158:	469b      	mov	fp, r3
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    615a:	2b00      	cmp	r3, #0
    615c:	d127      	bne.n	61ae <create_chain+0x72>
    615e:	2301      	movs	r3, #1
    6160:	469b      	mov	fp, r3
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    6162:	6933      	ldr	r3, [r6, #16]
    6164:	2b00      	cmp	r3, #0
    6166:	d028      	beq.n	61ba <create_chain+0x7e>
    6168:	6973      	ldr	r3, [r6, #20]
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    616a:	4642      	mov	r2, r8
    616c:	4651      	mov	r1, sl
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    616e:	465c      	mov	r4, fp
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6170:	465f      	mov	r7, fp
    6172:	46b0      	mov	r8, r6
    6174:	9102      	str	r1, [sp, #8]
    6176:	9201      	str	r2, [sp, #4]
				ncl++;							/* Next cluster */
    6178:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    617a:	429c      	cmp	r4, r3
    617c:	d341      	bcc.n	6202 <create_chain+0xc6>
					if (ncl > scl) return 0;	/* No free cluster found? */
    617e:	2f01      	cmp	r7, #1
    6180:	d91b      	bls.n	61ba <create_chain+0x7e>
    6182:	9b01      	ldr	r3, [sp, #4]
    6184:	681d      	ldr	r5, [r3, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    6186:	696b      	ldr	r3, [r5, #20]
    6188:	2b02      	cmp	r3, #2
    618a:	d907      	bls.n	619c <create_chain+0x60>
					ncl = 2;
    618c:	2402      	movs	r4, #2
		switch (fs->fs_type) {
    618e:	782b      	ldrb	r3, [r5, #0]
    6190:	2b02      	cmp	r3, #2
    6192:	d05a      	beq.n	624a <create_chain+0x10e>
    6194:	2b03      	cmp	r3, #3
    6196:	d03c      	beq.n	6212 <create_chain+0xd6>
    6198:	2b01      	cmp	r3, #1
    619a:	d010      	beq.n	61be <create_chain+0x82>
    619c:	2401      	movs	r4, #1
}
    619e:	0020      	movs	r0, r4
    61a0:	b005      	add	sp, #20
    61a2:	bc3c      	pop	{r2, r3, r4, r5}
    61a4:	4690      	mov	r8, r2
    61a6:	4699      	mov	r9, r3
    61a8:	46a2      	mov	sl, r4
    61aa:	46ab      	mov	fp, r5
    61ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    61ae:	6973      	ldr	r3, [r6, #20]
    61b0:	459b      	cmp	fp, r3
    61b2:	d2d4      	bcs.n	615e <create_chain+0x22>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    61b4:	6933      	ldr	r3, [r6, #16]
    61b6:	2b00      	cmp	r3, #0
    61b8:	d1d6      	bne.n	6168 <create_chain+0x2c>
					if (ncl > scl) return 0;	/* No free cluster found? */
    61ba:	2400      	movs	r4, #0
    61bc:	e7ef      	b.n	619e <create_chain+0x62>
			bc = (UINT)clst; bc += bc / 2;
    61be:	0863      	lsrs	r3, r4, #1
    61c0:	4699      	mov	r9, r3
    61c2:	44a1      	add	r9, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    61c4:	464b      	mov	r3, r9
    61c6:	0a5b      	lsrs	r3, r3, #9
    61c8:	469a      	mov	sl, r3
    61ca:	6a29      	ldr	r1, [r5, #32]
	if (sect != fs->winsect) {	/* Window offset changed? */
    61cc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    61ce:	448a      	add	sl, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
    61d0:	4592      	cmp	sl, r2
    61d2:	d100      	bne.n	61d6 <create_chain+0x9a>
    61d4:	e126      	b.n	6424 <create_chain+0x2e8>
    61d6:	2130      	movs	r1, #48	; 0x30
    61d8:	468b      	mov	fp, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    61da:	792b      	ldrb	r3, [r5, #4]
    61dc:	44ab      	add	fp, r5
    61de:	2b00      	cmp	r3, #0
    61e0:	d000      	beq.n	61e4 <create_chain+0xa8>
    61e2:	e09f      	b.n	6324 <create_chain+0x1e8>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    61e4:	7868      	ldrb	r0, [r5, #1]
    61e6:	2301      	movs	r3, #1
    61e8:	4652      	mov	r2, sl
    61ea:	4659      	mov	r1, fp
    61ec:	4ebd      	ldr	r6, [pc, #756]	; (64e4 <create_chain+0x3a8>)
    61ee:	47b0      	blx	r6
    61f0:	2800      	cmp	r0, #0
    61f2:	d100      	bne.n	61f6 <create_chain+0xba>
    61f4:	e112      	b.n	641c <create_chain+0x2e0>
			fs->winsect = sect;
    61f6:	2301      	movs	r3, #1
    61f8:	425b      	negs	r3, r3
    61fa:	62eb      	str	r3, [r5, #44]	; 0x2c
    61fc:	2401      	movs	r4, #1
    61fe:	4264      	negs	r4, r4
    6200:	e7cd      	b.n	619e <create_chain+0x62>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    6202:	2c01      	cmp	r4, #1
    6204:	d9ca      	bls.n	619c <create_chain+0x60>
    6206:	9b01      	ldr	r3, [sp, #4]
    6208:	681d      	ldr	r5, [r3, #0]
    620a:	696b      	ldr	r3, [r5, #20]
    620c:	429c      	cmp	r4, r3
    620e:	d2c5      	bcs.n	619c <create_chain+0x60>
    6210:	e7bd      	b.n	618e <create_chain+0x52>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    6212:	6a2a      	ldr	r2, [r5, #32]
    6214:	09e3      	lsrs	r3, r4, #7
    6216:	4691      	mov	r9, r2
	if (sect != fs->winsect) {	/* Window offset changed? */
    6218:	6aea      	ldr	r2, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    621a:	4499      	add	r9, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    621c:	4591      	cmp	r9, r2
    621e:	d100      	bne.n	6222 <create_chain+0xe6>
    6220:	e0d0      	b.n	63c4 <create_chain+0x288>
    6222:	2130      	movs	r1, #48	; 0x30
    6224:	468a      	mov	sl, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6226:	792b      	ldrb	r3, [r5, #4]
    6228:	44aa      	add	sl, r5
    622a:	2b00      	cmp	r3, #0
    622c:	d000      	beq.n	6230 <create_chain+0xf4>
    622e:	e094      	b.n	635a <create_chain+0x21e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6230:	7868      	ldrb	r0, [r5, #1]
    6232:	2301      	movs	r3, #1
    6234:	464a      	mov	r2, r9
    6236:	4651      	mov	r1, sl
    6238:	4eaa      	ldr	r6, [pc, #680]	; (64e4 <create_chain+0x3a8>)
    623a:	47b0      	blx	r6
    623c:	2800      	cmp	r0, #0
    623e:	d100      	bne.n	6242 <create_chain+0x106>
    6240:	e11f      	b.n	6482 <create_chain+0x346>
			fs->winsect = sect;
    6242:	2401      	movs	r4, #1
    6244:	4264      	negs	r4, r4
    6246:	62ec      	str	r4, [r5, #44]	; 0x2c
    6248:	e7a9      	b.n	619e <create_chain+0x62>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    624a:	6a2a      	ldr	r2, [r5, #32]
    624c:	0a23      	lsrs	r3, r4, #8
    624e:	4691      	mov	r9, r2
	if (sect != fs->winsect) {	/* Window offset changed? */
    6250:	6aea      	ldr	r2, [r5, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    6252:	4499      	add	r9, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    6254:	4591      	cmp	r9, r2
    6256:	d100      	bne.n	625a <create_chain+0x11e>
    6258:	e0d3      	b.n	6402 <create_chain+0x2c6>
    625a:	2130      	movs	r1, #48	; 0x30
    625c:	468a      	mov	sl, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    625e:	792b      	ldrb	r3, [r5, #4]
    6260:	44aa      	add	sl, r5
    6262:	2b00      	cmp	r3, #0
    6264:	d000      	beq.n	6268 <create_chain+0x12c>
    6266:	e092      	b.n	638e <create_chain+0x252>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6268:	7868      	ldrb	r0, [r5, #1]
    626a:	2301      	movs	r3, #1
    626c:	464a      	mov	r2, r9
    626e:	4651      	mov	r1, sl
    6270:	4e9c      	ldr	r6, [pc, #624]	; (64e4 <create_chain+0x3a8>)
    6272:	47b0      	blx	r6
    6274:	2800      	cmp	r0, #0
    6276:	d1e4      	bne.n	6242 <create_chain+0x106>
			fs->winsect = sect;
    6278:	464b      	mov	r3, r9
    627a:	62eb      	str	r3, [r5, #44]	; 0x2c
    627c:	e0c4      	b.n	6408 <create_chain+0x2cc>
		cs = get_fat(obj, clst);			/* Check the cluster status */
    627e:	0030      	movs	r0, r6
    6280:	4d99      	ldr	r5, [pc, #612]	; (64e8 <create_chain+0x3ac>)
    6282:	47a8      	blx	r5
    6284:	0004      	movs	r4, r0
		if (cs < 2) return 1;				/* Test for insanity */
    6286:	2801      	cmp	r0, #1
    6288:	d800      	bhi.n	628c <create_chain+0x150>
    628a:	e787      	b.n	619c <create_chain+0x60>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    628c:	1c43      	adds	r3, r0, #1
    628e:	d0b5      	beq.n	61fc <create_chain+0xc0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    6290:	6973      	ldr	r3, [r6, #20]
    6292:	4298      	cmp	r0, r3
    6294:	d200      	bcs.n	6298 <create_chain+0x15c>
    6296:	e782      	b.n	619e <create_chain+0x62>
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    6298:	6932      	ldr	r2, [r6, #16]
    629a:	2a00      	cmp	r2, #0
    629c:	d08d      	beq.n	61ba <create_chain+0x7e>
			ncl = scl + 1;						/* Test if next cluster is free */
    629e:	4652      	mov	r2, sl
    62a0:	1c54      	adds	r4, r2, #1
			if (ncl >= fs->n_fatent) ncl = 2;
    62a2:	42a3      	cmp	r3, r4
    62a4:	d800      	bhi.n	62a8 <create_chain+0x16c>
    62a6:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    62a8:	4643      	mov	r3, r8
    62aa:	0021      	movs	r1, r4
    62ac:	6818      	ldr	r0, [r3, #0]
    62ae:	47a8      	blx	r5
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    62b0:	2801      	cmp	r0, #1
    62b2:	d100      	bne.n	62b6 <create_chain+0x17a>
    62b4:	e772      	b.n	619c <create_chain+0x60>
    62b6:	1c43      	adds	r3, r0, #1
    62b8:	d0a0      	beq.n	61fc <create_chain+0xc0>
			if (cs != 0) {						/* Not free? */
    62ba:	2800      	cmp	r0, #0
    62bc:	d000      	beq.n	62c0 <create_chain+0x184>
    62be:	e0e3      	b.n	6488 <create_chain+0x34c>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    62c0:	2c00      	cmp	r4, #0
    62c2:	d100      	bne.n	62c6 <create_chain+0x18a>
    62c4:	e0ea      	b.n	649c <create_chain+0x360>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    62c6:	2c01      	cmp	r4, #1
    62c8:	d800      	bhi.n	62cc <create_chain+0x190>
    62ca:	e767      	b.n	619c <create_chain+0x60>
    62cc:	6973      	ldr	r3, [r6, #20]
    62ce:	429c      	cmp	r4, r3
    62d0:	d300      	bcc.n	62d4 <create_chain+0x198>
    62d2:	e763      	b.n	619c <create_chain+0x60>
    62d4:	2201      	movs	r2, #1
    62d6:	0021      	movs	r1, r4
    62d8:	4252      	negs	r2, r2
    62da:	0030      	movs	r0, r6
    62dc:	4d83      	ldr	r5, [pc, #524]	; (64ec <create_chain+0x3b0>)
    62de:	47a8      	blx	r5
		if (res == FR_OK && clst != 0) {
    62e0:	2800      	cmp	r0, #0
    62e2:	d000      	beq.n	62e6 <create_chain+0x1aa>
    62e4:	e0fa      	b.n	64dc <create_chain+0x3a0>
    62e6:	4653      	mov	r3, sl
    62e8:	2b00      	cmp	r3, #0
    62ea:	d00e      	beq.n	630a <create_chain+0x1ce>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    62ec:	4653      	mov	r3, sl
    62ee:	2b01      	cmp	r3, #1
    62f0:	d800      	bhi.n	62f4 <create_chain+0x1b8>
    62f2:	e753      	b.n	619c <create_chain+0x60>
    62f4:	6973      	ldr	r3, [r6, #20]
    62f6:	459a      	cmp	sl, r3
    62f8:	d300      	bcc.n	62fc <create_chain+0x1c0>
    62fa:	e74f      	b.n	619c <create_chain+0x60>
    62fc:	0022      	movs	r2, r4
    62fe:	4651      	mov	r1, sl
    6300:	0030      	movs	r0, r6
    6302:	47a8      	blx	r5
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    6304:	2800      	cmp	r0, #0
    6306:	d000      	beq.n	630a <create_chain+0x1ce>
    6308:	e0e8      	b.n	64dc <create_chain+0x3a0>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    630a:	6973      	ldr	r3, [r6, #20]
    630c:	6932      	ldr	r2, [r6, #16]
    630e:	3b02      	subs	r3, #2
		fs->last_clst = ncl;
    6310:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    6312:	429a      	cmp	r2, r3
    6314:	d801      	bhi.n	631a <create_chain+0x1de>
    6316:	3a01      	subs	r2, #1
    6318:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
    631a:	2201      	movs	r2, #1
    631c:	7973      	ldrb	r3, [r6, #5]
    631e:	4313      	orrs	r3, r2
    6320:	7173      	strb	r3, [r6, #5]
    6322:	e73c      	b.n	619e <create_chain+0x62>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6324:	7868      	ldrb	r0, [r5, #1]
    6326:	2301      	movs	r3, #1
    6328:	4659      	mov	r1, fp
    632a:	4e71      	ldr	r6, [pc, #452]	; (64f0 <create_chain+0x3b4>)
    632c:	47b0      	blx	r6
    632e:	2800      	cmp	r0, #0
    6330:	d000      	beq.n	6334 <create_chain+0x1f8>
    6332:	e763      	b.n	61fc <create_chain+0xc0>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6334:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    6336:	6a2b      	ldr	r3, [r5, #32]
    6338:	69a9      	ldr	r1, [r5, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    633a:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    633c:	1ad3      	subs	r3, r2, r3
    633e:	428b      	cmp	r3, r1
    6340:	d300      	bcc.n	6344 <create_chain+0x208>
    6342:	e74f      	b.n	61e4 <create_chain+0xa8>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6344:	78eb      	ldrb	r3, [r5, #3]
    6346:	2b02      	cmp	r3, #2
    6348:	d000      	beq.n	634c <create_chain+0x210>
    634a:	e74b      	b.n	61e4 <create_chain+0xa8>
    634c:	1852      	adds	r2, r2, r1
    634e:	7868      	ldrb	r0, [r5, #1]
    6350:	3b01      	subs	r3, #1
    6352:	4659      	mov	r1, fp
    6354:	4e66      	ldr	r6, [pc, #408]	; (64f0 <create_chain+0x3b4>)
    6356:	47b0      	blx	r6
    6358:	e744      	b.n	61e4 <create_chain+0xa8>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    635a:	7868      	ldrb	r0, [r5, #1]
    635c:	2301      	movs	r3, #1
    635e:	4651      	mov	r1, sl
    6360:	4e63      	ldr	r6, [pc, #396]	; (64f0 <create_chain+0x3b4>)
    6362:	47b0      	blx	r6
    6364:	2800      	cmp	r0, #0
    6366:	d000      	beq.n	636a <create_chain+0x22e>
    6368:	e748      	b.n	61fc <create_chain+0xc0>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    636a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    636c:	6a2b      	ldr	r3, [r5, #32]
    636e:	69a9      	ldr	r1, [r5, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    6370:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6372:	1ad3      	subs	r3, r2, r3
    6374:	428b      	cmp	r3, r1
    6376:	d300      	bcc.n	637a <create_chain+0x23e>
    6378:	e75a      	b.n	6230 <create_chain+0xf4>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    637a:	78eb      	ldrb	r3, [r5, #3]
    637c:	2b02      	cmp	r3, #2
    637e:	d000      	beq.n	6382 <create_chain+0x246>
    6380:	e756      	b.n	6230 <create_chain+0xf4>
    6382:	1852      	adds	r2, r2, r1
    6384:	7868      	ldrb	r0, [r5, #1]
    6386:	3b01      	subs	r3, #1
    6388:	4651      	mov	r1, sl
    638a:	47b0      	blx	r6
    638c:	e750      	b.n	6230 <create_chain+0xf4>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    638e:	7868      	ldrb	r0, [r5, #1]
    6390:	2301      	movs	r3, #1
    6392:	4651      	mov	r1, sl
    6394:	4e56      	ldr	r6, [pc, #344]	; (64f0 <create_chain+0x3b4>)
    6396:	47b0      	blx	r6
    6398:	2800      	cmp	r0, #0
    639a:	d000      	beq.n	639e <create_chain+0x262>
    639c:	e72e      	b.n	61fc <create_chain+0xc0>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    639e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    63a0:	6a2b      	ldr	r3, [r5, #32]
    63a2:	69a9      	ldr	r1, [r5, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    63a4:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    63a6:	1ad3      	subs	r3, r2, r3
    63a8:	428b      	cmp	r3, r1
    63aa:	d300      	bcc.n	63ae <create_chain+0x272>
    63ac:	e75c      	b.n	6268 <create_chain+0x12c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    63ae:	78eb      	ldrb	r3, [r5, #3]
    63b0:	2b02      	cmp	r3, #2
    63b2:	d000      	beq.n	63b6 <create_chain+0x27a>
    63b4:	e758      	b.n	6268 <create_chain+0x12c>
    63b6:	1852      	adds	r2, r2, r1
    63b8:	7868      	ldrb	r0, [r5, #1]
    63ba:	3b01      	subs	r3, #1
    63bc:	4651      	mov	r1, sl
    63be:	4e4c      	ldr	r6, [pc, #304]	; (64f0 <create_chain+0x3b4>)
    63c0:	47b0      	blx	r6
    63c2:	e751      	b.n	6268 <create_chain+0x12c>
    63c4:	2330      	movs	r3, #48	; 0x30
    63c6:	469a      	mov	sl, r3
    63c8:	44aa      	add	sl, r5
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    63ca:	23fe      	movs	r3, #254	; 0xfe
    63cc:	00a2      	lsls	r2, r4, #2
    63ce:	005b      	lsls	r3, r3, #1
    63d0:	401a      	ands	r2, r3
    63d2:	4452      	add	r2, sl
	rv = rv << 8 | ptr[2];
    63d4:	78d3      	ldrb	r3, [r2, #3]
    63d6:	7891      	ldrb	r1, [r2, #2]
    63d8:	021b      	lsls	r3, r3, #8
    63da:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[1];
    63dc:	7851      	ldrb	r1, [r2, #1]
    63de:	021b      	lsls	r3, r3, #8
    63e0:	4319      	orrs	r1, r3
	rv = rv << 8 | ptr[0];
    63e2:	7813      	ldrb	r3, [r2, #0]
    63e4:	0209      	lsls	r1, r1, #8
    63e6:	430b      	orrs	r3, r1
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    63e8:	011b      	lsls	r3, r3, #4
    63ea:	091b      	lsrs	r3, r3, #4
				if (cs == 0) break;				/* Found a free cluster? */
    63ec:	2b00      	cmp	r3, #0
    63ee:	d071      	beq.n	64d4 <create_chain+0x398>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    63f0:	2b01      	cmp	r3, #1
    63f2:	d100      	bne.n	63f6 <create_chain+0x2ba>
    63f4:	e6d2      	b.n	619c <create_chain+0x60>
				if (ncl == scl) return 0;		/* No free cluster found? */
    63f6:	42a7      	cmp	r7, r4
    63f8:	d100      	bne.n	63fc <create_chain+0x2c0>
    63fa:	e6de      	b.n	61ba <create_chain+0x7e>
    63fc:	4643      	mov	r3, r8
    63fe:	695b      	ldr	r3, [r3, #20]
    6400:	e6ba      	b.n	6178 <create_chain+0x3c>
    6402:	2330      	movs	r3, #48	; 0x30
    6404:	469a      	mov	sl, r3
    6406:	44aa      	add	sl, r5
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    6408:	23ff      	movs	r3, #255	; 0xff
    640a:	0061      	lsls	r1, r4, #1
    640c:	005b      	lsls	r3, r3, #1
    640e:	4019      	ands	r1, r3
    6410:	4451      	add	r1, sl
	rv = rv << 8 | ptr[0];
    6412:	784a      	ldrb	r2, [r1, #1]
    6414:	780b      	ldrb	r3, [r1, #0]
    6416:	0212      	lsls	r2, r2, #8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    6418:	4313      	orrs	r3, r2
    641a:	e7e7      	b.n	63ec <create_chain+0x2b0>
			fs->winsect = sect;
    641c:	4653      	mov	r3, sl
    641e:	4652      	mov	r2, sl
    6420:	6a29      	ldr	r1, [r5, #32]
    6422:	62eb      	str	r3, [r5, #44]	; 0x2c
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    6424:	2301      	movs	r3, #1
    6426:	444b      	add	r3, r9
    6428:	469b      	mov	fp, r3
    642a:	464b      	mov	r3, r9
    642c:	05db      	lsls	r3, r3, #23
    642e:	0ddb      	lsrs	r3, r3, #23
    6430:	18eb      	adds	r3, r5, r3
    6432:	3330      	adds	r3, #48	; 0x30
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	9303      	str	r3, [sp, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    6438:	465b      	mov	r3, fp
    643a:	0a5b      	lsrs	r3, r3, #9
    643c:	4699      	mov	r9, r3
    643e:	4489      	add	r9, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
    6440:	4591      	cmp	r9, r2
    6442:	d010      	beq.n	6466 <create_chain+0x32a>
    6444:	2130      	movs	r1, #48	; 0x30
    6446:	468a      	mov	sl, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6448:	792b      	ldrb	r3, [r5, #4]
    644a:	44aa      	add	sl, r5
    644c:	2b00      	cmp	r3, #0
    644e:	d128      	bne.n	64a2 <create_chain+0x366>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6450:	7868      	ldrb	r0, [r5, #1]
    6452:	2301      	movs	r3, #1
    6454:	464a      	mov	r2, r9
    6456:	4651      	mov	r1, sl
    6458:	4e22      	ldr	r6, [pc, #136]	; (64e4 <create_chain+0x3a8>)
    645a:	47b0      	blx	r6
    645c:	2800      	cmp	r0, #0
    645e:	d000      	beq.n	6462 <create_chain+0x326>
    6460:	e6ef      	b.n	6242 <create_chain+0x106>
			fs->winsect = sect;
    6462:	464b      	mov	r3, r9
    6464:	62eb      	str	r3, [r5, #44]	; 0x2c
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    6466:	465b      	mov	r3, fp
    6468:	05db      	lsls	r3, r3, #23
    646a:	0ddb      	lsrs	r3, r3, #23
    646c:	18ed      	adds	r5, r5, r3
    646e:	3530      	adds	r5, #48	; 0x30
    6470:	782b      	ldrb	r3, [r5, #0]
    6472:	9a03      	ldr	r2, [sp, #12]
    6474:	021b      	lsls	r3, r3, #8
    6476:	4313      	orrs	r3, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    6478:	07e2      	lsls	r2, r4, #31
    647a:	d4b6      	bmi.n	63ea <create_chain+0x2ae>
    647c:	051b      	lsls	r3, r3, #20
    647e:	0d1b      	lsrs	r3, r3, #20
    6480:	e7b4      	b.n	63ec <create_chain+0x2b0>
			fs->winsect = sect;
    6482:	464b      	mov	r3, r9
    6484:	62eb      	str	r3, [r5, #44]	; 0x2c
    6486:	e7a0      	b.n	63ca <create_chain+0x28e>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    6488:	68f3      	ldr	r3, [r6, #12]
    648a:	469b      	mov	fp, r3
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    648c:	2b01      	cmp	r3, #1
    648e:	d905      	bls.n	649c <create_chain+0x360>
    6490:	6973      	ldr	r3, [r6, #20]
    6492:	459b      	cmp	fp, r3
    6494:	d200      	bcs.n	6498 <create_chain+0x35c>
    6496:	e668      	b.n	616a <create_chain+0x2e>
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    6498:	46d3      	mov	fp, sl
    649a:	e666      	b.n	616a <create_chain+0x2e>
    649c:	6973      	ldr	r3, [r6, #20]
    649e:	46d3      	mov	fp, sl
    64a0:	e663      	b.n	616a <create_chain+0x2e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    64a2:	7868      	ldrb	r0, [r5, #1]
    64a4:	2301      	movs	r3, #1
    64a6:	4651      	mov	r1, sl
    64a8:	4e11      	ldr	r6, [pc, #68]	; (64f0 <create_chain+0x3b4>)
    64aa:	47b0      	blx	r6
    64ac:	2800      	cmp	r0, #0
    64ae:	d000      	beq.n	64b2 <create_chain+0x376>
    64b0:	e6a4      	b.n	61fc <create_chain+0xc0>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    64b2:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    64b4:	6a2b      	ldr	r3, [r5, #32]
    64b6:	69a9      	ldr	r1, [r5, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    64b8:	7128      	strb	r0, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    64ba:	1ad3      	subs	r3, r2, r3
    64bc:	428b      	cmp	r3, r1
    64be:	d2c7      	bcs.n	6450 <create_chain+0x314>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    64c0:	78eb      	ldrb	r3, [r5, #3]
    64c2:	2b02      	cmp	r3, #2
    64c4:	d1c4      	bne.n	6450 <create_chain+0x314>
    64c6:	1852      	adds	r2, r2, r1
    64c8:	7868      	ldrb	r0, [r5, #1]
    64ca:	3b01      	subs	r3, #1
    64cc:	4651      	mov	r1, sl
    64ce:	4e08      	ldr	r6, [pc, #32]	; (64f0 <create_chain+0x3b4>)
    64d0:	47b0      	blx	r6
    64d2:	e7bd      	b.n	6450 <create_chain+0x314>
    64d4:	9b02      	ldr	r3, [sp, #8]
    64d6:	4646      	mov	r6, r8
    64d8:	469a      	mov	sl, r3
    64da:	e6f4      	b.n	62c6 <create_chain+0x18a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    64dc:	2801      	cmp	r0, #1
    64de:	d100      	bne.n	64e2 <create_chain+0x3a6>
    64e0:	e68c      	b.n	61fc <create_chain+0xc0>
    64e2:	e65b      	b.n	619c <create_chain+0x60>
    64e4:	00008b95 	.word	0x00008b95
    64e8:	00005eed 	.word	0x00005eed
    64ec:	00005949 	.word	0x00005949
    64f0:	00008c85 	.word	0x00008c85

000064f4 <dir_sdi.constprop.14>:
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
    64f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64f6:	464e      	mov	r6, r9
    64f8:	4645      	mov	r5, r8
    64fa:	46de      	mov	lr, fp
    64fc:	4657      	mov	r7, sl
	FATFS *fs = dp->obj.fs;
    64fe:	6803      	ldr	r3, [r0, #0]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
    6500:	b5e0      	push	{r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
    6502:	4699      	mov	r9, r3
	dp->dptr = ofs;				/* Set current offset */
    6504:	2300      	movs	r3, #0
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    6506:	6884      	ldr	r4, [r0, #8]
static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
    6508:	b083      	sub	sp, #12
    650a:	4680      	mov	r8, r0
	dp->dptr = ofs;				/* Set current offset */
    650c:	6103      	str	r3, [r0, #16]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    650e:	2c00      	cmp	r4, #0
    6510:	d122      	bne.n	6558 <dir_sdi.constprop.14+0x64>
    6512:	464b      	mov	r3, r9
    6514:	781b      	ldrb	r3, [r3, #0]
    6516:	2b02      	cmp	r3, #2
    6518:	d903      	bls.n	6522 <dir_sdi.constprop.14+0x2e>
		clst = (DWORD)fs->dirbase;
    651a:	464b      	mov	r3, r9
    651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    651e:	2b00      	cmp	r3, #0
    6520:	d119      	bne.n	6556 <dir_sdi.constprop.14+0x62>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
    6522:	464b      	mov	r3, r9
    6524:	891b      	ldrh	r3, [r3, #8]
    6526:	2b00      	cmp	r3, #0
    6528:	d107      	bne.n	653a <dir_sdi.constprop.14+0x46>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    652a:	2002      	movs	r0, #2
}
    652c:	b003      	add	sp, #12
    652e:	bc3c      	pop	{r2, r3, r4, r5}
    6530:	4690      	mov	r8, r2
    6532:	4699      	mov	r9, r3
    6534:	46a2      	mov	sl, r4
    6536:	46ab      	mov	fp, r5
    6538:	bdf0      	pop	{r4, r5, r6, r7, pc}
		dp->sect = fs->dirbase;
    653a:	464b      	mov	r3, r9
    653c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    653e:	4643      	mov	r3, r8
    6540:	619a      	str	r2, [r3, #24]
	dp->clust = clst;					/* Current cluster# */
    6542:	4643      	mov	r3, r8
    6544:	615c      	str	r4, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
    6546:	2a00      	cmp	r2, #0
    6548:	d0ef      	beq.n	652a <dir_sdi.constprop.14+0x36>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    654a:	464b      	mov	r3, r9
    654c:	4642      	mov	r2, r8
    654e:	3330      	adds	r3, #48	; 0x30
    6550:	61d3      	str	r3, [r2, #28]
	return FR_OK;
    6552:	2000      	movs	r0, #0
    6554:	e7ea      	b.n	652c <dir_sdi.constprop.14+0x38>
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    6556:	001c      	movs	r4, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    6558:	464b      	mov	r3, r9
    655a:	895b      	ldrh	r3, [r3, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
    655c:	2b00      	cmp	r3, #0
    655e:	d000      	beq.n	6562 <dir_sdi.constprop.14+0x6e>
    6560:	e108      	b.n	6774 <dir_sdi.constprop.14+0x280>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6562:	4b9a      	ldr	r3, [pc, #616]	; (67cc <dir_sdi.constprop.14+0x2d8>)
		while (ofs >= csz) {				/* Follow cluster chain */
    6564:	464e      	mov	r6, r9
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6566:	469b      	mov	fp, r3
    6568:	4643      	mov	r3, r8
    656a:	464d      	mov	r5, r9
    656c:	9300      	str	r3, [sp, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    656e:	2c01      	cmp	r4, #1
    6570:	d9db      	bls.n	652a <dir_sdi.constprop.14+0x36>
    6572:	6973      	ldr	r3, [r6, #20]
    6574:	42a3      	cmp	r3, r4
    6576:	d9d8      	bls.n	652a <dir_sdi.constprop.14+0x36>
		switch (fs->fs_type) {
    6578:	7833      	ldrb	r3, [r6, #0]
    657a:	2b02      	cmp	r3, #2
    657c:	d051      	beq.n	6622 <dir_sdi.constprop.14+0x12e>
    657e:	2b03      	cmp	r3, #3
    6580:	d079      	beq.n	6676 <dir_sdi.constprop.14+0x182>
    6582:	2b01      	cmp	r3, #1
    6584:	d1d1      	bne.n	652a <dir_sdi.constprop.14+0x36>
			bc = (UINT)clst; bc += bc / 2;
    6586:	0863      	lsrs	r3, r4, #1
    6588:	4698      	mov	r8, r3
    658a:	44a0      	add	r8, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    658c:	4642      	mov	r2, r8
    658e:	0a52      	lsrs	r2, r2, #9
    6590:	4691      	mov	r9, r2
    6592:	6a33      	ldr	r3, [r6, #32]
	if (sect != fs->winsect) {	/* Window offset changed? */
    6594:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    6596:	4499      	add	r9, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    6598:	4591      	cmp	r9, r2
    659a:	d013      	beq.n	65c4 <dir_sdi.constprop.14+0xd0>
    659c:	2130      	movs	r1, #48	; 0x30
    659e:	468a      	mov	sl, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    65a0:	7933      	ldrb	r3, [r6, #4]
    65a2:	44b2      	add	sl, r6
    65a4:	2b00      	cmp	r3, #0
    65a6:	d000      	beq.n	65aa <dir_sdi.constprop.14+0xb6>
    65a8:	e093      	b.n	66d2 <dir_sdi.constprop.14+0x1de>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    65aa:	7870      	ldrb	r0, [r6, #1]
    65ac:	2301      	movs	r3, #1
    65ae:	464a      	mov	r2, r9
    65b0:	4651      	mov	r1, sl
    65b2:	4f86      	ldr	r7, [pc, #536]	; (67cc <dir_sdi.constprop.14+0x2d8>)
    65b4:	47b8      	blx	r7
    65b6:	2800      	cmp	r0, #0
    65b8:	d000      	beq.n	65bc <dir_sdi.constprop.14+0xc8>
    65ba:	e085      	b.n	66c8 <dir_sdi.constprop.14+0x1d4>
			fs->winsect = sect;
    65bc:	464b      	mov	r3, r9
    65be:	464a      	mov	r2, r9
    65c0:	62f3      	str	r3, [r6, #44]	; 0x2c
    65c2:	6a33      	ldr	r3, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    65c4:	2101      	movs	r1, #1
    65c6:	4441      	add	r1, r8
    65c8:	4689      	mov	r9, r1
    65ca:	4641      	mov	r1, r8
    65cc:	05c9      	lsls	r1, r1, #23
    65ce:	0dc9      	lsrs	r1, r1, #23
    65d0:	1871      	adds	r1, r6, r1
    65d2:	3130      	adds	r1, #48	; 0x30
    65d4:	7809      	ldrb	r1, [r1, #0]
    65d6:	9101      	str	r1, [sp, #4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    65d8:	4649      	mov	r1, r9
    65da:	0a49      	lsrs	r1, r1, #9
    65dc:	4688      	mov	r8, r1
    65de:	4498      	add	r8, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    65e0:	4590      	cmp	r8, r2
    65e2:	d010      	beq.n	6606 <dir_sdi.constprop.14+0x112>
    65e4:	2130      	movs	r1, #48	; 0x30
    65e6:	468a      	mov	sl, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    65e8:	7933      	ldrb	r3, [r6, #4]
    65ea:	44b2      	add	sl, r6
    65ec:	2b00      	cmp	r3, #0
    65ee:	d000      	beq.n	65f2 <dir_sdi.constprop.14+0xfe>
    65f0:	e0ce      	b.n	6790 <dir_sdi.constprop.14+0x29c>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    65f2:	7870      	ldrb	r0, [r6, #1]
    65f4:	2301      	movs	r3, #1
    65f6:	4642      	mov	r2, r8
    65f8:	4651      	mov	r1, sl
    65fa:	4f74      	ldr	r7, [pc, #464]	; (67cc <dir_sdi.constprop.14+0x2d8>)
    65fc:	47b8      	blx	r7
    65fe:	2800      	cmp	r0, #0
    6600:	d162      	bne.n	66c8 <dir_sdi.constprop.14+0x1d4>
			fs->winsect = sect;
    6602:	4643      	mov	r3, r8
    6604:	62f3      	str	r3, [r6, #44]	; 0x2c
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    6606:	464b      	mov	r3, r9
    6608:	05db      	lsls	r3, r3, #23
    660a:	0ddb      	lsrs	r3, r3, #23
    660c:	18f6      	adds	r6, r6, r3
    660e:	3630      	adds	r6, #48	; 0x30
    6610:	7833      	ldrb	r3, [r6, #0]
    6612:	9a01      	ldr	r2, [sp, #4]
    6614:	021b      	lsls	r3, r3, #8
    6616:	4313      	orrs	r3, r2
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    6618:	07e2      	lsls	r2, r4, #31
    661a:	d400      	bmi.n	661e <dir_sdi.constprop.14+0x12a>
    661c:	e0d2      	b.n	67c4 <dir_sdi.constprop.14+0x2d0>
    661e:	091c      	lsrs	r4, r3, #4
    6620:	e01f      	b.n	6662 <dir_sdi.constprop.14+0x16e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    6622:	6a32      	ldr	r2, [r6, #32]
    6624:	0a23      	lsrs	r3, r4, #8
    6626:	4690      	mov	r8, r2
	if (sect != fs->winsect) {	/* Window offset changed? */
    6628:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    662a:	4498      	add	r8, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    662c:	4590      	cmp	r8, r2
    662e:	d100      	bne.n	6632 <dir_sdi.constprop.14+0x13e>
    6630:	e09c      	b.n	676c <dir_sdi.constprop.14+0x278>
    6632:	2130      	movs	r1, #48	; 0x30
    6634:	4689      	mov	r9, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6636:	7933      	ldrb	r3, [r6, #4]
    6638:	44b1      	add	r9, r6
    663a:	2b00      	cmp	r3, #0
    663c:	d163      	bne.n	6706 <dir_sdi.constprop.14+0x212>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    663e:	7870      	ldrb	r0, [r6, #1]
    6640:	2301      	movs	r3, #1
    6642:	4642      	mov	r2, r8
    6644:	4649      	mov	r1, r9
    6646:	47d8      	blx	fp
    6648:	2800      	cmp	r0, #0
    664a:	d13d      	bne.n	66c8 <dir_sdi.constprop.14+0x1d4>
			fs->winsect = sect;
    664c:	4643      	mov	r3, r8
    664e:	62f3      	str	r3, [r6, #44]	; 0x2c
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    6650:	0063      	lsls	r3, r4, #1
    6652:	24ff      	movs	r4, #255	; 0xff
    6654:	0064      	lsls	r4, r4, #1
    6656:	4023      	ands	r3, r4
    6658:	444b      	add	r3, r9
	rv = rv << 8 | ptr[0];
    665a:	785c      	ldrb	r4, [r3, #1]
    665c:	781b      	ldrb	r3, [r3, #0]
    665e:	0224      	lsls	r4, r4, #8
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    6660:	431c      	orrs	r4, r3
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    6662:	2c01      	cmp	r4, #1
    6664:	d800      	bhi.n	6668 <dir_sdi.constprop.14+0x174>
    6666:	e760      	b.n	652a <dir_sdi.constprop.14+0x36>
    6668:	696b      	ldr	r3, [r5, #20]
    666a:	42a3      	cmp	r3, r4
    666c:	d800      	bhi.n	6670 <dir_sdi.constprop.14+0x17c>
    666e:	e75c      	b.n	652a <dir_sdi.constprop.14+0x36>
    6670:	9b00      	ldr	r3, [sp, #0]
    6672:	681e      	ldr	r6, [r3, #0]
    6674:	e77b      	b.n	656e <dir_sdi.constprop.14+0x7a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    6676:	6a32      	ldr	r2, [r6, #32]
    6678:	09e3      	lsrs	r3, r4, #7
    667a:	4690      	mov	r8, r2
	if (sect != fs->winsect) {	/* Window offset changed? */
    667c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    667e:	4498      	add	r8, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    6680:	4590      	cmp	r8, r2
    6682:	d06f      	beq.n	6764 <dir_sdi.constprop.14+0x270>
    6684:	2130      	movs	r1, #48	; 0x30
    6686:	4689      	mov	r9, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6688:	7933      	ldrb	r3, [r6, #4]
    668a:	44b1      	add	r9, r6
    668c:	2b00      	cmp	r3, #0
    668e:	d152      	bne.n	6736 <dir_sdi.constprop.14+0x242>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6690:	7870      	ldrb	r0, [r6, #1]
    6692:	2301      	movs	r3, #1
    6694:	4642      	mov	r2, r8
    6696:	4649      	mov	r1, r9
    6698:	4f4c      	ldr	r7, [pc, #304]	; (67cc <dir_sdi.constprop.14+0x2d8>)
    669a:	47b8      	blx	r7
    669c:	2800      	cmp	r0, #0
    669e:	d113      	bne.n	66c8 <dir_sdi.constprop.14+0x1d4>
			fs->winsect = sect;
    66a0:	4643      	mov	r3, r8
    66a2:	62f3      	str	r3, [r6, #44]	; 0x2c
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    66a4:	00a1      	lsls	r1, r4, #2
    66a6:	24fe      	movs	r4, #254	; 0xfe
    66a8:	0064      	lsls	r4, r4, #1
    66aa:	4021      	ands	r1, r4
    66ac:	4449      	add	r1, r9
	rv = rv << 8 | ptr[2];
    66ae:	78cb      	ldrb	r3, [r1, #3]
    66b0:	788a      	ldrb	r2, [r1, #2]
    66b2:	021b      	lsls	r3, r3, #8
	rv = rv << 8 | ptr[1];
    66b4:	784c      	ldrb	r4, [r1, #1]
	rv = rv << 8 | ptr[2];
    66b6:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    66b8:	021b      	lsls	r3, r3, #8
    66ba:	4323      	orrs	r3, r4
	rv = rv << 8 | ptr[0];
    66bc:	780c      	ldrb	r4, [r1, #0]
    66be:	021b      	lsls	r3, r3, #8
    66c0:	431c      	orrs	r4, r3
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    66c2:	0124      	lsls	r4, r4, #4
    66c4:	0924      	lsrs	r4, r4, #4
    66c6:	e7cc      	b.n	6662 <dir_sdi.constprop.14+0x16e>
			fs->winsect = sect;
    66c8:	2301      	movs	r3, #1
    66ca:	425b      	negs	r3, r3
    66cc:	62f3      	str	r3, [r6, #44]	; 0x2c
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    66ce:	2001      	movs	r0, #1
    66d0:	e72c      	b.n	652c <dir_sdi.constprop.14+0x38>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    66d2:	7870      	ldrb	r0, [r6, #1]
    66d4:	2301      	movs	r3, #1
    66d6:	4651      	mov	r1, sl
    66d8:	4f3d      	ldr	r7, [pc, #244]	; (67d0 <dir_sdi.constprop.14+0x2dc>)
    66da:	47b8      	blx	r7
    66dc:	2800      	cmp	r0, #0
    66de:	d1f6      	bne.n	66ce <dir_sdi.constprop.14+0x1da>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    66e0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    66e2:	6a33      	ldr	r3, [r6, #32]
    66e4:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    66e6:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    66e8:	1ad3      	subs	r3, r2, r3
    66ea:	428b      	cmp	r3, r1
    66ec:	d300      	bcc.n	66f0 <dir_sdi.constprop.14+0x1fc>
    66ee:	e75c      	b.n	65aa <dir_sdi.constprop.14+0xb6>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    66f0:	78f3      	ldrb	r3, [r6, #3]
    66f2:	2b02      	cmp	r3, #2
    66f4:	d000      	beq.n	66f8 <dir_sdi.constprop.14+0x204>
    66f6:	e758      	b.n	65aa <dir_sdi.constprop.14+0xb6>
    66f8:	1852      	adds	r2, r2, r1
    66fa:	7870      	ldrb	r0, [r6, #1]
    66fc:	3b01      	subs	r3, #1
    66fe:	4651      	mov	r1, sl
    6700:	4f33      	ldr	r7, [pc, #204]	; (67d0 <dir_sdi.constprop.14+0x2dc>)
    6702:	47b8      	blx	r7
    6704:	e751      	b.n	65aa <dir_sdi.constprop.14+0xb6>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6706:	7870      	ldrb	r0, [r6, #1]
    6708:	2301      	movs	r3, #1
    670a:	4649      	mov	r1, r9
    670c:	4f30      	ldr	r7, [pc, #192]	; (67d0 <dir_sdi.constprop.14+0x2dc>)
    670e:	47b8      	blx	r7
    6710:	2800      	cmp	r0, #0
    6712:	d1dc      	bne.n	66ce <dir_sdi.constprop.14+0x1da>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6714:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    6716:	6a33      	ldr	r3, [r6, #32]
    6718:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    671a:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    671c:	1ad3      	subs	r3, r2, r3
    671e:	428b      	cmp	r3, r1
    6720:	d28d      	bcs.n	663e <dir_sdi.constprop.14+0x14a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6722:	78f3      	ldrb	r3, [r6, #3]
    6724:	2b02      	cmp	r3, #2
    6726:	d18a      	bne.n	663e <dir_sdi.constprop.14+0x14a>
    6728:	1852      	adds	r2, r2, r1
    672a:	7870      	ldrb	r0, [r6, #1]
    672c:	3b01      	subs	r3, #1
    672e:	4649      	mov	r1, r9
    6730:	4f27      	ldr	r7, [pc, #156]	; (67d0 <dir_sdi.constprop.14+0x2dc>)
    6732:	47b8      	blx	r7
    6734:	e783      	b.n	663e <dir_sdi.constprop.14+0x14a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6736:	7870      	ldrb	r0, [r6, #1]
    6738:	2301      	movs	r3, #1
    673a:	4649      	mov	r1, r9
    673c:	4f24      	ldr	r7, [pc, #144]	; (67d0 <dir_sdi.constprop.14+0x2dc>)
    673e:	47b8      	blx	r7
    6740:	2800      	cmp	r0, #0
    6742:	d1c4      	bne.n	66ce <dir_sdi.constprop.14+0x1da>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6744:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    6746:	6a33      	ldr	r3, [r6, #32]
    6748:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    674a:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    674c:	1ad3      	subs	r3, r2, r3
    674e:	428b      	cmp	r3, r1
    6750:	d29e      	bcs.n	6690 <dir_sdi.constprop.14+0x19c>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6752:	78f3      	ldrb	r3, [r6, #3]
    6754:	2b02      	cmp	r3, #2
    6756:	d19b      	bne.n	6690 <dir_sdi.constprop.14+0x19c>
    6758:	1852      	adds	r2, r2, r1
    675a:	7870      	ldrb	r0, [r6, #1]
    675c:	3b01      	subs	r3, #1
    675e:	4649      	mov	r1, r9
    6760:	47b8      	blx	r7
    6762:	e795      	b.n	6690 <dir_sdi.constprop.14+0x19c>
    6764:	2330      	movs	r3, #48	; 0x30
    6766:	4699      	mov	r9, r3
    6768:	44b1      	add	r9, r6
    676a:	e79b      	b.n	66a4 <dir_sdi.constprop.14+0x1b0>
    676c:	2330      	movs	r3, #48	; 0x30
    676e:	4699      	mov	r9, r3
    6770:	44b1      	add	r9, r6
    6772:	e76d      	b.n	6650 <dir_sdi.constprop.14+0x15c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6774:	464a      	mov	r2, r9
    6776:	6952      	ldr	r2, [r2, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
    6778:	1ea0      	subs	r0, r4, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    677a:	1e91      	subs	r1, r2, #2
    677c:	2200      	movs	r2, #0
    677e:	4288      	cmp	r0, r1
    6780:	d203      	bcs.n	678a <dir_sdi.constprop.14+0x296>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    6782:	464a      	mov	r2, r9
    6784:	4343      	muls	r3, r0
    6786:	6a92      	ldr	r2, [r2, #40]	; 0x28
    6788:	189a      	adds	r2, r3, r2
		dp->sect = clst2sect(fs, clst);
    678a:	4643      	mov	r3, r8
    678c:	619a      	str	r2, [r3, #24]
    678e:	e6d8      	b.n	6542 <dir_sdi.constprop.14+0x4e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6790:	7870      	ldrb	r0, [r6, #1]
    6792:	2301      	movs	r3, #1
    6794:	4651      	mov	r1, sl
    6796:	4f0e      	ldr	r7, [pc, #56]	; (67d0 <dir_sdi.constprop.14+0x2dc>)
    6798:	47b8      	blx	r7
    679a:	2800      	cmp	r0, #0
    679c:	d197      	bne.n	66ce <dir_sdi.constprop.14+0x1da>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    679e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    67a0:	6a33      	ldr	r3, [r6, #32]
    67a2:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    67a4:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    67a6:	1ad3      	subs	r3, r2, r3
    67a8:	428b      	cmp	r3, r1
    67aa:	d300      	bcc.n	67ae <dir_sdi.constprop.14+0x2ba>
    67ac:	e721      	b.n	65f2 <dir_sdi.constprop.14+0xfe>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    67ae:	78f3      	ldrb	r3, [r6, #3]
    67b0:	2b02      	cmp	r3, #2
    67b2:	d000      	beq.n	67b6 <dir_sdi.constprop.14+0x2c2>
    67b4:	e71d      	b.n	65f2 <dir_sdi.constprop.14+0xfe>
    67b6:	1852      	adds	r2, r2, r1
    67b8:	7870      	ldrb	r0, [r6, #1]
    67ba:	3b01      	subs	r3, #1
    67bc:	4651      	mov	r1, sl
    67be:	4f04      	ldr	r7, [pc, #16]	; (67d0 <dir_sdi.constprop.14+0x2dc>)
    67c0:	47b8      	blx	r7
    67c2:	e716      	b.n	65f2 <dir_sdi.constprop.14+0xfe>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    67c4:	051c      	lsls	r4, r3, #20
    67c6:	0d24      	lsrs	r4, r4, #20
    67c8:	e74b      	b.n	6662 <dir_sdi.constprop.14+0x16e>
    67ca:	46c0      	nop			; (mov r8, r8)
    67cc:	00008b95 	.word	0x00008b95
    67d0:	00008c85 	.word	0x00008c85

000067d4 <dir_register>:
{
    67d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    67d6:	46de      	mov	lr, fp
    67d8:	464e      	mov	r6, r9
    67da:	4657      	mov	r7, sl
    67dc:	4645      	mov	r5, r8
    67de:	b5e0      	push	{r5, r6, r7, lr}
	res = dir_sdi(dp, 0);
    67e0:	4bc3      	ldr	r3, [pc, #780]	; (6af0 <dir_register+0x31c>)
{
    67e2:	b089      	sub	sp, #36	; 0x24
    67e4:	0004      	movs	r4, r0
	FATFS *fs = dp->obj.fs;
    67e6:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
    67e8:	4798      	blx	r3
    67ea:	4683      	mov	fp, r0
	if (res == FR_OK) {
    67ec:	2800      	cmp	r0, #0
    67ee:	d000      	beq.n	67f2 <dir_register+0x1e>
    67f0:	e091      	b.n	6916 <dir_register+0x142>
    67f2:	69a3      	ldr	r3, [r4, #24]
    67f4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    67f6:	469a      	mov	sl, r3
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    67f8:	4bbe      	ldr	r3, [pc, #760]	; (6af4 <dir_register+0x320>)
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    67fa:	4657      	mov	r7, sl
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    67fc:	4698      	mov	r8, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    67fe:	4297      	cmp	r7, r2
    6800:	d01b      	beq.n	683a <dir_register+0x66>
    6802:	0035      	movs	r5, r6
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6804:	7933      	ldrb	r3, [r6, #4]
    6806:	3530      	adds	r5, #48	; 0x30
    6808:	46a9      	mov	r9, r5
    680a:	2b00      	cmp	r3, #0
    680c:	d169      	bne.n	68e2 <dir_register+0x10e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    680e:	7870      	ldrb	r0, [r6, #1]
    6810:	2301      	movs	r3, #1
    6812:	003a      	movs	r2, r7
    6814:	4649      	mov	r1, r9
    6816:	47c0      	blx	r8
    6818:	2800      	cmp	r0, #0
    681a:	d00c      	beq.n	6836 <dir_register+0x62>
			fs->winsect = sect;
    681c:	2301      	movs	r3, #1
    681e:	425b      	negs	r3, r3
    6820:	62f3      	str	r3, [r6, #44]	; 0x2c
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6822:	2301      	movs	r3, #1
    6824:	469b      	mov	fp, r3
}
    6826:	4658      	mov	r0, fp
    6828:	b009      	add	sp, #36	; 0x24
    682a:	bc3c      	pop	{r2, r3, r4, r5}
    682c:	4690      	mov	r8, r2
    682e:	4699      	mov	r9, r3
    6830:	46a2      	mov	sl, r4
    6832:	46ab      	mov	fp, r5
    6834:	bdf0      	pop	{r4, r5, r6, r7, pc}
			fs->winsect = sect;
    6836:	003a      	movs	r2, r7
    6838:	62f7      	str	r7, [r6, #44]	; 0x2c
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    683a:	69e0      	ldr	r0, [r4, #28]
    683c:	7803      	ldrb	r3, [r0, #0]
    683e:	2be5      	cmp	r3, #229	; 0xe5
    6840:	d001      	beq.n	6846 <dir_register+0x72>
    6842:	2b00      	cmp	r3, #0
    6844:	d121      	bne.n	688a <dir_register+0xb6>
		res = move_window(fs, dp->sect);
    6846:	69a5      	ldr	r5, [r4, #24]
	if (sect != fs->winsect) {	/* Window offset changed? */
    6848:	4295      	cmp	r5, r2
    684a:	d011      	beq.n	6870 <dir_register+0x9c>
    684c:	0037      	movs	r7, r6
	if (fs->wflag) {	/* Is the disk access window dirty? */
    684e:	7933      	ldrb	r3, [r6, #4]
    6850:	3730      	adds	r7, #48	; 0x30
    6852:	46b9      	mov	r9, r7
    6854:	2b00      	cmp	r3, #0
    6856:	d000      	beq.n	685a <dir_register+0x86>
    6858:	e0d3      	b.n	6a02 <dir_register+0x22e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    685a:	7870      	ldrb	r0, [r6, #1]
    685c:	2301      	movs	r3, #1
    685e:	002a      	movs	r2, r5
    6860:	4649      	mov	r1, r9
    6862:	4fa4      	ldr	r7, [pc, #656]	; (6af4 <dir_register+0x320>)
    6864:	47b8      	blx	r7
    6866:	2800      	cmp	r0, #0
    6868:	d000      	beq.n	686c <dir_register+0x98>
    686a:	e0c4      	b.n	69f6 <dir_register+0x222>
    686c:	69e0      	ldr	r0, [r4, #28]
			fs->winsect = sect;
    686e:	62f5      	str	r5, [r6, #44]	; 0x2c
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
    6870:	2220      	movs	r2, #32
    6872:	2100      	movs	r1, #0
    6874:	4ba0      	ldr	r3, [pc, #640]	; (6af8 <dir_register+0x324>)
    6876:	4798      	blx	r3
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    6878:	0021      	movs	r1, r4
    687a:	4ba0      	ldr	r3, [pc, #640]	; (6afc <dir_register+0x328>)
    687c:	69e0      	ldr	r0, [r4, #28]
    687e:	3120      	adds	r1, #32
    6880:	220b      	movs	r2, #11
    6882:	4798      	blx	r3
			fs->wflag = 1;
    6884:	2301      	movs	r3, #1
    6886:	7133      	strb	r3, [r6, #4]
    6888:	e7cd      	b.n	6826 <dir_register+0x52>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    688a:	6925      	ldr	r5, [r4, #16]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    688c:	4b9c      	ldr	r3, [pc, #624]	; (6b00 <dir_register+0x32c>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    688e:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    6890:	429d      	cmp	r5, r3
    6892:	d904      	bls.n	689e <dir_register+0xca>
    6894:	2300      	movs	r3, #0
    6896:	61a3      	str	r3, [r4, #24]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    6898:	2307      	movs	r3, #7
    689a:	469b      	mov	fp, r3
	return res;
    689c:	e7c3      	b.n	6826 <dir_register+0x52>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    689e:	69a7      	ldr	r7, [r4, #24]
    68a0:	2f00      	cmp	r7, #0
    68a2:	d0f9      	beq.n	6898 <dir_register+0xc4>
	FATFS *fs = dp->obj.fs;
    68a4:	6823      	ldr	r3, [r4, #0]
    68a6:	469a      	mov	sl, r3
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    68a8:	05eb      	lsls	r3, r5, #23
    68aa:	0ddb      	lsrs	r3, r3, #23
    68ac:	4699      	mov	r9, r3
    68ae:	d111      	bne.n	68d4 <dir_register+0x100>
		if (dp->clust == 0) {	/* Static table */
    68b0:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
    68b2:	3701      	adds	r7, #1
    68b4:	61a7      	str	r7, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    68b6:	2900      	cmp	r1, #0
    68b8:	d106      	bne.n	68c8 <dir_register+0xf4>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    68ba:	4650      	mov	r0, sl
    68bc:	8900      	ldrh	r0, [r0, #8]
    68be:	096b      	lsrs	r3, r5, #5
    68c0:	4283      	cmp	r3, r0
    68c2:	d307      	bcc.n	68d4 <dir_register+0x100>
				dp->sect = 0; return FR_NO_FILE;
    68c4:	61a1      	str	r1, [r4, #24]
    68c6:	e7e7      	b.n	6898 <dir_register+0xc4>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    68c8:	4653      	mov	r3, sl
    68ca:	895b      	ldrh	r3, [r3, #10]
    68cc:	0a68      	lsrs	r0, r5, #9
    68ce:	3b01      	subs	r3, #1
    68d0:	4218      	tst	r0, r3
    68d2:	d023      	beq.n	691c <dir_register+0x148>
    68d4:	4653      	mov	r3, sl
    68d6:	3330      	adds	r3, #48	; 0x30
    68d8:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    68da:	444b      	add	r3, r9
	dp->dptr = ofs;						/* Current entry */
    68dc:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    68de:	61e3      	str	r3, [r4, #28]
    68e0:	e78d      	b.n	67fe <dir_register+0x2a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    68e2:	0029      	movs	r1, r5
    68e4:	7870      	ldrb	r0, [r6, #1]
    68e6:	2301      	movs	r3, #1
    68e8:	4d86      	ldr	r5, [pc, #536]	; (6b04 <dir_register+0x330>)
    68ea:	47a8      	blx	r5
    68ec:	2800      	cmp	r0, #0
    68ee:	d198      	bne.n	6822 <dir_register+0x4e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    68f0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    68f2:	6a33      	ldr	r3, [r6, #32]
    68f4:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    68f6:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    68f8:	1ad3      	subs	r3, r2, r3
    68fa:	428b      	cmp	r3, r1
    68fc:	d300      	bcc.n	6900 <dir_register+0x12c>
    68fe:	e786      	b.n	680e <dir_register+0x3a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6900:	78f3      	ldrb	r3, [r6, #3]
    6902:	2b02      	cmp	r3, #2
    6904:	d000      	beq.n	6908 <dir_register+0x134>
    6906:	e782      	b.n	680e <dir_register+0x3a>
    6908:	1852      	adds	r2, r2, r1
    690a:	7870      	ldrb	r0, [r6, #1]
    690c:	3b01      	subs	r3, #1
    690e:	4649      	mov	r1, r9
    6910:	4d7c      	ldr	r5, [pc, #496]	; (6b04 <dir_register+0x330>)
    6912:	47a8      	blx	r5
    6914:	e77b      	b.n	680e <dir_register+0x3a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    6916:	2804      	cmp	r0, #4
    6918:	d0be      	beq.n	6898 <dir_register+0xc4>
    691a:	e784      	b.n	6826 <dir_register+0x52>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    691c:	4b7a      	ldr	r3, [pc, #488]	; (6b08 <dir_register+0x334>)
    691e:	4650      	mov	r0, sl
    6920:	4798      	blx	r3
    6922:	0003      	movs	r3, r0
    6924:	9002      	str	r0, [sp, #8]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    6926:	2801      	cmp	r0, #1
    6928:	d800      	bhi.n	692c <dir_register+0x158>
    692a:	e084      	b.n	6a36 <dir_register+0x262>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    692c:	3301      	adds	r3, #1
    692e:	d100      	bne.n	6932 <dir_register+0x15e>
    6930:	e777      	b.n	6822 <dir_register+0x4e>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    6932:	4653      	mov	r3, sl
    6934:	9902      	ldr	r1, [sp, #8]
    6936:	695b      	ldr	r3, [r3, #20]
    6938:	000a      	movs	r2, r1
    693a:	4299      	cmp	r1, r3
    693c:	d200      	bcs.n	6940 <dir_register+0x16c>
    693e:	e07d      	b.n	6a3c <dir_register+0x268>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    6940:	4b72      	ldr	r3, [pc, #456]	; (6b0c <dir_register+0x338>)
    6942:	6961      	ldr	r1, [r4, #20]
    6944:	0020      	movs	r0, r4
    6946:	4798      	blx	r3
    6948:	1e03      	subs	r3, r0, #0
    694a:	9002      	str	r0, [sp, #8]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    694c:	d0a4      	beq.n	6898 <dir_register+0xc4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    694e:	2801      	cmp	r0, #1
    6950:	d071      	beq.n	6a36 <dir_register+0x262>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    6952:	3301      	adds	r3, #1
    6954:	d100      	bne.n	6958 <dir_register+0x184>
    6956:	e764      	b.n	6822 <dir_register+0x4e>
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6958:	4653      	mov	r3, sl
    695a:	2230      	movs	r2, #48	; 0x30
    695c:	791b      	ldrb	r3, [r3, #4]
    695e:	4452      	add	r2, sl
    6960:	9201      	str	r2, [sp, #4]
    6962:	2b00      	cmp	r3, #0
    6964:	d000      	beq.n	6968 <dir_register+0x194>
    6966:	e095      	b.n	6a94 <dir_register+0x2c0>
	clst -= 2;		/* Cluster number is origin from 2 */
    6968:	9b02      	ldr	r3, [sp, #8]
    696a:	3b02      	subs	r3, #2
    696c:	001a      	movs	r2, r3
    696e:	9303      	str	r3, [sp, #12]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6970:	4653      	mov	r3, sl
    6972:	695b      	ldr	r3, [r3, #20]
    6974:	3b02      	subs	r3, #2
    6976:	429a      	cmp	r2, r3
    6978:	d278      	bcs.n	6a6c <dir_register+0x298>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    697a:	4653      	mov	r3, sl
    697c:	895b      	ldrh	r3, [r3, #10]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    697e:	2100      	movs	r1, #0
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    6980:	435a      	muls	r2, r3
    6982:	001f      	movs	r7, r3
    6984:	0013      	movs	r3, r2
    6986:	4652      	mov	r2, sl
    6988:	6a92      	ldr	r2, [r2, #40]	; 0x28
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    698a:	9801      	ldr	r0, [sp, #4]
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    698c:	4694      	mov	ip, r2
	fs->winsect = sect;				/* Set window to top of the cluster */
    698e:	4652      	mov	r2, sl
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    6990:	4463      	add	r3, ip
	fs->winsect = sect;				/* Set window to top of the cluster */
    6992:	62d3      	str	r3, [r2, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    6994:	2280      	movs	r2, #128	; 0x80
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    6996:	9305      	str	r3, [sp, #20]
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    6998:	0092      	lsls	r2, r2, #2
    699a:	4b57      	ldr	r3, [pc, #348]	; (6af8 <dir_register+0x324>)
    699c:	4798      	blx	r3
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    699e:	2f00      	cmp	r7, #0
    69a0:	d100      	bne.n	69a4 <dir_register+0x1d0>
    69a2:	e0a1      	b.n	6ae8 <dir_register+0x314>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    69a4:	2300      	movs	r3, #0
    69a6:	9507      	str	r5, [sp, #28]
    69a8:	001d      	movs	r5, r3
    69aa:	0023      	movs	r3, r4
    69ac:	4a55      	ldr	r2, [pc, #340]	; (6b04 <dir_register+0x330>)
    69ae:	4654      	mov	r4, sl
    69b0:	9204      	str	r2, [sp, #16]
    69b2:	9606      	str	r6, [sp, #24]
    69b4:	9f02      	ldr	r7, [sp, #8]
    69b6:	469a      	mov	sl, r3
    69b8:	e004      	b.n	69c4 <dir_register+0x1f0>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    69ba:	8963      	ldrh	r3, [r4, #10]
    69bc:	3501      	adds	r5, #1
    69be:	429d      	cmp	r5, r3
    69c0:	d300      	bcc.n	69c4 <dir_register+0x1f0>
    69c2:	e089      	b.n	6ad8 <dir_register+0x304>
    69c4:	9b05      	ldr	r3, [sp, #20]
    69c6:	7860      	ldrb	r0, [r4, #1]
    69c8:	18ea      	adds	r2, r5, r3
    69ca:	9901      	ldr	r1, [sp, #4]
    69cc:	2301      	movs	r3, #1
    69ce:	9e04      	ldr	r6, [sp, #16]
    69d0:	47b0      	blx	r6
    69d2:	2800      	cmp	r0, #0
    69d4:	d0f1      	beq.n	69ba <dir_register+0x1e6>
    69d6:	4653      	mov	r3, sl
    69d8:	46a2      	mov	sl, r4
    69da:	001c      	movs	r4, r3
    69dc:	4653      	mov	r3, sl
    69de:	9702      	str	r7, [sp, #8]
    69e0:	0029      	movs	r1, r5
    69e2:	9e06      	ldr	r6, [sp, #24]
    69e4:	9d07      	ldr	r5, [sp, #28]
    69e6:	895b      	ldrh	r3, [r3, #10]
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    69e8:	428b      	cmp	r3, r1
    69ea:	d000      	beq.n	69ee <dir_register+0x21a>
    69ec:	e719      	b.n	6822 <dir_register+0x4e>
    69ee:	4653      	mov	r3, sl
    69f0:	9a02      	ldr	r2, [sp, #8]
    69f2:	695b      	ldr	r3, [r3, #20]
    69f4:	e028      	b.n	6a48 <dir_register+0x274>
			fs->winsect = sect;
    69f6:	2301      	movs	r3, #1
    69f8:	425b      	negs	r3, r3
    69fa:	62f3      	str	r3, [r6, #44]	; 0x2c
    69fc:	3302      	adds	r3, #2
    69fe:	469b      	mov	fp, r3
    6a00:	e711      	b.n	6826 <dir_register+0x52>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6a02:	0039      	movs	r1, r7
    6a04:	7870      	ldrb	r0, [r6, #1]
    6a06:	2301      	movs	r3, #1
    6a08:	4f3e      	ldr	r7, [pc, #248]	; (6b04 <dir_register+0x330>)
    6a0a:	47b8      	blx	r7
    6a0c:	2800      	cmp	r0, #0
    6a0e:	d000      	beq.n	6a12 <dir_register+0x23e>
    6a10:	e707      	b.n	6822 <dir_register+0x4e>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6a12:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    6a14:	6a33      	ldr	r3, [r6, #32]
    6a16:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    6a18:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6a1a:	1ad3      	subs	r3, r2, r3
    6a1c:	428b      	cmp	r3, r1
    6a1e:	d300      	bcc.n	6a22 <dir_register+0x24e>
    6a20:	e71b      	b.n	685a <dir_register+0x86>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6a22:	78f3      	ldrb	r3, [r6, #3]
    6a24:	2b02      	cmp	r3, #2
    6a26:	d000      	beq.n	6a2a <dir_register+0x256>
    6a28:	e717      	b.n	685a <dir_register+0x86>
    6a2a:	1852      	adds	r2, r2, r1
    6a2c:	7870      	ldrb	r0, [r6, #1]
    6a2e:	3b01      	subs	r3, #1
    6a30:	4649      	mov	r1, r9
    6a32:	47b8      	blx	r7
    6a34:	e711      	b.n	685a <dir_register+0x86>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    6a36:	2302      	movs	r3, #2
    6a38:	469b      	mov	fp, r3
    6a3a:	e6f4      	b.n	6826 <dir_register+0x52>
    6a3c:	3a02      	subs	r2, #2
    6a3e:	9203      	str	r2, [sp, #12]
    6a40:	2230      	movs	r2, #48	; 0x30
    6a42:	4452      	add	r2, sl
    6a44:	9201      	str	r2, [sp, #4]
    6a46:	000a      	movs	r2, r1
				dp->clust = clst;		/* Initialize data for new cluster */
    6a48:	6162      	str	r2, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6a4a:	9a03      	ldr	r2, [sp, #12]
    6a4c:	3b02      	subs	r3, #2
    6a4e:	2700      	movs	r7, #0
    6a50:	4293      	cmp	r3, r2
    6a52:	d907      	bls.n	6a64 <dir_register+0x290>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    6a54:	4653      	mov	r3, sl
    6a56:	895f      	ldrh	r7, [r3, #10]
    6a58:	9b03      	ldr	r3, [sp, #12]
    6a5a:	437b      	muls	r3, r7
    6a5c:	001f      	movs	r7, r3
    6a5e:	4653      	mov	r3, sl
    6a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6a62:	18ff      	adds	r7, r7, r3
				dp->sect = clst2sect(fs, clst);
    6a64:	61a7      	str	r7, [r4, #24]
    6a66:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    6a68:	9b01      	ldr	r3, [sp, #4]
    6a6a:	e736      	b.n	68da <dir_register+0x106>
    6a6c:	4653      	mov	r3, sl
    6a6e:	895b      	ldrh	r3, [r3, #10]
	fs->winsect = sect;				/* Set window to top of the cluster */
    6a70:	4652      	mov	r2, sl
    6a72:	001f      	movs	r7, r3
    6a74:	2300      	movs	r3, #0
    6a76:	62d3      	str	r3, [r2, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    6a78:	2280      	movs	r2, #128	; 0x80
    6a7a:	4b1f      	ldr	r3, [pc, #124]	; (6af8 <dir_register+0x324>)
    6a7c:	0092      	lsls	r2, r2, #2
    6a7e:	2100      	movs	r1, #0
    6a80:	9801      	ldr	r0, [sp, #4]
    6a82:	4798      	blx	r3
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6a84:	2300      	movs	r3, #0
    6a86:	9305      	str	r3, [sp, #20]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    6a88:	2f00      	cmp	r7, #0
    6a8a:	d18b      	bne.n	69a4 <dir_register+0x1d0>
				dp->clust = clst;		/* Initialize data for new cluster */
    6a8c:	9b02      	ldr	r3, [sp, #8]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6a8e:	2700      	movs	r7, #0
				dp->clust = clst;		/* Initialize data for new cluster */
    6a90:	6163      	str	r3, [r4, #20]
    6a92:	e7e7      	b.n	6a64 <dir_register+0x290>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6a94:	4653      	mov	r3, sl
    6a96:	0011      	movs	r1, r2
    6a98:	4652      	mov	r2, sl
    6a9a:	4f1a      	ldr	r7, [pc, #104]	; (6b04 <dir_register+0x330>)
    6a9c:	7858      	ldrb	r0, [r3, #1]
    6a9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    6aa0:	2301      	movs	r3, #1
    6aa2:	9704      	str	r7, [sp, #16]
    6aa4:	47b8      	blx	r7
    6aa6:	2800      	cmp	r0, #0
    6aa8:	d000      	beq.n	6aac <dir_register+0x2d8>
    6aaa:	e6ba      	b.n	6822 <dir_register+0x4e>
			fs->wflag = 0;	/* Clear window dirty flag */
    6aac:	4653      	mov	r3, sl
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			fs->wflag = 0;	/* Clear window dirty flag */
    6ab0:	7118      	strb	r0, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6ab2:	6999      	ldr	r1, [r3, #24]
    6ab4:	6a1b      	ldr	r3, [r3, #32]
    6ab6:	1ad3      	subs	r3, r2, r3
    6ab8:	428b      	cmp	r3, r1
    6aba:	d300      	bcc.n	6abe <dir_register+0x2ea>
    6abc:	e754      	b.n	6968 <dir_register+0x194>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6abe:	4653      	mov	r3, sl
    6ac0:	78db      	ldrb	r3, [r3, #3]
    6ac2:	2b02      	cmp	r3, #2
    6ac4:	d000      	beq.n	6ac8 <dir_register+0x2f4>
    6ac6:	e74f      	b.n	6968 <dir_register+0x194>
    6ac8:	4653      	mov	r3, sl
    6aca:	1852      	adds	r2, r2, r1
    6acc:	7858      	ldrb	r0, [r3, #1]
    6ace:	9901      	ldr	r1, [sp, #4]
    6ad0:	2301      	movs	r3, #1
    6ad2:	9f04      	ldr	r7, [sp, #16]
    6ad4:	47b8      	blx	r7
    6ad6:	e747      	b.n	6968 <dir_register+0x194>
    6ad8:	4652      	mov	r2, sl
    6ada:	0029      	movs	r1, r5
    6adc:	46a2      	mov	sl, r4
    6ade:	9e06      	ldr	r6, [sp, #24]
    6ae0:	9702      	str	r7, [sp, #8]
    6ae2:	9d07      	ldr	r5, [sp, #28]
    6ae4:	0014      	movs	r4, r2
    6ae6:	e77f      	b.n	69e8 <dir_register+0x214>
				dp->clust = clst;		/* Initialize data for new cluster */
    6ae8:	9b02      	ldr	r3, [sp, #8]
    6aea:	6163      	str	r3, [r4, #20]
    6aec:	e7b2      	b.n	6a54 <dir_register+0x280>
    6aee:	46c0      	nop			; (mov r8, r8)
    6af0:	000064f5 	.word	0x000064f5
    6af4:	00008b95 	.word	0x00008b95
    6af8:	0000b67d 	.word	0x0000b67d
    6afc:	0000b5f9 	.word	0x0000b5f9
    6b00:	001fffff 	.word	0x001fffff
    6b04:	00008c85 	.word	0x00008c85
    6b08:	00005eed 	.word	0x00005eed
    6b0c:	0000613d 	.word	0x0000613d

00006b10 <follow_path>:
{
    6b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b12:	46de      	mov	lr, fp
    6b14:	4657      	mov	r7, sl
    6b16:	464e      	mov	r6, r9
    6b18:	4645      	mov	r5, r8
    6b1a:	b5e0      	push	{r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
    6b1c:	6803      	ldr	r3, [r0, #0]
{
    6b1e:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
    6b20:	9303      	str	r3, [sp, #12]
{
    6b22:	0004      	movs	r4, r0
    6b24:	000b      	movs	r3, r1
		while (IsSeparator(*path)) path++;	/* Strip separators */
    6b26:	781a      	ldrb	r2, [r3, #0]
    6b28:	2a2f      	cmp	r2, #47	; 0x2f
    6b2a:	d001      	beq.n	6b30 <follow_path+0x20>
    6b2c:	2a5c      	cmp	r2, #92	; 0x5c
    6b2e:	d101      	bne.n	6b34 <follow_path+0x24>
    6b30:	3301      	adds	r3, #1
    6b32:	e7f8      	b.n	6b26 <follow_path+0x16>
    6b34:	469a      	mov	sl, r3
		dp->obj.sclust = 0;					/* Start from the root directory */
    6b36:	2300      	movs	r3, #0
    6b38:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    6b3a:	4653      	mov	r3, sl
    6b3c:	781b      	ldrb	r3, [r3, #0]
    6b3e:	2b1f      	cmp	r3, #31
    6b40:	d800      	bhi.n	6b44 <follow_path+0x34>
    6b42:	e13c      	b.n	6dbe <follow_path+0x2ae>
    6b44:	2320      	movs	r3, #32
    6b46:	469c      	mov	ip, r3
    6b48:	44a4      	add	ip, r4
    6b4a:	4663      	mov	r3, ip
    6b4c:	9300      	str	r3, [sp, #0]
	si = i = 0; ni = 8;
    6b4e:	2308      	movs	r3, #8
    6b50:	469b      	mov	fp, r3
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    6b52:	4653      	mov	r3, sl
    6b54:	9302      	str	r3, [sp, #8]
	memset(sfn, ' ', 11);
    6b56:	220b      	movs	r2, #11
    6b58:	4ba4      	ldr	r3, [pc, #656]	; (6dec <follow_path+0x2dc>)
    6b5a:	2120      	movs	r1, #32
    6b5c:	9800      	ldr	r0, [sp, #0]
    6b5e:	4798      	blx	r3
	si = i = 0; ni = 8;
    6b60:	2300      	movs	r3, #0
    6b62:	2701      	movs	r7, #1
    6b64:	4698      	mov	r8, r3
    6b66:	3308      	adds	r3, #8
    6b68:	4699      	mov	r9, r3
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    6b6a:	237f      	movs	r3, #127	; 0x7f
	memset(sfn, ' ', 11);
    6b6c:	9a02      	ldr	r2, [sp, #8]
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    6b6e:	469a      	mov	sl, r3
    6b70:	1abf      	subs	r7, r7, r2
    6b72:	003b      	movs	r3, r7
	memset(sfn, ' ', 11);
    6b74:	0016      	movs	r6, r2
    6b76:	4647      	mov	r7, r8
    6b78:	46a0      	mov	r8, r4
    6b7a:	001c      	movs	r4, r3
		c = (BYTE)p[si++];				/* Get a byte */
    6b7c:	7835      	ldrb	r5, [r6, #0]
    6b7e:	19a3      	adds	r3, r4, r6
		if (c <= ' ') break; 			/* Break if end of the path name */
    6b80:	2d20      	cmp	r5, #32
    6b82:	d91e      	bls.n	6bc2 <follow_path+0xb2>
		if (IsSeparator(c)) {			/* Break if a separator is found */
    6b84:	2d2f      	cmp	r5, #47	; 0x2f
    6b86:	d03d      	beq.n	6c04 <follow_path+0xf4>
    6b88:	2d5c      	cmp	r5, #92	; 0x5c
    6b8a:	d03b      	beq.n	6c04 <follow_path+0xf4>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    6b8c:	2d2e      	cmp	r5, #46	; 0x2e
    6b8e:	d02c      	beq.n	6bea <follow_path+0xda>
    6b90:	45b9      	cmp	r9, r7
    6b92:	d920      	bls.n	6bd6 <follow_path+0xc6>
		if (c >= 0x80) {				/* Is SBC extended character? */
    6b94:	b26b      	sxtb	r3, r5
    6b96:	2b00      	cmp	r3, #0
    6b98:	db2f      	blt.n	6bfa <follow_path+0xea>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    6b9a:	0029      	movs	r1, r5
    6b9c:	4894      	ldr	r0, [pc, #592]	; (6df0 <follow_path+0x2e0>)
    6b9e:	4b95      	ldr	r3, [pc, #596]	; (6df4 <follow_path+0x2e4>)
    6ba0:	4798      	blx	r3
    6ba2:	2800      	cmp	r0, #0
    6ba4:	d117      	bne.n	6bd6 <follow_path+0xc6>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    6ba6:	002b      	movs	r3, r5
    6ba8:	3b61      	subs	r3, #97	; 0x61
    6baa:	2b19      	cmp	r3, #25
    6bac:	d801      	bhi.n	6bb2 <follow_path+0xa2>
    6bae:	3d20      	subs	r5, #32
    6bb0:	b2ed      	uxtb	r5, r5
			sfn[i++] = c;
    6bb2:	9b00      	ldr	r3, [sp, #0]
    6bb4:	3601      	adds	r6, #1
    6bb6:	55dd      	strb	r5, [r3, r7]
    6bb8:	3701      	adds	r7, #1
		c = (BYTE)p[si++];				/* Get a byte */
    6bba:	7835      	ldrb	r5, [r6, #0]
    6bbc:	19a3      	adds	r3, r4, r6
		if (c <= ' ') break; 			/* Break if end of the path name */
    6bbe:	2d20      	cmp	r5, #32
    6bc0:	d8e0      	bhi.n	6b84 <follow_path+0x74>
    6bc2:	9a02      	ldr	r2, [sp, #8]
    6bc4:	4644      	mov	r4, r8
    6bc6:	4694      	mov	ip, r2
    6bc8:	449c      	add	ip, r3
    6bca:	4663      	mov	r3, ip
    6bcc:	46b8      	mov	r8, r7
    6bce:	9302      	str	r3, [sp, #8]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    6bd0:	4643      	mov	r3, r8
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	d126      	bne.n	6c24 <follow_path+0x114>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    6bd6:	2306      	movs	r3, #6
    6bd8:	9301      	str	r3, [sp, #4]
}
    6bda:	9801      	ldr	r0, [sp, #4]
    6bdc:	b005      	add	sp, #20
    6bde:	bc3c      	pop	{r2, r3, r4, r5}
    6be0:	4690      	mov	r8, r2
    6be2:	4699      	mov	r9, r3
    6be4:	46a2      	mov	sl, r4
    6be6:	46ab      	mov	fp, r5
    6be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    6bea:	464b      	mov	r3, r9
    6bec:	2b0b      	cmp	r3, #11
    6bee:	d0f2      	beq.n	6bd6 <follow_path+0xc6>
			i = 8; ni = 11;				/* Enter file extension field */
    6bf0:	230b      	movs	r3, #11
    6bf2:	2708      	movs	r7, #8
    6bf4:	4699      	mov	r9, r3
    6bf6:	3601      	adds	r6, #1
    6bf8:	e7df      	b.n	6bba <follow_path+0xaa>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    6bfa:	4653      	mov	r3, sl
    6bfc:	401d      	ands	r5, r3
    6bfe:	4b7e      	ldr	r3, [pc, #504]	; (6df8 <follow_path+0x2e8>)
    6c00:	5d5d      	ldrb	r5, [r3, r5]
    6c02:	e7ca      	b.n	6b9a <follow_path+0x8a>
    6c04:	9a02      	ldr	r2, [sp, #8]
    6c06:	4644      	mov	r4, r8
    6c08:	4694      	mov	ip, r2
    6c0a:	46b8      	mov	r8, r7
    6c0c:	4463      	add	r3, ip
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
    6c0e:	781a      	ldrb	r2, [r3, #0]
    6c10:	2a2f      	cmp	r2, #47	; 0x2f
    6c12:	d001      	beq.n	6c18 <follow_path+0x108>
    6c14:	2a5c      	cmp	r2, #92	; 0x5c
    6c16:	d101      	bne.n	6c1c <follow_path+0x10c>
    6c18:	3301      	adds	r3, #1
    6c1a:	e7f8      	b.n	6c0e <follow_path+0xfe>
    6c1c:	9302      	str	r3, [sp, #8]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    6c1e:	4643      	mov	r3, r8
    6c20:	2b00      	cmp	r3, #0
    6c22:	d0d8      	beq.n	6bd6 <follow_path+0xc6>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    6c24:	2320      	movs	r3, #32
    6c26:	5ce2      	ldrb	r2, [r4, r3]
    6c28:	2ae5      	cmp	r2, #229	; 0xe5
    6c2a:	d100      	bne.n	6c2e <follow_path+0x11e>
    6c2c:	e0d7      	b.n	6dde <follow_path+0x2ce>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    6c2e:	2304      	movs	r3, #4
    6c30:	2d20      	cmp	r5, #32
    6c32:	d900      	bls.n	6c36 <follow_path+0x126>
    6c34:	e0cb      	b.n	6dce <follow_path+0x2be>
    6c36:	252b      	movs	r5, #43	; 0x2b
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    6c38:	0020      	movs	r0, r4
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    6c3a:	5563      	strb	r3, [r4, r5]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    6c3c:	4b6f      	ldr	r3, [pc, #444]	; (6dfc <follow_path+0x2ec>)
	FATFS *fs = dp->obj.fs;
    6c3e:	6827      	ldr	r7, [r4, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    6c40:	4798      	blx	r3
    6c42:	9001      	str	r0, [sp, #4]
	if (res != FR_OK) return res;
    6c44:	2800      	cmp	r0, #0
    6c46:	d000      	beq.n	6c4a <follow_path+0x13a>
    6c48:	e0b1      	b.n	6dae <follow_path+0x29e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6c4a:	4b6d      	ldr	r3, [pc, #436]	; (6e00 <follow_path+0x2f0>)
    6c4c:	69a6      	ldr	r6, [r4, #24]
    6c4e:	469a      	mov	sl, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    6c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6c52:	42b2      	cmp	r2, r6
    6c54:	d013      	beq.n	6c7e <follow_path+0x16e>
    6c56:	003d      	movs	r5, r7
	if (fs->wflag) {	/* Is the disk access window dirty? */
    6c58:	793b      	ldrb	r3, [r7, #4]
    6c5a:	3530      	adds	r5, #48	; 0x30
    6c5c:	46a8      	mov	r8, r5
    6c5e:	2b00      	cmp	r3, #0
    6c60:	d16a      	bne.n	6d38 <follow_path+0x228>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6c62:	7878      	ldrb	r0, [r7, #1]
    6c64:	2301      	movs	r3, #1
    6c66:	0032      	movs	r2, r6
    6c68:	4641      	mov	r1, r8
    6c6a:	47d0      	blx	sl
    6c6c:	2800      	cmp	r0, #0
    6c6e:	d005      	beq.n	6c7c <follow_path+0x16c>
			fs->winsect = sect;
    6c70:	2301      	movs	r3, #1
    6c72:	425b      	negs	r3, r3
    6c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c76:	3302      	adds	r3, #2
    6c78:	9301      	str	r3, [sp, #4]
    6c7a:	e7ae      	b.n	6bda <follow_path+0xca>
    6c7c:	62fe      	str	r6, [r7, #44]	; 0x2c
		c = dp->dir[DIR_Name];
    6c7e:	69e0      	ldr	r0, [r4, #28]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    6c80:	7803      	ldrb	r3, [r0, #0]
    6c82:	2b00      	cmp	r3, #0
    6c84:	d031      	beq.n	6cea <follow_path+0x1da>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    6c86:	233f      	movs	r3, #63	; 0x3f
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    6c88:	465a      	mov	r2, fp
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    6c8a:	7ac5      	ldrb	r5, [r0, #11]
    6c8c:	402b      	ands	r3, r5
    6c8e:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    6c90:	7ac3      	ldrb	r3, [r0, #11]
    6c92:	421a      	tst	r2, r3
    6c94:	d105      	bne.n	6ca2 <follow_path+0x192>
    6c96:	220b      	movs	r2, #11
    6c98:	9900      	ldr	r1, [sp, #0]
    6c9a:	4b5a      	ldr	r3, [pc, #360]	; (6e04 <follow_path+0x2f4>)
    6c9c:	4798      	blx	r3
    6c9e:	2800      	cmp	r0, #0
    6ca0:	d063      	beq.n	6d6a <follow_path+0x25a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    6ca2:	6925      	ldr	r5, [r4, #16]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    6ca4:	4b58      	ldr	r3, [pc, #352]	; (6e08 <follow_path+0x2f8>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    6ca6:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    6ca8:	429d      	cmp	r5, r3
    6caa:	d909      	bls.n	6cc0 <follow_path+0x1b0>
    6cac:	2300      	movs	r3, #0
    6cae:	61a3      	str	r3, [r4, #24]
			ns = dp->fn[NSFLAG];
    6cb0:	332b      	adds	r3, #43	; 0x2b
    6cb2:	5ce3      	ldrb	r3, [r4, r3]
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    6cb4:	075b      	lsls	r3, r3, #29
    6cb6:	d500      	bpl.n	6cba <follow_path+0x1aa>
    6cb8:	e094      	b.n	6de4 <follow_path+0x2d4>
    6cba:	2305      	movs	r3, #5
    6cbc:	9301      	str	r3, [sp, #4]
    6cbe:	e78c      	b.n	6bda <follow_path+0xca>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    6cc0:	69a6      	ldr	r6, [r4, #24]
    6cc2:	2e00      	cmp	r6, #0
    6cc4:	d011      	beq.n	6cea <follow_path+0x1da>
	FATFS *fs = dp->obj.fs;
    6cc6:	6823      	ldr	r3, [r4, #0]
    6cc8:	4698      	mov	r8, r3
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    6cca:	05eb      	lsls	r3, r5, #23
    6ccc:	0ddb      	lsrs	r3, r3, #23
    6cce:	4699      	mov	r9, r3
    6cd0:	d12c      	bne.n	6d2c <follow_path+0x21c>
		if (dp->clust == 0) {	/* Static table */
    6cd2:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
    6cd4:	3601      	adds	r6, #1
    6cd6:	61a6      	str	r6, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    6cd8:	2900      	cmp	r1, #0
    6cda:	d109      	bne.n	6cf0 <follow_path+0x1e0>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    6cdc:	4642      	mov	r2, r8
    6cde:	8912      	ldrh	r2, [r2, #8]
    6ce0:	096b      	lsrs	r3, r5, #5
    6ce2:	4293      	cmp	r3, r2
    6ce4:	d322      	bcc.n	6d2c <follow_path+0x21c>
				dp->sect = 0; return FR_NO_FILE;
    6ce6:	2300      	movs	r3, #0
    6ce8:	61a3      	str	r3, [r4, #24]
			ns = dp->fn[NSFLAG];
    6cea:	232b      	movs	r3, #43	; 0x2b
    6cec:	5ce3      	ldrb	r3, [r4, r3]
    6cee:	e7e1      	b.n	6cb4 <follow_path+0x1a4>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    6cf0:	4643      	mov	r3, r8
    6cf2:	895b      	ldrh	r3, [r3, #10]
    6cf4:	0a6a      	lsrs	r2, r5, #9
    6cf6:	3b01      	subs	r3, #1
    6cf8:	421a      	tst	r2, r3
    6cfa:	d117      	bne.n	6d2c <follow_path+0x21c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    6cfc:	4640      	mov	r0, r8
    6cfe:	4b43      	ldr	r3, [pc, #268]	; (6e0c <follow_path+0x2fc>)
    6d00:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    6d02:	2801      	cmp	r0, #1
    6d04:	d958      	bls.n	6db8 <follow_path+0x2a8>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    6d06:	1c43      	adds	r3, r0, #1
    6d08:	d04e      	beq.n	6da8 <follow_path+0x298>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    6d0a:	4643      	mov	r3, r8
    6d0c:	695b      	ldr	r3, [r3, #20]
    6d0e:	4298      	cmp	r0, r3
    6d10:	d2e9      	bcs.n	6ce6 <follow_path+0x1d6>
				dp->clust = clst;		/* Initialize data for new cluster */
    6d12:	6160      	str	r0, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6d14:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
    6d16:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    6d18:	2600      	movs	r6, #0
    6d1a:	4298      	cmp	r0, r3
    6d1c:	d205      	bcs.n	6d2a <follow_path+0x21a>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    6d1e:	4643      	mov	r3, r8
    6d20:	895e      	ldrh	r6, [r3, #10]
    6d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d24:	4346      	muls	r6, r0
    6d26:	469c      	mov	ip, r3
    6d28:	4466      	add	r6, ip
				dp->sect = clst2sect(fs, clst);
    6d2a:	61a6      	str	r6, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    6d2c:	4643      	mov	r3, r8
    6d2e:	3330      	adds	r3, #48	; 0x30
    6d30:	444b      	add	r3, r9
	dp->dptr = ofs;						/* Current entry */
    6d32:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    6d34:	61e3      	str	r3, [r4, #28]
    6d36:	e78b      	b.n	6c50 <follow_path+0x140>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    6d38:	0029      	movs	r1, r5
    6d3a:	7878      	ldrb	r0, [r7, #1]
    6d3c:	2301      	movs	r3, #1
    6d3e:	4d34      	ldr	r5, [pc, #208]	; (6e10 <follow_path+0x300>)
    6d40:	47a8      	blx	r5
    6d42:	2800      	cmp	r0, #0
    6d44:	d130      	bne.n	6da8 <follow_path+0x298>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6d48:	6a3b      	ldr	r3, [r7, #32]
    6d4a:	69b9      	ldr	r1, [r7, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    6d4c:	7138      	strb	r0, [r7, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    6d4e:	1ad3      	subs	r3, r2, r3
    6d50:	428b      	cmp	r3, r1
    6d52:	d286      	bcs.n	6c62 <follow_path+0x152>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    6d54:	78fb      	ldrb	r3, [r7, #3]
    6d56:	2b02      	cmp	r3, #2
    6d58:	d000      	beq.n	6d5c <follow_path+0x24c>
    6d5a:	e782      	b.n	6c62 <follow_path+0x152>
    6d5c:	1852      	adds	r2, r2, r1
    6d5e:	7878      	ldrb	r0, [r7, #1]
    6d60:	3b01      	subs	r3, #1
    6d62:	4641      	mov	r1, r8
    6d64:	4d2a      	ldr	r5, [pc, #168]	; (6e10 <follow_path+0x300>)
    6d66:	47a8      	blx	r5
    6d68:	e77b      	b.n	6c62 <follow_path+0x152>
			ns = dp->fn[NSFLAG];
    6d6a:	232b      	movs	r3, #43	; 0x2b
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
    6d6c:	5ce3      	ldrb	r3, [r4, r3]
    6d6e:	075b      	lsls	r3, r3, #29
    6d70:	d500      	bpl.n	6d74 <follow_path+0x264>
    6d72:	e732      	b.n	6bda <follow_path+0xca>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    6d74:	06eb      	lsls	r3, r5, #27
    6d76:	d5a0      	bpl.n	6cba <follow_path+0x1aa>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    6d78:	6923      	ldr	r3, [r4, #16]
    6d7a:	9803      	ldr	r0, [sp, #12]
    6d7c:	05da      	lsls	r2, r3, #23
    6d7e:	0003      	movs	r3, r0
    6d80:	0dd2      	lsrs	r2, r2, #23
    6d82:	3330      	adds	r3, #48	; 0x30
    6d84:	189b      	adds	r3, r3, r2
	rv = rv << 8 | ptr[0];
    6d86:	7ed9      	ldrb	r1, [r3, #27]
    6d88:	7e9a      	ldrb	r2, [r3, #26]
    6d8a:	0209      	lsls	r1, r1, #8
	cl = ld_word(dir + DIR_FstClusLO);
    6d8c:	430a      	orrs	r2, r1
	if (fs->fs_type == FS_FAT32) {
    6d8e:	7801      	ldrb	r1, [r0, #0]
    6d90:	2903      	cmp	r1, #3
    6d92:	d001      	beq.n	6d98 <follow_path+0x288>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    6d94:	60a2      	str	r2, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
    6d96:	e6de      	b.n	6b56 <follow_path+0x46>
	rv = rv << 8 | ptr[0];
    6d98:	7d59      	ldrb	r1, [r3, #21]
    6d9a:	7d1b      	ldrb	r3, [r3, #20]
    6d9c:	0209      	lsls	r1, r1, #8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    6d9e:	430b      	orrs	r3, r1
    6da0:	041b      	lsls	r3, r3, #16
    6da2:	431a      	orrs	r2, r3
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    6da4:	60a2      	str	r2, [r4, #8]
    6da6:	e6d6      	b.n	6b56 <follow_path+0x46>
			fs->winsect = sect;
    6da8:	2301      	movs	r3, #1
    6daa:	9301      	str	r3, [sp, #4]
    6dac:	e715      	b.n	6bda <follow_path+0xca>
			ns = dp->fn[NSFLAG];
    6dae:	5d63      	ldrb	r3, [r4, r5]
				if (res == FR_NO_FILE) {	/* Object is not found */
    6db0:	2804      	cmp	r0, #4
    6db2:	d000      	beq.n	6db6 <follow_path+0x2a6>
    6db4:	e711      	b.n	6bda <follow_path+0xca>
    6db6:	e77d      	b.n	6cb4 <follow_path+0x1a4>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    6db8:	2302      	movs	r3, #2
    6dba:	9301      	str	r3, [sp, #4]
	return res;
    6dbc:	e70d      	b.n	6bda <follow_path+0xca>
		dp->fn[NSFLAG] = NS_NONAME;
    6dbe:	2280      	movs	r2, #128	; 0x80
    6dc0:	232b      	movs	r3, #43	; 0x2b
		res = dir_sdi(dp, 0);
    6dc2:	0020      	movs	r0, r4
		dp->fn[NSFLAG] = NS_NONAME;
    6dc4:	54e2      	strb	r2, [r4, r3]
		res = dir_sdi(dp, 0);
    6dc6:	4b0d      	ldr	r3, [pc, #52]	; (6dfc <follow_path+0x2ec>)
    6dc8:	4798      	blx	r3
    6dca:	9001      	str	r0, [sp, #4]
    6dcc:	e705      	b.n	6bda <follow_path+0xca>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    6dce:	9b02      	ldr	r3, [sp, #8]
    6dd0:	2120      	movs	r1, #32
    6dd2:	781a      	ldrb	r2, [r3, #0]
    6dd4:	2300      	movs	r3, #0
    6dd6:	4291      	cmp	r1, r2
    6dd8:	415b      	adcs	r3, r3
    6dda:	009b      	lsls	r3, r3, #2
    6ddc:	e72b      	b.n	6c36 <follow_path+0x126>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    6dde:	3ae0      	subs	r2, #224	; 0xe0
    6de0:	54e2      	strb	r2, [r4, r3]
    6de2:	e724      	b.n	6c2e <follow_path+0x11e>
    6de4:	2304      	movs	r3, #4
    6de6:	9301      	str	r3, [sp, #4]
    6de8:	e6f7      	b.n	6bda <follow_path+0xca>
    6dea:	46c0      	nop			; (mov r8, r8)
    6dec:	0000b67d 	.word	0x0000b67d
    6df0:	00018868 	.word	0x00018868
    6df4:	0000ba39 	.word	0x0000ba39
    6df8:	000187dc 	.word	0x000187dc
    6dfc:	000064f5 	.word	0x000064f5
    6e00:	00008b95 	.word	0x00008b95
    6e04:	0000b5ad 	.word	0x0000b5ad
    6e08:	001fffff 	.word	0x001fffff
    6e0c:	00005eed 	.word	0x00005eed
    6e10:	00008c85 	.word	0x00008c85

00006e14 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
    6e14:	b510      	push	{r4, lr}
    6e16:	b082      	sub	sp, #8
    6e18:	9001      	str	r0, [sp, #4]
    6e1a:	1e0b      	subs	r3, r1, #0
    6e1c:	9100      	str	r1, [sp, #0]
	if (!tp) return vol;	/* Invalid path name? */
    6e1e:	d103      	bne.n	6e28 <f_mount+0x14>
    6e20:	e027      	b.n	6e72 <f_mount+0x5e>
		tc = *tt++;
    6e22:	0023      	movs	r3, r4
	} while (!IsTerminator(tc) && tc != ':');
    6e24:	283a      	cmp	r0, #58	; 0x3a
    6e26:	d01c      	beq.n	6e62 <f_mount+0x4e>
		tc = *tt++;
    6e28:	7818      	ldrb	r0, [r3, #0]
    6e2a:	1c5c      	adds	r4, r3, #1
	} while (!IsTerminator(tc) && tc != ':');
    6e2c:	2820      	cmp	r0, #32
    6e2e:	d8f8      	bhi.n	6e22 <f_mount+0xe>


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
    6e30:	4911      	ldr	r1, [pc, #68]	; (6e78 <f_mount+0x64>)
    6e32:	680b      	ldr	r3, [r1, #0]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
    6e34:	2b00      	cmp	r3, #0
    6e36:	d002      	beq.n	6e3e <f_mount+0x2a>
		FatFs[vol] = 0;
    6e38:	2000      	movs	r0, #0
    6e3a:	6008      	str	r0, [r1, #0]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
    6e3c:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
    6e3e:	9b01      	ldr	r3, [sp, #4]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d003      	beq.n	6e4c <f_mount+0x38>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
    6e44:	2000      	movs	r0, #0
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
		FatFs[vol] = fs;		/* Register new fs object */
    6e46:	600b      	str	r3, [r1, #0]
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
    6e48:	7058      	strb	r0, [r3, #1]
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
    6e4a:	7018      	strb	r0, [r3, #0]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
    6e4c:	2000      	movs	r0, #0
    6e4e:	2a00      	cmp	r2, #0
    6e50:	d101      	bne.n	6e56 <f_mount+0x42>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    6e52:	b002      	add	sp, #8
    6e54:	bd10      	pop	{r4, pc}
	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    6e56:	2200      	movs	r2, #0
    6e58:	a901      	add	r1, sp, #4
    6e5a:	4668      	mov	r0, sp
    6e5c:	4b07      	ldr	r3, [pc, #28]	; (6e7c <f_mount+0x68>)
    6e5e:	4798      	blx	r3
	LEAVE_FF(fs, res);
    6e60:	e7f7      	b.n	6e52 <f_mount+0x3e>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    6e62:	780c      	ldrb	r4, [r1, #0]
    6e64:	3102      	adds	r1, #2
	if (vol < 0) return FR_INVALID_DRIVE;
    6e66:	200b      	movs	r0, #11
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    6e68:	428b      	cmp	r3, r1
    6e6a:	d1f2      	bne.n	6e52 <f_mount+0x3e>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    6e6c:	2c30      	cmp	r4, #48	; 0x30
    6e6e:	d0df      	beq.n	6e30 <f_mount+0x1c>
    6e70:	e7ef      	b.n	6e52 <f_mount+0x3e>
	if (vol < 0) return FR_INVALID_DRIVE;
    6e72:	200b      	movs	r0, #11
    6e74:	e7ed      	b.n	6e52 <f_mount+0x3e>
    6e76:	46c0      	nop			; (mov r8, r8)
    6e78:	20000b50 	.word	0x20000b50
    6e7c:	000053ed 	.word	0x000053ed

00006e80 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
    6e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    6e82:	464e      	mov	r6, r9
    6e84:	46de      	mov	lr, fp
    6e86:	4657      	mov	r7, sl
    6e88:	4645      	mov	r5, r8
    6e8a:	b5e0      	push	{r5, r6, r7, lr}
    6e8c:	0004      	movs	r4, r0
    6e8e:	b091      	sub	sp, #68	; 0x44
    6e90:	000e      	movs	r6, r1
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    6e92:	2009      	movs	r0, #9
    6e94:	2c00      	cmp	r4, #0
    6e96:	d02e      	beq.n	6ef6 <f_open+0x76>
	if (!tp) return vol;	/* Invalid path name? */
    6e98:	2900      	cmp	r1, #0
    6e9a:	d029      	beq.n	6ef0 <f_open+0x70>
    6e9c:	000b      	movs	r3, r1
    6e9e:	0017      	movs	r7, r2
    6ea0:	e002      	b.n	6ea8 <f_open+0x28>
		tc = *tt++;
    6ea2:	000b      	movs	r3, r1
	} while (!IsTerminator(tc) && tc != ':');
    6ea4:	2a3a      	cmp	r2, #58	; 0x3a
    6ea6:	d01e      	beq.n	6ee6 <f_open+0x66>
		tc = *tt++;
    6ea8:	781a      	ldrb	r2, [r3, #0]
    6eaa:	1c59      	adds	r1, r3, #1
	} while (!IsTerminator(tc) && tc != ':');
    6eac:	2a20      	cmp	r2, #32
    6eae:	d8f8      	bhi.n	6ea2 <f_open+0x22>
    6eb0:	9700      	str	r7, [sp, #0]
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    6eb2:	4bd0      	ldr	r3, [pc, #832]	; (71f4 <f_open+0x374>)
    6eb4:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    6eb6:	2d00      	cmp	r5, #0
    6eb8:	d100      	bne.n	6ebc <f_open+0x3c>
    6eba:	e125      	b.n	7108 <f_open+0x288>
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    6ebc:	233e      	movs	r3, #62	; 0x3e
    6ebe:	9a00      	ldr	r2, [sp, #0]
    6ec0:	4013      	ands	r3, r2
    6ec2:	4698      	mov	r8, r3
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    6ec4:	782b      	ldrb	r3, [r5, #0]
    6ec6:	2b00      	cmp	r3, #0
    6ec8:	d01c      	beq.n	6f04 <f_open+0x84>
		stat = disk_status(fs->pdrv);
    6eca:	4bcb      	ldr	r3, [pc, #812]	; (71f8 <f_open+0x378>)
    6ecc:	7868      	ldrb	r0, [r5, #1]
    6ece:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    6ed0:	07c3      	lsls	r3, r0, #31
    6ed2:	d417      	bmi.n	6f04 <f_open+0x84>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    6ed4:	4643      	mov	r3, r8
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d100      	bne.n	6edc <f_open+0x5c>
    6eda:	e0f4      	b.n	70c6 <f_open+0x246>
    6edc:	0743      	lsls	r3, r0, #29
    6ede:	d400      	bmi.n	6ee2 <f_open+0x62>
    6ee0:	e0f1      	b.n	70c6 <f_open+0x246>
				return FR_WRITE_PROTECTED;
    6ee2:	200a      	movs	r0, #10
    6ee4:	e005      	b.n	6ef2 <f_open+0x72>
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    6ee6:	1cb2      	adds	r2, r6, #2
    6ee8:	9700      	str	r7, [sp, #0]
    6eea:	4291      	cmp	r1, r2
    6eec:	d100      	bne.n	6ef0 <f_open+0x70>
    6eee:	e1aa      	b.n	7246 <f_open+0x3c6>
	if (vol < 0) return FR_INVALID_DRIVE;
    6ef0:	200b      	movs	r0, #11
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    6ef2:	2300      	movs	r3, #0
    6ef4:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
    6ef6:	b011      	add	sp, #68	; 0x44
    6ef8:	bc3c      	pop	{r2, r3, r4, r5}
    6efa:	4690      	mov	r8, r2
    6efc:	4699      	mov	r9, r3
    6efe:	46a2      	mov	sl, r4
    6f00:	46ab      	mov	fp, r5
    6f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    6f04:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    6f06:	7868      	ldrb	r0, [r5, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    6f08:	702b      	strb	r3, [r5, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    6f0a:	4bbc      	ldr	r3, [pc, #752]	; (71fc <f_open+0x37c>)
    6f0c:	4798      	blx	r3
    6f0e:	0003      	movs	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    6f10:	2003      	movs	r0, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    6f12:	07da      	lsls	r2, r3, #31
    6f14:	d4ed      	bmi.n	6ef2 <f_open+0x72>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    6f16:	4642      	mov	r2, r8
    6f18:	2a00      	cmp	r2, #0
    6f1a:	d001      	beq.n	6f20 <f_open+0xa0>
    6f1c:	075b      	lsls	r3, r3, #29
    6f1e:	d4e0      	bmi.n	6ee2 <f_open+0x62>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    6f20:	2300      	movs	r3, #0
    6f22:	712b      	strb	r3, [r5, #4]
    6f24:	3b01      	subs	r3, #1
    6f26:	62eb      	str	r3, [r5, #44]	; 0x2c
    6f28:	469a      	mov	sl, r3
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    6f2a:	3331      	adds	r3, #49	; 0x31
    6f2c:	4698      	mov	r8, r3
    6f2e:	44a8      	add	r8, r5
    6f30:	4fb3      	ldr	r7, [pc, #716]	; (7200 <f_open+0x380>)
    6f32:	7868      	ldrb	r0, [r5, #1]
    6f34:	3b2f      	subs	r3, #47	; 0x2f
    6f36:	2200      	movs	r2, #0
    6f38:	4641      	mov	r1, r8
    6f3a:	47b8      	blx	r7
    6f3c:	46b9      	mov	r9, r7
    6f3e:	4683      	mov	fp, r0
    6f40:	2800      	cmp	r0, #0
    6f42:	d003      	beq.n	6f4c <f_open+0xcc>
			fs->winsect = sect;
    6f44:	4653      	mov	r3, sl
    6f46:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    6f48:	2001      	movs	r0, #1
    6f4a:	e7d2      	b.n	6ef2 <f_open+0x72>
			fs->winsect = sect;
    6f4c:	62e8      	str	r0, [r5, #44]	; 0x2c
    6f4e:	4bad      	ldr	r3, [pc, #692]	; (7204 <f_open+0x384>)
    6f50:	0028      	movs	r0, r5
    6f52:	4798      	blx	r3
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    6f54:	2802      	cmp	r0, #2
    6f56:	d100      	bne.n	6f5a <f_open+0xda>
    6f58:	e1ad      	b.n	72b6 <f_open+0x436>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    6f5a:	2804      	cmp	r0, #4
    6f5c:	d0f4      	beq.n	6f48 <f_open+0xc8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    6f5e:	2801      	cmp	r0, #1
    6f60:	d900      	bls.n	6f64 <f_open+0xe4>
    6f62:	e212      	b.n	738a <f_open+0x50a>
	rv = ptr[1];
    6f64:	233c      	movs	r3, #60	; 0x3c
	rv = rv << 8 | ptr[0];
    6f66:	5cea      	ldrb	r2, [r5, r3]
    6f68:	3b01      	subs	r3, #1
    6f6a:	5ceb      	ldrb	r3, [r5, r3]
    6f6c:	0212      	lsls	r2, r2, #8
    6f6e:	4313      	orrs	r3, r2
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    6f70:	2280      	movs	r2, #128	; 0x80
    6f72:	b21b      	sxth	r3, r3
    6f74:	0092      	lsls	r2, r2, #2
    6f76:	4293      	cmp	r3, r2
    6f78:	d000      	beq.n	6f7c <f_open+0xfc>
    6f7a:	e206      	b.n	738a <f_open+0x50a>
	rv = ptr[1];
    6f7c:	2347      	movs	r3, #71	; 0x47
	rv = rv << 8 | ptr[0];
    6f7e:	3abb      	subs	r2, #187	; 0xbb
    6f80:	5ceb      	ldrb	r3, [r5, r3]
    6f82:	3aff      	subs	r2, #255	; 0xff
    6f84:	5caa      	ldrb	r2, [r5, r2]
    6f86:	021b      	lsls	r3, r3, #8
    6f88:	431a      	orrs	r2, r3
    6f8a:	4692      	mov	sl, r2
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    6f8c:	1e13      	subs	r3, r2, #0
    6f8e:	d10f      	bne.n	6fb0 <f_open+0x130>
	rv = rv << 8 | ptr[2];
    6f90:	3356      	adds	r3, #86	; 0x56
    6f92:	5cea      	ldrb	r2, [r5, r3]
    6f94:	002b      	movs	r3, r5
    6f96:	3356      	adds	r3, #86	; 0x56
    6f98:	785b      	ldrb	r3, [r3, #1]
    6f9a:	021b      	lsls	r3, r3, #8
    6f9c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    6f9e:	2255      	movs	r2, #85	; 0x55
    6fa0:	5caa      	ldrb	r2, [r5, r2]
    6fa2:	021b      	lsls	r3, r3, #8
    6fa4:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    6fa6:	2254      	movs	r2, #84	; 0x54
    6fa8:	5caa      	ldrb	r2, [r5, r2]
    6faa:	021b      	lsls	r3, r3, #8
    6fac:	431a      	orrs	r2, r3
    6fae:	4692      	mov	sl, r2
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
    6fb0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    6fb2:	4699      	mov	r9, r3
		fs->fsize = fasize;
    6fb4:	4653      	mov	r3, sl
    6fb6:	61ab      	str	r3, [r5, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    6fb8:	2340      	movs	r3, #64	; 0x40
    6fba:	5ceb      	ldrb	r3, [r5, r3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    6fbc:	1e5a      	subs	r2, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    6fbe:	70eb      	strb	r3, [r5, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    6fc0:	2a01      	cmp	r2, #1
    6fc2:	d900      	bls.n	6fc6 <f_open+0x146>
    6fc4:	e1e1      	b.n	738a <f_open+0x50a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    6fc6:	4652      	mov	r2, sl
    6fc8:	435a      	muls	r2, r3
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    6fca:	233d      	movs	r3, #61	; 0x3d
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    6fcc:	9201      	str	r2, [sp, #4]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    6fce:	5ce9      	ldrb	r1, [r5, r3]
    6fd0:	b28b      	uxth	r3, r1
    6fd2:	816b      	strh	r3, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    6fd4:	2b00      	cmp	r3, #0
    6fd6:	d100      	bne.n	6fda <f_open+0x15a>
    6fd8:	e1d7      	b.n	738a <f_open+0x50a>
    6fda:	1e4b      	subs	r3, r1, #1
    6fdc:	4219      	tst	r1, r3
    6fde:	d000      	beq.n	6fe2 <f_open+0x162>
    6fe0:	e1d3      	b.n	738a <f_open+0x50a>
	rv = ptr[1];
    6fe2:	2342      	movs	r3, #66	; 0x42
	rv = rv << 8 | ptr[0];
    6fe4:	2241      	movs	r2, #65	; 0x41
    6fe6:	5ceb      	ldrb	r3, [r5, r3]
    6fe8:	5caa      	ldrb	r2, [r5, r2]
    6fea:	021b      	lsls	r3, r3, #8
    6fec:	431a      	orrs	r2, r3
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    6fee:	0013      	movs	r3, r2
	rv = rv << 8 | ptr[0];
    6ff0:	4693      	mov	fp, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    6ff2:	812a      	strh	r2, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    6ff4:	071b      	lsls	r3, r3, #28
    6ff6:	d000      	beq.n	6ffa <f_open+0x17a>
    6ff8:	e1c7      	b.n	738a <f_open+0x50a>
	rv = ptr[1];
    6ffa:	2344      	movs	r3, #68	; 0x44
	rv = rv << 8 | ptr[0];
    6ffc:	2243      	movs	r2, #67	; 0x43
    6ffe:	5ceb      	ldrb	r3, [r5, r3]
    7000:	5ca8      	ldrb	r0, [r5, r2]
    7002:	021b      	lsls	r3, r3, #8
    7004:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    7006:	d10e      	bne.n	7026 <f_open+0x1a6>
	rv = rv << 8 | ptr[2];
    7008:	2352      	movs	r3, #82	; 0x52
    700a:	5cea      	ldrb	r2, [r5, r3]
    700c:	002b      	movs	r3, r5
    700e:	3352      	adds	r3, #82	; 0x52
    7010:	785b      	ldrb	r3, [r3, #1]
    7012:	021b      	lsls	r3, r3, #8
    7014:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7016:	2251      	movs	r2, #81	; 0x51
    7018:	5ca8      	ldrb	r0, [r5, r2]
    701a:	021b      	lsls	r3, r3, #8
	rv = rv << 8 | ptr[0];
    701c:	3a01      	subs	r2, #1
	rv = rv << 8 | ptr[1];
    701e:	4303      	orrs	r3, r0
	rv = rv << 8 | ptr[0];
    7020:	5ca8      	ldrb	r0, [r5, r2]
    7022:	021b      	lsls	r3, r3, #8
    7024:	4318      	orrs	r0, r3
	rv = ptr[1];
    7026:	233f      	movs	r3, #63	; 0x3f
	rv = rv << 8 | ptr[0];
    7028:	223e      	movs	r2, #62	; 0x3e
    702a:	5ceb      	ldrb	r3, [r5, r3]
    702c:	5caa      	ldrb	r2, [r5, r2]
    702e:	021b      	lsls	r3, r3, #8
    7030:	431a      	orrs	r2, r3
    7032:	4690      	mov	r8, r2
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    7034:	d100      	bne.n	7038 <f_open+0x1b8>
    7036:	e1a8      	b.n	738a <f_open+0x50a>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    7038:	465b      	mov	r3, fp
    703a:	9a01      	ldr	r2, [sp, #4]
    703c:	091b      	lsrs	r3, r3, #4
    703e:	4694      	mov	ip, r2
    7040:	4443      	add	r3, r8
    7042:	4463      	add	r3, ip
    7044:	001f      	movs	r7, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    7046:	4283      	cmp	r3, r0
    7048:	d900      	bls.n	704c <f_open+0x1cc>
    704a:	e19e      	b.n	738a <f_open+0x50a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    704c:	1ac0      	subs	r0, r0, r3
    704e:	4b6e      	ldr	r3, [pc, #440]	; (7208 <f_open+0x388>)
    7050:	4798      	blx	r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    7052:	4b6e      	ldr	r3, [pc, #440]	; (720c <f_open+0x38c>)
    7054:	1e42      	subs	r2, r0, #1
    7056:	429a      	cmp	r2, r3
    7058:	d900      	bls.n	705c <f_open+0x1dc>
    705a:	e196      	b.n	738a <f_open+0x50a>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    705c:	4b6c      	ldr	r3, [pc, #432]	; (7210 <f_open+0x390>)
    705e:	4298      	cmp	r0, r3
    7060:	d900      	bls.n	7064 <f_open+0x1e4>
    7062:	e214      	b.n	748e <f_open+0x60e>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    7064:	4b6b      	ldr	r3, [pc, #428]	; (7214 <f_open+0x394>)
    7066:	4298      	cmp	r0, r3
    7068:	d900      	bls.n	706c <f_open+0x1ec>
    706a:	e1fc      	b.n	7466 <f_open+0x5e6>
		fs->volbase = bsect;							/* Volume start sector */
    706c:	464b      	mov	r3, r9
		fs->database = bsect + sysect;					/* Data start sector */
    706e:	003a      	movs	r2, r7
		fs->volbase = bsect;							/* Volume start sector */
    7070:	61eb      	str	r3, [r5, #28]
		fs->database = bsect + sysect;					/* Data start sector */
    7072:	444a      	add	r2, r9
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    7074:	4643      	mov	r3, r8
		fs->database = bsect + sysect;					/* Data start sector */
    7076:	62aa      	str	r2, [r5, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    7078:	465a      	mov	r2, fp
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    707a:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    707c:	444b      	add	r3, r9
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    707e:	6168      	str	r0, [r5, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    7080:	622b      	str	r3, [r5, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    7082:	2a00      	cmp	r2, #0
    7084:	d100      	bne.n	7088 <f_open+0x208>
    7086:	e180      	b.n	738a <f_open+0x50a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    7088:	9a01      	ldr	r2, [sp, #4]
    708a:	4694      	mov	ip, r2
    708c:	4463      	add	r3, ip
    708e:	626b      	str	r3, [r5, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    7090:	2303      	movs	r3, #3
    7092:	2201      	movs	r2, #1
    7094:	4343      	muls	r3, r0
    7096:	4010      	ands	r0, r2
    7098:	085b      	lsrs	r3, r3, #1
    709a:	1818      	adds	r0, r3, r0
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    709c:	4b5e      	ldr	r3, [pc, #376]	; (7218 <f_open+0x398>)
    709e:	469c      	mov	ip, r3
    70a0:	4460      	add	r0, ip
    70a2:	0a43      	lsrs	r3, r0, #9
    70a4:	200d      	movs	r0, #13
    70a6:	459a      	cmp	sl, r3
    70a8:	d200      	bcs.n	70ac <f_open+0x22c>
    70aa:	e722      	b.n	6ef2 <f_open+0x72>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    70ac:	2301      	movs	r3, #1
    70ae:	425b      	negs	r3, r3
    70b0:	612b      	str	r3, [r5, #16]
    70b2:	60eb      	str	r3, [r5, #12]
		fs->fsi_flag = 0x80;
    70b4:	3381      	adds	r3, #129	; 0x81
    70b6:	716b      	strb	r3, [r5, #5]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
    70b8:	702a      	strb	r2, [r5, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    70ba:	4a58      	ldr	r2, [pc, #352]	; (721c <f_open+0x39c>)
    70bc:	8813      	ldrh	r3, [r2, #0]
    70be:	3301      	adds	r3, #1
    70c0:	b29b      	uxth	r3, r3
    70c2:	8013      	strh	r3, [r2, #0]
    70c4:	80eb      	strh	r3, [r5, #6]
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    70c6:	233f      	movs	r3, #63	; 0x3f
    70c8:	9a00      	ldr	r2, [sp, #0]
		res = follow_path(&dj, path);	/* Follow the file path */
    70ca:	0031      	movs	r1, r6
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    70cc:	4013      	ands	r3, r2
    70ce:	4698      	mov	r8, r3
		res = follow_path(&dj, path);	/* Follow the file path */
    70d0:	a805      	add	r0, sp, #20
    70d2:	4b53      	ldr	r3, [pc, #332]	; (7220 <f_open+0x3a0>)
		dj.obj.fs = fs;
    70d4:	9505      	str	r5, [sp, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
    70d6:	4798      	blx	r3
		if (res == FR_OK) {
    70d8:	2800      	cmp	r0, #0
    70da:	d117      	bne.n	710c <f_open+0x28c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    70dc:	232b      	movs	r3, #43	; 0x2b
    70de:	aa05      	add	r2, sp, #20
    70e0:	5cd3      	ldrb	r3, [r2, r3]
    70e2:	2b7f      	cmp	r3, #127	; 0x7f
    70e4:	d900      	bls.n	70e8 <f_open+0x268>
    70e6:	e0e2      	b.n	72ae <f_open+0x42e>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    70e8:	231c      	movs	r3, #28
    70ea:	9a00      	ldr	r2, [sp, #0]
    70ec:	4213      	tst	r3, r2
    70ee:	d100      	bne.n	70f2 <f_open+0x272>
    70f0:	e0af      	b.n	7252 <f_open+0x3d2>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    70f2:	2211      	movs	r2, #17
    70f4:	ab04      	add	r3, sp, #16
    70f6:	7a9b      	ldrb	r3, [r3, #10]
    70f8:	421a      	tst	r2, r3
    70fa:	d000      	beq.n	70fe <f_open+0x27e>
    70fc:	e0b2      	b.n	7264 <f_open+0x3e4>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    70fe:	9b00      	ldr	r3, [sp, #0]
    7100:	075b      	lsls	r3, r3, #29
    7102:	d515      	bpl.n	7130 <f_open+0x2b0>
    7104:	2008      	movs	r0, #8
    7106:	e6f4      	b.n	6ef2 <f_open+0x72>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    7108:	200c      	movs	r0, #12
    710a:	e6f2      	b.n	6ef2 <f_open+0x72>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    710c:	231c      	movs	r3, #28
    710e:	9a00      	ldr	r2, [sp, #0]
    7110:	4213      	tst	r3, r2
    7112:	d100      	bne.n	7116 <f_open+0x296>
    7114:	e6ed      	b.n	6ef2 <f_open+0x72>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    7116:	2804      	cmp	r0, #4
    7118:	d000      	beq.n	711c <f_open+0x29c>
    711a:	e6ea      	b.n	6ef2 <f_open+0x72>
					res = dir_register(&dj);
    711c:	a805      	add	r0, sp, #20
    711e:	4b41      	ldr	r3, [pc, #260]	; (7224 <f_open+0x3a4>)
    7120:	4798      	blx	r3
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    7122:	2800      	cmp	r0, #0
    7124:	d000      	beq.n	7128 <f_open+0x2a8>
    7126:	e6e4      	b.n	6ef2 <f_open+0x72>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    7128:	4642      	mov	r2, r8
    712a:	2308      	movs	r3, #8
    712c:	431a      	orrs	r2, r3
    712e:	4690      	mov	r8, r2
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    7130:	4643      	mov	r3, r8
    7132:	071b      	lsls	r3, r3, #28
    7134:	d52e      	bpl.n	7194 <f_open+0x314>
	*ptr++ = (BYTE)val; val >>= 8;
    7136:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
    7138:	2066      	movs	r0, #102	; 0x66
	*ptr++ = (BYTE)val;
    713a:	2155      	movs	r1, #85	; 0x55
					st_dword(dj.dir + DIR_CrtTime, tm);
    713c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
    713e:	739a      	strb	r2, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
    7140:	73da      	strb	r2, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
    7142:	7418      	strb	r0, [r3, #16]
	*ptr++ = (BYTE)val;
    7144:	7459      	strb	r1, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, tm);
    7146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
    7148:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
    714a:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
    714c:	7618      	strb	r0, [r3, #24]
	*ptr++ = (BYTE)val;
    714e:	7659      	strb	r1, [r3, #25]
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    7150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	rv = rv << 8 | ptr[0];
    7152:	7eda      	ldrb	r2, [r3, #27]
    7154:	7e9e      	ldrb	r6, [r3, #26]
    7156:	0212      	lsls	r2, r2, #8
	cl = ld_word(dir + DIR_FstClusLO);
    7158:	4316      	orrs	r6, r2
	if (fs->fs_type == FS_FAT32) {
    715a:	782a      	ldrb	r2, [r5, #0]
    715c:	2a03      	cmp	r2, #3
    715e:	d100      	bne.n	7162 <f_open+0x2e2>
    7160:	e12a      	b.n	73b8 <f_open+0x538>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    7162:	2220      	movs	r2, #32
    7164:	72da      	strb	r2, [r3, #11]
	*ptr++ = (BYTE)val; val >>= 8;
    7166:	2200      	movs	r2, #0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    7168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
    716a:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
    716c:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
    716e:	7829      	ldrb	r1, [r5, #0]
    7170:	2903      	cmp	r1, #3
    7172:	d100      	bne.n	7176 <f_open+0x2f6>
    7174:	e11d      	b.n	73b2 <f_open+0x532>
	*ptr++ = (BYTE)val; val >>= 8;
    7176:	2200      	movs	r2, #0
					st_dword(dj.dir + DIR_FileSize, 0);
    7178:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
    717a:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
    717c:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
    717e:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
    7180:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
    7182:	2301      	movs	r3, #1
    7184:	712b      	strb	r3, [r5, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
    7186:	2e00      	cmp	r6, #0
    7188:	d000      	beq.n	718c <f_open+0x30c>
    718a:	e100      	b.n	738e <f_open+0x50e>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    718c:	4642      	mov	r2, r8
    718e:	2340      	movs	r3, #64	; 0x40
    7190:	431a      	orrs	r2, r3
    7192:	4690      	mov	r8, r2
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    7194:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    7196:	6223      	str	r3, [r4, #32]
			fp->dir_ptr = dj.dir;
    7198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    719a:	6263      	str	r3, [r4, #36]	; 0x24
	rv = rv << 8 | ptr[0];
    719c:	7ed9      	ldrb	r1, [r3, #27]
    719e:	7e98      	ldrb	r0, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
    71a0:	782a      	ldrb	r2, [r5, #0]
	rv = rv << 8 | ptr[0];
    71a2:	0209      	lsls	r1, r1, #8
	cl = ld_word(dir + DIR_FstClusLO);
    71a4:	4301      	orrs	r1, r0
	if (fs->fs_type == FS_FAT32) {
    71a6:	2a03      	cmp	r2, #3
    71a8:	d100      	bne.n	71ac <f_open+0x32c>
    71aa:	e079      	b.n	72a0 <f_open+0x420>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    71ac:	60a1      	str	r1, [r4, #8]
	rv = rv << 8 | ptr[2];
    71ae:	7fda      	ldrb	r2, [r3, #31]
    71b0:	7f98      	ldrb	r0, [r3, #30]
    71b2:	0212      	lsls	r2, r2, #8
	rv = rv << 8 | ptr[1];
    71b4:	7f5e      	ldrb	r6, [r3, #29]
	rv = rv << 8 | ptr[2];
    71b6:	4302      	orrs	r2, r0
	rv = rv << 8 | ptr[1];
    71b8:	0212      	lsls	r2, r2, #8
    71ba:	4332      	orrs	r2, r6
	rv = rv << 8 | ptr[0];
    71bc:	7f1e      	ldrb	r6, [r3, #28]
    71be:	0212      	lsls	r2, r2, #8
    71c0:	4316      	orrs	r6, r2
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    71c2:	60e6      	str	r6, [r4, #12]
			fp->obj.fs = fs;	/* Validate the file object */
    71c4:	6025      	str	r5, [r4, #0]
			fp->obj.id = fs->id;
    71c6:	88eb      	ldrh	r3, [r5, #6]
    71c8:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;	/* Set file access mode */
    71ca:	4643      	mov	r3, r8
    71cc:	7423      	strb	r3, [r4, #16]
			fp->err = 0;		/* Clear error flag */
    71ce:	2300      	movs	r3, #0
    71d0:	7463      	strb	r3, [r4, #17]
			fp->sect = 0;		/* Invalidate current data sector */
    71d2:	61e3      	str	r3, [r4, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
    71d4:	6163      	str	r3, [r4, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    71d6:	4643      	mov	r3, r8
    71d8:	069b      	lsls	r3, r3, #26
    71da:	d55c      	bpl.n	7296 <f_open+0x416>
    71dc:	2e00      	cmp	r6, #0
    71de:	d05a      	beq.n	7296 <f_open+0x416>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    71e0:	6166      	str	r6, [r4, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    71e2:	896f      	ldrh	r7, [r5, #10]
    71e4:	027f      	lsls	r7, r7, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    71e6:	42b7      	cmp	r7, r6
    71e8:	d242      	bcs.n	7270 <f_open+0x3f0>
    71ea:	4b0f      	ldr	r3, [pc, #60]	; (7228 <f_open+0x3a8>)
    71ec:	1bf6      	subs	r6, r6, r7
    71ee:	0028      	movs	r0, r5
    71f0:	4698      	mov	r8, r3
    71f2:	e021      	b.n	7238 <f_open+0x3b8>
    71f4:	20000b50 	.word	0x20000b50
    71f8:	00008a51 	.word	0x00008a51
    71fc:	00008a65 	.word	0x00008a65
    7200:	00008b95 	.word	0x00008b95
    7204:	00005135 	.word	0x00005135
    7208:	000091b5 	.word	0x000091b5
    720c:	0ffffff4 	.word	0x0ffffff4
    7210:	0000fff5 	.word	0x0000fff5
    7214:	00000ff5 	.word	0x00000ff5
    7218:	000001ff 	.word	0x000001ff
    721c:	20000b54 	.word	0x20000b54
    7220:	00006b11 	.word	0x00006b11
    7224:	000067d5 	.word	0x000067d5
    7228:	00005eed 	.word	0x00005eed
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    722c:	1c43      	adds	r3, r0, #1
    722e:	d034      	beq.n	729a <f_open+0x41a>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    7230:	42b7      	cmp	r7, r6
    7232:	d21d      	bcs.n	7270 <f_open+0x3f0>
    7234:	6820      	ldr	r0, [r4, #0]
    7236:	1bf6      	subs	r6, r6, r7
					clst = get_fat(&fp->obj, clst);
    7238:	47c0      	blx	r8
    723a:	0001      	movs	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
    723c:	2801      	cmp	r0, #1
    723e:	d8f5      	bhi.n	722c <f_open+0x3ac>
    7240:	2002      	movs	r0, #2
				fp->clust = clst;
    7242:	61a1      	str	r1, [r4, #24]
    7244:	e655      	b.n	6ef2 <f_open+0x72>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    7246:	7832      	ldrb	r2, [r6, #0]
    7248:	2a30      	cmp	r2, #48	; 0x30
    724a:	d000      	beq.n	724e <f_open+0x3ce>
    724c:	e650      	b.n	6ef0 <f_open+0x70>
    724e:	001e      	movs	r6, r3
    7250:	e62f      	b.n	6eb2 <f_open+0x32>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    7252:	ab04      	add	r3, sp, #16
    7254:	7a9b      	ldrb	r3, [r3, #10]
    7256:	06da      	lsls	r2, r3, #27
    7258:	d42b      	bmi.n	72b2 <f_open+0x432>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    725a:	9a00      	ldr	r2, [sp, #0]
    725c:	0792      	lsls	r2, r2, #30
    725e:	d503      	bpl.n	7268 <f_open+0x3e8>
    7260:	07db      	lsls	r3, r3, #31
    7262:	d501      	bpl.n	7268 <f_open+0x3e8>
					res = FR_DENIED;
    7264:	2007      	movs	r0, #7
    7266:	e644      	b.n	6ef2 <f_open+0x72>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    7268:	9b00      	ldr	r3, [sp, #0]
    726a:	071b      	lsls	r3, r3, #28
    726c:	d48e      	bmi.n	718c <f_open+0x30c>
    726e:	e791      	b.n	7194 <f_open+0x314>
				fp->clust = clst;
    7270:	61a1      	str	r1, [r4, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    7272:	05f3      	lsls	r3, r6, #23
    7274:	d00f      	beq.n	7296 <f_open+0x416>
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    7276:	696b      	ldr	r3, [r5, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
    7278:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    727a:	3b02      	subs	r3, #2
    727c:	4299      	cmp	r1, r3
    727e:	d300      	bcc.n	7282 <f_open+0x402>
    7280:	e0a1      	b.n	73c6 <f_open+0x546>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    7282:	896b      	ldrh	r3, [r5, #10]
    7284:	4359      	muls	r1, r3
    7286:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7288:	18cb      	adds	r3, r1, r3
					if (sc == 0) {
    728a:	2b00      	cmp	r3, #0
    728c:	d100      	bne.n	7290 <f_open+0x410>
    728e:	e09a      	b.n	73c6 <f_open+0x546>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    7290:	0a76      	lsrs	r6, r6, #9
    7292:	18f3      	adds	r3, r6, r3
    7294:	61e3      	str	r3, [r4, #28]
    7296:	2000      	movs	r0, #0
    7298:	e62d      	b.n	6ef6 <f_open+0x76>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    729a:	2001      	movs	r0, #1
				fp->clust = clst;
    729c:	61a1      	str	r1, [r4, #24]
    729e:	e628      	b.n	6ef2 <f_open+0x72>
	rv = rv << 8 | ptr[0];
    72a0:	7d58      	ldrb	r0, [r3, #21]
    72a2:	7d1a      	ldrb	r2, [r3, #20]
    72a4:	0200      	lsls	r0, r0, #8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    72a6:	4302      	orrs	r2, r0
    72a8:	0412      	lsls	r2, r2, #16
    72aa:	4311      	orrs	r1, r2
    72ac:	e77e      	b.n	71ac <f_open+0x32c>
				res = FR_INVALID_NAME;
    72ae:	2006      	movs	r0, #6
    72b0:	e61f      	b.n	6ef2 <f_open+0x72>
					res = FR_NO_FILE;
    72b2:	2004      	movs	r0, #4
    72b4:	e61d      	b.n	6ef2 <f_open+0x72>
	rv = rv << 8 | ptr[2];
    72b6:	23fc      	movs	r3, #252	; 0xfc
    72b8:	005b      	lsls	r3, r3, #1
    72ba:	5cea      	ldrb	r2, [r5, r3]
    72bc:	002b      	movs	r3, r5
    72be:	33f9      	adds	r3, #249	; 0xf9
    72c0:	33ff      	adds	r3, #255	; 0xff
    72c2:	785b      	ldrb	r3, [r3, #1]
    72c4:	021b      	lsls	r3, r3, #8
    72c6:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    72c8:	22f8      	movs	r2, #248	; 0xf8
    72ca:	32ff      	adds	r2, #255	; 0xff
    72cc:	5caa      	ldrb	r2, [r5, r2]
    72ce:	021b      	lsls	r3, r3, #8
    72d0:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    72d2:	22fb      	movs	r2, #251	; 0xfb
    72d4:	0052      	lsls	r2, r2, #1
    72d6:	5caa      	ldrb	r2, [r5, r2]
    72d8:	021b      	lsls	r3, r3, #8
    72da:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    72dc:	2382      	movs	r3, #130	; 0x82
    72de:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    72e0:	0011      	movs	r1, r2
    72e2:	9202      	str	r2, [sp, #8]
	rv = rv << 8 | ptr[2];
    72e4:	5cea      	ldrb	r2, [r5, r3]
    72e6:	18eb      	adds	r3, r5, r3
    72e8:	785b      	ldrb	r3, [r3, #1]
    72ea:	021b      	lsls	r3, r3, #8
    72ec:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    72ee:	4ab5      	ldr	r2, [pc, #724]	; (75c4 <f_open+0x744>)
    72f0:	021b      	lsls	r3, r3, #8
    72f2:	5caa      	ldrb	r2, [r5, r2]
    72f4:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    72f6:	4ab4      	ldr	r2, [pc, #720]	; (75c8 <f_open+0x748>)
    72f8:	021b      	lsls	r3, r3, #8
    72fa:	5caa      	ldrb	r2, [r5, r2]
    72fc:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    72fe:	2386      	movs	r3, #134	; 0x86
    7300:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    7302:	9201      	str	r2, [sp, #4]
	rv = rv << 8 | ptr[2];
    7304:	5cea      	ldrb	r2, [r5, r3]
    7306:	18eb      	adds	r3, r5, r3
    7308:	785b      	ldrb	r3, [r3, #1]
    730a:	021b      	lsls	r3, r3, #8
    730c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    730e:	4aaf      	ldr	r2, [pc, #700]	; (75cc <f_open+0x74c>)
    7310:	021b      	lsls	r3, r3, #8
    7312:	5caa      	ldrb	r2, [r5, r2]
    7314:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7316:	4aae      	ldr	r2, [pc, #696]	; (75d0 <f_open+0x750>)
    7318:	021b      	lsls	r3, r3, #8
    731a:	5caa      	ldrb	r2, [r5, r2]
    731c:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    731e:	238a      	movs	r3, #138	; 0x8a
    7320:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    7322:	0017      	movs	r7, r2
	rv = rv << 8 | ptr[2];
    7324:	5cea      	ldrb	r2, [r5, r3]
    7326:	18eb      	adds	r3, r5, r3
    7328:	785b      	ldrb	r3, [r3, #1]
    732a:	021b      	lsls	r3, r3, #8
    732c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    732e:	4aa9      	ldr	r2, [pc, #676]	; (75d4 <f_open+0x754>)
    7330:	021b      	lsls	r3, r3, #8
    7332:	5caa      	ldrb	r2, [r5, r2]
    7334:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7336:	4aa8      	ldr	r2, [pc, #672]	; (75d8 <f_open+0x758>)
    7338:	021b      	lsls	r3, r3, #8
    733a:	5caa      	ldrb	r2, [r5, r2]
    733c:	431a      	orrs	r2, r3
    733e:	9203      	str	r2, [sp, #12]
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    7340:	2900      	cmp	r1, #0
    7342:	d154      	bne.n	73ee <f_open+0x56e>
    7344:	9b01      	ldr	r3, [sp, #4]
    7346:	2b00      	cmp	r3, #0
    7348:	d13f      	bne.n	73ca <f_open+0x54a>
    734a:	2f00      	cmp	r7, #0
    734c:	d165      	bne.n	741a <f_open+0x59a>
    734e:	9b03      	ldr	r3, [sp, #12]
    7350:	2b00      	cmp	r3, #0
    7352:	d01a      	beq.n	738a <f_open+0x50a>
    7354:	001f      	movs	r7, r3
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7356:	2300      	movs	r3, #0
    7358:	712b      	strb	r3, [r5, #4]
    735a:	3b01      	subs	r3, #1
    735c:	469a      	mov	sl, r3
    735e:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    7360:	003b      	movs	r3, r7
    7362:	3301      	adds	r3, #1
    7364:	d008      	beq.n	7378 <f_open+0x4f8>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7366:	7868      	ldrb	r0, [r5, #1]
    7368:	2301      	movs	r3, #1
    736a:	003a      	movs	r2, r7
    736c:	4641      	mov	r1, r8
    736e:	47c8      	blx	r9
    7370:	2800      	cmp	r0, #0
    7372:	d000      	beq.n	7376 <f_open+0x4f6>
    7374:	e5e6      	b.n	6f44 <f_open+0xc4>
			fs->winsect = sect;
    7376:	62ef      	str	r7, [r5, #44]	; 0x2c
    7378:	0028      	movs	r0, r5
    737a:	4b98      	ldr	r3, [pc, #608]	; (75dc <f_open+0x75c>)
    737c:	4798      	blx	r3
	} while (part == 0 && fmt >= 2 && ++i < 4);
    737e:	2801      	cmp	r0, #1
    7380:	d800      	bhi.n	7384 <f_open+0x504>
    7382:	e5ef      	b.n	6f64 <f_open+0xe4>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    7384:	2804      	cmp	r0, #4
    7386:	d100      	bne.n	738a <f_open+0x50a>
    7388:	e5de      	b.n	6f48 <f_open+0xc8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    738a:	200d      	movs	r0, #13
    738c:	e5b1      	b.n	6ef2 <f_open+0x72>
						res = remove_chain(&dj.obj, cl, 0);
    738e:	0031      	movs	r1, r6
    7390:	a805      	add	r0, sp, #20
    7392:	4b93      	ldr	r3, [pc, #588]	; (75e0 <f_open+0x760>)
						sc = fs->winsect;
    7394:	6aef      	ldr	r7, [r5, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
    7396:	4798      	blx	r3
						if (res == FR_OK) {
    7398:	2800      	cmp	r0, #0
    739a:	d000      	beq.n	739e <f_open+0x51e>
    739c:	e5a9      	b.n	6ef2 <f_open+0x72>
							res = move_window(fs, sc);
    739e:	0039      	movs	r1, r7
    73a0:	0028      	movs	r0, r5
    73a2:	4b90      	ldr	r3, [pc, #576]	; (75e4 <f_open+0x764>)
    73a4:	4798      	blx	r3
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    73a6:	3e01      	subs	r6, #1
    73a8:	60ee      	str	r6, [r5, #12]
		if (res == FR_OK) {
    73aa:	2800      	cmp	r0, #0
    73ac:	d100      	bne.n	73b0 <f_open+0x530>
    73ae:	e6ed      	b.n	718c <f_open+0x30c>
    73b0:	e59f      	b.n	6ef2 <f_open+0x72>
	*ptr++ = (BYTE)val; val >>= 8;
    73b2:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
    73b4:	755a      	strb	r2, [r3, #21]
    73b6:	e6de      	b.n	7176 <f_open+0x2f6>
	rv = rv << 8 | ptr[0];
    73b8:	7d59      	ldrb	r1, [r3, #21]
    73ba:	7d1a      	ldrb	r2, [r3, #20]
    73bc:	0209      	lsls	r1, r1, #8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    73be:	430a      	orrs	r2, r1
    73c0:	0412      	lsls	r2, r2, #16
    73c2:	4316      	orrs	r6, r2
    73c4:	e6cd      	b.n	7162 <f_open+0x2e2>
						res = FR_INT_ERR;
    73c6:	2002      	movs	r0, #2
    73c8:	e593      	b.n	6ef2 <f_open+0x72>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    73ca:	2300      	movs	r3, #0
    73cc:	712b      	strb	r3, [r5, #4]
    73ce:	3b01      	subs	r3, #1
    73d0:	469a      	mov	sl, r3
    73d2:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    73d4:	9b01      	ldr	r3, [sp, #4]
    73d6:	3301      	adds	r3, #1
    73d8:	d03e      	beq.n	7458 <f_open+0x5d8>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    73da:	7868      	ldrb	r0, [r5, #1]
    73dc:	2301      	movs	r3, #1
    73de:	9a01      	ldr	r2, [sp, #4]
    73e0:	4641      	mov	r1, r8
    73e2:	47c8      	blx	r9
    73e4:	2800      	cmp	r0, #0
    73e6:	d035      	beq.n	7454 <f_open+0x5d4>
			fs->winsect = sect;
    73e8:	4653      	mov	r3, sl
    73ea:	62eb      	str	r3, [r5, #44]	; 0x2c
    73ec:	e7ad      	b.n	734a <f_open+0x4ca>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    73ee:	465b      	mov	r3, fp
    73f0:	712b      	strb	r3, [r5, #4]
    73f2:	4653      	mov	r3, sl
    73f4:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    73f6:	000b      	movs	r3, r1
    73f8:	3301      	adds	r3, #1
    73fa:	d008      	beq.n	740e <f_open+0x58e>
    73fc:	000a      	movs	r2, r1
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    73fe:	7868      	ldrb	r0, [r5, #1]
    7400:	2301      	movs	r3, #1
    7402:	4641      	mov	r1, r8
    7404:	47c8      	blx	r9
    7406:	2800      	cmp	r0, #0
    7408:	d119      	bne.n	743e <f_open+0x5be>
			fs->winsect = sect;
    740a:	9b02      	ldr	r3, [sp, #8]
    740c:	62eb      	str	r3, [r5, #44]	; 0x2c
    740e:	0028      	movs	r0, r5
    7410:	4b72      	ldr	r3, [pc, #456]	; (75dc <f_open+0x75c>)
    7412:	4798      	blx	r3
	} while (part == 0 && fmt >= 2 && ++i < 4);
    7414:	2801      	cmp	r0, #1
    7416:	d895      	bhi.n	7344 <f_open+0x4c4>
    7418:	e5a4      	b.n	6f64 <f_open+0xe4>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    741a:	2300      	movs	r3, #0
    741c:	712b      	strb	r3, [r5, #4]
    741e:	3b01      	subs	r3, #1
    7420:	469a      	mov	sl, r3
    7422:	62eb      	str	r3, [r5, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    7424:	003b      	movs	r3, r7
    7426:	3301      	adds	r3, #1
    7428:	d00d      	beq.n	7446 <f_open+0x5c6>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    742a:	7868      	ldrb	r0, [r5, #1]
    742c:	2301      	movs	r3, #1
    742e:	003a      	movs	r2, r7
    7430:	4641      	mov	r1, r8
    7432:	47c8      	blx	r9
    7434:	2800      	cmp	r0, #0
    7436:	d005      	beq.n	7444 <f_open+0x5c4>
			fs->winsect = sect;
    7438:	4653      	mov	r3, sl
    743a:	62eb      	str	r3, [r5, #44]	; 0x2c
    743c:	e787      	b.n	734e <f_open+0x4ce>
    743e:	4653      	mov	r3, sl
    7440:	62eb      	str	r3, [r5, #44]	; 0x2c
    7442:	e77f      	b.n	7344 <f_open+0x4c4>
    7444:	62ef      	str	r7, [r5, #44]	; 0x2c
    7446:	0028      	movs	r0, r5
    7448:	4b64      	ldr	r3, [pc, #400]	; (75dc <f_open+0x75c>)
    744a:	4798      	blx	r3
	} while (part == 0 && fmt >= 2 && ++i < 4);
    744c:	2801      	cmp	r0, #1
    744e:	d900      	bls.n	7452 <f_open+0x5d2>
    7450:	e77d      	b.n	734e <f_open+0x4ce>
    7452:	e587      	b.n	6f64 <f_open+0xe4>
			fs->winsect = sect;
    7454:	9b01      	ldr	r3, [sp, #4]
    7456:	62eb      	str	r3, [r5, #44]	; 0x2c
    7458:	0028      	movs	r0, r5
    745a:	4b60      	ldr	r3, [pc, #384]	; (75dc <f_open+0x75c>)
    745c:	4798      	blx	r3
	} while (part == 0 && fmt >= 2 && ++i < 4);
    745e:	2801      	cmp	r0, #1
    7460:	d900      	bls.n	7464 <f_open+0x5e4>
    7462:	e772      	b.n	734a <f_open+0x4ca>
    7464:	e57e      	b.n	6f64 <f_open+0xe4>
		fs->volbase = bsect;							/* Volume start sector */
    7466:	464b      	mov	r3, r9
		fs->database = bsect + sysect;					/* Data start sector */
    7468:	003a      	movs	r2, r7
		fs->volbase = bsect;							/* Volume start sector */
    746a:	61eb      	str	r3, [r5, #28]
		fs->database = bsect + sysect;					/* Data start sector */
    746c:	444a      	add	r2, r9
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    746e:	4643      	mov	r3, r8
		fs->database = bsect + sysect;					/* Data start sector */
    7470:	62aa      	str	r2, [r5, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    7472:	465a      	mov	r2, fp
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    7474:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    7476:	444b      	add	r3, r9
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    7478:	6168      	str	r0, [r5, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    747a:	622b      	str	r3, [r5, #32]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    747c:	2a00      	cmp	r2, #0
    747e:	d084      	beq.n	738a <f_open+0x50a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    7480:	9a01      	ldr	r2, [sp, #4]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    7482:	0040      	lsls	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    7484:	4694      	mov	ip, r2
    7486:	4463      	add	r3, ip
    7488:	626b      	str	r3, [r5, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    748a:	2202      	movs	r2, #2
    748c:	e606      	b.n	709c <f_open+0x21c>
		fs->volbase = bsect;							/* Volume start sector */
    748e:	464b      	mov	r3, r9
    7490:	61eb      	str	r3, [r5, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    7492:	4643      	mov	r3, r8
    7494:	444b      	add	r3, r9
    7496:	622b      	str	r3, [r5, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    7498:	003b      	movs	r3, r7
    749a:	444b      	add	r3, r9
    749c:	62ab      	str	r3, [r5, #40]	; 0x28
	rv = ptr[1];
    749e:	235b      	movs	r3, #91	; 0x5b
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    74a0:	3002      	adds	r0, #2
    74a2:	6168      	str	r0, [r5, #20]
	rv = rv << 8 | ptr[0];
    74a4:	5cea      	ldrb	r2, [r5, r3]
    74a6:	3b01      	subs	r3, #1
    74a8:	5ceb      	ldrb	r3, [r5, r3]
    74aa:	0212      	lsls	r2, r2, #8
    74ac:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    74ae:	d000      	beq.n	74b2 <f_open+0x632>
    74b0:	e76b      	b.n	738a <f_open+0x50a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    74b2:	465b      	mov	r3, fp
    74b4:	2b00      	cmp	r3, #0
    74b6:	d000      	beq.n	74ba <f_open+0x63a>
    74b8:	e767      	b.n	738a <f_open+0x50a>
	rv = rv << 8 | ptr[2];
    74ba:	335e      	adds	r3, #94	; 0x5e
    74bc:	5cea      	ldrb	r2, [r5, r3]
    74be:	002b      	movs	r3, r5
    74c0:	335e      	adds	r3, #94	; 0x5e
    74c2:	785b      	ldrb	r3, [r3, #1]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    74c4:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[2];
    74c6:	021b      	lsls	r3, r3, #8
    74c8:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    74ca:	225d      	movs	r2, #93	; 0x5d
    74cc:	5caa      	ldrb	r2, [r5, r2]
    74ce:	021b      	lsls	r3, r3, #8
    74d0:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    74d2:	225c      	movs	r2, #92	; 0x5c
    74d4:	5caa      	ldrb	r2, [r5, r2]
    74d6:	021b      	lsls	r3, r3, #8
    74d8:	4313      	orrs	r3, r2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    74da:	626b      	str	r3, [r5, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    74dc:	4b42      	ldr	r3, [pc, #264]	; (75e8 <f_open+0x768>)
    74de:	18c3      	adds	r3, r0, r3
    74e0:	0a5b      	lsrs	r3, r3, #9
    74e2:	459a      	cmp	sl, r3
    74e4:	d200      	bcs.n	74e8 <f_open+0x668>
    74e6:	e750      	b.n	738a <f_open+0x50a>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    74e8:	2301      	movs	r3, #1
    74ea:	425b      	negs	r3, r3
    74ec:	612b      	str	r3, [r5, #16]
    74ee:	60eb      	str	r3, [r5, #12]
		fs->fsi_flag = 0x80;
    74f0:	3381      	adds	r3, #129	; 0x81
    74f2:	716b      	strb	r3, [r5, #5]
	rv = ptr[1];
    74f4:	3b1f      	subs	r3, #31
	rv = rv << 8 | ptr[0];
    74f6:	5cea      	ldrb	r2, [r5, r3]
    74f8:	3b01      	subs	r3, #1
    74fa:	5ceb      	ldrb	r3, [r5, r3]
    74fc:	0212      	lsls	r2, r2, #8
    74fe:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    7500:	2b01      	cmp	r3, #1
    7502:	d001      	beq.n	7508 <f_open+0x688>
    7504:	2203      	movs	r2, #3
    7506:	e5d7      	b.n	70b8 <f_open+0x238>
			&& move_window(fs, bsect + 1) == FR_OK)
    7508:	4649      	mov	r1, r9
    750a:	0028      	movs	r0, r5
    750c:	3101      	adds	r1, #1
    750e:	4b35      	ldr	r3, [pc, #212]	; (75e4 <f_open+0x764>)
    7510:	4798      	blx	r3
    7512:	2203      	movs	r2, #3
    7514:	2800      	cmp	r0, #0
    7516:	d000      	beq.n	751a <f_open+0x69a>
    7518:	e5ce      	b.n	70b8 <f_open+0x238>
			fs->fsi_flag = 0;
    751a:	465b      	mov	r3, fp
    751c:	716b      	strb	r3, [r5, #5]
	rv = ptr[1];
    751e:	4b33      	ldr	r3, [pc, #204]	; (75ec <f_open+0x76c>)
	rv = rv << 8 | ptr[0];
    7520:	5ce9      	ldrb	r1, [r5, r3]
    7522:	4b33      	ldr	r3, [pc, #204]	; (75f0 <f_open+0x770>)
    7524:	0209      	lsls	r1, r1, #8
    7526:	5ceb      	ldrb	r3, [r5, r3]
    7528:	430b      	orrs	r3, r1
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    752a:	4932      	ldr	r1, [pc, #200]	; (75f4 <f_open+0x774>)
    752c:	b21b      	sxth	r3, r3
    752e:	428b      	cmp	r3, r1
    7530:	d000      	beq.n	7534 <f_open+0x6b4>
    7532:	e5c1      	b.n	70b8 <f_open+0x238>
	rv = rv << 8 | ptr[2];
    7534:	2332      	movs	r3, #50	; 0x32
    7536:	5cea      	ldrb	r2, [r5, r3]
    7538:	3301      	adds	r3, #1
    753a:	5ceb      	ldrb	r3, [r5, r3]
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    753c:	492e      	ldr	r1, [pc, #184]	; (75f8 <f_open+0x778>)
	rv = rv << 8 | ptr[2];
    753e:	021b      	lsls	r3, r3, #8
    7540:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7542:	2231      	movs	r2, #49	; 0x31
    7544:	5caa      	ldrb	r2, [r5, r2]
    7546:	021b      	lsls	r3, r3, #8
    7548:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    754a:	2230      	movs	r2, #48	; 0x30
    754c:	5caa      	ldrb	r2, [r5, r2]
    754e:	021b      	lsls	r3, r3, #8
    7550:	4313      	orrs	r3, r2
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    7552:	2203      	movs	r2, #3
    7554:	428b      	cmp	r3, r1
    7556:	d000      	beq.n	755a <f_open+0x6da>
    7558:	e5ae      	b.n	70b8 <f_open+0x238>
	rv = rv << 8 | ptr[2];
    755a:	4b1d      	ldr	r3, [pc, #116]	; (75d0 <f_open+0x750>)
    755c:	5ce9      	ldrb	r1, [r5, r3]
    755e:	18eb      	adds	r3, r5, r3
    7560:	785b      	ldrb	r3, [r3, #1]
    7562:	021b      	lsls	r3, r3, #8
    7564:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[1];
    7566:	4925      	ldr	r1, [pc, #148]	; (75fc <f_open+0x77c>)
    7568:	021b      	lsls	r3, r3, #8
    756a:	5c69      	ldrb	r1, [r5, r1]
    756c:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[0];
    756e:	2185      	movs	r1, #133	; 0x85
    7570:	0089      	lsls	r1, r1, #2
    7572:	5c69      	ldrb	r1, [r5, r1]
    7574:	021b      	lsls	r3, r3, #8
    7576:	430b      	orrs	r3, r1
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    7578:	4921      	ldr	r1, [pc, #132]	; (7600 <f_open+0x780>)
    757a:	428b      	cmp	r3, r1
    757c:	d000      	beq.n	7580 <f_open+0x700>
    757e:	e59b      	b.n	70b8 <f_open+0x238>
	rv = rv << 8 | ptr[2];
    7580:	4b20      	ldr	r3, [pc, #128]	; (7604 <f_open+0x784>)
    7582:	5ce9      	ldrb	r1, [r5, r3]
    7584:	18eb      	adds	r3, r5, r3
    7586:	785b      	ldrb	r3, [r3, #1]
    7588:	021b      	lsls	r3, r3, #8
    758a:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[1];
    758c:	491e      	ldr	r1, [pc, #120]	; (7608 <f_open+0x788>)
    758e:	021b      	lsls	r3, r3, #8
    7590:	5c69      	ldrb	r1, [r5, r1]
    7592:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[0];
    7594:	2186      	movs	r1, #134	; 0x86
    7596:	0089      	lsls	r1, r1, #2
    7598:	5c69      	ldrb	r1, [r5, r1]
    759a:	021b      	lsls	r3, r3, #8
    759c:	430b      	orrs	r3, r1
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    759e:	612b      	str	r3, [r5, #16]
	rv = rv << 8 | ptr[2];
    75a0:	4b1a      	ldr	r3, [pc, #104]	; (760c <f_open+0x78c>)
    75a2:	5ce9      	ldrb	r1, [r5, r3]
    75a4:	18eb      	adds	r3, r5, r3
    75a6:	785b      	ldrb	r3, [r3, #1]
    75a8:	021b      	lsls	r3, r3, #8
    75aa:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[1];
    75ac:	4918      	ldr	r1, [pc, #96]	; (7610 <f_open+0x790>)
    75ae:	021b      	lsls	r3, r3, #8
    75b0:	5c69      	ldrb	r1, [r5, r1]
    75b2:	430b      	orrs	r3, r1
	rv = rv << 8 | ptr[0];
    75b4:	2187      	movs	r1, #135	; 0x87
    75b6:	0089      	lsls	r1, r1, #2
    75b8:	5c69      	ldrb	r1, [r5, r1]
    75ba:	021b      	lsls	r3, r3, #8
    75bc:	430b      	orrs	r3, r1
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    75be:	60eb      	str	r3, [r5, #12]
    75c0:	e57a      	b.n	70b8 <f_open+0x238>
    75c2:	46c0      	nop			; (mov r8, r8)
    75c4:	00000207 	.word	0x00000207
    75c8:	00000206 	.word	0x00000206
    75cc:	00000217 	.word	0x00000217
    75d0:	00000216 	.word	0x00000216
    75d4:	00000227 	.word	0x00000227
    75d8:	00000226 	.word	0x00000226
    75dc:	00005135 	.word	0x00005135
    75e0:	00005bf9 	.word	0x00005bf9
    75e4:	00005255 	.word	0x00005255
    75e8:	000001ff 	.word	0x000001ff
    75ec:	0000022f 	.word	0x0000022f
    75f0:	0000022e 	.word	0x0000022e
    75f4:	ffffaa55 	.word	0xffffaa55
    75f8:	41615252 	.word	0x41615252
    75fc:	00000215 	.word	0x00000215
    7600:	61417272 	.word	0x61417272
    7604:	0000021a 	.word	0x0000021a
    7608:	00000219 	.word	0x00000219
    760c:	0000021e 	.word	0x0000021e
    7610:	0000021d 	.word	0x0000021d

00007614 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
    7614:	b5f0      	push	{r4, r5, r6, r7, lr}
    7616:	4657      	mov	r7, sl
    7618:	464e      	mov	r6, r9
    761a:	4645      	mov	r5, r8
    761c:	469a      	mov	sl, r3
    761e:	46de      	mov	lr, fp
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    7620:	2300      	movs	r3, #0
{
    7622:	b5e0      	push	{r5, r6, r7, lr}
    7624:	0017      	movs	r7, r2
	*br = 0;	/* Clear read byte counter */
    7626:	4652      	mov	r2, sl
{
    7628:	b083      	sub	sp, #12
    762a:	0006      	movs	r6, r0
    762c:	000d      	movs	r5, r1
	*br = 0;	/* Clear read byte counter */
    762e:	6013      	str	r3, [r2, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    7630:	2800      	cmp	r0, #0
    7632:	d005      	beq.n	7640 <f_read+0x2c>
    7634:	6803      	ldr	r3, [r0, #0]
    7636:	2b00      	cmp	r3, #0
    7638:	d002      	beq.n	7640 <f_read+0x2c>
    763a:	781a      	ldrb	r2, [r3, #0]
    763c:	2a00      	cmp	r2, #0
    763e:	d109      	bne.n	7654 <f_read+0x40>
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    7640:	2309      	movs	r3, #9
    7642:	4699      	mov	r9, r3
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    7644:	4648      	mov	r0, r9
    7646:	b003      	add	sp, #12
    7648:	bc3c      	pop	{r2, r3, r4, r5}
    764a:	4690      	mov	r8, r2
    764c:	4699      	mov	r9, r3
    764e:	46a2      	mov	sl, r4
    7650:	46ab      	mov	fp, r5
    7652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    7654:	8881      	ldrh	r1, [r0, #4]
    7656:	88da      	ldrh	r2, [r3, #6]
    7658:	4291      	cmp	r1, r2
    765a:	d1f1      	bne.n	7640 <f_read+0x2c>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    765c:	7858      	ldrb	r0, [r3, #1]
    765e:	4b6c      	ldr	r3, [pc, #432]	; (7810 <f_read+0x1fc>)
    7660:	4798      	blx	r3
    7662:	2201      	movs	r2, #1
    7664:	4202      	tst	r2, r0
    7666:	d1eb      	bne.n	7640 <f_read+0x2c>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    7668:	7c73      	ldrb	r3, [r6, #17]
    766a:	4699      	mov	r9, r3
    766c:	2b00      	cmp	r3, #0
    766e:	d1e9      	bne.n	7644 <f_read+0x30>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    7670:	7c33      	ldrb	r3, [r6, #16]
    7672:	421a      	tst	r2, r3
    7674:	d102      	bne.n	767c <f_read+0x68>
    7676:	2307      	movs	r3, #7
    7678:	4699      	mov	r9, r3
    767a:	e7e3      	b.n	7644 <f_read+0x30>
	remain = fp->obj.objsize - fp->fptr;
    767c:	6971      	ldr	r1, [r6, #20]
    767e:	68f3      	ldr	r3, [r6, #12]
    7680:	000c      	movs	r4, r1
    7682:	1a5b      	subs	r3, r3, r1
    7684:	4698      	mov	r8, r3
    7686:	42bb      	cmp	r3, r7
    7688:	d900      	bls.n	768c <f_read+0x78>
    768a:	46b8      	mov	r8, r7
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
    768c:	4643      	mov	r3, r8
    768e:	2b00      	cmp	r3, #0
    7690:	d0d8      	beq.n	7644 <f_read+0x30>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    7692:	464b      	mov	r3, r9
    7694:	9301      	str	r3, [sp, #4]
    7696:	0033      	movs	r3, r6
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    7698:	6837      	ldr	r7, [r6, #0]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    769a:	46a9      	mov	r9, r5
    769c:	4646      	mov	r6, r8
    769e:	4698      	mov	r8, r3
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    76a0:	05e3      	lsls	r3, r4, #23
    76a2:	0ddb      	lsrs	r3, r3, #23
    76a4:	d023      	beq.n	76ee <f_read+0xda>
    76a6:	4642      	mov	r2, r8
    76a8:	69d2      	ldr	r2, [r2, #28]
    76aa:	9200      	str	r2, [sp, #0]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    76ac:	2480      	movs	r4, #128	; 0x80
    76ae:	00a4      	lsls	r4, r4, #2
    76b0:	1ae4      	subs	r4, r4, r3
    76b2:	42b4      	cmp	r4, r6
    76b4:	d900      	bls.n	76b8 <f_read+0xa4>
    76b6:	0034      	movs	r4, r6
	if (sect != fs->winsect) {	/* Window offset changed? */
    76b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    76ba:	9b00      	ldr	r3, [sp, #0]
    76bc:	4293      	cmp	r3, r2
    76be:	d100      	bne.n	76c2 <f_read+0xae>
    76c0:	e0a2      	b.n	7808 <f_read+0x1f4>
    76c2:	2130      	movs	r1, #48	; 0x30
    76c4:	468b      	mov	fp, r1
	if (fs->wflag) {	/* Is the disk access window dirty? */
    76c6:	793b      	ldrb	r3, [r7, #4]
    76c8:	44bb      	add	fp, r7
    76ca:	2b00      	cmp	r3, #0
    76cc:	d176      	bne.n	77bc <f_read+0x1a8>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    76ce:	7878      	ldrb	r0, [r7, #1]
    76d0:	2301      	movs	r3, #1
    76d2:	9a00      	ldr	r2, [sp, #0]
    76d4:	4659      	mov	r1, fp
    76d6:	4d4f      	ldr	r5, [pc, #316]	; (7814 <f_read+0x200>)
    76d8:	47a8      	blx	r5
    76da:	2800      	cmp	r0, #0
    76dc:	d059      	beq.n	7792 <f_read+0x17e>
			fs->winsect = sect;
    76de:	2301      	movs	r3, #1
    76e0:	4646      	mov	r6, r8
    76e2:	425b      	negs	r3, r3
    76e4:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    76e6:	2301      	movs	r3, #1
    76e8:	7473      	strb	r3, [r6, #17]
    76ea:	4699      	mov	r9, r3
    76ec:	e7aa      	b.n	7644 <f_read+0x30>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    76ee:	897b      	ldrh	r3, [r7, #10]
    76f0:	0a62      	lsrs	r2, r4, #9
    76f2:	3b01      	subs	r3, #1
    76f4:	401a      	ands	r2, r3
    76f6:	4693      	mov	fp, r2
			if (csect == 0) {					/* On the cluster boundary? */
    76f8:	d157      	bne.n	77aa <f_read+0x196>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    76fa:	4643      	mov	r3, r8
				if (fp->fptr == 0) {			/* On the top of the file? */
    76fc:	2c00      	cmp	r4, #0
    76fe:	d179      	bne.n	77f4 <f_read+0x1e0>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    7700:	6898      	ldr	r0, [r3, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    7702:	2801      	cmp	r0, #1
    7704:	d97b      	bls.n	77fe <f_read+0x1ea>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    7706:	1c43      	adds	r3, r0, #1
    7708:	d072      	beq.n	77f0 <f_read+0x1dc>
				fp->clust = clst;				/* Update current cluster */
    770a:	4643      	mov	r3, r8
    770c:	6198      	str	r0, [r3, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    770e:	697b      	ldr	r3, [r7, #20]
	clst -= 2;		/* Cluster number is origin from 2 */
    7710:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    7712:	3b02      	subs	r3, #2
    7714:	4298      	cmp	r0, r3
    7716:	d272      	bcs.n	77fe <f_read+0x1ea>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    7718:	897b      	ldrh	r3, [r7, #10]
    771a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    771c:	4358      	muls	r0, r3
    771e:	1885      	adds	r5, r0, r2
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    7720:	2d00      	cmp	r5, #0
    7722:	d06c      	beq.n	77fe <f_read+0x1ea>
			sect += csect;
    7724:	002a      	movs	r2, r5
    7726:	445a      	add	r2, fp
    7728:	9200      	str	r2, [sp, #0]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    772a:	0a74      	lsrs	r4, r6, #9
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
    772c:	d040      	beq.n	77b0 <f_read+0x19c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    772e:	465a      	mov	r2, fp
    7730:	1912      	adds	r2, r2, r4
    7732:	429a      	cmp	r2, r3
    7734:	d901      	bls.n	773a <f_read+0x126>
					cc = fs->csize - csect;
    7736:	465a      	mov	r2, fp
    7738:	1a9c      	subs	r4, r3, r2
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    773a:	7878      	ldrb	r0, [r7, #1]
    773c:	0023      	movs	r3, r4
    773e:	9a00      	ldr	r2, [sp, #0]
    7740:	4649      	mov	r1, r9
    7742:	4d34      	ldr	r5, [pc, #208]	; (7814 <f_read+0x200>)
    7744:	47a8      	blx	r5
    7746:	2800      	cmp	r0, #0
    7748:	d152      	bne.n	77f0 <f_read+0x1dc>
				if (fs->wflag && fs->winsect - sect < cc) {
    774a:	793b      	ldrb	r3, [r7, #4]
    774c:	2b00      	cmp	r3, #0
    774e:	d004      	beq.n	775a <f_read+0x146>
    7750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7752:	9a00      	ldr	r2, [sp, #0]
    7754:	1a9d      	subs	r5, r3, r2
    7756:	42ac      	cmp	r4, r5
    7758:	d811      	bhi.n	777e <f_read+0x16a>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    775a:	0264      	lsls	r4, r4, #9
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
    775c:	4653      	mov	r3, sl
    775e:	4652      	mov	r2, sl
    7760:	681b      	ldr	r3, [r3, #0]
    7762:	1b36      	subs	r6, r6, r4
    7764:	191b      	adds	r3, r3, r4
    7766:	6013      	str	r3, [r2, #0]
    7768:	4643      	mov	r3, r8
    776a:	6959      	ldr	r1, [r3, #20]
    776c:	44a1      	add	r9, r4
    776e:	1864      	adds	r4, r4, r1
    7770:	0021      	movs	r1, r4
    7772:	615c      	str	r4, [r3, #20]
    7774:	2e00      	cmp	r6, #0
    7776:	d193      	bne.n	76a0 <f_read+0x8c>
    7778:	9b01      	ldr	r3, [sp, #4]
    777a:	4699      	mov	r9, r3
    777c:	e762      	b.n	7644 <f_read+0x30>
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
    777e:	026d      	lsls	r5, r5, #9
    7780:	0028      	movs	r0, r5
    7782:	0039      	movs	r1, r7
    7784:	2280      	movs	r2, #128	; 0x80
    7786:	4448      	add	r0, r9
    7788:	0092      	lsls	r2, r2, #2
    778a:	3130      	adds	r1, #48	; 0x30
    778c:	4b22      	ldr	r3, [pc, #136]	; (7818 <f_read+0x204>)
    778e:	4798      	blx	r3
    7790:	e7e3      	b.n	775a <f_read+0x146>
			fs->winsect = sect;
    7792:	9b00      	ldr	r3, [sp, #0]
    7794:	62fb      	str	r3, [r7, #44]	; 0x2c
    7796:	4643      	mov	r3, r8
    7798:	6959      	ldr	r1, [r3, #20]
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    779a:	05c9      	lsls	r1, r1, #23
    779c:	0dc9      	lsrs	r1, r1, #23
    779e:	4459      	add	r1, fp
    77a0:	0022      	movs	r2, r4
    77a2:	4648      	mov	r0, r9
    77a4:	4b1c      	ldr	r3, [pc, #112]	; (7818 <f_read+0x204>)
    77a6:	4798      	blx	r3
    77a8:	e7d8      	b.n	775c <f_read+0x148>
    77aa:	4643      	mov	r3, r8
    77ac:	6998      	ldr	r0, [r3, #24]
    77ae:	e7ae      	b.n	770e <f_read+0xfa>
			fp->sect = sect;
    77b0:	4643      	mov	r3, r8
    77b2:	6959      	ldr	r1, [r3, #20]
    77b4:	61da      	str	r2, [r3, #28]
    77b6:	05cb      	lsls	r3, r1, #23
    77b8:	0ddb      	lsrs	r3, r3, #23
    77ba:	e777      	b.n	76ac <f_read+0x98>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    77bc:	7878      	ldrb	r0, [r7, #1]
    77be:	2301      	movs	r3, #1
    77c0:	4659      	mov	r1, fp
    77c2:	4d16      	ldr	r5, [pc, #88]	; (781c <f_read+0x208>)
    77c4:	47a8      	blx	r5
    77c6:	2800      	cmp	r0, #0
    77c8:	d112      	bne.n	77f0 <f_read+0x1dc>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    77ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    77cc:	6a3b      	ldr	r3, [r7, #32]
    77ce:	69b9      	ldr	r1, [r7, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    77d0:	7138      	strb	r0, [r7, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    77d2:	1ad3      	subs	r3, r2, r3
    77d4:	428b      	cmp	r3, r1
    77d6:	d300      	bcc.n	77da <f_read+0x1c6>
    77d8:	e779      	b.n	76ce <f_read+0xba>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    77da:	78fb      	ldrb	r3, [r7, #3]
    77dc:	2b02      	cmp	r3, #2
    77de:	d000      	beq.n	77e2 <f_read+0x1ce>
    77e0:	e775      	b.n	76ce <f_read+0xba>
    77e2:	1852      	adds	r2, r2, r1
    77e4:	7878      	ldrb	r0, [r7, #1]
    77e6:	3b01      	subs	r3, #1
    77e8:	4659      	mov	r1, fp
    77ea:	4d0c      	ldr	r5, [pc, #48]	; (781c <f_read+0x208>)
    77ec:	47a8      	blx	r5
    77ee:	e76e      	b.n	76ce <f_read+0xba>
    77f0:	4646      	mov	r6, r8
    77f2:	e778      	b.n	76e6 <f_read+0xd2>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    77f4:	6999      	ldr	r1, [r3, #24]
    77f6:	6818      	ldr	r0, [r3, #0]
    77f8:	4b09      	ldr	r3, [pc, #36]	; (7820 <f_read+0x20c>)
    77fa:	4798      	blx	r3
    77fc:	e781      	b.n	7702 <f_read+0xee>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    77fe:	2302      	movs	r3, #2
    7800:	4646      	mov	r6, r8
    7802:	4699      	mov	r9, r3
    7804:	7473      	strb	r3, [r6, #17]
    7806:	e71d      	b.n	7644 <f_read+0x30>
    7808:	2330      	movs	r3, #48	; 0x30
    780a:	469b      	mov	fp, r3
    780c:	44bb      	add	fp, r7
    780e:	e7c4      	b.n	779a <f_read+0x186>
    7810:	00008a51 	.word	0x00008a51
    7814:	00008b95 	.word	0x00008b95
    7818:	0000b5f9 	.word	0x0000b5f9
    781c:	00008c85 	.word	0x00008c85
    7820:	00005eed 	.word	0x00005eed

00007824 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
    7824:	b5f0      	push	{r4, r5, r6, r7, lr}
    7826:	4657      	mov	r7, sl
    7828:	469a      	mov	sl, r3
    782a:	4645      	mov	r5, r8
    782c:	464e      	mov	r6, r9
    782e:	46de      	mov	lr, fp
    7830:	4690      	mov	r8, r2
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    7832:	2300      	movs	r3, #0
    7834:	4652      	mov	r2, sl
{
    7836:	b5e0      	push	{r5, r6, r7, lr}
    7838:	0005      	movs	r5, r0
    783a:	b083      	sub	sp, #12
    783c:	000e      	movs	r6, r1
	*bw = 0;	/* Clear write byte counter */
    783e:	6013      	str	r3, [r2, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    7840:	2800      	cmp	r0, #0
    7842:	d005      	beq.n	7850 <f_write+0x2c>
    7844:	6803      	ldr	r3, [r0, #0]
    7846:	2b00      	cmp	r3, #0
    7848:	d002      	beq.n	7850 <f_write+0x2c>
    784a:	781a      	ldrb	r2, [r3, #0]
    784c:	2a00      	cmp	r2, #0
    784e:	d109      	bne.n	7864 <f_write+0x40>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    7850:	2309      	movs	r3, #9
    7852:	4699      	mov	r9, r3
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    7854:	4648      	mov	r0, r9
    7856:	b003      	add	sp, #12
    7858:	bc3c      	pop	{r2, r3, r4, r5}
    785a:	4690      	mov	r8, r2
    785c:	4699      	mov	r9, r3
    785e:	46a2      	mov	sl, r4
    7860:	46ab      	mov	fp, r5
    7862:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    7864:	8881      	ldrh	r1, [r0, #4]
    7866:	88da      	ldrh	r2, [r3, #6]
    7868:	4291      	cmp	r1, r2
    786a:	d1f1      	bne.n	7850 <f_write+0x2c>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    786c:	7858      	ldrb	r0, [r3, #1]
    786e:	4b9c      	ldr	r3, [pc, #624]	; (7ae0 <f_write+0x2bc>)
    7870:	4798      	blx	r3
    7872:	07c3      	lsls	r3, r0, #31
    7874:	d4ec      	bmi.n	7850 <f_write+0x2c>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    7876:	7c6b      	ldrb	r3, [r5, #17]
    7878:	4699      	mov	r9, r3
    787a:	2b00      	cmp	r3, #0
    787c:	d1ea      	bne.n	7854 <f_write+0x30>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    787e:	7c2b      	ldrb	r3, [r5, #16]
    7880:	079a      	lsls	r2, r3, #30
    7882:	d402      	bmi.n	788a <f_write+0x66>
    7884:	2307      	movs	r3, #7
    7886:	4699      	mov	r9, r3
    7888:	e7e4      	b.n	7854 <f_write+0x30>
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    788a:	4642      	mov	r2, r8
    788c:	6968      	ldr	r0, [r5, #20]
    788e:	1882      	adds	r2, r0, r2
    7890:	0004      	movs	r4, r0
    7892:	4290      	cmp	r0, r2
    7894:	d901      	bls.n	789a <f_write+0x76>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    7896:	43c2      	mvns	r2, r0
    7898:	4690      	mov	r8, r2
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
    789a:	4642      	mov	r2, r8
    789c:	2a00      	cmp	r2, #0
    789e:	d04c      	beq.n	793a <f_write+0x116>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    78a0:	464b      	mov	r3, r9
    78a2:	46b1      	mov	r9, r6
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    78a4:	682f      	ldr	r7, [r5, #0]
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    78a6:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    78a8:	05e3      	lsls	r3, r4, #23
    78aa:	0ddb      	lsrs	r3, r3, #23
    78ac:	d049      	beq.n	7942 <f_write+0x11e>
    78ae:	2130      	movs	r1, #48	; 0x30
    78b0:	468b      	mov	fp, r1
    78b2:	69ea      	ldr	r2, [r5, #28]
    78b4:	44bb      	add	fp, r7
    78b6:	9200      	str	r2, [sp, #0]
    78b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    78ba:	2480      	movs	r4, #128	; 0x80
    78bc:	00a4      	lsls	r4, r4, #2
    78be:	1ae4      	subs	r4, r4, r3
    78c0:	4544      	cmp	r4, r8
    78c2:	d900      	bls.n	78c6 <f_write+0xa2>
    78c4:	4644      	mov	r4, r8
	if (sect != fs->winsect) {	/* Window offset changed? */
    78c6:	9b00      	ldr	r3, [sp, #0]
    78c8:	429a      	cmp	r2, r3
    78ca:	d015      	beq.n	78f8 <f_write+0xd4>
	if (fs->wflag) {	/* Is the disk access window dirty? */
    78cc:	793b      	ldrb	r3, [r7, #4]
    78ce:	2b00      	cmp	r3, #0
    78d0:	d000      	beq.n	78d4 <f_write+0xb0>
    78d2:	e09a      	b.n	7a0a <f_write+0x1e6>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    78d4:	7878      	ldrb	r0, [r7, #1]
    78d6:	2301      	movs	r3, #1
    78d8:	9a00      	ldr	r2, [sp, #0]
    78da:	4659      	mov	r1, fp
    78dc:	4e81      	ldr	r6, [pc, #516]	; (7ae4 <f_write+0x2c0>)
    78de:	47b0      	blx	r6
    78e0:	2800      	cmp	r0, #0
    78e2:	d006      	beq.n	78f2 <f_write+0xce>
			fs->winsect = sect;
    78e4:	2301      	movs	r3, #1
    78e6:	425b      	negs	r3, r3
    78e8:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    78ea:	2301      	movs	r3, #1
    78ec:	746b      	strb	r3, [r5, #17]
    78ee:	4699      	mov	r9, r3
    78f0:	e7b0      	b.n	7854 <f_write+0x30>
			fs->winsect = sect;
    78f2:	9b00      	ldr	r3, [sp, #0]
    78f4:	6968      	ldr	r0, [r5, #20]
    78f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    78f8:	05c0      	lsls	r0, r0, #23
    78fa:	0dc0      	lsrs	r0, r0, #23
    78fc:	4b7a      	ldr	r3, [pc, #488]	; (7ae8 <f_write+0x2c4>)
    78fe:	4458      	add	r0, fp
    7900:	0022      	movs	r2, r4
    7902:	4649      	mov	r1, r9
    7904:	4798      	blx	r3
		fs->wflag = 1;
    7906:	2301      	movs	r3, #1
    7908:	713b      	strb	r3, [r7, #4]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
    790a:	4643      	mov	r3, r8
    790c:	1b1b      	subs	r3, r3, r4
    790e:	4698      	mov	r8, r3
    7910:	4653      	mov	r3, sl
    7912:	4652      	mov	r2, sl
    7914:	681b      	ldr	r3, [r3, #0]
    7916:	6968      	ldr	r0, [r5, #20]
    7918:	191b      	adds	r3, r3, r4
    791a:	6013      	str	r3, [r2, #0]
    791c:	68eb      	ldr	r3, [r5, #12]
    791e:	44a1      	add	r9, r4
    7920:	1824      	adds	r4, r4, r0
    7922:	0020      	movs	r0, r4
    7924:	616c      	str	r4, [r5, #20]
    7926:	42a3      	cmp	r3, r4
    7928:	d200      	bcs.n	792c <f_write+0x108>
    792a:	0023      	movs	r3, r4
    792c:	60eb      	str	r3, [r5, #12]
    792e:	4643      	mov	r3, r8
    7930:	2b00      	cmp	r3, #0
    7932:	d1b9      	bne.n	78a8 <f_write+0x84>
    7934:	9b01      	ldr	r3, [sp, #4]
    7936:	4699      	mov	r9, r3
    7938:	7c2b      	ldrb	r3, [r5, #16]
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    793a:	2240      	movs	r2, #64	; 0x40
    793c:	4313      	orrs	r3, r2
    793e:	742b      	strb	r3, [r5, #16]
	LEAVE_FF(fs, FR_OK);
    7940:	e788      	b.n	7854 <f_write+0x30>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    7942:	897b      	ldrh	r3, [r7, #10]
    7944:	0a62      	lsrs	r2, r4, #9
    7946:	3b01      	subs	r3, #1
    7948:	401a      	ands	r2, r3
    794a:	4693      	mov	fp, r2
			if (csect == 0) {				/* On the cluster boundary? */
    794c:	d110      	bne.n	7970 <f_write+0x14c>
				if (fp->fptr == 0) {		/* On the top of the file? */
    794e:	2c00      	cmp	r4, #0
    7950:	d000      	beq.n	7954 <f_write+0x130>
    7952:	e098      	b.n	7a86 <f_write+0x262>
					clst = fp->obj.sclust;	/* Follow from the origin */
    7954:	68a8      	ldr	r0, [r5, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
    7956:	2800      	cmp	r0, #0
    7958:	d100      	bne.n	795c <f_write+0x138>
    795a:	e09c      	b.n	7a96 <f_write+0x272>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    795c:	2801      	cmp	r0, #1
    795e:	d100      	bne.n	7962 <f_write+0x13e>
    7960:	e0ba      	b.n	7ad8 <f_write+0x2b4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    7962:	1c43      	adds	r3, r0, #1
    7964:	d0c1      	beq.n	78ea <f_write+0xc6>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    7966:	68ab      	ldr	r3, [r5, #8]
				fp->clust = clst;			/* Update current cluster */
    7968:	61a8      	str	r0, [r5, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    796a:	2b00      	cmp	r3, #0
    796c:	d100      	bne.n	7970 <f_write+0x14c>
    796e:	60a8      	str	r0, [r5, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    7970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7972:	69eb      	ldr	r3, [r5, #28]
    7974:	429a      	cmp	r2, r3
    7976:	d063      	beq.n	7a40 <f_write+0x21c>
	clst -= 2;		/* Cluster number is origin from 2 */
    7978:	69ab      	ldr	r3, [r5, #24]
    797a:	1e9e      	subs	r6, r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    797c:	697b      	ldr	r3, [r7, #20]
    797e:	3b02      	subs	r3, #2
    7980:	429e      	cmp	r6, r3
    7982:	d300      	bcc.n	7986 <f_write+0x162>
    7984:	e0a8      	b.n	7ad8 <f_write+0x2b4>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    7986:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7988:	897b      	ldrh	r3, [r7, #10]
    798a:	4694      	mov	ip, r2
    798c:	435e      	muls	r6, r3
    798e:	4466      	add	r6, ip
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    7990:	2e00      	cmp	r6, #0
    7992:	d100      	bne.n	7996 <f_write+0x172>
    7994:	e0a0      	b.n	7ad8 <f_write+0x2b4>
			sect += csect;
    7996:	0032      	movs	r2, r6
    7998:	445a      	add	r2, fp
    799a:	9200      	str	r2, [sp, #0]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    799c:	4642      	mov	r2, r8
    799e:	0a54      	lsrs	r4, r2, #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    79a0:	d022      	beq.n	79e8 <f_write+0x1c4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    79a2:	465a      	mov	r2, fp
    79a4:	1912      	adds	r2, r2, r4
    79a6:	429a      	cmp	r2, r3
    79a8:	d901      	bls.n	79ae <f_write+0x18a>
					cc = fs->csize - csect;
    79aa:	465a      	mov	r2, fp
    79ac:	1a9c      	subs	r4, r3, r2
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    79ae:	7878      	ldrb	r0, [r7, #1]
    79b0:	0023      	movs	r3, r4
    79b2:	9a00      	ldr	r2, [sp, #0]
    79b4:	4649      	mov	r1, r9
    79b6:	4e4d      	ldr	r6, [pc, #308]	; (7aec <f_write+0x2c8>)
    79b8:	47b0      	blx	r6
    79ba:	4683      	mov	fp, r0
    79bc:	2800      	cmp	r0, #0
    79be:	d194      	bne.n	78ea <f_write+0xc6>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    79c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    79c2:	9a00      	ldr	r2, [sp, #0]
    79c4:	1a9e      	subs	r6, r3, r2
    79c6:	42b4      	cmp	r4, r6
    79c8:	d801      	bhi.n	79ce <f_write+0x1aa>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    79ca:	0264      	lsls	r4, r4, #9
				continue;
    79cc:	e79d      	b.n	790a <f_write+0xe6>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
    79ce:	0276      	lsls	r6, r6, #9
    79d0:	0031      	movs	r1, r6
    79d2:	2280      	movs	r2, #128	; 0x80
    79d4:	0038      	movs	r0, r7
    79d6:	4b44      	ldr	r3, [pc, #272]	; (7ae8 <f_write+0x2c4>)
    79d8:	4449      	add	r1, r9
    79da:	0092      	lsls	r2, r2, #2
    79dc:	3030      	adds	r0, #48	; 0x30
    79de:	4798      	blx	r3
					fs->wflag = 0;
    79e0:	465b      	mov	r3, fp
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    79e2:	0264      	lsls	r4, r4, #9
					fs->wflag = 0;
    79e4:	713b      	strb	r3, [r7, #4]
    79e6:	e790      	b.n	790a <f_write+0xe6>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    79e8:	6968      	ldr	r0, [r5, #20]
    79ea:	68eb      	ldr	r3, [r5, #12]
    79ec:	4298      	cmp	r0, r3
    79ee:	d344      	bcc.n	7a7a <f_write+0x256>
    79f0:	2230      	movs	r2, #48	; 0x30
    79f2:	4693      	mov	fp, r2
	if (fs->wflag) {	/* Is the disk access window dirty? */
    79f4:	793b      	ldrb	r3, [r7, #4]
    79f6:	44bb      	add	fp, r7
    79f8:	2b00      	cmp	r3, #0
    79fa:	d151      	bne.n	7aa0 <f_write+0x27c>
				fs->winsect = sect;
    79fc:	9b00      	ldr	r3, [sp, #0]
    79fe:	001a      	movs	r2, r3
    7a00:	62fb      	str	r3, [r7, #44]	; 0x2c
			fp->sect = sect;
    7a02:	61eb      	str	r3, [r5, #28]
    7a04:	05c3      	lsls	r3, r0, #23
    7a06:	0ddb      	lsrs	r3, r3, #23
    7a08:	e757      	b.n	78ba <f_write+0x96>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    7a0a:	7878      	ldrb	r0, [r7, #1]
    7a0c:	2301      	movs	r3, #1
    7a0e:	4659      	mov	r1, fp
    7a10:	4e36      	ldr	r6, [pc, #216]	; (7aec <f_write+0x2c8>)
    7a12:	47b0      	blx	r6
    7a14:	2800      	cmp	r0, #0
    7a16:	d000      	beq.n	7a1a <f_write+0x1f6>
    7a18:	e767      	b.n	78ea <f_write+0xc6>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    7a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7a1c:	6a3b      	ldr	r3, [r7, #32]
    7a1e:	69b9      	ldr	r1, [r7, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    7a20:	7138      	strb	r0, [r7, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    7a22:	1ad3      	subs	r3, r2, r3
    7a24:	428b      	cmp	r3, r1
    7a26:	d300      	bcc.n	7a2a <f_write+0x206>
    7a28:	e754      	b.n	78d4 <f_write+0xb0>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    7a2a:	78fb      	ldrb	r3, [r7, #3]
    7a2c:	2b02      	cmp	r3, #2
    7a2e:	d000      	beq.n	7a32 <f_write+0x20e>
    7a30:	e750      	b.n	78d4 <f_write+0xb0>
    7a32:	1852      	adds	r2, r2, r1
    7a34:	7878      	ldrb	r0, [r7, #1]
    7a36:	3b01      	subs	r3, #1
    7a38:	4659      	mov	r1, fp
    7a3a:	4e2c      	ldr	r6, [pc, #176]	; (7aec <f_write+0x2c8>)
    7a3c:	47b0      	blx	r6
    7a3e:	e749      	b.n	78d4 <f_write+0xb0>
	if (fs->wflag) {	/* Is the disk access window dirty? */
    7a40:	793b      	ldrb	r3, [r7, #4]
    7a42:	2b00      	cmp	r3, #0
    7a44:	d098      	beq.n	7978 <f_write+0x154>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    7a46:	003c      	movs	r4, r7
    7a48:	3430      	adds	r4, #48	; 0x30
    7a4a:	7878      	ldrb	r0, [r7, #1]
    7a4c:	2301      	movs	r3, #1
    7a4e:	0021      	movs	r1, r4
    7a50:	4e26      	ldr	r6, [pc, #152]	; (7aec <f_write+0x2c8>)
    7a52:	47b0      	blx	r6
    7a54:	2800      	cmp	r0, #0
    7a56:	d000      	beq.n	7a5a <f_write+0x236>
    7a58:	e747      	b.n	78ea <f_write+0xc6>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    7a5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7a5c:	6a3b      	ldr	r3, [r7, #32]
    7a5e:	69b9      	ldr	r1, [r7, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    7a60:	7138      	strb	r0, [r7, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    7a62:	1ad3      	subs	r3, r2, r3
    7a64:	428b      	cmp	r3, r1
    7a66:	d287      	bcs.n	7978 <f_write+0x154>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    7a68:	78fb      	ldrb	r3, [r7, #3]
    7a6a:	2b02      	cmp	r3, #2
    7a6c:	d184      	bne.n	7978 <f_write+0x154>
    7a6e:	1852      	adds	r2, r2, r1
    7a70:	7878      	ldrb	r0, [r7, #1]
    7a72:	3b01      	subs	r3, #1
    7a74:	0021      	movs	r1, r4
    7a76:	47b0      	blx	r6
    7a78:	e77e      	b.n	7978 <f_write+0x154>
    7a7a:	2330      	movs	r3, #48	; 0x30
    7a7c:	469b      	mov	fp, r3
    7a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7a80:	44bb      	add	fp, r7
    7a82:	9b00      	ldr	r3, [sp, #0]
    7a84:	e7bd      	b.n	7a02 <f_write+0x1de>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    7a86:	69a9      	ldr	r1, [r5, #24]
    7a88:	0028      	movs	r0, r5
    7a8a:	4b19      	ldr	r3, [pc, #100]	; (7af0 <f_write+0x2cc>)
    7a8c:	4798      	blx	r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    7a8e:	2800      	cmp	r0, #0
    7a90:	d000      	beq.n	7a94 <f_write+0x270>
    7a92:	e763      	b.n	795c <f_write+0x138>
    7a94:	e74e      	b.n	7934 <f_write+0x110>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    7a96:	2100      	movs	r1, #0
    7a98:	0028      	movs	r0, r5
    7a9a:	4b15      	ldr	r3, [pc, #84]	; (7af0 <f_write+0x2cc>)
    7a9c:	4798      	blx	r3
    7a9e:	e7f6      	b.n	7a8e <f_write+0x26a>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    7aa0:	7878      	ldrb	r0, [r7, #1]
    7aa2:	2301      	movs	r3, #1
    7aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7aa6:	4659      	mov	r1, fp
    7aa8:	4c10      	ldr	r4, [pc, #64]	; (7aec <f_write+0x2c8>)
    7aaa:	47a0      	blx	r4
    7aac:	2800      	cmp	r0, #0
    7aae:	d000      	beq.n	7ab2 <f_write+0x28e>
    7ab0:	e71b      	b.n	78ea <f_write+0xc6>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    7ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7ab4:	6a3b      	ldr	r3, [r7, #32]
    7ab6:	69b9      	ldr	r1, [r7, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    7ab8:	7138      	strb	r0, [r7, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    7aba:	1ad3      	subs	r3, r2, r3
    7abc:	428b      	cmp	r3, r1
    7abe:	d202      	bcs.n	7ac6 <f_write+0x2a2>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    7ac0:	78fb      	ldrb	r3, [r7, #3]
    7ac2:	2b02      	cmp	r3, #2
    7ac4:	d001      	beq.n	7aca <f_write+0x2a6>
    7ac6:	6968      	ldr	r0, [r5, #20]
    7ac8:	e798      	b.n	79fc <f_write+0x1d8>
    7aca:	1852      	adds	r2, r2, r1
    7acc:	7878      	ldrb	r0, [r7, #1]
    7ace:	2301      	movs	r3, #1
    7ad0:	4659      	mov	r1, fp
    7ad2:	47a0      	blx	r4
    7ad4:	6968      	ldr	r0, [r5, #20]
    7ad6:	e791      	b.n	79fc <f_write+0x1d8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    7ad8:	2302      	movs	r3, #2
    7ada:	746b      	strb	r3, [r5, #17]
    7adc:	4699      	mov	r9, r3
    7ade:	e6b9      	b.n	7854 <f_write+0x30>
    7ae0:	00008a51 	.word	0x00008a51
    7ae4:	00008b95 	.word	0x00008b95
    7ae8:	0000b5f9 	.word	0x0000b5f9
    7aec:	00008c85 	.word	0x00008c85
    7af0:	0000613d 	.word	0x0000613d

00007af4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
    7af4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7af6:	46d6      	mov	lr, sl
    7af8:	464f      	mov	r7, r9
    7afa:	4646      	mov	r6, r8
    7afc:	0004      	movs	r4, r0
    7afe:	b5c0      	push	{r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    7b00:	2800      	cmp	r0, #0
    7b02:	d005      	beq.n	7b10 <f_close+0x1c>
    7b04:	6803      	ldr	r3, [r0, #0]
    7b06:	2b00      	cmp	r3, #0
    7b08:	d002      	beq.n	7b10 <f_close+0x1c>
    7b0a:	781a      	ldrb	r2, [r3, #0]
    7b0c:	2a00      	cmp	r2, #0
    7b0e:	d105      	bne.n	7b1c <f_close+0x28>
		if (res == FR_OK) {
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    7b10:	2009      	movs	r0, #9
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    7b12:	bc1c      	pop	{r2, r3, r4}
    7b14:	4690      	mov	r8, r2
    7b16:	4699      	mov	r9, r3
    7b18:	46a2      	mov	sl, r4
    7b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    7b1c:	8881      	ldrh	r1, [r0, #4]
    7b1e:	88da      	ldrh	r2, [r3, #6]
    7b20:	4291      	cmp	r1, r2
    7b22:	d1f5      	bne.n	7b10 <f_close+0x1c>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    7b24:	7858      	ldrb	r0, [r3, #1]
    7b26:	4b3e      	ldr	r3, [pc, #248]	; (7c20 <f_close+0x12c>)
    7b28:	4698      	mov	r8, r3
    7b2a:	4798      	blx	r3
    7b2c:	07c3      	lsls	r3, r0, #31
    7b2e:	d4ef      	bmi.n	7b10 <f_close+0x1c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    7b30:	7c23      	ldrb	r3, [r4, #16]
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    7b32:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    7b34:	065b      	lsls	r3, r3, #25
    7b36:	d410      	bmi.n	7b5a <f_close+0x66>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    7b38:	2d00      	cmp	r5, #0
    7b3a:	d0e9      	beq.n	7b10 <f_close+0x1c>
    7b3c:	782b      	ldrb	r3, [r5, #0]
    7b3e:	2b00      	cmp	r3, #0
    7b40:	d0e6      	beq.n	7b10 <f_close+0x1c>
    7b42:	88a2      	ldrh	r2, [r4, #4]
    7b44:	88eb      	ldrh	r3, [r5, #6]
    7b46:	429a      	cmp	r2, r3
    7b48:	d1e2      	bne.n	7b10 <f_close+0x1c>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    7b4a:	7868      	ldrb	r0, [r5, #1]
    7b4c:	47c0      	blx	r8
    7b4e:	2301      	movs	r3, #1
    7b50:	4018      	ands	r0, r3
    7b52:	d1dd      	bne.n	7b10 <f_close+0x1c>
			fp->obj.fs = 0;	/* Invalidate file object */
    7b54:	6020      	str	r0, [r4, #0]
    7b56:	2000      	movs	r0, #0
    7b58:	e7db      	b.n	7b12 <f_close+0x1e>
				res = move_window(fs, fp->dir_sect);
    7b5a:	6a27      	ldr	r7, [r4, #32]
	if (sect != fs->winsect) {	/* Window offset changed? */
    7b5c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    7b5e:	4297      	cmp	r7, r2
    7b60:	d013      	beq.n	7b8a <f_close+0x96>
    7b62:	002e      	movs	r6, r5
	if (fs->wflag) {	/* Is the disk access window dirty? */
    7b64:	792b      	ldrb	r3, [r5, #4]
    7b66:	3630      	adds	r6, #48	; 0x30
    7b68:	46b2      	mov	sl, r6
    7b6a:	2b00      	cmp	r3, #0
    7b6c:	d138      	bne.n	7be0 <f_close+0xec>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7b6e:	7868      	ldrb	r0, [r5, #1]
    7b70:	2301      	movs	r3, #1
    7b72:	003a      	movs	r2, r7
    7b74:	4651      	mov	r1, sl
    7b76:	4e2b      	ldr	r6, [pc, #172]	; (7c24 <f_close+0x130>)
    7b78:	47b0      	blx	r6
    7b7a:	2800      	cmp	r0, #0
    7b7c:	d004      	beq.n	7b88 <f_close+0x94>
			fs->winsect = sect;
    7b7e:	2301      	movs	r3, #1
    7b80:	425b      	negs	r3, r3
    7b82:	62eb      	str	r3, [r5, #44]	; 0x2c
    7b84:	2001      	movs	r0, #1
	return res;
    7b86:	e7c4      	b.n	7b12 <f_close+0x1e>
			fs->winsect = sect;
    7b88:	62ef      	str	r7, [r5, #44]	; 0x2c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    7b8a:	2120      	movs	r1, #32
					dir = fp->dir_ptr;
    7b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    7b8e:	7ada      	ldrb	r2, [r3, #11]
    7b90:	430a      	orrs	r2, r1
    7b92:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    7b94:	68a2      	ldr	r2, [r4, #8]
    7b96:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
    7b98:	0a10      	lsrs	r0, r2, #8
    7b9a:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
    7b9c:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
    7b9e:	7809      	ldrb	r1, [r1, #0]
    7ba0:	2903      	cmp	r1, #3
    7ba2:	d037      	beq.n	7c14 <f_close+0x120>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    7ba4:	68e2      	ldr	r2, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
    7ba6:	0028      	movs	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
    7ba8:	0a11      	lsrs	r1, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
    7baa:	7759      	strb	r1, [r3, #29]
    7bac:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
    7bae:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
    7bb0:	7799      	strb	r1, [r3, #30]
    7bb2:	0e12      	lsrs	r2, r2, #24
    7bb4:	2166      	movs	r1, #102	; 0x66
	*ptr++ = (BYTE)val;
    7bb6:	77da      	strb	r2, [r3, #31]
	*ptr++ = (BYTE)val; val >>= 8;
    7bb8:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
    7bba:	7619      	strb	r1, [r3, #24]
	*ptr++ = (BYTE)val;
    7bbc:	3911      	subs	r1, #17
	*ptr++ = (BYTE)val; val >>= 8;
    7bbe:	759a      	strb	r2, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
    7bc0:	75da      	strb	r2, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
    7bc2:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
    7bc4:	74da      	strb	r2, [r3, #19]
	*ptr++ = (BYTE)val;
    7bc6:	7659      	strb	r1, [r3, #25]
					fs->wflag = 1;
    7bc8:	2301      	movs	r3, #1
    7bca:	712b      	strb	r3, [r5, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
    7bcc:	4b16      	ldr	r3, [pc, #88]	; (7c28 <f_close+0x134>)
    7bce:	4798      	blx	r3
					fp->flag &= (BYTE)~FA_MODIFIED;
    7bd0:	2240      	movs	r2, #64	; 0x40
    7bd2:	7c23      	ldrb	r3, [r4, #16]
    7bd4:	4393      	bics	r3, r2
    7bd6:	7423      	strb	r3, [r4, #16]
	if (res == FR_OK)
    7bd8:	2800      	cmp	r0, #0
    7bda:	d19a      	bne.n	7b12 <f_close+0x1e>
    7bdc:	6825      	ldr	r5, [r4, #0]
    7bde:	e7ab      	b.n	7b38 <f_close+0x44>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    7be0:	2301      	movs	r3, #1
    7be2:	0031      	movs	r1, r6
    7be4:	7868      	ldrb	r0, [r5, #1]
    7be6:	4e11      	ldr	r6, [pc, #68]	; (7c2c <f_close+0x138>)
    7be8:	47b0      	blx	r6
    7bea:	0003      	movs	r3, r0
    7bec:	2001      	movs	r0, #1
    7bee:	2b00      	cmp	r3, #0
    7bf0:	d000      	beq.n	7bf4 <f_close+0x100>
    7bf2:	e78e      	b.n	7b12 <f_close+0x1e>
			fs->wflag = 0;	/* Clear window dirty flag */
    7bf4:	712b      	strb	r3, [r5, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    7bf6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    7bf8:	6a2b      	ldr	r3, [r5, #32]
    7bfa:	69a9      	ldr	r1, [r5, #24]
    7bfc:	1ad3      	subs	r3, r2, r3
    7bfe:	428b      	cmp	r3, r1
    7c00:	d2b5      	bcs.n	7b6e <f_close+0x7a>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    7c02:	78eb      	ldrb	r3, [r5, #3]
    7c04:	2b02      	cmp	r3, #2
    7c06:	d1b2      	bne.n	7b6e <f_close+0x7a>
    7c08:	1852      	adds	r2, r2, r1
    7c0a:	7868      	ldrb	r0, [r5, #1]
    7c0c:	3b01      	subs	r3, #1
    7c0e:	4651      	mov	r1, sl
    7c10:	47b0      	blx	r6
    7c12:	e7ac      	b.n	7b6e <f_close+0x7a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    7c14:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
    7c16:	751a      	strb	r2, [r3, #20]
    7c18:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
    7c1a:	755a      	strb	r2, [r3, #21]
    7c1c:	e7c2      	b.n	7ba4 <f_close+0xb0>
    7c1e:	46c0      	nop			; (mov r8, r8)
    7c20:	00008a51 	.word	0x00008a51
    7c24:	00008b95 	.word	0x00008b95
    7c28:	000052c5 	.word	0x000052c5
    7c2c:	00008c85 	.word	0x00008c85

00007c30 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    7c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c32:	4645      	mov	r5, r8
    7c34:	46de      	mov	lr, fp
    7c36:	4657      	mov	r7, sl
    7c38:	464e      	mov	r6, r9
    7c3a:	b5e0      	push	{r5, r6, r7, lr}
    7c3c:	000c      	movs	r4, r1
    7c3e:	0005      	movs	r5, r0
    7c40:	b085      	sub	sp, #20
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    7c42:	2009      	movs	r0, #9
    7c44:	2d00      	cmp	r5, #0
    7c46:	d036      	beq.n	7cb6 <f_opendir+0x86>
	if (!tp) return vol;	/* Invalid path name? */
    7c48:	2900      	cmp	r1, #0
    7c4a:	d03f      	beq.n	7ccc <f_opendir+0x9c>
    7c4c:	000b      	movs	r3, r1
    7c4e:	e002      	b.n	7c56 <f_opendir+0x26>
		tc = *tt++;
    7c50:	000b      	movs	r3, r1
	} while (!IsTerminator(tc) && tc != ':');
    7c52:	2a3a      	cmp	r2, #58	; 0x3a
    7c54:	d036      	beq.n	7cc4 <f_opendir+0x94>
		tc = *tt++;
    7c56:	781a      	ldrb	r2, [r3, #0]
    7c58:	1c59      	adds	r1, r3, #1
	} while (!IsTerminator(tc) && tc != ':');
    7c5a:	2a20      	cmp	r2, #32
    7c5c:	d8f8      	bhi.n	7c50 <f_opendir+0x20>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    7c5e:	4b9e      	ldr	r3, [pc, #632]	; (7ed8 <f_opendir+0x2a8>)
    7c60:	681e      	ldr	r6, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    7c62:	2e00      	cmp	r6, #0
    7c64:	d065      	beq.n	7d32 <f_opendir+0x102>
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    7c66:	7833      	ldrb	r3, [r6, #0]
    7c68:	2b00      	cmp	r3, #0
    7c6a:	d033      	beq.n	7cd4 <f_opendir+0xa4>
		stat = disk_status(fs->pdrv);
    7c6c:	4b9b      	ldr	r3, [pc, #620]	; (7edc <f_opendir+0x2ac>)
    7c6e:	7870      	ldrb	r0, [r6, #1]
    7c70:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    7c72:	07c3      	lsls	r3, r0, #31
    7c74:	d42e      	bmi.n	7cd4 <f_opendir+0xa4>

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
	if (res == FR_OK) {
		dp->obj.fs = fs;
    7c76:	602e      	str	r6, [r5, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    7c78:	0021      	movs	r1, r4
    7c7a:	0028      	movs	r0, r5
    7c7c:	4b98      	ldr	r3, [pc, #608]	; (7ee0 <f_opendir+0x2b0>)
    7c7e:	4798      	blx	r3
		if (res == FR_OK) {						/* Follow completed */
    7c80:	2800      	cmp	r0, #0
    7c82:	d152      	bne.n	7d2a <f_opendir+0xfa>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    7c84:	232b      	movs	r3, #43	; 0x2b
    7c86:	5ceb      	ldrb	r3, [r5, r3]
    7c88:	2b7f      	cmp	r3, #127	; 0x7f
    7c8a:	d80b      	bhi.n	7ca4 <f_opendir+0x74>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
    7c8c:	79ab      	ldrb	r3, [r5, #6]
    7c8e:	06db      	lsls	r3, r3, #27
    7c90:	d54d      	bpl.n	7d2e <f_opendir+0xfe>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    7c92:	69e9      	ldr	r1, [r5, #28]
	rv = rv << 8 | ptr[0];
    7c94:	7eca      	ldrb	r2, [r1, #27]
    7c96:	7e8b      	ldrb	r3, [r1, #26]
    7c98:	0212      	lsls	r2, r2, #8
	cl = ld_word(dir + DIR_FstClusLO);
    7c9a:	4313      	orrs	r3, r2
	if (fs->fs_type == FS_FAT32) {
    7c9c:	7832      	ldrb	r2, [r6, #0]
    7c9e:	2a03      	cmp	r2, #3
    7ca0:	d051      	beq.n	7d46 <f_opendir+0x116>
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
    7ca2:	60ab      	str	r3, [r5, #8]
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dp->obj.id = fs->id;
    7ca4:	88f3      	ldrh	r3, [r6, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    7ca6:	0028      	movs	r0, r5
				dp->obj.id = fs->id;
    7ca8:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
    7caa:	4b8e      	ldr	r3, [pc, #568]	; (7ee4 <f_opendir+0x2b4>)
    7cac:	4798      	blx	r3
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    7cae:	2804      	cmp	r0, #4
    7cb0:	d03d      	beq.n	7d2e <f_opendir+0xfe>
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
    7cb2:	2800      	cmp	r0, #0
    7cb4:	d10b      	bne.n	7cce <f_opendir+0x9e>

	LEAVE_FF(fs, res);
}
    7cb6:	b005      	add	sp, #20
    7cb8:	bc3c      	pop	{r2, r3, r4, r5}
    7cba:	4690      	mov	r8, r2
    7cbc:	4699      	mov	r9, r3
    7cbe:	46a2      	mov	sl, r4
    7cc0:	46ab      	mov	fp, r5
    7cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    7cc4:	7822      	ldrb	r2, [r4, #0]
    7cc6:	3402      	adds	r4, #2
    7cc8:	42a1      	cmp	r1, r4
    7cca:	d034      	beq.n	7d36 <f_opendir+0x106>
	if (vol < 0) return FR_INVALID_DRIVE;
    7ccc:	200b      	movs	r0, #11
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function failed */
    7cce:	2300      	movs	r3, #0
    7cd0:	602b      	str	r3, [r5, #0]
    7cd2:	e7f0      	b.n	7cb6 <f_opendir+0x86>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    7cd4:	2300      	movs	r3, #0
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    7cd6:	7870      	ldrb	r0, [r6, #1]
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    7cd8:	7033      	strb	r3, [r6, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    7cda:	4b83      	ldr	r3, [pc, #524]	; (7ee8 <f_opendir+0x2b8>)
    7cdc:	4798      	blx	r3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    7cde:	2301      	movs	r3, #1
    7ce0:	4003      	ands	r3, r0
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    7ce2:	2003      	movs	r0, #3
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    7ce4:	2b00      	cmp	r3, #0
    7ce6:	d1f2      	bne.n	7cce <f_opendir+0x9e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7ce8:	0037      	movs	r7, r6
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7cea:	7133      	strb	r3, [r6, #4]
    7cec:	2301      	movs	r3, #1
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7cee:	3730      	adds	r7, #48	; 0x30
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7cf0:	425b      	negs	r3, r3
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7cf2:	9700      	str	r7, [sp, #0]
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7cf4:	62f3      	str	r3, [r6, #44]	; 0x2c
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7cf6:	0039      	movs	r1, r7
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7cf8:	4699      	mov	r9, r3
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7cfa:	4f7c      	ldr	r7, [pc, #496]	; (7eec <f_opendir+0x2bc>)
    7cfc:	7870      	ldrb	r0, [r6, #1]
    7cfe:	3302      	adds	r3, #2
    7d00:	2200      	movs	r2, #0
    7d02:	47b8      	blx	r7
    7d04:	46b8      	mov	r8, r7
    7d06:	4682      	mov	sl, r0
    7d08:	2800      	cmp	r0, #0
    7d0a:	d118      	bne.n	7d3e <f_opendir+0x10e>
    7d0c:	4b78      	ldr	r3, [pc, #480]	; (7ef0 <f_opendir+0x2c0>)
			fs->winsect = sect;
    7d0e:	62f0      	str	r0, [r6, #44]	; 0x2c
    7d10:	0030      	movs	r0, r6
    7d12:	469b      	mov	fp, r3
    7d14:	4798      	blx	r3
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    7d16:	2802      	cmp	r0, #2
    7d18:	d100      	bne.n	7d1c <f_opendir+0xec>
    7d1a:	e0f7      	b.n	7f0c <f_opendir+0x2dc>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    7d1c:	2804      	cmp	r0, #4
    7d1e:	d100      	bne.n	7d22 <f_opendir+0xf2>
    7d20:	e15e      	b.n	7fe0 <f_opendir+0x3b0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    7d22:	2801      	cmp	r0, #1
    7d24:	d92c      	bls.n	7d80 <f_opendir+0x150>
    7d26:	200d      	movs	r0, #13
    7d28:	e7d1      	b.n	7cce <f_opendir+0x9e>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    7d2a:	2804      	cmp	r0, #4
    7d2c:	d1cf      	bne.n	7cce <f_opendir+0x9e>
					res = FR_NO_PATH;
    7d2e:	2005      	movs	r0, #5
    7d30:	e7cd      	b.n	7cce <f_opendir+0x9e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    7d32:	200c      	movs	r0, #12
    7d34:	e7cb      	b.n	7cce <f_opendir+0x9e>
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    7d36:	2a30      	cmp	r2, #48	; 0x30
    7d38:	d1c8      	bne.n	7ccc <f_opendir+0x9c>
    7d3a:	001c      	movs	r4, r3
    7d3c:	e78f      	b.n	7c5e <f_opendir+0x2e>
			fs->winsect = sect;
    7d3e:	464b      	mov	r3, r9
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    7d40:	2001      	movs	r0, #1
			fs->winsect = sect;
    7d42:	62f3      	str	r3, [r6, #44]	; 0x2c
    7d44:	e7c3      	b.n	7cce <f_opendir+0x9e>
	rv = rv << 8 | ptr[0];
    7d46:	7d48      	ldrb	r0, [r1, #21]
    7d48:	7d0a      	ldrb	r2, [r1, #20]
    7d4a:	0200      	lsls	r0, r0, #8
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    7d4c:	4302      	orrs	r2, r0
    7d4e:	0412      	lsls	r2, r2, #16
    7d50:	4313      	orrs	r3, r2
    7d52:	e7a6      	b.n	7ca2 <f_opendir+0x72>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7d54:	4653      	mov	r3, sl
    7d56:	7133      	strb	r3, [r6, #4]
    7d58:	464b      	mov	r3, r9
    7d5a:	62f3      	str	r3, [r6, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    7d5c:	9b02      	ldr	r3, [sp, #8]
    7d5e:	3301      	adds	r3, #1
    7d60:	d009      	beq.n	7d76 <f_opendir+0x146>
    7d62:	000a      	movs	r2, r1
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7d64:	7870      	ldrb	r0, [r6, #1]
    7d66:	2301      	movs	r3, #1
    7d68:	9900      	ldr	r1, [sp, #0]
    7d6a:	47c0      	blx	r8
    7d6c:	2800      	cmp	r0, #0
    7d6e:	d000      	beq.n	7d72 <f_opendir+0x142>
    7d70:	e15c      	b.n	802c <f_opendir+0x3fc>
			fs->winsect = sect;
    7d72:	9b02      	ldr	r3, [sp, #8]
    7d74:	62f3      	str	r3, [r6, #44]	; 0x2c
    7d76:	0030      	movs	r0, r6
    7d78:	47d8      	blx	fp
	} while (part == 0 && fmt >= 2 && ++i < 4);
    7d7a:	2801      	cmp	r0, #1
    7d7c:	d900      	bls.n	7d80 <f_opendir+0x150>
    7d7e:	e10d      	b.n	7f9c <f_opendir+0x36c>
	rv = ptr[1];
    7d80:	233c      	movs	r3, #60	; 0x3c
	rv = rv << 8 | ptr[0];
    7d82:	5cf2      	ldrb	r2, [r6, r3]
    7d84:	3b01      	subs	r3, #1
    7d86:	5cf3      	ldrb	r3, [r6, r3]
    7d88:	0212      	lsls	r2, r2, #8
    7d8a:	4313      	orrs	r3, r2
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    7d8c:	2280      	movs	r2, #128	; 0x80
    7d8e:	b21b      	sxth	r3, r3
    7d90:	0092      	lsls	r2, r2, #2
    7d92:	4293      	cmp	r3, r2
    7d94:	d1c7      	bne.n	7d26 <f_opendir+0xf6>
	rv = ptr[1];
    7d96:	2347      	movs	r3, #71	; 0x47
	rv = rv << 8 | ptr[0];
    7d98:	3abb      	subs	r2, #187	; 0xbb
    7d9a:	5cf3      	ldrb	r3, [r6, r3]
    7d9c:	3aff      	subs	r2, #255	; 0xff
    7d9e:	5cb2      	ldrb	r2, [r6, r2]
    7da0:	021b      	lsls	r3, r3, #8
    7da2:	431a      	orrs	r2, r3
    7da4:	4692      	mov	sl, r2
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    7da6:	1e13      	subs	r3, r2, #0
    7da8:	d10f      	bne.n	7dca <f_opendir+0x19a>
	rv = rv << 8 | ptr[2];
    7daa:	3356      	adds	r3, #86	; 0x56
    7dac:	5cf2      	ldrb	r2, [r6, r3]
    7dae:	0033      	movs	r3, r6
    7db0:	3356      	adds	r3, #86	; 0x56
    7db2:	785b      	ldrb	r3, [r3, #1]
    7db4:	021b      	lsls	r3, r3, #8
    7db6:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7db8:	2255      	movs	r2, #85	; 0x55
    7dba:	5cb2      	ldrb	r2, [r6, r2]
    7dbc:	021b      	lsls	r3, r3, #8
    7dbe:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7dc0:	2254      	movs	r2, #84	; 0x54
    7dc2:	5cb2      	ldrb	r2, [r6, r2]
    7dc4:	021b      	lsls	r3, r3, #8
    7dc6:	431a      	orrs	r2, r3
    7dc8:	4692      	mov	sl, r2
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
    7dca:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    7dcc:	4698      	mov	r8, r3
		fs->fsize = fasize;
    7dce:	4653      	mov	r3, sl
    7dd0:	61b3      	str	r3, [r6, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    7dd2:	2340      	movs	r3, #64	; 0x40
    7dd4:	5cf3      	ldrb	r3, [r6, r3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    7dd6:	1e5a      	subs	r2, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    7dd8:	70f3      	strb	r3, [r6, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    7dda:	2a01      	cmp	r2, #1
    7ddc:	d8a3      	bhi.n	7d26 <f_opendir+0xf6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    7dde:	4652      	mov	r2, sl
    7de0:	435a      	muls	r2, r3
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    7de2:	233d      	movs	r3, #61	; 0x3d
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    7de4:	9200      	str	r2, [sp, #0]
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    7de6:	5cf1      	ldrb	r1, [r6, r3]
    7de8:	b28b      	uxth	r3, r1
    7dea:	8173      	strh	r3, [r6, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    7dec:	2b00      	cmp	r3, #0
    7dee:	d09a      	beq.n	7d26 <f_opendir+0xf6>
    7df0:	1e4b      	subs	r3, r1, #1
    7df2:	4219      	tst	r1, r3
    7df4:	d197      	bne.n	7d26 <f_opendir+0xf6>
	rv = ptr[1];
    7df6:	2342      	movs	r3, #66	; 0x42
	rv = rv << 8 | ptr[0];
    7df8:	2241      	movs	r2, #65	; 0x41
    7dfa:	5cf3      	ldrb	r3, [r6, r3]
    7dfc:	5cb2      	ldrb	r2, [r6, r2]
    7dfe:	021b      	lsls	r3, r3, #8
    7e00:	431a      	orrs	r2, r3
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    7e02:	0013      	movs	r3, r2
	rv = rv << 8 | ptr[0];
    7e04:	4693      	mov	fp, r2
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    7e06:	8132      	strh	r2, [r6, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    7e08:	071b      	lsls	r3, r3, #28
    7e0a:	d18c      	bne.n	7d26 <f_opendir+0xf6>
	rv = ptr[1];
    7e0c:	2344      	movs	r3, #68	; 0x44
	rv = rv << 8 | ptr[0];
    7e0e:	2243      	movs	r2, #67	; 0x43
    7e10:	5cf3      	ldrb	r3, [r6, r3]
    7e12:	5cb0      	ldrb	r0, [r6, r2]
    7e14:	021b      	lsls	r3, r3, #8
    7e16:	4318      	orrs	r0, r3
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    7e18:	d10e      	bne.n	7e38 <f_opendir+0x208>
	rv = rv << 8 | ptr[2];
    7e1a:	2352      	movs	r3, #82	; 0x52
    7e1c:	5cf2      	ldrb	r2, [r6, r3]
    7e1e:	0033      	movs	r3, r6
    7e20:	3352      	adds	r3, #82	; 0x52
    7e22:	785b      	ldrb	r3, [r3, #1]
    7e24:	021b      	lsls	r3, r3, #8
    7e26:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7e28:	2251      	movs	r2, #81	; 0x51
    7e2a:	5cb0      	ldrb	r0, [r6, r2]
    7e2c:	021b      	lsls	r3, r3, #8
	rv = rv << 8 | ptr[0];
    7e2e:	3a01      	subs	r2, #1
	rv = rv << 8 | ptr[1];
    7e30:	4303      	orrs	r3, r0
	rv = rv << 8 | ptr[0];
    7e32:	5cb0      	ldrb	r0, [r6, r2]
    7e34:	021b      	lsls	r3, r3, #8
    7e36:	4318      	orrs	r0, r3
	rv = ptr[1];
    7e38:	233f      	movs	r3, #63	; 0x3f
	rv = rv << 8 | ptr[0];
    7e3a:	223e      	movs	r2, #62	; 0x3e
    7e3c:	5cf3      	ldrb	r3, [r6, r3]
    7e3e:	5cb7      	ldrb	r7, [r6, r2]
    7e40:	021b      	lsls	r3, r3, #8
    7e42:	431f      	orrs	r7, r3
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    7e44:	d100      	bne.n	7e48 <f_opendir+0x218>
    7e46:	e76e      	b.n	7d26 <f_opendir+0xf6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    7e48:	465b      	mov	r3, fp
    7e4a:	9a00      	ldr	r2, [sp, #0]
    7e4c:	091b      	lsrs	r3, r3, #4
    7e4e:	4691      	mov	r9, r2
    7e50:	19db      	adds	r3, r3, r7
    7e52:	4499      	add	r9, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    7e54:	4581      	cmp	r9, r0
    7e56:	d900      	bls.n	7e5a <f_opendir+0x22a>
    7e58:	e765      	b.n	7d26 <f_opendir+0xf6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    7e5a:	464b      	mov	r3, r9
    7e5c:	1ac0      	subs	r0, r0, r3
    7e5e:	4b25      	ldr	r3, [pc, #148]	; (7ef4 <f_opendir+0x2c4>)
    7e60:	4798      	blx	r3
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    7e62:	4b25      	ldr	r3, [pc, #148]	; (7ef8 <f_opendir+0x2c8>)
    7e64:	1e42      	subs	r2, r0, #1
    7e66:	429a      	cmp	r2, r3
    7e68:	d900      	bls.n	7e6c <f_opendir+0x23c>
    7e6a:	e75c      	b.n	7d26 <f_opendir+0xf6>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    7e6c:	4b23      	ldr	r3, [pc, #140]	; (7efc <f_opendir+0x2cc>)
    7e6e:	4298      	cmp	r0, r3
    7e70:	d900      	bls.n	7e74 <f_opendir+0x244>
    7e72:	e103      	b.n	807c <f_opendir+0x44c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    7e74:	4b22      	ldr	r3, [pc, #136]	; (7f00 <f_opendir+0x2d0>)
    7e76:	4298      	cmp	r0, r3
    7e78:	d900      	bls.n	7e7c <f_opendir+0x24c>
    7e7a:	e0eb      	b.n	8054 <f_opendir+0x424>
		fs->volbase = bsect;							/* Volume start sector */
    7e7c:	4643      	mov	r3, r8
		fs->database = bsect + sysect;					/* Data start sector */
    7e7e:	4641      	mov	r1, r8
		fs->volbase = bsect;							/* Volume start sector */
    7e80:	61f3      	str	r3, [r6, #28]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    7e82:	465b      	mov	r3, fp
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    7e84:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    7e86:	4447      	add	r7, r8
		fs->database = bsect + sysect;					/* Data start sector */
    7e88:	4449      	add	r1, r9
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    7e8a:	6170      	str	r0, [r6, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    7e8c:	6237      	str	r7, [r6, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    7e8e:	62b1      	str	r1, [r6, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    7e90:	2b00      	cmp	r3, #0
    7e92:	d100      	bne.n	7e96 <f_opendir+0x266>
    7e94:	e747      	b.n	7d26 <f_opendir+0xf6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    7e96:	9b00      	ldr	r3, [sp, #0]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    7e98:	2201      	movs	r2, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    7e9a:	469c      	mov	ip, r3
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    7e9c:	2303      	movs	r3, #3
    7e9e:	4343      	muls	r3, r0
    7ea0:	4010      	ands	r0, r2
    7ea2:	085b      	lsrs	r3, r3, #1
    7ea4:	1818      	adds	r0, r3, r0
    7ea6:	0013      	movs	r3, r2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    7ea8:	4467      	add	r7, ip
    7eaa:	6277      	str	r7, [r6, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    7eac:	4a15      	ldr	r2, [pc, #84]	; (7f04 <f_opendir+0x2d4>)
    7eae:	4694      	mov	ip, r2
    7eb0:	4460      	add	r0, ip
    7eb2:	0a40      	lsrs	r0, r0, #9
    7eb4:	4582      	cmp	sl, r0
    7eb6:	d200      	bcs.n	7eba <f_opendir+0x28a>
    7eb8:	e735      	b.n	7d26 <f_opendir+0xf6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    7eba:	2201      	movs	r2, #1
    7ebc:	4252      	negs	r2, r2
    7ebe:	6132      	str	r2, [r6, #16]
    7ec0:	60f2      	str	r2, [r6, #12]
		fs->fsi_flag = 0x80;
    7ec2:	3281      	adds	r2, #129	; 0x81
    7ec4:	7172      	strb	r2, [r6, #5]
	fs->id = ++Fsid;		/* Volume mount ID */
    7ec6:	4a10      	ldr	r2, [pc, #64]	; (7f08 <f_opendir+0x2d8>)
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
    7ec8:	7033      	strb	r3, [r6, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    7eca:	8813      	ldrh	r3, [r2, #0]
    7ecc:	3301      	adds	r3, #1
    7ece:	b29b      	uxth	r3, r3
    7ed0:	8013      	strh	r3, [r2, #0]
    7ed2:	80f3      	strh	r3, [r6, #6]
    7ed4:	e6cf      	b.n	7c76 <f_opendir+0x46>
    7ed6:	46c0      	nop			; (mov r8, r8)
    7ed8:	20000b50 	.word	0x20000b50
    7edc:	00008a51 	.word	0x00008a51
    7ee0:	00006b11 	.word	0x00006b11
    7ee4:	000064f5 	.word	0x000064f5
    7ee8:	00008a65 	.word	0x00008a65
    7eec:	00008b95 	.word	0x00008b95
    7ef0:	00005135 	.word	0x00005135
    7ef4:	000091b5 	.word	0x000091b5
    7ef8:	0ffffff4 	.word	0x0ffffff4
    7efc:	0000fff5 	.word	0x0000fff5
    7f00:	00000ff5 	.word	0x00000ff5
    7f04:	000001ff 	.word	0x000001ff
    7f08:	20000b54 	.word	0x20000b54
	rv = rv << 8 | ptr[2];
    7f0c:	23fc      	movs	r3, #252	; 0xfc
    7f0e:	005b      	lsls	r3, r3, #1
    7f10:	5cf2      	ldrb	r2, [r6, r3]
    7f12:	0033      	movs	r3, r6
    7f14:	33f9      	adds	r3, #249	; 0xf9
    7f16:	33ff      	adds	r3, #255	; 0xff
    7f18:	785b      	ldrb	r3, [r3, #1]
    7f1a:	021b      	lsls	r3, r3, #8
    7f1c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7f1e:	22f8      	movs	r2, #248	; 0xf8
    7f20:	32ff      	adds	r2, #255	; 0xff
    7f22:	5cb2      	ldrb	r2, [r6, r2]
    7f24:	021b      	lsls	r3, r3, #8
    7f26:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7f28:	22fb      	movs	r2, #251	; 0xfb
    7f2a:	0052      	lsls	r2, r2, #1
    7f2c:	5cb2      	ldrb	r2, [r6, r2]
    7f2e:	021b      	lsls	r3, r3, #8
    7f30:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    7f32:	2382      	movs	r3, #130	; 0x82
    7f34:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    7f36:	0011      	movs	r1, r2
    7f38:	9202      	str	r2, [sp, #8]
	rv = rv << 8 | ptr[2];
    7f3a:	5cf2      	ldrb	r2, [r6, r3]
    7f3c:	18f3      	adds	r3, r6, r3
    7f3e:	785b      	ldrb	r3, [r3, #1]
    7f40:	021b      	lsls	r3, r3, #8
    7f42:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7f44:	4a9a      	ldr	r2, [pc, #616]	; (81b0 <f_opendir+0x580>)
    7f46:	021b      	lsls	r3, r3, #8
    7f48:	5cb2      	ldrb	r2, [r6, r2]
    7f4a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7f4c:	4a99      	ldr	r2, [pc, #612]	; (81b4 <f_opendir+0x584>)
    7f4e:	021b      	lsls	r3, r3, #8
    7f50:	5cb2      	ldrb	r2, [r6, r2]
    7f52:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    7f54:	2386      	movs	r3, #134	; 0x86
    7f56:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    7f58:	9201      	str	r2, [sp, #4]
	rv = rv << 8 | ptr[2];
    7f5a:	5cf2      	ldrb	r2, [r6, r3]
    7f5c:	18f3      	adds	r3, r6, r3
    7f5e:	785b      	ldrb	r3, [r3, #1]
    7f60:	021b      	lsls	r3, r3, #8
    7f62:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7f64:	4a94      	ldr	r2, [pc, #592]	; (81b8 <f_opendir+0x588>)
    7f66:	021b      	lsls	r3, r3, #8
    7f68:	5cb2      	ldrb	r2, [r6, r2]
    7f6a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7f6c:	4a93      	ldr	r2, [pc, #588]	; (81bc <f_opendir+0x58c>)
    7f6e:	021b      	lsls	r3, r3, #8
    7f70:	5cb2      	ldrb	r2, [r6, r2]
    7f72:	431a      	orrs	r2, r3
	rv = rv << 8 | ptr[2];
    7f74:	238a      	movs	r3, #138	; 0x8a
    7f76:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
    7f78:	0017      	movs	r7, r2
	rv = rv << 8 | ptr[2];
    7f7a:	5cf2      	ldrb	r2, [r6, r3]
    7f7c:	18f3      	adds	r3, r6, r3
    7f7e:	785b      	ldrb	r3, [r3, #1]
    7f80:	021b      	lsls	r3, r3, #8
    7f82:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    7f84:	4a8e      	ldr	r2, [pc, #568]	; (81c0 <f_opendir+0x590>)
    7f86:	021b      	lsls	r3, r3, #8
    7f88:	5cb2      	ldrb	r2, [r6, r2]
    7f8a:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    7f8c:	4a8d      	ldr	r2, [pc, #564]	; (81c4 <f_opendir+0x594>)
    7f8e:	021b      	lsls	r3, r3, #8
    7f90:	5cb2      	ldrb	r2, [r6, r2]
    7f92:	431a      	orrs	r2, r3
    7f94:	9203      	str	r2, [sp, #12]
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    7f96:	2900      	cmp	r1, #0
    7f98:	d000      	beq.n	7f9c <f_opendir+0x36c>
    7f9a:	e6db      	b.n	7d54 <f_opendir+0x124>
    7f9c:	9b01      	ldr	r3, [sp, #4]
    7f9e:	2b00      	cmp	r3, #0
    7fa0:	d120      	bne.n	7fe4 <f_opendir+0x3b4>
    7fa2:	2f00      	cmp	r7, #0
    7fa4:	d130      	bne.n	8008 <f_opendir+0x3d8>
    7fa6:	9b03      	ldr	r3, [sp, #12]
    7fa8:	2b00      	cmp	r3, #0
    7faa:	d100      	bne.n	7fae <f_opendir+0x37e>
    7fac:	e6bb      	b.n	7d26 <f_opendir+0xf6>
    7fae:	001f      	movs	r7, r3
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7fb0:	2300      	movs	r3, #0
    7fb2:	7133      	strb	r3, [r6, #4]
    7fb4:	3b01      	subs	r3, #1
    7fb6:	4699      	mov	r9, r3
    7fb8:	62f3      	str	r3, [r6, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    7fba:	003b      	movs	r3, r7
    7fbc:	3301      	adds	r3, #1
    7fbe:	d007      	beq.n	7fd0 <f_opendir+0x3a0>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7fc0:	7870      	ldrb	r0, [r6, #1]
    7fc2:	2301      	movs	r3, #1
    7fc4:	003a      	movs	r2, r7
    7fc6:	9900      	ldr	r1, [sp, #0]
    7fc8:	47c0      	blx	r8
    7fca:	2800      	cmp	r0, #0
    7fcc:	d13e      	bne.n	804c <f_opendir+0x41c>
			fs->winsect = sect;
    7fce:	62f7      	str	r7, [r6, #44]	; 0x2c
    7fd0:	0030      	movs	r0, r6
    7fd2:	47d8      	blx	fp
	} while (part == 0 && fmt >= 2 && ++i < 4);
    7fd4:	2801      	cmp	r0, #1
    7fd6:	d800      	bhi.n	7fda <f_opendir+0x3aa>
    7fd8:	e6d2      	b.n	7d80 <f_opendir+0x150>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    7fda:	2804      	cmp	r0, #4
    7fdc:	d000      	beq.n	7fe0 <f_opendir+0x3b0>
    7fde:	e6a2      	b.n	7d26 <f_opendir+0xf6>
    7fe0:	2001      	movs	r0, #1
    7fe2:	e674      	b.n	7cce <f_opendir+0x9e>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    7fe4:	2300      	movs	r3, #0
    7fe6:	7133      	strb	r3, [r6, #4]
    7fe8:	3b01      	subs	r3, #1
    7fea:	4699      	mov	r9, r3
    7fec:	62f3      	str	r3, [r6, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    7fee:	9b01      	ldr	r3, [sp, #4]
    7ff0:	3301      	adds	r3, #1
    7ff2:	d026      	beq.n	8042 <f_opendir+0x412>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    7ff4:	7870      	ldrb	r0, [r6, #1]
    7ff6:	2301      	movs	r3, #1
    7ff8:	9a01      	ldr	r2, [sp, #4]
    7ffa:	9900      	ldr	r1, [sp, #0]
    7ffc:	47c0      	blx	r8
    7ffe:	2800      	cmp	r0, #0
    8000:	d01d      	beq.n	803e <f_opendir+0x40e>
			fs->winsect = sect;
    8002:	464b      	mov	r3, r9
    8004:	62f3      	str	r3, [r6, #44]	; 0x2c
    8006:	e7cc      	b.n	7fa2 <f_opendir+0x372>
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    8008:	2300      	movs	r3, #0
    800a:	7133      	strb	r3, [r6, #4]
    800c:	3b01      	subs	r3, #1
    800e:	4699      	mov	r9, r3
    8010:	62f3      	str	r3, [r6, #44]	; 0x2c
	if (sect != fs->winsect) {	/* Window offset changed? */
    8012:	003b      	movs	r3, r7
    8014:	3301      	adds	r3, #1
    8016:	d00d      	beq.n	8034 <f_opendir+0x404>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    8018:	7870      	ldrb	r0, [r6, #1]
    801a:	2301      	movs	r3, #1
    801c:	003a      	movs	r2, r7
    801e:	9900      	ldr	r1, [sp, #0]
    8020:	47c0      	blx	r8
    8022:	2800      	cmp	r0, #0
    8024:	d005      	beq.n	8032 <f_opendir+0x402>
			fs->winsect = sect;
    8026:	464b      	mov	r3, r9
    8028:	62f3      	str	r3, [r6, #44]	; 0x2c
    802a:	e7bc      	b.n	7fa6 <f_opendir+0x376>
    802c:	464b      	mov	r3, r9
    802e:	62f3      	str	r3, [r6, #44]	; 0x2c
    8030:	e7b4      	b.n	7f9c <f_opendir+0x36c>
    8032:	62f7      	str	r7, [r6, #44]	; 0x2c
    8034:	0030      	movs	r0, r6
    8036:	47d8      	blx	fp
	} while (part == 0 && fmt >= 2 && ++i < 4);
    8038:	2801      	cmp	r0, #1
    803a:	d8b4      	bhi.n	7fa6 <f_opendir+0x376>
    803c:	e6a0      	b.n	7d80 <f_opendir+0x150>
			fs->winsect = sect;
    803e:	9b01      	ldr	r3, [sp, #4]
    8040:	62f3      	str	r3, [r6, #44]	; 0x2c
    8042:	0030      	movs	r0, r6
    8044:	47d8      	blx	fp
	} while (part == 0 && fmt >= 2 && ++i < 4);
    8046:	2801      	cmp	r0, #1
    8048:	d8ab      	bhi.n	7fa2 <f_opendir+0x372>
    804a:	e699      	b.n	7d80 <f_opendir+0x150>
			fs->winsect = sect;
    804c:	464b      	mov	r3, r9
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    804e:	2001      	movs	r0, #1
			fs->winsect = sect;
    8050:	62f3      	str	r3, [r6, #44]	; 0x2c
    8052:	e63c      	b.n	7cce <f_opendir+0x9e>
		fs->volbase = bsect;							/* Volume start sector */
    8054:	4643      	mov	r3, r8
		fs->database = bsect + sysect;					/* Data start sector */
    8056:	4641      	mov	r1, r8
		fs->volbase = bsect;							/* Volume start sector */
    8058:	61f3      	str	r3, [r6, #28]
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    805a:	465b      	mov	r3, fp
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    805c:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    805e:	4447      	add	r7, r8
		fs->database = bsect + sysect;					/* Data start sector */
    8060:	4449      	add	r1, r9
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    8062:	6170      	str	r0, [r6, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    8064:	6237      	str	r7, [r6, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    8066:	62b1      	str	r1, [r6, #40]	; 0x28
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    8068:	2b00      	cmp	r3, #0
    806a:	d100      	bne.n	806e <f_opendir+0x43e>
    806c:	e65b      	b.n	7d26 <f_opendir+0xf6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    806e:	9b00      	ldr	r3, [sp, #0]
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    8070:	0040      	lsls	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    8072:	469c      	mov	ip, r3
    8074:	4467      	add	r7, ip
    8076:	6277      	str	r7, [r6, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    8078:	2302      	movs	r3, #2
    807a:	e717      	b.n	7eac <f_opendir+0x27c>
		fs->volbase = bsect;							/* Volume start sector */
    807c:	4643      	mov	r3, r8
    807e:	61f3      	str	r3, [r6, #28]
		fs->database = bsect + sysect;					/* Data start sector */
    8080:	464b      	mov	r3, r9
    8082:	4443      	add	r3, r8
    8084:	62b3      	str	r3, [r6, #40]	; 0x28
	rv = ptr[1];
    8086:	235b      	movs	r3, #91	; 0x5b
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    8088:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    808a:	4447      	add	r7, r8
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    808c:	6170      	str	r0, [r6, #20]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    808e:	6237      	str	r7, [r6, #32]
	rv = rv << 8 | ptr[0];
    8090:	5cf2      	ldrb	r2, [r6, r3]
    8092:	3b01      	subs	r3, #1
    8094:	5cf3      	ldrb	r3, [r6, r3]
    8096:	0212      	lsls	r2, r2, #8
    8098:	4313      	orrs	r3, r2
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    809a:	d000      	beq.n	809e <f_opendir+0x46e>
    809c:	e643      	b.n	7d26 <f_opendir+0xf6>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    809e:	465b      	mov	r3, fp
    80a0:	2b00      	cmp	r3, #0
    80a2:	d000      	beq.n	80a6 <f_opendir+0x476>
    80a4:	e63f      	b.n	7d26 <f_opendir+0xf6>
	rv = rv << 8 | ptr[2];
    80a6:	335e      	adds	r3, #94	; 0x5e
    80a8:	5cf2      	ldrb	r2, [r6, r3]
    80aa:	0033      	movs	r3, r6
    80ac:	335e      	adds	r3, #94	; 0x5e
    80ae:	785b      	ldrb	r3, [r3, #1]
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    80b0:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[2];
    80b2:	021b      	lsls	r3, r3, #8
    80b4:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    80b6:	225d      	movs	r2, #93	; 0x5d
    80b8:	5cb2      	ldrb	r2, [r6, r2]
    80ba:	021b      	lsls	r3, r3, #8
    80bc:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    80be:	225c      	movs	r2, #92	; 0x5c
    80c0:	5cb2      	ldrb	r2, [r6, r2]
    80c2:	021b      	lsls	r3, r3, #8
    80c4:	4313      	orrs	r3, r2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    80c6:	6273      	str	r3, [r6, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    80c8:	4b3f      	ldr	r3, [pc, #252]	; (81c8 <f_opendir+0x598>)
    80ca:	18c3      	adds	r3, r0, r3
    80cc:	0a5b      	lsrs	r3, r3, #9
    80ce:	459a      	cmp	sl, r3
    80d0:	d200      	bcs.n	80d4 <f_opendir+0x4a4>
    80d2:	e628      	b.n	7d26 <f_opendir+0xf6>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    80d4:	2301      	movs	r3, #1
    80d6:	425b      	negs	r3, r3
    80d8:	6133      	str	r3, [r6, #16]
    80da:	60f3      	str	r3, [r6, #12]
		fs->fsi_flag = 0x80;
    80dc:	3381      	adds	r3, #129	; 0x81
    80de:	7173      	strb	r3, [r6, #5]
	rv = ptr[1];
    80e0:	3b1f      	subs	r3, #31
	rv = rv << 8 | ptr[0];
    80e2:	5cf2      	ldrb	r2, [r6, r3]
    80e4:	3b01      	subs	r3, #1
    80e6:	5cf3      	ldrb	r3, [r6, r3]
    80e8:	0212      	lsls	r2, r2, #8
    80ea:	4313      	orrs	r3, r2
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    80ec:	2b01      	cmp	r3, #1
    80ee:	d001      	beq.n	80f4 <f_opendir+0x4c4>
    80f0:	2303      	movs	r3, #3
    80f2:	e6e8      	b.n	7ec6 <f_opendir+0x296>
			&& move_window(fs, bsect + 1) == FR_OK)
    80f4:	4641      	mov	r1, r8
    80f6:	4b35      	ldr	r3, [pc, #212]	; (81cc <f_opendir+0x59c>)
    80f8:	3101      	adds	r1, #1
    80fa:	0030      	movs	r0, r6
    80fc:	4798      	blx	r3
    80fe:	2303      	movs	r3, #3
    8100:	2800      	cmp	r0, #0
    8102:	d000      	beq.n	8106 <f_opendir+0x4d6>
    8104:	e6df      	b.n	7ec6 <f_opendir+0x296>
			fs->fsi_flag = 0;
    8106:	465a      	mov	r2, fp
    8108:	7172      	strb	r2, [r6, #5]
	rv = ptr[1];
    810a:	4a31      	ldr	r2, [pc, #196]	; (81d0 <f_opendir+0x5a0>)
	rv = rv << 8 | ptr[0];
    810c:	5cb1      	ldrb	r1, [r6, r2]
    810e:	4a31      	ldr	r2, [pc, #196]	; (81d4 <f_opendir+0x5a4>)
    8110:	0209      	lsls	r1, r1, #8
    8112:	5cb2      	ldrb	r2, [r6, r2]
    8114:	430a      	orrs	r2, r1
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    8116:	4930      	ldr	r1, [pc, #192]	; (81d8 <f_opendir+0x5a8>)
    8118:	b212      	sxth	r2, r2
    811a:	428a      	cmp	r2, r1
    811c:	d000      	beq.n	8120 <f_opendir+0x4f0>
    811e:	e6d2      	b.n	7ec6 <f_opendir+0x296>
	rv = rv << 8 | ptr[2];
    8120:	332f      	adds	r3, #47	; 0x2f
    8122:	5cf2      	ldrb	r2, [r6, r3]
    8124:	3301      	adds	r3, #1
    8126:	5cf3      	ldrb	r3, [r6, r3]
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    8128:	492c      	ldr	r1, [pc, #176]	; (81dc <f_opendir+0x5ac>)
	rv = rv << 8 | ptr[2];
    812a:	021b      	lsls	r3, r3, #8
    812c:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    812e:	2231      	movs	r2, #49	; 0x31
    8130:	5cb2      	ldrb	r2, [r6, r2]
    8132:	021b      	lsls	r3, r3, #8
    8134:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    8136:	2230      	movs	r2, #48	; 0x30
    8138:	5cb2      	ldrb	r2, [r6, r2]
    813a:	021b      	lsls	r3, r3, #8
    813c:	431a      	orrs	r2, r3
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    813e:	2303      	movs	r3, #3
    8140:	428a      	cmp	r2, r1
    8142:	d000      	beq.n	8146 <f_opendir+0x516>
    8144:	e6bf      	b.n	7ec6 <f_opendir+0x296>
	rv = rv << 8 | ptr[2];
    8146:	4a1d      	ldr	r2, [pc, #116]	; (81bc <f_opendir+0x58c>)
    8148:	5cb1      	ldrb	r1, [r6, r2]
    814a:	18b2      	adds	r2, r6, r2
    814c:	7852      	ldrb	r2, [r2, #1]
    814e:	0212      	lsls	r2, r2, #8
    8150:	430a      	orrs	r2, r1
	rv = rv << 8 | ptr[1];
    8152:	4923      	ldr	r1, [pc, #140]	; (81e0 <f_opendir+0x5b0>)
    8154:	0212      	lsls	r2, r2, #8
    8156:	5c71      	ldrb	r1, [r6, r1]
    8158:	430a      	orrs	r2, r1
	rv = rv << 8 | ptr[0];
    815a:	2185      	movs	r1, #133	; 0x85
    815c:	0089      	lsls	r1, r1, #2
    815e:	5c71      	ldrb	r1, [r6, r1]
    8160:	0212      	lsls	r2, r2, #8
    8162:	430a      	orrs	r2, r1
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    8164:	491f      	ldr	r1, [pc, #124]	; (81e4 <f_opendir+0x5b4>)
    8166:	428a      	cmp	r2, r1
    8168:	d000      	beq.n	816c <f_opendir+0x53c>
    816a:	e6ac      	b.n	7ec6 <f_opendir+0x296>
	rv = rv << 8 | ptr[2];
    816c:	4a1e      	ldr	r2, [pc, #120]	; (81e8 <f_opendir+0x5b8>)
    816e:	5cb1      	ldrb	r1, [r6, r2]
    8170:	18b2      	adds	r2, r6, r2
    8172:	7852      	ldrb	r2, [r2, #1]
    8174:	0212      	lsls	r2, r2, #8
    8176:	430a      	orrs	r2, r1
	rv = rv << 8 | ptr[1];
    8178:	491c      	ldr	r1, [pc, #112]	; (81ec <f_opendir+0x5bc>)
    817a:	0212      	lsls	r2, r2, #8
    817c:	5c71      	ldrb	r1, [r6, r1]
    817e:	430a      	orrs	r2, r1
	rv = rv << 8 | ptr[0];
    8180:	2186      	movs	r1, #134	; 0x86
    8182:	0089      	lsls	r1, r1, #2
    8184:	5c71      	ldrb	r1, [r6, r1]
    8186:	0212      	lsls	r2, r2, #8
    8188:	430a      	orrs	r2, r1
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    818a:	6132      	str	r2, [r6, #16]
	rv = rv << 8 | ptr[2];
    818c:	4a18      	ldr	r2, [pc, #96]	; (81f0 <f_opendir+0x5c0>)
    818e:	5cb1      	ldrb	r1, [r6, r2]
    8190:	18b2      	adds	r2, r6, r2
    8192:	7852      	ldrb	r2, [r2, #1]
    8194:	0212      	lsls	r2, r2, #8
    8196:	430a      	orrs	r2, r1
	rv = rv << 8 | ptr[1];
    8198:	4916      	ldr	r1, [pc, #88]	; (81f4 <f_opendir+0x5c4>)
    819a:	0212      	lsls	r2, r2, #8
    819c:	5c71      	ldrb	r1, [r6, r1]
    819e:	430a      	orrs	r2, r1
	rv = rv << 8 | ptr[0];
    81a0:	2187      	movs	r1, #135	; 0x87
    81a2:	0089      	lsls	r1, r1, #2
    81a4:	5c71      	ldrb	r1, [r6, r1]
    81a6:	0212      	lsls	r2, r2, #8
    81a8:	430a      	orrs	r2, r1
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    81aa:	60f2      	str	r2, [r6, #12]
    81ac:	e68b      	b.n	7ec6 <f_opendir+0x296>
    81ae:	46c0      	nop			; (mov r8, r8)
    81b0:	00000207 	.word	0x00000207
    81b4:	00000206 	.word	0x00000206
    81b8:	00000217 	.word	0x00000217
    81bc:	00000216 	.word	0x00000216
    81c0:	00000227 	.word	0x00000227
    81c4:	00000226 	.word	0x00000226
    81c8:	000001ff 	.word	0x000001ff
    81cc:	00005255 	.word	0x00005255
    81d0:	0000022f 	.word	0x0000022f
    81d4:	0000022e 	.word	0x0000022e
    81d8:	ffffaa55 	.word	0xffffaa55
    81dc:	41615252 	.word	0x41615252
    81e0:	00000215 	.word	0x00000215
    81e4:	61417272 	.word	0x61417272
    81e8:	0000021a 	.word	0x0000021a
    81ec:	00000219 	.word	0x00000219
    81f0:	0000021e 	.word	0x0000021e
    81f4:	0000021d 	.word	0x0000021d

000081f8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    81f8:	b510      	push	{r4, lr}
    81fa:	1e04      	subs	r4, r0, #0
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    81fc:	d005      	beq.n	820a <f_closedir+0x12>
    81fe:	6803      	ldr	r3, [r0, #0]
    8200:	2b00      	cmp	r3, #0
    8202:	d002      	beq.n	820a <f_closedir+0x12>
    8204:	781a      	ldrb	r2, [r3, #0]
    8206:	2a00      	cmp	r2, #0
    8208:	d101      	bne.n	820e <f_closedir+0x16>
{
    820a:	2009      	movs	r0, #9
#if FF_FS_REENTRANT
		unlock_volume(fs, FR_OK);	/* Unlock volume */
#endif
	}
	return res;
}
    820c:	bd10      	pop	{r4, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    820e:	8881      	ldrh	r1, [r0, #4]
    8210:	88da      	ldrh	r2, [r3, #6]
    8212:	4291      	cmp	r1, r2
    8214:	d1f9      	bne.n	820a <f_closedir+0x12>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    8216:	7858      	ldrb	r0, [r3, #1]
    8218:	4b03      	ldr	r3, [pc, #12]	; (8228 <f_closedir+0x30>)
    821a:	4798      	blx	r3
    821c:	2301      	movs	r3, #1
    821e:	4018      	ands	r0, r3
    8220:	d1f3      	bne.n	820a <f_closedir+0x12>
		dp->obj.fs = 0;	/* Invalidate directory object */
    8222:	6020      	str	r0, [r4, #0]
	return res;
    8224:	e7f2      	b.n	820c <f_closedir+0x14>
    8226:	46c0      	nop			; (mov r8, r8)
    8228:	00008a51 	.word	0x00008a51

0000822c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    822e:	46de      	mov	lr, fp
    8230:	4657      	mov	r7, sl
    8232:	464e      	mov	r6, r9
    8234:	4645      	mov	r5, r8
    8236:	0004      	movs	r4, r0
    8238:	b5e0      	push	{r5, r6, r7, lr}
    823a:	468b      	mov	fp, r1
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    823c:	2800      	cmp	r0, #0
    823e:	d005      	beq.n	824c <f_readdir+0x20>
    8240:	6803      	ldr	r3, [r0, #0]
    8242:	2b00      	cmp	r3, #0
    8244:	d002      	beq.n	824c <f_readdir+0x20>
    8246:	781a      	ldrb	r2, [r3, #0]
    8248:	2a00      	cmp	r2, #0
    824a:	d106      	bne.n	825a <f_readdir+0x2e>
			res = DIR_READ_FILE(dp);		/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    824c:	2009      	movs	r0, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    824e:	bc3c      	pop	{r2, r3, r4, r5}
    8250:	4690      	mov	r8, r2
    8252:	4699      	mov	r9, r3
    8254:	46a2      	mov	sl, r4
    8256:	46ab      	mov	fp, r5
    8258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    825a:	8881      	ldrh	r1, [r0, #4]
    825c:	88da      	ldrh	r2, [r3, #6]
    825e:	4291      	cmp	r1, r2
    8260:	d1f4      	bne.n	824c <f_readdir+0x20>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    8262:	7858      	ldrb	r0, [r3, #1]
    8264:	4bbb      	ldr	r3, [pc, #748]	; (8554 <f_readdir+0x328>)
    8266:	4798      	blx	r3
    8268:	07c3      	lsls	r3, r0, #31
    826a:	d4ef      	bmi.n	824c <f_readdir+0x20>
		if (!fno) {
    826c:	465b      	mov	r3, fp
    826e:	2b00      	cmp	r3, #0
    8270:	d100      	bne.n	8274 <f_readdir+0x48>
    8272:	e0ad      	b.n	83d0 <f_readdir+0x1a4>
	while (dp->sect) {
    8274:	69a3      	ldr	r3, [r4, #24]
	FATFS *fs = dp->obj.fs;
    8276:	6826      	ldr	r6, [r4, #0]
	while (dp->sect) {
    8278:	4698      	mov	r8, r3
    827a:	2b00      	cmp	r3, #0
    827c:	d100      	bne.n	8280 <f_readdir+0x54>
    827e:	e0a4      	b.n	83ca <f_readdir+0x19e>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    8280:	4bb5      	ldr	r3, [pc, #724]	; (8558 <f_readdir+0x32c>)
    8282:	4699      	mov	r9, r3
	if (sect != fs->winsect) {	/* Window offset changed? */
    8284:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    8286:	4542      	cmp	r2, r8
    8288:	d014      	beq.n	82b4 <f_readdir+0x88>
    828a:	0035      	movs	r5, r6
	if (fs->wflag) {	/* Is the disk access window dirty? */
    828c:	7933      	ldrb	r3, [r6, #4]
    828e:	3530      	adds	r5, #48	; 0x30
    8290:	2b00      	cmp	r3, #0
    8292:	d157      	bne.n	8344 <f_readdir+0x118>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    8294:	7870      	ldrb	r0, [r6, #1]
    8296:	2301      	movs	r3, #1
    8298:	4642      	mov	r2, r8
    829a:	0029      	movs	r1, r5
    829c:	47c8      	blx	r9
    829e:	2800      	cmp	r0, #0
    82a0:	d006      	beq.n	82b0 <f_readdir+0x84>
			fs->winsect = sect;
    82a2:	2301      	movs	r3, #1
    82a4:	2001      	movs	r0, #1
    82a6:	425b      	negs	r3, r3
    82a8:	62f3      	str	r3, [r6, #44]	; 0x2c
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    82aa:	2300      	movs	r3, #0
    82ac:	61a3      	str	r3, [r4, #24]
    82ae:	e7ce      	b.n	824e <f_readdir+0x22>
			fs->winsect = sect;
    82b0:	4643      	mov	r3, r8
    82b2:	62f3      	str	r3, [r6, #44]	; 0x2c
		b = dp->dir[DIR_Name];	/* Test for the entry type */
    82b4:	69e3      	ldr	r3, [r4, #28]
    82b6:	781a      	ldrb	r2, [r3, #0]
		if (b == 0) {
    82b8:	2a00      	cmp	r2, #0
    82ba:	d100      	bne.n	82be <f_readdir+0x92>
    82bc:	e085      	b.n	83ca <f_readdir+0x19e>
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    82be:	7ad9      	ldrb	r1, [r3, #11]
    82c0:	233f      	movs	r3, #63	; 0x3f
    82c2:	400b      	ands	r3, r1
    82c4:	71a3      	strb	r3, [r4, #6]
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    82c6:	2ae5      	cmp	r2, #229	; 0xe5
    82c8:	d008      	beq.n	82dc <f_readdir+0xb0>
    82ca:	2a2e      	cmp	r2, #46	; 0x2e
    82cc:	d006      	beq.n	82dc <f_readdir+0xb0>
    82ce:	2b0f      	cmp	r3, #15
    82d0:	d004      	beq.n	82dc <f_readdir+0xb0>
    82d2:	2220      	movs	r2, #32
    82d4:	4393      	bics	r3, r2
    82d6:	2b08      	cmp	r3, #8
    82d8:	d000      	beq.n	82dc <f_readdir+0xb0>
    82da:	e07f      	b.n	83dc <f_readdir+0x1b0>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    82dc:	6925      	ldr	r5, [r4, #16]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    82de:	4b9f      	ldr	r3, [pc, #636]	; (855c <f_readdir+0x330>)
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    82e0:	3520      	adds	r5, #32
	FATFS *fs = dp->obj.fs;
    82e2:	6827      	ldr	r7, [r4, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    82e4:	429d      	cmp	r5, r3
    82e6:	d90b      	bls.n	8300 <f_readdir+0xd4>
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    82e8:	2300      	movs	r3, #0
	fno->fname[0] = 0;			/* Invaidate file info */
    82ea:	465a      	mov	r2, fp
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    82ec:	61a3      	str	r3, [r4, #24]
	fno->fname[0] = 0;			/* Invaidate file info */
    82ee:	2300      	movs	r3, #0
    82f0:	7253      	strb	r3, [r2, #9]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    82f2:	4b9a      	ldr	r3, [pc, #616]	; (855c <f_readdir+0x330>)
    82f4:	429d      	cmp	r5, r3
    82f6:	d923      	bls.n	8340 <f_readdir+0x114>
    82f8:	2300      	movs	r3, #0
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    82fa:	2000      	movs	r0, #0
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    82fc:	61a3      	str	r3, [r4, #24]
    82fe:	e7a6      	b.n	824e <f_readdir+0x22>
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    8300:	69a3      	ldr	r3, [r4, #24]
    8302:	4698      	mov	r8, r3
    8304:	2b00      	cmp	r3, #0
    8306:	d0ef      	beq.n	82e8 <f_readdir+0xbc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    8308:	05eb      	lsls	r3, r5, #23
    830a:	0ddb      	lsrs	r3, r3, #23
    830c:	d132      	bne.n	8374 <f_readdir+0x148>
		dp->sect++;				/* Next sector */
    830e:	3301      	adds	r3, #1
    8310:	469c      	mov	ip, r3
    8312:	44e0      	add	r8, ip
    8314:	4643      	mov	r3, r8
		if (dp->clust == 0) {	/* Static table */
    8316:	6961      	ldr	r1, [r4, #20]
		dp->sect++;				/* Next sector */
    8318:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    831a:	2900      	cmp	r1, #0
    831c:	d131      	bne.n	8382 <f_readdir+0x156>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    831e:	893a      	ldrh	r2, [r7, #8]
    8320:	096b      	lsrs	r3, r5, #5
    8322:	4293      	cmp	r3, r2
    8324:	d2e0      	bcs.n	82e8 <f_readdir+0xbc>
	while (dp->sect) {
    8326:	4643      	mov	r3, r8
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    8328:	3730      	adds	r7, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
    832a:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    832c:	61e7      	str	r7, [r4, #28]
	while (dp->sect) {
    832e:	2b00      	cmp	r3, #0
    8330:	d1a8      	bne.n	8284 <f_readdir+0x58>
    8332:	3520      	adds	r5, #32
	fno->fname[0] = 0;			/* Invaidate file info */
    8334:	2300      	movs	r3, #0
    8336:	465a      	mov	r2, fp
    8338:	7253      	strb	r3, [r2, #9]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    833a:	4b88      	ldr	r3, [pc, #544]	; (855c <f_readdir+0x330>)
    833c:	429d      	cmp	r5, r3
    833e:	d8db      	bhi.n	82f8 <f_readdir+0xcc>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    8340:	2000      	movs	r0, #0
	LEAVE_FF(fs, res);
    8342:	e784      	b.n	824e <f_readdir+0x22>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    8344:	7870      	ldrb	r0, [r6, #1]
    8346:	2301      	movs	r3, #1
    8348:	0029      	movs	r1, r5
    834a:	4f85      	ldr	r7, [pc, #532]	; (8560 <f_readdir+0x334>)
    834c:	47b8      	blx	r7
    834e:	2800      	cmp	r0, #0
    8350:	d115      	bne.n	837e <f_readdir+0x152>
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    8352:	6af2      	ldr	r2, [r6, #44]	; 0x2c
    8354:	6a33      	ldr	r3, [r6, #32]
    8356:	69b1      	ldr	r1, [r6, #24]
			fs->wflag = 0;	/* Clear window dirty flag */
    8358:	7130      	strb	r0, [r6, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    835a:	1ad3      	subs	r3, r2, r3
    835c:	428b      	cmp	r3, r1
    835e:	d299      	bcs.n	8294 <f_readdir+0x68>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    8360:	78f3      	ldrb	r3, [r6, #3]
    8362:	2b02      	cmp	r3, #2
    8364:	d196      	bne.n	8294 <f_readdir+0x68>
    8366:	1852      	adds	r2, r2, r1
    8368:	7870      	ldrb	r0, [r6, #1]
    836a:	3b01      	subs	r3, #1
    836c:	0029      	movs	r1, r5
    836e:	4f7c      	ldr	r7, [pc, #496]	; (8560 <f_readdir+0x334>)
    8370:	47b8      	blx	r7
    8372:	e78f      	b.n	8294 <f_readdir+0x68>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    8374:	3730      	adds	r7, #48	; 0x30
    8376:	18fb      	adds	r3, r7, r3
	dp->dptr = ofs;						/* Current entry */
    8378:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    837a:	61e3      	str	r3, [r4, #28]
    837c:	e782      	b.n	8284 <f_readdir+0x58>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    837e:	2001      	movs	r0, #1
    8380:	e793      	b.n	82aa <f_readdir+0x7e>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    8382:	897b      	ldrh	r3, [r7, #10]
    8384:	0a6a      	lsrs	r2, r5, #9
    8386:	3b01      	subs	r3, #1
    8388:	401a      	ands	r2, r3
    838a:	4692      	mov	sl, r2
    838c:	d1cb      	bne.n	8326 <f_readdir+0xfa>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    838e:	0038      	movs	r0, r7
    8390:	4b74      	ldr	r3, [pc, #464]	; (8564 <f_readdir+0x338>)
    8392:	4798      	blx	r3
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    8394:	2801      	cmp	r0, #1
    8396:	d91f      	bls.n	83d8 <f_readdir+0x1ac>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    8398:	1c43      	adds	r3, r0, #1
    839a:	d0f0      	beq.n	837e <f_readdir+0x152>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    839c:	697b      	ldr	r3, [r7, #20]
    839e:	4298      	cmp	r0, r3
    83a0:	d213      	bcs.n	83ca <f_readdir+0x19e>
				dp->clust = clst;		/* Initialize data for new cluster */
    83a2:	6160      	str	r0, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    83a4:	3b02      	subs	r3, #2
	clst -= 2;		/* Cluster number is origin from 2 */
    83a6:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    83a8:	4298      	cmp	r0, r3
    83aa:	d207      	bcs.n	83bc <f_readdir+0x190>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    83ac:	897b      	ldrh	r3, [r7, #10]
    83ae:	4358      	muls	r0, r3
    83b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83b2:	4698      	mov	r8, r3
    83b4:	4480      	add	r8, r0
				dp->sect = clst2sect(fs, clst);
    83b6:	4643      	mov	r3, r8
    83b8:	61a3      	str	r3, [r4, #24]
    83ba:	e7b4      	b.n	8326 <f_readdir+0xfa>
    83bc:	4653      	mov	r3, sl
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    83be:	3730      	adds	r7, #48	; 0x30
	dp->dptr = ofs;						/* Current entry */
    83c0:	6125      	str	r5, [r4, #16]
				dp->sect = clst2sect(fs, clst);
    83c2:	61a3      	str	r3, [r4, #24]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    83c4:	61e7      	str	r7, [r4, #28]
    83c6:	3520      	adds	r5, #32
    83c8:	e7b4      	b.n	8334 <f_readdir+0x108>
    83ca:	6925      	ldr	r5, [r4, #16]
    83cc:	3520      	adds	r5, #32
    83ce:	e78b      	b.n	82e8 <f_readdir+0xbc>
			res = dir_sdi(dp, 0);		/* Rewind the directory object */
    83d0:	0020      	movs	r0, r4
    83d2:	4b65      	ldr	r3, [pc, #404]	; (8568 <f_readdir+0x33c>)
    83d4:	4798      	blx	r3
    83d6:	e73a      	b.n	824e <f_readdir+0x22>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    83d8:	2002      	movs	r0, #2
    83da:	e766      	b.n	82aa <f_readdir+0x7e>
    83dc:	69a3      	ldr	r3, [r4, #24]
	fno->fname[0] = 0;			/* Invaidate file info */
    83de:	465a      	mov	r2, fp
    83e0:	4699      	mov	r9, r3
    83e2:	2300      	movs	r3, #0
    83e4:	6926      	ldr	r6, [r4, #16]
    83e6:	6825      	ldr	r5, [r4, #0]
    83e8:	7253      	strb	r3, [r2, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
    83ea:	464b      	mov	r3, r9
    83ec:	3620      	adds	r6, #32
    83ee:	2b00      	cmp	r3, #0
    83f0:	d100      	bne.n	83f4 <f_readdir+0x1c8>
    83f2:	e103      	b.n	85fc <f_readdir+0x3d0>
    83f4:	69e3      	ldr	r3, [r4, #28]
		c = (TCHAR)dp->dir[si++];
    83f6:	781a      	ldrb	r2, [r3, #0]
		if (c == ' ') continue;		/* Skip padding spaces */
    83f8:	2a20      	cmp	r2, #32
    83fa:	d100      	bne.n	83fe <f_readdir+0x1d2>
    83fc:	e0e4      	b.n	85c8 <f_readdir+0x39c>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    83fe:	2a05      	cmp	r2, #5
    8400:	d100      	bne.n	8404 <f_readdir+0x1d8>
    8402:	e0e3      	b.n	85cc <f_readdir+0x3a0>
		fno->fname[di++] = c;
    8404:	4658      	mov	r0, fp
    8406:	7242      	strb	r2, [r0, #9]
    8408:	2001      	movs	r0, #1
		c = (TCHAR)dp->dir[si++];
    840a:	785f      	ldrb	r7, [r3, #1]
		if (c == ' ') continue;		/* Skip padding spaces */
    840c:	2f20      	cmp	r7, #32
    840e:	d100      	bne.n	8412 <f_readdir+0x1e6>
    8410:	e0d8      	b.n	85c4 <f_readdir+0x398>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    8412:	2f05      	cmp	r7, #5
    8414:	d100      	bne.n	8418 <f_readdir+0x1ec>
    8416:	e0dd      	b.n	85d4 <f_readdir+0x3a8>
		fno->fname[di++] = c;
    8418:	1c42      	adds	r2, r0, #1
    841a:	4458      	add	r0, fp
    841c:	7247      	strb	r7, [r0, #9]
		c = (TCHAR)dp->dir[si++];
    841e:	789f      	ldrb	r7, [r3, #2]
		if (c == ' ') continue;		/* Skip padding spaces */
    8420:	2f20      	cmp	r7, #32
    8422:	d100      	bne.n	8426 <f_readdir+0x1fa>
    8424:	e0cc      	b.n	85c0 <f_readdir+0x394>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    8426:	2f05      	cmp	r7, #5
    8428:	d100      	bne.n	842c <f_readdir+0x200>
    842a:	e0d1      	b.n	85d0 <f_readdir+0x3a4>
		fno->fname[di++] = c;
    842c:	1c50      	adds	r0, r2, #1
    842e:	445a      	add	r2, fp
    8430:	7257      	strb	r7, [r2, #9]
		c = (TCHAR)dp->dir[si++];
    8432:	78df      	ldrb	r7, [r3, #3]
		if (c == ' ') continue;		/* Skip padding spaces */
    8434:	2f20      	cmp	r7, #32
    8436:	d100      	bne.n	843a <f_readdir+0x20e>
    8438:	e0c0      	b.n	85bc <f_readdir+0x390>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    843a:	2f05      	cmp	r7, #5
    843c:	d100      	bne.n	8440 <f_readdir+0x214>
    843e:	e0cf      	b.n	85e0 <f_readdir+0x3b4>
		fno->fname[di++] = c;
    8440:	1c42      	adds	r2, r0, #1
    8442:	4458      	add	r0, fp
    8444:	7247      	strb	r7, [r0, #9]
		c = (TCHAR)dp->dir[si++];
    8446:	791f      	ldrb	r7, [r3, #4]
		if (c == ' ') continue;		/* Skip padding spaces */
    8448:	2f20      	cmp	r7, #32
    844a:	d100      	bne.n	844e <f_readdir+0x222>
    844c:	e0b4      	b.n	85b8 <f_readdir+0x38c>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    844e:	2f05      	cmp	r7, #5
    8450:	d100      	bne.n	8454 <f_readdir+0x228>
    8452:	e0c3      	b.n	85dc <f_readdir+0x3b0>
		fno->fname[di++] = c;
    8454:	1c50      	adds	r0, r2, #1
    8456:	445a      	add	r2, fp
    8458:	7257      	strb	r7, [r2, #9]
		c = (TCHAR)dp->dir[si++];
    845a:	795f      	ldrb	r7, [r3, #5]
		if (c == ' ') continue;		/* Skip padding spaces */
    845c:	2f20      	cmp	r7, #32
    845e:	d100      	bne.n	8462 <f_readdir+0x236>
    8460:	e0a8      	b.n	85b4 <f_readdir+0x388>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    8462:	2f05      	cmp	r7, #5
    8464:	d100      	bne.n	8468 <f_readdir+0x23c>
    8466:	e0bf      	b.n	85e8 <f_readdir+0x3bc>
		fno->fname[di++] = c;
    8468:	1c42      	adds	r2, r0, #1
    846a:	4458      	add	r0, fp
    846c:	7247      	strb	r7, [r0, #9]
		c = (TCHAR)dp->dir[si++];
    846e:	799f      	ldrb	r7, [r3, #6]
		if (c == ' ') continue;		/* Skip padding spaces */
    8470:	2f20      	cmp	r7, #32
    8472:	d100      	bne.n	8476 <f_readdir+0x24a>
    8474:	e09c      	b.n	85b0 <f_readdir+0x384>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    8476:	2f05      	cmp	r7, #5
    8478:	d100      	bne.n	847c <f_readdir+0x250>
    847a:	e0b3      	b.n	85e4 <f_readdir+0x3b8>
		fno->fname[di++] = c;
    847c:	1c50      	adds	r0, r2, #1
    847e:	445a      	add	r2, fp
    8480:	7257      	strb	r7, [r2, #9]
		c = (TCHAR)dp->dir[si++];
    8482:	79df      	ldrb	r7, [r3, #7]
		if (c == ' ') continue;		/* Skip padding spaces */
    8484:	2f20      	cmp	r7, #32
    8486:	d100      	bne.n	848a <f_readdir+0x25e>
    8488:	e090      	b.n	85ac <f_readdir+0x380>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    848a:	2f05      	cmp	r7, #5
    848c:	d100      	bne.n	8490 <f_readdir+0x264>
    848e:	e0ad      	b.n	85ec <f_readdir+0x3c0>
		fno->fname[di++] = c;
    8490:	1c42      	adds	r2, r0, #1
    8492:	4458      	add	r0, fp
    8494:	7247      	strb	r7, [r0, #9]
		c = (TCHAR)dp->dir[si++];
    8496:	7a1f      	ldrb	r7, [r3, #8]
		if (c == ' ') continue;		/* Skip padding spaces */
    8498:	2f20      	cmp	r7, #32
    849a:	d00d      	beq.n	84b8 <f_readdir+0x28c>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    849c:	2f05      	cmp	r7, #5
    849e:	d100      	bne.n	84a2 <f_readdir+0x276>
    84a0:	e09a      	b.n	85d8 <f_readdir+0x3ac>
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
    84a2:	202e      	movs	r0, #46	; 0x2e
    84a4:	4694      	mov	ip, r2
    84a6:	4680      	mov	r8, r0
    84a8:	44dc      	add	ip, fp
    84aa:	4660      	mov	r0, ip
    84ac:	4641      	mov	r1, r8
    84ae:	7241      	strb	r1, [r0, #9]
		fno->fname[di++] = c;
    84b0:	1c50      	adds	r0, r2, #1
    84b2:	4458      	add	r0, fp
    84b4:	3202      	adds	r2, #2
    84b6:	7247      	strb	r7, [r0, #9]
		c = (TCHAR)dp->dir[si++];
    84b8:	7a5f      	ldrb	r7, [r3, #9]
		if (c == ' ') continue;		/* Skip padding spaces */
    84ba:	2f20      	cmp	r7, #32
    84bc:	d047      	beq.n	854e <f_readdir+0x322>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    84be:	2f05      	cmp	r7, #5
    84c0:	d100      	bne.n	84c4 <f_readdir+0x298>
    84c2:	e097      	b.n	85f4 <f_readdir+0x3c8>
		fno->fname[di++] = c;
    84c4:	1c50      	adds	r0, r2, #1
    84c6:	445a      	add	r2, fp
    84c8:	7257      	strb	r7, [r2, #9]
		c = (TCHAR)dp->dir[si++];
    84ca:	7a9f      	ldrb	r7, [r3, #10]
		if (c == ' ') continue;		/* Skip padding spaces */
    84cc:	2f20      	cmp	r7, #32
    84ce:	d03c      	beq.n	854a <f_readdir+0x31e>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    84d0:	2f05      	cmp	r7, #5
    84d2:	d100      	bne.n	84d6 <f_readdir+0x2aa>
    84d4:	e08c      	b.n	85f0 <f_readdir+0x3c4>
		fno->fname[di++] = c;
    84d6:	1c42      	adds	r2, r0, #1
    84d8:	4458      	add	r0, fp
    84da:	7247      	strb	r7, [r0, #9]
	fno->fname[di] = 0;		/* Terminate the SFN */
    84dc:	2000      	movs	r0, #0
    84de:	445a      	add	r2, fp
    84e0:	7250      	strb	r0, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
    84e2:	223f      	movs	r2, #63	; 0x3f
    84e4:	7ad8      	ldrb	r0, [r3, #11]
    84e6:	4002      	ands	r2, r0
    84e8:	4658      	mov	r0, fp
    84ea:	7202      	strb	r2, [r0, #8]
	rv = rv << 8 | ptr[2];
    84ec:	7fda      	ldrb	r2, [r3, #31]
    84ee:	7f98      	ldrb	r0, [r3, #30]
    84f0:	0212      	lsls	r2, r2, #8
    84f2:	4302      	orrs	r2, r0
	rv = rv << 8 | ptr[1];
    84f4:	7f58      	ldrb	r0, [r3, #29]
    84f6:	0212      	lsls	r2, r2, #8
    84f8:	4302      	orrs	r2, r0
	rv = rv << 8 | ptr[0];
    84fa:	7f18      	ldrb	r0, [r3, #28]
    84fc:	0212      	lsls	r2, r2, #8
    84fe:	4302      	orrs	r2, r0
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
    8500:	4658      	mov	r0, fp
    8502:	6002      	str	r2, [r0, #0]
	rv = rv << 8 | ptr[0];
    8504:	7dd8      	ldrb	r0, [r3, #23]
    8506:	7d9a      	ldrb	r2, [r3, #22]
    8508:	0200      	lsls	r0, r0, #8
    850a:	4302      	orrs	r2, r0
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
    850c:	4658      	mov	r0, fp
    850e:	80c2      	strh	r2, [r0, #6]
	rv = rv << 8 | ptr[0];
    8510:	7e5a      	ldrb	r2, [r3, #25]
    8512:	7e1b      	ldrb	r3, [r3, #24]
    8514:	0212      	lsls	r2, r2, #8
    8516:	4313      	orrs	r3, r2
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
    8518:	8083      	strh	r3, [r0, #4]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    851a:	4b10      	ldr	r3, [pc, #64]	; (855c <f_readdir+0x330>)
    851c:	429e      	cmp	r6, r3
    851e:	d900      	bls.n	8522 <f_readdir+0x2f6>
    8520:	e6ea      	b.n	82f8 <f_readdir+0xcc>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    8522:	05f7      	lsls	r7, r6, #23
    8524:	0dff      	lsrs	r7, r7, #23
    8526:	d10a      	bne.n	853e <f_readdir+0x312>
		dp->sect++;				/* Next sector */
    8528:	4649      	mov	r1, r9
    852a:	3101      	adds	r1, #1
    852c:	61a1      	str	r1, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    852e:	6961      	ldr	r1, [r4, #20]
    8530:	2900      	cmp	r1, #0
    8532:	d11b      	bne.n	856c <f_readdir+0x340>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    8534:	892a      	ldrh	r2, [r5, #8]
    8536:	0973      	lsrs	r3, r6, #5
    8538:	4293      	cmp	r3, r2
    853a:	d300      	bcc.n	853e <f_readdir+0x312>
    853c:	e6dc      	b.n	82f8 <f_readdir+0xcc>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    853e:	3530      	adds	r5, #48	; 0x30
    8540:	19ed      	adds	r5, r5, r7
	dp->dptr = ofs;						/* Current entry */
    8542:	6126      	str	r6, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    8544:	61e5      	str	r5, [r4, #28]
	return FR_OK;
    8546:	2000      	movs	r0, #0
    8548:	e681      	b.n	824e <f_readdir+0x22>
		if (c == ' ') continue;		/* Skip padding spaces */
    854a:	0002      	movs	r2, r0
    854c:	e7c6      	b.n	84dc <f_readdir+0x2b0>
    854e:	0010      	movs	r0, r2
    8550:	e7bb      	b.n	84ca <f_readdir+0x29e>
    8552:	46c0      	nop			; (mov r8, r8)
    8554:	00008a51 	.word	0x00008a51
    8558:	00008b95 	.word	0x00008b95
    855c:	001fffff 	.word	0x001fffff
    8560:	00008c85 	.word	0x00008c85
    8564:	00005eed 	.word	0x00005eed
    8568:	000064f5 	.word	0x000064f5
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    856c:	896b      	ldrh	r3, [r5, #10]
    856e:	0a72      	lsrs	r2, r6, #9
    8570:	3b01      	subs	r3, #1
    8572:	421a      	tst	r2, r3
    8574:	d1e3      	bne.n	853e <f_readdir+0x312>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    8576:	4b24      	ldr	r3, [pc, #144]	; (8608 <f_readdir+0x3dc>)
    8578:	0028      	movs	r0, r5
    857a:	4798      	blx	r3
    857c:	0003      	movs	r3, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    857e:	2002      	movs	r0, #2
    8580:	2b01      	cmp	r3, #1
    8582:	d800      	bhi.n	8586 <f_readdir+0x35a>
    8584:	e663      	b.n	824e <f_readdir+0x22>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    8586:	1c5a      	adds	r2, r3, #1
    8588:	d036      	beq.n	85f8 <f_readdir+0x3cc>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    858a:	6969      	ldr	r1, [r5, #20]
    858c:	428b      	cmp	r3, r1
    858e:	d300      	bcc.n	8592 <f_readdir+0x366>
    8590:	e6b2      	b.n	82f8 <f_readdir+0xcc>
				dp->clust = clst;		/* Initialize data for new cluster */
    8592:	6163      	str	r3, [r4, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    8594:	3902      	subs	r1, #2
	clst -= 2;		/* Cluster number is origin from 2 */
    8596:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    8598:	2200      	movs	r2, #0
    859a:	428b      	cmp	r3, r1
    859c:	d204      	bcs.n	85a8 <f_readdir+0x37c>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    859e:	896a      	ldrh	r2, [r5, #10]
    85a0:	435a      	muls	r2, r3
    85a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    85a4:	469c      	mov	ip, r3
    85a6:	4462      	add	r2, ip
				dp->sect = clst2sect(fs, clst);
    85a8:	61a2      	str	r2, [r4, #24]
    85aa:	e7c8      	b.n	853e <f_readdir+0x312>
		if (c == ' ') continue;		/* Skip padding spaces */
    85ac:	0002      	movs	r2, r0
    85ae:	e772      	b.n	8496 <f_readdir+0x26a>
    85b0:	0010      	movs	r0, r2
    85b2:	e766      	b.n	8482 <f_readdir+0x256>
    85b4:	0002      	movs	r2, r0
    85b6:	e75a      	b.n	846e <f_readdir+0x242>
    85b8:	0010      	movs	r0, r2
    85ba:	e74e      	b.n	845a <f_readdir+0x22e>
    85bc:	0002      	movs	r2, r0
    85be:	e742      	b.n	8446 <f_readdir+0x21a>
    85c0:	0010      	movs	r0, r2
    85c2:	e736      	b.n	8432 <f_readdir+0x206>
    85c4:	0002      	movs	r2, r0
    85c6:	e72a      	b.n	841e <f_readdir+0x1f2>
    85c8:	2000      	movs	r0, #0
    85ca:	e71e      	b.n	840a <f_readdir+0x1de>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
    85cc:	32e0      	adds	r2, #224	; 0xe0
    85ce:	e719      	b.n	8404 <f_readdir+0x1d8>
    85d0:	37e0      	adds	r7, #224	; 0xe0
    85d2:	e72b      	b.n	842c <f_readdir+0x200>
    85d4:	37e0      	adds	r7, #224	; 0xe0
    85d6:	e71f      	b.n	8418 <f_readdir+0x1ec>
    85d8:	37e0      	adds	r7, #224	; 0xe0
    85da:	e762      	b.n	84a2 <f_readdir+0x276>
    85dc:	37e0      	adds	r7, #224	; 0xe0
    85de:	e739      	b.n	8454 <f_readdir+0x228>
    85e0:	37e0      	adds	r7, #224	; 0xe0
    85e2:	e72d      	b.n	8440 <f_readdir+0x214>
    85e4:	37e0      	adds	r7, #224	; 0xe0
    85e6:	e749      	b.n	847c <f_readdir+0x250>
    85e8:	37e0      	adds	r7, #224	; 0xe0
    85ea:	e73d      	b.n	8468 <f_readdir+0x23c>
    85ec:	37e0      	adds	r7, #224	; 0xe0
    85ee:	e74f      	b.n	8490 <f_readdir+0x264>
    85f0:	37e0      	adds	r7, #224	; 0xe0
    85f2:	e770      	b.n	84d6 <f_readdir+0x2aa>
    85f4:	37e0      	adds	r7, #224	; 0xe0
    85f6:	e765      	b.n	84c4 <f_readdir+0x298>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    85f8:	2001      	movs	r0, #1
    85fa:	e628      	b.n	824e <f_readdir+0x22>
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    85fc:	4b03      	ldr	r3, [pc, #12]	; (860c <f_readdir+0x3e0>)
    85fe:	429e      	cmp	r6, r3
    8600:	d900      	bls.n	8604 <f_readdir+0x3d8>
    8602:	e679      	b.n	82f8 <f_readdir+0xcc>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    8604:	2000      	movs	r0, #0
    8606:	e622      	b.n	824e <f_readdir+0x22>
    8608:	00005eed 	.word	0x00005eed
    860c:	001fffff 	.word	0x001fffff

00008610 <sd_init>:

static FATFS FatFs; // File system object
static FIL Fil;     // File object
static bool file_opened = false; // ???? ?????????? ?????

bool sd_init(void) {
    8610:	b510      	push	{r4, lr}
	if (f_mount(&FatFs, "", 0) == FR_OK) {
    8612:	2200      	movs	r2, #0
    8614:	4907      	ldr	r1, [pc, #28]	; (8634 <sd_init+0x24>)
    8616:	4808      	ldr	r0, [pc, #32]	; (8638 <sd_init+0x28>)
    8618:	4b08      	ldr	r3, [pc, #32]	; (863c <sd_init+0x2c>)
    861a:	4798      	blx	r3
    861c:	2800      	cmp	r0, #0
    861e:	d004      	beq.n	862a <sd_init+0x1a>
		printf("SD card mounted successfully.\r\n");
		return true;
		} else {
		printf("SD card mount failed.\r\n");
    8620:	4807      	ldr	r0, [pc, #28]	; (8640 <sd_init+0x30>)
    8622:	4b08      	ldr	r3, [pc, #32]	; (8644 <sd_init+0x34>)
    8624:	4798      	blx	r3
		return false;
    8626:	2000      	movs	r0, #0
	}
}
    8628:	bd10      	pop	{r4, pc}
		printf("SD card mounted successfully.\r\n");
    862a:	4807      	ldr	r0, [pc, #28]	; (8648 <sd_init+0x38>)
    862c:	4b05      	ldr	r3, [pc, #20]	; (8644 <sd_init+0x34>)
    862e:	4798      	blx	r3
		return true;
    8630:	2001      	movs	r0, #1
    8632:	e7f9      	b.n	8628 <sd_init+0x18>
    8634:	00016954 	.word	0x00016954
    8638:	20000b58 	.word	0x20000b58
    863c:	00006e15 	.word	0x00006e15
    8640:	00018898 	.word	0x00018898
    8644:	0000b7f5 	.word	0x0000b7f5
    8648:	00018878 	.word	0x00018878

0000864c <sd_write_line>:


bool sd_write_line(const char *filename, const char *buffer, uint32_t length) {
    864c:	b570      	push	{r4, r5, r6, lr}
    864e:	b08c      	sub	sp, #48	; 0x30
    8650:	0004      	movs	r4, r0
    8652:	000e      	movs	r6, r1
    8654:	0015      	movs	r5, r2
	FIL file;
	UINT bw;

	if (f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE) == FR_OK) {
    8656:	0001      	movs	r1, r0
    8658:	2232      	movs	r2, #50	; 0x32
    865a:	a802      	add	r0, sp, #8
    865c:	4b0e      	ldr	r3, [pc, #56]	; (8698 <sd_write_line+0x4c>)
    865e:	4798      	blx	r3
    8660:	2800      	cmp	r0, #0
    8662:	d10d      	bne.n	8680 <sd_write_line+0x34>
		if (f_write(&file, buffer, length, &bw) == FR_OK && bw == length) {
    8664:	0031      	movs	r1, r6
    8666:	ab01      	add	r3, sp, #4
    8668:	002a      	movs	r2, r5
    866a:	a802      	add	r0, sp, #8
    866c:	4e0b      	ldr	r6, [pc, #44]	; (869c <sd_write_line+0x50>)
    866e:	47b0      	blx	r6
    8670:	2800      	cmp	r0, #0
    8672:	d102      	bne.n	867a <sd_write_line+0x2e>
    8674:	9b01      	ldr	r3, [sp, #4]
    8676:	429d      	cmp	r5, r3
    8678:	d009      	beq.n	868e <sd_write_line+0x42>
			f_close(&file);
			return true;
		}
		f_close(&file);
    867a:	a802      	add	r0, sp, #8
    867c:	4b08      	ldr	r3, [pc, #32]	; (86a0 <sd_write_line+0x54>)
    867e:	4798      	blx	r3
	}
	printf("Failed to write to file: %s\r\n", filename);
    8680:	0021      	movs	r1, r4
    8682:	4808      	ldr	r0, [pc, #32]	; (86a4 <sd_write_line+0x58>)
    8684:	4b08      	ldr	r3, [pc, #32]	; (86a8 <sd_write_line+0x5c>)
    8686:	4798      	blx	r3
	return false;
    8688:	2000      	movs	r0, #0
}
    868a:	b00c      	add	sp, #48	; 0x30
    868c:	bd70      	pop	{r4, r5, r6, pc}
			f_close(&file);
    868e:	a802      	add	r0, sp, #8
    8690:	4b03      	ldr	r3, [pc, #12]	; (86a0 <sd_write_line+0x54>)
    8692:	4798      	blx	r3
			return true;
    8694:	2001      	movs	r0, #1
    8696:	e7f8      	b.n	868a <sd_write_line+0x3e>
    8698:	00006e81 	.word	0x00006e81
    869c:	00007825 	.word	0x00007825
    86a0:	00007af5 	.word	0x00007af5
    86a4:	000189a4 	.word	0x000189a4
    86a8:	0000b731 	.word	0x0000b731

000086ac <sd_read_file_chunk>:


int sd_read_file_chunk(const char *filename, uint8_t *buffer, uint32_t length, uint32_t *bytes_read) {
    86ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    86ae:	4647      	mov	r7, r8
    86b0:	46ce      	mov	lr, r9
    86b2:	b580      	push	{r7, lr}
	if (!file_opened) {
    86b4:	4c29      	ldr	r4, [pc, #164]	; (875c <sd_read_file_chunk+0xb0>)
int sd_read_file_chunk(const char *filename, uint8_t *buffer, uint32_t length, uint32_t *bytes_read) {
    86b6:	4699      	mov	r9, r3
	if (!file_opened) {
    86b8:	7823      	ldrb	r3, [r4, #0]
int sd_read_file_chunk(const char *filename, uint8_t *buffer, uint32_t length, uint32_t *bytes_read) {
    86ba:	b083      	sub	sp, #12
    86bc:	0006      	movs	r6, r0
    86be:	000f      	movs	r7, r1
    86c0:	4690      	mov	r8, r2
		if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    86c2:	4d27      	ldr	r5, [pc, #156]	; (8760 <sd_read_file_chunk+0xb4>)
	if (!file_opened) {
    86c4:	2b00      	cmp	r3, #0
    86c6:	d10c      	bne.n	86e2 <sd_read_file_chunk+0x36>
		if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    86c8:	0001      	movs	r1, r0
    86ca:	2201      	movs	r2, #1
    86cc:	0028      	movs	r0, r5
    86ce:	4b25      	ldr	r3, [pc, #148]	; (8764 <sd_read_file_chunk+0xb8>)
    86d0:	4798      	blx	r3
    86d2:	2800      	cmp	r0, #0
    86d4:	d13b      	bne.n	874e <sd_read_file_chunk+0xa2>
			file_opened = true;
    86d6:	2301      	movs	r3, #1
			printf("File opened: %s\r\n", filename);
    86d8:	0031      	movs	r1, r6
			file_opened = true;
    86da:	7023      	strb	r3, [r4, #0]
			printf("File opened: %s\r\n", filename);
    86dc:	4822      	ldr	r0, [pc, #136]	; (8768 <sd_read_file_chunk+0xbc>)
    86de:	4b23      	ldr	r3, [pc, #140]	; (876c <sd_read_file_chunk+0xc0>)
    86e0:	4798      	blx	r3
			return -1; 
		}
	}

	UINT br;
	if (f_read(&Fil, buffer, length, &br) == FR_OK) {
    86e2:	0039      	movs	r1, r7
    86e4:	ab01      	add	r3, sp, #4
    86e6:	4642      	mov	r2, r8
    86e8:	0028      	movs	r0, r5
    86ea:	4f21      	ldr	r7, [pc, #132]	; (8770 <sd_read_file_chunk+0xc4>)
    86ec:	47b8      	blx	r7
    86ee:	2800      	cmp	r0, #0
    86f0:	d118      	bne.n	8724 <sd_read_file_chunk+0x78>
		*bytes_read = br;
    86f2:	464b      	mov	r3, r9
    86f4:	9f01      	ldr	r7, [sp, #4]
    86f6:	601f      	str	r7, [r3, #0]
		if (br == 0) { 
    86f8:	2f00      	cmp	r7, #0
    86fa:	d10e      	bne.n	871a <sd_read_file_chunk+0x6e>
		return -1; 
	}
}

void sd_close_file(void) {
	if (file_opened) {
    86fc:	7823      	ldrb	r3, [r4, #0]
    86fe:	2b00      	cmp	r3, #0
    8700:	d006      	beq.n	8710 <sd_read_file_chunk+0x64>
		f_close(&Fil);
    8702:	4b1c      	ldr	r3, [pc, #112]	; (8774 <sd_read_file_chunk+0xc8>)
    8704:	0028      	movs	r0, r5
    8706:	4798      	blx	r3
		file_opened = false;
		printf("File closed.\r\n");
    8708:	481b      	ldr	r0, [pc, #108]	; (8778 <sd_read_file_chunk+0xcc>)
    870a:	4b1c      	ldr	r3, [pc, #112]	; (877c <sd_read_file_chunk+0xd0>)
		file_opened = false;
    870c:	7027      	strb	r7, [r4, #0]
		printf("File closed.\r\n");
    870e:	4798      	blx	r3
			printf("End of file reached: %s\r\n", filename);
    8710:	0031      	movs	r1, r6
    8712:	481b      	ldr	r0, [pc, #108]	; (8780 <sd_read_file_chunk+0xd4>)
    8714:	4b15      	ldr	r3, [pc, #84]	; (876c <sd_read_file_chunk+0xc0>)
    8716:	4798      	blx	r3
		return 0; 
    8718:	2000      	movs	r0, #0
}
    871a:	b003      	add	sp, #12
    871c:	bc0c      	pop	{r2, r3}
    871e:	4690      	mov	r8, r2
    8720:	4699      	mov	r9, r3
    8722:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Failed to read file: %s\r\n", filename);
    8724:	4b11      	ldr	r3, [pc, #68]	; (876c <sd_read_file_chunk+0xc0>)
    8726:	0031      	movs	r1, r6
    8728:	4816      	ldr	r0, [pc, #88]	; (8784 <sd_read_file_chunk+0xd8>)
    872a:	4798      	blx	r3
	if (file_opened) {
    872c:	7823      	ldrb	r3, [r4, #0]
    872e:	2b00      	cmp	r3, #0
    8730:	d102      	bne.n	8738 <sd_read_file_chunk+0x8c>
		return -1; 
    8732:	2001      	movs	r0, #1
    8734:	4240      	negs	r0, r0
    8736:	e7f0      	b.n	871a <sd_read_file_chunk+0x6e>
		f_close(&Fil);
    8738:	4b0e      	ldr	r3, [pc, #56]	; (8774 <sd_read_file_chunk+0xc8>)
    873a:	0028      	movs	r0, r5
    873c:	4798      	blx	r3
		file_opened = false;
    873e:	2300      	movs	r3, #0
		printf("File closed.\r\n");
    8740:	480d      	ldr	r0, [pc, #52]	; (8778 <sd_read_file_chunk+0xcc>)
		file_opened = false;
    8742:	7023      	strb	r3, [r4, #0]
		printf("File closed.\r\n");
    8744:	4b0d      	ldr	r3, [pc, #52]	; (877c <sd_read_file_chunk+0xd0>)
    8746:	4798      	blx	r3
		return -1; 
    8748:	2001      	movs	r0, #1
    874a:	4240      	negs	r0, r0
    874c:	e7e5      	b.n	871a <sd_read_file_chunk+0x6e>
			printf("Failed to open file: %s\r\n", filename);
    874e:	0031      	movs	r1, r6
    8750:	480d      	ldr	r0, [pc, #52]	; (8788 <sd_read_file_chunk+0xdc>)
    8752:	4b06      	ldr	r3, [pc, #24]	; (876c <sd_read_file_chunk+0xc0>)
    8754:	4798      	blx	r3
			return -1; 
    8756:	2001      	movs	r0, #1
    8758:	4240      	negs	r0, r0
    875a:	e7de      	b.n	871a <sd_read_file_chunk+0x6e>
    875c:	20000db0 	.word	0x20000db0
    8760:	20000d88 	.word	0x20000d88
    8764:	00006e81 	.word	0x00006e81
    8768:	0001892c 	.word	0x0001892c
    876c:	0000b731 	.word	0x0000b731
    8770:	00007615 	.word	0x00007615
    8774:	00007af5 	.word	0x00007af5
    8778:	0001895c 	.word	0x0001895c
    877c:	0000b7f5 	.word	0x0000b7f5
    8780:	0001896c 	.word	0x0001896c
    8784:	00018988 	.word	0x00018988
    8788:	00018940 	.word	0x00018940

0000878c <sd_close_file>:
void sd_close_file(void) {
    878c:	b510      	push	{r4, lr}
	if (file_opened) {
    878e:	4c06      	ldr	r4, [pc, #24]	; (87a8 <sd_close_file+0x1c>)
    8790:	7823      	ldrb	r3, [r4, #0]
    8792:	2b00      	cmp	r3, #0
    8794:	d007      	beq.n	87a6 <sd_close_file+0x1a>
		f_close(&Fil);
    8796:	4b05      	ldr	r3, [pc, #20]	; (87ac <sd_close_file+0x20>)
    8798:	4805      	ldr	r0, [pc, #20]	; (87b0 <sd_close_file+0x24>)
    879a:	4798      	blx	r3
		file_opened = false;
    879c:	2300      	movs	r3, #0
		printf("File closed.\r\n");
    879e:	4805      	ldr	r0, [pc, #20]	; (87b4 <sd_close_file+0x28>)
		file_opened = false;
    87a0:	7023      	strb	r3, [r4, #0]
		printf("File closed.\r\n");
    87a2:	4b05      	ldr	r3, [pc, #20]	; (87b8 <sd_close_file+0x2c>)
    87a4:	4798      	blx	r3
	}
}
    87a6:	bd10      	pop	{r4, pc}
    87a8:	20000db0 	.word	0x20000db0
    87ac:	00007af5 	.word	0x00007af5
    87b0:	20000d88 	.word	0x20000d88
    87b4:	0001895c 	.word	0x0001895c
    87b8:	0000b7f5 	.word	0x0000b7f5

000087bc <sd_list_files>:

bool sd_list_files(const char *path) {
    87bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    87be:	46ce      	mov	lr, r9
    87c0:	4647      	mov	r7, r8
    87c2:	b580      	push	{r7, lr}
    87c4:	b093      	sub	sp, #76	; 0x4c
	DIR dir;
	FILINFO fno;

	if (f_opendir(&dir, path) == FR_OK) {
    87c6:	0001      	movs	r1, r0
bool sd_list_files(const char *path) {
    87c8:	0004      	movs	r4, r0
	if (f_opendir(&dir, path) == FR_OK) {
    87ca:	4b1c      	ldr	r3, [pc, #112]	; (883c <sd_list_files+0x80>)
    87cc:	a807      	add	r0, sp, #28
    87ce:	4798      	blx	r3
		printf("Listing files in directory: %s\r\n", path);
    87d0:	0021      	movs	r1, r4
	if (f_opendir(&dir, path) == FR_OK) {
    87d2:	2800      	cmp	r0, #0
    87d4:	d12c      	bne.n	8830 <sd_list_files+0x74>
		printf("Listing files in directory: %s\r\n", path);
    87d6:	481a      	ldr	r0, [pc, #104]	; (8840 <sd_list_files+0x84>)
    87d8:	4e1a      	ldr	r6, [pc, #104]	; (8844 <sd_list_files+0x88>)
    87da:	47b0      	blx	r6
		while (true) {
			if (f_readdir(&dir, &fno) != FR_OK || fno.fname[0] == 0) break; // End of directory
			if (fno.fattrib & AM_DIR) {
				printf("[DIR]  %s\r\n", fno.fname);
				} else {
				printf("[FILE] %s (%lu bytes)\r\n", fno.fname, fno.fsize);
    87dc:	4b1a      	ldr	r3, [pc, #104]	; (8848 <sd_list_files+0x8c>)
			if (fno.fattrib & AM_DIR) {
    87de:	2710      	movs	r7, #16
				printf("[FILE] %s (%lu bytes)\r\n", fno.fname, fno.fsize);
    87e0:	4699      	mov	r9, r3
				printf("[DIR]  %s\r\n", fno.fname);
    87e2:	4b1a      	ldr	r3, [pc, #104]	; (884c <sd_list_files+0x90>)
    87e4:	4d1a      	ldr	r5, [pc, #104]	; (8850 <sd_list_files+0x94>)
    87e6:	4698      	mov	r8, r3
    87e8:	ac01      	add	r4, sp, #4
			if (f_readdir(&dir, &fno) != FR_OK || fno.fname[0] == 0) break; // End of directory
    87ea:	0021      	movs	r1, r4
    87ec:	a807      	add	r0, sp, #28
    87ee:	47a8      	blx	r5
    87f0:	2800      	cmp	r0, #0
    87f2:	d10e      	bne.n	8812 <sd_list_files+0x56>
    87f4:	7a63      	ldrb	r3, [r4, #9]
    87f6:	2b00      	cmp	r3, #0
    87f8:	d00b      	beq.n	8812 <sd_list_files+0x56>
			if (fno.fattrib & AM_DIR) {
    87fa:	7a23      	ldrb	r3, [r4, #8]
    87fc:	421f      	tst	r7, r3
    87fe:	d011      	beq.n	8824 <sd_list_files+0x68>
				printf("[DIR]  %s\r\n", fno.fname);
    8800:	210d      	movs	r1, #13
    8802:	4640      	mov	r0, r8
    8804:	4469      	add	r1, sp
    8806:	47b0      	blx	r6
			if (f_readdir(&dir, &fno) != FR_OK || fno.fname[0] == 0) break; // End of directory
    8808:	0021      	movs	r1, r4
    880a:	a807      	add	r0, sp, #28
    880c:	47a8      	blx	r5
    880e:	2800      	cmp	r0, #0
    8810:	d0f0      	beq.n	87f4 <sd_list_files+0x38>
			}
		}
		f_closedir(&dir);
    8812:	a807      	add	r0, sp, #28
    8814:	4b0f      	ldr	r3, [pc, #60]	; (8854 <sd_list_files+0x98>)
    8816:	4798      	blx	r3
		return true;
    8818:	2001      	movs	r0, #1
		} else {
		printf("Failed to open directory: %s\r\n", path);
		return false;
	}
}
    881a:	b013      	add	sp, #76	; 0x4c
    881c:	bc0c      	pop	{r2, r3}
    881e:	4690      	mov	r8, r2
    8820:	4699      	mov	r9, r3
    8822:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printf("[FILE] %s (%lu bytes)\r\n", fno.fname, fno.fsize);
    8824:	210d      	movs	r1, #13
    8826:	6822      	ldr	r2, [r4, #0]
    8828:	4469      	add	r1, sp
    882a:	4648      	mov	r0, r9
    882c:	47b0      	blx	r6
    882e:	e7dc      	b.n	87ea <sd_list_files+0x2e>
		printf("Failed to open directory: %s\r\n", path);
    8830:	4809      	ldr	r0, [pc, #36]	; (8858 <sd_list_files+0x9c>)
    8832:	4b04      	ldr	r3, [pc, #16]	; (8844 <sd_list_files+0x88>)
    8834:	4798      	blx	r3
		return false;
    8836:	2000      	movs	r0, #0
    8838:	e7ef      	b.n	881a <sd_list_files+0x5e>
    883a:	46c0      	nop			; (mov r8, r8)
    883c:	00007c31 	.word	0x00007c31
    8840:	000188b0 	.word	0x000188b0
    8844:	0000b731 	.word	0x0000b731
    8848:	000188e0 	.word	0x000188e0
    884c:	000188d4 	.word	0x000188d4
    8850:	0000822d 	.word	0x0000822d
    8854:	000081f9 	.word	0x000081f9
    8858:	000188f8 	.word	0x000188f8

0000885c <sd_print_file>:

bool sd_print_file(const char *filename) {
    885c:	b5f0      	push	{r4, r5, r6, r7, lr}
    885e:	46d6      	mov	lr, sl
    8860:	4646      	mov	r6, r8
    8862:	464f      	mov	r7, r9
    8864:	b5c0      	push	{r6, r7, lr}
	uint8_t buffer[512];
	UINT br;

	if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    8866:	4b25      	ldr	r3, [pc, #148]	; (88fc <sd_print_file+0xa0>)
bool sd_print_file(const char *filename) {
    8868:	4c25      	ldr	r4, [pc, #148]	; (8900 <sd_print_file+0xa4>)
	if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    886a:	0001      	movs	r1, r0
bool sd_print_file(const char *filename) {
    886c:	44a5      	add	sp, r4
	if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    886e:	4698      	mov	r8, r3
bool sd_print_file(const char *filename) {
    8870:	0004      	movs	r4, r0
	if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    8872:	2201      	movs	r2, #1
    8874:	0018      	movs	r0, r3
    8876:	4b23      	ldr	r3, [pc, #140]	; (8904 <sd_print_file+0xa8>)
    8878:	4798      	blx	r3
		printf("Reading file: %s\r\n", filename);
    887a:	0021      	movs	r1, r4
	if (f_open(&Fil, filename, FA_READ) == FR_OK) {
    887c:	2800      	cmp	r0, #0
    887e:	d138      	bne.n	88f2 <sd_print_file+0x96>
		printf("Reading file: %s\r\n", filename);
    8880:	4b21      	ldr	r3, [pc, #132]	; (8908 <sd_print_file+0xac>)
    8882:	4822      	ldr	r0, [pc, #136]	; (890c <sd_print_file+0xb0>)
    8884:	4798      	blx	r3
    8886:	4b22      	ldr	r3, [pc, #136]	; (8910 <sd_print_file+0xb4>)
    8888:	ad02      	add	r5, sp, #8
    888a:	4699      	mov	r9, r3
	  __sputc_r (_ptr, '\r', _p);
#endif
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
		return (*_p->_p++ = _c);
	else
		return (__swbuf_r(_ptr, _c, _p));
    888c:	4b21      	ldr	r3, [pc, #132]	; (8914 <sd_print_file+0xb8>)
    888e:	469a      	mov	sl, r3
		while (true) {
			if (f_read(&Fil, buffer, sizeof(buffer), &br) != FR_OK || br == 0) break;
    8890:	2280      	movs	r2, #128	; 0x80
    8892:	ab01      	add	r3, sp, #4
    8894:	0092      	lsls	r2, r2, #2
    8896:	0029      	movs	r1, r5
    8898:	4640      	mov	r0, r8
    889a:	47c8      	blx	r9
    889c:	2800      	cmp	r0, #0
    889e:	d11c      	bne.n	88da <sd_print_file+0x7e>
    88a0:	9b01      	ldr	r3, [sp, #4]
    88a2:	2b00      	cmp	r3, #0
    88a4:	d019      	beq.n	88da <sd_print_file+0x7e>
    88a6:	2400      	movs	r4, #0
    88a8:	4e1b      	ldr	r6, [pc, #108]	; (8918 <sd_print_file+0xbc>)
    88aa:	e007      	b.n	88bc <sd_print_file+0x60>
		return (*_p->_p++ = _c);
    88ac:	6813      	ldr	r3, [r2, #0]
    88ae:	1c58      	adds	r0, r3, #1
    88b0:	6010      	str	r0, [r2, #0]
    88b2:	7019      	strb	r1, [r3, #0]
			for (UINT i = 0; i < br; i++) {
    88b4:	9b01      	ldr	r3, [sp, #4]
    88b6:	3401      	adds	r4, #1
    88b8:	42a3      	cmp	r3, r4
    88ba:	d9e9      	bls.n	8890 <sd_print_file+0x34>
				putchar(buffer[i]);
    88bc:	6830      	ldr	r0, [r6, #0]
    88be:	5d29      	ldrb	r1, [r5, r4]
    88c0:	6882      	ldr	r2, [r0, #8]
	if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
    88c2:	6893      	ldr	r3, [r2, #8]
    88c4:	3b01      	subs	r3, #1
    88c6:	6093      	str	r3, [r2, #8]
    88c8:	2b00      	cmp	r3, #0
    88ca:	daef      	bge.n	88ac <sd_print_file+0x50>
    88cc:	6997      	ldr	r7, [r2, #24]
    88ce:	42bb      	cmp	r3, r7
    88d0:	db01      	blt.n	88d6 <sd_print_file+0x7a>
    88d2:	290a      	cmp	r1, #10
    88d4:	d1ea      	bne.n	88ac <sd_print_file+0x50>
		return (__swbuf_r(_ptr, _c, _p));
    88d6:	47d0      	blx	sl
    88d8:	e7ec      	b.n	88b4 <sd_print_file+0x58>
			}
		}
		f_close(&Fil);
    88da:	4640      	mov	r0, r8
    88dc:	4b0f      	ldr	r3, [pc, #60]	; (891c <sd_print_file+0xc0>)
    88de:	4798      	blx	r3
		return true;
    88e0:	2001      	movs	r0, #1
		} else {
		printf("Failed to open file: %s\r\n", filename);
		return false;
	}
}
    88e2:	2382      	movs	r3, #130	; 0x82
    88e4:	009b      	lsls	r3, r3, #2
    88e6:	449d      	add	sp, r3
    88e8:	bc1c      	pop	{r2, r3, r4}
    88ea:	4690      	mov	r8, r2
    88ec:	4699      	mov	r9, r3
    88ee:	46a2      	mov	sl, r4
    88f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Failed to open file: %s\r\n", filename);
    88f2:	480b      	ldr	r0, [pc, #44]	; (8920 <sd_print_file+0xc4>)
    88f4:	4b04      	ldr	r3, [pc, #16]	; (8908 <sd_print_file+0xac>)
    88f6:	4798      	blx	r3
		return false;
    88f8:	2000      	movs	r0, #0
    88fa:	e7f2      	b.n	88e2 <sd_print_file+0x86>
    88fc:	20000d88 	.word	0x20000d88
    8900:	fffffdf8 	.word	0xfffffdf8
    8904:	00006e81 	.word	0x00006e81
    8908:	0000b731 	.word	0x0000b731
    890c:	00018918 	.word	0x00018918
    8910:	00007615 	.word	0x00007615
    8914:	0000fd59 	.word	0x0000fd59
    8918:	20000088 	.word	0x20000088
    891c:	00007af5 	.word	0x00007af5
    8920:	00018940 	.word	0x00018940

00008924 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
BYTE cmd,		/* Command byte */
DWORD arg		/* Argument */
)
{
    8924:	b5f0      	push	{r4, r5, r6, r7, lr}
    8926:	464f      	mov	r7, r9
    8928:	4646      	mov	r6, r8
    892a:	46d6      	mov	lr, sl
    892c:	b5c0      	push	{r6, r7, lr}
    892e:	b086      	sub	sp, #24
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    8930:	466a      	mov	r2, sp
    8932:	71d0      	strb	r0, [r2, #7]
    8934:	79d3      	ldrb	r3, [r2, #7]
{
    8936:	4681      	mov	r9, r0
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    8938:	b25b      	sxtb	r3, r3
{
    893a:	4688      	mov	r8, r1
	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    893c:	2b00      	cmp	r3, #0
    893e:	db6e      	blt.n	8a1e <send_cmd+0xfa>
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    8940:	464b      	mov	r3, r9
    8942:	2b0c      	cmp	r3, #12
    8944:	d047      	beq.n	89d6 <send_cmd+0xb2>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8946:	24c0      	movs	r4, #192	; 0xc0
    8948:	2780      	movs	r7, #128	; 0x80
    894a:	05e4      	lsls	r4, r4, #23
    894c:	033f      	lsls	r7, r7, #12
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    894e:	ad04      	add	r5, sp, #16
    8950:	61a7      	str	r7, [r4, #24]
    8952:	2101      	movs	r1, #1
    8954:	0028      	movs	r0, r5
    8956:	4e3a      	ldr	r6, [pc, #232]	; (8a40 <send_cmd+0x11c>)
    8958:	47b0      	blx	r6
    895a:	ab02      	add	r3, sp, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    895c:	6167      	str	r7, [r4, #20]
    895e:	1ddf      	adds	r7, r3, #7
    8960:	2101      	movs	r1, #1
    8962:	0038      	movs	r0, r7
    8964:	47b0      	blx	r6
		delay_us(n);
    8966:	4b37      	ldr	r3, [pc, #220]	; (8a44 <send_cmd+0x120>)
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8968:	4c37      	ldr	r4, [pc, #220]	; (8a48 <send_cmd+0x124>)
		delay_us(n);
    896a:	469a      	mov	sl, r3
    896c:	e004      	b.n	8978 <send_cmd+0x54>
    896e:	2064      	movs	r0, #100	; 0x64
    8970:	3c01      	subs	r4, #1
    8972:	47d0      	blx	sl
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    8974:	2c00      	cmp	r4, #0
    8976:	d048      	beq.n	8a0a <send_cmd+0xe6>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8978:	2101      	movs	r1, #1
    897a:	0028      	movs	r0, r5
    897c:	47b0      	blx	r6
		if (d == 0xFF) break;
    897e:	782b      	ldrb	r3, [r5, #0]
    8980:	2bff      	cmp	r3, #255	; 0xff
    8982:	d1f4      	bne.n	896e <send_cmd+0x4a>
		sd_deselect();
		if (!sd_select()) return 0xFF;
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    8984:	2340      	movs	r3, #64	; 0x40
    8986:	464a      	mov	r2, r9
    8988:	4313      	orrs	r3, r2
    898a:	702b      	strb	r3, [r5, #0]
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    898c:	4643      	mov	r3, r8
    898e:	0e1b      	lsrs	r3, r3, #24
    8990:	706b      	strb	r3, [r5, #1]
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    8992:	4643      	mov	r3, r8
    8994:	0c1b      	lsrs	r3, r3, #16
    8996:	70ab      	strb	r3, [r5, #2]
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    8998:	4643      	mov	r3, r8
    899a:	0a1b      	lsrs	r3, r3, #8
    899c:	70eb      	strb	r3, [r5, #3]
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    899e:	4643      	mov	r3, r8
    89a0:	712b      	strb	r3, [r5, #4]
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    89a2:	2a00      	cmp	r2, #0
    89a4:	d146      	bne.n	8a34 <send_cmd+0x110>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    89a6:	2395      	movs	r3, #149	; 0x95
    89a8:	716b      	strb	r3, [r5, #5]
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    89aa:	2106      	movs	r1, #6
    89ac:	0028      	movs	r0, r5
    89ae:	4b27      	ldr	r3, [pc, #156]	; (8a4c <send_cmd+0x128>)
    89b0:	4798      	blx	r3
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    89b2:	240a      	movs	r4, #10
    89b4:	0038      	movs	r0, r7
    89b6:	2101      	movs	r1, #1
    89b8:	47b0      	blx	r6
	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
	rcvr_mmc(&d, 1);
	while ((d & 0x80) && --n);
    89ba:	7838      	ldrb	r0, [r7, #0]
    89bc:	b243      	sxtb	r3, r0
    89be:	2b00      	cmp	r3, #0
    89c0:	da03      	bge.n	89ca <send_cmd+0xa6>
    89c2:	3c01      	subs	r4, #1
    89c4:	b2e4      	uxtb	r4, r4
    89c6:	2c00      	cmp	r4, #0
    89c8:	d1f4      	bne.n	89b4 <send_cmd+0x90>

	return d;			/* Return with the response value */
}
    89ca:	b006      	add	sp, #24
    89cc:	bc1c      	pop	{r2, r3, r4}
    89ce:	4690      	mov	r8, r2
    89d0:	4699      	mov	r9, r3
    89d2:	46a2      	mov	sl, r4
    89d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    89d6:	234c      	movs	r3, #76	; 0x4c
    89d8:	a804      	add	r0, sp, #16
    89da:	7003      	strb	r3, [r0, #0]
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    89dc:	4643      	mov	r3, r8
    89de:	0e1b      	lsrs	r3, r3, #24
    89e0:	7043      	strb	r3, [r0, #1]
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    89e2:	4643      	mov	r3, r8
    89e4:	0c1b      	lsrs	r3, r3, #16
    89e6:	7083      	strb	r3, [r0, #2]
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    89e8:	4643      	mov	r3, r8
    89ea:	0a1b      	lsrs	r3, r3, #8
    89ec:	70c3      	strb	r3, [r0, #3]
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    89ee:	4643      	mov	r3, r8
    89f0:	7103      	strb	r3, [r0, #4]
	buf[5] = n;
    89f2:	2301      	movs	r3, #1
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    89f4:	2106      	movs	r1, #6
	buf[5] = n;
    89f6:	7143      	strb	r3, [r0, #5]
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    89f8:	4b14      	ldr	r3, [pc, #80]	; (8a4c <send_cmd+0x128>)
    89fa:	4798      	blx	r3
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    89fc:	ab02      	add	r3, sp, #8
    89fe:	1ddf      	adds	r7, r3, #7
    8a00:	2101      	movs	r1, #1
    8a02:	0038      	movs	r0, r7
    8a04:	4e0e      	ldr	r6, [pc, #56]	; (8a40 <send_cmd+0x11c>)
    8a06:	47b0      	blx	r6
    8a08:	e7d3      	b.n	89b2 <send_cmd+0x8e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8a0a:	2280      	movs	r2, #128	; 0x80
    8a0c:	23c0      	movs	r3, #192	; 0xc0
    8a0e:	0312      	lsls	r2, r2, #12
    8a10:	05db      	lsls	r3, r3, #23
    8a12:	0028      	movs	r0, r5
    8a14:	619a      	str	r2, [r3, #24]
    8a16:	2101      	movs	r1, #1
    8a18:	47b0      	blx	r6
		if (!sd_select()) return 0xFF;
    8a1a:	20ff      	movs	r0, #255	; 0xff
    8a1c:	e7d5      	b.n	89ca <send_cmd+0xa6>
		n = send_cmd(CMD55, 0);
    8a1e:	2100      	movs	r1, #0
    8a20:	2037      	movs	r0, #55	; 0x37
    8a22:	f7ff ff7f 	bl	8924 <send_cmd>
		if (n > 1) return n;
    8a26:	2801      	cmp	r0, #1
    8a28:	d8cf      	bhi.n	89ca <send_cmd+0xa6>
		cmd &= 0x7F;
    8a2a:	464a      	mov	r2, r9
    8a2c:	237f      	movs	r3, #127	; 0x7f
    8a2e:	401a      	ands	r2, r3
    8a30:	4691      	mov	r9, r2
    8a32:	e785      	b.n	8940 <send_cmd+0x1c>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    8a34:	2a08      	cmp	r2, #8
    8a36:	d101      	bne.n	8a3c <send_cmd+0x118>
	buf[5] = n;
    8a38:	2387      	movs	r3, #135	; 0x87
    8a3a:	e7b5      	b.n	89a8 <send_cmd+0x84>
    8a3c:	2301      	movs	r3, #1
    8a3e:	e7b3      	b.n	89a8 <send_cmd+0x84>
    8a40:	00002fa9 	.word	0x00002fa9
    8a44:	000001a9 	.word	0x000001a9
    8a48:	00001388 	.word	0x00001388
    8a4c:	00002fc5 	.word	0x00002fc5

00008a50 <disk_status>:

DSTATUS disk_status (
BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    8a50:	2301      	movs	r3, #1
    8a52:	2800      	cmp	r0, #0
    8a54:	d101      	bne.n	8a5a <disk_status+0xa>

	return Stat;
    8a56:	4b02      	ldr	r3, [pc, #8]	; (8a60 <disk_status+0x10>)
    8a58:	781b      	ldrb	r3, [r3, #0]
}
    8a5a:	0018      	movs	r0, r3
    8a5c:	4770      	bx	lr
    8a5e:	46c0      	nop			; (mov r8, r8)
    8a60:	20000084 	.word	0x20000084

00008a64 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
BYTE drv		/* Physical drive nmuber (0) */
)
{
    8a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8a66:	46d6      	mov	lr, sl
    8a68:	464f      	mov	r7, r9
    8a6a:	4646      	mov	r6, r8
    8a6c:	b5c0      	push	{r6, r7, lr}
    8a6e:	0005      	movs	r5, r0
    8a70:	b082      	sub	sp, #8
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    8a72:	2403      	movs	r4, #3
    8a74:	2800      	cmp	r0, #0
    8a76:	d006      	beq.n	8a86 <disk_initialize+0x22>
	Stat = s;

	sd_deselect();

	return s;
}
    8a78:	0020      	movs	r0, r4
    8a7a:	b002      	add	sp, #8
    8a7c:	bc1c      	pop	{r2, r3, r4}
    8a7e:	4690      	mov	r8, r2
    8a80:	4699      	mov	r9, r3
    8a82:	46a2      	mov	sl, r4
    8a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_ms(10);			/* 10ms */
    8a86:	200a      	movs	r0, #10
    8a88:	4b3c      	ldr	r3, [pc, #240]	; (8b7c <disk_initialize+0x118>)
    8a8a:	4798      	blx	r3
    8a8c:	4e3c      	ldr	r6, [pc, #240]	; (8b80 <disk_initialize+0x11c>)
    8a8e:	3407      	adds	r4, #7
    8a90:	3c01      	subs	r4, #1
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8a92:	2101      	movs	r1, #1
    8a94:	a801      	add	r0, sp, #4
    8a96:	b2e4      	uxtb	r4, r4
    8a98:	47b0      	blx	r6
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    8a9a:	2c00      	cmp	r4, #0
    8a9c:	d1f8      	bne.n	8a90 <disk_initialize+0x2c>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    8a9e:	2100      	movs	r1, #0
    8aa0:	2000      	movs	r0, #0
    8aa2:	4f38      	ldr	r7, [pc, #224]	; (8b84 <disk_initialize+0x120>)
    8aa4:	47b8      	blx	r7
    8aa6:	4680      	mov	r8, r0
    8aa8:	2801      	cmp	r0, #1
    8aaa:	d00e      	beq.n	8aca <disk_initialize+0x66>
    8aac:	2401      	movs	r4, #1
	CardType = ty;
    8aae:	4b36      	ldr	r3, [pc, #216]	; (8b88 <disk_initialize+0x124>)
    8ab0:	2280      	movs	r2, #128	; 0x80
    8ab2:	701d      	strb	r5, [r3, #0]
	Stat = s;
    8ab4:	4b35      	ldr	r3, [pc, #212]	; (8b8c <disk_initialize+0x128>)
    8ab6:	0312      	lsls	r2, r2, #12
    8ab8:	701c      	strb	r4, [r3, #0]
    8aba:	23c0      	movs	r3, #192	; 0xc0
    8abc:	05db      	lsls	r3, r3, #23
    8abe:	619a      	str	r2, [r3, #24]
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8ac0:	466b      	mov	r3, sp
    8ac2:	2101      	movs	r1, #1
    8ac4:	1cd8      	adds	r0, r3, #3
    8ac6:	47b0      	blx	r6
	return s;
    8ac8:	e7d6      	b.n	8a78 <disk_initialize+0x14>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    8aca:	21d5      	movs	r1, #213	; 0xd5
    8acc:	2008      	movs	r0, #8
    8ace:	0049      	lsls	r1, r1, #1
    8ad0:	47b8      	blx	r7
    8ad2:	2801      	cmp	r0, #1
    8ad4:	d01f      	beq.n	8b16 <disk_initialize+0xb2>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    8ad6:	2100      	movs	r1, #0
    8ad8:	20a9      	movs	r0, #169	; 0xa9
    8ada:	47b8      	blx	r7
				ty = CT_MMC3; cmd = CMD1;	/* MMCv3 */
    8adc:	2301      	movs	r3, #1
    8ade:	4699      	mov	r9, r3
			if (send_cmd(ACMD41, 0) <= 1) 	{
    8ae0:	2801      	cmp	r0, #1
    8ae2:	d945      	bls.n	8b70 <disk_initialize+0x10c>
				ty = CT_MMC3; cmd = CMD1;	/* MMCv3 */
    8ae4:	24fa      	movs	r4, #250	; 0xfa
		delay_us(n);
    8ae6:	4b2a      	ldr	r3, [pc, #168]	; (8b90 <disk_initialize+0x12c>)
				ty = CT_MMC3; cmd = CMD1;	/* MMCv3 */
    8ae8:	00a4      	lsls	r4, r4, #2
		delay_us(n);
    8aea:	469a      	mov	sl, r3
    8aec:	e005      	b.n	8afa <disk_initialize+0x96>
    8aee:	20fa      	movs	r0, #250	; 0xfa
    8af0:	3c01      	subs	r4, #1
    8af2:	0080      	lsls	r0, r0, #2
    8af4:	47d0      	blx	sl
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    8af6:	2c00      	cmp	r4, #0
    8af8:	d0d8      	beq.n	8aac <disk_initialize+0x48>
				if (send_cmd(cmd, 0) == 0) break;
    8afa:	2100      	movs	r1, #0
    8afc:	4648      	mov	r0, r9
    8afe:	47b8      	blx	r7
    8b00:	2800      	cmp	r0, #0
    8b02:	d1f4      	bne.n	8aee <disk_initialize+0x8a>
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    8b04:	2180      	movs	r1, #128	; 0x80
    8b06:	2010      	movs	r0, #16
    8b08:	0089      	lsls	r1, r1, #2
    8b0a:	47b8      	blx	r7
    8b0c:	2800      	cmp	r0, #0
    8b0e:	d1cd      	bne.n	8aac <disk_initialize+0x48>
    8b10:	4645      	mov	r5, r8
    8b12:	2400      	movs	r4, #0
    8b14:	e7cb      	b.n	8aae <disk_initialize+0x4a>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8b16:	2104      	movs	r1, #4
    8b18:	a801      	add	r0, sp, #4
    8b1a:	47b0      	blx	r6
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    8b1c:	466b      	mov	r3, sp
    8b1e:	799b      	ldrb	r3, [r3, #6]
    8b20:	2b01      	cmp	r3, #1
    8b22:	d1c3      	bne.n	8aac <disk_initialize+0x48>
    8b24:	466b      	mov	r3, sp
    8b26:	79db      	ldrb	r3, [r3, #7]
    8b28:	2baa      	cmp	r3, #170	; 0xaa
    8b2a:	d1bf      	bne.n	8aac <disk_initialize+0x48>
    8b2c:	24fa      	movs	r4, #250	; 0xfa
		delay_us(n);
    8b2e:	4b18      	ldr	r3, [pc, #96]	; (8b90 <disk_initialize+0x12c>)
    8b30:	00a4      	lsls	r4, r4, #2
    8b32:	4698      	mov	r8, r3
    8b34:	e005      	b.n	8b42 <disk_initialize+0xde>
    8b36:	20fa      	movs	r0, #250	; 0xfa
    8b38:	3c01      	subs	r4, #1
    8b3a:	0080      	lsls	r0, r0, #2
    8b3c:	47c0      	blx	r8
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    8b3e:	2c00      	cmp	r4, #0
    8b40:	d0b4      	beq.n	8aac <disk_initialize+0x48>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    8b42:	2180      	movs	r1, #128	; 0x80
    8b44:	20a9      	movs	r0, #169	; 0xa9
    8b46:	05c9      	lsls	r1, r1, #23
    8b48:	47b8      	blx	r7
    8b4a:	2800      	cmp	r0, #0
    8b4c:	d1f3      	bne.n	8b36 <disk_initialize+0xd2>
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    8b4e:	2100      	movs	r1, #0
    8b50:	203a      	movs	r0, #58	; 0x3a
    8b52:	47b8      	blx	r7
    8b54:	1e07      	subs	r7, r0, #0
    8b56:	d1a9      	bne.n	8aac <disk_initialize+0x48>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8b58:	2104      	movs	r1, #4
    8b5a:	a801      	add	r0, sp, #4
    8b5c:	47b0      	blx	r6
					ty = (buf[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* SDv2+ */
    8b5e:	466b      	mov	r3, sp
    8b60:	791c      	ldrb	r4, [r3, #4]
    8b62:	2340      	movs	r3, #64	; 0x40
    8b64:	2508      	movs	r5, #8
    8b66:	401c      	ands	r4, r3
    8b68:	d0a1      	beq.n	8aae <disk_initialize+0x4a>
    8b6a:	003c      	movs	r4, r7
    8b6c:	2518      	movs	r5, #24
    8b6e:	e79e      	b.n	8aae <disk_initialize+0x4a>
				ty = CT_SDC2; cmd = ACMD41;	/* SDv1 */
    8b70:	33a8      	adds	r3, #168	; 0xa8
    8b72:	4699      	mov	r9, r3
    8b74:	3ba1      	subs	r3, #161	; 0xa1
    8b76:	4698      	mov	r8, r3
    8b78:	e7b4      	b.n	8ae4 <disk_initialize+0x80>
    8b7a:	46c0      	nop			; (mov r8, r8)
    8b7c:	000001c9 	.word	0x000001c9
    8b80:	00002fa9 	.word	0x00002fa9
    8b84:	00008925 	.word	0x00008925
    8b88:	20000db1 	.word	0x20000db1
    8b8c:	20000084 	.word	0x20000084
    8b90:	000001a9 	.word	0x000001a9

00008b94 <disk_read>:
BYTE drv,			/* Physical drive nmuber (0) */
BYTE *buff,			/* Pointer to the data buffer to store read data */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    8b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b96:	464e      	mov	r6, r9
    8b98:	4645      	mov	r5, r8
    8b9a:	46de      	mov	lr, fp
    8b9c:	4657      	mov	r7, sl
    8b9e:	b5e0      	push	{r5, r6, r7, lr}
    8ba0:	4689      	mov	r9, r1
    8ba2:	b083      	sub	sp, #12
    8ba4:	4698      	mov	r8, r3
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    8ba6:	2403      	movs	r4, #3
	if (drv) return STA_NOINIT;
    8ba8:	2800      	cmp	r0, #0
    8baa:	d142      	bne.n	8c32 <disk_read+0x9e>
	return Stat;
    8bac:	4b30      	ldr	r3, [pc, #192]	; (8c70 <disk_read+0xdc>)
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    8bae:	781b      	ldrb	r3, [r3, #0]
    8bb0:	07db      	lsls	r3, r3, #31
    8bb2:	d43e      	bmi.n	8c32 <disk_read+0x9e>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    8bb4:	4b2f      	ldr	r3, [pc, #188]	; (8c74 <disk_read+0xe0>)
    8bb6:	781b      	ldrb	r3, [r3, #0]
    8bb8:	06db      	lsls	r3, r3, #27
    8bba:	d400      	bmi.n	8bbe <disk_read+0x2a>
    8bbc:	0252      	lsls	r2, r2, #9

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    8bbe:	2301      	movs	r3, #1
    8bc0:	2111      	movs	r1, #17
    8bc2:	4543      	cmp	r3, r8
    8bc4:	419b      	sbcs	r3, r3
    8bc6:	468a      	mov	sl, r1
    8bc8:	425b      	negs	r3, r3
    8bca:	449a      	add	sl, r3
	if (send_cmd(cmd, sect) == 0) {
    8bcc:	4b2a      	ldr	r3, [pc, #168]	; (8c78 <disk_read+0xe4>)
    8bce:	0011      	movs	r1, r2
    8bd0:	4650      	mov	r0, sl
    8bd2:	469b      	mov	fp, r3
    8bd4:	4798      	blx	r3
    8bd6:	2800      	cmp	r0, #0
    8bd8:	d11d      	bne.n	8c16 <disk_read+0x82>
    8bda:	4e28      	ldr	r6, [pc, #160]	; (8c7c <disk_read+0xe8>)
		delay_us(n);
    8bdc:	4f28      	ldr	r7, [pc, #160]	; (8c80 <disk_read+0xec>)
    8bde:	ad01      	add	r5, sp, #4
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    8be0:	24fa      	movs	r4, #250	; 0xfa
    8be2:	00a4      	lsls	r4, r4, #2
    8be4:	e004      	b.n	8bf0 <disk_read+0x5c>
		delay_us(n);
    8be6:	2064      	movs	r0, #100	; 0x64
    8be8:	3c01      	subs	r4, #1
    8bea:	47b8      	blx	r7
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    8bec:	2c00      	cmp	r4, #0
    8bee:	d03c      	beq.n	8c6a <disk_read+0xd6>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8bf0:	2101      	movs	r1, #1
    8bf2:	0028      	movs	r0, r5
    8bf4:	47b0      	blx	r6
		if (d[0] != 0xFF) break;
    8bf6:	782b      	ldrb	r3, [r5, #0]
    8bf8:	2bff      	cmp	r3, #255	; 0xff
    8bfa:	d0f4      	beq.n	8be6 <disk_read+0x52>
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    8bfc:	2bfe      	cmp	r3, #254	; 0xfe
    8bfe:	d020      	beq.n	8c42 <disk_read+0xae>
    8c00:	4644      	mov	r4, r8
    8c02:	1e63      	subs	r3, r4, #1
    8c04:	419c      	sbcs	r4, r3
    8c06:	b2e4      	uxtb	r4, r4
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    8c08:	4653      	mov	r3, sl
    8c0a:	2b12      	cmp	r3, #18
    8c0c:	d109      	bne.n	8c22 <disk_read+0x8e>
    8c0e:	2100      	movs	r1, #0
    8c10:	200c      	movs	r0, #12
    8c12:	47d8      	blx	fp
    8c14:	e005      	b.n	8c22 <disk_read+0x8e>
    8c16:	4644      	mov	r4, r8
    8c18:	1e63      	subs	r3, r4, #1
    8c1a:	419c      	sbcs	r4, r3
    8c1c:	4e17      	ldr	r6, [pc, #92]	; (8c7c <disk_read+0xe8>)
    8c1e:	b2e4      	uxtb	r4, r4
    8c20:	ad01      	add	r5, sp, #4
    8c22:	2280      	movs	r2, #128	; 0x80
    8c24:	23c0      	movs	r3, #192	; 0xc0
    8c26:	0312      	lsls	r2, r2, #12
    8c28:	05db      	lsls	r3, r3, #23
    8c2a:	619a      	str	r2, [r3, #24]
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8c2c:	2101      	movs	r1, #1
    8c2e:	0028      	movs	r0, r5
    8c30:	47b0      	blx	r6
	}
	sd_deselect();

	return count ? RES_ERROR : RES_OK;
}
    8c32:	0020      	movs	r0, r4
    8c34:	b003      	add	sp, #12
    8c36:	bc3c      	pop	{r2, r3, r4, r5}
    8c38:	4690      	mov	r8, r2
    8c3a:	4699      	mov	r9, r3
    8c3c:	46a2      	mov	sl, r4
    8c3e:	46ab      	mov	fp, r5
    8c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8c42:	2180      	movs	r1, #128	; 0x80
    8c44:	4648      	mov	r0, r9
    8c46:	0089      	lsls	r1, r1, #2
    8c48:	47b0      	blx	r6
    8c4a:	2102      	movs	r1, #2
    8c4c:	0028      	movs	r0, r5
    8c4e:	47b0      	blx	r6
			buff += 512;
    8c50:	2380      	movs	r3, #128	; 0x80
    8c52:	009b      	lsls	r3, r3, #2
    8c54:	469c      	mov	ip, r3
		} while (--count);
    8c56:	2301      	movs	r3, #1
    8c58:	425b      	negs	r3, r3
			buff += 512;
    8c5a:	44e1      	add	r9, ip
		} while (--count);
    8c5c:	469c      	mov	ip, r3
    8c5e:	44e0      	add	r8, ip
    8c60:	4643      	mov	r3, r8
    8c62:	2b00      	cmp	r3, #0
    8c64:	d1bc      	bne.n	8be0 <disk_read+0x4c>
    8c66:	2400      	movs	r4, #0
    8c68:	e7ce      	b.n	8c08 <disk_read+0x74>
    8c6a:	782b      	ldrb	r3, [r5, #0]
    8c6c:	e7c6      	b.n	8bfc <disk_read+0x68>
    8c6e:	46c0      	nop			; (mov r8, r8)
    8c70:	20000084 	.word	0x20000084
    8c74:	20000db1 	.word	0x20000db1
    8c78:	00008925 	.word	0x00008925
    8c7c:	00002fa9 	.word	0x00002fa9
    8c80:	000001a9 	.word	0x000001a9

00008c84 <disk_write>:
BYTE drv,			/* Physical drive nmuber (0) */
const BYTE *buff,	/* Pointer to the data to be written */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    8c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c86:	464f      	mov	r7, r9
    8c88:	4646      	mov	r6, r8
    8c8a:	46d6      	mov	lr, sl
    8c8c:	b5c0      	push	{r6, r7, lr}
    8c8e:	4689      	mov	r9, r1
    8c90:	b082      	sub	sp, #8
    8c92:	0015      	movs	r5, r2
    8c94:	4698      	mov	r8, r3
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    8c96:	2403      	movs	r4, #3
	if (drv) return STA_NOINIT;
    8c98:	2800      	cmp	r0, #0
    8c9a:	d122      	bne.n	8ce2 <disk_write+0x5e>
	return Stat;
    8c9c:	4b57      	ldr	r3, [pc, #348]	; (8dfc <disk_write+0x178>)
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    8c9e:	781b      	ldrb	r3, [r3, #0]
    8ca0:	07db      	lsls	r3, r3, #31
    8ca2:	d41e      	bmi.n	8ce2 <disk_write+0x5e>
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    8ca4:	4b56      	ldr	r3, [pc, #344]	; (8e00 <disk_write+0x17c>)
    8ca6:	781b      	ldrb	r3, [r3, #0]
    8ca8:	06da      	lsls	r2, r3, #27
    8caa:	d521      	bpl.n	8cf0 <disk_write+0x6c>

	if (count == 1) {	/* Single block write */
    8cac:	4642      	mov	r2, r8
    8cae:	2a01      	cmp	r2, #1
    8cb0:	d100      	bne.n	8cb4 <disk_write+0x30>
    8cb2:	e071      	b.n	8d98 <disk_write+0x114>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
		&& xmit_datablock(buff, 0xFE))
		count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    8cb4:	220c      	movs	r2, #12
    8cb6:	421a      	tst	r2, r3
    8cb8:	d169      	bne.n	8d8e <disk_write+0x10a>
    8cba:	4c52      	ldr	r4, [pc, #328]	; (8e04 <disk_write+0x180>)
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    8cbc:	0029      	movs	r1, r5
    8cbe:	2019      	movs	r0, #25
    8cc0:	47a0      	blx	r4
    8cc2:	2800      	cmp	r0, #0
    8cc4:	d016      	beq.n	8cf4 <disk_write+0x70>
    8cc6:	4644      	mov	r4, r8
    8cc8:	1e62      	subs	r2, r4, #1
    8cca:	4194      	sbcs	r4, r2
    8ccc:	4e4e      	ldr	r6, [pc, #312]	; (8e08 <disk_write+0x184>)
    8cce:	b2e4      	uxtb	r4, r4
    8cd0:	ad01      	add	r5, sp, #4
    8cd2:	2280      	movs	r2, #128	; 0x80
    8cd4:	23c0      	movs	r3, #192	; 0xc0
    8cd6:	0312      	lsls	r2, r2, #12
    8cd8:	05db      	lsls	r3, r3, #23
    8cda:	619a      	str	r2, [r3, #24]
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8cdc:	2101      	movs	r1, #1
    8cde:	0028      	movs	r0, r5
    8ce0:	47b0      	blx	r6
		}
	}
	sd_deselect();

	return count ? RES_ERROR : RES_OK;
}
    8ce2:	0020      	movs	r0, r4
    8ce4:	b002      	add	sp, #8
    8ce6:	bc1c      	pop	{r2, r3, r4}
    8ce8:	4690      	mov	r8, r2
    8cea:	4699      	mov	r9, r3
    8cec:	46a2      	mov	sl, r4
    8cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    8cf0:	026d      	lsls	r5, r5, #9
    8cf2:	e7db      	b.n	8cac <disk_write+0x28>
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    8cf4:	4b45      	ldr	r3, [pc, #276]	; (8e0c <disk_write+0x188>)
    8cf6:	4e44      	ldr	r6, [pc, #272]	; (8e08 <disk_write+0x184>)
    8cf8:	469a      	mov	sl, r3
		delay_us(n);
    8cfa:	4f45      	ldr	r7, [pc, #276]	; (8e10 <disk_write+0x18c>)
    8cfc:	ad01      	add	r5, sp, #4
    8cfe:	4c45      	ldr	r4, [pc, #276]	; (8e14 <disk_write+0x190>)
    8d00:	e004      	b.n	8d0c <disk_write+0x88>
    8d02:	2064      	movs	r0, #100	; 0x64
    8d04:	3c01      	subs	r4, #1
    8d06:	47b8      	blx	r7
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    8d08:	2c00      	cmp	r4, #0
    8d0a:	d019      	beq.n	8d40 <disk_write+0xbc>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8d0c:	2101      	movs	r1, #1
    8d0e:	0028      	movs	r0, r5
    8d10:	47b0      	blx	r6
		if (d == 0xFF) break;
    8d12:	782b      	ldrb	r3, [r5, #0]
    8d14:	2bff      	cmp	r3, #255	; 0xff
    8d16:	d1f4      	bne.n	8d02 <disk_write+0x7e>
	d[0] = token;
    8d18:	23fc      	movs	r3, #252	; 0xfc
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    8d1a:	2101      	movs	r1, #1
    8d1c:	0028      	movs	r0, r5
	d[0] = token;
    8d1e:	702b      	strb	r3, [r5, #0]
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    8d20:	47d0      	blx	sl
    8d22:	2180      	movs	r1, #128	; 0x80
    8d24:	4648      	mov	r0, r9
    8d26:	0089      	lsls	r1, r1, #2
    8d28:	47d0      	blx	sl
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8d2a:	2102      	movs	r1, #2
    8d2c:	0028      	movs	r0, r5
    8d2e:	47b0      	blx	r6
    8d30:	2101      	movs	r1, #1
    8d32:	0028      	movs	r0, r5
    8d34:	47b0      	blx	r6
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    8d36:	231f      	movs	r3, #31
    8d38:	782a      	ldrb	r2, [r5, #0]
    8d3a:	4013      	ands	r3, r2
    8d3c:	2b05      	cmp	r3, #5
    8d3e:	d018      	beq.n	8d72 <disk_write+0xee>
    8d40:	4c34      	ldr	r4, [pc, #208]	; (8e14 <disk_write+0x190>)
		delay_us(n);
    8d42:	4f33      	ldr	r7, [pc, #204]	; (8e10 <disk_write+0x18c>)
    8d44:	e004      	b.n	8d50 <disk_write+0xcc>
    8d46:	2064      	movs	r0, #100	; 0x64
    8d48:	3c01      	subs	r4, #1
    8d4a:	47b8      	blx	r7
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    8d4c:	2c00      	cmp	r4, #0
    8d4e:	d01c      	beq.n	8d8a <disk_write+0x106>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8d50:	2101      	movs	r1, #1
    8d52:	0028      	movs	r0, r5
    8d54:	47b0      	blx	r6
		if (d == 0xFF) break;
    8d56:	782b      	ldrb	r3, [r5, #0]
    8d58:	2bff      	cmp	r3, #255	; 0xff
    8d5a:	d1f4      	bne.n	8d46 <disk_write+0xc2>
    8d5c:	4644      	mov	r4, r8
	d[0] = token;
    8d5e:	23fd      	movs	r3, #253	; 0xfd
    8d60:	1e62      	subs	r2, r4, #1
    8d62:	4194      	sbcs	r4, r2
    8d64:	702b      	strb	r3, [r5, #0]
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    8d66:	2101      	movs	r1, #1
    8d68:	0028      	movs	r0, r5
    8d6a:	4b28      	ldr	r3, [pc, #160]	; (8e0c <disk_write+0x188>)
    8d6c:	4798      	blx	r3
    8d6e:	b2e4      	uxtb	r4, r4
    8d70:	e7af      	b.n	8cd2 <disk_write+0x4e>
				buff += 512;
    8d72:	2380      	movs	r3, #128	; 0x80
    8d74:	009b      	lsls	r3, r3, #2
    8d76:	469c      	mov	ip, r3
			} while (--count);
    8d78:	2301      	movs	r3, #1
    8d7a:	425b      	negs	r3, r3
				buff += 512;
    8d7c:	44e1      	add	r9, ip
			} while (--count);
    8d7e:	469c      	mov	ip, r3
    8d80:	44e0      	add	r8, ip
    8d82:	4643      	mov	r3, r8
    8d84:	2b00      	cmp	r3, #0
    8d86:	d1ba      	bne.n	8cfe <disk_write+0x7a>
    8d88:	e7da      	b.n	8d40 <disk_write+0xbc>
    8d8a:	2401      	movs	r4, #1
    8d8c:	e7a1      	b.n	8cd2 <disk_write+0x4e>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    8d8e:	4641      	mov	r1, r8
    8d90:	4c1c      	ldr	r4, [pc, #112]	; (8e04 <disk_write+0x180>)
    8d92:	2097      	movs	r0, #151	; 0x97
    8d94:	47a0      	blx	r4
    8d96:	e791      	b.n	8cbc <disk_write+0x38>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    8d98:	0029      	movs	r1, r5
    8d9a:	2018      	movs	r0, #24
    8d9c:	4b19      	ldr	r3, [pc, #100]	; (8e04 <disk_write+0x180>)
    8d9e:	4798      	blx	r3
    8da0:	2800      	cmp	r0, #0
    8da2:	d003      	beq.n	8dac <disk_write+0x128>
    8da4:	2401      	movs	r4, #1
    8da6:	ad01      	add	r5, sp, #4
    8da8:	4e17      	ldr	r6, [pc, #92]	; (8e08 <disk_write+0x184>)
    8daa:	e792      	b.n	8cd2 <disk_write+0x4e>
    8dac:	4c19      	ldr	r4, [pc, #100]	; (8e14 <disk_write+0x190>)
    8dae:	ad01      	add	r5, sp, #4
    8db0:	4e15      	ldr	r6, [pc, #84]	; (8e08 <disk_write+0x184>)
		delay_us(n);
    8db2:	4f17      	ldr	r7, [pc, #92]	; (8e10 <disk_write+0x18c>)
    8db4:	e004      	b.n	8dc0 <disk_write+0x13c>
    8db6:	2064      	movs	r0, #100	; 0x64
    8db8:	3c01      	subs	r4, #1
    8dba:	47b8      	blx	r7
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    8dbc:	2c00      	cmp	r4, #0
    8dbe:	d0e4      	beq.n	8d8a <disk_write+0x106>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8dc0:	2101      	movs	r1, #1
    8dc2:	0028      	movs	r0, r5
    8dc4:	47b0      	blx	r6
		if (d == 0xFF) break;
    8dc6:	782b      	ldrb	r3, [r5, #0]
    8dc8:	2bff      	cmp	r3, #255	; 0xff
    8dca:	d1f4      	bne.n	8db6 <disk_write+0x132>
	d[0] = token;
    8dcc:	23fe      	movs	r3, #254	; 0xfe
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    8dce:	4c0f      	ldr	r4, [pc, #60]	; (8e0c <disk_write+0x188>)
    8dd0:	2101      	movs	r1, #1
    8dd2:	0028      	movs	r0, r5
	d[0] = token;
    8dd4:	702b      	strb	r3, [r5, #0]
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    8dd6:	47a0      	blx	r4
    8dd8:	2180      	movs	r1, #128	; 0x80
    8dda:	4648      	mov	r0, r9
    8ddc:	0089      	lsls	r1, r1, #2
    8dde:	47a0      	blx	r4
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8de0:	2102      	movs	r1, #2
    8de2:	0028      	movs	r0, r5
    8de4:	47b0      	blx	r6
    8de6:	2101      	movs	r1, #1
    8de8:	0028      	movs	r0, r5
    8dea:	47b0      	blx	r6
    8dec:	231f      	movs	r3, #31
    8dee:	782a      	ldrb	r2, [r5, #0]
    8df0:	4013      	ands	r3, r2
    8df2:	3b05      	subs	r3, #5
    8df4:	1e5c      	subs	r4, r3, #1
    8df6:	41a3      	sbcs	r3, r4
    8df8:	b2dc      	uxtb	r4, r3
    8dfa:	e76a      	b.n	8cd2 <disk_write+0x4e>
    8dfc:	20000084 	.word	0x20000084
    8e00:	20000db1 	.word	0x20000db1
    8e04:	00008925 	.word	0x00008925
    8e08:	00002fa9 	.word	0x00002fa9
    8e0c:	00002fc5 	.word	0x00002fc5
    8e10:	000001a9 	.word	0x000001a9
    8e14:	00001388 	.word	0x00001388

00008e18 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE drv,		/* Physical drive nmuber (0) */
BYTE ctrl,		/* Control code */
void *buff		/* Buffer to send/receive control data */
)
{
    8e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e1a:	46c6      	mov	lr, r8
    8e1c:	b500      	push	{lr}
    8e1e:	0015      	movs	r5, r2
    8e20:	b086      	sub	sp, #24
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    8e22:	2403      	movs	r4, #3
	if (drv) return STA_NOINIT;
    8e24:	2800      	cmp	r0, #0
    8e26:	d116      	bne.n	8e56 <disk_ioctl+0x3e>
	return Stat;
    8e28:	4b4f      	ldr	r3, [pc, #316]	; (8f68 <disk_ioctl+0x150>)
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    8e2a:	781b      	ldrb	r3, [r3, #0]
    8e2c:	07db      	lsls	r3, r3, #31
    8e2e:	d412      	bmi.n	8e56 <disk_ioctl+0x3e>

	res = RES_ERROR;
	switch (ctrl) {
    8e30:	2901      	cmp	r1, #1
    8e32:	d031      	beq.n	8e98 <disk_ioctl+0x80>
    8e34:	2900      	cmp	r1, #0
    8e36:	d013      	beq.n	8e60 <disk_ioctl+0x48>
    8e38:	2903      	cmp	r1, #3
    8e3a:	d137      	bne.n	8eac <disk_ioctl+0x94>
			res = RES_OK;
		}
		break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		*(DWORD*)buff = 128;
    8e3c:	2380      	movs	r3, #128	; 0x80
		res = RES_OK;
    8e3e:	2400      	movs	r4, #0
    8e40:	4e4a      	ldr	r6, [pc, #296]	; (8f6c <disk_ioctl+0x154>)
		*(DWORD*)buff = 128;
    8e42:	6013      	str	r3, [r2, #0]
    8e44:	af01      	add	r7, sp, #4
    8e46:	2280      	movs	r2, #128	; 0x80
    8e48:	23c0      	movs	r3, #192	; 0xc0
    8e4a:	0312      	lsls	r2, r2, #12
    8e4c:	05db      	lsls	r3, r3, #23
    8e4e:	619a      	str	r2, [r3, #24]
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8e50:	2101      	movs	r1, #1
    8e52:	0038      	movs	r0, r7
    8e54:	47b0      	blx	r6
	}

	sd_deselect();

	return res;
}
    8e56:	0020      	movs	r0, r4
    8e58:	b006      	add	sp, #24
    8e5a:	bc04      	pop	{r2}
    8e5c:	4690      	mov	r8, r2
    8e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    8e60:	2280      	movs	r2, #128	; 0x80
    8e62:	23c0      	movs	r3, #192	; 0xc0
    8e64:	0312      	lsls	r2, r2, #12
    8e66:	05db      	lsls	r3, r3, #23
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8e68:	af01      	add	r7, sp, #4
    8e6a:	615a      	str	r2, [r3, #20]
    8e6c:	2101      	movs	r1, #1
    8e6e:	0038      	movs	r0, r7
    8e70:	4e3e      	ldr	r6, [pc, #248]	; (8f6c <disk_ioctl+0x154>)
    8e72:	47b0      	blx	r6
		delay_us(n);
    8e74:	4b3e      	ldr	r3, [pc, #248]	; (8f70 <disk_ioctl+0x158>)
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8e76:	4c3f      	ldr	r4, [pc, #252]	; (8f74 <disk_ioctl+0x15c>)
    8e78:	ad02      	add	r5, sp, #8
		delay_us(n);
    8e7a:	4698      	mov	r8, r3
    8e7c:	e004      	b.n	8e88 <disk_ioctl+0x70>
    8e7e:	2064      	movs	r0, #100	; 0x64
    8e80:	3c01      	subs	r4, #1
    8e82:	47c0      	blx	r8
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    8e84:	2c00      	cmp	r4, #0
    8e86:	d015      	beq.n	8eb4 <disk_ioctl+0x9c>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8e88:	2101      	movs	r1, #1
    8e8a:	0028      	movs	r0, r5
    8e8c:	47b0      	blx	r6
		if (d == 0xFF) break;
    8e8e:	782b      	ldrb	r3, [r5, #0]
    8e90:	2bff      	cmp	r3, #255	; 0xff
    8e92:	d1f4      	bne.n	8e7e <disk_ioctl+0x66>
		if (sd_select()) res = RES_OK;
    8e94:	2400      	movs	r4, #0
    8e96:	e7d6      	b.n	8e46 <disk_ioctl+0x2e>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    8e98:	2100      	movs	r1, #0
    8e9a:	2009      	movs	r0, #9
    8e9c:	4b36      	ldr	r3, [pc, #216]	; (8f78 <disk_ioctl+0x160>)
    8e9e:	4798      	blx	r3
    8ea0:	2800      	cmp	r0, #0
    8ea2:	d011      	beq.n	8ec8 <disk_ioctl+0xb0>
	res = RES_ERROR;
    8ea4:	2401      	movs	r4, #1
    8ea6:	af01      	add	r7, sp, #4
    8ea8:	4e30      	ldr	r6, [pc, #192]	; (8f6c <disk_ioctl+0x154>)
    8eaa:	e7cc      	b.n	8e46 <disk_ioctl+0x2e>
		res = RES_PARERR;
    8eac:	2404      	movs	r4, #4
    8eae:	af01      	add	r7, sp, #4
    8eb0:	4e2e      	ldr	r6, [pc, #184]	; (8f6c <disk_ioctl+0x154>)
    8eb2:	e7c8      	b.n	8e46 <disk_ioctl+0x2e>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    8eb4:	2280      	movs	r2, #128	; 0x80
    8eb6:	23c0      	movs	r3, #192	; 0xc0
    8eb8:	0312      	lsls	r2, r2, #12
    8eba:	05db      	lsls	r3, r3, #23
    8ebc:	619a      	str	r2, [r3, #24]
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8ebe:	2101      	movs	r1, #1
    8ec0:	0028      	movs	r0, r5
    8ec2:	47b0      	blx	r6
	res = RES_ERROR;
    8ec4:	2401      	movs	r4, #1
    8ec6:	e7be      	b.n	8e46 <disk_ioctl+0x2e>
    8ec8:	24fa      	movs	r4, #250	; 0xfa
		delay_us(n);
    8eca:	4b29      	ldr	r3, [pc, #164]	; (8f70 <disk_ioctl+0x158>)
    8ecc:	00a4      	lsls	r4, r4, #2
    8ece:	af01      	add	r7, sp, #4
    8ed0:	4e26      	ldr	r6, [pc, #152]	; (8f6c <disk_ioctl+0x154>)
    8ed2:	4698      	mov	r8, r3
    8ed4:	e004      	b.n	8ee0 <disk_ioctl+0xc8>
    8ed6:	2064      	movs	r0, #100	; 0x64
    8ed8:	3c01      	subs	r4, #1
    8eda:	47c0      	blx	r8
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    8edc:	2c00      	cmp	r4, #0
    8ede:	d031      	beq.n	8f44 <disk_ioctl+0x12c>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8ee0:	2101      	movs	r1, #1
    8ee2:	0038      	movs	r0, r7
    8ee4:	47b0      	blx	r6
		if (d[0] != 0xFF) break;
    8ee6:	783b      	ldrb	r3, [r7, #0]
    8ee8:	2bff      	cmp	r3, #255	; 0xff
    8eea:	d0f4      	beq.n	8ed6 <disk_ioctl+0xbe>
	res = RES_ERROR;
    8eec:	2401      	movs	r4, #1
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    8eee:	2bfe      	cmp	r3, #254	; 0xfe
    8ef0:	d1a9      	bne.n	8e46 <disk_ioctl+0x2e>
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    8ef2:	ac02      	add	r4, sp, #8
    8ef4:	2110      	movs	r1, #16
    8ef6:	0020      	movs	r0, r4
    8ef8:	47b0      	blx	r6
    8efa:	2102      	movs	r1, #2
    8efc:	0038      	movs	r0, r7
    8efe:	47b0      	blx	r6
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    8f00:	7823      	ldrb	r3, [r4, #0]
    8f02:	099b      	lsrs	r3, r3, #6
    8f04:	2b01      	cmp	r3, #1
    8f06:	d01f      	beq.n	8f48 <disk_ioctl+0x130>
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    8f08:	21c0      	movs	r1, #192	; 0xc0
    8f0a:	7a23      	ldrb	r3, [r4, #8]
    8f0c:	79e2      	ldrb	r2, [r4, #7]
    8f0e:	099b      	lsrs	r3, r3, #6
    8f10:	0092      	lsls	r2, r2, #2
    8f12:	189b      	adds	r3, r3, r2
    8f14:	79a2      	ldrb	r2, [r4, #6]
    8f16:	0109      	lsls	r1, r1, #4
    8f18:	0292      	lsls	r2, r2, #10
    8f1a:	400a      	ands	r2, r1
    8f1c:	189a      	adds	r2, r3, r2
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    8f1e:	230f      	movs	r3, #15
    8f20:	7961      	ldrb	r1, [r4, #5]
    8f22:	7a60      	ldrb	r0, [r4, #9]
    8f24:	400b      	ands	r3, r1
    8f26:	7aa1      	ldrb	r1, [r4, #10]
    8f28:	0040      	lsls	r0, r0, #1
    8f2a:	09c9      	lsrs	r1, r1, #7
    8f2c:	185b      	adds	r3, r3, r1
    8f2e:	2106      	movs	r1, #6
    8f30:	3302      	adds	r3, #2
    8f32:	4001      	ands	r1, r0
    8f34:	185b      	adds	r3, r3, r1
				*(LBA_t*)buff = cs << (n - 9);
    8f36:	b2db      	uxtb	r3, r3
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    8f38:	3201      	adds	r2, #1
				*(LBA_t*)buff = cs << (n - 9);
    8f3a:	3b09      	subs	r3, #9
    8f3c:	409a      	lsls	r2, r3
			res = RES_OK;
    8f3e:	2400      	movs	r4, #0
				*(LBA_t*)buff = cs << (n - 9);
    8f40:	602a      	str	r2, [r5, #0]
    8f42:	e780      	b.n	8e46 <disk_ioctl+0x2e>
    8f44:	783b      	ldrb	r3, [r7, #0]
    8f46:	e7d1      	b.n	8eec <disk_ioctl+0xd4>
				cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    8f48:	21fc      	movs	r1, #252	; 0xfc
    8f4a:	7a23      	ldrb	r3, [r4, #8]
    8f4c:	7a62      	ldrb	r2, [r4, #9]
    8f4e:	021b      	lsls	r3, r3, #8
    8f50:	189b      	adds	r3, r3, r2
    8f52:	79e2      	ldrb	r2, [r4, #7]
    8f54:	0389      	lsls	r1, r1, #14
    8f56:	0412      	lsls	r2, r2, #16
    8f58:	400a      	ands	r2, r1
    8f5a:	3201      	adds	r2, #1
    8f5c:	189b      	adds	r3, r3, r2
				*(LBA_t*)buff = cs << 10;
    8f5e:	029b      	lsls	r3, r3, #10
    8f60:	602b      	str	r3, [r5, #0]
			res = RES_OK;
    8f62:	2400      	movs	r4, #0
    8f64:	e76f      	b.n	8e46 <disk_ioctl+0x2e>
    8f66:	46c0      	nop			; (mov r8, r8)
    8f68:	20000084 	.word	0x20000084
    8f6c:	00002fa9 	.word	0x00002fa9
    8f70:	000001a9 	.word	0x000001a9
    8f74:	00001388 	.word	0x00001388
    8f78:	00008925 	.word	0x00008925

00008f7c <main>:
int16_t adcVal[2];
ADS1x1x_config_t my_adc;


int main(void)
{
    8f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f7e:	46de      	mov	lr, fp
    8f80:	4657      	mov	r7, sl
    8f82:	464e      	mov	r6, r9
    8f84:	4645      	mov	r5, r8
    8f86:	b5e0      	push	{r5, r6, r7, lr}
    8f88:	4c60      	ldr	r4, [pc, #384]	; (910c <main+0x190>)
	mcu_init();
    8f8a:	4b61      	ldr	r3, [pc, #388]	; (9110 <main+0x194>)
{
    8f8c:	44a5      	add	sp, r4
	mcu_init();
    8f8e:	4798      	blx	r3
    8f90:	23c0      	movs	r3, #192	; 0xc0
    8f92:	2280      	movs	r2, #128	; 0x80
    8f94:	05db      	lsls	r3, r3, #23
    8f96:	03d2      	lsls	r2, r2, #15
    8f98:	619a      	str	r2, [r3, #24]
    8f9a:	2280      	movs	r2, #128	; 0x80
    8f9c:	0052      	lsls	r2, r2, #1
    8f9e:	619a      	str	r2, [r3, #24]
    8fa0:	1892      	adds	r2, r2, r2
    8fa2:	619a      	str	r2, [r3, #24]
	
	gpio_set_pin_level(DLDA, true);
	gpio_set_pin_level(O2, true);
	gpio_set_pin_level(O3, true);
	
	netInit();
    8fa4:	4b5b      	ldr	r3, [pc, #364]	; (9114 <main+0x198>)
    8fa6:	4798      	blx	r3
	//ADS1x1x_set_threshold_lo(&my_adc, 0x0000);
	//ADS1x1x_set_comparator_queue(&my_adc,COMPARATOR_QUEUE_1);
	//ADS1x1x_set_data_rate(&my_adc,DATA_RATE_ADS111x_860);
	//ADS1x1x_set_mode(&my_adc,MODE_CONTINUOUS);
	
	buzer(10);
    8fa8:	4b5b      	ldr	r3, [pc, #364]	; (9118 <main+0x19c>)
    8faa:	200a      	movs	r0, #10
    8fac:	4798      	blx	r3
	
	uint8_t buffer[SD_BUFFER_SIZE];
	uint32_t bytes_read;
	if (sd_init()) {
    8fae:	4b5b      	ldr	r3, [pc, #364]	; (911c <main+0x1a0>)
    8fb0:	4798      	blx	r3
    8fb2:	2800      	cmp	r0, #0
    8fb4:	d17f      	bne.n	90b6 <main+0x13a>
    8fb6:	4c5a      	ldr	r4, [pc, #360]	; (9120 <main+0x1a4>)
	uint8_t addrM = 0x38;
	uint16_t dacValue[2];
	//SET_DAC_CURRENT(0);
	//SET_DAC_VOLTAGE(0);
	//SET_DAC_INIT;
	printf("\r\nHello, SAMD21!\r\n");
    8fb8:	485a      	ldr	r0, [pc, #360]	; (9124 <main+0x1a8>)
    8fba:	47a0      	blx	r4
	
	
	OLED_1in5_rgb_Init();
    8fbc:	4b5a      	ldr	r3, [pc, #360]	; (9128 <main+0x1ac>)
    8fbe:	4798      	blx	r3
	OLED_1in5_rgb_Clear(BLACK);
    8fc0:	4c5a      	ldr	r4, [pc, #360]	; (912c <main+0x1b0>)
    8fc2:	2000      	movs	r0, #0
    8fc4:	47a0      	blx	r4
	Paint_NewImage(OLED_1in5_RGB_WIDTH,OLED_1in5_RGB_HEIGHT, 0, BLACK);
    8fc6:	2200      	movs	r2, #0
    8fc8:	2180      	movs	r1, #128	; 0x80
    8fca:	2300      	movs	r3, #0
    8fcc:	2080      	movs	r0, #128	; 0x80
    8fce:	4d58      	ldr	r5, [pc, #352]	; (9130 <main+0x1b4>)
    8fd0:	47a8      	blx	r5
	Paint_SetClearFuntion(OLED_1in5_rgb_Clear);
    8fd2:	0020      	movs	r0, r4
    8fd4:	4b57      	ldr	r3, [pc, #348]	; (9134 <main+0x1b8>)
    8fd6:	4798      	blx	r3
	Paint_SetDisplayFuntion(OLED_1in5_DrawPaint);	
    8fd8:	4857      	ldr	r0, [pc, #348]	; (9138 <main+0x1bc>)
    8fda:	4b58      	ldr	r3, [pc, #352]	; (913c <main+0x1c0>)
    8fdc:	4798      	blx	r3
	
	Paint_DrawString_EN(0, 10, "OLED TEST" ,&Font16,  BLACK, RED);
    8fde:	23f8      	movs	r3, #248	; 0xf8
    8fe0:	2700      	movs	r7, #0
    8fe2:	4e57      	ldr	r6, [pc, #348]	; (9140 <main+0x1c4>)
    8fe4:	4d57      	ldr	r5, [pc, #348]	; (9144 <main+0x1c8>)
    8fe6:	021b      	lsls	r3, r3, #8
    8fe8:	4c57      	ldr	r4, [pc, #348]	; (9148 <main+0x1cc>)
    8fea:	002a      	movs	r2, r5
    8fec:	9301      	str	r3, [sp, #4]
    8fee:	9700      	str	r7, [sp, #0]
    8ff0:	0033      	movs	r3, r6
    8ff2:	210a      	movs	r1, #10
    8ff4:	2000      	movs	r0, #0
    8ff6:	47a0      	blx	r4
	Paint_DrawString_EN(0, 25, "OLED TEST" ,&Font16,  BLACK, GREEN);
    8ff8:	23fc      	movs	r3, #252	; 0xfc
    8ffa:	00db      	lsls	r3, r3, #3
    8ffc:	002a      	movs	r2, r5
    8ffe:	9301      	str	r3, [sp, #4]
    9000:	9700      	str	r7, [sp, #0]
    9002:	0033      	movs	r3, r6
    9004:	2119      	movs	r1, #25
    9006:	2000      	movs	r0, #0
    9008:	47a0      	blx	r4
	Paint_DrawString_EN(0, 40, "OLED TEST" ,&Font16,  BLACK, BLUE);
    900a:	231f      	movs	r3, #31
    900c:	002a      	movs	r2, r5
    900e:	9301      	str	r3, [sp, #4]
    9010:	9700      	str	r7, [sp, #0]
    9012:	0033      	movs	r3, r6
    9014:	2128      	movs	r1, #40	; 0x28
    9016:	2000      	movs	r0, #0
    9018:	47a0      	blx	r4
	Paint_DrawString_EN(0, 55, "OLED TEST" ,&Font16,  BLACK, YELLOW);
    901a:	002a      	movs	r2, r5
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    901c:	25c0      	movs	r5, #192	; 0xc0
    901e:	4b4b      	ldr	r3, [pc, #300]	; (914c <main+0x1d0>)
    9020:	9700      	str	r7, [sp, #0]
    9022:	9301      	str	r3, [sp, #4]
    9024:	2137      	movs	r1, #55	; 0x37
    9026:	0033      	movs	r3, r6
    9028:	2000      	movs	r0, #0
    902a:	47a0      	blx	r4
    902c:	4b48      	ldr	r3, [pc, #288]	; (9150 <main+0x1d4>)
    902e:	4e49      	ldr	r6, [pc, #292]	; (9154 <main+0x1d8>)
    9030:	469b      	mov	fp, r3
    9032:	4b49      	ldr	r3, [pc, #292]	; (9158 <main+0x1dc>)
    9034:	4f49      	ldr	r7, [pc, #292]	; (915c <main+0x1e0>)
    9036:	469a      	mov	sl, r3
    9038:	4b49      	ldr	r3, [pc, #292]	; (9160 <main+0x1e4>)
    903a:	05ed      	lsls	r5, r5, #23
    903c:	4699      	mov	r9, r3
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    903e:	4b49      	ldr	r3, [pc, #292]	; (9164 <main+0x1e8>)
    9040:	4698      	mov	r8, r3
    9042:	e00f      	b.n	9064 <main+0xe8>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    9044:	2380      	movs	r3, #128	; 0x80
    9046:	03db      	lsls	r3, r3, #15
    9048:	61ab      	str	r3, [r5, #24]
		
		//if(SerialReady(&uartRxBuff)){
		//	SerialWrite(&uartRxBuff);
		//}
		
		if (SerialReady(&uartRxBuff) == 1) {
    904a:	0030      	movs	r0, r6
    904c:	47b8      	blx	r7
    904e:	2801      	cmp	r0, #1
    9050:	d01f      	beq.n	9092 <main+0x116>
			SerialWrite(&uartRxBuff);
			} else if (SerialReady(&uartRxBuff) == 2) {
    9052:	0030      	movs	r0, r6
    9054:	47b8      	blx	r7
    9056:	2802      	cmp	r0, #2
    9058:	d029      	beq.n	90ae <main+0x132>
			SerialWrite("Buffer Overflow");
		}
		
		if(adcRequest() == 1){
    905a:	47c8      	blx	r9
    905c:	2801      	cmp	r0, #1
    905e:	d01e      	beq.n	909e <main+0x122>
			voltDMM = adcVal[0] * 0.002561492;// * 0.0025496554;
			ampDMM = adcVal[1] - 3691;
			ampDMM = ( ampDMM < 0) ?  0 : (ampDMM  * 0.000203718);
			*/
		}
		netHandler();
    9060:	4b41      	ldr	r3, [pc, #260]	; (9168 <main+0x1ec>)
    9062:	4798      	blx	r3
	CRITICAL_SECTION_ENTER();
    9064:	a803      	add	r0, sp, #12
    9066:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    9068:	2380      	movs	r3, #128	; 0x80
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    906a:	4642      	mov	r2, r8
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    906c:	58ec      	ldr	r4, [r5, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    906e:	3320      	adds	r3, #32
    9070:	58d2      	ldr	r2, [r2, r3]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    9072:	3b10      	subs	r3, #16
    9074:	58eb      	ldr	r3, [r5, r3]
	CRITICAL_SECTION_LEAVE();
    9076:	a803      	add	r0, sp, #12
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    9078:	4053      	eors	r3, r2
    907a:	401c      	ands	r4, r3
    907c:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    907e:	47d0      	blx	sl
	if (level) {
    9080:	05e3      	lsls	r3, r4, #23
    9082:	d5df      	bpl.n	9044 <main+0xc8>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    9084:	2380      	movs	r3, #128	; 0x80
    9086:	03db      	lsls	r3, r3, #15
    9088:	616b      	str	r3, [r5, #20]
		if (SerialReady(&uartRxBuff) == 1) {
    908a:	0030      	movs	r0, r6
    908c:	47b8      	blx	r7
    908e:	2801      	cmp	r0, #1
    9090:	d1df      	bne.n	9052 <main+0xd6>
			SerialWrite(&uartRxBuff);
    9092:	0030      	movs	r0, r6
    9094:	4b35      	ldr	r3, [pc, #212]	; (916c <main+0x1f0>)
    9096:	4798      	blx	r3
		if(adcRequest() == 1){
    9098:	47c8      	blx	r9
    909a:	2801      	cmp	r0, #1
    909c:	d1e0      	bne.n	9060 <main+0xe4>
			sprintf(debugSerialBuffer, "BUFF LEN=%d", rxBytesGet());
    909e:	4b34      	ldr	r3, [pc, #208]	; (9170 <main+0x1f4>)
    90a0:	4798      	blx	r3
    90a2:	4934      	ldr	r1, [pc, #208]	; (9174 <main+0x1f8>)
    90a4:	0002      	movs	r2, r0
    90a6:	4b34      	ldr	r3, [pc, #208]	; (9178 <main+0x1fc>)
    90a8:	4834      	ldr	r0, [pc, #208]	; (917c <main+0x200>)
    90aa:	4798      	blx	r3
    90ac:	e7d8      	b.n	9060 <main+0xe4>
			SerialWrite("Buffer Overflow");
    90ae:	4834      	ldr	r0, [pc, #208]	; (9180 <main+0x204>)
    90b0:	4b2e      	ldr	r3, [pc, #184]	; (916c <main+0x1f0>)
    90b2:	4798      	blx	r3
    90b4:	e7d1      	b.n	905a <main+0xde>
		sd_list_files("/");
    90b6:	4b33      	ldr	r3, [pc, #204]	; (9184 <main+0x208>)
    90b8:	4833      	ldr	r0, [pc, #204]	; (9188 <main+0x20c>)
    90ba:	4798      	blx	r3
		sd_print_file("test.txt");
    90bc:	4c33      	ldr	r4, [pc, #204]	; (918c <main+0x210>)
    90be:	4b34      	ldr	r3, [pc, #208]	; (9190 <main+0x214>)
    90c0:	0020      	movs	r0, r4
    90c2:	4798      	blx	r3
		if (sd_write_line("test.txt", line, strlen(line))) {
    90c4:	2225      	movs	r2, #37	; 0x25
    90c6:	4933      	ldr	r1, [pc, #204]	; (9194 <main+0x218>)
    90c8:	0020      	movs	r0, r4
    90ca:	4b33      	ldr	r3, [pc, #204]	; (9198 <main+0x21c>)
    90cc:	4798      	blx	r3
    90ce:	2800      	cmp	r0, #0
    90d0:	d118      	bne.n	9104 <main+0x188>
    90d2:	4c13      	ldr	r4, [pc, #76]	; (9120 <main+0x1a4>)
    90d4:	4b31      	ldr	r3, [pc, #196]	; (919c <main+0x220>)
    90d6:	4f32      	ldr	r7, [pc, #200]	; (91a0 <main+0x224>)
    90d8:	4698      	mov	r8, r3
    90da:	4e32      	ldr	r6, [pc, #200]	; (91a4 <main+0x228>)
    90dc:	4d32      	ldr	r5, [pc, #200]	; (91a8 <main+0x22c>)
    90de:	e006      	b.n	90ee <main+0x172>
			if (result == 0 && bytes_read > 0) {
    90e0:	9902      	ldr	r1, [sp, #8]
    90e2:	2900      	cmp	r1, #0
    90e4:	d00b      	beq.n	90fe <main+0x182>
				printf("Read %lu bytes: %.*s\r\n", bytes_read, bytes_read, buffer);
    90e6:	ab04      	add	r3, sp, #16
    90e8:	000a      	movs	r2, r1
    90ea:	0030      	movs	r0, r6
    90ec:	47a8      	blx	r5
			int result = sd_read_file_chunk("config.txt", buffer, SD_BUFFER_SIZE, &bytes_read);
    90ee:	2280      	movs	r2, #128	; 0x80
    90f0:	ab02      	add	r3, sp, #8
    90f2:	0092      	lsls	r2, r2, #2
    90f4:	a904      	add	r1, sp, #16
    90f6:	4640      	mov	r0, r8
    90f8:	47b8      	blx	r7
			if (result == 0 && bytes_read > 0) {
    90fa:	2800      	cmp	r0, #0
    90fc:	d0f0      	beq.n	90e0 <main+0x164>
		sd_close_file();
    90fe:	4b2b      	ldr	r3, [pc, #172]	; (91ac <main+0x230>)
    9100:	4798      	blx	r3
    9102:	e759      	b.n	8fb8 <main+0x3c>
			printf("Line written successfully.\r\n");
    9104:	4c06      	ldr	r4, [pc, #24]	; (9120 <main+0x1a4>)
    9106:	482a      	ldr	r0, [pc, #168]	; (91b0 <main+0x234>)
    9108:	47a0      	blx	r4
    910a:	e7e3      	b.n	90d4 <main+0x158>
    910c:	fffffdec 	.word	0xfffffdec
    9110:	00003211 	.word	0x00003211
    9114:	000034b5 	.word	0x000034b5
    9118:	0000294d 	.word	0x0000294d
    911c:	00008611 	.word	0x00008611
    9120:	0000b7f5 	.word	0x0000b7f5
    9124:	00018a3c 	.word	0x00018a3c
    9128:	000025d9 	.word	0x000025d9
    912c:	0000262d 	.word	0x0000262d
    9130:	0000196d 	.word	0x0000196d
    9134:	000019b5 	.word	0x000019b5
    9138:	00002735 	.word	0x00002735
    913c:	000019c1 	.word	0x000019c1
    9140:	20000000 	.word	0x20000000
    9144:	00018a50 	.word	0x00018a50
    9148:	00001cd9 	.word	0x00001cd9
    914c:	0000ffe0 	.word	0x0000ffe0
    9150:	0000018d 	.word	0x0000018d
    9154:	20000de8 	.word	0x20000de8
    9158:	0000019d 	.word	0x0000019d
    915c:	000030b9 	.word	0x000030b9
    9160:	000034a5 	.word	0x000034a5
    9164:	41004400 	.word	0x41004400
    9168:	00003589 	.word	0x00003589
    916c:	00003331 	.word	0x00003331
    9170:	000030ad 	.word	0x000030ad
    9174:	00018a6c 	.word	0x00018a6c
    9178:	0000b8b1 	.word	0x0000b8b1
    917c:	20000ea8 	.word	0x20000ea8
    9180:	00018a5c 	.word	0x00018a5c
    9184:	000087bd 	.word	0x000087bd
    9188:	000189c4 	.word	0x000189c4
    918c:	000189c8 	.word	0x000189c8
    9190:	0000885d 	.word	0x0000885d
    9194:	000189d4 	.word	0x000189d4
    9198:	0000864d 	.word	0x0000864d
    919c:	00018a18 	.word	0x00018a18
    91a0:	000086ad 	.word	0x000086ad
    91a4:	00018a24 	.word	0x00018a24
    91a8:	0000b731 	.word	0x0000b731
    91ac:	0000878d 	.word	0x0000878d
    91b0:	000189fc 	.word	0x000189fc

000091b4 <__udivsi3>:
    91b4:	2200      	movs	r2, #0
    91b6:	0843      	lsrs	r3, r0, #1
    91b8:	428b      	cmp	r3, r1
    91ba:	d374      	bcc.n	92a6 <__udivsi3+0xf2>
    91bc:	0903      	lsrs	r3, r0, #4
    91be:	428b      	cmp	r3, r1
    91c0:	d35f      	bcc.n	9282 <__udivsi3+0xce>
    91c2:	0a03      	lsrs	r3, r0, #8
    91c4:	428b      	cmp	r3, r1
    91c6:	d344      	bcc.n	9252 <__udivsi3+0x9e>
    91c8:	0b03      	lsrs	r3, r0, #12
    91ca:	428b      	cmp	r3, r1
    91cc:	d328      	bcc.n	9220 <__udivsi3+0x6c>
    91ce:	0c03      	lsrs	r3, r0, #16
    91d0:	428b      	cmp	r3, r1
    91d2:	d30d      	bcc.n	91f0 <__udivsi3+0x3c>
    91d4:	22ff      	movs	r2, #255	; 0xff
    91d6:	0209      	lsls	r1, r1, #8
    91d8:	ba12      	rev	r2, r2
    91da:	0c03      	lsrs	r3, r0, #16
    91dc:	428b      	cmp	r3, r1
    91de:	d302      	bcc.n	91e6 <__udivsi3+0x32>
    91e0:	1212      	asrs	r2, r2, #8
    91e2:	0209      	lsls	r1, r1, #8
    91e4:	d065      	beq.n	92b2 <__udivsi3+0xfe>
    91e6:	0b03      	lsrs	r3, r0, #12
    91e8:	428b      	cmp	r3, r1
    91ea:	d319      	bcc.n	9220 <__udivsi3+0x6c>
    91ec:	e000      	b.n	91f0 <__udivsi3+0x3c>
    91ee:	0a09      	lsrs	r1, r1, #8
    91f0:	0bc3      	lsrs	r3, r0, #15
    91f2:	428b      	cmp	r3, r1
    91f4:	d301      	bcc.n	91fa <__udivsi3+0x46>
    91f6:	03cb      	lsls	r3, r1, #15
    91f8:	1ac0      	subs	r0, r0, r3
    91fa:	4152      	adcs	r2, r2
    91fc:	0b83      	lsrs	r3, r0, #14
    91fe:	428b      	cmp	r3, r1
    9200:	d301      	bcc.n	9206 <__udivsi3+0x52>
    9202:	038b      	lsls	r3, r1, #14
    9204:	1ac0      	subs	r0, r0, r3
    9206:	4152      	adcs	r2, r2
    9208:	0b43      	lsrs	r3, r0, #13
    920a:	428b      	cmp	r3, r1
    920c:	d301      	bcc.n	9212 <__udivsi3+0x5e>
    920e:	034b      	lsls	r3, r1, #13
    9210:	1ac0      	subs	r0, r0, r3
    9212:	4152      	adcs	r2, r2
    9214:	0b03      	lsrs	r3, r0, #12
    9216:	428b      	cmp	r3, r1
    9218:	d301      	bcc.n	921e <__udivsi3+0x6a>
    921a:	030b      	lsls	r3, r1, #12
    921c:	1ac0      	subs	r0, r0, r3
    921e:	4152      	adcs	r2, r2
    9220:	0ac3      	lsrs	r3, r0, #11
    9222:	428b      	cmp	r3, r1
    9224:	d301      	bcc.n	922a <__udivsi3+0x76>
    9226:	02cb      	lsls	r3, r1, #11
    9228:	1ac0      	subs	r0, r0, r3
    922a:	4152      	adcs	r2, r2
    922c:	0a83      	lsrs	r3, r0, #10
    922e:	428b      	cmp	r3, r1
    9230:	d301      	bcc.n	9236 <__udivsi3+0x82>
    9232:	028b      	lsls	r3, r1, #10
    9234:	1ac0      	subs	r0, r0, r3
    9236:	4152      	adcs	r2, r2
    9238:	0a43      	lsrs	r3, r0, #9
    923a:	428b      	cmp	r3, r1
    923c:	d301      	bcc.n	9242 <__udivsi3+0x8e>
    923e:	024b      	lsls	r3, r1, #9
    9240:	1ac0      	subs	r0, r0, r3
    9242:	4152      	adcs	r2, r2
    9244:	0a03      	lsrs	r3, r0, #8
    9246:	428b      	cmp	r3, r1
    9248:	d301      	bcc.n	924e <__udivsi3+0x9a>
    924a:	020b      	lsls	r3, r1, #8
    924c:	1ac0      	subs	r0, r0, r3
    924e:	4152      	adcs	r2, r2
    9250:	d2cd      	bcs.n	91ee <__udivsi3+0x3a>
    9252:	09c3      	lsrs	r3, r0, #7
    9254:	428b      	cmp	r3, r1
    9256:	d301      	bcc.n	925c <__udivsi3+0xa8>
    9258:	01cb      	lsls	r3, r1, #7
    925a:	1ac0      	subs	r0, r0, r3
    925c:	4152      	adcs	r2, r2
    925e:	0983      	lsrs	r3, r0, #6
    9260:	428b      	cmp	r3, r1
    9262:	d301      	bcc.n	9268 <__udivsi3+0xb4>
    9264:	018b      	lsls	r3, r1, #6
    9266:	1ac0      	subs	r0, r0, r3
    9268:	4152      	adcs	r2, r2
    926a:	0943      	lsrs	r3, r0, #5
    926c:	428b      	cmp	r3, r1
    926e:	d301      	bcc.n	9274 <__udivsi3+0xc0>
    9270:	014b      	lsls	r3, r1, #5
    9272:	1ac0      	subs	r0, r0, r3
    9274:	4152      	adcs	r2, r2
    9276:	0903      	lsrs	r3, r0, #4
    9278:	428b      	cmp	r3, r1
    927a:	d301      	bcc.n	9280 <__udivsi3+0xcc>
    927c:	010b      	lsls	r3, r1, #4
    927e:	1ac0      	subs	r0, r0, r3
    9280:	4152      	adcs	r2, r2
    9282:	08c3      	lsrs	r3, r0, #3
    9284:	428b      	cmp	r3, r1
    9286:	d301      	bcc.n	928c <__udivsi3+0xd8>
    9288:	00cb      	lsls	r3, r1, #3
    928a:	1ac0      	subs	r0, r0, r3
    928c:	4152      	adcs	r2, r2
    928e:	0883      	lsrs	r3, r0, #2
    9290:	428b      	cmp	r3, r1
    9292:	d301      	bcc.n	9298 <__udivsi3+0xe4>
    9294:	008b      	lsls	r3, r1, #2
    9296:	1ac0      	subs	r0, r0, r3
    9298:	4152      	adcs	r2, r2
    929a:	0843      	lsrs	r3, r0, #1
    929c:	428b      	cmp	r3, r1
    929e:	d301      	bcc.n	92a4 <__udivsi3+0xf0>
    92a0:	004b      	lsls	r3, r1, #1
    92a2:	1ac0      	subs	r0, r0, r3
    92a4:	4152      	adcs	r2, r2
    92a6:	1a41      	subs	r1, r0, r1
    92a8:	d200      	bcs.n	92ac <__udivsi3+0xf8>
    92aa:	4601      	mov	r1, r0
    92ac:	4152      	adcs	r2, r2
    92ae:	4610      	mov	r0, r2
    92b0:	4770      	bx	lr
    92b2:	e7ff      	b.n	92b4 <__udivsi3+0x100>
    92b4:	b501      	push	{r0, lr}
    92b6:	2000      	movs	r0, #0
    92b8:	f000 f8f0 	bl	949c <__aeabi_idiv0>
    92bc:	bd02      	pop	{r1, pc}
    92be:	46c0      	nop			; (mov r8, r8)

000092c0 <__aeabi_uidivmod>:
    92c0:	2900      	cmp	r1, #0
    92c2:	d0f7      	beq.n	92b4 <__udivsi3+0x100>
    92c4:	e776      	b.n	91b4 <__udivsi3>
    92c6:	4770      	bx	lr

000092c8 <__divsi3>:
    92c8:	4603      	mov	r3, r0
    92ca:	430b      	orrs	r3, r1
    92cc:	d47f      	bmi.n	93ce <__divsi3+0x106>
    92ce:	2200      	movs	r2, #0
    92d0:	0843      	lsrs	r3, r0, #1
    92d2:	428b      	cmp	r3, r1
    92d4:	d374      	bcc.n	93c0 <__divsi3+0xf8>
    92d6:	0903      	lsrs	r3, r0, #4
    92d8:	428b      	cmp	r3, r1
    92da:	d35f      	bcc.n	939c <__divsi3+0xd4>
    92dc:	0a03      	lsrs	r3, r0, #8
    92de:	428b      	cmp	r3, r1
    92e0:	d344      	bcc.n	936c <__divsi3+0xa4>
    92e2:	0b03      	lsrs	r3, r0, #12
    92e4:	428b      	cmp	r3, r1
    92e6:	d328      	bcc.n	933a <__divsi3+0x72>
    92e8:	0c03      	lsrs	r3, r0, #16
    92ea:	428b      	cmp	r3, r1
    92ec:	d30d      	bcc.n	930a <__divsi3+0x42>
    92ee:	22ff      	movs	r2, #255	; 0xff
    92f0:	0209      	lsls	r1, r1, #8
    92f2:	ba12      	rev	r2, r2
    92f4:	0c03      	lsrs	r3, r0, #16
    92f6:	428b      	cmp	r3, r1
    92f8:	d302      	bcc.n	9300 <__divsi3+0x38>
    92fa:	1212      	asrs	r2, r2, #8
    92fc:	0209      	lsls	r1, r1, #8
    92fe:	d065      	beq.n	93cc <__divsi3+0x104>
    9300:	0b03      	lsrs	r3, r0, #12
    9302:	428b      	cmp	r3, r1
    9304:	d319      	bcc.n	933a <__divsi3+0x72>
    9306:	e000      	b.n	930a <__divsi3+0x42>
    9308:	0a09      	lsrs	r1, r1, #8
    930a:	0bc3      	lsrs	r3, r0, #15
    930c:	428b      	cmp	r3, r1
    930e:	d301      	bcc.n	9314 <__divsi3+0x4c>
    9310:	03cb      	lsls	r3, r1, #15
    9312:	1ac0      	subs	r0, r0, r3
    9314:	4152      	adcs	r2, r2
    9316:	0b83      	lsrs	r3, r0, #14
    9318:	428b      	cmp	r3, r1
    931a:	d301      	bcc.n	9320 <__divsi3+0x58>
    931c:	038b      	lsls	r3, r1, #14
    931e:	1ac0      	subs	r0, r0, r3
    9320:	4152      	adcs	r2, r2
    9322:	0b43      	lsrs	r3, r0, #13
    9324:	428b      	cmp	r3, r1
    9326:	d301      	bcc.n	932c <__divsi3+0x64>
    9328:	034b      	lsls	r3, r1, #13
    932a:	1ac0      	subs	r0, r0, r3
    932c:	4152      	adcs	r2, r2
    932e:	0b03      	lsrs	r3, r0, #12
    9330:	428b      	cmp	r3, r1
    9332:	d301      	bcc.n	9338 <__divsi3+0x70>
    9334:	030b      	lsls	r3, r1, #12
    9336:	1ac0      	subs	r0, r0, r3
    9338:	4152      	adcs	r2, r2
    933a:	0ac3      	lsrs	r3, r0, #11
    933c:	428b      	cmp	r3, r1
    933e:	d301      	bcc.n	9344 <__divsi3+0x7c>
    9340:	02cb      	lsls	r3, r1, #11
    9342:	1ac0      	subs	r0, r0, r3
    9344:	4152      	adcs	r2, r2
    9346:	0a83      	lsrs	r3, r0, #10
    9348:	428b      	cmp	r3, r1
    934a:	d301      	bcc.n	9350 <__divsi3+0x88>
    934c:	028b      	lsls	r3, r1, #10
    934e:	1ac0      	subs	r0, r0, r3
    9350:	4152      	adcs	r2, r2
    9352:	0a43      	lsrs	r3, r0, #9
    9354:	428b      	cmp	r3, r1
    9356:	d301      	bcc.n	935c <__divsi3+0x94>
    9358:	024b      	lsls	r3, r1, #9
    935a:	1ac0      	subs	r0, r0, r3
    935c:	4152      	adcs	r2, r2
    935e:	0a03      	lsrs	r3, r0, #8
    9360:	428b      	cmp	r3, r1
    9362:	d301      	bcc.n	9368 <__divsi3+0xa0>
    9364:	020b      	lsls	r3, r1, #8
    9366:	1ac0      	subs	r0, r0, r3
    9368:	4152      	adcs	r2, r2
    936a:	d2cd      	bcs.n	9308 <__divsi3+0x40>
    936c:	09c3      	lsrs	r3, r0, #7
    936e:	428b      	cmp	r3, r1
    9370:	d301      	bcc.n	9376 <__divsi3+0xae>
    9372:	01cb      	lsls	r3, r1, #7
    9374:	1ac0      	subs	r0, r0, r3
    9376:	4152      	adcs	r2, r2
    9378:	0983      	lsrs	r3, r0, #6
    937a:	428b      	cmp	r3, r1
    937c:	d301      	bcc.n	9382 <__divsi3+0xba>
    937e:	018b      	lsls	r3, r1, #6
    9380:	1ac0      	subs	r0, r0, r3
    9382:	4152      	adcs	r2, r2
    9384:	0943      	lsrs	r3, r0, #5
    9386:	428b      	cmp	r3, r1
    9388:	d301      	bcc.n	938e <__divsi3+0xc6>
    938a:	014b      	lsls	r3, r1, #5
    938c:	1ac0      	subs	r0, r0, r3
    938e:	4152      	adcs	r2, r2
    9390:	0903      	lsrs	r3, r0, #4
    9392:	428b      	cmp	r3, r1
    9394:	d301      	bcc.n	939a <__divsi3+0xd2>
    9396:	010b      	lsls	r3, r1, #4
    9398:	1ac0      	subs	r0, r0, r3
    939a:	4152      	adcs	r2, r2
    939c:	08c3      	lsrs	r3, r0, #3
    939e:	428b      	cmp	r3, r1
    93a0:	d301      	bcc.n	93a6 <__divsi3+0xde>
    93a2:	00cb      	lsls	r3, r1, #3
    93a4:	1ac0      	subs	r0, r0, r3
    93a6:	4152      	adcs	r2, r2
    93a8:	0883      	lsrs	r3, r0, #2
    93aa:	428b      	cmp	r3, r1
    93ac:	d301      	bcc.n	93b2 <__divsi3+0xea>
    93ae:	008b      	lsls	r3, r1, #2
    93b0:	1ac0      	subs	r0, r0, r3
    93b2:	4152      	adcs	r2, r2
    93b4:	0843      	lsrs	r3, r0, #1
    93b6:	428b      	cmp	r3, r1
    93b8:	d301      	bcc.n	93be <__divsi3+0xf6>
    93ba:	004b      	lsls	r3, r1, #1
    93bc:	1ac0      	subs	r0, r0, r3
    93be:	4152      	adcs	r2, r2
    93c0:	1a41      	subs	r1, r0, r1
    93c2:	d200      	bcs.n	93c6 <__divsi3+0xfe>
    93c4:	4601      	mov	r1, r0
    93c6:	4152      	adcs	r2, r2
    93c8:	4610      	mov	r0, r2
    93ca:	4770      	bx	lr
    93cc:	e05d      	b.n	948a <__divsi3+0x1c2>
    93ce:	0fca      	lsrs	r2, r1, #31
    93d0:	d000      	beq.n	93d4 <__divsi3+0x10c>
    93d2:	4249      	negs	r1, r1
    93d4:	1003      	asrs	r3, r0, #32
    93d6:	d300      	bcc.n	93da <__divsi3+0x112>
    93d8:	4240      	negs	r0, r0
    93da:	4053      	eors	r3, r2
    93dc:	2200      	movs	r2, #0
    93de:	469c      	mov	ip, r3
    93e0:	0903      	lsrs	r3, r0, #4
    93e2:	428b      	cmp	r3, r1
    93e4:	d32d      	bcc.n	9442 <__divsi3+0x17a>
    93e6:	0a03      	lsrs	r3, r0, #8
    93e8:	428b      	cmp	r3, r1
    93ea:	d312      	bcc.n	9412 <__divsi3+0x14a>
    93ec:	22fc      	movs	r2, #252	; 0xfc
    93ee:	0189      	lsls	r1, r1, #6
    93f0:	ba12      	rev	r2, r2
    93f2:	0a03      	lsrs	r3, r0, #8
    93f4:	428b      	cmp	r3, r1
    93f6:	d30c      	bcc.n	9412 <__divsi3+0x14a>
    93f8:	0189      	lsls	r1, r1, #6
    93fa:	1192      	asrs	r2, r2, #6
    93fc:	428b      	cmp	r3, r1
    93fe:	d308      	bcc.n	9412 <__divsi3+0x14a>
    9400:	0189      	lsls	r1, r1, #6
    9402:	1192      	asrs	r2, r2, #6
    9404:	428b      	cmp	r3, r1
    9406:	d304      	bcc.n	9412 <__divsi3+0x14a>
    9408:	0189      	lsls	r1, r1, #6
    940a:	d03a      	beq.n	9482 <__divsi3+0x1ba>
    940c:	1192      	asrs	r2, r2, #6
    940e:	e000      	b.n	9412 <__divsi3+0x14a>
    9410:	0989      	lsrs	r1, r1, #6
    9412:	09c3      	lsrs	r3, r0, #7
    9414:	428b      	cmp	r3, r1
    9416:	d301      	bcc.n	941c <__divsi3+0x154>
    9418:	01cb      	lsls	r3, r1, #7
    941a:	1ac0      	subs	r0, r0, r3
    941c:	4152      	adcs	r2, r2
    941e:	0983      	lsrs	r3, r0, #6
    9420:	428b      	cmp	r3, r1
    9422:	d301      	bcc.n	9428 <__divsi3+0x160>
    9424:	018b      	lsls	r3, r1, #6
    9426:	1ac0      	subs	r0, r0, r3
    9428:	4152      	adcs	r2, r2
    942a:	0943      	lsrs	r3, r0, #5
    942c:	428b      	cmp	r3, r1
    942e:	d301      	bcc.n	9434 <__divsi3+0x16c>
    9430:	014b      	lsls	r3, r1, #5
    9432:	1ac0      	subs	r0, r0, r3
    9434:	4152      	adcs	r2, r2
    9436:	0903      	lsrs	r3, r0, #4
    9438:	428b      	cmp	r3, r1
    943a:	d301      	bcc.n	9440 <__divsi3+0x178>
    943c:	010b      	lsls	r3, r1, #4
    943e:	1ac0      	subs	r0, r0, r3
    9440:	4152      	adcs	r2, r2
    9442:	08c3      	lsrs	r3, r0, #3
    9444:	428b      	cmp	r3, r1
    9446:	d301      	bcc.n	944c <__divsi3+0x184>
    9448:	00cb      	lsls	r3, r1, #3
    944a:	1ac0      	subs	r0, r0, r3
    944c:	4152      	adcs	r2, r2
    944e:	0883      	lsrs	r3, r0, #2
    9450:	428b      	cmp	r3, r1
    9452:	d301      	bcc.n	9458 <__divsi3+0x190>
    9454:	008b      	lsls	r3, r1, #2
    9456:	1ac0      	subs	r0, r0, r3
    9458:	4152      	adcs	r2, r2
    945a:	d2d9      	bcs.n	9410 <__divsi3+0x148>
    945c:	0843      	lsrs	r3, r0, #1
    945e:	428b      	cmp	r3, r1
    9460:	d301      	bcc.n	9466 <__divsi3+0x19e>
    9462:	004b      	lsls	r3, r1, #1
    9464:	1ac0      	subs	r0, r0, r3
    9466:	4152      	adcs	r2, r2
    9468:	1a41      	subs	r1, r0, r1
    946a:	d200      	bcs.n	946e <__divsi3+0x1a6>
    946c:	4601      	mov	r1, r0
    946e:	4663      	mov	r3, ip
    9470:	4152      	adcs	r2, r2
    9472:	105b      	asrs	r3, r3, #1
    9474:	4610      	mov	r0, r2
    9476:	d301      	bcc.n	947c <__divsi3+0x1b4>
    9478:	4240      	negs	r0, r0
    947a:	2b00      	cmp	r3, #0
    947c:	d500      	bpl.n	9480 <__divsi3+0x1b8>
    947e:	4249      	negs	r1, r1
    9480:	4770      	bx	lr
    9482:	4663      	mov	r3, ip
    9484:	105b      	asrs	r3, r3, #1
    9486:	d300      	bcc.n	948a <__divsi3+0x1c2>
    9488:	4240      	negs	r0, r0
    948a:	b501      	push	{r0, lr}
    948c:	2000      	movs	r0, #0
    948e:	f000 f805 	bl	949c <__aeabi_idiv0>
    9492:	bd02      	pop	{r1, pc}

00009494 <__aeabi_idivmod>:
    9494:	2900      	cmp	r1, #0
    9496:	d0f8      	beq.n	948a <__divsi3+0x1c2>
    9498:	e716      	b.n	92c8 <__divsi3>
    949a:	4770      	bx	lr

0000949c <__aeabi_idiv0>:
    949c:	4770      	bx	lr
    949e:	46c0      	nop			; (mov r8, r8)

000094a0 <__aeabi_uldivmod>:
    94a0:	2b00      	cmp	r3, #0
    94a2:	d111      	bne.n	94c8 <__aeabi_uldivmod+0x28>
    94a4:	2a00      	cmp	r2, #0
    94a6:	d10f      	bne.n	94c8 <__aeabi_uldivmod+0x28>
    94a8:	2900      	cmp	r1, #0
    94aa:	d100      	bne.n	94ae <__aeabi_uldivmod+0xe>
    94ac:	2800      	cmp	r0, #0
    94ae:	d002      	beq.n	94b6 <__aeabi_uldivmod+0x16>
    94b0:	2100      	movs	r1, #0
    94b2:	43c9      	mvns	r1, r1
    94b4:	1c08      	adds	r0, r1, #0
    94b6:	b407      	push	{r0, r1, r2}
    94b8:	4802      	ldr	r0, [pc, #8]	; (94c4 <__aeabi_uldivmod+0x24>)
    94ba:	a102      	add	r1, pc, #8	; (adr r1, 94c4 <__aeabi_uldivmod+0x24>)
    94bc:	1840      	adds	r0, r0, r1
    94be:	9002      	str	r0, [sp, #8]
    94c0:	bd03      	pop	{r0, r1, pc}
    94c2:	46c0      	nop			; (mov r8, r8)
    94c4:	ffffffd9 	.word	0xffffffd9
    94c8:	b403      	push	{r0, r1}
    94ca:	4668      	mov	r0, sp
    94cc:	b501      	push	{r0, lr}
    94ce:	9802      	ldr	r0, [sp, #8]
    94d0:	f000 f858 	bl	9584 <__udivmoddi4>
    94d4:	9b01      	ldr	r3, [sp, #4]
    94d6:	469e      	mov	lr, r3
    94d8:	b002      	add	sp, #8
    94da:	bc0c      	pop	{r2, r3}
    94dc:	4770      	bx	lr
    94de:	46c0      	nop			; (mov r8, r8)

000094e0 <__aeabi_lmul>:
    94e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    94e2:	46ce      	mov	lr, r9
    94e4:	4647      	mov	r7, r8
    94e6:	0415      	lsls	r5, r2, #16
    94e8:	0c2d      	lsrs	r5, r5, #16
    94ea:	002e      	movs	r6, r5
    94ec:	b580      	push	{r7, lr}
    94ee:	0407      	lsls	r7, r0, #16
    94f0:	0c14      	lsrs	r4, r2, #16
    94f2:	0c3f      	lsrs	r7, r7, #16
    94f4:	4699      	mov	r9, r3
    94f6:	0c03      	lsrs	r3, r0, #16
    94f8:	437e      	muls	r6, r7
    94fa:	435d      	muls	r5, r3
    94fc:	4367      	muls	r7, r4
    94fe:	4363      	muls	r3, r4
    9500:	197f      	adds	r7, r7, r5
    9502:	0c34      	lsrs	r4, r6, #16
    9504:	19e4      	adds	r4, r4, r7
    9506:	469c      	mov	ip, r3
    9508:	42a5      	cmp	r5, r4
    950a:	d903      	bls.n	9514 <__aeabi_lmul+0x34>
    950c:	2380      	movs	r3, #128	; 0x80
    950e:	025b      	lsls	r3, r3, #9
    9510:	4698      	mov	r8, r3
    9512:	44c4      	add	ip, r8
    9514:	464b      	mov	r3, r9
    9516:	4351      	muls	r1, r2
    9518:	4343      	muls	r3, r0
    951a:	0436      	lsls	r6, r6, #16
    951c:	0c36      	lsrs	r6, r6, #16
    951e:	0c25      	lsrs	r5, r4, #16
    9520:	0424      	lsls	r4, r4, #16
    9522:	4465      	add	r5, ip
    9524:	19a4      	adds	r4, r4, r6
    9526:	1859      	adds	r1, r3, r1
    9528:	1949      	adds	r1, r1, r5
    952a:	0020      	movs	r0, r4
    952c:	bc0c      	pop	{r2, r3}
    952e:	4690      	mov	r8, r2
    9530:	4699      	mov	r9, r3
    9532:	bdf0      	pop	{r4, r5, r6, r7, pc}

00009534 <__ffssi2>:
    9534:	b510      	push	{r4, lr}
    9536:	2300      	movs	r3, #0
    9538:	2800      	cmp	r0, #0
    953a:	d002      	beq.n	9542 <__ffssi2+0xe>
    953c:	f001 fc34 	bl	ada8 <__ctzsi2>
    9540:	1c43      	adds	r3, r0, #1
    9542:	0018      	movs	r0, r3
    9544:	bd10      	pop	{r4, pc}
    9546:	46c0      	nop			; (mov r8, r8)

00009548 <__aeabi_d2uiz>:
    9548:	b570      	push	{r4, r5, r6, lr}
    954a:	2200      	movs	r2, #0
    954c:	4b0c      	ldr	r3, [pc, #48]	; (9580 <__aeabi_d2uiz+0x38>)
    954e:	0004      	movs	r4, r0
    9550:	000d      	movs	r5, r1
    9552:	f001 fbf5 	bl	ad40 <__aeabi_dcmpge>
    9556:	2800      	cmp	r0, #0
    9558:	d104      	bne.n	9564 <__aeabi_d2uiz+0x1c>
    955a:	0020      	movs	r0, r4
    955c:	0029      	movs	r1, r5
    955e:	f001 fabb 	bl	aad8 <__aeabi_d2iz>
    9562:	bd70      	pop	{r4, r5, r6, pc}
    9564:	4b06      	ldr	r3, [pc, #24]	; (9580 <__aeabi_d2uiz+0x38>)
    9566:	2200      	movs	r2, #0
    9568:	0020      	movs	r0, r4
    956a:	0029      	movs	r1, r5
    956c:	f000 ff9e 	bl	a4ac <__aeabi_dsub>
    9570:	f001 fab2 	bl	aad8 <__aeabi_d2iz>
    9574:	2380      	movs	r3, #128	; 0x80
    9576:	061b      	lsls	r3, r3, #24
    9578:	469c      	mov	ip, r3
    957a:	4460      	add	r0, ip
    957c:	e7f1      	b.n	9562 <__aeabi_d2uiz+0x1a>
    957e:	46c0      	nop			; (mov r8, r8)
    9580:	41e00000 	.word	0x41e00000

00009584 <__udivmoddi4>:
    9584:	b5f0      	push	{r4, r5, r6, r7, lr}
    9586:	4657      	mov	r7, sl
    9588:	464e      	mov	r6, r9
    958a:	4645      	mov	r5, r8
    958c:	46de      	mov	lr, fp
    958e:	b5e0      	push	{r5, r6, r7, lr}
    9590:	0004      	movs	r4, r0
    9592:	b083      	sub	sp, #12
    9594:	000d      	movs	r5, r1
    9596:	4692      	mov	sl, r2
    9598:	4699      	mov	r9, r3
    959a:	428b      	cmp	r3, r1
    959c:	d82f      	bhi.n	95fe <__udivmoddi4+0x7a>
    959e:	d02c      	beq.n	95fa <__udivmoddi4+0x76>
    95a0:	4649      	mov	r1, r9
    95a2:	4650      	mov	r0, sl
    95a4:	f001 fbf4 	bl	ad90 <__clzdi2>
    95a8:	0029      	movs	r1, r5
    95aa:	0006      	movs	r6, r0
    95ac:	0020      	movs	r0, r4
    95ae:	f001 fbef 	bl	ad90 <__clzdi2>
    95b2:	1a33      	subs	r3, r6, r0
    95b4:	4698      	mov	r8, r3
    95b6:	3b20      	subs	r3, #32
    95b8:	469b      	mov	fp, r3
    95ba:	d500      	bpl.n	95be <__udivmoddi4+0x3a>
    95bc:	e074      	b.n	96a8 <__udivmoddi4+0x124>
    95be:	4653      	mov	r3, sl
    95c0:	465a      	mov	r2, fp
    95c2:	4093      	lsls	r3, r2
    95c4:	001f      	movs	r7, r3
    95c6:	4653      	mov	r3, sl
    95c8:	4642      	mov	r2, r8
    95ca:	4093      	lsls	r3, r2
    95cc:	001e      	movs	r6, r3
    95ce:	42af      	cmp	r7, r5
    95d0:	d829      	bhi.n	9626 <__udivmoddi4+0xa2>
    95d2:	d026      	beq.n	9622 <__udivmoddi4+0x9e>
    95d4:	465b      	mov	r3, fp
    95d6:	1ba4      	subs	r4, r4, r6
    95d8:	41bd      	sbcs	r5, r7
    95da:	2b00      	cmp	r3, #0
    95dc:	da00      	bge.n	95e0 <__udivmoddi4+0x5c>
    95de:	e079      	b.n	96d4 <__udivmoddi4+0x150>
    95e0:	2200      	movs	r2, #0
    95e2:	2300      	movs	r3, #0
    95e4:	9200      	str	r2, [sp, #0]
    95e6:	9301      	str	r3, [sp, #4]
    95e8:	2301      	movs	r3, #1
    95ea:	465a      	mov	r2, fp
    95ec:	4093      	lsls	r3, r2
    95ee:	9301      	str	r3, [sp, #4]
    95f0:	2301      	movs	r3, #1
    95f2:	4642      	mov	r2, r8
    95f4:	4093      	lsls	r3, r2
    95f6:	9300      	str	r3, [sp, #0]
    95f8:	e019      	b.n	962e <__udivmoddi4+0xaa>
    95fa:	4282      	cmp	r2, r0
    95fc:	d9d0      	bls.n	95a0 <__udivmoddi4+0x1c>
    95fe:	2200      	movs	r2, #0
    9600:	2300      	movs	r3, #0
    9602:	9200      	str	r2, [sp, #0]
    9604:	9301      	str	r3, [sp, #4]
    9606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9608:	2b00      	cmp	r3, #0
    960a:	d001      	beq.n	9610 <__udivmoddi4+0x8c>
    960c:	601c      	str	r4, [r3, #0]
    960e:	605d      	str	r5, [r3, #4]
    9610:	9800      	ldr	r0, [sp, #0]
    9612:	9901      	ldr	r1, [sp, #4]
    9614:	b003      	add	sp, #12
    9616:	bc3c      	pop	{r2, r3, r4, r5}
    9618:	4690      	mov	r8, r2
    961a:	4699      	mov	r9, r3
    961c:	46a2      	mov	sl, r4
    961e:	46ab      	mov	fp, r5
    9620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9622:	42a3      	cmp	r3, r4
    9624:	d9d6      	bls.n	95d4 <__udivmoddi4+0x50>
    9626:	2200      	movs	r2, #0
    9628:	2300      	movs	r3, #0
    962a:	9200      	str	r2, [sp, #0]
    962c:	9301      	str	r3, [sp, #4]
    962e:	4643      	mov	r3, r8
    9630:	2b00      	cmp	r3, #0
    9632:	d0e8      	beq.n	9606 <__udivmoddi4+0x82>
    9634:	07fb      	lsls	r3, r7, #31
    9636:	0872      	lsrs	r2, r6, #1
    9638:	431a      	orrs	r2, r3
    963a:	4646      	mov	r6, r8
    963c:	087b      	lsrs	r3, r7, #1
    963e:	e00e      	b.n	965e <__udivmoddi4+0xda>
    9640:	42ab      	cmp	r3, r5
    9642:	d101      	bne.n	9648 <__udivmoddi4+0xc4>
    9644:	42a2      	cmp	r2, r4
    9646:	d80c      	bhi.n	9662 <__udivmoddi4+0xde>
    9648:	1aa4      	subs	r4, r4, r2
    964a:	419d      	sbcs	r5, r3
    964c:	2001      	movs	r0, #1
    964e:	1924      	adds	r4, r4, r4
    9650:	416d      	adcs	r5, r5
    9652:	2100      	movs	r1, #0
    9654:	3e01      	subs	r6, #1
    9656:	1824      	adds	r4, r4, r0
    9658:	414d      	adcs	r5, r1
    965a:	2e00      	cmp	r6, #0
    965c:	d006      	beq.n	966c <__udivmoddi4+0xe8>
    965e:	42ab      	cmp	r3, r5
    9660:	d9ee      	bls.n	9640 <__udivmoddi4+0xbc>
    9662:	3e01      	subs	r6, #1
    9664:	1924      	adds	r4, r4, r4
    9666:	416d      	adcs	r5, r5
    9668:	2e00      	cmp	r6, #0
    966a:	d1f8      	bne.n	965e <__udivmoddi4+0xda>
    966c:	465b      	mov	r3, fp
    966e:	9800      	ldr	r0, [sp, #0]
    9670:	9901      	ldr	r1, [sp, #4]
    9672:	1900      	adds	r0, r0, r4
    9674:	4169      	adcs	r1, r5
    9676:	2b00      	cmp	r3, #0
    9678:	db22      	blt.n	96c0 <__udivmoddi4+0x13c>
    967a:	002b      	movs	r3, r5
    967c:	465a      	mov	r2, fp
    967e:	40d3      	lsrs	r3, r2
    9680:	002a      	movs	r2, r5
    9682:	4644      	mov	r4, r8
    9684:	40e2      	lsrs	r2, r4
    9686:	001c      	movs	r4, r3
    9688:	465b      	mov	r3, fp
    968a:	0015      	movs	r5, r2
    968c:	2b00      	cmp	r3, #0
    968e:	db2c      	blt.n	96ea <__udivmoddi4+0x166>
    9690:	0026      	movs	r6, r4
    9692:	409e      	lsls	r6, r3
    9694:	0033      	movs	r3, r6
    9696:	0026      	movs	r6, r4
    9698:	4647      	mov	r7, r8
    969a:	40be      	lsls	r6, r7
    969c:	0032      	movs	r2, r6
    969e:	1a80      	subs	r0, r0, r2
    96a0:	4199      	sbcs	r1, r3
    96a2:	9000      	str	r0, [sp, #0]
    96a4:	9101      	str	r1, [sp, #4]
    96a6:	e7ae      	b.n	9606 <__udivmoddi4+0x82>
    96a8:	4642      	mov	r2, r8
    96aa:	2320      	movs	r3, #32
    96ac:	1a9b      	subs	r3, r3, r2
    96ae:	4652      	mov	r2, sl
    96b0:	40da      	lsrs	r2, r3
    96b2:	4641      	mov	r1, r8
    96b4:	0013      	movs	r3, r2
    96b6:	464a      	mov	r2, r9
    96b8:	408a      	lsls	r2, r1
    96ba:	0017      	movs	r7, r2
    96bc:	431f      	orrs	r7, r3
    96be:	e782      	b.n	95c6 <__udivmoddi4+0x42>
    96c0:	4642      	mov	r2, r8
    96c2:	2320      	movs	r3, #32
    96c4:	1a9b      	subs	r3, r3, r2
    96c6:	002a      	movs	r2, r5
    96c8:	4646      	mov	r6, r8
    96ca:	409a      	lsls	r2, r3
    96cc:	0023      	movs	r3, r4
    96ce:	40f3      	lsrs	r3, r6
    96d0:	4313      	orrs	r3, r2
    96d2:	e7d5      	b.n	9680 <__udivmoddi4+0xfc>
    96d4:	4642      	mov	r2, r8
    96d6:	2320      	movs	r3, #32
    96d8:	2100      	movs	r1, #0
    96da:	1a9b      	subs	r3, r3, r2
    96dc:	2200      	movs	r2, #0
    96de:	9100      	str	r1, [sp, #0]
    96e0:	9201      	str	r2, [sp, #4]
    96e2:	2201      	movs	r2, #1
    96e4:	40da      	lsrs	r2, r3
    96e6:	9201      	str	r2, [sp, #4]
    96e8:	e782      	b.n	95f0 <__udivmoddi4+0x6c>
    96ea:	4642      	mov	r2, r8
    96ec:	2320      	movs	r3, #32
    96ee:	0026      	movs	r6, r4
    96f0:	1a9b      	subs	r3, r3, r2
    96f2:	40de      	lsrs	r6, r3
    96f4:	002f      	movs	r7, r5
    96f6:	46b4      	mov	ip, r6
    96f8:	4097      	lsls	r7, r2
    96fa:	4666      	mov	r6, ip
    96fc:	003b      	movs	r3, r7
    96fe:	4333      	orrs	r3, r6
    9700:	e7c9      	b.n	9696 <__udivmoddi4+0x112>
    9702:	46c0      	nop			; (mov r8, r8)

00009704 <__aeabi_fmul>:
    9704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9706:	4657      	mov	r7, sl
    9708:	464e      	mov	r6, r9
    970a:	4645      	mov	r5, r8
    970c:	46de      	mov	lr, fp
    970e:	b5e0      	push	{r5, r6, r7, lr}
    9710:	0247      	lsls	r7, r0, #9
    9712:	0046      	lsls	r6, r0, #1
    9714:	4688      	mov	r8, r1
    9716:	0a7f      	lsrs	r7, r7, #9
    9718:	0e36      	lsrs	r6, r6, #24
    971a:	0fc4      	lsrs	r4, r0, #31
    971c:	2e00      	cmp	r6, #0
    971e:	d047      	beq.n	97b0 <__aeabi_fmul+0xac>
    9720:	2eff      	cmp	r6, #255	; 0xff
    9722:	d024      	beq.n	976e <__aeabi_fmul+0x6a>
    9724:	00fb      	lsls	r3, r7, #3
    9726:	2780      	movs	r7, #128	; 0x80
    9728:	04ff      	lsls	r7, r7, #19
    972a:	431f      	orrs	r7, r3
    972c:	2300      	movs	r3, #0
    972e:	4699      	mov	r9, r3
    9730:	469a      	mov	sl, r3
    9732:	3e7f      	subs	r6, #127	; 0x7f
    9734:	4643      	mov	r3, r8
    9736:	025d      	lsls	r5, r3, #9
    9738:	0058      	lsls	r0, r3, #1
    973a:	0fdb      	lsrs	r3, r3, #31
    973c:	0a6d      	lsrs	r5, r5, #9
    973e:	0e00      	lsrs	r0, r0, #24
    9740:	4698      	mov	r8, r3
    9742:	d043      	beq.n	97cc <__aeabi_fmul+0xc8>
    9744:	28ff      	cmp	r0, #255	; 0xff
    9746:	d03b      	beq.n	97c0 <__aeabi_fmul+0xbc>
    9748:	00eb      	lsls	r3, r5, #3
    974a:	2580      	movs	r5, #128	; 0x80
    974c:	2200      	movs	r2, #0
    974e:	04ed      	lsls	r5, r5, #19
    9750:	431d      	orrs	r5, r3
    9752:	387f      	subs	r0, #127	; 0x7f
    9754:	1836      	adds	r6, r6, r0
    9756:	1c73      	adds	r3, r6, #1
    9758:	4641      	mov	r1, r8
    975a:	469b      	mov	fp, r3
    975c:	464b      	mov	r3, r9
    975e:	4061      	eors	r1, r4
    9760:	4313      	orrs	r3, r2
    9762:	2b0f      	cmp	r3, #15
    9764:	d864      	bhi.n	9830 <__aeabi_fmul+0x12c>
    9766:	4875      	ldr	r0, [pc, #468]	; (993c <__aeabi_fmul+0x238>)
    9768:	009b      	lsls	r3, r3, #2
    976a:	58c3      	ldr	r3, [r0, r3]
    976c:	469f      	mov	pc, r3
    976e:	2f00      	cmp	r7, #0
    9770:	d142      	bne.n	97f8 <__aeabi_fmul+0xf4>
    9772:	2308      	movs	r3, #8
    9774:	4699      	mov	r9, r3
    9776:	3b06      	subs	r3, #6
    9778:	26ff      	movs	r6, #255	; 0xff
    977a:	469a      	mov	sl, r3
    977c:	e7da      	b.n	9734 <__aeabi_fmul+0x30>
    977e:	4641      	mov	r1, r8
    9780:	2a02      	cmp	r2, #2
    9782:	d028      	beq.n	97d6 <__aeabi_fmul+0xd2>
    9784:	2a03      	cmp	r2, #3
    9786:	d100      	bne.n	978a <__aeabi_fmul+0x86>
    9788:	e0ce      	b.n	9928 <__aeabi_fmul+0x224>
    978a:	2a01      	cmp	r2, #1
    978c:	d000      	beq.n	9790 <__aeabi_fmul+0x8c>
    978e:	e0ac      	b.n	98ea <__aeabi_fmul+0x1e6>
    9790:	4011      	ands	r1, r2
    9792:	2000      	movs	r0, #0
    9794:	2200      	movs	r2, #0
    9796:	b2cc      	uxtb	r4, r1
    9798:	0240      	lsls	r0, r0, #9
    979a:	05d2      	lsls	r2, r2, #23
    979c:	0a40      	lsrs	r0, r0, #9
    979e:	07e4      	lsls	r4, r4, #31
    97a0:	4310      	orrs	r0, r2
    97a2:	4320      	orrs	r0, r4
    97a4:	bc3c      	pop	{r2, r3, r4, r5}
    97a6:	4690      	mov	r8, r2
    97a8:	4699      	mov	r9, r3
    97aa:	46a2      	mov	sl, r4
    97ac:	46ab      	mov	fp, r5
    97ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    97b0:	2f00      	cmp	r7, #0
    97b2:	d115      	bne.n	97e0 <__aeabi_fmul+0xdc>
    97b4:	2304      	movs	r3, #4
    97b6:	4699      	mov	r9, r3
    97b8:	3b03      	subs	r3, #3
    97ba:	2600      	movs	r6, #0
    97bc:	469a      	mov	sl, r3
    97be:	e7b9      	b.n	9734 <__aeabi_fmul+0x30>
    97c0:	20ff      	movs	r0, #255	; 0xff
    97c2:	2202      	movs	r2, #2
    97c4:	2d00      	cmp	r5, #0
    97c6:	d0c5      	beq.n	9754 <__aeabi_fmul+0x50>
    97c8:	2203      	movs	r2, #3
    97ca:	e7c3      	b.n	9754 <__aeabi_fmul+0x50>
    97cc:	2d00      	cmp	r5, #0
    97ce:	d119      	bne.n	9804 <__aeabi_fmul+0x100>
    97d0:	2000      	movs	r0, #0
    97d2:	2201      	movs	r2, #1
    97d4:	e7be      	b.n	9754 <__aeabi_fmul+0x50>
    97d6:	2401      	movs	r4, #1
    97d8:	22ff      	movs	r2, #255	; 0xff
    97da:	400c      	ands	r4, r1
    97dc:	2000      	movs	r0, #0
    97de:	e7db      	b.n	9798 <__aeabi_fmul+0x94>
    97e0:	0038      	movs	r0, r7
    97e2:	f001 fab7 	bl	ad54 <__clzsi2>
    97e6:	2676      	movs	r6, #118	; 0x76
    97e8:	1f43      	subs	r3, r0, #5
    97ea:	409f      	lsls	r7, r3
    97ec:	2300      	movs	r3, #0
    97ee:	4276      	negs	r6, r6
    97f0:	1a36      	subs	r6, r6, r0
    97f2:	4699      	mov	r9, r3
    97f4:	469a      	mov	sl, r3
    97f6:	e79d      	b.n	9734 <__aeabi_fmul+0x30>
    97f8:	230c      	movs	r3, #12
    97fa:	4699      	mov	r9, r3
    97fc:	3b09      	subs	r3, #9
    97fe:	26ff      	movs	r6, #255	; 0xff
    9800:	469a      	mov	sl, r3
    9802:	e797      	b.n	9734 <__aeabi_fmul+0x30>
    9804:	0028      	movs	r0, r5
    9806:	f001 faa5 	bl	ad54 <__clzsi2>
    980a:	1f43      	subs	r3, r0, #5
    980c:	409d      	lsls	r5, r3
    980e:	2376      	movs	r3, #118	; 0x76
    9810:	425b      	negs	r3, r3
    9812:	1a18      	subs	r0, r3, r0
    9814:	2200      	movs	r2, #0
    9816:	e79d      	b.n	9754 <__aeabi_fmul+0x50>
    9818:	2080      	movs	r0, #128	; 0x80
    981a:	2400      	movs	r4, #0
    981c:	03c0      	lsls	r0, r0, #15
    981e:	22ff      	movs	r2, #255	; 0xff
    9820:	e7ba      	b.n	9798 <__aeabi_fmul+0x94>
    9822:	003d      	movs	r5, r7
    9824:	4652      	mov	r2, sl
    9826:	e7ab      	b.n	9780 <__aeabi_fmul+0x7c>
    9828:	003d      	movs	r5, r7
    982a:	0021      	movs	r1, r4
    982c:	4652      	mov	r2, sl
    982e:	e7a7      	b.n	9780 <__aeabi_fmul+0x7c>
    9830:	0c3b      	lsrs	r3, r7, #16
    9832:	469c      	mov	ip, r3
    9834:	042a      	lsls	r2, r5, #16
    9836:	0c12      	lsrs	r2, r2, #16
    9838:	0c2b      	lsrs	r3, r5, #16
    983a:	0014      	movs	r4, r2
    983c:	4660      	mov	r0, ip
    983e:	4665      	mov	r5, ip
    9840:	043f      	lsls	r7, r7, #16
    9842:	0c3f      	lsrs	r7, r7, #16
    9844:	437c      	muls	r4, r7
    9846:	4342      	muls	r2, r0
    9848:	435d      	muls	r5, r3
    984a:	437b      	muls	r3, r7
    984c:	0c27      	lsrs	r7, r4, #16
    984e:	189b      	adds	r3, r3, r2
    9850:	18ff      	adds	r7, r7, r3
    9852:	42ba      	cmp	r2, r7
    9854:	d903      	bls.n	985e <__aeabi_fmul+0x15a>
    9856:	2380      	movs	r3, #128	; 0x80
    9858:	025b      	lsls	r3, r3, #9
    985a:	469c      	mov	ip, r3
    985c:	4465      	add	r5, ip
    985e:	0424      	lsls	r4, r4, #16
    9860:	043a      	lsls	r2, r7, #16
    9862:	0c24      	lsrs	r4, r4, #16
    9864:	1912      	adds	r2, r2, r4
    9866:	0193      	lsls	r3, r2, #6
    9868:	1e5c      	subs	r4, r3, #1
    986a:	41a3      	sbcs	r3, r4
    986c:	0c3f      	lsrs	r7, r7, #16
    986e:	0e92      	lsrs	r2, r2, #26
    9870:	197d      	adds	r5, r7, r5
    9872:	431a      	orrs	r2, r3
    9874:	01ad      	lsls	r5, r5, #6
    9876:	4315      	orrs	r5, r2
    9878:	012b      	lsls	r3, r5, #4
    987a:	d504      	bpl.n	9886 <__aeabi_fmul+0x182>
    987c:	2301      	movs	r3, #1
    987e:	465e      	mov	r6, fp
    9880:	086a      	lsrs	r2, r5, #1
    9882:	401d      	ands	r5, r3
    9884:	4315      	orrs	r5, r2
    9886:	0032      	movs	r2, r6
    9888:	327f      	adds	r2, #127	; 0x7f
    988a:	2a00      	cmp	r2, #0
    988c:	dd25      	ble.n	98da <__aeabi_fmul+0x1d6>
    988e:	076b      	lsls	r3, r5, #29
    9890:	d004      	beq.n	989c <__aeabi_fmul+0x198>
    9892:	230f      	movs	r3, #15
    9894:	402b      	ands	r3, r5
    9896:	2b04      	cmp	r3, #4
    9898:	d000      	beq.n	989c <__aeabi_fmul+0x198>
    989a:	3504      	adds	r5, #4
    989c:	012b      	lsls	r3, r5, #4
    989e:	d503      	bpl.n	98a8 <__aeabi_fmul+0x1a4>
    98a0:	0032      	movs	r2, r6
    98a2:	4b27      	ldr	r3, [pc, #156]	; (9940 <__aeabi_fmul+0x23c>)
    98a4:	3280      	adds	r2, #128	; 0x80
    98a6:	401d      	ands	r5, r3
    98a8:	2afe      	cmp	r2, #254	; 0xfe
    98aa:	dc94      	bgt.n	97d6 <__aeabi_fmul+0xd2>
    98ac:	2401      	movs	r4, #1
    98ae:	01a8      	lsls	r0, r5, #6
    98b0:	0a40      	lsrs	r0, r0, #9
    98b2:	b2d2      	uxtb	r2, r2
    98b4:	400c      	ands	r4, r1
    98b6:	e76f      	b.n	9798 <__aeabi_fmul+0x94>
    98b8:	2080      	movs	r0, #128	; 0x80
    98ba:	03c0      	lsls	r0, r0, #15
    98bc:	4207      	tst	r7, r0
    98be:	d007      	beq.n	98d0 <__aeabi_fmul+0x1cc>
    98c0:	4205      	tst	r5, r0
    98c2:	d105      	bne.n	98d0 <__aeabi_fmul+0x1cc>
    98c4:	4328      	orrs	r0, r5
    98c6:	0240      	lsls	r0, r0, #9
    98c8:	0a40      	lsrs	r0, r0, #9
    98ca:	4644      	mov	r4, r8
    98cc:	22ff      	movs	r2, #255	; 0xff
    98ce:	e763      	b.n	9798 <__aeabi_fmul+0x94>
    98d0:	4338      	orrs	r0, r7
    98d2:	0240      	lsls	r0, r0, #9
    98d4:	0a40      	lsrs	r0, r0, #9
    98d6:	22ff      	movs	r2, #255	; 0xff
    98d8:	e75e      	b.n	9798 <__aeabi_fmul+0x94>
    98da:	2401      	movs	r4, #1
    98dc:	1aa3      	subs	r3, r4, r2
    98de:	2b1b      	cmp	r3, #27
    98e0:	dd05      	ble.n	98ee <__aeabi_fmul+0x1ea>
    98e2:	400c      	ands	r4, r1
    98e4:	2200      	movs	r2, #0
    98e6:	2000      	movs	r0, #0
    98e8:	e756      	b.n	9798 <__aeabi_fmul+0x94>
    98ea:	465e      	mov	r6, fp
    98ec:	e7cb      	b.n	9886 <__aeabi_fmul+0x182>
    98ee:	002a      	movs	r2, r5
    98f0:	2020      	movs	r0, #32
    98f2:	40da      	lsrs	r2, r3
    98f4:	1ac3      	subs	r3, r0, r3
    98f6:	409d      	lsls	r5, r3
    98f8:	002b      	movs	r3, r5
    98fa:	1e5d      	subs	r5, r3, #1
    98fc:	41ab      	sbcs	r3, r5
    98fe:	4313      	orrs	r3, r2
    9900:	075a      	lsls	r2, r3, #29
    9902:	d004      	beq.n	990e <__aeabi_fmul+0x20a>
    9904:	220f      	movs	r2, #15
    9906:	401a      	ands	r2, r3
    9908:	2a04      	cmp	r2, #4
    990a:	d000      	beq.n	990e <__aeabi_fmul+0x20a>
    990c:	3304      	adds	r3, #4
    990e:	015a      	lsls	r2, r3, #5
    9910:	d504      	bpl.n	991c <__aeabi_fmul+0x218>
    9912:	2401      	movs	r4, #1
    9914:	2201      	movs	r2, #1
    9916:	400c      	ands	r4, r1
    9918:	2000      	movs	r0, #0
    991a:	e73d      	b.n	9798 <__aeabi_fmul+0x94>
    991c:	2401      	movs	r4, #1
    991e:	019b      	lsls	r3, r3, #6
    9920:	0a58      	lsrs	r0, r3, #9
    9922:	400c      	ands	r4, r1
    9924:	2200      	movs	r2, #0
    9926:	e737      	b.n	9798 <__aeabi_fmul+0x94>
    9928:	2080      	movs	r0, #128	; 0x80
    992a:	2401      	movs	r4, #1
    992c:	03c0      	lsls	r0, r0, #15
    992e:	4328      	orrs	r0, r5
    9930:	0240      	lsls	r0, r0, #9
    9932:	0a40      	lsrs	r0, r0, #9
    9934:	400c      	ands	r4, r1
    9936:	22ff      	movs	r2, #255	; 0xff
    9938:	e72e      	b.n	9798 <__aeabi_fmul+0x94>
    993a:	46c0      	nop			; (mov r8, r8)
    993c:	00018a78 	.word	0x00018a78
    9940:	f7ffffff 	.word	0xf7ffffff

00009944 <__aeabi_ddiv>:
    9944:	b5f0      	push	{r4, r5, r6, r7, lr}
    9946:	4657      	mov	r7, sl
    9948:	4645      	mov	r5, r8
    994a:	46de      	mov	lr, fp
    994c:	464e      	mov	r6, r9
    994e:	b5e0      	push	{r5, r6, r7, lr}
    9950:	004c      	lsls	r4, r1, #1
    9952:	030e      	lsls	r6, r1, #12
    9954:	b087      	sub	sp, #28
    9956:	4683      	mov	fp, r0
    9958:	4692      	mov	sl, r2
    995a:	001d      	movs	r5, r3
    995c:	4680      	mov	r8, r0
    995e:	0b36      	lsrs	r6, r6, #12
    9960:	0d64      	lsrs	r4, r4, #21
    9962:	0fcf      	lsrs	r7, r1, #31
    9964:	2c00      	cmp	r4, #0
    9966:	d04f      	beq.n	9a08 <__aeabi_ddiv+0xc4>
    9968:	4b6f      	ldr	r3, [pc, #444]	; (9b28 <__aeabi_ddiv+0x1e4>)
    996a:	429c      	cmp	r4, r3
    996c:	d035      	beq.n	99da <__aeabi_ddiv+0x96>
    996e:	2380      	movs	r3, #128	; 0x80
    9970:	0f42      	lsrs	r2, r0, #29
    9972:	041b      	lsls	r3, r3, #16
    9974:	00f6      	lsls	r6, r6, #3
    9976:	4313      	orrs	r3, r2
    9978:	4333      	orrs	r3, r6
    997a:	4699      	mov	r9, r3
    997c:	00c3      	lsls	r3, r0, #3
    997e:	4698      	mov	r8, r3
    9980:	4b6a      	ldr	r3, [pc, #424]	; (9b2c <__aeabi_ddiv+0x1e8>)
    9982:	2600      	movs	r6, #0
    9984:	469c      	mov	ip, r3
    9986:	2300      	movs	r3, #0
    9988:	4464      	add	r4, ip
    998a:	9303      	str	r3, [sp, #12]
    998c:	032b      	lsls	r3, r5, #12
    998e:	0b1b      	lsrs	r3, r3, #12
    9990:	469b      	mov	fp, r3
    9992:	006b      	lsls	r3, r5, #1
    9994:	0fed      	lsrs	r5, r5, #31
    9996:	4650      	mov	r0, sl
    9998:	0d5b      	lsrs	r3, r3, #21
    999a:	9501      	str	r5, [sp, #4]
    999c:	d05e      	beq.n	9a5c <__aeabi_ddiv+0x118>
    999e:	4a62      	ldr	r2, [pc, #392]	; (9b28 <__aeabi_ddiv+0x1e4>)
    99a0:	4293      	cmp	r3, r2
    99a2:	d053      	beq.n	9a4c <__aeabi_ddiv+0x108>
    99a4:	465a      	mov	r2, fp
    99a6:	00d1      	lsls	r1, r2, #3
    99a8:	2280      	movs	r2, #128	; 0x80
    99aa:	0f40      	lsrs	r0, r0, #29
    99ac:	0412      	lsls	r2, r2, #16
    99ae:	4302      	orrs	r2, r0
    99b0:	430a      	orrs	r2, r1
    99b2:	4693      	mov	fp, r2
    99b4:	4652      	mov	r2, sl
    99b6:	00d1      	lsls	r1, r2, #3
    99b8:	4a5c      	ldr	r2, [pc, #368]	; (9b2c <__aeabi_ddiv+0x1e8>)
    99ba:	4694      	mov	ip, r2
    99bc:	2200      	movs	r2, #0
    99be:	4463      	add	r3, ip
    99c0:	0038      	movs	r0, r7
    99c2:	4068      	eors	r0, r5
    99c4:	4684      	mov	ip, r0
    99c6:	9002      	str	r0, [sp, #8]
    99c8:	1ae4      	subs	r4, r4, r3
    99ca:	4316      	orrs	r6, r2
    99cc:	2e0f      	cmp	r6, #15
    99ce:	d900      	bls.n	99d2 <__aeabi_ddiv+0x8e>
    99d0:	e0b4      	b.n	9b3c <__aeabi_ddiv+0x1f8>
    99d2:	4b57      	ldr	r3, [pc, #348]	; (9b30 <__aeabi_ddiv+0x1ec>)
    99d4:	00b6      	lsls	r6, r6, #2
    99d6:	599b      	ldr	r3, [r3, r6]
    99d8:	469f      	mov	pc, r3
    99da:	0003      	movs	r3, r0
    99dc:	4333      	orrs	r3, r6
    99de:	4699      	mov	r9, r3
    99e0:	d16c      	bne.n	9abc <__aeabi_ddiv+0x178>
    99e2:	2300      	movs	r3, #0
    99e4:	4698      	mov	r8, r3
    99e6:	3302      	adds	r3, #2
    99e8:	2608      	movs	r6, #8
    99ea:	9303      	str	r3, [sp, #12]
    99ec:	e7ce      	b.n	998c <__aeabi_ddiv+0x48>
    99ee:	46cb      	mov	fp, r9
    99f0:	4641      	mov	r1, r8
    99f2:	9a03      	ldr	r2, [sp, #12]
    99f4:	9701      	str	r7, [sp, #4]
    99f6:	2a02      	cmp	r2, #2
    99f8:	d165      	bne.n	9ac6 <__aeabi_ddiv+0x182>
    99fa:	9b01      	ldr	r3, [sp, #4]
    99fc:	4c4a      	ldr	r4, [pc, #296]	; (9b28 <__aeabi_ddiv+0x1e4>)
    99fe:	469c      	mov	ip, r3
    9a00:	2300      	movs	r3, #0
    9a02:	2200      	movs	r2, #0
    9a04:	4698      	mov	r8, r3
    9a06:	e06b      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9a08:	0003      	movs	r3, r0
    9a0a:	4333      	orrs	r3, r6
    9a0c:	4699      	mov	r9, r3
    9a0e:	d04e      	beq.n	9aae <__aeabi_ddiv+0x16a>
    9a10:	2e00      	cmp	r6, #0
    9a12:	d100      	bne.n	9a16 <__aeabi_ddiv+0xd2>
    9a14:	e1bc      	b.n	9d90 <__aeabi_ddiv+0x44c>
    9a16:	0030      	movs	r0, r6
    9a18:	f001 f99c 	bl	ad54 <__clzsi2>
    9a1c:	0003      	movs	r3, r0
    9a1e:	3b0b      	subs	r3, #11
    9a20:	2b1c      	cmp	r3, #28
    9a22:	dd00      	ble.n	9a26 <__aeabi_ddiv+0xe2>
    9a24:	e1ac      	b.n	9d80 <__aeabi_ddiv+0x43c>
    9a26:	221d      	movs	r2, #29
    9a28:	1ad3      	subs	r3, r2, r3
    9a2a:	465a      	mov	r2, fp
    9a2c:	0001      	movs	r1, r0
    9a2e:	40da      	lsrs	r2, r3
    9a30:	3908      	subs	r1, #8
    9a32:	408e      	lsls	r6, r1
    9a34:	0013      	movs	r3, r2
    9a36:	4333      	orrs	r3, r6
    9a38:	4699      	mov	r9, r3
    9a3a:	465b      	mov	r3, fp
    9a3c:	408b      	lsls	r3, r1
    9a3e:	4698      	mov	r8, r3
    9a40:	2300      	movs	r3, #0
    9a42:	4c3c      	ldr	r4, [pc, #240]	; (9b34 <__aeabi_ddiv+0x1f0>)
    9a44:	2600      	movs	r6, #0
    9a46:	1a24      	subs	r4, r4, r0
    9a48:	9303      	str	r3, [sp, #12]
    9a4a:	e79f      	b.n	998c <__aeabi_ddiv+0x48>
    9a4c:	4651      	mov	r1, sl
    9a4e:	465a      	mov	r2, fp
    9a50:	4311      	orrs	r1, r2
    9a52:	d129      	bne.n	9aa8 <__aeabi_ddiv+0x164>
    9a54:	2200      	movs	r2, #0
    9a56:	4693      	mov	fp, r2
    9a58:	3202      	adds	r2, #2
    9a5a:	e7b1      	b.n	99c0 <__aeabi_ddiv+0x7c>
    9a5c:	4659      	mov	r1, fp
    9a5e:	4301      	orrs	r1, r0
    9a60:	d01e      	beq.n	9aa0 <__aeabi_ddiv+0x15c>
    9a62:	465b      	mov	r3, fp
    9a64:	2b00      	cmp	r3, #0
    9a66:	d100      	bne.n	9a6a <__aeabi_ddiv+0x126>
    9a68:	e19e      	b.n	9da8 <__aeabi_ddiv+0x464>
    9a6a:	4658      	mov	r0, fp
    9a6c:	f001 f972 	bl	ad54 <__clzsi2>
    9a70:	0003      	movs	r3, r0
    9a72:	3b0b      	subs	r3, #11
    9a74:	2b1c      	cmp	r3, #28
    9a76:	dd00      	ble.n	9a7a <__aeabi_ddiv+0x136>
    9a78:	e18f      	b.n	9d9a <__aeabi_ddiv+0x456>
    9a7a:	0002      	movs	r2, r0
    9a7c:	4659      	mov	r1, fp
    9a7e:	3a08      	subs	r2, #8
    9a80:	4091      	lsls	r1, r2
    9a82:	468b      	mov	fp, r1
    9a84:	211d      	movs	r1, #29
    9a86:	1acb      	subs	r3, r1, r3
    9a88:	4651      	mov	r1, sl
    9a8a:	40d9      	lsrs	r1, r3
    9a8c:	000b      	movs	r3, r1
    9a8e:	4659      	mov	r1, fp
    9a90:	430b      	orrs	r3, r1
    9a92:	4651      	mov	r1, sl
    9a94:	469b      	mov	fp, r3
    9a96:	4091      	lsls	r1, r2
    9a98:	4b26      	ldr	r3, [pc, #152]	; (9b34 <__aeabi_ddiv+0x1f0>)
    9a9a:	2200      	movs	r2, #0
    9a9c:	1a1b      	subs	r3, r3, r0
    9a9e:	e78f      	b.n	99c0 <__aeabi_ddiv+0x7c>
    9aa0:	2300      	movs	r3, #0
    9aa2:	2201      	movs	r2, #1
    9aa4:	469b      	mov	fp, r3
    9aa6:	e78b      	b.n	99c0 <__aeabi_ddiv+0x7c>
    9aa8:	4651      	mov	r1, sl
    9aaa:	2203      	movs	r2, #3
    9aac:	e788      	b.n	99c0 <__aeabi_ddiv+0x7c>
    9aae:	2300      	movs	r3, #0
    9ab0:	4698      	mov	r8, r3
    9ab2:	3301      	adds	r3, #1
    9ab4:	2604      	movs	r6, #4
    9ab6:	2400      	movs	r4, #0
    9ab8:	9303      	str	r3, [sp, #12]
    9aba:	e767      	b.n	998c <__aeabi_ddiv+0x48>
    9abc:	2303      	movs	r3, #3
    9abe:	46b1      	mov	r9, r6
    9ac0:	9303      	str	r3, [sp, #12]
    9ac2:	260c      	movs	r6, #12
    9ac4:	e762      	b.n	998c <__aeabi_ddiv+0x48>
    9ac6:	2a03      	cmp	r2, #3
    9ac8:	d100      	bne.n	9acc <__aeabi_ddiv+0x188>
    9aca:	e25c      	b.n	9f86 <__aeabi_ddiv+0x642>
    9acc:	9b01      	ldr	r3, [sp, #4]
    9ace:	2a01      	cmp	r2, #1
    9ad0:	d000      	beq.n	9ad4 <__aeabi_ddiv+0x190>
    9ad2:	e1e4      	b.n	9e9e <__aeabi_ddiv+0x55a>
    9ad4:	4013      	ands	r3, r2
    9ad6:	469c      	mov	ip, r3
    9ad8:	2300      	movs	r3, #0
    9ada:	2400      	movs	r4, #0
    9adc:	2200      	movs	r2, #0
    9ade:	4698      	mov	r8, r3
    9ae0:	2100      	movs	r1, #0
    9ae2:	0312      	lsls	r2, r2, #12
    9ae4:	0b13      	lsrs	r3, r2, #12
    9ae6:	0d0a      	lsrs	r2, r1, #20
    9ae8:	0512      	lsls	r2, r2, #20
    9aea:	431a      	orrs	r2, r3
    9aec:	0523      	lsls	r3, r4, #20
    9aee:	4c12      	ldr	r4, [pc, #72]	; (9b38 <__aeabi_ddiv+0x1f4>)
    9af0:	4640      	mov	r0, r8
    9af2:	4022      	ands	r2, r4
    9af4:	4313      	orrs	r3, r2
    9af6:	4662      	mov	r2, ip
    9af8:	005b      	lsls	r3, r3, #1
    9afa:	07d2      	lsls	r2, r2, #31
    9afc:	085b      	lsrs	r3, r3, #1
    9afe:	4313      	orrs	r3, r2
    9b00:	0019      	movs	r1, r3
    9b02:	b007      	add	sp, #28
    9b04:	bc3c      	pop	{r2, r3, r4, r5}
    9b06:	4690      	mov	r8, r2
    9b08:	4699      	mov	r9, r3
    9b0a:	46a2      	mov	sl, r4
    9b0c:	46ab      	mov	fp, r5
    9b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b10:	2300      	movs	r3, #0
    9b12:	2280      	movs	r2, #128	; 0x80
    9b14:	469c      	mov	ip, r3
    9b16:	0312      	lsls	r2, r2, #12
    9b18:	4698      	mov	r8, r3
    9b1a:	4c03      	ldr	r4, [pc, #12]	; (9b28 <__aeabi_ddiv+0x1e4>)
    9b1c:	e7e0      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9b1e:	2300      	movs	r3, #0
    9b20:	4c01      	ldr	r4, [pc, #4]	; (9b28 <__aeabi_ddiv+0x1e4>)
    9b22:	2200      	movs	r2, #0
    9b24:	4698      	mov	r8, r3
    9b26:	e7db      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9b28:	000007ff 	.word	0x000007ff
    9b2c:	fffffc01 	.word	0xfffffc01
    9b30:	00018ab8 	.word	0x00018ab8
    9b34:	fffffc0d 	.word	0xfffffc0d
    9b38:	800fffff 	.word	0x800fffff
    9b3c:	45d9      	cmp	r9, fp
    9b3e:	d900      	bls.n	9b42 <__aeabi_ddiv+0x1fe>
    9b40:	e139      	b.n	9db6 <__aeabi_ddiv+0x472>
    9b42:	d100      	bne.n	9b46 <__aeabi_ddiv+0x202>
    9b44:	e134      	b.n	9db0 <__aeabi_ddiv+0x46c>
    9b46:	2300      	movs	r3, #0
    9b48:	4646      	mov	r6, r8
    9b4a:	464d      	mov	r5, r9
    9b4c:	469a      	mov	sl, r3
    9b4e:	3c01      	subs	r4, #1
    9b50:	465b      	mov	r3, fp
    9b52:	0e0a      	lsrs	r2, r1, #24
    9b54:	021b      	lsls	r3, r3, #8
    9b56:	431a      	orrs	r2, r3
    9b58:	020b      	lsls	r3, r1, #8
    9b5a:	0c17      	lsrs	r7, r2, #16
    9b5c:	9303      	str	r3, [sp, #12]
    9b5e:	0413      	lsls	r3, r2, #16
    9b60:	0c1b      	lsrs	r3, r3, #16
    9b62:	0039      	movs	r1, r7
    9b64:	0028      	movs	r0, r5
    9b66:	4690      	mov	r8, r2
    9b68:	9301      	str	r3, [sp, #4]
    9b6a:	f7ff fb23 	bl	91b4 <__udivsi3>
    9b6e:	0002      	movs	r2, r0
    9b70:	9b01      	ldr	r3, [sp, #4]
    9b72:	4683      	mov	fp, r0
    9b74:	435a      	muls	r2, r3
    9b76:	0028      	movs	r0, r5
    9b78:	0039      	movs	r1, r7
    9b7a:	4691      	mov	r9, r2
    9b7c:	f7ff fba0 	bl	92c0 <__aeabi_uidivmod>
    9b80:	0c35      	lsrs	r5, r6, #16
    9b82:	0409      	lsls	r1, r1, #16
    9b84:	430d      	orrs	r5, r1
    9b86:	45a9      	cmp	r9, r5
    9b88:	d90d      	bls.n	9ba6 <__aeabi_ddiv+0x262>
    9b8a:	465b      	mov	r3, fp
    9b8c:	4445      	add	r5, r8
    9b8e:	3b01      	subs	r3, #1
    9b90:	45a8      	cmp	r8, r5
    9b92:	d900      	bls.n	9b96 <__aeabi_ddiv+0x252>
    9b94:	e13a      	b.n	9e0c <__aeabi_ddiv+0x4c8>
    9b96:	45a9      	cmp	r9, r5
    9b98:	d800      	bhi.n	9b9c <__aeabi_ddiv+0x258>
    9b9a:	e137      	b.n	9e0c <__aeabi_ddiv+0x4c8>
    9b9c:	2302      	movs	r3, #2
    9b9e:	425b      	negs	r3, r3
    9ba0:	469c      	mov	ip, r3
    9ba2:	4445      	add	r5, r8
    9ba4:	44e3      	add	fp, ip
    9ba6:	464b      	mov	r3, r9
    9ba8:	1aeb      	subs	r3, r5, r3
    9baa:	0039      	movs	r1, r7
    9bac:	0018      	movs	r0, r3
    9bae:	9304      	str	r3, [sp, #16]
    9bb0:	f7ff fb00 	bl	91b4 <__udivsi3>
    9bb4:	9b01      	ldr	r3, [sp, #4]
    9bb6:	0005      	movs	r5, r0
    9bb8:	4343      	muls	r3, r0
    9bba:	0039      	movs	r1, r7
    9bbc:	9804      	ldr	r0, [sp, #16]
    9bbe:	4699      	mov	r9, r3
    9bc0:	f7ff fb7e 	bl	92c0 <__aeabi_uidivmod>
    9bc4:	0433      	lsls	r3, r6, #16
    9bc6:	0409      	lsls	r1, r1, #16
    9bc8:	0c1b      	lsrs	r3, r3, #16
    9bca:	430b      	orrs	r3, r1
    9bcc:	4599      	cmp	r9, r3
    9bce:	d909      	bls.n	9be4 <__aeabi_ddiv+0x2a0>
    9bd0:	4443      	add	r3, r8
    9bd2:	1e6a      	subs	r2, r5, #1
    9bd4:	4598      	cmp	r8, r3
    9bd6:	d900      	bls.n	9bda <__aeabi_ddiv+0x296>
    9bd8:	e11a      	b.n	9e10 <__aeabi_ddiv+0x4cc>
    9bda:	4599      	cmp	r9, r3
    9bdc:	d800      	bhi.n	9be0 <__aeabi_ddiv+0x29c>
    9bde:	e117      	b.n	9e10 <__aeabi_ddiv+0x4cc>
    9be0:	3d02      	subs	r5, #2
    9be2:	4443      	add	r3, r8
    9be4:	464a      	mov	r2, r9
    9be6:	1a9b      	subs	r3, r3, r2
    9be8:	465a      	mov	r2, fp
    9bea:	0412      	lsls	r2, r2, #16
    9bec:	432a      	orrs	r2, r5
    9bee:	9903      	ldr	r1, [sp, #12]
    9bf0:	4693      	mov	fp, r2
    9bf2:	0c10      	lsrs	r0, r2, #16
    9bf4:	0c0a      	lsrs	r2, r1, #16
    9bf6:	4691      	mov	r9, r2
    9bf8:	0409      	lsls	r1, r1, #16
    9bfa:	465a      	mov	r2, fp
    9bfc:	0c09      	lsrs	r1, r1, #16
    9bfe:	464e      	mov	r6, r9
    9c00:	000d      	movs	r5, r1
    9c02:	0412      	lsls	r2, r2, #16
    9c04:	0c12      	lsrs	r2, r2, #16
    9c06:	4345      	muls	r5, r0
    9c08:	9105      	str	r1, [sp, #20]
    9c0a:	4351      	muls	r1, r2
    9c0c:	4372      	muls	r2, r6
    9c0e:	4370      	muls	r0, r6
    9c10:	1952      	adds	r2, r2, r5
    9c12:	0c0e      	lsrs	r6, r1, #16
    9c14:	18b2      	adds	r2, r6, r2
    9c16:	4295      	cmp	r5, r2
    9c18:	d903      	bls.n	9c22 <__aeabi_ddiv+0x2de>
    9c1a:	2580      	movs	r5, #128	; 0x80
    9c1c:	026d      	lsls	r5, r5, #9
    9c1e:	46ac      	mov	ip, r5
    9c20:	4460      	add	r0, ip
    9c22:	0c15      	lsrs	r5, r2, #16
    9c24:	0409      	lsls	r1, r1, #16
    9c26:	0412      	lsls	r2, r2, #16
    9c28:	0c09      	lsrs	r1, r1, #16
    9c2a:	1828      	adds	r0, r5, r0
    9c2c:	1852      	adds	r2, r2, r1
    9c2e:	4283      	cmp	r3, r0
    9c30:	d200      	bcs.n	9c34 <__aeabi_ddiv+0x2f0>
    9c32:	e0ce      	b.n	9dd2 <__aeabi_ddiv+0x48e>
    9c34:	d100      	bne.n	9c38 <__aeabi_ddiv+0x2f4>
    9c36:	e0c8      	b.n	9dca <__aeabi_ddiv+0x486>
    9c38:	1a1d      	subs	r5, r3, r0
    9c3a:	4653      	mov	r3, sl
    9c3c:	1a9e      	subs	r6, r3, r2
    9c3e:	45b2      	cmp	sl, r6
    9c40:	4192      	sbcs	r2, r2
    9c42:	4252      	negs	r2, r2
    9c44:	1aab      	subs	r3, r5, r2
    9c46:	469a      	mov	sl, r3
    9c48:	4598      	cmp	r8, r3
    9c4a:	d100      	bne.n	9c4e <__aeabi_ddiv+0x30a>
    9c4c:	e117      	b.n	9e7e <__aeabi_ddiv+0x53a>
    9c4e:	0039      	movs	r1, r7
    9c50:	0018      	movs	r0, r3
    9c52:	f7ff faaf 	bl	91b4 <__udivsi3>
    9c56:	9b01      	ldr	r3, [sp, #4]
    9c58:	0005      	movs	r5, r0
    9c5a:	4343      	muls	r3, r0
    9c5c:	0039      	movs	r1, r7
    9c5e:	4650      	mov	r0, sl
    9c60:	9304      	str	r3, [sp, #16]
    9c62:	f7ff fb2d 	bl	92c0 <__aeabi_uidivmod>
    9c66:	9804      	ldr	r0, [sp, #16]
    9c68:	040b      	lsls	r3, r1, #16
    9c6a:	0c31      	lsrs	r1, r6, #16
    9c6c:	4319      	orrs	r1, r3
    9c6e:	4288      	cmp	r0, r1
    9c70:	d909      	bls.n	9c86 <__aeabi_ddiv+0x342>
    9c72:	4441      	add	r1, r8
    9c74:	1e6b      	subs	r3, r5, #1
    9c76:	4588      	cmp	r8, r1
    9c78:	d900      	bls.n	9c7c <__aeabi_ddiv+0x338>
    9c7a:	e107      	b.n	9e8c <__aeabi_ddiv+0x548>
    9c7c:	4288      	cmp	r0, r1
    9c7e:	d800      	bhi.n	9c82 <__aeabi_ddiv+0x33e>
    9c80:	e104      	b.n	9e8c <__aeabi_ddiv+0x548>
    9c82:	3d02      	subs	r5, #2
    9c84:	4441      	add	r1, r8
    9c86:	9b04      	ldr	r3, [sp, #16]
    9c88:	1acb      	subs	r3, r1, r3
    9c8a:	0018      	movs	r0, r3
    9c8c:	0039      	movs	r1, r7
    9c8e:	9304      	str	r3, [sp, #16]
    9c90:	f7ff fa90 	bl	91b4 <__udivsi3>
    9c94:	9b01      	ldr	r3, [sp, #4]
    9c96:	4682      	mov	sl, r0
    9c98:	4343      	muls	r3, r0
    9c9a:	0039      	movs	r1, r7
    9c9c:	9804      	ldr	r0, [sp, #16]
    9c9e:	9301      	str	r3, [sp, #4]
    9ca0:	f7ff fb0e 	bl	92c0 <__aeabi_uidivmod>
    9ca4:	9801      	ldr	r0, [sp, #4]
    9ca6:	040b      	lsls	r3, r1, #16
    9ca8:	0431      	lsls	r1, r6, #16
    9caa:	0c09      	lsrs	r1, r1, #16
    9cac:	4319      	orrs	r1, r3
    9cae:	4288      	cmp	r0, r1
    9cb0:	d90d      	bls.n	9cce <__aeabi_ddiv+0x38a>
    9cb2:	4653      	mov	r3, sl
    9cb4:	4441      	add	r1, r8
    9cb6:	3b01      	subs	r3, #1
    9cb8:	4588      	cmp	r8, r1
    9cba:	d900      	bls.n	9cbe <__aeabi_ddiv+0x37a>
    9cbc:	e0e8      	b.n	9e90 <__aeabi_ddiv+0x54c>
    9cbe:	4288      	cmp	r0, r1
    9cc0:	d800      	bhi.n	9cc4 <__aeabi_ddiv+0x380>
    9cc2:	e0e5      	b.n	9e90 <__aeabi_ddiv+0x54c>
    9cc4:	2302      	movs	r3, #2
    9cc6:	425b      	negs	r3, r3
    9cc8:	469c      	mov	ip, r3
    9cca:	4441      	add	r1, r8
    9ccc:	44e2      	add	sl, ip
    9cce:	9b01      	ldr	r3, [sp, #4]
    9cd0:	042d      	lsls	r5, r5, #16
    9cd2:	1ace      	subs	r6, r1, r3
    9cd4:	4651      	mov	r1, sl
    9cd6:	4329      	orrs	r1, r5
    9cd8:	9d05      	ldr	r5, [sp, #20]
    9cda:	464f      	mov	r7, r9
    9cdc:	002a      	movs	r2, r5
    9cde:	040b      	lsls	r3, r1, #16
    9ce0:	0c08      	lsrs	r0, r1, #16
    9ce2:	0c1b      	lsrs	r3, r3, #16
    9ce4:	435a      	muls	r2, r3
    9ce6:	4345      	muls	r5, r0
    9ce8:	437b      	muls	r3, r7
    9cea:	4378      	muls	r0, r7
    9cec:	195b      	adds	r3, r3, r5
    9cee:	0c17      	lsrs	r7, r2, #16
    9cf0:	18fb      	adds	r3, r7, r3
    9cf2:	429d      	cmp	r5, r3
    9cf4:	d903      	bls.n	9cfe <__aeabi_ddiv+0x3ba>
    9cf6:	2580      	movs	r5, #128	; 0x80
    9cf8:	026d      	lsls	r5, r5, #9
    9cfa:	46ac      	mov	ip, r5
    9cfc:	4460      	add	r0, ip
    9cfe:	0c1d      	lsrs	r5, r3, #16
    9d00:	0412      	lsls	r2, r2, #16
    9d02:	041b      	lsls	r3, r3, #16
    9d04:	0c12      	lsrs	r2, r2, #16
    9d06:	1828      	adds	r0, r5, r0
    9d08:	189b      	adds	r3, r3, r2
    9d0a:	4286      	cmp	r6, r0
    9d0c:	d200      	bcs.n	9d10 <__aeabi_ddiv+0x3cc>
    9d0e:	e093      	b.n	9e38 <__aeabi_ddiv+0x4f4>
    9d10:	d100      	bne.n	9d14 <__aeabi_ddiv+0x3d0>
    9d12:	e08e      	b.n	9e32 <__aeabi_ddiv+0x4ee>
    9d14:	2301      	movs	r3, #1
    9d16:	4319      	orrs	r1, r3
    9d18:	4ba0      	ldr	r3, [pc, #640]	; (9f9c <__aeabi_ddiv+0x658>)
    9d1a:	18e3      	adds	r3, r4, r3
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	dc00      	bgt.n	9d22 <__aeabi_ddiv+0x3de>
    9d20:	e099      	b.n	9e56 <__aeabi_ddiv+0x512>
    9d22:	074a      	lsls	r2, r1, #29
    9d24:	d000      	beq.n	9d28 <__aeabi_ddiv+0x3e4>
    9d26:	e09e      	b.n	9e66 <__aeabi_ddiv+0x522>
    9d28:	465a      	mov	r2, fp
    9d2a:	01d2      	lsls	r2, r2, #7
    9d2c:	d506      	bpl.n	9d3c <__aeabi_ddiv+0x3f8>
    9d2e:	465a      	mov	r2, fp
    9d30:	4b9b      	ldr	r3, [pc, #620]	; (9fa0 <__aeabi_ddiv+0x65c>)
    9d32:	401a      	ands	r2, r3
    9d34:	2380      	movs	r3, #128	; 0x80
    9d36:	4693      	mov	fp, r2
    9d38:	00db      	lsls	r3, r3, #3
    9d3a:	18e3      	adds	r3, r4, r3
    9d3c:	4a99      	ldr	r2, [pc, #612]	; (9fa4 <__aeabi_ddiv+0x660>)
    9d3e:	4293      	cmp	r3, r2
    9d40:	dd68      	ble.n	9e14 <__aeabi_ddiv+0x4d0>
    9d42:	2301      	movs	r3, #1
    9d44:	9a02      	ldr	r2, [sp, #8]
    9d46:	4c98      	ldr	r4, [pc, #608]	; (9fa8 <__aeabi_ddiv+0x664>)
    9d48:	401a      	ands	r2, r3
    9d4a:	2300      	movs	r3, #0
    9d4c:	4694      	mov	ip, r2
    9d4e:	4698      	mov	r8, r3
    9d50:	2200      	movs	r2, #0
    9d52:	e6c5      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9d54:	2280      	movs	r2, #128	; 0x80
    9d56:	464b      	mov	r3, r9
    9d58:	0312      	lsls	r2, r2, #12
    9d5a:	4213      	tst	r3, r2
    9d5c:	d00a      	beq.n	9d74 <__aeabi_ddiv+0x430>
    9d5e:	465b      	mov	r3, fp
    9d60:	4213      	tst	r3, r2
    9d62:	d106      	bne.n	9d72 <__aeabi_ddiv+0x42e>
    9d64:	431a      	orrs	r2, r3
    9d66:	0312      	lsls	r2, r2, #12
    9d68:	0b12      	lsrs	r2, r2, #12
    9d6a:	46ac      	mov	ip, r5
    9d6c:	4688      	mov	r8, r1
    9d6e:	4c8e      	ldr	r4, [pc, #568]	; (9fa8 <__aeabi_ddiv+0x664>)
    9d70:	e6b6      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9d72:	464b      	mov	r3, r9
    9d74:	431a      	orrs	r2, r3
    9d76:	0312      	lsls	r2, r2, #12
    9d78:	0b12      	lsrs	r2, r2, #12
    9d7a:	46bc      	mov	ip, r7
    9d7c:	4c8a      	ldr	r4, [pc, #552]	; (9fa8 <__aeabi_ddiv+0x664>)
    9d7e:	e6af      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9d80:	0003      	movs	r3, r0
    9d82:	465a      	mov	r2, fp
    9d84:	3b28      	subs	r3, #40	; 0x28
    9d86:	409a      	lsls	r2, r3
    9d88:	2300      	movs	r3, #0
    9d8a:	4691      	mov	r9, r2
    9d8c:	4698      	mov	r8, r3
    9d8e:	e657      	b.n	9a40 <__aeabi_ddiv+0xfc>
    9d90:	4658      	mov	r0, fp
    9d92:	f000 ffdf 	bl	ad54 <__clzsi2>
    9d96:	3020      	adds	r0, #32
    9d98:	e640      	b.n	9a1c <__aeabi_ddiv+0xd8>
    9d9a:	0003      	movs	r3, r0
    9d9c:	4652      	mov	r2, sl
    9d9e:	3b28      	subs	r3, #40	; 0x28
    9da0:	409a      	lsls	r2, r3
    9da2:	2100      	movs	r1, #0
    9da4:	4693      	mov	fp, r2
    9da6:	e677      	b.n	9a98 <__aeabi_ddiv+0x154>
    9da8:	f000 ffd4 	bl	ad54 <__clzsi2>
    9dac:	3020      	adds	r0, #32
    9dae:	e65f      	b.n	9a70 <__aeabi_ddiv+0x12c>
    9db0:	4588      	cmp	r8, r1
    9db2:	d200      	bcs.n	9db6 <__aeabi_ddiv+0x472>
    9db4:	e6c7      	b.n	9b46 <__aeabi_ddiv+0x202>
    9db6:	464b      	mov	r3, r9
    9db8:	07de      	lsls	r6, r3, #31
    9dba:	085d      	lsrs	r5, r3, #1
    9dbc:	4643      	mov	r3, r8
    9dbe:	085b      	lsrs	r3, r3, #1
    9dc0:	431e      	orrs	r6, r3
    9dc2:	4643      	mov	r3, r8
    9dc4:	07db      	lsls	r3, r3, #31
    9dc6:	469a      	mov	sl, r3
    9dc8:	e6c2      	b.n	9b50 <__aeabi_ddiv+0x20c>
    9dca:	2500      	movs	r5, #0
    9dcc:	4592      	cmp	sl, r2
    9dce:	d300      	bcc.n	9dd2 <__aeabi_ddiv+0x48e>
    9dd0:	e733      	b.n	9c3a <__aeabi_ddiv+0x2f6>
    9dd2:	9e03      	ldr	r6, [sp, #12]
    9dd4:	4659      	mov	r1, fp
    9dd6:	46b4      	mov	ip, r6
    9dd8:	44e2      	add	sl, ip
    9dda:	45b2      	cmp	sl, r6
    9ddc:	41ad      	sbcs	r5, r5
    9dde:	426d      	negs	r5, r5
    9de0:	4445      	add	r5, r8
    9de2:	18eb      	adds	r3, r5, r3
    9de4:	3901      	subs	r1, #1
    9de6:	4598      	cmp	r8, r3
    9de8:	d207      	bcs.n	9dfa <__aeabi_ddiv+0x4b6>
    9dea:	4298      	cmp	r0, r3
    9dec:	d900      	bls.n	9df0 <__aeabi_ddiv+0x4ac>
    9dee:	e07f      	b.n	9ef0 <__aeabi_ddiv+0x5ac>
    9df0:	d100      	bne.n	9df4 <__aeabi_ddiv+0x4b0>
    9df2:	e0bc      	b.n	9f6e <__aeabi_ddiv+0x62a>
    9df4:	1a1d      	subs	r5, r3, r0
    9df6:	468b      	mov	fp, r1
    9df8:	e71f      	b.n	9c3a <__aeabi_ddiv+0x2f6>
    9dfa:	4598      	cmp	r8, r3
    9dfc:	d1fa      	bne.n	9df4 <__aeabi_ddiv+0x4b0>
    9dfe:	9d03      	ldr	r5, [sp, #12]
    9e00:	4555      	cmp	r5, sl
    9e02:	d9f2      	bls.n	9dea <__aeabi_ddiv+0x4a6>
    9e04:	4643      	mov	r3, r8
    9e06:	468b      	mov	fp, r1
    9e08:	1a1d      	subs	r5, r3, r0
    9e0a:	e716      	b.n	9c3a <__aeabi_ddiv+0x2f6>
    9e0c:	469b      	mov	fp, r3
    9e0e:	e6ca      	b.n	9ba6 <__aeabi_ddiv+0x262>
    9e10:	0015      	movs	r5, r2
    9e12:	e6e7      	b.n	9be4 <__aeabi_ddiv+0x2a0>
    9e14:	465a      	mov	r2, fp
    9e16:	08c9      	lsrs	r1, r1, #3
    9e18:	0752      	lsls	r2, r2, #29
    9e1a:	430a      	orrs	r2, r1
    9e1c:	055b      	lsls	r3, r3, #21
    9e1e:	4690      	mov	r8, r2
    9e20:	0d5c      	lsrs	r4, r3, #21
    9e22:	465a      	mov	r2, fp
    9e24:	2301      	movs	r3, #1
    9e26:	9902      	ldr	r1, [sp, #8]
    9e28:	0252      	lsls	r2, r2, #9
    9e2a:	4019      	ands	r1, r3
    9e2c:	0b12      	lsrs	r2, r2, #12
    9e2e:	468c      	mov	ip, r1
    9e30:	e656      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9e32:	2b00      	cmp	r3, #0
    9e34:	d100      	bne.n	9e38 <__aeabi_ddiv+0x4f4>
    9e36:	e76f      	b.n	9d18 <__aeabi_ddiv+0x3d4>
    9e38:	4446      	add	r6, r8
    9e3a:	1e4a      	subs	r2, r1, #1
    9e3c:	45b0      	cmp	r8, r6
    9e3e:	d929      	bls.n	9e94 <__aeabi_ddiv+0x550>
    9e40:	0011      	movs	r1, r2
    9e42:	4286      	cmp	r6, r0
    9e44:	d000      	beq.n	9e48 <__aeabi_ddiv+0x504>
    9e46:	e765      	b.n	9d14 <__aeabi_ddiv+0x3d0>
    9e48:	9a03      	ldr	r2, [sp, #12]
    9e4a:	4293      	cmp	r3, r2
    9e4c:	d000      	beq.n	9e50 <__aeabi_ddiv+0x50c>
    9e4e:	e761      	b.n	9d14 <__aeabi_ddiv+0x3d0>
    9e50:	e762      	b.n	9d18 <__aeabi_ddiv+0x3d4>
    9e52:	2101      	movs	r1, #1
    9e54:	4249      	negs	r1, r1
    9e56:	2001      	movs	r0, #1
    9e58:	1ac2      	subs	r2, r0, r3
    9e5a:	2a38      	cmp	r2, #56	; 0x38
    9e5c:	dd21      	ble.n	9ea2 <__aeabi_ddiv+0x55e>
    9e5e:	9b02      	ldr	r3, [sp, #8]
    9e60:	4003      	ands	r3, r0
    9e62:	469c      	mov	ip, r3
    9e64:	e638      	b.n	9ad8 <__aeabi_ddiv+0x194>
    9e66:	220f      	movs	r2, #15
    9e68:	400a      	ands	r2, r1
    9e6a:	2a04      	cmp	r2, #4
    9e6c:	d100      	bne.n	9e70 <__aeabi_ddiv+0x52c>
    9e6e:	e75b      	b.n	9d28 <__aeabi_ddiv+0x3e4>
    9e70:	000a      	movs	r2, r1
    9e72:	1d11      	adds	r1, r2, #4
    9e74:	4291      	cmp	r1, r2
    9e76:	4192      	sbcs	r2, r2
    9e78:	4252      	negs	r2, r2
    9e7a:	4493      	add	fp, r2
    9e7c:	e754      	b.n	9d28 <__aeabi_ddiv+0x3e4>
    9e7e:	4b47      	ldr	r3, [pc, #284]	; (9f9c <__aeabi_ddiv+0x658>)
    9e80:	18e3      	adds	r3, r4, r3
    9e82:	2b00      	cmp	r3, #0
    9e84:	dde5      	ble.n	9e52 <__aeabi_ddiv+0x50e>
    9e86:	2201      	movs	r2, #1
    9e88:	4252      	negs	r2, r2
    9e8a:	e7f2      	b.n	9e72 <__aeabi_ddiv+0x52e>
    9e8c:	001d      	movs	r5, r3
    9e8e:	e6fa      	b.n	9c86 <__aeabi_ddiv+0x342>
    9e90:	469a      	mov	sl, r3
    9e92:	e71c      	b.n	9cce <__aeabi_ddiv+0x38a>
    9e94:	42b0      	cmp	r0, r6
    9e96:	d839      	bhi.n	9f0c <__aeabi_ddiv+0x5c8>
    9e98:	d06e      	beq.n	9f78 <__aeabi_ddiv+0x634>
    9e9a:	0011      	movs	r1, r2
    9e9c:	e73a      	b.n	9d14 <__aeabi_ddiv+0x3d0>
    9e9e:	9302      	str	r3, [sp, #8]
    9ea0:	e73a      	b.n	9d18 <__aeabi_ddiv+0x3d4>
    9ea2:	2a1f      	cmp	r2, #31
    9ea4:	dc3c      	bgt.n	9f20 <__aeabi_ddiv+0x5dc>
    9ea6:	2320      	movs	r3, #32
    9ea8:	1a9b      	subs	r3, r3, r2
    9eaa:	000c      	movs	r4, r1
    9eac:	4658      	mov	r0, fp
    9eae:	4099      	lsls	r1, r3
    9eb0:	4098      	lsls	r0, r3
    9eb2:	1e4b      	subs	r3, r1, #1
    9eb4:	4199      	sbcs	r1, r3
    9eb6:	465b      	mov	r3, fp
    9eb8:	40d4      	lsrs	r4, r2
    9eba:	40d3      	lsrs	r3, r2
    9ebc:	4320      	orrs	r0, r4
    9ebe:	4308      	orrs	r0, r1
    9ec0:	001a      	movs	r2, r3
    9ec2:	0743      	lsls	r3, r0, #29
    9ec4:	d009      	beq.n	9eda <__aeabi_ddiv+0x596>
    9ec6:	230f      	movs	r3, #15
    9ec8:	4003      	ands	r3, r0
    9eca:	2b04      	cmp	r3, #4
    9ecc:	d005      	beq.n	9eda <__aeabi_ddiv+0x596>
    9ece:	0001      	movs	r1, r0
    9ed0:	1d08      	adds	r0, r1, #4
    9ed2:	4288      	cmp	r0, r1
    9ed4:	419b      	sbcs	r3, r3
    9ed6:	425b      	negs	r3, r3
    9ed8:	18d2      	adds	r2, r2, r3
    9eda:	0213      	lsls	r3, r2, #8
    9edc:	d53a      	bpl.n	9f54 <__aeabi_ddiv+0x610>
    9ede:	2301      	movs	r3, #1
    9ee0:	9a02      	ldr	r2, [sp, #8]
    9ee2:	2401      	movs	r4, #1
    9ee4:	401a      	ands	r2, r3
    9ee6:	2300      	movs	r3, #0
    9ee8:	4694      	mov	ip, r2
    9eea:	4698      	mov	r8, r3
    9eec:	2200      	movs	r2, #0
    9eee:	e5f7      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9ef0:	2102      	movs	r1, #2
    9ef2:	4249      	negs	r1, r1
    9ef4:	468c      	mov	ip, r1
    9ef6:	9d03      	ldr	r5, [sp, #12]
    9ef8:	44e3      	add	fp, ip
    9efa:	46ac      	mov	ip, r5
    9efc:	44e2      	add	sl, ip
    9efe:	45aa      	cmp	sl, r5
    9f00:	41ad      	sbcs	r5, r5
    9f02:	426d      	negs	r5, r5
    9f04:	4445      	add	r5, r8
    9f06:	18ed      	adds	r5, r5, r3
    9f08:	1a2d      	subs	r5, r5, r0
    9f0a:	e696      	b.n	9c3a <__aeabi_ddiv+0x2f6>
    9f0c:	1e8a      	subs	r2, r1, #2
    9f0e:	9903      	ldr	r1, [sp, #12]
    9f10:	004d      	lsls	r5, r1, #1
    9f12:	428d      	cmp	r5, r1
    9f14:	4189      	sbcs	r1, r1
    9f16:	4249      	negs	r1, r1
    9f18:	4441      	add	r1, r8
    9f1a:	1876      	adds	r6, r6, r1
    9f1c:	9503      	str	r5, [sp, #12]
    9f1e:	e78f      	b.n	9e40 <__aeabi_ddiv+0x4fc>
    9f20:	201f      	movs	r0, #31
    9f22:	4240      	negs	r0, r0
    9f24:	1ac3      	subs	r3, r0, r3
    9f26:	4658      	mov	r0, fp
    9f28:	40d8      	lsrs	r0, r3
    9f2a:	0003      	movs	r3, r0
    9f2c:	2a20      	cmp	r2, #32
    9f2e:	d028      	beq.n	9f82 <__aeabi_ddiv+0x63e>
    9f30:	2040      	movs	r0, #64	; 0x40
    9f32:	465d      	mov	r5, fp
    9f34:	1a82      	subs	r2, r0, r2
    9f36:	4095      	lsls	r5, r2
    9f38:	4329      	orrs	r1, r5
    9f3a:	1e4a      	subs	r2, r1, #1
    9f3c:	4191      	sbcs	r1, r2
    9f3e:	4319      	orrs	r1, r3
    9f40:	2307      	movs	r3, #7
    9f42:	2200      	movs	r2, #0
    9f44:	400b      	ands	r3, r1
    9f46:	d009      	beq.n	9f5c <__aeabi_ddiv+0x618>
    9f48:	230f      	movs	r3, #15
    9f4a:	2200      	movs	r2, #0
    9f4c:	400b      	ands	r3, r1
    9f4e:	0008      	movs	r0, r1
    9f50:	2b04      	cmp	r3, #4
    9f52:	d1bd      	bne.n	9ed0 <__aeabi_ddiv+0x58c>
    9f54:	0001      	movs	r1, r0
    9f56:	0753      	lsls	r3, r2, #29
    9f58:	0252      	lsls	r2, r2, #9
    9f5a:	0b12      	lsrs	r2, r2, #12
    9f5c:	08c9      	lsrs	r1, r1, #3
    9f5e:	4319      	orrs	r1, r3
    9f60:	2301      	movs	r3, #1
    9f62:	4688      	mov	r8, r1
    9f64:	9902      	ldr	r1, [sp, #8]
    9f66:	2400      	movs	r4, #0
    9f68:	4019      	ands	r1, r3
    9f6a:	468c      	mov	ip, r1
    9f6c:	e5b8      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9f6e:	4552      	cmp	r2, sl
    9f70:	d8be      	bhi.n	9ef0 <__aeabi_ddiv+0x5ac>
    9f72:	468b      	mov	fp, r1
    9f74:	2500      	movs	r5, #0
    9f76:	e660      	b.n	9c3a <__aeabi_ddiv+0x2f6>
    9f78:	9d03      	ldr	r5, [sp, #12]
    9f7a:	429d      	cmp	r5, r3
    9f7c:	d3c6      	bcc.n	9f0c <__aeabi_ddiv+0x5c8>
    9f7e:	0011      	movs	r1, r2
    9f80:	e762      	b.n	9e48 <__aeabi_ddiv+0x504>
    9f82:	2500      	movs	r5, #0
    9f84:	e7d8      	b.n	9f38 <__aeabi_ddiv+0x5f4>
    9f86:	2280      	movs	r2, #128	; 0x80
    9f88:	465b      	mov	r3, fp
    9f8a:	0312      	lsls	r2, r2, #12
    9f8c:	431a      	orrs	r2, r3
    9f8e:	9b01      	ldr	r3, [sp, #4]
    9f90:	0312      	lsls	r2, r2, #12
    9f92:	0b12      	lsrs	r2, r2, #12
    9f94:	469c      	mov	ip, r3
    9f96:	4688      	mov	r8, r1
    9f98:	4c03      	ldr	r4, [pc, #12]	; (9fa8 <__aeabi_ddiv+0x664>)
    9f9a:	e5a1      	b.n	9ae0 <__aeabi_ddiv+0x19c>
    9f9c:	000003ff 	.word	0x000003ff
    9fa0:	feffffff 	.word	0xfeffffff
    9fa4:	000007fe 	.word	0x000007fe
    9fa8:	000007ff 	.word	0x000007ff

00009fac <__aeabi_dmul>:
    9fac:	b5f0      	push	{r4, r5, r6, r7, lr}
    9fae:	4657      	mov	r7, sl
    9fb0:	4645      	mov	r5, r8
    9fb2:	46de      	mov	lr, fp
    9fb4:	464e      	mov	r6, r9
    9fb6:	b5e0      	push	{r5, r6, r7, lr}
    9fb8:	030c      	lsls	r4, r1, #12
    9fba:	4698      	mov	r8, r3
    9fbc:	004e      	lsls	r6, r1, #1
    9fbe:	0b23      	lsrs	r3, r4, #12
    9fc0:	b087      	sub	sp, #28
    9fc2:	0007      	movs	r7, r0
    9fc4:	4692      	mov	sl, r2
    9fc6:	469b      	mov	fp, r3
    9fc8:	0d76      	lsrs	r6, r6, #21
    9fca:	0fcd      	lsrs	r5, r1, #31
    9fcc:	2e00      	cmp	r6, #0
    9fce:	d06b      	beq.n	a0a8 <__aeabi_dmul+0xfc>
    9fd0:	4b6d      	ldr	r3, [pc, #436]	; (a188 <__aeabi_dmul+0x1dc>)
    9fd2:	429e      	cmp	r6, r3
    9fd4:	d035      	beq.n	a042 <__aeabi_dmul+0x96>
    9fd6:	2480      	movs	r4, #128	; 0x80
    9fd8:	465b      	mov	r3, fp
    9fda:	0f42      	lsrs	r2, r0, #29
    9fdc:	0424      	lsls	r4, r4, #16
    9fde:	00db      	lsls	r3, r3, #3
    9fe0:	4314      	orrs	r4, r2
    9fe2:	431c      	orrs	r4, r3
    9fe4:	00c3      	lsls	r3, r0, #3
    9fe6:	4699      	mov	r9, r3
    9fe8:	4b68      	ldr	r3, [pc, #416]	; (a18c <__aeabi_dmul+0x1e0>)
    9fea:	46a3      	mov	fp, r4
    9fec:	469c      	mov	ip, r3
    9fee:	2300      	movs	r3, #0
    9ff0:	2700      	movs	r7, #0
    9ff2:	4466      	add	r6, ip
    9ff4:	9302      	str	r3, [sp, #8]
    9ff6:	4643      	mov	r3, r8
    9ff8:	031c      	lsls	r4, r3, #12
    9ffa:	005a      	lsls	r2, r3, #1
    9ffc:	0fdb      	lsrs	r3, r3, #31
    9ffe:	4650      	mov	r0, sl
    a000:	0b24      	lsrs	r4, r4, #12
    a002:	0d52      	lsrs	r2, r2, #21
    a004:	4698      	mov	r8, r3
    a006:	d100      	bne.n	a00a <__aeabi_dmul+0x5e>
    a008:	e076      	b.n	a0f8 <__aeabi_dmul+0x14c>
    a00a:	4b5f      	ldr	r3, [pc, #380]	; (a188 <__aeabi_dmul+0x1dc>)
    a00c:	429a      	cmp	r2, r3
    a00e:	d06d      	beq.n	a0ec <__aeabi_dmul+0x140>
    a010:	2380      	movs	r3, #128	; 0x80
    a012:	0f41      	lsrs	r1, r0, #29
    a014:	041b      	lsls	r3, r3, #16
    a016:	430b      	orrs	r3, r1
    a018:	495c      	ldr	r1, [pc, #368]	; (a18c <__aeabi_dmul+0x1e0>)
    a01a:	00e4      	lsls	r4, r4, #3
    a01c:	468c      	mov	ip, r1
    a01e:	431c      	orrs	r4, r3
    a020:	00c3      	lsls	r3, r0, #3
    a022:	2000      	movs	r0, #0
    a024:	4462      	add	r2, ip
    a026:	4641      	mov	r1, r8
    a028:	18b6      	adds	r6, r6, r2
    a02a:	4069      	eors	r1, r5
    a02c:	1c72      	adds	r2, r6, #1
    a02e:	9101      	str	r1, [sp, #4]
    a030:	4694      	mov	ip, r2
    a032:	4307      	orrs	r7, r0
    a034:	2f0f      	cmp	r7, #15
    a036:	d900      	bls.n	a03a <__aeabi_dmul+0x8e>
    a038:	e0b0      	b.n	a19c <__aeabi_dmul+0x1f0>
    a03a:	4a55      	ldr	r2, [pc, #340]	; (a190 <__aeabi_dmul+0x1e4>)
    a03c:	00bf      	lsls	r7, r7, #2
    a03e:	59d2      	ldr	r2, [r2, r7]
    a040:	4697      	mov	pc, r2
    a042:	465b      	mov	r3, fp
    a044:	4303      	orrs	r3, r0
    a046:	4699      	mov	r9, r3
    a048:	d000      	beq.n	a04c <__aeabi_dmul+0xa0>
    a04a:	e087      	b.n	a15c <__aeabi_dmul+0x1b0>
    a04c:	2300      	movs	r3, #0
    a04e:	469b      	mov	fp, r3
    a050:	3302      	adds	r3, #2
    a052:	2708      	movs	r7, #8
    a054:	9302      	str	r3, [sp, #8]
    a056:	e7ce      	b.n	9ff6 <__aeabi_dmul+0x4a>
    a058:	4642      	mov	r2, r8
    a05a:	9201      	str	r2, [sp, #4]
    a05c:	2802      	cmp	r0, #2
    a05e:	d067      	beq.n	a130 <__aeabi_dmul+0x184>
    a060:	2803      	cmp	r0, #3
    a062:	d100      	bne.n	a066 <__aeabi_dmul+0xba>
    a064:	e20e      	b.n	a484 <__aeabi_dmul+0x4d8>
    a066:	2801      	cmp	r0, #1
    a068:	d000      	beq.n	a06c <__aeabi_dmul+0xc0>
    a06a:	e162      	b.n	a332 <__aeabi_dmul+0x386>
    a06c:	2300      	movs	r3, #0
    a06e:	2400      	movs	r4, #0
    a070:	2200      	movs	r2, #0
    a072:	4699      	mov	r9, r3
    a074:	9901      	ldr	r1, [sp, #4]
    a076:	4001      	ands	r1, r0
    a078:	b2cd      	uxtb	r5, r1
    a07a:	2100      	movs	r1, #0
    a07c:	0312      	lsls	r2, r2, #12
    a07e:	0d0b      	lsrs	r3, r1, #20
    a080:	0b12      	lsrs	r2, r2, #12
    a082:	051b      	lsls	r3, r3, #20
    a084:	4313      	orrs	r3, r2
    a086:	4a43      	ldr	r2, [pc, #268]	; (a194 <__aeabi_dmul+0x1e8>)
    a088:	0524      	lsls	r4, r4, #20
    a08a:	4013      	ands	r3, r2
    a08c:	431c      	orrs	r4, r3
    a08e:	0064      	lsls	r4, r4, #1
    a090:	07ed      	lsls	r5, r5, #31
    a092:	0864      	lsrs	r4, r4, #1
    a094:	432c      	orrs	r4, r5
    a096:	4648      	mov	r0, r9
    a098:	0021      	movs	r1, r4
    a09a:	b007      	add	sp, #28
    a09c:	bc3c      	pop	{r2, r3, r4, r5}
    a09e:	4690      	mov	r8, r2
    a0a0:	4699      	mov	r9, r3
    a0a2:	46a2      	mov	sl, r4
    a0a4:	46ab      	mov	fp, r5
    a0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a0a8:	4303      	orrs	r3, r0
    a0aa:	4699      	mov	r9, r3
    a0ac:	d04f      	beq.n	a14e <__aeabi_dmul+0x1a2>
    a0ae:	465b      	mov	r3, fp
    a0b0:	2b00      	cmp	r3, #0
    a0b2:	d100      	bne.n	a0b6 <__aeabi_dmul+0x10a>
    a0b4:	e189      	b.n	a3ca <__aeabi_dmul+0x41e>
    a0b6:	4658      	mov	r0, fp
    a0b8:	f000 fe4c 	bl	ad54 <__clzsi2>
    a0bc:	0003      	movs	r3, r0
    a0be:	3b0b      	subs	r3, #11
    a0c0:	2b1c      	cmp	r3, #28
    a0c2:	dd00      	ble.n	a0c6 <__aeabi_dmul+0x11a>
    a0c4:	e17a      	b.n	a3bc <__aeabi_dmul+0x410>
    a0c6:	221d      	movs	r2, #29
    a0c8:	1ad3      	subs	r3, r2, r3
    a0ca:	003a      	movs	r2, r7
    a0cc:	0001      	movs	r1, r0
    a0ce:	465c      	mov	r4, fp
    a0d0:	40da      	lsrs	r2, r3
    a0d2:	3908      	subs	r1, #8
    a0d4:	408c      	lsls	r4, r1
    a0d6:	0013      	movs	r3, r2
    a0d8:	408f      	lsls	r7, r1
    a0da:	4323      	orrs	r3, r4
    a0dc:	469b      	mov	fp, r3
    a0de:	46b9      	mov	r9, r7
    a0e0:	2300      	movs	r3, #0
    a0e2:	4e2d      	ldr	r6, [pc, #180]	; (a198 <__aeabi_dmul+0x1ec>)
    a0e4:	2700      	movs	r7, #0
    a0e6:	1a36      	subs	r6, r6, r0
    a0e8:	9302      	str	r3, [sp, #8]
    a0ea:	e784      	b.n	9ff6 <__aeabi_dmul+0x4a>
    a0ec:	4653      	mov	r3, sl
    a0ee:	4323      	orrs	r3, r4
    a0f0:	d12a      	bne.n	a148 <__aeabi_dmul+0x19c>
    a0f2:	2400      	movs	r4, #0
    a0f4:	2002      	movs	r0, #2
    a0f6:	e796      	b.n	a026 <__aeabi_dmul+0x7a>
    a0f8:	4653      	mov	r3, sl
    a0fa:	4323      	orrs	r3, r4
    a0fc:	d020      	beq.n	a140 <__aeabi_dmul+0x194>
    a0fe:	2c00      	cmp	r4, #0
    a100:	d100      	bne.n	a104 <__aeabi_dmul+0x158>
    a102:	e157      	b.n	a3b4 <__aeabi_dmul+0x408>
    a104:	0020      	movs	r0, r4
    a106:	f000 fe25 	bl	ad54 <__clzsi2>
    a10a:	0003      	movs	r3, r0
    a10c:	3b0b      	subs	r3, #11
    a10e:	2b1c      	cmp	r3, #28
    a110:	dd00      	ble.n	a114 <__aeabi_dmul+0x168>
    a112:	e149      	b.n	a3a8 <__aeabi_dmul+0x3fc>
    a114:	211d      	movs	r1, #29
    a116:	1acb      	subs	r3, r1, r3
    a118:	4651      	mov	r1, sl
    a11a:	0002      	movs	r2, r0
    a11c:	40d9      	lsrs	r1, r3
    a11e:	4653      	mov	r3, sl
    a120:	3a08      	subs	r2, #8
    a122:	4094      	lsls	r4, r2
    a124:	4093      	lsls	r3, r2
    a126:	430c      	orrs	r4, r1
    a128:	4a1b      	ldr	r2, [pc, #108]	; (a198 <__aeabi_dmul+0x1ec>)
    a12a:	1a12      	subs	r2, r2, r0
    a12c:	2000      	movs	r0, #0
    a12e:	e77a      	b.n	a026 <__aeabi_dmul+0x7a>
    a130:	2501      	movs	r5, #1
    a132:	9b01      	ldr	r3, [sp, #4]
    a134:	4c14      	ldr	r4, [pc, #80]	; (a188 <__aeabi_dmul+0x1dc>)
    a136:	401d      	ands	r5, r3
    a138:	2300      	movs	r3, #0
    a13a:	2200      	movs	r2, #0
    a13c:	4699      	mov	r9, r3
    a13e:	e79c      	b.n	a07a <__aeabi_dmul+0xce>
    a140:	2400      	movs	r4, #0
    a142:	2200      	movs	r2, #0
    a144:	2001      	movs	r0, #1
    a146:	e76e      	b.n	a026 <__aeabi_dmul+0x7a>
    a148:	4653      	mov	r3, sl
    a14a:	2003      	movs	r0, #3
    a14c:	e76b      	b.n	a026 <__aeabi_dmul+0x7a>
    a14e:	2300      	movs	r3, #0
    a150:	469b      	mov	fp, r3
    a152:	3301      	adds	r3, #1
    a154:	2704      	movs	r7, #4
    a156:	2600      	movs	r6, #0
    a158:	9302      	str	r3, [sp, #8]
    a15a:	e74c      	b.n	9ff6 <__aeabi_dmul+0x4a>
    a15c:	2303      	movs	r3, #3
    a15e:	4681      	mov	r9, r0
    a160:	270c      	movs	r7, #12
    a162:	9302      	str	r3, [sp, #8]
    a164:	e747      	b.n	9ff6 <__aeabi_dmul+0x4a>
    a166:	2280      	movs	r2, #128	; 0x80
    a168:	2300      	movs	r3, #0
    a16a:	2500      	movs	r5, #0
    a16c:	0312      	lsls	r2, r2, #12
    a16e:	4699      	mov	r9, r3
    a170:	4c05      	ldr	r4, [pc, #20]	; (a188 <__aeabi_dmul+0x1dc>)
    a172:	e782      	b.n	a07a <__aeabi_dmul+0xce>
    a174:	465c      	mov	r4, fp
    a176:	464b      	mov	r3, r9
    a178:	9802      	ldr	r0, [sp, #8]
    a17a:	e76f      	b.n	a05c <__aeabi_dmul+0xb0>
    a17c:	465c      	mov	r4, fp
    a17e:	464b      	mov	r3, r9
    a180:	9501      	str	r5, [sp, #4]
    a182:	9802      	ldr	r0, [sp, #8]
    a184:	e76a      	b.n	a05c <__aeabi_dmul+0xb0>
    a186:	46c0      	nop			; (mov r8, r8)
    a188:	000007ff 	.word	0x000007ff
    a18c:	fffffc01 	.word	0xfffffc01
    a190:	00018af8 	.word	0x00018af8
    a194:	800fffff 	.word	0x800fffff
    a198:	fffffc0d 	.word	0xfffffc0d
    a19c:	464a      	mov	r2, r9
    a19e:	4649      	mov	r1, r9
    a1a0:	0c17      	lsrs	r7, r2, #16
    a1a2:	0c1a      	lsrs	r2, r3, #16
    a1a4:	041b      	lsls	r3, r3, #16
    a1a6:	0c1b      	lsrs	r3, r3, #16
    a1a8:	0408      	lsls	r0, r1, #16
    a1aa:	0019      	movs	r1, r3
    a1ac:	0c00      	lsrs	r0, r0, #16
    a1ae:	4341      	muls	r1, r0
    a1b0:	0015      	movs	r5, r2
    a1b2:	4688      	mov	r8, r1
    a1b4:	0019      	movs	r1, r3
    a1b6:	437d      	muls	r5, r7
    a1b8:	4379      	muls	r1, r7
    a1ba:	9503      	str	r5, [sp, #12]
    a1bc:	4689      	mov	r9, r1
    a1be:	0029      	movs	r1, r5
    a1c0:	0015      	movs	r5, r2
    a1c2:	4345      	muls	r5, r0
    a1c4:	444d      	add	r5, r9
    a1c6:	9502      	str	r5, [sp, #8]
    a1c8:	4645      	mov	r5, r8
    a1ca:	0c2d      	lsrs	r5, r5, #16
    a1cc:	46aa      	mov	sl, r5
    a1ce:	9d02      	ldr	r5, [sp, #8]
    a1d0:	4455      	add	r5, sl
    a1d2:	45a9      	cmp	r9, r5
    a1d4:	d906      	bls.n	a1e4 <__aeabi_dmul+0x238>
    a1d6:	468a      	mov	sl, r1
    a1d8:	2180      	movs	r1, #128	; 0x80
    a1da:	0249      	lsls	r1, r1, #9
    a1dc:	4689      	mov	r9, r1
    a1de:	44ca      	add	sl, r9
    a1e0:	4651      	mov	r1, sl
    a1e2:	9103      	str	r1, [sp, #12]
    a1e4:	0c29      	lsrs	r1, r5, #16
    a1e6:	9104      	str	r1, [sp, #16]
    a1e8:	4641      	mov	r1, r8
    a1ea:	0409      	lsls	r1, r1, #16
    a1ec:	042d      	lsls	r5, r5, #16
    a1ee:	0c09      	lsrs	r1, r1, #16
    a1f0:	4688      	mov	r8, r1
    a1f2:	0029      	movs	r1, r5
    a1f4:	0c25      	lsrs	r5, r4, #16
    a1f6:	0424      	lsls	r4, r4, #16
    a1f8:	4441      	add	r1, r8
    a1fa:	0c24      	lsrs	r4, r4, #16
    a1fc:	9105      	str	r1, [sp, #20]
    a1fe:	0021      	movs	r1, r4
    a200:	4341      	muls	r1, r0
    a202:	4688      	mov	r8, r1
    a204:	0021      	movs	r1, r4
    a206:	4379      	muls	r1, r7
    a208:	468a      	mov	sl, r1
    a20a:	4368      	muls	r0, r5
    a20c:	4641      	mov	r1, r8
    a20e:	4450      	add	r0, sl
    a210:	4681      	mov	r9, r0
    a212:	0c08      	lsrs	r0, r1, #16
    a214:	4448      	add	r0, r9
    a216:	436f      	muls	r7, r5
    a218:	4582      	cmp	sl, r0
    a21a:	d903      	bls.n	a224 <__aeabi_dmul+0x278>
    a21c:	2180      	movs	r1, #128	; 0x80
    a21e:	0249      	lsls	r1, r1, #9
    a220:	4689      	mov	r9, r1
    a222:	444f      	add	r7, r9
    a224:	0c01      	lsrs	r1, r0, #16
    a226:	4689      	mov	r9, r1
    a228:	0039      	movs	r1, r7
    a22a:	4449      	add	r1, r9
    a22c:	9102      	str	r1, [sp, #8]
    a22e:	4641      	mov	r1, r8
    a230:	040f      	lsls	r7, r1, #16
    a232:	9904      	ldr	r1, [sp, #16]
    a234:	0c3f      	lsrs	r7, r7, #16
    a236:	4688      	mov	r8, r1
    a238:	0400      	lsls	r0, r0, #16
    a23a:	19c0      	adds	r0, r0, r7
    a23c:	4480      	add	r8, r0
    a23e:	4641      	mov	r1, r8
    a240:	9104      	str	r1, [sp, #16]
    a242:	4659      	mov	r1, fp
    a244:	0c0f      	lsrs	r7, r1, #16
    a246:	0409      	lsls	r1, r1, #16
    a248:	0c09      	lsrs	r1, r1, #16
    a24a:	4688      	mov	r8, r1
    a24c:	4359      	muls	r1, r3
    a24e:	468a      	mov	sl, r1
    a250:	0039      	movs	r1, r7
    a252:	4351      	muls	r1, r2
    a254:	4689      	mov	r9, r1
    a256:	4641      	mov	r1, r8
    a258:	434a      	muls	r2, r1
    a25a:	4651      	mov	r1, sl
    a25c:	0c09      	lsrs	r1, r1, #16
    a25e:	468b      	mov	fp, r1
    a260:	437b      	muls	r3, r7
    a262:	18d2      	adds	r2, r2, r3
    a264:	445a      	add	r2, fp
    a266:	4293      	cmp	r3, r2
    a268:	d903      	bls.n	a272 <__aeabi_dmul+0x2c6>
    a26a:	2380      	movs	r3, #128	; 0x80
    a26c:	025b      	lsls	r3, r3, #9
    a26e:	469b      	mov	fp, r3
    a270:	44d9      	add	r9, fp
    a272:	4651      	mov	r1, sl
    a274:	0409      	lsls	r1, r1, #16
    a276:	0c09      	lsrs	r1, r1, #16
    a278:	468a      	mov	sl, r1
    a27a:	4641      	mov	r1, r8
    a27c:	4361      	muls	r1, r4
    a27e:	437c      	muls	r4, r7
    a280:	0c13      	lsrs	r3, r2, #16
    a282:	0412      	lsls	r2, r2, #16
    a284:	444b      	add	r3, r9
    a286:	4452      	add	r2, sl
    a288:	46a1      	mov	r9, r4
    a28a:	468a      	mov	sl, r1
    a28c:	003c      	movs	r4, r7
    a28e:	4641      	mov	r1, r8
    a290:	436c      	muls	r4, r5
    a292:	434d      	muls	r5, r1
    a294:	4651      	mov	r1, sl
    a296:	444d      	add	r5, r9
    a298:	0c0f      	lsrs	r7, r1, #16
    a29a:	197d      	adds	r5, r7, r5
    a29c:	45a9      	cmp	r9, r5
    a29e:	d903      	bls.n	a2a8 <__aeabi_dmul+0x2fc>
    a2a0:	2180      	movs	r1, #128	; 0x80
    a2a2:	0249      	lsls	r1, r1, #9
    a2a4:	4688      	mov	r8, r1
    a2a6:	4444      	add	r4, r8
    a2a8:	9f04      	ldr	r7, [sp, #16]
    a2aa:	9903      	ldr	r1, [sp, #12]
    a2ac:	46b8      	mov	r8, r7
    a2ae:	4441      	add	r1, r8
    a2b0:	468b      	mov	fp, r1
    a2b2:	4583      	cmp	fp, r0
    a2b4:	4180      	sbcs	r0, r0
    a2b6:	4241      	negs	r1, r0
    a2b8:	4688      	mov	r8, r1
    a2ba:	4651      	mov	r1, sl
    a2bc:	0408      	lsls	r0, r1, #16
    a2be:	042f      	lsls	r7, r5, #16
    a2c0:	0c00      	lsrs	r0, r0, #16
    a2c2:	183f      	adds	r7, r7, r0
    a2c4:	4658      	mov	r0, fp
    a2c6:	9902      	ldr	r1, [sp, #8]
    a2c8:	1810      	adds	r0, r2, r0
    a2ca:	4689      	mov	r9, r1
    a2cc:	4290      	cmp	r0, r2
    a2ce:	4192      	sbcs	r2, r2
    a2d0:	444f      	add	r7, r9
    a2d2:	46ba      	mov	sl, r7
    a2d4:	4252      	negs	r2, r2
    a2d6:	4699      	mov	r9, r3
    a2d8:	4693      	mov	fp, r2
    a2da:	44c2      	add	sl, r8
    a2dc:	44d1      	add	r9, sl
    a2de:	44cb      	add	fp, r9
    a2e0:	428f      	cmp	r7, r1
    a2e2:	41bf      	sbcs	r7, r7
    a2e4:	45c2      	cmp	sl, r8
    a2e6:	4189      	sbcs	r1, r1
    a2e8:	4599      	cmp	r9, r3
    a2ea:	419b      	sbcs	r3, r3
    a2ec:	4593      	cmp	fp, r2
    a2ee:	4192      	sbcs	r2, r2
    a2f0:	427f      	negs	r7, r7
    a2f2:	4249      	negs	r1, r1
    a2f4:	0c2d      	lsrs	r5, r5, #16
    a2f6:	4252      	negs	r2, r2
    a2f8:	430f      	orrs	r7, r1
    a2fa:	425b      	negs	r3, r3
    a2fc:	4313      	orrs	r3, r2
    a2fe:	197f      	adds	r7, r7, r5
    a300:	18ff      	adds	r7, r7, r3
    a302:	465b      	mov	r3, fp
    a304:	193c      	adds	r4, r7, r4
    a306:	0ddb      	lsrs	r3, r3, #23
    a308:	9a05      	ldr	r2, [sp, #20]
    a30a:	0264      	lsls	r4, r4, #9
    a30c:	431c      	orrs	r4, r3
    a30e:	0243      	lsls	r3, r0, #9
    a310:	4313      	orrs	r3, r2
    a312:	1e5d      	subs	r5, r3, #1
    a314:	41ab      	sbcs	r3, r5
    a316:	465a      	mov	r2, fp
    a318:	0dc0      	lsrs	r0, r0, #23
    a31a:	4303      	orrs	r3, r0
    a31c:	0252      	lsls	r2, r2, #9
    a31e:	4313      	orrs	r3, r2
    a320:	01e2      	lsls	r2, r4, #7
    a322:	d556      	bpl.n	a3d2 <__aeabi_dmul+0x426>
    a324:	2001      	movs	r0, #1
    a326:	085a      	lsrs	r2, r3, #1
    a328:	4003      	ands	r3, r0
    a32a:	4313      	orrs	r3, r2
    a32c:	07e2      	lsls	r2, r4, #31
    a32e:	4313      	orrs	r3, r2
    a330:	0864      	lsrs	r4, r4, #1
    a332:	485a      	ldr	r0, [pc, #360]	; (a49c <__aeabi_dmul+0x4f0>)
    a334:	4460      	add	r0, ip
    a336:	2800      	cmp	r0, #0
    a338:	dd4d      	ble.n	a3d6 <__aeabi_dmul+0x42a>
    a33a:	075a      	lsls	r2, r3, #29
    a33c:	d009      	beq.n	a352 <__aeabi_dmul+0x3a6>
    a33e:	220f      	movs	r2, #15
    a340:	401a      	ands	r2, r3
    a342:	2a04      	cmp	r2, #4
    a344:	d005      	beq.n	a352 <__aeabi_dmul+0x3a6>
    a346:	1d1a      	adds	r2, r3, #4
    a348:	429a      	cmp	r2, r3
    a34a:	419b      	sbcs	r3, r3
    a34c:	425b      	negs	r3, r3
    a34e:	18e4      	adds	r4, r4, r3
    a350:	0013      	movs	r3, r2
    a352:	01e2      	lsls	r2, r4, #7
    a354:	d504      	bpl.n	a360 <__aeabi_dmul+0x3b4>
    a356:	2080      	movs	r0, #128	; 0x80
    a358:	4a51      	ldr	r2, [pc, #324]	; (a4a0 <__aeabi_dmul+0x4f4>)
    a35a:	00c0      	lsls	r0, r0, #3
    a35c:	4014      	ands	r4, r2
    a35e:	4460      	add	r0, ip
    a360:	4a50      	ldr	r2, [pc, #320]	; (a4a4 <__aeabi_dmul+0x4f8>)
    a362:	4290      	cmp	r0, r2
    a364:	dd00      	ble.n	a368 <__aeabi_dmul+0x3bc>
    a366:	e6e3      	b.n	a130 <__aeabi_dmul+0x184>
    a368:	2501      	movs	r5, #1
    a36a:	08db      	lsrs	r3, r3, #3
    a36c:	0762      	lsls	r2, r4, #29
    a36e:	431a      	orrs	r2, r3
    a370:	0264      	lsls	r4, r4, #9
    a372:	9b01      	ldr	r3, [sp, #4]
    a374:	4691      	mov	r9, r2
    a376:	0b22      	lsrs	r2, r4, #12
    a378:	0544      	lsls	r4, r0, #21
    a37a:	0d64      	lsrs	r4, r4, #21
    a37c:	401d      	ands	r5, r3
    a37e:	e67c      	b.n	a07a <__aeabi_dmul+0xce>
    a380:	2280      	movs	r2, #128	; 0x80
    a382:	4659      	mov	r1, fp
    a384:	0312      	lsls	r2, r2, #12
    a386:	4211      	tst	r1, r2
    a388:	d008      	beq.n	a39c <__aeabi_dmul+0x3f0>
    a38a:	4214      	tst	r4, r2
    a38c:	d106      	bne.n	a39c <__aeabi_dmul+0x3f0>
    a38e:	4322      	orrs	r2, r4
    a390:	0312      	lsls	r2, r2, #12
    a392:	0b12      	lsrs	r2, r2, #12
    a394:	4645      	mov	r5, r8
    a396:	4699      	mov	r9, r3
    a398:	4c43      	ldr	r4, [pc, #268]	; (a4a8 <__aeabi_dmul+0x4fc>)
    a39a:	e66e      	b.n	a07a <__aeabi_dmul+0xce>
    a39c:	465b      	mov	r3, fp
    a39e:	431a      	orrs	r2, r3
    a3a0:	0312      	lsls	r2, r2, #12
    a3a2:	0b12      	lsrs	r2, r2, #12
    a3a4:	4c40      	ldr	r4, [pc, #256]	; (a4a8 <__aeabi_dmul+0x4fc>)
    a3a6:	e668      	b.n	a07a <__aeabi_dmul+0xce>
    a3a8:	0003      	movs	r3, r0
    a3aa:	4654      	mov	r4, sl
    a3ac:	3b28      	subs	r3, #40	; 0x28
    a3ae:	409c      	lsls	r4, r3
    a3b0:	2300      	movs	r3, #0
    a3b2:	e6b9      	b.n	a128 <__aeabi_dmul+0x17c>
    a3b4:	f000 fcce 	bl	ad54 <__clzsi2>
    a3b8:	3020      	adds	r0, #32
    a3ba:	e6a6      	b.n	a10a <__aeabi_dmul+0x15e>
    a3bc:	0003      	movs	r3, r0
    a3be:	3b28      	subs	r3, #40	; 0x28
    a3c0:	409f      	lsls	r7, r3
    a3c2:	2300      	movs	r3, #0
    a3c4:	46bb      	mov	fp, r7
    a3c6:	4699      	mov	r9, r3
    a3c8:	e68a      	b.n	a0e0 <__aeabi_dmul+0x134>
    a3ca:	f000 fcc3 	bl	ad54 <__clzsi2>
    a3ce:	3020      	adds	r0, #32
    a3d0:	e674      	b.n	a0bc <__aeabi_dmul+0x110>
    a3d2:	46b4      	mov	ip, r6
    a3d4:	e7ad      	b.n	a332 <__aeabi_dmul+0x386>
    a3d6:	2501      	movs	r5, #1
    a3d8:	1a2a      	subs	r2, r5, r0
    a3da:	2a38      	cmp	r2, #56	; 0x38
    a3dc:	dd06      	ble.n	a3ec <__aeabi_dmul+0x440>
    a3de:	9b01      	ldr	r3, [sp, #4]
    a3e0:	2400      	movs	r4, #0
    a3e2:	401d      	ands	r5, r3
    a3e4:	2300      	movs	r3, #0
    a3e6:	2200      	movs	r2, #0
    a3e8:	4699      	mov	r9, r3
    a3ea:	e646      	b.n	a07a <__aeabi_dmul+0xce>
    a3ec:	2a1f      	cmp	r2, #31
    a3ee:	dc21      	bgt.n	a434 <__aeabi_dmul+0x488>
    a3f0:	2520      	movs	r5, #32
    a3f2:	0020      	movs	r0, r4
    a3f4:	1aad      	subs	r5, r5, r2
    a3f6:	001e      	movs	r6, r3
    a3f8:	40ab      	lsls	r3, r5
    a3fa:	40a8      	lsls	r0, r5
    a3fc:	40d6      	lsrs	r6, r2
    a3fe:	1e5d      	subs	r5, r3, #1
    a400:	41ab      	sbcs	r3, r5
    a402:	4330      	orrs	r0, r6
    a404:	4318      	orrs	r0, r3
    a406:	40d4      	lsrs	r4, r2
    a408:	0743      	lsls	r3, r0, #29
    a40a:	d009      	beq.n	a420 <__aeabi_dmul+0x474>
    a40c:	230f      	movs	r3, #15
    a40e:	4003      	ands	r3, r0
    a410:	2b04      	cmp	r3, #4
    a412:	d005      	beq.n	a420 <__aeabi_dmul+0x474>
    a414:	0003      	movs	r3, r0
    a416:	1d18      	adds	r0, r3, #4
    a418:	4298      	cmp	r0, r3
    a41a:	419b      	sbcs	r3, r3
    a41c:	425b      	negs	r3, r3
    a41e:	18e4      	adds	r4, r4, r3
    a420:	0223      	lsls	r3, r4, #8
    a422:	d521      	bpl.n	a468 <__aeabi_dmul+0x4bc>
    a424:	2501      	movs	r5, #1
    a426:	9b01      	ldr	r3, [sp, #4]
    a428:	2401      	movs	r4, #1
    a42a:	401d      	ands	r5, r3
    a42c:	2300      	movs	r3, #0
    a42e:	2200      	movs	r2, #0
    a430:	4699      	mov	r9, r3
    a432:	e622      	b.n	a07a <__aeabi_dmul+0xce>
    a434:	251f      	movs	r5, #31
    a436:	0021      	movs	r1, r4
    a438:	426d      	negs	r5, r5
    a43a:	1a28      	subs	r0, r5, r0
    a43c:	40c1      	lsrs	r1, r0
    a43e:	0008      	movs	r0, r1
    a440:	2a20      	cmp	r2, #32
    a442:	d01d      	beq.n	a480 <__aeabi_dmul+0x4d4>
    a444:	355f      	adds	r5, #95	; 0x5f
    a446:	1aaa      	subs	r2, r5, r2
    a448:	4094      	lsls	r4, r2
    a44a:	4323      	orrs	r3, r4
    a44c:	1e5c      	subs	r4, r3, #1
    a44e:	41a3      	sbcs	r3, r4
    a450:	2507      	movs	r5, #7
    a452:	4303      	orrs	r3, r0
    a454:	401d      	ands	r5, r3
    a456:	2200      	movs	r2, #0
    a458:	2d00      	cmp	r5, #0
    a45a:	d009      	beq.n	a470 <__aeabi_dmul+0x4c4>
    a45c:	220f      	movs	r2, #15
    a45e:	2400      	movs	r4, #0
    a460:	401a      	ands	r2, r3
    a462:	0018      	movs	r0, r3
    a464:	2a04      	cmp	r2, #4
    a466:	d1d6      	bne.n	a416 <__aeabi_dmul+0x46a>
    a468:	0003      	movs	r3, r0
    a46a:	0765      	lsls	r5, r4, #29
    a46c:	0264      	lsls	r4, r4, #9
    a46e:	0b22      	lsrs	r2, r4, #12
    a470:	08db      	lsrs	r3, r3, #3
    a472:	432b      	orrs	r3, r5
    a474:	2501      	movs	r5, #1
    a476:	4699      	mov	r9, r3
    a478:	9b01      	ldr	r3, [sp, #4]
    a47a:	2400      	movs	r4, #0
    a47c:	401d      	ands	r5, r3
    a47e:	e5fc      	b.n	a07a <__aeabi_dmul+0xce>
    a480:	2400      	movs	r4, #0
    a482:	e7e2      	b.n	a44a <__aeabi_dmul+0x49e>
    a484:	2280      	movs	r2, #128	; 0x80
    a486:	2501      	movs	r5, #1
    a488:	0312      	lsls	r2, r2, #12
    a48a:	4322      	orrs	r2, r4
    a48c:	9901      	ldr	r1, [sp, #4]
    a48e:	0312      	lsls	r2, r2, #12
    a490:	0b12      	lsrs	r2, r2, #12
    a492:	400d      	ands	r5, r1
    a494:	4699      	mov	r9, r3
    a496:	4c04      	ldr	r4, [pc, #16]	; (a4a8 <__aeabi_dmul+0x4fc>)
    a498:	e5ef      	b.n	a07a <__aeabi_dmul+0xce>
    a49a:	46c0      	nop			; (mov r8, r8)
    a49c:	000003ff 	.word	0x000003ff
    a4a0:	feffffff 	.word	0xfeffffff
    a4a4:	000007fe 	.word	0x000007fe
    a4a8:	000007ff 	.word	0x000007ff

0000a4ac <__aeabi_dsub>:
    a4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4ae:	4646      	mov	r6, r8
    a4b0:	46d6      	mov	lr, sl
    a4b2:	464f      	mov	r7, r9
    a4b4:	030c      	lsls	r4, r1, #12
    a4b6:	b5c0      	push	{r6, r7, lr}
    a4b8:	0fcd      	lsrs	r5, r1, #31
    a4ba:	004e      	lsls	r6, r1, #1
    a4bc:	0a61      	lsrs	r1, r4, #9
    a4be:	0f44      	lsrs	r4, r0, #29
    a4c0:	430c      	orrs	r4, r1
    a4c2:	00c1      	lsls	r1, r0, #3
    a4c4:	0058      	lsls	r0, r3, #1
    a4c6:	0d40      	lsrs	r0, r0, #21
    a4c8:	4684      	mov	ip, r0
    a4ca:	468a      	mov	sl, r1
    a4cc:	000f      	movs	r7, r1
    a4ce:	0319      	lsls	r1, r3, #12
    a4d0:	0f50      	lsrs	r0, r2, #29
    a4d2:	0a49      	lsrs	r1, r1, #9
    a4d4:	4301      	orrs	r1, r0
    a4d6:	48c6      	ldr	r0, [pc, #792]	; (a7f0 <__aeabi_dsub+0x344>)
    a4d8:	0d76      	lsrs	r6, r6, #21
    a4da:	46a8      	mov	r8, r5
    a4dc:	0fdb      	lsrs	r3, r3, #31
    a4de:	00d2      	lsls	r2, r2, #3
    a4e0:	4584      	cmp	ip, r0
    a4e2:	d100      	bne.n	a4e6 <__aeabi_dsub+0x3a>
    a4e4:	e0d8      	b.n	a698 <__aeabi_dsub+0x1ec>
    a4e6:	2001      	movs	r0, #1
    a4e8:	4043      	eors	r3, r0
    a4ea:	42ab      	cmp	r3, r5
    a4ec:	d100      	bne.n	a4f0 <__aeabi_dsub+0x44>
    a4ee:	e0a6      	b.n	a63e <__aeabi_dsub+0x192>
    a4f0:	4660      	mov	r0, ip
    a4f2:	1a35      	subs	r5, r6, r0
    a4f4:	2d00      	cmp	r5, #0
    a4f6:	dc00      	bgt.n	a4fa <__aeabi_dsub+0x4e>
    a4f8:	e105      	b.n	a706 <__aeabi_dsub+0x25a>
    a4fa:	2800      	cmp	r0, #0
    a4fc:	d110      	bne.n	a520 <__aeabi_dsub+0x74>
    a4fe:	000b      	movs	r3, r1
    a500:	4313      	orrs	r3, r2
    a502:	d100      	bne.n	a506 <__aeabi_dsub+0x5a>
    a504:	e0d7      	b.n	a6b6 <__aeabi_dsub+0x20a>
    a506:	1e6b      	subs	r3, r5, #1
    a508:	2b00      	cmp	r3, #0
    a50a:	d000      	beq.n	a50e <__aeabi_dsub+0x62>
    a50c:	e14b      	b.n	a7a6 <__aeabi_dsub+0x2fa>
    a50e:	4653      	mov	r3, sl
    a510:	1a9f      	subs	r7, r3, r2
    a512:	45ba      	cmp	sl, r7
    a514:	4180      	sbcs	r0, r0
    a516:	1a64      	subs	r4, r4, r1
    a518:	4240      	negs	r0, r0
    a51a:	1a24      	subs	r4, r4, r0
    a51c:	2601      	movs	r6, #1
    a51e:	e01e      	b.n	a55e <__aeabi_dsub+0xb2>
    a520:	4bb3      	ldr	r3, [pc, #716]	; (a7f0 <__aeabi_dsub+0x344>)
    a522:	429e      	cmp	r6, r3
    a524:	d048      	beq.n	a5b8 <__aeabi_dsub+0x10c>
    a526:	2380      	movs	r3, #128	; 0x80
    a528:	041b      	lsls	r3, r3, #16
    a52a:	4319      	orrs	r1, r3
    a52c:	2d38      	cmp	r5, #56	; 0x38
    a52e:	dd00      	ble.n	a532 <__aeabi_dsub+0x86>
    a530:	e119      	b.n	a766 <__aeabi_dsub+0x2ba>
    a532:	2d1f      	cmp	r5, #31
    a534:	dd00      	ble.n	a538 <__aeabi_dsub+0x8c>
    a536:	e14c      	b.n	a7d2 <__aeabi_dsub+0x326>
    a538:	2320      	movs	r3, #32
    a53a:	000f      	movs	r7, r1
    a53c:	1b5b      	subs	r3, r3, r5
    a53e:	0010      	movs	r0, r2
    a540:	409a      	lsls	r2, r3
    a542:	409f      	lsls	r7, r3
    a544:	40e8      	lsrs	r0, r5
    a546:	1e53      	subs	r3, r2, #1
    a548:	419a      	sbcs	r2, r3
    a54a:	40e9      	lsrs	r1, r5
    a54c:	4307      	orrs	r7, r0
    a54e:	4317      	orrs	r7, r2
    a550:	4653      	mov	r3, sl
    a552:	1bdf      	subs	r7, r3, r7
    a554:	1a61      	subs	r1, r4, r1
    a556:	45ba      	cmp	sl, r7
    a558:	41a4      	sbcs	r4, r4
    a55a:	4264      	negs	r4, r4
    a55c:	1b0c      	subs	r4, r1, r4
    a55e:	0223      	lsls	r3, r4, #8
    a560:	d400      	bmi.n	a564 <__aeabi_dsub+0xb8>
    a562:	e0c5      	b.n	a6f0 <__aeabi_dsub+0x244>
    a564:	0264      	lsls	r4, r4, #9
    a566:	0a65      	lsrs	r5, r4, #9
    a568:	2d00      	cmp	r5, #0
    a56a:	d100      	bne.n	a56e <__aeabi_dsub+0xc2>
    a56c:	e0f6      	b.n	a75c <__aeabi_dsub+0x2b0>
    a56e:	0028      	movs	r0, r5
    a570:	f000 fbf0 	bl	ad54 <__clzsi2>
    a574:	0003      	movs	r3, r0
    a576:	3b08      	subs	r3, #8
    a578:	2b1f      	cmp	r3, #31
    a57a:	dd00      	ble.n	a57e <__aeabi_dsub+0xd2>
    a57c:	e0e9      	b.n	a752 <__aeabi_dsub+0x2a6>
    a57e:	2220      	movs	r2, #32
    a580:	003c      	movs	r4, r7
    a582:	1ad2      	subs	r2, r2, r3
    a584:	409d      	lsls	r5, r3
    a586:	40d4      	lsrs	r4, r2
    a588:	409f      	lsls	r7, r3
    a58a:	4325      	orrs	r5, r4
    a58c:	429e      	cmp	r6, r3
    a58e:	dd00      	ble.n	a592 <__aeabi_dsub+0xe6>
    a590:	e0db      	b.n	a74a <__aeabi_dsub+0x29e>
    a592:	1b9e      	subs	r6, r3, r6
    a594:	1c73      	adds	r3, r6, #1
    a596:	2b1f      	cmp	r3, #31
    a598:	dd00      	ble.n	a59c <__aeabi_dsub+0xf0>
    a59a:	e10a      	b.n	a7b2 <__aeabi_dsub+0x306>
    a59c:	2220      	movs	r2, #32
    a59e:	0038      	movs	r0, r7
    a5a0:	1ad2      	subs	r2, r2, r3
    a5a2:	0029      	movs	r1, r5
    a5a4:	4097      	lsls	r7, r2
    a5a6:	002c      	movs	r4, r5
    a5a8:	4091      	lsls	r1, r2
    a5aa:	40d8      	lsrs	r0, r3
    a5ac:	1e7a      	subs	r2, r7, #1
    a5ae:	4197      	sbcs	r7, r2
    a5b0:	40dc      	lsrs	r4, r3
    a5b2:	2600      	movs	r6, #0
    a5b4:	4301      	orrs	r1, r0
    a5b6:	430f      	orrs	r7, r1
    a5b8:	077b      	lsls	r3, r7, #29
    a5ba:	d009      	beq.n	a5d0 <__aeabi_dsub+0x124>
    a5bc:	230f      	movs	r3, #15
    a5be:	403b      	ands	r3, r7
    a5c0:	2b04      	cmp	r3, #4
    a5c2:	d005      	beq.n	a5d0 <__aeabi_dsub+0x124>
    a5c4:	1d3b      	adds	r3, r7, #4
    a5c6:	42bb      	cmp	r3, r7
    a5c8:	41bf      	sbcs	r7, r7
    a5ca:	427f      	negs	r7, r7
    a5cc:	19e4      	adds	r4, r4, r7
    a5ce:	001f      	movs	r7, r3
    a5d0:	0223      	lsls	r3, r4, #8
    a5d2:	d525      	bpl.n	a620 <__aeabi_dsub+0x174>
    a5d4:	4b86      	ldr	r3, [pc, #536]	; (a7f0 <__aeabi_dsub+0x344>)
    a5d6:	3601      	adds	r6, #1
    a5d8:	429e      	cmp	r6, r3
    a5da:	d100      	bne.n	a5de <__aeabi_dsub+0x132>
    a5dc:	e0af      	b.n	a73e <__aeabi_dsub+0x292>
    a5de:	4b85      	ldr	r3, [pc, #532]	; (a7f4 <__aeabi_dsub+0x348>)
    a5e0:	2501      	movs	r5, #1
    a5e2:	401c      	ands	r4, r3
    a5e4:	4643      	mov	r3, r8
    a5e6:	0762      	lsls	r2, r4, #29
    a5e8:	08ff      	lsrs	r7, r7, #3
    a5ea:	0264      	lsls	r4, r4, #9
    a5ec:	0576      	lsls	r6, r6, #21
    a5ee:	4317      	orrs	r7, r2
    a5f0:	0b24      	lsrs	r4, r4, #12
    a5f2:	0d76      	lsrs	r6, r6, #21
    a5f4:	401d      	ands	r5, r3
    a5f6:	2100      	movs	r1, #0
    a5f8:	0324      	lsls	r4, r4, #12
    a5fa:	0b23      	lsrs	r3, r4, #12
    a5fc:	0d0c      	lsrs	r4, r1, #20
    a5fe:	4a7e      	ldr	r2, [pc, #504]	; (a7f8 <__aeabi_dsub+0x34c>)
    a600:	0524      	lsls	r4, r4, #20
    a602:	431c      	orrs	r4, r3
    a604:	4014      	ands	r4, r2
    a606:	0533      	lsls	r3, r6, #20
    a608:	4323      	orrs	r3, r4
    a60a:	005b      	lsls	r3, r3, #1
    a60c:	07ed      	lsls	r5, r5, #31
    a60e:	085b      	lsrs	r3, r3, #1
    a610:	432b      	orrs	r3, r5
    a612:	0038      	movs	r0, r7
    a614:	0019      	movs	r1, r3
    a616:	bc1c      	pop	{r2, r3, r4}
    a618:	4690      	mov	r8, r2
    a61a:	4699      	mov	r9, r3
    a61c:	46a2      	mov	sl, r4
    a61e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a620:	2501      	movs	r5, #1
    a622:	4643      	mov	r3, r8
    a624:	0762      	lsls	r2, r4, #29
    a626:	08ff      	lsrs	r7, r7, #3
    a628:	4317      	orrs	r7, r2
    a62a:	08e4      	lsrs	r4, r4, #3
    a62c:	401d      	ands	r5, r3
    a62e:	4b70      	ldr	r3, [pc, #448]	; (a7f0 <__aeabi_dsub+0x344>)
    a630:	429e      	cmp	r6, r3
    a632:	d036      	beq.n	a6a2 <__aeabi_dsub+0x1f6>
    a634:	0324      	lsls	r4, r4, #12
    a636:	0576      	lsls	r6, r6, #21
    a638:	0b24      	lsrs	r4, r4, #12
    a63a:	0d76      	lsrs	r6, r6, #21
    a63c:	e7db      	b.n	a5f6 <__aeabi_dsub+0x14a>
    a63e:	4663      	mov	r3, ip
    a640:	1af3      	subs	r3, r6, r3
    a642:	2b00      	cmp	r3, #0
    a644:	dc00      	bgt.n	a648 <__aeabi_dsub+0x19c>
    a646:	e094      	b.n	a772 <__aeabi_dsub+0x2c6>
    a648:	4660      	mov	r0, ip
    a64a:	2800      	cmp	r0, #0
    a64c:	d035      	beq.n	a6ba <__aeabi_dsub+0x20e>
    a64e:	4868      	ldr	r0, [pc, #416]	; (a7f0 <__aeabi_dsub+0x344>)
    a650:	4286      	cmp	r6, r0
    a652:	d0b1      	beq.n	a5b8 <__aeabi_dsub+0x10c>
    a654:	2780      	movs	r7, #128	; 0x80
    a656:	043f      	lsls	r7, r7, #16
    a658:	4339      	orrs	r1, r7
    a65a:	2b38      	cmp	r3, #56	; 0x38
    a65c:	dc00      	bgt.n	a660 <__aeabi_dsub+0x1b4>
    a65e:	e0fd      	b.n	a85c <__aeabi_dsub+0x3b0>
    a660:	430a      	orrs	r2, r1
    a662:	0017      	movs	r7, r2
    a664:	2100      	movs	r1, #0
    a666:	1e7a      	subs	r2, r7, #1
    a668:	4197      	sbcs	r7, r2
    a66a:	4457      	add	r7, sl
    a66c:	4557      	cmp	r7, sl
    a66e:	4180      	sbcs	r0, r0
    a670:	1909      	adds	r1, r1, r4
    a672:	4244      	negs	r4, r0
    a674:	190c      	adds	r4, r1, r4
    a676:	0223      	lsls	r3, r4, #8
    a678:	d53a      	bpl.n	a6f0 <__aeabi_dsub+0x244>
    a67a:	4b5d      	ldr	r3, [pc, #372]	; (a7f0 <__aeabi_dsub+0x344>)
    a67c:	3601      	adds	r6, #1
    a67e:	429e      	cmp	r6, r3
    a680:	d100      	bne.n	a684 <__aeabi_dsub+0x1d8>
    a682:	e14b      	b.n	a91c <__aeabi_dsub+0x470>
    a684:	2201      	movs	r2, #1
    a686:	4b5b      	ldr	r3, [pc, #364]	; (a7f4 <__aeabi_dsub+0x348>)
    a688:	401c      	ands	r4, r3
    a68a:	087b      	lsrs	r3, r7, #1
    a68c:	4017      	ands	r7, r2
    a68e:	431f      	orrs	r7, r3
    a690:	07e2      	lsls	r2, r4, #31
    a692:	4317      	orrs	r7, r2
    a694:	0864      	lsrs	r4, r4, #1
    a696:	e78f      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a698:	0008      	movs	r0, r1
    a69a:	4310      	orrs	r0, r2
    a69c:	d000      	beq.n	a6a0 <__aeabi_dsub+0x1f4>
    a69e:	e724      	b.n	a4ea <__aeabi_dsub+0x3e>
    a6a0:	e721      	b.n	a4e6 <__aeabi_dsub+0x3a>
    a6a2:	0023      	movs	r3, r4
    a6a4:	433b      	orrs	r3, r7
    a6a6:	d100      	bne.n	a6aa <__aeabi_dsub+0x1fe>
    a6a8:	e1b9      	b.n	aa1e <__aeabi_dsub+0x572>
    a6aa:	2280      	movs	r2, #128	; 0x80
    a6ac:	0312      	lsls	r2, r2, #12
    a6ae:	4314      	orrs	r4, r2
    a6b0:	0324      	lsls	r4, r4, #12
    a6b2:	0b24      	lsrs	r4, r4, #12
    a6b4:	e79f      	b.n	a5f6 <__aeabi_dsub+0x14a>
    a6b6:	002e      	movs	r6, r5
    a6b8:	e77e      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a6ba:	0008      	movs	r0, r1
    a6bc:	4310      	orrs	r0, r2
    a6be:	d100      	bne.n	a6c2 <__aeabi_dsub+0x216>
    a6c0:	e0ca      	b.n	a858 <__aeabi_dsub+0x3ac>
    a6c2:	1e58      	subs	r0, r3, #1
    a6c4:	4684      	mov	ip, r0
    a6c6:	2800      	cmp	r0, #0
    a6c8:	d000      	beq.n	a6cc <__aeabi_dsub+0x220>
    a6ca:	e0e7      	b.n	a89c <__aeabi_dsub+0x3f0>
    a6cc:	4452      	add	r2, sl
    a6ce:	4552      	cmp	r2, sl
    a6d0:	4180      	sbcs	r0, r0
    a6d2:	1864      	adds	r4, r4, r1
    a6d4:	4240      	negs	r0, r0
    a6d6:	1824      	adds	r4, r4, r0
    a6d8:	0017      	movs	r7, r2
    a6da:	2601      	movs	r6, #1
    a6dc:	0223      	lsls	r3, r4, #8
    a6de:	d507      	bpl.n	a6f0 <__aeabi_dsub+0x244>
    a6e0:	2602      	movs	r6, #2
    a6e2:	e7cf      	b.n	a684 <__aeabi_dsub+0x1d8>
    a6e4:	4664      	mov	r4, ip
    a6e6:	432c      	orrs	r4, r5
    a6e8:	d100      	bne.n	a6ec <__aeabi_dsub+0x240>
    a6ea:	e1b3      	b.n	aa54 <__aeabi_dsub+0x5a8>
    a6ec:	002c      	movs	r4, r5
    a6ee:	4667      	mov	r7, ip
    a6f0:	077b      	lsls	r3, r7, #29
    a6f2:	d000      	beq.n	a6f6 <__aeabi_dsub+0x24a>
    a6f4:	e762      	b.n	a5bc <__aeabi_dsub+0x110>
    a6f6:	0763      	lsls	r3, r4, #29
    a6f8:	08ff      	lsrs	r7, r7, #3
    a6fa:	431f      	orrs	r7, r3
    a6fc:	2501      	movs	r5, #1
    a6fe:	4643      	mov	r3, r8
    a700:	08e4      	lsrs	r4, r4, #3
    a702:	401d      	ands	r5, r3
    a704:	e793      	b.n	a62e <__aeabi_dsub+0x182>
    a706:	2d00      	cmp	r5, #0
    a708:	d178      	bne.n	a7fc <__aeabi_dsub+0x350>
    a70a:	1c75      	adds	r5, r6, #1
    a70c:	056d      	lsls	r5, r5, #21
    a70e:	0d6d      	lsrs	r5, r5, #21
    a710:	2d01      	cmp	r5, #1
    a712:	dc00      	bgt.n	a716 <__aeabi_dsub+0x26a>
    a714:	e0f2      	b.n	a8fc <__aeabi_dsub+0x450>
    a716:	4650      	mov	r0, sl
    a718:	1a80      	subs	r0, r0, r2
    a71a:	4582      	cmp	sl, r0
    a71c:	41bf      	sbcs	r7, r7
    a71e:	1a65      	subs	r5, r4, r1
    a720:	427f      	negs	r7, r7
    a722:	1bed      	subs	r5, r5, r7
    a724:	4684      	mov	ip, r0
    a726:	0228      	lsls	r0, r5, #8
    a728:	d400      	bmi.n	a72c <__aeabi_dsub+0x280>
    a72a:	e08c      	b.n	a846 <__aeabi_dsub+0x39a>
    a72c:	4650      	mov	r0, sl
    a72e:	1a17      	subs	r7, r2, r0
    a730:	42ba      	cmp	r2, r7
    a732:	4192      	sbcs	r2, r2
    a734:	1b0c      	subs	r4, r1, r4
    a736:	4255      	negs	r5, r2
    a738:	1b65      	subs	r5, r4, r5
    a73a:	4698      	mov	r8, r3
    a73c:	e714      	b.n	a568 <__aeabi_dsub+0xbc>
    a73e:	2501      	movs	r5, #1
    a740:	4643      	mov	r3, r8
    a742:	2400      	movs	r4, #0
    a744:	401d      	ands	r5, r3
    a746:	2700      	movs	r7, #0
    a748:	e755      	b.n	a5f6 <__aeabi_dsub+0x14a>
    a74a:	4c2a      	ldr	r4, [pc, #168]	; (a7f4 <__aeabi_dsub+0x348>)
    a74c:	1af6      	subs	r6, r6, r3
    a74e:	402c      	ands	r4, r5
    a750:	e732      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a752:	003d      	movs	r5, r7
    a754:	3828      	subs	r0, #40	; 0x28
    a756:	4085      	lsls	r5, r0
    a758:	2700      	movs	r7, #0
    a75a:	e717      	b.n	a58c <__aeabi_dsub+0xe0>
    a75c:	0038      	movs	r0, r7
    a75e:	f000 faf9 	bl	ad54 <__clzsi2>
    a762:	3020      	adds	r0, #32
    a764:	e706      	b.n	a574 <__aeabi_dsub+0xc8>
    a766:	430a      	orrs	r2, r1
    a768:	0017      	movs	r7, r2
    a76a:	2100      	movs	r1, #0
    a76c:	1e7a      	subs	r2, r7, #1
    a76e:	4197      	sbcs	r7, r2
    a770:	e6ee      	b.n	a550 <__aeabi_dsub+0xa4>
    a772:	2b00      	cmp	r3, #0
    a774:	d000      	beq.n	a778 <__aeabi_dsub+0x2cc>
    a776:	e0e5      	b.n	a944 <__aeabi_dsub+0x498>
    a778:	1c73      	adds	r3, r6, #1
    a77a:	469c      	mov	ip, r3
    a77c:	055b      	lsls	r3, r3, #21
    a77e:	0d5b      	lsrs	r3, r3, #21
    a780:	2b01      	cmp	r3, #1
    a782:	dc00      	bgt.n	a786 <__aeabi_dsub+0x2da>
    a784:	e09f      	b.n	a8c6 <__aeabi_dsub+0x41a>
    a786:	4b1a      	ldr	r3, [pc, #104]	; (a7f0 <__aeabi_dsub+0x344>)
    a788:	459c      	cmp	ip, r3
    a78a:	d100      	bne.n	a78e <__aeabi_dsub+0x2e2>
    a78c:	e0c5      	b.n	a91a <__aeabi_dsub+0x46e>
    a78e:	4452      	add	r2, sl
    a790:	4552      	cmp	r2, sl
    a792:	4180      	sbcs	r0, r0
    a794:	1864      	adds	r4, r4, r1
    a796:	4240      	negs	r0, r0
    a798:	1824      	adds	r4, r4, r0
    a79a:	07e7      	lsls	r7, r4, #31
    a79c:	0852      	lsrs	r2, r2, #1
    a79e:	4317      	orrs	r7, r2
    a7a0:	0864      	lsrs	r4, r4, #1
    a7a2:	4666      	mov	r6, ip
    a7a4:	e708      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a7a6:	4812      	ldr	r0, [pc, #72]	; (a7f0 <__aeabi_dsub+0x344>)
    a7a8:	4285      	cmp	r5, r0
    a7aa:	d100      	bne.n	a7ae <__aeabi_dsub+0x302>
    a7ac:	e085      	b.n	a8ba <__aeabi_dsub+0x40e>
    a7ae:	001d      	movs	r5, r3
    a7b0:	e6bc      	b.n	a52c <__aeabi_dsub+0x80>
    a7b2:	0029      	movs	r1, r5
    a7b4:	3e1f      	subs	r6, #31
    a7b6:	40f1      	lsrs	r1, r6
    a7b8:	2b20      	cmp	r3, #32
    a7ba:	d100      	bne.n	a7be <__aeabi_dsub+0x312>
    a7bc:	e07f      	b.n	a8be <__aeabi_dsub+0x412>
    a7be:	2240      	movs	r2, #64	; 0x40
    a7c0:	1ad3      	subs	r3, r2, r3
    a7c2:	409d      	lsls	r5, r3
    a7c4:	432f      	orrs	r7, r5
    a7c6:	1e7d      	subs	r5, r7, #1
    a7c8:	41af      	sbcs	r7, r5
    a7ca:	2400      	movs	r4, #0
    a7cc:	430f      	orrs	r7, r1
    a7ce:	2600      	movs	r6, #0
    a7d0:	e78e      	b.n	a6f0 <__aeabi_dsub+0x244>
    a7d2:	002b      	movs	r3, r5
    a7d4:	000f      	movs	r7, r1
    a7d6:	3b20      	subs	r3, #32
    a7d8:	40df      	lsrs	r7, r3
    a7da:	2d20      	cmp	r5, #32
    a7dc:	d071      	beq.n	a8c2 <__aeabi_dsub+0x416>
    a7de:	2340      	movs	r3, #64	; 0x40
    a7e0:	1b5d      	subs	r5, r3, r5
    a7e2:	40a9      	lsls	r1, r5
    a7e4:	430a      	orrs	r2, r1
    a7e6:	1e51      	subs	r1, r2, #1
    a7e8:	418a      	sbcs	r2, r1
    a7ea:	2100      	movs	r1, #0
    a7ec:	4317      	orrs	r7, r2
    a7ee:	e6af      	b.n	a550 <__aeabi_dsub+0xa4>
    a7f0:	000007ff 	.word	0x000007ff
    a7f4:	ff7fffff 	.word	0xff7fffff
    a7f8:	800fffff 	.word	0x800fffff
    a7fc:	2e00      	cmp	r6, #0
    a7fe:	d03e      	beq.n	a87e <__aeabi_dsub+0x3d2>
    a800:	4eb3      	ldr	r6, [pc, #716]	; (aad0 <__aeabi_dsub+0x624>)
    a802:	45b4      	cmp	ip, r6
    a804:	d045      	beq.n	a892 <__aeabi_dsub+0x3e6>
    a806:	2680      	movs	r6, #128	; 0x80
    a808:	0436      	lsls	r6, r6, #16
    a80a:	426d      	negs	r5, r5
    a80c:	4334      	orrs	r4, r6
    a80e:	2d38      	cmp	r5, #56	; 0x38
    a810:	dd00      	ble.n	a814 <__aeabi_dsub+0x368>
    a812:	e0a8      	b.n	a966 <__aeabi_dsub+0x4ba>
    a814:	2d1f      	cmp	r5, #31
    a816:	dd00      	ble.n	a81a <__aeabi_dsub+0x36e>
    a818:	e11f      	b.n	aa5a <__aeabi_dsub+0x5ae>
    a81a:	2620      	movs	r6, #32
    a81c:	0027      	movs	r7, r4
    a81e:	4650      	mov	r0, sl
    a820:	1b76      	subs	r6, r6, r5
    a822:	40b7      	lsls	r7, r6
    a824:	40e8      	lsrs	r0, r5
    a826:	4307      	orrs	r7, r0
    a828:	4650      	mov	r0, sl
    a82a:	40b0      	lsls	r0, r6
    a82c:	1e46      	subs	r6, r0, #1
    a82e:	41b0      	sbcs	r0, r6
    a830:	40ec      	lsrs	r4, r5
    a832:	4338      	orrs	r0, r7
    a834:	1a17      	subs	r7, r2, r0
    a836:	42ba      	cmp	r2, r7
    a838:	4192      	sbcs	r2, r2
    a83a:	1b0c      	subs	r4, r1, r4
    a83c:	4252      	negs	r2, r2
    a83e:	1aa4      	subs	r4, r4, r2
    a840:	4666      	mov	r6, ip
    a842:	4698      	mov	r8, r3
    a844:	e68b      	b.n	a55e <__aeabi_dsub+0xb2>
    a846:	4664      	mov	r4, ip
    a848:	4667      	mov	r7, ip
    a84a:	432c      	orrs	r4, r5
    a84c:	d000      	beq.n	a850 <__aeabi_dsub+0x3a4>
    a84e:	e68b      	b.n	a568 <__aeabi_dsub+0xbc>
    a850:	2500      	movs	r5, #0
    a852:	2600      	movs	r6, #0
    a854:	2700      	movs	r7, #0
    a856:	e6ea      	b.n	a62e <__aeabi_dsub+0x182>
    a858:	001e      	movs	r6, r3
    a85a:	e6ad      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a85c:	2b1f      	cmp	r3, #31
    a85e:	dc60      	bgt.n	a922 <__aeabi_dsub+0x476>
    a860:	2720      	movs	r7, #32
    a862:	1af8      	subs	r0, r7, r3
    a864:	000f      	movs	r7, r1
    a866:	4684      	mov	ip, r0
    a868:	4087      	lsls	r7, r0
    a86a:	0010      	movs	r0, r2
    a86c:	40d8      	lsrs	r0, r3
    a86e:	4307      	orrs	r7, r0
    a870:	4660      	mov	r0, ip
    a872:	4082      	lsls	r2, r0
    a874:	1e50      	subs	r0, r2, #1
    a876:	4182      	sbcs	r2, r0
    a878:	40d9      	lsrs	r1, r3
    a87a:	4317      	orrs	r7, r2
    a87c:	e6f5      	b.n	a66a <__aeabi_dsub+0x1be>
    a87e:	0026      	movs	r6, r4
    a880:	4650      	mov	r0, sl
    a882:	4306      	orrs	r6, r0
    a884:	d005      	beq.n	a892 <__aeabi_dsub+0x3e6>
    a886:	43ed      	mvns	r5, r5
    a888:	2d00      	cmp	r5, #0
    a88a:	d0d3      	beq.n	a834 <__aeabi_dsub+0x388>
    a88c:	4e90      	ldr	r6, [pc, #576]	; (aad0 <__aeabi_dsub+0x624>)
    a88e:	45b4      	cmp	ip, r6
    a890:	d1bd      	bne.n	a80e <__aeabi_dsub+0x362>
    a892:	000c      	movs	r4, r1
    a894:	0017      	movs	r7, r2
    a896:	4666      	mov	r6, ip
    a898:	4698      	mov	r8, r3
    a89a:	e68d      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a89c:	488c      	ldr	r0, [pc, #560]	; (aad0 <__aeabi_dsub+0x624>)
    a89e:	4283      	cmp	r3, r0
    a8a0:	d00b      	beq.n	a8ba <__aeabi_dsub+0x40e>
    a8a2:	4663      	mov	r3, ip
    a8a4:	e6d9      	b.n	a65a <__aeabi_dsub+0x1ae>
    a8a6:	2d00      	cmp	r5, #0
    a8a8:	d000      	beq.n	a8ac <__aeabi_dsub+0x400>
    a8aa:	e096      	b.n	a9da <__aeabi_dsub+0x52e>
    a8ac:	0008      	movs	r0, r1
    a8ae:	4310      	orrs	r0, r2
    a8b0:	d100      	bne.n	a8b4 <__aeabi_dsub+0x408>
    a8b2:	e0e2      	b.n	aa7a <__aeabi_dsub+0x5ce>
    a8b4:	000c      	movs	r4, r1
    a8b6:	0017      	movs	r7, r2
    a8b8:	4698      	mov	r8, r3
    a8ba:	4e85      	ldr	r6, [pc, #532]	; (aad0 <__aeabi_dsub+0x624>)
    a8bc:	e67c      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a8be:	2500      	movs	r5, #0
    a8c0:	e780      	b.n	a7c4 <__aeabi_dsub+0x318>
    a8c2:	2100      	movs	r1, #0
    a8c4:	e78e      	b.n	a7e4 <__aeabi_dsub+0x338>
    a8c6:	0023      	movs	r3, r4
    a8c8:	4650      	mov	r0, sl
    a8ca:	4303      	orrs	r3, r0
    a8cc:	2e00      	cmp	r6, #0
    a8ce:	d000      	beq.n	a8d2 <__aeabi_dsub+0x426>
    a8d0:	e0a8      	b.n	aa24 <__aeabi_dsub+0x578>
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	d100      	bne.n	a8d8 <__aeabi_dsub+0x42c>
    a8d6:	e0de      	b.n	aa96 <__aeabi_dsub+0x5ea>
    a8d8:	000b      	movs	r3, r1
    a8da:	4313      	orrs	r3, r2
    a8dc:	d100      	bne.n	a8e0 <__aeabi_dsub+0x434>
    a8de:	e66b      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a8e0:	4452      	add	r2, sl
    a8e2:	4552      	cmp	r2, sl
    a8e4:	4180      	sbcs	r0, r0
    a8e6:	1864      	adds	r4, r4, r1
    a8e8:	4240      	negs	r0, r0
    a8ea:	1824      	adds	r4, r4, r0
    a8ec:	0017      	movs	r7, r2
    a8ee:	0223      	lsls	r3, r4, #8
    a8f0:	d400      	bmi.n	a8f4 <__aeabi_dsub+0x448>
    a8f2:	e6fd      	b.n	a6f0 <__aeabi_dsub+0x244>
    a8f4:	4b77      	ldr	r3, [pc, #476]	; (aad4 <__aeabi_dsub+0x628>)
    a8f6:	4666      	mov	r6, ip
    a8f8:	401c      	ands	r4, r3
    a8fa:	e65d      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a8fc:	0025      	movs	r5, r4
    a8fe:	4650      	mov	r0, sl
    a900:	4305      	orrs	r5, r0
    a902:	2e00      	cmp	r6, #0
    a904:	d1cf      	bne.n	a8a6 <__aeabi_dsub+0x3fa>
    a906:	2d00      	cmp	r5, #0
    a908:	d14f      	bne.n	a9aa <__aeabi_dsub+0x4fe>
    a90a:	000c      	movs	r4, r1
    a90c:	4314      	orrs	r4, r2
    a90e:	d100      	bne.n	a912 <__aeabi_dsub+0x466>
    a910:	e0a0      	b.n	aa54 <__aeabi_dsub+0x5a8>
    a912:	000c      	movs	r4, r1
    a914:	0017      	movs	r7, r2
    a916:	4698      	mov	r8, r3
    a918:	e64e      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a91a:	4666      	mov	r6, ip
    a91c:	2400      	movs	r4, #0
    a91e:	2700      	movs	r7, #0
    a920:	e685      	b.n	a62e <__aeabi_dsub+0x182>
    a922:	001f      	movs	r7, r3
    a924:	0008      	movs	r0, r1
    a926:	3f20      	subs	r7, #32
    a928:	40f8      	lsrs	r0, r7
    a92a:	0007      	movs	r7, r0
    a92c:	2b20      	cmp	r3, #32
    a92e:	d100      	bne.n	a932 <__aeabi_dsub+0x486>
    a930:	e08e      	b.n	aa50 <__aeabi_dsub+0x5a4>
    a932:	2040      	movs	r0, #64	; 0x40
    a934:	1ac3      	subs	r3, r0, r3
    a936:	4099      	lsls	r1, r3
    a938:	430a      	orrs	r2, r1
    a93a:	1e51      	subs	r1, r2, #1
    a93c:	418a      	sbcs	r2, r1
    a93e:	2100      	movs	r1, #0
    a940:	4317      	orrs	r7, r2
    a942:	e692      	b.n	a66a <__aeabi_dsub+0x1be>
    a944:	2e00      	cmp	r6, #0
    a946:	d114      	bne.n	a972 <__aeabi_dsub+0x4c6>
    a948:	0026      	movs	r6, r4
    a94a:	4650      	mov	r0, sl
    a94c:	4306      	orrs	r6, r0
    a94e:	d062      	beq.n	aa16 <__aeabi_dsub+0x56a>
    a950:	43db      	mvns	r3, r3
    a952:	2b00      	cmp	r3, #0
    a954:	d15c      	bne.n	aa10 <__aeabi_dsub+0x564>
    a956:	1887      	adds	r7, r0, r2
    a958:	4297      	cmp	r7, r2
    a95a:	4192      	sbcs	r2, r2
    a95c:	1864      	adds	r4, r4, r1
    a95e:	4252      	negs	r2, r2
    a960:	18a4      	adds	r4, r4, r2
    a962:	4666      	mov	r6, ip
    a964:	e687      	b.n	a676 <__aeabi_dsub+0x1ca>
    a966:	4650      	mov	r0, sl
    a968:	4320      	orrs	r0, r4
    a96a:	1e44      	subs	r4, r0, #1
    a96c:	41a0      	sbcs	r0, r4
    a96e:	2400      	movs	r4, #0
    a970:	e760      	b.n	a834 <__aeabi_dsub+0x388>
    a972:	4e57      	ldr	r6, [pc, #348]	; (aad0 <__aeabi_dsub+0x624>)
    a974:	45b4      	cmp	ip, r6
    a976:	d04e      	beq.n	aa16 <__aeabi_dsub+0x56a>
    a978:	2680      	movs	r6, #128	; 0x80
    a97a:	0436      	lsls	r6, r6, #16
    a97c:	425b      	negs	r3, r3
    a97e:	4334      	orrs	r4, r6
    a980:	2b38      	cmp	r3, #56	; 0x38
    a982:	dd00      	ble.n	a986 <__aeabi_dsub+0x4da>
    a984:	e07f      	b.n	aa86 <__aeabi_dsub+0x5da>
    a986:	2b1f      	cmp	r3, #31
    a988:	dd00      	ble.n	a98c <__aeabi_dsub+0x4e0>
    a98a:	e08b      	b.n	aaa4 <__aeabi_dsub+0x5f8>
    a98c:	2620      	movs	r6, #32
    a98e:	0027      	movs	r7, r4
    a990:	4650      	mov	r0, sl
    a992:	1af6      	subs	r6, r6, r3
    a994:	40b7      	lsls	r7, r6
    a996:	40d8      	lsrs	r0, r3
    a998:	4307      	orrs	r7, r0
    a99a:	4650      	mov	r0, sl
    a99c:	40b0      	lsls	r0, r6
    a99e:	1e46      	subs	r6, r0, #1
    a9a0:	41b0      	sbcs	r0, r6
    a9a2:	4307      	orrs	r7, r0
    a9a4:	40dc      	lsrs	r4, r3
    a9a6:	18bf      	adds	r7, r7, r2
    a9a8:	e7d6      	b.n	a958 <__aeabi_dsub+0x4ac>
    a9aa:	000d      	movs	r5, r1
    a9ac:	4315      	orrs	r5, r2
    a9ae:	d100      	bne.n	a9b2 <__aeabi_dsub+0x506>
    a9b0:	e602      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a9b2:	4650      	mov	r0, sl
    a9b4:	1a80      	subs	r0, r0, r2
    a9b6:	4582      	cmp	sl, r0
    a9b8:	41bf      	sbcs	r7, r7
    a9ba:	1a65      	subs	r5, r4, r1
    a9bc:	427f      	negs	r7, r7
    a9be:	1bed      	subs	r5, r5, r7
    a9c0:	4684      	mov	ip, r0
    a9c2:	0228      	lsls	r0, r5, #8
    a9c4:	d400      	bmi.n	a9c8 <__aeabi_dsub+0x51c>
    a9c6:	e68d      	b.n	a6e4 <__aeabi_dsub+0x238>
    a9c8:	4650      	mov	r0, sl
    a9ca:	1a17      	subs	r7, r2, r0
    a9cc:	42ba      	cmp	r2, r7
    a9ce:	4192      	sbcs	r2, r2
    a9d0:	1b0c      	subs	r4, r1, r4
    a9d2:	4252      	negs	r2, r2
    a9d4:	1aa4      	subs	r4, r4, r2
    a9d6:	4698      	mov	r8, r3
    a9d8:	e5ee      	b.n	a5b8 <__aeabi_dsub+0x10c>
    a9da:	000d      	movs	r5, r1
    a9dc:	4315      	orrs	r5, r2
    a9de:	d100      	bne.n	a9e2 <__aeabi_dsub+0x536>
    a9e0:	e76b      	b.n	a8ba <__aeabi_dsub+0x40e>
    a9e2:	4650      	mov	r0, sl
    a9e4:	0767      	lsls	r7, r4, #29
    a9e6:	08c0      	lsrs	r0, r0, #3
    a9e8:	4307      	orrs	r7, r0
    a9ea:	2080      	movs	r0, #128	; 0x80
    a9ec:	08e4      	lsrs	r4, r4, #3
    a9ee:	0300      	lsls	r0, r0, #12
    a9f0:	4204      	tst	r4, r0
    a9f2:	d007      	beq.n	aa04 <__aeabi_dsub+0x558>
    a9f4:	08cd      	lsrs	r5, r1, #3
    a9f6:	4205      	tst	r5, r0
    a9f8:	d104      	bne.n	aa04 <__aeabi_dsub+0x558>
    a9fa:	002c      	movs	r4, r5
    a9fc:	4698      	mov	r8, r3
    a9fe:	08d7      	lsrs	r7, r2, #3
    aa00:	0749      	lsls	r1, r1, #29
    aa02:	430f      	orrs	r7, r1
    aa04:	0f7b      	lsrs	r3, r7, #29
    aa06:	00e4      	lsls	r4, r4, #3
    aa08:	431c      	orrs	r4, r3
    aa0a:	00ff      	lsls	r7, r7, #3
    aa0c:	4e30      	ldr	r6, [pc, #192]	; (aad0 <__aeabi_dsub+0x624>)
    aa0e:	e5d3      	b.n	a5b8 <__aeabi_dsub+0x10c>
    aa10:	4e2f      	ldr	r6, [pc, #188]	; (aad0 <__aeabi_dsub+0x624>)
    aa12:	45b4      	cmp	ip, r6
    aa14:	d1b4      	bne.n	a980 <__aeabi_dsub+0x4d4>
    aa16:	000c      	movs	r4, r1
    aa18:	0017      	movs	r7, r2
    aa1a:	4666      	mov	r6, ip
    aa1c:	e5cc      	b.n	a5b8 <__aeabi_dsub+0x10c>
    aa1e:	2700      	movs	r7, #0
    aa20:	2400      	movs	r4, #0
    aa22:	e5e8      	b.n	a5f6 <__aeabi_dsub+0x14a>
    aa24:	2b00      	cmp	r3, #0
    aa26:	d039      	beq.n	aa9c <__aeabi_dsub+0x5f0>
    aa28:	000b      	movs	r3, r1
    aa2a:	4313      	orrs	r3, r2
    aa2c:	d100      	bne.n	aa30 <__aeabi_dsub+0x584>
    aa2e:	e744      	b.n	a8ba <__aeabi_dsub+0x40e>
    aa30:	08c0      	lsrs	r0, r0, #3
    aa32:	0767      	lsls	r7, r4, #29
    aa34:	4307      	orrs	r7, r0
    aa36:	2080      	movs	r0, #128	; 0x80
    aa38:	08e4      	lsrs	r4, r4, #3
    aa3a:	0300      	lsls	r0, r0, #12
    aa3c:	4204      	tst	r4, r0
    aa3e:	d0e1      	beq.n	aa04 <__aeabi_dsub+0x558>
    aa40:	08cb      	lsrs	r3, r1, #3
    aa42:	4203      	tst	r3, r0
    aa44:	d1de      	bne.n	aa04 <__aeabi_dsub+0x558>
    aa46:	08d7      	lsrs	r7, r2, #3
    aa48:	0749      	lsls	r1, r1, #29
    aa4a:	430f      	orrs	r7, r1
    aa4c:	001c      	movs	r4, r3
    aa4e:	e7d9      	b.n	aa04 <__aeabi_dsub+0x558>
    aa50:	2100      	movs	r1, #0
    aa52:	e771      	b.n	a938 <__aeabi_dsub+0x48c>
    aa54:	2500      	movs	r5, #0
    aa56:	2700      	movs	r7, #0
    aa58:	e5e9      	b.n	a62e <__aeabi_dsub+0x182>
    aa5a:	002e      	movs	r6, r5
    aa5c:	0027      	movs	r7, r4
    aa5e:	3e20      	subs	r6, #32
    aa60:	40f7      	lsrs	r7, r6
    aa62:	2d20      	cmp	r5, #32
    aa64:	d02f      	beq.n	aac6 <__aeabi_dsub+0x61a>
    aa66:	2640      	movs	r6, #64	; 0x40
    aa68:	1b75      	subs	r5, r6, r5
    aa6a:	40ac      	lsls	r4, r5
    aa6c:	4650      	mov	r0, sl
    aa6e:	4320      	orrs	r0, r4
    aa70:	1e44      	subs	r4, r0, #1
    aa72:	41a0      	sbcs	r0, r4
    aa74:	2400      	movs	r4, #0
    aa76:	4338      	orrs	r0, r7
    aa78:	e6dc      	b.n	a834 <__aeabi_dsub+0x388>
    aa7a:	2480      	movs	r4, #128	; 0x80
    aa7c:	2500      	movs	r5, #0
    aa7e:	0324      	lsls	r4, r4, #12
    aa80:	4e13      	ldr	r6, [pc, #76]	; (aad0 <__aeabi_dsub+0x624>)
    aa82:	2700      	movs	r7, #0
    aa84:	e5d3      	b.n	a62e <__aeabi_dsub+0x182>
    aa86:	4650      	mov	r0, sl
    aa88:	4320      	orrs	r0, r4
    aa8a:	0007      	movs	r7, r0
    aa8c:	1e78      	subs	r0, r7, #1
    aa8e:	4187      	sbcs	r7, r0
    aa90:	2400      	movs	r4, #0
    aa92:	18bf      	adds	r7, r7, r2
    aa94:	e760      	b.n	a958 <__aeabi_dsub+0x4ac>
    aa96:	000c      	movs	r4, r1
    aa98:	0017      	movs	r7, r2
    aa9a:	e58d      	b.n	a5b8 <__aeabi_dsub+0x10c>
    aa9c:	000c      	movs	r4, r1
    aa9e:	0017      	movs	r7, r2
    aaa0:	4e0b      	ldr	r6, [pc, #44]	; (aad0 <__aeabi_dsub+0x624>)
    aaa2:	e589      	b.n	a5b8 <__aeabi_dsub+0x10c>
    aaa4:	001e      	movs	r6, r3
    aaa6:	0027      	movs	r7, r4
    aaa8:	3e20      	subs	r6, #32
    aaaa:	40f7      	lsrs	r7, r6
    aaac:	2b20      	cmp	r3, #32
    aaae:	d00c      	beq.n	aaca <__aeabi_dsub+0x61e>
    aab0:	2640      	movs	r6, #64	; 0x40
    aab2:	1af3      	subs	r3, r6, r3
    aab4:	409c      	lsls	r4, r3
    aab6:	4650      	mov	r0, sl
    aab8:	4320      	orrs	r0, r4
    aaba:	1e44      	subs	r4, r0, #1
    aabc:	41a0      	sbcs	r0, r4
    aabe:	4307      	orrs	r7, r0
    aac0:	2400      	movs	r4, #0
    aac2:	18bf      	adds	r7, r7, r2
    aac4:	e748      	b.n	a958 <__aeabi_dsub+0x4ac>
    aac6:	2400      	movs	r4, #0
    aac8:	e7d0      	b.n	aa6c <__aeabi_dsub+0x5c0>
    aaca:	2400      	movs	r4, #0
    aacc:	e7f3      	b.n	aab6 <__aeabi_dsub+0x60a>
    aace:	46c0      	nop			; (mov r8, r8)
    aad0:	000007ff 	.word	0x000007ff
    aad4:	ff7fffff 	.word	0xff7fffff

0000aad8 <__aeabi_d2iz>:
    aad8:	b530      	push	{r4, r5, lr}
    aada:	4d13      	ldr	r5, [pc, #76]	; (ab28 <__aeabi_d2iz+0x50>)
    aadc:	030a      	lsls	r2, r1, #12
    aade:	004b      	lsls	r3, r1, #1
    aae0:	0b12      	lsrs	r2, r2, #12
    aae2:	0d5b      	lsrs	r3, r3, #21
    aae4:	0fc9      	lsrs	r1, r1, #31
    aae6:	2400      	movs	r4, #0
    aae8:	42ab      	cmp	r3, r5
    aaea:	dd10      	ble.n	ab0e <__aeabi_d2iz+0x36>
    aaec:	4c0f      	ldr	r4, [pc, #60]	; (ab2c <__aeabi_d2iz+0x54>)
    aaee:	42a3      	cmp	r3, r4
    aaf0:	dc0f      	bgt.n	ab12 <__aeabi_d2iz+0x3a>
    aaf2:	2480      	movs	r4, #128	; 0x80
    aaf4:	4d0e      	ldr	r5, [pc, #56]	; (ab30 <__aeabi_d2iz+0x58>)
    aaf6:	0364      	lsls	r4, r4, #13
    aaf8:	4322      	orrs	r2, r4
    aafa:	1aed      	subs	r5, r5, r3
    aafc:	2d1f      	cmp	r5, #31
    aafe:	dd0b      	ble.n	ab18 <__aeabi_d2iz+0x40>
    ab00:	480c      	ldr	r0, [pc, #48]	; (ab34 <__aeabi_d2iz+0x5c>)
    ab02:	1ac3      	subs	r3, r0, r3
    ab04:	40da      	lsrs	r2, r3
    ab06:	4254      	negs	r4, r2
    ab08:	2900      	cmp	r1, #0
    ab0a:	d100      	bne.n	ab0e <__aeabi_d2iz+0x36>
    ab0c:	0014      	movs	r4, r2
    ab0e:	0020      	movs	r0, r4
    ab10:	bd30      	pop	{r4, r5, pc}
    ab12:	4b09      	ldr	r3, [pc, #36]	; (ab38 <__aeabi_d2iz+0x60>)
    ab14:	18cc      	adds	r4, r1, r3
    ab16:	e7fa      	b.n	ab0e <__aeabi_d2iz+0x36>
    ab18:	4c08      	ldr	r4, [pc, #32]	; (ab3c <__aeabi_d2iz+0x64>)
    ab1a:	40e8      	lsrs	r0, r5
    ab1c:	46a4      	mov	ip, r4
    ab1e:	4463      	add	r3, ip
    ab20:	409a      	lsls	r2, r3
    ab22:	4302      	orrs	r2, r0
    ab24:	e7ef      	b.n	ab06 <__aeabi_d2iz+0x2e>
    ab26:	46c0      	nop			; (mov r8, r8)
    ab28:	000003fe 	.word	0x000003fe
    ab2c:	0000041d 	.word	0x0000041d
    ab30:	00000433 	.word	0x00000433
    ab34:	00000413 	.word	0x00000413
    ab38:	7fffffff 	.word	0x7fffffff
    ab3c:	fffffbed 	.word	0xfffffbed

0000ab40 <__aeabi_i2d>:
    ab40:	b570      	push	{r4, r5, r6, lr}
    ab42:	2800      	cmp	r0, #0
    ab44:	d030      	beq.n	aba8 <__aeabi_i2d+0x68>
    ab46:	17c3      	asrs	r3, r0, #31
    ab48:	18c4      	adds	r4, r0, r3
    ab4a:	405c      	eors	r4, r3
    ab4c:	0fc5      	lsrs	r5, r0, #31
    ab4e:	0020      	movs	r0, r4
    ab50:	f000 f900 	bl	ad54 <__clzsi2>
    ab54:	4b17      	ldr	r3, [pc, #92]	; (abb4 <__aeabi_i2d+0x74>)
    ab56:	4a18      	ldr	r2, [pc, #96]	; (abb8 <__aeabi_i2d+0x78>)
    ab58:	1a1b      	subs	r3, r3, r0
    ab5a:	1ad2      	subs	r2, r2, r3
    ab5c:	2a1f      	cmp	r2, #31
    ab5e:	dd18      	ble.n	ab92 <__aeabi_i2d+0x52>
    ab60:	4a16      	ldr	r2, [pc, #88]	; (abbc <__aeabi_i2d+0x7c>)
    ab62:	1ad2      	subs	r2, r2, r3
    ab64:	4094      	lsls	r4, r2
    ab66:	2200      	movs	r2, #0
    ab68:	0324      	lsls	r4, r4, #12
    ab6a:	055b      	lsls	r3, r3, #21
    ab6c:	0b24      	lsrs	r4, r4, #12
    ab6e:	0d5b      	lsrs	r3, r3, #21
    ab70:	2100      	movs	r1, #0
    ab72:	0010      	movs	r0, r2
    ab74:	0324      	lsls	r4, r4, #12
    ab76:	0d0a      	lsrs	r2, r1, #20
    ab78:	0b24      	lsrs	r4, r4, #12
    ab7a:	0512      	lsls	r2, r2, #20
    ab7c:	4322      	orrs	r2, r4
    ab7e:	4c10      	ldr	r4, [pc, #64]	; (abc0 <__aeabi_i2d+0x80>)
    ab80:	051b      	lsls	r3, r3, #20
    ab82:	4022      	ands	r2, r4
    ab84:	4313      	orrs	r3, r2
    ab86:	005b      	lsls	r3, r3, #1
    ab88:	07ed      	lsls	r5, r5, #31
    ab8a:	085b      	lsrs	r3, r3, #1
    ab8c:	432b      	orrs	r3, r5
    ab8e:	0019      	movs	r1, r3
    ab90:	bd70      	pop	{r4, r5, r6, pc}
    ab92:	0021      	movs	r1, r4
    ab94:	4091      	lsls	r1, r2
    ab96:	000a      	movs	r2, r1
    ab98:	210b      	movs	r1, #11
    ab9a:	1a08      	subs	r0, r1, r0
    ab9c:	40c4      	lsrs	r4, r0
    ab9e:	055b      	lsls	r3, r3, #21
    aba0:	0324      	lsls	r4, r4, #12
    aba2:	0b24      	lsrs	r4, r4, #12
    aba4:	0d5b      	lsrs	r3, r3, #21
    aba6:	e7e3      	b.n	ab70 <__aeabi_i2d+0x30>
    aba8:	2500      	movs	r5, #0
    abaa:	2300      	movs	r3, #0
    abac:	2400      	movs	r4, #0
    abae:	2200      	movs	r2, #0
    abb0:	e7de      	b.n	ab70 <__aeabi_i2d+0x30>
    abb2:	46c0      	nop			; (mov r8, r8)
    abb4:	0000041e 	.word	0x0000041e
    abb8:	00000433 	.word	0x00000433
    abbc:	00000413 	.word	0x00000413
    abc0:	800fffff 	.word	0x800fffff

0000abc4 <__aeabi_ui2d>:
    abc4:	b510      	push	{r4, lr}
    abc6:	1e04      	subs	r4, r0, #0
    abc8:	d028      	beq.n	ac1c <__aeabi_ui2d+0x58>
    abca:	f000 f8c3 	bl	ad54 <__clzsi2>
    abce:	4b15      	ldr	r3, [pc, #84]	; (ac24 <__aeabi_ui2d+0x60>)
    abd0:	4a15      	ldr	r2, [pc, #84]	; (ac28 <__aeabi_ui2d+0x64>)
    abd2:	1a1b      	subs	r3, r3, r0
    abd4:	1ad2      	subs	r2, r2, r3
    abd6:	2a1f      	cmp	r2, #31
    abd8:	dd15      	ble.n	ac06 <__aeabi_ui2d+0x42>
    abda:	4a14      	ldr	r2, [pc, #80]	; (ac2c <__aeabi_ui2d+0x68>)
    abdc:	1ad2      	subs	r2, r2, r3
    abde:	4094      	lsls	r4, r2
    abe0:	2200      	movs	r2, #0
    abe2:	0324      	lsls	r4, r4, #12
    abe4:	055b      	lsls	r3, r3, #21
    abe6:	0b24      	lsrs	r4, r4, #12
    abe8:	0d5b      	lsrs	r3, r3, #21
    abea:	2100      	movs	r1, #0
    abec:	0010      	movs	r0, r2
    abee:	0324      	lsls	r4, r4, #12
    abf0:	0d0a      	lsrs	r2, r1, #20
    abf2:	0b24      	lsrs	r4, r4, #12
    abf4:	0512      	lsls	r2, r2, #20
    abf6:	4322      	orrs	r2, r4
    abf8:	4c0d      	ldr	r4, [pc, #52]	; (ac30 <__aeabi_ui2d+0x6c>)
    abfa:	051b      	lsls	r3, r3, #20
    abfc:	4022      	ands	r2, r4
    abfe:	4313      	orrs	r3, r2
    ac00:	005b      	lsls	r3, r3, #1
    ac02:	0859      	lsrs	r1, r3, #1
    ac04:	bd10      	pop	{r4, pc}
    ac06:	0021      	movs	r1, r4
    ac08:	4091      	lsls	r1, r2
    ac0a:	000a      	movs	r2, r1
    ac0c:	210b      	movs	r1, #11
    ac0e:	1a08      	subs	r0, r1, r0
    ac10:	40c4      	lsrs	r4, r0
    ac12:	055b      	lsls	r3, r3, #21
    ac14:	0324      	lsls	r4, r4, #12
    ac16:	0b24      	lsrs	r4, r4, #12
    ac18:	0d5b      	lsrs	r3, r3, #21
    ac1a:	e7e6      	b.n	abea <__aeabi_ui2d+0x26>
    ac1c:	2300      	movs	r3, #0
    ac1e:	2400      	movs	r4, #0
    ac20:	2200      	movs	r2, #0
    ac22:	e7e2      	b.n	abea <__aeabi_ui2d+0x26>
    ac24:	0000041e 	.word	0x0000041e
    ac28:	00000433 	.word	0x00000433
    ac2c:	00000413 	.word	0x00000413
    ac30:	800fffff 	.word	0x800fffff

0000ac34 <__aeabi_f2d>:
    ac34:	0041      	lsls	r1, r0, #1
    ac36:	0e09      	lsrs	r1, r1, #24
    ac38:	1c4b      	adds	r3, r1, #1
    ac3a:	b570      	push	{r4, r5, r6, lr}
    ac3c:	b2db      	uxtb	r3, r3
    ac3e:	0246      	lsls	r6, r0, #9
    ac40:	0a75      	lsrs	r5, r6, #9
    ac42:	0fc4      	lsrs	r4, r0, #31
    ac44:	2b01      	cmp	r3, #1
    ac46:	dd14      	ble.n	ac72 <__aeabi_f2d+0x3e>
    ac48:	23e0      	movs	r3, #224	; 0xe0
    ac4a:	009b      	lsls	r3, r3, #2
    ac4c:	076d      	lsls	r5, r5, #29
    ac4e:	0b36      	lsrs	r6, r6, #12
    ac50:	18cb      	adds	r3, r1, r3
    ac52:	2100      	movs	r1, #0
    ac54:	0d0a      	lsrs	r2, r1, #20
    ac56:	0028      	movs	r0, r5
    ac58:	0512      	lsls	r2, r2, #20
    ac5a:	4d1c      	ldr	r5, [pc, #112]	; (accc <__aeabi_f2d+0x98>)
    ac5c:	4332      	orrs	r2, r6
    ac5e:	055b      	lsls	r3, r3, #21
    ac60:	402a      	ands	r2, r5
    ac62:	085b      	lsrs	r3, r3, #1
    ac64:	4313      	orrs	r3, r2
    ac66:	005b      	lsls	r3, r3, #1
    ac68:	07e4      	lsls	r4, r4, #31
    ac6a:	085b      	lsrs	r3, r3, #1
    ac6c:	4323      	orrs	r3, r4
    ac6e:	0019      	movs	r1, r3
    ac70:	bd70      	pop	{r4, r5, r6, pc}
    ac72:	2900      	cmp	r1, #0
    ac74:	d114      	bne.n	aca0 <__aeabi_f2d+0x6c>
    ac76:	2d00      	cmp	r5, #0
    ac78:	d01e      	beq.n	acb8 <__aeabi_f2d+0x84>
    ac7a:	0028      	movs	r0, r5
    ac7c:	f000 f86a 	bl	ad54 <__clzsi2>
    ac80:	280a      	cmp	r0, #10
    ac82:	dc1c      	bgt.n	acbe <__aeabi_f2d+0x8a>
    ac84:	230b      	movs	r3, #11
    ac86:	002a      	movs	r2, r5
    ac88:	1a1b      	subs	r3, r3, r0
    ac8a:	40da      	lsrs	r2, r3
    ac8c:	0003      	movs	r3, r0
    ac8e:	3315      	adds	r3, #21
    ac90:	409d      	lsls	r5, r3
    ac92:	4b0f      	ldr	r3, [pc, #60]	; (acd0 <__aeabi_f2d+0x9c>)
    ac94:	0312      	lsls	r2, r2, #12
    ac96:	1a1b      	subs	r3, r3, r0
    ac98:	055b      	lsls	r3, r3, #21
    ac9a:	0b16      	lsrs	r6, r2, #12
    ac9c:	0d5b      	lsrs	r3, r3, #21
    ac9e:	e7d8      	b.n	ac52 <__aeabi_f2d+0x1e>
    aca0:	2d00      	cmp	r5, #0
    aca2:	d006      	beq.n	acb2 <__aeabi_f2d+0x7e>
    aca4:	0b32      	lsrs	r2, r6, #12
    aca6:	2680      	movs	r6, #128	; 0x80
    aca8:	0336      	lsls	r6, r6, #12
    acaa:	076d      	lsls	r5, r5, #29
    acac:	4316      	orrs	r6, r2
    acae:	4b09      	ldr	r3, [pc, #36]	; (acd4 <__aeabi_f2d+0xa0>)
    acb0:	e7cf      	b.n	ac52 <__aeabi_f2d+0x1e>
    acb2:	4b08      	ldr	r3, [pc, #32]	; (acd4 <__aeabi_f2d+0xa0>)
    acb4:	2600      	movs	r6, #0
    acb6:	e7cc      	b.n	ac52 <__aeabi_f2d+0x1e>
    acb8:	2300      	movs	r3, #0
    acba:	2600      	movs	r6, #0
    acbc:	e7c9      	b.n	ac52 <__aeabi_f2d+0x1e>
    acbe:	0003      	movs	r3, r0
    acc0:	002a      	movs	r2, r5
    acc2:	3b0b      	subs	r3, #11
    acc4:	409a      	lsls	r2, r3
    acc6:	2500      	movs	r5, #0
    acc8:	e7e3      	b.n	ac92 <__aeabi_f2d+0x5e>
    acca:	46c0      	nop			; (mov r8, r8)
    accc:	800fffff 	.word	0x800fffff
    acd0:	00000389 	.word	0x00000389
    acd4:	000007ff 	.word	0x000007ff

0000acd8 <__aeabi_cdrcmple>:
    acd8:	4684      	mov	ip, r0
    acda:	1c10      	adds	r0, r2, #0
    acdc:	4662      	mov	r2, ip
    acde:	468c      	mov	ip, r1
    ace0:	1c19      	adds	r1, r3, #0
    ace2:	4663      	mov	r3, ip
    ace4:	e000      	b.n	ace8 <__aeabi_cdcmpeq>
    ace6:	46c0      	nop			; (mov r8, r8)

0000ace8 <__aeabi_cdcmpeq>:
    ace8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    acea:	f000 f91b 	bl	af24 <__ledf2>
    acee:	2800      	cmp	r0, #0
    acf0:	d401      	bmi.n	acf6 <__aeabi_cdcmpeq+0xe>
    acf2:	2100      	movs	r1, #0
    acf4:	42c8      	cmn	r0, r1
    acf6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000acf8 <__aeabi_dcmpeq>:
    acf8:	b510      	push	{r4, lr}
    acfa:	f000 f875 	bl	ade8 <__eqdf2>
    acfe:	4240      	negs	r0, r0
    ad00:	3001      	adds	r0, #1
    ad02:	bd10      	pop	{r4, pc}

0000ad04 <__aeabi_dcmplt>:
    ad04:	b510      	push	{r4, lr}
    ad06:	f000 f90d 	bl	af24 <__ledf2>
    ad0a:	2800      	cmp	r0, #0
    ad0c:	db01      	blt.n	ad12 <__aeabi_dcmplt+0xe>
    ad0e:	2000      	movs	r0, #0
    ad10:	bd10      	pop	{r4, pc}
    ad12:	2001      	movs	r0, #1
    ad14:	bd10      	pop	{r4, pc}
    ad16:	46c0      	nop			; (mov r8, r8)

0000ad18 <__aeabi_dcmple>:
    ad18:	b510      	push	{r4, lr}
    ad1a:	f000 f903 	bl	af24 <__ledf2>
    ad1e:	2800      	cmp	r0, #0
    ad20:	dd01      	ble.n	ad26 <__aeabi_dcmple+0xe>
    ad22:	2000      	movs	r0, #0
    ad24:	bd10      	pop	{r4, pc}
    ad26:	2001      	movs	r0, #1
    ad28:	bd10      	pop	{r4, pc}
    ad2a:	46c0      	nop			; (mov r8, r8)

0000ad2c <__aeabi_dcmpgt>:
    ad2c:	b510      	push	{r4, lr}
    ad2e:	f000 f895 	bl	ae5c <__gedf2>
    ad32:	2800      	cmp	r0, #0
    ad34:	dc01      	bgt.n	ad3a <__aeabi_dcmpgt+0xe>
    ad36:	2000      	movs	r0, #0
    ad38:	bd10      	pop	{r4, pc}
    ad3a:	2001      	movs	r0, #1
    ad3c:	bd10      	pop	{r4, pc}
    ad3e:	46c0      	nop			; (mov r8, r8)

0000ad40 <__aeabi_dcmpge>:
    ad40:	b510      	push	{r4, lr}
    ad42:	f000 f88b 	bl	ae5c <__gedf2>
    ad46:	2800      	cmp	r0, #0
    ad48:	da01      	bge.n	ad4e <__aeabi_dcmpge+0xe>
    ad4a:	2000      	movs	r0, #0
    ad4c:	bd10      	pop	{r4, pc}
    ad4e:	2001      	movs	r0, #1
    ad50:	bd10      	pop	{r4, pc}
    ad52:	46c0      	nop			; (mov r8, r8)

0000ad54 <__clzsi2>:
    ad54:	211c      	movs	r1, #28
    ad56:	2301      	movs	r3, #1
    ad58:	041b      	lsls	r3, r3, #16
    ad5a:	4298      	cmp	r0, r3
    ad5c:	d301      	bcc.n	ad62 <__clzsi2+0xe>
    ad5e:	0c00      	lsrs	r0, r0, #16
    ad60:	3910      	subs	r1, #16
    ad62:	0a1b      	lsrs	r3, r3, #8
    ad64:	4298      	cmp	r0, r3
    ad66:	d301      	bcc.n	ad6c <__clzsi2+0x18>
    ad68:	0a00      	lsrs	r0, r0, #8
    ad6a:	3908      	subs	r1, #8
    ad6c:	091b      	lsrs	r3, r3, #4
    ad6e:	4298      	cmp	r0, r3
    ad70:	d301      	bcc.n	ad76 <__clzsi2+0x22>
    ad72:	0900      	lsrs	r0, r0, #4
    ad74:	3904      	subs	r1, #4
    ad76:	a202      	add	r2, pc, #8	; (adr r2, ad80 <__clzsi2+0x2c>)
    ad78:	5c10      	ldrb	r0, [r2, r0]
    ad7a:	1840      	adds	r0, r0, r1
    ad7c:	4770      	bx	lr
    ad7e:	46c0      	nop			; (mov r8, r8)
    ad80:	02020304 	.word	0x02020304
    ad84:	01010101 	.word	0x01010101
	...

0000ad90 <__clzdi2>:
    ad90:	b510      	push	{r4, lr}
    ad92:	2900      	cmp	r1, #0
    ad94:	d103      	bne.n	ad9e <__clzdi2+0xe>
    ad96:	f7ff ffdd 	bl	ad54 <__clzsi2>
    ad9a:	3020      	adds	r0, #32
    ad9c:	e002      	b.n	ada4 <__clzdi2+0x14>
    ad9e:	1c08      	adds	r0, r1, #0
    ada0:	f7ff ffd8 	bl	ad54 <__clzsi2>
    ada4:	bd10      	pop	{r4, pc}
    ada6:	46c0      	nop			; (mov r8, r8)

0000ada8 <__ctzsi2>:
    ada8:	4241      	negs	r1, r0
    adaa:	4008      	ands	r0, r1
    adac:	211c      	movs	r1, #28
    adae:	2301      	movs	r3, #1
    adb0:	041b      	lsls	r3, r3, #16
    adb2:	4298      	cmp	r0, r3
    adb4:	d301      	bcc.n	adba <__ctzsi2+0x12>
    adb6:	0c00      	lsrs	r0, r0, #16
    adb8:	3910      	subs	r1, #16
    adba:	0a1b      	lsrs	r3, r3, #8
    adbc:	4298      	cmp	r0, r3
    adbe:	d301      	bcc.n	adc4 <__ctzsi2+0x1c>
    adc0:	0a00      	lsrs	r0, r0, #8
    adc2:	3908      	subs	r1, #8
    adc4:	091b      	lsrs	r3, r3, #4
    adc6:	4298      	cmp	r0, r3
    adc8:	d301      	bcc.n	adce <__ctzsi2+0x26>
    adca:	0900      	lsrs	r0, r0, #4
    adcc:	3904      	subs	r1, #4
    adce:	a202      	add	r2, pc, #8	; (adr r2, add8 <__ctzsi2+0x30>)
    add0:	5c10      	ldrb	r0, [r2, r0]
    add2:	1a40      	subs	r0, r0, r1
    add4:	4770      	bx	lr
    add6:	46c0      	nop			; (mov r8, r8)
    add8:	1d1d1c1b 	.word	0x1d1d1c1b
    addc:	1e1e1e1e 	.word	0x1e1e1e1e
    ade0:	1f1f1f1f 	.word	0x1f1f1f1f
    ade4:	1f1f1f1f 	.word	0x1f1f1f1f

0000ade8 <__eqdf2>:
    ade8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adea:	464f      	mov	r7, r9
    adec:	4646      	mov	r6, r8
    adee:	46d6      	mov	lr, sl
    adf0:	005c      	lsls	r4, r3, #1
    adf2:	b5c0      	push	{r6, r7, lr}
    adf4:	031f      	lsls	r7, r3, #12
    adf6:	0fdb      	lsrs	r3, r3, #31
    adf8:	469a      	mov	sl, r3
    adfa:	4b17      	ldr	r3, [pc, #92]	; (ae58 <__eqdf2+0x70>)
    adfc:	030e      	lsls	r6, r1, #12
    adfe:	004d      	lsls	r5, r1, #1
    ae00:	4684      	mov	ip, r0
    ae02:	4680      	mov	r8, r0
    ae04:	0b36      	lsrs	r6, r6, #12
    ae06:	0d6d      	lsrs	r5, r5, #21
    ae08:	0fc9      	lsrs	r1, r1, #31
    ae0a:	4691      	mov	r9, r2
    ae0c:	0b3f      	lsrs	r7, r7, #12
    ae0e:	0d64      	lsrs	r4, r4, #21
    ae10:	2001      	movs	r0, #1
    ae12:	429d      	cmp	r5, r3
    ae14:	d008      	beq.n	ae28 <__eqdf2+0x40>
    ae16:	429c      	cmp	r4, r3
    ae18:	d001      	beq.n	ae1e <__eqdf2+0x36>
    ae1a:	42a5      	cmp	r5, r4
    ae1c:	d00b      	beq.n	ae36 <__eqdf2+0x4e>
    ae1e:	bc1c      	pop	{r2, r3, r4}
    ae20:	4690      	mov	r8, r2
    ae22:	4699      	mov	r9, r3
    ae24:	46a2      	mov	sl, r4
    ae26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae28:	4663      	mov	r3, ip
    ae2a:	4333      	orrs	r3, r6
    ae2c:	d1f7      	bne.n	ae1e <__eqdf2+0x36>
    ae2e:	42ac      	cmp	r4, r5
    ae30:	d1f5      	bne.n	ae1e <__eqdf2+0x36>
    ae32:	433a      	orrs	r2, r7
    ae34:	d1f3      	bne.n	ae1e <__eqdf2+0x36>
    ae36:	2001      	movs	r0, #1
    ae38:	42be      	cmp	r6, r7
    ae3a:	d1f0      	bne.n	ae1e <__eqdf2+0x36>
    ae3c:	45c8      	cmp	r8, r9
    ae3e:	d1ee      	bne.n	ae1e <__eqdf2+0x36>
    ae40:	4551      	cmp	r1, sl
    ae42:	d007      	beq.n	ae54 <__eqdf2+0x6c>
    ae44:	2d00      	cmp	r5, #0
    ae46:	d1ea      	bne.n	ae1e <__eqdf2+0x36>
    ae48:	4663      	mov	r3, ip
    ae4a:	431e      	orrs	r6, r3
    ae4c:	0030      	movs	r0, r6
    ae4e:	1e46      	subs	r6, r0, #1
    ae50:	41b0      	sbcs	r0, r6
    ae52:	e7e4      	b.n	ae1e <__eqdf2+0x36>
    ae54:	2000      	movs	r0, #0
    ae56:	e7e2      	b.n	ae1e <__eqdf2+0x36>
    ae58:	000007ff 	.word	0x000007ff

0000ae5c <__gedf2>:
    ae5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae5e:	4645      	mov	r5, r8
    ae60:	46de      	mov	lr, fp
    ae62:	4657      	mov	r7, sl
    ae64:	464e      	mov	r6, r9
    ae66:	b5e0      	push	{r5, r6, r7, lr}
    ae68:	031f      	lsls	r7, r3, #12
    ae6a:	0b3d      	lsrs	r5, r7, #12
    ae6c:	4f2c      	ldr	r7, [pc, #176]	; (af20 <__gedf2+0xc4>)
    ae6e:	030e      	lsls	r6, r1, #12
    ae70:	004c      	lsls	r4, r1, #1
    ae72:	46ab      	mov	fp, r5
    ae74:	005d      	lsls	r5, r3, #1
    ae76:	4684      	mov	ip, r0
    ae78:	0b36      	lsrs	r6, r6, #12
    ae7a:	0d64      	lsrs	r4, r4, #21
    ae7c:	0fc9      	lsrs	r1, r1, #31
    ae7e:	4690      	mov	r8, r2
    ae80:	0d6d      	lsrs	r5, r5, #21
    ae82:	0fdb      	lsrs	r3, r3, #31
    ae84:	42bc      	cmp	r4, r7
    ae86:	d02a      	beq.n	aede <__gedf2+0x82>
    ae88:	4f25      	ldr	r7, [pc, #148]	; (af20 <__gedf2+0xc4>)
    ae8a:	42bd      	cmp	r5, r7
    ae8c:	d02d      	beq.n	aeea <__gedf2+0x8e>
    ae8e:	2c00      	cmp	r4, #0
    ae90:	d10f      	bne.n	aeb2 <__gedf2+0x56>
    ae92:	4330      	orrs	r0, r6
    ae94:	0007      	movs	r7, r0
    ae96:	4681      	mov	r9, r0
    ae98:	4278      	negs	r0, r7
    ae9a:	4178      	adcs	r0, r7
    ae9c:	b2c0      	uxtb	r0, r0
    ae9e:	2d00      	cmp	r5, #0
    aea0:	d117      	bne.n	aed2 <__gedf2+0x76>
    aea2:	465f      	mov	r7, fp
    aea4:	433a      	orrs	r2, r7
    aea6:	d114      	bne.n	aed2 <__gedf2+0x76>
    aea8:	464b      	mov	r3, r9
    aeaa:	2000      	movs	r0, #0
    aeac:	2b00      	cmp	r3, #0
    aeae:	d00a      	beq.n	aec6 <__gedf2+0x6a>
    aeb0:	e006      	b.n	aec0 <__gedf2+0x64>
    aeb2:	2d00      	cmp	r5, #0
    aeb4:	d102      	bne.n	aebc <__gedf2+0x60>
    aeb6:	4658      	mov	r0, fp
    aeb8:	4302      	orrs	r2, r0
    aeba:	d001      	beq.n	aec0 <__gedf2+0x64>
    aebc:	4299      	cmp	r1, r3
    aebe:	d018      	beq.n	aef2 <__gedf2+0x96>
    aec0:	4248      	negs	r0, r1
    aec2:	2101      	movs	r1, #1
    aec4:	4308      	orrs	r0, r1
    aec6:	bc3c      	pop	{r2, r3, r4, r5}
    aec8:	4690      	mov	r8, r2
    aeca:	4699      	mov	r9, r3
    aecc:	46a2      	mov	sl, r4
    aece:	46ab      	mov	fp, r5
    aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aed2:	2800      	cmp	r0, #0
    aed4:	d0f2      	beq.n	aebc <__gedf2+0x60>
    aed6:	2001      	movs	r0, #1
    aed8:	3b01      	subs	r3, #1
    aeda:	4318      	orrs	r0, r3
    aedc:	e7f3      	b.n	aec6 <__gedf2+0x6a>
    aede:	0037      	movs	r7, r6
    aee0:	4307      	orrs	r7, r0
    aee2:	d0d1      	beq.n	ae88 <__gedf2+0x2c>
    aee4:	2002      	movs	r0, #2
    aee6:	4240      	negs	r0, r0
    aee8:	e7ed      	b.n	aec6 <__gedf2+0x6a>
    aeea:	465f      	mov	r7, fp
    aeec:	4317      	orrs	r7, r2
    aeee:	d0ce      	beq.n	ae8e <__gedf2+0x32>
    aef0:	e7f8      	b.n	aee4 <__gedf2+0x88>
    aef2:	42ac      	cmp	r4, r5
    aef4:	dce4      	bgt.n	aec0 <__gedf2+0x64>
    aef6:	da03      	bge.n	af00 <__gedf2+0xa4>
    aef8:	1e48      	subs	r0, r1, #1
    aefa:	2101      	movs	r1, #1
    aefc:	4308      	orrs	r0, r1
    aefe:	e7e2      	b.n	aec6 <__gedf2+0x6a>
    af00:	455e      	cmp	r6, fp
    af02:	d8dd      	bhi.n	aec0 <__gedf2+0x64>
    af04:	d006      	beq.n	af14 <__gedf2+0xb8>
    af06:	2000      	movs	r0, #0
    af08:	455e      	cmp	r6, fp
    af0a:	d2dc      	bcs.n	aec6 <__gedf2+0x6a>
    af0c:	2301      	movs	r3, #1
    af0e:	1e48      	subs	r0, r1, #1
    af10:	4318      	orrs	r0, r3
    af12:	e7d8      	b.n	aec6 <__gedf2+0x6a>
    af14:	45c4      	cmp	ip, r8
    af16:	d8d3      	bhi.n	aec0 <__gedf2+0x64>
    af18:	2000      	movs	r0, #0
    af1a:	45c4      	cmp	ip, r8
    af1c:	d3f6      	bcc.n	af0c <__gedf2+0xb0>
    af1e:	e7d2      	b.n	aec6 <__gedf2+0x6a>
    af20:	000007ff 	.word	0x000007ff

0000af24 <__ledf2>:
    af24:	b5f0      	push	{r4, r5, r6, r7, lr}
    af26:	464e      	mov	r6, r9
    af28:	4645      	mov	r5, r8
    af2a:	46de      	mov	lr, fp
    af2c:	4657      	mov	r7, sl
    af2e:	005c      	lsls	r4, r3, #1
    af30:	b5e0      	push	{r5, r6, r7, lr}
    af32:	031f      	lsls	r7, r3, #12
    af34:	0fdb      	lsrs	r3, r3, #31
    af36:	4699      	mov	r9, r3
    af38:	4b2a      	ldr	r3, [pc, #168]	; (afe4 <__ledf2+0xc0>)
    af3a:	030e      	lsls	r6, r1, #12
    af3c:	004d      	lsls	r5, r1, #1
    af3e:	0fc9      	lsrs	r1, r1, #31
    af40:	4684      	mov	ip, r0
    af42:	0b36      	lsrs	r6, r6, #12
    af44:	0d6d      	lsrs	r5, r5, #21
    af46:	468b      	mov	fp, r1
    af48:	4690      	mov	r8, r2
    af4a:	0b3f      	lsrs	r7, r7, #12
    af4c:	0d64      	lsrs	r4, r4, #21
    af4e:	429d      	cmp	r5, r3
    af50:	d020      	beq.n	af94 <__ledf2+0x70>
    af52:	4b24      	ldr	r3, [pc, #144]	; (afe4 <__ledf2+0xc0>)
    af54:	429c      	cmp	r4, r3
    af56:	d022      	beq.n	af9e <__ledf2+0x7a>
    af58:	2d00      	cmp	r5, #0
    af5a:	d112      	bne.n	af82 <__ledf2+0x5e>
    af5c:	4330      	orrs	r0, r6
    af5e:	4243      	negs	r3, r0
    af60:	4143      	adcs	r3, r0
    af62:	b2db      	uxtb	r3, r3
    af64:	2c00      	cmp	r4, #0
    af66:	d01f      	beq.n	afa8 <__ledf2+0x84>
    af68:	2b00      	cmp	r3, #0
    af6a:	d00c      	beq.n	af86 <__ledf2+0x62>
    af6c:	464b      	mov	r3, r9
    af6e:	2001      	movs	r0, #1
    af70:	3b01      	subs	r3, #1
    af72:	4303      	orrs	r3, r0
    af74:	0018      	movs	r0, r3
    af76:	bc3c      	pop	{r2, r3, r4, r5}
    af78:	4690      	mov	r8, r2
    af7a:	4699      	mov	r9, r3
    af7c:	46a2      	mov	sl, r4
    af7e:	46ab      	mov	fp, r5
    af80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af82:	2c00      	cmp	r4, #0
    af84:	d016      	beq.n	afb4 <__ledf2+0x90>
    af86:	45cb      	cmp	fp, r9
    af88:	d017      	beq.n	afba <__ledf2+0x96>
    af8a:	465b      	mov	r3, fp
    af8c:	4259      	negs	r1, r3
    af8e:	2301      	movs	r3, #1
    af90:	430b      	orrs	r3, r1
    af92:	e7ef      	b.n	af74 <__ledf2+0x50>
    af94:	0031      	movs	r1, r6
    af96:	2302      	movs	r3, #2
    af98:	4301      	orrs	r1, r0
    af9a:	d1eb      	bne.n	af74 <__ledf2+0x50>
    af9c:	e7d9      	b.n	af52 <__ledf2+0x2e>
    af9e:	0039      	movs	r1, r7
    afa0:	2302      	movs	r3, #2
    afa2:	4311      	orrs	r1, r2
    afa4:	d1e6      	bne.n	af74 <__ledf2+0x50>
    afa6:	e7d7      	b.n	af58 <__ledf2+0x34>
    afa8:	433a      	orrs	r2, r7
    afaa:	d1dd      	bne.n	af68 <__ledf2+0x44>
    afac:	2300      	movs	r3, #0
    afae:	2800      	cmp	r0, #0
    afb0:	d0e0      	beq.n	af74 <__ledf2+0x50>
    afb2:	e7ea      	b.n	af8a <__ledf2+0x66>
    afb4:	433a      	orrs	r2, r7
    afb6:	d1e6      	bne.n	af86 <__ledf2+0x62>
    afb8:	e7e7      	b.n	af8a <__ledf2+0x66>
    afba:	42a5      	cmp	r5, r4
    afbc:	dce5      	bgt.n	af8a <__ledf2+0x66>
    afbe:	db05      	blt.n	afcc <__ledf2+0xa8>
    afc0:	42be      	cmp	r6, r7
    afc2:	d8e2      	bhi.n	af8a <__ledf2+0x66>
    afc4:	d007      	beq.n	afd6 <__ledf2+0xb2>
    afc6:	2300      	movs	r3, #0
    afc8:	42be      	cmp	r6, r7
    afca:	d2d3      	bcs.n	af74 <__ledf2+0x50>
    afcc:	4659      	mov	r1, fp
    afce:	2301      	movs	r3, #1
    afd0:	3901      	subs	r1, #1
    afd2:	430b      	orrs	r3, r1
    afd4:	e7ce      	b.n	af74 <__ledf2+0x50>
    afd6:	45c4      	cmp	ip, r8
    afd8:	d8d7      	bhi.n	af8a <__ledf2+0x66>
    afda:	2300      	movs	r3, #0
    afdc:	45c4      	cmp	ip, r8
    afde:	d3f5      	bcc.n	afcc <__ledf2+0xa8>
    afe0:	e7c8      	b.n	af74 <__ledf2+0x50>
    afe2:	46c0      	nop			; (mov r8, r8)
    afe4:	000007ff 	.word	0x000007ff

0000afe8 <__libc_init_array>:
    afe8:	b570      	push	{r4, r5, r6, lr}
    afea:	4e0d      	ldr	r6, [pc, #52]	; (b020 <__libc_init_array+0x38>)
    afec:	4d0d      	ldr	r5, [pc, #52]	; (b024 <__libc_init_array+0x3c>)
    afee:	2400      	movs	r4, #0
    aff0:	1bad      	subs	r5, r5, r6
    aff2:	10ad      	asrs	r5, r5, #2
    aff4:	d005      	beq.n	b002 <__libc_init_array+0x1a>
    aff6:	00a3      	lsls	r3, r4, #2
    aff8:	58f3      	ldr	r3, [r6, r3]
    affa:	3401      	adds	r4, #1
    affc:	4798      	blx	r3
    affe:	42a5      	cmp	r5, r4
    b000:	d1f9      	bne.n	aff6 <__libc_init_array+0xe>
    b002:	f00e fbaf 	bl	19764 <_init>
    b006:	4e08      	ldr	r6, [pc, #32]	; (b028 <__libc_init_array+0x40>)
    b008:	4d08      	ldr	r5, [pc, #32]	; (b02c <__libc_init_array+0x44>)
    b00a:	2400      	movs	r4, #0
    b00c:	1bad      	subs	r5, r5, r6
    b00e:	10ad      	asrs	r5, r5, #2
    b010:	d005      	beq.n	b01e <__libc_init_array+0x36>
    b012:	00a3      	lsls	r3, r4, #2
    b014:	58f3      	ldr	r3, [r6, r3]
    b016:	3401      	adds	r4, #1
    b018:	4798      	blx	r3
    b01a:	42a5      	cmp	r5, r4
    b01c:	d1f9      	bne.n	b012 <__libc_init_array+0x2a>
    b01e:	bd70      	pop	{r4, r5, r6, pc}
    b020:	00019770 	.word	0x00019770
    b024:	00019770 	.word	0x00019770
    b028:	00019770 	.word	0x00019770
    b02c:	00019778 	.word	0x00019778

0000b030 <malloc>:
    b030:	b510      	push	{r4, lr}
    b032:	4b03      	ldr	r3, [pc, #12]	; (b040 <malloc+0x10>)
    b034:	0001      	movs	r1, r0
    b036:	6818      	ldr	r0, [r3, #0]
    b038:	f000 f804 	bl	b044 <_malloc_r>
    b03c:	bd10      	pop	{r4, pc}
    b03e:	46c0      	nop			; (mov r8, r8)
    b040:	20000088 	.word	0x20000088

0000b044 <_malloc_r>:
    b044:	b5f0      	push	{r4, r5, r6, r7, lr}
    b046:	4657      	mov	r7, sl
    b048:	4645      	mov	r5, r8
    b04a:	46de      	mov	lr, fp
    b04c:	464e      	mov	r6, r9
    b04e:	b5e0      	push	{r5, r6, r7, lr}
    b050:	000d      	movs	r5, r1
    b052:	350b      	adds	r5, #11
    b054:	b083      	sub	sp, #12
    b056:	0007      	movs	r7, r0
    b058:	2d16      	cmp	r5, #22
    b05a:	d800      	bhi.n	b05e <_malloc_r+0x1a>
    b05c:	e09f      	b.n	b19e <_malloc_r+0x15a>
    b05e:	2307      	movs	r3, #7
    b060:	439d      	bics	r5, r3
    b062:	d500      	bpl.n	b066 <_malloc_r+0x22>
    b064:	e0c4      	b.n	b1f0 <_malloc_r+0x1ac>
    b066:	42a9      	cmp	r1, r5
    b068:	d900      	bls.n	b06c <_malloc_r+0x28>
    b06a:	e0c1      	b.n	b1f0 <_malloc_r+0x1ac>
    b06c:	f000 fb50 	bl	b710 <__malloc_lock>
    b070:	23f8      	movs	r3, #248	; 0xf8
    b072:	33ff      	adds	r3, #255	; 0xff
    b074:	429d      	cmp	r5, r3
    b076:	d800      	bhi.n	b07a <_malloc_r+0x36>
    b078:	e28f      	b.n	b59a <_malloc_r+0x556>
    b07a:	0a68      	lsrs	r0, r5, #9
    b07c:	d100      	bne.n	b080 <_malloc_r+0x3c>
    b07e:	e0bb      	b.n	b1f8 <_malloc_r+0x1b4>
    b080:	2804      	cmp	r0, #4
    b082:	d900      	bls.n	b086 <_malloc_r+0x42>
    b084:	e162      	b.n	b34c <_malloc_r+0x308>
    b086:	2338      	movs	r3, #56	; 0x38
    b088:	4698      	mov	r8, r3
    b08a:	09a8      	lsrs	r0, r5, #6
    b08c:	4480      	add	r8, r0
    b08e:	3039      	adds	r0, #57	; 0x39
    b090:	00c1      	lsls	r1, r0, #3
    b092:	4ed2      	ldr	r6, [pc, #840]	; (b3dc <_malloc_r+0x398>)
    b094:	1871      	adds	r1, r6, r1
    b096:	3908      	subs	r1, #8
    b098:	68cc      	ldr	r4, [r1, #12]
    b09a:	42a1      	cmp	r1, r4
    b09c:	d019      	beq.n	b0d2 <_malloc_r+0x8e>
    b09e:	2303      	movs	r3, #3
    b0a0:	6862      	ldr	r2, [r4, #4]
    b0a2:	439a      	bics	r2, r3
    b0a4:	0013      	movs	r3, r2
    b0a6:	1b52      	subs	r2, r2, r5
    b0a8:	2a0f      	cmp	r2, #15
    b0aa:	dd00      	ble.n	b0ae <_malloc_r+0x6a>
    b0ac:	e0aa      	b.n	b204 <_malloc_r+0x1c0>
    b0ae:	2a00      	cmp	r2, #0
    b0b0:	db00      	blt.n	b0b4 <_malloc_r+0x70>
    b0b2:	e088      	b.n	b1c6 <_malloc_r+0x182>
    b0b4:	2303      	movs	r3, #3
    b0b6:	469c      	mov	ip, r3
    b0b8:	e008      	b.n	b0cc <_malloc_r+0x88>
    b0ba:	4662      	mov	r2, ip
    b0bc:	6863      	ldr	r3, [r4, #4]
    b0be:	4393      	bics	r3, r2
    b0c0:	1b5a      	subs	r2, r3, r5
    b0c2:	2a0f      	cmp	r2, #15
    b0c4:	dd00      	ble.n	b0c8 <_malloc_r+0x84>
    b0c6:	e09d      	b.n	b204 <_malloc_r+0x1c0>
    b0c8:	2a00      	cmp	r2, #0
    b0ca:	da7c      	bge.n	b1c6 <_malloc_r+0x182>
    b0cc:	68e4      	ldr	r4, [r4, #12]
    b0ce:	42a1      	cmp	r1, r4
    b0d0:	d1f3      	bne.n	b0ba <_malloc_r+0x76>
    b0d2:	0032      	movs	r2, r6
    b0d4:	6934      	ldr	r4, [r6, #16]
    b0d6:	3208      	adds	r2, #8
    b0d8:	4294      	cmp	r4, r2
    b0da:	d100      	bne.n	b0de <_malloc_r+0x9a>
    b0dc:	e190      	b.n	b400 <_malloc_r+0x3bc>
    b0de:	2303      	movs	r3, #3
    b0e0:	6861      	ldr	r1, [r4, #4]
    b0e2:	4399      	bics	r1, r3
    b0e4:	4689      	mov	r9, r1
    b0e6:	1b49      	subs	r1, r1, r5
    b0e8:	290f      	cmp	r1, #15
    b0ea:	dd00      	ble.n	b0ee <_malloc_r+0xaa>
    b0ec:	e162      	b.n	b3b4 <_malloc_r+0x370>
    b0ee:	6172      	str	r2, [r6, #20]
    b0f0:	6132      	str	r2, [r6, #16]
    b0f2:	2900      	cmp	r1, #0
    b0f4:	db00      	blt.n	b0f8 <_malloc_r+0xb4>
    b0f6:	e087      	b.n	b208 <_malloc_r+0x1c4>
    b0f8:	4ab9      	ldr	r2, [pc, #740]	; (b3e0 <_malloc_r+0x39c>)
    b0fa:	464b      	mov	r3, r9
    b0fc:	4591      	cmp	r9, r2
    b0fe:	d900      	bls.n	b102 <_malloc_r+0xbe>
    b100:	e130      	b.n	b364 <_malloc_r+0x320>
    b102:	08db      	lsrs	r3, r3, #3
    b104:	3aff      	subs	r2, #255	; 0xff
    b106:	1099      	asrs	r1, r3, #2
    b108:	3aff      	subs	r2, #255	; 0xff
    b10a:	408a      	lsls	r2, r1
    b10c:	00db      	lsls	r3, r3, #3
    b10e:	6871      	ldr	r1, [r6, #4]
    b110:	199b      	adds	r3, r3, r6
    b112:	430a      	orrs	r2, r1
    b114:	6899      	ldr	r1, [r3, #8]
    b116:	6072      	str	r2, [r6, #4]
    b118:	60e3      	str	r3, [r4, #12]
    b11a:	60a1      	str	r1, [r4, #8]
    b11c:	609c      	str	r4, [r3, #8]
    b11e:	0013      	movs	r3, r2
    b120:	60cc      	str	r4, [r1, #12]
    b122:	2101      	movs	r1, #1
    b124:	1082      	asrs	r2, r0, #2
    b126:	4091      	lsls	r1, r2
    b128:	4299      	cmp	r1, r3
    b12a:	d86f      	bhi.n	b20c <_malloc_r+0x1c8>
    b12c:	420b      	tst	r3, r1
    b12e:	d105      	bne.n	b13c <_malloc_r+0xf8>
    b130:	2203      	movs	r2, #3
    b132:	4390      	bics	r0, r2
    b134:	0049      	lsls	r1, r1, #1
    b136:	3004      	adds	r0, #4
    b138:	420b      	tst	r3, r1
    b13a:	d0fb      	beq.n	b134 <_malloc_r+0xf0>
    b13c:	2303      	movs	r3, #3
    b13e:	4698      	mov	r8, r3
    b140:	00c3      	lsls	r3, r0, #3
    b142:	4699      	mov	r9, r3
    b144:	44b1      	add	r9, r6
    b146:	46cc      	mov	ip, r9
    b148:	4682      	mov	sl, r0
    b14a:	4663      	mov	r3, ip
    b14c:	68dc      	ldr	r4, [r3, #12]
    b14e:	45a4      	cmp	ip, r4
    b150:	d107      	bne.n	b162 <_malloc_r+0x11e>
    b152:	e157      	b.n	b404 <_malloc_r+0x3c0>
    b154:	2a00      	cmp	r2, #0
    b156:	db00      	blt.n	b15a <_malloc_r+0x116>
    b158:	e166      	b.n	b428 <_malloc_r+0x3e4>
    b15a:	68e4      	ldr	r4, [r4, #12]
    b15c:	45a4      	cmp	ip, r4
    b15e:	d100      	bne.n	b162 <_malloc_r+0x11e>
    b160:	e150      	b.n	b404 <_malloc_r+0x3c0>
    b162:	4642      	mov	r2, r8
    b164:	6863      	ldr	r3, [r4, #4]
    b166:	4393      	bics	r3, r2
    b168:	1b5a      	subs	r2, r3, r5
    b16a:	2a0f      	cmp	r2, #15
    b16c:	ddf2      	ble.n	b154 <_malloc_r+0x110>
    b16e:	2001      	movs	r0, #1
    b170:	4680      	mov	r8, r0
    b172:	1961      	adds	r1, r4, r5
    b174:	4305      	orrs	r5, r0
    b176:	6065      	str	r5, [r4, #4]
    b178:	68a0      	ldr	r0, [r4, #8]
    b17a:	68e5      	ldr	r5, [r4, #12]
    b17c:	3608      	adds	r6, #8
    b17e:	60c5      	str	r5, [r0, #12]
    b180:	60a8      	str	r0, [r5, #8]
    b182:	4640      	mov	r0, r8
    b184:	60f1      	str	r1, [r6, #12]
    b186:	60b1      	str	r1, [r6, #8]
    b188:	4310      	orrs	r0, r2
    b18a:	6048      	str	r0, [r1, #4]
    b18c:	60ce      	str	r6, [r1, #12]
    b18e:	608e      	str	r6, [r1, #8]
    b190:	0038      	movs	r0, r7
    b192:	50e2      	str	r2, [r4, r3]
    b194:	f000 fac4 	bl	b720 <__malloc_unlock>
    b198:	0020      	movs	r0, r4
    b19a:	3008      	adds	r0, #8
    b19c:	e021      	b.n	b1e2 <_malloc_r+0x19e>
    b19e:	2910      	cmp	r1, #16
    b1a0:	d826      	bhi.n	b1f0 <_malloc_r+0x1ac>
    b1a2:	0038      	movs	r0, r7
    b1a4:	f000 fab4 	bl	b710 <__malloc_lock>
    b1a8:	2510      	movs	r5, #16
    b1aa:	2318      	movs	r3, #24
    b1ac:	2002      	movs	r0, #2
    b1ae:	4e8b      	ldr	r6, [pc, #556]	; (b3dc <_malloc_r+0x398>)
    b1b0:	18f3      	adds	r3, r6, r3
    b1b2:	001a      	movs	r2, r3
    b1b4:	685c      	ldr	r4, [r3, #4]
    b1b6:	3a08      	subs	r2, #8
    b1b8:	4294      	cmp	r4, r2
    b1ba:	d100      	bne.n	b1be <_malloc_r+0x17a>
    b1bc:	e12e      	b.n	b41c <_malloc_r+0x3d8>
    b1be:	2303      	movs	r3, #3
    b1c0:	6862      	ldr	r2, [r4, #4]
    b1c2:	439a      	bics	r2, r3
    b1c4:	0013      	movs	r3, r2
    b1c6:	68e2      	ldr	r2, [r4, #12]
    b1c8:	68a1      	ldr	r1, [r4, #8]
    b1ca:	60ca      	str	r2, [r1, #12]
    b1cc:	6091      	str	r1, [r2, #8]
    b1ce:	2201      	movs	r2, #1
    b1d0:	18e3      	adds	r3, r4, r3
    b1d2:	6859      	ldr	r1, [r3, #4]
    b1d4:	0038      	movs	r0, r7
    b1d6:	430a      	orrs	r2, r1
    b1d8:	605a      	str	r2, [r3, #4]
    b1da:	f000 faa1 	bl	b720 <__malloc_unlock>
    b1de:	0020      	movs	r0, r4
    b1e0:	3008      	adds	r0, #8
    b1e2:	b003      	add	sp, #12
    b1e4:	bc3c      	pop	{r2, r3, r4, r5}
    b1e6:	4690      	mov	r8, r2
    b1e8:	4699      	mov	r9, r3
    b1ea:	46a2      	mov	sl, r4
    b1ec:	46ab      	mov	fp, r5
    b1ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b1f0:	230c      	movs	r3, #12
    b1f2:	2000      	movs	r0, #0
    b1f4:	603b      	str	r3, [r7, #0]
    b1f6:	e7f4      	b.n	b1e2 <_malloc_r+0x19e>
    b1f8:	2180      	movs	r1, #128	; 0x80
    b1fa:	233f      	movs	r3, #63	; 0x3f
    b1fc:	2040      	movs	r0, #64	; 0x40
    b1fe:	0089      	lsls	r1, r1, #2
    b200:	4698      	mov	r8, r3
    b202:	e746      	b.n	b092 <_malloc_r+0x4e>
    b204:	4640      	mov	r0, r8
    b206:	e764      	b.n	b0d2 <_malloc_r+0x8e>
    b208:	464b      	mov	r3, r9
    b20a:	e7e0      	b.n	b1ce <_malloc_r+0x18a>
    b20c:	2303      	movs	r3, #3
    b20e:	68b4      	ldr	r4, [r6, #8]
    b210:	6862      	ldr	r2, [r4, #4]
    b212:	439a      	bics	r2, r3
    b214:	4690      	mov	r8, r2
    b216:	42aa      	cmp	r2, r5
    b218:	d303      	bcc.n	b222 <_malloc_r+0x1de>
    b21a:	1b53      	subs	r3, r2, r5
    b21c:	2b0f      	cmp	r3, #15
    b21e:	dd00      	ble.n	b222 <_malloc_r+0x1de>
    b220:	e086      	b.n	b330 <_malloc_r+0x2ec>
    b222:	0023      	movs	r3, r4
    b224:	4443      	add	r3, r8
    b226:	4a6f      	ldr	r2, [pc, #444]	; (b3e4 <_malloc_r+0x3a0>)
    b228:	9301      	str	r3, [sp, #4]
    b22a:	4b6f      	ldr	r3, [pc, #444]	; (b3e8 <_malloc_r+0x3a4>)
    b22c:	4693      	mov	fp, r2
    b22e:	681b      	ldr	r3, [r3, #0]
    b230:	6812      	ldr	r2, [r2, #0]
    b232:	18eb      	adds	r3, r5, r3
    b234:	3201      	adds	r2, #1
    b236:	d100      	bne.n	b23a <_malloc_r+0x1f6>
    b238:	e168      	b.n	b50c <_malloc_r+0x4c8>
    b23a:	4a6c      	ldr	r2, [pc, #432]	; (b3ec <_malloc_r+0x3a8>)
    b23c:	4694      	mov	ip, r2
    b23e:	4463      	add	r3, ip
    b240:	0b1b      	lsrs	r3, r3, #12
    b242:	031b      	lsls	r3, r3, #12
    b244:	9300      	str	r3, [sp, #0]
    b246:	9900      	ldr	r1, [sp, #0]
    b248:	0038      	movs	r0, r7
    b24a:	f000 fadd 	bl	b808 <_sbrk_r>
    b24e:	0003      	movs	r3, r0
    b250:	4681      	mov	r9, r0
    b252:	3301      	adds	r3, #1
    b254:	d061      	beq.n	b31a <_malloc_r+0x2d6>
    b256:	9b01      	ldr	r3, [sp, #4]
    b258:	4283      	cmp	r3, r0
    b25a:	d900      	bls.n	b25e <_malloc_r+0x21a>
    b25c:	e0ff      	b.n	b45e <_malloc_r+0x41a>
    b25e:	4b64      	ldr	r3, [pc, #400]	; (b3f0 <_malloc_r+0x3ac>)
    b260:	9a00      	ldr	r2, [sp, #0]
    b262:	469a      	mov	sl, r3
    b264:	681b      	ldr	r3, [r3, #0]
    b266:	469c      	mov	ip, r3
    b268:	4653      	mov	r3, sl
    b26a:	4462      	add	r2, ip
    b26c:	601a      	str	r2, [r3, #0]
    b26e:	9b01      	ldr	r3, [sp, #4]
    b270:	0011      	movs	r1, r2
    b272:	4283      	cmp	r3, r0
    b274:	d100      	bne.n	b278 <_malloc_r+0x234>
    b276:	e155      	b.n	b524 <_malloc_r+0x4e0>
    b278:	465b      	mov	r3, fp
    b27a:	681b      	ldr	r3, [r3, #0]
    b27c:	3301      	adds	r3, #1
    b27e:	d100      	bne.n	b282 <_malloc_r+0x23e>
    b280:	e16c      	b.n	b55c <_malloc_r+0x518>
    b282:	464b      	mov	r3, r9
    b284:	9a01      	ldr	r2, [sp, #4]
    b286:	1a9b      	subs	r3, r3, r2
    b288:	1859      	adds	r1, r3, r1
    b28a:	4653      	mov	r3, sl
    b28c:	6019      	str	r1, [r3, #0]
    b28e:	2307      	movs	r3, #7
    b290:	464a      	mov	r2, r9
    b292:	4013      	ands	r3, r2
    b294:	d100      	bne.n	b298 <_malloc_r+0x254>
    b296:	e124      	b.n	b4e2 <_malloc_r+0x49e>
    b298:	2108      	movs	r1, #8
    b29a:	4689      	mov	r9, r1
    b29c:	4955      	ldr	r1, [pc, #340]	; (b3f4 <_malloc_r+0x3b0>)
    b29e:	1ad2      	subs	r2, r2, r3
    b2a0:	4491      	add	r9, r2
    b2a2:	1acb      	subs	r3, r1, r3
    b2a4:	9a00      	ldr	r2, [sp, #0]
    b2a6:	0038      	movs	r0, r7
    b2a8:	444a      	add	r2, r9
    b2aa:	0511      	lsls	r1, r2, #20
    b2ac:	0d09      	lsrs	r1, r1, #20
    b2ae:	1a5b      	subs	r3, r3, r1
    b2b0:	0019      	movs	r1, r3
    b2b2:	469b      	mov	fp, r3
    b2b4:	f000 faa8 	bl	b808 <_sbrk_r>
    b2b8:	1c43      	adds	r3, r0, #1
    b2ba:	d100      	bne.n	b2be <_malloc_r+0x27a>
    b2bc:	e142      	b.n	b544 <_malloc_r+0x500>
    b2be:	464b      	mov	r3, r9
    b2c0:	1ac0      	subs	r0, r0, r3
    b2c2:	2301      	movs	r3, #1
    b2c4:	4458      	add	r0, fp
    b2c6:	4318      	orrs	r0, r3
    b2c8:	4653      	mov	r3, sl
    b2ca:	681b      	ldr	r3, [r3, #0]
    b2cc:	445b      	add	r3, fp
    b2ce:	0019      	movs	r1, r3
    b2d0:	4653      	mov	r3, sl
    b2d2:	6019      	str	r1, [r3, #0]
    b2d4:	464b      	mov	r3, r9
    b2d6:	60b3      	str	r3, [r6, #8]
    b2d8:	6058      	str	r0, [r3, #4]
    b2da:	42b4      	cmp	r4, r6
    b2dc:	d013      	beq.n	b306 <_malloc_r+0x2c2>
    b2de:	4643      	mov	r3, r8
    b2e0:	2b0f      	cmp	r3, #15
    b2e2:	d800      	bhi.n	b2e6 <_malloc_r+0x2a2>
    b2e4:	e0e8      	b.n	b4b8 <_malloc_r+0x474>
    b2e6:	4643      	mov	r3, r8
    b2e8:	2207      	movs	r2, #7
    b2ea:	6860      	ldr	r0, [r4, #4]
    b2ec:	3b0c      	subs	r3, #12
    b2ee:	4393      	bics	r3, r2
    b2f0:	3a06      	subs	r2, #6
    b2f2:	4002      	ands	r2, r0
    b2f4:	2005      	movs	r0, #5
    b2f6:	431a      	orrs	r2, r3
    b2f8:	6062      	str	r2, [r4, #4]
    b2fa:	18e2      	adds	r2, r4, r3
    b2fc:	6050      	str	r0, [r2, #4]
    b2fe:	6090      	str	r0, [r2, #8]
    b300:	2b0f      	cmp	r3, #15
    b302:	d900      	bls.n	b306 <_malloc_r+0x2c2>
    b304:	e122      	b.n	b54c <_malloc_r+0x508>
    b306:	4b3c      	ldr	r3, [pc, #240]	; (b3f8 <_malloc_r+0x3b4>)
    b308:	681a      	ldr	r2, [r3, #0]
    b30a:	4291      	cmp	r1, r2
    b30c:	d900      	bls.n	b310 <_malloc_r+0x2cc>
    b30e:	6019      	str	r1, [r3, #0]
    b310:	4b3a      	ldr	r3, [pc, #232]	; (b3fc <_malloc_r+0x3b8>)
    b312:	681a      	ldr	r2, [r3, #0]
    b314:	4291      	cmp	r1, r2
    b316:	d900      	bls.n	b31a <_malloc_r+0x2d6>
    b318:	6019      	str	r1, [r3, #0]
    b31a:	2303      	movs	r3, #3
    b31c:	68b4      	ldr	r4, [r6, #8]
    b31e:	6862      	ldr	r2, [r4, #4]
    b320:	439a      	bics	r2, r3
    b322:	1b53      	subs	r3, r2, r5
    b324:	4295      	cmp	r5, r2
    b326:	d900      	bls.n	b32a <_malloc_r+0x2e6>
    b328:	e0c9      	b.n	b4be <_malloc_r+0x47a>
    b32a:	2b0f      	cmp	r3, #15
    b32c:	dc00      	bgt.n	b330 <_malloc_r+0x2ec>
    b32e:	e0c6      	b.n	b4be <_malloc_r+0x47a>
    b330:	2201      	movs	r2, #1
    b332:	0029      	movs	r1, r5
    b334:	4313      	orrs	r3, r2
    b336:	4311      	orrs	r1, r2
    b338:	1965      	adds	r5, r4, r5
    b33a:	6061      	str	r1, [r4, #4]
    b33c:	0038      	movs	r0, r7
    b33e:	60b5      	str	r5, [r6, #8]
    b340:	606b      	str	r3, [r5, #4]
    b342:	f000 f9ed 	bl	b720 <__malloc_unlock>
    b346:	0020      	movs	r0, r4
    b348:	3008      	adds	r0, #8
    b34a:	e74a      	b.n	b1e2 <_malloc_r+0x19e>
    b34c:	2814      	cmp	r0, #20
    b34e:	d97a      	bls.n	b446 <_malloc_r+0x402>
    b350:	2854      	cmp	r0, #84	; 0x54
    b352:	d900      	bls.n	b356 <_malloc_r+0x312>
    b354:	e0ba      	b.n	b4cc <_malloc_r+0x488>
    b356:	236e      	movs	r3, #110	; 0x6e
    b358:	4698      	mov	r8, r3
    b35a:	0b28      	lsrs	r0, r5, #12
    b35c:	4480      	add	r8, r0
    b35e:	306f      	adds	r0, #111	; 0x6f
    b360:	00c1      	lsls	r1, r0, #3
    b362:	e696      	b.n	b092 <_malloc_r+0x4e>
    b364:	0a5a      	lsrs	r2, r3, #9
    b366:	2a04      	cmp	r2, #4
    b368:	d973      	bls.n	b452 <_malloc_r+0x40e>
    b36a:	2a14      	cmp	r2, #20
    b36c:	d900      	bls.n	b370 <_malloc_r+0x32c>
    b36e:	e0d0      	b.n	b512 <_malloc_r+0x4ce>
    b370:	0011      	movs	r1, r2
    b372:	325c      	adds	r2, #92	; 0x5c
    b374:	315b      	adds	r1, #91	; 0x5b
    b376:	00d2      	lsls	r2, r2, #3
    b378:	2308      	movs	r3, #8
    b37a:	425b      	negs	r3, r3
    b37c:	469c      	mov	ip, r3
    b37e:	18b2      	adds	r2, r6, r2
    b380:	4494      	add	ip, r2
    b382:	4663      	mov	r3, ip
    b384:	689a      	ldr	r2, [r3, #8]
    b386:	2303      	movs	r3, #3
    b388:	4698      	mov	r8, r3
    b38a:	4594      	cmp	ip, r2
    b38c:	d100      	bne.n	b390 <_malloc_r+0x34c>
    b38e:	e0ab      	b.n	b4e8 <_malloc_r+0x4a4>
    b390:	4643      	mov	r3, r8
    b392:	6851      	ldr	r1, [r2, #4]
    b394:	4399      	bics	r1, r3
    b396:	4589      	cmp	r9, r1
    b398:	d300      	bcc.n	b39c <_malloc_r+0x358>
    b39a:	e095      	b.n	b4c8 <_malloc_r+0x484>
    b39c:	6892      	ldr	r2, [r2, #8]
    b39e:	4594      	cmp	ip, r2
    b3a0:	d1f6      	bne.n	b390 <_malloc_r+0x34c>
    b3a2:	4663      	mov	r3, ip
    b3a4:	68da      	ldr	r2, [r3, #12]
    b3a6:	6873      	ldr	r3, [r6, #4]
    b3a8:	4661      	mov	r1, ip
    b3aa:	60e2      	str	r2, [r4, #12]
    b3ac:	60a1      	str	r1, [r4, #8]
    b3ae:	6094      	str	r4, [r2, #8]
    b3b0:	60cc      	str	r4, [r1, #12]
    b3b2:	e6b6      	b.n	b122 <_malloc_r+0xde>
    b3b4:	2301      	movs	r3, #1
    b3b6:	1960      	adds	r0, r4, r5
    b3b8:	431d      	orrs	r5, r3
    b3ba:	6065      	str	r5, [r4, #4]
    b3bc:	6170      	str	r0, [r6, #20]
    b3be:	6130      	str	r0, [r6, #16]
    b3c0:	60c2      	str	r2, [r0, #12]
    b3c2:	6082      	str	r2, [r0, #8]
    b3c4:	001a      	movs	r2, r3
    b3c6:	464b      	mov	r3, r9
    b3c8:	430a      	orrs	r2, r1
    b3ca:	6042      	str	r2, [r0, #4]
    b3cc:	0038      	movs	r0, r7
    b3ce:	50e1      	str	r1, [r4, r3]
    b3d0:	f000 f9a6 	bl	b720 <__malloc_unlock>
    b3d4:	0020      	movs	r0, r4
    b3d6:	3008      	adds	r0, #8
    b3d8:	e703      	b.n	b1e2 <_malloc_r+0x19e>
    b3da:	46c0      	nop			; (mov r8, r8)
    b3dc:	200004b8 	.word	0x200004b8
    b3e0:	000001ff 	.word	0x000001ff
    b3e4:	200008c0 	.word	0x200008c0
    b3e8:	20000de4 	.word	0x20000de4
    b3ec:	0000100f 	.word	0x0000100f
    b3f0:	20000db4 	.word	0x20000db4
    b3f4:	00001008 	.word	0x00001008
    b3f8:	20000ddc 	.word	0x20000ddc
    b3fc:	20000de0 	.word	0x20000de0
    b400:	6873      	ldr	r3, [r6, #4]
    b402:	e68e      	b.n	b122 <_malloc_r+0xde>
    b404:	2308      	movs	r3, #8
    b406:	469b      	mov	fp, r3
    b408:	3b07      	subs	r3, #7
    b40a:	44dc      	add	ip, fp
    b40c:	469b      	mov	fp, r3
    b40e:	44da      	add	sl, fp
    b410:	4643      	mov	r3, r8
    b412:	4652      	mov	r2, sl
    b414:	4213      	tst	r3, r2
    b416:	d000      	beq.n	b41a <_malloc_r+0x3d6>
    b418:	e697      	b.n	b14a <_malloc_r+0x106>
    b41a:	e037      	b.n	b48c <_malloc_r+0x448>
    b41c:	68dc      	ldr	r4, [r3, #12]
    b41e:	3002      	adds	r0, #2
    b420:	42a3      	cmp	r3, r4
    b422:	d100      	bne.n	b426 <_malloc_r+0x3e2>
    b424:	e655      	b.n	b0d2 <_malloc_r+0x8e>
    b426:	e6ca      	b.n	b1be <_malloc_r+0x17a>
    b428:	2201      	movs	r2, #1
    b42a:	18e3      	adds	r3, r4, r3
    b42c:	6859      	ldr	r1, [r3, #4]
    b42e:	0038      	movs	r0, r7
    b430:	430a      	orrs	r2, r1
    b432:	605a      	str	r2, [r3, #4]
    b434:	68e3      	ldr	r3, [r4, #12]
    b436:	68a2      	ldr	r2, [r4, #8]
    b438:	60d3      	str	r3, [r2, #12]
    b43a:	609a      	str	r2, [r3, #8]
    b43c:	f000 f970 	bl	b720 <__malloc_unlock>
    b440:	0020      	movs	r0, r4
    b442:	3008      	adds	r0, #8
    b444:	e6cd      	b.n	b1e2 <_malloc_r+0x19e>
    b446:	235b      	movs	r3, #91	; 0x5b
    b448:	4698      	mov	r8, r3
    b44a:	4480      	add	r8, r0
    b44c:	305c      	adds	r0, #92	; 0x5c
    b44e:	00c1      	lsls	r1, r0, #3
    b450:	e61f      	b.n	b092 <_malloc_r+0x4e>
    b452:	099a      	lsrs	r2, r3, #6
    b454:	0011      	movs	r1, r2
    b456:	3239      	adds	r2, #57	; 0x39
    b458:	3138      	adds	r1, #56	; 0x38
    b45a:	00d2      	lsls	r2, r2, #3
    b45c:	e78c      	b.n	b378 <_malloc_r+0x334>
    b45e:	42b4      	cmp	r4, r6
    b460:	d000      	beq.n	b464 <_malloc_r+0x420>
    b462:	e75a      	b.n	b31a <_malloc_r+0x2d6>
    b464:	4b4f      	ldr	r3, [pc, #316]	; (b5a4 <_malloc_r+0x560>)
    b466:	9a00      	ldr	r2, [sp, #0]
    b468:	469a      	mov	sl, r3
    b46a:	681b      	ldr	r3, [r3, #0]
    b46c:	469c      	mov	ip, r3
    b46e:	4653      	mov	r3, sl
    b470:	4462      	add	r2, ip
    b472:	0011      	movs	r1, r2
    b474:	601a      	str	r2, [r3, #0]
    b476:	e6ff      	b.n	b278 <_malloc_r+0x234>
    b478:	2308      	movs	r3, #8
    b47a:	425b      	negs	r3, r3
    b47c:	469c      	mov	ip, r3
    b47e:	44e1      	add	r9, ip
    b480:	464b      	mov	r3, r9
    b482:	689b      	ldr	r3, [r3, #8]
    b484:	3801      	subs	r0, #1
    b486:	4599      	cmp	r9, r3
    b488:	d000      	beq.n	b48c <_malloc_r+0x448>
    b48a:	e084      	b.n	b596 <_malloc_r+0x552>
    b48c:	4643      	mov	r3, r8
    b48e:	4203      	tst	r3, r0
    b490:	d1f2      	bne.n	b478 <_malloc_r+0x434>
    b492:	6873      	ldr	r3, [r6, #4]
    b494:	438b      	bics	r3, r1
    b496:	6073      	str	r3, [r6, #4]
    b498:	0049      	lsls	r1, r1, #1
    b49a:	4299      	cmp	r1, r3
    b49c:	d900      	bls.n	b4a0 <_malloc_r+0x45c>
    b49e:	e6b5      	b.n	b20c <_malloc_r+0x1c8>
    b4a0:	2900      	cmp	r1, #0
    b4a2:	d100      	bne.n	b4a6 <_malloc_r+0x462>
    b4a4:	e6b2      	b.n	b20c <_malloc_r+0x1c8>
    b4a6:	4650      	mov	r0, sl
    b4a8:	420b      	tst	r3, r1
    b4aa:	d000      	beq.n	b4ae <_malloc_r+0x46a>
    b4ac:	e648      	b.n	b140 <_malloc_r+0xfc>
    b4ae:	0049      	lsls	r1, r1, #1
    b4b0:	3004      	adds	r0, #4
    b4b2:	420b      	tst	r3, r1
    b4b4:	d0fb      	beq.n	b4ae <_malloc_r+0x46a>
    b4b6:	e643      	b.n	b140 <_malloc_r+0xfc>
    b4b8:	2301      	movs	r3, #1
    b4ba:	464a      	mov	r2, r9
    b4bc:	6053      	str	r3, [r2, #4]
    b4be:	0038      	movs	r0, r7
    b4c0:	f000 f92e 	bl	b720 <__malloc_unlock>
    b4c4:	2000      	movs	r0, #0
    b4c6:	e68c      	b.n	b1e2 <_malloc_r+0x19e>
    b4c8:	4694      	mov	ip, r2
    b4ca:	e76a      	b.n	b3a2 <_malloc_r+0x35e>
    b4cc:	23aa      	movs	r3, #170	; 0xaa
    b4ce:	005b      	lsls	r3, r3, #1
    b4d0:	4298      	cmp	r0, r3
    b4d2:	d811      	bhi.n	b4f8 <_malloc_r+0x4b4>
    b4d4:	3bdd      	subs	r3, #221	; 0xdd
    b4d6:	4698      	mov	r8, r3
    b4d8:	0be8      	lsrs	r0, r5, #15
    b4da:	4480      	add	r8, r0
    b4dc:	3078      	adds	r0, #120	; 0x78
    b4de:	00c1      	lsls	r1, r0, #3
    b4e0:	e5d7      	b.n	b092 <_malloc_r+0x4e>
    b4e2:	2380      	movs	r3, #128	; 0x80
    b4e4:	015b      	lsls	r3, r3, #5
    b4e6:	e6dd      	b.n	b2a4 <_malloc_r+0x260>
    b4e8:	1089      	asrs	r1, r1, #2
    b4ea:	3b02      	subs	r3, #2
    b4ec:	408b      	lsls	r3, r1
    b4ee:	6872      	ldr	r2, [r6, #4]
    b4f0:	4313      	orrs	r3, r2
    b4f2:	6073      	str	r3, [r6, #4]
    b4f4:	4662      	mov	r2, ip
    b4f6:	e757      	b.n	b3a8 <_malloc_r+0x364>
    b4f8:	4b2b      	ldr	r3, [pc, #172]	; (b5a8 <_malloc_r+0x564>)
    b4fa:	4298      	cmp	r0, r3
    b4fc:	d81c      	bhi.n	b538 <_malloc_r+0x4f4>
    b4fe:	237c      	movs	r3, #124	; 0x7c
    b500:	4698      	mov	r8, r3
    b502:	0ca8      	lsrs	r0, r5, #18
    b504:	4480      	add	r8, r0
    b506:	307d      	adds	r0, #125	; 0x7d
    b508:	00c1      	lsls	r1, r0, #3
    b50a:	e5c2      	b.n	b092 <_malloc_r+0x4e>
    b50c:	3310      	adds	r3, #16
    b50e:	9300      	str	r3, [sp, #0]
    b510:	e699      	b.n	b246 <_malloc_r+0x202>
    b512:	2a54      	cmp	r2, #84	; 0x54
    b514:	d826      	bhi.n	b564 <_malloc_r+0x520>
    b516:	464b      	mov	r3, r9
    b518:	0b1a      	lsrs	r2, r3, #12
    b51a:	0011      	movs	r1, r2
    b51c:	326f      	adds	r2, #111	; 0x6f
    b51e:	316e      	adds	r1, #110	; 0x6e
    b520:	00d2      	lsls	r2, r2, #3
    b522:	e729      	b.n	b378 <_malloc_r+0x334>
    b524:	051b      	lsls	r3, r3, #20
    b526:	d000      	beq.n	b52a <_malloc_r+0x4e6>
    b528:	e6a6      	b.n	b278 <_malloc_r+0x234>
    b52a:	2001      	movs	r0, #1
    b52c:	9b00      	ldr	r3, [sp, #0]
    b52e:	68b2      	ldr	r2, [r6, #8]
    b530:	4443      	add	r3, r8
    b532:	4303      	orrs	r3, r0
    b534:	6053      	str	r3, [r2, #4]
    b536:	e6e6      	b.n	b306 <_malloc_r+0x2c2>
    b538:	21fe      	movs	r1, #254	; 0xfe
    b53a:	237e      	movs	r3, #126	; 0x7e
    b53c:	207f      	movs	r0, #127	; 0x7f
    b53e:	0089      	lsls	r1, r1, #2
    b540:	4698      	mov	r8, r3
    b542:	e5a6      	b.n	b092 <_malloc_r+0x4e>
    b544:	2300      	movs	r3, #0
    b546:	2001      	movs	r0, #1
    b548:	469b      	mov	fp, r3
    b54a:	e6bd      	b.n	b2c8 <_malloc_r+0x284>
    b54c:	0021      	movs	r1, r4
    b54e:	0038      	movs	r0, r7
    b550:	3108      	adds	r1, #8
    b552:	f005 ff1d 	bl	11390 <_free_r>
    b556:	4653      	mov	r3, sl
    b558:	6819      	ldr	r1, [r3, #0]
    b55a:	e6d4      	b.n	b306 <_malloc_r+0x2c2>
    b55c:	465b      	mov	r3, fp
    b55e:	464a      	mov	r2, r9
    b560:	601a      	str	r2, [r3, #0]
    b562:	e694      	b.n	b28e <_malloc_r+0x24a>
    b564:	21aa      	movs	r1, #170	; 0xaa
    b566:	0049      	lsls	r1, r1, #1
    b568:	428a      	cmp	r2, r1
    b56a:	d806      	bhi.n	b57a <_malloc_r+0x536>
    b56c:	464b      	mov	r3, r9
    b56e:	0bda      	lsrs	r2, r3, #15
    b570:	0011      	movs	r1, r2
    b572:	3278      	adds	r2, #120	; 0x78
    b574:	3177      	adds	r1, #119	; 0x77
    b576:	00d2      	lsls	r2, r2, #3
    b578:	e6fe      	b.n	b378 <_malloc_r+0x334>
    b57a:	490b      	ldr	r1, [pc, #44]	; (b5a8 <_malloc_r+0x564>)
    b57c:	428a      	cmp	r2, r1
    b57e:	d806      	bhi.n	b58e <_malloc_r+0x54a>
    b580:	464b      	mov	r3, r9
    b582:	0c9a      	lsrs	r2, r3, #18
    b584:	0011      	movs	r1, r2
    b586:	327d      	adds	r2, #125	; 0x7d
    b588:	317c      	adds	r1, #124	; 0x7c
    b58a:	00d2      	lsls	r2, r2, #3
    b58c:	e6f4      	b.n	b378 <_malloc_r+0x334>
    b58e:	22fe      	movs	r2, #254	; 0xfe
    b590:	217e      	movs	r1, #126	; 0x7e
    b592:	0092      	lsls	r2, r2, #2
    b594:	e6f0      	b.n	b378 <_malloc_r+0x334>
    b596:	6873      	ldr	r3, [r6, #4]
    b598:	e77e      	b.n	b498 <_malloc_r+0x454>
    b59a:	002b      	movs	r3, r5
    b59c:	08e8      	lsrs	r0, r5, #3
    b59e:	3308      	adds	r3, #8
    b5a0:	e605      	b.n	b1ae <_malloc_r+0x16a>
    b5a2:	46c0      	nop			; (mov r8, r8)
    b5a4:	20000db4 	.word	0x20000db4
    b5a8:	00000554 	.word	0x00000554

0000b5ac <memcmp>:
    b5ac:	b510      	push	{r4, lr}
    b5ae:	2a03      	cmp	r2, #3
    b5b0:	d91c      	bls.n	b5ec <memcmp+0x40>
    b5b2:	0003      	movs	r3, r0
    b5b4:	430b      	orrs	r3, r1
    b5b6:	079b      	lsls	r3, r3, #30
    b5b8:	d00f      	beq.n	b5da <memcmp+0x2e>
    b5ba:	7803      	ldrb	r3, [r0, #0]
    b5bc:	780c      	ldrb	r4, [r1, #0]
    b5be:	1882      	adds	r2, r0, r2
    b5c0:	42a3      	cmp	r3, r4
    b5c2:	d004      	beq.n	b5ce <memcmp+0x22>
    b5c4:	e015      	b.n	b5f2 <memcmp+0x46>
    b5c6:	7803      	ldrb	r3, [r0, #0]
    b5c8:	780c      	ldrb	r4, [r1, #0]
    b5ca:	42a3      	cmp	r3, r4
    b5cc:	d111      	bne.n	b5f2 <memcmp+0x46>
    b5ce:	3001      	adds	r0, #1
    b5d0:	3101      	adds	r1, #1
    b5d2:	4282      	cmp	r2, r0
    b5d4:	d1f7      	bne.n	b5c6 <memcmp+0x1a>
    b5d6:	2000      	movs	r0, #0
    b5d8:	bd10      	pop	{r4, pc}
    b5da:	6803      	ldr	r3, [r0, #0]
    b5dc:	680c      	ldr	r4, [r1, #0]
    b5de:	42a3      	cmp	r3, r4
    b5e0:	d1eb      	bne.n	b5ba <memcmp+0xe>
    b5e2:	3a04      	subs	r2, #4
    b5e4:	3004      	adds	r0, #4
    b5e6:	3104      	adds	r1, #4
    b5e8:	2a03      	cmp	r2, #3
    b5ea:	d8f6      	bhi.n	b5da <memcmp+0x2e>
    b5ec:	2a00      	cmp	r2, #0
    b5ee:	d1e4      	bne.n	b5ba <memcmp+0xe>
    b5f0:	e7f1      	b.n	b5d6 <memcmp+0x2a>
    b5f2:	1b18      	subs	r0, r3, r4
    b5f4:	e7f0      	b.n	b5d8 <memcmp+0x2c>
    b5f6:	46c0      	nop			; (mov r8, r8)

0000b5f8 <memcpy>:
    b5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5fa:	0005      	movs	r5, r0
    b5fc:	2a0f      	cmp	r2, #15
    b5fe:	d92f      	bls.n	b660 <memcpy+0x68>
    b600:	000b      	movs	r3, r1
    b602:	4303      	orrs	r3, r0
    b604:	079b      	lsls	r3, r3, #30
    b606:	d134      	bne.n	b672 <memcpy+0x7a>
    b608:	0016      	movs	r6, r2
    b60a:	000c      	movs	r4, r1
    b60c:	0003      	movs	r3, r0
    b60e:	3e10      	subs	r6, #16
    b610:	0935      	lsrs	r5, r6, #4
    b612:	3501      	adds	r5, #1
    b614:	012d      	lsls	r5, r5, #4
    b616:	1945      	adds	r5, r0, r5
    b618:	6827      	ldr	r7, [r4, #0]
    b61a:	601f      	str	r7, [r3, #0]
    b61c:	6867      	ldr	r7, [r4, #4]
    b61e:	605f      	str	r7, [r3, #4]
    b620:	68a7      	ldr	r7, [r4, #8]
    b622:	609f      	str	r7, [r3, #8]
    b624:	68e7      	ldr	r7, [r4, #12]
    b626:	3410      	adds	r4, #16
    b628:	60df      	str	r7, [r3, #12]
    b62a:	3310      	adds	r3, #16
    b62c:	429d      	cmp	r5, r3
    b62e:	d1f3      	bne.n	b618 <memcpy+0x20>
    b630:	230f      	movs	r3, #15
    b632:	439e      	bics	r6, r3
    b634:	3610      	adds	r6, #16
    b636:	1985      	adds	r5, r0, r6
    b638:	1989      	adds	r1, r1, r6
    b63a:	4013      	ands	r3, r2
    b63c:	2b03      	cmp	r3, #3
    b63e:	d91a      	bls.n	b676 <memcpy+0x7e>
    b640:	1f1e      	subs	r6, r3, #4
    b642:	2300      	movs	r3, #0
    b644:	08b4      	lsrs	r4, r6, #2
    b646:	3401      	adds	r4, #1
    b648:	00a4      	lsls	r4, r4, #2
    b64a:	58cf      	ldr	r7, [r1, r3]
    b64c:	50ef      	str	r7, [r5, r3]
    b64e:	3304      	adds	r3, #4
    b650:	42a3      	cmp	r3, r4
    b652:	d1fa      	bne.n	b64a <memcpy+0x52>
    b654:	2403      	movs	r4, #3
    b656:	43a6      	bics	r6, r4
    b658:	1d33      	adds	r3, r6, #4
    b65a:	4022      	ands	r2, r4
    b65c:	18c9      	adds	r1, r1, r3
    b65e:	18ed      	adds	r5, r5, r3
    b660:	2a00      	cmp	r2, #0
    b662:	d005      	beq.n	b670 <memcpy+0x78>
    b664:	2300      	movs	r3, #0
    b666:	5ccc      	ldrb	r4, [r1, r3]
    b668:	54ec      	strb	r4, [r5, r3]
    b66a:	3301      	adds	r3, #1
    b66c:	4293      	cmp	r3, r2
    b66e:	d1fa      	bne.n	b666 <memcpy+0x6e>
    b670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b672:	0005      	movs	r5, r0
    b674:	e7f6      	b.n	b664 <memcpy+0x6c>
    b676:	001a      	movs	r2, r3
    b678:	e7f2      	b.n	b660 <memcpy+0x68>
    b67a:	46c0      	nop			; (mov r8, r8)

0000b67c <memset>:
    b67c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b67e:	0783      	lsls	r3, r0, #30
    b680:	d043      	beq.n	b70a <memset+0x8e>
    b682:	1e54      	subs	r4, r2, #1
    b684:	2a00      	cmp	r2, #0
    b686:	d03f      	beq.n	b708 <memset+0x8c>
    b688:	b2ce      	uxtb	r6, r1
    b68a:	0002      	movs	r2, r0
    b68c:	2503      	movs	r5, #3
    b68e:	e002      	b.n	b696 <memset+0x1a>
    b690:	001a      	movs	r2, r3
    b692:	3c01      	subs	r4, #1
    b694:	d338      	bcc.n	b708 <memset+0x8c>
    b696:	1c53      	adds	r3, r2, #1
    b698:	7016      	strb	r6, [r2, #0]
    b69a:	422b      	tst	r3, r5
    b69c:	d1f8      	bne.n	b690 <memset+0x14>
    b69e:	2c03      	cmp	r4, #3
    b6a0:	d92a      	bls.n	b6f8 <memset+0x7c>
    b6a2:	22ff      	movs	r2, #255	; 0xff
    b6a4:	400a      	ands	r2, r1
    b6a6:	0215      	lsls	r5, r2, #8
    b6a8:	4315      	orrs	r5, r2
    b6aa:	042a      	lsls	r2, r5, #16
    b6ac:	4315      	orrs	r5, r2
    b6ae:	2c0f      	cmp	r4, #15
    b6b0:	d914      	bls.n	b6dc <memset+0x60>
    b6b2:	0027      	movs	r7, r4
    b6b4:	001a      	movs	r2, r3
    b6b6:	3f10      	subs	r7, #16
    b6b8:	093e      	lsrs	r6, r7, #4
    b6ba:	3601      	adds	r6, #1
    b6bc:	0136      	lsls	r6, r6, #4
    b6be:	199e      	adds	r6, r3, r6
    b6c0:	6015      	str	r5, [r2, #0]
    b6c2:	6055      	str	r5, [r2, #4]
    b6c4:	6095      	str	r5, [r2, #8]
    b6c6:	60d5      	str	r5, [r2, #12]
    b6c8:	3210      	adds	r2, #16
    b6ca:	4296      	cmp	r6, r2
    b6cc:	d1f8      	bne.n	b6c0 <memset+0x44>
    b6ce:	220f      	movs	r2, #15
    b6d0:	4397      	bics	r7, r2
    b6d2:	3710      	adds	r7, #16
    b6d4:	19db      	adds	r3, r3, r7
    b6d6:	4014      	ands	r4, r2
    b6d8:	2c03      	cmp	r4, #3
    b6da:	d90d      	bls.n	b6f8 <memset+0x7c>
    b6dc:	001a      	movs	r2, r3
    b6de:	1f27      	subs	r7, r4, #4
    b6e0:	08be      	lsrs	r6, r7, #2
    b6e2:	3601      	adds	r6, #1
    b6e4:	00b6      	lsls	r6, r6, #2
    b6e6:	199e      	adds	r6, r3, r6
    b6e8:	c220      	stmia	r2!, {r5}
    b6ea:	42b2      	cmp	r2, r6
    b6ec:	d1fc      	bne.n	b6e8 <memset+0x6c>
    b6ee:	2203      	movs	r2, #3
    b6f0:	4397      	bics	r7, r2
    b6f2:	3704      	adds	r7, #4
    b6f4:	19db      	adds	r3, r3, r7
    b6f6:	4014      	ands	r4, r2
    b6f8:	2c00      	cmp	r4, #0
    b6fa:	d005      	beq.n	b708 <memset+0x8c>
    b6fc:	b2c9      	uxtb	r1, r1
    b6fe:	191c      	adds	r4, r3, r4
    b700:	7019      	strb	r1, [r3, #0]
    b702:	3301      	adds	r3, #1
    b704:	429c      	cmp	r4, r3
    b706:	d1fb      	bne.n	b700 <memset+0x84>
    b708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b70a:	0014      	movs	r4, r2
    b70c:	0003      	movs	r3, r0
    b70e:	e7c6      	b.n	b69e <memset+0x22>

0000b710 <__malloc_lock>:
    b710:	b510      	push	{r4, lr}
    b712:	4802      	ldr	r0, [pc, #8]	; (b71c <__malloc_lock+0xc>)
    b714:	f006 f904 	bl	11920 <__retarget_lock_acquire_recursive>
    b718:	bd10      	pop	{r4, pc}
    b71a:	46c0      	nop			; (mov r8, r8)
    b71c:	200018e8 	.word	0x200018e8

0000b720 <__malloc_unlock>:
    b720:	b510      	push	{r4, lr}
    b722:	4802      	ldr	r0, [pc, #8]	; (b72c <__malloc_unlock+0xc>)
    b724:	f006 f8fe 	bl	11924 <__retarget_lock_release_recursive>
    b728:	bd10      	pop	{r4, pc}
    b72a:	46c0      	nop			; (mov r8, r8)
    b72c:	200018e8 	.word	0x200018e8

0000b730 <printf>:
    b730:	b40f      	push	{r0, r1, r2, r3}
    b732:	b500      	push	{lr}
    b734:	4906      	ldr	r1, [pc, #24]	; (b750 <printf+0x20>)
    b736:	b083      	sub	sp, #12
    b738:	ab04      	add	r3, sp, #16
    b73a:	6808      	ldr	r0, [r1, #0]
    b73c:	cb04      	ldmia	r3!, {r2}
    b73e:	6881      	ldr	r1, [r0, #8]
    b740:	9301      	str	r3, [sp, #4]
    b742:	f002 ff59 	bl	e5f8 <_vfprintf_r>
    b746:	b003      	add	sp, #12
    b748:	bc08      	pop	{r3}
    b74a:	b004      	add	sp, #16
    b74c:	4718      	bx	r3
    b74e:	46c0      	nop			; (mov r8, r8)
    b750:	20000088 	.word	0x20000088

0000b754 <_puts_r>:
    b754:	b530      	push	{r4, r5, lr}
    b756:	0004      	movs	r4, r0
    b758:	b089      	sub	sp, #36	; 0x24
    b75a:	0008      	movs	r0, r1
    b75c:	000d      	movs	r5, r1
    b75e:	f000 fa1d 	bl	bb9c <strlen>
    b762:	ab04      	add	r3, sp, #16
    b764:	4a21      	ldr	r2, [pc, #132]	; (b7ec <_puts_r+0x98>)
    b766:	9301      	str	r3, [sp, #4]
    b768:	2302      	movs	r3, #2
    b76a:	9206      	str	r2, [sp, #24]
    b76c:	2201      	movs	r2, #1
    b76e:	9302      	str	r3, [sp, #8]
    b770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b772:	9005      	str	r0, [sp, #20]
    b774:	3001      	adds	r0, #1
    b776:	9504      	str	r5, [sp, #16]
    b778:	9207      	str	r2, [sp, #28]
    b77a:	9003      	str	r0, [sp, #12]
    b77c:	68a5      	ldr	r5, [r4, #8]
    b77e:	2b00      	cmp	r3, #0
    b780:	d02f      	beq.n	b7e2 <_puts_r+0x8e>
    b782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    b784:	07db      	lsls	r3, r3, #31
    b786:	d424      	bmi.n	b7d2 <_puts_r+0x7e>
    b788:	230c      	movs	r3, #12
    b78a:	5eea      	ldrsh	r2, [r5, r3]
    b78c:	b291      	uxth	r1, r2
    b78e:	058b      	lsls	r3, r1, #22
    b790:	d51c      	bpl.n	b7cc <_puts_r+0x78>
    b792:	2380      	movs	r3, #128	; 0x80
    b794:	019b      	lsls	r3, r3, #6
    b796:	4219      	tst	r1, r3
    b798:	d105      	bne.n	b7a6 <_puts_r+0x52>
    b79a:	4313      	orrs	r3, r2
    b79c:	81ab      	strh	r3, [r5, #12]
    b79e:	6e6a      	ldr	r2, [r5, #100]	; 0x64
    b7a0:	4b13      	ldr	r3, [pc, #76]	; (b7f0 <_puts_r+0x9c>)
    b7a2:	4013      	ands	r3, r2
    b7a4:	666b      	str	r3, [r5, #100]	; 0x64
    b7a6:	0020      	movs	r0, r4
    b7a8:	aa01      	add	r2, sp, #4
    b7aa:	0029      	movs	r1, r5
    b7ac:	f005 fece 	bl	1154c <__sfvwrite_r>
    b7b0:	1e44      	subs	r4, r0, #1
    b7b2:	41a0      	sbcs	r0, r4
    b7b4:	4244      	negs	r4, r0
    b7b6:	200a      	movs	r0, #10
    b7b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    b7ba:	4304      	orrs	r4, r0
    b7bc:	07db      	lsls	r3, r3, #31
    b7be:	d402      	bmi.n	b7c6 <_puts_r+0x72>
    b7c0:	89ab      	ldrh	r3, [r5, #12]
    b7c2:	059b      	lsls	r3, r3, #22
    b7c4:	d509      	bpl.n	b7da <_puts_r+0x86>
    b7c6:	0020      	movs	r0, r4
    b7c8:	b009      	add	sp, #36	; 0x24
    b7ca:	bd30      	pop	{r4, r5, pc}
    b7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
    b7ce:	f006 f8a7 	bl	11920 <__retarget_lock_acquire_recursive>
    b7d2:	230c      	movs	r3, #12
    b7d4:	5eea      	ldrsh	r2, [r5, r3]
    b7d6:	b291      	uxth	r1, r2
    b7d8:	e7db      	b.n	b792 <_puts_r+0x3e>
    b7da:	6da8      	ldr	r0, [r5, #88]	; 0x58
    b7dc:	f006 f8a2 	bl	11924 <__retarget_lock_release_recursive>
    b7e0:	e7f1      	b.n	b7c6 <_puts_r+0x72>
    b7e2:	0020      	movs	r0, r4
    b7e4:	f005 fd2a 	bl	1123c <__sinit>
    b7e8:	e7cb      	b.n	b782 <_puts_r+0x2e>
    b7ea:	46c0      	nop			; (mov r8, r8)
    b7ec:	000189f8 	.word	0x000189f8
    b7f0:	ffffdfff 	.word	0xffffdfff

0000b7f4 <puts>:
    b7f4:	b510      	push	{r4, lr}
    b7f6:	4b03      	ldr	r3, [pc, #12]	; (b804 <puts+0x10>)
    b7f8:	0001      	movs	r1, r0
    b7fa:	6818      	ldr	r0, [r3, #0]
    b7fc:	f7ff ffaa 	bl	b754 <_puts_r>
    b800:	bd10      	pop	{r4, pc}
    b802:	46c0      	nop			; (mov r8, r8)
    b804:	20000088 	.word	0x20000088

0000b808 <_sbrk_r>:
    b808:	2300      	movs	r3, #0
    b80a:	b570      	push	{r4, r5, r6, lr}
    b80c:	4c06      	ldr	r4, [pc, #24]	; (b828 <_sbrk_r+0x20>)
    b80e:	0005      	movs	r5, r0
    b810:	0008      	movs	r0, r1
    b812:	6023      	str	r3, [r4, #0]
    b814:	f7f5 f9b4 	bl	b80 <_sbrk>
    b818:	1c43      	adds	r3, r0, #1
    b81a:	d000      	beq.n	b81e <_sbrk_r+0x16>
    b81c:	bd70      	pop	{r4, r5, r6, pc}
    b81e:	6823      	ldr	r3, [r4, #0]
    b820:	2b00      	cmp	r3, #0
    b822:	d0fb      	beq.n	b81c <_sbrk_r+0x14>
    b824:	602b      	str	r3, [r5, #0]
    b826:	e7f9      	b.n	b81c <_sbrk_r+0x14>
    b828:	200018fc 	.word	0x200018fc

0000b82c <snprintf>:
    b82c:	b40c      	push	{r2, r3}
    b82e:	b530      	push	{r4, r5, lr}
    b830:	4b1e      	ldr	r3, [pc, #120]	; (b8ac <snprintf+0x80>)
    b832:	b09d      	sub	sp, #116	; 0x74
    b834:	681d      	ldr	r5, [r3, #0]
    b836:	2900      	cmp	r1, #0
    b838:	db33      	blt.n	b8a2 <snprintf+0x76>
    b83a:	2382      	movs	r3, #130	; 0x82
    b83c:	ac02      	add	r4, sp, #8
    b83e:	009b      	lsls	r3, r3, #2
    b840:	81a3      	strh	r3, [r4, #12]
    b842:	9002      	str	r0, [sp, #8]
    b844:	6120      	str	r0, [r4, #16]
    b846:	2900      	cmp	r1, #0
    b848:	d012      	beq.n	b870 <snprintf+0x44>
    b84a:	2301      	movs	r3, #1
    b84c:	3901      	subs	r1, #1
    b84e:	425b      	negs	r3, r3
    b850:	60a1      	str	r1, [r4, #8]
    b852:	6161      	str	r1, [r4, #20]
    b854:	81e3      	strh	r3, [r4, #14]
    b856:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b858:	ab21      	add	r3, sp, #132	; 0x84
    b85a:	0021      	movs	r1, r4
    b85c:	0028      	movs	r0, r5
    b85e:	9301      	str	r3, [sp, #4]
    b860:	f000 fcde 	bl	c220 <_svfprintf_r>
    b864:	1c43      	adds	r3, r0, #1
    b866:	db16      	blt.n	b896 <snprintf+0x6a>
    b868:	2300      	movs	r3, #0
    b86a:	9a02      	ldr	r2, [sp, #8]
    b86c:	7013      	strb	r3, [r2, #0]
    b86e:	e00d      	b.n	b88c <snprintf+0x60>
    b870:	2301      	movs	r3, #1
    b872:	425b      	negs	r3, r3
    b874:	60a1      	str	r1, [r4, #8]
    b876:	6161      	str	r1, [r4, #20]
    b878:	81e3      	strh	r3, [r4, #14]
    b87a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    b87c:	ab21      	add	r3, sp, #132	; 0x84
    b87e:	0021      	movs	r1, r4
    b880:	0028      	movs	r0, r5
    b882:	9301      	str	r3, [sp, #4]
    b884:	f000 fccc 	bl	c220 <_svfprintf_r>
    b888:	1c43      	adds	r3, r0, #1
    b88a:	db07      	blt.n	b89c <snprintf+0x70>
    b88c:	b01d      	add	sp, #116	; 0x74
    b88e:	bc30      	pop	{r4, r5}
    b890:	bc08      	pop	{r3}
    b892:	b002      	add	sp, #8
    b894:	4718      	bx	r3
    b896:	238b      	movs	r3, #139	; 0x8b
    b898:	602b      	str	r3, [r5, #0]
    b89a:	e7e5      	b.n	b868 <snprintf+0x3c>
    b89c:	238b      	movs	r3, #139	; 0x8b
    b89e:	602b      	str	r3, [r5, #0]
    b8a0:	e7f4      	b.n	b88c <snprintf+0x60>
    b8a2:	238b      	movs	r3, #139	; 0x8b
    b8a4:	2001      	movs	r0, #1
    b8a6:	602b      	str	r3, [r5, #0]
    b8a8:	4240      	negs	r0, r0
    b8aa:	e7ef      	b.n	b88c <snprintf+0x60>
    b8ac:	20000088 	.word	0x20000088

0000b8b0 <sprintf>:
    b8b0:	b40e      	push	{r1, r2, r3}
    b8b2:	b510      	push	{r4, lr}
    b8b4:	b09d      	sub	sp, #116	; 0x74
    b8b6:	a902      	add	r1, sp, #8
    b8b8:	9002      	str	r0, [sp, #8]
    b8ba:	6108      	str	r0, [r1, #16]
    b8bc:	480b      	ldr	r0, [pc, #44]	; (b8ec <sprintf+0x3c>)
    b8be:	2482      	movs	r4, #130	; 0x82
    b8c0:	6088      	str	r0, [r1, #8]
    b8c2:	6148      	str	r0, [r1, #20]
    b8c4:	2001      	movs	r0, #1
    b8c6:	4240      	negs	r0, r0
    b8c8:	ab1f      	add	r3, sp, #124	; 0x7c
    b8ca:	81c8      	strh	r0, [r1, #14]
    b8cc:	4808      	ldr	r0, [pc, #32]	; (b8f0 <sprintf+0x40>)
    b8ce:	cb04      	ldmia	r3!, {r2}
    b8d0:	00a4      	lsls	r4, r4, #2
    b8d2:	6800      	ldr	r0, [r0, #0]
    b8d4:	9301      	str	r3, [sp, #4]
    b8d6:	818c      	strh	r4, [r1, #12]
    b8d8:	f000 fca2 	bl	c220 <_svfprintf_r>
    b8dc:	2300      	movs	r3, #0
    b8de:	9a02      	ldr	r2, [sp, #8]
    b8e0:	7013      	strb	r3, [r2, #0]
    b8e2:	b01d      	add	sp, #116	; 0x74
    b8e4:	bc10      	pop	{r4}
    b8e6:	bc08      	pop	{r3}
    b8e8:	b003      	add	sp, #12
    b8ea:	4718      	bx	r3
    b8ec:	7fffffff 	.word	0x7fffffff
    b8f0:	20000088 	.word	0x20000088

0000b8f4 <sscanf>:
    b8f4:	b40e      	push	{r1, r2, r3}
    b8f6:	2381      	movs	r3, #129	; 0x81
    b8f8:	b570      	push	{r4, r5, r6, lr}
    b8fa:	b09d      	sub	sp, #116	; 0x74
    b8fc:	ac02      	add	r4, sp, #8
    b8fe:	ad21      	add	r5, sp, #132	; 0x84
    b900:	009b      	lsls	r3, r3, #2
    b902:	cd40      	ldmia	r5!, {r6}
    b904:	81a3      	strh	r3, [r4, #12]
    b906:	9002      	str	r0, [sp, #8]
    b908:	9006      	str	r0, [sp, #24]
    b90a:	f000 f947 	bl	bb9c <strlen>
    b90e:	4b0b      	ldr	r3, [pc, #44]	; (b93c <sscanf+0x48>)
    b910:	6060      	str	r0, [r4, #4]
    b912:	6223      	str	r3, [r4, #32]
    b914:	2300      	movs	r3, #0
    b916:	6323      	str	r3, [r4, #48]	; 0x30
    b918:	6463      	str	r3, [r4, #68]	; 0x44
    b91a:	3b01      	subs	r3, #1
    b91c:	81e3      	strh	r3, [r4, #14]
    b91e:	4b08      	ldr	r3, [pc, #32]	; (b940 <sscanf+0x4c>)
    b920:	6160      	str	r0, [r4, #20]
    b922:	0032      	movs	r2, r6
    b924:	6818      	ldr	r0, [r3, #0]
    b926:	0021      	movs	r1, r4
    b928:	002b      	movs	r3, r5
    b92a:	9501      	str	r5, [sp, #4]
    b92c:	f001 ff7c 	bl	d828 <__ssvfscanf_r>
    b930:	b01d      	add	sp, #116	; 0x74
    b932:	bc70      	pop	{r4, r5, r6}
    b934:	bc08      	pop	{r3}
    b936:	b003      	add	sp, #12
    b938:	4718      	bx	r3
    b93a:	46c0      	nop			; (mov r8, r8)
    b93c:	0000b96d 	.word	0x0000b96d
    b940:	20000088 	.word	0x20000088

0000b944 <__sread>:
    b944:	b570      	push	{r4, r5, r6, lr}
    b946:	000c      	movs	r4, r1
    b948:	250e      	movs	r5, #14
    b94a:	5f49      	ldrsh	r1, [r1, r5]
    b94c:	f006 fdfe 	bl	1254c <_read_r>
    b950:	2800      	cmp	r0, #0
    b952:	db03      	blt.n	b95c <__sread+0x18>
    b954:	6d23      	ldr	r3, [r4, #80]	; 0x50
    b956:	181b      	adds	r3, r3, r0
    b958:	6523      	str	r3, [r4, #80]	; 0x50
    b95a:	bd70      	pop	{r4, r5, r6, pc}
    b95c:	89a3      	ldrh	r3, [r4, #12]
    b95e:	4a02      	ldr	r2, [pc, #8]	; (b968 <__sread+0x24>)
    b960:	4013      	ands	r3, r2
    b962:	81a3      	strh	r3, [r4, #12]
    b964:	e7f9      	b.n	b95a <__sread+0x16>
    b966:	46c0      	nop			; (mov r8, r8)
    b968:	ffffefff 	.word	0xffffefff

0000b96c <__seofread>:
    b96c:	2000      	movs	r0, #0
    b96e:	4770      	bx	lr

0000b970 <__swrite>:
    b970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b972:	0016      	movs	r6, r2
    b974:	001f      	movs	r7, r3
    b976:	220c      	movs	r2, #12
    b978:	5e8b      	ldrsh	r3, [r1, r2]
    b97a:	0005      	movs	r5, r0
    b97c:	000c      	movs	r4, r1
    b97e:	05da      	lsls	r2, r3, #23
    b980:	d507      	bpl.n	b992 <__swrite+0x22>
    b982:	230e      	movs	r3, #14
    b984:	5ec9      	ldrsh	r1, [r1, r3]
    b986:	2200      	movs	r2, #0
    b988:	2302      	movs	r3, #2
    b98a:	f005 ffcd 	bl	11928 <_lseek_r>
    b98e:	220c      	movs	r2, #12
    b990:	5ea3      	ldrsh	r3, [r4, r2]
    b992:	4a05      	ldr	r2, [pc, #20]	; (b9a8 <__swrite+0x38>)
    b994:	0028      	movs	r0, r5
    b996:	4013      	ands	r3, r2
    b998:	81a3      	strh	r3, [r4, #12]
    b99a:	0032      	movs	r2, r6
    b99c:	230e      	movs	r3, #14
    b99e:	5ee1      	ldrsh	r1, [r4, r3]
    b9a0:	003b      	movs	r3, r7
    b9a2:	f004 fa37 	bl	fe14 <_write_r>
    b9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9a8:	ffffefff 	.word	0xffffefff

0000b9ac <__sseek>:
    b9ac:	b570      	push	{r4, r5, r6, lr}
    b9ae:	000c      	movs	r4, r1
    b9b0:	250e      	movs	r5, #14
    b9b2:	5f49      	ldrsh	r1, [r1, r5]
    b9b4:	f005 ffb8 	bl	11928 <_lseek_r>
    b9b8:	1c43      	adds	r3, r0, #1
    b9ba:	d006      	beq.n	b9ca <__sseek+0x1e>
    b9bc:	2380      	movs	r3, #128	; 0x80
    b9be:	89a2      	ldrh	r2, [r4, #12]
    b9c0:	015b      	lsls	r3, r3, #5
    b9c2:	4313      	orrs	r3, r2
    b9c4:	81a3      	strh	r3, [r4, #12]
    b9c6:	6520      	str	r0, [r4, #80]	; 0x50
    b9c8:	bd70      	pop	{r4, r5, r6, pc}
    b9ca:	89a3      	ldrh	r3, [r4, #12]
    b9cc:	4a01      	ldr	r2, [pc, #4]	; (b9d4 <__sseek+0x28>)
    b9ce:	4013      	ands	r3, r2
    b9d0:	81a3      	strh	r3, [r4, #12]
    b9d2:	e7f9      	b.n	b9c8 <__sseek+0x1c>
    b9d4:	ffffefff 	.word	0xffffefff

0000b9d8 <__sclose>:
    b9d8:	b510      	push	{r4, lr}
    b9da:	230e      	movs	r3, #14
    b9dc:	5ec9      	ldrsh	r1, [r1, r3]
    b9de:	f004 faab 	bl	ff38 <_close_r>
    b9e2:	bd10      	pop	{r4, pc}

0000b9e4 <strcasecmp>:
    b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9e6:	4647      	mov	r7, r8
    b9e8:	46ce      	mov	lr, r9
    b9ea:	4688      	mov	r8, r1
    b9ec:	b580      	push	{r7, lr}
    b9ee:	4681      	mov	r9, r0
    b9f0:	2600      	movs	r6, #0
    b9f2:	2703      	movs	r7, #3
    b9f4:	464b      	mov	r3, r9
    b9f6:	5d9c      	ldrb	r4, [r3, r6]
    b9f8:	f005 ff70 	bl	118dc <__locale_ctype_ptr>
    b9fc:	1900      	adds	r0, r0, r4
    b9fe:	7843      	ldrb	r3, [r0, #1]
    ba00:	403b      	ands	r3, r7
    ba02:	2b01      	cmp	r3, #1
    ba04:	d016      	beq.n	ba34 <strcasecmp+0x50>
    ba06:	4643      	mov	r3, r8
    ba08:	5d9d      	ldrb	r5, [r3, r6]
    ba0a:	f005 ff67 	bl	118dc <__locale_ctype_ptr>
    ba0e:	1940      	adds	r0, r0, r5
    ba10:	7843      	ldrb	r3, [r0, #1]
    ba12:	403b      	ands	r3, r7
    ba14:	2b01      	cmp	r3, #1
    ba16:	d005      	beq.n	ba24 <strcasecmp+0x40>
    ba18:	1b60      	subs	r0, r4, r5
    ba1a:	d107      	bne.n	ba2c <strcasecmp+0x48>
    ba1c:	2d00      	cmp	r5, #0
    ba1e:	d005      	beq.n	ba2c <strcasecmp+0x48>
    ba20:	3601      	adds	r6, #1
    ba22:	e7e7      	b.n	b9f4 <strcasecmp+0x10>
    ba24:	0028      	movs	r0, r5
    ba26:	3020      	adds	r0, #32
    ba28:	1a20      	subs	r0, r4, r0
    ba2a:	d0f9      	beq.n	ba20 <strcasecmp+0x3c>
    ba2c:	bc0c      	pop	{r2, r3}
    ba2e:	4690      	mov	r8, r2
    ba30:	4699      	mov	r9, r3
    ba32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ba34:	3420      	adds	r4, #32
    ba36:	e7e6      	b.n	ba06 <strcasecmp+0x22>

0000ba38 <strchr>:
    ba38:	b570      	push	{r4, r5, r6, lr}
    ba3a:	b2cc      	uxtb	r4, r1
    ba3c:	2c00      	cmp	r4, #0
    ba3e:	d03b      	beq.n	bab8 <strchr+0x80>
    ba40:	0783      	lsls	r3, r0, #30
    ba42:	d00e      	beq.n	ba62 <strchr+0x2a>
    ba44:	7803      	ldrb	r3, [r0, #0]
    ba46:	2b00      	cmp	r3, #0
    ba48:	d05b      	beq.n	bb02 <strchr+0xca>
    ba4a:	429c      	cmp	r4, r3
    ba4c:	d033      	beq.n	bab6 <strchr+0x7e>
    ba4e:	2203      	movs	r2, #3
    ba50:	e004      	b.n	ba5c <strchr+0x24>
    ba52:	7803      	ldrb	r3, [r0, #0]
    ba54:	2b00      	cmp	r3, #0
    ba56:	d054      	beq.n	bb02 <strchr+0xca>
    ba58:	429c      	cmp	r4, r3
    ba5a:	d02c      	beq.n	bab6 <strchr+0x7e>
    ba5c:	3001      	adds	r0, #1
    ba5e:	4210      	tst	r0, r2
    ba60:	d1f7      	bne.n	ba52 <strchr+0x1a>
    ba62:	25ff      	movs	r5, #255	; 0xff
    ba64:	4029      	ands	r1, r5
    ba66:	020d      	lsls	r5, r1, #8
    ba68:	4329      	orrs	r1, r5
    ba6a:	040d      	lsls	r5, r1, #16
    ba6c:	430d      	orrs	r5, r1
    ba6e:	0029      	movs	r1, r5
    ba70:	6802      	ldr	r2, [r0, #0]
    ba72:	4b26      	ldr	r3, [pc, #152]	; (bb0c <strchr+0xd4>)
    ba74:	4051      	eors	r1, r2
    ba76:	18d3      	adds	r3, r2, r3
    ba78:	4393      	bics	r3, r2
    ba7a:	4a24      	ldr	r2, [pc, #144]	; (bb0c <strchr+0xd4>)
    ba7c:	4e24      	ldr	r6, [pc, #144]	; (bb10 <strchr+0xd8>)
    ba7e:	188a      	adds	r2, r1, r2
    ba80:	438a      	bics	r2, r1
    ba82:	4313      	orrs	r3, r2
    ba84:	4233      	tst	r3, r6
    ba86:	d10c      	bne.n	baa2 <strchr+0x6a>
    ba88:	0029      	movs	r1, r5
    ba8a:	3004      	adds	r0, #4
    ba8c:	6802      	ldr	r2, [r0, #0]
    ba8e:	4b1f      	ldr	r3, [pc, #124]	; (bb0c <strchr+0xd4>)
    ba90:	4051      	eors	r1, r2
    ba92:	18d3      	adds	r3, r2, r3
    ba94:	4393      	bics	r3, r2
    ba96:	4a1d      	ldr	r2, [pc, #116]	; (bb0c <strchr+0xd4>)
    ba98:	188a      	adds	r2, r1, r2
    ba9a:	438a      	bics	r2, r1
    ba9c:	4313      	orrs	r3, r2
    ba9e:	4233      	tst	r3, r6
    baa0:	d0f2      	beq.n	ba88 <strchr+0x50>
    baa2:	7803      	ldrb	r3, [r0, #0]
    baa4:	2b00      	cmp	r3, #0
    baa6:	d104      	bne.n	bab2 <strchr+0x7a>
    baa8:	e02b      	b.n	bb02 <strchr+0xca>
    baaa:	3001      	adds	r0, #1
    baac:	7803      	ldrb	r3, [r0, #0]
    baae:	2b00      	cmp	r3, #0
    bab0:	d027      	beq.n	bb02 <strchr+0xca>
    bab2:	429c      	cmp	r4, r3
    bab4:	d1f9      	bne.n	baaa <strchr+0x72>
    bab6:	bd70      	pop	{r4, r5, r6, pc}
    bab8:	0783      	lsls	r3, r0, #30
    baba:	d00a      	beq.n	bad2 <strchr+0x9a>
    babc:	7803      	ldrb	r3, [r0, #0]
    babe:	2b00      	cmp	r3, #0
    bac0:	d0f9      	beq.n	bab6 <strchr+0x7e>
    bac2:	2203      	movs	r2, #3
    bac4:	e002      	b.n	bacc <strchr+0x94>
    bac6:	7803      	ldrb	r3, [r0, #0]
    bac8:	2b00      	cmp	r3, #0
    baca:	d0f4      	beq.n	bab6 <strchr+0x7e>
    bacc:	3001      	adds	r0, #1
    bace:	4210      	tst	r0, r2
    bad0:	d1f9      	bne.n	bac6 <strchr+0x8e>
    bad2:	6801      	ldr	r1, [r0, #0]
    bad4:	4a0d      	ldr	r2, [pc, #52]	; (bb0c <strchr+0xd4>)
    bad6:	0003      	movs	r3, r0
    bad8:	188a      	adds	r2, r1, r2
    bada:	480d      	ldr	r0, [pc, #52]	; (bb10 <strchr+0xd8>)
    badc:	438a      	bics	r2, r1
    bade:	4202      	tst	r2, r0
    bae0:	d106      	bne.n	baf0 <strchr+0xb8>
    bae2:	3304      	adds	r3, #4
    bae4:	6819      	ldr	r1, [r3, #0]
    bae6:	4a09      	ldr	r2, [pc, #36]	; (bb0c <strchr+0xd4>)
    bae8:	188a      	adds	r2, r1, r2
    baea:	438a      	bics	r2, r1
    baec:	4202      	tst	r2, r0
    baee:	d0f8      	beq.n	bae2 <strchr+0xaa>
    baf0:	781a      	ldrb	r2, [r3, #0]
    baf2:	0018      	movs	r0, r3
    baf4:	2a00      	cmp	r2, #0
    baf6:	d006      	beq.n	bb06 <strchr+0xce>
    baf8:	3001      	adds	r0, #1
    bafa:	7803      	ldrb	r3, [r0, #0]
    bafc:	2b00      	cmp	r3, #0
    bafe:	d1fb      	bne.n	baf8 <strchr+0xc0>
    bb00:	e7d9      	b.n	bab6 <strchr+0x7e>
    bb02:	2000      	movs	r0, #0
    bb04:	e7d7      	b.n	bab6 <strchr+0x7e>
    bb06:	0018      	movs	r0, r3
    bb08:	e7d5      	b.n	bab6 <strchr+0x7e>
    bb0a:	46c0      	nop			; (mov r8, r8)
    bb0c:	fefefeff 	.word	0xfefefeff
    bb10:	80808080 	.word	0x80808080

0000bb14 <strcmp>:
    bb14:	4602      	mov	r2, r0
    bb16:	b570      	push	{r4, r5, r6, lr}
    bb18:	430a      	orrs	r2, r1
    bb1a:	0792      	lsls	r2, r2, #30
    bb1c:	d12a      	bne.n	bb74 <strcmp+0x60>
    bb1e:	4d1e      	ldr	r5, [pc, #120]	; (bb98 <strcmp+0x84>)
    bb20:	01ee      	lsls	r6, r5, #7
    bb22:	c804      	ldmia	r0!, {r2}
    bb24:	c908      	ldmia	r1!, {r3}
    bb26:	1b54      	subs	r4, r2, r5
    bb28:	4394      	bics	r4, r2
    bb2a:	4034      	ands	r4, r6
    bb2c:	d017      	beq.n	bb5e <strcmp+0x4a>
    bb2e:	b2d0      	uxtb	r0, r2
    bb30:	b2d9      	uxtb	r1, r3
    bb32:	1a40      	subs	r0, r0, r1
    bb34:	0621      	lsls	r1, r4, #24
    bb36:	4301      	orrs	r1, r0
    bb38:	d110      	bne.n	bb5c <strcmp+0x48>
    bb3a:	b290      	uxth	r0, r2
    bb3c:	b299      	uxth	r1, r3
    bb3e:	1a40      	subs	r0, r0, r1
    bb40:	0421      	lsls	r1, r4, #16
    bb42:	4301      	orrs	r1, r0
    bb44:	d10a      	bne.n	bb5c <strcmp+0x48>
    bb46:	0210      	lsls	r0, r2, #8
    bb48:	0219      	lsls	r1, r3, #8
    bb4a:	0a00      	lsrs	r0, r0, #8
    bb4c:	0a09      	lsrs	r1, r1, #8
    bb4e:	1a40      	subs	r0, r0, r1
    bb50:	0221      	lsls	r1, r4, #8
    bb52:	4301      	orrs	r1, r0
    bb54:	d102      	bne.n	bb5c <strcmp+0x48>
    bb56:	0e10      	lsrs	r0, r2, #24
    bb58:	0e19      	lsrs	r1, r3, #24
    bb5a:	1a40      	subs	r0, r0, r1
    bb5c:	bd70      	pop	{r4, r5, r6, pc}
    bb5e:	429a      	cmp	r2, r3
    bb60:	d0df      	beq.n	bb22 <strcmp+0xe>
    bb62:	ba10      	rev	r0, r2
    bb64:	ba19      	rev	r1, r3
    bb66:	4288      	cmp	r0, r1
    bb68:	d901      	bls.n	bb6e <strcmp+0x5a>
    bb6a:	2001      	movs	r0, #1
    bb6c:	bd70      	pop	{r4, r5, r6, pc}
    bb6e:	2000      	movs	r0, #0
    bb70:	43c0      	mvns	r0, r0
    bb72:	bd70      	pop	{r4, r5, r6, pc}
    bb74:	7802      	ldrb	r2, [r0, #0]
    bb76:	780b      	ldrb	r3, [r1, #0]
    bb78:	3001      	adds	r0, #1
    bb7a:	3101      	adds	r1, #1
    bb7c:	2a00      	cmp	r2, #0
    bb7e:	d009      	beq.n	bb94 <strcmp+0x80>
    bb80:	429a      	cmp	r2, r3
    bb82:	d107      	bne.n	bb94 <strcmp+0x80>
    bb84:	7802      	ldrb	r2, [r0, #0]
    bb86:	780b      	ldrb	r3, [r1, #0]
    bb88:	3001      	adds	r0, #1
    bb8a:	3101      	adds	r1, #1
    bb8c:	2a00      	cmp	r2, #0
    bb8e:	d001      	beq.n	bb94 <strcmp+0x80>
    bb90:	429a      	cmp	r2, r3
    bb92:	d0ef      	beq.n	bb74 <strcmp+0x60>
    bb94:	1ad0      	subs	r0, r2, r3
    bb96:	bd70      	pop	{r4, r5, r6, pc}
    bb98:	01010101 	.word	0x01010101

0000bb9c <strlen>:
    bb9c:	b510      	push	{r4, lr}
    bb9e:	0783      	lsls	r3, r0, #30
    bba0:	d025      	beq.n	bbee <strlen+0x52>
    bba2:	7803      	ldrb	r3, [r0, #0]
    bba4:	2b00      	cmp	r3, #0
    bba6:	d024      	beq.n	bbf2 <strlen+0x56>
    bba8:	0003      	movs	r3, r0
    bbaa:	2103      	movs	r1, #3
    bbac:	e002      	b.n	bbb4 <strlen+0x18>
    bbae:	781a      	ldrb	r2, [r3, #0]
    bbb0:	2a00      	cmp	r2, #0
    bbb2:	d01a      	beq.n	bbea <strlen+0x4e>
    bbb4:	3301      	adds	r3, #1
    bbb6:	420b      	tst	r3, r1
    bbb8:	d1f9      	bne.n	bbae <strlen+0x12>
    bbba:	6819      	ldr	r1, [r3, #0]
    bbbc:	4a0e      	ldr	r2, [pc, #56]	; (bbf8 <strlen+0x5c>)
    bbbe:	4c0f      	ldr	r4, [pc, #60]	; (bbfc <strlen+0x60>)
    bbc0:	188a      	adds	r2, r1, r2
    bbc2:	438a      	bics	r2, r1
    bbc4:	4222      	tst	r2, r4
    bbc6:	d106      	bne.n	bbd6 <strlen+0x3a>
    bbc8:	3304      	adds	r3, #4
    bbca:	6819      	ldr	r1, [r3, #0]
    bbcc:	4a0a      	ldr	r2, [pc, #40]	; (bbf8 <strlen+0x5c>)
    bbce:	188a      	adds	r2, r1, r2
    bbd0:	438a      	bics	r2, r1
    bbd2:	4222      	tst	r2, r4
    bbd4:	d0f8      	beq.n	bbc8 <strlen+0x2c>
    bbd6:	001a      	movs	r2, r3
    bbd8:	781b      	ldrb	r3, [r3, #0]
    bbda:	2b00      	cmp	r3, #0
    bbdc:	d003      	beq.n	bbe6 <strlen+0x4a>
    bbde:	3201      	adds	r2, #1
    bbe0:	7811      	ldrb	r1, [r2, #0]
    bbe2:	2900      	cmp	r1, #0
    bbe4:	d1fb      	bne.n	bbde <strlen+0x42>
    bbe6:	1a10      	subs	r0, r2, r0
    bbe8:	bd10      	pop	{r4, pc}
    bbea:	1a18      	subs	r0, r3, r0
    bbec:	e7fc      	b.n	bbe8 <strlen+0x4c>
    bbee:	0003      	movs	r3, r0
    bbf0:	e7e3      	b.n	bbba <strlen+0x1e>
    bbf2:	2000      	movs	r0, #0
    bbf4:	e7f8      	b.n	bbe8 <strlen+0x4c>
    bbf6:	46c0      	nop			; (mov r8, r8)
    bbf8:	fefefeff 	.word	0xfefefeff
    bbfc:	80808080 	.word	0x80808080

0000bc00 <critical_factorization>:
    bc00:	2301      	movs	r3, #1
    bc02:	b5f0      	push	{r4, r5, r6, r7, lr}
    bc04:	4647      	mov	r7, r8
    bc06:	46ce      	mov	lr, r9
    bc08:	4694      	mov	ip, r2
    bc0a:	2201      	movs	r2, #1
    bc0c:	4698      	mov	r8, r3
    bc0e:	2401      	movs	r4, #1
    bc10:	2500      	movs	r5, #0
    bc12:	b580      	push	{r7, lr}
    bc14:	4252      	negs	r2, r2
    bc16:	192b      	adds	r3, r5, r4
    bc18:	428b      	cmp	r3, r1
    bc1a:	d20b      	bcs.n	bc34 <critical_factorization+0x34>
    bc1c:	1886      	adds	r6, r0, r2
    bc1e:	5cc7      	ldrb	r7, [r0, r3]
    bc20:	5d36      	ldrb	r6, [r6, r4]
    bc22:	42b7      	cmp	r7, r6
    bc24:	d22d      	bcs.n	bc82 <critical_factorization+0x82>
    bc26:	1a9c      	subs	r4, r3, r2
    bc28:	46a0      	mov	r8, r4
    bc2a:	001d      	movs	r5, r3
    bc2c:	2401      	movs	r4, #1
    bc2e:	192b      	adds	r3, r5, r4
    bc30:	428b      	cmp	r3, r1
    bc32:	d3f3      	bcc.n	bc1c <critical_factorization+0x1c>
    bc34:	4644      	mov	r4, r8
    bc36:	4663      	mov	r3, ip
    bc38:	601c      	str	r4, [r3, #0]
    bc3a:	2301      	movs	r3, #1
    bc3c:	4699      	mov	r9, r3
    bc3e:	3b02      	subs	r3, #2
    bc40:	2401      	movs	r4, #1
    bc42:	2500      	movs	r5, #0
    bc44:	4698      	mov	r8, r3
    bc46:	192b      	adds	r3, r5, r4
    bc48:	4299      	cmp	r1, r3
    bc4a:	d90d      	bls.n	bc68 <critical_factorization+0x68>
    bc4c:	4646      	mov	r6, r8
    bc4e:	1986      	adds	r6, r0, r6
    bc50:	5cc7      	ldrb	r7, [r0, r3]
    bc52:	5d36      	ldrb	r6, [r6, r4]
    bc54:	42b7      	cmp	r7, r6
    bc56:	d91c      	bls.n	bc92 <critical_factorization+0x92>
    bc58:	4644      	mov	r4, r8
    bc5a:	1b1c      	subs	r4, r3, r4
    bc5c:	46a1      	mov	r9, r4
    bc5e:	001d      	movs	r5, r3
    bc60:	2401      	movs	r4, #1
    bc62:	192b      	adds	r3, r5, r4
    bc64:	4299      	cmp	r1, r3
    bc66:	d8f1      	bhi.n	bc4c <critical_factorization+0x4c>
    bc68:	4643      	mov	r3, r8
    bc6a:	1c50      	adds	r0, r2, #1
    bc6c:	3301      	adds	r3, #1
    bc6e:	4283      	cmp	r3, r0
    bc70:	d303      	bcc.n	bc7a <critical_factorization+0x7a>
    bc72:	4662      	mov	r2, ip
    bc74:	4649      	mov	r1, r9
    bc76:	0018      	movs	r0, r3
    bc78:	6011      	str	r1, [r2, #0]
    bc7a:	bc0c      	pop	{r2, r3}
    bc7c:	4690      	mov	r8, r2
    bc7e:	4699      	mov	r9, r3
    bc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bc82:	42b7      	cmp	r7, r6
    bc84:	d00d      	beq.n	bca2 <critical_factorization+0xa2>
    bc86:	2301      	movs	r3, #1
    bc88:	002a      	movs	r2, r5
    bc8a:	4698      	mov	r8, r3
    bc8c:	3501      	adds	r5, #1
    bc8e:	2401      	movs	r4, #1
    bc90:	e7c1      	b.n	bc16 <critical_factorization+0x16>
    bc92:	42b7      	cmp	r7, r6
    bc94:	d009      	beq.n	bcaa <critical_factorization+0xaa>
    bc96:	2301      	movs	r3, #1
    bc98:	46a8      	mov	r8, r5
    bc9a:	4699      	mov	r9, r3
    bc9c:	3501      	adds	r5, #1
    bc9e:	2401      	movs	r4, #1
    bca0:	e7d1      	b.n	bc46 <critical_factorization+0x46>
    bca2:	4544      	cmp	r4, r8
    bca4:	d005      	beq.n	bcb2 <critical_factorization+0xb2>
    bca6:	3401      	adds	r4, #1
    bca8:	e7b5      	b.n	bc16 <critical_factorization+0x16>
    bcaa:	454c      	cmp	r4, r9
    bcac:	d004      	beq.n	bcb8 <critical_factorization+0xb8>
    bcae:	3401      	adds	r4, #1
    bcb0:	e7c9      	b.n	bc46 <critical_factorization+0x46>
    bcb2:	001d      	movs	r5, r3
    bcb4:	2401      	movs	r4, #1
    bcb6:	e7ae      	b.n	bc16 <critical_factorization+0x16>
    bcb8:	001d      	movs	r5, r3
    bcba:	2401      	movs	r4, #1
    bcbc:	e7c3      	b.n	bc46 <critical_factorization+0x46>
    bcbe:	46c0      	nop			; (mov r8, r8)

0000bcc0 <two_way_long_needle>:
    bcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bcc2:	46de      	mov	lr, fp
    bcc4:	4657      	mov	r7, sl
    bcc6:	464e      	mov	r6, r9
    bcc8:	4645      	mov	r5, r8
    bcca:	b5e0      	push	{r5, r6, r7, lr}
    bccc:	0015      	movs	r5, r2
    bcce:	4c7b      	ldr	r4, [pc, #492]	; (bebc <two_way_long_needle+0x1fc>)
    bcd0:	0006      	movs	r6, r0
    bcd2:	44a5      	add	sp, r4
    bcd4:	aa03      	add	r2, sp, #12
    bcd6:	000f      	movs	r7, r1
    bcd8:	0028      	movs	r0, r5
    bcda:	0019      	movs	r1, r3
    bcdc:	001c      	movs	r4, r3
    bcde:	f7ff ff8f 	bl	bc00 <critical_factorization>
    bce2:	4683      	mov	fp, r0
    bce4:	aaff      	add	r2, sp, #1020	; 0x3fc
    bce6:	ab04      	add	r3, sp, #16
    bce8:	3214      	adds	r2, #20
    bcea:	c310      	stmia	r3!, {r4}
    bcec:	4293      	cmp	r3, r2
    bcee:	d1fc      	bne.n	bcea <two_way_long_needle+0x2a>
    bcf0:	1e63      	subs	r3, r4, #1
    bcf2:	0029      	movs	r1, r5
    bcf4:	46a4      	mov	ip, r4
    bcf6:	2c00      	cmp	r4, #0
    bcf8:	d009      	beq.n	bd0e <two_way_long_needle+0x4e>
    bcfa:	2408      	movs	r4, #8
    bcfc:	780a      	ldrb	r2, [r1, #0]
    bcfe:	a802      	add	r0, sp, #8
    bd00:	0092      	lsls	r2, r2, #2
    bd02:	1900      	adds	r0, r0, r4
    bd04:	5083      	str	r3, [r0, r2]
    bd06:	3101      	adds	r1, #1
    bd08:	3b01      	subs	r3, #1
    bd0a:	d2f6      	bcs.n	bcfa <two_way_long_needle+0x3a>
    bd0c:	4664      	mov	r4, ip
    bd0e:	9b03      	ldr	r3, [sp, #12]
    bd10:	465a      	mov	r2, fp
    bd12:	18e9      	adds	r1, r5, r3
    bd14:	0028      	movs	r0, r5
    bd16:	f7ff fc49 	bl	b5ac <memcmp>
    bd1a:	2800      	cmp	r0, #0
    bd1c:	d000      	beq.n	bd20 <two_way_long_needle+0x60>
    bd1e:	e074      	b.n	be0a <two_way_long_needle+0x14a>
    bd20:	2300      	movs	r3, #0
    bd22:	001a      	movs	r2, r3
    bd24:	469a      	mov	sl, r3
    bd26:	1e63      	subs	r3, r4, #1
    bd28:	4698      	mov	r8, r3
    bd2a:	4659      	mov	r1, fp
    bd2c:	2301      	movs	r3, #1
    bd2e:	0038      	movs	r0, r7
    bd30:	46a1      	mov	r9, r4
    bd32:	0017      	movs	r7, r2
    bd34:	4644      	mov	r4, r8
    bd36:	46b0      	mov	r8, r6
    bd38:	1a5b      	subs	r3, r3, r1
    bd3a:	9301      	str	r3, [sp, #4]
    bd3c:	9100      	str	r1, [sp, #0]
    bd3e:	4656      	mov	r6, sl
    bd40:	444e      	add	r6, r9
    bd42:	1a32      	subs	r2, r6, r0
    bd44:	2100      	movs	r1, #0
    bd46:	4440      	add	r0, r8
    bd48:	f005 fec2 	bl	11ad0 <memchr>
    bd4c:	2800      	cmp	r0, #0
    bd4e:	d153      	bne.n	bdf8 <two_way_long_needle+0x138>
    bd50:	2e00      	cmp	r6, #0
    bd52:	d051      	beq.n	bdf8 <two_way_long_needle+0x138>
    bd54:	4643      	mov	r3, r8
    bd56:	2108      	movs	r1, #8
    bd58:	199b      	adds	r3, r3, r6
    bd5a:	3b01      	subs	r3, #1
    bd5c:	781b      	ldrb	r3, [r3, #0]
    bd5e:	aa02      	add	r2, sp, #8
    bd60:	009b      	lsls	r3, r3, #2
    bd62:	1852      	adds	r2, r2, r1
    bd64:	58d3      	ldr	r3, [r2, r3]
    bd66:	2b00      	cmp	r3, #0
    bd68:	d00a      	beq.n	bd80 <two_way_long_needle+0xc0>
    bd6a:	2f00      	cmp	r7, #0
    bd6c:	d004      	beq.n	bd78 <two_way_long_needle+0xb8>
    bd6e:	9a03      	ldr	r2, [sp, #12]
    bd70:	4293      	cmp	r3, r2
    bd72:	d201      	bcs.n	bd78 <two_way_long_needle+0xb8>
    bd74:	464b      	mov	r3, r9
    bd76:	1a9b      	subs	r3, r3, r2
    bd78:	449a      	add	sl, r3
    bd7a:	2700      	movs	r7, #0
    bd7c:	0030      	movs	r0, r6
    bd7e:	e7de      	b.n	bd3e <two_way_long_needle+0x7e>
    bd80:	9900      	ldr	r1, [sp, #0]
    bd82:	003b      	movs	r3, r7
    bd84:	428f      	cmp	r7, r1
    bd86:	d200      	bcs.n	bd8a <two_way_long_needle+0xca>
    bd88:	000b      	movs	r3, r1
    bd8a:	42a3      	cmp	r3, r4
    bd8c:	d20d      	bcs.n	bdaa <two_way_long_needle+0xea>
    bd8e:	4642      	mov	r2, r8
    bd90:	4452      	add	r2, sl
    bd92:	e002      	b.n	bd9a <two_way_long_needle+0xda>
    bd94:	3301      	adds	r3, #1
    bd96:	42a3      	cmp	r3, r4
    bd98:	d207      	bcs.n	bdaa <two_way_long_needle+0xea>
    bd9a:	5ce8      	ldrb	r0, [r5, r3]
    bd9c:	5cd1      	ldrb	r1, [r2, r3]
    bd9e:	4288      	cmp	r0, r1
    bda0:	d0f8      	beq.n	bd94 <two_way_long_needle+0xd4>
    bda2:	9a01      	ldr	r2, [sp, #4]
    bda4:	4452      	add	r2, sl
    bda6:	4692      	mov	sl, r2
    bda8:	e7e6      	b.n	bd78 <two_way_long_needle+0xb8>
    bdaa:	9b00      	ldr	r3, [sp, #0]
    bdac:	1e59      	subs	r1, r3, #1
    bdae:	429f      	cmp	r7, r3
    bdb0:	d300      	bcc.n	bdb4 <two_way_long_needle+0xf4>
    bdb2:	e07d      	b.n	beb0 <two_way_long_needle+0x1f0>
    bdb4:	4642      	mov	r2, r8
    bdb6:	4452      	add	r2, sl
    bdb8:	5c50      	ldrb	r0, [r2, r1]
    bdba:	5c6b      	ldrb	r3, [r5, r1]
    bdbc:	4298      	cmp	r0, r3
    bdbe:	d000      	beq.n	bdc2 <two_way_long_needle+0x102>
    bdc0:	e074      	b.n	beac <two_way_long_needle+0x1ec>
    bdc2:	1e7b      	subs	r3, r7, #1
    bdc4:	469b      	mov	fp, r3
    bdc6:	0023      	movs	r3, r4
    bdc8:	46b4      	mov	ip, r6
    bdca:	465c      	mov	r4, fp
    bdcc:	0016      	movs	r6, r2
    bdce:	469b      	mov	fp, r3
    bdd0:	e004      	b.n	bddc <two_way_long_needle+0x11c>
    bdd2:	5cea      	ldrb	r2, [r5, r3]
    bdd4:	5cf0      	ldrb	r0, [r6, r3]
    bdd6:	4282      	cmp	r2, r0
    bdd8:	d103      	bne.n	bde2 <two_way_long_needle+0x122>
    bdda:	0019      	movs	r1, r3
    bddc:	1e4b      	subs	r3, r1, #1
    bdde:	42a3      	cmp	r3, r4
    bde0:	d1f7      	bne.n	bdd2 <two_way_long_needle+0x112>
    bde2:	4666      	mov	r6, ip
    bde4:	465c      	mov	r4, fp
    bde6:	3701      	adds	r7, #1
    bde8:	428f      	cmp	r7, r1
    bdea:	d863      	bhi.n	beb4 <two_way_long_needle+0x1f4>
    bdec:	464b      	mov	r3, r9
    bdee:	9f03      	ldr	r7, [sp, #12]
    bdf0:	0030      	movs	r0, r6
    bdf2:	44ba      	add	sl, r7
    bdf4:	1bdf      	subs	r7, r3, r7
    bdf6:	e7a2      	b.n	bd3e <two_way_long_needle+0x7e>
    bdf8:	2000      	movs	r0, #0
    bdfa:	4b31      	ldr	r3, [pc, #196]	; (bec0 <two_way_long_needle+0x200>)
    bdfc:	449d      	add	sp, r3
    bdfe:	bc3c      	pop	{r2, r3, r4, r5}
    be00:	4690      	mov	r8, r2
    be02:	4699      	mov	r9, r3
    be04:	46a2      	mov	sl, r4
    be06:	46ab      	mov	fp, r5
    be08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be0a:	465b      	mov	r3, fp
    be0c:	1ae3      	subs	r3, r4, r3
    be0e:	455b      	cmp	r3, fp
    be10:	d34a      	bcc.n	bea8 <two_way_long_needle+0x1e8>
    be12:	3301      	adds	r3, #1
    be14:	9303      	str	r3, [sp, #12]
    be16:	2300      	movs	r3, #0
    be18:	469a      	mov	sl, r3
    be1a:	1e63      	subs	r3, r4, #1
    be1c:	4698      	mov	r8, r3
    be1e:	465a      	mov	r2, fp
    be20:	2301      	movs	r3, #1
    be22:	0038      	movs	r0, r7
    be24:	46a1      	mov	r9, r4
    be26:	4657      	mov	r7, sl
    be28:	4644      	mov	r4, r8
    be2a:	46b0      	mov	r8, r6
    be2c:	1a9b      	subs	r3, r3, r2
    be2e:	9300      	str	r3, [sp, #0]
    be30:	464b      	mov	r3, r9
    be32:	18fe      	adds	r6, r7, r3
    be34:	1a32      	subs	r2, r6, r0
    be36:	2100      	movs	r1, #0
    be38:	4440      	add	r0, r8
    be3a:	f005 fe49 	bl	11ad0 <memchr>
    be3e:	2800      	cmp	r0, #0
    be40:	d1da      	bne.n	bdf8 <two_way_long_needle+0x138>
    be42:	2e00      	cmp	r6, #0
    be44:	d0d8      	beq.n	bdf8 <two_way_long_needle+0x138>
    be46:	4643      	mov	r3, r8
    be48:	2108      	movs	r1, #8
    be4a:	199b      	adds	r3, r3, r6
    be4c:	3b01      	subs	r3, #1
    be4e:	781b      	ldrb	r3, [r3, #0]
    be50:	aa02      	add	r2, sp, #8
    be52:	009b      	lsls	r3, r3, #2
    be54:	1852      	adds	r2, r2, r1
    be56:	58d3      	ldr	r3, [r2, r3]
    be58:	2b00      	cmp	r3, #0
    be5a:	d122      	bne.n	bea2 <two_way_long_needle+0x1e2>
    be5c:	4643      	mov	r3, r8
    be5e:	19d8      	adds	r0, r3, r7
    be60:	45a3      	cmp	fp, r4
    be62:	d20c      	bcs.n	be7e <two_way_long_needle+0x1be>
    be64:	465b      	mov	r3, fp
    be66:	5cc1      	ldrb	r1, [r0, r3]
    be68:	5cea      	ldrb	r2, [r5, r3]
    be6a:	4291      	cmp	r1, r2
    be6c:	d004      	beq.n	be78 <two_way_long_needle+0x1b8>
    be6e:	e015      	b.n	be9c <two_way_long_needle+0x1dc>
    be70:	5ce9      	ldrb	r1, [r5, r3]
    be72:	5cc2      	ldrb	r2, [r0, r3]
    be74:	4291      	cmp	r1, r2
    be76:	d111      	bne.n	be9c <two_way_long_needle+0x1dc>
    be78:	3301      	adds	r3, #1
    be7a:	42a3      	cmp	r3, r4
    be7c:	d3f8      	bcc.n	be70 <two_way_long_needle+0x1b0>
    be7e:	465b      	mov	r3, fp
    be80:	3b01      	subs	r3, #1
    be82:	d202      	bcs.n	be8a <two_way_long_needle+0x1ca>
    be84:	e7b9      	b.n	bdfa <two_way_long_needle+0x13a>
    be86:	3b01      	subs	r3, #1
    be88:	d3b7      	bcc.n	bdfa <two_way_long_needle+0x13a>
    be8a:	5ce9      	ldrb	r1, [r5, r3]
    be8c:	5cc2      	ldrb	r2, [r0, r3]
    be8e:	4291      	cmp	r1, r2
    be90:	d0f9      	beq.n	be86 <two_way_long_needle+0x1c6>
    be92:	9b03      	ldr	r3, [sp, #12]
    be94:	0030      	movs	r0, r6
    be96:	469c      	mov	ip, r3
    be98:	4467      	add	r7, ip
    be9a:	e7c9      	b.n	be30 <two_way_long_needle+0x170>
    be9c:	9a00      	ldr	r2, [sp, #0]
    be9e:	4694      	mov	ip, r2
    bea0:	4467      	add	r7, ip
    bea2:	18ff      	adds	r7, r7, r3
    bea4:	0030      	movs	r0, r6
    bea6:	e7c3      	b.n	be30 <two_way_long_needle+0x170>
    bea8:	465b      	mov	r3, fp
    beaa:	e7b2      	b.n	be12 <two_way_long_needle+0x152>
    beac:	9900      	ldr	r1, [sp, #0]
    beae:	e79a      	b.n	bde6 <two_way_long_needle+0x126>
    beb0:	0019      	movs	r1, r3
    beb2:	e798      	b.n	bde6 <two_way_long_needle+0x126>
    beb4:	4640      	mov	r0, r8
    beb6:	4450      	add	r0, sl
    beb8:	e79f      	b.n	bdfa <two_way_long_needle+0x13a>
    beba:	46c0      	nop			; (mov r8, r8)
    bebc:	fffffbec 	.word	0xfffffbec
    bec0:	00000414 	.word	0x00000414

0000bec4 <strstr>:
    bec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bec6:	4657      	mov	r7, sl
    bec8:	4645      	mov	r5, r8
    beca:	46de      	mov	lr, fp
    becc:	464e      	mov	r6, r9
    bece:	b5e0      	push	{r5, r6, r7, lr}
    bed0:	7803      	ldrb	r3, [r0, #0]
    bed2:	b085      	sub	sp, #20
    bed4:	0007      	movs	r7, r0
    bed6:	000d      	movs	r5, r1
    bed8:	2b00      	cmp	r3, #0
    beda:	d035      	beq.n	bf48 <strstr+0x84>
    bedc:	7809      	ldrb	r1, [r1, #0]
    bede:	1e0a      	subs	r2, r1, #0
    bee0:	d100      	bne.n	bee4 <strstr+0x20>
    bee2:	e09f      	b.n	c024 <strstr+0x160>
    bee4:	002c      	movs	r4, r5
    bee6:	2601      	movs	r6, #1
    bee8:	e002      	b.n	bef0 <strstr+0x2c>
    beea:	7822      	ldrb	r2, [r4, #0]
    beec:	2a00      	cmp	r2, #0
    beee:	d00b      	beq.n	bf08 <strstr+0x44>
    bef0:	1a9b      	subs	r3, r3, r2
    bef2:	425a      	negs	r2, r3
    bef4:	4153      	adcs	r3, r2
    bef6:	3001      	adds	r0, #1
    bef8:	401e      	ands	r6, r3
    befa:	7803      	ldrb	r3, [r0, #0]
    befc:	3401      	adds	r4, #1
    befe:	2b00      	cmp	r3, #0
    bf00:	d1f3      	bne.n	beea <strstr+0x26>
    bf02:	7823      	ldrb	r3, [r4, #0]
    bf04:	2b00      	cmp	r3, #0
    bf06:	d122      	bne.n	bf4e <strstr+0x8a>
    bf08:	0038      	movs	r0, r7
    bf0a:	2e00      	cmp	r6, #0
    bf0c:	d006      	beq.n	bf1c <strstr+0x58>
    bf0e:	b005      	add	sp, #20
    bf10:	bc3c      	pop	{r2, r3, r4, r5}
    bf12:	4690      	mov	r8, r2
    bf14:	4699      	mov	r9, r3
    bf16:	46a2      	mov	sl, r4
    bf18:	46ab      	mov	fp, r5
    bf1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bf1c:	1c78      	adds	r0, r7, #1
    bf1e:	f7ff fd8b 	bl	ba38 <strchr>
    bf22:	1b64      	subs	r4, r4, r5
    bf24:	1e06      	subs	r6, r0, #0
    bf26:	d012      	beq.n	bf4e <strstr+0x8a>
    bf28:	2c01      	cmp	r4, #1
    bf2a:	d0f0      	beq.n	bf0e <strstr+0x4a>
    bf2c:	193f      	adds	r7, r7, r4
    bf2e:	2101      	movs	r1, #1
    bf30:	42b8      	cmp	r0, r7
    bf32:	d800      	bhi.n	bf36 <strstr+0x72>
    bf34:	1a39      	subs	r1, r7, r0
    bf36:	000f      	movs	r7, r1
    bf38:	2c1f      	cmp	r4, #31
    bf3a:	d90a      	bls.n	bf52 <strstr+0x8e>
    bf3c:	0023      	movs	r3, r4
    bf3e:	002a      	movs	r2, r5
    bf40:	0030      	movs	r0, r6
    bf42:	f7ff febd 	bl	bcc0 <two_way_long_needle>
    bf46:	e7e2      	b.n	bf0e <strstr+0x4a>
    bf48:	780b      	ldrb	r3, [r1, #0]
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d06a      	beq.n	c024 <strstr+0x160>
    bf4e:	2000      	movs	r0, #0
    bf50:	e7dd      	b.n	bf0e <strstr+0x4a>
    bf52:	aa03      	add	r2, sp, #12
    bf54:	0021      	movs	r1, r4
    bf56:	0028      	movs	r0, r5
    bf58:	f7ff fe52 	bl	bc00 <critical_factorization>
    bf5c:	9b03      	ldr	r3, [sp, #12]
    bf5e:	4680      	mov	r8, r0
    bf60:	0002      	movs	r2, r0
    bf62:	18e9      	adds	r1, r5, r3
    bf64:	0028      	movs	r0, r5
    bf66:	f7ff fb21 	bl	b5ac <memcmp>
    bf6a:	2800      	cmp	r0, #0
    bf6c:	d15c      	bne.n	c028 <strstr+0x164>
    bf6e:	2300      	movs	r3, #0
    bf70:	4699      	mov	r9, r3
    bf72:	4643      	mov	r3, r8
    bf74:	3b01      	subs	r3, #1
    bf76:	9300      	str	r3, [sp, #0]
    bf78:	4642      	mov	r2, r8
    bf7a:	2301      	movs	r3, #1
    bf7c:	46b2      	mov	sl, r6
    bf7e:	0038      	movs	r0, r7
    bf80:	464e      	mov	r6, r9
    bf82:	464f      	mov	r7, r9
    bf84:	1a9b      	subs	r3, r3, r2
    bf86:	9301      	str	r3, [sp, #4]
    bf88:	19e3      	adds	r3, r4, r7
    bf8a:	1a1a      	subs	r2, r3, r0
    bf8c:	2100      	movs	r1, #0
    bf8e:	4450      	add	r0, sl
    bf90:	4699      	mov	r9, r3
    bf92:	f005 fd9d 	bl	11ad0 <memchr>
    bf96:	2800      	cmp	r0, #0
    bf98:	d1d9      	bne.n	bf4e <strstr+0x8a>
    bf9a:	464b      	mov	r3, r9
    bf9c:	2b00      	cmp	r3, #0
    bf9e:	d0d6      	beq.n	bf4e <strstr+0x8a>
    bfa0:	4643      	mov	r3, r8
    bfa2:	45b0      	cmp	r8, r6
    bfa4:	d200      	bcs.n	bfa8 <strstr+0xe4>
    bfa6:	0033      	movs	r3, r6
    bfa8:	429c      	cmp	r4, r3
    bfaa:	d90f      	bls.n	bfcc <strstr+0x108>
    bfac:	4652      	mov	r2, sl
    bfae:	18d2      	adds	r2, r2, r3
    bfb0:	5ce9      	ldrb	r1, [r5, r3]
    bfb2:	5dd2      	ldrb	r2, [r2, r7]
    bfb4:	4291      	cmp	r1, r2
    bfb6:	d12e      	bne.n	c016 <strstr+0x152>
    bfb8:	4652      	mov	r2, sl
    bfba:	19d0      	adds	r0, r2, r7
    bfbc:	e003      	b.n	bfc6 <strstr+0x102>
    bfbe:	5ce9      	ldrb	r1, [r5, r3]
    bfc0:	5cc2      	ldrb	r2, [r0, r3]
    bfc2:	4291      	cmp	r1, r2
    bfc4:	d127      	bne.n	c016 <strstr+0x152>
    bfc6:	3301      	adds	r3, #1
    bfc8:	429c      	cmp	r4, r3
    bfca:	d1f8      	bne.n	bfbe <strstr+0xfa>
    bfcc:	9a00      	ldr	r2, [sp, #0]
    bfce:	45b0      	cmp	r8, r6
    bfd0:	d976      	bls.n	c0c0 <strstr+0x1fc>
    bfd2:	46bc      	mov	ip, r7
    bfd4:	44d4      	add	ip, sl
    bfd6:	4661      	mov	r1, ip
    bfd8:	9b00      	ldr	r3, [sp, #0]
    bfda:	5cc9      	ldrb	r1, [r1, r3]
    bfdc:	5ceb      	ldrb	r3, [r5, r3]
    bfde:	4299      	cmp	r1, r3
    bfe0:	d16e      	bne.n	c0c0 <strstr+0x1fc>
    bfe2:	1e73      	subs	r3, r6, #1
    bfe4:	469b      	mov	fp, r3
    bfe6:	4663      	mov	r3, ip
    bfe8:	46a4      	mov	ip, r4
    bfea:	465c      	mov	r4, fp
    bfec:	46b3      	mov	fp, r6
    bfee:	001e      	movs	r6, r3
    bff0:	e004      	b.n	bffc <strstr+0x138>
    bff2:	5ce8      	ldrb	r0, [r5, r3]
    bff4:	5cf1      	ldrb	r1, [r6, r3]
    bff6:	4288      	cmp	r0, r1
    bff8:	d103      	bne.n	c002 <strstr+0x13e>
    bffa:	001a      	movs	r2, r3
    bffc:	1e53      	subs	r3, r2, #1
    bffe:	42a3      	cmp	r3, r4
    c000:	d1f7      	bne.n	bff2 <strstr+0x12e>
    c002:	4664      	mov	r4, ip
    c004:	465e      	mov	r6, fp
    c006:	3601      	adds	r6, #1
    c008:	4296      	cmp	r6, r2
    c00a:	d85b      	bhi.n	c0c4 <strstr+0x200>
    c00c:	9e03      	ldr	r6, [sp, #12]
    c00e:	4648      	mov	r0, r9
    c010:	19bf      	adds	r7, r7, r6
    c012:	1ba6      	subs	r6, r4, r6
    c014:	e7b8      	b.n	bf88 <strstr+0xc4>
    c016:	9a01      	ldr	r2, [sp, #4]
    c018:	2600      	movs	r6, #0
    c01a:	4694      	mov	ip, r2
    c01c:	4467      	add	r7, ip
    c01e:	18ff      	adds	r7, r7, r3
    c020:	4648      	mov	r0, r9
    c022:	e7b1      	b.n	bf88 <strstr+0xc4>
    c024:	0038      	movs	r0, r7
    c026:	e772      	b.n	bf0e <strstr+0x4a>
    c028:	4643      	mov	r3, r8
    c02a:	1ae3      	subs	r3, r4, r3
    c02c:	4543      	cmp	r3, r8
    c02e:	d200      	bcs.n	c032 <strstr+0x16e>
    c030:	4643      	mov	r3, r8
    c032:	3301      	adds	r3, #1
    c034:	9303      	str	r3, [sp, #12]
    c036:	2300      	movs	r3, #0
    c038:	4642      	mov	r2, r8
    c03a:	4699      	mov	r9, r3
    c03c:	3301      	adds	r3, #1
    c03e:	1a9b      	subs	r3, r3, r2
    c040:	464a      	mov	r2, r9
    c042:	46b3      	mov	fp, r6
    c044:	46b1      	mov	r9, r6
    c046:	0038      	movs	r0, r7
    c048:	469a      	mov	sl, r3
    c04a:	0016      	movs	r6, r2
    c04c:	44c3      	add	fp, r8
    c04e:	19a7      	adds	r7, r4, r6
    c050:	1a3a      	subs	r2, r7, r0
    c052:	2100      	movs	r1, #0
    c054:	4448      	add	r0, r9
    c056:	f005 fd3b 	bl	11ad0 <memchr>
    c05a:	2800      	cmp	r0, #0
    c05c:	d000      	beq.n	c060 <strstr+0x19c>
    c05e:	e776      	b.n	bf4e <strstr+0x8a>
    c060:	2f00      	cmp	r7, #0
    c062:	d100      	bne.n	c066 <strstr+0x1a2>
    c064:	e773      	b.n	bf4e <strstr+0x8a>
    c066:	464b      	mov	r3, r9
    c068:	1998      	adds	r0, r3, r6
    c06a:	4544      	cmp	r4, r8
    c06c:	d90f      	bls.n	c08e <strstr+0x1ca>
    c06e:	465b      	mov	r3, fp
    c070:	5d99      	ldrb	r1, [r3, r6]
    c072:	4643      	mov	r3, r8
    c074:	4648      	mov	r0, r9
    c076:	5cea      	ldrb	r2, [r5, r3]
    c078:	1980      	adds	r0, r0, r6
    c07a:	4291      	cmp	r1, r2
    c07c:	d004      	beq.n	c088 <strstr+0x1c4>
    c07e:	e016      	b.n	c0ae <strstr+0x1ea>
    c080:	5ce9      	ldrb	r1, [r5, r3]
    c082:	5cc2      	ldrb	r2, [r0, r3]
    c084:	4291      	cmp	r1, r2
    c086:	d112      	bne.n	c0ae <strstr+0x1ea>
    c088:	3301      	adds	r3, #1
    c08a:	429c      	cmp	r4, r3
    c08c:	d1f8      	bne.n	c080 <strstr+0x1bc>
    c08e:	4643      	mov	r3, r8
    c090:	3b01      	subs	r3, #1
    c092:	d200      	bcs.n	c096 <strstr+0x1d2>
    c094:	e73b      	b.n	bf0e <strstr+0x4a>
    c096:	5cc1      	ldrb	r1, [r0, r3]
    c098:	5cea      	ldrb	r2, [r5, r3]
    c09a:	4291      	cmp	r1, r2
    c09c:	d004      	beq.n	c0a8 <strstr+0x1e4>
    c09e:	e00a      	b.n	c0b6 <strstr+0x1f2>
    c0a0:	5ce9      	ldrb	r1, [r5, r3]
    c0a2:	5cc2      	ldrb	r2, [r0, r3]
    c0a4:	4291      	cmp	r1, r2
    c0a6:	d106      	bne.n	c0b6 <strstr+0x1f2>
    c0a8:	3b01      	subs	r3, #1
    c0aa:	d2f9      	bcs.n	c0a0 <strstr+0x1dc>
    c0ac:	e72f      	b.n	bf0e <strstr+0x4a>
    c0ae:	4456      	add	r6, sl
    c0b0:	18f6      	adds	r6, r6, r3
    c0b2:	0038      	movs	r0, r7
    c0b4:	e7cb      	b.n	c04e <strstr+0x18a>
    c0b6:	9b03      	ldr	r3, [sp, #12]
    c0b8:	0038      	movs	r0, r7
    c0ba:	469c      	mov	ip, r3
    c0bc:	4466      	add	r6, ip
    c0be:	e7c6      	b.n	c04e <strstr+0x18a>
    c0c0:	4642      	mov	r2, r8
    c0c2:	e7a0      	b.n	c006 <strstr+0x142>
    c0c4:	46b9      	mov	r9, r7
    c0c6:	4650      	mov	r0, sl
    c0c8:	4448      	add	r0, r9
    c0ca:	e720      	b.n	bf0e <strstr+0x4a>

0000c0cc <_strtol_l.isra.0>:
    c0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0ce:	4657      	mov	r7, sl
    c0d0:	464e      	mov	r6, r9
    c0d2:	46de      	mov	lr, fp
    c0d4:	4645      	mov	r5, r8
    c0d6:	b5e0      	push	{r5, r6, r7, lr}
    c0d8:	001e      	movs	r6, r3
    c0da:	2308      	movs	r3, #8
    c0dc:	b083      	sub	sp, #12
    c0de:	9001      	str	r0, [sp, #4]
    c0e0:	9100      	str	r1, [sp, #0]
    c0e2:	4692      	mov	sl, r2
    c0e4:	000f      	movs	r7, r1
    c0e6:	4699      	mov	r9, r3
    c0e8:	e000      	b.n	c0ec <_strtol_l.isra.0+0x20>
    c0ea:	002f      	movs	r7, r5
    c0ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    c0ee:	783c      	ldrb	r4, [r7, #0]
    c0f0:	f005 fbf0 	bl	118d4 <__locale_ctype_ptr_l>
    c0f4:	464a      	mov	r2, r9
    c0f6:	1900      	adds	r0, r0, r4
    c0f8:	7843      	ldrb	r3, [r0, #1]
    c0fa:	1c7d      	adds	r5, r7, #1
    c0fc:	421a      	tst	r2, r3
    c0fe:	d1f4      	bne.n	c0ea <_strtol_l.isra.0+0x1e>
    c100:	2c2d      	cmp	r4, #45	; 0x2d
    c102:	d04f      	beq.n	c1a4 <_strtol_l.isra.0+0xd8>
    c104:	2300      	movs	r3, #0
    c106:	4698      	mov	r8, r3
    c108:	2c2b      	cmp	r4, #43	; 0x2b
    c10a:	d05c      	beq.n	c1c6 <_strtol_l.isra.0+0xfa>
    c10c:	2e00      	cmp	r6, #0
    c10e:	d003      	beq.n	c118 <_strtol_l.isra.0+0x4c>
    c110:	2e10      	cmp	r6, #16
    c112:	d05b      	beq.n	c1cc <_strtol_l.isra.0+0x100>
    c114:	0037      	movs	r7, r6
    c116:	e003      	b.n	c120 <_strtol_l.isra.0+0x54>
    c118:	2c30      	cmp	r4, #48	; 0x30
    c11a:	d063      	beq.n	c1e4 <_strtol_l.isra.0+0x118>
    c11c:	270a      	movs	r7, #10
    c11e:	260a      	movs	r6, #10
    c120:	4b35      	ldr	r3, [pc, #212]	; (c1f8 <_strtol_l.isra.0+0x12c>)
    c122:	0039      	movs	r1, r7
    c124:	4443      	add	r3, r8
    c126:	0018      	movs	r0, r3
    c128:	4699      	mov	r9, r3
    c12a:	f7fd f8c9 	bl	92c0 <__aeabi_uidivmod>
    c12e:	4648      	mov	r0, r9
    c130:	468b      	mov	fp, r1
    c132:	0039      	movs	r1, r7
    c134:	f7fd f83e 	bl	91b4 <__udivsi3>
    c138:	2200      	movs	r2, #0
    c13a:	0001      	movs	r1, r0
    c13c:	2000      	movs	r0, #0
    c13e:	0023      	movs	r3, r4
    c140:	3b30      	subs	r3, #48	; 0x30
    c142:	2b09      	cmp	r3, #9
    c144:	d907      	bls.n	c156 <_strtol_l.isra.0+0x8a>
    c146:	3b11      	subs	r3, #17
    c148:	2b19      	cmp	r3, #25
    c14a:	d903      	bls.n	c154 <_strtol_l.isra.0+0x88>
    c14c:	0023      	movs	r3, r4
    c14e:	3b61      	subs	r3, #97	; 0x61
    c150:	2b19      	cmp	r3, #25
    c152:	d80d      	bhi.n	c170 <_strtol_l.isra.0+0xa4>
    c154:	330a      	adds	r3, #10
    c156:	429e      	cmp	r6, r3
    c158:	dd0a      	ble.n	c170 <_strtol_l.isra.0+0xa4>
    c15a:	1c54      	adds	r4, r2, #1
    c15c:	d005      	beq.n	c16a <_strtol_l.isra.0+0x9e>
    c15e:	4281      	cmp	r1, r0
    c160:	d31d      	bcc.n	c19e <_strtol_l.isra.0+0xd2>
    c162:	d01a      	beq.n	c19a <_strtol_l.isra.0+0xce>
    c164:	2201      	movs	r2, #1
    c166:	4378      	muls	r0, r7
    c168:	1818      	adds	r0, r3, r0
    c16a:	782c      	ldrb	r4, [r5, #0]
    c16c:	3501      	adds	r5, #1
    c16e:	e7e6      	b.n	c13e <_strtol_l.isra.0+0x72>
    c170:	1c53      	adds	r3, r2, #1
    c172:	d01c      	beq.n	c1ae <_strtol_l.isra.0+0xe2>
    c174:	4643      	mov	r3, r8
    c176:	2b00      	cmp	r3, #0
    c178:	d000      	beq.n	c17c <_strtol_l.isra.0+0xb0>
    c17a:	4240      	negs	r0, r0
    c17c:	4653      	mov	r3, sl
    c17e:	2b00      	cmp	r3, #0
    c180:	d004      	beq.n	c18c <_strtol_l.isra.0+0xc0>
    c182:	9b00      	ldr	r3, [sp, #0]
    c184:	2a00      	cmp	r2, #0
    c186:	d11c      	bne.n	c1c2 <_strtol_l.isra.0+0xf6>
    c188:	4652      	mov	r2, sl
    c18a:	6013      	str	r3, [r2, #0]
    c18c:	b003      	add	sp, #12
    c18e:	bc3c      	pop	{r2, r3, r4, r5}
    c190:	4690      	mov	r8, r2
    c192:	4699      	mov	r9, r3
    c194:	46a2      	mov	sl, r4
    c196:	46ab      	mov	fp, r5
    c198:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c19a:	459b      	cmp	fp, r3
    c19c:	dae2      	bge.n	c164 <_strtol_l.isra.0+0x98>
    c19e:	2201      	movs	r2, #1
    c1a0:	4252      	negs	r2, r2
    c1a2:	e7e2      	b.n	c16a <_strtol_l.isra.0+0x9e>
    c1a4:	2301      	movs	r3, #1
    c1a6:	782c      	ldrb	r4, [r5, #0]
    c1a8:	4698      	mov	r8, r3
    c1aa:	1cbd      	adds	r5, r7, #2
    c1ac:	e7ae      	b.n	c10c <_strtol_l.isra.0+0x40>
    c1ae:	2322      	movs	r3, #34	; 0x22
    c1b0:	9a01      	ldr	r2, [sp, #4]
    c1b2:	4648      	mov	r0, r9
    c1b4:	6013      	str	r3, [r2, #0]
    c1b6:	4653      	mov	r3, sl
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	d0e7      	beq.n	c18c <_strtol_l.isra.0+0xc0>
    c1bc:	1e6b      	subs	r3, r5, #1
    c1be:	4648      	mov	r0, r9
    c1c0:	e7e2      	b.n	c188 <_strtol_l.isra.0+0xbc>
    c1c2:	4681      	mov	r9, r0
    c1c4:	e7fa      	b.n	c1bc <_strtol_l.isra.0+0xf0>
    c1c6:	782c      	ldrb	r4, [r5, #0]
    c1c8:	1cbd      	adds	r5, r7, #2
    c1ca:	e79f      	b.n	c10c <_strtol_l.isra.0+0x40>
    c1cc:	2c30      	cmp	r4, #48	; 0x30
    c1ce:	d111      	bne.n	c1f4 <_strtol_l.isra.0+0x128>
    c1d0:	2220      	movs	r2, #32
    c1d2:	782b      	ldrb	r3, [r5, #0]
    c1d4:	4393      	bics	r3, r2
    c1d6:	2b58      	cmp	r3, #88	; 0x58
    c1d8:	d10c      	bne.n	c1f4 <_strtol_l.isra.0+0x128>
    c1da:	786c      	ldrb	r4, [r5, #1]
    c1dc:	2710      	movs	r7, #16
    c1de:	3502      	adds	r5, #2
    c1e0:	2610      	movs	r6, #16
    c1e2:	e79d      	b.n	c120 <_strtol_l.isra.0+0x54>
    c1e4:	2220      	movs	r2, #32
    c1e6:	782b      	ldrb	r3, [r5, #0]
    c1e8:	4393      	bics	r3, r2
    c1ea:	2b58      	cmp	r3, #88	; 0x58
    c1ec:	d0f5      	beq.n	c1da <_strtol_l.isra.0+0x10e>
    c1ee:	2708      	movs	r7, #8
    c1f0:	2608      	movs	r6, #8
    c1f2:	e795      	b.n	c120 <_strtol_l.isra.0+0x54>
    c1f4:	2710      	movs	r7, #16
    c1f6:	e793      	b.n	c120 <_strtol_l.isra.0+0x54>
    c1f8:	7fffffff 	.word	0x7fffffff

0000c1fc <_strtol_r>:
    c1fc:	b510      	push	{r4, lr}
    c1fe:	4c06      	ldr	r4, [pc, #24]	; (c218 <_strtol_r+0x1c>)
    c200:	b082      	sub	sp, #8
    c202:	6824      	ldr	r4, [r4, #0]
    c204:	6b64      	ldr	r4, [r4, #52]	; 0x34
    c206:	2c00      	cmp	r4, #0
    c208:	d004      	beq.n	c214 <_strtol_r+0x18>
    c20a:	9400      	str	r4, [sp, #0]
    c20c:	f7ff ff5e 	bl	c0cc <_strtol_l.isra.0>
    c210:	b002      	add	sp, #8
    c212:	bd10      	pop	{r4, pc}
    c214:	4c01      	ldr	r4, [pc, #4]	; (c21c <_strtol_r+0x20>)
    c216:	e7f8      	b.n	c20a <_strtol_r+0xe>
    c218:	20000088 	.word	0x20000088
    c21c:	200008cc 	.word	0x200008cc

0000c220 <_svfprintf_r>:
    c220:	b5f0      	push	{r4, r5, r6, r7, lr}
    c222:	46de      	mov	lr, fp
    c224:	4645      	mov	r5, r8
    c226:	4657      	mov	r7, sl
    c228:	464e      	mov	r6, r9
    c22a:	b5e0      	push	{r5, r6, r7, lr}
    c22c:	b0c3      	sub	sp, #268	; 0x10c
    c22e:	000d      	movs	r5, r1
    c230:	9106      	str	r1, [sp, #24]
    c232:	0014      	movs	r4, r2
    c234:	930f      	str	r3, [sp, #60]	; 0x3c
    c236:	9009      	str	r0, [sp, #36]	; 0x24
    c238:	f005 fb60 	bl	118fc <_localeconv_r>
    c23c:	6803      	ldr	r3, [r0, #0]
    c23e:	0018      	movs	r0, r3
    c240:	9319      	str	r3, [sp, #100]	; 0x64
    c242:	f7ff fcab 	bl	bb9c <strlen>
    c246:	9018      	str	r0, [sp, #96]	; 0x60
    c248:	89ab      	ldrh	r3, [r5, #12]
    c24a:	061b      	lsls	r3, r3, #24
    c24c:	d505      	bpl.n	c25a <_svfprintf_r+0x3a>
    c24e:	692b      	ldr	r3, [r5, #16]
    c250:	9307      	str	r3, [sp, #28]
    c252:	2b00      	cmp	r3, #0
    c254:	d101      	bne.n	c25a <_svfprintf_r+0x3a>
    c256:	f001 f863 	bl	d320 <_svfprintf_r+0x1100>
    c25a:	ab32      	add	r3, sp, #200	; 0xc8
    c25c:	9325      	str	r3, [sp, #148]	; 0x94
    c25e:	2300      	movs	r3, #0
    c260:	46a3      	mov	fp, r4
    c262:	af25      	add	r7, sp, #148	; 0x94
    c264:	60bb      	str	r3, [r7, #8]
    c266:	607b      	str	r3, [r7, #4]
    c268:	9314      	str	r3, [sp, #80]	; 0x50
    c26a:	9316      	str	r3, [sp, #88]	; 0x58
    c26c:	9315      	str	r3, [sp, #84]	; 0x54
    c26e:	ae32      	add	r6, sp, #200	; 0xc8
    c270:	9317      	str	r3, [sp, #92]	; 0x5c
    c272:	931a      	str	r3, [sp, #104]	; 0x68
    c274:	930a      	str	r3, [sp, #40]	; 0x28
    c276:	465b      	mov	r3, fp
    c278:	781b      	ldrb	r3, [r3, #0]
    c27a:	465c      	mov	r4, fp
    c27c:	2b00      	cmp	r3, #0
    c27e:	d01c      	beq.n	c2ba <_svfprintf_r+0x9a>
    c280:	2b25      	cmp	r3, #37	; 0x25
    c282:	d102      	bne.n	c28a <_svfprintf_r+0x6a>
    c284:	e019      	b.n	c2ba <_svfprintf_r+0x9a>
    c286:	2b25      	cmp	r3, #37	; 0x25
    c288:	d003      	beq.n	c292 <_svfprintf_r+0x72>
    c28a:	3401      	adds	r4, #1
    c28c:	7823      	ldrb	r3, [r4, #0]
    c28e:	2b00      	cmp	r3, #0
    c290:	d1f9      	bne.n	c286 <_svfprintf_r+0x66>
    c292:	465b      	mov	r3, fp
    c294:	1ae5      	subs	r5, r4, r3
    c296:	d010      	beq.n	c2ba <_svfprintf_r+0x9a>
    c298:	465b      	mov	r3, fp
    c29a:	6033      	str	r3, [r6, #0]
    c29c:	68bb      	ldr	r3, [r7, #8]
    c29e:	6075      	str	r5, [r6, #4]
    c2a0:	195b      	adds	r3, r3, r5
    c2a2:	60bb      	str	r3, [r7, #8]
    c2a4:	687b      	ldr	r3, [r7, #4]
    c2a6:	3301      	adds	r3, #1
    c2a8:	607b      	str	r3, [r7, #4]
    c2aa:	2b07      	cmp	r3, #7
    c2ac:	dc2e      	bgt.n	c30c <_svfprintf_r+0xec>
    c2ae:	3608      	adds	r6, #8
    c2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c2b2:	469c      	mov	ip, r3
    c2b4:	44ac      	add	ip, r5
    c2b6:	4663      	mov	r3, ip
    c2b8:	930a      	str	r3, [sp, #40]	; 0x28
    c2ba:	7823      	ldrb	r3, [r4, #0]
    c2bc:	2b00      	cmp	r3, #0
    c2be:	d02e      	beq.n	c31e <_svfprintf_r+0xfe>
    c2c0:	1c63      	adds	r3, r4, #1
    c2c2:	469b      	mov	fp, r3
    c2c4:	2300      	movs	r3, #0
    c2c6:	aa16      	add	r2, sp, #88	; 0x58
    c2c8:	77d3      	strb	r3, [r2, #31]
    c2ca:	2201      	movs	r2, #1
    c2cc:	4252      	negs	r2, r2
    c2ce:	4692      	mov	sl, r2
    c2d0:	2200      	movs	r2, #0
    c2d2:	2100      	movs	r1, #0
    c2d4:	920b      	str	r2, [sp, #44]	; 0x2c
    c2d6:	3220      	adds	r2, #32
    c2d8:	4691      	mov	r9, r2
    c2da:	3220      	adds	r2, #32
    c2dc:	7863      	ldrb	r3, [r4, #1]
    c2de:	4688      	mov	r8, r1
    c2e0:	2000      	movs	r0, #0
    c2e2:	2400      	movs	r4, #0
    c2e4:	4694      	mov	ip, r2
    c2e6:	4659      	mov	r1, fp
    c2e8:	3101      	adds	r1, #1
    c2ea:	001a      	movs	r2, r3
    c2ec:	3a20      	subs	r2, #32
    c2ee:	2a58      	cmp	r2, #88	; 0x58
    c2f0:	d900      	bls.n	c2f4 <_svfprintf_r+0xd4>
    c2f2:	e2fd      	b.n	c8f0 <_svfprintf_r+0x6d0>
    c2f4:	4dd7      	ldr	r5, [pc, #860]	; (c654 <_svfprintf_r+0x434>)
    c2f6:	0092      	lsls	r2, r2, #2
    c2f8:	58aa      	ldr	r2, [r5, r2]
    c2fa:	4697      	mov	pc, r2
    c2fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c2fe:	920f      	str	r2, [sp, #60]	; 0x3c
    c300:	425b      	negs	r3, r3
    c302:	930b      	str	r3, [sp, #44]	; 0x2c
    c304:	2304      	movs	r3, #4
    c306:	431c      	orrs	r4, r3
    c308:	780b      	ldrb	r3, [r1, #0]
    c30a:	e7ed      	b.n	c2e8 <_svfprintf_r+0xc8>
    c30c:	003a      	movs	r2, r7
    c30e:	9906      	ldr	r1, [sp, #24]
    c310:	9809      	ldr	r0, [sp, #36]	; 0x24
    c312:	f007 fd37 	bl	13d84 <__ssprint_r>
    c316:	2800      	cmp	r0, #0
    c318:	d109      	bne.n	c32e <_svfprintf_r+0x10e>
    c31a:	ae32      	add	r6, sp, #200	; 0xc8
    c31c:	e7c8      	b.n	c2b0 <_svfprintf_r+0x90>
    c31e:	68bb      	ldr	r3, [r7, #8]
    c320:	2b00      	cmp	r3, #0
    c322:	d004      	beq.n	c32e <_svfprintf_r+0x10e>
    c324:	003a      	movs	r2, r7
    c326:	9906      	ldr	r1, [sp, #24]
    c328:	9809      	ldr	r0, [sp, #36]	; 0x24
    c32a:	f007 fd2b 	bl	13d84 <__ssprint_r>
    c32e:	9b06      	ldr	r3, [sp, #24]
    c330:	899b      	ldrh	r3, [r3, #12]
    c332:	065b      	lsls	r3, r3, #25
    c334:	d501      	bpl.n	c33a <_svfprintf_r+0x11a>
    c336:	f001 f8ce 	bl	d4d6 <_svfprintf_r+0x12b6>
    c33a:	980a      	ldr	r0, [sp, #40]	; 0x28
    c33c:	b043      	add	sp, #268	; 0x10c
    c33e:	bc3c      	pop	{r2, r3, r4, r5}
    c340:	4690      	mov	r8, r2
    c342:	4699      	mov	r9, r3
    c344:	46a2      	mov	sl, r4
    c346:	46ab      	mov	fp, r5
    c348:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34a:	2201      	movs	r2, #1
    c34c:	780b      	ldrb	r3, [r1, #0]
    c34e:	4690      	mov	r8, r2
    c350:	202b      	movs	r0, #43	; 0x2b
    c352:	e7c9      	b.n	c2e8 <_svfprintf_r+0xc8>
    c354:	1c4b      	adds	r3, r1, #1
    c356:	469b      	mov	fp, r3
    c358:	780b      	ldrb	r3, [r1, #0]
    c35a:	2b2a      	cmp	r3, #42	; 0x2a
    c35c:	d101      	bne.n	c362 <_svfprintf_r+0x142>
    c35e:	f001 fa1b 	bl	d798 <_svfprintf_r+0x1578>
    c362:	001a      	movs	r2, r3
    c364:	2100      	movs	r1, #0
    c366:	3a30      	subs	r2, #48	; 0x30
    c368:	468a      	mov	sl, r1
    c36a:	4659      	mov	r1, fp
    c36c:	2a09      	cmp	r2, #9
    c36e:	d8bc      	bhi.n	c2ea <_svfprintf_r+0xca>
    c370:	0003      	movs	r3, r0
    c372:	0011      	movs	r1, r2
    c374:	4650      	mov	r0, sl
    c376:	465a      	mov	r2, fp
    c378:	469a      	mov	sl, r3
    c37a:	46a3      	mov	fp, r4
    c37c:	0083      	lsls	r3, r0, #2
    c37e:	181b      	adds	r3, r3, r0
    c380:	7814      	ldrb	r4, [r2, #0]
    c382:	005b      	lsls	r3, r3, #1
    c384:	1858      	adds	r0, r3, r1
    c386:	0021      	movs	r1, r4
    c388:	1c53      	adds	r3, r2, #1
    c38a:	3930      	subs	r1, #48	; 0x30
    c38c:	001a      	movs	r2, r3
    c38e:	2909      	cmp	r1, #9
    c390:	d9f4      	bls.n	c37c <_svfprintf_r+0x15c>
    c392:	4652      	mov	r2, sl
    c394:	0019      	movs	r1, r3
    c396:	4682      	mov	sl, r0
    c398:	0023      	movs	r3, r4
    c39a:	0010      	movs	r0, r2
    c39c:	465c      	mov	r4, fp
    c39e:	e7a4      	b.n	c2ea <_svfprintf_r+0xca>
    c3a0:	2380      	movs	r3, #128	; 0x80
    c3a2:	431c      	orrs	r4, r3
    c3a4:	780b      	ldrb	r3, [r1, #0]
    c3a6:	e79f      	b.n	c2e8 <_svfprintf_r+0xc8>
    c3a8:	468b      	mov	fp, r1
    c3aa:	4641      	mov	r1, r8
    c3ac:	9312      	str	r3, [sp, #72]	; 0x48
    c3ae:	2900      	cmp	r1, #0
    c3b0:	d001      	beq.n	c3b6 <_svfprintf_r+0x196>
    c3b2:	f001 fa1f 	bl	d7f4 <_svfprintf_r+0x15d4>
    c3b6:	2310      	movs	r3, #16
    c3b8:	431c      	orrs	r4, r3
    c3ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c3bc:	06a3      	lsls	r3, r4, #26
    c3be:	d501      	bpl.n	c3c4 <_svfprintf_r+0x1a4>
    c3c0:	f000 fe88 	bl	d0d4 <_svfprintf_r+0xeb4>
    c3c4:	06e3      	lsls	r3, r4, #27
    c3c6:	d501      	bpl.n	c3cc <_svfprintf_r+0x1ac>
    c3c8:	f000 fd80 	bl	cecc <_svfprintf_r+0xcac>
    c3cc:	0663      	lsls	r3, r4, #25
    c3ce:	d401      	bmi.n	c3d4 <_svfprintf_r+0x1b4>
    c3d0:	f000 fd7c 	bl	cecc <_svfprintf_r+0xcac>
    c3d4:	2100      	movs	r1, #0
    c3d6:	5e53      	ldrsh	r3, [r2, r1]
    c3d8:	930c      	str	r3, [sp, #48]	; 0x30
    c3da:	3204      	adds	r2, #4
    c3dc:	17db      	asrs	r3, r3, #31
    c3de:	930d      	str	r3, [sp, #52]	; 0x34
    c3e0:	920f      	str	r2, [sp, #60]	; 0x3c
    c3e2:	d501      	bpl.n	c3e8 <_svfprintf_r+0x1c8>
    c3e4:	f000 fe86 	bl	d0f4 <_svfprintf_r+0xed4>
    c3e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    c3ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c3ec:	0008      	movs	r0, r1
    c3ee:	ab16      	add	r3, sp, #88	; 0x58
    c3f0:	7fdb      	ldrb	r3, [r3, #31]
    c3f2:	4310      	orrs	r0, r2
    c3f4:	4698      	mov	r8, r3
    c3f6:	0002      	movs	r2, r0
    c3f8:	2301      	movs	r3, #1
    c3fa:	4651      	mov	r1, sl
    c3fc:	3101      	adds	r1, #1
    c3fe:	d100      	bne.n	c402 <_svfprintf_r+0x1e2>
    c400:	e0ff      	b.n	c602 <_svfprintf_r+0x3e2>
    c402:	2180      	movs	r1, #128	; 0x80
    c404:	0020      	movs	r0, r4
    c406:	4388      	bics	r0, r1
    c408:	9008      	str	r0, [sp, #32]
    c40a:	2a00      	cmp	r2, #0
    c40c:	d000      	beq.n	c410 <_svfprintf_r+0x1f0>
    c40e:	e0fc      	b.n	c60a <_svfprintf_r+0x3ea>
    c410:	4652      	mov	r2, sl
    c412:	2a00      	cmp	r2, #0
    c414:	d001      	beq.n	c41a <_svfprintf_r+0x1fa>
    c416:	f000 fc2c 	bl	cc72 <_svfprintf_r+0xa52>
    c41a:	2b00      	cmp	r3, #0
    c41c:	d001      	beq.n	c422 <_svfprintf_r+0x202>
    c41e:	f000 fd04 	bl	ce2a <_svfprintf_r+0xc0a>
    c422:	2001      	movs	r0, #1
    c424:	ab32      	add	r3, sp, #200	; 0xc8
    c426:	4020      	ands	r0, r4
    c428:	900e      	str	r0, [sp, #56]	; 0x38
    c42a:	9311      	str	r3, [sp, #68]	; 0x44
    c42c:	d008      	beq.n	c440 <_svfprintf_r+0x220>
    c42e:	2327      	movs	r3, #39	; 0x27
    c430:	2130      	movs	r1, #48	; 0x30
    c432:	aa28      	add	r2, sp, #160	; 0xa0
    c434:	54d1      	strb	r1, [r2, r3]
    c436:	aa16      	add	r2, sp, #88	; 0x58
    c438:	4694      	mov	ip, r2
    c43a:	3348      	adds	r3, #72	; 0x48
    c43c:	4463      	add	r3, ip
    c43e:	9311      	str	r3, [sp, #68]	; 0x44
    c440:	4653      	mov	r3, sl
    c442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c444:	9307      	str	r3, [sp, #28]
    c446:	4592      	cmp	sl, r2
    c448:	da00      	bge.n	c44c <_svfprintf_r+0x22c>
    c44a:	9207      	str	r2, [sp, #28]
    c44c:	2300      	movs	r3, #0
    c44e:	9313      	str	r3, [sp, #76]	; 0x4c
    c450:	4643      	mov	r3, r8
    c452:	2b00      	cmp	r3, #0
    c454:	d002      	beq.n	c45c <_svfprintf_r+0x23c>
    c456:	9b07      	ldr	r3, [sp, #28]
    c458:	3301      	adds	r3, #1
    c45a:	9307      	str	r3, [sp, #28]
    c45c:	2302      	movs	r3, #2
    c45e:	9a08      	ldr	r2, [sp, #32]
    c460:	401a      	ands	r2, r3
    c462:	4691      	mov	r9, r2
    c464:	d002      	beq.n	c46c <_svfprintf_r+0x24c>
    c466:	9b07      	ldr	r3, [sp, #28]
    c468:	3302      	adds	r3, #2
    c46a:	9307      	str	r3, [sp, #28]
    c46c:	2384      	movs	r3, #132	; 0x84
    c46e:	9a08      	ldr	r2, [sp, #32]
    c470:	401a      	ands	r2, r3
    c472:	9210      	str	r2, [sp, #64]	; 0x40
    c474:	d000      	beq.n	c478 <_svfprintf_r+0x258>
    c476:	e24d      	b.n	c914 <_svfprintf_r+0x6f4>
    c478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c47a:	9a07      	ldr	r2, [sp, #28]
    c47c:	1a9c      	subs	r4, r3, r2
    c47e:	2c00      	cmp	r4, #0
    c480:	dc00      	bgt.n	c484 <_svfprintf_r+0x264>
    c482:	e247      	b.n	c914 <_svfprintf_r+0x6f4>
    c484:	4974      	ldr	r1, [pc, #464]	; (c658 <_svfprintf_r+0x438>)
    c486:	68ba      	ldr	r2, [r7, #8]
    c488:	687b      	ldr	r3, [r7, #4]
    c48a:	4688      	mov	r8, r1
    c48c:	2c10      	cmp	r4, #16
    c48e:	dd1f      	ble.n	c4d0 <_svfprintf_r+0x2b0>
    c490:	0031      	movs	r1, r6
    c492:	2510      	movs	r5, #16
    c494:	4646      	mov	r6, r8
    c496:	e003      	b.n	c4a0 <_svfprintf_r+0x280>
    c498:	3c10      	subs	r4, #16
    c49a:	3108      	adds	r1, #8
    c49c:	2c10      	cmp	r4, #16
    c49e:	dd15      	ble.n	c4cc <_svfprintf_r+0x2ac>
    c4a0:	3210      	adds	r2, #16
    c4a2:	3301      	adds	r3, #1
    c4a4:	600e      	str	r6, [r1, #0]
    c4a6:	604d      	str	r5, [r1, #4]
    c4a8:	60ba      	str	r2, [r7, #8]
    c4aa:	607b      	str	r3, [r7, #4]
    c4ac:	2b07      	cmp	r3, #7
    c4ae:	ddf3      	ble.n	c498 <_svfprintf_r+0x278>
    c4b0:	003a      	movs	r2, r7
    c4b2:	9906      	ldr	r1, [sp, #24]
    c4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    c4b6:	f007 fc65 	bl	13d84 <__ssprint_r>
    c4ba:	2800      	cmp	r0, #0
    c4bc:	d000      	beq.n	c4c0 <_svfprintf_r+0x2a0>
    c4be:	e736      	b.n	c32e <_svfprintf_r+0x10e>
    c4c0:	3c10      	subs	r4, #16
    c4c2:	68ba      	ldr	r2, [r7, #8]
    c4c4:	687b      	ldr	r3, [r7, #4]
    c4c6:	a932      	add	r1, sp, #200	; 0xc8
    c4c8:	2c10      	cmp	r4, #16
    c4ca:	dce9      	bgt.n	c4a0 <_svfprintf_r+0x280>
    c4cc:	46b0      	mov	r8, r6
    c4ce:	000e      	movs	r6, r1
    c4d0:	4641      	mov	r1, r8
    c4d2:	6074      	str	r4, [r6, #4]
    c4d4:	3301      	adds	r3, #1
    c4d6:	18a4      	adds	r4, r4, r2
    c4d8:	6031      	str	r1, [r6, #0]
    c4da:	60bc      	str	r4, [r7, #8]
    c4dc:	607b      	str	r3, [r7, #4]
    c4de:	2b07      	cmp	r3, #7
    c4e0:	dd01      	ble.n	c4e6 <_svfprintf_r+0x2c6>
    c4e2:	f000 fca8 	bl	ce36 <_svfprintf_r+0xc16>
    c4e6:	ab16      	add	r3, sp, #88	; 0x58
    c4e8:	7fdb      	ldrb	r3, [r3, #31]
    c4ea:	3608      	adds	r6, #8
    c4ec:	4698      	mov	r8, r3
    c4ee:	e212      	b.n	c916 <_svfprintf_r+0x6f6>
    c4f0:	468b      	mov	fp, r1
    c4f2:	4641      	mov	r1, r8
    c4f4:	9312      	str	r3, [sp, #72]	; 0x48
    c4f6:	2900      	cmp	r1, #0
    c4f8:	d001      	beq.n	c4fe <_svfprintf_r+0x2de>
    c4fa:	f001 f977 	bl	d7ec <_svfprintf_r+0x15cc>
    c4fe:	2207      	movs	r2, #7
    c500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c502:	3307      	adds	r3, #7
    c504:	4393      	bics	r3, r2
    c506:	3201      	adds	r2, #1
    c508:	4694      	mov	ip, r2
    c50a:	449c      	add	ip, r3
    c50c:	4662      	mov	r2, ip
    c50e:	920f      	str	r2, [sp, #60]	; 0x3c
    c510:	681a      	ldr	r2, [r3, #0]
    c512:	9216      	str	r2, [sp, #88]	; 0x58
    c514:	685b      	ldr	r3, [r3, #4]
    c516:	2201      	movs	r2, #1
    c518:	9315      	str	r3, [sp, #84]	; 0x54
    c51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    c51c:	9d16      	ldr	r5, [sp, #88]	; 0x58
    c51e:	005b      	lsls	r3, r3, #1
    c520:	085b      	lsrs	r3, r3, #1
    c522:	4698      	mov	r8, r3
    c524:	4252      	negs	r2, r2
    c526:	4b4d      	ldr	r3, [pc, #308]	; (c65c <_svfprintf_r+0x43c>)
    c528:	0028      	movs	r0, r5
    c52a:	4641      	mov	r1, r8
    c52c:	f008 ff04 	bl	15338 <__aeabi_dcmpun>
    c530:	2800      	cmp	r0, #0
    c532:	d001      	beq.n	c538 <_svfprintf_r+0x318>
    c534:	f000 fdfd 	bl	d132 <_svfprintf_r+0xf12>
    c538:	2201      	movs	r2, #1
    c53a:	4b48      	ldr	r3, [pc, #288]	; (c65c <_svfprintf_r+0x43c>)
    c53c:	4252      	negs	r2, r2
    c53e:	0028      	movs	r0, r5
    c540:	4641      	mov	r1, r8
    c542:	f7fe fbe9 	bl	ad18 <__aeabi_dcmple>
    c546:	2800      	cmp	r0, #0
    c548:	d001      	beq.n	c54e <_svfprintf_r+0x32e>
    c54a:	f000 fdf2 	bl	d132 <_svfprintf_r+0xf12>
    c54e:	2200      	movs	r2, #0
    c550:	2300      	movs	r3, #0
    c552:	9816      	ldr	r0, [sp, #88]	; 0x58
    c554:	9915      	ldr	r1, [sp, #84]	; 0x54
    c556:	f7fe fbd5 	bl	ad04 <__aeabi_dcmplt>
    c55a:	2800      	cmp	r0, #0
    c55c:	d001      	beq.n	c562 <_svfprintf_r+0x342>
    c55e:	f001 f822 	bl	d5a6 <_svfprintf_r+0x1386>
    c562:	ab16      	add	r3, sp, #88	; 0x58
    c564:	7fdb      	ldrb	r3, [r3, #31]
    c566:	4698      	mov	r8, r3
    c568:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c56a:	2b47      	cmp	r3, #71	; 0x47
    c56c:	dd01      	ble.n	c572 <_svfprintf_r+0x352>
    c56e:	f000 fec7 	bl	d300 <_svfprintf_r+0x10e0>
    c572:	4b3b      	ldr	r3, [pc, #236]	; (c660 <_svfprintf_r+0x440>)
    c574:	9311      	str	r3, [sp, #68]	; 0x44
    c576:	2380      	movs	r3, #128	; 0x80
    c578:	439c      	bics	r4, r3
    c57a:	3b7d      	subs	r3, #125	; 0x7d
    c57c:	9307      	str	r3, [sp, #28]
    c57e:	930e      	str	r3, [sp, #56]	; 0x38
    c580:	2300      	movs	r3, #0
    c582:	9408      	str	r4, [sp, #32]
    c584:	469a      	mov	sl, r3
    c586:	9313      	str	r3, [sp, #76]	; 0x4c
    c588:	e762      	b.n	c450 <_svfprintf_r+0x230>
    c58a:	2200      	movs	r2, #0
    c58c:	3b30      	subs	r3, #48	; 0x30
    c58e:	0015      	movs	r5, r2
    c590:	001a      	movs	r2, r3
    c592:	0003      	movs	r3, r0
    c594:	9407      	str	r4, [sp, #28]
    c596:	0008      	movs	r0, r1
    c598:	002c      	movs	r4, r5
    c59a:	469b      	mov	fp, r3
    c59c:	00a3      	lsls	r3, r4, #2
    c59e:	191c      	adds	r4, r3, r4
    c5a0:	7803      	ldrb	r3, [r0, #0]
    c5a2:	0064      	lsls	r4, r4, #1
    c5a4:	1914      	adds	r4, r2, r4
    c5a6:	001a      	movs	r2, r3
    c5a8:	3101      	adds	r1, #1
    c5aa:	3a30      	subs	r2, #48	; 0x30
    c5ac:	0008      	movs	r0, r1
    c5ae:	2a09      	cmp	r2, #9
    c5b0:	d9f4      	bls.n	c59c <_svfprintf_r+0x37c>
    c5b2:	940b      	str	r4, [sp, #44]	; 0x2c
    c5b4:	4658      	mov	r0, fp
    c5b6:	9c07      	ldr	r4, [sp, #28]
    c5b8:	e697      	b.n	c2ea <_svfprintf_r+0xca>
    c5ba:	2308      	movs	r3, #8
    c5bc:	431c      	orrs	r4, r3
    c5be:	780b      	ldrb	r3, [r1, #0]
    c5c0:	e692      	b.n	c2e8 <_svfprintf_r+0xc8>
    c5c2:	9312      	str	r3, [sp, #72]	; 0x48
    c5c4:	2310      	movs	r3, #16
    c5c6:	431c      	orrs	r4, r3
    c5c8:	468b      	mov	fp, r1
    c5ca:	06a3      	lsls	r3, r4, #26
    c5cc:	d500      	bpl.n	c5d0 <_svfprintf_r+0x3b0>
    c5ce:	e17b      	b.n	c8c8 <_svfprintf_r+0x6a8>
    c5d0:	06e3      	lsls	r3, r4, #27
    c5d2:	d501      	bpl.n	c5d8 <_svfprintf_r+0x3b8>
    c5d4:	f000 fc7e 	bl	ced4 <_svfprintf_r+0xcb4>
    c5d8:	0663      	lsls	r3, r4, #25
    c5da:	d401      	bmi.n	c5e0 <_svfprintf_r+0x3c0>
    c5dc:	f000 fc7a 	bl	ced4 <_svfprintf_r+0xcb4>
    c5e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c5e2:	881a      	ldrh	r2, [r3, #0]
    c5e4:	920c      	str	r2, [sp, #48]	; 0x30
    c5e6:	2200      	movs	r2, #0
    c5e8:	3304      	adds	r3, #4
    c5ea:	930f      	str	r3, [sp, #60]	; 0x3c
    c5ec:	2300      	movs	r3, #0
    c5ee:	920d      	str	r2, [sp, #52]	; 0x34
    c5f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c5f2:	2100      	movs	r1, #0
    c5f4:	a816      	add	r0, sp, #88	; 0x58
    c5f6:	77c1      	strb	r1, [r0, #31]
    c5f8:	4688      	mov	r8, r1
    c5fa:	4651      	mov	r1, sl
    c5fc:	3101      	adds	r1, #1
    c5fe:	d000      	beq.n	c602 <_svfprintf_r+0x3e2>
    c600:	e6ff      	b.n	c402 <_svfprintf_r+0x1e2>
    c602:	2a00      	cmp	r2, #0
    c604:	d100      	bne.n	c608 <_svfprintf_r+0x3e8>
    c606:	e335      	b.n	cc74 <_svfprintf_r+0xa54>
    c608:	9408      	str	r4, [sp, #32]
    c60a:	2b01      	cmp	r3, #1
    c60c:	d100      	bne.n	c610 <_svfprintf_r+0x3f0>
    c60e:	e3e5      	b.n	cddc <_svfprintf_r+0xbbc>
    c610:	2b02      	cmp	r3, #2
    c612:	d000      	beq.n	c616 <_svfprintf_r+0x3f6>
    c614:	e362      	b.n	ccdc <_svfprintf_r+0xabc>
    c616:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    c618:	200f      	movs	r0, #15
    c61a:	46a1      	mov	r9, r4
    c61c:	46b4      	mov	ip, r6
    c61e:	ab32      	add	r3, sp, #200	; 0xc8
    c620:	0019      	movs	r1, r3
    c622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c626:	0004      	movs	r4, r0
    c628:	464d      	mov	r5, r9
    c62a:	4014      	ands	r4, r2
    c62c:	5d2c      	ldrb	r4, [r5, r4]
    c62e:	071e      	lsls	r6, r3, #28
    c630:	0915      	lsrs	r5, r2, #4
    c632:	3901      	subs	r1, #1
    c634:	432e      	orrs	r6, r5
    c636:	700c      	strb	r4, [r1, #0]
    c638:	091c      	lsrs	r4, r3, #4
    c63a:	0023      	movs	r3, r4
    c63c:	0034      	movs	r4, r6
    c63e:	0032      	movs	r2, r6
    c640:	431c      	orrs	r4, r3
    c642:	d1f0      	bne.n	c626 <_svfprintf_r+0x406>
    c644:	920c      	str	r2, [sp, #48]	; 0x30
    c646:	930d      	str	r3, [sp, #52]	; 0x34
    c648:	ab32      	add	r3, sp, #200	; 0xc8
    c64a:	1a5b      	subs	r3, r3, r1
    c64c:	9111      	str	r1, [sp, #68]	; 0x44
    c64e:	4666      	mov	r6, ip
    c650:	930e      	str	r3, [sp, #56]	; 0x38
    c652:	e6f5      	b.n	c440 <_svfprintf_r+0x220>
    c654:	00018b3c 	.word	0x00018b3c
    c658:	00018ce4 	.word	0x00018ce4
    c65c:	7fefffff 	.word	0x7fefffff
    c660:	00018ca0 	.word	0x00018ca0
    c664:	9312      	str	r3, [sp, #72]	; 0x48
    c666:	2310      	movs	r3, #16
    c668:	431c      	orrs	r4, r3
    c66a:	468b      	mov	fp, r1
    c66c:	06a3      	lsls	r3, r4, #26
    c66e:	d500      	bpl.n	c672 <_svfprintf_r+0x452>
    c670:	e111      	b.n	c896 <_svfprintf_r+0x676>
    c672:	06e3      	lsls	r3, r4, #27
    c674:	d501      	bpl.n	c67a <_svfprintf_r+0x45a>
    c676:	f000 fc31 	bl	cedc <_svfprintf_r+0xcbc>
    c67a:	0663      	lsls	r3, r4, #25
    c67c:	d401      	bmi.n	c682 <_svfprintf_r+0x462>
    c67e:	f000 fc2d 	bl	cedc <_svfprintf_r+0xcbc>
    c682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c684:	881a      	ldrh	r2, [r3, #0]
    c686:	920c      	str	r2, [sp, #48]	; 0x30
    c688:	2200      	movs	r2, #0
    c68a:	3304      	adds	r3, #4
    c68c:	920d      	str	r2, [sp, #52]	; 0x34
    c68e:	930f      	str	r3, [sp, #60]	; 0x3c
    c690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c692:	2301      	movs	r3, #1
    c694:	e7ad      	b.n	c5f2 <_svfprintf_r+0x3d2>
    c696:	468b      	mov	fp, r1
    c698:	4641      	mov	r1, r8
    c69a:	9312      	str	r3, [sp, #72]	; 0x48
    c69c:	2900      	cmp	r1, #0
    c69e:	d001      	beq.n	c6a4 <_svfprintf_r+0x484>
    c6a0:	f001 f890 	bl	d7c4 <_svfprintf_r+0x15a4>
    c6a4:	4bb8      	ldr	r3, [pc, #736]	; (c988 <_svfprintf_r+0x768>)
    c6a6:	9317      	str	r3, [sp, #92]	; 0x5c
    c6a8:	06a3      	lsls	r3, r4, #26
    c6aa:	d500      	bpl.n	c6ae <_svfprintf_r+0x48e>
    c6ac:	e0ab      	b.n	c806 <_svfprintf_r+0x5e6>
    c6ae:	06e3      	lsls	r3, r4, #27
    c6b0:	d501      	bpl.n	c6b6 <_svfprintf_r+0x496>
    c6b2:	f000 fc07 	bl	cec4 <_svfprintf_r+0xca4>
    c6b6:	0663      	lsls	r3, r4, #25
    c6b8:	d401      	bmi.n	c6be <_svfprintf_r+0x49e>
    c6ba:	f000 fc03 	bl	cec4 <_svfprintf_r+0xca4>
    c6be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c6c0:	881a      	ldrh	r2, [r3, #0]
    c6c2:	920c      	str	r2, [sp, #48]	; 0x30
    c6c4:	2200      	movs	r2, #0
    c6c6:	3304      	adds	r3, #4
    c6c8:	920d      	str	r2, [sp, #52]	; 0x34
    c6ca:	930f      	str	r3, [sp, #60]	; 0x3c
    c6cc:	07e3      	lsls	r3, r4, #31
    c6ce:	d400      	bmi.n	c6d2 <_svfprintf_r+0x4b2>
    c6d0:	e0a9      	b.n	c826 <_svfprintf_r+0x606>
    c6d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    c6d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c6d6:	000b      	movs	r3, r1
    c6d8:	4313      	orrs	r3, r2
    c6da:	001a      	movs	r2, r3
    c6dc:	2302      	movs	r3, #2
    c6de:	2a00      	cmp	r2, #0
    c6e0:	d100      	bne.n	c6e4 <_svfprintf_r+0x4c4>
    c6e2:	e786      	b.n	c5f2 <_svfprintf_r+0x3d2>
    c6e4:	2030      	movs	r0, #48	; 0x30
    c6e6:	a91e      	add	r1, sp, #120	; 0x78
    c6e8:	7008      	strb	r0, [r1, #0]
    c6ea:	2548      	movs	r5, #72	; 0x48
    c6ec:	4668      	mov	r0, sp
    c6ee:	1940      	adds	r0, r0, r5
    c6f0:	7800      	ldrb	r0, [r0, #0]
    c6f2:	431c      	orrs	r4, r3
    c6f4:	7048      	strb	r0, [r1, #1]
    c6f6:	e77c      	b.n	c5f2 <_svfprintf_r+0x3d2>
    c6f8:	468b      	mov	fp, r1
    c6fa:	4641      	mov	r1, r8
    c6fc:	2900      	cmp	r1, #0
    c6fe:	d001      	beq.n	c704 <_svfprintf_r+0x4e4>
    c700:	f001 f883 	bl	d80a <_svfprintf_r+0x15ea>
    c704:	06a3      	lsls	r3, r4, #26
    c706:	d501      	bpl.n	c70c <_svfprintf_r+0x4ec>
    c708:	f000 fde9 	bl	d2de <_svfprintf_r+0x10be>
    c70c:	06e3      	lsls	r3, r4, #27
    c70e:	d501      	bpl.n	c714 <_svfprintf_r+0x4f4>
    c710:	f000 fd9b 	bl	d24a <_svfprintf_r+0x102a>
    c714:	0663      	lsls	r3, r4, #25
    c716:	d401      	bmi.n	c71c <_svfprintf_r+0x4fc>
    c718:	f000 fd97 	bl	d24a <_svfprintf_r+0x102a>
    c71c:	4669      	mov	r1, sp
    c71e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c720:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    c722:	681a      	ldr	r2, [r3, #0]
    c724:	3304      	adds	r3, #4
    c726:	9207      	str	r2, [sp, #28]
    c728:	8011      	strh	r1, [r2, #0]
    c72a:	930f      	str	r3, [sp, #60]	; 0x3c
    c72c:	e5a3      	b.n	c276 <_svfprintf_r+0x56>
    c72e:	464b      	mov	r3, r9
    c730:	431c      	orrs	r4, r3
    c732:	780b      	ldrb	r3, [r1, #0]
    c734:	e5d8      	b.n	c2e8 <_svfprintf_r+0xc8>
    c736:	9312      	str	r3, [sp, #72]	; 0x48
    c738:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c73a:	468b      	mov	fp, r1
    c73c:	1d1d      	adds	r5, r3, #4
    c73e:	681b      	ldr	r3, [r3, #0]
    c740:	a916      	add	r1, sp, #88	; 0x58
    c742:	001a      	movs	r2, r3
    c744:	9311      	str	r3, [sp, #68]	; 0x44
    c746:	2300      	movs	r3, #0
    c748:	77cb      	strb	r3, [r1, #31]
    c74a:	2a00      	cmp	r2, #0
    c74c:	d101      	bne.n	c752 <_svfprintf_r+0x532>
    c74e:	f000 fefb 	bl	d548 <_svfprintf_r+0x1328>
    c752:	4653      	mov	r3, sl
    c754:	3301      	adds	r3, #1
    c756:	d101      	bne.n	c75c <_svfprintf_r+0x53c>
    c758:	f000 fe38 	bl	d3cc <_svfprintf_r+0x11ac>
    c75c:	4652      	mov	r2, sl
    c75e:	2100      	movs	r1, #0
    c760:	9811      	ldr	r0, [sp, #68]	; 0x44
    c762:	f005 f9b5 	bl	11ad0 <memchr>
    c766:	2800      	cmp	r0, #0
    c768:	d101      	bne.n	c76e <_svfprintf_r+0x54e>
    c76a:	f000 ff54 	bl	d616 <_svfprintf_r+0x13f6>
    c76e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c770:	1ac3      	subs	r3, r0, r3
    c772:	001a      	movs	r2, r3
    c774:	930e      	str	r3, [sp, #56]	; 0x38
    c776:	43db      	mvns	r3, r3
    c778:	17db      	asrs	r3, r3, #31
    c77a:	401a      	ands	r2, r3
    c77c:	ab16      	add	r3, sp, #88	; 0x58
    c77e:	7fdb      	ldrb	r3, [r3, #31]
    c780:	9207      	str	r2, [sp, #28]
    c782:	4698      	mov	r8, r3
    c784:	2300      	movs	r3, #0
    c786:	950f      	str	r5, [sp, #60]	; 0x3c
    c788:	9408      	str	r4, [sp, #32]
    c78a:	469a      	mov	sl, r3
    c78c:	9313      	str	r3, [sp, #76]	; 0x4c
    c78e:	e65f      	b.n	c450 <_svfprintf_r+0x230>
    c790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    c792:	9312      	str	r3, [sp, #72]	; 0x48
    c794:	6813      	ldr	r3, [r2, #0]
    c796:	ad28      	add	r5, sp, #160	; 0xa0
    c798:	9307      	str	r3, [sp, #28]
    c79a:	466b      	mov	r3, sp
    c79c:	7f1b      	ldrb	r3, [r3, #28]
    c79e:	468b      	mov	fp, r1
    c7a0:	702b      	strb	r3, [r5, #0]
    c7a2:	2300      	movs	r3, #0
    c7a4:	a916      	add	r1, sp, #88	; 0x58
    c7a6:	77cb      	strb	r3, [r1, #31]
    c7a8:	0013      	movs	r3, r2
    c7aa:	3304      	adds	r3, #4
    c7ac:	930f      	str	r3, [sp, #60]	; 0x3c
    c7ae:	2300      	movs	r3, #0
    c7b0:	9408      	str	r4, [sp, #32]
    c7b2:	4698      	mov	r8, r3
    c7b4:	3301      	adds	r3, #1
    c7b6:	9307      	str	r3, [sp, #28]
    c7b8:	930e      	str	r3, [sp, #56]	; 0x38
    c7ba:	2300      	movs	r3, #0
    c7bc:	9511      	str	r5, [sp, #68]	; 0x44
    c7be:	469a      	mov	sl, r3
    c7c0:	9313      	str	r3, [sp, #76]	; 0x4c
    c7c2:	e64b      	b.n	c45c <_svfprintf_r+0x23c>
    c7c4:	468b      	mov	fp, r1
    c7c6:	4641      	mov	r1, r8
    c7c8:	9312      	str	r3, [sp, #72]	; 0x48
    c7ca:	2900      	cmp	r1, #0
    c7cc:	d100      	bne.n	c7d0 <_svfprintf_r+0x5b0>
    c7ce:	e5f4      	b.n	c3ba <_svfprintf_r+0x19a>
    c7d0:	ab16      	add	r3, sp, #88	; 0x58
    c7d2:	77d8      	strb	r0, [r3, #31]
    c7d4:	e5f1      	b.n	c3ba <_svfprintf_r+0x19a>
    c7d6:	4663      	mov	r3, ip
    c7d8:	431c      	orrs	r4, r3
    c7da:	780b      	ldrb	r3, [r1, #0]
    c7dc:	e584      	b.n	c2e8 <_svfprintf_r+0xc8>
    c7de:	780b      	ldrb	r3, [r1, #0]
    c7e0:	2b6c      	cmp	r3, #108	; 0x6c
    c7e2:	d101      	bne.n	c7e8 <_svfprintf_r+0x5c8>
    c7e4:	f000 fd86 	bl	d2f4 <_svfprintf_r+0x10d4>
    c7e8:	2210      	movs	r2, #16
    c7ea:	4314      	orrs	r4, r2
    c7ec:	e57c      	b.n	c2e8 <_svfprintf_r+0xc8>
    c7ee:	468b      	mov	fp, r1
    c7f0:	4641      	mov	r1, r8
    c7f2:	9312      	str	r3, [sp, #72]	; 0x48
    c7f4:	2900      	cmp	r1, #0
    c7f6:	d001      	beq.n	c7fc <_svfprintf_r+0x5dc>
    c7f8:	f000 ffe8 	bl	d7cc <_svfprintf_r+0x15ac>
    c7fc:	4b63      	ldr	r3, [pc, #396]	; (c98c <_svfprintf_r+0x76c>)
    c7fe:	9317      	str	r3, [sp, #92]	; 0x5c
    c800:	06a3      	lsls	r3, r4, #26
    c802:	d400      	bmi.n	c806 <_svfprintf_r+0x5e6>
    c804:	e753      	b.n	c6ae <_svfprintf_r+0x48e>
    c806:	2207      	movs	r2, #7
    c808:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c80a:	3307      	adds	r3, #7
    c80c:	4393      	bics	r3, r2
    c80e:	3201      	adds	r2, #1
    c810:	4694      	mov	ip, r2
    c812:	449c      	add	ip, r3
    c814:	4662      	mov	r2, ip
    c816:	920f      	str	r2, [sp, #60]	; 0x3c
    c818:	681a      	ldr	r2, [r3, #0]
    c81a:	685b      	ldr	r3, [r3, #4]
    c81c:	920c      	str	r2, [sp, #48]	; 0x30
    c81e:	930d      	str	r3, [sp, #52]	; 0x34
    c820:	07e3      	lsls	r3, r4, #31
    c822:	d500      	bpl.n	c826 <_svfprintf_r+0x606>
    c824:	e755      	b.n	c6d2 <_svfprintf_r+0x4b2>
    c826:	990c      	ldr	r1, [sp, #48]	; 0x30
    c828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c82a:	0008      	movs	r0, r1
    c82c:	4310      	orrs	r0, r2
    c82e:	2302      	movs	r3, #2
    c830:	0002      	movs	r2, r0
    c832:	e6de      	b.n	c5f2 <_svfprintf_r+0x3d2>
    c834:	468b      	mov	fp, r1
    c836:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c838:	2230      	movs	r2, #48	; 0x30
    c83a:	680b      	ldr	r3, [r1, #0]
    c83c:	930c      	str	r3, [sp, #48]	; 0x30
    c83e:	2300      	movs	r3, #0
    c840:	930d      	str	r3, [sp, #52]	; 0x34
    c842:	3302      	adds	r3, #2
    c844:	431c      	orrs	r4, r3
    c846:	ab1e      	add	r3, sp, #120	; 0x78
    c848:	701a      	strb	r2, [r3, #0]
    c84a:	3248      	adds	r2, #72	; 0x48
    c84c:	705a      	strb	r2, [r3, #1]
    c84e:	000b      	movs	r3, r1
    c850:	3304      	adds	r3, #4
    c852:	930f      	str	r3, [sp, #60]	; 0x3c
    c854:	4b4d      	ldr	r3, [pc, #308]	; (c98c <_svfprintf_r+0x76c>)
    c856:	9212      	str	r2, [sp, #72]	; 0x48
    c858:	9317      	str	r3, [sp, #92]	; 0x5c
    c85a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c85c:	2302      	movs	r3, #2
    c85e:	e6c8      	b.n	c5f2 <_svfprintf_r+0x3d2>
    c860:	2301      	movs	r3, #1
    c862:	431c      	orrs	r4, r3
    c864:	780b      	ldrb	r3, [r1, #0]
    c866:	e53f      	b.n	c2e8 <_svfprintf_r+0xc8>
    c868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c86a:	1d1a      	adds	r2, r3, #4
    c86c:	681b      	ldr	r3, [r3, #0]
    c86e:	930b      	str	r3, [sp, #44]	; 0x2c
    c870:	2b00      	cmp	r3, #0
    c872:	da00      	bge.n	c876 <_svfprintf_r+0x656>
    c874:	e542      	b.n	c2fc <_svfprintf_r+0xdc>
    c876:	780b      	ldrb	r3, [r1, #0]
    c878:	920f      	str	r2, [sp, #60]	; 0x3c
    c87a:	e535      	b.n	c2e8 <_svfprintf_r+0xc8>
    c87c:	780b      	ldrb	r3, [r1, #0]
    c87e:	2800      	cmp	r0, #0
    c880:	d000      	beq.n	c884 <_svfprintf_r+0x664>
    c882:	e531      	b.n	c2e8 <_svfprintf_r+0xc8>
    c884:	2201      	movs	r2, #1
    c886:	3020      	adds	r0, #32
    c888:	4690      	mov	r8, r2
    c88a:	e52d      	b.n	c2e8 <_svfprintf_r+0xc8>
    c88c:	468b      	mov	fp, r1
    c88e:	9312      	str	r3, [sp, #72]	; 0x48
    c890:	06a3      	lsls	r3, r4, #26
    c892:	d400      	bmi.n	c896 <_svfprintf_r+0x676>
    c894:	e6ed      	b.n	c672 <_svfprintf_r+0x452>
    c896:	2207      	movs	r2, #7
    c898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c89a:	3307      	adds	r3, #7
    c89c:	4393      	bics	r3, r2
    c89e:	3201      	adds	r2, #1
    c8a0:	4694      	mov	ip, r2
    c8a2:	449c      	add	ip, r3
    c8a4:	4662      	mov	r2, ip
    c8a6:	920f      	str	r2, [sp, #60]	; 0x3c
    c8a8:	681a      	ldr	r2, [r3, #0]
    c8aa:	685b      	ldr	r3, [r3, #4]
    c8ac:	0011      	movs	r1, r2
    c8ae:	001a      	movs	r2, r3
    c8b0:	0008      	movs	r0, r1
    c8b2:	4310      	orrs	r0, r2
    c8b4:	910c      	str	r1, [sp, #48]	; 0x30
    c8b6:	920d      	str	r2, [sp, #52]	; 0x34
    c8b8:	2301      	movs	r3, #1
    c8ba:	0002      	movs	r2, r0
    c8bc:	e699      	b.n	c5f2 <_svfprintf_r+0x3d2>
    c8be:	468b      	mov	fp, r1
    c8c0:	9312      	str	r3, [sp, #72]	; 0x48
    c8c2:	06a3      	lsls	r3, r4, #26
    c8c4:	d400      	bmi.n	c8c8 <_svfprintf_r+0x6a8>
    c8c6:	e683      	b.n	c5d0 <_svfprintf_r+0x3b0>
    c8c8:	2207      	movs	r2, #7
    c8ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c8cc:	3307      	adds	r3, #7
    c8ce:	4393      	bics	r3, r2
    c8d0:	3201      	adds	r2, #1
    c8d2:	4694      	mov	ip, r2
    c8d4:	449c      	add	ip, r3
    c8d6:	4662      	mov	r2, ip
    c8d8:	920f      	str	r2, [sp, #60]	; 0x3c
    c8da:	681a      	ldr	r2, [r3, #0]
    c8dc:	685b      	ldr	r3, [r3, #4]
    c8de:	0011      	movs	r1, r2
    c8e0:	001a      	movs	r2, r3
    c8e2:	0008      	movs	r0, r1
    c8e4:	4310      	orrs	r0, r2
    c8e6:	910c      	str	r1, [sp, #48]	; 0x30
    c8e8:	920d      	str	r2, [sp, #52]	; 0x34
    c8ea:	2300      	movs	r3, #0
    c8ec:	0002      	movs	r2, r0
    c8ee:	e680      	b.n	c5f2 <_svfprintf_r+0x3d2>
    c8f0:	468b      	mov	fp, r1
    c8f2:	4641      	mov	r1, r8
    c8f4:	9312      	str	r3, [sp, #72]	; 0x48
    c8f6:	2900      	cmp	r1, #0
    c8f8:	d001      	beq.n	c8fe <_svfprintf_r+0x6de>
    c8fa:	f000 ff7f 	bl	d7fc <_svfprintf_r+0x15dc>
    c8fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c900:	2b00      	cmp	r3, #0
    c902:	d100      	bne.n	c906 <_svfprintf_r+0x6e6>
    c904:	e50b      	b.n	c31e <_svfprintf_r+0xfe>
    c906:	ad28      	add	r5, sp, #160	; 0xa0
    c908:	702b      	strb	r3, [r5, #0]
    c90a:	2300      	movs	r3, #0
    c90c:	aa16      	add	r2, sp, #88	; 0x58
    c90e:	77d3      	strb	r3, [r2, #31]
    c910:	9408      	str	r4, [sp, #32]
    c912:	e74e      	b.n	c7b2 <_svfprintf_r+0x592>
    c914:	68bc      	ldr	r4, [r7, #8]
    c916:	4643      	mov	r3, r8
    c918:	2b00      	cmp	r3, #0
    c91a:	d00f      	beq.n	c93c <_svfprintf_r+0x71c>
    c91c:	aa16      	add	r2, sp, #88	; 0x58
    c91e:	231f      	movs	r3, #31
    c920:	4694      	mov	ip, r2
    c922:	4463      	add	r3, ip
    c924:	6033      	str	r3, [r6, #0]
    c926:	2301      	movs	r3, #1
    c928:	6073      	str	r3, [r6, #4]
    c92a:	687b      	ldr	r3, [r7, #4]
    c92c:	3401      	adds	r4, #1
    c92e:	3301      	adds	r3, #1
    c930:	60bc      	str	r4, [r7, #8]
    c932:	607b      	str	r3, [r7, #4]
    c934:	2b07      	cmp	r3, #7
    c936:	dd00      	ble.n	c93a <_svfprintf_r+0x71a>
    c938:	e1b3      	b.n	cca2 <_svfprintf_r+0xa82>
    c93a:	3608      	adds	r6, #8
    c93c:	464b      	mov	r3, r9
    c93e:	2b00      	cmp	r3, #0
    c940:	d00c      	beq.n	c95c <_svfprintf_r+0x73c>
    c942:	ab1e      	add	r3, sp, #120	; 0x78
    c944:	6033      	str	r3, [r6, #0]
    c946:	2302      	movs	r3, #2
    c948:	6073      	str	r3, [r6, #4]
    c94a:	687b      	ldr	r3, [r7, #4]
    c94c:	3402      	adds	r4, #2
    c94e:	3301      	adds	r3, #1
    c950:	60bc      	str	r4, [r7, #8]
    c952:	607b      	str	r3, [r7, #4]
    c954:	2b07      	cmp	r3, #7
    c956:	dd00      	ble.n	c95a <_svfprintf_r+0x73a>
    c958:	e1af      	b.n	ccba <_svfprintf_r+0xa9a>
    c95a:	3608      	adds	r6, #8
    c95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c95e:	2b80      	cmp	r3, #128	; 0x80
    c960:	d100      	bne.n	c964 <_svfprintf_r+0x744>
    c962:	e120      	b.n	cba6 <_svfprintf_r+0x986>
    c964:	4653      	mov	r3, sl
    c966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c968:	1a9d      	subs	r5, r3, r2
    c96a:	2d00      	cmp	r5, #0
    c96c:	dd3c      	ble.n	c9e8 <_svfprintf_r+0x7c8>
    c96e:	4a08      	ldr	r2, [pc, #32]	; (c990 <_svfprintf_r+0x770>)
    c970:	687b      	ldr	r3, [r7, #4]
    c972:	4691      	mov	r9, r2
    c974:	2d10      	cmp	r5, #16
    c976:	dd2c      	ble.n	c9d2 <_svfprintf_r+0x7b2>
    c978:	2210      	movs	r2, #16
    c97a:	0021      	movs	r1, r4
    c97c:	4692      	mov	sl, r2
    c97e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c980:	0032      	movs	r2, r6
    c982:	002e      	movs	r6, r5
    c984:	464d      	mov	r5, r9
    c986:	e009      	b.n	c99c <_svfprintf_r+0x77c>
    c988:	00018cb0 	.word	0x00018cb0
    c98c:	00018cc4 	.word	0x00018cc4
    c990:	00018cf4 	.word	0x00018cf4
    c994:	3e10      	subs	r6, #16
    c996:	3208      	adds	r2, #8
    c998:	2e10      	cmp	r6, #16
    c99a:	dd16      	ble.n	c9ca <_svfprintf_r+0x7aa>
    c99c:	4650      	mov	r0, sl
    c99e:	3110      	adds	r1, #16
    c9a0:	3301      	adds	r3, #1
    c9a2:	6015      	str	r5, [r2, #0]
    c9a4:	6050      	str	r0, [r2, #4]
    c9a6:	60b9      	str	r1, [r7, #8]
    c9a8:	607b      	str	r3, [r7, #4]
    c9aa:	2b07      	cmp	r3, #7
    c9ac:	ddf2      	ble.n	c994 <_svfprintf_r+0x774>
    c9ae:	003a      	movs	r2, r7
    c9b0:	9906      	ldr	r1, [sp, #24]
    c9b2:	0020      	movs	r0, r4
    c9b4:	f007 f9e6 	bl	13d84 <__ssprint_r>
    c9b8:	2800      	cmp	r0, #0
    c9ba:	d000      	beq.n	c9be <_svfprintf_r+0x79e>
    c9bc:	e4b7      	b.n	c32e <_svfprintf_r+0x10e>
    c9be:	3e10      	subs	r6, #16
    c9c0:	68b9      	ldr	r1, [r7, #8]
    c9c2:	687b      	ldr	r3, [r7, #4]
    c9c4:	aa32      	add	r2, sp, #200	; 0xc8
    c9c6:	2e10      	cmp	r6, #16
    c9c8:	dce8      	bgt.n	c99c <_svfprintf_r+0x77c>
    c9ca:	46a9      	mov	r9, r5
    c9cc:	000c      	movs	r4, r1
    c9ce:	0035      	movs	r5, r6
    c9d0:	0016      	movs	r6, r2
    c9d2:	464a      	mov	r2, r9
    c9d4:	1964      	adds	r4, r4, r5
    c9d6:	3301      	adds	r3, #1
    c9d8:	6032      	str	r2, [r6, #0]
    c9da:	6075      	str	r5, [r6, #4]
    c9dc:	60bc      	str	r4, [r7, #8]
    c9de:	607b      	str	r3, [r7, #4]
    c9e0:	2b07      	cmp	r3, #7
    c9e2:	dd00      	ble.n	c9e6 <_svfprintf_r+0x7c6>
    c9e4:	e151      	b.n	cc8a <_svfprintf_r+0xa6a>
    c9e6:	3608      	adds	r6, #8
    c9e8:	9b08      	ldr	r3, [sp, #32]
    c9ea:	05db      	lsls	r3, r3, #23
    c9ec:	d500      	bpl.n	c9f0 <_svfprintf_r+0x7d0>
    c9ee:	e0b6      	b.n	cb5e <_svfprintf_r+0x93e>
    c9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c9f2:	6033      	str	r3, [r6, #0]
    c9f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c9f6:	469c      	mov	ip, r3
    c9f8:	6073      	str	r3, [r6, #4]
    c9fa:	687b      	ldr	r3, [r7, #4]
    c9fc:	4464      	add	r4, ip
    c9fe:	3301      	adds	r3, #1
    ca00:	60bc      	str	r4, [r7, #8]
    ca02:	607b      	str	r3, [r7, #4]
    ca04:	2b07      	cmp	r3, #7
    ca06:	dd00      	ble.n	ca0a <_svfprintf_r+0x7ea>
    ca08:	e09d      	b.n	cb46 <_svfprintf_r+0x926>
    ca0a:	3608      	adds	r6, #8
    ca0c:	9b08      	ldr	r3, [sp, #32]
    ca0e:	075b      	lsls	r3, r3, #29
    ca10:	d541      	bpl.n	ca96 <_svfprintf_r+0x876>
    ca12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca14:	9a07      	ldr	r2, [sp, #28]
    ca16:	1a9d      	subs	r5, r3, r2
    ca18:	2d00      	cmp	r5, #0
    ca1a:	dd3c      	ble.n	ca96 <_svfprintf_r+0x876>
    ca1c:	4ac4      	ldr	r2, [pc, #784]	; (cd30 <_svfprintf_r+0xb10>)
    ca1e:	687b      	ldr	r3, [r7, #4]
    ca20:	4690      	mov	r8, r2
    ca22:	2d10      	cmp	r5, #16
    ca24:	dd26      	ble.n	ca74 <_svfprintf_r+0x854>
    ca26:	2210      	movs	r2, #16
    ca28:	0021      	movs	r1, r4
    ca2a:	4691      	mov	r9, r2
    ca2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ca2e:	0032      	movs	r2, r6
    ca30:	002e      	movs	r6, r5
    ca32:	9d06      	ldr	r5, [sp, #24]
    ca34:	e003      	b.n	ca3e <_svfprintf_r+0x81e>
    ca36:	3e10      	subs	r6, #16
    ca38:	3208      	adds	r2, #8
    ca3a:	2e10      	cmp	r6, #16
    ca3c:	dd17      	ble.n	ca6e <_svfprintf_r+0x84e>
    ca3e:	48bc      	ldr	r0, [pc, #752]	; (cd30 <_svfprintf_r+0xb10>)
    ca40:	3110      	adds	r1, #16
    ca42:	6010      	str	r0, [r2, #0]
    ca44:	4648      	mov	r0, r9
    ca46:	3301      	adds	r3, #1
    ca48:	6050      	str	r0, [r2, #4]
    ca4a:	60b9      	str	r1, [r7, #8]
    ca4c:	607b      	str	r3, [r7, #4]
    ca4e:	2b07      	cmp	r3, #7
    ca50:	ddf1      	ble.n	ca36 <_svfprintf_r+0x816>
    ca52:	003a      	movs	r2, r7
    ca54:	0029      	movs	r1, r5
    ca56:	0020      	movs	r0, r4
    ca58:	f007 f994 	bl	13d84 <__ssprint_r>
    ca5c:	2800      	cmp	r0, #0
    ca5e:	d000      	beq.n	ca62 <_svfprintf_r+0x842>
    ca60:	e465      	b.n	c32e <_svfprintf_r+0x10e>
    ca62:	3e10      	subs	r6, #16
    ca64:	68b9      	ldr	r1, [r7, #8]
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	aa32      	add	r2, sp, #200	; 0xc8
    ca6a:	2e10      	cmp	r6, #16
    ca6c:	dce7      	bgt.n	ca3e <_svfprintf_r+0x81e>
    ca6e:	0035      	movs	r5, r6
    ca70:	000c      	movs	r4, r1
    ca72:	0016      	movs	r6, r2
    ca74:	4642      	mov	r2, r8
    ca76:	1964      	adds	r4, r4, r5
    ca78:	3301      	adds	r3, #1
    ca7a:	c624      	stmia	r6!, {r2, r5}
    ca7c:	60bc      	str	r4, [r7, #8]
    ca7e:	607b      	str	r3, [r7, #4]
    ca80:	2b07      	cmp	r3, #7
    ca82:	dd08      	ble.n	ca96 <_svfprintf_r+0x876>
    ca84:	003a      	movs	r2, r7
    ca86:	9906      	ldr	r1, [sp, #24]
    ca88:	9809      	ldr	r0, [sp, #36]	; 0x24
    ca8a:	f007 f97b 	bl	13d84 <__ssprint_r>
    ca8e:	2800      	cmp	r0, #0
    ca90:	d000      	beq.n	ca94 <_svfprintf_r+0x874>
    ca92:	e44c      	b.n	c32e <_svfprintf_r+0x10e>
    ca94:	68bc      	ldr	r4, [r7, #8]
    ca96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ca98:	9907      	ldr	r1, [sp, #28]
    ca9a:	428b      	cmp	r3, r1
    ca9c:	da00      	bge.n	caa0 <_svfprintf_r+0x880>
    ca9e:	000b      	movs	r3, r1
    caa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    caa2:	4694      	mov	ip, r2
    caa4:	449c      	add	ip, r3
    caa6:	4663      	mov	r3, ip
    caa8:	930a      	str	r3, [sp, #40]	; 0x28
    caaa:	2c00      	cmp	r4, #0
    caac:	d000      	beq.n	cab0 <_svfprintf_r+0x890>
    caae:	e0d6      	b.n	cc5e <_svfprintf_r+0xa3e>
    cab0:	2300      	movs	r3, #0
    cab2:	ae32      	add	r6, sp, #200	; 0xc8
    cab4:	607b      	str	r3, [r7, #4]
    cab6:	f7ff fbde 	bl	c276 <_svfprintf_r+0x56>
    caba:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cabc:	2b01      	cmp	r3, #1
    cabe:	dc00      	bgt.n	cac2 <_svfprintf_r+0x8a2>
    cac0:	e0ae      	b.n	cc20 <_svfprintf_r+0xa00>
    cac2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cac4:	3401      	adds	r4, #1
    cac6:	6033      	str	r3, [r6, #0]
    cac8:	2301      	movs	r3, #1
    caca:	6073      	str	r3, [r6, #4]
    cacc:	687b      	ldr	r3, [r7, #4]
    cace:	60bc      	str	r4, [r7, #8]
    cad0:	3301      	adds	r3, #1
    cad2:	607b      	str	r3, [r7, #4]
    cad4:	2b07      	cmp	r3, #7
    cad6:	dd00      	ble.n	cada <_svfprintf_r+0x8ba>
    cad8:	e2df      	b.n	d09a <_svfprintf_r+0xe7a>
    cada:	3608      	adds	r6, #8
    cadc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    cade:	3301      	adds	r3, #1
    cae0:	6032      	str	r2, [r6, #0]
    cae2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    cae4:	4698      	mov	r8, r3
    cae6:	4694      	mov	ip, r2
    cae8:	4464      	add	r4, ip
    caea:	6072      	str	r2, [r6, #4]
    caec:	60bc      	str	r4, [r7, #8]
    caee:	607b      	str	r3, [r7, #4]
    caf0:	2b07      	cmp	r3, #7
    caf2:	dd00      	ble.n	caf6 <_svfprintf_r+0x8d6>
    caf4:	e2de      	b.n	d0b4 <_svfprintf_r+0xe94>
    caf6:	3608      	adds	r6, #8
    caf8:	2200      	movs	r2, #0
    cafa:	2300      	movs	r3, #0
    cafc:	9816      	ldr	r0, [sp, #88]	; 0x58
    cafe:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb00:	f7fe f8fa 	bl	acf8 <__aeabi_dcmpeq>
    cb04:	2800      	cmp	r0, #0
    cb06:	d000      	beq.n	cb0a <_svfprintf_r+0x8ea>
    cb08:	e1a4      	b.n	ce54 <_svfprintf_r+0xc34>
    cb0a:	9d11      	ldr	r5, [sp, #68]	; 0x44
    cb0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cb0e:	3501      	adds	r5, #1
    cb10:	3b01      	subs	r3, #1
    cb12:	6035      	str	r5, [r6, #0]
    cb14:	6073      	str	r3, [r6, #4]
    cb16:	18e4      	adds	r4, r4, r3
    cb18:	2301      	movs	r3, #1
    cb1a:	469c      	mov	ip, r3
    cb1c:	44e0      	add	r8, ip
    cb1e:	4643      	mov	r3, r8
    cb20:	60bc      	str	r4, [r7, #8]
    cb22:	607b      	str	r3, [r7, #4]
    cb24:	2b07      	cmp	r3, #7
    cb26:	dd00      	ble.n	cb2a <_svfprintf_r+0x90a>
    cb28:	e08b      	b.n	cc42 <_svfprintf_r+0xa22>
    cb2a:	3608      	adds	r6, #8
    cb2c:	ab21      	add	r3, sp, #132	; 0x84
    cb2e:	6033      	str	r3, [r6, #0]
    cb30:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cb32:	469c      	mov	ip, r3
    cb34:	6073      	str	r3, [r6, #4]
    cb36:	4643      	mov	r3, r8
    cb38:	4464      	add	r4, ip
    cb3a:	3301      	adds	r3, #1
    cb3c:	60bc      	str	r4, [r7, #8]
    cb3e:	607b      	str	r3, [r7, #4]
    cb40:	2b07      	cmp	r3, #7
    cb42:	dc00      	bgt.n	cb46 <_svfprintf_r+0x926>
    cb44:	e761      	b.n	ca0a <_svfprintf_r+0x7ea>
    cb46:	003a      	movs	r2, r7
    cb48:	9906      	ldr	r1, [sp, #24]
    cb4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    cb4c:	f007 f91a 	bl	13d84 <__ssprint_r>
    cb50:	2800      	cmp	r0, #0
    cb52:	d001      	beq.n	cb58 <_svfprintf_r+0x938>
    cb54:	f7ff fbeb 	bl	c32e <_svfprintf_r+0x10e>
    cb58:	68bc      	ldr	r4, [r7, #8]
    cb5a:	ae32      	add	r6, sp, #200	; 0xc8
    cb5c:	e756      	b.n	ca0c <_svfprintf_r+0x7ec>
    cb5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cb60:	2b65      	cmp	r3, #101	; 0x65
    cb62:	ddaa      	ble.n	caba <_svfprintf_r+0x89a>
    cb64:	2200      	movs	r2, #0
    cb66:	2300      	movs	r3, #0
    cb68:	9816      	ldr	r0, [sp, #88]	; 0x58
    cb6a:	9915      	ldr	r1, [sp, #84]	; 0x54
    cb6c:	f7fe f8c4 	bl	acf8 <__aeabi_dcmpeq>
    cb70:	2800      	cmp	r0, #0
    cb72:	d100      	bne.n	cb76 <_svfprintf_r+0x956>
    cb74:	e0e2      	b.n	cd3c <_svfprintf_r+0xb1c>
    cb76:	4b6f      	ldr	r3, [pc, #444]	; (cd34 <_svfprintf_r+0xb14>)
    cb78:	3401      	adds	r4, #1
    cb7a:	6033      	str	r3, [r6, #0]
    cb7c:	2301      	movs	r3, #1
    cb7e:	6073      	str	r3, [r6, #4]
    cb80:	687b      	ldr	r3, [r7, #4]
    cb82:	60bc      	str	r4, [r7, #8]
    cb84:	3301      	adds	r3, #1
    cb86:	607b      	str	r3, [r7, #4]
    cb88:	2b07      	cmp	r3, #7
    cb8a:	dd00      	ble.n	cb8e <_svfprintf_r+0x96e>
    cb8c:	e366      	b.n	d25c <_svfprintf_r+0x103c>
    cb8e:	3608      	adds	r6, #8
    cb90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cb92:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cb94:	4293      	cmp	r3, r2
    cb96:	da00      	bge.n	cb9a <_svfprintf_r+0x97a>
    cb98:	e1a4      	b.n	cee4 <_svfprintf_r+0xcc4>
    cb9a:	9b08      	ldr	r3, [sp, #32]
    cb9c:	07db      	lsls	r3, r3, #31
    cb9e:	d500      	bpl.n	cba2 <_svfprintf_r+0x982>
    cba0:	e1a0      	b.n	cee4 <_svfprintf_r+0xcc4>
    cba2:	68bc      	ldr	r4, [r7, #8]
    cba4:	e732      	b.n	ca0c <_svfprintf_r+0x7ec>
    cba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cba8:	9a07      	ldr	r2, [sp, #28]
    cbaa:	1a9d      	subs	r5, r3, r2
    cbac:	2d00      	cmp	r5, #0
    cbae:	dc00      	bgt.n	cbb2 <_svfprintf_r+0x992>
    cbb0:	e6d8      	b.n	c964 <_svfprintf_r+0x744>
    cbb2:	4a61      	ldr	r2, [pc, #388]	; (cd38 <_svfprintf_r+0xb18>)
    cbb4:	687b      	ldr	r3, [r7, #4]
    cbb6:	4691      	mov	r9, r2
    cbb8:	2d10      	cmp	r5, #16
    cbba:	dd25      	ble.n	cc08 <_svfprintf_r+0x9e8>
    cbbc:	2210      	movs	r2, #16
    cbbe:	0021      	movs	r1, r4
    cbc0:	4690      	mov	r8, r2
    cbc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cbc4:	0032      	movs	r2, r6
    cbc6:	464e      	mov	r6, r9
    cbc8:	e003      	b.n	cbd2 <_svfprintf_r+0x9b2>
    cbca:	3d10      	subs	r5, #16
    cbcc:	3208      	adds	r2, #8
    cbce:	2d10      	cmp	r5, #16
    cbd0:	dd17      	ble.n	cc02 <_svfprintf_r+0x9e2>
    cbd2:	4640      	mov	r0, r8
    cbd4:	3110      	adds	r1, #16
    cbd6:	3301      	adds	r3, #1
    cbd8:	6016      	str	r6, [r2, #0]
    cbda:	6050      	str	r0, [r2, #4]
    cbdc:	60b9      	str	r1, [r7, #8]
    cbde:	607b      	str	r3, [r7, #4]
    cbe0:	2b07      	cmp	r3, #7
    cbe2:	ddf2      	ble.n	cbca <_svfprintf_r+0x9aa>
    cbe4:	003a      	movs	r2, r7
    cbe6:	9906      	ldr	r1, [sp, #24]
    cbe8:	0020      	movs	r0, r4
    cbea:	f007 f8cb 	bl	13d84 <__ssprint_r>
    cbee:	2800      	cmp	r0, #0
    cbf0:	d001      	beq.n	cbf6 <_svfprintf_r+0x9d6>
    cbf2:	f7ff fb9c 	bl	c32e <_svfprintf_r+0x10e>
    cbf6:	3d10      	subs	r5, #16
    cbf8:	68b9      	ldr	r1, [r7, #8]
    cbfa:	687b      	ldr	r3, [r7, #4]
    cbfc:	aa32      	add	r2, sp, #200	; 0xc8
    cbfe:	2d10      	cmp	r5, #16
    cc00:	dce7      	bgt.n	cbd2 <_svfprintf_r+0x9b2>
    cc02:	46b1      	mov	r9, r6
    cc04:	000c      	movs	r4, r1
    cc06:	0016      	movs	r6, r2
    cc08:	464a      	mov	r2, r9
    cc0a:	1964      	adds	r4, r4, r5
    cc0c:	3301      	adds	r3, #1
    cc0e:	6032      	str	r2, [r6, #0]
    cc10:	6075      	str	r5, [r6, #4]
    cc12:	60bc      	str	r4, [r7, #8]
    cc14:	607b      	str	r3, [r7, #4]
    cc16:	2b07      	cmp	r3, #7
    cc18:	dd00      	ble.n	cc1c <_svfprintf_r+0x9fc>
    cc1a:	e27e      	b.n	d11a <_svfprintf_r+0xefa>
    cc1c:	3608      	adds	r6, #8
    cc1e:	e6a1      	b.n	c964 <_svfprintf_r+0x744>
    cc20:	2301      	movs	r3, #1
    cc22:	9a08      	ldr	r2, [sp, #32]
    cc24:	4213      	tst	r3, r2
    cc26:	d000      	beq.n	cc2a <_svfprintf_r+0xa0a>
    cc28:	e74b      	b.n	cac2 <_svfprintf_r+0x8a2>
    cc2a:	6073      	str	r3, [r6, #4]
    cc2c:	687b      	ldr	r3, [r7, #4]
    cc2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    cc30:	3301      	adds	r3, #1
    cc32:	3401      	adds	r4, #1
    cc34:	6032      	str	r2, [r6, #0]
    cc36:	60bc      	str	r4, [r7, #8]
    cc38:	4698      	mov	r8, r3
    cc3a:	607b      	str	r3, [r7, #4]
    cc3c:	2b07      	cmp	r3, #7
    cc3e:	dc00      	bgt.n	cc42 <_svfprintf_r+0xa22>
    cc40:	e773      	b.n	cb2a <_svfprintf_r+0x90a>
    cc42:	003a      	movs	r2, r7
    cc44:	9906      	ldr	r1, [sp, #24]
    cc46:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc48:	f007 f89c 	bl	13d84 <__ssprint_r>
    cc4c:	2800      	cmp	r0, #0
    cc4e:	d001      	beq.n	cc54 <_svfprintf_r+0xa34>
    cc50:	f7ff fb6d 	bl	c32e <_svfprintf_r+0x10e>
    cc54:	687b      	ldr	r3, [r7, #4]
    cc56:	68bc      	ldr	r4, [r7, #8]
    cc58:	4698      	mov	r8, r3
    cc5a:	ae32      	add	r6, sp, #200	; 0xc8
    cc5c:	e766      	b.n	cb2c <_svfprintf_r+0x90c>
    cc5e:	003a      	movs	r2, r7
    cc60:	9906      	ldr	r1, [sp, #24]
    cc62:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc64:	f007 f88e 	bl	13d84 <__ssprint_r>
    cc68:	2800      	cmp	r0, #0
    cc6a:	d100      	bne.n	cc6e <_svfprintf_r+0xa4e>
    cc6c:	e720      	b.n	cab0 <_svfprintf_r+0x890>
    cc6e:	f7ff fb5e 	bl	c32e <_svfprintf_r+0x10e>
    cc72:	9c08      	ldr	r4, [sp, #32]
    cc74:	2b01      	cmp	r3, #1
    cc76:	d100      	bne.n	cc7a <_svfprintf_r+0xa5a>
    cc78:	e184      	b.n	cf84 <_svfprintf_r+0xd64>
    cc7a:	2b02      	cmp	r3, #2
    cc7c:	d129      	bne.n	ccd2 <_svfprintf_r+0xab2>
    cc7e:	9408      	str	r4, [sp, #32]
    cc80:	2300      	movs	r3, #0
    cc82:	2400      	movs	r4, #0
    cc84:	930c      	str	r3, [sp, #48]	; 0x30
    cc86:	940d      	str	r4, [sp, #52]	; 0x34
    cc88:	e4c5      	b.n	c616 <_svfprintf_r+0x3f6>
    cc8a:	003a      	movs	r2, r7
    cc8c:	9906      	ldr	r1, [sp, #24]
    cc8e:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc90:	f007 f878 	bl	13d84 <__ssprint_r>
    cc94:	2800      	cmp	r0, #0
    cc96:	d001      	beq.n	cc9c <_svfprintf_r+0xa7c>
    cc98:	f7ff fb49 	bl	c32e <_svfprintf_r+0x10e>
    cc9c:	68bc      	ldr	r4, [r7, #8]
    cc9e:	ae32      	add	r6, sp, #200	; 0xc8
    cca0:	e6a2      	b.n	c9e8 <_svfprintf_r+0x7c8>
    cca2:	003a      	movs	r2, r7
    cca4:	9906      	ldr	r1, [sp, #24]
    cca6:	9809      	ldr	r0, [sp, #36]	; 0x24
    cca8:	f007 f86c 	bl	13d84 <__ssprint_r>
    ccac:	2800      	cmp	r0, #0
    ccae:	d001      	beq.n	ccb4 <_svfprintf_r+0xa94>
    ccb0:	f7ff fb3d 	bl	c32e <_svfprintf_r+0x10e>
    ccb4:	68bc      	ldr	r4, [r7, #8]
    ccb6:	ae32      	add	r6, sp, #200	; 0xc8
    ccb8:	e640      	b.n	c93c <_svfprintf_r+0x71c>
    ccba:	003a      	movs	r2, r7
    ccbc:	9906      	ldr	r1, [sp, #24]
    ccbe:	9809      	ldr	r0, [sp, #36]	; 0x24
    ccc0:	f007 f860 	bl	13d84 <__ssprint_r>
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d001      	beq.n	cccc <_svfprintf_r+0xaac>
    ccc8:	f7ff fb31 	bl	c32e <_svfprintf_r+0x10e>
    cccc:	68bc      	ldr	r4, [r7, #8]
    ccce:	ae32      	add	r6, sp, #200	; 0xc8
    ccd0:	e644      	b.n	c95c <_svfprintf_r+0x73c>
    ccd2:	9408      	str	r4, [sp, #32]
    ccd4:	2300      	movs	r3, #0
    ccd6:	2400      	movs	r4, #0
    ccd8:	930c      	str	r3, [sp, #48]	; 0x30
    ccda:	940d      	str	r4, [sp, #52]	; 0x34
    ccdc:	980c      	ldr	r0, [sp, #48]	; 0x30
    ccde:	990d      	ldr	r1, [sp, #52]	; 0x34
    cce0:	465b      	mov	r3, fp
    cce2:	aa32      	add	r2, sp, #200	; 0xc8
    cce4:	9307      	str	r3, [sp, #28]
    cce6:	4691      	mov	r9, r2
    cce8:	46b3      	mov	fp, r6
    ccea:	e000      	b.n	ccee <_svfprintf_r+0xace>
    ccec:	46a1      	mov	r9, r4
    ccee:	074a      	lsls	r2, r1, #29
    ccf0:	4694      	mov	ip, r2
    ccf2:	464b      	mov	r3, r9
    ccf4:	4665      	mov	r5, ip
    ccf6:	1e5c      	subs	r4, r3, #1
    ccf8:	08c6      	lsrs	r6, r0, #3
    ccfa:	2307      	movs	r3, #7
    ccfc:	08ca      	lsrs	r2, r1, #3
    ccfe:	4335      	orrs	r5, r6
    cd00:	0011      	movs	r1, r2
    cd02:	002a      	movs	r2, r5
    cd04:	4003      	ands	r3, r0
    cd06:	3330      	adds	r3, #48	; 0x30
    cd08:	7023      	strb	r3, [r4, #0]
    cd0a:	0028      	movs	r0, r5
    cd0c:	430a      	orrs	r2, r1
    cd0e:	d1ed      	bne.n	ccec <_svfprintf_r+0xacc>
    cd10:	900c      	str	r0, [sp, #48]	; 0x30
    cd12:	910d      	str	r1, [sp, #52]	; 0x34
    cd14:	9907      	ldr	r1, [sp, #28]
    cd16:	465e      	mov	r6, fp
    cd18:	468b      	mov	fp, r1
    cd1a:	9908      	ldr	r1, [sp, #32]
    cd1c:	464a      	mov	r2, r9
    cd1e:	9411      	str	r4, [sp, #68]	; 0x44
    cd20:	07c9      	lsls	r1, r1, #31
    cd22:	d500      	bpl.n	cd26 <_svfprintf_r+0xb06>
    cd24:	e13d      	b.n	cfa2 <_svfprintf_r+0xd82>
    cd26:	ab32      	add	r3, sp, #200	; 0xc8
    cd28:	1b1b      	subs	r3, r3, r4
    cd2a:	930e      	str	r3, [sp, #56]	; 0x38
    cd2c:	f7ff fb88 	bl	c440 <_svfprintf_r+0x220>
    cd30:	00018ce4 	.word	0x00018ce4
    cd34:	00018ce0 	.word	0x00018ce0
    cd38:	00018cf4 	.word	0x00018cf4
    cd3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    cd3e:	2800      	cmp	r0, #0
    cd40:	dc00      	bgt.n	cd44 <_svfprintf_r+0xb24>
    cd42:	e296      	b.n	d272 <_svfprintf_r+0x1052>
    cd44:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cd46:	9914      	ldr	r1, [sp, #80]	; 0x50
    cd48:	0013      	movs	r3, r2
    cd4a:	4690      	mov	r8, r2
    cd4c:	428b      	cmp	r3, r1
    cd4e:	dd00      	ble.n	cd52 <_svfprintf_r+0xb32>
    cd50:	4688      	mov	r8, r1
    cd52:	4643      	mov	r3, r8
    cd54:	2b00      	cmp	r3, #0
    cd56:	dd0c      	ble.n	cd72 <_svfprintf_r+0xb52>
    cd58:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd5a:	4444      	add	r4, r8
    cd5c:	6033      	str	r3, [r6, #0]
    cd5e:	4643      	mov	r3, r8
    cd60:	6073      	str	r3, [r6, #4]
    cd62:	687b      	ldr	r3, [r7, #4]
    cd64:	60bc      	str	r4, [r7, #8]
    cd66:	3301      	adds	r3, #1
    cd68:	607b      	str	r3, [r7, #4]
    cd6a:	2b07      	cmp	r3, #7
    cd6c:	dd00      	ble.n	cd70 <_svfprintf_r+0xb50>
    cd6e:	e3b7      	b.n	d4e0 <_svfprintf_r+0x12c0>
    cd70:	3608      	adds	r6, #8
    cd72:	4643      	mov	r3, r8
    cd74:	43db      	mvns	r3, r3
    cd76:	4642      	mov	r2, r8
    cd78:	17db      	asrs	r3, r3, #31
    cd7a:	4013      	ands	r3, r2
    cd7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cd7e:	1ad3      	subs	r3, r2, r3
    cd80:	4698      	mov	r8, r3
    cd82:	2b00      	cmp	r3, #0
    cd84:	dc00      	bgt.n	cd88 <_svfprintf_r+0xb68>
    cd86:	e128      	b.n	cfda <_svfprintf_r+0xdba>
    cd88:	2b10      	cmp	r3, #16
    cd8a:	dc01      	bgt.n	cd90 <_svfprintf_r+0xb70>
    cd8c:	f000 fce7 	bl	d75e <_svfprintf_r+0x153e>
    cd90:	4acf      	ldr	r2, [pc, #828]	; (d0d0 <_svfprintf_r+0xeb0>)
    cd92:	0021      	movs	r1, r4
    cd94:	4691      	mov	r9, r2
    cd96:	2210      	movs	r2, #16
    cd98:	687b      	ldr	r3, [r7, #4]
    cd9a:	4692      	mov	sl, r2
    cd9c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cd9e:	0032      	movs	r2, r6
    cda0:	464c      	mov	r4, r9
    cda2:	4646      	mov	r6, r8
    cda4:	e004      	b.n	cdb0 <_svfprintf_r+0xb90>
    cda6:	3208      	adds	r2, #8
    cda8:	3e10      	subs	r6, #16
    cdaa:	2e10      	cmp	r6, #16
    cdac:	dc00      	bgt.n	cdb0 <_svfprintf_r+0xb90>
    cdae:	e104      	b.n	cfba <_svfprintf_r+0xd9a>
    cdb0:	4650      	mov	r0, sl
    cdb2:	3110      	adds	r1, #16
    cdb4:	3301      	adds	r3, #1
    cdb6:	6014      	str	r4, [r2, #0]
    cdb8:	6050      	str	r0, [r2, #4]
    cdba:	60b9      	str	r1, [r7, #8]
    cdbc:	607b      	str	r3, [r7, #4]
    cdbe:	2b07      	cmp	r3, #7
    cdc0:	ddf1      	ble.n	cda6 <_svfprintf_r+0xb86>
    cdc2:	003a      	movs	r2, r7
    cdc4:	9906      	ldr	r1, [sp, #24]
    cdc6:	0028      	movs	r0, r5
    cdc8:	f006 ffdc 	bl	13d84 <__ssprint_r>
    cdcc:	2800      	cmp	r0, #0
    cdce:	d001      	beq.n	cdd4 <_svfprintf_r+0xbb4>
    cdd0:	f7ff faad 	bl	c32e <_svfprintf_r+0x10e>
    cdd4:	68b9      	ldr	r1, [r7, #8]
    cdd6:	687b      	ldr	r3, [r7, #4]
    cdd8:	aa32      	add	r2, sp, #200	; 0xc8
    cdda:	e7e5      	b.n	cda8 <_svfprintf_r+0xb88>
    cddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cdde:	2b00      	cmp	r3, #0
    cde0:	d100      	bne.n	cde4 <_svfprintf_r+0xbc4>
    cde2:	e0ca      	b.n	cf7a <_svfprintf_r+0xd5a>
    cde4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    cde6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    cde8:	ab32      	add	r3, sp, #200	; 0xc8
    cdea:	46b1      	mov	r9, r6
    cdec:	001e      	movs	r6, r3
    cdee:	0020      	movs	r0, r4
    cdf0:	0029      	movs	r1, r5
    cdf2:	220a      	movs	r2, #10
    cdf4:	2300      	movs	r3, #0
    cdf6:	f7fc fb53 	bl	94a0 <__aeabi_uldivmod>
    cdfa:	3e01      	subs	r6, #1
    cdfc:	3230      	adds	r2, #48	; 0x30
    cdfe:	7032      	strb	r2, [r6, #0]
    ce00:	2300      	movs	r3, #0
    ce02:	0020      	movs	r0, r4
    ce04:	0029      	movs	r1, r5
    ce06:	220a      	movs	r2, #10
    ce08:	f7fc fb4a 	bl	94a0 <__aeabi_uldivmod>
    ce0c:	0003      	movs	r3, r0
    ce0e:	0004      	movs	r4, r0
    ce10:	000d      	movs	r5, r1
    ce12:	430b      	orrs	r3, r1
    ce14:	d1eb      	bne.n	cdee <_svfprintf_r+0xbce>
    ce16:	0032      	movs	r2, r6
    ce18:	ab32      	add	r3, sp, #200	; 0xc8
    ce1a:	1a9b      	subs	r3, r3, r2
    ce1c:	9611      	str	r6, [sp, #68]	; 0x44
    ce1e:	940c      	str	r4, [sp, #48]	; 0x30
    ce20:	950d      	str	r5, [sp, #52]	; 0x34
    ce22:	464e      	mov	r6, r9
    ce24:	930e      	str	r3, [sp, #56]	; 0x38
    ce26:	f7ff fb0b 	bl	c440 <_svfprintf_r+0x220>
    ce2a:	2300      	movs	r3, #0
    ce2c:	930e      	str	r3, [sp, #56]	; 0x38
    ce2e:	ab32      	add	r3, sp, #200	; 0xc8
    ce30:	9311      	str	r3, [sp, #68]	; 0x44
    ce32:	f7ff fb05 	bl	c440 <_svfprintf_r+0x220>
    ce36:	003a      	movs	r2, r7
    ce38:	9906      	ldr	r1, [sp, #24]
    ce3a:	9809      	ldr	r0, [sp, #36]	; 0x24
    ce3c:	f006 ffa2 	bl	13d84 <__ssprint_r>
    ce40:	2800      	cmp	r0, #0
    ce42:	d001      	beq.n	ce48 <_svfprintf_r+0xc28>
    ce44:	f7ff fa73 	bl	c32e <_svfprintf_r+0x10e>
    ce48:	ab16      	add	r3, sp, #88	; 0x58
    ce4a:	7fdb      	ldrb	r3, [r3, #31]
    ce4c:	68bc      	ldr	r4, [r7, #8]
    ce4e:	4698      	mov	r8, r3
    ce50:	ae32      	add	r6, sp, #200	; 0xc8
    ce52:	e560      	b.n	c916 <_svfprintf_r+0x6f6>
    ce54:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ce56:	1e5d      	subs	r5, r3, #1
    ce58:	2d00      	cmp	r5, #0
    ce5a:	dc00      	bgt.n	ce5e <_svfprintf_r+0xc3e>
    ce5c:	e666      	b.n	cb2c <_svfprintf_r+0x90c>
    ce5e:	4b9c      	ldr	r3, [pc, #624]	; (d0d0 <_svfprintf_r+0xeb0>)
    ce60:	4699      	mov	r9, r3
    ce62:	2d10      	cmp	r5, #16
    ce64:	dd29      	ble.n	ceba <_svfprintf_r+0xc9a>
    ce66:	2310      	movs	r3, #16
    ce68:	0032      	movs	r2, r6
    ce6a:	469a      	mov	sl, r3
    ce6c:	002e      	movs	r6, r5
    ce6e:	0021      	movs	r1, r4
    ce70:	4643      	mov	r3, r8
    ce72:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ce74:	464d      	mov	r5, r9
    ce76:	e003      	b.n	ce80 <_svfprintf_r+0xc60>
    ce78:	3e10      	subs	r6, #16
    ce7a:	3208      	adds	r2, #8
    ce7c:	2e10      	cmp	r6, #16
    ce7e:	dd17      	ble.n	ceb0 <_svfprintf_r+0xc90>
    ce80:	4650      	mov	r0, sl
    ce82:	3110      	adds	r1, #16
    ce84:	3301      	adds	r3, #1
    ce86:	6015      	str	r5, [r2, #0]
    ce88:	6050      	str	r0, [r2, #4]
    ce8a:	60b9      	str	r1, [r7, #8]
    ce8c:	607b      	str	r3, [r7, #4]
    ce8e:	2b07      	cmp	r3, #7
    ce90:	ddf2      	ble.n	ce78 <_svfprintf_r+0xc58>
    ce92:	003a      	movs	r2, r7
    ce94:	9906      	ldr	r1, [sp, #24]
    ce96:	0020      	movs	r0, r4
    ce98:	f006 ff74 	bl	13d84 <__ssprint_r>
    ce9c:	2800      	cmp	r0, #0
    ce9e:	d001      	beq.n	cea4 <_svfprintf_r+0xc84>
    cea0:	f7ff fa45 	bl	c32e <_svfprintf_r+0x10e>
    cea4:	3e10      	subs	r6, #16
    cea6:	68b9      	ldr	r1, [r7, #8]
    cea8:	687b      	ldr	r3, [r7, #4]
    ceaa:	aa32      	add	r2, sp, #200	; 0xc8
    ceac:	2e10      	cmp	r6, #16
    ceae:	dce7      	bgt.n	ce80 <_svfprintf_r+0xc60>
    ceb0:	46a9      	mov	r9, r5
    ceb2:	000c      	movs	r4, r1
    ceb4:	0035      	movs	r5, r6
    ceb6:	4698      	mov	r8, r3
    ceb8:	0016      	movs	r6, r2
    ceba:	464b      	mov	r3, r9
    cebc:	6075      	str	r5, [r6, #4]
    cebe:	6033      	str	r3, [r6, #0]
    cec0:	1964      	adds	r4, r4, r5
    cec2:	e629      	b.n	cb18 <_svfprintf_r+0x8f8>
    cec4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cec6:	681a      	ldr	r2, [r3, #0]
    cec8:	f7ff fbfb 	bl	c6c2 <_svfprintf_r+0x4a2>
    cecc:	6813      	ldr	r3, [r2, #0]
    cece:	9307      	str	r3, [sp, #28]
    ced0:	f7ff fa82 	bl	c3d8 <_svfprintf_r+0x1b8>
    ced4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ced6:	681a      	ldr	r2, [r3, #0]
    ced8:	f7ff fb84 	bl	c5e4 <_svfprintf_r+0x3c4>
    cedc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cede:	681a      	ldr	r2, [r3, #0]
    cee0:	f7ff fbd1 	bl	c686 <_svfprintf_r+0x466>
    cee4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cee6:	68ba      	ldr	r2, [r7, #8]
    cee8:	6033      	str	r3, [r6, #0]
    ceea:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ceec:	469c      	mov	ip, r3
    ceee:	6073      	str	r3, [r6, #4]
    cef0:	687b      	ldr	r3, [r7, #4]
    cef2:	4462      	add	r2, ip
    cef4:	3301      	adds	r3, #1
    cef6:	0014      	movs	r4, r2
    cef8:	60ba      	str	r2, [r7, #8]
    cefa:	607b      	str	r3, [r7, #4]
    cefc:	2b07      	cmp	r3, #7
    cefe:	dd00      	ble.n	cf02 <_svfprintf_r+0xce2>
    cf00:	e202      	b.n	d308 <_svfprintf_r+0x10e8>
    cf02:	3608      	adds	r6, #8
    cf04:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cf06:	1e5d      	subs	r5, r3, #1
    cf08:	2d00      	cmp	r5, #0
    cf0a:	dc00      	bgt.n	cf0e <_svfprintf_r+0xcee>
    cf0c:	e57e      	b.n	ca0c <_svfprintf_r+0x7ec>
    cf0e:	4a70      	ldr	r2, [pc, #448]	; (d0d0 <_svfprintf_r+0xeb0>)
    cf10:	687b      	ldr	r3, [r7, #4]
    cf12:	4691      	mov	r9, r2
    cf14:	2d10      	cmp	r5, #16
    cf16:	dd25      	ble.n	cf64 <_svfprintf_r+0xd44>
    cf18:	2210      	movs	r2, #16
    cf1a:	0021      	movs	r1, r4
    cf1c:	4690      	mov	r8, r2
    cf1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    cf20:	0032      	movs	r2, r6
    cf22:	002e      	movs	r6, r5
    cf24:	464d      	mov	r5, r9
    cf26:	e003      	b.n	cf30 <_svfprintf_r+0xd10>
    cf28:	3208      	adds	r2, #8
    cf2a:	3e10      	subs	r6, #16
    cf2c:	2e10      	cmp	r6, #16
    cf2e:	dd15      	ble.n	cf5c <_svfprintf_r+0xd3c>
    cf30:	4640      	mov	r0, r8
    cf32:	3110      	adds	r1, #16
    cf34:	3301      	adds	r3, #1
    cf36:	6015      	str	r5, [r2, #0]
    cf38:	6050      	str	r0, [r2, #4]
    cf3a:	60b9      	str	r1, [r7, #8]
    cf3c:	607b      	str	r3, [r7, #4]
    cf3e:	2b07      	cmp	r3, #7
    cf40:	ddf2      	ble.n	cf28 <_svfprintf_r+0xd08>
    cf42:	003a      	movs	r2, r7
    cf44:	9906      	ldr	r1, [sp, #24]
    cf46:	0020      	movs	r0, r4
    cf48:	f006 ff1c 	bl	13d84 <__ssprint_r>
    cf4c:	2800      	cmp	r0, #0
    cf4e:	d001      	beq.n	cf54 <_svfprintf_r+0xd34>
    cf50:	f7ff f9ed 	bl	c32e <_svfprintf_r+0x10e>
    cf54:	68b9      	ldr	r1, [r7, #8]
    cf56:	687b      	ldr	r3, [r7, #4]
    cf58:	aa32      	add	r2, sp, #200	; 0xc8
    cf5a:	e7e6      	b.n	cf2a <_svfprintf_r+0xd0a>
    cf5c:	46a9      	mov	r9, r5
    cf5e:	000c      	movs	r4, r1
    cf60:	0035      	movs	r5, r6
    cf62:	0016      	movs	r6, r2
    cf64:	464a      	mov	r2, r9
    cf66:	1964      	adds	r4, r4, r5
    cf68:	3301      	adds	r3, #1
    cf6a:	6032      	str	r2, [r6, #0]
    cf6c:	6075      	str	r5, [r6, #4]
    cf6e:	60bc      	str	r4, [r7, #8]
    cf70:	607b      	str	r3, [r7, #4]
    cf72:	2b07      	cmp	r3, #7
    cf74:	dc00      	bgt.n	cf78 <_svfprintf_r+0xd58>
    cf76:	e548      	b.n	ca0a <_svfprintf_r+0x7ea>
    cf78:	e5e5      	b.n	cb46 <_svfprintf_r+0x926>
    cf7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cf7c:	2b09      	cmp	r3, #9
    cf7e:	d900      	bls.n	cf82 <_svfprintf_r+0xd62>
    cf80:	e730      	b.n	cde4 <_svfprintf_r+0xbc4>
    cf82:	9c08      	ldr	r4, [sp, #32]
    cf84:	2227      	movs	r2, #39	; 0x27
    cf86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cf88:	a928      	add	r1, sp, #160	; 0xa0
    cf8a:	3330      	adds	r3, #48	; 0x30
    cf8c:	548b      	strb	r3, [r1, r2]
    cf8e:	2301      	movs	r3, #1
    cf90:	aa16      	add	r2, sp, #88	; 0x58
    cf92:	4694      	mov	ip, r2
    cf94:	930e      	str	r3, [sp, #56]	; 0x38
    cf96:	336e      	adds	r3, #110	; 0x6e
    cf98:	4463      	add	r3, ip
    cf9a:	9408      	str	r4, [sp, #32]
    cf9c:	9311      	str	r3, [sp, #68]	; 0x44
    cf9e:	f7ff fa4f 	bl	c440 <_svfprintf_r+0x220>
    cfa2:	2b30      	cmp	r3, #48	; 0x30
    cfa4:	d100      	bne.n	cfa8 <_svfprintf_r+0xd88>
    cfa6:	e20b      	b.n	d3c0 <_svfprintf_r+0x11a0>
    cfa8:	2330      	movs	r3, #48	; 0x30
    cfaa:	3a02      	subs	r2, #2
    cfac:	7013      	strb	r3, [r2, #0]
    cfae:	ab32      	add	r3, sp, #200	; 0xc8
    cfb0:	1a9b      	subs	r3, r3, r2
    cfb2:	930e      	str	r3, [sp, #56]	; 0x38
    cfb4:	9211      	str	r2, [sp, #68]	; 0x44
    cfb6:	f7ff fa43 	bl	c440 <_svfprintf_r+0x220>
    cfba:	46b0      	mov	r8, r6
    cfbc:	46a1      	mov	r9, r4
    cfbe:	0016      	movs	r6, r2
    cfc0:	000c      	movs	r4, r1
    cfc2:	464a      	mov	r2, r9
    cfc4:	6032      	str	r2, [r6, #0]
    cfc6:	4642      	mov	r2, r8
    cfc8:	4444      	add	r4, r8
    cfca:	3301      	adds	r3, #1
    cfcc:	6072      	str	r2, [r6, #4]
    cfce:	60bc      	str	r4, [r7, #8]
    cfd0:	607b      	str	r3, [r7, #4]
    cfd2:	2b07      	cmp	r3, #7
    cfd4:	dd00      	ble.n	cfd8 <_svfprintf_r+0xdb8>
    cfd6:	e29c      	b.n	d512 <_svfprintf_r+0x12f2>
    cfd8:	3608      	adds	r6, #8
    cfda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cfdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cfde:	4293      	cmp	r3, r2
    cfe0:	db4c      	blt.n	d07c <_svfprintf_r+0xe5c>
    cfe2:	9a08      	ldr	r2, [sp, #32]
    cfe4:	07d2      	lsls	r2, r2, #31
    cfe6:	d449      	bmi.n	d07c <_svfprintf_r+0xe5c>
    cfe8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    cfea:	9913      	ldr	r1, [sp, #76]	; 0x4c
    cfec:	1ad3      	subs	r3, r2, r3
    cfee:	1a52      	subs	r2, r2, r1
    cff0:	4690      	mov	r8, r2
    cff2:	429a      	cmp	r2, r3
    cff4:	dd00      	ble.n	cff8 <_svfprintf_r+0xdd8>
    cff6:	4698      	mov	r8, r3
    cff8:	4642      	mov	r2, r8
    cffa:	2a00      	cmp	r2, #0
    cffc:	dd0f      	ble.n	d01e <_svfprintf_r+0xdfe>
    cffe:	9913      	ldr	r1, [sp, #76]	; 0x4c
    d000:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d002:	468c      	mov	ip, r1
    d004:	4462      	add	r2, ip
    d006:	6032      	str	r2, [r6, #0]
    d008:	4642      	mov	r2, r8
    d00a:	6072      	str	r2, [r6, #4]
    d00c:	687a      	ldr	r2, [r7, #4]
    d00e:	4444      	add	r4, r8
    d010:	3201      	adds	r2, #1
    d012:	60bc      	str	r4, [r7, #8]
    d014:	607a      	str	r2, [r7, #4]
    d016:	2a07      	cmp	r2, #7
    d018:	dd00      	ble.n	d01c <_svfprintf_r+0xdfc>
    d01a:	e286      	b.n	d52a <_svfprintf_r+0x130a>
    d01c:	3608      	adds	r6, #8
    d01e:	4642      	mov	r2, r8
    d020:	43d5      	mvns	r5, r2
    d022:	17ed      	asrs	r5, r5, #31
    d024:	4015      	ands	r5, r2
    d026:	1b5d      	subs	r5, r3, r5
    d028:	2d00      	cmp	r5, #0
    d02a:	dc00      	bgt.n	d02e <_svfprintf_r+0xe0e>
    d02c:	e4ee      	b.n	ca0c <_svfprintf_r+0x7ec>
    d02e:	4a28      	ldr	r2, [pc, #160]	; (d0d0 <_svfprintf_r+0xeb0>)
    d030:	687b      	ldr	r3, [r7, #4]
    d032:	4691      	mov	r9, r2
    d034:	2d10      	cmp	r5, #16
    d036:	dd95      	ble.n	cf64 <_svfprintf_r+0xd44>
    d038:	2210      	movs	r2, #16
    d03a:	0021      	movs	r1, r4
    d03c:	4690      	mov	r8, r2
    d03e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    d040:	0032      	movs	r2, r6
    d042:	002e      	movs	r6, r5
    d044:	464d      	mov	r5, r9
    d046:	e003      	b.n	d050 <_svfprintf_r+0xe30>
    d048:	3208      	adds	r2, #8
    d04a:	3e10      	subs	r6, #16
    d04c:	2e10      	cmp	r6, #16
    d04e:	dd85      	ble.n	cf5c <_svfprintf_r+0xd3c>
    d050:	4640      	mov	r0, r8
    d052:	3110      	adds	r1, #16
    d054:	3301      	adds	r3, #1
    d056:	6015      	str	r5, [r2, #0]
    d058:	6050      	str	r0, [r2, #4]
    d05a:	60b9      	str	r1, [r7, #8]
    d05c:	607b      	str	r3, [r7, #4]
    d05e:	2b07      	cmp	r3, #7
    d060:	ddf2      	ble.n	d048 <_svfprintf_r+0xe28>
    d062:	003a      	movs	r2, r7
    d064:	9906      	ldr	r1, [sp, #24]
    d066:	0020      	movs	r0, r4
    d068:	f006 fe8c 	bl	13d84 <__ssprint_r>
    d06c:	2800      	cmp	r0, #0
    d06e:	d001      	beq.n	d074 <_svfprintf_r+0xe54>
    d070:	f7ff f95d 	bl	c32e <_svfprintf_r+0x10e>
    d074:	68b9      	ldr	r1, [r7, #8]
    d076:	687b      	ldr	r3, [r7, #4]
    d078:	aa32      	add	r2, sp, #200	; 0xc8
    d07a:	e7e6      	b.n	d04a <_svfprintf_r+0xe2a>
    d07c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    d07e:	6032      	str	r2, [r6, #0]
    d080:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d082:	4694      	mov	ip, r2
    d084:	6072      	str	r2, [r6, #4]
    d086:	687a      	ldr	r2, [r7, #4]
    d088:	4464      	add	r4, ip
    d08a:	3201      	adds	r2, #1
    d08c:	60bc      	str	r4, [r7, #8]
    d08e:	607a      	str	r2, [r7, #4]
    d090:	2a07      	cmp	r2, #7
    d092:	dd00      	ble.n	d096 <_svfprintf_r+0xe76>
    d094:	e230      	b.n	d4f8 <_svfprintf_r+0x12d8>
    d096:	3608      	adds	r6, #8
    d098:	e7a6      	b.n	cfe8 <_svfprintf_r+0xdc8>
    d09a:	003a      	movs	r2, r7
    d09c:	9906      	ldr	r1, [sp, #24]
    d09e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d0a0:	f006 fe70 	bl	13d84 <__ssprint_r>
    d0a4:	2800      	cmp	r0, #0
    d0a6:	d001      	beq.n	d0ac <_svfprintf_r+0xe8c>
    d0a8:	f7ff f941 	bl	c32e <_svfprintf_r+0x10e>
    d0ac:	68bc      	ldr	r4, [r7, #8]
    d0ae:	687b      	ldr	r3, [r7, #4]
    d0b0:	ae32      	add	r6, sp, #200	; 0xc8
    d0b2:	e513      	b.n	cadc <_svfprintf_r+0x8bc>
    d0b4:	003a      	movs	r2, r7
    d0b6:	9906      	ldr	r1, [sp, #24]
    d0b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    d0ba:	f006 fe63 	bl	13d84 <__ssprint_r>
    d0be:	2800      	cmp	r0, #0
    d0c0:	d001      	beq.n	d0c6 <_svfprintf_r+0xea6>
    d0c2:	f7ff f934 	bl	c32e <_svfprintf_r+0x10e>
    d0c6:	687b      	ldr	r3, [r7, #4]
    d0c8:	68bc      	ldr	r4, [r7, #8]
    d0ca:	4698      	mov	r8, r3
    d0cc:	ae32      	add	r6, sp, #200	; 0xc8
    d0ce:	e513      	b.n	caf8 <_svfprintf_r+0x8d8>
    d0d0:	00018cf4 	.word	0x00018cf4
    d0d4:	2307      	movs	r3, #7
    d0d6:	3207      	adds	r2, #7
    d0d8:	439a      	bics	r2, r3
    d0da:	3301      	adds	r3, #1
    d0dc:	469c      	mov	ip, r3
    d0de:	4494      	add	ip, r2
    d0e0:	4663      	mov	r3, ip
    d0e2:	930f      	str	r3, [sp, #60]	; 0x3c
    d0e4:	6853      	ldr	r3, [r2, #4]
    d0e6:	6812      	ldr	r2, [r2, #0]
    d0e8:	930d      	str	r3, [sp, #52]	; 0x34
    d0ea:	920c      	str	r2, [sp, #48]	; 0x30
    d0ec:	2b00      	cmp	r3, #0
    d0ee:	db01      	blt.n	d0f4 <_svfprintf_r+0xed4>
    d0f0:	f7ff f97a 	bl	c3e8 <_svfprintf_r+0x1c8>
    d0f4:	980c      	ldr	r0, [sp, #48]	; 0x30
    d0f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    d0f8:	2300      	movs	r3, #0
    d0fa:	4242      	negs	r2, r0
    d0fc:	418b      	sbcs	r3, r1
    d0fe:	0011      	movs	r1, r2
    d100:	001a      	movs	r2, r3
    d102:	232d      	movs	r3, #45	; 0x2d
    d104:	a816      	add	r0, sp, #88	; 0x58
    d106:	77c3      	strb	r3, [r0, #31]
    d108:	0008      	movs	r0, r1
    d10a:	4310      	orrs	r0, r2
    d10c:	910c      	str	r1, [sp, #48]	; 0x30
    d10e:	920d      	str	r2, [sp, #52]	; 0x34
    d110:	4698      	mov	r8, r3
    d112:	0002      	movs	r2, r0
    d114:	3b2c      	subs	r3, #44	; 0x2c
    d116:	f7ff f970 	bl	c3fa <_svfprintf_r+0x1da>
    d11a:	003a      	movs	r2, r7
    d11c:	9906      	ldr	r1, [sp, #24]
    d11e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d120:	f006 fe30 	bl	13d84 <__ssprint_r>
    d124:	2800      	cmp	r0, #0
    d126:	d001      	beq.n	d12c <_svfprintf_r+0xf0c>
    d128:	f7ff f901 	bl	c32e <_svfprintf_r+0x10e>
    d12c:	68bc      	ldr	r4, [r7, #8]
    d12e:	ae32      	add	r6, sp, #200	; 0xc8
    d130:	e418      	b.n	c964 <_svfprintf_r+0x744>
    d132:	9916      	ldr	r1, [sp, #88]	; 0x58
    d134:	9d15      	ldr	r5, [sp, #84]	; 0x54
    d136:	000a      	movs	r2, r1
    d138:	0008      	movs	r0, r1
    d13a:	002b      	movs	r3, r5
    d13c:	0029      	movs	r1, r5
    d13e:	f008 f8fb 	bl	15338 <__aeabi_dcmpun>
    d142:	2800      	cmp	r0, #0
    d144:	d000      	beq.n	d148 <_svfprintf_r+0xf28>
    d146:	e2e6      	b.n	d716 <_svfprintf_r+0x14f6>
    d148:	4653      	mov	r3, sl
    d14a:	3301      	adds	r3, #1
    d14c:	d100      	bne.n	d150 <_svfprintf_r+0xf30>
    d14e:	e20d      	b.n	d56c <_svfprintf_r+0x134c>
    d150:	2320      	movs	r3, #32
    d152:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d154:	439a      	bics	r2, r3
    d156:	920e      	str	r2, [sp, #56]	; 0x38
    d158:	2a47      	cmp	r2, #71	; 0x47
    d15a:	d100      	bne.n	d15e <_svfprintf_r+0xf3e>
    d15c:	e11c      	b.n	d398 <_svfprintf_r+0x1178>
    d15e:	2380      	movs	r3, #128	; 0x80
    d160:	005b      	lsls	r3, r3, #1
    d162:	4323      	orrs	r3, r4
    d164:	9308      	str	r3, [sp, #32]
    d166:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d168:	2b00      	cmp	r3, #0
    d16a:	da00      	bge.n	d16e <_svfprintf_r+0xf4e>
    d16c:	e221      	b.n	d5b2 <_svfprintf_r+0x1392>
    d16e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d170:	9307      	str	r3, [sp, #28]
    d172:	2300      	movs	r3, #0
    d174:	4691      	mov	r9, r2
    d176:	9310      	str	r3, [sp, #64]	; 0x40
    d178:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d17a:	2b66      	cmp	r3, #102	; 0x66
    d17c:	d100      	bne.n	d180 <_svfprintf_r+0xf60>
    d17e:	e1fc      	b.n	d57a <_svfprintf_r+0x135a>
    d180:	2b46      	cmp	r3, #70	; 0x46
    d182:	d100      	bne.n	d186 <_svfprintf_r+0xf66>
    d184:	e0db      	b.n	d33e <_svfprintf_r+0x111e>
    d186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d188:	9809      	ldr	r0, [sp, #36]	; 0x24
    d18a:	3a45      	subs	r2, #69	; 0x45
    d18c:	0013      	movs	r3, r2
    d18e:	4259      	negs	r1, r3
    d190:	4159      	adcs	r1, r3
    d192:	ab20      	add	r3, sp, #128	; 0x80
    d194:	000d      	movs	r5, r1
    d196:	9303      	str	r3, [sp, #12]
    d198:	ab1f      	add	r3, sp, #124	; 0x7c
    d19a:	9302      	str	r3, [sp, #8]
    d19c:	2302      	movs	r3, #2
    d19e:	aa23      	add	r2, sp, #140	; 0x8c
    d1a0:	4455      	add	r5, sl
    d1a2:	921b      	str	r2, [sp, #108]	; 0x6c
    d1a4:	9204      	str	r2, [sp, #16]
    d1a6:	9300      	str	r3, [sp, #0]
    d1a8:	9501      	str	r5, [sp, #4]
    d1aa:	9b07      	ldr	r3, [sp, #28]
    d1ac:	464a      	mov	r2, r9
    d1ae:	f002 ff7f 	bl	100b0 <_dtoa_r>
    d1b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d1b4:	9011      	str	r0, [sp, #68]	; 0x44
    d1b6:	2b67      	cmp	r3, #103	; 0x67
    d1b8:	d000      	beq.n	d1bc <_svfprintf_r+0xf9c>
    d1ba:	e239      	b.n	d630 <_svfprintf_r+0x1410>
    d1bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d1be:	4698      	mov	r8, r3
    d1c0:	44a8      	add	r8, r5
    d1c2:	07e3      	lsls	r3, r4, #31
    d1c4:	d400      	bmi.n	d1c8 <_svfprintf_r+0xfa8>
    d1c6:	e28b      	b.n	d6e0 <_svfprintf_r+0x14c0>
    d1c8:	2300      	movs	r3, #0
    d1ca:	2200      	movs	r2, #0
    d1cc:	4648      	mov	r0, r9
    d1ce:	9907      	ldr	r1, [sp, #28]
    d1d0:	f7fd fd92 	bl	acf8 <__aeabi_dcmpeq>
    d1d4:	4643      	mov	r3, r8
    d1d6:	2800      	cmp	r0, #0
    d1d8:	d10a      	bne.n	d1f0 <_svfprintf_r+0xfd0>
    d1da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d1dc:	4543      	cmp	r3, r8
    d1de:	d207      	bcs.n	d1f0 <_svfprintf_r+0xfd0>
    d1e0:	2130      	movs	r1, #48	; 0x30
    d1e2:	4640      	mov	r0, r8
    d1e4:	1c5a      	adds	r2, r3, #1
    d1e6:	9223      	str	r2, [sp, #140]	; 0x8c
    d1e8:	7019      	strb	r1, [r3, #0]
    d1ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d1ec:	4298      	cmp	r0, r3
    d1ee:	d8f9      	bhi.n	d1e4 <_svfprintf_r+0xfc4>
    d1f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d1f2:	1a9b      	subs	r3, r3, r2
    d1f4:	9314      	str	r3, [sp, #80]	; 0x50
    d1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d1f8:	2b47      	cmp	r3, #71	; 0x47
    d1fa:	d100      	bne.n	d1fe <_svfprintf_r+0xfde>
    d1fc:	e0f6      	b.n	d3ec <_svfprintf_r+0x11cc>
    d1fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d200:	2b65      	cmp	r3, #101	; 0x65
    d202:	dc00      	bgt.n	d206 <_svfprintf_r+0xfe6>
    d204:	e226      	b.n	d654 <_svfprintf_r+0x1434>
    d206:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d208:	2b66      	cmp	r3, #102	; 0x66
    d20a:	d100      	bne.n	d20e <_svfprintf_r+0xfee>
    d20c:	e1f4      	b.n	d5f8 <_svfprintf_r+0x13d8>
    d20e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d210:	9313      	str	r3, [sp, #76]	; 0x4c
    d212:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d214:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d216:	0019      	movs	r1, r3
    d218:	4291      	cmp	r1, r2
    d21a:	dd00      	ble.n	d21e <_svfprintf_r+0xffe>
    d21c:	e1d4      	b.n	d5c8 <_svfprintf_r+0x13a8>
    d21e:	07e3      	lsls	r3, r4, #31
    d220:	d500      	bpl.n	d224 <_svfprintf_r+0x1004>
    d222:	e249      	b.n	d6b8 <_svfprintf_r+0x1498>
    d224:	43d3      	mvns	r3, r2
    d226:	17db      	asrs	r3, r3, #31
    d228:	0011      	movs	r1, r2
    d22a:	401a      	ands	r2, r3
    d22c:	2367      	movs	r3, #103	; 0x67
    d22e:	9207      	str	r2, [sp, #28]
    d230:	910e      	str	r1, [sp, #56]	; 0x38
    d232:	9312      	str	r3, [sp, #72]	; 0x48
    d234:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d236:	2b00      	cmp	r3, #0
    d238:	d000      	beq.n	d23c <_svfprintf_r+0x101c>
    d23a:	e0cf      	b.n	d3dc <_svfprintf_r+0x11bc>
    d23c:	ab16      	add	r3, sp, #88	; 0x58
    d23e:	7fdb      	ldrb	r3, [r3, #31]
    d240:	4698      	mov	r8, r3
    d242:	2300      	movs	r3, #0
    d244:	469a      	mov	sl, r3
    d246:	f7ff f903 	bl	c450 <_svfprintf_r+0x230>
    d24a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d24c:	990a      	ldr	r1, [sp, #40]	; 0x28
    d24e:	6813      	ldr	r3, [r2, #0]
    d250:	6019      	str	r1, [r3, #0]
    d252:	0013      	movs	r3, r2
    d254:	3304      	adds	r3, #4
    d256:	930f      	str	r3, [sp, #60]	; 0x3c
    d258:	f7ff f80d 	bl	c276 <_svfprintf_r+0x56>
    d25c:	003a      	movs	r2, r7
    d25e:	9906      	ldr	r1, [sp, #24]
    d260:	9809      	ldr	r0, [sp, #36]	; 0x24
    d262:	f006 fd8f 	bl	13d84 <__ssprint_r>
    d266:	2800      	cmp	r0, #0
    d268:	d001      	beq.n	d26e <_svfprintf_r+0x104e>
    d26a:	f7ff f860 	bl	c32e <_svfprintf_r+0x10e>
    d26e:	ae32      	add	r6, sp, #200	; 0xc8
    d270:	e48e      	b.n	cb90 <_svfprintf_r+0x970>
    d272:	4bde      	ldr	r3, [pc, #888]	; (d5ec <_svfprintf_r+0x13cc>)
    d274:	3401      	adds	r4, #1
    d276:	6033      	str	r3, [r6, #0]
    d278:	2301      	movs	r3, #1
    d27a:	6073      	str	r3, [r6, #4]
    d27c:	687b      	ldr	r3, [r7, #4]
    d27e:	60bc      	str	r4, [r7, #8]
    d280:	3301      	adds	r3, #1
    d282:	607b      	str	r3, [r7, #4]
    d284:	2b07      	cmp	r3, #7
    d286:	dc7a      	bgt.n	d37e <_svfprintf_r+0x115e>
    d288:	3608      	adds	r6, #8
    d28a:	2800      	cmp	r0, #0
    d28c:	d107      	bne.n	d29e <_svfprintf_r+0x107e>
    d28e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d290:	2b00      	cmp	r3, #0
    d292:	d104      	bne.n	d29e <_svfprintf_r+0x107e>
    d294:	9b08      	ldr	r3, [sp, #32]
    d296:	07db      	lsls	r3, r3, #31
    d298:	d401      	bmi.n	d29e <_svfprintf_r+0x107e>
    d29a:	f7ff fbb7 	bl	ca0c <_svfprintf_r+0x7ec>
    d29e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    d2a0:	6033      	str	r3, [r6, #0]
    d2a2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d2a4:	1919      	adds	r1, r3, r4
    d2a6:	6073      	str	r3, [r6, #4]
    d2a8:	687b      	ldr	r3, [r7, #4]
    d2aa:	60b9      	str	r1, [r7, #8]
    d2ac:	3301      	adds	r3, #1
    d2ae:	607b      	str	r3, [r7, #4]
    d2b0:	2b07      	cmp	r3, #7
    d2b2:	dd00      	ble.n	d2b6 <_svfprintf_r+0x1096>
    d2b4:	e1f2      	b.n	d69c <_svfprintf_r+0x147c>
    d2b6:	0032      	movs	r2, r6
    d2b8:	3208      	adds	r2, #8
    d2ba:	2800      	cmp	r0, #0
    d2bc:	da00      	bge.n	d2c0 <_svfprintf_r+0x10a0>
    d2be:	e1cc      	b.n	d65a <_svfprintf_r+0x143a>
    d2c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    d2c2:	3301      	adds	r3, #1
    d2c4:	6010      	str	r0, [r2, #0]
    d2c6:	9814      	ldr	r0, [sp, #80]	; 0x50
    d2c8:	607b      	str	r3, [r7, #4]
    d2ca:	1844      	adds	r4, r0, r1
    d2cc:	6050      	str	r0, [r2, #4]
    d2ce:	60bc      	str	r4, [r7, #8]
    d2d0:	2b07      	cmp	r3, #7
    d2d2:	dd00      	ble.n	d2d6 <_svfprintf_r+0x10b6>
    d2d4:	e437      	b.n	cb46 <_svfprintf_r+0x926>
    d2d6:	3208      	adds	r2, #8
    d2d8:	0016      	movs	r6, r2
    d2da:	f7ff fb97 	bl	ca0c <_svfprintf_r+0x7ec>
    d2de:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d2e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d2e2:	680b      	ldr	r3, [r1, #0]
    d2e4:	601a      	str	r2, [r3, #0]
    d2e6:	17d2      	asrs	r2, r2, #31
    d2e8:	605a      	str	r2, [r3, #4]
    d2ea:	000b      	movs	r3, r1
    d2ec:	3304      	adds	r3, #4
    d2ee:	930f      	str	r3, [sp, #60]	; 0x3c
    d2f0:	f7fe ffc1 	bl	c276 <_svfprintf_r+0x56>
    d2f4:	464b      	mov	r3, r9
    d2f6:	3101      	adds	r1, #1
    d2f8:	431c      	orrs	r4, r3
    d2fa:	780b      	ldrb	r3, [r1, #0]
    d2fc:	f7fe fff4 	bl	c2e8 <_svfprintf_r+0xc8>
    d300:	4bbb      	ldr	r3, [pc, #748]	; (d5f0 <_svfprintf_r+0x13d0>)
    d302:	9311      	str	r3, [sp, #68]	; 0x44
    d304:	f7ff f937 	bl	c576 <_svfprintf_r+0x356>
    d308:	003a      	movs	r2, r7
    d30a:	9906      	ldr	r1, [sp, #24]
    d30c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d30e:	f006 fd39 	bl	13d84 <__ssprint_r>
    d312:	2800      	cmp	r0, #0
    d314:	d001      	beq.n	d31a <_svfprintf_r+0x10fa>
    d316:	f7ff f80a 	bl	c32e <_svfprintf_r+0x10e>
    d31a:	68bc      	ldr	r4, [r7, #8]
    d31c:	ae32      	add	r6, sp, #200	; 0xc8
    d31e:	e5f1      	b.n	cf04 <_svfprintf_r+0xce4>
    d320:	2140      	movs	r1, #64	; 0x40
    d322:	9809      	ldr	r0, [sp, #36]	; 0x24
    d324:	f7fd fe8e 	bl	b044 <_malloc_r>
    d328:	9b06      	ldr	r3, [sp, #24]
    d32a:	6018      	str	r0, [r3, #0]
    d32c:	6118      	str	r0, [r3, #16]
    d32e:	2800      	cmp	r0, #0
    d330:	d100      	bne.n	d334 <_svfprintf_r+0x1114>
    d332:	e24f      	b.n	d7d4 <_svfprintf_r+0x15b4>
    d334:	2340      	movs	r3, #64	; 0x40
    d336:	9a06      	ldr	r2, [sp, #24]
    d338:	6153      	str	r3, [r2, #20]
    d33a:	f7fe ff8e 	bl	c25a <_svfprintf_r+0x3a>
    d33e:	ab23      	add	r3, sp, #140	; 0x8c
    d340:	931b      	str	r3, [sp, #108]	; 0x6c
    d342:	9304      	str	r3, [sp, #16]
    d344:	ab20      	add	r3, sp, #128	; 0x80
    d346:	9303      	str	r3, [sp, #12]
    d348:	ab1f      	add	r3, sp, #124	; 0x7c
    d34a:	9302      	str	r3, [sp, #8]
    d34c:	4653      	mov	r3, sl
    d34e:	9301      	str	r3, [sp, #4]
    d350:	2303      	movs	r3, #3
    d352:	464a      	mov	r2, r9
    d354:	9300      	str	r3, [sp, #0]
    d356:	9809      	ldr	r0, [sp, #36]	; 0x24
    d358:	9b07      	ldr	r3, [sp, #28]
    d35a:	f002 fea9 	bl	100b0 <_dtoa_r>
    d35e:	4655      	mov	r5, sl
    d360:	9011      	str	r0, [sp, #68]	; 0x44
    d362:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d364:	4698      	mov	r8, r3
    d366:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d368:	44a8      	add	r8, r5
    d36a:	2b46      	cmp	r3, #70	; 0x46
    d36c:	d000      	beq.n	d370 <_svfprintf_r+0x1150>
    d36e:	e72b      	b.n	d1c8 <_svfprintf_r+0xfa8>
    d370:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d372:	781b      	ldrb	r3, [r3, #0]
    d374:	2b30      	cmp	r3, #48	; 0x30
    d376:	d016      	beq.n	d3a6 <_svfprintf_r+0x1186>
    d378:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d37a:	4498      	add	r8, r3
    d37c:	e724      	b.n	d1c8 <_svfprintf_r+0xfa8>
    d37e:	003a      	movs	r2, r7
    d380:	9906      	ldr	r1, [sp, #24]
    d382:	9809      	ldr	r0, [sp, #36]	; 0x24
    d384:	f006 fcfe 	bl	13d84 <__ssprint_r>
    d388:	2800      	cmp	r0, #0
    d38a:	d001      	beq.n	d390 <_svfprintf_r+0x1170>
    d38c:	f7fe ffcf 	bl	c32e <_svfprintf_r+0x10e>
    d390:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d392:	68bc      	ldr	r4, [r7, #8]
    d394:	ae32      	add	r6, sp, #200	; 0xc8
    d396:	e778      	b.n	d28a <_svfprintf_r+0x106a>
    d398:	4653      	mov	r3, sl
    d39a:	2b00      	cmp	r3, #0
    d39c:	d000      	beq.n	d3a0 <_svfprintf_r+0x1180>
    d39e:	e6de      	b.n	d15e <_svfprintf_r+0xf3e>
    d3a0:	3301      	adds	r3, #1
    d3a2:	469a      	mov	sl, r3
    d3a4:	e6db      	b.n	d15e <_svfprintf_r+0xf3e>
    d3a6:	2200      	movs	r2, #0
    d3a8:	2300      	movs	r3, #0
    d3aa:	4648      	mov	r0, r9
    d3ac:	9907      	ldr	r1, [sp, #28]
    d3ae:	f7fd fca3 	bl	acf8 <__aeabi_dcmpeq>
    d3b2:	2800      	cmp	r0, #0
    d3b4:	d1e0      	bne.n	d378 <_svfprintf_r+0x1158>
    d3b6:	2301      	movs	r3, #1
    d3b8:	1b5b      	subs	r3, r3, r5
    d3ba:	931f      	str	r3, [sp, #124]	; 0x7c
    d3bc:	4498      	add	r8, r3
    d3be:	e703      	b.n	d1c8 <_svfprintf_r+0xfa8>
    d3c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d3c2:	ab32      	add	r3, sp, #200	; 0xc8
    d3c4:	1a9b      	subs	r3, r3, r2
    d3c6:	930e      	str	r3, [sp, #56]	; 0x38
    d3c8:	f7ff f83a 	bl	c440 <_svfprintf_r+0x220>
    d3cc:	9811      	ldr	r0, [sp, #68]	; 0x44
    d3ce:	f7fe fbe5 	bl	bb9c <strlen>
    d3d2:	0002      	movs	r2, r0
    d3d4:	900e      	str	r0, [sp, #56]	; 0x38
    d3d6:	0003      	movs	r3, r0
    d3d8:	f7ff f9cd 	bl	c776 <_svfprintf_r+0x556>
    d3dc:	232d      	movs	r3, #45	; 0x2d
    d3de:	aa16      	add	r2, sp, #88	; 0x58
    d3e0:	77d3      	strb	r3, [r2, #31]
    d3e2:	4698      	mov	r8, r3
    d3e4:	2300      	movs	r3, #0
    d3e6:	469a      	mov	sl, r3
    d3e8:	f7ff f835 	bl	c456 <_svfprintf_r+0x236>
    d3ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d3ee:	9313      	str	r3, [sp, #76]	; 0x4c
    d3f0:	1cda      	adds	r2, r3, #3
    d3f2:	db02      	blt.n	d3fa <_svfprintf_r+0x11da>
    d3f4:	459a      	cmp	sl, r3
    d3f6:	db00      	blt.n	d3fa <_svfprintf_r+0x11da>
    d3f8:	e70b      	b.n	d212 <_svfprintf_r+0xff2>
    d3fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d3fc:	3b02      	subs	r3, #2
    d3fe:	9312      	str	r3, [sp, #72]	; 0x48
    d400:	222c      	movs	r2, #44	; 0x2c
    d402:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d404:	2148      	movs	r1, #72	; 0x48
    d406:	1e5d      	subs	r5, r3, #1
    d408:	ab16      	add	r3, sp, #88	; 0x58
    d40a:	189b      	adds	r3, r3, r2
    d40c:	466a      	mov	r2, sp
    d40e:	1852      	adds	r2, r2, r1
    d410:	7812      	ldrb	r2, [r2, #0]
    d412:	951f      	str	r5, [sp, #124]	; 0x7c
    d414:	701a      	strb	r2, [r3, #0]
    d416:	2d00      	cmp	r5, #0
    d418:	da00      	bge.n	d41c <_svfprintf_r+0x11fc>
    d41a:	e1a4      	b.n	d766 <_svfprintf_r+0x1546>
    d41c:	212d      	movs	r1, #45	; 0x2d
    d41e:	232b      	movs	r3, #43	; 0x2b
    d420:	aa16      	add	r2, sp, #88	; 0x58
    d422:	1852      	adds	r2, r2, r1
    d424:	7013      	strb	r3, [r2, #0]
    d426:	2d09      	cmp	r5, #9
    d428:	dc00      	bgt.n	d42c <_svfprintf_r+0x120c>
    d42a:	e14c      	b.n	d6c6 <_svfprintf_r+0x14a6>
    d42c:	aa16      	add	r2, sp, #88	; 0x58
    d42e:	233b      	movs	r3, #59	; 0x3b
    d430:	4694      	mov	ip, r2
    d432:	4463      	add	r3, ip
    d434:	469a      	mov	sl, r3
    d436:	46b1      	mov	r9, r6
    d438:	46a0      	mov	r8, r4
    d43a:	4656      	mov	r6, sl
    d43c:	e000      	b.n	d440 <_svfprintf_r+0x1220>
    d43e:	0026      	movs	r6, r4
    d440:	0028      	movs	r0, r5
    d442:	210a      	movs	r1, #10
    d444:	f7fc f826 	bl	9494 <__aeabi_idivmod>
    d448:	1e74      	subs	r4, r6, #1
    d44a:	3130      	adds	r1, #48	; 0x30
    d44c:	7021      	strb	r1, [r4, #0]
    d44e:	0028      	movs	r0, r5
    d450:	210a      	movs	r1, #10
    d452:	f7fb ff39 	bl	92c8 <__divsi3>
    d456:	0005      	movs	r5, r0
    d458:	2809      	cmp	r0, #9
    d45a:	dcf0      	bgt.n	d43e <_svfprintf_r+0x121e>
    d45c:	0023      	movs	r3, r4
    d45e:	4644      	mov	r4, r8
    d460:	46b0      	mov	r8, r6
    d462:	464e      	mov	r6, r9
    d464:	4699      	mov	r9, r3
    d466:	0003      	movs	r3, r0
    d468:	3330      	adds	r3, #48	; 0x30
    d46a:	b2d8      	uxtb	r0, r3
    d46c:	4643      	mov	r3, r8
    d46e:	3b02      	subs	r3, #2
    d470:	7018      	strb	r0, [r3, #0]
    d472:	459a      	cmp	sl, r3
    d474:	d800      	bhi.n	d478 <_svfprintf_r+0x1258>
    d476:	e1b4      	b.n	d7e2 <_svfprintf_r+0x15c2>
    d478:	4642      	mov	r2, r8
    d47a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    d47c:	4645      	mov	r5, r8
    d47e:	1a99      	subs	r1, r3, r2
    d480:	2301      	movs	r3, #1
    d482:	3107      	adds	r1, #7
    d484:	425b      	negs	r3, r3
    d486:	e001      	b.n	d48c <_svfprintf_r+0x126c>
    d488:	5ce8      	ldrb	r0, [r5, r3]
    d48a:	3301      	adds	r3, #1
    d48c:	aa21      	add	r2, sp, #132	; 0x84
    d48e:	18d2      	adds	r2, r2, r3
    d490:	70d0      	strb	r0, [r2, #3]
    d492:	428b      	cmp	r3, r1
    d494:	d1f8      	bne.n	d488 <_svfprintf_r+0x1268>
    d496:	a916      	add	r1, sp, #88	; 0x58
    d498:	468c      	mov	ip, r1
    d49a:	222e      	movs	r2, #46	; 0x2e
    d49c:	464b      	mov	r3, r9
    d49e:	4462      	add	r2, ip
    d4a0:	4694      	mov	ip, r2
    d4a2:	1afb      	subs	r3, r7, r3
    d4a4:	4463      	add	r3, ip
    d4a6:	aa21      	add	r2, sp, #132	; 0x84
    d4a8:	9914      	ldr	r1, [sp, #80]	; 0x50
    d4aa:	1a9b      	subs	r3, r3, r2
    d4ac:	469c      	mov	ip, r3
    d4ae:	000a      	movs	r2, r1
    d4b0:	4462      	add	r2, ip
    d4b2:	931a      	str	r3, [sp, #104]	; 0x68
    d4b4:	920e      	str	r2, [sp, #56]	; 0x38
    d4b6:	2901      	cmp	r1, #1
    d4b8:	dc00      	bgt.n	d4bc <_svfprintf_r+0x129c>
    d4ba:	e145      	b.n	d748 <_svfprintf_r+0x1528>
    d4bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d4be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d4c0:	4694      	mov	ip, r2
    d4c2:	4463      	add	r3, ip
    d4c4:	001a      	movs	r2, r3
    d4c6:	930e      	str	r3, [sp, #56]	; 0x38
    d4c8:	43db      	mvns	r3, r3
    d4ca:	17db      	asrs	r3, r3, #31
    d4cc:	401a      	ands	r2, r3
    d4ce:	2300      	movs	r3, #0
    d4d0:	9207      	str	r2, [sp, #28]
    d4d2:	9313      	str	r3, [sp, #76]	; 0x4c
    d4d4:	e6ae      	b.n	d234 <_svfprintf_r+0x1014>
    d4d6:	2301      	movs	r3, #1
    d4d8:	425b      	negs	r3, r3
    d4da:	930a      	str	r3, [sp, #40]	; 0x28
    d4dc:	f7fe ff2d 	bl	c33a <_svfprintf_r+0x11a>
    d4e0:	003a      	movs	r2, r7
    d4e2:	9906      	ldr	r1, [sp, #24]
    d4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
    d4e6:	f006 fc4d 	bl	13d84 <__ssprint_r>
    d4ea:	2800      	cmp	r0, #0
    d4ec:	d001      	beq.n	d4f2 <_svfprintf_r+0x12d2>
    d4ee:	f7fe ff1e 	bl	c32e <_svfprintf_r+0x10e>
    d4f2:	68bc      	ldr	r4, [r7, #8]
    d4f4:	ae32      	add	r6, sp, #200	; 0xc8
    d4f6:	e43c      	b.n	cd72 <_svfprintf_r+0xb52>
    d4f8:	003a      	movs	r2, r7
    d4fa:	9906      	ldr	r1, [sp, #24]
    d4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    d4fe:	f006 fc41 	bl	13d84 <__ssprint_r>
    d502:	2800      	cmp	r0, #0
    d504:	d001      	beq.n	d50a <_svfprintf_r+0x12ea>
    d506:	f7fe ff12 	bl	c32e <_svfprintf_r+0x10e>
    d50a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d50c:	68bc      	ldr	r4, [r7, #8]
    d50e:	ae32      	add	r6, sp, #200	; 0xc8
    d510:	e56a      	b.n	cfe8 <_svfprintf_r+0xdc8>
    d512:	003a      	movs	r2, r7
    d514:	9906      	ldr	r1, [sp, #24]
    d516:	9809      	ldr	r0, [sp, #36]	; 0x24
    d518:	f006 fc34 	bl	13d84 <__ssprint_r>
    d51c:	2800      	cmp	r0, #0
    d51e:	d001      	beq.n	d524 <_svfprintf_r+0x1304>
    d520:	f7fe ff05 	bl	c32e <_svfprintf_r+0x10e>
    d524:	68bc      	ldr	r4, [r7, #8]
    d526:	ae32      	add	r6, sp, #200	; 0xc8
    d528:	e557      	b.n	cfda <_svfprintf_r+0xdba>
    d52a:	003a      	movs	r2, r7
    d52c:	9906      	ldr	r1, [sp, #24]
    d52e:	9809      	ldr	r0, [sp, #36]	; 0x24
    d530:	f006 fc28 	bl	13d84 <__ssprint_r>
    d534:	2800      	cmp	r0, #0
    d536:	d001      	beq.n	d53c <_svfprintf_r+0x131c>
    d538:	f7fe fef9 	bl	c32e <_svfprintf_r+0x10e>
    d53c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d53e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    d540:	68bc      	ldr	r4, [r7, #8]
    d542:	1a9b      	subs	r3, r3, r2
    d544:	ae32      	add	r6, sp, #200	; 0xc8
    d546:	e56a      	b.n	d01e <_svfprintf_r+0xdfe>
    d548:	4653      	mov	r3, sl
    d54a:	9307      	str	r3, [sp, #28]
    d54c:	2b06      	cmp	r3, #6
    d54e:	d901      	bls.n	d554 <_svfprintf_r+0x1334>
    d550:	2306      	movs	r3, #6
    d552:	9307      	str	r3, [sp, #28]
    d554:	9b07      	ldr	r3, [sp, #28]
    d556:	950f      	str	r5, [sp, #60]	; 0x3c
    d558:	930e      	str	r3, [sp, #56]	; 0x38
    d55a:	2300      	movs	r3, #0
    d55c:	4698      	mov	r8, r3
    d55e:	469a      	mov	sl, r3
    d560:	9313      	str	r3, [sp, #76]	; 0x4c
    d562:	4b24      	ldr	r3, [pc, #144]	; (d5f4 <_svfprintf_r+0x13d4>)
    d564:	9408      	str	r4, [sp, #32]
    d566:	9311      	str	r3, [sp, #68]	; 0x44
    d568:	f7fe ff78 	bl	c45c <_svfprintf_r+0x23c>
    d56c:	2320      	movs	r3, #32
    d56e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d570:	439a      	bics	r2, r3
    d572:	3b1a      	subs	r3, #26
    d574:	920e      	str	r2, [sp, #56]	; 0x38
    d576:	469a      	mov	sl, r3
    d578:	e5f1      	b.n	d15e <_svfprintf_r+0xf3e>
    d57a:	ab23      	add	r3, sp, #140	; 0x8c
    d57c:	931b      	str	r3, [sp, #108]	; 0x6c
    d57e:	9304      	str	r3, [sp, #16]
    d580:	ab20      	add	r3, sp, #128	; 0x80
    d582:	9303      	str	r3, [sp, #12]
    d584:	ab1f      	add	r3, sp, #124	; 0x7c
    d586:	9302      	str	r3, [sp, #8]
    d588:	4653      	mov	r3, sl
    d58a:	9301      	str	r3, [sp, #4]
    d58c:	2303      	movs	r3, #3
    d58e:	464a      	mov	r2, r9
    d590:	9300      	str	r3, [sp, #0]
    d592:	9809      	ldr	r0, [sp, #36]	; 0x24
    d594:	9b07      	ldr	r3, [sp, #28]
    d596:	f002 fd8b 	bl	100b0 <_dtoa_r>
    d59a:	0003      	movs	r3, r0
    d59c:	4453      	add	r3, sl
    d59e:	9011      	str	r0, [sp, #68]	; 0x44
    d5a0:	4698      	mov	r8, r3
    d5a2:	4655      	mov	r5, sl
    d5a4:	e6e4      	b.n	d370 <_svfprintf_r+0x1150>
    d5a6:	232d      	movs	r3, #45	; 0x2d
    d5a8:	aa16      	add	r2, sp, #88	; 0x58
    d5aa:	77d3      	strb	r3, [r2, #31]
    d5ac:	4698      	mov	r8, r3
    d5ae:	f7fe ffdb 	bl	c568 <_svfprintf_r+0x348>
    d5b2:	2280      	movs	r2, #128	; 0x80
    d5b4:	0612      	lsls	r2, r2, #24
    d5b6:	4694      	mov	ip, r2
    d5b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d5ba:	4699      	mov	r9, r3
    d5bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d5be:	4463      	add	r3, ip
    d5c0:	9307      	str	r3, [sp, #28]
    d5c2:	232d      	movs	r3, #45	; 0x2d
    d5c4:	9310      	str	r3, [sp, #64]	; 0x40
    d5c6:	e5d7      	b.n	d178 <_svfprintf_r+0xf58>
    d5c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d5ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d5cc:	4694      	mov	ip, r2
    d5ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d5d0:	4463      	add	r3, ip
    d5d2:	930e      	str	r3, [sp, #56]	; 0x38
    d5d4:	2a00      	cmp	r2, #0
    d5d6:	dc00      	bgt.n	d5da <_svfprintf_r+0x13ba>
    d5d8:	e0ce      	b.n	d778 <_svfprintf_r+0x1558>
    d5da:	001a      	movs	r2, r3
    d5dc:	43db      	mvns	r3, r3
    d5de:	17db      	asrs	r3, r3, #31
    d5e0:	401a      	ands	r2, r3
    d5e2:	2367      	movs	r3, #103	; 0x67
    d5e4:	9207      	str	r2, [sp, #28]
    d5e6:	9312      	str	r3, [sp, #72]	; 0x48
    d5e8:	e624      	b.n	d234 <_svfprintf_r+0x1014>
    d5ea:	46c0      	nop			; (mov r8, r8)
    d5ec:	00018ce0 	.word	0x00018ce0
    d5f0:	00018ca4 	.word	0x00018ca4
    d5f4:	00018cd8 	.word	0x00018cd8
    d5f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d5fa:	9313      	str	r3, [sp, #76]	; 0x4c
    d5fc:	2b00      	cmp	r3, #0
    d5fe:	dc00      	bgt.n	d602 <_svfprintf_r+0x13e2>
    d600:	e0d5      	b.n	d7ae <_svfprintf_r+0x158e>
    d602:	4652      	mov	r2, sl
    d604:	2a00      	cmp	r2, #0
    d606:	d000      	beq.n	d60a <_svfprintf_r+0x13ea>
    d608:	e092      	b.n	d730 <_svfprintf_r+0x1510>
    d60a:	07e2      	lsls	r2, r4, #31
    d60c:	d500      	bpl.n	d610 <_svfprintf_r+0x13f0>
    d60e:	e08f      	b.n	d730 <_svfprintf_r+0x1510>
    d610:	9307      	str	r3, [sp, #28]
    d612:	930e      	str	r3, [sp, #56]	; 0x38
    d614:	e60e      	b.n	d234 <_svfprintf_r+0x1014>
    d616:	ab16      	add	r3, sp, #88	; 0x58
    d618:	7fdb      	ldrb	r3, [r3, #31]
    d61a:	950f      	str	r5, [sp, #60]	; 0x3c
    d61c:	4698      	mov	r8, r3
    d61e:	4653      	mov	r3, sl
    d620:	9307      	str	r3, [sp, #28]
    d622:	930e      	str	r3, [sp, #56]	; 0x38
    d624:	2300      	movs	r3, #0
    d626:	9408      	str	r4, [sp, #32]
    d628:	469a      	mov	sl, r3
    d62a:	9313      	str	r3, [sp, #76]	; 0x4c
    d62c:	f7fe ff10 	bl	c450 <_svfprintf_r+0x230>
    d630:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d632:	4698      	mov	r8, r3
    d634:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d636:	44a8      	add	r8, r5
    d638:	2b47      	cmp	r3, #71	; 0x47
    d63a:	d000      	beq.n	d63e <_svfprintf_r+0x141e>
    d63c:	e5c4      	b.n	d1c8 <_svfprintf_r+0xfa8>
    d63e:	07e3      	lsls	r3, r4, #31
    d640:	d500      	bpl.n	d644 <_svfprintf_r+0x1424>
    d642:	e68e      	b.n	d362 <_svfprintf_r+0x1142>
    d644:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d646:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d648:	1a9b      	subs	r3, r3, r2
    d64a:	9314      	str	r3, [sp, #80]	; 0x50
    d64c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d64e:	2b47      	cmp	r3, #71	; 0x47
    d650:	d100      	bne.n	d654 <_svfprintf_r+0x1434>
    d652:	e6cb      	b.n	d3ec <_svfprintf_r+0x11cc>
    d654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d656:	9313      	str	r3, [sp, #76]	; 0x4c
    d658:	e6d2      	b.n	d400 <_svfprintf_r+0x11e0>
    d65a:	4244      	negs	r4, r0
    d65c:	3010      	adds	r0, #16
    d65e:	db00      	blt.n	d662 <_svfprintf_r+0x1442>
    d660:	e0d0      	b.n	d804 <_svfprintf_r+0x15e4>
    d662:	486e      	ldr	r0, [pc, #440]	; (d81c <_svfprintf_r+0x15fc>)
    d664:	2610      	movs	r6, #16
    d666:	0005      	movs	r5, r0
    d668:	e003      	b.n	d672 <_svfprintf_r+0x1452>
    d66a:	3208      	adds	r2, #8
    d66c:	3c10      	subs	r4, #16
    d66e:	2c10      	cmp	r4, #16
    d670:	dd38      	ble.n	d6e4 <_svfprintf_r+0x14c4>
    d672:	3110      	adds	r1, #16
    d674:	3301      	adds	r3, #1
    d676:	6015      	str	r5, [r2, #0]
    d678:	6056      	str	r6, [r2, #4]
    d67a:	60b9      	str	r1, [r7, #8]
    d67c:	607b      	str	r3, [r7, #4]
    d67e:	2b07      	cmp	r3, #7
    d680:	ddf3      	ble.n	d66a <_svfprintf_r+0x144a>
    d682:	003a      	movs	r2, r7
    d684:	9906      	ldr	r1, [sp, #24]
    d686:	9809      	ldr	r0, [sp, #36]	; 0x24
    d688:	f006 fb7c 	bl	13d84 <__ssprint_r>
    d68c:	2800      	cmp	r0, #0
    d68e:	d001      	beq.n	d694 <_svfprintf_r+0x1474>
    d690:	f7fe fe4d 	bl	c32e <_svfprintf_r+0x10e>
    d694:	68b9      	ldr	r1, [r7, #8]
    d696:	687b      	ldr	r3, [r7, #4]
    d698:	aa32      	add	r2, sp, #200	; 0xc8
    d69a:	e7e7      	b.n	d66c <_svfprintf_r+0x144c>
    d69c:	003a      	movs	r2, r7
    d69e:	9906      	ldr	r1, [sp, #24]
    d6a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6a2:	f006 fb6f 	bl	13d84 <__ssprint_r>
    d6a6:	2800      	cmp	r0, #0
    d6a8:	d001      	beq.n	d6ae <_svfprintf_r+0x148e>
    d6aa:	f7fe fe40 	bl	c32e <_svfprintf_r+0x10e>
    d6ae:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d6b0:	68b9      	ldr	r1, [r7, #8]
    d6b2:	687b      	ldr	r3, [r7, #4]
    d6b4:	aa32      	add	r2, sp, #200	; 0xc8
    d6b6:	e600      	b.n	d2ba <_svfprintf_r+0x109a>
    d6b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d6ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d6bc:	4694      	mov	ip, r2
    d6be:	4463      	add	r3, ip
    d6c0:	001a      	movs	r2, r3
    d6c2:	930e      	str	r3, [sp, #56]	; 0x38
    d6c4:	e78a      	b.n	d5dc <_svfprintf_r+0x13bc>
    d6c6:	212e      	movs	r1, #46	; 0x2e
    d6c8:	2330      	movs	r3, #48	; 0x30
    d6ca:	aa16      	add	r2, sp, #88	; 0x58
    d6cc:	1852      	adds	r2, r2, r1
    d6ce:	7013      	strb	r3, [r2, #0]
    d6d0:	002b      	movs	r3, r5
    d6d2:	aa16      	add	r2, sp, #88	; 0x58
    d6d4:	3101      	adds	r1, #1
    d6d6:	3330      	adds	r3, #48	; 0x30
    d6d8:	1852      	adds	r2, r2, r1
    d6da:	7013      	strb	r3, [r2, #0]
    d6dc:	ab22      	add	r3, sp, #136	; 0x88
    d6de:	e6e2      	b.n	d4a6 <_svfprintf_r+0x1286>
    d6e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d6e2:	e585      	b.n	d1f0 <_svfprintf_r+0xfd0>
    d6e4:	46a9      	mov	r9, r5
    d6e6:	4648      	mov	r0, r9
    d6e8:	1909      	adds	r1, r1, r4
    d6ea:	3301      	adds	r3, #1
    d6ec:	6010      	str	r0, [r2, #0]
    d6ee:	6054      	str	r4, [r2, #4]
    d6f0:	60b9      	str	r1, [r7, #8]
    d6f2:	3208      	adds	r2, #8
    d6f4:	607b      	str	r3, [r7, #4]
    d6f6:	2b07      	cmp	r3, #7
    d6f8:	dc00      	bgt.n	d6fc <_svfprintf_r+0x14dc>
    d6fa:	e5e1      	b.n	d2c0 <_svfprintf_r+0x10a0>
    d6fc:	003a      	movs	r2, r7
    d6fe:	9906      	ldr	r1, [sp, #24]
    d700:	9809      	ldr	r0, [sp, #36]	; 0x24
    d702:	f006 fb3f 	bl	13d84 <__ssprint_r>
    d706:	2800      	cmp	r0, #0
    d708:	d001      	beq.n	d70e <_svfprintf_r+0x14ee>
    d70a:	f7fe fe10 	bl	c32e <_svfprintf_r+0x10e>
    d70e:	68b9      	ldr	r1, [r7, #8]
    d710:	687b      	ldr	r3, [r7, #4]
    d712:	aa32      	add	r2, sp, #200	; 0xc8
    d714:	e5d4      	b.n	d2c0 <_svfprintf_r+0x10a0>
    d716:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d718:	2b00      	cmp	r3, #0
    d71a:	db38      	blt.n	d78e <_svfprintf_r+0x156e>
    d71c:	ab16      	add	r3, sp, #88	; 0x58
    d71e:	7fdb      	ldrb	r3, [r3, #31]
    d720:	4698      	mov	r8, r3
    d722:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d724:	2b47      	cmp	r3, #71	; 0x47
    d726:	dc2e      	bgt.n	d786 <_svfprintf_r+0x1566>
    d728:	4b3d      	ldr	r3, [pc, #244]	; (d820 <_svfprintf_r+0x1600>)
    d72a:	9311      	str	r3, [sp, #68]	; 0x44
    d72c:	f7fe ff23 	bl	c576 <_svfprintf_r+0x356>
    d730:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d732:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d734:	4694      	mov	ip, r2
    d736:	4463      	add	r3, ip
    d738:	4453      	add	r3, sl
    d73a:	001a      	movs	r2, r3
    d73c:	930e      	str	r3, [sp, #56]	; 0x38
    d73e:	43db      	mvns	r3, r3
    d740:	17db      	asrs	r3, r3, #31
    d742:	401a      	ands	r2, r3
    d744:	9207      	str	r2, [sp, #28]
    d746:	e575      	b.n	d234 <_svfprintf_r+0x1014>
    d748:	2301      	movs	r3, #1
    d74a:	4023      	ands	r3, r4
    d74c:	9313      	str	r3, [sp, #76]	; 0x4c
    d74e:	d000      	beq.n	d752 <_svfprintf_r+0x1532>
    d750:	e6b4      	b.n	d4bc <_svfprintf_r+0x129c>
    d752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d754:	43d3      	mvns	r3, r2
    d756:	17db      	asrs	r3, r3, #31
    d758:	401a      	ands	r2, r3
    d75a:	9207      	str	r2, [sp, #28]
    d75c:	e56a      	b.n	d234 <_svfprintf_r+0x1014>
    d75e:	4a2f      	ldr	r2, [pc, #188]	; (d81c <_svfprintf_r+0x15fc>)
    d760:	687b      	ldr	r3, [r7, #4]
    d762:	4691      	mov	r9, r2
    d764:	e42d      	b.n	cfc2 <_svfprintf_r+0xda2>
    d766:	2301      	movs	r3, #1
    d768:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d76a:	391b      	subs	r1, #27
    d76c:	1a9d      	subs	r5, r3, r2
    d76e:	aa16      	add	r2, sp, #88	; 0x58
    d770:	332c      	adds	r3, #44	; 0x2c
    d772:	1852      	adds	r2, r2, r1
    d774:	7013      	strb	r3, [r2, #0]
    d776:	e656      	b.n	d426 <_svfprintf_r+0x1206>
    d778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d77a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d77c:	1a98      	subs	r0, r3, r2
    d77e:	1c43      	adds	r3, r0, #1
    d780:	001a      	movs	r2, r3
    d782:	930e      	str	r3, [sp, #56]	; 0x38
    d784:	e72a      	b.n	d5dc <_svfprintf_r+0x13bc>
    d786:	4b27      	ldr	r3, [pc, #156]	; (d824 <_svfprintf_r+0x1604>)
    d788:	9311      	str	r3, [sp, #68]	; 0x44
    d78a:	f7fe fef4 	bl	c576 <_svfprintf_r+0x356>
    d78e:	232d      	movs	r3, #45	; 0x2d
    d790:	aa16      	add	r2, sp, #88	; 0x58
    d792:	77d3      	strb	r3, [r2, #31]
    d794:	4698      	mov	r8, r3
    d796:	e7c4      	b.n	d722 <_svfprintf_r+0x1502>
    d798:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d79a:	1d1a      	adds	r2, r3, #4
    d79c:	681b      	ldr	r3, [r3, #0]
    d79e:	469a      	mov	sl, r3
    d7a0:	2b00      	cmp	r3, #0
    d7a2:	db36      	blt.n	d812 <_svfprintf_r+0x15f2>
    d7a4:	784b      	ldrb	r3, [r1, #1]
    d7a6:	920f      	str	r2, [sp, #60]	; 0x3c
    d7a8:	4659      	mov	r1, fp
    d7aa:	f7fe fd9d 	bl	c2e8 <_svfprintf_r+0xc8>
    d7ae:	4653      	mov	r3, sl
    d7b0:	2b00      	cmp	r3, #0
    d7b2:	d101      	bne.n	d7b8 <_svfprintf_r+0x1598>
    d7b4:	07e3      	lsls	r3, r4, #31
    d7b6:	d503      	bpl.n	d7c0 <_svfprintf_r+0x15a0>
    d7b8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    d7ba:	1c58      	adds	r0, r3, #1
    d7bc:	0003      	movs	r3, r0
    d7be:	e7bb      	b.n	d738 <_svfprintf_r+0x1518>
    d7c0:	2301      	movs	r3, #1
    d7c2:	e725      	b.n	d610 <_svfprintf_r+0x13f0>
    d7c4:	ab16      	add	r3, sp, #88	; 0x58
    d7c6:	77d8      	strb	r0, [r3, #31]
    d7c8:	f7fe ff6c 	bl	c6a4 <_svfprintf_r+0x484>
    d7cc:	ab16      	add	r3, sp, #88	; 0x58
    d7ce:	77d8      	strb	r0, [r3, #31]
    d7d0:	f7ff f814 	bl	c7fc <_svfprintf_r+0x5dc>
    d7d4:	230c      	movs	r3, #12
    d7d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d7d8:	6013      	str	r3, [r2, #0]
    d7da:	3b0d      	subs	r3, #13
    d7dc:	930a      	str	r3, [sp, #40]	; 0x28
    d7de:	f7fe fdac 	bl	c33a <_svfprintf_r+0x11a>
    d7e2:	aa16      	add	r2, sp, #88	; 0x58
    d7e4:	232e      	movs	r3, #46	; 0x2e
    d7e6:	4694      	mov	ip, r2
    d7e8:	4463      	add	r3, ip
    d7ea:	e65c      	b.n	d4a6 <_svfprintf_r+0x1286>
    d7ec:	ab16      	add	r3, sp, #88	; 0x58
    d7ee:	77d8      	strb	r0, [r3, #31]
    d7f0:	f7fe fe85 	bl	c4fe <_svfprintf_r+0x2de>
    d7f4:	ab16      	add	r3, sp, #88	; 0x58
    d7f6:	77d8      	strb	r0, [r3, #31]
    d7f8:	f7fe fddd 	bl	c3b6 <_svfprintf_r+0x196>
    d7fc:	ab16      	add	r3, sp, #88	; 0x58
    d7fe:	77d8      	strb	r0, [r3, #31]
    d800:	f7ff f87d 	bl	c8fe <_svfprintf_r+0x6de>
    d804:	4805      	ldr	r0, [pc, #20]	; (d81c <_svfprintf_r+0x15fc>)
    d806:	4681      	mov	r9, r0
    d808:	e76d      	b.n	d6e6 <_svfprintf_r+0x14c6>
    d80a:	ab16      	add	r3, sp, #88	; 0x58
    d80c:	77d8      	strb	r0, [r3, #31]
    d80e:	f7fe ff79 	bl	c704 <_svfprintf_r+0x4e4>
    d812:	2301      	movs	r3, #1
    d814:	425b      	negs	r3, r3
    d816:	469a      	mov	sl, r3
    d818:	e7c4      	b.n	d7a4 <_svfprintf_r+0x1584>
    d81a:	46c0      	nop			; (mov r8, r8)
    d81c:	00018cf4 	.word	0x00018cf4
    d820:	00018ca8 	.word	0x00018ca8
    d824:	00018cac 	.word	0x00018cac

0000d828 <__ssvfscanf_r>:
    d828:	b5f0      	push	{r4, r5, r6, r7, lr}
    d82a:	464e      	mov	r6, r9
    d82c:	4645      	mov	r5, r8
    d82e:	46de      	mov	lr, fp
    d830:	4657      	mov	r7, sl
    d832:	b5e0      	push	{r5, r6, r7, lr}
    d834:	4cce      	ldr	r4, [pc, #824]	; (db70 <__ssvfscanf_r+0x348>)
    d836:	000e      	movs	r6, r1
    d838:	44a5      	add	sp, r4
    d83a:	9307      	str	r3, [sp, #28]
    d83c:	230c      	movs	r3, #12
    d83e:	5ec9      	ldrsh	r1, [r1, r3]
    d840:	2380      	movs	r3, #128	; 0x80
    d842:	019b      	lsls	r3, r3, #6
    d844:	4680      	mov	r8, r0
    d846:	4219      	tst	r1, r3
    d848:	d105      	bne.n	d856 <__ssvfscanf_r+0x2e>
    d84a:	430b      	orrs	r3, r1
    d84c:	81b3      	strh	r3, [r6, #12]
    d84e:	6e71      	ldr	r1, [r6, #100]	; 0x64
    d850:	4bc8      	ldr	r3, [pc, #800]	; (db74 <__ssvfscanf_r+0x34c>)
    d852:	400b      	ands	r3, r1
    d854:	6673      	str	r3, [r6, #100]	; 0x64
    d856:	2300      	movs	r3, #0
    d858:	0014      	movs	r4, r2
    d85a:	9309      	str	r3, [sp, #36]	; 0x24
    d85c:	9305      	str	r3, [sp, #20]
    d85e:	9308      	str	r3, [sp, #32]
    d860:	7823      	ldrb	r3, [r4, #0]
    d862:	1c62      	adds	r2, r4, #1
    d864:	2700      	movs	r7, #0
    d866:	9311      	str	r3, [sp, #68]	; 0x44
    d868:	4692      	mov	sl, r2
    d86a:	2b00      	cmp	r3, #0
    d86c:	d029      	beq.n	d8c2 <__ssvfscanf_r+0x9a>
    d86e:	f004 f835 	bl	118dc <__locale_ctype_ptr>
    d872:	2508      	movs	r5, #8
    d874:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d876:	18c0      	adds	r0, r0, r3
    d878:	7842      	ldrb	r2, [r0, #1]
    d87a:	4015      	ands	r5, r2
    d87c:	d02b      	beq.n	d8d6 <__ssvfscanf_r+0xae>
    d87e:	6873      	ldr	r3, [r6, #4]
    d880:	2408      	movs	r4, #8
    d882:	4645      	mov	r5, r8
    d884:	e00d      	b.n	d8a2 <__ssvfscanf_r+0x7a>
    d886:	f004 f829 	bl	118dc <__locale_ctype_ptr>
    d88a:	6832      	ldr	r2, [r6, #0]
    d88c:	7813      	ldrb	r3, [r2, #0]
    d88e:	18c0      	adds	r0, r0, r3
    d890:	7843      	ldrb	r3, [r0, #1]
    d892:	421c      	tst	r4, r3
    d894:	d00d      	beq.n	d8b2 <__ssvfscanf_r+0x8a>
    d896:	6873      	ldr	r3, [r6, #4]
    d898:	3201      	adds	r2, #1
    d89a:	3b01      	subs	r3, #1
    d89c:	3701      	adds	r7, #1
    d89e:	6073      	str	r3, [r6, #4]
    d8a0:	6032      	str	r2, [r6, #0]
    d8a2:	2b00      	cmp	r3, #0
    d8a4:	dcef      	bgt.n	d886 <__ssvfscanf_r+0x5e>
    d8a6:	0031      	movs	r1, r6
    d8a8:	0028      	movs	r0, r5
    d8aa:	f006 fb3d 	bl	13f28 <__ssrefill_r>
    d8ae:	2800      	cmp	r0, #0
    d8b0:	d0e9      	beq.n	d886 <__ssvfscanf_r+0x5e>
    d8b2:	46a8      	mov	r8, r5
    d8b4:	4654      	mov	r4, sl
    d8b6:	7823      	ldrb	r3, [r4, #0]
    d8b8:	1c62      	adds	r2, r4, #1
    d8ba:	9311      	str	r3, [sp, #68]	; 0x44
    d8bc:	4692      	mov	sl, r2
    d8be:	2b00      	cmp	r3, #0
    d8c0:	d1d5      	bne.n	d86e <__ssvfscanf_r+0x46>
    d8c2:	9808      	ldr	r0, [sp, #32]
    d8c4:	23ad      	movs	r3, #173	; 0xad
    d8c6:	009b      	lsls	r3, r3, #2
    d8c8:	449d      	add	sp, r3
    d8ca:	bc3c      	pop	{r2, r3, r4, r5}
    d8cc:	4690      	mov	r8, r2
    d8ce:	4699      	mov	r9, r3
    d8d0:	46a2      	mov	sl, r4
    d8d2:	46ab      	mov	fp, r5
    d8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8d6:	2b25      	cmp	r3, #37	; 0x25
    d8d8:	d116      	bne.n	d908 <__ssvfscanf_r+0xe0>
    d8da:	7863      	ldrb	r3, [r4, #1]
    d8dc:	2400      	movs	r4, #0
    d8de:	469b      	mov	fp, r3
    d8e0:	2300      	movs	r3, #0
    d8e2:	4699      	mov	r9, r3
    d8e4:	3301      	adds	r3, #1
    d8e6:	9304      	str	r3, [sp, #16]
    d8e8:	2004      	movs	r0, #4
    d8ea:	465b      	mov	r3, fp
    d8ec:	2202      	movs	r2, #2
    d8ee:	46a3      	mov	fp, r4
    d8f0:	4654      	mov	r4, sl
    d8f2:	3401      	adds	r4, #1
    d8f4:	9403      	str	r4, [sp, #12]
    d8f6:	2b78      	cmp	r3, #120	; 0x78
    d8f8:	d900      	bls.n	d8fc <__ssvfscanf_r+0xd4>
    d8fa:	e0d5      	b.n	daa8 <__ssvfscanf_r+0x280>
    d8fc:	499e      	ldr	r1, [pc, #632]	; (db78 <__ssvfscanf_r+0x350>)
    d8fe:	009c      	lsls	r4, r3, #2
    d900:	590c      	ldr	r4, [r1, r4]
    d902:	46a7      	mov	pc, r4
    d904:	9b03      	ldr	r3, [sp, #12]
    d906:	469a      	mov	sl, r3
    d908:	6873      	ldr	r3, [r6, #4]
    d90a:	2b00      	cmp	r3, #0
    d90c:	dc01      	bgt.n	d912 <__ssvfscanf_r+0xea>
    d90e:	f000 fd64 	bl	e3da <__ssvfscanf_r+0xbb2>
    d912:	4652      	mov	r2, sl
    d914:	6833      	ldr	r3, [r6, #0]
    d916:	3a01      	subs	r2, #1
    d918:	7811      	ldrb	r1, [r2, #0]
    d91a:	781a      	ldrb	r2, [r3, #0]
    d91c:	4291      	cmp	r1, r2
    d91e:	d1d0      	bne.n	d8c2 <__ssvfscanf_r+0x9a>
    d920:	6872      	ldr	r2, [r6, #4]
    d922:	3301      	adds	r3, #1
    d924:	3a01      	subs	r2, #1
    d926:	6072      	str	r2, [r6, #4]
    d928:	6033      	str	r3, [r6, #0]
    d92a:	3701      	adds	r7, #1
    d92c:	4654      	mov	r4, sl
    d92e:	e7c2      	b.n	d8b6 <__ssvfscanf_r+0x8e>
    d930:	4655      	mov	r5, sl
    d932:	1c83      	adds	r3, r0, #2
    d934:	d001      	beq.n	d93a <__ssvfscanf_r+0x112>
    d936:	f000 fe1a 	bl	e56e <__ssvfscanf_r+0xd46>
    d93a:	6873      	ldr	r3, [r6, #4]
    d93c:	2b00      	cmp	r3, #0
    d93e:	dd01      	ble.n	d944 <__ssvfscanf_r+0x11c>
    d940:	f000 fc2a 	bl	e198 <__ssvfscanf_r+0x970>
    d944:	0031      	movs	r1, r6
    d946:	4640      	mov	r0, r8
    d948:	f006 faee 	bl	13f28 <__ssrefill_r>
    d94c:	2800      	cmp	r0, #0
    d94e:	d101      	bne.n	d954 <__ssvfscanf_r+0x12c>
    d950:	f000 fc22 	bl	e198 <__ssvfscanf_r+0x970>
    d954:	2d00      	cmp	r5, #0
    d956:	d101      	bne.n	d95c <__ssvfscanf_r+0x134>
    d958:	f000 fc2a 	bl	e1b0 <__ssvfscanf_r+0x988>
    d95c:	9b08      	ldr	r3, [sp, #32]
    d95e:	2b00      	cmp	r3, #0
    d960:	d002      	beq.n	d968 <__ssvfscanf_r+0x140>
    d962:	89b3      	ldrh	r3, [r6, #12]
    d964:	065b      	lsls	r3, r3, #25
    d966:	d5ac      	bpl.n	d8c2 <__ssvfscanf_r+0x9a>
    d968:	2301      	movs	r3, #1
    d96a:	425b      	negs	r3, r3
    d96c:	9308      	str	r3, [sp, #32]
    d96e:	e7a8      	b.n	d8c2 <__ssvfscanf_r+0x9a>
    d970:	4b82      	ldr	r3, [pc, #520]	; (db7c <__ssvfscanf_r+0x354>)
    d972:	465c      	mov	r4, fp
    d974:	9309      	str	r3, [sp, #36]	; 0x24
    d976:	2300      	movs	r3, #0
    d978:	9305      	str	r3, [sp, #20]
    d97a:	3303      	adds	r3, #3
    d97c:	469b      	mov	fp, r3
    d97e:	6873      	ldr	r3, [r6, #4]
    d980:	2b00      	cmp	r3, #0
    d982:	dd27      	ble.n	d9d4 <__ssvfscanf_r+0x1ac>
    d984:	464b      	mov	r3, r9
    d986:	065b      	lsls	r3, r3, #25
    d988:	d42d      	bmi.n	d9e6 <__ssvfscanf_r+0x1be>
    d98a:	2308      	movs	r3, #8
    d98c:	469a      	mov	sl, r3
    d98e:	e001      	b.n	d994 <__ssvfscanf_r+0x16c>
    d990:	3201      	adds	r2, #1
    d992:	6032      	str	r2, [r6, #0]
    d994:	f003 ffa2 	bl	118dc <__locale_ctype_ptr>
    d998:	4651      	mov	r1, sl
    d99a:	6832      	ldr	r2, [r6, #0]
    d99c:	7813      	ldrb	r3, [r2, #0]
    d99e:	18c0      	adds	r0, r0, r3
    d9a0:	7843      	ldrb	r3, [r0, #1]
    d9a2:	4219      	tst	r1, r3
    d9a4:	d01f      	beq.n	d9e6 <__ssvfscanf_r+0x1be>
    d9a6:	6873      	ldr	r3, [r6, #4]
    d9a8:	3701      	adds	r7, #1
    d9aa:	3b01      	subs	r3, #1
    d9ac:	6073      	str	r3, [r6, #4]
    d9ae:	2b00      	cmp	r3, #0
    d9b0:	dcee      	bgt.n	d990 <__ssvfscanf_r+0x168>
    d9b2:	0031      	movs	r1, r6
    d9b4:	4640      	mov	r0, r8
    d9b6:	f006 fab7 	bl	13f28 <__ssrefill_r>
    d9ba:	2800      	cmp	r0, #0
    d9bc:	d0ea      	beq.n	d994 <__ssvfscanf_r+0x16c>
    d9be:	e7cd      	b.n	d95c <__ssvfscanf_r+0x134>
    d9c0:	465c      	mov	r4, fp
    d9c2:	4b6f      	ldr	r3, [pc, #444]	; (db80 <__ssvfscanf_r+0x358>)
    d9c4:	9309      	str	r3, [sp, #36]	; 0x24
    d9c6:	230a      	movs	r3, #10
    d9c8:	9305      	str	r3, [sp, #20]
    d9ca:	3b07      	subs	r3, #7
    d9cc:	469b      	mov	fp, r3
    d9ce:	6873      	ldr	r3, [r6, #4]
    d9d0:	2b00      	cmp	r3, #0
    d9d2:	dcd7      	bgt.n	d984 <__ssvfscanf_r+0x15c>
    d9d4:	0031      	movs	r1, r6
    d9d6:	4640      	mov	r0, r8
    d9d8:	f006 faa6 	bl	13f28 <__ssrefill_r>
    d9dc:	2800      	cmp	r0, #0
    d9de:	d1bd      	bne.n	d95c <__ssvfscanf_r+0x134>
    d9e0:	464b      	mov	r3, r9
    d9e2:	065b      	lsls	r3, r3, #25
    d9e4:	d5d1      	bpl.n	d98a <__ssvfscanf_r+0x162>
    d9e6:	465b      	mov	r3, fp
    d9e8:	2b02      	cmp	r3, #2
    d9ea:	d100      	bne.n	d9ee <__ssvfscanf_r+0x1c6>
    d9ec:	e326      	b.n	e03c <__ssvfscanf_r+0x814>
    d9ee:	dc00      	bgt.n	d9f2 <__ssvfscanf_r+0x1ca>
    d9f0:	e21b      	b.n	de2a <__ssvfscanf_r+0x602>
    d9f2:	465b      	mov	r3, fp
    d9f4:	2b03      	cmp	r3, #3
    d9f6:	d100      	bne.n	d9fa <__ssvfscanf_r+0x1d2>
    d9f8:	e28a      	b.n	df10 <__ssvfscanf_r+0x6e8>
    d9fa:	2b04      	cmp	r3, #4
    d9fc:	d000      	beq.n	da00 <__ssvfscanf_r+0x1d8>
    d9fe:	e25b      	b.n	deb8 <__ssvfscanf_r+0x690>
    da00:	4640      	mov	r0, r8
    da02:	f003 ff7b 	bl	118fc <_localeconv_r>
    da06:	22ae      	movs	r2, #174	; 0xae
    da08:	2100      	movs	r1, #0
    da0a:	6803      	ldr	r3, [r0, #0]
    da0c:	0052      	lsls	r2, r2, #1
    da0e:	930c      	str	r3, [sp, #48]	; 0x30
    da10:	1e63      	subs	r3, r4, #1
    da12:	910d      	str	r1, [sp, #52]	; 0x34
    da14:	4293      	cmp	r3, r2
    da16:	d904      	bls.n	da22 <__ssvfscanf_r+0x1fa>
    da18:	3c5e      	subs	r4, #94	; 0x5e
    da1a:	3cff      	subs	r4, #255	; 0xff
    da1c:	940d      	str	r4, [sp, #52]	; 0x34
    da1e:	245e      	movs	r4, #94	; 0x5e
    da20:	34ff      	adds	r4, #255	; 0xff
    da22:	23f0      	movs	r3, #240	; 0xf0
    da24:	464a      	mov	r2, r9
    da26:	00db      	lsls	r3, r3, #3
    da28:	431a      	orrs	r2, r3
    da2a:	2300      	movs	r3, #0
    da2c:	9304      	str	r3, [sp, #16]
    da2e:	930e      	str	r3, [sp, #56]	; 0x38
    da30:	930f      	str	r3, [sp, #60]	; 0x3c
    da32:	9306      	str	r3, [sp, #24]
    da34:	930b      	str	r3, [sp, #44]	; 0x2c
    da36:	ab54      	add	r3, sp, #336	; 0x150
    da38:	469b      	mov	fp, r3
    da3a:	930a      	str	r3, [sp, #40]	; 0x28
    da3c:	4b51      	ldr	r3, [pc, #324]	; (db84 <__ssvfscanf_r+0x35c>)
    da3e:	4691      	mov	r9, r2
    da40:	469a      	mov	sl, r3
    da42:	002b      	movs	r3, r5
    da44:	003d      	movs	r5, r7
    da46:	465f      	mov	r7, fp
    da48:	469b      	mov	fp, r3
    da4a:	6832      	ldr	r2, [r6, #0]
    da4c:	7811      	ldrb	r1, [r2, #0]
    da4e:	000b      	movs	r3, r1
    da50:	3b2b      	subs	r3, #43	; 0x2b
    da52:	b2db      	uxtb	r3, r3
    da54:	2b4e      	cmp	r3, #78	; 0x4e
    da56:	d900      	bls.n	da5a <__ssvfscanf_r+0x232>
    da58:	e1d6      	b.n	de08 <__ssvfscanf_r+0x5e0>
    da5a:	4650      	mov	r0, sl
    da5c:	009b      	lsls	r3, r3, #2
    da5e:	58c3      	ldr	r3, [r0, r3]
    da60:	469f      	mov	pc, r3
    da62:	2302      	movs	r3, #2
    da64:	465c      	mov	r4, fp
    da66:	469b      	mov	fp, r3
    da68:	e789      	b.n	d97e <__ssvfscanf_r+0x156>
    da6a:	465c      	mov	r4, fp
    da6c:	2388      	movs	r3, #136	; 0x88
    da6e:	464a      	mov	r2, r9
    da70:	009b      	lsls	r3, r3, #2
    da72:	431a      	orrs	r2, r3
    da74:	4b42      	ldr	r3, [pc, #264]	; (db80 <__ssvfscanf_r+0x358>)
    da76:	4691      	mov	r9, r2
    da78:	9309      	str	r3, [sp, #36]	; 0x24
    da7a:	2310      	movs	r3, #16
    da7c:	9305      	str	r3, [sp, #20]
    da7e:	3b0d      	subs	r3, #13
    da80:	469b      	mov	fp, r3
    da82:	e77c      	b.n	d97e <__ssvfscanf_r+0x156>
    da84:	4653      	mov	r3, sl
    da86:	785b      	ldrb	r3, [r3, #1]
    da88:	2b6c      	cmp	r3, #108	; 0x6c
    da8a:	d101      	bne.n	da90 <__ssvfscanf_r+0x268>
    da8c:	f000 fcd0 	bl	e430 <__ssvfscanf_r+0xc08>
    da90:	4649      	mov	r1, r9
    da92:	9c04      	ldr	r4, [sp, #16]
    da94:	4321      	orrs	r1, r4
    da96:	4689      	mov	r9, r1
    da98:	9903      	ldr	r1, [sp, #12]
    da9a:	468a      	mov	sl, r1
    da9c:	4654      	mov	r4, sl
    da9e:	3401      	adds	r4, #1
    daa0:	9403      	str	r4, [sp, #12]
    daa2:	2b78      	cmp	r3, #120	; 0x78
    daa4:	d800      	bhi.n	daa8 <__ssvfscanf_r+0x280>
    daa6:	e729      	b.n	d8fc <__ssvfscanf_r+0xd4>
    daa8:	465c      	mov	r4, fp
    daaa:	469b      	mov	fp, r3
    daac:	f003 ff16 	bl	118dc <__locale_ctype_ptr>
    dab0:	2303      	movs	r3, #3
    dab2:	4458      	add	r0, fp
    dab4:	7842      	ldrb	r2, [r0, #1]
    dab6:	4013      	ands	r3, r2
    dab8:	2b01      	cmp	r3, #1
    daba:	d100      	bne.n	dabe <__ssvfscanf_r+0x296>
    dabc:	e30a      	b.n	e0d4 <__ssvfscanf_r+0x8ac>
    dabe:	4b2f      	ldr	r3, [pc, #188]	; (db7c <__ssvfscanf_r+0x354>)
    dac0:	e780      	b.n	d9c4 <__ssvfscanf_r+0x19c>
    dac2:	465c      	mov	r4, fp
    dac4:	4b2e      	ldr	r3, [pc, #184]	; (db80 <__ssvfscanf_r+0x358>)
    dac6:	9309      	str	r3, [sp, #36]	; 0x24
    dac8:	2308      	movs	r3, #8
    daca:	9305      	str	r3, [sp, #20]
    dacc:	3b05      	subs	r3, #5
    dace:	469b      	mov	fp, r3
    dad0:	e755      	b.n	d97e <__ssvfscanf_r+0x156>
    dad2:	9b03      	ldr	r3, [sp, #12]
    dad4:	469a      	mov	sl, r3
    dad6:	464b      	mov	r3, r9
    dad8:	06db      	lsls	r3, r3, #27
    dada:	d500      	bpl.n	dade <__ssvfscanf_r+0x2b6>
    dadc:	e6ea      	b.n	d8b4 <__ssvfscanf_r+0x8c>
    dade:	464b      	mov	r3, r9
    dae0:	075b      	lsls	r3, r3, #29
    dae2:	d501      	bpl.n	dae8 <__ssvfscanf_r+0x2c0>
    dae4:	f000 fce2 	bl	e4ac <__ssvfscanf_r+0xc84>
    dae8:	464b      	mov	r3, r9
    daea:	07db      	lsls	r3, r3, #31
    daec:	d500      	bpl.n	daf0 <__ssvfscanf_r+0x2c8>
    daee:	e30e      	b.n	e10e <__ssvfscanf_r+0x8e6>
    daf0:	464b      	mov	r3, r9
    daf2:	079b      	lsls	r3, r3, #30
    daf4:	d400      	bmi.n	daf8 <__ssvfscanf_r+0x2d0>
    daf6:	e30a      	b.n	e10e <__ssvfscanf_r+0x8e6>
    daf8:	9907      	ldr	r1, [sp, #28]
    dafa:	17fa      	asrs	r2, r7, #31
    dafc:	680b      	ldr	r3, [r1, #0]
    dafe:	4654      	mov	r4, sl
    db00:	601f      	str	r7, [r3, #0]
    db02:	605a      	str	r2, [r3, #4]
    db04:	000b      	movs	r3, r1
    db06:	3304      	adds	r3, #4
    db08:	9307      	str	r3, [sp, #28]
    db0a:	e6d4      	b.n	d8b6 <__ssvfscanf_r+0x8e>
    db0c:	464b      	mov	r3, r9
    db0e:	4303      	orrs	r3, r0
    db10:	4699      	mov	r9, r3
    db12:	4653      	mov	r3, sl
    db14:	9903      	ldr	r1, [sp, #12]
    db16:	785b      	ldrb	r3, [r3, #1]
    db18:	468a      	mov	sl, r1
    db1a:	e6e9      	b.n	d8f0 <__ssvfscanf_r+0xc8>
    db1c:	465c      	mov	r4, fp
    db1e:	4b17      	ldr	r3, [pc, #92]	; (db7c <__ssvfscanf_r+0x354>)
    db20:	e750      	b.n	d9c4 <__ssvfscanf_r+0x19c>
    db22:	2340      	movs	r3, #64	; 0x40
    db24:	464a      	mov	r2, r9
    db26:	431a      	orrs	r2, r3
    db28:	2300      	movs	r3, #0
    db2a:	465c      	mov	r4, fp
    db2c:	4691      	mov	r9, r2
    db2e:	469b      	mov	fp, r3
    db30:	e725      	b.n	d97e <__ssvfscanf_r+0x156>
    db32:	ab14      	add	r3, sp, #80	; 0x50
    db34:	0018      	movs	r0, r3
    db36:	9903      	ldr	r1, [sp, #12]
    db38:	f004 feda 	bl	128f0 <__sccl>
    db3c:	2340      	movs	r3, #64	; 0x40
    db3e:	464a      	mov	r2, r9
    db40:	431a      	orrs	r2, r3
    db42:	3b3f      	subs	r3, #63	; 0x3f
    db44:	465c      	mov	r4, fp
    db46:	9003      	str	r0, [sp, #12]
    db48:	4691      	mov	r9, r2
    db4a:	469b      	mov	fp, r3
    db4c:	e717      	b.n	d97e <__ssvfscanf_r+0x156>
    db4e:	465c      	mov	r4, fp
    db50:	2380      	movs	r3, #128	; 0x80
    db52:	e78c      	b.n	da6e <__ssvfscanf_r+0x246>
    db54:	464a      	mov	r2, r9
    db56:	2301      	movs	r3, #1
    db58:	431a      	orrs	r2, r3
    db5a:	465c      	mov	r4, fp
    db5c:	4691      	mov	r9, r2
    db5e:	e7b1      	b.n	dac4 <__ssvfscanf_r+0x29c>
    db60:	464b      	mov	r3, r9
    db62:	4313      	orrs	r3, r2
    db64:	e7d4      	b.n	db10 <__ssvfscanf_r+0x2e8>
    db66:	2304      	movs	r3, #4
    db68:	465c      	mov	r4, fp
    db6a:	469b      	mov	fp, r3
    db6c:	e707      	b.n	d97e <__ssvfscanf_r+0x156>
    db6e:	46c0      	nop			; (mov r8, r8)
    db70:	fffffd4c 	.word	0xfffffd4c
    db74:	ffffdfff 	.word	0xffffdfff
    db78:	00018d04 	.word	0x00018d04
    db7c:	0000c1fd 	.word	0x0000c1fd
    db80:	00013b79 	.word	0x00013b79
    db84:	00018ee8 	.word	0x00018ee8
    db88:	2301      	movs	r3, #1
    db8a:	464a      	mov	r2, r9
    db8c:	431a      	orrs	r2, r3
    db8e:	465c      	mov	r4, fp
    db90:	4691      	mov	r9, r2
    db92:	4bc5      	ldr	r3, [pc, #788]	; (dea8 <__ssvfscanf_r+0x680>)
    db94:	e716      	b.n	d9c4 <__ssvfscanf_r+0x19c>
    db96:	4659      	mov	r1, fp
    db98:	008c      	lsls	r4, r1, #2
    db9a:	2130      	movs	r1, #48	; 0x30
    db9c:	4249      	negs	r1, r1
    db9e:	445c      	add	r4, fp
    dba0:	468b      	mov	fp, r1
    dba2:	0064      	lsls	r4, r4, #1
    dba4:	18e3      	adds	r3, r4, r3
    dba6:	449b      	add	fp, r3
    dba8:	4653      	mov	r3, sl
    dbaa:	9903      	ldr	r1, [sp, #12]
    dbac:	785b      	ldrb	r3, [r3, #1]
    dbae:	468a      	mov	sl, r1
    dbb0:	e69e      	b.n	d8f0 <__ssvfscanf_r+0xc8>
    dbb2:	464b      	mov	r3, r9
    dbb4:	2110      	movs	r1, #16
    dbb6:	430b      	orrs	r3, r1
    dbb8:	e7aa      	b.n	db10 <__ssvfscanf_r+0x2e8>
    dbba:	9b04      	ldr	r3, [sp, #16]
    dbbc:	445b      	add	r3, fp
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	d111      	bne.n	dbe6 <__ssvfscanf_r+0x3be>
    dbc2:	4648      	mov	r0, r9
    dbc4:	4bb9      	ldr	r3, [pc, #740]	; (deac <__ssvfscanf_r+0x684>)
    dbc6:	4018      	ands	r0, r3
    dbc8:	4681      	mov	r9, r0
    dbca:	7039      	strb	r1, [r7, #0]
    dbcc:	3701      	adds	r7, #1
    dbce:	6873      	ldr	r3, [r6, #4]
    dbd0:	3c01      	subs	r4, #1
    dbd2:	3b01      	subs	r3, #1
    dbd4:	3501      	adds	r5, #1
    dbd6:	6073      	str	r3, [r6, #4]
    dbd8:	2b00      	cmp	r3, #0
    dbda:	dd23      	ble.n	dc24 <__ssvfscanf_r+0x3fc>
    dbdc:	3201      	adds	r2, #1
    dbde:	6032      	str	r2, [r6, #0]
    dbe0:	2c00      	cmp	r4, #0
    dbe2:	d000      	beq.n	dbe6 <__ssvfscanf_r+0x3be>
    dbe4:	e731      	b.n	da4a <__ssvfscanf_r+0x222>
    dbe6:	465b      	mov	r3, fp
    dbe8:	46bb      	mov	fp, r7
    dbea:	002f      	movs	r7, r5
    dbec:	001d      	movs	r5, r3
    dbee:	9b06      	ldr	r3, [sp, #24]
    dbf0:	2b00      	cmp	r3, #0
    dbf2:	d056      	beq.n	dca2 <__ssvfscanf_r+0x47a>
    dbf4:	e251      	b.n	e09a <__ssvfscanf_r+0x872>
    dbf6:	464b      	mov	r3, r9
    dbf8:	05db      	lsls	r3, r3, #23
    dbfa:	d5de      	bpl.n	dbba <__ssvfscanf_r+0x392>
    dbfc:	2380      	movs	r3, #128	; 0x80
    dbfe:	4649      	mov	r1, r9
    dc00:	4399      	bics	r1, r3
    dc02:	9b06      	ldr	r3, [sp, #24]
    dc04:	4689      	mov	r9, r1
    dc06:	3301      	adds	r3, #1
    dc08:	9306      	str	r3, [sp, #24]
    dc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dc0c:	2b00      	cmp	r3, #0
    dc0e:	d0de      	beq.n	dbce <__ssvfscanf_r+0x3a6>
    dc10:	3b01      	subs	r3, #1
    dc12:	930d      	str	r3, [sp, #52]	; 0x34
    dc14:	6873      	ldr	r3, [r6, #4]
    dc16:	3401      	adds	r4, #1
    dc18:	3b01      	subs	r3, #1
    dc1a:	3c01      	subs	r4, #1
    dc1c:	3501      	adds	r5, #1
    dc1e:	6073      	str	r3, [r6, #4]
    dc20:	2b00      	cmp	r3, #0
    dc22:	dcdb      	bgt.n	dbdc <__ssvfscanf_r+0x3b4>
    dc24:	0031      	movs	r1, r6
    dc26:	4640      	mov	r0, r8
    dc28:	f006 f97e 	bl	13f28 <__ssrefill_r>
    dc2c:	2800      	cmp	r0, #0
    dc2e:	d0d7      	beq.n	dbe0 <__ssvfscanf_r+0x3b8>
    dc30:	e7d9      	b.n	dbe6 <__ssvfscanf_r+0x3be>
    dc32:	2380      	movs	r3, #128	; 0x80
    dc34:	4648      	mov	r0, r9
    dc36:	4203      	tst	r3, r0
    dc38:	d0d5      	beq.n	dbe6 <__ssvfscanf_r+0x3be>
    dc3a:	4398      	bics	r0, r3
    dc3c:	4681      	mov	r9, r0
    dc3e:	e7c4      	b.n	dbca <__ssvfscanf_r+0x3a2>
    dc40:	465b      	mov	r3, fp
    dc42:	2b06      	cmp	r3, #6
    dc44:	d1d0      	bne.n	dbe8 <__ssvfscanf_r+0x3c0>
    dc46:	2307      	movs	r3, #7
    dc48:	469b      	mov	fp, r3
    dc4a:	e7be      	b.n	dbca <__ssvfscanf_r+0x3a2>
    dc4c:	9b04      	ldr	r3, [sp, #16]
    dc4e:	2b00      	cmp	r3, #0
    dc50:	d000      	beq.n	dc54 <__ssvfscanf_r+0x42c>
    dc52:	e121      	b.n	de98 <__ssvfscanf_r+0x670>
    dc54:	9b06      	ldr	r3, [sp, #24]
    dc56:	2b00      	cmp	r3, #0
    dc58:	d106      	bne.n	dc68 <__ssvfscanf_r+0x440>
    dc5a:	23e0      	movs	r3, #224	; 0xe0
    dc5c:	4648      	mov	r0, r9
    dc5e:	00db      	lsls	r3, r3, #3
    dc60:	4018      	ands	r0, r3
    dc62:	4298      	cmp	r0, r3
    dc64:	d100      	bne.n	dc68 <__ssvfscanf_r+0x440>
    dc66:	e3db      	b.n	e420 <__ssvfscanf_r+0xbf8>
    dc68:	465b      	mov	r3, fp
    dc6a:	2b01      	cmp	r3, #1
    dc6c:	d001      	beq.n	dc72 <__ssvfscanf_r+0x44a>
    dc6e:	2b04      	cmp	r3, #4
    dc70:	d1b9      	bne.n	dbe6 <__ssvfscanf_r+0x3be>
    dc72:	465b      	mov	r3, fp
    dc74:	3301      	adds	r3, #1
    dc76:	b2db      	uxtb	r3, r3
    dc78:	469b      	mov	fp, r3
    dc7a:	e7a6      	b.n	dbca <__ssvfscanf_r+0x3a2>
    dc7c:	465b      	mov	r3, fp
    dc7e:	2b00      	cmp	r3, #0
    dc80:	d000      	beq.n	dc84 <__ssvfscanf_r+0x45c>
    dc82:	e0ff      	b.n	de84 <__ssvfscanf_r+0x65c>
    dc84:	9b06      	ldr	r3, [sp, #24]
    dc86:	2b00      	cmp	r3, #0
    dc88:	d000      	beq.n	dc8c <__ssvfscanf_r+0x464>
    dc8a:	e202      	b.n	e092 <__ssvfscanf_r+0x86a>
    dc8c:	23e0      	movs	r3, #224	; 0xe0
    dc8e:	4648      	mov	r0, r9
    dc90:	00db      	lsls	r3, r3, #3
    dc92:	4018      	ands	r0, r3
    dc94:	4298      	cmp	r0, r3
    dc96:	d100      	bne.n	dc9a <__ssvfscanf_r+0x472>
    dc98:	e3ba      	b.n	e410 <__ssvfscanf_r+0xbe8>
    dc9a:	465b      	mov	r3, fp
    dc9c:	46bb      	mov	fp, r7
    dc9e:	002f      	movs	r7, r5
    dca0:	001d      	movs	r5, r3
    dca2:	9b04      	ldr	r3, [sp, #16]
    dca4:	3b01      	subs	r3, #1
    dca6:	2b01      	cmp	r3, #1
    dca8:	d801      	bhi.n	dcae <__ssvfscanf_r+0x486>
    dcaa:	f000 fc63 	bl	e574 <__ssvfscanf_r+0xd4c>
    dcae:	1e6b      	subs	r3, r5, #1
    dcb0:	2b06      	cmp	r3, #6
    dcb2:	d820      	bhi.n	dcf6 <__ssvfscanf_r+0x4ce>
    dcb4:	2d02      	cmp	r5, #2
    dcb6:	d801      	bhi.n	dcbc <__ssvfscanf_r+0x494>
    dcb8:	f000 fc6e 	bl	e598 <__ssvfscanf_r+0xd70>
    dcbc:	2d03      	cmp	r5, #3
    dcbe:	d01a      	beq.n	dcf6 <__ssvfscanf_r+0x4ce>
    dcc0:	3d04      	subs	r5, #4
    dcc2:	b2ed      	uxtb	r5, r5
    dcc4:	43ec      	mvns	r4, r5
    dcc6:	0033      	movs	r3, r6
    dcc8:	445c      	add	r4, fp
    dcca:	46aa      	mov	sl, r5
    dccc:	4646      	mov	r6, r8
    dcce:	0025      	movs	r5, r4
    dcd0:	46b8      	mov	r8, r7
    dcd2:	465c      	mov	r4, fp
    dcd4:	001f      	movs	r7, r3
    dcd6:	3c01      	subs	r4, #1
    dcd8:	7821      	ldrb	r1, [r4, #0]
    dcda:	003a      	movs	r2, r7
    dcdc:	0030      	movs	r0, r6
    dcde:	f006 f8e1 	bl	13ea4 <_sungetc_r>
    dce2:	42a5      	cmp	r5, r4
    dce4:	d1f7      	bne.n	dcd6 <__ssvfscanf_r+0x4ae>
    dce6:	003b      	movs	r3, r7
    dce8:	4647      	mov	r7, r8
    dcea:	4655      	mov	r5, sl
    dcec:	46b0      	mov	r8, r6
    dcee:	46a3      	mov	fp, r4
    dcf0:	001e      	movs	r6, r3
    dcf2:	3f01      	subs	r7, #1
    dcf4:	1b7f      	subs	r7, r7, r5
    dcf6:	464b      	mov	r3, r9
    dcf8:	05db      	lsls	r3, r3, #23
    dcfa:	d519      	bpl.n	dd30 <__ssvfscanf_r+0x508>
    dcfc:	464b      	mov	r3, r9
    dcfe:	055b      	lsls	r3, r3, #21
    dd00:	d501      	bpl.n	dd06 <__ssvfscanf_r+0x4de>
    dd02:	f000 fc5b 	bl	e5bc <__ssvfscanf_r+0xd94>
    dd06:	465b      	mov	r3, fp
    dd08:	1e5c      	subs	r4, r3, #1
    dd0a:	7821      	ldrb	r1, [r4, #0]
    dd0c:	1e7d      	subs	r5, r7, #1
    dd0e:	2965      	cmp	r1, #101	; 0x65
    dd10:	d008      	beq.n	dd24 <__ssvfscanf_r+0x4fc>
    dd12:	2945      	cmp	r1, #69	; 0x45
    dd14:	d006      	beq.n	dd24 <__ssvfscanf_r+0x4fc>
    dd16:	0032      	movs	r2, r6
    dd18:	4640      	mov	r0, r8
    dd1a:	3c01      	subs	r4, #1
    dd1c:	f006 f8c2 	bl	13ea4 <_sungetc_r>
    dd20:	7821      	ldrb	r1, [r4, #0]
    dd22:	1ebd      	subs	r5, r7, #2
    dd24:	0032      	movs	r2, r6
    dd26:	4640      	mov	r0, r8
    dd28:	f006 f8bc 	bl	13ea4 <_sungetc_r>
    dd2c:	002f      	movs	r7, r5
    dd2e:	46a3      	mov	fp, r4
    dd30:	464a      	mov	r2, r9
    dd32:	2310      	movs	r3, #16
    dd34:	4013      	ands	r3, r2
    dd36:	9a03      	ldr	r2, [sp, #12]
    dd38:	4692      	mov	sl, r2
    dd3a:	d000      	beq.n	dd3e <__ssvfscanf_r+0x516>
    dd3c:	e5ba      	b.n	d8b4 <__ssvfscanf_r+0x8c>
    dd3e:	465a      	mov	r2, fp
    dd40:	7013      	strb	r3, [r2, #0]
    dd42:	23c0      	movs	r3, #192	; 0xc0
    dd44:	464a      	mov	r2, r9
    dd46:	00db      	lsls	r3, r3, #3
    dd48:	4013      	ands	r3, r2
    dd4a:	2280      	movs	r2, #128	; 0x80
    dd4c:	00d2      	lsls	r2, r2, #3
    dd4e:	4293      	cmp	r3, r2
    dd50:	d100      	bne.n	dd54 <__ssvfscanf_r+0x52c>
    dd52:	e389      	b.n	e468 <__ssvfscanf_r+0xc40>
    dd54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    dd56:	2b00      	cmp	r3, #0
    dd58:	d000      	beq.n	dd5c <__ssvfscanf_r+0x534>
    dd5a:	e1c0      	b.n	e0de <__ssvfscanf_r+0x8b6>
    dd5c:	2200      	movs	r2, #0
    dd5e:	990a      	ldr	r1, [sp, #40]	; 0x28
    dd60:	4640      	mov	r0, r8
    dd62:	f005 fd63 	bl	1382c <_strtod_r>
    dd66:	464b      	mov	r3, r9
    dd68:	0004      	movs	r4, r0
    dd6a:	000d      	movs	r5, r1
    dd6c:	07db      	lsls	r3, r3, #31
    dd6e:	d403      	bmi.n	dd78 <__ssvfscanf_r+0x550>
    dd70:	464b      	mov	r3, r9
    dd72:	079b      	lsls	r3, r3, #30
    dd74:	d400      	bmi.n	dd78 <__ssvfscanf_r+0x550>
    dd76:	e198      	b.n	e0aa <__ssvfscanf_r+0x882>
    dd78:	9a07      	ldr	r2, [sp, #28]
    dd7a:	6813      	ldr	r3, [r2, #0]
    dd7c:	601c      	str	r4, [r3, #0]
    dd7e:	605d      	str	r5, [r3, #4]
    dd80:	0013      	movs	r3, r2
    dd82:	3304      	adds	r3, #4
    dd84:	9307      	str	r3, [sp, #28]
    dd86:	9b08      	ldr	r3, [sp, #32]
    dd88:	3301      	adds	r3, #1
    dd8a:	9308      	str	r3, [sp, #32]
    dd8c:	9b03      	ldr	r3, [sp, #12]
    dd8e:	469a      	mov	sl, r3
    dd90:	4654      	mov	r4, sl
    dd92:	e590      	b.n	d8b6 <__ssvfscanf_r+0x8e>
    dd94:	465b      	mov	r3, fp
    dd96:	2b02      	cmp	r3, #2
    dd98:	d000      	beq.n	dd9c <__ssvfscanf_r+0x574>
    dd9a:	e725      	b.n	dbe8 <__ssvfscanf_r+0x3c0>
    dd9c:	2303      	movs	r3, #3
    dd9e:	469b      	mov	fp, r3
    dda0:	e713      	b.n	dbca <__ssvfscanf_r+0x3a2>
    dda2:	23a0      	movs	r3, #160	; 0xa0
    dda4:	4648      	mov	r0, r9
    dda6:	00db      	lsls	r3, r3, #3
    dda8:	4003      	ands	r3, r0
    ddaa:	2080      	movs	r0, #128	; 0x80
    ddac:	00c0      	lsls	r0, r0, #3
    ddae:	4283      	cmp	r3, r0
    ddb0:	d007      	beq.n	ddc2 <__ssvfscanf_r+0x59a>
    ddb2:	464b      	mov	r3, r9
    ddb4:	4203      	tst	r3, r0
    ddb6:	d100      	bne.n	ddba <__ssvfscanf_r+0x592>
    ddb8:	e715      	b.n	dbe6 <__ssvfscanf_r+0x3be>
    ddba:	9b06      	ldr	r3, [sp, #24]
    ddbc:	2b00      	cmp	r3, #0
    ddbe:	d100      	bne.n	ddc2 <__ssvfscanf_r+0x59a>
    ddc0:	e76b      	b.n	dc9a <__ssvfscanf_r+0x472>
    ddc2:	2080      	movs	r0, #128	; 0x80
    ddc4:	464b      	mov	r3, r9
    ddc6:	0080      	lsls	r0, r0, #2
    ddc8:	4203      	tst	r3, r0
    ddca:	d104      	bne.n	ddd6 <__ssvfscanf_r+0x5ae>
    ddcc:	9b06      	ldr	r3, [sp, #24]
    ddce:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ddd0:	970e      	str	r7, [sp, #56]	; 0x38
    ddd2:	1a1b      	subs	r3, r3, r0
    ddd4:	930f      	str	r3, [sp, #60]	; 0x3c
    ddd6:	4648      	mov	r0, r9
    ddd8:	4b35      	ldr	r3, [pc, #212]	; (deb0 <__ssvfscanf_r+0x688>)
    ddda:	4018      	ands	r0, r3
    dddc:	0003      	movs	r3, r0
    ddde:	20c0      	movs	r0, #192	; 0xc0
    dde0:	0040      	lsls	r0, r0, #1
    dde2:	4318      	orrs	r0, r3
    dde4:	2300      	movs	r3, #0
    dde6:	4681      	mov	r9, r0
    dde8:	9306      	str	r3, [sp, #24]
    ddea:	e6ee      	b.n	dbca <__ssvfscanf_r+0x3a2>
    ddec:	9b04      	ldr	r3, [sp, #16]
    ddee:	2b01      	cmp	r3, #1
    ddf0:	d000      	beq.n	ddf4 <__ssvfscanf_r+0x5cc>
    ddf2:	e6f8      	b.n	dbe6 <__ssvfscanf_r+0x3be>
    ddf4:	2302      	movs	r3, #2
    ddf6:	9304      	str	r3, [sp, #16]
    ddf8:	e6e7      	b.n	dbca <__ssvfscanf_r+0x3a2>
    ddfa:	465b      	mov	r3, fp
    ddfc:	2b07      	cmp	r3, #7
    ddfe:	d000      	beq.n	de02 <__ssvfscanf_r+0x5da>
    de00:	e6f2      	b.n	dbe8 <__ssvfscanf_r+0x3c0>
    de02:	2308      	movs	r3, #8
    de04:	469b      	mov	fp, r3
    de06:	e6e0      	b.n	dbca <__ssvfscanf_r+0x3a2>
    de08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    de0a:	781b      	ldrb	r3, [r3, #0]
    de0c:	428b      	cmp	r3, r1
    de0e:	d000      	beq.n	de12 <__ssvfscanf_r+0x5ea>
    de10:	e6e9      	b.n	dbe6 <__ssvfscanf_r+0x3be>
    de12:	2080      	movs	r0, #128	; 0x80
    de14:	464b      	mov	r3, r9
    de16:	0080      	lsls	r0, r0, #2
    de18:	4203      	tst	r3, r0
    de1a:	d100      	bne.n	de1e <__ssvfscanf_r+0x5f6>
    de1c:	e6e3      	b.n	dbe6 <__ssvfscanf_r+0x3be>
    de1e:	4825      	ldr	r0, [pc, #148]	; (deb4 <__ssvfscanf_r+0x68c>)
    de20:	4003      	ands	r3, r0
    de22:	4699      	mov	r9, r3
    de24:	9b06      	ldr	r3, [sp, #24]
    de26:	930b      	str	r3, [sp, #44]	; 0x2c
    de28:	e6cf      	b.n	dbca <__ssvfscanf_r+0x3a2>
    de2a:	2b01      	cmp	r3, #1
    de2c:	d144      	bne.n	deb8 <__ssvfscanf_r+0x690>
    de2e:	2c00      	cmp	r4, #0
    de30:	d100      	bne.n	de34 <__ssvfscanf_r+0x60c>
    de32:	3c01      	subs	r4, #1
    de34:	464b      	mov	r3, r9
    de36:	06db      	lsls	r3, r3, #27
    de38:	d400      	bmi.n	de3c <__ssvfscanf_r+0x614>
    de3a:	e1c1      	b.n	e1c0 <__ssvfscanf_r+0x998>
    de3c:	ab14      	add	r3, sp, #80	; 0x50
    de3e:	2500      	movs	r5, #0
    de40:	469a      	mov	sl, r3
    de42:	6832      	ldr	r2, [r6, #0]
    de44:	4651      	mov	r1, sl
    de46:	7813      	ldrb	r3, [r2, #0]
    de48:	5ccb      	ldrb	r3, [r1, r3]
    de4a:	2b00      	cmp	r3, #0
    de4c:	d015      	beq.n	de7a <__ssvfscanf_r+0x652>
    de4e:	6873      	ldr	r3, [r6, #4]
    de50:	3201      	adds	r2, #1
    de52:	3b01      	subs	r3, #1
    de54:	3501      	adds	r5, #1
    de56:	6073      	str	r3, [r6, #4]
    de58:	6032      	str	r2, [r6, #0]
    de5a:	42ac      	cmp	r4, r5
    de5c:	d010      	beq.n	de80 <__ssvfscanf_r+0x658>
    de5e:	2b00      	cmp	r3, #0
    de60:	dcf0      	bgt.n	de44 <__ssvfscanf_r+0x61c>
    de62:	0031      	movs	r1, r6
    de64:	4640      	mov	r0, r8
    de66:	f006 f85f 	bl	13f28 <__ssrefill_r>
    de6a:	2800      	cmp	r0, #0
    de6c:	d108      	bne.n	de80 <__ssvfscanf_r+0x658>
    de6e:	4651      	mov	r1, sl
    de70:	6832      	ldr	r2, [r6, #0]
    de72:	7813      	ldrb	r3, [r2, #0]
    de74:	5ccb      	ldrb	r3, [r1, r3]
    de76:	2b00      	cmp	r3, #0
    de78:	d1e9      	bne.n	de4e <__ssvfscanf_r+0x626>
    de7a:	2d00      	cmp	r5, #0
    de7c:	d100      	bne.n	de80 <__ssvfscanf_r+0x658>
    de7e:	e520      	b.n	d8c2 <__ssvfscanf_r+0x9a>
    de80:	197f      	adds	r7, r7, r5
    de82:	e783      	b.n	dd8c <__ssvfscanf_r+0x564>
    de84:	465b      	mov	r3, fp
    de86:	20fd      	movs	r0, #253	; 0xfd
    de88:	3b03      	subs	r3, #3
    de8a:	4203      	tst	r3, r0
    de8c:	d000      	beq.n	de90 <__ssvfscanf_r+0x668>
    de8e:	e6aa      	b.n	dbe6 <__ssvfscanf_r+0x3be>
    de90:	3304      	adds	r3, #4
    de92:	b2db      	uxtb	r3, r3
    de94:	469b      	mov	fp, r3
    de96:	e698      	b.n	dbca <__ssvfscanf_r+0x3a2>
    de98:	9b04      	ldr	r3, [sp, #16]
    de9a:	2b02      	cmp	r3, #2
    de9c:	d000      	beq.n	dea0 <__ssvfscanf_r+0x678>
    de9e:	e6e3      	b.n	dc68 <__ssvfscanf_r+0x440>
    dea0:	2303      	movs	r3, #3
    dea2:	9304      	str	r3, [sp, #16]
    dea4:	e691      	b.n	dbca <__ssvfscanf_r+0x3a2>
    dea6:	46c0      	nop			; (mov r8, r8)
    dea8:	0000c1fd 	.word	0x0000c1fd
    deac:	fffffe7f 	.word	0xfffffe7f
    deb0:	fffff87f 	.word	0xfffff87f
    deb4:	fffffd7f 	.word	0xfffffd7f
    deb8:	2c00      	cmp	r4, #0
    deba:	d100      	bne.n	debe <__ssvfscanf_r+0x696>
    debc:	3401      	adds	r4, #1
    debe:	464b      	mov	r3, r9
    dec0:	07db      	lsls	r3, r3, #31
    dec2:	d500      	bpl.n	dec6 <__ssvfscanf_r+0x69e>
    dec4:	e1aa      	b.n	e21c <__ssvfscanf_r+0x9f4>
    dec6:	464b      	mov	r3, r9
    dec8:	06db      	lsls	r3, r3, #27
    deca:	d400      	bmi.n	dece <__ssvfscanf_r+0x6a6>
    decc:	e22f      	b.n	e32e <__ssvfscanf_r+0xb06>
    dece:	4643      	mov	r3, r8
    ded0:	2500      	movs	r5, #0
    ded2:	46b8      	mov	r8, r7
    ded4:	001f      	movs	r7, r3
    ded6:	e00c      	b.n	def2 <__ssvfscanf_r+0x6ca>
    ded8:	6832      	ldr	r2, [r6, #0]
    deda:	18ed      	adds	r5, r5, r3
    dedc:	4694      	mov	ip, r2
    dede:	1ae4      	subs	r4, r4, r3
    dee0:	4463      	add	r3, ip
    dee2:	6033      	str	r3, [r6, #0]
    dee4:	0031      	movs	r1, r6
    dee6:	0038      	movs	r0, r7
    dee8:	f006 f81e 	bl	13f28 <__ssrefill_r>
    deec:	2800      	cmp	r0, #0
    deee:	d000      	beq.n	def2 <__ssvfscanf_r+0x6ca>
    def0:	e214      	b.n	e31c <__ssvfscanf_r+0xaf4>
    def2:	6873      	ldr	r3, [r6, #4]
    def4:	42a3      	cmp	r3, r4
    def6:	dbef      	blt.n	ded8 <__ssvfscanf_r+0x6b0>
    def8:	1b1b      	subs	r3, r3, r4
    defa:	6073      	str	r3, [r6, #4]
    defc:	6833      	ldr	r3, [r6, #0]
    defe:	003a      	movs	r2, r7
    df00:	469c      	mov	ip, r3
    df02:	4647      	mov	r7, r8
    df04:	192d      	adds	r5, r5, r4
    df06:	4464      	add	r4, ip
    df08:	4690      	mov	r8, r2
    df0a:	6034      	str	r4, [r6, #0]
    df0c:	197f      	adds	r7, r7, r5
    df0e:	e73d      	b.n	dd8c <__ssvfscanf_r+0x564>
    df10:	22ae      	movs	r2, #174	; 0xae
    df12:	2100      	movs	r1, #0
    df14:	1e63      	subs	r3, r4, #1
    df16:	0052      	lsls	r2, r2, #1
    df18:	468b      	mov	fp, r1
    df1a:	4293      	cmp	r3, r2
    df1c:	d904      	bls.n	df28 <__ssvfscanf_r+0x700>
    df1e:	4bcb      	ldr	r3, [pc, #812]	; (e24c <__ssvfscanf_r+0xa24>)
    df20:	469b      	mov	fp, r3
    df22:	44a3      	add	fp, r4
    df24:	245e      	movs	r4, #94	; 0x5e
    df26:	34ff      	adds	r4, #255	; 0xff
    df28:	23d8      	movs	r3, #216	; 0xd8
    df2a:	464a      	mov	r2, r9
    df2c:	011b      	lsls	r3, r3, #4
    df2e:	431a      	orrs	r2, r3
    df30:	2300      	movs	r3, #0
    df32:	469a      	mov	sl, r3
    df34:	ab54      	add	r3, sp, #336	; 0x150
    df36:	930a      	str	r3, [sp, #40]	; 0x28
    df38:	001d      	movs	r5, r3
    df3a:	003b      	movs	r3, r7
    df3c:	0017      	movs	r7, r2
    df3e:	4699      	mov	r9, r3
    df40:	6832      	ldr	r2, [r6, #0]
    df42:	7811      	ldrb	r1, [r2, #0]
    df44:	000b      	movs	r3, r1
    df46:	3b2b      	subs	r3, #43	; 0x2b
    df48:	b2db      	uxtb	r3, r3
    df4a:	2b4d      	cmp	r3, #77	; 0x4d
    df4c:	d81d      	bhi.n	df8a <__ssvfscanf_r+0x762>
    df4e:	48c0      	ldr	r0, [pc, #768]	; (e250 <__ssvfscanf_r+0xa28>)
    df50:	009b      	lsls	r3, r3, #2
    df52:	58c3      	ldr	r3, [r0, r3]
    df54:	469f      	mov	pc, r3
    df56:	23c0      	movs	r3, #192	; 0xc0
    df58:	2080      	movs	r0, #128	; 0x80
    df5a:	00db      	lsls	r3, r3, #3
    df5c:	403b      	ands	r3, r7
    df5e:	0080      	lsls	r0, r0, #2
    df60:	4283      	cmp	r3, r0
    df62:	d112      	bne.n	df8a <__ssvfscanf_r+0x762>
    df64:	4bbb      	ldr	r3, [pc, #748]	; (e254 <__ssvfscanf_r+0xa2c>)
    df66:	401f      	ands	r7, r3
    df68:	23a0      	movs	r3, #160	; 0xa0
    df6a:	00db      	lsls	r3, r3, #3
    df6c:	431f      	orrs	r7, r3
    df6e:	2310      	movs	r3, #16
    df70:	9305      	str	r3, [sp, #20]
    df72:	6873      	ldr	r3, [r6, #4]
    df74:	7029      	strb	r1, [r5, #0]
    df76:	3b01      	subs	r3, #1
    df78:	3501      	adds	r5, #1
    df7a:	6073      	str	r3, [r6, #4]
    df7c:	2b00      	cmp	r3, #0
    df7e:	dd49      	ble.n	e014 <__ssvfscanf_r+0x7ec>
    df80:	3201      	adds	r2, #1
    df82:	6032      	str	r2, [r6, #0]
    df84:	3c01      	subs	r4, #1
    df86:	2c00      	cmp	r4, #0
    df88:	d1da      	bne.n	df40 <__ssvfscanf_r+0x718>
    df8a:	464b      	mov	r3, r9
    df8c:	46b9      	mov	r9, r7
    df8e:	001f      	movs	r7, r3
    df90:	464b      	mov	r3, r9
    df92:	05db      	lsls	r3, r3, #23
    df94:	d507      	bpl.n	dfa6 <__ssvfscanf_r+0x77e>
    df96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    df98:	429d      	cmp	r5, r3
    df9a:	d900      	bls.n	df9e <__ssvfscanf_r+0x776>
    df9c:	e231      	b.n	e402 <__ssvfscanf_r+0xbda>
    df9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dfa0:	429d      	cmp	r5, r3
    dfa2:	d100      	bne.n	dfa6 <__ssvfscanf_r+0x77e>
    dfa4:	e48d      	b.n	d8c2 <__ssvfscanf_r+0x9a>
    dfa6:	2310      	movs	r3, #16
    dfa8:	464a      	mov	r2, r9
    dfaa:	4013      	ands	r3, r2
    dfac:	d100      	bne.n	dfb0 <__ssvfscanf_r+0x788>
    dfae:	e0b7      	b.n	e120 <__ssvfscanf_r+0x8f8>
    dfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    dfb2:	1aed      	subs	r5, r5, r3
    dfb4:	4455      	add	r5, sl
    dfb6:	197f      	adds	r7, r7, r5
    dfb8:	e6e8      	b.n	dd8c <__ssvfscanf_r+0x564>
    dfba:	9b05      	ldr	r3, [sp, #20]
    dfbc:	2b0a      	cmp	r3, #10
    dfbe:	dde4      	ble.n	df8a <__ssvfscanf_r+0x762>
    dfc0:	4ba5      	ldr	r3, [pc, #660]	; (e258 <__ssvfscanf_r+0xa30>)
    dfc2:	401f      	ands	r7, r3
    dfc4:	e7d5      	b.n	df72 <__ssvfscanf_r+0x74a>
    dfc6:	9b05      	ldr	r3, [sp, #20]
    dfc8:	48a4      	ldr	r0, [pc, #656]	; (e25c <__ssvfscanf_r+0xa34>)
    dfca:	005b      	lsls	r3, r3, #1
    dfcc:	5e1b      	ldrsh	r3, [r3, r0]
    dfce:	9305      	str	r3, [sp, #20]
    dfd0:	4ba1      	ldr	r3, [pc, #644]	; (e258 <__ssvfscanf_r+0xa30>)
    dfd2:	401f      	ands	r7, r3
    dfd4:	e7cd      	b.n	df72 <__ssvfscanf_r+0x74a>
    dfd6:	053b      	lsls	r3, r7, #20
    dfd8:	d5cb      	bpl.n	df72 <__ssvfscanf_r+0x74a>
    dfda:	9b05      	ldr	r3, [sp, #20]
    dfdc:	2b00      	cmp	r3, #0
    dfde:	d105      	bne.n	dfec <__ssvfscanf_r+0x7c4>
    dfe0:	2380      	movs	r3, #128	; 0x80
    dfe2:	009b      	lsls	r3, r3, #2
    dfe4:	431f      	orrs	r7, r3
    dfe6:	3bf9      	subs	r3, #249	; 0xf9
    dfe8:	3bff      	subs	r3, #255	; 0xff
    dfea:	9305      	str	r3, [sp, #20]
    dfec:	057b      	lsls	r3, r7, #21
    dfee:	d459      	bmi.n	e0a4 <__ssvfscanf_r+0x87c>
    dff0:	4b9b      	ldr	r3, [pc, #620]	; (e260 <__ssvfscanf_r+0xa38>)
    dff2:	401f      	ands	r7, r3
    dff4:	465b      	mov	r3, fp
    dff6:	2b00      	cmp	r3, #0
    dff8:	d004      	beq.n	e004 <__ssvfscanf_r+0x7dc>
    dffa:	2301      	movs	r3, #1
    dffc:	425b      	negs	r3, r3
    dffe:	469c      	mov	ip, r3
    e000:	3401      	adds	r4, #1
    e002:	44e3      	add	fp, ip
    e004:	2301      	movs	r3, #1
    e006:	469c      	mov	ip, r3
    e008:	6873      	ldr	r3, [r6, #4]
    e00a:	44e2      	add	sl, ip
    e00c:	3b01      	subs	r3, #1
    e00e:	6073      	str	r3, [r6, #4]
    e010:	2b00      	cmp	r3, #0
    e012:	dcb5      	bgt.n	df80 <__ssvfscanf_r+0x758>
    e014:	0031      	movs	r1, r6
    e016:	4640      	mov	r0, r8
    e018:	f005 ff86 	bl	13f28 <__ssrefill_r>
    e01c:	2800      	cmp	r0, #0
    e01e:	d0b1      	beq.n	df84 <__ssvfscanf_r+0x75c>
    e020:	e7b3      	b.n	df8a <__ssvfscanf_r+0x762>
    e022:	9b05      	ldr	r3, [sp, #20]
    e024:	488d      	ldr	r0, [pc, #564]	; (e25c <__ssvfscanf_r+0xa34>)
    e026:	005b      	lsls	r3, r3, #1
    e028:	5e1b      	ldrsh	r3, [r3, r0]
    e02a:	9305      	str	r3, [sp, #20]
    e02c:	2b08      	cmp	r3, #8
    e02e:	dcc7      	bgt.n	dfc0 <__ssvfscanf_r+0x798>
    e030:	e7ab      	b.n	df8a <__ssvfscanf_r+0x762>
    e032:	2380      	movs	r3, #128	; 0x80
    e034:	423b      	tst	r3, r7
    e036:	d0a8      	beq.n	df8a <__ssvfscanf_r+0x762>
    e038:	439f      	bics	r7, r3
    e03a:	e79a      	b.n	df72 <__ssvfscanf_r+0x74a>
    e03c:	2c00      	cmp	r4, #0
    e03e:	d100      	bne.n	e042 <__ssvfscanf_r+0x81a>
    e040:	3c01      	subs	r4, #1
    e042:	2501      	movs	r5, #1
    e044:	464b      	mov	r3, r9
    e046:	401d      	ands	r5, r3
    e048:	d000      	beq.n	e04c <__ssvfscanf_r+0x824>
    e04a:	e093      	b.n	e174 <__ssvfscanf_r+0x94c>
    e04c:	464b      	mov	r3, r9
    e04e:	06db      	lsls	r3, r3, #27
    e050:	d400      	bmi.n	e054 <__ssvfscanf_r+0x82c>
    e052:	e183      	b.n	e35c <__ssvfscanf_r+0xb34>
    e054:	2308      	movs	r3, #8
    e056:	4699      	mov	r9, r3
    e058:	f003 fc40 	bl	118dc <__locale_ctype_ptr>
    e05c:	4649      	mov	r1, r9
    e05e:	6833      	ldr	r3, [r6, #0]
    e060:	781a      	ldrb	r2, [r3, #0]
    e062:	1880      	adds	r0, r0, r2
    e064:	7842      	ldrb	r2, [r0, #1]
    e066:	4211      	tst	r1, r2
    e068:	d000      	beq.n	e06c <__ssvfscanf_r+0x844>
    e06a:	e709      	b.n	de80 <__ssvfscanf_r+0x658>
    e06c:	6872      	ldr	r2, [r6, #4]
    e06e:	3301      	adds	r3, #1
    e070:	3a01      	subs	r2, #1
    e072:	3501      	adds	r5, #1
    e074:	6072      	str	r2, [r6, #4]
    e076:	6033      	str	r3, [r6, #0]
    e078:	42ac      	cmp	r4, r5
    e07a:	d100      	bne.n	e07e <__ssvfscanf_r+0x856>
    e07c:	e700      	b.n	de80 <__ssvfscanf_r+0x658>
    e07e:	2a00      	cmp	r2, #0
    e080:	dcea      	bgt.n	e058 <__ssvfscanf_r+0x830>
    e082:	0031      	movs	r1, r6
    e084:	4640      	mov	r0, r8
    e086:	f005 ff4f 	bl	13f28 <__ssrefill_r>
    e08a:	2800      	cmp	r0, #0
    e08c:	d0e4      	beq.n	e058 <__ssvfscanf_r+0x830>
    e08e:	197f      	adds	r7, r7, r5
    e090:	e67c      	b.n	dd8c <__ssvfscanf_r+0x564>
    e092:	465b      	mov	r3, fp
    e094:	46bb      	mov	fp, r7
    e096:	002f      	movs	r7, r5
    e098:	001d      	movs	r5, r3
    e09a:	464a      	mov	r2, r9
    e09c:	4b71      	ldr	r3, [pc, #452]	; (e264 <__ssvfscanf_r+0xa3c>)
    e09e:	401a      	ands	r2, r3
    e0a0:	4691      	mov	r9, r2
    e0a2:	e5fe      	b.n	dca2 <__ssvfscanf_r+0x47a>
    e0a4:	4b70      	ldr	r3, [pc, #448]	; (e268 <__ssvfscanf_r+0xa40>)
    e0a6:	401f      	ands	r7, r3
    e0a8:	e763      	b.n	df72 <__ssvfscanf_r+0x74a>
    e0aa:	9b07      	ldr	r3, [sp, #28]
    e0ac:	1d1a      	adds	r2, r3, #4
    e0ae:	681b      	ldr	r3, [r3, #0]
    e0b0:	4692      	mov	sl, r2
    e0b2:	4699      	mov	r9, r3
    e0b4:	0002      	movs	r2, r0
    e0b6:	000b      	movs	r3, r1
    e0b8:	f007 f93e 	bl	15338 <__aeabi_dcmpun>
    e0bc:	2800      	cmp	r0, #0
    e0be:	d000      	beq.n	e0c2 <__ssvfscanf_r+0x89a>
    e0c0:	e28e      	b.n	e5e0 <__ssvfscanf_r+0xdb8>
    e0c2:	0020      	movs	r0, r4
    e0c4:	0029      	movs	r1, r5
    e0c6:	f007 f957 	bl	15378 <__aeabi_d2f>
    e0ca:	464b      	mov	r3, r9
    e0cc:	6018      	str	r0, [r3, #0]
    e0ce:	4653      	mov	r3, sl
    e0d0:	9307      	str	r3, [sp, #28]
    e0d2:	e658      	b.n	dd86 <__ssvfscanf_r+0x55e>
    e0d4:	464a      	mov	r2, r9
    e0d6:	431a      	orrs	r2, r3
    e0d8:	4691      	mov	r9, r2
    e0da:	4b64      	ldr	r3, [pc, #400]	; (e26c <__ssvfscanf_r+0xa44>)
    e0dc:	e472      	b.n	d9c4 <__ssvfscanf_r+0x19c>
    e0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e0e0:	2200      	movs	r2, #0
    e0e2:	1c59      	adds	r1, r3, #1
    e0e4:	4640      	mov	r0, r8
    e0e6:	230a      	movs	r3, #10
    e0e8:	f7fe f888 	bl	c1fc <_strtol_r>
    e0ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e0ee:	1ac2      	subs	r2, r0, r3
    e0f0:	a90e      	add	r1, sp, #56	; 0x38
    e0f2:	468c      	mov	ip, r1
    e0f4:	4b5e      	ldr	r3, [pc, #376]	; (e270 <__ssvfscanf_r+0xa48>)
    e0f6:	990e      	ldr	r1, [sp, #56]	; 0x38
    e0f8:	4463      	add	r3, ip
    e0fa:	4299      	cmp	r1, r3
    e0fc:	d302      	bcc.n	e104 <__ssvfscanf_r+0x8dc>
    e0fe:	4b5d      	ldr	r3, [pc, #372]	; (e274 <__ssvfscanf_r+0xa4c>)
    e100:	4463      	add	r3, ip
    e102:	930e      	str	r3, [sp, #56]	; 0x38
    e104:	495c      	ldr	r1, [pc, #368]	; (e278 <__ssvfscanf_r+0xa50>)
    e106:	980e      	ldr	r0, [sp, #56]	; 0x38
    e108:	f7fd fbd2 	bl	b8b0 <sprintf>
    e10c:	e626      	b.n	dd5c <__ssvfscanf_r+0x534>
    e10e:	9a07      	ldr	r2, [sp, #28]
    e110:	4654      	mov	r4, sl
    e112:	6813      	ldr	r3, [r2, #0]
    e114:	601f      	str	r7, [r3, #0]
    e116:	0013      	movs	r3, r2
    e118:	3304      	adds	r3, #4
    e11a:	9307      	str	r3, [sp, #28]
    e11c:	f7ff fbcb 	bl	d8b6 <__ssvfscanf_r+0x8e>
    e120:	702b      	strb	r3, [r5, #0]
    e122:	2200      	movs	r2, #0
    e124:	9b05      	ldr	r3, [sp, #20]
    e126:	990a      	ldr	r1, [sp, #40]	; 0x28
    e128:	4640      	mov	r0, r8
    e12a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    e12c:	47a0      	blx	r4
    e12e:	464b      	mov	r3, r9
    e130:	069b      	lsls	r3, r3, #26
    e132:	d500      	bpl.n	e136 <__ssvfscanf_r+0x90e>
    e134:	e15b      	b.n	e3ee <__ssvfscanf_r+0xbc6>
    e136:	464b      	mov	r3, r9
    e138:	075b      	lsls	r3, r3, #29
    e13a:	d500      	bpl.n	e13e <__ssvfscanf_r+0x916>
    e13c:	e1c6      	b.n	e4cc <__ssvfscanf_r+0xca4>
    e13e:	464b      	mov	r3, r9
    e140:	07db      	lsls	r3, r3, #31
    e142:	d500      	bpl.n	e146 <__ssvfscanf_r+0x91e>
    e144:	e153      	b.n	e3ee <__ssvfscanf_r+0xbc6>
    e146:	464b      	mov	r3, r9
    e148:	079b      	lsls	r3, r3, #30
    e14a:	d400      	bmi.n	e14e <__ssvfscanf_r+0x926>
    e14c:	e14f      	b.n	e3ee <__ssvfscanf_r+0xbc6>
    e14e:	4b4b      	ldr	r3, [pc, #300]	; (e27c <__ssvfscanf_r+0xa54>)
    e150:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e152:	429a      	cmp	r2, r3
    e154:	d100      	bne.n	e158 <__ssvfscanf_r+0x930>
    e156:	e1b2      	b.n	e4be <__ssvfscanf_r+0xc96>
    e158:	9b05      	ldr	r3, [sp, #20]
    e15a:	2200      	movs	r2, #0
    e15c:	990a      	ldr	r1, [sp, #40]	; 0x28
    e15e:	4640      	mov	r0, r8
    e160:	f005 fc52 	bl	13a08 <_strtoll_r>
    e164:	9a07      	ldr	r2, [sp, #28]
    e166:	6813      	ldr	r3, [r2, #0]
    e168:	6018      	str	r0, [r3, #0]
    e16a:	6059      	str	r1, [r3, #4]
    e16c:	0013      	movs	r3, r2
    e16e:	3304      	adds	r3, #4
    e170:	9307      	str	r3, [sp, #28]
    e172:	e142      	b.n	e3fa <__ssvfscanf_r+0xbd2>
    e174:	ab12      	add	r3, sp, #72	; 0x48
    e176:	2208      	movs	r2, #8
    e178:	0018      	movs	r0, r3
    e17a:	2100      	movs	r1, #0
    e17c:	9306      	str	r3, [sp, #24]
    e17e:	f7fd fa7d 	bl	b67c <memset>
    e182:	2310      	movs	r3, #16
    e184:	464a      	mov	r2, r9
    e186:	401a      	ands	r2, r3
    e188:	ab11      	add	r3, sp, #68	; 0x44
    e18a:	4693      	mov	fp, r2
    e18c:	4699      	mov	r9, r3
    e18e:	2a00      	cmp	r2, #0
    e190:	d100      	bne.n	e194 <__ssvfscanf_r+0x96c>
    e192:	e17f      	b.n	e494 <__ssvfscanf_r+0xc6c>
    e194:	2300      	movs	r3, #0
    e196:	001d      	movs	r5, r3
    e198:	f003 fba0 	bl	118dc <__locale_ctype_ptr>
    e19c:	2208      	movs	r2, #8
    e19e:	6833      	ldr	r3, [r6, #0]
    e1a0:	781b      	ldrb	r3, [r3, #0]
    e1a2:	18c0      	adds	r0, r0, r3
    e1a4:	7843      	ldrb	r3, [r0, #1]
    e1a6:	421a      	tst	r2, r3
    e1a8:	d102      	bne.n	e1b0 <__ssvfscanf_r+0x988>
    e1aa:	2c00      	cmp	r4, #0
    e1ac:	d000      	beq.n	e1b0 <__ssvfscanf_r+0x988>
    e1ae:	e194      	b.n	e4da <__ssvfscanf_r+0xcb2>
    e1b0:	465b      	mov	r3, fp
    e1b2:	2b00      	cmp	r3, #0
    e1b4:	d000      	beq.n	e1b8 <__ssvfscanf_r+0x990>
    e1b6:	e5e9      	b.n	dd8c <__ssvfscanf_r+0x564>
    e1b8:	464b      	mov	r3, r9
    e1ba:	465a      	mov	r2, fp
    e1bc:	601a      	str	r2, [r3, #0]
    e1be:	e5e2      	b.n	dd86 <__ssvfscanf_r+0x55e>
    e1c0:	9b07      	ldr	r3, [sp, #28]
    e1c2:	3c01      	subs	r4, #1
    e1c4:	1d1a      	adds	r2, r3, #4
    e1c6:	681b      	ldr	r3, [r3, #0]
    e1c8:	4693      	mov	fp, r2
    e1ca:	4699      	mov	r9, r3
    e1cc:	001a      	movs	r2, r3
    e1ce:	444c      	add	r4, r9
    e1d0:	ab14      	add	r3, sp, #80	; 0x50
    e1d2:	46ba      	mov	sl, r7
    e1d4:	001d      	movs	r5, r3
    e1d6:	0027      	movs	r7, r4
    e1d8:	6833      	ldr	r3, [r6, #0]
    e1da:	7819      	ldrb	r1, [r3, #0]
    e1dc:	5c69      	ldrb	r1, [r5, r1]
    e1de:	2900      	cmp	r1, #0
    e1e0:	d100      	bne.n	e1e4 <__ssvfscanf_r+0x9bc>
    e1e2:	e13e      	b.n	e462 <__ssvfscanf_r+0xc3a>
    e1e4:	6871      	ldr	r1, [r6, #4]
    e1e6:	1c54      	adds	r4, r2, #1
    e1e8:	3901      	subs	r1, #1
    e1ea:	6071      	str	r1, [r6, #4]
    e1ec:	1c59      	adds	r1, r3, #1
    e1ee:	6031      	str	r1, [r6, #0]
    e1f0:	781b      	ldrb	r3, [r3, #0]
    e1f2:	7013      	strb	r3, [r2, #0]
    e1f4:	42ba      	cmp	r2, r7
    e1f6:	d100      	bne.n	e1fa <__ssvfscanf_r+0x9d2>
    e1f8:	e124      	b.n	e444 <__ssvfscanf_r+0xc1c>
    e1fa:	6873      	ldr	r3, [r6, #4]
    e1fc:	2b00      	cmp	r3, #0
    e1fe:	dd01      	ble.n	e204 <__ssvfscanf_r+0x9dc>
    e200:	0022      	movs	r2, r4
    e202:	e7e9      	b.n	e1d8 <__ssvfscanf_r+0x9b0>
    e204:	0031      	movs	r1, r6
    e206:	4640      	mov	r0, r8
    e208:	f005 fe8e 	bl	13f28 <__ssrefill_r>
    e20c:	2800      	cmp	r0, #0
    e20e:	d0f7      	beq.n	e200 <__ssvfscanf_r+0x9d8>
    e210:	4657      	mov	r7, sl
    e212:	45a1      	cmp	r9, r4
    e214:	d000      	beq.n	e218 <__ssvfscanf_r+0x9f0>
    e216:	e116      	b.n	e446 <__ssvfscanf_r+0xc1e>
    e218:	f7ff fba0 	bl	d95c <__ssvfscanf_r+0x134>
    e21c:	ab12      	add	r3, sp, #72	; 0x48
    e21e:	2208      	movs	r2, #8
    e220:	0018      	movs	r0, r3
    e222:	2100      	movs	r1, #0
    e224:	9306      	str	r3, [sp, #24]
    e226:	f7fd fa29 	bl	b67c <memset>
    e22a:	2310      	movs	r3, #16
    e22c:	464a      	mov	r2, r9
    e22e:	401a      	ands	r2, r3
    e230:	9204      	str	r2, [sp, #16]
    e232:	d100      	bne.n	e236 <__ssvfscanf_r+0xa0e>
    e234:	e124      	b.n	e480 <__ssvfscanf_r+0xc58>
    e236:	2300      	movs	r3, #0
    e238:	469b      	mov	fp, r3
    e23a:	2c00      	cmp	r4, #0
    e23c:	d100      	bne.n	e240 <__ssvfscanf_r+0xa18>
    e23e:	e5a5      	b.n	dd8c <__ssvfscanf_r+0x564>
    e240:	9b06      	ldr	r3, [sp, #24]
    e242:	46b9      	mov	r9, r7
    e244:	2500      	movs	r5, #0
    e246:	0027      	movs	r7, r4
    e248:	469a      	mov	sl, r3
    e24a:	e02a      	b.n	e2a2 <__ssvfscanf_r+0xa7a>
    e24c:	fffffea3 	.word	0xfffffea3
    e250:	00019024 	.word	0x00019024
    e254:	fffffdff 	.word	0xfffffdff
    e258:	fffff47f 	.word	0xfffff47f
    e25c:	00019164 	.word	0x00019164
    e260:	fffffc7f 	.word	0xfffffc7f
    e264:	fffffeff 	.word	0xfffffeff
    e268:	fffffa7f 	.word	0xfffffa7f
    e26c:	0000c1fd 	.word	0x0000c1fd
    e270:	0000026b 	.word	0x0000026b
    e274:	0000026a 	.word	0x0000026a
    e278:	0001915c 	.word	0x0001915c
    e27c:	00013b79 	.word	0x00013b79
    e280:	9b04      	ldr	r3, [sp, #16]
    e282:	2b00      	cmp	r3, #0
    e284:	d146      	bne.n	e314 <__ssvfscanf_r+0xaec>
    e286:	465a      	mov	r2, fp
    e288:	44a1      	add	r9, r4
    e28a:	6013      	str	r3, [r2, #0]
    e28c:	3f01      	subs	r7, #1
    e28e:	2304      	movs	r3, #4
    e290:	469c      	mov	ip, r3
    e292:	2500      	movs	r5, #0
    e294:	44e3      	add	fp, ip
    e296:	6873      	ldr	r3, [r6, #4]
    e298:	2b00      	cmp	r3, #0
    e29a:	dd2f      	ble.n	e2fc <__ssvfscanf_r+0xad4>
    e29c:	2f00      	cmp	r7, #0
    e29e:	d100      	bne.n	e2a2 <__ssvfscanf_r+0xa7a>
    e2a0:	e0fe      	b.n	e4a0 <__ssvfscanf_r+0xc78>
    e2a2:	f003 fb07 	bl	118b4 <__locale_mb_cur_max>
    e2a6:	42a8      	cmp	r0, r5
    e2a8:	d101      	bne.n	e2ae <__ssvfscanf_r+0xa86>
    e2aa:	f7ff fb57 	bl	d95c <__ssvfscanf_r+0x134>
    e2ae:	208c      	movs	r0, #140	; 0x8c
    e2b0:	6833      	ldr	r3, [r6, #0]
    e2b2:	0040      	lsls	r0, r0, #1
    e2b4:	781a      	ldrb	r2, [r3, #0]
    e2b6:	3301      	adds	r3, #1
    e2b8:	6033      	str	r3, [r6, #0]
    e2ba:	4653      	mov	r3, sl
    e2bc:	a90e      	add	r1, sp, #56	; 0x38
    e2be:	1809      	adds	r1, r1, r0
    e2c0:	554a      	strb	r2, [r1, r5]
    e2c2:	6872      	ldr	r2, [r6, #4]
    e2c4:	1c6c      	adds	r4, r5, #1
    e2c6:	3a01      	subs	r2, #1
    e2c8:	6072      	str	r2, [r6, #4]
    e2ca:	4659      	mov	r1, fp
    e2cc:	9300      	str	r3, [sp, #0]
    e2ce:	aa54      	add	r2, sp, #336	; 0x150
    e2d0:	0023      	movs	r3, r4
    e2d2:	4640      	mov	r0, r8
    e2d4:	f003 fbb4 	bl	11a40 <_mbrtowc_r>
    e2d8:	1c43      	adds	r3, r0, #1
    e2da:	d101      	bne.n	e2e0 <__ssvfscanf_r+0xab8>
    e2dc:	f7ff fb3e 	bl	d95c <__ssvfscanf_r+0x134>
    e2e0:	2800      	cmp	r0, #0
    e2e2:	d0cd      	beq.n	e280 <__ssvfscanf_r+0xa58>
    e2e4:	0025      	movs	r5, r4
    e2e6:	1c83      	adds	r3, r0, #2
    e2e8:	d0d5      	beq.n	e296 <__ssvfscanf_r+0xa6e>
    e2ea:	9b04      	ldr	r3, [sp, #16]
    e2ec:	44a1      	add	r9, r4
    e2ee:	3f01      	subs	r7, #1
    e2f0:	2500      	movs	r5, #0
    e2f2:	2b00      	cmp	r3, #0
    e2f4:	d0cb      	beq.n	e28e <__ssvfscanf_r+0xa66>
    e2f6:	6873      	ldr	r3, [r6, #4]
    e2f8:	2b00      	cmp	r3, #0
    e2fa:	dccf      	bgt.n	e29c <__ssvfscanf_r+0xa74>
    e2fc:	0031      	movs	r1, r6
    e2fe:	4640      	mov	r0, r8
    e300:	f005 fe12 	bl	13f28 <__ssrefill_r>
    e304:	2800      	cmp	r0, #0
    e306:	d0c9      	beq.n	e29c <__ssvfscanf_r+0xa74>
    e308:	464f      	mov	r7, r9
    e30a:	2d00      	cmp	r5, #0
    e30c:	d100      	bne.n	e310 <__ssvfscanf_r+0xae8>
    e30e:	e0c8      	b.n	e4a2 <__ssvfscanf_r+0xc7a>
    e310:	f7ff fb24 	bl	d95c <__ssvfscanf_r+0x134>
    e314:	44a1      	add	r9, r4
    e316:	3f01      	subs	r7, #1
    e318:	2500      	movs	r5, #0
    e31a:	e7bc      	b.n	e296 <__ssvfscanf_r+0xa6e>
    e31c:	003b      	movs	r3, r7
    e31e:	4647      	mov	r7, r8
    e320:	4698      	mov	r8, r3
    e322:	2d00      	cmp	r5, #0
    e324:	d101      	bne.n	e32a <__ssvfscanf_r+0xb02>
    e326:	f7ff fb19 	bl	d95c <__ssvfscanf_r+0x134>
    e32a:	197f      	adds	r7, r7, r5
    e32c:	e52e      	b.n	dd8c <__ssvfscanf_r+0x564>
    e32e:	9b07      	ldr	r3, [sp, #28]
    e330:	2201      	movs	r2, #1
    e332:	6819      	ldr	r1, [r3, #0]
    e334:	1d1d      	adds	r5, r3, #4
    e336:	9600      	str	r6, [sp, #0]
    e338:	0023      	movs	r3, r4
    e33a:	4640      	mov	r0, r8
    e33c:	f005 fe14 	bl	13f68 <_sfread_r>
    e340:	2800      	cmp	r0, #0
    e342:	d101      	bne.n	e348 <__ssvfscanf_r+0xb20>
    e344:	f7ff fb0a 	bl	d95c <__ssvfscanf_r+0x134>
    e348:	9b08      	ldr	r3, [sp, #32]
    e34a:	183f      	adds	r7, r7, r0
    e34c:	3301      	adds	r3, #1
    e34e:	9308      	str	r3, [sp, #32]
    e350:	9b03      	ldr	r3, [sp, #12]
    e352:	9507      	str	r5, [sp, #28]
    e354:	469a      	mov	sl, r3
    e356:	4654      	mov	r4, sl
    e358:	f7ff faad 	bl	d8b6 <__ssvfscanf_r+0x8e>
    e35c:	9b07      	ldr	r3, [sp, #28]
    e35e:	46b9      	mov	r9, r7
    e360:	1d1a      	adds	r2, r3, #4
    e362:	681b      	ldr	r3, [r3, #0]
    e364:	3c01      	subs	r4, #1
    e366:	469a      	mov	sl, r3
    e368:	9306      	str	r3, [sp, #24]
    e36a:	001d      	movs	r5, r3
    e36c:	2308      	movs	r3, #8
    e36e:	469b      	mov	fp, r3
    e370:	9204      	str	r2, [sp, #16]
    e372:	44a2      	add	sl, r4
    e374:	f003 fab2 	bl	118dc <__locale_ctype_ptr>
    e378:	4659      	mov	r1, fp
    e37a:	6833      	ldr	r3, [r6, #0]
    e37c:	781a      	ldrb	r2, [r3, #0]
    e37e:	1880      	adds	r0, r0, r2
    e380:	7842      	ldrb	r2, [r0, #1]
    e382:	4211      	tst	r1, r2
    e384:	d179      	bne.n	e47a <__ssvfscanf_r+0xc52>
    e386:	6872      	ldr	r2, [r6, #4]
    e388:	1c6c      	adds	r4, r5, #1
    e38a:	3a01      	subs	r2, #1
    e38c:	6072      	str	r2, [r6, #4]
    e38e:	1c5a      	adds	r2, r3, #1
    e390:	6032      	str	r2, [r6, #0]
    e392:	781b      	ldrb	r3, [r3, #0]
    e394:	0027      	movs	r7, r4
    e396:	702b      	strb	r3, [r5, #0]
    e398:	4555      	cmp	r5, sl
    e39a:	d00a      	beq.n	e3b2 <__ssvfscanf_r+0xb8a>
    e39c:	6873      	ldr	r3, [r6, #4]
    e39e:	2b00      	cmp	r3, #0
    e3a0:	dd01      	ble.n	e3a6 <__ssvfscanf_r+0xb7e>
    e3a2:	0025      	movs	r5, r4
    e3a4:	e7e6      	b.n	e374 <__ssvfscanf_r+0xb4c>
    e3a6:	0031      	movs	r1, r6
    e3a8:	4640      	mov	r0, r8
    e3aa:	f005 fdbd 	bl	13f28 <__ssrefill_r>
    e3ae:	2800      	cmp	r0, #0
    e3b0:	d0f7      	beq.n	e3a2 <__ssvfscanf_r+0xb7a>
    e3b2:	464b      	mov	r3, r9
    e3b4:	46b9      	mov	r9, r7
    e3b6:	001f      	movs	r7, r3
    e3b8:	2300      	movs	r3, #0
    e3ba:	464a      	mov	r2, r9
    e3bc:	7013      	strb	r3, [r2, #0]
    e3be:	464b      	mov	r3, r9
    e3c0:	9a06      	ldr	r2, [sp, #24]
    e3c2:	1a9b      	subs	r3, r3, r2
    e3c4:	18ff      	adds	r7, r7, r3
    e3c6:	9b08      	ldr	r3, [sp, #32]
    e3c8:	3301      	adds	r3, #1
    e3ca:	9308      	str	r3, [sp, #32]
    e3cc:	9b04      	ldr	r3, [sp, #16]
    e3ce:	9307      	str	r3, [sp, #28]
    e3d0:	9b03      	ldr	r3, [sp, #12]
    e3d2:	469a      	mov	sl, r3
    e3d4:	4654      	mov	r4, sl
    e3d6:	f7ff fa6e 	bl	d8b6 <__ssvfscanf_r+0x8e>
    e3da:	0031      	movs	r1, r6
    e3dc:	4640      	mov	r0, r8
    e3de:	f005 fda3 	bl	13f28 <__ssrefill_r>
    e3e2:	2800      	cmp	r0, #0
    e3e4:	d101      	bne.n	e3ea <__ssvfscanf_r+0xbc2>
    e3e6:	f7ff fa94 	bl	d912 <__ssvfscanf_r+0xea>
    e3ea:	f7ff fab7 	bl	d95c <__ssvfscanf_r+0x134>
    e3ee:	9a07      	ldr	r2, [sp, #28]
    e3f0:	6813      	ldr	r3, [r2, #0]
    e3f2:	6018      	str	r0, [r3, #0]
    e3f4:	0013      	movs	r3, r2
    e3f6:	3304      	adds	r3, #4
    e3f8:	9307      	str	r3, [sp, #28]
    e3fa:	9b08      	ldr	r3, [sp, #32]
    e3fc:	3301      	adds	r3, #1
    e3fe:	9308      	str	r3, [sp, #32]
    e400:	e5d6      	b.n	dfb0 <__ssvfscanf_r+0x788>
    e402:	3d01      	subs	r5, #1
    e404:	7829      	ldrb	r1, [r5, #0]
    e406:	0032      	movs	r2, r6
    e408:	4640      	mov	r0, r8
    e40a:	f005 fd4b 	bl	13ea4 <_sungetc_r>
    e40e:	e5c6      	b.n	df9e <__ssvfscanf_r+0x776>
    e410:	4648      	mov	r0, r9
    e412:	4b78      	ldr	r3, [pc, #480]	; (e5f4 <__ssvfscanf_r+0xdcc>)
    e414:	4018      	ands	r0, r3
    e416:	2301      	movs	r3, #1
    e418:	4681      	mov	r9, r0
    e41a:	469b      	mov	fp, r3
    e41c:	f7ff fbd5 	bl	dbca <__ssvfscanf_r+0x3a2>
    e420:	4648      	mov	r0, r9
    e422:	4b74      	ldr	r3, [pc, #464]	; (e5f4 <__ssvfscanf_r+0xdcc>)
    e424:	4018      	ands	r0, r3
    e426:	2301      	movs	r3, #1
    e428:	4681      	mov	r9, r0
    e42a:	9304      	str	r3, [sp, #16]
    e42c:	f7ff fbcd 	bl	dbca <__ssvfscanf_r+0x3a2>
    e430:	464b      	mov	r3, r9
    e432:	2102      	movs	r1, #2
    e434:	4313      	orrs	r3, r2
    e436:	4699      	mov	r9, r3
    e438:	468c      	mov	ip, r1
    e43a:	4653      	mov	r3, sl
    e43c:	44e2      	add	sl, ip
    e43e:	789b      	ldrb	r3, [r3, #2]
    e440:	f7ff fa56 	bl	d8f0 <__ssvfscanf_r+0xc8>
    e444:	4657      	mov	r7, sl
    e446:	464b      	mov	r3, r9
    e448:	1ae5      	subs	r5, r4, r3
    e44a:	d101      	bne.n	e450 <__ssvfscanf_r+0xc28>
    e44c:	f7ff fa39 	bl	d8c2 <__ssvfscanf_r+0x9a>
    e450:	2300      	movs	r3, #0
    e452:	7023      	strb	r3, [r4, #0]
    e454:	9b08      	ldr	r3, [sp, #32]
    e456:	197f      	adds	r7, r7, r5
    e458:	3301      	adds	r3, #1
    e45a:	9308      	str	r3, [sp, #32]
    e45c:	465b      	mov	r3, fp
    e45e:	9307      	str	r3, [sp, #28]
    e460:	e494      	b.n	dd8c <__ssvfscanf_r+0x564>
    e462:	4657      	mov	r7, sl
    e464:	0014      	movs	r4, r2
    e466:	e7ee      	b.n	e446 <__ssvfscanf_r+0xc1e>
    e468:	9b06      	ldr	r3, [sp, #24]
    e46a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e46c:	1a9a      	subs	r2, r3, r2
    e46e:	d100      	bne.n	e472 <__ssvfscanf_r+0xc4a>
    e470:	e474      	b.n	dd5c <__ssvfscanf_r+0x534>
    e472:	465b      	mov	r3, fp
    e474:	4252      	negs	r2, r2
    e476:	930e      	str	r3, [sp, #56]	; 0x38
    e478:	e63a      	b.n	e0f0 <__ssvfscanf_r+0x8c8>
    e47a:	464f      	mov	r7, r9
    e47c:	46a9      	mov	r9, r5
    e47e:	e79b      	b.n	e3b8 <__ssvfscanf_r+0xb90>
    e480:	9a07      	ldr	r2, [sp, #28]
    e482:	0013      	movs	r3, r2
    e484:	6812      	ldr	r2, [r2, #0]
    e486:	3304      	adds	r3, #4
    e488:	4693      	mov	fp, r2
    e48a:	9307      	str	r3, [sp, #28]
    e48c:	2c00      	cmp	r4, #0
    e48e:	d000      	beq.n	e492 <__ssvfscanf_r+0xc6a>
    e490:	e6d6      	b.n	e240 <__ssvfscanf_r+0xa18>
    e492:	e478      	b.n	dd86 <__ssvfscanf_r+0x55e>
    e494:	9b07      	ldr	r3, [sp, #28]
    e496:	681a      	ldr	r2, [r3, #0]
    e498:	3304      	adds	r3, #4
    e49a:	4691      	mov	r9, r2
    e49c:	9307      	str	r3, [sp, #28]
    e49e:	e679      	b.n	e194 <__ssvfscanf_r+0x96c>
    e4a0:	464f      	mov	r7, r9
    e4a2:	9b04      	ldr	r3, [sp, #16]
    e4a4:	2b00      	cmp	r3, #0
    e4a6:	d100      	bne.n	e4aa <__ssvfscanf_r+0xc82>
    e4a8:	e46d      	b.n	dd86 <__ssvfscanf_r+0x55e>
    e4aa:	e46f      	b.n	dd8c <__ssvfscanf_r+0x564>
    e4ac:	9b07      	ldr	r3, [sp, #28]
    e4ae:	4654      	mov	r4, sl
    e4b0:	681a      	ldr	r2, [r3, #0]
    e4b2:	3304      	adds	r3, #4
    e4b4:	9203      	str	r2, [sp, #12]
    e4b6:	8017      	strh	r7, [r2, #0]
    e4b8:	9307      	str	r3, [sp, #28]
    e4ba:	f7ff f9fc 	bl	d8b6 <__ssvfscanf_r+0x8e>
    e4be:	9b05      	ldr	r3, [sp, #20]
    e4c0:	2200      	movs	r2, #0
    e4c2:	990a      	ldr	r1, [sp, #40]	; 0x28
    e4c4:	4640      	mov	r0, r8
    e4c6:	f005 fc4b 	bl	13d60 <_strtoull_r>
    e4ca:	e64b      	b.n	e164 <__ssvfscanf_r+0x93c>
    e4cc:	9b07      	ldr	r3, [sp, #28]
    e4ce:	681a      	ldr	r2, [r3, #0]
    e4d0:	3304      	adds	r3, #4
    e4d2:	9204      	str	r2, [sp, #16]
    e4d4:	8010      	strh	r0, [r2, #0]
    e4d6:	9307      	str	r3, [sp, #28]
    e4d8:	e78f      	b.n	e3fa <__ssvfscanf_r+0xbd2>
    e4da:	f003 f9eb 	bl	118b4 <__locale_mb_cur_max>
    e4de:	4285      	cmp	r5, r0
    e4e0:	d101      	bne.n	e4e6 <__ssvfscanf_r+0xcbe>
    e4e2:	f7ff fa3b 	bl	d95c <__ssvfscanf_r+0x134>
    e4e6:	208c      	movs	r0, #140	; 0x8c
    e4e8:	1c6b      	adds	r3, r5, #1
    e4ea:	469a      	mov	sl, r3
    e4ec:	6833      	ldr	r3, [r6, #0]
    e4ee:	0040      	lsls	r0, r0, #1
    e4f0:	781a      	ldrb	r2, [r3, #0]
    e4f2:	a90e      	add	r1, sp, #56	; 0x38
    e4f4:	1809      	adds	r1, r1, r0
    e4f6:	554a      	strb	r2, [r1, r5]
    e4f8:	3301      	adds	r3, #1
    e4fa:	6872      	ldr	r2, [r6, #4]
    e4fc:	6033      	str	r3, [r6, #0]
    e4fe:	9b06      	ldr	r3, [sp, #24]
    e500:	3a01      	subs	r2, #1
    e502:	6072      	str	r2, [r6, #4]
    e504:	4649      	mov	r1, r9
    e506:	9300      	str	r3, [sp, #0]
    e508:	aa54      	add	r2, sp, #336	; 0x150
    e50a:	4653      	mov	r3, sl
    e50c:	4640      	mov	r0, r8
    e50e:	f003 fa97 	bl	11a40 <_mbrtowc_r>
    e512:	1c43      	adds	r3, r0, #1
    e514:	d101      	bne.n	e51a <__ssvfscanf_r+0xcf2>
    e516:	f7ff fa21 	bl	d95c <__ssvfscanf_r+0x134>
    e51a:	2800      	cmp	r0, #0
    e51c:	d001      	beq.n	e522 <__ssvfscanf_r+0xcfa>
    e51e:	f7ff fa07 	bl	d930 <__ssvfscanf_r+0x108>
    e522:	464b      	mov	r3, r9
    e524:	6018      	str	r0, [r3, #0]
    e526:	f003 f9b9 	bl	1189c <iswspace>
    e52a:	1e05      	subs	r5, r0, #0
    e52c:	d012      	beq.n	e554 <__ssvfscanf_r+0xd2c>
    e52e:	4655      	mov	r5, sl
    e530:	2d00      	cmp	r5, #0
    e532:	d100      	bne.n	e536 <__ssvfscanf_r+0xd0e>
    e534:	e63c      	b.n	e1b0 <__ssvfscanf_r+0x988>
    e536:	4644      	mov	r4, r8
    e538:	228c      	movs	r2, #140	; 0x8c
    e53a:	ab0e      	add	r3, sp, #56	; 0x38
    e53c:	0052      	lsls	r2, r2, #1
    e53e:	3d01      	subs	r5, #1
    e540:	189b      	adds	r3, r3, r2
    e542:	5d59      	ldrb	r1, [r3, r5]
    e544:	0032      	movs	r2, r6
    e546:	0020      	movs	r0, r4
    e548:	f005 fcac 	bl	13ea4 <_sungetc_r>
    e54c:	2d00      	cmp	r5, #0
    e54e:	d1f3      	bne.n	e538 <__ssvfscanf_r+0xd10>
    e550:	46a0      	mov	r8, r4
    e552:	e62d      	b.n	e1b0 <__ssvfscanf_r+0x988>
    e554:	465b      	mov	r3, fp
    e556:	4457      	add	r7, sl
    e558:	3c01      	subs	r4, #1
    e55a:	2b00      	cmp	r3, #0
    e55c:	d001      	beq.n	e562 <__ssvfscanf_r+0xd3a>
    e55e:	f7ff f9ec 	bl	d93a <__ssvfscanf_r+0x112>
    e562:	3304      	adds	r3, #4
    e564:	469c      	mov	ip, r3
    e566:	465d      	mov	r5, fp
    e568:	44e1      	add	r9, ip
    e56a:	f7ff f9e6 	bl	d93a <__ssvfscanf_r+0x112>
    e56e:	464b      	mov	r3, r9
    e570:	6818      	ldr	r0, [r3, #0]
    e572:	e7d8      	b.n	e526 <__ssvfscanf_r+0xcfe>
    e574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e576:	459b      	cmp	fp, r3
    e578:	d801      	bhi.n	e57e <__ssvfscanf_r+0xd56>
    e57a:	f7ff f9a2 	bl	d8c2 <__ssvfscanf_r+0x9a>
    e57e:	465c      	mov	r4, fp
    e580:	4645      	mov	r5, r8
    e582:	3c01      	subs	r4, #1
    e584:	7821      	ldrb	r1, [r4, #0]
    e586:	0032      	movs	r2, r6
    e588:	0028      	movs	r0, r5
    e58a:	f005 fc8b 	bl	13ea4 <_sungetc_r>
    e58e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e590:	429c      	cmp	r4, r3
    e592:	d1f6      	bne.n	e582 <__ssvfscanf_r+0xd5a>
    e594:	f7ff f995 	bl	d8c2 <__ssvfscanf_r+0x9a>
    e598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e59a:	465c      	mov	r4, fp
    e59c:	4645      	mov	r5, r8
    e59e:	459b      	cmp	fp, r3
    e5a0:	d801      	bhi.n	e5a6 <__ssvfscanf_r+0xd7e>
    e5a2:	f7ff f98e 	bl	d8c2 <__ssvfscanf_r+0x9a>
    e5a6:	3c01      	subs	r4, #1
    e5a8:	7821      	ldrb	r1, [r4, #0]
    e5aa:	0032      	movs	r2, r6
    e5ac:	0028      	movs	r0, r5
    e5ae:	f005 fc79 	bl	13ea4 <_sungetc_r>
    e5b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e5b4:	429c      	cmp	r4, r3
    e5b6:	d1f6      	bne.n	e5a6 <__ssvfscanf_r+0xd7e>
    e5b8:	f7ff f983 	bl	d8c2 <__ssvfscanf_r+0x9a>
    e5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e5be:	459b      	cmp	fp, r3
    e5c0:	d801      	bhi.n	e5c6 <__ssvfscanf_r+0xd9e>
    e5c2:	f7ff f97e 	bl	d8c2 <__ssvfscanf_r+0x9a>
    e5c6:	465c      	mov	r4, fp
    e5c8:	4645      	mov	r5, r8
    e5ca:	3c01      	subs	r4, #1
    e5cc:	7821      	ldrb	r1, [r4, #0]
    e5ce:	0032      	movs	r2, r6
    e5d0:	0028      	movs	r0, r5
    e5d2:	f005 fc67 	bl	13ea4 <_sungetc_r>
    e5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e5d8:	429c      	cmp	r4, r3
    e5da:	d1f6      	bne.n	e5ca <__ssvfscanf_r+0xda2>
    e5dc:	f7ff f971 	bl	d8c2 <__ssvfscanf_r+0x9a>
    e5e0:	2000      	movs	r0, #0
    e5e2:	f004 f9bb 	bl	1295c <nanf>
    e5e6:	464b      	mov	r3, r9
    e5e8:	6018      	str	r0, [r3, #0]
    e5ea:	4653      	mov	r3, sl
    e5ec:	9307      	str	r3, [sp, #28]
    e5ee:	f7ff fbca 	bl	dd86 <__ssvfscanf_r+0x55e>
    e5f2:	46c0      	nop			; (mov r8, r8)
    e5f4:	fffff87f 	.word	0xfffff87f

0000e5f8 <_vfprintf_r>:
    e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5fa:	46de      	mov	lr, fp
    e5fc:	464e      	mov	r6, r9
    e5fe:	4645      	mov	r5, r8
    e600:	4657      	mov	r7, sl
    e602:	b5e0      	push	{r5, r6, r7, lr}
    e604:	b0c3      	sub	sp, #268	; 0x10c
    e606:	4689      	mov	r9, r1
    e608:	0014      	movs	r4, r2
    e60a:	001d      	movs	r5, r3
    e60c:	930f      	str	r3, [sp, #60]	; 0x3c
    e60e:	0006      	movs	r6, r0
    e610:	9006      	str	r0, [sp, #24]
    e612:	f003 f973 	bl	118fc <_localeconv_r>
    e616:	6803      	ldr	r3, [r0, #0]
    e618:	0018      	movs	r0, r3
    e61a:	9318      	str	r3, [sp, #96]	; 0x60
    e61c:	f7fd fabe 	bl	bb9c <strlen>
    e620:	9017      	str	r0, [sp, #92]	; 0x5c
    e622:	2e00      	cmp	r6, #0
    e624:	d004      	beq.n	e630 <_vfprintf_r+0x38>
    e626:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    e628:	9307      	str	r3, [sp, #28]
    e62a:	2b00      	cmp	r3, #0
    e62c:	d100      	bne.n	e630 <_vfprintf_r+0x38>
    e62e:	e0a7      	b.n	e780 <_vfprintf_r+0x188>
    e630:	464b      	mov	r3, r9
    e632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e634:	07db      	lsls	r3, r3, #31
    e636:	d478      	bmi.n	e72a <_vfprintf_r+0x132>
    e638:	464b      	mov	r3, r9
    e63a:	210c      	movs	r1, #12
    e63c:	5e59      	ldrsh	r1, [r3, r1]
    e63e:	b28b      	uxth	r3, r1
    e640:	059a      	lsls	r2, r3, #22
    e642:	d56e      	bpl.n	e722 <_vfprintf_r+0x12a>
    e644:	2280      	movs	r2, #128	; 0x80
    e646:	0192      	lsls	r2, r2, #6
    e648:	4213      	tst	r3, r2
    e64a:	d109      	bne.n	e660 <_vfprintf_r+0x68>
    e64c:	430a      	orrs	r2, r1
    e64e:	464b      	mov	r3, r9
    e650:	4649      	mov	r1, r9
    e652:	819a      	strh	r2, [r3, #12]
    e654:	6e49      	ldr	r1, [r1, #100]	; 0x64
    e656:	4bcc      	ldr	r3, [pc, #816]	; (e988 <_vfprintf_r+0x390>)
    e658:	400b      	ands	r3, r1
    e65a:	4649      	mov	r1, r9
    e65c:	664b      	str	r3, [r1, #100]	; 0x64
    e65e:	b293      	uxth	r3, r2
    e660:	071a      	lsls	r2, r3, #28
    e662:	d567      	bpl.n	e734 <_vfprintf_r+0x13c>
    e664:	464a      	mov	r2, r9
    e666:	6912      	ldr	r2, [r2, #16]
    e668:	2a00      	cmp	r2, #0
    e66a:	d063      	beq.n	e734 <_vfprintf_r+0x13c>
    e66c:	221a      	movs	r2, #26
    e66e:	401a      	ands	r2, r3
    e670:	2a0a      	cmp	r2, #10
    e672:	d100      	bne.n	e676 <_vfprintf_r+0x7e>
    e674:	e088      	b.n	e788 <_vfprintf_r+0x190>
    e676:	ab32      	add	r3, sp, #200	; 0xc8
    e678:	9325      	str	r3, [sp, #148]	; 0x94
    e67a:	2300      	movs	r3, #0
    e67c:	46cb      	mov	fp, r9
    e67e:	af25      	add	r7, sp, #148	; 0x94
    e680:	60bb      	str	r3, [r7, #8]
    e682:	607b      	str	r3, [r7, #4]
    e684:	9407      	str	r4, [sp, #28]
    e686:	9314      	str	r3, [sp, #80]	; 0x50
    e688:	9316      	str	r3, [sp, #88]	; 0x58
    e68a:	9315      	str	r3, [sp, #84]	; 0x54
    e68c:	ae32      	add	r6, sp, #200	; 0xc8
    e68e:	9319      	str	r3, [sp, #100]	; 0x64
    e690:	931a      	str	r3, [sp, #104]	; 0x68
    e692:	930a      	str	r3, [sp, #40]	; 0x28
    e694:	9c07      	ldr	r4, [sp, #28]
    e696:	7823      	ldrb	r3, [r4, #0]
    e698:	2b00      	cmp	r3, #0
    e69a:	d101      	bne.n	e6a0 <_vfprintf_r+0xa8>
    e69c:	f000 fd9e 	bl	f1dc <_vfprintf_r+0xbe4>
    e6a0:	2b25      	cmp	r3, #37	; 0x25
    e6a2:	d103      	bne.n	e6ac <_vfprintf_r+0xb4>
    e6a4:	f000 fd9a 	bl	f1dc <_vfprintf_r+0xbe4>
    e6a8:	2b25      	cmp	r3, #37	; 0x25
    e6aa:	d003      	beq.n	e6b4 <_vfprintf_r+0xbc>
    e6ac:	3401      	adds	r4, #1
    e6ae:	7823      	ldrb	r3, [r4, #0]
    e6b0:	2b00      	cmp	r3, #0
    e6b2:	d1f9      	bne.n	e6a8 <_vfprintf_r+0xb0>
    e6b4:	9b07      	ldr	r3, [sp, #28]
    e6b6:	1ae5      	subs	r5, r4, r3
    e6b8:	d010      	beq.n	e6dc <_vfprintf_r+0xe4>
    e6ba:	9b07      	ldr	r3, [sp, #28]
    e6bc:	6075      	str	r5, [r6, #4]
    e6be:	6033      	str	r3, [r6, #0]
    e6c0:	68bb      	ldr	r3, [r7, #8]
    e6c2:	195b      	adds	r3, r3, r5
    e6c4:	60bb      	str	r3, [r7, #8]
    e6c6:	687b      	ldr	r3, [r7, #4]
    e6c8:	3301      	adds	r3, #1
    e6ca:	607b      	str	r3, [r7, #4]
    e6cc:	2b07      	cmp	r3, #7
    e6ce:	dc4c      	bgt.n	e76a <_vfprintf_r+0x172>
    e6d0:	3608      	adds	r6, #8
    e6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e6d4:	469c      	mov	ip, r3
    e6d6:	44ac      	add	ip, r5
    e6d8:	4663      	mov	r3, ip
    e6da:	930a      	str	r3, [sp, #40]	; 0x28
    e6dc:	7823      	ldrb	r3, [r4, #0]
    e6de:	2b00      	cmp	r3, #0
    e6e0:	d101      	bne.n	e6e6 <_vfprintf_r+0xee>
    e6e2:	f000 fc99 	bl	f018 <_vfprintf_r+0xa20>
    e6e6:	1c63      	adds	r3, r4, #1
    e6e8:	9307      	str	r3, [sp, #28]
    e6ea:	2300      	movs	r3, #0
    e6ec:	aa16      	add	r2, sp, #88	; 0x58
    e6ee:	77d3      	strb	r3, [r2, #31]
    e6f0:	2201      	movs	r2, #1
    e6f2:	4252      	negs	r2, r2
    e6f4:	4692      	mov	sl, r2
    e6f6:	2200      	movs	r2, #0
    e6f8:	920b      	str	r2, [sp, #44]	; 0x2c
    e6fa:	3220      	adds	r2, #32
    e6fc:	4691      	mov	r9, r2
    e6fe:	3220      	adds	r2, #32
    e700:	7863      	ldrb	r3, [r4, #1]
    e702:	2100      	movs	r1, #0
    e704:	2000      	movs	r0, #0
    e706:	2400      	movs	r4, #0
    e708:	4694      	mov	ip, r2
    e70a:	9a07      	ldr	r2, [sp, #28]
    e70c:	3201      	adds	r2, #1
    e70e:	9207      	str	r2, [sp, #28]
    e710:	001a      	movs	r2, r3
    e712:	3a20      	subs	r2, #32
    e714:	2a58      	cmp	r2, #88	; 0x58
    e716:	d900      	bls.n	e71a <_vfprintf_r+0x122>
    e718:	e2e7      	b.n	ecea <_vfprintf_r+0x6f2>
    e71a:	4d9c      	ldr	r5, [pc, #624]	; (e98c <_vfprintf_r+0x394>)
    e71c:	0092      	lsls	r2, r2, #2
    e71e:	58aa      	ldr	r2, [r5, r2]
    e720:	4697      	mov	pc, r2
    e722:	464b      	mov	r3, r9
    e724:	6d98      	ldr	r0, [r3, #88]	; 0x58
    e726:	f003 f8fb 	bl	11920 <__retarget_lock_acquire_recursive>
    e72a:	464b      	mov	r3, r9
    e72c:	210c      	movs	r1, #12
    e72e:	5e59      	ldrsh	r1, [r3, r1]
    e730:	b28b      	uxth	r3, r1
    e732:	e787      	b.n	e644 <_vfprintf_r+0x4c>
    e734:	4649      	mov	r1, r9
    e736:	9806      	ldr	r0, [sp, #24]
    e738:	f001 fb80 	bl	fe3c <__swsetup_r>
    e73c:	464b      	mov	r3, r9
    e73e:	2800      	cmp	r0, #0
    e740:	d03a      	beq.n	e7b8 <_vfprintf_r+0x1c0>
    e742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e744:	07db      	lsls	r3, r3, #31
    e746:	d405      	bmi.n	e754 <_vfprintf_r+0x15c>
    e748:	464b      	mov	r3, r9
    e74a:	899b      	ldrh	r3, [r3, #12]
    e74c:	059b      	lsls	r3, r3, #22
    e74e:	d401      	bmi.n	e754 <_vfprintf_r+0x15c>
    e750:	f000 ffcf 	bl	f6f2 <_vfprintf_r+0x10fa>
    e754:	2301      	movs	r3, #1
    e756:	425b      	negs	r3, r3
    e758:	930a      	str	r3, [sp, #40]	; 0x28
    e75a:	980a      	ldr	r0, [sp, #40]	; 0x28
    e75c:	b043      	add	sp, #268	; 0x10c
    e75e:	bc3c      	pop	{r2, r3, r4, r5}
    e760:	4690      	mov	r8, r2
    e762:	4699      	mov	r9, r3
    e764:	46a2      	mov	sl, r4
    e766:	46ab      	mov	fp, r5
    e768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e76a:	003a      	movs	r2, r7
    e76c:	4659      	mov	r1, fp
    e76e:	9806      	ldr	r0, [sp, #24]
    e770:	f005 fcc6 	bl	14100 <__sprint_r>
    e774:	2800      	cmp	r0, #0
    e776:	d001      	beq.n	e77c <_vfprintf_r+0x184>
    e778:	f000 fcce 	bl	f118 <_vfprintf_r+0xb20>
    e77c:	ae32      	add	r6, sp, #200	; 0xc8
    e77e:	e7a8      	b.n	e6d2 <_vfprintf_r+0xda>
    e780:	9806      	ldr	r0, [sp, #24]
    e782:	f002 fd5b 	bl	1123c <__sinit>
    e786:	e753      	b.n	e630 <_vfprintf_r+0x38>
    e788:	464a      	mov	r2, r9
    e78a:	210e      	movs	r1, #14
    e78c:	5e52      	ldrsh	r2, [r2, r1]
    e78e:	2a00      	cmp	r2, #0
    e790:	da00      	bge.n	e794 <_vfprintf_r+0x19c>
    e792:	e770      	b.n	e676 <_vfprintf_r+0x7e>
    e794:	464a      	mov	r2, r9
    e796:	6e52      	ldr	r2, [r2, #100]	; 0x64
    e798:	07d2      	lsls	r2, r2, #31
    e79a:	d405      	bmi.n	e7a8 <_vfprintf_r+0x1b0>
    e79c:	059b      	lsls	r3, r3, #22
    e79e:	d403      	bmi.n	e7a8 <_vfprintf_r+0x1b0>
    e7a0:	464b      	mov	r3, r9
    e7a2:	6d98      	ldr	r0, [r3, #88]	; 0x58
    e7a4:	f003 f8be 	bl	11924 <__retarget_lock_release_recursive>
    e7a8:	002b      	movs	r3, r5
    e7aa:	0022      	movs	r2, r4
    e7ac:	4649      	mov	r1, r9
    e7ae:	9806      	ldr	r0, [sp, #24]
    e7b0:	f001 fa8e 	bl	fcd0 <__sbprintf>
    e7b4:	900a      	str	r0, [sp, #40]	; 0x28
    e7b6:	e7d0      	b.n	e75a <_vfprintf_r+0x162>
    e7b8:	899b      	ldrh	r3, [r3, #12]
    e7ba:	e757      	b.n	e66c <_vfprintf_r+0x74>
    e7bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7be:	920f      	str	r2, [sp, #60]	; 0x3c
    e7c0:	425b      	negs	r3, r3
    e7c2:	930b      	str	r3, [sp, #44]	; 0x2c
    e7c4:	2304      	movs	r3, #4
    e7c6:	431c      	orrs	r4, r3
    e7c8:	9b07      	ldr	r3, [sp, #28]
    e7ca:	781b      	ldrb	r3, [r3, #0]
    e7cc:	e79d      	b.n	e70a <_vfprintf_r+0x112>
    e7ce:	9b07      	ldr	r3, [sp, #28]
    e7d0:	2101      	movs	r1, #1
    e7d2:	781b      	ldrb	r3, [r3, #0]
    e7d4:	202b      	movs	r0, #43	; 0x2b
    e7d6:	e798      	b.n	e70a <_vfprintf_r+0x112>
    e7d8:	9b07      	ldr	r3, [sp, #28]
    e7da:	1c5a      	adds	r2, r3, #1
    e7dc:	781b      	ldrb	r3, [r3, #0]
    e7de:	4690      	mov	r8, r2
    e7e0:	2b2a      	cmp	r3, #42	; 0x2a
    e7e2:	d101      	bne.n	e7e8 <_vfprintf_r+0x1f0>
    e7e4:	f001 fa38 	bl	fc58 <_vfprintf_r+0x1660>
    e7e8:	001a      	movs	r2, r3
    e7ea:	2500      	movs	r5, #0
    e7ec:	3a30      	subs	r2, #48	; 0x30
    e7ee:	46aa      	mov	sl, r5
    e7f0:	2a09      	cmp	r2, #9
    e7f2:	d901      	bls.n	e7f8 <_vfprintf_r+0x200>
    e7f4:	f001 f96d 	bl	fad2 <_vfprintf_r+0x14da>
    e7f8:	0025      	movs	r5, r4
    e7fa:	4643      	mov	r3, r8
    e7fc:	4654      	mov	r4, sl
    e7fe:	4688      	mov	r8, r1
    e800:	4682      	mov	sl, r0
    e802:	00a1      	lsls	r1, r4, #2
    e804:	190c      	adds	r4, r1, r4
    e806:	7818      	ldrb	r0, [r3, #0]
    e808:	0064      	lsls	r4, r4, #1
    e80a:	18a4      	adds	r4, r4, r2
    e80c:	0002      	movs	r2, r0
    e80e:	1c59      	adds	r1, r3, #1
    e810:	3a30      	subs	r2, #48	; 0x30
    e812:	000b      	movs	r3, r1
    e814:	2a09      	cmp	r2, #9
    e816:	d9f4      	bls.n	e802 <_vfprintf_r+0x20a>
    e818:	9107      	str	r1, [sp, #28]
    e81a:	0003      	movs	r3, r0
    e81c:	4641      	mov	r1, r8
    e81e:	4650      	mov	r0, sl
    e820:	46a2      	mov	sl, r4
    e822:	002c      	movs	r4, r5
    e824:	e774      	b.n	e710 <_vfprintf_r+0x118>
    e826:	9312      	str	r3, [sp, #72]	; 0x48
    e828:	2900      	cmp	r1, #0
    e82a:	d001      	beq.n	e830 <_vfprintf_r+0x238>
    e82c:	f001 fa2e 	bl	fc8c <_vfprintf_r+0x1694>
    e830:	4b57      	ldr	r3, [pc, #348]	; (e990 <_vfprintf_r+0x398>)
    e832:	9319      	str	r3, [sp, #100]	; 0x64
    e834:	06a3      	lsls	r3, r4, #26
    e836:	d501      	bpl.n	e83c <_vfprintf_r+0x244>
    e838:	f000 fe9a 	bl	f570 <_vfprintf_r+0xf78>
    e83c:	06e3      	lsls	r3, r4, #27
    e83e:	d501      	bpl.n	e844 <_vfprintf_r+0x24c>
    e840:	f000 fd9a 	bl	f378 <_vfprintf_r+0xd80>
    e844:	0663      	lsls	r3, r4, #25
    e846:	d401      	bmi.n	e84c <_vfprintf_r+0x254>
    e848:	f000 fd96 	bl	f378 <_vfprintf_r+0xd80>
    e84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e84e:	881a      	ldrh	r2, [r3, #0]
    e850:	920c      	str	r2, [sp, #48]	; 0x30
    e852:	2200      	movs	r2, #0
    e854:	3304      	adds	r3, #4
    e856:	920d      	str	r2, [sp, #52]	; 0x34
    e858:	930f      	str	r3, [sp, #60]	; 0x3c
    e85a:	07e3      	lsls	r3, r4, #31
    e85c:	d401      	bmi.n	e862 <_vfprintf_r+0x26a>
    e85e:	f000 fd76 	bl	f34e <_vfprintf_r+0xd56>
    e862:	990c      	ldr	r1, [sp, #48]	; 0x30
    e864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e866:	000b      	movs	r3, r1
    e868:	4313      	orrs	r3, r2
    e86a:	001a      	movs	r2, r3
    e86c:	2302      	movs	r3, #2
    e86e:	2a00      	cmp	r2, #0
    e870:	d008      	beq.n	e884 <_vfprintf_r+0x28c>
    e872:	2030      	movs	r0, #48	; 0x30
    e874:	a91e      	add	r1, sp, #120	; 0x78
    e876:	7008      	strb	r0, [r1, #0]
    e878:	2548      	movs	r5, #72	; 0x48
    e87a:	4668      	mov	r0, sp
    e87c:	1940      	adds	r0, r0, r5
    e87e:	7800      	ldrb	r0, [r0, #0]
    e880:	431c      	orrs	r4, r3
    e882:	7048      	strb	r0, [r1, #1]
    e884:	2100      	movs	r1, #0
    e886:	4688      	mov	r8, r1
    e888:	a816      	add	r0, sp, #88	; 0x58
    e88a:	77c1      	strb	r1, [r0, #31]
    e88c:	4651      	mov	r1, sl
    e88e:	3101      	adds	r1, #1
    e890:	d100      	bne.n	e894 <_vfprintf_r+0x29c>
    e892:	e0e6      	b.n	ea62 <_vfprintf_r+0x46a>
    e894:	2180      	movs	r1, #128	; 0x80
    e896:	0020      	movs	r0, r4
    e898:	4388      	bics	r0, r1
    e89a:	9009      	str	r0, [sp, #36]	; 0x24
    e89c:	2a00      	cmp	r2, #0
    e89e:	d000      	beq.n	e8a2 <_vfprintf_r+0x2aa>
    e8a0:	e0e3      	b.n	ea6a <_vfprintf_r+0x472>
    e8a2:	4652      	mov	r2, sl
    e8a4:	2a00      	cmp	r2, #0
    e8a6:	d001      	beq.n	e8ac <_vfprintf_r+0x2b4>
    e8a8:	f000 fc38 	bl	f11c <_vfprintf_r+0xb24>
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	d001      	beq.n	e8b4 <_vfprintf_r+0x2bc>
    e8b0:	f000 fd0c 	bl	f2cc <_vfprintf_r+0xcd4>
    e8b4:	2001      	movs	r0, #1
    e8b6:	ab32      	add	r3, sp, #200	; 0xc8
    e8b8:	4020      	ands	r0, r4
    e8ba:	900e      	str	r0, [sp, #56]	; 0x38
    e8bc:	9311      	str	r3, [sp, #68]	; 0x44
    e8be:	d008      	beq.n	e8d2 <_vfprintf_r+0x2da>
    e8c0:	2327      	movs	r3, #39	; 0x27
    e8c2:	2130      	movs	r1, #48	; 0x30
    e8c4:	aa28      	add	r2, sp, #160	; 0xa0
    e8c6:	54d1      	strb	r1, [r2, r3]
    e8c8:	aa16      	add	r2, sp, #88	; 0x58
    e8ca:	4694      	mov	ip, r2
    e8cc:	3348      	adds	r3, #72	; 0x48
    e8ce:	4463      	add	r3, ip
    e8d0:	9311      	str	r3, [sp, #68]	; 0x44
    e8d2:	4653      	mov	r3, sl
    e8d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e8d6:	9308      	str	r3, [sp, #32]
    e8d8:	4592      	cmp	sl, r2
    e8da:	da00      	bge.n	e8de <_vfprintf_r+0x2e6>
    e8dc:	9208      	str	r2, [sp, #32]
    e8de:	2300      	movs	r3, #0
    e8e0:	9313      	str	r3, [sp, #76]	; 0x4c
    e8e2:	4643      	mov	r3, r8
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	d002      	beq.n	e8ee <_vfprintf_r+0x2f6>
    e8e8:	9b08      	ldr	r3, [sp, #32]
    e8ea:	3301      	adds	r3, #1
    e8ec:	9308      	str	r3, [sp, #32]
    e8ee:	2302      	movs	r3, #2
    e8f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e8f2:	401a      	ands	r2, r3
    e8f4:	4691      	mov	r9, r2
    e8f6:	d002      	beq.n	e8fe <_vfprintf_r+0x306>
    e8f8:	9b08      	ldr	r3, [sp, #32]
    e8fa:	3302      	adds	r3, #2
    e8fc:	9308      	str	r3, [sp, #32]
    e8fe:	2384      	movs	r3, #132	; 0x84
    e900:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e902:	401a      	ands	r2, r3
    e904:	9210      	str	r2, [sp, #64]	; 0x40
    e906:	d000      	beq.n	e90a <_vfprintf_r+0x312>
    e908:	e207      	b.n	ed1a <_vfprintf_r+0x722>
    e90a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e90c:	9a08      	ldr	r2, [sp, #32]
    e90e:	1a9c      	subs	r4, r3, r2
    e910:	2c00      	cmp	r4, #0
    e912:	dc00      	bgt.n	e916 <_vfprintf_r+0x31e>
    e914:	e201      	b.n	ed1a <_vfprintf_r+0x722>
    e916:	491f      	ldr	r1, [pc, #124]	; (e994 <_vfprintf_r+0x39c>)
    e918:	68ba      	ldr	r2, [r7, #8]
    e91a:	687b      	ldr	r3, [r7, #4]
    e91c:	4688      	mov	r8, r1
    e91e:	2c10      	cmp	r4, #16
    e920:	dd21      	ble.n	e966 <_vfprintf_r+0x36e>
    e922:	0031      	movs	r1, r6
    e924:	2510      	movs	r5, #16
    e926:	465e      	mov	r6, fp
    e928:	e003      	b.n	e932 <_vfprintf_r+0x33a>
    e92a:	3c10      	subs	r4, #16
    e92c:	3108      	adds	r1, #8
    e92e:	2c10      	cmp	r4, #16
    e930:	dd17      	ble.n	e962 <_vfprintf_r+0x36a>
    e932:	4640      	mov	r0, r8
    e934:	3210      	adds	r2, #16
    e936:	3301      	adds	r3, #1
    e938:	6008      	str	r0, [r1, #0]
    e93a:	604d      	str	r5, [r1, #4]
    e93c:	60ba      	str	r2, [r7, #8]
    e93e:	607b      	str	r3, [r7, #4]
    e940:	2b07      	cmp	r3, #7
    e942:	ddf2      	ble.n	e92a <_vfprintf_r+0x332>
    e944:	003a      	movs	r2, r7
    e946:	0031      	movs	r1, r6
    e948:	9806      	ldr	r0, [sp, #24]
    e94a:	f005 fbd9 	bl	14100 <__sprint_r>
    e94e:	2800      	cmp	r0, #0
    e950:	d001      	beq.n	e956 <_vfprintf_r+0x35e>
    e952:	f000 fccf 	bl	f2f4 <_vfprintf_r+0xcfc>
    e956:	3c10      	subs	r4, #16
    e958:	68ba      	ldr	r2, [r7, #8]
    e95a:	687b      	ldr	r3, [r7, #4]
    e95c:	a932      	add	r1, sp, #200	; 0xc8
    e95e:	2c10      	cmp	r4, #16
    e960:	dce7      	bgt.n	e932 <_vfprintf_r+0x33a>
    e962:	46b3      	mov	fp, r6
    e964:	000e      	movs	r6, r1
    e966:	4641      	mov	r1, r8
    e968:	6074      	str	r4, [r6, #4]
    e96a:	3301      	adds	r3, #1
    e96c:	18a4      	adds	r4, r4, r2
    e96e:	6031      	str	r1, [r6, #0]
    e970:	60bc      	str	r4, [r7, #8]
    e972:	607b      	str	r3, [r7, #4]
    e974:	2b07      	cmp	r3, #7
    e976:	dd01      	ble.n	e97c <_vfprintf_r+0x384>
    e978:	f000 fcae 	bl	f2d8 <_vfprintf_r+0xce0>
    e97c:	ab16      	add	r3, sp, #88	; 0x58
    e97e:	7fdb      	ldrb	r3, [r3, #31]
    e980:	3608      	adds	r6, #8
    e982:	4698      	mov	r8, r3
    e984:	e1ca      	b.n	ed1c <_vfprintf_r+0x724>
    e986:	46c0      	nop			; (mov r8, r8)
    e988:	ffffdfff 	.word	0xffffdfff
    e98c:	00019188 	.word	0x00019188
    e990:	00018cc4 	.word	0x00018cc4
    e994:	000192ec 	.word	0x000192ec
    e998:	2200      	movs	r2, #0
    e99a:	9d07      	ldr	r5, [sp, #28]
    e99c:	3b30      	subs	r3, #48	; 0x30
    e99e:	46a8      	mov	r8, r5
    e9a0:	920b      	str	r2, [sp, #44]	; 0x2c
    e9a2:	001a      	movs	r2, r3
    e9a4:	9408      	str	r4, [sp, #32]
    e9a6:	002c      	movs	r4, r5
    e9a8:	4655      	mov	r5, sl
    e9aa:	4682      	mov	sl, r0
    e9ac:	4640      	mov	r0, r8
    e9ae:	4688      	mov	r8, r1
    e9b0:	0011      	movs	r1, r2
    e9b2:	2200      	movs	r2, #0
    e9b4:	0093      	lsls	r3, r2, #2
    e9b6:	189a      	adds	r2, r3, r2
    e9b8:	7803      	ldrb	r3, [r0, #0]
    e9ba:	0052      	lsls	r2, r2, #1
    e9bc:	188a      	adds	r2, r1, r2
    e9be:	0019      	movs	r1, r3
    e9c0:	3401      	adds	r4, #1
    e9c2:	3930      	subs	r1, #48	; 0x30
    e9c4:	0020      	movs	r0, r4
    e9c6:	2909      	cmp	r1, #9
    e9c8:	d9f4      	bls.n	e9b4 <_vfprintf_r+0x3bc>
    e9ca:	9407      	str	r4, [sp, #28]
    e9cc:	4650      	mov	r0, sl
    e9ce:	9c08      	ldr	r4, [sp, #32]
    e9d0:	920b      	str	r2, [sp, #44]	; 0x2c
    e9d2:	4641      	mov	r1, r8
    e9d4:	46aa      	mov	sl, r5
    e9d6:	e69b      	b.n	e710 <_vfprintf_r+0x118>
    e9d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e9da:	9312      	str	r3, [sp, #72]	; 0x48
    e9dc:	6813      	ldr	r3, [r2, #0]
    e9de:	2120      	movs	r1, #32
    e9e0:	9308      	str	r3, [sp, #32]
    e9e2:	466b      	mov	r3, sp
    e9e4:	185b      	adds	r3, r3, r1
    e9e6:	781b      	ldrb	r3, [r3, #0]
    e9e8:	ad28      	add	r5, sp, #160	; 0xa0
    e9ea:	702b      	strb	r3, [r5, #0]
    e9ec:	2300      	movs	r3, #0
    e9ee:	a916      	add	r1, sp, #88	; 0x58
    e9f0:	77cb      	strb	r3, [r1, #31]
    e9f2:	0013      	movs	r3, r2
    e9f4:	3304      	adds	r3, #4
    e9f6:	930f      	str	r3, [sp, #60]	; 0x3c
    e9f8:	2300      	movs	r3, #0
    e9fa:	9409      	str	r4, [sp, #36]	; 0x24
    e9fc:	4698      	mov	r8, r3
    e9fe:	3301      	adds	r3, #1
    ea00:	9308      	str	r3, [sp, #32]
    ea02:	930e      	str	r3, [sp, #56]	; 0x38
    ea04:	2300      	movs	r3, #0
    ea06:	9511      	str	r5, [sp, #68]	; 0x44
    ea08:	469a      	mov	sl, r3
    ea0a:	9313      	str	r3, [sp, #76]	; 0x4c
    ea0c:	e76f      	b.n	e8ee <_vfprintf_r+0x2f6>
    ea0e:	9312      	str	r3, [sp, #72]	; 0x48
    ea10:	2900      	cmp	r1, #0
    ea12:	d001      	beq.n	ea18 <_vfprintf_r+0x420>
    ea14:	f001 f94d 	bl	fcb2 <_vfprintf_r+0x16ba>
    ea18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ea1a:	06a3      	lsls	r3, r4, #26
    ea1c:	d501      	bpl.n	ea22 <_vfprintf_r+0x42a>
    ea1e:	f000 fd5a 	bl	f4d6 <_vfprintf_r+0xede>
    ea22:	06e3      	lsls	r3, r4, #27
    ea24:	d501      	bpl.n	ea2a <_vfprintf_r+0x432>
    ea26:	f000 fcab 	bl	f380 <_vfprintf_r+0xd88>
    ea2a:	0663      	lsls	r3, r4, #25
    ea2c:	d401      	bmi.n	ea32 <_vfprintf_r+0x43a>
    ea2e:	f000 fca7 	bl	f380 <_vfprintf_r+0xd88>
    ea32:	2100      	movs	r1, #0
    ea34:	5e53      	ldrsh	r3, [r2, r1]
    ea36:	930c      	str	r3, [sp, #48]	; 0x30
    ea38:	3204      	adds	r2, #4
    ea3a:	17db      	asrs	r3, r3, #31
    ea3c:	930d      	str	r3, [sp, #52]	; 0x34
    ea3e:	920f      	str	r2, [sp, #60]	; 0x3c
    ea40:	2b00      	cmp	r3, #0
    ea42:	da01      	bge.n	ea48 <_vfprintf_r+0x450>
    ea44:	f000 fdb2 	bl	f5ac <_vfprintf_r+0xfb4>
    ea48:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea4a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ea4c:	0008      	movs	r0, r1
    ea4e:	4651      	mov	r1, sl
    ea50:	ab16      	add	r3, sp, #88	; 0x58
    ea52:	7fdb      	ldrb	r3, [r3, #31]
    ea54:	4310      	orrs	r0, r2
    ea56:	4698      	mov	r8, r3
    ea58:	0002      	movs	r2, r0
    ea5a:	2301      	movs	r3, #1
    ea5c:	3101      	adds	r1, #1
    ea5e:	d000      	beq.n	ea62 <_vfprintf_r+0x46a>
    ea60:	e718      	b.n	e894 <_vfprintf_r+0x29c>
    ea62:	2a00      	cmp	r2, #0
    ea64:	d100      	bne.n	ea68 <_vfprintf_r+0x470>
    ea66:	e35a      	b.n	f11e <_vfprintf_r+0xb26>
    ea68:	9409      	str	r4, [sp, #36]	; 0x24
    ea6a:	2b01      	cmp	r3, #1
    ea6c:	d101      	bne.n	ea72 <_vfprintf_r+0x47a>
    ea6e:	f000 fc06 	bl	f27e <_vfprintf_r+0xc86>
    ea72:	2b02      	cmp	r3, #2
    ea74:	d000      	beq.n	ea78 <_vfprintf_r+0x480>
    ea76:	e380      	b.n	f17a <_vfprintf_r+0xb82>
    ea78:	9c19      	ldr	r4, [sp, #100]	; 0x64
    ea7a:	200f      	movs	r0, #15
    ea7c:	46a1      	mov	r9, r4
    ea7e:	46b4      	mov	ip, r6
    ea80:	ab32      	add	r3, sp, #200	; 0xc8
    ea82:	0019      	movs	r1, r3
    ea84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ea86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ea88:	0004      	movs	r4, r0
    ea8a:	464d      	mov	r5, r9
    ea8c:	4014      	ands	r4, r2
    ea8e:	5d2c      	ldrb	r4, [r5, r4]
    ea90:	071e      	lsls	r6, r3, #28
    ea92:	0915      	lsrs	r5, r2, #4
    ea94:	3901      	subs	r1, #1
    ea96:	432e      	orrs	r6, r5
    ea98:	700c      	strb	r4, [r1, #0]
    ea9a:	091c      	lsrs	r4, r3, #4
    ea9c:	0023      	movs	r3, r4
    ea9e:	0034      	movs	r4, r6
    eaa0:	0032      	movs	r2, r6
    eaa2:	431c      	orrs	r4, r3
    eaa4:	d1f0      	bne.n	ea88 <_vfprintf_r+0x490>
    eaa6:	920c      	str	r2, [sp, #48]	; 0x30
    eaa8:	930d      	str	r3, [sp, #52]	; 0x34
    eaaa:	ab32      	add	r3, sp, #200	; 0xc8
    eaac:	1a5b      	subs	r3, r3, r1
    eaae:	9111      	str	r1, [sp, #68]	; 0x44
    eab0:	4666      	mov	r6, ip
    eab2:	930e      	str	r3, [sp, #56]	; 0x38
    eab4:	e70d      	b.n	e8d2 <_vfprintf_r+0x2da>
    eab6:	4663      	mov	r3, ip
    eab8:	431c      	orrs	r4, r3
    eaba:	9b07      	ldr	r3, [sp, #28]
    eabc:	781b      	ldrb	r3, [r3, #0]
    eabe:	e624      	b.n	e70a <_vfprintf_r+0x112>
    eac0:	9b07      	ldr	r3, [sp, #28]
    eac2:	781b      	ldrb	r3, [r3, #0]
    eac4:	2b6c      	cmp	r3, #108	; 0x6c
    eac6:	d101      	bne.n	eacc <_vfprintf_r+0x4d4>
    eac8:	f000 fe8c 	bl	f7e4 <_vfprintf_r+0x11ec>
    eacc:	2210      	movs	r2, #16
    eace:	4314      	orrs	r4, r2
    ead0:	e61b      	b.n	e70a <_vfprintf_r+0x112>
    ead2:	2900      	cmp	r1, #0
    ead4:	d001      	beq.n	eada <_vfprintf_r+0x4e2>
    ead6:	f001 f8d5 	bl	fc84 <_vfprintf_r+0x168c>
    eada:	06a3      	lsls	r3, r4, #26
    eadc:	d501      	bpl.n	eae2 <_vfprintf_r+0x4ea>
    eade:	f000 fe76 	bl	f7ce <_vfprintf_r+0x11d6>
    eae2:	06e3      	lsls	r3, r4, #27
    eae4:	d500      	bpl.n	eae8 <_vfprintf_r+0x4f0>
    eae6:	e110      	b.n	ed0a <_vfprintf_r+0x712>
    eae8:	0663      	lsls	r3, r4, #25
    eaea:	d400      	bmi.n	eaee <_vfprintf_r+0x4f6>
    eaec:	e10d      	b.n	ed0a <_vfprintf_r+0x712>
    eaee:	4669      	mov	r1, sp
    eaf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eaf2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    eaf4:	681a      	ldr	r2, [r3, #0]
    eaf6:	3304      	adds	r3, #4
    eaf8:	9208      	str	r2, [sp, #32]
    eafa:	8011      	strh	r1, [r2, #0]
    eafc:	930f      	str	r3, [sp, #60]	; 0x3c
    eafe:	e5c9      	b.n	e694 <_vfprintf_r+0x9c>
    eb00:	990f      	ldr	r1, [sp, #60]	; 0x3c
    eb02:	2230      	movs	r2, #48	; 0x30
    eb04:	680b      	ldr	r3, [r1, #0]
    eb06:	930c      	str	r3, [sp, #48]	; 0x30
    eb08:	2300      	movs	r3, #0
    eb0a:	930d      	str	r3, [sp, #52]	; 0x34
    eb0c:	3302      	adds	r3, #2
    eb0e:	431c      	orrs	r4, r3
    eb10:	ab1e      	add	r3, sp, #120	; 0x78
    eb12:	701a      	strb	r2, [r3, #0]
    eb14:	3248      	adds	r2, #72	; 0x48
    eb16:	705a      	strb	r2, [r3, #1]
    eb18:	000b      	movs	r3, r1
    eb1a:	3304      	adds	r3, #4
    eb1c:	930f      	str	r3, [sp, #60]	; 0x3c
    eb1e:	4bc1      	ldr	r3, [pc, #772]	; (ee24 <_vfprintf_r+0x82c>)
    eb20:	9212      	str	r2, [sp, #72]	; 0x48
    eb22:	9319      	str	r3, [sp, #100]	; 0x64
    eb24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eb26:	2302      	movs	r3, #2
    eb28:	e6ac      	b.n	e884 <_vfprintf_r+0x28c>
    eb2a:	464b      	mov	r3, r9
    eb2c:	431c      	orrs	r4, r3
    eb2e:	9b07      	ldr	r3, [sp, #28]
    eb30:	781b      	ldrb	r3, [r3, #0]
    eb32:	e5ea      	b.n	e70a <_vfprintf_r+0x112>
    eb34:	9312      	str	r3, [sp, #72]	; 0x48
    eb36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eb38:	a916      	add	r1, sp, #88	; 0x58
    eb3a:	1d1d      	adds	r5, r3, #4
    eb3c:	681b      	ldr	r3, [r3, #0]
    eb3e:	001a      	movs	r2, r3
    eb40:	9311      	str	r3, [sp, #68]	; 0x44
    eb42:	2300      	movs	r3, #0
    eb44:	77cb      	strb	r3, [r1, #31]
    eb46:	2a00      	cmp	r2, #0
    eb48:	d101      	bne.n	eb4e <_vfprintf_r+0x556>
    eb4a:	f000 ff01 	bl	f950 <_vfprintf_r+0x1358>
    eb4e:	4653      	mov	r3, sl
    eb50:	3301      	adds	r3, #1
    eb52:	d101      	bne.n	eb58 <_vfprintf_r+0x560>
    eb54:	f000 fe64 	bl	f820 <_vfprintf_r+0x1228>
    eb58:	4652      	mov	r2, sl
    eb5a:	2100      	movs	r1, #0
    eb5c:	9811      	ldr	r0, [sp, #68]	; 0x44
    eb5e:	f002 ffb7 	bl	11ad0 <memchr>
    eb62:	2800      	cmp	r0, #0
    eb64:	d101      	bne.n	eb6a <_vfprintf_r+0x572>
    eb66:	f000 ff78 	bl	fa5a <_vfprintf_r+0x1462>
    eb6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eb6c:	1ac3      	subs	r3, r0, r3
    eb6e:	001a      	movs	r2, r3
    eb70:	930e      	str	r3, [sp, #56]	; 0x38
    eb72:	43db      	mvns	r3, r3
    eb74:	17db      	asrs	r3, r3, #31
    eb76:	401a      	ands	r2, r3
    eb78:	ab16      	add	r3, sp, #88	; 0x58
    eb7a:	7fdb      	ldrb	r3, [r3, #31]
    eb7c:	9208      	str	r2, [sp, #32]
    eb7e:	4698      	mov	r8, r3
    eb80:	2300      	movs	r3, #0
    eb82:	950f      	str	r5, [sp, #60]	; 0x3c
    eb84:	9409      	str	r4, [sp, #36]	; 0x24
    eb86:	469a      	mov	sl, r3
    eb88:	9313      	str	r3, [sp, #76]	; 0x4c
    eb8a:	e6aa      	b.n	e8e2 <_vfprintf_r+0x2ea>
    eb8c:	2308      	movs	r3, #8
    eb8e:	431c      	orrs	r4, r3
    eb90:	9b07      	ldr	r3, [sp, #28]
    eb92:	781b      	ldrb	r3, [r3, #0]
    eb94:	e5b9      	b.n	e70a <_vfprintf_r+0x112>
    eb96:	9312      	str	r3, [sp, #72]	; 0x48
    eb98:	2310      	movs	r3, #16
    eb9a:	431c      	orrs	r4, r3
    eb9c:	06a3      	lsls	r3, r4, #26
    eb9e:	d501      	bpl.n	eba4 <_vfprintf_r+0x5ac>
    eba0:	f000 fca7 	bl	f4f2 <_vfprintf_r+0xefa>
    eba4:	06e3      	lsls	r3, r4, #27
    eba6:	d500      	bpl.n	ebaa <_vfprintf_r+0x5b2>
    eba8:	e3ee      	b.n	f388 <_vfprintf_r+0xd90>
    ebaa:	0663      	lsls	r3, r4, #25
    ebac:	d400      	bmi.n	ebb0 <_vfprintf_r+0x5b8>
    ebae:	e3eb      	b.n	f388 <_vfprintf_r+0xd90>
    ebb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ebb2:	881a      	ldrh	r2, [r3, #0]
    ebb4:	920c      	str	r2, [sp, #48]	; 0x30
    ebb6:	2200      	movs	r2, #0
    ebb8:	3304      	adds	r3, #4
    ebba:	920d      	str	r2, [sp, #52]	; 0x34
    ebbc:	930f      	str	r3, [sp, #60]	; 0x3c
    ebbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ebc0:	2300      	movs	r3, #0
    ebc2:	e65f      	b.n	e884 <_vfprintf_r+0x28c>
    ebc4:	9312      	str	r3, [sp, #72]	; 0x48
    ebc6:	2310      	movs	r3, #16
    ebc8:	431c      	orrs	r4, r3
    ebca:	06a3      	lsls	r3, r4, #26
    ebcc:	d501      	bpl.n	ebd2 <_vfprintf_r+0x5da>
    ebce:	f000 fcba 	bl	f546 <_vfprintf_r+0xf4e>
    ebd2:	06e3      	lsls	r3, r4, #27
    ebd4:	d500      	bpl.n	ebd8 <_vfprintf_r+0x5e0>
    ebd6:	e3da      	b.n	f38e <_vfprintf_r+0xd96>
    ebd8:	0663      	lsls	r3, r4, #25
    ebda:	d400      	bmi.n	ebde <_vfprintf_r+0x5e6>
    ebdc:	e3d7      	b.n	f38e <_vfprintf_r+0xd96>
    ebde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ebe0:	881a      	ldrh	r2, [r3, #0]
    ebe2:	920c      	str	r2, [sp, #48]	; 0x30
    ebe4:	2200      	movs	r2, #0
    ebe6:	3304      	adds	r3, #4
    ebe8:	920d      	str	r2, [sp, #52]	; 0x34
    ebea:	930f      	str	r3, [sp, #60]	; 0x3c
    ebec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ebee:	2301      	movs	r3, #1
    ebf0:	e648      	b.n	e884 <_vfprintf_r+0x28c>
    ebf2:	9312      	str	r3, [sp, #72]	; 0x48
    ebf4:	2900      	cmp	r1, #0
    ebf6:	d001      	beq.n	ebfc <_vfprintf_r+0x604>
    ebf8:	f001 f857 	bl	fcaa <_vfprintf_r+0x16b2>
    ebfc:	4b8a      	ldr	r3, [pc, #552]	; (ee28 <_vfprintf_r+0x830>)
    ebfe:	9319      	str	r3, [sp, #100]	; 0x64
    ec00:	e618      	b.n	e834 <_vfprintf_r+0x23c>
    ec02:	2301      	movs	r3, #1
    ec04:	431c      	orrs	r4, r3
    ec06:	9b07      	ldr	r3, [sp, #28]
    ec08:	781b      	ldrb	r3, [r3, #0]
    ec0a:	e57e      	b.n	e70a <_vfprintf_r+0x112>
    ec0c:	2380      	movs	r3, #128	; 0x80
    ec0e:	431c      	orrs	r4, r3
    ec10:	9b07      	ldr	r3, [sp, #28]
    ec12:	781b      	ldrb	r3, [r3, #0]
    ec14:	e579      	b.n	e70a <_vfprintf_r+0x112>
    ec16:	9b07      	ldr	r3, [sp, #28]
    ec18:	781b      	ldrb	r3, [r3, #0]
    ec1a:	2800      	cmp	r0, #0
    ec1c:	d000      	beq.n	ec20 <_vfprintf_r+0x628>
    ec1e:	e574      	b.n	e70a <_vfprintf_r+0x112>
    ec20:	2101      	movs	r1, #1
    ec22:	3020      	adds	r0, #32
    ec24:	e571      	b.n	e70a <_vfprintf_r+0x112>
    ec26:	9312      	str	r3, [sp, #72]	; 0x48
    ec28:	2900      	cmp	r1, #0
    ec2a:	d001      	beq.n	ec30 <_vfprintf_r+0x638>
    ec2c:	f001 f839 	bl	fca2 <_vfprintf_r+0x16aa>
    ec30:	2207      	movs	r2, #7
    ec32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ec34:	3307      	adds	r3, #7
    ec36:	4393      	bics	r3, r2
    ec38:	3201      	adds	r2, #1
    ec3a:	4694      	mov	ip, r2
    ec3c:	449c      	add	ip, r3
    ec3e:	4662      	mov	r2, ip
    ec40:	920f      	str	r2, [sp, #60]	; 0x3c
    ec42:	681a      	ldr	r2, [r3, #0]
    ec44:	9216      	str	r2, [sp, #88]	; 0x58
    ec46:	685b      	ldr	r3, [r3, #4]
    ec48:	2201      	movs	r2, #1
    ec4a:	9315      	str	r3, [sp, #84]	; 0x54
    ec4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ec4e:	9d16      	ldr	r5, [sp, #88]	; 0x58
    ec50:	005b      	lsls	r3, r3, #1
    ec52:	085b      	lsrs	r3, r3, #1
    ec54:	4698      	mov	r8, r3
    ec56:	4252      	negs	r2, r2
    ec58:	4b74      	ldr	r3, [pc, #464]	; (ee2c <_vfprintf_r+0x834>)
    ec5a:	0028      	movs	r0, r5
    ec5c:	4641      	mov	r1, r8
    ec5e:	f006 fb6b 	bl	15338 <__aeabi_dcmpun>
    ec62:	2800      	cmp	r0, #0
    ec64:	d001      	beq.n	ec6a <_vfprintf_r+0x672>
    ec66:	f000 fcb4 	bl	f5d2 <_vfprintf_r+0xfda>
    ec6a:	2201      	movs	r2, #1
    ec6c:	4b6f      	ldr	r3, [pc, #444]	; (ee2c <_vfprintf_r+0x834>)
    ec6e:	4252      	negs	r2, r2
    ec70:	0028      	movs	r0, r5
    ec72:	4641      	mov	r1, r8
    ec74:	f7fc f850 	bl	ad18 <__aeabi_dcmple>
    ec78:	2800      	cmp	r0, #0
    ec7a:	d001      	beq.n	ec80 <_vfprintf_r+0x688>
    ec7c:	f000 fca9 	bl	f5d2 <_vfprintf_r+0xfda>
    ec80:	2200      	movs	r2, #0
    ec82:	2300      	movs	r3, #0
    ec84:	9816      	ldr	r0, [sp, #88]	; 0x58
    ec86:	9915      	ldr	r1, [sp, #84]	; 0x54
    ec88:	f7fc f83c 	bl	ad04 <__aeabi_dcmplt>
    ec8c:	2800      	cmp	r0, #0
    ec8e:	d001      	beq.n	ec94 <_vfprintf_r+0x69c>
    ec90:	f000 fd55 	bl	f73e <_vfprintf_r+0x1146>
    ec94:	ab16      	add	r3, sp, #88	; 0x58
    ec96:	7fdb      	ldrb	r3, [r3, #31]
    ec98:	4698      	mov	r8, r3
    ec9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ec9c:	2b47      	cmp	r3, #71	; 0x47
    ec9e:	dd01      	ble.n	eca4 <_vfprintf_r+0x6ac>
    eca0:	f000 fdb4 	bl	f80c <_vfprintf_r+0x1214>
    eca4:	4b62      	ldr	r3, [pc, #392]	; (ee30 <_vfprintf_r+0x838>)
    eca6:	9311      	str	r3, [sp, #68]	; 0x44
    eca8:	2380      	movs	r3, #128	; 0x80
    ecaa:	439c      	bics	r4, r3
    ecac:	3b7d      	subs	r3, #125	; 0x7d
    ecae:	9308      	str	r3, [sp, #32]
    ecb0:	930e      	str	r3, [sp, #56]	; 0x38
    ecb2:	2300      	movs	r3, #0
    ecb4:	9409      	str	r4, [sp, #36]	; 0x24
    ecb6:	469a      	mov	sl, r3
    ecb8:	9313      	str	r3, [sp, #76]	; 0x4c
    ecba:	e612      	b.n	e8e2 <_vfprintf_r+0x2ea>
    ecbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ecbe:	1d1a      	adds	r2, r3, #4
    ecc0:	681b      	ldr	r3, [r3, #0]
    ecc2:	930b      	str	r3, [sp, #44]	; 0x2c
    ecc4:	2b00      	cmp	r3, #0
    ecc6:	da00      	bge.n	ecca <_vfprintf_r+0x6d2>
    ecc8:	e578      	b.n	e7bc <_vfprintf_r+0x1c4>
    ecca:	9b07      	ldr	r3, [sp, #28]
    eccc:	920f      	str	r2, [sp, #60]	; 0x3c
    ecce:	781b      	ldrb	r3, [r3, #0]
    ecd0:	e51b      	b.n	e70a <_vfprintf_r+0x112>
    ecd2:	9312      	str	r3, [sp, #72]	; 0x48
    ecd4:	2900      	cmp	r1, #0
    ecd6:	d001      	beq.n	ecdc <_vfprintf_r+0x6e4>
    ecd8:	f000 ffcc 	bl	fc74 <_vfprintf_r+0x167c>
    ecdc:	2310      	movs	r3, #16
    ecde:	431c      	orrs	r4, r3
    ece0:	e69a      	b.n	ea18 <_vfprintf_r+0x420>
    ece2:	9312      	str	r3, [sp, #72]	; 0x48
    ece4:	e771      	b.n	ebca <_vfprintf_r+0x5d2>
    ece6:	9312      	str	r3, [sp, #72]	; 0x48
    ece8:	e758      	b.n	eb9c <_vfprintf_r+0x5a4>
    ecea:	9312      	str	r3, [sp, #72]	; 0x48
    ecec:	2900      	cmp	r1, #0
    ecee:	d001      	beq.n	ecf4 <_vfprintf_r+0x6fc>
    ecf0:	f000 ffd3 	bl	fc9a <_vfprintf_r+0x16a2>
    ecf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ecf6:	2b00      	cmp	r3, #0
    ecf8:	d100      	bne.n	ecfc <_vfprintf_r+0x704>
    ecfa:	e18d      	b.n	f018 <_vfprintf_r+0xa20>
    ecfc:	ad28      	add	r5, sp, #160	; 0xa0
    ecfe:	702b      	strb	r3, [r5, #0]
    ed00:	2300      	movs	r3, #0
    ed02:	aa16      	add	r2, sp, #88	; 0x58
    ed04:	77d3      	strb	r3, [r2, #31]
    ed06:	9409      	str	r4, [sp, #36]	; 0x24
    ed08:	e678      	b.n	e9fc <_vfprintf_r+0x404>
    ed0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ed0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ed0e:	6813      	ldr	r3, [r2, #0]
    ed10:	6019      	str	r1, [r3, #0]
    ed12:	0013      	movs	r3, r2
    ed14:	3304      	adds	r3, #4
    ed16:	930f      	str	r3, [sp, #60]	; 0x3c
    ed18:	e4bc      	b.n	e694 <_vfprintf_r+0x9c>
    ed1a:	68bc      	ldr	r4, [r7, #8]
    ed1c:	4643      	mov	r3, r8
    ed1e:	2b00      	cmp	r3, #0
    ed20:	d00f      	beq.n	ed42 <_vfprintf_r+0x74a>
    ed22:	aa16      	add	r2, sp, #88	; 0x58
    ed24:	231f      	movs	r3, #31
    ed26:	4694      	mov	ip, r2
    ed28:	4463      	add	r3, ip
    ed2a:	6033      	str	r3, [r6, #0]
    ed2c:	2301      	movs	r3, #1
    ed2e:	6073      	str	r3, [r6, #4]
    ed30:	687b      	ldr	r3, [r7, #4]
    ed32:	3401      	adds	r4, #1
    ed34:	3301      	adds	r3, #1
    ed36:	60bc      	str	r4, [r7, #8]
    ed38:	607b      	str	r3, [r7, #4]
    ed3a:	2b07      	cmp	r3, #7
    ed3c:	dd00      	ble.n	ed40 <_vfprintf_r+0x748>
    ed3e:	e203      	b.n	f148 <_vfprintf_r+0xb50>
    ed40:	3608      	adds	r6, #8
    ed42:	464b      	mov	r3, r9
    ed44:	2b00      	cmp	r3, #0
    ed46:	d00c      	beq.n	ed62 <_vfprintf_r+0x76a>
    ed48:	ab1e      	add	r3, sp, #120	; 0x78
    ed4a:	6033      	str	r3, [r6, #0]
    ed4c:	2302      	movs	r3, #2
    ed4e:	6073      	str	r3, [r6, #4]
    ed50:	687b      	ldr	r3, [r7, #4]
    ed52:	3402      	adds	r4, #2
    ed54:	3301      	adds	r3, #1
    ed56:	60bc      	str	r4, [r7, #8]
    ed58:	607b      	str	r3, [r7, #4]
    ed5a:	2b07      	cmp	r3, #7
    ed5c:	dd00      	ble.n	ed60 <_vfprintf_r+0x768>
    ed5e:	e1fd      	b.n	f15c <_vfprintf_r+0xb64>
    ed60:	3608      	adds	r6, #8
    ed62:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed64:	2b80      	cmp	r3, #128	; 0x80
    ed66:	d100      	bne.n	ed6a <_vfprintf_r+0x772>
    ed68:	e173      	b.n	f052 <_vfprintf_r+0xa5a>
    ed6a:	4653      	mov	r3, sl
    ed6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ed6e:	1a9d      	subs	r5, r3, r2
    ed70:	2d00      	cmp	r5, #0
    ed72:	dd32      	ble.n	edda <_vfprintf_r+0x7e2>
    ed74:	4a2f      	ldr	r2, [pc, #188]	; (ee34 <_vfprintf_r+0x83c>)
    ed76:	687b      	ldr	r3, [r7, #4]
    ed78:	4691      	mov	r9, r2
    ed7a:	2d10      	cmp	r5, #16
    ed7c:	dd22      	ble.n	edc4 <_vfprintf_r+0x7cc>
    ed7e:	2210      	movs	r2, #16
    ed80:	4692      	mov	sl, r2
    ed82:	0022      	movs	r2, r4
    ed84:	465c      	mov	r4, fp
    ed86:	e003      	b.n	ed90 <_vfprintf_r+0x798>
    ed88:	3d10      	subs	r5, #16
    ed8a:	3608      	adds	r6, #8
    ed8c:	2d10      	cmp	r5, #16
    ed8e:	dd17      	ble.n	edc0 <_vfprintf_r+0x7c8>
    ed90:	4649      	mov	r1, r9
    ed92:	6031      	str	r1, [r6, #0]
    ed94:	4651      	mov	r1, sl
    ed96:	3210      	adds	r2, #16
    ed98:	3301      	adds	r3, #1
    ed9a:	6071      	str	r1, [r6, #4]
    ed9c:	60ba      	str	r2, [r7, #8]
    ed9e:	607b      	str	r3, [r7, #4]
    eda0:	2b07      	cmp	r3, #7
    eda2:	ddf1      	ble.n	ed88 <_vfprintf_r+0x790>
    eda4:	003a      	movs	r2, r7
    eda6:	0021      	movs	r1, r4
    eda8:	9806      	ldr	r0, [sp, #24]
    edaa:	f005 f9a9 	bl	14100 <__sprint_r>
    edae:	2800      	cmp	r0, #0
    edb0:	d000      	beq.n	edb4 <_vfprintf_r+0x7bc>
    edb2:	e18a      	b.n	f0ca <_vfprintf_r+0xad2>
    edb4:	3d10      	subs	r5, #16
    edb6:	68ba      	ldr	r2, [r7, #8]
    edb8:	687b      	ldr	r3, [r7, #4]
    edba:	ae32      	add	r6, sp, #200	; 0xc8
    edbc:	2d10      	cmp	r5, #16
    edbe:	dce7      	bgt.n	ed90 <_vfprintf_r+0x798>
    edc0:	46a3      	mov	fp, r4
    edc2:	0014      	movs	r4, r2
    edc4:	464a      	mov	r2, r9
    edc6:	1964      	adds	r4, r4, r5
    edc8:	3301      	adds	r3, #1
    edca:	6032      	str	r2, [r6, #0]
    edcc:	6075      	str	r5, [r6, #4]
    edce:	60bc      	str	r4, [r7, #8]
    edd0:	607b      	str	r3, [r7, #4]
    edd2:	2b07      	cmp	r3, #7
    edd4:	dd00      	ble.n	edd8 <_vfprintf_r+0x7e0>
    edd6:	e1ad      	b.n	f134 <_vfprintf_r+0xb3c>
    edd8:	3608      	adds	r6, #8
    edda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eddc:	05db      	lsls	r3, r3, #23
    edde:	d500      	bpl.n	ede2 <_vfprintf_r+0x7ea>
    ede0:	e0be      	b.n	ef60 <_vfprintf_r+0x968>
    ede2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ede4:	6033      	str	r3, [r6, #0]
    ede6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ede8:	469c      	mov	ip, r3
    edea:	6073      	str	r3, [r6, #4]
    edec:	687b      	ldr	r3, [r7, #4]
    edee:	4464      	add	r4, ip
    edf0:	3301      	adds	r3, #1
    edf2:	60bc      	str	r4, [r7, #8]
    edf4:	607b      	str	r3, [r7, #4]
    edf6:	2b07      	cmp	r3, #7
    edf8:	dd00      	ble.n	edfc <_vfprintf_r+0x804>
    edfa:	e0a6      	b.n	ef4a <_vfprintf_r+0x952>
    edfc:	3608      	adds	r6, #8
    edfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ee00:	075b      	lsls	r3, r3, #29
    ee02:	d54a      	bpl.n	ee9a <_vfprintf_r+0x8a2>
    ee04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee06:	9a08      	ldr	r2, [sp, #32]
    ee08:	1a9d      	subs	r5, r3, r2
    ee0a:	2d00      	cmp	r5, #0
    ee0c:	dd45      	ble.n	ee9a <_vfprintf_r+0x8a2>
    ee0e:	4a0a      	ldr	r2, [pc, #40]	; (ee38 <_vfprintf_r+0x840>)
    ee10:	687b      	ldr	r3, [r7, #4]
    ee12:	4690      	mov	r8, r2
    ee14:	2d10      	cmp	r5, #16
    ee16:	dd2f      	ble.n	ee78 <_vfprintf_r+0x880>
    ee18:	2210      	movs	r2, #16
    ee1a:	4691      	mov	r9, r2
    ee1c:	0022      	movs	r2, r4
    ee1e:	465c      	mov	r4, fp
    ee20:	e010      	b.n	ee44 <_vfprintf_r+0x84c>
    ee22:	46c0      	nop			; (mov r8, r8)
    ee24:	00018cc4 	.word	0x00018cc4
    ee28:	00018cb0 	.word	0x00018cb0
    ee2c:	7fefffff 	.word	0x7fefffff
    ee30:	00018ca0 	.word	0x00018ca0
    ee34:	000192fc 	.word	0x000192fc
    ee38:	000192ec 	.word	0x000192ec
    ee3c:	3d10      	subs	r5, #16
    ee3e:	3608      	adds	r6, #8
    ee40:	2d10      	cmp	r5, #16
    ee42:	dd17      	ble.n	ee74 <_vfprintf_r+0x87c>
    ee44:	49d1      	ldr	r1, [pc, #836]	; (f18c <_vfprintf_r+0xb94>)
    ee46:	3210      	adds	r2, #16
    ee48:	6031      	str	r1, [r6, #0]
    ee4a:	4649      	mov	r1, r9
    ee4c:	3301      	adds	r3, #1
    ee4e:	6071      	str	r1, [r6, #4]
    ee50:	60ba      	str	r2, [r7, #8]
    ee52:	607b      	str	r3, [r7, #4]
    ee54:	2b07      	cmp	r3, #7
    ee56:	ddf1      	ble.n	ee3c <_vfprintf_r+0x844>
    ee58:	003a      	movs	r2, r7
    ee5a:	0021      	movs	r1, r4
    ee5c:	9806      	ldr	r0, [sp, #24]
    ee5e:	f005 f94f 	bl	14100 <__sprint_r>
    ee62:	2800      	cmp	r0, #0
    ee64:	d000      	beq.n	ee68 <_vfprintf_r+0x870>
    ee66:	e130      	b.n	f0ca <_vfprintf_r+0xad2>
    ee68:	3d10      	subs	r5, #16
    ee6a:	68ba      	ldr	r2, [r7, #8]
    ee6c:	687b      	ldr	r3, [r7, #4]
    ee6e:	ae32      	add	r6, sp, #200	; 0xc8
    ee70:	2d10      	cmp	r5, #16
    ee72:	dce7      	bgt.n	ee44 <_vfprintf_r+0x84c>
    ee74:	46a3      	mov	fp, r4
    ee76:	0014      	movs	r4, r2
    ee78:	4642      	mov	r2, r8
    ee7a:	1964      	adds	r4, r4, r5
    ee7c:	3301      	adds	r3, #1
    ee7e:	c624      	stmia	r6!, {r2, r5}
    ee80:	60bc      	str	r4, [r7, #8]
    ee82:	607b      	str	r3, [r7, #4]
    ee84:	2b07      	cmp	r3, #7
    ee86:	dd08      	ble.n	ee9a <_vfprintf_r+0x8a2>
    ee88:	003a      	movs	r2, r7
    ee8a:	4659      	mov	r1, fp
    ee8c:	9806      	ldr	r0, [sp, #24]
    ee8e:	f005 f937 	bl	14100 <__sprint_r>
    ee92:	2800      	cmp	r0, #0
    ee94:	d000      	beq.n	ee98 <_vfprintf_r+0x8a0>
    ee96:	e13f      	b.n	f118 <_vfprintf_r+0xb20>
    ee98:	68bc      	ldr	r4, [r7, #8]
    ee9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ee9c:	9908      	ldr	r1, [sp, #32]
    ee9e:	428b      	cmp	r3, r1
    eea0:	da00      	bge.n	eea4 <_vfprintf_r+0x8ac>
    eea2:	000b      	movs	r3, r1
    eea4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eea6:	4694      	mov	ip, r2
    eea8:	449c      	add	ip, r3
    eeaa:	4663      	mov	r3, ip
    eeac:	930a      	str	r3, [sp, #40]	; 0x28
    eeae:	2c00      	cmp	r4, #0
    eeb0:	d000      	beq.n	eeb4 <_vfprintf_r+0x8bc>
    eeb2:	e129      	b.n	f108 <_vfprintf_r+0xb10>
    eeb4:	2300      	movs	r3, #0
    eeb6:	ae32      	add	r6, sp, #200	; 0xc8
    eeb8:	607b      	str	r3, [r7, #4]
    eeba:	f7ff fbeb 	bl	e694 <_vfprintf_r+0x9c>
    eebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    eec0:	2b01      	cmp	r3, #1
    eec2:	dc00      	bgt.n	eec6 <_vfprintf_r+0x8ce>
    eec4:	e103      	b.n	f0ce <_vfprintf_r+0xad6>
    eec6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eec8:	3401      	adds	r4, #1
    eeca:	6033      	str	r3, [r6, #0]
    eecc:	2301      	movs	r3, #1
    eece:	6073      	str	r3, [r6, #4]
    eed0:	687b      	ldr	r3, [r7, #4]
    eed2:	60bc      	str	r4, [r7, #8]
    eed4:	3301      	adds	r3, #1
    eed6:	607b      	str	r3, [r7, #4]
    eed8:	2b07      	cmp	r3, #7
    eeda:	dd00      	ble.n	eede <_vfprintf_r+0x8e6>
    eedc:	e2ef      	b.n	f4be <_vfprintf_r+0xec6>
    eede:	3608      	adds	r6, #8
    eee0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    eee2:	3301      	adds	r3, #1
    eee4:	6032      	str	r2, [r6, #0]
    eee6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eee8:	4698      	mov	r8, r3
    eeea:	4694      	mov	ip, r2
    eeec:	4464      	add	r4, ip
    eeee:	6072      	str	r2, [r6, #4]
    eef0:	60bc      	str	r4, [r7, #8]
    eef2:	607b      	str	r3, [r7, #4]
    eef4:	2b07      	cmp	r3, #7
    eef6:	dd00      	ble.n	eefa <_vfprintf_r+0x902>
    eef8:	e318      	b.n	f52c <_vfprintf_r+0xf34>
    eefa:	3608      	adds	r6, #8
    eefc:	2200      	movs	r2, #0
    eefe:	2300      	movs	r3, #0
    ef00:	9816      	ldr	r0, [sp, #88]	; 0x58
    ef02:	9915      	ldr	r1, [sp, #84]	; 0x54
    ef04:	f7fb fef8 	bl	acf8 <__aeabi_dcmpeq>
    ef08:	2800      	cmp	r0, #0
    ef0a:	d000      	beq.n	ef0e <_vfprintf_r+0x916>
    ef0c:	e1f4      	b.n	f2f8 <_vfprintf_r+0xd00>
    ef0e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    ef10:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ef12:	3501      	adds	r5, #1
    ef14:	3b01      	subs	r3, #1
    ef16:	6035      	str	r5, [r6, #0]
    ef18:	6073      	str	r3, [r6, #4]
    ef1a:	18e4      	adds	r4, r4, r3
    ef1c:	2301      	movs	r3, #1
    ef1e:	469c      	mov	ip, r3
    ef20:	44e0      	add	r8, ip
    ef22:	4643      	mov	r3, r8
    ef24:	60bc      	str	r4, [r7, #8]
    ef26:	607b      	str	r3, [r7, #4]
    ef28:	2b07      	cmp	r3, #7
    ef2a:	dd00      	ble.n	ef2e <_vfprintf_r+0x936>
    ef2c:	e0e0      	b.n	f0f0 <_vfprintf_r+0xaf8>
    ef2e:	3608      	adds	r6, #8
    ef30:	ab21      	add	r3, sp, #132	; 0x84
    ef32:	6033      	str	r3, [r6, #0]
    ef34:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ef36:	469c      	mov	ip, r3
    ef38:	6073      	str	r3, [r6, #4]
    ef3a:	4643      	mov	r3, r8
    ef3c:	4464      	add	r4, ip
    ef3e:	3301      	adds	r3, #1
    ef40:	60bc      	str	r4, [r7, #8]
    ef42:	607b      	str	r3, [r7, #4]
    ef44:	2b07      	cmp	r3, #7
    ef46:	dc00      	bgt.n	ef4a <_vfprintf_r+0x952>
    ef48:	e758      	b.n	edfc <_vfprintf_r+0x804>
    ef4a:	003a      	movs	r2, r7
    ef4c:	4659      	mov	r1, fp
    ef4e:	9806      	ldr	r0, [sp, #24]
    ef50:	f005 f8d6 	bl	14100 <__sprint_r>
    ef54:	2800      	cmp	r0, #0
    ef56:	d000      	beq.n	ef5a <_vfprintf_r+0x962>
    ef58:	e0de      	b.n	f118 <_vfprintf_r+0xb20>
    ef5a:	68bc      	ldr	r4, [r7, #8]
    ef5c:	ae32      	add	r6, sp, #200	; 0xc8
    ef5e:	e74e      	b.n	edfe <_vfprintf_r+0x806>
    ef60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ef62:	2b65      	cmp	r3, #101	; 0x65
    ef64:	ddab      	ble.n	eebe <_vfprintf_r+0x8c6>
    ef66:	2200      	movs	r2, #0
    ef68:	2300      	movs	r3, #0
    ef6a:	9816      	ldr	r0, [sp, #88]	; 0x58
    ef6c:	9915      	ldr	r1, [sp, #84]	; 0x54
    ef6e:	f7fb fec3 	bl	acf8 <__aeabi_dcmpeq>
    ef72:	2800      	cmp	r0, #0
    ef74:	d100      	bne.n	ef78 <_vfprintf_r+0x980>
    ef76:	e134      	b.n	f1e2 <_vfprintf_r+0xbea>
    ef78:	4b85      	ldr	r3, [pc, #532]	; (f190 <_vfprintf_r+0xb98>)
    ef7a:	3401      	adds	r4, #1
    ef7c:	6033      	str	r3, [r6, #0]
    ef7e:	2301      	movs	r3, #1
    ef80:	6073      	str	r3, [r6, #4]
    ef82:	687b      	ldr	r3, [r7, #4]
    ef84:	60bc      	str	r4, [r7, #8]
    ef86:	3301      	adds	r3, #1
    ef88:	607b      	str	r3, [r7, #4]
    ef8a:	2b07      	cmp	r3, #7
    ef8c:	dd00      	ble.n	ef90 <_vfprintf_r+0x998>
    ef8e:	e3dc      	b.n	f74a <_vfprintf_r+0x1152>
    ef90:	3608      	adds	r6, #8
    ef92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ef94:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ef96:	4293      	cmp	r3, r2
    ef98:	db03      	blt.n	efa2 <_vfprintf_r+0x9aa>
    ef9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef9c:	07db      	lsls	r3, r3, #31
    ef9e:	d400      	bmi.n	efa2 <_vfprintf_r+0x9aa>
    efa0:	e3b7      	b.n	f712 <_vfprintf_r+0x111a>
    efa2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    efa4:	68ba      	ldr	r2, [r7, #8]
    efa6:	6033      	str	r3, [r6, #0]
    efa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    efaa:	469c      	mov	ip, r3
    efac:	6073      	str	r3, [r6, #4]
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	4462      	add	r2, ip
    efb2:	3301      	adds	r3, #1
    efb4:	0014      	movs	r4, r2
    efb6:	60ba      	str	r2, [r7, #8]
    efb8:	607b      	str	r3, [r7, #4]
    efba:	2b07      	cmp	r3, #7
    efbc:	dd01      	ble.n	efc2 <_vfprintf_r+0x9ca>
    efbe:	f000 fc19 	bl	f7f4 <_vfprintf_r+0x11fc>
    efc2:	3608      	adds	r6, #8
    efc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    efc6:	1e5d      	subs	r5, r3, #1
    efc8:	2d00      	cmp	r5, #0
    efca:	dc00      	bgt.n	efce <_vfprintf_r+0x9d6>
    efcc:	e717      	b.n	edfe <_vfprintf_r+0x806>
    efce:	4a71      	ldr	r2, [pc, #452]	; (f194 <_vfprintf_r+0xb9c>)
    efd0:	687b      	ldr	r3, [r7, #4]
    efd2:	4691      	mov	r9, r2
    efd4:	2d10      	cmp	r5, #16
    efd6:	dc00      	bgt.n	efda <_vfprintf_r+0x9e2>
    efd8:	e1c3      	b.n	f362 <_vfprintf_r+0xd6a>
    efda:	2210      	movs	r2, #16
    efdc:	4690      	mov	r8, r2
    efde:	0022      	movs	r2, r4
    efe0:	464c      	mov	r4, r9
    efe2:	46d9      	mov	r9, fp
    efe4:	e004      	b.n	eff0 <_vfprintf_r+0x9f8>
    efe6:	3608      	adds	r6, #8
    efe8:	3d10      	subs	r5, #16
    efea:	2d10      	cmp	r5, #16
    efec:	dc00      	bgt.n	eff0 <_vfprintf_r+0x9f8>
    efee:	e37c      	b.n	f6ea <_vfprintf_r+0x10f2>
    eff0:	4641      	mov	r1, r8
    eff2:	3210      	adds	r2, #16
    eff4:	3301      	adds	r3, #1
    eff6:	6034      	str	r4, [r6, #0]
    eff8:	6071      	str	r1, [r6, #4]
    effa:	60ba      	str	r2, [r7, #8]
    effc:	607b      	str	r3, [r7, #4]
    effe:	2b07      	cmp	r3, #7
    f000:	ddf1      	ble.n	efe6 <_vfprintf_r+0x9ee>
    f002:	003a      	movs	r2, r7
    f004:	4649      	mov	r1, r9
    f006:	9806      	ldr	r0, [sp, #24]
    f008:	f005 f87a 	bl	14100 <__sprint_r>
    f00c:	2800      	cmp	r0, #0
    f00e:	d10b      	bne.n	f028 <_vfprintf_r+0xa30>
    f010:	68ba      	ldr	r2, [r7, #8]
    f012:	687b      	ldr	r3, [r7, #4]
    f014:	ae32      	add	r6, sp, #200	; 0xc8
    f016:	e7e7      	b.n	efe8 <_vfprintf_r+0x9f0>
    f018:	68bb      	ldr	r3, [r7, #8]
    f01a:	46d9      	mov	r9, fp
    f01c:	2b00      	cmp	r3, #0
    f01e:	d001      	beq.n	f024 <_vfprintf_r+0xa2c>
    f020:	f000 fd4c 	bl	fabc <_vfprintf_r+0x14c4>
    f024:	2300      	movs	r3, #0
    f026:	607b      	str	r3, [r7, #4]
    f028:	464b      	mov	r3, r9
    f02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    f02c:	07db      	lsls	r3, r3, #31
    f02e:	d40d      	bmi.n	f04c <_vfprintf_r+0xa54>
    f030:	464b      	mov	r3, r9
    f032:	899b      	ldrh	r3, [r3, #12]
    f034:	059a      	lsls	r2, r3, #22
    f036:	d505      	bpl.n	f044 <_vfprintf_r+0xa4c>
    f038:	065b      	lsls	r3, r3, #25
    f03a:	d401      	bmi.n	f040 <_vfprintf_r+0xa48>
    f03c:	f7ff fb8d 	bl	e75a <_vfprintf_r+0x162>
    f040:	f7ff fb88 	bl	e754 <_vfprintf_r+0x15c>
    f044:	464b      	mov	r3, r9
    f046:	6d98      	ldr	r0, [r3, #88]	; 0x58
    f048:	f002 fc6c 	bl	11924 <__retarget_lock_release_recursive>
    f04c:	464b      	mov	r3, r9
    f04e:	899b      	ldrh	r3, [r3, #12]
    f050:	e7f2      	b.n	f038 <_vfprintf_r+0xa40>
    f052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f054:	9a08      	ldr	r2, [sp, #32]
    f056:	1a9d      	subs	r5, r3, r2
    f058:	2d00      	cmp	r5, #0
    f05a:	dc00      	bgt.n	f05e <_vfprintf_r+0xa66>
    f05c:	e685      	b.n	ed6a <_vfprintf_r+0x772>
    f05e:	4a4d      	ldr	r2, [pc, #308]	; (f194 <_vfprintf_r+0xb9c>)
    f060:	687b      	ldr	r3, [r7, #4]
    f062:	4691      	mov	r9, r2
    f064:	2d10      	cmp	r5, #16
    f066:	dd24      	ble.n	f0b2 <_vfprintf_r+0xaba>
    f068:	2210      	movs	r2, #16
    f06a:	0021      	movs	r1, r4
    f06c:	4690      	mov	r8, r2
    f06e:	465c      	mov	r4, fp
    f070:	0032      	movs	r2, r6
    f072:	464e      	mov	r6, r9
    f074:	e003      	b.n	f07e <_vfprintf_r+0xa86>
    f076:	3d10      	subs	r5, #16
    f078:	3208      	adds	r2, #8
    f07a:	2d10      	cmp	r5, #16
    f07c:	dd15      	ble.n	f0aa <_vfprintf_r+0xab2>
    f07e:	4640      	mov	r0, r8
    f080:	3110      	adds	r1, #16
    f082:	3301      	adds	r3, #1
    f084:	6016      	str	r6, [r2, #0]
    f086:	6050      	str	r0, [r2, #4]
    f088:	60b9      	str	r1, [r7, #8]
    f08a:	607b      	str	r3, [r7, #4]
    f08c:	2b07      	cmp	r3, #7
    f08e:	ddf2      	ble.n	f076 <_vfprintf_r+0xa7e>
    f090:	003a      	movs	r2, r7
    f092:	0021      	movs	r1, r4
    f094:	9806      	ldr	r0, [sp, #24]
    f096:	f005 f833 	bl	14100 <__sprint_r>
    f09a:	2800      	cmp	r0, #0
    f09c:	d115      	bne.n	f0ca <_vfprintf_r+0xad2>
    f09e:	3d10      	subs	r5, #16
    f0a0:	68b9      	ldr	r1, [r7, #8]
    f0a2:	687b      	ldr	r3, [r7, #4]
    f0a4:	aa32      	add	r2, sp, #200	; 0xc8
    f0a6:	2d10      	cmp	r5, #16
    f0a8:	dce9      	bgt.n	f07e <_vfprintf_r+0xa86>
    f0aa:	46a3      	mov	fp, r4
    f0ac:	46b1      	mov	r9, r6
    f0ae:	000c      	movs	r4, r1
    f0b0:	0016      	movs	r6, r2
    f0b2:	464a      	mov	r2, r9
    f0b4:	1964      	adds	r4, r4, r5
    f0b6:	3301      	adds	r3, #1
    f0b8:	6032      	str	r2, [r6, #0]
    f0ba:	6075      	str	r5, [r6, #4]
    f0bc:	60bc      	str	r4, [r7, #8]
    f0be:	607b      	str	r3, [r7, #4]
    f0c0:	2b07      	cmp	r3, #7
    f0c2:	dd00      	ble.n	f0c6 <_vfprintf_r+0xace>
    f0c4:	e263      	b.n	f58e <_vfprintf_r+0xf96>
    f0c6:	3608      	adds	r6, #8
    f0c8:	e64f      	b.n	ed6a <_vfprintf_r+0x772>
    f0ca:	46a1      	mov	r9, r4
    f0cc:	e7ac      	b.n	f028 <_vfprintf_r+0xa30>
    f0ce:	2301      	movs	r3, #1
    f0d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f0d2:	4213      	tst	r3, r2
    f0d4:	d000      	beq.n	f0d8 <_vfprintf_r+0xae0>
    f0d6:	e6f6      	b.n	eec6 <_vfprintf_r+0x8ce>
    f0d8:	6073      	str	r3, [r6, #4]
    f0da:	687b      	ldr	r3, [r7, #4]
    f0dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f0de:	3301      	adds	r3, #1
    f0e0:	3401      	adds	r4, #1
    f0e2:	6032      	str	r2, [r6, #0]
    f0e4:	60bc      	str	r4, [r7, #8]
    f0e6:	4698      	mov	r8, r3
    f0e8:	607b      	str	r3, [r7, #4]
    f0ea:	2b07      	cmp	r3, #7
    f0ec:	dc00      	bgt.n	f0f0 <_vfprintf_r+0xaf8>
    f0ee:	e71e      	b.n	ef2e <_vfprintf_r+0x936>
    f0f0:	003a      	movs	r2, r7
    f0f2:	4659      	mov	r1, fp
    f0f4:	9806      	ldr	r0, [sp, #24]
    f0f6:	f005 f803 	bl	14100 <__sprint_r>
    f0fa:	2800      	cmp	r0, #0
    f0fc:	d10c      	bne.n	f118 <_vfprintf_r+0xb20>
    f0fe:	687b      	ldr	r3, [r7, #4]
    f100:	68bc      	ldr	r4, [r7, #8]
    f102:	4698      	mov	r8, r3
    f104:	ae32      	add	r6, sp, #200	; 0xc8
    f106:	e713      	b.n	ef30 <_vfprintf_r+0x938>
    f108:	003a      	movs	r2, r7
    f10a:	4659      	mov	r1, fp
    f10c:	9806      	ldr	r0, [sp, #24]
    f10e:	f004 fff7 	bl	14100 <__sprint_r>
    f112:	2800      	cmp	r0, #0
    f114:	d100      	bne.n	f118 <_vfprintf_r+0xb20>
    f116:	e6cd      	b.n	eeb4 <_vfprintf_r+0x8bc>
    f118:	46d9      	mov	r9, fp
    f11a:	e785      	b.n	f028 <_vfprintf_r+0xa30>
    f11c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f11e:	2b01      	cmp	r3, #1
    f120:	d100      	bne.n	f124 <_vfprintf_r+0xb2c>
    f122:	e148      	b.n	f3b6 <_vfprintf_r+0xdbe>
    f124:	2b02      	cmp	r3, #2
    f126:	d123      	bne.n	f170 <_vfprintf_r+0xb78>
    f128:	9409      	str	r4, [sp, #36]	; 0x24
    f12a:	2300      	movs	r3, #0
    f12c:	2400      	movs	r4, #0
    f12e:	930c      	str	r3, [sp, #48]	; 0x30
    f130:	940d      	str	r4, [sp, #52]	; 0x34
    f132:	e4a1      	b.n	ea78 <_vfprintf_r+0x480>
    f134:	003a      	movs	r2, r7
    f136:	4659      	mov	r1, fp
    f138:	9806      	ldr	r0, [sp, #24]
    f13a:	f004 ffe1 	bl	14100 <__sprint_r>
    f13e:	2800      	cmp	r0, #0
    f140:	d1ea      	bne.n	f118 <_vfprintf_r+0xb20>
    f142:	68bc      	ldr	r4, [r7, #8]
    f144:	ae32      	add	r6, sp, #200	; 0xc8
    f146:	e648      	b.n	edda <_vfprintf_r+0x7e2>
    f148:	003a      	movs	r2, r7
    f14a:	4659      	mov	r1, fp
    f14c:	9806      	ldr	r0, [sp, #24]
    f14e:	f004 ffd7 	bl	14100 <__sprint_r>
    f152:	2800      	cmp	r0, #0
    f154:	d1e0      	bne.n	f118 <_vfprintf_r+0xb20>
    f156:	68bc      	ldr	r4, [r7, #8]
    f158:	ae32      	add	r6, sp, #200	; 0xc8
    f15a:	e5f2      	b.n	ed42 <_vfprintf_r+0x74a>
    f15c:	003a      	movs	r2, r7
    f15e:	4659      	mov	r1, fp
    f160:	9806      	ldr	r0, [sp, #24]
    f162:	f004 ffcd 	bl	14100 <__sprint_r>
    f166:	2800      	cmp	r0, #0
    f168:	d1d6      	bne.n	f118 <_vfprintf_r+0xb20>
    f16a:	68bc      	ldr	r4, [r7, #8]
    f16c:	ae32      	add	r6, sp, #200	; 0xc8
    f16e:	e5f8      	b.n	ed62 <_vfprintf_r+0x76a>
    f170:	9409      	str	r4, [sp, #36]	; 0x24
    f172:	2300      	movs	r3, #0
    f174:	2400      	movs	r4, #0
    f176:	930c      	str	r3, [sp, #48]	; 0x30
    f178:	940d      	str	r4, [sp, #52]	; 0x34
    f17a:	980c      	ldr	r0, [sp, #48]	; 0x30
    f17c:	990d      	ldr	r1, [sp, #52]	; 0x34
    f17e:	4653      	mov	r3, sl
    f180:	aa32      	add	r2, sp, #200	; 0xc8
    f182:	4691      	mov	r9, r2
    f184:	9308      	str	r3, [sp, #32]
    f186:	46b2      	mov	sl, r6
    f188:	e007      	b.n	f19a <_vfprintf_r+0xba2>
    f18a:	46c0      	nop			; (mov r8, r8)
    f18c:	000192ec 	.word	0x000192ec
    f190:	00018ce0 	.word	0x00018ce0
    f194:	000192fc 	.word	0x000192fc
    f198:	46a1      	mov	r9, r4
    f19a:	074a      	lsls	r2, r1, #29
    f19c:	4694      	mov	ip, r2
    f19e:	464b      	mov	r3, r9
    f1a0:	4665      	mov	r5, ip
    f1a2:	1e5c      	subs	r4, r3, #1
    f1a4:	08c6      	lsrs	r6, r0, #3
    f1a6:	2307      	movs	r3, #7
    f1a8:	08ca      	lsrs	r2, r1, #3
    f1aa:	4335      	orrs	r5, r6
    f1ac:	0011      	movs	r1, r2
    f1ae:	002a      	movs	r2, r5
    f1b0:	4003      	ands	r3, r0
    f1b2:	3330      	adds	r3, #48	; 0x30
    f1b4:	7023      	strb	r3, [r4, #0]
    f1b6:	0028      	movs	r0, r5
    f1b8:	430a      	orrs	r2, r1
    f1ba:	d1ed      	bne.n	f198 <_vfprintf_r+0xba0>
    f1bc:	900c      	str	r0, [sp, #48]	; 0x30
    f1be:	910d      	str	r1, [sp, #52]	; 0x34
    f1c0:	9908      	ldr	r1, [sp, #32]
    f1c2:	4656      	mov	r6, sl
    f1c4:	468a      	mov	sl, r1
    f1c6:	9909      	ldr	r1, [sp, #36]	; 0x24
    f1c8:	464a      	mov	r2, r9
    f1ca:	9411      	str	r4, [sp, #68]	; 0x44
    f1cc:	07c9      	lsls	r1, r1, #31
    f1ce:	d500      	bpl.n	f1d2 <_vfprintf_r+0xbda>
    f1d0:	e0e0      	b.n	f394 <_vfprintf_r+0xd9c>
    f1d2:	ab32      	add	r3, sp, #200	; 0xc8
    f1d4:	1b1b      	subs	r3, r3, r4
    f1d6:	930e      	str	r3, [sp, #56]	; 0x38
    f1d8:	f7ff fb7b 	bl	e8d2 <_vfprintf_r+0x2da>
    f1dc:	9c07      	ldr	r4, [sp, #28]
    f1de:	f7ff fa7d 	bl	e6dc <_vfprintf_r+0xe4>
    f1e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    f1e4:	2800      	cmp	r0, #0
    f1e6:	dc00      	bgt.n	f1ea <_vfprintf_r+0xbf2>
    f1e8:	e2b9      	b.n	f75e <_vfprintf_r+0x1166>
    f1ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f1ec:	9914      	ldr	r1, [sp, #80]	; 0x50
    f1ee:	0013      	movs	r3, r2
    f1f0:	4690      	mov	r8, r2
    f1f2:	428b      	cmp	r3, r1
    f1f4:	dd00      	ble.n	f1f8 <_vfprintf_r+0xc00>
    f1f6:	4688      	mov	r8, r1
    f1f8:	4643      	mov	r3, r8
    f1fa:	2b00      	cmp	r3, #0
    f1fc:	dd0c      	ble.n	f218 <_vfprintf_r+0xc20>
    f1fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f200:	4444      	add	r4, r8
    f202:	6033      	str	r3, [r6, #0]
    f204:	4643      	mov	r3, r8
    f206:	6073      	str	r3, [r6, #4]
    f208:	687b      	ldr	r3, [r7, #4]
    f20a:	60bc      	str	r4, [r7, #8]
    f20c:	3301      	adds	r3, #1
    f20e:	607b      	str	r3, [r7, #4]
    f210:	2b07      	cmp	r3, #7
    f212:	dd00      	ble.n	f216 <_vfprintf_r+0xc1e>
    f214:	e389      	b.n	f92a <_vfprintf_r+0x1332>
    f216:	3608      	adds	r6, #8
    f218:	4643      	mov	r3, r8
    f21a:	43db      	mvns	r3, r3
    f21c:	4642      	mov	r2, r8
    f21e:	17db      	asrs	r3, r3, #31
    f220:	4013      	ands	r3, r2
    f222:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f224:	1ad3      	subs	r3, r2, r3
    f226:	4698      	mov	r8, r3
    f228:	2b00      	cmp	r3, #0
    f22a:	dc00      	bgt.n	f22e <_vfprintf_r+0xc36>
    f22c:	e0eb      	b.n	f406 <_vfprintf_r+0xe0e>
    f22e:	2b10      	cmp	r3, #16
    f230:	dc01      	bgt.n	f236 <_vfprintf_r+0xc3e>
    f232:	f000 fcd9 	bl	fbe8 <_vfprintf_r+0x15f0>
    f236:	4adc      	ldr	r2, [pc, #880]	; (f5a8 <_vfprintf_r+0xfb0>)
    f238:	687b      	ldr	r3, [r7, #4]
    f23a:	4691      	mov	r9, r2
    f23c:	2210      	movs	r2, #16
    f23e:	464d      	mov	r5, r9
    f240:	4692      	mov	sl, r2
    f242:	0022      	movs	r2, r4
    f244:	4644      	mov	r4, r8
    f246:	46d8      	mov	r8, fp
    f248:	e004      	b.n	f254 <_vfprintf_r+0xc5c>
    f24a:	3608      	adds	r6, #8
    f24c:	3c10      	subs	r4, #16
    f24e:	2c10      	cmp	r4, #16
    f250:	dc00      	bgt.n	f254 <_vfprintf_r+0xc5c>
    f252:	e0bf      	b.n	f3d4 <_vfprintf_r+0xddc>
    f254:	4651      	mov	r1, sl
    f256:	3210      	adds	r2, #16
    f258:	3301      	adds	r3, #1
    f25a:	6035      	str	r5, [r6, #0]
    f25c:	6071      	str	r1, [r6, #4]
    f25e:	60ba      	str	r2, [r7, #8]
    f260:	607b      	str	r3, [r7, #4]
    f262:	2b07      	cmp	r3, #7
    f264:	ddf1      	ble.n	f24a <_vfprintf_r+0xc52>
    f266:	003a      	movs	r2, r7
    f268:	4641      	mov	r1, r8
    f26a:	9806      	ldr	r0, [sp, #24]
    f26c:	f004 ff48 	bl	14100 <__sprint_r>
    f270:	2800      	cmp	r0, #0
    f272:	d000      	beq.n	f276 <_vfprintf_r+0xc7e>
    f274:	e3b6      	b.n	f9e4 <_vfprintf_r+0x13ec>
    f276:	68ba      	ldr	r2, [r7, #8]
    f278:	687b      	ldr	r3, [r7, #4]
    f27a:	ae32      	add	r6, sp, #200	; 0xc8
    f27c:	e7e6      	b.n	f24c <_vfprintf_r+0xc54>
    f27e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f280:	2b00      	cmp	r3, #0
    f282:	d100      	bne.n	f286 <_vfprintf_r+0xc8e>
    f284:	e092      	b.n	f3ac <_vfprintf_r+0xdb4>
    f286:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f288:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    f28a:	ab32      	add	r3, sp, #200	; 0xc8
    f28c:	46b1      	mov	r9, r6
    f28e:	001e      	movs	r6, r3
    f290:	0020      	movs	r0, r4
    f292:	0029      	movs	r1, r5
    f294:	220a      	movs	r2, #10
    f296:	2300      	movs	r3, #0
    f298:	f7fa f902 	bl	94a0 <__aeabi_uldivmod>
    f29c:	3e01      	subs	r6, #1
    f29e:	3230      	adds	r2, #48	; 0x30
    f2a0:	7032      	strb	r2, [r6, #0]
    f2a2:	2300      	movs	r3, #0
    f2a4:	0020      	movs	r0, r4
    f2a6:	0029      	movs	r1, r5
    f2a8:	220a      	movs	r2, #10
    f2aa:	f7fa f8f9 	bl	94a0 <__aeabi_uldivmod>
    f2ae:	0003      	movs	r3, r0
    f2b0:	0004      	movs	r4, r0
    f2b2:	000d      	movs	r5, r1
    f2b4:	430b      	orrs	r3, r1
    f2b6:	d1eb      	bne.n	f290 <_vfprintf_r+0xc98>
    f2b8:	0032      	movs	r2, r6
    f2ba:	ab32      	add	r3, sp, #200	; 0xc8
    f2bc:	1a9b      	subs	r3, r3, r2
    f2be:	9611      	str	r6, [sp, #68]	; 0x44
    f2c0:	940c      	str	r4, [sp, #48]	; 0x30
    f2c2:	950d      	str	r5, [sp, #52]	; 0x34
    f2c4:	464e      	mov	r6, r9
    f2c6:	930e      	str	r3, [sp, #56]	; 0x38
    f2c8:	f7ff fb03 	bl	e8d2 <_vfprintf_r+0x2da>
    f2cc:	2300      	movs	r3, #0
    f2ce:	930e      	str	r3, [sp, #56]	; 0x38
    f2d0:	ab32      	add	r3, sp, #200	; 0xc8
    f2d2:	9311      	str	r3, [sp, #68]	; 0x44
    f2d4:	f7ff fafd 	bl	e8d2 <_vfprintf_r+0x2da>
    f2d8:	003a      	movs	r2, r7
    f2da:	4659      	mov	r1, fp
    f2dc:	9806      	ldr	r0, [sp, #24]
    f2de:	f004 ff0f 	bl	14100 <__sprint_r>
    f2e2:	2800      	cmp	r0, #0
    f2e4:	d000      	beq.n	f2e8 <_vfprintf_r+0xcf0>
    f2e6:	e717      	b.n	f118 <_vfprintf_r+0xb20>
    f2e8:	ab16      	add	r3, sp, #88	; 0x58
    f2ea:	7fdb      	ldrb	r3, [r3, #31]
    f2ec:	68bc      	ldr	r4, [r7, #8]
    f2ee:	4698      	mov	r8, r3
    f2f0:	ae32      	add	r6, sp, #200	; 0xc8
    f2f2:	e513      	b.n	ed1c <_vfprintf_r+0x724>
    f2f4:	46b1      	mov	r9, r6
    f2f6:	e697      	b.n	f028 <_vfprintf_r+0xa30>
    f2f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f2fa:	1e5d      	subs	r5, r3, #1
    f2fc:	2d00      	cmp	r5, #0
    f2fe:	dc00      	bgt.n	f302 <_vfprintf_r+0xd0a>
    f300:	e616      	b.n	ef30 <_vfprintf_r+0x938>
    f302:	4ba9      	ldr	r3, [pc, #676]	; (f5a8 <_vfprintf_r+0xfb0>)
    f304:	4699      	mov	r9, r3
    f306:	2d10      	cmp	r5, #16
    f308:	dc00      	bgt.n	f30c <_vfprintf_r+0xd14>
    f30a:	e10a      	b.n	f522 <_vfprintf_r+0xf2a>
    f30c:	2310      	movs	r3, #16
    f30e:	0022      	movs	r2, r4
    f310:	469a      	mov	sl, r3
    f312:	465c      	mov	r4, fp
    f314:	4643      	mov	r3, r8
    f316:	e004      	b.n	f322 <_vfprintf_r+0xd2a>
    f318:	3608      	adds	r6, #8
    f31a:	3d10      	subs	r5, #16
    f31c:	2d10      	cmp	r5, #16
    f31e:	dc00      	bgt.n	f322 <_vfprintf_r+0xd2a>
    f320:	e0fc      	b.n	f51c <_vfprintf_r+0xf24>
    f322:	4649      	mov	r1, r9
    f324:	6031      	str	r1, [r6, #0]
    f326:	4651      	mov	r1, sl
    f328:	3210      	adds	r2, #16
    f32a:	3301      	adds	r3, #1
    f32c:	6071      	str	r1, [r6, #4]
    f32e:	60ba      	str	r2, [r7, #8]
    f330:	607b      	str	r3, [r7, #4]
    f332:	2b07      	cmp	r3, #7
    f334:	ddf0      	ble.n	f318 <_vfprintf_r+0xd20>
    f336:	003a      	movs	r2, r7
    f338:	0021      	movs	r1, r4
    f33a:	9806      	ldr	r0, [sp, #24]
    f33c:	f004 fee0 	bl	14100 <__sprint_r>
    f340:	2800      	cmp	r0, #0
    f342:	d000      	beq.n	f346 <_vfprintf_r+0xd4e>
    f344:	e6c1      	b.n	f0ca <_vfprintf_r+0xad2>
    f346:	68ba      	ldr	r2, [r7, #8]
    f348:	687b      	ldr	r3, [r7, #4]
    f34a:	ae32      	add	r6, sp, #200	; 0xc8
    f34c:	e7e5      	b.n	f31a <_vfprintf_r+0xd22>
    f34e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f350:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f352:	0008      	movs	r0, r1
    f354:	4310      	orrs	r0, r2
    f356:	2302      	movs	r3, #2
    f358:	0002      	movs	r2, r0
    f35a:	f7ff fa93 	bl	e884 <_vfprintf_r+0x28c>
    f35e:	46a3      	mov	fp, r4
    f360:	0014      	movs	r4, r2
    f362:	464a      	mov	r2, r9
    f364:	1964      	adds	r4, r4, r5
    f366:	3301      	adds	r3, #1
    f368:	6032      	str	r2, [r6, #0]
    f36a:	6075      	str	r5, [r6, #4]
    f36c:	60bc      	str	r4, [r7, #8]
    f36e:	607b      	str	r3, [r7, #4]
    f370:	2b07      	cmp	r3, #7
    f372:	dc00      	bgt.n	f376 <_vfprintf_r+0xd7e>
    f374:	e542      	b.n	edfc <_vfprintf_r+0x804>
    f376:	e5e8      	b.n	ef4a <_vfprintf_r+0x952>
    f378:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f37a:	681a      	ldr	r2, [r3, #0]
    f37c:	f7ff fa68 	bl	e850 <_vfprintf_r+0x258>
    f380:	6813      	ldr	r3, [r2, #0]
    f382:	9308      	str	r3, [sp, #32]
    f384:	f7ff fb57 	bl	ea36 <_vfprintf_r+0x43e>
    f388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f38a:	681a      	ldr	r2, [r3, #0]
    f38c:	e412      	b.n	ebb4 <_vfprintf_r+0x5bc>
    f38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f390:	681a      	ldr	r2, [r3, #0]
    f392:	e426      	b.n	ebe2 <_vfprintf_r+0x5ea>
    f394:	2b30      	cmp	r3, #48	; 0x30
    f396:	d100      	bne.n	f39a <_vfprintf_r+0xda2>
    f398:	e23c      	b.n	f814 <_vfprintf_r+0x121c>
    f39a:	2330      	movs	r3, #48	; 0x30
    f39c:	3a02      	subs	r2, #2
    f39e:	7013      	strb	r3, [r2, #0]
    f3a0:	ab32      	add	r3, sp, #200	; 0xc8
    f3a2:	1a9b      	subs	r3, r3, r2
    f3a4:	930e      	str	r3, [sp, #56]	; 0x38
    f3a6:	9211      	str	r2, [sp, #68]	; 0x44
    f3a8:	f7ff fa93 	bl	e8d2 <_vfprintf_r+0x2da>
    f3ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f3ae:	2b09      	cmp	r3, #9
    f3b0:	d900      	bls.n	f3b4 <_vfprintf_r+0xdbc>
    f3b2:	e768      	b.n	f286 <_vfprintf_r+0xc8e>
    f3b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    f3b6:	2227      	movs	r2, #39	; 0x27
    f3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f3ba:	a928      	add	r1, sp, #160	; 0xa0
    f3bc:	3330      	adds	r3, #48	; 0x30
    f3be:	548b      	strb	r3, [r1, r2]
    f3c0:	2301      	movs	r3, #1
    f3c2:	aa16      	add	r2, sp, #88	; 0x58
    f3c4:	4694      	mov	ip, r2
    f3c6:	930e      	str	r3, [sp, #56]	; 0x38
    f3c8:	336e      	adds	r3, #110	; 0x6e
    f3ca:	4463      	add	r3, ip
    f3cc:	9409      	str	r4, [sp, #36]	; 0x24
    f3ce:	9311      	str	r3, [sp, #68]	; 0x44
    f3d0:	f7ff fa7f 	bl	e8d2 <_vfprintf_r+0x2da>
    f3d4:	46c3      	mov	fp, r8
    f3d6:	46a9      	mov	r9, r5
    f3d8:	46a0      	mov	r8, r4
    f3da:	0014      	movs	r4, r2
    f3dc:	464a      	mov	r2, r9
    f3de:	6032      	str	r2, [r6, #0]
    f3e0:	4642      	mov	r2, r8
    f3e2:	4444      	add	r4, r8
    f3e4:	3301      	adds	r3, #1
    f3e6:	6072      	str	r2, [r6, #4]
    f3e8:	60bc      	str	r4, [r7, #8]
    f3ea:	607b      	str	r3, [r7, #4]
    f3ec:	2b07      	cmp	r3, #7
    f3ee:	dc00      	bgt.n	f3f2 <_vfprintf_r+0xdfa>
    f3f0:	e18d      	b.n	f70e <_vfprintf_r+0x1116>
    f3f2:	003a      	movs	r2, r7
    f3f4:	4659      	mov	r1, fp
    f3f6:	9806      	ldr	r0, [sp, #24]
    f3f8:	f004 fe82 	bl	14100 <__sprint_r>
    f3fc:	2800      	cmp	r0, #0
    f3fe:	d000      	beq.n	f402 <_vfprintf_r+0xe0a>
    f400:	e68a      	b.n	f118 <_vfprintf_r+0xb20>
    f402:	68bc      	ldr	r4, [r7, #8]
    f404:	ae32      	add	r6, sp, #200	; 0xc8
    f406:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    f408:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f40a:	4293      	cmp	r3, r2
    f40c:	db00      	blt.n	f410 <_vfprintf_r+0xe18>
    f40e:	e179      	b.n	f704 <_vfprintf_r+0x110c>
    f410:	9a18      	ldr	r2, [sp, #96]	; 0x60
    f412:	6032      	str	r2, [r6, #0]
    f414:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f416:	4694      	mov	ip, r2
    f418:	6072      	str	r2, [r6, #4]
    f41a:	687a      	ldr	r2, [r7, #4]
    f41c:	4464      	add	r4, ip
    f41e:	3201      	adds	r2, #1
    f420:	60bc      	str	r4, [r7, #8]
    f422:	607a      	str	r2, [r7, #4]
    f424:	2a07      	cmp	r2, #7
    f426:	dd00      	ble.n	f42a <_vfprintf_r+0xe32>
    f428:	e176      	b.n	f718 <_vfprintf_r+0x1120>
    f42a:	3608      	adds	r6, #8
    f42c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    f42e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f430:	1ad3      	subs	r3, r2, r3
    f432:	1a52      	subs	r2, r2, r1
    f434:	4690      	mov	r8, r2
    f436:	429a      	cmp	r2, r3
    f438:	dd00      	ble.n	f43c <_vfprintf_r+0xe44>
    f43a:	4698      	mov	r8, r3
    f43c:	4642      	mov	r2, r8
    f43e:	2a00      	cmp	r2, #0
    f440:	dd0f      	ble.n	f462 <_vfprintf_r+0xe6a>
    f442:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f444:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f446:	468c      	mov	ip, r1
    f448:	4462      	add	r2, ip
    f44a:	6032      	str	r2, [r6, #0]
    f44c:	4642      	mov	r2, r8
    f44e:	6072      	str	r2, [r6, #4]
    f450:	687a      	ldr	r2, [r7, #4]
    f452:	4444      	add	r4, r8
    f454:	3201      	adds	r2, #1
    f456:	60bc      	str	r4, [r7, #8]
    f458:	607a      	str	r2, [r7, #4]
    f45a:	2a07      	cmp	r2, #7
    f45c:	dd00      	ble.n	f460 <_vfprintf_r+0xe68>
    f45e:	e289      	b.n	f974 <_vfprintf_r+0x137c>
    f460:	3608      	adds	r6, #8
    f462:	4642      	mov	r2, r8
    f464:	43d5      	mvns	r5, r2
    f466:	17ed      	asrs	r5, r5, #31
    f468:	4015      	ands	r5, r2
    f46a:	1b5d      	subs	r5, r3, r5
    f46c:	2d00      	cmp	r5, #0
    f46e:	dc00      	bgt.n	f472 <_vfprintf_r+0xe7a>
    f470:	e4c5      	b.n	edfe <_vfprintf_r+0x806>
    f472:	4a4d      	ldr	r2, [pc, #308]	; (f5a8 <_vfprintf_r+0xfb0>)
    f474:	687b      	ldr	r3, [r7, #4]
    f476:	4691      	mov	r9, r2
    f478:	2d10      	cmp	r5, #16
    f47a:	dc00      	bgt.n	f47e <_vfprintf_r+0xe86>
    f47c:	e771      	b.n	f362 <_vfprintf_r+0xd6a>
    f47e:	2210      	movs	r2, #16
    f480:	4690      	mov	r8, r2
    f482:	0022      	movs	r2, r4
    f484:	465c      	mov	r4, fp
    f486:	e004      	b.n	f492 <_vfprintf_r+0xe9a>
    f488:	3608      	adds	r6, #8
    f48a:	3d10      	subs	r5, #16
    f48c:	2d10      	cmp	r5, #16
    f48e:	dc00      	bgt.n	f492 <_vfprintf_r+0xe9a>
    f490:	e765      	b.n	f35e <_vfprintf_r+0xd66>
    f492:	4649      	mov	r1, r9
    f494:	6031      	str	r1, [r6, #0]
    f496:	4641      	mov	r1, r8
    f498:	3210      	adds	r2, #16
    f49a:	3301      	adds	r3, #1
    f49c:	6071      	str	r1, [r6, #4]
    f49e:	60ba      	str	r2, [r7, #8]
    f4a0:	607b      	str	r3, [r7, #4]
    f4a2:	2b07      	cmp	r3, #7
    f4a4:	ddf0      	ble.n	f488 <_vfprintf_r+0xe90>
    f4a6:	003a      	movs	r2, r7
    f4a8:	0021      	movs	r1, r4
    f4aa:	9806      	ldr	r0, [sp, #24]
    f4ac:	f004 fe28 	bl	14100 <__sprint_r>
    f4b0:	2800      	cmp	r0, #0
    f4b2:	d000      	beq.n	f4b6 <_vfprintf_r+0xebe>
    f4b4:	e609      	b.n	f0ca <_vfprintf_r+0xad2>
    f4b6:	68ba      	ldr	r2, [r7, #8]
    f4b8:	687b      	ldr	r3, [r7, #4]
    f4ba:	ae32      	add	r6, sp, #200	; 0xc8
    f4bc:	e7e5      	b.n	f48a <_vfprintf_r+0xe92>
    f4be:	003a      	movs	r2, r7
    f4c0:	4659      	mov	r1, fp
    f4c2:	9806      	ldr	r0, [sp, #24]
    f4c4:	f004 fe1c 	bl	14100 <__sprint_r>
    f4c8:	2800      	cmp	r0, #0
    f4ca:	d000      	beq.n	f4ce <_vfprintf_r+0xed6>
    f4cc:	e624      	b.n	f118 <_vfprintf_r+0xb20>
    f4ce:	68bc      	ldr	r4, [r7, #8]
    f4d0:	687b      	ldr	r3, [r7, #4]
    f4d2:	ae32      	add	r6, sp, #200	; 0xc8
    f4d4:	e504      	b.n	eee0 <_vfprintf_r+0x8e8>
    f4d6:	2307      	movs	r3, #7
    f4d8:	3207      	adds	r2, #7
    f4da:	439a      	bics	r2, r3
    f4dc:	3301      	adds	r3, #1
    f4de:	469c      	mov	ip, r3
    f4e0:	4494      	add	ip, r2
    f4e2:	4663      	mov	r3, ip
    f4e4:	930f      	str	r3, [sp, #60]	; 0x3c
    f4e6:	6853      	ldr	r3, [r2, #4]
    f4e8:	6812      	ldr	r2, [r2, #0]
    f4ea:	930d      	str	r3, [sp, #52]	; 0x34
    f4ec:	920c      	str	r2, [sp, #48]	; 0x30
    f4ee:	f7ff faa7 	bl	ea40 <_vfprintf_r+0x448>
    f4f2:	2207      	movs	r2, #7
    f4f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f4f6:	3307      	adds	r3, #7
    f4f8:	4393      	bics	r3, r2
    f4fa:	3201      	adds	r2, #1
    f4fc:	4694      	mov	ip, r2
    f4fe:	449c      	add	ip, r3
    f500:	4662      	mov	r2, ip
    f502:	920f      	str	r2, [sp, #60]	; 0x3c
    f504:	681a      	ldr	r2, [r3, #0]
    f506:	685b      	ldr	r3, [r3, #4]
    f508:	0011      	movs	r1, r2
    f50a:	001a      	movs	r2, r3
    f50c:	0008      	movs	r0, r1
    f50e:	4310      	orrs	r0, r2
    f510:	910c      	str	r1, [sp, #48]	; 0x30
    f512:	920d      	str	r2, [sp, #52]	; 0x34
    f514:	2300      	movs	r3, #0
    f516:	0002      	movs	r2, r0
    f518:	f7ff f9b4 	bl	e884 <_vfprintf_r+0x28c>
    f51c:	46a3      	mov	fp, r4
    f51e:	4698      	mov	r8, r3
    f520:	0014      	movs	r4, r2
    f522:	464b      	mov	r3, r9
    f524:	6075      	str	r5, [r6, #4]
    f526:	6033      	str	r3, [r6, #0]
    f528:	1964      	adds	r4, r4, r5
    f52a:	e4f7      	b.n	ef1c <_vfprintf_r+0x924>
    f52c:	003a      	movs	r2, r7
    f52e:	4659      	mov	r1, fp
    f530:	9806      	ldr	r0, [sp, #24]
    f532:	f004 fde5 	bl	14100 <__sprint_r>
    f536:	2800      	cmp	r0, #0
    f538:	d000      	beq.n	f53c <_vfprintf_r+0xf44>
    f53a:	e5ed      	b.n	f118 <_vfprintf_r+0xb20>
    f53c:	687b      	ldr	r3, [r7, #4]
    f53e:	68bc      	ldr	r4, [r7, #8]
    f540:	4698      	mov	r8, r3
    f542:	ae32      	add	r6, sp, #200	; 0xc8
    f544:	e4da      	b.n	eefc <_vfprintf_r+0x904>
    f546:	2207      	movs	r2, #7
    f548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f54a:	3307      	adds	r3, #7
    f54c:	4393      	bics	r3, r2
    f54e:	3201      	adds	r2, #1
    f550:	4694      	mov	ip, r2
    f552:	449c      	add	ip, r3
    f554:	4662      	mov	r2, ip
    f556:	920f      	str	r2, [sp, #60]	; 0x3c
    f558:	681a      	ldr	r2, [r3, #0]
    f55a:	685b      	ldr	r3, [r3, #4]
    f55c:	0011      	movs	r1, r2
    f55e:	001a      	movs	r2, r3
    f560:	0008      	movs	r0, r1
    f562:	4310      	orrs	r0, r2
    f564:	910c      	str	r1, [sp, #48]	; 0x30
    f566:	920d      	str	r2, [sp, #52]	; 0x34
    f568:	2301      	movs	r3, #1
    f56a:	0002      	movs	r2, r0
    f56c:	f7ff f98a 	bl	e884 <_vfprintf_r+0x28c>
    f570:	2207      	movs	r2, #7
    f572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f574:	3307      	adds	r3, #7
    f576:	4393      	bics	r3, r2
    f578:	3201      	adds	r2, #1
    f57a:	4694      	mov	ip, r2
    f57c:	449c      	add	ip, r3
    f57e:	4662      	mov	r2, ip
    f580:	920f      	str	r2, [sp, #60]	; 0x3c
    f582:	681a      	ldr	r2, [r3, #0]
    f584:	685b      	ldr	r3, [r3, #4]
    f586:	920c      	str	r2, [sp, #48]	; 0x30
    f588:	930d      	str	r3, [sp, #52]	; 0x34
    f58a:	f7ff f966 	bl	e85a <_vfprintf_r+0x262>
    f58e:	003a      	movs	r2, r7
    f590:	4659      	mov	r1, fp
    f592:	9806      	ldr	r0, [sp, #24]
    f594:	f004 fdb4 	bl	14100 <__sprint_r>
    f598:	2800      	cmp	r0, #0
    f59a:	d000      	beq.n	f59e <_vfprintf_r+0xfa6>
    f59c:	e5bc      	b.n	f118 <_vfprintf_r+0xb20>
    f59e:	68bc      	ldr	r4, [r7, #8]
    f5a0:	ae32      	add	r6, sp, #200	; 0xc8
    f5a2:	f7ff fbe2 	bl	ed6a <_vfprintf_r+0x772>
    f5a6:	46c0      	nop			; (mov r8, r8)
    f5a8:	000192fc 	.word	0x000192fc
    f5ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    f5ae:	990d      	ldr	r1, [sp, #52]	; 0x34
    f5b0:	2300      	movs	r3, #0
    f5b2:	4242      	negs	r2, r0
    f5b4:	418b      	sbcs	r3, r1
    f5b6:	0011      	movs	r1, r2
    f5b8:	001a      	movs	r2, r3
    f5ba:	232d      	movs	r3, #45	; 0x2d
    f5bc:	a816      	add	r0, sp, #88	; 0x58
    f5be:	77c3      	strb	r3, [r0, #31]
    f5c0:	0008      	movs	r0, r1
    f5c2:	4310      	orrs	r0, r2
    f5c4:	910c      	str	r1, [sp, #48]	; 0x30
    f5c6:	920d      	str	r2, [sp, #52]	; 0x34
    f5c8:	4698      	mov	r8, r3
    f5ca:	0002      	movs	r2, r0
    f5cc:	3b2c      	subs	r3, #44	; 0x2c
    f5ce:	f7ff f95d 	bl	e88c <_vfprintf_r+0x294>
    f5d2:	9916      	ldr	r1, [sp, #88]	; 0x58
    f5d4:	9d15      	ldr	r5, [sp, #84]	; 0x54
    f5d6:	000a      	movs	r2, r1
    f5d8:	0008      	movs	r0, r1
    f5da:	002b      	movs	r3, r5
    f5dc:	0029      	movs	r1, r5
    f5de:	f005 feab 	bl	15338 <__aeabi_dcmpun>
    f5e2:	2800      	cmp	r0, #0
    f5e4:	d000      	beq.n	f5e8 <_vfprintf_r+0xff0>
    f5e6:	e2c6      	b.n	fb76 <_vfprintf_r+0x157e>
    f5e8:	4653      	mov	r3, sl
    f5ea:	3301      	adds	r3, #1
    f5ec:	d100      	bne.n	f5f0 <_vfprintf_r+0xff8>
    f5ee:	e09f      	b.n	f730 <_vfprintf_r+0x1138>
    f5f0:	2320      	movs	r3, #32
    f5f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f5f4:	439a      	bics	r2, r3
    f5f6:	920e      	str	r2, [sp, #56]	; 0x38
    f5f8:	2a47      	cmp	r2, #71	; 0x47
    f5fa:	d100      	bne.n	f5fe <_vfprintf_r+0x1006>
    f5fc:	e1a1      	b.n	f942 <_vfprintf_r+0x134a>
    f5fe:	2380      	movs	r3, #128	; 0x80
    f600:	005b      	lsls	r3, r3, #1
    f602:	4323      	orrs	r3, r4
    f604:	9309      	str	r3, [sp, #36]	; 0x24
    f606:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f608:	2b00      	cmp	r3, #0
    f60a:	da00      	bge.n	f60e <_vfprintf_r+0x1016>
    f60c:	e1ed      	b.n	f9ea <_vfprintf_r+0x13f2>
    f60e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    f610:	9308      	str	r3, [sp, #32]
    f612:	2300      	movs	r3, #0
    f614:	4691      	mov	r9, r2
    f616:	9310      	str	r3, [sp, #64]	; 0x40
    f618:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f61a:	2b66      	cmp	r3, #102	; 0x66
    f61c:	d100      	bne.n	f620 <_vfprintf_r+0x1028>
    f61e:	e1b8      	b.n	f992 <_vfprintf_r+0x139a>
    f620:	2b46      	cmp	r3, #70	; 0x46
    f622:	d100      	bne.n	f626 <_vfprintf_r+0x102e>
    f624:	e237      	b.n	fa96 <_vfprintf_r+0x149e>
    f626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f628:	9806      	ldr	r0, [sp, #24]
    f62a:	3a45      	subs	r2, #69	; 0x45
    f62c:	0013      	movs	r3, r2
    f62e:	4259      	negs	r1, r3
    f630:	4159      	adcs	r1, r3
    f632:	ab20      	add	r3, sp, #128	; 0x80
    f634:	000d      	movs	r5, r1
    f636:	9303      	str	r3, [sp, #12]
    f638:	ab1f      	add	r3, sp, #124	; 0x7c
    f63a:	9302      	str	r3, [sp, #8]
    f63c:	2302      	movs	r3, #2
    f63e:	aa23      	add	r2, sp, #140	; 0x8c
    f640:	4455      	add	r5, sl
    f642:	921b      	str	r2, [sp, #108]	; 0x6c
    f644:	9204      	str	r2, [sp, #16]
    f646:	9300      	str	r3, [sp, #0]
    f648:	9501      	str	r5, [sp, #4]
    f64a:	9b08      	ldr	r3, [sp, #32]
    f64c:	464a      	mov	r2, r9
    f64e:	f000 fd2f 	bl	100b0 <_dtoa_r>
    f652:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f654:	9011      	str	r0, [sp, #68]	; 0x44
    f656:	2b67      	cmp	r3, #103	; 0x67
    f658:	d000      	beq.n	f65c <_vfprintf_r+0x1064>
    f65a:	e20b      	b.n	fa74 <_vfprintf_r+0x147c>
    f65c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f65e:	4698      	mov	r8, r3
    f660:	44a8      	add	r8, r5
    f662:	07e3      	lsls	r3, r4, #31
    f664:	d400      	bmi.n	f668 <_vfprintf_r+0x1070>
    f666:	e277      	b.n	fb58 <_vfprintf_r+0x1560>
    f668:	2300      	movs	r3, #0
    f66a:	2200      	movs	r2, #0
    f66c:	4648      	mov	r0, r9
    f66e:	9908      	ldr	r1, [sp, #32]
    f670:	f7fb fb42 	bl	acf8 <__aeabi_dcmpeq>
    f674:	4643      	mov	r3, r8
    f676:	2800      	cmp	r0, #0
    f678:	d10a      	bne.n	f690 <_vfprintf_r+0x1098>
    f67a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f67c:	4543      	cmp	r3, r8
    f67e:	d207      	bcs.n	f690 <_vfprintf_r+0x1098>
    f680:	2130      	movs	r1, #48	; 0x30
    f682:	4640      	mov	r0, r8
    f684:	1c5a      	adds	r2, r3, #1
    f686:	9223      	str	r2, [sp, #140]	; 0x8c
    f688:	7019      	strb	r1, [r3, #0]
    f68a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f68c:	4298      	cmp	r0, r3
    f68e:	d8f9      	bhi.n	f684 <_vfprintf_r+0x108c>
    f690:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f692:	1a9b      	subs	r3, r3, r2
    f694:	9314      	str	r3, [sp, #80]	; 0x50
    f696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f698:	2b47      	cmp	r3, #71	; 0x47
    f69a:	d100      	bne.n	f69e <_vfprintf_r+0x10a6>
    f69c:	e0d0      	b.n	f840 <_vfprintf_r+0x1248>
    f69e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f6a0:	2b65      	cmp	r3, #101	; 0x65
    f6a2:	dc00      	bgt.n	f6a6 <_vfprintf_r+0x10ae>
    f6a4:	e2d5      	b.n	fc52 <_vfprintf_r+0x165a>
    f6a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f6a8:	2b66      	cmp	r3, #102	; 0x66
    f6aa:	d100      	bne.n	f6ae <_vfprintf_r+0x10b6>
    f6ac:	e1c6      	b.n	fa3c <_vfprintf_r+0x1444>
    f6ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    f6b0:	9313      	str	r3, [sp, #76]	; 0x4c
    f6b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f6b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f6b6:	0019      	movs	r1, r3
    f6b8:	4291      	cmp	r1, r2
    f6ba:	dd00      	ble.n	f6be <_vfprintf_r+0x10c6>
    f6bc:	e1a0      	b.n	fa00 <_vfprintf_r+0x1408>
    f6be:	07e3      	lsls	r3, r4, #31
    f6c0:	d500      	bpl.n	f6c4 <_vfprintf_r+0x10cc>
    f6c2:	e242      	b.n	fb4a <_vfprintf_r+0x1552>
    f6c4:	43d3      	mvns	r3, r2
    f6c6:	17db      	asrs	r3, r3, #31
    f6c8:	0011      	movs	r1, r2
    f6ca:	401a      	ands	r2, r3
    f6cc:	2367      	movs	r3, #103	; 0x67
    f6ce:	9208      	str	r2, [sp, #32]
    f6d0:	910e      	str	r1, [sp, #56]	; 0x38
    f6d2:	9312      	str	r3, [sp, #72]	; 0x48
    f6d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f6d6:	2b00      	cmp	r3, #0
    f6d8:	d000      	beq.n	f6dc <_vfprintf_r+0x10e4>
    f6da:	e0a9      	b.n	f830 <_vfprintf_r+0x1238>
    f6dc:	ab16      	add	r3, sp, #88	; 0x58
    f6de:	7fdb      	ldrb	r3, [r3, #31]
    f6e0:	4698      	mov	r8, r3
    f6e2:	2300      	movs	r3, #0
    f6e4:	469a      	mov	sl, r3
    f6e6:	f7ff f8fc 	bl	e8e2 <_vfprintf_r+0x2ea>
    f6ea:	46cb      	mov	fp, r9
    f6ec:	46a1      	mov	r9, r4
    f6ee:	0014      	movs	r4, r2
    f6f0:	e637      	b.n	f362 <_vfprintf_r+0xd6a>
    f6f2:	464b      	mov	r3, r9
    f6f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
    f6f6:	f002 f915 	bl	11924 <__retarget_lock_release_recursive>
    f6fa:	2301      	movs	r3, #1
    f6fc:	425b      	negs	r3, r3
    f6fe:	930a      	str	r3, [sp, #40]	; 0x28
    f700:	f7ff f82b 	bl	e75a <_vfprintf_r+0x162>
    f704:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f706:	07d2      	lsls	r2, r2, #31
    f708:	d400      	bmi.n	f70c <_vfprintf_r+0x1114>
    f70a:	e68f      	b.n	f42c <_vfprintf_r+0xe34>
    f70c:	e680      	b.n	f410 <_vfprintf_r+0xe18>
    f70e:	3608      	adds	r6, #8
    f710:	e679      	b.n	f406 <_vfprintf_r+0xe0e>
    f712:	68bc      	ldr	r4, [r7, #8]
    f714:	f7ff fb73 	bl	edfe <_vfprintf_r+0x806>
    f718:	003a      	movs	r2, r7
    f71a:	4659      	mov	r1, fp
    f71c:	9806      	ldr	r0, [sp, #24]
    f71e:	f004 fcef 	bl	14100 <__sprint_r>
    f722:	2800      	cmp	r0, #0
    f724:	d000      	beq.n	f728 <_vfprintf_r+0x1130>
    f726:	e4f7      	b.n	f118 <_vfprintf_r+0xb20>
    f728:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    f72a:	68bc      	ldr	r4, [r7, #8]
    f72c:	ae32      	add	r6, sp, #200	; 0xc8
    f72e:	e67d      	b.n	f42c <_vfprintf_r+0xe34>
    f730:	2320      	movs	r3, #32
    f732:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f734:	439a      	bics	r2, r3
    f736:	3b1a      	subs	r3, #26
    f738:	920e      	str	r2, [sp, #56]	; 0x38
    f73a:	469a      	mov	sl, r3
    f73c:	e75f      	b.n	f5fe <_vfprintf_r+0x1006>
    f73e:	232d      	movs	r3, #45	; 0x2d
    f740:	aa16      	add	r2, sp, #88	; 0x58
    f742:	77d3      	strb	r3, [r2, #31]
    f744:	4698      	mov	r8, r3
    f746:	f7ff faa8 	bl	ec9a <_vfprintf_r+0x6a2>
    f74a:	003a      	movs	r2, r7
    f74c:	4659      	mov	r1, fp
    f74e:	9806      	ldr	r0, [sp, #24]
    f750:	f004 fcd6 	bl	14100 <__sprint_r>
    f754:	2800      	cmp	r0, #0
    f756:	d000      	beq.n	f75a <_vfprintf_r+0x1162>
    f758:	e4de      	b.n	f118 <_vfprintf_r+0xb20>
    f75a:	ae32      	add	r6, sp, #200	; 0xc8
    f75c:	e419      	b.n	ef92 <_vfprintf_r+0x99a>
    f75e:	4be3      	ldr	r3, [pc, #908]	; (faec <_vfprintf_r+0x14f4>)
    f760:	3401      	adds	r4, #1
    f762:	6033      	str	r3, [r6, #0]
    f764:	2301      	movs	r3, #1
    f766:	6073      	str	r3, [r6, #4]
    f768:	687b      	ldr	r3, [r7, #4]
    f76a:	60bc      	str	r4, [r7, #8]
    f76c:	3301      	adds	r3, #1
    f76e:	607b      	str	r3, [r7, #4]
    f770:	2b07      	cmp	r3, #7
    f772:	dd00      	ble.n	f776 <_vfprintf_r+0x117e>
    f774:	e155      	b.n	fa22 <_vfprintf_r+0x142a>
    f776:	3608      	adds	r6, #8
    f778:	2800      	cmp	r0, #0
    f77a:	d107      	bne.n	f78c <_vfprintf_r+0x1194>
    f77c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f77e:	2b00      	cmp	r3, #0
    f780:	d104      	bne.n	f78c <_vfprintf_r+0x1194>
    f782:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f784:	07db      	lsls	r3, r3, #31
    f786:	d401      	bmi.n	f78c <_vfprintf_r+0x1194>
    f788:	f7ff fb39 	bl	edfe <_vfprintf_r+0x806>
    f78c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    f78e:	6033      	str	r3, [r6, #0]
    f790:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f792:	1919      	adds	r1, r3, r4
    f794:	6073      	str	r3, [r6, #4]
    f796:	687b      	ldr	r3, [r7, #4]
    f798:	60b9      	str	r1, [r7, #8]
    f79a:	3301      	adds	r3, #1
    f79c:	607b      	str	r3, [r7, #4]
    f79e:	2b07      	cmp	r3, #7
    f7a0:	dd00      	ble.n	f7a4 <_vfprintf_r+0x11ac>
    f7a2:	e1c4      	b.n	fb2e <_vfprintf_r+0x1536>
    f7a4:	0032      	movs	r2, r6
    f7a6:	3208      	adds	r2, #8
    f7a8:	2800      	cmp	r0, #0
    f7aa:	da00      	bge.n	f7ae <_vfprintf_r+0x11b6>
    f7ac:	e195      	b.n	fada <_vfprintf_r+0x14e2>
    f7ae:	9811      	ldr	r0, [sp, #68]	; 0x44
    f7b0:	3301      	adds	r3, #1
    f7b2:	6010      	str	r0, [r2, #0]
    f7b4:	9814      	ldr	r0, [sp, #80]	; 0x50
    f7b6:	607b      	str	r3, [r7, #4]
    f7b8:	1844      	adds	r4, r0, r1
    f7ba:	6050      	str	r0, [r2, #4]
    f7bc:	60bc      	str	r4, [r7, #8]
    f7be:	2b07      	cmp	r3, #7
    f7c0:	dd01      	ble.n	f7c6 <_vfprintf_r+0x11ce>
    f7c2:	f7ff fbc2 	bl	ef4a <_vfprintf_r+0x952>
    f7c6:	3208      	adds	r2, #8
    f7c8:	0016      	movs	r6, r2
    f7ca:	f7ff fb18 	bl	edfe <_vfprintf_r+0x806>
    f7ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f7d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f7d2:	680b      	ldr	r3, [r1, #0]
    f7d4:	601a      	str	r2, [r3, #0]
    f7d6:	17d2      	asrs	r2, r2, #31
    f7d8:	605a      	str	r2, [r3, #4]
    f7da:	000b      	movs	r3, r1
    f7dc:	3304      	adds	r3, #4
    f7de:	930f      	str	r3, [sp, #60]	; 0x3c
    f7e0:	f7fe ff58 	bl	e694 <_vfprintf_r+0x9c>
    f7e4:	464b      	mov	r3, r9
    f7e6:	9a07      	ldr	r2, [sp, #28]
    f7e8:	431c      	orrs	r4, r3
    f7ea:	3201      	adds	r2, #1
    f7ec:	7813      	ldrb	r3, [r2, #0]
    f7ee:	9207      	str	r2, [sp, #28]
    f7f0:	f7fe ff8b 	bl	e70a <_vfprintf_r+0x112>
    f7f4:	003a      	movs	r2, r7
    f7f6:	4659      	mov	r1, fp
    f7f8:	9806      	ldr	r0, [sp, #24]
    f7fa:	f004 fc81 	bl	14100 <__sprint_r>
    f7fe:	2800      	cmp	r0, #0
    f800:	d000      	beq.n	f804 <_vfprintf_r+0x120c>
    f802:	e489      	b.n	f118 <_vfprintf_r+0xb20>
    f804:	68bc      	ldr	r4, [r7, #8]
    f806:	ae32      	add	r6, sp, #200	; 0xc8
    f808:	f7ff fbdc 	bl	efc4 <_vfprintf_r+0x9cc>
    f80c:	4bb8      	ldr	r3, [pc, #736]	; (faf0 <_vfprintf_r+0x14f8>)
    f80e:	9311      	str	r3, [sp, #68]	; 0x44
    f810:	f7ff fa4a 	bl	eca8 <_vfprintf_r+0x6b0>
    f814:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f816:	ab32      	add	r3, sp, #200	; 0xc8
    f818:	1a9b      	subs	r3, r3, r2
    f81a:	930e      	str	r3, [sp, #56]	; 0x38
    f81c:	f7ff f859 	bl	e8d2 <_vfprintf_r+0x2da>
    f820:	9811      	ldr	r0, [sp, #68]	; 0x44
    f822:	f7fc f9bb 	bl	bb9c <strlen>
    f826:	0002      	movs	r2, r0
    f828:	900e      	str	r0, [sp, #56]	; 0x38
    f82a:	0003      	movs	r3, r0
    f82c:	f7ff f9a1 	bl	eb72 <_vfprintf_r+0x57a>
    f830:	232d      	movs	r3, #45	; 0x2d
    f832:	aa16      	add	r2, sp, #88	; 0x58
    f834:	77d3      	strb	r3, [r2, #31]
    f836:	4698      	mov	r8, r3
    f838:	2300      	movs	r3, #0
    f83a:	469a      	mov	sl, r3
    f83c:	f7ff f854 	bl	e8e8 <_vfprintf_r+0x2f0>
    f840:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    f842:	9313      	str	r3, [sp, #76]	; 0x4c
    f844:	1cda      	adds	r2, r3, #3
    f846:	db02      	blt.n	f84e <_vfprintf_r+0x1256>
    f848:	459a      	cmp	sl, r3
    f84a:	db00      	blt.n	f84e <_vfprintf_r+0x1256>
    f84c:	e731      	b.n	f6b2 <_vfprintf_r+0x10ba>
    f84e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f850:	3b02      	subs	r3, #2
    f852:	9312      	str	r3, [sp, #72]	; 0x48
    f854:	222c      	movs	r2, #44	; 0x2c
    f856:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f858:	2148      	movs	r1, #72	; 0x48
    f85a:	1e5d      	subs	r5, r3, #1
    f85c:	ab16      	add	r3, sp, #88	; 0x58
    f85e:	189b      	adds	r3, r3, r2
    f860:	466a      	mov	r2, sp
    f862:	1852      	adds	r2, r2, r1
    f864:	7812      	ldrb	r2, [r2, #0]
    f866:	951f      	str	r5, [sp, #124]	; 0x7c
    f868:	701a      	strb	r2, [r3, #0]
    f86a:	2d00      	cmp	r5, #0
    f86c:	da00      	bge.n	f870 <_vfprintf_r+0x1278>
    f86e:	e1cb      	b.n	fc08 <_vfprintf_r+0x1610>
    f870:	212d      	movs	r1, #45	; 0x2d
    f872:	232b      	movs	r3, #43	; 0x2b
    f874:	aa16      	add	r2, sp, #88	; 0x58
    f876:	1852      	adds	r2, r2, r1
    f878:	7013      	strb	r3, [r2, #0]
    f87a:	2d09      	cmp	r5, #9
    f87c:	dc00      	bgt.n	f880 <_vfprintf_r+0x1288>
    f87e:	e16d      	b.n	fb5c <_vfprintf_r+0x1564>
    f880:	aa16      	add	r2, sp, #88	; 0x58
    f882:	233b      	movs	r3, #59	; 0x3b
    f884:	4694      	mov	ip, r2
    f886:	4463      	add	r3, ip
    f888:	469a      	mov	sl, r3
    f88a:	46b1      	mov	r9, r6
    f88c:	46a0      	mov	r8, r4
    f88e:	4656      	mov	r6, sl
    f890:	e000      	b.n	f894 <_vfprintf_r+0x129c>
    f892:	0026      	movs	r6, r4
    f894:	0028      	movs	r0, r5
    f896:	210a      	movs	r1, #10
    f898:	f7f9 fdfc 	bl	9494 <__aeabi_idivmod>
    f89c:	1e74      	subs	r4, r6, #1
    f89e:	3130      	adds	r1, #48	; 0x30
    f8a0:	7021      	strb	r1, [r4, #0]
    f8a2:	0028      	movs	r0, r5
    f8a4:	210a      	movs	r1, #10
    f8a6:	f7f9 fd0f 	bl	92c8 <__divsi3>
    f8aa:	0005      	movs	r5, r0
    f8ac:	2809      	cmp	r0, #9
    f8ae:	dcf0      	bgt.n	f892 <_vfprintf_r+0x129a>
    f8b0:	0023      	movs	r3, r4
    f8b2:	4644      	mov	r4, r8
    f8b4:	46b0      	mov	r8, r6
    f8b6:	464e      	mov	r6, r9
    f8b8:	4699      	mov	r9, r3
    f8ba:	0003      	movs	r3, r0
    f8bc:	3330      	adds	r3, #48	; 0x30
    f8be:	b2d8      	uxtb	r0, r3
    f8c0:	4643      	mov	r3, r8
    f8c2:	3b02      	subs	r3, #2
    f8c4:	7018      	strb	r0, [r3, #0]
    f8c6:	459a      	cmp	sl, r3
    f8c8:	d800      	bhi.n	f8cc <_vfprintf_r+0x12d4>
    f8ca:	e1f6      	b.n	fcba <_vfprintf_r+0x16c2>
    f8cc:	4642      	mov	r2, r8
    f8ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f8d0:	4645      	mov	r5, r8
    f8d2:	1a99      	subs	r1, r3, r2
    f8d4:	2301      	movs	r3, #1
    f8d6:	3107      	adds	r1, #7
    f8d8:	425b      	negs	r3, r3
    f8da:	e001      	b.n	f8e0 <_vfprintf_r+0x12e8>
    f8dc:	5ce8      	ldrb	r0, [r5, r3]
    f8de:	3301      	adds	r3, #1
    f8e0:	aa21      	add	r2, sp, #132	; 0x84
    f8e2:	18d2      	adds	r2, r2, r3
    f8e4:	70d0      	strb	r0, [r2, #3]
    f8e6:	428b      	cmp	r3, r1
    f8e8:	d1f8      	bne.n	f8dc <_vfprintf_r+0x12e4>
    f8ea:	a916      	add	r1, sp, #88	; 0x58
    f8ec:	468c      	mov	ip, r1
    f8ee:	222e      	movs	r2, #46	; 0x2e
    f8f0:	464b      	mov	r3, r9
    f8f2:	4462      	add	r2, ip
    f8f4:	4694      	mov	ip, r2
    f8f6:	1afb      	subs	r3, r7, r3
    f8f8:	4463      	add	r3, ip
    f8fa:	aa21      	add	r2, sp, #132	; 0x84
    f8fc:	9914      	ldr	r1, [sp, #80]	; 0x50
    f8fe:	1a9b      	subs	r3, r3, r2
    f900:	469c      	mov	ip, r3
    f902:	000a      	movs	r2, r1
    f904:	4462      	add	r2, ip
    f906:	931a      	str	r3, [sp, #104]	; 0x68
    f908:	920e      	str	r2, [sp, #56]	; 0x38
    f90a:	2901      	cmp	r1, #1
    f90c:	dc00      	bgt.n	f910 <_vfprintf_r+0x1318>
    f90e:	e170      	b.n	fbf2 <_vfprintf_r+0x15fa>
    f910:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f914:	4694      	mov	ip, r2
    f916:	4463      	add	r3, ip
    f918:	001a      	movs	r2, r3
    f91a:	930e      	str	r3, [sp, #56]	; 0x38
    f91c:	43db      	mvns	r3, r3
    f91e:	17db      	asrs	r3, r3, #31
    f920:	401a      	ands	r2, r3
    f922:	2300      	movs	r3, #0
    f924:	9208      	str	r2, [sp, #32]
    f926:	9313      	str	r3, [sp, #76]	; 0x4c
    f928:	e6d4      	b.n	f6d4 <_vfprintf_r+0x10dc>
    f92a:	003a      	movs	r2, r7
    f92c:	4659      	mov	r1, fp
    f92e:	9806      	ldr	r0, [sp, #24]
    f930:	f004 fbe6 	bl	14100 <__sprint_r>
    f934:	2800      	cmp	r0, #0
    f936:	d001      	beq.n	f93c <_vfprintf_r+0x1344>
    f938:	f7ff fbee 	bl	f118 <_vfprintf_r+0xb20>
    f93c:	68bc      	ldr	r4, [r7, #8]
    f93e:	ae32      	add	r6, sp, #200	; 0xc8
    f940:	e46a      	b.n	f218 <_vfprintf_r+0xc20>
    f942:	4653      	mov	r3, sl
    f944:	2b00      	cmp	r3, #0
    f946:	d000      	beq.n	f94a <_vfprintf_r+0x1352>
    f948:	e659      	b.n	f5fe <_vfprintf_r+0x1006>
    f94a:	3301      	adds	r3, #1
    f94c:	469a      	mov	sl, r3
    f94e:	e656      	b.n	f5fe <_vfprintf_r+0x1006>
    f950:	4653      	mov	r3, sl
    f952:	9308      	str	r3, [sp, #32]
    f954:	2b06      	cmp	r3, #6
    f956:	d901      	bls.n	f95c <_vfprintf_r+0x1364>
    f958:	2306      	movs	r3, #6
    f95a:	9308      	str	r3, [sp, #32]
    f95c:	9b08      	ldr	r3, [sp, #32]
    f95e:	950f      	str	r5, [sp, #60]	; 0x3c
    f960:	930e      	str	r3, [sp, #56]	; 0x38
    f962:	2300      	movs	r3, #0
    f964:	4698      	mov	r8, r3
    f966:	469a      	mov	sl, r3
    f968:	9313      	str	r3, [sp, #76]	; 0x4c
    f96a:	4b62      	ldr	r3, [pc, #392]	; (faf4 <_vfprintf_r+0x14fc>)
    f96c:	9409      	str	r4, [sp, #36]	; 0x24
    f96e:	9311      	str	r3, [sp, #68]	; 0x44
    f970:	f7fe ffbd 	bl	e8ee <_vfprintf_r+0x2f6>
    f974:	003a      	movs	r2, r7
    f976:	4659      	mov	r1, fp
    f978:	9806      	ldr	r0, [sp, #24]
    f97a:	f004 fbc1 	bl	14100 <__sprint_r>
    f97e:	2800      	cmp	r0, #0
    f980:	d001      	beq.n	f986 <_vfprintf_r+0x138e>
    f982:	f7ff fbc9 	bl	f118 <_vfprintf_r+0xb20>
    f986:	9b14      	ldr	r3, [sp, #80]	; 0x50
    f988:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    f98a:	68bc      	ldr	r4, [r7, #8]
    f98c:	1a9b      	subs	r3, r3, r2
    f98e:	ae32      	add	r6, sp, #200	; 0xc8
    f990:	e567      	b.n	f462 <_vfprintf_r+0xe6a>
    f992:	ab23      	add	r3, sp, #140	; 0x8c
    f994:	931b      	str	r3, [sp, #108]	; 0x6c
    f996:	9304      	str	r3, [sp, #16]
    f998:	ab20      	add	r3, sp, #128	; 0x80
    f99a:	9303      	str	r3, [sp, #12]
    f99c:	ab1f      	add	r3, sp, #124	; 0x7c
    f99e:	9302      	str	r3, [sp, #8]
    f9a0:	4653      	mov	r3, sl
    f9a2:	9301      	str	r3, [sp, #4]
    f9a4:	2303      	movs	r3, #3
    f9a6:	464a      	mov	r2, r9
    f9a8:	9300      	str	r3, [sp, #0]
    f9aa:	9806      	ldr	r0, [sp, #24]
    f9ac:	9b08      	ldr	r3, [sp, #32]
    f9ae:	f000 fb7f 	bl	100b0 <_dtoa_r>
    f9b2:	0003      	movs	r3, r0
    f9b4:	4453      	add	r3, sl
    f9b6:	4698      	mov	r8, r3
    f9b8:	4655      	mov	r5, sl
    f9ba:	9011      	str	r0, [sp, #68]	; 0x44
    f9bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f9be:	781b      	ldrb	r3, [r3, #0]
    f9c0:	2b30      	cmp	r3, #48	; 0x30
    f9c2:	d002      	beq.n	f9ca <_vfprintf_r+0x13d2>
    f9c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    f9c6:	4498      	add	r8, r3
    f9c8:	e64e      	b.n	f668 <_vfprintf_r+0x1070>
    f9ca:	2200      	movs	r2, #0
    f9cc:	2300      	movs	r3, #0
    f9ce:	4648      	mov	r0, r9
    f9d0:	9908      	ldr	r1, [sp, #32]
    f9d2:	f7fb f991 	bl	acf8 <__aeabi_dcmpeq>
    f9d6:	2800      	cmp	r0, #0
    f9d8:	d1f4      	bne.n	f9c4 <_vfprintf_r+0x13cc>
    f9da:	2301      	movs	r3, #1
    f9dc:	1b5b      	subs	r3, r3, r5
    f9de:	931f      	str	r3, [sp, #124]	; 0x7c
    f9e0:	4498      	add	r8, r3
    f9e2:	e641      	b.n	f668 <_vfprintf_r+0x1070>
    f9e4:	46c1      	mov	r9, r8
    f9e6:	f7ff fb1f 	bl	f028 <_vfprintf_r+0xa30>
    f9ea:	2280      	movs	r2, #128	; 0x80
    f9ec:	0612      	lsls	r2, r2, #24
    f9ee:	4694      	mov	ip, r2
    f9f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f9f2:	4699      	mov	r9, r3
    f9f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f9f6:	4463      	add	r3, ip
    f9f8:	9308      	str	r3, [sp, #32]
    f9fa:	232d      	movs	r3, #45	; 0x2d
    f9fc:	9310      	str	r3, [sp, #64]	; 0x40
    f9fe:	e60b      	b.n	f618 <_vfprintf_r+0x1020>
    fa00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fa02:	9b14      	ldr	r3, [sp, #80]	; 0x50
    fa04:	4694      	mov	ip, r2
    fa06:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fa08:	4463      	add	r3, ip
    fa0a:	930e      	str	r3, [sp, #56]	; 0x38
    fa0c:	2a00      	cmp	r2, #0
    fa0e:	dc00      	bgt.n	fa12 <_vfprintf_r+0x141a>
    fa10:	e0e3      	b.n	fbda <_vfprintf_r+0x15e2>
    fa12:	001a      	movs	r2, r3
    fa14:	43db      	mvns	r3, r3
    fa16:	17db      	asrs	r3, r3, #31
    fa18:	401a      	ands	r2, r3
    fa1a:	2367      	movs	r3, #103	; 0x67
    fa1c:	9208      	str	r2, [sp, #32]
    fa1e:	9312      	str	r3, [sp, #72]	; 0x48
    fa20:	e658      	b.n	f6d4 <_vfprintf_r+0x10dc>
    fa22:	003a      	movs	r2, r7
    fa24:	4659      	mov	r1, fp
    fa26:	9806      	ldr	r0, [sp, #24]
    fa28:	f004 fb6a 	bl	14100 <__sprint_r>
    fa2c:	2800      	cmp	r0, #0
    fa2e:	d001      	beq.n	fa34 <_vfprintf_r+0x143c>
    fa30:	f7ff fb72 	bl	f118 <_vfprintf_r+0xb20>
    fa34:	981f      	ldr	r0, [sp, #124]	; 0x7c
    fa36:	68bc      	ldr	r4, [r7, #8]
    fa38:	ae32      	add	r6, sp, #200	; 0xc8
    fa3a:	e69d      	b.n	f778 <_vfprintf_r+0x1180>
    fa3c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    fa3e:	9313      	str	r3, [sp, #76]	; 0x4c
    fa40:	2b00      	cmp	r3, #0
    fa42:	dc00      	bgt.n	fa46 <_vfprintf_r+0x144e>
    fa44:	e0f2      	b.n	fc2c <_vfprintf_r+0x1634>
    fa46:	4652      	mov	r2, sl
    fa48:	2a00      	cmp	r2, #0
    fa4a:	d000      	beq.n	fa4e <_vfprintf_r+0x1456>
    fa4c:	e0a0      	b.n	fb90 <_vfprintf_r+0x1598>
    fa4e:	07e2      	lsls	r2, r4, #31
    fa50:	d500      	bpl.n	fa54 <_vfprintf_r+0x145c>
    fa52:	e09d      	b.n	fb90 <_vfprintf_r+0x1598>
    fa54:	9308      	str	r3, [sp, #32]
    fa56:	930e      	str	r3, [sp, #56]	; 0x38
    fa58:	e63c      	b.n	f6d4 <_vfprintf_r+0x10dc>
    fa5a:	ab16      	add	r3, sp, #88	; 0x58
    fa5c:	7fdb      	ldrb	r3, [r3, #31]
    fa5e:	950f      	str	r5, [sp, #60]	; 0x3c
    fa60:	4698      	mov	r8, r3
    fa62:	4653      	mov	r3, sl
    fa64:	9308      	str	r3, [sp, #32]
    fa66:	930e      	str	r3, [sp, #56]	; 0x38
    fa68:	2300      	movs	r3, #0
    fa6a:	9409      	str	r4, [sp, #36]	; 0x24
    fa6c:	469a      	mov	sl, r3
    fa6e:	9313      	str	r3, [sp, #76]	; 0x4c
    fa70:	f7fe ff37 	bl	e8e2 <_vfprintf_r+0x2ea>
    fa74:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa76:	4698      	mov	r8, r3
    fa78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fa7a:	44a8      	add	r8, r5
    fa7c:	2b47      	cmp	r3, #71	; 0x47
    fa7e:	d000      	beq.n	fa82 <_vfprintf_r+0x148a>
    fa80:	e5f2      	b.n	f668 <_vfprintf_r+0x1070>
    fa82:	07e3      	lsls	r3, r4, #31
    fa84:	d400      	bmi.n	fa88 <_vfprintf_r+0x1490>
    fa86:	e0dc      	b.n	fc42 <_vfprintf_r+0x164a>
    fa88:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa8a:	4698      	mov	r8, r3
    fa8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fa8e:	44a8      	add	r8, r5
    fa90:	2b46      	cmp	r3, #70	; 0x46
    fa92:	d093      	beq.n	f9bc <_vfprintf_r+0x13c4>
    fa94:	e5e8      	b.n	f668 <_vfprintf_r+0x1070>
    fa96:	ab23      	add	r3, sp, #140	; 0x8c
    fa98:	931b      	str	r3, [sp, #108]	; 0x6c
    fa9a:	9304      	str	r3, [sp, #16]
    fa9c:	ab20      	add	r3, sp, #128	; 0x80
    fa9e:	9303      	str	r3, [sp, #12]
    faa0:	ab1f      	add	r3, sp, #124	; 0x7c
    faa2:	9302      	str	r3, [sp, #8]
    faa4:	4653      	mov	r3, sl
    faa6:	9301      	str	r3, [sp, #4]
    faa8:	2303      	movs	r3, #3
    faaa:	464a      	mov	r2, r9
    faac:	9300      	str	r3, [sp, #0]
    faae:	9806      	ldr	r0, [sp, #24]
    fab0:	9b08      	ldr	r3, [sp, #32]
    fab2:	f000 fafd 	bl	100b0 <_dtoa_r>
    fab6:	4655      	mov	r5, sl
    fab8:	9011      	str	r0, [sp, #68]	; 0x44
    faba:	e7e5      	b.n	fa88 <_vfprintf_r+0x1490>
    fabc:	003a      	movs	r2, r7
    fabe:	4659      	mov	r1, fp
    fac0:	9806      	ldr	r0, [sp, #24]
    fac2:	f004 fb1d 	bl	14100 <__sprint_r>
    fac6:	2800      	cmp	r0, #0
    fac8:	d101      	bne.n	face <_vfprintf_r+0x14d6>
    faca:	f7ff faab 	bl	f024 <_vfprintf_r+0xa2c>
    face:	f7ff faab 	bl	f028 <_vfprintf_r+0xa30>
    fad2:	4642      	mov	r2, r8
    fad4:	9207      	str	r2, [sp, #28]
    fad6:	f7fe fe1b 	bl	e710 <_vfprintf_r+0x118>
    fada:	4244      	negs	r4, r0
    fadc:	3010      	adds	r0, #16
    fade:	db00      	blt.n	fae2 <_vfprintf_r+0x14ea>
    fae0:	e0d8      	b.n	fc94 <_vfprintf_r+0x169c>
    fae2:	4805      	ldr	r0, [pc, #20]	; (faf8 <_vfprintf_r+0x1500>)
    fae4:	2610      	movs	r6, #16
    fae6:	0005      	movs	r5, r0
    fae8:	e00c      	b.n	fb04 <_vfprintf_r+0x150c>
    faea:	46c0      	nop			; (mov r8, r8)
    faec:	00018ce0 	.word	0x00018ce0
    faf0:	00018ca4 	.word	0x00018ca4
    faf4:	00018cd8 	.word	0x00018cd8
    faf8:	000192fc 	.word	0x000192fc
    fafc:	3208      	adds	r2, #8
    fafe:	3c10      	subs	r4, #16
    fb00:	2c10      	cmp	r4, #16
    fb02:	dd51      	ble.n	fba8 <_vfprintf_r+0x15b0>
    fb04:	3110      	adds	r1, #16
    fb06:	3301      	adds	r3, #1
    fb08:	6015      	str	r5, [r2, #0]
    fb0a:	6056      	str	r6, [r2, #4]
    fb0c:	60b9      	str	r1, [r7, #8]
    fb0e:	607b      	str	r3, [r7, #4]
    fb10:	2b07      	cmp	r3, #7
    fb12:	ddf3      	ble.n	fafc <_vfprintf_r+0x1504>
    fb14:	003a      	movs	r2, r7
    fb16:	4659      	mov	r1, fp
    fb18:	9806      	ldr	r0, [sp, #24]
    fb1a:	f004 faf1 	bl	14100 <__sprint_r>
    fb1e:	2800      	cmp	r0, #0
    fb20:	d001      	beq.n	fb26 <_vfprintf_r+0x152e>
    fb22:	f7ff faf9 	bl	f118 <_vfprintf_r+0xb20>
    fb26:	68b9      	ldr	r1, [r7, #8]
    fb28:	687b      	ldr	r3, [r7, #4]
    fb2a:	aa32      	add	r2, sp, #200	; 0xc8
    fb2c:	e7e7      	b.n	fafe <_vfprintf_r+0x1506>
    fb2e:	003a      	movs	r2, r7
    fb30:	4659      	mov	r1, fp
    fb32:	9806      	ldr	r0, [sp, #24]
    fb34:	f004 fae4 	bl	14100 <__sprint_r>
    fb38:	2800      	cmp	r0, #0
    fb3a:	d001      	beq.n	fb40 <_vfprintf_r+0x1548>
    fb3c:	f7ff faec 	bl	f118 <_vfprintf_r+0xb20>
    fb40:	981f      	ldr	r0, [sp, #124]	; 0x7c
    fb42:	68b9      	ldr	r1, [r7, #8]
    fb44:	687b      	ldr	r3, [r7, #4]
    fb46:	aa32      	add	r2, sp, #200	; 0xc8
    fb48:	e62e      	b.n	f7a8 <_vfprintf_r+0x11b0>
    fb4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fb4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb4e:	4694      	mov	ip, r2
    fb50:	4463      	add	r3, ip
    fb52:	001a      	movs	r2, r3
    fb54:	930e      	str	r3, [sp, #56]	; 0x38
    fb56:	e75d      	b.n	fa14 <_vfprintf_r+0x141c>
    fb58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fb5a:	e599      	b.n	f690 <_vfprintf_r+0x1098>
    fb5c:	212e      	movs	r1, #46	; 0x2e
    fb5e:	2330      	movs	r3, #48	; 0x30
    fb60:	aa16      	add	r2, sp, #88	; 0x58
    fb62:	1852      	adds	r2, r2, r1
    fb64:	7013      	strb	r3, [r2, #0]
    fb66:	002b      	movs	r3, r5
    fb68:	aa16      	add	r2, sp, #88	; 0x58
    fb6a:	3101      	adds	r1, #1
    fb6c:	3330      	adds	r3, #48	; 0x30
    fb6e:	1852      	adds	r2, r2, r1
    fb70:	7013      	strb	r3, [r2, #0]
    fb72:	ab22      	add	r3, sp, #136	; 0x88
    fb74:	e6c1      	b.n	f8fa <_vfprintf_r+0x1302>
    fb76:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fb78:	2b00      	cmp	r3, #0
    fb7a:	db52      	blt.n	fc22 <_vfprintf_r+0x162a>
    fb7c:	ab16      	add	r3, sp, #88	; 0x58
    fb7e:	7fdb      	ldrb	r3, [r3, #31]
    fb80:	4698      	mov	r8, r3
    fb82:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fb84:	2b47      	cmp	r3, #71	; 0x47
    fb86:	dc48      	bgt.n	fc1a <_vfprintf_r+0x1622>
    fb88:	4b4e      	ldr	r3, [pc, #312]	; (fcc4 <_vfprintf_r+0x16cc>)
    fb8a:	9311      	str	r3, [sp, #68]	; 0x44
    fb8c:	f7ff f88c 	bl	eca8 <_vfprintf_r+0x6b0>
    fb90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fb92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fb94:	4694      	mov	ip, r2
    fb96:	4463      	add	r3, ip
    fb98:	4453      	add	r3, sl
    fb9a:	001a      	movs	r2, r3
    fb9c:	930e      	str	r3, [sp, #56]	; 0x38
    fb9e:	43db      	mvns	r3, r3
    fba0:	17db      	asrs	r3, r3, #31
    fba2:	401a      	ands	r2, r3
    fba4:	9208      	str	r2, [sp, #32]
    fba6:	e595      	b.n	f6d4 <_vfprintf_r+0x10dc>
    fba8:	46a9      	mov	r9, r5
    fbaa:	4648      	mov	r0, r9
    fbac:	1909      	adds	r1, r1, r4
    fbae:	3301      	adds	r3, #1
    fbb0:	6010      	str	r0, [r2, #0]
    fbb2:	6054      	str	r4, [r2, #4]
    fbb4:	60b9      	str	r1, [r7, #8]
    fbb6:	3208      	adds	r2, #8
    fbb8:	607b      	str	r3, [r7, #4]
    fbba:	2b07      	cmp	r3, #7
    fbbc:	dc00      	bgt.n	fbc0 <_vfprintf_r+0x15c8>
    fbbe:	e5f6      	b.n	f7ae <_vfprintf_r+0x11b6>
    fbc0:	003a      	movs	r2, r7
    fbc2:	4659      	mov	r1, fp
    fbc4:	9806      	ldr	r0, [sp, #24]
    fbc6:	f004 fa9b 	bl	14100 <__sprint_r>
    fbca:	2800      	cmp	r0, #0
    fbcc:	d001      	beq.n	fbd2 <_vfprintf_r+0x15da>
    fbce:	f7ff faa3 	bl	f118 <_vfprintf_r+0xb20>
    fbd2:	68b9      	ldr	r1, [r7, #8]
    fbd4:	687b      	ldr	r3, [r7, #4]
    fbd6:	aa32      	add	r2, sp, #200	; 0xc8
    fbd8:	e5e9      	b.n	f7ae <_vfprintf_r+0x11b6>
    fbda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fbde:	1a98      	subs	r0, r3, r2
    fbe0:	1c43      	adds	r3, r0, #1
    fbe2:	001a      	movs	r2, r3
    fbe4:	930e      	str	r3, [sp, #56]	; 0x38
    fbe6:	e715      	b.n	fa14 <_vfprintf_r+0x141c>
    fbe8:	4a37      	ldr	r2, [pc, #220]	; (fcc8 <_vfprintf_r+0x16d0>)
    fbea:	687b      	ldr	r3, [r7, #4]
    fbec:	4691      	mov	r9, r2
    fbee:	f7ff fbf5 	bl	f3dc <_vfprintf_r+0xde4>
    fbf2:	2301      	movs	r3, #1
    fbf4:	4023      	ands	r3, r4
    fbf6:	9313      	str	r3, [sp, #76]	; 0x4c
    fbf8:	d000      	beq.n	fbfc <_vfprintf_r+0x1604>
    fbfa:	e689      	b.n	f910 <_vfprintf_r+0x1318>
    fbfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fbfe:	43d3      	mvns	r3, r2
    fc00:	17db      	asrs	r3, r3, #31
    fc02:	401a      	ands	r2, r3
    fc04:	9208      	str	r2, [sp, #32]
    fc06:	e565      	b.n	f6d4 <_vfprintf_r+0x10dc>
    fc08:	2301      	movs	r3, #1
    fc0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fc0c:	391b      	subs	r1, #27
    fc0e:	1a9d      	subs	r5, r3, r2
    fc10:	aa16      	add	r2, sp, #88	; 0x58
    fc12:	332c      	adds	r3, #44	; 0x2c
    fc14:	1852      	adds	r2, r2, r1
    fc16:	7013      	strb	r3, [r2, #0]
    fc18:	e62f      	b.n	f87a <_vfprintf_r+0x1282>
    fc1a:	4b2c      	ldr	r3, [pc, #176]	; (fccc <_vfprintf_r+0x16d4>)
    fc1c:	9311      	str	r3, [sp, #68]	; 0x44
    fc1e:	f7ff f843 	bl	eca8 <_vfprintf_r+0x6b0>
    fc22:	232d      	movs	r3, #45	; 0x2d
    fc24:	aa16      	add	r2, sp, #88	; 0x58
    fc26:	77d3      	strb	r3, [r2, #31]
    fc28:	4698      	mov	r8, r3
    fc2a:	e7aa      	b.n	fb82 <_vfprintf_r+0x158a>
    fc2c:	4653      	mov	r3, sl
    fc2e:	2b00      	cmp	r3, #0
    fc30:	d101      	bne.n	fc36 <_vfprintf_r+0x163e>
    fc32:	07e3      	lsls	r3, r4, #31
    fc34:	d503      	bpl.n	fc3e <_vfprintf_r+0x1646>
    fc36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fc38:	1c58      	adds	r0, r3, #1
    fc3a:	0003      	movs	r3, r0
    fc3c:	e7ac      	b.n	fb98 <_vfprintf_r+0x15a0>
    fc3e:	2301      	movs	r3, #1
    fc40:	e708      	b.n	fa54 <_vfprintf_r+0x145c>
    fc42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fc44:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fc46:	1a9b      	subs	r3, r3, r2
    fc48:	9314      	str	r3, [sp, #80]	; 0x50
    fc4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc4c:	2b47      	cmp	r3, #71	; 0x47
    fc4e:	d100      	bne.n	fc52 <_vfprintf_r+0x165a>
    fc50:	e5f6      	b.n	f840 <_vfprintf_r+0x1248>
    fc52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    fc54:	9313      	str	r3, [sp, #76]	; 0x4c
    fc56:	e5fd      	b.n	f854 <_vfprintf_r+0x125c>
    fc58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fc5a:	1d1d      	adds	r5, r3, #4
    fc5c:	681b      	ldr	r3, [r3, #0]
    fc5e:	46a8      	mov	r8, r5
    fc60:	469a      	mov	sl, r3
    fc62:	2b00      	cmp	r3, #0
    fc64:	db0a      	blt.n	fc7c <_vfprintf_r+0x1684>
    fc66:	4645      	mov	r5, r8
    fc68:	9b07      	ldr	r3, [sp, #28]
    fc6a:	950f      	str	r5, [sp, #60]	; 0x3c
    fc6c:	785b      	ldrb	r3, [r3, #1]
    fc6e:	9207      	str	r2, [sp, #28]
    fc70:	f7fe fd4b 	bl	e70a <_vfprintf_r+0x112>
    fc74:	ab16      	add	r3, sp, #88	; 0x58
    fc76:	77d8      	strb	r0, [r3, #31]
    fc78:	f7ff f830 	bl	ecdc <_vfprintf_r+0x6e4>
    fc7c:	2301      	movs	r3, #1
    fc7e:	425b      	negs	r3, r3
    fc80:	469a      	mov	sl, r3
    fc82:	e7f0      	b.n	fc66 <_vfprintf_r+0x166e>
    fc84:	ab16      	add	r3, sp, #88	; 0x58
    fc86:	77d8      	strb	r0, [r3, #31]
    fc88:	f7fe ff27 	bl	eada <_vfprintf_r+0x4e2>
    fc8c:	ab16      	add	r3, sp, #88	; 0x58
    fc8e:	77d8      	strb	r0, [r3, #31]
    fc90:	f7fe fdce 	bl	e830 <_vfprintf_r+0x238>
    fc94:	480c      	ldr	r0, [pc, #48]	; (fcc8 <_vfprintf_r+0x16d0>)
    fc96:	4681      	mov	r9, r0
    fc98:	e787      	b.n	fbaa <_vfprintf_r+0x15b2>
    fc9a:	ab16      	add	r3, sp, #88	; 0x58
    fc9c:	77d8      	strb	r0, [r3, #31]
    fc9e:	f7ff f829 	bl	ecf4 <_vfprintf_r+0x6fc>
    fca2:	ab16      	add	r3, sp, #88	; 0x58
    fca4:	77d8      	strb	r0, [r3, #31]
    fca6:	f7fe ffc3 	bl	ec30 <_vfprintf_r+0x638>
    fcaa:	ab16      	add	r3, sp, #88	; 0x58
    fcac:	77d8      	strb	r0, [r3, #31]
    fcae:	f7fe ffa5 	bl	ebfc <_vfprintf_r+0x604>
    fcb2:	ab16      	add	r3, sp, #88	; 0x58
    fcb4:	77d8      	strb	r0, [r3, #31]
    fcb6:	f7fe feaf 	bl	ea18 <_vfprintf_r+0x420>
    fcba:	aa16      	add	r2, sp, #88	; 0x58
    fcbc:	232e      	movs	r3, #46	; 0x2e
    fcbe:	4694      	mov	ip, r2
    fcc0:	4463      	add	r3, ip
    fcc2:	e61a      	b.n	f8fa <_vfprintf_r+0x1302>
    fcc4:	00018ca8 	.word	0x00018ca8
    fcc8:	000192fc 	.word	0x000192fc
    fccc:	00018cac 	.word	0x00018cac

0000fcd0 <__sbprintf>:
    fcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    fcd2:	0015      	movs	r5, r2
    fcd4:	2202      	movs	r2, #2
    fcd6:	4c1e      	ldr	r4, [pc, #120]	; (fd50 <__sbprintf+0x80>)
    fcd8:	001f      	movs	r7, r3
    fcda:	898b      	ldrh	r3, [r1, #12]
    fcdc:	44a5      	add	sp, r4
    fcde:	4393      	bics	r3, r2
    fce0:	466a      	mov	r2, sp
    fce2:	8193      	strh	r3, [r2, #12]
    fce4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    fce6:	0006      	movs	r6, r0
    fce8:	9319      	str	r3, [sp, #100]	; 0x64
    fcea:	89cb      	ldrh	r3, [r1, #14]
    fcec:	a816      	add	r0, sp, #88	; 0x58
    fcee:	81d3      	strh	r3, [r2, #14]
    fcf0:	69cb      	ldr	r3, [r1, #28]
    fcf2:	000c      	movs	r4, r1
    fcf4:	9307      	str	r3, [sp, #28]
    fcf6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    fcf8:	9309      	str	r3, [sp, #36]	; 0x24
    fcfa:	ab1a      	add	r3, sp, #104	; 0x68
    fcfc:	9300      	str	r3, [sp, #0]
    fcfe:	9304      	str	r3, [sp, #16]
    fd00:	2380      	movs	r3, #128	; 0x80
    fd02:	00db      	lsls	r3, r3, #3
    fd04:	9302      	str	r3, [sp, #8]
    fd06:	9305      	str	r3, [sp, #20]
    fd08:	2300      	movs	r3, #0
    fd0a:	9306      	str	r3, [sp, #24]
    fd0c:	f001 fe04 	bl	11918 <__retarget_lock_init_recursive>
    fd10:	002a      	movs	r2, r5
    fd12:	003b      	movs	r3, r7
    fd14:	4669      	mov	r1, sp
    fd16:	0030      	movs	r0, r6
    fd18:	f7fe fc6e 	bl	e5f8 <_vfprintf_r>
    fd1c:	1e05      	subs	r5, r0, #0
    fd1e:	db05      	blt.n	fd2c <__sbprintf+0x5c>
    fd20:	4669      	mov	r1, sp
    fd22:	0030      	movs	r0, r6
    fd24:	f001 fa30 	bl	11188 <_fflush_r>
    fd28:	2800      	cmp	r0, #0
    fd2a:	d10e      	bne.n	fd4a <__sbprintf+0x7a>
    fd2c:	466b      	mov	r3, sp
    fd2e:	899b      	ldrh	r3, [r3, #12]
    fd30:	065b      	lsls	r3, r3, #25
    fd32:	d503      	bpl.n	fd3c <__sbprintf+0x6c>
    fd34:	2240      	movs	r2, #64	; 0x40
    fd36:	89a3      	ldrh	r3, [r4, #12]
    fd38:	4313      	orrs	r3, r2
    fd3a:	81a3      	strh	r3, [r4, #12]
    fd3c:	9816      	ldr	r0, [sp, #88]	; 0x58
    fd3e:	f001 fded 	bl	1191c <__retarget_lock_close_recursive>
    fd42:	0028      	movs	r0, r5
    fd44:	4b03      	ldr	r3, [pc, #12]	; (fd54 <__sbprintf+0x84>)
    fd46:	449d      	add	sp, r3
    fd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd4a:	2501      	movs	r5, #1
    fd4c:	426d      	negs	r5, r5
    fd4e:	e7ed      	b.n	fd2c <__sbprintf+0x5c>
    fd50:	fffffb94 	.word	0xfffffb94
    fd54:	0000046c 	.word	0x0000046c

0000fd58 <__swbuf_r>:
    fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd5a:	0006      	movs	r6, r0
    fd5c:	000d      	movs	r5, r1
    fd5e:	0014      	movs	r4, r2
    fd60:	2800      	cmp	r0, #0
    fd62:	d002      	beq.n	fd6a <__swbuf_r+0x12>
    fd64:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fd66:	2b00      	cmp	r3, #0
    fd68:	d04e      	beq.n	fe08 <__swbuf_r+0xb0>
    fd6a:	69a3      	ldr	r3, [r4, #24]
    fd6c:	60a3      	str	r3, [r4, #8]
    fd6e:	230c      	movs	r3, #12
    fd70:	5ee0      	ldrsh	r0, [r4, r3]
    fd72:	b281      	uxth	r1, r0
    fd74:	070b      	lsls	r3, r1, #28
    fd76:	d53c      	bpl.n	fdf2 <__swbuf_r+0x9a>
    fd78:	6923      	ldr	r3, [r4, #16]
    fd7a:	2b00      	cmp	r3, #0
    fd7c:	d039      	beq.n	fdf2 <__swbuf_r+0x9a>
    fd7e:	22ff      	movs	r2, #255	; 0xff
    fd80:	b2ef      	uxtb	r7, r5
    fd82:	4015      	ands	r5, r2
    fd84:	2280      	movs	r2, #128	; 0x80
    fd86:	0192      	lsls	r2, r2, #6
    fd88:	4211      	tst	r1, r2
    fd8a:	d015      	beq.n	fdb8 <__swbuf_r+0x60>
    fd8c:	6822      	ldr	r2, [r4, #0]
    fd8e:	6961      	ldr	r1, [r4, #20]
    fd90:	1ad3      	subs	r3, r2, r3
    fd92:	428b      	cmp	r3, r1
    fd94:	da1b      	bge.n	fdce <__swbuf_r+0x76>
    fd96:	3301      	adds	r3, #1
    fd98:	68a1      	ldr	r1, [r4, #8]
    fd9a:	3901      	subs	r1, #1
    fd9c:	60a1      	str	r1, [r4, #8]
    fd9e:	1c51      	adds	r1, r2, #1
    fda0:	6021      	str	r1, [r4, #0]
    fda2:	7017      	strb	r7, [r2, #0]
    fda4:	6962      	ldr	r2, [r4, #20]
    fda6:	429a      	cmp	r2, r3
    fda8:	d01a      	beq.n	fde0 <__swbuf_r+0x88>
    fdaa:	89a3      	ldrh	r3, [r4, #12]
    fdac:	07db      	lsls	r3, r3, #31
    fdae:	d501      	bpl.n	fdb4 <__swbuf_r+0x5c>
    fdb0:	2d0a      	cmp	r5, #10
    fdb2:	d015      	beq.n	fde0 <__swbuf_r+0x88>
    fdb4:	0028      	movs	r0, r5
    fdb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdb8:	4302      	orrs	r2, r0
    fdba:	6e61      	ldr	r1, [r4, #100]	; 0x64
    fdbc:	81a2      	strh	r2, [r4, #12]
    fdbe:	4a14      	ldr	r2, [pc, #80]	; (fe10 <__swbuf_r+0xb8>)
    fdc0:	400a      	ands	r2, r1
    fdc2:	6662      	str	r2, [r4, #100]	; 0x64
    fdc4:	6961      	ldr	r1, [r4, #20]
    fdc6:	6822      	ldr	r2, [r4, #0]
    fdc8:	1ad3      	subs	r3, r2, r3
    fdca:	428b      	cmp	r3, r1
    fdcc:	dbe3      	blt.n	fd96 <__swbuf_r+0x3e>
    fdce:	0021      	movs	r1, r4
    fdd0:	0030      	movs	r0, r6
    fdd2:	f001 f9d9 	bl	11188 <_fflush_r>
    fdd6:	2800      	cmp	r0, #0
    fdd8:	d108      	bne.n	fdec <__swbuf_r+0x94>
    fdda:	6822      	ldr	r2, [r4, #0]
    fddc:	2301      	movs	r3, #1
    fdde:	e7db      	b.n	fd98 <__swbuf_r+0x40>
    fde0:	0021      	movs	r1, r4
    fde2:	0030      	movs	r0, r6
    fde4:	f001 f9d0 	bl	11188 <_fflush_r>
    fde8:	2800      	cmp	r0, #0
    fdea:	d0e3      	beq.n	fdb4 <__swbuf_r+0x5c>
    fdec:	2501      	movs	r5, #1
    fdee:	426d      	negs	r5, r5
    fdf0:	e7e0      	b.n	fdb4 <__swbuf_r+0x5c>
    fdf2:	0021      	movs	r1, r4
    fdf4:	0030      	movs	r0, r6
    fdf6:	f000 f821 	bl	fe3c <__swsetup_r>
    fdfa:	2800      	cmp	r0, #0
    fdfc:	d1f6      	bne.n	fdec <__swbuf_r+0x94>
    fdfe:	230c      	movs	r3, #12
    fe00:	5ee0      	ldrsh	r0, [r4, r3]
    fe02:	6923      	ldr	r3, [r4, #16]
    fe04:	b281      	uxth	r1, r0
    fe06:	e7ba      	b.n	fd7e <__swbuf_r+0x26>
    fe08:	f001 fa18 	bl	1123c <__sinit>
    fe0c:	e7ad      	b.n	fd6a <__swbuf_r+0x12>
    fe0e:	46c0      	nop			; (mov r8, r8)
    fe10:	ffffdfff 	.word	0xffffdfff

0000fe14 <_write_r>:
    fe14:	b570      	push	{r4, r5, r6, lr}
    fe16:	0005      	movs	r5, r0
    fe18:	0008      	movs	r0, r1
    fe1a:	0011      	movs	r1, r2
    fe1c:	2200      	movs	r2, #0
    fe1e:	4c06      	ldr	r4, [pc, #24]	; (fe38 <_write_r+0x24>)
    fe20:	6022      	str	r2, [r4, #0]
    fe22:	001a      	movs	r2, r3
    fe24:	f7f3 fab8 	bl	3398 <_write>
    fe28:	1c43      	adds	r3, r0, #1
    fe2a:	d000      	beq.n	fe2e <_write_r+0x1a>
    fe2c:	bd70      	pop	{r4, r5, r6, pc}
    fe2e:	6823      	ldr	r3, [r4, #0]
    fe30:	2b00      	cmp	r3, #0
    fe32:	d0fb      	beq.n	fe2c <_write_r+0x18>
    fe34:	602b      	str	r3, [r5, #0]
    fe36:	e7f9      	b.n	fe2c <_write_r+0x18>
    fe38:	200018fc 	.word	0x200018fc

0000fe3c <__swsetup_r>:
    fe3c:	4b33      	ldr	r3, [pc, #204]	; (ff0c <__swsetup_r+0xd0>)
    fe3e:	b570      	push	{r4, r5, r6, lr}
    fe40:	0005      	movs	r5, r0
    fe42:	6818      	ldr	r0, [r3, #0]
    fe44:	000c      	movs	r4, r1
    fe46:	2800      	cmp	r0, #0
    fe48:	d002      	beq.n	fe50 <__swsetup_r+0x14>
    fe4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    fe4c:	2b00      	cmp	r3, #0
    fe4e:	d03c      	beq.n	feca <__swsetup_r+0x8e>
    fe50:	230c      	movs	r3, #12
    fe52:	5ee2      	ldrsh	r2, [r4, r3]
    fe54:	b293      	uxth	r3, r2
    fe56:	0719      	lsls	r1, r3, #28
    fe58:	d50d      	bpl.n	fe76 <__swsetup_r+0x3a>
    fe5a:	6921      	ldr	r1, [r4, #16]
    fe5c:	2900      	cmp	r1, #0
    fe5e:	d015      	beq.n	fe8c <__swsetup_r+0x50>
    fe60:	07da      	lsls	r2, r3, #31
    fe62:	d521      	bpl.n	fea8 <__swsetup_r+0x6c>
    fe64:	2300      	movs	r3, #0
    fe66:	60a3      	str	r3, [r4, #8]
    fe68:	6963      	ldr	r3, [r4, #20]
    fe6a:	2000      	movs	r0, #0
    fe6c:	425b      	negs	r3, r3
    fe6e:	61a3      	str	r3, [r4, #24]
    fe70:	2900      	cmp	r1, #0
    fe72:	d021      	beq.n	feb8 <__swsetup_r+0x7c>
    fe74:	bd70      	pop	{r4, r5, r6, pc}
    fe76:	06d9      	lsls	r1, r3, #27
    fe78:	d53f      	bpl.n	fefa <__swsetup_r+0xbe>
    fe7a:	075b      	lsls	r3, r3, #29
    fe7c:	d428      	bmi.n	fed0 <__swsetup_r+0x94>
    fe7e:	6921      	ldr	r1, [r4, #16]
    fe80:	2308      	movs	r3, #8
    fe82:	4313      	orrs	r3, r2
    fe84:	81a3      	strh	r3, [r4, #12]
    fe86:	b29b      	uxth	r3, r3
    fe88:	2900      	cmp	r1, #0
    fe8a:	d1e9      	bne.n	fe60 <__swsetup_r+0x24>
    fe8c:	22a0      	movs	r2, #160	; 0xa0
    fe8e:	2080      	movs	r0, #128	; 0x80
    fe90:	0092      	lsls	r2, r2, #2
    fe92:	0080      	lsls	r0, r0, #2
    fe94:	401a      	ands	r2, r3
    fe96:	4282      	cmp	r2, r0
    fe98:	d0e2      	beq.n	fe60 <__swsetup_r+0x24>
    fe9a:	0021      	movs	r1, r4
    fe9c:	0028      	movs	r0, r5
    fe9e:	f001 fd87 	bl	119b0 <__smakebuf_r>
    fea2:	89a3      	ldrh	r3, [r4, #12]
    fea4:	6921      	ldr	r1, [r4, #16]
    fea6:	e7db      	b.n	fe60 <__swsetup_r+0x24>
    fea8:	2200      	movs	r2, #0
    feaa:	079b      	lsls	r3, r3, #30
    feac:	d400      	bmi.n	feb0 <__swsetup_r+0x74>
    feae:	6962      	ldr	r2, [r4, #20]
    feb0:	60a2      	str	r2, [r4, #8]
    feb2:	2000      	movs	r0, #0
    feb4:	2900      	cmp	r1, #0
    feb6:	d1dd      	bne.n	fe74 <__swsetup_r+0x38>
    feb8:	220c      	movs	r2, #12
    feba:	5ea3      	ldrsh	r3, [r4, r2]
    febc:	061a      	lsls	r2, r3, #24
    febe:	d5d9      	bpl.n	fe74 <__swsetup_r+0x38>
    fec0:	2240      	movs	r2, #64	; 0x40
    fec2:	4313      	orrs	r3, r2
    fec4:	81a3      	strh	r3, [r4, #12]
    fec6:	3801      	subs	r0, #1
    fec8:	e7d4      	b.n	fe74 <__swsetup_r+0x38>
    feca:	f001 f9b7 	bl	1123c <__sinit>
    fece:	e7bf      	b.n	fe50 <__swsetup_r+0x14>
    fed0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fed2:	2900      	cmp	r1, #0
    fed4:	d00a      	beq.n	feec <__swsetup_r+0xb0>
    fed6:	0023      	movs	r3, r4
    fed8:	3340      	adds	r3, #64	; 0x40
    feda:	4299      	cmp	r1, r3
    fedc:	d004      	beq.n	fee8 <__swsetup_r+0xac>
    fede:	0028      	movs	r0, r5
    fee0:	f001 fa56 	bl	11390 <_free_r>
    fee4:	230c      	movs	r3, #12
    fee6:	5ee2      	ldrsh	r2, [r4, r3]
    fee8:	2300      	movs	r3, #0
    feea:	6323      	str	r3, [r4, #48]	; 0x30
    feec:	2324      	movs	r3, #36	; 0x24
    feee:	439a      	bics	r2, r3
    fef0:	2300      	movs	r3, #0
    fef2:	6921      	ldr	r1, [r4, #16]
    fef4:	6063      	str	r3, [r4, #4]
    fef6:	6021      	str	r1, [r4, #0]
    fef8:	e7c2      	b.n	fe80 <__swsetup_r+0x44>
    fefa:	2309      	movs	r3, #9
    fefc:	602b      	str	r3, [r5, #0]
    fefe:	2340      	movs	r3, #64	; 0x40
    ff00:	2001      	movs	r0, #1
    ff02:	431a      	orrs	r2, r3
    ff04:	81a2      	strh	r2, [r4, #12]
    ff06:	4240      	negs	r0, r0
    ff08:	e7b4      	b.n	fe74 <__swsetup_r+0x38>
    ff0a:	46c0      	nop			; (mov r8, r8)
    ff0c:	20000088 	.word	0x20000088

0000ff10 <register_fini>:
    ff10:	4b03      	ldr	r3, [pc, #12]	; (ff20 <register_fini+0x10>)
    ff12:	b510      	push	{r4, lr}
    ff14:	2b00      	cmp	r3, #0
    ff16:	d002      	beq.n	ff1e <register_fini+0xe>
    ff18:	4802      	ldr	r0, [pc, #8]	; (ff24 <register_fini+0x14>)
    ff1a:	f000 f805 	bl	ff28 <atexit>
    ff1e:	bd10      	pop	{r4, pc}
    ff20:	00000000 	.word	0x00000000
    ff24:	000112bd 	.word	0x000112bd

0000ff28 <atexit>:
    ff28:	b510      	push	{r4, lr}
    ff2a:	0001      	movs	r1, r0
    ff2c:	2300      	movs	r3, #0
    ff2e:	2200      	movs	r2, #0
    ff30:	2000      	movs	r0, #0
    ff32:	f004 f8fd 	bl	14130 <__register_exitproc>
    ff36:	bd10      	pop	{r4, pc}

0000ff38 <_close_r>:
    ff38:	2300      	movs	r3, #0
    ff3a:	b570      	push	{r4, r5, r6, lr}
    ff3c:	4c06      	ldr	r4, [pc, #24]	; (ff58 <_close_r+0x20>)
    ff3e:	0005      	movs	r5, r0
    ff40:	0008      	movs	r0, r1
    ff42:	6023      	str	r3, [r4, #0]
    ff44:	f7f0 fe2a 	bl	b9c <_close>
    ff48:	1c43      	adds	r3, r0, #1
    ff4a:	d000      	beq.n	ff4e <_close_r+0x16>
    ff4c:	bd70      	pop	{r4, r5, r6, pc}
    ff4e:	6823      	ldr	r3, [r4, #0]
    ff50:	2b00      	cmp	r3, #0
    ff52:	d0fb      	beq.n	ff4c <_close_r+0x14>
    ff54:	602b      	str	r3, [r5, #0]
    ff56:	e7f9      	b.n	ff4c <_close_r+0x14>
    ff58:	200018fc 	.word	0x200018fc

0000ff5c <quorem>:
    ff5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff5e:	4645      	mov	r5, r8
    ff60:	4680      	mov	r8, r0
    ff62:	46de      	mov	lr, fp
    ff64:	4657      	mov	r7, sl
    ff66:	464e      	mov	r6, r9
    ff68:	4642      	mov	r2, r8
    ff6a:	b5e0      	push	{r5, r6, r7, lr}
    ff6c:	690c      	ldr	r4, [r1, #16]
    ff6e:	6912      	ldr	r2, [r2, #16]
    ff70:	b085      	sub	sp, #20
    ff72:	000b      	movs	r3, r1
    ff74:	9102      	str	r1, [sp, #8]
    ff76:	2000      	movs	r0, #0
    ff78:	4294      	cmp	r4, r2
    ff7a:	dd00      	ble.n	ff7e <quorem+0x22>
    ff7c:	e090      	b.n	100a0 <quorem+0x144>
    ff7e:	2214      	movs	r2, #20
    ff80:	4694      	mov	ip, r2
    ff82:	4463      	add	r3, ip
    ff84:	4699      	mov	r9, r3
    ff86:	464a      	mov	r2, r9
    ff88:	3c01      	subs	r4, #1
    ff8a:	00a3      	lsls	r3, r4, #2
    ff8c:	18d6      	adds	r6, r2, r3
    ff8e:	2214      	movs	r2, #20
    ff90:	4442      	add	r2, r8
    ff92:	4693      	mov	fp, r2
    ff94:	449b      	add	fp, r3
    ff96:	6833      	ldr	r3, [r6, #0]
    ff98:	0015      	movs	r5, r2
    ff9a:	1c59      	adds	r1, r3, #1
    ff9c:	465b      	mov	r3, fp
    ff9e:	6818      	ldr	r0, [r3, #0]
    ffa0:	9201      	str	r2, [sp, #4]
    ffa2:	f7f9 f907 	bl	91b4 <__udivsi3>
    ffa6:	1e03      	subs	r3, r0, #0
    ffa8:	9000      	str	r0, [sp, #0]
    ffaa:	d042      	beq.n	10032 <quorem+0xd6>
    ffac:	0029      	movs	r1, r5
    ffae:	2700      	movs	r7, #0
    ffb0:	464d      	mov	r5, r9
    ffb2:	2000      	movs	r0, #0
    ffb4:	46b1      	mov	r9, r6
    ffb6:	46a2      	mov	sl, r4
    ffb8:	003e      	movs	r6, r7
    ffba:	0004      	movs	r4, r0
    ffbc:	469c      	mov	ip, r3
    ffbe:	002f      	movs	r7, r5
    ffc0:	0008      	movs	r0, r1
    ffc2:	9503      	str	r5, [sp, #12]
    ffc4:	4663      	mov	r3, ip
    ffc6:	cf04      	ldmia	r7!, {r2}
    ffc8:	0415      	lsls	r5, r2, #16
    ffca:	0c2d      	lsrs	r5, r5, #16
    ffcc:	435d      	muls	r5, r3
    ffce:	0c12      	lsrs	r2, r2, #16
    ffd0:	435a      	muls	r2, r3
    ffd2:	19ad      	adds	r5, r5, r6
    ffd4:	0c2b      	lsrs	r3, r5, #16
    ffd6:	18d2      	adds	r2, r2, r3
    ffd8:	6803      	ldr	r3, [r0, #0]
    ffda:	042d      	lsls	r5, r5, #16
    ffdc:	0419      	lsls	r1, r3, #16
    ffde:	0c09      	lsrs	r1, r1, #16
    ffe0:	1909      	adds	r1, r1, r4
    ffe2:	0c16      	lsrs	r6, r2, #16
    ffe4:	0c2d      	lsrs	r5, r5, #16
    ffe6:	0412      	lsls	r2, r2, #16
    ffe8:	1b49      	subs	r1, r1, r5
    ffea:	0c12      	lsrs	r2, r2, #16
    ffec:	0c1b      	lsrs	r3, r3, #16
    ffee:	1a9b      	subs	r3, r3, r2
    fff0:	140a      	asrs	r2, r1, #16
    fff2:	189b      	adds	r3, r3, r2
    fff4:	0409      	lsls	r1, r1, #16
    fff6:	141c      	asrs	r4, r3, #16
    fff8:	0c09      	lsrs	r1, r1, #16
    fffa:	041b      	lsls	r3, r3, #16
    fffc:	4319      	orrs	r1, r3
    fffe:	c002      	stmia	r0!, {r1}
   10000:	45b9      	cmp	r9, r7
   10002:	d2df      	bcs.n	ffc4 <quorem+0x68>
   10004:	9b03      	ldr	r3, [sp, #12]
   10006:	464e      	mov	r6, r9
   10008:	4699      	mov	r9, r3
   1000a:	465b      	mov	r3, fp
   1000c:	681b      	ldr	r3, [r3, #0]
   1000e:	4654      	mov	r4, sl
   10010:	2b00      	cmp	r3, #0
   10012:	d10e      	bne.n	10032 <quorem+0xd6>
   10014:	465b      	mov	r3, fp
   10016:	9a01      	ldr	r2, [sp, #4]
   10018:	3b04      	subs	r3, #4
   1001a:	429a      	cmp	r2, r3
   1001c:	d304      	bcc.n	10028 <quorem+0xcc>
   1001e:	e006      	b.n	1002e <quorem+0xd2>
   10020:	3b04      	subs	r3, #4
   10022:	3c01      	subs	r4, #1
   10024:	429a      	cmp	r2, r3
   10026:	d202      	bcs.n	1002e <quorem+0xd2>
   10028:	6819      	ldr	r1, [r3, #0]
   1002a:	2900      	cmp	r1, #0
   1002c:	d0f8      	beq.n	10020 <quorem+0xc4>
   1002e:	4643      	mov	r3, r8
   10030:	611c      	str	r4, [r3, #16]
   10032:	9902      	ldr	r1, [sp, #8]
   10034:	4640      	mov	r0, r8
   10036:	f002 f859 	bl	120ec <__mcmp>
   1003a:	2800      	cmp	r0, #0
   1003c:	db2f      	blt.n	1009e <quorem+0x142>
   1003e:	464f      	mov	r7, r9
   10040:	2000      	movs	r0, #0
   10042:	9b00      	ldr	r3, [sp, #0]
   10044:	9d01      	ldr	r5, [sp, #4]
   10046:	3301      	adds	r3, #1
   10048:	9300      	str	r3, [sp, #0]
   1004a:	682b      	ldr	r3, [r5, #0]
   1004c:	cf02      	ldmia	r7!, {r1}
   1004e:	041a      	lsls	r2, r3, #16
   10050:	0c12      	lsrs	r2, r2, #16
   10052:	1810      	adds	r0, r2, r0
   10054:	040a      	lsls	r2, r1, #16
   10056:	0c12      	lsrs	r2, r2, #16
   10058:	1a82      	subs	r2, r0, r2
   1005a:	0c09      	lsrs	r1, r1, #16
   1005c:	0c1b      	lsrs	r3, r3, #16
   1005e:	1a5b      	subs	r3, r3, r1
   10060:	1411      	asrs	r1, r2, #16
   10062:	185b      	adds	r3, r3, r1
   10064:	0412      	lsls	r2, r2, #16
   10066:	1418      	asrs	r0, r3, #16
   10068:	0c12      	lsrs	r2, r2, #16
   1006a:	041b      	lsls	r3, r3, #16
   1006c:	4313      	orrs	r3, r2
   1006e:	c508      	stmia	r5!, {r3}
   10070:	42be      	cmp	r6, r7
   10072:	d2ea      	bcs.n	1004a <quorem+0xee>
   10074:	9901      	ldr	r1, [sp, #4]
   10076:	00a3      	lsls	r3, r4, #2
   10078:	468c      	mov	ip, r1
   1007a:	4463      	add	r3, ip
   1007c:	681a      	ldr	r2, [r3, #0]
   1007e:	2a00      	cmp	r2, #0
   10080:	d10d      	bne.n	1009e <quorem+0x142>
   10082:	3b04      	subs	r3, #4
   10084:	000a      	movs	r2, r1
   10086:	4299      	cmp	r1, r3
   10088:	d304      	bcc.n	10094 <quorem+0x138>
   1008a:	e006      	b.n	1009a <quorem+0x13e>
   1008c:	3b04      	subs	r3, #4
   1008e:	3c01      	subs	r4, #1
   10090:	429a      	cmp	r2, r3
   10092:	d202      	bcs.n	1009a <quorem+0x13e>
   10094:	6819      	ldr	r1, [r3, #0]
   10096:	2900      	cmp	r1, #0
   10098:	d0f8      	beq.n	1008c <quorem+0x130>
   1009a:	4643      	mov	r3, r8
   1009c:	611c      	str	r4, [r3, #16]
   1009e:	9800      	ldr	r0, [sp, #0]
   100a0:	b005      	add	sp, #20
   100a2:	bc3c      	pop	{r2, r3, r4, r5}
   100a4:	4690      	mov	r8, r2
   100a6:	4699      	mov	r9, r3
   100a8:	46a2      	mov	sl, r4
   100aa:	46ab      	mov	fp, r5
   100ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ae:	46c0      	nop			; (mov r8, r8)

000100b0 <_dtoa_r>:
   100b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   100b2:	4657      	mov	r7, sl
   100b4:	464e      	mov	r6, r9
   100b6:	4645      	mov	r5, r8
   100b8:	46de      	mov	lr, fp
   100ba:	b5e0      	push	{r5, r6, r7, lr}
   100bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   100be:	b099      	sub	sp, #100	; 0x64
   100c0:	4682      	mov	sl, r0
   100c2:	001d      	movs	r5, r3
   100c4:	0016      	movs	r6, r2
   100c6:	001f      	movs	r7, r3
   100c8:	2900      	cmp	r1, #0
   100ca:	d009      	beq.n	100e0 <_dtoa_r+0x30>
   100cc:	2301      	movs	r3, #1
   100ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
   100d0:	4093      	lsls	r3, r2
   100d2:	604a      	str	r2, [r1, #4]
   100d4:	608b      	str	r3, [r1, #8]
   100d6:	f001 fdb3 	bl	11c40 <_Bfree>
   100da:	2300      	movs	r3, #0
   100dc:	4652      	mov	r2, sl
   100de:	6413      	str	r3, [r2, #64]	; 0x40
   100e0:	46b8      	mov	r8, r7
   100e2:	2f00      	cmp	r7, #0
   100e4:	db37      	blt.n	10156 <_dtoa_r+0xa6>
   100e6:	2300      	movs	r3, #0
   100e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
   100ea:	6013      	str	r3, [r2, #0]
   100ec:	4642      	mov	r2, r8
   100ee:	4bd6      	ldr	r3, [pc, #856]	; (10448 <_dtoa_r+0x398>)
   100f0:	401a      	ands	r2, r3
   100f2:	429a      	cmp	r2, r3
   100f4:	d018      	beq.n	10128 <_dtoa_r+0x78>
   100f6:	2200      	movs	r2, #0
   100f8:	2300      	movs	r3, #0
   100fa:	0030      	movs	r0, r6
   100fc:	0039      	movs	r1, r7
   100fe:	f7fa fdfb 	bl	acf8 <__aeabi_dcmpeq>
   10102:	2800      	cmp	r0, #0
   10104:	d02f      	beq.n	10166 <_dtoa_r+0xb6>
   10106:	2301      	movs	r3, #1
   10108:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1010a:	6013      	str	r3, [r2, #0]
   1010c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1010e:	2b00      	cmp	r3, #0
   10110:	d100      	bne.n	10114 <_dtoa_r+0x64>
   10112:	e22a      	b.n	1056a <_dtoa_r+0x4ba>
   10114:	48cd      	ldr	r0, [pc, #820]	; (1044c <_dtoa_r+0x39c>)
   10116:	6018      	str	r0, [r3, #0]
   10118:	3801      	subs	r0, #1
   1011a:	b019      	add	sp, #100	; 0x64
   1011c:	bc3c      	pop	{r2, r3, r4, r5}
   1011e:	4690      	mov	r8, r2
   10120:	4699      	mov	r9, r3
   10122:	46a2      	mov	sl, r4
   10124:	46ab      	mov	fp, r5
   10126:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10128:	4bc9      	ldr	r3, [pc, #804]	; (10450 <_dtoa_r+0x3a0>)
   1012a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1012c:	6013      	str	r3, [r2, #0]
   1012e:	2e00      	cmp	r6, #0
   10130:	d10b      	bne.n	1014a <_dtoa_r+0x9a>
   10132:	4643      	mov	r3, r8
   10134:	0318      	lsls	r0, r3, #12
   10136:	d108      	bne.n	1014a <_dtoa_r+0x9a>
   10138:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1013a:	48c6      	ldr	r0, [pc, #792]	; (10454 <_dtoa_r+0x3a4>)
   1013c:	2b00      	cmp	r3, #0
   1013e:	d0ec      	beq.n	1011a <_dtoa_r+0x6a>
   10140:	0003      	movs	r3, r0
   10142:	3308      	adds	r3, #8
   10144:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10146:	6013      	str	r3, [r2, #0]
   10148:	e7e7      	b.n	1011a <_dtoa_r+0x6a>
   1014a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1014c:	48c2      	ldr	r0, [pc, #776]	; (10458 <_dtoa_r+0x3a8>)
   1014e:	2b00      	cmp	r3, #0
   10150:	d0e3      	beq.n	1011a <_dtoa_r+0x6a>
   10152:	1cc3      	adds	r3, r0, #3
   10154:	e7f6      	b.n	10144 <_dtoa_r+0x94>
   10156:	2301      	movs	r3, #1
   10158:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1015a:	0068      	lsls	r0, r5, #1
   1015c:	6013      	str	r3, [r2, #0]
   1015e:	0843      	lsrs	r3, r0, #1
   10160:	4698      	mov	r8, r3
   10162:	001f      	movs	r7, r3
   10164:	e7c2      	b.n	100ec <_dtoa_r+0x3c>
   10166:	ab16      	add	r3, sp, #88	; 0x58
   10168:	9301      	str	r3, [sp, #4]
   1016a:	ab17      	add	r3, sp, #92	; 0x5c
   1016c:	9300      	str	r3, [sp, #0]
   1016e:	0032      	movs	r2, r6
   10170:	003b      	movs	r3, r7
   10172:	4650      	mov	r0, sl
   10174:	f002 f902 	bl	1237c <__d2b>
   10178:	4643      	mov	r3, r8
   1017a:	4683      	mov	fp, r0
   1017c:	0d1a      	lsrs	r2, r3, #20
   1017e:	d100      	bne.n	10182 <_dtoa_r+0xd2>
   10180:	e1d6      	b.n	10530 <_dtoa_r+0x480>
   10182:	033b      	lsls	r3, r7, #12
   10184:	4cb5      	ldr	r4, [pc, #724]	; (1045c <_dtoa_r+0x3ac>)
   10186:	0b1b      	lsrs	r3, r3, #12
   10188:	431c      	orrs	r4, r3
   1018a:	4bb5      	ldr	r3, [pc, #724]	; (10460 <_dtoa_r+0x3b0>)
   1018c:	0030      	movs	r0, r6
   1018e:	4698      	mov	r8, r3
   10190:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10192:	0021      	movs	r1, r4
   10194:	4699      	mov	r9, r3
   10196:	2300      	movs	r3, #0
   10198:	4490      	add	r8, r2
   1019a:	930f      	str	r3, [sp, #60]	; 0x3c
   1019c:	2200      	movs	r2, #0
   1019e:	4bb1      	ldr	r3, [pc, #708]	; (10464 <_dtoa_r+0x3b4>)
   101a0:	f7fa f984 	bl	a4ac <__aeabi_dsub>
   101a4:	4ab0      	ldr	r2, [pc, #704]	; (10468 <_dtoa_r+0x3b8>)
   101a6:	4bb1      	ldr	r3, [pc, #708]	; (1046c <_dtoa_r+0x3bc>)
   101a8:	f7f9 ff00 	bl	9fac <__aeabi_dmul>
   101ac:	4ab0      	ldr	r2, [pc, #704]	; (10470 <_dtoa_r+0x3c0>)
   101ae:	4bb1      	ldr	r3, [pc, #708]	; (10474 <_dtoa_r+0x3c4>)
   101b0:	f004 fdb2 	bl	14d18 <__aeabi_dadd>
   101b4:	0004      	movs	r4, r0
   101b6:	4640      	mov	r0, r8
   101b8:	000d      	movs	r5, r1
   101ba:	f7fa fcc1 	bl	ab40 <__aeabi_i2d>
   101be:	4aae      	ldr	r2, [pc, #696]	; (10478 <_dtoa_r+0x3c8>)
   101c0:	4bae      	ldr	r3, [pc, #696]	; (1047c <_dtoa_r+0x3cc>)
   101c2:	f7f9 fef3 	bl	9fac <__aeabi_dmul>
   101c6:	0002      	movs	r2, r0
   101c8:	000b      	movs	r3, r1
   101ca:	0020      	movs	r0, r4
   101cc:	0029      	movs	r1, r5
   101ce:	f004 fda3 	bl	14d18 <__aeabi_dadd>
   101d2:	0004      	movs	r4, r0
   101d4:	000d      	movs	r5, r1
   101d6:	f7fa fc7f 	bl	aad8 <__aeabi_d2iz>
   101da:	2200      	movs	r2, #0
   101dc:	9003      	str	r0, [sp, #12]
   101de:	2300      	movs	r3, #0
   101e0:	0020      	movs	r0, r4
   101e2:	0029      	movs	r1, r5
   101e4:	f7fa fd8e 	bl	ad04 <__aeabi_dcmplt>
   101e8:	2800      	cmp	r0, #0
   101ea:	d000      	beq.n	101ee <_dtoa_r+0x13e>
   101ec:	e2b1      	b.n	10752 <_dtoa_r+0x6a2>
   101ee:	2301      	movs	r3, #1
   101f0:	9c03      	ldr	r4, [sp, #12]
   101f2:	930c      	str	r3, [sp, #48]	; 0x30
   101f4:	2c16      	cmp	r4, #22
   101f6:	d810      	bhi.n	1021a <_dtoa_r+0x16a>
   101f8:	49a1      	ldr	r1, [pc, #644]	; (10480 <_dtoa_r+0x3d0>)
   101fa:	00e3      	lsls	r3, r4, #3
   101fc:	18c9      	adds	r1, r1, r3
   101fe:	0032      	movs	r2, r6
   10200:	6808      	ldr	r0, [r1, #0]
   10202:	6849      	ldr	r1, [r1, #4]
   10204:	003b      	movs	r3, r7
   10206:	f7fa fd91 	bl	ad2c <__aeabi_dcmpgt>
   1020a:	2800      	cmp	r0, #0
   1020c:	d100      	bne.n	10210 <_dtoa_r+0x160>
   1020e:	e31d      	b.n	1084c <_dtoa_r+0x79c>
   10210:	0023      	movs	r3, r4
   10212:	3b01      	subs	r3, #1
   10214:	9303      	str	r3, [sp, #12]
   10216:	2300      	movs	r3, #0
   10218:	930c      	str	r3, [sp, #48]	; 0x30
   1021a:	464b      	mov	r3, r9
   1021c:	4642      	mov	r2, r8
   1021e:	1a9a      	subs	r2, r3, r2
   10220:	2300      	movs	r3, #0
   10222:	9306      	str	r3, [sp, #24]
   10224:	0013      	movs	r3, r2
   10226:	3b01      	subs	r3, #1
   10228:	9304      	str	r3, [sp, #16]
   1022a:	d500      	bpl.n	1022e <_dtoa_r+0x17e>
   1022c:	e2a1      	b.n	10772 <_dtoa_r+0x6c2>
   1022e:	9b03      	ldr	r3, [sp, #12]
   10230:	2b00      	cmp	r3, #0
   10232:	da00      	bge.n	10236 <_dtoa_r+0x186>
   10234:	e284      	b.n	10740 <_dtoa_r+0x690>
   10236:	469c      	mov	ip, r3
   10238:	930d      	str	r3, [sp, #52]	; 0x34
   1023a:	2300      	movs	r3, #0
   1023c:	9a04      	ldr	r2, [sp, #16]
   1023e:	4699      	mov	r9, r3
   10240:	0011      	movs	r1, r2
   10242:	4461      	add	r1, ip
   10244:	9104      	str	r1, [sp, #16]
   10246:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10248:	2b09      	cmp	r3, #9
   1024a:	d900      	bls.n	1024e <_dtoa_r+0x19e>
   1024c:	e18f      	b.n	1056e <_dtoa_r+0x4be>
   1024e:	2401      	movs	r4, #1
   10250:	2b05      	cmp	r3, #5
   10252:	dd02      	ble.n	1025a <_dtoa_r+0x1aa>
   10254:	2400      	movs	r4, #0
   10256:	3b04      	subs	r3, #4
   10258:	9322      	str	r3, [sp, #136]	; 0x88
   1025a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1025c:	2b03      	cmp	r3, #3
   1025e:	d101      	bne.n	10264 <_dtoa_r+0x1b4>
   10260:	f000 fcce 	bl	10c00 <_dtoa_r+0xb50>
   10264:	dc01      	bgt.n	1026a <_dtoa_r+0x1ba>
   10266:	f000 fc92 	bl	10b8e <_dtoa_r+0xade>
   1026a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1026c:	2b04      	cmp	r3, #4
   1026e:	d101      	bne.n	10274 <_dtoa_r+0x1c4>
   10270:	f000 fc40 	bl	10af4 <_dtoa_r+0xa44>
   10274:	2301      	movs	r3, #1
   10276:	930b      	str	r3, [sp, #44]	; 0x2c
   10278:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1027a:	2b05      	cmp	r3, #5
   1027c:	d001      	beq.n	10282 <_dtoa_r+0x1d2>
   1027e:	f000 fc8b 	bl	10b98 <_dtoa_r+0xae8>
   10282:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   10284:	9b03      	ldr	r3, [sp, #12]
   10286:	4694      	mov	ip, r2
   10288:	4463      	add	r3, ip
   1028a:	930e      	str	r3, [sp, #56]	; 0x38
   1028c:	3301      	adds	r3, #1
   1028e:	9307      	str	r3, [sp, #28]
   10290:	1e1d      	subs	r5, r3, #0
   10292:	dc01      	bgt.n	10298 <_dtoa_r+0x1e8>
   10294:	f000 fd49 	bl	10d2a <_dtoa_r+0xc7a>
   10298:	9b07      	ldr	r3, [sp, #28]
   1029a:	4698      	mov	r8, r3
   1029c:	2300      	movs	r3, #0
   1029e:	4652      	mov	r2, sl
   102a0:	2100      	movs	r1, #0
   102a2:	6453      	str	r3, [r2, #68]	; 0x44
   102a4:	2d17      	cmp	r5, #23
   102a6:	d90a      	bls.n	102be <_dtoa_r+0x20e>
   102a8:	2201      	movs	r2, #1
   102aa:	3304      	adds	r3, #4
   102ac:	005b      	lsls	r3, r3, #1
   102ae:	0018      	movs	r0, r3
   102b0:	3014      	adds	r0, #20
   102b2:	0011      	movs	r1, r2
   102b4:	3201      	adds	r2, #1
   102b6:	4285      	cmp	r5, r0
   102b8:	d2f8      	bcs.n	102ac <_dtoa_r+0x1fc>
   102ba:	4653      	mov	r3, sl
   102bc:	6459      	str	r1, [r3, #68]	; 0x44
   102be:	4650      	mov	r0, sl
   102c0:	f001 fc96 	bl	11bf0 <_Balloc>
   102c4:	4653      	mov	r3, sl
   102c6:	6418      	str	r0, [r3, #64]	; 0x40
   102c8:	4643      	mov	r3, r8
   102ca:	900a      	str	r0, [sp, #40]	; 0x28
   102cc:	2b0e      	cmp	r3, #14
   102ce:	d900      	bls.n	102d2 <_dtoa_r+0x222>
   102d0:	e161      	b.n	10596 <_dtoa_r+0x4e6>
   102d2:	2c00      	cmp	r4, #0
   102d4:	d100      	bne.n	102d8 <_dtoa_r+0x228>
   102d6:	e15e      	b.n	10596 <_dtoa_r+0x4e6>
   102d8:	9610      	str	r6, [sp, #64]	; 0x40
   102da:	9711      	str	r7, [sp, #68]	; 0x44
   102dc:	9e03      	ldr	r6, [sp, #12]
   102de:	2e00      	cmp	r6, #0
   102e0:	dc01      	bgt.n	102e6 <_dtoa_r+0x236>
   102e2:	f000 fd25 	bl	10d30 <_dtoa_r+0xc80>
   102e6:	0032      	movs	r2, r6
   102e8:	210f      	movs	r1, #15
   102ea:	4b65      	ldr	r3, [pc, #404]	; (10480 <_dtoa_r+0x3d0>)
   102ec:	400a      	ands	r2, r1
   102ee:	00d2      	lsls	r2, r2, #3
   102f0:	189b      	adds	r3, r3, r2
   102f2:	1136      	asrs	r6, r6, #4
   102f4:	681c      	ldr	r4, [r3, #0]
   102f6:	685d      	ldr	r5, [r3, #4]
   102f8:	06f3      	lsls	r3, r6, #27
   102fa:	d401      	bmi.n	10300 <_dtoa_r+0x250>
   102fc:	f000 fcca 	bl	10c94 <_dtoa_r+0xbe4>
   10300:	4b60      	ldr	r3, [pc, #384]	; (10484 <_dtoa_r+0x3d4>)
   10302:	400e      	ands	r6, r1
   10304:	6a1a      	ldr	r2, [r3, #32]
   10306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10308:	9810      	ldr	r0, [sp, #64]	; 0x40
   1030a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1030c:	f7f9 fb1a 	bl	9944 <__aeabi_ddiv>
   10310:	2303      	movs	r3, #3
   10312:	4698      	mov	r8, r3
   10314:	9008      	str	r0, [sp, #32]
   10316:	9109      	str	r1, [sp, #36]	; 0x24
   10318:	2e00      	cmp	r6, #0
   1031a:	d011      	beq.n	10340 <_dtoa_r+0x290>
   1031c:	4f59      	ldr	r7, [pc, #356]	; (10484 <_dtoa_r+0x3d4>)
   1031e:	2301      	movs	r3, #1
   10320:	4233      	tst	r3, r6
   10322:	d009      	beq.n	10338 <_dtoa_r+0x288>
   10324:	469c      	mov	ip, r3
   10326:	683a      	ldr	r2, [r7, #0]
   10328:	687b      	ldr	r3, [r7, #4]
   1032a:	0020      	movs	r0, r4
   1032c:	0029      	movs	r1, r5
   1032e:	44e0      	add	r8, ip
   10330:	f7f9 fe3c 	bl	9fac <__aeabi_dmul>
   10334:	0004      	movs	r4, r0
   10336:	000d      	movs	r5, r1
   10338:	1076      	asrs	r6, r6, #1
   1033a:	3708      	adds	r7, #8
   1033c:	2e00      	cmp	r6, #0
   1033e:	d1ee      	bne.n	1031e <_dtoa_r+0x26e>
   10340:	0022      	movs	r2, r4
   10342:	9808      	ldr	r0, [sp, #32]
   10344:	9909      	ldr	r1, [sp, #36]	; 0x24
   10346:	002b      	movs	r3, r5
   10348:	f7f9 fafc 	bl	9944 <__aeabi_ddiv>
   1034c:	0006      	movs	r6, r0
   1034e:	000f      	movs	r7, r1
   10350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10352:	2b00      	cmp	r3, #0
   10354:	d009      	beq.n	1036a <_dtoa_r+0x2ba>
   10356:	2200      	movs	r2, #0
   10358:	4b40      	ldr	r3, [pc, #256]	; (1045c <_dtoa_r+0x3ac>)
   1035a:	0030      	movs	r0, r6
   1035c:	0039      	movs	r1, r7
   1035e:	f7fa fcd1 	bl	ad04 <__aeabi_dcmplt>
   10362:	2800      	cmp	r0, #0
   10364:	d001      	beq.n	1036a <_dtoa_r+0x2ba>
   10366:	f000 fdc2 	bl	10eee <_dtoa_r+0xe3e>
   1036a:	4640      	mov	r0, r8
   1036c:	f7fa fbe8 	bl	ab40 <__aeabi_i2d>
   10370:	0032      	movs	r2, r6
   10372:	003b      	movs	r3, r7
   10374:	f7f9 fe1a 	bl	9fac <__aeabi_dmul>
   10378:	2200      	movs	r2, #0
   1037a:	4b43      	ldr	r3, [pc, #268]	; (10488 <_dtoa_r+0x3d8>)
   1037c:	f004 fccc 	bl	14d18 <__aeabi_dadd>
   10380:	4a42      	ldr	r2, [pc, #264]	; (1048c <_dtoa_r+0x3dc>)
   10382:	000b      	movs	r3, r1
   10384:	4694      	mov	ip, r2
   10386:	4463      	add	r3, ip
   10388:	9008      	str	r0, [sp, #32]
   1038a:	9109      	str	r1, [sp, #36]	; 0x24
   1038c:	9309      	str	r3, [sp, #36]	; 0x24
   1038e:	9b07      	ldr	r3, [sp, #28]
   10390:	2b00      	cmp	r3, #0
   10392:	d101      	bne.n	10398 <_dtoa_r+0x2e8>
   10394:	f000 fc50 	bl	10c38 <_dtoa_r+0xb88>
   10398:	9b03      	ldr	r3, [sp, #12]
   1039a:	9313      	str	r3, [sp, #76]	; 0x4c
   1039c:	9b07      	ldr	r3, [sp, #28]
   1039e:	9312      	str	r3, [sp, #72]	; 0x48
   103a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   103a2:	2b00      	cmp	r3, #0
   103a4:	d101      	bne.n	103aa <_dtoa_r+0x2fa>
   103a6:	f000 fd1d 	bl	10de4 <_dtoa_r+0xd34>
   103aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   103ac:	2000      	movs	r0, #0
   103ae:	1e5a      	subs	r2, r3, #1
   103b0:	4b33      	ldr	r3, [pc, #204]	; (10480 <_dtoa_r+0x3d0>)
   103b2:	00d2      	lsls	r2, r2, #3
   103b4:	189b      	adds	r3, r3, r2
   103b6:	681a      	ldr	r2, [r3, #0]
   103b8:	685b      	ldr	r3, [r3, #4]
   103ba:	4935      	ldr	r1, [pc, #212]	; (10490 <_dtoa_r+0x3e0>)
   103bc:	f7f9 fac2 	bl	9944 <__aeabi_ddiv>
   103c0:	9a08      	ldr	r2, [sp, #32]
   103c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103c4:	f7fa f872 	bl	a4ac <__aeabi_dsub>
   103c8:	9008      	str	r0, [sp, #32]
   103ca:	9109      	str	r1, [sp, #36]	; 0x24
   103cc:	0039      	movs	r1, r7
   103ce:	0030      	movs	r0, r6
   103d0:	f7fa fb82 	bl	aad8 <__aeabi_d2iz>
   103d4:	0004      	movs	r4, r0
   103d6:	f7fa fbb3 	bl	ab40 <__aeabi_i2d>
   103da:	0002      	movs	r2, r0
   103dc:	000b      	movs	r3, r1
   103de:	0030      	movs	r0, r6
   103e0:	0039      	movs	r1, r7
   103e2:	f7fa f863 	bl	a4ac <__aeabi_dsub>
   103e6:	0005      	movs	r5, r0
   103e8:	000e      	movs	r6, r1
   103ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103ec:	3430      	adds	r4, #48	; 0x30
   103ee:	1c51      	adds	r1, r2, #1
   103f0:	b2e7      	uxtb	r7, r4
   103f2:	9114      	str	r1, [sp, #80]	; 0x50
   103f4:	7017      	strb	r7, [r2, #0]
   103f6:	0033      	movs	r3, r6
   103f8:	9808      	ldr	r0, [sp, #32]
   103fa:	9909      	ldr	r1, [sp, #36]	; 0x24
   103fc:	002a      	movs	r2, r5
   103fe:	f7fa fc95 	bl	ad2c <__aeabi_dcmpgt>
   10402:	2800      	cmp	r0, #0
   10404:	d001      	beq.n	1040a <_dtoa_r+0x35a>
   10406:	f000 fdfe 	bl	11006 <_dtoa_r+0xf56>
   1040a:	002a      	movs	r2, r5
   1040c:	0033      	movs	r3, r6
   1040e:	2000      	movs	r0, #0
   10410:	4912      	ldr	r1, [pc, #72]	; (1045c <_dtoa_r+0x3ac>)
   10412:	f7fa f84b 	bl	a4ac <__aeabi_dsub>
   10416:	0002      	movs	r2, r0
   10418:	000b      	movs	r3, r1
   1041a:	9808      	ldr	r0, [sp, #32]
   1041c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1041e:	f7fa fc85 	bl	ad2c <__aeabi_dcmpgt>
   10422:	2800      	cmp	r0, #0
   10424:	d001      	beq.n	1042a <_dtoa_r+0x37a>
   10426:	f000 fde7 	bl	10ff8 <_dtoa_r+0xf48>
   1042a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1042c:	2b01      	cmp	r3, #1
   1042e:	d101      	bne.n	10434 <_dtoa_r+0x384>
   10430:	f000 fc78 	bl	10d24 <_dtoa_r+0xc74>
   10434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10436:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10438:	4694      	mov	ip, r2
   1043a:	4463      	add	r3, ip
   1043c:	4698      	mov	r8, r3
   1043e:	464b      	mov	r3, r9
   10440:	9312      	str	r3, [sp, #72]	; 0x48
   10442:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10444:	4699      	mov	r9, r3
   10446:	e038      	b.n	104ba <_dtoa_r+0x40a>
   10448:	7ff00000 	.word	0x7ff00000
   1044c:	00018ce1 	.word	0x00018ce1
   10450:	0000270f 	.word	0x0000270f
   10454:	0001930c 	.word	0x0001930c
   10458:	00019318 	.word	0x00019318
   1045c:	3ff00000 	.word	0x3ff00000
   10460:	fffffc01 	.word	0xfffffc01
   10464:	3ff80000 	.word	0x3ff80000
   10468:	636f4361 	.word	0x636f4361
   1046c:	3fd287a7 	.word	0x3fd287a7
   10470:	8b60c8b3 	.word	0x8b60c8b3
   10474:	3fc68a28 	.word	0x3fc68a28
   10478:	509f79fb 	.word	0x509f79fb
   1047c:	3fd34413 	.word	0x3fd34413
   10480:	00019358 	.word	0x00019358
   10484:	00019330 	.word	0x00019330
   10488:	401c0000 	.word	0x401c0000
   1048c:	fcc00000 	.word	0xfcc00000
   10490:	3fe00000 	.word	0x3fe00000
   10494:	002a      	movs	r2, r5
   10496:	0033      	movs	r3, r6
   10498:	2000      	movs	r0, #0
   1049a:	49b9      	ldr	r1, [pc, #740]	; (10780 <_dtoa_r+0x6d0>)
   1049c:	f7fa f806 	bl	a4ac <__aeabi_dsub>
   104a0:	9a08      	ldr	r2, [sp, #32]
   104a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   104a4:	f7fa fc2e 	bl	ad04 <__aeabi_dcmplt>
   104a8:	2800      	cmp	r0, #0
   104aa:	d001      	beq.n	104b0 <_dtoa_r+0x400>
   104ac:	f000 fd74 	bl	10f98 <_dtoa_r+0xee8>
   104b0:	46a1      	mov	r9, r4
   104b2:	4544      	cmp	r4, r8
   104b4:	d101      	bne.n	104ba <_dtoa_r+0x40a>
   104b6:	f000 fc33 	bl	10d20 <_dtoa_r+0xc70>
   104ba:	9808      	ldr	r0, [sp, #32]
   104bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   104be:	2200      	movs	r2, #0
   104c0:	4bb0      	ldr	r3, [pc, #704]	; (10784 <_dtoa_r+0x6d4>)
   104c2:	f7f9 fd73 	bl	9fac <__aeabi_dmul>
   104c6:	2200      	movs	r2, #0
   104c8:	4bae      	ldr	r3, [pc, #696]	; (10784 <_dtoa_r+0x6d4>)
   104ca:	9008      	str	r0, [sp, #32]
   104cc:	9109      	str	r1, [sp, #36]	; 0x24
   104ce:	0028      	movs	r0, r5
   104d0:	0031      	movs	r1, r6
   104d2:	f7f9 fd6b 	bl	9fac <__aeabi_dmul>
   104d6:	000d      	movs	r5, r1
   104d8:	0004      	movs	r4, r0
   104da:	f7fa fafd 	bl	aad8 <__aeabi_d2iz>
   104de:	0007      	movs	r7, r0
   104e0:	f7fa fb2e 	bl	ab40 <__aeabi_i2d>
   104e4:	0002      	movs	r2, r0
   104e6:	000b      	movs	r3, r1
   104e8:	0020      	movs	r0, r4
   104ea:	0029      	movs	r1, r5
   104ec:	f7f9 ffde 	bl	a4ac <__aeabi_dsub>
   104f0:	464b      	mov	r3, r9
   104f2:	3730      	adds	r7, #48	; 0x30
   104f4:	b2ff      	uxtb	r7, r7
   104f6:	1c5c      	adds	r4, r3, #1
   104f8:	701f      	strb	r7, [r3, #0]
   104fa:	9a08      	ldr	r2, [sp, #32]
   104fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   104fe:	0005      	movs	r5, r0
   10500:	000e      	movs	r6, r1
   10502:	f7fa fbff 	bl	ad04 <__aeabi_dcmplt>
   10506:	2800      	cmp	r0, #0
   10508:	d0c4      	beq.n	10494 <_dtoa_r+0x3e4>
   1050a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1050c:	9303      	str	r3, [sp, #12]
   1050e:	4659      	mov	r1, fp
   10510:	4650      	mov	r0, sl
   10512:	f001 fb95 	bl	11c40 <_Bfree>
   10516:	2300      	movs	r3, #0
   10518:	7023      	strb	r3, [r4, #0]
   1051a:	9b03      	ldr	r3, [sp, #12]
   1051c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1051e:	3301      	adds	r3, #1
   10520:	6013      	str	r3, [r2, #0]
   10522:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10524:	2b00      	cmp	r3, #0
   10526:	d100      	bne.n	1052a <_dtoa_r+0x47a>
   10528:	e3a8      	b.n	10c7c <_dtoa_r+0xbcc>
   1052a:	601c      	str	r4, [r3, #0]
   1052c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1052e:	e5f4      	b.n	1011a <_dtoa_r+0x6a>
   10530:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10532:	4699      	mov	r9, r3
   10534:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10536:	444b      	add	r3, r9
   10538:	001c      	movs	r4, r3
   1053a:	4b93      	ldr	r3, [pc, #588]	; (10788 <_dtoa_r+0x6d8>)
   1053c:	18e3      	adds	r3, r4, r3
   1053e:	2b20      	cmp	r3, #32
   10540:	dc00      	bgt.n	10544 <_dtoa_r+0x494>
   10542:	e17e      	b.n	10842 <_dtoa_r+0x792>
   10544:	0031      	movs	r1, r6
   10546:	4a91      	ldr	r2, [pc, #580]	; (1078c <_dtoa_r+0x6dc>)
   10548:	4640      	mov	r0, r8
   1054a:	18a2      	adds	r2, r4, r2
   1054c:	40d1      	lsrs	r1, r2
   1054e:	000a      	movs	r2, r1
   10550:	2140      	movs	r1, #64	; 0x40
   10552:	1acb      	subs	r3, r1, r3
   10554:	4098      	lsls	r0, r3
   10556:	4310      	orrs	r0, r2
   10558:	f7fa fb34 	bl	abc4 <__aeabi_ui2d>
   1055c:	1e63      	subs	r3, r4, #1
   1055e:	4698      	mov	r8, r3
   10560:	2301      	movs	r3, #1
   10562:	4d8b      	ldr	r5, [pc, #556]	; (10790 <_dtoa_r+0x6e0>)
   10564:	930f      	str	r3, [sp, #60]	; 0x3c
   10566:	1949      	adds	r1, r1, r5
   10568:	e618      	b.n	1019c <_dtoa_r+0xec>
   1056a:	488a      	ldr	r0, [pc, #552]	; (10794 <_dtoa_r+0x6e4>)
   1056c:	e5d5      	b.n	1011a <_dtoa_r+0x6a>
   1056e:	2300      	movs	r3, #0
   10570:	4652      	mov	r2, sl
   10572:	2100      	movs	r1, #0
   10574:	6453      	str	r3, [r2, #68]	; 0x44
   10576:	4650      	mov	r0, sl
   10578:	f001 fb3a 	bl	11bf0 <_Balloc>
   1057c:	4653      	mov	r3, sl
   1057e:	6418      	str	r0, [r3, #64]	; 0x40
   10580:	2301      	movs	r3, #1
   10582:	425b      	negs	r3, r3
   10584:	9307      	str	r3, [sp, #28]
   10586:	930e      	str	r3, [sp, #56]	; 0x38
   10588:	3302      	adds	r3, #2
   1058a:	2200      	movs	r2, #0
   1058c:	930b      	str	r3, [sp, #44]	; 0x2c
   1058e:	2300      	movs	r3, #0
   10590:	900a      	str	r0, [sp, #40]	; 0x28
   10592:	9223      	str	r2, [sp, #140]	; 0x8c
   10594:	9322      	str	r3, [sp, #136]	; 0x88
   10596:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10598:	2b00      	cmp	r3, #0
   1059a:	da00      	bge.n	1059e <_dtoa_r+0x4ee>
   1059c:	e0ab      	b.n	106f6 <_dtoa_r+0x646>
   1059e:	9a03      	ldr	r2, [sp, #12]
   105a0:	2a0e      	cmp	r2, #14
   105a2:	dd00      	ble.n	105a6 <_dtoa_r+0x4f6>
   105a4:	e0a7      	b.n	106f6 <_dtoa_r+0x646>
   105a6:	4b7c      	ldr	r3, [pc, #496]	; (10798 <_dtoa_r+0x6e8>)
   105a8:	00d2      	lsls	r2, r2, #3
   105aa:	189b      	adds	r3, r3, r2
   105ac:	685c      	ldr	r4, [r3, #4]
   105ae:	681b      	ldr	r3, [r3, #0]
   105b0:	9304      	str	r3, [sp, #16]
   105b2:	9405      	str	r4, [sp, #20]
   105b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   105b6:	2b00      	cmp	r3, #0
   105b8:	da00      	bge.n	105bc <_dtoa_r+0x50c>
   105ba:	e2a7      	b.n	10b0c <_dtoa_r+0xa5c>
   105bc:	9c04      	ldr	r4, [sp, #16]
   105be:	9d05      	ldr	r5, [sp, #20]
   105c0:	0030      	movs	r0, r6
   105c2:	0022      	movs	r2, r4
   105c4:	002b      	movs	r3, r5
   105c6:	0039      	movs	r1, r7
   105c8:	f7f9 f9bc 	bl	9944 <__aeabi_ddiv>
   105cc:	f7fa fa84 	bl	aad8 <__aeabi_d2iz>
   105d0:	4680      	mov	r8, r0
   105d2:	f7fa fab5 	bl	ab40 <__aeabi_i2d>
   105d6:	0022      	movs	r2, r4
   105d8:	002b      	movs	r3, r5
   105da:	f7f9 fce7 	bl	9fac <__aeabi_dmul>
   105de:	0002      	movs	r2, r0
   105e0:	000b      	movs	r3, r1
   105e2:	0030      	movs	r0, r6
   105e4:	0039      	movs	r1, r7
   105e6:	f7f9 ff61 	bl	a4ac <__aeabi_dsub>
   105ea:	4643      	mov	r3, r8
   105ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   105ee:	3330      	adds	r3, #48	; 0x30
   105f0:	7013      	strb	r3, [r2, #0]
   105f2:	9b07      	ldr	r3, [sp, #28]
   105f4:	0006      	movs	r6, r0
   105f6:	000f      	movs	r7, r1
   105f8:	1c54      	adds	r4, r2, #1
   105fa:	2b01      	cmp	r3, #1
   105fc:	d04e      	beq.n	1069c <_dtoa_r+0x5ec>
   105fe:	2200      	movs	r2, #0
   10600:	4b60      	ldr	r3, [pc, #384]	; (10784 <_dtoa_r+0x6d4>)
   10602:	f7f9 fcd3 	bl	9fac <__aeabi_dmul>
   10606:	2200      	movs	r2, #0
   10608:	2300      	movs	r3, #0
   1060a:	0006      	movs	r6, r0
   1060c:	000f      	movs	r7, r1
   1060e:	f7fa fb73 	bl	acf8 <__aeabi_dcmpeq>
   10612:	2800      	cmp	r0, #0
   10614:	d000      	beq.n	10618 <_dtoa_r+0x568>
   10616:	e77a      	b.n	1050e <_dtoa_r+0x45e>
   10618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1061a:	9a07      	ldr	r2, [sp, #28]
   1061c:	1c9d      	adds	r5, r3, #2
   1061e:	469c      	mov	ip, r3
   10620:	465b      	mov	r3, fp
   10622:	9306      	str	r3, [sp, #24]
   10624:	4653      	mov	r3, sl
   10626:	4462      	add	r2, ip
   10628:	46aa      	mov	sl, r5
   1062a:	9c04      	ldr	r4, [sp, #16]
   1062c:	9d05      	ldr	r5, [sp, #20]
   1062e:	4691      	mov	r9, r2
   10630:	9307      	str	r3, [sp, #28]
   10632:	e00f      	b.n	10654 <_dtoa_r+0x5a4>
   10634:	2200      	movs	r2, #0
   10636:	4b53      	ldr	r3, [pc, #332]	; (10784 <_dtoa_r+0x6d4>)
   10638:	f7f9 fcb8 	bl	9fac <__aeabi_dmul>
   1063c:	2301      	movs	r3, #1
   1063e:	469c      	mov	ip, r3
   10640:	2200      	movs	r2, #0
   10642:	2300      	movs	r3, #0
   10644:	0006      	movs	r6, r0
   10646:	000f      	movs	r7, r1
   10648:	44e2      	add	sl, ip
   1064a:	f7fa fb55 	bl	acf8 <__aeabi_dcmpeq>
   1064e:	2800      	cmp	r0, #0
   10650:	d000      	beq.n	10654 <_dtoa_r+0x5a4>
   10652:	e2d9      	b.n	10c08 <_dtoa_r+0xb58>
   10654:	0022      	movs	r2, r4
   10656:	002b      	movs	r3, r5
   10658:	0030      	movs	r0, r6
   1065a:	0039      	movs	r1, r7
   1065c:	f7f9 f972 	bl	9944 <__aeabi_ddiv>
   10660:	f7fa fa3a 	bl	aad8 <__aeabi_d2iz>
   10664:	4680      	mov	r8, r0
   10666:	f7fa fa6b 	bl	ab40 <__aeabi_i2d>
   1066a:	0022      	movs	r2, r4
   1066c:	002b      	movs	r3, r5
   1066e:	f7f9 fc9d 	bl	9fac <__aeabi_dmul>
   10672:	0002      	movs	r2, r0
   10674:	000b      	movs	r3, r1
   10676:	0030      	movs	r0, r6
   10678:	0039      	movs	r1, r7
   1067a:	f7f9 ff17 	bl	a4ac <__aeabi_dsub>
   1067e:	4653      	mov	r3, sl
   10680:	4642      	mov	r2, r8
   10682:	3b01      	subs	r3, #1
   10684:	3230      	adds	r2, #48	; 0x30
   10686:	0006      	movs	r6, r0
   10688:	000f      	movs	r7, r1
   1068a:	46d3      	mov	fp, sl
   1068c:	701a      	strb	r2, [r3, #0]
   1068e:	45d1      	cmp	r9, sl
   10690:	d1d0      	bne.n	10634 <_dtoa_r+0x584>
   10692:	9b06      	ldr	r3, [sp, #24]
   10694:	4654      	mov	r4, sl
   10696:	469b      	mov	fp, r3
   10698:	9b07      	ldr	r3, [sp, #28]
   1069a:	469a      	mov	sl, r3
   1069c:	0032      	movs	r2, r6
   1069e:	003b      	movs	r3, r7
   106a0:	0030      	movs	r0, r6
   106a2:	0039      	movs	r1, r7
   106a4:	f004 fb38 	bl	14d18 <__aeabi_dadd>
   106a8:	0006      	movs	r6, r0
   106aa:	000f      	movs	r7, r1
   106ac:	0002      	movs	r2, r0
   106ae:	000b      	movs	r3, r1
   106b0:	9804      	ldr	r0, [sp, #16]
   106b2:	9905      	ldr	r1, [sp, #20]
   106b4:	f7fa fb26 	bl	ad04 <__aeabi_dcmplt>
   106b8:	2800      	cmp	r0, #0
   106ba:	d10c      	bne.n	106d6 <_dtoa_r+0x626>
   106bc:	9804      	ldr	r0, [sp, #16]
   106be:	9905      	ldr	r1, [sp, #20]
   106c0:	0032      	movs	r2, r6
   106c2:	003b      	movs	r3, r7
   106c4:	f7fa fb18 	bl	acf8 <__aeabi_dcmpeq>
   106c8:	2800      	cmp	r0, #0
   106ca:	d100      	bne.n	106ce <_dtoa_r+0x61e>
   106cc:	e71f      	b.n	1050e <_dtoa_r+0x45e>
   106ce:	4643      	mov	r3, r8
   106d0:	07db      	lsls	r3, r3, #31
   106d2:	d400      	bmi.n	106d6 <_dtoa_r+0x626>
   106d4:	e71b      	b.n	1050e <_dtoa_r+0x45e>
   106d6:	1e65      	subs	r5, r4, #1
   106d8:	782f      	ldrb	r7, [r5, #0]
   106da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   106dc:	e006      	b.n	106ec <_dtoa_r+0x63c>
   106de:	429d      	cmp	r5, r3
   106e0:	d100      	bne.n	106e4 <_dtoa_r+0x634>
   106e2:	e351      	b.n	10d88 <_dtoa_r+0xcd8>
   106e4:	3c02      	subs	r4, #2
   106e6:	7827      	ldrb	r7, [r4, #0]
   106e8:	002c      	movs	r4, r5
   106ea:	3d01      	subs	r5, #1
   106ec:	2f39      	cmp	r7, #57	; 0x39
   106ee:	d0f6      	beq.n	106de <_dtoa_r+0x62e>
   106f0:	3701      	adds	r7, #1
   106f2:	702f      	strb	r7, [r5, #0]
   106f4:	e70b      	b.n	1050e <_dtoa_r+0x45e>
   106f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   106f8:	2a00      	cmp	r2, #0
   106fa:	d04f      	beq.n	1079c <_dtoa_r+0x6ec>
   106fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   106fe:	2a01      	cmp	r2, #1
   10700:	dc00      	bgt.n	10704 <_dtoa_r+0x654>
   10702:	e22c      	b.n	10b5e <_dtoa_r+0xaae>
   10704:	9b07      	ldr	r3, [sp, #28]
   10706:	1e5c      	subs	r4, r3, #1
   10708:	464b      	mov	r3, r9
   1070a:	45a1      	cmp	r9, r4
   1070c:	da00      	bge.n	10710 <_dtoa_r+0x660>
   1070e:	e2b8      	b.n	10c82 <_dtoa_r+0xbd2>
   10710:	1b1c      	subs	r4, r3, r4
   10712:	9b07      	ldr	r3, [sp, #28]
   10714:	2b00      	cmp	r3, #0
   10716:	da00      	bge.n	1071a <_dtoa_r+0x66a>
   10718:	e3d4      	b.n	10ec4 <_dtoa_r+0xe14>
   1071a:	9b06      	ldr	r3, [sp, #24]
   1071c:	9308      	str	r3, [sp, #32]
   1071e:	9b07      	ldr	r3, [sp, #28]
   10720:	9a06      	ldr	r2, [sp, #24]
   10722:	2101      	movs	r1, #1
   10724:	4694      	mov	ip, r2
   10726:	449c      	add	ip, r3
   10728:	4662      	mov	r2, ip
   1072a:	9206      	str	r2, [sp, #24]
   1072c:	9a04      	ldr	r2, [sp, #16]
   1072e:	4650      	mov	r0, sl
   10730:	4694      	mov	ip, r2
   10732:	449c      	add	ip, r3
   10734:	4663      	mov	r3, ip
   10736:	9304      	str	r3, [sp, #16]
   10738:	f001 fb64 	bl	11e04 <__i2b>
   1073c:	4680      	mov	r8, r0
   1073e:	e032      	b.n	107a6 <_dtoa_r+0x6f6>
   10740:	9a06      	ldr	r2, [sp, #24]
   10742:	9b03      	ldr	r3, [sp, #12]
   10744:	1ad2      	subs	r2, r2, r3
   10746:	425b      	negs	r3, r3
   10748:	4699      	mov	r9, r3
   1074a:	2300      	movs	r3, #0
   1074c:	9206      	str	r2, [sp, #24]
   1074e:	930d      	str	r3, [sp, #52]	; 0x34
   10750:	e579      	b.n	10246 <_dtoa_r+0x196>
   10752:	9803      	ldr	r0, [sp, #12]
   10754:	f7fa f9f4 	bl	ab40 <__aeabi_i2d>
   10758:	000b      	movs	r3, r1
   1075a:	0002      	movs	r2, r0
   1075c:	0029      	movs	r1, r5
   1075e:	0020      	movs	r0, r4
   10760:	f7fa faca 	bl	acf8 <__aeabi_dcmpeq>
   10764:	0002      	movs	r2, r0
   10766:	4250      	negs	r0, r2
   10768:	4150      	adcs	r0, r2
   1076a:	9b03      	ldr	r3, [sp, #12]
   1076c:	1a1b      	subs	r3, r3, r0
   1076e:	9303      	str	r3, [sp, #12]
   10770:	e53d      	b.n	101ee <_dtoa_r+0x13e>
   10772:	2301      	movs	r3, #1
   10774:	1a9b      	subs	r3, r3, r2
   10776:	9306      	str	r3, [sp, #24]
   10778:	2300      	movs	r3, #0
   1077a:	9304      	str	r3, [sp, #16]
   1077c:	e557      	b.n	1022e <_dtoa_r+0x17e>
   1077e:	46c0      	nop			; (mov r8, r8)
   10780:	3ff00000 	.word	0x3ff00000
   10784:	40240000 	.word	0x40240000
   10788:	00000432 	.word	0x00000432
   1078c:	00000412 	.word	0x00000412
   10790:	fe100000 	.word	0xfe100000
   10794:	00018ce0 	.word	0x00018ce0
   10798:	00019358 	.word	0x00019358
   1079c:	9b06      	ldr	r3, [sp, #24]
   1079e:	464c      	mov	r4, r9
   107a0:	9308      	str	r3, [sp, #32]
   107a2:	2300      	movs	r3, #0
   107a4:	4698      	mov	r8, r3
   107a6:	9908      	ldr	r1, [sp, #32]
   107a8:	1e0b      	subs	r3, r1, #0
   107aa:	dd0e      	ble.n	107ca <_dtoa_r+0x71a>
   107ac:	9a04      	ldr	r2, [sp, #16]
   107ae:	2a00      	cmp	r2, #0
   107b0:	dd0b      	ble.n	107ca <_dtoa_r+0x71a>
   107b2:	4293      	cmp	r3, r2
   107b4:	dd00      	ble.n	107b8 <_dtoa_r+0x708>
   107b6:	e187      	b.n	10ac8 <_dtoa_r+0xa18>
   107b8:	9a06      	ldr	r2, [sp, #24]
   107ba:	1ad2      	subs	r2, r2, r3
   107bc:	9206      	str	r2, [sp, #24]
   107be:	9a08      	ldr	r2, [sp, #32]
   107c0:	1ad2      	subs	r2, r2, r3
   107c2:	9208      	str	r2, [sp, #32]
   107c4:	9a04      	ldr	r2, [sp, #16]
   107c6:	1ad3      	subs	r3, r2, r3
   107c8:	9304      	str	r3, [sp, #16]
   107ca:	464b      	mov	r3, r9
   107cc:	2b00      	cmp	r3, #0
   107ce:	d01a      	beq.n	10806 <_dtoa_r+0x756>
   107d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   107d2:	2b00      	cmp	r3, #0
   107d4:	d100      	bne.n	107d8 <_dtoa_r+0x728>
   107d6:	e1bb      	b.n	10b50 <_dtoa_r+0xaa0>
   107d8:	2c00      	cmp	r4, #0
   107da:	dd10      	ble.n	107fe <_dtoa_r+0x74e>
   107dc:	4641      	mov	r1, r8
   107de:	0022      	movs	r2, r4
   107e0:	4650      	mov	r0, sl
   107e2:	f001 fbc3 	bl	11f6c <__pow5mult>
   107e6:	465a      	mov	r2, fp
   107e8:	0001      	movs	r1, r0
   107ea:	4680      	mov	r8, r0
   107ec:	4650      	mov	r0, sl
   107ee:	f001 fb13 	bl	11e18 <__multiply>
   107f2:	0005      	movs	r5, r0
   107f4:	4659      	mov	r1, fp
   107f6:	4650      	mov	r0, sl
   107f8:	f001 fa22 	bl	11c40 <_Bfree>
   107fc:	46ab      	mov	fp, r5
   107fe:	464b      	mov	r3, r9
   10800:	1b1a      	subs	r2, r3, r4
   10802:	d000      	beq.n	10806 <_dtoa_r+0x756>
   10804:	e1a5      	b.n	10b52 <_dtoa_r+0xaa2>
   10806:	2101      	movs	r1, #1
   10808:	4650      	mov	r0, sl
   1080a:	f001 fafb 	bl	11e04 <__i2b>
   1080e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10810:	4681      	mov	r9, r0
   10812:	2b00      	cmp	r3, #0
   10814:	dd1d      	ble.n	10852 <_dtoa_r+0x7a2>
   10816:	001a      	movs	r2, r3
   10818:	0001      	movs	r1, r0
   1081a:	4650      	mov	r0, sl
   1081c:	f001 fba6 	bl	11f6c <__pow5mult>
   10820:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10822:	4681      	mov	r9, r0
   10824:	2b01      	cmp	r3, #1
   10826:	dc00      	bgt.n	1082a <_dtoa_r+0x77a>
   10828:	e150      	b.n	10acc <_dtoa_r+0xa1c>
   1082a:	2400      	movs	r4, #0
   1082c:	464b      	mov	r3, r9
   1082e:	691b      	ldr	r3, [r3, #16]
   10830:	3303      	adds	r3, #3
   10832:	009b      	lsls	r3, r3, #2
   10834:	444b      	add	r3, r9
   10836:	6858      	ldr	r0, [r3, #4]
   10838:	f001 fa9c 	bl	11d74 <__hi0bits>
   1083c:	2320      	movs	r3, #32
   1083e:	1a1b      	subs	r3, r3, r0
   10840:	e010      	b.n	10864 <_dtoa_r+0x7b4>
   10842:	2220      	movs	r2, #32
   10844:	0030      	movs	r0, r6
   10846:	1ad3      	subs	r3, r2, r3
   10848:	4098      	lsls	r0, r3
   1084a:	e685      	b.n	10558 <_dtoa_r+0x4a8>
   1084c:	2300      	movs	r3, #0
   1084e:	930c      	str	r3, [sp, #48]	; 0x30
   10850:	e4e3      	b.n	1021a <_dtoa_r+0x16a>
   10852:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10854:	2400      	movs	r4, #0
   10856:	2b01      	cmp	r3, #1
   10858:	dc00      	bgt.n	1085c <_dtoa_r+0x7ac>
   1085a:	e18b      	b.n	10b74 <_dtoa_r+0xac4>
   1085c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1085e:	2301      	movs	r3, #1
   10860:	2a00      	cmp	r2, #0
   10862:	d1e3      	bne.n	1082c <_dtoa_r+0x77c>
   10864:	9904      	ldr	r1, [sp, #16]
   10866:	201f      	movs	r0, #31
   10868:	468c      	mov	ip, r1
   1086a:	4463      	add	r3, ip
   1086c:	4018      	ands	r0, r3
   1086e:	d100      	bne.n	10872 <_dtoa_r+0x7c2>
   10870:	e0ae      	b.n	109d0 <_dtoa_r+0x920>
   10872:	2320      	movs	r3, #32
   10874:	1a1b      	subs	r3, r3, r0
   10876:	2b04      	cmp	r3, #4
   10878:	dc00      	bgt.n	1087c <_dtoa_r+0x7cc>
   1087a:	e3cc      	b.n	11016 <_dtoa_r+0xf66>
   1087c:	231c      	movs	r3, #28
   1087e:	1a18      	subs	r0, r3, r0
   10880:	9b06      	ldr	r3, [sp, #24]
   10882:	469c      	mov	ip, r3
   10884:	4484      	add	ip, r0
   10886:	4663      	mov	r3, ip
   10888:	9306      	str	r3, [sp, #24]
   1088a:	9b08      	ldr	r3, [sp, #32]
   1088c:	469c      	mov	ip, r3
   1088e:	4484      	add	ip, r0
   10890:	4663      	mov	r3, ip
   10892:	468c      	mov	ip, r1
   10894:	4484      	add	ip, r0
   10896:	9308      	str	r3, [sp, #32]
   10898:	4663      	mov	r3, ip
   1089a:	9304      	str	r3, [sp, #16]
   1089c:	9b06      	ldr	r3, [sp, #24]
   1089e:	2b00      	cmp	r3, #0
   108a0:	dd05      	ble.n	108ae <_dtoa_r+0x7fe>
   108a2:	4659      	mov	r1, fp
   108a4:	001a      	movs	r2, r3
   108a6:	4650      	mov	r0, sl
   108a8:	f001 fbc0 	bl	1202c <__lshift>
   108ac:	4683      	mov	fp, r0
   108ae:	9b04      	ldr	r3, [sp, #16]
   108b0:	2b00      	cmp	r3, #0
   108b2:	dd05      	ble.n	108c0 <_dtoa_r+0x810>
   108b4:	4649      	mov	r1, r9
   108b6:	001a      	movs	r2, r3
   108b8:	4650      	mov	r0, sl
   108ba:	f001 fbb7 	bl	1202c <__lshift>
   108be:	4681      	mov	r9, r0
   108c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   108c2:	2b00      	cmp	r3, #0
   108c4:	d000      	beq.n	108c8 <_dtoa_r+0x818>
   108c6:	e094      	b.n	109f2 <_dtoa_r+0x942>
   108c8:	9b07      	ldr	r3, [sp, #28]
   108ca:	2b00      	cmp	r3, #0
   108cc:	dc00      	bgt.n	108d0 <_dtoa_r+0x820>
   108ce:	e175      	b.n	10bbc <_dtoa_r+0xb0c>
   108d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   108d2:	2b00      	cmp	r3, #0
   108d4:	d100      	bne.n	108d8 <_dtoa_r+0x828>
   108d6:	e0a6      	b.n	10a26 <_dtoa_r+0x976>
   108d8:	9b08      	ldr	r3, [sp, #32]
   108da:	2b00      	cmp	r3, #0
   108dc:	dd05      	ble.n	108ea <_dtoa_r+0x83a>
   108de:	4641      	mov	r1, r8
   108e0:	001a      	movs	r2, r3
   108e2:	4650      	mov	r0, sl
   108e4:	f001 fba2 	bl	1202c <__lshift>
   108e8:	4680      	mov	r8, r0
   108ea:	4643      	mov	r3, r8
   108ec:	930c      	str	r3, [sp, #48]	; 0x30
   108ee:	2c00      	cmp	r4, #0
   108f0:	d000      	beq.n	108f4 <_dtoa_r+0x844>
   108f2:	e250      	b.n	10d96 <_dtoa_r+0xce6>
   108f4:	9c07      	ldr	r4, [sp, #28]
   108f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   108f8:	3c01      	subs	r4, #1
   108fa:	0023      	movs	r3, r4
   108fc:	4694      	mov	ip, r2
   108fe:	4463      	add	r3, ip
   10900:	9308      	str	r3, [sp, #32]
   10902:	2301      	movs	r3, #1
   10904:	4033      	ands	r3, r6
   10906:	9307      	str	r3, [sp, #28]
   10908:	464b      	mov	r3, r9
   1090a:	9306      	str	r3, [sp, #24]
   1090c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1090e:	4657      	mov	r7, sl
   10910:	4645      	mov	r5, r8
   10912:	465e      	mov	r6, fp
   10914:	4692      	mov	sl, r2
   10916:	4698      	mov	r8, r3
   10918:	9b06      	ldr	r3, [sp, #24]
   1091a:	0030      	movs	r0, r6
   1091c:	0019      	movs	r1, r3
   1091e:	4699      	mov	r9, r3
   10920:	f7ff fb1c 	bl	ff5c <quorem>
   10924:	0003      	movs	r3, r0
   10926:	900b      	str	r0, [sp, #44]	; 0x2c
   10928:	3330      	adds	r3, #48	; 0x30
   1092a:	0029      	movs	r1, r5
   1092c:	0030      	movs	r0, r6
   1092e:	9304      	str	r3, [sp, #16]
   10930:	f001 fbdc 	bl	120ec <__mcmp>
   10934:	4649      	mov	r1, r9
   10936:	0004      	movs	r4, r0
   10938:	4642      	mov	r2, r8
   1093a:	0038      	movs	r0, r7
   1093c:	f001 fbf0 	bl	12120 <__mdiff>
   10940:	68c3      	ldr	r3, [r0, #12]
   10942:	4681      	mov	r9, r0
   10944:	2b00      	cmp	r3, #0
   10946:	d000      	beq.n	1094a <_dtoa_r+0x89a>
   10948:	e11e      	b.n	10b88 <_dtoa_r+0xad8>
   1094a:	0001      	movs	r1, r0
   1094c:	0030      	movs	r0, r6
   1094e:	f001 fbcd 	bl	120ec <__mcmp>
   10952:	4683      	mov	fp, r0
   10954:	4649      	mov	r1, r9
   10956:	0038      	movs	r0, r7
   10958:	f001 f972 	bl	11c40 <_Bfree>
   1095c:	465b      	mov	r3, fp
   1095e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10960:	4313      	orrs	r3, r2
   10962:	d103      	bne.n	1096c <_dtoa_r+0x8bc>
   10964:	9b07      	ldr	r3, [sp, #28]
   10966:	2b00      	cmp	r3, #0
   10968:	d100      	bne.n	1096c <_dtoa_r+0x8bc>
   1096a:	e306      	b.n	10f7a <_dtoa_r+0xeca>
   1096c:	2c00      	cmp	r4, #0
   1096e:	da00      	bge.n	10972 <_dtoa_r+0x8c2>
   10970:	e1a8      	b.n	10cc4 <_dtoa_r+0xc14>
   10972:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10974:	431c      	orrs	r4, r3
   10976:	d103      	bne.n	10980 <_dtoa_r+0x8d0>
   10978:	9b07      	ldr	r3, [sp, #28]
   1097a:	2b00      	cmp	r3, #0
   1097c:	d100      	bne.n	10980 <_dtoa_r+0x8d0>
   1097e:	e1a1      	b.n	10cc4 <_dtoa_r+0xc14>
   10980:	465b      	mov	r3, fp
   10982:	2b00      	cmp	r3, #0
   10984:	dd00      	ble.n	10988 <_dtoa_r+0x8d8>
   10986:	e282      	b.n	10e8e <_dtoa_r+0xdde>
   10988:	4669      	mov	r1, sp
   1098a:	4652      	mov	r2, sl
   1098c:	4653      	mov	r3, sl
   1098e:	7c09      	ldrb	r1, [r1, #16]
   10990:	1c5c      	adds	r4, r3, #1
   10992:	7011      	strb	r1, [r2, #0]
   10994:	9a08      	ldr	r2, [sp, #32]
   10996:	4552      	cmp	r2, sl
   10998:	d100      	bne.n	1099c <_dtoa_r+0x8ec>
   1099a:	e28a      	b.n	10eb2 <_dtoa_r+0xe02>
   1099c:	0031      	movs	r1, r6
   1099e:	2300      	movs	r3, #0
   109a0:	220a      	movs	r2, #10
   109a2:	0038      	movs	r0, r7
   109a4:	f001 f956 	bl	11c54 <__multadd>
   109a8:	2300      	movs	r3, #0
   109aa:	0006      	movs	r6, r0
   109ac:	220a      	movs	r2, #10
   109ae:	0029      	movs	r1, r5
   109b0:	0038      	movs	r0, r7
   109b2:	4545      	cmp	r5, r8
   109b4:	d100      	bne.n	109b8 <_dtoa_r+0x908>
   109b6:	e0e1      	b.n	10b7c <_dtoa_r+0xacc>
   109b8:	f001 f94c 	bl	11c54 <__multadd>
   109bc:	4641      	mov	r1, r8
   109be:	0005      	movs	r5, r0
   109c0:	2300      	movs	r3, #0
   109c2:	220a      	movs	r2, #10
   109c4:	0038      	movs	r0, r7
   109c6:	f001 f945 	bl	11c54 <__multadd>
   109ca:	46a2      	mov	sl, r4
   109cc:	4680      	mov	r8, r0
   109ce:	e7a3      	b.n	10918 <_dtoa_r+0x868>
   109d0:	201c      	movs	r0, #28
   109d2:	9b06      	ldr	r3, [sp, #24]
   109d4:	469c      	mov	ip, r3
   109d6:	4484      	add	ip, r0
   109d8:	4663      	mov	r3, ip
   109da:	9306      	str	r3, [sp, #24]
   109dc:	9b08      	ldr	r3, [sp, #32]
   109de:	469c      	mov	ip, r3
   109e0:	4484      	add	ip, r0
   109e2:	4663      	mov	r3, ip
   109e4:	9308      	str	r3, [sp, #32]
   109e6:	9b04      	ldr	r3, [sp, #16]
   109e8:	469c      	mov	ip, r3
   109ea:	4484      	add	ip, r0
   109ec:	4663      	mov	r3, ip
   109ee:	9304      	str	r3, [sp, #16]
   109f0:	e754      	b.n	1089c <_dtoa_r+0x7ec>
   109f2:	4649      	mov	r1, r9
   109f4:	4658      	mov	r0, fp
   109f6:	f001 fb79 	bl	120ec <__mcmp>
   109fa:	2800      	cmp	r0, #0
   109fc:	db00      	blt.n	10a00 <_dtoa_r+0x950>
   109fe:	e763      	b.n	108c8 <_dtoa_r+0x818>
   10a00:	9b03      	ldr	r3, [sp, #12]
   10a02:	4659      	mov	r1, fp
   10a04:	3b01      	subs	r3, #1
   10a06:	9303      	str	r3, [sp, #12]
   10a08:	220a      	movs	r2, #10
   10a0a:	2300      	movs	r3, #0
   10a0c:	4650      	mov	r0, sl
   10a0e:	f001 f921 	bl	11c54 <__multadd>
   10a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10a14:	4683      	mov	fp, r0
   10a16:	2b00      	cmp	r3, #0
   10a18:	d000      	beq.n	10a1c <_dtoa_r+0x96c>
   10a1a:	e2ca      	b.n	10fb2 <_dtoa_r+0xf02>
   10a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10a1e:	2b00      	cmp	r3, #0
   10a20:	dc00      	bgt.n	10a24 <_dtoa_r+0x974>
   10a22:	e2d8      	b.n	10fd6 <_dtoa_r+0xf26>
   10a24:	9307      	str	r3, [sp, #28]
   10a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a28:	465d      	mov	r5, fp
   10a2a:	2400      	movs	r4, #0
   10a2c:	9f07      	ldr	r7, [sp, #28]
   10a2e:	469b      	mov	fp, r3
   10a30:	e006      	b.n	10a40 <_dtoa_r+0x990>
   10a32:	0029      	movs	r1, r5
   10a34:	2300      	movs	r3, #0
   10a36:	220a      	movs	r2, #10
   10a38:	4650      	mov	r0, sl
   10a3a:	f001 f90b 	bl	11c54 <__multadd>
   10a3e:	0005      	movs	r5, r0
   10a40:	4649      	mov	r1, r9
   10a42:	0028      	movs	r0, r5
   10a44:	f7ff fa8a 	bl	ff5c <quorem>
   10a48:	465b      	mov	r3, fp
   10a4a:	3030      	adds	r0, #48	; 0x30
   10a4c:	5518      	strb	r0, [r3, r4]
   10a4e:	3401      	adds	r4, #1
   10a50:	42bc      	cmp	r4, r7
   10a52:	dbee      	blt.n	10a32 <_dtoa_r+0x982>
   10a54:	46ab      	mov	fp, r5
   10a56:	0006      	movs	r6, r0
   10a58:	9c07      	ldr	r4, [sp, #28]
   10a5a:	2c00      	cmp	r4, #0
   10a5c:	dc00      	bgt.n	10a60 <_dtoa_r+0x9b0>
   10a5e:	e237      	b.n	10ed0 <_dtoa_r+0xe20>
   10a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10a62:	2700      	movs	r7, #0
   10a64:	469c      	mov	ip, r3
   10a66:	4464      	add	r4, ip
   10a68:	4659      	mov	r1, fp
   10a6a:	2201      	movs	r2, #1
   10a6c:	4650      	mov	r0, sl
   10a6e:	f001 fadd 	bl	1202c <__lshift>
   10a72:	4649      	mov	r1, r9
   10a74:	4683      	mov	fp, r0
   10a76:	f001 fb39 	bl	120ec <__mcmp>
   10a7a:	2800      	cmp	r0, #0
   10a7c:	dc00      	bgt.n	10a80 <_dtoa_r+0x9d0>
   10a7e:	e144      	b.n	10d0a <_dtoa_r+0xc5a>
   10a80:	1e65      	subs	r5, r4, #1
   10a82:	782b      	ldrb	r3, [r5, #0]
   10a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10a86:	e006      	b.n	10a96 <_dtoa_r+0x9e6>
   10a88:	4295      	cmp	r5, r2
   10a8a:	d100      	bne.n	10a8e <_dtoa_r+0x9de>
   10a8c:	e0b1      	b.n	10bf2 <_dtoa_r+0xb42>
   10a8e:	3c02      	subs	r4, #2
   10a90:	7823      	ldrb	r3, [r4, #0]
   10a92:	002c      	movs	r4, r5
   10a94:	3d01      	subs	r5, #1
   10a96:	2b39      	cmp	r3, #57	; 0x39
   10a98:	d0f6      	beq.n	10a88 <_dtoa_r+0x9d8>
   10a9a:	3301      	adds	r3, #1
   10a9c:	702b      	strb	r3, [r5, #0]
   10a9e:	4649      	mov	r1, r9
   10aa0:	4650      	mov	r0, sl
   10aa2:	f001 f8cd 	bl	11c40 <_Bfree>
   10aa6:	4643      	mov	r3, r8
   10aa8:	2b00      	cmp	r3, #0
   10aaa:	d100      	bne.n	10aae <_dtoa_r+0x9fe>
   10aac:	e52f      	b.n	1050e <_dtoa_r+0x45e>
   10aae:	2f00      	cmp	r7, #0
   10ab0:	d005      	beq.n	10abe <_dtoa_r+0xa0e>
   10ab2:	4547      	cmp	r7, r8
   10ab4:	d003      	beq.n	10abe <_dtoa_r+0xa0e>
   10ab6:	0039      	movs	r1, r7
   10ab8:	4650      	mov	r0, sl
   10aba:	f001 f8c1 	bl	11c40 <_Bfree>
   10abe:	4641      	mov	r1, r8
   10ac0:	4650      	mov	r0, sl
   10ac2:	f001 f8bd 	bl	11c40 <_Bfree>
   10ac6:	e522      	b.n	1050e <_dtoa_r+0x45e>
   10ac8:	0013      	movs	r3, r2
   10aca:	e675      	b.n	107b8 <_dtoa_r+0x708>
   10acc:	2e00      	cmp	r6, #0
   10ace:	d000      	beq.n	10ad2 <_dtoa_r+0xa22>
   10ad0:	e6ab      	b.n	1082a <_dtoa_r+0x77a>
   10ad2:	033b      	lsls	r3, r7, #12
   10ad4:	2400      	movs	r4, #0
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d000      	beq.n	10adc <_dtoa_r+0xa2c>
   10ada:	e6bf      	b.n	1085c <_dtoa_r+0x7ac>
   10adc:	4bba      	ldr	r3, [pc, #744]	; (10dc8 <_dtoa_r+0xd18>)
   10ade:	423b      	tst	r3, r7
   10ae0:	d100      	bne.n	10ae4 <_dtoa_r+0xa34>
   10ae2:	e6bb      	b.n	1085c <_dtoa_r+0x7ac>
   10ae4:	9b06      	ldr	r3, [sp, #24]
   10ae6:	3401      	adds	r4, #1
   10ae8:	3301      	adds	r3, #1
   10aea:	9306      	str	r3, [sp, #24]
   10aec:	9b04      	ldr	r3, [sp, #16]
   10aee:	3301      	adds	r3, #1
   10af0:	9304      	str	r3, [sp, #16]
   10af2:	e6b3      	b.n	1085c <_dtoa_r+0x7ac>
   10af4:	2301      	movs	r3, #1
   10af6:	930b      	str	r3, [sp, #44]	; 0x2c
   10af8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10afa:	2b00      	cmp	r3, #0
   10afc:	dc00      	bgt.n	10b00 <_dtoa_r+0xa50>
   10afe:	e0d1      	b.n	10ca4 <_dtoa_r+0xbf4>
   10b00:	001d      	movs	r5, r3
   10b02:	4698      	mov	r8, r3
   10b04:	930e      	str	r3, [sp, #56]	; 0x38
   10b06:	9307      	str	r3, [sp, #28]
   10b08:	f7ff fbc8 	bl	1029c <_dtoa_r+0x1ec>
   10b0c:	9b07      	ldr	r3, [sp, #28]
   10b0e:	2b00      	cmp	r3, #0
   10b10:	dd00      	ble.n	10b14 <_dtoa_r+0xa64>
   10b12:	e553      	b.n	105bc <_dtoa_r+0x50c>
   10b14:	d000      	beq.n	10b18 <_dtoa_r+0xa68>
   10b16:	e0ad      	b.n	10c74 <_dtoa_r+0xbc4>
   10b18:	9804      	ldr	r0, [sp, #16]
   10b1a:	9905      	ldr	r1, [sp, #20]
   10b1c:	2200      	movs	r2, #0
   10b1e:	4bab      	ldr	r3, [pc, #684]	; (10dcc <_dtoa_r+0xd1c>)
   10b20:	f7f9 fa44 	bl	9fac <__aeabi_dmul>
   10b24:	003b      	movs	r3, r7
   10b26:	0032      	movs	r2, r6
   10b28:	f7fa f90a 	bl	ad40 <__aeabi_dcmpge>
   10b2c:	2300      	movs	r3, #0
   10b2e:	4699      	mov	r9, r3
   10b30:	4698      	mov	r8, r3
   10b32:	2800      	cmp	r0, #0
   10b34:	d055      	beq.n	10be2 <_dtoa_r+0xb32>
   10b36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10b38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10b3a:	43db      	mvns	r3, r3
   10b3c:	9303      	str	r3, [sp, #12]
   10b3e:	4649      	mov	r1, r9
   10b40:	4650      	mov	r0, sl
   10b42:	f001 f87d 	bl	11c40 <_Bfree>
   10b46:	4643      	mov	r3, r8
   10b48:	2b00      	cmp	r3, #0
   10b4a:	d100      	bne.n	10b4e <_dtoa_r+0xa9e>
   10b4c:	e4df      	b.n	1050e <_dtoa_r+0x45e>
   10b4e:	e7b6      	b.n	10abe <_dtoa_r+0xa0e>
   10b50:	464a      	mov	r2, r9
   10b52:	4659      	mov	r1, fp
   10b54:	4650      	mov	r0, sl
   10b56:	f001 fa09 	bl	11f6c <__pow5mult>
   10b5a:	4683      	mov	fp, r0
   10b5c:	e653      	b.n	10806 <_dtoa_r+0x756>
   10b5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10b60:	2a00      	cmp	r2, #0
   10b62:	d100      	bne.n	10b66 <_dtoa_r+0xab6>
   10b64:	e1b6      	b.n	10ed4 <_dtoa_r+0xe24>
   10b66:	4a9a      	ldr	r2, [pc, #616]	; (10dd0 <_dtoa_r+0xd20>)
   10b68:	464c      	mov	r4, r9
   10b6a:	4694      	mov	ip, r2
   10b6c:	9a06      	ldr	r2, [sp, #24]
   10b6e:	4463      	add	r3, ip
   10b70:	9208      	str	r2, [sp, #32]
   10b72:	e5d5      	b.n	10720 <_dtoa_r+0x670>
   10b74:	2e00      	cmp	r6, #0
   10b76:	d000      	beq.n	10b7a <_dtoa_r+0xaca>
   10b78:	e670      	b.n	1085c <_dtoa_r+0x7ac>
   10b7a:	e7aa      	b.n	10ad2 <_dtoa_r+0xa22>
   10b7c:	f001 f86a 	bl	11c54 <__multadd>
   10b80:	46a2      	mov	sl, r4
   10b82:	0005      	movs	r5, r0
   10b84:	4680      	mov	r8, r0
   10b86:	e6c7      	b.n	10918 <_dtoa_r+0x868>
   10b88:	2301      	movs	r3, #1
   10b8a:	469b      	mov	fp, r3
   10b8c:	e6e2      	b.n	10954 <_dtoa_r+0x8a4>
   10b8e:	2300      	movs	r3, #0
   10b90:	930b      	str	r3, [sp, #44]	; 0x2c
   10b92:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10b94:	2b02      	cmp	r3, #2
   10b96:	d0af      	beq.n	10af8 <_dtoa_r+0xa48>
   10b98:	2400      	movs	r4, #0
   10b9a:	4653      	mov	r3, sl
   10b9c:	0021      	movs	r1, r4
   10b9e:	645c      	str	r4, [r3, #68]	; 0x44
   10ba0:	4650      	mov	r0, sl
   10ba2:	f001 f825 	bl	11bf0 <_Balloc>
   10ba6:	4653      	mov	r3, sl
   10ba8:	6418      	str	r0, [r3, #64]	; 0x40
   10baa:	2301      	movs	r3, #1
   10bac:	425b      	negs	r3, r3
   10bae:	9307      	str	r3, [sp, #28]
   10bb0:	930e      	str	r3, [sp, #56]	; 0x38
   10bb2:	3302      	adds	r3, #2
   10bb4:	900a      	str	r0, [sp, #40]	; 0x28
   10bb6:	9423      	str	r4, [sp, #140]	; 0x8c
   10bb8:	930b      	str	r3, [sp, #44]	; 0x2c
   10bba:	e4ec      	b.n	10596 <_dtoa_r+0x4e6>
   10bbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10bbe:	2b02      	cmp	r3, #2
   10bc0:	dc00      	bgt.n	10bc4 <_dtoa_r+0xb14>
   10bc2:	e685      	b.n	108d0 <_dtoa_r+0x820>
   10bc4:	9b07      	ldr	r3, [sp, #28]
   10bc6:	2b00      	cmp	r3, #0
   10bc8:	d1b5      	bne.n	10b36 <_dtoa_r+0xa86>
   10bca:	4649      	mov	r1, r9
   10bcc:	2205      	movs	r2, #5
   10bce:	4650      	mov	r0, sl
   10bd0:	f001 f840 	bl	11c54 <__multadd>
   10bd4:	4681      	mov	r9, r0
   10bd6:	0001      	movs	r1, r0
   10bd8:	4658      	mov	r0, fp
   10bda:	f001 fa87 	bl	120ec <__mcmp>
   10bde:	2800      	cmp	r0, #0
   10be0:	dda9      	ble.n	10b36 <_dtoa_r+0xa86>
   10be2:	2331      	movs	r3, #49	; 0x31
   10be4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10be6:	7013      	strb	r3, [r2, #0]
   10be8:	9b03      	ldr	r3, [sp, #12]
   10bea:	1c54      	adds	r4, r2, #1
   10bec:	3301      	adds	r3, #1
   10bee:	9303      	str	r3, [sp, #12]
   10bf0:	e7a5      	b.n	10b3e <_dtoa_r+0xa8e>
   10bf2:	9b03      	ldr	r3, [sp, #12]
   10bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10bf6:	3301      	adds	r3, #1
   10bf8:	9303      	str	r3, [sp, #12]
   10bfa:	2331      	movs	r3, #49	; 0x31
   10bfc:	7013      	strb	r3, [r2, #0]
   10bfe:	e74e      	b.n	10a9e <_dtoa_r+0x9ee>
   10c00:	2300      	movs	r3, #0
   10c02:	930b      	str	r3, [sp, #44]	; 0x2c
   10c04:	f7ff fb3d 	bl	10282 <_dtoa_r+0x1d2>
   10c08:	9b06      	ldr	r3, [sp, #24]
   10c0a:	465c      	mov	r4, fp
   10c0c:	469b      	mov	fp, r3
   10c0e:	9b07      	ldr	r3, [sp, #28]
   10c10:	469a      	mov	sl, r3
   10c12:	e47c      	b.n	1050e <_dtoa_r+0x45e>
   10c14:	4640      	mov	r0, r8
   10c16:	f7f9 ff93 	bl	ab40 <__aeabi_i2d>
   10c1a:	0032      	movs	r2, r6
   10c1c:	003b      	movs	r3, r7
   10c1e:	f7f9 f9c5 	bl	9fac <__aeabi_dmul>
   10c22:	2200      	movs	r2, #0
   10c24:	4b6b      	ldr	r3, [pc, #428]	; (10dd4 <_dtoa_r+0xd24>)
   10c26:	f004 f877 	bl	14d18 <__aeabi_dadd>
   10c2a:	4a6b      	ldr	r2, [pc, #428]	; (10dd8 <_dtoa_r+0xd28>)
   10c2c:	000b      	movs	r3, r1
   10c2e:	4694      	mov	ip, r2
   10c30:	4463      	add	r3, ip
   10c32:	9008      	str	r0, [sp, #32]
   10c34:	9109      	str	r1, [sp, #36]	; 0x24
   10c36:	9309      	str	r3, [sp, #36]	; 0x24
   10c38:	2200      	movs	r2, #0
   10c3a:	4b64      	ldr	r3, [pc, #400]	; (10dcc <_dtoa_r+0xd1c>)
   10c3c:	0030      	movs	r0, r6
   10c3e:	0039      	movs	r1, r7
   10c40:	f7f9 fc34 	bl	a4ac <__aeabi_dsub>
   10c44:	9e08      	ldr	r6, [sp, #32]
   10c46:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10c48:	0032      	movs	r2, r6
   10c4a:	003b      	movs	r3, r7
   10c4c:	0004      	movs	r4, r0
   10c4e:	000d      	movs	r5, r1
   10c50:	f7fa f86c 	bl	ad2c <__aeabi_dcmpgt>
   10c54:	2800      	cmp	r0, #0
   10c56:	d000      	beq.n	10c5a <_dtoa_r+0xbaa>
   10c58:	e0b2      	b.n	10dc0 <_dtoa_r+0xd10>
   10c5a:	2080      	movs	r0, #128	; 0x80
   10c5c:	0600      	lsls	r0, r0, #24
   10c5e:	4684      	mov	ip, r0
   10c60:	0039      	movs	r1, r7
   10c62:	4461      	add	r1, ip
   10c64:	000b      	movs	r3, r1
   10c66:	0032      	movs	r2, r6
   10c68:	0020      	movs	r0, r4
   10c6a:	0029      	movs	r1, r5
   10c6c:	f7fa f84a 	bl	ad04 <__aeabi_dcmplt>
   10c70:	2800      	cmp	r0, #0
   10c72:	d057      	beq.n	10d24 <_dtoa_r+0xc74>
   10c74:	2300      	movs	r3, #0
   10c76:	4699      	mov	r9, r3
   10c78:	4698      	mov	r8, r3
   10c7a:	e75c      	b.n	10b36 <_dtoa_r+0xa86>
   10c7c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10c7e:	f7ff fa4c 	bl	1011a <_dtoa_r+0x6a>
   10c82:	1ae2      	subs	r2, r4, r3
   10c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10c86:	46a1      	mov	r9, r4
   10c88:	469c      	mov	ip, r3
   10c8a:	4494      	add	ip, r2
   10c8c:	4663      	mov	r3, ip
   10c8e:	2400      	movs	r4, #0
   10c90:	930d      	str	r3, [sp, #52]	; 0x34
   10c92:	e53e      	b.n	10712 <_dtoa_r+0x662>
   10c94:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10c96:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10c98:	9208      	str	r2, [sp, #32]
   10c9a:	9309      	str	r3, [sp, #36]	; 0x24
   10c9c:	2302      	movs	r3, #2
   10c9e:	4698      	mov	r8, r3
   10ca0:	f7ff fb3a 	bl	10318 <_dtoa_r+0x268>
   10ca4:	2300      	movs	r3, #0
   10ca6:	4652      	mov	r2, sl
   10ca8:	2100      	movs	r1, #0
   10caa:	6453      	str	r3, [r2, #68]	; 0x44
   10cac:	4650      	mov	r0, sl
   10cae:	f000 ff9f 	bl	11bf0 <_Balloc>
   10cb2:	4653      	mov	r3, sl
   10cb4:	6418      	str	r0, [r3, #64]	; 0x40
   10cb6:	2301      	movs	r3, #1
   10cb8:	900a      	str	r0, [sp, #40]	; 0x28
   10cba:	9307      	str	r3, [sp, #28]
   10cbc:	9323      	str	r3, [sp, #140]	; 0x8c
   10cbe:	930e      	str	r3, [sp, #56]	; 0x38
   10cc0:	f7ff fb07 	bl	102d2 <_dtoa_r+0x222>
   10cc4:	4643      	mov	r3, r8
   10cc6:	930c      	str	r3, [sp, #48]	; 0x30
   10cc8:	465b      	mov	r3, fp
   10cca:	9a06      	ldr	r2, [sp, #24]
   10ccc:	46a8      	mov	r8, r5
   10cce:	46b3      	mov	fp, r6
   10cd0:	4655      	mov	r5, sl
   10cd2:	9e04      	ldr	r6, [sp, #16]
   10cd4:	4691      	mov	r9, r2
   10cd6:	46ba      	mov	sl, r7
   10cd8:	2b00      	cmp	r3, #0
   10cda:	dd10      	ble.n	10cfe <_dtoa_r+0xc4e>
   10cdc:	4659      	mov	r1, fp
   10cde:	2201      	movs	r2, #1
   10ce0:	0038      	movs	r0, r7
   10ce2:	f001 f9a3 	bl	1202c <__lshift>
   10ce6:	4649      	mov	r1, r9
   10ce8:	4683      	mov	fp, r0
   10cea:	f001 f9ff 	bl	120ec <__mcmp>
   10cee:	2800      	cmp	r0, #0
   10cf0:	dc00      	bgt.n	10cf4 <_dtoa_r+0xc44>
   10cf2:	e157      	b.n	10fa4 <_dtoa_r+0xef4>
   10cf4:	2e39      	cmp	r6, #57	; 0x39
   10cf6:	d100      	bne.n	10cfa <_dtoa_r+0xc4a>
   10cf8:	e122      	b.n	10f40 <_dtoa_r+0xe90>
   10cfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   10cfc:	3631      	adds	r6, #49	; 0x31
   10cfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10d00:	4647      	mov	r7, r8
   10d02:	1c6c      	adds	r4, r5, #1
   10d04:	702e      	strb	r6, [r5, #0]
   10d06:	4698      	mov	r8, r3
   10d08:	e6c9      	b.n	10a9e <_dtoa_r+0x9ee>
   10d0a:	2800      	cmp	r0, #0
   10d0c:	d103      	bne.n	10d16 <_dtoa_r+0xc66>
   10d0e:	07f3      	lsls	r3, r6, #31
   10d10:	d501      	bpl.n	10d16 <_dtoa_r+0xc66>
   10d12:	e6b5      	b.n	10a80 <_dtoa_r+0x9d0>
   10d14:	001c      	movs	r4, r3
   10d16:	1e63      	subs	r3, r4, #1
   10d18:	781a      	ldrb	r2, [r3, #0]
   10d1a:	2a30      	cmp	r2, #48	; 0x30
   10d1c:	d0fa      	beq.n	10d14 <_dtoa_r+0xc64>
   10d1e:	e6be      	b.n	10a9e <_dtoa_r+0x9ee>
   10d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10d22:	4699      	mov	r9, r3
   10d24:	9e10      	ldr	r6, [sp, #64]	; 0x40
   10d26:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10d28:	e435      	b.n	10596 <_dtoa_r+0x4e6>
   10d2a:	2501      	movs	r5, #1
   10d2c:	f7ff fab4 	bl	10298 <_dtoa_r+0x1e8>
   10d30:	9b03      	ldr	r3, [sp, #12]
   10d32:	2b00      	cmp	r3, #0
   10d34:	d100      	bne.n	10d38 <_dtoa_r+0xc88>
   10d36:	e0d4      	b.n	10ee2 <_dtoa_r+0xe32>
   10d38:	9810      	ldr	r0, [sp, #64]	; 0x40
   10d3a:	9911      	ldr	r1, [sp, #68]	; 0x44
   10d3c:	425c      	negs	r4, r3
   10d3e:	230f      	movs	r3, #15
   10d40:	4a26      	ldr	r2, [pc, #152]	; (10ddc <_dtoa_r+0xd2c>)
   10d42:	4023      	ands	r3, r4
   10d44:	00db      	lsls	r3, r3, #3
   10d46:	18d3      	adds	r3, r2, r3
   10d48:	681a      	ldr	r2, [r3, #0]
   10d4a:	685b      	ldr	r3, [r3, #4]
   10d4c:	f7f9 f92e 	bl	9fac <__aeabi_dmul>
   10d50:	1124      	asrs	r4, r4, #4
   10d52:	0006      	movs	r6, r0
   10d54:	000f      	movs	r7, r1
   10d56:	2c00      	cmp	r4, #0
   10d58:	d100      	bne.n	10d5c <_dtoa_r+0xcac>
   10d5a:	e149      	b.n	10ff0 <_dtoa_r+0xf40>
   10d5c:	2302      	movs	r3, #2
   10d5e:	4698      	mov	r8, r3
   10d60:	4d1f      	ldr	r5, [pc, #124]	; (10de0 <_dtoa_r+0xd30>)
   10d62:	2301      	movs	r3, #1
   10d64:	4223      	tst	r3, r4
   10d66:	d009      	beq.n	10d7c <_dtoa_r+0xccc>
   10d68:	469c      	mov	ip, r3
   10d6a:	682a      	ldr	r2, [r5, #0]
   10d6c:	686b      	ldr	r3, [r5, #4]
   10d6e:	0030      	movs	r0, r6
   10d70:	0039      	movs	r1, r7
   10d72:	44e0      	add	r8, ip
   10d74:	f7f9 f91a 	bl	9fac <__aeabi_dmul>
   10d78:	0006      	movs	r6, r0
   10d7a:	000f      	movs	r7, r1
   10d7c:	1064      	asrs	r4, r4, #1
   10d7e:	3508      	adds	r5, #8
   10d80:	2c00      	cmp	r4, #0
   10d82:	d1ee      	bne.n	10d62 <_dtoa_r+0xcb2>
   10d84:	f7ff fae4 	bl	10350 <_dtoa_r+0x2a0>
   10d88:	9b03      	ldr	r3, [sp, #12]
   10d8a:	2730      	movs	r7, #48	; 0x30
   10d8c:	3301      	adds	r3, #1
   10d8e:	9303      	str	r3, [sp, #12]
   10d90:	2330      	movs	r3, #48	; 0x30
   10d92:	702b      	strb	r3, [r5, #0]
   10d94:	e4ac      	b.n	106f0 <_dtoa_r+0x640>
   10d96:	6859      	ldr	r1, [r3, #4]
   10d98:	4650      	mov	r0, sl
   10d9a:	f000 ff29 	bl	11bf0 <_Balloc>
   10d9e:	4643      	mov	r3, r8
   10da0:	4641      	mov	r1, r8
   10da2:	0004      	movs	r4, r0
   10da4:	691b      	ldr	r3, [r3, #16]
   10da6:	310c      	adds	r1, #12
   10da8:	1c9a      	adds	r2, r3, #2
   10daa:	0092      	lsls	r2, r2, #2
   10dac:	300c      	adds	r0, #12
   10dae:	f7fa fc23 	bl	b5f8 <memcpy>
   10db2:	2201      	movs	r2, #1
   10db4:	0021      	movs	r1, r4
   10db6:	4650      	mov	r0, sl
   10db8:	f001 f938 	bl	1202c <__lshift>
   10dbc:	900c      	str	r0, [sp, #48]	; 0x30
   10dbe:	e599      	b.n	108f4 <_dtoa_r+0x844>
   10dc0:	2300      	movs	r3, #0
   10dc2:	4699      	mov	r9, r3
   10dc4:	4698      	mov	r8, r3
   10dc6:	e70c      	b.n	10be2 <_dtoa_r+0xb32>
   10dc8:	7ff00000 	.word	0x7ff00000
   10dcc:	40140000 	.word	0x40140000
   10dd0:	00000433 	.word	0x00000433
   10dd4:	401c0000 	.word	0x401c0000
   10dd8:	fcc00000 	.word	0xfcc00000
   10ddc:	00019358 	.word	0x00019358
   10de0:	00019330 	.word	0x00019330
   10de4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10de6:	498f      	ldr	r1, [pc, #572]	; (11024 <_dtoa_r+0xf74>)
   10de8:	3b01      	subs	r3, #1
   10dea:	00db      	lsls	r3, r3, #3
   10dec:	18c9      	adds	r1, r1, r3
   10dee:	6808      	ldr	r0, [r1, #0]
   10df0:	6849      	ldr	r1, [r1, #4]
   10df2:	9a08      	ldr	r2, [sp, #32]
   10df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10df6:	f7f9 f8d9 	bl	9fac <__aeabi_dmul>
   10dfa:	9014      	str	r0, [sp, #80]	; 0x50
   10dfc:	9115      	str	r1, [sp, #84]	; 0x54
   10dfe:	0039      	movs	r1, r7
   10e00:	0030      	movs	r0, r6
   10e02:	f7f9 fe69 	bl	aad8 <__aeabi_d2iz>
   10e06:	0005      	movs	r5, r0
   10e08:	f7f9 fe9a 	bl	ab40 <__aeabi_i2d>
   10e0c:	0002      	movs	r2, r0
   10e0e:	000b      	movs	r3, r1
   10e10:	0030      	movs	r0, r6
   10e12:	0039      	movs	r1, r7
   10e14:	f7f9 fb4a 	bl	a4ac <__aeabi_dsub>
   10e18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10e1a:	9008      	str	r0, [sp, #32]
   10e1c:	9109      	str	r1, [sp, #36]	; 0x24
   10e1e:	990a      	ldr	r1, [sp, #40]	; 0x28
   10e20:	001a      	movs	r2, r3
   10e22:	468c      	mov	ip, r1
   10e24:	3530      	adds	r5, #48	; 0x30
   10e26:	4462      	add	r2, ip
   10e28:	1c4c      	adds	r4, r1, #1
   10e2a:	700d      	strb	r5, [r1, #0]
   10e2c:	4690      	mov	r8, r2
   10e2e:	2b01      	cmp	r3, #1
   10e30:	d01b      	beq.n	10e6a <_dtoa_r+0xdba>
   10e32:	9808      	ldr	r0, [sp, #32]
   10e34:	9909      	ldr	r1, [sp, #36]	; 0x24
   10e36:	0025      	movs	r5, r4
   10e38:	2200      	movs	r2, #0
   10e3a:	4b7b      	ldr	r3, [pc, #492]	; (11028 <_dtoa_r+0xf78>)
   10e3c:	f7f9 f8b6 	bl	9fac <__aeabi_dmul>
   10e40:	000f      	movs	r7, r1
   10e42:	0006      	movs	r6, r0
   10e44:	f7f9 fe48 	bl	aad8 <__aeabi_d2iz>
   10e48:	0004      	movs	r4, r0
   10e4a:	f7f9 fe79 	bl	ab40 <__aeabi_i2d>
   10e4e:	3430      	adds	r4, #48	; 0x30
   10e50:	0002      	movs	r2, r0
   10e52:	000b      	movs	r3, r1
   10e54:	0030      	movs	r0, r6
   10e56:	0039      	movs	r1, r7
   10e58:	f7f9 fb28 	bl	a4ac <__aeabi_dsub>
   10e5c:	702c      	strb	r4, [r5, #0]
   10e5e:	3501      	adds	r5, #1
   10e60:	45a8      	cmp	r8, r5
   10e62:	d1e9      	bne.n	10e38 <_dtoa_r+0xd88>
   10e64:	4644      	mov	r4, r8
   10e66:	9008      	str	r0, [sp, #32]
   10e68:	9109      	str	r1, [sp, #36]	; 0x24
   10e6a:	9814      	ldr	r0, [sp, #80]	; 0x50
   10e6c:	9915      	ldr	r1, [sp, #84]	; 0x54
   10e6e:	2200      	movs	r2, #0
   10e70:	4b6e      	ldr	r3, [pc, #440]	; (1102c <_dtoa_r+0xf7c>)
   10e72:	f003 ff51 	bl	14d18 <__aeabi_dadd>
   10e76:	9a08      	ldr	r2, [sp, #32]
   10e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e7a:	f7f9 ff43 	bl	ad04 <__aeabi_dcmplt>
   10e7e:	2800      	cmp	r0, #0
   10e80:	d067      	beq.n	10f52 <_dtoa_r+0xea2>
   10e82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10e84:	1e65      	subs	r5, r4, #1
   10e86:	9303      	str	r3, [sp, #12]
   10e88:	782f      	ldrb	r7, [r5, #0]
   10e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10e8c:	e42e      	b.n	106ec <_dtoa_r+0x63c>
   10e8e:	4643      	mov	r3, r8
   10e90:	46b3      	mov	fp, r6
   10e92:	930c      	str	r3, [sp, #48]	; 0x30
   10e94:	9e04      	ldr	r6, [sp, #16]
   10e96:	9b06      	ldr	r3, [sp, #24]
   10e98:	46a8      	mov	r8, r5
   10e9a:	4699      	mov	r9, r3
   10e9c:	4655      	mov	r5, sl
   10e9e:	46ba      	mov	sl, r7
   10ea0:	2e39      	cmp	r6, #57	; 0x39
   10ea2:	d04d      	beq.n	10f40 <_dtoa_r+0xe90>
   10ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ea6:	3601      	adds	r6, #1
   10ea8:	4647      	mov	r7, r8
   10eaa:	1c6c      	adds	r4, r5, #1
   10eac:	702e      	strb	r6, [r5, #0]
   10eae:	4698      	mov	r8, r3
   10eb0:	e5f5      	b.n	10a9e <_dtoa_r+0x9ee>
   10eb2:	4642      	mov	r2, r8
   10eb4:	9b06      	ldr	r3, [sp, #24]
   10eb6:	46b3      	mov	fp, r6
   10eb8:	46ba      	mov	sl, r7
   10eba:	9e04      	ldr	r6, [sp, #16]
   10ebc:	4699      	mov	r9, r3
   10ebe:	002f      	movs	r7, r5
   10ec0:	4690      	mov	r8, r2
   10ec2:	e5d1      	b.n	10a68 <_dtoa_r+0x9b8>
   10ec4:	9b06      	ldr	r3, [sp, #24]
   10ec6:	9a07      	ldr	r2, [sp, #28]
   10ec8:	1a9b      	subs	r3, r3, r2
   10eca:	9308      	str	r3, [sp, #32]
   10ecc:	2300      	movs	r3, #0
   10ece:	e427      	b.n	10720 <_dtoa_r+0x670>
   10ed0:	2401      	movs	r4, #1
   10ed2:	e5c5      	b.n	10a60 <_dtoa_r+0x9b0>
   10ed4:	2336      	movs	r3, #54	; 0x36
   10ed6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   10ed8:	464c      	mov	r4, r9
   10eda:	1a9b      	subs	r3, r3, r2
   10edc:	9a06      	ldr	r2, [sp, #24]
   10ede:	9208      	str	r2, [sp, #32]
   10ee0:	e41e      	b.n	10720 <_dtoa_r+0x670>
   10ee2:	2302      	movs	r3, #2
   10ee4:	9e10      	ldr	r6, [sp, #64]	; 0x40
   10ee6:	9f11      	ldr	r7, [sp, #68]	; 0x44
   10ee8:	4698      	mov	r8, r3
   10eea:	f7ff fa31 	bl	10350 <_dtoa_r+0x2a0>
   10eee:	9b07      	ldr	r3, [sp, #28]
   10ef0:	2b00      	cmp	r3, #0
   10ef2:	d100      	bne.n	10ef6 <_dtoa_r+0xe46>
   10ef4:	e68e      	b.n	10c14 <_dtoa_r+0xb64>
   10ef6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   10ef8:	2c00      	cmp	r4, #0
   10efa:	dc00      	bgt.n	10efe <_dtoa_r+0xe4e>
   10efc:	e712      	b.n	10d24 <_dtoa_r+0xc74>
   10efe:	9b03      	ldr	r3, [sp, #12]
   10f00:	2200      	movs	r2, #0
   10f02:	3b01      	subs	r3, #1
   10f04:	9313      	str	r3, [sp, #76]	; 0x4c
   10f06:	0030      	movs	r0, r6
   10f08:	4b47      	ldr	r3, [pc, #284]	; (11028 <_dtoa_r+0xf78>)
   10f0a:	0039      	movs	r1, r7
   10f0c:	f7f9 f84e 	bl	9fac <__aeabi_dmul>
   10f10:	0006      	movs	r6, r0
   10f12:	4640      	mov	r0, r8
   10f14:	000f      	movs	r7, r1
   10f16:	3001      	adds	r0, #1
   10f18:	f7f9 fe12 	bl	ab40 <__aeabi_i2d>
   10f1c:	0032      	movs	r2, r6
   10f1e:	003b      	movs	r3, r7
   10f20:	f7f9 f844 	bl	9fac <__aeabi_dmul>
   10f24:	2200      	movs	r2, #0
   10f26:	4b42      	ldr	r3, [pc, #264]	; (11030 <_dtoa_r+0xf80>)
   10f28:	f003 fef6 	bl	14d18 <__aeabi_dadd>
   10f2c:	4a41      	ldr	r2, [pc, #260]	; (11034 <_dtoa_r+0xf84>)
   10f2e:	000b      	movs	r3, r1
   10f30:	4694      	mov	ip, r2
   10f32:	4463      	add	r3, ip
   10f34:	9008      	str	r0, [sp, #32]
   10f36:	9109      	str	r1, [sp, #36]	; 0x24
   10f38:	9412      	str	r4, [sp, #72]	; 0x48
   10f3a:	9309      	str	r3, [sp, #36]	; 0x24
   10f3c:	f7ff fa30 	bl	103a0 <_dtoa_r+0x2f0>
   10f40:	2339      	movs	r3, #57	; 0x39
   10f42:	702b      	strb	r3, [r5, #0]
   10f44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10f46:	4647      	mov	r7, r8
   10f48:	1c6c      	adds	r4, r5, #1
   10f4a:	4698      	mov	r8, r3
   10f4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10f4e:	2339      	movs	r3, #57	; 0x39
   10f50:	e5a1      	b.n	10a96 <_dtoa_r+0x9e6>
   10f52:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10f54:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10f56:	2000      	movs	r0, #0
   10f58:	4934      	ldr	r1, [pc, #208]	; (1102c <_dtoa_r+0xf7c>)
   10f5a:	f7f9 faa7 	bl	a4ac <__aeabi_dsub>
   10f5e:	9a08      	ldr	r2, [sp, #32]
   10f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f62:	f7f9 fee3 	bl	ad2c <__aeabi_dcmpgt>
   10f66:	2800      	cmp	r0, #0
   10f68:	d101      	bne.n	10f6e <_dtoa_r+0xebe>
   10f6a:	e6db      	b.n	10d24 <_dtoa_r+0xc74>
   10f6c:	001c      	movs	r4, r3
   10f6e:	1e63      	subs	r3, r4, #1
   10f70:	781a      	ldrb	r2, [r3, #0]
   10f72:	2a30      	cmp	r2, #48	; 0x30
   10f74:	d0fa      	beq.n	10f6c <_dtoa_r+0xebc>
   10f76:	f7ff fac8 	bl	1050a <_dtoa_r+0x45a>
   10f7a:	4643      	mov	r3, r8
   10f7c:	46b3      	mov	fp, r6
   10f7e:	930c      	str	r3, [sp, #48]	; 0x30
   10f80:	9e04      	ldr	r6, [sp, #16]
   10f82:	9b06      	ldr	r3, [sp, #24]
   10f84:	46a8      	mov	r8, r5
   10f86:	4699      	mov	r9, r3
   10f88:	4655      	mov	r5, sl
   10f8a:	46ba      	mov	sl, r7
   10f8c:	2e39      	cmp	r6, #57	; 0x39
   10f8e:	d0d7      	beq.n	10f40 <_dtoa_r+0xe90>
   10f90:	2c00      	cmp	r4, #0
   10f92:	dd00      	ble.n	10f96 <_dtoa_r+0xee6>
   10f94:	e6b1      	b.n	10cfa <_dtoa_r+0xc4a>
   10f96:	e6b2      	b.n	10cfe <_dtoa_r+0xc4e>
   10f98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10f9a:	464d      	mov	r5, r9
   10f9c:	9203      	str	r2, [sp, #12]
   10f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10fa0:	f7ff fba4 	bl	106ec <_dtoa_r+0x63c>
   10fa4:	2800      	cmp	r0, #0
   10fa6:	d000      	beq.n	10faa <_dtoa_r+0xefa>
   10fa8:	e6a9      	b.n	10cfe <_dtoa_r+0xc4e>
   10faa:	07f3      	lsls	r3, r6, #31
   10fac:	d400      	bmi.n	10fb0 <_dtoa_r+0xf00>
   10fae:	e6a6      	b.n	10cfe <_dtoa_r+0xc4e>
   10fb0:	e6a0      	b.n	10cf4 <_dtoa_r+0xc44>
   10fb2:	2300      	movs	r3, #0
   10fb4:	4641      	mov	r1, r8
   10fb6:	220a      	movs	r2, #10
   10fb8:	4650      	mov	r0, sl
   10fba:	f000 fe4b 	bl	11c54 <__multadd>
   10fbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10fc0:	4680      	mov	r8, r0
   10fc2:	2b00      	cmp	r3, #0
   10fc4:	dd01      	ble.n	10fca <_dtoa_r+0xf1a>
   10fc6:	9307      	str	r3, [sp, #28]
   10fc8:	e486      	b.n	108d8 <_dtoa_r+0x828>
   10fca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10fcc:	2b02      	cmp	r3, #2
   10fce:	dc1f      	bgt.n	11010 <_dtoa_r+0xf60>
   10fd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10fd2:	9307      	str	r3, [sp, #28]
   10fd4:	e480      	b.n	108d8 <_dtoa_r+0x828>
   10fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10fd8:	2b02      	cmp	r3, #2
   10fda:	dc19      	bgt.n	11010 <_dtoa_r+0xf60>
   10fdc:	4649      	mov	r1, r9
   10fde:	f7fe ffbd 	bl	ff5c <quorem>
   10fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10fe4:	3030      	adds	r0, #48	; 0x30
   10fe6:	7018      	strb	r0, [r3, #0]
   10fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10fea:	0006      	movs	r6, r0
   10fec:	9307      	str	r3, [sp, #28]
   10fee:	e533      	b.n	10a58 <_dtoa_r+0x9a8>
   10ff0:	2302      	movs	r3, #2
   10ff2:	4698      	mov	r8, r3
   10ff4:	f7ff f9ac 	bl	10350 <_dtoa_r+0x2a0>
   10ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10ffa:	9c14      	ldr	r4, [sp, #80]	; 0x50
   10ffc:	9303      	str	r3, [sp, #12]
   10ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11000:	001d      	movs	r5, r3
   11002:	f7ff fb73 	bl	106ec <_dtoa_r+0x63c>
   11006:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11008:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1100a:	9303      	str	r3, [sp, #12]
   1100c:	f7ff fa7f 	bl	1050e <_dtoa_r+0x45e>
   11010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11012:	9307      	str	r3, [sp, #28]
   11014:	e5d6      	b.n	10bc4 <_dtoa_r+0xb14>
   11016:	2b04      	cmp	r3, #4
   11018:	d100      	bne.n	1101c <_dtoa_r+0xf6c>
   1101a:	e43f      	b.n	1089c <_dtoa_r+0x7ec>
   1101c:	233c      	movs	r3, #60	; 0x3c
   1101e:	1a18      	subs	r0, r3, r0
   11020:	e4d7      	b.n	109d2 <_dtoa_r+0x922>
   11022:	46c0      	nop			; (mov r8, r8)
   11024:	00019358 	.word	0x00019358
   11028:	40240000 	.word	0x40240000
   1102c:	3fe00000 	.word	0x3fe00000
   11030:	401c0000 	.word	0x401c0000
   11034:	fcc00000 	.word	0xfcc00000

00011038 <__sflush_r>:
   11038:	b5f0      	push	{r4, r5, r6, r7, lr}
   1103a:	46c6      	mov	lr, r8
   1103c:	b500      	push	{lr}
   1103e:	230c      	movs	r3, #12
   11040:	5eca      	ldrsh	r2, [r1, r3]
   11042:	4680      	mov	r8, r0
   11044:	b293      	uxth	r3, r2
   11046:	000c      	movs	r4, r1
   11048:	0719      	lsls	r1, r3, #28
   1104a:	d440      	bmi.n	110ce <__sflush_r+0x96>
   1104c:	2380      	movs	r3, #128	; 0x80
   1104e:	011b      	lsls	r3, r3, #4
   11050:	4313      	orrs	r3, r2
   11052:	6862      	ldr	r2, [r4, #4]
   11054:	81a3      	strh	r3, [r4, #12]
   11056:	2a00      	cmp	r2, #0
   11058:	dc00      	bgt.n	1105c <__sflush_r+0x24>
   1105a:	e070      	b.n	1113e <__sflush_r+0x106>
   1105c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1105e:	2e00      	cmp	r6, #0
   11060:	d031      	beq.n	110c6 <__sflush_r+0x8e>
   11062:	4642      	mov	r2, r8
   11064:	4641      	mov	r1, r8
   11066:	6815      	ldr	r5, [r2, #0]
   11068:	2200      	movs	r2, #0
   1106a:	b29b      	uxth	r3, r3
   1106c:	600a      	str	r2, [r1, #0]
   1106e:	04da      	lsls	r2, r3, #19
   11070:	d400      	bmi.n	11074 <__sflush_r+0x3c>
   11072:	e069      	b.n	11148 <__sflush_r+0x110>
   11074:	6d22      	ldr	r2, [r4, #80]	; 0x50
   11076:	075b      	lsls	r3, r3, #29
   11078:	d506      	bpl.n	11088 <__sflush_r+0x50>
   1107a:	6863      	ldr	r3, [r4, #4]
   1107c:	1ad2      	subs	r2, r2, r3
   1107e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   11080:	2b00      	cmp	r3, #0
   11082:	d001      	beq.n	11088 <__sflush_r+0x50>
   11084:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   11086:	1ad2      	subs	r2, r2, r3
   11088:	2300      	movs	r3, #0
   1108a:	69e1      	ldr	r1, [r4, #28]
   1108c:	4640      	mov	r0, r8
   1108e:	47b0      	blx	r6
   11090:	1c43      	adds	r3, r0, #1
   11092:	d03d      	beq.n	11110 <__sflush_r+0xd8>
   11094:	89a3      	ldrh	r3, [r4, #12]
   11096:	4a3a      	ldr	r2, [pc, #232]	; (11180 <__sflush_r+0x148>)
   11098:	4013      	ands	r3, r2
   1109a:	2200      	movs	r2, #0
   1109c:	6062      	str	r2, [r4, #4]
   1109e:	6922      	ldr	r2, [r4, #16]
   110a0:	b21b      	sxth	r3, r3
   110a2:	81a3      	strh	r3, [r4, #12]
   110a4:	6022      	str	r2, [r4, #0]
   110a6:	04db      	lsls	r3, r3, #19
   110a8:	d447      	bmi.n	1113a <__sflush_r+0x102>
   110aa:	4643      	mov	r3, r8
   110ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
   110ae:	601d      	str	r5, [r3, #0]
   110b0:	2900      	cmp	r1, #0
   110b2:	d008      	beq.n	110c6 <__sflush_r+0x8e>
   110b4:	0023      	movs	r3, r4
   110b6:	3340      	adds	r3, #64	; 0x40
   110b8:	4299      	cmp	r1, r3
   110ba:	d002      	beq.n	110c2 <__sflush_r+0x8a>
   110bc:	4640      	mov	r0, r8
   110be:	f000 f967 	bl	11390 <_free_r>
   110c2:	2300      	movs	r3, #0
   110c4:	6323      	str	r3, [r4, #48]	; 0x30
   110c6:	2000      	movs	r0, #0
   110c8:	bc04      	pop	{r2}
   110ca:	4690      	mov	r8, r2
   110cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   110ce:	6926      	ldr	r6, [r4, #16]
   110d0:	2e00      	cmp	r6, #0
   110d2:	d0f8      	beq.n	110c6 <__sflush_r+0x8e>
   110d4:	6822      	ldr	r2, [r4, #0]
   110d6:	6026      	str	r6, [r4, #0]
   110d8:	1b95      	subs	r5, r2, r6
   110da:	2200      	movs	r2, #0
   110dc:	079b      	lsls	r3, r3, #30
   110de:	d100      	bne.n	110e2 <__sflush_r+0xaa>
   110e0:	6962      	ldr	r2, [r4, #20]
   110e2:	60a2      	str	r2, [r4, #8]
   110e4:	2d00      	cmp	r5, #0
   110e6:	dc04      	bgt.n	110f2 <__sflush_r+0xba>
   110e8:	e7ed      	b.n	110c6 <__sflush_r+0x8e>
   110ea:	1836      	adds	r6, r6, r0
   110ec:	1a2d      	subs	r5, r5, r0
   110ee:	2d00      	cmp	r5, #0
   110f0:	dde9      	ble.n	110c6 <__sflush_r+0x8e>
   110f2:	002b      	movs	r3, r5
   110f4:	0032      	movs	r2, r6
   110f6:	69e1      	ldr	r1, [r4, #28]
   110f8:	4640      	mov	r0, r8
   110fa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   110fc:	47b8      	blx	r7
   110fe:	2800      	cmp	r0, #0
   11100:	dcf3      	bgt.n	110ea <__sflush_r+0xb2>
   11102:	2240      	movs	r2, #64	; 0x40
   11104:	2001      	movs	r0, #1
   11106:	89a3      	ldrh	r3, [r4, #12]
   11108:	4240      	negs	r0, r0
   1110a:	4313      	orrs	r3, r2
   1110c:	81a3      	strh	r3, [r4, #12]
   1110e:	e7db      	b.n	110c8 <__sflush_r+0x90>
   11110:	4643      	mov	r3, r8
   11112:	6819      	ldr	r1, [r3, #0]
   11114:	291d      	cmp	r1, #29
   11116:	d8f4      	bhi.n	11102 <__sflush_r+0xca>
   11118:	4b1a      	ldr	r3, [pc, #104]	; (11184 <__sflush_r+0x14c>)
   1111a:	2201      	movs	r2, #1
   1111c:	40cb      	lsrs	r3, r1
   1111e:	439a      	bics	r2, r3
   11120:	d1ef      	bne.n	11102 <__sflush_r+0xca>
   11122:	89a3      	ldrh	r3, [r4, #12]
   11124:	4e16      	ldr	r6, [pc, #88]	; (11180 <__sflush_r+0x148>)
   11126:	6062      	str	r2, [r4, #4]
   11128:	4033      	ands	r3, r6
   1112a:	6922      	ldr	r2, [r4, #16]
   1112c:	b21b      	sxth	r3, r3
   1112e:	81a3      	strh	r3, [r4, #12]
   11130:	6022      	str	r2, [r4, #0]
   11132:	04db      	lsls	r3, r3, #19
   11134:	d5b9      	bpl.n	110aa <__sflush_r+0x72>
   11136:	2900      	cmp	r1, #0
   11138:	d1b7      	bne.n	110aa <__sflush_r+0x72>
   1113a:	6520      	str	r0, [r4, #80]	; 0x50
   1113c:	e7b5      	b.n	110aa <__sflush_r+0x72>
   1113e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   11140:	2a00      	cmp	r2, #0
   11142:	dd00      	ble.n	11146 <__sflush_r+0x10e>
   11144:	e78a      	b.n	1105c <__sflush_r+0x24>
   11146:	e7be      	b.n	110c6 <__sflush_r+0x8e>
   11148:	2200      	movs	r2, #0
   1114a:	2301      	movs	r3, #1
   1114c:	69e1      	ldr	r1, [r4, #28]
   1114e:	4640      	mov	r0, r8
   11150:	47b0      	blx	r6
   11152:	0002      	movs	r2, r0
   11154:	1c43      	adds	r3, r0, #1
   11156:	d002      	beq.n	1115e <__sflush_r+0x126>
   11158:	89a3      	ldrh	r3, [r4, #12]
   1115a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1115c:	e78b      	b.n	11076 <__sflush_r+0x3e>
   1115e:	4643      	mov	r3, r8
   11160:	681b      	ldr	r3, [r3, #0]
   11162:	2b00      	cmp	r3, #0
   11164:	d0f8      	beq.n	11158 <__sflush_r+0x120>
   11166:	2b1d      	cmp	r3, #29
   11168:	d001      	beq.n	1116e <__sflush_r+0x136>
   1116a:	2b16      	cmp	r3, #22
   1116c:	d103      	bne.n	11176 <__sflush_r+0x13e>
   1116e:	4643      	mov	r3, r8
   11170:	2000      	movs	r0, #0
   11172:	601d      	str	r5, [r3, #0]
   11174:	e7a8      	b.n	110c8 <__sflush_r+0x90>
   11176:	2140      	movs	r1, #64	; 0x40
   11178:	89a3      	ldrh	r3, [r4, #12]
   1117a:	430b      	orrs	r3, r1
   1117c:	81a3      	strh	r3, [r4, #12]
   1117e:	e7a3      	b.n	110c8 <__sflush_r+0x90>
   11180:	fffff7ff 	.word	0xfffff7ff
   11184:	20400001 	.word	0x20400001

00011188 <_fflush_r>:
   11188:	b570      	push	{r4, r5, r6, lr}
   1118a:	0005      	movs	r5, r0
   1118c:	000c      	movs	r4, r1
   1118e:	2800      	cmp	r0, #0
   11190:	d002      	beq.n	11198 <_fflush_r+0x10>
   11192:	6b83      	ldr	r3, [r0, #56]	; 0x38
   11194:	2b00      	cmp	r3, #0
   11196:	d016      	beq.n	111c6 <_fflush_r+0x3e>
   11198:	220c      	movs	r2, #12
   1119a:	5ea3      	ldrsh	r3, [r4, r2]
   1119c:	2600      	movs	r6, #0
   1119e:	2b00      	cmp	r3, #0
   111a0:	d00f      	beq.n	111c2 <_fflush_r+0x3a>
   111a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   111a4:	07d2      	lsls	r2, r2, #31
   111a6:	d401      	bmi.n	111ac <_fflush_r+0x24>
   111a8:	059b      	lsls	r3, r3, #22
   111aa:	d513      	bpl.n	111d4 <_fflush_r+0x4c>
   111ac:	0021      	movs	r1, r4
   111ae:	0028      	movs	r0, r5
   111b0:	f7ff ff42 	bl	11038 <__sflush_r>
   111b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   111b6:	0006      	movs	r6, r0
   111b8:	07db      	lsls	r3, r3, #31
   111ba:	d402      	bmi.n	111c2 <_fflush_r+0x3a>
   111bc:	89a3      	ldrh	r3, [r4, #12]
   111be:	059b      	lsls	r3, r3, #22
   111c0:	d504      	bpl.n	111cc <_fflush_r+0x44>
   111c2:	0030      	movs	r0, r6
   111c4:	bd70      	pop	{r4, r5, r6, pc}
   111c6:	f000 f839 	bl	1123c <__sinit>
   111ca:	e7e5      	b.n	11198 <_fflush_r+0x10>
   111cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   111ce:	f000 fba9 	bl	11924 <__retarget_lock_release_recursive>
   111d2:	e7f6      	b.n	111c2 <_fflush_r+0x3a>
   111d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   111d6:	f000 fba3 	bl	11920 <__retarget_lock_acquire_recursive>
   111da:	e7e7      	b.n	111ac <_fflush_r+0x24>

000111dc <_cleanup_r>:
   111dc:	b510      	push	{r4, lr}
   111de:	4902      	ldr	r1, [pc, #8]	; (111e8 <_cleanup_r+0xc>)
   111e0:	f000 fb36 	bl	11850 <_fwalk_reent>
   111e4:	bd10      	pop	{r4, pc}
   111e6:	46c0      	nop			; (mov r8, r8)
   111e8:	0001427d 	.word	0x0001427d

000111ec <std.isra.0>:
   111ec:	2300      	movs	r3, #0
   111ee:	b510      	push	{r4, lr}
   111f0:	0004      	movs	r4, r0
   111f2:	6003      	str	r3, [r0, #0]
   111f4:	6043      	str	r3, [r0, #4]
   111f6:	6083      	str	r3, [r0, #8]
   111f8:	8181      	strh	r1, [r0, #12]
   111fa:	6643      	str	r3, [r0, #100]	; 0x64
   111fc:	81c2      	strh	r2, [r0, #14]
   111fe:	6103      	str	r3, [r0, #16]
   11200:	6143      	str	r3, [r0, #20]
   11202:	6183      	str	r3, [r0, #24]
   11204:	2208      	movs	r2, #8
   11206:	2100      	movs	r1, #0
   11208:	305c      	adds	r0, #92	; 0x5c
   1120a:	f7fa fa37 	bl	b67c <memset>
   1120e:	0020      	movs	r0, r4
   11210:	4b06      	ldr	r3, [pc, #24]	; (1122c <std.isra.0+0x40>)
   11212:	61e4      	str	r4, [r4, #28]
   11214:	6223      	str	r3, [r4, #32]
   11216:	4b06      	ldr	r3, [pc, #24]	; (11230 <std.isra.0+0x44>)
   11218:	3058      	adds	r0, #88	; 0x58
   1121a:	6263      	str	r3, [r4, #36]	; 0x24
   1121c:	4b05      	ldr	r3, [pc, #20]	; (11234 <std.isra.0+0x48>)
   1121e:	62a3      	str	r3, [r4, #40]	; 0x28
   11220:	4b05      	ldr	r3, [pc, #20]	; (11238 <std.isra.0+0x4c>)
   11222:	62e3      	str	r3, [r4, #44]	; 0x2c
   11224:	f000 fb78 	bl	11918 <__retarget_lock_init_recursive>
   11228:	bd10      	pop	{r4, pc}
   1122a:	46c0      	nop			; (mov r8, r8)
   1122c:	0000b945 	.word	0x0000b945
   11230:	0000b971 	.word	0x0000b971
   11234:	0000b9ad 	.word	0x0000b9ad
   11238:	0000b9d9 	.word	0x0000b9d9

0001123c <__sinit>:
   1123c:	b570      	push	{r4, r5, r6, lr}
   1123e:	0004      	movs	r4, r0
   11240:	4d14      	ldr	r5, [pc, #80]	; (11294 <__sinit+0x58>)
   11242:	0028      	movs	r0, r5
   11244:	f000 fb6c 	bl	11920 <__retarget_lock_acquire_recursive>
   11248:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1124a:	2b00      	cmp	r3, #0
   1124c:	d11d      	bne.n	1128a <__sinit+0x4e>
   1124e:	4a12      	ldr	r2, [pc, #72]	; (11298 <__sinit+0x5c>)
   11250:	2104      	movs	r1, #4
   11252:	63e2      	str	r2, [r4, #60]	; 0x3c
   11254:	22b8      	movs	r2, #184	; 0xb8
   11256:	0092      	lsls	r2, r2, #2
   11258:	50a3      	str	r3, [r4, r2]
   1125a:	23b9      	movs	r3, #185	; 0xb9
   1125c:	2203      	movs	r2, #3
   1125e:	009b      	lsls	r3, r3, #2
   11260:	50e2      	str	r2, [r4, r3]
   11262:	3308      	adds	r3, #8
   11264:	18e2      	adds	r2, r4, r3
   11266:	3b04      	subs	r3, #4
   11268:	50e2      	str	r2, [r4, r3]
   1126a:	6860      	ldr	r0, [r4, #4]
   1126c:	2200      	movs	r2, #0
   1126e:	f7ff ffbd 	bl	111ec <std.isra.0>
   11272:	2201      	movs	r2, #1
   11274:	2109      	movs	r1, #9
   11276:	68a0      	ldr	r0, [r4, #8]
   11278:	f7ff ffb8 	bl	111ec <std.isra.0>
   1127c:	2202      	movs	r2, #2
   1127e:	2112      	movs	r1, #18
   11280:	68e0      	ldr	r0, [r4, #12]
   11282:	f7ff ffb3 	bl	111ec <std.isra.0>
   11286:	2301      	movs	r3, #1
   11288:	63a3      	str	r3, [r4, #56]	; 0x38
   1128a:	0028      	movs	r0, r5
   1128c:	f000 fb4a 	bl	11924 <__retarget_lock_release_recursive>
   11290:	bd70      	pop	{r4, r5, r6, pc}
   11292:	46c0      	nop			; (mov r8, r8)
   11294:	200018e4 	.word	0x200018e4
   11298:	000111dd 	.word	0x000111dd

0001129c <__sfp_lock_acquire>:
   1129c:	b510      	push	{r4, lr}
   1129e:	4802      	ldr	r0, [pc, #8]	; (112a8 <__sfp_lock_acquire+0xc>)
   112a0:	f000 fb3e 	bl	11920 <__retarget_lock_acquire_recursive>
   112a4:	bd10      	pop	{r4, pc}
   112a6:	46c0      	nop			; (mov r8, r8)
   112a8:	200018f8 	.word	0x200018f8

000112ac <__sfp_lock_release>:
   112ac:	b510      	push	{r4, lr}
   112ae:	4802      	ldr	r0, [pc, #8]	; (112b8 <__sfp_lock_release+0xc>)
   112b0:	f000 fb38 	bl	11924 <__retarget_lock_release_recursive>
   112b4:	bd10      	pop	{r4, pc}
   112b6:	46c0      	nop			; (mov r8, r8)
   112b8:	200018f8 	.word	0x200018f8

000112bc <__libc_fini_array>:
   112bc:	b570      	push	{r4, r5, r6, lr}
   112be:	4b09      	ldr	r3, [pc, #36]	; (112e4 <__libc_fini_array+0x28>)
   112c0:	4c09      	ldr	r4, [pc, #36]	; (112e8 <__libc_fini_array+0x2c>)
   112c2:	1ae4      	subs	r4, r4, r3
   112c4:	10a4      	asrs	r4, r4, #2
   112c6:	d009      	beq.n	112dc <__libc_fini_array+0x20>
   112c8:	4a08      	ldr	r2, [pc, #32]	; (112ec <__libc_fini_array+0x30>)
   112ca:	18a5      	adds	r5, r4, r2
   112cc:	00ad      	lsls	r5, r5, #2
   112ce:	18ed      	adds	r5, r5, r3
   112d0:	682b      	ldr	r3, [r5, #0]
   112d2:	3c01      	subs	r4, #1
   112d4:	4798      	blx	r3
   112d6:	3d04      	subs	r5, #4
   112d8:	2c00      	cmp	r4, #0
   112da:	d1f9      	bne.n	112d0 <__libc_fini_array+0x14>
   112dc:	f008 fa4c 	bl	19778 <_fini>
   112e0:	bd70      	pop	{r4, r5, r6, pc}
   112e2:	46c0      	nop			; (mov r8, r8)
   112e4:	00019784 	.word	0x00019784
   112e8:	00019788 	.word	0x00019788
   112ec:	3fffffff 	.word	0x3fffffff

000112f0 <_malloc_trim_r>:
   112f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112f2:	000c      	movs	r4, r1
   112f4:	0006      	movs	r6, r0
   112f6:	f7fa fa0b 	bl	b710 <__malloc_lock>
   112fa:	4f20      	ldr	r7, [pc, #128]	; (1137c <_malloc_trim_r+0x8c>)
   112fc:	68bb      	ldr	r3, [r7, #8]
   112fe:	685d      	ldr	r5, [r3, #4]
   11300:	2303      	movs	r3, #3
   11302:	439d      	bics	r5, r3
   11304:	4b1e      	ldr	r3, [pc, #120]	; (11380 <_malloc_trim_r+0x90>)
   11306:	1b2c      	subs	r4, r5, r4
   11308:	469c      	mov	ip, r3
   1130a:	4464      	add	r4, ip
   1130c:	0b24      	lsrs	r4, r4, #12
   1130e:	4b1d      	ldr	r3, [pc, #116]	; (11384 <_malloc_trim_r+0x94>)
   11310:	3c01      	subs	r4, #1
   11312:	0324      	lsls	r4, r4, #12
   11314:	429c      	cmp	r4, r3
   11316:	dd07      	ble.n	11328 <_malloc_trim_r+0x38>
   11318:	2100      	movs	r1, #0
   1131a:	0030      	movs	r0, r6
   1131c:	f7fa fa74 	bl	b808 <_sbrk_r>
   11320:	68bb      	ldr	r3, [r7, #8]
   11322:	195b      	adds	r3, r3, r5
   11324:	4298      	cmp	r0, r3
   11326:	d004      	beq.n	11332 <_malloc_trim_r+0x42>
   11328:	0030      	movs	r0, r6
   1132a:	f7fa f9f9 	bl	b720 <__malloc_unlock>
   1132e:	2000      	movs	r0, #0
   11330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11332:	4261      	negs	r1, r4
   11334:	0030      	movs	r0, r6
   11336:	f7fa fa67 	bl	b808 <_sbrk_r>
   1133a:	1c43      	adds	r3, r0, #1
   1133c:	d00d      	beq.n	1135a <_malloc_trim_r+0x6a>
   1133e:	2201      	movs	r2, #1
   11340:	68bb      	ldr	r3, [r7, #8]
   11342:	1b2d      	subs	r5, r5, r4
   11344:	4315      	orrs	r5, r2
   11346:	605d      	str	r5, [r3, #4]
   11348:	4b0f      	ldr	r3, [pc, #60]	; (11388 <_malloc_trim_r+0x98>)
   1134a:	0030      	movs	r0, r6
   1134c:	681a      	ldr	r2, [r3, #0]
   1134e:	1b14      	subs	r4, r2, r4
   11350:	601c      	str	r4, [r3, #0]
   11352:	f7fa f9e5 	bl	b720 <__malloc_unlock>
   11356:	2001      	movs	r0, #1
   11358:	e7ea      	b.n	11330 <_malloc_trim_r+0x40>
   1135a:	2100      	movs	r1, #0
   1135c:	0030      	movs	r0, r6
   1135e:	f7fa fa53 	bl	b808 <_sbrk_r>
   11362:	68ba      	ldr	r2, [r7, #8]
   11364:	1a83      	subs	r3, r0, r2
   11366:	2b0f      	cmp	r3, #15
   11368:	ddde      	ble.n	11328 <_malloc_trim_r+0x38>
   1136a:	4908      	ldr	r1, [pc, #32]	; (1138c <_malloc_trim_r+0x9c>)
   1136c:	6809      	ldr	r1, [r1, #0]
   1136e:	1a40      	subs	r0, r0, r1
   11370:	4905      	ldr	r1, [pc, #20]	; (11388 <_malloc_trim_r+0x98>)
   11372:	6008      	str	r0, [r1, #0]
   11374:	2101      	movs	r1, #1
   11376:	430b      	orrs	r3, r1
   11378:	6053      	str	r3, [r2, #4]
   1137a:	e7d5      	b.n	11328 <_malloc_trim_r+0x38>
   1137c:	200004b8 	.word	0x200004b8
   11380:	00000fef 	.word	0x00000fef
   11384:	00000fff 	.word	0x00000fff
   11388:	20000db4 	.word	0x20000db4
   1138c:	200008c0 	.word	0x200008c0

00011390 <_free_r>:
   11390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11392:	0004      	movs	r4, r0
   11394:	1e0d      	subs	r5, r1, #0
   11396:	d03c      	beq.n	11412 <_free_r+0x82>
   11398:	f7fa f9ba 	bl	b710 <__malloc_lock>
   1139c:	0029      	movs	r1, r5
   1139e:	3908      	subs	r1, #8
   113a0:	6848      	ldr	r0, [r1, #4]
   113a2:	2301      	movs	r3, #1
   113a4:	0005      	movs	r5, r0
   113a6:	2603      	movs	r6, #3
   113a8:	439d      	bics	r5, r3
   113aa:	194a      	adds	r2, r1, r5
   113ac:	469c      	mov	ip, r3
   113ae:	4f61      	ldr	r7, [pc, #388]	; (11534 <_free_r+0x1a4>)
   113b0:	6853      	ldr	r3, [r2, #4]
   113b2:	43b3      	bics	r3, r6
   113b4:	68be      	ldr	r6, [r7, #8]
   113b6:	42b2      	cmp	r2, r6
   113b8:	d056      	beq.n	11468 <_free_r+0xd8>
   113ba:	4666      	mov	r6, ip
   113bc:	6053      	str	r3, [r2, #4]
   113be:	4206      	tst	r6, r0
   113c0:	d10a      	bne.n	113d8 <_free_r+0x48>
   113c2:	003e      	movs	r6, r7
   113c4:	6808      	ldr	r0, [r1, #0]
   113c6:	3608      	adds	r6, #8
   113c8:	1a09      	subs	r1, r1, r0
   113ca:	182d      	adds	r5, r5, r0
   113cc:	6888      	ldr	r0, [r1, #8]
   113ce:	42b0      	cmp	r0, r6
   113d0:	d065      	beq.n	1149e <_free_r+0x10e>
   113d2:	68ce      	ldr	r6, [r1, #12]
   113d4:	60c6      	str	r6, [r0, #12]
   113d6:	60b0      	str	r0, [r6, #8]
   113d8:	2001      	movs	r0, #1
   113da:	18d6      	adds	r6, r2, r3
   113dc:	6876      	ldr	r6, [r6, #4]
   113de:	4206      	tst	r6, r0
   113e0:	d033      	beq.n	1144a <_free_r+0xba>
   113e2:	4b55      	ldr	r3, [pc, #340]	; (11538 <_free_r+0x1a8>)
   113e4:	4328      	orrs	r0, r5
   113e6:	6048      	str	r0, [r1, #4]
   113e8:	514d      	str	r5, [r1, r5]
   113ea:	429d      	cmp	r5, r3
   113ec:	d812      	bhi.n	11414 <_free_r+0x84>
   113ee:	08ed      	lsrs	r5, r5, #3
   113f0:	3bff      	subs	r3, #255	; 0xff
   113f2:	10aa      	asrs	r2, r5, #2
   113f4:	3bff      	subs	r3, #255	; 0xff
   113f6:	4093      	lsls	r3, r2
   113f8:	687a      	ldr	r2, [r7, #4]
   113fa:	00ed      	lsls	r5, r5, #3
   113fc:	4313      	orrs	r3, r2
   113fe:	607b      	str	r3, [r7, #4]
   11400:	19ef      	adds	r7, r5, r7
   11402:	68bb      	ldr	r3, [r7, #8]
   11404:	60cf      	str	r7, [r1, #12]
   11406:	608b      	str	r3, [r1, #8]
   11408:	60b9      	str	r1, [r7, #8]
   1140a:	60d9      	str	r1, [r3, #12]
   1140c:	0020      	movs	r0, r4
   1140e:	f7fa f987 	bl	b720 <__malloc_unlock>
   11412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11414:	0a68      	lsrs	r0, r5, #9
   11416:	2804      	cmp	r0, #4
   11418:	d850      	bhi.n	114bc <_free_r+0x12c>
   1141a:	09a8      	lsrs	r0, r5, #6
   1141c:	0002      	movs	r2, r0
   1141e:	3039      	adds	r0, #57	; 0x39
   11420:	3238      	adds	r2, #56	; 0x38
   11422:	00c0      	lsls	r0, r0, #3
   11424:	1838      	adds	r0, r7, r0
   11426:	3808      	subs	r0, #8
   11428:	6883      	ldr	r3, [r0, #8]
   1142a:	2603      	movs	r6, #3
   1142c:	4298      	cmp	r0, r3
   1142e:	d04c      	beq.n	114ca <_free_r+0x13a>
   11430:	685a      	ldr	r2, [r3, #4]
   11432:	43b2      	bics	r2, r6
   11434:	4295      	cmp	r5, r2
   11436:	d230      	bcs.n	1149a <_free_r+0x10a>
   11438:	689b      	ldr	r3, [r3, #8]
   1143a:	4298      	cmp	r0, r3
   1143c:	d1f8      	bne.n	11430 <_free_r+0xa0>
   1143e:	68c3      	ldr	r3, [r0, #12]
   11440:	60cb      	str	r3, [r1, #12]
   11442:	6088      	str	r0, [r1, #8]
   11444:	6099      	str	r1, [r3, #8]
   11446:	60c1      	str	r1, [r0, #12]
   11448:	e7e0      	b.n	1140c <_free_r+0x7c>
   1144a:	18ed      	adds	r5, r5, r3
   1144c:	4e3b      	ldr	r6, [pc, #236]	; (1153c <_free_r+0x1ac>)
   1144e:	6893      	ldr	r3, [r2, #8]
   11450:	42b3      	cmp	r3, r6
   11452:	d042      	beq.n	114da <_free_r+0x14a>
   11454:	68d2      	ldr	r2, [r2, #12]
   11456:	4328      	orrs	r0, r5
   11458:	60da      	str	r2, [r3, #12]
   1145a:	6093      	str	r3, [r2, #8]
   1145c:	4b36      	ldr	r3, [pc, #216]	; (11538 <_free_r+0x1a8>)
   1145e:	6048      	str	r0, [r1, #4]
   11460:	514d      	str	r5, [r1, r5]
   11462:	429d      	cmp	r5, r3
   11464:	d8d6      	bhi.n	11414 <_free_r+0x84>
   11466:	e7c2      	b.n	113ee <_free_r+0x5e>
   11468:	4662      	mov	r2, ip
   1146a:	18eb      	adds	r3, r5, r3
   1146c:	4202      	tst	r2, r0
   1146e:	d106      	bne.n	1147e <_free_r+0xee>
   11470:	680a      	ldr	r2, [r1, #0]
   11472:	1a89      	subs	r1, r1, r2
   11474:	6888      	ldr	r0, [r1, #8]
   11476:	189b      	adds	r3, r3, r2
   11478:	68ca      	ldr	r2, [r1, #12]
   1147a:	60c2      	str	r2, [r0, #12]
   1147c:	6090      	str	r0, [r2, #8]
   1147e:	2201      	movs	r2, #1
   11480:	431a      	orrs	r2, r3
   11482:	604a      	str	r2, [r1, #4]
   11484:	4a2e      	ldr	r2, [pc, #184]	; (11540 <_free_r+0x1b0>)
   11486:	60b9      	str	r1, [r7, #8]
   11488:	6812      	ldr	r2, [r2, #0]
   1148a:	4293      	cmp	r3, r2
   1148c:	d3be      	bcc.n	1140c <_free_r+0x7c>
   1148e:	4b2d      	ldr	r3, [pc, #180]	; (11544 <_free_r+0x1b4>)
   11490:	0020      	movs	r0, r4
   11492:	6819      	ldr	r1, [r3, #0]
   11494:	f7ff ff2c 	bl	112f0 <_malloc_trim_r>
   11498:	e7b8      	b.n	1140c <_free_r+0x7c>
   1149a:	0018      	movs	r0, r3
   1149c:	e7cf      	b.n	1143e <_free_r+0xae>
   1149e:	4666      	mov	r6, ip
   114a0:	18d0      	adds	r0, r2, r3
   114a2:	6840      	ldr	r0, [r0, #4]
   114a4:	4230      	tst	r0, r6
   114a6:	d13f      	bne.n	11528 <_free_r+0x198>
   114a8:	6890      	ldr	r0, [r2, #8]
   114aa:	195d      	adds	r5, r3, r5
   114ac:	68d3      	ldr	r3, [r2, #12]
   114ae:	60c3      	str	r3, [r0, #12]
   114b0:	6098      	str	r0, [r3, #8]
   114b2:	4663      	mov	r3, ip
   114b4:	432b      	orrs	r3, r5
   114b6:	604b      	str	r3, [r1, #4]
   114b8:	514d      	str	r5, [r1, r5]
   114ba:	e7a7      	b.n	1140c <_free_r+0x7c>
   114bc:	2814      	cmp	r0, #20
   114be:	d814      	bhi.n	114ea <_free_r+0x15a>
   114c0:	0002      	movs	r2, r0
   114c2:	305c      	adds	r0, #92	; 0x5c
   114c4:	325b      	adds	r2, #91	; 0x5b
   114c6:	00c0      	lsls	r0, r0, #3
   114c8:	e7ac      	b.n	11424 <_free_r+0x94>
   114ca:	2301      	movs	r3, #1
   114cc:	1092      	asrs	r2, r2, #2
   114ce:	4093      	lsls	r3, r2
   114d0:	687a      	ldr	r2, [r7, #4]
   114d2:	4313      	orrs	r3, r2
   114d4:	607b      	str	r3, [r7, #4]
   114d6:	0003      	movs	r3, r0
   114d8:	e7b2      	b.n	11440 <_free_r+0xb0>
   114da:	4328      	orrs	r0, r5
   114dc:	60d9      	str	r1, [r3, #12]
   114de:	6099      	str	r1, [r3, #8]
   114e0:	60cb      	str	r3, [r1, #12]
   114e2:	608b      	str	r3, [r1, #8]
   114e4:	6048      	str	r0, [r1, #4]
   114e6:	514d      	str	r5, [r1, r5]
   114e8:	e790      	b.n	1140c <_free_r+0x7c>
   114ea:	2854      	cmp	r0, #84	; 0x54
   114ec:	d805      	bhi.n	114fa <_free_r+0x16a>
   114ee:	0b28      	lsrs	r0, r5, #12
   114f0:	0002      	movs	r2, r0
   114f2:	306f      	adds	r0, #111	; 0x6f
   114f4:	326e      	adds	r2, #110	; 0x6e
   114f6:	00c0      	lsls	r0, r0, #3
   114f8:	e794      	b.n	11424 <_free_r+0x94>
   114fa:	22aa      	movs	r2, #170	; 0xaa
   114fc:	0052      	lsls	r2, r2, #1
   114fe:	4290      	cmp	r0, r2
   11500:	d805      	bhi.n	1150e <_free_r+0x17e>
   11502:	0be8      	lsrs	r0, r5, #15
   11504:	0002      	movs	r2, r0
   11506:	3078      	adds	r0, #120	; 0x78
   11508:	3277      	adds	r2, #119	; 0x77
   1150a:	00c0      	lsls	r0, r0, #3
   1150c:	e78a      	b.n	11424 <_free_r+0x94>
   1150e:	4a0e      	ldr	r2, [pc, #56]	; (11548 <_free_r+0x1b8>)
   11510:	4290      	cmp	r0, r2
   11512:	d805      	bhi.n	11520 <_free_r+0x190>
   11514:	0ca8      	lsrs	r0, r5, #18
   11516:	0002      	movs	r2, r0
   11518:	307d      	adds	r0, #125	; 0x7d
   1151a:	327c      	adds	r2, #124	; 0x7c
   1151c:	00c0      	lsls	r0, r0, #3
   1151e:	e781      	b.n	11424 <_free_r+0x94>
   11520:	20fe      	movs	r0, #254	; 0xfe
   11522:	227e      	movs	r2, #126	; 0x7e
   11524:	0080      	lsls	r0, r0, #2
   11526:	e77d      	b.n	11424 <_free_r+0x94>
   11528:	4663      	mov	r3, ip
   1152a:	432b      	orrs	r3, r5
   1152c:	604b      	str	r3, [r1, #4]
   1152e:	6015      	str	r5, [r2, #0]
   11530:	e76c      	b.n	1140c <_free_r+0x7c>
   11532:	46c0      	nop			; (mov r8, r8)
   11534:	200004b8 	.word	0x200004b8
   11538:	000001ff 	.word	0x000001ff
   1153c:	200004c0 	.word	0x200004c0
   11540:	200008c4 	.word	0x200008c4
   11544:	20000de4 	.word	0x20000de4
   11548:	00000554 	.word	0x00000554

0001154c <__sfvwrite_r>:
   1154c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1154e:	464e      	mov	r6, r9
   11550:	46de      	mov	lr, fp
   11552:	4657      	mov	r7, sl
   11554:	4645      	mov	r5, r8
   11556:	b5e0      	push	{r5, r6, r7, lr}
   11558:	6893      	ldr	r3, [r2, #8]
   1155a:	b083      	sub	sp, #12
   1155c:	9000      	str	r0, [sp, #0]
   1155e:	000c      	movs	r4, r1
   11560:	0016      	movs	r6, r2
   11562:	2b00      	cmp	r3, #0
   11564:	d025      	beq.n	115b2 <__sfvwrite_r+0x66>
   11566:	898b      	ldrh	r3, [r1, #12]
   11568:	071a      	lsls	r2, r3, #28
   1156a:	d52a      	bpl.n	115c2 <__sfvwrite_r+0x76>
   1156c:	690a      	ldr	r2, [r1, #16]
   1156e:	2a00      	cmp	r2, #0
   11570:	d027      	beq.n	115c2 <__sfvwrite_r+0x76>
   11572:	6832      	ldr	r2, [r6, #0]
   11574:	4693      	mov	fp, r2
   11576:	079a      	lsls	r2, r3, #30
   11578:	d52f      	bpl.n	115da <__sfvwrite_r+0x8e>
   1157a:	4bb2      	ldr	r3, [pc, #712]	; (11844 <__sfvwrite_r+0x2f8>)
   1157c:	2700      	movs	r7, #0
   1157e:	2500      	movs	r5, #0
   11580:	4698      	mov	r8, r3
   11582:	46b1      	mov	r9, r6
   11584:	2d00      	cmp	r5, #0
   11586:	d100      	bne.n	1158a <__sfvwrite_r+0x3e>
   11588:	e072      	b.n	11670 <__sfvwrite_r+0x124>
   1158a:	002b      	movs	r3, r5
   1158c:	4545      	cmp	r5, r8
   1158e:	d900      	bls.n	11592 <__sfvwrite_r+0x46>
   11590:	4bac      	ldr	r3, [pc, #688]	; (11844 <__sfvwrite_r+0x2f8>)
   11592:	003a      	movs	r2, r7
   11594:	69e1      	ldr	r1, [r4, #28]
   11596:	9800      	ldr	r0, [sp, #0]
   11598:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1159a:	47b0      	blx	r6
   1159c:	2800      	cmp	r0, #0
   1159e:	dc00      	bgt.n	115a2 <__sfvwrite_r+0x56>
   115a0:	e073      	b.n	1168a <__sfvwrite_r+0x13e>
   115a2:	464b      	mov	r3, r9
   115a4:	689b      	ldr	r3, [r3, #8]
   115a6:	183f      	adds	r7, r7, r0
   115a8:	1a2d      	subs	r5, r5, r0
   115aa:	1a18      	subs	r0, r3, r0
   115ac:	464b      	mov	r3, r9
   115ae:	6098      	str	r0, [r3, #8]
   115b0:	d1e8      	bne.n	11584 <__sfvwrite_r+0x38>
   115b2:	2000      	movs	r0, #0
   115b4:	b003      	add	sp, #12
   115b6:	bc3c      	pop	{r2, r3, r4, r5}
   115b8:	4690      	mov	r8, r2
   115ba:	4699      	mov	r9, r3
   115bc:	46a2      	mov	sl, r4
   115be:	46ab      	mov	fp, r5
   115c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   115c2:	0021      	movs	r1, r4
   115c4:	9800      	ldr	r0, [sp, #0]
   115c6:	f7fe fc39 	bl	fe3c <__swsetup_r>
   115ca:	2800      	cmp	r0, #0
   115cc:	d000      	beq.n	115d0 <__sfvwrite_r+0x84>
   115ce:	e130      	b.n	11832 <__sfvwrite_r+0x2e6>
   115d0:	6832      	ldr	r2, [r6, #0]
   115d2:	89a3      	ldrh	r3, [r4, #12]
   115d4:	4693      	mov	fp, r2
   115d6:	079a      	lsls	r2, r3, #30
   115d8:	d4cf      	bmi.n	1157a <__sfvwrite_r+0x2e>
   115da:	07da      	lsls	r2, r3, #31
   115dc:	d55d      	bpl.n	1169a <__sfvwrite_r+0x14e>
   115de:	2300      	movs	r3, #0
   115e0:	2000      	movs	r0, #0
   115e2:	469a      	mov	sl, r3
   115e4:	2700      	movs	r7, #0
   115e6:	001d      	movs	r5, r3
   115e8:	46b1      	mov	r9, r6
   115ea:	e029      	b.n	11640 <__sfvwrite_r+0xf4>
   115ec:	2800      	cmp	r0, #0
   115ee:	d033      	beq.n	11658 <__sfvwrite_r+0x10c>
   115f0:	46a8      	mov	r8, r5
   115f2:	42bd      	cmp	r5, r7
   115f4:	d900      	bls.n	115f8 <__sfvwrite_r+0xac>
   115f6:	46b8      	mov	r8, r7
   115f8:	6820      	ldr	r0, [r4, #0]
   115fa:	6922      	ldr	r2, [r4, #16]
   115fc:	4646      	mov	r6, r8
   115fe:	6963      	ldr	r3, [r4, #20]
   11600:	4290      	cmp	r0, r2
   11602:	d907      	bls.n	11614 <__sfvwrite_r+0xc8>
   11604:	68a2      	ldr	r2, [r4, #8]
   11606:	4694      	mov	ip, r2
   11608:	449c      	add	ip, r3
   1160a:	4662      	mov	r2, ip
   1160c:	9201      	str	r2, [sp, #4]
   1160e:	45e0      	cmp	r8, ip
   11610:	dd00      	ble.n	11614 <__sfvwrite_r+0xc8>
   11612:	e0e9      	b.n	117e8 <__sfvwrite_r+0x29c>
   11614:	4598      	cmp	r8, r3
   11616:	da00      	bge.n	1161a <__sfvwrite_r+0xce>
   11618:	e08f      	b.n	1173a <__sfvwrite_r+0x1ee>
   1161a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1161c:	4652      	mov	r2, sl
   1161e:	69e1      	ldr	r1, [r4, #28]
   11620:	9800      	ldr	r0, [sp, #0]
   11622:	47b0      	blx	r6
   11624:	1e06      	subs	r6, r0, #0
   11626:	dd30      	ble.n	1168a <__sfvwrite_r+0x13e>
   11628:	1bad      	subs	r5, r5, r6
   1162a:	2001      	movs	r0, #1
   1162c:	2d00      	cmp	r5, #0
   1162e:	d026      	beq.n	1167e <__sfvwrite_r+0x132>
   11630:	464b      	mov	r3, r9
   11632:	689b      	ldr	r3, [r3, #8]
   11634:	44b2      	add	sl, r6
   11636:	1bbf      	subs	r7, r7, r6
   11638:	1b9e      	subs	r6, r3, r6
   1163a:	464b      	mov	r3, r9
   1163c:	609e      	str	r6, [r3, #8]
   1163e:	d0b8      	beq.n	115b2 <__sfvwrite_r+0x66>
   11640:	2f00      	cmp	r7, #0
   11642:	d1d3      	bne.n	115ec <__sfvwrite_r+0xa0>
   11644:	465b      	mov	r3, fp
   11646:	681b      	ldr	r3, [r3, #0]
   11648:	469a      	mov	sl, r3
   1164a:	465b      	mov	r3, fp
   1164c:	685f      	ldr	r7, [r3, #4]
   1164e:	2308      	movs	r3, #8
   11650:	469c      	mov	ip, r3
   11652:	44e3      	add	fp, ip
   11654:	2f00      	cmp	r7, #0
   11656:	d0f5      	beq.n	11644 <__sfvwrite_r+0xf8>
   11658:	003a      	movs	r2, r7
   1165a:	210a      	movs	r1, #10
   1165c:	4650      	mov	r0, sl
   1165e:	f000 fa37 	bl	11ad0 <memchr>
   11662:	2800      	cmp	r0, #0
   11664:	d100      	bne.n	11668 <__sfvwrite_r+0x11c>
   11666:	e0e2      	b.n	1182e <__sfvwrite_r+0x2e2>
   11668:	4653      	mov	r3, sl
   1166a:	3001      	adds	r0, #1
   1166c:	1ac5      	subs	r5, r0, r3
   1166e:	e7bf      	b.n	115f0 <__sfvwrite_r+0xa4>
   11670:	465b      	mov	r3, fp
   11672:	681f      	ldr	r7, [r3, #0]
   11674:	685d      	ldr	r5, [r3, #4]
   11676:	2308      	movs	r3, #8
   11678:	469c      	mov	ip, r3
   1167a:	44e3      	add	fp, ip
   1167c:	e782      	b.n	11584 <__sfvwrite_r+0x38>
   1167e:	0021      	movs	r1, r4
   11680:	9800      	ldr	r0, [sp, #0]
   11682:	f7ff fd81 	bl	11188 <_fflush_r>
   11686:	2800      	cmp	r0, #0
   11688:	d0d2      	beq.n	11630 <__sfvwrite_r+0xe4>
   1168a:	220c      	movs	r2, #12
   1168c:	5ea3      	ldrsh	r3, [r4, r2]
   1168e:	2240      	movs	r2, #64	; 0x40
   11690:	2001      	movs	r0, #1
   11692:	4313      	orrs	r3, r2
   11694:	81a3      	strh	r3, [r4, #12]
   11696:	4240      	negs	r0, r0
   11698:	e78c      	b.n	115b4 <__sfvwrite_r+0x68>
   1169a:	2200      	movs	r2, #0
   1169c:	4691      	mov	r9, r2
   1169e:	464d      	mov	r5, r9
   116a0:	2d00      	cmp	r5, #0
   116a2:	d023      	beq.n	116ec <__sfvwrite_r+0x1a0>
   116a4:	68a2      	ldr	r2, [r4, #8]
   116a6:	4690      	mov	r8, r2
   116a8:	2280      	movs	r2, #128	; 0x80
   116aa:	0092      	lsls	r2, r2, #2
   116ac:	4213      	tst	r3, r2
   116ae:	d026      	beq.n	116fe <__sfvwrite_r+0x1b2>
   116b0:	46c2      	mov	sl, r8
   116b2:	4545      	cmp	r5, r8
   116b4:	d34d      	bcc.n	11752 <__sfvwrite_r+0x206>
   116b6:	2290      	movs	r2, #144	; 0x90
   116b8:	00d2      	lsls	r2, r2, #3
   116ba:	4213      	tst	r3, r2
   116bc:	d14e      	bne.n	1175c <__sfvwrite_r+0x210>
   116be:	002f      	movs	r7, r5
   116c0:	6820      	ldr	r0, [r4, #0]
   116c2:	4652      	mov	r2, sl
   116c4:	4649      	mov	r1, r9
   116c6:	f000 fa43 	bl	11b50 <memmove>
   116ca:	4642      	mov	r2, r8
   116cc:	68a3      	ldr	r3, [r4, #8]
   116ce:	1a98      	subs	r0, r3, r2
   116d0:	6823      	ldr	r3, [r4, #0]
   116d2:	60a0      	str	r0, [r4, #8]
   116d4:	4453      	add	r3, sl
   116d6:	6023      	str	r3, [r4, #0]
   116d8:	68b3      	ldr	r3, [r6, #8]
   116da:	44b9      	add	r9, r7
   116dc:	1bed      	subs	r5, r5, r7
   116de:	1bdf      	subs	r7, r3, r7
   116e0:	60b7      	str	r7, [r6, #8]
   116e2:	d100      	bne.n	116e6 <__sfvwrite_r+0x19a>
   116e4:	e765      	b.n	115b2 <__sfvwrite_r+0x66>
   116e6:	89a3      	ldrh	r3, [r4, #12]
   116e8:	2d00      	cmp	r5, #0
   116ea:	d1db      	bne.n	116a4 <__sfvwrite_r+0x158>
   116ec:	465a      	mov	r2, fp
   116ee:	6812      	ldr	r2, [r2, #0]
   116f0:	4691      	mov	r9, r2
   116f2:	465a      	mov	r2, fp
   116f4:	6855      	ldr	r5, [r2, #4]
   116f6:	2208      	movs	r2, #8
   116f8:	4694      	mov	ip, r2
   116fa:	44e3      	add	fp, ip
   116fc:	e7d0      	b.n	116a0 <__sfvwrite_r+0x154>
   116fe:	6820      	ldr	r0, [r4, #0]
   11700:	6923      	ldr	r3, [r4, #16]
   11702:	4298      	cmp	r0, r3
   11704:	d802      	bhi.n	1170c <__sfvwrite_r+0x1c0>
   11706:	6967      	ldr	r7, [r4, #20]
   11708:	42bd      	cmp	r5, r7
   1170a:	d259      	bcs.n	117c0 <__sfvwrite_r+0x274>
   1170c:	4647      	mov	r7, r8
   1170e:	42af      	cmp	r7, r5
   11710:	d900      	bls.n	11714 <__sfvwrite_r+0x1c8>
   11712:	002f      	movs	r7, r5
   11714:	003a      	movs	r2, r7
   11716:	4649      	mov	r1, r9
   11718:	f000 fa1a 	bl	11b50 <memmove>
   1171c:	68a3      	ldr	r3, [r4, #8]
   1171e:	6822      	ldr	r2, [r4, #0]
   11720:	1bdb      	subs	r3, r3, r7
   11722:	19d2      	adds	r2, r2, r7
   11724:	60a3      	str	r3, [r4, #8]
   11726:	6022      	str	r2, [r4, #0]
   11728:	2b00      	cmp	r3, #0
   1172a:	d1d5      	bne.n	116d8 <__sfvwrite_r+0x18c>
   1172c:	0021      	movs	r1, r4
   1172e:	9800      	ldr	r0, [sp, #0]
   11730:	f7ff fd2a 	bl	11188 <_fflush_r>
   11734:	2800      	cmp	r0, #0
   11736:	d0cf      	beq.n	116d8 <__sfvwrite_r+0x18c>
   11738:	e7a7      	b.n	1168a <__sfvwrite_r+0x13e>
   1173a:	4642      	mov	r2, r8
   1173c:	4651      	mov	r1, sl
   1173e:	f000 fa07 	bl	11b50 <memmove>
   11742:	4642      	mov	r2, r8
   11744:	68a3      	ldr	r3, [r4, #8]
   11746:	1a9b      	subs	r3, r3, r2
   11748:	60a3      	str	r3, [r4, #8]
   1174a:	6823      	ldr	r3, [r4, #0]
   1174c:	4443      	add	r3, r8
   1174e:	6023      	str	r3, [r4, #0]
   11750:	e76a      	b.n	11628 <__sfvwrite_r+0xdc>
   11752:	46a8      	mov	r8, r5
   11754:	6820      	ldr	r0, [r4, #0]
   11756:	002f      	movs	r7, r5
   11758:	46aa      	mov	sl, r5
   1175a:	e7b2      	b.n	116c2 <__sfvwrite_r+0x176>
   1175c:	6921      	ldr	r1, [r4, #16]
   1175e:	6822      	ldr	r2, [r4, #0]
   11760:	1a52      	subs	r2, r2, r1
   11762:	4692      	mov	sl, r2
   11764:	6962      	ldr	r2, [r4, #20]
   11766:	0057      	lsls	r7, r2, #1
   11768:	18bf      	adds	r7, r7, r2
   1176a:	0ffa      	lsrs	r2, r7, #31
   1176c:	19d7      	adds	r7, r2, r7
   1176e:	4652      	mov	r2, sl
   11770:	1c50      	adds	r0, r2, #1
   11772:	107f      	asrs	r7, r7, #1
   11774:	1940      	adds	r0, r0, r5
   11776:	003a      	movs	r2, r7
   11778:	42b8      	cmp	r0, r7
   1177a:	d901      	bls.n	11780 <__sfvwrite_r+0x234>
   1177c:	0007      	movs	r7, r0
   1177e:	0002      	movs	r2, r0
   11780:	055b      	lsls	r3, r3, #21
   11782:	d542      	bpl.n	1180a <__sfvwrite_r+0x2be>
   11784:	0011      	movs	r1, r2
   11786:	9800      	ldr	r0, [sp, #0]
   11788:	f7f9 fc5c 	bl	b044 <_malloc_r>
   1178c:	4680      	mov	r8, r0
   1178e:	1e03      	subs	r3, r0, #0
   11790:	d052      	beq.n	11838 <__sfvwrite_r+0x2ec>
   11792:	4652      	mov	r2, sl
   11794:	6921      	ldr	r1, [r4, #16]
   11796:	f7f9 ff2f 	bl	b5f8 <memcpy>
   1179a:	89a3      	ldrh	r3, [r4, #12]
   1179c:	4a2a      	ldr	r2, [pc, #168]	; (11848 <__sfvwrite_r+0x2fc>)
   1179e:	4013      	ands	r3, r2
   117a0:	2280      	movs	r2, #128	; 0x80
   117a2:	4313      	orrs	r3, r2
   117a4:	81a3      	strh	r3, [r4, #12]
   117a6:	4643      	mov	r3, r8
   117a8:	4640      	mov	r0, r8
   117aa:	6123      	str	r3, [r4, #16]
   117ac:	4653      	mov	r3, sl
   117ae:	4450      	add	r0, sl
   117b0:	6167      	str	r7, [r4, #20]
   117b2:	1aff      	subs	r7, r7, r3
   117b4:	60a7      	str	r7, [r4, #8]
   117b6:	6020      	str	r0, [r4, #0]
   117b8:	46a8      	mov	r8, r5
   117ba:	002f      	movs	r7, r5
   117bc:	46aa      	mov	sl, r5
   117be:	e780      	b.n	116c2 <__sfvwrite_r+0x176>
   117c0:	4b22      	ldr	r3, [pc, #136]	; (1184c <__sfvwrite_r+0x300>)
   117c2:	0028      	movs	r0, r5
   117c4:	429d      	cmp	r5, r3
   117c6:	d900      	bls.n	117ca <__sfvwrite_r+0x27e>
   117c8:	0018      	movs	r0, r3
   117ca:	0039      	movs	r1, r7
   117cc:	f7f7 fd7c 	bl	92c8 <__divsi3>
   117d0:	003b      	movs	r3, r7
   117d2:	464a      	mov	r2, r9
   117d4:	4343      	muls	r3, r0
   117d6:	69e1      	ldr	r1, [r4, #28]
   117d8:	9800      	ldr	r0, [sp, #0]
   117da:	6a67      	ldr	r7, [r4, #36]	; 0x24
   117dc:	47b8      	blx	r7
   117de:	2800      	cmp	r0, #0
   117e0:	dc00      	bgt.n	117e4 <__sfvwrite_r+0x298>
   117e2:	e752      	b.n	1168a <__sfvwrite_r+0x13e>
   117e4:	0007      	movs	r7, r0
   117e6:	e777      	b.n	116d8 <__sfvwrite_r+0x18c>
   117e8:	4666      	mov	r6, ip
   117ea:	4651      	mov	r1, sl
   117ec:	f000 f9b0 	bl	11b50 <memmove>
   117f0:	46b4      	mov	ip, r6
   117f2:	6823      	ldr	r3, [r4, #0]
   117f4:	0021      	movs	r1, r4
   117f6:	4463      	add	r3, ip
   117f8:	6023      	str	r3, [r4, #0]
   117fa:	9800      	ldr	r0, [sp, #0]
   117fc:	f7ff fcc4 	bl	11188 <_fflush_r>
   11800:	2800      	cmp	r0, #0
   11802:	d000      	beq.n	11806 <__sfvwrite_r+0x2ba>
   11804:	e741      	b.n	1168a <__sfvwrite_r+0x13e>
   11806:	9e01      	ldr	r6, [sp, #4]
   11808:	e70e      	b.n	11628 <__sfvwrite_r+0xdc>
   1180a:	9800      	ldr	r0, [sp, #0]
   1180c:	f000 feb2 	bl	12574 <_realloc_r>
   11810:	4680      	mov	r8, r0
   11812:	2800      	cmp	r0, #0
   11814:	d1c7      	bne.n	117a6 <__sfvwrite_r+0x25a>
   11816:	9d00      	ldr	r5, [sp, #0]
   11818:	6921      	ldr	r1, [r4, #16]
   1181a:	0028      	movs	r0, r5
   1181c:	f7ff fdb8 	bl	11390 <_free_r>
   11820:	2280      	movs	r2, #128	; 0x80
   11822:	89a3      	ldrh	r3, [r4, #12]
   11824:	4393      	bics	r3, r2
   11826:	3a74      	subs	r2, #116	; 0x74
   11828:	b21b      	sxth	r3, r3
   1182a:	602a      	str	r2, [r5, #0]
   1182c:	e72f      	b.n	1168e <__sfvwrite_r+0x142>
   1182e:	1c7d      	adds	r5, r7, #1
   11830:	e6de      	b.n	115f0 <__sfvwrite_r+0xa4>
   11832:	2001      	movs	r0, #1
   11834:	4240      	negs	r0, r0
   11836:	e6bd      	b.n	115b4 <__sfvwrite_r+0x68>
   11838:	9a00      	ldr	r2, [sp, #0]
   1183a:	330c      	adds	r3, #12
   1183c:	6013      	str	r3, [r2, #0]
   1183e:	220c      	movs	r2, #12
   11840:	5ea3      	ldrsh	r3, [r4, r2]
   11842:	e724      	b.n	1168e <__sfvwrite_r+0x142>
   11844:	7ffffc00 	.word	0x7ffffc00
   11848:	fffffb7f 	.word	0xfffffb7f
   1184c:	7fffffff 	.word	0x7fffffff

00011850 <_fwalk_reent>:
   11850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11852:	4647      	mov	r7, r8
   11854:	46ce      	mov	lr, r9
   11856:	b580      	push	{r7, lr}
   11858:	27b8      	movs	r7, #184	; 0xb8
   1185a:	4680      	mov	r8, r0
   1185c:	00bf      	lsls	r7, r7, #2
   1185e:	4447      	add	r7, r8
   11860:	4689      	mov	r9, r1
   11862:	2600      	movs	r6, #0
   11864:	2f00      	cmp	r7, #0
   11866:	d014      	beq.n	11892 <_fwalk_reent+0x42>
   11868:	687b      	ldr	r3, [r7, #4]
   1186a:	68bc      	ldr	r4, [r7, #8]
   1186c:	1e5d      	subs	r5, r3, #1
   1186e:	d40d      	bmi.n	1188c <_fwalk_reent+0x3c>
   11870:	89a3      	ldrh	r3, [r4, #12]
   11872:	2b01      	cmp	r3, #1
   11874:	d907      	bls.n	11886 <_fwalk_reent+0x36>
   11876:	220e      	movs	r2, #14
   11878:	5ea3      	ldrsh	r3, [r4, r2]
   1187a:	3301      	adds	r3, #1
   1187c:	d003      	beq.n	11886 <_fwalk_reent+0x36>
   1187e:	0021      	movs	r1, r4
   11880:	4640      	mov	r0, r8
   11882:	47c8      	blx	r9
   11884:	4306      	orrs	r6, r0
   11886:	3468      	adds	r4, #104	; 0x68
   11888:	3d01      	subs	r5, #1
   1188a:	d2f1      	bcs.n	11870 <_fwalk_reent+0x20>
   1188c:	683f      	ldr	r7, [r7, #0]
   1188e:	2f00      	cmp	r7, #0
   11890:	d1ea      	bne.n	11868 <_fwalk_reent+0x18>
   11892:	0030      	movs	r0, r6
   11894:	bc0c      	pop	{r2, r3}
   11896:	4690      	mov	r8, r2
   11898:	4699      	mov	r9, r3
   1189a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001189c <iswspace>:
   1189c:	b510      	push	{r4, lr}
   1189e:	0004      	movs	r4, r0
   118a0:	2000      	movs	r0, #0
   118a2:	2cff      	cmp	r4, #255	; 0xff
   118a4:	d805      	bhi.n	118b2 <iswspace+0x16>
   118a6:	f000 f819 	bl	118dc <__locale_ctype_ptr>
   118aa:	1904      	adds	r4, r0, r4
   118ac:	2008      	movs	r0, #8
   118ae:	7863      	ldrb	r3, [r4, #1]
   118b0:	4018      	ands	r0, r3
   118b2:	bd10      	pop	{r4, pc}

000118b4 <__locale_mb_cur_max>:
   118b4:	4b05      	ldr	r3, [pc, #20]	; (118cc <__locale_mb_cur_max+0x18>)
   118b6:	681b      	ldr	r3, [r3, #0]
   118b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   118ba:	2b00      	cmp	r3, #0
   118bc:	d003      	beq.n	118c6 <__locale_mb_cur_max+0x12>
   118be:	2294      	movs	r2, #148	; 0x94
   118c0:	0052      	lsls	r2, r2, #1
   118c2:	5c98      	ldrb	r0, [r3, r2]
   118c4:	4770      	bx	lr
   118c6:	4b02      	ldr	r3, [pc, #8]	; (118d0 <__locale_mb_cur_max+0x1c>)
   118c8:	e7f9      	b.n	118be <__locale_mb_cur_max+0xa>
   118ca:	46c0      	nop			; (mov r8, r8)
   118cc:	20000088 	.word	0x20000088
   118d0:	200008cc 	.word	0x200008cc

000118d4 <__locale_ctype_ptr_l>:
   118d4:	23ec      	movs	r3, #236	; 0xec
   118d6:	58c0      	ldr	r0, [r0, r3]
   118d8:	4770      	bx	lr
   118da:	46c0      	nop			; (mov r8, r8)

000118dc <__locale_ctype_ptr>:
   118dc:	4b04      	ldr	r3, [pc, #16]	; (118f0 <__locale_ctype_ptr+0x14>)
   118de:	681b      	ldr	r3, [r3, #0]
   118e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   118e2:	2b00      	cmp	r3, #0
   118e4:	d002      	beq.n	118ec <__locale_ctype_ptr+0x10>
   118e6:	22ec      	movs	r2, #236	; 0xec
   118e8:	5898      	ldr	r0, [r3, r2]
   118ea:	4770      	bx	lr
   118ec:	4b01      	ldr	r3, [pc, #4]	; (118f4 <__locale_ctype_ptr+0x18>)
   118ee:	e7fa      	b.n	118e6 <__locale_ctype_ptr+0xa>
   118f0:	20000088 	.word	0x20000088
   118f4:	200008cc 	.word	0x200008cc

000118f8 <__localeconv_l>:
   118f8:	30f0      	adds	r0, #240	; 0xf0
   118fa:	4770      	bx	lr

000118fc <_localeconv_r>:
   118fc:	4b04      	ldr	r3, [pc, #16]	; (11910 <_localeconv_r+0x14>)
   118fe:	681b      	ldr	r3, [r3, #0]
   11900:	6b58      	ldr	r0, [r3, #52]	; 0x34
   11902:	2800      	cmp	r0, #0
   11904:	d001      	beq.n	1190a <_localeconv_r+0xe>
   11906:	30f0      	adds	r0, #240	; 0xf0
   11908:	4770      	bx	lr
   1190a:	4802      	ldr	r0, [pc, #8]	; (11914 <_localeconv_r+0x18>)
   1190c:	e7fb      	b.n	11906 <_localeconv_r+0xa>
   1190e:	46c0      	nop			; (mov r8, r8)
   11910:	20000088 	.word	0x20000088
   11914:	200008cc 	.word	0x200008cc

00011918 <__retarget_lock_init_recursive>:
   11918:	4770      	bx	lr
   1191a:	46c0      	nop			; (mov r8, r8)

0001191c <__retarget_lock_close_recursive>:
   1191c:	4770      	bx	lr
   1191e:	46c0      	nop			; (mov r8, r8)

00011920 <__retarget_lock_acquire_recursive>:
   11920:	4770      	bx	lr
   11922:	46c0      	nop			; (mov r8, r8)

00011924 <__retarget_lock_release_recursive>:
   11924:	4770      	bx	lr
   11926:	46c0      	nop			; (mov r8, r8)

00011928 <_lseek_r>:
   11928:	b570      	push	{r4, r5, r6, lr}
   1192a:	0005      	movs	r5, r0
   1192c:	0008      	movs	r0, r1
   1192e:	0011      	movs	r1, r2
   11930:	2200      	movs	r2, #0
   11932:	4c06      	ldr	r4, [pc, #24]	; (1194c <_lseek_r+0x24>)
   11934:	6022      	str	r2, [r4, #0]
   11936:	001a      	movs	r2, r3
   11938:	f7ef f93c 	bl	bb4 <_lseek>
   1193c:	1c43      	adds	r3, r0, #1
   1193e:	d000      	beq.n	11942 <_lseek_r+0x1a>
   11940:	bd70      	pop	{r4, r5, r6, pc}
   11942:	6823      	ldr	r3, [r4, #0]
   11944:	2b00      	cmp	r3, #0
   11946:	d0fb      	beq.n	11940 <_lseek_r+0x18>
   11948:	602b      	str	r3, [r5, #0]
   1194a:	e7f9      	b.n	11940 <_lseek_r+0x18>
   1194c:	200018fc 	.word	0x200018fc

00011950 <__swhatbuf_r>:
   11950:	b570      	push	{r4, r5, r6, lr}
   11952:	000c      	movs	r4, r1
   11954:	001e      	movs	r6, r3
   11956:	230e      	movs	r3, #14
   11958:	5ec9      	ldrsh	r1, [r1, r3]
   1195a:	b090      	sub	sp, #64	; 0x40
   1195c:	0015      	movs	r5, r2
   1195e:	2900      	cmp	r1, #0
   11960:	db15      	blt.n	1198e <__swhatbuf_r+0x3e>
   11962:	aa01      	add	r2, sp, #4
   11964:	f002 fd6a 	bl	1443c <_fstat_r>
   11968:	2800      	cmp	r0, #0
   1196a:	db10      	blt.n	1198e <__swhatbuf_r+0x3e>
   1196c:	22f0      	movs	r2, #240	; 0xf0
   1196e:	9b02      	ldr	r3, [sp, #8]
   11970:	0212      	lsls	r2, r2, #8
   11972:	4013      	ands	r3, r2
   11974:	4a0d      	ldr	r2, [pc, #52]	; (119ac <__swhatbuf_r+0x5c>)
   11976:	2080      	movs	r0, #128	; 0x80
   11978:	4694      	mov	ip, r2
   1197a:	4463      	add	r3, ip
   1197c:	425a      	negs	r2, r3
   1197e:	4153      	adcs	r3, r2
   11980:	6033      	str	r3, [r6, #0]
   11982:	2380      	movs	r3, #128	; 0x80
   11984:	00db      	lsls	r3, r3, #3
   11986:	602b      	str	r3, [r5, #0]
   11988:	0100      	lsls	r0, r0, #4
   1198a:	b010      	add	sp, #64	; 0x40
   1198c:	bd70      	pop	{r4, r5, r6, pc}
   1198e:	2300      	movs	r3, #0
   11990:	6033      	str	r3, [r6, #0]
   11992:	89a3      	ldrh	r3, [r4, #12]
   11994:	061b      	lsls	r3, r3, #24
   11996:	d503      	bpl.n	119a0 <__swhatbuf_r+0x50>
   11998:	2340      	movs	r3, #64	; 0x40
   1199a:	2000      	movs	r0, #0
   1199c:	602b      	str	r3, [r5, #0]
   1199e:	e7f4      	b.n	1198a <__swhatbuf_r+0x3a>
   119a0:	2380      	movs	r3, #128	; 0x80
   119a2:	00db      	lsls	r3, r3, #3
   119a4:	602b      	str	r3, [r5, #0]
   119a6:	2000      	movs	r0, #0
   119a8:	e7ef      	b.n	1198a <__swhatbuf_r+0x3a>
   119aa:	46c0      	nop			; (mov r8, r8)
   119ac:	ffffe000 	.word	0xffffe000

000119b0 <__smakebuf_r>:
   119b0:	b570      	push	{r4, r5, r6, lr}
   119b2:	898b      	ldrh	r3, [r1, #12]
   119b4:	b082      	sub	sp, #8
   119b6:	0006      	movs	r6, r0
   119b8:	000c      	movs	r4, r1
   119ba:	079b      	lsls	r3, r3, #30
   119bc:	d507      	bpl.n	119ce <__smakebuf_r+0x1e>
   119be:	0023      	movs	r3, r4
   119c0:	3343      	adds	r3, #67	; 0x43
   119c2:	6023      	str	r3, [r4, #0]
   119c4:	6123      	str	r3, [r4, #16]
   119c6:	2301      	movs	r3, #1
   119c8:	6163      	str	r3, [r4, #20]
   119ca:	b002      	add	sp, #8
   119cc:	bd70      	pop	{r4, r5, r6, pc}
   119ce:	ab01      	add	r3, sp, #4
   119d0:	466a      	mov	r2, sp
   119d2:	f7ff ffbd 	bl	11950 <__swhatbuf_r>
   119d6:	9900      	ldr	r1, [sp, #0]
   119d8:	0005      	movs	r5, r0
   119da:	0030      	movs	r0, r6
   119dc:	f7f9 fb32 	bl	b044 <_malloc_r>
   119e0:	2800      	cmp	r0, #0
   119e2:	d01e      	beq.n	11a22 <__smakebuf_r+0x72>
   119e4:	2280      	movs	r2, #128	; 0x80
   119e6:	4b15      	ldr	r3, [pc, #84]	; (11a3c <__smakebuf_r+0x8c>)
   119e8:	63f3      	str	r3, [r6, #60]	; 0x3c
   119ea:	89a3      	ldrh	r3, [r4, #12]
   119ec:	6020      	str	r0, [r4, #0]
   119ee:	4313      	orrs	r3, r2
   119f0:	9a00      	ldr	r2, [sp, #0]
   119f2:	b21b      	sxth	r3, r3
   119f4:	6162      	str	r2, [r4, #20]
   119f6:	9a01      	ldr	r2, [sp, #4]
   119f8:	81a3      	strh	r3, [r4, #12]
   119fa:	6120      	str	r0, [r4, #16]
   119fc:	2a00      	cmp	r2, #0
   119fe:	d102      	bne.n	11a06 <__smakebuf_r+0x56>
   11a00:	432b      	orrs	r3, r5
   11a02:	81a3      	strh	r3, [r4, #12]
   11a04:	e7e1      	b.n	119ca <__smakebuf_r+0x1a>
   11a06:	230e      	movs	r3, #14
   11a08:	5ee1      	ldrsh	r1, [r4, r3]
   11a0a:	0030      	movs	r0, r6
   11a0c:	f003 f8fe 	bl	14c0c <_isatty_r>
   11a10:	2800      	cmp	r0, #0
   11a12:	d010      	beq.n	11a36 <__smakebuf_r+0x86>
   11a14:	2203      	movs	r2, #3
   11a16:	89a3      	ldrh	r3, [r4, #12]
   11a18:	4393      	bics	r3, r2
   11a1a:	2201      	movs	r2, #1
   11a1c:	4313      	orrs	r3, r2
   11a1e:	b21b      	sxth	r3, r3
   11a20:	e7ee      	b.n	11a00 <__smakebuf_r+0x50>
   11a22:	220c      	movs	r2, #12
   11a24:	5ea3      	ldrsh	r3, [r4, r2]
   11a26:	059a      	lsls	r2, r3, #22
   11a28:	d4cf      	bmi.n	119ca <__smakebuf_r+0x1a>
   11a2a:	2203      	movs	r2, #3
   11a2c:	4393      	bics	r3, r2
   11a2e:	2202      	movs	r2, #2
   11a30:	4313      	orrs	r3, r2
   11a32:	81a3      	strh	r3, [r4, #12]
   11a34:	e7c3      	b.n	119be <__smakebuf_r+0xe>
   11a36:	220c      	movs	r2, #12
   11a38:	5ea3      	ldrsh	r3, [r4, r2]
   11a3a:	e7e1      	b.n	11a00 <__smakebuf_r+0x50>
   11a3c:	000111dd 	.word	0x000111dd

00011a40 <_mbrtowc_r>:
   11a40:	b530      	push	{r4, r5, lr}
   11a42:	0004      	movs	r4, r0
   11a44:	b083      	sub	sp, #12
   11a46:	2a00      	cmp	r2, #0
   11a48:	d013      	beq.n	11a72 <_mbrtowc_r+0x32>
   11a4a:	4813      	ldr	r0, [pc, #76]	; (11a98 <_mbrtowc_r+0x58>)
   11a4c:	6800      	ldr	r0, [r0, #0]
   11a4e:	6b40      	ldr	r0, [r0, #52]	; 0x34
   11a50:	2800      	cmp	r0, #0
   11a52:	d01d      	beq.n	11a90 <_mbrtowc_r+0x50>
   11a54:	9d06      	ldr	r5, [sp, #24]
   11a56:	9500      	str	r5, [sp, #0]
   11a58:	25e4      	movs	r5, #228	; 0xe4
   11a5a:	5945      	ldr	r5, [r0, r5]
   11a5c:	0020      	movs	r0, r4
   11a5e:	47a8      	blx	r5
   11a60:	1c43      	adds	r3, r0, #1
   11a62:	d104      	bne.n	11a6e <_mbrtowc_r+0x2e>
   11a64:	2300      	movs	r3, #0
   11a66:	9a06      	ldr	r2, [sp, #24]
   11a68:	6013      	str	r3, [r2, #0]
   11a6a:	338a      	adds	r3, #138	; 0x8a
   11a6c:	6023      	str	r3, [r4, #0]
   11a6e:	b003      	add	sp, #12
   11a70:	bd30      	pop	{r4, r5, pc}
   11a72:	4b09      	ldr	r3, [pc, #36]	; (11a98 <_mbrtowc_r+0x58>)
   11a74:	681b      	ldr	r3, [r3, #0]
   11a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   11a78:	2b00      	cmp	r3, #0
   11a7a:	d00b      	beq.n	11a94 <_mbrtowc_r+0x54>
   11a7c:	9a06      	ldr	r2, [sp, #24]
   11a7e:	2100      	movs	r1, #0
   11a80:	9200      	str	r2, [sp, #0]
   11a82:	22e4      	movs	r2, #228	; 0xe4
   11a84:	0020      	movs	r0, r4
   11a86:	589d      	ldr	r5, [r3, r2]
   11a88:	2301      	movs	r3, #1
   11a8a:	4a04      	ldr	r2, [pc, #16]	; (11a9c <_mbrtowc_r+0x5c>)
   11a8c:	47a8      	blx	r5
   11a8e:	e7e7      	b.n	11a60 <_mbrtowc_r+0x20>
   11a90:	4803      	ldr	r0, [pc, #12]	; (11aa0 <_mbrtowc_r+0x60>)
   11a92:	e7df      	b.n	11a54 <_mbrtowc_r+0x14>
   11a94:	4b02      	ldr	r3, [pc, #8]	; (11aa0 <_mbrtowc_r+0x60>)
   11a96:	e7f1      	b.n	11a7c <_mbrtowc_r+0x3c>
   11a98:	20000088 	.word	0x20000088
   11a9c:	00016954 	.word	0x00016954
   11aa0:	200008cc 	.word	0x200008cc

00011aa4 <__ascii_mbtowc>:
   11aa4:	b082      	sub	sp, #8
   11aa6:	2900      	cmp	r1, #0
   11aa8:	d00a      	beq.n	11ac0 <__ascii_mbtowc+0x1c>
   11aaa:	2a00      	cmp	r2, #0
   11aac:	d00b      	beq.n	11ac6 <__ascii_mbtowc+0x22>
   11aae:	2b00      	cmp	r3, #0
   11ab0:	d00b      	beq.n	11aca <__ascii_mbtowc+0x26>
   11ab2:	7813      	ldrb	r3, [r2, #0]
   11ab4:	600b      	str	r3, [r1, #0]
   11ab6:	7810      	ldrb	r0, [r2, #0]
   11ab8:	1e43      	subs	r3, r0, #1
   11aba:	4198      	sbcs	r0, r3
   11abc:	b002      	add	sp, #8
   11abe:	4770      	bx	lr
   11ac0:	a901      	add	r1, sp, #4
   11ac2:	2a00      	cmp	r2, #0
   11ac4:	d1f3      	bne.n	11aae <__ascii_mbtowc+0xa>
   11ac6:	2000      	movs	r0, #0
   11ac8:	e7f8      	b.n	11abc <__ascii_mbtowc+0x18>
   11aca:	2002      	movs	r0, #2
   11acc:	4240      	negs	r0, r0
   11ace:	e7f5      	b.n	11abc <__ascii_mbtowc+0x18>

00011ad0 <memchr>:
   11ad0:	b570      	push	{r4, r5, r6, lr}
   11ad2:	b2cd      	uxtb	r5, r1
   11ad4:	0783      	lsls	r3, r0, #30
   11ad6:	d034      	beq.n	11b42 <memchr+0x72>
   11ad8:	1e54      	subs	r4, r2, #1
   11ada:	2a00      	cmp	r2, #0
   11adc:	d01b      	beq.n	11b16 <memchr+0x46>
   11ade:	7803      	ldrb	r3, [r0, #0]
   11ae0:	42ab      	cmp	r3, r5
   11ae2:	d019      	beq.n	11b18 <memchr+0x48>
   11ae4:	2203      	movs	r2, #3
   11ae6:	e004      	b.n	11af2 <memchr+0x22>
   11ae8:	3c01      	subs	r4, #1
   11aea:	d314      	bcc.n	11b16 <memchr+0x46>
   11aec:	7803      	ldrb	r3, [r0, #0]
   11aee:	42ab      	cmp	r3, r5
   11af0:	d012      	beq.n	11b18 <memchr+0x48>
   11af2:	3001      	adds	r0, #1
   11af4:	4210      	tst	r0, r2
   11af6:	d1f7      	bne.n	11ae8 <memchr+0x18>
   11af8:	2c03      	cmp	r4, #3
   11afa:	d80e      	bhi.n	11b1a <memchr+0x4a>
   11afc:	2c00      	cmp	r4, #0
   11afe:	d00a      	beq.n	11b16 <memchr+0x46>
   11b00:	7803      	ldrb	r3, [r0, #0]
   11b02:	42ab      	cmp	r3, r5
   11b04:	d008      	beq.n	11b18 <memchr+0x48>
   11b06:	1904      	adds	r4, r0, r4
   11b08:	e002      	b.n	11b10 <memchr+0x40>
   11b0a:	7803      	ldrb	r3, [r0, #0]
   11b0c:	42ab      	cmp	r3, r5
   11b0e:	d003      	beq.n	11b18 <memchr+0x48>
   11b10:	3001      	adds	r0, #1
   11b12:	4284      	cmp	r4, r0
   11b14:	d1f9      	bne.n	11b0a <memchr+0x3a>
   11b16:	2000      	movs	r0, #0
   11b18:	bd70      	pop	{r4, r5, r6, pc}
   11b1a:	22ff      	movs	r2, #255	; 0xff
   11b1c:	060b      	lsls	r3, r1, #24
   11b1e:	0c1b      	lsrs	r3, r3, #16
   11b20:	4011      	ands	r1, r2
   11b22:	4319      	orrs	r1, r3
   11b24:	040b      	lsls	r3, r1, #16
   11b26:	4e08      	ldr	r6, [pc, #32]	; (11b48 <memchr+0x78>)
   11b28:	4319      	orrs	r1, r3
   11b2a:	6803      	ldr	r3, [r0, #0]
   11b2c:	4a07      	ldr	r2, [pc, #28]	; (11b4c <memchr+0x7c>)
   11b2e:	404b      	eors	r3, r1
   11b30:	189a      	adds	r2, r3, r2
   11b32:	439a      	bics	r2, r3
   11b34:	4232      	tst	r2, r6
   11b36:	d1e3      	bne.n	11b00 <memchr+0x30>
   11b38:	3c04      	subs	r4, #4
   11b3a:	3004      	adds	r0, #4
   11b3c:	2c03      	cmp	r4, #3
   11b3e:	d8f4      	bhi.n	11b2a <memchr+0x5a>
   11b40:	e7dc      	b.n	11afc <memchr+0x2c>
   11b42:	0014      	movs	r4, r2
   11b44:	e7d8      	b.n	11af8 <memchr+0x28>
   11b46:	46c0      	nop			; (mov r8, r8)
   11b48:	80808080 	.word	0x80808080
   11b4c:	fefefeff 	.word	0xfefefeff

00011b50 <memmove>:
   11b50:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b52:	4288      	cmp	r0, r1
   11b54:	d90a      	bls.n	11b6c <memmove+0x1c>
   11b56:	188b      	adds	r3, r1, r2
   11b58:	4298      	cmp	r0, r3
   11b5a:	d207      	bcs.n	11b6c <memmove+0x1c>
   11b5c:	1e53      	subs	r3, r2, #1
   11b5e:	2a00      	cmp	r2, #0
   11b60:	d003      	beq.n	11b6a <memmove+0x1a>
   11b62:	5cca      	ldrb	r2, [r1, r3]
   11b64:	54c2      	strb	r2, [r0, r3]
   11b66:	3b01      	subs	r3, #1
   11b68:	d2fb      	bcs.n	11b62 <memmove+0x12>
   11b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11b6c:	0005      	movs	r5, r0
   11b6e:	2a0f      	cmp	r2, #15
   11b70:	d808      	bhi.n	11b84 <memmove+0x34>
   11b72:	2a00      	cmp	r2, #0
   11b74:	d0f9      	beq.n	11b6a <memmove+0x1a>
   11b76:	2300      	movs	r3, #0
   11b78:	5ccc      	ldrb	r4, [r1, r3]
   11b7a:	54ec      	strb	r4, [r5, r3]
   11b7c:	3301      	adds	r3, #1
   11b7e:	4293      	cmp	r3, r2
   11b80:	d1fa      	bne.n	11b78 <memmove+0x28>
   11b82:	e7f2      	b.n	11b6a <memmove+0x1a>
   11b84:	000b      	movs	r3, r1
   11b86:	4303      	orrs	r3, r0
   11b88:	079b      	lsls	r3, r3, #30
   11b8a:	d12d      	bne.n	11be8 <memmove+0x98>
   11b8c:	0015      	movs	r5, r2
   11b8e:	000c      	movs	r4, r1
   11b90:	0003      	movs	r3, r0
   11b92:	3d10      	subs	r5, #16
   11b94:	092f      	lsrs	r7, r5, #4
   11b96:	3701      	adds	r7, #1
   11b98:	013f      	lsls	r7, r7, #4
   11b9a:	19c7      	adds	r7, r0, r7
   11b9c:	6826      	ldr	r6, [r4, #0]
   11b9e:	601e      	str	r6, [r3, #0]
   11ba0:	6866      	ldr	r6, [r4, #4]
   11ba2:	605e      	str	r6, [r3, #4]
   11ba4:	68a6      	ldr	r6, [r4, #8]
   11ba6:	609e      	str	r6, [r3, #8]
   11ba8:	68e6      	ldr	r6, [r4, #12]
   11baa:	3410      	adds	r4, #16
   11bac:	60de      	str	r6, [r3, #12]
   11bae:	3310      	adds	r3, #16
   11bb0:	429f      	cmp	r7, r3
   11bb2:	d1f3      	bne.n	11b9c <memmove+0x4c>
   11bb4:	240f      	movs	r4, #15
   11bb6:	43a5      	bics	r5, r4
   11bb8:	3510      	adds	r5, #16
   11bba:	1949      	adds	r1, r1, r5
   11bbc:	4014      	ands	r4, r2
   11bbe:	1945      	adds	r5, r0, r5
   11bc0:	2c03      	cmp	r4, #3
   11bc2:	d913      	bls.n	11bec <memmove+0x9c>
   11bc4:	2300      	movs	r3, #0
   11bc6:	1f27      	subs	r7, r4, #4
   11bc8:	08be      	lsrs	r6, r7, #2
   11bca:	3601      	adds	r6, #1
   11bcc:	00b6      	lsls	r6, r6, #2
   11bce:	58cc      	ldr	r4, [r1, r3]
   11bd0:	50ec      	str	r4, [r5, r3]
   11bd2:	3304      	adds	r3, #4
   11bd4:	42b3      	cmp	r3, r6
   11bd6:	d1fa      	bne.n	11bce <memmove+0x7e>
   11bd8:	2603      	movs	r6, #3
   11bda:	43b7      	bics	r7, r6
   11bdc:	1d3c      	adds	r4, r7, #4
   11bde:	1909      	adds	r1, r1, r4
   11be0:	192d      	adds	r5, r5, r4
   11be2:	4032      	ands	r2, r6
   11be4:	d1c7      	bne.n	11b76 <memmove+0x26>
   11be6:	e7c0      	b.n	11b6a <memmove+0x1a>
   11be8:	0005      	movs	r5, r0
   11bea:	e7c4      	b.n	11b76 <memmove+0x26>
   11bec:	0022      	movs	r2, r4
   11bee:	e7c0      	b.n	11b72 <memmove+0x22>

00011bf0 <_Balloc>:
   11bf0:	b570      	push	{r4, r5, r6, lr}
   11bf2:	0004      	movs	r4, r0
   11bf4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   11bf6:	000d      	movs	r5, r1
   11bf8:	2800      	cmp	r0, #0
   11bfa:	d00a      	beq.n	11c12 <_Balloc+0x22>
   11bfc:	00ab      	lsls	r3, r5, #2
   11bfe:	18c3      	adds	r3, r0, r3
   11c00:	6818      	ldr	r0, [r3, #0]
   11c02:	2800      	cmp	r0, #0
   11c04:	d00f      	beq.n	11c26 <_Balloc+0x36>
   11c06:	6802      	ldr	r2, [r0, #0]
   11c08:	601a      	str	r2, [r3, #0]
   11c0a:	2300      	movs	r3, #0
   11c0c:	6103      	str	r3, [r0, #16]
   11c0e:	60c3      	str	r3, [r0, #12]
   11c10:	bd70      	pop	{r4, r5, r6, pc}
   11c12:	2221      	movs	r2, #33	; 0x21
   11c14:	2104      	movs	r1, #4
   11c16:	0020      	movs	r0, r4
   11c18:	f002 fb04 	bl	14224 <_calloc_r>
   11c1c:	64e0      	str	r0, [r4, #76]	; 0x4c
   11c1e:	2800      	cmp	r0, #0
   11c20:	d1ec      	bne.n	11bfc <_Balloc+0xc>
   11c22:	2000      	movs	r0, #0
   11c24:	e7f4      	b.n	11c10 <_Balloc+0x20>
   11c26:	2601      	movs	r6, #1
   11c28:	40ae      	lsls	r6, r5
   11c2a:	1d72      	adds	r2, r6, #5
   11c2c:	0092      	lsls	r2, r2, #2
   11c2e:	2101      	movs	r1, #1
   11c30:	0020      	movs	r0, r4
   11c32:	f002 faf7 	bl	14224 <_calloc_r>
   11c36:	2800      	cmp	r0, #0
   11c38:	d0f3      	beq.n	11c22 <_Balloc+0x32>
   11c3a:	6045      	str	r5, [r0, #4]
   11c3c:	6086      	str	r6, [r0, #8]
   11c3e:	e7e4      	b.n	11c0a <_Balloc+0x1a>

00011c40 <_Bfree>:
   11c40:	2900      	cmp	r1, #0
   11c42:	d006      	beq.n	11c52 <_Bfree+0x12>
   11c44:	684b      	ldr	r3, [r1, #4]
   11c46:	009a      	lsls	r2, r3, #2
   11c48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   11c4a:	189b      	adds	r3, r3, r2
   11c4c:	681a      	ldr	r2, [r3, #0]
   11c4e:	600a      	str	r2, [r1, #0]
   11c50:	6019      	str	r1, [r3, #0]
   11c52:	4770      	bx	lr

00011c54 <__multadd>:
   11c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c56:	46ce      	mov	lr, r9
   11c58:	4647      	mov	r7, r8
   11c5a:	4681      	mov	r9, r0
   11c5c:	0008      	movs	r0, r1
   11c5e:	b580      	push	{r7, lr}
   11c60:	000d      	movs	r5, r1
   11c62:	690c      	ldr	r4, [r1, #16]
   11c64:	001f      	movs	r7, r3
   11c66:	2100      	movs	r1, #0
   11c68:	3014      	adds	r0, #20
   11c6a:	6803      	ldr	r3, [r0, #0]
   11c6c:	3101      	adds	r1, #1
   11c6e:	041e      	lsls	r6, r3, #16
   11c70:	0c36      	lsrs	r6, r6, #16
   11c72:	4356      	muls	r6, r2
   11c74:	0c1b      	lsrs	r3, r3, #16
   11c76:	4353      	muls	r3, r2
   11c78:	19f6      	adds	r6, r6, r7
   11c7a:	0c37      	lsrs	r7, r6, #16
   11c7c:	19db      	adds	r3, r3, r7
   11c7e:	0436      	lsls	r6, r6, #16
   11c80:	0c1f      	lsrs	r7, r3, #16
   11c82:	0c36      	lsrs	r6, r6, #16
   11c84:	041b      	lsls	r3, r3, #16
   11c86:	199b      	adds	r3, r3, r6
   11c88:	c008      	stmia	r0!, {r3}
   11c8a:	428c      	cmp	r4, r1
   11c8c:	dced      	bgt.n	11c6a <__multadd+0x16>
   11c8e:	2f00      	cmp	r7, #0
   11c90:	d008      	beq.n	11ca4 <__multadd+0x50>
   11c92:	68ab      	ldr	r3, [r5, #8]
   11c94:	429c      	cmp	r4, r3
   11c96:	da0a      	bge.n	11cae <__multadd+0x5a>
   11c98:	1d23      	adds	r3, r4, #4
   11c9a:	009b      	lsls	r3, r3, #2
   11c9c:	18eb      	adds	r3, r5, r3
   11c9e:	3401      	adds	r4, #1
   11ca0:	605f      	str	r7, [r3, #4]
   11ca2:	612c      	str	r4, [r5, #16]
   11ca4:	0028      	movs	r0, r5
   11ca6:	bc0c      	pop	{r2, r3}
   11ca8:	4690      	mov	r8, r2
   11caa:	4699      	mov	r9, r3
   11cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11cae:	686b      	ldr	r3, [r5, #4]
   11cb0:	4648      	mov	r0, r9
   11cb2:	1c59      	adds	r1, r3, #1
   11cb4:	f7ff ff9c 	bl	11bf0 <_Balloc>
   11cb8:	0029      	movs	r1, r5
   11cba:	692b      	ldr	r3, [r5, #16]
   11cbc:	4680      	mov	r8, r0
   11cbe:	1c9a      	adds	r2, r3, #2
   11cc0:	0092      	lsls	r2, r2, #2
   11cc2:	310c      	adds	r1, #12
   11cc4:	300c      	adds	r0, #12
   11cc6:	f7f9 fc97 	bl	b5f8 <memcpy>
   11cca:	686b      	ldr	r3, [r5, #4]
   11ccc:	009a      	lsls	r2, r3, #2
   11cce:	464b      	mov	r3, r9
   11cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   11cd2:	189b      	adds	r3, r3, r2
   11cd4:	681a      	ldr	r2, [r3, #0]
   11cd6:	602a      	str	r2, [r5, #0]
   11cd8:	601d      	str	r5, [r3, #0]
   11cda:	4645      	mov	r5, r8
   11cdc:	e7dc      	b.n	11c98 <__multadd+0x44>
   11cde:	46c0      	nop			; (mov r8, r8)

00011ce0 <__s2b>:
   11ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ce2:	4647      	mov	r7, r8
   11ce4:	46ce      	mov	lr, r9
   11ce6:	0006      	movs	r6, r0
   11ce8:	0018      	movs	r0, r3
   11cea:	b580      	push	{r7, lr}
   11cec:	000d      	movs	r5, r1
   11cee:	3008      	adds	r0, #8
   11cf0:	2109      	movs	r1, #9
   11cf2:	4690      	mov	r8, r2
   11cf4:	001f      	movs	r7, r3
   11cf6:	f7f7 fae7 	bl	92c8 <__divsi3>
   11cfa:	2801      	cmp	r0, #1
   11cfc:	dd38      	ble.n	11d70 <__s2b+0x90>
   11cfe:	2201      	movs	r2, #1
   11d00:	2100      	movs	r1, #0
   11d02:	0052      	lsls	r2, r2, #1
   11d04:	3101      	adds	r1, #1
   11d06:	4290      	cmp	r0, r2
   11d08:	dcfb      	bgt.n	11d02 <__s2b+0x22>
   11d0a:	0030      	movs	r0, r6
   11d0c:	f7ff ff70 	bl	11bf0 <_Balloc>
   11d10:	9b08      	ldr	r3, [sp, #32]
   11d12:	6143      	str	r3, [r0, #20]
   11d14:	2301      	movs	r3, #1
   11d16:	6103      	str	r3, [r0, #16]
   11d18:	4643      	mov	r3, r8
   11d1a:	2b09      	cmp	r3, #9
   11d1c:	dd24      	ble.n	11d68 <__s2b+0x88>
   11d1e:	2309      	movs	r3, #9
   11d20:	4699      	mov	r9, r3
   11d22:	44a9      	add	r9, r5
   11d24:	464c      	mov	r4, r9
   11d26:	4445      	add	r5, r8
   11d28:	7823      	ldrb	r3, [r4, #0]
   11d2a:	0001      	movs	r1, r0
   11d2c:	3b30      	subs	r3, #48	; 0x30
   11d2e:	220a      	movs	r2, #10
   11d30:	0030      	movs	r0, r6
   11d32:	3401      	adds	r4, #1
   11d34:	f7ff ff8e 	bl	11c54 <__multadd>
   11d38:	42ac      	cmp	r4, r5
   11d3a:	d1f5      	bne.n	11d28 <__s2b+0x48>
   11d3c:	4645      	mov	r5, r8
   11d3e:	3d08      	subs	r5, #8
   11d40:	444d      	add	r5, r9
   11d42:	4547      	cmp	r7, r8
   11d44:	dd0c      	ble.n	11d60 <__s2b+0x80>
   11d46:	4643      	mov	r3, r8
   11d48:	1aff      	subs	r7, r7, r3
   11d4a:	19ef      	adds	r7, r5, r7
   11d4c:	782b      	ldrb	r3, [r5, #0]
   11d4e:	0001      	movs	r1, r0
   11d50:	3b30      	subs	r3, #48	; 0x30
   11d52:	220a      	movs	r2, #10
   11d54:	0030      	movs	r0, r6
   11d56:	3501      	adds	r5, #1
   11d58:	f7ff ff7c 	bl	11c54 <__multadd>
   11d5c:	42bd      	cmp	r5, r7
   11d5e:	d1f5      	bne.n	11d4c <__s2b+0x6c>
   11d60:	bc0c      	pop	{r2, r3}
   11d62:	4690      	mov	r8, r2
   11d64:	4699      	mov	r9, r3
   11d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d68:	2309      	movs	r3, #9
   11d6a:	350a      	adds	r5, #10
   11d6c:	4698      	mov	r8, r3
   11d6e:	e7e8      	b.n	11d42 <__s2b+0x62>
   11d70:	2100      	movs	r1, #0
   11d72:	e7ca      	b.n	11d0a <__s2b+0x2a>

00011d74 <__hi0bits>:
   11d74:	0003      	movs	r3, r0
   11d76:	0c02      	lsrs	r2, r0, #16
   11d78:	2000      	movs	r0, #0
   11d7a:	2a00      	cmp	r2, #0
   11d7c:	d101      	bne.n	11d82 <__hi0bits+0xe>
   11d7e:	041b      	lsls	r3, r3, #16
   11d80:	3010      	adds	r0, #16
   11d82:	0e1a      	lsrs	r2, r3, #24
   11d84:	d101      	bne.n	11d8a <__hi0bits+0x16>
   11d86:	3008      	adds	r0, #8
   11d88:	021b      	lsls	r3, r3, #8
   11d8a:	0f1a      	lsrs	r2, r3, #28
   11d8c:	d101      	bne.n	11d92 <__hi0bits+0x1e>
   11d8e:	3004      	adds	r0, #4
   11d90:	011b      	lsls	r3, r3, #4
   11d92:	0f9a      	lsrs	r2, r3, #30
   11d94:	d101      	bne.n	11d9a <__hi0bits+0x26>
   11d96:	3002      	adds	r0, #2
   11d98:	009b      	lsls	r3, r3, #2
   11d9a:	2b00      	cmp	r3, #0
   11d9c:	db03      	blt.n	11da6 <__hi0bits+0x32>
   11d9e:	3001      	adds	r0, #1
   11da0:	005b      	lsls	r3, r3, #1
   11da2:	d400      	bmi.n	11da6 <__hi0bits+0x32>
   11da4:	2020      	movs	r0, #32
   11da6:	4770      	bx	lr

00011da8 <__lo0bits>:
   11da8:	6803      	ldr	r3, [r0, #0]
   11daa:	075a      	lsls	r2, r3, #29
   11dac:	d009      	beq.n	11dc2 <__lo0bits+0x1a>
   11dae:	2200      	movs	r2, #0
   11db0:	07d9      	lsls	r1, r3, #31
   11db2:	d404      	bmi.n	11dbe <__lo0bits+0x16>
   11db4:	079a      	lsls	r2, r3, #30
   11db6:	d420      	bmi.n	11dfa <__lo0bits+0x52>
   11db8:	2202      	movs	r2, #2
   11dba:	089b      	lsrs	r3, r3, #2
   11dbc:	6003      	str	r3, [r0, #0]
   11dbe:	0010      	movs	r0, r2
   11dc0:	4770      	bx	lr
   11dc2:	0419      	lsls	r1, r3, #16
   11dc4:	2200      	movs	r2, #0
   11dc6:	2900      	cmp	r1, #0
   11dc8:	d101      	bne.n	11dce <__lo0bits+0x26>
   11dca:	0c1b      	lsrs	r3, r3, #16
   11dcc:	3210      	adds	r2, #16
   11dce:	21ff      	movs	r1, #255	; 0xff
   11dd0:	4219      	tst	r1, r3
   11dd2:	d101      	bne.n	11dd8 <__lo0bits+0x30>
   11dd4:	3208      	adds	r2, #8
   11dd6:	0a1b      	lsrs	r3, r3, #8
   11dd8:	0719      	lsls	r1, r3, #28
   11dda:	d101      	bne.n	11de0 <__lo0bits+0x38>
   11ddc:	3204      	adds	r2, #4
   11dde:	091b      	lsrs	r3, r3, #4
   11de0:	0799      	lsls	r1, r3, #30
   11de2:	d101      	bne.n	11de8 <__lo0bits+0x40>
   11de4:	3202      	adds	r2, #2
   11de6:	089b      	lsrs	r3, r3, #2
   11de8:	07d9      	lsls	r1, r3, #31
   11dea:	d404      	bmi.n	11df6 <__lo0bits+0x4e>
   11dec:	085b      	lsrs	r3, r3, #1
   11dee:	d101      	bne.n	11df4 <__lo0bits+0x4c>
   11df0:	2220      	movs	r2, #32
   11df2:	e7e4      	b.n	11dbe <__lo0bits+0x16>
   11df4:	3201      	adds	r2, #1
   11df6:	6003      	str	r3, [r0, #0]
   11df8:	e7e1      	b.n	11dbe <__lo0bits+0x16>
   11dfa:	085b      	lsrs	r3, r3, #1
   11dfc:	6003      	str	r3, [r0, #0]
   11dfe:	2201      	movs	r2, #1
   11e00:	e7dd      	b.n	11dbe <__lo0bits+0x16>
   11e02:	46c0      	nop			; (mov r8, r8)

00011e04 <__i2b>:
   11e04:	b510      	push	{r4, lr}
   11e06:	000c      	movs	r4, r1
   11e08:	2101      	movs	r1, #1
   11e0a:	f7ff fef1 	bl	11bf0 <_Balloc>
   11e0e:	2301      	movs	r3, #1
   11e10:	6144      	str	r4, [r0, #20]
   11e12:	6103      	str	r3, [r0, #16]
   11e14:	bd10      	pop	{r4, pc}
   11e16:	46c0      	nop			; (mov r8, r8)

00011e18 <__multiply>:
   11e18:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e1a:	4657      	mov	r7, sl
   11e1c:	464e      	mov	r6, r9
   11e1e:	4645      	mov	r5, r8
   11e20:	46de      	mov	lr, fp
   11e22:	b5e0      	push	{r5, r6, r7, lr}
   11e24:	6914      	ldr	r4, [r2, #16]
   11e26:	690e      	ldr	r6, [r1, #16]
   11e28:	b085      	sub	sp, #20
   11e2a:	000f      	movs	r7, r1
   11e2c:	0015      	movs	r5, r2
   11e2e:	42a6      	cmp	r6, r4
   11e30:	da04      	bge.n	11e3c <__multiply+0x24>
   11e32:	0033      	movs	r3, r6
   11e34:	0017      	movs	r7, r2
   11e36:	0026      	movs	r6, r4
   11e38:	000d      	movs	r5, r1
   11e3a:	001c      	movs	r4, r3
   11e3c:	1933      	adds	r3, r6, r4
   11e3e:	4698      	mov	r8, r3
   11e40:	68bb      	ldr	r3, [r7, #8]
   11e42:	6879      	ldr	r1, [r7, #4]
   11e44:	4598      	cmp	r8, r3
   11e46:	dd00      	ble.n	11e4a <__multiply+0x32>
   11e48:	3101      	adds	r1, #1
   11e4a:	f7ff fed1 	bl	11bf0 <_Balloc>
   11e4e:	2214      	movs	r2, #20
   11e50:	0003      	movs	r3, r0
   11e52:	4694      	mov	ip, r2
   11e54:	4463      	add	r3, ip
   11e56:	469b      	mov	fp, r3
   11e58:	4643      	mov	r3, r8
   11e5a:	009b      	lsls	r3, r3, #2
   11e5c:	445b      	add	r3, fp
   11e5e:	0019      	movs	r1, r3
   11e60:	9302      	str	r3, [sp, #8]
   11e62:	9003      	str	r0, [sp, #12]
   11e64:	465b      	mov	r3, fp
   11e66:	2200      	movs	r2, #0
   11e68:	458b      	cmp	fp, r1
   11e6a:	d203      	bcs.n	11e74 <__multiply+0x5c>
   11e6c:	9902      	ldr	r1, [sp, #8]
   11e6e:	c304      	stmia	r3!, {r2}
   11e70:	4299      	cmp	r1, r3
   11e72:	d8fc      	bhi.n	11e6e <__multiply+0x56>
   11e74:	2314      	movs	r3, #20
   11e76:	00a4      	lsls	r4, r4, #2
   11e78:	469a      	mov	sl, r3
   11e7a:	3714      	adds	r7, #20
   11e7c:	0023      	movs	r3, r4
   11e7e:	46bc      	mov	ip, r7
   11e80:	44aa      	add	sl, r5
   11e82:	00b6      	lsls	r6, r6, #2
   11e84:	4453      	add	r3, sl
   11e86:	9700      	str	r7, [sp, #0]
   11e88:	44b4      	add	ip, r6
   11e8a:	9301      	str	r3, [sp, #4]
   11e8c:	459a      	cmp	sl, r3
   11e8e:	d24f      	bcs.n	11f30 <__multiply+0x118>
   11e90:	4653      	mov	r3, sl
   11e92:	681b      	ldr	r3, [r3, #0]
   11e94:	041e      	lsls	r6, r3, #16
   11e96:	0c36      	lsrs	r6, r6, #16
   11e98:	d020      	beq.n	11edc <__multiply+0xc4>
   11e9a:	465c      	mov	r4, fp
   11e9c:	2700      	movs	r7, #0
   11e9e:	9d00      	ldr	r5, [sp, #0]
   11ea0:	0021      	movs	r1, r4
   11ea2:	cc08      	ldmia	r4!, {r3}
   11ea4:	cd04      	ldmia	r5!, {r2}
   11ea6:	4699      	mov	r9, r3
   11ea8:	4648      	mov	r0, r9
   11eaa:	0413      	lsls	r3, r2, #16
   11eac:	0c1b      	lsrs	r3, r3, #16
   11eae:	4373      	muls	r3, r6
   11eb0:	0400      	lsls	r0, r0, #16
   11eb2:	0c00      	lsrs	r0, r0, #16
   11eb4:	181b      	adds	r3, r3, r0
   11eb6:	19d8      	adds	r0, r3, r7
   11eb8:	0c13      	lsrs	r3, r2, #16
   11eba:	464a      	mov	r2, r9
   11ebc:	4373      	muls	r3, r6
   11ebe:	0c12      	lsrs	r2, r2, #16
   11ec0:	189b      	adds	r3, r3, r2
   11ec2:	0c02      	lsrs	r2, r0, #16
   11ec4:	189b      	adds	r3, r3, r2
   11ec6:	0402      	lsls	r2, r0, #16
   11ec8:	0c1f      	lsrs	r7, r3, #16
   11eca:	0c12      	lsrs	r2, r2, #16
   11ecc:	041b      	lsls	r3, r3, #16
   11ece:	4313      	orrs	r3, r2
   11ed0:	600b      	str	r3, [r1, #0]
   11ed2:	45ac      	cmp	ip, r5
   11ed4:	d8e4      	bhi.n	11ea0 <__multiply+0x88>
   11ed6:	4653      	mov	r3, sl
   11ed8:	6027      	str	r7, [r4, #0]
   11eda:	681b      	ldr	r3, [r3, #0]
   11edc:	0c1e      	lsrs	r6, r3, #16
   11ede:	d020      	beq.n	11f22 <__multiply+0x10a>
   11ee0:	465b      	mov	r3, fp
   11ee2:	2100      	movs	r1, #0
   11ee4:	681b      	ldr	r3, [r3, #0]
   11ee6:	465c      	mov	r4, fp
   11ee8:	0018      	movs	r0, r3
   11eea:	000f      	movs	r7, r1
   11eec:	4662      	mov	r2, ip
   11eee:	9d00      	ldr	r5, [sp, #0]
   11ef0:	8829      	ldrh	r1, [r5, #0]
   11ef2:	0c00      	lsrs	r0, r0, #16
   11ef4:	4371      	muls	r1, r6
   11ef6:	1809      	adds	r1, r1, r0
   11ef8:	19c9      	adds	r1, r1, r7
   11efa:	041b      	lsls	r3, r3, #16
   11efc:	0408      	lsls	r0, r1, #16
   11efe:	0c1b      	lsrs	r3, r3, #16
   11f00:	4303      	orrs	r3, r0
   11f02:	6023      	str	r3, [r4, #0]
   11f04:	cd08      	ldmia	r5!, {r3}
   11f06:	6860      	ldr	r0, [r4, #4]
   11f08:	0c1b      	lsrs	r3, r3, #16
   11f0a:	4373      	muls	r3, r6
   11f0c:	0407      	lsls	r7, r0, #16
   11f0e:	0c3f      	lsrs	r7, r7, #16
   11f10:	19db      	adds	r3, r3, r7
   11f12:	0c09      	lsrs	r1, r1, #16
   11f14:	185b      	adds	r3, r3, r1
   11f16:	0c1f      	lsrs	r7, r3, #16
   11f18:	3404      	adds	r4, #4
   11f1a:	42aa      	cmp	r2, r5
   11f1c:	d8e8      	bhi.n	11ef0 <__multiply+0xd8>
   11f1e:	4694      	mov	ip, r2
   11f20:	6023      	str	r3, [r4, #0]
   11f22:	2304      	movs	r3, #4
   11f24:	4699      	mov	r9, r3
   11f26:	9b01      	ldr	r3, [sp, #4]
   11f28:	44ca      	add	sl, r9
   11f2a:	44cb      	add	fp, r9
   11f2c:	4553      	cmp	r3, sl
   11f2e:	d8af      	bhi.n	11e90 <__multiply+0x78>
   11f30:	4643      	mov	r3, r8
   11f32:	2b00      	cmp	r3, #0
   11f34:	dd0e      	ble.n	11f54 <__multiply+0x13c>
   11f36:	9b02      	ldr	r3, [sp, #8]
   11f38:	3b04      	subs	r3, #4
   11f3a:	681a      	ldr	r2, [r3, #0]
   11f3c:	2a00      	cmp	r2, #0
   11f3e:	d109      	bne.n	11f54 <__multiply+0x13c>
   11f40:	4642      	mov	r2, r8
   11f42:	e003      	b.n	11f4c <__multiply+0x134>
   11f44:	3b04      	subs	r3, #4
   11f46:	6819      	ldr	r1, [r3, #0]
   11f48:	2900      	cmp	r1, #0
   11f4a:	d102      	bne.n	11f52 <__multiply+0x13a>
   11f4c:	3a01      	subs	r2, #1
   11f4e:	2a00      	cmp	r2, #0
   11f50:	d1f8      	bne.n	11f44 <__multiply+0x12c>
   11f52:	4690      	mov	r8, r2
   11f54:	9b03      	ldr	r3, [sp, #12]
   11f56:	4642      	mov	r2, r8
   11f58:	0018      	movs	r0, r3
   11f5a:	611a      	str	r2, [r3, #16]
   11f5c:	b005      	add	sp, #20
   11f5e:	bc3c      	pop	{r2, r3, r4, r5}
   11f60:	4690      	mov	r8, r2
   11f62:	4699      	mov	r9, r3
   11f64:	46a2      	mov	sl, r4
   11f66:	46ab      	mov	fp, r5
   11f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f6a:	46c0      	nop			; (mov r8, r8)

00011f6c <__pow5mult>:
   11f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11f6e:	4647      	mov	r7, r8
   11f70:	46ce      	mov	lr, r9
   11f72:	2303      	movs	r3, #3
   11f74:	b580      	push	{r7, lr}
   11f76:	4680      	mov	r8, r0
   11f78:	000f      	movs	r7, r1
   11f7a:	0014      	movs	r4, r2
   11f7c:	4013      	ands	r3, r2
   11f7e:	d13a      	bne.n	11ff6 <__pow5mult+0x8a>
   11f80:	10a4      	asrs	r4, r4, #2
   11f82:	003e      	movs	r6, r7
   11f84:	2c00      	cmp	r4, #0
   11f86:	d025      	beq.n	11fd4 <__pow5mult+0x68>
   11f88:	4643      	mov	r3, r8
   11f8a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   11f8c:	2d00      	cmp	r5, #0
   11f8e:	d03b      	beq.n	12008 <__pow5mult+0x9c>
   11f90:	003e      	movs	r6, r7
   11f92:	2300      	movs	r3, #0
   11f94:	2701      	movs	r7, #1
   11f96:	4699      	mov	r9, r3
   11f98:	4227      	tst	r7, r4
   11f9a:	d107      	bne.n	11fac <__pow5mult+0x40>
   11f9c:	1064      	asrs	r4, r4, #1
   11f9e:	d019      	beq.n	11fd4 <__pow5mult+0x68>
   11fa0:	6828      	ldr	r0, [r5, #0]
   11fa2:	2800      	cmp	r0, #0
   11fa4:	d01b      	beq.n	11fde <__pow5mult+0x72>
   11fa6:	0005      	movs	r5, r0
   11fa8:	4227      	tst	r7, r4
   11faa:	d0f7      	beq.n	11f9c <__pow5mult+0x30>
   11fac:	002a      	movs	r2, r5
   11fae:	0031      	movs	r1, r6
   11fb0:	4640      	mov	r0, r8
   11fb2:	f7ff ff31 	bl	11e18 <__multiply>
   11fb6:	2e00      	cmp	r6, #0
   11fb8:	d01b      	beq.n	11ff2 <__pow5mult+0x86>
   11fba:	4642      	mov	r2, r8
   11fbc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   11fbe:	6873      	ldr	r3, [r6, #4]
   11fc0:	4694      	mov	ip, r2
   11fc2:	009b      	lsls	r3, r3, #2
   11fc4:	4463      	add	r3, ip
   11fc6:	681a      	ldr	r2, [r3, #0]
   11fc8:	1064      	asrs	r4, r4, #1
   11fca:	6032      	str	r2, [r6, #0]
   11fcc:	601e      	str	r6, [r3, #0]
   11fce:	0006      	movs	r6, r0
   11fd0:	2c00      	cmp	r4, #0
   11fd2:	d1e5      	bne.n	11fa0 <__pow5mult+0x34>
   11fd4:	0030      	movs	r0, r6
   11fd6:	bc0c      	pop	{r2, r3}
   11fd8:	4690      	mov	r8, r2
   11fda:	4699      	mov	r9, r3
   11fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fde:	002a      	movs	r2, r5
   11fe0:	0029      	movs	r1, r5
   11fe2:	4640      	mov	r0, r8
   11fe4:	f7ff ff18 	bl	11e18 <__multiply>
   11fe8:	464b      	mov	r3, r9
   11fea:	6028      	str	r0, [r5, #0]
   11fec:	6003      	str	r3, [r0, #0]
   11fee:	0005      	movs	r5, r0
   11ff0:	e7da      	b.n	11fa8 <__pow5mult+0x3c>
   11ff2:	0006      	movs	r6, r0
   11ff4:	e7d2      	b.n	11f9c <__pow5mult+0x30>
   11ff6:	4a0b      	ldr	r2, [pc, #44]	; (12024 <__pow5mult+0xb8>)
   11ff8:	3b01      	subs	r3, #1
   11ffa:	009b      	lsls	r3, r3, #2
   11ffc:	589a      	ldr	r2, [r3, r2]
   11ffe:	2300      	movs	r3, #0
   12000:	f7ff fe28 	bl	11c54 <__multadd>
   12004:	0007      	movs	r7, r0
   12006:	e7bb      	b.n	11f80 <__pow5mult+0x14>
   12008:	2101      	movs	r1, #1
   1200a:	4640      	mov	r0, r8
   1200c:	f7ff fdf0 	bl	11bf0 <_Balloc>
   12010:	4b05      	ldr	r3, [pc, #20]	; (12028 <__pow5mult+0xbc>)
   12012:	0005      	movs	r5, r0
   12014:	6143      	str	r3, [r0, #20]
   12016:	2301      	movs	r3, #1
   12018:	6103      	str	r3, [r0, #16]
   1201a:	4643      	mov	r3, r8
   1201c:	6498      	str	r0, [r3, #72]	; 0x48
   1201e:	2300      	movs	r3, #0
   12020:	6003      	str	r3, [r0, #0]
   12022:	e7b5      	b.n	11f90 <__pow5mult+0x24>
   12024:	00019420 	.word	0x00019420
   12028:	00000271 	.word	0x00000271

0001202c <__lshift>:
   1202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1202e:	464e      	mov	r6, r9
   12030:	4645      	mov	r5, r8
   12032:	46de      	mov	lr, fp
   12034:	4657      	mov	r7, sl
   12036:	b5e0      	push	{r5, r6, r7, lr}
   12038:	000e      	movs	r6, r1
   1203a:	6933      	ldr	r3, [r6, #16]
   1203c:	1154      	asrs	r4, r2, #5
   1203e:	4698      	mov	r8, r3
   12040:	44a0      	add	r8, r4
   12042:	4643      	mov	r3, r8
   12044:	1c5d      	adds	r5, r3, #1
   12046:	68b3      	ldr	r3, [r6, #8]
   12048:	4683      	mov	fp, r0
   1204a:	4691      	mov	r9, r2
   1204c:	6849      	ldr	r1, [r1, #4]
   1204e:	429d      	cmp	r5, r3
   12050:	dd03      	ble.n	1205a <__lshift+0x2e>
   12052:	3101      	adds	r1, #1
   12054:	005b      	lsls	r3, r3, #1
   12056:	429d      	cmp	r5, r3
   12058:	dcfb      	bgt.n	12052 <__lshift+0x26>
   1205a:	4658      	mov	r0, fp
   1205c:	f7ff fdc8 	bl	11bf0 <_Balloc>
   12060:	0003      	movs	r3, r0
   12062:	4684      	mov	ip, r0
   12064:	3314      	adds	r3, #20
   12066:	2c00      	cmp	r4, #0
   12068:	dd06      	ble.n	12078 <__lshift+0x4c>
   1206a:	2100      	movs	r1, #0
   1206c:	00a4      	lsls	r4, r4, #2
   1206e:	001a      	movs	r2, r3
   12070:	191b      	adds	r3, r3, r4
   12072:	c202      	stmia	r2!, {r1}
   12074:	4293      	cmp	r3, r2
   12076:	d1fc      	bne.n	12072 <__lshift+0x46>
   12078:	6932      	ldr	r2, [r6, #16]
   1207a:	4648      	mov	r0, r9
   1207c:	0097      	lsls	r7, r2, #2
   1207e:	0031      	movs	r1, r6
   12080:	221f      	movs	r2, #31
   12082:	3114      	adds	r1, #20
   12084:	4010      	ands	r0, r2
   12086:	19cf      	adds	r7, r1, r7
   12088:	4681      	mov	r9, r0
   1208a:	2800      	cmp	r0, #0
   1208c:	d025      	beq.n	120da <__lshift+0xae>
   1208e:	2220      	movs	r2, #32
   12090:	1a12      	subs	r2, r2, r0
   12092:	4692      	mov	sl, r2
   12094:	2200      	movs	r2, #0
   12096:	4648      	mov	r0, r9
   12098:	680c      	ldr	r4, [r1, #0]
   1209a:	4084      	lsls	r4, r0
   1209c:	4650      	mov	r0, sl
   1209e:	4314      	orrs	r4, r2
   120a0:	601c      	str	r4, [r3, #0]
   120a2:	c904      	ldmia	r1!, {r2}
   120a4:	3304      	adds	r3, #4
   120a6:	40c2      	lsrs	r2, r0
   120a8:	428f      	cmp	r7, r1
   120aa:	d8f4      	bhi.n	12096 <__lshift+0x6a>
   120ac:	601a      	str	r2, [r3, #0]
   120ae:	2a00      	cmp	r2, #0
   120b0:	d001      	beq.n	120b6 <__lshift+0x8a>
   120b2:	4645      	mov	r5, r8
   120b4:	3502      	adds	r5, #2
   120b6:	4663      	mov	r3, ip
   120b8:	3d01      	subs	r5, #1
   120ba:	611d      	str	r5, [r3, #16]
   120bc:	6873      	ldr	r3, [r6, #4]
   120be:	4660      	mov	r0, ip
   120c0:	009a      	lsls	r2, r3, #2
   120c2:	465b      	mov	r3, fp
   120c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   120c6:	189b      	adds	r3, r3, r2
   120c8:	681a      	ldr	r2, [r3, #0]
   120ca:	6032      	str	r2, [r6, #0]
   120cc:	601e      	str	r6, [r3, #0]
   120ce:	bc3c      	pop	{r2, r3, r4, r5}
   120d0:	4690      	mov	r8, r2
   120d2:	4699      	mov	r9, r3
   120d4:	46a2      	mov	sl, r4
   120d6:	46ab      	mov	fp, r5
   120d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120da:	c904      	ldmia	r1!, {r2}
   120dc:	c304      	stmia	r3!, {r2}
   120de:	428f      	cmp	r7, r1
   120e0:	d9e9      	bls.n	120b6 <__lshift+0x8a>
   120e2:	c904      	ldmia	r1!, {r2}
   120e4:	c304      	stmia	r3!, {r2}
   120e6:	428f      	cmp	r7, r1
   120e8:	d8f7      	bhi.n	120da <__lshift+0xae>
   120ea:	e7e4      	b.n	120b6 <__lshift+0x8a>

000120ec <__mcmp>:
   120ec:	690a      	ldr	r2, [r1, #16]
   120ee:	6903      	ldr	r3, [r0, #16]
   120f0:	b530      	push	{r4, r5, lr}
   120f2:	0005      	movs	r5, r0
   120f4:	1a98      	subs	r0, r3, r2
   120f6:	d111      	bne.n	1211c <__mcmp+0x30>
   120f8:	0092      	lsls	r2, r2, #2
   120fa:	3514      	adds	r5, #20
   120fc:	3114      	adds	r1, #20
   120fe:	18ab      	adds	r3, r5, r2
   12100:	1889      	adds	r1, r1, r2
   12102:	e001      	b.n	12108 <__mcmp+0x1c>
   12104:	429d      	cmp	r5, r3
   12106:	d209      	bcs.n	1211c <__mcmp+0x30>
   12108:	3b04      	subs	r3, #4
   1210a:	3904      	subs	r1, #4
   1210c:	681c      	ldr	r4, [r3, #0]
   1210e:	680a      	ldr	r2, [r1, #0]
   12110:	4294      	cmp	r4, r2
   12112:	d0f7      	beq.n	12104 <__mcmp+0x18>
   12114:	4294      	cmp	r4, r2
   12116:	4180      	sbcs	r0, r0
   12118:	2201      	movs	r2, #1
   1211a:	4310      	orrs	r0, r2
   1211c:	bd30      	pop	{r4, r5, pc}
   1211e:	46c0      	nop			; (mov r8, r8)

00012120 <__mdiff>:
   12120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12122:	4645      	mov	r5, r8
   12124:	46de      	mov	lr, fp
   12126:	4657      	mov	r7, sl
   12128:	464e      	mov	r6, r9
   1212a:	0014      	movs	r4, r2
   1212c:	690b      	ldr	r3, [r1, #16]
   1212e:	6912      	ldr	r2, [r2, #16]
   12130:	b5e0      	push	{r5, r6, r7, lr}
   12132:	4688      	mov	r8, r1
   12134:	1a9d      	subs	r5, r3, r2
   12136:	d11a      	bne.n	1216e <__mdiff+0x4e>
   12138:	000f      	movs	r7, r1
   1213a:	2114      	movs	r1, #20
   1213c:	468c      	mov	ip, r1
   1213e:	0092      	lsls	r2, r2, #2
   12140:	3714      	adds	r7, #20
   12142:	44a4      	add	ip, r4
   12144:	18bb      	adds	r3, r7, r2
   12146:	4462      	add	r2, ip
   12148:	e002      	b.n	12150 <__mdiff+0x30>
   1214a:	429f      	cmp	r7, r3
   1214c:	d300      	bcc.n	12150 <__mdiff+0x30>
   1214e:	e070      	b.n	12232 <__mdiff+0x112>
   12150:	3b04      	subs	r3, #4
   12152:	3a04      	subs	r2, #4
   12154:	681e      	ldr	r6, [r3, #0]
   12156:	6811      	ldr	r1, [r2, #0]
   12158:	428e      	cmp	r6, r1
   1215a:	d0f6      	beq.n	1214a <__mdiff+0x2a>
   1215c:	d300      	bcc.n	12160 <__mdiff+0x40>
   1215e:	e071      	b.n	12244 <__mdiff+0x124>
   12160:	4643      	mov	r3, r8
   12162:	003e      	movs	r6, r7
   12164:	46a0      	mov	r8, r4
   12166:	4667      	mov	r7, ip
   12168:	001c      	movs	r4, r3
   1216a:	2501      	movs	r5, #1
   1216c:	e006      	b.n	1217c <__mdiff+0x5c>
   1216e:	2d00      	cmp	r5, #0
   12170:	db6a      	blt.n	12248 <__mdiff+0x128>
   12172:	4647      	mov	r7, r8
   12174:	0026      	movs	r6, r4
   12176:	2500      	movs	r5, #0
   12178:	3714      	adds	r7, #20
   1217a:	3614      	adds	r6, #20
   1217c:	4643      	mov	r3, r8
   1217e:	6859      	ldr	r1, [r3, #4]
   12180:	f7ff fd36 	bl	11bf0 <_Balloc>
   12184:	4643      	mov	r3, r8
   12186:	4681      	mov	r9, r0
   12188:	60c5      	str	r5, [r0, #12]
   1218a:	6918      	ldr	r0, [r3, #16]
   1218c:	464d      	mov	r5, r9
   1218e:	0083      	lsls	r3, r0, #2
   12190:	469c      	mov	ip, r3
   12192:	6923      	ldr	r3, [r4, #16]
   12194:	44bc      	add	ip, r7
   12196:	009b      	lsls	r3, r3, #2
   12198:	4698      	mov	r8, r3
   1219a:	2300      	movs	r3, #0
   1219c:	44b0      	add	r8, r6
   1219e:	3514      	adds	r5, #20
   121a0:	469a      	mov	sl, r3
   121a2:	e000      	b.n	121a6 <__mdiff+0x86>
   121a4:	0027      	movs	r7, r4
   121a6:	ce04      	ldmia	r6!, {r2}
   121a8:	003c      	movs	r4, r7
   121aa:	4693      	mov	fp, r2
   121ac:	4659      	mov	r1, fp
   121ae:	cc08      	ldmia	r4!, {r3}
   121b0:	0409      	lsls	r1, r1, #16
   121b2:	041a      	lsls	r2, r3, #16
   121b4:	0c12      	lsrs	r2, r2, #16
   121b6:	4452      	add	r2, sl
   121b8:	0c09      	lsrs	r1, r1, #16
   121ba:	1a52      	subs	r2, r2, r1
   121bc:	0c19      	lsrs	r1, r3, #16
   121be:	465b      	mov	r3, fp
   121c0:	0c1b      	lsrs	r3, r3, #16
   121c2:	1acb      	subs	r3, r1, r3
   121c4:	1411      	asrs	r1, r2, #16
   121c6:	185b      	adds	r3, r3, r1
   121c8:	0412      	lsls	r2, r2, #16
   121ca:	1419      	asrs	r1, r3, #16
   121cc:	0c12      	lsrs	r2, r2, #16
   121ce:	041b      	lsls	r3, r3, #16
   121d0:	468a      	mov	sl, r1
   121d2:	4313      	orrs	r3, r2
   121d4:	1d29      	adds	r1, r5, #4
   121d6:	602b      	str	r3, [r5, #0]
   121d8:	000d      	movs	r5, r1
   121da:	45b0      	cmp	r8, r6
   121dc:	d8e2      	bhi.n	121a4 <__mdiff+0x84>
   121de:	45a4      	cmp	ip, r4
   121e0:	d916      	bls.n	12210 <__mdiff+0xf0>
   121e2:	cc08      	ldmia	r4!, {r3}
   121e4:	041a      	lsls	r2, r3, #16
   121e6:	0c12      	lsrs	r2, r2, #16
   121e8:	4452      	add	r2, sl
   121ea:	1416      	asrs	r6, r2, #16
   121ec:	0c1b      	lsrs	r3, r3, #16
   121ee:	199b      	adds	r3, r3, r6
   121f0:	0412      	lsls	r2, r2, #16
   121f2:	141e      	asrs	r6, r3, #16
   121f4:	0c12      	lsrs	r2, r2, #16
   121f6:	041b      	lsls	r3, r3, #16
   121f8:	4313      	orrs	r3, r2
   121fa:	46b2      	mov	sl, r6
   121fc:	c508      	stmia	r5!, {r3}
   121fe:	45a4      	cmp	ip, r4
   12200:	d8ef      	bhi.n	121e2 <__mdiff+0xc2>
   12202:	4662      	mov	r2, ip
   12204:	2403      	movs	r4, #3
   12206:	1bd2      	subs	r2, r2, r7
   12208:	3a05      	subs	r2, #5
   1220a:	43a2      	bics	r2, r4
   1220c:	3204      	adds	r2, #4
   1220e:	1889      	adds	r1, r1, r2
   12210:	3904      	subs	r1, #4
   12212:	2b00      	cmp	r3, #0
   12214:	d104      	bne.n	12220 <__mdiff+0x100>
   12216:	3904      	subs	r1, #4
   12218:	680b      	ldr	r3, [r1, #0]
   1221a:	3801      	subs	r0, #1
   1221c:	2b00      	cmp	r3, #0
   1221e:	d0fa      	beq.n	12216 <__mdiff+0xf6>
   12220:	464b      	mov	r3, r9
   12222:	6118      	str	r0, [r3, #16]
   12224:	4648      	mov	r0, r9
   12226:	bc3c      	pop	{r2, r3, r4, r5}
   12228:	4690      	mov	r8, r2
   1222a:	4699      	mov	r9, r3
   1222c:	46a2      	mov	sl, r4
   1222e:	46ab      	mov	fp, r5
   12230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12232:	2100      	movs	r1, #0
   12234:	f7ff fcdc 	bl	11bf0 <_Balloc>
   12238:	2301      	movs	r3, #1
   1223a:	6103      	str	r3, [r0, #16]
   1223c:	2300      	movs	r3, #0
   1223e:	4681      	mov	r9, r0
   12240:	6143      	str	r3, [r0, #20]
   12242:	e7ef      	b.n	12224 <__mdiff+0x104>
   12244:	4666      	mov	r6, ip
   12246:	e799      	b.n	1217c <__mdiff+0x5c>
   12248:	0027      	movs	r7, r4
   1224a:	000e      	movs	r6, r1
   1224c:	46a0      	mov	r8, r4
   1224e:	3714      	adds	r7, #20
   12250:	3614      	adds	r6, #20
   12252:	000c      	movs	r4, r1
   12254:	2501      	movs	r5, #1
   12256:	e791      	b.n	1217c <__mdiff+0x5c>

00012258 <__ulp>:
   12258:	4b10      	ldr	r3, [pc, #64]	; (1229c <__ulp+0x44>)
   1225a:	b510      	push	{r4, lr}
   1225c:	4019      	ands	r1, r3
   1225e:	4b10      	ldr	r3, [pc, #64]	; (122a0 <__ulp+0x48>)
   12260:	469c      	mov	ip, r3
   12262:	4461      	add	r1, ip
   12264:	2900      	cmp	r1, #0
   12266:	dd04      	ble.n	12272 <__ulp+0x1a>
   12268:	2200      	movs	r2, #0
   1226a:	000b      	movs	r3, r1
   1226c:	0010      	movs	r0, r2
   1226e:	0019      	movs	r1, r3
   12270:	bd10      	pop	{r4, pc}
   12272:	4249      	negs	r1, r1
   12274:	1509      	asrs	r1, r1, #20
   12276:	2200      	movs	r2, #0
   12278:	2300      	movs	r3, #0
   1227a:	2913      	cmp	r1, #19
   1227c:	dd08      	ble.n	12290 <__ulp+0x38>
   1227e:	3914      	subs	r1, #20
   12280:	2001      	movs	r0, #1
   12282:	291e      	cmp	r1, #30
   12284:	dc02      	bgt.n	1228c <__ulp+0x34>
   12286:	241f      	movs	r4, #31
   12288:	1a61      	subs	r1, r4, r1
   1228a:	4088      	lsls	r0, r1
   1228c:	0002      	movs	r2, r0
   1228e:	e7ed      	b.n	1226c <__ulp+0x14>
   12290:	2080      	movs	r0, #128	; 0x80
   12292:	0300      	lsls	r0, r0, #12
   12294:	4108      	asrs	r0, r1
   12296:	0003      	movs	r3, r0
   12298:	e7e8      	b.n	1226c <__ulp+0x14>
   1229a:	46c0      	nop			; (mov r8, r8)
   1229c:	7ff00000 	.word	0x7ff00000
   122a0:	fcc00000 	.word	0xfcc00000

000122a4 <__b2d>:
   122a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   122a6:	464f      	mov	r7, r9
   122a8:	4646      	mov	r6, r8
   122aa:	46d6      	mov	lr, sl
   122ac:	6904      	ldr	r4, [r0, #16]
   122ae:	b5c0      	push	{r6, r7, lr}
   122b0:	00a4      	lsls	r4, r4, #2
   122b2:	0006      	movs	r6, r0
   122b4:	46a1      	mov	r9, r4
   122b6:	3614      	adds	r6, #20
   122b8:	44b1      	add	r9, r6
   122ba:	464b      	mov	r3, r9
   122bc:	4688      	mov	r8, r1
   122be:	1f1f      	subs	r7, r3, #4
   122c0:	683d      	ldr	r5, [r7, #0]
   122c2:	0028      	movs	r0, r5
   122c4:	f7ff fd56 	bl	11d74 <__hi0bits>
   122c8:	2120      	movs	r1, #32
   122ca:	4643      	mov	r3, r8
   122cc:	1a0a      	subs	r2, r1, r0
   122ce:	601a      	str	r2, [r3, #0]
   122d0:	280a      	cmp	r0, #10
   122d2:	dc20      	bgt.n	12316 <__b2d+0x72>
   122d4:	3915      	subs	r1, #21
   122d6:	1a0b      	subs	r3, r1, r0
   122d8:	469a      	mov	sl, r3
   122da:	002b      	movs	r3, r5
   122dc:	4652      	mov	r2, sl
   122de:	4926      	ldr	r1, [pc, #152]	; (12378 <__b2d+0xd4>)
   122e0:	40d3      	lsrs	r3, r2
   122e2:	4688      	mov	r8, r1
   122e4:	0019      	movs	r1, r3
   122e6:	4644      	mov	r4, r8
   122e8:	4321      	orrs	r1, r4
   122ea:	000b      	movs	r3, r1
   122ec:	2100      	movs	r1, #0
   122ee:	468c      	mov	ip, r1
   122f0:	42be      	cmp	r6, r7
   122f2:	d204      	bcs.n	122fe <__b2d+0x5a>
   122f4:	464c      	mov	r4, r9
   122f6:	3c08      	subs	r4, #8
   122f8:	6824      	ldr	r4, [r4, #0]
   122fa:	40d4      	lsrs	r4, r2
   122fc:	46a4      	mov	ip, r4
   122fe:	3015      	adds	r0, #21
   12300:	4085      	lsls	r5, r0
   12302:	4661      	mov	r1, ip
   12304:	4329      	orrs	r1, r5
   12306:	000a      	movs	r2, r1
   12308:	0010      	movs	r0, r2
   1230a:	0019      	movs	r1, r3
   1230c:	bc1c      	pop	{r2, r3, r4}
   1230e:	4690      	mov	r8, r2
   12310:	4699      	mov	r9, r3
   12312:	46a2      	mov	sl, r4
   12314:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12316:	42be      	cmp	r6, r7
   12318:	d21b      	bcs.n	12352 <__b2d+0xae>
   1231a:	2308      	movs	r3, #8
   1231c:	425b      	negs	r3, r3
   1231e:	469c      	mov	ip, r3
   12320:	44cc      	add	ip, r9
   12322:	4663      	mov	r3, ip
   12324:	380b      	subs	r0, #11
   12326:	681f      	ldr	r7, [r3, #0]
   12328:	2800      	cmp	r0, #0
   1232a:	d016      	beq.n	1235a <__b2d+0xb6>
   1232c:	4085      	lsls	r5, r0
   1232e:	4b12      	ldr	r3, [pc, #72]	; (12378 <__b2d+0xd4>)
   12330:	1a09      	subs	r1, r1, r0
   12332:	431d      	orrs	r5, r3
   12334:	003b      	movs	r3, r7
   12336:	40cb      	lsrs	r3, r1
   12338:	001c      	movs	r4, r3
   1233a:	432c      	orrs	r4, r5
   1233c:	0023      	movs	r3, r4
   1233e:	4566      	cmp	r6, ip
   12340:	d217      	bcs.n	12372 <__b2d+0xce>
   12342:	464c      	mov	r4, r9
   12344:	3c0c      	subs	r4, #12
   12346:	6824      	ldr	r4, [r4, #0]
   12348:	4087      	lsls	r7, r0
   1234a:	40cc      	lsrs	r4, r1
   1234c:	4327      	orrs	r7, r4
   1234e:	003a      	movs	r2, r7
   12350:	e7da      	b.n	12308 <__b2d+0x64>
   12352:	380b      	subs	r0, #11
   12354:	2700      	movs	r7, #0
   12356:	2800      	cmp	r0, #0
   12358:	d104      	bne.n	12364 <__b2d+0xc0>
   1235a:	4907      	ldr	r1, [pc, #28]	; (12378 <__b2d+0xd4>)
   1235c:	003a      	movs	r2, r7
   1235e:	4329      	orrs	r1, r5
   12360:	000b      	movs	r3, r1
   12362:	e7d1      	b.n	12308 <__b2d+0x64>
   12364:	4085      	lsls	r5, r0
   12366:	2700      	movs	r7, #0
   12368:	4903      	ldr	r1, [pc, #12]	; (12378 <__b2d+0xd4>)
   1236a:	003a      	movs	r2, r7
   1236c:	4329      	orrs	r1, r5
   1236e:	000b      	movs	r3, r1
   12370:	e7ca      	b.n	12308 <__b2d+0x64>
   12372:	4087      	lsls	r7, r0
   12374:	003a      	movs	r2, r7
   12376:	e7c7      	b.n	12308 <__b2d+0x64>
   12378:	3ff00000 	.word	0x3ff00000

0001237c <__d2b>:
   1237c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1237e:	2101      	movs	r1, #1
   12380:	001c      	movs	r4, r3
   12382:	b083      	sub	sp, #12
   12384:	9e08      	ldr	r6, [sp, #32]
   12386:	0015      	movs	r5, r2
   12388:	f7ff fc32 	bl	11bf0 <_Balloc>
   1238c:	0323      	lsls	r3, r4, #12
   1238e:	0064      	lsls	r4, r4, #1
   12390:	0007      	movs	r7, r0
   12392:	0b1b      	lsrs	r3, r3, #12
   12394:	0d64      	lsrs	r4, r4, #21
   12396:	d002      	beq.n	1239e <__d2b+0x22>
   12398:	2280      	movs	r2, #128	; 0x80
   1239a:	0352      	lsls	r2, r2, #13
   1239c:	4313      	orrs	r3, r2
   1239e:	9301      	str	r3, [sp, #4]
   123a0:	2d00      	cmp	r5, #0
   123a2:	d019      	beq.n	123d8 <__d2b+0x5c>
   123a4:	4668      	mov	r0, sp
   123a6:	9500      	str	r5, [sp, #0]
   123a8:	f7ff fcfe 	bl	11da8 <__lo0bits>
   123ac:	2800      	cmp	r0, #0
   123ae:	d130      	bne.n	12412 <__d2b+0x96>
   123b0:	9b00      	ldr	r3, [sp, #0]
   123b2:	617b      	str	r3, [r7, #20]
   123b4:	9b01      	ldr	r3, [sp, #4]
   123b6:	61bb      	str	r3, [r7, #24]
   123b8:	1e5a      	subs	r2, r3, #1
   123ba:	4193      	sbcs	r3, r2
   123bc:	1c5d      	adds	r5, r3, #1
   123be:	613d      	str	r5, [r7, #16]
   123c0:	2c00      	cmp	r4, #0
   123c2:	d014      	beq.n	123ee <__d2b+0x72>
   123c4:	4b19      	ldr	r3, [pc, #100]	; (1242c <__d2b+0xb0>)
   123c6:	469c      	mov	ip, r3
   123c8:	2335      	movs	r3, #53	; 0x35
   123ca:	4464      	add	r4, ip
   123cc:	1824      	adds	r4, r4, r0
   123ce:	1a18      	subs	r0, r3, r0
   123d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   123d2:	6034      	str	r4, [r6, #0]
   123d4:	6018      	str	r0, [r3, #0]
   123d6:	e019      	b.n	1240c <__d2b+0x90>
   123d8:	a801      	add	r0, sp, #4
   123da:	f7ff fce5 	bl	11da8 <__lo0bits>
   123de:	9b01      	ldr	r3, [sp, #4]
   123e0:	3020      	adds	r0, #32
   123e2:	617b      	str	r3, [r7, #20]
   123e4:	2301      	movs	r3, #1
   123e6:	2501      	movs	r5, #1
   123e8:	613b      	str	r3, [r7, #16]
   123ea:	2c00      	cmp	r4, #0
   123ec:	d1ea      	bne.n	123c4 <__d2b+0x48>
   123ee:	4b10      	ldr	r3, [pc, #64]	; (12430 <__d2b+0xb4>)
   123f0:	469c      	mov	ip, r3
   123f2:	4b10      	ldr	r3, [pc, #64]	; (12434 <__d2b+0xb8>)
   123f4:	4460      	add	r0, ip
   123f6:	18eb      	adds	r3, r5, r3
   123f8:	009b      	lsls	r3, r3, #2
   123fa:	18fb      	adds	r3, r7, r3
   123fc:	6030      	str	r0, [r6, #0]
   123fe:	6958      	ldr	r0, [r3, #20]
   12400:	f7ff fcb8 	bl	11d74 <__hi0bits>
   12404:	016b      	lsls	r3, r5, #5
   12406:	1a18      	subs	r0, r3, r0
   12408:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1240a:	6018      	str	r0, [r3, #0]
   1240c:	0038      	movs	r0, r7
   1240e:	b003      	add	sp, #12
   12410:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12412:	9b01      	ldr	r3, [sp, #4]
   12414:	2220      	movs	r2, #32
   12416:	0019      	movs	r1, r3
   12418:	1a12      	subs	r2, r2, r0
   1241a:	4091      	lsls	r1, r2
   1241c:	000a      	movs	r2, r1
   1241e:	40c3      	lsrs	r3, r0
   12420:	9900      	ldr	r1, [sp, #0]
   12422:	9301      	str	r3, [sp, #4]
   12424:	430a      	orrs	r2, r1
   12426:	617a      	str	r2, [r7, #20]
   12428:	e7c5      	b.n	123b6 <__d2b+0x3a>
   1242a:	46c0      	nop			; (mov r8, r8)
   1242c:	fffffbcd 	.word	0xfffffbcd
   12430:	fffffbce 	.word	0xfffffbce
   12434:	3fffffff 	.word	0x3fffffff

00012438 <__ratio>:
   12438:	b5f0      	push	{r4, r5, r6, r7, lr}
   1243a:	46ce      	mov	lr, r9
   1243c:	4647      	mov	r7, r8
   1243e:	b580      	push	{r7, lr}
   12440:	b085      	sub	sp, #20
   12442:	4688      	mov	r8, r1
   12444:	a902      	add	r1, sp, #8
   12446:	4681      	mov	r9, r0
   12448:	f7ff ff2c 	bl	122a4 <__b2d>
   1244c:	0006      	movs	r6, r0
   1244e:	000f      	movs	r7, r1
   12450:	4640      	mov	r0, r8
   12452:	a903      	add	r1, sp, #12
   12454:	f7ff ff26 	bl	122a4 <__b2d>
   12458:	464b      	mov	r3, r9
   1245a:	691b      	ldr	r3, [r3, #16]
   1245c:	9000      	str	r0, [sp, #0]
   1245e:	9101      	str	r1, [sp, #4]
   12460:	469c      	mov	ip, r3
   12462:	4643      	mov	r3, r8
   12464:	691b      	ldr	r3, [r3, #16]
   12466:	4698      	mov	r8, r3
   12468:	4663      	mov	r3, ip
   1246a:	4642      	mov	r2, r8
   1246c:	1a9b      	subs	r3, r3, r2
   1246e:	015b      	lsls	r3, r3, #5
   12470:	469c      	mov	ip, r3
   12472:	9a03      	ldr	r2, [sp, #12]
   12474:	9b02      	ldr	r3, [sp, #8]
   12476:	1a9b      	subs	r3, r3, r2
   12478:	4698      	mov	r8, r3
   1247a:	44c4      	add	ip, r8
   1247c:	4663      	mov	r3, ip
   1247e:	2b00      	cmp	r3, #0
   12480:	dd0d      	ble.n	1249e <__ratio+0x66>
   12482:	051b      	lsls	r3, r3, #20
   12484:	19dd      	adds	r5, r3, r7
   12486:	002f      	movs	r7, r5
   12488:	0002      	movs	r2, r0
   1248a:	000b      	movs	r3, r1
   1248c:	0030      	movs	r0, r6
   1248e:	0039      	movs	r1, r7
   12490:	f7f7 fa58 	bl	9944 <__aeabi_ddiv>
   12494:	b005      	add	sp, #20
   12496:	bc0c      	pop	{r2, r3}
   12498:	4690      	mov	r8, r2
   1249a:	4699      	mov	r9, r3
   1249c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1249e:	4663      	mov	r3, ip
   124a0:	0518      	lsls	r0, r3, #20
   124a2:	1a0b      	subs	r3, r1, r0
   124a4:	9301      	str	r3, [sp, #4]
   124a6:	9800      	ldr	r0, [sp, #0]
   124a8:	9901      	ldr	r1, [sp, #4]
   124aa:	e7ed      	b.n	12488 <__ratio+0x50>

000124ac <__copybits>:
   124ac:	0013      	movs	r3, r2
   124ae:	b570      	push	{r4, r5, r6, lr}
   124b0:	1e4c      	subs	r4, r1, #1
   124b2:	6911      	ldr	r1, [r2, #16]
   124b4:	1164      	asrs	r4, r4, #5
   124b6:	3401      	adds	r4, #1
   124b8:	3314      	adds	r3, #20
   124ba:	0089      	lsls	r1, r1, #2
   124bc:	00a4      	lsls	r4, r4, #2
   124be:	1859      	adds	r1, r3, r1
   124c0:	1904      	adds	r4, r0, r4
   124c2:	428b      	cmp	r3, r1
   124c4:	d20b      	bcs.n	124de <__copybits+0x32>
   124c6:	0005      	movs	r5, r0
   124c8:	cb40      	ldmia	r3!, {r6}
   124ca:	c540      	stmia	r5!, {r6}
   124cc:	4299      	cmp	r1, r3
   124ce:	d8fb      	bhi.n	124c8 <__copybits+0x1c>
   124d0:	2303      	movs	r3, #3
   124d2:	3218      	adds	r2, #24
   124d4:	1a9a      	subs	r2, r3, r2
   124d6:	1889      	adds	r1, r1, r2
   124d8:	4399      	bics	r1, r3
   124da:	3104      	adds	r1, #4
   124dc:	1840      	adds	r0, r0, r1
   124de:	2300      	movs	r3, #0
   124e0:	4284      	cmp	r4, r0
   124e2:	d902      	bls.n	124ea <__copybits+0x3e>
   124e4:	c008      	stmia	r0!, {r3}
   124e6:	4284      	cmp	r4, r0
   124e8:	d8fc      	bhi.n	124e4 <__copybits+0x38>
   124ea:	bd70      	pop	{r4, r5, r6, pc}

000124ec <__any_on>:
   124ec:	0002      	movs	r2, r0
   124ee:	6903      	ldr	r3, [r0, #16]
   124f0:	b510      	push	{r4, lr}
   124f2:	3214      	adds	r2, #20
   124f4:	1148      	asrs	r0, r1, #5
   124f6:	4283      	cmp	r3, r0
   124f8:	da0f      	bge.n	1251a <__any_on+0x2e>
   124fa:	009b      	lsls	r3, r3, #2
   124fc:	18d3      	adds	r3, r2, r3
   124fe:	429a      	cmp	r2, r3
   12500:	d221      	bcs.n	12546 <__any_on+0x5a>
   12502:	3b04      	subs	r3, #4
   12504:	6818      	ldr	r0, [r3, #0]
   12506:	2800      	cmp	r0, #0
   12508:	d004      	beq.n	12514 <__any_on+0x28>
   1250a:	e01a      	b.n	12542 <__any_on+0x56>
   1250c:	3b04      	subs	r3, #4
   1250e:	6819      	ldr	r1, [r3, #0]
   12510:	2900      	cmp	r1, #0
   12512:	d116      	bne.n	12542 <__any_on+0x56>
   12514:	429a      	cmp	r2, r3
   12516:	d3f9      	bcc.n	1250c <__any_on+0x20>
   12518:	bd10      	pop	{r4, pc}
   1251a:	4283      	cmp	r3, r0
   1251c:	dd0e      	ble.n	1253c <__any_on+0x50>
   1251e:	231f      	movs	r3, #31
   12520:	4019      	ands	r1, r3
   12522:	0083      	lsls	r3, r0, #2
   12524:	18d3      	adds	r3, r2, r3
   12526:	2900      	cmp	r1, #0
   12528:	d0e9      	beq.n	124fe <__any_on+0x12>
   1252a:	681c      	ldr	r4, [r3, #0]
   1252c:	0020      	movs	r0, r4
   1252e:	40c8      	lsrs	r0, r1
   12530:	4088      	lsls	r0, r1
   12532:	0001      	movs	r1, r0
   12534:	2001      	movs	r0, #1
   12536:	428c      	cmp	r4, r1
   12538:	d1ee      	bne.n	12518 <__any_on+0x2c>
   1253a:	e7e0      	b.n	124fe <__any_on+0x12>
   1253c:	0083      	lsls	r3, r0, #2
   1253e:	18d3      	adds	r3, r2, r3
   12540:	e7dd      	b.n	124fe <__any_on+0x12>
   12542:	2001      	movs	r0, #1
   12544:	e7e8      	b.n	12518 <__any_on+0x2c>
   12546:	2000      	movs	r0, #0
   12548:	e7e6      	b.n	12518 <__any_on+0x2c>
   1254a:	46c0      	nop			; (mov r8, r8)

0001254c <_read_r>:
   1254c:	b570      	push	{r4, r5, r6, lr}
   1254e:	0005      	movs	r5, r0
   12550:	0008      	movs	r0, r1
   12552:	0011      	movs	r1, r2
   12554:	2200      	movs	r2, #0
   12556:	4c06      	ldr	r4, [pc, #24]	; (12570 <_read_r+0x24>)
   12558:	6022      	str	r2, [r4, #0]
   1255a:	001a      	movs	r2, r3
   1255c:	f7f0 ff32 	bl	33c4 <_read>
   12560:	1c43      	adds	r3, r0, #1
   12562:	d000      	beq.n	12566 <_read_r+0x1a>
   12564:	bd70      	pop	{r4, r5, r6, pc}
   12566:	6823      	ldr	r3, [r4, #0]
   12568:	2b00      	cmp	r3, #0
   1256a:	d0fb      	beq.n	12564 <_read_r+0x18>
   1256c:	602b      	str	r3, [r5, #0]
   1256e:	e7f9      	b.n	12564 <_read_r+0x18>
   12570:	200018fc 	.word	0x200018fc

00012574 <_realloc_r>:
   12574:	b5f0      	push	{r4, r5, r6, r7, lr}
   12576:	464e      	mov	r6, r9
   12578:	4645      	mov	r5, r8
   1257a:	46de      	mov	lr, fp
   1257c:	4657      	mov	r7, sl
   1257e:	b5e0      	push	{r5, r6, r7, lr}
   12580:	b085      	sub	sp, #20
   12582:	9001      	str	r0, [sp, #4]
   12584:	000e      	movs	r6, r1
   12586:	0015      	movs	r5, r2
   12588:	2900      	cmp	r1, #0
   1258a:	d100      	bne.n	1258e <_realloc_r+0x1a>
   1258c:	e09e      	b.n	126cc <_realloc_r+0x158>
   1258e:	0037      	movs	r7, r6
   12590:	9801      	ldr	r0, [sp, #4]
   12592:	3f08      	subs	r7, #8
   12594:	f7f9 f8bc 	bl	b710 <__malloc_lock>
   12598:	687a      	ldr	r2, [r7, #4]
   1259a:	2303      	movs	r3, #3
   1259c:	0014      	movs	r4, r2
   1259e:	439c      	bics	r4, r3
   125a0:	002b      	movs	r3, r5
   125a2:	330b      	adds	r3, #11
   125a4:	46b9      	mov	r9, r7
   125a6:	2b16      	cmp	r3, #22
   125a8:	d847      	bhi.n	1263a <_realloc_r+0xc6>
   125aa:	2110      	movs	r1, #16
   125ac:	2310      	movs	r3, #16
   125ae:	4688      	mov	r8, r1
   125b0:	4545      	cmp	r5, r8
   125b2:	d846      	bhi.n	12642 <_realloc_r+0xce>
   125b4:	429c      	cmp	r4, r3
   125b6:	da49      	bge.n	1264c <_realloc_r+0xd8>
   125b8:	49cc      	ldr	r1, [pc, #816]	; (128ec <_realloc_r+0x378>)
   125ba:	1938      	adds	r0, r7, r4
   125bc:	468b      	mov	fp, r1
   125be:	6889      	ldr	r1, [r1, #8]
   125c0:	9002      	str	r0, [sp, #8]
   125c2:	4288      	cmp	r0, r1
   125c4:	d100      	bne.n	125c8 <_realloc_r+0x54>
   125c6:	e0c2      	b.n	1274e <_realloc_r+0x1da>
   125c8:	2101      	movs	r1, #1
   125ca:	468a      	mov	sl, r1
   125cc:	6840      	ldr	r0, [r0, #4]
   125ce:	0001      	movs	r1, r0
   125d0:	9003      	str	r0, [sp, #12]
   125d2:	4650      	mov	r0, sl
   125d4:	4381      	bics	r1, r0
   125d6:	468c      	mov	ip, r1
   125d8:	9902      	ldr	r1, [sp, #8]
   125da:	468b      	mov	fp, r1
   125dc:	44dc      	add	ip, fp
   125de:	4661      	mov	r1, ip
   125e0:	6849      	ldr	r1, [r1, #4]
   125e2:	4201      	tst	r1, r0
   125e4:	d04d      	beq.n	12682 <_realloc_r+0x10e>
   125e6:	4210      	tst	r0, r2
   125e8:	d100      	bne.n	125ec <_realloc_r+0x78>
   125ea:	e0a2      	b.n	12732 <_realloc_r+0x1be>
   125ec:	0029      	movs	r1, r5
   125ee:	9801      	ldr	r0, [sp, #4]
   125f0:	f7f8 fd28 	bl	b044 <_malloc_r>
   125f4:	1e05      	subs	r5, r0, #0
   125f6:	d039      	beq.n	1266c <_realloc_r+0xf8>
   125f8:	2301      	movs	r3, #1
   125fa:	0002      	movs	r2, r0
   125fc:	6879      	ldr	r1, [r7, #4]
   125fe:	3a08      	subs	r2, #8
   12600:	4399      	bics	r1, r3
   12602:	187f      	adds	r7, r7, r1
   12604:	42ba      	cmp	r2, r7
   12606:	d100      	bne.n	1260a <_realloc_r+0x96>
   12608:	e12e      	b.n	12868 <_realloc_r+0x2f4>
   1260a:	1f22      	subs	r2, r4, #4
   1260c:	2a24      	cmp	r2, #36	; 0x24
   1260e:	d900      	bls.n	12612 <_realloc_r+0x9e>
   12610:	e114      	b.n	1283c <_realloc_r+0x2c8>
   12612:	2a13      	cmp	r2, #19
   12614:	d900      	bls.n	12618 <_realloc_r+0xa4>
   12616:	e0e8      	b.n	127ea <_realloc_r+0x276>
   12618:	0003      	movs	r3, r0
   1261a:	0032      	movs	r2, r6
   1261c:	6811      	ldr	r1, [r2, #0]
   1261e:	6019      	str	r1, [r3, #0]
   12620:	6851      	ldr	r1, [r2, #4]
   12622:	6059      	str	r1, [r3, #4]
   12624:	6892      	ldr	r2, [r2, #8]
   12626:	609a      	str	r2, [r3, #8]
   12628:	9c01      	ldr	r4, [sp, #4]
   1262a:	0031      	movs	r1, r6
   1262c:	0020      	movs	r0, r4
   1262e:	f7fe feaf 	bl	11390 <_free_r>
   12632:	0020      	movs	r0, r4
   12634:	f7f9 f874 	bl	b720 <__malloc_unlock>
   12638:	e01b      	b.n	12672 <_realloc_r+0xfe>
   1263a:	2107      	movs	r1, #7
   1263c:	438b      	bics	r3, r1
   1263e:	4698      	mov	r8, r3
   12640:	d5b6      	bpl.n	125b0 <_realloc_r+0x3c>
   12642:	230c      	movs	r3, #12
   12644:	9a01      	ldr	r2, [sp, #4]
   12646:	2500      	movs	r5, #0
   12648:	6013      	str	r3, [r2, #0]
   1264a:	e012      	b.n	12672 <_realloc_r+0xfe>
   1264c:	0035      	movs	r5, r6
   1264e:	4643      	mov	r3, r8
   12650:	1ae3      	subs	r3, r4, r3
   12652:	2b0f      	cmp	r3, #15
   12654:	d825      	bhi.n	126a2 <_realloc_r+0x12e>
   12656:	464b      	mov	r3, r9
   12658:	2201      	movs	r2, #1
   1265a:	4649      	mov	r1, r9
   1265c:	685b      	ldr	r3, [r3, #4]
   1265e:	4013      	ands	r3, r2
   12660:	4323      	orrs	r3, r4
   12662:	604b      	str	r3, [r1, #4]
   12664:	444c      	add	r4, r9
   12666:	6863      	ldr	r3, [r4, #4]
   12668:	431a      	orrs	r2, r3
   1266a:	6062      	str	r2, [r4, #4]
   1266c:	9801      	ldr	r0, [sp, #4]
   1266e:	f7f9 f857 	bl	b720 <__malloc_unlock>
   12672:	0028      	movs	r0, r5
   12674:	b005      	add	sp, #20
   12676:	bc3c      	pop	{r2, r3, r4, r5}
   12678:	4690      	mov	r8, r2
   1267a:	4699      	mov	r9, r3
   1267c:	46a2      	mov	sl, r4
   1267e:	46ab      	mov	fp, r5
   12680:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12682:	2103      	movs	r1, #3
   12684:	9803      	ldr	r0, [sp, #12]
   12686:	468c      	mov	ip, r1
   12688:	4388      	bics	r0, r1
   1268a:	1821      	adds	r1, r4, r0
   1268c:	468b      	mov	fp, r1
   1268e:	4299      	cmp	r1, r3
   12690:	db21      	blt.n	126d6 <_realloc_r+0x162>
   12692:	9a02      	ldr	r2, [sp, #8]
   12694:	0035      	movs	r5, r6
   12696:	68d3      	ldr	r3, [r2, #12]
   12698:	6892      	ldr	r2, [r2, #8]
   1269a:	465c      	mov	r4, fp
   1269c:	60d3      	str	r3, [r2, #12]
   1269e:	609a      	str	r2, [r3, #8]
   126a0:	e7d5      	b.n	1264e <_realloc_r+0xda>
   126a2:	464a      	mov	r2, r9
   126a4:	2001      	movs	r0, #1
   126a6:	4646      	mov	r6, r8
   126a8:	6852      	ldr	r2, [r2, #4]
   126aa:	4649      	mov	r1, r9
   126ac:	4002      	ands	r2, r0
   126ae:	4332      	orrs	r2, r6
   126b0:	464e      	mov	r6, r9
   126b2:	4441      	add	r1, r8
   126b4:	4303      	orrs	r3, r0
   126b6:	6072      	str	r2, [r6, #4]
   126b8:	444c      	add	r4, r9
   126ba:	604b      	str	r3, [r1, #4]
   126bc:	6863      	ldr	r3, [r4, #4]
   126be:	3108      	adds	r1, #8
   126c0:	4318      	orrs	r0, r3
   126c2:	6060      	str	r0, [r4, #4]
   126c4:	9801      	ldr	r0, [sp, #4]
   126c6:	f7fe fe63 	bl	11390 <_free_r>
   126ca:	e7cf      	b.n	1266c <_realloc_r+0xf8>
   126cc:	0011      	movs	r1, r2
   126ce:	f7f8 fcb9 	bl	b044 <_malloc_r>
   126d2:	0005      	movs	r5, r0
   126d4:	e7cd      	b.n	12672 <_realloc_r+0xfe>
   126d6:	4651      	mov	r1, sl
   126d8:	4211      	tst	r1, r2
   126da:	d000      	beq.n	126de <_realloc_r+0x16a>
   126dc:	e786      	b.n	125ec <_realloc_r+0x78>
   126de:	4661      	mov	r1, ip
   126e0:	683a      	ldr	r2, [r7, #0]
   126e2:	1aba      	subs	r2, r7, r2
   126e4:	4692      	mov	sl, r2
   126e6:	6852      	ldr	r2, [r2, #4]
   126e8:	438a      	bics	r2, r1
   126ea:	1880      	adds	r0, r0, r2
   126ec:	4683      	mov	fp, r0
   126ee:	44a3      	add	fp, r4
   126f0:	459b      	cmp	fp, r3
   126f2:	db26      	blt.n	12742 <_realloc_r+0x1ce>
   126f4:	9a02      	ldr	r2, [sp, #8]
   126f6:	68d3      	ldr	r3, [r2, #12]
   126f8:	6892      	ldr	r2, [r2, #8]
   126fa:	60d3      	str	r3, [r2, #12]
   126fc:	609a      	str	r2, [r3, #8]
   126fe:	4653      	mov	r3, sl
   12700:	4652      	mov	r2, sl
   12702:	4655      	mov	r5, sl
   12704:	6892      	ldr	r2, [r2, #8]
   12706:	68db      	ldr	r3, [r3, #12]
   12708:	3508      	adds	r5, #8
   1270a:	60d3      	str	r3, [r2, #12]
   1270c:	609a      	str	r2, [r3, #8]
   1270e:	1f22      	subs	r2, r4, #4
   12710:	2a24      	cmp	r2, #36	; 0x24
   12712:	d900      	bls.n	12716 <_realloc_r+0x1a2>
   12714:	e096      	b.n	12844 <_realloc_r+0x2d0>
   12716:	2a13      	cmp	r2, #19
   12718:	d972      	bls.n	12800 <_realloc_r+0x28c>
   1271a:	4653      	mov	r3, sl
   1271c:	6831      	ldr	r1, [r6, #0]
   1271e:	6099      	str	r1, [r3, #8]
   12720:	6871      	ldr	r1, [r6, #4]
   12722:	60d9      	str	r1, [r3, #12]
   12724:	2a1b      	cmp	r2, #27
   12726:	d900      	bls.n	1272a <_realloc_r+0x1b6>
   12728:	e0a4      	b.n	12874 <_realloc_r+0x300>
   1272a:	0032      	movs	r2, r6
   1272c:	3310      	adds	r3, #16
   1272e:	3208      	adds	r2, #8
   12730:	e068      	b.n	12804 <_realloc_r+0x290>
   12732:	683a      	ldr	r2, [r7, #0]
   12734:	1aba      	subs	r2, r7, r2
   12736:	4692      	mov	sl, r2
   12738:	4651      	mov	r1, sl
   1273a:	2203      	movs	r2, #3
   1273c:	6849      	ldr	r1, [r1, #4]
   1273e:	4391      	bics	r1, r2
   12740:	000a      	movs	r2, r1
   12742:	4693      	mov	fp, r2
   12744:	44a3      	add	fp, r4
   12746:	459b      	cmp	fp, r3
   12748:	da00      	bge.n	1274c <_realloc_r+0x1d8>
   1274a:	e74f      	b.n	125ec <_realloc_r+0x78>
   1274c:	e7d7      	b.n	126fe <_realloc_r+0x18a>
   1274e:	2003      	movs	r0, #3
   12750:	9902      	ldr	r1, [sp, #8]
   12752:	4684      	mov	ip, r0
   12754:	6849      	ldr	r1, [r1, #4]
   12756:	4381      	bics	r1, r0
   12758:	4640      	mov	r0, r8
   1275a:	1909      	adds	r1, r1, r4
   1275c:	3010      	adds	r0, #16
   1275e:	9002      	str	r0, [sp, #8]
   12760:	4281      	cmp	r1, r0
   12762:	da58      	bge.n	12816 <_realloc_r+0x2a2>
   12764:	07d2      	lsls	r2, r2, #31
   12766:	d500      	bpl.n	1276a <_realloc_r+0x1f6>
   12768:	e740      	b.n	125ec <_realloc_r+0x78>
   1276a:	4660      	mov	r0, ip
   1276c:	683a      	ldr	r2, [r7, #0]
   1276e:	1aba      	subs	r2, r7, r2
   12770:	4692      	mov	sl, r2
   12772:	6852      	ldr	r2, [r2, #4]
   12774:	4382      	bics	r2, r0
   12776:	9802      	ldr	r0, [sp, #8]
   12778:	1851      	adds	r1, r2, r1
   1277a:	9103      	str	r1, [sp, #12]
   1277c:	4288      	cmp	r0, r1
   1277e:	dce0      	bgt.n	12742 <_realloc_r+0x1ce>
   12780:	4653      	mov	r3, sl
   12782:	4652      	mov	r2, sl
   12784:	4655      	mov	r5, sl
   12786:	6892      	ldr	r2, [r2, #8]
   12788:	68db      	ldr	r3, [r3, #12]
   1278a:	3508      	adds	r5, #8
   1278c:	60d3      	str	r3, [r2, #12]
   1278e:	609a      	str	r2, [r3, #8]
   12790:	1f22      	subs	r2, r4, #4
   12792:	2a24      	cmp	r2, #36	; 0x24
   12794:	d900      	bls.n	12798 <_realloc_r+0x224>
   12796:	e08e      	b.n	128b6 <_realloc_r+0x342>
   12798:	2a13      	cmp	r2, #19
   1279a:	d800      	bhi.n	1279e <_realloc_r+0x22a>
   1279c:	e088      	b.n	128b0 <_realloc_r+0x33c>
   1279e:	4653      	mov	r3, sl
   127a0:	6831      	ldr	r1, [r6, #0]
   127a2:	6099      	str	r1, [r3, #8]
   127a4:	6871      	ldr	r1, [r6, #4]
   127a6:	60d9      	str	r1, [r3, #12]
   127a8:	2a1b      	cmp	r2, #27
   127aa:	d900      	bls.n	127ae <_realloc_r+0x23a>
   127ac:	e088      	b.n	128c0 <_realloc_r+0x34c>
   127ae:	0032      	movs	r2, r6
   127b0:	3310      	adds	r3, #16
   127b2:	3208      	adds	r2, #8
   127b4:	6811      	ldr	r1, [r2, #0]
   127b6:	6019      	str	r1, [r3, #0]
   127b8:	6851      	ldr	r1, [r2, #4]
   127ba:	6059      	str	r1, [r3, #4]
   127bc:	6892      	ldr	r2, [r2, #8]
   127be:	609a      	str	r2, [r3, #8]
   127c0:	4651      	mov	r1, sl
   127c2:	465b      	mov	r3, fp
   127c4:	4642      	mov	r2, r8
   127c6:	4441      	add	r1, r8
   127c8:	6099      	str	r1, [r3, #8]
   127ca:	9b03      	ldr	r3, [sp, #12]
   127cc:	9801      	ldr	r0, [sp, #4]
   127ce:	1a9a      	subs	r2, r3, r2
   127d0:	2301      	movs	r3, #1
   127d2:	431a      	orrs	r2, r3
   127d4:	604a      	str	r2, [r1, #4]
   127d6:	4652      	mov	r2, sl
   127d8:	6852      	ldr	r2, [r2, #4]
   127da:	4013      	ands	r3, r2
   127dc:	4642      	mov	r2, r8
   127de:	4313      	orrs	r3, r2
   127e0:	4652      	mov	r2, sl
   127e2:	6053      	str	r3, [r2, #4]
   127e4:	f7f8 ff9c 	bl	b720 <__malloc_unlock>
   127e8:	e743      	b.n	12672 <_realloc_r+0xfe>
   127ea:	6833      	ldr	r3, [r6, #0]
   127ec:	6003      	str	r3, [r0, #0]
   127ee:	6873      	ldr	r3, [r6, #4]
   127f0:	6043      	str	r3, [r0, #4]
   127f2:	2a1b      	cmp	r2, #27
   127f4:	d82d      	bhi.n	12852 <_realloc_r+0x2de>
   127f6:	0003      	movs	r3, r0
   127f8:	0032      	movs	r2, r6
   127fa:	3308      	adds	r3, #8
   127fc:	3208      	adds	r2, #8
   127fe:	e70d      	b.n	1261c <_realloc_r+0xa8>
   12800:	002b      	movs	r3, r5
   12802:	0032      	movs	r2, r6
   12804:	6811      	ldr	r1, [r2, #0]
   12806:	465c      	mov	r4, fp
   12808:	6019      	str	r1, [r3, #0]
   1280a:	6851      	ldr	r1, [r2, #4]
   1280c:	46d1      	mov	r9, sl
   1280e:	6059      	str	r1, [r3, #4]
   12810:	6892      	ldr	r2, [r2, #8]
   12812:	609a      	str	r2, [r3, #8]
   12814:	e71b      	b.n	1264e <_realloc_r+0xda>
   12816:	4643      	mov	r3, r8
   12818:	18fa      	adds	r2, r7, r3
   1281a:	465b      	mov	r3, fp
   1281c:	609a      	str	r2, [r3, #8]
   1281e:	4643      	mov	r3, r8
   12820:	1ac9      	subs	r1, r1, r3
   12822:	2301      	movs	r3, #1
   12824:	4319      	orrs	r1, r3
   12826:	6051      	str	r1, [r2, #4]
   12828:	687a      	ldr	r2, [r7, #4]
   1282a:	9801      	ldr	r0, [sp, #4]
   1282c:	4013      	ands	r3, r2
   1282e:	4642      	mov	r2, r8
   12830:	4313      	orrs	r3, r2
   12832:	607b      	str	r3, [r7, #4]
   12834:	f7f8 ff74 	bl	b720 <__malloc_unlock>
   12838:	0035      	movs	r5, r6
   1283a:	e71a      	b.n	12672 <_realloc_r+0xfe>
   1283c:	0031      	movs	r1, r6
   1283e:	f7ff f987 	bl	11b50 <memmove>
   12842:	e6f1      	b.n	12628 <_realloc_r+0xb4>
   12844:	0031      	movs	r1, r6
   12846:	0028      	movs	r0, r5
   12848:	f7ff f982 	bl	11b50 <memmove>
   1284c:	465c      	mov	r4, fp
   1284e:	46d1      	mov	r9, sl
   12850:	e6fd      	b.n	1264e <_realloc_r+0xda>
   12852:	68b3      	ldr	r3, [r6, #8]
   12854:	6083      	str	r3, [r0, #8]
   12856:	68f3      	ldr	r3, [r6, #12]
   12858:	60c3      	str	r3, [r0, #12]
   1285a:	2a24      	cmp	r2, #36	; 0x24
   1285c:	d015      	beq.n	1288a <_realloc_r+0x316>
   1285e:	0003      	movs	r3, r0
   12860:	0032      	movs	r2, r6
   12862:	3310      	adds	r3, #16
   12864:	3210      	adds	r2, #16
   12866:	e6d9      	b.n	1261c <_realloc_r+0xa8>
   12868:	6853      	ldr	r3, [r2, #4]
   1286a:	2203      	movs	r2, #3
   1286c:	4393      	bics	r3, r2
   1286e:	18e4      	adds	r4, r4, r3
   12870:	0035      	movs	r5, r6
   12872:	e6ec      	b.n	1264e <_realloc_r+0xda>
   12874:	4653      	mov	r3, sl
   12876:	68b1      	ldr	r1, [r6, #8]
   12878:	6119      	str	r1, [r3, #16]
   1287a:	68f1      	ldr	r1, [r6, #12]
   1287c:	6159      	str	r1, [r3, #20]
   1287e:	2a24      	cmp	r2, #36	; 0x24
   12880:	d00c      	beq.n	1289c <_realloc_r+0x328>
   12882:	0032      	movs	r2, r6
   12884:	3318      	adds	r3, #24
   12886:	3210      	adds	r2, #16
   12888:	e7bc      	b.n	12804 <_realloc_r+0x290>
   1288a:	6933      	ldr	r3, [r6, #16]
   1288c:	0032      	movs	r2, r6
   1288e:	6103      	str	r3, [r0, #16]
   12890:	0003      	movs	r3, r0
   12892:	6971      	ldr	r1, [r6, #20]
   12894:	3318      	adds	r3, #24
   12896:	3218      	adds	r2, #24
   12898:	6141      	str	r1, [r0, #20]
   1289a:	e6bf      	b.n	1261c <_realloc_r+0xa8>
   1289c:	4653      	mov	r3, sl
   1289e:	6932      	ldr	r2, [r6, #16]
   128a0:	4651      	mov	r1, sl
   128a2:	619a      	str	r2, [r3, #24]
   128a4:	0032      	movs	r2, r6
   128a6:	6970      	ldr	r0, [r6, #20]
   128a8:	3320      	adds	r3, #32
   128aa:	3218      	adds	r2, #24
   128ac:	61c8      	str	r0, [r1, #28]
   128ae:	e7a9      	b.n	12804 <_realloc_r+0x290>
   128b0:	002b      	movs	r3, r5
   128b2:	0032      	movs	r2, r6
   128b4:	e77e      	b.n	127b4 <_realloc_r+0x240>
   128b6:	0031      	movs	r1, r6
   128b8:	0028      	movs	r0, r5
   128ba:	f7ff f949 	bl	11b50 <memmove>
   128be:	e77f      	b.n	127c0 <_realloc_r+0x24c>
   128c0:	4653      	mov	r3, sl
   128c2:	68b1      	ldr	r1, [r6, #8]
   128c4:	6119      	str	r1, [r3, #16]
   128c6:	68f1      	ldr	r1, [r6, #12]
   128c8:	6159      	str	r1, [r3, #20]
   128ca:	2a24      	cmp	r2, #36	; 0x24
   128cc:	d003      	beq.n	128d6 <_realloc_r+0x362>
   128ce:	0032      	movs	r2, r6
   128d0:	3318      	adds	r3, #24
   128d2:	3210      	adds	r2, #16
   128d4:	e76e      	b.n	127b4 <_realloc_r+0x240>
   128d6:	4653      	mov	r3, sl
   128d8:	6932      	ldr	r2, [r6, #16]
   128da:	4651      	mov	r1, sl
   128dc:	619a      	str	r2, [r3, #24]
   128de:	0032      	movs	r2, r6
   128e0:	6970      	ldr	r0, [r6, #20]
   128e2:	3320      	adds	r3, #32
   128e4:	3218      	adds	r2, #24
   128e6:	61c8      	str	r0, [r1, #28]
   128e8:	e764      	b.n	127b4 <_realloc_r+0x240>
   128ea:	46c0      	nop			; (mov r8, r8)
   128ec:	200004b8 	.word	0x200004b8

000128f0 <__sccl>:
   128f0:	b570      	push	{r4, r5, r6, lr}
   128f2:	780c      	ldrb	r4, [r1, #0]
   128f4:	2c5e      	cmp	r4, #94	; 0x5e
   128f6:	d028      	beq.n	1294a <__sccl+0x5a>
   128f8:	1c4e      	adds	r6, r1, #1
   128fa:	2500      	movs	r5, #0
   128fc:	2100      	movs	r1, #0
   128fe:	0003      	movs	r3, r0
   12900:	1c42      	adds	r2, r0, #1
   12902:	32ff      	adds	r2, #255	; 0xff
   12904:	7019      	strb	r1, [r3, #0]
   12906:	3301      	adds	r3, #1
   12908:	429a      	cmp	r2, r3
   1290a:	d1fb      	bne.n	12904 <__sccl+0x14>
   1290c:	1e71      	subs	r1, r6, #1
   1290e:	2c00      	cmp	r4, #0
   12910:	d00e      	beq.n	12930 <__sccl+0x40>
   12912:	2301      	movs	r3, #1
   12914:	406b      	eors	r3, r5
   12916:	5503      	strb	r3, [r0, r4]
   12918:	7832      	ldrb	r2, [r6, #0]
   1291a:	1c71      	adds	r1, r6, #1
   1291c:	2a2d      	cmp	r2, #45	; 0x2d
   1291e:	d009      	beq.n	12934 <__sccl+0x44>
   12920:	2a5d      	cmp	r2, #93	; 0x5d
   12922:	d005      	beq.n	12930 <__sccl+0x40>
   12924:	2a00      	cmp	r2, #0
   12926:	d002      	beq.n	1292e <__sccl+0x3e>
   12928:	0014      	movs	r4, r2
   1292a:	000e      	movs	r6, r1
   1292c:	e7f3      	b.n	12916 <__sccl+0x26>
   1292e:	0031      	movs	r1, r6
   12930:	0008      	movs	r0, r1
   12932:	bd70      	pop	{r4, r5, r6, pc}
   12934:	7872      	ldrb	r2, [r6, #1]
   12936:	2a5d      	cmp	r2, #93	; 0x5d
   12938:	d00c      	beq.n	12954 <__sccl+0x64>
   1293a:	4294      	cmp	r4, r2
   1293c:	dc0a      	bgt.n	12954 <__sccl+0x64>
   1293e:	3602      	adds	r6, #2
   12940:	3401      	adds	r4, #1
   12942:	5503      	strb	r3, [r0, r4]
   12944:	42a2      	cmp	r2, r4
   12946:	dcfb      	bgt.n	12940 <__sccl+0x50>
   12948:	e7e6      	b.n	12918 <__sccl+0x28>
   1294a:	1c8e      	adds	r6, r1, #2
   1294c:	784c      	ldrb	r4, [r1, #1]
   1294e:	2501      	movs	r5, #1
   12950:	2101      	movs	r1, #1
   12952:	e7d4      	b.n	128fe <__sccl+0xe>
   12954:	242d      	movs	r4, #45	; 0x2d
   12956:	000e      	movs	r6, r1
   12958:	e7dd      	b.n	12916 <__sccl+0x26>
   1295a:	46c0      	nop			; (mov r8, r8)

0001295c <nanf>:
   1295c:	4800      	ldr	r0, [pc, #0]	; (12960 <nanf+0x4>)
   1295e:	4770      	bx	lr
   12960:	7fc00000 	.word	0x7fc00000

00012964 <sulp>:
   12964:	b570      	push	{r4, r5, r6, lr}
   12966:	0016      	movs	r6, r2
   12968:	000d      	movs	r5, r1
   1296a:	f7ff fc75 	bl	12258 <__ulp>
   1296e:	2e00      	cmp	r6, #0
   12970:	d00d      	beq.n	1298e <sulp+0x2a>
   12972:	236b      	movs	r3, #107	; 0x6b
   12974:	006a      	lsls	r2, r5, #1
   12976:	0d52      	lsrs	r2, r2, #21
   12978:	1a9b      	subs	r3, r3, r2
   1297a:	2b00      	cmp	r3, #0
   1297c:	dd07      	ble.n	1298e <sulp+0x2a>
   1297e:	2400      	movs	r4, #0
   12980:	4a03      	ldr	r2, [pc, #12]	; (12990 <sulp+0x2c>)
   12982:	051b      	lsls	r3, r3, #20
   12984:	189d      	adds	r5, r3, r2
   12986:	002b      	movs	r3, r5
   12988:	0022      	movs	r2, r4
   1298a:	f7f7 fb0f 	bl	9fac <__aeabi_dmul>
   1298e:	bd70      	pop	{r4, r5, r6, pc}
   12990:	3ff00000 	.word	0x3ff00000

00012994 <_strtod_l>:
   12994:	b5f0      	push	{r4, r5, r6, r7, lr}
   12996:	46de      	mov	lr, fp
   12998:	4657      	mov	r7, sl
   1299a:	464e      	mov	r6, r9
   1299c:	4645      	mov	r5, r8
   1299e:	b5e0      	push	{r5, r6, r7, lr}
   129a0:	001d      	movs	r5, r3
   129a2:	2300      	movs	r3, #0
   129a4:	b0a3      	sub	sp, #140	; 0x8c
   129a6:	9009      	str	r0, [sp, #36]	; 0x24
   129a8:	0028      	movs	r0, r5
   129aa:	000e      	movs	r6, r1
   129ac:	931e      	str	r3, [sp, #120]	; 0x78
   129ae:	4693      	mov	fp, r2
   129b0:	f7fe ffa2 	bl	118f8 <__localeconv_l>
   129b4:	0007      	movs	r7, r0
   129b6:	6800      	ldr	r0, [r0, #0]
   129b8:	f7f9 f8f0 	bl	bb9c <strlen>
   129bc:	2400      	movs	r4, #0
   129be:	2300      	movs	r3, #0
   129c0:	9304      	str	r3, [sp, #16]
   129c2:	9405      	str	r4, [sp, #20]
   129c4:	0033      	movs	r3, r6
   129c6:	961d      	str	r6, [sp, #116]	; 0x74
   129c8:	781c      	ldrb	r4, [r3, #0]
   129ca:	9008      	str	r0, [sp, #32]
   129cc:	49c4      	ldr	r1, [pc, #784]	; (12ce0 <_strtod_l+0x34c>)
   129ce:	2c2d      	cmp	r4, #45	; 0x2d
   129d0:	d900      	bls.n	129d4 <_strtod_l+0x40>
   129d2:	e070      	b.n	12ab6 <_strtod_l+0x122>
   129d4:	00a2      	lsls	r2, r4, #2
   129d6:	588a      	ldr	r2, [r1, r2]
   129d8:	4697      	mov	pc, r2
   129da:	4689      	mov	r9, r1
   129dc:	0014      	movs	r4, r2
   129de:	6839      	ldr	r1, [r7, #0]
   129e0:	9a08      	ldr	r2, [sp, #32]
   129e2:	4698      	mov	r8, r3
   129e4:	f002 f924 	bl	14c30 <strncmp>
   129e8:	2800      	cmp	r0, #0
   129ea:	d100      	bne.n	129ee <_strtod_l+0x5a>
   129ec:	e084      	b.n	12af8 <_strtod_l+0x164>
   129ee:	2200      	movs	r2, #0
   129f0:	2300      	movs	r3, #0
   129f2:	2000      	movs	r0, #0
   129f4:	950a      	str	r5, [sp, #40]	; 0x28
   129f6:	9208      	str	r2, [sp, #32]
   129f8:	2220      	movs	r2, #32
   129fa:	0021      	movs	r1, r4
   129fc:	4391      	bics	r1, r2
   129fe:	2200      	movs	r2, #0
   12a00:	2945      	cmp	r1, #69	; 0x45
   12a02:	d100      	bne.n	12a06 <_strtod_l+0x72>
   12a04:	e0a6      	b.n	12b54 <_strtod_l+0x1c0>
   12a06:	2d00      	cmp	r5, #0
   12a08:	d000      	beq.n	12a0c <_strtod_l+0x78>
   12a0a:	e104      	b.n	12c16 <_strtod_l+0x282>
   12a0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12a0e:	4313      	orrs	r3, r2
   12a10:	d000      	beq.n	12a14 <_strtod_l+0x80>
   12a12:	e0f8      	b.n	12c06 <_strtod_l+0x272>
   12a14:	9b08      	ldr	r3, [sp, #32]
   12a16:	2b00      	cmp	r3, #0
   12a18:	d100      	bne.n	12a1c <_strtod_l+0x88>
   12a1a:	e13d      	b.n	12c98 <_strtod_l+0x304>
   12a1c:	465b      	mov	r3, fp
   12a1e:	2400      	movs	r4, #0
   12a20:	2500      	movs	r5, #0
   12a22:	2b00      	cmp	r3, #0
   12a24:	d006      	beq.n	12a34 <_strtod_l+0xa0>
   12a26:	2300      	movs	r3, #0
   12a28:	9307      	str	r3, [sp, #28]
   12a2a:	465b      	mov	r3, fp
   12a2c:	601e      	str	r6, [r3, #0]
   12a2e:	9b07      	ldr	r3, [sp, #28]
   12a30:	2b00      	cmp	r3, #0
   12a32:	d108      	bne.n	12a46 <_strtod_l+0xb2>
   12a34:	0020      	movs	r0, r4
   12a36:	0029      	movs	r1, r5
   12a38:	b023      	add	sp, #140	; 0x8c
   12a3a:	bc3c      	pop	{r2, r3, r4, r5}
   12a3c:	4690      	mov	r8, r2
   12a3e:	4699      	mov	r9, r3
   12a40:	46a2      	mov	sl, r4
   12a42:	46ab      	mov	fp, r5
   12a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12a46:	2180      	movs	r1, #128	; 0x80
   12a48:	0609      	lsls	r1, r1, #24
   12a4a:	186b      	adds	r3, r5, r1
   12a4c:	001d      	movs	r5, r3
   12a4e:	e7f1      	b.n	12a34 <_strtod_l+0xa0>
   12a50:	2200      	movs	r2, #0
   12a52:	9207      	str	r2, [sp, #28]
   12a54:	1c5a      	adds	r2, r3, #1
   12a56:	921d      	str	r2, [sp, #116]	; 0x74
   12a58:	785c      	ldrb	r4, [r3, #1]
   12a5a:	4692      	mov	sl, r2
   12a5c:	2c00      	cmp	r4, #0
   12a5e:	d0dd      	beq.n	12a1c <_strtod_l+0x88>
   12a60:	2300      	movs	r3, #0
   12a62:	930c      	str	r3, [sp, #48]	; 0x30
   12a64:	2c30      	cmp	r4, #48	; 0x30
   12a66:	d02d      	beq.n	12ac4 <_strtod_l+0x130>
   12a68:	0023      	movs	r3, r4
   12a6a:	3b30      	subs	r3, #48	; 0x30
   12a6c:	2b09      	cmp	r3, #9
   12a6e:	d900      	bls.n	12a72 <_strtod_l+0xde>
   12a70:	e38c      	b.n	1318c <_strtod_l+0x7f8>
   12a72:	2300      	movs	r3, #0
   12a74:	4650      	mov	r0, sl
   12a76:	2500      	movs	r5, #0
   12a78:	0019      	movs	r1, r3
   12a7a:	0022      	movs	r2, r4
   12a7c:	e00c      	b.n	12a98 <_strtod_l+0x104>
   12a7e:	009c      	lsls	r4, r3, #2
   12a80:	18e3      	adds	r3, r4, r3
   12a82:	005b      	lsls	r3, r3, #1
   12a84:	189b      	adds	r3, r3, r2
   12a86:	3b30      	subs	r3, #48	; 0x30
   12a88:	3001      	adds	r0, #1
   12a8a:	901d      	str	r0, [sp, #116]	; 0x74
   12a8c:	7802      	ldrb	r2, [r0, #0]
   12a8e:	3501      	adds	r5, #1
   12a90:	0014      	movs	r4, r2
   12a92:	3c30      	subs	r4, #48	; 0x30
   12a94:	2c09      	cmp	r4, #9
   12a96:	d8a0      	bhi.n	129da <_strtod_l+0x46>
   12a98:	2d08      	cmp	r5, #8
   12a9a:	ddf0      	ble.n	12a7e <_strtod_l+0xea>
   12a9c:	008c      	lsls	r4, r1, #2
   12a9e:	1864      	adds	r4, r4, r1
   12aa0:	0064      	lsls	r4, r4, #1
   12aa2:	18a4      	adds	r4, r4, r2
   12aa4:	0021      	movs	r1, r4
   12aa6:	3930      	subs	r1, #48	; 0x30
   12aa8:	e7ee      	b.n	12a88 <_strtod_l+0xf4>
   12aaa:	3301      	adds	r3, #1
   12aac:	931d      	str	r3, [sp, #116]	; 0x74
   12aae:	781c      	ldrb	r4, [r3, #0]
   12ab0:	2c2d      	cmp	r4, #45	; 0x2d
   12ab2:	d800      	bhi.n	12ab6 <_strtod_l+0x122>
   12ab4:	e78e      	b.n	129d4 <_strtod_l+0x40>
   12ab6:	469a      	mov	sl, r3
   12ab8:	2300      	movs	r3, #0
   12aba:	9307      	str	r3, [sp, #28]
   12abc:	2300      	movs	r3, #0
   12abe:	930c      	str	r3, [sp, #48]	; 0x30
   12ac0:	2c30      	cmp	r4, #48	; 0x30
   12ac2:	d1d1      	bne.n	12a68 <_strtod_l+0xd4>
   12ac4:	4653      	mov	r3, sl
   12ac6:	785b      	ldrb	r3, [r3, #1]
   12ac8:	2b58      	cmp	r3, #88	; 0x58
   12aca:	d100      	bne.n	12ace <_strtod_l+0x13a>
   12acc:	e334      	b.n	13138 <_strtod_l+0x7a4>
   12ace:	2b78      	cmp	r3, #120	; 0x78
   12ad0:	d100      	bne.n	12ad4 <_strtod_l+0x140>
   12ad2:	e331      	b.n	13138 <_strtod_l+0x7a4>
   12ad4:	4653      	mov	r3, sl
   12ad6:	3301      	adds	r3, #1
   12ad8:	001a      	movs	r2, r3
   12ada:	931d      	str	r3, [sp, #116]	; 0x74
   12adc:	7814      	ldrb	r4, [r2, #0]
   12ade:	3301      	adds	r3, #1
   12ae0:	2c30      	cmp	r4, #48	; 0x30
   12ae2:	d0f9      	beq.n	12ad8 <_strtod_l+0x144>
   12ae4:	4692      	mov	sl, r2
   12ae6:	2c00      	cmp	r4, #0
   12ae8:	d100      	bne.n	12aec <_strtod_l+0x158>
   12aea:	e08c      	b.n	12c06 <_strtod_l+0x272>
   12aec:	2301      	movs	r3, #1
   12aee:	930c      	str	r3, [sp, #48]	; 0x30
   12af0:	e7ba      	b.n	12a68 <_strtod_l+0xd4>
   12af2:	2201      	movs	r2, #1
   12af4:	9207      	str	r2, [sp, #28]
   12af6:	e7ad      	b.n	12a54 <_strtod_l+0xc0>
   12af8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   12afa:	9b08      	ldr	r3, [sp, #32]
   12afc:	4694      	mov	ip, r2
   12afe:	4463      	add	r3, ip
   12b00:	931d      	str	r3, [sp, #116]	; 0x74
   12b02:	781c      	ldrb	r4, [r3, #0]
   12b04:	2300      	movs	r3, #0
   12b06:	950a      	str	r5, [sp, #40]	; 0x28
   12b08:	0022      	movs	r2, r4
   12b0a:	3a30      	subs	r2, #48	; 0x30
   12b0c:	2a09      	cmp	r2, #9
   12b0e:	d900      	bls.n	12b12 <_strtod_l+0x17e>
   12b10:	e0e2      	b.n	12cd8 <_strtod_l+0x344>
   12b12:	1c5c      	adds	r4, r3, #1
   12b14:	4694      	mov	ip, r2
   12b16:	2a00      	cmp	r2, #0
   12b18:	d101      	bne.n	12b1e <_strtod_l+0x18a>
   12b1a:	f000 fe76 	bl	1380a <_strtod_l+0xe76>
   12b1e:	1900      	adds	r0, r0, r4
   12b20:	195b      	adds	r3, r3, r5
   12b22:	2c01      	cmp	r4, #1
   12b24:	d101      	bne.n	12b2a <_strtod_l+0x196>
   12b26:	f000 fe6c 	bl	13802 <_strtod_l+0xe6e>
   12b2a:	4644      	mov	r4, r8
   12b2c:	e007      	b.n	12b3e <_strtod_l+0x1aa>
   12b2e:	00a1      	lsls	r1, r4, #2
   12b30:	190c      	adds	r4, r1, r4
   12b32:	0064      	lsls	r4, r4, #1
   12b34:	429f      	cmp	r7, r3
   12b36:	d101      	bne.n	12b3c <_strtod_l+0x1a8>
   12b38:	f000 fbef 	bl	1331a <_strtod_l+0x986>
   12b3c:	003d      	movs	r5, r7
   12b3e:	1c6f      	adds	r7, r5, #1
   12b40:	2d08      	cmp	r5, #8
   12b42:	ddf4      	ble.n	12b2e <_strtod_l+0x19a>
   12b44:	2f10      	cmp	r7, #16
   12b46:	dcf5      	bgt.n	12b34 <_strtod_l+0x1a0>
   12b48:	4649      	mov	r1, r9
   12b4a:	0089      	lsls	r1, r1, #2
   12b4c:	4449      	add	r1, r9
   12b4e:	0049      	lsls	r1, r1, #1
   12b50:	4689      	mov	r9, r1
   12b52:	e7ef      	b.n	12b34 <_strtod_l+0x1a0>
   12b54:	002a      	movs	r2, r5
   12b56:	990c      	ldr	r1, [sp, #48]	; 0x30
   12b58:	431a      	orrs	r2, r3
   12b5a:	430a      	orrs	r2, r1
   12b5c:	d100      	bne.n	12b60 <_strtod_l+0x1cc>
   12b5e:	e75d      	b.n	12a1c <_strtod_l+0x88>
   12b60:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   12b62:	1c72      	adds	r2, r6, #1
   12b64:	921d      	str	r2, [sp, #116]	; 0x74
   12b66:	7874      	ldrb	r4, [r6, #1]
   12b68:	2c2b      	cmp	r4, #43	; 0x2b
   12b6a:	d100      	bne.n	12b6e <_strtod_l+0x1da>
   12b6c:	e39a      	b.n	132a4 <_strtod_l+0x910>
   12b6e:	2c2d      	cmp	r4, #45	; 0x2d
   12b70:	d100      	bne.n	12b74 <_strtod_l+0x1e0>
   12b72:	e230      	b.n	12fd6 <_strtod_l+0x642>
   12b74:	2200      	movs	r2, #0
   12b76:	920d      	str	r2, [sp, #52]	; 0x34
   12b78:	0022      	movs	r2, r4
   12b7a:	3a30      	subs	r2, #48	; 0x30
   12b7c:	2a09      	cmp	r2, #9
   12b7e:	d900      	bls.n	12b82 <_strtod_l+0x1ee>
   12b80:	e2f5      	b.n	1316e <_strtod_l+0x7da>
   12b82:	2c30      	cmp	r4, #48	; 0x30
   12b84:	d106      	bne.n	12b94 <_strtod_l+0x200>
   12b86:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   12b88:	3201      	adds	r2, #1
   12b8a:	921d      	str	r2, [sp, #116]	; 0x74
   12b8c:	7814      	ldrb	r4, [r2, #0]
   12b8e:	3201      	adds	r2, #1
   12b90:	2c30      	cmp	r4, #48	; 0x30
   12b92:	d0fa      	beq.n	12b8a <_strtod_l+0x1f6>
   12b94:	0021      	movs	r1, r4
   12b96:	3931      	subs	r1, #49	; 0x31
   12b98:	2200      	movs	r2, #0
   12b9a:	2908      	cmp	r1, #8
   12b9c:	d900      	bls.n	12ba0 <_strtod_l+0x20c>
   12b9e:	e732      	b.n	12a06 <_strtod_l+0x72>
   12ba0:	991d      	ldr	r1, [sp, #116]	; 0x74
   12ba2:	0022      	movs	r2, r4
   12ba4:	1c4c      	adds	r4, r1, #1
   12ba6:	941d      	str	r4, [sp, #116]	; 0x74
   12ba8:	46a4      	mov	ip, r4
   12baa:	784c      	ldrb	r4, [r1, #1]
   12bac:	000f      	movs	r7, r1
   12bae:	910e      	str	r1, [sp, #56]	; 0x38
   12bb0:	0021      	movs	r1, r4
   12bb2:	3930      	subs	r1, #48	; 0x30
   12bb4:	3a30      	subs	r2, #48	; 0x30
   12bb6:	2909      	cmp	r1, #9
   12bb8:	d815      	bhi.n	12be6 <_strtod_l+0x252>
   12bba:	0039      	movs	r1, r7
   12bbc:	469c      	mov	ip, r3
   12bbe:	0027      	movs	r7, r4
   12bc0:	3102      	adds	r1, #2
   12bc2:	0094      	lsls	r4, r2, #2
   12bc4:	18a4      	adds	r4, r4, r2
   12bc6:	911d      	str	r1, [sp, #116]	; 0x74
   12bc8:	0064      	lsls	r4, r4, #1
   12bca:	19e4      	adds	r4, r4, r7
   12bcc:	780f      	ldrb	r7, [r1, #0]
   12bce:	0022      	movs	r2, r4
   12bd0:	003c      	movs	r4, r7
   12bd2:	3c30      	subs	r4, #48	; 0x30
   12bd4:	000b      	movs	r3, r1
   12bd6:	3a30      	subs	r2, #48	; 0x30
   12bd8:	3101      	adds	r1, #1
   12bda:	2c09      	cmp	r4, #9
   12bdc:	d9f1      	bls.n	12bc2 <_strtod_l+0x22e>
   12bde:	0019      	movs	r1, r3
   12be0:	003c      	movs	r4, r7
   12be2:	4663      	mov	r3, ip
   12be4:	468c      	mov	ip, r1
   12be6:	4661      	mov	r1, ip
   12be8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   12bea:	1bc9      	subs	r1, r1, r7
   12bec:	2908      	cmp	r1, #8
   12bee:	dd00      	ble.n	12bf2 <_strtod_l+0x25e>
   12bf0:	e256      	b.n	130a0 <_strtod_l+0x70c>
   12bf2:	493c      	ldr	r1, [pc, #240]	; (12ce4 <_strtod_l+0x350>)
   12bf4:	428a      	cmp	r2, r1
   12bf6:	dd00      	ble.n	12bfa <_strtod_l+0x266>
   12bf8:	e252      	b.n	130a0 <_strtod_l+0x70c>
   12bfa:	990d      	ldr	r1, [sp, #52]	; 0x34
   12bfc:	2900      	cmp	r1, #0
   12bfe:	d100      	bne.n	12c02 <_strtod_l+0x26e>
   12c00:	e701      	b.n	12a06 <_strtod_l+0x72>
   12c02:	4252      	negs	r2, r2
   12c04:	e6ff      	b.n	12a06 <_strtod_l+0x72>
   12c06:	2400      	movs	r4, #0
   12c08:	2500      	movs	r5, #0
   12c0a:	465b      	mov	r3, fp
   12c0c:	2b00      	cmp	r3, #0
   12c0e:	d100      	bne.n	12c12 <_strtod_l+0x27e>
   12c10:	e70d      	b.n	12a2e <_strtod_l+0x9a>
   12c12:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   12c14:	e709      	b.n	12a2a <_strtod_l+0x96>
   12c16:	1a13      	subs	r3, r2, r0
   12c18:	9308      	str	r3, [sp, #32]
   12c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12c1c:	2b00      	cmp	r3, #0
   12c1e:	d100      	bne.n	12c22 <_strtod_l+0x28e>
   12c20:	950a      	str	r5, [sp, #40]	; 0x28
   12c22:	002c      	movs	r4, r5
   12c24:	2d10      	cmp	r5, #16
   12c26:	dd00      	ble.n	12c2a <_strtod_l+0x296>
   12c28:	2410      	movs	r4, #16
   12c2a:	4640      	mov	r0, r8
   12c2c:	f7f7 ffca 	bl	abc4 <__aeabi_ui2d>
   12c30:	9004      	str	r0, [sp, #16]
   12c32:	9105      	str	r1, [sp, #20]
   12c34:	2c09      	cmp	r4, #9
   12c36:	dd15      	ble.n	12c64 <_strtod_l+0x2d0>
   12c38:	0022      	movs	r2, r4
   12c3a:	4b2b      	ldr	r3, [pc, #172]	; (12ce8 <_strtod_l+0x354>)
   12c3c:	3a09      	subs	r2, #9
   12c3e:	00d2      	lsls	r2, r2, #3
   12c40:	189b      	adds	r3, r3, r2
   12c42:	681a      	ldr	r2, [r3, #0]
   12c44:	685b      	ldr	r3, [r3, #4]
   12c46:	f7f7 f9b1 	bl	9fac <__aeabi_dmul>
   12c4a:	0006      	movs	r6, r0
   12c4c:	4648      	mov	r0, r9
   12c4e:	000f      	movs	r7, r1
   12c50:	f7f7 ffb8 	bl	abc4 <__aeabi_ui2d>
   12c54:	0002      	movs	r2, r0
   12c56:	000b      	movs	r3, r1
   12c58:	0030      	movs	r0, r6
   12c5a:	0039      	movs	r1, r7
   12c5c:	f002 f85c 	bl	14d18 <__aeabi_dadd>
   12c60:	9004      	str	r0, [sp, #16]
   12c62:	9105      	str	r1, [sp, #20]
   12c64:	2d0f      	cmp	r5, #15
   12c66:	dc45      	bgt.n	12cf4 <_strtod_l+0x360>
   12c68:	9b08      	ldr	r3, [sp, #32]
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d031      	beq.n	12cd2 <_strtod_l+0x33e>
   12c6e:	9b08      	ldr	r3, [sp, #32]
   12c70:	2b00      	cmp	r3, #0
   12c72:	dc01      	bgt.n	12c78 <_strtod_l+0x2e4>
   12c74:	f000 fc69 	bl	1354a <_strtod_l+0xbb6>
   12c78:	2b16      	cmp	r3, #22
   12c7a:	dd01      	ble.n	12c80 <_strtod_l+0x2ec>
   12c7c:	f000 fc15 	bl	134aa <_strtod_l+0xb16>
   12c80:	4919      	ldr	r1, [pc, #100]	; (12ce8 <_strtod_l+0x354>)
   12c82:	00da      	lsls	r2, r3, #3
   12c84:	1889      	adds	r1, r1, r2
   12c86:	6808      	ldr	r0, [r1, #0]
   12c88:	6849      	ldr	r1, [r1, #4]
   12c8a:	9a04      	ldr	r2, [sp, #16]
   12c8c:	9b05      	ldr	r3, [sp, #20]
   12c8e:	f7f7 f98d 	bl	9fac <__aeabi_dmul>
   12c92:	0004      	movs	r4, r0
   12c94:	000d      	movs	r5, r1
   12c96:	e7b8      	b.n	12c0a <_strtod_l+0x276>
   12c98:	2c4e      	cmp	r4, #78	; 0x4e
   12c9a:	d009      	beq.n	12cb0 <_strtod_l+0x31c>
   12c9c:	dc01      	bgt.n	12ca2 <_strtod_l+0x30e>
   12c9e:	f000 fc2b 	bl	134f8 <_strtod_l+0xb64>
   12ca2:	2c69      	cmp	r4, #105	; 0x69
   12ca4:	d101      	bne.n	12caa <_strtod_l+0x316>
   12ca6:	f000 fc2b 	bl	13500 <_strtod_l+0xb6c>
   12caa:	2c6e      	cmp	r4, #110	; 0x6e
   12cac:	d000      	beq.n	12cb0 <_strtod_l+0x31c>
   12cae:	e6b5      	b.n	12a1c <_strtod_l+0x88>
   12cb0:	490e      	ldr	r1, [pc, #56]	; (12cec <_strtod_l+0x358>)
   12cb2:	a81d      	add	r0, sp, #116	; 0x74
   12cb4:	f001 fec0 	bl	14a38 <__match>
   12cb8:	2800      	cmp	r0, #0
   12cba:	d100      	bne.n	12cbe <_strtod_l+0x32a>
   12cbc:	e6ae      	b.n	12a1c <_strtod_l+0x88>
   12cbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   12cc0:	781b      	ldrb	r3, [r3, #0]
   12cc2:	2b28      	cmp	r3, #40	; 0x28
   12cc4:	d101      	bne.n	12cca <_strtod_l+0x336>
   12cc6:	f000 fd0d 	bl	136e4 <_strtod_l+0xd50>
   12cca:	4b09      	ldr	r3, [pc, #36]	; (12cf0 <_strtod_l+0x35c>)
   12ccc:	9305      	str	r3, [sp, #20]
   12cce:	2300      	movs	r3, #0
   12cd0:	9304      	str	r3, [sp, #16]
   12cd2:	9c04      	ldr	r4, [sp, #16]
   12cd4:	9d05      	ldr	r5, [sp, #20]
   12cd6:	e798      	b.n	12c0a <_strtod_l+0x276>
   12cd8:	2201      	movs	r2, #1
   12cda:	9208      	str	r2, [sp, #32]
   12cdc:	e68c      	b.n	129f8 <_strtod_l+0x64>
   12cde:	46c0      	nop			; (mov r8, r8)
   12ce0:	0001942c 	.word	0x0001942c
   12ce4:	00004e1f 	.word	0x00004e1f
   12ce8:	00019358 	.word	0x00019358
   12cec:	00019508 	.word	0x00019508
   12cf0:	fff80000 	.word	0xfff80000
   12cf4:	9b08      	ldr	r3, [sp, #32]
   12cf6:	1b2c      	subs	r4, r5, r4
   12cf8:	469c      	mov	ip, r3
   12cfa:	4464      	add	r4, ip
   12cfc:	2c00      	cmp	r4, #0
   12cfe:	dc00      	bgt.n	12d02 <_strtod_l+0x36e>
   12d00:	e31f      	b.n	13342 <_strtod_l+0x9ae>
   12d02:	230f      	movs	r3, #15
   12d04:	4023      	ands	r3, r4
   12d06:	d00a      	beq.n	12d1e <_strtod_l+0x38a>
   12d08:	49d9      	ldr	r1, [pc, #868]	; (13070 <_strtod_l+0x6dc>)
   12d0a:	00db      	lsls	r3, r3, #3
   12d0c:	18c9      	adds	r1, r1, r3
   12d0e:	6808      	ldr	r0, [r1, #0]
   12d10:	6849      	ldr	r1, [r1, #4]
   12d12:	9a04      	ldr	r2, [sp, #16]
   12d14:	9b05      	ldr	r3, [sp, #20]
   12d16:	f7f7 f949 	bl	9fac <__aeabi_dmul>
   12d1a:	9004      	str	r0, [sp, #16]
   12d1c:	9105      	str	r1, [sp, #20]
   12d1e:	230f      	movs	r3, #15
   12d20:	439c      	bics	r4, r3
   12d22:	d000      	beq.n	12d26 <_strtod_l+0x392>
   12d24:	e15d      	b.n	12fe2 <_strtod_l+0x64e>
   12d26:	2300      	movs	r3, #0
   12d28:	930c      	str	r3, [sp, #48]	; 0x30
   12d2a:	4643      	mov	r3, r8
   12d2c:	9300      	str	r3, [sp, #0]
   12d2e:	002b      	movs	r3, r5
   12d30:	9d09      	ldr	r5, [sp, #36]	; 0x24
   12d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12d34:	4651      	mov	r1, sl
   12d36:	0028      	movs	r0, r5
   12d38:	f7fe ffd2 	bl	11ce0 <__s2b>
   12d3c:	2800      	cmp	r0, #0
   12d3e:	d100      	bne.n	12d42 <_strtod_l+0x3ae>
   12d40:	e255      	b.n	131ee <_strtod_l+0x85a>
   12d42:	9908      	ldr	r1, [sp, #32]
   12d44:	424b      	negs	r3, r1
   12d46:	17ca      	asrs	r2, r1, #31
   12d48:	401a      	ands	r2, r3
   12d4a:	920e      	str	r2, [sp, #56]	; 0x38
   12d4c:	43ca      	mvns	r2, r1
   12d4e:	000b      	movs	r3, r1
   12d50:	17d2      	asrs	r2, r2, #31
   12d52:	4013      	ands	r3, r2
   12d54:	930d      	str	r3, [sp, #52]	; 0x34
   12d56:	2300      	movs	r3, #0
   12d58:	4699      	mov	r9, r3
   12d5a:	4698      	mov	r8, r3
   12d5c:	465b      	mov	r3, fp
   12d5e:	4683      	mov	fp, r0
   12d60:	9315      	str	r3, [sp, #84]	; 0x54
   12d62:	e0f4      	b.n	12f4e <_strtod_l+0x5ba>
   12d64:	1ac9      	subs	r1, r1, r3
   12d66:	1a52      	subs	r2, r2, r1
   12d68:	291f      	cmp	r1, #31
   12d6a:	dd00      	ble.n	12d6e <_strtod_l+0x3da>
   12d6c:	e1b5      	b.n	130da <_strtod_l+0x746>
   12d6e:	2301      	movs	r3, #1
   12d70:	408b      	lsls	r3, r1
   12d72:	9310      	str	r3, [sp, #64]	; 0x40
   12d74:	2300      	movs	r3, #0
   12d76:	9311      	str	r3, [sp, #68]	; 0x44
   12d78:	18bb      	adds	r3, r7, r2
   12d7a:	469a      	mov	sl, r3
   12d7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12d7e:	18b6      	adds	r6, r6, r2
   12d80:	469c      	mov	ip, r3
   12d82:	003b      	movs	r3, r7
   12d84:	4466      	add	r6, ip
   12d86:	4557      	cmp	r7, sl
   12d88:	dd00      	ble.n	12d8c <_strtod_l+0x3f8>
   12d8a:	4653      	mov	r3, sl
   12d8c:	42b3      	cmp	r3, r6
   12d8e:	dd00      	ble.n	12d92 <_strtod_l+0x3fe>
   12d90:	0033      	movs	r3, r6
   12d92:	2b00      	cmp	r3, #0
   12d94:	dd04      	ble.n	12da0 <_strtod_l+0x40c>
   12d96:	4652      	mov	r2, sl
   12d98:	1ad2      	subs	r2, r2, r3
   12d9a:	4692      	mov	sl, r2
   12d9c:	1af6      	subs	r6, r6, r3
   12d9e:	1aff      	subs	r7, r7, r3
   12da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12da2:	2b00      	cmp	r3, #0
   12da4:	d015      	beq.n	12dd2 <_strtod_l+0x43e>
   12da6:	4641      	mov	r1, r8
   12da8:	001a      	movs	r2, r3
   12daa:	0028      	movs	r0, r5
   12dac:	f7ff f8de 	bl	11f6c <__pow5mult>
   12db0:	4680      	mov	r8, r0
   12db2:	2800      	cmp	r0, #0
   12db4:	d100      	bne.n	12db8 <_strtod_l+0x424>
   12db6:	e252      	b.n	1325e <_strtod_l+0x8ca>
   12db8:	0001      	movs	r1, r0
   12dba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12dbc:	0028      	movs	r0, r5
   12dbe:	f7ff f82b 	bl	11e18 <__multiply>
   12dc2:	1e04      	subs	r4, r0, #0
   12dc4:	d100      	bne.n	12dc8 <_strtod_l+0x434>
   12dc6:	e24a      	b.n	1325e <_strtod_l+0x8ca>
   12dc8:	991e      	ldr	r1, [sp, #120]	; 0x78
   12dca:	0028      	movs	r0, r5
   12dcc:	f7fe ff38 	bl	11c40 <_Bfree>
   12dd0:	941e      	str	r4, [sp, #120]	; 0x78
   12dd2:	4653      	mov	r3, sl
   12dd4:	2b00      	cmp	r3, #0
   12dd6:	dd08      	ble.n	12dea <_strtod_l+0x456>
   12dd8:	4652      	mov	r2, sl
   12dda:	991e      	ldr	r1, [sp, #120]	; 0x78
   12ddc:	0028      	movs	r0, r5
   12dde:	f7ff f925 	bl	1202c <__lshift>
   12de2:	901e      	str	r0, [sp, #120]	; 0x78
   12de4:	2800      	cmp	r0, #0
   12de6:	d100      	bne.n	12dea <_strtod_l+0x456>
   12de8:	e3c2      	b.n	13570 <_strtod_l+0xbdc>
   12dea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   12dec:	2b00      	cmp	r3, #0
   12dee:	d008      	beq.n	12e02 <_strtod_l+0x46e>
   12df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   12df2:	9908      	ldr	r1, [sp, #32]
   12df4:	0028      	movs	r0, r5
   12df6:	f7ff f8b9 	bl	11f6c <__pow5mult>
   12dfa:	9008      	str	r0, [sp, #32]
   12dfc:	2800      	cmp	r0, #0
   12dfe:	d100      	bne.n	12e02 <_strtod_l+0x46e>
   12e00:	e22d      	b.n	1325e <_strtod_l+0x8ca>
   12e02:	2e00      	cmp	r6, #0
   12e04:	dd08      	ble.n	12e18 <_strtod_l+0x484>
   12e06:	0032      	movs	r2, r6
   12e08:	9908      	ldr	r1, [sp, #32]
   12e0a:	0028      	movs	r0, r5
   12e0c:	f7ff f90e 	bl	1202c <__lshift>
   12e10:	9008      	str	r0, [sp, #32]
   12e12:	2800      	cmp	r0, #0
   12e14:	d100      	bne.n	12e18 <_strtod_l+0x484>
   12e16:	e222      	b.n	1325e <_strtod_l+0x8ca>
   12e18:	2f00      	cmp	r7, #0
   12e1a:	dd08      	ble.n	12e2e <_strtod_l+0x49a>
   12e1c:	4641      	mov	r1, r8
   12e1e:	003a      	movs	r2, r7
   12e20:	0028      	movs	r0, r5
   12e22:	f7ff f903 	bl	1202c <__lshift>
   12e26:	4680      	mov	r8, r0
   12e28:	2800      	cmp	r0, #0
   12e2a:	d100      	bne.n	12e2e <_strtod_l+0x49a>
   12e2c:	e217      	b.n	1325e <_strtod_l+0x8ca>
   12e2e:	9a08      	ldr	r2, [sp, #32]
   12e30:	991e      	ldr	r1, [sp, #120]	; 0x78
   12e32:	0028      	movs	r0, r5
   12e34:	f7ff f974 	bl	12120 <__mdiff>
   12e38:	4681      	mov	r9, r0
   12e3a:	2800      	cmp	r0, #0
   12e3c:	d100      	bne.n	12e40 <_strtod_l+0x4ac>
   12e3e:	e20e      	b.n	1325e <_strtod_l+0x8ca>
   12e40:	68c3      	ldr	r3, [r0, #12]
   12e42:	4641      	mov	r1, r8
   12e44:	930f      	str	r3, [sp, #60]	; 0x3c
   12e46:	2300      	movs	r3, #0
   12e48:	60c3      	str	r3, [r0, #12]
   12e4a:	f7ff f94f 	bl	120ec <__mcmp>
   12e4e:	2800      	cmp	r0, #0
   12e50:	da01      	bge.n	12e56 <_strtod_l+0x4c2>
   12e52:	f000 fbd8 	bl	13606 <_strtod_l+0xc72>
   12e56:	d100      	bne.n	12e5a <_strtod_l+0x4c6>
   12e58:	e38e      	b.n	13578 <_strtod_l+0xbe4>
   12e5a:	4641      	mov	r1, r8
   12e5c:	4648      	mov	r0, r9
   12e5e:	f7ff faeb 	bl	12438 <__ratio>
   12e62:	2380      	movs	r3, #128	; 0x80
   12e64:	2200      	movs	r2, #0
   12e66:	05db      	lsls	r3, r3, #23
   12e68:	0006      	movs	r6, r0
   12e6a:	000f      	movs	r7, r1
   12e6c:	f7f7 ff54 	bl	ad18 <__aeabi_dcmple>
   12e70:	2800      	cmp	r0, #0
   12e72:	d100      	bne.n	12e76 <_strtod_l+0x4e2>
   12e74:	e116      	b.n	130a4 <_strtod_l+0x710>
   12e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12e78:	2b00      	cmp	r3, #0
   12e7a:	d100      	bne.n	12e7e <_strtod_l+0x4ea>
   12e7c:	e135      	b.n	130ea <_strtod_l+0x756>
   12e7e:	9b05      	ldr	r3, [sp, #20]
   12e80:	2600      	movs	r6, #0
   12e82:	9310      	str	r3, [sp, #64]	; 0x40
   12e84:	2300      	movs	r3, #0
   12e86:	9311      	str	r3, [sp, #68]	; 0x44
   12e88:	4b7a      	ldr	r3, [pc, #488]	; (13074 <_strtod_l+0x6e0>)
   12e8a:	4f7a      	ldr	r7, [pc, #488]	; (13074 <_strtod_l+0x6e0>)
   12e8c:	9314      	str	r3, [sp, #80]	; 0x50
   12e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12e90:	4a79      	ldr	r2, [pc, #484]	; (13078 <_strtod_l+0x6e4>)
   12e92:	4013      	ands	r3, r2
   12e94:	469a      	mov	sl, r3
   12e96:	4b79      	ldr	r3, [pc, #484]	; (1307c <_strtod_l+0x6e8>)
   12e98:	459a      	cmp	sl, r3
   12e9a:	d100      	bne.n	12e9e <_strtod_l+0x50a>
   12e9c:	e1af      	b.n	131fe <_strtod_l+0x86a>
   12e9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12ea0:	2b00      	cmp	r3, #0
   12ea2:	d02a      	beq.n	12efa <_strtod_l+0x566>
   12ea4:	23d4      	movs	r3, #212	; 0xd4
   12ea6:	04db      	lsls	r3, r3, #19
   12ea8:	459a      	cmp	sl, r3
   12eaa:	d826      	bhi.n	12efa <_strtod_l+0x566>
   12eac:	9c14      	ldr	r4, [sp, #80]	; 0x50
   12eae:	4a74      	ldr	r2, [pc, #464]	; (13080 <_strtod_l+0x6ec>)
   12eb0:	4b74      	ldr	r3, [pc, #464]	; (13084 <_strtod_l+0x6f0>)
   12eb2:	9811      	ldr	r0, [sp, #68]	; 0x44
   12eb4:	0021      	movs	r1, r4
   12eb6:	f7f7 ff2f 	bl	ad18 <__aeabi_dcmple>
   12eba:	2800      	cmp	r0, #0
   12ebc:	d018      	beq.n	12ef0 <_strtod_l+0x55c>
   12ebe:	9811      	ldr	r0, [sp, #68]	; 0x44
   12ec0:	0021      	movs	r1, r4
   12ec2:	f7f6 fb41 	bl	9548 <__aeabi_d2uiz>
   12ec6:	2800      	cmp	r0, #0
   12ec8:	d100      	bne.n	12ecc <_strtod_l+0x538>
   12eca:	e310      	b.n	134ee <_strtod_l+0xb5a>
   12ecc:	f7f7 fe7a 	bl	abc4 <__aeabi_ui2d>
   12ed0:	9011      	str	r0, [sp, #68]	; 0x44
   12ed2:	9114      	str	r1, [sp, #80]	; 0x50
   12ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12ed6:	2b00      	cmp	r3, #0
   12ed8:	d000      	beq.n	12edc <_strtod_l+0x548>
   12eda:	e303      	b.n	134e4 <_strtod_l+0xb50>
   12edc:	2280      	movs	r2, #128	; 0x80
   12ede:	0612      	lsls	r2, r2, #24
   12ee0:	4694      	mov	ip, r2
   12ee2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12ee4:	9318      	str	r3, [sp, #96]	; 0x60
   12ee6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12ee8:	4463      	add	r3, ip
   12eea:	9319      	str	r3, [sp, #100]	; 0x64
   12eec:	9e18      	ldr	r6, [sp, #96]	; 0x60
   12eee:	9f19      	ldr	r7, [sp, #100]	; 0x64
   12ef0:	23d6      	movs	r3, #214	; 0xd6
   12ef2:	4652      	mov	r2, sl
   12ef4:	04db      	lsls	r3, r3, #19
   12ef6:	18fb      	adds	r3, r7, r3
   12ef8:	1a9f      	subs	r7, r3, r2
   12efa:	980a      	ldr	r0, [sp, #40]	; 0x28
   12efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12efe:	f7ff f9ab 	bl	12258 <__ulp>
   12f02:	0002      	movs	r2, r0
   12f04:	000b      	movs	r3, r1
   12f06:	0030      	movs	r0, r6
   12f08:	0039      	movs	r1, r7
   12f0a:	f7f7 f84f 	bl	9fac <__aeabi_dmul>
   12f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   12f12:	f001 ff01 	bl	14d18 <__aeabi_dadd>
   12f16:	0003      	movs	r3, r0
   12f18:	000c      	movs	r4, r1
   12f1a:	9304      	str	r3, [sp, #16]
   12f1c:	9405      	str	r4, [sp, #20]
   12f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12f20:	2b00      	cmp	r3, #0
   12f22:	d104      	bne.n	12f2e <_strtod_l+0x59a>
   12f24:	4b54      	ldr	r3, [pc, #336]	; (13078 <_strtod_l+0x6e4>)
   12f26:	4023      	ands	r3, r4
   12f28:	459a      	cmp	sl, r3
   12f2a:	d100      	bne.n	12f2e <_strtod_l+0x59a>
   12f2c:	e1bd      	b.n	132aa <_strtod_l+0x916>
   12f2e:	991e      	ldr	r1, [sp, #120]	; 0x78
   12f30:	0028      	movs	r0, r5
   12f32:	f7fe fe85 	bl	11c40 <_Bfree>
   12f36:	9908      	ldr	r1, [sp, #32]
   12f38:	0028      	movs	r0, r5
   12f3a:	f7fe fe81 	bl	11c40 <_Bfree>
   12f3e:	4641      	mov	r1, r8
   12f40:	0028      	movs	r0, r5
   12f42:	f7fe fe7d 	bl	11c40 <_Bfree>
   12f46:	4649      	mov	r1, r9
   12f48:	0028      	movs	r0, r5
   12f4a:	f7fe fe79 	bl	11c40 <_Bfree>
   12f4e:	465b      	mov	r3, fp
   12f50:	0028      	movs	r0, r5
   12f52:	6859      	ldr	r1, [r3, #4]
   12f54:	f7fe fe4c 	bl	11bf0 <_Balloc>
   12f58:	9008      	str	r0, [sp, #32]
   12f5a:	2800      	cmp	r0, #0
   12f5c:	d100      	bne.n	12f60 <_strtod_l+0x5cc>
   12f5e:	e17e      	b.n	1325e <_strtod_l+0x8ca>
   12f60:	465a      	mov	r2, fp
   12f62:	4659      	mov	r1, fp
   12f64:	6912      	ldr	r2, [r2, #16]
   12f66:	310c      	adds	r1, #12
   12f68:	3202      	adds	r2, #2
   12f6a:	0092      	lsls	r2, r2, #2
   12f6c:	300c      	adds	r0, #12
   12f6e:	f7f8 fb43 	bl	b5f8 <memcpy>
   12f72:	9b04      	ldr	r3, [sp, #16]
   12f74:	9c05      	ldr	r4, [sp, #20]
   12f76:	0019      	movs	r1, r3
   12f78:	0022      	movs	r2, r4
   12f7a:	ab20      	add	r3, sp, #128	; 0x80
   12f7c:	9301      	str	r3, [sp, #4]
   12f7e:	ab1f      	add	r3, sp, #124	; 0x7c
   12f80:	910a      	str	r1, [sp, #40]	; 0x28
   12f82:	920b      	str	r2, [sp, #44]	; 0x2c
   12f84:	9300      	str	r3, [sp, #0]
   12f86:	000a      	movs	r2, r1
   12f88:	0023      	movs	r3, r4
   12f8a:	0028      	movs	r0, r5
   12f8c:	f7ff f9f6 	bl	1237c <__d2b>
   12f90:	901e      	str	r0, [sp, #120]	; 0x78
   12f92:	2800      	cmp	r0, #0
   12f94:	d100      	bne.n	12f98 <_strtod_l+0x604>
   12f96:	e2eb      	b.n	13570 <_strtod_l+0xbdc>
   12f98:	2101      	movs	r1, #1
   12f9a:	0028      	movs	r0, r5
   12f9c:	f7fe ff32 	bl	11e04 <__i2b>
   12fa0:	4680      	mov	r8, r0
   12fa2:	2800      	cmp	r0, #0
   12fa4:	d100      	bne.n	12fa8 <_strtod_l+0x614>
   12fa6:	e15a      	b.n	1325e <_strtod_l+0x8ca>
   12fa8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   12faa:	2b00      	cmp	r3, #0
   12fac:	da00      	bge.n	12fb0 <_strtod_l+0x61c>
   12fae:	e090      	b.n	130d2 <_strtod_l+0x73e>
   12fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   12fb2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   12fb4:	18d7      	adds	r7, r2, r3
   12fb6:	990c      	ldr	r1, [sp, #48]	; 0x30
   12fb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12fba:	1a5b      	subs	r3, r3, r1
   12fbc:	2136      	movs	r1, #54	; 0x36
   12fbe:	189b      	adds	r3, r3, r2
   12fc0:	1a8a      	subs	r2, r1, r2
   12fc2:	4931      	ldr	r1, [pc, #196]	; (13088 <_strtod_l+0x6f4>)
   12fc4:	3b01      	subs	r3, #1
   12fc6:	428b      	cmp	r3, r1
   12fc8:	da00      	bge.n	12fcc <_strtod_l+0x638>
   12fca:	e6cb      	b.n	12d64 <_strtod_l+0x3d0>
   12fcc:	2300      	movs	r3, #0
   12fce:	9311      	str	r3, [sp, #68]	; 0x44
   12fd0:	3301      	adds	r3, #1
   12fd2:	9310      	str	r3, [sp, #64]	; 0x40
   12fd4:	e6d0      	b.n	12d78 <_strtod_l+0x3e4>
   12fd6:	2201      	movs	r2, #1
   12fd8:	920d      	str	r2, [sp, #52]	; 0x34
   12fda:	1cb2      	adds	r2, r6, #2
   12fdc:	921d      	str	r2, [sp, #116]	; 0x74
   12fde:	78b4      	ldrb	r4, [r6, #2]
   12fe0:	e5ca      	b.n	12b78 <_strtod_l+0x1e4>
   12fe2:	239a      	movs	r3, #154	; 0x9a
   12fe4:	005b      	lsls	r3, r3, #1
   12fe6:	429c      	cmp	r4, r3
   12fe8:	dd00      	ble.n	12fec <_strtod_l+0x658>
   12fea:	e100      	b.n	131ee <_strtod_l+0x85a>
   12fec:	1124      	asrs	r4, r4, #4
   12fee:	2c01      	cmp	r4, #1
   12ff0:	dc00      	bgt.n	12ff4 <_strtod_l+0x660>
   12ff2:	e361      	b.n	136b8 <_strtod_l+0xd24>
   12ff4:	9804      	ldr	r0, [sp, #16]
   12ff6:	9905      	ldr	r1, [sp, #20]
   12ff8:	2201      	movs	r2, #1
   12ffa:	4b24      	ldr	r3, [pc, #144]	; (1308c <_strtod_l+0x6f8>)
   12ffc:	2700      	movs	r7, #0
   12ffe:	930c      	str	r3, [sp, #48]	; 0x30
   13000:	001e      	movs	r6, r3
   13002:	4691      	mov	r9, r2
   13004:	2300      	movs	r3, #0
   13006:	464a      	mov	r2, r9
   13008:	4222      	tst	r2, r4
   1300a:	d004      	beq.n	13016 <_strtod_l+0x682>
   1300c:	6832      	ldr	r2, [r6, #0]
   1300e:	6873      	ldr	r3, [r6, #4]
   13010:	f7f6 ffcc 	bl	9fac <__aeabi_dmul>
   13014:	2301      	movs	r3, #1
   13016:	3701      	adds	r7, #1
   13018:	1064      	asrs	r4, r4, #1
   1301a:	3608      	adds	r6, #8
   1301c:	2c01      	cmp	r4, #1
   1301e:	d1f2      	bne.n	13006 <_strtod_l+0x672>
   13020:	2b00      	cmp	r3, #0
   13022:	d001      	beq.n	13028 <_strtod_l+0x694>
   13024:	f000 fbf4 	bl	13810 <_strtod_l+0xe7c>
   13028:	4a19      	ldr	r2, [pc, #100]	; (13090 <_strtod_l+0x6fc>)
   1302a:	9b05      	ldr	r3, [sp, #20]
   1302c:	4694      	mov	ip, r2
   1302e:	4463      	add	r3, ip
   13030:	9305      	str	r3, [sp, #20]
   13032:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13034:	00ff      	lsls	r7, r7, #3
   13036:	469c      	mov	ip, r3
   13038:	9a04      	ldr	r2, [sp, #16]
   1303a:	9b05      	ldr	r3, [sp, #20]
   1303c:	4467      	add	r7, ip
   1303e:	6838      	ldr	r0, [r7, #0]
   13040:	6879      	ldr	r1, [r7, #4]
   13042:	f7f6 ffb3 	bl	9fac <__aeabi_dmul>
   13046:	000a      	movs	r2, r1
   13048:	0003      	movs	r3, r0
   1304a:	0014      	movs	r4, r2
   1304c:	9304      	str	r3, [sp, #16]
   1304e:	9405      	str	r4, [sp, #20]
   13050:	4b09      	ldr	r3, [pc, #36]	; (13078 <_strtod_l+0x6e4>)
   13052:	4013      	ands	r3, r2
   13054:	4a0f      	ldr	r2, [pc, #60]	; (13094 <_strtod_l+0x700>)
   13056:	4293      	cmp	r3, r2
   13058:	d900      	bls.n	1305c <_strtod_l+0x6c8>
   1305a:	e0c8      	b.n	131ee <_strtod_l+0x85a>
   1305c:	4a0e      	ldr	r2, [pc, #56]	; (13098 <_strtod_l+0x704>)
   1305e:	4293      	cmp	r3, r2
   13060:	d800      	bhi.n	13064 <_strtod_l+0x6d0>
   13062:	e308      	b.n	13676 <_strtod_l+0xce2>
   13064:	4b0d      	ldr	r3, [pc, #52]	; (1309c <_strtod_l+0x708>)
   13066:	9305      	str	r3, [sp, #20]
   13068:	2301      	movs	r3, #1
   1306a:	425b      	negs	r3, r3
   1306c:	9304      	str	r3, [sp, #16]
   1306e:	e65a      	b.n	12d26 <_strtod_l+0x392>
   13070:	00019358 	.word	0x00019358
   13074:	3ff00000 	.word	0x3ff00000
   13078:	7ff00000 	.word	0x7ff00000
   1307c:	7fe00000 	.word	0x7fe00000
   13080:	ffc00000 	.word	0xffc00000
   13084:	41dfffff 	.word	0x41dfffff
   13088:	fffffc02 	.word	0xfffffc02
   1308c:	00019330 	.word	0x00019330
   13090:	fcb00000 	.word	0xfcb00000
   13094:	7ca00000 	.word	0x7ca00000
   13098:	7c900000 	.word	0x7c900000
   1309c:	7fefffff 	.word	0x7fefffff
   130a0:	4ace      	ldr	r2, [pc, #824]	; (133dc <_strtod_l+0xa48>)
   130a2:	e5aa      	b.n	12bfa <_strtod_l+0x266>
   130a4:	4bce      	ldr	r3, [pc, #824]	; (133e0 <_strtod_l+0xa4c>)
   130a6:	2200      	movs	r2, #0
   130a8:	0030      	movs	r0, r6
   130aa:	0039      	movs	r1, r7
   130ac:	f7f6 ff7e 	bl	9fac <__aeabi_dmul>
   130b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   130b2:	9011      	str	r0, [sp, #68]	; 0x44
   130b4:	9114      	str	r1, [sp, #80]	; 0x50
   130b6:	2b00      	cmp	r3, #0
   130b8:	d139      	bne.n	1312e <_strtod_l+0x79a>
   130ba:	2280      	movs	r2, #128	; 0x80
   130bc:	0612      	lsls	r2, r2, #24
   130be:	000b      	movs	r3, r1
   130c0:	4694      	mov	ip, r2
   130c2:	4463      	add	r3, ip
   130c4:	9012      	str	r0, [sp, #72]	; 0x48
   130c6:	9313      	str	r3, [sp, #76]	; 0x4c
   130c8:	9b05      	ldr	r3, [sp, #20]
   130ca:	9e12      	ldr	r6, [sp, #72]	; 0x48
   130cc:	9f13      	ldr	r7, [sp, #76]	; 0x4c
   130ce:	9310      	str	r3, [sp, #64]	; 0x40
   130d0:	e6dd      	b.n	12e8e <_strtod_l+0x4fa>
   130d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   130d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   130d6:	1ad6      	subs	r6, r2, r3
   130d8:	e76d      	b.n	12fb6 <_strtod_l+0x622>
   130da:	49c2      	ldr	r1, [pc, #776]	; (133e4 <_strtod_l+0xa50>)
   130dc:	1acb      	subs	r3, r1, r3
   130de:	2101      	movs	r1, #1
   130e0:	4099      	lsls	r1, r3
   130e2:	2301      	movs	r3, #1
   130e4:	9111      	str	r1, [sp, #68]	; 0x44
   130e6:	9310      	str	r3, [sp, #64]	; 0x40
   130e8:	e646      	b.n	12d78 <_strtod_l+0x3e4>
   130ea:	9904      	ldr	r1, [sp, #16]
   130ec:	9a05      	ldr	r2, [sp, #20]
   130ee:	2900      	cmp	r1, #0
   130f0:	d140      	bne.n	13174 <_strtod_l+0x7e0>
   130f2:	9210      	str	r2, [sp, #64]	; 0x40
   130f4:	0313      	lsls	r3, r2, #12
   130f6:	d142      	bne.n	1317e <_strtod_l+0x7ea>
   130f8:	2200      	movs	r2, #0
   130fa:	4bbb      	ldr	r3, [pc, #748]	; (133e8 <_strtod_l+0xa54>)
   130fc:	0030      	movs	r0, r6
   130fe:	0039      	movs	r1, r7
   13100:	f7f7 fe00 	bl	ad04 <__aeabi_dcmplt>
   13104:	2800      	cmp	r0, #0
   13106:	d000      	beq.n	1310a <_strtod_l+0x776>
   13108:	e2bf      	b.n	1368a <_strtod_l+0xcf6>
   1310a:	2200      	movs	r2, #0
   1310c:	4bb4      	ldr	r3, [pc, #720]	; (133e0 <_strtod_l+0xa4c>)
   1310e:	0030      	movs	r0, r6
   13110:	0039      	movs	r1, r7
   13112:	f7f6 ff4b 	bl	9fac <__aeabi_dmul>
   13116:	2280      	movs	r2, #128	; 0x80
   13118:	0612      	lsls	r2, r2, #24
   1311a:	000b      	movs	r3, r1
   1311c:	4694      	mov	ip, r2
   1311e:	4463      	add	r3, ip
   13120:	9011      	str	r0, [sp, #68]	; 0x44
   13122:	9114      	str	r1, [sp, #80]	; 0x50
   13124:	901a      	str	r0, [sp, #104]	; 0x68
   13126:	931b      	str	r3, [sp, #108]	; 0x6c
   13128:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   1312a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   1312c:	e6af      	b.n	12e8e <_strtod_l+0x4fa>
   1312e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   13130:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13132:	9212      	str	r2, [sp, #72]	; 0x48
   13134:	9313      	str	r3, [sp, #76]	; 0x4c
   13136:	e7c7      	b.n	130c8 <_strtod_l+0x734>
   13138:	9b07      	ldr	r3, [sp, #28]
   1313a:	9502      	str	r5, [sp, #8]
   1313c:	9301      	str	r3, [sp, #4]
   1313e:	ab1e      	add	r3, sp, #120	; 0x78
   13140:	9300      	str	r3, [sp, #0]
   13142:	4aaa      	ldr	r2, [pc, #680]	; (133ec <_strtod_l+0xa58>)
   13144:	ab1f      	add	r3, sp, #124	; 0x7c
   13146:	a91d      	add	r1, sp, #116	; 0x74
   13148:	9809      	ldr	r0, [sp, #36]	; 0x24
   1314a:	f001 f9e1 	bl	14510 <__gethex>
   1314e:	2407      	movs	r4, #7
   13150:	0005      	movs	r5, r0
   13152:	4004      	ands	r4, r0
   13154:	d100      	bne.n	13158 <_strtod_l+0x7c4>
   13156:	e556      	b.n	12c06 <_strtod_l+0x272>
   13158:	2c06      	cmp	r4, #6
   1315a:	d000      	beq.n	1315e <_strtod_l+0x7ca>
   1315c:	e15e      	b.n	1341c <_strtod_l+0xa88>
   1315e:	4653      	mov	r3, sl
   13160:	3301      	adds	r3, #1
   13162:	931d      	str	r3, [sp, #116]	; 0x74
   13164:	2300      	movs	r3, #0
   13166:	2400      	movs	r4, #0
   13168:	2500      	movs	r5, #0
   1316a:	9307      	str	r3, [sp, #28]
   1316c:	e54d      	b.n	12c0a <_strtod_l+0x276>
   1316e:	961d      	str	r6, [sp, #116]	; 0x74
   13170:	2200      	movs	r2, #0
   13172:	e448      	b.n	12a06 <_strtod_l+0x72>
   13174:	2901      	cmp	r1, #1
   13176:	d100      	bne.n	1317a <_strtod_l+0x7e6>
   13178:	e1d8      	b.n	1352c <_strtod_l+0xb98>
   1317a:	9b05      	ldr	r3, [sp, #20]
   1317c:	9310      	str	r3, [sp, #64]	; 0x40
   1317e:	2300      	movs	r3, #0
   13180:	9311      	str	r3, [sp, #68]	; 0x44
   13182:	4b99      	ldr	r3, [pc, #612]	; (133e8 <_strtod_l+0xa54>)
   13184:	2600      	movs	r6, #0
   13186:	4f9a      	ldr	r7, [pc, #616]	; (133f0 <_strtod_l+0xa5c>)
   13188:	9314      	str	r3, [sp, #80]	; 0x50
   1318a:	e680      	b.n	12e8e <_strtod_l+0x4fa>
   1318c:	6839      	ldr	r1, [r7, #0]
   1318e:	9a08      	ldr	r2, [sp, #32]
   13190:	4650      	mov	r0, sl
   13192:	f001 fd4d 	bl	14c30 <strncmp>
   13196:	900a      	str	r0, [sp, #40]	; 0x28
   13198:	2800      	cmp	r0, #0
   1319a:	d009      	beq.n	131b0 <_strtod_l+0x81c>
   1319c:	2300      	movs	r3, #0
   1319e:	2200      	movs	r2, #0
   131a0:	930a      	str	r3, [sp, #40]	; 0x28
   131a2:	4699      	mov	r9, r3
   131a4:	4698      	mov	r8, r3
   131a6:	2000      	movs	r0, #0
   131a8:	2500      	movs	r5, #0
   131aa:	9208      	str	r2, [sp, #32]
   131ac:	f7ff fc24 	bl	129f8 <_strtod_l+0x64>
   131b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   131b2:	9b08      	ldr	r3, [sp, #32]
   131b4:	4694      	mov	ip, r2
   131b6:	4463      	add	r3, ip
   131b8:	931d      	str	r3, [sp, #116]	; 0x74
   131ba:	781c      	ldrb	r4, [r3, #0]
   131bc:	0019      	movs	r1, r3
   131be:	1c5a      	adds	r2, r3, #1
   131c0:	2300      	movs	r3, #0
   131c2:	2c30      	cmp	r4, #48	; 0x30
   131c4:	d105      	bne.n	131d2 <_strtod_l+0x83e>
   131c6:	921d      	str	r2, [sp, #116]	; 0x74
   131c8:	7814      	ldrb	r4, [r2, #0]
   131ca:	1a53      	subs	r3, r2, r1
   131cc:	3201      	adds	r2, #1
   131ce:	2c30      	cmp	r4, #48	; 0x30
   131d0:	d0f9      	beq.n	131c6 <_strtod_l+0x832>
   131d2:	0022      	movs	r2, r4
   131d4:	3a31      	subs	r2, #49	; 0x31
   131d6:	2a08      	cmp	r2, #8
   131d8:	d800      	bhi.n	131dc <_strtod_l+0x848>
   131da:	e153      	b.n	13484 <_strtod_l+0xaf0>
   131dc:	2200      	movs	r2, #0
   131de:	4691      	mov	r9, r2
   131e0:	4690      	mov	r8, r2
   131e2:	3201      	adds	r2, #1
   131e4:	2000      	movs	r0, #0
   131e6:	2500      	movs	r5, #0
   131e8:	9208      	str	r2, [sp, #32]
   131ea:	f7ff fc05 	bl	129f8 <_strtod_l+0x64>
   131ee:	2322      	movs	r3, #34	; 0x22
   131f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   131f2:	6013      	str	r3, [r2, #0]
   131f4:	4b7f      	ldr	r3, [pc, #508]	; (133f4 <_strtod_l+0xa60>)
   131f6:	9305      	str	r3, [sp, #20]
   131f8:	2300      	movs	r3, #0
   131fa:	9304      	str	r3, [sp, #16]
   131fc:	e569      	b.n	12cd2 <_strtod_l+0x33e>
   131fe:	497e      	ldr	r1, [pc, #504]	; (133f8 <_strtod_l+0xa64>)
   13200:	9a10      	ldr	r2, [sp, #64]	; 0x40
   13202:	468c      	mov	ip, r1
   13204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13206:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   13208:	4462      	add	r2, ip
   1320a:	9205      	str	r2, [sp, #20]
   1320c:	960a      	str	r6, [sp, #40]	; 0x28
   1320e:	970b      	str	r7, [sp, #44]	; 0x2c
   13210:	9e04      	ldr	r6, [sp, #16]
   13212:	9f05      	ldr	r7, [sp, #20]
   13214:	0030      	movs	r0, r6
   13216:	0039      	movs	r1, r7
   13218:	9316      	str	r3, [sp, #88]	; 0x58
   1321a:	9417      	str	r4, [sp, #92]	; 0x5c
   1321c:	f7ff f81c 	bl	12258 <__ulp>
   13220:	0002      	movs	r2, r0
   13222:	000b      	movs	r3, r1
   13224:	980a      	ldr	r0, [sp, #40]	; 0x28
   13226:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13228:	f7f6 fec0 	bl	9fac <__aeabi_dmul>
   1322c:	0032      	movs	r2, r6
   1322e:	003b      	movs	r3, r7
   13230:	f001 fd72 	bl	14d18 <__aeabi_dadd>
   13234:	4b6f      	ldr	r3, [pc, #444]	; (133f4 <_strtod_l+0xa60>)
   13236:	4a71      	ldr	r2, [pc, #452]	; (133fc <_strtod_l+0xa68>)
   13238:	9004      	str	r0, [sp, #16]
   1323a:	9105      	str	r1, [sp, #20]
   1323c:	400b      	ands	r3, r1
   1323e:	4293      	cmp	r3, r2
   13240:	d800      	bhi.n	13244 <_strtod_l+0x8b0>
   13242:	e0c6      	b.n	133d2 <_strtod_l+0xa3e>
   13244:	4b6e      	ldr	r3, [pc, #440]	; (13400 <_strtod_l+0xa6c>)
   13246:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   13248:	429a      	cmp	r2, r3
   1324a:	d005      	beq.n	13258 <_strtod_l+0x8c4>
   1324c:	4b6c      	ldr	r3, [pc, #432]	; (13400 <_strtod_l+0xa6c>)
   1324e:	9305      	str	r3, [sp, #20]
   13250:	2301      	movs	r3, #1
   13252:	425b      	negs	r3, r3
   13254:	9304      	str	r3, [sp, #16]
   13256:	e66a      	b.n	12f2e <_strtod_l+0x59a>
   13258:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1325a:	3301      	adds	r3, #1
   1325c:	d1f6      	bne.n	1324c <_strtod_l+0x8b8>
   1325e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13260:	46da      	mov	sl, fp
   13262:	469b      	mov	fp, r3
   13264:	981e      	ldr	r0, [sp, #120]	; 0x78
   13266:	2322      	movs	r3, #34	; 0x22
   13268:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1326a:	6013      	str	r3, [r2, #0]
   1326c:	4b61      	ldr	r3, [pc, #388]	; (133f4 <_strtod_l+0xa60>)
   1326e:	9305      	str	r3, [sp, #20]
   13270:	2300      	movs	r3, #0
   13272:	9304      	str	r3, [sp, #16]
   13274:	9c04      	ldr	r4, [sp, #16]
   13276:	9d05      	ldr	r5, [sp, #20]
   13278:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1327a:	0001      	movs	r1, r0
   1327c:	0030      	movs	r0, r6
   1327e:	f7fe fcdf 	bl	11c40 <_Bfree>
   13282:	9908      	ldr	r1, [sp, #32]
   13284:	0030      	movs	r0, r6
   13286:	f7fe fcdb 	bl	11c40 <_Bfree>
   1328a:	4641      	mov	r1, r8
   1328c:	0030      	movs	r0, r6
   1328e:	f7fe fcd7 	bl	11c40 <_Bfree>
   13292:	4651      	mov	r1, sl
   13294:	0030      	movs	r0, r6
   13296:	f7fe fcd3 	bl	11c40 <_Bfree>
   1329a:	4649      	mov	r1, r9
   1329c:	0030      	movs	r0, r6
   1329e:	f7fe fccf 	bl	11c40 <_Bfree>
   132a2:	e4b2      	b.n	12c0a <_strtod_l+0x276>
   132a4:	2200      	movs	r2, #0
   132a6:	920d      	str	r2, [sp, #52]	; 0x34
   132a8:	e697      	b.n	12fda <_strtod_l+0x646>
   132aa:	9f11      	ldr	r7, [sp, #68]	; 0x44
   132ac:	9e14      	ldr	r6, [sp, #80]	; 0x50
   132ae:	0038      	movs	r0, r7
   132b0:	0031      	movs	r1, r6
   132b2:	f7f7 fc11 	bl	aad8 <__aeabi_d2iz>
   132b6:	f7f7 fc43 	bl	ab40 <__aeabi_i2d>
   132ba:	000b      	movs	r3, r1
   132bc:	0002      	movs	r2, r0
   132be:	0031      	movs	r1, r6
   132c0:	0038      	movs	r0, r7
   132c2:	f7f7 f8f3 	bl	a4ac <__aeabi_dsub>
   132c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   132c8:	0006      	movs	r6, r0
   132ca:	000f      	movs	r7, r1
   132cc:	2b00      	cmp	r3, #0
   132ce:	d112      	bne.n	132f6 <_strtod_l+0x962>
   132d0:	9b04      	ldr	r3, [sp, #16]
   132d2:	2b00      	cmp	r3, #0
   132d4:	d10f      	bne.n	132f6 <_strtod_l+0x962>
   132d6:	0324      	lsls	r4, r4, #12
   132d8:	d10d      	bne.n	132f6 <_strtod_l+0x962>
   132da:	4a4a      	ldr	r2, [pc, #296]	; (13404 <_strtod_l+0xa70>)
   132dc:	4b4a      	ldr	r3, [pc, #296]	; (13408 <_strtod_l+0xa74>)
   132de:	f7f7 fd11 	bl	ad04 <__aeabi_dcmplt>
   132e2:	2800      	cmp	r0, #0
   132e4:	d100      	bne.n	132e8 <_strtod_l+0x954>
   132e6:	e622      	b.n	12f2e <_strtod_l+0x59a>
   132e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   132ea:	46da      	mov	sl, fp
   132ec:	9c04      	ldr	r4, [sp, #16]
   132ee:	9d05      	ldr	r5, [sp, #20]
   132f0:	469b      	mov	fp, r3
   132f2:	981e      	ldr	r0, [sp, #120]	; 0x78
   132f4:	e7c0      	b.n	13278 <_strtod_l+0x8e4>
   132f6:	4a43      	ldr	r2, [pc, #268]	; (13404 <_strtod_l+0xa70>)
   132f8:	4b44      	ldr	r3, [pc, #272]	; (1340c <_strtod_l+0xa78>)
   132fa:	0030      	movs	r0, r6
   132fc:	0039      	movs	r1, r7
   132fe:	f7f7 fd01 	bl	ad04 <__aeabi_dcmplt>
   13302:	2800      	cmp	r0, #0
   13304:	d1f0      	bne.n	132e8 <_strtod_l+0x954>
   13306:	4a42      	ldr	r2, [pc, #264]	; (13410 <_strtod_l+0xa7c>)
   13308:	4b35      	ldr	r3, [pc, #212]	; (133e0 <_strtod_l+0xa4c>)
   1330a:	0030      	movs	r0, r6
   1330c:	0039      	movs	r1, r7
   1330e:	f7f7 fd0d 	bl	ad2c <__aeabi_dcmpgt>
   13312:	2800      	cmp	r0, #0
   13314:	d100      	bne.n	13318 <_strtod_l+0x984>
   13316:	e60a      	b.n	12f2e <_strtod_l+0x59a>
   13318:	e7e6      	b.n	132e8 <_strtod_l+0x954>
   1331a:	46a0      	mov	r8, r4
   1331c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1331e:	3502      	adds	r5, #2
   13320:	2f08      	cmp	r7, #8
   13322:	dc00      	bgt.n	13326 <_strtod_l+0x992>
   13324:	e0b9      	b.n	1349a <_strtod_l+0xb06>
   13326:	2300      	movs	r3, #0
   13328:	2d10      	cmp	r5, #16
   1332a:	dc05      	bgt.n	13338 <_strtod_l+0x9a4>
   1332c:	464c      	mov	r4, r9
   1332e:	00a4      	lsls	r4, r4, #2
   13330:	444c      	add	r4, r9
   13332:	4691      	mov	r9, r2
   13334:	0064      	lsls	r4, r4, #1
   13336:	44a1      	add	r9, r4
   13338:	1c4a      	adds	r2, r1, #1
   1333a:	921d      	str	r2, [sp, #116]	; 0x74
   1333c:	784c      	ldrb	r4, [r1, #1]
   1333e:	f7ff fbe3 	bl	12b08 <_strtod_l+0x174>
   13342:	2c00      	cmp	r4, #0
   13344:	d100      	bne.n	13348 <_strtod_l+0x9b4>
   13346:	e4ee      	b.n	12d26 <_strtod_l+0x392>
   13348:	230f      	movs	r3, #15
   1334a:	4264      	negs	r4, r4
   1334c:	4023      	ands	r3, r4
   1334e:	d00a      	beq.n	13366 <_strtod_l+0x9d2>
   13350:	9804      	ldr	r0, [sp, #16]
   13352:	9905      	ldr	r1, [sp, #20]
   13354:	4a2f      	ldr	r2, [pc, #188]	; (13414 <_strtod_l+0xa80>)
   13356:	00db      	lsls	r3, r3, #3
   13358:	18d3      	adds	r3, r2, r3
   1335a:	681a      	ldr	r2, [r3, #0]
   1335c:	685b      	ldr	r3, [r3, #4]
   1335e:	f7f6 faf1 	bl	9944 <__aeabi_ddiv>
   13362:	9004      	str	r0, [sp, #16]
   13364:	9105      	str	r1, [sp, #20]
   13366:	1124      	asrs	r4, r4, #4
   13368:	d100      	bne.n	1336c <_strtod_l+0x9d8>
   1336a:	e4dc      	b.n	12d26 <_strtod_l+0x392>
   1336c:	2c1f      	cmp	r4, #31
   1336e:	dc29      	bgt.n	133c4 <_strtod_l+0xa30>
   13370:	2310      	movs	r3, #16
   13372:	4023      	ands	r3, r4
   13374:	930c      	str	r3, [sp, #48]	; 0x30
   13376:	d100      	bne.n	1337a <_strtod_l+0x9e6>
   13378:	e1c5      	b.n	13706 <_strtod_l+0xd72>
   1337a:	236a      	movs	r3, #106	; 0x6a
   1337c:	930c      	str	r3, [sp, #48]	; 0x30
   1337e:	2c00      	cmp	r4, #0
   13380:	dc00      	bgt.n	13384 <_strtod_l+0x9f0>
   13382:	e1c4      	b.n	1370e <_strtod_l+0xd7a>
   13384:	9804      	ldr	r0, [sp, #16]
   13386:	9905      	ldr	r1, [sp, #20]
   13388:	2300      	movs	r3, #0
   1338a:	2701      	movs	r7, #1
   1338c:	4e22      	ldr	r6, [pc, #136]	; (13418 <_strtod_l+0xa84>)
   1338e:	4227      	tst	r7, r4
   13390:	d004      	beq.n	1339c <_strtod_l+0xa08>
   13392:	6832      	ldr	r2, [r6, #0]
   13394:	6873      	ldr	r3, [r6, #4]
   13396:	f7f6 fe09 	bl	9fac <__aeabi_dmul>
   1339a:	2301      	movs	r3, #1
   1339c:	1064      	asrs	r4, r4, #1
   1339e:	3608      	adds	r6, #8
   133a0:	2c00      	cmp	r4, #0
   133a2:	d1f4      	bne.n	1338e <_strtod_l+0x9fa>
   133a4:	2b00      	cmp	r3, #0
   133a6:	d000      	beq.n	133aa <_strtod_l+0xa16>
   133a8:	e221      	b.n	137ee <_strtod_l+0xe5a>
   133aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   133ac:	2b00      	cmp	r3, #0
   133ae:	d000      	beq.n	133b2 <_strtod_l+0xa1e>
   133b0:	e1ad      	b.n	1370e <_strtod_l+0xd7a>
   133b2:	9804      	ldr	r0, [sp, #16]
   133b4:	9905      	ldr	r1, [sp, #20]
   133b6:	2200      	movs	r2, #0
   133b8:	2300      	movs	r3, #0
   133ba:	f7f7 fc9d 	bl	acf8 <__aeabi_dcmpeq>
   133be:	2800      	cmp	r0, #0
   133c0:	d100      	bne.n	133c4 <_strtod_l+0xa30>
   133c2:	e4b2      	b.n	12d2a <_strtod_l+0x396>
   133c4:	2322      	movs	r3, #34	; 0x22
   133c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   133c8:	2400      	movs	r4, #0
   133ca:	6013      	str	r3, [r2, #0]
   133cc:	2500      	movs	r5, #0
   133ce:	f7ff fc1c 	bl	12c0a <_strtod_l+0x276>
   133d2:	23d4      	movs	r3, #212	; 0xd4
   133d4:	049b      	lsls	r3, r3, #18
   133d6:	18cc      	adds	r4, r1, r3
   133d8:	9405      	str	r4, [sp, #20]
   133da:	e5a0      	b.n	12f1e <_strtod_l+0x58a>
   133dc:	00004e1f 	.word	0x00004e1f
   133e0:	3fe00000 	.word	0x3fe00000
   133e4:	fffffbe2 	.word	0xfffffbe2
   133e8:	3ff00000 	.word	0x3ff00000
   133ec:	0001950c 	.word	0x0001950c
   133f0:	bff00000 	.word	0xbff00000
   133f4:	7ff00000 	.word	0x7ff00000
   133f8:	fcb00000 	.word	0xfcb00000
   133fc:	7c9fffff 	.word	0x7c9fffff
   13400:	7fefffff 	.word	0x7fefffff
   13404:	94a03595 	.word	0x94a03595
   13408:	3fcfffff 	.word	0x3fcfffff
   1340c:	3fdfffff 	.word	0x3fdfffff
   13410:	35afe535 	.word	0x35afe535
   13414:	00019358 	.word	0x00019358
   13418:	00019538 	.word	0x00019538
   1341c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1341e:	2a00      	cmp	r2, #0
   13420:	d007      	beq.n	13432 <_strtod_l+0xa9e>
   13422:	2135      	movs	r1, #53	; 0x35
   13424:	a820      	add	r0, sp, #128	; 0x80
   13426:	f7ff f841 	bl	124ac <__copybits>
   1342a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1342c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1342e:	f7fe fc07 	bl	11c40 <_Bfree>
   13432:	2c05      	cmp	r4, #5
   13434:	d808      	bhi.n	13448 <_strtod_l+0xab4>
   13436:	4bd1      	ldr	r3, [pc, #836]	; (1377c <_strtod_l+0xde8>)
   13438:	00a4      	lsls	r4, r4, #2
   1343a:	591b      	ldr	r3, [r3, r4]
   1343c:	469f      	mov	pc, r3
   1343e:	4bd0      	ldr	r3, [pc, #832]	; (13780 <_strtod_l+0xdec>)
   13440:	9305      	str	r3, [sp, #20]
   13442:	2301      	movs	r3, #1
   13444:	425b      	negs	r3, r3
   13446:	9304      	str	r3, [sp, #16]
   13448:	072b      	lsls	r3, r5, #28
   1344a:	d400      	bmi.n	1344e <_strtod_l+0xaba>
   1344c:	e441      	b.n	12cd2 <_strtod_l+0x33e>
   1344e:	2380      	movs	r3, #128	; 0x80
   13450:	9a05      	ldr	r2, [sp, #20]
   13452:	061b      	lsls	r3, r3, #24
   13454:	431a      	orrs	r2, r3
   13456:	9205      	str	r2, [sp, #20]
   13458:	e43b      	b.n	12cd2 <_strtod_l+0x33e>
   1345a:	4bca      	ldr	r3, [pc, #808]	; (13784 <_strtod_l+0xdf0>)
   1345c:	9305      	str	r3, [sp, #20]
   1345e:	e7f3      	b.n	13448 <_strtod_l+0xab4>
   13460:	9b20      	ldr	r3, [sp, #128]	; 0x80
   13462:	9304      	str	r3, [sp, #16]
   13464:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13466:	9305      	str	r3, [sp, #20]
   13468:	e7ee      	b.n	13448 <_strtod_l+0xab4>
   1346a:	49c7      	ldr	r1, [pc, #796]	; (13788 <_strtod_l+0xdf4>)
   1346c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1346e:	468c      	mov	ip, r1
   13470:	9304      	str	r3, [sp, #16]
   13472:	4ac6      	ldr	r2, [pc, #792]	; (1378c <_strtod_l+0xdf8>)
   13474:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13476:	401a      	ands	r2, r3
   13478:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1347a:	4463      	add	r3, ip
   1347c:	051b      	lsls	r3, r3, #20
   1347e:	431a      	orrs	r2, r3
   13480:	9205      	str	r2, [sp, #20]
   13482:	e7e1      	b.n	13448 <_strtod_l+0xab4>
   13484:	2230      	movs	r2, #48	; 0x30
   13486:	1c58      	adds	r0, r3, #1
   13488:	2300      	movs	r3, #0
   1348a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1348c:	4252      	negs	r2, r2
   1348e:	4694      	mov	ip, r2
   13490:	468a      	mov	sl, r1
   13492:	4698      	mov	r8, r3
   13494:	2501      	movs	r5, #1
   13496:	4699      	mov	r9, r3
   13498:	44a4      	add	ip, r4
   1349a:	4643      	mov	r3, r8
   1349c:	009c      	lsls	r4, r3, #2
   1349e:	4444      	add	r4, r8
   134a0:	0064      	lsls	r4, r4, #1
   134a2:	4464      	add	r4, ip
   134a4:	46a0      	mov	r8, r4
   134a6:	2300      	movs	r3, #0
   134a8:	e746      	b.n	13338 <_strtod_l+0x9a4>
   134aa:	2325      	movs	r3, #37	; 0x25
   134ac:	9e08      	ldr	r6, [sp, #32]
   134ae:	1b5b      	subs	r3, r3, r5
   134b0:	429e      	cmp	r6, r3
   134b2:	dd01      	ble.n	134b8 <_strtod_l+0xb24>
   134b4:	f7ff fc1e 	bl	12cf4 <_strtod_l+0x360>
   134b8:	230f      	movs	r3, #15
   134ba:	4cb5      	ldr	r4, [pc, #724]	; (13790 <_strtod_l+0xdfc>)
   134bc:	1b5d      	subs	r5, r3, r5
   134be:	00e9      	lsls	r1, r5, #3
   134c0:	1b75      	subs	r5, r6, r5
   134c2:	1861      	adds	r1, r4, r1
   134c4:	00ed      	lsls	r5, r5, #3
   134c6:	1964      	adds	r4, r4, r5
   134c8:	9a04      	ldr	r2, [sp, #16]
   134ca:	9b05      	ldr	r3, [sp, #20]
   134cc:	6808      	ldr	r0, [r1, #0]
   134ce:	6849      	ldr	r1, [r1, #4]
   134d0:	f7f6 fd6c 	bl	9fac <__aeabi_dmul>
   134d4:	6822      	ldr	r2, [r4, #0]
   134d6:	6863      	ldr	r3, [r4, #4]
   134d8:	f7f6 fd68 	bl	9fac <__aeabi_dmul>
   134dc:	0004      	movs	r4, r0
   134de:	000d      	movs	r5, r1
   134e0:	f7ff fb93 	bl	12c0a <_strtod_l+0x276>
   134e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   134e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   134e8:	9218      	str	r2, [sp, #96]	; 0x60
   134ea:	9319      	str	r3, [sp, #100]	; 0x64
   134ec:	e4fe      	b.n	12eec <_strtod_l+0x558>
   134ee:	2300      	movs	r3, #0
   134f0:	9311      	str	r3, [sp, #68]	; 0x44
   134f2:	4ba8      	ldr	r3, [pc, #672]	; (13794 <_strtod_l+0xe00>)
   134f4:	9314      	str	r3, [sp, #80]	; 0x50
   134f6:	e4ed      	b.n	12ed4 <_strtod_l+0x540>
   134f8:	2c49      	cmp	r4, #73	; 0x49
   134fa:	d001      	beq.n	13500 <_strtod_l+0xb6c>
   134fc:	f7ff fa8e 	bl	12a1c <_strtod_l+0x88>
   13500:	49a5      	ldr	r1, [pc, #660]	; (13798 <_strtod_l+0xe04>)
   13502:	a81d      	add	r0, sp, #116	; 0x74
   13504:	f001 fa98 	bl	14a38 <__match>
   13508:	2800      	cmp	r0, #0
   1350a:	d101      	bne.n	13510 <_strtod_l+0xb7c>
   1350c:	f7ff fa86 	bl	12a1c <_strtod_l+0x88>
   13510:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13512:	49a2      	ldr	r1, [pc, #648]	; (1379c <_strtod_l+0xe08>)
   13514:	3b01      	subs	r3, #1
   13516:	a81d      	add	r0, sp, #116	; 0x74
   13518:	931d      	str	r3, [sp, #116]	; 0x74
   1351a:	f001 fa8d 	bl	14a38 <__match>
   1351e:	2800      	cmp	r0, #0
   13520:	d000      	beq.n	13524 <_strtod_l+0xb90>
   13522:	e667      	b.n	131f4 <_strtod_l+0x860>
   13524:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13526:	3301      	adds	r3, #1
   13528:	931d      	str	r3, [sp, #116]	; 0x74
   1352a:	e663      	b.n	131f4 <_strtod_l+0x860>
   1352c:	9b05      	ldr	r3, [sp, #20]
   1352e:	9310      	str	r3, [sp, #64]	; 0x40
   13530:	2b00      	cmp	r3, #0
   13532:	d000      	beq.n	13536 <_strtod_l+0xba2>
   13534:	e623      	b.n	1317e <_strtod_l+0x7ea>
   13536:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13538:	46da      	mov	sl, fp
   1353a:	469b      	mov	fp, r3
   1353c:	2322      	movs	r3, #34	; 0x22
   1353e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13540:	981e      	ldr	r0, [sp, #120]	; 0x78
   13542:	6013      	str	r3, [r2, #0]
   13544:	2400      	movs	r4, #0
   13546:	2500      	movs	r5, #0
   13548:	e696      	b.n	13278 <_strtod_l+0x8e4>
   1354a:	9a08      	ldr	r2, [sp, #32]
   1354c:	0013      	movs	r3, r2
   1354e:	3316      	adds	r3, #22
   13550:	da01      	bge.n	13556 <_strtod_l+0xbc2>
   13552:	f7ff fbcf 	bl	12cf4 <_strtod_l+0x360>
   13556:	00d0      	lsls	r0, r2, #3
   13558:	4a8d      	ldr	r2, [pc, #564]	; (13790 <_strtod_l+0xdfc>)
   1355a:	1a12      	subs	r2, r2, r0
   1355c:	6853      	ldr	r3, [r2, #4]
   1355e:	6812      	ldr	r2, [r2, #0]
   13560:	9804      	ldr	r0, [sp, #16]
   13562:	9905      	ldr	r1, [sp, #20]
   13564:	f7f6 f9ee 	bl	9944 <__aeabi_ddiv>
   13568:	0004      	movs	r4, r0
   1356a:	000d      	movs	r5, r1
   1356c:	f7ff fb4d 	bl	12c0a <_strtod_l+0x276>
   13570:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13572:	46da      	mov	sl, fp
   13574:	469b      	mov	fp, r3
   13576:	e676      	b.n	13266 <_strtod_l+0x8d2>
   13578:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1357a:	46da      	mov	sl, fp
   1357c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1357e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   13580:	469b      	mov	fp, r3
   13582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13584:	2b00      	cmp	r3, #0
   13586:	d100      	bne.n	1358a <_strtod_l+0xbf6>
   13588:	e08d      	b.n	136a6 <_strtod_l+0xd12>
   1358a:	9804      	ldr	r0, [sp, #16]
   1358c:	9905      	ldr	r1, [sp, #20]
   1358e:	030b      	lsls	r3, r1, #12
   13590:	000a      	movs	r2, r1
   13592:	4983      	ldr	r1, [pc, #524]	; (137a0 <_strtod_l+0xe0c>)
   13594:	0b1b      	lsrs	r3, r3, #12
   13596:	428b      	cmp	r3, r1
   13598:	d100      	bne.n	1359c <_strtod_l+0xc08>
   1359a:	e0cc      	b.n	13736 <_strtod_l+0xda2>
   1359c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1359e:	2b00      	cmp	r3, #0
   135a0:	d100      	bne.n	135a4 <_strtod_l+0xc10>
   135a2:	e07b      	b.n	1369c <_strtod_l+0xd08>
   135a4:	9a05      	ldr	r2, [sp, #20]
   135a6:	4213      	tst	r3, r2
   135a8:	d010      	beq.n	135cc <_strtod_l+0xc38>
   135aa:	9804      	ldr	r0, [sp, #16]
   135ac:	9905      	ldr	r1, [sp, #20]
   135ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   135b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   135b2:	2b00      	cmp	r3, #0
   135b4:	d100      	bne.n	135b8 <_strtod_l+0xc24>
   135b6:	e083      	b.n	136c0 <_strtod_l+0xd2c>
   135b8:	f7ff f9d4 	bl	12964 <sulp>
   135bc:	0002      	movs	r2, r0
   135be:	000b      	movs	r3, r1
   135c0:	0020      	movs	r0, r4
   135c2:	0029      	movs	r1, r5
   135c4:	f001 fba8 	bl	14d18 <__aeabi_dadd>
   135c8:	0004      	movs	r4, r0
   135ca:	000d      	movs	r5, r1
   135cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   135ce:	2b00      	cmp	r3, #0
   135d0:	d017      	beq.n	13602 <_strtod_l+0xc6e>
   135d2:	4b74      	ldr	r3, [pc, #464]	; (137a4 <_strtod_l+0xe10>)
   135d4:	0020      	movs	r0, r4
   135d6:	9317      	str	r3, [sp, #92]	; 0x5c
   135d8:	2300      	movs	r3, #0
   135da:	9316      	str	r3, [sp, #88]	; 0x58
   135dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
   135de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   135e0:	0029      	movs	r1, r5
   135e2:	f7f6 fce3 	bl	9fac <__aeabi_dmul>
   135e6:	0002      	movs	r2, r0
   135e8:	000b      	movs	r3, r1
   135ea:	0004      	movs	r4, r0
   135ec:	000d      	movs	r5, r1
   135ee:	9204      	str	r2, [sp, #16]
   135f0:	9305      	str	r3, [sp, #20]
   135f2:	2900      	cmp	r1, #0
   135f4:	d105      	bne.n	13602 <_strtod_l+0xc6e>
   135f6:	9b04      	ldr	r3, [sp, #16]
   135f8:	2b00      	cmp	r3, #0
   135fa:	d102      	bne.n	13602 <_strtod_l+0xc6e>
   135fc:	2322      	movs	r3, #34	; 0x22
   135fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13600:	6013      	str	r3, [r2, #0]
   13602:	981e      	ldr	r0, [sp, #120]	; 0x78
   13604:	e638      	b.n	13278 <_strtod_l+0x8e4>
   13606:	9b15      	ldr	r3, [sp, #84]	; 0x54
   13608:	46da      	mov	sl, fp
   1360a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1360c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   1360e:	469b      	mov	fp, r3
   13610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   13612:	2b00      	cmp	r3, #0
   13614:	d1da      	bne.n	135cc <_strtod_l+0xc38>
   13616:	9904      	ldr	r1, [sp, #16]
   13618:	9a05      	ldr	r2, [sp, #20]
   1361a:	2900      	cmp	r1, #0
   1361c:	d1d6      	bne.n	135cc <_strtod_l+0xc38>
   1361e:	0313      	lsls	r3, r2, #12
   13620:	d1d4      	bne.n	135cc <_strtod_l+0xc38>
   13622:	4b58      	ldr	r3, [pc, #352]	; (13784 <_strtod_l+0xdf0>)
   13624:	4013      	ands	r3, r2
   13626:	22d6      	movs	r2, #214	; 0xd6
   13628:	04d2      	lsls	r2, r2, #19
   1362a:	4293      	cmp	r3, r2
   1362c:	d9ce      	bls.n	135cc <_strtod_l+0xc38>
   1362e:	464b      	mov	r3, r9
   13630:	695b      	ldr	r3, [r3, #20]
   13632:	2b00      	cmp	r3, #0
   13634:	d103      	bne.n	1363e <_strtod_l+0xcaa>
   13636:	464b      	mov	r3, r9
   13638:	691b      	ldr	r3, [r3, #16]
   1363a:	2b01      	cmp	r3, #1
   1363c:	ddc6      	ble.n	135cc <_strtod_l+0xc38>
   1363e:	4649      	mov	r1, r9
   13640:	2201      	movs	r2, #1
   13642:	9809      	ldr	r0, [sp, #36]	; 0x24
   13644:	f7fe fcf2 	bl	1202c <__lshift>
   13648:	4641      	mov	r1, r8
   1364a:	4681      	mov	r9, r0
   1364c:	f7fe fd4e 	bl	120ec <__mcmp>
   13650:	2800      	cmp	r0, #0
   13652:	ddbb      	ble.n	135cc <_strtod_l+0xc38>
   13654:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13656:	2b00      	cmp	r3, #0
   13658:	d100      	bne.n	1365c <_strtod_l+0xcc8>
   1365a:	e0b2      	b.n	137c2 <_strtod_l+0xe2e>
   1365c:	9a05      	ldr	r2, [sp, #20]
   1365e:	4b49      	ldr	r3, [pc, #292]	; (13784 <_strtod_l+0xdf0>)
   13660:	4013      	ands	r3, r2
   13662:	22d6      	movs	r2, #214	; 0xd6
   13664:	04d2      	lsls	r2, r2, #19
   13666:	4293      	cmp	r3, r2
   13668:	dd00      	ble.n	1366c <_strtod_l+0xcd8>
   1366a:	e0aa      	b.n	137c2 <_strtod_l+0xe2e>
   1366c:	22dc      	movs	r2, #220	; 0xdc
   1366e:	0492      	lsls	r2, r2, #18
   13670:	4293      	cmp	r3, r2
   13672:	dcae      	bgt.n	135d2 <_strtod_l+0xc3e>
   13674:	e762      	b.n	1353c <_strtod_l+0xba8>
   13676:	22d4      	movs	r2, #212	; 0xd4
   13678:	0492      	lsls	r2, r2, #18
   1367a:	0023      	movs	r3, r4
   1367c:	4694      	mov	ip, r2
   1367e:	4463      	add	r3, ip
   13680:	9305      	str	r3, [sp, #20]
   13682:	2300      	movs	r3, #0
   13684:	930c      	str	r3, [sp, #48]	; 0x30
   13686:	f7ff fb50 	bl	12d2a <_strtod_l+0x396>
   1368a:	2300      	movs	r3, #0
   1368c:	4c46      	ldr	r4, [pc, #280]	; (137a8 <_strtod_l+0xe14>)
   1368e:	931a      	str	r3, [sp, #104]	; 0x68
   13690:	941b      	str	r4, [sp, #108]	; 0x6c
   13692:	2300      	movs	r3, #0
   13694:	9311      	str	r3, [sp, #68]	; 0x44
   13696:	4b45      	ldr	r3, [pc, #276]	; (137ac <_strtod_l+0xe18>)
   13698:	9314      	str	r3, [sp, #80]	; 0x50
   1369a:	e545      	b.n	13128 <_strtod_l+0x794>
   1369c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1369e:	9a04      	ldr	r2, [sp, #16]
   136a0:	4213      	tst	r3, r2
   136a2:	d093      	beq.n	135cc <_strtod_l+0xc38>
   136a4:	e781      	b.n	135aa <_strtod_l+0xc16>
   136a6:	9904      	ldr	r1, [sp, #16]
   136a8:	9a05      	ldr	r2, [sp, #20]
   136aa:	0313      	lsls	r3, r2, #12
   136ac:	d000      	beq.n	136b0 <_strtod_l+0xd1c>
   136ae:	e775      	b.n	1359c <_strtod_l+0xc08>
   136b0:	2900      	cmp	r1, #0
   136b2:	d000      	beq.n	136b6 <_strtod_l+0xd22>
   136b4:	e772      	b.n	1359c <_strtod_l+0xc08>
   136b6:	e7cd      	b.n	13654 <_strtod_l+0xcc0>
   136b8:	4b3d      	ldr	r3, [pc, #244]	; (137b0 <_strtod_l+0xe1c>)
   136ba:	2700      	movs	r7, #0
   136bc:	930c      	str	r3, [sp, #48]	; 0x30
   136be:	e4b3      	b.n	13028 <_strtod_l+0x694>
   136c0:	f7ff f950 	bl	12964 <sulp>
   136c4:	0002      	movs	r2, r0
   136c6:	000b      	movs	r3, r1
   136c8:	0020      	movs	r0, r4
   136ca:	0029      	movs	r1, r5
   136cc:	f7f6 feee 	bl	a4ac <__aeabi_dsub>
   136d0:	2200      	movs	r2, #0
   136d2:	2300      	movs	r3, #0
   136d4:	0004      	movs	r4, r0
   136d6:	000d      	movs	r5, r1
   136d8:	f7f7 fb0e 	bl	acf8 <__aeabi_dcmpeq>
   136dc:	2800      	cmp	r0, #0
   136de:	d000      	beq.n	136e2 <_strtod_l+0xd4e>
   136e0:	e72c      	b.n	1353c <_strtod_l+0xba8>
   136e2:	e773      	b.n	135cc <_strtod_l+0xc38>
   136e4:	aa20      	add	r2, sp, #128	; 0x80
   136e6:	4933      	ldr	r1, [pc, #204]	; (137b4 <_strtod_l+0xe20>)
   136e8:	a81d      	add	r0, sp, #116	; 0x74
   136ea:	f001 f9bb 	bl	14a64 <__hexnan>
   136ee:	2805      	cmp	r0, #5
   136f0:	d001      	beq.n	136f6 <_strtod_l+0xd62>
   136f2:	f7ff faea 	bl	12cca <_strtod_l+0x336>
   136f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
   136f8:	4a22      	ldr	r2, [pc, #136]	; (13784 <_strtod_l+0xdf0>)
   136fa:	431a      	orrs	r2, r3
   136fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   136fe:	9205      	str	r2, [sp, #20]
   13700:	9304      	str	r3, [sp, #16]
   13702:	f7ff fae6 	bl	12cd2 <_strtod_l+0x33e>
   13706:	2c00      	cmp	r4, #0
   13708:	dd00      	ble.n	1370c <_strtod_l+0xd78>
   1370a:	e63b      	b.n	13384 <_strtod_l+0x9f0>
   1370c:	e651      	b.n	133b2 <_strtod_l+0xa1e>
   1370e:	9b04      	ldr	r3, [sp, #16]
   13710:	9c05      	ldr	r4, [sp, #20]
   13712:	236b      	movs	r3, #107	; 0x6b
   13714:	0061      	lsls	r1, r4, #1
   13716:	0d49      	lsrs	r1, r1, #21
   13718:	0022      	movs	r2, r4
   1371a:	1a5b      	subs	r3, r3, r1
   1371c:	2b00      	cmp	r3, #0
   1371e:	dc00      	bgt.n	13722 <_strtod_l+0xd8e>
   13720:	e647      	b.n	133b2 <_strtod_l+0xa1e>
   13722:	2b1f      	cmp	r3, #31
   13724:	dd5c      	ble.n	137e0 <_strtod_l+0xe4c>
   13726:	2100      	movs	r1, #0
   13728:	9104      	str	r1, [sp, #16]
   1372a:	2b34      	cmp	r3, #52	; 0x34
   1372c:	dd62      	ble.n	137f4 <_strtod_l+0xe60>
   1372e:	23dc      	movs	r3, #220	; 0xdc
   13730:	049b      	lsls	r3, r3, #18
   13732:	9305      	str	r3, [sp, #20]
   13734:	e63d      	b.n	133b2 <_strtod_l+0xa1e>
   13736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   13738:	9904      	ldr	r1, [sp, #16]
   1373a:	2b00      	cmp	r3, #0
   1373c:	d03e      	beq.n	137bc <_strtod_l+0xe28>
   1373e:	20d4      	movs	r0, #212	; 0xd4
   13740:	4b10      	ldr	r3, [pc, #64]	; (13784 <_strtod_l+0xdf0>)
   13742:	04c0      	lsls	r0, r0, #19
   13744:	4013      	ands	r3, r2
   13746:	4283      	cmp	r3, r0
   13748:	d838      	bhi.n	137bc <_strtod_l+0xe28>
   1374a:	206b      	movs	r0, #107	; 0x6b
   1374c:	0d1b      	lsrs	r3, r3, #20
   1374e:	1ac0      	subs	r0, r0, r3
   13750:	2301      	movs	r3, #1
   13752:	425b      	negs	r3, r3
   13754:	4083      	lsls	r3, r0
   13756:	428b      	cmp	r3, r1
   13758:	d000      	beq.n	1375c <_strtod_l+0xdc8>
   1375a:	e71f      	b.n	1359c <_strtod_l+0xc08>
   1375c:	4916      	ldr	r1, [pc, #88]	; (137b8 <_strtod_l+0xe24>)
   1375e:	428a      	cmp	r2, r1
   13760:	d05a      	beq.n	13818 <_strtod_l+0xe84>
   13762:	2180      	movs	r1, #128	; 0x80
   13764:	4b07      	ldr	r3, [pc, #28]	; (13784 <_strtod_l+0xdf0>)
   13766:	0349      	lsls	r1, r1, #13
   13768:	401a      	ands	r2, r3
   1376a:	0013      	movs	r3, r2
   1376c:	468c      	mov	ip, r1
   1376e:	4463      	add	r3, ip
   13770:	9305      	str	r3, [sp, #20]
   13772:	2300      	movs	r3, #0
   13774:	9304      	str	r3, [sp, #16]
   13776:	9c04      	ldr	r4, [sp, #16]
   13778:	9d05      	ldr	r5, [sp, #20]
   1377a:	e727      	b.n	135cc <_strtod_l+0xc38>
   1377c:	000194e4 	.word	0x000194e4
   13780:	7fffffff 	.word	0x7fffffff
   13784:	7ff00000 	.word	0x7ff00000
   13788:	00000433 	.word	0x00000433
   1378c:	ffefffff 	.word	0xffefffff
   13790:	00019358 	.word	0x00019358
   13794:	3ff00000 	.word	0x3ff00000
   13798:	000194fc 	.word	0x000194fc
   1379c:	00019500 	.word	0x00019500
   137a0:	000fffff 	.word	0x000fffff
   137a4:	39500000 	.word	0x39500000
   137a8:	bfe00000 	.word	0xbfe00000
   137ac:	3fe00000 	.word	0x3fe00000
   137b0:	00019330 	.word	0x00019330
   137b4:	00019520 	.word	0x00019520
   137b8:	7fefffff 	.word	0x7fefffff
   137bc:	2301      	movs	r3, #1
   137be:	425b      	negs	r3, r3
   137c0:	e7c9      	b.n	13756 <_strtod_l+0xdc2>
   137c2:	9a05      	ldr	r2, [sp, #20]
   137c4:	4b16      	ldr	r3, [pc, #88]	; (13820 <_strtod_l+0xe8c>)
   137c6:	4013      	ands	r3, r2
   137c8:	4a16      	ldr	r2, [pc, #88]	; (13824 <_strtod_l+0xe90>)
   137ca:	4694      	mov	ip, r2
   137cc:	4a16      	ldr	r2, [pc, #88]	; (13828 <_strtod_l+0xe94>)
   137ce:	4463      	add	r3, ip
   137d0:	431a      	orrs	r2, r3
   137d2:	2301      	movs	r3, #1
   137d4:	425b      	negs	r3, r3
   137d6:	9205      	str	r2, [sp, #20]
   137d8:	9304      	str	r3, [sp, #16]
   137da:	9c04      	ldr	r4, [sp, #16]
   137dc:	9d05      	ldr	r5, [sp, #20]
   137de:	e6f5      	b.n	135cc <_strtod_l+0xc38>
   137e0:	2201      	movs	r2, #1
   137e2:	4252      	negs	r2, r2
   137e4:	409a      	lsls	r2, r3
   137e6:	9b04      	ldr	r3, [sp, #16]
   137e8:	4013      	ands	r3, r2
   137ea:	9304      	str	r3, [sp, #16]
   137ec:	e5e1      	b.n	133b2 <_strtod_l+0xa1e>
   137ee:	9004      	str	r0, [sp, #16]
   137f0:	9105      	str	r1, [sp, #20]
   137f2:	e5da      	b.n	133aa <_strtod_l+0xa16>
   137f4:	2101      	movs	r1, #1
   137f6:	3b20      	subs	r3, #32
   137f8:	4249      	negs	r1, r1
   137fa:	4099      	lsls	r1, r3
   137fc:	400a      	ands	r2, r1
   137fe:	9205      	str	r2, [sp, #20]
   13800:	e5d7      	b.n	133b2 <_strtod_l+0xa1e>
   13802:	002f      	movs	r7, r5
   13804:	991d      	ldr	r1, [sp, #116]	; 0x74
   13806:	3501      	adds	r5, #1
   13808:	e58a      	b.n	13320 <_strtod_l+0x98c>
   1380a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1380c:	0023      	movs	r3, r4
   1380e:	e593      	b.n	13338 <_strtod_l+0x9a4>
   13810:	9004      	str	r0, [sp, #16]
   13812:	9105      	str	r1, [sp, #20]
   13814:	f7ff fc08 	bl	13028 <_strtod_l+0x694>
   13818:	3301      	adds	r3, #1
   1381a:	d1a2      	bne.n	13762 <_strtod_l+0xdce>
   1381c:	e522      	b.n	13264 <_strtod_l+0x8d0>
   1381e:	46c0      	nop			; (mov r8, r8)
   13820:	7ff00000 	.word	0x7ff00000
   13824:	fff00000 	.word	0xfff00000
   13828:	000fffff 	.word	0x000fffff

0001382c <_strtod_r>:
   1382c:	4b05      	ldr	r3, [pc, #20]	; (13844 <_strtod_r+0x18>)
   1382e:	b510      	push	{r4, lr}
   13830:	681b      	ldr	r3, [r3, #0]
   13832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13834:	2b00      	cmp	r3, #0
   13836:	d002      	beq.n	1383e <_strtod_r+0x12>
   13838:	f7ff f8ac 	bl	12994 <_strtod_l>
   1383c:	bd10      	pop	{r4, pc}
   1383e:	4b02      	ldr	r3, [pc, #8]	; (13848 <_strtod_r+0x1c>)
   13840:	e7fa      	b.n	13838 <_strtod_r+0xc>
   13842:	46c0      	nop			; (mov r8, r8)
   13844:	20000088 	.word	0x20000088
   13848:	200008cc 	.word	0x200008cc

0001384c <_strtoll_l.isra.0>:
   1384c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1384e:	46de      	mov	lr, fp
   13850:	4657      	mov	r7, sl
   13852:	464e      	mov	r6, r9
   13854:	4645      	mov	r5, r8
   13856:	b5e0      	push	{r5, r6, r7, lr}
   13858:	001f      	movs	r7, r3
   1385a:	2308      	movs	r3, #8
   1385c:	b089      	sub	sp, #36	; 0x24
   1385e:	9007      	str	r0, [sp, #28]
   13860:	9106      	str	r1, [sp, #24]
   13862:	4693      	mov	fp, r2
   13864:	000e      	movs	r6, r1
   13866:	4698      	mov	r8, r3
   13868:	e000      	b.n	1386c <_strtoll_l.isra.0+0x20>
   1386a:	002e      	movs	r6, r5
   1386c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1386e:	7834      	ldrb	r4, [r6, #0]
   13870:	f7fe f830 	bl	118d4 <__locale_ctype_ptr_l>
   13874:	4642      	mov	r2, r8
   13876:	1900      	adds	r0, r0, r4
   13878:	7843      	ldrb	r3, [r0, #1]
   1387a:	1c75      	adds	r5, r6, #1
   1387c:	421a      	tst	r2, r3
   1387e:	d1f4      	bne.n	1386a <_strtoll_l.isra.0+0x1e>
   13880:	2c2d      	cmp	r4, #45	; 0x2d
   13882:	d100      	bne.n	13886 <_strtoll_l.isra.0+0x3a>
   13884:	e087      	b.n	13996 <_strtoll_l.isra.0+0x14a>
   13886:	2300      	movs	r3, #0
   13888:	9303      	str	r3, [sp, #12]
   1388a:	2c2b      	cmp	r4, #43	; 0x2b
   1388c:	d100      	bne.n	13890 <_strtoll_l.isra.0+0x44>
   1388e:	e094      	b.n	139ba <_strtoll_l.isra.0+0x16e>
   13890:	2f00      	cmp	r7, #0
   13892:	d00e      	beq.n	138b2 <_strtoll_l.isra.0+0x66>
   13894:	2f10      	cmp	r7, #16
   13896:	d100      	bne.n	1389a <_strtoll_l.isra.0+0x4e>
   13898:	e092      	b.n	139c0 <_strtoll_l.isra.0+0x174>
   1389a:	17fb      	asrs	r3, r7, #31
   1389c:	4699      	mov	r9, r3
   1389e:	9b03      	ldr	r3, [sp, #12]
   138a0:	46ba      	mov	sl, r7
   138a2:	2b00      	cmp	r3, #0
   138a4:	d110      	bne.n	138c8 <_strtoll_l.isra.0+0x7c>
   138a6:	2301      	movs	r3, #1
   138a8:	425b      	negs	r3, r3
   138aa:	9304      	str	r3, [sp, #16]
   138ac:	4b55      	ldr	r3, [pc, #340]	; (13a04 <_strtoll_l.isra.0+0x1b8>)
   138ae:	9305      	str	r3, [sp, #20]
   138b0:	e00f      	b.n	138d2 <_strtoll_l.isra.0+0x86>
   138b2:	2c30      	cmp	r4, #48	; 0x30
   138b4:	d100      	bne.n	138b8 <_strtoll_l.isra.0+0x6c>
   138b6:	e092      	b.n	139de <_strtoll_l.isra.0+0x192>
   138b8:	230a      	movs	r3, #10
   138ba:	469a      	mov	sl, r3
   138bc:	2300      	movs	r3, #0
   138be:	270a      	movs	r7, #10
   138c0:	4699      	mov	r9, r3
   138c2:	9b03      	ldr	r3, [sp, #12]
   138c4:	2b00      	cmp	r3, #0
   138c6:	d0ee      	beq.n	138a6 <_strtoll_l.isra.0+0x5a>
   138c8:	2300      	movs	r3, #0
   138ca:	9304      	str	r3, [sp, #16]
   138cc:	2380      	movs	r3, #128	; 0x80
   138ce:	061b      	lsls	r3, r3, #24
   138d0:	9305      	str	r3, [sp, #20]
   138d2:	9904      	ldr	r1, [sp, #16]
   138d4:	9e05      	ldr	r6, [sp, #20]
   138d6:	4688      	mov	r8, r1
   138d8:	0008      	movs	r0, r1
   138da:	4652      	mov	r2, sl
   138dc:	0031      	movs	r1, r6
   138de:	464b      	mov	r3, r9
   138e0:	f7f5 fdde 	bl	94a0 <__aeabi_uldivmod>
   138e4:	4640      	mov	r0, r8
   138e6:	9202      	str	r2, [sp, #8]
   138e8:	0031      	movs	r1, r6
   138ea:	4652      	mov	r2, sl
   138ec:	464b      	mov	r3, r9
   138ee:	f7f5 fdd7 	bl	94a0 <__aeabi_uldivmod>
   138f2:	2200      	movs	r2, #0
   138f4:	4680      	mov	r8, r0
   138f6:	000e      	movs	r6, r1
   138f8:	2000      	movs	r0, #0
   138fa:	2100      	movs	r1, #0
   138fc:	e019      	b.n	13932 <_strtoll_l.isra.0+0xe6>
   138fe:	001c      	movs	r4, r3
   13900:	42a7      	cmp	r7, r4
   13902:	dd21      	ble.n	13948 <_strtoll_l.isra.0+0xfc>
   13904:	1c53      	adds	r3, r2, #1
   13906:	d012      	beq.n	1392e <_strtoll_l.isra.0+0xe2>
   13908:	42b1      	cmp	r1, r6
   1390a:	d83b      	bhi.n	13984 <_strtoll_l.isra.0+0x138>
   1390c:	d101      	bne.n	13912 <_strtoll_l.isra.0+0xc6>
   1390e:	4540      	cmp	r0, r8
   13910:	d838      	bhi.n	13984 <_strtoll_l.isra.0+0x138>
   13912:	4580      	cmp	r8, r0
   13914:	d031      	beq.n	1397a <_strtoll_l.isra.0+0x12e>
   13916:	4652      	mov	r2, sl
   13918:	464b      	mov	r3, r9
   1391a:	f7f5 fde1 	bl	94e0 <__aeabi_lmul>
   1391e:	17e3      	asrs	r3, r4, #31
   13920:	9400      	str	r4, [sp, #0]
   13922:	9301      	str	r3, [sp, #4]
   13924:	9b00      	ldr	r3, [sp, #0]
   13926:	9c01      	ldr	r4, [sp, #4]
   13928:	2201      	movs	r2, #1
   1392a:	18c0      	adds	r0, r0, r3
   1392c:	4161      	adcs	r1, r4
   1392e:	782c      	ldrb	r4, [r5, #0]
   13930:	3501      	adds	r5, #1
   13932:	0023      	movs	r3, r4
   13934:	3b30      	subs	r3, #48	; 0x30
   13936:	2b09      	cmp	r3, #9
   13938:	d9e1      	bls.n	138fe <_strtoll_l.isra.0+0xb2>
   1393a:	0023      	movs	r3, r4
   1393c:	3b41      	subs	r3, #65	; 0x41
   1393e:	2b19      	cmp	r3, #25
   13940:	d823      	bhi.n	1398a <_strtoll_l.isra.0+0x13e>
   13942:	3c37      	subs	r4, #55	; 0x37
   13944:	42a7      	cmp	r7, r4
   13946:	dcdd      	bgt.n	13904 <_strtoll_l.isra.0+0xb8>
   13948:	1c53      	adds	r3, r2, #1
   1394a:	d029      	beq.n	139a0 <_strtoll_l.isra.0+0x154>
   1394c:	9b03      	ldr	r3, [sp, #12]
   1394e:	2b00      	cmp	r3, #0
   13950:	d004      	beq.n	1395c <_strtoll_l.isra.0+0x110>
   13952:	0003      	movs	r3, r0
   13954:	000c      	movs	r4, r1
   13956:	2100      	movs	r1, #0
   13958:	4258      	negs	r0, r3
   1395a:	41a1      	sbcs	r1, r4
   1395c:	465b      	mov	r3, fp
   1395e:	2b00      	cmp	r3, #0
   13960:	d004      	beq.n	1396c <_strtoll_l.isra.0+0x120>
   13962:	9b06      	ldr	r3, [sp, #24]
   13964:	2a00      	cmp	r2, #0
   13966:	d125      	bne.n	139b4 <_strtoll_l.isra.0+0x168>
   13968:	465a      	mov	r2, fp
   1396a:	6013      	str	r3, [r2, #0]
   1396c:	b009      	add	sp, #36	; 0x24
   1396e:	bc3c      	pop	{r2, r3, r4, r5}
   13970:	4690      	mov	r8, r2
   13972:	4699      	mov	r9, r3
   13974:	46a2      	mov	sl, r4
   13976:	46ab      	mov	fp, r5
   13978:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1397a:	428e      	cmp	r6, r1
   1397c:	d1cb      	bne.n	13916 <_strtoll_l.isra.0+0xca>
   1397e:	9b02      	ldr	r3, [sp, #8]
   13980:	42a3      	cmp	r3, r4
   13982:	dac8      	bge.n	13916 <_strtoll_l.isra.0+0xca>
   13984:	2201      	movs	r2, #1
   13986:	4252      	negs	r2, r2
   13988:	e7d1      	b.n	1392e <_strtoll_l.isra.0+0xe2>
   1398a:	0023      	movs	r3, r4
   1398c:	3b61      	subs	r3, #97	; 0x61
   1398e:	2b19      	cmp	r3, #25
   13990:	d8da      	bhi.n	13948 <_strtoll_l.isra.0+0xfc>
   13992:	3c57      	subs	r4, #87	; 0x57
   13994:	e7b4      	b.n	13900 <_strtoll_l.isra.0+0xb4>
   13996:	2301      	movs	r3, #1
   13998:	782c      	ldrb	r4, [r5, #0]
   1399a:	9303      	str	r3, [sp, #12]
   1399c:	1cb5      	adds	r5, r6, #2
   1399e:	e777      	b.n	13890 <_strtoll_l.isra.0+0x44>
   139a0:	2322      	movs	r3, #34	; 0x22
   139a2:	9a07      	ldr	r2, [sp, #28]
   139a4:	6013      	str	r3, [r2, #0]
   139a6:	465b      	mov	r3, fp
   139a8:	2b00      	cmp	r3, #0
   139aa:	d028      	beq.n	139fe <_strtoll_l.isra.0+0x1b2>
   139ac:	1e6b      	subs	r3, r5, #1
   139ae:	9804      	ldr	r0, [sp, #16]
   139b0:	9905      	ldr	r1, [sp, #20]
   139b2:	e7d9      	b.n	13968 <_strtoll_l.isra.0+0x11c>
   139b4:	9004      	str	r0, [sp, #16]
   139b6:	9105      	str	r1, [sp, #20]
   139b8:	e7f8      	b.n	139ac <_strtoll_l.isra.0+0x160>
   139ba:	782c      	ldrb	r4, [r5, #0]
   139bc:	1cb5      	adds	r5, r6, #2
   139be:	e767      	b.n	13890 <_strtoll_l.isra.0+0x44>
   139c0:	2c30      	cmp	r4, #48	; 0x30
   139c2:	d117      	bne.n	139f4 <_strtoll_l.isra.0+0x1a8>
   139c4:	2220      	movs	r2, #32
   139c6:	782b      	ldrb	r3, [r5, #0]
   139c8:	4393      	bics	r3, r2
   139ca:	2b58      	cmp	r3, #88	; 0x58
   139cc:	d112      	bne.n	139f4 <_strtoll_l.isra.0+0x1a8>
   139ce:	2310      	movs	r3, #16
   139d0:	469a      	mov	sl, r3
   139d2:	2300      	movs	r3, #0
   139d4:	786c      	ldrb	r4, [r5, #1]
   139d6:	4699      	mov	r9, r3
   139d8:	3502      	adds	r5, #2
   139da:	2710      	movs	r7, #16
   139dc:	e771      	b.n	138c2 <_strtoll_l.isra.0+0x76>
   139de:	2220      	movs	r2, #32
   139e0:	782b      	ldrb	r3, [r5, #0]
   139e2:	4393      	bics	r3, r2
   139e4:	2b58      	cmp	r3, #88	; 0x58
   139e6:	d0f2      	beq.n	139ce <_strtoll_l.isra.0+0x182>
   139e8:	2308      	movs	r3, #8
   139ea:	469a      	mov	sl, r3
   139ec:	2300      	movs	r3, #0
   139ee:	2708      	movs	r7, #8
   139f0:	4699      	mov	r9, r3
   139f2:	e766      	b.n	138c2 <_strtoll_l.isra.0+0x76>
   139f4:	2310      	movs	r3, #16
   139f6:	469a      	mov	sl, r3
   139f8:	2300      	movs	r3, #0
   139fa:	4699      	mov	r9, r3
   139fc:	e761      	b.n	138c2 <_strtoll_l.isra.0+0x76>
   139fe:	9804      	ldr	r0, [sp, #16]
   13a00:	9905      	ldr	r1, [sp, #20]
   13a02:	e7b3      	b.n	1396c <_strtoll_l.isra.0+0x120>
   13a04:	7fffffff 	.word	0x7fffffff

00013a08 <_strtoll_r>:
   13a08:	b510      	push	{r4, lr}
   13a0a:	4c06      	ldr	r4, [pc, #24]	; (13a24 <_strtoll_r+0x1c>)
   13a0c:	b082      	sub	sp, #8
   13a0e:	6824      	ldr	r4, [r4, #0]
   13a10:	6b64      	ldr	r4, [r4, #52]	; 0x34
   13a12:	2c00      	cmp	r4, #0
   13a14:	d004      	beq.n	13a20 <_strtoll_r+0x18>
   13a16:	9400      	str	r4, [sp, #0]
   13a18:	f7ff ff18 	bl	1384c <_strtoll_l.isra.0>
   13a1c:	b002      	add	sp, #8
   13a1e:	bd10      	pop	{r4, pc}
   13a20:	4c01      	ldr	r4, [pc, #4]	; (13a28 <_strtoll_r+0x20>)
   13a22:	e7f8      	b.n	13a16 <_strtoll_r+0xe>
   13a24:	20000088 	.word	0x20000088
   13a28:	200008cc 	.word	0x200008cc

00013a2c <_strtoul_l.isra.0>:
   13a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a2e:	4657      	mov	r7, sl
   13a30:	464e      	mov	r6, r9
   13a32:	46de      	mov	lr, fp
   13a34:	4645      	mov	r5, r8
   13a36:	b5e0      	push	{r5, r6, r7, lr}
   13a38:	001e      	movs	r6, r3
   13a3a:	2308      	movs	r3, #8
   13a3c:	b083      	sub	sp, #12
   13a3e:	4683      	mov	fp, r0
   13a40:	4689      	mov	r9, r1
   13a42:	4692      	mov	sl, r2
   13a44:	000f      	movs	r7, r1
   13a46:	4698      	mov	r8, r3
   13a48:	e000      	b.n	13a4c <_strtoul_l.isra.0+0x20>
   13a4a:	002f      	movs	r7, r5
   13a4c:	980c      	ldr	r0, [sp, #48]	; 0x30
   13a4e:	783c      	ldrb	r4, [r7, #0]
   13a50:	f7fd ff40 	bl	118d4 <__locale_ctype_ptr_l>
   13a54:	4642      	mov	r2, r8
   13a56:	1900      	adds	r0, r0, r4
   13a58:	7843      	ldrb	r3, [r0, #1]
   13a5a:	1c7d      	adds	r5, r7, #1
   13a5c:	421a      	tst	r2, r3
   13a5e:	d1f4      	bne.n	13a4a <_strtoul_l.isra.0+0x1e>
   13a60:	2c2d      	cmp	r4, #45	; 0x2d
   13a62:	d05b      	beq.n	13b1c <_strtoul_l.isra.0+0xf0>
   13a64:	2300      	movs	r3, #0
   13a66:	9301      	str	r3, [sp, #4]
   13a68:	2c2b      	cmp	r4, #43	; 0x2b
   13a6a:	d05c      	beq.n	13b26 <_strtoul_l.isra.0+0xfa>
   13a6c:	2e00      	cmp	r6, #0
   13a6e:	d00e      	beq.n	13a8e <_strtoul_l.isra.0+0x62>
   13a70:	2e10      	cmp	r6, #16
   13a72:	d05b      	beq.n	13b2c <_strtoul_l.isra.0+0x100>
   13a74:	2001      	movs	r0, #1
   13a76:	0031      	movs	r1, r6
   13a78:	4240      	negs	r0, r0
   13a7a:	f7f5 fb9b 	bl	91b4 <__udivsi3>
   13a7e:	0007      	movs	r7, r0
   13a80:	2001      	movs	r0, #1
   13a82:	0031      	movs	r1, r6
   13a84:	4240      	negs	r0, r0
   13a86:	46b0      	mov	r8, r6
   13a88:	f7f5 fc1a 	bl	92c0 <__aeabi_uidivmod>
   13a8c:	e006      	b.n	13a9c <_strtoul_l.isra.0+0x70>
   13a8e:	2c30      	cmp	r4, #48	; 0x30
   13a90:	d05b      	beq.n	13b4a <_strtoul_l.isra.0+0x11e>
   13a92:	230a      	movs	r3, #10
   13a94:	2105      	movs	r1, #5
   13a96:	4698      	mov	r8, r3
   13a98:	260a      	movs	r6, #10
   13a9a:	4f34      	ldr	r7, [pc, #208]	; (13b6c <_strtoul_l.isra.0+0x140>)
   13a9c:	2200      	movs	r2, #0
   13a9e:	2000      	movs	r0, #0
   13aa0:	0023      	movs	r3, r4
   13aa2:	3b30      	subs	r3, #48	; 0x30
   13aa4:	2b09      	cmp	r3, #9
   13aa6:	d907      	bls.n	13ab8 <_strtoul_l.isra.0+0x8c>
   13aa8:	3b11      	subs	r3, #17
   13aaa:	2b19      	cmp	r3, #25
   13aac:	d903      	bls.n	13ab6 <_strtoul_l.isra.0+0x8a>
   13aae:	0023      	movs	r3, r4
   13ab0:	3b61      	subs	r3, #97	; 0x61
   13ab2:	2b19      	cmp	r3, #25
   13ab4:	d80e      	bhi.n	13ad4 <_strtoul_l.isra.0+0xa8>
   13ab6:	330a      	adds	r3, #10
   13ab8:	429e      	cmp	r6, r3
   13aba:	dd0b      	ble.n	13ad4 <_strtoul_l.isra.0+0xa8>
   13abc:	2a00      	cmp	r2, #0
   13abe:	db20      	blt.n	13b02 <_strtoul_l.isra.0+0xd6>
   13ac0:	42b8      	cmp	r0, r7
   13ac2:	d81e      	bhi.n	13b02 <_strtoul_l.isra.0+0xd6>
   13ac4:	d01b      	beq.n	13afe <_strtoul_l.isra.0+0xd2>
   13ac6:	4642      	mov	r2, r8
   13ac8:	4350      	muls	r0, r2
   13aca:	2201      	movs	r2, #1
   13acc:	1818      	adds	r0, r3, r0
   13ace:	782c      	ldrb	r4, [r5, #0]
   13ad0:	3501      	adds	r5, #1
   13ad2:	e7e5      	b.n	13aa0 <_strtoul_l.isra.0+0x74>
   13ad4:	2a00      	cmp	r2, #0
   13ad6:	db17      	blt.n	13b08 <_strtoul_l.isra.0+0xdc>
   13ad8:	9b01      	ldr	r3, [sp, #4]
   13ada:	2b00      	cmp	r3, #0
   13adc:	d000      	beq.n	13ae0 <_strtoul_l.isra.0+0xb4>
   13ade:	4240      	negs	r0, r0
   13ae0:	4653      	mov	r3, sl
   13ae2:	2b00      	cmp	r3, #0
   13ae4:	d004      	beq.n	13af0 <_strtoul_l.isra.0+0xc4>
   13ae6:	464b      	mov	r3, r9
   13ae8:	2a00      	cmp	r2, #0
   13aea:	d115      	bne.n	13b18 <_strtoul_l.isra.0+0xec>
   13aec:	4652      	mov	r2, sl
   13aee:	6013      	str	r3, [r2, #0]
   13af0:	b003      	add	sp, #12
   13af2:	bc3c      	pop	{r2, r3, r4, r5}
   13af4:	4690      	mov	r8, r2
   13af6:	4699      	mov	r9, r3
   13af8:	46a2      	mov	sl, r4
   13afa:	46ab      	mov	fp, r5
   13afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13afe:	428b      	cmp	r3, r1
   13b00:	dde1      	ble.n	13ac6 <_strtoul_l.isra.0+0x9a>
   13b02:	2201      	movs	r2, #1
   13b04:	4252      	negs	r2, r2
   13b06:	e7e2      	b.n	13ace <_strtoul_l.isra.0+0xa2>
   13b08:	2322      	movs	r3, #34	; 0x22
   13b0a:	465a      	mov	r2, fp
   13b0c:	2001      	movs	r0, #1
   13b0e:	6013      	str	r3, [r2, #0]
   13b10:	4653      	mov	r3, sl
   13b12:	4240      	negs	r0, r0
   13b14:	2b00      	cmp	r3, #0
   13b16:	d0eb      	beq.n	13af0 <_strtoul_l.isra.0+0xc4>
   13b18:	1e6b      	subs	r3, r5, #1
   13b1a:	e7e7      	b.n	13aec <_strtoul_l.isra.0+0xc0>
   13b1c:	2301      	movs	r3, #1
   13b1e:	782c      	ldrb	r4, [r5, #0]
   13b20:	9301      	str	r3, [sp, #4]
   13b22:	1cbd      	adds	r5, r7, #2
   13b24:	e7a2      	b.n	13a6c <_strtoul_l.isra.0+0x40>
   13b26:	782c      	ldrb	r4, [r5, #0]
   13b28:	1cbd      	adds	r5, r7, #2
   13b2a:	e79f      	b.n	13a6c <_strtoul_l.isra.0+0x40>
   13b2c:	2c30      	cmp	r4, #48	; 0x30
   13b2e:	d117      	bne.n	13b60 <_strtoul_l.isra.0+0x134>
   13b30:	2220      	movs	r2, #32
   13b32:	782b      	ldrb	r3, [r5, #0]
   13b34:	4393      	bics	r3, r2
   13b36:	2b58      	cmp	r3, #88	; 0x58
   13b38:	d112      	bne.n	13b60 <_strtoul_l.isra.0+0x134>
   13b3a:	2310      	movs	r3, #16
   13b3c:	786c      	ldrb	r4, [r5, #1]
   13b3e:	210f      	movs	r1, #15
   13b40:	3502      	adds	r5, #2
   13b42:	4f0b      	ldr	r7, [pc, #44]	; (13b70 <_strtoul_l.isra.0+0x144>)
   13b44:	4698      	mov	r8, r3
   13b46:	2610      	movs	r6, #16
   13b48:	e7a8      	b.n	13a9c <_strtoul_l.isra.0+0x70>
   13b4a:	2220      	movs	r2, #32
   13b4c:	782b      	ldrb	r3, [r5, #0]
   13b4e:	4393      	bics	r3, r2
   13b50:	2b58      	cmp	r3, #88	; 0x58
   13b52:	d0f2      	beq.n	13b3a <_strtoul_l.isra.0+0x10e>
   13b54:	2308      	movs	r3, #8
   13b56:	2107      	movs	r1, #7
   13b58:	4f06      	ldr	r7, [pc, #24]	; (13b74 <_strtoul_l.isra.0+0x148>)
   13b5a:	4698      	mov	r8, r3
   13b5c:	2608      	movs	r6, #8
   13b5e:	e79d      	b.n	13a9c <_strtoul_l.isra.0+0x70>
   13b60:	2310      	movs	r3, #16
   13b62:	210f      	movs	r1, #15
   13b64:	4f02      	ldr	r7, [pc, #8]	; (13b70 <_strtoul_l.isra.0+0x144>)
   13b66:	4698      	mov	r8, r3
   13b68:	e798      	b.n	13a9c <_strtoul_l.isra.0+0x70>
   13b6a:	46c0      	nop			; (mov r8, r8)
   13b6c:	19999999 	.word	0x19999999
   13b70:	0fffffff 	.word	0x0fffffff
   13b74:	1fffffff 	.word	0x1fffffff

00013b78 <_strtoul_r>:
   13b78:	b510      	push	{r4, lr}
   13b7a:	4c06      	ldr	r4, [pc, #24]	; (13b94 <_strtoul_r+0x1c>)
   13b7c:	b082      	sub	sp, #8
   13b7e:	6824      	ldr	r4, [r4, #0]
   13b80:	6b64      	ldr	r4, [r4, #52]	; 0x34
   13b82:	2c00      	cmp	r4, #0
   13b84:	d004      	beq.n	13b90 <_strtoul_r+0x18>
   13b86:	9400      	str	r4, [sp, #0]
   13b88:	f7ff ff50 	bl	13a2c <_strtoul_l.isra.0>
   13b8c:	b002      	add	sp, #8
   13b8e:	bd10      	pop	{r4, pc}
   13b90:	4c01      	ldr	r4, [pc, #4]	; (13b98 <_strtoul_r+0x20>)
   13b92:	e7f8      	b.n	13b86 <_strtoul_r+0xe>
   13b94:	20000088 	.word	0x20000088
   13b98:	200008cc 	.word	0x200008cc

00013b9c <_strtoull_l.isra.0>:
   13b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b9e:	46de      	mov	lr, fp
   13ba0:	4657      	mov	r7, sl
   13ba2:	464e      	mov	r6, r9
   13ba4:	4645      	mov	r5, r8
   13ba6:	b5e0      	push	{r5, r6, r7, lr}
   13ba8:	001e      	movs	r6, r3
   13baa:	2308      	movs	r3, #8
   13bac:	b087      	sub	sp, #28
   13bae:	9005      	str	r0, [sp, #20]
   13bb0:	9104      	str	r1, [sp, #16]
   13bb2:	4693      	mov	fp, r2
   13bb4:	000f      	movs	r7, r1
   13bb6:	4698      	mov	r8, r3
   13bb8:	e000      	b.n	13bbc <_strtoull_l.isra.0+0x20>
   13bba:	002f      	movs	r7, r5
   13bbc:	9810      	ldr	r0, [sp, #64]	; 0x40
   13bbe:	783c      	ldrb	r4, [r7, #0]
   13bc0:	f7fd fe88 	bl	118d4 <__locale_ctype_ptr_l>
   13bc4:	4642      	mov	r2, r8
   13bc6:	1900      	adds	r0, r0, r4
   13bc8:	7843      	ldrb	r3, [r0, #1]
   13bca:	1c7d      	adds	r5, r7, #1
   13bcc:	421a      	tst	r2, r3
   13bce:	d1f4      	bne.n	13bba <_strtoull_l.isra.0+0x1e>
   13bd0:	2c2d      	cmp	r4, #45	; 0x2d
   13bd2:	d100      	bne.n	13bd6 <_strtoull_l.isra.0+0x3a>
   13bd4:	e085      	b.n	13ce2 <_strtoull_l.isra.0+0x146>
   13bd6:	2300      	movs	r3, #0
   13bd8:	9303      	str	r3, [sp, #12]
   13bda:	2c2b      	cmp	r4, #43	; 0x2b
   13bdc:	d100      	bne.n	13be0 <_strtoull_l.isra.0+0x44>
   13bde:	e085      	b.n	13cec <_strtoull_l.isra.0+0x150>
   13be0:	2e00      	cmp	r6, #0
   13be2:	d016      	beq.n	13c12 <_strtoull_l.isra.0+0x76>
   13be4:	2e10      	cmp	r6, #16
   13be6:	d100      	bne.n	13bea <_strtoull_l.isra.0+0x4e>
   13be8:	e083      	b.n	13cf2 <_strtoull_l.isra.0+0x156>
   13bea:	17f3      	asrs	r3, r6, #31
   13bec:	0032      	movs	r2, r6
   13bee:	2001      	movs	r0, #1
   13bf0:	4240      	negs	r0, r0
   13bf2:	17c1      	asrs	r1, r0, #31
   13bf4:	4699      	mov	r9, r3
   13bf6:	f7f5 fc53 	bl	94a0 <__aeabi_uldivmod>
   13bfa:	0032      	movs	r2, r6
   13bfc:	4680      	mov	r8, r0
   13bfe:	000f      	movs	r7, r1
   13c00:	464b      	mov	r3, r9
   13c02:	2001      	movs	r0, #1
   13c04:	4240      	negs	r0, r0
   13c06:	17c1      	asrs	r1, r0, #31
   13c08:	f7f5 fc4a 	bl	94a0 <__aeabi_uldivmod>
   13c0c:	46b2      	mov	sl, r6
   13c0e:	9202      	str	r2, [sp, #8]
   13c10:	e00c      	b.n	13c2c <_strtoull_l.isra.0+0x90>
   13c12:	2c30      	cmp	r4, #48	; 0x30
   13c14:	d100      	bne.n	13c18 <_strtoull_l.isra.0+0x7c>
   13c16:	e080      	b.n	13d1a <_strtoull_l.isra.0+0x17e>
   13c18:	2305      	movs	r3, #5
   13c1a:	9302      	str	r3, [sp, #8]
   13c1c:	4b4c      	ldr	r3, [pc, #304]	; (13d50 <_strtoull_l.isra.0+0x1b4>)
   13c1e:	260a      	movs	r6, #10
   13c20:	4698      	mov	r8, r3
   13c22:	230a      	movs	r3, #10
   13c24:	469a      	mov	sl, r3
   13c26:	2300      	movs	r3, #0
   13c28:	4699      	mov	r9, r3
   13c2a:	4f4a      	ldr	r7, [pc, #296]	; (13d54 <_strtoull_l.isra.0+0x1b8>)
   13c2c:	2200      	movs	r2, #0
   13c2e:	2000      	movs	r0, #0
   13c30:	2100      	movs	r1, #0
   13c32:	e019      	b.n	13c68 <_strtoull_l.isra.0+0xcc>
   13c34:	001c      	movs	r4, r3
   13c36:	42a6      	cmp	r6, r4
   13c38:	dd21      	ble.n	13c7e <_strtoull_l.isra.0+0xe2>
   13c3a:	2a00      	cmp	r2, #0
   13c3c:	db3d      	blt.n	13cba <_strtoull_l.isra.0+0x11e>
   13c3e:	42b9      	cmp	r1, r7
   13c40:	d83b      	bhi.n	13cba <_strtoull_l.isra.0+0x11e>
   13c42:	d101      	bne.n	13c48 <_strtoull_l.isra.0+0xac>
   13c44:	4540      	cmp	r0, r8
   13c46:	d838      	bhi.n	13cba <_strtoull_l.isra.0+0x11e>
   13c48:	4540      	cmp	r0, r8
   13c4a:	d031      	beq.n	13cb0 <_strtoull_l.isra.0+0x114>
   13c4c:	4652      	mov	r2, sl
   13c4e:	464b      	mov	r3, r9
   13c50:	f7f5 fc46 	bl	94e0 <__aeabi_lmul>
   13c54:	17e3      	asrs	r3, r4, #31
   13c56:	9400      	str	r4, [sp, #0]
   13c58:	9301      	str	r3, [sp, #4]
   13c5a:	9b00      	ldr	r3, [sp, #0]
   13c5c:	9c01      	ldr	r4, [sp, #4]
   13c5e:	2201      	movs	r2, #1
   13c60:	18c0      	adds	r0, r0, r3
   13c62:	4161      	adcs	r1, r4
   13c64:	782c      	ldrb	r4, [r5, #0]
   13c66:	3501      	adds	r5, #1
   13c68:	0023      	movs	r3, r4
   13c6a:	3b30      	subs	r3, #48	; 0x30
   13c6c:	2b09      	cmp	r3, #9
   13c6e:	d9e1      	bls.n	13c34 <_strtoull_l.isra.0+0x98>
   13c70:	0023      	movs	r3, r4
   13c72:	3b41      	subs	r3, #65	; 0x41
   13c74:	2b19      	cmp	r3, #25
   13c76:	d823      	bhi.n	13cc0 <_strtoull_l.isra.0+0x124>
   13c78:	3c37      	subs	r4, #55	; 0x37
   13c7a:	42a6      	cmp	r6, r4
   13c7c:	dcdd      	bgt.n	13c3a <_strtoull_l.isra.0+0x9e>
   13c7e:	2a00      	cmp	r2, #0
   13c80:	db24      	blt.n	13ccc <_strtoull_l.isra.0+0x130>
   13c82:	9b03      	ldr	r3, [sp, #12]
   13c84:	2b00      	cmp	r3, #0
   13c86:	d004      	beq.n	13c92 <_strtoull_l.isra.0+0xf6>
   13c88:	0003      	movs	r3, r0
   13c8a:	000c      	movs	r4, r1
   13c8c:	2100      	movs	r1, #0
   13c8e:	4258      	negs	r0, r3
   13c90:	41a1      	sbcs	r1, r4
   13c92:	465b      	mov	r3, fp
   13c94:	2b00      	cmp	r3, #0
   13c96:	d004      	beq.n	13ca2 <_strtoull_l.isra.0+0x106>
   13c98:	9b04      	ldr	r3, [sp, #16]
   13c9a:	2a00      	cmp	r2, #0
   13c9c:	d11f      	bne.n	13cde <_strtoull_l.isra.0+0x142>
   13c9e:	465a      	mov	r2, fp
   13ca0:	6013      	str	r3, [r2, #0]
   13ca2:	b007      	add	sp, #28
   13ca4:	bc3c      	pop	{r2, r3, r4, r5}
   13ca6:	4690      	mov	r8, r2
   13ca8:	4699      	mov	r9, r3
   13caa:	46a2      	mov	sl, r4
   13cac:	46ab      	mov	fp, r5
   13cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cb0:	42b9      	cmp	r1, r7
   13cb2:	d1cb      	bne.n	13c4c <_strtoull_l.isra.0+0xb0>
   13cb4:	9b02      	ldr	r3, [sp, #8]
   13cb6:	429c      	cmp	r4, r3
   13cb8:	ddc8      	ble.n	13c4c <_strtoull_l.isra.0+0xb0>
   13cba:	2201      	movs	r2, #1
   13cbc:	4252      	negs	r2, r2
   13cbe:	e7d1      	b.n	13c64 <_strtoull_l.isra.0+0xc8>
   13cc0:	0023      	movs	r3, r4
   13cc2:	3b61      	subs	r3, #97	; 0x61
   13cc4:	2b19      	cmp	r3, #25
   13cc6:	d8da      	bhi.n	13c7e <_strtoull_l.isra.0+0xe2>
   13cc8:	3c57      	subs	r4, #87	; 0x57
   13cca:	e7b4      	b.n	13c36 <_strtoull_l.isra.0+0x9a>
   13ccc:	2322      	movs	r3, #34	; 0x22
   13cce:	9a05      	ldr	r2, [sp, #20]
   13cd0:	2001      	movs	r0, #1
   13cd2:	4240      	negs	r0, r0
   13cd4:	17c1      	asrs	r1, r0, #31
   13cd6:	6013      	str	r3, [r2, #0]
   13cd8:	465b      	mov	r3, fp
   13cda:	2b00      	cmp	r3, #0
   13cdc:	d0e1      	beq.n	13ca2 <_strtoull_l.isra.0+0x106>
   13cde:	1e6b      	subs	r3, r5, #1
   13ce0:	e7dd      	b.n	13c9e <_strtoull_l.isra.0+0x102>
   13ce2:	2301      	movs	r3, #1
   13ce4:	782c      	ldrb	r4, [r5, #0]
   13ce6:	9303      	str	r3, [sp, #12]
   13ce8:	1cbd      	adds	r5, r7, #2
   13cea:	e779      	b.n	13be0 <_strtoull_l.isra.0+0x44>
   13cec:	782c      	ldrb	r4, [r5, #0]
   13cee:	1cbd      	adds	r5, r7, #2
   13cf0:	e776      	b.n	13be0 <_strtoull_l.isra.0+0x44>
   13cf2:	2c30      	cmp	r4, #48	; 0x30
   13cf4:	d121      	bne.n	13d3a <_strtoull_l.isra.0+0x19e>
   13cf6:	2220      	movs	r2, #32
   13cf8:	782b      	ldrb	r3, [r5, #0]
   13cfa:	4393      	bics	r3, r2
   13cfc:	2b58      	cmp	r3, #88	; 0x58
   13cfe:	d11c      	bne.n	13d3a <_strtoull_l.isra.0+0x19e>
   13d00:	230f      	movs	r3, #15
   13d02:	9302      	str	r3, [sp, #8]
   13d04:	3b10      	subs	r3, #16
   13d06:	4698      	mov	r8, r3
   13d08:	3311      	adds	r3, #17
   13d0a:	469a      	mov	sl, r3
   13d0c:	2300      	movs	r3, #0
   13d0e:	786c      	ldrb	r4, [r5, #1]
   13d10:	4f11      	ldr	r7, [pc, #68]	; (13d58 <_strtoull_l.isra.0+0x1bc>)
   13d12:	3502      	adds	r5, #2
   13d14:	4699      	mov	r9, r3
   13d16:	2610      	movs	r6, #16
   13d18:	e788      	b.n	13c2c <_strtoull_l.isra.0+0x90>
   13d1a:	2220      	movs	r2, #32
   13d1c:	782b      	ldrb	r3, [r5, #0]
   13d1e:	4393      	bics	r3, r2
   13d20:	2b58      	cmp	r3, #88	; 0x58
   13d22:	d0ed      	beq.n	13d00 <_strtoull_l.isra.0+0x164>
   13d24:	2307      	movs	r3, #7
   13d26:	9302      	str	r3, [sp, #8]
   13d28:	3b08      	subs	r3, #8
   13d2a:	4698      	mov	r8, r3
   13d2c:	3309      	adds	r3, #9
   13d2e:	469a      	mov	sl, r3
   13d30:	2300      	movs	r3, #0
   13d32:	4f0a      	ldr	r7, [pc, #40]	; (13d5c <_strtoull_l.isra.0+0x1c0>)
   13d34:	4699      	mov	r9, r3
   13d36:	2608      	movs	r6, #8
   13d38:	e778      	b.n	13c2c <_strtoull_l.isra.0+0x90>
   13d3a:	230f      	movs	r3, #15
   13d3c:	9302      	str	r3, [sp, #8]
   13d3e:	3b10      	subs	r3, #16
   13d40:	4698      	mov	r8, r3
   13d42:	3311      	adds	r3, #17
   13d44:	469a      	mov	sl, r3
   13d46:	2300      	movs	r3, #0
   13d48:	4f03      	ldr	r7, [pc, #12]	; (13d58 <_strtoull_l.isra.0+0x1bc>)
   13d4a:	4699      	mov	r9, r3
   13d4c:	e76e      	b.n	13c2c <_strtoull_l.isra.0+0x90>
   13d4e:	46c0      	nop			; (mov r8, r8)
   13d50:	99999999 	.word	0x99999999
   13d54:	19999999 	.word	0x19999999
   13d58:	0fffffff 	.word	0x0fffffff
   13d5c:	1fffffff 	.word	0x1fffffff

00013d60 <_strtoull_r>:
   13d60:	b510      	push	{r4, lr}
   13d62:	4c06      	ldr	r4, [pc, #24]	; (13d7c <_strtoull_r+0x1c>)
   13d64:	b082      	sub	sp, #8
   13d66:	6824      	ldr	r4, [r4, #0]
   13d68:	6b64      	ldr	r4, [r4, #52]	; 0x34
   13d6a:	2c00      	cmp	r4, #0
   13d6c:	d004      	beq.n	13d78 <_strtoull_r+0x18>
   13d6e:	9400      	str	r4, [sp, #0]
   13d70:	f7ff ff14 	bl	13b9c <_strtoull_l.isra.0>
   13d74:	b002      	add	sp, #8
   13d76:	bd10      	pop	{r4, pc}
   13d78:	4c01      	ldr	r4, [pc, #4]	; (13d80 <_strtoull_r+0x20>)
   13d7a:	e7f8      	b.n	13d6e <_strtoull_r+0xe>
   13d7c:	20000088 	.word	0x20000088
   13d80:	200008cc 	.word	0x200008cc

00013d84 <__ssprint_r>:
   13d84:	b5f0      	push	{r4, r5, r6, r7, lr}
   13d86:	4657      	mov	r7, sl
   13d88:	464e      	mov	r6, r9
   13d8a:	46de      	mov	lr, fp
   13d8c:	4645      	mov	r5, r8
   13d8e:	b5e0      	push	{r5, r6, r7, lr}
   13d90:	6893      	ldr	r3, [r2, #8]
   13d92:	b083      	sub	sp, #12
   13d94:	9001      	str	r0, [sp, #4]
   13d96:	000e      	movs	r6, r1
   13d98:	4692      	mov	sl, r2
   13d9a:	2b00      	cmp	r3, #0
   13d9c:	d070      	beq.n	13e80 <__ssprint_r+0xfc>
   13d9e:	688d      	ldr	r5, [r1, #8]
   13da0:	6813      	ldr	r3, [r2, #0]
   13da2:	002c      	movs	r4, r5
   13da4:	6808      	ldr	r0, [r1, #0]
   13da6:	001d      	movs	r5, r3
   13da8:	e046      	b.n	13e38 <__ssprint_r+0xb4>
   13daa:	2290      	movs	r2, #144	; 0x90
   13dac:	89b3      	ldrh	r3, [r6, #12]
   13dae:	00d2      	lsls	r2, r2, #3
   13db0:	4213      	tst	r3, r2
   13db2:	d030      	beq.n	13e16 <__ssprint_r+0x92>
   13db4:	6931      	ldr	r1, [r6, #16]
   13db6:	1a42      	subs	r2, r0, r1
   13db8:	4693      	mov	fp, r2
   13dba:	6970      	ldr	r0, [r6, #20]
   13dbc:	0042      	lsls	r2, r0, #1
   13dbe:	1812      	adds	r2, r2, r0
   13dc0:	0fd0      	lsrs	r0, r2, #31
   13dc2:	1882      	adds	r2, r0, r2
   13dc4:	1052      	asrs	r2, r2, #1
   13dc6:	4690      	mov	r8, r2
   13dc8:	465a      	mov	r2, fp
   13dca:	1c50      	adds	r0, r2, #1
   13dcc:	19c0      	adds	r0, r0, r7
   13dce:	4642      	mov	r2, r8
   13dd0:	4540      	cmp	r0, r8
   13dd2:	d901      	bls.n	13dd8 <__ssprint_r+0x54>
   13dd4:	4680      	mov	r8, r0
   13dd6:	0002      	movs	r2, r0
   13dd8:	2080      	movs	r0, #128	; 0x80
   13dda:	00c0      	lsls	r0, r0, #3
   13ddc:	4203      	tst	r3, r0
   13dde:	d038      	beq.n	13e52 <__ssprint_r+0xce>
   13de0:	0011      	movs	r1, r2
   13de2:	9801      	ldr	r0, [sp, #4]
   13de4:	f7f7 f92e 	bl	b044 <_malloc_r>
   13de8:	1e04      	subs	r4, r0, #0
   13dea:	d054      	beq.n	13e96 <__ssprint_r+0x112>
   13dec:	465a      	mov	r2, fp
   13dee:	6931      	ldr	r1, [r6, #16]
   13df0:	f7f7 fc02 	bl	b5f8 <memcpy>
   13df4:	89b3      	ldrh	r3, [r6, #12]
   13df6:	4a2a      	ldr	r2, [pc, #168]	; (13ea0 <__ssprint_r+0x11c>)
   13df8:	4013      	ands	r3, r2
   13dfa:	2280      	movs	r2, #128	; 0x80
   13dfc:	4313      	orrs	r3, r2
   13dfe:	81b3      	strh	r3, [r6, #12]
   13e00:	4643      	mov	r3, r8
   13e02:	0020      	movs	r0, r4
   13e04:	465a      	mov	r2, fp
   13e06:	6134      	str	r4, [r6, #16]
   13e08:	46b8      	mov	r8, r7
   13e0a:	003c      	movs	r4, r7
   13e0c:	4458      	add	r0, fp
   13e0e:	6173      	str	r3, [r6, #20]
   13e10:	1a9b      	subs	r3, r3, r2
   13e12:	6030      	str	r0, [r6, #0]
   13e14:	60b3      	str	r3, [r6, #8]
   13e16:	4642      	mov	r2, r8
   13e18:	4649      	mov	r1, r9
   13e1a:	f7fd fe99 	bl	11b50 <memmove>
   13e1e:	68b3      	ldr	r3, [r6, #8]
   13e20:	1b1c      	subs	r4, r3, r4
   13e22:	6833      	ldr	r3, [r6, #0]
   13e24:	60b4      	str	r4, [r6, #8]
   13e26:	4443      	add	r3, r8
   13e28:	6033      	str	r3, [r6, #0]
   13e2a:	0018      	movs	r0, r3
   13e2c:	4653      	mov	r3, sl
   13e2e:	689b      	ldr	r3, [r3, #8]
   13e30:	1bdf      	subs	r7, r3, r7
   13e32:	4653      	mov	r3, sl
   13e34:	609f      	str	r7, [r3, #8]
   13e36:	d023      	beq.n	13e80 <__ssprint_r+0xfc>
   13e38:	686f      	ldr	r7, [r5, #4]
   13e3a:	002b      	movs	r3, r5
   13e3c:	3508      	adds	r5, #8
   13e3e:	2f00      	cmp	r7, #0
   13e40:	d0fa      	beq.n	13e38 <__ssprint_r+0xb4>
   13e42:	681b      	ldr	r3, [r3, #0]
   13e44:	46a0      	mov	r8, r4
   13e46:	4699      	mov	r9, r3
   13e48:	42a7      	cmp	r7, r4
   13e4a:	d2ae      	bcs.n	13daa <__ssprint_r+0x26>
   13e4c:	003c      	movs	r4, r7
   13e4e:	46b8      	mov	r8, r7
   13e50:	e7e1      	b.n	13e16 <__ssprint_r+0x92>
   13e52:	9801      	ldr	r0, [sp, #4]
   13e54:	f7fe fb8e 	bl	12574 <_realloc_r>
   13e58:	1e04      	subs	r4, r0, #0
   13e5a:	d1d1      	bne.n	13e00 <__ssprint_r+0x7c>
   13e5c:	9c01      	ldr	r4, [sp, #4]
   13e5e:	6931      	ldr	r1, [r6, #16]
   13e60:	0020      	movs	r0, r4
   13e62:	f7fd fa95 	bl	11390 <_free_r>
   13e66:	230c      	movs	r3, #12
   13e68:	6023      	str	r3, [r4, #0]
   13e6a:	2240      	movs	r2, #64	; 0x40
   13e6c:	89b3      	ldrh	r3, [r6, #12]
   13e6e:	2001      	movs	r0, #1
   13e70:	4313      	orrs	r3, r2
   13e72:	81b3      	strh	r3, [r6, #12]
   13e74:	4652      	mov	r2, sl
   13e76:	2300      	movs	r3, #0
   13e78:	4240      	negs	r0, r0
   13e7a:	6093      	str	r3, [r2, #8]
   13e7c:	6053      	str	r3, [r2, #4]
   13e7e:	e003      	b.n	13e88 <__ssprint_r+0x104>
   13e80:	2300      	movs	r3, #0
   13e82:	4652      	mov	r2, sl
   13e84:	2000      	movs	r0, #0
   13e86:	6053      	str	r3, [r2, #4]
   13e88:	b003      	add	sp, #12
   13e8a:	bc3c      	pop	{r2, r3, r4, r5}
   13e8c:	4690      	mov	r8, r2
   13e8e:	4699      	mov	r9, r3
   13e90:	46a2      	mov	sl, r4
   13e92:	46ab      	mov	fp, r5
   13e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13e96:	230c      	movs	r3, #12
   13e98:	9a01      	ldr	r2, [sp, #4]
   13e9a:	6013      	str	r3, [r2, #0]
   13e9c:	e7e5      	b.n	13e6a <__ssprint_r+0xe6>
   13e9e:	46c0      	nop			; (mov r8, r8)
   13ea0:	fffffb7f 	.word	0xfffffb7f

00013ea4 <_sungetc_r>:
   13ea4:	b570      	push	{r4, r5, r6, lr}
   13ea6:	0014      	movs	r4, r2
   13ea8:	1c4b      	adds	r3, r1, #1
   13eaa:	d01b      	beq.n	13ee4 <_sungetc_r+0x40>
   13eac:	8993      	ldrh	r3, [r2, #12]
   13eae:	2220      	movs	r2, #32
   13eb0:	25ff      	movs	r5, #255	; 0xff
   13eb2:	4393      	bics	r3, r2
   13eb4:	81a3      	strh	r3, [r4, #12]
   13eb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13eb8:	b2ce      	uxtb	r6, r1
   13eba:	400d      	ands	r5, r1
   13ebc:	2b00      	cmp	r3, #0
   13ebe:	d014      	beq.n	13eea <_sungetc_r+0x46>
   13ec0:	6863      	ldr	r3, [r4, #4]
   13ec2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   13ec4:	4293      	cmp	r3, r2
   13ec6:	da08      	bge.n	13eda <_sungetc_r+0x36>
   13ec8:	6823      	ldr	r3, [r4, #0]
   13eca:	3b01      	subs	r3, #1
   13ecc:	6023      	str	r3, [r4, #0]
   13ece:	701e      	strb	r6, [r3, #0]
   13ed0:	6863      	ldr	r3, [r4, #4]
   13ed2:	3301      	adds	r3, #1
   13ed4:	6063      	str	r3, [r4, #4]
   13ed6:	0028      	movs	r0, r5
   13ed8:	bd70      	pop	{r4, r5, r6, pc}
   13eda:	0021      	movs	r1, r4
   13edc:	f000 f88c 	bl	13ff8 <__submore>
   13ee0:	2800      	cmp	r0, #0
   13ee2:	d0f1      	beq.n	13ec8 <_sungetc_r+0x24>
   13ee4:	2501      	movs	r5, #1
   13ee6:	426d      	negs	r5, r5
   13ee8:	e7f5      	b.n	13ed6 <_sungetc_r+0x32>
   13eea:	6922      	ldr	r2, [r4, #16]
   13eec:	6823      	ldr	r3, [r4, #0]
   13eee:	2a00      	cmp	r2, #0
   13ef0:	d005      	beq.n	13efe <_sungetc_r+0x5a>
   13ef2:	429a      	cmp	r2, r3
   13ef4:	d203      	bcs.n	13efe <_sungetc_r+0x5a>
   13ef6:	1e5a      	subs	r2, r3, #1
   13ef8:	7811      	ldrb	r1, [r2, #0]
   13efa:	428d      	cmp	r5, r1
   13efc:	d00f      	beq.n	13f1e <_sungetc_r+0x7a>
   13efe:	63a3      	str	r3, [r4, #56]	; 0x38
   13f00:	0023      	movs	r3, r4
   13f02:	3340      	adds	r3, #64	; 0x40
   13f04:	6323      	str	r3, [r4, #48]	; 0x30
   13f06:	2303      	movs	r3, #3
   13f08:	6862      	ldr	r2, [r4, #4]
   13f0a:	6363      	str	r3, [r4, #52]	; 0x34
   13f0c:	333f      	adds	r3, #63	; 0x3f
   13f0e:	63e2      	str	r2, [r4, #60]	; 0x3c
   13f10:	54e6      	strb	r6, [r4, r3]
   13f12:	0023      	movs	r3, r4
   13f14:	3342      	adds	r3, #66	; 0x42
   13f16:	6023      	str	r3, [r4, #0]
   13f18:	2301      	movs	r3, #1
   13f1a:	6063      	str	r3, [r4, #4]
   13f1c:	e7db      	b.n	13ed6 <_sungetc_r+0x32>
   13f1e:	6863      	ldr	r3, [r4, #4]
   13f20:	6022      	str	r2, [r4, #0]
   13f22:	3301      	adds	r3, #1
   13f24:	6063      	str	r3, [r4, #4]
   13f26:	e7d6      	b.n	13ed6 <_sungetc_r+0x32>

00013f28 <__ssrefill_r>:
   13f28:	b510      	push	{r4, lr}
   13f2a:	000c      	movs	r4, r1
   13f2c:	6b09      	ldr	r1, [r1, #48]	; 0x30
   13f2e:	2900      	cmp	r1, #0
   13f30:	d00f      	beq.n	13f52 <__ssrefill_r+0x2a>
   13f32:	0023      	movs	r3, r4
   13f34:	3340      	adds	r3, #64	; 0x40
   13f36:	4299      	cmp	r1, r3
   13f38:	d001      	beq.n	13f3e <__ssrefill_r+0x16>
   13f3a:	f7fd fa29 	bl	11390 <_free_r>
   13f3e:	2300      	movs	r3, #0
   13f40:	6323      	str	r3, [r4, #48]	; 0x30
   13f42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13f44:	6063      	str	r3, [r4, #4]
   13f46:	2b00      	cmp	r3, #0
   13f48:	d003      	beq.n	13f52 <__ssrefill_r+0x2a>
   13f4a:	2000      	movs	r0, #0
   13f4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   13f4e:	6023      	str	r3, [r4, #0]
   13f50:	bd10      	pop	{r4, pc}
   13f52:	6923      	ldr	r3, [r4, #16]
   13f54:	2220      	movs	r2, #32
   13f56:	6023      	str	r3, [r4, #0]
   13f58:	2300      	movs	r3, #0
   13f5a:	2001      	movs	r0, #1
   13f5c:	6063      	str	r3, [r4, #4]
   13f5e:	89a3      	ldrh	r3, [r4, #12]
   13f60:	4240      	negs	r0, r0
   13f62:	4313      	orrs	r3, r2
   13f64:	81a3      	strh	r3, [r4, #12]
   13f66:	e7f3      	b.n	13f50 <__ssrefill_r+0x28>

00013f68 <_sfread_r>:
   13f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   13f6a:	46de      	mov	lr, fp
   13f6c:	4657      	mov	r7, sl
   13f6e:	4645      	mov	r5, r8
   13f70:	464e      	mov	r6, r9
   13f72:	469b      	mov	fp, r3
   13f74:	b5e0      	push	{r5, r6, r7, lr}
   13f76:	b083      	sub	sp, #12
   13f78:	0013      	movs	r3, r2
   13f7a:	9201      	str	r2, [sp, #4]
   13f7c:	465a      	mov	r2, fp
   13f7e:	4353      	muls	r3, r2
   13f80:	4680      	mov	r8, r0
   13f82:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   13f84:	469a      	mov	sl, r3
   13f86:	2b00      	cmp	r3, #0
   13f88:	d026      	beq.n	13fd8 <_sfread_r+0x70>
   13f8a:	001f      	movs	r7, r3
   13f8c:	2300      	movs	r3, #0
   13f8e:	000e      	movs	r6, r1
   13f90:	4699      	mov	r9, r3
   13f92:	e011      	b.n	13fb8 <_sfread_r+0x50>
   13f94:	6821      	ldr	r1, [r4, #0]
   13f96:	0030      	movs	r0, r6
   13f98:	002a      	movs	r2, r5
   13f9a:	f7f7 fb2d 	bl	b5f8 <memcpy>
   13f9e:	6823      	ldr	r3, [r4, #0]
   13fa0:	0021      	movs	r1, r4
   13fa2:	195b      	adds	r3, r3, r5
   13fa4:	6023      	str	r3, [r4, #0]
   13fa6:	464b      	mov	r3, r9
   13fa8:	4640      	mov	r0, r8
   13faa:	6063      	str	r3, [r4, #4]
   13fac:	1976      	adds	r6, r6, r5
   13fae:	1b7f      	subs	r7, r7, r5
   13fb0:	f7ff ffba 	bl	13f28 <__ssrefill_r>
   13fb4:	2800      	cmp	r0, #0
   13fb6:	d117      	bne.n	13fe8 <_sfread_r+0x80>
   13fb8:	6865      	ldr	r5, [r4, #4]
   13fba:	42af      	cmp	r7, r5
   13fbc:	d8ea      	bhi.n	13f94 <_sfread_r+0x2c>
   13fbe:	003a      	movs	r2, r7
   13fc0:	6821      	ldr	r1, [r4, #0]
   13fc2:	0030      	movs	r0, r6
   13fc4:	f7f7 fb18 	bl	b5f8 <memcpy>
   13fc8:	6863      	ldr	r3, [r4, #4]
   13fca:	46da      	mov	sl, fp
   13fcc:	1bdb      	subs	r3, r3, r7
   13fce:	6063      	str	r3, [r4, #4]
   13fd0:	6823      	ldr	r3, [r4, #0]
   13fd2:	469c      	mov	ip, r3
   13fd4:	4467      	add	r7, ip
   13fd6:	6027      	str	r7, [r4, #0]
   13fd8:	4650      	mov	r0, sl
   13fda:	b003      	add	sp, #12
   13fdc:	bc3c      	pop	{r2, r3, r4, r5}
   13fde:	4690      	mov	r8, r2
   13fe0:	4699      	mov	r9, r3
   13fe2:	46a2      	mov	sl, r4
   13fe4:	46ab      	mov	fp, r5
   13fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13fe8:	4653      	mov	r3, sl
   13fea:	9901      	ldr	r1, [sp, #4]
   13fec:	1bd8      	subs	r0, r3, r7
   13fee:	f7f5 f8e1 	bl	91b4 <__udivsi3>
   13ff2:	4682      	mov	sl, r0
   13ff4:	e7f0      	b.n	13fd8 <_sfread_r+0x70>
   13ff6:	46c0      	nop			; (mov r8, r8)

00013ff8 <__submore>:
   13ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ffa:	000c      	movs	r4, r1
   13ffc:	0023      	movs	r3, r4
   13ffe:	46c6      	mov	lr, r8
   14000:	6b09      	ldr	r1, [r1, #48]	; 0x30
   14002:	3340      	adds	r3, #64	; 0x40
   14004:	b500      	push	{lr}
   14006:	4299      	cmp	r1, r3
   14008:	d015      	beq.n	14036 <__submore+0x3e>
   1400a:	6b66      	ldr	r6, [r4, #52]	; 0x34
   1400c:	0077      	lsls	r7, r6, #1
   1400e:	003a      	movs	r2, r7
   14010:	f7fe fab0 	bl	12574 <_realloc_r>
   14014:	1e05      	subs	r5, r0, #0
   14016:	d028      	beq.n	1406a <__submore+0x72>
   14018:	1983      	adds	r3, r0, r6
   1401a:	4698      	mov	r8, r3
   1401c:	0001      	movs	r1, r0
   1401e:	0032      	movs	r2, r6
   14020:	0018      	movs	r0, r3
   14022:	f7f7 fae9 	bl	b5f8 <memcpy>
   14026:	4643      	mov	r3, r8
   14028:	2000      	movs	r0, #0
   1402a:	6023      	str	r3, [r4, #0]
   1402c:	6325      	str	r5, [r4, #48]	; 0x30
   1402e:	6367      	str	r7, [r4, #52]	; 0x34
   14030:	bc04      	pop	{r2}
   14032:	4690      	mov	r8, r2
   14034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14036:	2580      	movs	r5, #128	; 0x80
   14038:	00ed      	lsls	r5, r5, #3
   1403a:	0029      	movs	r1, r5
   1403c:	f7f7 f802 	bl	b044 <_malloc_r>
   14040:	2800      	cmp	r0, #0
   14042:	d012      	beq.n	1406a <__submore+0x72>
   14044:	2342      	movs	r3, #66	; 0x42
   14046:	6320      	str	r0, [r4, #48]	; 0x30
   14048:	6365      	str	r5, [r4, #52]	; 0x34
   1404a:	5ce2      	ldrb	r2, [r4, r3]
   1404c:	4b08      	ldr	r3, [pc, #32]	; (14070 <__submore+0x78>)
   1404e:	54c2      	strb	r2, [r0, r3]
   14050:	2341      	movs	r3, #65	; 0x41
   14052:	5ce2      	ldrb	r2, [r4, r3]
   14054:	4b07      	ldr	r3, [pc, #28]	; (14074 <__submore+0x7c>)
   14056:	54c2      	strb	r2, [r0, r3]
   14058:	2340      	movs	r3, #64	; 0x40
   1405a:	5ce2      	ldrb	r2, [r4, r3]
   1405c:	4b06      	ldr	r3, [pc, #24]	; (14078 <__submore+0x80>)
   1405e:	469c      	mov	ip, r3
   14060:	54c2      	strb	r2, [r0, r3]
   14062:	4460      	add	r0, ip
   14064:	6020      	str	r0, [r4, #0]
   14066:	2000      	movs	r0, #0
   14068:	e7e2      	b.n	14030 <__submore+0x38>
   1406a:	2001      	movs	r0, #1
   1406c:	4240      	negs	r0, r0
   1406e:	e7df      	b.n	14030 <__submore+0x38>
   14070:	000003ff 	.word	0x000003ff
   14074:	000003fe 	.word	0x000003fe
   14078:	000003fd 	.word	0x000003fd

0001407c <__sprint_r.part.0>:
   1407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1407e:	464e      	mov	r6, r9
   14080:	4645      	mov	r5, r8
   14082:	46de      	mov	lr, fp
   14084:	4657      	mov	r7, sl
   14086:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   14088:	b5e0      	push	{r5, r6, r7, lr}
   1408a:	4680      	mov	r8, r0
   1408c:	000e      	movs	r6, r1
   1408e:	4691      	mov	r9, r2
   14090:	049b      	lsls	r3, r3, #18
   14092:	d531      	bpl.n	140f8 <__sprint_r.part.0+0x7c>
   14094:	6813      	ldr	r3, [r2, #0]
   14096:	469a      	mov	sl, r3
   14098:	6893      	ldr	r3, [r2, #8]
   1409a:	2b00      	cmp	r3, #0
   1409c:	d02a      	beq.n	140f4 <__sprint_r.part.0+0x78>
   1409e:	4652      	mov	r2, sl
   140a0:	6852      	ldr	r2, [r2, #4]
   140a2:	2500      	movs	r5, #0
   140a4:	4693      	mov	fp, r2
   140a6:	0897      	lsrs	r7, r2, #2
   140a8:	4652      	mov	r2, sl
   140aa:	6814      	ldr	r4, [r2, #0]
   140ac:	d104      	bne.n	140b8 <__sprint_r.part.0+0x3c>
   140ae:	e016      	b.n	140de <__sprint_r.part.0+0x62>
   140b0:	3501      	adds	r5, #1
   140b2:	3404      	adds	r4, #4
   140b4:	42af      	cmp	r7, r5
   140b6:	d010      	beq.n	140da <__sprint_r.part.0+0x5e>
   140b8:	0032      	movs	r2, r6
   140ba:	6821      	ldr	r1, [r4, #0]
   140bc:	4640      	mov	r0, r8
   140be:	f000 f98f 	bl	143e0 <_fputwc_r>
   140c2:	1c43      	adds	r3, r0, #1
   140c4:	d1f4      	bne.n	140b0 <__sprint_r.part.0+0x34>
   140c6:	464a      	mov	r2, r9
   140c8:	2300      	movs	r3, #0
   140ca:	6093      	str	r3, [r2, #8]
   140cc:	6053      	str	r3, [r2, #4]
   140ce:	bc3c      	pop	{r2, r3, r4, r5}
   140d0:	4690      	mov	r8, r2
   140d2:	4699      	mov	r9, r3
   140d4:	46a2      	mov	sl, r4
   140d6:	46ab      	mov	fp, r5
   140d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   140da:	464b      	mov	r3, r9
   140dc:	689b      	ldr	r3, [r3, #8]
   140de:	465a      	mov	r2, fp
   140e0:	2103      	movs	r1, #3
   140e2:	438a      	bics	r2, r1
   140e4:	1a9b      	subs	r3, r3, r2
   140e6:	464a      	mov	r2, r9
   140e8:	6093      	str	r3, [r2, #8]
   140ea:	2208      	movs	r2, #8
   140ec:	4694      	mov	ip, r2
   140ee:	44e2      	add	sl, ip
   140f0:	2b00      	cmp	r3, #0
   140f2:	d1d4      	bne.n	1409e <__sprint_r.part.0+0x22>
   140f4:	2000      	movs	r0, #0
   140f6:	e7e6      	b.n	140c6 <__sprint_r.part.0+0x4a>
   140f8:	f7fd fa28 	bl	1154c <__sfvwrite_r>
   140fc:	e7e3      	b.n	140c6 <__sprint_r.part.0+0x4a>
   140fe:	46c0      	nop			; (mov r8, r8)

00014100 <__sprint_r>:
   14100:	6893      	ldr	r3, [r2, #8]
   14102:	b510      	push	{r4, lr}
   14104:	2b00      	cmp	r3, #0
   14106:	d002      	beq.n	1410e <__sprint_r+0xe>
   14108:	f7ff ffb8 	bl	1407c <__sprint_r.part.0>
   1410c:	bd10      	pop	{r4, pc}
   1410e:	6053      	str	r3, [r2, #4]
   14110:	2000      	movs	r0, #0
   14112:	e7fb      	b.n	1410c <__sprint_r+0xc>

00014114 <__ascii_wctomb>:
   14114:	2900      	cmp	r1, #0
   14116:	d004      	beq.n	14122 <__ascii_wctomb+0xe>
   14118:	2aff      	cmp	r2, #255	; 0xff
   1411a:	d804      	bhi.n	14126 <__ascii_wctomb+0x12>
   1411c:	2001      	movs	r0, #1
   1411e:	700a      	strb	r2, [r1, #0]
   14120:	4770      	bx	lr
   14122:	2000      	movs	r0, #0
   14124:	e7fc      	b.n	14120 <__ascii_wctomb+0xc>
   14126:	238a      	movs	r3, #138	; 0x8a
   14128:	6003      	str	r3, [r0, #0]
   1412a:	2001      	movs	r0, #1
   1412c:	4240      	negs	r0, r0
   1412e:	e7f7      	b.n	14120 <__ascii_wctomb+0xc>

00014130 <__register_exitproc>:
   14130:	b5f0      	push	{r4, r5, r6, r7, lr}
   14132:	464e      	mov	r6, r9
   14134:	4645      	mov	r5, r8
   14136:	46de      	mov	lr, fp
   14138:	4657      	mov	r7, sl
   1413a:	b5e0      	push	{r5, r6, r7, lr}
   1413c:	4d36      	ldr	r5, [pc, #216]	; (14218 <__register_exitproc+0xe8>)
   1413e:	b083      	sub	sp, #12
   14140:	0006      	movs	r6, r0
   14142:	6828      	ldr	r0, [r5, #0]
   14144:	4698      	mov	r8, r3
   14146:	000f      	movs	r7, r1
   14148:	4691      	mov	r9, r2
   1414a:	f7fd fbe9 	bl	11920 <__retarget_lock_acquire_recursive>
   1414e:	4b33      	ldr	r3, [pc, #204]	; (1421c <__register_exitproc+0xec>)
   14150:	681c      	ldr	r4, [r3, #0]
   14152:	23a4      	movs	r3, #164	; 0xa4
   14154:	005b      	lsls	r3, r3, #1
   14156:	58e0      	ldr	r0, [r4, r3]
   14158:	2800      	cmp	r0, #0
   1415a:	d052      	beq.n	14202 <__register_exitproc+0xd2>
   1415c:	6843      	ldr	r3, [r0, #4]
   1415e:	2b1f      	cmp	r3, #31
   14160:	dc13      	bgt.n	1418a <__register_exitproc+0x5a>
   14162:	1c5a      	adds	r2, r3, #1
   14164:	9201      	str	r2, [sp, #4]
   14166:	2e00      	cmp	r6, #0
   14168:	d128      	bne.n	141bc <__register_exitproc+0x8c>
   1416a:	9a01      	ldr	r2, [sp, #4]
   1416c:	3302      	adds	r3, #2
   1416e:	009b      	lsls	r3, r3, #2
   14170:	6042      	str	r2, [r0, #4]
   14172:	501f      	str	r7, [r3, r0]
   14174:	6828      	ldr	r0, [r5, #0]
   14176:	f7fd fbd5 	bl	11924 <__retarget_lock_release_recursive>
   1417a:	2000      	movs	r0, #0
   1417c:	b003      	add	sp, #12
   1417e:	bc3c      	pop	{r2, r3, r4, r5}
   14180:	4690      	mov	r8, r2
   14182:	4699      	mov	r9, r3
   14184:	46a2      	mov	sl, r4
   14186:	46ab      	mov	fp, r5
   14188:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1418a:	4b25      	ldr	r3, [pc, #148]	; (14220 <__register_exitproc+0xf0>)
   1418c:	2b00      	cmp	r3, #0
   1418e:	d03d      	beq.n	1420c <__register_exitproc+0xdc>
   14190:	20c8      	movs	r0, #200	; 0xc8
   14192:	0040      	lsls	r0, r0, #1
   14194:	f7f6 ff4c 	bl	b030 <malloc>
   14198:	2800      	cmp	r0, #0
   1419a:	d037      	beq.n	1420c <__register_exitproc+0xdc>
   1419c:	22a4      	movs	r2, #164	; 0xa4
   1419e:	2300      	movs	r3, #0
   141a0:	0052      	lsls	r2, r2, #1
   141a2:	58a1      	ldr	r1, [r4, r2]
   141a4:	6043      	str	r3, [r0, #4]
   141a6:	6001      	str	r1, [r0, #0]
   141a8:	50a0      	str	r0, [r4, r2]
   141aa:	3240      	adds	r2, #64	; 0x40
   141ac:	5083      	str	r3, [r0, r2]
   141ae:	3204      	adds	r2, #4
   141b0:	5083      	str	r3, [r0, r2]
   141b2:	3301      	adds	r3, #1
   141b4:	9301      	str	r3, [sp, #4]
   141b6:	2300      	movs	r3, #0
   141b8:	2e00      	cmp	r6, #0
   141ba:	d0d6      	beq.n	1416a <__register_exitproc+0x3a>
   141bc:	009a      	lsls	r2, r3, #2
   141be:	4692      	mov	sl, r2
   141c0:	4482      	add	sl, r0
   141c2:	464a      	mov	r2, r9
   141c4:	2188      	movs	r1, #136	; 0x88
   141c6:	4654      	mov	r4, sl
   141c8:	5062      	str	r2, [r4, r1]
   141ca:	22c4      	movs	r2, #196	; 0xc4
   141cc:	0052      	lsls	r2, r2, #1
   141ce:	4691      	mov	r9, r2
   141d0:	4481      	add	r9, r0
   141d2:	464a      	mov	r2, r9
   141d4:	3987      	subs	r1, #135	; 0x87
   141d6:	4099      	lsls	r1, r3
   141d8:	6812      	ldr	r2, [r2, #0]
   141da:	468b      	mov	fp, r1
   141dc:	430a      	orrs	r2, r1
   141de:	4694      	mov	ip, r2
   141e0:	464a      	mov	r2, r9
   141e2:	4661      	mov	r1, ip
   141e4:	6011      	str	r1, [r2, #0]
   141e6:	2284      	movs	r2, #132	; 0x84
   141e8:	4641      	mov	r1, r8
   141ea:	0052      	lsls	r2, r2, #1
   141ec:	50a1      	str	r1, [r4, r2]
   141ee:	2e02      	cmp	r6, #2
   141f0:	d1bb      	bne.n	1416a <__register_exitproc+0x3a>
   141f2:	0002      	movs	r2, r0
   141f4:	465c      	mov	r4, fp
   141f6:	328d      	adds	r2, #141	; 0x8d
   141f8:	32ff      	adds	r2, #255	; 0xff
   141fa:	6811      	ldr	r1, [r2, #0]
   141fc:	430c      	orrs	r4, r1
   141fe:	6014      	str	r4, [r2, #0]
   14200:	e7b3      	b.n	1416a <__register_exitproc+0x3a>
   14202:	0020      	movs	r0, r4
   14204:	304d      	adds	r0, #77	; 0x4d
   14206:	30ff      	adds	r0, #255	; 0xff
   14208:	50e0      	str	r0, [r4, r3]
   1420a:	e7a7      	b.n	1415c <__register_exitproc+0x2c>
   1420c:	6828      	ldr	r0, [r5, #0]
   1420e:	f7fd fb89 	bl	11924 <__retarget_lock_release_recursive>
   14212:	2001      	movs	r0, #1
   14214:	4240      	negs	r0, r0
   14216:	e7b1      	b.n	1417c <__register_exitproc+0x4c>
   14218:	200008c8 	.word	0x200008c8
   1421c:	00018b38 	.word	0x00018b38
   14220:	0000b031 	.word	0x0000b031

00014224 <_calloc_r>:
   14224:	b510      	push	{r4, lr}
   14226:	4351      	muls	r1, r2
   14228:	f7f6 ff0c 	bl	b044 <_malloc_r>
   1422c:	1e04      	subs	r4, r0, #0
   1422e:	d01c      	beq.n	1426a <_calloc_r+0x46>
   14230:	0003      	movs	r3, r0
   14232:	3b08      	subs	r3, #8
   14234:	685a      	ldr	r2, [r3, #4]
   14236:	2303      	movs	r3, #3
   14238:	439a      	bics	r2, r3
   1423a:	3a04      	subs	r2, #4
   1423c:	2a24      	cmp	r2, #36	; 0x24
   1423e:	d816      	bhi.n	1426e <_calloc_r+0x4a>
   14240:	0003      	movs	r3, r0
   14242:	2a13      	cmp	r2, #19
   14244:	d90d      	bls.n	14262 <_calloc_r+0x3e>
   14246:	2100      	movs	r1, #0
   14248:	3308      	adds	r3, #8
   1424a:	6001      	str	r1, [r0, #0]
   1424c:	6041      	str	r1, [r0, #4]
   1424e:	2a1b      	cmp	r2, #27
   14250:	d907      	bls.n	14262 <_calloc_r+0x3e>
   14252:	6081      	str	r1, [r0, #8]
   14254:	60c1      	str	r1, [r0, #12]
   14256:	2a24      	cmp	r2, #36	; 0x24
   14258:	d10d      	bne.n	14276 <_calloc_r+0x52>
   1425a:	0003      	movs	r3, r0
   1425c:	6101      	str	r1, [r0, #16]
   1425e:	3318      	adds	r3, #24
   14260:	6141      	str	r1, [r0, #20]
   14262:	2200      	movs	r2, #0
   14264:	601a      	str	r2, [r3, #0]
   14266:	605a      	str	r2, [r3, #4]
   14268:	609a      	str	r2, [r3, #8]
   1426a:	0020      	movs	r0, r4
   1426c:	bd10      	pop	{r4, pc}
   1426e:	2100      	movs	r1, #0
   14270:	f7f7 fa04 	bl	b67c <memset>
   14274:	e7f9      	b.n	1426a <_calloc_r+0x46>
   14276:	0003      	movs	r3, r0
   14278:	3310      	adds	r3, #16
   1427a:	e7f2      	b.n	14262 <_calloc_r+0x3e>

0001427c <_fclose_r>:
   1427c:	b570      	push	{r4, r5, r6, lr}
   1427e:	0005      	movs	r5, r0
   14280:	1e0c      	subs	r4, r1, #0
   14282:	d040      	beq.n	14306 <_fclose_r+0x8a>
   14284:	2800      	cmp	r0, #0
   14286:	d002      	beq.n	1428e <_fclose_r+0x12>
   14288:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1428a:	2b00      	cmp	r3, #0
   1428c:	d03e      	beq.n	1430c <_fclose_r+0x90>
   1428e:	2601      	movs	r6, #1
   14290:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14292:	4233      	tst	r3, r6
   14294:	d133      	bne.n	142fe <_fclose_r+0x82>
   14296:	89a3      	ldrh	r3, [r4, #12]
   14298:	059b      	lsls	r3, r3, #22
   1429a:	d543      	bpl.n	14324 <_fclose_r+0xa8>
   1429c:	0021      	movs	r1, r4
   1429e:	0028      	movs	r0, r5
   142a0:	f7fc feca 	bl	11038 <__sflush_r>
   142a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   142a6:	0006      	movs	r6, r0
   142a8:	2b00      	cmp	r3, #0
   142aa:	d004      	beq.n	142b6 <_fclose_r+0x3a>
   142ac:	69e1      	ldr	r1, [r4, #28]
   142ae:	0028      	movs	r0, r5
   142b0:	4798      	blx	r3
   142b2:	2800      	cmp	r0, #0
   142b4:	db44      	blt.n	14340 <_fclose_r+0xc4>
   142b6:	89a3      	ldrh	r3, [r4, #12]
   142b8:	061b      	lsls	r3, r3, #24
   142ba:	d42a      	bmi.n	14312 <_fclose_r+0x96>
   142bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   142be:	2900      	cmp	r1, #0
   142c0:	d008      	beq.n	142d4 <_fclose_r+0x58>
   142c2:	0023      	movs	r3, r4
   142c4:	3340      	adds	r3, #64	; 0x40
   142c6:	4299      	cmp	r1, r3
   142c8:	d002      	beq.n	142d0 <_fclose_r+0x54>
   142ca:	0028      	movs	r0, r5
   142cc:	f7fd f860 	bl	11390 <_free_r>
   142d0:	2300      	movs	r3, #0
   142d2:	6323      	str	r3, [r4, #48]	; 0x30
   142d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   142d6:	2900      	cmp	r1, #0
   142d8:	d004      	beq.n	142e4 <_fclose_r+0x68>
   142da:	0028      	movs	r0, r5
   142dc:	f7fd f858 	bl	11390 <_free_r>
   142e0:	2300      	movs	r3, #0
   142e2:	6463      	str	r3, [r4, #68]	; 0x44
   142e4:	f7fc ffda 	bl	1129c <__sfp_lock_acquire>
   142e8:	2300      	movs	r3, #0
   142ea:	81a3      	strh	r3, [r4, #12]
   142ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   142ee:	07db      	lsls	r3, r3, #31
   142f0:	d514      	bpl.n	1431c <_fclose_r+0xa0>
   142f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   142f4:	f7fd fb12 	bl	1191c <__retarget_lock_close_recursive>
   142f8:	f7fc ffd8 	bl	112ac <__sfp_lock_release>
   142fc:	e004      	b.n	14308 <_fclose_r+0x8c>
   142fe:	220c      	movs	r2, #12
   14300:	5ea3      	ldrsh	r3, [r4, r2]
   14302:	2b00      	cmp	r3, #0
   14304:	d1ca      	bne.n	1429c <_fclose_r+0x20>
   14306:	2600      	movs	r6, #0
   14308:	0030      	movs	r0, r6
   1430a:	bd70      	pop	{r4, r5, r6, pc}
   1430c:	f7fc ff96 	bl	1123c <__sinit>
   14310:	e7bd      	b.n	1428e <_fclose_r+0x12>
   14312:	6921      	ldr	r1, [r4, #16]
   14314:	0028      	movs	r0, r5
   14316:	f7fd f83b 	bl	11390 <_free_r>
   1431a:	e7cf      	b.n	142bc <_fclose_r+0x40>
   1431c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1431e:	f7fd fb01 	bl	11924 <__retarget_lock_release_recursive>
   14322:	e7e6      	b.n	142f2 <_fclose_r+0x76>
   14324:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14326:	f7fd fafb 	bl	11920 <__retarget_lock_acquire_recursive>
   1432a:	220c      	movs	r2, #12
   1432c:	5ea3      	ldrsh	r3, [r4, r2]
   1432e:	2b00      	cmp	r3, #0
   14330:	d1b4      	bne.n	1429c <_fclose_r+0x20>
   14332:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14334:	401e      	ands	r6, r3
   14336:	d1e6      	bne.n	14306 <_fclose_r+0x8a>
   14338:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1433a:	f7fd faf3 	bl	11924 <__retarget_lock_release_recursive>
   1433e:	e7e3      	b.n	14308 <_fclose_r+0x8c>
   14340:	2601      	movs	r6, #1
   14342:	4276      	negs	r6, r6
   14344:	e7b7      	b.n	142b6 <_fclose_r+0x3a>
   14346:	46c0      	nop			; (mov r8, r8)

00014348 <__fputwc>:
   14348:	b5f0      	push	{r4, r5, r6, r7, lr}
   1434a:	46ce      	mov	lr, r9
   1434c:	4647      	mov	r7, r8
   1434e:	b580      	push	{r7, lr}
   14350:	b085      	sub	sp, #20
   14352:	4680      	mov	r8, r0
   14354:	4689      	mov	r9, r1
   14356:	0014      	movs	r4, r2
   14358:	f7fd faac 	bl	118b4 <__locale_mb_cur_max>
   1435c:	2801      	cmp	r0, #1
   1435e:	d031      	beq.n	143c4 <__fputwc+0x7c>
   14360:	0023      	movs	r3, r4
   14362:	af03      	add	r7, sp, #12
   14364:	335c      	adds	r3, #92	; 0x5c
   14366:	464a      	mov	r2, r9
   14368:	0039      	movs	r1, r7
   1436a:	4640      	mov	r0, r8
   1436c:	f000 fcaa 	bl	14cc4 <_wcrtomb_r>
   14370:	0006      	movs	r6, r0
   14372:	1c43      	adds	r3, r0, #1
   14374:	d021      	beq.n	143ba <__fputwc+0x72>
   14376:	2800      	cmp	r0, #0
   14378:	d030      	beq.n	143dc <__fputwc+0x94>
   1437a:	7839      	ldrb	r1, [r7, #0]
   1437c:	2500      	movs	r5, #0
   1437e:	e007      	b.n	14390 <__fputwc+0x48>
   14380:	6823      	ldr	r3, [r4, #0]
   14382:	1c5a      	adds	r2, r3, #1
   14384:	6022      	str	r2, [r4, #0]
   14386:	7019      	strb	r1, [r3, #0]
   14388:	3501      	adds	r5, #1
   1438a:	42b5      	cmp	r5, r6
   1438c:	d226      	bcs.n	143dc <__fputwc+0x94>
   1438e:	5d79      	ldrb	r1, [r7, r5]
   14390:	68a3      	ldr	r3, [r4, #8]
   14392:	3b01      	subs	r3, #1
   14394:	60a3      	str	r3, [r4, #8]
   14396:	2b00      	cmp	r3, #0
   14398:	daf2      	bge.n	14380 <__fputwc+0x38>
   1439a:	69a2      	ldr	r2, [r4, #24]
   1439c:	4293      	cmp	r3, r2
   1439e:	db01      	blt.n	143a4 <__fputwc+0x5c>
   143a0:	290a      	cmp	r1, #10
   143a2:	d1ed      	bne.n	14380 <__fputwc+0x38>
   143a4:	0022      	movs	r2, r4
   143a6:	4640      	mov	r0, r8
   143a8:	f7fb fcd6 	bl	fd58 <__swbuf_r>
   143ac:	1c43      	adds	r3, r0, #1
   143ae:	d1eb      	bne.n	14388 <__fputwc+0x40>
   143b0:	b005      	add	sp, #20
   143b2:	bc0c      	pop	{r2, r3}
   143b4:	4690      	mov	r8, r2
   143b6:	4699      	mov	r9, r3
   143b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   143ba:	2240      	movs	r2, #64	; 0x40
   143bc:	89a3      	ldrh	r3, [r4, #12]
   143be:	4313      	orrs	r3, r2
   143c0:	81a3      	strh	r3, [r4, #12]
   143c2:	e7f5      	b.n	143b0 <__fputwc+0x68>
   143c4:	464b      	mov	r3, r9
   143c6:	3b01      	subs	r3, #1
   143c8:	2bfe      	cmp	r3, #254	; 0xfe
   143ca:	d8c9      	bhi.n	14360 <__fputwc+0x18>
   143cc:	466a      	mov	r2, sp
   143ce:	464b      	mov	r3, r9
   143d0:	71d3      	strb	r3, [r2, #7]
   143d2:	79d1      	ldrb	r1, [r2, #7]
   143d4:	af03      	add	r7, sp, #12
   143d6:	7039      	strb	r1, [r7, #0]
   143d8:	2601      	movs	r6, #1
   143da:	e7cf      	b.n	1437c <__fputwc+0x34>
   143dc:	4648      	mov	r0, r9
   143de:	e7e7      	b.n	143b0 <__fputwc+0x68>

000143e0 <_fputwc_r>:
   143e0:	6e53      	ldr	r3, [r2, #100]	; 0x64
   143e2:	b570      	push	{r4, r5, r6, lr}
   143e4:	0005      	movs	r5, r0
   143e6:	000e      	movs	r6, r1
   143e8:	0014      	movs	r4, r2
   143ea:	07db      	lsls	r3, r3, #31
   143ec:	d41e      	bmi.n	1442c <_fputwc_r+0x4c>
   143ee:	230c      	movs	r3, #12
   143f0:	5ed2      	ldrsh	r2, [r2, r3]
   143f2:	b291      	uxth	r1, r2
   143f4:	058b      	lsls	r3, r1, #22
   143f6:	d516      	bpl.n	14426 <_fputwc_r+0x46>
   143f8:	2380      	movs	r3, #128	; 0x80
   143fa:	019b      	lsls	r3, r3, #6
   143fc:	4219      	tst	r1, r3
   143fe:	d104      	bne.n	1440a <_fputwc_r+0x2a>
   14400:	431a      	orrs	r2, r3
   14402:	81a2      	strh	r2, [r4, #12]
   14404:	6e62      	ldr	r2, [r4, #100]	; 0x64
   14406:	4313      	orrs	r3, r2
   14408:	6663      	str	r3, [r4, #100]	; 0x64
   1440a:	0028      	movs	r0, r5
   1440c:	0022      	movs	r2, r4
   1440e:	0031      	movs	r1, r6
   14410:	f7ff ff9a 	bl	14348 <__fputwc>
   14414:	6e63      	ldr	r3, [r4, #100]	; 0x64
   14416:	0005      	movs	r5, r0
   14418:	07db      	lsls	r3, r3, #31
   1441a:	d402      	bmi.n	14422 <_fputwc_r+0x42>
   1441c:	89a3      	ldrh	r3, [r4, #12]
   1441e:	059b      	lsls	r3, r3, #22
   14420:	d508      	bpl.n	14434 <_fputwc_r+0x54>
   14422:	0028      	movs	r0, r5
   14424:	bd70      	pop	{r4, r5, r6, pc}
   14426:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14428:	f7fd fa7a 	bl	11920 <__retarget_lock_acquire_recursive>
   1442c:	230c      	movs	r3, #12
   1442e:	5ee2      	ldrsh	r2, [r4, r3]
   14430:	b291      	uxth	r1, r2
   14432:	e7e1      	b.n	143f8 <_fputwc_r+0x18>
   14434:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14436:	f7fd fa75 	bl	11924 <__retarget_lock_release_recursive>
   1443a:	e7f2      	b.n	14422 <_fputwc_r+0x42>

0001443c <_fstat_r>:
   1443c:	2300      	movs	r3, #0
   1443e:	b570      	push	{r4, r5, r6, lr}
   14440:	4c07      	ldr	r4, [pc, #28]	; (14460 <_fstat_r+0x24>)
   14442:	0005      	movs	r5, r0
   14444:	0008      	movs	r0, r1
   14446:	0011      	movs	r1, r2
   14448:	6023      	str	r3, [r4, #0]
   1444a:	f7ec fbab 	bl	ba4 <_fstat>
   1444e:	1c43      	adds	r3, r0, #1
   14450:	d000      	beq.n	14454 <_fstat_r+0x18>
   14452:	bd70      	pop	{r4, r5, r6, pc}
   14454:	6823      	ldr	r3, [r4, #0]
   14456:	2b00      	cmp	r3, #0
   14458:	d0fb      	beq.n	14452 <_fstat_r+0x16>
   1445a:	602b      	str	r3, [r5, #0]
   1445c:	e7f9      	b.n	14452 <_fstat_r+0x16>
   1445e:	46c0      	nop			; (mov r8, r8)
   14460:	200018fc 	.word	0x200018fc

00014464 <rshift>:
   14464:	b5f0      	push	{r4, r5, r6, r7, lr}
   14466:	46ce      	mov	lr, r9
   14468:	4647      	mov	r7, r8
   1446a:	0005      	movs	r5, r0
   1446c:	6902      	ldr	r2, [r0, #16]
   1446e:	b580      	push	{r7, lr}
   14470:	3514      	adds	r5, #20
   14472:	114c      	asrs	r4, r1, #5
   14474:	4294      	cmp	r4, r2
   14476:	da2c      	bge.n	144d2 <rshift+0x6e>
   14478:	0092      	lsls	r2, r2, #2
   1447a:	18af      	adds	r7, r5, r2
   1447c:	231f      	movs	r3, #31
   1447e:	00a2      	lsls	r2, r4, #2
   14480:	4691      	mov	r9, r2
   14482:	400b      	ands	r3, r1
   14484:	44a9      	add	r9, r5
   14486:	469c      	mov	ip, r3
   14488:	2b00      	cmp	r3, #0
   1448a:	d02a      	beq.n	144e2 <rshift+0x7e>
   1448c:	4662      	mov	r2, ip
   1448e:	2320      	movs	r3, #32
   14490:	1a9b      	subs	r3, r3, r2
   14492:	4698      	mov	r8, r3
   14494:	464b      	mov	r3, r9
   14496:	681e      	ldr	r6, [r3, #0]
   14498:	1d1c      	adds	r4, r3, #4
   1449a:	40d6      	lsrs	r6, r2
   1449c:	42a7      	cmp	r7, r4
   1449e:	d935      	bls.n	1450c <rshift+0xa8>
   144a0:	0029      	movs	r1, r5
   144a2:	4642      	mov	r2, r8
   144a4:	6823      	ldr	r3, [r4, #0]
   144a6:	4093      	lsls	r3, r2
   144a8:	4333      	orrs	r3, r6
   144aa:	c108      	stmia	r1!, {r3}
   144ac:	4663      	mov	r3, ip
   144ae:	cc40      	ldmia	r4!, {r6}
   144b0:	40de      	lsrs	r6, r3
   144b2:	42a7      	cmp	r7, r4
   144b4:	d8f5      	bhi.n	144a2 <rshift+0x3e>
   144b6:	464b      	mov	r3, r9
   144b8:	1afa      	subs	r2, r7, r3
   144ba:	2303      	movs	r3, #3
   144bc:	3a05      	subs	r2, #5
   144be:	439a      	bics	r2, r3
   144c0:	3204      	adds	r2, #4
   144c2:	18aa      	adds	r2, r5, r2
   144c4:	6016      	str	r6, [r2, #0]
   144c6:	2e00      	cmp	r6, #0
   144c8:	d01d      	beq.n	14506 <rshift+0xa2>
   144ca:	1d13      	adds	r3, r2, #4
   144cc:	1b5b      	subs	r3, r3, r5
   144ce:	109b      	asrs	r3, r3, #2
   144d0:	e015      	b.n	144fe <rshift+0x9a>
   144d2:	2300      	movs	r3, #0
   144d4:	6103      	str	r3, [r0, #16]
   144d6:	2300      	movs	r3, #0
   144d8:	6143      	str	r3, [r0, #20]
   144da:	bc0c      	pop	{r2, r3}
   144dc:	4690      	mov	r8, r2
   144de:	4699      	mov	r9, r3
   144e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   144e2:	4649      	mov	r1, r9
   144e4:	454f      	cmp	r7, r9
   144e6:	d9f4      	bls.n	144d2 <rshift+0x6e>
   144e8:	c910      	ldmia	r1!, {r4}
   144ea:	c510      	stmia	r5!, {r4}
   144ec:	428f      	cmp	r7, r1
   144ee:	d8fb      	bhi.n	144e8 <rshift+0x84>
   144f0:	464b      	mov	r3, r9
   144f2:	43db      	mvns	r3, r3
   144f4:	2203      	movs	r2, #3
   144f6:	19db      	adds	r3, r3, r7
   144f8:	4393      	bics	r3, r2
   144fa:	3304      	adds	r3, #4
   144fc:	109b      	asrs	r3, r3, #2
   144fe:	6103      	str	r3, [r0, #16]
   14500:	2b00      	cmp	r3, #0
   14502:	d1ea      	bne.n	144da <rshift+0x76>
   14504:	e7e7      	b.n	144d6 <rshift+0x72>
   14506:	1b53      	subs	r3, r2, r5
   14508:	109b      	asrs	r3, r3, #2
   1450a:	e7f8      	b.n	144fe <rshift+0x9a>
   1450c:	002a      	movs	r2, r5
   1450e:	e7d9      	b.n	144c4 <rshift+0x60>

00014510 <__gethex>:
   14510:	b5f0      	push	{r4, r5, r6, r7, lr}
   14512:	46de      	mov	lr, fp
   14514:	464e      	mov	r6, r9
   14516:	4657      	mov	r7, sl
   14518:	4645      	mov	r5, r8
   1451a:	b5e0      	push	{r5, r6, r7, lr}
   1451c:	b08b      	sub	sp, #44	; 0x2c
   1451e:	9006      	str	r0, [sp, #24]
   14520:	9816      	ldr	r0, [sp, #88]	; 0x58
   14522:	4689      	mov	r9, r1
   14524:	4693      	mov	fp, r2
   14526:	9309      	str	r3, [sp, #36]	; 0x24
   14528:	f7fd f9e6 	bl	118f8 <__localeconv_l>
   1452c:	6803      	ldr	r3, [r0, #0]
   1452e:	0018      	movs	r0, r3
   14530:	001c      	movs	r4, r3
   14532:	9304      	str	r3, [sp, #16]
   14534:	f7f7 fb32 	bl	bb9c <strlen>
   14538:	46a4      	mov	ip, r4
   1453a:	0002      	movs	r2, r0
   1453c:	4462      	add	r2, ip
   1453e:	0013      	movs	r3, r2
   14540:	3b01      	subs	r3, #1
   14542:	781b      	ldrb	r3, [r3, #0]
   14544:	9002      	str	r0, [sp, #8]
   14546:	9301      	str	r3, [sp, #4]
   14548:	464b      	mov	r3, r9
   1454a:	681c      	ldr	r4, [r3, #0]
   1454c:	78a2      	ldrb	r2, [r4, #2]
   1454e:	2a30      	cmp	r2, #48	; 0x30
   14550:	d000      	beq.n	14554 <__gethex+0x44>
   14552:	e1c4      	b.n	148de <__gethex+0x3ce>
   14554:	2102      	movs	r1, #2
   14556:	4249      	negs	r1, r1
   14558:	1ce3      	adds	r3, r4, #3
   1455a:	1b09      	subs	r1, r1, r4
   1455c:	18c8      	adds	r0, r1, r3
   1455e:	001c      	movs	r4, r3
   14560:	3301      	adds	r3, #1
   14562:	1e5a      	subs	r2, r3, #1
   14564:	7812      	ldrb	r2, [r2, #0]
   14566:	2a30      	cmp	r2, #48	; 0x30
   14568:	d0f8      	beq.n	1455c <__gethex+0x4c>
   1456a:	4680      	mov	r8, r0
   1456c:	4fbf      	ldr	r7, [pc, #764]	; (1486c <__gethex+0x35c>)
   1456e:	5cbb      	ldrb	r3, [r7, r2]
   14570:	2b00      	cmp	r3, #0
   14572:	d100      	bne.n	14576 <__gethex+0x66>
   14574:	e0b0      	b.n	146d8 <__gethex+0x1c8>
   14576:	2200      	movs	r2, #0
   14578:	2600      	movs	r6, #0
   1457a:	4692      	mov	sl, r2
   1457c:	7823      	ldrb	r3, [r4, #0]
   1457e:	5cfb      	ldrb	r3, [r7, r3]
   14580:	0025      	movs	r5, r4
   14582:	2b00      	cmp	r3, #0
   14584:	d004      	beq.n	14590 <__gethex+0x80>
   14586:	3501      	adds	r5, #1
   14588:	782b      	ldrb	r3, [r5, #0]
   1458a:	5cfb      	ldrb	r3, [r7, r3]
   1458c:	2b00      	cmp	r3, #0
   1458e:	d1fa      	bne.n	14586 <__gethex+0x76>
   14590:	9a02      	ldr	r2, [sp, #8]
   14592:	9904      	ldr	r1, [sp, #16]
   14594:	0028      	movs	r0, r5
   14596:	f000 fb4b 	bl	14c30 <strncmp>
   1459a:	2800      	cmp	r0, #0
   1459c:	d100      	bne.n	145a0 <__gethex+0x90>
   1459e:	e08b      	b.n	146b8 <__gethex+0x1a8>
   145a0:	782b      	ldrb	r3, [r5, #0]
   145a2:	2e00      	cmp	r6, #0
   145a4:	d100      	bne.n	145a8 <__gethex+0x98>
   145a6:	e189      	b.n	148bc <__gethex+0x3ac>
   145a8:	1b76      	subs	r6, r6, r5
   145aa:	00b2      	lsls	r2, r6, #2
   145ac:	9203      	str	r2, [sp, #12]
   145ae:	2b50      	cmp	r3, #80	; 0x50
   145b0:	d100      	bne.n	145b4 <__gethex+0xa4>
   145b2:	e0b4      	b.n	1471e <__gethex+0x20e>
   145b4:	002e      	movs	r6, r5
   145b6:	2b70      	cmp	r3, #112	; 0x70
   145b8:	d100      	bne.n	145bc <__gethex+0xac>
   145ba:	e0b0      	b.n	1471e <__gethex+0x20e>
   145bc:	464b      	mov	r3, r9
   145be:	601d      	str	r5, [r3, #0]
   145c0:	4653      	mov	r3, sl
   145c2:	2b00      	cmp	r3, #0
   145c4:	d000      	beq.n	145c8 <__gethex+0xb8>
   145c6:	e098      	b.n	146fa <__gethex+0x1ea>
   145c8:	1b33      	subs	r3, r6, r4
   145ca:	3b01      	subs	r3, #1
   145cc:	2100      	movs	r1, #0
   145ce:	2b07      	cmp	r3, #7
   145d0:	dd03      	ble.n	145da <__gethex+0xca>
   145d2:	3101      	adds	r1, #1
   145d4:	105b      	asrs	r3, r3, #1
   145d6:	2b07      	cmp	r3, #7
   145d8:	dcfb      	bgt.n	145d2 <__gethex+0xc2>
   145da:	9806      	ldr	r0, [sp, #24]
   145dc:	f7fd fb08 	bl	11bf0 <_Balloc>
   145e0:	0003      	movs	r3, r0
   145e2:	3314      	adds	r3, #20
   145e4:	9005      	str	r0, [sp, #20]
   145e6:	9308      	str	r3, [sp, #32]
   145e8:	42b4      	cmp	r4, r6
   145ea:	d300      	bcc.n	145ee <__gethex+0xde>
   145ec:	e1c3      	b.n	14976 <__gethex+0x466>
   145ee:	469a      	mov	sl, r3
   145f0:	2300      	movs	r3, #0
   145f2:	9a02      	ldr	r2, [sp, #8]
   145f4:	4698      	mov	r8, r3
   145f6:	4699      	mov	r9, r3
   145f8:	3301      	adds	r3, #1
   145fa:	1a9b      	subs	r3, r3, r2
   145fc:	9307      	str	r3, [sp, #28]
   145fe:	0023      	movs	r3, r4
   14600:	4644      	mov	r4, r8
   14602:	4698      	mov	r8, r3
   14604:	e00e      	b.n	14624 <__gethex+0x114>
   14606:	2c20      	cmp	r4, #32
   14608:	d05b      	beq.n	146c2 <__gethex+0x1b2>
   1460a:	0022      	movs	r2, r4
   1460c:	3404      	adds	r4, #4
   1460e:	210f      	movs	r1, #15
   14610:	782b      	ldrb	r3, [r5, #0]
   14612:	002e      	movs	r6, r5
   14614:	5cfb      	ldrb	r3, [r7, r3]
   14616:	400b      	ands	r3, r1
   14618:	4093      	lsls	r3, r2
   1461a:	464a      	mov	r2, r9
   1461c:	431a      	orrs	r2, r3
   1461e:	4691      	mov	r9, r2
   14620:	4546      	cmp	r6, r8
   14622:	d911      	bls.n	14648 <__gethex+0x138>
   14624:	1e75      	subs	r5, r6, #1
   14626:	782b      	ldrb	r3, [r5, #0]
   14628:	9a01      	ldr	r2, [sp, #4]
   1462a:	4293      	cmp	r3, r2
   1462c:	d1eb      	bne.n	14606 <__gethex+0xf6>
   1462e:	9b07      	ldr	r3, [sp, #28]
   14630:	18ee      	adds	r6, r5, r3
   14632:	4546      	cmp	r6, r8
   14634:	d3e7      	bcc.n	14606 <__gethex+0xf6>
   14636:	9a02      	ldr	r2, [sp, #8]
   14638:	9904      	ldr	r1, [sp, #16]
   1463a:	0030      	movs	r0, r6
   1463c:	f000 faf8 	bl	14c30 <strncmp>
   14640:	2800      	cmp	r0, #0
   14642:	d1e0      	bne.n	14606 <__gethex+0xf6>
   14644:	4546      	cmp	r6, r8
   14646:	d8ed      	bhi.n	14624 <__gethex+0x114>
   14648:	4653      	mov	r3, sl
   1464a:	464a      	mov	r2, r9
   1464c:	c304      	stmia	r3!, {r2}
   1464e:	9a08      	ldr	r2, [sp, #32]
   14650:	4648      	mov	r0, r9
   14652:	1a9b      	subs	r3, r3, r2
   14654:	9a05      	ldr	r2, [sp, #20]
   14656:	109b      	asrs	r3, r3, #2
   14658:	6113      	str	r3, [r2, #16]
   1465a:	015c      	lsls	r4, r3, #5
   1465c:	f7fd fb8a 	bl	11d74 <__hi0bits>
   14660:	465b      	mov	r3, fp
   14662:	681d      	ldr	r5, [r3, #0]
   14664:	1a24      	subs	r4, r4, r0
   14666:	42ac      	cmp	r4, r5
   14668:	dd00      	ble.n	1466c <__gethex+0x15c>
   1466a:	e101      	b.n	14870 <__gethex+0x360>
   1466c:	2600      	movs	r6, #0
   1466e:	42ac      	cmp	r4, r5
   14670:	da00      	bge.n	14674 <__gethex+0x164>
   14672:	e126      	b.n	148c2 <__gethex+0x3b2>
   14674:	465b      	mov	r3, fp
   14676:	9a03      	ldr	r2, [sp, #12]
   14678:	689b      	ldr	r3, [r3, #8]
   1467a:	429a      	cmp	r2, r3
   1467c:	dd00      	ble.n	14680 <__gethex+0x170>
   1467e:	e0ba      	b.n	147f6 <__gethex+0x2e6>
   14680:	465b      	mov	r3, fp
   14682:	9903      	ldr	r1, [sp, #12]
   14684:	685b      	ldr	r3, [r3, #4]
   14686:	4299      	cmp	r1, r3
   14688:	da00      	bge.n	1468c <__gethex+0x17c>
   1468a:	e0d5      	b.n	14838 <__gethex+0x328>
   1468c:	2401      	movs	r4, #1
   1468e:	2e00      	cmp	r6, #0
   14690:	d00b      	beq.n	146aa <__gethex+0x19a>
   14692:	465b      	mov	r3, fp
   14694:	68db      	ldr	r3, [r3, #12]
   14696:	2b02      	cmp	r3, #2
   14698:	d100      	bne.n	1469c <__gethex+0x18c>
   1469a:	e152      	b.n	14942 <__gethex+0x432>
   1469c:	2b03      	cmp	r3, #3
   1469e:	d100      	bne.n	146a2 <__gethex+0x192>
   146a0:	e153      	b.n	1494a <__gethex+0x43a>
   146a2:	2b01      	cmp	r3, #1
   146a4:	d069      	beq.n	1477a <__gethex+0x26a>
   146a6:	2310      	movs	r3, #16
   146a8:	431c      	orrs	r4, r3
   146aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   146ac:	9a05      	ldr	r2, [sp, #20]
   146ae:	601a      	str	r2, [r3, #0]
   146b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   146b2:	9a03      	ldr	r2, [sp, #12]
   146b4:	601a      	str	r2, [r3, #0]
   146b6:	e026      	b.n	14706 <__gethex+0x1f6>
   146b8:	2e00      	cmp	r6, #0
   146ba:	d100      	bne.n	146be <__gethex+0x1ae>
   146bc:	e133      	b.n	14926 <__gethex+0x416>
   146be:	782b      	ldrb	r3, [r5, #0]
   146c0:	e772      	b.n	145a8 <__gethex+0x98>
   146c2:	4653      	mov	r3, sl
   146c4:	464a      	mov	r2, r9
   146c6:	601a      	str	r2, [r3, #0]
   146c8:	2304      	movs	r3, #4
   146ca:	469c      	mov	ip, r3
   146cc:	2300      	movs	r3, #0
   146ce:	44e2      	add	sl, ip
   146d0:	2200      	movs	r2, #0
   146d2:	2404      	movs	r4, #4
   146d4:	4699      	mov	r9, r3
   146d6:	e79a      	b.n	1460e <__gethex+0xfe>
   146d8:	9d02      	ldr	r5, [sp, #8]
   146da:	9904      	ldr	r1, [sp, #16]
   146dc:	002a      	movs	r2, r5
   146de:	0020      	movs	r0, r4
   146e0:	f000 faa6 	bl	14c30 <strncmp>
   146e4:	2800      	cmp	r0, #0
   146e6:	d100      	bne.n	146ea <__gethex+0x1da>
   146e8:	e091      	b.n	1480e <__gethex+0x2fe>
   146ea:	0025      	movs	r5, r4
   146ec:	7822      	ldrb	r2, [r4, #0]
   146ee:	2a50      	cmp	r2, #80	; 0x50
   146f0:	d011      	beq.n	14716 <__gethex+0x206>
   146f2:	2a70      	cmp	r2, #112	; 0x70
   146f4:	d00f      	beq.n	14716 <__gethex+0x206>
   146f6:	464b      	mov	r3, r9
   146f8:	601d      	str	r5, [r3, #0]
   146fa:	4643      	mov	r3, r8
   146fc:	425a      	negs	r2, r3
   146fe:	4153      	adcs	r3, r2
   14700:	2406      	movs	r4, #6
   14702:	425b      	negs	r3, r3
   14704:	401c      	ands	r4, r3
   14706:	0020      	movs	r0, r4
   14708:	b00b      	add	sp, #44	; 0x2c
   1470a:	bc3c      	pop	{r2, r3, r4, r5}
   1470c:	4690      	mov	r8, r2
   1470e:	4699      	mov	r9, r3
   14710:	46a2      	mov	sl, r4
   14712:	46ab      	mov	fp, r5
   14714:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14716:	2300      	movs	r3, #0
   14718:	9303      	str	r3, [sp, #12]
   1471a:	3301      	adds	r3, #1
   1471c:	469a      	mov	sl, r3
   1471e:	786b      	ldrb	r3, [r5, #1]
   14720:	2b2b      	cmp	r3, #43	; 0x2b
   14722:	d100      	bne.n	14726 <__gethex+0x216>
   14724:	e09f      	b.n	14866 <__gethex+0x356>
   14726:	2101      	movs	r1, #1
   14728:	2b2d      	cmp	r3, #45	; 0x2d
   1472a:	d16d      	bne.n	14808 <__gethex+0x2f8>
   1472c:	78ab      	ldrb	r3, [r5, #2]
   1472e:	1ca8      	adds	r0, r5, #2
   14730:	5cfb      	ldrb	r3, [r7, r3]
   14732:	002e      	movs	r6, r5
   14734:	1e5a      	subs	r2, r3, #1
   14736:	2a18      	cmp	r2, #24
   14738:	d900      	bls.n	1473c <__gethex+0x22c>
   1473a:	e73f      	b.n	145bc <__gethex+0xac>
   1473c:	1c42      	adds	r2, r0, #1
   1473e:	7840      	ldrb	r0, [r0, #1]
   14740:	3b10      	subs	r3, #16
   14742:	5c38      	ldrb	r0, [r7, r0]
   14744:	1e46      	subs	r6, r0, #1
   14746:	2e18      	cmp	r6, #24
   14748:	d80c      	bhi.n	14764 <__gethex+0x254>
   1474a:	0006      	movs	r6, r0
   1474c:	0098      	lsls	r0, r3, #2
   1474e:	18c0      	adds	r0, r0, r3
   14750:	0040      	lsls	r0, r0, #1
   14752:	1980      	adds	r0, r0, r6
   14754:	0003      	movs	r3, r0
   14756:	3201      	adds	r2, #1
   14758:	7810      	ldrb	r0, [r2, #0]
   1475a:	3b10      	subs	r3, #16
   1475c:	5c3e      	ldrb	r6, [r7, r0]
   1475e:	1e70      	subs	r0, r6, #1
   14760:	2818      	cmp	r0, #24
   14762:	d9f3      	bls.n	1474c <__gethex+0x23c>
   14764:	2900      	cmp	r1, #0
   14766:	d000      	beq.n	1476a <__gethex+0x25a>
   14768:	425b      	negs	r3, r3
   1476a:	9903      	ldr	r1, [sp, #12]
   1476c:	002e      	movs	r6, r5
   1476e:	468c      	mov	ip, r1
   14770:	449c      	add	ip, r3
   14772:	4663      	mov	r3, ip
   14774:	0015      	movs	r5, r2
   14776:	9303      	str	r3, [sp, #12]
   14778:	e720      	b.n	145bc <__gethex+0xac>
   1477a:	07b2      	lsls	r2, r6, #30
   1477c:	d593      	bpl.n	146a6 <__gethex+0x196>
   1477e:	9a08      	ldr	r2, [sp, #32]
   14780:	6812      	ldr	r2, [r2, #0]
   14782:	4316      	orrs	r6, r2
   14784:	9201      	str	r2, [sp, #4]
   14786:	4233      	tst	r3, r6
   14788:	d100      	bne.n	1478c <__gethex+0x27c>
   1478a:	e78c      	b.n	146a6 <__gethex+0x196>
   1478c:	9b05      	ldr	r3, [sp, #20]
   1478e:	691f      	ldr	r7, [r3, #16]
   14790:	9b08      	ldr	r3, [sp, #32]
   14792:	00b9      	lsls	r1, r7, #2
   14794:	4688      	mov	r8, r1
   14796:	001a      	movs	r2, r3
   14798:	4442      	add	r2, r8
   1479a:	0016      	movs	r6, r2
   1479c:	2100      	movs	r1, #0
   1479e:	469c      	mov	ip, r3
   147a0:	e003      	b.n	147aa <__gethex+0x29a>
   147a2:	c302      	stmia	r3!, {r1}
   147a4:	429e      	cmp	r6, r3
   147a6:	d800      	bhi.n	147aa <__gethex+0x29a>
   147a8:	e0ff      	b.n	149aa <__gethex+0x49a>
   147aa:	681a      	ldr	r2, [r3, #0]
   147ac:	1c50      	adds	r0, r2, #1
   147ae:	d0f8      	beq.n	147a2 <__gethex+0x292>
   147b0:	3201      	adds	r2, #1
   147b2:	4660      	mov	r0, ip
   147b4:	601a      	str	r2, [r3, #0]
   147b6:	2c02      	cmp	r4, #2
   147b8:	d100      	bne.n	147bc <__gethex+0x2ac>
   147ba:	e10c      	b.n	149d6 <__gethex+0x4c6>
   147bc:	231f      	movs	r3, #31
   147be:	2421      	movs	r4, #33	; 0x21
   147c0:	401d      	ands	r5, r3
   147c2:	d100      	bne.n	147c6 <__gethex+0x2b6>
   147c4:	e771      	b.n	146aa <__gethex+0x19a>
   147c6:	4440      	add	r0, r8
   147c8:	3804      	subs	r0, #4
   147ca:	6800      	ldr	r0, [r0, #0]
   147cc:	f7fd fad2 	bl	11d74 <__hi0bits>
   147d0:	2320      	movs	r3, #32
   147d2:	1b5d      	subs	r5, r3, r5
   147d4:	42a8      	cmp	r0, r5
   147d6:	db00      	blt.n	147da <__gethex+0x2ca>
   147d8:	e767      	b.n	146aa <__gethex+0x19a>
   147da:	2101      	movs	r1, #1
   147dc:	9805      	ldr	r0, [sp, #20]
   147de:	f7ff fe41 	bl	14464 <rshift>
   147e2:	9b03      	ldr	r3, [sp, #12]
   147e4:	2421      	movs	r4, #33	; 0x21
   147e6:	3301      	adds	r3, #1
   147e8:	001a      	movs	r2, r3
   147ea:	9303      	str	r3, [sp, #12]
   147ec:	465b      	mov	r3, fp
   147ee:	689b      	ldr	r3, [r3, #8]
   147f0:	429a      	cmp	r2, r3
   147f2:	dc00      	bgt.n	147f6 <__gethex+0x2e6>
   147f4:	e759      	b.n	146aa <__gethex+0x19a>
   147f6:	9905      	ldr	r1, [sp, #20]
   147f8:	9806      	ldr	r0, [sp, #24]
   147fa:	f7fd fa21 	bl	11c40 <_Bfree>
   147fe:	2300      	movs	r3, #0
   14800:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14802:	24a3      	movs	r4, #163	; 0xa3
   14804:	6013      	str	r3, [r2, #0]
   14806:	e77e      	b.n	14706 <__gethex+0x1f6>
   14808:	1c68      	adds	r0, r5, #1
   1480a:	2100      	movs	r1, #0
   1480c:	e790      	b.n	14730 <__gethex+0x220>
   1480e:	1965      	adds	r5, r4, r5
   14810:	782a      	ldrb	r2, [r5, #0]
   14812:	5cbb      	ldrb	r3, [r7, r2]
   14814:	2b00      	cmp	r3, #0
   14816:	d100      	bne.n	1481a <__gethex+0x30a>
   14818:	e769      	b.n	146ee <__gethex+0x1de>
   1481a:	002c      	movs	r4, r5
   1481c:	2a30      	cmp	r2, #48	; 0x30
   1481e:	d104      	bne.n	1482a <__gethex+0x31a>
   14820:	3401      	adds	r4, #1
   14822:	7823      	ldrb	r3, [r4, #0]
   14824:	2b30      	cmp	r3, #48	; 0x30
   14826:	d0fb      	beq.n	14820 <__gethex+0x310>
   14828:	5cfb      	ldrb	r3, [r7, r3]
   1482a:	4259      	negs	r1, r3
   1482c:	4159      	adcs	r1, r3
   1482e:	2201      	movs	r2, #1
   14830:	468a      	mov	sl, r1
   14832:	002e      	movs	r6, r5
   14834:	4690      	mov	r8, r2
   14836:	e6a3      	b.n	14580 <__gethex+0x70>
   14838:	1a5c      	subs	r4, r3, r1
   1483a:	42a5      	cmp	r5, r4
   1483c:	dc53      	bgt.n	148e6 <__gethex+0x3d6>
   1483e:	465a      	mov	r2, fp
   14840:	68d2      	ldr	r2, [r2, #12]
   14842:	2a02      	cmp	r2, #2
   14844:	d100      	bne.n	14848 <__gethex+0x338>
   14846:	e0ac      	b.n	149a2 <__gethex+0x492>
   14848:	2a03      	cmp	r2, #3
   1484a:	d100      	bne.n	1484e <__gethex+0x33e>
   1484c:	e084      	b.n	14958 <__gethex+0x448>
   1484e:	2a01      	cmp	r2, #1
   14850:	d100      	bne.n	14854 <__gethex+0x344>
   14852:	e097      	b.n	14984 <__gethex+0x474>
   14854:	9905      	ldr	r1, [sp, #20]
   14856:	9806      	ldr	r0, [sp, #24]
   14858:	f7fd f9f2 	bl	11c40 <_Bfree>
   1485c:	2300      	movs	r3, #0
   1485e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14860:	2450      	movs	r4, #80	; 0x50
   14862:	6013      	str	r3, [r2, #0]
   14864:	e74f      	b.n	14706 <__gethex+0x1f6>
   14866:	2100      	movs	r1, #0
   14868:	e760      	b.n	1472c <__gethex+0x21c>
   1486a:	46c0      	nop			; (mov r8, r8)
   1486c:	00019664 	.word	0x00019664
   14870:	1b64      	subs	r4, r4, r5
   14872:	0021      	movs	r1, r4
   14874:	9805      	ldr	r0, [sp, #20]
   14876:	f7fd fe39 	bl	124ec <__any_on>
   1487a:	1e06      	subs	r6, r0, #0
   1487c:	d014      	beq.n	148a8 <__gethex+0x398>
   1487e:	211f      	movs	r1, #31
   14880:	2301      	movs	r3, #1
   14882:	1e60      	subs	r0, r4, #1
   14884:	4001      	ands	r1, r0
   14886:	408b      	lsls	r3, r1
   14888:	1142      	asrs	r2, r0, #5
   1488a:	9908      	ldr	r1, [sp, #32]
   1488c:	0092      	lsls	r2, r2, #2
   1488e:	588a      	ldr	r2, [r1, r2]
   14890:	2601      	movs	r6, #1
   14892:	421a      	tst	r2, r3
   14894:	d008      	beq.n	148a8 <__gethex+0x398>
   14896:	2801      	cmp	r0, #1
   14898:	dd72      	ble.n	14980 <__gethex+0x470>
   1489a:	1ea1      	subs	r1, r4, #2
   1489c:	9805      	ldr	r0, [sp, #20]
   1489e:	f7fd fe25 	bl	124ec <__any_on>
   148a2:	2800      	cmp	r0, #0
   148a4:	d06c      	beq.n	14980 <__gethex+0x470>
   148a6:	2603      	movs	r6, #3
   148a8:	0021      	movs	r1, r4
   148aa:	9805      	ldr	r0, [sp, #20]
   148ac:	f7ff fdda 	bl	14464 <rshift>
   148b0:	9b03      	ldr	r3, [sp, #12]
   148b2:	469c      	mov	ip, r3
   148b4:	44a4      	add	ip, r4
   148b6:	4663      	mov	r3, ip
   148b8:	9303      	str	r3, [sp, #12]
   148ba:	e6db      	b.n	14674 <__gethex+0x164>
   148bc:	2200      	movs	r2, #0
   148be:	9203      	str	r2, [sp, #12]
   148c0:	e675      	b.n	145ae <__gethex+0x9e>
   148c2:	1b2c      	subs	r4, r5, r4
   148c4:	0022      	movs	r2, r4
   148c6:	9905      	ldr	r1, [sp, #20]
   148c8:	9806      	ldr	r0, [sp, #24]
   148ca:	f7fd fbaf 	bl	1202c <__lshift>
   148ce:	0003      	movs	r3, r0
   148d0:	9a03      	ldr	r2, [sp, #12]
   148d2:	3314      	adds	r3, #20
   148d4:	1b12      	subs	r2, r2, r4
   148d6:	9005      	str	r0, [sp, #20]
   148d8:	9203      	str	r2, [sp, #12]
   148da:	9308      	str	r3, [sp, #32]
   148dc:	e6ca      	b.n	14674 <__gethex+0x164>
   148de:	2300      	movs	r3, #0
   148e0:	3402      	adds	r4, #2
   148e2:	4698      	mov	r8, r3
   148e4:	e642      	b.n	1456c <__gethex+0x5c>
   148e6:	1e67      	subs	r7, r4, #1
   148e8:	2e00      	cmp	r6, #0
   148ea:	d133      	bne.n	14954 <__gethex+0x444>
   148ec:	2f00      	cmp	r7, #0
   148ee:	d004      	beq.n	148fa <__gethex+0x3ea>
   148f0:	0039      	movs	r1, r7
   148f2:	9805      	ldr	r0, [sp, #20]
   148f4:	f7fd fdfa 	bl	124ec <__any_on>
   148f8:	0006      	movs	r6, r0
   148fa:	231f      	movs	r3, #31
   148fc:	117a      	asrs	r2, r7, #5
   148fe:	401f      	ands	r7, r3
   14900:	3b1e      	subs	r3, #30
   14902:	40bb      	lsls	r3, r7
   14904:	9908      	ldr	r1, [sp, #32]
   14906:	0092      	lsls	r2, r2, #2
   14908:	588a      	ldr	r2, [r1, r2]
   1490a:	421a      	tst	r2, r3
   1490c:	d001      	beq.n	14912 <__gethex+0x402>
   1490e:	2302      	movs	r3, #2
   14910:	431e      	orrs	r6, r3
   14912:	0021      	movs	r1, r4
   14914:	9805      	ldr	r0, [sp, #20]
   14916:	f7ff fda5 	bl	14464 <rshift>
   1491a:	465b      	mov	r3, fp
   1491c:	685b      	ldr	r3, [r3, #4]
   1491e:	1b2d      	subs	r5, r5, r4
   14920:	9303      	str	r3, [sp, #12]
   14922:	2402      	movs	r4, #2
   14924:	e6b3      	b.n	1468e <__gethex+0x17e>
   14926:	9b02      	ldr	r3, [sp, #8]
   14928:	18ee      	adds	r6, r5, r3
   1492a:	7833      	ldrb	r3, [r6, #0]
   1492c:	0035      	movs	r5, r6
   1492e:	5cfa      	ldrb	r2, [r7, r3]
   14930:	2a00      	cmp	r2, #0
   14932:	d100      	bne.n	14936 <__gethex+0x426>
   14934:	e638      	b.n	145a8 <__gethex+0x98>
   14936:	3501      	adds	r5, #1
   14938:	782b      	ldrb	r3, [r5, #0]
   1493a:	5cfa      	ldrb	r2, [r7, r3]
   1493c:	2a00      	cmp	r2, #0
   1493e:	d1fa      	bne.n	14936 <__gethex+0x426>
   14940:	e632      	b.n	145a8 <__gethex+0x98>
   14942:	2301      	movs	r3, #1
   14944:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14946:	1a9b      	subs	r3, r3, r2
   14948:	9315      	str	r3, [sp, #84]	; 0x54
   1494a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1494c:	2b00      	cmp	r3, #0
   1494e:	d100      	bne.n	14952 <__gethex+0x442>
   14950:	e6a9      	b.n	146a6 <__gethex+0x196>
   14952:	e71b      	b.n	1478c <__gethex+0x27c>
   14954:	2601      	movs	r6, #1
   14956:	e7d0      	b.n	148fa <__gethex+0x3ea>
   14958:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1495a:	2a00      	cmp	r2, #0
   1495c:	d100      	bne.n	14960 <__gethex+0x450>
   1495e:	e779      	b.n	14854 <__gethex+0x344>
   14960:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14962:	9908      	ldr	r1, [sp, #32]
   14964:	6013      	str	r3, [r2, #0]
   14966:	2301      	movs	r3, #1
   14968:	9a05      	ldr	r2, [sp, #20]
   1496a:	2462      	movs	r4, #98	; 0x62
   1496c:	6113      	str	r3, [r2, #16]
   1496e:	600b      	str	r3, [r1, #0]
   14970:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14972:	601a      	str	r2, [r3, #0]
   14974:	e6c7      	b.n	14706 <__gethex+0x1f6>
   14976:	9b08      	ldr	r3, [sp, #32]
   14978:	469a      	mov	sl, r3
   1497a:	2300      	movs	r3, #0
   1497c:	4699      	mov	r9, r3
   1497e:	e663      	b.n	14648 <__gethex+0x138>
   14980:	2602      	movs	r6, #2
   14982:	e791      	b.n	148a8 <__gethex+0x398>
   14984:	42a5      	cmp	r5, r4
   14986:	d000      	beq.n	1498a <__gethex+0x47a>
   14988:	e764      	b.n	14854 <__gethex+0x344>
   1498a:	2d01      	cmp	r5, #1
   1498c:	dde8      	ble.n	14960 <__gethex+0x450>
   1498e:	1e69      	subs	r1, r5, #1
   14990:	9805      	ldr	r0, [sp, #20]
   14992:	f7fd fdab 	bl	124ec <__any_on>
   14996:	2800      	cmp	r0, #0
   14998:	d100      	bne.n	1499c <__gethex+0x48c>
   1499a:	e75b      	b.n	14854 <__gethex+0x344>
   1499c:	465b      	mov	r3, fp
   1499e:	685b      	ldr	r3, [r3, #4]
   149a0:	e7de      	b.n	14960 <__gethex+0x450>
   149a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   149a4:	2a00      	cmp	r2, #0
   149a6:	d0db      	beq.n	14960 <__gethex+0x450>
   149a8:	e754      	b.n	14854 <__gethex+0x344>
   149aa:	9b05      	ldr	r3, [sp, #20]
   149ac:	689b      	ldr	r3, [r3, #8]
   149ae:	9301      	str	r3, [sp, #4]
   149b0:	429f      	cmp	r7, r3
   149b2:	da23      	bge.n	149fc <__gethex+0x4ec>
   149b4:	003b      	movs	r3, r7
   149b6:	9808      	ldr	r0, [sp, #32]
   149b8:	9905      	ldr	r1, [sp, #20]
   149ba:	1c5a      	adds	r2, r3, #1
   149bc:	468c      	mov	ip, r1
   149be:	610a      	str	r2, [r1, #16]
   149c0:	2101      	movs	r1, #1
   149c2:	3304      	adds	r3, #4
   149c4:	009b      	lsls	r3, r3, #2
   149c6:	4463      	add	r3, ip
   149c8:	6059      	str	r1, [r3, #4]
   149ca:	2c02      	cmp	r4, #2
   149cc:	d003      	beq.n	149d6 <__gethex+0x4c6>
   149ce:	4297      	cmp	r7, r2
   149d0:	da00      	bge.n	149d4 <__gethex+0x4c4>
   149d2:	e702      	b.n	147da <__gethex+0x2ca>
   149d4:	e6f2      	b.n	147bc <__gethex+0x2ac>
   149d6:	465b      	mov	r3, fp
   149d8:	681b      	ldr	r3, [r3, #0]
   149da:	2422      	movs	r4, #34	; 0x22
   149dc:	3b01      	subs	r3, #1
   149de:	429d      	cmp	r5, r3
   149e0:	d000      	beq.n	149e4 <__gethex+0x4d4>
   149e2:	e662      	b.n	146aa <__gethex+0x19a>
   149e4:	231f      	movs	r3, #31
   149e6:	116a      	asrs	r2, r5, #5
   149e8:	401d      	ands	r5, r3
   149ea:	3b1e      	subs	r3, #30
   149ec:	40ab      	lsls	r3, r5
   149ee:	0092      	lsls	r2, r2, #2
   149f0:	5814      	ldr	r4, [r2, r0]
   149f2:	4023      	ands	r3, r4
   149f4:	425c      	negs	r4, r3
   149f6:	415c      	adcs	r4, r3
   149f8:	3421      	adds	r4, #33	; 0x21
   149fa:	e656      	b.n	146aa <__gethex+0x19a>
   149fc:	9b05      	ldr	r3, [sp, #20]
   149fe:	685a      	ldr	r2, [r3, #4]
   14a00:	9b06      	ldr	r3, [sp, #24]
   14a02:	1c51      	adds	r1, r2, #1
   14a04:	0018      	movs	r0, r3
   14a06:	4699      	mov	r9, r3
   14a08:	9201      	str	r2, [sp, #4]
   14a0a:	f7fd f8f1 	bl	11bf0 <_Balloc>
   14a0e:	0006      	movs	r6, r0
   14a10:	9b05      	ldr	r3, [sp, #20]
   14a12:	300c      	adds	r0, #12
   14a14:	691a      	ldr	r2, [r3, #16]
   14a16:	330c      	adds	r3, #12
   14a18:	9201      	str	r2, [sp, #4]
   14a1a:	3202      	adds	r2, #2
   14a1c:	0019      	movs	r1, r3
   14a1e:	0092      	lsls	r2, r2, #2
   14a20:	f7f6 fdea 	bl	b5f8 <memcpy>
   14a24:	4648      	mov	r0, r9
   14a26:	9905      	ldr	r1, [sp, #20]
   14a28:	f7fd f90a 	bl	11c40 <_Bfree>
   14a2c:	0030      	movs	r0, r6
   14a2e:	6933      	ldr	r3, [r6, #16]
   14a30:	3014      	adds	r0, #20
   14a32:	9605      	str	r6, [sp, #20]
   14a34:	e7c0      	b.n	149b8 <__gethex+0x4a8>
   14a36:	46c0      	nop			; (mov r8, r8)

00014a38 <__match>:
   14a38:	b530      	push	{r4, r5, lr}
   14a3a:	6802      	ldr	r2, [r0, #0]
   14a3c:	e008      	b.n	14a50 <__match+0x18>
   14a3e:	7813      	ldrb	r3, [r2, #0]
   14a40:	001d      	movs	r5, r3
   14a42:	3d41      	subs	r5, #65	; 0x41
   14a44:	2d19      	cmp	r5, #25
   14a46:	d800      	bhi.n	14a4a <__match+0x12>
   14a48:	3320      	adds	r3, #32
   14a4a:	3101      	adds	r1, #1
   14a4c:	42a3      	cmp	r3, r4
   14a4e:	d106      	bne.n	14a5e <__match+0x26>
   14a50:	780c      	ldrb	r4, [r1, #0]
   14a52:	3201      	adds	r2, #1
   14a54:	2c00      	cmp	r4, #0
   14a56:	d1f2      	bne.n	14a3e <__match+0x6>
   14a58:	6002      	str	r2, [r0, #0]
   14a5a:	2001      	movs	r0, #1
   14a5c:	bd30      	pop	{r4, r5, pc}
   14a5e:	2000      	movs	r0, #0
   14a60:	e7fc      	b.n	14a5c <__match+0x24>
   14a62:	46c0      	nop			; (mov r8, r8)

00014a64 <__hexnan>:
   14a64:	b5f0      	push	{r4, r5, r6, r7, lr}
   14a66:	4657      	mov	r7, sl
   14a68:	46de      	mov	lr, fp
   14a6a:	464e      	mov	r6, r9
   14a6c:	4645      	mov	r5, r8
   14a6e:	4692      	mov	sl, r2
   14a70:	680a      	ldr	r2, [r1, #0]
   14a72:	211f      	movs	r1, #31
   14a74:	b5e0      	push	{r5, r6, r7, lr}
   14a76:	1153      	asrs	r3, r2, #5
   14a78:	b085      	sub	sp, #20
   14a7a:	009b      	lsls	r3, r3, #2
   14a7c:	4011      	ands	r1, r2
   14a7e:	9001      	str	r0, [sp, #4]
   14a80:	4453      	add	r3, sl
   14a82:	9103      	str	r1, [sp, #12]
   14a84:	2900      	cmp	r1, #0
   14a86:	d000      	beq.n	14a8a <__hexnan+0x26>
   14a88:	3304      	adds	r3, #4
   14a8a:	3b04      	subs	r3, #4
   14a8c:	469b      	mov	fp, r3
   14a8e:	2300      	movs	r3, #0
   14a90:	465a      	mov	r2, fp
   14a92:	6013      	str	r3, [r2, #0]
   14a94:	9b01      	ldr	r3, [sp, #4]
   14a96:	465c      	mov	r4, fp
   14a98:	6818      	ldr	r0, [r3, #0]
   14a9a:	2300      	movs	r3, #0
   14a9c:	7841      	ldrb	r1, [r0, #1]
   14a9e:	9300      	str	r3, [sp, #0]
   14aa0:	4b59      	ldr	r3, [pc, #356]	; (14c08 <__hexnan+0x1a4>)
   14aa2:	46d8      	mov	r8, fp
   14aa4:	2500      	movs	r5, #0
   14aa6:	2200      	movs	r2, #0
   14aa8:	4699      	mov	r9, r3
   14aaa:	9402      	str	r4, [sp, #8]
   14aac:	1c46      	adds	r6, r0, #1
   14aae:	2900      	cmp	r1, #0
   14ab0:	d036      	beq.n	14b20 <__hexnan+0xbc>
   14ab2:	464b      	mov	r3, r9
   14ab4:	5c5b      	ldrb	r3, [r3, r1]
   14ab6:	2b00      	cmp	r3, #0
   14ab8:	d158      	bne.n	14b6c <__hexnan+0x108>
   14aba:	2920      	cmp	r1, #32
   14abc:	d868      	bhi.n	14b90 <__hexnan+0x12c>
   14abe:	9b00      	ldr	r3, [sp, #0]
   14ac0:	429a      	cmp	r2, r3
   14ac2:	dd28      	ble.n	14b16 <__hexnan+0xb2>
   14ac4:	4544      	cmp	r4, r8
   14ac6:	d21c      	bcs.n	14b02 <__hexnan+0x9e>
   14ac8:	2d07      	cmp	r5, #7
   14aca:	dc1a      	bgt.n	14b02 <__hexnan+0x9e>
   14acc:	2308      	movs	r3, #8
   14ace:	1b5d      	subs	r5, r3, r5
   14ad0:	00ad      	lsls	r5, r5, #2
   14ad2:	3318      	adds	r3, #24
   14ad4:	1b5b      	subs	r3, r3, r5
   14ad6:	469c      	mov	ip, r3
   14ad8:	4661      	mov	r1, ip
   14ada:	6823      	ldr	r3, [r4, #0]
   14adc:	0020      	movs	r0, r4
   14ade:	4647      	mov	r7, r8
   14ae0:	4694      	mov	ip, r2
   14ae2:	46a0      	mov	r8, r4
   14ae4:	000a      	movs	r2, r1
   14ae6:	001c      	movs	r4, r3
   14ae8:	6841      	ldr	r1, [r0, #4]
   14aea:	000b      	movs	r3, r1
   14aec:	4093      	lsls	r3, r2
   14aee:	40e9      	lsrs	r1, r5
   14af0:	4323      	orrs	r3, r4
   14af2:	c008      	stmia	r0!, {r3}
   14af4:	000c      	movs	r4, r1
   14af6:	6001      	str	r1, [r0, #0]
   14af8:	4287      	cmp	r7, r0
   14afa:	d8f5      	bhi.n	14ae8 <__hexnan+0x84>
   14afc:	4644      	mov	r4, r8
   14afe:	4662      	mov	r2, ip
   14b00:	46b8      	mov	r8, r7
   14b02:	2508      	movs	r5, #8
   14b04:	4554      	cmp	r4, sl
   14b06:	d906      	bls.n	14b16 <__hexnan+0xb2>
   14b08:	1f23      	subs	r3, r4, #4
   14b0a:	2100      	movs	r1, #0
   14b0c:	4698      	mov	r8, r3
   14b0e:	001c      	movs	r4, r3
   14b10:	2500      	movs	r5, #0
   14b12:	6019      	str	r1, [r3, #0]
   14b14:	9200      	str	r2, [sp, #0]
   14b16:	0030      	movs	r0, r6
   14b18:	7841      	ldrb	r1, [r0, #1]
   14b1a:	1c46      	adds	r6, r0, #1
   14b1c:	2900      	cmp	r1, #0
   14b1e:	d1c8      	bne.n	14ab2 <__hexnan+0x4e>
   14b20:	9b02      	ldr	r3, [sp, #8]
   14b22:	469c      	mov	ip, r3
   14b24:	2a00      	cmp	r2, #0
   14b26:	d037      	beq.n	14b98 <__hexnan+0x134>
   14b28:	4544      	cmp	r4, r8
   14b2a:	d201      	bcs.n	14b30 <__hexnan+0xcc>
   14b2c:	2d07      	cmp	r5, #7
   14b2e:	dd57      	ble.n	14be0 <__hexnan+0x17c>
   14b30:	4554      	cmp	r4, sl
   14b32:	d939      	bls.n	14ba8 <__hexnan+0x144>
   14b34:	4653      	mov	r3, sl
   14b36:	4659      	mov	r1, fp
   14b38:	cc04      	ldmia	r4!, {r2}
   14b3a:	601a      	str	r2, [r3, #0]
   14b3c:	3304      	adds	r3, #4
   14b3e:	42a1      	cmp	r1, r4
   14b40:	d2fa      	bcs.n	14b38 <__hexnan+0xd4>
   14b42:	2200      	movs	r2, #0
   14b44:	c304      	stmia	r3!, {r2}
   14b46:	4299      	cmp	r1, r3
   14b48:	d2fc      	bcs.n	14b44 <__hexnan+0xe0>
   14b4a:	468b      	mov	fp, r1
   14b4c:	680b      	ldr	r3, [r1, #0]
   14b4e:	2b00      	cmp	r3, #0
   14b50:	d10a      	bne.n	14b68 <__hexnan+0x104>
   14b52:	4663      	mov	r3, ip
   14b54:	4652      	mov	r2, sl
   14b56:	45da      	cmp	sl, fp
   14b58:	d102      	bne.n	14b60 <__hexnan+0xfc>
   14b5a:	e035      	b.n	14bc8 <__hexnan+0x164>
   14b5c:	429a      	cmp	r2, r3
   14b5e:	d032      	beq.n	14bc6 <__hexnan+0x162>
   14b60:	3b04      	subs	r3, #4
   14b62:	6819      	ldr	r1, [r3, #0]
   14b64:	2900      	cmp	r1, #0
   14b66:	d0f9      	beq.n	14b5c <__hexnan+0xf8>
   14b68:	2005      	movs	r0, #5
   14b6a:	e016      	b.n	14b9a <__hexnan+0x136>
   14b6c:	3501      	adds	r5, #1
   14b6e:	3201      	adds	r2, #1
   14b70:	2d08      	cmp	r5, #8
   14b72:	dd05      	ble.n	14b80 <__hexnan+0x11c>
   14b74:	4554      	cmp	r4, sl
   14b76:	d9ce      	bls.n	14b16 <__hexnan+0xb2>
   14b78:	2100      	movs	r1, #0
   14b7a:	2501      	movs	r5, #1
   14b7c:	3c04      	subs	r4, #4
   14b7e:	6021      	str	r1, [r4, #0]
   14b80:	200f      	movs	r0, #15
   14b82:	6821      	ldr	r1, [r4, #0]
   14b84:	4003      	ands	r3, r0
   14b86:	0109      	lsls	r1, r1, #4
   14b88:	430b      	orrs	r3, r1
   14b8a:	6023      	str	r3, [r4, #0]
   14b8c:	0030      	movs	r0, r6
   14b8e:	e7c3      	b.n	14b18 <__hexnan+0xb4>
   14b90:	9b02      	ldr	r3, [sp, #8]
   14b92:	469c      	mov	ip, r3
   14b94:	2929      	cmp	r1, #41	; 0x29
   14b96:	d01f      	beq.n	14bd8 <__hexnan+0x174>
   14b98:	2004      	movs	r0, #4
   14b9a:	b005      	add	sp, #20
   14b9c:	bc3c      	pop	{r2, r3, r4, r5}
   14b9e:	4690      	mov	r8, r2
   14ba0:	4699      	mov	r9, r3
   14ba2:	46a2      	mov	sl, r4
   14ba4:	46ab      	mov	fp, r5
   14ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ba8:	9b03      	ldr	r3, [sp, #12]
   14baa:	2b00      	cmp	r3, #0
   14bac:	d011      	beq.n	14bd2 <__hexnan+0x16e>
   14bae:	2220      	movs	r2, #32
   14bb0:	9b03      	ldr	r3, [sp, #12]
   14bb2:	1ad2      	subs	r2, r2, r3
   14bb4:	2301      	movs	r3, #1
   14bb6:	425b      	negs	r3, r3
   14bb8:	40d3      	lsrs	r3, r2
   14bba:	465a      	mov	r2, fp
   14bbc:	6812      	ldr	r2, [r2, #0]
   14bbe:	4013      	ands	r3, r2
   14bc0:	465a      	mov	r2, fp
   14bc2:	6013      	str	r3, [r2, #0]
   14bc4:	e7c3      	b.n	14b4e <__hexnan+0xea>
   14bc6:	4692      	mov	sl, r2
   14bc8:	2301      	movs	r3, #1
   14bca:	4652      	mov	r2, sl
   14bcc:	2005      	movs	r0, #5
   14bce:	6013      	str	r3, [r2, #0]
   14bd0:	e7e3      	b.n	14b9a <__hexnan+0x136>
   14bd2:	465b      	mov	r3, fp
   14bd4:	681b      	ldr	r3, [r3, #0]
   14bd6:	e7ba      	b.n	14b4e <__hexnan+0xea>
   14bd8:	9b01      	ldr	r3, [sp, #4]
   14bda:	3002      	adds	r0, #2
   14bdc:	6018      	str	r0, [r3, #0]
   14bde:	e7a1      	b.n	14b24 <__hexnan+0xc0>
   14be0:	2308      	movs	r3, #8
   14be2:	1b5d      	subs	r5, r3, r5
   14be4:	6823      	ldr	r3, [r4, #0]
   14be6:	2620      	movs	r6, #32
   14be8:	0021      	movs	r1, r4
   14bea:	4647      	mov	r7, r8
   14bec:	001a      	movs	r2, r3
   14bee:	00ad      	lsls	r5, r5, #2
   14bf0:	1b76      	subs	r6, r6, r5
   14bf2:	6848      	ldr	r0, [r1, #4]
   14bf4:	0003      	movs	r3, r0
   14bf6:	40b3      	lsls	r3, r6
   14bf8:	4313      	orrs	r3, r2
   14bfa:	0002      	movs	r2, r0
   14bfc:	40ea      	lsrs	r2, r5
   14bfe:	c108      	stmia	r1!, {r3}
   14c00:	600a      	str	r2, [r1, #0]
   14c02:	428f      	cmp	r7, r1
   14c04:	d8f5      	bhi.n	14bf2 <__hexnan+0x18e>
   14c06:	e793      	b.n	14b30 <__hexnan+0xcc>
   14c08:	00019664 	.word	0x00019664

00014c0c <_isatty_r>:
   14c0c:	2300      	movs	r3, #0
   14c0e:	b570      	push	{r4, r5, r6, lr}
   14c10:	4c06      	ldr	r4, [pc, #24]	; (14c2c <_isatty_r+0x20>)
   14c12:	0005      	movs	r5, r0
   14c14:	0008      	movs	r0, r1
   14c16:	6023      	str	r3, [r4, #0]
   14c18:	f7eb ffca 	bl	bb0 <_isatty>
   14c1c:	1c43      	adds	r3, r0, #1
   14c1e:	d000      	beq.n	14c22 <_isatty_r+0x16>
   14c20:	bd70      	pop	{r4, r5, r6, pc}
   14c22:	6823      	ldr	r3, [r4, #0]
   14c24:	2b00      	cmp	r3, #0
   14c26:	d0fb      	beq.n	14c20 <_isatty_r+0x14>
   14c28:	602b      	str	r3, [r5, #0]
   14c2a:	e7f9      	b.n	14c20 <_isatty_r+0x14>
   14c2c:	200018fc 	.word	0x200018fc

00014c30 <strncmp>:
   14c30:	b530      	push	{r4, r5, lr}
   14c32:	2400      	movs	r4, #0
   14c34:	2a00      	cmp	r2, #0
   14c36:	d039      	beq.n	14cac <strncmp+0x7c>
   14c38:	0003      	movs	r3, r0
   14c3a:	430b      	orrs	r3, r1
   14c3c:	079b      	lsls	r3, r3, #30
   14c3e:	d120      	bne.n	14c82 <strncmp+0x52>
   14c40:	2a03      	cmp	r2, #3
   14c42:	d91e      	bls.n	14c82 <strncmp+0x52>
   14c44:	6803      	ldr	r3, [r0, #0]
   14c46:	680d      	ldr	r5, [r1, #0]
   14c48:	42ab      	cmp	r3, r5
   14c4a:	d11a      	bne.n	14c82 <strncmp+0x52>
   14c4c:	3a04      	subs	r2, #4
   14c4e:	2a00      	cmp	r2, #0
   14c50:	d02c      	beq.n	14cac <strncmp+0x7c>
   14c52:	4d1a      	ldr	r5, [pc, #104]	; (14cbc <strncmp+0x8c>)
   14c54:	195d      	adds	r5, r3, r5
   14c56:	439d      	bics	r5, r3
   14c58:	002b      	movs	r3, r5
   14c5a:	4d19      	ldr	r5, [pc, #100]	; (14cc0 <strncmp+0x90>)
   14c5c:	422b      	tst	r3, r5
   14c5e:	d00c      	beq.n	14c7a <strncmp+0x4a>
   14c60:	e024      	b.n	14cac <strncmp+0x7c>
   14c62:	6803      	ldr	r3, [r0, #0]
   14c64:	680c      	ldr	r4, [r1, #0]
   14c66:	42a3      	cmp	r3, r4
   14c68:	d10b      	bne.n	14c82 <strncmp+0x52>
   14c6a:	3a04      	subs	r2, #4
   14c6c:	2a00      	cmp	r2, #0
   14c6e:	d01f      	beq.n	14cb0 <strncmp+0x80>
   14c70:	4c12      	ldr	r4, [pc, #72]	; (14cbc <strncmp+0x8c>)
   14c72:	191c      	adds	r4, r3, r4
   14c74:	439c      	bics	r4, r3
   14c76:	422c      	tst	r4, r5
   14c78:	d11a      	bne.n	14cb0 <strncmp+0x80>
   14c7a:	3004      	adds	r0, #4
   14c7c:	3104      	adds	r1, #4
   14c7e:	2a03      	cmp	r2, #3
   14c80:	d8ef      	bhi.n	14c62 <strncmp+0x32>
   14c82:	7803      	ldrb	r3, [r0, #0]
   14c84:	780d      	ldrb	r5, [r1, #0]
   14c86:	3a01      	subs	r2, #1
   14c88:	429d      	cmp	r5, r3
   14c8a:	d113      	bne.n	14cb4 <strncmp+0x84>
   14c8c:	2a00      	cmp	r2, #0
   14c8e:	d00f      	beq.n	14cb0 <strncmp+0x80>
   14c90:	2d00      	cmp	r5, #0
   14c92:	d00d      	beq.n	14cb0 <strncmp+0x80>
   14c94:	2301      	movs	r3, #1
   14c96:	e004      	b.n	14ca2 <strncmp+0x72>
   14c98:	429a      	cmp	r2, r3
   14c9a:	d009      	beq.n	14cb0 <strncmp+0x80>
   14c9c:	3301      	adds	r3, #1
   14c9e:	2c00      	cmp	r4, #0
   14ca0:	d006      	beq.n	14cb0 <strncmp+0x80>
   14ca2:	5cc4      	ldrb	r4, [r0, r3]
   14ca4:	5ccd      	ldrb	r5, [r1, r3]
   14ca6:	42ac      	cmp	r4, r5
   14ca8:	d0f6      	beq.n	14c98 <strncmp+0x68>
   14caa:	1b64      	subs	r4, r4, r5
   14cac:	0020      	movs	r0, r4
   14cae:	bd30      	pop	{r4, r5, pc}
   14cb0:	2400      	movs	r4, #0
   14cb2:	e7fb      	b.n	14cac <strncmp+0x7c>
   14cb4:	001c      	movs	r4, r3
   14cb6:	1b64      	subs	r4, r4, r5
   14cb8:	e7f8      	b.n	14cac <strncmp+0x7c>
   14cba:	46c0      	nop			; (mov r8, r8)
   14cbc:	fefefeff 	.word	0xfefefeff
   14cc0:	80808080 	.word	0x80808080

00014cc4 <_wcrtomb_r>:
   14cc4:	b570      	push	{r4, r5, r6, lr}
   14cc6:	001d      	movs	r5, r3
   14cc8:	4b11      	ldr	r3, [pc, #68]	; (14d10 <_wcrtomb_r+0x4c>)
   14cca:	b084      	sub	sp, #16
   14ccc:	681b      	ldr	r3, [r3, #0]
   14cce:	0004      	movs	r4, r0
   14cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   14cd2:	2900      	cmp	r1, #0
   14cd4:	d00e      	beq.n	14cf4 <_wcrtomb_r+0x30>
   14cd6:	2b00      	cmp	r3, #0
   14cd8:	d016      	beq.n	14d08 <_wcrtomb_r+0x44>
   14cda:	20e0      	movs	r0, #224	; 0xe0
   14cdc:	581e      	ldr	r6, [r3, r0]
   14cde:	002b      	movs	r3, r5
   14ce0:	0020      	movs	r0, r4
   14ce2:	47b0      	blx	r6
   14ce4:	1c43      	adds	r3, r0, #1
   14ce6:	d103      	bne.n	14cf0 <_wcrtomb_r+0x2c>
   14ce8:	2300      	movs	r3, #0
   14cea:	602b      	str	r3, [r5, #0]
   14cec:	338a      	adds	r3, #138	; 0x8a
   14cee:	6023      	str	r3, [r4, #0]
   14cf0:	b004      	add	sp, #16
   14cf2:	bd70      	pop	{r4, r5, r6, pc}
   14cf4:	2b00      	cmp	r3, #0
   14cf6:	d009      	beq.n	14d0c <_wcrtomb_r+0x48>
   14cf8:	22e0      	movs	r2, #224	; 0xe0
   14cfa:	a901      	add	r1, sp, #4
   14cfc:	589e      	ldr	r6, [r3, r2]
   14cfe:	0020      	movs	r0, r4
   14d00:	002b      	movs	r3, r5
   14d02:	2200      	movs	r2, #0
   14d04:	47b0      	blx	r6
   14d06:	e7ed      	b.n	14ce4 <_wcrtomb_r+0x20>
   14d08:	4b02      	ldr	r3, [pc, #8]	; (14d14 <_wcrtomb_r+0x50>)
   14d0a:	e7e6      	b.n	14cda <_wcrtomb_r+0x16>
   14d0c:	4b01      	ldr	r3, [pc, #4]	; (14d14 <_wcrtomb_r+0x50>)
   14d0e:	e7f3      	b.n	14cf8 <_wcrtomb_r+0x34>
   14d10:	20000088 	.word	0x20000088
   14d14:	200008cc 	.word	0x200008cc

00014d18 <__aeabi_dadd>:
   14d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14d1a:	4645      	mov	r5, r8
   14d1c:	46de      	mov	lr, fp
   14d1e:	4657      	mov	r7, sl
   14d20:	464e      	mov	r6, r9
   14d22:	030c      	lsls	r4, r1, #12
   14d24:	b5e0      	push	{r5, r6, r7, lr}
   14d26:	004e      	lsls	r6, r1, #1
   14d28:	0fc9      	lsrs	r1, r1, #31
   14d2a:	4688      	mov	r8, r1
   14d2c:	000d      	movs	r5, r1
   14d2e:	0a61      	lsrs	r1, r4, #9
   14d30:	0f44      	lsrs	r4, r0, #29
   14d32:	430c      	orrs	r4, r1
   14d34:	00c7      	lsls	r7, r0, #3
   14d36:	0319      	lsls	r1, r3, #12
   14d38:	0058      	lsls	r0, r3, #1
   14d3a:	0fdb      	lsrs	r3, r3, #31
   14d3c:	469b      	mov	fp, r3
   14d3e:	0a4b      	lsrs	r3, r1, #9
   14d40:	0f51      	lsrs	r1, r2, #29
   14d42:	430b      	orrs	r3, r1
   14d44:	0d76      	lsrs	r6, r6, #21
   14d46:	0d40      	lsrs	r0, r0, #21
   14d48:	0019      	movs	r1, r3
   14d4a:	00d2      	lsls	r2, r2, #3
   14d4c:	45d8      	cmp	r8, fp
   14d4e:	d100      	bne.n	14d52 <__aeabi_dadd+0x3a>
   14d50:	e0ae      	b.n	14eb0 <__aeabi_dadd+0x198>
   14d52:	1a35      	subs	r5, r6, r0
   14d54:	2d00      	cmp	r5, #0
   14d56:	dc00      	bgt.n	14d5a <__aeabi_dadd+0x42>
   14d58:	e0f6      	b.n	14f48 <__aeabi_dadd+0x230>
   14d5a:	2800      	cmp	r0, #0
   14d5c:	d10f      	bne.n	14d7e <__aeabi_dadd+0x66>
   14d5e:	4313      	orrs	r3, r2
   14d60:	d100      	bne.n	14d64 <__aeabi_dadd+0x4c>
   14d62:	e0db      	b.n	14f1c <__aeabi_dadd+0x204>
   14d64:	1e6b      	subs	r3, r5, #1
   14d66:	2b00      	cmp	r3, #0
   14d68:	d000      	beq.n	14d6c <__aeabi_dadd+0x54>
   14d6a:	e137      	b.n	14fdc <__aeabi_dadd+0x2c4>
   14d6c:	1aba      	subs	r2, r7, r2
   14d6e:	4297      	cmp	r7, r2
   14d70:	41bf      	sbcs	r7, r7
   14d72:	1a64      	subs	r4, r4, r1
   14d74:	427f      	negs	r7, r7
   14d76:	1be4      	subs	r4, r4, r7
   14d78:	2601      	movs	r6, #1
   14d7a:	0017      	movs	r7, r2
   14d7c:	e024      	b.n	14dc8 <__aeabi_dadd+0xb0>
   14d7e:	4bc6      	ldr	r3, [pc, #792]	; (15098 <__aeabi_dadd+0x380>)
   14d80:	429e      	cmp	r6, r3
   14d82:	d04d      	beq.n	14e20 <__aeabi_dadd+0x108>
   14d84:	2380      	movs	r3, #128	; 0x80
   14d86:	041b      	lsls	r3, r3, #16
   14d88:	4319      	orrs	r1, r3
   14d8a:	2d38      	cmp	r5, #56	; 0x38
   14d8c:	dd00      	ble.n	14d90 <__aeabi_dadd+0x78>
   14d8e:	e107      	b.n	14fa0 <__aeabi_dadd+0x288>
   14d90:	2d1f      	cmp	r5, #31
   14d92:	dd00      	ble.n	14d96 <__aeabi_dadd+0x7e>
   14d94:	e138      	b.n	15008 <__aeabi_dadd+0x2f0>
   14d96:	2020      	movs	r0, #32
   14d98:	1b43      	subs	r3, r0, r5
   14d9a:	469a      	mov	sl, r3
   14d9c:	000b      	movs	r3, r1
   14d9e:	4650      	mov	r0, sl
   14da0:	4083      	lsls	r3, r0
   14da2:	4699      	mov	r9, r3
   14da4:	0013      	movs	r3, r2
   14da6:	4648      	mov	r0, r9
   14da8:	40eb      	lsrs	r3, r5
   14daa:	4318      	orrs	r0, r3
   14dac:	0003      	movs	r3, r0
   14dae:	4650      	mov	r0, sl
   14db0:	4082      	lsls	r2, r0
   14db2:	1e50      	subs	r0, r2, #1
   14db4:	4182      	sbcs	r2, r0
   14db6:	40e9      	lsrs	r1, r5
   14db8:	431a      	orrs	r2, r3
   14dba:	1aba      	subs	r2, r7, r2
   14dbc:	1a61      	subs	r1, r4, r1
   14dbe:	4297      	cmp	r7, r2
   14dc0:	41a4      	sbcs	r4, r4
   14dc2:	0017      	movs	r7, r2
   14dc4:	4264      	negs	r4, r4
   14dc6:	1b0c      	subs	r4, r1, r4
   14dc8:	0223      	lsls	r3, r4, #8
   14dca:	d562      	bpl.n	14e92 <__aeabi_dadd+0x17a>
   14dcc:	0264      	lsls	r4, r4, #9
   14dce:	0a65      	lsrs	r5, r4, #9
   14dd0:	2d00      	cmp	r5, #0
   14dd2:	d100      	bne.n	14dd6 <__aeabi_dadd+0xbe>
   14dd4:	e0df      	b.n	14f96 <__aeabi_dadd+0x27e>
   14dd6:	0028      	movs	r0, r5
   14dd8:	f7f5 ffbc 	bl	ad54 <__clzsi2>
   14ddc:	0003      	movs	r3, r0
   14dde:	3b08      	subs	r3, #8
   14de0:	2b1f      	cmp	r3, #31
   14de2:	dd00      	ble.n	14de6 <__aeabi_dadd+0xce>
   14de4:	e0d2      	b.n	14f8c <__aeabi_dadd+0x274>
   14de6:	2220      	movs	r2, #32
   14de8:	003c      	movs	r4, r7
   14dea:	1ad2      	subs	r2, r2, r3
   14dec:	409d      	lsls	r5, r3
   14dee:	40d4      	lsrs	r4, r2
   14df0:	409f      	lsls	r7, r3
   14df2:	4325      	orrs	r5, r4
   14df4:	429e      	cmp	r6, r3
   14df6:	dd00      	ble.n	14dfa <__aeabi_dadd+0xe2>
   14df8:	e0c4      	b.n	14f84 <__aeabi_dadd+0x26c>
   14dfa:	1b9e      	subs	r6, r3, r6
   14dfc:	1c73      	adds	r3, r6, #1
   14dfe:	2b1f      	cmp	r3, #31
   14e00:	dd00      	ble.n	14e04 <__aeabi_dadd+0xec>
   14e02:	e0f1      	b.n	14fe8 <__aeabi_dadd+0x2d0>
   14e04:	2220      	movs	r2, #32
   14e06:	0038      	movs	r0, r7
   14e08:	0029      	movs	r1, r5
   14e0a:	1ad2      	subs	r2, r2, r3
   14e0c:	40d8      	lsrs	r0, r3
   14e0e:	4091      	lsls	r1, r2
   14e10:	4097      	lsls	r7, r2
   14e12:	002c      	movs	r4, r5
   14e14:	4301      	orrs	r1, r0
   14e16:	1e78      	subs	r0, r7, #1
   14e18:	4187      	sbcs	r7, r0
   14e1a:	40dc      	lsrs	r4, r3
   14e1c:	2600      	movs	r6, #0
   14e1e:	430f      	orrs	r7, r1
   14e20:	077b      	lsls	r3, r7, #29
   14e22:	d009      	beq.n	14e38 <__aeabi_dadd+0x120>
   14e24:	230f      	movs	r3, #15
   14e26:	403b      	ands	r3, r7
   14e28:	2b04      	cmp	r3, #4
   14e2a:	d005      	beq.n	14e38 <__aeabi_dadd+0x120>
   14e2c:	1d3b      	adds	r3, r7, #4
   14e2e:	42bb      	cmp	r3, r7
   14e30:	41bf      	sbcs	r7, r7
   14e32:	427f      	negs	r7, r7
   14e34:	19e4      	adds	r4, r4, r7
   14e36:	001f      	movs	r7, r3
   14e38:	0223      	lsls	r3, r4, #8
   14e3a:	d52c      	bpl.n	14e96 <__aeabi_dadd+0x17e>
   14e3c:	4b96      	ldr	r3, [pc, #600]	; (15098 <__aeabi_dadd+0x380>)
   14e3e:	3601      	adds	r6, #1
   14e40:	429e      	cmp	r6, r3
   14e42:	d100      	bne.n	14e46 <__aeabi_dadd+0x12e>
   14e44:	e09a      	b.n	14f7c <__aeabi_dadd+0x264>
   14e46:	4645      	mov	r5, r8
   14e48:	4b94      	ldr	r3, [pc, #592]	; (1509c <__aeabi_dadd+0x384>)
   14e4a:	08ff      	lsrs	r7, r7, #3
   14e4c:	401c      	ands	r4, r3
   14e4e:	0760      	lsls	r0, r4, #29
   14e50:	0576      	lsls	r6, r6, #21
   14e52:	0264      	lsls	r4, r4, #9
   14e54:	4307      	orrs	r7, r0
   14e56:	0b24      	lsrs	r4, r4, #12
   14e58:	0d76      	lsrs	r6, r6, #21
   14e5a:	2100      	movs	r1, #0
   14e5c:	0324      	lsls	r4, r4, #12
   14e5e:	0b23      	lsrs	r3, r4, #12
   14e60:	0d0c      	lsrs	r4, r1, #20
   14e62:	4a8f      	ldr	r2, [pc, #572]	; (150a0 <__aeabi_dadd+0x388>)
   14e64:	0524      	lsls	r4, r4, #20
   14e66:	431c      	orrs	r4, r3
   14e68:	4014      	ands	r4, r2
   14e6a:	0533      	lsls	r3, r6, #20
   14e6c:	4323      	orrs	r3, r4
   14e6e:	005b      	lsls	r3, r3, #1
   14e70:	07ed      	lsls	r5, r5, #31
   14e72:	085b      	lsrs	r3, r3, #1
   14e74:	432b      	orrs	r3, r5
   14e76:	0038      	movs	r0, r7
   14e78:	0019      	movs	r1, r3
   14e7a:	bc3c      	pop	{r2, r3, r4, r5}
   14e7c:	4690      	mov	r8, r2
   14e7e:	4699      	mov	r9, r3
   14e80:	46a2      	mov	sl, r4
   14e82:	46ab      	mov	fp, r5
   14e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e86:	4664      	mov	r4, ip
   14e88:	4304      	orrs	r4, r0
   14e8a:	d100      	bne.n	14e8e <__aeabi_dadd+0x176>
   14e8c:	e211      	b.n	152b2 <__aeabi_dadd+0x59a>
   14e8e:	0004      	movs	r4, r0
   14e90:	4667      	mov	r7, ip
   14e92:	077b      	lsls	r3, r7, #29
   14e94:	d1c6      	bne.n	14e24 <__aeabi_dadd+0x10c>
   14e96:	4645      	mov	r5, r8
   14e98:	0760      	lsls	r0, r4, #29
   14e9a:	08ff      	lsrs	r7, r7, #3
   14e9c:	4307      	orrs	r7, r0
   14e9e:	08e4      	lsrs	r4, r4, #3
   14ea0:	4b7d      	ldr	r3, [pc, #500]	; (15098 <__aeabi_dadd+0x380>)
   14ea2:	429e      	cmp	r6, r3
   14ea4:	d030      	beq.n	14f08 <__aeabi_dadd+0x1f0>
   14ea6:	0324      	lsls	r4, r4, #12
   14ea8:	0576      	lsls	r6, r6, #21
   14eaa:	0b24      	lsrs	r4, r4, #12
   14eac:	0d76      	lsrs	r6, r6, #21
   14eae:	e7d4      	b.n	14e5a <__aeabi_dadd+0x142>
   14eb0:	1a33      	subs	r3, r6, r0
   14eb2:	469a      	mov	sl, r3
   14eb4:	2b00      	cmp	r3, #0
   14eb6:	dd78      	ble.n	14faa <__aeabi_dadd+0x292>
   14eb8:	2800      	cmp	r0, #0
   14eba:	d031      	beq.n	14f20 <__aeabi_dadd+0x208>
   14ebc:	4876      	ldr	r0, [pc, #472]	; (15098 <__aeabi_dadd+0x380>)
   14ebe:	4286      	cmp	r6, r0
   14ec0:	d0ae      	beq.n	14e20 <__aeabi_dadd+0x108>
   14ec2:	2080      	movs	r0, #128	; 0x80
   14ec4:	0400      	lsls	r0, r0, #16
   14ec6:	4301      	orrs	r1, r0
   14ec8:	4653      	mov	r3, sl
   14eca:	2b38      	cmp	r3, #56	; 0x38
   14ecc:	dc00      	bgt.n	14ed0 <__aeabi_dadd+0x1b8>
   14ece:	e0e9      	b.n	150a4 <__aeabi_dadd+0x38c>
   14ed0:	430a      	orrs	r2, r1
   14ed2:	1e51      	subs	r1, r2, #1
   14ed4:	418a      	sbcs	r2, r1
   14ed6:	2100      	movs	r1, #0
   14ed8:	19d2      	adds	r2, r2, r7
   14eda:	42ba      	cmp	r2, r7
   14edc:	41bf      	sbcs	r7, r7
   14ede:	1909      	adds	r1, r1, r4
   14ee0:	427c      	negs	r4, r7
   14ee2:	0017      	movs	r7, r2
   14ee4:	190c      	adds	r4, r1, r4
   14ee6:	0223      	lsls	r3, r4, #8
   14ee8:	d5d3      	bpl.n	14e92 <__aeabi_dadd+0x17a>
   14eea:	4b6b      	ldr	r3, [pc, #428]	; (15098 <__aeabi_dadd+0x380>)
   14eec:	3601      	adds	r6, #1
   14eee:	429e      	cmp	r6, r3
   14ef0:	d100      	bne.n	14ef4 <__aeabi_dadd+0x1dc>
   14ef2:	e13a      	b.n	1516a <__aeabi_dadd+0x452>
   14ef4:	2001      	movs	r0, #1
   14ef6:	4b69      	ldr	r3, [pc, #420]	; (1509c <__aeabi_dadd+0x384>)
   14ef8:	401c      	ands	r4, r3
   14efa:	087b      	lsrs	r3, r7, #1
   14efc:	4007      	ands	r7, r0
   14efe:	431f      	orrs	r7, r3
   14f00:	07e0      	lsls	r0, r4, #31
   14f02:	4307      	orrs	r7, r0
   14f04:	0864      	lsrs	r4, r4, #1
   14f06:	e78b      	b.n	14e20 <__aeabi_dadd+0x108>
   14f08:	0023      	movs	r3, r4
   14f0a:	433b      	orrs	r3, r7
   14f0c:	d100      	bne.n	14f10 <__aeabi_dadd+0x1f8>
   14f0e:	e1cb      	b.n	152a8 <__aeabi_dadd+0x590>
   14f10:	2280      	movs	r2, #128	; 0x80
   14f12:	0312      	lsls	r2, r2, #12
   14f14:	4314      	orrs	r4, r2
   14f16:	0324      	lsls	r4, r4, #12
   14f18:	0b24      	lsrs	r4, r4, #12
   14f1a:	e79e      	b.n	14e5a <__aeabi_dadd+0x142>
   14f1c:	002e      	movs	r6, r5
   14f1e:	e77f      	b.n	14e20 <__aeabi_dadd+0x108>
   14f20:	0008      	movs	r0, r1
   14f22:	4310      	orrs	r0, r2
   14f24:	d100      	bne.n	14f28 <__aeabi_dadd+0x210>
   14f26:	e0b4      	b.n	15092 <__aeabi_dadd+0x37a>
   14f28:	1e58      	subs	r0, r3, #1
   14f2a:	2800      	cmp	r0, #0
   14f2c:	d000      	beq.n	14f30 <__aeabi_dadd+0x218>
   14f2e:	e0de      	b.n	150ee <__aeabi_dadd+0x3d6>
   14f30:	18ba      	adds	r2, r7, r2
   14f32:	42ba      	cmp	r2, r7
   14f34:	419b      	sbcs	r3, r3
   14f36:	1864      	adds	r4, r4, r1
   14f38:	425b      	negs	r3, r3
   14f3a:	18e4      	adds	r4, r4, r3
   14f3c:	0017      	movs	r7, r2
   14f3e:	2601      	movs	r6, #1
   14f40:	0223      	lsls	r3, r4, #8
   14f42:	d5a6      	bpl.n	14e92 <__aeabi_dadd+0x17a>
   14f44:	2602      	movs	r6, #2
   14f46:	e7d5      	b.n	14ef4 <__aeabi_dadd+0x1dc>
   14f48:	2d00      	cmp	r5, #0
   14f4a:	d16e      	bne.n	1502a <__aeabi_dadd+0x312>
   14f4c:	1c70      	adds	r0, r6, #1
   14f4e:	0540      	lsls	r0, r0, #21
   14f50:	0d40      	lsrs	r0, r0, #21
   14f52:	2801      	cmp	r0, #1
   14f54:	dc00      	bgt.n	14f58 <__aeabi_dadd+0x240>
   14f56:	e0f9      	b.n	1514c <__aeabi_dadd+0x434>
   14f58:	1ab8      	subs	r0, r7, r2
   14f5a:	4684      	mov	ip, r0
   14f5c:	4287      	cmp	r7, r0
   14f5e:	4180      	sbcs	r0, r0
   14f60:	1ae5      	subs	r5, r4, r3
   14f62:	4240      	negs	r0, r0
   14f64:	1a2d      	subs	r5, r5, r0
   14f66:	0228      	lsls	r0, r5, #8
   14f68:	d400      	bmi.n	14f6c <__aeabi_dadd+0x254>
   14f6a:	e089      	b.n	15080 <__aeabi_dadd+0x368>
   14f6c:	1bd7      	subs	r7, r2, r7
   14f6e:	42ba      	cmp	r2, r7
   14f70:	4192      	sbcs	r2, r2
   14f72:	1b1c      	subs	r4, r3, r4
   14f74:	4252      	negs	r2, r2
   14f76:	1aa5      	subs	r5, r4, r2
   14f78:	46d8      	mov	r8, fp
   14f7a:	e729      	b.n	14dd0 <__aeabi_dadd+0xb8>
   14f7c:	4645      	mov	r5, r8
   14f7e:	2400      	movs	r4, #0
   14f80:	2700      	movs	r7, #0
   14f82:	e76a      	b.n	14e5a <__aeabi_dadd+0x142>
   14f84:	4c45      	ldr	r4, [pc, #276]	; (1509c <__aeabi_dadd+0x384>)
   14f86:	1af6      	subs	r6, r6, r3
   14f88:	402c      	ands	r4, r5
   14f8a:	e749      	b.n	14e20 <__aeabi_dadd+0x108>
   14f8c:	003d      	movs	r5, r7
   14f8e:	3828      	subs	r0, #40	; 0x28
   14f90:	4085      	lsls	r5, r0
   14f92:	2700      	movs	r7, #0
   14f94:	e72e      	b.n	14df4 <__aeabi_dadd+0xdc>
   14f96:	0038      	movs	r0, r7
   14f98:	f7f5 fedc 	bl	ad54 <__clzsi2>
   14f9c:	3020      	adds	r0, #32
   14f9e:	e71d      	b.n	14ddc <__aeabi_dadd+0xc4>
   14fa0:	430a      	orrs	r2, r1
   14fa2:	1e51      	subs	r1, r2, #1
   14fa4:	418a      	sbcs	r2, r1
   14fa6:	2100      	movs	r1, #0
   14fa8:	e707      	b.n	14dba <__aeabi_dadd+0xa2>
   14faa:	2b00      	cmp	r3, #0
   14fac:	d000      	beq.n	14fb0 <__aeabi_dadd+0x298>
   14fae:	e0f3      	b.n	15198 <__aeabi_dadd+0x480>
   14fb0:	1c70      	adds	r0, r6, #1
   14fb2:	0543      	lsls	r3, r0, #21
   14fb4:	0d5b      	lsrs	r3, r3, #21
   14fb6:	2b01      	cmp	r3, #1
   14fb8:	dc00      	bgt.n	14fbc <__aeabi_dadd+0x2a4>
   14fba:	e0ad      	b.n	15118 <__aeabi_dadd+0x400>
   14fbc:	4b36      	ldr	r3, [pc, #216]	; (15098 <__aeabi_dadd+0x380>)
   14fbe:	4298      	cmp	r0, r3
   14fc0:	d100      	bne.n	14fc4 <__aeabi_dadd+0x2ac>
   14fc2:	e0d1      	b.n	15168 <__aeabi_dadd+0x450>
   14fc4:	18ba      	adds	r2, r7, r2
   14fc6:	42ba      	cmp	r2, r7
   14fc8:	41bf      	sbcs	r7, r7
   14fca:	1864      	adds	r4, r4, r1
   14fcc:	427f      	negs	r7, r7
   14fce:	19e4      	adds	r4, r4, r7
   14fd0:	07e7      	lsls	r7, r4, #31
   14fd2:	0852      	lsrs	r2, r2, #1
   14fd4:	4317      	orrs	r7, r2
   14fd6:	0864      	lsrs	r4, r4, #1
   14fd8:	0006      	movs	r6, r0
   14fda:	e721      	b.n	14e20 <__aeabi_dadd+0x108>
   14fdc:	482e      	ldr	r0, [pc, #184]	; (15098 <__aeabi_dadd+0x380>)
   14fde:	4285      	cmp	r5, r0
   14fe0:	d100      	bne.n	14fe4 <__aeabi_dadd+0x2cc>
   14fe2:	e093      	b.n	1510c <__aeabi_dadd+0x3f4>
   14fe4:	001d      	movs	r5, r3
   14fe6:	e6d0      	b.n	14d8a <__aeabi_dadd+0x72>
   14fe8:	0029      	movs	r1, r5
   14fea:	3e1f      	subs	r6, #31
   14fec:	40f1      	lsrs	r1, r6
   14fee:	2b20      	cmp	r3, #32
   14ff0:	d100      	bne.n	14ff4 <__aeabi_dadd+0x2dc>
   14ff2:	e08d      	b.n	15110 <__aeabi_dadd+0x3f8>
   14ff4:	2240      	movs	r2, #64	; 0x40
   14ff6:	1ad3      	subs	r3, r2, r3
   14ff8:	409d      	lsls	r5, r3
   14ffa:	432f      	orrs	r7, r5
   14ffc:	1e7d      	subs	r5, r7, #1
   14ffe:	41af      	sbcs	r7, r5
   15000:	2400      	movs	r4, #0
   15002:	430f      	orrs	r7, r1
   15004:	2600      	movs	r6, #0
   15006:	e744      	b.n	14e92 <__aeabi_dadd+0x17a>
   15008:	002b      	movs	r3, r5
   1500a:	0008      	movs	r0, r1
   1500c:	3b20      	subs	r3, #32
   1500e:	40d8      	lsrs	r0, r3
   15010:	0003      	movs	r3, r0
   15012:	2d20      	cmp	r5, #32
   15014:	d100      	bne.n	15018 <__aeabi_dadd+0x300>
   15016:	e07d      	b.n	15114 <__aeabi_dadd+0x3fc>
   15018:	2040      	movs	r0, #64	; 0x40
   1501a:	1b45      	subs	r5, r0, r5
   1501c:	40a9      	lsls	r1, r5
   1501e:	430a      	orrs	r2, r1
   15020:	1e51      	subs	r1, r2, #1
   15022:	418a      	sbcs	r2, r1
   15024:	2100      	movs	r1, #0
   15026:	431a      	orrs	r2, r3
   15028:	e6c7      	b.n	14dba <__aeabi_dadd+0xa2>
   1502a:	2e00      	cmp	r6, #0
   1502c:	d050      	beq.n	150d0 <__aeabi_dadd+0x3b8>
   1502e:	4e1a      	ldr	r6, [pc, #104]	; (15098 <__aeabi_dadd+0x380>)
   15030:	42b0      	cmp	r0, r6
   15032:	d057      	beq.n	150e4 <__aeabi_dadd+0x3cc>
   15034:	2680      	movs	r6, #128	; 0x80
   15036:	426b      	negs	r3, r5
   15038:	4699      	mov	r9, r3
   1503a:	0436      	lsls	r6, r6, #16
   1503c:	4334      	orrs	r4, r6
   1503e:	464b      	mov	r3, r9
   15040:	2b38      	cmp	r3, #56	; 0x38
   15042:	dd00      	ble.n	15046 <__aeabi_dadd+0x32e>
   15044:	e0d6      	b.n	151f4 <__aeabi_dadd+0x4dc>
   15046:	2b1f      	cmp	r3, #31
   15048:	dd00      	ble.n	1504c <__aeabi_dadd+0x334>
   1504a:	e135      	b.n	152b8 <__aeabi_dadd+0x5a0>
   1504c:	2620      	movs	r6, #32
   1504e:	1af5      	subs	r5, r6, r3
   15050:	0026      	movs	r6, r4
   15052:	40ae      	lsls	r6, r5
   15054:	46b2      	mov	sl, r6
   15056:	003e      	movs	r6, r7
   15058:	40de      	lsrs	r6, r3
   1505a:	46ac      	mov	ip, r5
   1505c:	0035      	movs	r5, r6
   1505e:	4656      	mov	r6, sl
   15060:	432e      	orrs	r6, r5
   15062:	4665      	mov	r5, ip
   15064:	40af      	lsls	r7, r5
   15066:	1e7d      	subs	r5, r7, #1
   15068:	41af      	sbcs	r7, r5
   1506a:	40dc      	lsrs	r4, r3
   1506c:	4337      	orrs	r7, r6
   1506e:	1bd7      	subs	r7, r2, r7
   15070:	42ba      	cmp	r2, r7
   15072:	4192      	sbcs	r2, r2
   15074:	1b0c      	subs	r4, r1, r4
   15076:	4252      	negs	r2, r2
   15078:	1aa4      	subs	r4, r4, r2
   1507a:	0006      	movs	r6, r0
   1507c:	46d8      	mov	r8, fp
   1507e:	e6a3      	b.n	14dc8 <__aeabi_dadd+0xb0>
   15080:	4664      	mov	r4, ip
   15082:	4667      	mov	r7, ip
   15084:	432c      	orrs	r4, r5
   15086:	d000      	beq.n	1508a <__aeabi_dadd+0x372>
   15088:	e6a2      	b.n	14dd0 <__aeabi_dadd+0xb8>
   1508a:	2500      	movs	r5, #0
   1508c:	2600      	movs	r6, #0
   1508e:	2700      	movs	r7, #0
   15090:	e706      	b.n	14ea0 <__aeabi_dadd+0x188>
   15092:	001e      	movs	r6, r3
   15094:	e6c4      	b.n	14e20 <__aeabi_dadd+0x108>
   15096:	46c0      	nop			; (mov r8, r8)
   15098:	000007ff 	.word	0x000007ff
   1509c:	ff7fffff 	.word	0xff7fffff
   150a0:	800fffff 	.word	0x800fffff
   150a4:	2b1f      	cmp	r3, #31
   150a6:	dc63      	bgt.n	15170 <__aeabi_dadd+0x458>
   150a8:	2020      	movs	r0, #32
   150aa:	1ac3      	subs	r3, r0, r3
   150ac:	0008      	movs	r0, r1
   150ae:	4098      	lsls	r0, r3
   150b0:	469c      	mov	ip, r3
   150b2:	4683      	mov	fp, r0
   150b4:	4653      	mov	r3, sl
   150b6:	0010      	movs	r0, r2
   150b8:	40d8      	lsrs	r0, r3
   150ba:	0003      	movs	r3, r0
   150bc:	4658      	mov	r0, fp
   150be:	4318      	orrs	r0, r3
   150c0:	4663      	mov	r3, ip
   150c2:	409a      	lsls	r2, r3
   150c4:	1e53      	subs	r3, r2, #1
   150c6:	419a      	sbcs	r2, r3
   150c8:	4653      	mov	r3, sl
   150ca:	4302      	orrs	r2, r0
   150cc:	40d9      	lsrs	r1, r3
   150ce:	e703      	b.n	14ed8 <__aeabi_dadd+0x1c0>
   150d0:	0026      	movs	r6, r4
   150d2:	433e      	orrs	r6, r7
   150d4:	d006      	beq.n	150e4 <__aeabi_dadd+0x3cc>
   150d6:	43eb      	mvns	r3, r5
   150d8:	4699      	mov	r9, r3
   150da:	2b00      	cmp	r3, #0
   150dc:	d0c7      	beq.n	1506e <__aeabi_dadd+0x356>
   150de:	4e94      	ldr	r6, [pc, #592]	; (15330 <__aeabi_dadd+0x618>)
   150e0:	42b0      	cmp	r0, r6
   150e2:	d1ac      	bne.n	1503e <__aeabi_dadd+0x326>
   150e4:	000c      	movs	r4, r1
   150e6:	0017      	movs	r7, r2
   150e8:	0006      	movs	r6, r0
   150ea:	46d8      	mov	r8, fp
   150ec:	e698      	b.n	14e20 <__aeabi_dadd+0x108>
   150ee:	4b90      	ldr	r3, [pc, #576]	; (15330 <__aeabi_dadd+0x618>)
   150f0:	459a      	cmp	sl, r3
   150f2:	d00b      	beq.n	1510c <__aeabi_dadd+0x3f4>
   150f4:	4682      	mov	sl, r0
   150f6:	e6e7      	b.n	14ec8 <__aeabi_dadd+0x1b0>
   150f8:	2800      	cmp	r0, #0
   150fa:	d000      	beq.n	150fe <__aeabi_dadd+0x3e6>
   150fc:	e09e      	b.n	1523c <__aeabi_dadd+0x524>
   150fe:	0018      	movs	r0, r3
   15100:	4310      	orrs	r0, r2
   15102:	d100      	bne.n	15106 <__aeabi_dadd+0x3ee>
   15104:	e0e9      	b.n	152da <__aeabi_dadd+0x5c2>
   15106:	001c      	movs	r4, r3
   15108:	0017      	movs	r7, r2
   1510a:	46d8      	mov	r8, fp
   1510c:	4e88      	ldr	r6, [pc, #544]	; (15330 <__aeabi_dadd+0x618>)
   1510e:	e687      	b.n	14e20 <__aeabi_dadd+0x108>
   15110:	2500      	movs	r5, #0
   15112:	e772      	b.n	14ffa <__aeabi_dadd+0x2e2>
   15114:	2100      	movs	r1, #0
   15116:	e782      	b.n	1501e <__aeabi_dadd+0x306>
   15118:	0023      	movs	r3, r4
   1511a:	433b      	orrs	r3, r7
   1511c:	2e00      	cmp	r6, #0
   1511e:	d000      	beq.n	15122 <__aeabi_dadd+0x40a>
   15120:	e0ab      	b.n	1527a <__aeabi_dadd+0x562>
   15122:	2b00      	cmp	r3, #0
   15124:	d100      	bne.n	15128 <__aeabi_dadd+0x410>
   15126:	e0e7      	b.n	152f8 <__aeabi_dadd+0x5e0>
   15128:	000b      	movs	r3, r1
   1512a:	4313      	orrs	r3, r2
   1512c:	d100      	bne.n	15130 <__aeabi_dadd+0x418>
   1512e:	e677      	b.n	14e20 <__aeabi_dadd+0x108>
   15130:	18ba      	adds	r2, r7, r2
   15132:	42ba      	cmp	r2, r7
   15134:	41bf      	sbcs	r7, r7
   15136:	1864      	adds	r4, r4, r1
   15138:	427f      	negs	r7, r7
   1513a:	19e4      	adds	r4, r4, r7
   1513c:	0223      	lsls	r3, r4, #8
   1513e:	d400      	bmi.n	15142 <__aeabi_dadd+0x42a>
   15140:	e0f2      	b.n	15328 <__aeabi_dadd+0x610>
   15142:	4b7c      	ldr	r3, [pc, #496]	; (15334 <__aeabi_dadd+0x61c>)
   15144:	0017      	movs	r7, r2
   15146:	401c      	ands	r4, r3
   15148:	0006      	movs	r6, r0
   1514a:	e669      	b.n	14e20 <__aeabi_dadd+0x108>
   1514c:	0020      	movs	r0, r4
   1514e:	4338      	orrs	r0, r7
   15150:	2e00      	cmp	r6, #0
   15152:	d1d1      	bne.n	150f8 <__aeabi_dadd+0x3e0>
   15154:	2800      	cmp	r0, #0
   15156:	d15b      	bne.n	15210 <__aeabi_dadd+0x4f8>
   15158:	001c      	movs	r4, r3
   1515a:	4314      	orrs	r4, r2
   1515c:	d100      	bne.n	15160 <__aeabi_dadd+0x448>
   1515e:	e0a8      	b.n	152b2 <__aeabi_dadd+0x59a>
   15160:	001c      	movs	r4, r3
   15162:	0017      	movs	r7, r2
   15164:	46d8      	mov	r8, fp
   15166:	e65b      	b.n	14e20 <__aeabi_dadd+0x108>
   15168:	0006      	movs	r6, r0
   1516a:	2400      	movs	r4, #0
   1516c:	2700      	movs	r7, #0
   1516e:	e697      	b.n	14ea0 <__aeabi_dadd+0x188>
   15170:	4650      	mov	r0, sl
   15172:	000b      	movs	r3, r1
   15174:	3820      	subs	r0, #32
   15176:	40c3      	lsrs	r3, r0
   15178:	4699      	mov	r9, r3
   1517a:	4653      	mov	r3, sl
   1517c:	2b20      	cmp	r3, #32
   1517e:	d100      	bne.n	15182 <__aeabi_dadd+0x46a>
   15180:	e095      	b.n	152ae <__aeabi_dadd+0x596>
   15182:	2340      	movs	r3, #64	; 0x40
   15184:	4650      	mov	r0, sl
   15186:	1a1b      	subs	r3, r3, r0
   15188:	4099      	lsls	r1, r3
   1518a:	430a      	orrs	r2, r1
   1518c:	1e51      	subs	r1, r2, #1
   1518e:	418a      	sbcs	r2, r1
   15190:	464b      	mov	r3, r9
   15192:	2100      	movs	r1, #0
   15194:	431a      	orrs	r2, r3
   15196:	e69f      	b.n	14ed8 <__aeabi_dadd+0x1c0>
   15198:	2e00      	cmp	r6, #0
   1519a:	d130      	bne.n	151fe <__aeabi_dadd+0x4e6>
   1519c:	0026      	movs	r6, r4
   1519e:	433e      	orrs	r6, r7
   151a0:	d067      	beq.n	15272 <__aeabi_dadd+0x55a>
   151a2:	43db      	mvns	r3, r3
   151a4:	469a      	mov	sl, r3
   151a6:	2b00      	cmp	r3, #0
   151a8:	d01c      	beq.n	151e4 <__aeabi_dadd+0x4cc>
   151aa:	4e61      	ldr	r6, [pc, #388]	; (15330 <__aeabi_dadd+0x618>)
   151ac:	42b0      	cmp	r0, r6
   151ae:	d060      	beq.n	15272 <__aeabi_dadd+0x55a>
   151b0:	4653      	mov	r3, sl
   151b2:	2b38      	cmp	r3, #56	; 0x38
   151b4:	dd00      	ble.n	151b8 <__aeabi_dadd+0x4a0>
   151b6:	e096      	b.n	152e6 <__aeabi_dadd+0x5ce>
   151b8:	2b1f      	cmp	r3, #31
   151ba:	dd00      	ble.n	151be <__aeabi_dadd+0x4a6>
   151bc:	e09f      	b.n	152fe <__aeabi_dadd+0x5e6>
   151be:	2620      	movs	r6, #32
   151c0:	1af3      	subs	r3, r6, r3
   151c2:	0026      	movs	r6, r4
   151c4:	409e      	lsls	r6, r3
   151c6:	469c      	mov	ip, r3
   151c8:	46b3      	mov	fp, r6
   151ca:	4653      	mov	r3, sl
   151cc:	003e      	movs	r6, r7
   151ce:	40de      	lsrs	r6, r3
   151d0:	0033      	movs	r3, r6
   151d2:	465e      	mov	r6, fp
   151d4:	431e      	orrs	r6, r3
   151d6:	4663      	mov	r3, ip
   151d8:	409f      	lsls	r7, r3
   151da:	1e7b      	subs	r3, r7, #1
   151dc:	419f      	sbcs	r7, r3
   151de:	4653      	mov	r3, sl
   151e0:	40dc      	lsrs	r4, r3
   151e2:	4337      	orrs	r7, r6
   151e4:	18bf      	adds	r7, r7, r2
   151e6:	4297      	cmp	r7, r2
   151e8:	4192      	sbcs	r2, r2
   151ea:	1864      	adds	r4, r4, r1
   151ec:	4252      	negs	r2, r2
   151ee:	18a4      	adds	r4, r4, r2
   151f0:	0006      	movs	r6, r0
   151f2:	e678      	b.n	14ee6 <__aeabi_dadd+0x1ce>
   151f4:	4327      	orrs	r7, r4
   151f6:	1e7c      	subs	r4, r7, #1
   151f8:	41a7      	sbcs	r7, r4
   151fa:	2400      	movs	r4, #0
   151fc:	e737      	b.n	1506e <__aeabi_dadd+0x356>
   151fe:	4e4c      	ldr	r6, [pc, #304]	; (15330 <__aeabi_dadd+0x618>)
   15200:	42b0      	cmp	r0, r6
   15202:	d036      	beq.n	15272 <__aeabi_dadd+0x55a>
   15204:	2680      	movs	r6, #128	; 0x80
   15206:	425b      	negs	r3, r3
   15208:	0436      	lsls	r6, r6, #16
   1520a:	469a      	mov	sl, r3
   1520c:	4334      	orrs	r4, r6
   1520e:	e7cf      	b.n	151b0 <__aeabi_dadd+0x498>
   15210:	0018      	movs	r0, r3
   15212:	4310      	orrs	r0, r2
   15214:	d100      	bne.n	15218 <__aeabi_dadd+0x500>
   15216:	e603      	b.n	14e20 <__aeabi_dadd+0x108>
   15218:	1ab8      	subs	r0, r7, r2
   1521a:	4684      	mov	ip, r0
   1521c:	4567      	cmp	r7, ip
   1521e:	41ad      	sbcs	r5, r5
   15220:	1ae0      	subs	r0, r4, r3
   15222:	426d      	negs	r5, r5
   15224:	1b40      	subs	r0, r0, r5
   15226:	0205      	lsls	r5, r0, #8
   15228:	d400      	bmi.n	1522c <__aeabi_dadd+0x514>
   1522a:	e62c      	b.n	14e86 <__aeabi_dadd+0x16e>
   1522c:	1bd7      	subs	r7, r2, r7
   1522e:	42ba      	cmp	r2, r7
   15230:	4192      	sbcs	r2, r2
   15232:	1b1c      	subs	r4, r3, r4
   15234:	4252      	negs	r2, r2
   15236:	1aa4      	subs	r4, r4, r2
   15238:	46d8      	mov	r8, fp
   1523a:	e5f1      	b.n	14e20 <__aeabi_dadd+0x108>
   1523c:	0018      	movs	r0, r3
   1523e:	4310      	orrs	r0, r2
   15240:	d100      	bne.n	15244 <__aeabi_dadd+0x52c>
   15242:	e763      	b.n	1510c <__aeabi_dadd+0x3f4>
   15244:	08f8      	lsrs	r0, r7, #3
   15246:	0767      	lsls	r7, r4, #29
   15248:	4307      	orrs	r7, r0
   1524a:	2080      	movs	r0, #128	; 0x80
   1524c:	08e4      	lsrs	r4, r4, #3
   1524e:	0300      	lsls	r0, r0, #12
   15250:	4204      	tst	r4, r0
   15252:	d008      	beq.n	15266 <__aeabi_dadd+0x54e>
   15254:	08dd      	lsrs	r5, r3, #3
   15256:	4205      	tst	r5, r0
   15258:	d105      	bne.n	15266 <__aeabi_dadd+0x54e>
   1525a:	08d2      	lsrs	r2, r2, #3
   1525c:	0759      	lsls	r1, r3, #29
   1525e:	4311      	orrs	r1, r2
   15260:	000f      	movs	r7, r1
   15262:	002c      	movs	r4, r5
   15264:	46d8      	mov	r8, fp
   15266:	0f7b      	lsrs	r3, r7, #29
   15268:	00e4      	lsls	r4, r4, #3
   1526a:	431c      	orrs	r4, r3
   1526c:	00ff      	lsls	r7, r7, #3
   1526e:	4e30      	ldr	r6, [pc, #192]	; (15330 <__aeabi_dadd+0x618>)
   15270:	e5d6      	b.n	14e20 <__aeabi_dadd+0x108>
   15272:	000c      	movs	r4, r1
   15274:	0017      	movs	r7, r2
   15276:	0006      	movs	r6, r0
   15278:	e5d2      	b.n	14e20 <__aeabi_dadd+0x108>
   1527a:	2b00      	cmp	r3, #0
   1527c:	d038      	beq.n	152f0 <__aeabi_dadd+0x5d8>
   1527e:	000b      	movs	r3, r1
   15280:	4313      	orrs	r3, r2
   15282:	d100      	bne.n	15286 <__aeabi_dadd+0x56e>
   15284:	e742      	b.n	1510c <__aeabi_dadd+0x3f4>
   15286:	08f8      	lsrs	r0, r7, #3
   15288:	0767      	lsls	r7, r4, #29
   1528a:	4307      	orrs	r7, r0
   1528c:	2080      	movs	r0, #128	; 0x80
   1528e:	08e4      	lsrs	r4, r4, #3
   15290:	0300      	lsls	r0, r0, #12
   15292:	4204      	tst	r4, r0
   15294:	d0e7      	beq.n	15266 <__aeabi_dadd+0x54e>
   15296:	08cb      	lsrs	r3, r1, #3
   15298:	4203      	tst	r3, r0
   1529a:	d1e4      	bne.n	15266 <__aeabi_dadd+0x54e>
   1529c:	08d2      	lsrs	r2, r2, #3
   1529e:	0749      	lsls	r1, r1, #29
   152a0:	4311      	orrs	r1, r2
   152a2:	000f      	movs	r7, r1
   152a4:	001c      	movs	r4, r3
   152a6:	e7de      	b.n	15266 <__aeabi_dadd+0x54e>
   152a8:	2700      	movs	r7, #0
   152aa:	2400      	movs	r4, #0
   152ac:	e5d5      	b.n	14e5a <__aeabi_dadd+0x142>
   152ae:	2100      	movs	r1, #0
   152b0:	e76b      	b.n	1518a <__aeabi_dadd+0x472>
   152b2:	2500      	movs	r5, #0
   152b4:	2700      	movs	r7, #0
   152b6:	e5f3      	b.n	14ea0 <__aeabi_dadd+0x188>
   152b8:	464e      	mov	r6, r9
   152ba:	0025      	movs	r5, r4
   152bc:	3e20      	subs	r6, #32
   152be:	40f5      	lsrs	r5, r6
   152c0:	464b      	mov	r3, r9
   152c2:	002e      	movs	r6, r5
   152c4:	2b20      	cmp	r3, #32
   152c6:	d02d      	beq.n	15324 <__aeabi_dadd+0x60c>
   152c8:	2540      	movs	r5, #64	; 0x40
   152ca:	1aed      	subs	r5, r5, r3
   152cc:	40ac      	lsls	r4, r5
   152ce:	4327      	orrs	r7, r4
   152d0:	1e7c      	subs	r4, r7, #1
   152d2:	41a7      	sbcs	r7, r4
   152d4:	2400      	movs	r4, #0
   152d6:	4337      	orrs	r7, r6
   152d8:	e6c9      	b.n	1506e <__aeabi_dadd+0x356>
   152da:	2480      	movs	r4, #128	; 0x80
   152dc:	2500      	movs	r5, #0
   152de:	0324      	lsls	r4, r4, #12
   152e0:	4e13      	ldr	r6, [pc, #76]	; (15330 <__aeabi_dadd+0x618>)
   152e2:	2700      	movs	r7, #0
   152e4:	e5dc      	b.n	14ea0 <__aeabi_dadd+0x188>
   152e6:	4327      	orrs	r7, r4
   152e8:	1e7c      	subs	r4, r7, #1
   152ea:	41a7      	sbcs	r7, r4
   152ec:	2400      	movs	r4, #0
   152ee:	e779      	b.n	151e4 <__aeabi_dadd+0x4cc>
   152f0:	000c      	movs	r4, r1
   152f2:	0017      	movs	r7, r2
   152f4:	4e0e      	ldr	r6, [pc, #56]	; (15330 <__aeabi_dadd+0x618>)
   152f6:	e593      	b.n	14e20 <__aeabi_dadd+0x108>
   152f8:	000c      	movs	r4, r1
   152fa:	0017      	movs	r7, r2
   152fc:	e590      	b.n	14e20 <__aeabi_dadd+0x108>
   152fe:	4656      	mov	r6, sl
   15300:	0023      	movs	r3, r4
   15302:	3e20      	subs	r6, #32
   15304:	40f3      	lsrs	r3, r6
   15306:	4699      	mov	r9, r3
   15308:	4653      	mov	r3, sl
   1530a:	2b20      	cmp	r3, #32
   1530c:	d00e      	beq.n	1532c <__aeabi_dadd+0x614>
   1530e:	2340      	movs	r3, #64	; 0x40
   15310:	4656      	mov	r6, sl
   15312:	1b9b      	subs	r3, r3, r6
   15314:	409c      	lsls	r4, r3
   15316:	4327      	orrs	r7, r4
   15318:	1e7c      	subs	r4, r7, #1
   1531a:	41a7      	sbcs	r7, r4
   1531c:	464b      	mov	r3, r9
   1531e:	2400      	movs	r4, #0
   15320:	431f      	orrs	r7, r3
   15322:	e75f      	b.n	151e4 <__aeabi_dadd+0x4cc>
   15324:	2400      	movs	r4, #0
   15326:	e7d2      	b.n	152ce <__aeabi_dadd+0x5b6>
   15328:	0017      	movs	r7, r2
   1532a:	e5b2      	b.n	14e92 <__aeabi_dadd+0x17a>
   1532c:	2400      	movs	r4, #0
   1532e:	e7f2      	b.n	15316 <__aeabi_dadd+0x5fe>
   15330:	000007ff 	.word	0x000007ff
   15334:	ff7fffff 	.word	0xff7fffff

00015338 <__aeabi_dcmpun>:
   15338:	b570      	push	{r4, r5, r6, lr}
   1533a:	4e0e      	ldr	r6, [pc, #56]	; (15374 <__aeabi_dcmpun+0x3c>)
   1533c:	030d      	lsls	r5, r1, #12
   1533e:	031c      	lsls	r4, r3, #12
   15340:	0049      	lsls	r1, r1, #1
   15342:	005b      	lsls	r3, r3, #1
   15344:	0b2d      	lsrs	r5, r5, #12
   15346:	0d49      	lsrs	r1, r1, #21
   15348:	0b24      	lsrs	r4, r4, #12
   1534a:	0d5b      	lsrs	r3, r3, #21
   1534c:	42b1      	cmp	r1, r6
   1534e:	d004      	beq.n	1535a <__aeabi_dcmpun+0x22>
   15350:	4908      	ldr	r1, [pc, #32]	; (15374 <__aeabi_dcmpun+0x3c>)
   15352:	2000      	movs	r0, #0
   15354:	428b      	cmp	r3, r1
   15356:	d008      	beq.n	1536a <__aeabi_dcmpun+0x32>
   15358:	bd70      	pop	{r4, r5, r6, pc}
   1535a:	4305      	orrs	r5, r0
   1535c:	2001      	movs	r0, #1
   1535e:	2d00      	cmp	r5, #0
   15360:	d1fa      	bne.n	15358 <__aeabi_dcmpun+0x20>
   15362:	4904      	ldr	r1, [pc, #16]	; (15374 <__aeabi_dcmpun+0x3c>)
   15364:	2000      	movs	r0, #0
   15366:	428b      	cmp	r3, r1
   15368:	d1f6      	bne.n	15358 <__aeabi_dcmpun+0x20>
   1536a:	4314      	orrs	r4, r2
   1536c:	0020      	movs	r0, r4
   1536e:	1e44      	subs	r4, r0, #1
   15370:	41a0      	sbcs	r0, r4
   15372:	e7f1      	b.n	15358 <__aeabi_dcmpun+0x20>
   15374:	000007ff 	.word	0x000007ff

00015378 <__aeabi_d2f>:
   15378:	b5f0      	push	{r4, r5, r6, r7, lr}
   1537a:	004c      	lsls	r4, r1, #1
   1537c:	0d64      	lsrs	r4, r4, #21
   1537e:	030b      	lsls	r3, r1, #12
   15380:	1c62      	adds	r2, r4, #1
   15382:	0f45      	lsrs	r5, r0, #29
   15384:	0a5b      	lsrs	r3, r3, #9
   15386:	0552      	lsls	r2, r2, #21
   15388:	432b      	orrs	r3, r5
   1538a:	0fc9      	lsrs	r1, r1, #31
   1538c:	00c5      	lsls	r5, r0, #3
   1538e:	0d52      	lsrs	r2, r2, #21
   15390:	2a01      	cmp	r2, #1
   15392:	dd28      	ble.n	153e6 <__aeabi_d2f+0x6e>
   15394:	4a3a      	ldr	r2, [pc, #232]	; (15480 <__aeabi_d2f+0x108>)
   15396:	18a6      	adds	r6, r4, r2
   15398:	2efe      	cmp	r6, #254	; 0xfe
   1539a:	dc1b      	bgt.n	153d4 <__aeabi_d2f+0x5c>
   1539c:	2e00      	cmp	r6, #0
   1539e:	dd3e      	ble.n	1541e <__aeabi_d2f+0xa6>
   153a0:	0180      	lsls	r0, r0, #6
   153a2:	0002      	movs	r2, r0
   153a4:	1e50      	subs	r0, r2, #1
   153a6:	4182      	sbcs	r2, r0
   153a8:	0f6d      	lsrs	r5, r5, #29
   153aa:	432a      	orrs	r2, r5
   153ac:	00db      	lsls	r3, r3, #3
   153ae:	4313      	orrs	r3, r2
   153b0:	075a      	lsls	r2, r3, #29
   153b2:	d004      	beq.n	153be <__aeabi_d2f+0x46>
   153b4:	220f      	movs	r2, #15
   153b6:	401a      	ands	r2, r3
   153b8:	2a04      	cmp	r2, #4
   153ba:	d000      	beq.n	153be <__aeabi_d2f+0x46>
   153bc:	3304      	adds	r3, #4
   153be:	2280      	movs	r2, #128	; 0x80
   153c0:	04d2      	lsls	r2, r2, #19
   153c2:	401a      	ands	r2, r3
   153c4:	d05a      	beq.n	1547c <__aeabi_d2f+0x104>
   153c6:	3601      	adds	r6, #1
   153c8:	2eff      	cmp	r6, #255	; 0xff
   153ca:	d003      	beq.n	153d4 <__aeabi_d2f+0x5c>
   153cc:	019b      	lsls	r3, r3, #6
   153ce:	0a5b      	lsrs	r3, r3, #9
   153d0:	b2f4      	uxtb	r4, r6
   153d2:	e001      	b.n	153d8 <__aeabi_d2f+0x60>
   153d4:	24ff      	movs	r4, #255	; 0xff
   153d6:	2300      	movs	r3, #0
   153d8:	0258      	lsls	r0, r3, #9
   153da:	05e4      	lsls	r4, r4, #23
   153dc:	0a40      	lsrs	r0, r0, #9
   153de:	07c9      	lsls	r1, r1, #31
   153e0:	4320      	orrs	r0, r4
   153e2:	4308      	orrs	r0, r1
   153e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   153e6:	2c00      	cmp	r4, #0
   153e8:	d007      	beq.n	153fa <__aeabi_d2f+0x82>
   153ea:	431d      	orrs	r5, r3
   153ec:	d0f2      	beq.n	153d4 <__aeabi_d2f+0x5c>
   153ee:	2080      	movs	r0, #128	; 0x80
   153f0:	00db      	lsls	r3, r3, #3
   153f2:	0480      	lsls	r0, r0, #18
   153f4:	4303      	orrs	r3, r0
   153f6:	26ff      	movs	r6, #255	; 0xff
   153f8:	e7da      	b.n	153b0 <__aeabi_d2f+0x38>
   153fa:	432b      	orrs	r3, r5
   153fc:	d003      	beq.n	15406 <__aeabi_d2f+0x8e>
   153fe:	2305      	movs	r3, #5
   15400:	08db      	lsrs	r3, r3, #3
   15402:	2cff      	cmp	r4, #255	; 0xff
   15404:	d003      	beq.n	1540e <__aeabi_d2f+0x96>
   15406:	025b      	lsls	r3, r3, #9
   15408:	0a5b      	lsrs	r3, r3, #9
   1540a:	b2e4      	uxtb	r4, r4
   1540c:	e7e4      	b.n	153d8 <__aeabi_d2f+0x60>
   1540e:	2b00      	cmp	r3, #0
   15410:	d032      	beq.n	15478 <__aeabi_d2f+0x100>
   15412:	2080      	movs	r0, #128	; 0x80
   15414:	03c0      	lsls	r0, r0, #15
   15416:	4303      	orrs	r3, r0
   15418:	025b      	lsls	r3, r3, #9
   1541a:	0a5b      	lsrs	r3, r3, #9
   1541c:	e7dc      	b.n	153d8 <__aeabi_d2f+0x60>
   1541e:	0032      	movs	r2, r6
   15420:	3217      	adds	r2, #23
   15422:	db14      	blt.n	1544e <__aeabi_d2f+0xd6>
   15424:	2280      	movs	r2, #128	; 0x80
   15426:	271e      	movs	r7, #30
   15428:	0412      	lsls	r2, r2, #16
   1542a:	4313      	orrs	r3, r2
   1542c:	1bbf      	subs	r7, r7, r6
   1542e:	2f1f      	cmp	r7, #31
   15430:	dc0f      	bgt.n	15452 <__aeabi_d2f+0xda>
   15432:	4a14      	ldr	r2, [pc, #80]	; (15484 <__aeabi_d2f+0x10c>)
   15434:	4694      	mov	ip, r2
   15436:	4464      	add	r4, ip
   15438:	002a      	movs	r2, r5
   1543a:	40a5      	lsls	r5, r4
   1543c:	002e      	movs	r6, r5
   1543e:	40a3      	lsls	r3, r4
   15440:	1e75      	subs	r5, r6, #1
   15442:	41ae      	sbcs	r6, r5
   15444:	40fa      	lsrs	r2, r7
   15446:	4333      	orrs	r3, r6
   15448:	4313      	orrs	r3, r2
   1544a:	2600      	movs	r6, #0
   1544c:	e7b0      	b.n	153b0 <__aeabi_d2f+0x38>
   1544e:	2400      	movs	r4, #0
   15450:	e7d5      	b.n	153fe <__aeabi_d2f+0x86>
   15452:	2202      	movs	r2, #2
   15454:	4252      	negs	r2, r2
   15456:	1b96      	subs	r6, r2, r6
   15458:	001a      	movs	r2, r3
   1545a:	40f2      	lsrs	r2, r6
   1545c:	2f20      	cmp	r7, #32
   1545e:	d009      	beq.n	15474 <__aeabi_d2f+0xfc>
   15460:	4809      	ldr	r0, [pc, #36]	; (15488 <__aeabi_d2f+0x110>)
   15462:	4684      	mov	ip, r0
   15464:	4464      	add	r4, ip
   15466:	40a3      	lsls	r3, r4
   15468:	432b      	orrs	r3, r5
   1546a:	1e5d      	subs	r5, r3, #1
   1546c:	41ab      	sbcs	r3, r5
   1546e:	2600      	movs	r6, #0
   15470:	4313      	orrs	r3, r2
   15472:	e79d      	b.n	153b0 <__aeabi_d2f+0x38>
   15474:	2300      	movs	r3, #0
   15476:	e7f7      	b.n	15468 <__aeabi_d2f+0xf0>
   15478:	2300      	movs	r3, #0
   1547a:	e7ad      	b.n	153d8 <__aeabi_d2f+0x60>
   1547c:	0034      	movs	r4, r6
   1547e:	e7bf      	b.n	15400 <__aeabi_d2f+0x88>
   15480:	fffffc80 	.word	0xfffffc80
   15484:	fffffc82 	.word	0xfffffc82
   15488:	fffffca2 	.word	0xfffffca2
   1548c:	682f2e2e 	.word	0x682f2e2e
   15490:	732f6c61 	.word	0x732f6c61
   15494:	682f6372 	.word	0x682f6372
   15498:	695f6c61 	.word	0x695f6c61
   1549c:	6d5f6332 	.word	0x6d5f6332
   154a0:	6e79735f 	.word	0x6e79735f
   154a4:	00632e63 	.word	0x00632e63
   154a8:	682f2e2e 	.word	0x682f2e2e
   154ac:	732f6c61 	.word	0x732f6c61
   154b0:	682f6372 	.word	0x682f6372
   154b4:	695f6c61 	.word	0x695f6c61
   154b8:	00632e6f 	.word	0x00632e6f
   154bc:	682f2e2e 	.word	0x682f2e2e
   154c0:	732f6c61 	.word	0x732f6c61
   154c4:	682f6372 	.word	0x682f6372
   154c8:	735f6c61 	.word	0x735f6c61
   154cc:	6d5f6970 	.word	0x6d5f6970
   154d0:	6e79735f 	.word	0x6e79735f
   154d4:	00632e63 	.word	0x00632e63
   154d8:	682f2e2e 	.word	0x682f2e2e
   154dc:	732f6c61 	.word	0x732f6c61
   154e0:	682f6372 	.word	0x682f6372
   154e4:	745f6c61 	.word	0x745f6c61
   154e8:	72656d69 	.word	0x72656d69
   154ec:	0000632e 	.word	0x0000632e
   154f0:	682f2e2e 	.word	0x682f2e2e
   154f4:	732f6c61 	.word	0x732f6c61
   154f8:	682f6372 	.word	0x682f6372
   154fc:	755f6c61 	.word	0x755f6c61
   15500:	74726173 	.word	0x74726173
   15504:	7973615f 	.word	0x7973615f
   15508:	632e636e 	.word	0x632e636e
   1550c:	00000000 	.word	0x00000000
   15510:	682f2e2e 	.word	0x682f2e2e
   15514:	752f6c61 	.word	0x752f6c61
   15518:	736c6974 	.word	0x736c6974
   1551c:	6372732f 	.word	0x6372732f
   15520:	6974752f 	.word	0x6974752f
   15524:	6c5f736c 	.word	0x6c5f736c
   15528:	2e747369 	.word	0x2e747369
   1552c:	00000063 	.word	0x00000063
   15530:	682f2e2e 	.word	0x682f2e2e
   15534:	752f6c61 	.word	0x752f6c61
   15538:	736c6974 	.word	0x736c6974
   1553c:	6372732f 	.word	0x6372732f
   15540:	6974752f 	.word	0x6974752f
   15544:	725f736c 	.word	0x725f736c
   15548:	62676e69 	.word	0x62676e69
   1554c:	65666675 	.word	0x65666675
   15550:	00632e72 	.word	0x00632e72
   15554:	682f2e2e 	.word	0x682f2e2e
   15558:	652f6c70 	.word	0x652f6c70
   1555c:	682f6369 	.word	0x682f6369
   15560:	655f6c70 	.word	0x655f6c70
   15564:	632e6369 	.word	0x632e6369
   15568:	00000000 	.word	0x00000000

0001556c <_map>:
   1556c:	00000008 00000028 682f2e2e 722f6c70     ....(...../hpl/r
   1557c:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
   1558c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
   1559c:	65735f6c 6d6f6372 0000632e              l_sercom.c..

000155a8 <sercomspi_regs>:
   155a8:	0020000c 00020000 00000000 00000008     .. .............
   155b8:	0020000c 00020000 00000000 0300000b     .. .............

000155c8 <Font16_Table>:
	...
   155e8:	000c0000 000c000c 000c000c 000c000c     ................
   155f8:	0000000c 0000000c 00000000 00000000     ................
   15608:	00000000 c01dc01d 80088008 00008008     ................
	...
   15628:	800d0000 800d800d c03f800d c03f001b     ..........?...?.
   15638:	001b001b 001b001b 00000000 00000000     ................
   15648:	801f0004 80318031 001e0038 8003000f     ....1.1.8.......
   15658:	80318031 0004003f 00000004 00000000     1.1.?...........
   15668:	00180000 00240024 8007c018 8031001e     ....$.$.......1.
   15678:	40024002 00008001 00000000 00000000     .@.@............
   15688:	00000000 0018000f 00180018 801d000c     ................
   15698:	00330037 0000801d 00000000 00000000     7.3.............
   156a8:	00000000 00070007 00020002 00000002     ................
	...
   156c8:	00030000 00060003 000c000e 000c000c     ................
   156d8:	000e000c 00030006 00000003 00000000     ................
   156e8:	00180000 000c0018 00060006 00060006     ................
   156f8:	00060006 001c000c 00000018 00000000     ................
   15708:	00060000 c03f0006 000fc03f 8019801f     ......?.?.......
	...
   1572c:	00040000 00040004 0004803f 00040004     ........?.......
	...
   15758:	00060000 000c0004 00080008 00000000     ................
	...
   15774:	0000803f 00000000 00000000 00000000     ?...............
	...
   15798:	000c0000 0000000c 00000000 00000000     ................
   157a8:	c000c000 80018001 00030003 000c0006     ................
   157b8:	0018000c 00300018 00000030 00000000     ......0.0.......
   157c8:	000e0000 8031001b 80318031 80318031     ......1.1.1.1.1.
   157d8:	001b8031 0000000e 00000000 00000000     1...............
   157e8:	00060000 0006003e 00060006 00060006     ....>...........
   157f8:	00060006 0000c03f 00000000 00000000     ....?...........
   15808:	000f0000 80318019 00038031 000c0006     ......1.1.......
   15818:	00300018 0000803f 00000000 00000000     ..0.?...........
   15828:	003f0000 80018061 001f0003 80018003     ..?.a...........
   15838:	80618001 0000003f 00000000 00000000     ..a.?...........
   15848:	00070000 000f0007 001b000b 00330013     ..............3.
   15858:	0003803f 0000800f 00000000 00000000     ?...............
   15868:	801f0000 00180018 001f0018 80018011     ................
   15878:	80218001 0000001f 00000000 00000000     ..!.............
   15888:	80070000 0018001c 00370030 80318039     ........0.7.9.1.
   15898:	80198031 0000000f 00000000 00000000     1...............
   158a8:	007f0000 00030043 00060006 00060006     ....C...........
   158b8:	000c000c 0000000c 00000000 00000000     ................
   158c8:	001f0000 80318031 001f8031 80318031     ....1.1.1...1.1.
   158d8:	80318031 0000001f 00000000 00000000     1.1.............
   158e8:	001e0000 80310033 80338031 8001801d     ....3.1.1.3.....
   158f8:	00070003 0000003c 00000000 00000000     ....<...........
	...
   15910:	000c000c 00000000 000c0000 0000000c     ................
	...
   15930:	00030003 00000000 00060000 00080004     ................
   15940:	00000008 00000000 00000000 0003c000     ................
   15950:	00180004 00180060 00030004 0000c000     ....`...........
	...
   15970:	c07f0000 c07f0000 00000000 00000000     ................
	...
   1598c:	00180060 00030004 0003c000 00180004     `...............
   1599c:	00000060 00000000 00000000 00000000     `...............
   159ac:	8031001f 80018031 000c0007 0000000c     ..1.1...........
   159bc:	0000000c 00000000 00000000 000e0000     ................
   159cc:	00210011 00270021 00290029 00200027     ..!.!.'.).).'. .
   159dc:	000e0011 00000000 00000000 00000000     ................
   159ec:	000f003f 80190009 801f8019 c030c030     ?...........0.0.
   159fc:	0000e079 00000000 00000000 00000000     y...............
   15a0c:	8031007f 80318031 8031003f 80318031     ..1.1.1.?.1.1.1.
   15a1c:	0000007f 00000000 00000000 00000000     ................
   15a2c:	c030401f 00604060 00600060 80304060     .@0.`@`.`.`.`@0.
   15a3c:	0000001f 00000000 00000000 00000000     ................
   15a4c:	8031007f c030c030 c030c030 8031c030     ..1.0.0.0.0.0.1.
   15a5c:	0000007f 00000000 00000000 00000000     ................
   15a6c:	8030807f 00328030 0032003e 80308030     ..0.0.2.>.2.0.0.
   15a7c:	0000807f 00000000 00000000 00000000     ................
   15a8c:	4030c07f 00324030 0032003e 00300030     ..0@0@2.>.2.0.0.
   15a9c:	0000007c 00000000 00000000 00000000     |...............
   15aac:	8031801e 00608060 c0670060 80318061     ..1.`.`.`.g.a.1.
   15abc:	0000001f 00000000 00000000 00000000     ................
   15acc:	8031c07b 80318031 8031803f 80318031     {.1.1.1.?.1.1.1.
   15adc:	0000c07b 00000000 00000000 00000000     {...............
   15aec:	0006c03f 00060006 00060006 00060006     ?...............
   15afc:	0000c03f 00000000 00000000 00000000     ?...............
   15b0c:	0003c01f 00030003 00630003 00630063     ..........c.c.c.
   15b1c:	0000003e 00000000 00000000 00000000     >...............
   15b2c:	8031c07b 00360033 003e003c 80310033     {.1.3.6.<.>.3.1.
   15b3c:	0000c079 00000000 00000000 00000000     y...............
   15b4c:	0018007e 00180018 40180018 40184018     ~..........@.@.@
   15b5c:	0000c07f 00000000 00000000 00000000     ................
   15b6c:	c060e0e0 c07bc071 c06ec06a c060c064     ..`.q.{.j.n.d.`.
   15b7c:	0000e0fb 00000000 00000000 00000000     ................
   15b8c:	8031c073 803d8039 80378035 80318033     s.1.9.=.5.7.3.1.
   15b9c:	00008079 00000000 00000000 00000000     y...............
   15bac:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
   15bbc:	0000001f 00000000 00000000 00000000     ................
   15bcc:	8031007f 80318031 003f8031 00300030     ..1.1.1.1.?.0.0.
   15bdc:	0000007e 00000000 00000000 00000000     ~...............
   15bec:	8031001f c060c060 c060c060 8031c060     ..1.`.`.`.`.`.1.
   15bfc:	c00c001f 0000801f 00000000 00000000     ................
   15c0c:	8031007f 80318031 0033003e 80318031     ..1.1.1.>.3.1.1.
   15c1c:	0000e07c 00000000 00000000 00000000     |...............
   15c2c:	8031801f 00388031 8003001f 80318031     ..1.1.8.....1.1.
   15c3c:	0000003f 00000000 00000000 00000000     ?...............
   15c4c:	804c807f 804c804c 000c000c 000c000c     ..L.L.L.........
   15c5c:	0000003f 00000000 00000000 00000000     ?...............
   15c6c:	8031c07b 80318031 80318031 80318031     {.1.1.1.1.1.1.1.
   15c7c:	0000001f 00000000 00000000 00000000     ................
   15c8c:	8031c07b 001b8031 001b001b 000e000a     {.1.1...........
   15c9c:	0000000e 00000000 00000000 00000000     ................
   15cac:	c060e0fb c06ec064 802ac06e 803b803b     ..`.d.n.n.*.;.;.
   15cbc:	00008031 00000000 00000000 00000000     1...............
   15ccc:	8031c07b 000e001b 000e000e 8031001b     {.1...........1.
   15cdc:	0000c07b 00000000 00000000 00000000     {...............
   15cec:	c030e079 000f8019 00060006 00060006     y.0.............
   15cfc:	0000801f 00000000 00000000 00000000     ................
   15d0c:	8021803f 00060023 000c0004 80308018     ?.!.#.........0.
   15d1c:	0000803f 00000000 00000000 80070000     ?...............
   15d2c:	00060006 00060006 00060006 00060006     ................
   15d3c:	00060006 00008007 00000000 00300030     ............0.0.
   15d4c:	00180018 000c000c 00030006 80010003     ................
   15d5c:	c0008001 0000c000 00000000 001e0000     ................
   15d6c:	00060006 00060006 00060006 00060006     ................
   15d7c:	00060006 0000001e 00000000 000a0004     ................
   15d8c:	0011000a 80208020 00000000 00000000     .... . .........
	...
   15dc4:	e0ff0000 00040008 00000002 00000000     ................
	...
   15df0:	8001001f 801f8001 80338031 0000c01d     ........1.3.....
	...
   15e08:	00700000 00300030 80390037 c030c030     ..p.0.0.7.9.0.0.
   15e18:	8039c030 00000077 00000000 00000000     0.9.w...........
	...
   15e30:	8031801e 00608060 80318060 0000001f     ..1.`.`.`.1.....
	...
   15e48:	80030000 80018001 8033801d 80618061     ..........3.a.a.
   15e58:	80338061 0000c01d 00000000 00000000     a.3.............
	...
   15e70:	8031001f c07fc060 c0300060 0000801f     ..1.`...`.0.....
	...
   15e88:	e0070000 000c000c 000c803f 000c000c     ........?.......
   15e98:	000c000c 0000803f 00000000 00000000     ....?...........
	...
   15eb0:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
   15ec0:	001f8001 00000000 00700000 00300030     ..........p.0.0.
   15ed0:	80390037 80318031 80318031 0000c07b     7.9.1.1.1.1.{...
	...
   15ee8:	00060000 00000006 0006001e 00060006     ................
   15ef8:	00060006 0000c03f 00000000 00000000     ....?...........
   15f08:	00060000 00000006 0003003f 00030003     ........?.......
   15f18:	00030003 00030003 003e0003 00000000     ..........>.....
   15f28:	00700000 00300030 00368037 003c003c     ..p.0.0.7.6.<.<.
   15f38:	00330036 0000c077 00000000 00000000     6.3.w...........
   15f48:	001e0000 00060006 00060006 00060006     ................
   15f58:	00060006 0000c03f 00000000 00000000     ....?...........
	...
   15f70:	c036807f c036c036 c036c036 0000e076     ..6.6.6.6.6.v...
	...
   15f90:	80390077 80318031 80318031 0000c07b     w.9.1.1.1.1.{...
	...
   15fb0:	8031001f c060c060 8031c060 0000001f     ..1.`.`.`.1.....
	...
   15fd0:	80390077 c030c030 8039c030 00300037     w.9.0.0.0.9.7.0.
   15fe0:	007c0030 00000000 00000000 00000000     0.|.............
   15ff0:	8033c01d 80618061 80338061 8001801d     ..3.a.a.a.3.....
   16000:	c0078001 00000000 00000000 00000000     ................
   16010:	c01c807b 00180018 00180018 0000007f     {...............
	...
   16030:	8031801f 001f003c 80318003 0000003f     ..1.<.....1.?...
	...
   16048:	00180000 00180018 0018007f 00180018     ................
   16058:	80180018 0000000f 00000000 00000000     ................
	...
   16070:	80318073 80318031 80338031 0000c01d     s.1.1.1.1.3.....
	...
   16090:	8031c07b 001b8031 000e001b 0000000e     {.1.1...........
	...
   160b0:	c060e0f1 c06ec064 803b803b 00008031     ..`.d.n.;.;.1...
	...
   160d0:	001bc07b 000e000e 001b000e 0000c07b     {...........{...
	...
   160f0:	c030e079 80198019 000f000b 00060006     y.0.............
   16100:	003e000c 00000000 00000000 00000000     ..>.............
   16110:	8021803f 000e0003 80300018 0000803f     ?.!.......0.?...
	...
   16128:	00060000 000c000c 000c000c 0018000c     ................
   16138:	000c000c 000c000c 00000006 00000000     ................
   16148:	00060000 00060006 00060006 00060006     ................
   16158:	00060006 00060006 00000006 00000000     ................
   16168:	000c0000 00060006 00060006 00030006     ................
   16178:	00060006 00060006 0000000c 00000000     ................
	...
   16190:	00180000 00038024 00000000 00000000     ....$...........
	...
   161a8:	74646957 74794268 203d2065 202c6425     WidthByte = %d, 
   161b8:	67696548 79427468 3d206574 0d642520     HeightByte = %d.
   161c8:	0800000a                                ....

000161cc <favicon_ico>:
   161cc:	474e5089 0a1a0a0d 0d000000 52444849     .PNG........IHDR
   161dc:	20000000 20000000 00000608 7a7a7300     ... ... .....szz
   161ec:	000000f4 49427304 08080854 64087c08     .....sBIT....|.d
   161fc:	00000088 59487009 00000073 000000ec     .....pHYs.......
   1620c:	287901ec 0000bd71 45741900 6f537458     ..y(q.....tEXtSo
   1621c:	61777466 77006572 692e7777 63736b6e     ftware.www.inksc
   1622c:	2e657061 9b67726f 001a3cee 49ff0400     ape.org..<.....I
   1623c:	58544144 7997c585 1c57144c ec333fc7     DATX...yL.W..?3.
   1624c:	2ebb5cb2 8882a2b0 45141647 d62ecf1a     .\......G..E....
   1625c:	61ed5ab6 d5624a2b 1de34da6 dad46aaf     .Z.a+Jb..M...j..
   1626c:	6351b5a4 5a969b1b c6a26adb a53136da     ..Qc...Z.j...61.
   1627c:	21a2d135 278d623d ada236b6 8820ae88     5..!=b.'.6.... .
   1628c:	22c8825c ccc7b2c8 40ff4cce a8239017     \..".....L.@..#.
   1629c:	4cffbf68 7efdef7e 3379fbef 819bdef3     h..L~..~..y3....
   162ac:	ddc259ff fc10106b 80ddbd84 24860047     .Y..k.......G..$
   162bc:	16fe2626 3da31313 f2f2f749 b76ed172     &&.....=I...r.n.
   162cc:	8480eaa7 b8d4d4d4 e2c763b1 aca8b972     .........c..r...
   162dc:	9336ecac 2458d8d8 74e9c249 08d8d8d2     ..6...X$I..t....
   162ec:	7d3e9f40 64ad5ab0 b7626666 5ae807db     @.>}.Z.dffb....Z
   162fc:	b6deec16 dd6d578e 7dac2377 3e5c384d     .....Wm.w#.}M8\>
   1630c:	9c246a2a 8f26beb5 76db02fd 228a2167     *j$...&....vg!."
   1631c:	2200ad00 a70b0a4d 001b7405 37b03034     ..."M....t..40.7
   1632c:	10004e8c 72a659d0 56c1d2e6 eb76ba19     .N...Y.r...V..v.
   1633c:	dbadd13a 782fa70a a8922bc8 d0d155ae     :...../x.+...U..
   1634c:	30053088 13206074 33d10546 0809e3bc     .0.0t` .F..3....
   1635c:	6d36c601 b1c8065d 50f6f97b 9110c603     ..6m]...{..P....
   1636c:	b10647e7 88899a60 0aaa221e 8a3ed565     .G..`...."..e.>.
   1637c:	efd664ca 69248dba 62619e2c 4ba1a274     .d....$i,.abt..K
   1638c:	b00a76e3 7a1ddf7d 2c5c8846 88310894     .v..}..zF.\,..1.
   1639c:	8222b67c dfd110b0 034f75bf 1be6ab00     |."......uO.....
   163ac:	79eac6b1 a7042539 77f3654b ec3bec75     ...y9%..Ke.wu.;.
   163bc:	11a5e3e4 1d0a0504 d8800f0d a99ce759     ............Y...
   163cc:	dfdcec61 1922a5c0 2b4370db 9972a2f3     a....."..pC+..r.
   163dc:	fc7da733 fb34dd95 110b0a7b 822cbcd9     3.}...4.{.....,.
   163ec:	31852fd9 ea2dc367 01c3ea9d 778d3ec8     ./.1g.-......>.w
   163fc:	c765acbf fa7e16fb b17b0a24 b74dfccc     ..e...~.$.{...M.
   1640c:	352abdc8 3290cbf5 67b8c75e db4ac875     ..*5...2^..gu.J.
   1641c:	621a8e59 6605c3e0 835a7d96 b2bc7724     Y..b...f.}Z.$w..
   1642c:	a8a805da ba4ef1f6 d1a48f03 830eb7af     ......N.........
   1643c:	ebe9605e 89aeb626 4689d0e4 083ba456     ^`..&......FV.;.
   1644c:	6f18120e 2dbc640b dbfdc190 46e1927f     ...o.d.-.......F
   1645c:	95805111 3cb81c5b a9b443ed 2361e80c     .Q..[..<.C....a#
   1646c:	37c150d6 f36b0f9f 9b0246d6 371b803e     .P.7..k..F..>..7
   1647c:	22b1981b 02d5eb8b e64dcf89 6c55cb99     ..."......M...Ul
   1648c:	9b54fc5c c147fbc1 639b3b8f 39d65bd5     \.T...G..;.c.[.9
   1649c:	00742e80 73fdd773 2eda3a37 8ac93df1     ..t.s..s7:...=..
   164ac:	0f747448 642baae4 b8a4ac5d fcd3a4b0     Htt...+d].......
   164bc:	021d1e96 557b7ecc 4ee90697 9e0aba75     .....~{U...Nu...
   164cc:	27781e84 79fd507c ff4a77f8 fb9ff6ce     ..x'|P.y.wJ.....
   164dc:	8d9c29b2 0fb476db 2e42ee70 8d3b1ebf     .)...v..p.B...;.
   164ec:	3b98144e 8d010d2b 46befb83 4dc62553     N..;+......FS%.M
   164fc:	f2524998 21451418 af1d3d3d 8a4a4bd7     .IR...E!==...KJ.
   1650c:	70d54d0d 7bfc5dbb 48c5b721 a7a7d31a     .M.p.].{!..H....
   1651c:	cc9c9c91 c967f395 80011a1c 6f34f490     ......g.......4o
   1652c:	2ce4edec cd9a3ac8 c5ed1f0b 8c8778db     ...,.:.......x..
   1653c:	a66356af 1a6b5d92 cc8a8531 52419f5a     .Vc..]k.1...Z.AR
   1654c:	0e1c18f2 21a16107 626938bc 6270ca8b     .....a.!.8ib..pb
   1655c:	a3f8c6fb 2e7afaba 9c92e6e6 aaa28c9c     ......z.........
   1656c:	ee7a735c 94e085ba f79696e4 434d023d     \sz.........=.MC
   1657c:	49141555 02451442 6b2bc008 f346aa28     U..IB.E...+k(.F.
   1658c:	251753c7 14dfe534 d5095e65 c37f1003     .S.%4...e^......
   1659c:	636f79ce a73300c7 d373224c 1d7a0c3c     .yoc..3.L"s.<.z.
   165ac:	01a66773 76c77ab0 899b927c c004de53     sg...z.v|...S...
   165bc:	f6e0b162 fc763878 b2de8764 5a5a47cf     b...x8v.d....GZZ
   165cc:	1816bd53 d79af040 85111be8 f82664c5     S...@........d&.
   165dc:	dcab6e6c 83890056 9c1c4813 fe612ad0     ln..V....H...*a.
   165ec:	62ad0d92 bb591451 e6cebdf6 10e64ade     ...bQ.Y......J..
   165fc:	3fbf9713 207d6dce 7c10a6aa e018ea47     ...?.m} ...|G...
   1660c:	82c96871 e7e7e495 7d35f3e3 f95ff511     qh........5}.._.
   1661c:	f3805b56 70e1cee7 238dfc38 edc08c47     V[.....p8..#G...
   1662c:	b8ad7376 d3c78f18 151540ad 16151415     vs.......@......
   1663c:	d3939392 0a69a00c 8844d29a afd72500     ......i...D..%..
   1664c:	b20a28a1 ef6e69e4 47474546 0335a023     .(...in.FEGG#.5.
   1665c:	19c39b84 5e106834 633087af d51401f3     ....4h.^..0c....
   1666c:	9bb757ab 0d252403 49d4fb23 01aa803f     .W...$%.#..I?...
   1667c:	94f1f1f1 b5609694 d3163fc6 75adaa96     ......`..?.....u
   1668c:	0064fb20 f1cc0055 1ea3d6f1 259fa7b7      .d.U..........%
   1669c:	d3a8d232 9589fdeb 933e5555 b0f158d1     2.......UU>..X..
   166ac:	c78f6e46 f6043060 df358636 43871ad5     Fn..`0..6.5....C
   166bc:	15f5ebd3 17d6a69a e89d5c14 e2e25ddf     .........\...]..
   166cc:	5f2cf6e2 c59e6cbe 6f27f162 6145f2d9     ..,_.l..b.'o..Ea
   166dc:	f59e5e5e c9800161 fc2d168b f9b366c5     ^^..a.....-..f..
   166ec:	43f19567 471fcd46 2a070c8e 7432c5a1     g..CF..G...*..2t
   166fc:	0ea75cb9 8a79f81c 57f66cd9 95d5d5d7     .\....y..l.W....
   1670c:	4039823e 271389e1 cb4b4aab 05f900fc     >.9@...'.JK.....
   1671c:	dd400d05 fdfef8bd b7d00c35 4780eb88     ..@.....5......G
   1672c:	ffba55fd c809d7c7 793ee41d 971e07fd     .U........>y....
   1673c:	2862fbd7 0000d764 45490000 42ae444e     ..b(d.....IEND.B
   1674c:	00008260 5054554f 4154533a 33252054     `...OUTP:STAT %3
   1675c:	00000073 0046464f 7074754f 69207475     s...OFF.Output i
   1676c:	464f2073 00000d46 00006b6f 00004e4f     s OFF...ok..ON..
   1677c:	7074754f 69207475 4e4f2073 0000000d     Output is ON....
   1678c:	5341454d 5e5b253a 00005d3f 544c4f56     MEAS:%[^?]..VOLT
   1679c:	00000000 7361654d 20657275 746c6f56     ....Measure Volt
   167ac:	20656761 6d6d6f63 0d646e61 00000000     age command.....
   167bc:	302e3834 00003133 52525543 00000000     48.031..CURR....
   167cc:	7361654d 20657275 72727543 20746e65     Measure Current 
   167dc:	6d6d6f63 0d646e61 00000000 32312e30     command.....0.12
   167ec:	00000031 5453522a 00000000 20544547     1...*RST....GET 
   167fc:	0000202f 65646e69 74682e78 73206c6d     / ..index.html s
   1680c:	0d646e65 00000000 20544547 7661662f     end.....GET /fav
   1681c:	6e6f6369 6f63692e 00000000 69766166     icon.ico....favi
   1682c:	2e6e6f63 206f6369 646e6573 0000000d     con.ico send....
   1683c:	50545448 312e312f 30303220 0d4b4f20     HTTP/1.1 200 OK.
   1684c:	6e6f430a 746e6574 7079542d 69203a65     .Content-Type: i
   1685c:	6567616d 692d782f 0d6e6f63 000a0a0d     mage/x-icon.....
   1686c:	20544547 7465672f 6c61765f 00000073     GET /get_vals...
   1687c:	50545448 312e312f 30303220 0d4b4f20     HTTP/1.1 200 OK.
   1688c:	6e6f430a 746e6574 7079542d 61203a65     .Content-Type: a
   1689c:	696c7070 69746163 6a2f6e6f 0d6e6f73     pplication/json.
   168ac:	7b0a0a0d 706d6122 2e253a22 222c6633     ...{"amp":%.3f,"
   168bc:	746c6f76 2e253a22 222c6633 74746177     volt":%.3f,"watt
   168cc:	2e253a22 222c6633 44706d61 3a224d4d     ":%.3f,"ampDMM":
   168dc:	66332e25 6f76222c 4d44746c 253a224d     %.3f,"voltDMM":%
   168ec:	2c66332e 74756f22 74617453 253a2265     .3f,"outState":%
   168fc:	72222c64 3a226d65 222c6425 22727265     d,"rem":%d,"err"
   1690c:	2c64253a 306e6922 64253a22 6e69222c     :%d,"in0":%d,"in
   1691c:	253a2231 69222c64 3a22326e 007d6425     1":%d,"in2":%d}.
   1692c:	20544547 7465732f 6c61765f 00000073     GET /set_vals...
   1693c:	3d706d61 76266625 3d746c6f 00006625     amp=%f&volt=%f..
   1694c:	203b6625 0a0d6625 00000000 50545448     %f; %f......HTTP
   1695c:	312e312f 30303220 0d4b4f20 6e6f430a     /1.1 200 OK..Con
   1696c:	746e6574 7079542d 61203a65 696c7070     tent-Type: appli
   1697c:	69746163 6a2f6e6f 0d6e6f73 7b0a0a0d     cation/json....{
   1698c:	63757322 73736563 72743a22 007d6575     "success":true}.
   1699c:	20544547 6e6f632f 6c6f7274 00000000     GET /control....
   169ac:	69766564 253d6563 5d265e5b 74636126     device=%[^&]&act
   169bc:	3d6e6f69 00007325 203b7325 0a0d7325     ion=%s..%s; %s..
   169cc:	00000000 006e6166 00006e6f 006d6572     ....fan.on..rem.
   169dc:	00757370                                psu.

000169e0 <psu_page>:
   169e0:	50545448 312e312f 30303220 0d4b4f20     HTTP/1.1 200 OK.
   169f0:	6e6f430a 746e6574 7079542d 74203a65     .Content-Type: t
   16a00:	2f747865 6c6d7468 0a0a0d0d 4f44213c     ext/html....<!DO
   16a10:	50595443 74682045 0a3e6c6d 6d74683c     CTYPE html>.<htm
   16a20:	616c206c 223d676e 3e226e65 65683c0a     l lang="en">.<he
   16a30:	0a3e6461 74656d3c 68632061 65737261     ad>.<meta charse
   16a40:	55223d74 382d4654 3c0a3e22 6c746974     t="UTF-8">.<titl
   16a50:	6f503e65 20726577 70707553 4320796c     e>Power Supply C
   16a60:	72746e6f 2f3c6c6f 6c746974 3c0a3e65     ontrol</title>.<
   16a70:	6c797473 620a3e65 2079646f 6f660a7b     style>.body {.fo
   16a80:	662d746e 6c696d61 41203a79 6c616972     nt-family: Arial
   16a90:	6173202c 732d736e 66697265 69640a3b     , sans-serif;.di
   16aa0:	616c7073 66203a79 3b78656c 656c660a     splay: flex;.fle
   16ab0:	69642d78 74636572 3a6e6f69 6c6f6320     x-direction: col
   16ac0:	3b6e6d75 696c610a 692d6e67 736d6574     umn;.align-items
   16ad0:	6563203a 7265746e 61700a3b 6e696464     : center;.paddin
   16ae0:	32203a67 3b787030 6361620a 6f72676b     g: 20px;.backgro
   16af0:	3a646e75 30662320 30663066 0a7d0a3b     und: #f0f0f0;.}.
   16b00:	6e6f632e 6e696174 7b207265 78616d0a     .container {.max
   16b10:	6469772d 203a6874 70303034 770a3b78     -width: 400px;.w
   16b20:	68746469 3031203a 0a3b2530 6b636162     idth: 100%;.back
   16b30:	756f7267 203a646e 74696877 700a3b65     ground: white;.p
   16b40:	69646461 203a676e 78703032 6f620a3b     adding: 20px;.bo
   16b50:	72656472 6461722d 3a737569 70303120     rder-radius: 10p
   16b60:	620a3b78 732d786f 6f646168 30203a77     x;.box-shadow: 0
   16b70:	31203020 20787030 61626772 202c3028      0 10px rgba(0, 
   16b80:	30202c30 2e30202c 0a3b2931 742e0a7d     0, 0, 0.1);.}..t
   16b90:	656c7469 740a7b20 2d747865 67696c61     itle {.text-alig
   16ba0:	63203a6e 65746e65 6d0a3b72 69677261     n: center;.margi
   16bb0:	6f622d6e 6d6f7474 3032203a 0a3b7870     n-bottom: 20px;.
   16bc0:	722e0a7d 202c776f 706e692e 722d7475     }..row, .input-r
   16bd0:	202c776f 6572702e 2d746573 20776f72     ow, .preset-row 
   16be0:	69640a7b 616c7073 66203a79 3b78656c     {.display: flex;
   16bf0:	73756a0a 79666974 6e6f632d 746e6574     .justify-content
   16c00:	7073203a 2d656361 77746562 3b6e6565     : space-between;
   16c10:	696c610a 692d6e67 736d6574 6563203a     .align-items: ce
   16c20:	7265746e 616d0a3b 6e696772 746f622d     nter;.margin-bot
   16c30:	3a6d6f74 70303120 7d0a3b78 6f722e0a     tom: 10px;.}..ro
   16c40:	616c2077 2c6c6562 6e692e20 2d747570     w label, .input-
   16c50:	20776f72 6562616c 2e202c6c 73657270     row label, .pres
   16c60:	722d7465 6c20776f 6c656261 660a7b20     et-row label {.f
   16c70:	3a78656c 0a3b3120 722e0a7d 6920776f     lex: 1;.}..row i
   16c80:	7475706e 692e202c 7475706e 776f722d     nput, .input-row
   16c90:	706e6920 202c7475 6572702e 2d746573      input, .preset-
   16ca0:	20776f72 75706e69 0a7b2074 74646977     row input {.widt
   16cb0:	31203a68 78703030 65740a3b 612d7478     h: 100px;.text-a
   16cc0:	6e67696c 6563203a 7265746e 0a7d0a3b     lign: center;.}.
   16cd0:	7475622e 2d6e6f74 20776f72 69640a7b     .button-row {.di
   16ce0:	616c7073 66203a79 3b78656c 73756a0a     splay: flex;.jus
   16cf0:	79666974 6e6f632d 746e6574 7073203a     tify-content: sp
   16d00:	2d656361 77746562 3b6e6565 72616d0a     ace-between;.mar
   16d10:	2d6e6967 3a706f74 70303220 7d0a3b78     gin-top: 20px;.}
   16d20:	75622e0a 6e6f7474 770a7b20 68746469     ..button {.width
   16d30:	3834203a 700a3b25 69646461 203a676e     : 48%;.padding: 
   16d40:	78703031 61620a3b 72676b63 646e756f     10px;.background
   16d50:	3023203a 66623730 630a3b66 726f6c6f     : #007bff;.color
   16d60:	6877203a 3b657469 726f620a 3a726564     : white;.border:
   16d70:	6e6f6e20 620a3b65 6564726f 61722d72      none;.border-ra
   16d80:	73756964 7035203a 630a3b78 6f737275     dius: 5px;.curso
   16d90:	70203a72 746e696f 0a3b7265 622e0a7d     r: pointer;.}..b
   16da0:	6f747475 6f683a6e 20726576 61620a7b     utton:hover {.ba
   16db0:	72676b63 646e756f 3023203a 62363530     ckground: #0056b
   16dc0:	7d0a3b33 72702e0a 74657365 776f722d     3;.}..preset-row
   16dd0:	640a7b20 6c707369 203a7961 78656c66      {.display: flex
   16de0:	756a0a3b 66697473 6f632d79 6e65746e     ;.justify-conten
   16df0:	73203a74 65636170 7465622d 6e656577     t: space-between
   16e00:	616d0a3b 6e696772 706f742d 3032203a     ;.margin-top: 20
   16e10:	0a3b7870 702e0a7d 65736572 75622d74     px;.}..preset-bu
   16e20:	6e6f7474 770a7b20 68746469 3233203a     tton {.width: 32
   16e30:	700a3b25 69646461 203a676e 78703031     %;.padding: 10px
   16e40:	61620a3b 72676b63 646e756f 3223203a     ;.background: #2
   16e50:	34376138 630a3b35 726f6c6f 6877203a     8a745;.color: wh
   16e60:	3b657469 726f620a 3a726564 6e6f6e20     ite;.border: non
   16e70:	620a3b65 6564726f 61722d72 73756964     e;.border-radius
   16e80:	7035203a 630a3b78 6f737275 70203a72     : 5px;.cursor: p
   16e90:	746e696f 0a3b7265 702e0a7d 65736572     ointer;.}..prese
   16ea0:	75622d74 6e6f7474 766f683a 7b207265     t-button:hover {
   16eb0:	6361620a 6f72676b 3a646e75 31322320     .background: #21
   16ec0:	38333838 0a7d0a3b 7065732e 74617261     8838;.}..separat
   16ed0:	7b20726f 6469770a 203a6874 25303031     or {.width: 100%
   16ee0:	65680a3b 74686769 7031203a 620a3b78     ;.height: 1px;.b
   16ef0:	676b6361 6e756f72 23203a64 3b646464     ackground: #ddd;
   16f00:	72616d0a 3a6e6967 70303220 3b302078     .margin: 20px 0;
   16f10:	2e0a7d0a 20776f72 6170732e 2d646563     .}..row .spaced-
   16f20:	75706e69 0a7b2074 6772616d 6c2d6e69     input {.margin-l
   16f30:	3a746665 70303120 7d0a3b78 74732e0a     eft: 10px;.}..st
   16f40:	73757461 646e692d 74616369 7b20726f     atus-indicator {
   16f50:	6469770a 203a6874 78703032 65680a3b     .width: 20px;.he
   16f60:	74686769 3032203a 0a3b7870 64726f62     ight: 20px;.bord
   16f70:	722d7265 75696461 35203a73 0a3b2530     er-radius: 50%;.
   16f80:	6b636162 756f7267 203a646e 63636323     background: #ccc
   16f90:	2a2f203b 66654420 746c7561 206f7420     ; /* Default to 
   16fa0:	79617267 0a2f2a20 692e0a7d 6369646e     gray */.}..indic
   16fb0:	726f7461 6e6f632d 6e696174 7b207265     ator-container {
   16fc0:	7369640a 79616c70 6c66203a 0a3b7865     .display: flex;.
   16fd0:	78656c66 7269642d 69746365 203a6e6f     flex-direction: 
   16fe0:	756c6f63 0a3b6e6d 67696c61 74692d6e     column;.align-it
   16ff0:	3a736d65 6e656320 3b726574 2e0a7d0a     ems: center;.}..
   17000:	69646e69 6f746163 616c2d72 206c6562     indicator-label 
   17010:	616d0a7b 6e696772 706f742d 7035203a     {.margin-top: 5p
   17020:	740a3b78 2d747865 67696c61 63203a6e     x;.text-align: c
   17030:	65746e65 7d0a3b72 68632e0a 626b6365     enter;.}..checkb
   17040:	632d786f 61746e6f 72656e69 640a7b20     ox-container {.d
   17050:	6c707369 203a7961 78656c66 6c610a3b     isplay: flex;.al
   17060:	2d6e6769 6d657469 63203a73 65746e65     ign-items: cente
   17070:	6d0a3b72 69677261 656c2d6e 203a7466     r;.margin-left: 
   17080:	78703031 0a7d0a3b 6568632e 6f626b63     10px;.}..checkbo
   17090:	6f632d78 6961746e 2072656e 6562616c     x-container labe
   170a0:	0a7b206c 6772616d 6c2d6e69 3a746665     l {.margin-left:
   170b0:	78703520 0a7d0a3b 74732f3c 3e656c79      5px;.}.</style>
   170c0:	682f3c0a 3e646165 6f623c0a 0a3e7964     .</head>.<body>.
   170d0:	7669643c 616c6320 223d7373 746e6f63     <div class="cont
   170e0:	656e6961 0a3e2272 2031683c 73616c63     ainer">.<h1 clas
   170f0:	74223d73 656c7469 6f503e22 20726577     s="title">Power 
   17100:	70707553 4320796c 72746e6f 2f3c6c6f     Supply Control</
   17110:	0a3e3168 7669643c 616c6320 223d7373     h1>.<div class="
   17120:	22776f72 6c3c0a3e 6c656261 6572503e     row">.<label>Pre
   17130:	20746573 20706d41 4d44202f 2f3c3a4d     set Amp / DMM:</
   17140:	6562616c 3c0a3e6c 75706e69 79742074     label>.<input ty
   17150:	223d6570 74786574 64692022 6d61223d     pe="text" id="am
   17160:	65732d70 72202274 6f646165 20796c6e     p-set" readonly 
   17170:	73616c63 73223d73 65636170 6e692d64     class="spaced-in
   17180:	22747570 693c0a3e 7475706e 70797420     put">.<input typ
   17190:	74223d65 22747865 3d646920 706d6122     e="text" id="amp
   171a0:	6d6d642d 65722022 6e6f6461 6320796c     -dmm" readonly c
   171b0:	7373616c 7073223d 64656361 706e692d     lass="spaced-inp
   171c0:	3e227475 642f3c0a 0a3e7669 7669643c     ut">.</div>.<div
   171d0:	616c6320 223d7373 22776f72 6c3c0a3e      class="row">.<l
   171e0:	6c656261 6572503e 20746573 746c6f56     abel>Preset Volt
   171f0:	44202f20 3c3a4d4d 62616c2f 0a3e6c65      / DMM:</label>.
   17200:	706e693c 74207475 3d657079 78657422     <input type="tex
   17210:	69202274 76223d64 2d746c6f 22746573     t" id="volt-set"
   17220:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   17230:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   17240:	706e693c 74207475 3d657079 78657422     <input type="tex
   17250:	69202274 76223d64 2d746c6f 226d6d64     t" id="volt-dmm"
   17260:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   17270:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   17280:	69642f3c 3c0a3e76 20766964 73616c63     </div>.<div clas
   17290:	72223d73 3e22776f 616c3c0a 3e6c6562     s="row">.<label>
   172a0:	74746157 57202d20 20747461 3a4d4d44     Watt - Watt DMM:
   172b0:	616c2f3c 3e6c6562 6e693c0a 20747570     </label>.<input 
   172c0:	65707974 6574223d 20227478 223d6469     type="text" id="
   172d0:	74746177 7369642d 79616c70 65722022     watt-display" re
   172e0:	6e6f6461 0a3e796c 69642f3c 3c0a3e76     adonly>.</div>.<
   172f0:	20766964 73616c63 69223d73 7475706e     div class="input
   17300:	776f722d 3c0a3e22 6562616c 6f66206c     -row">.<label fo
   17310:	61223d72 692d706d 7475706e 65533e22     r="amp-input">Se
   17320:	654e2074 6d412077 2f3c3a70 6562616c     t New Amp:</labe
   17330:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   17340:	74786574 64692022 6d61223d 6e692d70     text" id="amp-in
   17350:	22747570 2f3c0a3e 3e766964 69643c0a     put">.</div>.<di
   17360:	6c632076 3d737361 706e6922 722d7475     v class="input-r
   17370:	3e22776f 616c3c0a 206c6562 3d726f66     ow">.<label for=
   17380:	6c6f7622 6e692d74 22747570 7465533e     "volt-input">Set
   17390:	77654e20 6c6f5620 2f3c3a74 6562616c      New Volt:</labe
   173a0:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   173b0:	74786574 64692022 6f76223d 692d746c     text" id="volt-i
   173c0:	7475706e 3c0a3e22 7669642f 643c0a3e     nput">.</div>.<d
   173d0:	63207669 7373616c 7562223d 6e6f7474     iv class="button
   173e0:	776f722d 3c0a3e22 20766964 73616c63     -row">.<div clas
   173f0:	69223d73 6369646e 726f7461 6e6f632d     s="indicator-con
   17400:	6e696174 3e227265 69643c0a 6c632076     tainer">.<div cl
   17410:	3d737361 61747322 2d737574 69646e69     ass="status-indi
   17420:	6f746163 69202272 73223d64 75746174     cator" id="statu
   17430:	6e692d73 61636964 22726f74 642f3c3e     s-indicator"></d
   17440:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   17450:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   17460:	74754f3e 69642f3c 3c0a3e76 7669642f     >Out</div>.</div
   17470:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   17480:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   17490:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   174a0:	74617473 692d7375 6369646e 726f7461     status-indicator
   174b0:	64692022 7265223d 6e692d72 61636964     " id="err-indica
   174c0:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   174d0:	616c6320 223d7373 69646e69 6f746163      class="indicato
   174e0:	616c2d72 226c6562 7272453e 69642f3c     r-label">Err</di
   174f0:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   17500:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   17510:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   17520:	616c6320 223d7373 74617473 692d7375      class="status-i
   17530:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   17540:	6e692d30 61636964 22726f74 642f3c3e     0-indicator"></d
   17550:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   17560:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   17570:	304e493e 69642f3c 3c0a3e76 7669642f     >IN0</div>.</div
   17580:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   17590:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   175a0:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   175b0:	74617473 692d7375 6369646e 726f7461     status-indicator
   175c0:	64692022 6e69223d 6e692d31 61636964     " id="in1-indica
   175d0:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   175e0:	616c6320 223d7373 69646e69 6f746163      class="indicato
   175f0:	616c2d72 226c6562 314e493e 69642f3c     r-label">IN1</di
   17600:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   17610:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   17620:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   17630:	616c6320 223d7373 74617473 692d7375      class="status-i
   17640:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   17650:	6e692d32 61636964 22726f74 642f3c3e     2-indicator"></d
   17660:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   17670:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   17680:	324e493e 69642f3c 3c0a3e76 7669642f     >IN2</div>.</div
   17690:	3c0a0a3e 20766964 73616c63 63223d73     >..<div class="c
   176a0:	6b636568 2d786f62 746e6f63 656e6961     heckbox-containe
   176b0:	0a3e2272 706e693c 74207475 3d657079     r">.<input type=
   176c0:	65686322 6f626b63 69202278 72223d64     "checkbox" id="r
   176d0:	746f6d65 6f632d65 6f72746e 68632d6c     emote-control-ch
   176e0:	626b6365 3e22786f 616c3c0a 206c6562     eckbox">.<label 
   176f0:	3d726f66 6d657222 2d65746f 746e6f63     for="remote-cont
   17700:	2d6c6f72 63656863 786f626b 65523e22     rol-checkbox">Re
   17710:	65746f6d 6e6f4320 6c6f7274 616c2f3c     mote Control</la
   17720:	3e6c6562 642f3c0a 0a3e7669 69642f3c     bel>.</div>.</di
   17730:	0a0a3e76 7669643c 616c6320 223d7373     v>..<div class="
   17740:	74747562 722d6e6f 3e22776f 75623c0a     button-row">.<bu
   17750:	6e6f7474 616c6320 223d7373 74747562     tton class="butt
   17760:	20226e6f 6c797473 6d223d65 69677261     on" style="margi
   17770:	656c2d6e 203a7466 6f747561 6f20223b     n-left: auto;" o
   17780:	696c636e 223d6b63 56746573 65756c61     nclick="setValue
   17790:	22292873 7465533e 6c615620 3c736575     s()">Set Values<
   177a0:	7475622f 3e6e6f74 642f3c0a 0a3e7669     /button>.</div>.
   177b0:	7669643c 616c6320 223d7373 74747562     <div class="butt
   177c0:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   177d0:	616c6320 223d7373 74747562 20226e6f      class="button" 
   177e0:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   177f0:	69766544 27286563 27757370 6e6f272c     Device('psu','on
   17800:	3e222927 6e727554 55535020 3c6e4f20     ')">Turn PSU On<
   17810:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   17820:	616c6320 223d7373 74747562 20226e6f      class="button" 
   17830:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   17840:	69766544 27286563 27757370 666f272c     Device('psu','of
   17850:	22292766 7275543e 5350206e 664f2055     f')">Turn PSU Of
   17860:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   17870:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   17880:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   17890:	7669643c 616c6320 223d7373 74747562     <div class="butt
   178a0:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   178b0:	616c6320 223d7373 74747562 20226e6f      class="button" 
   178c0:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   178d0:	69766544 27286563 276e6166 6e6f272c     Device('fan','on
   178e0:	3e222927 6e727554 6e614620 3c6e4f20     ')">Turn Fan On<
   178f0:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   17900:	616c6320 223d7373 74747562 20226e6f      class="button" 
   17910:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   17920:	69766544 27286563 276e6166 666f272c     Device('fan','of
   17930:	22292766 7275543e 6146206e 664f206e     f')">Turn Fan Of
   17940:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   17950:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   17960:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   17970:	7669643c 616c6320 223d7373 73657270     <div class="pres
   17980:	722d7465 3e22776f 75623c0a 6e6f7474     et-row">.<button
   17990:	616c6320 223d7373 73657270 622d7465      class="preset-b
   179a0:	6f747475 6f20226e 696c636e 223d6b63     utton" onclick="
   179b0:	50746573 65736572 29312874 56353e22     setPreset(1)">5V
   179c0:	3c413120 7475622f 3e6e6f74 75623c0a      1A</button>.<bu
   179d0:	6e6f7474 616c6320 223d7373 73657270     tton class="pres
   179e0:	622d7465 6f747475 6f20226e 696c636e     et-button" oncli
   179f0:	223d6b63 50746573 65736572 29322874     ck="setPreset(2)
   17a00:	32313e22 41322056 75622f3c 6e6f7474     ">12V 2A</button
   17a10:	623c0a3e 6f747475 6c63206e 3d737361     >.<button class=
   17a20:	65727022 2d746573 74747562 20226e6f     "preset-button" 
   17a30:	6c636e6f 3d6b6369 74657322 73657250     onclick="setPres
   17a40:	33287465 323e2229 32205634 622f3c41     et(3)">24V 2A</b
   17a50:	6f747475 3c0a3e6e 7669642f 2f3c0a3e     utton>.</div>.</
   17a60:	3e766964 63733c0a 74706972 75660a3e     div>.<script>.fu
   17a70:	6974636e 66206e6f 68637465 756c6156     nction fetchValu
   17a80:	29287365 660a7b20 68637465 672f2728     es() {.fetch('/g
   17a90:	765f7465 27736c61 742e0a29 286e6568     et_vals')..then(
   17aa0:	70736572 65736e6f 203e3d20 70736572     response => resp
   17ab0:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   17ac0:	64286e65 20617461 7b203e3d 636f640a     en(data => {.doc
   17ad0:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   17ae0:	64497942 6d612728 65732d70 2e292774     ById('amp-set').
   17af0:	756c6176 203d2065 61746164 706d612e     value = data.amp
   17b00:	466f742e 64657869 3b293228 636f640a     .toFixed(2);.doc
   17b10:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   17b20:	64497942 6f762728 732d746c 29277465     ById('volt-set')
   17b30:	6c61762e 3d206575 74616420 6f762e61     .value = data.vo
   17b40:	742e746c 7869466f 32286465 640a3b29     lt.toFixed(2);.d
   17b50:	6d75636f 2e746e65 45746567 656d656c     ocument.getEleme
   17b60:	7942746e 27286449 74746177 7369642d     ntById('watt-dis
   17b70:	79616c70 762e2927 65756c61 64203d20     play').value = d
   17b80:	2e617461 74746177 466f742e 64657869     ata.watt.toFixed
   17b90:	3b293228 636f640a 6e656d75 65672e74     (2);.document.ge
   17ba0:	656c4574 746e656d 64497942 6d612728     tElementById('am
   17bb0:	6d642d70 2e29276d 756c6176 203d2065     p-dmm').value = 
   17bc0:	61746164 706d612e 2e4d4d44 69466f74     data.ampDMM.toFi
   17bd0:	28646578 0a3b2932 75636f64 746e656d     xed(2);.document
   17be0:	7465672e 6d656c45 42746e65 28644979     .getElementById(
   17bf0:	6c6f7627 6d642d74 2e29276d 756c6176     'volt-dmm').valu
   17c00:	203d2065 61746164 6c6f762e 4d4d4474     e = data.voltDMM
   17c10:	466f742e 64657869 3b293228 2f2f0a0a     .toFixed(2);..//
   17c20:	64705520 20657461 20656874 74617473      Update the stat
   17c30:	69207375 6369646e 726f7461 6c6f6320     us indicator col
   17c40:	6220726f 64657361 206e6f20 5374756f     or based on outS
   17c50:	65746174 6e6f630a 73207473 75746174     tate.const statu
   17c60:	646e4973 74616369 3d20726f 636f6420     sIndicator = doc
   17c70:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   17c80:	64497942 74732728 73757461 646e692d     ById('status-ind
   17c90:	74616369 2927726f 66690a3b 61642820     icator');.if (da
   17ca0:	6f2e6174 74537475 20657461 203d3d3d     ta.outState === 
   17cb0:	7b202930 6174730a 49737574 6369646e     0) {.statusIndic
   17cc0:	726f7461 7974732e 622e656c 676b6361     ator.style.backg
   17cd0:	6e756f72 203d2064 63632327 203b2763     round = '#ccc'; 
   17ce0:	67202f2f 0a796172 6c65207d 69206573     // gray.} else i
   17cf0:	64282066 2e617461 5374756f 65746174     f (data.outState
   17d00:	3d3d3d20 20293120 74730a7b 73757461      === 1) {.status
   17d10:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   17d20:	6b636162 756f7267 3d20646e 32232720     background = '#2
   17d30:	34376138 203b2735 67202f2f 6e656572     8a745'; // green
   17d40:	65207d0a 2065736c 28206669 61746164     .} else if (data
   17d50:	74756f2e 74617453 3d3d2065 2932203d     .outState === 2)
   17d60:	730a7b20 75746174 646e4973 74616369      {.statusIndicat
   17d70:	732e726f 656c7974 6361622e 6f72676b     or.style.backgro
   17d80:	20646e75 2327203d 35336364 3b273534     und = '#dc3545';
   17d90:	202f2f20 0a646572 2f0a0a7d 7055202f      // red.}..// Up
   17da0:	65746164 65687420 72726520 6920726f     date the error i
   17db0:	6369646e 726f7461 6c6f6320 6220726f     ndicator color b
   17dc0:	64657361 206e6f20 0a727265 736e6f63     ased on err.cons
   17dd0:	72652074 646e4972 74616369 3d20726f     t errIndicator =
   17de0:	636f6420 6e656d75 65672e74 656c4574      document.getEle
   17df0:	746e656d 64497942 72652728 6e692d72     mentById('err-in
   17e00:	61636964 27726f74 650a3b29 6e497272     dicator');.errIn
   17e10:	61636964 2e726f74 6c797473 61622e65     dicator.style.ba
   17e20:	72676b63 646e756f 64203d20 2e617461     ckground = data.
   17e30:	20727265 203d3d3d 203f2031 63642327     err === 1 ? '#dc
   17e40:	35343533 203a2027 63632327 203b2763     3545' : '#ccc'; 
   17e50:	72202f2f 69206465 72652066 2c726f72     // red if error,
   17e60:	61726720 746f2079 77726568 0a657369      gray otherwise.
   17e70:	202f2f0a 61647055 74206574 49206568     .// Update the I
   17e80:	202c304e 2c314e49 324e4920 646e6920     N0, IN1, IN2 ind
   17e90:	74616369 2073726f 65736162 6e6f2064     icators based on
   17ea0:	306e6920 6e69202c 69202c31 630a326e      in0, in1, in2.c
   17eb0:	74736e6f 306e6920 69646e49 6f746163     onst in0Indicato
   17ec0:	203d2072 75636f64 746e656d 7465672e     r = document.get
   17ed0:	6d656c45 42746e65 28644979 306e6927     ElementById('in0
   17ee0:	646e692d 74616369 2927726f 6f630a3b     -indicator');.co
   17ef0:	2074736e 49316e69 6369646e 726f7461     nst in1Indicator
   17f00:	64203d20 6d75636f 2e746e65 45746567      = document.getE
   17f10:	656d656c 7942746e 27286449 2d316e69     lementById('in1-
   17f20:	69646e69 6f746163 3b292772 6e6f630a     indicator');.con
   17f30:	69207473 6e49326e 61636964 20726f74     st in2Indicator 
   17f40:	6f64203d 656d7563 672e746e 6c457465     = document.getEl
   17f50:	6e656d65 49794274 69272864 692d326e     ementById('in2-i
   17f60:	6369646e 726f7461 0a3b2927 306e690a     ndicator');..in0
   17f70:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   17f80:	6b636162 756f7267 3d20646e 74616420     background = dat
   17f90:	6e692e61 3d3d2030 2031203d 2327203f     a.in0 === 1 ? '#
   17fa0:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   17fb0:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   17fc0:	65766974 7267202c 6f207961 72656874     tive, gray other
   17fd0:	65736977 316e690a 69646e49 6f746163     wise.in1Indicato
   17fe0:	74732e72 2e656c79 6b636162 756f7267     r.style.backgrou
   17ff0:	3d20646e 74616420 6e692e61 3d3d2031     nd = data.in1 ==
   18000:	2031203d 2327203f 37613832 20273534     = 1 ? '#28a745' 
   18010:	2327203a 27636363 2f2f203b 65726720     : '#ccc'; // gre
   18020:	69206e65 63612066 65766974 7267202c     en if active, gr
   18030:	6f207961 72656874 65736977 326e690a     ay otherwise.in2
   18040:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   18050:	6b636162 756f7267 3d20646e 74616420     background = dat
   18060:	6e692e61 3d3d2032 2031203d 2327203f     a.in2 === 1 ? '#
   18070:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   18080:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   18090:	65766974 7267202c 6f207961 72656874     tive, gray other
   180a0:	65736977 2f2f0a0a 64705520 20657461     wise..// Update 
   180b0:	20656874 63656863 786f626b 61747320     the checkbox sta
   180c0:	62206574 64657361 206e6f20 6f6d6572     te based on remo
   180d0:	74436574 640a6c72 6d75636f 2e746e65     teCtrl.document.
   180e0:	45746567 656d656c 7942746e 27286449     getElementById('
   180f0:	6f6d6572 632d6574 72746e6f 632d6c6f     remote-control-c
   18100:	6b636568 27786f62 68632e29 656b6365     heckbox').checke
   18110:	203d2064 61746164 6d65722e 3d3d3d20     d = data.rem ===
   18120:	0a3b3120 2e0a297d 63746163 72652868      1;.})..catch(er
   18130:	20726f72 63203e3d 6f736e6f 652e656c     ror => console.e
   18140:	726f7272 72452728 20726f72 63746566     rror('Error fetc
   18150:	676e6968 6c617620 3a736575 65202c27     hing values:', e
   18160:	726f7272 0a3b2929 660a0a7d 74636e75     rror));.}..funct
   18170:	206e6f69 56746573 65756c61 20292873     ion setValues() 
   18180:	6f630a7b 2074736e 20706d61 6170203d     {.const amp = pa
   18190:	46657372 74616f6c 636f6428 6e656d75     rseFloat(documen
   181a0:	65672e74 656c4574 746e656d 64497942     t.getElementById
   181b0:	6d612728 6e692d70 27747570 61762e29     ('amp-input').va
   181c0:	2965756c 6f630a3b 2074736e 746c6f76     lue);.const volt
   181d0:	70203d20 65737261 616f6c46 6f642874      = parseFloat(do
   181e0:	656d7563 672e746e 6c457465 6e656d65     cument.getElemen
   181f0:	49794274 76272864 2d746c6f 75706e69     tById('volt-inpu
   18200:	2e292774 756c6176 0a3b2965 63746566     t').value);.fetc
   18210:	2f602868 5f746573 736c6176 706d613f     h(`/set_vals?amp
   18220:	617b243d 267d706d 746c6f76 767b243d     =${amp}&volt=${v
   18230:	7d746c6f 2e0a2960 6e656874 73657228     olt}`)..then(res
   18240:	736e6f70 3e3d2065 73657220 736e6f70     ponse => respons
   18250:	736a2e65 29286e6f 742e0a29 286e6568     e.json())..then(
   18260:	61746164 203e3d20 66690a7b 61642820     data => {.if (da
   18270:	732e6174 65636375 20297373 65660a7b     ta.success) {.fe
   18280:	56686374 65756c61 3b292873 65207d0a     tchValues();.} e
   18290:	2065736c 6c610a7b 28747265 72724527     lse {.alert('Err
   182a0:	7320726f 69747465 7620676e 65756c61     or setting value
   182b0:	3b292773 7d0a7d0a 632e0a29 68637461     s');.}.})..catch
   182c0:	72726528 3d20726f 6f63203e 6c6f736e     (error => consol
   182d0:	72652e65 28726f72 72724527 7320726f     e.error('Error s
   182e0:	69747465 7620676e 65756c61 2c273a73     etting values:',
   182f0:	72726520 2929726f 0a7d0a3b 6e75660a      error));.}..fun
   18300:	6f697463 6f63206e 6f72746e 7665446c     ction controlDev
   18310:	28656369 69766564 202c6563 69746361     ice(device, acti
   18320:	20296e6f 65660a7b 28686374 6f632f60     on) {.fetch(`/co
   18330:	6f72746e 65643f6c 65636976 647b243d     ntrol?device=${d
   18340:	63697665 61267d65 6f697463 7b243d6e     evice}&action=${
   18350:	69746361 607d6e6f 742e0a29 286e6568     action}`)..then(
   18360:	70736572 65736e6f 203e3d20 70736572     response => resp
   18370:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   18380:	64286e65 20617461 7b203e3d 2066690a     en(data => {.if 
   18390:	74616428 75732e61 73656363 7b202973     (data.success) {
   183a0:	656c610a 60287472 65647b24 65636976     .alert(`${device
   183b0:	556f742e 72657070 65736143 207d2928     .toUpperCase()} 
   183c0:	63617b24 6e6f6974 556f742e 72657070     ${action.toUpper
   183d0:	65736143 207d2928 63637553 66737365     Case()} Successf
   183e0:	29606c75 207d0a3b 65736c65 610a7b20     ul`);.} else {.a
   183f0:	7472656c 72456028 20726f72 63617b24     lert(`Error ${ac
   18400:	6e6f6974 676e697d 647b2420 63697665     tion}ing ${devic
   18410:	29607d65 0a7d0a3b 2e0a297d 63746163     e}`);.}.})..catc
   18420:	72652868 20726f72 63203e3d 6f736e6f     h(error => conso
   18430:	652e656c 726f7272 72456028 20726f72     le.error(`Error 
   18440:	63617b24 6e6f6974 676e697d 647b2420     ${action}ing ${d
   18450:	63697665 603a7d65 7265202c 29726f72     evice}:`, error)
   18460:	7d0a3b29 75660a0a 6974636e 73206e6f     );.}..function s
   18470:	72507465 74657365 65727028 29746573     etPreset(preset)
   18480:	6c0a7b20 61207465 202c706d 746c6f76      {.let amp, volt
   18490:	66690a3b 72702820 74657365 203d3d20     ;.if (preset == 
   184a0:	7b202931 706d610a 31203d20 3b35322e     1) {.amp = 1.25;
   184b0:	6c6f760a 203d2074 3b332e35 65207d0a     .volt = 5.3;.} e
   184c0:	2065736c 28206669 73657270 3d207465     lse if (preset =
   184d0:	2932203d 610a7b20 3d20706d 302e3220     = 2) {.amp = 2.0
   184e0:	6f760a3b 3d20746c 2e323120 7d0a3b30     ;.volt = 12.0;.}
   184f0:	736c6520 66692065 72702820 74657365      else if (preset
   18500:	203d3d20 7b202933 706d610a 32203d20      == 3) {.amp = 2
   18510:	0a3b302e 746c6f76 32203d20 3b302e34     .0;.volt = 24.0;
   18520:	640a7d0a 6d75636f 2e746e65 45746567     .}.document.getE
   18530:	656d656c 7942746e 27286449 2d706d61     lementById('amp-
   18540:	75706e69 2e292774 756c6176 203d2065     input').value = 
   18550:	3b706d61 636f640a 6e656d75 65672e74     amp;.document.ge
   18560:	656c4574 746e656d 64497942 6f762728     tElementById('vo
   18570:	692d746c 7475706e 762e2927 65756c61     lt-input').value
   18580:	76203d20 3b746c6f 7465730a 756c6156      = volt;.setValu
   18590:	29287365 0a7d0a3b 636f640a 6e656d75     es();.}..documen
   185a0:	65672e74 656c4574 746e656d 64497942     t.getElementById
   185b0:	65722728 65746f6d 6e6f632d 6c6f7274     ('remote-control
   185c0:	6568632d 6f626b63 2e292778 45646461     -checkbox').addE
   185d0:	746e6576 7473694c 72656e65 68632728     ventListener('ch
   185e0:	65676e61 66202c27 74636e75 286e6f69     ange', function(
   185f0:	0a7b2029 736e6f63 63612074 6e6f6974     ) {.const action
   18600:	74203d20 2e736968 63656863 2064656b      = this.checked 
   18610:	6f27203f 3a20276e 666f2720 0a3b2766     ? 'on' : 'off';.
   18620:	63746566 2f602868 746e6f63 3f6c6f72     fetch(`/control?
   18630:	69766564 723d6563 61266d65 6f697463     device=rem&actio
   18640:	7b243d6e 69746361 607d6e6f 742e0a29     n=${action}`)..t
   18650:	286e6568 70736572 65736e6f 203e3d20     hen(response => 
   18660:	70736572 65736e6f 6f736a2e 2929286e     response.json())
   18670:	68742e0a 64286e65 20617461 7b203e3d     ..then(data => {
   18680:	2066690a 74616428 75732e61 73656363     .if (data.succes
   18690:	7b202973 6e6f630a 656c6f73 676f6c2e     s) {.console.log
   186a0:	65526028 65746f6d 6e6f6320 6c6f7274     (`Remote control
   186b0:	617b2420 6f697463 73207d6e 65636375      ${action} succe
   186c0:	75667373 3b29606c 65207d0a 2065736c     ssful`);.} else 
   186d0:	6c610a7b 28747265 72724560 2420726f     {.alert(`Error $
   186e0:	7463617b 7d6e6f69 20676e69 6f6d6572     {action}ing remo
   186f0:	63206574 72746e6f 29606c6f 0a7d0a3b     te control`);.}.
   18700:	2e0a297d 63746163 72652868 20726f72     })..catch(error 
   18710:	63203e3d 6f736e6f 652e656c 726f7272     => console.error
   18720:	72456028 20726f72 63617b24 6e6f6974     (`Error ${action
   18730:	676e697d 6d657220 2065746f 746e6f63     }ing remote cont
   18740:	3a6c6f72 65202c60 726f7272 0a3b2929     rol:`, error));.
   18750:	0a3b297d 7465730a 65746e49 6c617672     });..setInterval
   18760:	74656628 61566863 7365756c 3031202c     (fetchValues, 10
   18770:	3b293030 732f3c0a 70697263 3c0a3e74     00);.</script>.<
   18780:	646f622f 3c0a3e79 6d74682f 000a3e6c     /body>.</html>..
   18790:	000048e2 000048f6 00004908 0000490e     .H...H...I...I..
   187a0:	00004930 00004944 00004982 00004958     0I..DI...I..XI..
   187b0:	00004978 00004896 000048a2 000048b4     xI...H...H...H..
   187c0:	000048cc 00004e50 00004e98 00004ee0     .H..PN...N...N..
   187d0:	00004efe 00004e0e 00004e2e              .N...N...N..

000187dc <ExCvt>:
   187dc:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
   187ec:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
   187fc:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
   1880c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
   1881c:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
   1882c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
   1883c:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
   1884c:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
   1885c:	33544146 20202032 00000000 3a2c2b2a     FAT32   ....*+,:
   1886c:	3e3d3c3b 227c5d5b 00007f3f 63204453     ;<=>[]|"?...SD c
   1887c:	20647261 6e756f6d 20646574 63637573     ard mounted succ
   1888c:	66737365 796c6c75 00000d2e 63204453     essfully....SD c
   1889c:	20647261 6e756f6d 61662074 64656c69     ard mount failed
   188ac:	00000d2e 7473694c 20676e69 656c6966     ....Listing file
   188bc:	6e692073 72696420 6f746365 203a7972     s in directory: 
   188cc:	0a0d7325 00000000 5249445b 2520205d     %s......[DIR]  %
   188dc:	000a0d73 4c49465b 25205d45 25282073     s...[FILE] %s (%
   188ec:	6220756c 73657479 000a0d29 6c696146     lu bytes)...Fail
   188fc:	74206465 706f206f 64206e65 63657269     ed to open direc
   1890c:	79726f74 7325203a 00000a0d 64616552     tory: %s....Read
   1891c:	20676e69 656c6966 7325203a 00000a0d     ing file: %s....
   1892c:	656c6946 65706f20 3a64656e 0d732520     File opened: %s.
   1893c:	0000000a 6c696146 74206465 706f206f     ....Failed to op
   1894c:	66206e65 3a656c69 0d732520 0000000a     en file: %s.....
   1895c:	656c6946 6f6c6320 2e646573 0000000d     File closed.....
   1896c:	20646e45 6620666f 20656c69 63616572     End of file reac
   1897c:	3a646568 0d732520 0000000a 6c696146     hed: %s.....Fail
   1898c:	74206465 6572206f 66206461 3a656c69     ed to read file:
   1899c:	0d732520 0000000a 6c696146 74206465      %s.....Failed t
   189ac:	7277206f 20657469 66206f74 3a656c69     o write to file:
   189bc:	0d732520 0000000a 0000002f 74736574      %s...../...test
   189cc:	7478742e 00000000 6d617845 20656c70     .txt....Example 
   189dc:	656e696c 206f7420 65707061 7420646e     line to append t
   189ec:	6874206f 69662065 0d2e656c 0000000a     o the file......
   189fc:	656e694c 69727720 6e657474 63757320     Line written suc
   18a0c:	73736563 6c6c7566 000d2e79 666e6f63     cessfully...conf
   18a1c:	742e6769 00007478 64616552 756c2520     ig.txt..Read %lu
   18a2c:	74796220 203a7365 732a2e25 00000a0d      bytes: %.*s....
   18a3c:	65480a0d 2c6f6c6c 4d415320 21313244     ..Hello, SAMD21!
   18a4c:	0000000d 44454c4f 53455420 00000054     ....OLED TEST...
   18a5c:	66667542 4f207265 66726576 00776f6c     Buffer Overflow.
   18a6c:	46465542 4e454c20 0064253d 00009830     BUFF LEN=%d.0...
   18a7c:	00009780 00009780 0000977e 00009822     ........~..."...
   18a8c:	00009822 00009818 0000977e 00009822     ".......~..."...
   18a9c:	00009818 00009822 0000977e 00009828     ...."...~...(...
   18aac:	00009828 00009828 000098b8 00009b3c     (...(.......<...
   18abc:	00009b1e 00009ad8 000099f6 00009ad8     ................
   18acc:	00009b10 00009ad8 000099f6 00009b1e     ................
   18adc:	00009b1e 00009b10 000099f6 000099ee     ................
   18aec:	000099ee 000099ee 00009d54 0000a19c     ........T.......
   18afc:	0000a05c 0000a05c 0000a058 0000a174     \...\...X...t...
   18b0c:	0000a174 0000a166 0000a058 0000a174     t...f...X...t...
   18b1c:	0000a166 0000a174 0000a058 0000a17c     f...t...X...|...
   18b2c:	0000a17c 0000a17c 0000a380              |...|.......

00018b38 <_global_impure_ptr>:
   18b38:	20000090 0000c87c 0000c8f0 0000c8f0     ... |...........
   18b48:	0000c860 0000c8f0 0000c8f0 0000c8f0     `...............
   18b58:	0000c8f0 0000c8f0 0000c8f0 0000c868     ............h...
   18b68:	0000c34a 0000c8f0 0000c304 0000c354     J...........T...
   18b78:	0000c8f0 0000c3a0 0000c58a 0000c58a     ................
   18b88:	0000c58a 0000c58a 0000c58a 0000c58a     ................
   18b98:	0000c58a 0000c58a 0000c58a 0000c8f0     ................
   18ba8:	0000c8f0 0000c8f0 0000c8f0 0000c8f0     ................
   18bb8:	0000c8f0 0000c8f0 0000c8f0 0000c8f0     ................
   18bc8:	0000c8f0 0000c3a8 0000c4f0 0000c8f0     ................
   18bd8:	0000c4f0 0000c8f0 0000c8f0 0000c8f0     ................
   18be8:	0000c8f0 0000c5ba 0000c8f0 0000c8f0     ................
   18bf8:	0000c5c2 0000c8f0 0000c8f0 0000c8f0     ................
   18c08:	0000c8f0 0000c8f0 0000c664 0000c8f0     ........d.......
   18c18:	0000c8f0 0000c696 0000c8f0 0000c8f0     ................
   18c28:	0000c8f0 0000c8f0 0000c8f0 0000c8f0     ................
   18c38:	0000c8f0 0000c8f0 0000c8f0 0000c8f0     ................
   18c48:	0000c790 0000c7c4 0000c4f0 0000c4f0     ................
   18c58:	0000c4f0 0000c7d6 0000c7c4 0000c8f0     ................
   18c68:	0000c8f0 0000c7de 0000c8f0 0000c6f8     ................
   18c78:	0000c8be 0000c834 0000c72e 0000c8f0     ....4...........
   18c88:	0000c736 0000c8f0 0000c88c 0000c8f0     6...............
   18c98:	0000c8f0 0000c7ee 00464e49 00666e69     ........INF.inf.
   18ca8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   18cb8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   18cc8:	37363534 62613938 66656463 00000000     456789abcdef....
   18cd8:	6c756e28 0000296c 00000030              (null)..0...

00018ce4 <blanks.7223>:
   18ce4:	20202020 20202020 20202020 20202020                     

00018cf4 <zeroes.7224>:
   18cf4:	30303030 30303030 30303030 30303030     0000000000000000
   18d04:	0000d968 0000daa8 0000daa8 0000daa8     h...............
   18d14:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d24:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d34:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d44:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d54:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d64:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d74:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d84:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18d94:	0000daa8 0000d904 0000daa8 0000daa8     ................
   18da4:	0000daa8 0000daa8 0000dbb2 0000daa8     ................
   18db4:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18dc4:	0000db96 0000db96 0000db96 0000db96     ................
   18dd4:	0000db96 0000db96 0000db96 0000db96     ................
   18de4:	0000db96 0000db96 0000daa8 0000daa8     ................
   18df4:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18e04:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18e14:	0000db88 0000db66 0000daa8 0000db66     ....f.......f...
   18e24:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18e34:	0000db60 0000daa8 0000daa8 0000db54     `...........T...
   18e44:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18e54:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18e64:	0000db4e 0000daa8 0000daa8 0000db32     N...........2...
   18e74:	0000daa8 0000daa8 0000daa8 0000daa8     ................
   18e84:	0000daa8 0000daa8 0000daa8 0000db22     ............"...
   18e94:	0000db1c 0000db66 0000db66 0000db66     ....f...f...f...
   18ea4:	0000db0c 0000d970 0000daa8 0000daa8     ....p...........
   18eb4:	0000da84 0000daa8 0000dad2 0000dac2     ................
   18ec4:	0000da6a 0000daa8 0000daa8 0000da62     j...........b...
   18ed4:	0000daa8 0000d9c0 0000daa8 0000daa8     ................
   18ee4:	0000db4e 0000dc32 0000de08 0000dc32     N...2.......2...
   18ef4:	0000de08 0000de08 0000dbf6 0000dbba     ................
   18f04:	0000dbba 0000dbba 0000dbba 0000dbba     ................
   18f14:	0000dbba 0000dbba 0000dbba 0000dbba     ................
   18f24:	0000de08 0000de08 0000de08 0000de08     ................
   18f34:	0000de08 0000de08 0000de08 0000ddec     ................
   18f44:	0000de08 0000de08 0000de08 0000dda2     ................
   18f54:	0000dd94 0000de08 0000de08 0000dc7c     ............|...
   18f64:	0000de08 0000de08 0000de08 0000de08     ................
   18f74:	0000dc4c 0000de08 0000de08 0000de08     L...............
   18f84:	0000de08 0000de08 0000dc40 0000de08     ........@.......
   18f94:	0000de08 0000de08 0000de08 0000ddfa     ................
   18fa4:	0000de08 0000de08 0000de08 0000de08     ................
   18fb4:	0000de08 0000de08 0000de08 0000ddec     ................
   18fc4:	0000de08 0000de08 0000de08 0000dda2     ................
   18fd4:	0000dd94 0000de08 0000de08 0000dc7c     ............|...
   18fe4:	0000de08 0000de08 0000de08 0000de08     ................
   18ff4:	0000dc4c 0000de08 0000de08 0000de08     L...............
   19004:	0000de08 0000de08 0000dc40 0000de08     ........@.......
   19014:	0000de08 0000de08 0000de08 0000ddfa     ................
   19024:	0000e032 0000df8a 0000e032 0000df8a     2.......2.......
   19034:	0000df8a 0000dfd6 0000dfc6 0000dfc6     ................
   19044:	0000dfc6 0000dfc6 0000dfc6 0000dfc6     ................
   19054:	0000dfc6 0000e022 0000e022 0000df8a     ...."...".......
   19064:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   19074:	0000df8a 0000df8a 0000dfba 0000dfba     ................
   19084:	0000dfba 0000dfba 0000dfba 0000dfba     ................
   19094:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   190a4:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   190b4:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   190c4:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   190d4:	0000df8a 0000df56 0000df8a 0000df8a     ....V...........
   190e4:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   190f4:	0000df8a 0000df8a 0000dfba 0000dfba     ................
   19104:	0000dfba 0000dfba 0000dfba 0000dfba     ................
   19114:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   19124:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   19134:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   19144:	0000df8a 0000df8a 0000df8a 0000df8a     ................
   19154:	0000df8a 0000df56 646c2565 00000000     ....V...e%ld....

00019164 <basefix.7294>:
   19164:	0001000a 00030002 00050004 00070006     ................
   19174:	00090008 000b000a 000d000c 000f000e     ................
   19184:	00000010 0000ec16 0000ecea 0000ecea     ................
   19194:	0000ec02 0000ecea 0000ecea 0000ecea     ................
   191a4:	0000ecea 0000ecea 0000ecea 0000ecbc     ................
   191b4:	0000e7ce 0000ecea 0000e7c4 0000e7d8     ................
   191c4:	0000ecea 0000ec0c 0000e998 0000e998     ................
   191d4:	0000e998 0000e998 0000e998 0000e998     ................
   191e4:	0000e998 0000e998 0000e998 0000ecea     ................
   191f4:	0000ecea 0000ecea 0000ecea 0000ecea     ................
   19204:	0000ecea 0000ecea 0000ecea 0000ecea     ................
   19214:	0000ecea 0000ecd2 0000ec26 0000ecea     ........&.......
   19224:	0000ec26 0000ecea 0000ecea 0000ecea     &...............
   19234:	0000ecea 0000eb8c 0000ecea 0000ecea     ................
   19244:	0000eb96 0000ecea 0000ecea 0000ecea     ................
   19254:	0000ecea 0000ecea 0000ebc4 0000ecea     ................
   19264:	0000ecea 0000ebf2 0000ecea 0000ecea     ................
   19274:	0000ecea 0000ecea 0000ecea 0000ecea     ................
   19284:	0000ecea 0000ecea 0000ecea 0000ecea     ................
   19294:	0000e9d8 0000ea0e 0000ec26 0000ec26     ........&...&...
   192a4:	0000ec26 0000eab6 0000ea0e 0000ecea     &...............
   192b4:	0000ecea 0000eac0 0000ecea 0000ead2     ................
   192c4:	0000ece6 0000eb00 0000eb2a 0000ecea     ........*.......
   192d4:	0000eb34 0000ecea 0000ece2 0000ecea     4...............
   192e4:	0000ecea 0000e826                       ....&...

000192ec <blanks.7238>:
   192ec:	20202020 20202020 20202020 20202020                     

000192fc <zeroes.7239>:
   192fc:	30303030 30303030 30303030 30303030     0000000000000000
   1930c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   1931c:	00000043 49534f50 00000058 0000002e     C...POSIX.......
   1932c:	00000000                                ....

00019330 <__mprec_bigtens>:
   19330:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   19340:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   19350:	7f73bf3c 75154fdd                       <.s..O.u

00019358 <__mprec_tens>:
   19358:	00000000 3ff00000 00000000 40240000     .......?......$@
   19368:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   19378:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   19388:	00000000 412e8480 00000000 416312d0     .......A......cA
   19398:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   193a8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   193b8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   193c8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   193d8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   193e8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   193f8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   19408:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   19418:	79d99db4 44ea7843                       ...yCx.D

00019420 <p05.6055>:
   19420:	00000005 00000019 0000007d 00012a1c     ........}....*..
   19430:	00012ab6 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   19440:	00012ab6 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   19450:	00012aaa 00012aaa 00012aaa 00012aaa     .*...*...*...*..
   19460:	00012aaa 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   19470:	00012ab6 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   19480:	00012ab6 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   19490:	00012ab6 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   194a0:	00012ab6 00012ab6 00012ab6 00012aaa     .*...*...*...*..
   194b0:	00012ab6 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   194c0:	00012ab6 00012ab6 00012ab6 00012ab6     .*...*...*...*..
   194d0:	00012ab6 00012ab6 00012a50 00012ab6     .*...*..P*...*..
   194e0:	00012af2 00013448 0001346a 00013460     .*..H4..j4..`4..
   194f0:	0001345a 0001343e 0001346a 0000666e     Z4..>4..j4..nf..
   19500:	74696e69 00000079 00006e61              inity...an..

0001950c <fpi.6141>:
   1950c:	00000035 fffffbce 000003cb 00000001     5...............
   1951c:	00000000                                ....

00019520 <fpinan.6177>:
   19520:	00000034 fffffbce 000003cb 00000001     4...............
	...

00019538 <tinytens>:
   19538:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   19548:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   19558:	64ac6f43 11680628                       Co.d(.h.

00019560 <_ctype_>:
   19560:	20202000 20202020 28282020 20282828     .         ((((( 
   19570:	20202020 20202020 20202020 20202020                     
   19580:	10108820 10101010 10101010 10101010      ...............
   19590:	04040410 04040404 10040404 10101010     ................
   195a0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   195b0:	01010101 01010101 01010101 10101010     ................
   195c0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   195d0:	02020202 02020202 02020202 10101010     ................
   195e0:	00000020 00000000 00000000 00000000      ...............
	...

00019664 <__hexdig>:
	...
   19694:	13121110 17161514 00001918 00000000     ................
   196a4:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
   196c4:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

00019764 <_init>:
   19764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19766:	46c0      	nop			; (mov r8, r8)
   19768:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1976a:	bc08      	pop	{r3}
   1976c:	469e      	mov	lr, r3
   1976e:	4770      	bx	lr

00019770 <__init_array_start>:
   19770:	0000ff11 	.word	0x0000ff11

00019774 <__frame_dummy_init_array_entry>:
   19774:	000000cd                                ....

00019778 <_fini>:
   19778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1977a:	46c0      	nop			; (mov r8, r8)
   1977c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1977e:	bc08      	pop	{r3}
   19780:	469e      	mov	lr, r3
   19782:	4770      	bx	lr

00019784 <__fini_array_start>:
   19784:	000000a5 	.word	0x000000a5
