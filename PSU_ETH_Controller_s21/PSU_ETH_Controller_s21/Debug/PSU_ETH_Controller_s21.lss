
PSU_ETH_Controller_s21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012510  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012510  00012510  00022510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a50  20000000  00012518  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000c90  20000a50  00012f68  00030a50  2**2
                  ALLOC
  4 .stack        00002000  200016e0  00013bf8  00030a50  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a7a  2**0
                  CONTENTS, READONLY
  7 .debug_info   0003ae2d  00000000  00000000  00030ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005016  00000000  00000000  0006b900  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00019d58  00000000  00000000  00070916  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000012c0  00000000  00000000  0008a66e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001318  00000000  00000000  0008b92e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009ed9  00000000  00000000  0008cc46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014fd3  00000000  00000000  00096b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062ead  00000000  00000000  000abaf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000047a4  00000000  00000000  0010e9a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
	PWM_1_PORT_init();
	pwm_init(&PWM_1, TC7, _tc_get_pwm());
}

void system_init(void)
{
       0:	e0 36 00 20 09 01 00 00 05 01 00 00 05 01 00 00     .6. ............
	...
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
	tmp &= ~PORT_PINCFG_PMUXEN;
      2c:	05 01 00 00 00 00 00 00 00 00 00 00 05 01 00 00     ................

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      3c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
      4c:	75 0d 00 00 69 0b 00 00 05 01 00 00 05 01 00 00     u...i...........
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      5c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      6c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
      7c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
      8c:	61 19 00 00 71 19 00 00 05 01 00 00 05 01 00 00     a...q...........
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
      9c:	05 01 00 00 05 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
	tmp &= ~PORT_PINCFG_PMUXEN;
      b0:	2b00      	cmp	r3, #0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
      bc:	7023      	strb	r3, [r4, #0]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      be:	bd10      	pop	{r4, pc}
      c0:	20000a50 	.word	0x20000a50
      c4:	00000000 	.word	0x00000000
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      c8:	00012518 	.word	0x00012518

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
	tmp &= ~PORT_PINCFG_PMUXEN;
      ce:	b510      	push	{r4, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
	tmp &= ~PORT_PINCFG_PMUXEN;
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
      ec:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000a54 	.word	0x20000a54
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
      f8:	00012518 	.word	0x00012518
      fc:	00012518 	.word	0x00012518
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     100:	00000000 	.word	0x00000000

00000104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     104:	e7fe      	b.n	104 <Dummy_Handler>
	...

00000108 <Reset_Handler>:
{
     108:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     10a:	4a12      	ldr	r2, [pc, #72]	; (154 <Reset_Handler+0x4c>)
     10c:	4b12      	ldr	r3, [pc, #72]	; (158 <Reset_Handler+0x50>)
     10e:	429a      	cmp	r2, r3
     110:	d009      	beq.n	126 <Reset_Handler+0x1e>
     112:	4b11      	ldr	r3, [pc, #68]	; (158 <Reset_Handler+0x50>)
     114:	4a0f      	ldr	r2, [pc, #60]	; (154 <Reset_Handler+0x4c>)
     116:	e003      	b.n	120 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     118:	6811      	ldr	r1, [r2, #0]
     11a:	6019      	str	r1, [r3, #0]
     11c:	3304      	adds	r3, #4
     11e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     120:	490e      	ldr	r1, [pc, #56]	; (15c <Reset_Handler+0x54>)
     122:	428b      	cmp	r3, r1
     124:	d3f8      	bcc.n	118 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     126:	4b0e      	ldr	r3, [pc, #56]	; (160 <Reset_Handler+0x58>)
     128:	e002      	b.n	130 <Reset_Handler+0x28>
                *pDest++ = 0;
     12a:	2200      	movs	r2, #0
     12c:	601a      	str	r2, [r3, #0]
     12e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a0c      	ldr	r2, [pc, #48]	; (164 <Reset_Handler+0x5c>)
     132:	4293      	cmp	r3, r2
     134:	d3f9      	bcc.n	12a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	4a0c      	ldr	r2, [pc, #48]	; (168 <Reset_Handler+0x60>)
     138:	21ff      	movs	r1, #255	; 0xff
     13a:	4b0c      	ldr	r3, [pc, #48]	; (16c <Reset_Handler+0x64>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     140:	4a0b      	ldr	r2, [pc, #44]	; (170 <Reset_Handler+0x68>)
     142:	6851      	ldr	r1, [r2, #4]
     144:	2380      	movs	r3, #128	; 0x80
     146:	430b      	orrs	r3, r1
     148:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     14a:	f007 f947 	bl	73dc <__libc_init_array>
        main();
     14e:	f004 fe45 	bl	4ddc <main>
     152:	e7fe      	b.n	152 <Reset_Handler+0x4a>
     154:	00012518 	.word	0x00012518
     158:	20000000 	.word	0x20000000
     15c:	20000a50 	.word	0x20000a50
     160:	20000a50 	.word	0x20000a50
     164:	200016e0 	.word	0x200016e0
     168:	e000ed00 	.word	0xe000ed00
     16c:	00000000 	.word	0x00000000
     170:	41004000 	.word	0x41004000

00000174 <atomic_enter_critical>:
	TIMER_0_init();

	PWM_0_init();

	PWM_1_init();
}
     174:	f3ef 8310 	mrs	r3, PRIMASK
     178:	6003      	str	r3, [r0, #0]
     17a:	b672      	cpsid	i
     17c:	f3bf 8f5f 	dmb	sy
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
	__disable_irq();
	__DMB();
}
     180:	4770      	bx	lr

00000182 <atomic_leave_critical>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     182:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     186:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     188:	f383 8810 	msr	PRIMASK, r3
}
     18c:	4770      	bx	lr
	...

00000190 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     190:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     192:	4b04      	ldr	r3, [pc, #16]	; (1a4 <delay_us+0x14>)
     194:	681c      	ldr	r4, [r3, #0]
     196:	f000 fc4b 	bl	a30 <_get_cycles_for_us>
     19a:	0001      	movs	r1, r0
     19c:	0020      	movs	r0, r4
     19e:	f000 fc5b 	bl	a58 <_delay_cycles>
}
     1a2:	bd10      	pop	{r4, pc}
     1a4:	20000a6c 	.word	0x20000a6c

000001a8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     1a8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     1aa:	4b04      	ldr	r3, [pc, #16]	; (1bc <delay_ms+0x14>)
     1ac:	681c      	ldr	r4, [r3, #0]
     1ae:	f000 fc48 	bl	a42 <_get_cycles_for_ms>
     1b2:	0001      	movs	r1, r0
     1b4:	0020      	movs	r0, r4
     1b6:	f000 fc4f 	bl	a58 <_delay_cycles>
}
     1ba:	bd10      	pop	{r4, pc}
     1bc:	20000a6c 	.word	0x20000a6c

000001c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     1c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     1c2:	2501      	movs	r5, #1
     1c4:	2400      	movs	r4, #0

	while (upper >= lower) {
     1c6:	e007      	b.n	1d8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     1c8:	4a0d      	ldr	r2, [pc, #52]	; (200 <process_ext_irq+0x40>)
     1ca:	58b3      	ldr	r3, [r6, r2]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d000      	beq.n	1d2 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     1d0:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     1d2:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     1d4:	3a01      	subs	r2, #1
     1d6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     1d8:	42ac      	cmp	r4, r5
     1da:	d8fa      	bhi.n	1d2 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     1dc:	192b      	adds	r3, r5, r4
     1de:	105b      	asrs	r3, r3, #1
     1e0:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     1e2:	2a00      	cmp	r2, #0
     1e4:	d1f5      	bne.n	1d2 <process_ext_irq+0x12>
     1e6:	21ff      	movs	r1, #255	; 0xff
     1e8:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     1ea:	00de      	lsls	r6, r3, #3
     1ec:	4904      	ldr	r1, [pc, #16]	; (200 <process_ext_irq+0x40>)
     1ee:	1989      	adds	r1, r1, r6
     1f0:	6849      	ldr	r1, [r1, #4]
     1f2:	4281      	cmp	r1, r0
     1f4:	d0e8      	beq.n	1c8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     1f6:	d2ed      	bcs.n	1d4 <process_ext_irq+0x14>
			lower = middle + 1;
     1f8:	3201      	adds	r2, #1
     1fa:	b2d4      	uxtb	r4, r2
     1fc:	e7ec      	b.n	1d8 <process_ext_irq+0x18>
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	20000a70 	.word	0x20000a70

00000204 <ext_irq_init>:
{
     204:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     206:	2300      	movs	r3, #0
     208:	2b00      	cmp	r3, #0
     20a:	d003      	beq.n	214 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     20c:	4807      	ldr	r0, [pc, #28]	; (22c <ext_irq_init+0x28>)
     20e:	f000 fc3d 	bl	a8c <_ext_irq_init>
}
     212:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     214:	4a06      	ldr	r2, [pc, #24]	; (230 <ext_irq_init+0x2c>)
     216:	00d9      	lsls	r1, r3, #3
     218:	1850      	adds	r0, r2, r1
     21a:	2401      	movs	r4, #1
     21c:	4264      	negs	r4, r4
     21e:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     220:	2000      	movs	r0, #0
     222:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     224:	3301      	adds	r3, #1
     226:	b29b      	uxth	r3, r3
     228:	e7ee      	b.n	208 <ext_irq_init+0x4>
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	000001c1 	.word	0x000001c1
     230:	20000a70 	.word	0x20000a70

00000234 <ext_irq_register>:
{
     234:	b5f0      	push	{r4, r5, r6, r7, lr}
     236:	46c6      	mov	lr, r8
     238:	b500      	push	{lr}
     23a:	b084      	sub	sp, #16
     23c:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
     23e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     240:	2b00      	cmp	r3, #0
     242:	d010      	beq.n	266 <ext_irq_register+0x32>
	bool    found = false;
     244:	2300      	movs	r3, #0
     246:	4698      	mov	r8, r3
	if (NULL == cb) {
     248:	2900      	cmp	r1, #0
     24a:	d01b      	beq.n	284 <ext_irq_register+0x50>
	if (!found) {
     24c:	4643      	mov	r3, r8
     24e:	2b00      	cmp	r3, #0
     250:	d146      	bne.n	2e0 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     252:	2b00      	cmp	r3, #0
     254:	d124      	bne.n	2a0 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
     256:	00da      	lsls	r2, r3, #3
     258:	4c2a      	ldr	r4, [pc, #168]	; (304 <ext_irq_register+0xd0>)
     25a:	5912      	ldr	r2, [r2, r4]
     25c:	2a00      	cmp	r2, #0
     25e:	d018      	beq.n	292 <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     260:	3301      	adds	r3, #1
     262:	b2db      	uxtb	r3, r3
     264:	e7f5      	b.n	252 <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
     266:	00dc      	lsls	r4, r3, #3
     268:	4a26      	ldr	r2, [pc, #152]	; (304 <ext_irq_register+0xd0>)
     26a:	1912      	adds	r2, r2, r4
     26c:	6852      	ldr	r2, [r2, #4]
     26e:	9801      	ldr	r0, [sp, #4]
     270:	4282      	cmp	r2, r0
     272:	d002      	beq.n	27a <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     274:	3301      	adds	r3, #1
     276:	b2db      	uxtb	r3, r3
     278:	e7e2      	b.n	240 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
     27a:	4b22      	ldr	r3, [pc, #136]	; (304 <ext_irq_register+0xd0>)
     27c:	50e1      	str	r1, [r4, r3]
			found          = true;
     27e:	2301      	movs	r3, #1
     280:	4698      	mov	r8, r3
			break;
     282:	e7e1      	b.n	248 <ext_irq_register+0x14>
		if (!found) {
     284:	4643      	mov	r3, r8
     286:	2b00      	cmp	r3, #0
     288:	d035      	beq.n	2f6 <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
     28a:	9801      	ldr	r0, [sp, #4]
     28c:	f000 fc46 	bl	b1c <_ext_irq_enable>
     290:	e02d      	b.n	2ee <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
     292:	00dd      	lsls	r5, r3, #3
     294:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
     296:	1965      	adds	r5, r4, r5
     298:	9a01      	ldr	r2, [sp, #4]
     29a:	606a      	str	r2, [r5, #4]
				found           = true;
     29c:	2201      	movs	r2, #1
     29e:	4690      	mov	r8, r2
     2a0:	2200      	movs	r2, #0
     2a2:	e001      	b.n	2a8 <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     2a4:	3201      	adds	r2, #1
     2a6:	b2d2      	uxtb	r2, r2
     2a8:	0019      	movs	r1, r3
     2aa:	4311      	orrs	r1, r2
     2ac:	d118      	bne.n	2e0 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     2ae:	4915      	ldr	r1, [pc, #84]	; (304 <ext_irq_register+0xd0>)
     2b0:	00dc      	lsls	r4, r3, #3
     2b2:	190c      	adds	r4, r1, r4
     2b4:	6867      	ldr	r7, [r4, #4]
     2b6:	00d4      	lsls	r4, r2, #3
     2b8:	1909      	adds	r1, r1, r4
     2ba:	6849      	ldr	r1, [r1, #4]
     2bc:	428f      	cmp	r7, r1
     2be:	d2f1      	bcs.n	2a4 <ext_irq_register+0x70>
     2c0:	1c4c      	adds	r4, r1, #1
     2c2:	d0ef      	beq.n	2a4 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
     2c4:	a902      	add	r1, sp, #8
     2c6:	468c      	mov	ip, r1
     2c8:	4f0e      	ldr	r7, [pc, #56]	; (304 <ext_irq_register+0xd0>)
     2ca:	00d1      	lsls	r1, r2, #3
     2cc:	1879      	adds	r1, r7, r1
     2ce:	4664      	mov	r4, ip
     2d0:	c941      	ldmia	r1!, {r0, r6}
     2d2:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
     2d4:	00dd      	lsls	r5, r3, #3
     2d6:	197d      	adds	r5, r7, r5
     2d8:	4661      	mov	r1, ip
     2da:	c911      	ldmia	r1!, {r0, r4}
     2dc:	c511      	stmia	r5!, {r0, r4}
     2de:	e7e1      	b.n	2a4 <ext_irq_register+0x70>
	if (!found) {
     2e0:	4643      	mov	r3, r8
     2e2:	2b00      	cmp	r3, #0
     2e4:	d00a      	beq.n	2fc <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
     2e6:	2101      	movs	r1, #1
     2e8:	9801      	ldr	r0, [sp, #4]
     2ea:	f000 fc17 	bl	b1c <_ext_irq_enable>
}
     2ee:	b004      	add	sp, #16
     2f0:	bc04      	pop	{r2}
     2f2:	4690      	mov	r8, r2
     2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     2f6:	200d      	movs	r0, #13
     2f8:	4240      	negs	r0, r0
     2fa:	e7f8      	b.n	2ee <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
     2fc:	200d      	movs	r0, #13
     2fe:	4240      	negs	r0, r0
     300:	e7f5      	b.n	2ee <ext_irq_register+0xba>
     302:	46c0      	nop			; (mov r8, r8)
     304:	20000a70 	.word	0x20000a70

00000308 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     308:	b510      	push	{r4, lr}
     30a:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     30c:	3814      	subs	r0, #20
     30e:	8b84      	ldrh	r4, [r0, #28]
     310:	ab01      	add	r3, sp, #4
     312:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     314:	0014      	movs	r4, r2
     316:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     318:	4a06      	ldr	r2, [pc, #24]	; (334 <i2c_m_sync_write+0x2c>)
     31a:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     31c:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     31e:	0019      	movs	r1, r3
     320:	f000 ff44 	bl	11ac <_i2c_m_sync_transfer>

	if (ret) {
     324:	2800      	cmp	r0, #0
     326:	d102      	bne.n	32e <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     328:	0020      	movs	r0, r4
     32a:	b004      	add	sp, #16
     32c:	bd10      	pop	{r4, pc}
		return ret;
     32e:	0004      	movs	r4, r0
     330:	e7fa      	b.n	328 <i2c_m_sync_write+0x20>
     332:	46c0      	nop			; (mov r8, r8)
     334:	ffff8000 	.word	0xffff8000

00000338 <i2c_m_sync_read>:
{
     338:	b510      	push	{r4, lr}
     33a:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     33c:	3814      	subs	r0, #20
     33e:	8b84      	ldrh	r4, [r0, #28]
     340:	ab01      	add	r3, sp, #4
     342:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     344:	0014      	movs	r4, r2
     346:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     348:	4a06      	ldr	r2, [pc, #24]	; (364 <i2c_m_sync_read+0x2c>)
     34a:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     34c:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     34e:	0019      	movs	r1, r3
     350:	f000 ff2c 	bl	11ac <_i2c_m_sync_transfer>
	if (ret) {
     354:	2800      	cmp	r0, #0
     356:	d102      	bne.n	35e <i2c_m_sync_read+0x26>
}
     358:	0020      	movs	r0, r4
     35a:	b004      	add	sp, #16
     35c:	bd10      	pop	{r4, pc}
		return ret;
     35e:	0004      	movs	r4, r0
     360:	e7fa      	b.n	358 <i2c_m_sync_read+0x20>
     362:	46c0      	nop			; (mov r8, r8)
     364:	ffff8001 	.word	0xffff8001

00000368 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	0004      	movs	r4, r0
     36c:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     36e:	1e43      	subs	r3, r0, #1
     370:	4198      	sbcs	r0, r3
     372:	b2c0      	uxtb	r0, r0
     374:	225e      	movs	r2, #94	; 0x5e
     376:	4907      	ldr	r1, [pc, #28]	; (394 <i2c_m_sync_init+0x2c>)
     378:	f000 fb18 	bl	9ac <assert>

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     37c:	0029      	movs	r1, r5
     37e:	0020      	movs	r0, r4
     380:	f000 fe88 	bl	1094 <_i2c_m_sync_init>
	if (init_status) {
     384:	2800      	cmp	r0, #0
     386:	d103      	bne.n	390 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     388:	4b03      	ldr	r3, [pc, #12]	; (398 <i2c_m_sync_init+0x30>)
     38a:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     38c:	4b03      	ldr	r3, [pc, #12]	; (39c <i2c_m_sync_init+0x34>)
     38e:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     390:	bd70      	pop	{r4, r5, r6, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	0000f240 	.word	0x0000f240
     398:	00000339 	.word	0x00000339
     39c:	00000309 	.word	0x00000309

000003a0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     3a0:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     3a2:	f000 fec9 	bl	1138 <_i2c_m_sync_enable>
}
     3a6:	bd10      	pop	{r4, pc}

000003a8 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     3a8:	0589      	lsls	r1, r1, #22
     3aa:	0d89      	lsrs	r1, r1, #22
     3ac:	2380      	movs	r3, #128	; 0x80
     3ae:	00db      	lsls	r3, r3, #3
     3b0:	401a      	ands	r2, r3
     3b2:	430a      	orrs	r2, r1
     3b4:	8382      	strh	r2, [r0, #28]
}
     3b6:	0010      	movs	r0, r2
     3b8:	4770      	bx	lr
	...

000003bc <i2c_m_sync_cmd_write>:

/**
 * \brief Sync version of i2c write command
 */
int32_t i2c_m_sync_cmd_write(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     3bc:	b570      	push	{r4, r5, r6, lr}
     3be:	b086      	sub	sp, #24
     3c0:	0004      	movs	r4, r0
     3c2:	0016      	movs	r6, r2
     3c4:	001d      	movs	r5, r3
     3c6:	466b      	mov	r3, sp
     3c8:	71d9      	strb	r1, [r3, #7]
     3ca:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     3cc:	8b82      	ldrh	r2, [r0, #28]
     3ce:	a903      	add	r1, sp, #12
     3d0:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     3d2:	2201      	movs	r2, #1
     3d4:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     3d6:	2200      	movs	r2, #0
     3d8:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     3da:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3dc:	f000 fee6 	bl	11ac <_i2c_m_sync_transfer>

	if (ret != 0) {
     3e0:	2800      	cmp	r0, #0
     3e2:	d001      	beq.n	3e8 <i2c_m_sync_cmd_write+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     3e4:	b006      	add	sp, #24
     3e6:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP;
     3e8:	a903      	add	r1, sp, #12
     3ea:	4b04      	ldr	r3, [pc, #16]	; (3fc <i2c_m_sync_cmd_write+0x40>)
     3ec:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     3ee:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     3f0:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3f2:	0020      	movs	r0, r4
     3f4:	f000 feda 	bl	11ac <_i2c_m_sync_transfer>
     3f8:	e7f4      	b.n	3e4 <i2c_m_sync_cmd_write+0x28>
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	ffff8000 	.word	0xffff8000

00000400 <i2c_m_sync_cmd_read>:

/**
 * \brief Sync version of i2c read command
 */
int32_t i2c_m_sync_cmd_read(struct i2c_m_sync_desc *i2c, uint8_t reg, uint8_t *buffer, uint8_t length)
{
     400:	b570      	push	{r4, r5, r6, lr}
     402:	b086      	sub	sp, #24
     404:	0004      	movs	r4, r0
     406:	0016      	movs	r6, r2
     408:	001d      	movs	r5, r3
     40a:	466b      	mov	r3, sp
     40c:	71d9      	strb	r1, [r3, #7]
     40e:	3307      	adds	r3, #7
	struct _i2c_m_msg msg;
	int32_t           ret;

	msg.addr   = i2c->slave_addr;
     410:	8b82      	ldrh	r2, [r0, #28]
     412:	a903      	add	r1, sp, #12
     414:	800a      	strh	r2, [r1, #0]
	msg.len    = 1;
     416:	2201      	movs	r2, #1
     418:	604a      	str	r2, [r1, #4]
	msg.flags  = 0;
     41a:	2200      	movs	r2, #0
     41c:	804a      	strh	r2, [r1, #2]
	msg.buffer = &reg;
     41e:	608b      	str	r3, [r1, #8]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     420:	f000 fec4 	bl	11ac <_i2c_m_sync_transfer>

	if (ret != 0) {
     424:	2800      	cmp	r0, #0
     426:	d001      	beq.n	42c <i2c_m_sync_cmd_read+0x2c>
		/* error occurred */
		return ret;
	}

	return ERR_NONE;
}
     428:	b006      	add	sp, #24
     42a:	bd70      	pop	{r4, r5, r6, pc}
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     42c:	a903      	add	r1, sp, #12
     42e:	4b04      	ldr	r3, [pc, #16]	; (440 <i2c_m_sync_cmd_read+0x40>)
     430:	804b      	strh	r3, [r1, #2]
	msg.buffer = buffer;
     432:	608e      	str	r6, [r1, #8]
	msg.len    = length;
     434:	604d      	str	r5, [r1, #4]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     436:	0020      	movs	r0, r4
     438:	f000 feb8 	bl	11ac <_i2c_m_sync_transfer>
     43c:	e7f4      	b.n	428 <i2c_m_sync_cmd_read+0x28>
     43e:	46c0      	nop			; (mov r8, r8)
     440:	ffff8001 	.word	0xffff8001

00000444 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     444:	3014      	adds	r0, #20
     446:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     448:	2000      	movs	r0, #0
     44a:	4770      	bx	lr

0000044c <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     44c:	b570      	push	{r4, r5, r6, lr}
     44e:	0004      	movs	r4, r0
     450:	000d      	movs	r5, r1
     452:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     454:	2800      	cmp	r0, #0
     456:	d00e      	beq.n	476 <io_write+0x2a>
     458:	2900      	cmp	r1, #0
     45a:	d00a      	beq.n	472 <io_write+0x26>
     45c:	2001      	movs	r0, #1
     45e:	2234      	movs	r2, #52	; 0x34
     460:	4906      	ldr	r1, [pc, #24]	; (47c <io_write+0x30>)
     462:	f000 faa3 	bl	9ac <assert>
	return io_descr->write(io_descr, buf, length);
     466:	6823      	ldr	r3, [r4, #0]
     468:	0032      	movs	r2, r6
     46a:	0029      	movs	r1, r5
     46c:	0020      	movs	r0, r4
     46e:	4798      	blx	r3
}
     470:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     472:	2000      	movs	r0, #0
     474:	e7f3      	b.n	45e <io_write+0x12>
     476:	2000      	movs	r0, #0
     478:	e7f1      	b.n	45e <io_write+0x12>
     47a:	46c0      	nop			; (mov r8, r8)
     47c:	0000f25c 	.word	0x0000f25c

00000480 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     480:	b570      	push	{r4, r5, r6, lr}
     482:	0004      	movs	r4, r0
     484:	000d      	movs	r5, r1
     486:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     488:	2800      	cmp	r0, #0
     48a:	d00e      	beq.n	4aa <io_read+0x2a>
     48c:	2900      	cmp	r1, #0
     48e:	d00a      	beq.n	4a6 <io_read+0x26>
     490:	2001      	movs	r0, #1
     492:	223d      	movs	r2, #61	; 0x3d
     494:	4906      	ldr	r1, [pc, #24]	; (4b0 <io_read+0x30>)
     496:	f000 fa89 	bl	9ac <assert>
	return io_descr->read(io_descr, buf, length);
     49a:	6863      	ldr	r3, [r4, #4]
     49c:	0032      	movs	r2, r6
     49e:	0029      	movs	r1, r5
     4a0:	0020      	movs	r0, r4
     4a2:	4798      	blx	r3
}
     4a4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     4a6:	2000      	movs	r0, #0
     4a8:	e7f3      	b.n	492 <io_read+0x12>
     4aa:	2000      	movs	r0, #0
     4ac:	e7f1      	b.n	492 <io_read+0x12>
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	0000f25c 	.word	0x0000f25c

000004b4 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     4b4:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     4b6:	6943      	ldr	r3, [r0, #20]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d000      	beq.n	4be <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     4bc:	4798      	blx	r3
	}
}
     4be:	bd10      	pop	{r4, pc}

000004c0 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     4c0:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     4c2:	6983      	ldr	r3, [r0, #24]
     4c4:	2b00      	cmp	r3, #0
     4c6:	d000      	beq.n	4ca <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     4c8:	4798      	blx	r3
	}
}
     4ca:	bd10      	pop	{r4, pc}

000004cc <pwm_init>:
{
     4cc:	b570      	push	{r4, r5, r6, lr}
     4ce:	0004      	movs	r4, r0
     4d0:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     4d2:	2800      	cmp	r0, #0
     4d4:	d012      	beq.n	4fc <pwm_init+0x30>
     4d6:	2900      	cmp	r1, #0
     4d8:	d00e      	beq.n	4f8 <pwm_init+0x2c>
     4da:	2001      	movs	r0, #1
     4dc:	2233      	movs	r2, #51	; 0x33
     4de:	4908      	ldr	r1, [pc, #32]	; (500 <pwm_init+0x34>)
     4e0:	f000 fa64 	bl	9ac <assert>
	_pwm_init(&descr->device, hw);
     4e4:	0029      	movs	r1, r5
     4e6:	0020      	movs	r0, r4
     4e8:	f001 f98c 	bl	1804 <_pwm_init>
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     4ec:	4b05      	ldr	r3, [pc, #20]	; (504 <pwm_init+0x38>)
     4ee:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     4f0:	4b05      	ldr	r3, [pc, #20]	; (508 <pwm_init+0x3c>)
     4f2:	6063      	str	r3, [r4, #4]
}
     4f4:	2000      	movs	r0, #0
     4f6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     4f8:	2000      	movs	r0, #0
     4fa:	e7ef      	b.n	4dc <pwm_init+0x10>
     4fc:	2000      	movs	r0, #0
     4fe:	e7ed      	b.n	4dc <pwm_init+0x10>
     500:	0000f270 	.word	0x0000f270
     504:	000004b5 	.word	0x000004b5
     508:	000004c1 	.word	0x000004c1

0000050c <pwm_enable>:
{
     50c:	b510      	push	{r4, lr}
     50e:	0004      	movs	r4, r0
	ASSERT(descr);
     510:	1e43      	subs	r3, r0, #1
     512:	4198      	sbcs	r0, r3
     514:	b2c0      	uxtb	r0, r0
     516:	224a      	movs	r2, #74	; 0x4a
     518:	4907      	ldr	r1, [pc, #28]	; (538 <pwm_enable+0x2c>)
     51a:	f000 fa47 	bl	9ac <assert>
	if (_pwm_is_enabled(&descr->device)) {
     51e:	0020      	movs	r0, r4
     520:	f001 fa16 	bl	1950 <_pwm_is_enabled>
     524:	2800      	cmp	r0, #0
     526:	d104      	bne.n	532 <pwm_enable+0x26>
	_pwm_enable(&descr->device);
     528:	0020      	movs	r0, r4
     52a:	f001 f9df 	bl	18ec <_pwm_enable>
	return ERR_NONE;
     52e:	2000      	movs	r0, #0
}
     530:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     532:	2011      	movs	r0, #17
     534:	4240      	negs	r0, r0
     536:	e7fb      	b.n	530 <pwm_enable+0x24>
     538:	0000f270 	.word	0x0000f270

0000053c <pwm_set_parameters>:
{
     53c:	b570      	push	{r4, r5, r6, lr}
     53e:	0004      	movs	r4, r0
     540:	000d      	movs	r5, r1
     542:	0016      	movs	r6, r2
	ASSERT(descr);
     544:	1e43      	subs	r3, r0, #1
     546:	4198      	sbcs	r0, r3
     548:	b2c0      	uxtb	r0, r0
     54a:	227c      	movs	r2, #124	; 0x7c
     54c:	4904      	ldr	r1, [pc, #16]	; (560 <pwm_set_parameters+0x24>)
     54e:	f000 fa2d 	bl	9ac <assert>
	_pwm_set_param(&descr->device, period, duty_cycle);
     552:	0032      	movs	r2, r6
     554:	0029      	movs	r1, r5
     556:	0020      	movs	r0, r4
     558:	f001 f9d0 	bl	18fc <_pwm_set_param>
}
     55c:	2000      	movs	r0, #0
     55e:	bd70      	pop	{r4, r5, r6, pc}
     560:	0000f270 	.word	0x0000f270

00000564 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     564:	b570      	push	{r4, r5, r6, lr}
     566:	0004      	movs	r4, r0
     568:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     56a:	2800      	cmp	r0, #0
     56c:	d017      	beq.n	59e <spi_m_sync_init+0x3a>
     56e:	2900      	cmp	r1, #0
     570:	d013      	beq.n	59a <spi_m_sync_init+0x36>
     572:	2001      	movs	r0, #1
     574:	2240      	movs	r2, #64	; 0x40
     576:	490b      	ldr	r1, [pc, #44]	; (5a4 <spi_m_sync_init+0x40>)
     578:	f000 fa18 	bl	9ac <assert>
	spi->dev.prvt = (void *)hw;
     57c:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     57e:	1d20      	adds	r0, r4, #4
     580:	0029      	movs	r1, r5
     582:	f000 ff1f 	bl	13c4 <_spi_m_sync_init>

	if (rc < 0) {
     586:	2800      	cmp	r0, #0
     588:	db06      	blt.n	598 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     58a:	4b07      	ldr	r3, [pc, #28]	; (5a8 <spi_m_sync_init+0x44>)
     58c:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <spi_m_sync_init+0x48>)
     590:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     592:	4b07      	ldr	r3, [pc, #28]	; (5b0 <spi_m_sync_init+0x4c>)
     594:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     596:	2000      	movs	r0, #0
}
     598:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     59a:	2000      	movs	r0, #0
     59c:	e7ea      	b.n	574 <spi_m_sync_init+0x10>
     59e:	2000      	movs	r0, #0
     5a0:	e7e8      	b.n	574 <spi_m_sync_init+0x10>
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	0000f288 	.word	0x0000f288
     5a8:	ffff8000 	.word	0xffff8000
     5ac:	00000649 	.word	0x00000649
     5b0:	00000615 	.word	0x00000615

000005b4 <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     5b4:	b510      	push	{r4, lr}
     5b6:	0004      	movs	r4, r0
	ASSERT(spi);
     5b8:	1e43      	subs	r3, r0, #1
     5ba:	4198      	sbcs	r0, r3
     5bc:	b2c0      	uxtb	r0, r0
     5be:	2257      	movs	r2, #87	; 0x57
     5c0:	4903      	ldr	r1, [pc, #12]	; (5d0 <spi_m_sync_enable+0x1c>)
     5c2:	f000 f9f3 	bl	9ac <assert>
	_spi_m_sync_enable(&spi->dev);
     5c6:	1d20      	adds	r0, r4, #4
     5c8:	f000 ffd6 	bl	1578 <_spi_m_sync_enable>
}
     5cc:	bd10      	pop	{r4, pc}
     5ce:	46c0      	nop			; (mov r8, r8)
     5d0:	0000f288 	.word	0x0000f288

000005d4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     5d4:	b530      	push	{r4, r5, lr}
     5d6:	b087      	sub	sp, #28
     5d8:	0004      	movs	r4, r0
     5da:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     5dc:	2800      	cmp	r0, #0
     5de:	d015      	beq.n	60c <spi_m_sync_transfer+0x38>
     5e0:	2900      	cmp	r1, #0
     5e2:	d011      	beq.n	608 <spi_m_sync_transfer+0x34>
     5e4:	2001      	movs	r0, #1
     5e6:	22b3      	movs	r2, #179	; 0xb3
     5e8:	4909      	ldr	r1, [pc, #36]	; (610 <spi_m_sync_transfer+0x3c>)
     5ea:	f000 f9df 	bl	9ac <assert>

	msg.txbuf = p_xfer->txbuf;
     5ee:	682b      	ldr	r3, [r5, #0]
     5f0:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     5f2:	686b      	ldr	r3, [r5, #4]
     5f4:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     5f6:	68ab      	ldr	r3, [r5, #8]
     5f8:	9301      	str	r3, [sp, #4]
     5fa:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     5fc:	1d20      	adds	r0, r4, #4
     5fe:	a903      	add	r1, sp, #12
     600:	f000 ffd2 	bl	15a8 <_spi_m_sync_trans>
}
     604:	b007      	add	sp, #28
     606:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     608:	2000      	movs	r0, #0
     60a:	e7ec      	b.n	5e6 <spi_m_sync_transfer+0x12>
     60c:	2000      	movs	r0, #0
     60e:	e7ea      	b.n	5e6 <spi_m_sync_transfer+0x12>
     610:	0000f288 	.word	0x0000f288

00000614 <_spi_m_sync_io_write>:
{
     614:	b570      	push	{r4, r5, r6, lr}
     616:	b084      	sub	sp, #16
     618:	0004      	movs	r4, r0
     61a:	000e      	movs	r6, r1
     61c:	0015      	movs	r5, r2
	ASSERT(io);
     61e:	1e43      	subs	r3, r0, #1
     620:	4198      	sbcs	r0, r3
     622:	b2c0      	uxtb	r0, r0
     624:	22a3      	movs	r2, #163	; 0xa3
     626:	4907      	ldr	r1, [pc, #28]	; (644 <_spi_m_sync_io_write+0x30>)
     628:	f000 f9c0 	bl	9ac <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     62c:	0020      	movs	r0, r4
     62e:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     630:	2300      	movs	r3, #0
     632:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     634:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     636:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     638:	a901      	add	r1, sp, #4
     63a:	f7ff ffcb 	bl	5d4 <spi_m_sync_transfer>
}
     63e:	b004      	add	sp, #16
     640:	bd70      	pop	{r4, r5, r6, pc}
     642:	46c0      	nop			; (mov r8, r8)
     644:	0000f288 	.word	0x0000f288

00000648 <_spi_m_sync_io_read>:
{
     648:	b570      	push	{r4, r5, r6, lr}
     64a:	b084      	sub	sp, #16
     64c:	0004      	movs	r4, r0
     64e:	000e      	movs	r6, r1
     650:	0015      	movs	r5, r2
	ASSERT(io);
     652:	1e43      	subs	r3, r0, #1
     654:	4198      	sbcs	r0, r3
     656:	b2c0      	uxtb	r0, r0
     658:	2287      	movs	r2, #135	; 0x87
     65a:	4907      	ldr	r1, [pc, #28]	; (678 <_spi_m_sync_io_read+0x30>)
     65c:	f000 f9a6 	bl	9ac <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     660:	0020      	movs	r0, r4
     662:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     664:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     666:	2300      	movs	r3, #0
     668:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     66a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     66c:	a901      	add	r1, sp, #4
     66e:	f7ff ffb1 	bl	5d4 <spi_m_sync_transfer>
}
     672:	b004      	add	sp, #16
     674:	bd70      	pop	{r4, r5, r6, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	0000f288 	.word	0x0000f288

0000067c <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     67c:	b570      	push	{r4, r5, r6, lr}
     67e:	0004      	movs	r4, r0
     680:	000d      	movs	r5, r1
	ASSERT(spi && io);
     682:	2800      	cmp	r0, #0
     684:	d00c      	beq.n	6a0 <spi_m_sync_get_io_descriptor+0x24>
     686:	2900      	cmp	r1, #0
     688:	d008      	beq.n	69c <spi_m_sync_get_io_descriptor+0x20>
     68a:	2001      	movs	r0, #1
     68c:	22bd      	movs	r2, #189	; 0xbd
     68e:	4905      	ldr	r1, [pc, #20]	; (6a4 <spi_m_sync_get_io_descriptor+0x28>)
     690:	f000 f98c 	bl	9ac <assert>
	*io = &spi->io;
     694:	340c      	adds	r4, #12
     696:	602c      	str	r4, [r5, #0]
	return 0;
}
     698:	2000      	movs	r0, #0
     69a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
     69c:	2000      	movs	r0, #0
     69e:	e7f5      	b.n	68c <spi_m_sync_get_io_descriptor+0x10>
     6a0:	2000      	movs	r0, #0
     6a2:	e7f3      	b.n	68c <spi_m_sync_get_io_descriptor+0x10>
     6a4:	0000f288 	.word	0x0000f288

000006a8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     6aa:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     6ac:	2e00      	cmp	r6, #0
     6ae:	d002      	beq.n	6b6 <timer_add_timer_task+0xe>
     6b0:	0033      	movs	r3, r6
     6b2:	2500      	movs	r5, #0
     6b4:	e00c      	b.n	6d0 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     6b6:	f000 f989 	bl	9cc <list_insert_as_head>
		return;
     6ba:	e018      	b.n	6ee <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     6bc:	689f      	ldr	r7, [r3, #8]
     6be:	46bc      	mov	ip, r7
     6c0:	4464      	add	r4, ip
     6c2:	1aa4      	subs	r4, r4, r2
     6c4:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     6c6:	688f      	ldr	r7, [r1, #8]
     6c8:	42bc      	cmp	r4, r7
     6ca:	d20b      	bcs.n	6e4 <timer_add_timer_task+0x3c>
			break;
		prev = it;
     6cc:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     6ce:	681b      	ldr	r3, [r3, #0]
     6d0:	2b00      	cmp	r3, #0
     6d2:	d007      	beq.n	6e4 <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     6d4:	685c      	ldr	r4, [r3, #4]
     6d6:	4294      	cmp	r4, r2
     6d8:	d8f0      	bhi.n	6bc <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     6da:	1aa4      	subs	r4, r4, r2
     6dc:	689f      	ldr	r7, [r3, #8]
     6de:	46bc      	mov	ip, r7
     6e0:	4464      	add	r4, ip
     6e2:	e7f0      	b.n	6c6 <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     6e4:	42b3      	cmp	r3, r6
     6e6:	d003      	beq.n	6f0 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     6e8:	0028      	movs	r0, r5
     6ea:	f000 f981 	bl	9f0 <list_insert_after>
	}
}
     6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     6f0:	f000 f96c 	bl	9cc <list_insert_as_head>
     6f4:	e7fb      	b.n	6ee <timer_add_timer_task+0x46>

000006f6 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     6f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6f8:	0005      	movs	r5, r0
     6fa:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     6fc:	6903      	ldr	r3, [r0, #16]
     6fe:	1c5e      	adds	r6, r3, #1
     700:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     702:	7e03      	ldrb	r3, [r0, #24]
     704:	07db      	lsls	r3, r3, #31
     706:	d402      	bmi.n	70e <timer_process_counted+0x18>
     708:	7e03      	ldrb	r3, [r0, #24]
     70a:	079b      	lsls	r3, r3, #30
     70c:	d50a      	bpl.n	724 <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     70e:	7e2b      	ldrb	r3, [r5, #24]
     710:	2202      	movs	r2, #2
     712:	4313      	orrs	r3, r2
     714:	b2db      	uxtb	r3, r3
     716:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     71a:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     71c:	68e3      	ldr	r3, [r4, #12]
     71e:	0020      	movs	r0, r4
     720:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     722:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     724:	2c00      	cmp	r4, #0
     726:	d0f7      	beq.n	718 <timer_process_counted+0x22>
     728:	6863      	ldr	r3, [r4, #4]
     72a:	1af3      	subs	r3, r6, r3
     72c:	68a2      	ldr	r2, [r4, #8]
     72e:	4293      	cmp	r3, r2
     730:	d3f2      	bcc.n	718 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     732:	002f      	movs	r7, r5
     734:	3714      	adds	r7, #20
     736:	0038      	movs	r0, r7
     738:	f000 f95e 	bl	9f8 <list_remove_head>
		if (TIMER_TASK_REPEAT == tmp->mode) {
     73c:	7c23      	ldrb	r3, [r4, #16]
     73e:	2b01      	cmp	r3, #1
     740:	d1eb      	bne.n	71a <timer_process_counted+0x24>
			tmp->time_label = time;
     742:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     744:	0032      	movs	r2, r6
     746:	0021      	movs	r1, r4
     748:	0038      	movs	r0, r7
     74a:	f7ff ffad 	bl	6a8 <timer_add_timer_task>
     74e:	e7e4      	b.n	71a <timer_process_counted+0x24>

00000750 <timer_init>:
{
     750:	b570      	push	{r4, r5, r6, lr}
     752:	0004      	movs	r4, r0
     754:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     756:	2800      	cmp	r0, #0
     758:	d012      	beq.n	780 <timer_init+0x30>
     75a:	2900      	cmp	r1, #0
     75c:	d00e      	beq.n	77c <timer_init+0x2c>
     75e:	2001      	movs	r0, #1
     760:	223b      	movs	r2, #59	; 0x3b
     762:	4908      	ldr	r1, [pc, #32]	; (784 <timer_init+0x34>)
     764:	f000 f922 	bl	9ac <assert>
	_timer_init(&descr->device, hw);
     768:	0029      	movs	r1, r5
     76a:	0020      	movs	r0, r4
     76c:	f000 faa0 	bl	cb0 <_timer_init>
	descr->time                           = 0;
     770:	2300      	movs	r3, #0
     772:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     774:	4b04      	ldr	r3, [pc, #16]	; (788 <timer_init+0x38>)
     776:	6023      	str	r3, [r4, #0]
}
     778:	2000      	movs	r0, #0
     77a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     77c:	2000      	movs	r0, #0
     77e:	e7ef      	b.n	760 <timer_init+0x10>
     780:	2000      	movs	r0, #0
     782:	e7ed      	b.n	760 <timer_init+0x10>
     784:	0000f2a4 	.word	0x0000f2a4
     788:	000006f7 	.word	0x000006f7

0000078c <timer_start>:
{
     78c:	b510      	push	{r4, lr}
     78e:	0004      	movs	r4, r0
	ASSERT(descr);
     790:	1e43      	subs	r3, r0, #1
     792:	4198      	sbcs	r0, r3
     794:	b2c0      	uxtb	r0, r0
     796:	2253      	movs	r2, #83	; 0x53
     798:	4907      	ldr	r1, [pc, #28]	; (7b8 <timer_start+0x2c>)
     79a:	f000 f907 	bl	9ac <assert>
	if (_timer_is_started(&descr->device)) {
     79e:	0020      	movs	r0, r4
     7a0:	f000 fadc 	bl	d5c <_timer_is_started>
     7a4:	2800      	cmp	r0, #0
     7a6:	d104      	bne.n	7b2 <timer_start+0x26>
	_timer_start(&descr->device);
     7a8:	0020      	movs	r0, r4
     7aa:	f000 faad 	bl	d08 <_timer_start>
	return ERR_NONE;
     7ae:	2000      	movs	r0, #0
}
     7b0:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     7b2:	2011      	movs	r0, #17
     7b4:	4240      	negs	r0, r0
     7b6:	e7fb      	b.n	7b0 <timer_start+0x24>
     7b8:	0000f2a4 	.word	0x0000f2a4

000007bc <timer_add_task>:
{
     7bc:	b570      	push	{r4, r5, r6, lr}
     7be:	b082      	sub	sp, #8
     7c0:	0004      	movs	r4, r0
     7c2:	000d      	movs	r5, r1
	ASSERT(descr && task);
     7c4:	2800      	cmp	r0, #0
     7c6:	d026      	beq.n	816 <timer_add_task+0x5a>
     7c8:	2900      	cmp	r1, #0
     7ca:	d022      	beq.n	812 <timer_add_task+0x56>
     7cc:	2001      	movs	r0, #1
     7ce:	227a      	movs	r2, #122	; 0x7a
     7d0:	491f      	ldr	r1, [pc, #124]	; (850 <timer_add_task+0x94>)
     7d2:	f000 f8eb 	bl	9ac <assert>
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     7d6:	7e23      	ldrb	r3, [r4, #24]
     7d8:	2201      	movs	r2, #1
     7da:	4313      	orrs	r3, r2
     7dc:	b2db      	uxtb	r3, r3
     7de:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     7e0:	0026      	movs	r6, r4
     7e2:	3614      	adds	r6, #20
     7e4:	0029      	movs	r1, r5
     7e6:	0030      	movs	r0, r6
     7e8:	f000 f8e4 	bl	9b4 <is_list_element>
     7ec:	2800      	cmp	r0, #0
     7ee:	d114      	bne.n	81a <timer_add_task+0x5e>
	task->time_label = descr->time;
     7f0:	6923      	ldr	r3, [r4, #16]
     7f2:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     7f4:	6922      	ldr	r2, [r4, #16]
     7f6:	0029      	movs	r1, r5
     7f8:	0030      	movs	r0, r6
     7fa:	f7ff ff55 	bl	6a8 <timer_add_timer_task>
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     7fe:	7e23      	ldrb	r3, [r4, #24]
     800:	2201      	movs	r2, #1
     802:	4393      	bics	r3, r2
     804:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     806:	7e23      	ldrb	r3, [r4, #24]
     808:	079b      	lsls	r3, r3, #30
     80a:	d412      	bmi.n	832 <timer_add_task+0x76>
	return ERR_NONE;
     80c:	2000      	movs	r0, #0
}
     80e:	b002      	add	sp, #8
     810:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     812:	2000      	movs	r0, #0
     814:	e7db      	b.n	7ce <timer_add_task+0x12>
     816:	2000      	movs	r0, #0
     818:	e7d9      	b.n	7ce <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     81a:	7e23      	ldrb	r3, [r4, #24]
     81c:	2201      	movs	r2, #1
     81e:	4393      	bics	r3, r2
     820:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     822:	327e      	adds	r2, #126	; 0x7e
     824:	490a      	ldr	r1, [pc, #40]	; (850 <timer_add_task+0x94>)
     826:	2000      	movs	r0, #0
     828:	f000 f8c0 	bl	9ac <assert>
		return ERR_ALREADY_INITIALIZED;
     82c:	2012      	movs	r0, #18
     82e:	4240      	negs	r0, r0
     830:	e7ed      	b.n	80e <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     832:	a801      	add	r0, sp, #4
     834:	f7ff fc9e 	bl	174 <atomic_enter_critical>
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     838:	7e23      	ldrb	r3, [r4, #24]
     83a:	2202      	movs	r2, #2
     83c:	4393      	bics	r3, r2
     83e:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     840:	0020      	movs	r0, r4
     842:	f000 fa94 	bl	d6e <_timer_set_irq>
		CRITICAL_SECTION_LEAVE()
     846:	a801      	add	r0, sp, #4
     848:	f7ff fc9b 	bl	182 <atomic_leave_critical>
	return ERR_NONE;
     84c:	2000      	movs	r0, #0
     84e:	e7de      	b.n	80e <timer_add_task+0x52>
     850:	0000f2a4 	.word	0x0000f2a4

00000854 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     856:	0005      	movs	r5, r0
     858:	000e      	movs	r6, r1
     85a:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     85c:	2800      	cmp	r0, #0
     85e:	d023      	beq.n	8a8 <usart_sync_write+0x54>
     860:	2900      	cmp	r1, #0
     862:	d023      	beq.n	8ac <usart_sync_write+0x58>
     864:	2a00      	cmp	r2, #0
     866:	d123      	bne.n	8b0 <usart_sync_write+0x5c>
     868:	2000      	movs	r0, #0
     86a:	22f1      	movs	r2, #241	; 0xf1
     86c:	4911      	ldr	r1, [pc, #68]	; (8b4 <usart_sync_write+0x60>)
     86e:	f000 f89d 	bl	9ac <assert>
	while (!_usart_sync_is_ready_to_send(&descr->device))
     872:	002c      	movs	r4, r5
     874:	3408      	adds	r4, #8
     876:	0020      	movs	r0, r4
     878:	f000 fbfb 	bl	1072 <_usart_sync_is_ready_to_send>
     87c:	2800      	cmp	r0, #0
     87e:	d0f8      	beq.n	872 <usart_sync_write+0x1e>
     880:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     882:	5d71      	ldrb	r1, [r6, r5]
     884:	0020      	movs	r0, r4
     886:	f000 fbec 	bl	1062 <_usart_sync_write_byte>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     88a:	0020      	movs	r0, r4
     88c:	f000 fbf1 	bl	1072 <_usart_sync_is_ready_to_send>
     890:	2800      	cmp	r0, #0
     892:	d0fa      	beq.n	88a <usart_sync_write+0x36>
			;
	} while (++offset < length);
     894:	3501      	adds	r5, #1
     896:	42bd      	cmp	r5, r7
     898:	d3f3      	bcc.n	882 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     89a:	0020      	movs	r0, r4
     89c:	f000 fbee 	bl	107c <_usart_sync_is_transmit_done>
     8a0:	2800      	cmp	r0, #0
     8a2:	d0fa      	beq.n	89a <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     8a4:	0028      	movs	r0, r5
     8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     8a8:	2000      	movs	r0, #0
     8aa:	e7de      	b.n	86a <usart_sync_write+0x16>
     8ac:	2000      	movs	r0, #0
     8ae:	e7dc      	b.n	86a <usart_sync_write+0x16>
     8b0:	2001      	movs	r0, #1
     8b2:	e7da      	b.n	86a <usart_sync_write+0x16>
     8b4:	0000f2bc 	.word	0x0000f2bc

000008b8 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8ba:	46ce      	mov	lr, r9
     8bc:	4647      	mov	r7, r8
     8be:	b580      	push	{r7, lr}
     8c0:	1e05      	subs	r5, r0, #0
     8c2:	4688      	mov	r8, r1
     8c4:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     8c6:	d01f      	beq.n	908 <usart_sync_read+0x50>
     8c8:	2900      	cmp	r1, #0
     8ca:	d01f      	beq.n	90c <usart_sync_read+0x54>
     8cc:	2a00      	cmp	r2, #0
     8ce:	d11f      	bne.n	910 <usart_sync_read+0x58>
     8d0:	2000      	movs	r0, #0
     8d2:	2286      	movs	r2, #134	; 0x86
     8d4:	0052      	lsls	r2, r2, #1
     8d6:	490f      	ldr	r1, [pc, #60]	; (914 <usart_sync_read+0x5c>)
     8d8:	f000 f868 	bl	9ac <assert>
	uint32_t                      offset = 0;
     8dc:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     8de:	002c      	movs	r4, r5
     8e0:	3408      	adds	r4, #8
     8e2:	0020      	movs	r0, r4
     8e4:	f000 fbd0 	bl	1088 <_usart_sync_is_byte_received>
     8e8:	2800      	cmp	r0, #0
     8ea:	d0f8      	beq.n	8de <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     8ec:	4643      	mov	r3, r8
     8ee:	199f      	adds	r7, r3, r6
     8f0:	0020      	movs	r0, r4
     8f2:	f000 fbba 	bl	106a <_usart_sync_read_byte>
     8f6:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     8f8:	3601      	adds	r6, #1
     8fa:	454e      	cmp	r6, r9
     8fc:	d3ef      	bcc.n	8de <usart_sync_read+0x26>

	return (int32_t)offset;
}
     8fe:	0030      	movs	r0, r6
     900:	bc0c      	pop	{r2, r3}
     902:	4690      	mov	r8, r2
     904:	4699      	mov	r9, r3
     906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     908:	2000      	movs	r0, #0
     90a:	e7e2      	b.n	8d2 <usart_sync_read+0x1a>
     90c:	2000      	movs	r0, #0
     90e:	e7e0      	b.n	8d2 <usart_sync_read+0x1a>
     910:	2001      	movs	r0, #1
     912:	e7de      	b.n	8d2 <usart_sync_read+0x1a>
     914:	0000f2bc 	.word	0x0000f2bc

00000918 <usart_sync_init>:
{
     918:	b570      	push	{r4, r5, r6, lr}
     91a:	0004      	movs	r4, r0
     91c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     91e:	2800      	cmp	r0, #0
     920:	d014      	beq.n	94c <usart_sync_init+0x34>
     922:	2900      	cmp	r1, #0
     924:	d010      	beq.n	948 <usart_sync_init+0x30>
     926:	2001      	movs	r0, #1
     928:	2234      	movs	r2, #52	; 0x34
     92a:	4909      	ldr	r1, [pc, #36]	; (950 <usart_sync_init+0x38>)
     92c:	f000 f83e 	bl	9ac <assert>
	init_status = _usart_sync_init(&descr->device, hw);
     930:	0020      	movs	r0, r4
     932:	3008      	adds	r0, #8
     934:	0029      	movs	r1, r5
     936:	f000 fb79 	bl	102c <_usart_sync_init>
	if (init_status) {
     93a:	2800      	cmp	r0, #0
     93c:	d103      	bne.n	946 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     93e:	4b05      	ldr	r3, [pc, #20]	; (954 <usart_sync_init+0x3c>)
     940:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     942:	4b05      	ldr	r3, [pc, #20]	; (958 <usart_sync_init+0x40>)
     944:	6023      	str	r3, [r4, #0]
}
     946:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     948:	2000      	movs	r0, #0
     94a:	e7ed      	b.n	928 <usart_sync_init+0x10>
     94c:	2000      	movs	r0, #0
     94e:	e7eb      	b.n	928 <usart_sync_init+0x10>
     950:	0000f2bc 	.word	0x0000f2bc
     954:	000008b9 	.word	0x000008b9
     958:	00000855 	.word	0x00000855

0000095c <usart_sync_enable>:
{
     95c:	b510      	push	{r4, lr}
     95e:	0004      	movs	r4, r0
	ASSERT(descr);
     960:	1e43      	subs	r3, r0, #1
     962:	4198      	sbcs	r0, r3
     964:	b2c0      	uxtb	r0, r0
     966:	2253      	movs	r2, #83	; 0x53
     968:	4904      	ldr	r1, [pc, #16]	; (97c <usart_sync_enable+0x20>)
     96a:	f000 f81f 	bl	9ac <assert>
	_usart_sync_enable(&descr->device);
     96e:	0020      	movs	r0, r4
     970:	3008      	adds	r0, #8
     972:	f000 fb6d 	bl	1050 <_usart_sync_enable>
}
     976:	2000      	movs	r0, #0
     978:	bd10      	pop	{r4, pc}
     97a:	46c0      	nop			; (mov r8, r8)
     97c:	0000f2bc 	.word	0x0000f2bc

00000980 <usart_sync_get_io_descriptor>:
{
     980:	b570      	push	{r4, r5, r6, lr}
     982:	0004      	movs	r4, r0
     984:	000d      	movs	r5, r1
	ASSERT(descr && io);
     986:	2800      	cmp	r0, #0
     988:	d00b      	beq.n	9a2 <usart_sync_get_io_descriptor+0x22>
     98a:	2900      	cmp	r1, #0
     98c:	d007      	beq.n	99e <usart_sync_get_io_descriptor+0x1e>
     98e:	2001      	movs	r0, #1
     990:	2269      	movs	r2, #105	; 0x69
     992:	4905      	ldr	r1, [pc, #20]	; (9a8 <usart_sync_get_io_descriptor+0x28>)
     994:	f000 f80a 	bl	9ac <assert>
	*io = &descr->io;
     998:	602c      	str	r4, [r5, #0]
}
     99a:	2000      	movs	r0, #0
     99c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     99e:	2000      	movs	r0, #0
     9a0:	e7f6      	b.n	990 <usart_sync_get_io_descriptor+0x10>
     9a2:	2000      	movs	r0, #0
     9a4:	e7f4      	b.n	990 <usart_sync_get_io_descriptor+0x10>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	0000f2bc 	.word	0x0000f2bc

000009ac <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     9ac:	2800      	cmp	r0, #0
     9ae:	d100      	bne.n	9b2 <assert+0x6>
		__asm("BKPT #0");
     9b0:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     9b2:	4770      	bx	lr

000009b4 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     9b4:	6803      	ldr	r3, [r0, #0]
     9b6:	2b00      	cmp	r3, #0
     9b8:	d003      	beq.n	9c2 <is_list_element+0xe>
		if (it == element) {
     9ba:	428b      	cmp	r3, r1
     9bc:	d003      	beq.n	9c6 <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     9be:	681b      	ldr	r3, [r3, #0]
     9c0:	e7f9      	b.n	9b6 <is_list_element+0x2>
			return true;
		}
	}

	return false;
     9c2:	2000      	movs	r0, #0
}
     9c4:	4770      	bx	lr
			return true;
     9c6:	2001      	movs	r0, #1
     9c8:	e7fc      	b.n	9c4 <is_list_element+0x10>
	...

000009cc <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     9cc:	b570      	push	{r4, r5, r6, lr}
     9ce:	0004      	movs	r4, r0
     9d0:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     9d2:	f7ff ffef 	bl	9b4 <is_list_element>
     9d6:	2301      	movs	r3, #1
     9d8:	4058      	eors	r0, r3
     9da:	b2c0      	uxtb	r0, r0
     9dc:	2239      	movs	r2, #57	; 0x39
     9de:	4903      	ldr	r1, [pc, #12]	; (9ec <list_insert_as_head+0x20>)
     9e0:	f7ff ffe4 	bl	9ac <assert>

	((struct list_element *)element)->next = list->head;
     9e4:	6823      	ldr	r3, [r4, #0]
     9e6:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     9e8:	6025      	str	r5, [r4, #0]
}
     9ea:	bd70      	pop	{r4, r5, r6, pc}
     9ec:	0000f2d8 	.word	0x0000f2d8

000009f0 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     9f0:	6803      	ldr	r3, [r0, #0]
     9f2:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     9f4:	6001      	str	r1, [r0, #0]
}
     9f6:	4770      	bx	lr

000009f8 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     9f8:	6803      	ldr	r3, [r0, #0]
     9fa:	2b00      	cmp	r3, #0
     9fc:	d003      	beq.n	a06 <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     9fe:	681a      	ldr	r2, [r3, #0]
     a00:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     a02:	0018      	movs	r0, r3
	}

	return NULL;
}
     a04:	4770      	bx	lr
	return NULL;
     a06:	2000      	movs	r0, #0
     a08:	e7fc      	b.n	a04 <list_remove_head+0xc>
	...

00000a0c <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     a0c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     a0e:	4a06      	ldr	r2, [pc, #24]	; (a28 <_sbrk+0x1c>)
     a10:	6812      	ldr	r2, [r2, #0]
     a12:	2a00      	cmp	r2, #0
     a14:	d004      	beq.n	a20 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     a16:	4a04      	ldr	r2, [pc, #16]	; (a28 <_sbrk+0x1c>)
     a18:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     a1a:	18c3      	adds	r3, r0, r3
     a1c:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     a1e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     a20:	4902      	ldr	r1, [pc, #8]	; (a2c <_sbrk+0x20>)
     a22:	4a01      	ldr	r2, [pc, #4]	; (a28 <_sbrk+0x1c>)
     a24:	6011      	str	r1, [r2, #0]
     a26:	e7f6      	b.n	a16 <_sbrk+0xa>
     a28:	20000a78 	.word	0x20000a78
     a2c:	200036e0 	.word	0x200036e0

00000a30 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     a30:	b510      	push	{r4, lr}
		return (us * (freq / 100000) + 29) / 30;
     a32:	0103      	lsls	r3, r0, #4
     a34:	1a1b      	subs	r3, r3, r0
     a36:	0158      	lsls	r0, r3, #5
     a38:	301d      	adds	r0, #29
     a3a:	211e      	movs	r1, #30
     a3c:	f004 fcda 	bl	53f4 <__udivsi3>
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     a40:	bd10      	pop	{r4, pc}

00000a42 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     a42:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     a44:	0103      	lsls	r3, r0, #4
     a46:	1a1b      	subs	r3, r3, r0
     a48:	0158      	lsls	r0, r3, #5
     a4a:	3002      	adds	r0, #2
     a4c:	2103      	movs	r1, #3
     a4e:	f004 fcd1 	bl	53f4 <__udivsi3>
     a52:	2364      	movs	r3, #100	; 0x64
     a54:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     a56:	bd10      	pop	{r4, pc}

00000a58 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     a58:	3901      	subs	r1, #1
     a5a:	d8fd      	bhi.n	a58 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     a5c:	4770      	bx	lr
	...

00000a60 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a60:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     a62:	4a09      	ldr	r2, [pc, #36]	; (a88 <_init_chip+0x28>)
     a64:	6853      	ldr	r3, [r2, #4]
     a66:	2106      	movs	r1, #6
     a68:	430b      	orrs	r3, r1
     a6a:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     a6c:	f000 f902 	bl	c74 <_pm_init>
	_sysctrl_init_sources();
     a70:	f000 fe0c 	bl	168c <_sysctrl_init_sources>
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     a74:	2008      	movs	r0, #8
     a76:	f000 f8cf 	bl	c18 <_gclk_init_generators_by_fref>
#endif
	_sysctrl_init_referenced_generators();
     a7a:	f000 fe2d 	bl	16d8 <_sysctrl_init_referenced_generators>
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a7e:	20f7      	movs	r0, #247	; 0xf7
     a80:	f000 f8ca 	bl	c18 <_gclk_init_generators_by_fref>
}
     a84:	bd10      	pop	{r4, pc}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	41004000 	.word	0x41004000

00000a8c <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     a8c:	4b20      	ldr	r3, [pc, #128]	; (b10 <_ext_irq_init+0x84>)
     a8e:	785b      	ldrb	r3, [r3, #1]
     a90:	09db      	lsrs	r3, r3, #7
     a92:	d1fb      	bne.n	a8c <_ext_irq_init>
     a94:	4b1e      	ldr	r3, [pc, #120]	; (b10 <_ext_irq_init+0x84>)
     a96:	785b      	ldrb	r3, [r3, #1]
     a98:	09db      	lsrs	r3, r3, #7
     a9a:	d1fb      	bne.n	a94 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     a9c:	4b1c      	ldr	r3, [pc, #112]	; (b10 <_ext_irq_init+0x84>)
     a9e:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     aa0:	079b      	lsls	r3, r3, #30
     aa2:	d50a      	bpl.n	aba <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     aa4:	2200      	movs	r2, #0
     aa6:	4b1a      	ldr	r3, [pc, #104]	; (b10 <_ext_irq_init+0x84>)
     aa8:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     aaa:	4b19      	ldr	r3, [pc, #100]	; (b10 <_ext_irq_init+0x84>)
     aac:	785b      	ldrb	r3, [r3, #1]
     aae:	09db      	lsrs	r3, r3, #7
     ab0:	d1fb      	bne.n	aaa <_ext_irq_init+0x1e>
     ab2:	4b17      	ldr	r3, [pc, #92]	; (b10 <_ext_irq_init+0x84>)
     ab4:	785b      	ldrb	r3, [r3, #1]
     ab6:	09db      	lsrs	r3, r3, #7
     ab8:	d1fb      	bne.n	ab2 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     aba:	2201      	movs	r2, #1
     abc:	4b14      	ldr	r3, [pc, #80]	; (b10 <_ext_irq_init+0x84>)
     abe:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     ac0:	4b13      	ldr	r3, [pc, #76]	; (b10 <_ext_irq_init+0x84>)
     ac2:	785b      	ldrb	r3, [r3, #1]
     ac4:	09db      	lsrs	r3, r3, #7
     ac6:	d1fb      	bne.n	ac0 <_ext_irq_init+0x34>
     ac8:	4b11      	ldr	r3, [pc, #68]	; (b10 <_ext_irq_init+0x84>)
     aca:	785b      	ldrb	r3, [r3, #1]
     acc:	09db      	lsrs	r3, r3, #7
     ace:	d1fb      	bne.n	ac8 <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     ad0:	4b0f      	ldr	r3, [pc, #60]	; (b10 <_ext_irq_init+0x84>)
     ad2:	2200      	movs	r2, #0
     ad4:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     ad6:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     ad8:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     ada:	619a      	str	r2, [r3, #24]
     adc:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     ade:	781a      	ldrb	r2, [r3, #0]
     ae0:	2102      	movs	r1, #2
     ae2:	430a      	orrs	r2, r1
     ae4:	b2d2      	uxtb	r2, r2
     ae6:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     ae8:	4b09      	ldr	r3, [pc, #36]	; (b10 <_ext_irq_init+0x84>)
     aea:	785b      	ldrb	r3, [r3, #1]
     aec:	09db      	lsrs	r3, r3, #7
     aee:	d1fb      	bne.n	ae8 <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     af0:	4b08      	ldr	r3, [pc, #32]	; (b14 <_ext_irq_init+0x88>)
     af2:	2210      	movs	r2, #16
     af4:	2180      	movs	r1, #128	; 0x80
     af6:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     af8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     afc:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b00:	3101      	adds	r1, #1
     b02:	31ff      	adds	r1, #255	; 0xff
     b04:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b06:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     b08:	4b03      	ldr	r3, [pc, #12]	; (b18 <_ext_irq_init+0x8c>)
     b0a:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     b0c:	2000      	movs	r0, #0
     b0e:	4770      	bx	lr
     b10:	40001800 	.word	0x40001800
     b14:	e000e100 	.word	0xe000e100
     b18:	20000a7c 	.word	0x20000a7c

00000b1c <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
     b1c:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
     b1e:	2b00      	cmp	r3, #0
     b20:	d00b      	beq.n	b3a <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
     b22:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
     b24:	2aff      	cmp	r2, #255	; 0xff
     b26:	d017      	beq.n	b58 <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
     b28:	2900      	cmp	r1, #0
     b2a:	d10f      	bne.n	b4c <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
     b2c:	2301      	movs	r3, #1
     b2e:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
     b30:	4a0b      	ldr	r2, [pc, #44]	; (b60 <_ext_irq_enable+0x44>)
     b32:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     b34:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
     b36:	2000      	movs	r0, #0
}
     b38:	4770      	bx	lr
		if (_map[i].pin == pin) {
     b3a:	2828      	cmp	r0, #40	; 0x28
     b3c:	d002      	beq.n	b44 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
     b3e:	3301      	adds	r3, #1
     b40:	b2db      	uxtb	r3, r3
     b42:	e7ec      	b.n	b1e <_ext_irq_enable+0x2>
			extint = _map[i].extint;
     b44:	00da      	lsls	r2, r3, #3
     b46:	4b07      	ldr	r3, [pc, #28]	; (b64 <_ext_irq_enable+0x48>)
     b48:	5cd2      	ldrb	r2, [r2, r3]
			break;
     b4a:	e7eb      	b.n	b24 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
     b4c:	2301      	movs	r3, #1
     b4e:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
     b50:	4a03      	ldr	r2, [pc, #12]	; (b60 <_ext_irq_enable+0x44>)
     b52:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
     b54:	2000      	movs	r0, #0
     b56:	e7ef      	b.n	b38 <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
     b58:	200d      	movs	r0, #13
     b5a:	4240      	negs	r0, r0
     b5c:	e7ec      	b.n	b38 <_ext_irq_enable+0x1c>
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	40001800 	.word	0x40001800
     b64:	0000f310 	.word	0x0000f310

00000b68 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     b68:	b570      	push	{r4, r5, r6, lr}
     b6a:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     b6c:	4b26      	ldr	r3, [pc, #152]	; (c08 <EIC_Handler+0xa0>)
     b6e:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     b70:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     b72:	400a      	ands	r2, r1
     b74:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     b76:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     b78:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     b7a:	4b24      	ldr	r3, [pc, #144]	; (c0c <EIC_Handler+0xa4>)
     b7c:	6818      	ldr	r0, [r3, #0]
     b7e:	1e43      	subs	r3, r0, #1
     b80:	4198      	sbcs	r0, r3
     b82:	b2c0      	uxtb	r0, r0
     b84:	22d2      	movs	r2, #210	; 0xd2
     b86:	4922      	ldr	r1, [pc, #136]	; (c10 <EIC_Handler+0xa8>)
     b88:	f7ff ff10 	bl	9ac <assert>
	uint32_t          pin = INVALID_PIN_NUMBER;
     b8c:	2501      	movs	r5, #1
     b8e:	426d      	negs	r5, r5

	while (flags) {
     b90:	e02e      	b.n	bf0 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     b92:	3901      	subs	r1, #1
     b94:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     b96:	42b0      	cmp	r0, r6
     b98:	d80e      	bhi.n	bb8 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
     b9a:	1832      	adds	r2, r6, r0
     b9c:	1052      	asrs	r2, r2, #1
     b9e:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
     ba0:	23ff      	movs	r3, #255	; 0xff
     ba2:	4013      	ands	r3, r2
     ba4:	00db      	lsls	r3, r3, #3
     ba6:	4a1b      	ldr	r2, [pc, #108]	; (c14 <EIC_Handler+0xac>)
     ba8:	5c9b      	ldrb	r3, [r3, r2]
     baa:	42a3      	cmp	r3, r4
     bac:	d003      	beq.n	bb6 <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
     bae:	daf0      	bge.n	b92 <EIC_Handler+0x2a>
					lower = middle + 1;
     bb0:	3101      	adds	r1, #1
     bb2:	b2c8      	uxtb	r0, r1
     bb4:	e7ef      	b.n	b96 <EIC_Handler+0x2e>
					pin = _map[middle].pin;
     bb6:	2528      	movs	r5, #40	; 0x28
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     bb8:	1c6b      	adds	r3, r5, #1
     bba:	d003      	beq.n	bc4 <EIC_Handler+0x5c>
				callback(pin);
     bbc:	4b13      	ldr	r3, [pc, #76]	; (c0c <EIC_Handler+0xa4>)
     bbe:	681b      	ldr	r3, [r3, #0]
     bc0:	0028      	movs	r0, r5
     bc2:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     bc4:	2201      	movs	r2, #1
     bc6:	40a2      	lsls	r2, r4
     bc8:	9b01      	ldr	r3, [sp, #4]
     bca:	4393      	bics	r3, r2
     bcc:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     bce:	9801      	ldr	r0, [sp, #4]
     bd0:	f004 fdd0 	bl	5774 <__ffssi2>
     bd4:	3801      	subs	r0, #1
     bd6:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     bd8:	1c63      	adds	r3, r4, #1
     bda:	d002      	beq.n	be2 <EIC_Handler+0x7a>
     bdc:	2601      	movs	r6, #1
     bde:	2000      	movs	r0, #0
     be0:	e7d9      	b.n	b96 <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
     be2:	4b09      	ldr	r3, [pc, #36]	; (c08 <EIC_Handler+0xa0>)
     be4:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     be6:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     be8:	400a      	ands	r2, r1
     bea:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     bec:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     bee:	611a      	str	r2, [r3, #16]
	while (flags) {
     bf0:	9b01      	ldr	r3, [sp, #4]
     bf2:	2b00      	cmp	r3, #0
     bf4:	d005      	beq.n	c02 <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
     bf6:	9801      	ldr	r0, [sp, #4]
     bf8:	f004 fdbc 	bl	5774 <__ffssi2>
     bfc:	3801      	subs	r0, #1
     bfe:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     c00:	e7ea      	b.n	bd8 <EIC_Handler+0x70>
	}
}
     c02:	b002      	add	sp, #8
     c04:	bd70      	pop	{r4, r5, r6, pc}
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	40001800 	.word	0x40001800
     c0c:	20000a7c 	.word	0x20000a7c
     c10:	0000f2f8 	.word	0x0000f2f8
     c14:	0000f310 	.word	0x0000f310

00000c18 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     c18:	07c3      	lsls	r3, r0, #31
     c1a:	d509      	bpl.n	c30 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     c1c:	4b11      	ldr	r3, [pc, #68]	; (c64 <_gclk_init_generators_by_fref+0x4c>)
     c1e:	2280      	movs	r2, #128	; 0x80
     c20:	0052      	lsls	r2, r2, #1
     c22:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c24:	4a10      	ldr	r2, [pc, #64]	; (c68 <_gclk_init_generators_by_fref+0x50>)
     c26:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c28:	4b0e      	ldr	r3, [pc, #56]	; (c64 <_gclk_init_generators_by_fref+0x4c>)
     c2a:	785b      	ldrb	r3, [r3, #1]
     c2c:	09db      	lsrs	r3, r3, #7
     c2e:	d1fb      	bne.n	c28 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     c30:	0783      	lsls	r3, r0, #30
     c32:	d509      	bpl.n	c48 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     c34:	4b0b      	ldr	r3, [pc, #44]	; (c64 <_gclk_init_generators_by_fref+0x4c>)
     c36:	2202      	movs	r2, #2
     c38:	32ff      	adds	r2, #255	; 0xff
     c3a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c3c:	4a0b      	ldr	r2, [pc, #44]	; (c6c <_gclk_init_generators_by_fref+0x54>)
     c3e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c40:	4b08      	ldr	r3, [pc, #32]	; (c64 <_gclk_init_generators_by_fref+0x4c>)
     c42:	785b      	ldrb	r3, [r3, #1]
     c44:	09db      	lsrs	r3, r3, #7
     c46:	d1fb      	bne.n	c40 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     c48:	0703      	lsls	r3, r0, #28
     c4a:	d509      	bpl.n	c60 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     c4c:	4b05      	ldr	r3, [pc, #20]	; (c64 <_gclk_init_generators_by_fref+0x4c>)
     c4e:	2204      	movs	r2, #4
     c50:	32ff      	adds	r2, #255	; 0xff
     c52:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     c54:	4a06      	ldr	r2, [pc, #24]	; (c70 <_gclk_init_generators_by_fref+0x58>)
     c56:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     c58:	4b02      	ldr	r3, [pc, #8]	; (c64 <_gclk_init_generators_by_fref+0x4c>)
     c5a:	785b      	ldrb	r3, [r3, #1]
     c5c:	09db      	lsrs	r3, r3, #7
     c5e:	d1fb      	bne.n	c58 <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
     c60:	4770      	bx	lr
     c62:	46c0      	nop			; (mov r8, r8)
     c64:	40000c00 	.word	0x40000c00
     c68:	00010700 	.word	0x00010700
     c6c:	00010601 	.word	0x00010601
     c70:	00010303 	.word	0x00010303

00000c74 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     c74:	4b06      	ldr	r3, [pc, #24]	; (c90 <_pm_init+0x1c>)
     c76:	7a1a      	ldrb	r2, [r3, #8]
     c78:	b2d2      	uxtb	r2, r2
     c7a:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     c7c:	7a5a      	ldrb	r2, [r3, #9]
     c7e:	b2d2      	uxtb	r2, r2
     c80:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     c82:	7a9a      	ldrb	r2, [r3, #10]
     c84:	b2d2      	uxtb	r2, r2
     c86:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     c88:	7ada      	ldrb	r2, [r3, #11]
     c8a:	b2d2      	uxtb	r2, r2
     c8c:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     c8e:	4770      	bx	lr
     c90:	40000400 	.word	0x40000400

00000c94 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     c94:	b510      	push	{r4, lr}
     c96:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     c98:	68c3      	ldr	r3, [r0, #12]
     c9a:	7a1b      	ldrb	r3, [r3, #8]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     c9c:	07db      	lsls	r3, r3, #31
     c9e:	d506      	bpl.n	cae <_rtc_timer_interrupt_handler+0x1a>
		if (dev->timer_cb.period_expired) {
     ca0:	6803      	ldr	r3, [r0, #0]
     ca2:	2b00      	cmp	r3, #0
     ca4:	d000      	beq.n	ca8 <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     ca6:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     ca8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     caa:	2201      	movs	r2, #1
     cac:	721a      	strb	r2, [r3, #8]
	}
}
     cae:	bd10      	pop	{r4, pc}

00000cb0 <_timer_init>:
{
     cb0:	b570      	push	{r4, r5, r6, lr}
     cb2:	0004      	movs	r4, r0
     cb4:	000d      	movs	r5, r1
	ASSERT(dev);
     cb6:	1e43      	subs	r3, r0, #1
     cb8:	4198      	sbcs	r0, r3
     cba:	b2c0      	uxtb	r0, r0
     cbc:	2230      	movs	r2, #48	; 0x30
     cbe:	4910      	ldr	r1, [pc, #64]	; (d00 <_timer_init+0x50>)
     cc0:	f7ff fe74 	bl	9ac <assert>
	dev->hw = hw;
     cc4:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     cc6:	2301      	movs	r3, #1
     cc8:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cca:	7aab      	ldrb	r3, [r5, #10]
     ccc:	09db      	lsrs	r3, r3, #7
     cce:	d1fc      	bne.n	cca <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
     cd0:	68e2      	ldr	r2, [r4, #12]
     cd2:	7a93      	ldrb	r3, [r2, #10]
     cd4:	09db      	lsrs	r3, r3, #7
     cd6:	d1fc      	bne.n	cd2 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     cd8:	3380      	adds	r3, #128	; 0x80
     cda:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cdc:	7a93      	ldrb	r3, [r2, #10]
     cde:	09db      	lsrs	r3, r3, #7
     ce0:	d1fc      	bne.n	cdc <_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     ce2:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     ce4:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     ce6:	2301      	movs	r3, #1
     ce8:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     cea:	7a93      	ldrb	r3, [r2, #10]
     cec:	09db      	lsrs	r3, r3, #7
     cee:	d1fc      	bne.n	cea <_timer_init+0x3a>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     cf0:	3301      	adds	r3, #1
     cf2:	68e2      	ldr	r2, [r4, #12]
     cf4:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
     cf6:	4b03      	ldr	r3, [pc, #12]	; (d04 <_timer_init+0x54>)
     cf8:	601c      	str	r4, [r3, #0]
}
     cfa:	2000      	movs	r0, #0
     cfc:	bd70      	pop	{r4, r5, r6, pc}
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	0000f318 	.word	0x0000f318
     d04:	20000a80 	.word	0x20000a80

00000d08 <_timer_start>:
{
     d08:	b510      	push	{r4, lr}
     d0a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     d0c:	d020      	beq.n	d50 <_timer_start+0x48>
     d0e:	68c3      	ldr	r3, [r0, #12]
     d10:	2b00      	cmp	r3, #0
     d12:	d01b      	beq.n	d4c <_timer_start+0x44>
     d14:	2001      	movs	r0, #1
     d16:	2267      	movs	r2, #103	; 0x67
     d18:	490e      	ldr	r1, [pc, #56]	; (d54 <_timer_start+0x4c>)
     d1a:	f7ff fe47 	bl	9ac <assert>
     d1e:	2208      	movs	r2, #8
     d20:	4b0d      	ldr	r3, [pc, #52]	; (d58 <_timer_start+0x50>)
     d22:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
     d24:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     d26:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
     d28:	2300      	movs	r3, #0
     d2a:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d2c:	7a93      	ldrb	r3, [r2, #10]
     d2e:	09db      	lsrs	r3, r3, #7
     d30:	d1fc      	bne.n	d2c <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
     d32:	68e2      	ldr	r2, [r4, #12]
     d34:	7a93      	ldrb	r3, [r2, #10]
     d36:	09db      	lsrs	r3, r3, #7
     d38:	d1fc      	bne.n	d34 <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     d3a:	8813      	ldrh	r3, [r2, #0]
     d3c:	2102      	movs	r1, #2
     d3e:	430b      	orrs	r3, r1
     d40:	b29b      	uxth	r3, r3
     d42:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     d44:	7a93      	ldrb	r3, [r2, #10]
     d46:	09db      	lsrs	r3, r3, #7
     d48:	d1fc      	bne.n	d44 <_timer_start+0x3c>
}
     d4a:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     d4c:	2000      	movs	r0, #0
     d4e:	e7e2      	b.n	d16 <_timer_start+0xe>
     d50:	2000      	movs	r0, #0
     d52:	e7e0      	b.n	d16 <_timer_start+0xe>
     d54:	0000f318 	.word	0x0000f318
     d58:	e000e100 	.word	0xe000e100

00000d5c <_timer_is_started>:
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
     d5c:	68c2      	ldr	r2, [r0, #12]
     d5e:	7a93      	ldrb	r3, [r2, #10]
     d60:	09db      	lsrs	r3, r3, #7
     d62:	d1fc      	bne.n	d5e <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     d64:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
     d66:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
     d68:	2001      	movs	r0, #1
     d6a:	4018      	ands	r0, r3
}
     d6c:	4770      	bx	lr

00000d6e <_timer_set_irq>:
}
     d6e:	4770      	bx	lr

00000d70 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     d70:	2000      	movs	r0, #0
     d72:	4770      	bx	lr

00000d74 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     d74:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     d76:	4b02      	ldr	r3, [pc, #8]	; (d80 <RTC_Handler+0xc>)
     d78:	6818      	ldr	r0, [r3, #0]
     d7a:	f7ff ff8b 	bl	c94 <_rtc_timer_interrupt_handler>
}
     d7e:	bd10      	pop	{r4, pc}
     d80:	20000a80 	.word	0x20000a80

00000d84 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     d84:	4b02      	ldr	r3, [pc, #8]	; (d90 <_sercom_get_hardware_index+0xc>)
     d86:	469c      	mov	ip, r3
     d88:	4460      	add	r0, ip
     d8a:	0a80      	lsrs	r0, r0, #10
     d8c:	b2c0      	uxtb	r0, r0
}
     d8e:	4770      	bx	lr
     d90:	bdfff800 	.word	0xbdfff800

00000d94 <_spi_sync_enable>:
		;
}

static inline bool hri_sercomspi_is_syncing(const void *const hw)
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
     d94:	8a03      	ldrh	r3, [r0, #16]
     d96:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
     d98:	d108      	bne.n	dac <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     d9a:	6803      	ldr	r3, [r0, #0]
     d9c:	2202      	movs	r2, #2
     d9e:	4313      	orrs	r3, r2
     da0:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
     da2:	8a03      	ldrh	r3, [r0, #16]
     da4:	0bdb      	lsrs	r3, r3, #15
     da6:	d1fc      	bne.n	da2 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     da8:	2000      	movs	r0, #0
}
     daa:	4770      	bx	lr
		return ERR_BUSY;
     dac:	2004      	movs	r0, #4
     dae:	4240      	negs	r0, r0
     db0:	e7fb      	b.n	daa <_spi_sync_enable+0x16>
	...

00000db4 <_get_sercom_index>:
{
     db4:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     db6:	f7ff ffe5 	bl	d84 <_sercom_get_hardware_index>
     dba:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     dbc:	2000      	movs	r0, #0
     dbe:	2800      	cmp	r0, #0
     dc0:	d006      	beq.n	dd0 <_get_sercom_index+0x1c>
	ASSERT(false);
     dc2:	4a07      	ldr	r2, [pc, #28]	; (de0 <_get_sercom_index+0x2c>)
     dc4:	4907      	ldr	r1, [pc, #28]	; (de4 <_get_sercom_index+0x30>)
     dc6:	2000      	movs	r0, #0
     dc8:	f7ff fdf0 	bl	9ac <assert>
	return 0;
     dcc:	2000      	movs	r0, #0
}
     dce:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     dd0:	0102      	lsls	r2, r0, #4
     dd2:	4905      	ldr	r1, [pc, #20]	; (de8 <_get_sercom_index+0x34>)
     dd4:	5c52      	ldrb	r2, [r2, r1]
     dd6:	4293      	cmp	r3, r2
     dd8:	d0f9      	beq.n	dce <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     dda:	3001      	adds	r0, #1
     ddc:	b2c0      	uxtb	r0, r0
     dde:	e7ee      	b.n	dbe <_get_sercom_index+0xa>
     de0:	0000022a 	.word	0x0000022a
     de4:	0000f330 	.word	0x0000f330
     de8:	0000f364 	.word	0x0000f364

00000dec <_usart_init>:
{
     dec:	b510      	push	{r4, lr}
     dee:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     df0:	f7ff ffe0 	bl	db4 <_get_sercom_index>
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     df4:	8a23      	ldrh	r3, [r4, #16]
     df6:	0bdb      	lsrs	r3, r3, #15
     df8:	d1fc      	bne.n	df4 <_usart_init+0x8>
     dfa:	8a23      	ldrh	r3, [r4, #16]
     dfc:	0bdb      	lsrs	r3, r3, #15
     dfe:	d1fc      	bne.n	dfa <_usart_init+0xe>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     e00:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     e02:	079b      	lsls	r3, r3, #30
     e04:	d507      	bpl.n	e16 <_usart_init+0x2a>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e06:	2300      	movs	r3, #0
     e08:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     e0a:	8a23      	ldrh	r3, [r4, #16]
     e0c:	0bdb      	lsrs	r3, r3, #15
     e0e:	d1fc      	bne.n	e0a <_usart_init+0x1e>
     e10:	8a23      	ldrh	r3, [r4, #16]
     e12:	0bdb      	lsrs	r3, r3, #15
     e14:	d1fc      	bne.n	e10 <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e16:	2301      	movs	r3, #1
     e18:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     e1a:	8a23      	ldrh	r3, [r4, #16]
     e1c:	0bdb      	lsrs	r3, r3, #15
     e1e:	d1fc      	bne.n	e1a <_usart_init+0x2e>
     e20:	8a23      	ldrh	r3, [r4, #16]
     e22:	0bdb      	lsrs	r3, r3, #15
     e24:	d1fc      	bne.n	e20 <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     e26:	0102      	lsls	r2, r0, #4
     e28:	4b0b      	ldr	r3, [pc, #44]	; (e58 <_usart_init+0x6c>)
     e2a:	189b      	adds	r3, r3, r2
     e2c:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     e2e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     e30:	8a23      	ldrh	r3, [r4, #16]
     e32:	0bdb      	lsrs	r3, r3, #15
     e34:	d1fc      	bne.n	e30 <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     e36:	0102      	lsls	r2, r0, #4
     e38:	4b07      	ldr	r3, [pc, #28]	; (e58 <_usart_init+0x6c>)
     e3a:	189b      	adds	r3, r3, r2
     e3c:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     e3e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     e40:	8a23      	ldrh	r3, [r4, #16]
     e42:	0bdb      	lsrs	r3, r3, #15
     e44:	d1fc      	bne.n	e40 <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     e46:	0100      	lsls	r0, r0, #4
     e48:	4b03      	ldr	r3, [pc, #12]	; (e58 <_usart_init+0x6c>)
     e4a:	1818      	adds	r0, r3, r0
     e4c:	8983      	ldrh	r3, [r0, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     e4e:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     e50:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     e52:	7223      	strb	r3, [r4, #8]
}
     e54:	2000      	movs	r0, #0
     e56:	bd10      	pop	{r4, pc}
     e58:	0000f364 	.word	0x0000f364

00000e5c <_get_i2cm_index>:
{
     e5c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     e5e:	f7ff ff91 	bl	d84 <_sercom_get_hardware_index>
     e62:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     e64:	2000      	movs	r0, #0
     e66:	2800      	cmp	r0, #0
     e68:	d006      	beq.n	e78 <_get_i2cm_index+0x1c>
	ASSERT(false);
     e6a:	4a08      	ldr	r2, [pc, #32]	; (e8c <_get_i2cm_index+0x30>)
     e6c:	4908      	ldr	r1, [pc, #32]	; (e90 <_get_i2cm_index+0x34>)
     e6e:	2000      	movs	r0, #0
     e70:	f7ff fd9c 	bl	9ac <assert>
	return 0;
     e74:	2000      	movs	r0, #0
}
     e76:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
     e78:	0043      	lsls	r3, r0, #1
     e7a:	181b      	adds	r3, r3, r0
     e7c:	00d9      	lsls	r1, r3, #3
     e7e:	4b05      	ldr	r3, [pc, #20]	; (e94 <_get_i2cm_index+0x38>)
     e80:	5ccb      	ldrb	r3, [r1, r3]
     e82:	429a      	cmp	r2, r3
     e84:	d0f7      	beq.n	e76 <_get_i2cm_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     e86:	3001      	adds	r0, #1
     e88:	b2c0      	uxtb	r0, r0
     e8a:	e7ec      	b.n	e66 <_get_i2cm_index+0xa>
     e8c:	00000366 	.word	0x00000366
     e90:	0000f330 	.word	0x0000f330
     e94:	0000f34c 	.word	0x0000f34c

00000e98 <_sercom_i2c_sync_send_address>:
{
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	0005      	movs	r5, r0
	void *             hw  = i2c_dev->hw;
     e9c:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     e9e:	1e43      	subs	r3, r0, #1
     ea0:	4198      	sbcs	r0, r3
     ea2:	b2c0      	uxtb	r0, r0
     ea4:	4a5c      	ldr	r2, [pc, #368]	; (1018 <_sercom_i2c_sync_send_address+0x180>)
     ea6:	495d      	ldr	r1, [pc, #372]	; (101c <_sercom_i2c_sync_send_address+0x184>)
     ea8:	f7ff fd80 	bl	9ac <assert>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     eac:	6863      	ldr	r3, [r4, #4]
     eae:	4a5c      	ldr	r2, [pc, #368]	; (1020 <_sercom_i2c_sync_send_address+0x188>)
     eb0:	4013      	ands	r3, r2
     eb2:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     eb4:	8a23      	ldrh	r3, [r4, #16]
     eb6:	0bdb      	lsrs	r3, r3, #15
     eb8:	d1fc      	bne.n	eb4 <_sercom_i2c_sync_send_address+0x1c>
	hri_sercomi2cm_write_ADDR_reg(hw, ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0));
     eba:	882a      	ldrh	r2, [r5, #0]
     ebc:	0052      	lsls	r2, r2, #1
     ebe:	886b      	ldrh	r3, [r5, #2]
     ec0:	2101      	movs	r1, #1
     ec2:	400b      	ands	r3, r1
     ec4:	4313      	orrs	r3, r2
     ec6:	b2db      	uxtb	r3, r3
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     ec8:	7523      	strb	r3, [r4, #20]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     eca:	8a23      	ldrh	r3, [r4, #16]
     ecc:	0bdb      	lsrs	r3, r3, #15
     ece:	d1fc      	bne.n	eca <_sercom_i2c_sync_send_address+0x32>
	void *   hw      = i2c_dev->hw;
     ed0:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     ed2:	4a54      	ldr	r2, [pc, #336]	; (1024 <_sercom_i2c_sync_send_address+0x18c>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     ed4:	7bb3      	ldrb	r3, [r6, #14]
     ed6:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     ed8:	0018      	movs	r0, r3
		if (timeout-- == 0) {
     eda:	1e51      	subs	r1, r2, #1
     edc:	2a00      	cmp	r2, #0
     ede:	d002      	beq.n	ee6 <_sercom_i2c_sync_send_address+0x4e>
     ee0:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     ee2:	079b      	lsls	r3, r3, #30
     ee4:	d0f6      	beq.n	ed4 <_sercom_i2c_sync_send_address+0x3c>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     ee6:	8a23      	ldrh	r3, [r4, #16]
     ee8:	0bdb      	lsrs	r3, r3, #15
     eea:	d1fc      	bne.n	ee6 <_sercom_i2c_sync_send_address+0x4e>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     eec:	8a23      	ldrh	r3, [r4, #16]
     eee:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     ef0:	07c2      	lsls	r2, r0, #31
     ef2:	d550      	bpl.n	f96 <_sercom_i2c_sync_send_address+0xfe>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     ef4:	079a      	lsls	r2, r3, #30
     ef6:	d510      	bpl.n	f1a <_sercom_i2c_sync_send_address+0x82>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     ef8:	2201      	movs	r2, #1
     efa:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
     efc:	886a      	ldrh	r2, [r5, #2]
     efe:	2180      	movs	r1, #128	; 0x80
     f00:	0149      	lsls	r1, r1, #5
     f02:	430a      	orrs	r2, r1
     f04:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     f06:	886a      	ldrh	r2, [r5, #2]
     f08:	4947      	ldr	r1, [pc, #284]	; (1028 <_sercom_i2c_sync_send_address+0x190>)
     f0a:	400a      	ands	r2, r1
     f0c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     f0e:	07db      	lsls	r3, r3, #31
     f10:	d400      	bmi.n	f14 <_sercom_i2c_sync_send_address+0x7c>
     f12:	e07c      	b.n	100e <_sercom_i2c_sync_send_address+0x176>
				return I2C_ERR_BUS;
     f14:	2005      	movs	r0, #5
     f16:	4240      	negs	r0, r0
     f18:	e063      	b.n	fe2 <_sercom_i2c_sync_send_address+0x14a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     f1a:	075b      	lsls	r3, r3, #29
     f1c:	d40b      	bmi.n	f36 <_sercom_i2c_sync_send_address+0x9e>
			if (msg->len == 0) {
     f1e:	6868      	ldr	r0, [r5, #4]
     f20:	2800      	cmp	r0, #0
     f22:	d12d      	bne.n	f80 <_sercom_i2c_sync_send_address+0xe8>
				if (msg->flags & I2C_M_STOP) {
     f24:	886b      	ldrh	r3, [r5, #2]
     f26:	b21b      	sxth	r3, r3
     f28:	2b00      	cmp	r3, #0
     f2a:	db20      	blt.n	f6e <_sercom_i2c_sync_send_address+0xd6>
				msg->flags &= ~I2C_M_BUSY;
     f2c:	886b      	ldrh	r3, [r5, #2]
     f2e:	4a3e      	ldr	r2, [pc, #248]	; (1028 <_sercom_i2c_sync_send_address+0x190>)
     f30:	4013      	ands	r3, r2
     f32:	806b      	strh	r3, [r5, #2]
     f34:	e055      	b.n	fe2 <_sercom_i2c_sync_send_address+0x14a>
				if (msg->len > 0) {
     f36:	686b      	ldr	r3, [r5, #4]
     f38:	2b00      	cmp	r3, #0
     f3a:	dd04      	ble.n	f46 <_sercom_i2c_sync_send_address+0xae>
					msg->flags |= I2C_M_FAIL;
     f3c:	886b      	ldrh	r3, [r5, #2]
     f3e:	2280      	movs	r2, #128	; 0x80
     f40:	0152      	lsls	r2, r2, #5
     f42:	4313      	orrs	r3, r2
     f44:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     f46:	886b      	ldrh	r3, [r5, #2]
     f48:	b21b      	sxth	r3, r3
     f4a:	2b00      	cmp	r3, #0
     f4c:	db06      	blt.n	f5c <_sercom_i2c_sync_send_address+0xc4>
				msg->flags &= ~I2C_M_BUSY;
     f4e:	886b      	ldrh	r3, [r5, #2]
     f50:	4a35      	ldr	r2, [pc, #212]	; (1028 <_sercom_i2c_sync_send_address+0x190>)
     f52:	4013      	ands	r3, r2
     f54:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     f56:	2002      	movs	r0, #2
     f58:	4240      	negs	r0, r0
     f5a:	e042      	b.n	fe2 <_sercom_i2c_sync_send_address+0x14a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f5c:	6862      	ldr	r2, [r4, #4]
     f5e:	23c0      	movs	r3, #192	; 0xc0
     f60:	029b      	lsls	r3, r3, #10
     f62:	4313      	orrs	r3, r2
     f64:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     f66:	8a23      	ldrh	r3, [r4, #16]
     f68:	0bdb      	lsrs	r3, r3, #15
     f6a:	d1fc      	bne.n	f66 <_sercom_i2c_sync_send_address+0xce>
     f6c:	e7ef      	b.n	f4e <_sercom_i2c_sync_send_address+0xb6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f6e:	6862      	ldr	r2, [r4, #4]
     f70:	23c0      	movs	r3, #192	; 0xc0
     f72:	029b      	lsls	r3, r3, #10
     f74:	4313      	orrs	r3, r2
     f76:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     f78:	8a23      	ldrh	r3, [r4, #16]
     f7a:	0bdb      	lsrs	r3, r3, #15
     f7c:	d1fc      	bne.n	f78 <_sercom_i2c_sync_send_address+0xe0>
     f7e:	e7d5      	b.n	f2c <_sercom_i2c_sync_send_address+0x94>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     f80:	68ab      	ldr	r3, [r5, #8]
     f82:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     f84:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
     f86:	68ab      	ldr	r3, [r5, #8]
     f88:	3301      	adds	r3, #1
     f8a:	60ab      	str	r3, [r5, #8]
				msg->len--;
     f8c:	686b      	ldr	r3, [r5, #4]
     f8e:	3b01      	subs	r3, #1
     f90:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     f92:	2000      	movs	r0, #0
     f94:	e025      	b.n	fe2 <_sercom_i2c_sync_send_address+0x14a>
	} else if (flags & SB_FLAG) {
     f96:	0782      	lsls	r2, r0, #30
     f98:	d53c      	bpl.n	1014 <_sercom_i2c_sync_send_address+0x17c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     f9a:	686a      	ldr	r2, [r5, #4]
     f9c:	2a00      	cmp	r2, #0
     f9e:	d031      	beq.n	1004 <_sercom_i2c_sync_send_address+0x16c>
     fa0:	075b      	lsls	r3, r3, #29
     fa2:	d42f      	bmi.n	1004 <_sercom_i2c_sync_send_address+0x16c>
			msg->len--;
     fa4:	3a01      	subs	r2, #1
     fa6:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
     fa8:	2a00      	cmp	r2, #0
     faa:	d107      	bne.n	fbc <_sercom_i2c_sync_send_address+0x124>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     fac:	6862      	ldr	r2, [r4, #4]
     fae:	2380      	movs	r3, #128	; 0x80
     fb0:	02db      	lsls	r3, r3, #11
     fb2:	4313      	orrs	r3, r2
     fb4:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     fb6:	8a23      	ldrh	r3, [r4, #16]
     fb8:	0bdb      	lsrs	r3, r3, #15
     fba:	d1fc      	bne.n	fb6 <_sercom_i2c_sync_send_address+0x11e>
			if (msg->len == 0) {
     fbc:	686b      	ldr	r3, [r5, #4]
     fbe:	2b00      	cmp	r3, #0
     fc0:	d107      	bne.n	fd2 <_sercom_i2c_sync_send_address+0x13a>
				if (msg->flags & I2C_M_STOP) {
     fc2:	886b      	ldrh	r3, [r5, #2]
     fc4:	b21b      	sxth	r3, r3
     fc6:	2b00      	cmp	r3, #0
     fc8:	db0c      	blt.n	fe4 <_sercom_i2c_sync_send_address+0x14c>
				msg->flags &= ~I2C_M_BUSY;
     fca:	886b      	ldrh	r3, [r5, #2]
     fcc:	4a16      	ldr	r2, [pc, #88]	; (1028 <_sercom_i2c_sync_send_address+0x190>)
     fce:	4013      	ands	r3, r2
     fd0:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     fd2:	68ab      	ldr	r3, [r5, #8]
     fd4:	1c5a      	adds	r2, r3, #1
     fd6:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
     fd8:	7e22      	ldrb	r2, [r4, #24]
     fda:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     fdc:	2302      	movs	r3, #2
     fde:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
     fe0:	2000      	movs	r0, #0
}
     fe2:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     fe4:	6863      	ldr	r3, [r4, #4]
     fe6:	4a10      	ldr	r2, [pc, #64]	; (1028 <_sercom_i2c_sync_send_address+0x190>)
     fe8:	4013      	ands	r3, r2
     fea:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     fec:	8a23      	ldrh	r3, [r4, #16]
     fee:	0bdb      	lsrs	r3, r3, #15
     ff0:	d1fc      	bne.n	fec <_sercom_i2c_sync_send_address+0x154>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     ff2:	6862      	ldr	r2, [r4, #4]
     ff4:	23c0      	movs	r3, #192	; 0xc0
     ff6:	029b      	lsls	r3, r3, #10
     ff8:	4313      	orrs	r3, r2
     ffa:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     ffc:	8a23      	ldrh	r3, [r4, #16]
     ffe:	0bdb      	lsrs	r3, r3, #15
    1000:	d1fc      	bne.n	ffc <_sercom_i2c_sync_send_address+0x164>
    1002:	e7e2      	b.n	fca <_sercom_i2c_sync_send_address+0x132>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1004:	2302      	movs	r3, #2
    1006:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    1008:	2002      	movs	r0, #2
    100a:	4240      	negs	r0, r0
    100c:	e7e9      	b.n	fe2 <_sercom_i2c_sync_send_address+0x14a>
			return I2C_ERR_BAD_ADDRESS;
    100e:	2004      	movs	r0, #4
    1010:	4240      	negs	r0, r0
    1012:	e7e6      	b.n	fe2 <_sercom_i2c_sync_send_address+0x14a>
	return I2C_OK;
    1014:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    1016:	e7e4      	b.n	fe2 <_sercom_i2c_sync_send_address+0x14a>
    1018:	00000581 	.word	0x00000581
    101c:	0000f330 	.word	0x0000f330
    1020:	fffbffff 	.word	0xfffbffff
    1024:	0000ffff 	.word	0x0000ffff
    1028:	fffffeff 	.word	0xfffffeff

0000102c <_usart_sync_init>:
{
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	0005      	movs	r5, r0
    1030:	000c      	movs	r4, r1
	ASSERT(device);
    1032:	1e43      	subs	r3, r0, #1
    1034:	4198      	sbcs	r0, r3
    1036:	b2c0      	uxtb	r0, r0
    1038:	22a1      	movs	r2, #161	; 0xa1
    103a:	4904      	ldr	r1, [pc, #16]	; (104c <_usart_sync_init+0x20>)
    103c:	f7ff fcb6 	bl	9ac <assert>
	device->hw = hw;
    1040:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
    1042:	0020      	movs	r0, r4
    1044:	f7ff fed2 	bl	dec <_usart_init>
}
    1048:	bd70      	pop	{r4, r5, r6, pc}
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	0000f330 	.word	0x0000f330

00001050 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1050:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1052:	6813      	ldr	r3, [r2, #0]
    1054:	2102      	movs	r1, #2
    1056:	430b      	orrs	r3, r1
    1058:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    105a:	8a13      	ldrh	r3, [r2, #16]
    105c:	0bdb      	lsrs	r3, r3, #15
    105e:	d1fc      	bne.n	105a <_usart_sync_enable+0xa>
}
    1060:	4770      	bx	lr

00001062 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1062:	6803      	ldr	r3, [r0, #0]
    1064:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1066:	8319      	strh	r1, [r3, #24]
}
    1068:	4770      	bx	lr

0000106a <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    106a:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    106c:	8b18      	ldrh	r0, [r3, #24]
    106e:	b2c0      	uxtb	r0, r0
}
    1070:	4770      	bx	lr

00001072 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1072:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1074:	7b98      	ldrb	r0, [r3, #14]
    1076:	2301      	movs	r3, #1
    1078:	4018      	ands	r0, r3
}
    107a:	4770      	bx	lr

0000107c <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    107c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    107e:	7b9b      	ldrb	r3, [r3, #14]
    1080:	085b      	lsrs	r3, r3, #1
    1082:	2001      	movs	r0, #1
    1084:	4018      	ands	r0, r3
}
    1086:	4770      	bx	lr

00001088 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    1088:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    108a:	7b9b      	ldrb	r3, [r3, #14]
    108c:	089b      	lsrs	r3, r3, #2
    108e:	2001      	movs	r0, #1
    1090:	4018      	ands	r0, r3
}
    1092:	4770      	bx	lr

00001094 <_i2c_m_sync_init>:
{
    1094:	b570      	push	{r4, r5, r6, lr}
    1096:	0006      	movs	r6, r0
    1098:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    109a:	0008      	movs	r0, r1
    109c:	f7ff fede 	bl	e5c <_get_i2cm_index>
    10a0:	0005      	movs	r5, r0
	ASSERT(i2c_dev);
    10a2:	0030      	movs	r0, r6
    10a4:	1e43      	subs	r3, r0, #1
    10a6:	4198      	sbcs	r0, r3
    10a8:	b2c0      	uxtb	r0, r0
    10aa:	4a20      	ldr	r2, [pc, #128]	; (112c <_i2c_m_sync_init+0x98>)
    10ac:	4920      	ldr	r1, [pc, #128]	; (1130 <_i2c_m_sync_init+0x9c>)
    10ae:	f7ff fc7d 	bl	9ac <assert>
	i2c_dev->hw = hw;
    10b2:	6134      	str	r4, [r6, #16]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10b4:	8a23      	ldrh	r3, [r4, #16]
    10b6:	0bdb      	lsrs	r3, r3, #15
    10b8:	d1fc      	bne.n	10b4 <_i2c_m_sync_init+0x20>
    10ba:	8a23      	ldrh	r3, [r4, #16]
    10bc:	0bdb      	lsrs	r3, r3, #15
    10be:	d1fc      	bne.n	10ba <_i2c_m_sync_init+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    10c0:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    10c2:	079b      	lsls	r3, r3, #30
    10c4:	d507      	bpl.n	10d6 <_i2c_m_sync_init+0x42>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10c6:	2300      	movs	r3, #0
    10c8:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10ca:	8a23      	ldrh	r3, [r4, #16]
    10cc:	0bdb      	lsrs	r3, r3, #15
    10ce:	d1fc      	bne.n	10ca <_i2c_m_sync_init+0x36>
    10d0:	8a23      	ldrh	r3, [r4, #16]
    10d2:	0bdb      	lsrs	r3, r3, #15
    10d4:	d1fc      	bne.n	10d0 <_i2c_m_sync_init+0x3c>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10d6:	2301      	movs	r3, #1
    10d8:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10da:	8a23      	ldrh	r3, [r4, #16]
    10dc:	0bdb      	lsrs	r3, r3, #15
    10de:	d1fc      	bne.n	10da <_i2c_m_sync_init+0x46>
    10e0:	8a23      	ldrh	r3, [r4, #16]
    10e2:	0bdb      	lsrs	r3, r3, #15
    10e4:	d1fc      	bne.n	10e0 <_i2c_m_sync_init+0x4c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a & ~SERCOM_I2CM_CTRLA_ENABLE);
    10e6:	006b      	lsls	r3, r5, #1
    10e8:	195b      	adds	r3, r3, r5
    10ea:	00da      	lsls	r2, r3, #3
    10ec:	4b11      	ldr	r3, [pc, #68]	; (1134 <_i2c_m_sync_init+0xa0>)
    10ee:	189b      	adds	r3, r3, r2
    10f0:	685b      	ldr	r3, [r3, #4]
    10f2:	2202      	movs	r2, #2
    10f4:	4393      	bics	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    10f6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10f8:	8a23      	ldrh	r3, [r4, #16]
    10fa:	0bdb      	lsrs	r3, r3, #15
    10fc:	d1fc      	bne.n	10f8 <_i2c_m_sync_init+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    10fe:	006b      	lsls	r3, r5, #1
    1100:	195b      	adds	r3, r3, r5
    1102:	00da      	lsls	r2, r3, #3
    1104:	4b0b      	ldr	r3, [pc, #44]	; (1134 <_i2c_m_sync_init+0xa0>)
    1106:	189b      	adds	r3, r3, r2
    1108:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    110a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    110c:	8a23      	ldrh	r3, [r4, #16]
    110e:	0bdb      	lsrs	r3, r3, #15
    1110:	d1fc      	bne.n	110c <_i2c_m_sync_init+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    1112:	4a08      	ldr	r2, [pc, #32]	; (1134 <_i2c_m_sync_init+0xa0>)
    1114:	006b      	lsls	r3, r5, #1
    1116:	1958      	adds	r0, r3, r5
    1118:	00c1      	lsls	r1, r0, #3
    111a:	0008      	movs	r0, r1
    111c:	1851      	adds	r1, r2, r1
    111e:	8989      	ldrh	r1, [r1, #12]
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1120:	8161      	strh	r1, [r4, #10]
	i2c_dev->service.trise = _i2cms[i].trise;
    1122:	1812      	adds	r2, r2, r0
    1124:	8a13      	ldrh	r3, [r2, #16]
    1126:	81f3      	strh	r3, [r6, #14]
}
    1128:	2000      	movs	r0, #0
    112a:	bd70      	pop	{r4, r5, r6, pc}
    112c:	000004d7 	.word	0x000004d7
    1130:	0000f330 	.word	0x0000f330
    1134:	0000f34c 	.word	0x0000f34c

00001138 <_i2c_m_sync_enable>:
{
    1138:	b570      	push	{r4, r5, r6, lr}
    113a:	0006      	movs	r6, r0
	void *hw              = i2c_dev->hw;
    113c:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    113e:	4d18      	ldr	r5, [pc, #96]	; (11a0 <_i2c_m_sync_enable+0x68>)
    1140:	1e43      	subs	r3, r0, #1
    1142:	4198      	sbcs	r0, r3
    1144:	b2c0      	uxtb	r0, r0
    1146:	22a1      	movs	r2, #161	; 0xa1
    1148:	00d2      	lsls	r2, r2, #3
    114a:	0029      	movs	r1, r5
    114c:	f7ff fc2e 	bl	9ac <assert>
	ASSERT(i2c_dev->hw);
    1150:	6930      	ldr	r0, [r6, #16]
    1152:	1e43      	subs	r3, r0, #1
    1154:	4198      	sbcs	r0, r3
    1156:	b2c0      	uxtb	r0, r0
    1158:	4a12      	ldr	r2, [pc, #72]	; (11a4 <_i2c_m_sync_enable+0x6c>)
    115a:	0029      	movs	r1, r5
    115c:	f7ff fc26 	bl	9ac <assert>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    1160:	6823      	ldr	r3, [r4, #0]
    1162:	2202      	movs	r2, #2
    1164:	4313      	orrs	r3, r2
    1166:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1168:	8a23      	ldrh	r3, [r4, #16]
    116a:	0bdb      	lsrs	r3, r3, #15
    116c:	d1fc      	bne.n	1168 <_i2c_m_sync_enable+0x30>
    116e:	2004      	movs	r0, #4
    1170:	490d      	ldr	r1, [pc, #52]	; (11a8 <_i2c_m_sync_enable+0x70>)
    1172:	8a23      	ldrh	r3, [r4, #16]
    1174:	0bdb      	lsrs	r3, r3, #15
    1176:	d1fc      	bne.n	1172 <_i2c_m_sync_enable+0x3a>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1178:	8a22      	ldrh	r2, [r4, #16]
    117a:	0912      	lsrs	r2, r2, #4
    117c:	3303      	adds	r3, #3
    117e:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    1180:	2b01      	cmp	r3, #1
    1182:	d008      	beq.n	1196 <_i2c_m_sync_enable+0x5e>
		timeout--;
    1184:	3901      	subs	r1, #1
		if (timeout <= 0) {
    1186:	2900      	cmp	r1, #0
    1188:	dcf3      	bgt.n	1172 <_i2c_m_sync_enable+0x3a>
			if (--timeout_attempt)
    118a:	3801      	subs	r0, #1
    118c:	2800      	cmp	r0, #0
    118e:	d004      	beq.n	119a <_i2c_m_sync_enable+0x62>
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    1190:	2310      	movs	r3, #16
    1192:	8223      	strh	r3, [r4, #16]
    1194:	e7ec      	b.n	1170 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    1196:	2000      	movs	r0, #0
}
    1198:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    119a:	2006      	movs	r0, #6
    119c:	4240      	negs	r0, r0
    119e:	e7fb      	b.n	1198 <_i2c_m_sync_enable+0x60>
    11a0:	0000f330 	.word	0x0000f330
    11a4:	00000509 	.word	0x00000509
    11a8:	0000ffff 	.word	0x0000ffff

000011ac <_i2c_m_sync_transfer>:
{
    11ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11ae:	0005      	movs	r5, r0
    11b0:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    11b2:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    11b4:	4f7d      	ldr	r7, [pc, #500]	; (13ac <_i2c_m_sync_transfer+0x200>)
    11b6:	1e43      	subs	r3, r0, #1
    11b8:	4198      	sbcs	r0, r3
    11ba:	b2c0      	uxtb	r0, r0
    11bc:	4a7c      	ldr	r2, [pc, #496]	; (13b0 <_i2c_m_sync_transfer+0x204>)
    11be:	0039      	movs	r1, r7
    11c0:	f7ff fbf4 	bl	9ac <assert>
	ASSERT(i2c_dev->hw);
    11c4:	6928      	ldr	r0, [r5, #16]
    11c6:	1e43      	subs	r3, r0, #1
    11c8:	4198      	sbcs	r0, r3
    11ca:	b2c0      	uxtb	r0, r0
    11cc:	4a79      	ldr	r2, [pc, #484]	; (13b4 <_i2c_m_sync_transfer+0x208>)
    11ce:	0039      	movs	r1, r7
    11d0:	f7ff fbec 	bl	9ac <assert>
	ASSERT(msg);
    11d4:	0030      	movs	r0, r6
    11d6:	1e43      	subs	r3, r0, #1
    11d8:	4198      	sbcs	r0, r3
    11da:	b2c0      	uxtb	r0, r0
    11dc:	4a76      	ldr	r2, [pc, #472]	; (13b8 <_i2c_m_sync_transfer+0x20c>)
    11de:	0039      	movs	r1, r7
    11e0:	f7ff fbe4 	bl	9ac <assert>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    11e4:	886b      	ldrh	r3, [r5, #2]
    11e6:	05db      	lsls	r3, r3, #23
    11e8:	d500      	bpl.n	11ec <_i2c_m_sync_transfer+0x40>
    11ea:	e0dc      	b.n	13a6 <_i2c_m_sync_transfer+0x1fa>
	msg->flags |= I2C_M_BUSY;
    11ec:	8872      	ldrh	r2, [r6, #2]
    11ee:	2380      	movs	r3, #128	; 0x80
    11f0:	005b      	lsls	r3, r3, #1
    11f2:	469c      	mov	ip, r3
    11f4:	431a      	orrs	r2, r3
    11f6:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    11f8:	002a      	movs	r2, r5
    11fa:	0031      	movs	r1, r6
    11fc:	c989      	ldmia	r1!, {r0, r3, r7}
    11fe:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1200:	6862      	ldr	r2, [r4, #4]
    1202:	4663      	mov	r3, ip
    1204:	4313      	orrs	r3, r2
    1206:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1208:	8a23      	ldrh	r3, [r4, #16]
    120a:	0bdb      	lsrs	r3, r3, #15
    120c:	d1fc      	bne.n	1208 <_i2c_m_sync_transfer+0x5c>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    120e:	0028      	movs	r0, r5
    1210:	f7ff fe42 	bl	e98 <_sercom_i2c_sync_send_address>
	if (ret) {
    1214:	2800      	cmp	r0, #0
    1216:	d100      	bne.n	121a <_i2c_m_sync_transfer+0x6e>
    1218:	e07d      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    121a:	886b      	ldrh	r3, [r5, #2]
    121c:	4a67      	ldr	r2, [pc, #412]	; (13bc <_i2c_m_sync_transfer+0x210>)
    121e:	4013      	ands	r3, r2
    1220:	806b      	strh	r3, [r5, #2]
}
    1222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    1224:	2005      	movs	r0, #5
    1226:	4240      	negs	r0, r0
    1228:	e086      	b.n	1338 <_i2c_m_sync_transfer+0x18c>
			if (msg->flags & I2C_M_STOP) {
    122a:	8873      	ldrh	r3, [r6, #2]
    122c:	b21b      	sxth	r3, r3
    122e:	2b00      	cmp	r3, #0
    1230:	db04      	blt.n	123c <_i2c_m_sync_transfer+0x90>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1232:	886b      	ldrh	r3, [r5, #2]
    1234:	4a61      	ldr	r2, [pc, #388]	; (13bc <_i2c_m_sync_transfer+0x210>)
    1236:	4013      	ands	r3, r2
    1238:	806b      	strh	r3, [r5, #2]
			return ret;
    123a:	e7f2      	b.n	1222 <_i2c_m_sync_transfer+0x76>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    123c:	6862      	ldr	r2, [r4, #4]
    123e:	23c0      	movs	r3, #192	; 0xc0
    1240:	029b      	lsls	r3, r3, #10
    1242:	4313      	orrs	r3, r2
    1244:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1246:	8a23      	ldrh	r3, [r4, #16]
    1248:	0bdb      	lsrs	r3, r3, #15
    124a:	d1fc      	bne.n	1246 <_i2c_m_sync_transfer+0x9a>
    124c:	e7f1      	b.n	1232 <_i2c_m_sync_transfer+0x86>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    124e:	075b      	lsls	r3, r3, #29
    1250:	d40b      	bmi.n	126a <_i2c_m_sync_transfer+0xbe>
			if (msg->len == 0) {
    1252:	6868      	ldr	r0, [r5, #4]
    1254:	2800      	cmp	r0, #0
    1256:	d12d      	bne.n	12b4 <_i2c_m_sync_transfer+0x108>
				if (msg->flags & I2C_M_STOP) {
    1258:	886b      	ldrh	r3, [r5, #2]
    125a:	b21b      	sxth	r3, r3
    125c:	2b00      	cmp	r3, #0
    125e:	db20      	blt.n	12a2 <_i2c_m_sync_transfer+0xf6>
				msg->flags &= ~I2C_M_BUSY;
    1260:	886b      	ldrh	r3, [r5, #2]
    1262:	4a56      	ldr	r2, [pc, #344]	; (13bc <_i2c_m_sync_transfer+0x210>)
    1264:	4013      	ands	r3, r2
    1266:	806b      	strh	r3, [r5, #2]
    1268:	e055      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
				if (msg->len > 0) {
    126a:	686b      	ldr	r3, [r5, #4]
    126c:	2b00      	cmp	r3, #0
    126e:	dd04      	ble.n	127a <_i2c_m_sync_transfer+0xce>
					msg->flags |= I2C_M_FAIL;
    1270:	886b      	ldrh	r3, [r5, #2]
    1272:	2280      	movs	r2, #128	; 0x80
    1274:	0152      	lsls	r2, r2, #5
    1276:	4313      	orrs	r3, r2
    1278:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    127a:	886b      	ldrh	r3, [r5, #2]
    127c:	b21b      	sxth	r3, r3
    127e:	2b00      	cmp	r3, #0
    1280:	db06      	blt.n	1290 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_BUSY;
    1282:	886b      	ldrh	r3, [r5, #2]
    1284:	4a4d      	ldr	r2, [pc, #308]	; (13bc <_i2c_m_sync_transfer+0x210>)
    1286:	4013      	ands	r3, r2
    1288:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    128a:	2002      	movs	r0, #2
    128c:	4240      	negs	r0, r0
    128e:	e042      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1290:	6862      	ldr	r2, [r4, #4]
    1292:	23c0      	movs	r3, #192	; 0xc0
    1294:	029b      	lsls	r3, r3, #10
    1296:	4313      	orrs	r3, r2
    1298:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    129a:	8a23      	ldrh	r3, [r4, #16]
    129c:	0bdb      	lsrs	r3, r3, #15
    129e:	d1fc      	bne.n	129a <_i2c_m_sync_transfer+0xee>
    12a0:	e7ef      	b.n	1282 <_i2c_m_sync_transfer+0xd6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    12a2:	6862      	ldr	r2, [r4, #4]
    12a4:	23c0      	movs	r3, #192	; 0xc0
    12a6:	029b      	lsls	r3, r3, #10
    12a8:	4313      	orrs	r3, r2
    12aa:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    12ac:	8a23      	ldrh	r3, [r4, #16]
    12ae:	0bdb      	lsrs	r3, r3, #15
    12b0:	d1fc      	bne.n	12ac <_i2c_m_sync_transfer+0x100>
    12b2:	e7d5      	b.n	1260 <_i2c_m_sync_transfer+0xb4>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    12b4:	68ab      	ldr	r3, [r5, #8]
    12b6:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    12b8:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    12ba:	68ab      	ldr	r3, [r5, #8]
    12bc:	3301      	adds	r3, #1
    12be:	60ab      	str	r3, [r5, #8]
				msg->len--;
    12c0:	686b      	ldr	r3, [r5, #4]
    12c2:	3b01      	subs	r3, #1
    12c4:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    12c6:	2000      	movs	r0, #0
    12c8:	e025      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
	} else if (flags & SB_FLAG) {
    12ca:	078a      	lsls	r2, r1, #30
    12cc:	d569      	bpl.n	13a2 <_i2c_m_sync_transfer+0x1f6>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    12ce:	686a      	ldr	r2, [r5, #4]
    12d0:	2a00      	cmp	r2, #0
    12d2:	d05e      	beq.n	1392 <_i2c_m_sync_transfer+0x1e6>
    12d4:	075b      	lsls	r3, r3, #29
    12d6:	d45c      	bmi.n	1392 <_i2c_m_sync_transfer+0x1e6>
			msg->len--;
    12d8:	3a01      	subs	r2, #1
    12da:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    12dc:	2a00      	cmp	r2, #0
    12de:	d107      	bne.n	12f0 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    12e0:	6862      	ldr	r2, [r4, #4]
    12e2:	2380      	movs	r3, #128	; 0x80
    12e4:	02db      	lsls	r3, r3, #11
    12e6:	4313      	orrs	r3, r2
    12e8:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    12ea:	8a23      	ldrh	r3, [r4, #16]
    12ec:	0bdb      	lsrs	r3, r3, #15
    12ee:	d1fc      	bne.n	12ea <_i2c_m_sync_transfer+0x13e>
			if (msg->len == 0) {
    12f0:	686b      	ldr	r3, [r5, #4]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d107      	bne.n	1306 <_i2c_m_sync_transfer+0x15a>
				if (msg->flags & I2C_M_STOP) {
    12f6:	886b      	ldrh	r3, [r5, #2]
    12f8:	b21b      	sxth	r3, r3
    12fa:	2b00      	cmp	r3, #0
    12fc:	db39      	blt.n	1372 <_i2c_m_sync_transfer+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    12fe:	886b      	ldrh	r3, [r5, #2]
    1300:	4a2e      	ldr	r2, [pc, #184]	; (13bc <_i2c_m_sync_transfer+0x210>)
    1302:	4013      	ands	r3, r2
    1304:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1306:	68ab      	ldr	r3, [r5, #8]
    1308:	1c5a      	adds	r2, r3, #1
    130a:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    130c:	7e22      	ldrb	r2, [r4, #24]
    130e:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1310:	2302      	movs	r3, #2
    1312:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    1314:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1316:	886b      	ldrh	r3, [r5, #2]
    1318:	05db      	lsls	r3, r3, #23
    131a:	d400      	bmi.n	131e <_i2c_m_sync_transfer+0x172>
    131c:	e781      	b.n	1222 <_i2c_m_sync_transfer+0x76>
	void *   hw      = i2c_dev->hw;
    131e:	692f      	ldr	r7, [r5, #16]
	uint32_t timeout = 65535;
    1320:	4a27      	ldr	r2, [pc, #156]	; (13c0 <_i2c_m_sync_transfer+0x214>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1322:	7bbb      	ldrb	r3, [r7, #14]
    1324:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1326:	0019      	movs	r1, r3
		if (timeout-- == 0) {
    1328:	1e50      	subs	r0, r2, #1
    132a:	2a00      	cmp	r2, #0
    132c:	d100      	bne.n	1330 <_i2c_m_sync_transfer+0x184>
    132e:	e779      	b.n	1224 <_i2c_m_sync_transfer+0x78>
    1330:	0002      	movs	r2, r0
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1332:	079b      	lsls	r3, r3, #30
    1334:	d0f5      	beq.n	1322 <_i2c_m_sync_transfer+0x176>
	return I2C_OK;
    1336:	2000      	movs	r0, #0
		if (ret) {
    1338:	2800      	cmp	r0, #0
    133a:	d000      	beq.n	133e <_i2c_m_sync_transfer+0x192>
    133c:	e775      	b.n	122a <_i2c_m_sync_transfer+0x7e>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    133e:	8a23      	ldrh	r3, [r4, #16]
    1340:	0bdb      	lsrs	r3, r3, #15
    1342:	d1fc      	bne.n	133e <_i2c_m_sync_transfer+0x192>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1344:	8a23      	ldrh	r3, [r4, #16]
    1346:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1348:	07ca      	lsls	r2, r1, #31
    134a:	d5be      	bpl.n	12ca <_i2c_m_sync_transfer+0x11e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    134c:	079a      	lsls	r2, r3, #30
    134e:	d400      	bmi.n	1352 <_i2c_m_sync_transfer+0x1a6>
    1350:	e77d      	b.n	124e <_i2c_m_sync_transfer+0xa2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1352:	2201      	movs	r2, #1
    1354:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    1356:	886a      	ldrh	r2, [r5, #2]
    1358:	2180      	movs	r1, #128	; 0x80
    135a:	0149      	lsls	r1, r1, #5
    135c:	430a      	orrs	r2, r1
    135e:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1360:	886a      	ldrh	r2, [r5, #2]
    1362:	4916      	ldr	r1, [pc, #88]	; (13bc <_i2c_m_sync_transfer+0x210>)
    1364:	400a      	ands	r2, r1
    1366:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1368:	07db      	lsls	r3, r3, #31
    136a:	d517      	bpl.n	139c <_i2c_m_sync_transfer+0x1f0>
				return I2C_ERR_BUS;
    136c:	2005      	movs	r0, #5
    136e:	4240      	negs	r0, r0
    1370:	e7d1      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1372:	6863      	ldr	r3, [r4, #4]
    1374:	4a11      	ldr	r2, [pc, #68]	; (13bc <_i2c_m_sync_transfer+0x210>)
    1376:	4013      	ands	r3, r2
    1378:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    137a:	8a23      	ldrh	r3, [r4, #16]
    137c:	0bdb      	lsrs	r3, r3, #15
    137e:	d1fc      	bne.n	137a <_i2c_m_sync_transfer+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1380:	6862      	ldr	r2, [r4, #4]
    1382:	23c0      	movs	r3, #192	; 0xc0
    1384:	029b      	lsls	r3, r3, #10
    1386:	4313      	orrs	r3, r2
    1388:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    138a:	8a23      	ldrh	r3, [r4, #16]
    138c:	0bdb      	lsrs	r3, r3, #15
    138e:	d1fc      	bne.n	138a <_i2c_m_sync_transfer+0x1de>
    1390:	e7b5      	b.n	12fe <_i2c_m_sync_transfer+0x152>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1392:	2302      	movs	r3, #2
    1394:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    1396:	2002      	movs	r0, #2
    1398:	4240      	negs	r0, r0
    139a:	e7bc      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
			return I2C_ERR_BAD_ADDRESS;
    139c:	2004      	movs	r0, #4
    139e:	4240      	negs	r0, r0
    13a0:	e7b9      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
	return I2C_OK;
    13a2:	2000      	movs	r0, #0
    13a4:	e7b7      	b.n	1316 <_i2c_m_sync_transfer+0x16a>
		return I2C_ERR_BUSY;
    13a6:	2006      	movs	r0, #6
    13a8:	4240      	negs	r0, r0
    13aa:	e73a      	b.n	1222 <_i2c_m_sync_transfer+0x76>
    13ac:	0000f330 	.word	0x0000f330
    13b0:	0000059b 	.word	0x0000059b
    13b4:	0000059c 	.word	0x0000059c
    13b8:	0000059d 	.word	0x0000059d
    13bc:	fffffeff 	.word	0xfffffeff
    13c0:	0000ffff 	.word	0x0000ffff

000013c4 <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    13c4:	b570      	push	{r4, r5, r6, lr}
    13c6:	0006      	movs	r6, r0
    13c8:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    13ca:	0008      	movs	r0, r1
    13cc:	f7ff fcda 	bl	d84 <_sercom_get_hardware_index>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    13d0:	2300      	movs	r3, #0
    13d2:	2b01      	cmp	r3, #1
    13d4:	d80b      	bhi.n	13ee <_spi_m_sync_init+0x2a>
		if (sercomspi_regs[i].n == n) {
    13d6:	0119      	lsls	r1, r3, #4
    13d8:	4a5f      	ldr	r2, [pc, #380]	; (1558 <_spi_m_sync_init+0x194>)
    13da:	1852      	adds	r2, r2, r1
    13dc:	7bd2      	ldrb	r2, [r2, #15]
    13de:	4290      	cmp	r0, r2
    13e0:	d002      	beq.n	13e8 <_spi_m_sync_init+0x24>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    13e2:	3301      	adds	r3, #1
    13e4:	b2db      	uxtb	r3, r3
    13e6:	e7f4      	b.n	13d2 <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    13e8:	4b5b      	ldr	r3, [pc, #364]	; (1558 <_spi_m_sync_init+0x194>)
    13ea:	185d      	adds	r5, r3, r1
    13ec:	e000      	b.n	13f0 <_spi_m_sync_init+0x2c>
	return NULL;
    13ee:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    13f0:	2e00      	cmp	r6, #0
    13f2:	d100      	bne.n	13f6 <_spi_m_sync_init+0x32>
    13f4:	e06a      	b.n	14cc <_spi_m_sync_init+0x108>
    13f6:	2c00      	cmp	r4, #0
    13f8:	d100      	bne.n	13fc <_spi_m_sync_init+0x38>
    13fa:	e065      	b.n	14c8 <_spi_m_sync_init+0x104>
    13fc:	2001      	movs	r0, #1
    13fe:	4a57      	ldr	r2, [pc, #348]	; (155c <_spi_m_sync_init+0x198>)
    1400:	4957      	ldr	r1, [pc, #348]	; (1560 <_spi_m_sync_init+0x19c>)
    1402:	f7ff fad3 	bl	9ac <assert>

	if (regs == NULL) {
    1406:	2d00      	cmp	r5, #0
    1408:	d100      	bne.n	140c <_spi_m_sync_init+0x48>
    140a:	e0a2      	b.n	1552 <_spi_m_sync_init+0x18e>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    140c:	8a23      	ldrh	r3, [r4, #16]
    140e:	0bdb      	lsrs	r3, r3, #15
    1410:	d1fc      	bne.n	140c <_spi_m_sync_init+0x48>
    1412:	8a23      	ldrh	r3, [r4, #16]
    1414:	0bdb      	lsrs	r3, r3, #15
    1416:	d1fc      	bne.n	1412 <_spi_m_sync_init+0x4e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1418:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    141a:	079b      	lsls	r3, r3, #30
    141c:	d507      	bpl.n	142e <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    141e:	2300      	movs	r3, #0
    1420:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1422:	8a23      	ldrh	r3, [r4, #16]
    1424:	0bdb      	lsrs	r3, r3, #15
    1426:	d1fc      	bne.n	1422 <_spi_m_sync_init+0x5e>
    1428:	8a23      	ldrh	r3, [r4, #16]
    142a:	0bdb      	lsrs	r3, r3, #15
    142c:	d1fc      	bne.n	1428 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    142e:	2301      	movs	r3, #1
    1430:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1432:	8a23      	ldrh	r3, [r4, #16]
    1434:	0bdb      	lsrs	r3, r3, #15
    1436:	d1fc      	bne.n	1432 <_spi_m_sync_init+0x6e>
    1438:	8a23      	ldrh	r3, [r4, #16]
    143a:	0bdb      	lsrs	r3, r3, #15
    143c:	d1fc      	bne.n	1438 <_spi_m_sync_init+0x74>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    143e:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    1440:	782b      	ldrb	r3, [r5, #0]
    1442:	786a      	ldrb	r2, [r5, #1]
    1444:	0212      	lsls	r2, r2, #8
    1446:	431a      	orrs	r2, r3
    1448:	78ab      	ldrb	r3, [r5, #2]
    144a:	041b      	lsls	r3, r3, #16
    144c:	431a      	orrs	r2, r3
    144e:	78eb      	ldrb	r3, [r5, #3]
    1450:	061b      	lsls	r3, r3, #24
    1452:	4313      	orrs	r3, r2
    1454:	221c      	movs	r2, #28
    1456:	4013      	ands	r3, r2
    1458:	2b08      	cmp	r3, #8
    145a:	d039      	beq.n	14d0 <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    145c:	2c00      	cmp	r4, #0
    145e:	d100      	bne.n	1462 <_spi_m_sync_init+0x9e>
    1460:	e073      	b.n	154a <_spi_m_sync_init+0x186>
    1462:	2d00      	cmp	r5, #0
    1464:	d100      	bne.n	1468 <_spi_m_sync_init+0xa4>
    1466:	e06e      	b.n	1546 <_spi_m_sync_init+0x182>
    1468:	2001      	movs	r0, #1
    146a:	4a3e      	ldr	r2, [pc, #248]	; (1564 <_spi_m_sync_init+0x1a0>)
    146c:	493c      	ldr	r1, [pc, #240]	; (1560 <_spi_m_sync_init+0x19c>)
    146e:	f7ff fa9d 	bl	9ac <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    1472:	782b      	ldrb	r3, [r5, #0]
    1474:	786a      	ldrb	r2, [r5, #1]
    1476:	0212      	lsls	r2, r2, #8
    1478:	431a      	orrs	r2, r3
    147a:	78ab      	ldrb	r3, [r5, #2]
    147c:	041b      	lsls	r3, r3, #16
    147e:	431a      	orrs	r2, r3
    1480:	78eb      	ldrb	r3, [r5, #3]
    1482:	061b      	lsls	r3, r3, #24
    1484:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1486:	4a38      	ldr	r2, [pc, #224]	; (1568 <_spi_m_sync_init+0x1a4>)
    1488:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    148a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    148c:	8a23      	ldrh	r3, [r4, #16]
    148e:	0bdb      	lsrs	r3, r3, #15
    1490:	d1fc      	bne.n	148c <_spi_m_sync_init+0xc8>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    1492:	792b      	ldrb	r3, [r5, #4]
    1494:	796a      	ldrb	r2, [r5, #5]
    1496:	0212      	lsls	r2, r2, #8
    1498:	431a      	orrs	r2, r3
    149a:	79ab      	ldrb	r3, [r5, #6]
    149c:	041b      	lsls	r3, r3, #16
    149e:	431a      	orrs	r2, r3
    14a0:	79eb      	ldrb	r3, [r5, #7]
    14a2:	061b      	lsls	r3, r3, #24
    14a4:	4313      	orrs	r3, r2
    14a6:	4a31      	ldr	r2, [pc, #196]	; (156c <_spi_m_sync_init+0x1a8>)
    14a8:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    14aa:	2280      	movs	r2, #128	; 0x80
    14ac:	0292      	lsls	r2, r2, #10
    14ae:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    14b0:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    14b2:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    14b4:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    14b6:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    14b8:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    14ba:	792b      	ldrb	r3, [r5, #4]
    14bc:	075b      	lsls	r3, r3, #29
    14be:	d146      	bne.n	154e <_spi_m_sync_init+0x18a>
    14c0:	2301      	movs	r3, #1
    14c2:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    14c4:	2000      	movs	r0, #0
}
    14c6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    14c8:	2000      	movs	r0, #0
    14ca:	e798      	b.n	13fe <_spi_m_sync_init+0x3a>
    14cc:	2000      	movs	r0, #0
    14ce:	e796      	b.n	13fe <_spi_m_sync_init+0x3a>
	ASSERT(hw && regs);
    14d0:	2c00      	cmp	r4, #0
    14d2:	d036      	beq.n	1542 <_spi_m_sync_init+0x17e>
    14d4:	2d00      	cmp	r5, #0
    14d6:	d032      	beq.n	153e <_spi_m_sync_init+0x17a>
    14d8:	2001      	movs	r0, #1
    14da:	4a25      	ldr	r2, [pc, #148]	; (1570 <_spi_m_sync_init+0x1ac>)
    14dc:	4920      	ldr	r1, [pc, #128]	; (1560 <_spi_m_sync_init+0x19c>)
    14de:	f7ff fa65 	bl	9ac <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    14e2:	782b      	ldrb	r3, [r5, #0]
    14e4:	786a      	ldrb	r2, [r5, #1]
    14e6:	0212      	lsls	r2, r2, #8
    14e8:	431a      	orrs	r2, r3
    14ea:	78ab      	ldrb	r3, [r5, #2]
    14ec:	041b      	lsls	r3, r3, #16
    14ee:	431a      	orrs	r2, r3
    14f0:	78eb      	ldrb	r3, [r5, #3]
    14f2:	061b      	lsls	r3, r3, #24
    14f4:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    14f6:	4a1c      	ldr	r2, [pc, #112]	; (1568 <_spi_m_sync_init+0x1a4>)
    14f8:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    14fa:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    14fc:	8a23      	ldrh	r3, [r4, #16]
    14fe:	0bdb      	lsrs	r3, r3, #15
    1500:	d1fc      	bne.n	14fc <_spi_m_sync_init+0x138>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    1502:	792b      	ldrb	r3, [r5, #4]
    1504:	796a      	ldrb	r2, [r5, #5]
    1506:	0212      	lsls	r2, r2, #8
    1508:	431a      	orrs	r2, r3
    150a:	79ab      	ldrb	r3, [r5, #6]
    150c:	041b      	lsls	r3, r3, #16
    150e:	431a      	orrs	r2, r3
    1510:	79eb      	ldrb	r3, [r5, #7]
    1512:	061b      	lsls	r3, r3, #24
    1514:	4313      	orrs	r3, r2
    1516:	4a17      	ldr	r2, [pc, #92]	; (1574 <_spi_m_sync_init+0x1b0>)
    1518:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    151a:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    151c:	7a2b      	ldrb	r3, [r5, #8]
    151e:	7a6a      	ldrb	r2, [r5, #9]
    1520:	0212      	lsls	r2, r2, #8
    1522:	431a      	orrs	r2, r3
    1524:	7aab      	ldrb	r3, [r5, #10]
    1526:	041b      	lsls	r3, r3, #16
    1528:	431a      	orrs	r2, r3
    152a:	7aeb      	ldrb	r3, [r5, #11]
    152c:	061b      	lsls	r3, r3, #24
    152e:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1530:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1532:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1534:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    1536:	8a23      	ldrh	r3, [r4, #16]
    1538:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    153a:	d1fc      	bne.n	1536 <_spi_m_sync_init+0x172>
    153c:	e7bd      	b.n	14ba <_spi_m_sync_init+0xf6>
	ASSERT(hw && regs);
    153e:	2000      	movs	r0, #0
    1540:	e7cb      	b.n	14da <_spi_m_sync_init+0x116>
    1542:	2000      	movs	r0, #0
    1544:	e7c9      	b.n	14da <_spi_m_sync_init+0x116>
	ASSERT(hw && regs);
    1546:	2000      	movs	r0, #0
    1548:	e78f      	b.n	146a <_spi_m_sync_init+0xa6>
    154a:	2000      	movs	r0, #0
    154c:	e78d      	b.n	146a <_spi_m_sync_init+0xa6>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    154e:	2302      	movs	r3, #2
    1550:	e7b7      	b.n	14c2 <_spi_m_sync_init+0xfe>
		return ERR_INVALID_ARG;
    1552:	200d      	movs	r0, #13
    1554:	4240      	negs	r0, r0
    1556:	e7b6      	b.n	14c6 <_spi_m_sync_init+0x102>
    1558:	0000f374 	.word	0x0000f374
    155c:	000008a3 	.word	0x000008a3
    1560:	0000f330 	.word	0x0000f330
    1564:	00000872 	.word	0x00000872
    1568:	fffffefc 	.word	0xfffffefc
    156c:	fffd3fbf 	.word	0xfffd3fbf
    1570:	00000883 	.word	0x00000883
    1574:	00020040 	.word	0x00020040

00001578 <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    1578:	b510      	push	{r4, lr}
    157a:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    157c:	d00d      	beq.n	159a <_spi_m_sync_enable+0x22>
    157e:	6803      	ldr	r3, [r0, #0]
    1580:	2b00      	cmp	r3, #0
    1582:	d008      	beq.n	1596 <_spi_m_sync_enable+0x1e>
    1584:	2001      	movs	r0, #1
    1586:	4a06      	ldr	r2, [pc, #24]	; (15a0 <_spi_m_sync_enable+0x28>)
    1588:	4906      	ldr	r1, [pc, #24]	; (15a4 <_spi_m_sync_enable+0x2c>)
    158a:	f7ff fa0f 	bl	9ac <assert>

	return _spi_sync_enable(dev->prvt);
    158e:	6820      	ldr	r0, [r4, #0]
    1590:	f7ff fc00 	bl	d94 <_spi_sync_enable>
}
    1594:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    1596:	2000      	movs	r0, #0
    1598:	e7f5      	b.n	1586 <_spi_m_sync_enable+0xe>
    159a:	2000      	movs	r0, #0
    159c:	e7f3      	b.n	1586 <_spi_m_sync_enable+0xe>
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	0000090a 	.word	0x0000090a
    15a4:	0000f330 	.word	0x0000f330

000015a8 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    15a8:	b570      	push	{r4, r5, r6, lr}
    15aa:	b088      	sub	sp, #32
    15ac:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    15ae:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    15b0:	680b      	ldr	r3, [r1, #0]
    15b2:	9303      	str	r3, [sp, #12]
    15b4:	684b      	ldr	r3, [r1, #4]
    15b6:	9304      	str	r3, [sp, #16]
    15b8:	2300      	movs	r3, #0
    15ba:	9305      	str	r3, [sp, #20]
    15bc:	9306      	str	r3, [sp, #24]
    15be:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    15c0:	2800      	cmp	r0, #0
    15c2:	d014      	beq.n	15ee <_spi_m_sync_trans+0x46>
    15c4:	2c00      	cmp	r4, #0
    15c6:	d010      	beq.n	15ea <_spi_m_sync_trans+0x42>
    15c8:	2001      	movs	r0, #1
    15ca:	4a2d      	ldr	r2, [pc, #180]	; (1680 <_spi_m_sync_trans+0xd8>)
    15cc:	492d      	ldr	r1, [pc, #180]	; (1684 <_spi_m_sync_trans+0xdc>)
    15ce:	f7ff f9ed 	bl	9ac <assert>
    15d2:	8a23      	ldrh	r3, [r4, #16]
    15d4:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    15d6:	d14f      	bne.n	1678 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    15d8:	8a23      	ldrh	r3, [r4, #16]
    15da:	0bdb      	lsrs	r3, r3, #15
    15dc:	d1fc      	bne.n	15d8 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    15de:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    15e0:	079b      	lsls	r3, r3, #30
    15e2:	d418      	bmi.n	1616 <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    15e4:	2014      	movs	r0, #20
    15e6:	4240      	negs	r0, r0
    15e8:	e044      	b.n	1674 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    15ea:	2000      	movs	r0, #0
    15ec:	e7ed      	b.n	15ca <_spi_m_sync_trans+0x22>
    15ee:	2000      	movs	r0, #0
    15f0:	e7eb      	b.n	15ca <_spi_m_sync_trans+0x22>
		return false;
    15f2:	2200      	movs	r2, #0
    15f4:	e026      	b.n	1644 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    15f6:	7858      	ldrb	r0, [r3, #1]
    15f8:	0200      	lsls	r0, r0, #8
    15fa:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    15fc:	3302      	adds	r3, #2
    15fe:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    1600:	3201      	adds	r2, #1
    1602:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    1604:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    1606:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1608:	9805      	ldr	r0, [sp, #20]
    160a:	68ab      	ldr	r3, [r5, #8]
    160c:	4298      	cmp	r0, r3
    160e:	d302      	bcc.n	1616 <_spi_m_sync_trans+0x6e>
    1610:	9a06      	ldr	r2, [sp, #24]
    1612:	4293      	cmp	r3, r2
    1614:	d929      	bls.n	166a <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    1616:	7ba3      	ldrb	r3, [r4, #14]
    1618:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    161a:	075a      	lsls	r2, r3, #29
    161c:	d5e9      	bpl.n	15f2 <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    161e:	8b22      	ldrh	r2, [r4, #24]
    1620:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    1622:	9904      	ldr	r1, [sp, #16]
    1624:	2900      	cmp	r1, #0
    1626:	d008      	beq.n	163a <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    1628:	1c48      	adds	r0, r1, #1
    162a:	9004      	str	r0, [sp, #16]
    162c:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    162e:	2e01      	cmp	r6, #1
    1630:	d903      	bls.n	163a <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    1632:	1c88      	adds	r0, r1, #2
    1634:	9004      	str	r0, [sp, #16]
    1636:	0a12      	lsrs	r2, r2, #8
    1638:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    163a:	9a06      	ldr	r2, [sp, #24]
    163c:	9201      	str	r2, [sp, #4]
    163e:	3201      	adds	r2, #1
    1640:	9206      	str	r2, [sp, #24]
	return true;
    1642:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    1644:	2a00      	cmp	r2, #0
    1646:	d1df      	bne.n	1608 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1648:	9906      	ldr	r1, [sp, #24]
    164a:	9a05      	ldr	r2, [sp, #20]
    164c:	4291      	cmp	r1, r2
    164e:	d3db      	bcc.n	1608 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    1650:	07db      	lsls	r3, r3, #31
    1652:	d5d9      	bpl.n	1608 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    1654:	9b03      	ldr	r3, [sp, #12]
    1656:	2b00      	cmp	r3, #0
    1658:	d005      	beq.n	1666 <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    165a:	1c59      	adds	r1, r3, #1
    165c:	9103      	str	r1, [sp, #12]
    165e:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    1660:	2e01      	cmp	r6, #1
    1662:	d8c8      	bhi.n	15f6 <_spi_m_sync_trans+0x4e>
    1664:	e7cc      	b.n	1600 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    1666:	4908      	ldr	r1, [pc, #32]	; (1688 <_spi_m_sync_trans+0xe0>)
    1668:	e7ca      	b.n	1600 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    166a:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    166c:	079b      	lsls	r3, r3, #30
    166e:	d0fc      	beq.n	166a <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    1670:	2303      	movs	r3, #3
    1672:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1674:	b008      	add	sp, #32
    1676:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    1678:	2004      	movs	r0, #4
    167a:	4240      	negs	r0, r0
    167c:	e7fa      	b.n	1674 <_spi_m_sync_trans+0xcc>
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	00000a01 	.word	0x00000a01
    1684:	0000f330 	.word	0x0000f330
    1688:	000001ff 	.word	0x000001ff

0000168c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    168c:	4b0f      	ldr	r3, [pc, #60]	; (16cc <_sysctrl_init_sources+0x40>)
    168e:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1690:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1692:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1694:	0f92      	lsrs	r2, r2, #30
    1696:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1698:	0409      	lsls	r1, r1, #16
    169a:	480d      	ldr	r0, [pc, #52]	; (16d0 <_sysctrl_init_sources+0x44>)
    169c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    169e:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    16a0:	490c      	ldr	r1, [pc, #48]	; (16d4 <_sysctrl_init_sources+0x48>)
    16a2:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    16a4:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    16a6:	699a      	ldr	r2, [r3, #24]
    16a8:	2102      	movs	r1, #2
    16aa:	430a      	orrs	r2, r1
    16ac:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    16ae:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    16b0:	311d      	adds	r1, #29
    16b2:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    16b4:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    16b6:	4b05      	ldr	r3, [pc, #20]	; (16cc <_sysctrl_init_sources+0x40>)
    16b8:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    16ba:	071b      	lsls	r3, r3, #28
    16bc:	d5fb      	bpl.n	16b6 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    16be:	4a03      	ldr	r2, [pc, #12]	; (16cc <_sysctrl_init_sources+0x40>)
    16c0:	6a13      	ldr	r3, [r2, #32]
    16c2:	2180      	movs	r1, #128	; 0x80
    16c4:	430b      	orrs	r3, r1
    16c6:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    16c8:	4770      	bx	lr
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	40000800 	.word	0x40000800
    16d0:	0fff0000 	.word	0x0fff0000
    16d4:	00000302 	.word	0x00000302

000016d8 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    16d8:	2202      	movs	r2, #2
    16da:	4b1b      	ldr	r3, [pc, #108]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    16dc:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    16de:	4b1a      	ldr	r3, [pc, #104]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    16e0:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    16e2:	06db      	lsls	r3, r3, #27
    16e4:	d5fb      	bpl.n	16de <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    16e6:	4a19      	ldr	r2, [pc, #100]	; (174c <_sysctrl_init_referenced_generators+0x74>)
    16e8:	4b17      	ldr	r3, [pc, #92]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    16ea:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    16ec:	4b18      	ldr	r3, [pc, #96]	; (1750 <_sysctrl_init_referenced_generators+0x78>)
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	0e9b      	lsrs	r3, r3, #26
    16f2:	2b3f      	cmp	r3, #63	; 0x3f
    16f4:	d020      	beq.n	1738 <_sysctrl_init_referenced_generators+0x60>
    16f6:	029b      	lsls	r3, r3, #10
    16f8:	2280      	movs	r2, #128	; 0x80
    16fa:	0092      	lsls	r2, r2, #2
    16fc:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    16fe:	4a12      	ldr	r2, [pc, #72]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    1700:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1702:	2302      	movs	r3, #2
    1704:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1706:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1708:	075b      	lsls	r3, r3, #29
    170a:	d518      	bpl.n	173e <_sysctrl_init_referenced_generators+0x66>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    170c:	4b0e      	ldr	r3, [pc, #56]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    170e:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    1710:	23d0      	movs	r3, #208	; 0xd0
    1712:	4013      	ands	r3, r2
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1714:	2bd0      	cmp	r3, #208	; 0xd0
    1716:	d1f9      	bne.n	170c <_sysctrl_init_referenced_generators+0x34>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    1718:	4a0b      	ldr	r2, [pc, #44]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    171a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    171c:	2180      	movs	r1, #128	; 0x80
    171e:	430b      	orrs	r3, r1
    1720:	b29b      	uxth	r3, r3
    1722:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1724:	4b0b      	ldr	r3, [pc, #44]	; (1754 <_sysctrl_init_referenced_generators+0x7c>)
    1726:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1728:	09db      	lsrs	r3, r3, #7
    172a:	d1fb      	bne.n	1724 <_sysctrl_init_referenced_generators+0x4c>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    172c:	4a06      	ldr	r2, [pc, #24]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    172e:	6993      	ldr	r3, [r2, #24]
    1730:	2102      	movs	r1, #2
    1732:	438b      	bics	r3, r1
    1734:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1736:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1738:	23fc      	movs	r3, #252	; 0xfc
    173a:	01db      	lsls	r3, r3, #7
    173c:	e7df      	b.n	16fe <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    173e:	4b02      	ldr	r3, [pc, #8]	; (1748 <_sysctrl_init_referenced_generators+0x70>)
    1740:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1742:	06db      	lsls	r3, r3, #27
    1744:	d5fb      	bpl.n	173e <_sysctrl_init_referenced_generators+0x66>
    1746:	e7e7      	b.n	1718 <_sysctrl_init_referenced_generators+0x40>
    1748:	40000800 	.word	0x40000800
    174c:	04010000 	.word	0x04010000
    1750:	00806024 	.word	0x00806024
    1754:	40000c00 	.word	0x40000c00

00001758 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1758:	b570      	push	{r4, r5, r6, lr}
    175a:	0005      	movs	r5, r0
	void *const hw = device->hw;
    175c:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    175e:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1760:	07db      	lsls	r3, r3, #31
    1762:	d505      	bpl.n	1770 <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1764:	2301      	movs	r3, #1
    1766:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1768:	6803      	ldr	r3, [r0, #0]
    176a:	2b00      	cmp	r3, #0
    176c:	d000      	beq.n	1770 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    176e:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1770:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1772:	079b      	lsls	r3, r3, #30
    1774:	d506      	bpl.n	1784 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1776:	2302      	movs	r3, #2
    1778:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    177a:	686b      	ldr	r3, [r5, #4]
    177c:	2b00      	cmp	r3, #0
    177e:	d001      	beq.n	1784 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1780:	0028      	movs	r0, r5
    1782:	4798      	blx	r3
		}
	}
}
    1784:	bd70      	pop	{r4, r5, r6, pc}
	...

00001788 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1788:	4b02      	ldr	r3, [pc, #8]	; (1794 <tc_get_hardware_index+0xc>)
    178a:	469c      	mov	ip, r3
    178c:	4460      	add	r0, ip
    178e:	0a80      	lsrs	r0, r0, #10
    1790:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    1792:	4770      	bx	lr
    1794:	bdffe000 	.word	0xbdffe000

00001798 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC6) {
    1798:	4b06      	ldr	r3, [pc, #24]	; (17b4 <_tc_init_irq_param+0x1c>)
    179a:	4298      	cmp	r0, r3
    179c:	d003      	beq.n	17a6 <_tc_init_irq_param+0xe>
		_tc6_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC7) {
    179e:	4b06      	ldr	r3, [pc, #24]	; (17b8 <_tc_init_irq_param+0x20>)
    17a0:	4298      	cmp	r0, r3
    17a2:	d003      	beq.n	17ac <_tc_init_irq_param+0x14>
		_tc7_dev = (struct _pwm_device *)dev;
	}
}
    17a4:	4770      	bx	lr
		_tc6_dev = (struct _pwm_device *)dev;
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <_tc_init_irq_param+0x24>)
    17a8:	6019      	str	r1, [r3, #0]
    17aa:	e7f8      	b.n	179e <_tc_init_irq_param+0x6>
		_tc7_dev = (struct _pwm_device *)dev;
    17ac:	4b04      	ldr	r3, [pc, #16]	; (17c0 <_tc_init_irq_param+0x28>)
    17ae:	6019      	str	r1, [r3, #0]
}
    17b0:	e7f8      	b.n	17a4 <_tc_init_irq_param+0xc>
    17b2:	46c0      	nop			; (mov r8, r8)
    17b4:	42003800 	.word	0x42003800
    17b8:	42003c00 	.word	0x42003c00
    17bc:	20000a84 	.word	0x20000a84
    17c0:	20000a88 	.word	0x20000a88

000017c4 <get_tc_index>:
{
    17c4:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    17c6:	f7ff ffdf 	bl	1788 <tc_get_hardware_index>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    17ca:	2300      	movs	r3, #0
    17cc:	2b01      	cmp	r3, #1
    17ce:	d80b      	bhi.n	17e8 <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    17d0:	009a      	lsls	r2, r3, #2
    17d2:	18d2      	adds	r2, r2, r3
    17d4:	0091      	lsls	r1, r2, #2
    17d6:	4a09      	ldr	r2, [pc, #36]	; (17fc <get_tc_index+0x38>)
    17d8:	5c8a      	ldrb	r2, [r1, r2]
    17da:	4290      	cmp	r0, r2
    17dc:	d002      	beq.n	17e4 <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    17de:	3301      	adds	r3, #1
    17e0:	b2db      	uxtb	r3, r3
    17e2:	e7f3      	b.n	17cc <get_tc_index+0x8>
			return i;
    17e4:	b258      	sxtb	r0, r3
    17e6:	e007      	b.n	17f8 <get_tc_index+0x34>
	ASSERT(false);
    17e8:	2276      	movs	r2, #118	; 0x76
    17ea:	32ff      	adds	r2, #255	; 0xff
    17ec:	4904      	ldr	r1, [pc, #16]	; (1800 <get_tc_index+0x3c>)
    17ee:	2000      	movs	r0, #0
    17f0:	f7ff f8dc 	bl	9ac <assert>
	return -1;
    17f4:	2001      	movs	r0, #1
    17f6:	4240      	negs	r0, r0
}
    17f8:	bd10      	pop	{r4, pc}
    17fa:	46c0      	nop			; (mov r8, r8)
    17fc:	20000000 	.word	0x20000000
    1800:	0000f394 	.word	0x0000f394

00001804 <_pwm_init>:
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	0005      	movs	r5, r0
    1808:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    180a:	0008      	movs	r0, r1
    180c:	f7ff ffda 	bl	17c4 <get_tc_index>
	device->hw = hw;
    1810:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1812:	7be3      	ldrb	r3, [r4, #15]
    1814:	09db      	lsrs	r3, r3, #7
    1816:	d1fc      	bne.n	1812 <_pwm_init+0xe>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1818:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    181a:	079b      	lsls	r3, r3, #30
    181c:	d504      	bpl.n	1828 <_pwm_init+0x24>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    181e:	2300      	movs	r3, #0
    1820:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    1822:	7be3      	ldrb	r3, [r4, #15]
    1824:	09db      	lsrs	r3, r3, #7
    1826:	d1fc      	bne.n	1822 <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1828:	2301      	movs	r3, #1
    182a:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    182c:	7be3      	ldrb	r3, [r4, #15]
    182e:	09db      	lsrs	r3, r3, #7
    1830:	d1fc      	bne.n	182c <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    1832:	0082      	lsls	r2, r0, #2
    1834:	1812      	adds	r2, r2, r0
    1836:	0091      	lsls	r1, r2, #2
    1838:	4b2a      	ldr	r3, [pc, #168]	; (18e4 <_pwm_init+0xe0>)
    183a:	185b      	adds	r3, r3, r1
    183c:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    183e:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1840:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1842:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1844:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    1846:	8163      	strh	r3, [r4, #10]
    1848:	230c      	movs	r3, #12
    184a:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    184c:	2b08      	cmp	r3, #8
    184e:	d037      	beq.n	18c0 <_pwm_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1850:	2b00      	cmp	r3, #0
    1852:	d141      	bne.n	18d8 <_pwm_init+0xd4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1854:	4a23      	ldr	r2, [pc, #140]	; (18e4 <_pwm_init+0xe0>)
    1856:	0083      	lsls	r3, r0, #2
    1858:	181e      	adds	r6, r3, r0
    185a:	00b1      	lsls	r1, r6, #2
    185c:	000e      	movs	r6, r1
    185e:	1851      	adds	r1, r2, r1
    1860:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1862:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1864:	1992      	adds	r2, r2, r6
    1866:	8a13      	ldrh	r3, [r2, #16]
    1868:	8363      	strh	r3, [r4, #26]
	_tc_init_irq_param(hw, (void *)device);
    186a:	0029      	movs	r1, r5
    186c:	0020      	movs	r0, r4
    186e:	f7ff ff93 	bl	1798 <_tc_init_irq_param>
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1872:	0020      	movs	r0, r4
    1874:	f7ff ff88 	bl	1788 <tc_get_hardware_index>
    1878:	300d      	adds	r0, #13
    187a:	b2c0      	uxtb	r0, r0
    187c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    187e:	2b00      	cmp	r3, #0
    1880:	db0a      	blt.n	1898 <_pwm_init+0x94>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1882:	211f      	movs	r1, #31
    1884:	4001      	ands	r1, r0
    1886:	2201      	movs	r2, #1
    1888:	408a      	lsls	r2, r1
    188a:	2180      	movs	r1, #128	; 0x80
    188c:	4c16      	ldr	r4, [pc, #88]	; (18e8 <_pwm_init+0xe4>)
    188e:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1890:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1894:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1898:	2b00      	cmp	r3, #0
    189a:	db07      	blt.n	18ac <_pwm_init+0xa8>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    189c:	211f      	movs	r1, #31
    189e:	4001      	ands	r1, r0
    18a0:	2201      	movs	r2, #1
    18a2:	408a      	lsls	r2, r1
    18a4:	21c0      	movs	r1, #192	; 0xc0
    18a6:	0049      	lsls	r1, r1, #1
    18a8:	4c0f      	ldr	r4, [pc, #60]	; (18e8 <_pwm_init+0xe4>)
    18aa:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    18ac:	2b00      	cmp	r3, #0
    18ae:	db16      	blt.n	18de <_pwm_init+0xda>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    18b0:	231f      	movs	r3, #31
    18b2:	4018      	ands	r0, r3
    18b4:	3b1e      	subs	r3, #30
    18b6:	4083      	lsls	r3, r0
    18b8:	4a0b      	ldr	r2, [pc, #44]	; (18e8 <_pwm_init+0xe4>)
    18ba:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    18bc:	2000      	movs	r0, #0
}
    18be:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    18c0:	4a08      	ldr	r2, [pc, #32]	; (18e4 <_pwm_init+0xe0>)
    18c2:	0083      	lsls	r3, r0, #2
    18c4:	181e      	adds	r6, r3, r0
    18c6:	00b1      	lsls	r1, r6, #2
    18c8:	000e      	movs	r6, r1
    18ca:	1851      	adds	r1, r2, r1
    18cc:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    18ce:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    18d0:	1992      	adds	r2, r2, r6
    18d2:	6913      	ldr	r3, [r2, #16]
    18d4:	61e3      	str	r3, [r4, #28]
    18d6:	e7c8      	b.n	186a <_pwm_init+0x66>
		return ERR_INVALID_DATA;
    18d8:	2001      	movs	r0, #1
    18da:	4240      	negs	r0, r0
    18dc:	e7ef      	b.n	18be <_pwm_init+0xba>
	return ERR_NONE;
    18de:	2000      	movs	r0, #0
    18e0:	e7ed      	b.n	18be <_pwm_init+0xba>
    18e2:	46c0      	nop			; (mov r8, r8)
    18e4:	20000000 	.word	0x20000000
    18e8:	e000e100 	.word	0xe000e100

000018ec <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    18ec:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    18ee:	8813      	ldrh	r3, [r2, #0]
    18f0:	2102      	movs	r1, #2
    18f2:	430b      	orrs	r3, r1
    18f4:	b29b      	uxth	r3, r3
    18f6:	8013      	strh	r3, [r2, #0]
}
    18f8:	4770      	bx	lr
	...

000018fc <_pwm_set_param>:
{
    18fc:	b570      	push	{r4, r5, r6, lr}
    18fe:	0004      	movs	r4, r0
    1900:	000e      	movs	r6, r1
    1902:	0015      	movs	r5, r2
	int8_t      i  = get_tc_index(device->hw);
    1904:	6900      	ldr	r0, [r0, #16]
    1906:	f7ff ff5d 	bl	17c4 <get_tc_index>
	void *const hw = device->hw;
    190a:	6924      	ldr	r4, [r4, #16]
	_tcs[i].cc0    = period;
    190c:	0082      	lsls	r2, r0, #2
    190e:	1812      	adds	r2, r2, r0
    1910:	0091      	lsls	r1, r2, #2
    1912:	4b0e      	ldr	r3, [pc, #56]	; (194c <_pwm_set_param+0x50>)
    1914:	185b      	adds	r3, r3, r1
    1916:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1    = duty_cycle;
    1918:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    191a:	885a      	ldrh	r2, [r3, #2]
    191c:	230c      	movs	r3, #12
    191e:	4013      	ands	r3, r2
    1920:	2b08      	cmp	r3, #8
    1922:	d00b      	beq.n	193c <_pwm_set_param+0x40>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    1924:	4a09      	ldr	r2, [pc, #36]	; (194c <_pwm_set_param+0x50>)
    1926:	0083      	lsls	r3, r0, #2
    1928:	181d      	adds	r5, r3, r0
    192a:	00a9      	lsls	r1, r5, #2
    192c:	000d      	movs	r5, r1
    192e:	1851      	adds	r1, r2, r1
    1930:	8989      	ldrh	r1, [r1, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1932:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    1934:	1952      	adds	r2, r2, r5
    1936:	8a13      	ldrh	r3, [r2, #16]
    1938:	8363      	strh	r3, [r4, #26]
}
    193a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    193c:	4a03      	ldr	r2, [pc, #12]	; (194c <_pwm_set_param+0x50>)
    193e:	000d      	movs	r5, r1
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1940:	61a6      	str	r6, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1942:	1952      	adds	r2, r2, r5
    1944:	6913      	ldr	r3, [r2, #16]
    1946:	61e3      	str	r3, [r4, #28]
    1948:	e7f7      	b.n	193a <_pwm_set_param+0x3e>
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	20000000 	.word	0x20000000

00001950 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1950:	6903      	ldr	r3, [r0, #16]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1952:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    1954:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    1956:	2001      	movs	r0, #1
    1958:	4018      	ands	r0, r3
}
    195a:	4770      	bx	lr

0000195c <_tc_get_pwm>:
}
    195c:	2000      	movs	r0, #0
    195e:	4770      	bx	lr

00001960 <TC6_Handler>:
{
    1960:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc6_dev);
    1962:	4b02      	ldr	r3, [pc, #8]	; (196c <TC6_Handler+0xc>)
    1964:	6818      	ldr	r0, [r3, #0]
    1966:	f7ff fef7 	bl	1758 <tc_pwm_interrupt_handler>
}
    196a:	bd10      	pop	{r4, pc}
    196c:	20000a84 	.word	0x20000a84

00001970 <TC7_Handler>:
{
    1970:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc7_dev);
    1972:	4b02      	ldr	r3, [pc, #8]	; (197c <TC7_Handler+0xc>)
    1974:	6818      	ldr	r0, [r3, #0]
    1976:	f7ff feef 	bl	1758 <tc_pwm_interrupt_handler>
}
    197a:	bd10      	pop	{r4, pc}
    197c:	20000a88 	.word	0x20000a88

00001980 <ADS1x1x_write_register>:
/*!
@brief  Writes 16 bits to the specified destination register.
*/
/**************************************************************************/
void ADS1x1x_write_register(uint8_t i2c_address, uint8_t reg, uint16_t value)
{
    1980:	b500      	push	{lr}
    1982:	b083      	sub	sp, #12
	
	uint8_t tmpData[] = {reg, (uint8_t)(value>>8), (uint8_t)(value&0xff)};
    1984:	ab01      	add	r3, sp, #4
    1986:	7019      	strb	r1, [r3, #0]
    1988:	0a11      	lsrs	r1, r2, #8
    198a:	7059      	strb	r1, [r3, #1]
    198c:	709a      	strb	r2, [r3, #2]
	I2C_write_batch(i2c_address, (uint8_t *)&tmpData, sizeof(tmpData));
    198e:	2203      	movs	r2, #3
    1990:	0019      	movs	r1, r3
    1992:	f000 fc29 	bl	21e8 <I2C_write_batch>
	//ADS1x1x_i2c_start_write(i2c_address);
	//ADS1x1x_i2c_write(reg);
	//ADS1x1x_i2c_write((uint8_t)(value>>8));
	//ADS1x1x_i2c_write((uint8_t)(value&0xff));
	//ADS1x1x_i2c_stop();
}
    1996:	b003      	add	sp, #12
    1998:	bd00      	pop	{pc}

0000199a <ADS1x1x_read_register>:
/*!
@brief  Read 16 bits from the specified destination register.
*/
/**************************************************************************/
uint16_t ADS1x1x_read_register(uint8_t i2c_address, uint8_t reg)
{
    199a:	b510      	push	{r4, lr}
    199c:	b082      	sub	sp, #8
	uint16_t result = 0;
	uint8_t tmpData[2];
	I2C_read_batch(i2c_address, reg, (uint8_t *)&tmpData, sizeof(tmpData));
    199e:	ac01      	add	r4, sp, #4
    19a0:	2302      	movs	r3, #2
    19a2:	0022      	movs	r2, r4
    19a4:	f000 fc3e 	bl	2224 <I2C_read_batch>
	result = tmpData[0] << 8;
    19a8:	7820      	ldrb	r0, [r4, #0]
    19aa:	0200      	lsls	r0, r0, #8
	result |= tmpData[1];
    19ac:	7863      	ldrb	r3, [r4, #1]
    19ae:	4318      	orrs	r0, r3
	return result;
}
    19b0:	b002      	add	sp, #8
    19b2:	bd10      	pop	{r4, pc}

000019b4 <ADS1x1x_start_conversion>:
The user must provide a valid pointer to a
correctly filled ADS1x1x_config_t structure.
*/
/**************************************************************************/
void ADS1x1x_start_conversion(ADS1x1x_config_t *p_config)
{
    19b4:	b510      	push	{r4, lr}
	// Write configuration to the ADC.
	ADS1x1x_write_register(p_config->i2c_address,ADS1x1x_REG_POINTER_CONFIG,p_config->config);
    19b6:	8842      	ldrh	r2, [r0, #2]
    19b8:	7840      	ldrb	r0, [r0, #1]
    19ba:	2101      	movs	r1, #1
    19bc:	f7ff ffe0 	bl	1980 <ADS1x1x_write_register>
}
    19c0:	bd10      	pop	{r4, pc}

000019c2 <ADS1x1x_read>:
The user must provide a valid pointer to a
correctly filled ADS1x1x_config_t structure.
*/
/**************************************************************************/
int16_t ADS1x1x_read(ADS1x1x_config_t *p_config)
{
    19c2:	b510      	push	{r4, lr}
    19c4:	0004      	movs	r4, r0
	// Read the conversion result.
	int16_t result = (int16_t)ADS1x1x_read_register(p_config->i2c_address,ADS1x1x_REG_POINTER_CONVERSION);
    19c6:	7840      	ldrb	r0, [r0, #1]
    19c8:	2100      	movs	r1, #0
    19ca:	f7ff ffe6 	bl	199a <ADS1x1x_read_register>
    19ce:	b200      	sxth	r0, r0
	// Adjust for ADC resolution if needed.
	if (p_config->chip==ADS1013 || p_config->chip==ADS1014 || p_config->chip==ADS1015)
    19d0:	7823      	ldrb	r3, [r4, #0]
    19d2:	2b02      	cmp	r3, #2
    19d4:	d800      	bhi.n	19d8 <ADS1x1x_read+0x16>
	{
		result >>= 4;
    19d6:	1100      	asrs	r0, r0, #4
	}
	return result;
}
    19d8:	bd10      	pop	{r4, pc}

000019da <ADS1x1x_set_threshold_lo>:


void ADS1x1x_set_threshold_lo(ADS1x1x_config_t *p_config, uint16_t value)
{
    19da:	b510      	push	{r4, lr}
    19dc:	000a      	movs	r2, r1
	if (p_config->chip==ADS1013 || p_config->chip==ADS1014 || p_config->chip==ADS1015)
    19de:	7803      	ldrb	r3, [r0, #0]
    19e0:	2b02      	cmp	r3, #2
    19e2:	d801      	bhi.n	19e8 <ADS1x1x_set_threshold_lo+0xe>
	{
		value <<= 4;
    19e4:	010a      	lsls	r2, r1, #4
    19e6:	b292      	uxth	r2, r2
	}
	ADS1x1x_write_register(p_config->i2c_address,ADS1x1x_REG_POINTER_LO_THRESH,value);
    19e8:	7840      	ldrb	r0, [r0, #1]
    19ea:	2102      	movs	r1, #2
    19ec:	f7ff ffc8 	bl	1980 <ADS1x1x_write_register>
}
    19f0:	bd10      	pop	{r4, pc}

000019f2 <ADS1x1x_set_threshold_hi>:


void ADS1x1x_set_threshold_hi(ADS1x1x_config_t *p_config, uint16_t value)
{
    19f2:	b510      	push	{r4, lr}
    19f4:	000a      	movs	r2, r1
	if (p_config->chip==ADS1013 || p_config->chip==ADS1014 || p_config->chip==ADS1015)
    19f6:	7803      	ldrb	r3, [r0, #0]
    19f8:	2b02      	cmp	r3, #2
    19fa:	d801      	bhi.n	1a00 <ADS1x1x_set_threshold_hi+0xe>
	{
		value <<= 4;
    19fc:	010a      	lsls	r2, r1, #4
    19fe:	b292      	uxth	r2, r2
	}
	ADS1x1x_write_register(p_config->i2c_address,ADS1x1x_REG_POINTER_HI_THRESH,value);
    1a00:	7840      	ldrb	r0, [r0, #1]
    1a02:	2103      	movs	r1, #3
    1a04:	f7ff ffbc 	bl	1980 <ADS1x1x_write_register>
}
    1a08:	bd10      	pop	{r4, pc}

00001a0a <ADS1x1x_set_config_bitfield>:


void ADS1x1x_set_config_bitfield(ADS1x1x_config_t *p_config, uint16_t value, uint16_t mask)
{
	p_config->config &= ~mask;
    1a0a:	8843      	ldrh	r3, [r0, #2]
    1a0c:	4393      	bics	r3, r2
	p_config->config |= (value & mask);
    1a0e:	4011      	ands	r1, r2
    1a10:	4319      	orrs	r1, r3
    1a12:	8041      	strh	r1, [r0, #2]
}
    1a14:	4770      	bx	lr

00001a16 <ADS1x1x_set_os>:


void ADS1x1x_set_os(ADS1x1x_config_t *p_config, ADS1x1x_os_t value)
{
    1a16:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_OS_MASK);
    1a18:	2280      	movs	r2, #128	; 0x80
    1a1a:	0212      	lsls	r2, r2, #8
    1a1c:	f7ff fff5 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a20:	bd10      	pop	{r4, pc}

00001a22 <ADS1x1x_set_multiplexer>:


void ADS1x1x_set_multiplexer(ADS1x1x_config_t *p_config, ADS1x1x_mux_t value)
{
    1a22:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_MULTIPLEXER_MASK);
    1a24:	22e0      	movs	r2, #224	; 0xe0
    1a26:	01d2      	lsls	r2, r2, #7
    1a28:	f7ff ffef 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a2c:	bd10      	pop	{r4, pc}

00001a2e <ADS1x1x_set_pga>:


void ADS1x1x_set_pga(ADS1x1x_config_t *p_config, ADS1x1x_pga_t value)
{
    1a2e:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_PGA_MASK);
    1a30:	22e0      	movs	r2, #224	; 0xe0
    1a32:	0112      	lsls	r2, r2, #4
    1a34:	f7ff ffe9 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a38:	bd10      	pop	{r4, pc}

00001a3a <ADS1x1x_set_mode>:


void ADS1x1x_set_mode(ADS1x1x_config_t *p_config, ADS1x1x_mode_t value)
{
    1a3a:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_MODE_MASK);
    1a3c:	2280      	movs	r2, #128	; 0x80
    1a3e:	0052      	lsls	r2, r2, #1
    1a40:	f7ff ffe3 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a44:	bd10      	pop	{r4, pc}

00001a46 <ADS1x1x_set_data_rate>:


void ADS1x1x_set_data_rate(ADS1x1x_config_t *p_config, ADS1x1x_data_rate_t value)
{
    1a46:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_DATA_RATE_MASK);
    1a48:	b289      	uxth	r1, r1
    1a4a:	22e0      	movs	r2, #224	; 0xe0
    1a4c:	f7ff ffdd 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a50:	bd10      	pop	{r4, pc}

00001a52 <ADS1x1x_set_comparator_mode>:


void ADS1x1x_set_comparator_mode(ADS1x1x_config_t *p_config, ADS1x1x_comparator_mode_t value)
{
    1a52:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_MODE_MASK);
    1a54:	b289      	uxth	r1, r1
    1a56:	2210      	movs	r2, #16
    1a58:	f7ff ffd7 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a5c:	bd10      	pop	{r4, pc}

00001a5e <ADS1x1x_set_comparator_polarity>:


void ADS1x1x_set_comparator_polarity(ADS1x1x_config_t *p_config, ADS1x1x_comparator_polarity_t value)
{
    1a5e:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_POLARITY_MASK);
    1a60:	b289      	uxth	r1, r1
    1a62:	2208      	movs	r2, #8
    1a64:	f7ff ffd1 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a68:	bd10      	pop	{r4, pc}

00001a6a <ADS1x1x_set_comparator_latching>:


void ADS1x1x_set_comparator_latching(ADS1x1x_config_t *p_config, ADS1x1x_comparator_latching_t value)
{
    1a6a:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_LATCHING_MASK);
    1a6c:	b289      	uxth	r1, r1
    1a6e:	2204      	movs	r2, #4
    1a70:	f7ff ffcb 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a74:	bd10      	pop	{r4, pc}

00001a76 <ADS1x1x_set_comparator_queue>:


void ADS1x1x_set_comparator_queue(ADS1x1x_config_t *p_config, ADS1x1x_comparator_queue_t value)
{
    1a76:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_QUEUE_MASK);
    1a78:	b289      	uxth	r1, r1
    1a7a:	2203      	movs	r2, #3
    1a7c:	f7ff ffc5 	bl	1a0a <ADS1x1x_set_config_bitfield>
}
    1a80:	bd10      	pop	{r4, pc}

00001a82 <ADS1x1x_init>:
{
    1a82:	b570      	push	{r4, r5, r6, lr}
    1a84:	0004      	movs	r4, r0
    1a86:	001e      	movs	r6, r3
    1a88:	ab04      	add	r3, sp, #16
    1a8a:	881d      	ldrh	r5, [r3, #0]
	if (p_config!=0)
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d032      	beq.n	1af6 <ADS1x1x_init+0x74>
		p_config->chip = chip;
    1a90:	7001      	strb	r1, [r0, #0]
		p_config->i2c_address = i2c_address;
    1a92:	7042      	strb	r2, [r0, #1]
		p_config->config = 0;
    1a94:	2300      	movs	r3, #0
    1a96:	8043      	strh	r3, [r0, #2]
		ADS1x1x_set_os(p_config,OS_SINGLE);
    1a98:	2180      	movs	r1, #128	; 0x80
    1a9a:	0209      	lsls	r1, r1, #8
    1a9c:	f7ff ffbb 	bl	1a16 <ADS1x1x_set_os>
		ADS1x1x_set_multiplexer(p_config,input);
    1aa0:	0031      	movs	r1, r6
    1aa2:	0020      	movs	r0, r4
    1aa4:	f7ff ffbd 	bl	1a22 <ADS1x1x_set_multiplexer>
		ADS1x1x_set_pga(p_config,gain);
    1aa8:	0029      	movs	r1, r5
    1aaa:	0020      	movs	r0, r4
    1aac:	f7ff ffbf 	bl	1a2e <ADS1x1x_set_pga>
		ADS1x1x_set_mode(p_config,MODE_SINGLE_SHOT);
    1ab0:	2180      	movs	r1, #128	; 0x80
    1ab2:	0049      	lsls	r1, r1, #1
    1ab4:	0020      	movs	r0, r4
    1ab6:	f7ff ffc0 	bl	1a3a <ADS1x1x_set_mode>
		if (p_config->chip==ADS1013 || p_config->chip==ADS1014 || p_config->chip==ADS1015)
    1aba:	7823      	ldrb	r3, [r4, #0]
    1abc:	2b02      	cmp	r3, #2
    1abe:	d815      	bhi.n	1aec <ADS1x1x_init+0x6a>
			ADS1x1x_set_data_rate(p_config,DATA_RATE_ADS101x_1600);
    1ac0:	2180      	movs	r1, #128	; 0x80
    1ac2:	0020      	movs	r0, r4
    1ac4:	f7ff ffbf 	bl	1a46 <ADS1x1x_set_data_rate>
		ADS1x1x_set_comparator_mode(p_config,COMPARATOR_MODE_TRADITIONAL);
    1ac8:	2100      	movs	r1, #0
    1aca:	0020      	movs	r0, r4
    1acc:	f7ff ffc1 	bl	1a52 <ADS1x1x_set_comparator_mode>
		ADS1x1x_set_comparator_polarity(p_config,COMPARATOR_POLARITY_ACTIVE_LO);
    1ad0:	2100      	movs	r1, #0
    1ad2:	0020      	movs	r0, r4
    1ad4:	f7ff ffc3 	bl	1a5e <ADS1x1x_set_comparator_polarity>
		ADS1x1x_set_comparator_latching(p_config,COMPARATOR_NON_LATCHING);
    1ad8:	2100      	movs	r1, #0
    1ada:	0020      	movs	r0, r4
    1adc:	f7ff ffc5 	bl	1a6a <ADS1x1x_set_comparator_latching>
		ADS1x1x_set_comparator_queue(p_config,COMPARATOR_QUEUE_NONE);
    1ae0:	2103      	movs	r1, #3
    1ae2:	0020      	movs	r0, r4
    1ae4:	f7ff ffc7 	bl	1a76 <ADS1x1x_set_comparator_queue>
		result = 1;
    1ae8:	2001      	movs	r0, #1
}
    1aea:	bd70      	pop	{r4, r5, r6, pc}
			ADS1x1x_set_data_rate(p_config,DATA_RATE_ADS111x_128);
    1aec:	2180      	movs	r1, #128	; 0x80
    1aee:	0020      	movs	r0, r4
    1af0:	f7ff ffa9 	bl	1a46 <ADS1x1x_set_data_rate>
    1af4:	e7e8      	b.n	1ac8 <ADS1x1x_init+0x46>
	uint8_t result = 0;
    1af6:	2000      	movs	r0, #0
    1af8:	e7f7      	b.n	1aea <ADS1x1x_init+0x68>

00001afa <ETH_Handler>:
	EXT_IRG_init();
}

static void ETH_Handler(void){

}
    1afa:	4770      	bx	lr

00001afc <TIMER_0_task1_cb>:
	return res;
}

static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
	adcConversionRequest = 1;
    1afc:	2201      	movs	r2, #1
    1afe:	4b01      	ldr	r3, [pc, #4]	; (1b04 <TIMER_0_task1_cb+0x8>)
    1b00:	701a      	strb	r2, [r3, #0]
}
    1b02:	4770      	bx	lr
    1b04:	20000ab4 	.word	0x20000ab4

00001b08 <TIMER_0_task2_cb>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1b08:	2280      	movs	r2, #128	; 0x80
    1b0a:	0412      	lsls	r2, r2, #16
    1b0c:	23c0      	movs	r3, #192	; 0xc0
    1b0e:	05db      	lsls	r3, r3, #23
    1b10:	61da      	str	r2, [r3, #28]

static void TIMER_0_task2_cb(const struct timer_task *const timer_task)
{
	gpio_toggle_pin_level(GLD);
	
}
    1b12:	4770      	bx	lr

00001b14 <TIMER_IRQ_init>:
	return retVal;
}


static void TIMER_IRQ_init(void)
{
    1b14:	b570      	push	{r4, r5, r6, lr}
			peripheral = (uint32_t)_pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1b16:	4a15      	ldr	r2, [pc, #84]	; (1b6c <TIMER_IRQ_init+0x58>)
    1b18:	6993      	ldr	r3, [r2, #24]
    1b1a:	2120      	movs	r1, #32
    1b1c:	430b      	orrs	r3, r1
    1b1e:	6193      	str	r3, [r2, #24]
	((Gclk *)hw)->CLKCTRL.reg = data;
    1b20:	4a13      	ldr	r2, [pc, #76]	; (1b70 <TIMER_IRQ_init+0x5c>)
    1b22:	4b14      	ldr	r3, [pc, #80]	; (1b74 <TIMER_IRQ_init+0x60>)
    1b24:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_IRQ, RTC, _rtc_get_timer());
    1b26:	f7ff f923 	bl	d70 <_rtc_get_timer>
    1b2a:	0002      	movs	r2, r0
    1b2c:	4c12      	ldr	r4, [pc, #72]	; (1b78 <TIMER_IRQ_init+0x64>)
    1b2e:	4913      	ldr	r1, [pc, #76]	; (1b7c <TIMER_IRQ_init+0x68>)
    1b30:	0020      	movs	r0, r4
    1b32:	f7fe fe0d 	bl	750 <timer_init>
	
	TIMER_task1.interval = 32768/4;
    1b36:	4912      	ldr	r1, [pc, #72]	; (1b80 <TIMER_IRQ_init+0x6c>)
    1b38:	2380      	movs	r3, #128	; 0x80
    1b3a:	019b      	lsls	r3, r3, #6
    1b3c:	608b      	str	r3, [r1, #8]
	TIMER_task1.cb       = TIMER_0_task1_cb;
    1b3e:	4b11      	ldr	r3, [pc, #68]	; (1b84 <TIMER_IRQ_init+0x70>)
    1b40:	60cb      	str	r3, [r1, #12]
	TIMER_task1.mode     = TIMER_TASK_REPEAT;
    1b42:	2301      	movs	r3, #1
    1b44:	740b      	strb	r3, [r1, #16]
	
	TIMER_task2.interval = 32768/2;
    1b46:	4d10      	ldr	r5, [pc, #64]	; (1b88 <TIMER_IRQ_init+0x74>)
    1b48:	2280      	movs	r2, #128	; 0x80
    1b4a:	01d2      	lsls	r2, r2, #7
    1b4c:	60aa      	str	r2, [r5, #8]
	TIMER_task2.cb       = TIMER_0_task2_cb;
    1b4e:	4a0f      	ldr	r2, [pc, #60]	; (1b8c <TIMER_IRQ_init+0x78>)
    1b50:	60ea      	str	r2, [r5, #12]
	TIMER_task2.mode     = TIMER_TASK_REPEAT;
    1b52:	742b      	strb	r3, [r5, #16]

	timer_add_task(&TIMER_IRQ, &TIMER_task1);
    1b54:	0020      	movs	r0, r4
    1b56:	f7fe fe31 	bl	7bc <timer_add_task>
	timer_add_task(&TIMER_IRQ, &TIMER_task2);
    1b5a:	0029      	movs	r1, r5
    1b5c:	0020      	movs	r0, r4
    1b5e:	f7fe fe2d 	bl	7bc <timer_add_task>
	timer_start(&TIMER_IRQ);
    1b62:	0020      	movs	r0, r4
    1b64:	f7fe fe12 	bl	78c <timer_start>
    1b68:	bd70      	pop	{r4, r5, r6, pc}
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	40000400 	.word	0x40000400
    1b70:	00004302 	.word	0x00004302
    1b74:	40000c00 	.word	0x40000c00
    1b78:	20000c1c 	.word	0x20000c1c
    1b7c:	40001400 	.word	0x40001400
    1b80:	20000a8c 	.word	0x20000a8c
    1b84:	00001afd 	.word	0x00001afd
    1b88:	20000aa0 	.word	0x20000aa0
    1b8c:	00001b09 	.word	0x00001b09

00001b90 <buzer>:
void buzer(uint16_t soundTime){
    1b90:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1b92:	24c0      	movs	r4, #192	; 0xc0
    1b94:	05e4      	lsls	r4, r4, #23
    1b96:	2580      	movs	r5, #128	; 0x80
    1b98:	04ad      	lsls	r5, r5, #18
    1b9a:	61a5      	str	r5, [r4, #24]
	delay_ms(soundTime);
    1b9c:	f7fe fb04 	bl	1a8 <delay_ms>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ba0:	6165      	str	r5, [r4, #20]
}
    1ba2:	bd70      	pop	{r4, r5, r6, pc}

00001ba4 <gpio_init>:
void gpio_init(void){
    1ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ba6:	46de      	mov	lr, fp
    1ba8:	4657      	mov	r7, sl
    1baa:	464e      	mov	r6, r9
    1bac:	4645      	mov	r5, r8
    1bae:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bb0:	22c0      	movs	r2, #192	; 0xc0
    1bb2:	05d2      	lsls	r2, r2, #23
    1bb4:	2380      	movs	r3, #128	; 0x80
    1bb6:	469c      	mov	ip, r3
    1bb8:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bba:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bbc:	4b7d      	ldr	r3, [pc, #500]	; (1db4 <gpio_init+0x210>)
    1bbe:	497e      	ldr	r1, [pc, #504]	; (1db8 <gpio_init+0x214>)
    1bc0:	6299      	str	r1, [r3, #40]	; 0x28
    1bc2:	25c0      	movs	r5, #192	; 0xc0
    1bc4:	062d      	lsls	r5, r5, #24
    1bc6:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bc8:	2447      	movs	r4, #71	; 0x47
    1bca:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1bcc:	2101      	movs	r1, #1
    1bce:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1bd0:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bd2:	2080      	movs	r0, #128	; 0x80
    1bd4:	0040      	lsls	r0, r0, #1
    1bd6:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bd8:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bda:	4878      	ldr	r0, [pc, #480]	; (1dbc <gpio_init+0x218>)
    1bdc:	6298      	str	r0, [r3, #40]	; 0x28
    1bde:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1be0:	3401      	adds	r4, #1
    1be2:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1be4:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1be6:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1be8:	2780      	movs	r7, #128	; 0x80
    1bea:	00bf      	lsls	r7, r7, #2
    1bec:	6157      	str	r7, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1bee:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1bf0:	4873      	ldr	r0, [pc, #460]	; (1dc0 <gpio_init+0x21c>)
    1bf2:	4682      	mov	sl, r0
    1bf4:	6298      	str	r0, [r3, #40]	; 0x28
    1bf6:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1bf8:	3401      	adds	r4, #1
    1bfa:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1bfc:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1bfe:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c00:	2080      	movs	r0, #128	; 0x80
    1c02:	00c0      	lsls	r0, r0, #3
    1c04:	4680      	mov	r8, r0
    1c06:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c08:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c0a:	486e      	ldr	r0, [pc, #440]	; (1dc4 <gpio_init+0x220>)
    1c0c:	6298      	str	r0, [r3, #40]	; 0x28
    1c0e:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c10:	3401      	adds	r4, #1
    1c12:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c14:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c16:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1c18:	2080      	movs	r0, #128	; 0x80
    1c1a:	0100      	lsls	r0, r0, #4
    1c1c:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c1e:	486a      	ldr	r0, [pc, #424]	; (1dc8 <gpio_init+0x224>)
    1c20:	6298      	str	r0, [r3, #40]	; 0x28
    1c22:	486a      	ldr	r0, [pc, #424]	; (1dcc <gpio_init+0x228>)
    1c24:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1c26:	264b      	movs	r6, #75	; 0x4b
    1c28:	5d98      	ldrb	r0, [r3, r6]
    1c2a:	4681      	mov	r9, r0
    1c2c:	2004      	movs	r0, #4
    1c2e:	464c      	mov	r4, r9
    1c30:	4384      	bics	r4, r0
    1c32:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c34:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c36:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c38:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c3a:	2680      	movs	r6, #128	; 0x80
    1c3c:	0236      	lsls	r6, r6, #8
    1c3e:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c40:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c42:	4e63      	ldr	r6, [pc, #396]	; (1dd0 <gpio_init+0x22c>)
    1c44:	629e      	str	r6, [r3, #40]	; 0x28
    1c46:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c48:	244f      	movs	r4, #79	; 0x4f
    1c4a:	5d1e      	ldrb	r6, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c4c:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c4e:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c50:	2680      	movs	r6, #128	; 0x80
    1c52:	0436      	lsls	r6, r6, #16
    1c54:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c56:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c58:	2480      	movs	r4, #128	; 0x80
    1c5a:	05e4      	lsls	r4, r4, #23
    1c5c:	629c      	str	r4, [r3, #40]	; 0x28
    1c5e:	4c5d      	ldr	r4, [pc, #372]	; (1dd4 <gpio_init+0x230>)
    1c60:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c62:	2457      	movs	r4, #87	; 0x57
    1c64:	46a3      	mov	fp, r4
    1c66:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c68:	438c      	bics	r4, r1
    1c6a:	46a1      	mov	r9, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c6c:	465c      	mov	r4, fp
    1c6e:	464e      	mov	r6, r9
    1c70:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1c72:	3441      	adds	r4, #65	; 0x41
    1c74:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1c76:	3c10      	subs	r4, #16
    1c78:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c7a:	3f59      	subs	r7, #89	; 0x59
    1c7c:	3fff      	subs	r7, #255	; 0xff
    1c7e:	4654      	mov	r4, sl
    1c80:	51dc      	str	r4, [r3, r7]
    1c82:	51dd      	str	r5, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1c84:	24c9      	movs	r4, #201	; 0xc9
    1c86:	5d1d      	ldrb	r5, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1c88:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1c8a:	551d      	strb	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1c8c:	2584      	movs	r5, #132	; 0x84
    1c8e:	4644      	mov	r4, r8
    1c90:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1c92:	4c51      	ldr	r4, [pc, #324]	; (1dd8 <gpio_init+0x234>)
    1c94:	51dc      	str	r4, [r3, r7]
    1c96:	4c4d      	ldr	r4, [pc, #308]	; (1dcc <gpio_init+0x228>)
    1c98:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1c9a:	24ca      	movs	r4, #202	; 0xca
    1c9c:	46a0      	mov	r8, r4
    1c9e:	5d1c      	ldrb	r4, [r3, r4]
    1ca0:	4384      	bics	r4, r0
    1ca2:	46a1      	mov	r9, r4
    1ca4:	4644      	mov	r4, r8
    1ca6:	464e      	mov	r6, r9
    1ca8:	551e      	strb	r6, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1caa:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cac:	438c      	bics	r4, r1
    1cae:	46a1      	mov	r9, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cb0:	4644      	mov	r4, r8
    1cb2:	464e      	mov	r6, r9
    1cb4:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1cb6:	2480      	movs	r4, #128	; 0x80
    1cb8:	0124      	lsls	r4, r4, #4
    1cba:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cbc:	4c42      	ldr	r4, [pc, #264]	; (1dc8 <gpio_init+0x224>)
    1cbe:	51dc      	str	r4, [r3, r7]
    1cc0:	4c42      	ldr	r4, [pc, #264]	; (1dcc <gpio_init+0x228>)
    1cc2:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1cc4:	24cb      	movs	r4, #203	; 0xcb
    1cc6:	46a0      	mov	r8, r4
    1cc8:	5d1c      	ldrb	r4, [r3, r4]
    1cca:	4384      	bics	r4, r0
    1ccc:	46a1      	mov	r9, r4
    1cce:	4644      	mov	r4, r8
    1cd0:	464e      	mov	r6, r9
    1cd2:	551e      	strb	r6, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cd4:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cd6:	438c      	bics	r4, r1
    1cd8:	46a1      	mov	r9, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cda:	4644      	mov	r4, r8
    1cdc:	464e      	mov	r6, r9
    1cde:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ce0:	2480      	movs	r4, #128	; 0x80
    1ce2:	03e4      	lsls	r4, r4, #15
    1ce4:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ce6:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ce8:	2480      	movs	r4, #128	; 0x80
    1cea:	05e4      	lsls	r4, r4, #23
    1cec:	629c      	str	r4, [r3, #40]	; 0x28
    1cee:	4c3b      	ldr	r4, [pc, #236]	; (1ddc <gpio_init+0x238>)
    1cf0:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cf2:	2456      	movs	r4, #86	; 0x56
    1cf4:	46a1      	mov	r9, r4
    1cf6:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cf8:	438c      	bics	r4, r1
    1cfa:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cfc:	464c      	mov	r4, r9
    1cfe:	4646      	mov	r6, r8
    1d00:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d02:	2480      	movs	r4, #128	; 0x80
    1d04:	0464      	lsls	r4, r4, #17
    1d06:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d08:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d0a:	2480      	movs	r4, #128	; 0x80
    1d0c:	05e4      	lsls	r4, r4, #23
    1d0e:	629c      	str	r4, [r3, #40]	; 0x28
    1d10:	4c33      	ldr	r4, [pc, #204]	; (1de0 <gpio_init+0x23c>)
    1d12:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d14:	2458      	movs	r4, #88	; 0x58
    1d16:	46a1      	mov	r9, r4
    1d18:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d1a:	438c      	bics	r4, r1
    1d1c:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d1e:	464c      	mov	r4, r9
    1d20:	4646      	mov	r6, r8
    1d22:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d24:	2480      	movs	r4, #128	; 0x80
    1d26:	04a4      	lsls	r4, r4, #18
    1d28:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d2a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d2c:	2480      	movs	r4, #128	; 0x80
    1d2e:	05e4      	lsls	r4, r4, #23
    1d30:	629c      	str	r4, [r3, #40]	; 0x28
    1d32:	4e2c      	ldr	r6, [pc, #176]	; (1de4 <gpio_init+0x240>)
    1d34:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d36:	2459      	movs	r4, #89	; 0x59
    1d38:	5d1e      	ldrb	r6, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d3a:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d3c:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d3e:	2640      	movs	r6, #64	; 0x40
    1d40:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d42:	4e29      	ldr	r6, [pc, #164]	; (1de8 <gpio_init+0x244>)
    1d44:	51de      	str	r6, [r3, r7]
    1d46:	4c21      	ldr	r4, [pc, #132]	; (1dcc <gpio_init+0x228>)
    1d48:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d4a:	26c6      	movs	r6, #198	; 0xc6
    1d4c:	5d9c      	ldrb	r4, [r3, r6]
    1d4e:	4384      	bics	r4, r0
    1d50:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d52:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d54:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d56:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d58:	3ea6      	subs	r6, #166	; 0xa6
    1d5a:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d5c:	4e23      	ldr	r6, [pc, #140]	; (1dec <gpio_init+0x248>)
    1d5e:	51de      	str	r6, [r3, r7]
    1d60:	4c1a      	ldr	r4, [pc, #104]	; (1dcc <gpio_init+0x228>)
    1d62:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d64:	26c5      	movs	r6, #197	; 0xc5
    1d66:	5d9c      	ldrb	r4, [r3, r6]
    1d68:	4384      	bics	r4, r0
    1d6a:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d6c:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d6e:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d70:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d72:	3eb5      	subs	r6, #181	; 0xb5
    1d74:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d76:	4e1e      	ldr	r6, [pc, #120]	; (1df0 <gpio_init+0x24c>)
    1d78:	51de      	str	r6, [r3, r7]
    1d7a:	4c14      	ldr	r4, [pc, #80]	; (1dcc <gpio_init+0x228>)
    1d7c:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d7e:	26c4      	movs	r6, #196	; 0xc4
    1d80:	5d9c      	ldrb	r4, [r3, r6]
    1d82:	4384      	bics	r4, r0
    1d84:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d86:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d88:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d8a:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d8c:	4664      	mov	r4, ip
    1d8e:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d90:	4a18      	ldr	r2, [pc, #96]	; (1df4 <gpio_init+0x250>)
    1d92:	51da      	str	r2, [r3, r7]
    1d94:	4a0d      	ldr	r2, [pc, #52]	; (1dcc <gpio_init+0x228>)
    1d96:	51da      	str	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d98:	22c7      	movs	r2, #199	; 0xc7
    1d9a:	5c9c      	ldrb	r4, [r3, r2]
    1d9c:	4384      	bics	r4, r0
    1d9e:	549c      	strb	r4, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1da0:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1da2:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1da4:	5498      	strb	r0, [r3, r2]
}
    1da6:	bc3c      	pop	{r2, r3, r4, r5}
    1da8:	4690      	mov	r8, r2
    1daa:	4699      	mov	r9, r3
    1dac:	46a2      	mov	sl, r4
    1dae:	46ab      	mov	fp, r5
    1db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	41004400 	.word	0x41004400
    1db8:	40000080 	.word	0x40000080
    1dbc:	40000100 	.word	0x40000100
    1dc0:	40000200 	.word	0x40000200
    1dc4:	40000400 	.word	0x40000400
    1dc8:	40020800 	.word	0x40020800
    1dcc:	c0020000 	.word	0xc0020000
    1dd0:	40008000 	.word	0x40008000
    1dd4:	c0000080 	.word	0xc0000080
    1dd8:	40020400 	.word	0x40020400
    1ddc:	c0000040 	.word	0xc0000040
    1de0:	c0000100 	.word	0xc0000100
    1de4:	c0000200 	.word	0xc0000200
    1de8:	40020040 	.word	0x40020040
    1dec:	40020020 	.word	0x40020020
    1df0:	40020010 	.word	0x40020010
    1df4:	40020080 	.word	0x40020080

00001df8 <EXT_IRG_init>:
void EXT_IRG_init(void){
    1df8:	b510      	push	{r4, lr}
    1dfa:	4a11      	ldr	r2, [pc, #68]	; (1e40 <EXT_IRG_init+0x48>)
    1dfc:	4b11      	ldr	r3, [pc, #68]	; (1e44 <EXT_IRG_init+0x4c>)
    1dfe:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e00:	2180      	movs	r1, #128	; 0x80
    1e02:	0049      	lsls	r1, r1, #1
    1e04:	2384      	movs	r3, #132	; 0x84
    1e06:	22c0      	movs	r2, #192	; 0xc0
    1e08:	05d2      	lsls	r2, r2, #23
    1e0a:	50d1      	str	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e0c:	4b0e      	ldr	r3, [pc, #56]	; (1e48 <EXT_IRG_init+0x50>)
    1e0e:	22a8      	movs	r2, #168	; 0xa8
    1e10:	490e      	ldr	r1, [pc, #56]	; (1e4c <EXT_IRG_init+0x54>)
    1e12:	5099      	str	r1, [r3, r2]
    1e14:	490e      	ldr	r1, [pc, #56]	; (1e50 <EXT_IRG_init+0x58>)
    1e16:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1e18:	21c8      	movs	r1, #200	; 0xc8
    1e1a:	5c5a      	ldrb	r2, [r3, r1]
    1e1c:	2004      	movs	r0, #4
    1e1e:	4382      	bics	r2, r0
    1e20:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e22:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e24:	3803      	subs	r0, #3
    1e26:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e28:	4302      	orrs	r2, r0
    1e2a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e2c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e2e:	3914      	subs	r1, #20
    1e30:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1e32:	200f      	movs	r0, #15
    1e34:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e36:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    1e38:	f7fe f9e4 	bl	204 <ext_irq_init>
}
    1e3c:	bd10      	pop	{r4, pc}
    1e3e:	46c0      	nop			; (mov r8, r8)
    1e40:	00004103 	.word	0x00004103
    1e44:	40000c00 	.word	0x40000c00
    1e48:	41004400 	.word	0x41004400
    1e4c:	40020100 	.word	0x40020100
    1e50:	c0020000 	.word	0xc0020000

00001e54 <ETH_SPI_init>:
void ETH_SPI_init(void){
    1e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e56:	46d6      	mov	lr, sl
    1e58:	464f      	mov	r7, r9
    1e5a:	b580      	push	{r7, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    1e5c:	4a3a      	ldr	r2, [pc, #232]	; (1f48 <ETH_SPI_init+0xf4>)
    1e5e:	6a13      	ldr	r3, [r2, #32]
    1e60:	2104      	movs	r1, #4
    1e62:	4689      	mov	r9, r1
    1e64:	430b      	orrs	r3, r1
    1e66:	6213      	str	r3, [r2, #32]
    1e68:	4a38      	ldr	r2, [pc, #224]	; (1f4c <ETH_SPI_init+0xf8>)
    1e6a:	4b39      	ldr	r3, [pc, #228]	; (1f50 <ETH_SPI_init+0xfc>)
    1e6c:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    1e6e:	4939      	ldr	r1, [pc, #228]	; (1f54 <ETH_SPI_init+0x100>)
    1e70:	4839      	ldr	r0, [pc, #228]	; (1f58 <ETH_SPI_init+0x104>)
    1e72:	f7fe fb77 	bl	564 <spi_m_sync_init>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e76:	25c0      	movs	r5, #192	; 0xc0
    1e78:	05ed      	lsls	r5, r5, #23
    1e7a:	2310      	movs	r3, #16
    1e7c:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e7e:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e80:	4c36      	ldr	r4, [pc, #216]	; (1f5c <ETH_SPI_init+0x108>)
    1e82:	4b37      	ldr	r3, [pc, #220]	; (1f60 <ETH_SPI_init+0x10c>)
    1e84:	62a3      	str	r3, [r4, #40]	; 0x28
    1e86:	23c0      	movs	r3, #192	; 0xc0
    1e88:	061b      	lsls	r3, r3, #24
    1e8a:	469a      	mov	sl, r3
    1e8c:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e8e:	2244      	movs	r2, #68	; 0x44
    1e90:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e92:	2701      	movs	r7, #1
    1e94:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e96:	2601      	movs	r6, #1
    1e98:	4333      	orrs	r3, r6
    1e9a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e9c:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e9e:	3a12      	subs	r2, #18
    1ea0:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1ea2:	200f      	movs	r0, #15
    1ea4:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    1ea6:	2103      	movs	r1, #3
    1ea8:	468c      	mov	ip, r1
    1eaa:	4661      	mov	r1, ip
    1eac:	430b      	orrs	r3, r1
    1eae:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1eb0:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1eb2:	2320      	movs	r3, #32
    1eb4:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1eb6:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1eb8:	4b2a      	ldr	r3, [pc, #168]	; (1f64 <ETH_SPI_init+0x110>)
    1eba:	62a3      	str	r3, [r4, #40]	; 0x28
    1ebc:	4653      	mov	r3, sl
    1ebe:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ec0:	2345      	movs	r3, #69	; 0x45
    1ec2:	469a      	mov	sl, r3
    1ec4:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ec6:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1ec8:	4333      	orrs	r3, r6
    1eca:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ecc:	4651      	mov	r1, sl
    1ece:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1ed0:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1ed2:	3936      	subs	r1, #54	; 0x36
    1ed4:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1ed6:	2130      	movs	r1, #48	; 0x30
    1ed8:	468a      	mov	sl, r1
    1eda:	4651      	mov	r1, sl
    1edc:	430b      	orrs	r3, r1
    1ede:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1ee0:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ee2:	2340      	movs	r3, #64	; 0x40
    1ee4:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ee6:	4b20      	ldr	r3, [pc, #128]	; (1f68 <ETH_SPI_init+0x114>)
    1ee8:	62a3      	str	r3, [r4, #40]	; 0x28
    1eea:	4b20      	ldr	r3, [pc, #128]	; (1f6c <ETH_SPI_init+0x118>)
    1eec:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1eee:	2346      	movs	r3, #70	; 0x46
    1ef0:	5ce2      	ldrb	r2, [r4, r3]
    1ef2:	4649      	mov	r1, r9
    1ef4:	438a      	bics	r2, r1
    1ef6:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ef8:	5ce2      	ldrb	r2, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1efa:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1efc:	4332      	orrs	r2, r6
    1efe:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f00:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f02:	2233      	movs	r2, #51	; 0x33
    1f04:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1f06:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    1f08:	4661      	mov	r1, ip
    1f0a:	430b      	orrs	r3, r1
    1f0c:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1f0e:	54a3      	strb	r3, [r4, r2]
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    1f10:	4910      	ldr	r1, [pc, #64]	; (1f54 <ETH_SPI_init+0x100>)
    1f12:	4811      	ldr	r0, [pc, #68]	; (1f58 <ETH_SPI_init+0x104>)
    1f14:	f7fe fb26 	bl	564 <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&ETH_SPI, &eth_spi);
    1f18:	4915      	ldr	r1, [pc, #84]	; (1f70 <ETH_SPI_init+0x11c>)
    1f1a:	480f      	ldr	r0, [pc, #60]	; (1f58 <ETH_SPI_init+0x104>)
    1f1c:	f7fe fbae 	bl	67c <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&ETH_SPI);
    1f20:	480d      	ldr	r0, [pc, #52]	; (1f58 <ETH_SPI_init+0x104>)
    1f22:	f7fe fb47 	bl	5b4 <spi_m_sync_enable>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f26:	2380      	movs	r3, #128	; 0x80
    1f28:	031b      	lsls	r3, r3, #12
    1f2a:	61ab      	str	r3, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f2c:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f2e:	2380      	movs	r3, #128	; 0x80
    1f30:	05db      	lsls	r3, r3, #23
    1f32:	62a3      	str	r3, [r4, #40]	; 0x28
    1f34:	4b0f      	ldr	r3, [pc, #60]	; (1f74 <ETH_SPI_init+0x120>)
    1f36:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f38:	2253      	movs	r2, #83	; 0x53
    1f3a:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f3c:	43bb      	bics	r3, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f3e:	54a3      	strb	r3, [r4, r2]
}
    1f40:	bc0c      	pop	{r2, r3}
    1f42:	4691      	mov	r9, r2
    1f44:	469a      	mov	sl, r3
    1f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f48:	40000400 	.word	0x40000400
    1f4c:	0000400d 	.word	0x0000400d
    1f50:	40000c00 	.word	0x40000c00
    1f54:	42000800 	.word	0x42000800
    1f58:	20000bf0 	.word	0x20000bf0
    1f5c:	41004400 	.word	0x41004400
    1f60:	40000010 	.word	0x40000010
    1f64:	40000020 	.word	0x40000020
    1f68:	40020040 	.word	0x40020040
    1f6c:	c0020000 	.word	0xc0020000
    1f70:	20000bd0 	.word	0x20000bd0
    1f74:	c0000008 	.word	0xc0000008

00001f78 <ETH_SPI_Select>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    1f78:	2800      	cmp	r0, #0
    1f7a:	d104      	bne.n	1f86 <ETH_SPI_Select+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f7c:	2280      	movs	r2, #128	; 0x80
    1f7e:	23c0      	movs	r3, #192	; 0xc0
    1f80:	05db      	lsls	r3, r3, #23
    1f82:	615a      	str	r2, [r3, #20]
}
    1f84:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1f86:	2280      	movs	r2, #128	; 0x80
    1f88:	23c0      	movs	r3, #192	; 0xc0
    1f8a:	05db      	lsls	r3, r3, #23
    1f8c:	619a      	str	r2, [r3, #24]
    1f8e:	e7f9      	b.n	1f84 <ETH_SPI_Select+0xc>

00001f90 <W5500_Select>:
void W5500_Select(void){
    1f90:	b510      	push	{r4, lr}
	ETH_SPI_Select(false);
    1f92:	2000      	movs	r0, #0
    1f94:	f7ff fff0 	bl	1f78 <ETH_SPI_Select>
}
    1f98:	bd10      	pop	{r4, pc}

00001f9a <W5500_Unselect>:
void W5500_Unselect(void){
    1f9a:	b510      	push	{r4, lr}
	ETH_SPI_Select(true);
    1f9c:	2001      	movs	r0, #1
    1f9e:	f7ff ffeb 	bl	1f78 <ETH_SPI_Select>
}
    1fa2:	bd10      	pop	{r4, pc}

00001fa4 <W5500_ReadBuff>:
void W5500_ReadBuff(uint8_t* buff, uint16_t len){
    1fa4:	b510      	push	{r4, lr}
    1fa6:	0003      	movs	r3, r0
    1fa8:	000a      	movs	r2, r1
	io_read(eth_spi,buff,len);
    1faa:	4903      	ldr	r1, [pc, #12]	; (1fb8 <W5500_ReadBuff+0x14>)
    1fac:	6808      	ldr	r0, [r1, #0]
    1fae:	0019      	movs	r1, r3
    1fb0:	f7fe fa66 	bl	480 <io_read>
}
    1fb4:	bd10      	pop	{r4, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	20000bd0 	.word	0x20000bd0

00001fbc <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len){
    1fbc:	b510      	push	{r4, lr}
    1fbe:	0003      	movs	r3, r0
    1fc0:	000a      	movs	r2, r1
	io_write(eth_spi,buff,len);
    1fc2:	4903      	ldr	r1, [pc, #12]	; (1fd0 <W5500_WriteBuff+0x14>)
    1fc4:	6808      	ldr	r0, [r1, #0]
    1fc6:	0019      	movs	r1, r3
    1fc8:	f7fe fa40 	bl	44c <io_write>
}
    1fcc:	bd10      	pop	{r4, pc}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	20000bd0 	.word	0x20000bd0

00001fd4 <W5500_ReadByte>:
uint8_t W5500_ReadByte(void){
    1fd4:	b510      	push	{r4, lr}
    1fd6:	b082      	sub	sp, #8
	uint8_t data_byte = 0;
    1fd8:	466b      	mov	r3, sp
    1fda:	1ddc      	adds	r4, r3, #7
    1fdc:	2300      	movs	r3, #0
    1fde:	7023      	strb	r3, [r4, #0]
	io_read(eth_spi,&data_byte,1);
    1fe0:	4b04      	ldr	r3, [pc, #16]	; (1ff4 <W5500_ReadByte+0x20>)
    1fe2:	6818      	ldr	r0, [r3, #0]
    1fe4:	2201      	movs	r2, #1
    1fe6:	0021      	movs	r1, r4
    1fe8:	f7fe fa4a 	bl	480 <io_read>
	return data_byte;
    1fec:	7820      	ldrb	r0, [r4, #0]
}
    1fee:	b002      	add	sp, #8
    1ff0:	bd10      	pop	{r4, pc}
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	20000bd0 	.word	0x20000bd0

00001ff8 <W5500_Write_byte>:
void W5500_Write_byte(uint8_t byte){
    1ff8:	b500      	push	{lr}
    1ffa:	b083      	sub	sp, #12
    1ffc:	466b      	mov	r3, sp
    1ffe:	1dd9      	adds	r1, r3, #7
    2000:	7008      	strb	r0, [r1, #0]
	io_write(eth_spi, &byte, 1);
    2002:	4b03      	ldr	r3, [pc, #12]	; (2010 <STACK_SIZE+0x10>)
    2004:	6818      	ldr	r0, [r3, #0]
    2006:	2201      	movs	r2, #1
    2008:	f7fe fa20 	bl	44c <io_write>
}
    200c:	b003      	add	sp, #12
    200e:	bd00      	pop	{pc}
    2010:	20000bd0 	.word	0x20000bd0

00002014 <EXT_SPI_init>:
void EXT_SPI_init(void){
    2014:	b5f0      	push	{r4, r5, r6, r7, lr}
    2016:	46ce      	mov	lr, r9
    2018:	b500      	push	{lr}
    201a:	4a35      	ldr	r2, [pc, #212]	; (20f0 <EXT_SPI_init+0xdc>)
    201c:	6a13      	ldr	r3, [r2, #32]
    201e:	2120      	movs	r1, #32
    2020:	430b      	orrs	r3, r1
    2022:	6213      	str	r3, [r2, #32]
    2024:	4a33      	ldr	r2, [pc, #204]	; (20f4 <EXT_SPI_init+0xe0>)
    2026:	4b34      	ldr	r3, [pc, #208]	; (20f8 <EXT_SPI_init+0xe4>)
    2028:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    202a:	4934      	ldr	r1, [pc, #208]	; (20fc <EXT_SPI_init+0xe8>)
    202c:	4834      	ldr	r0, [pc, #208]	; (2100 <EXT_SPI_init+0xec>)
    202e:	f7fe fa99 	bl	564 <spi_m_sync_init>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2032:	22c0      	movs	r2, #192	; 0xc0
    2034:	05d2      	lsls	r2, r2, #23
    2036:	2380      	movs	r3, #128	; 0x80
    2038:	025b      	lsls	r3, r3, #9
    203a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    203c:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    203e:	4b31      	ldr	r3, [pc, #196]	; (2104 <EXT_SPI_init+0xf0>)
    2040:	2180      	movs	r1, #128	; 0x80
    2042:	05c9      	lsls	r1, r1, #23
    2044:	4689      	mov	r9, r1
    2046:	6299      	str	r1, [r3, #40]	; 0x28
    2048:	492f      	ldr	r1, [pc, #188]	; (2108 <EXT_SPI_init+0xf4>)
    204a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    204c:	2050      	movs	r0, #80	; 0x50
    204e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2050:	2401      	movs	r4, #1
    2052:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2054:	2501      	movs	r5, #1
    2056:	4329      	orrs	r1, r5
    2058:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    205a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    205c:	2138      	movs	r1, #56	; 0x38
    205e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2060:	270f      	movs	r7, #15
    2062:	43b8      	bics	r0, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2064:	2603      	movs	r6, #3
    2066:	46b4      	mov	ip, r6
    2068:	4666      	mov	r6, ip
    206a:	4330      	orrs	r0, r6
    206c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    206e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2070:	2080      	movs	r0, #128	; 0x80
    2072:	0280      	lsls	r0, r0, #10
    2074:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2076:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2078:	4648      	mov	r0, r9
    207a:	6298      	str	r0, [r3, #40]	; 0x28
    207c:	4823      	ldr	r0, [pc, #140]	; (210c <EXT_SPI_init+0xf8>)
    207e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2080:	2051      	movs	r0, #81	; 0x51
    2082:	4681      	mov	r9, r0
    2084:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2086:	43a0      	bics	r0, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2088:	4328      	orrs	r0, r5
    208a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    208c:	464e      	mov	r6, r9
    208e:	5598      	strb	r0, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2090:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2092:	3e42      	subs	r6, #66	; 0x42
    2094:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    2096:	2630      	movs	r6, #48	; 0x30
    2098:	46b1      	mov	r9, r6
    209a:	464e      	mov	r6, r9
    209c:	4330      	orrs	r0, r6
    209e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20a0:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    20a2:	2180      	movs	r1, #128	; 0x80
    20a4:	02c9      	lsls	r1, r1, #11
    20a6:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20a8:	4a19      	ldr	r2, [pc, #100]	; (2110 <EXT_SPI_init+0xfc>)
    20aa:	629a      	str	r2, [r3, #40]	; 0x28
    20ac:	4a19      	ldr	r2, [pc, #100]	; (2114 <EXT_SPI_init+0x100>)
    20ae:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    20b0:	2252      	movs	r2, #82	; 0x52
    20b2:	5c99      	ldrb	r1, [r3, r2]
    20b4:	2004      	movs	r0, #4
    20b6:	4381      	bics	r1, r0
    20b8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20ba:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20bc:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20be:	4329      	orrs	r1, r5
    20c0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20c2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20c4:	2139      	movs	r1, #57	; 0x39
    20c6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    20c8:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
    20ca:	4660      	mov	r0, ip
    20cc:	4302      	orrs	r2, r0
    20ce:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20d0:	545a      	strb	r2, [r3, r1]
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    20d2:	490a      	ldr	r1, [pc, #40]	; (20fc <EXT_SPI_init+0xe8>)
    20d4:	480a      	ldr	r0, [pc, #40]	; (2100 <EXT_SPI_init+0xec>)
    20d6:	f7fe fa45 	bl	564 <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&EXT_SPI, &ext_spi);
    20da:	490f      	ldr	r1, [pc, #60]	; (2118 <EXT_SPI_init+0x104>)
    20dc:	4808      	ldr	r0, [pc, #32]	; (2100 <EXT_SPI_init+0xec>)
    20de:	f7fe facd 	bl	67c <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&EXT_SPI);
    20e2:	4807      	ldr	r0, [pc, #28]	; (2100 <EXT_SPI_init+0xec>)
    20e4:	f7fe fa66 	bl	5b4 <spi_m_sync_enable>
}
    20e8:	bc04      	pop	{r2}
    20ea:	4691      	mov	r9, r2
    20ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ee:	46c0      	nop			; (mov r8, r8)
    20f0:	40000400 	.word	0x40000400
    20f4:	00004010 	.word	0x00004010
    20f8:	40000c00 	.word	0x40000c00
    20fc:	42001400 	.word	0x42001400
    2100:	20000bd8 	.word	0x20000bd8
    2104:	41004400 	.word	0x41004400
    2108:	c0000001 	.word	0xc0000001
    210c:	c0000002 	.word	0xc0000002
    2110:	40020000 	.word	0x40020000
    2114:	c0020004 	.word	0xc0020004
    2118:	20000bd4 	.word	0x20000bd4

0000211c <EXT_SPI_ReadBuff>:
void EXT_SPI_ReadBuff(uint8_t* buff, uint16_t len){
    211c:	b510      	push	{r4, lr}
    211e:	0003      	movs	r3, r0
    2120:	000a      	movs	r2, r1
	io_read(ext_spi,buff,len);
    2122:	4903      	ldr	r1, [pc, #12]	; (2130 <EXT_SPI_ReadBuff+0x14>)
    2124:	6808      	ldr	r0, [r1, #0]
    2126:	0019      	movs	r1, r3
    2128:	f7fe f9aa 	bl	480 <io_read>
}
    212c:	bd10      	pop	{r4, pc}
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	20000bd4 	.word	0x20000bd4

00002134 <EXT_SPI_WriteBuff>:
void EXT_SPI_WriteBuff(uint8_t* buff, uint16_t len){
    2134:	b510      	push	{r4, lr}
    2136:	0003      	movs	r3, r0
    2138:	000a      	movs	r2, r1
	io_write(ext_spi,buff,len);
    213a:	4903      	ldr	r1, [pc, #12]	; (2148 <EXT_SPI_WriteBuff+0x14>)
    213c:	6808      	ldr	r0, [r1, #0]
    213e:	0019      	movs	r1, r3
    2140:	f7fe f984 	bl	44c <io_write>
}
    2144:	bd10      	pop	{r4, pc}
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	20000bd4 	.word	0x20000bd4

0000214c <EXT_I2C_init>:
void EXT_I2C_init(void){
    214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    214e:	4a1e      	ldr	r2, [pc, #120]	; (21c8 <EXT_I2C_init+0x7c>)
    2150:	6a13      	ldr	r3, [r2, #32]
    2152:	2110      	movs	r1, #16
    2154:	430b      	orrs	r3, r1
    2156:	6213      	str	r3, [r2, #32]
    2158:	4b1c      	ldr	r3, [pc, #112]	; (21cc <EXT_I2C_init+0x80>)
    215a:	4a1d      	ldr	r2, [pc, #116]	; (21d0 <EXT_I2C_init+0x84>)
    215c:	805a      	strh	r2, [r3, #2]
    215e:	4a1d      	ldr	r2, [pc, #116]	; (21d4 <EXT_I2C_init+0x88>)
    2160:	805a      	strh	r2, [r3, #2]
	i2c_m_sync_init(&EXT_I2C, SERCOM2);
    2162:	4c1d      	ldr	r4, [pc, #116]	; (21d8 <EXT_I2C_init+0x8c>)
    2164:	491d      	ldr	r1, [pc, #116]	; (21dc <EXT_I2C_init+0x90>)
    2166:	0020      	movs	r0, r4
    2168:	f7fe f8fe 	bl	368 <i2c_m_sync_init>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    216c:	4b1c      	ldr	r3, [pc, #112]	; (21e0 <EXT_I2C_init+0x94>)
    216e:	204c      	movs	r0, #76	; 0x4c
    2170:	5c19      	ldrb	r1, [r3, r0]
    2172:	2204      	movs	r2, #4
    2174:	4391      	bics	r1, r2
    2176:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2178:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    217a:	2601      	movs	r6, #1
    217c:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    217e:	2501      	movs	r5, #1
    2180:	4329      	orrs	r1, r5
    2182:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2184:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2186:	3816      	subs	r0, #22
    2188:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    218a:	270f      	movs	r7, #15
    218c:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    218e:	2702      	movs	r7, #2
    2190:	4339      	orrs	r1, r7
    2192:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2194:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2196:	214d      	movs	r1, #77	; 0x4d
    2198:	5c5f      	ldrb	r7, [r3, r1]
    219a:	4397      	bics	r7, r2
    219c:	545f      	strb	r7, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    219e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    21a0:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    21a2:	432a      	orrs	r2, r5
    21a4:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    21a6:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    21a8:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    21aa:	393e      	subs	r1, #62	; 0x3e
    21ac:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    21ae:	2120      	movs	r1, #32
    21b0:	430a      	orrs	r2, r1
    21b2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    21b4:	541a      	strb	r2, [r3, r0]
	i2c_m_sync_get_io_descriptor(&EXT_I2C, &ext_i2c);
    21b6:	490b      	ldr	r1, [pc, #44]	; (21e4 <EXT_I2C_init+0x98>)
    21b8:	0020      	movs	r0, r4
    21ba:	f7fe f943 	bl	444 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&EXT_I2C);
    21be:	0020      	movs	r0, r4
    21c0:	f7fe f8ee 	bl	3a0 <i2c_m_sync_enable>
}
    21c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	40000400 	.word	0x40000400
    21cc:	40000c00 	.word	0x40000c00
    21d0:	0000400f 	.word	0x0000400f
    21d4:	0000430c 	.word	0x0000430c
    21d8:	20000c38 	.word	0x20000c38
    21dc:	42001000 	.word	0x42001000
    21e0:	41004400 	.word	0x41004400
    21e4:	20000c0c 	.word	0x20000c0c

000021e8 <I2C_write_batch>:
bool I2C_write_batch(uint8_t addres, uint8_t *data, uint8_t data_len){
    21e8:	b570      	push	{r4, r5, r6, lr}
    21ea:	000d      	movs	r5, r1
    21ec:	0014      	movs	r4, r2
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
    21ee:	b201      	sxth	r1, r0
    21f0:	4e0a      	ldr	r6, [pc, #40]	; (221c <I2C_write_batch+0x34>)
    21f2:	2280      	movs	r2, #128	; 0x80
    21f4:	0112      	lsls	r2, r2, #4
    21f6:	0030      	movs	r0, r6
    21f8:	f7fe f8d6 	bl	3a8 <i2c_m_sync_set_slaveaddr>
	i2c_m_sync_cmd_write(&EXT_I2C, 0x00, data, data_len);
    21fc:	0023      	movs	r3, r4
    21fe:	002a      	movs	r2, r5
    2200:	2100      	movs	r1, #0
    2202:	0030      	movs	r0, r6
    2204:	f7fe f8da 	bl	3bc <i2c_m_sync_cmd_write>
	return (io_write(ext_i2c, (uint8_t *)data, data_len) >= 0) ? true : false;
    2208:	b2a2      	uxth	r2, r4
    220a:	4b05      	ldr	r3, [pc, #20]	; (2220 <I2C_write_batch+0x38>)
    220c:	6818      	ldr	r0, [r3, #0]
    220e:	0029      	movs	r1, r5
    2210:	f7fe f91c 	bl	44c <io_write>
    2214:	43c0      	mvns	r0, r0
    2216:	0fc0      	lsrs	r0, r0, #31
}
    2218:	bd70      	pop	{r4, r5, r6, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	20000c38 	.word	0x20000c38
    2220:	20000c0c 	.word	0x20000c0c

00002224 <I2C_read_batch>:
bool I2C_read_batch(uint8_t addres, uint8_t reg ,uint8_t *data, uint8_t data_len){
    2224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2226:	000c      	movs	r4, r1
    2228:	0015      	movs	r5, r2
    222a:	001e      	movs	r6, r3
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
    222c:	b201      	sxth	r1, r0
    222e:	4f07      	ldr	r7, [pc, #28]	; (224c <I2C_read_batch+0x28>)
    2230:	2280      	movs	r2, #128	; 0x80
    2232:	0112      	lsls	r2, r2, #4
    2234:	0038      	movs	r0, r7
    2236:	f7fe f8b7 	bl	3a8 <i2c_m_sync_set_slaveaddr>
	i2c_m_sync_cmd_read(&EXT_I2C, reg, data, data_len);
    223a:	0033      	movs	r3, r6
    223c:	002a      	movs	r2, r5
    223e:	0021      	movs	r1, r4
    2240:	0038      	movs	r0, r7
    2242:	f7fe f8dd 	bl	400 <i2c_m_sync_cmd_read>
}
    2246:	2001      	movs	r0, #1
    2248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    224a:	46c0      	nop			; (mov r8, r8)
    224c:	20000c38 	.word	0x20000c38

00002250 <PWM_init>:
void PWM_init(void){
    2250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2252:	46de      	mov	lr, fp
    2254:	4657      	mov	r7, sl
    2256:	464e      	mov	r6, r9
    2258:	4645      	mov	r5, r8
    225a:	b5e0      	push	{r5, r6, r7, lr}
    225c:	4d2d      	ldr	r5, [pc, #180]	; (2314 <PWM_init+0xc4>)
    225e:	6a2a      	ldr	r2, [r5, #32]
    2260:	2380      	movs	r3, #128	; 0x80
    2262:	01db      	lsls	r3, r3, #7
    2264:	4313      	orrs	r3, r2
    2266:	622b      	str	r3, [r5, #32]
    2268:	4b2b      	ldr	r3, [pc, #172]	; (2318 <PWM_init+0xc8>)
    226a:	469a      	mov	sl, r3
    226c:	4b2b      	ldr	r3, [pc, #172]	; (231c <PWM_init+0xcc>)
    226e:	469b      	mov	fp, r3
    2270:	4653      	mov	r3, sl
    2272:	465a      	mov	r2, fp
    2274:	805a      	strh	r2, [r3, #2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2276:	4c2a      	ldr	r4, [pc, #168]	; (2320 <PWM_init+0xd0>)
    2278:	22d1      	movs	r2, #209	; 0xd1
    227a:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    227c:	2101      	movs	r1, #1
    227e:	4689      	mov	r9, r1
    2280:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2282:	4688      	mov	r8, r1
    2284:	4641      	mov	r1, r8
    2286:	430b      	orrs	r3, r1
    2288:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    228a:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    228c:	3a19      	subs	r2, #25
    228e:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2290:	270f      	movs	r7, #15
    2292:	403b      	ands	r3, r7
	tmp |= PORT_PMUX_PMUXO(data);
    2294:	2640      	movs	r6, #64	; 0x40
    2296:	4333      	orrs	r3, r6
    2298:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    229a:	54a3      	strb	r3, [r4, r2]
	pwm_init(&PWM_0, TC6, _tc_get_pwm());
    229c:	f7ff fb5e 	bl	195c <_tc_get_pwm>
    22a0:	0002      	movs	r2, r0
    22a2:	4920      	ldr	r1, [pc, #128]	; (2324 <PWM_init+0xd4>)
    22a4:	4820      	ldr	r0, [pc, #128]	; (2328 <PWM_init+0xd8>)
    22a6:	f7fe f911 	bl	4cc <pwm_init>
    22aa:	6a2a      	ldr	r2, [r5, #32]
    22ac:	2380      	movs	r3, #128	; 0x80
    22ae:	021b      	lsls	r3, r3, #8
    22b0:	4313      	orrs	r3, r2
    22b2:	622b      	str	r3, [r5, #32]
    22b4:	4653      	mov	r3, sl
    22b6:	465a      	mov	r2, fp
    22b8:	805a      	strh	r2, [r3, #2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22ba:	2255      	movs	r2, #85	; 0x55
    22bc:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22be:	4649      	mov	r1, r9
    22c0:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    22c2:	4641      	mov	r1, r8
    22c4:	430b      	orrs	r3, r1
    22c6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22c8:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22ca:	3a1b      	subs	r2, #27
    22cc:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    22ce:	401f      	ands	r7, r3
	tmp |= PORT_PMUX_PMUXO(data);
    22d0:	433e      	orrs	r6, r7
    22d2:	b2f6      	uxtb	r6, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22d4:	54a6      	strb	r6, [r4, r2]
	pwm_init(&PWM_1, TC7, _tc_get_pwm());
    22d6:	f7ff fb41 	bl	195c <_tc_get_pwm>
    22da:	0002      	movs	r2, r0
    22dc:	4c13      	ldr	r4, [pc, #76]	; (232c <PWM_init+0xdc>)
    22de:	4914      	ldr	r1, [pc, #80]	; (2330 <PWM_init+0xe0>)
    22e0:	0020      	movs	r0, r4
    22e2:	f7fe f8f3 	bl	4cc <pwm_init>
	pwm_set_parameters(&PWM_0, 5000, 0);
    22e6:	4d13      	ldr	r5, [pc, #76]	; (2334 <PWM_init+0xe4>)
    22e8:	2200      	movs	r2, #0
    22ea:	0029      	movs	r1, r5
    22ec:	480e      	ldr	r0, [pc, #56]	; (2328 <PWM_init+0xd8>)
    22ee:	f7fe f925 	bl	53c <pwm_set_parameters>
	pwm_set_parameters(&PWM_1, 5000, 0);
    22f2:	2200      	movs	r2, #0
    22f4:	0029      	movs	r1, r5
    22f6:	0020      	movs	r0, r4
    22f8:	f7fe f920 	bl	53c <pwm_set_parameters>
	pwm_enable(&PWM_0);
    22fc:	480a      	ldr	r0, [pc, #40]	; (2328 <PWM_init+0xd8>)
    22fe:	f7fe f905 	bl	50c <pwm_enable>
	pwm_enable(&PWM_1);
    2302:	0020      	movs	r0, r4
    2304:	f7fe f902 	bl	50c <pwm_enable>
}
    2308:	bc3c      	pop	{r2, r3, r4, r5}
    230a:	4690      	mov	r8, r2
    230c:	4699      	mov	r9, r3
    230e:	46a2      	mov	sl, r4
    2310:	46ab      	mov	fp, r5
    2312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2314:	40000400 	.word	0x40000400
    2318:	40000c00 	.word	0x40000c00
    231c:	00004016 	.word	0x00004016
    2320:	41004400 	.word	0x41004400
    2324:	42003800 	.word	0x42003800
    2328:	20000b1c 	.word	0x20000b1c
    232c:	20000b78 	.word	0x20000b78
    2330:	42003c00 	.word	0x42003c00
    2334:	00001388 	.word	0x00001388

00002338 <DEBUG_Serial_init>:
void DEBUG_Serial_init(void){
    2338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    233a:	4a19      	ldr	r2, [pc, #100]	; (23a0 <DEBUG_Serial_init+0x68>)
    233c:	6a13      	ldr	r3, [r2, #32]
    233e:	2140      	movs	r1, #64	; 0x40
    2340:	430b      	orrs	r3, r1
    2342:	6213      	str	r3, [r2, #32]
    2344:	4a17      	ldr	r2, [pc, #92]	; (23a4 <DEBUG_Serial_init+0x6c>)
    2346:	4b18      	ldr	r3, [pc, #96]	; (23a8 <DEBUG_Serial_init+0x70>)
    2348:	805a      	strh	r2, [r3, #2]
	usart_sync_init(&DEBUG_SERIAL, SERCOM4, (void *)NULL);
    234a:	2200      	movs	r2, #0
    234c:	4917      	ldr	r1, [pc, #92]	; (23ac <DEBUG_Serial_init+0x74>)
    234e:	4818      	ldr	r0, [pc, #96]	; (23b0 <DEBUG_Serial_init+0x78>)
    2350:	f7fe fae2 	bl	918 <usart_sync_init>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2354:	4b17      	ldr	r3, [pc, #92]	; (23b4 <DEBUG_Serial_init+0x7c>)
    2356:	21cc      	movs	r1, #204	; 0xcc
    2358:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    235a:	2401      	movs	r4, #1
    235c:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    235e:	2701      	movs	r7, #1
    2360:	433a      	orrs	r2, r7
    2362:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2364:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2366:	22b6      	movs	r2, #182	; 0xb6
    2368:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    236a:	260f      	movs	r6, #15
    236c:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
    236e:	2502      	movs	r5, #2
    2370:	4328      	orrs	r0, r5
    2372:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2374:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2376:	3218      	adds	r2, #24
    2378:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    237a:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    237c:	4339      	orrs	r1, r7
    237e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2380:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2382:	21b7      	movs	r1, #183	; 0xb7
    2384:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2386:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    2388:	432a      	orrs	r2, r5
    238a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    238c:	545a      	strb	r2, [r3, r1]
	usart_sync_get_io_descriptor(&DEBUG_SERIAL, &debug_serial);
    238e:	490a      	ldr	r1, [pc, #40]	; (23b8 <DEBUG_Serial_init+0x80>)
    2390:	4807      	ldr	r0, [pc, #28]	; (23b0 <DEBUG_Serial_init+0x78>)
    2392:	f7fe faf5 	bl	980 <usart_sync_get_io_descriptor>
	usart_sync_enable(&DEBUG_SERIAL);
    2396:	4806      	ldr	r0, [pc, #24]	; (23b0 <DEBUG_Serial_init+0x78>)
    2398:	f7fe fae0 	bl	95c <usart_sync_enable>
}
    239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    239e:	46c0      	nop			; (mov r8, r8)
    23a0:	40000400 	.word	0x40000400
    23a4:	00004011 	.word	0x00004011
    23a8:	40000c00 	.word	0x40000c00
    23ac:	42001800 	.word	0x42001800
    23b0:	20000c10 	.word	0x20000c10
    23b4:	41004400 	.word	0x41004400
    23b8:	20000c08 	.word	0x20000c08

000023bc <mcu_init>:
{
    23bc:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    23be:	f7fe fb4f 	bl	a60 <_init_chip>
	gpio_init();
    23c2:	f7ff fbef 	bl	1ba4 <gpio_init>
	ETH_SPI_init();
    23c6:	f7ff fd45 	bl	1e54 <ETH_SPI_init>
	EXT_SPI_init();
    23ca:	f7ff fe23 	bl	2014 <EXT_SPI_init>
	EXT_I2C_init();
    23ce:	f7ff febd 	bl	214c <EXT_I2C_init>
	PWM_init();
    23d2:	f7ff ff3d 	bl	2250 <PWM_init>
	DEBUG_Serial_init();
    23d6:	f7ff ffaf 	bl	2338 <DEBUG_Serial_init>
	ext_irq_register(ETH_INT, ETH_Handler);
    23da:	4904      	ldr	r1, [pc, #16]	; (23ec <mcu_init+0x30>)
    23dc:	2028      	movs	r0, #40	; 0x28
    23de:	f7fd ff29 	bl	234 <ext_irq_register>
	TIMER_IRQ_init();
    23e2:	f7ff fb97 	bl	1b14 <TIMER_IRQ_init>
	EXT_IRG_init();
    23e6:	f7ff fd07 	bl	1df8 <EXT_IRG_init>
}
    23ea:	bd10      	pop	{r4, pc}
    23ec:	00001afb 	.word	0x00001afb

000023f0 <adcRequest>:
	uint8_t retVal = adcConversionRequest;
    23f0:	4b02      	ldr	r3, [pc, #8]	; (23fc <adcRequest+0xc>)
    23f2:	7818      	ldrb	r0, [r3, #0]
	adcConversionRequest = 0;
    23f4:	2200      	movs	r2, #0
    23f6:	701a      	strb	r2, [r3, #0]
}
    23f8:	4770      	bx	lr
    23fa:	46c0      	nop			; (mov r8, r8)
    23fc:	20000ab4 	.word	0x20000ab4

00002400 <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
    2400:	b570      	push	{r4, r5, r6, lr}
    2402:	0006      	movs	r6, r0
	CHECK_SOCKNUM();
    2404:	2808      	cmp	r0, #8
    2406:	d82f      	bhi.n	2468 <close+0x68>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
    2408:	0084      	lsls	r4, r0, #2
    240a:	3401      	adds	r4, #1
    240c:	00e4      	lsls	r4, r4, #3
    240e:	1c65      	adds	r5, r4, #1
    2410:	35ff      	adds	r5, #255	; 0xff
    2412:	2110      	movs	r1, #16
    2414:	0028      	movs	r0, r5
    2416:	f000 fd6b 	bl	2ef0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
    241a:	0028      	movs	r0, r5
    241c:	f000 fd36 	bl	2e8c <WIZCHIP_READ>
    2420:	2800      	cmp	r0, #0
    2422:	d1fa      	bne.n	241a <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
    2424:	2380      	movs	r3, #128	; 0x80
    2426:	009b      	lsls	r3, r3, #2
    2428:	18e0      	adds	r0, r4, r3
    242a:	211f      	movs	r1, #31
    242c:	f000 fd60 	bl	2ef0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
    2430:	2301      	movs	r3, #1
    2432:	40b3      	lsls	r3, r6
    2434:	43db      	mvns	r3, r3
    2436:	b21b      	sxth	r3, r3
    2438:	490d      	ldr	r1, [pc, #52]	; (2470 <close+0x70>)
    243a:	880a      	ldrh	r2, [r1, #0]
    243c:	401a      	ands	r2, r3
    243e:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
    2440:	490c      	ldr	r1, [pc, #48]	; (2474 <close+0x74>)
    2442:	880a      	ldrh	r2, [r1, #0]
    2444:	4013      	ands	r3, r2
    2446:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
    2448:	0072      	lsls	r2, r6, #1
    244a:	2100      	movs	r1, #0
    244c:	4b0a      	ldr	r3, [pc, #40]	; (2478 <close+0x78>)
    244e:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
    2450:	4b0a      	ldr	r3, [pc, #40]	; (247c <close+0x7c>)
    2452:	2200      	movs	r2, #0
    2454:	559a      	strb	r2, [r3, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
    2456:	23c0      	movs	r3, #192	; 0xc0
    2458:	009b      	lsls	r3, r3, #2
    245a:	18e0      	adds	r0, r4, r3
    245c:	f000 fd16 	bl	2e8c <WIZCHIP_READ>
    2460:	2800      	cmp	r0, #0
    2462:	d1f8      	bne.n	2456 <close+0x56>
	return SOCK_OK;
    2464:	3001      	adds	r0, #1
}
    2466:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
    2468:	2001      	movs	r0, #1
    246a:	4240      	negs	r0, r0
    246c:	e7fb      	b.n	2466 <close+0x66>
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	20000ab6 	.word	0x20000ab6
    2474:	20000ab8 	.word	0x20000ab8
    2478:	20000ac4 	.word	0x20000ac4
    247c:	20000abc 	.word	0x20000abc

00002480 <socket>:
{
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	46c6      	mov	lr, r8
    2484:	b500      	push	{lr}
    2486:	b084      	sub	sp, #16
    2488:	0005      	movs	r5, r0
    248a:	000e      	movs	r6, r1
    248c:	4690      	mov	r8, r2
    248e:	001f      	movs	r7, r3
	CHECK_SOCKNUM();
    2490:	2808      	cmp	r0, #8
    2492:	d900      	bls.n	2496 <socket+0x16>
    2494:	e092      	b.n	25bc <socket+0x13c>
	switch(protocol)
    2496:	2901      	cmp	r1, #1
    2498:	d069      	beq.n	256e <socket+0xee>
    249a:	2900      	cmp	r1, #0
    249c:	d100      	bne.n	24a0 <socket+0x20>
    249e:	e090      	b.n	25c2 <socket+0x142>
    24a0:	2904      	cmp	r1, #4
    24a2:	d900      	bls.n	24a6 <socket+0x26>
    24a4:	e08d      	b.n	25c2 <socket+0x142>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    24a6:	077b      	lsls	r3, r7, #29
    24a8:	d500      	bpl.n	24ac <socket+0x2c>
    24aa:	e08d      	b.n	25c8 <socket+0x148>
	if(flag != 0)
    24ac:	2f00      	cmp	r7, #0
    24ae:	d004      	beq.n	24ba <socket+0x3a>
   	switch(protocol)
    24b0:	2e01      	cmp	r6, #1
    24b2:	d069      	beq.n	2588 <socket+0x108>
    24b4:	2e02      	cmp	r6, #2
    24b6:	d100      	bne.n	24ba <socket+0x3a>
    24b8:	e06d      	b.n	2596 <socket+0x116>
	close(sn);
    24ba:	0028      	movs	r0, r5
    24bc:	f7ff ffa0 	bl	2400 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    24c0:	00ac      	lsls	r4, r5, #2
    24c2:	3401      	adds	r4, #1
    24c4:	00e4      	lsls	r4, r4, #3
    24c6:	230f      	movs	r3, #15
    24c8:	0039      	movs	r1, r7
    24ca:	4399      	bics	r1, r3
    24cc:	b249      	sxtb	r1, r1
    24ce:	4331      	orrs	r1, r6
    24d0:	b2c9      	uxtb	r1, r1
    24d2:	0020      	movs	r0, r4
    24d4:	f000 fd0c 	bl	2ef0 <WIZCHIP_WRITE>
	if(!port)
    24d8:	4643      	mov	r3, r8
    24da:	2b00      	cmp	r3, #0
    24dc:	d108      	bne.n	24f0 <socket+0x70>
	   port = sock_any_port++;
    24de:	4a3d      	ldr	r2, [pc, #244]	; (25d4 <socket+0x154>)
    24e0:	8813      	ldrh	r3, [r2, #0]
    24e2:	4698      	mov	r8, r3
    24e4:	3301      	adds	r3, #1
    24e6:	b29b      	uxth	r3, r3
    24e8:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    24ea:	4a3b      	ldr	r2, [pc, #236]	; (25d8 <socket+0x158>)
    24ec:	4293      	cmp	r3, r2
    24ee:	d061      	beq.n	25b4 <socket+0x134>
   setSn_PORT(sn,port);	
    24f0:	2380      	movs	r3, #128	; 0x80
    24f2:	00db      	lsls	r3, r3, #3
    24f4:	18e0      	adds	r0, r4, r3
    24f6:	4643      	mov	r3, r8
    24f8:	0a19      	lsrs	r1, r3, #8
    24fa:	f000 fcf9 	bl	2ef0 <WIZCHIP_WRITE>
    24fe:	4643      	mov	r3, r8
    2500:	466a      	mov	r2, sp
    2502:	71d3      	strb	r3, [r2, #7]
    2504:	79d1      	ldrb	r1, [r2, #7]
    2506:	23a0      	movs	r3, #160	; 0xa0
    2508:	00db      	lsls	r3, r3, #3
    250a:	18e0      	adds	r0, r4, r3
    250c:	f000 fcf0 	bl	2ef0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
    2510:	1c66      	adds	r6, r4, #1
    2512:	36ff      	adds	r6, #255	; 0xff
    2514:	2101      	movs	r1, #1
    2516:	0030      	movs	r0, r6
    2518:	f000 fcea 	bl	2ef0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    251c:	0030      	movs	r0, r6
    251e:	f000 fcb5 	bl	2e8c <WIZCHIP_READ>
    2522:	2800      	cmp	r0, #0
    2524:	d1fa      	bne.n	251c <socket+0x9c>
   sock_io_mode &= ~(1 <<sn);
    2526:	2201      	movs	r2, #1
    2528:	40aa      	lsls	r2, r5
    252a:	43d2      	mvns	r2, r2
    252c:	b212      	sxth	r2, r2
    252e:	482b      	ldr	r0, [pc, #172]	; (25dc <socket+0x15c>)
    2530:	8803      	ldrh	r3, [r0, #0]
    2532:	4013      	ands	r3, r2
    2534:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
    2536:	2101      	movs	r1, #1
    2538:	400f      	ands	r7, r1
    253a:	40af      	lsls	r7, r5
    253c:	433b      	orrs	r3, r7
    253e:	8003      	strh	r3, [r0, #0]
   sock_is_sending &= ~(1<<sn);
    2540:	4927      	ldr	r1, [pc, #156]	; (25e0 <socket+0x160>)
    2542:	880b      	ldrh	r3, [r1, #0]
    2544:	401a      	ands	r2, r3
    2546:	800a      	strh	r2, [r1, #0]
   sock_remained_size[sn] = 0;
    2548:	006b      	lsls	r3, r5, #1
    254a:	2100      	movs	r1, #0
    254c:	4a25      	ldr	r2, [pc, #148]	; (25e4 <socket+0x164>)
    254e:	5299      	strh	r1, [r3, r2]
   sock_pack_info[sn] = PACK_COMPLETED;
    2550:	4b25      	ldr	r3, [pc, #148]	; (25e8 <socket+0x168>)
    2552:	2200      	movs	r2, #0
    2554:	555a      	strb	r2, [r3, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
    2556:	23c0      	movs	r3, #192	; 0xc0
    2558:	009b      	lsls	r3, r3, #2
    255a:	18e0      	adds	r0, r4, r3
    255c:	f000 fc96 	bl	2e8c <WIZCHIP_READ>
    2560:	2800      	cmp	r0, #0
    2562:	d0f8      	beq.n	2556 <socket+0xd6>
   return (int8_t)sn;
    2564:	b268      	sxtb	r0, r5
}	   
    2566:	b004      	add	sp, #16
    2568:	bc04      	pop	{r2}
    256a:	4690      	mov	r8, r2
    256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            getSIPR((uint8_t*)&taddr);
    256e:	2204      	movs	r2, #4
    2570:	a903      	add	r1, sp, #12
    2572:	20f0      	movs	r0, #240	; 0xf0
    2574:	0100      	lsls	r0, r0, #4
    2576:	f000 fceb 	bl	2f50 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
    257a:	9b03      	ldr	r3, [sp, #12]
    257c:	2b00      	cmp	r3, #0
    257e:	d000      	beq.n	2582 <socket+0x102>
    2580:	e791      	b.n	24a6 <socket+0x26>
    2582:	2003      	movs	r0, #3
    2584:	4240      	negs	r0, r0
    2586:	e7ee      	b.n	2566 <socket+0xe6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
    2588:	2321      	movs	r3, #33	; 0x21
    258a:	423b      	tst	r3, r7
    258c:	d000      	beq.n	2590 <socket+0x110>
    258e:	e794      	b.n	24ba <socket+0x3a>
    2590:	2006      	movs	r0, #6
    2592:	4240      	negs	r0, r0
    2594:	e7e7      	b.n	2566 <socket+0xe6>
   	      if(flag & SF_IGMP_VER2)
    2596:	06bb      	lsls	r3, r7, #26
    2598:	d502      	bpl.n	25a0 <socket+0x120>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    259a:	b27b      	sxtb	r3, r7
    259c:	2b00      	cmp	r3, #0
    259e:	da16      	bge.n	25ce <socket+0x14e>
      	      if(flag & SF_UNI_BLOCK)
    25a0:	06fb      	lsls	r3, r7, #27
    25a2:	d400      	bmi.n	25a6 <socket+0x126>
    25a4:	e789      	b.n	24ba <socket+0x3a>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
    25a6:	b27b      	sxtb	r3, r7
    25a8:	2b00      	cmp	r3, #0
    25aa:	da00      	bge.n	25ae <socket+0x12e>
    25ac:	e785      	b.n	24ba <socket+0x3a>
    25ae:	2006      	movs	r0, #6
    25b0:	4240      	negs	r0, r0
    25b2:	e7d8      	b.n	2566 <socket+0xe6>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    25b4:	4a0d      	ldr	r2, [pc, #52]	; (25ec <socket+0x16c>)
    25b6:	4b07      	ldr	r3, [pc, #28]	; (25d4 <socket+0x154>)
    25b8:	801a      	strh	r2, [r3, #0]
    25ba:	e799      	b.n	24f0 <socket+0x70>
	CHECK_SOCKNUM();
    25bc:	2001      	movs	r0, #1
    25be:	4240      	negs	r0, r0
    25c0:	e7d1      	b.n	2566 <socket+0xe6>
         return SOCKERR_SOCKMODE;
    25c2:	2005      	movs	r0, #5
    25c4:	4240      	negs	r0, r0
    25c6:	e7ce      	b.n	2566 <socket+0xe6>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    25c8:	2006      	movs	r0, #6
    25ca:	4240      	negs	r0, r0
    25cc:	e7cb      	b.n	2566 <socket+0xe6>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    25ce:	2006      	movs	r0, #6
    25d0:	4240      	negs	r0, r0
    25d2:	e7c8      	b.n	2566 <socket+0xe6>
    25d4:	20000028 	.word	0x20000028
    25d8:	0000fff0 	.word	0x0000fff0
    25dc:	20000ab6 	.word	0x20000ab6
    25e0:	20000ab8 	.word	0x20000ab8
    25e4:	20000ac4 	.word	0x20000ac4
    25e8:	20000abc 	.word	0x20000abc
    25ec:	ffffc000 	.word	0xffffc000

000025f0 <listen>:

int8_t listen(uint8_t sn)
{
    25f0:	b570      	push	{r4, r5, r6, lr}
    25f2:	0006      	movs	r6, r0
	CHECK_SOCKNUM();
    25f4:	2808      	cmp	r0, #8
    25f6:	d829      	bhi.n	264c <listen+0x5c>
   CHECK_SOCKMODE(Sn_MR_TCP);
    25f8:	0084      	lsls	r4, r0, #2
    25fa:	3401      	adds	r4, #1
    25fc:	00e4      	lsls	r4, r4, #3
    25fe:	0020      	movs	r0, r4
    2600:	f000 fc44 	bl	2e8c <WIZCHIP_READ>
    2604:	230f      	movs	r3, #15
    2606:	4018      	ands	r0, r3
    2608:	2801      	cmp	r0, #1
    260a:	d122      	bne.n	2652 <listen+0x62>
	CHECK_SOCKINIT();
    260c:	23c0      	movs	r3, #192	; 0xc0
    260e:	009b      	lsls	r3, r3, #2
    2610:	18e5      	adds	r5, r4, r3
    2612:	0028      	movs	r0, r5
    2614:	f000 fc3a 	bl	2e8c <WIZCHIP_READ>
    2618:	2813      	cmp	r0, #19
    261a:	d11d      	bne.n	2658 <listen+0x68>
	setSn_CR(sn,Sn_CR_LISTEN);
    261c:	3401      	adds	r4, #1
    261e:	34ff      	adds	r4, #255	; 0xff
    2620:	2102      	movs	r1, #2
    2622:	0020      	movs	r0, r4
    2624:	f000 fc64 	bl	2ef0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
    2628:	0020      	movs	r0, r4
    262a:	f000 fc2f 	bl	2e8c <WIZCHIP_READ>
    262e:	2800      	cmp	r0, #0
    2630:	d1fa      	bne.n	2628 <listen+0x38>
   while(getSn_SR(sn) != SOCK_LISTEN)
    2632:	0028      	movs	r0, r5
    2634:	f000 fc2a 	bl	2e8c <WIZCHIP_READ>
    2638:	2814      	cmp	r0, #20
    263a:	d101      	bne.n	2640 <listen+0x50>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
    263c:	3813      	subs	r0, #19
}
    263e:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
    2640:	0030      	movs	r0, r6
    2642:	f7ff fedd 	bl	2400 <close>
         return SOCKERR_SOCKCLOSED;
    2646:	2004      	movs	r0, #4
    2648:	4240      	negs	r0, r0
    264a:	e7f8      	b.n	263e <listen+0x4e>
	CHECK_SOCKNUM();
    264c:	2001      	movs	r0, #1
    264e:	4240      	negs	r0, r0
    2650:	e7f5      	b.n	263e <listen+0x4e>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2652:	2005      	movs	r0, #5
    2654:	4240      	negs	r0, r0
    2656:	e7f2      	b.n	263e <listen+0x4e>
	CHECK_SOCKINIT();
    2658:	2003      	movs	r0, #3
    265a:	4240      	negs	r0, r0
    265c:	e7ef      	b.n	263e <listen+0x4e>
	...

00002660 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
    2660:	b570      	push	{r4, r5, r6, lr}
    2662:	0006      	movs	r6, r0
   CHECK_SOCKNUM();
    2664:	2808      	cmp	r0, #8
    2666:	d836      	bhi.n	26d6 <disconnect+0x76>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2668:	0084      	lsls	r4, r0, #2
    266a:	3401      	adds	r4, #1
    266c:	00e4      	lsls	r4, r4, #3
    266e:	0020      	movs	r0, r4
    2670:	f000 fc0c 	bl	2e8c <WIZCHIP_READ>
    2674:	230f      	movs	r3, #15
    2676:	4018      	ands	r0, r3
    2678:	2801      	cmp	r0, #1
    267a:	d12f      	bne.n	26dc <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
    267c:	1c65      	adds	r5, r4, #1
    267e:	35ff      	adds	r5, #255	; 0xff
    2680:	2108      	movs	r1, #8
    2682:	0028      	movs	r0, r5
    2684:	f000 fc34 	bl	2ef0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    2688:	0028      	movs	r0, r5
    268a:	f000 fbff 	bl	2e8c <WIZCHIP_READ>
    268e:	2800      	cmp	r0, #0
    2690:	d1fa      	bne.n	2688 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
    2692:	2201      	movs	r2, #1
    2694:	0010      	movs	r0, r2
    2696:	40b0      	lsls	r0, r6
    2698:	4913      	ldr	r1, [pc, #76]	; (26e8 <disconnect+0x88>)
    269a:	880b      	ldrh	r3, [r1, #0]
    269c:	4383      	bics	r3, r0
    269e:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    26a0:	4b12      	ldr	r3, [pc, #72]	; (26ec <disconnect+0x8c>)
    26a2:	881b      	ldrh	r3, [r3, #0]
    26a4:	4133      	asrs	r3, r6
    26a6:	421a      	tst	r2, r3
    26a8:	d11b      	bne.n	26e2 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
    26aa:	23c0      	movs	r3, #192	; 0xc0
    26ac:	009b      	lsls	r3, r3, #2
    26ae:	18e0      	adds	r0, r4, r3
    26b0:	f000 fbec 	bl	2e8c <WIZCHIP_READ>
    26b4:	2800      	cmp	r0, #0
    26b6:	d00c      	beq.n	26d2 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
    26b8:	2380      	movs	r3, #128	; 0x80
    26ba:	009b      	lsls	r3, r3, #2
    26bc:	18e0      	adds	r0, r4, r3
    26be:	f000 fbe5 	bl	2e8c <WIZCHIP_READ>
    26c2:	0703      	lsls	r3, r0, #28
    26c4:	d5f1      	bpl.n	26aa <disconnect+0x4a>
	   {
	      close(sn);
    26c6:	0030      	movs	r0, r6
    26c8:	f7ff fe9a 	bl	2400 <close>
	      return SOCKERR_TIMEOUT;
    26cc:	200d      	movs	r0, #13
    26ce:	4240      	negs	r0, r0
    26d0:	e008      	b.n	26e4 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
    26d2:	3001      	adds	r0, #1
    26d4:	e006      	b.n	26e4 <disconnect+0x84>
   CHECK_SOCKNUM();
    26d6:	2001      	movs	r0, #1
    26d8:	4240      	negs	r0, r0
    26da:	e003      	b.n	26e4 <disconnect+0x84>
   CHECK_SOCKMODE(Sn_MR_TCP);
    26dc:	2005      	movs	r0, #5
    26de:	4240      	negs	r0, r0
    26e0:	e000      	b.n	26e4 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    26e2:	2000      	movs	r0, #0
}
    26e4:	bd70      	pop	{r4, r5, r6, pc}
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	20000ab8 	.word	0x20000ab8
    26ec:	20000ab6 	.word	0x20000ab6

000026f0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
    26f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    26f2:	46c6      	mov	lr, r8
    26f4:	b500      	push	{lr}
    26f6:	b082      	sub	sp, #8
    26f8:	0004      	movs	r4, r0
    26fa:	9101      	str	r1, [sp, #4]
    26fc:	0017      	movs	r7, r2
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    26fe:	2808      	cmp	r0, #8
    2700:	d900      	bls.n	2704 <send+0x14>
    2702:	e080      	b.n	2806 <send+0x116>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2704:	0005      	movs	r5, r0
    2706:	0083      	lsls	r3, r0, #2
    2708:	3301      	adds	r3, #1
    270a:	00db      	lsls	r3, r3, #3
    270c:	4698      	mov	r8, r3
    270e:	0018      	movs	r0, r3
    2710:	f000 fbbc 	bl	2e8c <WIZCHIP_READ>
    2714:	230f      	movs	r3, #15
    2716:	4018      	ands	r0, r3
    2718:	2801      	cmp	r0, #1
    271a:	d000      	beq.n	271e <send+0x2e>
    271c:	e076      	b.n	280c <send+0x11c>
   CHECK_SOCKDATA();
    271e:	2f00      	cmp	r7, #0
    2720:	d100      	bne.n	2724 <send+0x34>
    2722:	e076      	b.n	2812 <send+0x122>
   tmp = getSn_SR(sn);
    2724:	23c0      	movs	r3, #192	; 0xc0
    2726:	009b      	lsls	r3, r3, #2
    2728:	4443      	add	r3, r8
    272a:	9300      	str	r3, [sp, #0]
    272c:	0018      	movs	r0, r3
    272e:	f000 fbad 	bl	2e8c <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    2732:	2817      	cmp	r0, #23
    2734:	d002      	beq.n	273c <send+0x4c>
    2736:	281c      	cmp	r0, #28
    2738:	d000      	beq.n	273c <send+0x4c>
    273a:	e06d      	b.n	2818 <send+0x128>
   if( sock_is_sending & (1<<sn) )
    273c:	4b38      	ldr	r3, [pc, #224]	; (2820 <send+0x130>)
    273e:	881b      	ldrh	r3, [r3, #0]
    2740:	4123      	asrs	r3, r4
    2742:	07db      	lsls	r3, r3, #31
    2744:	d518      	bpl.n	2778 <send+0x88>
   {
      tmp = getSn_IR(sn);
    2746:	2680      	movs	r6, #128	; 0x80
    2748:	00b6      	lsls	r6, r6, #2
    274a:	4446      	add	r6, r8
    274c:	0030      	movs	r0, r6
    274e:	f000 fb9d 	bl	2e8c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    2752:	06c3      	lsls	r3, r0, #27
    2754:	d406      	bmi.n	2764 <send+0x74>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
    2756:	0703      	lsls	r3, r0, #28
    2758:	d41a      	bmi.n	2790 <send+0xa0>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
    275a:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    275c:	b002      	add	sp, #8
    275e:	bc04      	pop	{r2}
    2760:	4690      	mov	r8, r2
    2762:	bdf0      	pop	{r4, r5, r6, r7, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
    2764:	2110      	movs	r1, #16
    2766:	0030      	movs	r0, r6
    2768:	f000 fbc2 	bl	2ef0 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
    276c:	2201      	movs	r2, #1
    276e:	40a2      	lsls	r2, r4
    2770:	492b      	ldr	r1, [pc, #172]	; (2820 <send+0x130>)
    2772:	880b      	ldrh	r3, [r1, #0]
    2774:	4393      	bics	r3, r2
    2776:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
    2778:	20f8      	movs	r0, #248	; 0xf8
    277a:	0140      	lsls	r0, r0, #5
    277c:	4440      	add	r0, r8
    277e:	f000 fb85 	bl	2e8c <WIZCHIP_READ>
    2782:	b280      	uxth	r0, r0
    2784:	0280      	lsls	r0, r0, #10
    2786:	b286      	uxth	r6, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    2788:	42b7      	cmp	r7, r6
    278a:	d80f      	bhi.n	27ac <send+0xbc>
    278c:	003e      	movs	r6, r7
    278e:	e00d      	b.n	27ac <send+0xbc>
         close(sn);
    2790:	0020      	movs	r0, r4
    2792:	f7ff fe35 	bl	2400 <close>
         return SOCKERR_TIMEOUT;
    2796:	200d      	movs	r0, #13
    2798:	4240      	negs	r0, r0
    279a:	e7df      	b.n	275c <send+0x6c>
         close(sn);
    279c:	0020      	movs	r0, r4
    279e:	f7ff fe2f 	bl	2400 <close>
         return SOCKERR_SOCKSTATUS;
    27a2:	2007      	movs	r0, #7
    27a4:	4240      	negs	r0, r0
    27a6:	e7d9      	b.n	275c <send+0x6c>
      if(len <= freesize) break;
    27a8:	42be      	cmp	r6, r7
    27aa:	d913      	bls.n	27d4 <send+0xe4>
      freesize = getSn_TX_FSR(sn);
    27ac:	0020      	movs	r0, r4
    27ae:	f000 fc4b 	bl	3048 <getSn_TX_FSR>
    27b2:	0007      	movs	r7, r0
      tmp = getSn_SR(sn);
    27b4:	9800      	ldr	r0, [sp, #0]
    27b6:	f000 fb69 	bl	2e8c <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    27ba:	2817      	cmp	r0, #23
    27bc:	d001      	beq.n	27c2 <send+0xd2>
    27be:	281c      	cmp	r0, #28
    27c0:	d1ec      	bne.n	279c <send+0xac>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    27c2:	4b18      	ldr	r3, [pc, #96]	; (2824 <send+0x134>)
    27c4:	881b      	ldrh	r3, [r3, #0]
    27c6:	412b      	asrs	r3, r5
    27c8:	07db      	lsls	r3, r3, #31
    27ca:	d5ed      	bpl.n	27a8 <send+0xb8>
    27cc:	42be      	cmp	r6, r7
    27ce:	d9eb      	bls.n	27a8 <send+0xb8>
    27d0:	2000      	movs	r0, #0
    27d2:	e7c3      	b.n	275c <send+0x6c>
   wiz_send_data(sn, buf, len);
    27d4:	0032      	movs	r2, r6
    27d6:	9901      	ldr	r1, [sp, #4]
    27d8:	0020      	movs	r0, r4
    27da:	f000 fc99 	bl	3110 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
    27de:	4645      	mov	r5, r8
    27e0:	3501      	adds	r5, #1
    27e2:	35ff      	adds	r5, #255	; 0xff
    27e4:	2120      	movs	r1, #32
    27e6:	0028      	movs	r0, r5
    27e8:	f000 fb82 	bl	2ef0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    27ec:	0028      	movs	r0, r5
    27ee:	f000 fb4d 	bl	2e8c <WIZCHIP_READ>
    27f2:	2800      	cmp	r0, #0
    27f4:	d1fa      	bne.n	27ec <send+0xfc>
   sock_is_sending |= (1 << sn);
    27f6:	2201      	movs	r2, #1
    27f8:	40a2      	lsls	r2, r4
    27fa:	4909      	ldr	r1, [pc, #36]	; (2820 <send+0x130>)
    27fc:	880b      	ldrh	r3, [r1, #0]
    27fe:	4313      	orrs	r3, r2
    2800:	800b      	strh	r3, [r1, #0]
   return (int32_t)len;
    2802:	0030      	movs	r0, r6
    2804:	e7aa      	b.n	275c <send+0x6c>
   CHECK_SOCKNUM();
    2806:	2001      	movs	r0, #1
    2808:	4240      	negs	r0, r0
    280a:	e7a7      	b.n	275c <send+0x6c>
   CHECK_SOCKMODE(Sn_MR_TCP);
    280c:	2005      	movs	r0, #5
    280e:	4240      	negs	r0, r0
    2810:	e7a4      	b.n	275c <send+0x6c>
   CHECK_SOCKDATA();
    2812:	200e      	movs	r0, #14
    2814:	4240      	negs	r0, r0
    2816:	e7a1      	b.n	275c <send+0x6c>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    2818:	2007      	movs	r0, #7
    281a:	4240      	negs	r0, r0
    281c:	e79e      	b.n	275c <send+0x6c>
    281e:	46c0      	nop			; (mov r8, r8)
    2820:	20000ab8 	.word	0x20000ab8
    2824:	20000ab6 	.word	0x20000ab6

00002828 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    2828:	b5f0      	push	{r4, r5, r6, r7, lr}
    282a:	46c6      	mov	lr, r8
    282c:	b500      	push	{lr}
    282e:	b082      	sub	sp, #8
    2830:	9000      	str	r0, [sp, #0]
    2832:	9101      	str	r1, [sp, #4]
    2834:	0014      	movs	r4, r2
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    2836:	2808      	cmp	r0, #8
    2838:	d864      	bhi.n	2904 <recv+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
    283a:	0006      	movs	r6, r0
    283c:	0087      	lsls	r7, r0, #2
    283e:	3701      	adds	r7, #1
    2840:	00ff      	lsls	r7, r7, #3
    2842:	0038      	movs	r0, r7
    2844:	f000 fb22 	bl	2e8c <WIZCHIP_READ>
    2848:	230f      	movs	r3, #15
    284a:	4018      	ands	r0, r3
    284c:	2801      	cmp	r0, #1
    284e:	d15c      	bne.n	290a <recv+0xe2>
   CHECK_SOCKDATA();
    2850:	2c00      	cmp	r4, #0
    2852:	d05d      	beq.n	2910 <recv+0xe8>
   
   recvsize = getSn_RxMAX(sn);
    2854:	23f0      	movs	r3, #240	; 0xf0
    2856:	015b      	lsls	r3, r3, #5
    2858:	18f8      	adds	r0, r7, r3
    285a:	f000 fb17 	bl	2e8c <WIZCHIP_READ>
    285e:	b280      	uxth	r0, r0
    2860:	0280      	lsls	r0, r0, #10
    2862:	b283      	uxth	r3, r0
    2864:	4698      	mov	r8, r3
   if(recvsize < len) len = recvsize;
    2866:	429c      	cmp	r4, r3
    2868:	d80f      	bhi.n	288a <recv+0x62>
    286a:	46a0      	mov	r8, r4
    286c:	e00d      	b.n	288a <recv+0x62>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
    286e:	9800      	ldr	r0, [sp, #0]
    2870:	f7ff fdc6 	bl	2400 <close>
                  return SOCKERR_SOCKSTATUS;
    2874:	2007      	movs	r0, #7
    2876:	4240      	negs	r0, r0
    2878:	e040      	b.n	28fc <recv+0xd4>
               }
            }
            else
            {
               close(sn);
    287a:	9800      	ldr	r0, [sp, #0]
    287c:	f7ff fdc0 	bl	2400 <close>
               return SOCKERR_SOCKSTATUS;
    2880:	2007      	movs	r0, #7
    2882:	4240      	negs	r0, r0
    2884:	e03a      	b.n	28fc <recv+0xd4>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
    2886:	2c00      	cmp	r4, #0
    2888:	d124      	bne.n	28d4 <recv+0xac>
         recvsize = getSn_RX_RSR(sn);
    288a:	9d00      	ldr	r5, [sp, #0]
    288c:	0028      	movs	r0, r5
    288e:	f000 fc0d 	bl	30ac <getSn_RX_RSR>
    2892:	0004      	movs	r4, r0
         tmp = getSn_SR(sn);
    2894:	23c0      	movs	r3, #192	; 0xc0
    2896:	009b      	lsls	r3, r3, #2
    2898:	18f8      	adds	r0, r7, r3
    289a:	f000 faf7 	bl	2e8c <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
    289e:	2817      	cmp	r0, #23
    28a0:	d00f      	beq.n	28c2 <recv+0x9a>
            if(tmp == SOCK_CLOSE_WAIT)
    28a2:	281c      	cmp	r0, #28
    28a4:	d1e9      	bne.n	287a <recv+0x52>
               if(recvsize != 0) break;
    28a6:	2c00      	cmp	r4, #0
    28a8:	d114      	bne.n	28d4 <recv+0xac>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    28aa:	0028      	movs	r0, r5
    28ac:	f000 fbcc 	bl	3048 <getSn_TX_FSR>
    28b0:	0005      	movs	r5, r0
    28b2:	23f8      	movs	r3, #248	; 0xf8
    28b4:	015b      	lsls	r3, r3, #5
    28b6:	18f8      	adds	r0, r7, r3
    28b8:	f000 fae8 	bl	2e8c <WIZCHIP_READ>
    28bc:	0280      	lsls	r0, r0, #10
    28be:	4285      	cmp	r5, r0
    28c0:	d0d5      	beq.n	286e <recv+0x46>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    28c2:	4b15      	ldr	r3, [pc, #84]	; (2918 <recv+0xf0>)
    28c4:	881b      	ldrh	r3, [r3, #0]
    28c6:	4133      	asrs	r3, r6
    28c8:	07db      	lsls	r3, r3, #31
    28ca:	d5dc      	bpl.n	2886 <recv+0x5e>
    28cc:	2c00      	cmp	r4, #0
    28ce:	d1da      	bne.n	2886 <recv+0x5e>
    28d0:	2000      	movs	r0, #0
    28d2:	e013      	b.n	28fc <recv+0xd4>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
    28d4:	45a0      	cmp	r8, r4
    28d6:	d800      	bhi.n	28da <recv+0xb2>
    28d8:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
    28da:	0022      	movs	r2, r4
    28dc:	9901      	ldr	r1, [sp, #4]
    28de:	9800      	ldr	r0, [sp, #0]
    28e0:	f000 fc49 	bl	3176 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
    28e4:	3701      	adds	r7, #1
    28e6:	37ff      	adds	r7, #255	; 0xff
    28e8:	2140      	movs	r1, #64	; 0x40
    28ea:	0038      	movs	r0, r7
    28ec:	f000 fb00 	bl	2ef0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    28f0:	0038      	movs	r0, r7
    28f2:	f000 facb 	bl	2e8c <WIZCHIP_READ>
    28f6:	2800      	cmp	r0, #0
    28f8:	d1fa      	bne.n	28f0 <recv+0xc8>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    28fa:	0020      	movs	r0, r4
}
    28fc:	b002      	add	sp, #8
    28fe:	bc04      	pop	{r2}
    2900:	4690      	mov	r8, r2
    2902:	bdf0      	pop	{r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
    2904:	2001      	movs	r0, #1
    2906:	4240      	negs	r0, r0
    2908:	e7f8      	b.n	28fc <recv+0xd4>
   CHECK_SOCKMODE(Sn_MR_TCP);
    290a:	2005      	movs	r0, #5
    290c:	4240      	negs	r0, r0
    290e:	e7f5      	b.n	28fc <recv+0xd4>
   CHECK_SOCKDATA();
    2910:	200e      	movs	r0, #14
    2912:	4240      	negs	r0, r0
    2914:	e7f2      	b.n	28fc <recv+0xd4>
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	20000ab6 	.word	0x20000ab6

0000291c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
    291c:	b5f0      	push	{r4, r5, r6, r7, lr}
    291e:	46de      	mov	lr, fp
    2920:	b500      	push	{lr}
    2922:	b084      	sub	sp, #16
    2924:	9001      	str	r0, [sp, #4]
    2926:	9103      	str	r1, [sp, #12]
    2928:	4693      	mov	fp, r2
    292a:	001c      	movs	r4, r3
    292c:	ab0a      	add	r3, sp, #40	; 0x28
    292e:	881f      	ldrh	r7, [r3, #0]
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    2930:	2808      	cmp	r0, #8
    2932:	d900      	bls.n	2936 <sendto+0x1a>
    2934:	e095      	b.n	2a62 <sendto+0x146>
   switch(getSn_MR(sn) & 0x0F)
    2936:	0005      	movs	r5, r0
    2938:	0083      	lsls	r3, r0, #2
    293a:	3301      	adds	r3, #1
    293c:	00de      	lsls	r6, r3, #3
    293e:	0030      	movs	r0, r6
    2940:	f000 faa4 	bl	2e8c <WIZCHIP_READ>
    2944:	230f      	movs	r3, #15
    2946:	4003      	ands	r3, r0
    2948:	3b02      	subs	r3, #2
    294a:	b2db      	uxtb	r3, r3
    294c:	2b02      	cmp	r3, #2
    294e:	d900      	bls.n	2952 <sendto+0x36>
    2950:	e08a      	b.n	2a68 <sendto+0x14c>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    2952:	465b      	mov	r3, fp
    2954:	2b00      	cmp	r3, #0
    2956:	d100      	bne.n	295a <sendto+0x3e>
    2958:	e089      	b.n	2a6e <sendto+0x152>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
    295a:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    295c:	021b      	lsls	r3, r3, #8
    295e:	7862      	ldrb	r2, [r4, #1]
    2960:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    2962:	021b      	lsls	r3, r3, #8
    2964:	78a2      	ldrb	r2, [r4, #2]
    2966:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    2968:	021b      	lsls	r3, r3, #8
    296a:	78e2      	ldrb	r2, [r4, #3]
    296c:	189b      	adds	r3, r3, r2
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    296e:	2b00      	cmp	r3, #0
    2970:	d034      	beq.n	29dc <sendto+0xc0>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    2972:	2f00      	cmp	r7, #0
    2974:	d104      	bne.n	2980 <sendto+0x64>
    2976:	0030      	movs	r0, r6
    2978:	f000 fa88 	bl	2e8c <WIZCHIP_READ>
    297c:	0743      	lsls	r3, r0, #29
    297e:	d579      	bpl.n	2a74 <sendto+0x158>
   tmp = getSn_SR(sn);
    2980:	23c0      	movs	r3, #192	; 0xc0
    2982:	009b      	lsls	r3, r3, #2
    2984:	469c      	mov	ip, r3
    2986:	44b4      	add	ip, r6
    2988:	4663      	mov	r3, ip
    298a:	9302      	str	r3, [sp, #8]
    298c:	4660      	mov	r0, ip
    298e:	f000 fa7d 	bl	2e8c <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    2992:	2842      	cmp	r0, #66	; 0x42
    2994:	d003      	beq.n	299e <sendto+0x82>
    2996:	2822      	cmp	r0, #34	; 0x22
    2998:	d001      	beq.n	299e <sendto+0x82>
    299a:	2832      	cmp	r0, #50	; 0x32
    299c:	d16d      	bne.n	2a7a <sendto+0x15e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
    299e:	2204      	movs	r2, #4
    29a0:	0021      	movs	r1, r4
    29a2:	23c0      	movs	r3, #192	; 0xc0
    29a4:	011b      	lsls	r3, r3, #4
    29a6:	18f0      	adds	r0, r6, r3
    29a8:	f000 fb12 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
    29ac:	0a39      	lsrs	r1, r7, #8
    29ae:	2380      	movs	r3, #128	; 0x80
    29b0:	015b      	lsls	r3, r3, #5
    29b2:	18f0      	adds	r0, r6, r3
    29b4:	f000 fa9c 	bl	2ef0 <WIZCHIP_WRITE>
    29b8:	b2f9      	uxtb	r1, r7
    29ba:	2388      	movs	r3, #136	; 0x88
    29bc:	015b      	lsls	r3, r3, #5
    29be:	18f0      	adds	r0, r6, r3
    29c0:	f000 fa96 	bl	2ef0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
    29c4:	23f8      	movs	r3, #248	; 0xf8
    29c6:	015b      	lsls	r3, r3, #5
    29c8:	18f0      	adds	r0, r6, r3
    29ca:	f000 fa5f 	bl	2e8c <WIZCHIP_READ>
    29ce:	b280      	uxth	r0, r0
    29d0:	0280      	lsls	r0, r0, #10
    29d2:	b287      	uxth	r7, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    29d4:	45bb      	cmp	fp, r7
    29d6:	d80b      	bhi.n	29f0 <sendto+0xd4>
    29d8:	465f      	mov	r7, fp
    29da:	e009      	b.n	29f0 <sendto+0xd4>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    29dc:	0030      	movs	r0, r6
    29de:	f000 fa55 	bl	2e8c <WIZCHIP_READ>
    29e2:	0743      	lsls	r3, r0, #29
    29e4:	d4c5      	bmi.n	2972 <sendto+0x56>
    29e6:	200c      	movs	r0, #12
    29e8:	4240      	negs	r0, r0
    29ea:	e04b      	b.n	2a84 <sendto+0x168>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
      if(len <= freesize) break;
    29ec:	42a7      	cmp	r7, r4
    29ee:	d911      	bls.n	2a14 <sendto+0xf8>
      freesize = getSn_TX_FSR(sn);
    29f0:	9801      	ldr	r0, [sp, #4]
    29f2:	f000 fb29 	bl	3048 <getSn_TX_FSR>
    29f6:	0004      	movs	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    29f8:	9802      	ldr	r0, [sp, #8]
    29fa:	f000 fa47 	bl	2e8c <WIZCHIP_READ>
    29fe:	2800      	cmp	r0, #0
    2a00:	d03e      	beq.n	2a80 <sendto+0x164>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    2a02:	4b22      	ldr	r3, [pc, #136]	; (2a8c <sendto+0x170>)
    2a04:	881b      	ldrh	r3, [r3, #0]
    2a06:	412b      	asrs	r3, r5
    2a08:	07db      	lsls	r3, r3, #31
    2a0a:	d5ef      	bpl.n	29ec <sendto+0xd0>
    2a0c:	42a7      	cmp	r7, r4
    2a0e:	d9ed      	bls.n	29ec <sendto+0xd0>
    2a10:	2000      	movs	r0, #0
    2a12:	e037      	b.n	2a84 <sendto+0x168>
   };
	wiz_send_data(sn, buf, len);
    2a14:	003a      	movs	r2, r7
    2a16:	9903      	ldr	r1, [sp, #12]
    2a18:	9801      	ldr	r0, [sp, #4]
    2a1a:	f000 fb79 	bl	3110 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
    2a1e:	1c74      	adds	r4, r6, #1
    2a20:	34ff      	adds	r4, #255	; 0xff
    2a22:	2120      	movs	r1, #32
    2a24:	0020      	movs	r0, r4
    2a26:	f000 fa63 	bl	2ef0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    2a2a:	0020      	movs	r0, r4
    2a2c:	f000 fa2e 	bl	2e8c <WIZCHIP_READ>
    2a30:	2800      	cmp	r0, #0
    2a32:	d1fa      	bne.n	2a2a <sendto+0x10e>
   while(1)
   {
      tmp = getSn_IR(sn);
    2a34:	2380      	movs	r3, #128	; 0x80
    2a36:	009b      	lsls	r3, r3, #2
    2a38:	18f4      	adds	r4, r6, r3
    2a3a:	0020      	movs	r0, r4
    2a3c:	f000 fa26 	bl	2e8c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    2a40:	06c3      	lsls	r3, r0, #27
    2a42:	d408      	bmi.n	2a56 <sendto+0x13a>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
    2a44:	0703      	lsls	r3, r0, #28
    2a46:	d5f5      	bpl.n	2a34 <sendto+0x118>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
    2a48:	2108      	movs	r1, #8
    2a4a:	0020      	movs	r0, r4
    2a4c:	f000 fa50 	bl	2ef0 <WIZCHIP_WRITE>
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
    2a50:	200d      	movs	r0, #13
    2a52:	4240      	negs	r0, r0
    2a54:	e016      	b.n	2a84 <sendto+0x168>
         setSn_IR(sn, Sn_IR_SENDOK);
    2a56:	2110      	movs	r1, #16
    2a58:	0020      	movs	r0, r4
    2a5a:	f000 fa49 	bl	2ef0 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    2a5e:	0038      	movs	r0, r7
    2a60:	e010      	b.n	2a84 <sendto+0x168>
   CHECK_SOCKNUM();
    2a62:	2001      	movs	r0, #1
    2a64:	4240      	negs	r0, r0
    2a66:	e00d      	b.n	2a84 <sendto+0x168>
         return SOCKERR_SOCKMODE;
    2a68:	2005      	movs	r0, #5
    2a6a:	4240      	negs	r0, r0
    2a6c:	e00a      	b.n	2a84 <sendto+0x168>
   CHECK_SOCKDATA();
    2a6e:	200e      	movs	r0, #14
    2a70:	4240      	negs	r0, r0
    2a72:	e007      	b.n	2a84 <sendto+0x168>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    2a74:	200b      	movs	r0, #11
    2a76:	4240      	negs	r0, r0
    2a78:	e004      	b.n	2a84 <sendto+0x168>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    2a7a:	2007      	movs	r0, #7
    2a7c:	4240      	negs	r0, r0
    2a7e:	e001      	b.n	2a84 <sendto+0x168>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2a80:	2004      	movs	r0, #4
    2a82:	4240      	negs	r0, r0
}
    2a84:	b004      	add	sp, #16
    2a86:	bc04      	pop	{r2}
    2a88:	4693      	mov	fp, r2
    2a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a8c:	20000ab6 	.word	0x20000ab6

00002a90 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    2a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a92:	46de      	mov	lr, fp
    2a94:	4647      	mov	r7, r8
    2a96:	b580      	push	{r7, lr}
    2a98:	b085      	sub	sp, #20
    2a9a:	0005      	movs	r5, r0
    2a9c:	9100      	str	r1, [sp, #0]
    2a9e:	4690      	mov	r8, r2
    2aa0:	9301      	str	r3, [sp, #4]
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    2aa2:	2808      	cmp	r0, #8
    2aa4:	d900      	bls.n	2aa8 <recvfrom+0x18>
    2aa6:	e11b      	b.n	2ce0 <recvfrom+0x250>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    2aa8:	0007      	movs	r7, r0
    2aaa:	0083      	lsls	r3, r0, #2
    2aac:	3301      	adds	r3, #1
    2aae:	00de      	lsls	r6, r3, #3
    2ab0:	0030      	movs	r0, r6
    2ab2:	f000 f9eb 	bl	2e8c <WIZCHIP_READ>
    2ab6:	4683      	mov	fp, r0
    2ab8:	230f      	movs	r3, #15
    2aba:	4003      	ands	r3, r0
    2abc:	3b02      	subs	r3, #2
    2abe:	b2db      	uxtb	r3, r3
    2ac0:	2b02      	cmp	r3, #2
    2ac2:	d900      	bls.n	2ac6 <recvfrom+0x36>
    2ac4:	e10f      	b.n	2ce6 <recvfrom+0x256>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    2ac6:	4643      	mov	r3, r8
    2ac8:	2b00      	cmp	r3, #0
    2aca:	d100      	bne.n	2ace <recvfrom+0x3e>
    2acc:	e10e      	b.n	2cec <recvfrom+0x25c>
   if(sock_remained_size[sn] == 0)
    2ace:	006b      	lsls	r3, r5, #1
    2ad0:	4a89      	ldr	r2, [pc, #548]	; (2cf8 <recvfrom+0x268>)
    2ad2:	5a9b      	ldrh	r3, [r3, r2]
    2ad4:	2b00      	cmp	r3, #0
    2ad6:	d015      	beq.n	2b04 <recvfrom+0x74>
	uint16_t pack_len=0;
    2ad8:	2400      	movs	r4, #0
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    2ada:	2307      	movs	r3, #7
    2adc:	465a      	mov	r2, fp
    2ade:	4013      	ands	r3, r2
    2ae0:	2b03      	cmp	r3, #3
    2ae2:	d100      	bne.n	2ae6 <recvfrom+0x56>
    2ae4:	e0bd      	b.n	2c62 <recvfrom+0x1d2>
    2ae6:	2b04      	cmp	r3, #4
    2ae8:	d100      	bne.n	2aec <recvfrom+0x5c>
    2aea:	e081      	b.n	2bf0 <recvfrom+0x160>
    2aec:	2b02      	cmp	r3, #2
    2aee:	d01e      	beq.n	2b2e <recvfrom+0x9e>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    2af0:	0021      	movs	r1, r4
    2af2:	0028      	movs	r0, r5
    2af4:	f000 fb72 	bl	31dc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    2af8:	006b      	lsls	r3, r5, #1
    2afa:	4a7f      	ldr	r2, [pc, #508]	; (2cf8 <recvfrom+0x268>)
    2afc:	529c      	strh	r4, [r3, r2]
         break;
    2afe:	e026      	b.n	2b4e <recvfrom+0xbe>
         if(pack_len != 0) break;
    2b00:	2c00      	cmp	r4, #0
    2b02:	d1ea      	bne.n	2ada <recvfrom+0x4a>
         pack_len = getSn_RX_RSR(sn);
    2b04:	0028      	movs	r0, r5
    2b06:	f000 fad1 	bl	30ac <getSn_RX_RSR>
    2b0a:	0004      	movs	r4, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2b0c:	23c0      	movs	r3, #192	; 0xc0
    2b0e:	009b      	lsls	r3, r3, #2
    2b10:	18f0      	adds	r0, r6, r3
    2b12:	f000 f9bb 	bl	2e8c <WIZCHIP_READ>
    2b16:	2800      	cmp	r0, #0
    2b18:	d100      	bne.n	2b1c <recvfrom+0x8c>
    2b1a:	e0ea      	b.n	2cf2 <recvfrom+0x262>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    2b1c:	4b77      	ldr	r3, [pc, #476]	; (2cfc <recvfrom+0x26c>)
    2b1e:	881b      	ldrh	r3, [r3, #0]
    2b20:	413b      	asrs	r3, r7
    2b22:	07db      	lsls	r3, r3, #31
    2b24:	d5ec      	bpl.n	2b00 <recvfrom+0x70>
    2b26:	2c00      	cmp	r4, #0
    2b28:	d1ea      	bne.n	2b00 <recvfrom+0x70>
    2b2a:	2000      	movs	r0, #0
    2b2c:	e029      	b.n	2b82 <recvfrom+0xf2>
	      if(sock_remained_size[sn] == 0)
    2b2e:	006b      	lsls	r3, r5, #1
    2b30:	4a71      	ldr	r2, [pc, #452]	; (2cf8 <recvfrom+0x268>)
    2b32:	5a9b      	ldrh	r3, [r3, r2]
    2b34:	2b00      	cmp	r3, #0
    2b36:	d029      	beq.n	2b8c <recvfrom+0xfc>
			if(len < sock_remained_size[sn]) pack_len = len;
    2b38:	006b      	lsls	r3, r5, #1
    2b3a:	4a6f      	ldr	r2, [pc, #444]	; (2cf8 <recvfrom+0x268>)
    2b3c:	5a9c      	ldrh	r4, [r3, r2]
    2b3e:	45a0      	cmp	r8, r4
    2b40:	d200      	bcs.n	2b44 <recvfrom+0xb4>
    2b42:	4644      	mov	r4, r8
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    2b44:	0022      	movs	r2, r4
    2b46:	9900      	ldr	r1, [sp, #0]
    2b48:	0028      	movs	r0, r5
    2b4a:	f000 fb14 	bl	3176 <wiz_recv_data>
   }
	setSn_CR(sn,Sn_CR_RECV);
    2b4e:	3601      	adds	r6, #1
    2b50:	36ff      	adds	r6, #255	; 0xff
    2b52:	2140      	movs	r1, #64	; 0x40
    2b54:	0030      	movs	r0, r6
    2b56:	f000 f9cb 	bl	2ef0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    2b5a:	0030      	movs	r0, r6
    2b5c:	f000 f996 	bl	2e8c <WIZCHIP_READ>
    2b60:	2800      	cmp	r0, #0
    2b62:	d1fa      	bne.n	2b5a <recvfrom+0xca>
	sock_remained_size[sn] -= pack_len;
    2b64:	4a64      	ldr	r2, [pc, #400]	; (2cf8 <recvfrom+0x268>)
    2b66:	0069      	lsls	r1, r5, #1
    2b68:	5a8b      	ldrh	r3, [r1, r2]
    2b6a:	1b1b      	subs	r3, r3, r4
    2b6c:	b29b      	uxth	r3, r3
    2b6e:	528b      	strh	r3, [r1, r2]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    2b70:	2b00      	cmp	r3, #0
    2b72:	d100      	bne.n	2b76 <recvfrom+0xe6>
    2b74:	e0b0      	b.n	2cd8 <recvfrom+0x248>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    2b76:	4a62      	ldr	r2, [pc, #392]	; (2d00 <recvfrom+0x270>)
    2b78:	5d53      	ldrb	r3, [r2, r5]
    2b7a:	2101      	movs	r1, #1
    2b7c:	430b      	orrs	r3, r1
    2b7e:	5553      	strb	r3, [r2, r5]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    2b80:	0020      	movs	r0, r4
}
    2b82:	b005      	add	sp, #20
    2b84:	bc0c      	pop	{r2, r3}
    2b86:	4690      	mov	r8, r2
    2b88:	469b      	mov	fp, r3
    2b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   			wiz_recv_data(sn, head, 8);
    2b8c:	2208      	movs	r2, #8
    2b8e:	a902      	add	r1, sp, #8
    2b90:	0028      	movs	r0, r5
    2b92:	f000 faf0 	bl	3176 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    2b96:	1c74      	adds	r4, r6, #1
    2b98:	34ff      	adds	r4, #255	; 0xff
    2b9a:	2140      	movs	r1, #64	; 0x40
    2b9c:	0020      	movs	r0, r4
    2b9e:	f000 f9a7 	bl	2ef0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    2ba2:	0020      	movs	r0, r4
    2ba4:	f000 f972 	bl	2e8c <WIZCHIP_READ>
    2ba8:	2800      	cmp	r0, #0
    2baa:	d1fa      	bne.n	2ba2 <recvfrom+0x112>
               addr[0] = head[0];
    2bac:	ab02      	add	r3, sp, #8
    2bae:	781b      	ldrb	r3, [r3, #0]
    2bb0:	9a01      	ldr	r2, [sp, #4]
    2bb2:	7013      	strb	r3, [r2, #0]
      			addr[1] = head[1];
    2bb4:	ab02      	add	r3, sp, #8
    2bb6:	785b      	ldrb	r3, [r3, #1]
    2bb8:	7053      	strb	r3, [r2, #1]
      			addr[2] = head[2];
    2bba:	ab02      	add	r3, sp, #8
    2bbc:	789b      	ldrb	r3, [r3, #2]
    2bbe:	7093      	strb	r3, [r2, #2]
      			addr[3] = head[3];
    2bc0:	ab02      	add	r3, sp, #8
    2bc2:	78db      	ldrb	r3, [r3, #3]
    2bc4:	70d3      	strb	r3, [r2, #3]
      			*port = head[4];
    2bc6:	ab02      	add	r3, sp, #8
    2bc8:	791b      	ldrb	r3, [r3, #4]
      			*port = (*port << 8) + head[5];
    2bca:	021b      	lsls	r3, r3, #8
    2bcc:	aa02      	add	r2, sp, #8
    2bce:	7952      	ldrb	r2, [r2, #5]
    2bd0:	189b      	adds	r3, r3, r2
    2bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2bd4:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
    2bd6:	ab02      	add	r3, sp, #8
    2bd8:	799b      	ldrb	r3, [r3, #6]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    2bda:	021b      	lsls	r3, r3, #8
    2bdc:	aa02      	add	r2, sp, #8
    2bde:	79d2      	ldrb	r2, [r2, #7]
    2be0:	189b      	adds	r3, r3, r2
    2be2:	006a      	lsls	r2, r5, #1
    2be4:	4944      	ldr	r1, [pc, #272]	; (2cf8 <recvfrom+0x268>)
    2be6:	528b      	strh	r3, [r1, r2]
   			sock_pack_info[sn] = PACK_FIRST;
    2be8:	2280      	movs	r2, #128	; 0x80
    2bea:	4b45      	ldr	r3, [pc, #276]	; (2d00 <recvfrom+0x270>)
    2bec:	555a      	strb	r2, [r3, r5]
    2bee:	e7a3      	b.n	2b38 <recvfrom+0xa8>
	      if(sock_remained_size[sn] == 0)
    2bf0:	006b      	lsls	r3, r5, #1
    2bf2:	4a41      	ldr	r2, [pc, #260]	; (2cf8 <recvfrom+0x268>)
    2bf4:	5a9b      	ldrh	r3, [r3, r2]
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d00b      	beq.n	2c12 <recvfrom+0x182>
			if(len < sock_remained_size[sn]) pack_len = len;
    2bfa:	006b      	lsls	r3, r5, #1
    2bfc:	4a3e      	ldr	r2, [pc, #248]	; (2cf8 <recvfrom+0x268>)
    2bfe:	5a9c      	ldrh	r4, [r3, r2]
    2c00:	45a0      	cmp	r8, r4
    2c02:	d200      	bcs.n	2c06 <recvfrom+0x176>
    2c04:	4644      	mov	r4, r8
			wiz_recv_data(sn,buf,pack_len);
    2c06:	0022      	movs	r2, r4
    2c08:	9900      	ldr	r1, [sp, #0]
    2c0a:	0028      	movs	r0, r5
    2c0c:	f000 fab3 	bl	3176 <wiz_recv_data>
		   break;
    2c10:	e79d      	b.n	2b4e <recvfrom+0xbe>
   			wiz_recv_data(sn, head, 2);
    2c12:	2202      	movs	r2, #2
    2c14:	a902      	add	r1, sp, #8
    2c16:	0028      	movs	r0, r5
    2c18:	f000 faad 	bl	3176 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    2c1c:	1c74      	adds	r4, r6, #1
    2c1e:	34ff      	adds	r4, #255	; 0xff
    2c20:	2140      	movs	r1, #64	; 0x40
    2c22:	0020      	movs	r0, r4
    2c24:	f000 f964 	bl	2ef0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    2c28:	0020      	movs	r0, r4
    2c2a:	f000 f92f 	bl	2e8c <WIZCHIP_READ>
    2c2e:	2800      	cmp	r0, #0
    2c30:	d1fa      	bne.n	2c28 <recvfrom+0x198>
    			sock_remained_size[sn] = head[0];
    2c32:	ab02      	add	r3, sp, #8
    2c34:	781b      	ldrb	r3, [r3, #0]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    2c36:	021b      	lsls	r3, r3, #8
    2c38:	aa02      	add	r2, sp, #8
    2c3a:	7852      	ldrb	r2, [r2, #1]
    2c3c:	189b      	adds	r3, r3, r2
    2c3e:	b29b      	uxth	r3, r3
    2c40:	3b02      	subs	r3, #2
    2c42:	b29b      	uxth	r3, r3
    2c44:	006a      	lsls	r2, r5, #1
    2c46:	492c      	ldr	r1, [pc, #176]	; (2cf8 <recvfrom+0x268>)
    2c48:	5253      	strh	r3, [r2, r1]
   			if(sock_remained_size[sn] > 1514) 
    2c4a:	4a2e      	ldr	r2, [pc, #184]	; (2d04 <recvfrom+0x274>)
    2c4c:	4293      	cmp	r3, r2
    2c4e:	d803      	bhi.n	2c58 <recvfrom+0x1c8>
   			sock_pack_info[sn] = PACK_FIRST;
    2c50:	2280      	movs	r2, #128	; 0x80
    2c52:	4b2b      	ldr	r3, [pc, #172]	; (2d00 <recvfrom+0x270>)
    2c54:	555a      	strb	r2, [r3, r5]
    2c56:	e7d0      	b.n	2bfa <recvfrom+0x16a>
   			   close(sn);
    2c58:	0028      	movs	r0, r5
    2c5a:	f7ff fbd1 	bl	2400 <close>
   			   return SOCKFATAL_PACKLEN;
    2c5e:	482a      	ldr	r0, [pc, #168]	; (2d08 <recvfrom+0x278>)
    2c60:	e78f      	b.n	2b82 <recvfrom+0xf2>
		   if(sock_remained_size[sn] == 0)
    2c62:	006b      	lsls	r3, r5, #1
    2c64:	4a24      	ldr	r2, [pc, #144]	; (2cf8 <recvfrom+0x268>)
    2c66:	5a9b      	ldrh	r3, [r3, r2]
    2c68:	2b00      	cmp	r3, #0
    2c6a:	d00b      	beq.n	2c84 <recvfrom+0x1f4>
			if(len < sock_remained_size[sn]) pack_len = len;
    2c6c:	006b      	lsls	r3, r5, #1
    2c6e:	4a22      	ldr	r2, [pc, #136]	; (2cf8 <recvfrom+0x268>)
    2c70:	5a9c      	ldrh	r4, [r3, r2]
    2c72:	45a0      	cmp	r8, r4
    2c74:	d200      	bcs.n	2c78 <recvfrom+0x1e8>
    2c76:	4644      	mov	r4, r8
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    2c78:	0022      	movs	r2, r4
    2c7a:	9900      	ldr	r1, [sp, #0]
    2c7c:	0028      	movs	r0, r5
    2c7e:	f000 fa7a 	bl	3176 <wiz_recv_data>
			break;
    2c82:	e764      	b.n	2b4e <recvfrom+0xbe>
   			wiz_recv_data(sn, head, 6);
    2c84:	2206      	movs	r2, #6
    2c86:	a902      	add	r1, sp, #8
    2c88:	0028      	movs	r0, r5
    2c8a:	f000 fa74 	bl	3176 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    2c8e:	1c74      	adds	r4, r6, #1
    2c90:	34ff      	adds	r4, #255	; 0xff
    2c92:	2140      	movs	r1, #64	; 0x40
    2c94:	0020      	movs	r0, r4
    2c96:	f000 f92b 	bl	2ef0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    2c9a:	0020      	movs	r0, r4
    2c9c:	f000 f8f6 	bl	2e8c <WIZCHIP_READ>
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d1fa      	bne.n	2c9a <recvfrom+0x20a>
   			addr[0] = head[0];
    2ca4:	ab02      	add	r3, sp, #8
    2ca6:	781b      	ldrb	r3, [r3, #0]
    2ca8:	9a01      	ldr	r2, [sp, #4]
    2caa:	7013      	strb	r3, [r2, #0]
   			addr[1] = head[1];
    2cac:	ab02      	add	r3, sp, #8
    2cae:	785b      	ldrb	r3, [r3, #1]
    2cb0:	7053      	strb	r3, [r2, #1]
   			addr[2] = head[2];
    2cb2:	ab02      	add	r3, sp, #8
    2cb4:	789b      	ldrb	r3, [r3, #2]
    2cb6:	7093      	strb	r3, [r2, #2]
   			addr[3] = head[3];
    2cb8:	ab02      	add	r3, sp, #8
    2cba:	78db      	ldrb	r3, [r3, #3]
    2cbc:	70d3      	strb	r3, [r2, #3]
   			sock_remained_size[sn] = head[4];
    2cbe:	ab02      	add	r3, sp, #8
    2cc0:	791b      	ldrb	r3, [r3, #4]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    2cc2:	021b      	lsls	r3, r3, #8
    2cc4:	aa02      	add	r2, sp, #8
    2cc6:	7952      	ldrb	r2, [r2, #5]
    2cc8:	189b      	adds	r3, r3, r2
    2cca:	006a      	lsls	r2, r5, #1
    2ccc:	490a      	ldr	r1, [pc, #40]	; (2cf8 <recvfrom+0x268>)
    2cce:	528b      	strh	r3, [r1, r2]
   			sock_pack_info[sn] = PACK_FIRST;
    2cd0:	2280      	movs	r2, #128	; 0x80
    2cd2:	4b0b      	ldr	r3, [pc, #44]	; (2d00 <recvfrom+0x270>)
    2cd4:	555a      	strb	r2, [r3, r5]
    2cd6:	e7c9      	b.n	2c6c <recvfrom+0x1dc>
	else sock_pack_info[sn] = PACK_COMPLETED;
    2cd8:	2200      	movs	r2, #0
    2cda:	4b09      	ldr	r3, [pc, #36]	; (2d00 <recvfrom+0x270>)
    2cdc:	555a      	strb	r2, [r3, r5]
    2cde:	e74f      	b.n	2b80 <recvfrom+0xf0>
   CHECK_SOCKNUM();
    2ce0:	2001      	movs	r0, #1
    2ce2:	4240      	negs	r0, r0
    2ce4:	e74d      	b.n	2b82 <recvfrom+0xf2>
         return SOCKERR_SOCKMODE;
    2ce6:	2005      	movs	r0, #5
    2ce8:	4240      	negs	r0, r0
    2cea:	e74a      	b.n	2b82 <recvfrom+0xf2>
   CHECK_SOCKDATA();
    2cec:	200e      	movs	r0, #14
    2cee:	4240      	negs	r0, r0
    2cf0:	e747      	b.n	2b82 <recvfrom+0xf2>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2cf2:	2004      	movs	r0, #4
    2cf4:	4240      	negs	r0, r0
    2cf6:	e744      	b.n	2b82 <recvfrom+0xf2>
    2cf8:	20000ac4 	.word	0x20000ac4
    2cfc:	20000ab6 	.word	0x20000ab6
    2d00:	20000abc 	.word	0x20000abc
    2d04:	000005ea 	.word	0x000005ea
    2d08:	fffffc17 	.word	0xfffffc17

00002d0c <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
    2d0c:	b570      	push	{r4, r5, r6, lr}
    2d0e:	0004      	movs	r4, r0
    2d10:	0015      	movs	r5, r2
   CHECK_SOCKNUM();
    2d12:	2808      	cmp	r0, #8
    2d14:	d900      	bls.n	2d18 <getsockopt+0xc>
    2d16:	e0a6      	b.n	2e66 <getsockopt+0x15a>
   switch(sotype)
    2d18:	290c      	cmp	r1, #12
    2d1a:	d900      	bls.n	2d1e <getsockopt+0x12>
    2d1c:	e0a6      	b.n	2e6c <getsockopt+0x160>
    2d1e:	0089      	lsls	r1, r1, #2
    2d20:	4b57      	ldr	r3, [pc, #348]	; (2e80 <getsockopt+0x174>)
    2d22:	585b      	ldr	r3, [r3, r1]
    2d24:	469f      	mov	pc, r3
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
    2d26:	0080      	lsls	r0, r0, #2
    2d28:	3001      	adds	r0, #1
    2d2a:	00c0      	lsls	r0, r0, #3
    2d2c:	f000 f8ae 	bl	2e8c <WIZCHIP_READ>
    2d30:	230f      	movs	r3, #15
    2d32:	4398      	bics	r0, r3
    2d34:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    2d36:	2001      	movs	r0, #1
}
    2d38:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
    2d3a:	0080      	lsls	r0, r0, #2
    2d3c:	3001      	adds	r0, #1
    2d3e:	00c0      	lsls	r0, r0, #3
    2d40:	23b0      	movs	r3, #176	; 0xb0
    2d42:	015b      	lsls	r3, r3, #5
    2d44:	469c      	mov	ip, r3
    2d46:	4460      	add	r0, ip
    2d48:	f000 f8a0 	bl	2e8c <WIZCHIP_READ>
    2d4c:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    2d4e:	2001      	movs	r0, #1
         break;
    2d50:	e7f2      	b.n	2d38 <getsockopt+0x2c>
         *(uint8_t*) arg = getSn_TOS(sn);
    2d52:	0080      	lsls	r0, r0, #2
    2d54:	3001      	adds	r0, #1
    2d56:	00c0      	lsls	r0, r0, #3
    2d58:	23a8      	movs	r3, #168	; 0xa8
    2d5a:	015b      	lsls	r3, r3, #5
    2d5c:	469c      	mov	ip, r3
    2d5e:	4460      	add	r0, ip
    2d60:	f000 f894 	bl	2e8c <WIZCHIP_READ>
    2d64:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    2d66:	2001      	movs	r0, #1
         break;
    2d68:	e7e6      	b.n	2d38 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_MSSR(sn);
    2d6a:	0084      	lsls	r4, r0, #2
    2d6c:	3401      	adds	r4, #1
    2d6e:	00e4      	lsls	r4, r4, #3
    2d70:	2390      	movs	r3, #144	; 0x90
    2d72:	015b      	lsls	r3, r3, #5
    2d74:	18e0      	adds	r0, r4, r3
    2d76:	f000 f889 	bl	2e8c <WIZCHIP_READ>
    2d7a:	b286      	uxth	r6, r0
    2d7c:	0236      	lsls	r6, r6, #8
    2d7e:	b2b6      	uxth	r6, r6
    2d80:	2398      	movs	r3, #152	; 0x98
    2d82:	015b      	lsls	r3, r3, #5
    2d84:	18e0      	adds	r0, r4, r3
    2d86:	f000 f881 	bl	2e8c <WIZCHIP_READ>
    2d8a:	b280      	uxth	r0, r0
    2d8c:	1836      	adds	r6, r6, r0
    2d8e:	802e      	strh	r6, [r5, #0]
   return SOCK_OK;
    2d90:	2001      	movs	r0, #1
         break;
    2d92:	e7d1      	b.n	2d38 <getsockopt+0x2c>
         getSn_DIPR(sn, (uint8_t*)arg);
    2d94:	0080      	lsls	r0, r0, #2
    2d96:	3001      	adds	r0, #1
    2d98:	00c0      	lsls	r0, r0, #3
    2d9a:	23c0      	movs	r3, #192	; 0xc0
    2d9c:	011b      	lsls	r3, r3, #4
    2d9e:	469c      	mov	ip, r3
    2da0:	4460      	add	r0, ip
    2da2:	2204      	movs	r2, #4
    2da4:	0029      	movs	r1, r5
    2da6:	f000 f8d3 	bl	2f50 <WIZCHIP_READ_BUF>
   return SOCK_OK;
    2daa:	2001      	movs	r0, #1
         break;
    2dac:	e7c4      	b.n	2d38 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_DPORT(sn);
    2dae:	0084      	lsls	r4, r0, #2
    2db0:	3401      	adds	r4, #1
    2db2:	00e4      	lsls	r4, r4, #3
    2db4:	2380      	movs	r3, #128	; 0x80
    2db6:	015b      	lsls	r3, r3, #5
    2db8:	18e0      	adds	r0, r4, r3
    2dba:	f000 f867 	bl	2e8c <WIZCHIP_READ>
    2dbe:	b286      	uxth	r6, r0
    2dc0:	0236      	lsls	r6, r6, #8
    2dc2:	b2b6      	uxth	r6, r6
    2dc4:	2388      	movs	r3, #136	; 0x88
    2dc6:	015b      	lsls	r3, r3, #5
    2dc8:	18e0      	adds	r0, r4, r3
    2dca:	f000 f85f 	bl	2e8c <WIZCHIP_READ>
    2dce:	b280      	uxth	r0, r0
    2dd0:	1836      	adds	r6, r6, r0
    2dd2:	802e      	strh	r6, [r5, #0]
   return SOCK_OK;
    2dd4:	2001      	movs	r0, #1
         break;
    2dd6:	e7af      	b.n	2d38 <getsockopt+0x2c>
         CHECK_SOCKMODE(Sn_MR_TCP);
    2dd8:	0084      	lsls	r4, r0, #2
    2dda:	3401      	adds	r4, #1
    2ddc:	00e4      	lsls	r4, r4, #3
    2dde:	0020      	movs	r0, r4
    2de0:	f000 f854 	bl	2e8c <WIZCHIP_READ>
    2de4:	230f      	movs	r3, #15
    2de6:	4018      	ands	r0, r3
    2de8:	2801      	cmp	r0, #1
    2dea:	d142      	bne.n	2e72 <getsockopt+0x166>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
    2dec:	23bc      	movs	r3, #188	; 0xbc
    2dee:	019b      	lsls	r3, r3, #6
    2df0:	18e0      	adds	r0, r4, r3
    2df2:	f000 f84b 	bl	2e8c <WIZCHIP_READ>
    2df6:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    2df8:	2001      	movs	r0, #1
         break;
    2dfa:	e79d      	b.n	2d38 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
    2dfc:	f000 f924 	bl	3048 <getSn_TX_FSR>
    2e00:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    2e02:	2001      	movs	r0, #1
         break;
    2e04:	e798      	b.n	2d38 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
    2e06:	f000 f951 	bl	30ac <getSn_RX_RSR>
    2e0a:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    2e0c:	2001      	movs	r0, #1
         break;
    2e0e:	e793      	b.n	2d38 <getsockopt+0x2c>
         *(uint8_t*) arg = getSn_SR(sn);
    2e10:	0080      	lsls	r0, r0, #2
    2e12:	3001      	adds	r0, #1
    2e14:	00c0      	lsls	r0, r0, #3
    2e16:	23c0      	movs	r3, #192	; 0xc0
    2e18:	009b      	lsls	r3, r3, #2
    2e1a:	469c      	mov	ip, r3
    2e1c:	4460      	add	r0, ip
    2e1e:	f000 f835 	bl	2e8c <WIZCHIP_READ>
    2e22:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    2e24:	2001      	movs	r0, #1
         break;
    2e26:	e787      	b.n	2d38 <getsockopt+0x2c>
         if(getSn_MR(sn) & Sn_MR_TCP)
    2e28:	0080      	lsls	r0, r0, #2
    2e2a:	3001      	adds	r0, #1
    2e2c:	00c0      	lsls	r0, r0, #3
    2e2e:	f000 f82d 	bl	2e8c <WIZCHIP_READ>
    2e32:	07c3      	lsls	r3, r0, #31
    2e34:	d405      	bmi.n	2e42 <getsockopt+0x136>
            *(uint16_t*)arg = sock_remained_size[sn];
    2e36:	0064      	lsls	r4, r4, #1
    2e38:	4b12      	ldr	r3, [pc, #72]	; (2e84 <getsockopt+0x178>)
    2e3a:	5ae3      	ldrh	r3, [r4, r3]
    2e3c:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
    2e3e:	2001      	movs	r0, #1
    2e40:	e77a      	b.n	2d38 <getsockopt+0x2c>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
    2e42:	0020      	movs	r0, r4
    2e44:	f000 f932 	bl	30ac <getSn_RX_RSR>
    2e48:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    2e4a:	2001      	movs	r0, #1
    2e4c:	e774      	b.n	2d38 <getsockopt+0x2c>
         if((getSn_MR(sn) == Sn_MR_TCP))
    2e4e:	0080      	lsls	r0, r0, #2
    2e50:	3001      	adds	r0, #1
    2e52:	00c0      	lsls	r0, r0, #3
    2e54:	f000 f81a 	bl	2e8c <WIZCHIP_READ>
    2e58:	2801      	cmp	r0, #1
    2e5a:	d00d      	beq.n	2e78 <getsockopt+0x16c>
         *(uint8_t*)arg = sock_pack_info[sn];
    2e5c:	4b0a      	ldr	r3, [pc, #40]	; (2e88 <getsockopt+0x17c>)
    2e5e:	5d1b      	ldrb	r3, [r3, r4]
    2e60:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
    2e62:	2001      	movs	r0, #1
         break;
    2e64:	e768      	b.n	2d38 <getsockopt+0x2c>
   CHECK_SOCKNUM();
    2e66:	2001      	movs	r0, #1
    2e68:	4240      	negs	r0, r0
    2e6a:	e765      	b.n	2d38 <getsockopt+0x2c>
         return SOCKERR_SOCKOPT;
    2e6c:	2002      	movs	r0, #2
    2e6e:	4240      	negs	r0, r0
    2e70:	e762      	b.n	2d38 <getsockopt+0x2c>
         CHECK_SOCKMODE(Sn_MR_TCP);
    2e72:	2005      	movs	r0, #5
    2e74:	4240      	negs	r0, r0
    2e76:	e75f      	b.n	2d38 <getsockopt+0x2c>
             return SOCKERR_SOCKMODE;
    2e78:	2005      	movs	r0, #5
    2e7a:	4240      	negs	r0, r0
    2e7c:	e75c      	b.n	2d38 <getsockopt+0x2c>
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	0000f3a8 	.word	0x0000f3a8
    2e84:	20000ac4 	.word	0x20000ac4
    2e88:	20000abc 	.word	0x20000abc

00002e8c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    2e8c:	b530      	push	{r4, r5, lr}
    2e8e:	b083      	sub	sp, #12
    2e90:	0004      	movs	r4, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    2e92:	4d16      	ldr	r5, [pc, #88]	; (2eec <WIZCHIP_READ+0x60>)
    2e94:	68eb      	ldr	r3, [r5, #12]
    2e96:	4798      	blx	r3
   WIZCHIP.CS._select();
    2e98:	696b      	ldr	r3, [r5, #20]
    2e9a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    2e9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2e9e:	2b00      	cmp	r3, #0
    2ea0:	d016      	beq.n	2ed0 <WIZCHIP_READ+0x44>
    2ea2:	4b12      	ldr	r3, [pc, #72]	; (2eec <WIZCHIP_READ+0x60>)
    2ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d012      	beq.n	2ed0 <WIZCHIP_READ+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    2eaa:	0c22      	lsrs	r2, r4, #16
    2eac:	a801      	add	r0, sp, #4
    2eae:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    2eb0:	0a22      	lsrs	r2, r4, #8
    2eb2:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    2eb4:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    2eb6:	2103      	movs	r1, #3
    2eb8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    2eba:	4c0c      	ldr	r4, [pc, #48]	; (2eec <WIZCHIP_READ+0x60>)
    2ebc:	69e3      	ldr	r3, [r4, #28]
    2ebe:	4798      	blx	r3
    2ec0:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
    2ec2:	69a3      	ldr	r3, [r4, #24]
    2ec4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    2ec6:	6923      	ldr	r3, [r4, #16]
    2ec8:	4798      	blx	r3
   return ret;
}
    2eca:	0028      	movs	r0, r5
    2ecc:	b003      	add	sp, #12
    2ece:	bd30      	pop	{r4, r5, pc}
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    2ed0:	4d06      	ldr	r5, [pc, #24]	; (2eec <WIZCHIP_READ+0x60>)
    2ed2:	0c20      	lsrs	r0, r4, #16
    2ed4:	b2c0      	uxtb	r0, r0
    2ed6:	6a2b      	ldr	r3, [r5, #32]
    2ed8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    2eda:	0a20      	lsrs	r0, r4, #8
    2edc:	b2c0      	uxtb	r0, r0
    2ede:	6a2b      	ldr	r3, [r5, #32]
    2ee0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    2ee2:	6a2b      	ldr	r3, [r5, #32]
    2ee4:	b2e0      	uxtb	r0, r4
    2ee6:	4798      	blx	r3
    2ee8:	e7e7      	b.n	2eba <WIZCHIP_READ+0x2e>
    2eea:	46c0      	nop			; (mov r8, r8)
    2eec:	2000002c 	.word	0x2000002c

00002ef0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    2ef0:	b570      	push	{r4, r5, r6, lr}
    2ef2:	b082      	sub	sp, #8
    2ef4:	0004      	movs	r4, r0
    2ef6:	000e      	movs	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    2ef8:	4d14      	ldr	r5, [pc, #80]	; (2f4c <WIZCHIP_WRITE+0x5c>)
    2efa:	68eb      	ldr	r3, [r5, #12]
    2efc:	4798      	blx	r3
   WIZCHIP.CS._select();
    2efe:	696b      	ldr	r3, [r5, #20]
    2f00:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    2f02:	2004      	movs	r0, #4
    2f04:	4304      	orrs	r4, r0

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    2f06:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d00f      	beq.n	2f2c <WIZCHIP_WRITE+0x3c>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    2f0c:	0c22      	lsrs	r2, r4, #16
    2f0e:	a801      	add	r0, sp, #4
    2f10:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    2f12:	0a22      	lsrs	r2, r4, #8
    2f14:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    2f16:	7084      	strb	r4, [r0, #2]
		spi_data[3] = wb;
    2f18:	70c6      	strb	r6, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    2f1a:	2104      	movs	r1, #4
    2f1c:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    2f1e:	4c0b      	ldr	r4, [pc, #44]	; (2f4c <WIZCHIP_WRITE+0x5c>)
    2f20:	69a3      	ldr	r3, [r4, #24]
    2f22:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    2f24:	6923      	ldr	r3, [r4, #16]
    2f26:	4798      	blx	r3
}
    2f28:	b002      	add	sp, #8
    2f2a:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    2f2c:	4d07      	ldr	r5, [pc, #28]	; (2f4c <WIZCHIP_WRITE+0x5c>)
    2f2e:	0c20      	lsrs	r0, r4, #16
    2f30:	b2c0      	uxtb	r0, r0
    2f32:	6a2b      	ldr	r3, [r5, #32]
    2f34:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    2f36:	0a20      	lsrs	r0, r4, #8
    2f38:	b2c0      	uxtb	r0, r0
    2f3a:	6a2b      	ldr	r3, [r5, #32]
    2f3c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    2f3e:	b2e0      	uxtb	r0, r4
    2f40:	6a2b      	ldr	r3, [r5, #32]
    2f42:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
    2f44:	6a2b      	ldr	r3, [r5, #32]
    2f46:	0030      	movs	r0, r6
    2f48:	4798      	blx	r3
    2f4a:	e7e8      	b.n	2f1e <WIZCHIP_WRITE+0x2e>
    2f4c:	2000002c 	.word	0x2000002c

00002f50 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    2f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f52:	b083      	sub	sp, #12
    2f54:	0004      	movs	r4, r0
    2f56:	000f      	movs	r7, r1
    2f58:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    2f5a:	4d1c      	ldr	r5, [pc, #112]	; (2fcc <WIZCHIP_READ_BUF+0x7c>)
    2f5c:	68eb      	ldr	r3, [r5, #12]
    2f5e:	4798      	blx	r3
   WIZCHIP.CS._select();
    2f60:	696b      	ldr	r3, [r5, #20]
    2f62:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    2f64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2f66:	2b00      	cmp	r3, #0
    2f68:	d017      	beq.n	2f9a <WIZCHIP_READ_BUF+0x4a>
    2f6a:	4b18      	ldr	r3, [pc, #96]	; (2fcc <WIZCHIP_READ_BUF+0x7c>)
    2f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f6e:	2b00      	cmp	r3, #0
    2f70:	d013      	beq.n	2f9a <WIZCHIP_READ_BUF+0x4a>
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    2f72:	0c22      	lsrs	r2, r4, #16
    2f74:	a801      	add	r0, sp, #4
    2f76:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    2f78:	0a22      	lsrs	r2, r4, #8
    2f7a:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    2f7c:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    2f7e:	2103      	movs	r1, #3
    2f80:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    2f82:	4b12      	ldr	r3, [pc, #72]	; (2fcc <WIZCHIP_READ_BUF+0x7c>)
    2f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2f86:	0031      	movs	r1, r6
    2f88:	0038      	movs	r0, r7
    2f8a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    2f8c:	4c0f      	ldr	r4, [pc, #60]	; (2fcc <WIZCHIP_READ_BUF+0x7c>)
    2f8e:	69a3      	ldr	r3, [r4, #24]
    2f90:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    2f92:	6923      	ldr	r3, [r4, #16]
    2f94:	4798      	blx	r3
}
    2f96:	b003      	add	sp, #12
    2f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    2f9a:	4d0c      	ldr	r5, [pc, #48]	; (2fcc <WIZCHIP_READ_BUF+0x7c>)
    2f9c:	0c20      	lsrs	r0, r4, #16
    2f9e:	b2c0      	uxtb	r0, r0
    2fa0:	6a2b      	ldr	r3, [r5, #32]
    2fa2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    2fa4:	0a20      	lsrs	r0, r4, #8
    2fa6:	b2c0      	uxtb	r0, r0
    2fa8:	6a2b      	ldr	r3, [r5, #32]
    2faa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    2fac:	6a2b      	ldr	r3, [r5, #32]
    2fae:	b2e0      	uxtb	r0, r4
    2fb0:	4798      	blx	r3
		for(i = 0; i < len; i++)
    2fb2:	2400      	movs	r4, #0
    2fb4:	e006      	b.n	2fc4 <WIZCHIP_READ_BUF+0x74>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    2fb6:	193d      	adds	r5, r7, r4
    2fb8:	4b04      	ldr	r3, [pc, #16]	; (2fcc <WIZCHIP_READ_BUF+0x7c>)
    2fba:	69db      	ldr	r3, [r3, #28]
    2fbc:	4798      	blx	r3
    2fbe:	7028      	strb	r0, [r5, #0]
		for(i = 0; i < len; i++)
    2fc0:	3401      	adds	r4, #1
    2fc2:	b2a4      	uxth	r4, r4
    2fc4:	42b4      	cmp	r4, r6
    2fc6:	d3f6      	bcc.n	2fb6 <WIZCHIP_READ_BUF+0x66>
    2fc8:	e7e0      	b.n	2f8c <WIZCHIP_READ_BUF+0x3c>
    2fca:	46c0      	nop			; (mov r8, r8)
    2fcc:	2000002c 	.word	0x2000002c

00002fd0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    2fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fd2:	b083      	sub	sp, #12
    2fd4:	0004      	movs	r4, r0
    2fd6:	000f      	movs	r7, r1
    2fd8:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    2fda:	4d1a      	ldr	r5, [pc, #104]	; (3044 <WIZCHIP_WRITE_BUF+0x74>)
    2fdc:	68eb      	ldr	r3, [r5, #12]
    2fde:	4798      	blx	r3
   WIZCHIP.CS._select();
    2fe0:	696b      	ldr	r3, [r5, #20]
    2fe2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    2fe4:	2004      	movs	r0, #4
    2fe6:	4304      	orrs	r4, r0

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    2fe8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2fea:	2b00      	cmp	r3, #0
    2fec:	d013      	beq.n	3016 <WIZCHIP_WRITE_BUF+0x46>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    2fee:	0c22      	lsrs	r2, r4, #16
    2ff0:	a801      	add	r0, sp, #4
    2ff2:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    2ff4:	0a22      	lsrs	r2, r4, #8
    2ff6:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    2ff8:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    2ffa:	2103      	movs	r1, #3
    2ffc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    2ffe:	4b11      	ldr	r3, [pc, #68]	; (3044 <WIZCHIP_WRITE_BUF+0x74>)
    3000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3002:	0031      	movs	r1, r6
    3004:	0038      	movs	r0, r7
    3006:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    3008:	4c0e      	ldr	r4, [pc, #56]	; (3044 <WIZCHIP_WRITE_BUF+0x74>)
    300a:	69a3      	ldr	r3, [r4, #24]
    300c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    300e:	6923      	ldr	r3, [r4, #16]
    3010:	4798      	blx	r3
}
    3012:	b003      	add	sp, #12
    3014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    3016:	4d0b      	ldr	r5, [pc, #44]	; (3044 <WIZCHIP_WRITE_BUF+0x74>)
    3018:	0c20      	lsrs	r0, r4, #16
    301a:	b2c0      	uxtb	r0, r0
    301c:	6a2b      	ldr	r3, [r5, #32]
    301e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3020:	0a20      	lsrs	r0, r4, #8
    3022:	b2c0      	uxtb	r0, r0
    3024:	6a2b      	ldr	r3, [r5, #32]
    3026:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    3028:	6a2b      	ldr	r3, [r5, #32]
    302a:	b2e0      	uxtb	r0, r4
    302c:	4798      	blx	r3
		for(i = 0; i < len; i++)
    302e:	2400      	movs	r4, #0
    3030:	e005      	b.n	303e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    3032:	4b04      	ldr	r3, [pc, #16]	; (3044 <WIZCHIP_WRITE_BUF+0x74>)
    3034:	6a1b      	ldr	r3, [r3, #32]
    3036:	5d38      	ldrb	r0, [r7, r4]
    3038:	4798      	blx	r3
		for(i = 0; i < len; i++)
    303a:	3401      	adds	r4, #1
    303c:	b2a4      	uxth	r4, r4
    303e:	42b4      	cmp	r4, r6
    3040:	d3f7      	bcc.n	3032 <WIZCHIP_WRITE_BUF+0x62>
    3042:	e7e1      	b.n	3008 <WIZCHIP_WRITE_BUF+0x38>
    3044:	2000002c 	.word	0x2000002c

00003048 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    3048:	b5f0      	push	{r4, r5, r6, r7, lr}
    304a:	46c6      	mov	lr, r8
    304c:	b500      	push	{lr}
    304e:	0007      	movs	r7, r0
   uint16_t val=0,val1=0;
    3050:	2500      	movs	r5, #0
    3052:	e001      	b.n	3058 <getSn_TX_FSR+0x10>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
    3054:	42a5      	cmp	r5, r4
    3056:	d025      	beq.n	30a4 <getSn_TX_FSR+0x5c>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    3058:	00bb      	lsls	r3, r7, #2
    305a:	3301      	adds	r3, #1
    305c:	00db      	lsls	r3, r3, #3
    305e:	4698      	mov	r8, r3
    3060:	2680      	movs	r6, #128	; 0x80
    3062:	01b6      	lsls	r6, r6, #6
    3064:	4446      	add	r6, r8
    3066:	0030      	movs	r0, r6
    3068:	f7ff ff10 	bl	2e8c <WIZCHIP_READ>
    306c:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    306e:	0224      	lsls	r4, r4, #8
    3070:	b2a4      	uxth	r4, r4
    3072:	2384      	movs	r3, #132	; 0x84
    3074:	019b      	lsls	r3, r3, #6
    3076:	469c      	mov	ip, r3
    3078:	44e0      	add	r8, ip
    307a:	4640      	mov	r0, r8
    307c:	f7ff ff06 	bl	2e8c <WIZCHIP_READ>
    3080:	b280      	uxth	r0, r0
    3082:	1824      	adds	r4, r4, r0
    3084:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    3086:	2c00      	cmp	r4, #0
    3088:	d0e4      	beq.n	3054 <getSn_TX_FSR+0xc>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    308a:	0030      	movs	r0, r6
    308c:	f7ff fefe 	bl	2e8c <WIZCHIP_READ>
    3090:	b280      	uxth	r0, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    3092:	0200      	lsls	r0, r0, #8
    3094:	b285      	uxth	r5, r0
    3096:	4640      	mov	r0, r8
    3098:	f7ff fef8 	bl	2e8c <WIZCHIP_READ>
    309c:	b280      	uxth	r0, r0
    309e:	182d      	adds	r5, r5, r0
    30a0:	b2ad      	uxth	r5, r5
    30a2:	e7d7      	b.n	3054 <getSn_TX_FSR+0xc>
   return val;
}
    30a4:	0028      	movs	r0, r5
    30a6:	bc04      	pop	{r2}
    30a8:	4690      	mov	r8, r2
    30aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000030ac <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    30ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ae:	46c6      	mov	lr, r8
    30b0:	b500      	push	{lr}
    30b2:	0007      	movs	r7, r0
   uint16_t val=0,val1=0;
    30b4:	2500      	movs	r5, #0
    30b6:	e001      	b.n	30bc <getSn_RX_RSR+0x10>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
    30b8:	42a5      	cmp	r5, r4
    30ba:	d025      	beq.n	3108 <getSn_RX_RSR+0x5c>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    30bc:	00bb      	lsls	r3, r7, #2
    30be:	3301      	adds	r3, #1
    30c0:	00db      	lsls	r3, r3, #3
    30c2:	4698      	mov	r8, r3
    30c4:	2698      	movs	r6, #152	; 0x98
    30c6:	01b6      	lsls	r6, r6, #6
    30c8:	4446      	add	r6, r8
    30ca:	0030      	movs	r0, r6
    30cc:	f7ff fede 	bl	2e8c <WIZCHIP_READ>
    30d0:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    30d2:	0224      	lsls	r4, r4, #8
    30d4:	b2a4      	uxth	r4, r4
    30d6:	239c      	movs	r3, #156	; 0x9c
    30d8:	019b      	lsls	r3, r3, #6
    30da:	469c      	mov	ip, r3
    30dc:	44e0      	add	r8, ip
    30de:	4640      	mov	r0, r8
    30e0:	f7ff fed4 	bl	2e8c <WIZCHIP_READ>
    30e4:	b280      	uxth	r0, r0
    30e6:	1824      	adds	r4, r4, r0
    30e8:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    30ea:	2c00      	cmp	r4, #0
    30ec:	d0e4      	beq.n	30b8 <getSn_RX_RSR+0xc>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    30ee:	0030      	movs	r0, r6
    30f0:	f7ff fecc 	bl	2e8c <WIZCHIP_READ>
    30f4:	b280      	uxth	r0, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    30f6:	0200      	lsls	r0, r0, #8
    30f8:	b285      	uxth	r5, r0
    30fa:	4640      	mov	r0, r8
    30fc:	f7ff fec6 	bl	2e8c <WIZCHIP_READ>
    3100:	b280      	uxth	r0, r0
    3102:	182d      	adds	r5, r5, r0
    3104:	b2ad      	uxth	r5, r5
    3106:	e7d7      	b.n	30b8 <getSn_RX_RSR+0xc>
   return val;
}
    3108:	0028      	movs	r0, r5
    310a:	bc04      	pop	{r2}
    310c:	4690      	mov	r8, r2
    310e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003110 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    3110:	b5f0      	push	{r4, r5, r6, r7, lr}
    3112:	b083      	sub	sp, #12
    3114:	9100      	str	r1, [sp, #0]
    3116:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    3118:	d101      	bne.n	311e <wiz_send_data+0xe>
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
   
   ptr += len;
   setSn_TX_WR(sn,ptr);
}
    311a:	b003      	add	sp, #12
    311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_TX_WR(sn);
    311e:	0086      	lsls	r6, r0, #2
    3120:	1c75      	adds	r5, r6, #1
    3122:	00ed      	lsls	r5, r5, #3
    3124:	2390      	movs	r3, #144	; 0x90
    3126:	019b      	lsls	r3, r3, #6
    3128:	469c      	mov	ip, r3
    312a:	44ac      	add	ip, r5
    312c:	4663      	mov	r3, ip
    312e:	9301      	str	r3, [sp, #4]
    3130:	4660      	mov	r0, ip
    3132:	f7ff feab 	bl	2e8c <WIZCHIP_READ>
    3136:	b280      	uxth	r0, r0
    3138:	0200      	lsls	r0, r0, #8
    313a:	b287      	uxth	r7, r0
    313c:	2294      	movs	r2, #148	; 0x94
    313e:	0192      	lsls	r2, r2, #6
    3140:	4694      	mov	ip, r2
    3142:	4465      	add	r5, ip
    3144:	0028      	movs	r0, r5
    3146:	f7ff fea1 	bl	2e8c <WIZCHIP_READ>
    314a:	b280      	uxth	r0, r0
    314c:	1838      	adds	r0, r7, r0
    314e:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    3150:	023b      	lsls	r3, r7, #8
    3152:	1cb0      	adds	r0, r6, #2
    3154:	00c0      	lsls	r0, r0, #3
    3156:	1818      	adds	r0, r3, r0
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    3158:	0022      	movs	r2, r4
    315a:	9900      	ldr	r1, [sp, #0]
    315c:	f7ff ff38 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   ptr += len;
    3160:	19e4      	adds	r4, r4, r7
    3162:	b2a4      	uxth	r4, r4
   setSn_TX_WR(sn,ptr);
    3164:	0a21      	lsrs	r1, r4, #8
    3166:	9801      	ldr	r0, [sp, #4]
    3168:	f7ff fec2 	bl	2ef0 <WIZCHIP_WRITE>
    316c:	b2e1      	uxtb	r1, r4
    316e:	0028      	movs	r0, r5
    3170:	f7ff febe 	bl	2ef0 <WIZCHIP_WRITE>
    3174:	e7d1      	b.n	311a <wiz_send_data+0xa>

00003176 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    3176:	b5f0      	push	{r4, r5, r6, r7, lr}
    3178:	b083      	sub	sp, #12
    317a:	9100      	str	r1, [sp, #0]
    317c:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    317e:	d101      	bne.n	3184 <wiz_recv_data+0xe>
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
   ptr += len;
   
   setSn_RX_RD(sn,ptr);
}
    3180:	b003      	add	sp, #12
    3182:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_RX_RD(sn);
    3184:	0086      	lsls	r6, r0, #2
    3186:	1c75      	adds	r5, r6, #1
    3188:	00ed      	lsls	r5, r5, #3
    318a:	23a0      	movs	r3, #160	; 0xa0
    318c:	019b      	lsls	r3, r3, #6
    318e:	469c      	mov	ip, r3
    3190:	44ac      	add	ip, r5
    3192:	4663      	mov	r3, ip
    3194:	9301      	str	r3, [sp, #4]
    3196:	4660      	mov	r0, ip
    3198:	f7ff fe78 	bl	2e8c <WIZCHIP_READ>
    319c:	b280      	uxth	r0, r0
    319e:	0200      	lsls	r0, r0, #8
    31a0:	b287      	uxth	r7, r0
    31a2:	22a4      	movs	r2, #164	; 0xa4
    31a4:	0192      	lsls	r2, r2, #6
    31a6:	4694      	mov	ip, r2
    31a8:	4465      	add	r5, ip
    31aa:	0028      	movs	r0, r5
    31ac:	f7ff fe6e 	bl	2e8c <WIZCHIP_READ>
    31b0:	b280      	uxth	r0, r0
    31b2:	1838      	adds	r0, r7, r0
    31b4:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    31b6:	023b      	lsls	r3, r7, #8
    31b8:	1cf0      	adds	r0, r6, #3
    31ba:	00c0      	lsls	r0, r0, #3
    31bc:	1818      	adds	r0, r3, r0
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    31be:	0022      	movs	r2, r4
    31c0:	9900      	ldr	r1, [sp, #0]
    31c2:	f7ff fec5 	bl	2f50 <WIZCHIP_READ_BUF>
   ptr += len;
    31c6:	19e4      	adds	r4, r4, r7
    31c8:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
    31ca:	0a21      	lsrs	r1, r4, #8
    31cc:	9801      	ldr	r0, [sp, #4]
    31ce:	f7ff fe8f 	bl	2ef0 <WIZCHIP_WRITE>
    31d2:	b2e1      	uxtb	r1, r4
    31d4:	0028      	movs	r0, r5
    31d6:	f7ff fe8b 	bl	2ef0 <WIZCHIP_WRITE>
    31da:	e7d1      	b.n	3180 <wiz_recv_data+0xa>

000031dc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    31dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    31de:	000c      	movs	r4, r1
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    31e0:	0087      	lsls	r7, r0, #2
    31e2:	3701      	adds	r7, #1
    31e4:	00ff      	lsls	r7, r7, #3
    31e6:	23a0      	movs	r3, #160	; 0xa0
    31e8:	019b      	lsls	r3, r3, #6
    31ea:	18fe      	adds	r6, r7, r3
    31ec:	0030      	movs	r0, r6
    31ee:	f7ff fe4d 	bl	2e8c <WIZCHIP_READ>
    31f2:	b280      	uxth	r0, r0
    31f4:	0200      	lsls	r0, r0, #8
    31f6:	b285      	uxth	r5, r0
    31f8:	23a4      	movs	r3, #164	; 0xa4
    31fa:	019b      	lsls	r3, r3, #6
    31fc:	469c      	mov	ip, r3
    31fe:	4467      	add	r7, ip
    3200:	0038      	movs	r0, r7
    3202:	f7ff fe43 	bl	2e8c <WIZCHIP_READ>
    3206:	b280      	uxth	r0, r0
    3208:	182d      	adds	r5, r5, r0
    320a:	b2ad      	uxth	r5, r5
   ptr += len;
    320c:	192c      	adds	r4, r5, r4
    320e:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
    3210:	0a21      	lsrs	r1, r4, #8
    3212:	0030      	movs	r0, r6
    3214:	f7ff fe6c 	bl	2ef0 <WIZCHIP_WRITE>
    3218:	b2e1      	uxtb	r1, r4
    321a:	0038      	movs	r0, r7
    321c:	f7ff fe68 	bl	2ef0 <WIZCHIP_WRITE>
}
    3220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003222 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
    3222:	4770      	bx	lr

00003224 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
    3224:	4770      	bx	lr

00003226 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
    3226:	4770      	bx	lr

00003228 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
    3228:	4770      	bx	lr

0000322a <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
    322a:	7800      	ldrb	r0, [r0, #0]
    322c:	b2c0      	uxtb	r0, r0
    322e:	4770      	bx	lr

00003230 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
    3230:	7001      	strb	r1, [r0, #0]
    3232:	4770      	bx	lr

00003234 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
    3234:	2000      	movs	r0, #0
    3236:	4770      	bx	lr

00003238 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
    3238:	4770      	bx	lr

0000323a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
    323a:	4770      	bx	lr

0000323c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
    323c:	4770      	bx	lr
	...

00003240 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
    3240:	2800      	cmp	r0, #0
    3242:	d005      	beq.n	3250 <reg_wizchip_cs_cbfunc+0x10>
    3244:	2900      	cmp	r1, #0
    3246:	d003      	beq.n	3250 <reg_wizchip_cs_cbfunc+0x10>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
    3248:	4b04      	ldr	r3, [pc, #16]	; (325c <reg_wizchip_cs_cbfunc+0x1c>)
    324a:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
    324c:	6199      	str	r1, [r3, #24]
   }
}
    324e:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
    3250:	4b02      	ldr	r3, [pc, #8]	; (325c <reg_wizchip_cs_cbfunc+0x1c>)
    3252:	4a03      	ldr	r2, [pc, #12]	; (3260 <reg_wizchip_cs_cbfunc+0x20>)
    3254:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
    3256:	4a03      	ldr	r2, [pc, #12]	; (3264 <reg_wizchip_cs_cbfunc+0x24>)
    3258:	619a      	str	r2, [r3, #24]
    325a:	e7f8      	b.n	324e <reg_wizchip_cs_cbfunc+0xe>
    325c:	2000002c 	.word	0x2000002c
    3260:	00003227 	.word	0x00003227
    3264:	00003229 	.word	0x00003229

00003268 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    3268:	4b08      	ldr	r3, [pc, #32]	; (328c <reg_wizchip_spi_cbfunc+0x24>)
    326a:	881b      	ldrh	r3, [r3, #0]
    326c:	059b      	lsls	r3, r3, #22
    326e:	d5fb      	bpl.n	3268 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
    3270:	2800      	cmp	r0, #0
    3272:	d005      	beq.n	3280 <reg_wizchip_spi_cbfunc+0x18>
    3274:	2900      	cmp	r1, #0
    3276:	d003      	beq.n	3280 <reg_wizchip_spi_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
    3278:	4b04      	ldr	r3, [pc, #16]	; (328c <reg_wizchip_spi_cbfunc+0x24>)
    327a:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
    327c:	6219      	str	r1, [r3, #32]
   }
}
    327e:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
    3280:	4b02      	ldr	r3, [pc, #8]	; (328c <reg_wizchip_spi_cbfunc+0x24>)
    3282:	4a03      	ldr	r2, [pc, #12]	; (3290 <reg_wizchip_spi_cbfunc+0x28>)
    3284:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
    3286:	4a03      	ldr	r2, [pc, #12]	; (3294 <reg_wizchip_spi_cbfunc+0x2c>)
    3288:	621a      	str	r2, [r3, #32]
    328a:	e7f8      	b.n	327e <reg_wizchip_spi_cbfunc+0x16>
    328c:	2000002c 	.word	0x2000002c
    3290:	00003235 	.word	0x00003235
    3294:	00003239 	.word	0x00003239

00003298 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    3298:	4b08      	ldr	r3, [pc, #32]	; (32bc <reg_wizchip_spiburst_cbfunc+0x24>)
    329a:	881b      	ldrh	r3, [r3, #0]
    329c:	059b      	lsls	r3, r3, #22
    329e:	d5fb      	bpl.n	3298 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
    32a0:	2800      	cmp	r0, #0
    32a2:	d005      	beq.n	32b0 <reg_wizchip_spiburst_cbfunc+0x18>
    32a4:	2900      	cmp	r1, #0
    32a6:	d003      	beq.n	32b0 <reg_wizchip_spiburst_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
    32a8:	4b04      	ldr	r3, [pc, #16]	; (32bc <reg_wizchip_spiburst_cbfunc+0x24>)
    32aa:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
    32ac:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
    32ae:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
    32b0:	4b02      	ldr	r3, [pc, #8]	; (32bc <reg_wizchip_spiburst_cbfunc+0x24>)
    32b2:	4a03      	ldr	r2, [pc, #12]	; (32c0 <reg_wizchip_spiburst_cbfunc+0x28>)
    32b4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
    32b6:	4a03      	ldr	r2, [pc, #12]	; (32c4 <reg_wizchip_spiburst_cbfunc+0x2c>)
    32b8:	629a      	str	r2, [r3, #40]	; 0x28
    32ba:	e7f8      	b.n	32ae <reg_wizchip_spiburst_cbfunc+0x16>
    32bc:	2000002c 	.word	0x2000002c
    32c0:	0000323b 	.word	0x0000323b
    32c4:	0000323d 	.word	0x0000323d

000032c8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
    32c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ca:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
    32cc:	2790      	movs	r7, #144	; 0x90
    32ce:	013f      	lsls	r7, r7, #4
    32d0:	2206      	movs	r2, #6
    32d2:	a901      	add	r1, sp, #4
    32d4:	0038      	movs	r0, r7
    32d6:	f7ff fe3b 	bl	2f50 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
    32da:	2680      	movs	r6, #128	; 0x80
    32dc:	0076      	lsls	r6, r6, #1
    32de:	2204      	movs	r2, #4
    32e0:	a905      	add	r1, sp, #20
    32e2:	0030      	movs	r0, r6
    32e4:	f7ff fe34 	bl	2f50 <WIZCHIP_READ_BUF>
    32e8:	25a0      	movs	r5, #160	; 0xa0
    32ea:	00ed      	lsls	r5, r5, #3
    32ec:	2204      	movs	r2, #4
    32ee:	a904      	add	r1, sp, #16
    32f0:	0028      	movs	r0, r5
    32f2:	f7ff fe2d 	bl	2f50 <WIZCHIP_READ_BUF>
    32f6:	24f0      	movs	r4, #240	; 0xf0
    32f8:	0124      	lsls	r4, r4, #4
    32fa:	2204      	movs	r2, #4
    32fc:	a903      	add	r1, sp, #12
    32fe:	0020      	movs	r0, r4
    3300:	f7ff fe26 	bl	2f50 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
    3304:	2180      	movs	r1, #128	; 0x80
    3306:	2000      	movs	r0, #0
    3308:	f7ff fdf2 	bl	2ef0 <WIZCHIP_WRITE>
   getMR(); // for delay
    330c:	2000      	movs	r0, #0
    330e:	f7ff fdbd 	bl	2e8c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
    3312:	2206      	movs	r2, #6
    3314:	a901      	add	r1, sp, #4
    3316:	0038      	movs	r0, r7
    3318:	f7ff fe5a 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
    331c:	2204      	movs	r2, #4
    331e:	a905      	add	r1, sp, #20
    3320:	0030      	movs	r0, r6
    3322:	f7ff fe55 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
    3326:	2204      	movs	r2, #4
    3328:	a904      	add	r1, sp, #16
    332a:	0028      	movs	r0, r5
    332c:	f7ff fe50 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
    3330:	2204      	movs	r2, #4
    3332:	a903      	add	r1, sp, #12
    3334:	0020      	movs	r0, r4
    3336:	f7ff fe4b 	bl	2fd0 <WIZCHIP_WRITE_BUF>
}
    333a:	b007      	add	sp, #28
    333c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000333e <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
    333e:	b570      	push	{r4, r5, r6, lr}
    3340:	0006      	movs	r6, r0
    3342:	000d      	movs	r5, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
    3344:	f7ff ffc0 	bl	32c8 <wizchip_sw_reset>
   if(txsize)
    3348:	2e00      	cmp	r6, #0
    334a:	d01b      	beq.n	3384 <wizchip_init+0x46>
    334c:	2200      	movs	r2, #0
    334e:	2300      	movs	r3, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    3350:	2b07      	cmp	r3, #7
    3352:	dc07      	bgt.n	3364 <wizchip_init+0x26>
		{
			tmp += txsize[i];
    3354:	5cf1      	ldrb	r1, [r6, r3]
    3356:	188a      	adds	r2, r1, r2
    3358:	b252      	sxtb	r2, r2

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    335a:	2a10      	cmp	r2, #16
    335c:	dc34      	bgt.n	33c8 <wizchip_init+0x8a>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    335e:	3301      	adds	r3, #1
    3360:	b25b      	sxtb	r3, r3
    3362:	e7f5      	b.n	3350 <wizchip_init+0x12>
    3364:	2400      	movs	r4, #0
    3366:	e00b      	b.n	3380 <wizchip_init+0x42>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
    3368:	00a0      	lsls	r0, r4, #2
    336a:	3001      	adds	r0, #1
    336c:	00c0      	lsls	r0, r0, #3
    336e:	23f8      	movs	r3, #248	; 0xf8
    3370:	015b      	lsls	r3, r3, #5
    3372:	469c      	mov	ip, r3
    3374:	4460      	add	r0, ip
    3376:	5d31      	ldrb	r1, [r6, r4]
    3378:	f7ff fdba 	bl	2ef0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    337c:	3401      	adds	r4, #1
    337e:	b264      	sxtb	r4, r4
    3380:	2c07      	cmp	r4, #7
    3382:	ddf1      	ble.n	3368 <wizchip_init+0x2a>
#endif
		}	
   }

   if(rxsize)
    3384:	2d00      	cmp	r5, #0
    3386:	d00b      	beq.n	33a0 <wizchip_init+0x62>
    3388:	2200      	movs	r2, #0
    338a:	2300      	movs	r3, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    338c:	2b07      	cmp	r3, #7
    338e:	dc09      	bgt.n	33a4 <wizchip_init+0x66>
		{
			tmp += rxsize[i];
    3390:	5ce9      	ldrb	r1, [r5, r3]
    3392:	188a      	adds	r2, r1, r2
    3394:	b252      	sxtb	r2, r2
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    3396:	2a10      	cmp	r2, #16
    3398:	dc19      	bgt.n	33ce <wizchip_init+0x90>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    339a:	3301      	adds	r3, #1
    339c:	b25b      	sxtb	r3, r3
    339e:	e7f5      	b.n	338c <wizchip_init+0x4e>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    33a0:	2000      	movs	r0, #0
    33a2:	e010      	b.n	33c6 <wizchip_init+0x88>
    33a4:	2400      	movs	r4, #0
    33a6:	e00b      	b.n	33c0 <wizchip_init+0x82>
			setSn_RXBUF_SIZE(i, rxsize[i]);
    33a8:	00a0      	lsls	r0, r4, #2
    33aa:	3001      	adds	r0, #1
    33ac:	00c0      	lsls	r0, r0, #3
    33ae:	23f0      	movs	r3, #240	; 0xf0
    33b0:	015b      	lsls	r3, r3, #5
    33b2:	469c      	mov	ip, r3
    33b4:	4460      	add	r0, ip
    33b6:	5d29      	ldrb	r1, [r5, r4]
    33b8:	f7ff fd9a 	bl	2ef0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    33bc:	3401      	adds	r4, #1
    33be:	b264      	sxtb	r4, r4
    33c0:	2c07      	cmp	r4, #7
    33c2:	ddf1      	ble.n	33a8 <wizchip_init+0x6a>
   return 0;
    33c4:	2000      	movs	r0, #0
}
    33c6:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
    33c8:	2001      	movs	r0, #1
    33ca:	4240      	negs	r0, r0
    33cc:	e7fb      	b.n	33c6 <wizchip_init+0x88>
			if(tmp > 16) return -1;
    33ce:	2001      	movs	r0, #1
    33d0:	4240      	negs	r0, r0
    33d2:	e7f8      	b.n	33c6 <wizchip_init+0x88>

000033d4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
    33d4:	b510      	push	{r4, lr}
   uint8_t tmp = getPHYCFGR();
    33d6:	24b8      	movs	r4, #184	; 0xb8
    33d8:	01a4      	lsls	r4, r4, #6
    33da:	0020      	movs	r0, r4
    33dc:	f7ff fd56 	bl	2e8c <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
    33e0:	217f      	movs	r1, #127	; 0x7f
    33e2:	4001      	ands	r1, r0
   setPHYCFGR(tmp);
    33e4:	0020      	movs	r0, r4
    33e6:	f7ff fd83 	bl	2ef0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
    33ea:	0020      	movs	r0, r4
    33ec:	f7ff fd4e 	bl	2e8c <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
    33f0:	2180      	movs	r1, #128	; 0x80
    33f2:	4249      	negs	r1, r1
    33f4:	4301      	orrs	r1, r0
    33f6:	b2c9      	uxtb	r1, r1
   setPHYCFGR(tmp);
    33f8:	0020      	movs	r0, r4
    33fa:	f7ff fd79 	bl	2ef0 <WIZCHIP_WRITE>
}
    33fe:	bd10      	pop	{r4, pc}

00003400 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    3400:	b510      	push	{r4, lr}
    3402:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
    3404:	2206      	movs	r2, #6
    3406:	0001      	movs	r1, r0
    3408:	2090      	movs	r0, #144	; 0x90
    340a:	0100      	lsls	r0, r0, #4
    340c:	f7ff fde0 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    3410:	0021      	movs	r1, r4
    3412:	310e      	adds	r1, #14
    3414:	2204      	movs	r2, #4
    3416:	2080      	movs	r0, #128	; 0x80
    3418:	0040      	lsls	r0, r0, #1
    341a:	f7ff fdd9 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    341e:	0021      	movs	r1, r4
    3420:	310a      	adds	r1, #10
    3422:	2204      	movs	r2, #4
    3424:	20a0      	movs	r0, #160	; 0xa0
    3426:	00c0      	lsls	r0, r0, #3
    3428:	f7ff fdd2 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    342c:	1da1      	adds	r1, r4, #6
    342e:	2204      	movs	r2, #4
    3430:	20f0      	movs	r0, #240	; 0xf0
    3432:	0100      	lsls	r0, r0, #4
    3434:	f7ff fdcc 	bl	2fd0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    3438:	7ca2      	ldrb	r2, [r4, #18]
    343a:	4b06      	ldr	r3, [pc, #24]	; (3454 <wizchip_setnetinfo+0x54>)
    343c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
    343e:	7ce2      	ldrb	r2, [r4, #19]
    3440:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
    3442:	7d22      	ldrb	r2, [r4, #20]
    3444:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
    3446:	7d62      	ldrb	r2, [r4, #21]
    3448:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
    344a:	7da2      	ldrb	r2, [r4, #22]
    344c:	4b02      	ldr	r3, [pc, #8]	; (3458 <wizchip_setnetinfo+0x58>)
    344e:	701a      	strb	r2, [r3, #0]
}
    3450:	bd10      	pop	{r4, pc}
    3452:	46c0      	nop			; (mov r8, r8)
    3454:	20000ad8 	.word	0x20000ad8
    3458:	20000ad4 	.word	0x20000ad4

0000345c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    345c:	b510      	push	{r4, lr}
    345e:	0004      	movs	r4, r0
   getSHAR(pnetinfo->mac);
    3460:	2206      	movs	r2, #6
    3462:	0001      	movs	r1, r0
    3464:	2090      	movs	r0, #144	; 0x90
    3466:	0100      	lsls	r0, r0, #4
    3468:	f7ff fd72 	bl	2f50 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    346c:	0021      	movs	r1, r4
    346e:	310e      	adds	r1, #14
    3470:	2204      	movs	r2, #4
    3472:	2080      	movs	r0, #128	; 0x80
    3474:	0040      	lsls	r0, r0, #1
    3476:	f7ff fd6b 	bl	2f50 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    347a:	0021      	movs	r1, r4
    347c:	310a      	adds	r1, #10
    347e:	2204      	movs	r2, #4
    3480:	20a0      	movs	r0, #160	; 0xa0
    3482:	00c0      	lsls	r0, r0, #3
    3484:	f7ff fd64 	bl	2f50 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    3488:	1da1      	adds	r1, r4, #6
    348a:	2204      	movs	r2, #4
    348c:	20f0      	movs	r0, #240	; 0xf0
    348e:	0100      	lsls	r0, r0, #4
    3490:	f7ff fd5e 	bl	2f50 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    3494:	4b06      	ldr	r3, [pc, #24]	; (34b0 <wizchip_getnetinfo+0x54>)
    3496:	781a      	ldrb	r2, [r3, #0]
    3498:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
    349a:	785a      	ldrb	r2, [r3, #1]
    349c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
    349e:	789a      	ldrb	r2, [r3, #2]
    34a0:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
    34a2:	78db      	ldrb	r3, [r3, #3]
    34a4:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
    34a6:	4b03      	ldr	r3, [pc, #12]	; (34b4 <wizchip_getnetinfo+0x58>)
    34a8:	781b      	ldrb	r3, [r3, #0]
    34aa:	75a3      	strb	r3, [r4, #22]
}
    34ac:	bd10      	pop	{r4, pc}
    34ae:	46c0      	nop			; (mov r8, r8)
    34b0:	20000ad8 	.word	0x20000ad8
    34b4:	20000ad4 	.word	0x20000ad4

000034b8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
    34b8:	b510      	push	{r4, lr}
    34ba:	0004      	movs	r4, r0
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    34bc:	233a      	movs	r3, #58	; 0x3a
    34be:	0002      	movs	r2, r0
    34c0:	439a      	bics	r2, r3
    34c2:	d109      	bne.n	34d8 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
    34c4:	2000      	movs	r0, #0
    34c6:	f7ff fce1 	bl	2e8c <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
    34ca:	4304      	orrs	r4, r0
    34cc:	b2e1      	uxtb	r1, r4
   setMR(tmp);
    34ce:	2000      	movs	r0, #0
    34d0:	f7ff fd0e 	bl	2ef0 <WIZCHIP_WRITE>
   return 0;
    34d4:	2000      	movs	r0, #0
}
    34d6:	bd10      	pop	{r4, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    34d8:	2001      	movs	r0, #1
    34da:	4240      	negs	r0, r0
    34dc:	e7fb      	b.n	34d6 <wizchip_setnetmode+0x1e>

000034de <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
    34de:	b510      	push	{r4, lr}
   return (netmode_type) getMR();
    34e0:	2000      	movs	r0, #0
    34e2:	f7ff fcd3 	bl	2e8c <WIZCHIP_READ>
}
    34e6:	bd10      	pop	{r4, pc}

000034e8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
    34e8:	b510      	push	{r4, lr}
    34ea:	0004      	movs	r4, r0
   setRCR(nettime->retry_cnt);
    34ec:	7801      	ldrb	r1, [r0, #0]
    34ee:	20d8      	movs	r0, #216	; 0xd8
    34f0:	0140      	lsls	r0, r0, #5
    34f2:	f7ff fcfd 	bl	2ef0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
    34f6:	8861      	ldrh	r1, [r4, #2]
    34f8:	0a09      	lsrs	r1, r1, #8
    34fa:	20c8      	movs	r0, #200	; 0xc8
    34fc:	0140      	lsls	r0, r0, #5
    34fe:	f7ff fcf7 	bl	2ef0 <WIZCHIP_WRITE>
    3502:	78a1      	ldrb	r1, [r4, #2]
    3504:	20d0      	movs	r0, #208	; 0xd0
    3506:	0140      	lsls	r0, r0, #5
    3508:	f7ff fcf2 	bl	2ef0 <WIZCHIP_WRITE>
}
    350c:	bd10      	pop	{r4, pc}

0000350e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
    350e:	b570      	push	{r4, r5, r6, lr}
    3510:	0005      	movs	r5, r0
   nettime->retry_cnt = getRCR();
    3512:	20d8      	movs	r0, #216	; 0xd8
    3514:	0140      	lsls	r0, r0, #5
    3516:	f7ff fcb9 	bl	2e8c <WIZCHIP_READ>
    351a:	7028      	strb	r0, [r5, #0]
   nettime->time_100us = getRTR();
    351c:	20c8      	movs	r0, #200	; 0xc8
    351e:	0140      	lsls	r0, r0, #5
    3520:	f7ff fcb4 	bl	2e8c <WIZCHIP_READ>
    3524:	b280      	uxth	r0, r0
    3526:	0200      	lsls	r0, r0, #8
    3528:	b284      	uxth	r4, r0
    352a:	20d0      	movs	r0, #208	; 0xd0
    352c:	0140      	lsls	r0, r0, #5
    352e:	f7ff fcad 	bl	2e8c <WIZCHIP_READ>
    3532:	b280      	uxth	r0, r0
    3534:	1824      	adds	r4, r4, r0
    3536:	806c      	strh	r4, [r5, #2]
}
    3538:	bd70      	pop	{r4, r5, r6, pc}
	...

0000353c <ctlnetwork>:
{
    353c:	b510      	push	{r4, lr}
    353e:	000c      	movs	r4, r1
   switch(cntype)
    3540:	2805      	cmp	r0, #5
    3542:	d820      	bhi.n	3586 <ctlnetwork+0x4a>
    3544:	0080      	lsls	r0, r0, #2
    3546:	4b11      	ldr	r3, [pc, #68]	; (358c <ctlnetwork+0x50>)
    3548:	581b      	ldr	r3, [r3, r0]
    354a:	469f      	mov	pc, r3
         wizchip_setnetinfo((wiz_NetInfo*)arg);
    354c:	0008      	movs	r0, r1
    354e:	f7ff ff57 	bl	3400 <wizchip_setnetinfo>
   return 0;
    3552:	2000      	movs	r0, #0
}
    3554:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
    3556:	0008      	movs	r0, r1
    3558:	f7ff ff80 	bl	345c <wizchip_getnetinfo>
   return 0;
    355c:	2000      	movs	r0, #0
         break;
    355e:	e7f9      	b.n	3554 <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
    3560:	7808      	ldrb	r0, [r1, #0]
    3562:	f7ff ffa9 	bl	34b8 <wizchip_setnetmode>
    3566:	e7f5      	b.n	3554 <ctlnetwork+0x18>
         *(netmode_type*)arg = wizchip_getnetmode();
    3568:	f7ff ffb9 	bl	34de <wizchip_getnetmode>
    356c:	7020      	strb	r0, [r4, #0]
   return 0;
    356e:	2000      	movs	r0, #0
         break;
    3570:	e7f0      	b.n	3554 <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
    3572:	0008      	movs	r0, r1
    3574:	f7ff ffb8 	bl	34e8 <wizchip_settimeout>
   return 0;
    3578:	2000      	movs	r0, #0
         break;
    357a:	e7eb      	b.n	3554 <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
    357c:	0008      	movs	r0, r1
    357e:	f7ff ffc6 	bl	350e <wizchip_gettimeout>
   return 0;
    3582:	2000      	movs	r0, #0
         break;
    3584:	e7e6      	b.n	3554 <ctlnetwork+0x18>
         return -1;
    3586:	2001      	movs	r0, #1
    3588:	4240      	negs	r0, r0
    358a:	e7e3      	b.n	3554 <ctlnetwork+0x18>
    358c:	0000f3dc 	.word	0x0000f3dc

00003590 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3590:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
    3592:	021b      	lsls	r3, r3, #8
    3594:	7800      	ldrb	r0, [r0, #0]
    3596:	4318      	orrs	r0, r3
	return rv;
}
    3598:	4770      	bx	lr

0000359a <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    359a:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
    359c:	021b      	lsls	r3, r3, #8
    359e:	7882      	ldrb	r2, [r0, #2]
    35a0:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    35a2:	021b      	lsls	r3, r3, #8
    35a4:	7842      	ldrb	r2, [r0, #1]
    35a6:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    35a8:	021b      	lsls	r3, r3, #8
    35aa:	7800      	ldrb	r0, [r0, #0]
    35ac:	4318      	orrs	r0, r3
	return rv;
}
    35ae:	4770      	bx	lr

000035b0 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    35b0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
    35b2:	0a09      	lsrs	r1, r1, #8
    35b4:	7041      	strb	r1, [r0, #1]
}
    35b6:	4770      	bx	lr

000035b8 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    35b8:	7001      	strb	r1, [r0, #0]
    35ba:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
    35bc:	7043      	strb	r3, [r0, #1]
    35be:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
    35c0:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
    35c2:	0e09      	lsrs	r1, r1, #24
    35c4:	70c1      	strb	r1, [r0, #3]
}
    35c6:	4770      	bx	lr

000035c8 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
    35c8:	2000      	movs	r0, #0
    35ca:	4770      	bx	lr

000035cc <dbc_2nd>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
    35cc:	2000      	movs	r0, #0
    35ce:	4770      	bx	lr

000035d0 <clst2sect>:
static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
    35d0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    35d2:	6943      	ldr	r3, [r0, #20]
    35d4:	3b02      	subs	r3, #2
    35d6:	4299      	cmp	r1, r3
    35d8:	d204      	bcs.n	35e4 <clst2sect+0x14>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    35da:	6a83      	ldr	r3, [r0, #40]	; 0x28
    35dc:	8940      	ldrh	r0, [r0, #10]
    35de:	4348      	muls	r0, r1
    35e0:	1818      	adds	r0, r3, r0
}
    35e2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    35e4:	2000      	movs	r0, #0
    35e6:	e7fc      	b.n	35e2 <clst2sect+0x12>

000035e8 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
    35e8:	b570      	push	{r4, r5, r6, lr}
    35ea:	0006      	movs	r6, r0
    35ec:	000d      	movs	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    35ee:	0008      	movs	r0, r1
    35f0:	301a      	adds	r0, #26
    35f2:	f7ff ffcd 	bl	3590 <ld_word>
    35f6:	0004      	movs	r4, r0
	if (fs->fs_type == FS_FAT32) {
    35f8:	7833      	ldrb	r3, [r6, #0]
    35fa:	2b03      	cmp	r3, #3
    35fc:	d000      	beq.n	3600 <ld_clust+0x18>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
    35fe:	bd70      	pop	{r4, r5, r6, pc}
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    3600:	0028      	movs	r0, r5
    3602:	3014      	adds	r0, #20
    3604:	f7ff ffc4 	bl	3590 <ld_word>
    3608:	0400      	lsls	r0, r0, #16
    360a:	4320      	orrs	r0, r4
	return cl;
    360c:	e7f7      	b.n	35fe <ld_clust+0x16>

0000360e <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
    360e:	b570      	push	{r4, r5, r6, lr}
    3610:	0006      	movs	r6, r0
    3612:	000c      	movs	r4, r1
    3614:	0015      	movs	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
    3616:	b291      	uxth	r1, r2
    3618:	0020      	movs	r0, r4
    361a:	301a      	adds	r0, #26
    361c:	f7ff ffc8 	bl	35b0 <st_word>
	if (fs->fs_type == FS_FAT32) {
    3620:	7833      	ldrb	r3, [r6, #0]
    3622:	2b03      	cmp	r3, #3
    3624:	d000      	beq.n	3628 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
    3626:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    3628:	0c29      	lsrs	r1, r5, #16
    362a:	0020      	movs	r0, r4
    362c:	3014      	adds	r0, #20
    362e:	f7ff ffbf 	bl	35b0 <st_word>
}
    3632:	e7f8      	b.n	3626 <st_clust+0x18>

00003634 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
    3634:	b510      	push	{r4, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
    3636:	6804      	ldr	r4, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
    3638:	2c00      	cmp	r4, #0
    363a:	d01e      	beq.n	367a <get_ldnumber+0x46>
    363c:	0022      	movs	r2, r4
	do {					/* Find a colon in the path */
		tc = *tt++;
    363e:	1c51      	adds	r1, r2, #1
    3640:	7813      	ldrb	r3, [r2, #0]
	} while (!IsTerminator(tc) && tc != ':');
    3642:	2b20      	cmp	r3, #32
    3644:	d902      	bls.n	364c <get_ldnumber+0x18>
		tc = *tt++;
    3646:	000a      	movs	r2, r1
	} while (!IsTerminator(tc) && tc != ':');
    3648:	2b3a      	cmp	r3, #58	; 0x3a
    364a:	d1f8      	bne.n	363e <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
    364c:	2b3a      	cmp	r3, #58	; 0x3a
    364e:	d002      	beq.n	3656 <get_ldnumber+0x22>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
    3650:	2300      	movs	r3, #0
}
    3652:	0018      	movs	r0, r3
    3654:	bd10      	pop	{r4, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    3656:	7823      	ldrb	r3, [r4, #0]
    3658:	001a      	movs	r2, r3
    365a:	3a30      	subs	r2, #48	; 0x30
    365c:	b2d2      	uxtb	r2, r2
    365e:	2a09      	cmp	r2, #9
    3660:	d806      	bhi.n	3670 <get_ldnumber+0x3c>
    3662:	3402      	adds	r4, #2
    3664:	42a1      	cmp	r1, r4
    3666:	d001      	beq.n	366c <get_ldnumber+0x38>
		i = FF_VOLUMES;
    3668:	2301      	movs	r3, #1
    366a:	e002      	b.n	3672 <get_ldnumber+0x3e>
			i = (int)*tp - '0';	/* Get the LD number */
    366c:	3b30      	subs	r3, #48	; 0x30
    366e:	e000      	b.n	3672 <get_ldnumber+0x3e>
		i = FF_VOLUMES;
    3670:	2301      	movs	r3, #1
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    3672:	2b00      	cmp	r3, #0
    3674:	dc04      	bgt.n	3680 <get_ldnumber+0x4c>
			*path = tt;		/* Snip the drive prefix off */
    3676:	6001      	str	r1, [r0, #0]
    3678:	e7eb      	b.n	3652 <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
    367a:	2301      	movs	r3, #1
    367c:	425b      	negs	r3, r3
    367e:	e7e8      	b.n	3652 <get_ldnumber+0x1e>
	int vol = -1;
    3680:	2301      	movs	r3, #1
    3682:	425b      	negs	r3, r3
    3684:	e7e5      	b.n	3652 <get_ldnumber+0x1e>

00003686 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
    3686:	b570      	push	{r4, r5, r6, lr}
    3688:	0004      	movs	r4, r0
    368a:	000d      	movs	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    368c:	2800      	cmp	r0, #0
    368e:	d018      	beq.n	36c2 <validate+0x3c>
    3690:	6803      	ldr	r3, [r0, #0]
    3692:	2b00      	cmp	r3, #0
    3694:	d017      	beq.n	36c6 <validate+0x40>
    3696:	781a      	ldrb	r2, [r3, #0]
    3698:	2a00      	cmp	r2, #0
    369a:	d105      	bne.n	36a8 <validate+0x22>
	FRESULT res = FR_INVALID_OBJECT;
    369c:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    369e:	2800      	cmp	r0, #0
    36a0:	d115      	bne.n	36ce <validate+0x48>
    36a2:	6823      	ldr	r3, [r4, #0]
    36a4:	602b      	str	r3, [r5, #0]
	return res;
}
    36a6:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    36a8:	8881      	ldrh	r1, [r0, #4]
    36aa:	88da      	ldrh	r2, [r3, #6]
    36ac:	4291      	cmp	r1, r2
    36ae:	d001      	beq.n	36b4 <validate+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
    36b0:	2009      	movs	r0, #9
    36b2:	e7f4      	b.n	369e <validate+0x18>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    36b4:	7858      	ldrb	r0, [r3, #1]
    36b6:	f001 fa0f 	bl	4ad8 <disk_status>
    36ba:	07c3      	lsls	r3, r0, #31
    36bc:	d505      	bpl.n	36ca <validate+0x44>
	FRESULT res = FR_INVALID_OBJECT;
    36be:	2009      	movs	r0, #9
    36c0:	e7ed      	b.n	369e <validate+0x18>
    36c2:	2009      	movs	r0, #9
    36c4:	e7eb      	b.n	369e <validate+0x18>
    36c6:	2009      	movs	r0, #9
    36c8:	e7e9      	b.n	369e <validate+0x18>
			res = FR_OK;
    36ca:	2000      	movs	r0, #0
    36cc:	e7e7      	b.n	369e <validate+0x18>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    36ce:	2300      	movs	r3, #0
    36d0:	e7e8      	b.n	36a4 <validate+0x1e>

000036d2 <sync_window>:
{
    36d2:	b570      	push	{r4, r5, r6, lr}
    36d4:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
    36d6:	7903      	ldrb	r3, [r0, #4]
    36d8:	2b00      	cmp	r3, #0
    36da:	d101      	bne.n	36e0 <sync_window+0xe>
	FRESULT res = FR_OK;
    36dc:	2000      	movs	r0, #0
}
    36de:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    36e0:	0005      	movs	r5, r0
    36e2:	3530      	adds	r5, #48	; 0x30
    36e4:	7840      	ldrb	r0, [r0, #1]
    36e6:	2301      	movs	r3, #1
    36e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    36ea:	0029      	movs	r1, r5
    36ec:	f001 fabe 	bl	4c6c <disk_write>
    36f0:	2800      	cmp	r0, #0
    36f2:	d114      	bne.n	371e <sync_window+0x4c>
			fs->wflag = 0;	/* Clear window dirty flag */
    36f4:	2300      	movs	r3, #0
    36f6:	7123      	strb	r3, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    36f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    36fa:	6a23      	ldr	r3, [r4, #32]
    36fc:	1ad3      	subs	r3, r2, r3
    36fe:	69a1      	ldr	r1, [r4, #24]
    3700:	428b      	cmp	r3, r1
    3702:	d20e      	bcs.n	3722 <sync_window+0x50>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    3704:	78e3      	ldrb	r3, [r4, #3]
    3706:	2b02      	cmp	r3, #2
    3708:	d001      	beq.n	370e <sync_window+0x3c>
	FRESULT res = FR_OK;
    370a:	2000      	movs	r0, #0
    370c:	e7e7      	b.n	36de <sync_window+0xc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    370e:	1852      	adds	r2, r2, r1
    3710:	7860      	ldrb	r0, [r4, #1]
    3712:	3b01      	subs	r3, #1
    3714:	0029      	movs	r1, r5
    3716:	f001 faa9 	bl	4c6c <disk_write>
	FRESULT res = FR_OK;
    371a:	2000      	movs	r0, #0
    371c:	e7df      	b.n	36de <sync_window+0xc>
			res = FR_DISK_ERR;
    371e:	2001      	movs	r0, #1
    3720:	e7dd      	b.n	36de <sync_window+0xc>
	FRESULT res = FR_OK;
    3722:	2000      	movs	r0, #0
    3724:	e7db      	b.n	36de <sync_window+0xc>

00003726 <move_window>:
{
    3726:	b570      	push	{r4, r5, r6, lr}
    3728:	0005      	movs	r5, r0
    372a:	000e      	movs	r6, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
    372c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    372e:	428b      	cmp	r3, r1
    3730:	d013      	beq.n	375a <move_window+0x34>
		res = sync_window(fs);		/* Flush the window */
    3732:	f7ff ffce 	bl	36d2 <sync_window>
    3736:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
    3738:	d001      	beq.n	373e <move_window+0x18>
}
    373a:	0020      	movs	r0, r4
    373c:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    373e:	0029      	movs	r1, r5
    3740:	3130      	adds	r1, #48	; 0x30
    3742:	7868      	ldrb	r0, [r5, #1]
    3744:	2301      	movs	r3, #1
    3746:	0032      	movs	r2, r6
    3748:	f001 fa58 	bl	4bfc <disk_read>
    374c:	2800      	cmp	r0, #0
    374e:	d002      	beq.n	3756 <move_window+0x30>
				res = FR_DISK_ERR;
    3750:	3401      	adds	r4, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
    3752:	2601      	movs	r6, #1
    3754:	4276      	negs	r6, r6
			fs->winsect = sect;
    3756:	62ee      	str	r6, [r5, #44]	; 0x2c
    3758:	e7ef      	b.n	373a <move_window+0x14>
	FRESULT res = FR_OK;
    375a:	2400      	movs	r4, #0
    375c:	e7ed      	b.n	373a <move_window+0x14>
	...

00003760 <check_fs>:
{
    3760:	b570      	push	{r4, r5, r6, lr}
    3762:	0004      	movs	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    3764:	2300      	movs	r3, #0
    3766:	7103      	strb	r3, [r0, #4]
    3768:	3b01      	subs	r3, #1
    376a:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    376c:	f7ff ffdb 	bl	3726 <move_window>
    3770:	2800      	cmp	r0, #0
    3772:	d001      	beq.n	3778 <check_fs+0x18>
    3774:	2004      	movs	r0, #4
}
    3776:	bd70      	pop	{r4, r5, r6, pc}
	sign = ld_word(fs->win + BS_55AA);
    3778:	4b2d      	ldr	r3, [pc, #180]	; (3830 <check_fs+0xd0>)
    377a:	18e0      	adds	r0, r4, r3
    377c:	f7ff ff08 	bl	3590 <ld_word>
    3780:	0005      	movs	r5, r0
	b = fs->win[BS_JmpBoot];
    3782:	2330      	movs	r3, #48	; 0x30
    3784:	5ce3      	ldrb	r3, [r4, r3]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
    3786:	2beb      	cmp	r3, #235	; 0xeb
    3788:	d008      	beq.n	379c <check_fs+0x3c>
    378a:	2be9      	cmp	r3, #233	; 0xe9
    378c:	d006      	beq.n	379c <check_fs+0x3c>
    378e:	2be8      	cmp	r3, #232	; 0xe8
    3790:	d004      	beq.n	379c <check_fs+0x3c>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    3792:	4b28      	ldr	r3, [pc, #160]	; (3834 <check_fs+0xd4>)
    3794:	429d      	cmp	r5, r3
    3796:	d048      	beq.n	382a <check_fs+0xca>
    3798:	2003      	movs	r0, #3
    379a:	e7ec      	b.n	3776 <check_fs+0x16>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    379c:	4b25      	ldr	r3, [pc, #148]	; (3834 <check_fs+0xd4>)
    379e:	429d      	cmp	r5, r3
    37a0:	d039      	beq.n	3816 <check_fs+0xb6>
		w = ld_word(fs->win + BPB_BytsPerSec);
    37a2:	0020      	movs	r0, r4
    37a4:	303b      	adds	r0, #59	; 0x3b
    37a6:	f7ff fef3 	bl	3590 <ld_word>
		b = fs->win[BPB_SecPerClus];
    37aa:	233d      	movs	r3, #61	; 0x3d
    37ac:	5ce1      	ldrb	r1, [r4, r3]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    37ae:	1e43      	subs	r3, r0, #1
    37b0:	4203      	tst	r3, r0
    37b2:	d1ee      	bne.n	3792 <check_fs+0x32>
    37b4:	4b20      	ldr	r3, [pc, #128]	; (3838 <check_fs+0xd8>)
    37b6:	4298      	cmp	r0, r3
    37b8:	d9eb      	bls.n	3792 <check_fs+0x32>
    37ba:	3301      	adds	r3, #1
    37bc:	4298      	cmp	r0, r3
    37be:	d8e8      	bhi.n	3792 <check_fs+0x32>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
    37c0:	2900      	cmp	r1, #0
    37c2:	d0e6      	beq.n	3792 <check_fs+0x32>
    37c4:	1e4b      	subs	r3, r1, #1
    37c6:	420b      	tst	r3, r1
    37c8:	d1e3      	bne.n	3792 <check_fs+0x32>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
    37ca:	0020      	movs	r0, r4
    37cc:	303e      	adds	r0, #62	; 0x3e
    37ce:	f7ff fedf 	bl	3590 <ld_word>
    37d2:	2800      	cmp	r0, #0
    37d4:	d0dd      	beq.n	3792 <check_fs+0x32>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
    37d6:	2340      	movs	r3, #64	; 0x40
    37d8:	5ce3      	ldrb	r3, [r4, r3]
    37da:	3b01      	subs	r3, #1
    37dc:	2b01      	cmp	r3, #1
    37de:	d8d8      	bhi.n	3792 <check_fs+0x32>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
    37e0:	0020      	movs	r0, r4
    37e2:	3041      	adds	r0, #65	; 0x41
    37e4:	f7ff fed4 	bl	3590 <ld_word>
    37e8:	2800      	cmp	r0, #0
    37ea:	d0d2      	beq.n	3792 <check_fs+0x32>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
    37ec:	0020      	movs	r0, r4
    37ee:	3043      	adds	r0, #67	; 0x43
    37f0:	f7ff fece 	bl	3590 <ld_word>
    37f4:	287f      	cmp	r0, #127	; 0x7f
    37f6:	d806      	bhi.n	3806 <check_fs+0xa6>
    37f8:	0020      	movs	r0, r4
    37fa:	3050      	adds	r0, #80	; 0x50
    37fc:	f7ff fecd 	bl	359a <ld_dword>
    3800:	4b0e      	ldr	r3, [pc, #56]	; (383c <check_fs+0xdc>)
    3802:	4298      	cmp	r0, r3
    3804:	d9c5      	bls.n	3792 <check_fs+0x32>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
    3806:	0020      	movs	r0, r4
    3808:	3046      	adds	r0, #70	; 0x46
    380a:	f7ff fec1 	bl	3590 <ld_word>
    380e:	2800      	cmp	r0, #0
    3810:	d0bf      	beq.n	3792 <check_fs+0x32>
				return 0;	/* It can be presumed an FAT VBR */
    3812:	2000      	movs	r0, #0
    3814:	e7af      	b.n	3776 <check_fs+0x16>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    3816:	2208      	movs	r2, #8
    3818:	4909      	ldr	r1, [pc, #36]	; (3840 <check_fs+0xe0>)
    381a:	0020      	movs	r0, r4
    381c:	3082      	adds	r0, #130	; 0x82
    381e:	f003 fe01 	bl	7424 <memcmp>
    3822:	2800      	cmp	r0, #0
    3824:	d1bd      	bne.n	37a2 <check_fs+0x42>
			return 0;	/* It is an FAT32 VBR */
    3826:	2000      	movs	r0, #0
    3828:	e7a5      	b.n	3776 <check_fs+0x16>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    382a:	2002      	movs	r0, #2
    382c:	e7a3      	b.n	3776 <check_fs+0x16>
    382e:	46c0      	nop			; (mov r8, r8)
    3830:	0000022e 	.word	0x0000022e
    3834:	0000aa55 	.word	0x0000aa55
    3838:	000001ff 	.word	0x000001ff
    383c:	0000ffff 	.word	0x0000ffff
    3840:	0000f474 	.word	0x0000f474

00003844 <find_volume>:
{
    3844:	b570      	push	{r4, r5, r6, lr}
    3846:	b084      	sub	sp, #16
    3848:	0005      	movs	r5, r0
    384a:	000e      	movs	r6, r1
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
    384c:	2100      	movs	r1, #0
    384e:	f7ff ff87 	bl	3760 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    3852:	2802      	cmp	r0, #2
    3854:	d016      	beq.n	3884 <find_volume+0x40>
    3856:	d82a      	bhi.n	38ae <find_volume+0x6a>
    3858:	2e00      	cmp	r6, #0
    385a:	d028      	beq.n	38ae <find_volume+0x6a>
    385c:	2400      	movs	r4, #0
    385e:	e00b      	b.n	3878 <find_volume+0x34>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
    3860:	002b      	movs	r3, r5
    3862:	3330      	adds	r3, #48	; 0x30
    3864:	0120      	lsls	r0, r4, #4
    3866:	30c7      	adds	r0, #199	; 0xc7
    3868:	30ff      	adds	r0, #255	; 0xff
    386a:	1818      	adds	r0, r3, r0
    386c:	f7ff fe95 	bl	359a <ld_dword>
    3870:	00a3      	lsls	r3, r4, #2
    3872:	466a      	mov	r2, sp
    3874:	5098      	str	r0, [r3, r2]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
    3876:	3401      	adds	r4, #1
    3878:	2c03      	cmp	r4, #3
    387a:	d9f1      	bls.n	3860 <find_volume+0x1c>
	i = part ? part - 1 : 0;		/* Table index to find first */
    387c:	2e00      	cmp	r6, #0
    387e:	d003      	beq.n	3888 <find_volume+0x44>
    3880:	1e74      	subs	r4, r6, #1
    3882:	e00d      	b.n	38a0 <find_volume+0x5c>
    3884:	2400      	movs	r4, #0
    3886:	e7f7      	b.n	3878 <find_volume+0x34>
    3888:	0034      	movs	r4, r6
    388a:	e009      	b.n	38a0 <find_volume+0x5c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    388c:	0028      	movs	r0, r5
    388e:	f7ff ff67 	bl	3760 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
    3892:	2e00      	cmp	r6, #0
    3894:	d10b      	bne.n	38ae <find_volume+0x6a>
    3896:	2801      	cmp	r0, #1
    3898:	d909      	bls.n	38ae <find_volume+0x6a>
    389a:	3401      	adds	r4, #1
    389c:	2c03      	cmp	r4, #3
    389e:	d806      	bhi.n	38ae <find_volume+0x6a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    38a0:	00a3      	lsls	r3, r4, #2
    38a2:	466a      	mov	r2, sp
    38a4:	5899      	ldr	r1, [r3, r2]
    38a6:	2900      	cmp	r1, #0
    38a8:	d1f0      	bne.n	388c <find_volume+0x48>
    38aa:	2003      	movs	r0, #3
    38ac:	e7f1      	b.n	3892 <find_volume+0x4e>
}
    38ae:	b004      	add	sp, #16
    38b0:	bd70      	pop	{r4, r5, r6, pc}
	...

000038b4 <mount_volume>:
{
    38b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38b6:	46de      	mov	lr, fp
    38b8:	4657      	mov	r7, sl
    38ba:	464e      	mov	r6, r9
    38bc:	4645      	mov	r5, r8
    38be:	b5e0      	push	{r5, r6, r7, lr}
    38c0:	b083      	sub	sp, #12
    38c2:	000e      	movs	r6, r1
    38c4:	0015      	movs	r5, r2
	*rfs = 0;
    38c6:	2300      	movs	r3, #0
    38c8:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
    38ca:	f7ff feb3 	bl	3634 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    38ce:	2800      	cmp	r0, #0
    38d0:	da00      	bge.n	38d4 <mount_volume+0x20>
    38d2:	e11e      	b.n	3b12 <mount_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    38d4:	0080      	lsls	r0, r0, #2
    38d6:	4ba0      	ldr	r3, [pc, #640]	; (3b58 <mount_volume+0x2a4>)
    38d8:	58c4      	ldr	r4, [r0, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    38da:	2c00      	cmp	r4, #0
    38dc:	d100      	bne.n	38e0 <mount_volume+0x2c>
    38de:	e120      	b.n	3b22 <mount_volume+0x26e>
	*rfs = fs;							/* Return pointer to the filesystem object */
    38e0:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    38e2:	2301      	movs	r3, #1
    38e4:	439d      	bics	r5, r3
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    38e6:	7823      	ldrb	r3, [r4, #0]
    38e8:	2b00      	cmp	r3, #0
    38ea:	d00d      	beq.n	3908 <mount_volume+0x54>
		stat = disk_status(fs->pdrv);
    38ec:	7860      	ldrb	r0, [r4, #1]
    38ee:	f001 f8f3 	bl	4ad8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    38f2:	07c3      	lsls	r3, r0, #31
    38f4:	d408      	bmi.n	3908 <mount_volume+0x54>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    38f6:	2d00      	cmp	r5, #0
    38f8:	d100      	bne.n	38fc <mount_volume+0x48>
    38fa:	e114      	b.n	3b26 <mount_volume+0x272>
    38fc:	0743      	lsls	r3, r0, #29
    38fe:	d501      	bpl.n	3904 <mount_volume+0x50>
				return FR_WRITE_PROTECTED;
    3900:	200a      	movs	r0, #10
    3902:	e107      	b.n	3b14 <mount_volume+0x260>
			return FR_OK;				/* The filesystem object is already valid */
    3904:	2000      	movs	r0, #0
    3906:	e105      	b.n	3b14 <mount_volume+0x260>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    3908:	2300      	movs	r3, #0
    390a:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    390c:	7860      	ldrb	r0, [r4, #1]
    390e:	f001 f8ed 	bl	4aec <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    3912:	07c3      	lsls	r3, r0, #31
    3914:	d501      	bpl.n	391a <mount_volume+0x66>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    3916:	2003      	movs	r0, #3
    3918:	e0fc      	b.n	3b14 <mount_volume+0x260>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    391a:	2d00      	cmp	r5, #0
    391c:	d003      	beq.n	3926 <mount_volume+0x72>
    391e:	0743      	lsls	r3, r0, #29
    3920:	d501      	bpl.n	3926 <mount_volume+0x72>
		return FR_WRITE_PROTECTED;
    3922:	200a      	movs	r0, #10
    3924:	e0f6      	b.n	3b14 <mount_volume+0x260>
	fmt = find_volume(fs, LD2PT(vol));
    3926:	2100      	movs	r1, #0
    3928:	0020      	movs	r0, r4
    392a:	f7ff ff8b 	bl	3844 <find_volume>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    392e:	2804      	cmp	r0, #4
    3930:	d100      	bne.n	3934 <mount_volume+0x80>
    3932:	e0fa      	b.n	3b2a <mount_volume+0x276>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    3934:	2801      	cmp	r0, #1
    3936:	d901      	bls.n	393c <mount_volume+0x88>
    3938:	200d      	movs	r0, #13
    393a:	e0eb      	b.n	3b14 <mount_volume+0x260>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
    393c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    393e:	0020      	movs	r0, r4
    3940:	303b      	adds	r0, #59	; 0x3b
    3942:	f7ff fe25 	bl	3590 <ld_word>
    3946:	2380      	movs	r3, #128	; 0x80
    3948:	009b      	lsls	r3, r3, #2
    394a:	4298      	cmp	r0, r3
    394c:	d001      	beq.n	3952 <mount_volume+0x9e>
    394e:	200d      	movs	r0, #13
    3950:	e0e0      	b.n	3b14 <mount_volume+0x260>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    3952:	0020      	movs	r0, r4
    3954:	3046      	adds	r0, #70	; 0x46
    3956:	f7ff fe1b 	bl	3590 <ld_word>
    395a:	4682      	mov	sl, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    395c:	2800      	cmp	r0, #0
    395e:	d104      	bne.n	396a <mount_volume+0xb6>
    3960:	0020      	movs	r0, r4
    3962:	3054      	adds	r0, #84	; 0x54
    3964:	f7ff fe19 	bl	359a <ld_dword>
    3968:	4682      	mov	sl, r0
		fs->fsize = fasize;
    396a:	4653      	mov	r3, sl
    396c:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    396e:	2340      	movs	r3, #64	; 0x40
    3970:	5ce3      	ldrb	r3, [r4, r3]
    3972:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    3974:	1e5a      	subs	r2, r3, #1
    3976:	b2d2      	uxtb	r2, r2
    3978:	2a01      	cmp	r2, #1
    397a:	d901      	bls.n	3980 <mount_volume+0xcc>
    397c:	200d      	movs	r0, #13
    397e:	e0c9      	b.n	3b14 <mount_volume+0x260>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    3980:	4652      	mov	r2, sl
    3982:	435a      	muls	r2, r3
    3984:	4691      	mov	r9, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    3986:	233d      	movs	r3, #61	; 0x3d
    3988:	5ce3      	ldrb	r3, [r4, r3]
    398a:	4698      	mov	r8, r3
    398c:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    398e:	2b00      	cmp	r3, #0
    3990:	d100      	bne.n	3994 <mount_volume+0xe0>
    3992:	e0cc      	b.n	3b2e <mount_volume+0x27a>
    3994:	3b01      	subs	r3, #1
    3996:	4642      	mov	r2, r8
    3998:	4213      	tst	r3, r2
    399a:	d001      	beq.n	39a0 <mount_volume+0xec>
    399c:	200d      	movs	r0, #13
    399e:	e0b9      	b.n	3b14 <mount_volume+0x260>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    39a0:	0020      	movs	r0, r4
    39a2:	3041      	adds	r0, #65	; 0x41
    39a4:	f7ff fdf4 	bl	3590 <ld_word>
    39a8:	0007      	movs	r7, r0
    39aa:	9001      	str	r0, [sp, #4]
    39ac:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    39ae:	0703      	lsls	r3, r0, #28
    39b0:	d000      	beq.n	39b4 <mount_volume+0x100>
    39b2:	e0be      	b.n	3b32 <mount_volume+0x27e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    39b4:	0020      	movs	r0, r4
    39b6:	3043      	adds	r0, #67	; 0x43
    39b8:	f7ff fdea 	bl	3590 <ld_word>
    39bc:	1e05      	subs	r5, r0, #0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    39be:	d104      	bne.n	39ca <mount_volume+0x116>
    39c0:	0020      	movs	r0, r4
    39c2:	3050      	adds	r0, #80	; 0x50
    39c4:	f7ff fde9 	bl	359a <ld_dword>
    39c8:	0005      	movs	r5, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
    39ca:	0020      	movs	r0, r4
    39cc:	303e      	adds	r0, #62	; 0x3e
    39ce:	f7ff fddf 	bl	3590 <ld_word>
    39d2:	4683      	mov	fp, r0
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    39d4:	2800      	cmp	r0, #0
    39d6:	d100      	bne.n	39da <mount_volume+0x126>
    39d8:	e0ad      	b.n	3b36 <mount_volume+0x282>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    39da:	464b      	mov	r3, r9
    39dc:	445b      	add	r3, fp
    39de:	093f      	lsrs	r7, r7, #4
    39e0:	b2bf      	uxth	r7, r7
    39e2:	19df      	adds	r7, r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    39e4:	42bd      	cmp	r5, r7
    39e6:	d200      	bcs.n	39ea <mount_volume+0x136>
    39e8:	e0a7      	b.n	3b3a <mount_volume+0x286>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    39ea:	1be8      	subs	r0, r5, r7
    39ec:	4641      	mov	r1, r8
    39ee:	f001 fd01 	bl	53f4 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    39f2:	2800      	cmp	r0, #0
    39f4:	d100      	bne.n	39f8 <mount_volume+0x144>
    39f6:	e0a2      	b.n	3b3e <mount_volume+0x28a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    39f8:	4b58      	ldr	r3, [pc, #352]	; (3b5c <mount_volume+0x2a8>)
    39fa:	4298      	cmp	r0, r3
    39fc:	d975      	bls.n	3aea <mount_volume+0x236>
		fmt = 0;
    39fe:	2300      	movs	r3, #0
    3a00:	4698      	mov	r8, r3
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    3a02:	4b57      	ldr	r3, [pc, #348]	; (3b60 <mount_volume+0x2ac>)
    3a04:	4298      	cmp	r0, r3
    3a06:	d801      	bhi.n	3a0c <mount_volume+0x158>
    3a08:	2302      	movs	r3, #2
    3a0a:	4698      	mov	r8, r3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    3a0c:	4b55      	ldr	r3, [pc, #340]	; (3b64 <mount_volume+0x2b0>)
    3a0e:	4298      	cmp	r0, r3
    3a10:	d801      	bhi.n	3a16 <mount_volume+0x162>
    3a12:	2301      	movs	r3, #1
    3a14:	4698      	mov	r8, r3
		if (fmt == 0) return FR_NO_FILESYSTEM;
    3a16:	4643      	mov	r3, r8
    3a18:	2b00      	cmp	r3, #0
    3a1a:	d100      	bne.n	3a1e <mount_volume+0x16a>
    3a1c:	e091      	b.n	3b42 <mount_volume+0x28e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    3a1e:	1c85      	adds	r5, r0, #2
    3a20:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
    3a22:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    3a24:	465b      	mov	r3, fp
    3a26:	18f3      	adds	r3, r6, r3
    3a28:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    3a2a:	19f7      	adds	r7, r6, r7
    3a2c:	62a7      	str	r7, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
    3a2e:	4642      	mov	r2, r8
    3a30:	2a03      	cmp	r2, #3
    3a32:	d15d      	bne.n	3af0 <mount_volume+0x23c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    3a34:	0020      	movs	r0, r4
    3a36:	305a      	adds	r0, #90	; 0x5a
    3a38:	f7ff fdaa 	bl	3590 <ld_word>
    3a3c:	2800      	cmp	r0, #0
    3a3e:	d000      	beq.n	3a42 <mount_volume+0x18e>
    3a40:	e081      	b.n	3b46 <mount_volume+0x292>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    3a42:	9b01      	ldr	r3, [sp, #4]
    3a44:	2b00      	cmp	r3, #0
    3a46:	d000      	beq.n	3a4a <mount_volume+0x196>
    3a48:	e07f      	b.n	3b4a <mount_volume+0x296>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    3a4a:	0020      	movs	r0, r4
    3a4c:	305c      	adds	r0, #92	; 0x5c
    3a4e:	f7ff fda4 	bl	359a <ld_dword>
    3a52:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    3a54:	00ad      	lsls	r5, r5, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    3a56:	4b44      	ldr	r3, [pc, #272]	; (3b68 <mount_volume+0x2b4>)
    3a58:	469c      	mov	ip, r3
    3a5a:	4465      	add	r5, ip
    3a5c:	0a6d      	lsrs	r5, r5, #9
    3a5e:	45aa      	cmp	sl, r5
    3a60:	d200      	bcs.n	3a64 <mount_volume+0x1b0>
    3a62:	e076      	b.n	3b52 <mount_volume+0x29e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    3a64:	2301      	movs	r3, #1
    3a66:	425b      	negs	r3, r3
    3a68:	6123      	str	r3, [r4, #16]
    3a6a:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
    3a6c:	3381      	adds	r3, #129	; 0x81
    3a6e:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    3a70:	4643      	mov	r3, r8
    3a72:	2b03      	cmp	r3, #3
    3a74:	d12f      	bne.n	3ad6 <mount_volume+0x222>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    3a76:	0020      	movs	r0, r4
    3a78:	3060      	adds	r0, #96	; 0x60
    3a7a:	f7ff fd89 	bl	3590 <ld_word>
    3a7e:	2801      	cmp	r0, #1
    3a80:	d129      	bne.n	3ad6 <mount_volume+0x222>
			&& move_window(fs, bsect + 1) == FR_OK)
    3a82:	1c71      	adds	r1, r6, #1
    3a84:	0020      	movs	r0, r4
    3a86:	f7ff fe4e 	bl	3726 <move_window>
    3a8a:	2800      	cmp	r0, #0
    3a8c:	d123      	bne.n	3ad6 <mount_volume+0x222>
			fs->fsi_flag = 0;
    3a8e:	2300      	movs	r3, #0
    3a90:	7163      	strb	r3, [r4, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    3a92:	4b36      	ldr	r3, [pc, #216]	; (3b6c <mount_volume+0x2b8>)
    3a94:	18e0      	adds	r0, r4, r3
    3a96:	f7ff fd7b 	bl	3590 <ld_word>
    3a9a:	4b35      	ldr	r3, [pc, #212]	; (3b70 <mount_volume+0x2bc>)
    3a9c:	4298      	cmp	r0, r3
    3a9e:	d11a      	bne.n	3ad6 <mount_volume+0x222>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    3aa0:	0020      	movs	r0, r4
    3aa2:	3030      	adds	r0, #48	; 0x30
    3aa4:	f7ff fd79 	bl	359a <ld_dword>
    3aa8:	4b32      	ldr	r3, [pc, #200]	; (3b74 <mount_volume+0x2c0>)
    3aaa:	4298      	cmp	r0, r3
    3aac:	d113      	bne.n	3ad6 <mount_volume+0x222>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    3aae:	2385      	movs	r3, #133	; 0x85
    3ab0:	009b      	lsls	r3, r3, #2
    3ab2:	18e0      	adds	r0, r4, r3
    3ab4:	f7ff fd71 	bl	359a <ld_dword>
    3ab8:	4b2f      	ldr	r3, [pc, #188]	; (3b78 <mount_volume+0x2c4>)
    3aba:	4298      	cmp	r0, r3
    3abc:	d10b      	bne.n	3ad6 <mount_volume+0x222>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    3abe:	2386      	movs	r3, #134	; 0x86
    3ac0:	009b      	lsls	r3, r3, #2
    3ac2:	18e0      	adds	r0, r4, r3
    3ac4:	f7ff fd69 	bl	359a <ld_dword>
    3ac8:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    3aca:	2387      	movs	r3, #135	; 0x87
    3acc:	009b      	lsls	r3, r3, #2
    3ace:	18e0      	adds	r0, r4, r3
    3ad0:	f7ff fd63 	bl	359a <ld_dword>
    3ad4:	60e0      	str	r0, [r4, #12]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
    3ad6:	4643      	mov	r3, r8
    3ad8:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    3ada:	4a28      	ldr	r2, [pc, #160]	; (3b7c <mount_volume+0x2c8>)
    3adc:	8813      	ldrh	r3, [r2, #0]
    3ade:	3301      	adds	r3, #1
    3ae0:	b29b      	uxth	r3, r3
    3ae2:	8013      	strh	r3, [r2, #0]
    3ae4:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
    3ae6:	2000      	movs	r0, #0
    3ae8:	e014      	b.n	3b14 <mount_volume+0x260>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    3aea:	2303      	movs	r3, #3
    3aec:	4698      	mov	r8, r3
    3aee:	e788      	b.n	3a02 <mount_volume+0x14e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3af0:	9a01      	ldr	r2, [sp, #4]
    3af2:	2a00      	cmp	r2, #0
    3af4:	d02b      	beq.n	3b4e <mount_volume+0x29a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    3af6:	444b      	add	r3, r9
    3af8:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3afa:	4643      	mov	r3, r8
    3afc:	2b02      	cmp	r3, #2
    3afe:	d101      	bne.n	3b04 <mount_volume+0x250>
    3b00:	006d      	lsls	r5, r5, #1
    3b02:	e7a8      	b.n	3a56 <mount_volume+0x1a2>
    3b04:	2303      	movs	r3, #3
    3b06:	436b      	muls	r3, r5
    3b08:	085b      	lsrs	r3, r3, #1
    3b0a:	2201      	movs	r2, #1
    3b0c:	4015      	ands	r5, r2
    3b0e:	195d      	adds	r5, r3, r5
    3b10:	e7a1      	b.n	3a56 <mount_volume+0x1a2>
	if (vol < 0) return FR_INVALID_DRIVE;
    3b12:	200b      	movs	r0, #11
}
    3b14:	b003      	add	sp, #12
    3b16:	bc3c      	pop	{r2, r3, r4, r5}
    3b18:	4690      	mov	r8, r2
    3b1a:	4699      	mov	r9, r3
    3b1c:	46a2      	mov	sl, r4
    3b1e:	46ab      	mov	fp, r5
    3b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    3b22:	200c      	movs	r0, #12
    3b24:	e7f6      	b.n	3b14 <mount_volume+0x260>
			return FR_OK;				/* The filesystem object is already valid */
    3b26:	2000      	movs	r0, #0
    3b28:	e7f4      	b.n	3b14 <mount_volume+0x260>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    3b2a:	2001      	movs	r0, #1
    3b2c:	e7f2      	b.n	3b14 <mount_volume+0x260>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3b2e:	200d      	movs	r0, #13
    3b30:	e7f0      	b.n	3b14 <mount_volume+0x260>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    3b32:	200d      	movs	r0, #13
    3b34:	e7ee      	b.n	3b14 <mount_volume+0x260>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    3b36:	200d      	movs	r0, #13
    3b38:	e7ec      	b.n	3b14 <mount_volume+0x260>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    3b3a:	200d      	movs	r0, #13
    3b3c:	e7ea      	b.n	3b14 <mount_volume+0x260>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3b3e:	200d      	movs	r0, #13
    3b40:	e7e8      	b.n	3b14 <mount_volume+0x260>
		if (fmt == 0) return FR_NO_FILESYSTEM;
    3b42:	200d      	movs	r0, #13
    3b44:	e7e6      	b.n	3b14 <mount_volume+0x260>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    3b46:	200d      	movs	r0, #13
    3b48:	e7e4      	b.n	3b14 <mount_volume+0x260>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    3b4a:	200d      	movs	r0, #13
    3b4c:	e7e2      	b.n	3b14 <mount_volume+0x260>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3b4e:	200d      	movs	r0, #13
    3b50:	e7e0      	b.n	3b14 <mount_volume+0x260>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    3b52:	200d      	movs	r0, #13
    3b54:	e7de      	b.n	3b14 <mount_volume+0x260>
    3b56:	46c0      	nop			; (mov r8, r8)
    3b58:	20000adc 	.word	0x20000adc
    3b5c:	0ffffff5 	.word	0x0ffffff5
    3b60:	0000fff5 	.word	0x0000fff5
    3b64:	00000ff5 	.word	0x00000ff5
    3b68:	000001ff 	.word	0x000001ff
    3b6c:	0000022e 	.word	0x0000022e
    3b70:	0000aa55 	.word	0x0000aa55
    3b74:	41615252 	.word	0x41615252
    3b78:	61417272 	.word	0x61417272
    3b7c:	20000ae0 	.word	0x20000ae0

00003b80 <put_fat>:
{
    3b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b82:	46d6      	mov	lr, sl
    3b84:	464f      	mov	r7, r9
    3b86:	4646      	mov	r6, r8
    3b88:	b5c0      	push	{r6, r7, lr}
    3b8a:	0006      	movs	r6, r0
    3b8c:	000c      	movs	r4, r1
    3b8e:	0017      	movs	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    3b90:	2901      	cmp	r1, #1
    3b92:	d800      	bhi.n	3b96 <put_fat+0x16>
    3b94:	e088      	b.n	3ca8 <put_fat+0x128>
    3b96:	6943      	ldr	r3, [r0, #20]
    3b98:	4299      	cmp	r1, r3
    3b9a:	d301      	bcc.n	3ba0 <put_fat+0x20>
	FRESULT res = FR_INT_ERR;
    3b9c:	2502      	movs	r5, #2
    3b9e:	e084      	b.n	3caa <put_fat+0x12a>
		switch (fs->fs_type) {
    3ba0:	7803      	ldrb	r3, [r0, #0]
    3ba2:	2b02      	cmp	r3, #2
    3ba4:	d04e      	beq.n	3c44 <put_fat+0xc4>
    3ba6:	2b03      	cmp	r3, #3
    3ba8:	d061      	beq.n	3c6e <put_fat+0xee>
    3baa:	2b01      	cmp	r3, #1
    3bac:	d001      	beq.n	3bb2 <put_fat+0x32>
	FRESULT res = FR_INT_ERR;
    3bae:	2502      	movs	r5, #2
    3bb0:	e07b      	b.n	3caa <put_fat+0x12a>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    3bb2:	084b      	lsrs	r3, r1, #1
    3bb4:	4698      	mov	r8, r3
    3bb6:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3bb8:	4643      	mov	r3, r8
    3bba:	0a59      	lsrs	r1, r3, #9
    3bbc:	6a03      	ldr	r3, [r0, #32]
    3bbe:	469c      	mov	ip, r3
    3bc0:	4461      	add	r1, ip
    3bc2:	f7ff fdb0 	bl	3726 <move_window>
    3bc6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3bc8:	d16f      	bne.n	3caa <put_fat+0x12a>
			p = fs->win + bc++ % SS(fs);
    3bca:	2330      	movs	r3, #48	; 0x30
    3bcc:	469a      	mov	sl, r3
    3bce:	44b2      	add	sl, r6
    3bd0:	3b2f      	subs	r3, #47	; 0x2f
    3bd2:	4443      	add	r3, r8
    3bd4:	4699      	mov	r9, r3
    3bd6:	4643      	mov	r3, r8
    3bd8:	05db      	lsls	r3, r3, #23
    3bda:	0ddb      	lsrs	r3, r3, #23
    3bdc:	4453      	add	r3, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    3bde:	2201      	movs	r2, #1
    3be0:	4014      	ands	r4, r2
    3be2:	d022      	beq.n	3c2a <put_fat+0xaa>
    3be4:	2100      	movs	r1, #0
    3be6:	5659      	ldrsb	r1, [r3, r1]
    3be8:	320e      	adds	r2, #14
    3bea:	400a      	ands	r2, r1
    3bec:	0139      	lsls	r1, r7, #4
    3bee:	20ff      	movs	r0, #255	; 0xff
    3bf0:	0100      	lsls	r0, r0, #4
    3bf2:	4001      	ands	r1, r0
    3bf4:	430a      	orrs	r2, r1
    3bf6:	b2d2      	uxtb	r2, r2
    3bf8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
    3bfa:	2301      	movs	r3, #1
    3bfc:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3bfe:	464b      	mov	r3, r9
    3c00:	0a59      	lsrs	r1, r3, #9
    3c02:	6a33      	ldr	r3, [r6, #32]
    3c04:	469c      	mov	ip, r3
    3c06:	4461      	add	r1, ip
    3c08:	0030      	movs	r0, r6
    3c0a:	f7ff fd8c 	bl	3726 <move_window>
    3c0e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3c10:	d14b      	bne.n	3caa <put_fat+0x12a>
			p = fs->win + bc % SS(fs);
    3c12:	464b      	mov	r3, r9
    3c14:	05db      	lsls	r3, r3, #23
    3c16:	0ddb      	lsrs	r3, r3, #23
    3c18:	4453      	add	r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    3c1a:	2c00      	cmp	r4, #0
    3c1c:	d007      	beq.n	3c2e <put_fat+0xae>
    3c1e:	093f      	lsrs	r7, r7, #4
    3c20:	b2ff      	uxtb	r7, r7
    3c22:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
    3c24:	2301      	movs	r3, #1
    3c26:	7133      	strb	r3, [r6, #4]
			break;
    3c28:	e03f      	b.n	3caa <put_fat+0x12a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    3c2a:	b2fa      	uxtb	r2, r7
    3c2c:	e7e4      	b.n	3bf8 <put_fat+0x78>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    3c2e:	2200      	movs	r2, #0
    3c30:	569a      	ldrsb	r2, [r3, r2]
    3c32:	210f      	movs	r1, #15
    3c34:	438a      	bics	r2, r1
    3c36:	0a3f      	lsrs	r7, r7, #8
    3c38:	b279      	sxtb	r1, r7
    3c3a:	270f      	movs	r7, #15
    3c3c:	400f      	ands	r7, r1
    3c3e:	4317      	orrs	r7, r2
    3c40:	b2ff      	uxtb	r7, r7
    3c42:	e7ee      	b.n	3c22 <put_fat+0xa2>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    3c44:	0a09      	lsrs	r1, r1, #8
    3c46:	6a03      	ldr	r3, [r0, #32]
    3c48:	469c      	mov	ip, r3
    3c4a:	4461      	add	r1, ip
    3c4c:	f7ff fd6b 	bl	3726 <move_window>
    3c50:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3c52:	d12a      	bne.n	3caa <put_fat+0x12a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    3c54:	0030      	movs	r0, r6
    3c56:	3030      	adds	r0, #48	; 0x30
    3c58:	0064      	lsls	r4, r4, #1
    3c5a:	23ff      	movs	r3, #255	; 0xff
    3c5c:	005b      	lsls	r3, r3, #1
    3c5e:	401c      	ands	r4, r3
    3c60:	b2b9      	uxth	r1, r7
    3c62:	1900      	adds	r0, r0, r4
    3c64:	f7ff fca4 	bl	35b0 <st_word>
			fs->wflag = 1;
    3c68:	2301      	movs	r3, #1
    3c6a:	7133      	strb	r3, [r6, #4]
			break;
    3c6c:	e01d      	b.n	3caa <put_fat+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    3c6e:	09c9      	lsrs	r1, r1, #7
    3c70:	6a03      	ldr	r3, [r0, #32]
    3c72:	469c      	mov	ip, r3
    3c74:	4461      	add	r1, ip
    3c76:	f7ff fd56 	bl	3726 <move_window>
    3c7a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3c7c:	d115      	bne.n	3caa <put_fat+0x12a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    3c7e:	013f      	lsls	r7, r7, #4
    3c80:	093f      	lsrs	r7, r7, #4
    3c82:	0033      	movs	r3, r6
    3c84:	3330      	adds	r3, #48	; 0x30
    3c86:	00a4      	lsls	r4, r4, #2
    3c88:	22fe      	movs	r2, #254	; 0xfe
    3c8a:	0052      	lsls	r2, r2, #1
    3c8c:	4014      	ands	r4, r2
    3c8e:	191c      	adds	r4, r3, r4
    3c90:	0020      	movs	r0, r4
    3c92:	f7ff fc82 	bl	359a <ld_dword>
    3c96:	0f01      	lsrs	r1, r0, #28
    3c98:	0709      	lsls	r1, r1, #28
    3c9a:	4339      	orrs	r1, r7
			st_dword(fs->win + clst * 4 % SS(fs), val);
    3c9c:	0020      	movs	r0, r4
    3c9e:	f7ff fc8b 	bl	35b8 <st_dword>
			fs->wflag = 1;
    3ca2:	2301      	movs	r3, #1
    3ca4:	7133      	strb	r3, [r6, #4]
			break;
    3ca6:	e000      	b.n	3caa <put_fat+0x12a>
	FRESULT res = FR_INT_ERR;
    3ca8:	2502      	movs	r5, #2
}
    3caa:	0028      	movs	r0, r5
    3cac:	bc1c      	pop	{r2, r3, r4}
    3cae:	4690      	mov	r8, r2
    3cb0:	4699      	mov	r9, r3
    3cb2:	46a2      	mov	sl, r4
    3cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003cb6 <get_fat>:
{
    3cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cb8:	000c      	movs	r4, r1
	FATFS *fs = obj->fs;
    3cba:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    3cbc:	2901      	cmp	r1, #1
    3cbe:	d967      	bls.n	3d90 <get_fat+0xda>
    3cc0:	696b      	ldr	r3, [r5, #20]
    3cc2:	4299      	cmp	r1, r3
    3cc4:	d266      	bcs.n	3d94 <get_fat+0xde>
		switch (fs->fs_type) {
    3cc6:	782b      	ldrb	r3, [r5, #0]
    3cc8:	2b02      	cmp	r3, #2
    3cca:	d033      	beq.n	3d34 <get_fat+0x7e>
    3ccc:	2b03      	cmp	r3, #3
    3cce:	d047      	beq.n	3d60 <get_fat+0xaa>
    3cd0:	2b01      	cmp	r3, #1
    3cd2:	d001      	beq.n	3cd8 <get_fat+0x22>
			val = 1;	/* Internal error */
    3cd4:	2001      	movs	r0, #1
    3cd6:	e05e      	b.n	3d96 <get_fat+0xe0>
			bc = (UINT)clst; bc += bc / 2;
    3cd8:	084e      	lsrs	r6, r1, #1
    3cda:	198e      	adds	r6, r1, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    3cdc:	0a71      	lsrs	r1, r6, #9
    3cde:	6a2b      	ldr	r3, [r5, #32]
    3ce0:	469c      	mov	ip, r3
    3ce2:	4461      	add	r1, ip
    3ce4:	0028      	movs	r0, r5
    3ce6:	f7ff fd1e 	bl	3726 <move_window>
    3cea:	2800      	cmp	r0, #0
    3cec:	d002      	beq.n	3cf4 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3cee:	2001      	movs	r0, #1
    3cf0:	4240      	negs	r0, r0
    3cf2:	e050      	b.n	3d96 <get_fat+0xe0>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    3cf4:	1c77      	adds	r7, r6, #1
    3cf6:	05f3      	lsls	r3, r6, #23
    3cf8:	0ddb      	lsrs	r3, r3, #23
    3cfa:	18eb      	adds	r3, r5, r3
    3cfc:	3330      	adds	r3, #48	; 0x30
    3cfe:	781e      	ldrb	r6, [r3, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    3d00:	0a79      	lsrs	r1, r7, #9
    3d02:	6a2b      	ldr	r3, [r5, #32]
    3d04:	469c      	mov	ip, r3
    3d06:	4461      	add	r1, ip
    3d08:	0028      	movs	r0, r5
    3d0a:	f7ff fd0c 	bl	3726 <move_window>
    3d0e:	2800      	cmp	r0, #0
    3d10:	d002      	beq.n	3d18 <get_fat+0x62>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3d12:	2001      	movs	r0, #1
    3d14:	4240      	negs	r0, r0
    3d16:	e03e      	b.n	3d96 <get_fat+0xe0>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    3d18:	05ff      	lsls	r7, r7, #23
    3d1a:	0dff      	lsrs	r7, r7, #23
    3d1c:	19ed      	adds	r5, r5, r7
    3d1e:	3530      	adds	r5, #48	; 0x30
    3d20:	7828      	ldrb	r0, [r5, #0]
    3d22:	0200      	lsls	r0, r0, #8
    3d24:	4330      	orrs	r0, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    3d26:	07e3      	lsls	r3, r4, #31
    3d28:	d501      	bpl.n	3d2e <get_fat+0x78>
    3d2a:	0900      	lsrs	r0, r0, #4
    3d2c:	e033      	b.n	3d96 <get_fat+0xe0>
    3d2e:	0500      	lsls	r0, r0, #20
    3d30:	0d00      	lsrs	r0, r0, #20
    3d32:	e030      	b.n	3d96 <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    3d34:	0a09      	lsrs	r1, r1, #8
    3d36:	6a2b      	ldr	r3, [r5, #32]
    3d38:	469c      	mov	ip, r3
    3d3a:	4461      	add	r1, ip
    3d3c:	0028      	movs	r0, r5
    3d3e:	f7ff fcf2 	bl	3726 <move_window>
    3d42:	2800      	cmp	r0, #0
    3d44:	d002      	beq.n	3d4c <get_fat+0x96>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3d46:	2001      	movs	r0, #1
    3d48:	4240      	negs	r0, r0
    3d4a:	e024      	b.n	3d96 <get_fat+0xe0>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    3d4c:	0028      	movs	r0, r5
    3d4e:	3030      	adds	r0, #48	; 0x30
    3d50:	0064      	lsls	r4, r4, #1
    3d52:	25ff      	movs	r5, #255	; 0xff
    3d54:	006d      	lsls	r5, r5, #1
    3d56:	402c      	ands	r4, r5
    3d58:	1900      	adds	r0, r0, r4
    3d5a:	f7ff fc19 	bl	3590 <ld_word>
			break;
    3d5e:	e01a      	b.n	3d96 <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    3d60:	09c9      	lsrs	r1, r1, #7
    3d62:	6a2b      	ldr	r3, [r5, #32]
    3d64:	469c      	mov	ip, r3
    3d66:	4461      	add	r1, ip
    3d68:	0028      	movs	r0, r5
    3d6a:	f7ff fcdc 	bl	3726 <move_window>
    3d6e:	2800      	cmp	r0, #0
    3d70:	d002      	beq.n	3d78 <get_fat+0xc2>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3d72:	2001      	movs	r0, #1
    3d74:	4240      	negs	r0, r0
	return val;
    3d76:	e00e      	b.n	3d96 <get_fat+0xe0>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    3d78:	0028      	movs	r0, r5
    3d7a:	3030      	adds	r0, #48	; 0x30
    3d7c:	00a4      	lsls	r4, r4, #2
    3d7e:	23fe      	movs	r3, #254	; 0xfe
    3d80:	005b      	lsls	r3, r3, #1
    3d82:	401c      	ands	r4, r3
    3d84:	1900      	adds	r0, r0, r4
    3d86:	f7ff fc08 	bl	359a <ld_dword>
    3d8a:	0100      	lsls	r0, r0, #4
    3d8c:	0900      	lsrs	r0, r0, #4
			break;
    3d8e:	e002      	b.n	3d96 <get_fat+0xe0>
		val = 1;	/* Internal error */
    3d90:	2001      	movs	r0, #1
    3d92:	e000      	b.n	3d96 <get_fat+0xe0>
    3d94:	2001      	movs	r0, #1
}
    3d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003d98 <dir_sdi>:
{
    3d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d9a:	46c6      	mov	lr, r8
    3d9c:	b500      	push	{lr}
    3d9e:	0006      	movs	r6, r0
    3da0:	000c      	movs	r4, r1
	FATFS *fs = dp->obj.fs;
    3da2:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    3da4:	4b26      	ldr	r3, [pc, #152]	; (3e40 <dir_sdi+0xa8>)
    3da6:	4299      	cmp	r1, r3
    3da8:	d903      	bls.n	3db2 <dir_sdi+0x1a>
		return FR_INT_ERR;
    3daa:	2002      	movs	r0, #2
}
    3dac:	bc04      	pop	{r2}
    3dae:	4690      	mov	r8, r2
    3db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    3db2:	06cb      	lsls	r3, r1, #27
    3db4:	d001      	beq.n	3dba <dir_sdi+0x22>
		return FR_INT_ERR;
    3db6:	2002      	movs	r0, #2
    3db8:	e7f8      	b.n	3dac <dir_sdi+0x14>
	dp->dptr = ofs;				/* Set current offset */
    3dba:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    3dbc:	6885      	ldr	r5, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    3dbe:	2d00      	cmp	r5, #0
    3dc0:	d103      	bne.n	3dca <dir_sdi+0x32>
    3dc2:	783b      	ldrb	r3, [r7, #0]
    3dc4:	2b02      	cmp	r3, #2
    3dc6:	d900      	bls.n	3dca <dir_sdi+0x32>
		clst = (DWORD)fs->dirbase;
    3dc8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    3dca:	2d00      	cmp	r5, #0
    3dcc:	d10d      	bne.n	3dea <dir_sdi+0x52>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
    3dce:	0963      	lsrs	r3, r4, #5
    3dd0:	893a      	ldrh	r2, [r7, #8]
    3dd2:	4293      	cmp	r3, r2
    3dd4:	d301      	bcc.n	3dda <dir_sdi+0x42>
    3dd6:	2002      	movs	r0, #2
    3dd8:	e7e8      	b.n	3dac <dir_sdi+0x14>
		dp->sect = fs->dirbase;
    3dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3ddc:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
    3dde:	6175      	str	r5, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
    3de0:	69b3      	ldr	r3, [r6, #24]
    3de2:	2b00      	cmp	r3, #0
    3de4:	d11d      	bne.n	3e22 <dir_sdi+0x8a>
    3de6:	2002      	movs	r0, #2
    3de8:	e7e0      	b.n	3dac <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    3dea:	897b      	ldrh	r3, [r7, #10]
    3dec:	025b      	lsls	r3, r3, #9
    3dee:	4698      	mov	r8, r3
		while (ofs >= csz) {				/* Follow cluster chain */
    3df0:	e001      	b.n	3df6 <dir_sdi+0x5e>
			ofs -= csz;
    3df2:	4643      	mov	r3, r8
    3df4:	1ae4      	subs	r4, r4, r3
		while (ofs >= csz) {				/* Follow cluster chain */
    3df6:	4544      	cmp	r4, r8
    3df8:	d30d      	bcc.n	3e16 <dir_sdi+0x7e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    3dfa:	0029      	movs	r1, r5
    3dfc:	0030      	movs	r0, r6
    3dfe:	f7ff ff5a 	bl	3cb6 <get_fat>
    3e02:	0005      	movs	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3e04:	1c43      	adds	r3, r0, #1
    3e06:	d016      	beq.n	3e36 <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    3e08:	2801      	cmp	r0, #1
    3e0a:	d916      	bls.n	3e3a <dir_sdi+0xa2>
    3e0c:	697b      	ldr	r3, [r7, #20]
    3e0e:	4298      	cmp	r0, r3
    3e10:	d3ef      	bcc.n	3df2 <dir_sdi+0x5a>
    3e12:	2002      	movs	r0, #2
    3e14:	e7ca      	b.n	3dac <dir_sdi+0x14>
		dp->sect = clst2sect(fs, clst);
    3e16:	0029      	movs	r1, r5
    3e18:	0038      	movs	r0, r7
    3e1a:	f7ff fbd9 	bl	35d0 <clst2sect>
    3e1e:	61b0      	str	r0, [r6, #24]
    3e20:	e7dd      	b.n	3dde <dir_sdi+0x46>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
    3e22:	0a62      	lsrs	r2, r4, #9
    3e24:	189b      	adds	r3, r3, r2
    3e26:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    3e28:	3730      	adds	r7, #48	; 0x30
    3e2a:	05e4      	lsls	r4, r4, #23
    3e2c:	0de4      	lsrs	r4, r4, #23
    3e2e:	193c      	adds	r4, r7, r4
    3e30:	61f4      	str	r4, [r6, #28]
	return FR_OK;
    3e32:	2000      	movs	r0, #0
    3e34:	e7ba      	b.n	3dac <dir_sdi+0x14>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3e36:	2001      	movs	r0, #1
    3e38:	e7b8      	b.n	3dac <dir_sdi+0x14>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    3e3a:	2002      	movs	r0, #2
    3e3c:	e7b6      	b.n	3dac <dir_sdi+0x14>
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	001fffff 	.word	0x001fffff

00003e44 <create_chain>:
{
    3e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e46:	46ce      	mov	lr, r9
    3e48:	4647      	mov	r7, r8
    3e4a:	b580      	push	{r7, lr}
    3e4c:	0006      	movs	r6, r0
    3e4e:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
    3e50:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
    3e52:	2900      	cmp	r1, #0
    3e54:	d107      	bne.n	3e66 <create_chain+0x22>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    3e56:	68fd      	ldr	r5, [r7, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    3e58:	2d00      	cmp	r5, #0
    3e5a:	d010      	beq.n	3e7e <create_chain+0x3a>
    3e5c:	697b      	ldr	r3, [r7, #20]
    3e5e:	429d      	cmp	r5, r3
    3e60:	d30e      	bcc.n	3e80 <create_chain+0x3c>
    3e62:	2501      	movs	r5, #1
    3e64:	e00c      	b.n	3e80 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
    3e66:	f7ff ff26 	bl	3cb6 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
    3e6a:	2801      	cmp	r0, #1
    3e6c:	d800      	bhi.n	3e70 <create_chain+0x2c>
    3e6e:	e074      	b.n	3f5a <create_chain+0x116>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    3e70:	1c43      	adds	r3, r0, #1
    3e72:	d062      	beq.n	3f3a <create_chain+0xf6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    3e74:	697b      	ldr	r3, [r7, #20]
    3e76:	4298      	cmp	r0, r3
    3e78:	d35f      	bcc.n	3f3a <create_chain+0xf6>
		scl = clst;							/* Cluster to start to find */
    3e7a:	4645      	mov	r5, r8
    3e7c:	e000      	b.n	3e80 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    3e7e:	2501      	movs	r5, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    3e80:	6938      	ldr	r0, [r7, #16]
    3e82:	2800      	cmp	r0, #0
    3e84:	d059      	beq.n	3f3a <create_chain+0xf6>
		if (scl == clst) {						/* Stretching an existing chain? */
    3e86:	4545      	cmp	r5, r8
    3e88:	d006      	beq.n	3e98 <create_chain+0x54>
		ncl = 0;
    3e8a:	2300      	movs	r3, #0
    3e8c:	4699      	mov	r9, r3
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    3e8e:	464b      	mov	r3, r9
    3e90:	2b00      	cmp	r3, #0
    3e92:	d137      	bne.n	3f04 <create_chain+0xc0>
    3e94:	002c      	movs	r4, r5
    3e96:	e02c      	b.n	3ef2 <create_chain+0xae>
			ncl = scl + 1;						/* Test if next cluster is free */
    3e98:	1c6b      	adds	r3, r5, #1
    3e9a:	4699      	mov	r9, r3
			if (ncl >= fs->n_fatent) ncl = 2;
    3e9c:	697b      	ldr	r3, [r7, #20]
    3e9e:	4599      	cmp	r9, r3
    3ea0:	d301      	bcc.n	3ea6 <create_chain+0x62>
    3ea2:	2302      	movs	r3, #2
    3ea4:	4699      	mov	r9, r3
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    3ea6:	4649      	mov	r1, r9
    3ea8:	0030      	movs	r0, r6
    3eaa:	f7ff ff04 	bl	3cb6 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    3eae:	2801      	cmp	r0, #1
    3eb0:	d043      	beq.n	3f3a <create_chain+0xf6>
    3eb2:	1c43      	adds	r3, r0, #1
    3eb4:	d041      	beq.n	3f3a <create_chain+0xf6>
			if (cs != 0) {						/* Not free? */
    3eb6:	2800      	cmp	r0, #0
    3eb8:	d0e9      	beq.n	3e8e <create_chain+0x4a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    3eba:	68fb      	ldr	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    3ebc:	2b01      	cmp	r3, #1
    3ebe:	d905      	bls.n	3ecc <create_chain+0x88>
    3ec0:	697a      	ldr	r2, [r7, #20]
    3ec2:	4293      	cmp	r3, r2
    3ec4:	d305      	bcc.n	3ed2 <create_chain+0x8e>
				ncl = 0;
    3ec6:	2300      	movs	r3, #0
    3ec8:	4699      	mov	r9, r3
    3eca:	e7e0      	b.n	3e8e <create_chain+0x4a>
    3ecc:	2300      	movs	r3, #0
    3ece:	4699      	mov	r9, r3
    3ed0:	e7dd      	b.n	3e8e <create_chain+0x4a>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    3ed2:	001d      	movs	r5, r3
				ncl = 0;
    3ed4:	2300      	movs	r3, #0
    3ed6:	4699      	mov	r9, r3
    3ed8:	e7d9      	b.n	3e8e <create_chain+0x4a>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    3eda:	0021      	movs	r1, r4
    3edc:	0030      	movs	r0, r6
    3ede:	f7ff feea 	bl	3cb6 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
    3ee2:	2800      	cmp	r0, #0
    3ee4:	d00d      	beq.n	3f02 <create_chain+0xbe>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    3ee6:	2801      	cmp	r0, #1
    3ee8:	d027      	beq.n	3f3a <create_chain+0xf6>
    3eea:	1c43      	adds	r3, r0, #1
    3eec:	d025      	beq.n	3f3a <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
    3eee:	42ac      	cmp	r4, r5
    3ef0:	d037      	beq.n	3f62 <create_chain+0x11e>
				ncl++;							/* Next cluster */
    3ef2:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    3ef4:	697b      	ldr	r3, [r7, #20]
    3ef6:	429c      	cmp	r4, r3
    3ef8:	d3ef      	bcc.n	3eda <create_chain+0x96>
					if (ncl > scl) return 0;	/* No free cluster found? */
    3efa:	2d01      	cmp	r5, #1
    3efc:	d92f      	bls.n	3f5e <create_chain+0x11a>
					ncl = 2;
    3efe:	2402      	movs	r4, #2
    3f00:	e7eb      	b.n	3eda <create_chain+0x96>
    3f02:	46a1      	mov	r9, r4
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    3f04:	2201      	movs	r2, #1
    3f06:	4252      	negs	r2, r2
    3f08:	4649      	mov	r1, r9
    3f0a:	0038      	movs	r0, r7
    3f0c:	f7ff fe38 	bl	3b80 <put_fat>
		if (res == FR_OK && clst != 0) {
    3f10:	2800      	cmp	r0, #0
    3f12:	d102      	bne.n	3f1a <create_chain+0xd6>
    3f14:	4643      	mov	r3, r8
    3f16:	2b00      	cmp	r3, #0
    3f18:	d113      	bne.n	3f42 <create_chain+0xfe>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    3f1a:	2800      	cmp	r0, #0
    3f1c:	d117      	bne.n	3f4e <create_chain+0x10a>
		fs->last_clst = ncl;
    3f1e:	464b      	mov	r3, r9
    3f20:	60fb      	str	r3, [r7, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    3f22:	693a      	ldr	r2, [r7, #16]
    3f24:	697b      	ldr	r3, [r7, #20]
    3f26:	3b02      	subs	r3, #2
    3f28:	429a      	cmp	r2, r3
    3f2a:	d801      	bhi.n	3f30 <create_chain+0xec>
    3f2c:	3a01      	subs	r2, #1
    3f2e:	613a      	str	r2, [r7, #16]
		fs->fsi_flag |= 1;
    3f30:	797b      	ldrb	r3, [r7, #5]
    3f32:	2201      	movs	r2, #1
    3f34:	4313      	orrs	r3, r2
    3f36:	717b      	strb	r3, [r7, #5]
    3f38:	4648      	mov	r0, r9
}
    3f3a:	bc0c      	pop	{r2, r3}
    3f3c:	4690      	mov	r8, r2
    3f3e:	4699      	mov	r9, r3
    3f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    3f42:	464a      	mov	r2, r9
    3f44:	4641      	mov	r1, r8
    3f46:	0038      	movs	r0, r7
    3f48:	f7ff fe1a 	bl	3b80 <put_fat>
    3f4c:	e7e5      	b.n	3f1a <create_chain+0xd6>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    3f4e:	2801      	cmp	r0, #1
    3f50:	d001      	beq.n	3f56 <create_chain+0x112>
    3f52:	2001      	movs	r0, #1
    3f54:	e7f1      	b.n	3f3a <create_chain+0xf6>
    3f56:	3802      	subs	r0, #2
    3f58:	e7ef      	b.n	3f3a <create_chain+0xf6>
		if (cs < 2) return 1;				/* Test for insanity */
    3f5a:	2001      	movs	r0, #1
    3f5c:	e7ed      	b.n	3f3a <create_chain+0xf6>
					if (ncl > scl) return 0;	/* No free cluster found? */
    3f5e:	4648      	mov	r0, r9
    3f60:	e7eb      	b.n	3f3a <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
    3f62:	4648      	mov	r0, r9
    3f64:	e7e9      	b.n	3f3a <create_chain+0xf6>

00003f66 <remove_chain>:
{
    3f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f68:	0007      	movs	r7, r0
    3f6a:	000c      	movs	r4, r1
    3f6c:	0011      	movs	r1, r2
	FATFS *fs = obj->fs;
    3f6e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    3f70:	2c01      	cmp	r4, #1
    3f72:	d92e      	bls.n	3fd2 <remove_chain+0x6c>
    3f74:	696b      	ldr	r3, [r5, #20]
    3f76:	429c      	cmp	r4, r3
    3f78:	d301      	bcc.n	3f7e <remove_chain+0x18>
    3f7a:	2002      	movs	r0, #2
    3f7c:	e02a      	b.n	3fd4 <remove_chain+0x6e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    3f7e:	2a00      	cmp	r2, #0
    3f80:	d00a      	beq.n	3f98 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    3f82:	2201      	movs	r2, #1
    3f84:	4252      	negs	r2, r2
    3f86:	0028      	movs	r0, r5
    3f88:	f7ff fdfa 	bl	3b80 <put_fat>
		if (res != FR_OK) return res;
    3f8c:	2800      	cmp	r0, #0
    3f8e:	d003      	beq.n	3f98 <remove_chain+0x32>
    3f90:	e020      	b.n	3fd4 <remove_chain+0x6e>
		clst = nxt;					/* Next cluster */
    3f92:	0034      	movs	r4, r6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    3f94:	4296      	cmp	r6, r2
    3f96:	d21d      	bcs.n	3fd4 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
    3f98:	0021      	movs	r1, r4
    3f9a:	0038      	movs	r0, r7
    3f9c:	f7ff fe8b 	bl	3cb6 <get_fat>
    3fa0:	1e06      	subs	r6, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
    3fa2:	d018      	beq.n	3fd6 <remove_chain+0x70>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    3fa4:	2801      	cmp	r0, #1
    3fa6:	d018      	beq.n	3fda <remove_chain+0x74>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    3fa8:	1c43      	adds	r3, r0, #1
    3faa:	d018      	beq.n	3fde <remove_chain+0x78>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    3fac:	2200      	movs	r2, #0
    3fae:	0021      	movs	r1, r4
    3fb0:	0028      	movs	r0, r5
    3fb2:	f7ff fde5 	bl	3b80 <put_fat>
			if (res != FR_OK) return res;
    3fb6:	2800      	cmp	r0, #0
    3fb8:	d10c      	bne.n	3fd4 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    3fba:	692b      	ldr	r3, [r5, #16]
    3fbc:	696a      	ldr	r2, [r5, #20]
    3fbe:	1e91      	subs	r1, r2, #2
    3fc0:	428b      	cmp	r3, r1
    3fc2:	d2e6      	bcs.n	3f92 <remove_chain+0x2c>
			fs->free_clst++;
    3fc4:	3301      	adds	r3, #1
    3fc6:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    3fc8:	796b      	ldrb	r3, [r5, #5]
    3fca:	2101      	movs	r1, #1
    3fcc:	430b      	orrs	r3, r1
    3fce:	716b      	strb	r3, [r5, #5]
    3fd0:	e7df      	b.n	3f92 <remove_chain+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    3fd2:	2002      	movs	r0, #2
}
    3fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
    3fd6:	2000      	movs	r0, #0
    3fd8:	e7fc      	b.n	3fd4 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    3fda:	2002      	movs	r0, #2
    3fdc:	e7fa      	b.n	3fd4 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    3fde:	2001      	movs	r0, #1
    3fe0:	e7f8      	b.n	3fd4 <remove_chain+0x6e>

00003fe2 <dir_clear>:
{
    3fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fe4:	0006      	movs	r6, r0
    3fe6:	000c      	movs	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    3fe8:	f7ff fb73 	bl	36d2 <sync_window>
    3fec:	2800      	cmp	r0, #0
    3fee:	d001      	beq.n	3ff4 <dir_clear+0x12>
    3ff0:	2001      	movs	r0, #1
}
    3ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
    3ff4:	0021      	movs	r1, r4
    3ff6:	0030      	movs	r0, r6
    3ff8:	f7ff faea 	bl	35d0 <clst2sect>
    3ffc:	0007      	movs	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
    3ffe:	62f0      	str	r0, [r6, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    4000:	0035      	movs	r5, r6
    4002:	3530      	adds	r5, #48	; 0x30
    4004:	2280      	movs	r2, #128	; 0x80
    4006:	0092      	lsls	r2, r2, #2
    4008:	2100      	movs	r1, #0
    400a:	0028      	movs	r0, r5
    400c:	f003 fa72 	bl	74f4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    4010:	2400      	movs	r4, #0
    4012:	e000      	b.n	4016 <dir_clear+0x34>
    4014:	3401      	adds	r4, #1
    4016:	8973      	ldrh	r3, [r6, #10]
    4018:	429c      	cmp	r4, r3
    401a:	d207      	bcs.n	402c <dir_clear+0x4a>
    401c:	19e2      	adds	r2, r4, r7
    401e:	7870      	ldrb	r0, [r6, #1]
    4020:	2301      	movs	r3, #1
    4022:	0029      	movs	r1, r5
    4024:	f000 fe22 	bl	4c6c <disk_write>
    4028:	2800      	cmp	r0, #0
    402a:	d0f3      	beq.n	4014 <dir_clear+0x32>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
    402c:	8970      	ldrh	r0, [r6, #10]
    402e:	1a24      	subs	r4, r4, r0
    4030:	1e60      	subs	r0, r4, #1
    4032:	4184      	sbcs	r4, r0
    4034:	b2e0      	uxtb	r0, r4
    4036:	e7dc      	b.n	3ff2 <dir_clear+0x10>

00004038 <dir_next>:
{
    4038:	b5f0      	push	{r4, r5, r6, r7, lr}
    403a:	46ce      	mov	lr, r9
    403c:	b500      	push	{lr}
    403e:	b082      	sub	sp, #8
    4040:	0004      	movs	r4, r0
    4042:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
    4044:	6807      	ldr	r7, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    4046:	6905      	ldr	r5, [r0, #16]
    4048:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    404a:	4b2f      	ldr	r3, [pc, #188]	; (4108 <dir_next+0xd0>)
    404c:	429d      	cmp	r5, r3
    404e:	d901      	bls.n	4054 <dir_next+0x1c>
    4050:	2300      	movs	r3, #0
    4052:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    4054:	69a3      	ldr	r3, [r4, #24]
    4056:	2b00      	cmp	r3, #0
    4058:	d104      	bne.n	4064 <dir_next+0x2c>
    405a:	2004      	movs	r0, #4
}
    405c:	b002      	add	sp, #8
    405e:	bc04      	pop	{r2}
    4060:	4691      	mov	r9, r2
    4062:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    4064:	05ee      	lsls	r6, r5, #23
    4066:	0df6      	lsrs	r6, r6, #23
    4068:	d111      	bne.n	408e <dir_next+0x56>
		dp->sect++;				/* Next sector */
    406a:	3301      	adds	r3, #1
    406c:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    406e:	6961      	ldr	r1, [r4, #20]
    4070:	2900      	cmp	r1, #0
    4072:	d107      	bne.n	4084 <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    4074:	096b      	lsrs	r3, r5, #5
    4076:	893a      	ldrh	r2, [r7, #8]
    4078:	4293      	cmp	r3, r2
    407a:	d308      	bcc.n	408e <dir_next+0x56>
				dp->sect = 0; return FR_NO_FILE;
    407c:	2300      	movs	r3, #0
    407e:	61a3      	str	r3, [r4, #24]
    4080:	2004      	movs	r0, #4
    4082:	e7eb      	b.n	405c <dir_next+0x24>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    4084:	0a6b      	lsrs	r3, r5, #9
    4086:	897a      	ldrh	r2, [r7, #10]
    4088:	3a01      	subs	r2, #1
    408a:	421a      	tst	r2, r3
    408c:	d005      	beq.n	409a <dir_next+0x62>
	dp->dptr = ofs;						/* Current entry */
    408e:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    4090:	3730      	adds	r7, #48	; 0x30
    4092:	19bf      	adds	r7, r7, r6
    4094:	61e7      	str	r7, [r4, #28]
	return FR_OK;
    4096:	2000      	movs	r0, #0
    4098:	e7e0      	b.n	405c <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    409a:	0020      	movs	r0, r4
    409c:	f7ff fe0b 	bl	3cb6 <get_fat>
    40a0:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    40a2:	0003      	movs	r3, r0
    40a4:	2801      	cmp	r0, #1
    40a6:	d925      	bls.n	40f4 <dir_next+0xbc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    40a8:	3301      	adds	r3, #1
    40aa:	d025      	beq.n	40f8 <dir_next+0xc0>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    40ac:	697b      	ldr	r3, [r7, #20]
    40ae:	4298      	cmp	r0, r3
    40b0:	d318      	bcc.n	40e4 <dir_next+0xac>
					if (!stretch) {								/* If no stretch, report EOT */
    40b2:	9b01      	ldr	r3, [sp, #4]
    40b4:	2b00      	cmp	r3, #0
    40b6:	d102      	bne.n	40be <dir_next+0x86>
						dp->sect = 0; return FR_NO_FILE;
    40b8:	61a3      	str	r3, [r4, #24]
    40ba:	2004      	movs	r0, #4
    40bc:	e7ce      	b.n	405c <dir_next+0x24>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    40be:	6961      	ldr	r1, [r4, #20]
    40c0:	0020      	movs	r0, r4
    40c2:	f7ff febf 	bl	3e44 <create_chain>
    40c6:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    40c8:	1e03      	subs	r3, r0, #0
    40ca:	d101      	bne.n	40d0 <dir_next+0x98>
    40cc:	2007      	movs	r0, #7
    40ce:	e7c5      	b.n	405c <dir_next+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    40d0:	2801      	cmp	r0, #1
    40d2:	d013      	beq.n	40fc <dir_next+0xc4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    40d4:	3301      	adds	r3, #1
    40d6:	d013      	beq.n	4100 <dir_next+0xc8>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    40d8:	0001      	movs	r1, r0
    40da:	0038      	movs	r0, r7
    40dc:	f7ff ff81 	bl	3fe2 <dir_clear>
    40e0:	2800      	cmp	r0, #0
    40e2:	d10f      	bne.n	4104 <dir_next+0xcc>
				dp->clust = clst;		/* Initialize data for new cluster */
    40e4:	464b      	mov	r3, r9
    40e6:	6163      	str	r3, [r4, #20]
				dp->sect = clst2sect(fs, clst);
    40e8:	4649      	mov	r1, r9
    40ea:	0038      	movs	r0, r7
    40ec:	f7ff fa70 	bl	35d0 <clst2sect>
    40f0:	61a0      	str	r0, [r4, #24]
    40f2:	e7cc      	b.n	408e <dir_next+0x56>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    40f4:	2002      	movs	r0, #2
    40f6:	e7b1      	b.n	405c <dir_next+0x24>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    40f8:	2001      	movs	r0, #1
    40fa:	e7af      	b.n	405c <dir_next+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    40fc:	2002      	movs	r0, #2
    40fe:	e7ad      	b.n	405c <dir_next+0x24>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4100:	2001      	movs	r0, #1
    4102:	e7ab      	b.n	405c <dir_next+0x24>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    4104:	2001      	movs	r0, #1
    4106:	e7a9      	b.n	405c <dir_next+0x24>
    4108:	001fffff 	.word	0x001fffff

0000410c <dir_find>:
{
    410c:	b570      	push	{r4, r5, r6, lr}
    410e:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
    4110:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    4112:	2100      	movs	r1, #0
    4114:	f7ff fe40 	bl	3d98 <dir_sdi>
    4118:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
    411a:	d007      	beq.n	412c <dir_find+0x20>
}
    411c:	0020      	movs	r0, r4
    411e:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
    4120:	2100      	movs	r1, #0
    4122:	0028      	movs	r0, r5
    4124:	f7ff ff88 	bl	4038 <dir_next>
    4128:	1e04      	subs	r4, r0, #0
	} while (res == FR_OK);
    412a:	d1f7      	bne.n	411c <dir_find+0x10>
		res = move_window(fs, dp->sect);
    412c:	69a9      	ldr	r1, [r5, #24]
    412e:	0030      	movs	r0, r6
    4130:	f7ff faf9 	bl	3726 <move_window>
    4134:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    4136:	d1f1      	bne.n	411c <dir_find+0x10>
		c = dp->dir[DIR_Name];
    4138:	69e8      	ldr	r0, [r5, #28]
    413a:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    413c:	2b00      	cmp	r3, #0
    413e:	d00e      	beq.n	415e <dir_find+0x52>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    4140:	7ac2      	ldrb	r2, [r0, #11]
    4142:	233f      	movs	r3, #63	; 0x3f
    4144:	4013      	ands	r3, r2
    4146:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    4148:	7ac3      	ldrb	r3, [r0, #11]
    414a:	071b      	lsls	r3, r3, #28
    414c:	d4e8      	bmi.n	4120 <dir_find+0x14>
    414e:	0029      	movs	r1, r5
    4150:	3120      	adds	r1, #32
    4152:	220b      	movs	r2, #11
    4154:	f003 f966 	bl	7424 <memcmp>
    4158:	2800      	cmp	r0, #0
    415a:	d1e1      	bne.n	4120 <dir_find+0x14>
    415c:	e7de      	b.n	411c <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    415e:	2404      	movs	r4, #4
    4160:	e7dc      	b.n	411c <dir_find+0x10>

00004162 <dir_alloc>:
{
    4162:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4164:	0005      	movs	r5, r0
    4166:	000e      	movs	r6, r1
	FATFS *fs = dp->obj.fs;
    4168:	6804      	ldr	r4, [r0, #0]
	res = dir_sdi(dp, 0);
    416a:	2100      	movs	r1, #0
    416c:	f7ff fe14 	bl	3d98 <dir_sdi>
	if (res == FR_OK) {
    4170:	2800      	cmp	r0, #0
    4172:	d118      	bne.n	41a6 <dir_alloc+0x44>
    4174:	2700      	movs	r7, #0
    4176:	e008      	b.n	418a <dir_alloc+0x28>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
    4178:	3701      	adds	r7, #1
    417a:	42b7      	cmp	r7, r6
    417c:	d013      	beq.n	41a6 <dir_alloc+0x44>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
    417e:	2101      	movs	r1, #1
    4180:	0028      	movs	r0, r5
    4182:	f7ff ff59 	bl	4038 <dir_next>
		} while (res == FR_OK);
    4186:	2800      	cmp	r0, #0
    4188:	d10d      	bne.n	41a6 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
    418a:	69a9      	ldr	r1, [r5, #24]
    418c:	0020      	movs	r0, r4
    418e:	f7ff faca 	bl	3726 <move_window>
			if (res != FR_OK) break;
    4192:	2800      	cmp	r0, #0
    4194:	d107      	bne.n	41a6 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    4196:	69eb      	ldr	r3, [r5, #28]
    4198:	781b      	ldrb	r3, [r3, #0]
    419a:	2be5      	cmp	r3, #229	; 0xe5
    419c:	d0ec      	beq.n	4178 <dir_alloc+0x16>
    419e:	2b00      	cmp	r3, #0
    41a0:	d0ea      	beq.n	4178 <dir_alloc+0x16>
				n = 0;				/* Not a free entry, restart to search */
    41a2:	2700      	movs	r7, #0
    41a4:	e7eb      	b.n	417e <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    41a6:	2804      	cmp	r0, #4
    41a8:	d000      	beq.n	41ac <dir_alloc+0x4a>
}
    41aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    41ac:	3003      	adds	r0, #3
    41ae:	e7fc      	b.n	41aa <dir_alloc+0x48>

000041b0 <create_name>:
{
    41b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    41b2:	46de      	mov	lr, fp
    41b4:	4657      	mov	r7, sl
    41b6:	464e      	mov	r6, r9
    41b8:	4645      	mov	r5, r8
    41ba:	b5e0      	push	{r5, r6, r7, lr}
    41bc:	b083      	sub	sp, #12
    41be:	9001      	str	r0, [sp, #4]
    41c0:	468a      	mov	sl, r1
	p = *path; sfn = dp->fn;
    41c2:	680b      	ldr	r3, [r1, #0]
    41c4:	4698      	mov	r8, r3
    41c6:	0003      	movs	r3, r0
    41c8:	2220      	movs	r2, #32
    41ca:	4694      	mov	ip, r2
    41cc:	4463      	add	r3, ip
    41ce:	469b      	mov	fp, r3
	memset(sfn, ' ', 11);
    41d0:	3a15      	subs	r2, #21
    41d2:	2120      	movs	r1, #32
    41d4:	0018      	movs	r0, r3
    41d6:	f003 f98d 	bl	74f4 <memset>
	si = i = 0; ni = 8;
    41da:	2700      	movs	r7, #0
    41dc:	2600      	movs	r6, #0
    41de:	2308      	movs	r3, #8
    41e0:	4699      	mov	r9, r3
		c = (BYTE)p[si++];				/* Get a byte */
    41e2:	1c75      	adds	r5, r6, #1
    41e4:	4643      	mov	r3, r8
    41e6:	5d9c      	ldrb	r4, [r3, r6]
		if (c <= ' ') break; 			/* Break if end of the path name */
    41e8:	2c20      	cmp	r4, #32
    41ea:	d91b      	bls.n	4224 <create_name+0x74>
		if (IsSeparator(c)) {			/* Break if a separator is found */
    41ec:	2c2f      	cmp	r4, #47	; 0x2f
    41ee:	d013      	beq.n	4218 <create_name+0x68>
    41f0:	2c5c      	cmp	r4, #92	; 0x5c
    41f2:	d011      	beq.n	4218 <create_name+0x68>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    41f4:	2c2e      	cmp	r4, #46	; 0x2e
    41f6:	d001      	beq.n	41fc <create_name+0x4c>
    41f8:	45b9      	cmp	r9, r7
    41fa:	d81f      	bhi.n	423c <create_name+0x8c>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    41fc:	464b      	mov	r3, r9
    41fe:	2b0b      	cmp	r3, #11
    4200:	d066      	beq.n	42d0 <create_name+0x120>
    4202:	2c2e      	cmp	r4, #46	; 0x2e
    4204:	d015      	beq.n	4232 <create_name+0x82>
    4206:	2006      	movs	r0, #6
}
    4208:	b003      	add	sp, #12
    420a:	bc3c      	pop	{r2, r3, r4, r5}
    420c:	4690      	mov	r8, r2
    420e:	4699      	mov	r9, r3
    4210:	46a2      	mov	sl, r4
    4212:	46ab      	mov	fp, r5
    4214:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
    4216:	3501      	adds	r5, #1
    4218:	4643      	mov	r3, r8
    421a:	5d5b      	ldrb	r3, [r3, r5]
    421c:	2b2f      	cmp	r3, #47	; 0x2f
    421e:	d0fa      	beq.n	4216 <create_name+0x66>
    4220:	2b5c      	cmp	r3, #92	; 0x5c
    4222:	d0f8      	beq.n	4216 <create_name+0x66>
	*path = &p[si];						/* Return pointer to the next segment */
    4224:	4445      	add	r5, r8
    4226:	4653      	mov	r3, sl
    4228:	601d      	str	r5, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    422a:	2f00      	cmp	r7, #0
    422c:	d137      	bne.n	429e <create_name+0xee>
    422e:	2006      	movs	r0, #6
    4230:	e7ea      	b.n	4208 <create_name+0x58>
		c = (BYTE)p[si++];				/* Get a byte */
    4232:	002e      	movs	r6, r5
			i = 8; ni = 11;				/* Enter file extension field */
    4234:	2708      	movs	r7, #8
    4236:	230b      	movs	r3, #11
    4238:	4699      	mov	r9, r3
    423a:	e7d2      	b.n	41e2 <create_name+0x32>
		if (c >= 0x80) {				/* Is SBC extended character? */
    423c:	b263      	sxtb	r3, r4
    423e:	2b00      	cmp	r3, #0
    4240:	db16      	blt.n	4270 <create_name+0xc0>
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
    4242:	0020      	movs	r0, r4
    4244:	f7ff f9c0 	bl	35c8 <dbc_1st>
    4248:	2800      	cmp	r0, #0
    424a:	d016      	beq.n	427a <create_name+0xca>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    424c:	3602      	adds	r6, #2
    424e:	4643      	mov	r3, r8
    4250:	5d5d      	ldrb	r5, [r3, r5]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    4252:	0028      	movs	r0, r5
    4254:	f7ff f9ba 	bl	35cc <dbc_2nd>
    4258:	2800      	cmp	r0, #0
    425a:	d03b      	beq.n	42d4 <create_name+0x124>
    425c:	464b      	mov	r3, r9
    425e:	3b01      	subs	r3, #1
    4260:	429f      	cmp	r7, r3
    4262:	d239      	bcs.n	42d8 <create_name+0x128>
			sfn[i++] = c;
    4264:	1c7b      	adds	r3, r7, #1
    4266:	465a      	mov	r2, fp
    4268:	55d4      	strb	r4, [r2, r7]
			sfn[i++] = d;
    426a:	54d5      	strb	r5, [r2, r3]
    426c:	3702      	adds	r7, #2
    426e:	e7b8      	b.n	41e2 <create_name+0x32>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    4270:	237f      	movs	r3, #127	; 0x7f
    4272:	401c      	ands	r4, r3
    4274:	4b1a      	ldr	r3, [pc, #104]	; (42e0 <create_name+0x130>)
    4276:	5d1c      	ldrb	r4, [r3, r4]
    4278:	e7e3      	b.n	4242 <create_name+0x92>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    427a:	0021      	movs	r1, r4
    427c:	4819      	ldr	r0, [pc, #100]	; (42e4 <create_name+0x134>)
    427e:	f003 f9ef 	bl	7660 <strchr>
    4282:	2800      	cmp	r0, #0
    4284:	d12a      	bne.n	42dc <create_name+0x12c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    4286:	0023      	movs	r3, r4
    4288:	3b61      	subs	r3, #97	; 0x61
    428a:	b2db      	uxtb	r3, r3
    428c:	2b19      	cmp	r3, #25
    428e:	d801      	bhi.n	4294 <create_name+0xe4>
    4290:	3c20      	subs	r4, #32
    4292:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
    4294:	465b      	mov	r3, fp
    4296:	55dc      	strb	r4, [r3, r7]
    4298:	3701      	adds	r7, #1
		c = (BYTE)p[si++];				/* Get a byte */
    429a:	002e      	movs	r6, r5
    429c:	e7a1      	b.n	41e2 <create_name+0x32>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    429e:	2320      	movs	r3, #32
    42a0:	9a01      	ldr	r2, [sp, #4]
    42a2:	5cd3      	ldrb	r3, [r2, r3]
    42a4:	2be5      	cmp	r3, #229	; 0xe5
    42a6:	d006      	beq.n	42b6 <create_name+0x106>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    42a8:	2c20      	cmp	r4, #32
    42aa:	d909      	bls.n	42c0 <create_name+0x110>
    42ac:	782b      	ldrb	r3, [r5, #0]
    42ae:	2b20      	cmp	r3, #32
    42b0:	d80c      	bhi.n	42cc <create_name+0x11c>
    42b2:	2204      	movs	r2, #4
    42b4:	e005      	b.n	42c2 <create_name+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    42b6:	2205      	movs	r2, #5
    42b8:	3bc5      	subs	r3, #197	; 0xc5
    42ba:	9901      	ldr	r1, [sp, #4]
    42bc:	54ca      	strb	r2, [r1, r3]
    42be:	e7f3      	b.n	42a8 <create_name+0xf8>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    42c0:	2204      	movs	r2, #4
    42c2:	232b      	movs	r3, #43	; 0x2b
    42c4:	9901      	ldr	r1, [sp, #4]
    42c6:	54ca      	strb	r2, [r1, r3]
	return FR_OK;
    42c8:	2000      	movs	r0, #0
    42ca:	e79d      	b.n	4208 <create_name+0x58>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    42cc:	2200      	movs	r2, #0
    42ce:	e7f8      	b.n	42c2 <create_name+0x112>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    42d0:	2006      	movs	r0, #6
    42d2:	e799      	b.n	4208 <create_name+0x58>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    42d4:	2006      	movs	r0, #6
    42d6:	e797      	b.n	4208 <create_name+0x58>
    42d8:	2006      	movs	r0, #6
    42da:	e795      	b.n	4208 <create_name+0x58>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    42dc:	2006      	movs	r0, #6
    42de:	e793      	b.n	4208 <create_name+0x58>
    42e0:	0000f3f4 	.word	0x0000f3f4
    42e4:	0000f480 	.word	0x0000f480

000042e8 <follow_path>:
{
    42e8:	b530      	push	{r4, r5, lr}
    42ea:	b083      	sub	sp, #12
    42ec:	0004      	movs	r4, r0
    42ee:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
    42f0:	6805      	ldr	r5, [r0, #0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
    42f2:	e001      	b.n	42f8 <follow_path+0x10>
    42f4:	3301      	adds	r3, #1
    42f6:	9301      	str	r3, [sp, #4]
    42f8:	9b01      	ldr	r3, [sp, #4]
    42fa:	781a      	ldrb	r2, [r3, #0]
    42fc:	2a2f      	cmp	r2, #47	; 0x2f
    42fe:	d0f9      	beq.n	42f4 <follow_path+0xc>
    4300:	2a5c      	cmp	r2, #92	; 0x5c
    4302:	d0f7      	beq.n	42f4 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
    4304:	2200      	movs	r2, #0
    4306:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    4308:	781b      	ldrb	r3, [r3, #0]
    430a:	2b1f      	cmp	r3, #31
    430c:	d91c      	bls.n	4348 <follow_path+0x60>
			res = create_name(dp, &path);	/* Get a segment name of the path */
    430e:	a901      	add	r1, sp, #4
    4310:	0020      	movs	r0, r4
    4312:	f7ff ff4d 	bl	41b0 <create_name>
			if (res != FR_OK) break;
    4316:	2800      	cmp	r0, #0
    4318:	d11d      	bne.n	4356 <follow_path+0x6e>
			res = dir_find(dp);				/* Find an object with the segment name */
    431a:	0020      	movs	r0, r4
    431c:	f7ff fef6 	bl	410c <dir_find>
			ns = dp->fn[NSFLAG];
    4320:	232b      	movs	r3, #43	; 0x2b
    4322:	5ce3      	ldrb	r3, [r4, r3]
			if (res != FR_OK) {				/* Failed to find the object */
    4324:	2800      	cmp	r0, #0
    4326:	d118      	bne.n	435a <follow_path+0x72>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
    4328:	075b      	lsls	r3, r3, #29
    432a:	d414      	bmi.n	4356 <follow_path+0x6e>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    432c:	79a3      	ldrb	r3, [r4, #6]
    432e:	06db      	lsls	r3, r3, #27
    4330:	d519      	bpl.n	4366 <follow_path+0x7e>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    4332:	002b      	movs	r3, r5
    4334:	3330      	adds	r3, #48	; 0x30
    4336:	6922      	ldr	r2, [r4, #16]
    4338:	05d1      	lsls	r1, r2, #23
    433a:	0dc9      	lsrs	r1, r1, #23
    433c:	1859      	adds	r1, r3, r1
    433e:	0028      	movs	r0, r5
    4340:	f7ff f952 	bl	35e8 <ld_clust>
    4344:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
    4346:	e7e2      	b.n	430e <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
    4348:	3280      	adds	r2, #128	; 0x80
    434a:	232b      	movs	r3, #43	; 0x2b
    434c:	54e2      	strb	r2, [r4, r3]
		res = dir_sdi(dp, 0);
    434e:	2100      	movs	r1, #0
    4350:	0020      	movs	r0, r4
    4352:	f7ff fd21 	bl	3d98 <dir_sdi>
}
    4356:	b003      	add	sp, #12
    4358:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
    435a:	2804      	cmp	r0, #4
    435c:	d1fb      	bne.n	4356 <follow_path+0x6e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    435e:	075b      	lsls	r3, r3, #29
    4360:	d4f9      	bmi.n	4356 <follow_path+0x6e>
    4362:	2005      	movs	r0, #5
    4364:	e7f7      	b.n	4356 <follow_path+0x6e>
				res = FR_NO_PATH; break;
    4366:	2005      	movs	r0, #5
    4368:	e7f5      	b.n	4356 <follow_path+0x6e>

0000436a <dir_register>:
{
    436a:	b570      	push	{r4, r5, r6, lr}
    436c:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
    436e:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
    4370:	2101      	movs	r1, #1
    4372:	f7ff fef6 	bl	4162 <dir_alloc>
    4376:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    4378:	d001      	beq.n	437e <dir_register+0x14>
}
    437a:	0020      	movs	r0, r4
    437c:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
    437e:	69a9      	ldr	r1, [r5, #24]
    4380:	0030      	movs	r0, r6
    4382:	f7ff f9d0 	bl	3726 <move_window>
    4386:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    4388:	d1f7      	bne.n	437a <dir_register+0x10>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
    438a:	2220      	movs	r2, #32
    438c:	2100      	movs	r1, #0
    438e:	69e8      	ldr	r0, [r5, #28]
    4390:	f003 f8b0 	bl	74f4 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    4394:	69e8      	ldr	r0, [r5, #28]
    4396:	0029      	movs	r1, r5
    4398:	3120      	adds	r1, #32
    439a:	220b      	movs	r2, #11
    439c:	f003 f868 	bl	7470 <memcpy>
			fs->wflag = 1;
    43a0:	2301      	movs	r3, #1
    43a2:	7133      	strb	r3, [r6, #4]
    43a4:	e7e9      	b.n	437a <dir_register+0x10>
	...

000043a8 <sync_fs>:
{
    43a8:	b570      	push	{r4, r5, r6, lr}
    43aa:	0005      	movs	r5, r0
	res = sync_window(fs);
    43ac:	f7ff f991 	bl	36d2 <sync_window>
    43b0:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    43b2:	d10a      	bne.n	43ca <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    43b4:	782b      	ldrb	r3, [r5, #0]
    43b6:	2b03      	cmp	r3, #3
    43b8:	d009      	beq.n	43ce <sync_fs+0x26>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    43ba:	7868      	ldrb	r0, [r5, #1]
    43bc:	2200      	movs	r2, #0
    43be:	2100      	movs	r1, #0
    43c0:	f000 fc9e 	bl	4d00 <disk_ioctl>
    43c4:	2800      	cmp	r0, #0
    43c6:	d000      	beq.n	43ca <sync_fs+0x22>
    43c8:	2401      	movs	r4, #1
}
    43ca:	0020      	movs	r0, r4
    43cc:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    43ce:	796b      	ldrb	r3, [r5, #5]
    43d0:	2b01      	cmp	r3, #1
    43d2:	d1f2      	bne.n	43ba <sync_fs+0x12>
			memset(fs->win, 0, sizeof fs->win);
    43d4:	002e      	movs	r6, r5
    43d6:	3630      	adds	r6, #48	; 0x30
    43d8:	2280      	movs	r2, #128	; 0x80
    43da:	0092      	lsls	r2, r2, #2
    43dc:	2100      	movs	r1, #0
    43de:	0030      	movs	r0, r6
    43e0:	f003 f888 	bl	74f4 <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
    43e4:	4912      	ldr	r1, [pc, #72]	; (4430 <sync_fs+0x88>)
    43e6:	4b13      	ldr	r3, [pc, #76]	; (4434 <sync_fs+0x8c>)
    43e8:	18e8      	adds	r0, r5, r3
    43ea:	f7ff f8e1 	bl	35b0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
    43ee:	4912      	ldr	r1, [pc, #72]	; (4438 <sync_fs+0x90>)
    43f0:	0030      	movs	r0, r6
    43f2:	f7ff f8e1 	bl	35b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
    43f6:	2385      	movs	r3, #133	; 0x85
    43f8:	009b      	lsls	r3, r3, #2
    43fa:	18e8      	adds	r0, r5, r3
    43fc:	490f      	ldr	r1, [pc, #60]	; (443c <sync_fs+0x94>)
    43fe:	f7ff f8db 	bl	35b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    4402:	2386      	movs	r3, #134	; 0x86
    4404:	009b      	lsls	r3, r3, #2
    4406:	18e8      	adds	r0, r5, r3
    4408:	6929      	ldr	r1, [r5, #16]
    440a:	f7ff f8d5 	bl	35b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    440e:	2387      	movs	r3, #135	; 0x87
    4410:	009b      	lsls	r3, r3, #2
    4412:	18e8      	adds	r0, r5, r3
    4414:	68e9      	ldr	r1, [r5, #12]
    4416:	f7ff f8cf 	bl	35b8 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    441a:	69eb      	ldr	r3, [r5, #28]
    441c:	1c5a      	adds	r2, r3, #1
    441e:	62ea      	str	r2, [r5, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    4420:	7868      	ldrb	r0, [r5, #1]
    4422:	2301      	movs	r3, #1
    4424:	0031      	movs	r1, r6
    4426:	f000 fc21 	bl	4c6c <disk_write>
			fs->fsi_flag = 0;
    442a:	2300      	movs	r3, #0
    442c:	716b      	strb	r3, [r5, #5]
    442e:	e7c4      	b.n	43ba <sync_fs+0x12>
    4430:	0000aa55 	.word	0x0000aa55
    4434:	0000022e 	.word	0x0000022e
    4438:	41615252 	.word	0x41615252
    443c:	61417272 	.word	0x61417272

00004440 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
    4440:	b530      	push	{r4, r5, lr}
    4442:	b085      	sub	sp, #20
    4444:	9001      	str	r0, [sp, #4]
    4446:	9100      	str	r1, [sp, #0]
    4448:	0014      	movs	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    444a:	9103      	str	r1, [sp, #12]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
    444c:	a803      	add	r0, sp, #12
    444e:	f7ff f8f1 	bl	3634 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    4452:	2800      	cmp	r0, #0
    4454:	db1d      	blt.n	4492 <f_mount+0x52>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
    4456:	0083      	lsls	r3, r0, #2
    4458:	4a0f      	ldr	r2, [pc, #60]	; (4498 <f_mount+0x58>)
    445a:	589a      	ldr	r2, [r3, r2]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
    445c:	2a00      	cmp	r2, #0
    445e:	d003      	beq.n	4468 <f_mount+0x28>
		FatFs[vol] = 0;
    4460:	2100      	movs	r1, #0
    4462:	4d0d      	ldr	r5, [pc, #52]	; (4498 <f_mount+0x58>)
    4464:	5159      	str	r1, [r3, r5]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
    4466:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {					/* Register new filesystem object */
    4468:	9b01      	ldr	r3, [sp, #4]
    446a:	2b00      	cmp	r3, #0
    446c:	d007      	beq.n	447e <f_mount+0x3e>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
    446e:	7058      	strb	r0, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
    4470:	2300      	movs	r3, #0
    4472:	9a01      	ldr	r2, [sp, #4]
    4474:	7013      	strb	r3, [r2, #0]
		FatFs[vol] = fs;		/* Register new fs object */
    4476:	0080      	lsls	r0, r0, #2
    4478:	4b07      	ldr	r3, [pc, #28]	; (4498 <f_mount+0x58>)
    447a:	9a01      	ldr	r2, [sp, #4]
    447c:	50c2      	str	r2, [r0, r3]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
    447e:	2c00      	cmp	r4, #0
    4480:	d101      	bne.n	4486 <f_mount+0x46>
    4482:	2000      	movs	r0, #0
    4484:	e006      	b.n	4494 <f_mount+0x54>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    4486:	2200      	movs	r2, #0
    4488:	a901      	add	r1, sp, #4
    448a:	4668      	mov	r0, sp
    448c:	f7ff fa12 	bl	38b4 <mount_volume>
	LEAVE_FF(fs, res);
    4490:	e000      	b.n	4494 <f_mount+0x54>
	if (vol < 0) return FR_INVALID_DRIVE;
    4492:	200b      	movs	r0, #11
}
    4494:	b005      	add	sp, #20
    4496:	bd30      	pop	{r4, r5, pc}
    4498:	20000adc 	.word	0x20000adc

0000449c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
    449c:	b5f0      	push	{r4, r5, r6, r7, lr}
    449e:	46ce      	mov	lr, r9
    44a0:	4647      	mov	r7, r8
    44a2:	b580      	push	{r7, lr}
    44a4:	b091      	sub	sp, #68	; 0x44
    44a6:	0007      	movs	r7, r0
    44a8:	9103      	str	r1, [sp, #12]
    44aa:	0016      	movs	r6, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    44ac:	2800      	cmp	r0, #0
    44ae:	d100      	bne.n	44b2 <f_open+0x16>
    44b0:	e0e3      	b.n	467a <f_open+0x1de>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    44b2:	253f      	movs	r5, #63	; 0x3f
    44b4:	4015      	ands	r5, r2
	res = mount_volume(&path, &fs, mode);
    44b6:	002a      	movs	r2, r5
    44b8:	a904      	add	r1, sp, #16
    44ba:	a803      	add	r0, sp, #12
    44bc:	f7ff f9fa 	bl	38b4 <mount_volume>
    44c0:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    44c2:	d005      	beq.n	44d0 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    44c4:	2c00      	cmp	r4, #0
    44c6:	d100      	bne.n	44ca <f_open+0x2e>
    44c8:	e0d8      	b.n	467c <f_open+0x1e0>
    44ca:	2300      	movs	r3, #0
    44cc:	603b      	str	r3, [r7, #0]
    44ce:	e0d5      	b.n	467c <f_open+0x1e0>
		dj.obj.fs = fs;
    44d0:	9b04      	ldr	r3, [sp, #16]
    44d2:	9305      	str	r3, [sp, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
    44d4:	9903      	ldr	r1, [sp, #12]
    44d6:	a805      	add	r0, sp, #20
    44d8:	f7ff ff06 	bl	42e8 <follow_path>
    44dc:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    44de:	d104      	bne.n	44ea <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    44e0:	232b      	movs	r3, #43	; 0x2b
    44e2:	aa05      	add	r2, sp, #20
    44e4:	56d3      	ldrsb	r3, [r2, r3]
    44e6:	2b00      	cmp	r3, #0
    44e8:	db3e      	blt.n	4568 <f_open+0xcc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    44ea:	231c      	movs	r3, #28
    44ec:	4233      	tst	r3, r6
    44ee:	d100      	bne.n	44f2 <f_open+0x56>
    44f0:	e089      	b.n	4606 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
    44f2:	2c00      	cmp	r4, #0
    44f4:	d03f      	beq.n	4576 <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    44f6:	2c04      	cmp	r4, #4
    44f8:	d038      	beq.n	456c <f_open+0xd0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    44fa:	2308      	movs	r3, #8
    44fc:	431d      	orrs	r5, r3
    44fe:	b2ed      	uxtb	r5, r5
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    4500:	2c00      	cmp	r4, #0
    4502:	d101      	bne.n	4508 <f_open+0x6c>
    4504:	072b      	lsls	r3, r5, #28
    4506:	d441      	bmi.n	458c <f_open+0xf0>
		if (res == FR_OK) {
    4508:	2c00      	cmp	r4, #0
    450a:	d109      	bne.n	4520 <f_open+0x84>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    450c:	072b      	lsls	r3, r5, #28
    450e:	d502      	bpl.n	4516 <f_open+0x7a>
    4510:	2340      	movs	r3, #64	; 0x40
    4512:	431d      	orrs	r5, r3
    4514:	b2ed      	uxtb	r5, r5
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    4516:	9b04      	ldr	r3, [sp, #16]
    4518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    451a:	623b      	str	r3, [r7, #32]
			fp->dir_ptr = dj.dir;
    451c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    451e:	627b      	str	r3, [r7, #36]	; 0x24
		if (res == FR_OK) {
    4520:	2c00      	cmp	r4, #0
    4522:	d1cf      	bne.n	44c4 <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    4524:	9b04      	ldr	r3, [sp, #16]
    4526:	4699      	mov	r9, r3
    4528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    452a:	4698      	mov	r8, r3
    452c:	0019      	movs	r1, r3
    452e:	4648      	mov	r0, r9
    4530:	f7ff f85a 	bl	35e8 <ld_clust>
    4534:	0006      	movs	r6, r0
    4536:	60b8      	str	r0, [r7, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    4538:	4640      	mov	r0, r8
    453a:	301c      	adds	r0, #28
    453c:	f7ff f82d 	bl	359a <ld_dword>
    4540:	4680      	mov	r8, r0
    4542:	60f8      	str	r0, [r7, #12]
			fp->obj.fs = fs;	/* Validate the file object */
    4544:	464b      	mov	r3, r9
    4546:	603b      	str	r3, [r7, #0]
			fp->obj.id = fs->id;
    4548:	88db      	ldrh	r3, [r3, #6]
    454a:	80bb      	strh	r3, [r7, #4]
			fp->flag = mode;	/* Set file access mode */
    454c:	743d      	strb	r5, [r7, #16]
			fp->err = 0;		/* Clear error flag */
    454e:	2300      	movs	r3, #0
    4550:	747b      	strb	r3, [r7, #17]
			fp->sect = 0;		/* Invalidate current data sector */
    4552:	61fb      	str	r3, [r7, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
    4554:	617b      	str	r3, [r7, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    4556:	06ab      	lsls	r3, r5, #26
    4558:	d5b4      	bpl.n	44c4 <f_open+0x28>
    455a:	2800      	cmp	r0, #0
    455c:	d0b2      	beq.n	44c4 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    455e:	6178      	str	r0, [r7, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    4560:	464b      	mov	r3, r9
    4562:	895d      	ldrh	r5, [r3, #10]
    4564:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    4566:	e064      	b.n	4632 <f_open+0x196>
				res = FR_INVALID_NAME;
    4568:	3406      	adds	r4, #6
    456a:	e7be      	b.n	44ea <f_open+0x4e>
					res = dir_register(&dj);
    456c:	a805      	add	r0, sp, #20
    456e:	f7ff fefc 	bl	436a <dir_register>
    4572:	0004      	movs	r4, r0
    4574:	e7c1      	b.n	44fa <f_open+0x5e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4576:	ab05      	add	r3, sp, #20
    4578:	799b      	ldrb	r3, [r3, #6]
    457a:	2211      	movs	r2, #17
    457c:	421a      	tst	r2, r3
    457e:	d103      	bne.n	4588 <f_open+0xec>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    4580:	0773      	lsls	r3, r6, #29
    4582:	d5bd      	bpl.n	4500 <f_open+0x64>
    4584:	2408      	movs	r4, #8
    4586:	e7bb      	b.n	4500 <f_open+0x64>
					res = FR_DENIED;
    4588:	2407      	movs	r4, #7
    458a:	e7b9      	b.n	4500 <f_open+0x64>
					st_dword(dj.dir + DIR_CrtTime, tm);
    458c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    458e:	9301      	str	r3, [sp, #4]
    4590:	4e3d      	ldr	r6, [pc, #244]	; (4688 <f_open+0x1ec>)
    4592:	0018      	movs	r0, r3
    4594:	300e      	adds	r0, #14
    4596:	0031      	movs	r1, r6
    4598:	f7ff f80e 	bl	35b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
    459c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    459e:	9301      	str	r3, [sp, #4]
    45a0:	0018      	movs	r0, r3
    45a2:	3016      	adds	r0, #22
    45a4:	0031      	movs	r1, r6
    45a6:	f7ff f807 	bl	35b8 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    45aa:	9b04      	ldr	r3, [sp, #16]
    45ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    45ae:	0031      	movs	r1, r6
    45b0:	9301      	str	r3, [sp, #4]
    45b2:	0018      	movs	r0, r3
    45b4:	f7ff f818 	bl	35e8 <ld_clust>
    45b8:	4681      	mov	r9, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    45ba:	2320      	movs	r3, #32
    45bc:	72f3      	strb	r3, [r6, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    45be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    45c0:	9202      	str	r2, [sp, #8]
    45c2:	2200      	movs	r2, #0
    45c4:	9902      	ldr	r1, [sp, #8]
    45c6:	9801      	ldr	r0, [sp, #4]
    45c8:	f7ff f821 	bl	360e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    45cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    45ce:	301c      	adds	r0, #28
    45d0:	2100      	movs	r1, #0
    45d2:	f7fe fff1 	bl	35b8 <st_dword>
					fs->wflag = 1;
    45d6:	9b04      	ldr	r3, [sp, #16]
    45d8:	2201      	movs	r2, #1
    45da:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
    45dc:	464a      	mov	r2, r9
    45de:	2a00      	cmp	r2, #0
    45e0:	d092      	beq.n	4508 <f_open+0x6c>
						sc = fs->winsect;
    45e2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
    45e4:	2200      	movs	r2, #0
    45e6:	4649      	mov	r1, r9
    45e8:	a805      	add	r0, sp, #20
    45ea:	f7ff fcbc 	bl	3f66 <remove_chain>
    45ee:	1e04      	subs	r4, r0, #0
						if (res == FR_OK) {
    45f0:	d18a      	bne.n	4508 <f_open+0x6c>
							res = move_window(fs, sc);
    45f2:	0031      	movs	r1, r6
    45f4:	9804      	ldr	r0, [sp, #16]
    45f6:	f7ff f896 	bl	3726 <move_window>
    45fa:	0004      	movs	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    45fc:	464b      	mov	r3, r9
    45fe:	3b01      	subs	r3, #1
    4600:	9a04      	ldr	r2, [sp, #16]
    4602:	60d3      	str	r3, [r2, #12]
    4604:	e780      	b.n	4508 <f_open+0x6c>
			if (res == FR_OK) {					/* Is the object exsiting? */
    4606:	2c00      	cmp	r4, #0
    4608:	d000      	beq.n	460c <f_open+0x170>
    460a:	e77d      	b.n	4508 <f_open+0x6c>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    460c:	ab05      	add	r3, sp, #20
    460e:	799b      	ldrb	r3, [r3, #6]
    4610:	06da      	lsls	r2, r3, #27
    4612:	d407      	bmi.n	4624 <f_open+0x188>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    4614:	07b2      	lsls	r2, r6, #30
    4616:	d400      	bmi.n	461a <f_open+0x17e>
    4618:	e776      	b.n	4508 <f_open+0x6c>
    461a:	07db      	lsls	r3, r3, #31
    461c:	d400      	bmi.n	4620 <f_open+0x184>
    461e:	e773      	b.n	4508 <f_open+0x6c>
						res = FR_DENIED;
    4620:	2407      	movs	r4, #7
    4622:	e771      	b.n	4508 <f_open+0x6c>
					res = FR_NO_FILE;
    4624:	2404      	movs	r4, #4
    4626:	e76f      	b.n	4508 <f_open+0x6c>
					if (clst <= 1) res = FR_INT_ERR;
    4628:	2402      	movs	r4, #2
    462a:	e00d      	b.n	4648 <f_open+0x1ac>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    462c:	4643      	mov	r3, r8
    462e:	1b5b      	subs	r3, r3, r5
    4630:	4698      	mov	r8, r3
    4632:	2c00      	cmp	r4, #0
    4634:	d10c      	bne.n	4650 <f_open+0x1b4>
    4636:	45a8      	cmp	r8, r5
    4638:	d90a      	bls.n	4650 <f_open+0x1b4>
					clst = get_fat(&fp->obj, clst);
    463a:	0031      	movs	r1, r6
    463c:	0038      	movs	r0, r7
    463e:	f7ff fb3a 	bl	3cb6 <get_fat>
    4642:	0006      	movs	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
    4644:	2801      	cmp	r0, #1
    4646:	d9ef      	bls.n	4628 <f_open+0x18c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4648:	1c73      	adds	r3, r6, #1
    464a:	d1ef      	bne.n	462c <f_open+0x190>
    464c:	2401      	movs	r4, #1
    464e:	e7ed      	b.n	462c <f_open+0x190>
				fp->clust = clst;
    4650:	61be      	str	r6, [r7, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    4652:	2c00      	cmp	r4, #0
    4654:	d000      	beq.n	4658 <f_open+0x1bc>
    4656:	e735      	b.n	44c4 <f_open+0x28>
    4658:	4643      	mov	r3, r8
    465a:	05db      	lsls	r3, r3, #23
    465c:	d100      	bne.n	4660 <f_open+0x1c4>
    465e:	e731      	b.n	44c4 <f_open+0x28>
					sc = clst2sect(fs, clst);
    4660:	0031      	movs	r1, r6
    4662:	9804      	ldr	r0, [sp, #16]
    4664:	f7fe ffb4 	bl	35d0 <clst2sect>
					if (sc == 0) {
    4668:	2800      	cmp	r0, #0
    466a:	d004      	beq.n	4676 <f_open+0x1da>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    466c:	4643      	mov	r3, r8
    466e:	0a5b      	lsrs	r3, r3, #9
    4670:	18c3      	adds	r3, r0, r3
    4672:	61fb      	str	r3, [r7, #28]
    4674:	e726      	b.n	44c4 <f_open+0x28>
						res = FR_INT_ERR;
    4676:	2402      	movs	r4, #2
    4678:	e724      	b.n	44c4 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
    467a:	2409      	movs	r4, #9

	LEAVE_FF(fs, res);
}
    467c:	0020      	movs	r0, r4
    467e:	b011      	add	sp, #68	; 0x44
    4680:	bc0c      	pop	{r2, r3}
    4682:	4690      	mov	r8, r2
    4684:	4699      	mov	r9, r3
    4686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4688:	55660000 	.word	0x55660000

0000468c <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
    468c:	b5f0      	push	{r4, r5, r6, r7, lr}
    468e:	46de      	mov	lr, fp
    4690:	4657      	mov	r7, sl
    4692:	464e      	mov	r6, r9
    4694:	4645      	mov	r5, r8
    4696:	b5e0      	push	{r5, r6, r7, lr}
    4698:	b085      	sub	sp, #20
    469a:	0005      	movs	r5, r0
    469c:	000c      	movs	r4, r1
    469e:	0017      	movs	r7, r2
    46a0:	4699      	mov	r9, r3
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    46a2:	2300      	movs	r3, #0
    46a4:	464a      	mov	r2, r9
    46a6:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    46a8:	9000      	str	r0, [sp, #0]
    46aa:	a903      	add	r1, sp, #12
    46ac:	f7fe ffeb 	bl	3686 <validate>
    46b0:	1e06      	subs	r6, r0, #0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    46b2:	d106      	bne.n	46c2 <f_write+0x36>
    46b4:	7c6e      	ldrb	r6, [r5, #17]
    46b6:	2e00      	cmp	r6, #0
    46b8:	d103      	bne.n	46c2 <f_write+0x36>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    46ba:	7c2b      	ldrb	r3, [r5, #16]
    46bc:	079b      	lsls	r3, r3, #30
    46be:	d408      	bmi.n	46d2 <f_write+0x46>
    46c0:	2607      	movs	r6, #7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    46c2:	0030      	movs	r0, r6
    46c4:	b005      	add	sp, #20
    46c6:	bc3c      	pop	{r2, r3, r4, r5}
    46c8:	4690      	mov	r8, r2
    46ca:	4699      	mov	r9, r3
    46cc:	46a2      	mov	sl, r4
    46ce:	46ab      	mov	fp, r5
    46d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    46d2:	696b      	ldr	r3, [r5, #20]
    46d4:	19da      	adds	r2, r3, r7
    46d6:	4293      	cmp	r3, r2
    46d8:	d900      	bls.n	46dc <f_write+0x50>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    46da:	43df      	mvns	r7, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
    46dc:	46a0      	mov	r8, r4
    46de:	e05f      	b.n	47a0 <f_write+0x114>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    46e0:	2100      	movs	r1, #0
    46e2:	9800      	ldr	r0, [sp, #0]
    46e4:	f7ff fbae 	bl	3e44 <create_chain>
    46e8:	e06b      	b.n	47c2 <f_write+0x136>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    46ea:	69a9      	ldr	r1, [r5, #24]
    46ec:	9800      	ldr	r0, [sp, #0]
    46ee:	f7ff fba9 	bl	3e44 <create_chain>
    46f2:	e066      	b.n	47c2 <f_write+0x136>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    46f4:	2302      	movs	r3, #2
    46f6:	746b      	strb	r3, [r5, #17]
    46f8:	2602      	movs	r6, #2
    46fa:	e7e2      	b.n	46c2 <f_write+0x36>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    46fc:	2301      	movs	r3, #1
    46fe:	746b      	strb	r3, [r5, #17]
    4700:	2601      	movs	r6, #1
    4702:	e7de      	b.n	46c2 <f_write+0x36>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    4704:	f7fe ffe5 	bl	36d2 <sync_window>
    4708:	2800      	cmp	r0, #0
    470a:	d06a      	beq.n	47e2 <f_write+0x156>
    470c:	2301      	movs	r3, #1
    470e:	746b      	strb	r3, [r5, #17]
    4710:	2601      	movs	r6, #1
    4712:	e7d6      	b.n	46c2 <f_write+0x36>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    4714:	2302      	movs	r3, #2
    4716:	746b      	strb	r3, [r5, #17]
    4718:	2602      	movs	r6, #2
    471a:	e7d2      	b.n	46c2 <f_write+0x36>
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    471c:	2301      	movs	r3, #1
    471e:	746b      	strb	r3, [r5, #17]
    4720:	2601      	movs	r6, #1
    4722:	e7ce      	b.n	46c2 <f_write+0x36>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
    4724:	4650      	mov	r0, sl
    4726:	3030      	adds	r0, #48	; 0x30
    4728:	0249      	lsls	r1, r1, #9
    472a:	4441      	add	r1, r8
    472c:	2280      	movs	r2, #128	; 0x80
    472e:	0092      	lsls	r2, r2, #2
    4730:	f002 fe9e 	bl	7470 <memcpy>
					fs->wflag = 0;
    4734:	2300      	movs	r3, #0
    4736:	4652      	mov	r2, sl
    4738:	7113      	strb	r3, [r2, #4]
    473a:	e078      	b.n	482e <f_write+0x1a2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    473c:	696b      	ldr	r3, [r5, #20]
    473e:	68ea      	ldr	r2, [r5, #12]
    4740:	4293      	cmp	r3, r2
    4742:	d276      	bcs.n	4832 <f_write+0x1a6>
			fp->sect = sect;
    4744:	465b      	mov	r3, fp
    4746:	61eb      	str	r3, [r5, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    4748:	696b      	ldr	r3, [r5, #20]
    474a:	05dc      	lsls	r4, r3, #23
    474c:	0de4      	lsrs	r4, r4, #23
    474e:	2380      	movs	r3, #128	; 0x80
    4750:	009b      	lsls	r3, r3, #2
    4752:	1b1c      	subs	r4, r3, r4
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
    4754:	42a7      	cmp	r7, r4
    4756:	d200      	bcs.n	475a <f_write+0xce>
    4758:	003c      	movs	r4, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    475a:	69e9      	ldr	r1, [r5, #28]
    475c:	9803      	ldr	r0, [sp, #12]
    475e:	f7fe ffe2 	bl	3726 <move_window>
    4762:	2800      	cmp	r0, #0
    4764:	d172      	bne.n	484c <f_write+0x1c0>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    4766:	9803      	ldr	r0, [sp, #12]
    4768:	3030      	adds	r0, #48	; 0x30
    476a:	696b      	ldr	r3, [r5, #20]
    476c:	05db      	lsls	r3, r3, #23
    476e:	0ddb      	lsrs	r3, r3, #23
    4770:	18c0      	adds	r0, r0, r3
    4772:	0022      	movs	r2, r4
    4774:	4641      	mov	r1, r8
    4776:	f002 fe7b 	bl	7470 <memcpy>
		fs->wflag = 1;
    477a:	2301      	movs	r3, #1
    477c:	9a03      	ldr	r2, [sp, #12]
    477e:	7113      	strb	r3, [r2, #4]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
    4780:	1b3f      	subs	r7, r7, r4
    4782:	464b      	mov	r3, r9
    4784:	681b      	ldr	r3, [r3, #0]
    4786:	191b      	adds	r3, r3, r4
    4788:	464a      	mov	r2, r9
    478a:	6013      	str	r3, [r2, #0]
    478c:	44a0      	add	r8, r4
    478e:	696b      	ldr	r3, [r5, #20]
    4790:	469c      	mov	ip, r3
    4792:	4464      	add	r4, ip
    4794:	616c      	str	r4, [r5, #20]
    4796:	68eb      	ldr	r3, [r5, #12]
    4798:	429c      	cmp	r4, r3
    479a:	d200      	bcs.n	479e <f_write+0x112>
    479c:	001c      	movs	r4, r3
    479e:	60ec      	str	r4, [r5, #12]
    47a0:	2f00      	cmp	r7, #0
    47a2:	d057      	beq.n	4854 <f_write+0x1c8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    47a4:	696b      	ldr	r3, [r5, #20]
    47a6:	05da      	lsls	r2, r3, #23
    47a8:	d1ce      	bne.n	4748 <f_write+0xbc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    47aa:	0a5a      	lsrs	r2, r3, #9
    47ac:	9903      	ldr	r1, [sp, #12]
    47ae:	8949      	ldrh	r1, [r1, #10]
    47b0:	3901      	subs	r1, #1
    47b2:	4011      	ands	r1, r2
    47b4:	468a      	mov	sl, r1
			if (csect == 0) {				/* On the cluster boundary? */
    47b6:	d10f      	bne.n	47d8 <f_write+0x14c>
				if (fp->fptr == 0) {		/* On the top of the file? */
    47b8:	2b00      	cmp	r3, #0
    47ba:	d196      	bne.n	46ea <f_write+0x5e>
					clst = fp->obj.sclust;	/* Follow from the origin */
    47bc:	68a8      	ldr	r0, [r5, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
    47be:	2800      	cmp	r0, #0
    47c0:	d08e      	beq.n	46e0 <f_write+0x54>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    47c2:	2800      	cmp	r0, #0
    47c4:	d046      	beq.n	4854 <f_write+0x1c8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    47c6:	2801      	cmp	r0, #1
    47c8:	d094      	beq.n	46f4 <f_write+0x68>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    47ca:	1c43      	adds	r3, r0, #1
    47cc:	d096      	beq.n	46fc <f_write+0x70>
				fp->clust = clst;			/* Update current cluster */
    47ce:	61a8      	str	r0, [r5, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    47d0:	68ab      	ldr	r3, [r5, #8]
    47d2:	2b00      	cmp	r3, #0
    47d4:	d100      	bne.n	47d8 <f_write+0x14c>
    47d6:	60a8      	str	r0, [r5, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    47d8:	9803      	ldr	r0, [sp, #12]
    47da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    47dc:	69ea      	ldr	r2, [r5, #28]
    47de:	4293      	cmp	r3, r2
    47e0:	d090      	beq.n	4704 <f_write+0x78>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    47e2:	9b03      	ldr	r3, [sp, #12]
    47e4:	9301      	str	r3, [sp, #4]
    47e6:	69a9      	ldr	r1, [r5, #24]
    47e8:	0018      	movs	r0, r3
    47ea:	f7fe fef1 	bl	35d0 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    47ee:	2800      	cmp	r0, #0
    47f0:	d090      	beq.n	4714 <f_write+0x88>
			sect += csect;
    47f2:	4450      	add	r0, sl
    47f4:	4683      	mov	fp, r0
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    47f6:	0a7c      	lsrs	r4, r7, #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    47f8:	d0a0      	beq.n	473c <f_write+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    47fa:	4653      	mov	r3, sl
    47fc:	191b      	adds	r3, r3, r4
    47fe:	9a01      	ldr	r2, [sp, #4]
    4800:	8952      	ldrh	r2, [r2, #10]
    4802:	4293      	cmp	r3, r2
    4804:	d901      	bls.n	480a <f_write+0x17e>
					cc = fs->csize - csect;
    4806:	4653      	mov	r3, sl
    4808:	1ad4      	subs	r4, r2, r3
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    480a:	9b01      	ldr	r3, [sp, #4]
    480c:	7858      	ldrb	r0, [r3, #1]
    480e:	0023      	movs	r3, r4
    4810:	465a      	mov	r2, fp
    4812:	4641      	mov	r1, r8
    4814:	f000 fa2a 	bl	4c6c <disk_write>
    4818:	2800      	cmp	r0, #0
    481a:	d000      	beq.n	481e <f_write+0x192>
    481c:	e77e      	b.n	471c <f_write+0x90>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    481e:	9b03      	ldr	r3, [sp, #12]
    4820:	469a      	mov	sl, r3
    4822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4824:	465a      	mov	r2, fp
    4826:	1a99      	subs	r1, r3, r2
    4828:	428c      	cmp	r4, r1
    482a:	d900      	bls.n	482e <f_write+0x1a2>
    482c:	e77a      	b.n	4724 <f_write+0x98>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    482e:	0264      	lsls	r4, r4, #9
				continue;
    4830:	e7a6      	b.n	4780 <f_write+0xf4>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    4832:	9801      	ldr	r0, [sp, #4]
    4834:	f7fe ff4d 	bl	36d2 <sync_window>
    4838:	2800      	cmp	r0, #0
    483a:	d103      	bne.n	4844 <f_write+0x1b8>
				fs->winsect = sect;
    483c:	9b03      	ldr	r3, [sp, #12]
    483e:	465a      	mov	r2, fp
    4840:	62da      	str	r2, [r3, #44]	; 0x2c
    4842:	e77f      	b.n	4744 <f_write+0xb8>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    4844:	2301      	movs	r3, #1
    4846:	746b      	strb	r3, [r5, #17]
    4848:	2601      	movs	r6, #1
    484a:	e73a      	b.n	46c2 <f_write+0x36>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    484c:	2301      	movs	r3, #1
    484e:	746b      	strb	r3, [r5, #17]
    4850:	2601      	movs	r6, #1
    4852:	e736      	b.n	46c2 <f_write+0x36>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    4854:	7c2b      	ldrb	r3, [r5, #16]
    4856:	2240      	movs	r2, #64	; 0x40
    4858:	4313      	orrs	r3, r2
    485a:	742b      	strb	r3, [r5, #16]
	LEAVE_FF(fs, FR_OK);
    485c:	e731      	b.n	46c2 <f_write+0x36>
	...

00004860 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
    4860:	b530      	push	{r4, r5, lr}
    4862:	b083      	sub	sp, #12
    4864:	0004      	movs	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    4866:	a901      	add	r1, sp, #4
    4868:	f7fe ff0d 	bl	3686 <validate>
	if (res == FR_OK) {
    486c:	2800      	cmp	r0, #0
    486e:	d102      	bne.n	4876 <f_sync+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    4870:	7c23      	ldrb	r3, [r4, #16]
    4872:	065b      	lsls	r3, r3, #25
    4874:	d401      	bmi.n	487a <f_sync+0x1a>
			}
		}
	}

	LEAVE_FF(fs, res);
}
    4876:	b003      	add	sp, #12
    4878:	bd30      	pop	{r4, r5, pc}
				res = move_window(fs, fp->dir_sect);
    487a:	6a21      	ldr	r1, [r4, #32]
    487c:	9801      	ldr	r0, [sp, #4]
    487e:	f7fe ff52 	bl	3726 <move_window>
				if (res == FR_OK) {
    4882:	2800      	cmp	r0, #0
    4884:	d1f7      	bne.n	4876 <f_sync+0x16>
					dir = fp->dir_ptr;
    4886:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    4888:	7aeb      	ldrb	r3, [r5, #11]
    488a:	2220      	movs	r2, #32
    488c:	4313      	orrs	r3, r2
    488e:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    4890:	68a2      	ldr	r2, [r4, #8]
    4892:	0029      	movs	r1, r5
    4894:	6820      	ldr	r0, [r4, #0]
    4896:	f7fe feba 	bl	360e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    489a:	0028      	movs	r0, r5
    489c:	301c      	adds	r0, #28
    489e:	68e1      	ldr	r1, [r4, #12]
    48a0:	f7fe fe8a 	bl	35b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    48a4:	0028      	movs	r0, r5
    48a6:	3016      	adds	r0, #22
    48a8:	4909      	ldr	r1, [pc, #36]	; (48d0 <f_sync+0x70>)
    48aa:	f7fe fe85 	bl	35b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
    48ae:	0028      	movs	r0, r5
    48b0:	3012      	adds	r0, #18
    48b2:	2100      	movs	r1, #0
    48b4:	f7fe fe7c 	bl	35b0 <st_word>
					fs->wflag = 1;
    48b8:	2301      	movs	r3, #1
    48ba:	9a01      	ldr	r2, [sp, #4]
    48bc:	7113      	strb	r3, [r2, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
    48be:	0010      	movs	r0, r2
    48c0:	f7ff fd72 	bl	43a8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    48c4:	7c23      	ldrb	r3, [r4, #16]
    48c6:	2240      	movs	r2, #64	; 0x40
    48c8:	4393      	bics	r3, r2
    48ca:	7423      	strb	r3, [r4, #16]
    48cc:	e7d3      	b.n	4876 <f_sync+0x16>
    48ce:	46c0      	nop			; (mov r8, r8)
    48d0:	55660000 	.word	0x55660000

000048d4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
    48d4:	b510      	push	{r4, lr}
    48d6:	b082      	sub	sp, #8
    48d8:	0004      	movs	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    48da:	f7ff ffc1 	bl	4860 <f_sync>
	if (res == FR_OK)
    48de:	2800      	cmp	r0, #0
    48e0:	d001      	beq.n	48e6 <f_close+0x12>
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    48e2:	b002      	add	sp, #8
    48e4:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
    48e6:	a901      	add	r1, sp, #4
    48e8:	0020      	movs	r0, r4
    48ea:	f7fe fecc 	bl	3686 <validate>
		if (res == FR_OK) {
    48ee:	2800      	cmp	r0, #0
    48f0:	d1f7      	bne.n	48e2 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
    48f2:	2300      	movs	r3, #0
    48f4:	6023      	str	r3, [r4, #0]
    48f6:	e7f4      	b.n	48e2 <f_close+0xe>

000048f8 <rcvr_mmc>:
static
void rcvr_mmc (
BYTE *buff,	/* Pointer to read buffer */
UINT bc		/* Number of bytes to receive */
)
{
    48f8:	b510      	push	{r4, lr}
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    48fa:	b289      	uxth	r1, r1
    48fc:	f7fd fc0e 	bl	211c <EXT_SPI_ReadBuff>
}
    4900:	bd10      	pop	{r4, pc}

00004902 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    4902:	b500      	push	{lr}
    4904:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4906:	2280      	movs	r2, #128	; 0x80
    4908:	0312      	lsls	r2, r2, #12
    490a:	23c0      	movs	r3, #192	; 0xc0
    490c:	05db      	lsls	r3, r3, #23
    490e:	619a      	str	r2, [r3, #24]
	BYTE d;

	gpio_set_pin_level(SD_CS, true);				/* Set CS# high */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    4910:	2101      	movs	r1, #1
    4912:	466b      	mov	r3, sp
    4914:	1dd8      	adds	r0, r3, #7
    4916:	f7ff ffef 	bl	48f8 <rcvr_mmc>
}
    491a:	b003      	add	sp, #12
    491c:	bd00      	pop	{pc}

0000491e <dly_us>:
{
    491e:	b510      	push	{r4, lr}
    4920:	0004      	movs	r4, r0
		delay_us(n);
    4922:	b280      	uxth	r0, r0
    4924:	f7fb fc34 	bl	190 <delay_us>
	} while (--n);
    4928:	3c01      	subs	r4, #1
    492a:	2c00      	cmp	r4, #0
    492c:	d1fc      	bne.n	4928 <dly_us+0xa>
}
    492e:	bd10      	pop	{r4, pc}

00004930 <wait_ready>:
{
    4930:	b530      	push	{r4, r5, lr}
    4932:	b083      	sub	sp, #12
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    4934:	4c0a      	ldr	r4, [pc, #40]	; (4960 <wait_ready+0x30>)
    4936:	2c00      	cmp	r4, #0
    4938:	d00d      	beq.n	4956 <wait_ready+0x26>
		rcvr_mmc(&d, 1);
    493a:	466b      	mov	r3, sp
    493c:	1ddd      	adds	r5, r3, #7
    493e:	2101      	movs	r1, #1
    4940:	0028      	movs	r0, r5
    4942:	f7ff ffd9 	bl	48f8 <rcvr_mmc>
		if (d == 0xFF) break;
    4946:	782b      	ldrb	r3, [r5, #0]
    4948:	2bff      	cmp	r3, #255	; 0xff
    494a:	d004      	beq.n	4956 <wait_ready+0x26>
		dly_us(100);
    494c:	2064      	movs	r0, #100	; 0x64
    494e:	f7ff ffe6 	bl	491e <dly_us>
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    4952:	3c01      	subs	r4, #1
    4954:	e7ef      	b.n	4936 <wait_ready+0x6>
	return tmr ? 1 : 0;
    4956:	0020      	movs	r0, r4
    4958:	1e44      	subs	r4, r0, #1
    495a:	41a0      	sbcs	r0, r4
}
    495c:	b003      	add	sp, #12
    495e:	bd30      	pop	{r4, r5, pc}
    4960:	00001388 	.word	0x00001388

00004964 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    4964:	b510      	push	{r4, lr}
    4966:	b082      	sub	sp, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4968:	2280      	movs	r2, #128	; 0x80
    496a:	0312      	lsls	r2, r2, #12
    496c:	23c0      	movs	r3, #192	; 0xc0
    496e:	05db      	lsls	r3, r3, #23
    4970:	615a      	str	r2, [r3, #20]
	BYTE d;

	gpio_set_pin_level(SD_CS, false);			/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    4972:	2101      	movs	r1, #1
    4974:	466b      	mov	r3, sp
    4976:	1dd8      	adds	r0, r3, #7
    4978:	f7ff ffbe 	bl	48f8 <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    497c:	f7ff ffd8 	bl	4930 <wait_ready>
    4980:	1e04      	subs	r4, r0, #0
    4982:	d003      	beq.n	498c <select+0x28>
    4984:	2401      	movs	r4, #1

	deselect();
	return 0;			/* Failed */
}
    4986:	0020      	movs	r0, r4
    4988:	b002      	add	sp, #8
    498a:	bd10      	pop	{r4, pc}
	deselect();
    498c:	f7ff ffb9 	bl	4902 <deselect>
	return 0;			/* Failed */
    4990:	e7f9      	b.n	4986 <select+0x22>

00004992 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count */
)
{
    4992:	b5f0      	push	{r4, r5, r6, r7, lr}
    4994:	b083      	sub	sp, #12
    4996:	0006      	movs	r6, r0
    4998:	000f      	movs	r7, r1
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    499a:	25fa      	movs	r5, #250	; 0xfa
    499c:	00ad      	lsls	r5, r5, #2
    499e:	2d00      	cmp	r5, #0
    49a0:	d00c      	beq.n	49bc <rcvr_datablock+0x2a>
		rcvr_mmc(d, 1);
    49a2:	ac01      	add	r4, sp, #4
    49a4:	2101      	movs	r1, #1
    49a6:	0020      	movs	r0, r4
    49a8:	f7ff ffa6 	bl	48f8 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    49ac:	7823      	ldrb	r3, [r4, #0]
    49ae:	2bff      	cmp	r3, #255	; 0xff
    49b0:	d104      	bne.n	49bc <rcvr_datablock+0x2a>
		dly_us(100);
    49b2:	2064      	movs	r0, #100	; 0x64
    49b4:	f7ff ffb3 	bl	491e <dly_us>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    49b8:	3d01      	subs	r5, #1
    49ba:	e7f0      	b.n	499e <rcvr_datablock+0xc>
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    49bc:	ab01      	add	r3, sp, #4
    49be:	781b      	ldrb	r3, [r3, #0]
    49c0:	2bfe      	cmp	r3, #254	; 0xfe
    49c2:	d002      	beq.n	49ca <rcvr_datablock+0x38>
    49c4:	2000      	movs	r0, #0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    49c6:	b003      	add	sp, #12
    49c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    49ca:	0039      	movs	r1, r7
    49cc:	0030      	movs	r0, r6
    49ce:	f7ff ff93 	bl	48f8 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    49d2:	2102      	movs	r1, #2
    49d4:	a801      	add	r0, sp, #4
    49d6:	f7ff ff8f 	bl	48f8 <rcvr_mmc>
	return 1;						/* Return with success */
    49da:	2001      	movs	r0, #1
    49dc:	e7f3      	b.n	49c6 <rcvr_datablock+0x34>

000049de <xmit_mmc>:
{
    49de:	b510      	push	{r4, lr}
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    49e0:	b289      	uxth	r1, r1
    49e2:	f7fd fba7 	bl	2134 <EXT_SPI_WriteBuff>
}
    49e6:	bd10      	pop	{r4, pc}

000049e8 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
BYTE cmd,		/* Command byte */
DWORD arg		/* Argument */
)
{
    49e8:	b530      	push	{r4, r5, lr}
    49ea:	b083      	sub	sp, #12
    49ec:	0004      	movs	r4, r0
    49ee:	000d      	movs	r5, r1
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    49f0:	b243      	sxtb	r3, r0
    49f2:	2b00      	cmp	r3, #0
    49f4:	db09      	blt.n	4a0a <send_cmd+0x22>
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    49f6:	2c0c      	cmp	r4, #12
    49f8:	d010      	beq.n	4a1c <send_cmd+0x34>
		deselect();
    49fa:	f7ff ff82 	bl	4902 <deselect>
		if (!select()) return 0xFF;
    49fe:	f7ff ffb1 	bl	4964 <select>
    4a02:	2800      	cmp	r0, #0
    4a04:	d10a      	bne.n	4a1c <send_cmd+0x34>
    4a06:	20ff      	movs	r0, #255	; 0xff
    4a08:	e02f      	b.n	4a6a <send_cmd+0x82>
		cmd &= 0x7F;
    4a0a:	237f      	movs	r3, #127	; 0x7f
    4a0c:	401c      	ands	r4, r3
		n = send_cmd(CMD55, 0);
    4a0e:	2100      	movs	r1, #0
    4a10:	2037      	movs	r0, #55	; 0x37
    4a12:	f7ff ffe9 	bl	49e8 <send_cmd>
		if (n > 1) return n;
    4a16:	2801      	cmp	r0, #1
    4a18:	d827      	bhi.n	4a6a <send_cmd+0x82>
    4a1a:	e7ec      	b.n	49f6 <send_cmd+0xe>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    4a1c:	2340      	movs	r3, #64	; 0x40
    4a1e:	4323      	orrs	r3, r4
    4a20:	466a      	mov	r2, sp
    4a22:	7013      	strb	r3, [r2, #0]
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    4a24:	0e2b      	lsrs	r3, r5, #24
    4a26:	7053      	strb	r3, [r2, #1]
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    4a28:	0c2b      	lsrs	r3, r5, #16
    4a2a:	7093      	strb	r3, [r2, #2]
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    4a2c:	0a2b      	lsrs	r3, r5, #8
    4a2e:	70d3      	strb	r3, [r2, #3]
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    4a30:	7115      	strb	r5, [r2, #4]
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    4a32:	2c00      	cmp	r4, #0
    4a34:	d01b      	beq.n	4a6e <send_cmd+0x86>
	n = 0x01;						/* Dummy CRC + Stop */
    4a36:	2301      	movs	r3, #1
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    4a38:	2c08      	cmp	r4, #8
    4a3a:	d01a      	beq.n	4a72 <send_cmd+0x8a>
	buf[5] = n;
    4a3c:	466a      	mov	r2, sp
    4a3e:	7153      	strb	r3, [r2, #5]
	xmit_mmc(buf, 6);
    4a40:	2106      	movs	r1, #6
    4a42:	4668      	mov	r0, sp
    4a44:	f7ff ffcb 	bl	49de <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    4a48:	2c0c      	cmp	r4, #12
    4a4a:	d014      	beq.n	4a76 <send_cmd+0x8e>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    4a4c:	240a      	movs	r4, #10
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
	rcvr_mmc(&d, 1);
    4a4e:	466b      	mov	r3, sp
    4a50:	1ddd      	adds	r5, r3, #7
    4a52:	2101      	movs	r1, #1
    4a54:	0028      	movs	r0, r5
    4a56:	f7ff ff4f 	bl	48f8 <rcvr_mmc>
	while ((d & 0x80) && --n);
    4a5a:	7828      	ldrb	r0, [r5, #0]
    4a5c:	b243      	sxtb	r3, r0
    4a5e:	2b00      	cmp	r3, #0
    4a60:	da03      	bge.n	4a6a <send_cmd+0x82>
    4a62:	3c01      	subs	r4, #1
    4a64:	b2e4      	uxtb	r4, r4
    4a66:	2c00      	cmp	r4, #0
    4a68:	d1f1      	bne.n	4a4e <send_cmd+0x66>

	return d;			/* Return with the response value */
}
    4a6a:	b003      	add	sp, #12
    4a6c:	bd30      	pop	{r4, r5, pc}
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    4a6e:	2395      	movs	r3, #149	; 0x95
    4a70:	e7e2      	b.n	4a38 <send_cmd+0x50>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    4a72:	2387      	movs	r3, #135	; 0x87
    4a74:	e7e2      	b.n	4a3c <send_cmd+0x54>
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    4a76:	2101      	movs	r1, #1
    4a78:	466b      	mov	r3, sp
    4a7a:	1dd8      	adds	r0, r3, #7
    4a7c:	f7ff ff3c 	bl	48f8 <rcvr_mmc>
    4a80:	e7e4      	b.n	4a4c <send_cmd+0x64>

00004a82 <xmit_datablock>:
{
    4a82:	b530      	push	{r4, r5, lr}
    4a84:	b083      	sub	sp, #12
    4a86:	0005      	movs	r5, r0
    4a88:	000c      	movs	r4, r1
	if (!wait_ready()) return 0;
    4a8a:	f7ff ff51 	bl	4930 <wait_ready>
    4a8e:	2800      	cmp	r0, #0
    4a90:	d101      	bne.n	4a96 <xmit_datablock+0x14>
}
    4a92:	b003      	add	sp, #12
    4a94:	bd30      	pop	{r4, r5, pc}
	d[0] = token;
    4a96:	a801      	add	r0, sp, #4
    4a98:	7004      	strb	r4, [r0, #0]
	xmit_mmc(d, 1);				/* Xmit a token */
    4a9a:	2101      	movs	r1, #1
    4a9c:	f7ff ff9f 	bl	49de <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    4aa0:	2cfd      	cmp	r4, #253	; 0xfd
    4aa2:	d014      	beq.n	4ace <xmit_datablock+0x4c>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    4aa4:	2180      	movs	r1, #128	; 0x80
    4aa6:	0089      	lsls	r1, r1, #2
    4aa8:	0028      	movs	r0, r5
    4aaa:	f7ff ff98 	bl	49de <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    4aae:	ac01      	add	r4, sp, #4
    4ab0:	2102      	movs	r1, #2
    4ab2:	0020      	movs	r0, r4
    4ab4:	f7ff ff20 	bl	48f8 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    4ab8:	2101      	movs	r1, #1
    4aba:	0020      	movs	r0, r4
    4abc:	f7ff ff1c 	bl	48f8 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    4ac0:	7822      	ldrb	r2, [r4, #0]
    4ac2:	231f      	movs	r3, #31
    4ac4:	4013      	ands	r3, r2
    4ac6:	2b05      	cmp	r3, #5
    4ac8:	d003      	beq.n	4ad2 <xmit_datablock+0x50>
		return 0;
    4aca:	2000      	movs	r0, #0
    4acc:	e7e1      	b.n	4a92 <xmit_datablock+0x10>
	return 1;
    4ace:	2001      	movs	r0, #1
    4ad0:	e7df      	b.n	4a92 <xmit_datablock+0x10>
    4ad2:	2001      	movs	r0, #1
    4ad4:	e7dd      	b.n	4a92 <xmit_datablock+0x10>
	...

00004ad8 <disk_status>:

DSTATUS disk_status (
BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    4ad8:	2800      	cmp	r0, #0
    4ada:	d102      	bne.n	4ae2 <disk_status+0xa>

	return Stat;
    4adc:	4b02      	ldr	r3, [pc, #8]	; (4ae8 <disk_status+0x10>)
    4ade:	7818      	ldrb	r0, [r3, #0]
}
    4ae0:	4770      	bx	lr
	if (drv) return STA_NOINIT;
    4ae2:	2001      	movs	r0, #1
    4ae4:	e7fc      	b.n	4ae0 <disk_status+0x8>
    4ae6:	46c0      	nop			; (mov r8, r8)
    4ae8:	20000058 	.word	0x20000058

00004aec <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
BYTE drv		/* Physical drive nmuber (0) */
)
{
    4aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    4aee:	b083      	sub	sp, #12
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    4af0:	2800      	cmp	r0, #0
    4af2:	d003      	beq.n	4afc <disk_initialize+0x10>
    4af4:	2403      	movs	r4, #3
	Stat = s;

	deselect();

	return s;
}
    4af6:	0020      	movs	r0, r4
    4af8:	b003      	add	sp, #12
    4afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_ms(10);			/* 10ms */
    4afc:	300a      	adds	r0, #10
    4afe:	f7fb fb53 	bl	1a8 <delay_ms>
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    4b02:	240a      	movs	r4, #10
    4b04:	e005      	b.n	4b12 <disk_initialize+0x26>
    4b06:	2101      	movs	r1, #1
    4b08:	a801      	add	r0, sp, #4
    4b0a:	f7ff fef5 	bl	48f8 <rcvr_mmc>
    4b0e:	3c01      	subs	r4, #1
    4b10:	b2e4      	uxtb	r4, r4
    4b12:	2c00      	cmp	r4, #0
    4b14:	d1f7      	bne.n	4b06 <disk_initialize+0x1a>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    4b16:	2100      	movs	r1, #0
    4b18:	2000      	movs	r0, #0
    4b1a:	f7ff ff65 	bl	49e8 <send_cmd>
    4b1e:	0006      	movs	r6, r0
    4b20:	0007      	movs	r7, r0
    4b22:	2801      	cmp	r0, #1
    4b24:	d009      	beq.n	4b3a <disk_initialize+0x4e>
	CardType = ty;
    4b26:	4b33      	ldr	r3, [pc, #204]	; (4bf4 <disk_initialize+0x108>)
    4b28:	701c      	strb	r4, [r3, #0]
	s = ty ? 0 : STA_NOINIT;
    4b2a:	4263      	negs	r3, r4
    4b2c:	415c      	adcs	r4, r3
    4b2e:	b2e4      	uxtb	r4, r4
	Stat = s;
    4b30:	4b31      	ldr	r3, [pc, #196]	; (4bf8 <disk_initialize+0x10c>)
    4b32:	701c      	strb	r4, [r3, #0]
	deselect();
    4b34:	f7ff fee5 	bl	4902 <deselect>
	return s;
    4b38:	e7dd      	b.n	4af6 <disk_initialize+0xa>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    4b3a:	21d5      	movs	r1, #213	; 0xd5
    4b3c:	0049      	lsls	r1, r1, #1
    4b3e:	2008      	movs	r0, #8
    4b40:	f7ff ff52 	bl	49e8 <send_cmd>
    4b44:	2801      	cmp	r0, #1
    4b46:	d015      	beq.n	4b74 <disk_initialize+0x88>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    4b48:	2100      	movs	r1, #0
    4b4a:	20a9      	movs	r0, #169	; 0xa9
    4b4c:	f7ff ff4c 	bl	49e8 <send_cmd>
    4b50:	2801      	cmp	r0, #1
    4b52:	d93e      	bls.n	4bd2 <disk_initialize+0xe6>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4b54:	25fa      	movs	r5, #250	; 0xfa
    4b56:	00ad      	lsls	r5, r5, #2
    4b58:	2d00      	cmp	r5, #0
    4b5a:	d03d      	beq.n	4bd8 <disk_initialize+0xec>
				if (send_cmd(cmd, 0) == 0) break;
    4b5c:	2100      	movs	r1, #0
    4b5e:	0030      	movs	r0, r6
    4b60:	f7ff ff42 	bl	49e8 <send_cmd>
    4b64:	2800      	cmp	r0, #0
    4b66:	d037      	beq.n	4bd8 <disk_initialize+0xec>
				dly_us(1000);
    4b68:	20fa      	movs	r0, #250	; 0xfa
    4b6a:	0080      	lsls	r0, r0, #2
    4b6c:	f7ff fed7 	bl	491e <dly_us>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4b70:	3d01      	subs	r5, #1
    4b72:	e7f1      	b.n	4b58 <disk_initialize+0x6c>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    4b74:	ad01      	add	r5, sp, #4
    4b76:	2104      	movs	r1, #4
    4b78:	0028      	movs	r0, r5
    4b7a:	f7ff febd 	bl	48f8 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    4b7e:	78ab      	ldrb	r3, [r5, #2]
    4b80:	2b01      	cmp	r3, #1
    4b82:	d1d0      	bne.n	4b26 <disk_initialize+0x3a>
    4b84:	ab01      	add	r3, sp, #4
    4b86:	78db      	ldrb	r3, [r3, #3]
    4b88:	2baa      	cmp	r3, #170	; 0xaa
    4b8a:	d1cc      	bne.n	4b26 <disk_initialize+0x3a>
    4b8c:	25fa      	movs	r5, #250	; 0xfa
    4b8e:	00ad      	lsls	r5, r5, #2
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    4b90:	2d00      	cmp	r5, #0
    4b92:	d00c      	beq.n	4bae <disk_initialize+0xc2>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    4b94:	2180      	movs	r1, #128	; 0x80
    4b96:	05c9      	lsls	r1, r1, #23
    4b98:	20a9      	movs	r0, #169	; 0xa9
    4b9a:	f7ff ff25 	bl	49e8 <send_cmd>
    4b9e:	2800      	cmp	r0, #0
    4ba0:	d005      	beq.n	4bae <disk_initialize+0xc2>
					dly_us(1000);
    4ba2:	20fa      	movs	r0, #250	; 0xfa
    4ba4:	0080      	lsls	r0, r0, #2
    4ba6:	f7ff feba 	bl	491e <dly_us>
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    4baa:	3d01      	subs	r5, #1
    4bac:	e7f0      	b.n	4b90 <disk_initialize+0xa4>
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    4bae:	2d00      	cmp	r5, #0
    4bb0:	d0b9      	beq.n	4b26 <disk_initialize+0x3a>
    4bb2:	2100      	movs	r1, #0
    4bb4:	203a      	movs	r0, #58	; 0x3a
    4bb6:	f7ff ff17 	bl	49e8 <send_cmd>
    4bba:	2800      	cmp	r0, #0
    4bbc:	d1b3      	bne.n	4b26 <disk_initialize+0x3a>
					rcvr_mmc(buf, 4);
    4bbe:	ac01      	add	r4, sp, #4
    4bc0:	2104      	movs	r1, #4
    4bc2:	0020      	movs	r0, r4
    4bc4:	f7ff fe98 	bl	48f8 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* SDv2+ */
    4bc8:	7823      	ldrb	r3, [r4, #0]
    4bca:	065b      	lsls	r3, r3, #25
    4bcc:	d50f      	bpl.n	4bee <disk_initialize+0x102>
    4bce:	2418      	movs	r4, #24
    4bd0:	e7a9      	b.n	4b26 <disk_initialize+0x3a>
				ty = CT_SDC2; cmd = ACMD41;	/* SDv1 */
    4bd2:	26a9      	movs	r6, #169	; 0xa9
    4bd4:	2708      	movs	r7, #8
    4bd6:	e7bd      	b.n	4b54 <disk_initialize+0x68>
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    4bd8:	2d00      	cmp	r5, #0
    4bda:	d0a4      	beq.n	4b26 <disk_initialize+0x3a>
    4bdc:	2180      	movs	r1, #128	; 0x80
    4bde:	0089      	lsls	r1, r1, #2
    4be0:	2010      	movs	r0, #16
    4be2:	f7ff ff01 	bl	49e8 <send_cmd>
    4be6:	2800      	cmp	r0, #0
    4be8:	d19d      	bne.n	4b26 <disk_initialize+0x3a>
    4bea:	003c      	movs	r4, r7
    4bec:	e79b      	b.n	4b26 <disk_initialize+0x3a>
					ty = (buf[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* SDv2+ */
    4bee:	2408      	movs	r4, #8
    4bf0:	e799      	b.n	4b26 <disk_initialize+0x3a>
    4bf2:	46c0      	nop			; (mov r8, r8)
    4bf4:	20000ae2 	.word	0x20000ae2
    4bf8:	20000058 	.word	0x20000058

00004bfc <disk_read>:
BYTE drv,			/* Physical drive nmuber (0) */
BYTE *buff,			/* Pointer to the data buffer to store read data */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    4bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bfe:	000d      	movs	r5, r1
    4c00:	0017      	movs	r7, r2
    4c02:	001c      	movs	r4, r3
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    4c04:	f7ff ff68 	bl	4ad8 <disk_status>
    4c08:	07c3      	lsls	r3, r0, #31
    4c0a:	d501      	bpl.n	4c10 <disk_read+0x14>
    4c0c:	2003      	movs	r0, #3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    4c10:	4b15      	ldr	r3, [pc, #84]	; (4c68 <disk_read+0x6c>)
    4c12:	781b      	ldrb	r3, [r3, #0]
    4c14:	06db      	lsls	r3, r3, #27
    4c16:	d400      	bmi.n	4c1a <disk_read+0x1e>
    4c18:	027f      	lsls	r7, r7, #9
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4c1a:	2c01      	cmp	r4, #1
    4c1c:	d91c      	bls.n	4c58 <disk_read+0x5c>
    4c1e:	2612      	movs	r6, #18
	if (send_cmd(cmd, sect) == 0) {
    4c20:	0039      	movs	r1, r7
    4c22:	0030      	movs	r0, r6
    4c24:	f7ff fee0 	bl	49e8 <send_cmd>
    4c28:	2800      	cmp	r0, #0
    4c2a:	d10f      	bne.n	4c4c <disk_read+0x50>
			if (!rcvr_datablock(buff, 512)) break;
    4c2c:	2180      	movs	r1, #128	; 0x80
    4c2e:	0089      	lsls	r1, r1, #2
    4c30:	0028      	movs	r0, r5
    4c32:	f7ff feae 	bl	4992 <rcvr_datablock>
    4c36:	2800      	cmp	r0, #0
    4c38:	d006      	beq.n	4c48 <disk_read+0x4c>
			buff += 512;
    4c3a:	2380      	movs	r3, #128	; 0x80
    4c3c:	009b      	lsls	r3, r3, #2
    4c3e:	469c      	mov	ip, r3
    4c40:	4465      	add	r5, ip
		} while (--count);
    4c42:	3c01      	subs	r4, #1
    4c44:	2c00      	cmp	r4, #0
    4c46:	d1f1      	bne.n	4c2c <disk_read+0x30>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    4c48:	2e12      	cmp	r6, #18
    4c4a:	d007      	beq.n	4c5c <disk_read+0x60>
	deselect();
    4c4c:	f7ff fe59 	bl	4902 <deselect>
	return count ? RES_ERROR : RES_OK;
    4c50:	1e60      	subs	r0, r4, #1
    4c52:	4184      	sbcs	r4, r0
    4c54:	b2e0      	uxtb	r0, r4
    4c56:	e7da      	b.n	4c0e <disk_read+0x12>
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4c58:	2611      	movs	r6, #17
    4c5a:	e7e1      	b.n	4c20 <disk_read+0x24>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    4c5c:	2100      	movs	r1, #0
    4c5e:	200c      	movs	r0, #12
    4c60:	f7ff fec2 	bl	49e8 <send_cmd>
    4c64:	e7f2      	b.n	4c4c <disk_read+0x50>
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	20000ae2 	.word	0x20000ae2

00004c6c <disk_write>:
BYTE drv,			/* Physical drive nmuber (0) */
const BYTE *buff,	/* Pointer to the data to be written */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    4c6c:	b570      	push	{r4, r5, r6, lr}
    4c6e:	000d      	movs	r5, r1
    4c70:	0016      	movs	r6, r2
    4c72:	001c      	movs	r4, r3
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    4c74:	f7ff ff30 	bl	4ad8 <disk_status>
    4c78:	07c3      	lsls	r3, r0, #31
    4c7a:	d501      	bpl.n	4c80 <disk_write+0x14>
    4c7c:	2003      	movs	r0, #3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4c7e:	bd70      	pop	{r4, r5, r6, pc}
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    4c80:	4b1e      	ldr	r3, [pc, #120]	; (4cfc <disk_write+0x90>)
    4c82:	781b      	ldrb	r3, [r3, #0]
    4c84:	06da      	lsls	r2, r3, #27
    4c86:	d400      	bmi.n	4c8a <disk_write+0x1e>
    4c88:	0276      	lsls	r6, r6, #9
	if (count == 1) {	/* Single block write */
    4c8a:	2c01      	cmp	r4, #1
    4c8c:	d021      	beq.n	4cd2 <disk_write+0x66>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4c8e:	220c      	movs	r2, #12
    4c90:	421a      	tst	r2, r3
    4c92:	d12c      	bne.n	4cee <disk_write+0x82>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    4c94:	0031      	movs	r1, r6
    4c96:	2019      	movs	r0, #25
    4c98:	f7ff fea6 	bl	49e8 <send_cmd>
    4c9c:	2800      	cmp	r0, #0
    4c9e:	d112      	bne.n	4cc6 <disk_write+0x5a>
				if (!xmit_datablock(buff, 0xFC)) break;
    4ca0:	21fc      	movs	r1, #252	; 0xfc
    4ca2:	0028      	movs	r0, r5
    4ca4:	f7ff feed 	bl	4a82 <xmit_datablock>
    4ca8:	2800      	cmp	r0, #0
    4caa:	d006      	beq.n	4cba <disk_write+0x4e>
				buff += 512;
    4cac:	2380      	movs	r3, #128	; 0x80
    4cae:	009b      	lsls	r3, r3, #2
    4cb0:	469c      	mov	ip, r3
    4cb2:	4465      	add	r5, ip
			} while (--count);
    4cb4:	3c01      	subs	r4, #1
    4cb6:	2c00      	cmp	r4, #0
    4cb8:	d1f2      	bne.n	4ca0 <disk_write+0x34>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    4cba:	21fd      	movs	r1, #253	; 0xfd
    4cbc:	2000      	movs	r0, #0
    4cbe:	f7ff fee0 	bl	4a82 <xmit_datablock>
    4cc2:	2800      	cmp	r0, #0
    4cc4:	d018      	beq.n	4cf8 <disk_write+0x8c>
	deselect();
    4cc6:	f7ff fe1c 	bl	4902 <deselect>
	return count ? RES_ERROR : RES_OK;
    4cca:	1e60      	subs	r0, r4, #1
    4ccc:	4184      	sbcs	r4, r0
    4cce:	b2e0      	uxtb	r0, r4
    4cd0:	e7d5      	b.n	4c7e <disk_write+0x12>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    4cd2:	0031      	movs	r1, r6
    4cd4:	2018      	movs	r0, #24
    4cd6:	f7ff fe87 	bl	49e8 <send_cmd>
    4cda:	2800      	cmp	r0, #0
    4cdc:	d1f3      	bne.n	4cc6 <disk_write+0x5a>
		&& xmit_datablock(buff, 0xFE))
    4cde:	21fe      	movs	r1, #254	; 0xfe
    4ce0:	0028      	movs	r0, r5
    4ce2:	f7ff fece 	bl	4a82 <xmit_datablock>
    4ce6:	2800      	cmp	r0, #0
    4ce8:	d0ed      	beq.n	4cc6 <disk_write+0x5a>
		count = 0;
    4cea:	2400      	movs	r4, #0
    4cec:	e7eb      	b.n	4cc6 <disk_write+0x5a>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4cee:	0021      	movs	r1, r4
    4cf0:	2097      	movs	r0, #151	; 0x97
    4cf2:	f7ff fe79 	bl	49e8 <send_cmd>
    4cf6:	e7cd      	b.n	4c94 <disk_write+0x28>
			count = 1;
    4cf8:	2401      	movs	r4, #1
    4cfa:	e7e4      	b.n	4cc6 <disk_write+0x5a>
    4cfc:	20000ae2 	.word	0x20000ae2

00004d00 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE drv,		/* Physical drive nmuber (0) */
BYTE ctrl,		/* Control code */
void *buff		/* Buffer to send/receive control data */
)
{
    4d00:	b530      	push	{r4, r5, lr}
    4d02:	b085      	sub	sp, #20
    4d04:	000c      	movs	r4, r1
    4d06:	0015      	movs	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    4d08:	f7ff fee6 	bl	4ad8 <disk_status>
    4d0c:	07c3      	lsls	r3, r0, #31
    4d0e:	d503      	bpl.n	4d18 <disk_ioctl+0x18>
    4d10:	2403      	movs	r4, #3
	}

	deselect();

	return res;
}
    4d12:	0020      	movs	r0, r4
    4d14:	b005      	add	sp, #20
    4d16:	bd30      	pop	{r4, r5, pc}
	switch (ctrl) {
    4d18:	2c01      	cmp	r4, #1
    4d1a:	d00b      	beq.n	4d34 <disk_ioctl+0x34>
    4d1c:	2c00      	cmp	r4, #0
    4d1e:	d003      	beq.n	4d28 <disk_ioctl+0x28>
    4d20:	2c03      	cmp	r4, #3
    4d22:	d051      	beq.n	4dc8 <disk_ioctl+0xc8>
		res = RES_PARERR;
    4d24:	2404      	movs	r4, #4
    4d26:	e052      	b.n	4dce <disk_ioctl+0xce>
		if (select()) res = RES_OK;
    4d28:	f7ff fe1c 	bl	4964 <select>
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d151      	bne.n	4dd4 <disk_ioctl+0xd4>
	res = RES_ERROR;
    4d30:	2401      	movs	r4, #1
    4d32:	e04c      	b.n	4dce <disk_ioctl+0xce>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4d34:	2100      	movs	r1, #0
    4d36:	2009      	movs	r0, #9
    4d38:	f7ff fe56 	bl	49e8 <send_cmd>
    4d3c:	2800      	cmp	r0, #0
    4d3e:	d001      	beq.n	4d44 <disk_ioctl+0x44>
	res = RES_ERROR;
    4d40:	2401      	movs	r4, #1
    4d42:	e044      	b.n	4dce <disk_ioctl+0xce>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4d44:	2110      	movs	r1, #16
    4d46:	4668      	mov	r0, sp
    4d48:	f7ff fe23 	bl	4992 <rcvr_datablock>
    4d4c:	2800      	cmp	r0, #0
    4d4e:	d043      	beq.n	4dd8 <disk_ioctl+0xd8>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    4d50:	466b      	mov	r3, sp
    4d52:	781b      	ldrb	r3, [r3, #0]
    4d54:	099b      	lsrs	r3, r3, #6
    4d56:	2b01      	cmp	r3, #1
    4d58:	d024      	beq.n	4da4 <disk_ioctl+0xa4>
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    4d5a:	466b      	mov	r3, sp
    4d5c:	795a      	ldrb	r2, [r3, #5]
    4d5e:	230f      	movs	r3, #15
    4d60:	4013      	ands	r3, r2
    4d62:	466a      	mov	r2, sp
    4d64:	7a92      	ldrb	r2, [r2, #10]
    4d66:	09d2      	lsrs	r2, r2, #7
    4d68:	189b      	adds	r3, r3, r2
    4d6a:	466a      	mov	r2, sp
    4d6c:	7a51      	ldrb	r1, [r2, #9]
    4d6e:	0049      	lsls	r1, r1, #1
    4d70:	2206      	movs	r2, #6
    4d72:	400a      	ands	r2, r1
    4d74:	189b      	adds	r3, r3, r2
    4d76:	b2db      	uxtb	r3, r3
    4d78:	3302      	adds	r3, #2
    4d7a:	b2db      	uxtb	r3, r3
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    4d7c:	466a      	mov	r2, sp
    4d7e:	7a12      	ldrb	r2, [r2, #8]
    4d80:	0992      	lsrs	r2, r2, #6
    4d82:	4669      	mov	r1, sp
    4d84:	79c9      	ldrb	r1, [r1, #7]
    4d86:	0089      	lsls	r1, r1, #2
    4d88:	1852      	adds	r2, r2, r1
    4d8a:	4669      	mov	r1, sp
    4d8c:	7989      	ldrb	r1, [r1, #6]
    4d8e:	0289      	lsls	r1, r1, #10
    4d90:	20c0      	movs	r0, #192	; 0xc0
    4d92:	0100      	lsls	r0, r0, #4
    4d94:	4001      	ands	r1, r0
    4d96:	1852      	adds	r2, r2, r1
    4d98:	3201      	adds	r2, #1
				*(LBA_t*)buff = cs << (n - 9);
    4d9a:	3b09      	subs	r3, #9
    4d9c:	409a      	lsls	r2, r3
    4d9e:	602a      	str	r2, [r5, #0]
			res = RES_OK;
    4da0:	2400      	movs	r4, #0
    4da2:	e014      	b.n	4dce <disk_ioctl+0xce>
				cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    4da4:	466b      	mov	r3, sp
    4da6:	7a5b      	ldrb	r3, [r3, #9]
    4da8:	466a      	mov	r2, sp
    4daa:	7a12      	ldrb	r2, [r2, #8]
    4dac:	0212      	lsls	r2, r2, #8
    4dae:	189b      	adds	r3, r3, r2
    4db0:	466a      	mov	r2, sp
    4db2:	79d2      	ldrb	r2, [r2, #7]
    4db4:	0412      	lsls	r2, r2, #16
    4db6:	21fc      	movs	r1, #252	; 0xfc
    4db8:	0389      	lsls	r1, r1, #14
    4dba:	400a      	ands	r2, r1
    4dbc:	189b      	adds	r3, r3, r2
    4dbe:	3301      	adds	r3, #1
				*(LBA_t*)buff = cs << 10;
    4dc0:	029b      	lsls	r3, r3, #10
    4dc2:	602b      	str	r3, [r5, #0]
			res = RES_OK;
    4dc4:	2400      	movs	r4, #0
    4dc6:	e002      	b.n	4dce <disk_ioctl+0xce>
		*(DWORD*)buff = 128;
    4dc8:	2380      	movs	r3, #128	; 0x80
    4dca:	602b      	str	r3, [r5, #0]
		res = RES_OK;
    4dcc:	2400      	movs	r4, #0
	deselect();
    4dce:	f7ff fd98 	bl	4902 <deselect>
	return res;
    4dd2:	e79e      	b.n	4d12 <disk_ioctl+0x12>
		if (select()) res = RES_OK;
    4dd4:	2400      	movs	r4, #0
    4dd6:	e7fa      	b.n	4dce <disk_ioctl+0xce>
	res = RES_ERROR;
    4dd8:	2401      	movs	r4, #1
    4dda:	e7f8      	b.n	4dce <disk_ioctl+0xce>

00004ddc <main>:
ADS1x1x_config_t my_adc;

uint8_t rx_tx_buff_sizes[]={2,2,2,2,2,2,2,2};

int main(void)
{
    4ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4dde:	b0d9      	sub	sp, #356	; 0x164
	mcu_init();
    4de0:	f7fd faec 	bl	23bc <mcu_init>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
    4de4:	49db      	ldr	r1, [pc, #876]	; (5154 <main+0x378>)
    4de6:	48dc      	ldr	r0, [pc, #880]	; (5158 <main+0x37c>)
    4de8:	f7fe fa2a 	bl	3240 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_Write_byte);
    4dec:	49db      	ldr	r1, [pc, #876]	; (515c <main+0x380>)
    4dee:	48dc      	ldr	r0, [pc, #880]	; (5160 <main+0x384>)
    4df0:	f7fe fa3a 	bl	3268 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
    4df4:	49db      	ldr	r1, [pc, #876]	; (5164 <main+0x388>)
    4df6:	48dc      	ldr	r0, [pc, #880]	; (5168 <main+0x38c>)
    4df8:	f7fe fa4e 	bl	3298 <reg_wizchip_spiburst_cbfunc>
	wizphy_reset();
    4dfc:	f7fe faea 	bl	33d4 <wizphy_reset>
	delay_ms(100);
    4e00:	2064      	movs	r0, #100	; 0x64
    4e02:	f7fb f9d1 	bl	1a8 <delay_ms>
	wizchip_init(rx_tx_buff_sizes,rx_tx_buff_sizes);
    4e06:	48d9      	ldr	r0, [pc, #868]	; (516c <main+0x390>)
    4e08:	0001      	movs	r1, r0
    4e0a:	f7fe fa98 	bl	333e <wizchip_init>
	wizchip_setnetinfo(&netInfo);
    4e0e:	4cd8      	ldr	r4, [pc, #864]	; (5170 <main+0x394>)
    4e10:	0020      	movs	r0, r4
    4e12:	f7fe faf5 	bl	3400 <wizchip_setnetinfo>
	ctlnetwork(CN_SET_NETINFO, (void*) &netInfo);
    4e16:	0021      	movs	r1, r4
    4e18:	2000      	movs	r0, #0
    4e1a:	f7fe fb8f 	bl	353c <ctlnetwork>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4e1e:	23c0      	movs	r3, #192	; 0xc0
    4e20:	05db      	lsls	r3, r3, #23
    4e22:	2280      	movs	r2, #128	; 0x80
    4e24:	03d2      	lsls	r2, r2, #15
    4e26:	619a      	str	r2, [r3, #24]
    4e28:	2280      	movs	r2, #128	; 0x80
    4e2a:	0052      	lsls	r2, r2, #1
    4e2c:	619a      	str	r2, [r3, #24]
    4e2e:	3201      	adds	r2, #1
    4e30:	32ff      	adds	r2, #255	; 0xff
    4e32:	619a      	str	r2, [r3, #24]
	
	gpio_set_pin_level(DLDA, true);
	gpio_set_pin_level(O2, true);
	gpio_set_pin_level(O3, true);
	
	setIMR(0xff);
    4e34:	21ff      	movs	r1, #255	; 0xff
    4e36:	20b0      	movs	r0, #176	; 0xb0
    4e38:	0140      	lsls	r0, r0, #5
    4e3a:	f7fe f859 	bl	2ef0 <WIZCHIP_WRITE>
	setSIMR(0xff);
    4e3e:	21ff      	movs	r1, #255	; 0xff
    4e40:	20c0      	movs	r0, #192	; 0xc0
    4e42:	0140      	lsls	r0, r0, #5
    4e44:	f7fe f854 	bl	2ef0 <WIZCHIP_WRITE>
	setINTLEVEL(1);
    4e48:	2100      	movs	r1, #0
    4e4a:	2098      	movs	r0, #152	; 0x98
    4e4c:	0140      	lsls	r0, r0, #5
    4e4e:	f7fe f84f 	bl	2ef0 <WIZCHIP_WRITE>
    4e52:	2101      	movs	r1, #1
    4e54:	20a0      	movs	r0, #160	; 0xa0
    4e56:	0140      	lsls	r0, r0, #5
    4e58:	f7fe f84a 	bl	2ef0 <WIZCHIP_WRITE>
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    4e5c:	2400      	movs	r4, #0
    4e5e:	2c07      	cmp	r4, #7
    4e60:	d951      	bls.n	4f06 <main+0x12a>
		ADS1x1x_set_threshold_lo(&my_adc, 0x0000);
		ADS1x1x_set_comparator_queue(&my_adc,COMPARATOR_QUEUE_1);
		ADS1x1x_set_data_rate(&my_adc,DATA_RATE_ADS111x_860);
		ADS1x1x_set_mode(&my_adc,MODE_CONTINUOUS);
	}
	buzer(10);
    4e62:	200a      	movs	r0, #10
    4e64:	f7fc fe94 	bl	1b90 <buzer>
	
	UINT bw;
	FRESULT fr;
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    4e68:	2200      	movs	r2, #0
    4e6a:	49c2      	ldr	r1, [pc, #776]	; (5174 <main+0x398>)
    4e6c:	48c2      	ldr	r0, [pc, #776]	; (5178 <main+0x39c>)
    4e6e:	f7ff fae7 	bl	4440 <f_mount>
	fr = f_open(&Fil, "abc.txt", FA_WRITE | FA_CREATE_ALWAYS);	/* Create a file */
    4e72:	220a      	movs	r2, #10
    4e74:	49c1      	ldr	r1, [pc, #772]	; (517c <main+0x3a0>)
    4e76:	48c2      	ldr	r0, [pc, #776]	; (5180 <main+0x3a4>)
    4e78:	f7ff fb10 	bl	449c <f_open>
	if (fr == FR_OK) {
    4e7c:	2800      	cmp	r0, #0
    4e7e:	d109      	bne.n	4e94 <main+0xb8>
		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    4e80:	4cbf      	ldr	r4, [pc, #764]	; (5180 <main+0x3a4>)
    4e82:	ab57      	add	r3, sp, #348	; 0x15c
    4e84:	220b      	movs	r2, #11
    4e86:	49bf      	ldr	r1, [pc, #764]	; (5184 <main+0x3a8>)
    4e88:	0020      	movs	r0, r4
    4e8a:	f7ff fbff 	bl	468c <f_write>
		fr = f_close(&Fil);							/* Close the file */
    4e8e:	0020      	movs	r0, r4
    4e90:	f7ff fd20 	bl	48d4 <f_close>
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    4e94:	a813      	add	r0, sp, #76	; 0x4c
    4e96:	f7fb f96d 	bl	174 <atomic_enter_critical>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    4e9a:	23c0      	movs	r3, #192	; 0xc0
    4e9c:	05db      	lsls	r3, r3, #23
    4e9e:	2280      	movs	r2, #128	; 0x80
    4ea0:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    4ea2:	3220      	adds	r2, #32
    4ea4:	49b8      	ldr	r1, [pc, #736]	; (5188 <main+0x3ac>)
    4ea6:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    4ea8:	2190      	movs	r1, #144	; 0x90
    4eaa:	585b      	ldr	r3, [r3, r1]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    4eac:	4053      	eors	r3, r2
    4eae:	401c      	ands	r4, r3
    4eb0:	4054      	eors	r4, r2

	CRITICAL_SECTION_LEAVE();
    4eb2:	a813      	add	r0, sp, #76	; 0x4c
    4eb4:	f7fb f965 	bl	182 <atomic_leave_critical>
	if (level) {
    4eb8:	05e3      	lsls	r3, r4, #23
    4eba:	d450      	bmi.n	4f5e <main+0x182>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4ebc:	2280      	movs	r2, #128	; 0x80
    4ebe:	03d2      	lsls	r2, r2, #15
    4ec0:	23c0      	movs	r3, #192	; 0xc0
    4ec2:	05db      	lsls	r3, r3, #23
    4ec4:	619a      	str	r2, [r3, #24]
		//SerialWrite(debugSerialBuffer);
		//SerialWrite(testBuffer);
		
		gpio_set_pin_level(DLDA, !gpio_get_pin_level(ETH_INT));
		
		if(adcRequest() == 1){
    4ec6:	f7fd fa93 	bl	23f0 <adcRequest>
    4eca:	2801      	cmp	r0, #1
    4ecc:	d04d      	beq.n	4f6a <main+0x18e>
			adcVal[1] = ADS1x1x_read(&my_adc);
			voltDMM = adcVal[0] * 0.002335539;
			ampDMM = adcVal[1];
		}
		
		if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    4ece:	4baf      	ldr	r3, [pc, #700]	; (518c <main+0x3b0>)
    4ed0:	7818      	ldrb	r0, [r3, #0]
    4ed2:	0080      	lsls	r0, r0, #2
    4ed4:	3001      	adds	r0, #1
    4ed6:	00c0      	lsls	r0, r0, #3
    4ed8:	23c0      	movs	r3, #192	; 0xc0
    4eda:	009b      	lsls	r3, r3, #2
    4edc:	469c      	mov	ip, r3
    4ede:	4460      	add	r0, ip
    4ee0:	f7fd ffd4 	bl	2e8c <WIZCHIP_READ>
    4ee4:	2800      	cmp	r0, #0
    4ee6:	d073      	beq.n	4fd0 <main+0x1f4>
			socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
			listen(UdpRxSockNum);
		}
		
		if(getSn_IR(UdpRxSockNum)){ // & Sn_CR_RECV
    4ee8:	4ba8      	ldr	r3, [pc, #672]	; (518c <main+0x3b0>)
    4eea:	7818      	ldrb	r0, [r3, #0]
    4eec:	0080      	lsls	r0, r0, #2
    4eee:	3001      	adds	r0, #1
    4ef0:	00c0      	lsls	r0, r0, #3
    4ef2:	2380      	movs	r3, #128	; 0x80
    4ef4:	009b      	lsls	r3, r3, #2
    4ef6:	469c      	mov	ip, r3
    4ef8:	4460      	add	r0, ip
    4efa:	f7fd ffc7 	bl	2e8c <WIZCHIP_READ>
    4efe:	06c3      	lsls	r3, r0, #27
    4f00:	d172      	bne.n	4fe8 <main+0x20c>
    4f02:	2405      	movs	r4, #5
    4f04:	e0d9      	b.n	50ba <main+0x2de>
		setSn_IMR(HTTP_SOCKET, 0x04);
    4f06:	00a0      	lsls	r0, r4, #2
    4f08:	3001      	adds	r0, #1
    4f0a:	00c0      	lsls	r0, r0, #3
    4f0c:	23b0      	movs	r3, #176	; 0xb0
    4f0e:	019b      	lsls	r3, r3, #6
    4f10:	469c      	mov	ip, r3
    4f12:	4460      	add	r0, ip
    4f14:	2104      	movs	r1, #4
    4f16:	f7fd ffeb 	bl	2ef0 <WIZCHIP_WRITE>
		ADS1x1x_init(&my_adc,ADS1115,ADS1x1x_I2C_ADDRESS_ADDR_TO_GND,MUX_SINGLE_0,PGA_4096);
    4f1a:	4d9d      	ldr	r5, [pc, #628]	; (5190 <main+0x3b4>)
    4f1c:	2380      	movs	r3, #128	; 0x80
    4f1e:	009b      	lsls	r3, r3, #2
    4f20:	9300      	str	r3, [sp, #0]
    4f22:	2380      	movs	r3, #128	; 0x80
    4f24:	01db      	lsls	r3, r3, #7
    4f26:	2248      	movs	r2, #72	; 0x48
    4f28:	2105      	movs	r1, #5
    4f2a:	0028      	movs	r0, r5
    4f2c:	f7fc fda9 	bl	1a82 <ADS1x1x_init>
		ADS1x1x_set_threshold_hi(&my_adc, 0xFFFF);
    4f30:	4998      	ldr	r1, [pc, #608]	; (5194 <main+0x3b8>)
    4f32:	0028      	movs	r0, r5
    4f34:	f7fc fd5d 	bl	19f2 <ADS1x1x_set_threshold_hi>
		ADS1x1x_set_threshold_lo(&my_adc, 0x0000);
    4f38:	2100      	movs	r1, #0
    4f3a:	0028      	movs	r0, r5
    4f3c:	f7fc fd4d 	bl	19da <ADS1x1x_set_threshold_lo>
		ADS1x1x_set_comparator_queue(&my_adc,COMPARATOR_QUEUE_1);
    4f40:	2100      	movs	r1, #0
    4f42:	0028      	movs	r0, r5
    4f44:	f7fc fd97 	bl	1a76 <ADS1x1x_set_comparator_queue>
		ADS1x1x_set_data_rate(&my_adc,DATA_RATE_ADS111x_860);
    4f48:	21e0      	movs	r1, #224	; 0xe0
    4f4a:	0028      	movs	r0, r5
    4f4c:	f7fc fd7b 	bl	1a46 <ADS1x1x_set_data_rate>
		ADS1x1x_set_mode(&my_adc,MODE_CONTINUOUS);
    4f50:	2100      	movs	r1, #0
    4f52:	0028      	movs	r0, r5
    4f54:	f7fc fd71 	bl	1a3a <ADS1x1x_set_mode>
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    4f58:	3401      	adds	r4, #1
    4f5a:	b2e4      	uxtb	r4, r4
    4f5c:	e77f      	b.n	4e5e <main+0x82>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4f5e:	2280      	movs	r2, #128	; 0x80
    4f60:	03d2      	lsls	r2, r2, #15
    4f62:	23c0      	movs	r3, #192	; 0xc0
    4f64:	05db      	lsls	r3, r3, #23
    4f66:	615a      	str	r2, [r3, #20]
    4f68:	e7ad      	b.n	4ec6 <main+0xea>
			ADS1x1x_set_multiplexer(&my_adc,MUX_SINGLE_0);
    4f6a:	4c89      	ldr	r4, [pc, #548]	; (5190 <main+0x3b4>)
    4f6c:	2180      	movs	r1, #128	; 0x80
    4f6e:	01c9      	lsls	r1, r1, #7
    4f70:	0020      	movs	r0, r4
    4f72:	f7fc fd56 	bl	1a22 <ADS1x1x_set_multiplexer>
			ADS1x1x_start_conversion(&my_adc);
    4f76:	0020      	movs	r0, r4
    4f78:	f7fc fd1c 	bl	19b4 <ADS1x1x_start_conversion>
			delay_ms(2);
    4f7c:	2002      	movs	r0, #2
    4f7e:	f7fb f913 	bl	1a8 <delay_ms>
			adcVal[0] = ADS1x1x_read(&my_adc);
    4f82:	0020      	movs	r0, r4
    4f84:	f7fc fd1d 	bl	19c2 <ADS1x1x_read>
    4f88:	4d83      	ldr	r5, [pc, #524]	; (5198 <main+0x3bc>)
    4f8a:	8028      	strh	r0, [r5, #0]
			ADS1x1x_set_multiplexer(&my_adc,MUX_SINGLE_1);
    4f8c:	21a0      	movs	r1, #160	; 0xa0
    4f8e:	01c9      	lsls	r1, r1, #7
    4f90:	0020      	movs	r0, r4
    4f92:	f7fc fd46 	bl	1a22 <ADS1x1x_set_multiplexer>
			ADS1x1x_start_conversion(&my_adc);
    4f96:	0020      	movs	r0, r4
    4f98:	f7fc fd0c 	bl	19b4 <ADS1x1x_start_conversion>
			delay_ms(2);
    4f9c:	2002      	movs	r0, #2
    4f9e:	f7fb f903 	bl	1a8 <delay_ms>
			adcVal[1] = ADS1x1x_read(&my_adc);
    4fa2:	0020      	movs	r0, r4
    4fa4:	f7fc fd0d 	bl	19c2 <ADS1x1x_read>
    4fa8:	0004      	movs	r4, r0
    4faa:	8068      	strh	r0, [r5, #2]
			voltDMM = adcVal[0] * 0.002335539;
    4fac:	2300      	movs	r3, #0
    4fae:	5ee8      	ldrsh	r0, [r5, r3]
    4fb0:	f001 ff36 	bl	6e20 <__aeabi_i2d>
    4fb4:	4a79      	ldr	r2, [pc, #484]	; (519c <main+0x3c0>)
    4fb6:	4b7a      	ldr	r3, [pc, #488]	; (51a0 <main+0x3c4>)
    4fb8:	f001 f968 	bl	628c <__aeabi_dmul>
    4fbc:	f001 fffc 	bl	6fb8 <__aeabi_d2f>
    4fc0:	4b78      	ldr	r3, [pc, #480]	; (51a4 <main+0x3c8>)
    4fc2:	6018      	str	r0, [r3, #0]
			ampDMM = adcVal[1];
    4fc4:	0020      	movs	r0, r4
    4fc6:	f000 fddd 	bl	5b84 <__aeabi_i2f>
    4fca:	4b77      	ldr	r3, [pc, #476]	; (51a8 <main+0x3cc>)
    4fcc:	6018      	str	r0, [r3, #0]
    4fce:	e77e      	b.n	4ece <main+0xf2>
			socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
    4fd0:	4b76      	ldr	r3, [pc, #472]	; (51ac <main+0x3d0>)
    4fd2:	881a      	ldrh	r2, [r3, #0]
    4fd4:	4c6d      	ldr	r4, [pc, #436]	; (518c <main+0x3b0>)
    4fd6:	7820      	ldrb	r0, [r4, #0]
    4fd8:	2380      	movs	r3, #128	; 0x80
    4fda:	2102      	movs	r1, #2
    4fdc:	f7fd fa50 	bl	2480 <socket>
			listen(UdpRxSockNum);
    4fe0:	7820      	ldrb	r0, [r4, #0]
    4fe2:	f7fd fb05 	bl	25f0 <listen>
    4fe6:	e77f      	b.n	4ee8 <main+0x10c>
			uint16_t udp_size = getSn_RX_RSR(UdpRxSockNum);
    4fe8:	4b68      	ldr	r3, [pc, #416]	; (518c <main+0x3b0>)
    4fea:	7818      	ldrb	r0, [r3, #0]
    4fec:	f7fe f85e 	bl	30ac <getSn_RX_RSR>
    4ff0:	1e04      	subs	r4, r0, #0
			if (udp_size > 0) {
    4ff2:	d086      	beq.n	4f02 <main+0x126>
				uint8_t ip[4];
				uint16_t port;
				if (udp_size > DATA_BUFF_SIZE) udp_size = DATA_BUFF_SIZE;
    4ff4:	2380      	movs	r3, #128	; 0x80
    4ff6:	011b      	lsls	r3, r3, #4
    4ff8:	4298      	cmp	r0, r3
    4ffa:	d900      	bls.n	4ffe <main+0x222>
    4ffc:	001c      	movs	r4, r3
				memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    4ffe:	2280      	movs	r2, #128	; 0x80
    5000:	0112      	lsls	r2, r2, #4
    5002:	2100      	movs	r1, #0
    5004:	486a      	ldr	r0, [pc, #424]	; (51b0 <main+0x3d4>)
    5006:	f002 fa75 	bl	74f4 <memset>
				recvfrom(UdpRxSockNum, (uint8_t*)TCP_RX_BUF, udp_size, ip, &port);
    500a:	4e60      	ldr	r6, [pc, #384]	; (518c <main+0x3b0>)
    500c:	7830      	ldrb	r0, [r6, #0]
    500e:	ab14      	add	r3, sp, #80	; 0x50
    5010:	9300      	str	r3, [sp, #0]
    5012:	ab17      	add	r3, sp, #92	; 0x5c
    5014:	0022      	movs	r2, r4
    5016:	4966      	ldr	r1, [pc, #408]	; (51b0 <main+0x3d4>)
    5018:	f7fd fd3a 	bl	2a90 <recvfrom>
				socket(UdpTxSockNum, Sn_MR_UDP, UdpTxPort, SF_IO_NONBLOCK);
    501c:	4f65      	ldr	r7, [pc, #404]	; (51b4 <main+0x3d8>)
    501e:	883a      	ldrh	r2, [r7, #0]
    5020:	4d65      	ldr	r5, [pc, #404]	; (51b8 <main+0x3dc>)
    5022:	7828      	ldrb	r0, [r5, #0]
    5024:	2301      	movs	r3, #1
    5026:	2102      	movs	r1, #2
    5028:	f7fd fa2a 	bl	2480 <socket>
				sendto(UdpTxSockNum, (uint8_t *)TCP_RX_BUF, udp_size, ip, UdpTxPort);
    502c:	7828      	ldrb	r0, [r5, #0]
    502e:	883b      	ldrh	r3, [r7, #0]
    5030:	9300      	str	r3, [sp, #0]
    5032:	ab17      	add	r3, sp, #92	; 0x5c
    5034:	0022      	movs	r2, r4
    5036:	495e      	ldr	r1, [pc, #376]	; (51b0 <main+0x3d4>)
    5038:	f7fd fc70 	bl	291c <sendto>
				setSn_IR(UdpRxSockNum, 0x1F);
    503c:	7830      	ldrb	r0, [r6, #0]
    503e:	0080      	lsls	r0, r0, #2
    5040:	3001      	adds	r0, #1
    5042:	00c0      	lsls	r0, r0, #3
    5044:	2380      	movs	r3, #128	; 0x80
    5046:	009b      	lsls	r3, r3, #2
    5048:	469c      	mov	ip, r3
    504a:	4460      	add	r0, ip
    504c:	211f      	movs	r1, #31
    504e:	f7fd ff4f 	bl	2ef0 <WIZCHIP_WRITE>
    5052:	e756      	b.n	4f02 <main+0x126>
					size_t total_length = strlen(psu_page);
					size_t sent_length = 0;

					while (sent_length < total_length) {
						size_t chunk_size = total_length - sent_length > 1024 ? 1024 : total_length - sent_length;
						send(HTTP_SOCKET, (uint8_t*)(psu_page + sent_length), chunk_size);
    5054:	b2b2      	uxth	r2, r6
    5056:	4959      	ldr	r1, [pc, #356]	; (51bc <main+0x3e0>)
    5058:	19c9      	adds	r1, r1, r7
    505a:	0020      	movs	r0, r4
    505c:	f7fd fb48 	bl	26f0 <send>
						delay_ms(20);
    5060:	2014      	movs	r0, #20
    5062:	f7fb f8a1 	bl	1a8 <delay_ms>
						sent_length += chunk_size;
    5066:	19bf      	adds	r7, r7, r6
					while (sent_length < total_length) {
    5068:	4b55      	ldr	r3, [pc, #340]	; (51c0 <main+0x3e4>)
    506a:	429f      	cmp	r7, r3
    506c:	d817      	bhi.n	509e <main+0x2c2>
						size_t chunk_size = total_length - sent_length > 1024 ? 1024 : total_length - sent_length;
    506e:	4e55      	ldr	r6, [pc, #340]	; (51c4 <main+0x3e8>)
    5070:	1bf6      	subs	r6, r6, r7
    5072:	2380      	movs	r3, #128	; 0x80
    5074:	00db      	lsls	r3, r3, #3
    5076:	429e      	cmp	r6, r3
    5078:	d9ec      	bls.n	5054 <main+0x278>
    507a:	001e      	movs	r6, r3
    507c:	e7ea      	b.n	5054 <main+0x278>
					}
					
					//favicon handler
					} else if (strstr((char*)TCP_RX_BUF, "GET /favicon.ico") != NULL) {
    507e:	4952      	ldr	r1, [pc, #328]	; (51c8 <main+0x3ec>)
    5080:	484b      	ldr	r0, [pc, #300]	; (51b0 <main+0x3d4>)
    5082:	f002 fd33 	bl	7aec <strstr>
    5086:	2800      	cmp	r0, #0
    5088:	d049      	beq.n	511e <main+0x342>
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: image/x-icon\r\n\r\n", 47);
    508a:	222f      	movs	r2, #47	; 0x2f
    508c:	494f      	ldr	r1, [pc, #316]	; (51cc <main+0x3f0>)
    508e:	0020      	movs	r0, r4
    5090:	f7fd fb2e 	bl	26f0 <send>
					send(HTTP_SOCKET, (uint8_t *)favicon_ico, sizeof(favicon_ico));
    5094:	4a4e      	ldr	r2, [pc, #312]	; (51d0 <main+0x3f4>)
    5096:	494f      	ldr	r1, [pc, #316]	; (51d4 <main+0x3f8>)
    5098:	0020      	movs	r0, r4
    509a:	f7fd fb29 	bl	26f0 <send>
						remoteCtrl = 1;
					}
					send(HTTP_SOCKET, (uint8_t*)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"success\":true}", 65);
				}

				disconnect(HTTP_SOCKET);
    509e:	0020      	movs	r0, r4
    50a0:	f7fd fade 	bl	2660 <disconnect>
				close(HTTP_SOCKET);
    50a4:	0020      	movs	r0, r4
    50a6:	f7fd f9ab 	bl	2400 <close>

			//if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSE_WAIT) {
			//disconnect(HTTP_SOCKET);
			//}

			if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSED) {
    50aa:	0028      	movs	r0, r5
    50ac:	f7fd feee 	bl	2e8c <WIZCHIP_READ>
    50b0:	2800      	cmp	r0, #0
    50b2:	d100      	bne.n	50b6 <main+0x2da>
    50b4:	e16b      	b.n	538e <main+0x5b2>
		for(uint8_t HTTP_SOCKET = 5; HTTP_SOCKET <= 7; HTTP_SOCKET++) {
    50b6:	3401      	adds	r4, #1
    50b8:	b2e4      	uxtb	r4, r4
    50ba:	2c07      	cmp	r4, #7
    50bc:	d900      	bls.n	50c0 <main+0x2e4>
    50be:	e6e9      	b.n	4e94 <main+0xb8>
			if (getSn_SR(HTTP_SOCKET) == SOCK_ESTABLISHED) {
    50c0:	9410      	str	r4, [sp, #64]	; 0x40
    50c2:	00a5      	lsls	r5, r4, #2
    50c4:	3501      	adds	r5, #1
    50c6:	00ed      	lsls	r5, r5, #3
    50c8:	23c0      	movs	r3, #192	; 0xc0
    50ca:	009b      	lsls	r3, r3, #2
    50cc:	469c      	mov	ip, r3
    50ce:	4465      	add	r5, ip
    50d0:	0028      	movs	r0, r5
    50d2:	f7fd fedb 	bl	2e8c <WIZCHIP_READ>
    50d6:	2817      	cmp	r0, #23
    50d8:	d1e7      	bne.n	50aa <main+0x2ce>
				getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
    50da:	aa12      	add	r2, sp, #72	; 0x48
    50dc:	2104      	movs	r1, #4
    50de:	0020      	movs	r0, r4
    50e0:	f7fd fe14 	bl	2d0c <getsockopt>
				uint16_t res_size = getSn_RX_RSR(HTTP_SOCKET);
    50e4:	0020      	movs	r0, r4
    50e6:	f7fd ffe1 	bl	30ac <getSn_RX_RSR>
    50ea:	0006      	movs	r6, r0
				if (res_size > sizeof(TCP_RX_BUF)) {
    50ec:	2380      	movs	r3, #128	; 0x80
    50ee:	011b      	lsls	r3, r3, #4
    50f0:	4298      	cmp	r0, r3
    50f2:	d900      	bls.n	50f6 <main+0x31a>
					res_size = sizeof(TCP_RX_BUF);
    50f4:	001e      	movs	r6, r3
				memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    50f6:	4f2e      	ldr	r7, [pc, #184]	; (51b0 <main+0x3d4>)
    50f8:	2280      	movs	r2, #128	; 0x80
    50fa:	0112      	lsls	r2, r2, #4
    50fc:	2100      	movs	r1, #0
    50fe:	0038      	movs	r0, r7
    5100:	f002 f9f8 	bl	74f4 <memset>
				recv(HTTP_SOCKET, (uint8_t*)TCP_RX_BUF, res_size);
    5104:	0032      	movs	r2, r6
    5106:	0039      	movs	r1, r7
    5108:	0020      	movs	r0, r4
    510a:	f7fd fb8d 	bl	2828 <recv>
				if (strstr((char*)TCP_RX_BUF, "GET / ") != NULL) {
    510e:	4932      	ldr	r1, [pc, #200]	; (51d8 <main+0x3fc>)
    5110:	0038      	movs	r0, r7
    5112:	f002 fceb 	bl	7aec <strstr>
    5116:	2800      	cmp	r0, #0
    5118:	d0b1      	beq.n	507e <main+0x2a2>
    511a:	2700      	movs	r7, #0
    511c:	e7a4      	b.n	5068 <main+0x28c>
					} else if (strstr((char*)TCP_RX_BUF, "GET /set_vals") != NULL) {
    511e:	492f      	ldr	r1, [pc, #188]	; (51dc <main+0x400>)
    5120:	4823      	ldr	r0, [pc, #140]	; (51b0 <main+0x3d4>)
    5122:	f002 fce3 	bl	7aec <strstr>
    5126:	2800      	cmp	r0, #0
    5128:	d064      	beq.n	51f4 <main+0x418>
					char *query_string = strstr((char*)TCP_RX_BUF, "GET /set_vals") + strlen("GET /set_vals?");
    512a:	300e      	adds	r0, #14
    512c:	0006      	movs	r6, r0
					buzer(10);
    512e:	200a      	movs	r0, #10
    5130:	f7fc fd2e 	bl	1b90 <buzer>
					sscanf(query_string, "amp=%f&volt=%f", &amp, &volt);
    5134:	4b2a      	ldr	r3, [pc, #168]	; (51e0 <main+0x404>)
    5136:	4a2b      	ldr	r2, [pc, #172]	; (51e4 <main+0x408>)
    5138:	492b      	ldr	r1, [pc, #172]	; (51e8 <main+0x40c>)
    513a:	0030      	movs	r0, r6
    513c:	f002 fa66 	bl	760c <sscanf>
					remoteCtrl = 1;
    5140:	2201      	movs	r2, #1
    5142:	4b2a      	ldr	r3, [pc, #168]	; (51ec <main+0x410>)
    5144:	701a      	strb	r2, [r3, #0]
					send(HTTP_SOCKET, (uint8_t*)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"success\":true}", 67);
    5146:	3242      	adds	r2, #66	; 0x42
    5148:	4929      	ldr	r1, [pc, #164]	; (51f0 <main+0x414>)
    514a:	0020      	movs	r0, r4
    514c:	f7fd fad0 	bl	26f0 <send>
    5150:	e7a5      	b.n	509e <main+0x2c2>
    5152:	46c0      	nop			; (mov r8, r8)
    5154:	00001f9b 	.word	0x00001f9b
    5158:	00001f91 	.word	0x00001f91
    515c:	00001ff9 	.word	0x00001ff9
    5160:	00001fd5 	.word	0x00001fd5
    5164:	00001fbd 	.word	0x00001fbd
    5168:	00001fa5 	.word	0x00001fa5
    516c:	20000080 	.word	0x20000080
    5170:	20000068 	.word	0x20000068
    5174:	0000f47c 	.word	0x0000f47c
    5178:	20001458 	.word	0x20001458
    517c:	0000fa14 	.word	0x0000fa14
    5180:	20001690 	.word	0x20001690
    5184:	0000fa1c 	.word	0x0000fa1c
    5188:	41004400 	.word	0x41004400
    518c:	2000005c 	.word	0x2000005c
    5190:	20001688 	.word	0x20001688
    5194:	0000ffff 	.word	0x0000ffff
    5198:	2000168c 	.word	0x2000168c
    519c:	f3f3fa86 	.word	0xf3f3fa86
    51a0:	3f6321fa 	.word	0x3f6321fa
    51a4:	2000009c 	.word	0x2000009c
    51a8:	20000064 	.word	0x20000064
    51ac:	2000005a 	.word	0x2000005a
    51b0:	20000c58 	.word	0x20000c58
    51b4:	2000005e 	.word	0x2000005e
    51b8:	20000ae3 	.word	0x20000ae3
    51bc:	0000fbd8 	.word	0x0000fbd8
    51c0:	00001dae 	.word	0x00001dae
    51c4:	00001daf 	.word	0x00001daf
    51c8:	0000fa30 	.word	0x0000fa30
    51cc:	0000fa44 	.word	0x0000fa44
    51d0:	00000582 	.word	0x00000582
    51d4:	0000f490 	.word	0x0000f490
    51d8:	0000fa28 	.word	0x0000fa28
    51dc:	0000fa74 	.word	0x0000fa74
    51e0:	20000098 	.word	0x20000098
    51e4:	20000060 	.word	0x20000060
    51e8:	0000fa84 	.word	0x0000fa84
    51ec:	20000ae5 	.word	0x20000ae5
    51f0:	0000fa94 	.word	0x0000fa94
					} else if (strstr((char*)TCP_RX_BUF, "GET /get_vals") != NULL) {
    51f4:	496c      	ldr	r1, [pc, #432]	; (53a8 <main+0x5cc>)
    51f6:	486d      	ldr	r0, [pc, #436]	; (53ac <main+0x5d0>)
    51f8:	f002 fc78 	bl	7aec <strstr>
    51fc:	2800      	cmp	r0, #0
    51fe:	d040      	beq.n	5282 <main+0x4a6>
					float watt = ampDMM * voltDMM;
    5200:	4b6b      	ldr	r3, [pc, #428]	; (53b0 <main+0x5d4>)
    5202:	681e      	ldr	r6, [r3, #0]
    5204:	4b6b      	ldr	r3, [pc, #428]	; (53b4 <main+0x5d8>)
    5206:	681f      	ldr	r7, [r3, #0]
    5208:	1c39      	adds	r1, r7, #0
    520a:	1c30      	adds	r0, r6, #0
    520c:	f000 fb9a 	bl	5944 <__aeabi_fmul>
    5210:	9011      	str	r0, [sp, #68]	; 0x44
					snprintf(json_response, sizeof(json_response),
    5212:	2301      	movs	r3, #1
    5214:	930f      	str	r3, [sp, #60]	; 0x3c
    5216:	930e      	str	r3, [sp, #56]	; 0x38
    5218:	2300      	movs	r3, #0
    521a:	930d      	str	r3, [sp, #52]	; 0x34
    521c:	4b66      	ldr	r3, [pc, #408]	; (53b8 <main+0x5dc>)
    521e:	781b      	ldrb	r3, [r3, #0]
    5220:	930c      	str	r3, [sp, #48]	; 0x30
    5222:	4b66      	ldr	r3, [pc, #408]	; (53bc <main+0x5e0>)
    5224:	781b      	ldrb	r3, [r3, #0]
    5226:	930b      	str	r3, [sp, #44]	; 0x2c
    5228:	4b65      	ldr	r3, [pc, #404]	; (53c0 <main+0x5e4>)
    522a:	781b      	ldrb	r3, [r3, #0]
    522c:	930a      	str	r3, [sp, #40]	; 0x28
    522e:	1c38      	adds	r0, r7, #0
    5230:	f001 fe70 	bl	6f14 <__aeabi_f2d>
    5234:	9008      	str	r0, [sp, #32]
    5236:	9109      	str	r1, [sp, #36]	; 0x24
    5238:	1c30      	adds	r0, r6, #0
    523a:	f001 fe6b 	bl	6f14 <__aeabi_f2d>
    523e:	9006      	str	r0, [sp, #24]
    5240:	9107      	str	r1, [sp, #28]
    5242:	9811      	ldr	r0, [sp, #68]	; 0x44
    5244:	f001 fe66 	bl	6f14 <__aeabi_f2d>
    5248:	9004      	str	r0, [sp, #16]
    524a:	9105      	str	r1, [sp, #20]
    524c:	4b5d      	ldr	r3, [pc, #372]	; (53c4 <main+0x5e8>)
    524e:	6818      	ldr	r0, [r3, #0]
    5250:	f001 fe60 	bl	6f14 <__aeabi_f2d>
    5254:	9002      	str	r0, [sp, #8]
    5256:	9103      	str	r1, [sp, #12]
    5258:	4b5b      	ldr	r3, [pc, #364]	; (53c8 <main+0x5ec>)
    525a:	6818      	ldr	r0, [r3, #0]
    525c:	f001 fe5a 	bl	6f14 <__aeabi_f2d>
    5260:	9000      	str	r0, [sp, #0]
    5262:	9101      	str	r1, [sp, #4]
    5264:	4a59      	ldr	r2, [pc, #356]	; (53cc <main+0x5f0>)
    5266:	2180      	movs	r1, #128	; 0x80
    5268:	0049      	lsls	r1, r1, #1
    526a:	a817      	add	r0, sp, #92	; 0x5c
    526c:	f002 f98c 	bl	7588 <snprintf>
					send(HTTP_SOCKET, (uint8_t*)json_response, strlen(json_response));
    5270:	a817      	add	r0, sp, #92	; 0x5c
    5272:	f002 faa7 	bl	77c4 <strlen>
    5276:	b282      	uxth	r2, r0
    5278:	a917      	add	r1, sp, #92	; 0x5c
    527a:	0020      	movs	r0, r4
    527c:	f7fd fa38 	bl	26f0 <send>
    5280:	e70d      	b.n	509e <main+0x2c2>
					} else if (strstr((char*)TCP_RX_BUF, "GET /control") != NULL) {
    5282:	4953      	ldr	r1, [pc, #332]	; (53d0 <main+0x5f4>)
    5284:	4849      	ldr	r0, [pc, #292]	; (53ac <main+0x5d0>)
    5286:	f002 fc31 	bl	7aec <strstr>
    528a:	2800      	cmp	r0, #0
    528c:	d100      	bne.n	5290 <main+0x4b4>
    528e:	e706      	b.n	509e <main+0x2c2>
					char *query_string = strstr((char*)TCP_RX_BUF, "GET /control") + strlen("GET /control?");
    5290:	300d      	adds	r0, #13
					sscanf(query_string, "device=%[^&]&action=%s", device, action);
    5292:	ab17      	add	r3, sp, #92	; 0x5c
    5294:	aa14      	add	r2, sp, #80	; 0x50
    5296:	494f      	ldr	r1, [pc, #316]	; (53d4 <main+0x5f8>)
    5298:	f002 f9b8 	bl	760c <sscanf>
					if (strcmp(device, "fan") == 0) {
    529c:	494e      	ldr	r1, [pc, #312]	; (53d8 <main+0x5fc>)
    529e:	a814      	add	r0, sp, #80	; 0x50
    52a0:	f002 fa4c 	bl	773c <strcmp>
    52a4:	2800      	cmp	r0, #0
    52a6:	d120      	bne.n	52ea <main+0x50e>
						buzer(10);
    52a8:	300a      	adds	r0, #10
    52aa:	f7fc fc71 	bl	1b90 <buzer>
						if (strcmp(action, "on") == 0) {
    52ae:	494b      	ldr	r1, [pc, #300]	; (53dc <main+0x600>)
    52b0:	a817      	add	r0, sp, #92	; 0x5c
    52b2:	f002 fa43 	bl	773c <strcmp>
    52b6:	2800      	cmp	r0, #0
    52b8:	d108      	bne.n	52cc <main+0x4f0>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    52ba:	23c0      	movs	r3, #192	; 0xc0
    52bc:	05db      	lsls	r3, r3, #23
    52be:	2280      	movs	r2, #128	; 0x80
    52c0:	0052      	lsls	r2, r2, #1
    52c2:	619a      	str	r2, [r3, #24]
    52c4:	3201      	adds	r2, #1
    52c6:	32ff      	adds	r2, #255	; 0xff
    52c8:	619a      	str	r2, [r3, #24]
    52ca:	e01a      	b.n	5302 <main+0x526>
							} else if (strcmp(action, "off") == 0) {
    52cc:	4944      	ldr	r1, [pc, #272]	; (53e0 <main+0x604>)
    52ce:	a817      	add	r0, sp, #92	; 0x5c
    52d0:	f002 fa34 	bl	773c <strcmp>
    52d4:	2800      	cmp	r0, #0
    52d6:	d114      	bne.n	5302 <main+0x526>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    52d8:	23c0      	movs	r3, #192	; 0xc0
    52da:	05db      	lsls	r3, r3, #23
    52dc:	2280      	movs	r2, #128	; 0x80
    52de:	0052      	lsls	r2, r2, #1
    52e0:	615a      	str	r2, [r3, #20]
    52e2:	3201      	adds	r2, #1
    52e4:	32ff      	adds	r2, #255	; 0xff
    52e6:	615a      	str	r2, [r3, #20]
    52e8:	e00b      	b.n	5302 <main+0x526>
						} else if (strcmp(device, "rem") == 0) {
    52ea:	493e      	ldr	r1, [pc, #248]	; (53e4 <main+0x608>)
    52ec:	a814      	add	r0, sp, #80	; 0x50
    52ee:	f002 fa25 	bl	773c <strcmp>
    52f2:	2800      	cmp	r0, #0
    52f4:	d00b      	beq.n	530e <main+0x532>
						} else if (strcmp(device, "psu") == 0) {
    52f6:	493c      	ldr	r1, [pc, #240]	; (53e8 <main+0x60c>)
    52f8:	a814      	add	r0, sp, #80	; 0x50
    52fa:	f002 fa1f 	bl	773c <strcmp>
    52fe:	2800      	cmp	r0, #0
    5300:	d02b      	beq.n	535a <main+0x57e>
					send(HTTP_SOCKET, (uint8_t*)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"success\":true}", 65);
    5302:	2241      	movs	r2, #65	; 0x41
    5304:	4939      	ldr	r1, [pc, #228]	; (53ec <main+0x610>)
    5306:	0020      	movs	r0, r4
    5308:	f7fd f9f2 	bl	26f0 <send>
    530c:	e6c7      	b.n	509e <main+0x2c2>
						buzer(10);
    530e:	300a      	adds	r0, #10
    5310:	f7fc fc3e 	bl	1b90 <buzer>
						if (strcmp(action, "on") == 0) {
    5314:	4931      	ldr	r1, [pc, #196]	; (53dc <main+0x600>)
    5316:	a817      	add	r0, sp, #92	; 0x5c
    5318:	f002 fa10 	bl	773c <strcmp>
    531c:	2800      	cmp	r0, #0
    531e:	d10c      	bne.n	533a <main+0x55e>
							remoteCtrl = 1;
    5320:	2201      	movs	r2, #1
    5322:	4b26      	ldr	r3, [pc, #152]	; (53bc <main+0x5e0>)
    5324:	701a      	strb	r2, [r3, #0]
						gpio_set_pin_level(O1, remoteCtrl);
    5326:	4b25      	ldr	r3, [pc, #148]	; (53bc <main+0x5e0>)
    5328:	781b      	ldrb	r3, [r3, #0]
    532a:	2b00      	cmp	r3, #0
    532c:	d00f      	beq.n	534e <main+0x572>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    532e:	2280      	movs	r2, #128	; 0x80
    5330:	00d2      	lsls	r2, r2, #3
    5332:	23c0      	movs	r3, #192	; 0xc0
    5334:	05db      	lsls	r3, r3, #23
    5336:	619a      	str	r2, [r3, #24]
    5338:	e7e3      	b.n	5302 <main+0x526>
							} else if (strcmp(action, "off") == 0) {
    533a:	4929      	ldr	r1, [pc, #164]	; (53e0 <main+0x604>)
    533c:	a817      	add	r0, sp, #92	; 0x5c
    533e:	f002 f9fd 	bl	773c <strcmp>
    5342:	2800      	cmp	r0, #0
    5344:	d1ef      	bne.n	5326 <main+0x54a>
							remoteCtrl = 0;
    5346:	2200      	movs	r2, #0
    5348:	4b1c      	ldr	r3, [pc, #112]	; (53bc <main+0x5e0>)
    534a:	701a      	strb	r2, [r3, #0]
    534c:	e7eb      	b.n	5326 <main+0x54a>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    534e:	2280      	movs	r2, #128	; 0x80
    5350:	00d2      	lsls	r2, r2, #3
    5352:	23c0      	movs	r3, #192	; 0xc0
    5354:	05db      	lsls	r3, r3, #23
    5356:	615a      	str	r2, [r3, #20]
    5358:	e7d3      	b.n	5302 <main+0x526>
						buzer(10);
    535a:	300a      	adds	r0, #10
    535c:	f7fc fc18 	bl	1b90 <buzer>
						if (strcmp(action, "on") == 0) {
    5360:	491e      	ldr	r1, [pc, #120]	; (53dc <main+0x600>)
    5362:	a817      	add	r0, sp, #92	; 0x5c
    5364:	f002 f9ea 	bl	773c <strcmp>
    5368:	2800      	cmp	r0, #0
    536a:	d106      	bne.n	537a <main+0x59e>
							outState = 1;
    536c:	2201      	movs	r2, #1
    536e:	4b14      	ldr	r3, [pc, #80]	; (53c0 <main+0x5e4>)
    5370:	701a      	strb	r2, [r3, #0]
						remoteCtrl = 1;
    5372:	2201      	movs	r2, #1
    5374:	4b11      	ldr	r3, [pc, #68]	; (53bc <main+0x5e0>)
    5376:	701a      	strb	r2, [r3, #0]
    5378:	e7c3      	b.n	5302 <main+0x526>
							} else if (strcmp(action, "off") == 0) {
    537a:	4919      	ldr	r1, [pc, #100]	; (53e0 <main+0x604>)
    537c:	a817      	add	r0, sp, #92	; 0x5c
    537e:	f002 f9dd 	bl	773c <strcmp>
    5382:	2800      	cmp	r0, #0
    5384:	d1f5      	bne.n	5372 <main+0x596>
							outState = 0;
    5386:	2200      	movs	r2, #0
    5388:	4b0d      	ldr	r3, [pc, #52]	; (53c0 <main+0x5e4>)
    538a:	701a      	strb	r2, [r3, #0]
    538c:	e7f1      	b.n	5372 <main+0x596>
				socket(HTTP_SOCKET, Sn_MR_TCP, socketPort[HTTP_SOCKET], 0);
    538e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5390:	005b      	lsls	r3, r3, #1
    5392:	4a17      	ldr	r2, [pc, #92]	; (53f0 <main+0x614>)
    5394:	5a9a      	ldrh	r2, [r3, r2]
    5396:	2300      	movs	r3, #0
    5398:	2101      	movs	r1, #1
    539a:	0020      	movs	r0, r4
    539c:	f7fd f870 	bl	2480 <socket>
				listen(HTTP_SOCKET);
    53a0:	0020      	movs	r0, r4
    53a2:	f7fd f925 	bl	25f0 <listen>
    53a6:	e686      	b.n	50b6 <main+0x2da>
    53a8:	0000fad8 	.word	0x0000fad8
    53ac:	20000c58 	.word	0x20000c58
    53b0:	20000064 	.word	0x20000064
    53b4:	2000009c 	.word	0x2000009c
    53b8:	20000ae4 	.word	0x20000ae4
    53bc:	20000ae5 	.word	0x20000ae5
    53c0:	2000007f 	.word	0x2000007f
    53c4:	20000098 	.word	0x20000098
    53c8:	20000060 	.word	0x20000060
    53cc:	0000fae8 	.word	0x0000fae8
    53d0:	0000fb9c 	.word	0x0000fb9c
    53d4:	0000fbac 	.word	0x0000fbac
    53d8:	0000fbc4 	.word	0x0000fbc4
    53dc:	0000fbc8 	.word	0x0000fbc8
    53e0:	0000fbcc 	.word	0x0000fbcc
    53e4:	0000fbd0 	.word	0x0000fbd0
    53e8:	0000fbd4 	.word	0x0000fbd4
    53ec:	0000fa94 	.word	0x0000fa94
    53f0:	20000088 	.word	0x20000088

000053f4 <__udivsi3>:
    53f4:	2200      	movs	r2, #0
    53f6:	0843      	lsrs	r3, r0, #1
    53f8:	428b      	cmp	r3, r1
    53fa:	d374      	bcc.n	54e6 <__udivsi3+0xf2>
    53fc:	0903      	lsrs	r3, r0, #4
    53fe:	428b      	cmp	r3, r1
    5400:	d35f      	bcc.n	54c2 <__udivsi3+0xce>
    5402:	0a03      	lsrs	r3, r0, #8
    5404:	428b      	cmp	r3, r1
    5406:	d344      	bcc.n	5492 <__udivsi3+0x9e>
    5408:	0b03      	lsrs	r3, r0, #12
    540a:	428b      	cmp	r3, r1
    540c:	d328      	bcc.n	5460 <__udivsi3+0x6c>
    540e:	0c03      	lsrs	r3, r0, #16
    5410:	428b      	cmp	r3, r1
    5412:	d30d      	bcc.n	5430 <__udivsi3+0x3c>
    5414:	22ff      	movs	r2, #255	; 0xff
    5416:	0209      	lsls	r1, r1, #8
    5418:	ba12      	rev	r2, r2
    541a:	0c03      	lsrs	r3, r0, #16
    541c:	428b      	cmp	r3, r1
    541e:	d302      	bcc.n	5426 <__udivsi3+0x32>
    5420:	1212      	asrs	r2, r2, #8
    5422:	0209      	lsls	r1, r1, #8
    5424:	d065      	beq.n	54f2 <__udivsi3+0xfe>
    5426:	0b03      	lsrs	r3, r0, #12
    5428:	428b      	cmp	r3, r1
    542a:	d319      	bcc.n	5460 <__udivsi3+0x6c>
    542c:	e000      	b.n	5430 <__udivsi3+0x3c>
    542e:	0a09      	lsrs	r1, r1, #8
    5430:	0bc3      	lsrs	r3, r0, #15
    5432:	428b      	cmp	r3, r1
    5434:	d301      	bcc.n	543a <__udivsi3+0x46>
    5436:	03cb      	lsls	r3, r1, #15
    5438:	1ac0      	subs	r0, r0, r3
    543a:	4152      	adcs	r2, r2
    543c:	0b83      	lsrs	r3, r0, #14
    543e:	428b      	cmp	r3, r1
    5440:	d301      	bcc.n	5446 <__udivsi3+0x52>
    5442:	038b      	lsls	r3, r1, #14
    5444:	1ac0      	subs	r0, r0, r3
    5446:	4152      	adcs	r2, r2
    5448:	0b43      	lsrs	r3, r0, #13
    544a:	428b      	cmp	r3, r1
    544c:	d301      	bcc.n	5452 <__udivsi3+0x5e>
    544e:	034b      	lsls	r3, r1, #13
    5450:	1ac0      	subs	r0, r0, r3
    5452:	4152      	adcs	r2, r2
    5454:	0b03      	lsrs	r3, r0, #12
    5456:	428b      	cmp	r3, r1
    5458:	d301      	bcc.n	545e <__udivsi3+0x6a>
    545a:	030b      	lsls	r3, r1, #12
    545c:	1ac0      	subs	r0, r0, r3
    545e:	4152      	adcs	r2, r2
    5460:	0ac3      	lsrs	r3, r0, #11
    5462:	428b      	cmp	r3, r1
    5464:	d301      	bcc.n	546a <__udivsi3+0x76>
    5466:	02cb      	lsls	r3, r1, #11
    5468:	1ac0      	subs	r0, r0, r3
    546a:	4152      	adcs	r2, r2
    546c:	0a83      	lsrs	r3, r0, #10
    546e:	428b      	cmp	r3, r1
    5470:	d301      	bcc.n	5476 <__udivsi3+0x82>
    5472:	028b      	lsls	r3, r1, #10
    5474:	1ac0      	subs	r0, r0, r3
    5476:	4152      	adcs	r2, r2
    5478:	0a43      	lsrs	r3, r0, #9
    547a:	428b      	cmp	r3, r1
    547c:	d301      	bcc.n	5482 <__udivsi3+0x8e>
    547e:	024b      	lsls	r3, r1, #9
    5480:	1ac0      	subs	r0, r0, r3
    5482:	4152      	adcs	r2, r2
    5484:	0a03      	lsrs	r3, r0, #8
    5486:	428b      	cmp	r3, r1
    5488:	d301      	bcc.n	548e <__udivsi3+0x9a>
    548a:	020b      	lsls	r3, r1, #8
    548c:	1ac0      	subs	r0, r0, r3
    548e:	4152      	adcs	r2, r2
    5490:	d2cd      	bcs.n	542e <__udivsi3+0x3a>
    5492:	09c3      	lsrs	r3, r0, #7
    5494:	428b      	cmp	r3, r1
    5496:	d301      	bcc.n	549c <__udivsi3+0xa8>
    5498:	01cb      	lsls	r3, r1, #7
    549a:	1ac0      	subs	r0, r0, r3
    549c:	4152      	adcs	r2, r2
    549e:	0983      	lsrs	r3, r0, #6
    54a0:	428b      	cmp	r3, r1
    54a2:	d301      	bcc.n	54a8 <__udivsi3+0xb4>
    54a4:	018b      	lsls	r3, r1, #6
    54a6:	1ac0      	subs	r0, r0, r3
    54a8:	4152      	adcs	r2, r2
    54aa:	0943      	lsrs	r3, r0, #5
    54ac:	428b      	cmp	r3, r1
    54ae:	d301      	bcc.n	54b4 <__udivsi3+0xc0>
    54b0:	014b      	lsls	r3, r1, #5
    54b2:	1ac0      	subs	r0, r0, r3
    54b4:	4152      	adcs	r2, r2
    54b6:	0903      	lsrs	r3, r0, #4
    54b8:	428b      	cmp	r3, r1
    54ba:	d301      	bcc.n	54c0 <__udivsi3+0xcc>
    54bc:	010b      	lsls	r3, r1, #4
    54be:	1ac0      	subs	r0, r0, r3
    54c0:	4152      	adcs	r2, r2
    54c2:	08c3      	lsrs	r3, r0, #3
    54c4:	428b      	cmp	r3, r1
    54c6:	d301      	bcc.n	54cc <__udivsi3+0xd8>
    54c8:	00cb      	lsls	r3, r1, #3
    54ca:	1ac0      	subs	r0, r0, r3
    54cc:	4152      	adcs	r2, r2
    54ce:	0883      	lsrs	r3, r0, #2
    54d0:	428b      	cmp	r3, r1
    54d2:	d301      	bcc.n	54d8 <__udivsi3+0xe4>
    54d4:	008b      	lsls	r3, r1, #2
    54d6:	1ac0      	subs	r0, r0, r3
    54d8:	4152      	adcs	r2, r2
    54da:	0843      	lsrs	r3, r0, #1
    54dc:	428b      	cmp	r3, r1
    54de:	d301      	bcc.n	54e4 <__udivsi3+0xf0>
    54e0:	004b      	lsls	r3, r1, #1
    54e2:	1ac0      	subs	r0, r0, r3
    54e4:	4152      	adcs	r2, r2
    54e6:	1a41      	subs	r1, r0, r1
    54e8:	d200      	bcs.n	54ec <__udivsi3+0xf8>
    54ea:	4601      	mov	r1, r0
    54ec:	4152      	adcs	r2, r2
    54ee:	4610      	mov	r0, r2
    54f0:	4770      	bx	lr
    54f2:	e7ff      	b.n	54f4 <__udivsi3+0x100>
    54f4:	b501      	push	{r0, lr}
    54f6:	2000      	movs	r0, #0
    54f8:	f000 f8f0 	bl	56dc <__aeabi_idiv0>
    54fc:	bd02      	pop	{r1, pc}
    54fe:	46c0      	nop			; (mov r8, r8)

00005500 <__aeabi_uidivmod>:
    5500:	2900      	cmp	r1, #0
    5502:	d0f7      	beq.n	54f4 <__udivsi3+0x100>
    5504:	e776      	b.n	53f4 <__udivsi3>
    5506:	4770      	bx	lr

00005508 <__divsi3>:
    5508:	4603      	mov	r3, r0
    550a:	430b      	orrs	r3, r1
    550c:	d47f      	bmi.n	560e <__divsi3+0x106>
    550e:	2200      	movs	r2, #0
    5510:	0843      	lsrs	r3, r0, #1
    5512:	428b      	cmp	r3, r1
    5514:	d374      	bcc.n	5600 <__divsi3+0xf8>
    5516:	0903      	lsrs	r3, r0, #4
    5518:	428b      	cmp	r3, r1
    551a:	d35f      	bcc.n	55dc <__divsi3+0xd4>
    551c:	0a03      	lsrs	r3, r0, #8
    551e:	428b      	cmp	r3, r1
    5520:	d344      	bcc.n	55ac <__divsi3+0xa4>
    5522:	0b03      	lsrs	r3, r0, #12
    5524:	428b      	cmp	r3, r1
    5526:	d328      	bcc.n	557a <__divsi3+0x72>
    5528:	0c03      	lsrs	r3, r0, #16
    552a:	428b      	cmp	r3, r1
    552c:	d30d      	bcc.n	554a <__divsi3+0x42>
    552e:	22ff      	movs	r2, #255	; 0xff
    5530:	0209      	lsls	r1, r1, #8
    5532:	ba12      	rev	r2, r2
    5534:	0c03      	lsrs	r3, r0, #16
    5536:	428b      	cmp	r3, r1
    5538:	d302      	bcc.n	5540 <__divsi3+0x38>
    553a:	1212      	asrs	r2, r2, #8
    553c:	0209      	lsls	r1, r1, #8
    553e:	d065      	beq.n	560c <__divsi3+0x104>
    5540:	0b03      	lsrs	r3, r0, #12
    5542:	428b      	cmp	r3, r1
    5544:	d319      	bcc.n	557a <__divsi3+0x72>
    5546:	e000      	b.n	554a <__divsi3+0x42>
    5548:	0a09      	lsrs	r1, r1, #8
    554a:	0bc3      	lsrs	r3, r0, #15
    554c:	428b      	cmp	r3, r1
    554e:	d301      	bcc.n	5554 <__divsi3+0x4c>
    5550:	03cb      	lsls	r3, r1, #15
    5552:	1ac0      	subs	r0, r0, r3
    5554:	4152      	adcs	r2, r2
    5556:	0b83      	lsrs	r3, r0, #14
    5558:	428b      	cmp	r3, r1
    555a:	d301      	bcc.n	5560 <__divsi3+0x58>
    555c:	038b      	lsls	r3, r1, #14
    555e:	1ac0      	subs	r0, r0, r3
    5560:	4152      	adcs	r2, r2
    5562:	0b43      	lsrs	r3, r0, #13
    5564:	428b      	cmp	r3, r1
    5566:	d301      	bcc.n	556c <__divsi3+0x64>
    5568:	034b      	lsls	r3, r1, #13
    556a:	1ac0      	subs	r0, r0, r3
    556c:	4152      	adcs	r2, r2
    556e:	0b03      	lsrs	r3, r0, #12
    5570:	428b      	cmp	r3, r1
    5572:	d301      	bcc.n	5578 <__divsi3+0x70>
    5574:	030b      	lsls	r3, r1, #12
    5576:	1ac0      	subs	r0, r0, r3
    5578:	4152      	adcs	r2, r2
    557a:	0ac3      	lsrs	r3, r0, #11
    557c:	428b      	cmp	r3, r1
    557e:	d301      	bcc.n	5584 <__divsi3+0x7c>
    5580:	02cb      	lsls	r3, r1, #11
    5582:	1ac0      	subs	r0, r0, r3
    5584:	4152      	adcs	r2, r2
    5586:	0a83      	lsrs	r3, r0, #10
    5588:	428b      	cmp	r3, r1
    558a:	d301      	bcc.n	5590 <__divsi3+0x88>
    558c:	028b      	lsls	r3, r1, #10
    558e:	1ac0      	subs	r0, r0, r3
    5590:	4152      	adcs	r2, r2
    5592:	0a43      	lsrs	r3, r0, #9
    5594:	428b      	cmp	r3, r1
    5596:	d301      	bcc.n	559c <__divsi3+0x94>
    5598:	024b      	lsls	r3, r1, #9
    559a:	1ac0      	subs	r0, r0, r3
    559c:	4152      	adcs	r2, r2
    559e:	0a03      	lsrs	r3, r0, #8
    55a0:	428b      	cmp	r3, r1
    55a2:	d301      	bcc.n	55a8 <__divsi3+0xa0>
    55a4:	020b      	lsls	r3, r1, #8
    55a6:	1ac0      	subs	r0, r0, r3
    55a8:	4152      	adcs	r2, r2
    55aa:	d2cd      	bcs.n	5548 <__divsi3+0x40>
    55ac:	09c3      	lsrs	r3, r0, #7
    55ae:	428b      	cmp	r3, r1
    55b0:	d301      	bcc.n	55b6 <__divsi3+0xae>
    55b2:	01cb      	lsls	r3, r1, #7
    55b4:	1ac0      	subs	r0, r0, r3
    55b6:	4152      	adcs	r2, r2
    55b8:	0983      	lsrs	r3, r0, #6
    55ba:	428b      	cmp	r3, r1
    55bc:	d301      	bcc.n	55c2 <__divsi3+0xba>
    55be:	018b      	lsls	r3, r1, #6
    55c0:	1ac0      	subs	r0, r0, r3
    55c2:	4152      	adcs	r2, r2
    55c4:	0943      	lsrs	r3, r0, #5
    55c6:	428b      	cmp	r3, r1
    55c8:	d301      	bcc.n	55ce <__divsi3+0xc6>
    55ca:	014b      	lsls	r3, r1, #5
    55cc:	1ac0      	subs	r0, r0, r3
    55ce:	4152      	adcs	r2, r2
    55d0:	0903      	lsrs	r3, r0, #4
    55d2:	428b      	cmp	r3, r1
    55d4:	d301      	bcc.n	55da <__divsi3+0xd2>
    55d6:	010b      	lsls	r3, r1, #4
    55d8:	1ac0      	subs	r0, r0, r3
    55da:	4152      	adcs	r2, r2
    55dc:	08c3      	lsrs	r3, r0, #3
    55de:	428b      	cmp	r3, r1
    55e0:	d301      	bcc.n	55e6 <__divsi3+0xde>
    55e2:	00cb      	lsls	r3, r1, #3
    55e4:	1ac0      	subs	r0, r0, r3
    55e6:	4152      	adcs	r2, r2
    55e8:	0883      	lsrs	r3, r0, #2
    55ea:	428b      	cmp	r3, r1
    55ec:	d301      	bcc.n	55f2 <__divsi3+0xea>
    55ee:	008b      	lsls	r3, r1, #2
    55f0:	1ac0      	subs	r0, r0, r3
    55f2:	4152      	adcs	r2, r2
    55f4:	0843      	lsrs	r3, r0, #1
    55f6:	428b      	cmp	r3, r1
    55f8:	d301      	bcc.n	55fe <__divsi3+0xf6>
    55fa:	004b      	lsls	r3, r1, #1
    55fc:	1ac0      	subs	r0, r0, r3
    55fe:	4152      	adcs	r2, r2
    5600:	1a41      	subs	r1, r0, r1
    5602:	d200      	bcs.n	5606 <__divsi3+0xfe>
    5604:	4601      	mov	r1, r0
    5606:	4152      	adcs	r2, r2
    5608:	4610      	mov	r0, r2
    560a:	4770      	bx	lr
    560c:	e05d      	b.n	56ca <__divsi3+0x1c2>
    560e:	0fca      	lsrs	r2, r1, #31
    5610:	d000      	beq.n	5614 <__divsi3+0x10c>
    5612:	4249      	negs	r1, r1
    5614:	1003      	asrs	r3, r0, #32
    5616:	d300      	bcc.n	561a <__divsi3+0x112>
    5618:	4240      	negs	r0, r0
    561a:	4053      	eors	r3, r2
    561c:	2200      	movs	r2, #0
    561e:	469c      	mov	ip, r3
    5620:	0903      	lsrs	r3, r0, #4
    5622:	428b      	cmp	r3, r1
    5624:	d32d      	bcc.n	5682 <__divsi3+0x17a>
    5626:	0a03      	lsrs	r3, r0, #8
    5628:	428b      	cmp	r3, r1
    562a:	d312      	bcc.n	5652 <__divsi3+0x14a>
    562c:	22fc      	movs	r2, #252	; 0xfc
    562e:	0189      	lsls	r1, r1, #6
    5630:	ba12      	rev	r2, r2
    5632:	0a03      	lsrs	r3, r0, #8
    5634:	428b      	cmp	r3, r1
    5636:	d30c      	bcc.n	5652 <__divsi3+0x14a>
    5638:	0189      	lsls	r1, r1, #6
    563a:	1192      	asrs	r2, r2, #6
    563c:	428b      	cmp	r3, r1
    563e:	d308      	bcc.n	5652 <__divsi3+0x14a>
    5640:	0189      	lsls	r1, r1, #6
    5642:	1192      	asrs	r2, r2, #6
    5644:	428b      	cmp	r3, r1
    5646:	d304      	bcc.n	5652 <__divsi3+0x14a>
    5648:	0189      	lsls	r1, r1, #6
    564a:	d03a      	beq.n	56c2 <__divsi3+0x1ba>
    564c:	1192      	asrs	r2, r2, #6
    564e:	e000      	b.n	5652 <__divsi3+0x14a>
    5650:	0989      	lsrs	r1, r1, #6
    5652:	09c3      	lsrs	r3, r0, #7
    5654:	428b      	cmp	r3, r1
    5656:	d301      	bcc.n	565c <__divsi3+0x154>
    5658:	01cb      	lsls	r3, r1, #7
    565a:	1ac0      	subs	r0, r0, r3
    565c:	4152      	adcs	r2, r2
    565e:	0983      	lsrs	r3, r0, #6
    5660:	428b      	cmp	r3, r1
    5662:	d301      	bcc.n	5668 <__divsi3+0x160>
    5664:	018b      	lsls	r3, r1, #6
    5666:	1ac0      	subs	r0, r0, r3
    5668:	4152      	adcs	r2, r2
    566a:	0943      	lsrs	r3, r0, #5
    566c:	428b      	cmp	r3, r1
    566e:	d301      	bcc.n	5674 <__divsi3+0x16c>
    5670:	014b      	lsls	r3, r1, #5
    5672:	1ac0      	subs	r0, r0, r3
    5674:	4152      	adcs	r2, r2
    5676:	0903      	lsrs	r3, r0, #4
    5678:	428b      	cmp	r3, r1
    567a:	d301      	bcc.n	5680 <__divsi3+0x178>
    567c:	010b      	lsls	r3, r1, #4
    567e:	1ac0      	subs	r0, r0, r3
    5680:	4152      	adcs	r2, r2
    5682:	08c3      	lsrs	r3, r0, #3
    5684:	428b      	cmp	r3, r1
    5686:	d301      	bcc.n	568c <__divsi3+0x184>
    5688:	00cb      	lsls	r3, r1, #3
    568a:	1ac0      	subs	r0, r0, r3
    568c:	4152      	adcs	r2, r2
    568e:	0883      	lsrs	r3, r0, #2
    5690:	428b      	cmp	r3, r1
    5692:	d301      	bcc.n	5698 <__divsi3+0x190>
    5694:	008b      	lsls	r3, r1, #2
    5696:	1ac0      	subs	r0, r0, r3
    5698:	4152      	adcs	r2, r2
    569a:	d2d9      	bcs.n	5650 <__divsi3+0x148>
    569c:	0843      	lsrs	r3, r0, #1
    569e:	428b      	cmp	r3, r1
    56a0:	d301      	bcc.n	56a6 <__divsi3+0x19e>
    56a2:	004b      	lsls	r3, r1, #1
    56a4:	1ac0      	subs	r0, r0, r3
    56a6:	4152      	adcs	r2, r2
    56a8:	1a41      	subs	r1, r0, r1
    56aa:	d200      	bcs.n	56ae <__divsi3+0x1a6>
    56ac:	4601      	mov	r1, r0
    56ae:	4663      	mov	r3, ip
    56b0:	4152      	adcs	r2, r2
    56b2:	105b      	asrs	r3, r3, #1
    56b4:	4610      	mov	r0, r2
    56b6:	d301      	bcc.n	56bc <__divsi3+0x1b4>
    56b8:	4240      	negs	r0, r0
    56ba:	2b00      	cmp	r3, #0
    56bc:	d500      	bpl.n	56c0 <__divsi3+0x1b8>
    56be:	4249      	negs	r1, r1
    56c0:	4770      	bx	lr
    56c2:	4663      	mov	r3, ip
    56c4:	105b      	asrs	r3, r3, #1
    56c6:	d300      	bcc.n	56ca <__divsi3+0x1c2>
    56c8:	4240      	negs	r0, r0
    56ca:	b501      	push	{r0, lr}
    56cc:	2000      	movs	r0, #0
    56ce:	f000 f805 	bl	56dc <__aeabi_idiv0>
    56d2:	bd02      	pop	{r1, pc}

000056d4 <__aeabi_idivmod>:
    56d4:	2900      	cmp	r1, #0
    56d6:	d0f8      	beq.n	56ca <__divsi3+0x1c2>
    56d8:	e716      	b.n	5508 <__divsi3>
    56da:	4770      	bx	lr

000056dc <__aeabi_idiv0>:
    56dc:	4770      	bx	lr
    56de:	46c0      	nop			; (mov r8, r8)

000056e0 <__aeabi_uldivmod>:
    56e0:	2b00      	cmp	r3, #0
    56e2:	d111      	bne.n	5708 <__aeabi_uldivmod+0x28>
    56e4:	2a00      	cmp	r2, #0
    56e6:	d10f      	bne.n	5708 <__aeabi_uldivmod+0x28>
    56e8:	2900      	cmp	r1, #0
    56ea:	d100      	bne.n	56ee <__aeabi_uldivmod+0xe>
    56ec:	2800      	cmp	r0, #0
    56ee:	d002      	beq.n	56f6 <__aeabi_uldivmod+0x16>
    56f0:	2100      	movs	r1, #0
    56f2:	43c9      	mvns	r1, r1
    56f4:	1c08      	adds	r0, r1, #0
    56f6:	b407      	push	{r0, r1, r2}
    56f8:	4802      	ldr	r0, [pc, #8]	; (5704 <__aeabi_uldivmod+0x24>)
    56fa:	a102      	add	r1, pc, #8	; (adr r1, 5704 <__aeabi_uldivmod+0x24>)
    56fc:	1840      	adds	r0, r0, r1
    56fe:	9002      	str	r0, [sp, #8]
    5700:	bd03      	pop	{r0, r1, pc}
    5702:	46c0      	nop			; (mov r8, r8)
    5704:	ffffffd9 	.word	0xffffffd9
    5708:	b403      	push	{r0, r1}
    570a:	4668      	mov	r0, sp
    570c:	b501      	push	{r0, lr}
    570e:	9802      	ldr	r0, [sp, #8]
    5710:	f000 f858 	bl	57c4 <__udivmoddi4>
    5714:	9b01      	ldr	r3, [sp, #4]
    5716:	469e      	mov	lr, r3
    5718:	b002      	add	sp, #8
    571a:	bc0c      	pop	{r2, r3}
    571c:	4770      	bx	lr
    571e:	46c0      	nop			; (mov r8, r8)

00005720 <__aeabi_lmul>:
    5720:	b5f0      	push	{r4, r5, r6, r7, lr}
    5722:	46ce      	mov	lr, r9
    5724:	4647      	mov	r7, r8
    5726:	0415      	lsls	r5, r2, #16
    5728:	0c2d      	lsrs	r5, r5, #16
    572a:	002e      	movs	r6, r5
    572c:	b580      	push	{r7, lr}
    572e:	0407      	lsls	r7, r0, #16
    5730:	0c14      	lsrs	r4, r2, #16
    5732:	0c3f      	lsrs	r7, r7, #16
    5734:	4699      	mov	r9, r3
    5736:	0c03      	lsrs	r3, r0, #16
    5738:	437e      	muls	r6, r7
    573a:	435d      	muls	r5, r3
    573c:	4367      	muls	r7, r4
    573e:	4363      	muls	r3, r4
    5740:	197f      	adds	r7, r7, r5
    5742:	0c34      	lsrs	r4, r6, #16
    5744:	19e4      	adds	r4, r4, r7
    5746:	469c      	mov	ip, r3
    5748:	42a5      	cmp	r5, r4
    574a:	d903      	bls.n	5754 <__aeabi_lmul+0x34>
    574c:	2380      	movs	r3, #128	; 0x80
    574e:	025b      	lsls	r3, r3, #9
    5750:	4698      	mov	r8, r3
    5752:	44c4      	add	ip, r8
    5754:	464b      	mov	r3, r9
    5756:	4351      	muls	r1, r2
    5758:	4343      	muls	r3, r0
    575a:	0436      	lsls	r6, r6, #16
    575c:	0c36      	lsrs	r6, r6, #16
    575e:	0c25      	lsrs	r5, r4, #16
    5760:	0424      	lsls	r4, r4, #16
    5762:	4465      	add	r5, ip
    5764:	19a4      	adds	r4, r4, r6
    5766:	1859      	adds	r1, r3, r1
    5768:	1949      	adds	r1, r1, r5
    576a:	0020      	movs	r0, r4
    576c:	bc0c      	pop	{r2, r3}
    576e:	4690      	mov	r8, r2
    5770:	4699      	mov	r9, r3
    5772:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005774 <__ffssi2>:
    5774:	b510      	push	{r4, lr}
    5776:	2300      	movs	r3, #0
    5778:	2800      	cmp	r0, #0
    577a:	d002      	beq.n	5782 <__ffssi2+0xe>
    577c:	f001 fd0e 	bl	719c <__ctzsi2>
    5780:	1c43      	adds	r3, r0, #1
    5782:	0018      	movs	r0, r3
    5784:	bd10      	pop	{r4, pc}
    5786:	46c0      	nop			; (mov r8, r8)

00005788 <__aeabi_d2uiz>:
    5788:	b570      	push	{r4, r5, r6, lr}
    578a:	2200      	movs	r2, #0
    578c:	4b0c      	ldr	r3, [pc, #48]	; (57c0 <__aeabi_d2uiz+0x38>)
    578e:	0004      	movs	r4, r0
    5790:	000d      	movs	r5, r1
    5792:	f001 fccf 	bl	7134 <__aeabi_dcmpge>
    5796:	2800      	cmp	r0, #0
    5798:	d104      	bne.n	57a4 <__aeabi_d2uiz+0x1c>
    579a:	0020      	movs	r0, r4
    579c:	0029      	movs	r1, r5
    579e:	f001 fb0b 	bl	6db8 <__aeabi_d2iz>
    57a2:	bd70      	pop	{r4, r5, r6, pc}
    57a4:	4b06      	ldr	r3, [pc, #24]	; (57c0 <__aeabi_d2uiz+0x38>)
    57a6:	2200      	movs	r2, #0
    57a8:	0020      	movs	r0, r4
    57aa:	0029      	movs	r1, r5
    57ac:	f000 ffee 	bl	678c <__aeabi_dsub>
    57b0:	f001 fb02 	bl	6db8 <__aeabi_d2iz>
    57b4:	2380      	movs	r3, #128	; 0x80
    57b6:	061b      	lsls	r3, r3, #24
    57b8:	469c      	mov	ip, r3
    57ba:	4460      	add	r0, ip
    57bc:	e7f1      	b.n	57a2 <__aeabi_d2uiz+0x1a>
    57be:	46c0      	nop			; (mov r8, r8)
    57c0:	41e00000 	.word	0x41e00000

000057c4 <__udivmoddi4>:
    57c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    57c6:	4657      	mov	r7, sl
    57c8:	464e      	mov	r6, r9
    57ca:	4645      	mov	r5, r8
    57cc:	46de      	mov	lr, fp
    57ce:	b5e0      	push	{r5, r6, r7, lr}
    57d0:	0004      	movs	r4, r0
    57d2:	b083      	sub	sp, #12
    57d4:	000d      	movs	r5, r1
    57d6:	4692      	mov	sl, r2
    57d8:	4699      	mov	r9, r3
    57da:	428b      	cmp	r3, r1
    57dc:	d82f      	bhi.n	583e <__udivmoddi4+0x7a>
    57de:	d02c      	beq.n	583a <__udivmoddi4+0x76>
    57e0:	4649      	mov	r1, r9
    57e2:	4650      	mov	r0, sl
    57e4:	f001 fcce 	bl	7184 <__clzdi2>
    57e8:	0029      	movs	r1, r5
    57ea:	0006      	movs	r6, r0
    57ec:	0020      	movs	r0, r4
    57ee:	f001 fcc9 	bl	7184 <__clzdi2>
    57f2:	1a33      	subs	r3, r6, r0
    57f4:	4698      	mov	r8, r3
    57f6:	3b20      	subs	r3, #32
    57f8:	469b      	mov	fp, r3
    57fa:	d500      	bpl.n	57fe <__udivmoddi4+0x3a>
    57fc:	e074      	b.n	58e8 <__udivmoddi4+0x124>
    57fe:	4653      	mov	r3, sl
    5800:	465a      	mov	r2, fp
    5802:	4093      	lsls	r3, r2
    5804:	001f      	movs	r7, r3
    5806:	4653      	mov	r3, sl
    5808:	4642      	mov	r2, r8
    580a:	4093      	lsls	r3, r2
    580c:	001e      	movs	r6, r3
    580e:	42af      	cmp	r7, r5
    5810:	d829      	bhi.n	5866 <__udivmoddi4+0xa2>
    5812:	d026      	beq.n	5862 <__udivmoddi4+0x9e>
    5814:	465b      	mov	r3, fp
    5816:	1ba4      	subs	r4, r4, r6
    5818:	41bd      	sbcs	r5, r7
    581a:	2b00      	cmp	r3, #0
    581c:	da00      	bge.n	5820 <__udivmoddi4+0x5c>
    581e:	e079      	b.n	5914 <__udivmoddi4+0x150>
    5820:	2200      	movs	r2, #0
    5822:	2300      	movs	r3, #0
    5824:	9200      	str	r2, [sp, #0]
    5826:	9301      	str	r3, [sp, #4]
    5828:	2301      	movs	r3, #1
    582a:	465a      	mov	r2, fp
    582c:	4093      	lsls	r3, r2
    582e:	9301      	str	r3, [sp, #4]
    5830:	2301      	movs	r3, #1
    5832:	4642      	mov	r2, r8
    5834:	4093      	lsls	r3, r2
    5836:	9300      	str	r3, [sp, #0]
    5838:	e019      	b.n	586e <__udivmoddi4+0xaa>
    583a:	4282      	cmp	r2, r0
    583c:	d9d0      	bls.n	57e0 <__udivmoddi4+0x1c>
    583e:	2200      	movs	r2, #0
    5840:	2300      	movs	r3, #0
    5842:	9200      	str	r2, [sp, #0]
    5844:	9301      	str	r3, [sp, #4]
    5846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5848:	2b00      	cmp	r3, #0
    584a:	d001      	beq.n	5850 <__udivmoddi4+0x8c>
    584c:	601c      	str	r4, [r3, #0]
    584e:	605d      	str	r5, [r3, #4]
    5850:	9800      	ldr	r0, [sp, #0]
    5852:	9901      	ldr	r1, [sp, #4]
    5854:	b003      	add	sp, #12
    5856:	bc3c      	pop	{r2, r3, r4, r5}
    5858:	4690      	mov	r8, r2
    585a:	4699      	mov	r9, r3
    585c:	46a2      	mov	sl, r4
    585e:	46ab      	mov	fp, r5
    5860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5862:	42a3      	cmp	r3, r4
    5864:	d9d6      	bls.n	5814 <__udivmoddi4+0x50>
    5866:	2200      	movs	r2, #0
    5868:	2300      	movs	r3, #0
    586a:	9200      	str	r2, [sp, #0]
    586c:	9301      	str	r3, [sp, #4]
    586e:	4643      	mov	r3, r8
    5870:	2b00      	cmp	r3, #0
    5872:	d0e8      	beq.n	5846 <__udivmoddi4+0x82>
    5874:	07fb      	lsls	r3, r7, #31
    5876:	0872      	lsrs	r2, r6, #1
    5878:	431a      	orrs	r2, r3
    587a:	4646      	mov	r6, r8
    587c:	087b      	lsrs	r3, r7, #1
    587e:	e00e      	b.n	589e <__udivmoddi4+0xda>
    5880:	42ab      	cmp	r3, r5
    5882:	d101      	bne.n	5888 <__udivmoddi4+0xc4>
    5884:	42a2      	cmp	r2, r4
    5886:	d80c      	bhi.n	58a2 <__udivmoddi4+0xde>
    5888:	1aa4      	subs	r4, r4, r2
    588a:	419d      	sbcs	r5, r3
    588c:	2001      	movs	r0, #1
    588e:	1924      	adds	r4, r4, r4
    5890:	416d      	adcs	r5, r5
    5892:	2100      	movs	r1, #0
    5894:	3e01      	subs	r6, #1
    5896:	1824      	adds	r4, r4, r0
    5898:	414d      	adcs	r5, r1
    589a:	2e00      	cmp	r6, #0
    589c:	d006      	beq.n	58ac <__udivmoddi4+0xe8>
    589e:	42ab      	cmp	r3, r5
    58a0:	d9ee      	bls.n	5880 <__udivmoddi4+0xbc>
    58a2:	3e01      	subs	r6, #1
    58a4:	1924      	adds	r4, r4, r4
    58a6:	416d      	adcs	r5, r5
    58a8:	2e00      	cmp	r6, #0
    58aa:	d1f8      	bne.n	589e <__udivmoddi4+0xda>
    58ac:	465b      	mov	r3, fp
    58ae:	9800      	ldr	r0, [sp, #0]
    58b0:	9901      	ldr	r1, [sp, #4]
    58b2:	1900      	adds	r0, r0, r4
    58b4:	4169      	adcs	r1, r5
    58b6:	2b00      	cmp	r3, #0
    58b8:	db22      	blt.n	5900 <__udivmoddi4+0x13c>
    58ba:	002b      	movs	r3, r5
    58bc:	465a      	mov	r2, fp
    58be:	40d3      	lsrs	r3, r2
    58c0:	002a      	movs	r2, r5
    58c2:	4644      	mov	r4, r8
    58c4:	40e2      	lsrs	r2, r4
    58c6:	001c      	movs	r4, r3
    58c8:	465b      	mov	r3, fp
    58ca:	0015      	movs	r5, r2
    58cc:	2b00      	cmp	r3, #0
    58ce:	db2c      	blt.n	592a <__udivmoddi4+0x166>
    58d0:	0026      	movs	r6, r4
    58d2:	409e      	lsls	r6, r3
    58d4:	0033      	movs	r3, r6
    58d6:	0026      	movs	r6, r4
    58d8:	4647      	mov	r7, r8
    58da:	40be      	lsls	r6, r7
    58dc:	0032      	movs	r2, r6
    58de:	1a80      	subs	r0, r0, r2
    58e0:	4199      	sbcs	r1, r3
    58e2:	9000      	str	r0, [sp, #0]
    58e4:	9101      	str	r1, [sp, #4]
    58e6:	e7ae      	b.n	5846 <__udivmoddi4+0x82>
    58e8:	4642      	mov	r2, r8
    58ea:	2320      	movs	r3, #32
    58ec:	1a9b      	subs	r3, r3, r2
    58ee:	4652      	mov	r2, sl
    58f0:	40da      	lsrs	r2, r3
    58f2:	4641      	mov	r1, r8
    58f4:	0013      	movs	r3, r2
    58f6:	464a      	mov	r2, r9
    58f8:	408a      	lsls	r2, r1
    58fa:	0017      	movs	r7, r2
    58fc:	431f      	orrs	r7, r3
    58fe:	e782      	b.n	5806 <__udivmoddi4+0x42>
    5900:	4642      	mov	r2, r8
    5902:	2320      	movs	r3, #32
    5904:	1a9b      	subs	r3, r3, r2
    5906:	002a      	movs	r2, r5
    5908:	4646      	mov	r6, r8
    590a:	409a      	lsls	r2, r3
    590c:	0023      	movs	r3, r4
    590e:	40f3      	lsrs	r3, r6
    5910:	4313      	orrs	r3, r2
    5912:	e7d5      	b.n	58c0 <__udivmoddi4+0xfc>
    5914:	4642      	mov	r2, r8
    5916:	2320      	movs	r3, #32
    5918:	2100      	movs	r1, #0
    591a:	1a9b      	subs	r3, r3, r2
    591c:	2200      	movs	r2, #0
    591e:	9100      	str	r1, [sp, #0]
    5920:	9201      	str	r2, [sp, #4]
    5922:	2201      	movs	r2, #1
    5924:	40da      	lsrs	r2, r3
    5926:	9201      	str	r2, [sp, #4]
    5928:	e782      	b.n	5830 <__udivmoddi4+0x6c>
    592a:	4642      	mov	r2, r8
    592c:	2320      	movs	r3, #32
    592e:	0026      	movs	r6, r4
    5930:	1a9b      	subs	r3, r3, r2
    5932:	40de      	lsrs	r6, r3
    5934:	002f      	movs	r7, r5
    5936:	46b4      	mov	ip, r6
    5938:	4097      	lsls	r7, r2
    593a:	4666      	mov	r6, ip
    593c:	003b      	movs	r3, r7
    593e:	4333      	orrs	r3, r6
    5940:	e7c9      	b.n	58d6 <__udivmoddi4+0x112>
    5942:	46c0      	nop			; (mov r8, r8)

00005944 <__aeabi_fmul>:
    5944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5946:	4657      	mov	r7, sl
    5948:	464e      	mov	r6, r9
    594a:	4645      	mov	r5, r8
    594c:	46de      	mov	lr, fp
    594e:	b5e0      	push	{r5, r6, r7, lr}
    5950:	0247      	lsls	r7, r0, #9
    5952:	0046      	lsls	r6, r0, #1
    5954:	4688      	mov	r8, r1
    5956:	0a7f      	lsrs	r7, r7, #9
    5958:	0e36      	lsrs	r6, r6, #24
    595a:	0fc4      	lsrs	r4, r0, #31
    595c:	2e00      	cmp	r6, #0
    595e:	d047      	beq.n	59f0 <__aeabi_fmul+0xac>
    5960:	2eff      	cmp	r6, #255	; 0xff
    5962:	d024      	beq.n	59ae <__aeabi_fmul+0x6a>
    5964:	00fb      	lsls	r3, r7, #3
    5966:	2780      	movs	r7, #128	; 0x80
    5968:	04ff      	lsls	r7, r7, #19
    596a:	431f      	orrs	r7, r3
    596c:	2300      	movs	r3, #0
    596e:	4699      	mov	r9, r3
    5970:	469a      	mov	sl, r3
    5972:	3e7f      	subs	r6, #127	; 0x7f
    5974:	4643      	mov	r3, r8
    5976:	025d      	lsls	r5, r3, #9
    5978:	0058      	lsls	r0, r3, #1
    597a:	0fdb      	lsrs	r3, r3, #31
    597c:	0a6d      	lsrs	r5, r5, #9
    597e:	0e00      	lsrs	r0, r0, #24
    5980:	4698      	mov	r8, r3
    5982:	d043      	beq.n	5a0c <__aeabi_fmul+0xc8>
    5984:	28ff      	cmp	r0, #255	; 0xff
    5986:	d03b      	beq.n	5a00 <__aeabi_fmul+0xbc>
    5988:	00eb      	lsls	r3, r5, #3
    598a:	2580      	movs	r5, #128	; 0x80
    598c:	2200      	movs	r2, #0
    598e:	04ed      	lsls	r5, r5, #19
    5990:	431d      	orrs	r5, r3
    5992:	387f      	subs	r0, #127	; 0x7f
    5994:	1836      	adds	r6, r6, r0
    5996:	1c73      	adds	r3, r6, #1
    5998:	4641      	mov	r1, r8
    599a:	469b      	mov	fp, r3
    599c:	464b      	mov	r3, r9
    599e:	4061      	eors	r1, r4
    59a0:	4313      	orrs	r3, r2
    59a2:	2b0f      	cmp	r3, #15
    59a4:	d864      	bhi.n	5a70 <__aeabi_fmul+0x12c>
    59a6:	4875      	ldr	r0, [pc, #468]	; (5b7c <__aeabi_fmul+0x238>)
    59a8:	009b      	lsls	r3, r3, #2
    59aa:	58c3      	ldr	r3, [r0, r3]
    59ac:	469f      	mov	pc, r3
    59ae:	2f00      	cmp	r7, #0
    59b0:	d142      	bne.n	5a38 <__aeabi_fmul+0xf4>
    59b2:	2308      	movs	r3, #8
    59b4:	4699      	mov	r9, r3
    59b6:	3b06      	subs	r3, #6
    59b8:	26ff      	movs	r6, #255	; 0xff
    59ba:	469a      	mov	sl, r3
    59bc:	e7da      	b.n	5974 <__aeabi_fmul+0x30>
    59be:	4641      	mov	r1, r8
    59c0:	2a02      	cmp	r2, #2
    59c2:	d028      	beq.n	5a16 <__aeabi_fmul+0xd2>
    59c4:	2a03      	cmp	r2, #3
    59c6:	d100      	bne.n	59ca <__aeabi_fmul+0x86>
    59c8:	e0ce      	b.n	5b68 <__aeabi_fmul+0x224>
    59ca:	2a01      	cmp	r2, #1
    59cc:	d000      	beq.n	59d0 <__aeabi_fmul+0x8c>
    59ce:	e0ac      	b.n	5b2a <__aeabi_fmul+0x1e6>
    59d0:	4011      	ands	r1, r2
    59d2:	2000      	movs	r0, #0
    59d4:	2200      	movs	r2, #0
    59d6:	b2cc      	uxtb	r4, r1
    59d8:	0240      	lsls	r0, r0, #9
    59da:	05d2      	lsls	r2, r2, #23
    59dc:	0a40      	lsrs	r0, r0, #9
    59de:	07e4      	lsls	r4, r4, #31
    59e0:	4310      	orrs	r0, r2
    59e2:	4320      	orrs	r0, r4
    59e4:	bc3c      	pop	{r2, r3, r4, r5}
    59e6:	4690      	mov	r8, r2
    59e8:	4699      	mov	r9, r3
    59ea:	46a2      	mov	sl, r4
    59ec:	46ab      	mov	fp, r5
    59ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    59f0:	2f00      	cmp	r7, #0
    59f2:	d115      	bne.n	5a20 <__aeabi_fmul+0xdc>
    59f4:	2304      	movs	r3, #4
    59f6:	4699      	mov	r9, r3
    59f8:	3b03      	subs	r3, #3
    59fa:	2600      	movs	r6, #0
    59fc:	469a      	mov	sl, r3
    59fe:	e7b9      	b.n	5974 <__aeabi_fmul+0x30>
    5a00:	20ff      	movs	r0, #255	; 0xff
    5a02:	2202      	movs	r2, #2
    5a04:	2d00      	cmp	r5, #0
    5a06:	d0c5      	beq.n	5994 <__aeabi_fmul+0x50>
    5a08:	2203      	movs	r2, #3
    5a0a:	e7c3      	b.n	5994 <__aeabi_fmul+0x50>
    5a0c:	2d00      	cmp	r5, #0
    5a0e:	d119      	bne.n	5a44 <__aeabi_fmul+0x100>
    5a10:	2000      	movs	r0, #0
    5a12:	2201      	movs	r2, #1
    5a14:	e7be      	b.n	5994 <__aeabi_fmul+0x50>
    5a16:	2401      	movs	r4, #1
    5a18:	22ff      	movs	r2, #255	; 0xff
    5a1a:	400c      	ands	r4, r1
    5a1c:	2000      	movs	r0, #0
    5a1e:	e7db      	b.n	59d8 <__aeabi_fmul+0x94>
    5a20:	0038      	movs	r0, r7
    5a22:	f001 fb91 	bl	7148 <__clzsi2>
    5a26:	2676      	movs	r6, #118	; 0x76
    5a28:	1f43      	subs	r3, r0, #5
    5a2a:	409f      	lsls	r7, r3
    5a2c:	2300      	movs	r3, #0
    5a2e:	4276      	negs	r6, r6
    5a30:	1a36      	subs	r6, r6, r0
    5a32:	4699      	mov	r9, r3
    5a34:	469a      	mov	sl, r3
    5a36:	e79d      	b.n	5974 <__aeabi_fmul+0x30>
    5a38:	230c      	movs	r3, #12
    5a3a:	4699      	mov	r9, r3
    5a3c:	3b09      	subs	r3, #9
    5a3e:	26ff      	movs	r6, #255	; 0xff
    5a40:	469a      	mov	sl, r3
    5a42:	e797      	b.n	5974 <__aeabi_fmul+0x30>
    5a44:	0028      	movs	r0, r5
    5a46:	f001 fb7f 	bl	7148 <__clzsi2>
    5a4a:	1f43      	subs	r3, r0, #5
    5a4c:	409d      	lsls	r5, r3
    5a4e:	2376      	movs	r3, #118	; 0x76
    5a50:	425b      	negs	r3, r3
    5a52:	1a18      	subs	r0, r3, r0
    5a54:	2200      	movs	r2, #0
    5a56:	e79d      	b.n	5994 <__aeabi_fmul+0x50>
    5a58:	2080      	movs	r0, #128	; 0x80
    5a5a:	2400      	movs	r4, #0
    5a5c:	03c0      	lsls	r0, r0, #15
    5a5e:	22ff      	movs	r2, #255	; 0xff
    5a60:	e7ba      	b.n	59d8 <__aeabi_fmul+0x94>
    5a62:	003d      	movs	r5, r7
    5a64:	4652      	mov	r2, sl
    5a66:	e7ab      	b.n	59c0 <__aeabi_fmul+0x7c>
    5a68:	003d      	movs	r5, r7
    5a6a:	0021      	movs	r1, r4
    5a6c:	4652      	mov	r2, sl
    5a6e:	e7a7      	b.n	59c0 <__aeabi_fmul+0x7c>
    5a70:	0c3b      	lsrs	r3, r7, #16
    5a72:	469c      	mov	ip, r3
    5a74:	042a      	lsls	r2, r5, #16
    5a76:	0c12      	lsrs	r2, r2, #16
    5a78:	0c2b      	lsrs	r3, r5, #16
    5a7a:	0014      	movs	r4, r2
    5a7c:	4660      	mov	r0, ip
    5a7e:	4665      	mov	r5, ip
    5a80:	043f      	lsls	r7, r7, #16
    5a82:	0c3f      	lsrs	r7, r7, #16
    5a84:	437c      	muls	r4, r7
    5a86:	4342      	muls	r2, r0
    5a88:	435d      	muls	r5, r3
    5a8a:	437b      	muls	r3, r7
    5a8c:	0c27      	lsrs	r7, r4, #16
    5a8e:	189b      	adds	r3, r3, r2
    5a90:	18ff      	adds	r7, r7, r3
    5a92:	42ba      	cmp	r2, r7
    5a94:	d903      	bls.n	5a9e <__aeabi_fmul+0x15a>
    5a96:	2380      	movs	r3, #128	; 0x80
    5a98:	025b      	lsls	r3, r3, #9
    5a9a:	469c      	mov	ip, r3
    5a9c:	4465      	add	r5, ip
    5a9e:	0424      	lsls	r4, r4, #16
    5aa0:	043a      	lsls	r2, r7, #16
    5aa2:	0c24      	lsrs	r4, r4, #16
    5aa4:	1912      	adds	r2, r2, r4
    5aa6:	0193      	lsls	r3, r2, #6
    5aa8:	1e5c      	subs	r4, r3, #1
    5aaa:	41a3      	sbcs	r3, r4
    5aac:	0c3f      	lsrs	r7, r7, #16
    5aae:	0e92      	lsrs	r2, r2, #26
    5ab0:	197d      	adds	r5, r7, r5
    5ab2:	431a      	orrs	r2, r3
    5ab4:	01ad      	lsls	r5, r5, #6
    5ab6:	4315      	orrs	r5, r2
    5ab8:	012b      	lsls	r3, r5, #4
    5aba:	d504      	bpl.n	5ac6 <__aeabi_fmul+0x182>
    5abc:	2301      	movs	r3, #1
    5abe:	465e      	mov	r6, fp
    5ac0:	086a      	lsrs	r2, r5, #1
    5ac2:	401d      	ands	r5, r3
    5ac4:	4315      	orrs	r5, r2
    5ac6:	0032      	movs	r2, r6
    5ac8:	327f      	adds	r2, #127	; 0x7f
    5aca:	2a00      	cmp	r2, #0
    5acc:	dd25      	ble.n	5b1a <__aeabi_fmul+0x1d6>
    5ace:	076b      	lsls	r3, r5, #29
    5ad0:	d004      	beq.n	5adc <__aeabi_fmul+0x198>
    5ad2:	230f      	movs	r3, #15
    5ad4:	402b      	ands	r3, r5
    5ad6:	2b04      	cmp	r3, #4
    5ad8:	d000      	beq.n	5adc <__aeabi_fmul+0x198>
    5ada:	3504      	adds	r5, #4
    5adc:	012b      	lsls	r3, r5, #4
    5ade:	d503      	bpl.n	5ae8 <__aeabi_fmul+0x1a4>
    5ae0:	0032      	movs	r2, r6
    5ae2:	4b27      	ldr	r3, [pc, #156]	; (5b80 <__aeabi_fmul+0x23c>)
    5ae4:	3280      	adds	r2, #128	; 0x80
    5ae6:	401d      	ands	r5, r3
    5ae8:	2afe      	cmp	r2, #254	; 0xfe
    5aea:	dc94      	bgt.n	5a16 <__aeabi_fmul+0xd2>
    5aec:	2401      	movs	r4, #1
    5aee:	01a8      	lsls	r0, r5, #6
    5af0:	0a40      	lsrs	r0, r0, #9
    5af2:	b2d2      	uxtb	r2, r2
    5af4:	400c      	ands	r4, r1
    5af6:	e76f      	b.n	59d8 <__aeabi_fmul+0x94>
    5af8:	2080      	movs	r0, #128	; 0x80
    5afa:	03c0      	lsls	r0, r0, #15
    5afc:	4207      	tst	r7, r0
    5afe:	d007      	beq.n	5b10 <__aeabi_fmul+0x1cc>
    5b00:	4205      	tst	r5, r0
    5b02:	d105      	bne.n	5b10 <__aeabi_fmul+0x1cc>
    5b04:	4328      	orrs	r0, r5
    5b06:	0240      	lsls	r0, r0, #9
    5b08:	0a40      	lsrs	r0, r0, #9
    5b0a:	4644      	mov	r4, r8
    5b0c:	22ff      	movs	r2, #255	; 0xff
    5b0e:	e763      	b.n	59d8 <__aeabi_fmul+0x94>
    5b10:	4338      	orrs	r0, r7
    5b12:	0240      	lsls	r0, r0, #9
    5b14:	0a40      	lsrs	r0, r0, #9
    5b16:	22ff      	movs	r2, #255	; 0xff
    5b18:	e75e      	b.n	59d8 <__aeabi_fmul+0x94>
    5b1a:	2401      	movs	r4, #1
    5b1c:	1aa3      	subs	r3, r4, r2
    5b1e:	2b1b      	cmp	r3, #27
    5b20:	dd05      	ble.n	5b2e <__aeabi_fmul+0x1ea>
    5b22:	400c      	ands	r4, r1
    5b24:	2200      	movs	r2, #0
    5b26:	2000      	movs	r0, #0
    5b28:	e756      	b.n	59d8 <__aeabi_fmul+0x94>
    5b2a:	465e      	mov	r6, fp
    5b2c:	e7cb      	b.n	5ac6 <__aeabi_fmul+0x182>
    5b2e:	002a      	movs	r2, r5
    5b30:	2020      	movs	r0, #32
    5b32:	40da      	lsrs	r2, r3
    5b34:	1ac3      	subs	r3, r0, r3
    5b36:	409d      	lsls	r5, r3
    5b38:	002b      	movs	r3, r5
    5b3a:	1e5d      	subs	r5, r3, #1
    5b3c:	41ab      	sbcs	r3, r5
    5b3e:	4313      	orrs	r3, r2
    5b40:	075a      	lsls	r2, r3, #29
    5b42:	d004      	beq.n	5b4e <__aeabi_fmul+0x20a>
    5b44:	220f      	movs	r2, #15
    5b46:	401a      	ands	r2, r3
    5b48:	2a04      	cmp	r2, #4
    5b4a:	d000      	beq.n	5b4e <__aeabi_fmul+0x20a>
    5b4c:	3304      	adds	r3, #4
    5b4e:	015a      	lsls	r2, r3, #5
    5b50:	d504      	bpl.n	5b5c <__aeabi_fmul+0x218>
    5b52:	2401      	movs	r4, #1
    5b54:	2201      	movs	r2, #1
    5b56:	400c      	ands	r4, r1
    5b58:	2000      	movs	r0, #0
    5b5a:	e73d      	b.n	59d8 <__aeabi_fmul+0x94>
    5b5c:	2401      	movs	r4, #1
    5b5e:	019b      	lsls	r3, r3, #6
    5b60:	0a58      	lsrs	r0, r3, #9
    5b62:	400c      	ands	r4, r1
    5b64:	2200      	movs	r2, #0
    5b66:	e737      	b.n	59d8 <__aeabi_fmul+0x94>
    5b68:	2080      	movs	r0, #128	; 0x80
    5b6a:	2401      	movs	r4, #1
    5b6c:	03c0      	lsls	r0, r0, #15
    5b6e:	4328      	orrs	r0, r5
    5b70:	0240      	lsls	r0, r0, #9
    5b72:	0a40      	lsrs	r0, r0, #9
    5b74:	400c      	ands	r4, r1
    5b76:	22ff      	movs	r2, #255	; 0xff
    5b78:	e72e      	b.n	59d8 <__aeabi_fmul+0x94>
    5b7a:	46c0      	nop			; (mov r8, r8)
    5b7c:	00011988 	.word	0x00011988
    5b80:	f7ffffff 	.word	0xf7ffffff

00005b84 <__aeabi_i2f>:
    5b84:	b570      	push	{r4, r5, r6, lr}
    5b86:	2800      	cmp	r0, #0
    5b88:	d030      	beq.n	5bec <__aeabi_i2f+0x68>
    5b8a:	17c3      	asrs	r3, r0, #31
    5b8c:	18c4      	adds	r4, r0, r3
    5b8e:	405c      	eors	r4, r3
    5b90:	0fc5      	lsrs	r5, r0, #31
    5b92:	0020      	movs	r0, r4
    5b94:	f001 fad8 	bl	7148 <__clzsi2>
    5b98:	239e      	movs	r3, #158	; 0x9e
    5b9a:	1a1b      	subs	r3, r3, r0
    5b9c:	2b96      	cmp	r3, #150	; 0x96
    5b9e:	dc0d      	bgt.n	5bbc <__aeabi_i2f+0x38>
    5ba0:	2296      	movs	r2, #150	; 0x96
    5ba2:	1ad2      	subs	r2, r2, r3
    5ba4:	4094      	lsls	r4, r2
    5ba6:	002a      	movs	r2, r5
    5ba8:	0264      	lsls	r4, r4, #9
    5baa:	0a64      	lsrs	r4, r4, #9
    5bac:	b2db      	uxtb	r3, r3
    5bae:	0264      	lsls	r4, r4, #9
    5bb0:	05db      	lsls	r3, r3, #23
    5bb2:	0a60      	lsrs	r0, r4, #9
    5bb4:	07d2      	lsls	r2, r2, #31
    5bb6:	4318      	orrs	r0, r3
    5bb8:	4310      	orrs	r0, r2
    5bba:	bd70      	pop	{r4, r5, r6, pc}
    5bbc:	2b99      	cmp	r3, #153	; 0x99
    5bbe:	dc19      	bgt.n	5bf4 <__aeabi_i2f+0x70>
    5bc0:	2299      	movs	r2, #153	; 0x99
    5bc2:	1ad2      	subs	r2, r2, r3
    5bc4:	2a00      	cmp	r2, #0
    5bc6:	dd29      	ble.n	5c1c <__aeabi_i2f+0x98>
    5bc8:	4094      	lsls	r4, r2
    5bca:	0022      	movs	r2, r4
    5bcc:	4c14      	ldr	r4, [pc, #80]	; (5c20 <__aeabi_i2f+0x9c>)
    5bce:	4014      	ands	r4, r2
    5bd0:	0751      	lsls	r1, r2, #29
    5bd2:	d004      	beq.n	5bde <__aeabi_i2f+0x5a>
    5bd4:	210f      	movs	r1, #15
    5bd6:	400a      	ands	r2, r1
    5bd8:	2a04      	cmp	r2, #4
    5bda:	d000      	beq.n	5bde <__aeabi_i2f+0x5a>
    5bdc:	3404      	adds	r4, #4
    5bde:	0162      	lsls	r2, r4, #5
    5be0:	d413      	bmi.n	5c0a <__aeabi_i2f+0x86>
    5be2:	01a4      	lsls	r4, r4, #6
    5be4:	0a64      	lsrs	r4, r4, #9
    5be6:	b2db      	uxtb	r3, r3
    5be8:	002a      	movs	r2, r5
    5bea:	e7e0      	b.n	5bae <__aeabi_i2f+0x2a>
    5bec:	2200      	movs	r2, #0
    5bee:	2300      	movs	r3, #0
    5bf0:	2400      	movs	r4, #0
    5bf2:	e7dc      	b.n	5bae <__aeabi_i2f+0x2a>
    5bf4:	2205      	movs	r2, #5
    5bf6:	0021      	movs	r1, r4
    5bf8:	1a12      	subs	r2, r2, r0
    5bfa:	40d1      	lsrs	r1, r2
    5bfc:	22b9      	movs	r2, #185	; 0xb9
    5bfe:	1ad2      	subs	r2, r2, r3
    5c00:	4094      	lsls	r4, r2
    5c02:	1e62      	subs	r2, r4, #1
    5c04:	4194      	sbcs	r4, r2
    5c06:	430c      	orrs	r4, r1
    5c08:	e7da      	b.n	5bc0 <__aeabi_i2f+0x3c>
    5c0a:	4b05      	ldr	r3, [pc, #20]	; (5c20 <__aeabi_i2f+0x9c>)
    5c0c:	002a      	movs	r2, r5
    5c0e:	401c      	ands	r4, r3
    5c10:	239f      	movs	r3, #159	; 0x9f
    5c12:	01a4      	lsls	r4, r4, #6
    5c14:	1a1b      	subs	r3, r3, r0
    5c16:	0a64      	lsrs	r4, r4, #9
    5c18:	b2db      	uxtb	r3, r3
    5c1a:	e7c8      	b.n	5bae <__aeabi_i2f+0x2a>
    5c1c:	0022      	movs	r2, r4
    5c1e:	e7d5      	b.n	5bcc <__aeabi_i2f+0x48>
    5c20:	fbffffff 	.word	0xfbffffff

00005c24 <__aeabi_ddiv>:
    5c24:	b5f0      	push	{r4, r5, r6, r7, lr}
    5c26:	4657      	mov	r7, sl
    5c28:	4645      	mov	r5, r8
    5c2a:	46de      	mov	lr, fp
    5c2c:	464e      	mov	r6, r9
    5c2e:	b5e0      	push	{r5, r6, r7, lr}
    5c30:	004c      	lsls	r4, r1, #1
    5c32:	030e      	lsls	r6, r1, #12
    5c34:	b087      	sub	sp, #28
    5c36:	4683      	mov	fp, r0
    5c38:	4692      	mov	sl, r2
    5c3a:	001d      	movs	r5, r3
    5c3c:	4680      	mov	r8, r0
    5c3e:	0b36      	lsrs	r6, r6, #12
    5c40:	0d64      	lsrs	r4, r4, #21
    5c42:	0fcf      	lsrs	r7, r1, #31
    5c44:	2c00      	cmp	r4, #0
    5c46:	d04f      	beq.n	5ce8 <__aeabi_ddiv+0xc4>
    5c48:	4b6f      	ldr	r3, [pc, #444]	; (5e08 <__aeabi_ddiv+0x1e4>)
    5c4a:	429c      	cmp	r4, r3
    5c4c:	d035      	beq.n	5cba <__aeabi_ddiv+0x96>
    5c4e:	2380      	movs	r3, #128	; 0x80
    5c50:	0f42      	lsrs	r2, r0, #29
    5c52:	041b      	lsls	r3, r3, #16
    5c54:	00f6      	lsls	r6, r6, #3
    5c56:	4313      	orrs	r3, r2
    5c58:	4333      	orrs	r3, r6
    5c5a:	4699      	mov	r9, r3
    5c5c:	00c3      	lsls	r3, r0, #3
    5c5e:	4698      	mov	r8, r3
    5c60:	4b6a      	ldr	r3, [pc, #424]	; (5e0c <__aeabi_ddiv+0x1e8>)
    5c62:	2600      	movs	r6, #0
    5c64:	469c      	mov	ip, r3
    5c66:	2300      	movs	r3, #0
    5c68:	4464      	add	r4, ip
    5c6a:	9303      	str	r3, [sp, #12]
    5c6c:	032b      	lsls	r3, r5, #12
    5c6e:	0b1b      	lsrs	r3, r3, #12
    5c70:	469b      	mov	fp, r3
    5c72:	006b      	lsls	r3, r5, #1
    5c74:	0fed      	lsrs	r5, r5, #31
    5c76:	4650      	mov	r0, sl
    5c78:	0d5b      	lsrs	r3, r3, #21
    5c7a:	9501      	str	r5, [sp, #4]
    5c7c:	d05e      	beq.n	5d3c <__aeabi_ddiv+0x118>
    5c7e:	4a62      	ldr	r2, [pc, #392]	; (5e08 <__aeabi_ddiv+0x1e4>)
    5c80:	4293      	cmp	r3, r2
    5c82:	d053      	beq.n	5d2c <__aeabi_ddiv+0x108>
    5c84:	465a      	mov	r2, fp
    5c86:	00d1      	lsls	r1, r2, #3
    5c88:	2280      	movs	r2, #128	; 0x80
    5c8a:	0f40      	lsrs	r0, r0, #29
    5c8c:	0412      	lsls	r2, r2, #16
    5c8e:	4302      	orrs	r2, r0
    5c90:	430a      	orrs	r2, r1
    5c92:	4693      	mov	fp, r2
    5c94:	4652      	mov	r2, sl
    5c96:	00d1      	lsls	r1, r2, #3
    5c98:	4a5c      	ldr	r2, [pc, #368]	; (5e0c <__aeabi_ddiv+0x1e8>)
    5c9a:	4694      	mov	ip, r2
    5c9c:	2200      	movs	r2, #0
    5c9e:	4463      	add	r3, ip
    5ca0:	0038      	movs	r0, r7
    5ca2:	4068      	eors	r0, r5
    5ca4:	4684      	mov	ip, r0
    5ca6:	9002      	str	r0, [sp, #8]
    5ca8:	1ae4      	subs	r4, r4, r3
    5caa:	4316      	orrs	r6, r2
    5cac:	2e0f      	cmp	r6, #15
    5cae:	d900      	bls.n	5cb2 <__aeabi_ddiv+0x8e>
    5cb0:	e0b4      	b.n	5e1c <__aeabi_ddiv+0x1f8>
    5cb2:	4b57      	ldr	r3, [pc, #348]	; (5e10 <__aeabi_ddiv+0x1ec>)
    5cb4:	00b6      	lsls	r6, r6, #2
    5cb6:	599b      	ldr	r3, [r3, r6]
    5cb8:	469f      	mov	pc, r3
    5cba:	0003      	movs	r3, r0
    5cbc:	4333      	orrs	r3, r6
    5cbe:	4699      	mov	r9, r3
    5cc0:	d16c      	bne.n	5d9c <__aeabi_ddiv+0x178>
    5cc2:	2300      	movs	r3, #0
    5cc4:	4698      	mov	r8, r3
    5cc6:	3302      	adds	r3, #2
    5cc8:	2608      	movs	r6, #8
    5cca:	9303      	str	r3, [sp, #12]
    5ccc:	e7ce      	b.n	5c6c <__aeabi_ddiv+0x48>
    5cce:	46cb      	mov	fp, r9
    5cd0:	4641      	mov	r1, r8
    5cd2:	9a03      	ldr	r2, [sp, #12]
    5cd4:	9701      	str	r7, [sp, #4]
    5cd6:	2a02      	cmp	r2, #2
    5cd8:	d165      	bne.n	5da6 <__aeabi_ddiv+0x182>
    5cda:	9b01      	ldr	r3, [sp, #4]
    5cdc:	4c4a      	ldr	r4, [pc, #296]	; (5e08 <__aeabi_ddiv+0x1e4>)
    5cde:	469c      	mov	ip, r3
    5ce0:	2300      	movs	r3, #0
    5ce2:	2200      	movs	r2, #0
    5ce4:	4698      	mov	r8, r3
    5ce6:	e06b      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    5ce8:	0003      	movs	r3, r0
    5cea:	4333      	orrs	r3, r6
    5cec:	4699      	mov	r9, r3
    5cee:	d04e      	beq.n	5d8e <__aeabi_ddiv+0x16a>
    5cf0:	2e00      	cmp	r6, #0
    5cf2:	d100      	bne.n	5cf6 <__aeabi_ddiv+0xd2>
    5cf4:	e1bc      	b.n	6070 <__aeabi_ddiv+0x44c>
    5cf6:	0030      	movs	r0, r6
    5cf8:	f001 fa26 	bl	7148 <__clzsi2>
    5cfc:	0003      	movs	r3, r0
    5cfe:	3b0b      	subs	r3, #11
    5d00:	2b1c      	cmp	r3, #28
    5d02:	dd00      	ble.n	5d06 <__aeabi_ddiv+0xe2>
    5d04:	e1ac      	b.n	6060 <__aeabi_ddiv+0x43c>
    5d06:	221d      	movs	r2, #29
    5d08:	1ad3      	subs	r3, r2, r3
    5d0a:	465a      	mov	r2, fp
    5d0c:	0001      	movs	r1, r0
    5d0e:	40da      	lsrs	r2, r3
    5d10:	3908      	subs	r1, #8
    5d12:	408e      	lsls	r6, r1
    5d14:	0013      	movs	r3, r2
    5d16:	4333      	orrs	r3, r6
    5d18:	4699      	mov	r9, r3
    5d1a:	465b      	mov	r3, fp
    5d1c:	408b      	lsls	r3, r1
    5d1e:	4698      	mov	r8, r3
    5d20:	2300      	movs	r3, #0
    5d22:	4c3c      	ldr	r4, [pc, #240]	; (5e14 <__aeabi_ddiv+0x1f0>)
    5d24:	2600      	movs	r6, #0
    5d26:	1a24      	subs	r4, r4, r0
    5d28:	9303      	str	r3, [sp, #12]
    5d2a:	e79f      	b.n	5c6c <__aeabi_ddiv+0x48>
    5d2c:	4651      	mov	r1, sl
    5d2e:	465a      	mov	r2, fp
    5d30:	4311      	orrs	r1, r2
    5d32:	d129      	bne.n	5d88 <__aeabi_ddiv+0x164>
    5d34:	2200      	movs	r2, #0
    5d36:	4693      	mov	fp, r2
    5d38:	3202      	adds	r2, #2
    5d3a:	e7b1      	b.n	5ca0 <__aeabi_ddiv+0x7c>
    5d3c:	4659      	mov	r1, fp
    5d3e:	4301      	orrs	r1, r0
    5d40:	d01e      	beq.n	5d80 <__aeabi_ddiv+0x15c>
    5d42:	465b      	mov	r3, fp
    5d44:	2b00      	cmp	r3, #0
    5d46:	d100      	bne.n	5d4a <__aeabi_ddiv+0x126>
    5d48:	e19e      	b.n	6088 <__aeabi_ddiv+0x464>
    5d4a:	4658      	mov	r0, fp
    5d4c:	f001 f9fc 	bl	7148 <__clzsi2>
    5d50:	0003      	movs	r3, r0
    5d52:	3b0b      	subs	r3, #11
    5d54:	2b1c      	cmp	r3, #28
    5d56:	dd00      	ble.n	5d5a <__aeabi_ddiv+0x136>
    5d58:	e18f      	b.n	607a <__aeabi_ddiv+0x456>
    5d5a:	0002      	movs	r2, r0
    5d5c:	4659      	mov	r1, fp
    5d5e:	3a08      	subs	r2, #8
    5d60:	4091      	lsls	r1, r2
    5d62:	468b      	mov	fp, r1
    5d64:	211d      	movs	r1, #29
    5d66:	1acb      	subs	r3, r1, r3
    5d68:	4651      	mov	r1, sl
    5d6a:	40d9      	lsrs	r1, r3
    5d6c:	000b      	movs	r3, r1
    5d6e:	4659      	mov	r1, fp
    5d70:	430b      	orrs	r3, r1
    5d72:	4651      	mov	r1, sl
    5d74:	469b      	mov	fp, r3
    5d76:	4091      	lsls	r1, r2
    5d78:	4b26      	ldr	r3, [pc, #152]	; (5e14 <__aeabi_ddiv+0x1f0>)
    5d7a:	2200      	movs	r2, #0
    5d7c:	1a1b      	subs	r3, r3, r0
    5d7e:	e78f      	b.n	5ca0 <__aeabi_ddiv+0x7c>
    5d80:	2300      	movs	r3, #0
    5d82:	2201      	movs	r2, #1
    5d84:	469b      	mov	fp, r3
    5d86:	e78b      	b.n	5ca0 <__aeabi_ddiv+0x7c>
    5d88:	4651      	mov	r1, sl
    5d8a:	2203      	movs	r2, #3
    5d8c:	e788      	b.n	5ca0 <__aeabi_ddiv+0x7c>
    5d8e:	2300      	movs	r3, #0
    5d90:	4698      	mov	r8, r3
    5d92:	3301      	adds	r3, #1
    5d94:	2604      	movs	r6, #4
    5d96:	2400      	movs	r4, #0
    5d98:	9303      	str	r3, [sp, #12]
    5d9a:	e767      	b.n	5c6c <__aeabi_ddiv+0x48>
    5d9c:	2303      	movs	r3, #3
    5d9e:	46b1      	mov	r9, r6
    5da0:	9303      	str	r3, [sp, #12]
    5da2:	260c      	movs	r6, #12
    5da4:	e762      	b.n	5c6c <__aeabi_ddiv+0x48>
    5da6:	2a03      	cmp	r2, #3
    5da8:	d100      	bne.n	5dac <__aeabi_ddiv+0x188>
    5daa:	e25c      	b.n	6266 <__aeabi_ddiv+0x642>
    5dac:	9b01      	ldr	r3, [sp, #4]
    5dae:	2a01      	cmp	r2, #1
    5db0:	d000      	beq.n	5db4 <__aeabi_ddiv+0x190>
    5db2:	e1e4      	b.n	617e <__aeabi_ddiv+0x55a>
    5db4:	4013      	ands	r3, r2
    5db6:	469c      	mov	ip, r3
    5db8:	2300      	movs	r3, #0
    5dba:	2400      	movs	r4, #0
    5dbc:	2200      	movs	r2, #0
    5dbe:	4698      	mov	r8, r3
    5dc0:	2100      	movs	r1, #0
    5dc2:	0312      	lsls	r2, r2, #12
    5dc4:	0b13      	lsrs	r3, r2, #12
    5dc6:	0d0a      	lsrs	r2, r1, #20
    5dc8:	0512      	lsls	r2, r2, #20
    5dca:	431a      	orrs	r2, r3
    5dcc:	0523      	lsls	r3, r4, #20
    5dce:	4c12      	ldr	r4, [pc, #72]	; (5e18 <__aeabi_ddiv+0x1f4>)
    5dd0:	4640      	mov	r0, r8
    5dd2:	4022      	ands	r2, r4
    5dd4:	4313      	orrs	r3, r2
    5dd6:	4662      	mov	r2, ip
    5dd8:	005b      	lsls	r3, r3, #1
    5dda:	07d2      	lsls	r2, r2, #31
    5ddc:	085b      	lsrs	r3, r3, #1
    5dde:	4313      	orrs	r3, r2
    5de0:	0019      	movs	r1, r3
    5de2:	b007      	add	sp, #28
    5de4:	bc3c      	pop	{r2, r3, r4, r5}
    5de6:	4690      	mov	r8, r2
    5de8:	4699      	mov	r9, r3
    5dea:	46a2      	mov	sl, r4
    5dec:	46ab      	mov	fp, r5
    5dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5df0:	2300      	movs	r3, #0
    5df2:	2280      	movs	r2, #128	; 0x80
    5df4:	469c      	mov	ip, r3
    5df6:	0312      	lsls	r2, r2, #12
    5df8:	4698      	mov	r8, r3
    5dfa:	4c03      	ldr	r4, [pc, #12]	; (5e08 <__aeabi_ddiv+0x1e4>)
    5dfc:	e7e0      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    5dfe:	2300      	movs	r3, #0
    5e00:	4c01      	ldr	r4, [pc, #4]	; (5e08 <__aeabi_ddiv+0x1e4>)
    5e02:	2200      	movs	r2, #0
    5e04:	4698      	mov	r8, r3
    5e06:	e7db      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    5e08:	000007ff 	.word	0x000007ff
    5e0c:	fffffc01 	.word	0xfffffc01
    5e10:	000119c8 	.word	0x000119c8
    5e14:	fffffc0d 	.word	0xfffffc0d
    5e18:	800fffff 	.word	0x800fffff
    5e1c:	45d9      	cmp	r9, fp
    5e1e:	d900      	bls.n	5e22 <__aeabi_ddiv+0x1fe>
    5e20:	e139      	b.n	6096 <__aeabi_ddiv+0x472>
    5e22:	d100      	bne.n	5e26 <__aeabi_ddiv+0x202>
    5e24:	e134      	b.n	6090 <__aeabi_ddiv+0x46c>
    5e26:	2300      	movs	r3, #0
    5e28:	4646      	mov	r6, r8
    5e2a:	464d      	mov	r5, r9
    5e2c:	469a      	mov	sl, r3
    5e2e:	3c01      	subs	r4, #1
    5e30:	465b      	mov	r3, fp
    5e32:	0e0a      	lsrs	r2, r1, #24
    5e34:	021b      	lsls	r3, r3, #8
    5e36:	431a      	orrs	r2, r3
    5e38:	020b      	lsls	r3, r1, #8
    5e3a:	0c17      	lsrs	r7, r2, #16
    5e3c:	9303      	str	r3, [sp, #12]
    5e3e:	0413      	lsls	r3, r2, #16
    5e40:	0c1b      	lsrs	r3, r3, #16
    5e42:	0039      	movs	r1, r7
    5e44:	0028      	movs	r0, r5
    5e46:	4690      	mov	r8, r2
    5e48:	9301      	str	r3, [sp, #4]
    5e4a:	f7ff fad3 	bl	53f4 <__udivsi3>
    5e4e:	0002      	movs	r2, r0
    5e50:	9b01      	ldr	r3, [sp, #4]
    5e52:	4683      	mov	fp, r0
    5e54:	435a      	muls	r2, r3
    5e56:	0028      	movs	r0, r5
    5e58:	0039      	movs	r1, r7
    5e5a:	4691      	mov	r9, r2
    5e5c:	f7ff fb50 	bl	5500 <__aeabi_uidivmod>
    5e60:	0c35      	lsrs	r5, r6, #16
    5e62:	0409      	lsls	r1, r1, #16
    5e64:	430d      	orrs	r5, r1
    5e66:	45a9      	cmp	r9, r5
    5e68:	d90d      	bls.n	5e86 <__aeabi_ddiv+0x262>
    5e6a:	465b      	mov	r3, fp
    5e6c:	4445      	add	r5, r8
    5e6e:	3b01      	subs	r3, #1
    5e70:	45a8      	cmp	r8, r5
    5e72:	d900      	bls.n	5e76 <__aeabi_ddiv+0x252>
    5e74:	e13a      	b.n	60ec <__aeabi_ddiv+0x4c8>
    5e76:	45a9      	cmp	r9, r5
    5e78:	d800      	bhi.n	5e7c <__aeabi_ddiv+0x258>
    5e7a:	e137      	b.n	60ec <__aeabi_ddiv+0x4c8>
    5e7c:	2302      	movs	r3, #2
    5e7e:	425b      	negs	r3, r3
    5e80:	469c      	mov	ip, r3
    5e82:	4445      	add	r5, r8
    5e84:	44e3      	add	fp, ip
    5e86:	464b      	mov	r3, r9
    5e88:	1aeb      	subs	r3, r5, r3
    5e8a:	0039      	movs	r1, r7
    5e8c:	0018      	movs	r0, r3
    5e8e:	9304      	str	r3, [sp, #16]
    5e90:	f7ff fab0 	bl	53f4 <__udivsi3>
    5e94:	9b01      	ldr	r3, [sp, #4]
    5e96:	0005      	movs	r5, r0
    5e98:	4343      	muls	r3, r0
    5e9a:	0039      	movs	r1, r7
    5e9c:	9804      	ldr	r0, [sp, #16]
    5e9e:	4699      	mov	r9, r3
    5ea0:	f7ff fb2e 	bl	5500 <__aeabi_uidivmod>
    5ea4:	0433      	lsls	r3, r6, #16
    5ea6:	0409      	lsls	r1, r1, #16
    5ea8:	0c1b      	lsrs	r3, r3, #16
    5eaa:	430b      	orrs	r3, r1
    5eac:	4599      	cmp	r9, r3
    5eae:	d909      	bls.n	5ec4 <__aeabi_ddiv+0x2a0>
    5eb0:	4443      	add	r3, r8
    5eb2:	1e6a      	subs	r2, r5, #1
    5eb4:	4598      	cmp	r8, r3
    5eb6:	d900      	bls.n	5eba <__aeabi_ddiv+0x296>
    5eb8:	e11a      	b.n	60f0 <__aeabi_ddiv+0x4cc>
    5eba:	4599      	cmp	r9, r3
    5ebc:	d800      	bhi.n	5ec0 <__aeabi_ddiv+0x29c>
    5ebe:	e117      	b.n	60f0 <__aeabi_ddiv+0x4cc>
    5ec0:	3d02      	subs	r5, #2
    5ec2:	4443      	add	r3, r8
    5ec4:	464a      	mov	r2, r9
    5ec6:	1a9b      	subs	r3, r3, r2
    5ec8:	465a      	mov	r2, fp
    5eca:	0412      	lsls	r2, r2, #16
    5ecc:	432a      	orrs	r2, r5
    5ece:	9903      	ldr	r1, [sp, #12]
    5ed0:	4693      	mov	fp, r2
    5ed2:	0c10      	lsrs	r0, r2, #16
    5ed4:	0c0a      	lsrs	r2, r1, #16
    5ed6:	4691      	mov	r9, r2
    5ed8:	0409      	lsls	r1, r1, #16
    5eda:	465a      	mov	r2, fp
    5edc:	0c09      	lsrs	r1, r1, #16
    5ede:	464e      	mov	r6, r9
    5ee0:	000d      	movs	r5, r1
    5ee2:	0412      	lsls	r2, r2, #16
    5ee4:	0c12      	lsrs	r2, r2, #16
    5ee6:	4345      	muls	r5, r0
    5ee8:	9105      	str	r1, [sp, #20]
    5eea:	4351      	muls	r1, r2
    5eec:	4372      	muls	r2, r6
    5eee:	4370      	muls	r0, r6
    5ef0:	1952      	adds	r2, r2, r5
    5ef2:	0c0e      	lsrs	r6, r1, #16
    5ef4:	18b2      	adds	r2, r6, r2
    5ef6:	4295      	cmp	r5, r2
    5ef8:	d903      	bls.n	5f02 <__aeabi_ddiv+0x2de>
    5efa:	2580      	movs	r5, #128	; 0x80
    5efc:	026d      	lsls	r5, r5, #9
    5efe:	46ac      	mov	ip, r5
    5f00:	4460      	add	r0, ip
    5f02:	0c15      	lsrs	r5, r2, #16
    5f04:	0409      	lsls	r1, r1, #16
    5f06:	0412      	lsls	r2, r2, #16
    5f08:	0c09      	lsrs	r1, r1, #16
    5f0a:	1828      	adds	r0, r5, r0
    5f0c:	1852      	adds	r2, r2, r1
    5f0e:	4283      	cmp	r3, r0
    5f10:	d200      	bcs.n	5f14 <__aeabi_ddiv+0x2f0>
    5f12:	e0ce      	b.n	60b2 <__aeabi_ddiv+0x48e>
    5f14:	d100      	bne.n	5f18 <__aeabi_ddiv+0x2f4>
    5f16:	e0c8      	b.n	60aa <__aeabi_ddiv+0x486>
    5f18:	1a1d      	subs	r5, r3, r0
    5f1a:	4653      	mov	r3, sl
    5f1c:	1a9e      	subs	r6, r3, r2
    5f1e:	45b2      	cmp	sl, r6
    5f20:	4192      	sbcs	r2, r2
    5f22:	4252      	negs	r2, r2
    5f24:	1aab      	subs	r3, r5, r2
    5f26:	469a      	mov	sl, r3
    5f28:	4598      	cmp	r8, r3
    5f2a:	d100      	bne.n	5f2e <__aeabi_ddiv+0x30a>
    5f2c:	e117      	b.n	615e <__aeabi_ddiv+0x53a>
    5f2e:	0039      	movs	r1, r7
    5f30:	0018      	movs	r0, r3
    5f32:	f7ff fa5f 	bl	53f4 <__udivsi3>
    5f36:	9b01      	ldr	r3, [sp, #4]
    5f38:	0005      	movs	r5, r0
    5f3a:	4343      	muls	r3, r0
    5f3c:	0039      	movs	r1, r7
    5f3e:	4650      	mov	r0, sl
    5f40:	9304      	str	r3, [sp, #16]
    5f42:	f7ff fadd 	bl	5500 <__aeabi_uidivmod>
    5f46:	9804      	ldr	r0, [sp, #16]
    5f48:	040b      	lsls	r3, r1, #16
    5f4a:	0c31      	lsrs	r1, r6, #16
    5f4c:	4319      	orrs	r1, r3
    5f4e:	4288      	cmp	r0, r1
    5f50:	d909      	bls.n	5f66 <__aeabi_ddiv+0x342>
    5f52:	4441      	add	r1, r8
    5f54:	1e6b      	subs	r3, r5, #1
    5f56:	4588      	cmp	r8, r1
    5f58:	d900      	bls.n	5f5c <__aeabi_ddiv+0x338>
    5f5a:	e107      	b.n	616c <__aeabi_ddiv+0x548>
    5f5c:	4288      	cmp	r0, r1
    5f5e:	d800      	bhi.n	5f62 <__aeabi_ddiv+0x33e>
    5f60:	e104      	b.n	616c <__aeabi_ddiv+0x548>
    5f62:	3d02      	subs	r5, #2
    5f64:	4441      	add	r1, r8
    5f66:	9b04      	ldr	r3, [sp, #16]
    5f68:	1acb      	subs	r3, r1, r3
    5f6a:	0018      	movs	r0, r3
    5f6c:	0039      	movs	r1, r7
    5f6e:	9304      	str	r3, [sp, #16]
    5f70:	f7ff fa40 	bl	53f4 <__udivsi3>
    5f74:	9b01      	ldr	r3, [sp, #4]
    5f76:	4682      	mov	sl, r0
    5f78:	4343      	muls	r3, r0
    5f7a:	0039      	movs	r1, r7
    5f7c:	9804      	ldr	r0, [sp, #16]
    5f7e:	9301      	str	r3, [sp, #4]
    5f80:	f7ff fabe 	bl	5500 <__aeabi_uidivmod>
    5f84:	9801      	ldr	r0, [sp, #4]
    5f86:	040b      	lsls	r3, r1, #16
    5f88:	0431      	lsls	r1, r6, #16
    5f8a:	0c09      	lsrs	r1, r1, #16
    5f8c:	4319      	orrs	r1, r3
    5f8e:	4288      	cmp	r0, r1
    5f90:	d90d      	bls.n	5fae <__aeabi_ddiv+0x38a>
    5f92:	4653      	mov	r3, sl
    5f94:	4441      	add	r1, r8
    5f96:	3b01      	subs	r3, #1
    5f98:	4588      	cmp	r8, r1
    5f9a:	d900      	bls.n	5f9e <__aeabi_ddiv+0x37a>
    5f9c:	e0e8      	b.n	6170 <__aeabi_ddiv+0x54c>
    5f9e:	4288      	cmp	r0, r1
    5fa0:	d800      	bhi.n	5fa4 <__aeabi_ddiv+0x380>
    5fa2:	e0e5      	b.n	6170 <__aeabi_ddiv+0x54c>
    5fa4:	2302      	movs	r3, #2
    5fa6:	425b      	negs	r3, r3
    5fa8:	469c      	mov	ip, r3
    5faa:	4441      	add	r1, r8
    5fac:	44e2      	add	sl, ip
    5fae:	9b01      	ldr	r3, [sp, #4]
    5fb0:	042d      	lsls	r5, r5, #16
    5fb2:	1ace      	subs	r6, r1, r3
    5fb4:	4651      	mov	r1, sl
    5fb6:	4329      	orrs	r1, r5
    5fb8:	9d05      	ldr	r5, [sp, #20]
    5fba:	464f      	mov	r7, r9
    5fbc:	002a      	movs	r2, r5
    5fbe:	040b      	lsls	r3, r1, #16
    5fc0:	0c08      	lsrs	r0, r1, #16
    5fc2:	0c1b      	lsrs	r3, r3, #16
    5fc4:	435a      	muls	r2, r3
    5fc6:	4345      	muls	r5, r0
    5fc8:	437b      	muls	r3, r7
    5fca:	4378      	muls	r0, r7
    5fcc:	195b      	adds	r3, r3, r5
    5fce:	0c17      	lsrs	r7, r2, #16
    5fd0:	18fb      	adds	r3, r7, r3
    5fd2:	429d      	cmp	r5, r3
    5fd4:	d903      	bls.n	5fde <__aeabi_ddiv+0x3ba>
    5fd6:	2580      	movs	r5, #128	; 0x80
    5fd8:	026d      	lsls	r5, r5, #9
    5fda:	46ac      	mov	ip, r5
    5fdc:	4460      	add	r0, ip
    5fde:	0c1d      	lsrs	r5, r3, #16
    5fe0:	0412      	lsls	r2, r2, #16
    5fe2:	041b      	lsls	r3, r3, #16
    5fe4:	0c12      	lsrs	r2, r2, #16
    5fe6:	1828      	adds	r0, r5, r0
    5fe8:	189b      	adds	r3, r3, r2
    5fea:	4286      	cmp	r6, r0
    5fec:	d200      	bcs.n	5ff0 <__aeabi_ddiv+0x3cc>
    5fee:	e093      	b.n	6118 <__aeabi_ddiv+0x4f4>
    5ff0:	d100      	bne.n	5ff4 <__aeabi_ddiv+0x3d0>
    5ff2:	e08e      	b.n	6112 <__aeabi_ddiv+0x4ee>
    5ff4:	2301      	movs	r3, #1
    5ff6:	4319      	orrs	r1, r3
    5ff8:	4ba0      	ldr	r3, [pc, #640]	; (627c <__aeabi_ddiv+0x658>)
    5ffa:	18e3      	adds	r3, r4, r3
    5ffc:	2b00      	cmp	r3, #0
    5ffe:	dc00      	bgt.n	6002 <__aeabi_ddiv+0x3de>
    6000:	e099      	b.n	6136 <__aeabi_ddiv+0x512>
    6002:	074a      	lsls	r2, r1, #29
    6004:	d000      	beq.n	6008 <__aeabi_ddiv+0x3e4>
    6006:	e09e      	b.n	6146 <__aeabi_ddiv+0x522>
    6008:	465a      	mov	r2, fp
    600a:	01d2      	lsls	r2, r2, #7
    600c:	d506      	bpl.n	601c <__aeabi_ddiv+0x3f8>
    600e:	465a      	mov	r2, fp
    6010:	4b9b      	ldr	r3, [pc, #620]	; (6280 <__aeabi_ddiv+0x65c>)
    6012:	401a      	ands	r2, r3
    6014:	2380      	movs	r3, #128	; 0x80
    6016:	4693      	mov	fp, r2
    6018:	00db      	lsls	r3, r3, #3
    601a:	18e3      	adds	r3, r4, r3
    601c:	4a99      	ldr	r2, [pc, #612]	; (6284 <__aeabi_ddiv+0x660>)
    601e:	4293      	cmp	r3, r2
    6020:	dd68      	ble.n	60f4 <__aeabi_ddiv+0x4d0>
    6022:	2301      	movs	r3, #1
    6024:	9a02      	ldr	r2, [sp, #8]
    6026:	4c98      	ldr	r4, [pc, #608]	; (6288 <__aeabi_ddiv+0x664>)
    6028:	401a      	ands	r2, r3
    602a:	2300      	movs	r3, #0
    602c:	4694      	mov	ip, r2
    602e:	4698      	mov	r8, r3
    6030:	2200      	movs	r2, #0
    6032:	e6c5      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    6034:	2280      	movs	r2, #128	; 0x80
    6036:	464b      	mov	r3, r9
    6038:	0312      	lsls	r2, r2, #12
    603a:	4213      	tst	r3, r2
    603c:	d00a      	beq.n	6054 <__aeabi_ddiv+0x430>
    603e:	465b      	mov	r3, fp
    6040:	4213      	tst	r3, r2
    6042:	d106      	bne.n	6052 <__aeabi_ddiv+0x42e>
    6044:	431a      	orrs	r2, r3
    6046:	0312      	lsls	r2, r2, #12
    6048:	0b12      	lsrs	r2, r2, #12
    604a:	46ac      	mov	ip, r5
    604c:	4688      	mov	r8, r1
    604e:	4c8e      	ldr	r4, [pc, #568]	; (6288 <__aeabi_ddiv+0x664>)
    6050:	e6b6      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    6052:	464b      	mov	r3, r9
    6054:	431a      	orrs	r2, r3
    6056:	0312      	lsls	r2, r2, #12
    6058:	0b12      	lsrs	r2, r2, #12
    605a:	46bc      	mov	ip, r7
    605c:	4c8a      	ldr	r4, [pc, #552]	; (6288 <__aeabi_ddiv+0x664>)
    605e:	e6af      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    6060:	0003      	movs	r3, r0
    6062:	465a      	mov	r2, fp
    6064:	3b28      	subs	r3, #40	; 0x28
    6066:	409a      	lsls	r2, r3
    6068:	2300      	movs	r3, #0
    606a:	4691      	mov	r9, r2
    606c:	4698      	mov	r8, r3
    606e:	e657      	b.n	5d20 <__aeabi_ddiv+0xfc>
    6070:	4658      	mov	r0, fp
    6072:	f001 f869 	bl	7148 <__clzsi2>
    6076:	3020      	adds	r0, #32
    6078:	e640      	b.n	5cfc <__aeabi_ddiv+0xd8>
    607a:	0003      	movs	r3, r0
    607c:	4652      	mov	r2, sl
    607e:	3b28      	subs	r3, #40	; 0x28
    6080:	409a      	lsls	r2, r3
    6082:	2100      	movs	r1, #0
    6084:	4693      	mov	fp, r2
    6086:	e677      	b.n	5d78 <__aeabi_ddiv+0x154>
    6088:	f001 f85e 	bl	7148 <__clzsi2>
    608c:	3020      	adds	r0, #32
    608e:	e65f      	b.n	5d50 <__aeabi_ddiv+0x12c>
    6090:	4588      	cmp	r8, r1
    6092:	d200      	bcs.n	6096 <__aeabi_ddiv+0x472>
    6094:	e6c7      	b.n	5e26 <__aeabi_ddiv+0x202>
    6096:	464b      	mov	r3, r9
    6098:	07de      	lsls	r6, r3, #31
    609a:	085d      	lsrs	r5, r3, #1
    609c:	4643      	mov	r3, r8
    609e:	085b      	lsrs	r3, r3, #1
    60a0:	431e      	orrs	r6, r3
    60a2:	4643      	mov	r3, r8
    60a4:	07db      	lsls	r3, r3, #31
    60a6:	469a      	mov	sl, r3
    60a8:	e6c2      	b.n	5e30 <__aeabi_ddiv+0x20c>
    60aa:	2500      	movs	r5, #0
    60ac:	4592      	cmp	sl, r2
    60ae:	d300      	bcc.n	60b2 <__aeabi_ddiv+0x48e>
    60b0:	e733      	b.n	5f1a <__aeabi_ddiv+0x2f6>
    60b2:	9e03      	ldr	r6, [sp, #12]
    60b4:	4659      	mov	r1, fp
    60b6:	46b4      	mov	ip, r6
    60b8:	44e2      	add	sl, ip
    60ba:	45b2      	cmp	sl, r6
    60bc:	41ad      	sbcs	r5, r5
    60be:	426d      	negs	r5, r5
    60c0:	4445      	add	r5, r8
    60c2:	18eb      	adds	r3, r5, r3
    60c4:	3901      	subs	r1, #1
    60c6:	4598      	cmp	r8, r3
    60c8:	d207      	bcs.n	60da <__aeabi_ddiv+0x4b6>
    60ca:	4298      	cmp	r0, r3
    60cc:	d900      	bls.n	60d0 <__aeabi_ddiv+0x4ac>
    60ce:	e07f      	b.n	61d0 <__aeabi_ddiv+0x5ac>
    60d0:	d100      	bne.n	60d4 <__aeabi_ddiv+0x4b0>
    60d2:	e0bc      	b.n	624e <__aeabi_ddiv+0x62a>
    60d4:	1a1d      	subs	r5, r3, r0
    60d6:	468b      	mov	fp, r1
    60d8:	e71f      	b.n	5f1a <__aeabi_ddiv+0x2f6>
    60da:	4598      	cmp	r8, r3
    60dc:	d1fa      	bne.n	60d4 <__aeabi_ddiv+0x4b0>
    60de:	9d03      	ldr	r5, [sp, #12]
    60e0:	4555      	cmp	r5, sl
    60e2:	d9f2      	bls.n	60ca <__aeabi_ddiv+0x4a6>
    60e4:	4643      	mov	r3, r8
    60e6:	468b      	mov	fp, r1
    60e8:	1a1d      	subs	r5, r3, r0
    60ea:	e716      	b.n	5f1a <__aeabi_ddiv+0x2f6>
    60ec:	469b      	mov	fp, r3
    60ee:	e6ca      	b.n	5e86 <__aeabi_ddiv+0x262>
    60f0:	0015      	movs	r5, r2
    60f2:	e6e7      	b.n	5ec4 <__aeabi_ddiv+0x2a0>
    60f4:	465a      	mov	r2, fp
    60f6:	08c9      	lsrs	r1, r1, #3
    60f8:	0752      	lsls	r2, r2, #29
    60fa:	430a      	orrs	r2, r1
    60fc:	055b      	lsls	r3, r3, #21
    60fe:	4690      	mov	r8, r2
    6100:	0d5c      	lsrs	r4, r3, #21
    6102:	465a      	mov	r2, fp
    6104:	2301      	movs	r3, #1
    6106:	9902      	ldr	r1, [sp, #8]
    6108:	0252      	lsls	r2, r2, #9
    610a:	4019      	ands	r1, r3
    610c:	0b12      	lsrs	r2, r2, #12
    610e:	468c      	mov	ip, r1
    6110:	e656      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    6112:	2b00      	cmp	r3, #0
    6114:	d100      	bne.n	6118 <__aeabi_ddiv+0x4f4>
    6116:	e76f      	b.n	5ff8 <__aeabi_ddiv+0x3d4>
    6118:	4446      	add	r6, r8
    611a:	1e4a      	subs	r2, r1, #1
    611c:	45b0      	cmp	r8, r6
    611e:	d929      	bls.n	6174 <__aeabi_ddiv+0x550>
    6120:	0011      	movs	r1, r2
    6122:	4286      	cmp	r6, r0
    6124:	d000      	beq.n	6128 <__aeabi_ddiv+0x504>
    6126:	e765      	b.n	5ff4 <__aeabi_ddiv+0x3d0>
    6128:	9a03      	ldr	r2, [sp, #12]
    612a:	4293      	cmp	r3, r2
    612c:	d000      	beq.n	6130 <__aeabi_ddiv+0x50c>
    612e:	e761      	b.n	5ff4 <__aeabi_ddiv+0x3d0>
    6130:	e762      	b.n	5ff8 <__aeabi_ddiv+0x3d4>
    6132:	2101      	movs	r1, #1
    6134:	4249      	negs	r1, r1
    6136:	2001      	movs	r0, #1
    6138:	1ac2      	subs	r2, r0, r3
    613a:	2a38      	cmp	r2, #56	; 0x38
    613c:	dd21      	ble.n	6182 <__aeabi_ddiv+0x55e>
    613e:	9b02      	ldr	r3, [sp, #8]
    6140:	4003      	ands	r3, r0
    6142:	469c      	mov	ip, r3
    6144:	e638      	b.n	5db8 <__aeabi_ddiv+0x194>
    6146:	220f      	movs	r2, #15
    6148:	400a      	ands	r2, r1
    614a:	2a04      	cmp	r2, #4
    614c:	d100      	bne.n	6150 <__aeabi_ddiv+0x52c>
    614e:	e75b      	b.n	6008 <__aeabi_ddiv+0x3e4>
    6150:	000a      	movs	r2, r1
    6152:	1d11      	adds	r1, r2, #4
    6154:	4291      	cmp	r1, r2
    6156:	4192      	sbcs	r2, r2
    6158:	4252      	negs	r2, r2
    615a:	4493      	add	fp, r2
    615c:	e754      	b.n	6008 <__aeabi_ddiv+0x3e4>
    615e:	4b47      	ldr	r3, [pc, #284]	; (627c <__aeabi_ddiv+0x658>)
    6160:	18e3      	adds	r3, r4, r3
    6162:	2b00      	cmp	r3, #0
    6164:	dde5      	ble.n	6132 <__aeabi_ddiv+0x50e>
    6166:	2201      	movs	r2, #1
    6168:	4252      	negs	r2, r2
    616a:	e7f2      	b.n	6152 <__aeabi_ddiv+0x52e>
    616c:	001d      	movs	r5, r3
    616e:	e6fa      	b.n	5f66 <__aeabi_ddiv+0x342>
    6170:	469a      	mov	sl, r3
    6172:	e71c      	b.n	5fae <__aeabi_ddiv+0x38a>
    6174:	42b0      	cmp	r0, r6
    6176:	d839      	bhi.n	61ec <__aeabi_ddiv+0x5c8>
    6178:	d06e      	beq.n	6258 <__aeabi_ddiv+0x634>
    617a:	0011      	movs	r1, r2
    617c:	e73a      	b.n	5ff4 <__aeabi_ddiv+0x3d0>
    617e:	9302      	str	r3, [sp, #8]
    6180:	e73a      	b.n	5ff8 <__aeabi_ddiv+0x3d4>
    6182:	2a1f      	cmp	r2, #31
    6184:	dc3c      	bgt.n	6200 <__aeabi_ddiv+0x5dc>
    6186:	2320      	movs	r3, #32
    6188:	1a9b      	subs	r3, r3, r2
    618a:	000c      	movs	r4, r1
    618c:	4658      	mov	r0, fp
    618e:	4099      	lsls	r1, r3
    6190:	4098      	lsls	r0, r3
    6192:	1e4b      	subs	r3, r1, #1
    6194:	4199      	sbcs	r1, r3
    6196:	465b      	mov	r3, fp
    6198:	40d4      	lsrs	r4, r2
    619a:	40d3      	lsrs	r3, r2
    619c:	4320      	orrs	r0, r4
    619e:	4308      	orrs	r0, r1
    61a0:	001a      	movs	r2, r3
    61a2:	0743      	lsls	r3, r0, #29
    61a4:	d009      	beq.n	61ba <__aeabi_ddiv+0x596>
    61a6:	230f      	movs	r3, #15
    61a8:	4003      	ands	r3, r0
    61aa:	2b04      	cmp	r3, #4
    61ac:	d005      	beq.n	61ba <__aeabi_ddiv+0x596>
    61ae:	0001      	movs	r1, r0
    61b0:	1d08      	adds	r0, r1, #4
    61b2:	4288      	cmp	r0, r1
    61b4:	419b      	sbcs	r3, r3
    61b6:	425b      	negs	r3, r3
    61b8:	18d2      	adds	r2, r2, r3
    61ba:	0213      	lsls	r3, r2, #8
    61bc:	d53a      	bpl.n	6234 <__aeabi_ddiv+0x610>
    61be:	2301      	movs	r3, #1
    61c0:	9a02      	ldr	r2, [sp, #8]
    61c2:	2401      	movs	r4, #1
    61c4:	401a      	ands	r2, r3
    61c6:	2300      	movs	r3, #0
    61c8:	4694      	mov	ip, r2
    61ca:	4698      	mov	r8, r3
    61cc:	2200      	movs	r2, #0
    61ce:	e5f7      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    61d0:	2102      	movs	r1, #2
    61d2:	4249      	negs	r1, r1
    61d4:	468c      	mov	ip, r1
    61d6:	9d03      	ldr	r5, [sp, #12]
    61d8:	44e3      	add	fp, ip
    61da:	46ac      	mov	ip, r5
    61dc:	44e2      	add	sl, ip
    61de:	45aa      	cmp	sl, r5
    61e0:	41ad      	sbcs	r5, r5
    61e2:	426d      	negs	r5, r5
    61e4:	4445      	add	r5, r8
    61e6:	18ed      	adds	r5, r5, r3
    61e8:	1a2d      	subs	r5, r5, r0
    61ea:	e696      	b.n	5f1a <__aeabi_ddiv+0x2f6>
    61ec:	1e8a      	subs	r2, r1, #2
    61ee:	9903      	ldr	r1, [sp, #12]
    61f0:	004d      	lsls	r5, r1, #1
    61f2:	428d      	cmp	r5, r1
    61f4:	4189      	sbcs	r1, r1
    61f6:	4249      	negs	r1, r1
    61f8:	4441      	add	r1, r8
    61fa:	1876      	adds	r6, r6, r1
    61fc:	9503      	str	r5, [sp, #12]
    61fe:	e78f      	b.n	6120 <__aeabi_ddiv+0x4fc>
    6200:	201f      	movs	r0, #31
    6202:	4240      	negs	r0, r0
    6204:	1ac3      	subs	r3, r0, r3
    6206:	4658      	mov	r0, fp
    6208:	40d8      	lsrs	r0, r3
    620a:	0003      	movs	r3, r0
    620c:	2a20      	cmp	r2, #32
    620e:	d028      	beq.n	6262 <__aeabi_ddiv+0x63e>
    6210:	2040      	movs	r0, #64	; 0x40
    6212:	465d      	mov	r5, fp
    6214:	1a82      	subs	r2, r0, r2
    6216:	4095      	lsls	r5, r2
    6218:	4329      	orrs	r1, r5
    621a:	1e4a      	subs	r2, r1, #1
    621c:	4191      	sbcs	r1, r2
    621e:	4319      	orrs	r1, r3
    6220:	2307      	movs	r3, #7
    6222:	2200      	movs	r2, #0
    6224:	400b      	ands	r3, r1
    6226:	d009      	beq.n	623c <__aeabi_ddiv+0x618>
    6228:	230f      	movs	r3, #15
    622a:	2200      	movs	r2, #0
    622c:	400b      	ands	r3, r1
    622e:	0008      	movs	r0, r1
    6230:	2b04      	cmp	r3, #4
    6232:	d1bd      	bne.n	61b0 <__aeabi_ddiv+0x58c>
    6234:	0001      	movs	r1, r0
    6236:	0753      	lsls	r3, r2, #29
    6238:	0252      	lsls	r2, r2, #9
    623a:	0b12      	lsrs	r2, r2, #12
    623c:	08c9      	lsrs	r1, r1, #3
    623e:	4319      	orrs	r1, r3
    6240:	2301      	movs	r3, #1
    6242:	4688      	mov	r8, r1
    6244:	9902      	ldr	r1, [sp, #8]
    6246:	2400      	movs	r4, #0
    6248:	4019      	ands	r1, r3
    624a:	468c      	mov	ip, r1
    624c:	e5b8      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    624e:	4552      	cmp	r2, sl
    6250:	d8be      	bhi.n	61d0 <__aeabi_ddiv+0x5ac>
    6252:	468b      	mov	fp, r1
    6254:	2500      	movs	r5, #0
    6256:	e660      	b.n	5f1a <__aeabi_ddiv+0x2f6>
    6258:	9d03      	ldr	r5, [sp, #12]
    625a:	429d      	cmp	r5, r3
    625c:	d3c6      	bcc.n	61ec <__aeabi_ddiv+0x5c8>
    625e:	0011      	movs	r1, r2
    6260:	e762      	b.n	6128 <__aeabi_ddiv+0x504>
    6262:	2500      	movs	r5, #0
    6264:	e7d8      	b.n	6218 <__aeabi_ddiv+0x5f4>
    6266:	2280      	movs	r2, #128	; 0x80
    6268:	465b      	mov	r3, fp
    626a:	0312      	lsls	r2, r2, #12
    626c:	431a      	orrs	r2, r3
    626e:	9b01      	ldr	r3, [sp, #4]
    6270:	0312      	lsls	r2, r2, #12
    6272:	0b12      	lsrs	r2, r2, #12
    6274:	469c      	mov	ip, r3
    6276:	4688      	mov	r8, r1
    6278:	4c03      	ldr	r4, [pc, #12]	; (6288 <__aeabi_ddiv+0x664>)
    627a:	e5a1      	b.n	5dc0 <__aeabi_ddiv+0x19c>
    627c:	000003ff 	.word	0x000003ff
    6280:	feffffff 	.word	0xfeffffff
    6284:	000007fe 	.word	0x000007fe
    6288:	000007ff 	.word	0x000007ff

0000628c <__aeabi_dmul>:
    628c:	b5f0      	push	{r4, r5, r6, r7, lr}
    628e:	4657      	mov	r7, sl
    6290:	4645      	mov	r5, r8
    6292:	46de      	mov	lr, fp
    6294:	464e      	mov	r6, r9
    6296:	b5e0      	push	{r5, r6, r7, lr}
    6298:	030c      	lsls	r4, r1, #12
    629a:	4698      	mov	r8, r3
    629c:	004e      	lsls	r6, r1, #1
    629e:	0b23      	lsrs	r3, r4, #12
    62a0:	b087      	sub	sp, #28
    62a2:	0007      	movs	r7, r0
    62a4:	4692      	mov	sl, r2
    62a6:	469b      	mov	fp, r3
    62a8:	0d76      	lsrs	r6, r6, #21
    62aa:	0fcd      	lsrs	r5, r1, #31
    62ac:	2e00      	cmp	r6, #0
    62ae:	d06b      	beq.n	6388 <__aeabi_dmul+0xfc>
    62b0:	4b6d      	ldr	r3, [pc, #436]	; (6468 <__aeabi_dmul+0x1dc>)
    62b2:	429e      	cmp	r6, r3
    62b4:	d035      	beq.n	6322 <__aeabi_dmul+0x96>
    62b6:	2480      	movs	r4, #128	; 0x80
    62b8:	465b      	mov	r3, fp
    62ba:	0f42      	lsrs	r2, r0, #29
    62bc:	0424      	lsls	r4, r4, #16
    62be:	00db      	lsls	r3, r3, #3
    62c0:	4314      	orrs	r4, r2
    62c2:	431c      	orrs	r4, r3
    62c4:	00c3      	lsls	r3, r0, #3
    62c6:	4699      	mov	r9, r3
    62c8:	4b68      	ldr	r3, [pc, #416]	; (646c <__aeabi_dmul+0x1e0>)
    62ca:	46a3      	mov	fp, r4
    62cc:	469c      	mov	ip, r3
    62ce:	2300      	movs	r3, #0
    62d0:	2700      	movs	r7, #0
    62d2:	4466      	add	r6, ip
    62d4:	9302      	str	r3, [sp, #8]
    62d6:	4643      	mov	r3, r8
    62d8:	031c      	lsls	r4, r3, #12
    62da:	005a      	lsls	r2, r3, #1
    62dc:	0fdb      	lsrs	r3, r3, #31
    62de:	4650      	mov	r0, sl
    62e0:	0b24      	lsrs	r4, r4, #12
    62e2:	0d52      	lsrs	r2, r2, #21
    62e4:	4698      	mov	r8, r3
    62e6:	d100      	bne.n	62ea <__aeabi_dmul+0x5e>
    62e8:	e076      	b.n	63d8 <__aeabi_dmul+0x14c>
    62ea:	4b5f      	ldr	r3, [pc, #380]	; (6468 <__aeabi_dmul+0x1dc>)
    62ec:	429a      	cmp	r2, r3
    62ee:	d06d      	beq.n	63cc <__aeabi_dmul+0x140>
    62f0:	2380      	movs	r3, #128	; 0x80
    62f2:	0f41      	lsrs	r1, r0, #29
    62f4:	041b      	lsls	r3, r3, #16
    62f6:	430b      	orrs	r3, r1
    62f8:	495c      	ldr	r1, [pc, #368]	; (646c <__aeabi_dmul+0x1e0>)
    62fa:	00e4      	lsls	r4, r4, #3
    62fc:	468c      	mov	ip, r1
    62fe:	431c      	orrs	r4, r3
    6300:	00c3      	lsls	r3, r0, #3
    6302:	2000      	movs	r0, #0
    6304:	4462      	add	r2, ip
    6306:	4641      	mov	r1, r8
    6308:	18b6      	adds	r6, r6, r2
    630a:	4069      	eors	r1, r5
    630c:	1c72      	adds	r2, r6, #1
    630e:	9101      	str	r1, [sp, #4]
    6310:	4694      	mov	ip, r2
    6312:	4307      	orrs	r7, r0
    6314:	2f0f      	cmp	r7, #15
    6316:	d900      	bls.n	631a <__aeabi_dmul+0x8e>
    6318:	e0b0      	b.n	647c <__aeabi_dmul+0x1f0>
    631a:	4a55      	ldr	r2, [pc, #340]	; (6470 <__aeabi_dmul+0x1e4>)
    631c:	00bf      	lsls	r7, r7, #2
    631e:	59d2      	ldr	r2, [r2, r7]
    6320:	4697      	mov	pc, r2
    6322:	465b      	mov	r3, fp
    6324:	4303      	orrs	r3, r0
    6326:	4699      	mov	r9, r3
    6328:	d000      	beq.n	632c <__aeabi_dmul+0xa0>
    632a:	e087      	b.n	643c <__aeabi_dmul+0x1b0>
    632c:	2300      	movs	r3, #0
    632e:	469b      	mov	fp, r3
    6330:	3302      	adds	r3, #2
    6332:	2708      	movs	r7, #8
    6334:	9302      	str	r3, [sp, #8]
    6336:	e7ce      	b.n	62d6 <__aeabi_dmul+0x4a>
    6338:	4642      	mov	r2, r8
    633a:	9201      	str	r2, [sp, #4]
    633c:	2802      	cmp	r0, #2
    633e:	d067      	beq.n	6410 <__aeabi_dmul+0x184>
    6340:	2803      	cmp	r0, #3
    6342:	d100      	bne.n	6346 <__aeabi_dmul+0xba>
    6344:	e20e      	b.n	6764 <__aeabi_dmul+0x4d8>
    6346:	2801      	cmp	r0, #1
    6348:	d000      	beq.n	634c <__aeabi_dmul+0xc0>
    634a:	e162      	b.n	6612 <__aeabi_dmul+0x386>
    634c:	2300      	movs	r3, #0
    634e:	2400      	movs	r4, #0
    6350:	2200      	movs	r2, #0
    6352:	4699      	mov	r9, r3
    6354:	9901      	ldr	r1, [sp, #4]
    6356:	4001      	ands	r1, r0
    6358:	b2cd      	uxtb	r5, r1
    635a:	2100      	movs	r1, #0
    635c:	0312      	lsls	r2, r2, #12
    635e:	0d0b      	lsrs	r3, r1, #20
    6360:	0b12      	lsrs	r2, r2, #12
    6362:	051b      	lsls	r3, r3, #20
    6364:	4313      	orrs	r3, r2
    6366:	4a43      	ldr	r2, [pc, #268]	; (6474 <__aeabi_dmul+0x1e8>)
    6368:	0524      	lsls	r4, r4, #20
    636a:	4013      	ands	r3, r2
    636c:	431c      	orrs	r4, r3
    636e:	0064      	lsls	r4, r4, #1
    6370:	07ed      	lsls	r5, r5, #31
    6372:	0864      	lsrs	r4, r4, #1
    6374:	432c      	orrs	r4, r5
    6376:	4648      	mov	r0, r9
    6378:	0021      	movs	r1, r4
    637a:	b007      	add	sp, #28
    637c:	bc3c      	pop	{r2, r3, r4, r5}
    637e:	4690      	mov	r8, r2
    6380:	4699      	mov	r9, r3
    6382:	46a2      	mov	sl, r4
    6384:	46ab      	mov	fp, r5
    6386:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6388:	4303      	orrs	r3, r0
    638a:	4699      	mov	r9, r3
    638c:	d04f      	beq.n	642e <__aeabi_dmul+0x1a2>
    638e:	465b      	mov	r3, fp
    6390:	2b00      	cmp	r3, #0
    6392:	d100      	bne.n	6396 <__aeabi_dmul+0x10a>
    6394:	e189      	b.n	66aa <__aeabi_dmul+0x41e>
    6396:	4658      	mov	r0, fp
    6398:	f000 fed6 	bl	7148 <__clzsi2>
    639c:	0003      	movs	r3, r0
    639e:	3b0b      	subs	r3, #11
    63a0:	2b1c      	cmp	r3, #28
    63a2:	dd00      	ble.n	63a6 <__aeabi_dmul+0x11a>
    63a4:	e17a      	b.n	669c <__aeabi_dmul+0x410>
    63a6:	221d      	movs	r2, #29
    63a8:	1ad3      	subs	r3, r2, r3
    63aa:	003a      	movs	r2, r7
    63ac:	0001      	movs	r1, r0
    63ae:	465c      	mov	r4, fp
    63b0:	40da      	lsrs	r2, r3
    63b2:	3908      	subs	r1, #8
    63b4:	408c      	lsls	r4, r1
    63b6:	0013      	movs	r3, r2
    63b8:	408f      	lsls	r7, r1
    63ba:	4323      	orrs	r3, r4
    63bc:	469b      	mov	fp, r3
    63be:	46b9      	mov	r9, r7
    63c0:	2300      	movs	r3, #0
    63c2:	4e2d      	ldr	r6, [pc, #180]	; (6478 <__aeabi_dmul+0x1ec>)
    63c4:	2700      	movs	r7, #0
    63c6:	1a36      	subs	r6, r6, r0
    63c8:	9302      	str	r3, [sp, #8]
    63ca:	e784      	b.n	62d6 <__aeabi_dmul+0x4a>
    63cc:	4653      	mov	r3, sl
    63ce:	4323      	orrs	r3, r4
    63d0:	d12a      	bne.n	6428 <__aeabi_dmul+0x19c>
    63d2:	2400      	movs	r4, #0
    63d4:	2002      	movs	r0, #2
    63d6:	e796      	b.n	6306 <__aeabi_dmul+0x7a>
    63d8:	4653      	mov	r3, sl
    63da:	4323      	orrs	r3, r4
    63dc:	d020      	beq.n	6420 <__aeabi_dmul+0x194>
    63de:	2c00      	cmp	r4, #0
    63e0:	d100      	bne.n	63e4 <__aeabi_dmul+0x158>
    63e2:	e157      	b.n	6694 <__aeabi_dmul+0x408>
    63e4:	0020      	movs	r0, r4
    63e6:	f000 feaf 	bl	7148 <__clzsi2>
    63ea:	0003      	movs	r3, r0
    63ec:	3b0b      	subs	r3, #11
    63ee:	2b1c      	cmp	r3, #28
    63f0:	dd00      	ble.n	63f4 <__aeabi_dmul+0x168>
    63f2:	e149      	b.n	6688 <__aeabi_dmul+0x3fc>
    63f4:	211d      	movs	r1, #29
    63f6:	1acb      	subs	r3, r1, r3
    63f8:	4651      	mov	r1, sl
    63fa:	0002      	movs	r2, r0
    63fc:	40d9      	lsrs	r1, r3
    63fe:	4653      	mov	r3, sl
    6400:	3a08      	subs	r2, #8
    6402:	4094      	lsls	r4, r2
    6404:	4093      	lsls	r3, r2
    6406:	430c      	orrs	r4, r1
    6408:	4a1b      	ldr	r2, [pc, #108]	; (6478 <__aeabi_dmul+0x1ec>)
    640a:	1a12      	subs	r2, r2, r0
    640c:	2000      	movs	r0, #0
    640e:	e77a      	b.n	6306 <__aeabi_dmul+0x7a>
    6410:	2501      	movs	r5, #1
    6412:	9b01      	ldr	r3, [sp, #4]
    6414:	4c14      	ldr	r4, [pc, #80]	; (6468 <__aeabi_dmul+0x1dc>)
    6416:	401d      	ands	r5, r3
    6418:	2300      	movs	r3, #0
    641a:	2200      	movs	r2, #0
    641c:	4699      	mov	r9, r3
    641e:	e79c      	b.n	635a <__aeabi_dmul+0xce>
    6420:	2400      	movs	r4, #0
    6422:	2200      	movs	r2, #0
    6424:	2001      	movs	r0, #1
    6426:	e76e      	b.n	6306 <__aeabi_dmul+0x7a>
    6428:	4653      	mov	r3, sl
    642a:	2003      	movs	r0, #3
    642c:	e76b      	b.n	6306 <__aeabi_dmul+0x7a>
    642e:	2300      	movs	r3, #0
    6430:	469b      	mov	fp, r3
    6432:	3301      	adds	r3, #1
    6434:	2704      	movs	r7, #4
    6436:	2600      	movs	r6, #0
    6438:	9302      	str	r3, [sp, #8]
    643a:	e74c      	b.n	62d6 <__aeabi_dmul+0x4a>
    643c:	2303      	movs	r3, #3
    643e:	4681      	mov	r9, r0
    6440:	270c      	movs	r7, #12
    6442:	9302      	str	r3, [sp, #8]
    6444:	e747      	b.n	62d6 <__aeabi_dmul+0x4a>
    6446:	2280      	movs	r2, #128	; 0x80
    6448:	2300      	movs	r3, #0
    644a:	2500      	movs	r5, #0
    644c:	0312      	lsls	r2, r2, #12
    644e:	4699      	mov	r9, r3
    6450:	4c05      	ldr	r4, [pc, #20]	; (6468 <__aeabi_dmul+0x1dc>)
    6452:	e782      	b.n	635a <__aeabi_dmul+0xce>
    6454:	465c      	mov	r4, fp
    6456:	464b      	mov	r3, r9
    6458:	9802      	ldr	r0, [sp, #8]
    645a:	e76f      	b.n	633c <__aeabi_dmul+0xb0>
    645c:	465c      	mov	r4, fp
    645e:	464b      	mov	r3, r9
    6460:	9501      	str	r5, [sp, #4]
    6462:	9802      	ldr	r0, [sp, #8]
    6464:	e76a      	b.n	633c <__aeabi_dmul+0xb0>
    6466:	46c0      	nop			; (mov r8, r8)
    6468:	000007ff 	.word	0x000007ff
    646c:	fffffc01 	.word	0xfffffc01
    6470:	00011a08 	.word	0x00011a08
    6474:	800fffff 	.word	0x800fffff
    6478:	fffffc0d 	.word	0xfffffc0d
    647c:	464a      	mov	r2, r9
    647e:	4649      	mov	r1, r9
    6480:	0c17      	lsrs	r7, r2, #16
    6482:	0c1a      	lsrs	r2, r3, #16
    6484:	041b      	lsls	r3, r3, #16
    6486:	0c1b      	lsrs	r3, r3, #16
    6488:	0408      	lsls	r0, r1, #16
    648a:	0019      	movs	r1, r3
    648c:	0c00      	lsrs	r0, r0, #16
    648e:	4341      	muls	r1, r0
    6490:	0015      	movs	r5, r2
    6492:	4688      	mov	r8, r1
    6494:	0019      	movs	r1, r3
    6496:	437d      	muls	r5, r7
    6498:	4379      	muls	r1, r7
    649a:	9503      	str	r5, [sp, #12]
    649c:	4689      	mov	r9, r1
    649e:	0029      	movs	r1, r5
    64a0:	0015      	movs	r5, r2
    64a2:	4345      	muls	r5, r0
    64a4:	444d      	add	r5, r9
    64a6:	9502      	str	r5, [sp, #8]
    64a8:	4645      	mov	r5, r8
    64aa:	0c2d      	lsrs	r5, r5, #16
    64ac:	46aa      	mov	sl, r5
    64ae:	9d02      	ldr	r5, [sp, #8]
    64b0:	4455      	add	r5, sl
    64b2:	45a9      	cmp	r9, r5
    64b4:	d906      	bls.n	64c4 <__aeabi_dmul+0x238>
    64b6:	468a      	mov	sl, r1
    64b8:	2180      	movs	r1, #128	; 0x80
    64ba:	0249      	lsls	r1, r1, #9
    64bc:	4689      	mov	r9, r1
    64be:	44ca      	add	sl, r9
    64c0:	4651      	mov	r1, sl
    64c2:	9103      	str	r1, [sp, #12]
    64c4:	0c29      	lsrs	r1, r5, #16
    64c6:	9104      	str	r1, [sp, #16]
    64c8:	4641      	mov	r1, r8
    64ca:	0409      	lsls	r1, r1, #16
    64cc:	042d      	lsls	r5, r5, #16
    64ce:	0c09      	lsrs	r1, r1, #16
    64d0:	4688      	mov	r8, r1
    64d2:	0029      	movs	r1, r5
    64d4:	0c25      	lsrs	r5, r4, #16
    64d6:	0424      	lsls	r4, r4, #16
    64d8:	4441      	add	r1, r8
    64da:	0c24      	lsrs	r4, r4, #16
    64dc:	9105      	str	r1, [sp, #20]
    64de:	0021      	movs	r1, r4
    64e0:	4341      	muls	r1, r0
    64e2:	4688      	mov	r8, r1
    64e4:	0021      	movs	r1, r4
    64e6:	4379      	muls	r1, r7
    64e8:	468a      	mov	sl, r1
    64ea:	4368      	muls	r0, r5
    64ec:	4641      	mov	r1, r8
    64ee:	4450      	add	r0, sl
    64f0:	4681      	mov	r9, r0
    64f2:	0c08      	lsrs	r0, r1, #16
    64f4:	4448      	add	r0, r9
    64f6:	436f      	muls	r7, r5
    64f8:	4582      	cmp	sl, r0
    64fa:	d903      	bls.n	6504 <__aeabi_dmul+0x278>
    64fc:	2180      	movs	r1, #128	; 0x80
    64fe:	0249      	lsls	r1, r1, #9
    6500:	4689      	mov	r9, r1
    6502:	444f      	add	r7, r9
    6504:	0c01      	lsrs	r1, r0, #16
    6506:	4689      	mov	r9, r1
    6508:	0039      	movs	r1, r7
    650a:	4449      	add	r1, r9
    650c:	9102      	str	r1, [sp, #8]
    650e:	4641      	mov	r1, r8
    6510:	040f      	lsls	r7, r1, #16
    6512:	9904      	ldr	r1, [sp, #16]
    6514:	0c3f      	lsrs	r7, r7, #16
    6516:	4688      	mov	r8, r1
    6518:	0400      	lsls	r0, r0, #16
    651a:	19c0      	adds	r0, r0, r7
    651c:	4480      	add	r8, r0
    651e:	4641      	mov	r1, r8
    6520:	9104      	str	r1, [sp, #16]
    6522:	4659      	mov	r1, fp
    6524:	0c0f      	lsrs	r7, r1, #16
    6526:	0409      	lsls	r1, r1, #16
    6528:	0c09      	lsrs	r1, r1, #16
    652a:	4688      	mov	r8, r1
    652c:	4359      	muls	r1, r3
    652e:	468a      	mov	sl, r1
    6530:	0039      	movs	r1, r7
    6532:	4351      	muls	r1, r2
    6534:	4689      	mov	r9, r1
    6536:	4641      	mov	r1, r8
    6538:	434a      	muls	r2, r1
    653a:	4651      	mov	r1, sl
    653c:	0c09      	lsrs	r1, r1, #16
    653e:	468b      	mov	fp, r1
    6540:	437b      	muls	r3, r7
    6542:	18d2      	adds	r2, r2, r3
    6544:	445a      	add	r2, fp
    6546:	4293      	cmp	r3, r2
    6548:	d903      	bls.n	6552 <__aeabi_dmul+0x2c6>
    654a:	2380      	movs	r3, #128	; 0x80
    654c:	025b      	lsls	r3, r3, #9
    654e:	469b      	mov	fp, r3
    6550:	44d9      	add	r9, fp
    6552:	4651      	mov	r1, sl
    6554:	0409      	lsls	r1, r1, #16
    6556:	0c09      	lsrs	r1, r1, #16
    6558:	468a      	mov	sl, r1
    655a:	4641      	mov	r1, r8
    655c:	4361      	muls	r1, r4
    655e:	437c      	muls	r4, r7
    6560:	0c13      	lsrs	r3, r2, #16
    6562:	0412      	lsls	r2, r2, #16
    6564:	444b      	add	r3, r9
    6566:	4452      	add	r2, sl
    6568:	46a1      	mov	r9, r4
    656a:	468a      	mov	sl, r1
    656c:	003c      	movs	r4, r7
    656e:	4641      	mov	r1, r8
    6570:	436c      	muls	r4, r5
    6572:	434d      	muls	r5, r1
    6574:	4651      	mov	r1, sl
    6576:	444d      	add	r5, r9
    6578:	0c0f      	lsrs	r7, r1, #16
    657a:	197d      	adds	r5, r7, r5
    657c:	45a9      	cmp	r9, r5
    657e:	d903      	bls.n	6588 <__aeabi_dmul+0x2fc>
    6580:	2180      	movs	r1, #128	; 0x80
    6582:	0249      	lsls	r1, r1, #9
    6584:	4688      	mov	r8, r1
    6586:	4444      	add	r4, r8
    6588:	9f04      	ldr	r7, [sp, #16]
    658a:	9903      	ldr	r1, [sp, #12]
    658c:	46b8      	mov	r8, r7
    658e:	4441      	add	r1, r8
    6590:	468b      	mov	fp, r1
    6592:	4583      	cmp	fp, r0
    6594:	4180      	sbcs	r0, r0
    6596:	4241      	negs	r1, r0
    6598:	4688      	mov	r8, r1
    659a:	4651      	mov	r1, sl
    659c:	0408      	lsls	r0, r1, #16
    659e:	042f      	lsls	r7, r5, #16
    65a0:	0c00      	lsrs	r0, r0, #16
    65a2:	183f      	adds	r7, r7, r0
    65a4:	4658      	mov	r0, fp
    65a6:	9902      	ldr	r1, [sp, #8]
    65a8:	1810      	adds	r0, r2, r0
    65aa:	4689      	mov	r9, r1
    65ac:	4290      	cmp	r0, r2
    65ae:	4192      	sbcs	r2, r2
    65b0:	444f      	add	r7, r9
    65b2:	46ba      	mov	sl, r7
    65b4:	4252      	negs	r2, r2
    65b6:	4699      	mov	r9, r3
    65b8:	4693      	mov	fp, r2
    65ba:	44c2      	add	sl, r8
    65bc:	44d1      	add	r9, sl
    65be:	44cb      	add	fp, r9
    65c0:	428f      	cmp	r7, r1
    65c2:	41bf      	sbcs	r7, r7
    65c4:	45c2      	cmp	sl, r8
    65c6:	4189      	sbcs	r1, r1
    65c8:	4599      	cmp	r9, r3
    65ca:	419b      	sbcs	r3, r3
    65cc:	4593      	cmp	fp, r2
    65ce:	4192      	sbcs	r2, r2
    65d0:	427f      	negs	r7, r7
    65d2:	4249      	negs	r1, r1
    65d4:	0c2d      	lsrs	r5, r5, #16
    65d6:	4252      	negs	r2, r2
    65d8:	430f      	orrs	r7, r1
    65da:	425b      	negs	r3, r3
    65dc:	4313      	orrs	r3, r2
    65de:	197f      	adds	r7, r7, r5
    65e0:	18ff      	adds	r7, r7, r3
    65e2:	465b      	mov	r3, fp
    65e4:	193c      	adds	r4, r7, r4
    65e6:	0ddb      	lsrs	r3, r3, #23
    65e8:	9a05      	ldr	r2, [sp, #20]
    65ea:	0264      	lsls	r4, r4, #9
    65ec:	431c      	orrs	r4, r3
    65ee:	0243      	lsls	r3, r0, #9
    65f0:	4313      	orrs	r3, r2
    65f2:	1e5d      	subs	r5, r3, #1
    65f4:	41ab      	sbcs	r3, r5
    65f6:	465a      	mov	r2, fp
    65f8:	0dc0      	lsrs	r0, r0, #23
    65fa:	4303      	orrs	r3, r0
    65fc:	0252      	lsls	r2, r2, #9
    65fe:	4313      	orrs	r3, r2
    6600:	01e2      	lsls	r2, r4, #7
    6602:	d556      	bpl.n	66b2 <__aeabi_dmul+0x426>
    6604:	2001      	movs	r0, #1
    6606:	085a      	lsrs	r2, r3, #1
    6608:	4003      	ands	r3, r0
    660a:	4313      	orrs	r3, r2
    660c:	07e2      	lsls	r2, r4, #31
    660e:	4313      	orrs	r3, r2
    6610:	0864      	lsrs	r4, r4, #1
    6612:	485a      	ldr	r0, [pc, #360]	; (677c <__aeabi_dmul+0x4f0>)
    6614:	4460      	add	r0, ip
    6616:	2800      	cmp	r0, #0
    6618:	dd4d      	ble.n	66b6 <__aeabi_dmul+0x42a>
    661a:	075a      	lsls	r2, r3, #29
    661c:	d009      	beq.n	6632 <__aeabi_dmul+0x3a6>
    661e:	220f      	movs	r2, #15
    6620:	401a      	ands	r2, r3
    6622:	2a04      	cmp	r2, #4
    6624:	d005      	beq.n	6632 <__aeabi_dmul+0x3a6>
    6626:	1d1a      	adds	r2, r3, #4
    6628:	429a      	cmp	r2, r3
    662a:	419b      	sbcs	r3, r3
    662c:	425b      	negs	r3, r3
    662e:	18e4      	adds	r4, r4, r3
    6630:	0013      	movs	r3, r2
    6632:	01e2      	lsls	r2, r4, #7
    6634:	d504      	bpl.n	6640 <__aeabi_dmul+0x3b4>
    6636:	2080      	movs	r0, #128	; 0x80
    6638:	4a51      	ldr	r2, [pc, #324]	; (6780 <__aeabi_dmul+0x4f4>)
    663a:	00c0      	lsls	r0, r0, #3
    663c:	4014      	ands	r4, r2
    663e:	4460      	add	r0, ip
    6640:	4a50      	ldr	r2, [pc, #320]	; (6784 <__aeabi_dmul+0x4f8>)
    6642:	4290      	cmp	r0, r2
    6644:	dd00      	ble.n	6648 <__aeabi_dmul+0x3bc>
    6646:	e6e3      	b.n	6410 <__aeabi_dmul+0x184>
    6648:	2501      	movs	r5, #1
    664a:	08db      	lsrs	r3, r3, #3
    664c:	0762      	lsls	r2, r4, #29
    664e:	431a      	orrs	r2, r3
    6650:	0264      	lsls	r4, r4, #9
    6652:	9b01      	ldr	r3, [sp, #4]
    6654:	4691      	mov	r9, r2
    6656:	0b22      	lsrs	r2, r4, #12
    6658:	0544      	lsls	r4, r0, #21
    665a:	0d64      	lsrs	r4, r4, #21
    665c:	401d      	ands	r5, r3
    665e:	e67c      	b.n	635a <__aeabi_dmul+0xce>
    6660:	2280      	movs	r2, #128	; 0x80
    6662:	4659      	mov	r1, fp
    6664:	0312      	lsls	r2, r2, #12
    6666:	4211      	tst	r1, r2
    6668:	d008      	beq.n	667c <__aeabi_dmul+0x3f0>
    666a:	4214      	tst	r4, r2
    666c:	d106      	bne.n	667c <__aeabi_dmul+0x3f0>
    666e:	4322      	orrs	r2, r4
    6670:	0312      	lsls	r2, r2, #12
    6672:	0b12      	lsrs	r2, r2, #12
    6674:	4645      	mov	r5, r8
    6676:	4699      	mov	r9, r3
    6678:	4c43      	ldr	r4, [pc, #268]	; (6788 <__aeabi_dmul+0x4fc>)
    667a:	e66e      	b.n	635a <__aeabi_dmul+0xce>
    667c:	465b      	mov	r3, fp
    667e:	431a      	orrs	r2, r3
    6680:	0312      	lsls	r2, r2, #12
    6682:	0b12      	lsrs	r2, r2, #12
    6684:	4c40      	ldr	r4, [pc, #256]	; (6788 <__aeabi_dmul+0x4fc>)
    6686:	e668      	b.n	635a <__aeabi_dmul+0xce>
    6688:	0003      	movs	r3, r0
    668a:	4654      	mov	r4, sl
    668c:	3b28      	subs	r3, #40	; 0x28
    668e:	409c      	lsls	r4, r3
    6690:	2300      	movs	r3, #0
    6692:	e6b9      	b.n	6408 <__aeabi_dmul+0x17c>
    6694:	f000 fd58 	bl	7148 <__clzsi2>
    6698:	3020      	adds	r0, #32
    669a:	e6a6      	b.n	63ea <__aeabi_dmul+0x15e>
    669c:	0003      	movs	r3, r0
    669e:	3b28      	subs	r3, #40	; 0x28
    66a0:	409f      	lsls	r7, r3
    66a2:	2300      	movs	r3, #0
    66a4:	46bb      	mov	fp, r7
    66a6:	4699      	mov	r9, r3
    66a8:	e68a      	b.n	63c0 <__aeabi_dmul+0x134>
    66aa:	f000 fd4d 	bl	7148 <__clzsi2>
    66ae:	3020      	adds	r0, #32
    66b0:	e674      	b.n	639c <__aeabi_dmul+0x110>
    66b2:	46b4      	mov	ip, r6
    66b4:	e7ad      	b.n	6612 <__aeabi_dmul+0x386>
    66b6:	2501      	movs	r5, #1
    66b8:	1a2a      	subs	r2, r5, r0
    66ba:	2a38      	cmp	r2, #56	; 0x38
    66bc:	dd06      	ble.n	66cc <__aeabi_dmul+0x440>
    66be:	9b01      	ldr	r3, [sp, #4]
    66c0:	2400      	movs	r4, #0
    66c2:	401d      	ands	r5, r3
    66c4:	2300      	movs	r3, #0
    66c6:	2200      	movs	r2, #0
    66c8:	4699      	mov	r9, r3
    66ca:	e646      	b.n	635a <__aeabi_dmul+0xce>
    66cc:	2a1f      	cmp	r2, #31
    66ce:	dc21      	bgt.n	6714 <__aeabi_dmul+0x488>
    66d0:	2520      	movs	r5, #32
    66d2:	0020      	movs	r0, r4
    66d4:	1aad      	subs	r5, r5, r2
    66d6:	001e      	movs	r6, r3
    66d8:	40ab      	lsls	r3, r5
    66da:	40a8      	lsls	r0, r5
    66dc:	40d6      	lsrs	r6, r2
    66de:	1e5d      	subs	r5, r3, #1
    66e0:	41ab      	sbcs	r3, r5
    66e2:	4330      	orrs	r0, r6
    66e4:	4318      	orrs	r0, r3
    66e6:	40d4      	lsrs	r4, r2
    66e8:	0743      	lsls	r3, r0, #29
    66ea:	d009      	beq.n	6700 <__aeabi_dmul+0x474>
    66ec:	230f      	movs	r3, #15
    66ee:	4003      	ands	r3, r0
    66f0:	2b04      	cmp	r3, #4
    66f2:	d005      	beq.n	6700 <__aeabi_dmul+0x474>
    66f4:	0003      	movs	r3, r0
    66f6:	1d18      	adds	r0, r3, #4
    66f8:	4298      	cmp	r0, r3
    66fa:	419b      	sbcs	r3, r3
    66fc:	425b      	negs	r3, r3
    66fe:	18e4      	adds	r4, r4, r3
    6700:	0223      	lsls	r3, r4, #8
    6702:	d521      	bpl.n	6748 <__aeabi_dmul+0x4bc>
    6704:	2501      	movs	r5, #1
    6706:	9b01      	ldr	r3, [sp, #4]
    6708:	2401      	movs	r4, #1
    670a:	401d      	ands	r5, r3
    670c:	2300      	movs	r3, #0
    670e:	2200      	movs	r2, #0
    6710:	4699      	mov	r9, r3
    6712:	e622      	b.n	635a <__aeabi_dmul+0xce>
    6714:	251f      	movs	r5, #31
    6716:	0021      	movs	r1, r4
    6718:	426d      	negs	r5, r5
    671a:	1a28      	subs	r0, r5, r0
    671c:	40c1      	lsrs	r1, r0
    671e:	0008      	movs	r0, r1
    6720:	2a20      	cmp	r2, #32
    6722:	d01d      	beq.n	6760 <__aeabi_dmul+0x4d4>
    6724:	355f      	adds	r5, #95	; 0x5f
    6726:	1aaa      	subs	r2, r5, r2
    6728:	4094      	lsls	r4, r2
    672a:	4323      	orrs	r3, r4
    672c:	1e5c      	subs	r4, r3, #1
    672e:	41a3      	sbcs	r3, r4
    6730:	2507      	movs	r5, #7
    6732:	4303      	orrs	r3, r0
    6734:	401d      	ands	r5, r3
    6736:	2200      	movs	r2, #0
    6738:	2d00      	cmp	r5, #0
    673a:	d009      	beq.n	6750 <__aeabi_dmul+0x4c4>
    673c:	220f      	movs	r2, #15
    673e:	2400      	movs	r4, #0
    6740:	401a      	ands	r2, r3
    6742:	0018      	movs	r0, r3
    6744:	2a04      	cmp	r2, #4
    6746:	d1d6      	bne.n	66f6 <__aeabi_dmul+0x46a>
    6748:	0003      	movs	r3, r0
    674a:	0765      	lsls	r5, r4, #29
    674c:	0264      	lsls	r4, r4, #9
    674e:	0b22      	lsrs	r2, r4, #12
    6750:	08db      	lsrs	r3, r3, #3
    6752:	432b      	orrs	r3, r5
    6754:	2501      	movs	r5, #1
    6756:	4699      	mov	r9, r3
    6758:	9b01      	ldr	r3, [sp, #4]
    675a:	2400      	movs	r4, #0
    675c:	401d      	ands	r5, r3
    675e:	e5fc      	b.n	635a <__aeabi_dmul+0xce>
    6760:	2400      	movs	r4, #0
    6762:	e7e2      	b.n	672a <__aeabi_dmul+0x49e>
    6764:	2280      	movs	r2, #128	; 0x80
    6766:	2501      	movs	r5, #1
    6768:	0312      	lsls	r2, r2, #12
    676a:	4322      	orrs	r2, r4
    676c:	9901      	ldr	r1, [sp, #4]
    676e:	0312      	lsls	r2, r2, #12
    6770:	0b12      	lsrs	r2, r2, #12
    6772:	400d      	ands	r5, r1
    6774:	4699      	mov	r9, r3
    6776:	4c04      	ldr	r4, [pc, #16]	; (6788 <__aeabi_dmul+0x4fc>)
    6778:	e5ef      	b.n	635a <__aeabi_dmul+0xce>
    677a:	46c0      	nop			; (mov r8, r8)
    677c:	000003ff 	.word	0x000003ff
    6780:	feffffff 	.word	0xfeffffff
    6784:	000007fe 	.word	0x000007fe
    6788:	000007ff 	.word	0x000007ff

0000678c <__aeabi_dsub>:
    678c:	b5f0      	push	{r4, r5, r6, r7, lr}
    678e:	4646      	mov	r6, r8
    6790:	46d6      	mov	lr, sl
    6792:	464f      	mov	r7, r9
    6794:	030c      	lsls	r4, r1, #12
    6796:	b5c0      	push	{r6, r7, lr}
    6798:	0fcd      	lsrs	r5, r1, #31
    679a:	004e      	lsls	r6, r1, #1
    679c:	0a61      	lsrs	r1, r4, #9
    679e:	0f44      	lsrs	r4, r0, #29
    67a0:	430c      	orrs	r4, r1
    67a2:	00c1      	lsls	r1, r0, #3
    67a4:	0058      	lsls	r0, r3, #1
    67a6:	0d40      	lsrs	r0, r0, #21
    67a8:	4684      	mov	ip, r0
    67aa:	468a      	mov	sl, r1
    67ac:	000f      	movs	r7, r1
    67ae:	0319      	lsls	r1, r3, #12
    67b0:	0f50      	lsrs	r0, r2, #29
    67b2:	0a49      	lsrs	r1, r1, #9
    67b4:	4301      	orrs	r1, r0
    67b6:	48c6      	ldr	r0, [pc, #792]	; (6ad0 <__aeabi_dsub+0x344>)
    67b8:	0d76      	lsrs	r6, r6, #21
    67ba:	46a8      	mov	r8, r5
    67bc:	0fdb      	lsrs	r3, r3, #31
    67be:	00d2      	lsls	r2, r2, #3
    67c0:	4584      	cmp	ip, r0
    67c2:	d100      	bne.n	67c6 <__aeabi_dsub+0x3a>
    67c4:	e0d8      	b.n	6978 <__aeabi_dsub+0x1ec>
    67c6:	2001      	movs	r0, #1
    67c8:	4043      	eors	r3, r0
    67ca:	42ab      	cmp	r3, r5
    67cc:	d100      	bne.n	67d0 <__aeabi_dsub+0x44>
    67ce:	e0a6      	b.n	691e <__aeabi_dsub+0x192>
    67d0:	4660      	mov	r0, ip
    67d2:	1a35      	subs	r5, r6, r0
    67d4:	2d00      	cmp	r5, #0
    67d6:	dc00      	bgt.n	67da <__aeabi_dsub+0x4e>
    67d8:	e105      	b.n	69e6 <__aeabi_dsub+0x25a>
    67da:	2800      	cmp	r0, #0
    67dc:	d110      	bne.n	6800 <__aeabi_dsub+0x74>
    67de:	000b      	movs	r3, r1
    67e0:	4313      	orrs	r3, r2
    67e2:	d100      	bne.n	67e6 <__aeabi_dsub+0x5a>
    67e4:	e0d7      	b.n	6996 <__aeabi_dsub+0x20a>
    67e6:	1e6b      	subs	r3, r5, #1
    67e8:	2b00      	cmp	r3, #0
    67ea:	d000      	beq.n	67ee <__aeabi_dsub+0x62>
    67ec:	e14b      	b.n	6a86 <__aeabi_dsub+0x2fa>
    67ee:	4653      	mov	r3, sl
    67f0:	1a9f      	subs	r7, r3, r2
    67f2:	45ba      	cmp	sl, r7
    67f4:	4180      	sbcs	r0, r0
    67f6:	1a64      	subs	r4, r4, r1
    67f8:	4240      	negs	r0, r0
    67fa:	1a24      	subs	r4, r4, r0
    67fc:	2601      	movs	r6, #1
    67fe:	e01e      	b.n	683e <__aeabi_dsub+0xb2>
    6800:	4bb3      	ldr	r3, [pc, #716]	; (6ad0 <__aeabi_dsub+0x344>)
    6802:	429e      	cmp	r6, r3
    6804:	d048      	beq.n	6898 <__aeabi_dsub+0x10c>
    6806:	2380      	movs	r3, #128	; 0x80
    6808:	041b      	lsls	r3, r3, #16
    680a:	4319      	orrs	r1, r3
    680c:	2d38      	cmp	r5, #56	; 0x38
    680e:	dd00      	ble.n	6812 <__aeabi_dsub+0x86>
    6810:	e119      	b.n	6a46 <__aeabi_dsub+0x2ba>
    6812:	2d1f      	cmp	r5, #31
    6814:	dd00      	ble.n	6818 <__aeabi_dsub+0x8c>
    6816:	e14c      	b.n	6ab2 <__aeabi_dsub+0x326>
    6818:	2320      	movs	r3, #32
    681a:	000f      	movs	r7, r1
    681c:	1b5b      	subs	r3, r3, r5
    681e:	0010      	movs	r0, r2
    6820:	409a      	lsls	r2, r3
    6822:	409f      	lsls	r7, r3
    6824:	40e8      	lsrs	r0, r5
    6826:	1e53      	subs	r3, r2, #1
    6828:	419a      	sbcs	r2, r3
    682a:	40e9      	lsrs	r1, r5
    682c:	4307      	orrs	r7, r0
    682e:	4317      	orrs	r7, r2
    6830:	4653      	mov	r3, sl
    6832:	1bdf      	subs	r7, r3, r7
    6834:	1a61      	subs	r1, r4, r1
    6836:	45ba      	cmp	sl, r7
    6838:	41a4      	sbcs	r4, r4
    683a:	4264      	negs	r4, r4
    683c:	1b0c      	subs	r4, r1, r4
    683e:	0223      	lsls	r3, r4, #8
    6840:	d400      	bmi.n	6844 <__aeabi_dsub+0xb8>
    6842:	e0c5      	b.n	69d0 <__aeabi_dsub+0x244>
    6844:	0264      	lsls	r4, r4, #9
    6846:	0a65      	lsrs	r5, r4, #9
    6848:	2d00      	cmp	r5, #0
    684a:	d100      	bne.n	684e <__aeabi_dsub+0xc2>
    684c:	e0f6      	b.n	6a3c <__aeabi_dsub+0x2b0>
    684e:	0028      	movs	r0, r5
    6850:	f000 fc7a 	bl	7148 <__clzsi2>
    6854:	0003      	movs	r3, r0
    6856:	3b08      	subs	r3, #8
    6858:	2b1f      	cmp	r3, #31
    685a:	dd00      	ble.n	685e <__aeabi_dsub+0xd2>
    685c:	e0e9      	b.n	6a32 <__aeabi_dsub+0x2a6>
    685e:	2220      	movs	r2, #32
    6860:	003c      	movs	r4, r7
    6862:	1ad2      	subs	r2, r2, r3
    6864:	409d      	lsls	r5, r3
    6866:	40d4      	lsrs	r4, r2
    6868:	409f      	lsls	r7, r3
    686a:	4325      	orrs	r5, r4
    686c:	429e      	cmp	r6, r3
    686e:	dd00      	ble.n	6872 <__aeabi_dsub+0xe6>
    6870:	e0db      	b.n	6a2a <__aeabi_dsub+0x29e>
    6872:	1b9e      	subs	r6, r3, r6
    6874:	1c73      	adds	r3, r6, #1
    6876:	2b1f      	cmp	r3, #31
    6878:	dd00      	ble.n	687c <__aeabi_dsub+0xf0>
    687a:	e10a      	b.n	6a92 <__aeabi_dsub+0x306>
    687c:	2220      	movs	r2, #32
    687e:	0038      	movs	r0, r7
    6880:	1ad2      	subs	r2, r2, r3
    6882:	0029      	movs	r1, r5
    6884:	4097      	lsls	r7, r2
    6886:	002c      	movs	r4, r5
    6888:	4091      	lsls	r1, r2
    688a:	40d8      	lsrs	r0, r3
    688c:	1e7a      	subs	r2, r7, #1
    688e:	4197      	sbcs	r7, r2
    6890:	40dc      	lsrs	r4, r3
    6892:	2600      	movs	r6, #0
    6894:	4301      	orrs	r1, r0
    6896:	430f      	orrs	r7, r1
    6898:	077b      	lsls	r3, r7, #29
    689a:	d009      	beq.n	68b0 <__aeabi_dsub+0x124>
    689c:	230f      	movs	r3, #15
    689e:	403b      	ands	r3, r7
    68a0:	2b04      	cmp	r3, #4
    68a2:	d005      	beq.n	68b0 <__aeabi_dsub+0x124>
    68a4:	1d3b      	adds	r3, r7, #4
    68a6:	42bb      	cmp	r3, r7
    68a8:	41bf      	sbcs	r7, r7
    68aa:	427f      	negs	r7, r7
    68ac:	19e4      	adds	r4, r4, r7
    68ae:	001f      	movs	r7, r3
    68b0:	0223      	lsls	r3, r4, #8
    68b2:	d525      	bpl.n	6900 <__aeabi_dsub+0x174>
    68b4:	4b86      	ldr	r3, [pc, #536]	; (6ad0 <__aeabi_dsub+0x344>)
    68b6:	3601      	adds	r6, #1
    68b8:	429e      	cmp	r6, r3
    68ba:	d100      	bne.n	68be <__aeabi_dsub+0x132>
    68bc:	e0af      	b.n	6a1e <__aeabi_dsub+0x292>
    68be:	4b85      	ldr	r3, [pc, #532]	; (6ad4 <__aeabi_dsub+0x348>)
    68c0:	2501      	movs	r5, #1
    68c2:	401c      	ands	r4, r3
    68c4:	4643      	mov	r3, r8
    68c6:	0762      	lsls	r2, r4, #29
    68c8:	08ff      	lsrs	r7, r7, #3
    68ca:	0264      	lsls	r4, r4, #9
    68cc:	0576      	lsls	r6, r6, #21
    68ce:	4317      	orrs	r7, r2
    68d0:	0b24      	lsrs	r4, r4, #12
    68d2:	0d76      	lsrs	r6, r6, #21
    68d4:	401d      	ands	r5, r3
    68d6:	2100      	movs	r1, #0
    68d8:	0324      	lsls	r4, r4, #12
    68da:	0b23      	lsrs	r3, r4, #12
    68dc:	0d0c      	lsrs	r4, r1, #20
    68de:	4a7e      	ldr	r2, [pc, #504]	; (6ad8 <__aeabi_dsub+0x34c>)
    68e0:	0524      	lsls	r4, r4, #20
    68e2:	431c      	orrs	r4, r3
    68e4:	4014      	ands	r4, r2
    68e6:	0533      	lsls	r3, r6, #20
    68e8:	4323      	orrs	r3, r4
    68ea:	005b      	lsls	r3, r3, #1
    68ec:	07ed      	lsls	r5, r5, #31
    68ee:	085b      	lsrs	r3, r3, #1
    68f0:	432b      	orrs	r3, r5
    68f2:	0038      	movs	r0, r7
    68f4:	0019      	movs	r1, r3
    68f6:	bc1c      	pop	{r2, r3, r4}
    68f8:	4690      	mov	r8, r2
    68fa:	4699      	mov	r9, r3
    68fc:	46a2      	mov	sl, r4
    68fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6900:	2501      	movs	r5, #1
    6902:	4643      	mov	r3, r8
    6904:	0762      	lsls	r2, r4, #29
    6906:	08ff      	lsrs	r7, r7, #3
    6908:	4317      	orrs	r7, r2
    690a:	08e4      	lsrs	r4, r4, #3
    690c:	401d      	ands	r5, r3
    690e:	4b70      	ldr	r3, [pc, #448]	; (6ad0 <__aeabi_dsub+0x344>)
    6910:	429e      	cmp	r6, r3
    6912:	d036      	beq.n	6982 <__aeabi_dsub+0x1f6>
    6914:	0324      	lsls	r4, r4, #12
    6916:	0576      	lsls	r6, r6, #21
    6918:	0b24      	lsrs	r4, r4, #12
    691a:	0d76      	lsrs	r6, r6, #21
    691c:	e7db      	b.n	68d6 <__aeabi_dsub+0x14a>
    691e:	4663      	mov	r3, ip
    6920:	1af3      	subs	r3, r6, r3
    6922:	2b00      	cmp	r3, #0
    6924:	dc00      	bgt.n	6928 <__aeabi_dsub+0x19c>
    6926:	e094      	b.n	6a52 <__aeabi_dsub+0x2c6>
    6928:	4660      	mov	r0, ip
    692a:	2800      	cmp	r0, #0
    692c:	d035      	beq.n	699a <__aeabi_dsub+0x20e>
    692e:	4868      	ldr	r0, [pc, #416]	; (6ad0 <__aeabi_dsub+0x344>)
    6930:	4286      	cmp	r6, r0
    6932:	d0b1      	beq.n	6898 <__aeabi_dsub+0x10c>
    6934:	2780      	movs	r7, #128	; 0x80
    6936:	043f      	lsls	r7, r7, #16
    6938:	4339      	orrs	r1, r7
    693a:	2b38      	cmp	r3, #56	; 0x38
    693c:	dc00      	bgt.n	6940 <__aeabi_dsub+0x1b4>
    693e:	e0fd      	b.n	6b3c <__aeabi_dsub+0x3b0>
    6940:	430a      	orrs	r2, r1
    6942:	0017      	movs	r7, r2
    6944:	2100      	movs	r1, #0
    6946:	1e7a      	subs	r2, r7, #1
    6948:	4197      	sbcs	r7, r2
    694a:	4457      	add	r7, sl
    694c:	4557      	cmp	r7, sl
    694e:	4180      	sbcs	r0, r0
    6950:	1909      	adds	r1, r1, r4
    6952:	4244      	negs	r4, r0
    6954:	190c      	adds	r4, r1, r4
    6956:	0223      	lsls	r3, r4, #8
    6958:	d53a      	bpl.n	69d0 <__aeabi_dsub+0x244>
    695a:	4b5d      	ldr	r3, [pc, #372]	; (6ad0 <__aeabi_dsub+0x344>)
    695c:	3601      	adds	r6, #1
    695e:	429e      	cmp	r6, r3
    6960:	d100      	bne.n	6964 <__aeabi_dsub+0x1d8>
    6962:	e14b      	b.n	6bfc <__aeabi_dsub+0x470>
    6964:	2201      	movs	r2, #1
    6966:	4b5b      	ldr	r3, [pc, #364]	; (6ad4 <__aeabi_dsub+0x348>)
    6968:	401c      	ands	r4, r3
    696a:	087b      	lsrs	r3, r7, #1
    696c:	4017      	ands	r7, r2
    696e:	431f      	orrs	r7, r3
    6970:	07e2      	lsls	r2, r4, #31
    6972:	4317      	orrs	r7, r2
    6974:	0864      	lsrs	r4, r4, #1
    6976:	e78f      	b.n	6898 <__aeabi_dsub+0x10c>
    6978:	0008      	movs	r0, r1
    697a:	4310      	orrs	r0, r2
    697c:	d000      	beq.n	6980 <__aeabi_dsub+0x1f4>
    697e:	e724      	b.n	67ca <__aeabi_dsub+0x3e>
    6980:	e721      	b.n	67c6 <__aeabi_dsub+0x3a>
    6982:	0023      	movs	r3, r4
    6984:	433b      	orrs	r3, r7
    6986:	d100      	bne.n	698a <__aeabi_dsub+0x1fe>
    6988:	e1b9      	b.n	6cfe <__aeabi_dsub+0x572>
    698a:	2280      	movs	r2, #128	; 0x80
    698c:	0312      	lsls	r2, r2, #12
    698e:	4314      	orrs	r4, r2
    6990:	0324      	lsls	r4, r4, #12
    6992:	0b24      	lsrs	r4, r4, #12
    6994:	e79f      	b.n	68d6 <__aeabi_dsub+0x14a>
    6996:	002e      	movs	r6, r5
    6998:	e77e      	b.n	6898 <__aeabi_dsub+0x10c>
    699a:	0008      	movs	r0, r1
    699c:	4310      	orrs	r0, r2
    699e:	d100      	bne.n	69a2 <__aeabi_dsub+0x216>
    69a0:	e0ca      	b.n	6b38 <__aeabi_dsub+0x3ac>
    69a2:	1e58      	subs	r0, r3, #1
    69a4:	4684      	mov	ip, r0
    69a6:	2800      	cmp	r0, #0
    69a8:	d000      	beq.n	69ac <__aeabi_dsub+0x220>
    69aa:	e0e7      	b.n	6b7c <__aeabi_dsub+0x3f0>
    69ac:	4452      	add	r2, sl
    69ae:	4552      	cmp	r2, sl
    69b0:	4180      	sbcs	r0, r0
    69b2:	1864      	adds	r4, r4, r1
    69b4:	4240      	negs	r0, r0
    69b6:	1824      	adds	r4, r4, r0
    69b8:	0017      	movs	r7, r2
    69ba:	2601      	movs	r6, #1
    69bc:	0223      	lsls	r3, r4, #8
    69be:	d507      	bpl.n	69d0 <__aeabi_dsub+0x244>
    69c0:	2602      	movs	r6, #2
    69c2:	e7cf      	b.n	6964 <__aeabi_dsub+0x1d8>
    69c4:	4664      	mov	r4, ip
    69c6:	432c      	orrs	r4, r5
    69c8:	d100      	bne.n	69cc <__aeabi_dsub+0x240>
    69ca:	e1b3      	b.n	6d34 <__aeabi_dsub+0x5a8>
    69cc:	002c      	movs	r4, r5
    69ce:	4667      	mov	r7, ip
    69d0:	077b      	lsls	r3, r7, #29
    69d2:	d000      	beq.n	69d6 <__aeabi_dsub+0x24a>
    69d4:	e762      	b.n	689c <__aeabi_dsub+0x110>
    69d6:	0763      	lsls	r3, r4, #29
    69d8:	08ff      	lsrs	r7, r7, #3
    69da:	431f      	orrs	r7, r3
    69dc:	2501      	movs	r5, #1
    69de:	4643      	mov	r3, r8
    69e0:	08e4      	lsrs	r4, r4, #3
    69e2:	401d      	ands	r5, r3
    69e4:	e793      	b.n	690e <__aeabi_dsub+0x182>
    69e6:	2d00      	cmp	r5, #0
    69e8:	d178      	bne.n	6adc <__aeabi_dsub+0x350>
    69ea:	1c75      	adds	r5, r6, #1
    69ec:	056d      	lsls	r5, r5, #21
    69ee:	0d6d      	lsrs	r5, r5, #21
    69f0:	2d01      	cmp	r5, #1
    69f2:	dc00      	bgt.n	69f6 <__aeabi_dsub+0x26a>
    69f4:	e0f2      	b.n	6bdc <__aeabi_dsub+0x450>
    69f6:	4650      	mov	r0, sl
    69f8:	1a80      	subs	r0, r0, r2
    69fa:	4582      	cmp	sl, r0
    69fc:	41bf      	sbcs	r7, r7
    69fe:	1a65      	subs	r5, r4, r1
    6a00:	427f      	negs	r7, r7
    6a02:	1bed      	subs	r5, r5, r7
    6a04:	4684      	mov	ip, r0
    6a06:	0228      	lsls	r0, r5, #8
    6a08:	d400      	bmi.n	6a0c <__aeabi_dsub+0x280>
    6a0a:	e08c      	b.n	6b26 <__aeabi_dsub+0x39a>
    6a0c:	4650      	mov	r0, sl
    6a0e:	1a17      	subs	r7, r2, r0
    6a10:	42ba      	cmp	r2, r7
    6a12:	4192      	sbcs	r2, r2
    6a14:	1b0c      	subs	r4, r1, r4
    6a16:	4255      	negs	r5, r2
    6a18:	1b65      	subs	r5, r4, r5
    6a1a:	4698      	mov	r8, r3
    6a1c:	e714      	b.n	6848 <__aeabi_dsub+0xbc>
    6a1e:	2501      	movs	r5, #1
    6a20:	4643      	mov	r3, r8
    6a22:	2400      	movs	r4, #0
    6a24:	401d      	ands	r5, r3
    6a26:	2700      	movs	r7, #0
    6a28:	e755      	b.n	68d6 <__aeabi_dsub+0x14a>
    6a2a:	4c2a      	ldr	r4, [pc, #168]	; (6ad4 <__aeabi_dsub+0x348>)
    6a2c:	1af6      	subs	r6, r6, r3
    6a2e:	402c      	ands	r4, r5
    6a30:	e732      	b.n	6898 <__aeabi_dsub+0x10c>
    6a32:	003d      	movs	r5, r7
    6a34:	3828      	subs	r0, #40	; 0x28
    6a36:	4085      	lsls	r5, r0
    6a38:	2700      	movs	r7, #0
    6a3a:	e717      	b.n	686c <__aeabi_dsub+0xe0>
    6a3c:	0038      	movs	r0, r7
    6a3e:	f000 fb83 	bl	7148 <__clzsi2>
    6a42:	3020      	adds	r0, #32
    6a44:	e706      	b.n	6854 <__aeabi_dsub+0xc8>
    6a46:	430a      	orrs	r2, r1
    6a48:	0017      	movs	r7, r2
    6a4a:	2100      	movs	r1, #0
    6a4c:	1e7a      	subs	r2, r7, #1
    6a4e:	4197      	sbcs	r7, r2
    6a50:	e6ee      	b.n	6830 <__aeabi_dsub+0xa4>
    6a52:	2b00      	cmp	r3, #0
    6a54:	d000      	beq.n	6a58 <__aeabi_dsub+0x2cc>
    6a56:	e0e5      	b.n	6c24 <__aeabi_dsub+0x498>
    6a58:	1c73      	adds	r3, r6, #1
    6a5a:	469c      	mov	ip, r3
    6a5c:	055b      	lsls	r3, r3, #21
    6a5e:	0d5b      	lsrs	r3, r3, #21
    6a60:	2b01      	cmp	r3, #1
    6a62:	dc00      	bgt.n	6a66 <__aeabi_dsub+0x2da>
    6a64:	e09f      	b.n	6ba6 <__aeabi_dsub+0x41a>
    6a66:	4b1a      	ldr	r3, [pc, #104]	; (6ad0 <__aeabi_dsub+0x344>)
    6a68:	459c      	cmp	ip, r3
    6a6a:	d100      	bne.n	6a6e <__aeabi_dsub+0x2e2>
    6a6c:	e0c5      	b.n	6bfa <__aeabi_dsub+0x46e>
    6a6e:	4452      	add	r2, sl
    6a70:	4552      	cmp	r2, sl
    6a72:	4180      	sbcs	r0, r0
    6a74:	1864      	adds	r4, r4, r1
    6a76:	4240      	negs	r0, r0
    6a78:	1824      	adds	r4, r4, r0
    6a7a:	07e7      	lsls	r7, r4, #31
    6a7c:	0852      	lsrs	r2, r2, #1
    6a7e:	4317      	orrs	r7, r2
    6a80:	0864      	lsrs	r4, r4, #1
    6a82:	4666      	mov	r6, ip
    6a84:	e708      	b.n	6898 <__aeabi_dsub+0x10c>
    6a86:	4812      	ldr	r0, [pc, #72]	; (6ad0 <__aeabi_dsub+0x344>)
    6a88:	4285      	cmp	r5, r0
    6a8a:	d100      	bne.n	6a8e <__aeabi_dsub+0x302>
    6a8c:	e085      	b.n	6b9a <__aeabi_dsub+0x40e>
    6a8e:	001d      	movs	r5, r3
    6a90:	e6bc      	b.n	680c <__aeabi_dsub+0x80>
    6a92:	0029      	movs	r1, r5
    6a94:	3e1f      	subs	r6, #31
    6a96:	40f1      	lsrs	r1, r6
    6a98:	2b20      	cmp	r3, #32
    6a9a:	d100      	bne.n	6a9e <__aeabi_dsub+0x312>
    6a9c:	e07f      	b.n	6b9e <__aeabi_dsub+0x412>
    6a9e:	2240      	movs	r2, #64	; 0x40
    6aa0:	1ad3      	subs	r3, r2, r3
    6aa2:	409d      	lsls	r5, r3
    6aa4:	432f      	orrs	r7, r5
    6aa6:	1e7d      	subs	r5, r7, #1
    6aa8:	41af      	sbcs	r7, r5
    6aaa:	2400      	movs	r4, #0
    6aac:	430f      	orrs	r7, r1
    6aae:	2600      	movs	r6, #0
    6ab0:	e78e      	b.n	69d0 <__aeabi_dsub+0x244>
    6ab2:	002b      	movs	r3, r5
    6ab4:	000f      	movs	r7, r1
    6ab6:	3b20      	subs	r3, #32
    6ab8:	40df      	lsrs	r7, r3
    6aba:	2d20      	cmp	r5, #32
    6abc:	d071      	beq.n	6ba2 <__aeabi_dsub+0x416>
    6abe:	2340      	movs	r3, #64	; 0x40
    6ac0:	1b5d      	subs	r5, r3, r5
    6ac2:	40a9      	lsls	r1, r5
    6ac4:	430a      	orrs	r2, r1
    6ac6:	1e51      	subs	r1, r2, #1
    6ac8:	418a      	sbcs	r2, r1
    6aca:	2100      	movs	r1, #0
    6acc:	4317      	orrs	r7, r2
    6ace:	e6af      	b.n	6830 <__aeabi_dsub+0xa4>
    6ad0:	000007ff 	.word	0x000007ff
    6ad4:	ff7fffff 	.word	0xff7fffff
    6ad8:	800fffff 	.word	0x800fffff
    6adc:	2e00      	cmp	r6, #0
    6ade:	d03e      	beq.n	6b5e <__aeabi_dsub+0x3d2>
    6ae0:	4eb3      	ldr	r6, [pc, #716]	; (6db0 <__aeabi_dsub+0x624>)
    6ae2:	45b4      	cmp	ip, r6
    6ae4:	d045      	beq.n	6b72 <__aeabi_dsub+0x3e6>
    6ae6:	2680      	movs	r6, #128	; 0x80
    6ae8:	0436      	lsls	r6, r6, #16
    6aea:	426d      	negs	r5, r5
    6aec:	4334      	orrs	r4, r6
    6aee:	2d38      	cmp	r5, #56	; 0x38
    6af0:	dd00      	ble.n	6af4 <__aeabi_dsub+0x368>
    6af2:	e0a8      	b.n	6c46 <__aeabi_dsub+0x4ba>
    6af4:	2d1f      	cmp	r5, #31
    6af6:	dd00      	ble.n	6afa <__aeabi_dsub+0x36e>
    6af8:	e11f      	b.n	6d3a <__aeabi_dsub+0x5ae>
    6afa:	2620      	movs	r6, #32
    6afc:	0027      	movs	r7, r4
    6afe:	4650      	mov	r0, sl
    6b00:	1b76      	subs	r6, r6, r5
    6b02:	40b7      	lsls	r7, r6
    6b04:	40e8      	lsrs	r0, r5
    6b06:	4307      	orrs	r7, r0
    6b08:	4650      	mov	r0, sl
    6b0a:	40b0      	lsls	r0, r6
    6b0c:	1e46      	subs	r6, r0, #1
    6b0e:	41b0      	sbcs	r0, r6
    6b10:	40ec      	lsrs	r4, r5
    6b12:	4338      	orrs	r0, r7
    6b14:	1a17      	subs	r7, r2, r0
    6b16:	42ba      	cmp	r2, r7
    6b18:	4192      	sbcs	r2, r2
    6b1a:	1b0c      	subs	r4, r1, r4
    6b1c:	4252      	negs	r2, r2
    6b1e:	1aa4      	subs	r4, r4, r2
    6b20:	4666      	mov	r6, ip
    6b22:	4698      	mov	r8, r3
    6b24:	e68b      	b.n	683e <__aeabi_dsub+0xb2>
    6b26:	4664      	mov	r4, ip
    6b28:	4667      	mov	r7, ip
    6b2a:	432c      	orrs	r4, r5
    6b2c:	d000      	beq.n	6b30 <__aeabi_dsub+0x3a4>
    6b2e:	e68b      	b.n	6848 <__aeabi_dsub+0xbc>
    6b30:	2500      	movs	r5, #0
    6b32:	2600      	movs	r6, #0
    6b34:	2700      	movs	r7, #0
    6b36:	e6ea      	b.n	690e <__aeabi_dsub+0x182>
    6b38:	001e      	movs	r6, r3
    6b3a:	e6ad      	b.n	6898 <__aeabi_dsub+0x10c>
    6b3c:	2b1f      	cmp	r3, #31
    6b3e:	dc60      	bgt.n	6c02 <__aeabi_dsub+0x476>
    6b40:	2720      	movs	r7, #32
    6b42:	1af8      	subs	r0, r7, r3
    6b44:	000f      	movs	r7, r1
    6b46:	4684      	mov	ip, r0
    6b48:	4087      	lsls	r7, r0
    6b4a:	0010      	movs	r0, r2
    6b4c:	40d8      	lsrs	r0, r3
    6b4e:	4307      	orrs	r7, r0
    6b50:	4660      	mov	r0, ip
    6b52:	4082      	lsls	r2, r0
    6b54:	1e50      	subs	r0, r2, #1
    6b56:	4182      	sbcs	r2, r0
    6b58:	40d9      	lsrs	r1, r3
    6b5a:	4317      	orrs	r7, r2
    6b5c:	e6f5      	b.n	694a <__aeabi_dsub+0x1be>
    6b5e:	0026      	movs	r6, r4
    6b60:	4650      	mov	r0, sl
    6b62:	4306      	orrs	r6, r0
    6b64:	d005      	beq.n	6b72 <__aeabi_dsub+0x3e6>
    6b66:	43ed      	mvns	r5, r5
    6b68:	2d00      	cmp	r5, #0
    6b6a:	d0d3      	beq.n	6b14 <__aeabi_dsub+0x388>
    6b6c:	4e90      	ldr	r6, [pc, #576]	; (6db0 <__aeabi_dsub+0x624>)
    6b6e:	45b4      	cmp	ip, r6
    6b70:	d1bd      	bne.n	6aee <__aeabi_dsub+0x362>
    6b72:	000c      	movs	r4, r1
    6b74:	0017      	movs	r7, r2
    6b76:	4666      	mov	r6, ip
    6b78:	4698      	mov	r8, r3
    6b7a:	e68d      	b.n	6898 <__aeabi_dsub+0x10c>
    6b7c:	488c      	ldr	r0, [pc, #560]	; (6db0 <__aeabi_dsub+0x624>)
    6b7e:	4283      	cmp	r3, r0
    6b80:	d00b      	beq.n	6b9a <__aeabi_dsub+0x40e>
    6b82:	4663      	mov	r3, ip
    6b84:	e6d9      	b.n	693a <__aeabi_dsub+0x1ae>
    6b86:	2d00      	cmp	r5, #0
    6b88:	d000      	beq.n	6b8c <__aeabi_dsub+0x400>
    6b8a:	e096      	b.n	6cba <__aeabi_dsub+0x52e>
    6b8c:	0008      	movs	r0, r1
    6b8e:	4310      	orrs	r0, r2
    6b90:	d100      	bne.n	6b94 <__aeabi_dsub+0x408>
    6b92:	e0e2      	b.n	6d5a <__aeabi_dsub+0x5ce>
    6b94:	000c      	movs	r4, r1
    6b96:	0017      	movs	r7, r2
    6b98:	4698      	mov	r8, r3
    6b9a:	4e85      	ldr	r6, [pc, #532]	; (6db0 <__aeabi_dsub+0x624>)
    6b9c:	e67c      	b.n	6898 <__aeabi_dsub+0x10c>
    6b9e:	2500      	movs	r5, #0
    6ba0:	e780      	b.n	6aa4 <__aeabi_dsub+0x318>
    6ba2:	2100      	movs	r1, #0
    6ba4:	e78e      	b.n	6ac4 <__aeabi_dsub+0x338>
    6ba6:	0023      	movs	r3, r4
    6ba8:	4650      	mov	r0, sl
    6baa:	4303      	orrs	r3, r0
    6bac:	2e00      	cmp	r6, #0
    6bae:	d000      	beq.n	6bb2 <__aeabi_dsub+0x426>
    6bb0:	e0a8      	b.n	6d04 <__aeabi_dsub+0x578>
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d100      	bne.n	6bb8 <__aeabi_dsub+0x42c>
    6bb6:	e0de      	b.n	6d76 <__aeabi_dsub+0x5ea>
    6bb8:	000b      	movs	r3, r1
    6bba:	4313      	orrs	r3, r2
    6bbc:	d100      	bne.n	6bc0 <__aeabi_dsub+0x434>
    6bbe:	e66b      	b.n	6898 <__aeabi_dsub+0x10c>
    6bc0:	4452      	add	r2, sl
    6bc2:	4552      	cmp	r2, sl
    6bc4:	4180      	sbcs	r0, r0
    6bc6:	1864      	adds	r4, r4, r1
    6bc8:	4240      	negs	r0, r0
    6bca:	1824      	adds	r4, r4, r0
    6bcc:	0017      	movs	r7, r2
    6bce:	0223      	lsls	r3, r4, #8
    6bd0:	d400      	bmi.n	6bd4 <__aeabi_dsub+0x448>
    6bd2:	e6fd      	b.n	69d0 <__aeabi_dsub+0x244>
    6bd4:	4b77      	ldr	r3, [pc, #476]	; (6db4 <__aeabi_dsub+0x628>)
    6bd6:	4666      	mov	r6, ip
    6bd8:	401c      	ands	r4, r3
    6bda:	e65d      	b.n	6898 <__aeabi_dsub+0x10c>
    6bdc:	0025      	movs	r5, r4
    6bde:	4650      	mov	r0, sl
    6be0:	4305      	orrs	r5, r0
    6be2:	2e00      	cmp	r6, #0
    6be4:	d1cf      	bne.n	6b86 <__aeabi_dsub+0x3fa>
    6be6:	2d00      	cmp	r5, #0
    6be8:	d14f      	bne.n	6c8a <__aeabi_dsub+0x4fe>
    6bea:	000c      	movs	r4, r1
    6bec:	4314      	orrs	r4, r2
    6bee:	d100      	bne.n	6bf2 <__aeabi_dsub+0x466>
    6bf0:	e0a0      	b.n	6d34 <__aeabi_dsub+0x5a8>
    6bf2:	000c      	movs	r4, r1
    6bf4:	0017      	movs	r7, r2
    6bf6:	4698      	mov	r8, r3
    6bf8:	e64e      	b.n	6898 <__aeabi_dsub+0x10c>
    6bfa:	4666      	mov	r6, ip
    6bfc:	2400      	movs	r4, #0
    6bfe:	2700      	movs	r7, #0
    6c00:	e685      	b.n	690e <__aeabi_dsub+0x182>
    6c02:	001f      	movs	r7, r3
    6c04:	0008      	movs	r0, r1
    6c06:	3f20      	subs	r7, #32
    6c08:	40f8      	lsrs	r0, r7
    6c0a:	0007      	movs	r7, r0
    6c0c:	2b20      	cmp	r3, #32
    6c0e:	d100      	bne.n	6c12 <__aeabi_dsub+0x486>
    6c10:	e08e      	b.n	6d30 <__aeabi_dsub+0x5a4>
    6c12:	2040      	movs	r0, #64	; 0x40
    6c14:	1ac3      	subs	r3, r0, r3
    6c16:	4099      	lsls	r1, r3
    6c18:	430a      	orrs	r2, r1
    6c1a:	1e51      	subs	r1, r2, #1
    6c1c:	418a      	sbcs	r2, r1
    6c1e:	2100      	movs	r1, #0
    6c20:	4317      	orrs	r7, r2
    6c22:	e692      	b.n	694a <__aeabi_dsub+0x1be>
    6c24:	2e00      	cmp	r6, #0
    6c26:	d114      	bne.n	6c52 <__aeabi_dsub+0x4c6>
    6c28:	0026      	movs	r6, r4
    6c2a:	4650      	mov	r0, sl
    6c2c:	4306      	orrs	r6, r0
    6c2e:	d062      	beq.n	6cf6 <__aeabi_dsub+0x56a>
    6c30:	43db      	mvns	r3, r3
    6c32:	2b00      	cmp	r3, #0
    6c34:	d15c      	bne.n	6cf0 <__aeabi_dsub+0x564>
    6c36:	1887      	adds	r7, r0, r2
    6c38:	4297      	cmp	r7, r2
    6c3a:	4192      	sbcs	r2, r2
    6c3c:	1864      	adds	r4, r4, r1
    6c3e:	4252      	negs	r2, r2
    6c40:	18a4      	adds	r4, r4, r2
    6c42:	4666      	mov	r6, ip
    6c44:	e687      	b.n	6956 <__aeabi_dsub+0x1ca>
    6c46:	4650      	mov	r0, sl
    6c48:	4320      	orrs	r0, r4
    6c4a:	1e44      	subs	r4, r0, #1
    6c4c:	41a0      	sbcs	r0, r4
    6c4e:	2400      	movs	r4, #0
    6c50:	e760      	b.n	6b14 <__aeabi_dsub+0x388>
    6c52:	4e57      	ldr	r6, [pc, #348]	; (6db0 <__aeabi_dsub+0x624>)
    6c54:	45b4      	cmp	ip, r6
    6c56:	d04e      	beq.n	6cf6 <__aeabi_dsub+0x56a>
    6c58:	2680      	movs	r6, #128	; 0x80
    6c5a:	0436      	lsls	r6, r6, #16
    6c5c:	425b      	negs	r3, r3
    6c5e:	4334      	orrs	r4, r6
    6c60:	2b38      	cmp	r3, #56	; 0x38
    6c62:	dd00      	ble.n	6c66 <__aeabi_dsub+0x4da>
    6c64:	e07f      	b.n	6d66 <__aeabi_dsub+0x5da>
    6c66:	2b1f      	cmp	r3, #31
    6c68:	dd00      	ble.n	6c6c <__aeabi_dsub+0x4e0>
    6c6a:	e08b      	b.n	6d84 <__aeabi_dsub+0x5f8>
    6c6c:	2620      	movs	r6, #32
    6c6e:	0027      	movs	r7, r4
    6c70:	4650      	mov	r0, sl
    6c72:	1af6      	subs	r6, r6, r3
    6c74:	40b7      	lsls	r7, r6
    6c76:	40d8      	lsrs	r0, r3
    6c78:	4307      	orrs	r7, r0
    6c7a:	4650      	mov	r0, sl
    6c7c:	40b0      	lsls	r0, r6
    6c7e:	1e46      	subs	r6, r0, #1
    6c80:	41b0      	sbcs	r0, r6
    6c82:	4307      	orrs	r7, r0
    6c84:	40dc      	lsrs	r4, r3
    6c86:	18bf      	adds	r7, r7, r2
    6c88:	e7d6      	b.n	6c38 <__aeabi_dsub+0x4ac>
    6c8a:	000d      	movs	r5, r1
    6c8c:	4315      	orrs	r5, r2
    6c8e:	d100      	bne.n	6c92 <__aeabi_dsub+0x506>
    6c90:	e602      	b.n	6898 <__aeabi_dsub+0x10c>
    6c92:	4650      	mov	r0, sl
    6c94:	1a80      	subs	r0, r0, r2
    6c96:	4582      	cmp	sl, r0
    6c98:	41bf      	sbcs	r7, r7
    6c9a:	1a65      	subs	r5, r4, r1
    6c9c:	427f      	negs	r7, r7
    6c9e:	1bed      	subs	r5, r5, r7
    6ca0:	4684      	mov	ip, r0
    6ca2:	0228      	lsls	r0, r5, #8
    6ca4:	d400      	bmi.n	6ca8 <__aeabi_dsub+0x51c>
    6ca6:	e68d      	b.n	69c4 <__aeabi_dsub+0x238>
    6ca8:	4650      	mov	r0, sl
    6caa:	1a17      	subs	r7, r2, r0
    6cac:	42ba      	cmp	r2, r7
    6cae:	4192      	sbcs	r2, r2
    6cb0:	1b0c      	subs	r4, r1, r4
    6cb2:	4252      	negs	r2, r2
    6cb4:	1aa4      	subs	r4, r4, r2
    6cb6:	4698      	mov	r8, r3
    6cb8:	e5ee      	b.n	6898 <__aeabi_dsub+0x10c>
    6cba:	000d      	movs	r5, r1
    6cbc:	4315      	orrs	r5, r2
    6cbe:	d100      	bne.n	6cc2 <__aeabi_dsub+0x536>
    6cc0:	e76b      	b.n	6b9a <__aeabi_dsub+0x40e>
    6cc2:	4650      	mov	r0, sl
    6cc4:	0767      	lsls	r7, r4, #29
    6cc6:	08c0      	lsrs	r0, r0, #3
    6cc8:	4307      	orrs	r7, r0
    6cca:	2080      	movs	r0, #128	; 0x80
    6ccc:	08e4      	lsrs	r4, r4, #3
    6cce:	0300      	lsls	r0, r0, #12
    6cd0:	4204      	tst	r4, r0
    6cd2:	d007      	beq.n	6ce4 <__aeabi_dsub+0x558>
    6cd4:	08cd      	lsrs	r5, r1, #3
    6cd6:	4205      	tst	r5, r0
    6cd8:	d104      	bne.n	6ce4 <__aeabi_dsub+0x558>
    6cda:	002c      	movs	r4, r5
    6cdc:	4698      	mov	r8, r3
    6cde:	08d7      	lsrs	r7, r2, #3
    6ce0:	0749      	lsls	r1, r1, #29
    6ce2:	430f      	orrs	r7, r1
    6ce4:	0f7b      	lsrs	r3, r7, #29
    6ce6:	00e4      	lsls	r4, r4, #3
    6ce8:	431c      	orrs	r4, r3
    6cea:	00ff      	lsls	r7, r7, #3
    6cec:	4e30      	ldr	r6, [pc, #192]	; (6db0 <__aeabi_dsub+0x624>)
    6cee:	e5d3      	b.n	6898 <__aeabi_dsub+0x10c>
    6cf0:	4e2f      	ldr	r6, [pc, #188]	; (6db0 <__aeabi_dsub+0x624>)
    6cf2:	45b4      	cmp	ip, r6
    6cf4:	d1b4      	bne.n	6c60 <__aeabi_dsub+0x4d4>
    6cf6:	000c      	movs	r4, r1
    6cf8:	0017      	movs	r7, r2
    6cfa:	4666      	mov	r6, ip
    6cfc:	e5cc      	b.n	6898 <__aeabi_dsub+0x10c>
    6cfe:	2700      	movs	r7, #0
    6d00:	2400      	movs	r4, #0
    6d02:	e5e8      	b.n	68d6 <__aeabi_dsub+0x14a>
    6d04:	2b00      	cmp	r3, #0
    6d06:	d039      	beq.n	6d7c <__aeabi_dsub+0x5f0>
    6d08:	000b      	movs	r3, r1
    6d0a:	4313      	orrs	r3, r2
    6d0c:	d100      	bne.n	6d10 <__aeabi_dsub+0x584>
    6d0e:	e744      	b.n	6b9a <__aeabi_dsub+0x40e>
    6d10:	08c0      	lsrs	r0, r0, #3
    6d12:	0767      	lsls	r7, r4, #29
    6d14:	4307      	orrs	r7, r0
    6d16:	2080      	movs	r0, #128	; 0x80
    6d18:	08e4      	lsrs	r4, r4, #3
    6d1a:	0300      	lsls	r0, r0, #12
    6d1c:	4204      	tst	r4, r0
    6d1e:	d0e1      	beq.n	6ce4 <__aeabi_dsub+0x558>
    6d20:	08cb      	lsrs	r3, r1, #3
    6d22:	4203      	tst	r3, r0
    6d24:	d1de      	bne.n	6ce4 <__aeabi_dsub+0x558>
    6d26:	08d7      	lsrs	r7, r2, #3
    6d28:	0749      	lsls	r1, r1, #29
    6d2a:	430f      	orrs	r7, r1
    6d2c:	001c      	movs	r4, r3
    6d2e:	e7d9      	b.n	6ce4 <__aeabi_dsub+0x558>
    6d30:	2100      	movs	r1, #0
    6d32:	e771      	b.n	6c18 <__aeabi_dsub+0x48c>
    6d34:	2500      	movs	r5, #0
    6d36:	2700      	movs	r7, #0
    6d38:	e5e9      	b.n	690e <__aeabi_dsub+0x182>
    6d3a:	002e      	movs	r6, r5
    6d3c:	0027      	movs	r7, r4
    6d3e:	3e20      	subs	r6, #32
    6d40:	40f7      	lsrs	r7, r6
    6d42:	2d20      	cmp	r5, #32
    6d44:	d02f      	beq.n	6da6 <__aeabi_dsub+0x61a>
    6d46:	2640      	movs	r6, #64	; 0x40
    6d48:	1b75      	subs	r5, r6, r5
    6d4a:	40ac      	lsls	r4, r5
    6d4c:	4650      	mov	r0, sl
    6d4e:	4320      	orrs	r0, r4
    6d50:	1e44      	subs	r4, r0, #1
    6d52:	41a0      	sbcs	r0, r4
    6d54:	2400      	movs	r4, #0
    6d56:	4338      	orrs	r0, r7
    6d58:	e6dc      	b.n	6b14 <__aeabi_dsub+0x388>
    6d5a:	2480      	movs	r4, #128	; 0x80
    6d5c:	2500      	movs	r5, #0
    6d5e:	0324      	lsls	r4, r4, #12
    6d60:	4e13      	ldr	r6, [pc, #76]	; (6db0 <__aeabi_dsub+0x624>)
    6d62:	2700      	movs	r7, #0
    6d64:	e5d3      	b.n	690e <__aeabi_dsub+0x182>
    6d66:	4650      	mov	r0, sl
    6d68:	4320      	orrs	r0, r4
    6d6a:	0007      	movs	r7, r0
    6d6c:	1e78      	subs	r0, r7, #1
    6d6e:	4187      	sbcs	r7, r0
    6d70:	2400      	movs	r4, #0
    6d72:	18bf      	adds	r7, r7, r2
    6d74:	e760      	b.n	6c38 <__aeabi_dsub+0x4ac>
    6d76:	000c      	movs	r4, r1
    6d78:	0017      	movs	r7, r2
    6d7a:	e58d      	b.n	6898 <__aeabi_dsub+0x10c>
    6d7c:	000c      	movs	r4, r1
    6d7e:	0017      	movs	r7, r2
    6d80:	4e0b      	ldr	r6, [pc, #44]	; (6db0 <__aeabi_dsub+0x624>)
    6d82:	e589      	b.n	6898 <__aeabi_dsub+0x10c>
    6d84:	001e      	movs	r6, r3
    6d86:	0027      	movs	r7, r4
    6d88:	3e20      	subs	r6, #32
    6d8a:	40f7      	lsrs	r7, r6
    6d8c:	2b20      	cmp	r3, #32
    6d8e:	d00c      	beq.n	6daa <__aeabi_dsub+0x61e>
    6d90:	2640      	movs	r6, #64	; 0x40
    6d92:	1af3      	subs	r3, r6, r3
    6d94:	409c      	lsls	r4, r3
    6d96:	4650      	mov	r0, sl
    6d98:	4320      	orrs	r0, r4
    6d9a:	1e44      	subs	r4, r0, #1
    6d9c:	41a0      	sbcs	r0, r4
    6d9e:	4307      	orrs	r7, r0
    6da0:	2400      	movs	r4, #0
    6da2:	18bf      	adds	r7, r7, r2
    6da4:	e748      	b.n	6c38 <__aeabi_dsub+0x4ac>
    6da6:	2400      	movs	r4, #0
    6da8:	e7d0      	b.n	6d4c <__aeabi_dsub+0x5c0>
    6daa:	2400      	movs	r4, #0
    6dac:	e7f3      	b.n	6d96 <__aeabi_dsub+0x60a>
    6dae:	46c0      	nop			; (mov r8, r8)
    6db0:	000007ff 	.word	0x000007ff
    6db4:	ff7fffff 	.word	0xff7fffff

00006db8 <__aeabi_d2iz>:
    6db8:	b530      	push	{r4, r5, lr}
    6dba:	4d13      	ldr	r5, [pc, #76]	; (6e08 <__aeabi_d2iz+0x50>)
    6dbc:	030a      	lsls	r2, r1, #12
    6dbe:	004b      	lsls	r3, r1, #1
    6dc0:	0b12      	lsrs	r2, r2, #12
    6dc2:	0d5b      	lsrs	r3, r3, #21
    6dc4:	0fc9      	lsrs	r1, r1, #31
    6dc6:	2400      	movs	r4, #0
    6dc8:	42ab      	cmp	r3, r5
    6dca:	dd10      	ble.n	6dee <__aeabi_d2iz+0x36>
    6dcc:	4c0f      	ldr	r4, [pc, #60]	; (6e0c <__aeabi_d2iz+0x54>)
    6dce:	42a3      	cmp	r3, r4
    6dd0:	dc0f      	bgt.n	6df2 <__aeabi_d2iz+0x3a>
    6dd2:	2480      	movs	r4, #128	; 0x80
    6dd4:	4d0e      	ldr	r5, [pc, #56]	; (6e10 <__aeabi_d2iz+0x58>)
    6dd6:	0364      	lsls	r4, r4, #13
    6dd8:	4322      	orrs	r2, r4
    6dda:	1aed      	subs	r5, r5, r3
    6ddc:	2d1f      	cmp	r5, #31
    6dde:	dd0b      	ble.n	6df8 <__aeabi_d2iz+0x40>
    6de0:	480c      	ldr	r0, [pc, #48]	; (6e14 <__aeabi_d2iz+0x5c>)
    6de2:	1ac3      	subs	r3, r0, r3
    6de4:	40da      	lsrs	r2, r3
    6de6:	4254      	negs	r4, r2
    6de8:	2900      	cmp	r1, #0
    6dea:	d100      	bne.n	6dee <__aeabi_d2iz+0x36>
    6dec:	0014      	movs	r4, r2
    6dee:	0020      	movs	r0, r4
    6df0:	bd30      	pop	{r4, r5, pc}
    6df2:	4b09      	ldr	r3, [pc, #36]	; (6e18 <__aeabi_d2iz+0x60>)
    6df4:	18cc      	adds	r4, r1, r3
    6df6:	e7fa      	b.n	6dee <__aeabi_d2iz+0x36>
    6df8:	4c08      	ldr	r4, [pc, #32]	; (6e1c <__aeabi_d2iz+0x64>)
    6dfa:	40e8      	lsrs	r0, r5
    6dfc:	46a4      	mov	ip, r4
    6dfe:	4463      	add	r3, ip
    6e00:	409a      	lsls	r2, r3
    6e02:	4302      	orrs	r2, r0
    6e04:	e7ef      	b.n	6de6 <__aeabi_d2iz+0x2e>
    6e06:	46c0      	nop			; (mov r8, r8)
    6e08:	000003fe 	.word	0x000003fe
    6e0c:	0000041d 	.word	0x0000041d
    6e10:	00000433 	.word	0x00000433
    6e14:	00000413 	.word	0x00000413
    6e18:	7fffffff 	.word	0x7fffffff
    6e1c:	fffffbed 	.word	0xfffffbed

00006e20 <__aeabi_i2d>:
    6e20:	b570      	push	{r4, r5, r6, lr}
    6e22:	2800      	cmp	r0, #0
    6e24:	d030      	beq.n	6e88 <__aeabi_i2d+0x68>
    6e26:	17c3      	asrs	r3, r0, #31
    6e28:	18c4      	adds	r4, r0, r3
    6e2a:	405c      	eors	r4, r3
    6e2c:	0fc5      	lsrs	r5, r0, #31
    6e2e:	0020      	movs	r0, r4
    6e30:	f000 f98a 	bl	7148 <__clzsi2>
    6e34:	4b17      	ldr	r3, [pc, #92]	; (6e94 <__aeabi_i2d+0x74>)
    6e36:	4a18      	ldr	r2, [pc, #96]	; (6e98 <__aeabi_i2d+0x78>)
    6e38:	1a1b      	subs	r3, r3, r0
    6e3a:	1ad2      	subs	r2, r2, r3
    6e3c:	2a1f      	cmp	r2, #31
    6e3e:	dd18      	ble.n	6e72 <__aeabi_i2d+0x52>
    6e40:	4a16      	ldr	r2, [pc, #88]	; (6e9c <__aeabi_i2d+0x7c>)
    6e42:	1ad2      	subs	r2, r2, r3
    6e44:	4094      	lsls	r4, r2
    6e46:	2200      	movs	r2, #0
    6e48:	0324      	lsls	r4, r4, #12
    6e4a:	055b      	lsls	r3, r3, #21
    6e4c:	0b24      	lsrs	r4, r4, #12
    6e4e:	0d5b      	lsrs	r3, r3, #21
    6e50:	2100      	movs	r1, #0
    6e52:	0010      	movs	r0, r2
    6e54:	0324      	lsls	r4, r4, #12
    6e56:	0d0a      	lsrs	r2, r1, #20
    6e58:	0b24      	lsrs	r4, r4, #12
    6e5a:	0512      	lsls	r2, r2, #20
    6e5c:	4322      	orrs	r2, r4
    6e5e:	4c10      	ldr	r4, [pc, #64]	; (6ea0 <__aeabi_i2d+0x80>)
    6e60:	051b      	lsls	r3, r3, #20
    6e62:	4022      	ands	r2, r4
    6e64:	4313      	orrs	r3, r2
    6e66:	005b      	lsls	r3, r3, #1
    6e68:	07ed      	lsls	r5, r5, #31
    6e6a:	085b      	lsrs	r3, r3, #1
    6e6c:	432b      	orrs	r3, r5
    6e6e:	0019      	movs	r1, r3
    6e70:	bd70      	pop	{r4, r5, r6, pc}
    6e72:	0021      	movs	r1, r4
    6e74:	4091      	lsls	r1, r2
    6e76:	000a      	movs	r2, r1
    6e78:	210b      	movs	r1, #11
    6e7a:	1a08      	subs	r0, r1, r0
    6e7c:	40c4      	lsrs	r4, r0
    6e7e:	055b      	lsls	r3, r3, #21
    6e80:	0324      	lsls	r4, r4, #12
    6e82:	0b24      	lsrs	r4, r4, #12
    6e84:	0d5b      	lsrs	r3, r3, #21
    6e86:	e7e3      	b.n	6e50 <__aeabi_i2d+0x30>
    6e88:	2500      	movs	r5, #0
    6e8a:	2300      	movs	r3, #0
    6e8c:	2400      	movs	r4, #0
    6e8e:	2200      	movs	r2, #0
    6e90:	e7de      	b.n	6e50 <__aeabi_i2d+0x30>
    6e92:	46c0      	nop			; (mov r8, r8)
    6e94:	0000041e 	.word	0x0000041e
    6e98:	00000433 	.word	0x00000433
    6e9c:	00000413 	.word	0x00000413
    6ea0:	800fffff 	.word	0x800fffff

00006ea4 <__aeabi_ui2d>:
    6ea4:	b510      	push	{r4, lr}
    6ea6:	1e04      	subs	r4, r0, #0
    6ea8:	d028      	beq.n	6efc <__aeabi_ui2d+0x58>
    6eaa:	f000 f94d 	bl	7148 <__clzsi2>
    6eae:	4b15      	ldr	r3, [pc, #84]	; (6f04 <__aeabi_ui2d+0x60>)
    6eb0:	4a15      	ldr	r2, [pc, #84]	; (6f08 <__aeabi_ui2d+0x64>)
    6eb2:	1a1b      	subs	r3, r3, r0
    6eb4:	1ad2      	subs	r2, r2, r3
    6eb6:	2a1f      	cmp	r2, #31
    6eb8:	dd15      	ble.n	6ee6 <__aeabi_ui2d+0x42>
    6eba:	4a14      	ldr	r2, [pc, #80]	; (6f0c <__aeabi_ui2d+0x68>)
    6ebc:	1ad2      	subs	r2, r2, r3
    6ebe:	4094      	lsls	r4, r2
    6ec0:	2200      	movs	r2, #0
    6ec2:	0324      	lsls	r4, r4, #12
    6ec4:	055b      	lsls	r3, r3, #21
    6ec6:	0b24      	lsrs	r4, r4, #12
    6ec8:	0d5b      	lsrs	r3, r3, #21
    6eca:	2100      	movs	r1, #0
    6ecc:	0010      	movs	r0, r2
    6ece:	0324      	lsls	r4, r4, #12
    6ed0:	0d0a      	lsrs	r2, r1, #20
    6ed2:	0b24      	lsrs	r4, r4, #12
    6ed4:	0512      	lsls	r2, r2, #20
    6ed6:	4322      	orrs	r2, r4
    6ed8:	4c0d      	ldr	r4, [pc, #52]	; (6f10 <__aeabi_ui2d+0x6c>)
    6eda:	051b      	lsls	r3, r3, #20
    6edc:	4022      	ands	r2, r4
    6ede:	4313      	orrs	r3, r2
    6ee0:	005b      	lsls	r3, r3, #1
    6ee2:	0859      	lsrs	r1, r3, #1
    6ee4:	bd10      	pop	{r4, pc}
    6ee6:	0021      	movs	r1, r4
    6ee8:	4091      	lsls	r1, r2
    6eea:	000a      	movs	r2, r1
    6eec:	210b      	movs	r1, #11
    6eee:	1a08      	subs	r0, r1, r0
    6ef0:	40c4      	lsrs	r4, r0
    6ef2:	055b      	lsls	r3, r3, #21
    6ef4:	0324      	lsls	r4, r4, #12
    6ef6:	0b24      	lsrs	r4, r4, #12
    6ef8:	0d5b      	lsrs	r3, r3, #21
    6efa:	e7e6      	b.n	6eca <__aeabi_ui2d+0x26>
    6efc:	2300      	movs	r3, #0
    6efe:	2400      	movs	r4, #0
    6f00:	2200      	movs	r2, #0
    6f02:	e7e2      	b.n	6eca <__aeabi_ui2d+0x26>
    6f04:	0000041e 	.word	0x0000041e
    6f08:	00000433 	.word	0x00000433
    6f0c:	00000413 	.word	0x00000413
    6f10:	800fffff 	.word	0x800fffff

00006f14 <__aeabi_f2d>:
    6f14:	0041      	lsls	r1, r0, #1
    6f16:	0e09      	lsrs	r1, r1, #24
    6f18:	1c4b      	adds	r3, r1, #1
    6f1a:	b570      	push	{r4, r5, r6, lr}
    6f1c:	b2db      	uxtb	r3, r3
    6f1e:	0246      	lsls	r6, r0, #9
    6f20:	0a75      	lsrs	r5, r6, #9
    6f22:	0fc4      	lsrs	r4, r0, #31
    6f24:	2b01      	cmp	r3, #1
    6f26:	dd14      	ble.n	6f52 <__aeabi_f2d+0x3e>
    6f28:	23e0      	movs	r3, #224	; 0xe0
    6f2a:	009b      	lsls	r3, r3, #2
    6f2c:	076d      	lsls	r5, r5, #29
    6f2e:	0b36      	lsrs	r6, r6, #12
    6f30:	18cb      	adds	r3, r1, r3
    6f32:	2100      	movs	r1, #0
    6f34:	0d0a      	lsrs	r2, r1, #20
    6f36:	0028      	movs	r0, r5
    6f38:	0512      	lsls	r2, r2, #20
    6f3a:	4d1c      	ldr	r5, [pc, #112]	; (6fac <__aeabi_f2d+0x98>)
    6f3c:	4332      	orrs	r2, r6
    6f3e:	055b      	lsls	r3, r3, #21
    6f40:	402a      	ands	r2, r5
    6f42:	085b      	lsrs	r3, r3, #1
    6f44:	4313      	orrs	r3, r2
    6f46:	005b      	lsls	r3, r3, #1
    6f48:	07e4      	lsls	r4, r4, #31
    6f4a:	085b      	lsrs	r3, r3, #1
    6f4c:	4323      	orrs	r3, r4
    6f4e:	0019      	movs	r1, r3
    6f50:	bd70      	pop	{r4, r5, r6, pc}
    6f52:	2900      	cmp	r1, #0
    6f54:	d114      	bne.n	6f80 <__aeabi_f2d+0x6c>
    6f56:	2d00      	cmp	r5, #0
    6f58:	d01e      	beq.n	6f98 <__aeabi_f2d+0x84>
    6f5a:	0028      	movs	r0, r5
    6f5c:	f000 f8f4 	bl	7148 <__clzsi2>
    6f60:	280a      	cmp	r0, #10
    6f62:	dc1c      	bgt.n	6f9e <__aeabi_f2d+0x8a>
    6f64:	230b      	movs	r3, #11
    6f66:	002a      	movs	r2, r5
    6f68:	1a1b      	subs	r3, r3, r0
    6f6a:	40da      	lsrs	r2, r3
    6f6c:	0003      	movs	r3, r0
    6f6e:	3315      	adds	r3, #21
    6f70:	409d      	lsls	r5, r3
    6f72:	4b0f      	ldr	r3, [pc, #60]	; (6fb0 <__aeabi_f2d+0x9c>)
    6f74:	0312      	lsls	r2, r2, #12
    6f76:	1a1b      	subs	r3, r3, r0
    6f78:	055b      	lsls	r3, r3, #21
    6f7a:	0b16      	lsrs	r6, r2, #12
    6f7c:	0d5b      	lsrs	r3, r3, #21
    6f7e:	e7d8      	b.n	6f32 <__aeabi_f2d+0x1e>
    6f80:	2d00      	cmp	r5, #0
    6f82:	d006      	beq.n	6f92 <__aeabi_f2d+0x7e>
    6f84:	0b32      	lsrs	r2, r6, #12
    6f86:	2680      	movs	r6, #128	; 0x80
    6f88:	0336      	lsls	r6, r6, #12
    6f8a:	076d      	lsls	r5, r5, #29
    6f8c:	4316      	orrs	r6, r2
    6f8e:	4b09      	ldr	r3, [pc, #36]	; (6fb4 <__aeabi_f2d+0xa0>)
    6f90:	e7cf      	b.n	6f32 <__aeabi_f2d+0x1e>
    6f92:	4b08      	ldr	r3, [pc, #32]	; (6fb4 <__aeabi_f2d+0xa0>)
    6f94:	2600      	movs	r6, #0
    6f96:	e7cc      	b.n	6f32 <__aeabi_f2d+0x1e>
    6f98:	2300      	movs	r3, #0
    6f9a:	2600      	movs	r6, #0
    6f9c:	e7c9      	b.n	6f32 <__aeabi_f2d+0x1e>
    6f9e:	0003      	movs	r3, r0
    6fa0:	002a      	movs	r2, r5
    6fa2:	3b0b      	subs	r3, #11
    6fa4:	409a      	lsls	r2, r3
    6fa6:	2500      	movs	r5, #0
    6fa8:	e7e3      	b.n	6f72 <__aeabi_f2d+0x5e>
    6faa:	46c0      	nop			; (mov r8, r8)
    6fac:	800fffff 	.word	0x800fffff
    6fb0:	00000389 	.word	0x00000389
    6fb4:	000007ff 	.word	0x000007ff

00006fb8 <__aeabi_d2f>:
    6fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6fba:	004c      	lsls	r4, r1, #1
    6fbc:	0d64      	lsrs	r4, r4, #21
    6fbe:	030b      	lsls	r3, r1, #12
    6fc0:	1c62      	adds	r2, r4, #1
    6fc2:	0f45      	lsrs	r5, r0, #29
    6fc4:	0a5b      	lsrs	r3, r3, #9
    6fc6:	0552      	lsls	r2, r2, #21
    6fc8:	432b      	orrs	r3, r5
    6fca:	0fc9      	lsrs	r1, r1, #31
    6fcc:	00c5      	lsls	r5, r0, #3
    6fce:	0d52      	lsrs	r2, r2, #21
    6fd0:	2a01      	cmp	r2, #1
    6fd2:	dd28      	ble.n	7026 <__aeabi_d2f+0x6e>
    6fd4:	4a3a      	ldr	r2, [pc, #232]	; (70c0 <__aeabi_d2f+0x108>)
    6fd6:	18a6      	adds	r6, r4, r2
    6fd8:	2efe      	cmp	r6, #254	; 0xfe
    6fda:	dc1b      	bgt.n	7014 <__aeabi_d2f+0x5c>
    6fdc:	2e00      	cmp	r6, #0
    6fde:	dd3e      	ble.n	705e <__aeabi_d2f+0xa6>
    6fe0:	0180      	lsls	r0, r0, #6
    6fe2:	0002      	movs	r2, r0
    6fe4:	1e50      	subs	r0, r2, #1
    6fe6:	4182      	sbcs	r2, r0
    6fe8:	0f6d      	lsrs	r5, r5, #29
    6fea:	432a      	orrs	r2, r5
    6fec:	00db      	lsls	r3, r3, #3
    6fee:	4313      	orrs	r3, r2
    6ff0:	075a      	lsls	r2, r3, #29
    6ff2:	d004      	beq.n	6ffe <__aeabi_d2f+0x46>
    6ff4:	220f      	movs	r2, #15
    6ff6:	401a      	ands	r2, r3
    6ff8:	2a04      	cmp	r2, #4
    6ffa:	d000      	beq.n	6ffe <__aeabi_d2f+0x46>
    6ffc:	3304      	adds	r3, #4
    6ffe:	2280      	movs	r2, #128	; 0x80
    7000:	04d2      	lsls	r2, r2, #19
    7002:	401a      	ands	r2, r3
    7004:	d05a      	beq.n	70bc <__aeabi_d2f+0x104>
    7006:	3601      	adds	r6, #1
    7008:	2eff      	cmp	r6, #255	; 0xff
    700a:	d003      	beq.n	7014 <__aeabi_d2f+0x5c>
    700c:	019b      	lsls	r3, r3, #6
    700e:	0a5b      	lsrs	r3, r3, #9
    7010:	b2f4      	uxtb	r4, r6
    7012:	e001      	b.n	7018 <__aeabi_d2f+0x60>
    7014:	24ff      	movs	r4, #255	; 0xff
    7016:	2300      	movs	r3, #0
    7018:	0258      	lsls	r0, r3, #9
    701a:	05e4      	lsls	r4, r4, #23
    701c:	0a40      	lsrs	r0, r0, #9
    701e:	07c9      	lsls	r1, r1, #31
    7020:	4320      	orrs	r0, r4
    7022:	4308      	orrs	r0, r1
    7024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7026:	2c00      	cmp	r4, #0
    7028:	d007      	beq.n	703a <__aeabi_d2f+0x82>
    702a:	431d      	orrs	r5, r3
    702c:	d0f2      	beq.n	7014 <__aeabi_d2f+0x5c>
    702e:	2080      	movs	r0, #128	; 0x80
    7030:	00db      	lsls	r3, r3, #3
    7032:	0480      	lsls	r0, r0, #18
    7034:	4303      	orrs	r3, r0
    7036:	26ff      	movs	r6, #255	; 0xff
    7038:	e7da      	b.n	6ff0 <__aeabi_d2f+0x38>
    703a:	432b      	orrs	r3, r5
    703c:	d003      	beq.n	7046 <__aeabi_d2f+0x8e>
    703e:	2305      	movs	r3, #5
    7040:	08db      	lsrs	r3, r3, #3
    7042:	2cff      	cmp	r4, #255	; 0xff
    7044:	d003      	beq.n	704e <__aeabi_d2f+0x96>
    7046:	025b      	lsls	r3, r3, #9
    7048:	0a5b      	lsrs	r3, r3, #9
    704a:	b2e4      	uxtb	r4, r4
    704c:	e7e4      	b.n	7018 <__aeabi_d2f+0x60>
    704e:	2b00      	cmp	r3, #0
    7050:	d032      	beq.n	70b8 <__aeabi_d2f+0x100>
    7052:	2080      	movs	r0, #128	; 0x80
    7054:	03c0      	lsls	r0, r0, #15
    7056:	4303      	orrs	r3, r0
    7058:	025b      	lsls	r3, r3, #9
    705a:	0a5b      	lsrs	r3, r3, #9
    705c:	e7dc      	b.n	7018 <__aeabi_d2f+0x60>
    705e:	0032      	movs	r2, r6
    7060:	3217      	adds	r2, #23
    7062:	db14      	blt.n	708e <__aeabi_d2f+0xd6>
    7064:	2280      	movs	r2, #128	; 0x80
    7066:	271e      	movs	r7, #30
    7068:	0412      	lsls	r2, r2, #16
    706a:	4313      	orrs	r3, r2
    706c:	1bbf      	subs	r7, r7, r6
    706e:	2f1f      	cmp	r7, #31
    7070:	dc0f      	bgt.n	7092 <__aeabi_d2f+0xda>
    7072:	4a14      	ldr	r2, [pc, #80]	; (70c4 <__aeabi_d2f+0x10c>)
    7074:	4694      	mov	ip, r2
    7076:	4464      	add	r4, ip
    7078:	002a      	movs	r2, r5
    707a:	40a5      	lsls	r5, r4
    707c:	002e      	movs	r6, r5
    707e:	40a3      	lsls	r3, r4
    7080:	1e75      	subs	r5, r6, #1
    7082:	41ae      	sbcs	r6, r5
    7084:	40fa      	lsrs	r2, r7
    7086:	4333      	orrs	r3, r6
    7088:	4313      	orrs	r3, r2
    708a:	2600      	movs	r6, #0
    708c:	e7b0      	b.n	6ff0 <__aeabi_d2f+0x38>
    708e:	2400      	movs	r4, #0
    7090:	e7d5      	b.n	703e <__aeabi_d2f+0x86>
    7092:	2202      	movs	r2, #2
    7094:	4252      	negs	r2, r2
    7096:	1b96      	subs	r6, r2, r6
    7098:	001a      	movs	r2, r3
    709a:	40f2      	lsrs	r2, r6
    709c:	2f20      	cmp	r7, #32
    709e:	d009      	beq.n	70b4 <__aeabi_d2f+0xfc>
    70a0:	4809      	ldr	r0, [pc, #36]	; (70c8 <__aeabi_d2f+0x110>)
    70a2:	4684      	mov	ip, r0
    70a4:	4464      	add	r4, ip
    70a6:	40a3      	lsls	r3, r4
    70a8:	432b      	orrs	r3, r5
    70aa:	1e5d      	subs	r5, r3, #1
    70ac:	41ab      	sbcs	r3, r5
    70ae:	2600      	movs	r6, #0
    70b0:	4313      	orrs	r3, r2
    70b2:	e79d      	b.n	6ff0 <__aeabi_d2f+0x38>
    70b4:	2300      	movs	r3, #0
    70b6:	e7f7      	b.n	70a8 <__aeabi_d2f+0xf0>
    70b8:	2300      	movs	r3, #0
    70ba:	e7ad      	b.n	7018 <__aeabi_d2f+0x60>
    70bc:	0034      	movs	r4, r6
    70be:	e7bf      	b.n	7040 <__aeabi_d2f+0x88>
    70c0:	fffffc80 	.word	0xfffffc80
    70c4:	fffffc82 	.word	0xfffffc82
    70c8:	fffffca2 	.word	0xfffffca2

000070cc <__aeabi_cdrcmple>:
    70cc:	4684      	mov	ip, r0
    70ce:	1c10      	adds	r0, r2, #0
    70d0:	4662      	mov	r2, ip
    70d2:	468c      	mov	ip, r1
    70d4:	1c19      	adds	r1, r3, #0
    70d6:	4663      	mov	r3, ip
    70d8:	e000      	b.n	70dc <__aeabi_cdcmpeq>
    70da:	46c0      	nop			; (mov r8, r8)

000070dc <__aeabi_cdcmpeq>:
    70dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    70de:	f000 f91b 	bl	7318 <__ledf2>
    70e2:	2800      	cmp	r0, #0
    70e4:	d401      	bmi.n	70ea <__aeabi_cdcmpeq+0xe>
    70e6:	2100      	movs	r1, #0
    70e8:	42c8      	cmn	r0, r1
    70ea:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000070ec <__aeabi_dcmpeq>:
    70ec:	b510      	push	{r4, lr}
    70ee:	f000 f875 	bl	71dc <__eqdf2>
    70f2:	4240      	negs	r0, r0
    70f4:	3001      	adds	r0, #1
    70f6:	bd10      	pop	{r4, pc}

000070f8 <__aeabi_dcmplt>:
    70f8:	b510      	push	{r4, lr}
    70fa:	f000 f90d 	bl	7318 <__ledf2>
    70fe:	2800      	cmp	r0, #0
    7100:	db01      	blt.n	7106 <__aeabi_dcmplt+0xe>
    7102:	2000      	movs	r0, #0
    7104:	bd10      	pop	{r4, pc}
    7106:	2001      	movs	r0, #1
    7108:	bd10      	pop	{r4, pc}
    710a:	46c0      	nop			; (mov r8, r8)

0000710c <__aeabi_dcmple>:
    710c:	b510      	push	{r4, lr}
    710e:	f000 f903 	bl	7318 <__ledf2>
    7112:	2800      	cmp	r0, #0
    7114:	dd01      	ble.n	711a <__aeabi_dcmple+0xe>
    7116:	2000      	movs	r0, #0
    7118:	bd10      	pop	{r4, pc}
    711a:	2001      	movs	r0, #1
    711c:	bd10      	pop	{r4, pc}
    711e:	46c0      	nop			; (mov r8, r8)

00007120 <__aeabi_dcmpgt>:
    7120:	b510      	push	{r4, lr}
    7122:	f000 f895 	bl	7250 <__gedf2>
    7126:	2800      	cmp	r0, #0
    7128:	dc01      	bgt.n	712e <__aeabi_dcmpgt+0xe>
    712a:	2000      	movs	r0, #0
    712c:	bd10      	pop	{r4, pc}
    712e:	2001      	movs	r0, #1
    7130:	bd10      	pop	{r4, pc}
    7132:	46c0      	nop			; (mov r8, r8)

00007134 <__aeabi_dcmpge>:
    7134:	b510      	push	{r4, lr}
    7136:	f000 f88b 	bl	7250 <__gedf2>
    713a:	2800      	cmp	r0, #0
    713c:	da01      	bge.n	7142 <__aeabi_dcmpge+0xe>
    713e:	2000      	movs	r0, #0
    7140:	bd10      	pop	{r4, pc}
    7142:	2001      	movs	r0, #1
    7144:	bd10      	pop	{r4, pc}
    7146:	46c0      	nop			; (mov r8, r8)

00007148 <__clzsi2>:
    7148:	211c      	movs	r1, #28
    714a:	2301      	movs	r3, #1
    714c:	041b      	lsls	r3, r3, #16
    714e:	4298      	cmp	r0, r3
    7150:	d301      	bcc.n	7156 <__clzsi2+0xe>
    7152:	0c00      	lsrs	r0, r0, #16
    7154:	3910      	subs	r1, #16
    7156:	0a1b      	lsrs	r3, r3, #8
    7158:	4298      	cmp	r0, r3
    715a:	d301      	bcc.n	7160 <__clzsi2+0x18>
    715c:	0a00      	lsrs	r0, r0, #8
    715e:	3908      	subs	r1, #8
    7160:	091b      	lsrs	r3, r3, #4
    7162:	4298      	cmp	r0, r3
    7164:	d301      	bcc.n	716a <__clzsi2+0x22>
    7166:	0900      	lsrs	r0, r0, #4
    7168:	3904      	subs	r1, #4
    716a:	a202      	add	r2, pc, #8	; (adr r2, 7174 <__clzsi2+0x2c>)
    716c:	5c10      	ldrb	r0, [r2, r0]
    716e:	1840      	adds	r0, r0, r1
    7170:	4770      	bx	lr
    7172:	46c0      	nop			; (mov r8, r8)
    7174:	02020304 	.word	0x02020304
    7178:	01010101 	.word	0x01010101
	...

00007184 <__clzdi2>:
    7184:	b510      	push	{r4, lr}
    7186:	2900      	cmp	r1, #0
    7188:	d103      	bne.n	7192 <__clzdi2+0xe>
    718a:	f7ff ffdd 	bl	7148 <__clzsi2>
    718e:	3020      	adds	r0, #32
    7190:	e002      	b.n	7198 <__clzdi2+0x14>
    7192:	1c08      	adds	r0, r1, #0
    7194:	f7ff ffd8 	bl	7148 <__clzsi2>
    7198:	bd10      	pop	{r4, pc}
    719a:	46c0      	nop			; (mov r8, r8)

0000719c <__ctzsi2>:
    719c:	4241      	negs	r1, r0
    719e:	4008      	ands	r0, r1
    71a0:	211c      	movs	r1, #28
    71a2:	2301      	movs	r3, #1
    71a4:	041b      	lsls	r3, r3, #16
    71a6:	4298      	cmp	r0, r3
    71a8:	d301      	bcc.n	71ae <__ctzsi2+0x12>
    71aa:	0c00      	lsrs	r0, r0, #16
    71ac:	3910      	subs	r1, #16
    71ae:	0a1b      	lsrs	r3, r3, #8
    71b0:	4298      	cmp	r0, r3
    71b2:	d301      	bcc.n	71b8 <__ctzsi2+0x1c>
    71b4:	0a00      	lsrs	r0, r0, #8
    71b6:	3908      	subs	r1, #8
    71b8:	091b      	lsrs	r3, r3, #4
    71ba:	4298      	cmp	r0, r3
    71bc:	d301      	bcc.n	71c2 <__ctzsi2+0x26>
    71be:	0900      	lsrs	r0, r0, #4
    71c0:	3904      	subs	r1, #4
    71c2:	a202      	add	r2, pc, #8	; (adr r2, 71cc <__ctzsi2+0x30>)
    71c4:	5c10      	ldrb	r0, [r2, r0]
    71c6:	1a40      	subs	r0, r0, r1
    71c8:	4770      	bx	lr
    71ca:	46c0      	nop			; (mov r8, r8)
    71cc:	1d1d1c1b 	.word	0x1d1d1c1b
    71d0:	1e1e1e1e 	.word	0x1e1e1e1e
    71d4:	1f1f1f1f 	.word	0x1f1f1f1f
    71d8:	1f1f1f1f 	.word	0x1f1f1f1f

000071dc <__eqdf2>:
    71dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    71de:	464f      	mov	r7, r9
    71e0:	4646      	mov	r6, r8
    71e2:	46d6      	mov	lr, sl
    71e4:	005c      	lsls	r4, r3, #1
    71e6:	b5c0      	push	{r6, r7, lr}
    71e8:	031f      	lsls	r7, r3, #12
    71ea:	0fdb      	lsrs	r3, r3, #31
    71ec:	469a      	mov	sl, r3
    71ee:	4b17      	ldr	r3, [pc, #92]	; (724c <__eqdf2+0x70>)
    71f0:	030e      	lsls	r6, r1, #12
    71f2:	004d      	lsls	r5, r1, #1
    71f4:	4684      	mov	ip, r0
    71f6:	4680      	mov	r8, r0
    71f8:	0b36      	lsrs	r6, r6, #12
    71fa:	0d6d      	lsrs	r5, r5, #21
    71fc:	0fc9      	lsrs	r1, r1, #31
    71fe:	4691      	mov	r9, r2
    7200:	0b3f      	lsrs	r7, r7, #12
    7202:	0d64      	lsrs	r4, r4, #21
    7204:	2001      	movs	r0, #1
    7206:	429d      	cmp	r5, r3
    7208:	d008      	beq.n	721c <__eqdf2+0x40>
    720a:	429c      	cmp	r4, r3
    720c:	d001      	beq.n	7212 <__eqdf2+0x36>
    720e:	42a5      	cmp	r5, r4
    7210:	d00b      	beq.n	722a <__eqdf2+0x4e>
    7212:	bc1c      	pop	{r2, r3, r4}
    7214:	4690      	mov	r8, r2
    7216:	4699      	mov	r9, r3
    7218:	46a2      	mov	sl, r4
    721a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    721c:	4663      	mov	r3, ip
    721e:	4333      	orrs	r3, r6
    7220:	d1f7      	bne.n	7212 <__eqdf2+0x36>
    7222:	42ac      	cmp	r4, r5
    7224:	d1f5      	bne.n	7212 <__eqdf2+0x36>
    7226:	433a      	orrs	r2, r7
    7228:	d1f3      	bne.n	7212 <__eqdf2+0x36>
    722a:	2001      	movs	r0, #1
    722c:	42be      	cmp	r6, r7
    722e:	d1f0      	bne.n	7212 <__eqdf2+0x36>
    7230:	45c8      	cmp	r8, r9
    7232:	d1ee      	bne.n	7212 <__eqdf2+0x36>
    7234:	4551      	cmp	r1, sl
    7236:	d007      	beq.n	7248 <__eqdf2+0x6c>
    7238:	2d00      	cmp	r5, #0
    723a:	d1ea      	bne.n	7212 <__eqdf2+0x36>
    723c:	4663      	mov	r3, ip
    723e:	431e      	orrs	r6, r3
    7240:	0030      	movs	r0, r6
    7242:	1e46      	subs	r6, r0, #1
    7244:	41b0      	sbcs	r0, r6
    7246:	e7e4      	b.n	7212 <__eqdf2+0x36>
    7248:	2000      	movs	r0, #0
    724a:	e7e2      	b.n	7212 <__eqdf2+0x36>
    724c:	000007ff 	.word	0x000007ff

00007250 <__gedf2>:
    7250:	b5f0      	push	{r4, r5, r6, r7, lr}
    7252:	4645      	mov	r5, r8
    7254:	46de      	mov	lr, fp
    7256:	4657      	mov	r7, sl
    7258:	464e      	mov	r6, r9
    725a:	b5e0      	push	{r5, r6, r7, lr}
    725c:	031f      	lsls	r7, r3, #12
    725e:	0b3d      	lsrs	r5, r7, #12
    7260:	4f2c      	ldr	r7, [pc, #176]	; (7314 <__gedf2+0xc4>)
    7262:	030e      	lsls	r6, r1, #12
    7264:	004c      	lsls	r4, r1, #1
    7266:	46ab      	mov	fp, r5
    7268:	005d      	lsls	r5, r3, #1
    726a:	4684      	mov	ip, r0
    726c:	0b36      	lsrs	r6, r6, #12
    726e:	0d64      	lsrs	r4, r4, #21
    7270:	0fc9      	lsrs	r1, r1, #31
    7272:	4690      	mov	r8, r2
    7274:	0d6d      	lsrs	r5, r5, #21
    7276:	0fdb      	lsrs	r3, r3, #31
    7278:	42bc      	cmp	r4, r7
    727a:	d02a      	beq.n	72d2 <__gedf2+0x82>
    727c:	4f25      	ldr	r7, [pc, #148]	; (7314 <__gedf2+0xc4>)
    727e:	42bd      	cmp	r5, r7
    7280:	d02d      	beq.n	72de <__gedf2+0x8e>
    7282:	2c00      	cmp	r4, #0
    7284:	d10f      	bne.n	72a6 <__gedf2+0x56>
    7286:	4330      	orrs	r0, r6
    7288:	0007      	movs	r7, r0
    728a:	4681      	mov	r9, r0
    728c:	4278      	negs	r0, r7
    728e:	4178      	adcs	r0, r7
    7290:	b2c0      	uxtb	r0, r0
    7292:	2d00      	cmp	r5, #0
    7294:	d117      	bne.n	72c6 <__gedf2+0x76>
    7296:	465f      	mov	r7, fp
    7298:	433a      	orrs	r2, r7
    729a:	d114      	bne.n	72c6 <__gedf2+0x76>
    729c:	464b      	mov	r3, r9
    729e:	2000      	movs	r0, #0
    72a0:	2b00      	cmp	r3, #0
    72a2:	d00a      	beq.n	72ba <__gedf2+0x6a>
    72a4:	e006      	b.n	72b4 <__gedf2+0x64>
    72a6:	2d00      	cmp	r5, #0
    72a8:	d102      	bne.n	72b0 <__gedf2+0x60>
    72aa:	4658      	mov	r0, fp
    72ac:	4302      	orrs	r2, r0
    72ae:	d001      	beq.n	72b4 <__gedf2+0x64>
    72b0:	4299      	cmp	r1, r3
    72b2:	d018      	beq.n	72e6 <__gedf2+0x96>
    72b4:	4248      	negs	r0, r1
    72b6:	2101      	movs	r1, #1
    72b8:	4308      	orrs	r0, r1
    72ba:	bc3c      	pop	{r2, r3, r4, r5}
    72bc:	4690      	mov	r8, r2
    72be:	4699      	mov	r9, r3
    72c0:	46a2      	mov	sl, r4
    72c2:	46ab      	mov	fp, r5
    72c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72c6:	2800      	cmp	r0, #0
    72c8:	d0f2      	beq.n	72b0 <__gedf2+0x60>
    72ca:	2001      	movs	r0, #1
    72cc:	3b01      	subs	r3, #1
    72ce:	4318      	orrs	r0, r3
    72d0:	e7f3      	b.n	72ba <__gedf2+0x6a>
    72d2:	0037      	movs	r7, r6
    72d4:	4307      	orrs	r7, r0
    72d6:	d0d1      	beq.n	727c <__gedf2+0x2c>
    72d8:	2002      	movs	r0, #2
    72da:	4240      	negs	r0, r0
    72dc:	e7ed      	b.n	72ba <__gedf2+0x6a>
    72de:	465f      	mov	r7, fp
    72e0:	4317      	orrs	r7, r2
    72e2:	d0ce      	beq.n	7282 <__gedf2+0x32>
    72e4:	e7f8      	b.n	72d8 <__gedf2+0x88>
    72e6:	42ac      	cmp	r4, r5
    72e8:	dce4      	bgt.n	72b4 <__gedf2+0x64>
    72ea:	da03      	bge.n	72f4 <__gedf2+0xa4>
    72ec:	1e48      	subs	r0, r1, #1
    72ee:	2101      	movs	r1, #1
    72f0:	4308      	orrs	r0, r1
    72f2:	e7e2      	b.n	72ba <__gedf2+0x6a>
    72f4:	455e      	cmp	r6, fp
    72f6:	d8dd      	bhi.n	72b4 <__gedf2+0x64>
    72f8:	d006      	beq.n	7308 <__gedf2+0xb8>
    72fa:	2000      	movs	r0, #0
    72fc:	455e      	cmp	r6, fp
    72fe:	d2dc      	bcs.n	72ba <__gedf2+0x6a>
    7300:	2301      	movs	r3, #1
    7302:	1e48      	subs	r0, r1, #1
    7304:	4318      	orrs	r0, r3
    7306:	e7d8      	b.n	72ba <__gedf2+0x6a>
    7308:	45c4      	cmp	ip, r8
    730a:	d8d3      	bhi.n	72b4 <__gedf2+0x64>
    730c:	2000      	movs	r0, #0
    730e:	45c4      	cmp	ip, r8
    7310:	d3f6      	bcc.n	7300 <__gedf2+0xb0>
    7312:	e7d2      	b.n	72ba <__gedf2+0x6a>
    7314:	000007ff 	.word	0x000007ff

00007318 <__ledf2>:
    7318:	b5f0      	push	{r4, r5, r6, r7, lr}
    731a:	464e      	mov	r6, r9
    731c:	4645      	mov	r5, r8
    731e:	46de      	mov	lr, fp
    7320:	4657      	mov	r7, sl
    7322:	005c      	lsls	r4, r3, #1
    7324:	b5e0      	push	{r5, r6, r7, lr}
    7326:	031f      	lsls	r7, r3, #12
    7328:	0fdb      	lsrs	r3, r3, #31
    732a:	4699      	mov	r9, r3
    732c:	4b2a      	ldr	r3, [pc, #168]	; (73d8 <__ledf2+0xc0>)
    732e:	030e      	lsls	r6, r1, #12
    7330:	004d      	lsls	r5, r1, #1
    7332:	0fc9      	lsrs	r1, r1, #31
    7334:	4684      	mov	ip, r0
    7336:	0b36      	lsrs	r6, r6, #12
    7338:	0d6d      	lsrs	r5, r5, #21
    733a:	468b      	mov	fp, r1
    733c:	4690      	mov	r8, r2
    733e:	0b3f      	lsrs	r7, r7, #12
    7340:	0d64      	lsrs	r4, r4, #21
    7342:	429d      	cmp	r5, r3
    7344:	d020      	beq.n	7388 <__ledf2+0x70>
    7346:	4b24      	ldr	r3, [pc, #144]	; (73d8 <__ledf2+0xc0>)
    7348:	429c      	cmp	r4, r3
    734a:	d022      	beq.n	7392 <__ledf2+0x7a>
    734c:	2d00      	cmp	r5, #0
    734e:	d112      	bne.n	7376 <__ledf2+0x5e>
    7350:	4330      	orrs	r0, r6
    7352:	4243      	negs	r3, r0
    7354:	4143      	adcs	r3, r0
    7356:	b2db      	uxtb	r3, r3
    7358:	2c00      	cmp	r4, #0
    735a:	d01f      	beq.n	739c <__ledf2+0x84>
    735c:	2b00      	cmp	r3, #0
    735e:	d00c      	beq.n	737a <__ledf2+0x62>
    7360:	464b      	mov	r3, r9
    7362:	2001      	movs	r0, #1
    7364:	3b01      	subs	r3, #1
    7366:	4303      	orrs	r3, r0
    7368:	0018      	movs	r0, r3
    736a:	bc3c      	pop	{r2, r3, r4, r5}
    736c:	4690      	mov	r8, r2
    736e:	4699      	mov	r9, r3
    7370:	46a2      	mov	sl, r4
    7372:	46ab      	mov	fp, r5
    7374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7376:	2c00      	cmp	r4, #0
    7378:	d016      	beq.n	73a8 <__ledf2+0x90>
    737a:	45cb      	cmp	fp, r9
    737c:	d017      	beq.n	73ae <__ledf2+0x96>
    737e:	465b      	mov	r3, fp
    7380:	4259      	negs	r1, r3
    7382:	2301      	movs	r3, #1
    7384:	430b      	orrs	r3, r1
    7386:	e7ef      	b.n	7368 <__ledf2+0x50>
    7388:	0031      	movs	r1, r6
    738a:	2302      	movs	r3, #2
    738c:	4301      	orrs	r1, r0
    738e:	d1eb      	bne.n	7368 <__ledf2+0x50>
    7390:	e7d9      	b.n	7346 <__ledf2+0x2e>
    7392:	0039      	movs	r1, r7
    7394:	2302      	movs	r3, #2
    7396:	4311      	orrs	r1, r2
    7398:	d1e6      	bne.n	7368 <__ledf2+0x50>
    739a:	e7d7      	b.n	734c <__ledf2+0x34>
    739c:	433a      	orrs	r2, r7
    739e:	d1dd      	bne.n	735c <__ledf2+0x44>
    73a0:	2300      	movs	r3, #0
    73a2:	2800      	cmp	r0, #0
    73a4:	d0e0      	beq.n	7368 <__ledf2+0x50>
    73a6:	e7ea      	b.n	737e <__ledf2+0x66>
    73a8:	433a      	orrs	r2, r7
    73aa:	d1e6      	bne.n	737a <__ledf2+0x62>
    73ac:	e7e7      	b.n	737e <__ledf2+0x66>
    73ae:	42a5      	cmp	r5, r4
    73b0:	dce5      	bgt.n	737e <__ledf2+0x66>
    73b2:	db05      	blt.n	73c0 <__ledf2+0xa8>
    73b4:	42be      	cmp	r6, r7
    73b6:	d8e2      	bhi.n	737e <__ledf2+0x66>
    73b8:	d007      	beq.n	73ca <__ledf2+0xb2>
    73ba:	2300      	movs	r3, #0
    73bc:	42be      	cmp	r6, r7
    73be:	d2d3      	bcs.n	7368 <__ledf2+0x50>
    73c0:	4659      	mov	r1, fp
    73c2:	2301      	movs	r3, #1
    73c4:	3901      	subs	r1, #1
    73c6:	430b      	orrs	r3, r1
    73c8:	e7ce      	b.n	7368 <__ledf2+0x50>
    73ca:	45c4      	cmp	ip, r8
    73cc:	d8d7      	bhi.n	737e <__ledf2+0x66>
    73ce:	2300      	movs	r3, #0
    73d0:	45c4      	cmp	ip, r8
    73d2:	d3f5      	bcc.n	73c0 <__ledf2+0xa8>
    73d4:	e7c8      	b.n	7368 <__ledf2+0x50>
    73d6:	46c0      	nop			; (mov r8, r8)
    73d8:	000007ff 	.word	0x000007ff

000073dc <__libc_init_array>:
    73dc:	b570      	push	{r4, r5, r6, lr}
    73de:	4e0d      	ldr	r6, [pc, #52]	; (7414 <__libc_init_array+0x38>)
    73e0:	4d0d      	ldr	r5, [pc, #52]	; (7418 <__libc_init_array+0x3c>)
    73e2:	2400      	movs	r4, #0
    73e4:	1bad      	subs	r5, r5, r6
    73e6:	10ad      	asrs	r5, r5, #2
    73e8:	d005      	beq.n	73f6 <__libc_init_array+0x1a>
    73ea:	00a3      	lsls	r3, r4, #2
    73ec:	58f3      	ldr	r3, [r6, r3]
    73ee:	3401      	adds	r4, #1
    73f0:	4798      	blx	r3
    73f2:	42a5      	cmp	r5, r4
    73f4:	d1f9      	bne.n	73ea <__libc_init_array+0xe>
    73f6:	f00b f879 	bl	124ec <_init>
    73fa:	4e08      	ldr	r6, [pc, #32]	; (741c <__libc_init_array+0x40>)
    73fc:	4d08      	ldr	r5, [pc, #32]	; (7420 <__libc_init_array+0x44>)
    73fe:	2400      	movs	r4, #0
    7400:	1bad      	subs	r5, r5, r6
    7402:	10ad      	asrs	r5, r5, #2
    7404:	d005      	beq.n	7412 <__libc_init_array+0x36>
    7406:	00a3      	lsls	r3, r4, #2
    7408:	58f3      	ldr	r3, [r6, r3]
    740a:	3401      	adds	r4, #1
    740c:	4798      	blx	r3
    740e:	42a5      	cmp	r5, r4
    7410:	d1f9      	bne.n	7406 <__libc_init_array+0x2a>
    7412:	bd70      	pop	{r4, r5, r6, pc}
    7414:	000124f8 	.word	0x000124f8
    7418:	000124f8 	.word	0x000124f8
    741c:	000124f8 	.word	0x000124f8
    7420:	00012500 	.word	0x00012500

00007424 <memcmp>:
    7424:	b510      	push	{r4, lr}
    7426:	2a03      	cmp	r2, #3
    7428:	d91c      	bls.n	7464 <memcmp+0x40>
    742a:	0003      	movs	r3, r0
    742c:	430b      	orrs	r3, r1
    742e:	079b      	lsls	r3, r3, #30
    7430:	d00f      	beq.n	7452 <memcmp+0x2e>
    7432:	7803      	ldrb	r3, [r0, #0]
    7434:	780c      	ldrb	r4, [r1, #0]
    7436:	1882      	adds	r2, r0, r2
    7438:	42a3      	cmp	r3, r4
    743a:	d004      	beq.n	7446 <memcmp+0x22>
    743c:	e015      	b.n	746a <memcmp+0x46>
    743e:	7803      	ldrb	r3, [r0, #0]
    7440:	780c      	ldrb	r4, [r1, #0]
    7442:	42a3      	cmp	r3, r4
    7444:	d111      	bne.n	746a <memcmp+0x46>
    7446:	3001      	adds	r0, #1
    7448:	3101      	adds	r1, #1
    744a:	4282      	cmp	r2, r0
    744c:	d1f7      	bne.n	743e <memcmp+0x1a>
    744e:	2000      	movs	r0, #0
    7450:	bd10      	pop	{r4, pc}
    7452:	6803      	ldr	r3, [r0, #0]
    7454:	680c      	ldr	r4, [r1, #0]
    7456:	42a3      	cmp	r3, r4
    7458:	d1eb      	bne.n	7432 <memcmp+0xe>
    745a:	3a04      	subs	r2, #4
    745c:	3004      	adds	r0, #4
    745e:	3104      	adds	r1, #4
    7460:	2a03      	cmp	r2, #3
    7462:	d8f6      	bhi.n	7452 <memcmp+0x2e>
    7464:	2a00      	cmp	r2, #0
    7466:	d1e4      	bne.n	7432 <memcmp+0xe>
    7468:	e7f1      	b.n	744e <memcmp+0x2a>
    746a:	1b18      	subs	r0, r3, r4
    746c:	e7f0      	b.n	7450 <memcmp+0x2c>
    746e:	46c0      	nop			; (mov r8, r8)

00007470 <memcpy>:
    7470:	b5f0      	push	{r4, r5, r6, r7, lr}
    7472:	0005      	movs	r5, r0
    7474:	2a0f      	cmp	r2, #15
    7476:	d92f      	bls.n	74d8 <memcpy+0x68>
    7478:	000b      	movs	r3, r1
    747a:	4303      	orrs	r3, r0
    747c:	079b      	lsls	r3, r3, #30
    747e:	d134      	bne.n	74ea <memcpy+0x7a>
    7480:	0016      	movs	r6, r2
    7482:	000c      	movs	r4, r1
    7484:	0003      	movs	r3, r0
    7486:	3e10      	subs	r6, #16
    7488:	0935      	lsrs	r5, r6, #4
    748a:	3501      	adds	r5, #1
    748c:	012d      	lsls	r5, r5, #4
    748e:	1945      	adds	r5, r0, r5
    7490:	6827      	ldr	r7, [r4, #0]
    7492:	601f      	str	r7, [r3, #0]
    7494:	6867      	ldr	r7, [r4, #4]
    7496:	605f      	str	r7, [r3, #4]
    7498:	68a7      	ldr	r7, [r4, #8]
    749a:	609f      	str	r7, [r3, #8]
    749c:	68e7      	ldr	r7, [r4, #12]
    749e:	3410      	adds	r4, #16
    74a0:	60df      	str	r7, [r3, #12]
    74a2:	3310      	adds	r3, #16
    74a4:	429d      	cmp	r5, r3
    74a6:	d1f3      	bne.n	7490 <memcpy+0x20>
    74a8:	230f      	movs	r3, #15
    74aa:	439e      	bics	r6, r3
    74ac:	3610      	adds	r6, #16
    74ae:	1985      	adds	r5, r0, r6
    74b0:	1989      	adds	r1, r1, r6
    74b2:	4013      	ands	r3, r2
    74b4:	2b03      	cmp	r3, #3
    74b6:	d91a      	bls.n	74ee <memcpy+0x7e>
    74b8:	1f1e      	subs	r6, r3, #4
    74ba:	2300      	movs	r3, #0
    74bc:	08b4      	lsrs	r4, r6, #2
    74be:	3401      	adds	r4, #1
    74c0:	00a4      	lsls	r4, r4, #2
    74c2:	58cf      	ldr	r7, [r1, r3]
    74c4:	50ef      	str	r7, [r5, r3]
    74c6:	3304      	adds	r3, #4
    74c8:	42a3      	cmp	r3, r4
    74ca:	d1fa      	bne.n	74c2 <memcpy+0x52>
    74cc:	2403      	movs	r4, #3
    74ce:	43a6      	bics	r6, r4
    74d0:	1d33      	adds	r3, r6, #4
    74d2:	4022      	ands	r2, r4
    74d4:	18c9      	adds	r1, r1, r3
    74d6:	18ed      	adds	r5, r5, r3
    74d8:	2a00      	cmp	r2, #0
    74da:	d005      	beq.n	74e8 <memcpy+0x78>
    74dc:	2300      	movs	r3, #0
    74de:	5ccc      	ldrb	r4, [r1, r3]
    74e0:	54ec      	strb	r4, [r5, r3]
    74e2:	3301      	adds	r3, #1
    74e4:	4293      	cmp	r3, r2
    74e6:	d1fa      	bne.n	74de <memcpy+0x6e>
    74e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    74ea:	0005      	movs	r5, r0
    74ec:	e7f6      	b.n	74dc <memcpy+0x6c>
    74ee:	001a      	movs	r2, r3
    74f0:	e7f2      	b.n	74d8 <memcpy+0x68>
    74f2:	46c0      	nop			; (mov r8, r8)

000074f4 <memset>:
    74f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    74f6:	0783      	lsls	r3, r0, #30
    74f8:	d043      	beq.n	7582 <memset+0x8e>
    74fa:	1e54      	subs	r4, r2, #1
    74fc:	2a00      	cmp	r2, #0
    74fe:	d03f      	beq.n	7580 <memset+0x8c>
    7500:	b2ce      	uxtb	r6, r1
    7502:	0002      	movs	r2, r0
    7504:	2503      	movs	r5, #3
    7506:	e002      	b.n	750e <memset+0x1a>
    7508:	001a      	movs	r2, r3
    750a:	3c01      	subs	r4, #1
    750c:	d338      	bcc.n	7580 <memset+0x8c>
    750e:	1c53      	adds	r3, r2, #1
    7510:	7016      	strb	r6, [r2, #0]
    7512:	422b      	tst	r3, r5
    7514:	d1f8      	bne.n	7508 <memset+0x14>
    7516:	2c03      	cmp	r4, #3
    7518:	d92a      	bls.n	7570 <memset+0x7c>
    751a:	22ff      	movs	r2, #255	; 0xff
    751c:	400a      	ands	r2, r1
    751e:	0215      	lsls	r5, r2, #8
    7520:	4315      	orrs	r5, r2
    7522:	042a      	lsls	r2, r5, #16
    7524:	4315      	orrs	r5, r2
    7526:	2c0f      	cmp	r4, #15
    7528:	d914      	bls.n	7554 <memset+0x60>
    752a:	0027      	movs	r7, r4
    752c:	001a      	movs	r2, r3
    752e:	3f10      	subs	r7, #16
    7530:	093e      	lsrs	r6, r7, #4
    7532:	3601      	adds	r6, #1
    7534:	0136      	lsls	r6, r6, #4
    7536:	199e      	adds	r6, r3, r6
    7538:	6015      	str	r5, [r2, #0]
    753a:	6055      	str	r5, [r2, #4]
    753c:	6095      	str	r5, [r2, #8]
    753e:	60d5      	str	r5, [r2, #12]
    7540:	3210      	adds	r2, #16
    7542:	4296      	cmp	r6, r2
    7544:	d1f8      	bne.n	7538 <memset+0x44>
    7546:	220f      	movs	r2, #15
    7548:	4397      	bics	r7, r2
    754a:	3710      	adds	r7, #16
    754c:	19db      	adds	r3, r3, r7
    754e:	4014      	ands	r4, r2
    7550:	2c03      	cmp	r4, #3
    7552:	d90d      	bls.n	7570 <memset+0x7c>
    7554:	001a      	movs	r2, r3
    7556:	1f27      	subs	r7, r4, #4
    7558:	08be      	lsrs	r6, r7, #2
    755a:	3601      	adds	r6, #1
    755c:	00b6      	lsls	r6, r6, #2
    755e:	199e      	adds	r6, r3, r6
    7560:	c220      	stmia	r2!, {r5}
    7562:	42b2      	cmp	r2, r6
    7564:	d1fc      	bne.n	7560 <memset+0x6c>
    7566:	2203      	movs	r2, #3
    7568:	4397      	bics	r7, r2
    756a:	3704      	adds	r7, #4
    756c:	19db      	adds	r3, r3, r7
    756e:	4014      	ands	r4, r2
    7570:	2c00      	cmp	r4, #0
    7572:	d005      	beq.n	7580 <memset+0x8c>
    7574:	b2c9      	uxtb	r1, r1
    7576:	191c      	adds	r4, r3, r4
    7578:	7019      	strb	r1, [r3, #0]
    757a:	3301      	adds	r3, #1
    757c:	429c      	cmp	r4, r3
    757e:	d1fb      	bne.n	7578 <memset+0x84>
    7580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7582:	0014      	movs	r4, r2
    7584:	0003      	movs	r3, r0
    7586:	e7c6      	b.n	7516 <memset+0x22>

00007588 <snprintf>:
    7588:	b40c      	push	{r2, r3}
    758a:	b530      	push	{r4, r5, lr}
    758c:	4b1e      	ldr	r3, [pc, #120]	; (7608 <snprintf+0x80>)
    758e:	b09d      	sub	sp, #116	; 0x74
    7590:	681d      	ldr	r5, [r3, #0]
    7592:	2900      	cmp	r1, #0
    7594:	db33      	blt.n	75fe <snprintf+0x76>
    7596:	2382      	movs	r3, #130	; 0x82
    7598:	ac02      	add	r4, sp, #8
    759a:	009b      	lsls	r3, r3, #2
    759c:	81a3      	strh	r3, [r4, #12]
    759e:	9002      	str	r0, [sp, #8]
    75a0:	6120      	str	r0, [r4, #16]
    75a2:	2900      	cmp	r1, #0
    75a4:	d012      	beq.n	75cc <snprintf+0x44>
    75a6:	2301      	movs	r3, #1
    75a8:	3901      	subs	r1, #1
    75aa:	425b      	negs	r3, r3
    75ac:	60a1      	str	r1, [r4, #8]
    75ae:	6161      	str	r1, [r4, #20]
    75b0:	81e3      	strh	r3, [r4, #14]
    75b2:	9a20      	ldr	r2, [sp, #128]	; 0x80
    75b4:	ab21      	add	r3, sp, #132	; 0x84
    75b6:	0021      	movs	r1, r4
    75b8:	0028      	movs	r0, r5
    75ba:	9301      	str	r3, [sp, #4]
    75bc:	f000 fc44 	bl	7e48 <_svfprintf_r>
    75c0:	1c43      	adds	r3, r0, #1
    75c2:	db16      	blt.n	75f2 <snprintf+0x6a>
    75c4:	2300      	movs	r3, #0
    75c6:	9a02      	ldr	r2, [sp, #8]
    75c8:	7013      	strb	r3, [r2, #0]
    75ca:	e00d      	b.n	75e8 <snprintf+0x60>
    75cc:	2301      	movs	r3, #1
    75ce:	425b      	negs	r3, r3
    75d0:	60a1      	str	r1, [r4, #8]
    75d2:	6161      	str	r1, [r4, #20]
    75d4:	81e3      	strh	r3, [r4, #14]
    75d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
    75d8:	ab21      	add	r3, sp, #132	; 0x84
    75da:	0021      	movs	r1, r4
    75dc:	0028      	movs	r0, r5
    75de:	9301      	str	r3, [sp, #4]
    75e0:	f000 fc32 	bl	7e48 <_svfprintf_r>
    75e4:	1c43      	adds	r3, r0, #1
    75e6:	db07      	blt.n	75f8 <snprintf+0x70>
    75e8:	b01d      	add	sp, #116	; 0x74
    75ea:	bc30      	pop	{r4, r5}
    75ec:	bc08      	pop	{r3}
    75ee:	b002      	add	sp, #8
    75f0:	4718      	bx	r3
    75f2:	238b      	movs	r3, #139	; 0x8b
    75f4:	602b      	str	r3, [r5, #0]
    75f6:	e7e5      	b.n	75c4 <snprintf+0x3c>
    75f8:	238b      	movs	r3, #139	; 0x8b
    75fa:	602b      	str	r3, [r5, #0]
    75fc:	e7f4      	b.n	75e8 <snprintf+0x60>
    75fe:	238b      	movs	r3, #139	; 0x8b
    7600:	2001      	movs	r0, #1
    7602:	602b      	str	r3, [r5, #0]
    7604:	4240      	negs	r0, r0
    7606:	e7ef      	b.n	75e8 <snprintf+0x60>
    7608:	200000a0 	.word	0x200000a0

0000760c <sscanf>:
    760c:	b40e      	push	{r1, r2, r3}
    760e:	2381      	movs	r3, #129	; 0x81
    7610:	b570      	push	{r4, r5, r6, lr}
    7612:	b09d      	sub	sp, #116	; 0x74
    7614:	ac02      	add	r4, sp, #8
    7616:	ad21      	add	r5, sp, #132	; 0x84
    7618:	009b      	lsls	r3, r3, #2
    761a:	cd40      	ldmia	r5!, {r6}
    761c:	81a3      	strh	r3, [r4, #12]
    761e:	9002      	str	r0, [sp, #8]
    7620:	9006      	str	r0, [sp, #24]
    7622:	f000 f8cf 	bl	77c4 <strlen>
    7626:	4b0b      	ldr	r3, [pc, #44]	; (7654 <sscanf+0x48>)
    7628:	6060      	str	r0, [r4, #4]
    762a:	6223      	str	r3, [r4, #32]
    762c:	2300      	movs	r3, #0
    762e:	6323      	str	r3, [r4, #48]	; 0x30
    7630:	6463      	str	r3, [r4, #68]	; 0x44
    7632:	3b01      	subs	r3, #1
    7634:	81e3      	strh	r3, [r4, #14]
    7636:	4b08      	ldr	r3, [pc, #32]	; (7658 <sscanf+0x4c>)
    7638:	6160      	str	r0, [r4, #20]
    763a:	0032      	movs	r2, r6
    763c:	6818      	ldr	r0, [r3, #0]
    763e:	0021      	movs	r1, r4
    7640:	002b      	movs	r3, r5
    7642:	9501      	str	r5, [sp, #4]
    7644:	f001 ff04 	bl	9450 <__ssvfscanf_r>
    7648:	b01d      	add	sp, #116	; 0x74
    764a:	bc70      	pop	{r4, r5, r6}
    764c:	bc08      	pop	{r3}
    764e:	b003      	add	sp, #12
    7650:	4718      	bx	r3
    7652:	46c0      	nop			; (mov r8, r8)
    7654:	0000765d 	.word	0x0000765d
    7658:	200000a0 	.word	0x200000a0

0000765c <__seofread>:
    765c:	2000      	movs	r0, #0
    765e:	4770      	bx	lr

00007660 <strchr>:
    7660:	b570      	push	{r4, r5, r6, lr}
    7662:	b2cc      	uxtb	r4, r1
    7664:	2c00      	cmp	r4, #0
    7666:	d03b      	beq.n	76e0 <strchr+0x80>
    7668:	0783      	lsls	r3, r0, #30
    766a:	d00e      	beq.n	768a <strchr+0x2a>
    766c:	7803      	ldrb	r3, [r0, #0]
    766e:	2b00      	cmp	r3, #0
    7670:	d05b      	beq.n	772a <strchr+0xca>
    7672:	429c      	cmp	r4, r3
    7674:	d033      	beq.n	76de <strchr+0x7e>
    7676:	2203      	movs	r2, #3
    7678:	e004      	b.n	7684 <strchr+0x24>
    767a:	7803      	ldrb	r3, [r0, #0]
    767c:	2b00      	cmp	r3, #0
    767e:	d054      	beq.n	772a <strchr+0xca>
    7680:	429c      	cmp	r4, r3
    7682:	d02c      	beq.n	76de <strchr+0x7e>
    7684:	3001      	adds	r0, #1
    7686:	4210      	tst	r0, r2
    7688:	d1f7      	bne.n	767a <strchr+0x1a>
    768a:	25ff      	movs	r5, #255	; 0xff
    768c:	4029      	ands	r1, r5
    768e:	020d      	lsls	r5, r1, #8
    7690:	4329      	orrs	r1, r5
    7692:	040d      	lsls	r5, r1, #16
    7694:	430d      	orrs	r5, r1
    7696:	0029      	movs	r1, r5
    7698:	6802      	ldr	r2, [r0, #0]
    769a:	4b26      	ldr	r3, [pc, #152]	; (7734 <strchr+0xd4>)
    769c:	4051      	eors	r1, r2
    769e:	18d3      	adds	r3, r2, r3
    76a0:	4393      	bics	r3, r2
    76a2:	4a24      	ldr	r2, [pc, #144]	; (7734 <strchr+0xd4>)
    76a4:	4e24      	ldr	r6, [pc, #144]	; (7738 <strchr+0xd8>)
    76a6:	188a      	adds	r2, r1, r2
    76a8:	438a      	bics	r2, r1
    76aa:	4313      	orrs	r3, r2
    76ac:	4233      	tst	r3, r6
    76ae:	d10c      	bne.n	76ca <strchr+0x6a>
    76b0:	0029      	movs	r1, r5
    76b2:	3004      	adds	r0, #4
    76b4:	6802      	ldr	r2, [r0, #0]
    76b6:	4b1f      	ldr	r3, [pc, #124]	; (7734 <strchr+0xd4>)
    76b8:	4051      	eors	r1, r2
    76ba:	18d3      	adds	r3, r2, r3
    76bc:	4393      	bics	r3, r2
    76be:	4a1d      	ldr	r2, [pc, #116]	; (7734 <strchr+0xd4>)
    76c0:	188a      	adds	r2, r1, r2
    76c2:	438a      	bics	r2, r1
    76c4:	4313      	orrs	r3, r2
    76c6:	4233      	tst	r3, r6
    76c8:	d0f2      	beq.n	76b0 <strchr+0x50>
    76ca:	7803      	ldrb	r3, [r0, #0]
    76cc:	2b00      	cmp	r3, #0
    76ce:	d104      	bne.n	76da <strchr+0x7a>
    76d0:	e02b      	b.n	772a <strchr+0xca>
    76d2:	3001      	adds	r0, #1
    76d4:	7803      	ldrb	r3, [r0, #0]
    76d6:	2b00      	cmp	r3, #0
    76d8:	d027      	beq.n	772a <strchr+0xca>
    76da:	429c      	cmp	r4, r3
    76dc:	d1f9      	bne.n	76d2 <strchr+0x72>
    76de:	bd70      	pop	{r4, r5, r6, pc}
    76e0:	0783      	lsls	r3, r0, #30
    76e2:	d00a      	beq.n	76fa <strchr+0x9a>
    76e4:	7803      	ldrb	r3, [r0, #0]
    76e6:	2b00      	cmp	r3, #0
    76e8:	d0f9      	beq.n	76de <strchr+0x7e>
    76ea:	2203      	movs	r2, #3
    76ec:	e002      	b.n	76f4 <strchr+0x94>
    76ee:	7803      	ldrb	r3, [r0, #0]
    76f0:	2b00      	cmp	r3, #0
    76f2:	d0f4      	beq.n	76de <strchr+0x7e>
    76f4:	3001      	adds	r0, #1
    76f6:	4210      	tst	r0, r2
    76f8:	d1f9      	bne.n	76ee <strchr+0x8e>
    76fa:	6801      	ldr	r1, [r0, #0]
    76fc:	4a0d      	ldr	r2, [pc, #52]	; (7734 <strchr+0xd4>)
    76fe:	0003      	movs	r3, r0
    7700:	188a      	adds	r2, r1, r2
    7702:	480d      	ldr	r0, [pc, #52]	; (7738 <strchr+0xd8>)
    7704:	438a      	bics	r2, r1
    7706:	4202      	tst	r2, r0
    7708:	d106      	bne.n	7718 <strchr+0xb8>
    770a:	3304      	adds	r3, #4
    770c:	6819      	ldr	r1, [r3, #0]
    770e:	4a09      	ldr	r2, [pc, #36]	; (7734 <strchr+0xd4>)
    7710:	188a      	adds	r2, r1, r2
    7712:	438a      	bics	r2, r1
    7714:	4202      	tst	r2, r0
    7716:	d0f8      	beq.n	770a <strchr+0xaa>
    7718:	781a      	ldrb	r2, [r3, #0]
    771a:	0018      	movs	r0, r3
    771c:	2a00      	cmp	r2, #0
    771e:	d006      	beq.n	772e <strchr+0xce>
    7720:	3001      	adds	r0, #1
    7722:	7803      	ldrb	r3, [r0, #0]
    7724:	2b00      	cmp	r3, #0
    7726:	d1fb      	bne.n	7720 <strchr+0xc0>
    7728:	e7d9      	b.n	76de <strchr+0x7e>
    772a:	2000      	movs	r0, #0
    772c:	e7d7      	b.n	76de <strchr+0x7e>
    772e:	0018      	movs	r0, r3
    7730:	e7d5      	b.n	76de <strchr+0x7e>
    7732:	46c0      	nop			; (mov r8, r8)
    7734:	fefefeff 	.word	0xfefefeff
    7738:	80808080 	.word	0x80808080

0000773c <strcmp>:
    773c:	4602      	mov	r2, r0
    773e:	b570      	push	{r4, r5, r6, lr}
    7740:	430a      	orrs	r2, r1
    7742:	0792      	lsls	r2, r2, #30
    7744:	d12a      	bne.n	779c <strcmp+0x60>
    7746:	4d1e      	ldr	r5, [pc, #120]	; (77c0 <strcmp+0x84>)
    7748:	01ee      	lsls	r6, r5, #7
    774a:	c804      	ldmia	r0!, {r2}
    774c:	c908      	ldmia	r1!, {r3}
    774e:	1b54      	subs	r4, r2, r5
    7750:	4394      	bics	r4, r2
    7752:	4034      	ands	r4, r6
    7754:	d017      	beq.n	7786 <strcmp+0x4a>
    7756:	b2d0      	uxtb	r0, r2
    7758:	b2d9      	uxtb	r1, r3
    775a:	1a40      	subs	r0, r0, r1
    775c:	0621      	lsls	r1, r4, #24
    775e:	4301      	orrs	r1, r0
    7760:	d110      	bne.n	7784 <strcmp+0x48>
    7762:	b290      	uxth	r0, r2
    7764:	b299      	uxth	r1, r3
    7766:	1a40      	subs	r0, r0, r1
    7768:	0421      	lsls	r1, r4, #16
    776a:	4301      	orrs	r1, r0
    776c:	d10a      	bne.n	7784 <strcmp+0x48>
    776e:	0210      	lsls	r0, r2, #8
    7770:	0219      	lsls	r1, r3, #8
    7772:	0a00      	lsrs	r0, r0, #8
    7774:	0a09      	lsrs	r1, r1, #8
    7776:	1a40      	subs	r0, r0, r1
    7778:	0221      	lsls	r1, r4, #8
    777a:	4301      	orrs	r1, r0
    777c:	d102      	bne.n	7784 <strcmp+0x48>
    777e:	0e10      	lsrs	r0, r2, #24
    7780:	0e19      	lsrs	r1, r3, #24
    7782:	1a40      	subs	r0, r0, r1
    7784:	bd70      	pop	{r4, r5, r6, pc}
    7786:	429a      	cmp	r2, r3
    7788:	d0df      	beq.n	774a <strcmp+0xe>
    778a:	ba10      	rev	r0, r2
    778c:	ba19      	rev	r1, r3
    778e:	4288      	cmp	r0, r1
    7790:	d901      	bls.n	7796 <strcmp+0x5a>
    7792:	2001      	movs	r0, #1
    7794:	bd70      	pop	{r4, r5, r6, pc}
    7796:	2000      	movs	r0, #0
    7798:	43c0      	mvns	r0, r0
    779a:	bd70      	pop	{r4, r5, r6, pc}
    779c:	7802      	ldrb	r2, [r0, #0]
    779e:	780b      	ldrb	r3, [r1, #0]
    77a0:	3001      	adds	r0, #1
    77a2:	3101      	adds	r1, #1
    77a4:	2a00      	cmp	r2, #0
    77a6:	d009      	beq.n	77bc <strcmp+0x80>
    77a8:	429a      	cmp	r2, r3
    77aa:	d107      	bne.n	77bc <strcmp+0x80>
    77ac:	7802      	ldrb	r2, [r0, #0]
    77ae:	780b      	ldrb	r3, [r1, #0]
    77b0:	3001      	adds	r0, #1
    77b2:	3101      	adds	r1, #1
    77b4:	2a00      	cmp	r2, #0
    77b6:	d001      	beq.n	77bc <strcmp+0x80>
    77b8:	429a      	cmp	r2, r3
    77ba:	d0ef      	beq.n	779c <strcmp+0x60>
    77bc:	1ad0      	subs	r0, r2, r3
    77be:	bd70      	pop	{r4, r5, r6, pc}
    77c0:	01010101 	.word	0x01010101

000077c4 <strlen>:
    77c4:	b510      	push	{r4, lr}
    77c6:	0783      	lsls	r3, r0, #30
    77c8:	d025      	beq.n	7816 <strlen+0x52>
    77ca:	7803      	ldrb	r3, [r0, #0]
    77cc:	2b00      	cmp	r3, #0
    77ce:	d024      	beq.n	781a <strlen+0x56>
    77d0:	0003      	movs	r3, r0
    77d2:	2103      	movs	r1, #3
    77d4:	e002      	b.n	77dc <strlen+0x18>
    77d6:	781a      	ldrb	r2, [r3, #0]
    77d8:	2a00      	cmp	r2, #0
    77da:	d01a      	beq.n	7812 <strlen+0x4e>
    77dc:	3301      	adds	r3, #1
    77de:	420b      	tst	r3, r1
    77e0:	d1f9      	bne.n	77d6 <strlen+0x12>
    77e2:	6819      	ldr	r1, [r3, #0]
    77e4:	4a0e      	ldr	r2, [pc, #56]	; (7820 <strlen+0x5c>)
    77e6:	4c0f      	ldr	r4, [pc, #60]	; (7824 <strlen+0x60>)
    77e8:	188a      	adds	r2, r1, r2
    77ea:	438a      	bics	r2, r1
    77ec:	4222      	tst	r2, r4
    77ee:	d106      	bne.n	77fe <strlen+0x3a>
    77f0:	3304      	adds	r3, #4
    77f2:	6819      	ldr	r1, [r3, #0]
    77f4:	4a0a      	ldr	r2, [pc, #40]	; (7820 <strlen+0x5c>)
    77f6:	188a      	adds	r2, r1, r2
    77f8:	438a      	bics	r2, r1
    77fa:	4222      	tst	r2, r4
    77fc:	d0f8      	beq.n	77f0 <strlen+0x2c>
    77fe:	001a      	movs	r2, r3
    7800:	781b      	ldrb	r3, [r3, #0]
    7802:	2b00      	cmp	r3, #0
    7804:	d003      	beq.n	780e <strlen+0x4a>
    7806:	3201      	adds	r2, #1
    7808:	7811      	ldrb	r1, [r2, #0]
    780a:	2900      	cmp	r1, #0
    780c:	d1fb      	bne.n	7806 <strlen+0x42>
    780e:	1a10      	subs	r0, r2, r0
    7810:	bd10      	pop	{r4, pc}
    7812:	1a18      	subs	r0, r3, r0
    7814:	e7fc      	b.n	7810 <strlen+0x4c>
    7816:	0003      	movs	r3, r0
    7818:	e7e3      	b.n	77e2 <strlen+0x1e>
    781a:	2000      	movs	r0, #0
    781c:	e7f8      	b.n	7810 <strlen+0x4c>
    781e:	46c0      	nop			; (mov r8, r8)
    7820:	fefefeff 	.word	0xfefefeff
    7824:	80808080 	.word	0x80808080

00007828 <critical_factorization>:
    7828:	2301      	movs	r3, #1
    782a:	b5f0      	push	{r4, r5, r6, r7, lr}
    782c:	4647      	mov	r7, r8
    782e:	46ce      	mov	lr, r9
    7830:	4694      	mov	ip, r2
    7832:	2201      	movs	r2, #1
    7834:	4698      	mov	r8, r3
    7836:	2401      	movs	r4, #1
    7838:	2500      	movs	r5, #0
    783a:	b580      	push	{r7, lr}
    783c:	4252      	negs	r2, r2
    783e:	192b      	adds	r3, r5, r4
    7840:	428b      	cmp	r3, r1
    7842:	d20b      	bcs.n	785c <critical_factorization+0x34>
    7844:	1886      	adds	r6, r0, r2
    7846:	5cc7      	ldrb	r7, [r0, r3]
    7848:	5d36      	ldrb	r6, [r6, r4]
    784a:	42b7      	cmp	r7, r6
    784c:	d22d      	bcs.n	78aa <critical_factorization+0x82>
    784e:	1a9c      	subs	r4, r3, r2
    7850:	46a0      	mov	r8, r4
    7852:	001d      	movs	r5, r3
    7854:	2401      	movs	r4, #1
    7856:	192b      	adds	r3, r5, r4
    7858:	428b      	cmp	r3, r1
    785a:	d3f3      	bcc.n	7844 <critical_factorization+0x1c>
    785c:	4644      	mov	r4, r8
    785e:	4663      	mov	r3, ip
    7860:	601c      	str	r4, [r3, #0]
    7862:	2301      	movs	r3, #1
    7864:	4699      	mov	r9, r3
    7866:	3b02      	subs	r3, #2
    7868:	2401      	movs	r4, #1
    786a:	2500      	movs	r5, #0
    786c:	4698      	mov	r8, r3
    786e:	192b      	adds	r3, r5, r4
    7870:	4299      	cmp	r1, r3
    7872:	d90d      	bls.n	7890 <critical_factorization+0x68>
    7874:	4646      	mov	r6, r8
    7876:	1986      	adds	r6, r0, r6
    7878:	5cc7      	ldrb	r7, [r0, r3]
    787a:	5d36      	ldrb	r6, [r6, r4]
    787c:	42b7      	cmp	r7, r6
    787e:	d91c      	bls.n	78ba <critical_factorization+0x92>
    7880:	4644      	mov	r4, r8
    7882:	1b1c      	subs	r4, r3, r4
    7884:	46a1      	mov	r9, r4
    7886:	001d      	movs	r5, r3
    7888:	2401      	movs	r4, #1
    788a:	192b      	adds	r3, r5, r4
    788c:	4299      	cmp	r1, r3
    788e:	d8f1      	bhi.n	7874 <critical_factorization+0x4c>
    7890:	4643      	mov	r3, r8
    7892:	1c50      	adds	r0, r2, #1
    7894:	3301      	adds	r3, #1
    7896:	4283      	cmp	r3, r0
    7898:	d303      	bcc.n	78a2 <critical_factorization+0x7a>
    789a:	4662      	mov	r2, ip
    789c:	4649      	mov	r1, r9
    789e:	0018      	movs	r0, r3
    78a0:	6011      	str	r1, [r2, #0]
    78a2:	bc0c      	pop	{r2, r3}
    78a4:	4690      	mov	r8, r2
    78a6:	4699      	mov	r9, r3
    78a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    78aa:	42b7      	cmp	r7, r6
    78ac:	d00d      	beq.n	78ca <critical_factorization+0xa2>
    78ae:	2301      	movs	r3, #1
    78b0:	002a      	movs	r2, r5
    78b2:	4698      	mov	r8, r3
    78b4:	3501      	adds	r5, #1
    78b6:	2401      	movs	r4, #1
    78b8:	e7c1      	b.n	783e <critical_factorization+0x16>
    78ba:	42b7      	cmp	r7, r6
    78bc:	d009      	beq.n	78d2 <critical_factorization+0xaa>
    78be:	2301      	movs	r3, #1
    78c0:	46a8      	mov	r8, r5
    78c2:	4699      	mov	r9, r3
    78c4:	3501      	adds	r5, #1
    78c6:	2401      	movs	r4, #1
    78c8:	e7d1      	b.n	786e <critical_factorization+0x46>
    78ca:	4544      	cmp	r4, r8
    78cc:	d005      	beq.n	78da <critical_factorization+0xb2>
    78ce:	3401      	adds	r4, #1
    78d0:	e7b5      	b.n	783e <critical_factorization+0x16>
    78d2:	454c      	cmp	r4, r9
    78d4:	d004      	beq.n	78e0 <critical_factorization+0xb8>
    78d6:	3401      	adds	r4, #1
    78d8:	e7c9      	b.n	786e <critical_factorization+0x46>
    78da:	001d      	movs	r5, r3
    78dc:	2401      	movs	r4, #1
    78de:	e7ae      	b.n	783e <critical_factorization+0x16>
    78e0:	001d      	movs	r5, r3
    78e2:	2401      	movs	r4, #1
    78e4:	e7c3      	b.n	786e <critical_factorization+0x46>
    78e6:	46c0      	nop			; (mov r8, r8)

000078e8 <two_way_long_needle>:
    78e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    78ea:	46de      	mov	lr, fp
    78ec:	4657      	mov	r7, sl
    78ee:	464e      	mov	r6, r9
    78f0:	4645      	mov	r5, r8
    78f2:	b5e0      	push	{r5, r6, r7, lr}
    78f4:	0015      	movs	r5, r2
    78f6:	4c7b      	ldr	r4, [pc, #492]	; (7ae4 <two_way_long_needle+0x1fc>)
    78f8:	0006      	movs	r6, r0
    78fa:	44a5      	add	sp, r4
    78fc:	aa03      	add	r2, sp, #12
    78fe:	000f      	movs	r7, r1
    7900:	0028      	movs	r0, r5
    7902:	0019      	movs	r1, r3
    7904:	001c      	movs	r4, r3
    7906:	f7ff ff8f 	bl	7828 <critical_factorization>
    790a:	4683      	mov	fp, r0
    790c:	aaff      	add	r2, sp, #1020	; 0x3fc
    790e:	ab04      	add	r3, sp, #16
    7910:	3214      	adds	r2, #20
    7912:	c310      	stmia	r3!, {r4}
    7914:	4293      	cmp	r3, r2
    7916:	d1fc      	bne.n	7912 <two_way_long_needle+0x2a>
    7918:	1e63      	subs	r3, r4, #1
    791a:	0029      	movs	r1, r5
    791c:	46a4      	mov	ip, r4
    791e:	2c00      	cmp	r4, #0
    7920:	d009      	beq.n	7936 <two_way_long_needle+0x4e>
    7922:	2408      	movs	r4, #8
    7924:	780a      	ldrb	r2, [r1, #0]
    7926:	a802      	add	r0, sp, #8
    7928:	0092      	lsls	r2, r2, #2
    792a:	1900      	adds	r0, r0, r4
    792c:	5083      	str	r3, [r0, r2]
    792e:	3101      	adds	r1, #1
    7930:	3b01      	subs	r3, #1
    7932:	d2f6      	bcs.n	7922 <two_way_long_needle+0x3a>
    7934:	4664      	mov	r4, ip
    7936:	9b03      	ldr	r3, [sp, #12]
    7938:	465a      	mov	r2, fp
    793a:	18e9      	adds	r1, r5, r3
    793c:	0028      	movs	r0, r5
    793e:	f7ff fd71 	bl	7424 <memcmp>
    7942:	2800      	cmp	r0, #0
    7944:	d000      	beq.n	7948 <two_way_long_needle+0x60>
    7946:	e074      	b.n	7a32 <two_way_long_needle+0x14a>
    7948:	2300      	movs	r3, #0
    794a:	001a      	movs	r2, r3
    794c:	469a      	mov	sl, r3
    794e:	1e63      	subs	r3, r4, #1
    7950:	4698      	mov	r8, r3
    7952:	4659      	mov	r1, fp
    7954:	2301      	movs	r3, #1
    7956:	0038      	movs	r0, r7
    7958:	46a1      	mov	r9, r4
    795a:	0017      	movs	r7, r2
    795c:	4644      	mov	r4, r8
    795e:	46b0      	mov	r8, r6
    7960:	1a5b      	subs	r3, r3, r1
    7962:	9301      	str	r3, [sp, #4]
    7964:	9100      	str	r1, [sp, #0]
    7966:	4656      	mov	r6, sl
    7968:	444e      	add	r6, r9
    796a:	1a32      	subs	r2, r6, r0
    796c:	2100      	movs	r1, #0
    796e:	4440      	add	r0, r8
    7970:	f004 f95e 	bl	bc30 <memchr>
    7974:	2800      	cmp	r0, #0
    7976:	d153      	bne.n	7a20 <two_way_long_needle+0x138>
    7978:	2e00      	cmp	r6, #0
    797a:	d051      	beq.n	7a20 <two_way_long_needle+0x138>
    797c:	4643      	mov	r3, r8
    797e:	2108      	movs	r1, #8
    7980:	199b      	adds	r3, r3, r6
    7982:	3b01      	subs	r3, #1
    7984:	781b      	ldrb	r3, [r3, #0]
    7986:	aa02      	add	r2, sp, #8
    7988:	009b      	lsls	r3, r3, #2
    798a:	1852      	adds	r2, r2, r1
    798c:	58d3      	ldr	r3, [r2, r3]
    798e:	2b00      	cmp	r3, #0
    7990:	d00a      	beq.n	79a8 <two_way_long_needle+0xc0>
    7992:	2f00      	cmp	r7, #0
    7994:	d004      	beq.n	79a0 <two_way_long_needle+0xb8>
    7996:	9a03      	ldr	r2, [sp, #12]
    7998:	4293      	cmp	r3, r2
    799a:	d201      	bcs.n	79a0 <two_way_long_needle+0xb8>
    799c:	464b      	mov	r3, r9
    799e:	1a9b      	subs	r3, r3, r2
    79a0:	449a      	add	sl, r3
    79a2:	2700      	movs	r7, #0
    79a4:	0030      	movs	r0, r6
    79a6:	e7de      	b.n	7966 <two_way_long_needle+0x7e>
    79a8:	9900      	ldr	r1, [sp, #0]
    79aa:	003b      	movs	r3, r7
    79ac:	428f      	cmp	r7, r1
    79ae:	d200      	bcs.n	79b2 <two_way_long_needle+0xca>
    79b0:	000b      	movs	r3, r1
    79b2:	42a3      	cmp	r3, r4
    79b4:	d20d      	bcs.n	79d2 <two_way_long_needle+0xea>
    79b6:	4642      	mov	r2, r8
    79b8:	4452      	add	r2, sl
    79ba:	e002      	b.n	79c2 <two_way_long_needle+0xda>
    79bc:	3301      	adds	r3, #1
    79be:	42a3      	cmp	r3, r4
    79c0:	d207      	bcs.n	79d2 <two_way_long_needle+0xea>
    79c2:	5ce8      	ldrb	r0, [r5, r3]
    79c4:	5cd1      	ldrb	r1, [r2, r3]
    79c6:	4288      	cmp	r0, r1
    79c8:	d0f8      	beq.n	79bc <two_way_long_needle+0xd4>
    79ca:	9a01      	ldr	r2, [sp, #4]
    79cc:	4452      	add	r2, sl
    79ce:	4692      	mov	sl, r2
    79d0:	e7e6      	b.n	79a0 <two_way_long_needle+0xb8>
    79d2:	9b00      	ldr	r3, [sp, #0]
    79d4:	1e59      	subs	r1, r3, #1
    79d6:	429f      	cmp	r7, r3
    79d8:	d300      	bcc.n	79dc <two_way_long_needle+0xf4>
    79da:	e07d      	b.n	7ad8 <two_way_long_needle+0x1f0>
    79dc:	4642      	mov	r2, r8
    79de:	4452      	add	r2, sl
    79e0:	5c50      	ldrb	r0, [r2, r1]
    79e2:	5c6b      	ldrb	r3, [r5, r1]
    79e4:	4298      	cmp	r0, r3
    79e6:	d000      	beq.n	79ea <two_way_long_needle+0x102>
    79e8:	e074      	b.n	7ad4 <two_way_long_needle+0x1ec>
    79ea:	1e7b      	subs	r3, r7, #1
    79ec:	469b      	mov	fp, r3
    79ee:	0023      	movs	r3, r4
    79f0:	46b4      	mov	ip, r6
    79f2:	465c      	mov	r4, fp
    79f4:	0016      	movs	r6, r2
    79f6:	469b      	mov	fp, r3
    79f8:	e004      	b.n	7a04 <two_way_long_needle+0x11c>
    79fa:	5cea      	ldrb	r2, [r5, r3]
    79fc:	5cf0      	ldrb	r0, [r6, r3]
    79fe:	4282      	cmp	r2, r0
    7a00:	d103      	bne.n	7a0a <two_way_long_needle+0x122>
    7a02:	0019      	movs	r1, r3
    7a04:	1e4b      	subs	r3, r1, #1
    7a06:	42a3      	cmp	r3, r4
    7a08:	d1f7      	bne.n	79fa <two_way_long_needle+0x112>
    7a0a:	4666      	mov	r6, ip
    7a0c:	465c      	mov	r4, fp
    7a0e:	3701      	adds	r7, #1
    7a10:	428f      	cmp	r7, r1
    7a12:	d863      	bhi.n	7adc <two_way_long_needle+0x1f4>
    7a14:	464b      	mov	r3, r9
    7a16:	9f03      	ldr	r7, [sp, #12]
    7a18:	0030      	movs	r0, r6
    7a1a:	44ba      	add	sl, r7
    7a1c:	1bdf      	subs	r7, r3, r7
    7a1e:	e7a2      	b.n	7966 <two_way_long_needle+0x7e>
    7a20:	2000      	movs	r0, #0
    7a22:	4b31      	ldr	r3, [pc, #196]	; (7ae8 <two_way_long_needle+0x200>)
    7a24:	449d      	add	sp, r3
    7a26:	bc3c      	pop	{r2, r3, r4, r5}
    7a28:	4690      	mov	r8, r2
    7a2a:	4699      	mov	r9, r3
    7a2c:	46a2      	mov	sl, r4
    7a2e:	46ab      	mov	fp, r5
    7a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a32:	465b      	mov	r3, fp
    7a34:	1ae3      	subs	r3, r4, r3
    7a36:	455b      	cmp	r3, fp
    7a38:	d34a      	bcc.n	7ad0 <two_way_long_needle+0x1e8>
    7a3a:	3301      	adds	r3, #1
    7a3c:	9303      	str	r3, [sp, #12]
    7a3e:	2300      	movs	r3, #0
    7a40:	469a      	mov	sl, r3
    7a42:	1e63      	subs	r3, r4, #1
    7a44:	4698      	mov	r8, r3
    7a46:	465a      	mov	r2, fp
    7a48:	2301      	movs	r3, #1
    7a4a:	0038      	movs	r0, r7
    7a4c:	46a1      	mov	r9, r4
    7a4e:	4657      	mov	r7, sl
    7a50:	4644      	mov	r4, r8
    7a52:	46b0      	mov	r8, r6
    7a54:	1a9b      	subs	r3, r3, r2
    7a56:	9300      	str	r3, [sp, #0]
    7a58:	464b      	mov	r3, r9
    7a5a:	18fe      	adds	r6, r7, r3
    7a5c:	1a32      	subs	r2, r6, r0
    7a5e:	2100      	movs	r1, #0
    7a60:	4440      	add	r0, r8
    7a62:	f004 f8e5 	bl	bc30 <memchr>
    7a66:	2800      	cmp	r0, #0
    7a68:	d1da      	bne.n	7a20 <two_way_long_needle+0x138>
    7a6a:	2e00      	cmp	r6, #0
    7a6c:	d0d8      	beq.n	7a20 <two_way_long_needle+0x138>
    7a6e:	4643      	mov	r3, r8
    7a70:	2108      	movs	r1, #8
    7a72:	199b      	adds	r3, r3, r6
    7a74:	3b01      	subs	r3, #1
    7a76:	781b      	ldrb	r3, [r3, #0]
    7a78:	aa02      	add	r2, sp, #8
    7a7a:	009b      	lsls	r3, r3, #2
    7a7c:	1852      	adds	r2, r2, r1
    7a7e:	58d3      	ldr	r3, [r2, r3]
    7a80:	2b00      	cmp	r3, #0
    7a82:	d122      	bne.n	7aca <two_way_long_needle+0x1e2>
    7a84:	4643      	mov	r3, r8
    7a86:	19d8      	adds	r0, r3, r7
    7a88:	45a3      	cmp	fp, r4
    7a8a:	d20c      	bcs.n	7aa6 <two_way_long_needle+0x1be>
    7a8c:	465b      	mov	r3, fp
    7a8e:	5cc1      	ldrb	r1, [r0, r3]
    7a90:	5cea      	ldrb	r2, [r5, r3]
    7a92:	4291      	cmp	r1, r2
    7a94:	d004      	beq.n	7aa0 <two_way_long_needle+0x1b8>
    7a96:	e015      	b.n	7ac4 <two_way_long_needle+0x1dc>
    7a98:	5ce9      	ldrb	r1, [r5, r3]
    7a9a:	5cc2      	ldrb	r2, [r0, r3]
    7a9c:	4291      	cmp	r1, r2
    7a9e:	d111      	bne.n	7ac4 <two_way_long_needle+0x1dc>
    7aa0:	3301      	adds	r3, #1
    7aa2:	42a3      	cmp	r3, r4
    7aa4:	d3f8      	bcc.n	7a98 <two_way_long_needle+0x1b0>
    7aa6:	465b      	mov	r3, fp
    7aa8:	3b01      	subs	r3, #1
    7aaa:	d202      	bcs.n	7ab2 <two_way_long_needle+0x1ca>
    7aac:	e7b9      	b.n	7a22 <two_way_long_needle+0x13a>
    7aae:	3b01      	subs	r3, #1
    7ab0:	d3b7      	bcc.n	7a22 <two_way_long_needle+0x13a>
    7ab2:	5ce9      	ldrb	r1, [r5, r3]
    7ab4:	5cc2      	ldrb	r2, [r0, r3]
    7ab6:	4291      	cmp	r1, r2
    7ab8:	d0f9      	beq.n	7aae <two_way_long_needle+0x1c6>
    7aba:	9b03      	ldr	r3, [sp, #12]
    7abc:	0030      	movs	r0, r6
    7abe:	469c      	mov	ip, r3
    7ac0:	4467      	add	r7, ip
    7ac2:	e7c9      	b.n	7a58 <two_way_long_needle+0x170>
    7ac4:	9a00      	ldr	r2, [sp, #0]
    7ac6:	4694      	mov	ip, r2
    7ac8:	4467      	add	r7, ip
    7aca:	18ff      	adds	r7, r7, r3
    7acc:	0030      	movs	r0, r6
    7ace:	e7c3      	b.n	7a58 <two_way_long_needle+0x170>
    7ad0:	465b      	mov	r3, fp
    7ad2:	e7b2      	b.n	7a3a <two_way_long_needle+0x152>
    7ad4:	9900      	ldr	r1, [sp, #0]
    7ad6:	e79a      	b.n	7a0e <two_way_long_needle+0x126>
    7ad8:	0019      	movs	r1, r3
    7ada:	e798      	b.n	7a0e <two_way_long_needle+0x126>
    7adc:	4640      	mov	r0, r8
    7ade:	4450      	add	r0, sl
    7ae0:	e79f      	b.n	7a22 <two_way_long_needle+0x13a>
    7ae2:	46c0      	nop			; (mov r8, r8)
    7ae4:	fffffbec 	.word	0xfffffbec
    7ae8:	00000414 	.word	0x00000414

00007aec <strstr>:
    7aec:	b5f0      	push	{r4, r5, r6, r7, lr}
    7aee:	4657      	mov	r7, sl
    7af0:	4645      	mov	r5, r8
    7af2:	46de      	mov	lr, fp
    7af4:	464e      	mov	r6, r9
    7af6:	b5e0      	push	{r5, r6, r7, lr}
    7af8:	7803      	ldrb	r3, [r0, #0]
    7afa:	b085      	sub	sp, #20
    7afc:	0007      	movs	r7, r0
    7afe:	000d      	movs	r5, r1
    7b00:	2b00      	cmp	r3, #0
    7b02:	d035      	beq.n	7b70 <strstr+0x84>
    7b04:	7809      	ldrb	r1, [r1, #0]
    7b06:	1e0a      	subs	r2, r1, #0
    7b08:	d100      	bne.n	7b0c <strstr+0x20>
    7b0a:	e09f      	b.n	7c4c <strstr+0x160>
    7b0c:	002c      	movs	r4, r5
    7b0e:	2601      	movs	r6, #1
    7b10:	e002      	b.n	7b18 <strstr+0x2c>
    7b12:	7822      	ldrb	r2, [r4, #0]
    7b14:	2a00      	cmp	r2, #0
    7b16:	d00b      	beq.n	7b30 <strstr+0x44>
    7b18:	1a9b      	subs	r3, r3, r2
    7b1a:	425a      	negs	r2, r3
    7b1c:	4153      	adcs	r3, r2
    7b1e:	3001      	adds	r0, #1
    7b20:	401e      	ands	r6, r3
    7b22:	7803      	ldrb	r3, [r0, #0]
    7b24:	3401      	adds	r4, #1
    7b26:	2b00      	cmp	r3, #0
    7b28:	d1f3      	bne.n	7b12 <strstr+0x26>
    7b2a:	7823      	ldrb	r3, [r4, #0]
    7b2c:	2b00      	cmp	r3, #0
    7b2e:	d122      	bne.n	7b76 <strstr+0x8a>
    7b30:	0038      	movs	r0, r7
    7b32:	2e00      	cmp	r6, #0
    7b34:	d006      	beq.n	7b44 <strstr+0x58>
    7b36:	b005      	add	sp, #20
    7b38:	bc3c      	pop	{r2, r3, r4, r5}
    7b3a:	4690      	mov	r8, r2
    7b3c:	4699      	mov	r9, r3
    7b3e:	46a2      	mov	sl, r4
    7b40:	46ab      	mov	fp, r5
    7b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7b44:	1c78      	adds	r0, r7, #1
    7b46:	f7ff fd8b 	bl	7660 <strchr>
    7b4a:	1b64      	subs	r4, r4, r5
    7b4c:	1e06      	subs	r6, r0, #0
    7b4e:	d012      	beq.n	7b76 <strstr+0x8a>
    7b50:	2c01      	cmp	r4, #1
    7b52:	d0f0      	beq.n	7b36 <strstr+0x4a>
    7b54:	193f      	adds	r7, r7, r4
    7b56:	2101      	movs	r1, #1
    7b58:	42b8      	cmp	r0, r7
    7b5a:	d800      	bhi.n	7b5e <strstr+0x72>
    7b5c:	1a39      	subs	r1, r7, r0
    7b5e:	000f      	movs	r7, r1
    7b60:	2c1f      	cmp	r4, #31
    7b62:	d90a      	bls.n	7b7a <strstr+0x8e>
    7b64:	0023      	movs	r3, r4
    7b66:	002a      	movs	r2, r5
    7b68:	0030      	movs	r0, r6
    7b6a:	f7ff febd 	bl	78e8 <two_way_long_needle>
    7b6e:	e7e2      	b.n	7b36 <strstr+0x4a>
    7b70:	780b      	ldrb	r3, [r1, #0]
    7b72:	2b00      	cmp	r3, #0
    7b74:	d06a      	beq.n	7c4c <strstr+0x160>
    7b76:	2000      	movs	r0, #0
    7b78:	e7dd      	b.n	7b36 <strstr+0x4a>
    7b7a:	aa03      	add	r2, sp, #12
    7b7c:	0021      	movs	r1, r4
    7b7e:	0028      	movs	r0, r5
    7b80:	f7ff fe52 	bl	7828 <critical_factorization>
    7b84:	9b03      	ldr	r3, [sp, #12]
    7b86:	4680      	mov	r8, r0
    7b88:	0002      	movs	r2, r0
    7b8a:	18e9      	adds	r1, r5, r3
    7b8c:	0028      	movs	r0, r5
    7b8e:	f7ff fc49 	bl	7424 <memcmp>
    7b92:	2800      	cmp	r0, #0
    7b94:	d15c      	bne.n	7c50 <strstr+0x164>
    7b96:	2300      	movs	r3, #0
    7b98:	4699      	mov	r9, r3
    7b9a:	4643      	mov	r3, r8
    7b9c:	3b01      	subs	r3, #1
    7b9e:	9300      	str	r3, [sp, #0]
    7ba0:	4642      	mov	r2, r8
    7ba2:	2301      	movs	r3, #1
    7ba4:	46b2      	mov	sl, r6
    7ba6:	0038      	movs	r0, r7
    7ba8:	464e      	mov	r6, r9
    7baa:	464f      	mov	r7, r9
    7bac:	1a9b      	subs	r3, r3, r2
    7bae:	9301      	str	r3, [sp, #4]
    7bb0:	19e3      	adds	r3, r4, r7
    7bb2:	1a1a      	subs	r2, r3, r0
    7bb4:	2100      	movs	r1, #0
    7bb6:	4450      	add	r0, sl
    7bb8:	4699      	mov	r9, r3
    7bba:	f004 f839 	bl	bc30 <memchr>
    7bbe:	2800      	cmp	r0, #0
    7bc0:	d1d9      	bne.n	7b76 <strstr+0x8a>
    7bc2:	464b      	mov	r3, r9
    7bc4:	2b00      	cmp	r3, #0
    7bc6:	d0d6      	beq.n	7b76 <strstr+0x8a>
    7bc8:	4643      	mov	r3, r8
    7bca:	45b0      	cmp	r8, r6
    7bcc:	d200      	bcs.n	7bd0 <strstr+0xe4>
    7bce:	0033      	movs	r3, r6
    7bd0:	429c      	cmp	r4, r3
    7bd2:	d90f      	bls.n	7bf4 <strstr+0x108>
    7bd4:	4652      	mov	r2, sl
    7bd6:	18d2      	adds	r2, r2, r3
    7bd8:	5ce9      	ldrb	r1, [r5, r3]
    7bda:	5dd2      	ldrb	r2, [r2, r7]
    7bdc:	4291      	cmp	r1, r2
    7bde:	d12e      	bne.n	7c3e <strstr+0x152>
    7be0:	4652      	mov	r2, sl
    7be2:	19d0      	adds	r0, r2, r7
    7be4:	e003      	b.n	7bee <strstr+0x102>
    7be6:	5ce9      	ldrb	r1, [r5, r3]
    7be8:	5cc2      	ldrb	r2, [r0, r3]
    7bea:	4291      	cmp	r1, r2
    7bec:	d127      	bne.n	7c3e <strstr+0x152>
    7bee:	3301      	adds	r3, #1
    7bf0:	429c      	cmp	r4, r3
    7bf2:	d1f8      	bne.n	7be6 <strstr+0xfa>
    7bf4:	9a00      	ldr	r2, [sp, #0]
    7bf6:	45b0      	cmp	r8, r6
    7bf8:	d976      	bls.n	7ce8 <strstr+0x1fc>
    7bfa:	46bc      	mov	ip, r7
    7bfc:	44d4      	add	ip, sl
    7bfe:	4661      	mov	r1, ip
    7c00:	9b00      	ldr	r3, [sp, #0]
    7c02:	5cc9      	ldrb	r1, [r1, r3]
    7c04:	5ceb      	ldrb	r3, [r5, r3]
    7c06:	4299      	cmp	r1, r3
    7c08:	d16e      	bne.n	7ce8 <strstr+0x1fc>
    7c0a:	1e73      	subs	r3, r6, #1
    7c0c:	469b      	mov	fp, r3
    7c0e:	4663      	mov	r3, ip
    7c10:	46a4      	mov	ip, r4
    7c12:	465c      	mov	r4, fp
    7c14:	46b3      	mov	fp, r6
    7c16:	001e      	movs	r6, r3
    7c18:	e004      	b.n	7c24 <strstr+0x138>
    7c1a:	5ce8      	ldrb	r0, [r5, r3]
    7c1c:	5cf1      	ldrb	r1, [r6, r3]
    7c1e:	4288      	cmp	r0, r1
    7c20:	d103      	bne.n	7c2a <strstr+0x13e>
    7c22:	001a      	movs	r2, r3
    7c24:	1e53      	subs	r3, r2, #1
    7c26:	42a3      	cmp	r3, r4
    7c28:	d1f7      	bne.n	7c1a <strstr+0x12e>
    7c2a:	4664      	mov	r4, ip
    7c2c:	465e      	mov	r6, fp
    7c2e:	3601      	adds	r6, #1
    7c30:	4296      	cmp	r6, r2
    7c32:	d85b      	bhi.n	7cec <strstr+0x200>
    7c34:	9e03      	ldr	r6, [sp, #12]
    7c36:	4648      	mov	r0, r9
    7c38:	19bf      	adds	r7, r7, r6
    7c3a:	1ba6      	subs	r6, r4, r6
    7c3c:	e7b8      	b.n	7bb0 <strstr+0xc4>
    7c3e:	9a01      	ldr	r2, [sp, #4]
    7c40:	2600      	movs	r6, #0
    7c42:	4694      	mov	ip, r2
    7c44:	4467      	add	r7, ip
    7c46:	18ff      	adds	r7, r7, r3
    7c48:	4648      	mov	r0, r9
    7c4a:	e7b1      	b.n	7bb0 <strstr+0xc4>
    7c4c:	0038      	movs	r0, r7
    7c4e:	e772      	b.n	7b36 <strstr+0x4a>
    7c50:	4643      	mov	r3, r8
    7c52:	1ae3      	subs	r3, r4, r3
    7c54:	4543      	cmp	r3, r8
    7c56:	d200      	bcs.n	7c5a <strstr+0x16e>
    7c58:	4643      	mov	r3, r8
    7c5a:	3301      	adds	r3, #1
    7c5c:	9303      	str	r3, [sp, #12]
    7c5e:	2300      	movs	r3, #0
    7c60:	4642      	mov	r2, r8
    7c62:	4699      	mov	r9, r3
    7c64:	3301      	adds	r3, #1
    7c66:	1a9b      	subs	r3, r3, r2
    7c68:	464a      	mov	r2, r9
    7c6a:	46b3      	mov	fp, r6
    7c6c:	46b1      	mov	r9, r6
    7c6e:	0038      	movs	r0, r7
    7c70:	469a      	mov	sl, r3
    7c72:	0016      	movs	r6, r2
    7c74:	44c3      	add	fp, r8
    7c76:	19a7      	adds	r7, r4, r6
    7c78:	1a3a      	subs	r2, r7, r0
    7c7a:	2100      	movs	r1, #0
    7c7c:	4448      	add	r0, r9
    7c7e:	f003 ffd7 	bl	bc30 <memchr>
    7c82:	2800      	cmp	r0, #0
    7c84:	d000      	beq.n	7c88 <strstr+0x19c>
    7c86:	e776      	b.n	7b76 <strstr+0x8a>
    7c88:	2f00      	cmp	r7, #0
    7c8a:	d100      	bne.n	7c8e <strstr+0x1a2>
    7c8c:	e773      	b.n	7b76 <strstr+0x8a>
    7c8e:	464b      	mov	r3, r9
    7c90:	1998      	adds	r0, r3, r6
    7c92:	4544      	cmp	r4, r8
    7c94:	d90f      	bls.n	7cb6 <strstr+0x1ca>
    7c96:	465b      	mov	r3, fp
    7c98:	5d99      	ldrb	r1, [r3, r6]
    7c9a:	4643      	mov	r3, r8
    7c9c:	4648      	mov	r0, r9
    7c9e:	5cea      	ldrb	r2, [r5, r3]
    7ca0:	1980      	adds	r0, r0, r6
    7ca2:	4291      	cmp	r1, r2
    7ca4:	d004      	beq.n	7cb0 <strstr+0x1c4>
    7ca6:	e016      	b.n	7cd6 <strstr+0x1ea>
    7ca8:	5ce9      	ldrb	r1, [r5, r3]
    7caa:	5cc2      	ldrb	r2, [r0, r3]
    7cac:	4291      	cmp	r1, r2
    7cae:	d112      	bne.n	7cd6 <strstr+0x1ea>
    7cb0:	3301      	adds	r3, #1
    7cb2:	429c      	cmp	r4, r3
    7cb4:	d1f8      	bne.n	7ca8 <strstr+0x1bc>
    7cb6:	4643      	mov	r3, r8
    7cb8:	3b01      	subs	r3, #1
    7cba:	d200      	bcs.n	7cbe <strstr+0x1d2>
    7cbc:	e73b      	b.n	7b36 <strstr+0x4a>
    7cbe:	5cc1      	ldrb	r1, [r0, r3]
    7cc0:	5cea      	ldrb	r2, [r5, r3]
    7cc2:	4291      	cmp	r1, r2
    7cc4:	d004      	beq.n	7cd0 <strstr+0x1e4>
    7cc6:	e00a      	b.n	7cde <strstr+0x1f2>
    7cc8:	5ce9      	ldrb	r1, [r5, r3]
    7cca:	5cc2      	ldrb	r2, [r0, r3]
    7ccc:	4291      	cmp	r1, r2
    7cce:	d106      	bne.n	7cde <strstr+0x1f2>
    7cd0:	3b01      	subs	r3, #1
    7cd2:	d2f9      	bcs.n	7cc8 <strstr+0x1dc>
    7cd4:	e72f      	b.n	7b36 <strstr+0x4a>
    7cd6:	4456      	add	r6, sl
    7cd8:	18f6      	adds	r6, r6, r3
    7cda:	0038      	movs	r0, r7
    7cdc:	e7cb      	b.n	7c76 <strstr+0x18a>
    7cde:	9b03      	ldr	r3, [sp, #12]
    7ce0:	0038      	movs	r0, r7
    7ce2:	469c      	mov	ip, r3
    7ce4:	4466      	add	r6, ip
    7ce6:	e7c6      	b.n	7c76 <strstr+0x18a>
    7ce8:	4642      	mov	r2, r8
    7cea:	e7a0      	b.n	7c2e <strstr+0x142>
    7cec:	46b9      	mov	r9, r7
    7cee:	4650      	mov	r0, sl
    7cf0:	4448      	add	r0, r9
    7cf2:	e720      	b.n	7b36 <strstr+0x4a>

00007cf4 <_strtol_l.isra.0>:
    7cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    7cf6:	4657      	mov	r7, sl
    7cf8:	464e      	mov	r6, r9
    7cfa:	46de      	mov	lr, fp
    7cfc:	4645      	mov	r5, r8
    7cfe:	b5e0      	push	{r5, r6, r7, lr}
    7d00:	001e      	movs	r6, r3
    7d02:	2308      	movs	r3, #8
    7d04:	b083      	sub	sp, #12
    7d06:	9001      	str	r0, [sp, #4]
    7d08:	9100      	str	r1, [sp, #0]
    7d0a:	4692      	mov	sl, r2
    7d0c:	000f      	movs	r7, r1
    7d0e:	4699      	mov	r9, r3
    7d10:	e000      	b.n	7d14 <_strtol_l.isra.0+0x20>
    7d12:	002f      	movs	r7, r5
    7d14:	980c      	ldr	r0, [sp, #48]	; 0x30
    7d16:	783c      	ldrb	r4, [r7, #0]
    7d18:	f003 fc68 	bl	b5ec <__locale_ctype_ptr_l>
    7d1c:	464a      	mov	r2, r9
    7d1e:	1900      	adds	r0, r0, r4
    7d20:	7843      	ldrb	r3, [r0, #1]
    7d22:	1c7d      	adds	r5, r7, #1
    7d24:	421a      	tst	r2, r3
    7d26:	d1f4      	bne.n	7d12 <_strtol_l.isra.0+0x1e>
    7d28:	2c2d      	cmp	r4, #45	; 0x2d
    7d2a:	d04f      	beq.n	7dcc <_strtol_l.isra.0+0xd8>
    7d2c:	2300      	movs	r3, #0
    7d2e:	4698      	mov	r8, r3
    7d30:	2c2b      	cmp	r4, #43	; 0x2b
    7d32:	d05c      	beq.n	7dee <_strtol_l.isra.0+0xfa>
    7d34:	2e00      	cmp	r6, #0
    7d36:	d003      	beq.n	7d40 <_strtol_l.isra.0+0x4c>
    7d38:	2e10      	cmp	r6, #16
    7d3a:	d05b      	beq.n	7df4 <_strtol_l.isra.0+0x100>
    7d3c:	0037      	movs	r7, r6
    7d3e:	e003      	b.n	7d48 <_strtol_l.isra.0+0x54>
    7d40:	2c30      	cmp	r4, #48	; 0x30
    7d42:	d063      	beq.n	7e0c <_strtol_l.isra.0+0x118>
    7d44:	270a      	movs	r7, #10
    7d46:	260a      	movs	r6, #10
    7d48:	4b35      	ldr	r3, [pc, #212]	; (7e20 <_strtol_l.isra.0+0x12c>)
    7d4a:	0039      	movs	r1, r7
    7d4c:	4443      	add	r3, r8
    7d4e:	0018      	movs	r0, r3
    7d50:	4699      	mov	r9, r3
    7d52:	f7fd fbd5 	bl	5500 <__aeabi_uidivmod>
    7d56:	4648      	mov	r0, r9
    7d58:	468b      	mov	fp, r1
    7d5a:	0039      	movs	r1, r7
    7d5c:	f7fd fb4a 	bl	53f4 <__udivsi3>
    7d60:	2200      	movs	r2, #0
    7d62:	0001      	movs	r1, r0
    7d64:	2000      	movs	r0, #0
    7d66:	0023      	movs	r3, r4
    7d68:	3b30      	subs	r3, #48	; 0x30
    7d6a:	2b09      	cmp	r3, #9
    7d6c:	d907      	bls.n	7d7e <_strtol_l.isra.0+0x8a>
    7d6e:	3b11      	subs	r3, #17
    7d70:	2b19      	cmp	r3, #25
    7d72:	d903      	bls.n	7d7c <_strtol_l.isra.0+0x88>
    7d74:	0023      	movs	r3, r4
    7d76:	3b61      	subs	r3, #97	; 0x61
    7d78:	2b19      	cmp	r3, #25
    7d7a:	d80d      	bhi.n	7d98 <_strtol_l.isra.0+0xa4>
    7d7c:	330a      	adds	r3, #10
    7d7e:	429e      	cmp	r6, r3
    7d80:	dd0a      	ble.n	7d98 <_strtol_l.isra.0+0xa4>
    7d82:	1c54      	adds	r4, r2, #1
    7d84:	d005      	beq.n	7d92 <_strtol_l.isra.0+0x9e>
    7d86:	4281      	cmp	r1, r0
    7d88:	d31d      	bcc.n	7dc6 <_strtol_l.isra.0+0xd2>
    7d8a:	d01a      	beq.n	7dc2 <_strtol_l.isra.0+0xce>
    7d8c:	2201      	movs	r2, #1
    7d8e:	4378      	muls	r0, r7
    7d90:	1818      	adds	r0, r3, r0
    7d92:	782c      	ldrb	r4, [r5, #0]
    7d94:	3501      	adds	r5, #1
    7d96:	e7e6      	b.n	7d66 <_strtol_l.isra.0+0x72>
    7d98:	1c53      	adds	r3, r2, #1
    7d9a:	d01c      	beq.n	7dd6 <_strtol_l.isra.0+0xe2>
    7d9c:	4643      	mov	r3, r8
    7d9e:	2b00      	cmp	r3, #0
    7da0:	d000      	beq.n	7da4 <_strtol_l.isra.0+0xb0>
    7da2:	4240      	negs	r0, r0
    7da4:	4653      	mov	r3, sl
    7da6:	2b00      	cmp	r3, #0
    7da8:	d004      	beq.n	7db4 <_strtol_l.isra.0+0xc0>
    7daa:	9b00      	ldr	r3, [sp, #0]
    7dac:	2a00      	cmp	r2, #0
    7dae:	d11c      	bne.n	7dea <_strtol_l.isra.0+0xf6>
    7db0:	4652      	mov	r2, sl
    7db2:	6013      	str	r3, [r2, #0]
    7db4:	b003      	add	sp, #12
    7db6:	bc3c      	pop	{r2, r3, r4, r5}
    7db8:	4690      	mov	r8, r2
    7dba:	4699      	mov	r9, r3
    7dbc:	46a2      	mov	sl, r4
    7dbe:	46ab      	mov	fp, r5
    7dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7dc2:	459b      	cmp	fp, r3
    7dc4:	dae2      	bge.n	7d8c <_strtol_l.isra.0+0x98>
    7dc6:	2201      	movs	r2, #1
    7dc8:	4252      	negs	r2, r2
    7dca:	e7e2      	b.n	7d92 <_strtol_l.isra.0+0x9e>
    7dcc:	2301      	movs	r3, #1
    7dce:	782c      	ldrb	r4, [r5, #0]
    7dd0:	4698      	mov	r8, r3
    7dd2:	1cbd      	adds	r5, r7, #2
    7dd4:	e7ae      	b.n	7d34 <_strtol_l.isra.0+0x40>
    7dd6:	2322      	movs	r3, #34	; 0x22
    7dd8:	9a01      	ldr	r2, [sp, #4]
    7dda:	4648      	mov	r0, r9
    7ddc:	6013      	str	r3, [r2, #0]
    7dde:	4653      	mov	r3, sl
    7de0:	2b00      	cmp	r3, #0
    7de2:	d0e7      	beq.n	7db4 <_strtol_l.isra.0+0xc0>
    7de4:	1e6b      	subs	r3, r5, #1
    7de6:	4648      	mov	r0, r9
    7de8:	e7e2      	b.n	7db0 <_strtol_l.isra.0+0xbc>
    7dea:	4681      	mov	r9, r0
    7dec:	e7fa      	b.n	7de4 <_strtol_l.isra.0+0xf0>
    7dee:	782c      	ldrb	r4, [r5, #0]
    7df0:	1cbd      	adds	r5, r7, #2
    7df2:	e79f      	b.n	7d34 <_strtol_l.isra.0+0x40>
    7df4:	2c30      	cmp	r4, #48	; 0x30
    7df6:	d111      	bne.n	7e1c <_strtol_l.isra.0+0x128>
    7df8:	2220      	movs	r2, #32
    7dfa:	782b      	ldrb	r3, [r5, #0]
    7dfc:	4393      	bics	r3, r2
    7dfe:	2b58      	cmp	r3, #88	; 0x58
    7e00:	d10c      	bne.n	7e1c <_strtol_l.isra.0+0x128>
    7e02:	786c      	ldrb	r4, [r5, #1]
    7e04:	2710      	movs	r7, #16
    7e06:	3502      	adds	r5, #2
    7e08:	2610      	movs	r6, #16
    7e0a:	e79d      	b.n	7d48 <_strtol_l.isra.0+0x54>
    7e0c:	2220      	movs	r2, #32
    7e0e:	782b      	ldrb	r3, [r5, #0]
    7e10:	4393      	bics	r3, r2
    7e12:	2b58      	cmp	r3, #88	; 0x58
    7e14:	d0f5      	beq.n	7e02 <_strtol_l.isra.0+0x10e>
    7e16:	2708      	movs	r7, #8
    7e18:	2608      	movs	r6, #8
    7e1a:	e795      	b.n	7d48 <_strtol_l.isra.0+0x54>
    7e1c:	2710      	movs	r7, #16
    7e1e:	e793      	b.n	7d48 <_strtol_l.isra.0+0x54>
    7e20:	7fffffff 	.word	0x7fffffff

00007e24 <_strtol_r>:
    7e24:	b510      	push	{r4, lr}
    7e26:	4c06      	ldr	r4, [pc, #24]	; (7e40 <_strtol_r+0x1c>)
    7e28:	b082      	sub	sp, #8
    7e2a:	6824      	ldr	r4, [r4, #0]
    7e2c:	6b64      	ldr	r4, [r4, #52]	; 0x34
    7e2e:	2c00      	cmp	r4, #0
    7e30:	d004      	beq.n	7e3c <_strtol_r+0x18>
    7e32:	9400      	str	r4, [sp, #0]
    7e34:	f7ff ff5e 	bl	7cf4 <_strtol_l.isra.0>
    7e38:	b002      	add	sp, #8
    7e3a:	bd10      	pop	{r4, pc}
    7e3c:	4c01      	ldr	r4, [pc, #4]	; (7e44 <_strtol_r+0x20>)
    7e3e:	e7f8      	b.n	7e32 <_strtol_r+0xe>
    7e40:	200000a0 	.word	0x200000a0
    7e44:	200004d4 	.word	0x200004d4

00007e48 <_svfprintf_r>:
    7e48:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e4a:	46de      	mov	lr, fp
    7e4c:	4645      	mov	r5, r8
    7e4e:	4657      	mov	r7, sl
    7e50:	464e      	mov	r6, r9
    7e52:	b5e0      	push	{r5, r6, r7, lr}
    7e54:	b0c3      	sub	sp, #268	; 0x10c
    7e56:	000d      	movs	r5, r1
    7e58:	9106      	str	r1, [sp, #24]
    7e5a:	0014      	movs	r4, r2
    7e5c:	930f      	str	r3, [sp, #60]	; 0x3c
    7e5e:	9009      	str	r0, [sp, #36]	; 0x24
    7e60:	f003 fbd8 	bl	b614 <_localeconv_r>
    7e64:	6803      	ldr	r3, [r0, #0]
    7e66:	0018      	movs	r0, r3
    7e68:	9319      	str	r3, [sp, #100]	; 0x64
    7e6a:	f7ff fcab 	bl	77c4 <strlen>
    7e6e:	9018      	str	r0, [sp, #96]	; 0x60
    7e70:	89ab      	ldrh	r3, [r5, #12]
    7e72:	061b      	lsls	r3, r3, #24
    7e74:	d505      	bpl.n	7e82 <_svfprintf_r+0x3a>
    7e76:	692b      	ldr	r3, [r5, #16]
    7e78:	9307      	str	r3, [sp, #28]
    7e7a:	2b00      	cmp	r3, #0
    7e7c:	d101      	bne.n	7e82 <_svfprintf_r+0x3a>
    7e7e:	f001 f863 	bl	8f48 <_svfprintf_r+0x1100>
    7e82:	ab32      	add	r3, sp, #200	; 0xc8
    7e84:	9325      	str	r3, [sp, #148]	; 0x94
    7e86:	2300      	movs	r3, #0
    7e88:	46a3      	mov	fp, r4
    7e8a:	af25      	add	r7, sp, #148	; 0x94
    7e8c:	60bb      	str	r3, [r7, #8]
    7e8e:	607b      	str	r3, [r7, #4]
    7e90:	9314      	str	r3, [sp, #80]	; 0x50
    7e92:	9316      	str	r3, [sp, #88]	; 0x58
    7e94:	9315      	str	r3, [sp, #84]	; 0x54
    7e96:	ae32      	add	r6, sp, #200	; 0xc8
    7e98:	9317      	str	r3, [sp, #92]	; 0x5c
    7e9a:	931a      	str	r3, [sp, #104]	; 0x68
    7e9c:	930a      	str	r3, [sp, #40]	; 0x28
    7e9e:	465b      	mov	r3, fp
    7ea0:	781b      	ldrb	r3, [r3, #0]
    7ea2:	465c      	mov	r4, fp
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d01c      	beq.n	7ee2 <_svfprintf_r+0x9a>
    7ea8:	2b25      	cmp	r3, #37	; 0x25
    7eaa:	d102      	bne.n	7eb2 <_svfprintf_r+0x6a>
    7eac:	e019      	b.n	7ee2 <_svfprintf_r+0x9a>
    7eae:	2b25      	cmp	r3, #37	; 0x25
    7eb0:	d003      	beq.n	7eba <_svfprintf_r+0x72>
    7eb2:	3401      	adds	r4, #1
    7eb4:	7823      	ldrb	r3, [r4, #0]
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	d1f9      	bne.n	7eae <_svfprintf_r+0x66>
    7eba:	465b      	mov	r3, fp
    7ebc:	1ae5      	subs	r5, r4, r3
    7ebe:	d010      	beq.n	7ee2 <_svfprintf_r+0x9a>
    7ec0:	465b      	mov	r3, fp
    7ec2:	6033      	str	r3, [r6, #0]
    7ec4:	68bb      	ldr	r3, [r7, #8]
    7ec6:	6075      	str	r5, [r6, #4]
    7ec8:	195b      	adds	r3, r3, r5
    7eca:	60bb      	str	r3, [r7, #8]
    7ecc:	687b      	ldr	r3, [r7, #4]
    7ece:	3301      	adds	r3, #1
    7ed0:	607b      	str	r3, [r7, #4]
    7ed2:	2b07      	cmp	r3, #7
    7ed4:	dc2e      	bgt.n	7f34 <_svfprintf_r+0xec>
    7ed6:	3608      	adds	r6, #8
    7ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    7eda:	469c      	mov	ip, r3
    7edc:	44ac      	add	ip, r5
    7ede:	4663      	mov	r3, ip
    7ee0:	930a      	str	r3, [sp, #40]	; 0x28
    7ee2:	7823      	ldrb	r3, [r4, #0]
    7ee4:	2b00      	cmp	r3, #0
    7ee6:	d02e      	beq.n	7f46 <_svfprintf_r+0xfe>
    7ee8:	1c63      	adds	r3, r4, #1
    7eea:	469b      	mov	fp, r3
    7eec:	2300      	movs	r3, #0
    7eee:	aa16      	add	r2, sp, #88	; 0x58
    7ef0:	77d3      	strb	r3, [r2, #31]
    7ef2:	2201      	movs	r2, #1
    7ef4:	4252      	negs	r2, r2
    7ef6:	4692      	mov	sl, r2
    7ef8:	2200      	movs	r2, #0
    7efa:	2100      	movs	r1, #0
    7efc:	920b      	str	r2, [sp, #44]	; 0x2c
    7efe:	3220      	adds	r2, #32
    7f00:	4691      	mov	r9, r2
    7f02:	3220      	adds	r2, #32
    7f04:	7863      	ldrb	r3, [r4, #1]
    7f06:	4688      	mov	r8, r1
    7f08:	2000      	movs	r0, #0
    7f0a:	2400      	movs	r4, #0
    7f0c:	4694      	mov	ip, r2
    7f0e:	4659      	mov	r1, fp
    7f10:	3101      	adds	r1, #1
    7f12:	001a      	movs	r2, r3
    7f14:	3a20      	subs	r2, #32
    7f16:	2a58      	cmp	r2, #88	; 0x58
    7f18:	d900      	bls.n	7f1c <_svfprintf_r+0xd4>
    7f1a:	e2fd      	b.n	8518 <_svfprintf_r+0x6d0>
    7f1c:	4dd7      	ldr	r5, [pc, #860]	; (827c <_svfprintf_r+0x434>)
    7f1e:	0092      	lsls	r2, r2, #2
    7f20:	58aa      	ldr	r2, [r5, r2]
    7f22:	4697      	mov	pc, r2
    7f24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7f26:	920f      	str	r2, [sp, #60]	; 0x3c
    7f28:	425b      	negs	r3, r3
    7f2a:	930b      	str	r3, [sp, #44]	; 0x2c
    7f2c:	2304      	movs	r3, #4
    7f2e:	431c      	orrs	r4, r3
    7f30:	780b      	ldrb	r3, [r1, #0]
    7f32:	e7ed      	b.n	7f10 <_svfprintf_r+0xc8>
    7f34:	003a      	movs	r2, r7
    7f36:	9906      	ldr	r1, [sp, #24]
    7f38:	9809      	ldr	r0, [sp, #36]	; 0x24
    7f3a:	f005 fdf5 	bl	db28 <__ssprint_r>
    7f3e:	2800      	cmp	r0, #0
    7f40:	d109      	bne.n	7f56 <_svfprintf_r+0x10e>
    7f42:	ae32      	add	r6, sp, #200	; 0xc8
    7f44:	e7c8      	b.n	7ed8 <_svfprintf_r+0x90>
    7f46:	68bb      	ldr	r3, [r7, #8]
    7f48:	2b00      	cmp	r3, #0
    7f4a:	d004      	beq.n	7f56 <_svfprintf_r+0x10e>
    7f4c:	003a      	movs	r2, r7
    7f4e:	9906      	ldr	r1, [sp, #24]
    7f50:	9809      	ldr	r0, [sp, #36]	; 0x24
    7f52:	f005 fde9 	bl	db28 <__ssprint_r>
    7f56:	9b06      	ldr	r3, [sp, #24]
    7f58:	899b      	ldrh	r3, [r3, #12]
    7f5a:	065b      	lsls	r3, r3, #25
    7f5c:	d501      	bpl.n	7f62 <_svfprintf_r+0x11a>
    7f5e:	f001 f8ce 	bl	90fe <_svfprintf_r+0x12b6>
    7f62:	980a      	ldr	r0, [sp, #40]	; 0x28
    7f64:	b043      	add	sp, #268	; 0x10c
    7f66:	bc3c      	pop	{r2, r3, r4, r5}
    7f68:	4690      	mov	r8, r2
    7f6a:	4699      	mov	r9, r3
    7f6c:	46a2      	mov	sl, r4
    7f6e:	46ab      	mov	fp, r5
    7f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7f72:	2201      	movs	r2, #1
    7f74:	780b      	ldrb	r3, [r1, #0]
    7f76:	4690      	mov	r8, r2
    7f78:	202b      	movs	r0, #43	; 0x2b
    7f7a:	e7c9      	b.n	7f10 <_svfprintf_r+0xc8>
    7f7c:	1c4b      	adds	r3, r1, #1
    7f7e:	469b      	mov	fp, r3
    7f80:	780b      	ldrb	r3, [r1, #0]
    7f82:	2b2a      	cmp	r3, #42	; 0x2a
    7f84:	d101      	bne.n	7f8a <_svfprintf_r+0x142>
    7f86:	f001 fa1b 	bl	93c0 <_svfprintf_r+0x1578>
    7f8a:	001a      	movs	r2, r3
    7f8c:	2100      	movs	r1, #0
    7f8e:	3a30      	subs	r2, #48	; 0x30
    7f90:	468a      	mov	sl, r1
    7f92:	4659      	mov	r1, fp
    7f94:	2a09      	cmp	r2, #9
    7f96:	d8bc      	bhi.n	7f12 <_svfprintf_r+0xca>
    7f98:	0003      	movs	r3, r0
    7f9a:	0011      	movs	r1, r2
    7f9c:	4650      	mov	r0, sl
    7f9e:	465a      	mov	r2, fp
    7fa0:	469a      	mov	sl, r3
    7fa2:	46a3      	mov	fp, r4
    7fa4:	0083      	lsls	r3, r0, #2
    7fa6:	181b      	adds	r3, r3, r0
    7fa8:	7814      	ldrb	r4, [r2, #0]
    7faa:	005b      	lsls	r3, r3, #1
    7fac:	1858      	adds	r0, r3, r1
    7fae:	0021      	movs	r1, r4
    7fb0:	1c53      	adds	r3, r2, #1
    7fb2:	3930      	subs	r1, #48	; 0x30
    7fb4:	001a      	movs	r2, r3
    7fb6:	2909      	cmp	r1, #9
    7fb8:	d9f4      	bls.n	7fa4 <_svfprintf_r+0x15c>
    7fba:	4652      	mov	r2, sl
    7fbc:	0019      	movs	r1, r3
    7fbe:	4682      	mov	sl, r0
    7fc0:	0023      	movs	r3, r4
    7fc2:	0010      	movs	r0, r2
    7fc4:	465c      	mov	r4, fp
    7fc6:	e7a4      	b.n	7f12 <_svfprintf_r+0xca>
    7fc8:	2380      	movs	r3, #128	; 0x80
    7fca:	431c      	orrs	r4, r3
    7fcc:	780b      	ldrb	r3, [r1, #0]
    7fce:	e79f      	b.n	7f10 <_svfprintf_r+0xc8>
    7fd0:	468b      	mov	fp, r1
    7fd2:	4641      	mov	r1, r8
    7fd4:	9312      	str	r3, [sp, #72]	; 0x48
    7fd6:	2900      	cmp	r1, #0
    7fd8:	d001      	beq.n	7fde <_svfprintf_r+0x196>
    7fda:	f001 fa1f 	bl	941c <_svfprintf_r+0x15d4>
    7fde:	2310      	movs	r3, #16
    7fe0:	431c      	orrs	r4, r3
    7fe2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7fe4:	06a3      	lsls	r3, r4, #26
    7fe6:	d501      	bpl.n	7fec <_svfprintf_r+0x1a4>
    7fe8:	f000 fe88 	bl	8cfc <_svfprintf_r+0xeb4>
    7fec:	06e3      	lsls	r3, r4, #27
    7fee:	d501      	bpl.n	7ff4 <_svfprintf_r+0x1ac>
    7ff0:	f000 fd80 	bl	8af4 <_svfprintf_r+0xcac>
    7ff4:	0663      	lsls	r3, r4, #25
    7ff6:	d401      	bmi.n	7ffc <_svfprintf_r+0x1b4>
    7ff8:	f000 fd7c 	bl	8af4 <_svfprintf_r+0xcac>
    7ffc:	2100      	movs	r1, #0
    7ffe:	5e53      	ldrsh	r3, [r2, r1]
    8000:	930c      	str	r3, [sp, #48]	; 0x30
    8002:	3204      	adds	r2, #4
    8004:	17db      	asrs	r3, r3, #31
    8006:	930d      	str	r3, [sp, #52]	; 0x34
    8008:	920f      	str	r2, [sp, #60]	; 0x3c
    800a:	d501      	bpl.n	8010 <_svfprintf_r+0x1c8>
    800c:	f000 fe86 	bl	8d1c <_svfprintf_r+0xed4>
    8010:	990c      	ldr	r1, [sp, #48]	; 0x30
    8012:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8014:	0008      	movs	r0, r1
    8016:	ab16      	add	r3, sp, #88	; 0x58
    8018:	7fdb      	ldrb	r3, [r3, #31]
    801a:	4310      	orrs	r0, r2
    801c:	4698      	mov	r8, r3
    801e:	0002      	movs	r2, r0
    8020:	2301      	movs	r3, #1
    8022:	4651      	mov	r1, sl
    8024:	3101      	adds	r1, #1
    8026:	d100      	bne.n	802a <_svfprintf_r+0x1e2>
    8028:	e0ff      	b.n	822a <_svfprintf_r+0x3e2>
    802a:	2180      	movs	r1, #128	; 0x80
    802c:	0020      	movs	r0, r4
    802e:	4388      	bics	r0, r1
    8030:	9008      	str	r0, [sp, #32]
    8032:	2a00      	cmp	r2, #0
    8034:	d000      	beq.n	8038 <_svfprintf_r+0x1f0>
    8036:	e0fc      	b.n	8232 <_svfprintf_r+0x3ea>
    8038:	4652      	mov	r2, sl
    803a:	2a00      	cmp	r2, #0
    803c:	d001      	beq.n	8042 <_svfprintf_r+0x1fa>
    803e:	f000 fc2c 	bl	889a <_svfprintf_r+0xa52>
    8042:	2b00      	cmp	r3, #0
    8044:	d001      	beq.n	804a <_svfprintf_r+0x202>
    8046:	f000 fd04 	bl	8a52 <_svfprintf_r+0xc0a>
    804a:	2001      	movs	r0, #1
    804c:	ab32      	add	r3, sp, #200	; 0xc8
    804e:	4020      	ands	r0, r4
    8050:	900e      	str	r0, [sp, #56]	; 0x38
    8052:	9311      	str	r3, [sp, #68]	; 0x44
    8054:	d008      	beq.n	8068 <_svfprintf_r+0x220>
    8056:	2327      	movs	r3, #39	; 0x27
    8058:	2130      	movs	r1, #48	; 0x30
    805a:	aa28      	add	r2, sp, #160	; 0xa0
    805c:	54d1      	strb	r1, [r2, r3]
    805e:	aa16      	add	r2, sp, #88	; 0x58
    8060:	4694      	mov	ip, r2
    8062:	3348      	adds	r3, #72	; 0x48
    8064:	4463      	add	r3, ip
    8066:	9311      	str	r3, [sp, #68]	; 0x44
    8068:	4653      	mov	r3, sl
    806a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    806c:	9307      	str	r3, [sp, #28]
    806e:	4592      	cmp	sl, r2
    8070:	da00      	bge.n	8074 <_svfprintf_r+0x22c>
    8072:	9207      	str	r2, [sp, #28]
    8074:	2300      	movs	r3, #0
    8076:	9313      	str	r3, [sp, #76]	; 0x4c
    8078:	4643      	mov	r3, r8
    807a:	2b00      	cmp	r3, #0
    807c:	d002      	beq.n	8084 <_svfprintf_r+0x23c>
    807e:	9b07      	ldr	r3, [sp, #28]
    8080:	3301      	adds	r3, #1
    8082:	9307      	str	r3, [sp, #28]
    8084:	2302      	movs	r3, #2
    8086:	9a08      	ldr	r2, [sp, #32]
    8088:	401a      	ands	r2, r3
    808a:	4691      	mov	r9, r2
    808c:	d002      	beq.n	8094 <_svfprintf_r+0x24c>
    808e:	9b07      	ldr	r3, [sp, #28]
    8090:	3302      	adds	r3, #2
    8092:	9307      	str	r3, [sp, #28]
    8094:	2384      	movs	r3, #132	; 0x84
    8096:	9a08      	ldr	r2, [sp, #32]
    8098:	401a      	ands	r2, r3
    809a:	9210      	str	r2, [sp, #64]	; 0x40
    809c:	d000      	beq.n	80a0 <_svfprintf_r+0x258>
    809e:	e24d      	b.n	853c <_svfprintf_r+0x6f4>
    80a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    80a2:	9a07      	ldr	r2, [sp, #28]
    80a4:	1a9c      	subs	r4, r3, r2
    80a6:	2c00      	cmp	r4, #0
    80a8:	dc00      	bgt.n	80ac <_svfprintf_r+0x264>
    80aa:	e247      	b.n	853c <_svfprintf_r+0x6f4>
    80ac:	4974      	ldr	r1, [pc, #464]	; (8280 <_svfprintf_r+0x438>)
    80ae:	68ba      	ldr	r2, [r7, #8]
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	4688      	mov	r8, r1
    80b4:	2c10      	cmp	r4, #16
    80b6:	dd1f      	ble.n	80f8 <_svfprintf_r+0x2b0>
    80b8:	0031      	movs	r1, r6
    80ba:	2510      	movs	r5, #16
    80bc:	4646      	mov	r6, r8
    80be:	e003      	b.n	80c8 <_svfprintf_r+0x280>
    80c0:	3c10      	subs	r4, #16
    80c2:	3108      	adds	r1, #8
    80c4:	2c10      	cmp	r4, #16
    80c6:	dd15      	ble.n	80f4 <_svfprintf_r+0x2ac>
    80c8:	3210      	adds	r2, #16
    80ca:	3301      	adds	r3, #1
    80cc:	600e      	str	r6, [r1, #0]
    80ce:	604d      	str	r5, [r1, #4]
    80d0:	60ba      	str	r2, [r7, #8]
    80d2:	607b      	str	r3, [r7, #4]
    80d4:	2b07      	cmp	r3, #7
    80d6:	ddf3      	ble.n	80c0 <_svfprintf_r+0x278>
    80d8:	003a      	movs	r2, r7
    80da:	9906      	ldr	r1, [sp, #24]
    80dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    80de:	f005 fd23 	bl	db28 <__ssprint_r>
    80e2:	2800      	cmp	r0, #0
    80e4:	d000      	beq.n	80e8 <_svfprintf_r+0x2a0>
    80e6:	e736      	b.n	7f56 <_svfprintf_r+0x10e>
    80e8:	3c10      	subs	r4, #16
    80ea:	68ba      	ldr	r2, [r7, #8]
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	a932      	add	r1, sp, #200	; 0xc8
    80f0:	2c10      	cmp	r4, #16
    80f2:	dce9      	bgt.n	80c8 <_svfprintf_r+0x280>
    80f4:	46b0      	mov	r8, r6
    80f6:	000e      	movs	r6, r1
    80f8:	4641      	mov	r1, r8
    80fa:	6074      	str	r4, [r6, #4]
    80fc:	3301      	adds	r3, #1
    80fe:	18a4      	adds	r4, r4, r2
    8100:	6031      	str	r1, [r6, #0]
    8102:	60bc      	str	r4, [r7, #8]
    8104:	607b      	str	r3, [r7, #4]
    8106:	2b07      	cmp	r3, #7
    8108:	dd01      	ble.n	810e <_svfprintf_r+0x2c6>
    810a:	f000 fca8 	bl	8a5e <_svfprintf_r+0xc16>
    810e:	ab16      	add	r3, sp, #88	; 0x58
    8110:	7fdb      	ldrb	r3, [r3, #31]
    8112:	3608      	adds	r6, #8
    8114:	4698      	mov	r8, r3
    8116:	e212      	b.n	853e <_svfprintf_r+0x6f6>
    8118:	468b      	mov	fp, r1
    811a:	4641      	mov	r1, r8
    811c:	9312      	str	r3, [sp, #72]	; 0x48
    811e:	2900      	cmp	r1, #0
    8120:	d001      	beq.n	8126 <_svfprintf_r+0x2de>
    8122:	f001 f977 	bl	9414 <_svfprintf_r+0x15cc>
    8126:	2207      	movs	r2, #7
    8128:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    812a:	3307      	adds	r3, #7
    812c:	4393      	bics	r3, r2
    812e:	3201      	adds	r2, #1
    8130:	4694      	mov	ip, r2
    8132:	449c      	add	ip, r3
    8134:	4662      	mov	r2, ip
    8136:	920f      	str	r2, [sp, #60]	; 0x3c
    8138:	681a      	ldr	r2, [r3, #0]
    813a:	9216      	str	r2, [sp, #88]	; 0x58
    813c:	685b      	ldr	r3, [r3, #4]
    813e:	2201      	movs	r2, #1
    8140:	9315      	str	r3, [sp, #84]	; 0x54
    8142:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8144:	9d16      	ldr	r5, [sp, #88]	; 0x58
    8146:	005b      	lsls	r3, r3, #1
    8148:	085b      	lsrs	r3, r3, #1
    814a:	4698      	mov	r8, r3
    814c:	4252      	negs	r2, r2
    814e:	4b4d      	ldr	r3, [pc, #308]	; (8284 <_svfprintf_r+0x43c>)
    8150:	0028      	movs	r0, r5
    8152:	4641      	mov	r1, r8
    8154:	f007 f854 	bl	f200 <__aeabi_dcmpun>
    8158:	2800      	cmp	r0, #0
    815a:	d001      	beq.n	8160 <_svfprintf_r+0x318>
    815c:	f000 fdfd 	bl	8d5a <_svfprintf_r+0xf12>
    8160:	2201      	movs	r2, #1
    8162:	4b48      	ldr	r3, [pc, #288]	; (8284 <_svfprintf_r+0x43c>)
    8164:	4252      	negs	r2, r2
    8166:	0028      	movs	r0, r5
    8168:	4641      	mov	r1, r8
    816a:	f7fe ffcf 	bl	710c <__aeabi_dcmple>
    816e:	2800      	cmp	r0, #0
    8170:	d001      	beq.n	8176 <_svfprintf_r+0x32e>
    8172:	f000 fdf2 	bl	8d5a <_svfprintf_r+0xf12>
    8176:	2200      	movs	r2, #0
    8178:	2300      	movs	r3, #0
    817a:	9816      	ldr	r0, [sp, #88]	; 0x58
    817c:	9915      	ldr	r1, [sp, #84]	; 0x54
    817e:	f7fe ffbb 	bl	70f8 <__aeabi_dcmplt>
    8182:	2800      	cmp	r0, #0
    8184:	d001      	beq.n	818a <_svfprintf_r+0x342>
    8186:	f001 f822 	bl	91ce <_svfprintf_r+0x1386>
    818a:	ab16      	add	r3, sp, #88	; 0x58
    818c:	7fdb      	ldrb	r3, [r3, #31]
    818e:	4698      	mov	r8, r3
    8190:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8192:	2b47      	cmp	r3, #71	; 0x47
    8194:	dd01      	ble.n	819a <_svfprintf_r+0x352>
    8196:	f000 fec7 	bl	8f28 <_svfprintf_r+0x10e0>
    819a:	4b3b      	ldr	r3, [pc, #236]	; (8288 <_svfprintf_r+0x440>)
    819c:	9311      	str	r3, [sp, #68]	; 0x44
    819e:	2380      	movs	r3, #128	; 0x80
    81a0:	439c      	bics	r4, r3
    81a2:	3b7d      	subs	r3, #125	; 0x7d
    81a4:	9307      	str	r3, [sp, #28]
    81a6:	930e      	str	r3, [sp, #56]	; 0x38
    81a8:	2300      	movs	r3, #0
    81aa:	9408      	str	r4, [sp, #32]
    81ac:	469a      	mov	sl, r3
    81ae:	9313      	str	r3, [sp, #76]	; 0x4c
    81b0:	e762      	b.n	8078 <_svfprintf_r+0x230>
    81b2:	2200      	movs	r2, #0
    81b4:	3b30      	subs	r3, #48	; 0x30
    81b6:	0015      	movs	r5, r2
    81b8:	001a      	movs	r2, r3
    81ba:	0003      	movs	r3, r0
    81bc:	9407      	str	r4, [sp, #28]
    81be:	0008      	movs	r0, r1
    81c0:	002c      	movs	r4, r5
    81c2:	469b      	mov	fp, r3
    81c4:	00a3      	lsls	r3, r4, #2
    81c6:	191c      	adds	r4, r3, r4
    81c8:	7803      	ldrb	r3, [r0, #0]
    81ca:	0064      	lsls	r4, r4, #1
    81cc:	1914      	adds	r4, r2, r4
    81ce:	001a      	movs	r2, r3
    81d0:	3101      	adds	r1, #1
    81d2:	3a30      	subs	r2, #48	; 0x30
    81d4:	0008      	movs	r0, r1
    81d6:	2a09      	cmp	r2, #9
    81d8:	d9f4      	bls.n	81c4 <_svfprintf_r+0x37c>
    81da:	940b      	str	r4, [sp, #44]	; 0x2c
    81dc:	4658      	mov	r0, fp
    81de:	9c07      	ldr	r4, [sp, #28]
    81e0:	e697      	b.n	7f12 <_svfprintf_r+0xca>
    81e2:	2308      	movs	r3, #8
    81e4:	431c      	orrs	r4, r3
    81e6:	780b      	ldrb	r3, [r1, #0]
    81e8:	e692      	b.n	7f10 <_svfprintf_r+0xc8>
    81ea:	9312      	str	r3, [sp, #72]	; 0x48
    81ec:	2310      	movs	r3, #16
    81ee:	431c      	orrs	r4, r3
    81f0:	468b      	mov	fp, r1
    81f2:	06a3      	lsls	r3, r4, #26
    81f4:	d500      	bpl.n	81f8 <_svfprintf_r+0x3b0>
    81f6:	e17b      	b.n	84f0 <_svfprintf_r+0x6a8>
    81f8:	06e3      	lsls	r3, r4, #27
    81fa:	d501      	bpl.n	8200 <_svfprintf_r+0x3b8>
    81fc:	f000 fc7e 	bl	8afc <_svfprintf_r+0xcb4>
    8200:	0663      	lsls	r3, r4, #25
    8202:	d401      	bmi.n	8208 <_svfprintf_r+0x3c0>
    8204:	f000 fc7a 	bl	8afc <_svfprintf_r+0xcb4>
    8208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    820a:	881a      	ldrh	r2, [r3, #0]
    820c:	920c      	str	r2, [sp, #48]	; 0x30
    820e:	2200      	movs	r2, #0
    8210:	3304      	adds	r3, #4
    8212:	930f      	str	r3, [sp, #60]	; 0x3c
    8214:	2300      	movs	r3, #0
    8216:	920d      	str	r2, [sp, #52]	; 0x34
    8218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    821a:	2100      	movs	r1, #0
    821c:	a816      	add	r0, sp, #88	; 0x58
    821e:	77c1      	strb	r1, [r0, #31]
    8220:	4688      	mov	r8, r1
    8222:	4651      	mov	r1, sl
    8224:	3101      	adds	r1, #1
    8226:	d000      	beq.n	822a <_svfprintf_r+0x3e2>
    8228:	e6ff      	b.n	802a <_svfprintf_r+0x1e2>
    822a:	2a00      	cmp	r2, #0
    822c:	d100      	bne.n	8230 <_svfprintf_r+0x3e8>
    822e:	e335      	b.n	889c <_svfprintf_r+0xa54>
    8230:	9408      	str	r4, [sp, #32]
    8232:	2b01      	cmp	r3, #1
    8234:	d100      	bne.n	8238 <_svfprintf_r+0x3f0>
    8236:	e3e5      	b.n	8a04 <_svfprintf_r+0xbbc>
    8238:	2b02      	cmp	r3, #2
    823a:	d000      	beq.n	823e <_svfprintf_r+0x3f6>
    823c:	e362      	b.n	8904 <_svfprintf_r+0xabc>
    823e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    8240:	200f      	movs	r0, #15
    8242:	46a1      	mov	r9, r4
    8244:	46b4      	mov	ip, r6
    8246:	ab32      	add	r3, sp, #200	; 0xc8
    8248:	0019      	movs	r1, r3
    824a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    824c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    824e:	0004      	movs	r4, r0
    8250:	464d      	mov	r5, r9
    8252:	4014      	ands	r4, r2
    8254:	5d2c      	ldrb	r4, [r5, r4]
    8256:	071e      	lsls	r6, r3, #28
    8258:	0915      	lsrs	r5, r2, #4
    825a:	3901      	subs	r1, #1
    825c:	432e      	orrs	r6, r5
    825e:	700c      	strb	r4, [r1, #0]
    8260:	091c      	lsrs	r4, r3, #4
    8262:	0023      	movs	r3, r4
    8264:	0034      	movs	r4, r6
    8266:	0032      	movs	r2, r6
    8268:	431c      	orrs	r4, r3
    826a:	d1f0      	bne.n	824e <_svfprintf_r+0x406>
    826c:	920c      	str	r2, [sp, #48]	; 0x30
    826e:	930d      	str	r3, [sp, #52]	; 0x34
    8270:	ab32      	add	r3, sp, #200	; 0xc8
    8272:	1a5b      	subs	r3, r3, r1
    8274:	9111      	str	r1, [sp, #68]	; 0x44
    8276:	4666      	mov	r6, ip
    8278:	930e      	str	r3, [sp, #56]	; 0x38
    827a:	e6f5      	b.n	8068 <_svfprintf_r+0x220>
    827c:	00011a4c 	.word	0x00011a4c
    8280:	00011bf4 	.word	0x00011bf4
    8284:	7fefffff 	.word	0x7fefffff
    8288:	00011bb0 	.word	0x00011bb0
    828c:	9312      	str	r3, [sp, #72]	; 0x48
    828e:	2310      	movs	r3, #16
    8290:	431c      	orrs	r4, r3
    8292:	468b      	mov	fp, r1
    8294:	06a3      	lsls	r3, r4, #26
    8296:	d500      	bpl.n	829a <_svfprintf_r+0x452>
    8298:	e111      	b.n	84be <_svfprintf_r+0x676>
    829a:	06e3      	lsls	r3, r4, #27
    829c:	d501      	bpl.n	82a2 <_svfprintf_r+0x45a>
    829e:	f000 fc31 	bl	8b04 <_svfprintf_r+0xcbc>
    82a2:	0663      	lsls	r3, r4, #25
    82a4:	d401      	bmi.n	82aa <_svfprintf_r+0x462>
    82a6:	f000 fc2d 	bl	8b04 <_svfprintf_r+0xcbc>
    82aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    82ac:	881a      	ldrh	r2, [r3, #0]
    82ae:	920c      	str	r2, [sp, #48]	; 0x30
    82b0:	2200      	movs	r2, #0
    82b2:	3304      	adds	r3, #4
    82b4:	920d      	str	r2, [sp, #52]	; 0x34
    82b6:	930f      	str	r3, [sp, #60]	; 0x3c
    82b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    82ba:	2301      	movs	r3, #1
    82bc:	e7ad      	b.n	821a <_svfprintf_r+0x3d2>
    82be:	468b      	mov	fp, r1
    82c0:	4641      	mov	r1, r8
    82c2:	9312      	str	r3, [sp, #72]	; 0x48
    82c4:	2900      	cmp	r1, #0
    82c6:	d001      	beq.n	82cc <_svfprintf_r+0x484>
    82c8:	f001 f890 	bl	93ec <_svfprintf_r+0x15a4>
    82cc:	4bb8      	ldr	r3, [pc, #736]	; (85b0 <_svfprintf_r+0x768>)
    82ce:	9317      	str	r3, [sp, #92]	; 0x5c
    82d0:	06a3      	lsls	r3, r4, #26
    82d2:	d500      	bpl.n	82d6 <_svfprintf_r+0x48e>
    82d4:	e0ab      	b.n	842e <_svfprintf_r+0x5e6>
    82d6:	06e3      	lsls	r3, r4, #27
    82d8:	d501      	bpl.n	82de <_svfprintf_r+0x496>
    82da:	f000 fc07 	bl	8aec <_svfprintf_r+0xca4>
    82de:	0663      	lsls	r3, r4, #25
    82e0:	d401      	bmi.n	82e6 <_svfprintf_r+0x49e>
    82e2:	f000 fc03 	bl	8aec <_svfprintf_r+0xca4>
    82e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    82e8:	881a      	ldrh	r2, [r3, #0]
    82ea:	920c      	str	r2, [sp, #48]	; 0x30
    82ec:	2200      	movs	r2, #0
    82ee:	3304      	adds	r3, #4
    82f0:	920d      	str	r2, [sp, #52]	; 0x34
    82f2:	930f      	str	r3, [sp, #60]	; 0x3c
    82f4:	07e3      	lsls	r3, r4, #31
    82f6:	d400      	bmi.n	82fa <_svfprintf_r+0x4b2>
    82f8:	e0a9      	b.n	844e <_svfprintf_r+0x606>
    82fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    82fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    82fe:	000b      	movs	r3, r1
    8300:	4313      	orrs	r3, r2
    8302:	001a      	movs	r2, r3
    8304:	2302      	movs	r3, #2
    8306:	2a00      	cmp	r2, #0
    8308:	d100      	bne.n	830c <_svfprintf_r+0x4c4>
    830a:	e786      	b.n	821a <_svfprintf_r+0x3d2>
    830c:	2030      	movs	r0, #48	; 0x30
    830e:	a91e      	add	r1, sp, #120	; 0x78
    8310:	7008      	strb	r0, [r1, #0]
    8312:	2548      	movs	r5, #72	; 0x48
    8314:	4668      	mov	r0, sp
    8316:	1940      	adds	r0, r0, r5
    8318:	7800      	ldrb	r0, [r0, #0]
    831a:	431c      	orrs	r4, r3
    831c:	7048      	strb	r0, [r1, #1]
    831e:	e77c      	b.n	821a <_svfprintf_r+0x3d2>
    8320:	468b      	mov	fp, r1
    8322:	4641      	mov	r1, r8
    8324:	2900      	cmp	r1, #0
    8326:	d001      	beq.n	832c <_svfprintf_r+0x4e4>
    8328:	f001 f883 	bl	9432 <_svfprintf_r+0x15ea>
    832c:	06a3      	lsls	r3, r4, #26
    832e:	d501      	bpl.n	8334 <_svfprintf_r+0x4ec>
    8330:	f000 fde9 	bl	8f06 <_svfprintf_r+0x10be>
    8334:	06e3      	lsls	r3, r4, #27
    8336:	d501      	bpl.n	833c <_svfprintf_r+0x4f4>
    8338:	f000 fd9b 	bl	8e72 <_svfprintf_r+0x102a>
    833c:	0663      	lsls	r3, r4, #25
    833e:	d401      	bmi.n	8344 <_svfprintf_r+0x4fc>
    8340:	f000 fd97 	bl	8e72 <_svfprintf_r+0x102a>
    8344:	4669      	mov	r1, sp
    8346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8348:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    834a:	681a      	ldr	r2, [r3, #0]
    834c:	3304      	adds	r3, #4
    834e:	9207      	str	r2, [sp, #28]
    8350:	8011      	strh	r1, [r2, #0]
    8352:	930f      	str	r3, [sp, #60]	; 0x3c
    8354:	e5a3      	b.n	7e9e <_svfprintf_r+0x56>
    8356:	464b      	mov	r3, r9
    8358:	431c      	orrs	r4, r3
    835a:	780b      	ldrb	r3, [r1, #0]
    835c:	e5d8      	b.n	7f10 <_svfprintf_r+0xc8>
    835e:	9312      	str	r3, [sp, #72]	; 0x48
    8360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8362:	468b      	mov	fp, r1
    8364:	1d1d      	adds	r5, r3, #4
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	a916      	add	r1, sp, #88	; 0x58
    836a:	001a      	movs	r2, r3
    836c:	9311      	str	r3, [sp, #68]	; 0x44
    836e:	2300      	movs	r3, #0
    8370:	77cb      	strb	r3, [r1, #31]
    8372:	2a00      	cmp	r2, #0
    8374:	d101      	bne.n	837a <_svfprintf_r+0x532>
    8376:	f000 fefb 	bl	9170 <_svfprintf_r+0x1328>
    837a:	4653      	mov	r3, sl
    837c:	3301      	adds	r3, #1
    837e:	d101      	bne.n	8384 <_svfprintf_r+0x53c>
    8380:	f000 fe38 	bl	8ff4 <_svfprintf_r+0x11ac>
    8384:	4652      	mov	r2, sl
    8386:	2100      	movs	r1, #0
    8388:	9811      	ldr	r0, [sp, #68]	; 0x44
    838a:	f003 fc51 	bl	bc30 <memchr>
    838e:	2800      	cmp	r0, #0
    8390:	d101      	bne.n	8396 <_svfprintf_r+0x54e>
    8392:	f000 ff54 	bl	923e <_svfprintf_r+0x13f6>
    8396:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8398:	1ac3      	subs	r3, r0, r3
    839a:	001a      	movs	r2, r3
    839c:	930e      	str	r3, [sp, #56]	; 0x38
    839e:	43db      	mvns	r3, r3
    83a0:	17db      	asrs	r3, r3, #31
    83a2:	401a      	ands	r2, r3
    83a4:	ab16      	add	r3, sp, #88	; 0x58
    83a6:	7fdb      	ldrb	r3, [r3, #31]
    83a8:	9207      	str	r2, [sp, #28]
    83aa:	4698      	mov	r8, r3
    83ac:	2300      	movs	r3, #0
    83ae:	950f      	str	r5, [sp, #60]	; 0x3c
    83b0:	9408      	str	r4, [sp, #32]
    83b2:	469a      	mov	sl, r3
    83b4:	9313      	str	r3, [sp, #76]	; 0x4c
    83b6:	e65f      	b.n	8078 <_svfprintf_r+0x230>
    83b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    83ba:	9312      	str	r3, [sp, #72]	; 0x48
    83bc:	6813      	ldr	r3, [r2, #0]
    83be:	ad28      	add	r5, sp, #160	; 0xa0
    83c0:	9307      	str	r3, [sp, #28]
    83c2:	466b      	mov	r3, sp
    83c4:	7f1b      	ldrb	r3, [r3, #28]
    83c6:	468b      	mov	fp, r1
    83c8:	702b      	strb	r3, [r5, #0]
    83ca:	2300      	movs	r3, #0
    83cc:	a916      	add	r1, sp, #88	; 0x58
    83ce:	77cb      	strb	r3, [r1, #31]
    83d0:	0013      	movs	r3, r2
    83d2:	3304      	adds	r3, #4
    83d4:	930f      	str	r3, [sp, #60]	; 0x3c
    83d6:	2300      	movs	r3, #0
    83d8:	9408      	str	r4, [sp, #32]
    83da:	4698      	mov	r8, r3
    83dc:	3301      	adds	r3, #1
    83de:	9307      	str	r3, [sp, #28]
    83e0:	930e      	str	r3, [sp, #56]	; 0x38
    83e2:	2300      	movs	r3, #0
    83e4:	9511      	str	r5, [sp, #68]	; 0x44
    83e6:	469a      	mov	sl, r3
    83e8:	9313      	str	r3, [sp, #76]	; 0x4c
    83ea:	e64b      	b.n	8084 <_svfprintf_r+0x23c>
    83ec:	468b      	mov	fp, r1
    83ee:	4641      	mov	r1, r8
    83f0:	9312      	str	r3, [sp, #72]	; 0x48
    83f2:	2900      	cmp	r1, #0
    83f4:	d100      	bne.n	83f8 <_svfprintf_r+0x5b0>
    83f6:	e5f4      	b.n	7fe2 <_svfprintf_r+0x19a>
    83f8:	ab16      	add	r3, sp, #88	; 0x58
    83fa:	77d8      	strb	r0, [r3, #31]
    83fc:	e5f1      	b.n	7fe2 <_svfprintf_r+0x19a>
    83fe:	4663      	mov	r3, ip
    8400:	431c      	orrs	r4, r3
    8402:	780b      	ldrb	r3, [r1, #0]
    8404:	e584      	b.n	7f10 <_svfprintf_r+0xc8>
    8406:	780b      	ldrb	r3, [r1, #0]
    8408:	2b6c      	cmp	r3, #108	; 0x6c
    840a:	d101      	bne.n	8410 <_svfprintf_r+0x5c8>
    840c:	f000 fd86 	bl	8f1c <_svfprintf_r+0x10d4>
    8410:	2210      	movs	r2, #16
    8412:	4314      	orrs	r4, r2
    8414:	e57c      	b.n	7f10 <_svfprintf_r+0xc8>
    8416:	468b      	mov	fp, r1
    8418:	4641      	mov	r1, r8
    841a:	9312      	str	r3, [sp, #72]	; 0x48
    841c:	2900      	cmp	r1, #0
    841e:	d001      	beq.n	8424 <_svfprintf_r+0x5dc>
    8420:	f000 ffe8 	bl	93f4 <_svfprintf_r+0x15ac>
    8424:	4b63      	ldr	r3, [pc, #396]	; (85b4 <_svfprintf_r+0x76c>)
    8426:	9317      	str	r3, [sp, #92]	; 0x5c
    8428:	06a3      	lsls	r3, r4, #26
    842a:	d400      	bmi.n	842e <_svfprintf_r+0x5e6>
    842c:	e753      	b.n	82d6 <_svfprintf_r+0x48e>
    842e:	2207      	movs	r2, #7
    8430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8432:	3307      	adds	r3, #7
    8434:	4393      	bics	r3, r2
    8436:	3201      	adds	r2, #1
    8438:	4694      	mov	ip, r2
    843a:	449c      	add	ip, r3
    843c:	4662      	mov	r2, ip
    843e:	920f      	str	r2, [sp, #60]	; 0x3c
    8440:	681a      	ldr	r2, [r3, #0]
    8442:	685b      	ldr	r3, [r3, #4]
    8444:	920c      	str	r2, [sp, #48]	; 0x30
    8446:	930d      	str	r3, [sp, #52]	; 0x34
    8448:	07e3      	lsls	r3, r4, #31
    844a:	d500      	bpl.n	844e <_svfprintf_r+0x606>
    844c:	e755      	b.n	82fa <_svfprintf_r+0x4b2>
    844e:	990c      	ldr	r1, [sp, #48]	; 0x30
    8450:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8452:	0008      	movs	r0, r1
    8454:	4310      	orrs	r0, r2
    8456:	2302      	movs	r3, #2
    8458:	0002      	movs	r2, r0
    845a:	e6de      	b.n	821a <_svfprintf_r+0x3d2>
    845c:	468b      	mov	fp, r1
    845e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8460:	2230      	movs	r2, #48	; 0x30
    8462:	680b      	ldr	r3, [r1, #0]
    8464:	930c      	str	r3, [sp, #48]	; 0x30
    8466:	2300      	movs	r3, #0
    8468:	930d      	str	r3, [sp, #52]	; 0x34
    846a:	3302      	adds	r3, #2
    846c:	431c      	orrs	r4, r3
    846e:	ab1e      	add	r3, sp, #120	; 0x78
    8470:	701a      	strb	r2, [r3, #0]
    8472:	3248      	adds	r2, #72	; 0x48
    8474:	705a      	strb	r2, [r3, #1]
    8476:	000b      	movs	r3, r1
    8478:	3304      	adds	r3, #4
    847a:	930f      	str	r3, [sp, #60]	; 0x3c
    847c:	4b4d      	ldr	r3, [pc, #308]	; (85b4 <_svfprintf_r+0x76c>)
    847e:	9212      	str	r2, [sp, #72]	; 0x48
    8480:	9317      	str	r3, [sp, #92]	; 0x5c
    8482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8484:	2302      	movs	r3, #2
    8486:	e6c8      	b.n	821a <_svfprintf_r+0x3d2>
    8488:	2301      	movs	r3, #1
    848a:	431c      	orrs	r4, r3
    848c:	780b      	ldrb	r3, [r1, #0]
    848e:	e53f      	b.n	7f10 <_svfprintf_r+0xc8>
    8490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8492:	1d1a      	adds	r2, r3, #4
    8494:	681b      	ldr	r3, [r3, #0]
    8496:	930b      	str	r3, [sp, #44]	; 0x2c
    8498:	2b00      	cmp	r3, #0
    849a:	da00      	bge.n	849e <_svfprintf_r+0x656>
    849c:	e542      	b.n	7f24 <_svfprintf_r+0xdc>
    849e:	780b      	ldrb	r3, [r1, #0]
    84a0:	920f      	str	r2, [sp, #60]	; 0x3c
    84a2:	e535      	b.n	7f10 <_svfprintf_r+0xc8>
    84a4:	780b      	ldrb	r3, [r1, #0]
    84a6:	2800      	cmp	r0, #0
    84a8:	d000      	beq.n	84ac <_svfprintf_r+0x664>
    84aa:	e531      	b.n	7f10 <_svfprintf_r+0xc8>
    84ac:	2201      	movs	r2, #1
    84ae:	3020      	adds	r0, #32
    84b0:	4690      	mov	r8, r2
    84b2:	e52d      	b.n	7f10 <_svfprintf_r+0xc8>
    84b4:	468b      	mov	fp, r1
    84b6:	9312      	str	r3, [sp, #72]	; 0x48
    84b8:	06a3      	lsls	r3, r4, #26
    84ba:	d400      	bmi.n	84be <_svfprintf_r+0x676>
    84bc:	e6ed      	b.n	829a <_svfprintf_r+0x452>
    84be:	2207      	movs	r2, #7
    84c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84c2:	3307      	adds	r3, #7
    84c4:	4393      	bics	r3, r2
    84c6:	3201      	adds	r2, #1
    84c8:	4694      	mov	ip, r2
    84ca:	449c      	add	ip, r3
    84cc:	4662      	mov	r2, ip
    84ce:	920f      	str	r2, [sp, #60]	; 0x3c
    84d0:	681a      	ldr	r2, [r3, #0]
    84d2:	685b      	ldr	r3, [r3, #4]
    84d4:	0011      	movs	r1, r2
    84d6:	001a      	movs	r2, r3
    84d8:	0008      	movs	r0, r1
    84da:	4310      	orrs	r0, r2
    84dc:	910c      	str	r1, [sp, #48]	; 0x30
    84de:	920d      	str	r2, [sp, #52]	; 0x34
    84e0:	2301      	movs	r3, #1
    84e2:	0002      	movs	r2, r0
    84e4:	e699      	b.n	821a <_svfprintf_r+0x3d2>
    84e6:	468b      	mov	fp, r1
    84e8:	9312      	str	r3, [sp, #72]	; 0x48
    84ea:	06a3      	lsls	r3, r4, #26
    84ec:	d400      	bmi.n	84f0 <_svfprintf_r+0x6a8>
    84ee:	e683      	b.n	81f8 <_svfprintf_r+0x3b0>
    84f0:	2207      	movs	r2, #7
    84f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    84f4:	3307      	adds	r3, #7
    84f6:	4393      	bics	r3, r2
    84f8:	3201      	adds	r2, #1
    84fa:	4694      	mov	ip, r2
    84fc:	449c      	add	ip, r3
    84fe:	4662      	mov	r2, ip
    8500:	920f      	str	r2, [sp, #60]	; 0x3c
    8502:	681a      	ldr	r2, [r3, #0]
    8504:	685b      	ldr	r3, [r3, #4]
    8506:	0011      	movs	r1, r2
    8508:	001a      	movs	r2, r3
    850a:	0008      	movs	r0, r1
    850c:	4310      	orrs	r0, r2
    850e:	910c      	str	r1, [sp, #48]	; 0x30
    8510:	920d      	str	r2, [sp, #52]	; 0x34
    8512:	2300      	movs	r3, #0
    8514:	0002      	movs	r2, r0
    8516:	e680      	b.n	821a <_svfprintf_r+0x3d2>
    8518:	468b      	mov	fp, r1
    851a:	4641      	mov	r1, r8
    851c:	9312      	str	r3, [sp, #72]	; 0x48
    851e:	2900      	cmp	r1, #0
    8520:	d001      	beq.n	8526 <_svfprintf_r+0x6de>
    8522:	f000 ff7f 	bl	9424 <_svfprintf_r+0x15dc>
    8526:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8528:	2b00      	cmp	r3, #0
    852a:	d100      	bne.n	852e <_svfprintf_r+0x6e6>
    852c:	e50b      	b.n	7f46 <_svfprintf_r+0xfe>
    852e:	ad28      	add	r5, sp, #160	; 0xa0
    8530:	702b      	strb	r3, [r5, #0]
    8532:	2300      	movs	r3, #0
    8534:	aa16      	add	r2, sp, #88	; 0x58
    8536:	77d3      	strb	r3, [r2, #31]
    8538:	9408      	str	r4, [sp, #32]
    853a:	e74e      	b.n	83da <_svfprintf_r+0x592>
    853c:	68bc      	ldr	r4, [r7, #8]
    853e:	4643      	mov	r3, r8
    8540:	2b00      	cmp	r3, #0
    8542:	d00f      	beq.n	8564 <_svfprintf_r+0x71c>
    8544:	aa16      	add	r2, sp, #88	; 0x58
    8546:	231f      	movs	r3, #31
    8548:	4694      	mov	ip, r2
    854a:	4463      	add	r3, ip
    854c:	6033      	str	r3, [r6, #0]
    854e:	2301      	movs	r3, #1
    8550:	6073      	str	r3, [r6, #4]
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	3401      	adds	r4, #1
    8556:	3301      	adds	r3, #1
    8558:	60bc      	str	r4, [r7, #8]
    855a:	607b      	str	r3, [r7, #4]
    855c:	2b07      	cmp	r3, #7
    855e:	dd00      	ble.n	8562 <_svfprintf_r+0x71a>
    8560:	e1b3      	b.n	88ca <_svfprintf_r+0xa82>
    8562:	3608      	adds	r6, #8
    8564:	464b      	mov	r3, r9
    8566:	2b00      	cmp	r3, #0
    8568:	d00c      	beq.n	8584 <_svfprintf_r+0x73c>
    856a:	ab1e      	add	r3, sp, #120	; 0x78
    856c:	6033      	str	r3, [r6, #0]
    856e:	2302      	movs	r3, #2
    8570:	6073      	str	r3, [r6, #4]
    8572:	687b      	ldr	r3, [r7, #4]
    8574:	3402      	adds	r4, #2
    8576:	3301      	adds	r3, #1
    8578:	60bc      	str	r4, [r7, #8]
    857a:	607b      	str	r3, [r7, #4]
    857c:	2b07      	cmp	r3, #7
    857e:	dd00      	ble.n	8582 <_svfprintf_r+0x73a>
    8580:	e1af      	b.n	88e2 <_svfprintf_r+0xa9a>
    8582:	3608      	adds	r6, #8
    8584:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8586:	2b80      	cmp	r3, #128	; 0x80
    8588:	d100      	bne.n	858c <_svfprintf_r+0x744>
    858a:	e120      	b.n	87ce <_svfprintf_r+0x986>
    858c:	4653      	mov	r3, sl
    858e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8590:	1a9d      	subs	r5, r3, r2
    8592:	2d00      	cmp	r5, #0
    8594:	dd3c      	ble.n	8610 <_svfprintf_r+0x7c8>
    8596:	4a08      	ldr	r2, [pc, #32]	; (85b8 <_svfprintf_r+0x770>)
    8598:	687b      	ldr	r3, [r7, #4]
    859a:	4691      	mov	r9, r2
    859c:	2d10      	cmp	r5, #16
    859e:	dd2c      	ble.n	85fa <_svfprintf_r+0x7b2>
    85a0:	2210      	movs	r2, #16
    85a2:	0021      	movs	r1, r4
    85a4:	4692      	mov	sl, r2
    85a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    85a8:	0032      	movs	r2, r6
    85aa:	002e      	movs	r6, r5
    85ac:	464d      	mov	r5, r9
    85ae:	e009      	b.n	85c4 <_svfprintf_r+0x77c>
    85b0:	00011bc0 	.word	0x00011bc0
    85b4:	00011bd4 	.word	0x00011bd4
    85b8:	00011c04 	.word	0x00011c04
    85bc:	3e10      	subs	r6, #16
    85be:	3208      	adds	r2, #8
    85c0:	2e10      	cmp	r6, #16
    85c2:	dd16      	ble.n	85f2 <_svfprintf_r+0x7aa>
    85c4:	4650      	mov	r0, sl
    85c6:	3110      	adds	r1, #16
    85c8:	3301      	adds	r3, #1
    85ca:	6015      	str	r5, [r2, #0]
    85cc:	6050      	str	r0, [r2, #4]
    85ce:	60b9      	str	r1, [r7, #8]
    85d0:	607b      	str	r3, [r7, #4]
    85d2:	2b07      	cmp	r3, #7
    85d4:	ddf2      	ble.n	85bc <_svfprintf_r+0x774>
    85d6:	003a      	movs	r2, r7
    85d8:	9906      	ldr	r1, [sp, #24]
    85da:	0020      	movs	r0, r4
    85dc:	f005 faa4 	bl	db28 <__ssprint_r>
    85e0:	2800      	cmp	r0, #0
    85e2:	d000      	beq.n	85e6 <_svfprintf_r+0x79e>
    85e4:	e4b7      	b.n	7f56 <_svfprintf_r+0x10e>
    85e6:	3e10      	subs	r6, #16
    85e8:	68b9      	ldr	r1, [r7, #8]
    85ea:	687b      	ldr	r3, [r7, #4]
    85ec:	aa32      	add	r2, sp, #200	; 0xc8
    85ee:	2e10      	cmp	r6, #16
    85f0:	dce8      	bgt.n	85c4 <_svfprintf_r+0x77c>
    85f2:	46a9      	mov	r9, r5
    85f4:	000c      	movs	r4, r1
    85f6:	0035      	movs	r5, r6
    85f8:	0016      	movs	r6, r2
    85fa:	464a      	mov	r2, r9
    85fc:	1964      	adds	r4, r4, r5
    85fe:	3301      	adds	r3, #1
    8600:	6032      	str	r2, [r6, #0]
    8602:	6075      	str	r5, [r6, #4]
    8604:	60bc      	str	r4, [r7, #8]
    8606:	607b      	str	r3, [r7, #4]
    8608:	2b07      	cmp	r3, #7
    860a:	dd00      	ble.n	860e <_svfprintf_r+0x7c6>
    860c:	e151      	b.n	88b2 <_svfprintf_r+0xa6a>
    860e:	3608      	adds	r6, #8
    8610:	9b08      	ldr	r3, [sp, #32]
    8612:	05db      	lsls	r3, r3, #23
    8614:	d500      	bpl.n	8618 <_svfprintf_r+0x7d0>
    8616:	e0b6      	b.n	8786 <_svfprintf_r+0x93e>
    8618:	9b11      	ldr	r3, [sp, #68]	; 0x44
    861a:	6033      	str	r3, [r6, #0]
    861c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    861e:	469c      	mov	ip, r3
    8620:	6073      	str	r3, [r6, #4]
    8622:	687b      	ldr	r3, [r7, #4]
    8624:	4464      	add	r4, ip
    8626:	3301      	adds	r3, #1
    8628:	60bc      	str	r4, [r7, #8]
    862a:	607b      	str	r3, [r7, #4]
    862c:	2b07      	cmp	r3, #7
    862e:	dd00      	ble.n	8632 <_svfprintf_r+0x7ea>
    8630:	e09d      	b.n	876e <_svfprintf_r+0x926>
    8632:	3608      	adds	r6, #8
    8634:	9b08      	ldr	r3, [sp, #32]
    8636:	075b      	lsls	r3, r3, #29
    8638:	d541      	bpl.n	86be <_svfprintf_r+0x876>
    863a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    863c:	9a07      	ldr	r2, [sp, #28]
    863e:	1a9d      	subs	r5, r3, r2
    8640:	2d00      	cmp	r5, #0
    8642:	dd3c      	ble.n	86be <_svfprintf_r+0x876>
    8644:	4ac4      	ldr	r2, [pc, #784]	; (8958 <_svfprintf_r+0xb10>)
    8646:	687b      	ldr	r3, [r7, #4]
    8648:	4690      	mov	r8, r2
    864a:	2d10      	cmp	r5, #16
    864c:	dd26      	ble.n	869c <_svfprintf_r+0x854>
    864e:	2210      	movs	r2, #16
    8650:	0021      	movs	r1, r4
    8652:	4691      	mov	r9, r2
    8654:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8656:	0032      	movs	r2, r6
    8658:	002e      	movs	r6, r5
    865a:	9d06      	ldr	r5, [sp, #24]
    865c:	e003      	b.n	8666 <_svfprintf_r+0x81e>
    865e:	3e10      	subs	r6, #16
    8660:	3208      	adds	r2, #8
    8662:	2e10      	cmp	r6, #16
    8664:	dd17      	ble.n	8696 <_svfprintf_r+0x84e>
    8666:	48bc      	ldr	r0, [pc, #752]	; (8958 <_svfprintf_r+0xb10>)
    8668:	3110      	adds	r1, #16
    866a:	6010      	str	r0, [r2, #0]
    866c:	4648      	mov	r0, r9
    866e:	3301      	adds	r3, #1
    8670:	6050      	str	r0, [r2, #4]
    8672:	60b9      	str	r1, [r7, #8]
    8674:	607b      	str	r3, [r7, #4]
    8676:	2b07      	cmp	r3, #7
    8678:	ddf1      	ble.n	865e <_svfprintf_r+0x816>
    867a:	003a      	movs	r2, r7
    867c:	0029      	movs	r1, r5
    867e:	0020      	movs	r0, r4
    8680:	f005 fa52 	bl	db28 <__ssprint_r>
    8684:	2800      	cmp	r0, #0
    8686:	d000      	beq.n	868a <_svfprintf_r+0x842>
    8688:	e465      	b.n	7f56 <_svfprintf_r+0x10e>
    868a:	3e10      	subs	r6, #16
    868c:	68b9      	ldr	r1, [r7, #8]
    868e:	687b      	ldr	r3, [r7, #4]
    8690:	aa32      	add	r2, sp, #200	; 0xc8
    8692:	2e10      	cmp	r6, #16
    8694:	dce7      	bgt.n	8666 <_svfprintf_r+0x81e>
    8696:	0035      	movs	r5, r6
    8698:	000c      	movs	r4, r1
    869a:	0016      	movs	r6, r2
    869c:	4642      	mov	r2, r8
    869e:	1964      	adds	r4, r4, r5
    86a0:	3301      	adds	r3, #1
    86a2:	c624      	stmia	r6!, {r2, r5}
    86a4:	60bc      	str	r4, [r7, #8]
    86a6:	607b      	str	r3, [r7, #4]
    86a8:	2b07      	cmp	r3, #7
    86aa:	dd08      	ble.n	86be <_svfprintf_r+0x876>
    86ac:	003a      	movs	r2, r7
    86ae:	9906      	ldr	r1, [sp, #24]
    86b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    86b2:	f005 fa39 	bl	db28 <__ssprint_r>
    86b6:	2800      	cmp	r0, #0
    86b8:	d000      	beq.n	86bc <_svfprintf_r+0x874>
    86ba:	e44c      	b.n	7f56 <_svfprintf_r+0x10e>
    86bc:	68bc      	ldr	r4, [r7, #8]
    86be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86c0:	9907      	ldr	r1, [sp, #28]
    86c2:	428b      	cmp	r3, r1
    86c4:	da00      	bge.n	86c8 <_svfprintf_r+0x880>
    86c6:	000b      	movs	r3, r1
    86c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    86ca:	4694      	mov	ip, r2
    86cc:	449c      	add	ip, r3
    86ce:	4663      	mov	r3, ip
    86d0:	930a      	str	r3, [sp, #40]	; 0x28
    86d2:	2c00      	cmp	r4, #0
    86d4:	d000      	beq.n	86d8 <_svfprintf_r+0x890>
    86d6:	e0d6      	b.n	8886 <_svfprintf_r+0xa3e>
    86d8:	2300      	movs	r3, #0
    86da:	ae32      	add	r6, sp, #200	; 0xc8
    86dc:	607b      	str	r3, [r7, #4]
    86de:	f7ff fbde 	bl	7e9e <_svfprintf_r+0x56>
    86e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    86e4:	2b01      	cmp	r3, #1
    86e6:	dc00      	bgt.n	86ea <_svfprintf_r+0x8a2>
    86e8:	e0ae      	b.n	8848 <_svfprintf_r+0xa00>
    86ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    86ec:	3401      	adds	r4, #1
    86ee:	6033      	str	r3, [r6, #0]
    86f0:	2301      	movs	r3, #1
    86f2:	6073      	str	r3, [r6, #4]
    86f4:	687b      	ldr	r3, [r7, #4]
    86f6:	60bc      	str	r4, [r7, #8]
    86f8:	3301      	adds	r3, #1
    86fa:	607b      	str	r3, [r7, #4]
    86fc:	2b07      	cmp	r3, #7
    86fe:	dd00      	ble.n	8702 <_svfprintf_r+0x8ba>
    8700:	e2df      	b.n	8cc2 <_svfprintf_r+0xe7a>
    8702:	3608      	adds	r6, #8
    8704:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8706:	3301      	adds	r3, #1
    8708:	6032      	str	r2, [r6, #0]
    870a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    870c:	4698      	mov	r8, r3
    870e:	4694      	mov	ip, r2
    8710:	4464      	add	r4, ip
    8712:	6072      	str	r2, [r6, #4]
    8714:	60bc      	str	r4, [r7, #8]
    8716:	607b      	str	r3, [r7, #4]
    8718:	2b07      	cmp	r3, #7
    871a:	dd00      	ble.n	871e <_svfprintf_r+0x8d6>
    871c:	e2de      	b.n	8cdc <_svfprintf_r+0xe94>
    871e:	3608      	adds	r6, #8
    8720:	2200      	movs	r2, #0
    8722:	2300      	movs	r3, #0
    8724:	9816      	ldr	r0, [sp, #88]	; 0x58
    8726:	9915      	ldr	r1, [sp, #84]	; 0x54
    8728:	f7fe fce0 	bl	70ec <__aeabi_dcmpeq>
    872c:	2800      	cmp	r0, #0
    872e:	d000      	beq.n	8732 <_svfprintf_r+0x8ea>
    8730:	e1a4      	b.n	8a7c <_svfprintf_r+0xc34>
    8732:	9d11      	ldr	r5, [sp, #68]	; 0x44
    8734:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8736:	3501      	adds	r5, #1
    8738:	3b01      	subs	r3, #1
    873a:	6035      	str	r5, [r6, #0]
    873c:	6073      	str	r3, [r6, #4]
    873e:	18e4      	adds	r4, r4, r3
    8740:	2301      	movs	r3, #1
    8742:	469c      	mov	ip, r3
    8744:	44e0      	add	r8, ip
    8746:	4643      	mov	r3, r8
    8748:	60bc      	str	r4, [r7, #8]
    874a:	607b      	str	r3, [r7, #4]
    874c:	2b07      	cmp	r3, #7
    874e:	dd00      	ble.n	8752 <_svfprintf_r+0x90a>
    8750:	e08b      	b.n	886a <_svfprintf_r+0xa22>
    8752:	3608      	adds	r6, #8
    8754:	ab21      	add	r3, sp, #132	; 0x84
    8756:	6033      	str	r3, [r6, #0]
    8758:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    875a:	469c      	mov	ip, r3
    875c:	6073      	str	r3, [r6, #4]
    875e:	4643      	mov	r3, r8
    8760:	4464      	add	r4, ip
    8762:	3301      	adds	r3, #1
    8764:	60bc      	str	r4, [r7, #8]
    8766:	607b      	str	r3, [r7, #4]
    8768:	2b07      	cmp	r3, #7
    876a:	dc00      	bgt.n	876e <_svfprintf_r+0x926>
    876c:	e761      	b.n	8632 <_svfprintf_r+0x7ea>
    876e:	003a      	movs	r2, r7
    8770:	9906      	ldr	r1, [sp, #24]
    8772:	9809      	ldr	r0, [sp, #36]	; 0x24
    8774:	f005 f9d8 	bl	db28 <__ssprint_r>
    8778:	2800      	cmp	r0, #0
    877a:	d001      	beq.n	8780 <_svfprintf_r+0x938>
    877c:	f7ff fbeb 	bl	7f56 <_svfprintf_r+0x10e>
    8780:	68bc      	ldr	r4, [r7, #8]
    8782:	ae32      	add	r6, sp, #200	; 0xc8
    8784:	e756      	b.n	8634 <_svfprintf_r+0x7ec>
    8786:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8788:	2b65      	cmp	r3, #101	; 0x65
    878a:	ddaa      	ble.n	86e2 <_svfprintf_r+0x89a>
    878c:	2200      	movs	r2, #0
    878e:	2300      	movs	r3, #0
    8790:	9816      	ldr	r0, [sp, #88]	; 0x58
    8792:	9915      	ldr	r1, [sp, #84]	; 0x54
    8794:	f7fe fcaa 	bl	70ec <__aeabi_dcmpeq>
    8798:	2800      	cmp	r0, #0
    879a:	d100      	bne.n	879e <_svfprintf_r+0x956>
    879c:	e0e2      	b.n	8964 <_svfprintf_r+0xb1c>
    879e:	4b6f      	ldr	r3, [pc, #444]	; (895c <_svfprintf_r+0xb14>)
    87a0:	3401      	adds	r4, #1
    87a2:	6033      	str	r3, [r6, #0]
    87a4:	2301      	movs	r3, #1
    87a6:	6073      	str	r3, [r6, #4]
    87a8:	687b      	ldr	r3, [r7, #4]
    87aa:	60bc      	str	r4, [r7, #8]
    87ac:	3301      	adds	r3, #1
    87ae:	607b      	str	r3, [r7, #4]
    87b0:	2b07      	cmp	r3, #7
    87b2:	dd00      	ble.n	87b6 <_svfprintf_r+0x96e>
    87b4:	e366      	b.n	8e84 <_svfprintf_r+0x103c>
    87b6:	3608      	adds	r6, #8
    87b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    87ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
    87bc:	4293      	cmp	r3, r2
    87be:	da00      	bge.n	87c2 <_svfprintf_r+0x97a>
    87c0:	e1a4      	b.n	8b0c <_svfprintf_r+0xcc4>
    87c2:	9b08      	ldr	r3, [sp, #32]
    87c4:	07db      	lsls	r3, r3, #31
    87c6:	d500      	bpl.n	87ca <_svfprintf_r+0x982>
    87c8:	e1a0      	b.n	8b0c <_svfprintf_r+0xcc4>
    87ca:	68bc      	ldr	r4, [r7, #8]
    87cc:	e732      	b.n	8634 <_svfprintf_r+0x7ec>
    87ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    87d0:	9a07      	ldr	r2, [sp, #28]
    87d2:	1a9d      	subs	r5, r3, r2
    87d4:	2d00      	cmp	r5, #0
    87d6:	dc00      	bgt.n	87da <_svfprintf_r+0x992>
    87d8:	e6d8      	b.n	858c <_svfprintf_r+0x744>
    87da:	4a61      	ldr	r2, [pc, #388]	; (8960 <_svfprintf_r+0xb18>)
    87dc:	687b      	ldr	r3, [r7, #4]
    87de:	4691      	mov	r9, r2
    87e0:	2d10      	cmp	r5, #16
    87e2:	dd25      	ble.n	8830 <_svfprintf_r+0x9e8>
    87e4:	2210      	movs	r2, #16
    87e6:	0021      	movs	r1, r4
    87e8:	4690      	mov	r8, r2
    87ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
    87ec:	0032      	movs	r2, r6
    87ee:	464e      	mov	r6, r9
    87f0:	e003      	b.n	87fa <_svfprintf_r+0x9b2>
    87f2:	3d10      	subs	r5, #16
    87f4:	3208      	adds	r2, #8
    87f6:	2d10      	cmp	r5, #16
    87f8:	dd17      	ble.n	882a <_svfprintf_r+0x9e2>
    87fa:	4640      	mov	r0, r8
    87fc:	3110      	adds	r1, #16
    87fe:	3301      	adds	r3, #1
    8800:	6016      	str	r6, [r2, #0]
    8802:	6050      	str	r0, [r2, #4]
    8804:	60b9      	str	r1, [r7, #8]
    8806:	607b      	str	r3, [r7, #4]
    8808:	2b07      	cmp	r3, #7
    880a:	ddf2      	ble.n	87f2 <_svfprintf_r+0x9aa>
    880c:	003a      	movs	r2, r7
    880e:	9906      	ldr	r1, [sp, #24]
    8810:	0020      	movs	r0, r4
    8812:	f005 f989 	bl	db28 <__ssprint_r>
    8816:	2800      	cmp	r0, #0
    8818:	d001      	beq.n	881e <_svfprintf_r+0x9d6>
    881a:	f7ff fb9c 	bl	7f56 <_svfprintf_r+0x10e>
    881e:	3d10      	subs	r5, #16
    8820:	68b9      	ldr	r1, [r7, #8]
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	aa32      	add	r2, sp, #200	; 0xc8
    8826:	2d10      	cmp	r5, #16
    8828:	dce7      	bgt.n	87fa <_svfprintf_r+0x9b2>
    882a:	46b1      	mov	r9, r6
    882c:	000c      	movs	r4, r1
    882e:	0016      	movs	r6, r2
    8830:	464a      	mov	r2, r9
    8832:	1964      	adds	r4, r4, r5
    8834:	3301      	adds	r3, #1
    8836:	6032      	str	r2, [r6, #0]
    8838:	6075      	str	r5, [r6, #4]
    883a:	60bc      	str	r4, [r7, #8]
    883c:	607b      	str	r3, [r7, #4]
    883e:	2b07      	cmp	r3, #7
    8840:	dd00      	ble.n	8844 <_svfprintf_r+0x9fc>
    8842:	e27e      	b.n	8d42 <_svfprintf_r+0xefa>
    8844:	3608      	adds	r6, #8
    8846:	e6a1      	b.n	858c <_svfprintf_r+0x744>
    8848:	2301      	movs	r3, #1
    884a:	9a08      	ldr	r2, [sp, #32]
    884c:	4213      	tst	r3, r2
    884e:	d000      	beq.n	8852 <_svfprintf_r+0xa0a>
    8850:	e74b      	b.n	86ea <_svfprintf_r+0x8a2>
    8852:	6073      	str	r3, [r6, #4]
    8854:	687b      	ldr	r3, [r7, #4]
    8856:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8858:	3301      	adds	r3, #1
    885a:	3401      	adds	r4, #1
    885c:	6032      	str	r2, [r6, #0]
    885e:	60bc      	str	r4, [r7, #8]
    8860:	4698      	mov	r8, r3
    8862:	607b      	str	r3, [r7, #4]
    8864:	2b07      	cmp	r3, #7
    8866:	dc00      	bgt.n	886a <_svfprintf_r+0xa22>
    8868:	e773      	b.n	8752 <_svfprintf_r+0x90a>
    886a:	003a      	movs	r2, r7
    886c:	9906      	ldr	r1, [sp, #24]
    886e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8870:	f005 f95a 	bl	db28 <__ssprint_r>
    8874:	2800      	cmp	r0, #0
    8876:	d001      	beq.n	887c <_svfprintf_r+0xa34>
    8878:	f7ff fb6d 	bl	7f56 <_svfprintf_r+0x10e>
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	68bc      	ldr	r4, [r7, #8]
    8880:	4698      	mov	r8, r3
    8882:	ae32      	add	r6, sp, #200	; 0xc8
    8884:	e766      	b.n	8754 <_svfprintf_r+0x90c>
    8886:	003a      	movs	r2, r7
    8888:	9906      	ldr	r1, [sp, #24]
    888a:	9809      	ldr	r0, [sp, #36]	; 0x24
    888c:	f005 f94c 	bl	db28 <__ssprint_r>
    8890:	2800      	cmp	r0, #0
    8892:	d100      	bne.n	8896 <_svfprintf_r+0xa4e>
    8894:	e720      	b.n	86d8 <_svfprintf_r+0x890>
    8896:	f7ff fb5e 	bl	7f56 <_svfprintf_r+0x10e>
    889a:	9c08      	ldr	r4, [sp, #32]
    889c:	2b01      	cmp	r3, #1
    889e:	d100      	bne.n	88a2 <_svfprintf_r+0xa5a>
    88a0:	e184      	b.n	8bac <_svfprintf_r+0xd64>
    88a2:	2b02      	cmp	r3, #2
    88a4:	d129      	bne.n	88fa <_svfprintf_r+0xab2>
    88a6:	9408      	str	r4, [sp, #32]
    88a8:	2300      	movs	r3, #0
    88aa:	2400      	movs	r4, #0
    88ac:	930c      	str	r3, [sp, #48]	; 0x30
    88ae:	940d      	str	r4, [sp, #52]	; 0x34
    88b0:	e4c5      	b.n	823e <_svfprintf_r+0x3f6>
    88b2:	003a      	movs	r2, r7
    88b4:	9906      	ldr	r1, [sp, #24]
    88b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    88b8:	f005 f936 	bl	db28 <__ssprint_r>
    88bc:	2800      	cmp	r0, #0
    88be:	d001      	beq.n	88c4 <_svfprintf_r+0xa7c>
    88c0:	f7ff fb49 	bl	7f56 <_svfprintf_r+0x10e>
    88c4:	68bc      	ldr	r4, [r7, #8]
    88c6:	ae32      	add	r6, sp, #200	; 0xc8
    88c8:	e6a2      	b.n	8610 <_svfprintf_r+0x7c8>
    88ca:	003a      	movs	r2, r7
    88cc:	9906      	ldr	r1, [sp, #24]
    88ce:	9809      	ldr	r0, [sp, #36]	; 0x24
    88d0:	f005 f92a 	bl	db28 <__ssprint_r>
    88d4:	2800      	cmp	r0, #0
    88d6:	d001      	beq.n	88dc <_svfprintf_r+0xa94>
    88d8:	f7ff fb3d 	bl	7f56 <_svfprintf_r+0x10e>
    88dc:	68bc      	ldr	r4, [r7, #8]
    88de:	ae32      	add	r6, sp, #200	; 0xc8
    88e0:	e640      	b.n	8564 <_svfprintf_r+0x71c>
    88e2:	003a      	movs	r2, r7
    88e4:	9906      	ldr	r1, [sp, #24]
    88e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    88e8:	f005 f91e 	bl	db28 <__ssprint_r>
    88ec:	2800      	cmp	r0, #0
    88ee:	d001      	beq.n	88f4 <_svfprintf_r+0xaac>
    88f0:	f7ff fb31 	bl	7f56 <_svfprintf_r+0x10e>
    88f4:	68bc      	ldr	r4, [r7, #8]
    88f6:	ae32      	add	r6, sp, #200	; 0xc8
    88f8:	e644      	b.n	8584 <_svfprintf_r+0x73c>
    88fa:	9408      	str	r4, [sp, #32]
    88fc:	2300      	movs	r3, #0
    88fe:	2400      	movs	r4, #0
    8900:	930c      	str	r3, [sp, #48]	; 0x30
    8902:	940d      	str	r4, [sp, #52]	; 0x34
    8904:	980c      	ldr	r0, [sp, #48]	; 0x30
    8906:	990d      	ldr	r1, [sp, #52]	; 0x34
    8908:	465b      	mov	r3, fp
    890a:	aa32      	add	r2, sp, #200	; 0xc8
    890c:	9307      	str	r3, [sp, #28]
    890e:	4691      	mov	r9, r2
    8910:	46b3      	mov	fp, r6
    8912:	e000      	b.n	8916 <_svfprintf_r+0xace>
    8914:	46a1      	mov	r9, r4
    8916:	074a      	lsls	r2, r1, #29
    8918:	4694      	mov	ip, r2
    891a:	464b      	mov	r3, r9
    891c:	4665      	mov	r5, ip
    891e:	1e5c      	subs	r4, r3, #1
    8920:	08c6      	lsrs	r6, r0, #3
    8922:	2307      	movs	r3, #7
    8924:	08ca      	lsrs	r2, r1, #3
    8926:	4335      	orrs	r5, r6
    8928:	0011      	movs	r1, r2
    892a:	002a      	movs	r2, r5
    892c:	4003      	ands	r3, r0
    892e:	3330      	adds	r3, #48	; 0x30
    8930:	7023      	strb	r3, [r4, #0]
    8932:	0028      	movs	r0, r5
    8934:	430a      	orrs	r2, r1
    8936:	d1ed      	bne.n	8914 <_svfprintf_r+0xacc>
    8938:	900c      	str	r0, [sp, #48]	; 0x30
    893a:	910d      	str	r1, [sp, #52]	; 0x34
    893c:	9907      	ldr	r1, [sp, #28]
    893e:	465e      	mov	r6, fp
    8940:	468b      	mov	fp, r1
    8942:	9908      	ldr	r1, [sp, #32]
    8944:	464a      	mov	r2, r9
    8946:	9411      	str	r4, [sp, #68]	; 0x44
    8948:	07c9      	lsls	r1, r1, #31
    894a:	d500      	bpl.n	894e <_svfprintf_r+0xb06>
    894c:	e13d      	b.n	8bca <_svfprintf_r+0xd82>
    894e:	ab32      	add	r3, sp, #200	; 0xc8
    8950:	1b1b      	subs	r3, r3, r4
    8952:	930e      	str	r3, [sp, #56]	; 0x38
    8954:	f7ff fb88 	bl	8068 <_svfprintf_r+0x220>
    8958:	00011bf4 	.word	0x00011bf4
    895c:	00011bf0 	.word	0x00011bf0
    8960:	00011c04 	.word	0x00011c04
    8964:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8966:	2800      	cmp	r0, #0
    8968:	dc00      	bgt.n	896c <_svfprintf_r+0xb24>
    896a:	e296      	b.n	8e9a <_svfprintf_r+0x1052>
    896c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    896e:	9914      	ldr	r1, [sp, #80]	; 0x50
    8970:	0013      	movs	r3, r2
    8972:	4690      	mov	r8, r2
    8974:	428b      	cmp	r3, r1
    8976:	dd00      	ble.n	897a <_svfprintf_r+0xb32>
    8978:	4688      	mov	r8, r1
    897a:	4643      	mov	r3, r8
    897c:	2b00      	cmp	r3, #0
    897e:	dd0c      	ble.n	899a <_svfprintf_r+0xb52>
    8980:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8982:	4444      	add	r4, r8
    8984:	6033      	str	r3, [r6, #0]
    8986:	4643      	mov	r3, r8
    8988:	6073      	str	r3, [r6, #4]
    898a:	687b      	ldr	r3, [r7, #4]
    898c:	60bc      	str	r4, [r7, #8]
    898e:	3301      	adds	r3, #1
    8990:	607b      	str	r3, [r7, #4]
    8992:	2b07      	cmp	r3, #7
    8994:	dd00      	ble.n	8998 <_svfprintf_r+0xb50>
    8996:	e3b7      	b.n	9108 <_svfprintf_r+0x12c0>
    8998:	3608      	adds	r6, #8
    899a:	4643      	mov	r3, r8
    899c:	43db      	mvns	r3, r3
    899e:	4642      	mov	r2, r8
    89a0:	17db      	asrs	r3, r3, #31
    89a2:	4013      	ands	r3, r2
    89a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    89a6:	1ad3      	subs	r3, r2, r3
    89a8:	4698      	mov	r8, r3
    89aa:	2b00      	cmp	r3, #0
    89ac:	dc00      	bgt.n	89b0 <_svfprintf_r+0xb68>
    89ae:	e128      	b.n	8c02 <_svfprintf_r+0xdba>
    89b0:	2b10      	cmp	r3, #16
    89b2:	dc01      	bgt.n	89b8 <_svfprintf_r+0xb70>
    89b4:	f000 fce7 	bl	9386 <_svfprintf_r+0x153e>
    89b8:	4acf      	ldr	r2, [pc, #828]	; (8cf8 <_svfprintf_r+0xeb0>)
    89ba:	0021      	movs	r1, r4
    89bc:	4691      	mov	r9, r2
    89be:	2210      	movs	r2, #16
    89c0:	687b      	ldr	r3, [r7, #4]
    89c2:	4692      	mov	sl, r2
    89c4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    89c6:	0032      	movs	r2, r6
    89c8:	464c      	mov	r4, r9
    89ca:	4646      	mov	r6, r8
    89cc:	e004      	b.n	89d8 <_svfprintf_r+0xb90>
    89ce:	3208      	adds	r2, #8
    89d0:	3e10      	subs	r6, #16
    89d2:	2e10      	cmp	r6, #16
    89d4:	dc00      	bgt.n	89d8 <_svfprintf_r+0xb90>
    89d6:	e104      	b.n	8be2 <_svfprintf_r+0xd9a>
    89d8:	4650      	mov	r0, sl
    89da:	3110      	adds	r1, #16
    89dc:	3301      	adds	r3, #1
    89de:	6014      	str	r4, [r2, #0]
    89e0:	6050      	str	r0, [r2, #4]
    89e2:	60b9      	str	r1, [r7, #8]
    89e4:	607b      	str	r3, [r7, #4]
    89e6:	2b07      	cmp	r3, #7
    89e8:	ddf1      	ble.n	89ce <_svfprintf_r+0xb86>
    89ea:	003a      	movs	r2, r7
    89ec:	9906      	ldr	r1, [sp, #24]
    89ee:	0028      	movs	r0, r5
    89f0:	f005 f89a 	bl	db28 <__ssprint_r>
    89f4:	2800      	cmp	r0, #0
    89f6:	d001      	beq.n	89fc <_svfprintf_r+0xbb4>
    89f8:	f7ff faad 	bl	7f56 <_svfprintf_r+0x10e>
    89fc:	68b9      	ldr	r1, [r7, #8]
    89fe:	687b      	ldr	r3, [r7, #4]
    8a00:	aa32      	add	r2, sp, #200	; 0xc8
    8a02:	e7e5      	b.n	89d0 <_svfprintf_r+0xb88>
    8a04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a06:	2b00      	cmp	r3, #0
    8a08:	d100      	bne.n	8a0c <_svfprintf_r+0xbc4>
    8a0a:	e0ca      	b.n	8ba2 <_svfprintf_r+0xd5a>
    8a0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    8a0e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    8a10:	ab32      	add	r3, sp, #200	; 0xc8
    8a12:	46b1      	mov	r9, r6
    8a14:	001e      	movs	r6, r3
    8a16:	0020      	movs	r0, r4
    8a18:	0029      	movs	r1, r5
    8a1a:	220a      	movs	r2, #10
    8a1c:	2300      	movs	r3, #0
    8a1e:	f7fc fe5f 	bl	56e0 <__aeabi_uldivmod>
    8a22:	3e01      	subs	r6, #1
    8a24:	3230      	adds	r2, #48	; 0x30
    8a26:	7032      	strb	r2, [r6, #0]
    8a28:	2300      	movs	r3, #0
    8a2a:	0020      	movs	r0, r4
    8a2c:	0029      	movs	r1, r5
    8a2e:	220a      	movs	r2, #10
    8a30:	f7fc fe56 	bl	56e0 <__aeabi_uldivmod>
    8a34:	0003      	movs	r3, r0
    8a36:	0004      	movs	r4, r0
    8a38:	000d      	movs	r5, r1
    8a3a:	430b      	orrs	r3, r1
    8a3c:	d1eb      	bne.n	8a16 <_svfprintf_r+0xbce>
    8a3e:	0032      	movs	r2, r6
    8a40:	ab32      	add	r3, sp, #200	; 0xc8
    8a42:	1a9b      	subs	r3, r3, r2
    8a44:	9611      	str	r6, [sp, #68]	; 0x44
    8a46:	940c      	str	r4, [sp, #48]	; 0x30
    8a48:	950d      	str	r5, [sp, #52]	; 0x34
    8a4a:	464e      	mov	r6, r9
    8a4c:	930e      	str	r3, [sp, #56]	; 0x38
    8a4e:	f7ff fb0b 	bl	8068 <_svfprintf_r+0x220>
    8a52:	2300      	movs	r3, #0
    8a54:	930e      	str	r3, [sp, #56]	; 0x38
    8a56:	ab32      	add	r3, sp, #200	; 0xc8
    8a58:	9311      	str	r3, [sp, #68]	; 0x44
    8a5a:	f7ff fb05 	bl	8068 <_svfprintf_r+0x220>
    8a5e:	003a      	movs	r2, r7
    8a60:	9906      	ldr	r1, [sp, #24]
    8a62:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a64:	f005 f860 	bl	db28 <__ssprint_r>
    8a68:	2800      	cmp	r0, #0
    8a6a:	d001      	beq.n	8a70 <_svfprintf_r+0xc28>
    8a6c:	f7ff fa73 	bl	7f56 <_svfprintf_r+0x10e>
    8a70:	ab16      	add	r3, sp, #88	; 0x58
    8a72:	7fdb      	ldrb	r3, [r3, #31]
    8a74:	68bc      	ldr	r4, [r7, #8]
    8a76:	4698      	mov	r8, r3
    8a78:	ae32      	add	r6, sp, #200	; 0xc8
    8a7a:	e560      	b.n	853e <_svfprintf_r+0x6f6>
    8a7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8a7e:	1e5d      	subs	r5, r3, #1
    8a80:	2d00      	cmp	r5, #0
    8a82:	dc00      	bgt.n	8a86 <_svfprintf_r+0xc3e>
    8a84:	e666      	b.n	8754 <_svfprintf_r+0x90c>
    8a86:	4b9c      	ldr	r3, [pc, #624]	; (8cf8 <_svfprintf_r+0xeb0>)
    8a88:	4699      	mov	r9, r3
    8a8a:	2d10      	cmp	r5, #16
    8a8c:	dd29      	ble.n	8ae2 <_svfprintf_r+0xc9a>
    8a8e:	2310      	movs	r3, #16
    8a90:	0032      	movs	r2, r6
    8a92:	469a      	mov	sl, r3
    8a94:	002e      	movs	r6, r5
    8a96:	0021      	movs	r1, r4
    8a98:	4643      	mov	r3, r8
    8a9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8a9c:	464d      	mov	r5, r9
    8a9e:	e003      	b.n	8aa8 <_svfprintf_r+0xc60>
    8aa0:	3e10      	subs	r6, #16
    8aa2:	3208      	adds	r2, #8
    8aa4:	2e10      	cmp	r6, #16
    8aa6:	dd17      	ble.n	8ad8 <_svfprintf_r+0xc90>
    8aa8:	4650      	mov	r0, sl
    8aaa:	3110      	adds	r1, #16
    8aac:	3301      	adds	r3, #1
    8aae:	6015      	str	r5, [r2, #0]
    8ab0:	6050      	str	r0, [r2, #4]
    8ab2:	60b9      	str	r1, [r7, #8]
    8ab4:	607b      	str	r3, [r7, #4]
    8ab6:	2b07      	cmp	r3, #7
    8ab8:	ddf2      	ble.n	8aa0 <_svfprintf_r+0xc58>
    8aba:	003a      	movs	r2, r7
    8abc:	9906      	ldr	r1, [sp, #24]
    8abe:	0020      	movs	r0, r4
    8ac0:	f005 f832 	bl	db28 <__ssprint_r>
    8ac4:	2800      	cmp	r0, #0
    8ac6:	d001      	beq.n	8acc <_svfprintf_r+0xc84>
    8ac8:	f7ff fa45 	bl	7f56 <_svfprintf_r+0x10e>
    8acc:	3e10      	subs	r6, #16
    8ace:	68b9      	ldr	r1, [r7, #8]
    8ad0:	687b      	ldr	r3, [r7, #4]
    8ad2:	aa32      	add	r2, sp, #200	; 0xc8
    8ad4:	2e10      	cmp	r6, #16
    8ad6:	dce7      	bgt.n	8aa8 <_svfprintf_r+0xc60>
    8ad8:	46a9      	mov	r9, r5
    8ada:	000c      	movs	r4, r1
    8adc:	0035      	movs	r5, r6
    8ade:	4698      	mov	r8, r3
    8ae0:	0016      	movs	r6, r2
    8ae2:	464b      	mov	r3, r9
    8ae4:	6075      	str	r5, [r6, #4]
    8ae6:	6033      	str	r3, [r6, #0]
    8ae8:	1964      	adds	r4, r4, r5
    8aea:	e629      	b.n	8740 <_svfprintf_r+0x8f8>
    8aec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8aee:	681a      	ldr	r2, [r3, #0]
    8af0:	f7ff fbfb 	bl	82ea <_svfprintf_r+0x4a2>
    8af4:	6813      	ldr	r3, [r2, #0]
    8af6:	9307      	str	r3, [sp, #28]
    8af8:	f7ff fa82 	bl	8000 <_svfprintf_r+0x1b8>
    8afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8afe:	681a      	ldr	r2, [r3, #0]
    8b00:	f7ff fb84 	bl	820c <_svfprintf_r+0x3c4>
    8b04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b06:	681a      	ldr	r2, [r3, #0]
    8b08:	f7ff fbd1 	bl	82ae <_svfprintf_r+0x466>
    8b0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8b0e:	68ba      	ldr	r2, [r7, #8]
    8b10:	6033      	str	r3, [r6, #0]
    8b12:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8b14:	469c      	mov	ip, r3
    8b16:	6073      	str	r3, [r6, #4]
    8b18:	687b      	ldr	r3, [r7, #4]
    8b1a:	4462      	add	r2, ip
    8b1c:	3301      	adds	r3, #1
    8b1e:	0014      	movs	r4, r2
    8b20:	60ba      	str	r2, [r7, #8]
    8b22:	607b      	str	r3, [r7, #4]
    8b24:	2b07      	cmp	r3, #7
    8b26:	dd00      	ble.n	8b2a <_svfprintf_r+0xce2>
    8b28:	e202      	b.n	8f30 <_svfprintf_r+0x10e8>
    8b2a:	3608      	adds	r6, #8
    8b2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8b2e:	1e5d      	subs	r5, r3, #1
    8b30:	2d00      	cmp	r5, #0
    8b32:	dc00      	bgt.n	8b36 <_svfprintf_r+0xcee>
    8b34:	e57e      	b.n	8634 <_svfprintf_r+0x7ec>
    8b36:	4a70      	ldr	r2, [pc, #448]	; (8cf8 <_svfprintf_r+0xeb0>)
    8b38:	687b      	ldr	r3, [r7, #4]
    8b3a:	4691      	mov	r9, r2
    8b3c:	2d10      	cmp	r5, #16
    8b3e:	dd25      	ble.n	8b8c <_svfprintf_r+0xd44>
    8b40:	2210      	movs	r2, #16
    8b42:	0021      	movs	r1, r4
    8b44:	4690      	mov	r8, r2
    8b46:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8b48:	0032      	movs	r2, r6
    8b4a:	002e      	movs	r6, r5
    8b4c:	464d      	mov	r5, r9
    8b4e:	e003      	b.n	8b58 <_svfprintf_r+0xd10>
    8b50:	3208      	adds	r2, #8
    8b52:	3e10      	subs	r6, #16
    8b54:	2e10      	cmp	r6, #16
    8b56:	dd15      	ble.n	8b84 <_svfprintf_r+0xd3c>
    8b58:	4640      	mov	r0, r8
    8b5a:	3110      	adds	r1, #16
    8b5c:	3301      	adds	r3, #1
    8b5e:	6015      	str	r5, [r2, #0]
    8b60:	6050      	str	r0, [r2, #4]
    8b62:	60b9      	str	r1, [r7, #8]
    8b64:	607b      	str	r3, [r7, #4]
    8b66:	2b07      	cmp	r3, #7
    8b68:	ddf2      	ble.n	8b50 <_svfprintf_r+0xd08>
    8b6a:	003a      	movs	r2, r7
    8b6c:	9906      	ldr	r1, [sp, #24]
    8b6e:	0020      	movs	r0, r4
    8b70:	f004 ffda 	bl	db28 <__ssprint_r>
    8b74:	2800      	cmp	r0, #0
    8b76:	d001      	beq.n	8b7c <_svfprintf_r+0xd34>
    8b78:	f7ff f9ed 	bl	7f56 <_svfprintf_r+0x10e>
    8b7c:	68b9      	ldr	r1, [r7, #8]
    8b7e:	687b      	ldr	r3, [r7, #4]
    8b80:	aa32      	add	r2, sp, #200	; 0xc8
    8b82:	e7e6      	b.n	8b52 <_svfprintf_r+0xd0a>
    8b84:	46a9      	mov	r9, r5
    8b86:	000c      	movs	r4, r1
    8b88:	0035      	movs	r5, r6
    8b8a:	0016      	movs	r6, r2
    8b8c:	464a      	mov	r2, r9
    8b8e:	1964      	adds	r4, r4, r5
    8b90:	3301      	adds	r3, #1
    8b92:	6032      	str	r2, [r6, #0]
    8b94:	6075      	str	r5, [r6, #4]
    8b96:	60bc      	str	r4, [r7, #8]
    8b98:	607b      	str	r3, [r7, #4]
    8b9a:	2b07      	cmp	r3, #7
    8b9c:	dc00      	bgt.n	8ba0 <_svfprintf_r+0xd58>
    8b9e:	e548      	b.n	8632 <_svfprintf_r+0x7ea>
    8ba0:	e5e5      	b.n	876e <_svfprintf_r+0x926>
    8ba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8ba4:	2b09      	cmp	r3, #9
    8ba6:	d900      	bls.n	8baa <_svfprintf_r+0xd62>
    8ba8:	e730      	b.n	8a0c <_svfprintf_r+0xbc4>
    8baa:	9c08      	ldr	r4, [sp, #32]
    8bac:	2227      	movs	r2, #39	; 0x27
    8bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    8bb0:	a928      	add	r1, sp, #160	; 0xa0
    8bb2:	3330      	adds	r3, #48	; 0x30
    8bb4:	548b      	strb	r3, [r1, r2]
    8bb6:	2301      	movs	r3, #1
    8bb8:	aa16      	add	r2, sp, #88	; 0x58
    8bba:	4694      	mov	ip, r2
    8bbc:	930e      	str	r3, [sp, #56]	; 0x38
    8bbe:	336e      	adds	r3, #110	; 0x6e
    8bc0:	4463      	add	r3, ip
    8bc2:	9408      	str	r4, [sp, #32]
    8bc4:	9311      	str	r3, [sp, #68]	; 0x44
    8bc6:	f7ff fa4f 	bl	8068 <_svfprintf_r+0x220>
    8bca:	2b30      	cmp	r3, #48	; 0x30
    8bcc:	d100      	bne.n	8bd0 <_svfprintf_r+0xd88>
    8bce:	e20b      	b.n	8fe8 <_svfprintf_r+0x11a0>
    8bd0:	2330      	movs	r3, #48	; 0x30
    8bd2:	3a02      	subs	r2, #2
    8bd4:	7013      	strb	r3, [r2, #0]
    8bd6:	ab32      	add	r3, sp, #200	; 0xc8
    8bd8:	1a9b      	subs	r3, r3, r2
    8bda:	930e      	str	r3, [sp, #56]	; 0x38
    8bdc:	9211      	str	r2, [sp, #68]	; 0x44
    8bde:	f7ff fa43 	bl	8068 <_svfprintf_r+0x220>
    8be2:	46b0      	mov	r8, r6
    8be4:	46a1      	mov	r9, r4
    8be6:	0016      	movs	r6, r2
    8be8:	000c      	movs	r4, r1
    8bea:	464a      	mov	r2, r9
    8bec:	6032      	str	r2, [r6, #0]
    8bee:	4642      	mov	r2, r8
    8bf0:	4444      	add	r4, r8
    8bf2:	3301      	adds	r3, #1
    8bf4:	6072      	str	r2, [r6, #4]
    8bf6:	60bc      	str	r4, [r7, #8]
    8bf8:	607b      	str	r3, [r7, #4]
    8bfa:	2b07      	cmp	r3, #7
    8bfc:	dd00      	ble.n	8c00 <_svfprintf_r+0xdb8>
    8bfe:	e29c      	b.n	913a <_svfprintf_r+0x12f2>
    8c00:	3608      	adds	r6, #8
    8c02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8c04:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8c06:	4293      	cmp	r3, r2
    8c08:	db4c      	blt.n	8ca4 <_svfprintf_r+0xe5c>
    8c0a:	9a08      	ldr	r2, [sp, #32]
    8c0c:	07d2      	lsls	r2, r2, #31
    8c0e:	d449      	bmi.n	8ca4 <_svfprintf_r+0xe5c>
    8c10:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8c12:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8c14:	1ad3      	subs	r3, r2, r3
    8c16:	1a52      	subs	r2, r2, r1
    8c18:	4690      	mov	r8, r2
    8c1a:	429a      	cmp	r2, r3
    8c1c:	dd00      	ble.n	8c20 <_svfprintf_r+0xdd8>
    8c1e:	4698      	mov	r8, r3
    8c20:	4642      	mov	r2, r8
    8c22:	2a00      	cmp	r2, #0
    8c24:	dd0f      	ble.n	8c46 <_svfprintf_r+0xdfe>
    8c26:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8c28:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8c2a:	468c      	mov	ip, r1
    8c2c:	4462      	add	r2, ip
    8c2e:	6032      	str	r2, [r6, #0]
    8c30:	4642      	mov	r2, r8
    8c32:	6072      	str	r2, [r6, #4]
    8c34:	687a      	ldr	r2, [r7, #4]
    8c36:	4444      	add	r4, r8
    8c38:	3201      	adds	r2, #1
    8c3a:	60bc      	str	r4, [r7, #8]
    8c3c:	607a      	str	r2, [r7, #4]
    8c3e:	2a07      	cmp	r2, #7
    8c40:	dd00      	ble.n	8c44 <_svfprintf_r+0xdfc>
    8c42:	e286      	b.n	9152 <_svfprintf_r+0x130a>
    8c44:	3608      	adds	r6, #8
    8c46:	4642      	mov	r2, r8
    8c48:	43d5      	mvns	r5, r2
    8c4a:	17ed      	asrs	r5, r5, #31
    8c4c:	4015      	ands	r5, r2
    8c4e:	1b5d      	subs	r5, r3, r5
    8c50:	2d00      	cmp	r5, #0
    8c52:	dc00      	bgt.n	8c56 <_svfprintf_r+0xe0e>
    8c54:	e4ee      	b.n	8634 <_svfprintf_r+0x7ec>
    8c56:	4a28      	ldr	r2, [pc, #160]	; (8cf8 <_svfprintf_r+0xeb0>)
    8c58:	687b      	ldr	r3, [r7, #4]
    8c5a:	4691      	mov	r9, r2
    8c5c:	2d10      	cmp	r5, #16
    8c5e:	dd95      	ble.n	8b8c <_svfprintf_r+0xd44>
    8c60:	2210      	movs	r2, #16
    8c62:	0021      	movs	r1, r4
    8c64:	4690      	mov	r8, r2
    8c66:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8c68:	0032      	movs	r2, r6
    8c6a:	002e      	movs	r6, r5
    8c6c:	464d      	mov	r5, r9
    8c6e:	e003      	b.n	8c78 <_svfprintf_r+0xe30>
    8c70:	3208      	adds	r2, #8
    8c72:	3e10      	subs	r6, #16
    8c74:	2e10      	cmp	r6, #16
    8c76:	dd85      	ble.n	8b84 <_svfprintf_r+0xd3c>
    8c78:	4640      	mov	r0, r8
    8c7a:	3110      	adds	r1, #16
    8c7c:	3301      	adds	r3, #1
    8c7e:	6015      	str	r5, [r2, #0]
    8c80:	6050      	str	r0, [r2, #4]
    8c82:	60b9      	str	r1, [r7, #8]
    8c84:	607b      	str	r3, [r7, #4]
    8c86:	2b07      	cmp	r3, #7
    8c88:	ddf2      	ble.n	8c70 <_svfprintf_r+0xe28>
    8c8a:	003a      	movs	r2, r7
    8c8c:	9906      	ldr	r1, [sp, #24]
    8c8e:	0020      	movs	r0, r4
    8c90:	f004 ff4a 	bl	db28 <__ssprint_r>
    8c94:	2800      	cmp	r0, #0
    8c96:	d001      	beq.n	8c9c <_svfprintf_r+0xe54>
    8c98:	f7ff f95d 	bl	7f56 <_svfprintf_r+0x10e>
    8c9c:	68b9      	ldr	r1, [r7, #8]
    8c9e:	687b      	ldr	r3, [r7, #4]
    8ca0:	aa32      	add	r2, sp, #200	; 0xc8
    8ca2:	e7e6      	b.n	8c72 <_svfprintf_r+0xe2a>
    8ca4:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8ca6:	6032      	str	r2, [r6, #0]
    8ca8:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8caa:	4694      	mov	ip, r2
    8cac:	6072      	str	r2, [r6, #4]
    8cae:	687a      	ldr	r2, [r7, #4]
    8cb0:	4464      	add	r4, ip
    8cb2:	3201      	adds	r2, #1
    8cb4:	60bc      	str	r4, [r7, #8]
    8cb6:	607a      	str	r2, [r7, #4]
    8cb8:	2a07      	cmp	r2, #7
    8cba:	dd00      	ble.n	8cbe <_svfprintf_r+0xe76>
    8cbc:	e230      	b.n	9120 <_svfprintf_r+0x12d8>
    8cbe:	3608      	adds	r6, #8
    8cc0:	e7a6      	b.n	8c10 <_svfprintf_r+0xdc8>
    8cc2:	003a      	movs	r2, r7
    8cc4:	9906      	ldr	r1, [sp, #24]
    8cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
    8cc8:	f004 ff2e 	bl	db28 <__ssprint_r>
    8ccc:	2800      	cmp	r0, #0
    8cce:	d001      	beq.n	8cd4 <_svfprintf_r+0xe8c>
    8cd0:	f7ff f941 	bl	7f56 <_svfprintf_r+0x10e>
    8cd4:	68bc      	ldr	r4, [r7, #8]
    8cd6:	687b      	ldr	r3, [r7, #4]
    8cd8:	ae32      	add	r6, sp, #200	; 0xc8
    8cda:	e513      	b.n	8704 <_svfprintf_r+0x8bc>
    8cdc:	003a      	movs	r2, r7
    8cde:	9906      	ldr	r1, [sp, #24]
    8ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ce2:	f004 ff21 	bl	db28 <__ssprint_r>
    8ce6:	2800      	cmp	r0, #0
    8ce8:	d001      	beq.n	8cee <_svfprintf_r+0xea6>
    8cea:	f7ff f934 	bl	7f56 <_svfprintf_r+0x10e>
    8cee:	687b      	ldr	r3, [r7, #4]
    8cf0:	68bc      	ldr	r4, [r7, #8]
    8cf2:	4698      	mov	r8, r3
    8cf4:	ae32      	add	r6, sp, #200	; 0xc8
    8cf6:	e513      	b.n	8720 <_svfprintf_r+0x8d8>
    8cf8:	00011c04 	.word	0x00011c04
    8cfc:	2307      	movs	r3, #7
    8cfe:	3207      	adds	r2, #7
    8d00:	439a      	bics	r2, r3
    8d02:	3301      	adds	r3, #1
    8d04:	469c      	mov	ip, r3
    8d06:	4494      	add	ip, r2
    8d08:	4663      	mov	r3, ip
    8d0a:	930f      	str	r3, [sp, #60]	; 0x3c
    8d0c:	6853      	ldr	r3, [r2, #4]
    8d0e:	6812      	ldr	r2, [r2, #0]
    8d10:	930d      	str	r3, [sp, #52]	; 0x34
    8d12:	920c      	str	r2, [sp, #48]	; 0x30
    8d14:	2b00      	cmp	r3, #0
    8d16:	db01      	blt.n	8d1c <_svfprintf_r+0xed4>
    8d18:	f7ff f97a 	bl	8010 <_svfprintf_r+0x1c8>
    8d1c:	980c      	ldr	r0, [sp, #48]	; 0x30
    8d1e:	990d      	ldr	r1, [sp, #52]	; 0x34
    8d20:	2300      	movs	r3, #0
    8d22:	4242      	negs	r2, r0
    8d24:	418b      	sbcs	r3, r1
    8d26:	0011      	movs	r1, r2
    8d28:	001a      	movs	r2, r3
    8d2a:	232d      	movs	r3, #45	; 0x2d
    8d2c:	a816      	add	r0, sp, #88	; 0x58
    8d2e:	77c3      	strb	r3, [r0, #31]
    8d30:	0008      	movs	r0, r1
    8d32:	4310      	orrs	r0, r2
    8d34:	910c      	str	r1, [sp, #48]	; 0x30
    8d36:	920d      	str	r2, [sp, #52]	; 0x34
    8d38:	4698      	mov	r8, r3
    8d3a:	0002      	movs	r2, r0
    8d3c:	3b2c      	subs	r3, #44	; 0x2c
    8d3e:	f7ff f970 	bl	8022 <_svfprintf_r+0x1da>
    8d42:	003a      	movs	r2, r7
    8d44:	9906      	ldr	r1, [sp, #24]
    8d46:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d48:	f004 feee 	bl	db28 <__ssprint_r>
    8d4c:	2800      	cmp	r0, #0
    8d4e:	d001      	beq.n	8d54 <_svfprintf_r+0xf0c>
    8d50:	f7ff f901 	bl	7f56 <_svfprintf_r+0x10e>
    8d54:	68bc      	ldr	r4, [r7, #8]
    8d56:	ae32      	add	r6, sp, #200	; 0xc8
    8d58:	e418      	b.n	858c <_svfprintf_r+0x744>
    8d5a:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d5c:	9d15      	ldr	r5, [sp, #84]	; 0x54
    8d5e:	000a      	movs	r2, r1
    8d60:	0008      	movs	r0, r1
    8d62:	002b      	movs	r3, r5
    8d64:	0029      	movs	r1, r5
    8d66:	f006 fa4b 	bl	f200 <__aeabi_dcmpun>
    8d6a:	2800      	cmp	r0, #0
    8d6c:	d000      	beq.n	8d70 <_svfprintf_r+0xf28>
    8d6e:	e2e6      	b.n	933e <_svfprintf_r+0x14f6>
    8d70:	4653      	mov	r3, sl
    8d72:	3301      	adds	r3, #1
    8d74:	d100      	bne.n	8d78 <_svfprintf_r+0xf30>
    8d76:	e20d      	b.n	9194 <_svfprintf_r+0x134c>
    8d78:	2320      	movs	r3, #32
    8d7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    8d7c:	439a      	bics	r2, r3
    8d7e:	920e      	str	r2, [sp, #56]	; 0x38
    8d80:	2a47      	cmp	r2, #71	; 0x47
    8d82:	d100      	bne.n	8d86 <_svfprintf_r+0xf3e>
    8d84:	e11c      	b.n	8fc0 <_svfprintf_r+0x1178>
    8d86:	2380      	movs	r3, #128	; 0x80
    8d88:	005b      	lsls	r3, r3, #1
    8d8a:	4323      	orrs	r3, r4
    8d8c:	9308      	str	r3, [sp, #32]
    8d8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8d90:	2b00      	cmp	r3, #0
    8d92:	da00      	bge.n	8d96 <_svfprintf_r+0xf4e>
    8d94:	e221      	b.n	91da <_svfprintf_r+0x1392>
    8d96:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8d98:	9307      	str	r3, [sp, #28]
    8d9a:	2300      	movs	r3, #0
    8d9c:	4691      	mov	r9, r2
    8d9e:	9310      	str	r3, [sp, #64]	; 0x40
    8da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8da2:	2b66      	cmp	r3, #102	; 0x66
    8da4:	d100      	bne.n	8da8 <_svfprintf_r+0xf60>
    8da6:	e1fc      	b.n	91a2 <_svfprintf_r+0x135a>
    8da8:	2b46      	cmp	r3, #70	; 0x46
    8daa:	d100      	bne.n	8dae <_svfprintf_r+0xf66>
    8dac:	e0db      	b.n	8f66 <_svfprintf_r+0x111e>
    8dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8db0:	9809      	ldr	r0, [sp, #36]	; 0x24
    8db2:	3a45      	subs	r2, #69	; 0x45
    8db4:	0013      	movs	r3, r2
    8db6:	4259      	negs	r1, r3
    8db8:	4159      	adcs	r1, r3
    8dba:	ab20      	add	r3, sp, #128	; 0x80
    8dbc:	000d      	movs	r5, r1
    8dbe:	9303      	str	r3, [sp, #12]
    8dc0:	ab1f      	add	r3, sp, #124	; 0x7c
    8dc2:	9302      	str	r3, [sp, #8]
    8dc4:	2302      	movs	r3, #2
    8dc6:	aa23      	add	r2, sp, #140	; 0x8c
    8dc8:	4455      	add	r5, sl
    8dca:	921b      	str	r2, [sp, #108]	; 0x6c
    8dcc:	9204      	str	r2, [sp, #16]
    8dce:	9300      	str	r3, [sp, #0]
    8dd0:	9501      	str	r5, [sp, #4]
    8dd2:	9b07      	ldr	r3, [sp, #28]
    8dd4:	464a      	mov	r2, r9
    8dd6:	f001 fae1 	bl	a39c <_dtoa_r>
    8dda:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8ddc:	9011      	str	r0, [sp, #68]	; 0x44
    8dde:	2b67      	cmp	r3, #103	; 0x67
    8de0:	d000      	beq.n	8de4 <_svfprintf_r+0xf9c>
    8de2:	e239      	b.n	9258 <_svfprintf_r+0x1410>
    8de4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8de6:	4698      	mov	r8, r3
    8de8:	44a8      	add	r8, r5
    8dea:	07e3      	lsls	r3, r4, #31
    8dec:	d400      	bmi.n	8df0 <_svfprintf_r+0xfa8>
    8dee:	e28b      	b.n	9308 <_svfprintf_r+0x14c0>
    8df0:	2300      	movs	r3, #0
    8df2:	2200      	movs	r2, #0
    8df4:	4648      	mov	r0, r9
    8df6:	9907      	ldr	r1, [sp, #28]
    8df8:	f7fe f978 	bl	70ec <__aeabi_dcmpeq>
    8dfc:	4643      	mov	r3, r8
    8dfe:	2800      	cmp	r0, #0
    8e00:	d10a      	bne.n	8e18 <_svfprintf_r+0xfd0>
    8e02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8e04:	4543      	cmp	r3, r8
    8e06:	d207      	bcs.n	8e18 <_svfprintf_r+0xfd0>
    8e08:	2130      	movs	r1, #48	; 0x30
    8e0a:	4640      	mov	r0, r8
    8e0c:	1c5a      	adds	r2, r3, #1
    8e0e:	9223      	str	r2, [sp, #140]	; 0x8c
    8e10:	7019      	strb	r1, [r3, #0]
    8e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    8e14:	4298      	cmp	r0, r3
    8e16:	d8f9      	bhi.n	8e0c <_svfprintf_r+0xfc4>
    8e18:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8e1a:	1a9b      	subs	r3, r3, r2
    8e1c:	9314      	str	r3, [sp, #80]	; 0x50
    8e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8e20:	2b47      	cmp	r3, #71	; 0x47
    8e22:	d100      	bne.n	8e26 <_svfprintf_r+0xfde>
    8e24:	e0f6      	b.n	9014 <_svfprintf_r+0x11cc>
    8e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e28:	2b65      	cmp	r3, #101	; 0x65
    8e2a:	dc00      	bgt.n	8e2e <_svfprintf_r+0xfe6>
    8e2c:	e226      	b.n	927c <_svfprintf_r+0x1434>
    8e2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8e30:	2b66      	cmp	r3, #102	; 0x66
    8e32:	d100      	bne.n	8e36 <_svfprintf_r+0xfee>
    8e34:	e1f4      	b.n	9220 <_svfprintf_r+0x13d8>
    8e36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8e38:	9313      	str	r3, [sp, #76]	; 0x4c
    8e3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8e3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    8e3e:	0019      	movs	r1, r3
    8e40:	4291      	cmp	r1, r2
    8e42:	dd00      	ble.n	8e46 <_svfprintf_r+0xffe>
    8e44:	e1d4      	b.n	91f0 <_svfprintf_r+0x13a8>
    8e46:	07e3      	lsls	r3, r4, #31
    8e48:	d500      	bpl.n	8e4c <_svfprintf_r+0x1004>
    8e4a:	e249      	b.n	92e0 <_svfprintf_r+0x1498>
    8e4c:	43d3      	mvns	r3, r2
    8e4e:	17db      	asrs	r3, r3, #31
    8e50:	0011      	movs	r1, r2
    8e52:	401a      	ands	r2, r3
    8e54:	2367      	movs	r3, #103	; 0x67
    8e56:	9207      	str	r2, [sp, #28]
    8e58:	910e      	str	r1, [sp, #56]	; 0x38
    8e5a:	9312      	str	r3, [sp, #72]	; 0x48
    8e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e5e:	2b00      	cmp	r3, #0
    8e60:	d000      	beq.n	8e64 <_svfprintf_r+0x101c>
    8e62:	e0cf      	b.n	9004 <_svfprintf_r+0x11bc>
    8e64:	ab16      	add	r3, sp, #88	; 0x58
    8e66:	7fdb      	ldrb	r3, [r3, #31]
    8e68:	4698      	mov	r8, r3
    8e6a:	2300      	movs	r3, #0
    8e6c:	469a      	mov	sl, r3
    8e6e:	f7ff f903 	bl	8078 <_svfprintf_r+0x230>
    8e72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e74:	990a      	ldr	r1, [sp, #40]	; 0x28
    8e76:	6813      	ldr	r3, [r2, #0]
    8e78:	6019      	str	r1, [r3, #0]
    8e7a:	0013      	movs	r3, r2
    8e7c:	3304      	adds	r3, #4
    8e7e:	930f      	str	r3, [sp, #60]	; 0x3c
    8e80:	f7ff f80d 	bl	7e9e <_svfprintf_r+0x56>
    8e84:	003a      	movs	r2, r7
    8e86:	9906      	ldr	r1, [sp, #24]
    8e88:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e8a:	f004 fe4d 	bl	db28 <__ssprint_r>
    8e8e:	2800      	cmp	r0, #0
    8e90:	d001      	beq.n	8e96 <_svfprintf_r+0x104e>
    8e92:	f7ff f860 	bl	7f56 <_svfprintf_r+0x10e>
    8e96:	ae32      	add	r6, sp, #200	; 0xc8
    8e98:	e48e      	b.n	87b8 <_svfprintf_r+0x970>
    8e9a:	4bde      	ldr	r3, [pc, #888]	; (9214 <_svfprintf_r+0x13cc>)
    8e9c:	3401      	adds	r4, #1
    8e9e:	6033      	str	r3, [r6, #0]
    8ea0:	2301      	movs	r3, #1
    8ea2:	6073      	str	r3, [r6, #4]
    8ea4:	687b      	ldr	r3, [r7, #4]
    8ea6:	60bc      	str	r4, [r7, #8]
    8ea8:	3301      	adds	r3, #1
    8eaa:	607b      	str	r3, [r7, #4]
    8eac:	2b07      	cmp	r3, #7
    8eae:	dc7a      	bgt.n	8fa6 <_svfprintf_r+0x115e>
    8eb0:	3608      	adds	r6, #8
    8eb2:	2800      	cmp	r0, #0
    8eb4:	d107      	bne.n	8ec6 <_svfprintf_r+0x107e>
    8eb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d104      	bne.n	8ec6 <_svfprintf_r+0x107e>
    8ebc:	9b08      	ldr	r3, [sp, #32]
    8ebe:	07db      	lsls	r3, r3, #31
    8ec0:	d401      	bmi.n	8ec6 <_svfprintf_r+0x107e>
    8ec2:	f7ff fbb7 	bl	8634 <_svfprintf_r+0x7ec>
    8ec6:	9b19      	ldr	r3, [sp, #100]	; 0x64
    8ec8:	6033      	str	r3, [r6, #0]
    8eca:	9b18      	ldr	r3, [sp, #96]	; 0x60
    8ecc:	1919      	adds	r1, r3, r4
    8ece:	6073      	str	r3, [r6, #4]
    8ed0:	687b      	ldr	r3, [r7, #4]
    8ed2:	60b9      	str	r1, [r7, #8]
    8ed4:	3301      	adds	r3, #1
    8ed6:	607b      	str	r3, [r7, #4]
    8ed8:	2b07      	cmp	r3, #7
    8eda:	dd00      	ble.n	8ede <_svfprintf_r+0x1096>
    8edc:	e1f2      	b.n	92c4 <_svfprintf_r+0x147c>
    8ede:	0032      	movs	r2, r6
    8ee0:	3208      	adds	r2, #8
    8ee2:	2800      	cmp	r0, #0
    8ee4:	da00      	bge.n	8ee8 <_svfprintf_r+0x10a0>
    8ee6:	e1cc      	b.n	9282 <_svfprintf_r+0x143a>
    8ee8:	9811      	ldr	r0, [sp, #68]	; 0x44
    8eea:	3301      	adds	r3, #1
    8eec:	6010      	str	r0, [r2, #0]
    8eee:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ef0:	607b      	str	r3, [r7, #4]
    8ef2:	1844      	adds	r4, r0, r1
    8ef4:	6050      	str	r0, [r2, #4]
    8ef6:	60bc      	str	r4, [r7, #8]
    8ef8:	2b07      	cmp	r3, #7
    8efa:	dd00      	ble.n	8efe <_svfprintf_r+0x10b6>
    8efc:	e437      	b.n	876e <_svfprintf_r+0x926>
    8efe:	3208      	adds	r2, #8
    8f00:	0016      	movs	r6, r2
    8f02:	f7ff fb97 	bl	8634 <_svfprintf_r+0x7ec>
    8f06:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8f08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8f0a:	680b      	ldr	r3, [r1, #0]
    8f0c:	601a      	str	r2, [r3, #0]
    8f0e:	17d2      	asrs	r2, r2, #31
    8f10:	605a      	str	r2, [r3, #4]
    8f12:	000b      	movs	r3, r1
    8f14:	3304      	adds	r3, #4
    8f16:	930f      	str	r3, [sp, #60]	; 0x3c
    8f18:	f7fe ffc1 	bl	7e9e <_svfprintf_r+0x56>
    8f1c:	464b      	mov	r3, r9
    8f1e:	3101      	adds	r1, #1
    8f20:	431c      	orrs	r4, r3
    8f22:	780b      	ldrb	r3, [r1, #0]
    8f24:	f7fe fff4 	bl	7f10 <_svfprintf_r+0xc8>
    8f28:	4bbb      	ldr	r3, [pc, #748]	; (9218 <_svfprintf_r+0x13d0>)
    8f2a:	9311      	str	r3, [sp, #68]	; 0x44
    8f2c:	f7ff f937 	bl	819e <_svfprintf_r+0x356>
    8f30:	003a      	movs	r2, r7
    8f32:	9906      	ldr	r1, [sp, #24]
    8f34:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f36:	f004 fdf7 	bl	db28 <__ssprint_r>
    8f3a:	2800      	cmp	r0, #0
    8f3c:	d001      	beq.n	8f42 <_svfprintf_r+0x10fa>
    8f3e:	f7ff f80a 	bl	7f56 <_svfprintf_r+0x10e>
    8f42:	68bc      	ldr	r4, [r7, #8]
    8f44:	ae32      	add	r6, sp, #200	; 0xc8
    8f46:	e5f1      	b.n	8b2c <_svfprintf_r+0xce4>
    8f48:	2140      	movs	r1, #64	; 0x40
    8f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f4c:	f002 fb74 	bl	b638 <_malloc_r>
    8f50:	9b06      	ldr	r3, [sp, #24]
    8f52:	6018      	str	r0, [r3, #0]
    8f54:	6118      	str	r0, [r3, #16]
    8f56:	2800      	cmp	r0, #0
    8f58:	d100      	bne.n	8f5c <_svfprintf_r+0x1114>
    8f5a:	e24f      	b.n	93fc <_svfprintf_r+0x15b4>
    8f5c:	2340      	movs	r3, #64	; 0x40
    8f5e:	9a06      	ldr	r2, [sp, #24]
    8f60:	6153      	str	r3, [r2, #20]
    8f62:	f7fe ff8e 	bl	7e82 <_svfprintf_r+0x3a>
    8f66:	ab23      	add	r3, sp, #140	; 0x8c
    8f68:	931b      	str	r3, [sp, #108]	; 0x6c
    8f6a:	9304      	str	r3, [sp, #16]
    8f6c:	ab20      	add	r3, sp, #128	; 0x80
    8f6e:	9303      	str	r3, [sp, #12]
    8f70:	ab1f      	add	r3, sp, #124	; 0x7c
    8f72:	9302      	str	r3, [sp, #8]
    8f74:	4653      	mov	r3, sl
    8f76:	9301      	str	r3, [sp, #4]
    8f78:	2303      	movs	r3, #3
    8f7a:	464a      	mov	r2, r9
    8f7c:	9300      	str	r3, [sp, #0]
    8f7e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f80:	9b07      	ldr	r3, [sp, #28]
    8f82:	f001 fa0b 	bl	a39c <_dtoa_r>
    8f86:	4655      	mov	r5, sl
    8f88:	9011      	str	r0, [sp, #68]	; 0x44
    8f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f8c:	4698      	mov	r8, r3
    8f8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f90:	44a8      	add	r8, r5
    8f92:	2b46      	cmp	r3, #70	; 0x46
    8f94:	d000      	beq.n	8f98 <_svfprintf_r+0x1150>
    8f96:	e72b      	b.n	8df0 <_svfprintf_r+0xfa8>
    8f98:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8f9a:	781b      	ldrb	r3, [r3, #0]
    8f9c:	2b30      	cmp	r3, #48	; 0x30
    8f9e:	d016      	beq.n	8fce <_svfprintf_r+0x1186>
    8fa0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8fa2:	4498      	add	r8, r3
    8fa4:	e724      	b.n	8df0 <_svfprintf_r+0xfa8>
    8fa6:	003a      	movs	r2, r7
    8fa8:	9906      	ldr	r1, [sp, #24]
    8faa:	9809      	ldr	r0, [sp, #36]	; 0x24
    8fac:	f004 fdbc 	bl	db28 <__ssprint_r>
    8fb0:	2800      	cmp	r0, #0
    8fb2:	d001      	beq.n	8fb8 <_svfprintf_r+0x1170>
    8fb4:	f7fe ffcf 	bl	7f56 <_svfprintf_r+0x10e>
    8fb8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8fba:	68bc      	ldr	r4, [r7, #8]
    8fbc:	ae32      	add	r6, sp, #200	; 0xc8
    8fbe:	e778      	b.n	8eb2 <_svfprintf_r+0x106a>
    8fc0:	4653      	mov	r3, sl
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d000      	beq.n	8fc8 <_svfprintf_r+0x1180>
    8fc6:	e6de      	b.n	8d86 <_svfprintf_r+0xf3e>
    8fc8:	3301      	adds	r3, #1
    8fca:	469a      	mov	sl, r3
    8fcc:	e6db      	b.n	8d86 <_svfprintf_r+0xf3e>
    8fce:	2200      	movs	r2, #0
    8fd0:	2300      	movs	r3, #0
    8fd2:	4648      	mov	r0, r9
    8fd4:	9907      	ldr	r1, [sp, #28]
    8fd6:	f7fe f889 	bl	70ec <__aeabi_dcmpeq>
    8fda:	2800      	cmp	r0, #0
    8fdc:	d1e0      	bne.n	8fa0 <_svfprintf_r+0x1158>
    8fde:	2301      	movs	r3, #1
    8fe0:	1b5b      	subs	r3, r3, r5
    8fe2:	931f      	str	r3, [sp, #124]	; 0x7c
    8fe4:	4498      	add	r8, r3
    8fe6:	e703      	b.n	8df0 <_svfprintf_r+0xfa8>
    8fe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
    8fea:	ab32      	add	r3, sp, #200	; 0xc8
    8fec:	1a9b      	subs	r3, r3, r2
    8fee:	930e      	str	r3, [sp, #56]	; 0x38
    8ff0:	f7ff f83a 	bl	8068 <_svfprintf_r+0x220>
    8ff4:	9811      	ldr	r0, [sp, #68]	; 0x44
    8ff6:	f7fe fbe5 	bl	77c4 <strlen>
    8ffa:	0002      	movs	r2, r0
    8ffc:	900e      	str	r0, [sp, #56]	; 0x38
    8ffe:	0003      	movs	r3, r0
    9000:	f7ff f9cd 	bl	839e <_svfprintf_r+0x556>
    9004:	232d      	movs	r3, #45	; 0x2d
    9006:	aa16      	add	r2, sp, #88	; 0x58
    9008:	77d3      	strb	r3, [r2, #31]
    900a:	4698      	mov	r8, r3
    900c:	2300      	movs	r3, #0
    900e:	469a      	mov	sl, r3
    9010:	f7ff f835 	bl	807e <_svfprintf_r+0x236>
    9014:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9016:	9313      	str	r3, [sp, #76]	; 0x4c
    9018:	1cda      	adds	r2, r3, #3
    901a:	db02      	blt.n	9022 <_svfprintf_r+0x11da>
    901c:	459a      	cmp	sl, r3
    901e:	db00      	blt.n	9022 <_svfprintf_r+0x11da>
    9020:	e70b      	b.n	8e3a <_svfprintf_r+0xff2>
    9022:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9024:	3b02      	subs	r3, #2
    9026:	9312      	str	r3, [sp, #72]	; 0x48
    9028:	222c      	movs	r2, #44	; 0x2c
    902a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    902c:	2148      	movs	r1, #72	; 0x48
    902e:	1e5d      	subs	r5, r3, #1
    9030:	ab16      	add	r3, sp, #88	; 0x58
    9032:	189b      	adds	r3, r3, r2
    9034:	466a      	mov	r2, sp
    9036:	1852      	adds	r2, r2, r1
    9038:	7812      	ldrb	r2, [r2, #0]
    903a:	951f      	str	r5, [sp, #124]	; 0x7c
    903c:	701a      	strb	r2, [r3, #0]
    903e:	2d00      	cmp	r5, #0
    9040:	da00      	bge.n	9044 <_svfprintf_r+0x11fc>
    9042:	e1a4      	b.n	938e <_svfprintf_r+0x1546>
    9044:	212d      	movs	r1, #45	; 0x2d
    9046:	232b      	movs	r3, #43	; 0x2b
    9048:	aa16      	add	r2, sp, #88	; 0x58
    904a:	1852      	adds	r2, r2, r1
    904c:	7013      	strb	r3, [r2, #0]
    904e:	2d09      	cmp	r5, #9
    9050:	dc00      	bgt.n	9054 <_svfprintf_r+0x120c>
    9052:	e14c      	b.n	92ee <_svfprintf_r+0x14a6>
    9054:	aa16      	add	r2, sp, #88	; 0x58
    9056:	233b      	movs	r3, #59	; 0x3b
    9058:	4694      	mov	ip, r2
    905a:	4463      	add	r3, ip
    905c:	469a      	mov	sl, r3
    905e:	46b1      	mov	r9, r6
    9060:	46a0      	mov	r8, r4
    9062:	4656      	mov	r6, sl
    9064:	e000      	b.n	9068 <_svfprintf_r+0x1220>
    9066:	0026      	movs	r6, r4
    9068:	0028      	movs	r0, r5
    906a:	210a      	movs	r1, #10
    906c:	f7fc fb32 	bl	56d4 <__aeabi_idivmod>
    9070:	1e74      	subs	r4, r6, #1
    9072:	3130      	adds	r1, #48	; 0x30
    9074:	7021      	strb	r1, [r4, #0]
    9076:	0028      	movs	r0, r5
    9078:	210a      	movs	r1, #10
    907a:	f7fc fa45 	bl	5508 <__divsi3>
    907e:	0005      	movs	r5, r0
    9080:	2809      	cmp	r0, #9
    9082:	dcf0      	bgt.n	9066 <_svfprintf_r+0x121e>
    9084:	0023      	movs	r3, r4
    9086:	4644      	mov	r4, r8
    9088:	46b0      	mov	r8, r6
    908a:	464e      	mov	r6, r9
    908c:	4699      	mov	r9, r3
    908e:	0003      	movs	r3, r0
    9090:	3330      	adds	r3, #48	; 0x30
    9092:	b2d8      	uxtb	r0, r3
    9094:	4643      	mov	r3, r8
    9096:	3b02      	subs	r3, #2
    9098:	7018      	strb	r0, [r3, #0]
    909a:	459a      	cmp	sl, r3
    909c:	d800      	bhi.n	90a0 <_svfprintf_r+0x1258>
    909e:	e1b4      	b.n	940a <_svfprintf_r+0x15c2>
    90a0:	4642      	mov	r2, r8
    90a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    90a4:	4645      	mov	r5, r8
    90a6:	1a99      	subs	r1, r3, r2
    90a8:	2301      	movs	r3, #1
    90aa:	3107      	adds	r1, #7
    90ac:	425b      	negs	r3, r3
    90ae:	e001      	b.n	90b4 <_svfprintf_r+0x126c>
    90b0:	5ce8      	ldrb	r0, [r5, r3]
    90b2:	3301      	adds	r3, #1
    90b4:	aa21      	add	r2, sp, #132	; 0x84
    90b6:	18d2      	adds	r2, r2, r3
    90b8:	70d0      	strb	r0, [r2, #3]
    90ba:	428b      	cmp	r3, r1
    90bc:	d1f8      	bne.n	90b0 <_svfprintf_r+0x1268>
    90be:	a916      	add	r1, sp, #88	; 0x58
    90c0:	468c      	mov	ip, r1
    90c2:	222e      	movs	r2, #46	; 0x2e
    90c4:	464b      	mov	r3, r9
    90c6:	4462      	add	r2, ip
    90c8:	4694      	mov	ip, r2
    90ca:	1afb      	subs	r3, r7, r3
    90cc:	4463      	add	r3, ip
    90ce:	aa21      	add	r2, sp, #132	; 0x84
    90d0:	9914      	ldr	r1, [sp, #80]	; 0x50
    90d2:	1a9b      	subs	r3, r3, r2
    90d4:	469c      	mov	ip, r3
    90d6:	000a      	movs	r2, r1
    90d8:	4462      	add	r2, ip
    90da:	931a      	str	r3, [sp, #104]	; 0x68
    90dc:	920e      	str	r2, [sp, #56]	; 0x38
    90de:	2901      	cmp	r1, #1
    90e0:	dc00      	bgt.n	90e4 <_svfprintf_r+0x129c>
    90e2:	e145      	b.n	9370 <_svfprintf_r+0x1528>
    90e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
    90e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    90e8:	4694      	mov	ip, r2
    90ea:	4463      	add	r3, ip
    90ec:	001a      	movs	r2, r3
    90ee:	930e      	str	r3, [sp, #56]	; 0x38
    90f0:	43db      	mvns	r3, r3
    90f2:	17db      	asrs	r3, r3, #31
    90f4:	401a      	ands	r2, r3
    90f6:	2300      	movs	r3, #0
    90f8:	9207      	str	r2, [sp, #28]
    90fa:	9313      	str	r3, [sp, #76]	; 0x4c
    90fc:	e6ae      	b.n	8e5c <_svfprintf_r+0x1014>
    90fe:	2301      	movs	r3, #1
    9100:	425b      	negs	r3, r3
    9102:	930a      	str	r3, [sp, #40]	; 0x28
    9104:	f7fe ff2d 	bl	7f62 <_svfprintf_r+0x11a>
    9108:	003a      	movs	r2, r7
    910a:	9906      	ldr	r1, [sp, #24]
    910c:	9809      	ldr	r0, [sp, #36]	; 0x24
    910e:	f004 fd0b 	bl	db28 <__ssprint_r>
    9112:	2800      	cmp	r0, #0
    9114:	d001      	beq.n	911a <_svfprintf_r+0x12d2>
    9116:	f7fe ff1e 	bl	7f56 <_svfprintf_r+0x10e>
    911a:	68bc      	ldr	r4, [r7, #8]
    911c:	ae32      	add	r6, sp, #200	; 0xc8
    911e:	e43c      	b.n	899a <_svfprintf_r+0xb52>
    9120:	003a      	movs	r2, r7
    9122:	9906      	ldr	r1, [sp, #24]
    9124:	9809      	ldr	r0, [sp, #36]	; 0x24
    9126:	f004 fcff 	bl	db28 <__ssprint_r>
    912a:	2800      	cmp	r0, #0
    912c:	d001      	beq.n	9132 <_svfprintf_r+0x12ea>
    912e:	f7fe ff12 	bl	7f56 <_svfprintf_r+0x10e>
    9132:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9134:	68bc      	ldr	r4, [r7, #8]
    9136:	ae32      	add	r6, sp, #200	; 0xc8
    9138:	e56a      	b.n	8c10 <_svfprintf_r+0xdc8>
    913a:	003a      	movs	r2, r7
    913c:	9906      	ldr	r1, [sp, #24]
    913e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9140:	f004 fcf2 	bl	db28 <__ssprint_r>
    9144:	2800      	cmp	r0, #0
    9146:	d001      	beq.n	914c <_svfprintf_r+0x1304>
    9148:	f7fe ff05 	bl	7f56 <_svfprintf_r+0x10e>
    914c:	68bc      	ldr	r4, [r7, #8]
    914e:	ae32      	add	r6, sp, #200	; 0xc8
    9150:	e557      	b.n	8c02 <_svfprintf_r+0xdba>
    9152:	003a      	movs	r2, r7
    9154:	9906      	ldr	r1, [sp, #24]
    9156:	9809      	ldr	r0, [sp, #36]	; 0x24
    9158:	f004 fce6 	bl	db28 <__ssprint_r>
    915c:	2800      	cmp	r0, #0
    915e:	d001      	beq.n	9164 <_svfprintf_r+0x131c>
    9160:	f7fe fef9 	bl	7f56 <_svfprintf_r+0x10e>
    9164:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9166:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9168:	68bc      	ldr	r4, [r7, #8]
    916a:	1a9b      	subs	r3, r3, r2
    916c:	ae32      	add	r6, sp, #200	; 0xc8
    916e:	e56a      	b.n	8c46 <_svfprintf_r+0xdfe>
    9170:	4653      	mov	r3, sl
    9172:	9307      	str	r3, [sp, #28]
    9174:	2b06      	cmp	r3, #6
    9176:	d901      	bls.n	917c <_svfprintf_r+0x1334>
    9178:	2306      	movs	r3, #6
    917a:	9307      	str	r3, [sp, #28]
    917c:	9b07      	ldr	r3, [sp, #28]
    917e:	950f      	str	r5, [sp, #60]	; 0x3c
    9180:	930e      	str	r3, [sp, #56]	; 0x38
    9182:	2300      	movs	r3, #0
    9184:	4698      	mov	r8, r3
    9186:	469a      	mov	sl, r3
    9188:	9313      	str	r3, [sp, #76]	; 0x4c
    918a:	4b24      	ldr	r3, [pc, #144]	; (921c <_svfprintf_r+0x13d4>)
    918c:	9408      	str	r4, [sp, #32]
    918e:	9311      	str	r3, [sp, #68]	; 0x44
    9190:	f7fe ff78 	bl	8084 <_svfprintf_r+0x23c>
    9194:	2320      	movs	r3, #32
    9196:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9198:	439a      	bics	r2, r3
    919a:	3b1a      	subs	r3, #26
    919c:	920e      	str	r2, [sp, #56]	; 0x38
    919e:	469a      	mov	sl, r3
    91a0:	e5f1      	b.n	8d86 <_svfprintf_r+0xf3e>
    91a2:	ab23      	add	r3, sp, #140	; 0x8c
    91a4:	931b      	str	r3, [sp, #108]	; 0x6c
    91a6:	9304      	str	r3, [sp, #16]
    91a8:	ab20      	add	r3, sp, #128	; 0x80
    91aa:	9303      	str	r3, [sp, #12]
    91ac:	ab1f      	add	r3, sp, #124	; 0x7c
    91ae:	9302      	str	r3, [sp, #8]
    91b0:	4653      	mov	r3, sl
    91b2:	9301      	str	r3, [sp, #4]
    91b4:	2303      	movs	r3, #3
    91b6:	464a      	mov	r2, r9
    91b8:	9300      	str	r3, [sp, #0]
    91ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    91bc:	9b07      	ldr	r3, [sp, #28]
    91be:	f001 f8ed 	bl	a39c <_dtoa_r>
    91c2:	0003      	movs	r3, r0
    91c4:	4453      	add	r3, sl
    91c6:	9011      	str	r0, [sp, #68]	; 0x44
    91c8:	4698      	mov	r8, r3
    91ca:	4655      	mov	r5, sl
    91cc:	e6e4      	b.n	8f98 <_svfprintf_r+0x1150>
    91ce:	232d      	movs	r3, #45	; 0x2d
    91d0:	aa16      	add	r2, sp, #88	; 0x58
    91d2:	77d3      	strb	r3, [r2, #31]
    91d4:	4698      	mov	r8, r3
    91d6:	f7fe ffdb 	bl	8190 <_svfprintf_r+0x348>
    91da:	2280      	movs	r2, #128	; 0x80
    91dc:	0612      	lsls	r2, r2, #24
    91de:	4694      	mov	ip, r2
    91e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    91e2:	4699      	mov	r9, r3
    91e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    91e6:	4463      	add	r3, ip
    91e8:	9307      	str	r3, [sp, #28]
    91ea:	232d      	movs	r3, #45	; 0x2d
    91ec:	9310      	str	r3, [sp, #64]	; 0x40
    91ee:	e5d7      	b.n	8da0 <_svfprintf_r+0xf58>
    91f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    91f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    91f4:	4694      	mov	ip, r2
    91f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    91f8:	4463      	add	r3, ip
    91fa:	930e      	str	r3, [sp, #56]	; 0x38
    91fc:	2a00      	cmp	r2, #0
    91fe:	dc00      	bgt.n	9202 <_svfprintf_r+0x13ba>
    9200:	e0ce      	b.n	93a0 <_svfprintf_r+0x1558>
    9202:	001a      	movs	r2, r3
    9204:	43db      	mvns	r3, r3
    9206:	17db      	asrs	r3, r3, #31
    9208:	401a      	ands	r2, r3
    920a:	2367      	movs	r3, #103	; 0x67
    920c:	9207      	str	r2, [sp, #28]
    920e:	9312      	str	r3, [sp, #72]	; 0x48
    9210:	e624      	b.n	8e5c <_svfprintf_r+0x1014>
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	00011bf0 	.word	0x00011bf0
    9218:	00011bb4 	.word	0x00011bb4
    921c:	00011be8 	.word	0x00011be8
    9220:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9222:	9313      	str	r3, [sp, #76]	; 0x4c
    9224:	2b00      	cmp	r3, #0
    9226:	dc00      	bgt.n	922a <_svfprintf_r+0x13e2>
    9228:	e0d5      	b.n	93d6 <_svfprintf_r+0x158e>
    922a:	4652      	mov	r2, sl
    922c:	2a00      	cmp	r2, #0
    922e:	d000      	beq.n	9232 <_svfprintf_r+0x13ea>
    9230:	e092      	b.n	9358 <_svfprintf_r+0x1510>
    9232:	07e2      	lsls	r2, r4, #31
    9234:	d500      	bpl.n	9238 <_svfprintf_r+0x13f0>
    9236:	e08f      	b.n	9358 <_svfprintf_r+0x1510>
    9238:	9307      	str	r3, [sp, #28]
    923a:	930e      	str	r3, [sp, #56]	; 0x38
    923c:	e60e      	b.n	8e5c <_svfprintf_r+0x1014>
    923e:	ab16      	add	r3, sp, #88	; 0x58
    9240:	7fdb      	ldrb	r3, [r3, #31]
    9242:	950f      	str	r5, [sp, #60]	; 0x3c
    9244:	4698      	mov	r8, r3
    9246:	4653      	mov	r3, sl
    9248:	9307      	str	r3, [sp, #28]
    924a:	930e      	str	r3, [sp, #56]	; 0x38
    924c:	2300      	movs	r3, #0
    924e:	9408      	str	r4, [sp, #32]
    9250:	469a      	mov	sl, r3
    9252:	9313      	str	r3, [sp, #76]	; 0x4c
    9254:	f7fe ff10 	bl	8078 <_svfprintf_r+0x230>
    9258:	9b11      	ldr	r3, [sp, #68]	; 0x44
    925a:	4698      	mov	r8, r3
    925c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    925e:	44a8      	add	r8, r5
    9260:	2b47      	cmp	r3, #71	; 0x47
    9262:	d000      	beq.n	9266 <_svfprintf_r+0x141e>
    9264:	e5c4      	b.n	8df0 <_svfprintf_r+0xfa8>
    9266:	07e3      	lsls	r3, r4, #31
    9268:	d500      	bpl.n	926c <_svfprintf_r+0x1424>
    926a:	e68e      	b.n	8f8a <_svfprintf_r+0x1142>
    926c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    926e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9270:	1a9b      	subs	r3, r3, r2
    9272:	9314      	str	r3, [sp, #80]	; 0x50
    9274:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9276:	2b47      	cmp	r3, #71	; 0x47
    9278:	d100      	bne.n	927c <_svfprintf_r+0x1434>
    927a:	e6cb      	b.n	9014 <_svfprintf_r+0x11cc>
    927c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    927e:	9313      	str	r3, [sp, #76]	; 0x4c
    9280:	e6d2      	b.n	9028 <_svfprintf_r+0x11e0>
    9282:	4244      	negs	r4, r0
    9284:	3010      	adds	r0, #16
    9286:	db00      	blt.n	928a <_svfprintf_r+0x1442>
    9288:	e0d0      	b.n	942c <_svfprintf_r+0x15e4>
    928a:	486e      	ldr	r0, [pc, #440]	; (9444 <_svfprintf_r+0x15fc>)
    928c:	2610      	movs	r6, #16
    928e:	0005      	movs	r5, r0
    9290:	e003      	b.n	929a <_svfprintf_r+0x1452>
    9292:	3208      	adds	r2, #8
    9294:	3c10      	subs	r4, #16
    9296:	2c10      	cmp	r4, #16
    9298:	dd38      	ble.n	930c <_svfprintf_r+0x14c4>
    929a:	3110      	adds	r1, #16
    929c:	3301      	adds	r3, #1
    929e:	6015      	str	r5, [r2, #0]
    92a0:	6056      	str	r6, [r2, #4]
    92a2:	60b9      	str	r1, [r7, #8]
    92a4:	607b      	str	r3, [r7, #4]
    92a6:	2b07      	cmp	r3, #7
    92a8:	ddf3      	ble.n	9292 <_svfprintf_r+0x144a>
    92aa:	003a      	movs	r2, r7
    92ac:	9906      	ldr	r1, [sp, #24]
    92ae:	9809      	ldr	r0, [sp, #36]	; 0x24
    92b0:	f004 fc3a 	bl	db28 <__ssprint_r>
    92b4:	2800      	cmp	r0, #0
    92b6:	d001      	beq.n	92bc <_svfprintf_r+0x1474>
    92b8:	f7fe fe4d 	bl	7f56 <_svfprintf_r+0x10e>
    92bc:	68b9      	ldr	r1, [r7, #8]
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	aa32      	add	r2, sp, #200	; 0xc8
    92c2:	e7e7      	b.n	9294 <_svfprintf_r+0x144c>
    92c4:	003a      	movs	r2, r7
    92c6:	9906      	ldr	r1, [sp, #24]
    92c8:	9809      	ldr	r0, [sp, #36]	; 0x24
    92ca:	f004 fc2d 	bl	db28 <__ssprint_r>
    92ce:	2800      	cmp	r0, #0
    92d0:	d001      	beq.n	92d6 <_svfprintf_r+0x148e>
    92d2:	f7fe fe40 	bl	7f56 <_svfprintf_r+0x10e>
    92d6:	981f      	ldr	r0, [sp, #124]	; 0x7c
    92d8:	68b9      	ldr	r1, [r7, #8]
    92da:	687b      	ldr	r3, [r7, #4]
    92dc:	aa32      	add	r2, sp, #200	; 0xc8
    92de:	e600      	b.n	8ee2 <_svfprintf_r+0x109a>
    92e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    92e2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    92e4:	4694      	mov	ip, r2
    92e6:	4463      	add	r3, ip
    92e8:	001a      	movs	r2, r3
    92ea:	930e      	str	r3, [sp, #56]	; 0x38
    92ec:	e78a      	b.n	9204 <_svfprintf_r+0x13bc>
    92ee:	212e      	movs	r1, #46	; 0x2e
    92f0:	2330      	movs	r3, #48	; 0x30
    92f2:	aa16      	add	r2, sp, #88	; 0x58
    92f4:	1852      	adds	r2, r2, r1
    92f6:	7013      	strb	r3, [r2, #0]
    92f8:	002b      	movs	r3, r5
    92fa:	aa16      	add	r2, sp, #88	; 0x58
    92fc:	3101      	adds	r1, #1
    92fe:	3330      	adds	r3, #48	; 0x30
    9300:	1852      	adds	r2, r2, r1
    9302:	7013      	strb	r3, [r2, #0]
    9304:	ab22      	add	r3, sp, #136	; 0x88
    9306:	e6e2      	b.n	90ce <_svfprintf_r+0x1286>
    9308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    930a:	e585      	b.n	8e18 <_svfprintf_r+0xfd0>
    930c:	46a9      	mov	r9, r5
    930e:	4648      	mov	r0, r9
    9310:	1909      	adds	r1, r1, r4
    9312:	3301      	adds	r3, #1
    9314:	6010      	str	r0, [r2, #0]
    9316:	6054      	str	r4, [r2, #4]
    9318:	60b9      	str	r1, [r7, #8]
    931a:	3208      	adds	r2, #8
    931c:	607b      	str	r3, [r7, #4]
    931e:	2b07      	cmp	r3, #7
    9320:	dc00      	bgt.n	9324 <_svfprintf_r+0x14dc>
    9322:	e5e1      	b.n	8ee8 <_svfprintf_r+0x10a0>
    9324:	003a      	movs	r2, r7
    9326:	9906      	ldr	r1, [sp, #24]
    9328:	9809      	ldr	r0, [sp, #36]	; 0x24
    932a:	f004 fbfd 	bl	db28 <__ssprint_r>
    932e:	2800      	cmp	r0, #0
    9330:	d001      	beq.n	9336 <_svfprintf_r+0x14ee>
    9332:	f7fe fe10 	bl	7f56 <_svfprintf_r+0x10e>
    9336:	68b9      	ldr	r1, [r7, #8]
    9338:	687b      	ldr	r3, [r7, #4]
    933a:	aa32      	add	r2, sp, #200	; 0xc8
    933c:	e5d4      	b.n	8ee8 <_svfprintf_r+0x10a0>
    933e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9340:	2b00      	cmp	r3, #0
    9342:	db38      	blt.n	93b6 <_svfprintf_r+0x156e>
    9344:	ab16      	add	r3, sp, #88	; 0x58
    9346:	7fdb      	ldrb	r3, [r3, #31]
    9348:	4698      	mov	r8, r3
    934a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    934c:	2b47      	cmp	r3, #71	; 0x47
    934e:	dc2e      	bgt.n	93ae <_svfprintf_r+0x1566>
    9350:	4b3d      	ldr	r3, [pc, #244]	; (9448 <_svfprintf_r+0x1600>)
    9352:	9311      	str	r3, [sp, #68]	; 0x44
    9354:	f7fe ff23 	bl	819e <_svfprintf_r+0x356>
    9358:	9a18      	ldr	r2, [sp, #96]	; 0x60
    935a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    935c:	4694      	mov	ip, r2
    935e:	4463      	add	r3, ip
    9360:	4453      	add	r3, sl
    9362:	001a      	movs	r2, r3
    9364:	930e      	str	r3, [sp, #56]	; 0x38
    9366:	43db      	mvns	r3, r3
    9368:	17db      	asrs	r3, r3, #31
    936a:	401a      	ands	r2, r3
    936c:	9207      	str	r2, [sp, #28]
    936e:	e575      	b.n	8e5c <_svfprintf_r+0x1014>
    9370:	2301      	movs	r3, #1
    9372:	4023      	ands	r3, r4
    9374:	9313      	str	r3, [sp, #76]	; 0x4c
    9376:	d000      	beq.n	937a <_svfprintf_r+0x1532>
    9378:	e6b4      	b.n	90e4 <_svfprintf_r+0x129c>
    937a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    937c:	43d3      	mvns	r3, r2
    937e:	17db      	asrs	r3, r3, #31
    9380:	401a      	ands	r2, r3
    9382:	9207      	str	r2, [sp, #28]
    9384:	e56a      	b.n	8e5c <_svfprintf_r+0x1014>
    9386:	4a2f      	ldr	r2, [pc, #188]	; (9444 <_svfprintf_r+0x15fc>)
    9388:	687b      	ldr	r3, [r7, #4]
    938a:	4691      	mov	r9, r2
    938c:	e42d      	b.n	8bea <_svfprintf_r+0xda2>
    938e:	2301      	movs	r3, #1
    9390:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9392:	391b      	subs	r1, #27
    9394:	1a9d      	subs	r5, r3, r2
    9396:	aa16      	add	r2, sp, #88	; 0x58
    9398:	332c      	adds	r3, #44	; 0x2c
    939a:	1852      	adds	r2, r2, r1
    939c:	7013      	strb	r3, [r2, #0]
    939e:	e656      	b.n	904e <_svfprintf_r+0x1206>
    93a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    93a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    93a4:	1a98      	subs	r0, r3, r2
    93a6:	1c43      	adds	r3, r0, #1
    93a8:	001a      	movs	r2, r3
    93aa:	930e      	str	r3, [sp, #56]	; 0x38
    93ac:	e72a      	b.n	9204 <_svfprintf_r+0x13bc>
    93ae:	4b27      	ldr	r3, [pc, #156]	; (944c <_svfprintf_r+0x1604>)
    93b0:	9311      	str	r3, [sp, #68]	; 0x44
    93b2:	f7fe fef4 	bl	819e <_svfprintf_r+0x356>
    93b6:	232d      	movs	r3, #45	; 0x2d
    93b8:	aa16      	add	r2, sp, #88	; 0x58
    93ba:	77d3      	strb	r3, [r2, #31]
    93bc:	4698      	mov	r8, r3
    93be:	e7c4      	b.n	934a <_svfprintf_r+0x1502>
    93c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    93c2:	1d1a      	adds	r2, r3, #4
    93c4:	681b      	ldr	r3, [r3, #0]
    93c6:	469a      	mov	sl, r3
    93c8:	2b00      	cmp	r3, #0
    93ca:	db36      	blt.n	943a <_svfprintf_r+0x15f2>
    93cc:	784b      	ldrb	r3, [r1, #1]
    93ce:	920f      	str	r2, [sp, #60]	; 0x3c
    93d0:	4659      	mov	r1, fp
    93d2:	f7fe fd9d 	bl	7f10 <_svfprintf_r+0xc8>
    93d6:	4653      	mov	r3, sl
    93d8:	2b00      	cmp	r3, #0
    93da:	d101      	bne.n	93e0 <_svfprintf_r+0x1598>
    93dc:	07e3      	lsls	r3, r4, #31
    93de:	d503      	bpl.n	93e8 <_svfprintf_r+0x15a0>
    93e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    93e2:	1c58      	adds	r0, r3, #1
    93e4:	0003      	movs	r3, r0
    93e6:	e7bb      	b.n	9360 <_svfprintf_r+0x1518>
    93e8:	2301      	movs	r3, #1
    93ea:	e725      	b.n	9238 <_svfprintf_r+0x13f0>
    93ec:	ab16      	add	r3, sp, #88	; 0x58
    93ee:	77d8      	strb	r0, [r3, #31]
    93f0:	f7fe ff6c 	bl	82cc <_svfprintf_r+0x484>
    93f4:	ab16      	add	r3, sp, #88	; 0x58
    93f6:	77d8      	strb	r0, [r3, #31]
    93f8:	f7ff f814 	bl	8424 <_svfprintf_r+0x5dc>
    93fc:	230c      	movs	r3, #12
    93fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9400:	6013      	str	r3, [r2, #0]
    9402:	3b0d      	subs	r3, #13
    9404:	930a      	str	r3, [sp, #40]	; 0x28
    9406:	f7fe fdac 	bl	7f62 <_svfprintf_r+0x11a>
    940a:	aa16      	add	r2, sp, #88	; 0x58
    940c:	232e      	movs	r3, #46	; 0x2e
    940e:	4694      	mov	ip, r2
    9410:	4463      	add	r3, ip
    9412:	e65c      	b.n	90ce <_svfprintf_r+0x1286>
    9414:	ab16      	add	r3, sp, #88	; 0x58
    9416:	77d8      	strb	r0, [r3, #31]
    9418:	f7fe fe85 	bl	8126 <_svfprintf_r+0x2de>
    941c:	ab16      	add	r3, sp, #88	; 0x58
    941e:	77d8      	strb	r0, [r3, #31]
    9420:	f7fe fddd 	bl	7fde <_svfprintf_r+0x196>
    9424:	ab16      	add	r3, sp, #88	; 0x58
    9426:	77d8      	strb	r0, [r3, #31]
    9428:	f7ff f87d 	bl	8526 <_svfprintf_r+0x6de>
    942c:	4805      	ldr	r0, [pc, #20]	; (9444 <_svfprintf_r+0x15fc>)
    942e:	4681      	mov	r9, r0
    9430:	e76d      	b.n	930e <_svfprintf_r+0x14c6>
    9432:	ab16      	add	r3, sp, #88	; 0x58
    9434:	77d8      	strb	r0, [r3, #31]
    9436:	f7fe ff79 	bl	832c <_svfprintf_r+0x4e4>
    943a:	2301      	movs	r3, #1
    943c:	425b      	negs	r3, r3
    943e:	469a      	mov	sl, r3
    9440:	e7c4      	b.n	93cc <_svfprintf_r+0x1584>
    9442:	46c0      	nop			; (mov r8, r8)
    9444:	00011c04 	.word	0x00011c04
    9448:	00011bb8 	.word	0x00011bb8
    944c:	00011bbc 	.word	0x00011bbc

00009450 <__ssvfscanf_r>:
    9450:	b5f0      	push	{r4, r5, r6, r7, lr}
    9452:	464e      	mov	r6, r9
    9454:	4645      	mov	r5, r8
    9456:	46de      	mov	lr, fp
    9458:	4657      	mov	r7, sl
    945a:	b5e0      	push	{r5, r6, r7, lr}
    945c:	4cce      	ldr	r4, [pc, #824]	; (9798 <__ssvfscanf_r+0x348>)
    945e:	000e      	movs	r6, r1
    9460:	44a5      	add	sp, r4
    9462:	9307      	str	r3, [sp, #28]
    9464:	230c      	movs	r3, #12
    9466:	5ec9      	ldrsh	r1, [r1, r3]
    9468:	2380      	movs	r3, #128	; 0x80
    946a:	019b      	lsls	r3, r3, #6
    946c:	4680      	mov	r8, r0
    946e:	4219      	tst	r1, r3
    9470:	d105      	bne.n	947e <__ssvfscanf_r+0x2e>
    9472:	430b      	orrs	r3, r1
    9474:	81b3      	strh	r3, [r6, #12]
    9476:	6e71      	ldr	r1, [r6, #100]	; 0x64
    9478:	4bc8      	ldr	r3, [pc, #800]	; (979c <__ssvfscanf_r+0x34c>)
    947a:	400b      	ands	r3, r1
    947c:	6673      	str	r3, [r6, #100]	; 0x64
    947e:	2300      	movs	r3, #0
    9480:	0014      	movs	r4, r2
    9482:	9309      	str	r3, [sp, #36]	; 0x24
    9484:	9305      	str	r3, [sp, #20]
    9486:	9308      	str	r3, [sp, #32]
    9488:	7823      	ldrb	r3, [r4, #0]
    948a:	1c62      	adds	r2, r4, #1
    948c:	2700      	movs	r7, #0
    948e:	9311      	str	r3, [sp, #68]	; 0x44
    9490:	4692      	mov	sl, r2
    9492:	2b00      	cmp	r3, #0
    9494:	d029      	beq.n	94ea <__ssvfscanf_r+0x9a>
    9496:	f002 f8ad 	bl	b5f4 <__locale_ctype_ptr>
    949a:	2508      	movs	r5, #8
    949c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    949e:	18c0      	adds	r0, r0, r3
    94a0:	7842      	ldrb	r2, [r0, #1]
    94a2:	4015      	ands	r5, r2
    94a4:	d02b      	beq.n	94fe <__ssvfscanf_r+0xae>
    94a6:	6873      	ldr	r3, [r6, #4]
    94a8:	2408      	movs	r4, #8
    94aa:	4645      	mov	r5, r8
    94ac:	e00d      	b.n	94ca <__ssvfscanf_r+0x7a>
    94ae:	f002 f8a1 	bl	b5f4 <__locale_ctype_ptr>
    94b2:	6832      	ldr	r2, [r6, #0]
    94b4:	7813      	ldrb	r3, [r2, #0]
    94b6:	18c0      	adds	r0, r0, r3
    94b8:	7843      	ldrb	r3, [r0, #1]
    94ba:	421c      	tst	r4, r3
    94bc:	d00d      	beq.n	94da <__ssvfscanf_r+0x8a>
    94be:	6873      	ldr	r3, [r6, #4]
    94c0:	3201      	adds	r2, #1
    94c2:	3b01      	subs	r3, #1
    94c4:	3701      	adds	r7, #1
    94c6:	6073      	str	r3, [r6, #4]
    94c8:	6032      	str	r2, [r6, #0]
    94ca:	2b00      	cmp	r3, #0
    94cc:	dcef      	bgt.n	94ae <__ssvfscanf_r+0x5e>
    94ce:	0031      	movs	r1, r6
    94d0:	0028      	movs	r0, r5
    94d2:	f004 fbfb 	bl	dccc <__ssrefill_r>
    94d6:	2800      	cmp	r0, #0
    94d8:	d0e9      	beq.n	94ae <__ssvfscanf_r+0x5e>
    94da:	46a8      	mov	r8, r5
    94dc:	4654      	mov	r4, sl
    94de:	7823      	ldrb	r3, [r4, #0]
    94e0:	1c62      	adds	r2, r4, #1
    94e2:	9311      	str	r3, [sp, #68]	; 0x44
    94e4:	4692      	mov	sl, r2
    94e6:	2b00      	cmp	r3, #0
    94e8:	d1d5      	bne.n	9496 <__ssvfscanf_r+0x46>
    94ea:	9808      	ldr	r0, [sp, #32]
    94ec:	23ad      	movs	r3, #173	; 0xad
    94ee:	009b      	lsls	r3, r3, #2
    94f0:	449d      	add	sp, r3
    94f2:	bc3c      	pop	{r2, r3, r4, r5}
    94f4:	4690      	mov	r8, r2
    94f6:	4699      	mov	r9, r3
    94f8:	46a2      	mov	sl, r4
    94fa:	46ab      	mov	fp, r5
    94fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    94fe:	2b25      	cmp	r3, #37	; 0x25
    9500:	d116      	bne.n	9530 <__ssvfscanf_r+0xe0>
    9502:	7863      	ldrb	r3, [r4, #1]
    9504:	2400      	movs	r4, #0
    9506:	469b      	mov	fp, r3
    9508:	2300      	movs	r3, #0
    950a:	4699      	mov	r9, r3
    950c:	3301      	adds	r3, #1
    950e:	9304      	str	r3, [sp, #16]
    9510:	2004      	movs	r0, #4
    9512:	465b      	mov	r3, fp
    9514:	2202      	movs	r2, #2
    9516:	46a3      	mov	fp, r4
    9518:	4654      	mov	r4, sl
    951a:	3401      	adds	r4, #1
    951c:	9403      	str	r4, [sp, #12]
    951e:	2b78      	cmp	r3, #120	; 0x78
    9520:	d900      	bls.n	9524 <__ssvfscanf_r+0xd4>
    9522:	e0d5      	b.n	96d0 <__ssvfscanf_r+0x280>
    9524:	499e      	ldr	r1, [pc, #632]	; (97a0 <__ssvfscanf_r+0x350>)
    9526:	009c      	lsls	r4, r3, #2
    9528:	590c      	ldr	r4, [r1, r4]
    952a:	46a7      	mov	pc, r4
    952c:	9b03      	ldr	r3, [sp, #12]
    952e:	469a      	mov	sl, r3
    9530:	6873      	ldr	r3, [r6, #4]
    9532:	2b00      	cmp	r3, #0
    9534:	dc01      	bgt.n	953a <__ssvfscanf_r+0xea>
    9536:	f000 fd64 	bl	a002 <__ssvfscanf_r+0xbb2>
    953a:	4652      	mov	r2, sl
    953c:	6833      	ldr	r3, [r6, #0]
    953e:	3a01      	subs	r2, #1
    9540:	7811      	ldrb	r1, [r2, #0]
    9542:	781a      	ldrb	r2, [r3, #0]
    9544:	4291      	cmp	r1, r2
    9546:	d1d0      	bne.n	94ea <__ssvfscanf_r+0x9a>
    9548:	6872      	ldr	r2, [r6, #4]
    954a:	3301      	adds	r3, #1
    954c:	3a01      	subs	r2, #1
    954e:	6072      	str	r2, [r6, #4]
    9550:	6033      	str	r3, [r6, #0]
    9552:	3701      	adds	r7, #1
    9554:	4654      	mov	r4, sl
    9556:	e7c2      	b.n	94de <__ssvfscanf_r+0x8e>
    9558:	4655      	mov	r5, sl
    955a:	1c83      	adds	r3, r0, #2
    955c:	d001      	beq.n	9562 <__ssvfscanf_r+0x112>
    955e:	f000 fe1a 	bl	a196 <__ssvfscanf_r+0xd46>
    9562:	6873      	ldr	r3, [r6, #4]
    9564:	2b00      	cmp	r3, #0
    9566:	dd01      	ble.n	956c <__ssvfscanf_r+0x11c>
    9568:	f000 fc2a 	bl	9dc0 <__ssvfscanf_r+0x970>
    956c:	0031      	movs	r1, r6
    956e:	4640      	mov	r0, r8
    9570:	f004 fbac 	bl	dccc <__ssrefill_r>
    9574:	2800      	cmp	r0, #0
    9576:	d101      	bne.n	957c <__ssvfscanf_r+0x12c>
    9578:	f000 fc22 	bl	9dc0 <__ssvfscanf_r+0x970>
    957c:	2d00      	cmp	r5, #0
    957e:	d101      	bne.n	9584 <__ssvfscanf_r+0x134>
    9580:	f000 fc2a 	bl	9dd8 <__ssvfscanf_r+0x988>
    9584:	9b08      	ldr	r3, [sp, #32]
    9586:	2b00      	cmp	r3, #0
    9588:	d002      	beq.n	9590 <__ssvfscanf_r+0x140>
    958a:	89b3      	ldrh	r3, [r6, #12]
    958c:	065b      	lsls	r3, r3, #25
    958e:	d5ac      	bpl.n	94ea <__ssvfscanf_r+0x9a>
    9590:	2301      	movs	r3, #1
    9592:	425b      	negs	r3, r3
    9594:	9308      	str	r3, [sp, #32]
    9596:	e7a8      	b.n	94ea <__ssvfscanf_r+0x9a>
    9598:	4b82      	ldr	r3, [pc, #520]	; (97a4 <__ssvfscanf_r+0x354>)
    959a:	465c      	mov	r4, fp
    959c:	9309      	str	r3, [sp, #36]	; 0x24
    959e:	2300      	movs	r3, #0
    95a0:	9305      	str	r3, [sp, #20]
    95a2:	3303      	adds	r3, #3
    95a4:	469b      	mov	fp, r3
    95a6:	6873      	ldr	r3, [r6, #4]
    95a8:	2b00      	cmp	r3, #0
    95aa:	dd27      	ble.n	95fc <__ssvfscanf_r+0x1ac>
    95ac:	464b      	mov	r3, r9
    95ae:	065b      	lsls	r3, r3, #25
    95b0:	d42d      	bmi.n	960e <__ssvfscanf_r+0x1be>
    95b2:	2308      	movs	r3, #8
    95b4:	469a      	mov	sl, r3
    95b6:	e001      	b.n	95bc <__ssvfscanf_r+0x16c>
    95b8:	3201      	adds	r2, #1
    95ba:	6032      	str	r2, [r6, #0]
    95bc:	f002 f81a 	bl	b5f4 <__locale_ctype_ptr>
    95c0:	4651      	mov	r1, sl
    95c2:	6832      	ldr	r2, [r6, #0]
    95c4:	7813      	ldrb	r3, [r2, #0]
    95c6:	18c0      	adds	r0, r0, r3
    95c8:	7843      	ldrb	r3, [r0, #1]
    95ca:	4219      	tst	r1, r3
    95cc:	d01f      	beq.n	960e <__ssvfscanf_r+0x1be>
    95ce:	6873      	ldr	r3, [r6, #4]
    95d0:	3701      	adds	r7, #1
    95d2:	3b01      	subs	r3, #1
    95d4:	6073      	str	r3, [r6, #4]
    95d6:	2b00      	cmp	r3, #0
    95d8:	dcee      	bgt.n	95b8 <__ssvfscanf_r+0x168>
    95da:	0031      	movs	r1, r6
    95dc:	4640      	mov	r0, r8
    95de:	f004 fb75 	bl	dccc <__ssrefill_r>
    95e2:	2800      	cmp	r0, #0
    95e4:	d0ea      	beq.n	95bc <__ssvfscanf_r+0x16c>
    95e6:	e7cd      	b.n	9584 <__ssvfscanf_r+0x134>
    95e8:	465c      	mov	r4, fp
    95ea:	4b6f      	ldr	r3, [pc, #444]	; (97a8 <__ssvfscanf_r+0x358>)
    95ec:	9309      	str	r3, [sp, #36]	; 0x24
    95ee:	230a      	movs	r3, #10
    95f0:	9305      	str	r3, [sp, #20]
    95f2:	3b07      	subs	r3, #7
    95f4:	469b      	mov	fp, r3
    95f6:	6873      	ldr	r3, [r6, #4]
    95f8:	2b00      	cmp	r3, #0
    95fa:	dcd7      	bgt.n	95ac <__ssvfscanf_r+0x15c>
    95fc:	0031      	movs	r1, r6
    95fe:	4640      	mov	r0, r8
    9600:	f004 fb64 	bl	dccc <__ssrefill_r>
    9604:	2800      	cmp	r0, #0
    9606:	d1bd      	bne.n	9584 <__ssvfscanf_r+0x134>
    9608:	464b      	mov	r3, r9
    960a:	065b      	lsls	r3, r3, #25
    960c:	d5d1      	bpl.n	95b2 <__ssvfscanf_r+0x162>
    960e:	465b      	mov	r3, fp
    9610:	2b02      	cmp	r3, #2
    9612:	d100      	bne.n	9616 <__ssvfscanf_r+0x1c6>
    9614:	e326      	b.n	9c64 <__ssvfscanf_r+0x814>
    9616:	dc00      	bgt.n	961a <__ssvfscanf_r+0x1ca>
    9618:	e21b      	b.n	9a52 <__ssvfscanf_r+0x602>
    961a:	465b      	mov	r3, fp
    961c:	2b03      	cmp	r3, #3
    961e:	d100      	bne.n	9622 <__ssvfscanf_r+0x1d2>
    9620:	e28a      	b.n	9b38 <__ssvfscanf_r+0x6e8>
    9622:	2b04      	cmp	r3, #4
    9624:	d000      	beq.n	9628 <__ssvfscanf_r+0x1d8>
    9626:	e25b      	b.n	9ae0 <__ssvfscanf_r+0x690>
    9628:	4640      	mov	r0, r8
    962a:	f001 fff3 	bl	b614 <_localeconv_r>
    962e:	22ae      	movs	r2, #174	; 0xae
    9630:	2100      	movs	r1, #0
    9632:	6803      	ldr	r3, [r0, #0]
    9634:	0052      	lsls	r2, r2, #1
    9636:	930c      	str	r3, [sp, #48]	; 0x30
    9638:	1e63      	subs	r3, r4, #1
    963a:	910d      	str	r1, [sp, #52]	; 0x34
    963c:	4293      	cmp	r3, r2
    963e:	d904      	bls.n	964a <__ssvfscanf_r+0x1fa>
    9640:	3c5e      	subs	r4, #94	; 0x5e
    9642:	3cff      	subs	r4, #255	; 0xff
    9644:	940d      	str	r4, [sp, #52]	; 0x34
    9646:	245e      	movs	r4, #94	; 0x5e
    9648:	34ff      	adds	r4, #255	; 0xff
    964a:	23f0      	movs	r3, #240	; 0xf0
    964c:	464a      	mov	r2, r9
    964e:	00db      	lsls	r3, r3, #3
    9650:	431a      	orrs	r2, r3
    9652:	2300      	movs	r3, #0
    9654:	9304      	str	r3, [sp, #16]
    9656:	930e      	str	r3, [sp, #56]	; 0x38
    9658:	930f      	str	r3, [sp, #60]	; 0x3c
    965a:	9306      	str	r3, [sp, #24]
    965c:	930b      	str	r3, [sp, #44]	; 0x2c
    965e:	ab54      	add	r3, sp, #336	; 0x150
    9660:	469b      	mov	fp, r3
    9662:	930a      	str	r3, [sp, #40]	; 0x28
    9664:	4b51      	ldr	r3, [pc, #324]	; (97ac <__ssvfscanf_r+0x35c>)
    9666:	4691      	mov	r9, r2
    9668:	469a      	mov	sl, r3
    966a:	002b      	movs	r3, r5
    966c:	003d      	movs	r5, r7
    966e:	465f      	mov	r7, fp
    9670:	469b      	mov	fp, r3
    9672:	6832      	ldr	r2, [r6, #0]
    9674:	7811      	ldrb	r1, [r2, #0]
    9676:	000b      	movs	r3, r1
    9678:	3b2b      	subs	r3, #43	; 0x2b
    967a:	b2db      	uxtb	r3, r3
    967c:	2b4e      	cmp	r3, #78	; 0x4e
    967e:	d900      	bls.n	9682 <__ssvfscanf_r+0x232>
    9680:	e1d6      	b.n	9a30 <__ssvfscanf_r+0x5e0>
    9682:	4650      	mov	r0, sl
    9684:	009b      	lsls	r3, r3, #2
    9686:	58c3      	ldr	r3, [r0, r3]
    9688:	469f      	mov	pc, r3
    968a:	2302      	movs	r3, #2
    968c:	465c      	mov	r4, fp
    968e:	469b      	mov	fp, r3
    9690:	e789      	b.n	95a6 <__ssvfscanf_r+0x156>
    9692:	465c      	mov	r4, fp
    9694:	2388      	movs	r3, #136	; 0x88
    9696:	464a      	mov	r2, r9
    9698:	009b      	lsls	r3, r3, #2
    969a:	431a      	orrs	r2, r3
    969c:	4b42      	ldr	r3, [pc, #264]	; (97a8 <__ssvfscanf_r+0x358>)
    969e:	4691      	mov	r9, r2
    96a0:	9309      	str	r3, [sp, #36]	; 0x24
    96a2:	2310      	movs	r3, #16
    96a4:	9305      	str	r3, [sp, #20]
    96a6:	3b0d      	subs	r3, #13
    96a8:	469b      	mov	fp, r3
    96aa:	e77c      	b.n	95a6 <__ssvfscanf_r+0x156>
    96ac:	4653      	mov	r3, sl
    96ae:	785b      	ldrb	r3, [r3, #1]
    96b0:	2b6c      	cmp	r3, #108	; 0x6c
    96b2:	d101      	bne.n	96b8 <__ssvfscanf_r+0x268>
    96b4:	f000 fcd0 	bl	a058 <__ssvfscanf_r+0xc08>
    96b8:	4649      	mov	r1, r9
    96ba:	9c04      	ldr	r4, [sp, #16]
    96bc:	4321      	orrs	r1, r4
    96be:	4689      	mov	r9, r1
    96c0:	9903      	ldr	r1, [sp, #12]
    96c2:	468a      	mov	sl, r1
    96c4:	4654      	mov	r4, sl
    96c6:	3401      	adds	r4, #1
    96c8:	9403      	str	r4, [sp, #12]
    96ca:	2b78      	cmp	r3, #120	; 0x78
    96cc:	d800      	bhi.n	96d0 <__ssvfscanf_r+0x280>
    96ce:	e729      	b.n	9524 <__ssvfscanf_r+0xd4>
    96d0:	465c      	mov	r4, fp
    96d2:	469b      	mov	fp, r3
    96d4:	f001 ff8e 	bl	b5f4 <__locale_ctype_ptr>
    96d8:	2303      	movs	r3, #3
    96da:	4458      	add	r0, fp
    96dc:	7842      	ldrb	r2, [r0, #1]
    96de:	4013      	ands	r3, r2
    96e0:	2b01      	cmp	r3, #1
    96e2:	d100      	bne.n	96e6 <__ssvfscanf_r+0x296>
    96e4:	e30a      	b.n	9cfc <__ssvfscanf_r+0x8ac>
    96e6:	4b2f      	ldr	r3, [pc, #188]	; (97a4 <__ssvfscanf_r+0x354>)
    96e8:	e780      	b.n	95ec <__ssvfscanf_r+0x19c>
    96ea:	465c      	mov	r4, fp
    96ec:	4b2e      	ldr	r3, [pc, #184]	; (97a8 <__ssvfscanf_r+0x358>)
    96ee:	9309      	str	r3, [sp, #36]	; 0x24
    96f0:	2308      	movs	r3, #8
    96f2:	9305      	str	r3, [sp, #20]
    96f4:	3b05      	subs	r3, #5
    96f6:	469b      	mov	fp, r3
    96f8:	e755      	b.n	95a6 <__ssvfscanf_r+0x156>
    96fa:	9b03      	ldr	r3, [sp, #12]
    96fc:	469a      	mov	sl, r3
    96fe:	464b      	mov	r3, r9
    9700:	06db      	lsls	r3, r3, #27
    9702:	d500      	bpl.n	9706 <__ssvfscanf_r+0x2b6>
    9704:	e6ea      	b.n	94dc <__ssvfscanf_r+0x8c>
    9706:	464b      	mov	r3, r9
    9708:	075b      	lsls	r3, r3, #29
    970a:	d501      	bpl.n	9710 <__ssvfscanf_r+0x2c0>
    970c:	f000 fce2 	bl	a0d4 <__ssvfscanf_r+0xc84>
    9710:	464b      	mov	r3, r9
    9712:	07db      	lsls	r3, r3, #31
    9714:	d500      	bpl.n	9718 <__ssvfscanf_r+0x2c8>
    9716:	e30e      	b.n	9d36 <__ssvfscanf_r+0x8e6>
    9718:	464b      	mov	r3, r9
    971a:	079b      	lsls	r3, r3, #30
    971c:	d400      	bmi.n	9720 <__ssvfscanf_r+0x2d0>
    971e:	e30a      	b.n	9d36 <__ssvfscanf_r+0x8e6>
    9720:	9907      	ldr	r1, [sp, #28]
    9722:	17fa      	asrs	r2, r7, #31
    9724:	680b      	ldr	r3, [r1, #0]
    9726:	4654      	mov	r4, sl
    9728:	601f      	str	r7, [r3, #0]
    972a:	605a      	str	r2, [r3, #4]
    972c:	000b      	movs	r3, r1
    972e:	3304      	adds	r3, #4
    9730:	9307      	str	r3, [sp, #28]
    9732:	e6d4      	b.n	94de <__ssvfscanf_r+0x8e>
    9734:	464b      	mov	r3, r9
    9736:	4303      	orrs	r3, r0
    9738:	4699      	mov	r9, r3
    973a:	4653      	mov	r3, sl
    973c:	9903      	ldr	r1, [sp, #12]
    973e:	785b      	ldrb	r3, [r3, #1]
    9740:	468a      	mov	sl, r1
    9742:	e6e9      	b.n	9518 <__ssvfscanf_r+0xc8>
    9744:	465c      	mov	r4, fp
    9746:	4b17      	ldr	r3, [pc, #92]	; (97a4 <__ssvfscanf_r+0x354>)
    9748:	e750      	b.n	95ec <__ssvfscanf_r+0x19c>
    974a:	2340      	movs	r3, #64	; 0x40
    974c:	464a      	mov	r2, r9
    974e:	431a      	orrs	r2, r3
    9750:	2300      	movs	r3, #0
    9752:	465c      	mov	r4, fp
    9754:	4691      	mov	r9, r2
    9756:	469b      	mov	fp, r3
    9758:	e725      	b.n	95a6 <__ssvfscanf_r+0x156>
    975a:	ab14      	add	r3, sp, #80	; 0x50
    975c:	0018      	movs	r0, r3
    975e:	9903      	ldr	r1, [sp, #12]
    9760:	f002 ff76 	bl	c650 <__sccl>
    9764:	2340      	movs	r3, #64	; 0x40
    9766:	464a      	mov	r2, r9
    9768:	431a      	orrs	r2, r3
    976a:	3b3f      	subs	r3, #63	; 0x3f
    976c:	465c      	mov	r4, fp
    976e:	9003      	str	r0, [sp, #12]
    9770:	4691      	mov	r9, r2
    9772:	469b      	mov	fp, r3
    9774:	e717      	b.n	95a6 <__ssvfscanf_r+0x156>
    9776:	465c      	mov	r4, fp
    9778:	2380      	movs	r3, #128	; 0x80
    977a:	e78c      	b.n	9696 <__ssvfscanf_r+0x246>
    977c:	464a      	mov	r2, r9
    977e:	2301      	movs	r3, #1
    9780:	431a      	orrs	r2, r3
    9782:	465c      	mov	r4, fp
    9784:	4691      	mov	r9, r2
    9786:	e7b1      	b.n	96ec <__ssvfscanf_r+0x29c>
    9788:	464b      	mov	r3, r9
    978a:	4313      	orrs	r3, r2
    978c:	e7d4      	b.n	9738 <__ssvfscanf_r+0x2e8>
    978e:	2304      	movs	r3, #4
    9790:	465c      	mov	r4, fp
    9792:	469b      	mov	fp, r3
    9794:	e707      	b.n	95a6 <__ssvfscanf_r+0x156>
    9796:	46c0      	nop			; (mov r8, r8)
    9798:	fffffd4c 	.word	0xfffffd4c
    979c:	ffffdfff 	.word	0xffffdfff
    97a0:	00011c14 	.word	0x00011c14
    97a4:	00007e25 	.word	0x00007e25
    97a8:	0000d91d 	.word	0x0000d91d
    97ac:	00011df8 	.word	0x00011df8
    97b0:	2301      	movs	r3, #1
    97b2:	464a      	mov	r2, r9
    97b4:	431a      	orrs	r2, r3
    97b6:	465c      	mov	r4, fp
    97b8:	4691      	mov	r9, r2
    97ba:	4bc5      	ldr	r3, [pc, #788]	; (9ad0 <__ssvfscanf_r+0x680>)
    97bc:	e716      	b.n	95ec <__ssvfscanf_r+0x19c>
    97be:	4659      	mov	r1, fp
    97c0:	008c      	lsls	r4, r1, #2
    97c2:	2130      	movs	r1, #48	; 0x30
    97c4:	4249      	negs	r1, r1
    97c6:	445c      	add	r4, fp
    97c8:	468b      	mov	fp, r1
    97ca:	0064      	lsls	r4, r4, #1
    97cc:	18e3      	adds	r3, r4, r3
    97ce:	449b      	add	fp, r3
    97d0:	4653      	mov	r3, sl
    97d2:	9903      	ldr	r1, [sp, #12]
    97d4:	785b      	ldrb	r3, [r3, #1]
    97d6:	468a      	mov	sl, r1
    97d8:	e69e      	b.n	9518 <__ssvfscanf_r+0xc8>
    97da:	464b      	mov	r3, r9
    97dc:	2110      	movs	r1, #16
    97de:	430b      	orrs	r3, r1
    97e0:	e7aa      	b.n	9738 <__ssvfscanf_r+0x2e8>
    97e2:	9b04      	ldr	r3, [sp, #16]
    97e4:	445b      	add	r3, fp
    97e6:	2b00      	cmp	r3, #0
    97e8:	d111      	bne.n	980e <__ssvfscanf_r+0x3be>
    97ea:	4648      	mov	r0, r9
    97ec:	4bb9      	ldr	r3, [pc, #740]	; (9ad4 <__ssvfscanf_r+0x684>)
    97ee:	4018      	ands	r0, r3
    97f0:	4681      	mov	r9, r0
    97f2:	7039      	strb	r1, [r7, #0]
    97f4:	3701      	adds	r7, #1
    97f6:	6873      	ldr	r3, [r6, #4]
    97f8:	3c01      	subs	r4, #1
    97fa:	3b01      	subs	r3, #1
    97fc:	3501      	adds	r5, #1
    97fe:	6073      	str	r3, [r6, #4]
    9800:	2b00      	cmp	r3, #0
    9802:	dd23      	ble.n	984c <__ssvfscanf_r+0x3fc>
    9804:	3201      	adds	r2, #1
    9806:	6032      	str	r2, [r6, #0]
    9808:	2c00      	cmp	r4, #0
    980a:	d000      	beq.n	980e <__ssvfscanf_r+0x3be>
    980c:	e731      	b.n	9672 <__ssvfscanf_r+0x222>
    980e:	465b      	mov	r3, fp
    9810:	46bb      	mov	fp, r7
    9812:	002f      	movs	r7, r5
    9814:	001d      	movs	r5, r3
    9816:	9b06      	ldr	r3, [sp, #24]
    9818:	2b00      	cmp	r3, #0
    981a:	d056      	beq.n	98ca <__ssvfscanf_r+0x47a>
    981c:	e251      	b.n	9cc2 <__ssvfscanf_r+0x872>
    981e:	464b      	mov	r3, r9
    9820:	05db      	lsls	r3, r3, #23
    9822:	d5de      	bpl.n	97e2 <__ssvfscanf_r+0x392>
    9824:	2380      	movs	r3, #128	; 0x80
    9826:	4649      	mov	r1, r9
    9828:	4399      	bics	r1, r3
    982a:	9b06      	ldr	r3, [sp, #24]
    982c:	4689      	mov	r9, r1
    982e:	3301      	adds	r3, #1
    9830:	9306      	str	r3, [sp, #24]
    9832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9834:	2b00      	cmp	r3, #0
    9836:	d0de      	beq.n	97f6 <__ssvfscanf_r+0x3a6>
    9838:	3b01      	subs	r3, #1
    983a:	930d      	str	r3, [sp, #52]	; 0x34
    983c:	6873      	ldr	r3, [r6, #4]
    983e:	3401      	adds	r4, #1
    9840:	3b01      	subs	r3, #1
    9842:	3c01      	subs	r4, #1
    9844:	3501      	adds	r5, #1
    9846:	6073      	str	r3, [r6, #4]
    9848:	2b00      	cmp	r3, #0
    984a:	dcdb      	bgt.n	9804 <__ssvfscanf_r+0x3b4>
    984c:	0031      	movs	r1, r6
    984e:	4640      	mov	r0, r8
    9850:	f004 fa3c 	bl	dccc <__ssrefill_r>
    9854:	2800      	cmp	r0, #0
    9856:	d0d7      	beq.n	9808 <__ssvfscanf_r+0x3b8>
    9858:	e7d9      	b.n	980e <__ssvfscanf_r+0x3be>
    985a:	2380      	movs	r3, #128	; 0x80
    985c:	4648      	mov	r0, r9
    985e:	4203      	tst	r3, r0
    9860:	d0d5      	beq.n	980e <__ssvfscanf_r+0x3be>
    9862:	4398      	bics	r0, r3
    9864:	4681      	mov	r9, r0
    9866:	e7c4      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9868:	465b      	mov	r3, fp
    986a:	2b06      	cmp	r3, #6
    986c:	d1d0      	bne.n	9810 <__ssvfscanf_r+0x3c0>
    986e:	2307      	movs	r3, #7
    9870:	469b      	mov	fp, r3
    9872:	e7be      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9874:	9b04      	ldr	r3, [sp, #16]
    9876:	2b00      	cmp	r3, #0
    9878:	d000      	beq.n	987c <__ssvfscanf_r+0x42c>
    987a:	e121      	b.n	9ac0 <__ssvfscanf_r+0x670>
    987c:	9b06      	ldr	r3, [sp, #24]
    987e:	2b00      	cmp	r3, #0
    9880:	d106      	bne.n	9890 <__ssvfscanf_r+0x440>
    9882:	23e0      	movs	r3, #224	; 0xe0
    9884:	4648      	mov	r0, r9
    9886:	00db      	lsls	r3, r3, #3
    9888:	4018      	ands	r0, r3
    988a:	4298      	cmp	r0, r3
    988c:	d100      	bne.n	9890 <__ssvfscanf_r+0x440>
    988e:	e3db      	b.n	a048 <__ssvfscanf_r+0xbf8>
    9890:	465b      	mov	r3, fp
    9892:	2b01      	cmp	r3, #1
    9894:	d001      	beq.n	989a <__ssvfscanf_r+0x44a>
    9896:	2b04      	cmp	r3, #4
    9898:	d1b9      	bne.n	980e <__ssvfscanf_r+0x3be>
    989a:	465b      	mov	r3, fp
    989c:	3301      	adds	r3, #1
    989e:	b2db      	uxtb	r3, r3
    98a0:	469b      	mov	fp, r3
    98a2:	e7a6      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    98a4:	465b      	mov	r3, fp
    98a6:	2b00      	cmp	r3, #0
    98a8:	d000      	beq.n	98ac <__ssvfscanf_r+0x45c>
    98aa:	e0ff      	b.n	9aac <__ssvfscanf_r+0x65c>
    98ac:	9b06      	ldr	r3, [sp, #24]
    98ae:	2b00      	cmp	r3, #0
    98b0:	d000      	beq.n	98b4 <__ssvfscanf_r+0x464>
    98b2:	e202      	b.n	9cba <__ssvfscanf_r+0x86a>
    98b4:	23e0      	movs	r3, #224	; 0xe0
    98b6:	4648      	mov	r0, r9
    98b8:	00db      	lsls	r3, r3, #3
    98ba:	4018      	ands	r0, r3
    98bc:	4298      	cmp	r0, r3
    98be:	d100      	bne.n	98c2 <__ssvfscanf_r+0x472>
    98c0:	e3ba      	b.n	a038 <__ssvfscanf_r+0xbe8>
    98c2:	465b      	mov	r3, fp
    98c4:	46bb      	mov	fp, r7
    98c6:	002f      	movs	r7, r5
    98c8:	001d      	movs	r5, r3
    98ca:	9b04      	ldr	r3, [sp, #16]
    98cc:	3b01      	subs	r3, #1
    98ce:	2b01      	cmp	r3, #1
    98d0:	d801      	bhi.n	98d6 <__ssvfscanf_r+0x486>
    98d2:	f000 fc63 	bl	a19c <__ssvfscanf_r+0xd4c>
    98d6:	1e6b      	subs	r3, r5, #1
    98d8:	2b06      	cmp	r3, #6
    98da:	d820      	bhi.n	991e <__ssvfscanf_r+0x4ce>
    98dc:	2d02      	cmp	r5, #2
    98de:	d801      	bhi.n	98e4 <__ssvfscanf_r+0x494>
    98e0:	f000 fc6e 	bl	a1c0 <__ssvfscanf_r+0xd70>
    98e4:	2d03      	cmp	r5, #3
    98e6:	d01a      	beq.n	991e <__ssvfscanf_r+0x4ce>
    98e8:	3d04      	subs	r5, #4
    98ea:	b2ed      	uxtb	r5, r5
    98ec:	43ec      	mvns	r4, r5
    98ee:	0033      	movs	r3, r6
    98f0:	445c      	add	r4, fp
    98f2:	46aa      	mov	sl, r5
    98f4:	4646      	mov	r6, r8
    98f6:	0025      	movs	r5, r4
    98f8:	46b8      	mov	r8, r7
    98fa:	465c      	mov	r4, fp
    98fc:	001f      	movs	r7, r3
    98fe:	3c01      	subs	r4, #1
    9900:	7821      	ldrb	r1, [r4, #0]
    9902:	003a      	movs	r2, r7
    9904:	0030      	movs	r0, r6
    9906:	f004 f99f 	bl	dc48 <_sungetc_r>
    990a:	42a5      	cmp	r5, r4
    990c:	d1f7      	bne.n	98fe <__ssvfscanf_r+0x4ae>
    990e:	003b      	movs	r3, r7
    9910:	4647      	mov	r7, r8
    9912:	4655      	mov	r5, sl
    9914:	46b0      	mov	r8, r6
    9916:	46a3      	mov	fp, r4
    9918:	001e      	movs	r6, r3
    991a:	3f01      	subs	r7, #1
    991c:	1b7f      	subs	r7, r7, r5
    991e:	464b      	mov	r3, r9
    9920:	05db      	lsls	r3, r3, #23
    9922:	d519      	bpl.n	9958 <__ssvfscanf_r+0x508>
    9924:	464b      	mov	r3, r9
    9926:	055b      	lsls	r3, r3, #21
    9928:	d501      	bpl.n	992e <__ssvfscanf_r+0x4de>
    992a:	f000 fc5b 	bl	a1e4 <__ssvfscanf_r+0xd94>
    992e:	465b      	mov	r3, fp
    9930:	1e5c      	subs	r4, r3, #1
    9932:	7821      	ldrb	r1, [r4, #0]
    9934:	1e7d      	subs	r5, r7, #1
    9936:	2965      	cmp	r1, #101	; 0x65
    9938:	d008      	beq.n	994c <__ssvfscanf_r+0x4fc>
    993a:	2945      	cmp	r1, #69	; 0x45
    993c:	d006      	beq.n	994c <__ssvfscanf_r+0x4fc>
    993e:	0032      	movs	r2, r6
    9940:	4640      	mov	r0, r8
    9942:	3c01      	subs	r4, #1
    9944:	f004 f980 	bl	dc48 <_sungetc_r>
    9948:	7821      	ldrb	r1, [r4, #0]
    994a:	1ebd      	subs	r5, r7, #2
    994c:	0032      	movs	r2, r6
    994e:	4640      	mov	r0, r8
    9950:	f004 f97a 	bl	dc48 <_sungetc_r>
    9954:	002f      	movs	r7, r5
    9956:	46a3      	mov	fp, r4
    9958:	464a      	mov	r2, r9
    995a:	2310      	movs	r3, #16
    995c:	4013      	ands	r3, r2
    995e:	9a03      	ldr	r2, [sp, #12]
    9960:	4692      	mov	sl, r2
    9962:	d000      	beq.n	9966 <__ssvfscanf_r+0x516>
    9964:	e5ba      	b.n	94dc <__ssvfscanf_r+0x8c>
    9966:	465a      	mov	r2, fp
    9968:	7013      	strb	r3, [r2, #0]
    996a:	23c0      	movs	r3, #192	; 0xc0
    996c:	464a      	mov	r2, r9
    996e:	00db      	lsls	r3, r3, #3
    9970:	4013      	ands	r3, r2
    9972:	2280      	movs	r2, #128	; 0x80
    9974:	00d2      	lsls	r2, r2, #3
    9976:	4293      	cmp	r3, r2
    9978:	d100      	bne.n	997c <__ssvfscanf_r+0x52c>
    997a:	e389      	b.n	a090 <__ssvfscanf_r+0xc40>
    997c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    997e:	2b00      	cmp	r3, #0
    9980:	d000      	beq.n	9984 <__ssvfscanf_r+0x534>
    9982:	e1c0      	b.n	9d06 <__ssvfscanf_r+0x8b6>
    9984:	2200      	movs	r2, #0
    9986:	990a      	ldr	r1, [sp, #40]	; 0x28
    9988:	4640      	mov	r0, r8
    998a:	f003 fe21 	bl	d5d0 <_strtod_r>
    998e:	464b      	mov	r3, r9
    9990:	0004      	movs	r4, r0
    9992:	000d      	movs	r5, r1
    9994:	07db      	lsls	r3, r3, #31
    9996:	d403      	bmi.n	99a0 <__ssvfscanf_r+0x550>
    9998:	464b      	mov	r3, r9
    999a:	079b      	lsls	r3, r3, #30
    999c:	d400      	bmi.n	99a0 <__ssvfscanf_r+0x550>
    999e:	e198      	b.n	9cd2 <__ssvfscanf_r+0x882>
    99a0:	9a07      	ldr	r2, [sp, #28]
    99a2:	6813      	ldr	r3, [r2, #0]
    99a4:	601c      	str	r4, [r3, #0]
    99a6:	605d      	str	r5, [r3, #4]
    99a8:	0013      	movs	r3, r2
    99aa:	3304      	adds	r3, #4
    99ac:	9307      	str	r3, [sp, #28]
    99ae:	9b08      	ldr	r3, [sp, #32]
    99b0:	3301      	adds	r3, #1
    99b2:	9308      	str	r3, [sp, #32]
    99b4:	9b03      	ldr	r3, [sp, #12]
    99b6:	469a      	mov	sl, r3
    99b8:	4654      	mov	r4, sl
    99ba:	e590      	b.n	94de <__ssvfscanf_r+0x8e>
    99bc:	465b      	mov	r3, fp
    99be:	2b02      	cmp	r3, #2
    99c0:	d000      	beq.n	99c4 <__ssvfscanf_r+0x574>
    99c2:	e725      	b.n	9810 <__ssvfscanf_r+0x3c0>
    99c4:	2303      	movs	r3, #3
    99c6:	469b      	mov	fp, r3
    99c8:	e713      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    99ca:	23a0      	movs	r3, #160	; 0xa0
    99cc:	4648      	mov	r0, r9
    99ce:	00db      	lsls	r3, r3, #3
    99d0:	4003      	ands	r3, r0
    99d2:	2080      	movs	r0, #128	; 0x80
    99d4:	00c0      	lsls	r0, r0, #3
    99d6:	4283      	cmp	r3, r0
    99d8:	d007      	beq.n	99ea <__ssvfscanf_r+0x59a>
    99da:	464b      	mov	r3, r9
    99dc:	4203      	tst	r3, r0
    99de:	d100      	bne.n	99e2 <__ssvfscanf_r+0x592>
    99e0:	e715      	b.n	980e <__ssvfscanf_r+0x3be>
    99e2:	9b06      	ldr	r3, [sp, #24]
    99e4:	2b00      	cmp	r3, #0
    99e6:	d100      	bne.n	99ea <__ssvfscanf_r+0x59a>
    99e8:	e76b      	b.n	98c2 <__ssvfscanf_r+0x472>
    99ea:	2080      	movs	r0, #128	; 0x80
    99ec:	464b      	mov	r3, r9
    99ee:	0080      	lsls	r0, r0, #2
    99f0:	4203      	tst	r3, r0
    99f2:	d104      	bne.n	99fe <__ssvfscanf_r+0x5ae>
    99f4:	9b06      	ldr	r3, [sp, #24]
    99f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    99f8:	970e      	str	r7, [sp, #56]	; 0x38
    99fa:	1a1b      	subs	r3, r3, r0
    99fc:	930f      	str	r3, [sp, #60]	; 0x3c
    99fe:	4648      	mov	r0, r9
    9a00:	4b35      	ldr	r3, [pc, #212]	; (9ad8 <__ssvfscanf_r+0x688>)
    9a02:	4018      	ands	r0, r3
    9a04:	0003      	movs	r3, r0
    9a06:	20c0      	movs	r0, #192	; 0xc0
    9a08:	0040      	lsls	r0, r0, #1
    9a0a:	4318      	orrs	r0, r3
    9a0c:	2300      	movs	r3, #0
    9a0e:	4681      	mov	r9, r0
    9a10:	9306      	str	r3, [sp, #24]
    9a12:	e6ee      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9a14:	9b04      	ldr	r3, [sp, #16]
    9a16:	2b01      	cmp	r3, #1
    9a18:	d000      	beq.n	9a1c <__ssvfscanf_r+0x5cc>
    9a1a:	e6f8      	b.n	980e <__ssvfscanf_r+0x3be>
    9a1c:	2302      	movs	r3, #2
    9a1e:	9304      	str	r3, [sp, #16]
    9a20:	e6e7      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9a22:	465b      	mov	r3, fp
    9a24:	2b07      	cmp	r3, #7
    9a26:	d000      	beq.n	9a2a <__ssvfscanf_r+0x5da>
    9a28:	e6f2      	b.n	9810 <__ssvfscanf_r+0x3c0>
    9a2a:	2308      	movs	r3, #8
    9a2c:	469b      	mov	fp, r3
    9a2e:	e6e0      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	428b      	cmp	r3, r1
    9a36:	d000      	beq.n	9a3a <__ssvfscanf_r+0x5ea>
    9a38:	e6e9      	b.n	980e <__ssvfscanf_r+0x3be>
    9a3a:	2080      	movs	r0, #128	; 0x80
    9a3c:	464b      	mov	r3, r9
    9a3e:	0080      	lsls	r0, r0, #2
    9a40:	4203      	tst	r3, r0
    9a42:	d100      	bne.n	9a46 <__ssvfscanf_r+0x5f6>
    9a44:	e6e3      	b.n	980e <__ssvfscanf_r+0x3be>
    9a46:	4825      	ldr	r0, [pc, #148]	; (9adc <__ssvfscanf_r+0x68c>)
    9a48:	4003      	ands	r3, r0
    9a4a:	4699      	mov	r9, r3
    9a4c:	9b06      	ldr	r3, [sp, #24]
    9a4e:	930b      	str	r3, [sp, #44]	; 0x2c
    9a50:	e6cf      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9a52:	2b01      	cmp	r3, #1
    9a54:	d144      	bne.n	9ae0 <__ssvfscanf_r+0x690>
    9a56:	2c00      	cmp	r4, #0
    9a58:	d100      	bne.n	9a5c <__ssvfscanf_r+0x60c>
    9a5a:	3c01      	subs	r4, #1
    9a5c:	464b      	mov	r3, r9
    9a5e:	06db      	lsls	r3, r3, #27
    9a60:	d400      	bmi.n	9a64 <__ssvfscanf_r+0x614>
    9a62:	e1c1      	b.n	9de8 <__ssvfscanf_r+0x998>
    9a64:	ab14      	add	r3, sp, #80	; 0x50
    9a66:	2500      	movs	r5, #0
    9a68:	469a      	mov	sl, r3
    9a6a:	6832      	ldr	r2, [r6, #0]
    9a6c:	4651      	mov	r1, sl
    9a6e:	7813      	ldrb	r3, [r2, #0]
    9a70:	5ccb      	ldrb	r3, [r1, r3]
    9a72:	2b00      	cmp	r3, #0
    9a74:	d015      	beq.n	9aa2 <__ssvfscanf_r+0x652>
    9a76:	6873      	ldr	r3, [r6, #4]
    9a78:	3201      	adds	r2, #1
    9a7a:	3b01      	subs	r3, #1
    9a7c:	3501      	adds	r5, #1
    9a7e:	6073      	str	r3, [r6, #4]
    9a80:	6032      	str	r2, [r6, #0]
    9a82:	42ac      	cmp	r4, r5
    9a84:	d010      	beq.n	9aa8 <__ssvfscanf_r+0x658>
    9a86:	2b00      	cmp	r3, #0
    9a88:	dcf0      	bgt.n	9a6c <__ssvfscanf_r+0x61c>
    9a8a:	0031      	movs	r1, r6
    9a8c:	4640      	mov	r0, r8
    9a8e:	f004 f91d 	bl	dccc <__ssrefill_r>
    9a92:	2800      	cmp	r0, #0
    9a94:	d108      	bne.n	9aa8 <__ssvfscanf_r+0x658>
    9a96:	4651      	mov	r1, sl
    9a98:	6832      	ldr	r2, [r6, #0]
    9a9a:	7813      	ldrb	r3, [r2, #0]
    9a9c:	5ccb      	ldrb	r3, [r1, r3]
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	d1e9      	bne.n	9a76 <__ssvfscanf_r+0x626>
    9aa2:	2d00      	cmp	r5, #0
    9aa4:	d100      	bne.n	9aa8 <__ssvfscanf_r+0x658>
    9aa6:	e520      	b.n	94ea <__ssvfscanf_r+0x9a>
    9aa8:	197f      	adds	r7, r7, r5
    9aaa:	e783      	b.n	99b4 <__ssvfscanf_r+0x564>
    9aac:	465b      	mov	r3, fp
    9aae:	20fd      	movs	r0, #253	; 0xfd
    9ab0:	3b03      	subs	r3, #3
    9ab2:	4203      	tst	r3, r0
    9ab4:	d000      	beq.n	9ab8 <__ssvfscanf_r+0x668>
    9ab6:	e6aa      	b.n	980e <__ssvfscanf_r+0x3be>
    9ab8:	3304      	adds	r3, #4
    9aba:	b2db      	uxtb	r3, r3
    9abc:	469b      	mov	fp, r3
    9abe:	e698      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9ac0:	9b04      	ldr	r3, [sp, #16]
    9ac2:	2b02      	cmp	r3, #2
    9ac4:	d000      	beq.n	9ac8 <__ssvfscanf_r+0x678>
    9ac6:	e6e3      	b.n	9890 <__ssvfscanf_r+0x440>
    9ac8:	2303      	movs	r3, #3
    9aca:	9304      	str	r3, [sp, #16]
    9acc:	e691      	b.n	97f2 <__ssvfscanf_r+0x3a2>
    9ace:	46c0      	nop			; (mov r8, r8)
    9ad0:	00007e25 	.word	0x00007e25
    9ad4:	fffffe7f 	.word	0xfffffe7f
    9ad8:	fffff87f 	.word	0xfffff87f
    9adc:	fffffd7f 	.word	0xfffffd7f
    9ae0:	2c00      	cmp	r4, #0
    9ae2:	d100      	bne.n	9ae6 <__ssvfscanf_r+0x696>
    9ae4:	3401      	adds	r4, #1
    9ae6:	464b      	mov	r3, r9
    9ae8:	07db      	lsls	r3, r3, #31
    9aea:	d500      	bpl.n	9aee <__ssvfscanf_r+0x69e>
    9aec:	e1aa      	b.n	9e44 <__ssvfscanf_r+0x9f4>
    9aee:	464b      	mov	r3, r9
    9af0:	06db      	lsls	r3, r3, #27
    9af2:	d400      	bmi.n	9af6 <__ssvfscanf_r+0x6a6>
    9af4:	e22f      	b.n	9f56 <__ssvfscanf_r+0xb06>
    9af6:	4643      	mov	r3, r8
    9af8:	2500      	movs	r5, #0
    9afa:	46b8      	mov	r8, r7
    9afc:	001f      	movs	r7, r3
    9afe:	e00c      	b.n	9b1a <__ssvfscanf_r+0x6ca>
    9b00:	6832      	ldr	r2, [r6, #0]
    9b02:	18ed      	adds	r5, r5, r3
    9b04:	4694      	mov	ip, r2
    9b06:	1ae4      	subs	r4, r4, r3
    9b08:	4463      	add	r3, ip
    9b0a:	6033      	str	r3, [r6, #0]
    9b0c:	0031      	movs	r1, r6
    9b0e:	0038      	movs	r0, r7
    9b10:	f004 f8dc 	bl	dccc <__ssrefill_r>
    9b14:	2800      	cmp	r0, #0
    9b16:	d000      	beq.n	9b1a <__ssvfscanf_r+0x6ca>
    9b18:	e214      	b.n	9f44 <__ssvfscanf_r+0xaf4>
    9b1a:	6873      	ldr	r3, [r6, #4]
    9b1c:	42a3      	cmp	r3, r4
    9b1e:	dbef      	blt.n	9b00 <__ssvfscanf_r+0x6b0>
    9b20:	1b1b      	subs	r3, r3, r4
    9b22:	6073      	str	r3, [r6, #4]
    9b24:	6833      	ldr	r3, [r6, #0]
    9b26:	003a      	movs	r2, r7
    9b28:	469c      	mov	ip, r3
    9b2a:	4647      	mov	r7, r8
    9b2c:	192d      	adds	r5, r5, r4
    9b2e:	4464      	add	r4, ip
    9b30:	4690      	mov	r8, r2
    9b32:	6034      	str	r4, [r6, #0]
    9b34:	197f      	adds	r7, r7, r5
    9b36:	e73d      	b.n	99b4 <__ssvfscanf_r+0x564>
    9b38:	22ae      	movs	r2, #174	; 0xae
    9b3a:	2100      	movs	r1, #0
    9b3c:	1e63      	subs	r3, r4, #1
    9b3e:	0052      	lsls	r2, r2, #1
    9b40:	468b      	mov	fp, r1
    9b42:	4293      	cmp	r3, r2
    9b44:	d904      	bls.n	9b50 <__ssvfscanf_r+0x700>
    9b46:	4bcb      	ldr	r3, [pc, #812]	; (9e74 <__ssvfscanf_r+0xa24>)
    9b48:	469b      	mov	fp, r3
    9b4a:	44a3      	add	fp, r4
    9b4c:	245e      	movs	r4, #94	; 0x5e
    9b4e:	34ff      	adds	r4, #255	; 0xff
    9b50:	23d8      	movs	r3, #216	; 0xd8
    9b52:	464a      	mov	r2, r9
    9b54:	011b      	lsls	r3, r3, #4
    9b56:	431a      	orrs	r2, r3
    9b58:	2300      	movs	r3, #0
    9b5a:	469a      	mov	sl, r3
    9b5c:	ab54      	add	r3, sp, #336	; 0x150
    9b5e:	930a      	str	r3, [sp, #40]	; 0x28
    9b60:	001d      	movs	r5, r3
    9b62:	003b      	movs	r3, r7
    9b64:	0017      	movs	r7, r2
    9b66:	4699      	mov	r9, r3
    9b68:	6832      	ldr	r2, [r6, #0]
    9b6a:	7811      	ldrb	r1, [r2, #0]
    9b6c:	000b      	movs	r3, r1
    9b6e:	3b2b      	subs	r3, #43	; 0x2b
    9b70:	b2db      	uxtb	r3, r3
    9b72:	2b4d      	cmp	r3, #77	; 0x4d
    9b74:	d81d      	bhi.n	9bb2 <__ssvfscanf_r+0x762>
    9b76:	48c0      	ldr	r0, [pc, #768]	; (9e78 <__ssvfscanf_r+0xa28>)
    9b78:	009b      	lsls	r3, r3, #2
    9b7a:	58c3      	ldr	r3, [r0, r3]
    9b7c:	469f      	mov	pc, r3
    9b7e:	23c0      	movs	r3, #192	; 0xc0
    9b80:	2080      	movs	r0, #128	; 0x80
    9b82:	00db      	lsls	r3, r3, #3
    9b84:	403b      	ands	r3, r7
    9b86:	0080      	lsls	r0, r0, #2
    9b88:	4283      	cmp	r3, r0
    9b8a:	d112      	bne.n	9bb2 <__ssvfscanf_r+0x762>
    9b8c:	4bbb      	ldr	r3, [pc, #748]	; (9e7c <__ssvfscanf_r+0xa2c>)
    9b8e:	401f      	ands	r7, r3
    9b90:	23a0      	movs	r3, #160	; 0xa0
    9b92:	00db      	lsls	r3, r3, #3
    9b94:	431f      	orrs	r7, r3
    9b96:	2310      	movs	r3, #16
    9b98:	9305      	str	r3, [sp, #20]
    9b9a:	6873      	ldr	r3, [r6, #4]
    9b9c:	7029      	strb	r1, [r5, #0]
    9b9e:	3b01      	subs	r3, #1
    9ba0:	3501      	adds	r5, #1
    9ba2:	6073      	str	r3, [r6, #4]
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	dd49      	ble.n	9c3c <__ssvfscanf_r+0x7ec>
    9ba8:	3201      	adds	r2, #1
    9baa:	6032      	str	r2, [r6, #0]
    9bac:	3c01      	subs	r4, #1
    9bae:	2c00      	cmp	r4, #0
    9bb0:	d1da      	bne.n	9b68 <__ssvfscanf_r+0x718>
    9bb2:	464b      	mov	r3, r9
    9bb4:	46b9      	mov	r9, r7
    9bb6:	001f      	movs	r7, r3
    9bb8:	464b      	mov	r3, r9
    9bba:	05db      	lsls	r3, r3, #23
    9bbc:	d507      	bpl.n	9bce <__ssvfscanf_r+0x77e>
    9bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9bc0:	429d      	cmp	r5, r3
    9bc2:	d900      	bls.n	9bc6 <__ssvfscanf_r+0x776>
    9bc4:	e231      	b.n	a02a <__ssvfscanf_r+0xbda>
    9bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9bc8:	429d      	cmp	r5, r3
    9bca:	d100      	bne.n	9bce <__ssvfscanf_r+0x77e>
    9bcc:	e48d      	b.n	94ea <__ssvfscanf_r+0x9a>
    9bce:	2310      	movs	r3, #16
    9bd0:	464a      	mov	r2, r9
    9bd2:	4013      	ands	r3, r2
    9bd4:	d100      	bne.n	9bd8 <__ssvfscanf_r+0x788>
    9bd6:	e0b7      	b.n	9d48 <__ssvfscanf_r+0x8f8>
    9bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9bda:	1aed      	subs	r5, r5, r3
    9bdc:	4455      	add	r5, sl
    9bde:	197f      	adds	r7, r7, r5
    9be0:	e6e8      	b.n	99b4 <__ssvfscanf_r+0x564>
    9be2:	9b05      	ldr	r3, [sp, #20]
    9be4:	2b0a      	cmp	r3, #10
    9be6:	dde4      	ble.n	9bb2 <__ssvfscanf_r+0x762>
    9be8:	4ba5      	ldr	r3, [pc, #660]	; (9e80 <__ssvfscanf_r+0xa30>)
    9bea:	401f      	ands	r7, r3
    9bec:	e7d5      	b.n	9b9a <__ssvfscanf_r+0x74a>
    9bee:	9b05      	ldr	r3, [sp, #20]
    9bf0:	48a4      	ldr	r0, [pc, #656]	; (9e84 <__ssvfscanf_r+0xa34>)
    9bf2:	005b      	lsls	r3, r3, #1
    9bf4:	5e1b      	ldrsh	r3, [r3, r0]
    9bf6:	9305      	str	r3, [sp, #20]
    9bf8:	4ba1      	ldr	r3, [pc, #644]	; (9e80 <__ssvfscanf_r+0xa30>)
    9bfa:	401f      	ands	r7, r3
    9bfc:	e7cd      	b.n	9b9a <__ssvfscanf_r+0x74a>
    9bfe:	053b      	lsls	r3, r7, #20
    9c00:	d5cb      	bpl.n	9b9a <__ssvfscanf_r+0x74a>
    9c02:	9b05      	ldr	r3, [sp, #20]
    9c04:	2b00      	cmp	r3, #0
    9c06:	d105      	bne.n	9c14 <__ssvfscanf_r+0x7c4>
    9c08:	2380      	movs	r3, #128	; 0x80
    9c0a:	009b      	lsls	r3, r3, #2
    9c0c:	431f      	orrs	r7, r3
    9c0e:	3bf9      	subs	r3, #249	; 0xf9
    9c10:	3bff      	subs	r3, #255	; 0xff
    9c12:	9305      	str	r3, [sp, #20]
    9c14:	057b      	lsls	r3, r7, #21
    9c16:	d459      	bmi.n	9ccc <__ssvfscanf_r+0x87c>
    9c18:	4b9b      	ldr	r3, [pc, #620]	; (9e88 <__ssvfscanf_r+0xa38>)
    9c1a:	401f      	ands	r7, r3
    9c1c:	465b      	mov	r3, fp
    9c1e:	2b00      	cmp	r3, #0
    9c20:	d004      	beq.n	9c2c <__ssvfscanf_r+0x7dc>
    9c22:	2301      	movs	r3, #1
    9c24:	425b      	negs	r3, r3
    9c26:	469c      	mov	ip, r3
    9c28:	3401      	adds	r4, #1
    9c2a:	44e3      	add	fp, ip
    9c2c:	2301      	movs	r3, #1
    9c2e:	469c      	mov	ip, r3
    9c30:	6873      	ldr	r3, [r6, #4]
    9c32:	44e2      	add	sl, ip
    9c34:	3b01      	subs	r3, #1
    9c36:	6073      	str	r3, [r6, #4]
    9c38:	2b00      	cmp	r3, #0
    9c3a:	dcb5      	bgt.n	9ba8 <__ssvfscanf_r+0x758>
    9c3c:	0031      	movs	r1, r6
    9c3e:	4640      	mov	r0, r8
    9c40:	f004 f844 	bl	dccc <__ssrefill_r>
    9c44:	2800      	cmp	r0, #0
    9c46:	d0b1      	beq.n	9bac <__ssvfscanf_r+0x75c>
    9c48:	e7b3      	b.n	9bb2 <__ssvfscanf_r+0x762>
    9c4a:	9b05      	ldr	r3, [sp, #20]
    9c4c:	488d      	ldr	r0, [pc, #564]	; (9e84 <__ssvfscanf_r+0xa34>)
    9c4e:	005b      	lsls	r3, r3, #1
    9c50:	5e1b      	ldrsh	r3, [r3, r0]
    9c52:	9305      	str	r3, [sp, #20]
    9c54:	2b08      	cmp	r3, #8
    9c56:	dcc7      	bgt.n	9be8 <__ssvfscanf_r+0x798>
    9c58:	e7ab      	b.n	9bb2 <__ssvfscanf_r+0x762>
    9c5a:	2380      	movs	r3, #128	; 0x80
    9c5c:	423b      	tst	r3, r7
    9c5e:	d0a8      	beq.n	9bb2 <__ssvfscanf_r+0x762>
    9c60:	439f      	bics	r7, r3
    9c62:	e79a      	b.n	9b9a <__ssvfscanf_r+0x74a>
    9c64:	2c00      	cmp	r4, #0
    9c66:	d100      	bne.n	9c6a <__ssvfscanf_r+0x81a>
    9c68:	3c01      	subs	r4, #1
    9c6a:	2501      	movs	r5, #1
    9c6c:	464b      	mov	r3, r9
    9c6e:	401d      	ands	r5, r3
    9c70:	d000      	beq.n	9c74 <__ssvfscanf_r+0x824>
    9c72:	e093      	b.n	9d9c <__ssvfscanf_r+0x94c>
    9c74:	464b      	mov	r3, r9
    9c76:	06db      	lsls	r3, r3, #27
    9c78:	d400      	bmi.n	9c7c <__ssvfscanf_r+0x82c>
    9c7a:	e183      	b.n	9f84 <__ssvfscanf_r+0xb34>
    9c7c:	2308      	movs	r3, #8
    9c7e:	4699      	mov	r9, r3
    9c80:	f001 fcb8 	bl	b5f4 <__locale_ctype_ptr>
    9c84:	4649      	mov	r1, r9
    9c86:	6833      	ldr	r3, [r6, #0]
    9c88:	781a      	ldrb	r2, [r3, #0]
    9c8a:	1880      	adds	r0, r0, r2
    9c8c:	7842      	ldrb	r2, [r0, #1]
    9c8e:	4211      	tst	r1, r2
    9c90:	d000      	beq.n	9c94 <__ssvfscanf_r+0x844>
    9c92:	e709      	b.n	9aa8 <__ssvfscanf_r+0x658>
    9c94:	6872      	ldr	r2, [r6, #4]
    9c96:	3301      	adds	r3, #1
    9c98:	3a01      	subs	r2, #1
    9c9a:	3501      	adds	r5, #1
    9c9c:	6072      	str	r2, [r6, #4]
    9c9e:	6033      	str	r3, [r6, #0]
    9ca0:	42ac      	cmp	r4, r5
    9ca2:	d100      	bne.n	9ca6 <__ssvfscanf_r+0x856>
    9ca4:	e700      	b.n	9aa8 <__ssvfscanf_r+0x658>
    9ca6:	2a00      	cmp	r2, #0
    9ca8:	dcea      	bgt.n	9c80 <__ssvfscanf_r+0x830>
    9caa:	0031      	movs	r1, r6
    9cac:	4640      	mov	r0, r8
    9cae:	f004 f80d 	bl	dccc <__ssrefill_r>
    9cb2:	2800      	cmp	r0, #0
    9cb4:	d0e4      	beq.n	9c80 <__ssvfscanf_r+0x830>
    9cb6:	197f      	adds	r7, r7, r5
    9cb8:	e67c      	b.n	99b4 <__ssvfscanf_r+0x564>
    9cba:	465b      	mov	r3, fp
    9cbc:	46bb      	mov	fp, r7
    9cbe:	002f      	movs	r7, r5
    9cc0:	001d      	movs	r5, r3
    9cc2:	464a      	mov	r2, r9
    9cc4:	4b71      	ldr	r3, [pc, #452]	; (9e8c <__ssvfscanf_r+0xa3c>)
    9cc6:	401a      	ands	r2, r3
    9cc8:	4691      	mov	r9, r2
    9cca:	e5fe      	b.n	98ca <__ssvfscanf_r+0x47a>
    9ccc:	4b70      	ldr	r3, [pc, #448]	; (9e90 <__ssvfscanf_r+0xa40>)
    9cce:	401f      	ands	r7, r3
    9cd0:	e763      	b.n	9b9a <__ssvfscanf_r+0x74a>
    9cd2:	9b07      	ldr	r3, [sp, #28]
    9cd4:	1d1a      	adds	r2, r3, #4
    9cd6:	681b      	ldr	r3, [r3, #0]
    9cd8:	4692      	mov	sl, r2
    9cda:	4699      	mov	r9, r3
    9cdc:	0002      	movs	r2, r0
    9cde:	000b      	movs	r3, r1
    9ce0:	f005 fa8e 	bl	f200 <__aeabi_dcmpun>
    9ce4:	2800      	cmp	r0, #0
    9ce6:	d000      	beq.n	9cea <__ssvfscanf_r+0x89a>
    9ce8:	e28e      	b.n	a208 <__ssvfscanf_r+0xdb8>
    9cea:	0020      	movs	r0, r4
    9cec:	0029      	movs	r1, r5
    9cee:	f7fd f963 	bl	6fb8 <__aeabi_d2f>
    9cf2:	464b      	mov	r3, r9
    9cf4:	6018      	str	r0, [r3, #0]
    9cf6:	4653      	mov	r3, sl
    9cf8:	9307      	str	r3, [sp, #28]
    9cfa:	e658      	b.n	99ae <__ssvfscanf_r+0x55e>
    9cfc:	464a      	mov	r2, r9
    9cfe:	431a      	orrs	r2, r3
    9d00:	4691      	mov	r9, r2
    9d02:	4b64      	ldr	r3, [pc, #400]	; (9e94 <__ssvfscanf_r+0xa44>)
    9d04:	e472      	b.n	95ec <__ssvfscanf_r+0x19c>
    9d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9d08:	2200      	movs	r2, #0
    9d0a:	1c59      	adds	r1, r3, #1
    9d0c:	4640      	mov	r0, r8
    9d0e:	230a      	movs	r3, #10
    9d10:	f7fe f888 	bl	7e24 <_strtol_r>
    9d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9d16:	1ac2      	subs	r2, r0, r3
    9d18:	a90e      	add	r1, sp, #56	; 0x38
    9d1a:	468c      	mov	ip, r1
    9d1c:	4b5e      	ldr	r3, [pc, #376]	; (9e98 <__ssvfscanf_r+0xa48>)
    9d1e:	990e      	ldr	r1, [sp, #56]	; 0x38
    9d20:	4463      	add	r3, ip
    9d22:	4299      	cmp	r1, r3
    9d24:	d302      	bcc.n	9d2c <__ssvfscanf_r+0x8dc>
    9d26:	4b5d      	ldr	r3, [pc, #372]	; (9e9c <__ssvfscanf_r+0xa4c>)
    9d28:	4463      	add	r3, ip
    9d2a:	930e      	str	r3, [sp, #56]	; 0x38
    9d2c:	495c      	ldr	r1, [pc, #368]	; (9ea0 <__ssvfscanf_r+0xa50>)
    9d2e:	980e      	ldr	r0, [sp, #56]	; 0x38
    9d30:	f002 fcc8 	bl	c6c4 <sprintf>
    9d34:	e626      	b.n	9984 <__ssvfscanf_r+0x534>
    9d36:	9a07      	ldr	r2, [sp, #28]
    9d38:	4654      	mov	r4, sl
    9d3a:	6813      	ldr	r3, [r2, #0]
    9d3c:	601f      	str	r7, [r3, #0]
    9d3e:	0013      	movs	r3, r2
    9d40:	3304      	adds	r3, #4
    9d42:	9307      	str	r3, [sp, #28]
    9d44:	f7ff fbcb 	bl	94de <__ssvfscanf_r+0x8e>
    9d48:	702b      	strb	r3, [r5, #0]
    9d4a:	2200      	movs	r2, #0
    9d4c:	9b05      	ldr	r3, [sp, #20]
    9d4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d50:	4640      	mov	r0, r8
    9d52:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9d54:	47a0      	blx	r4
    9d56:	464b      	mov	r3, r9
    9d58:	069b      	lsls	r3, r3, #26
    9d5a:	d500      	bpl.n	9d5e <__ssvfscanf_r+0x90e>
    9d5c:	e15b      	b.n	a016 <__ssvfscanf_r+0xbc6>
    9d5e:	464b      	mov	r3, r9
    9d60:	075b      	lsls	r3, r3, #29
    9d62:	d500      	bpl.n	9d66 <__ssvfscanf_r+0x916>
    9d64:	e1c6      	b.n	a0f4 <__ssvfscanf_r+0xca4>
    9d66:	464b      	mov	r3, r9
    9d68:	07db      	lsls	r3, r3, #31
    9d6a:	d500      	bpl.n	9d6e <__ssvfscanf_r+0x91e>
    9d6c:	e153      	b.n	a016 <__ssvfscanf_r+0xbc6>
    9d6e:	464b      	mov	r3, r9
    9d70:	079b      	lsls	r3, r3, #30
    9d72:	d400      	bmi.n	9d76 <__ssvfscanf_r+0x926>
    9d74:	e14f      	b.n	a016 <__ssvfscanf_r+0xbc6>
    9d76:	4b4b      	ldr	r3, [pc, #300]	; (9ea4 <__ssvfscanf_r+0xa54>)
    9d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9d7a:	429a      	cmp	r2, r3
    9d7c:	d100      	bne.n	9d80 <__ssvfscanf_r+0x930>
    9d7e:	e1b2      	b.n	a0e6 <__ssvfscanf_r+0xc96>
    9d80:	9b05      	ldr	r3, [sp, #20]
    9d82:	2200      	movs	r2, #0
    9d84:	990a      	ldr	r1, [sp, #40]	; 0x28
    9d86:	4640      	mov	r0, r8
    9d88:	f003 fd10 	bl	d7ac <_strtoll_r>
    9d8c:	9a07      	ldr	r2, [sp, #28]
    9d8e:	6813      	ldr	r3, [r2, #0]
    9d90:	6018      	str	r0, [r3, #0]
    9d92:	6059      	str	r1, [r3, #4]
    9d94:	0013      	movs	r3, r2
    9d96:	3304      	adds	r3, #4
    9d98:	9307      	str	r3, [sp, #28]
    9d9a:	e142      	b.n	a022 <__ssvfscanf_r+0xbd2>
    9d9c:	ab12      	add	r3, sp, #72	; 0x48
    9d9e:	2208      	movs	r2, #8
    9da0:	0018      	movs	r0, r3
    9da2:	2100      	movs	r1, #0
    9da4:	9306      	str	r3, [sp, #24]
    9da6:	f7fd fba5 	bl	74f4 <memset>
    9daa:	2310      	movs	r3, #16
    9dac:	464a      	mov	r2, r9
    9dae:	401a      	ands	r2, r3
    9db0:	ab11      	add	r3, sp, #68	; 0x44
    9db2:	4693      	mov	fp, r2
    9db4:	4699      	mov	r9, r3
    9db6:	2a00      	cmp	r2, #0
    9db8:	d100      	bne.n	9dbc <__ssvfscanf_r+0x96c>
    9dba:	e17f      	b.n	a0bc <__ssvfscanf_r+0xc6c>
    9dbc:	2300      	movs	r3, #0
    9dbe:	001d      	movs	r5, r3
    9dc0:	f001 fc18 	bl	b5f4 <__locale_ctype_ptr>
    9dc4:	2208      	movs	r2, #8
    9dc6:	6833      	ldr	r3, [r6, #0]
    9dc8:	781b      	ldrb	r3, [r3, #0]
    9dca:	18c0      	adds	r0, r0, r3
    9dcc:	7843      	ldrb	r3, [r0, #1]
    9dce:	421a      	tst	r2, r3
    9dd0:	d102      	bne.n	9dd8 <__ssvfscanf_r+0x988>
    9dd2:	2c00      	cmp	r4, #0
    9dd4:	d000      	beq.n	9dd8 <__ssvfscanf_r+0x988>
    9dd6:	e194      	b.n	a102 <__ssvfscanf_r+0xcb2>
    9dd8:	465b      	mov	r3, fp
    9dda:	2b00      	cmp	r3, #0
    9ddc:	d000      	beq.n	9de0 <__ssvfscanf_r+0x990>
    9dde:	e5e9      	b.n	99b4 <__ssvfscanf_r+0x564>
    9de0:	464b      	mov	r3, r9
    9de2:	465a      	mov	r2, fp
    9de4:	601a      	str	r2, [r3, #0]
    9de6:	e5e2      	b.n	99ae <__ssvfscanf_r+0x55e>
    9de8:	9b07      	ldr	r3, [sp, #28]
    9dea:	3c01      	subs	r4, #1
    9dec:	1d1a      	adds	r2, r3, #4
    9dee:	681b      	ldr	r3, [r3, #0]
    9df0:	4693      	mov	fp, r2
    9df2:	4699      	mov	r9, r3
    9df4:	001a      	movs	r2, r3
    9df6:	444c      	add	r4, r9
    9df8:	ab14      	add	r3, sp, #80	; 0x50
    9dfa:	46ba      	mov	sl, r7
    9dfc:	001d      	movs	r5, r3
    9dfe:	0027      	movs	r7, r4
    9e00:	6833      	ldr	r3, [r6, #0]
    9e02:	7819      	ldrb	r1, [r3, #0]
    9e04:	5c69      	ldrb	r1, [r5, r1]
    9e06:	2900      	cmp	r1, #0
    9e08:	d100      	bne.n	9e0c <__ssvfscanf_r+0x9bc>
    9e0a:	e13e      	b.n	a08a <__ssvfscanf_r+0xc3a>
    9e0c:	6871      	ldr	r1, [r6, #4]
    9e0e:	1c54      	adds	r4, r2, #1
    9e10:	3901      	subs	r1, #1
    9e12:	6071      	str	r1, [r6, #4]
    9e14:	1c59      	adds	r1, r3, #1
    9e16:	6031      	str	r1, [r6, #0]
    9e18:	781b      	ldrb	r3, [r3, #0]
    9e1a:	7013      	strb	r3, [r2, #0]
    9e1c:	42ba      	cmp	r2, r7
    9e1e:	d100      	bne.n	9e22 <__ssvfscanf_r+0x9d2>
    9e20:	e124      	b.n	a06c <__ssvfscanf_r+0xc1c>
    9e22:	6873      	ldr	r3, [r6, #4]
    9e24:	2b00      	cmp	r3, #0
    9e26:	dd01      	ble.n	9e2c <__ssvfscanf_r+0x9dc>
    9e28:	0022      	movs	r2, r4
    9e2a:	e7e9      	b.n	9e00 <__ssvfscanf_r+0x9b0>
    9e2c:	0031      	movs	r1, r6
    9e2e:	4640      	mov	r0, r8
    9e30:	f003 ff4c 	bl	dccc <__ssrefill_r>
    9e34:	2800      	cmp	r0, #0
    9e36:	d0f7      	beq.n	9e28 <__ssvfscanf_r+0x9d8>
    9e38:	4657      	mov	r7, sl
    9e3a:	45a1      	cmp	r9, r4
    9e3c:	d000      	beq.n	9e40 <__ssvfscanf_r+0x9f0>
    9e3e:	e116      	b.n	a06e <__ssvfscanf_r+0xc1e>
    9e40:	f7ff fba0 	bl	9584 <__ssvfscanf_r+0x134>
    9e44:	ab12      	add	r3, sp, #72	; 0x48
    9e46:	2208      	movs	r2, #8
    9e48:	0018      	movs	r0, r3
    9e4a:	2100      	movs	r1, #0
    9e4c:	9306      	str	r3, [sp, #24]
    9e4e:	f7fd fb51 	bl	74f4 <memset>
    9e52:	2310      	movs	r3, #16
    9e54:	464a      	mov	r2, r9
    9e56:	401a      	ands	r2, r3
    9e58:	9204      	str	r2, [sp, #16]
    9e5a:	d100      	bne.n	9e5e <__ssvfscanf_r+0xa0e>
    9e5c:	e124      	b.n	a0a8 <__ssvfscanf_r+0xc58>
    9e5e:	2300      	movs	r3, #0
    9e60:	469b      	mov	fp, r3
    9e62:	2c00      	cmp	r4, #0
    9e64:	d100      	bne.n	9e68 <__ssvfscanf_r+0xa18>
    9e66:	e5a5      	b.n	99b4 <__ssvfscanf_r+0x564>
    9e68:	9b06      	ldr	r3, [sp, #24]
    9e6a:	46b9      	mov	r9, r7
    9e6c:	2500      	movs	r5, #0
    9e6e:	0027      	movs	r7, r4
    9e70:	469a      	mov	sl, r3
    9e72:	e02a      	b.n	9eca <__ssvfscanf_r+0xa7a>
    9e74:	fffffea3 	.word	0xfffffea3
    9e78:	00011f34 	.word	0x00011f34
    9e7c:	fffffdff 	.word	0xfffffdff
    9e80:	fffff47f 	.word	0xfffff47f
    9e84:	00012074 	.word	0x00012074
    9e88:	fffffc7f 	.word	0xfffffc7f
    9e8c:	fffffeff 	.word	0xfffffeff
    9e90:	fffffa7f 	.word	0xfffffa7f
    9e94:	00007e25 	.word	0x00007e25
    9e98:	0000026b 	.word	0x0000026b
    9e9c:	0000026a 	.word	0x0000026a
    9ea0:	0001206c 	.word	0x0001206c
    9ea4:	0000d91d 	.word	0x0000d91d
    9ea8:	9b04      	ldr	r3, [sp, #16]
    9eaa:	2b00      	cmp	r3, #0
    9eac:	d146      	bne.n	9f3c <__ssvfscanf_r+0xaec>
    9eae:	465a      	mov	r2, fp
    9eb0:	44a1      	add	r9, r4
    9eb2:	6013      	str	r3, [r2, #0]
    9eb4:	3f01      	subs	r7, #1
    9eb6:	2304      	movs	r3, #4
    9eb8:	469c      	mov	ip, r3
    9eba:	2500      	movs	r5, #0
    9ebc:	44e3      	add	fp, ip
    9ebe:	6873      	ldr	r3, [r6, #4]
    9ec0:	2b00      	cmp	r3, #0
    9ec2:	dd2f      	ble.n	9f24 <__ssvfscanf_r+0xad4>
    9ec4:	2f00      	cmp	r7, #0
    9ec6:	d100      	bne.n	9eca <__ssvfscanf_r+0xa7a>
    9ec8:	e0fe      	b.n	a0c8 <__ssvfscanf_r+0xc78>
    9eca:	f001 fb7f 	bl	b5cc <__locale_mb_cur_max>
    9ece:	42a8      	cmp	r0, r5
    9ed0:	d101      	bne.n	9ed6 <__ssvfscanf_r+0xa86>
    9ed2:	f7ff fb57 	bl	9584 <__ssvfscanf_r+0x134>
    9ed6:	208c      	movs	r0, #140	; 0x8c
    9ed8:	6833      	ldr	r3, [r6, #0]
    9eda:	0040      	lsls	r0, r0, #1
    9edc:	781a      	ldrb	r2, [r3, #0]
    9ede:	3301      	adds	r3, #1
    9ee0:	6033      	str	r3, [r6, #0]
    9ee2:	4653      	mov	r3, sl
    9ee4:	a90e      	add	r1, sp, #56	; 0x38
    9ee6:	1809      	adds	r1, r1, r0
    9ee8:	554a      	strb	r2, [r1, r5]
    9eea:	6872      	ldr	r2, [r6, #4]
    9eec:	1c6c      	adds	r4, r5, #1
    9eee:	3a01      	subs	r2, #1
    9ef0:	6072      	str	r2, [r6, #4]
    9ef2:	4659      	mov	r1, fp
    9ef4:	9300      	str	r3, [sp, #0]
    9ef6:	aa54      	add	r2, sp, #336	; 0x150
    9ef8:	0023      	movs	r3, r4
    9efa:	4640      	mov	r0, r8
    9efc:	f001 fe50 	bl	bba0 <_mbrtowc_r>
    9f00:	1c43      	adds	r3, r0, #1
    9f02:	d101      	bne.n	9f08 <__ssvfscanf_r+0xab8>
    9f04:	f7ff fb3e 	bl	9584 <__ssvfscanf_r+0x134>
    9f08:	2800      	cmp	r0, #0
    9f0a:	d0cd      	beq.n	9ea8 <__ssvfscanf_r+0xa58>
    9f0c:	0025      	movs	r5, r4
    9f0e:	1c83      	adds	r3, r0, #2
    9f10:	d0d5      	beq.n	9ebe <__ssvfscanf_r+0xa6e>
    9f12:	9b04      	ldr	r3, [sp, #16]
    9f14:	44a1      	add	r9, r4
    9f16:	3f01      	subs	r7, #1
    9f18:	2500      	movs	r5, #0
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	d0cb      	beq.n	9eb6 <__ssvfscanf_r+0xa66>
    9f1e:	6873      	ldr	r3, [r6, #4]
    9f20:	2b00      	cmp	r3, #0
    9f22:	dccf      	bgt.n	9ec4 <__ssvfscanf_r+0xa74>
    9f24:	0031      	movs	r1, r6
    9f26:	4640      	mov	r0, r8
    9f28:	f003 fed0 	bl	dccc <__ssrefill_r>
    9f2c:	2800      	cmp	r0, #0
    9f2e:	d0c9      	beq.n	9ec4 <__ssvfscanf_r+0xa74>
    9f30:	464f      	mov	r7, r9
    9f32:	2d00      	cmp	r5, #0
    9f34:	d100      	bne.n	9f38 <__ssvfscanf_r+0xae8>
    9f36:	e0c8      	b.n	a0ca <__ssvfscanf_r+0xc7a>
    9f38:	f7ff fb24 	bl	9584 <__ssvfscanf_r+0x134>
    9f3c:	44a1      	add	r9, r4
    9f3e:	3f01      	subs	r7, #1
    9f40:	2500      	movs	r5, #0
    9f42:	e7bc      	b.n	9ebe <__ssvfscanf_r+0xa6e>
    9f44:	003b      	movs	r3, r7
    9f46:	4647      	mov	r7, r8
    9f48:	4698      	mov	r8, r3
    9f4a:	2d00      	cmp	r5, #0
    9f4c:	d101      	bne.n	9f52 <__ssvfscanf_r+0xb02>
    9f4e:	f7ff fb19 	bl	9584 <__ssvfscanf_r+0x134>
    9f52:	197f      	adds	r7, r7, r5
    9f54:	e52e      	b.n	99b4 <__ssvfscanf_r+0x564>
    9f56:	9b07      	ldr	r3, [sp, #28]
    9f58:	2201      	movs	r2, #1
    9f5a:	6819      	ldr	r1, [r3, #0]
    9f5c:	1d1d      	adds	r5, r3, #4
    9f5e:	9600      	str	r6, [sp, #0]
    9f60:	0023      	movs	r3, r4
    9f62:	4640      	mov	r0, r8
    9f64:	f003 fed2 	bl	dd0c <_sfread_r>
    9f68:	2800      	cmp	r0, #0
    9f6a:	d101      	bne.n	9f70 <__ssvfscanf_r+0xb20>
    9f6c:	f7ff fb0a 	bl	9584 <__ssvfscanf_r+0x134>
    9f70:	9b08      	ldr	r3, [sp, #32]
    9f72:	183f      	adds	r7, r7, r0
    9f74:	3301      	adds	r3, #1
    9f76:	9308      	str	r3, [sp, #32]
    9f78:	9b03      	ldr	r3, [sp, #12]
    9f7a:	9507      	str	r5, [sp, #28]
    9f7c:	469a      	mov	sl, r3
    9f7e:	4654      	mov	r4, sl
    9f80:	f7ff faad 	bl	94de <__ssvfscanf_r+0x8e>
    9f84:	9b07      	ldr	r3, [sp, #28]
    9f86:	46b9      	mov	r9, r7
    9f88:	1d1a      	adds	r2, r3, #4
    9f8a:	681b      	ldr	r3, [r3, #0]
    9f8c:	3c01      	subs	r4, #1
    9f8e:	469a      	mov	sl, r3
    9f90:	9306      	str	r3, [sp, #24]
    9f92:	001d      	movs	r5, r3
    9f94:	2308      	movs	r3, #8
    9f96:	469b      	mov	fp, r3
    9f98:	9204      	str	r2, [sp, #16]
    9f9a:	44a2      	add	sl, r4
    9f9c:	f001 fb2a 	bl	b5f4 <__locale_ctype_ptr>
    9fa0:	4659      	mov	r1, fp
    9fa2:	6833      	ldr	r3, [r6, #0]
    9fa4:	781a      	ldrb	r2, [r3, #0]
    9fa6:	1880      	adds	r0, r0, r2
    9fa8:	7842      	ldrb	r2, [r0, #1]
    9faa:	4211      	tst	r1, r2
    9fac:	d179      	bne.n	a0a2 <__ssvfscanf_r+0xc52>
    9fae:	6872      	ldr	r2, [r6, #4]
    9fb0:	1c6c      	adds	r4, r5, #1
    9fb2:	3a01      	subs	r2, #1
    9fb4:	6072      	str	r2, [r6, #4]
    9fb6:	1c5a      	adds	r2, r3, #1
    9fb8:	6032      	str	r2, [r6, #0]
    9fba:	781b      	ldrb	r3, [r3, #0]
    9fbc:	0027      	movs	r7, r4
    9fbe:	702b      	strb	r3, [r5, #0]
    9fc0:	4555      	cmp	r5, sl
    9fc2:	d00a      	beq.n	9fda <__ssvfscanf_r+0xb8a>
    9fc4:	6873      	ldr	r3, [r6, #4]
    9fc6:	2b00      	cmp	r3, #0
    9fc8:	dd01      	ble.n	9fce <__ssvfscanf_r+0xb7e>
    9fca:	0025      	movs	r5, r4
    9fcc:	e7e6      	b.n	9f9c <__ssvfscanf_r+0xb4c>
    9fce:	0031      	movs	r1, r6
    9fd0:	4640      	mov	r0, r8
    9fd2:	f003 fe7b 	bl	dccc <__ssrefill_r>
    9fd6:	2800      	cmp	r0, #0
    9fd8:	d0f7      	beq.n	9fca <__ssvfscanf_r+0xb7a>
    9fda:	464b      	mov	r3, r9
    9fdc:	46b9      	mov	r9, r7
    9fde:	001f      	movs	r7, r3
    9fe0:	2300      	movs	r3, #0
    9fe2:	464a      	mov	r2, r9
    9fe4:	7013      	strb	r3, [r2, #0]
    9fe6:	464b      	mov	r3, r9
    9fe8:	9a06      	ldr	r2, [sp, #24]
    9fea:	1a9b      	subs	r3, r3, r2
    9fec:	18ff      	adds	r7, r7, r3
    9fee:	9b08      	ldr	r3, [sp, #32]
    9ff0:	3301      	adds	r3, #1
    9ff2:	9308      	str	r3, [sp, #32]
    9ff4:	9b04      	ldr	r3, [sp, #16]
    9ff6:	9307      	str	r3, [sp, #28]
    9ff8:	9b03      	ldr	r3, [sp, #12]
    9ffa:	469a      	mov	sl, r3
    9ffc:	4654      	mov	r4, sl
    9ffe:	f7ff fa6e 	bl	94de <__ssvfscanf_r+0x8e>
    a002:	0031      	movs	r1, r6
    a004:	4640      	mov	r0, r8
    a006:	f003 fe61 	bl	dccc <__ssrefill_r>
    a00a:	2800      	cmp	r0, #0
    a00c:	d101      	bne.n	a012 <__ssvfscanf_r+0xbc2>
    a00e:	f7ff fa94 	bl	953a <__ssvfscanf_r+0xea>
    a012:	f7ff fab7 	bl	9584 <__ssvfscanf_r+0x134>
    a016:	9a07      	ldr	r2, [sp, #28]
    a018:	6813      	ldr	r3, [r2, #0]
    a01a:	6018      	str	r0, [r3, #0]
    a01c:	0013      	movs	r3, r2
    a01e:	3304      	adds	r3, #4
    a020:	9307      	str	r3, [sp, #28]
    a022:	9b08      	ldr	r3, [sp, #32]
    a024:	3301      	adds	r3, #1
    a026:	9308      	str	r3, [sp, #32]
    a028:	e5d6      	b.n	9bd8 <__ssvfscanf_r+0x788>
    a02a:	3d01      	subs	r5, #1
    a02c:	7829      	ldrb	r1, [r5, #0]
    a02e:	0032      	movs	r2, r6
    a030:	4640      	mov	r0, r8
    a032:	f003 fe09 	bl	dc48 <_sungetc_r>
    a036:	e5c6      	b.n	9bc6 <__ssvfscanf_r+0x776>
    a038:	4648      	mov	r0, r9
    a03a:	4b78      	ldr	r3, [pc, #480]	; (a21c <__ssvfscanf_r+0xdcc>)
    a03c:	4018      	ands	r0, r3
    a03e:	2301      	movs	r3, #1
    a040:	4681      	mov	r9, r0
    a042:	469b      	mov	fp, r3
    a044:	f7ff fbd5 	bl	97f2 <__ssvfscanf_r+0x3a2>
    a048:	4648      	mov	r0, r9
    a04a:	4b74      	ldr	r3, [pc, #464]	; (a21c <__ssvfscanf_r+0xdcc>)
    a04c:	4018      	ands	r0, r3
    a04e:	2301      	movs	r3, #1
    a050:	4681      	mov	r9, r0
    a052:	9304      	str	r3, [sp, #16]
    a054:	f7ff fbcd 	bl	97f2 <__ssvfscanf_r+0x3a2>
    a058:	464b      	mov	r3, r9
    a05a:	2102      	movs	r1, #2
    a05c:	4313      	orrs	r3, r2
    a05e:	4699      	mov	r9, r3
    a060:	468c      	mov	ip, r1
    a062:	4653      	mov	r3, sl
    a064:	44e2      	add	sl, ip
    a066:	789b      	ldrb	r3, [r3, #2]
    a068:	f7ff fa56 	bl	9518 <__ssvfscanf_r+0xc8>
    a06c:	4657      	mov	r7, sl
    a06e:	464b      	mov	r3, r9
    a070:	1ae5      	subs	r5, r4, r3
    a072:	d101      	bne.n	a078 <__ssvfscanf_r+0xc28>
    a074:	f7ff fa39 	bl	94ea <__ssvfscanf_r+0x9a>
    a078:	2300      	movs	r3, #0
    a07a:	7023      	strb	r3, [r4, #0]
    a07c:	9b08      	ldr	r3, [sp, #32]
    a07e:	197f      	adds	r7, r7, r5
    a080:	3301      	adds	r3, #1
    a082:	9308      	str	r3, [sp, #32]
    a084:	465b      	mov	r3, fp
    a086:	9307      	str	r3, [sp, #28]
    a088:	e494      	b.n	99b4 <__ssvfscanf_r+0x564>
    a08a:	4657      	mov	r7, sl
    a08c:	0014      	movs	r4, r2
    a08e:	e7ee      	b.n	a06e <__ssvfscanf_r+0xc1e>
    a090:	9b06      	ldr	r3, [sp, #24]
    a092:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a094:	1a9a      	subs	r2, r3, r2
    a096:	d100      	bne.n	a09a <__ssvfscanf_r+0xc4a>
    a098:	e474      	b.n	9984 <__ssvfscanf_r+0x534>
    a09a:	465b      	mov	r3, fp
    a09c:	4252      	negs	r2, r2
    a09e:	930e      	str	r3, [sp, #56]	; 0x38
    a0a0:	e63a      	b.n	9d18 <__ssvfscanf_r+0x8c8>
    a0a2:	464f      	mov	r7, r9
    a0a4:	46a9      	mov	r9, r5
    a0a6:	e79b      	b.n	9fe0 <__ssvfscanf_r+0xb90>
    a0a8:	9a07      	ldr	r2, [sp, #28]
    a0aa:	0013      	movs	r3, r2
    a0ac:	6812      	ldr	r2, [r2, #0]
    a0ae:	3304      	adds	r3, #4
    a0b0:	4693      	mov	fp, r2
    a0b2:	9307      	str	r3, [sp, #28]
    a0b4:	2c00      	cmp	r4, #0
    a0b6:	d000      	beq.n	a0ba <__ssvfscanf_r+0xc6a>
    a0b8:	e6d6      	b.n	9e68 <__ssvfscanf_r+0xa18>
    a0ba:	e478      	b.n	99ae <__ssvfscanf_r+0x55e>
    a0bc:	9b07      	ldr	r3, [sp, #28]
    a0be:	681a      	ldr	r2, [r3, #0]
    a0c0:	3304      	adds	r3, #4
    a0c2:	4691      	mov	r9, r2
    a0c4:	9307      	str	r3, [sp, #28]
    a0c6:	e679      	b.n	9dbc <__ssvfscanf_r+0x96c>
    a0c8:	464f      	mov	r7, r9
    a0ca:	9b04      	ldr	r3, [sp, #16]
    a0cc:	2b00      	cmp	r3, #0
    a0ce:	d100      	bne.n	a0d2 <__ssvfscanf_r+0xc82>
    a0d0:	e46d      	b.n	99ae <__ssvfscanf_r+0x55e>
    a0d2:	e46f      	b.n	99b4 <__ssvfscanf_r+0x564>
    a0d4:	9b07      	ldr	r3, [sp, #28]
    a0d6:	4654      	mov	r4, sl
    a0d8:	681a      	ldr	r2, [r3, #0]
    a0da:	3304      	adds	r3, #4
    a0dc:	9203      	str	r2, [sp, #12]
    a0de:	8017      	strh	r7, [r2, #0]
    a0e0:	9307      	str	r3, [sp, #28]
    a0e2:	f7ff f9fc 	bl	94de <__ssvfscanf_r+0x8e>
    a0e6:	9b05      	ldr	r3, [sp, #20]
    a0e8:	2200      	movs	r2, #0
    a0ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    a0ec:	4640      	mov	r0, r8
    a0ee:	f003 fd09 	bl	db04 <_strtoull_r>
    a0f2:	e64b      	b.n	9d8c <__ssvfscanf_r+0x93c>
    a0f4:	9b07      	ldr	r3, [sp, #28]
    a0f6:	681a      	ldr	r2, [r3, #0]
    a0f8:	3304      	adds	r3, #4
    a0fa:	9204      	str	r2, [sp, #16]
    a0fc:	8010      	strh	r0, [r2, #0]
    a0fe:	9307      	str	r3, [sp, #28]
    a100:	e78f      	b.n	a022 <__ssvfscanf_r+0xbd2>
    a102:	f001 fa63 	bl	b5cc <__locale_mb_cur_max>
    a106:	4285      	cmp	r5, r0
    a108:	d101      	bne.n	a10e <__ssvfscanf_r+0xcbe>
    a10a:	f7ff fa3b 	bl	9584 <__ssvfscanf_r+0x134>
    a10e:	208c      	movs	r0, #140	; 0x8c
    a110:	1c6b      	adds	r3, r5, #1
    a112:	469a      	mov	sl, r3
    a114:	6833      	ldr	r3, [r6, #0]
    a116:	0040      	lsls	r0, r0, #1
    a118:	781a      	ldrb	r2, [r3, #0]
    a11a:	a90e      	add	r1, sp, #56	; 0x38
    a11c:	1809      	adds	r1, r1, r0
    a11e:	554a      	strb	r2, [r1, r5]
    a120:	3301      	adds	r3, #1
    a122:	6872      	ldr	r2, [r6, #4]
    a124:	6033      	str	r3, [r6, #0]
    a126:	9b06      	ldr	r3, [sp, #24]
    a128:	3a01      	subs	r2, #1
    a12a:	6072      	str	r2, [r6, #4]
    a12c:	4649      	mov	r1, r9
    a12e:	9300      	str	r3, [sp, #0]
    a130:	aa54      	add	r2, sp, #336	; 0x150
    a132:	4653      	mov	r3, sl
    a134:	4640      	mov	r0, r8
    a136:	f001 fd33 	bl	bba0 <_mbrtowc_r>
    a13a:	1c43      	adds	r3, r0, #1
    a13c:	d101      	bne.n	a142 <__ssvfscanf_r+0xcf2>
    a13e:	f7ff fa21 	bl	9584 <__ssvfscanf_r+0x134>
    a142:	2800      	cmp	r0, #0
    a144:	d001      	beq.n	a14a <__ssvfscanf_r+0xcfa>
    a146:	f7ff fa07 	bl	9558 <__ssvfscanf_r+0x108>
    a14a:	464b      	mov	r3, r9
    a14c:	6018      	str	r0, [r3, #0]
    a14e:	f001 fa31 	bl	b5b4 <iswspace>
    a152:	1e05      	subs	r5, r0, #0
    a154:	d012      	beq.n	a17c <__ssvfscanf_r+0xd2c>
    a156:	4655      	mov	r5, sl
    a158:	2d00      	cmp	r5, #0
    a15a:	d100      	bne.n	a15e <__ssvfscanf_r+0xd0e>
    a15c:	e63c      	b.n	9dd8 <__ssvfscanf_r+0x988>
    a15e:	4644      	mov	r4, r8
    a160:	228c      	movs	r2, #140	; 0x8c
    a162:	ab0e      	add	r3, sp, #56	; 0x38
    a164:	0052      	lsls	r2, r2, #1
    a166:	3d01      	subs	r5, #1
    a168:	189b      	adds	r3, r3, r2
    a16a:	5d59      	ldrb	r1, [r3, r5]
    a16c:	0032      	movs	r2, r6
    a16e:	0020      	movs	r0, r4
    a170:	f003 fd6a 	bl	dc48 <_sungetc_r>
    a174:	2d00      	cmp	r5, #0
    a176:	d1f3      	bne.n	a160 <__ssvfscanf_r+0xd10>
    a178:	46a0      	mov	r8, r4
    a17a:	e62d      	b.n	9dd8 <__ssvfscanf_r+0x988>
    a17c:	465b      	mov	r3, fp
    a17e:	4457      	add	r7, sl
    a180:	3c01      	subs	r4, #1
    a182:	2b00      	cmp	r3, #0
    a184:	d001      	beq.n	a18a <__ssvfscanf_r+0xd3a>
    a186:	f7ff f9ec 	bl	9562 <__ssvfscanf_r+0x112>
    a18a:	3304      	adds	r3, #4
    a18c:	469c      	mov	ip, r3
    a18e:	465d      	mov	r5, fp
    a190:	44e1      	add	r9, ip
    a192:	f7ff f9e6 	bl	9562 <__ssvfscanf_r+0x112>
    a196:	464b      	mov	r3, r9
    a198:	6818      	ldr	r0, [r3, #0]
    a19a:	e7d8      	b.n	a14e <__ssvfscanf_r+0xcfe>
    a19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a19e:	459b      	cmp	fp, r3
    a1a0:	d801      	bhi.n	a1a6 <__ssvfscanf_r+0xd56>
    a1a2:	f7ff f9a2 	bl	94ea <__ssvfscanf_r+0x9a>
    a1a6:	465c      	mov	r4, fp
    a1a8:	4645      	mov	r5, r8
    a1aa:	3c01      	subs	r4, #1
    a1ac:	7821      	ldrb	r1, [r4, #0]
    a1ae:	0032      	movs	r2, r6
    a1b0:	0028      	movs	r0, r5
    a1b2:	f003 fd49 	bl	dc48 <_sungetc_r>
    a1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a1b8:	429c      	cmp	r4, r3
    a1ba:	d1f6      	bne.n	a1aa <__ssvfscanf_r+0xd5a>
    a1bc:	f7ff f995 	bl	94ea <__ssvfscanf_r+0x9a>
    a1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a1c2:	465c      	mov	r4, fp
    a1c4:	4645      	mov	r5, r8
    a1c6:	459b      	cmp	fp, r3
    a1c8:	d801      	bhi.n	a1ce <__ssvfscanf_r+0xd7e>
    a1ca:	f7ff f98e 	bl	94ea <__ssvfscanf_r+0x9a>
    a1ce:	3c01      	subs	r4, #1
    a1d0:	7821      	ldrb	r1, [r4, #0]
    a1d2:	0032      	movs	r2, r6
    a1d4:	0028      	movs	r0, r5
    a1d6:	f003 fd37 	bl	dc48 <_sungetc_r>
    a1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a1dc:	429c      	cmp	r4, r3
    a1de:	d1f6      	bne.n	a1ce <__ssvfscanf_r+0xd7e>
    a1e0:	f7ff f983 	bl	94ea <__ssvfscanf_r+0x9a>
    a1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a1e6:	459b      	cmp	fp, r3
    a1e8:	d801      	bhi.n	a1ee <__ssvfscanf_r+0xd9e>
    a1ea:	f7ff f97e 	bl	94ea <__ssvfscanf_r+0x9a>
    a1ee:	465c      	mov	r4, fp
    a1f0:	4645      	mov	r5, r8
    a1f2:	3c01      	subs	r4, #1
    a1f4:	7821      	ldrb	r1, [r4, #0]
    a1f6:	0032      	movs	r2, r6
    a1f8:	0028      	movs	r0, r5
    a1fa:	f003 fd25 	bl	dc48 <_sungetc_r>
    a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a200:	429c      	cmp	r4, r3
    a202:	d1f6      	bne.n	a1f2 <__ssvfscanf_r+0xda2>
    a204:	f7ff f971 	bl	94ea <__ssvfscanf_r+0x9a>
    a208:	2000      	movs	r0, #0
    a20a:	f002 fa57 	bl	c6bc <nanf>
    a20e:	464b      	mov	r3, r9
    a210:	6018      	str	r0, [r3, #0]
    a212:	4653      	mov	r3, sl
    a214:	9307      	str	r3, [sp, #28]
    a216:	f7ff fbca 	bl	99ae <__ssvfscanf_r+0x55e>
    a21a:	46c0      	nop			; (mov r8, r8)
    a21c:	fffff87f 	.word	0xfffff87f

0000a220 <register_fini>:
    a220:	4b03      	ldr	r3, [pc, #12]	; (a230 <register_fini+0x10>)
    a222:	b510      	push	{r4, lr}
    a224:	2b00      	cmp	r3, #0
    a226:	d002      	beq.n	a22e <register_fini+0xe>
    a228:	4802      	ldr	r0, [pc, #8]	; (a234 <register_fini+0x14>)
    a22a:	f000 f805 	bl	a238 <atexit>
    a22e:	bd10      	pop	{r4, pc}
    a230:	00000000 	.word	0x00000000
    a234:	0000b325 	.word	0x0000b325

0000a238 <atexit>:
    a238:	b510      	push	{r4, lr}
    a23a:	0001      	movs	r1, r0
    a23c:	2300      	movs	r3, #0
    a23e:	2200      	movs	r2, #0
    a240:	2000      	movs	r0, #0
    a242:	f003 fdfb 	bl	de3c <__register_exitproc>
    a246:	bd10      	pop	{r4, pc}

0000a248 <quorem>:
    a248:	b5f0      	push	{r4, r5, r6, r7, lr}
    a24a:	4645      	mov	r5, r8
    a24c:	4680      	mov	r8, r0
    a24e:	46de      	mov	lr, fp
    a250:	4657      	mov	r7, sl
    a252:	464e      	mov	r6, r9
    a254:	4642      	mov	r2, r8
    a256:	b5e0      	push	{r5, r6, r7, lr}
    a258:	690c      	ldr	r4, [r1, #16]
    a25a:	6912      	ldr	r2, [r2, #16]
    a25c:	b085      	sub	sp, #20
    a25e:	000b      	movs	r3, r1
    a260:	9102      	str	r1, [sp, #8]
    a262:	2000      	movs	r0, #0
    a264:	4294      	cmp	r4, r2
    a266:	dd00      	ble.n	a26a <quorem+0x22>
    a268:	e090      	b.n	a38c <quorem+0x144>
    a26a:	2214      	movs	r2, #20
    a26c:	4694      	mov	ip, r2
    a26e:	4463      	add	r3, ip
    a270:	4699      	mov	r9, r3
    a272:	464a      	mov	r2, r9
    a274:	3c01      	subs	r4, #1
    a276:	00a3      	lsls	r3, r4, #2
    a278:	18d6      	adds	r6, r2, r3
    a27a:	2214      	movs	r2, #20
    a27c:	4442      	add	r2, r8
    a27e:	4693      	mov	fp, r2
    a280:	449b      	add	fp, r3
    a282:	6833      	ldr	r3, [r6, #0]
    a284:	0015      	movs	r5, r2
    a286:	1c59      	adds	r1, r3, #1
    a288:	465b      	mov	r3, fp
    a28a:	6818      	ldr	r0, [r3, #0]
    a28c:	9201      	str	r2, [sp, #4]
    a28e:	f7fb f8b1 	bl	53f4 <__udivsi3>
    a292:	1e03      	subs	r3, r0, #0
    a294:	9000      	str	r0, [sp, #0]
    a296:	d042      	beq.n	a31e <quorem+0xd6>
    a298:	0029      	movs	r1, r5
    a29a:	2700      	movs	r7, #0
    a29c:	464d      	mov	r5, r9
    a29e:	2000      	movs	r0, #0
    a2a0:	46b1      	mov	r9, r6
    a2a2:	46a2      	mov	sl, r4
    a2a4:	003e      	movs	r6, r7
    a2a6:	0004      	movs	r4, r0
    a2a8:	469c      	mov	ip, r3
    a2aa:	002f      	movs	r7, r5
    a2ac:	0008      	movs	r0, r1
    a2ae:	9503      	str	r5, [sp, #12]
    a2b0:	4663      	mov	r3, ip
    a2b2:	cf04      	ldmia	r7!, {r2}
    a2b4:	0415      	lsls	r5, r2, #16
    a2b6:	0c2d      	lsrs	r5, r5, #16
    a2b8:	435d      	muls	r5, r3
    a2ba:	0c12      	lsrs	r2, r2, #16
    a2bc:	435a      	muls	r2, r3
    a2be:	19ad      	adds	r5, r5, r6
    a2c0:	0c2b      	lsrs	r3, r5, #16
    a2c2:	18d2      	adds	r2, r2, r3
    a2c4:	6803      	ldr	r3, [r0, #0]
    a2c6:	042d      	lsls	r5, r5, #16
    a2c8:	0419      	lsls	r1, r3, #16
    a2ca:	0c09      	lsrs	r1, r1, #16
    a2cc:	1909      	adds	r1, r1, r4
    a2ce:	0c16      	lsrs	r6, r2, #16
    a2d0:	0c2d      	lsrs	r5, r5, #16
    a2d2:	0412      	lsls	r2, r2, #16
    a2d4:	1b49      	subs	r1, r1, r5
    a2d6:	0c12      	lsrs	r2, r2, #16
    a2d8:	0c1b      	lsrs	r3, r3, #16
    a2da:	1a9b      	subs	r3, r3, r2
    a2dc:	140a      	asrs	r2, r1, #16
    a2de:	189b      	adds	r3, r3, r2
    a2e0:	0409      	lsls	r1, r1, #16
    a2e2:	141c      	asrs	r4, r3, #16
    a2e4:	0c09      	lsrs	r1, r1, #16
    a2e6:	041b      	lsls	r3, r3, #16
    a2e8:	4319      	orrs	r1, r3
    a2ea:	c002      	stmia	r0!, {r1}
    a2ec:	45b9      	cmp	r9, r7
    a2ee:	d2df      	bcs.n	a2b0 <quorem+0x68>
    a2f0:	9b03      	ldr	r3, [sp, #12]
    a2f2:	464e      	mov	r6, r9
    a2f4:	4699      	mov	r9, r3
    a2f6:	465b      	mov	r3, fp
    a2f8:	681b      	ldr	r3, [r3, #0]
    a2fa:	4654      	mov	r4, sl
    a2fc:	2b00      	cmp	r3, #0
    a2fe:	d10e      	bne.n	a31e <quorem+0xd6>
    a300:	465b      	mov	r3, fp
    a302:	9a01      	ldr	r2, [sp, #4]
    a304:	3b04      	subs	r3, #4
    a306:	429a      	cmp	r2, r3
    a308:	d304      	bcc.n	a314 <quorem+0xcc>
    a30a:	e006      	b.n	a31a <quorem+0xd2>
    a30c:	3b04      	subs	r3, #4
    a30e:	3c01      	subs	r4, #1
    a310:	429a      	cmp	r2, r3
    a312:	d202      	bcs.n	a31a <quorem+0xd2>
    a314:	6819      	ldr	r1, [r3, #0]
    a316:	2900      	cmp	r1, #0
    a318:	d0f8      	beq.n	a30c <quorem+0xc4>
    a31a:	4643      	mov	r3, r8
    a31c:	611c      	str	r4, [r3, #16]
    a31e:	9902      	ldr	r1, [sp, #8]
    a320:	4640      	mov	r0, r8
    a322:	f001 ff53 	bl	c1cc <__mcmp>
    a326:	2800      	cmp	r0, #0
    a328:	db2f      	blt.n	a38a <quorem+0x142>
    a32a:	464f      	mov	r7, r9
    a32c:	2000      	movs	r0, #0
    a32e:	9b00      	ldr	r3, [sp, #0]
    a330:	9d01      	ldr	r5, [sp, #4]
    a332:	3301      	adds	r3, #1
    a334:	9300      	str	r3, [sp, #0]
    a336:	682b      	ldr	r3, [r5, #0]
    a338:	cf02      	ldmia	r7!, {r1}
    a33a:	041a      	lsls	r2, r3, #16
    a33c:	0c12      	lsrs	r2, r2, #16
    a33e:	1810      	adds	r0, r2, r0
    a340:	040a      	lsls	r2, r1, #16
    a342:	0c12      	lsrs	r2, r2, #16
    a344:	1a82      	subs	r2, r0, r2
    a346:	0c09      	lsrs	r1, r1, #16
    a348:	0c1b      	lsrs	r3, r3, #16
    a34a:	1a5b      	subs	r3, r3, r1
    a34c:	1411      	asrs	r1, r2, #16
    a34e:	185b      	adds	r3, r3, r1
    a350:	0412      	lsls	r2, r2, #16
    a352:	1418      	asrs	r0, r3, #16
    a354:	0c12      	lsrs	r2, r2, #16
    a356:	041b      	lsls	r3, r3, #16
    a358:	4313      	orrs	r3, r2
    a35a:	c508      	stmia	r5!, {r3}
    a35c:	42be      	cmp	r6, r7
    a35e:	d2ea      	bcs.n	a336 <quorem+0xee>
    a360:	9901      	ldr	r1, [sp, #4]
    a362:	00a3      	lsls	r3, r4, #2
    a364:	468c      	mov	ip, r1
    a366:	4463      	add	r3, ip
    a368:	681a      	ldr	r2, [r3, #0]
    a36a:	2a00      	cmp	r2, #0
    a36c:	d10d      	bne.n	a38a <quorem+0x142>
    a36e:	3b04      	subs	r3, #4
    a370:	000a      	movs	r2, r1
    a372:	4299      	cmp	r1, r3
    a374:	d304      	bcc.n	a380 <quorem+0x138>
    a376:	e006      	b.n	a386 <quorem+0x13e>
    a378:	3b04      	subs	r3, #4
    a37a:	3c01      	subs	r4, #1
    a37c:	429a      	cmp	r2, r3
    a37e:	d202      	bcs.n	a386 <quorem+0x13e>
    a380:	6819      	ldr	r1, [r3, #0]
    a382:	2900      	cmp	r1, #0
    a384:	d0f8      	beq.n	a378 <quorem+0x130>
    a386:	4643      	mov	r3, r8
    a388:	611c      	str	r4, [r3, #16]
    a38a:	9800      	ldr	r0, [sp, #0]
    a38c:	b005      	add	sp, #20
    a38e:	bc3c      	pop	{r2, r3, r4, r5}
    a390:	4690      	mov	r8, r2
    a392:	4699      	mov	r9, r3
    a394:	46a2      	mov	sl, r4
    a396:	46ab      	mov	fp, r5
    a398:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a39a:	46c0      	nop			; (mov r8, r8)

0000a39c <_dtoa_r>:
    a39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a39e:	4657      	mov	r7, sl
    a3a0:	464e      	mov	r6, r9
    a3a2:	4645      	mov	r5, r8
    a3a4:	46de      	mov	lr, fp
    a3a6:	b5e0      	push	{r5, r6, r7, lr}
    a3a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
    a3aa:	b099      	sub	sp, #100	; 0x64
    a3ac:	4682      	mov	sl, r0
    a3ae:	001d      	movs	r5, r3
    a3b0:	0016      	movs	r6, r2
    a3b2:	001f      	movs	r7, r3
    a3b4:	2900      	cmp	r1, #0
    a3b6:	d009      	beq.n	a3cc <_dtoa_r+0x30>
    a3b8:	2301      	movs	r3, #1
    a3ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
    a3bc:	4093      	lsls	r3, r2
    a3be:	604a      	str	r2, [r1, #4]
    a3c0:	608b      	str	r3, [r1, #8]
    a3c2:	f001 fcad 	bl	bd20 <_Bfree>
    a3c6:	2300      	movs	r3, #0
    a3c8:	4652      	mov	r2, sl
    a3ca:	6413      	str	r3, [r2, #64]	; 0x40
    a3cc:	46b8      	mov	r8, r7
    a3ce:	2f00      	cmp	r7, #0
    a3d0:	db37      	blt.n	a442 <_dtoa_r+0xa6>
    a3d2:	2300      	movs	r3, #0
    a3d4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a3d6:	6013      	str	r3, [r2, #0]
    a3d8:	4642      	mov	r2, r8
    a3da:	4bd6      	ldr	r3, [pc, #856]	; (a734 <_dtoa_r+0x398>)
    a3dc:	401a      	ands	r2, r3
    a3de:	429a      	cmp	r2, r3
    a3e0:	d018      	beq.n	a414 <_dtoa_r+0x78>
    a3e2:	2200      	movs	r2, #0
    a3e4:	2300      	movs	r3, #0
    a3e6:	0030      	movs	r0, r6
    a3e8:	0039      	movs	r1, r7
    a3ea:	f7fc fe7f 	bl	70ec <__aeabi_dcmpeq>
    a3ee:	2800      	cmp	r0, #0
    a3f0:	d02f      	beq.n	a452 <_dtoa_r+0xb6>
    a3f2:	2301      	movs	r3, #1
    a3f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a3f6:	6013      	str	r3, [r2, #0]
    a3f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a3fa:	2b00      	cmp	r3, #0
    a3fc:	d100      	bne.n	a400 <_dtoa_r+0x64>
    a3fe:	e22a      	b.n	a856 <_dtoa_r+0x4ba>
    a400:	48cd      	ldr	r0, [pc, #820]	; (a738 <_dtoa_r+0x39c>)
    a402:	6018      	str	r0, [r3, #0]
    a404:	3801      	subs	r0, #1
    a406:	b019      	add	sp, #100	; 0x64
    a408:	bc3c      	pop	{r2, r3, r4, r5}
    a40a:	4690      	mov	r8, r2
    a40c:	4699      	mov	r9, r3
    a40e:	46a2      	mov	sl, r4
    a410:	46ab      	mov	fp, r5
    a412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a414:	4bc9      	ldr	r3, [pc, #804]	; (a73c <_dtoa_r+0x3a0>)
    a416:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a418:	6013      	str	r3, [r2, #0]
    a41a:	2e00      	cmp	r6, #0
    a41c:	d10b      	bne.n	a436 <_dtoa_r+0x9a>
    a41e:	4643      	mov	r3, r8
    a420:	0318      	lsls	r0, r3, #12
    a422:	d108      	bne.n	a436 <_dtoa_r+0x9a>
    a424:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a426:	48c6      	ldr	r0, [pc, #792]	; (a740 <_dtoa_r+0x3a4>)
    a428:	2b00      	cmp	r3, #0
    a42a:	d0ec      	beq.n	a406 <_dtoa_r+0x6a>
    a42c:	0003      	movs	r3, r0
    a42e:	3308      	adds	r3, #8
    a430:	9a26      	ldr	r2, [sp, #152]	; 0x98
    a432:	6013      	str	r3, [r2, #0]
    a434:	e7e7      	b.n	a406 <_dtoa_r+0x6a>
    a436:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a438:	48c2      	ldr	r0, [pc, #776]	; (a744 <_dtoa_r+0x3a8>)
    a43a:	2b00      	cmp	r3, #0
    a43c:	d0e3      	beq.n	a406 <_dtoa_r+0x6a>
    a43e:	1cc3      	adds	r3, r0, #3
    a440:	e7f6      	b.n	a430 <_dtoa_r+0x94>
    a442:	2301      	movs	r3, #1
    a444:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a446:	0068      	lsls	r0, r5, #1
    a448:	6013      	str	r3, [r2, #0]
    a44a:	0843      	lsrs	r3, r0, #1
    a44c:	4698      	mov	r8, r3
    a44e:	001f      	movs	r7, r3
    a450:	e7c2      	b.n	a3d8 <_dtoa_r+0x3c>
    a452:	ab16      	add	r3, sp, #88	; 0x58
    a454:	9301      	str	r3, [sp, #4]
    a456:	ab17      	add	r3, sp, #92	; 0x5c
    a458:	9300      	str	r3, [sp, #0]
    a45a:	0032      	movs	r2, r6
    a45c:	003b      	movs	r3, r7
    a45e:	4650      	mov	r0, sl
    a460:	f001 fffc 	bl	c45c <__d2b>
    a464:	4643      	mov	r3, r8
    a466:	4683      	mov	fp, r0
    a468:	0d1a      	lsrs	r2, r3, #20
    a46a:	d100      	bne.n	a46e <_dtoa_r+0xd2>
    a46c:	e1d6      	b.n	a81c <_dtoa_r+0x480>
    a46e:	033b      	lsls	r3, r7, #12
    a470:	4cb5      	ldr	r4, [pc, #724]	; (a748 <_dtoa_r+0x3ac>)
    a472:	0b1b      	lsrs	r3, r3, #12
    a474:	431c      	orrs	r4, r3
    a476:	4bb5      	ldr	r3, [pc, #724]	; (a74c <_dtoa_r+0x3b0>)
    a478:	0030      	movs	r0, r6
    a47a:	4698      	mov	r8, r3
    a47c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a47e:	0021      	movs	r1, r4
    a480:	4699      	mov	r9, r3
    a482:	2300      	movs	r3, #0
    a484:	4490      	add	r8, r2
    a486:	930f      	str	r3, [sp, #60]	; 0x3c
    a488:	2200      	movs	r2, #0
    a48a:	4bb1      	ldr	r3, [pc, #708]	; (a750 <_dtoa_r+0x3b4>)
    a48c:	f7fc f97e 	bl	678c <__aeabi_dsub>
    a490:	4ab0      	ldr	r2, [pc, #704]	; (a754 <_dtoa_r+0x3b8>)
    a492:	4bb1      	ldr	r3, [pc, #708]	; (a758 <_dtoa_r+0x3bc>)
    a494:	f7fb fefa 	bl	628c <__aeabi_dmul>
    a498:	4ab0      	ldr	r2, [pc, #704]	; (a75c <_dtoa_r+0x3c0>)
    a49a:	4bb1      	ldr	r3, [pc, #708]	; (a760 <_dtoa_r+0x3c4>)
    a49c:	f004 fba0 	bl	ebe0 <__aeabi_dadd>
    a4a0:	0004      	movs	r4, r0
    a4a2:	4640      	mov	r0, r8
    a4a4:	000d      	movs	r5, r1
    a4a6:	f7fc fcbb 	bl	6e20 <__aeabi_i2d>
    a4aa:	4aae      	ldr	r2, [pc, #696]	; (a764 <_dtoa_r+0x3c8>)
    a4ac:	4bae      	ldr	r3, [pc, #696]	; (a768 <_dtoa_r+0x3cc>)
    a4ae:	f7fb feed 	bl	628c <__aeabi_dmul>
    a4b2:	0002      	movs	r2, r0
    a4b4:	000b      	movs	r3, r1
    a4b6:	0020      	movs	r0, r4
    a4b8:	0029      	movs	r1, r5
    a4ba:	f004 fb91 	bl	ebe0 <__aeabi_dadd>
    a4be:	0004      	movs	r4, r0
    a4c0:	000d      	movs	r5, r1
    a4c2:	f7fc fc79 	bl	6db8 <__aeabi_d2iz>
    a4c6:	2200      	movs	r2, #0
    a4c8:	9003      	str	r0, [sp, #12]
    a4ca:	2300      	movs	r3, #0
    a4cc:	0020      	movs	r0, r4
    a4ce:	0029      	movs	r1, r5
    a4d0:	f7fc fe12 	bl	70f8 <__aeabi_dcmplt>
    a4d4:	2800      	cmp	r0, #0
    a4d6:	d000      	beq.n	a4da <_dtoa_r+0x13e>
    a4d8:	e2b1      	b.n	aa3e <_dtoa_r+0x6a2>
    a4da:	2301      	movs	r3, #1
    a4dc:	9c03      	ldr	r4, [sp, #12]
    a4de:	930c      	str	r3, [sp, #48]	; 0x30
    a4e0:	2c16      	cmp	r4, #22
    a4e2:	d810      	bhi.n	a506 <_dtoa_r+0x16a>
    a4e4:	49a1      	ldr	r1, [pc, #644]	; (a76c <_dtoa_r+0x3d0>)
    a4e6:	00e3      	lsls	r3, r4, #3
    a4e8:	18c9      	adds	r1, r1, r3
    a4ea:	0032      	movs	r2, r6
    a4ec:	6808      	ldr	r0, [r1, #0]
    a4ee:	6849      	ldr	r1, [r1, #4]
    a4f0:	003b      	movs	r3, r7
    a4f2:	f7fc fe15 	bl	7120 <__aeabi_dcmpgt>
    a4f6:	2800      	cmp	r0, #0
    a4f8:	d100      	bne.n	a4fc <_dtoa_r+0x160>
    a4fa:	e31d      	b.n	ab38 <_dtoa_r+0x79c>
    a4fc:	0023      	movs	r3, r4
    a4fe:	3b01      	subs	r3, #1
    a500:	9303      	str	r3, [sp, #12]
    a502:	2300      	movs	r3, #0
    a504:	930c      	str	r3, [sp, #48]	; 0x30
    a506:	464b      	mov	r3, r9
    a508:	4642      	mov	r2, r8
    a50a:	1a9a      	subs	r2, r3, r2
    a50c:	2300      	movs	r3, #0
    a50e:	9306      	str	r3, [sp, #24]
    a510:	0013      	movs	r3, r2
    a512:	3b01      	subs	r3, #1
    a514:	9304      	str	r3, [sp, #16]
    a516:	d500      	bpl.n	a51a <_dtoa_r+0x17e>
    a518:	e2a1      	b.n	aa5e <_dtoa_r+0x6c2>
    a51a:	9b03      	ldr	r3, [sp, #12]
    a51c:	2b00      	cmp	r3, #0
    a51e:	da00      	bge.n	a522 <_dtoa_r+0x186>
    a520:	e284      	b.n	aa2c <_dtoa_r+0x690>
    a522:	469c      	mov	ip, r3
    a524:	930d      	str	r3, [sp, #52]	; 0x34
    a526:	2300      	movs	r3, #0
    a528:	9a04      	ldr	r2, [sp, #16]
    a52a:	4699      	mov	r9, r3
    a52c:	0011      	movs	r1, r2
    a52e:	4461      	add	r1, ip
    a530:	9104      	str	r1, [sp, #16]
    a532:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a534:	2b09      	cmp	r3, #9
    a536:	d900      	bls.n	a53a <_dtoa_r+0x19e>
    a538:	e18f      	b.n	a85a <_dtoa_r+0x4be>
    a53a:	2401      	movs	r4, #1
    a53c:	2b05      	cmp	r3, #5
    a53e:	dd02      	ble.n	a546 <_dtoa_r+0x1aa>
    a540:	2400      	movs	r4, #0
    a542:	3b04      	subs	r3, #4
    a544:	9322      	str	r3, [sp, #136]	; 0x88
    a546:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a548:	2b03      	cmp	r3, #3
    a54a:	d101      	bne.n	a550 <_dtoa_r+0x1b4>
    a54c:	f000 fcce 	bl	aeec <_dtoa_r+0xb50>
    a550:	dc01      	bgt.n	a556 <_dtoa_r+0x1ba>
    a552:	f000 fc92 	bl	ae7a <_dtoa_r+0xade>
    a556:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a558:	2b04      	cmp	r3, #4
    a55a:	d101      	bne.n	a560 <_dtoa_r+0x1c4>
    a55c:	f000 fc40 	bl	ade0 <_dtoa_r+0xa44>
    a560:	2301      	movs	r3, #1
    a562:	930b      	str	r3, [sp, #44]	; 0x2c
    a564:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a566:	2b05      	cmp	r3, #5
    a568:	d001      	beq.n	a56e <_dtoa_r+0x1d2>
    a56a:	f000 fc8b 	bl	ae84 <_dtoa_r+0xae8>
    a56e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    a570:	9b03      	ldr	r3, [sp, #12]
    a572:	4694      	mov	ip, r2
    a574:	4463      	add	r3, ip
    a576:	930e      	str	r3, [sp, #56]	; 0x38
    a578:	3301      	adds	r3, #1
    a57a:	9307      	str	r3, [sp, #28]
    a57c:	1e1d      	subs	r5, r3, #0
    a57e:	dc01      	bgt.n	a584 <_dtoa_r+0x1e8>
    a580:	f000 fd49 	bl	b016 <_dtoa_r+0xc7a>
    a584:	9b07      	ldr	r3, [sp, #28]
    a586:	4698      	mov	r8, r3
    a588:	2300      	movs	r3, #0
    a58a:	4652      	mov	r2, sl
    a58c:	2100      	movs	r1, #0
    a58e:	6453      	str	r3, [r2, #68]	; 0x44
    a590:	2d17      	cmp	r5, #23
    a592:	d90a      	bls.n	a5aa <_dtoa_r+0x20e>
    a594:	2201      	movs	r2, #1
    a596:	3304      	adds	r3, #4
    a598:	005b      	lsls	r3, r3, #1
    a59a:	0018      	movs	r0, r3
    a59c:	3014      	adds	r0, #20
    a59e:	0011      	movs	r1, r2
    a5a0:	3201      	adds	r2, #1
    a5a2:	4285      	cmp	r5, r0
    a5a4:	d2f8      	bcs.n	a598 <_dtoa_r+0x1fc>
    a5a6:	4653      	mov	r3, sl
    a5a8:	6459      	str	r1, [r3, #68]	; 0x44
    a5aa:	4650      	mov	r0, sl
    a5ac:	f001 fb90 	bl	bcd0 <_Balloc>
    a5b0:	4653      	mov	r3, sl
    a5b2:	6418      	str	r0, [r3, #64]	; 0x40
    a5b4:	4643      	mov	r3, r8
    a5b6:	900a      	str	r0, [sp, #40]	; 0x28
    a5b8:	2b0e      	cmp	r3, #14
    a5ba:	d900      	bls.n	a5be <_dtoa_r+0x222>
    a5bc:	e161      	b.n	a882 <_dtoa_r+0x4e6>
    a5be:	2c00      	cmp	r4, #0
    a5c0:	d100      	bne.n	a5c4 <_dtoa_r+0x228>
    a5c2:	e15e      	b.n	a882 <_dtoa_r+0x4e6>
    a5c4:	9610      	str	r6, [sp, #64]	; 0x40
    a5c6:	9711      	str	r7, [sp, #68]	; 0x44
    a5c8:	9e03      	ldr	r6, [sp, #12]
    a5ca:	2e00      	cmp	r6, #0
    a5cc:	dc01      	bgt.n	a5d2 <_dtoa_r+0x236>
    a5ce:	f000 fd25 	bl	b01c <_dtoa_r+0xc80>
    a5d2:	0032      	movs	r2, r6
    a5d4:	210f      	movs	r1, #15
    a5d6:	4b65      	ldr	r3, [pc, #404]	; (a76c <_dtoa_r+0x3d0>)
    a5d8:	400a      	ands	r2, r1
    a5da:	00d2      	lsls	r2, r2, #3
    a5dc:	189b      	adds	r3, r3, r2
    a5de:	1136      	asrs	r6, r6, #4
    a5e0:	681c      	ldr	r4, [r3, #0]
    a5e2:	685d      	ldr	r5, [r3, #4]
    a5e4:	06f3      	lsls	r3, r6, #27
    a5e6:	d401      	bmi.n	a5ec <_dtoa_r+0x250>
    a5e8:	f000 fcca 	bl	af80 <_dtoa_r+0xbe4>
    a5ec:	4b60      	ldr	r3, [pc, #384]	; (a770 <_dtoa_r+0x3d4>)
    a5ee:	400e      	ands	r6, r1
    a5f0:	6a1a      	ldr	r2, [r3, #32]
    a5f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a5f4:	9810      	ldr	r0, [sp, #64]	; 0x40
    a5f6:	9911      	ldr	r1, [sp, #68]	; 0x44
    a5f8:	f7fb fb14 	bl	5c24 <__aeabi_ddiv>
    a5fc:	2303      	movs	r3, #3
    a5fe:	4698      	mov	r8, r3
    a600:	9008      	str	r0, [sp, #32]
    a602:	9109      	str	r1, [sp, #36]	; 0x24
    a604:	2e00      	cmp	r6, #0
    a606:	d011      	beq.n	a62c <_dtoa_r+0x290>
    a608:	4f59      	ldr	r7, [pc, #356]	; (a770 <_dtoa_r+0x3d4>)
    a60a:	2301      	movs	r3, #1
    a60c:	4233      	tst	r3, r6
    a60e:	d009      	beq.n	a624 <_dtoa_r+0x288>
    a610:	469c      	mov	ip, r3
    a612:	683a      	ldr	r2, [r7, #0]
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	0020      	movs	r0, r4
    a618:	0029      	movs	r1, r5
    a61a:	44e0      	add	r8, ip
    a61c:	f7fb fe36 	bl	628c <__aeabi_dmul>
    a620:	0004      	movs	r4, r0
    a622:	000d      	movs	r5, r1
    a624:	1076      	asrs	r6, r6, #1
    a626:	3708      	adds	r7, #8
    a628:	2e00      	cmp	r6, #0
    a62a:	d1ee      	bne.n	a60a <_dtoa_r+0x26e>
    a62c:	0022      	movs	r2, r4
    a62e:	9808      	ldr	r0, [sp, #32]
    a630:	9909      	ldr	r1, [sp, #36]	; 0x24
    a632:	002b      	movs	r3, r5
    a634:	f7fb faf6 	bl	5c24 <__aeabi_ddiv>
    a638:	0006      	movs	r6, r0
    a63a:	000f      	movs	r7, r1
    a63c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a63e:	2b00      	cmp	r3, #0
    a640:	d009      	beq.n	a656 <_dtoa_r+0x2ba>
    a642:	2200      	movs	r2, #0
    a644:	4b40      	ldr	r3, [pc, #256]	; (a748 <_dtoa_r+0x3ac>)
    a646:	0030      	movs	r0, r6
    a648:	0039      	movs	r1, r7
    a64a:	f7fc fd55 	bl	70f8 <__aeabi_dcmplt>
    a64e:	2800      	cmp	r0, #0
    a650:	d001      	beq.n	a656 <_dtoa_r+0x2ba>
    a652:	f000 fdc2 	bl	b1da <_dtoa_r+0xe3e>
    a656:	4640      	mov	r0, r8
    a658:	f7fc fbe2 	bl	6e20 <__aeabi_i2d>
    a65c:	0032      	movs	r2, r6
    a65e:	003b      	movs	r3, r7
    a660:	f7fb fe14 	bl	628c <__aeabi_dmul>
    a664:	2200      	movs	r2, #0
    a666:	4b43      	ldr	r3, [pc, #268]	; (a774 <_dtoa_r+0x3d8>)
    a668:	f004 faba 	bl	ebe0 <__aeabi_dadd>
    a66c:	4a42      	ldr	r2, [pc, #264]	; (a778 <_dtoa_r+0x3dc>)
    a66e:	000b      	movs	r3, r1
    a670:	4694      	mov	ip, r2
    a672:	4463      	add	r3, ip
    a674:	9008      	str	r0, [sp, #32]
    a676:	9109      	str	r1, [sp, #36]	; 0x24
    a678:	9309      	str	r3, [sp, #36]	; 0x24
    a67a:	9b07      	ldr	r3, [sp, #28]
    a67c:	2b00      	cmp	r3, #0
    a67e:	d101      	bne.n	a684 <_dtoa_r+0x2e8>
    a680:	f000 fc50 	bl	af24 <_dtoa_r+0xb88>
    a684:	9b03      	ldr	r3, [sp, #12]
    a686:	9313      	str	r3, [sp, #76]	; 0x4c
    a688:	9b07      	ldr	r3, [sp, #28]
    a68a:	9312      	str	r3, [sp, #72]	; 0x48
    a68c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a68e:	2b00      	cmp	r3, #0
    a690:	d101      	bne.n	a696 <_dtoa_r+0x2fa>
    a692:	f000 fd1d 	bl	b0d0 <_dtoa_r+0xd34>
    a696:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a698:	2000      	movs	r0, #0
    a69a:	1e5a      	subs	r2, r3, #1
    a69c:	4b33      	ldr	r3, [pc, #204]	; (a76c <_dtoa_r+0x3d0>)
    a69e:	00d2      	lsls	r2, r2, #3
    a6a0:	189b      	adds	r3, r3, r2
    a6a2:	681a      	ldr	r2, [r3, #0]
    a6a4:	685b      	ldr	r3, [r3, #4]
    a6a6:	4935      	ldr	r1, [pc, #212]	; (a77c <_dtoa_r+0x3e0>)
    a6a8:	f7fb fabc 	bl	5c24 <__aeabi_ddiv>
    a6ac:	9a08      	ldr	r2, [sp, #32]
    a6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a6b0:	f7fc f86c 	bl	678c <__aeabi_dsub>
    a6b4:	9008      	str	r0, [sp, #32]
    a6b6:	9109      	str	r1, [sp, #36]	; 0x24
    a6b8:	0039      	movs	r1, r7
    a6ba:	0030      	movs	r0, r6
    a6bc:	f7fc fb7c 	bl	6db8 <__aeabi_d2iz>
    a6c0:	0004      	movs	r4, r0
    a6c2:	f7fc fbad 	bl	6e20 <__aeabi_i2d>
    a6c6:	0002      	movs	r2, r0
    a6c8:	000b      	movs	r3, r1
    a6ca:	0030      	movs	r0, r6
    a6cc:	0039      	movs	r1, r7
    a6ce:	f7fc f85d 	bl	678c <__aeabi_dsub>
    a6d2:	0005      	movs	r5, r0
    a6d4:	000e      	movs	r6, r1
    a6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a6d8:	3430      	adds	r4, #48	; 0x30
    a6da:	1c51      	adds	r1, r2, #1
    a6dc:	b2e7      	uxtb	r7, r4
    a6de:	9114      	str	r1, [sp, #80]	; 0x50
    a6e0:	7017      	strb	r7, [r2, #0]
    a6e2:	0033      	movs	r3, r6
    a6e4:	9808      	ldr	r0, [sp, #32]
    a6e6:	9909      	ldr	r1, [sp, #36]	; 0x24
    a6e8:	002a      	movs	r2, r5
    a6ea:	f7fc fd19 	bl	7120 <__aeabi_dcmpgt>
    a6ee:	2800      	cmp	r0, #0
    a6f0:	d001      	beq.n	a6f6 <_dtoa_r+0x35a>
    a6f2:	f000 fdfe 	bl	b2f2 <_dtoa_r+0xf56>
    a6f6:	002a      	movs	r2, r5
    a6f8:	0033      	movs	r3, r6
    a6fa:	2000      	movs	r0, #0
    a6fc:	4912      	ldr	r1, [pc, #72]	; (a748 <_dtoa_r+0x3ac>)
    a6fe:	f7fc f845 	bl	678c <__aeabi_dsub>
    a702:	0002      	movs	r2, r0
    a704:	000b      	movs	r3, r1
    a706:	9808      	ldr	r0, [sp, #32]
    a708:	9909      	ldr	r1, [sp, #36]	; 0x24
    a70a:	f7fc fd09 	bl	7120 <__aeabi_dcmpgt>
    a70e:	2800      	cmp	r0, #0
    a710:	d001      	beq.n	a716 <_dtoa_r+0x37a>
    a712:	f000 fde7 	bl	b2e4 <_dtoa_r+0xf48>
    a716:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a718:	2b01      	cmp	r3, #1
    a71a:	d101      	bne.n	a720 <_dtoa_r+0x384>
    a71c:	f000 fc78 	bl	b010 <_dtoa_r+0xc74>
    a720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a722:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a724:	4694      	mov	ip, r2
    a726:	4463      	add	r3, ip
    a728:	4698      	mov	r8, r3
    a72a:	464b      	mov	r3, r9
    a72c:	9312      	str	r3, [sp, #72]	; 0x48
    a72e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    a730:	4699      	mov	r9, r3
    a732:	e038      	b.n	a7a6 <_dtoa_r+0x40a>
    a734:	7ff00000 	.word	0x7ff00000
    a738:	00011bf1 	.word	0x00011bf1
    a73c:	0000270f 	.word	0x0000270f
    a740:	00012098 	.word	0x00012098
    a744:	000120a4 	.word	0x000120a4
    a748:	3ff00000 	.word	0x3ff00000
    a74c:	fffffc01 	.word	0xfffffc01
    a750:	3ff80000 	.word	0x3ff80000
    a754:	636f4361 	.word	0x636f4361
    a758:	3fd287a7 	.word	0x3fd287a7
    a75c:	8b60c8b3 	.word	0x8b60c8b3
    a760:	3fc68a28 	.word	0x3fc68a28
    a764:	509f79fb 	.word	0x509f79fb
    a768:	3fd34413 	.word	0x3fd34413
    a76c:	000120e0 	.word	0x000120e0
    a770:	000120b8 	.word	0x000120b8
    a774:	401c0000 	.word	0x401c0000
    a778:	fcc00000 	.word	0xfcc00000
    a77c:	3fe00000 	.word	0x3fe00000
    a780:	002a      	movs	r2, r5
    a782:	0033      	movs	r3, r6
    a784:	2000      	movs	r0, #0
    a786:	49b9      	ldr	r1, [pc, #740]	; (aa6c <_dtoa_r+0x6d0>)
    a788:	f7fc f800 	bl	678c <__aeabi_dsub>
    a78c:	9a08      	ldr	r2, [sp, #32]
    a78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a790:	f7fc fcb2 	bl	70f8 <__aeabi_dcmplt>
    a794:	2800      	cmp	r0, #0
    a796:	d001      	beq.n	a79c <_dtoa_r+0x400>
    a798:	f000 fd74 	bl	b284 <_dtoa_r+0xee8>
    a79c:	46a1      	mov	r9, r4
    a79e:	4544      	cmp	r4, r8
    a7a0:	d101      	bne.n	a7a6 <_dtoa_r+0x40a>
    a7a2:	f000 fc33 	bl	b00c <_dtoa_r+0xc70>
    a7a6:	9808      	ldr	r0, [sp, #32]
    a7a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    a7aa:	2200      	movs	r2, #0
    a7ac:	4bb0      	ldr	r3, [pc, #704]	; (aa70 <_dtoa_r+0x6d4>)
    a7ae:	f7fb fd6d 	bl	628c <__aeabi_dmul>
    a7b2:	2200      	movs	r2, #0
    a7b4:	4bae      	ldr	r3, [pc, #696]	; (aa70 <_dtoa_r+0x6d4>)
    a7b6:	9008      	str	r0, [sp, #32]
    a7b8:	9109      	str	r1, [sp, #36]	; 0x24
    a7ba:	0028      	movs	r0, r5
    a7bc:	0031      	movs	r1, r6
    a7be:	f7fb fd65 	bl	628c <__aeabi_dmul>
    a7c2:	000d      	movs	r5, r1
    a7c4:	0004      	movs	r4, r0
    a7c6:	f7fc faf7 	bl	6db8 <__aeabi_d2iz>
    a7ca:	0007      	movs	r7, r0
    a7cc:	f7fc fb28 	bl	6e20 <__aeabi_i2d>
    a7d0:	0002      	movs	r2, r0
    a7d2:	000b      	movs	r3, r1
    a7d4:	0020      	movs	r0, r4
    a7d6:	0029      	movs	r1, r5
    a7d8:	f7fb ffd8 	bl	678c <__aeabi_dsub>
    a7dc:	464b      	mov	r3, r9
    a7de:	3730      	adds	r7, #48	; 0x30
    a7e0:	b2ff      	uxtb	r7, r7
    a7e2:	1c5c      	adds	r4, r3, #1
    a7e4:	701f      	strb	r7, [r3, #0]
    a7e6:	9a08      	ldr	r2, [sp, #32]
    a7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a7ea:	0005      	movs	r5, r0
    a7ec:	000e      	movs	r6, r1
    a7ee:	f7fc fc83 	bl	70f8 <__aeabi_dcmplt>
    a7f2:	2800      	cmp	r0, #0
    a7f4:	d0c4      	beq.n	a780 <_dtoa_r+0x3e4>
    a7f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    a7f8:	9303      	str	r3, [sp, #12]
    a7fa:	4659      	mov	r1, fp
    a7fc:	4650      	mov	r0, sl
    a7fe:	f001 fa8f 	bl	bd20 <_Bfree>
    a802:	2300      	movs	r3, #0
    a804:	7023      	strb	r3, [r4, #0]
    a806:	9b03      	ldr	r3, [sp, #12]
    a808:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a80a:	3301      	adds	r3, #1
    a80c:	6013      	str	r3, [r2, #0]
    a80e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a810:	2b00      	cmp	r3, #0
    a812:	d100      	bne.n	a816 <_dtoa_r+0x47a>
    a814:	e3a8      	b.n	af68 <_dtoa_r+0xbcc>
    a816:	601c      	str	r4, [r3, #0]
    a818:	980a      	ldr	r0, [sp, #40]	; 0x28
    a81a:	e5f4      	b.n	a406 <_dtoa_r+0x6a>
    a81c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    a81e:	4699      	mov	r9, r3
    a820:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a822:	444b      	add	r3, r9
    a824:	001c      	movs	r4, r3
    a826:	4b93      	ldr	r3, [pc, #588]	; (aa74 <_dtoa_r+0x6d8>)
    a828:	18e3      	adds	r3, r4, r3
    a82a:	2b20      	cmp	r3, #32
    a82c:	dc00      	bgt.n	a830 <_dtoa_r+0x494>
    a82e:	e17e      	b.n	ab2e <_dtoa_r+0x792>
    a830:	0031      	movs	r1, r6
    a832:	4a91      	ldr	r2, [pc, #580]	; (aa78 <_dtoa_r+0x6dc>)
    a834:	4640      	mov	r0, r8
    a836:	18a2      	adds	r2, r4, r2
    a838:	40d1      	lsrs	r1, r2
    a83a:	000a      	movs	r2, r1
    a83c:	2140      	movs	r1, #64	; 0x40
    a83e:	1acb      	subs	r3, r1, r3
    a840:	4098      	lsls	r0, r3
    a842:	4310      	orrs	r0, r2
    a844:	f7fc fb2e 	bl	6ea4 <__aeabi_ui2d>
    a848:	1e63      	subs	r3, r4, #1
    a84a:	4698      	mov	r8, r3
    a84c:	2301      	movs	r3, #1
    a84e:	4d8b      	ldr	r5, [pc, #556]	; (aa7c <_dtoa_r+0x6e0>)
    a850:	930f      	str	r3, [sp, #60]	; 0x3c
    a852:	1949      	adds	r1, r1, r5
    a854:	e618      	b.n	a488 <_dtoa_r+0xec>
    a856:	488a      	ldr	r0, [pc, #552]	; (aa80 <_dtoa_r+0x6e4>)
    a858:	e5d5      	b.n	a406 <_dtoa_r+0x6a>
    a85a:	2300      	movs	r3, #0
    a85c:	4652      	mov	r2, sl
    a85e:	2100      	movs	r1, #0
    a860:	6453      	str	r3, [r2, #68]	; 0x44
    a862:	4650      	mov	r0, sl
    a864:	f001 fa34 	bl	bcd0 <_Balloc>
    a868:	4653      	mov	r3, sl
    a86a:	6418      	str	r0, [r3, #64]	; 0x40
    a86c:	2301      	movs	r3, #1
    a86e:	425b      	negs	r3, r3
    a870:	9307      	str	r3, [sp, #28]
    a872:	930e      	str	r3, [sp, #56]	; 0x38
    a874:	3302      	adds	r3, #2
    a876:	2200      	movs	r2, #0
    a878:	930b      	str	r3, [sp, #44]	; 0x2c
    a87a:	2300      	movs	r3, #0
    a87c:	900a      	str	r0, [sp, #40]	; 0x28
    a87e:	9223      	str	r2, [sp, #140]	; 0x8c
    a880:	9322      	str	r3, [sp, #136]	; 0x88
    a882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    a884:	2b00      	cmp	r3, #0
    a886:	da00      	bge.n	a88a <_dtoa_r+0x4ee>
    a888:	e0ab      	b.n	a9e2 <_dtoa_r+0x646>
    a88a:	9a03      	ldr	r2, [sp, #12]
    a88c:	2a0e      	cmp	r2, #14
    a88e:	dd00      	ble.n	a892 <_dtoa_r+0x4f6>
    a890:	e0a7      	b.n	a9e2 <_dtoa_r+0x646>
    a892:	4b7c      	ldr	r3, [pc, #496]	; (aa84 <_dtoa_r+0x6e8>)
    a894:	00d2      	lsls	r2, r2, #3
    a896:	189b      	adds	r3, r3, r2
    a898:	685c      	ldr	r4, [r3, #4]
    a89a:	681b      	ldr	r3, [r3, #0]
    a89c:	9304      	str	r3, [sp, #16]
    a89e:	9405      	str	r4, [sp, #20]
    a8a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	da00      	bge.n	a8a8 <_dtoa_r+0x50c>
    a8a6:	e2a7      	b.n	adf8 <_dtoa_r+0xa5c>
    a8a8:	9c04      	ldr	r4, [sp, #16]
    a8aa:	9d05      	ldr	r5, [sp, #20]
    a8ac:	0030      	movs	r0, r6
    a8ae:	0022      	movs	r2, r4
    a8b0:	002b      	movs	r3, r5
    a8b2:	0039      	movs	r1, r7
    a8b4:	f7fb f9b6 	bl	5c24 <__aeabi_ddiv>
    a8b8:	f7fc fa7e 	bl	6db8 <__aeabi_d2iz>
    a8bc:	4680      	mov	r8, r0
    a8be:	f7fc faaf 	bl	6e20 <__aeabi_i2d>
    a8c2:	0022      	movs	r2, r4
    a8c4:	002b      	movs	r3, r5
    a8c6:	f7fb fce1 	bl	628c <__aeabi_dmul>
    a8ca:	0002      	movs	r2, r0
    a8cc:	000b      	movs	r3, r1
    a8ce:	0030      	movs	r0, r6
    a8d0:	0039      	movs	r1, r7
    a8d2:	f7fb ff5b 	bl	678c <__aeabi_dsub>
    a8d6:	4643      	mov	r3, r8
    a8d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a8da:	3330      	adds	r3, #48	; 0x30
    a8dc:	7013      	strb	r3, [r2, #0]
    a8de:	9b07      	ldr	r3, [sp, #28]
    a8e0:	0006      	movs	r6, r0
    a8e2:	000f      	movs	r7, r1
    a8e4:	1c54      	adds	r4, r2, #1
    a8e6:	2b01      	cmp	r3, #1
    a8e8:	d04e      	beq.n	a988 <_dtoa_r+0x5ec>
    a8ea:	2200      	movs	r2, #0
    a8ec:	4b60      	ldr	r3, [pc, #384]	; (aa70 <_dtoa_r+0x6d4>)
    a8ee:	f7fb fccd 	bl	628c <__aeabi_dmul>
    a8f2:	2200      	movs	r2, #0
    a8f4:	2300      	movs	r3, #0
    a8f6:	0006      	movs	r6, r0
    a8f8:	000f      	movs	r7, r1
    a8fa:	f7fc fbf7 	bl	70ec <__aeabi_dcmpeq>
    a8fe:	2800      	cmp	r0, #0
    a900:	d000      	beq.n	a904 <_dtoa_r+0x568>
    a902:	e77a      	b.n	a7fa <_dtoa_r+0x45e>
    a904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a906:	9a07      	ldr	r2, [sp, #28]
    a908:	1c9d      	adds	r5, r3, #2
    a90a:	469c      	mov	ip, r3
    a90c:	465b      	mov	r3, fp
    a90e:	9306      	str	r3, [sp, #24]
    a910:	4653      	mov	r3, sl
    a912:	4462      	add	r2, ip
    a914:	46aa      	mov	sl, r5
    a916:	9c04      	ldr	r4, [sp, #16]
    a918:	9d05      	ldr	r5, [sp, #20]
    a91a:	4691      	mov	r9, r2
    a91c:	9307      	str	r3, [sp, #28]
    a91e:	e00f      	b.n	a940 <_dtoa_r+0x5a4>
    a920:	2200      	movs	r2, #0
    a922:	4b53      	ldr	r3, [pc, #332]	; (aa70 <_dtoa_r+0x6d4>)
    a924:	f7fb fcb2 	bl	628c <__aeabi_dmul>
    a928:	2301      	movs	r3, #1
    a92a:	469c      	mov	ip, r3
    a92c:	2200      	movs	r2, #0
    a92e:	2300      	movs	r3, #0
    a930:	0006      	movs	r6, r0
    a932:	000f      	movs	r7, r1
    a934:	44e2      	add	sl, ip
    a936:	f7fc fbd9 	bl	70ec <__aeabi_dcmpeq>
    a93a:	2800      	cmp	r0, #0
    a93c:	d000      	beq.n	a940 <_dtoa_r+0x5a4>
    a93e:	e2d9      	b.n	aef4 <_dtoa_r+0xb58>
    a940:	0022      	movs	r2, r4
    a942:	002b      	movs	r3, r5
    a944:	0030      	movs	r0, r6
    a946:	0039      	movs	r1, r7
    a948:	f7fb f96c 	bl	5c24 <__aeabi_ddiv>
    a94c:	f7fc fa34 	bl	6db8 <__aeabi_d2iz>
    a950:	4680      	mov	r8, r0
    a952:	f7fc fa65 	bl	6e20 <__aeabi_i2d>
    a956:	0022      	movs	r2, r4
    a958:	002b      	movs	r3, r5
    a95a:	f7fb fc97 	bl	628c <__aeabi_dmul>
    a95e:	0002      	movs	r2, r0
    a960:	000b      	movs	r3, r1
    a962:	0030      	movs	r0, r6
    a964:	0039      	movs	r1, r7
    a966:	f7fb ff11 	bl	678c <__aeabi_dsub>
    a96a:	4653      	mov	r3, sl
    a96c:	4642      	mov	r2, r8
    a96e:	3b01      	subs	r3, #1
    a970:	3230      	adds	r2, #48	; 0x30
    a972:	0006      	movs	r6, r0
    a974:	000f      	movs	r7, r1
    a976:	46d3      	mov	fp, sl
    a978:	701a      	strb	r2, [r3, #0]
    a97a:	45d1      	cmp	r9, sl
    a97c:	d1d0      	bne.n	a920 <_dtoa_r+0x584>
    a97e:	9b06      	ldr	r3, [sp, #24]
    a980:	4654      	mov	r4, sl
    a982:	469b      	mov	fp, r3
    a984:	9b07      	ldr	r3, [sp, #28]
    a986:	469a      	mov	sl, r3
    a988:	0032      	movs	r2, r6
    a98a:	003b      	movs	r3, r7
    a98c:	0030      	movs	r0, r6
    a98e:	0039      	movs	r1, r7
    a990:	f004 f926 	bl	ebe0 <__aeabi_dadd>
    a994:	0006      	movs	r6, r0
    a996:	000f      	movs	r7, r1
    a998:	0002      	movs	r2, r0
    a99a:	000b      	movs	r3, r1
    a99c:	9804      	ldr	r0, [sp, #16]
    a99e:	9905      	ldr	r1, [sp, #20]
    a9a0:	f7fc fbaa 	bl	70f8 <__aeabi_dcmplt>
    a9a4:	2800      	cmp	r0, #0
    a9a6:	d10c      	bne.n	a9c2 <_dtoa_r+0x626>
    a9a8:	9804      	ldr	r0, [sp, #16]
    a9aa:	9905      	ldr	r1, [sp, #20]
    a9ac:	0032      	movs	r2, r6
    a9ae:	003b      	movs	r3, r7
    a9b0:	f7fc fb9c 	bl	70ec <__aeabi_dcmpeq>
    a9b4:	2800      	cmp	r0, #0
    a9b6:	d100      	bne.n	a9ba <_dtoa_r+0x61e>
    a9b8:	e71f      	b.n	a7fa <_dtoa_r+0x45e>
    a9ba:	4643      	mov	r3, r8
    a9bc:	07db      	lsls	r3, r3, #31
    a9be:	d400      	bmi.n	a9c2 <_dtoa_r+0x626>
    a9c0:	e71b      	b.n	a7fa <_dtoa_r+0x45e>
    a9c2:	1e65      	subs	r5, r4, #1
    a9c4:	782f      	ldrb	r7, [r5, #0]
    a9c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9c8:	e006      	b.n	a9d8 <_dtoa_r+0x63c>
    a9ca:	429d      	cmp	r5, r3
    a9cc:	d100      	bne.n	a9d0 <_dtoa_r+0x634>
    a9ce:	e351      	b.n	b074 <_dtoa_r+0xcd8>
    a9d0:	3c02      	subs	r4, #2
    a9d2:	7827      	ldrb	r7, [r4, #0]
    a9d4:	002c      	movs	r4, r5
    a9d6:	3d01      	subs	r5, #1
    a9d8:	2f39      	cmp	r7, #57	; 0x39
    a9da:	d0f6      	beq.n	a9ca <_dtoa_r+0x62e>
    a9dc:	3701      	adds	r7, #1
    a9de:	702f      	strb	r7, [r5, #0]
    a9e0:	e70b      	b.n	a7fa <_dtoa_r+0x45e>
    a9e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a9e4:	2a00      	cmp	r2, #0
    a9e6:	d04f      	beq.n	aa88 <_dtoa_r+0x6ec>
    a9e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a9ea:	2a01      	cmp	r2, #1
    a9ec:	dc00      	bgt.n	a9f0 <_dtoa_r+0x654>
    a9ee:	e22c      	b.n	ae4a <_dtoa_r+0xaae>
    a9f0:	9b07      	ldr	r3, [sp, #28]
    a9f2:	1e5c      	subs	r4, r3, #1
    a9f4:	464b      	mov	r3, r9
    a9f6:	45a1      	cmp	r9, r4
    a9f8:	da00      	bge.n	a9fc <_dtoa_r+0x660>
    a9fa:	e2b8      	b.n	af6e <_dtoa_r+0xbd2>
    a9fc:	1b1c      	subs	r4, r3, r4
    a9fe:	9b07      	ldr	r3, [sp, #28]
    aa00:	2b00      	cmp	r3, #0
    aa02:	da00      	bge.n	aa06 <_dtoa_r+0x66a>
    aa04:	e3d4      	b.n	b1b0 <_dtoa_r+0xe14>
    aa06:	9b06      	ldr	r3, [sp, #24]
    aa08:	9308      	str	r3, [sp, #32]
    aa0a:	9b07      	ldr	r3, [sp, #28]
    aa0c:	9a06      	ldr	r2, [sp, #24]
    aa0e:	2101      	movs	r1, #1
    aa10:	4694      	mov	ip, r2
    aa12:	449c      	add	ip, r3
    aa14:	4662      	mov	r2, ip
    aa16:	9206      	str	r2, [sp, #24]
    aa18:	9a04      	ldr	r2, [sp, #16]
    aa1a:	4650      	mov	r0, sl
    aa1c:	4694      	mov	ip, r2
    aa1e:	449c      	add	ip, r3
    aa20:	4663      	mov	r3, ip
    aa22:	9304      	str	r3, [sp, #16]
    aa24:	f001 fa5e 	bl	bee4 <__i2b>
    aa28:	4680      	mov	r8, r0
    aa2a:	e032      	b.n	aa92 <_dtoa_r+0x6f6>
    aa2c:	9a06      	ldr	r2, [sp, #24]
    aa2e:	9b03      	ldr	r3, [sp, #12]
    aa30:	1ad2      	subs	r2, r2, r3
    aa32:	425b      	negs	r3, r3
    aa34:	4699      	mov	r9, r3
    aa36:	2300      	movs	r3, #0
    aa38:	9206      	str	r2, [sp, #24]
    aa3a:	930d      	str	r3, [sp, #52]	; 0x34
    aa3c:	e579      	b.n	a532 <_dtoa_r+0x196>
    aa3e:	9803      	ldr	r0, [sp, #12]
    aa40:	f7fc f9ee 	bl	6e20 <__aeabi_i2d>
    aa44:	000b      	movs	r3, r1
    aa46:	0002      	movs	r2, r0
    aa48:	0029      	movs	r1, r5
    aa4a:	0020      	movs	r0, r4
    aa4c:	f7fc fb4e 	bl	70ec <__aeabi_dcmpeq>
    aa50:	0002      	movs	r2, r0
    aa52:	4250      	negs	r0, r2
    aa54:	4150      	adcs	r0, r2
    aa56:	9b03      	ldr	r3, [sp, #12]
    aa58:	1a1b      	subs	r3, r3, r0
    aa5a:	9303      	str	r3, [sp, #12]
    aa5c:	e53d      	b.n	a4da <_dtoa_r+0x13e>
    aa5e:	2301      	movs	r3, #1
    aa60:	1a9b      	subs	r3, r3, r2
    aa62:	9306      	str	r3, [sp, #24]
    aa64:	2300      	movs	r3, #0
    aa66:	9304      	str	r3, [sp, #16]
    aa68:	e557      	b.n	a51a <_dtoa_r+0x17e>
    aa6a:	46c0      	nop			; (mov r8, r8)
    aa6c:	3ff00000 	.word	0x3ff00000
    aa70:	40240000 	.word	0x40240000
    aa74:	00000432 	.word	0x00000432
    aa78:	00000412 	.word	0x00000412
    aa7c:	fe100000 	.word	0xfe100000
    aa80:	00011bf0 	.word	0x00011bf0
    aa84:	000120e0 	.word	0x000120e0
    aa88:	9b06      	ldr	r3, [sp, #24]
    aa8a:	464c      	mov	r4, r9
    aa8c:	9308      	str	r3, [sp, #32]
    aa8e:	2300      	movs	r3, #0
    aa90:	4698      	mov	r8, r3
    aa92:	9908      	ldr	r1, [sp, #32]
    aa94:	1e0b      	subs	r3, r1, #0
    aa96:	dd0e      	ble.n	aab6 <_dtoa_r+0x71a>
    aa98:	9a04      	ldr	r2, [sp, #16]
    aa9a:	2a00      	cmp	r2, #0
    aa9c:	dd0b      	ble.n	aab6 <_dtoa_r+0x71a>
    aa9e:	4293      	cmp	r3, r2
    aaa0:	dd00      	ble.n	aaa4 <_dtoa_r+0x708>
    aaa2:	e187      	b.n	adb4 <_dtoa_r+0xa18>
    aaa4:	9a06      	ldr	r2, [sp, #24]
    aaa6:	1ad2      	subs	r2, r2, r3
    aaa8:	9206      	str	r2, [sp, #24]
    aaaa:	9a08      	ldr	r2, [sp, #32]
    aaac:	1ad2      	subs	r2, r2, r3
    aaae:	9208      	str	r2, [sp, #32]
    aab0:	9a04      	ldr	r2, [sp, #16]
    aab2:	1ad3      	subs	r3, r2, r3
    aab4:	9304      	str	r3, [sp, #16]
    aab6:	464b      	mov	r3, r9
    aab8:	2b00      	cmp	r3, #0
    aaba:	d01a      	beq.n	aaf2 <_dtoa_r+0x756>
    aabc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aabe:	2b00      	cmp	r3, #0
    aac0:	d100      	bne.n	aac4 <_dtoa_r+0x728>
    aac2:	e1bb      	b.n	ae3c <_dtoa_r+0xaa0>
    aac4:	2c00      	cmp	r4, #0
    aac6:	dd10      	ble.n	aaea <_dtoa_r+0x74e>
    aac8:	4641      	mov	r1, r8
    aaca:	0022      	movs	r2, r4
    aacc:	4650      	mov	r0, sl
    aace:	f001 fabd 	bl	c04c <__pow5mult>
    aad2:	465a      	mov	r2, fp
    aad4:	0001      	movs	r1, r0
    aad6:	4680      	mov	r8, r0
    aad8:	4650      	mov	r0, sl
    aada:	f001 fa0d 	bl	bef8 <__multiply>
    aade:	0005      	movs	r5, r0
    aae0:	4659      	mov	r1, fp
    aae2:	4650      	mov	r0, sl
    aae4:	f001 f91c 	bl	bd20 <_Bfree>
    aae8:	46ab      	mov	fp, r5
    aaea:	464b      	mov	r3, r9
    aaec:	1b1a      	subs	r2, r3, r4
    aaee:	d000      	beq.n	aaf2 <_dtoa_r+0x756>
    aaf0:	e1a5      	b.n	ae3e <_dtoa_r+0xaa2>
    aaf2:	2101      	movs	r1, #1
    aaf4:	4650      	mov	r0, sl
    aaf6:	f001 f9f5 	bl	bee4 <__i2b>
    aafa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    aafc:	4681      	mov	r9, r0
    aafe:	2b00      	cmp	r3, #0
    ab00:	dd1d      	ble.n	ab3e <_dtoa_r+0x7a2>
    ab02:	001a      	movs	r2, r3
    ab04:	0001      	movs	r1, r0
    ab06:	4650      	mov	r0, sl
    ab08:	f001 faa0 	bl	c04c <__pow5mult>
    ab0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ab0e:	4681      	mov	r9, r0
    ab10:	2b01      	cmp	r3, #1
    ab12:	dc00      	bgt.n	ab16 <_dtoa_r+0x77a>
    ab14:	e150      	b.n	adb8 <_dtoa_r+0xa1c>
    ab16:	2400      	movs	r4, #0
    ab18:	464b      	mov	r3, r9
    ab1a:	691b      	ldr	r3, [r3, #16]
    ab1c:	3303      	adds	r3, #3
    ab1e:	009b      	lsls	r3, r3, #2
    ab20:	444b      	add	r3, r9
    ab22:	6858      	ldr	r0, [r3, #4]
    ab24:	f001 f996 	bl	be54 <__hi0bits>
    ab28:	2320      	movs	r3, #32
    ab2a:	1a1b      	subs	r3, r3, r0
    ab2c:	e010      	b.n	ab50 <_dtoa_r+0x7b4>
    ab2e:	2220      	movs	r2, #32
    ab30:	0030      	movs	r0, r6
    ab32:	1ad3      	subs	r3, r2, r3
    ab34:	4098      	lsls	r0, r3
    ab36:	e685      	b.n	a844 <_dtoa_r+0x4a8>
    ab38:	2300      	movs	r3, #0
    ab3a:	930c      	str	r3, [sp, #48]	; 0x30
    ab3c:	e4e3      	b.n	a506 <_dtoa_r+0x16a>
    ab3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ab40:	2400      	movs	r4, #0
    ab42:	2b01      	cmp	r3, #1
    ab44:	dc00      	bgt.n	ab48 <_dtoa_r+0x7ac>
    ab46:	e18b      	b.n	ae60 <_dtoa_r+0xac4>
    ab48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ab4a:	2301      	movs	r3, #1
    ab4c:	2a00      	cmp	r2, #0
    ab4e:	d1e3      	bne.n	ab18 <_dtoa_r+0x77c>
    ab50:	9904      	ldr	r1, [sp, #16]
    ab52:	201f      	movs	r0, #31
    ab54:	468c      	mov	ip, r1
    ab56:	4463      	add	r3, ip
    ab58:	4018      	ands	r0, r3
    ab5a:	d100      	bne.n	ab5e <_dtoa_r+0x7c2>
    ab5c:	e0ae      	b.n	acbc <_dtoa_r+0x920>
    ab5e:	2320      	movs	r3, #32
    ab60:	1a1b      	subs	r3, r3, r0
    ab62:	2b04      	cmp	r3, #4
    ab64:	dc00      	bgt.n	ab68 <_dtoa_r+0x7cc>
    ab66:	e3cc      	b.n	b302 <_dtoa_r+0xf66>
    ab68:	231c      	movs	r3, #28
    ab6a:	1a18      	subs	r0, r3, r0
    ab6c:	9b06      	ldr	r3, [sp, #24]
    ab6e:	469c      	mov	ip, r3
    ab70:	4484      	add	ip, r0
    ab72:	4663      	mov	r3, ip
    ab74:	9306      	str	r3, [sp, #24]
    ab76:	9b08      	ldr	r3, [sp, #32]
    ab78:	469c      	mov	ip, r3
    ab7a:	4484      	add	ip, r0
    ab7c:	4663      	mov	r3, ip
    ab7e:	468c      	mov	ip, r1
    ab80:	4484      	add	ip, r0
    ab82:	9308      	str	r3, [sp, #32]
    ab84:	4663      	mov	r3, ip
    ab86:	9304      	str	r3, [sp, #16]
    ab88:	9b06      	ldr	r3, [sp, #24]
    ab8a:	2b00      	cmp	r3, #0
    ab8c:	dd05      	ble.n	ab9a <_dtoa_r+0x7fe>
    ab8e:	4659      	mov	r1, fp
    ab90:	001a      	movs	r2, r3
    ab92:	4650      	mov	r0, sl
    ab94:	f001 faba 	bl	c10c <__lshift>
    ab98:	4683      	mov	fp, r0
    ab9a:	9b04      	ldr	r3, [sp, #16]
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	dd05      	ble.n	abac <_dtoa_r+0x810>
    aba0:	4649      	mov	r1, r9
    aba2:	001a      	movs	r2, r3
    aba4:	4650      	mov	r0, sl
    aba6:	f001 fab1 	bl	c10c <__lshift>
    abaa:	4681      	mov	r9, r0
    abac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    abae:	2b00      	cmp	r3, #0
    abb0:	d000      	beq.n	abb4 <_dtoa_r+0x818>
    abb2:	e094      	b.n	acde <_dtoa_r+0x942>
    abb4:	9b07      	ldr	r3, [sp, #28]
    abb6:	2b00      	cmp	r3, #0
    abb8:	dc00      	bgt.n	abbc <_dtoa_r+0x820>
    abba:	e175      	b.n	aea8 <_dtoa_r+0xb0c>
    abbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    abbe:	2b00      	cmp	r3, #0
    abc0:	d100      	bne.n	abc4 <_dtoa_r+0x828>
    abc2:	e0a6      	b.n	ad12 <_dtoa_r+0x976>
    abc4:	9b08      	ldr	r3, [sp, #32]
    abc6:	2b00      	cmp	r3, #0
    abc8:	dd05      	ble.n	abd6 <_dtoa_r+0x83a>
    abca:	4641      	mov	r1, r8
    abcc:	001a      	movs	r2, r3
    abce:	4650      	mov	r0, sl
    abd0:	f001 fa9c 	bl	c10c <__lshift>
    abd4:	4680      	mov	r8, r0
    abd6:	4643      	mov	r3, r8
    abd8:	930c      	str	r3, [sp, #48]	; 0x30
    abda:	2c00      	cmp	r4, #0
    abdc:	d000      	beq.n	abe0 <_dtoa_r+0x844>
    abde:	e250      	b.n	b082 <_dtoa_r+0xce6>
    abe0:	9c07      	ldr	r4, [sp, #28]
    abe2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    abe4:	3c01      	subs	r4, #1
    abe6:	0023      	movs	r3, r4
    abe8:	4694      	mov	ip, r2
    abea:	4463      	add	r3, ip
    abec:	9308      	str	r3, [sp, #32]
    abee:	2301      	movs	r3, #1
    abf0:	4033      	ands	r3, r6
    abf2:	9307      	str	r3, [sp, #28]
    abf4:	464b      	mov	r3, r9
    abf6:	9306      	str	r3, [sp, #24]
    abf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    abfa:	4657      	mov	r7, sl
    abfc:	4645      	mov	r5, r8
    abfe:	465e      	mov	r6, fp
    ac00:	4692      	mov	sl, r2
    ac02:	4698      	mov	r8, r3
    ac04:	9b06      	ldr	r3, [sp, #24]
    ac06:	0030      	movs	r0, r6
    ac08:	0019      	movs	r1, r3
    ac0a:	4699      	mov	r9, r3
    ac0c:	f7ff fb1c 	bl	a248 <quorem>
    ac10:	0003      	movs	r3, r0
    ac12:	900b      	str	r0, [sp, #44]	; 0x2c
    ac14:	3330      	adds	r3, #48	; 0x30
    ac16:	0029      	movs	r1, r5
    ac18:	0030      	movs	r0, r6
    ac1a:	9304      	str	r3, [sp, #16]
    ac1c:	f001 fad6 	bl	c1cc <__mcmp>
    ac20:	4649      	mov	r1, r9
    ac22:	0004      	movs	r4, r0
    ac24:	4642      	mov	r2, r8
    ac26:	0038      	movs	r0, r7
    ac28:	f001 faea 	bl	c200 <__mdiff>
    ac2c:	68c3      	ldr	r3, [r0, #12]
    ac2e:	4681      	mov	r9, r0
    ac30:	2b00      	cmp	r3, #0
    ac32:	d000      	beq.n	ac36 <_dtoa_r+0x89a>
    ac34:	e11e      	b.n	ae74 <_dtoa_r+0xad8>
    ac36:	0001      	movs	r1, r0
    ac38:	0030      	movs	r0, r6
    ac3a:	f001 fac7 	bl	c1cc <__mcmp>
    ac3e:	4683      	mov	fp, r0
    ac40:	4649      	mov	r1, r9
    ac42:	0038      	movs	r0, r7
    ac44:	f001 f86c 	bl	bd20 <_Bfree>
    ac48:	465b      	mov	r3, fp
    ac4a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ac4c:	4313      	orrs	r3, r2
    ac4e:	d103      	bne.n	ac58 <_dtoa_r+0x8bc>
    ac50:	9b07      	ldr	r3, [sp, #28]
    ac52:	2b00      	cmp	r3, #0
    ac54:	d100      	bne.n	ac58 <_dtoa_r+0x8bc>
    ac56:	e306      	b.n	b266 <_dtoa_r+0xeca>
    ac58:	2c00      	cmp	r4, #0
    ac5a:	da00      	bge.n	ac5e <_dtoa_r+0x8c2>
    ac5c:	e1a8      	b.n	afb0 <_dtoa_r+0xc14>
    ac5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ac60:	431c      	orrs	r4, r3
    ac62:	d103      	bne.n	ac6c <_dtoa_r+0x8d0>
    ac64:	9b07      	ldr	r3, [sp, #28]
    ac66:	2b00      	cmp	r3, #0
    ac68:	d100      	bne.n	ac6c <_dtoa_r+0x8d0>
    ac6a:	e1a1      	b.n	afb0 <_dtoa_r+0xc14>
    ac6c:	465b      	mov	r3, fp
    ac6e:	2b00      	cmp	r3, #0
    ac70:	dd00      	ble.n	ac74 <_dtoa_r+0x8d8>
    ac72:	e282      	b.n	b17a <_dtoa_r+0xdde>
    ac74:	4669      	mov	r1, sp
    ac76:	4652      	mov	r2, sl
    ac78:	4653      	mov	r3, sl
    ac7a:	7c09      	ldrb	r1, [r1, #16]
    ac7c:	1c5c      	adds	r4, r3, #1
    ac7e:	7011      	strb	r1, [r2, #0]
    ac80:	9a08      	ldr	r2, [sp, #32]
    ac82:	4552      	cmp	r2, sl
    ac84:	d100      	bne.n	ac88 <_dtoa_r+0x8ec>
    ac86:	e28a      	b.n	b19e <_dtoa_r+0xe02>
    ac88:	0031      	movs	r1, r6
    ac8a:	2300      	movs	r3, #0
    ac8c:	220a      	movs	r2, #10
    ac8e:	0038      	movs	r0, r7
    ac90:	f001 f850 	bl	bd34 <__multadd>
    ac94:	2300      	movs	r3, #0
    ac96:	0006      	movs	r6, r0
    ac98:	220a      	movs	r2, #10
    ac9a:	0029      	movs	r1, r5
    ac9c:	0038      	movs	r0, r7
    ac9e:	4545      	cmp	r5, r8
    aca0:	d100      	bne.n	aca4 <_dtoa_r+0x908>
    aca2:	e0e1      	b.n	ae68 <_dtoa_r+0xacc>
    aca4:	f001 f846 	bl	bd34 <__multadd>
    aca8:	4641      	mov	r1, r8
    acaa:	0005      	movs	r5, r0
    acac:	2300      	movs	r3, #0
    acae:	220a      	movs	r2, #10
    acb0:	0038      	movs	r0, r7
    acb2:	f001 f83f 	bl	bd34 <__multadd>
    acb6:	46a2      	mov	sl, r4
    acb8:	4680      	mov	r8, r0
    acba:	e7a3      	b.n	ac04 <_dtoa_r+0x868>
    acbc:	201c      	movs	r0, #28
    acbe:	9b06      	ldr	r3, [sp, #24]
    acc0:	469c      	mov	ip, r3
    acc2:	4484      	add	ip, r0
    acc4:	4663      	mov	r3, ip
    acc6:	9306      	str	r3, [sp, #24]
    acc8:	9b08      	ldr	r3, [sp, #32]
    acca:	469c      	mov	ip, r3
    accc:	4484      	add	ip, r0
    acce:	4663      	mov	r3, ip
    acd0:	9308      	str	r3, [sp, #32]
    acd2:	9b04      	ldr	r3, [sp, #16]
    acd4:	469c      	mov	ip, r3
    acd6:	4484      	add	ip, r0
    acd8:	4663      	mov	r3, ip
    acda:	9304      	str	r3, [sp, #16]
    acdc:	e754      	b.n	ab88 <_dtoa_r+0x7ec>
    acde:	4649      	mov	r1, r9
    ace0:	4658      	mov	r0, fp
    ace2:	f001 fa73 	bl	c1cc <__mcmp>
    ace6:	2800      	cmp	r0, #0
    ace8:	db00      	blt.n	acec <_dtoa_r+0x950>
    acea:	e763      	b.n	abb4 <_dtoa_r+0x818>
    acec:	9b03      	ldr	r3, [sp, #12]
    acee:	4659      	mov	r1, fp
    acf0:	3b01      	subs	r3, #1
    acf2:	9303      	str	r3, [sp, #12]
    acf4:	220a      	movs	r2, #10
    acf6:	2300      	movs	r3, #0
    acf8:	4650      	mov	r0, sl
    acfa:	f001 f81b 	bl	bd34 <__multadd>
    acfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ad00:	4683      	mov	fp, r0
    ad02:	2b00      	cmp	r3, #0
    ad04:	d000      	beq.n	ad08 <_dtoa_r+0x96c>
    ad06:	e2ca      	b.n	b29e <_dtoa_r+0xf02>
    ad08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	dc00      	bgt.n	ad10 <_dtoa_r+0x974>
    ad0e:	e2d8      	b.n	b2c2 <_dtoa_r+0xf26>
    ad10:	9307      	str	r3, [sp, #28]
    ad12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad14:	465d      	mov	r5, fp
    ad16:	2400      	movs	r4, #0
    ad18:	9f07      	ldr	r7, [sp, #28]
    ad1a:	469b      	mov	fp, r3
    ad1c:	e006      	b.n	ad2c <_dtoa_r+0x990>
    ad1e:	0029      	movs	r1, r5
    ad20:	2300      	movs	r3, #0
    ad22:	220a      	movs	r2, #10
    ad24:	4650      	mov	r0, sl
    ad26:	f001 f805 	bl	bd34 <__multadd>
    ad2a:	0005      	movs	r5, r0
    ad2c:	4649      	mov	r1, r9
    ad2e:	0028      	movs	r0, r5
    ad30:	f7ff fa8a 	bl	a248 <quorem>
    ad34:	465b      	mov	r3, fp
    ad36:	3030      	adds	r0, #48	; 0x30
    ad38:	5518      	strb	r0, [r3, r4]
    ad3a:	3401      	adds	r4, #1
    ad3c:	42bc      	cmp	r4, r7
    ad3e:	dbee      	blt.n	ad1e <_dtoa_r+0x982>
    ad40:	46ab      	mov	fp, r5
    ad42:	0006      	movs	r6, r0
    ad44:	9c07      	ldr	r4, [sp, #28]
    ad46:	2c00      	cmp	r4, #0
    ad48:	dc00      	bgt.n	ad4c <_dtoa_r+0x9b0>
    ad4a:	e237      	b.n	b1bc <_dtoa_r+0xe20>
    ad4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ad4e:	2700      	movs	r7, #0
    ad50:	469c      	mov	ip, r3
    ad52:	4464      	add	r4, ip
    ad54:	4659      	mov	r1, fp
    ad56:	2201      	movs	r2, #1
    ad58:	4650      	mov	r0, sl
    ad5a:	f001 f9d7 	bl	c10c <__lshift>
    ad5e:	4649      	mov	r1, r9
    ad60:	4683      	mov	fp, r0
    ad62:	f001 fa33 	bl	c1cc <__mcmp>
    ad66:	2800      	cmp	r0, #0
    ad68:	dc00      	bgt.n	ad6c <_dtoa_r+0x9d0>
    ad6a:	e144      	b.n	aff6 <_dtoa_r+0xc5a>
    ad6c:	1e65      	subs	r5, r4, #1
    ad6e:	782b      	ldrb	r3, [r5, #0]
    ad70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ad72:	e006      	b.n	ad82 <_dtoa_r+0x9e6>
    ad74:	4295      	cmp	r5, r2
    ad76:	d100      	bne.n	ad7a <_dtoa_r+0x9de>
    ad78:	e0b1      	b.n	aede <_dtoa_r+0xb42>
    ad7a:	3c02      	subs	r4, #2
    ad7c:	7823      	ldrb	r3, [r4, #0]
    ad7e:	002c      	movs	r4, r5
    ad80:	3d01      	subs	r5, #1
    ad82:	2b39      	cmp	r3, #57	; 0x39
    ad84:	d0f6      	beq.n	ad74 <_dtoa_r+0x9d8>
    ad86:	3301      	adds	r3, #1
    ad88:	702b      	strb	r3, [r5, #0]
    ad8a:	4649      	mov	r1, r9
    ad8c:	4650      	mov	r0, sl
    ad8e:	f000 ffc7 	bl	bd20 <_Bfree>
    ad92:	4643      	mov	r3, r8
    ad94:	2b00      	cmp	r3, #0
    ad96:	d100      	bne.n	ad9a <_dtoa_r+0x9fe>
    ad98:	e52f      	b.n	a7fa <_dtoa_r+0x45e>
    ad9a:	2f00      	cmp	r7, #0
    ad9c:	d005      	beq.n	adaa <_dtoa_r+0xa0e>
    ad9e:	4547      	cmp	r7, r8
    ada0:	d003      	beq.n	adaa <_dtoa_r+0xa0e>
    ada2:	0039      	movs	r1, r7
    ada4:	4650      	mov	r0, sl
    ada6:	f000 ffbb 	bl	bd20 <_Bfree>
    adaa:	4641      	mov	r1, r8
    adac:	4650      	mov	r0, sl
    adae:	f000 ffb7 	bl	bd20 <_Bfree>
    adb2:	e522      	b.n	a7fa <_dtoa_r+0x45e>
    adb4:	0013      	movs	r3, r2
    adb6:	e675      	b.n	aaa4 <_dtoa_r+0x708>
    adb8:	2e00      	cmp	r6, #0
    adba:	d000      	beq.n	adbe <_dtoa_r+0xa22>
    adbc:	e6ab      	b.n	ab16 <_dtoa_r+0x77a>
    adbe:	033b      	lsls	r3, r7, #12
    adc0:	2400      	movs	r4, #0
    adc2:	2b00      	cmp	r3, #0
    adc4:	d000      	beq.n	adc8 <_dtoa_r+0xa2c>
    adc6:	e6bf      	b.n	ab48 <_dtoa_r+0x7ac>
    adc8:	4bba      	ldr	r3, [pc, #744]	; (b0b4 <_dtoa_r+0xd18>)
    adca:	423b      	tst	r3, r7
    adcc:	d100      	bne.n	add0 <_dtoa_r+0xa34>
    adce:	e6bb      	b.n	ab48 <_dtoa_r+0x7ac>
    add0:	9b06      	ldr	r3, [sp, #24]
    add2:	3401      	adds	r4, #1
    add4:	3301      	adds	r3, #1
    add6:	9306      	str	r3, [sp, #24]
    add8:	9b04      	ldr	r3, [sp, #16]
    adda:	3301      	adds	r3, #1
    addc:	9304      	str	r3, [sp, #16]
    adde:	e6b3      	b.n	ab48 <_dtoa_r+0x7ac>
    ade0:	2301      	movs	r3, #1
    ade2:	930b      	str	r3, [sp, #44]	; 0x2c
    ade4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ade6:	2b00      	cmp	r3, #0
    ade8:	dc00      	bgt.n	adec <_dtoa_r+0xa50>
    adea:	e0d1      	b.n	af90 <_dtoa_r+0xbf4>
    adec:	001d      	movs	r5, r3
    adee:	4698      	mov	r8, r3
    adf0:	930e      	str	r3, [sp, #56]	; 0x38
    adf2:	9307      	str	r3, [sp, #28]
    adf4:	f7ff fbc8 	bl	a588 <_dtoa_r+0x1ec>
    adf8:	9b07      	ldr	r3, [sp, #28]
    adfa:	2b00      	cmp	r3, #0
    adfc:	dd00      	ble.n	ae00 <_dtoa_r+0xa64>
    adfe:	e553      	b.n	a8a8 <_dtoa_r+0x50c>
    ae00:	d000      	beq.n	ae04 <_dtoa_r+0xa68>
    ae02:	e0ad      	b.n	af60 <_dtoa_r+0xbc4>
    ae04:	9804      	ldr	r0, [sp, #16]
    ae06:	9905      	ldr	r1, [sp, #20]
    ae08:	2200      	movs	r2, #0
    ae0a:	4bab      	ldr	r3, [pc, #684]	; (b0b8 <_dtoa_r+0xd1c>)
    ae0c:	f7fb fa3e 	bl	628c <__aeabi_dmul>
    ae10:	003b      	movs	r3, r7
    ae12:	0032      	movs	r2, r6
    ae14:	f7fc f98e 	bl	7134 <__aeabi_dcmpge>
    ae18:	2300      	movs	r3, #0
    ae1a:	4699      	mov	r9, r3
    ae1c:	4698      	mov	r8, r3
    ae1e:	2800      	cmp	r0, #0
    ae20:	d055      	beq.n	aece <_dtoa_r+0xb32>
    ae22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    ae24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ae26:	43db      	mvns	r3, r3
    ae28:	9303      	str	r3, [sp, #12]
    ae2a:	4649      	mov	r1, r9
    ae2c:	4650      	mov	r0, sl
    ae2e:	f000 ff77 	bl	bd20 <_Bfree>
    ae32:	4643      	mov	r3, r8
    ae34:	2b00      	cmp	r3, #0
    ae36:	d100      	bne.n	ae3a <_dtoa_r+0xa9e>
    ae38:	e4df      	b.n	a7fa <_dtoa_r+0x45e>
    ae3a:	e7b6      	b.n	adaa <_dtoa_r+0xa0e>
    ae3c:	464a      	mov	r2, r9
    ae3e:	4659      	mov	r1, fp
    ae40:	4650      	mov	r0, sl
    ae42:	f001 f903 	bl	c04c <__pow5mult>
    ae46:	4683      	mov	fp, r0
    ae48:	e653      	b.n	aaf2 <_dtoa_r+0x756>
    ae4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ae4c:	2a00      	cmp	r2, #0
    ae4e:	d100      	bne.n	ae52 <_dtoa_r+0xab6>
    ae50:	e1b6      	b.n	b1c0 <_dtoa_r+0xe24>
    ae52:	4a9a      	ldr	r2, [pc, #616]	; (b0bc <_dtoa_r+0xd20>)
    ae54:	464c      	mov	r4, r9
    ae56:	4694      	mov	ip, r2
    ae58:	9a06      	ldr	r2, [sp, #24]
    ae5a:	4463      	add	r3, ip
    ae5c:	9208      	str	r2, [sp, #32]
    ae5e:	e5d5      	b.n	aa0c <_dtoa_r+0x670>
    ae60:	2e00      	cmp	r6, #0
    ae62:	d000      	beq.n	ae66 <_dtoa_r+0xaca>
    ae64:	e670      	b.n	ab48 <_dtoa_r+0x7ac>
    ae66:	e7aa      	b.n	adbe <_dtoa_r+0xa22>
    ae68:	f000 ff64 	bl	bd34 <__multadd>
    ae6c:	46a2      	mov	sl, r4
    ae6e:	0005      	movs	r5, r0
    ae70:	4680      	mov	r8, r0
    ae72:	e6c7      	b.n	ac04 <_dtoa_r+0x868>
    ae74:	2301      	movs	r3, #1
    ae76:	469b      	mov	fp, r3
    ae78:	e6e2      	b.n	ac40 <_dtoa_r+0x8a4>
    ae7a:	2300      	movs	r3, #0
    ae7c:	930b      	str	r3, [sp, #44]	; 0x2c
    ae7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ae80:	2b02      	cmp	r3, #2
    ae82:	d0af      	beq.n	ade4 <_dtoa_r+0xa48>
    ae84:	2400      	movs	r4, #0
    ae86:	4653      	mov	r3, sl
    ae88:	0021      	movs	r1, r4
    ae8a:	645c      	str	r4, [r3, #68]	; 0x44
    ae8c:	4650      	mov	r0, sl
    ae8e:	f000 ff1f 	bl	bcd0 <_Balloc>
    ae92:	4653      	mov	r3, sl
    ae94:	6418      	str	r0, [r3, #64]	; 0x40
    ae96:	2301      	movs	r3, #1
    ae98:	425b      	negs	r3, r3
    ae9a:	9307      	str	r3, [sp, #28]
    ae9c:	930e      	str	r3, [sp, #56]	; 0x38
    ae9e:	3302      	adds	r3, #2
    aea0:	900a      	str	r0, [sp, #40]	; 0x28
    aea2:	9423      	str	r4, [sp, #140]	; 0x8c
    aea4:	930b      	str	r3, [sp, #44]	; 0x2c
    aea6:	e4ec      	b.n	a882 <_dtoa_r+0x4e6>
    aea8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    aeaa:	2b02      	cmp	r3, #2
    aeac:	dc00      	bgt.n	aeb0 <_dtoa_r+0xb14>
    aeae:	e685      	b.n	abbc <_dtoa_r+0x820>
    aeb0:	9b07      	ldr	r3, [sp, #28]
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	d1b5      	bne.n	ae22 <_dtoa_r+0xa86>
    aeb6:	4649      	mov	r1, r9
    aeb8:	2205      	movs	r2, #5
    aeba:	4650      	mov	r0, sl
    aebc:	f000 ff3a 	bl	bd34 <__multadd>
    aec0:	4681      	mov	r9, r0
    aec2:	0001      	movs	r1, r0
    aec4:	4658      	mov	r0, fp
    aec6:	f001 f981 	bl	c1cc <__mcmp>
    aeca:	2800      	cmp	r0, #0
    aecc:	dda9      	ble.n	ae22 <_dtoa_r+0xa86>
    aece:	2331      	movs	r3, #49	; 0x31
    aed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aed2:	7013      	strb	r3, [r2, #0]
    aed4:	9b03      	ldr	r3, [sp, #12]
    aed6:	1c54      	adds	r4, r2, #1
    aed8:	3301      	adds	r3, #1
    aeda:	9303      	str	r3, [sp, #12]
    aedc:	e7a5      	b.n	ae2a <_dtoa_r+0xa8e>
    aede:	9b03      	ldr	r3, [sp, #12]
    aee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aee2:	3301      	adds	r3, #1
    aee4:	9303      	str	r3, [sp, #12]
    aee6:	2331      	movs	r3, #49	; 0x31
    aee8:	7013      	strb	r3, [r2, #0]
    aeea:	e74e      	b.n	ad8a <_dtoa_r+0x9ee>
    aeec:	2300      	movs	r3, #0
    aeee:	930b      	str	r3, [sp, #44]	; 0x2c
    aef0:	f7ff fb3d 	bl	a56e <_dtoa_r+0x1d2>
    aef4:	9b06      	ldr	r3, [sp, #24]
    aef6:	465c      	mov	r4, fp
    aef8:	469b      	mov	fp, r3
    aefa:	9b07      	ldr	r3, [sp, #28]
    aefc:	469a      	mov	sl, r3
    aefe:	e47c      	b.n	a7fa <_dtoa_r+0x45e>
    af00:	4640      	mov	r0, r8
    af02:	f7fb ff8d 	bl	6e20 <__aeabi_i2d>
    af06:	0032      	movs	r2, r6
    af08:	003b      	movs	r3, r7
    af0a:	f7fb f9bf 	bl	628c <__aeabi_dmul>
    af0e:	2200      	movs	r2, #0
    af10:	4b6b      	ldr	r3, [pc, #428]	; (b0c0 <_dtoa_r+0xd24>)
    af12:	f003 fe65 	bl	ebe0 <__aeabi_dadd>
    af16:	4a6b      	ldr	r2, [pc, #428]	; (b0c4 <_dtoa_r+0xd28>)
    af18:	000b      	movs	r3, r1
    af1a:	4694      	mov	ip, r2
    af1c:	4463      	add	r3, ip
    af1e:	9008      	str	r0, [sp, #32]
    af20:	9109      	str	r1, [sp, #36]	; 0x24
    af22:	9309      	str	r3, [sp, #36]	; 0x24
    af24:	2200      	movs	r2, #0
    af26:	4b64      	ldr	r3, [pc, #400]	; (b0b8 <_dtoa_r+0xd1c>)
    af28:	0030      	movs	r0, r6
    af2a:	0039      	movs	r1, r7
    af2c:	f7fb fc2e 	bl	678c <__aeabi_dsub>
    af30:	9e08      	ldr	r6, [sp, #32]
    af32:	9f09      	ldr	r7, [sp, #36]	; 0x24
    af34:	0032      	movs	r2, r6
    af36:	003b      	movs	r3, r7
    af38:	0004      	movs	r4, r0
    af3a:	000d      	movs	r5, r1
    af3c:	f7fc f8f0 	bl	7120 <__aeabi_dcmpgt>
    af40:	2800      	cmp	r0, #0
    af42:	d000      	beq.n	af46 <_dtoa_r+0xbaa>
    af44:	e0b2      	b.n	b0ac <_dtoa_r+0xd10>
    af46:	2080      	movs	r0, #128	; 0x80
    af48:	0600      	lsls	r0, r0, #24
    af4a:	4684      	mov	ip, r0
    af4c:	0039      	movs	r1, r7
    af4e:	4461      	add	r1, ip
    af50:	000b      	movs	r3, r1
    af52:	0032      	movs	r2, r6
    af54:	0020      	movs	r0, r4
    af56:	0029      	movs	r1, r5
    af58:	f7fc f8ce 	bl	70f8 <__aeabi_dcmplt>
    af5c:	2800      	cmp	r0, #0
    af5e:	d057      	beq.n	b010 <_dtoa_r+0xc74>
    af60:	2300      	movs	r3, #0
    af62:	4699      	mov	r9, r3
    af64:	4698      	mov	r8, r3
    af66:	e75c      	b.n	ae22 <_dtoa_r+0xa86>
    af68:	980a      	ldr	r0, [sp, #40]	; 0x28
    af6a:	f7ff fa4c 	bl	a406 <_dtoa_r+0x6a>
    af6e:	1ae2      	subs	r2, r4, r3
    af70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    af72:	46a1      	mov	r9, r4
    af74:	469c      	mov	ip, r3
    af76:	4494      	add	ip, r2
    af78:	4663      	mov	r3, ip
    af7a:	2400      	movs	r4, #0
    af7c:	930d      	str	r3, [sp, #52]	; 0x34
    af7e:	e53e      	b.n	a9fe <_dtoa_r+0x662>
    af80:	9a10      	ldr	r2, [sp, #64]	; 0x40
    af82:	9b11      	ldr	r3, [sp, #68]	; 0x44
    af84:	9208      	str	r2, [sp, #32]
    af86:	9309      	str	r3, [sp, #36]	; 0x24
    af88:	2302      	movs	r3, #2
    af8a:	4698      	mov	r8, r3
    af8c:	f7ff fb3a 	bl	a604 <_dtoa_r+0x268>
    af90:	2300      	movs	r3, #0
    af92:	4652      	mov	r2, sl
    af94:	2100      	movs	r1, #0
    af96:	6453      	str	r3, [r2, #68]	; 0x44
    af98:	4650      	mov	r0, sl
    af9a:	f000 fe99 	bl	bcd0 <_Balloc>
    af9e:	4653      	mov	r3, sl
    afa0:	6418      	str	r0, [r3, #64]	; 0x40
    afa2:	2301      	movs	r3, #1
    afa4:	900a      	str	r0, [sp, #40]	; 0x28
    afa6:	9307      	str	r3, [sp, #28]
    afa8:	9323      	str	r3, [sp, #140]	; 0x8c
    afaa:	930e      	str	r3, [sp, #56]	; 0x38
    afac:	f7ff fb07 	bl	a5be <_dtoa_r+0x222>
    afb0:	4643      	mov	r3, r8
    afb2:	930c      	str	r3, [sp, #48]	; 0x30
    afb4:	465b      	mov	r3, fp
    afb6:	9a06      	ldr	r2, [sp, #24]
    afb8:	46a8      	mov	r8, r5
    afba:	46b3      	mov	fp, r6
    afbc:	4655      	mov	r5, sl
    afbe:	9e04      	ldr	r6, [sp, #16]
    afc0:	4691      	mov	r9, r2
    afc2:	46ba      	mov	sl, r7
    afc4:	2b00      	cmp	r3, #0
    afc6:	dd10      	ble.n	afea <_dtoa_r+0xc4e>
    afc8:	4659      	mov	r1, fp
    afca:	2201      	movs	r2, #1
    afcc:	0038      	movs	r0, r7
    afce:	f001 f89d 	bl	c10c <__lshift>
    afd2:	4649      	mov	r1, r9
    afd4:	4683      	mov	fp, r0
    afd6:	f001 f8f9 	bl	c1cc <__mcmp>
    afda:	2800      	cmp	r0, #0
    afdc:	dc00      	bgt.n	afe0 <_dtoa_r+0xc44>
    afde:	e157      	b.n	b290 <_dtoa_r+0xef4>
    afe0:	2e39      	cmp	r6, #57	; 0x39
    afe2:	d100      	bne.n	afe6 <_dtoa_r+0xc4a>
    afe4:	e122      	b.n	b22c <_dtoa_r+0xe90>
    afe6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    afe8:	3631      	adds	r6, #49	; 0x31
    afea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    afec:	4647      	mov	r7, r8
    afee:	1c6c      	adds	r4, r5, #1
    aff0:	702e      	strb	r6, [r5, #0]
    aff2:	4698      	mov	r8, r3
    aff4:	e6c9      	b.n	ad8a <_dtoa_r+0x9ee>
    aff6:	2800      	cmp	r0, #0
    aff8:	d103      	bne.n	b002 <_dtoa_r+0xc66>
    affa:	07f3      	lsls	r3, r6, #31
    affc:	d501      	bpl.n	b002 <_dtoa_r+0xc66>
    affe:	e6b5      	b.n	ad6c <_dtoa_r+0x9d0>
    b000:	001c      	movs	r4, r3
    b002:	1e63      	subs	r3, r4, #1
    b004:	781a      	ldrb	r2, [r3, #0]
    b006:	2a30      	cmp	r2, #48	; 0x30
    b008:	d0fa      	beq.n	b000 <_dtoa_r+0xc64>
    b00a:	e6be      	b.n	ad8a <_dtoa_r+0x9ee>
    b00c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b00e:	4699      	mov	r9, r3
    b010:	9e10      	ldr	r6, [sp, #64]	; 0x40
    b012:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b014:	e435      	b.n	a882 <_dtoa_r+0x4e6>
    b016:	2501      	movs	r5, #1
    b018:	f7ff fab4 	bl	a584 <_dtoa_r+0x1e8>
    b01c:	9b03      	ldr	r3, [sp, #12]
    b01e:	2b00      	cmp	r3, #0
    b020:	d100      	bne.n	b024 <_dtoa_r+0xc88>
    b022:	e0d4      	b.n	b1ce <_dtoa_r+0xe32>
    b024:	9810      	ldr	r0, [sp, #64]	; 0x40
    b026:	9911      	ldr	r1, [sp, #68]	; 0x44
    b028:	425c      	negs	r4, r3
    b02a:	230f      	movs	r3, #15
    b02c:	4a26      	ldr	r2, [pc, #152]	; (b0c8 <_dtoa_r+0xd2c>)
    b02e:	4023      	ands	r3, r4
    b030:	00db      	lsls	r3, r3, #3
    b032:	18d3      	adds	r3, r2, r3
    b034:	681a      	ldr	r2, [r3, #0]
    b036:	685b      	ldr	r3, [r3, #4]
    b038:	f7fb f928 	bl	628c <__aeabi_dmul>
    b03c:	1124      	asrs	r4, r4, #4
    b03e:	0006      	movs	r6, r0
    b040:	000f      	movs	r7, r1
    b042:	2c00      	cmp	r4, #0
    b044:	d100      	bne.n	b048 <_dtoa_r+0xcac>
    b046:	e149      	b.n	b2dc <_dtoa_r+0xf40>
    b048:	2302      	movs	r3, #2
    b04a:	4698      	mov	r8, r3
    b04c:	4d1f      	ldr	r5, [pc, #124]	; (b0cc <_dtoa_r+0xd30>)
    b04e:	2301      	movs	r3, #1
    b050:	4223      	tst	r3, r4
    b052:	d009      	beq.n	b068 <_dtoa_r+0xccc>
    b054:	469c      	mov	ip, r3
    b056:	682a      	ldr	r2, [r5, #0]
    b058:	686b      	ldr	r3, [r5, #4]
    b05a:	0030      	movs	r0, r6
    b05c:	0039      	movs	r1, r7
    b05e:	44e0      	add	r8, ip
    b060:	f7fb f914 	bl	628c <__aeabi_dmul>
    b064:	0006      	movs	r6, r0
    b066:	000f      	movs	r7, r1
    b068:	1064      	asrs	r4, r4, #1
    b06a:	3508      	adds	r5, #8
    b06c:	2c00      	cmp	r4, #0
    b06e:	d1ee      	bne.n	b04e <_dtoa_r+0xcb2>
    b070:	f7ff fae4 	bl	a63c <_dtoa_r+0x2a0>
    b074:	9b03      	ldr	r3, [sp, #12]
    b076:	2730      	movs	r7, #48	; 0x30
    b078:	3301      	adds	r3, #1
    b07a:	9303      	str	r3, [sp, #12]
    b07c:	2330      	movs	r3, #48	; 0x30
    b07e:	702b      	strb	r3, [r5, #0]
    b080:	e4ac      	b.n	a9dc <_dtoa_r+0x640>
    b082:	6859      	ldr	r1, [r3, #4]
    b084:	4650      	mov	r0, sl
    b086:	f000 fe23 	bl	bcd0 <_Balloc>
    b08a:	4643      	mov	r3, r8
    b08c:	4641      	mov	r1, r8
    b08e:	0004      	movs	r4, r0
    b090:	691b      	ldr	r3, [r3, #16]
    b092:	310c      	adds	r1, #12
    b094:	1c9a      	adds	r2, r3, #2
    b096:	0092      	lsls	r2, r2, #2
    b098:	300c      	adds	r0, #12
    b09a:	f7fc f9e9 	bl	7470 <memcpy>
    b09e:	2201      	movs	r2, #1
    b0a0:	0021      	movs	r1, r4
    b0a2:	4650      	mov	r0, sl
    b0a4:	f001 f832 	bl	c10c <__lshift>
    b0a8:	900c      	str	r0, [sp, #48]	; 0x30
    b0aa:	e599      	b.n	abe0 <_dtoa_r+0x844>
    b0ac:	2300      	movs	r3, #0
    b0ae:	4699      	mov	r9, r3
    b0b0:	4698      	mov	r8, r3
    b0b2:	e70c      	b.n	aece <_dtoa_r+0xb32>
    b0b4:	7ff00000 	.word	0x7ff00000
    b0b8:	40140000 	.word	0x40140000
    b0bc:	00000433 	.word	0x00000433
    b0c0:	401c0000 	.word	0x401c0000
    b0c4:	fcc00000 	.word	0xfcc00000
    b0c8:	000120e0 	.word	0x000120e0
    b0cc:	000120b8 	.word	0x000120b8
    b0d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b0d2:	498f      	ldr	r1, [pc, #572]	; (b310 <_dtoa_r+0xf74>)
    b0d4:	3b01      	subs	r3, #1
    b0d6:	00db      	lsls	r3, r3, #3
    b0d8:	18c9      	adds	r1, r1, r3
    b0da:	6808      	ldr	r0, [r1, #0]
    b0dc:	6849      	ldr	r1, [r1, #4]
    b0de:	9a08      	ldr	r2, [sp, #32]
    b0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b0e2:	f7fb f8d3 	bl	628c <__aeabi_dmul>
    b0e6:	9014      	str	r0, [sp, #80]	; 0x50
    b0e8:	9115      	str	r1, [sp, #84]	; 0x54
    b0ea:	0039      	movs	r1, r7
    b0ec:	0030      	movs	r0, r6
    b0ee:	f7fb fe63 	bl	6db8 <__aeabi_d2iz>
    b0f2:	0005      	movs	r5, r0
    b0f4:	f7fb fe94 	bl	6e20 <__aeabi_i2d>
    b0f8:	0002      	movs	r2, r0
    b0fa:	000b      	movs	r3, r1
    b0fc:	0030      	movs	r0, r6
    b0fe:	0039      	movs	r1, r7
    b100:	f7fb fb44 	bl	678c <__aeabi_dsub>
    b104:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b106:	9008      	str	r0, [sp, #32]
    b108:	9109      	str	r1, [sp, #36]	; 0x24
    b10a:	990a      	ldr	r1, [sp, #40]	; 0x28
    b10c:	001a      	movs	r2, r3
    b10e:	468c      	mov	ip, r1
    b110:	3530      	adds	r5, #48	; 0x30
    b112:	4462      	add	r2, ip
    b114:	1c4c      	adds	r4, r1, #1
    b116:	700d      	strb	r5, [r1, #0]
    b118:	4690      	mov	r8, r2
    b11a:	2b01      	cmp	r3, #1
    b11c:	d01b      	beq.n	b156 <_dtoa_r+0xdba>
    b11e:	9808      	ldr	r0, [sp, #32]
    b120:	9909      	ldr	r1, [sp, #36]	; 0x24
    b122:	0025      	movs	r5, r4
    b124:	2200      	movs	r2, #0
    b126:	4b7b      	ldr	r3, [pc, #492]	; (b314 <_dtoa_r+0xf78>)
    b128:	f7fb f8b0 	bl	628c <__aeabi_dmul>
    b12c:	000f      	movs	r7, r1
    b12e:	0006      	movs	r6, r0
    b130:	f7fb fe42 	bl	6db8 <__aeabi_d2iz>
    b134:	0004      	movs	r4, r0
    b136:	f7fb fe73 	bl	6e20 <__aeabi_i2d>
    b13a:	3430      	adds	r4, #48	; 0x30
    b13c:	0002      	movs	r2, r0
    b13e:	000b      	movs	r3, r1
    b140:	0030      	movs	r0, r6
    b142:	0039      	movs	r1, r7
    b144:	f7fb fb22 	bl	678c <__aeabi_dsub>
    b148:	702c      	strb	r4, [r5, #0]
    b14a:	3501      	adds	r5, #1
    b14c:	45a8      	cmp	r8, r5
    b14e:	d1e9      	bne.n	b124 <_dtoa_r+0xd88>
    b150:	4644      	mov	r4, r8
    b152:	9008      	str	r0, [sp, #32]
    b154:	9109      	str	r1, [sp, #36]	; 0x24
    b156:	9814      	ldr	r0, [sp, #80]	; 0x50
    b158:	9915      	ldr	r1, [sp, #84]	; 0x54
    b15a:	2200      	movs	r2, #0
    b15c:	4b6e      	ldr	r3, [pc, #440]	; (b318 <_dtoa_r+0xf7c>)
    b15e:	f003 fd3f 	bl	ebe0 <__aeabi_dadd>
    b162:	9a08      	ldr	r2, [sp, #32]
    b164:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b166:	f7fb ffc7 	bl	70f8 <__aeabi_dcmplt>
    b16a:	2800      	cmp	r0, #0
    b16c:	d067      	beq.n	b23e <_dtoa_r+0xea2>
    b16e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b170:	1e65      	subs	r5, r4, #1
    b172:	9303      	str	r3, [sp, #12]
    b174:	782f      	ldrb	r7, [r5, #0]
    b176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b178:	e42e      	b.n	a9d8 <_dtoa_r+0x63c>
    b17a:	4643      	mov	r3, r8
    b17c:	46b3      	mov	fp, r6
    b17e:	930c      	str	r3, [sp, #48]	; 0x30
    b180:	9e04      	ldr	r6, [sp, #16]
    b182:	9b06      	ldr	r3, [sp, #24]
    b184:	46a8      	mov	r8, r5
    b186:	4699      	mov	r9, r3
    b188:	4655      	mov	r5, sl
    b18a:	46ba      	mov	sl, r7
    b18c:	2e39      	cmp	r6, #57	; 0x39
    b18e:	d04d      	beq.n	b22c <_dtoa_r+0xe90>
    b190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b192:	3601      	adds	r6, #1
    b194:	4647      	mov	r7, r8
    b196:	1c6c      	adds	r4, r5, #1
    b198:	702e      	strb	r6, [r5, #0]
    b19a:	4698      	mov	r8, r3
    b19c:	e5f5      	b.n	ad8a <_dtoa_r+0x9ee>
    b19e:	4642      	mov	r2, r8
    b1a0:	9b06      	ldr	r3, [sp, #24]
    b1a2:	46b3      	mov	fp, r6
    b1a4:	46ba      	mov	sl, r7
    b1a6:	9e04      	ldr	r6, [sp, #16]
    b1a8:	4699      	mov	r9, r3
    b1aa:	002f      	movs	r7, r5
    b1ac:	4690      	mov	r8, r2
    b1ae:	e5d1      	b.n	ad54 <_dtoa_r+0x9b8>
    b1b0:	9b06      	ldr	r3, [sp, #24]
    b1b2:	9a07      	ldr	r2, [sp, #28]
    b1b4:	1a9b      	subs	r3, r3, r2
    b1b6:	9308      	str	r3, [sp, #32]
    b1b8:	2300      	movs	r3, #0
    b1ba:	e427      	b.n	aa0c <_dtoa_r+0x670>
    b1bc:	2401      	movs	r4, #1
    b1be:	e5c5      	b.n	ad4c <_dtoa_r+0x9b0>
    b1c0:	2336      	movs	r3, #54	; 0x36
    b1c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b1c4:	464c      	mov	r4, r9
    b1c6:	1a9b      	subs	r3, r3, r2
    b1c8:	9a06      	ldr	r2, [sp, #24]
    b1ca:	9208      	str	r2, [sp, #32]
    b1cc:	e41e      	b.n	aa0c <_dtoa_r+0x670>
    b1ce:	2302      	movs	r3, #2
    b1d0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    b1d2:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b1d4:	4698      	mov	r8, r3
    b1d6:	f7ff fa31 	bl	a63c <_dtoa_r+0x2a0>
    b1da:	9b07      	ldr	r3, [sp, #28]
    b1dc:	2b00      	cmp	r3, #0
    b1de:	d100      	bne.n	b1e2 <_dtoa_r+0xe46>
    b1e0:	e68e      	b.n	af00 <_dtoa_r+0xb64>
    b1e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    b1e4:	2c00      	cmp	r4, #0
    b1e6:	dc00      	bgt.n	b1ea <_dtoa_r+0xe4e>
    b1e8:	e712      	b.n	b010 <_dtoa_r+0xc74>
    b1ea:	9b03      	ldr	r3, [sp, #12]
    b1ec:	2200      	movs	r2, #0
    b1ee:	3b01      	subs	r3, #1
    b1f0:	9313      	str	r3, [sp, #76]	; 0x4c
    b1f2:	0030      	movs	r0, r6
    b1f4:	4b47      	ldr	r3, [pc, #284]	; (b314 <_dtoa_r+0xf78>)
    b1f6:	0039      	movs	r1, r7
    b1f8:	f7fb f848 	bl	628c <__aeabi_dmul>
    b1fc:	0006      	movs	r6, r0
    b1fe:	4640      	mov	r0, r8
    b200:	000f      	movs	r7, r1
    b202:	3001      	adds	r0, #1
    b204:	f7fb fe0c 	bl	6e20 <__aeabi_i2d>
    b208:	0032      	movs	r2, r6
    b20a:	003b      	movs	r3, r7
    b20c:	f7fb f83e 	bl	628c <__aeabi_dmul>
    b210:	2200      	movs	r2, #0
    b212:	4b42      	ldr	r3, [pc, #264]	; (b31c <_dtoa_r+0xf80>)
    b214:	f003 fce4 	bl	ebe0 <__aeabi_dadd>
    b218:	4a41      	ldr	r2, [pc, #260]	; (b320 <_dtoa_r+0xf84>)
    b21a:	000b      	movs	r3, r1
    b21c:	4694      	mov	ip, r2
    b21e:	4463      	add	r3, ip
    b220:	9008      	str	r0, [sp, #32]
    b222:	9109      	str	r1, [sp, #36]	; 0x24
    b224:	9412      	str	r4, [sp, #72]	; 0x48
    b226:	9309      	str	r3, [sp, #36]	; 0x24
    b228:	f7ff fa30 	bl	a68c <_dtoa_r+0x2f0>
    b22c:	2339      	movs	r3, #57	; 0x39
    b22e:	702b      	strb	r3, [r5, #0]
    b230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b232:	4647      	mov	r7, r8
    b234:	1c6c      	adds	r4, r5, #1
    b236:	4698      	mov	r8, r3
    b238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b23a:	2339      	movs	r3, #57	; 0x39
    b23c:	e5a1      	b.n	ad82 <_dtoa_r+0x9e6>
    b23e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b240:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b242:	2000      	movs	r0, #0
    b244:	4934      	ldr	r1, [pc, #208]	; (b318 <_dtoa_r+0xf7c>)
    b246:	f7fb faa1 	bl	678c <__aeabi_dsub>
    b24a:	9a08      	ldr	r2, [sp, #32]
    b24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b24e:	f7fb ff67 	bl	7120 <__aeabi_dcmpgt>
    b252:	2800      	cmp	r0, #0
    b254:	d101      	bne.n	b25a <_dtoa_r+0xebe>
    b256:	e6db      	b.n	b010 <_dtoa_r+0xc74>
    b258:	001c      	movs	r4, r3
    b25a:	1e63      	subs	r3, r4, #1
    b25c:	781a      	ldrb	r2, [r3, #0]
    b25e:	2a30      	cmp	r2, #48	; 0x30
    b260:	d0fa      	beq.n	b258 <_dtoa_r+0xebc>
    b262:	f7ff fac8 	bl	a7f6 <_dtoa_r+0x45a>
    b266:	4643      	mov	r3, r8
    b268:	46b3      	mov	fp, r6
    b26a:	930c      	str	r3, [sp, #48]	; 0x30
    b26c:	9e04      	ldr	r6, [sp, #16]
    b26e:	9b06      	ldr	r3, [sp, #24]
    b270:	46a8      	mov	r8, r5
    b272:	4699      	mov	r9, r3
    b274:	4655      	mov	r5, sl
    b276:	46ba      	mov	sl, r7
    b278:	2e39      	cmp	r6, #57	; 0x39
    b27a:	d0d7      	beq.n	b22c <_dtoa_r+0xe90>
    b27c:	2c00      	cmp	r4, #0
    b27e:	dd00      	ble.n	b282 <_dtoa_r+0xee6>
    b280:	e6b1      	b.n	afe6 <_dtoa_r+0xc4a>
    b282:	e6b2      	b.n	afea <_dtoa_r+0xc4e>
    b284:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b286:	464d      	mov	r5, r9
    b288:	9203      	str	r2, [sp, #12]
    b28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b28c:	f7ff fba4 	bl	a9d8 <_dtoa_r+0x63c>
    b290:	2800      	cmp	r0, #0
    b292:	d000      	beq.n	b296 <_dtoa_r+0xefa>
    b294:	e6a9      	b.n	afea <_dtoa_r+0xc4e>
    b296:	07f3      	lsls	r3, r6, #31
    b298:	d400      	bmi.n	b29c <_dtoa_r+0xf00>
    b29a:	e6a6      	b.n	afea <_dtoa_r+0xc4e>
    b29c:	e6a0      	b.n	afe0 <_dtoa_r+0xc44>
    b29e:	2300      	movs	r3, #0
    b2a0:	4641      	mov	r1, r8
    b2a2:	220a      	movs	r2, #10
    b2a4:	4650      	mov	r0, sl
    b2a6:	f000 fd45 	bl	bd34 <__multadd>
    b2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2ac:	4680      	mov	r8, r0
    b2ae:	2b00      	cmp	r3, #0
    b2b0:	dd01      	ble.n	b2b6 <_dtoa_r+0xf1a>
    b2b2:	9307      	str	r3, [sp, #28]
    b2b4:	e486      	b.n	abc4 <_dtoa_r+0x828>
    b2b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b2b8:	2b02      	cmp	r3, #2
    b2ba:	dc1f      	bgt.n	b2fc <_dtoa_r+0xf60>
    b2bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2be:	9307      	str	r3, [sp, #28]
    b2c0:	e480      	b.n	abc4 <_dtoa_r+0x828>
    b2c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b2c4:	2b02      	cmp	r3, #2
    b2c6:	dc19      	bgt.n	b2fc <_dtoa_r+0xf60>
    b2c8:	4649      	mov	r1, r9
    b2ca:	f7fe ffbd 	bl	a248 <quorem>
    b2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b2d0:	3030      	adds	r0, #48	; 0x30
    b2d2:	7018      	strb	r0, [r3, #0]
    b2d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2d6:	0006      	movs	r6, r0
    b2d8:	9307      	str	r3, [sp, #28]
    b2da:	e533      	b.n	ad44 <_dtoa_r+0x9a8>
    b2dc:	2302      	movs	r3, #2
    b2de:	4698      	mov	r8, r3
    b2e0:	f7ff f9ac 	bl	a63c <_dtoa_r+0x2a0>
    b2e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b2e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
    b2e8:	9303      	str	r3, [sp, #12]
    b2ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b2ec:	001d      	movs	r5, r3
    b2ee:	f7ff fb73 	bl	a9d8 <_dtoa_r+0x63c>
    b2f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b2f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
    b2f6:	9303      	str	r3, [sp, #12]
    b2f8:	f7ff fa7f 	bl	a7fa <_dtoa_r+0x45e>
    b2fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b2fe:	9307      	str	r3, [sp, #28]
    b300:	e5d6      	b.n	aeb0 <_dtoa_r+0xb14>
    b302:	2b04      	cmp	r3, #4
    b304:	d100      	bne.n	b308 <_dtoa_r+0xf6c>
    b306:	e43f      	b.n	ab88 <_dtoa_r+0x7ec>
    b308:	233c      	movs	r3, #60	; 0x3c
    b30a:	1a18      	subs	r0, r3, r0
    b30c:	e4d7      	b.n	acbe <_dtoa_r+0x922>
    b30e:	46c0      	nop			; (mov r8, r8)
    b310:	000120e0 	.word	0x000120e0
    b314:	40240000 	.word	0x40240000
    b318:	3fe00000 	.word	0x3fe00000
    b31c:	401c0000 	.word	0x401c0000
    b320:	fcc00000 	.word	0xfcc00000

0000b324 <__libc_fini_array>:
    b324:	b570      	push	{r4, r5, r6, lr}
    b326:	4b09      	ldr	r3, [pc, #36]	; (b34c <__libc_fini_array+0x28>)
    b328:	4c09      	ldr	r4, [pc, #36]	; (b350 <__libc_fini_array+0x2c>)
    b32a:	1ae4      	subs	r4, r4, r3
    b32c:	10a4      	asrs	r4, r4, #2
    b32e:	d009      	beq.n	b344 <__libc_fini_array+0x20>
    b330:	4a08      	ldr	r2, [pc, #32]	; (b354 <__libc_fini_array+0x30>)
    b332:	18a5      	adds	r5, r4, r2
    b334:	00ad      	lsls	r5, r5, #2
    b336:	18ed      	adds	r5, r5, r3
    b338:	682b      	ldr	r3, [r5, #0]
    b33a:	3c01      	subs	r4, #1
    b33c:	4798      	blx	r3
    b33e:	3d04      	subs	r5, #4
    b340:	2c00      	cmp	r4, #0
    b342:	d1f9      	bne.n	b338 <__libc_fini_array+0x14>
    b344:	f007 f8dc 	bl	12500 <_fini>
    b348:	bd70      	pop	{r4, r5, r6, pc}
    b34a:	46c0      	nop			; (mov r8, r8)
    b34c:	0001250c 	.word	0x0001250c
    b350:	00012510 	.word	0x00012510
    b354:	3fffffff 	.word	0x3fffffff

0000b358 <_malloc_trim_r>:
    b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b35a:	000c      	movs	r4, r1
    b35c:	0006      	movs	r6, r0
    b35e:	f000 fca7 	bl	bcb0 <__malloc_lock>
    b362:	4f20      	ldr	r7, [pc, #128]	; (b3e4 <_malloc_trim_r+0x8c>)
    b364:	68bb      	ldr	r3, [r7, #8]
    b366:	685d      	ldr	r5, [r3, #4]
    b368:	2303      	movs	r3, #3
    b36a:	439d      	bics	r5, r3
    b36c:	4b1e      	ldr	r3, [pc, #120]	; (b3e8 <_malloc_trim_r+0x90>)
    b36e:	1b2c      	subs	r4, r5, r4
    b370:	469c      	mov	ip, r3
    b372:	4464      	add	r4, ip
    b374:	0b24      	lsrs	r4, r4, #12
    b376:	4b1d      	ldr	r3, [pc, #116]	; (b3ec <_malloc_trim_r+0x94>)
    b378:	3c01      	subs	r4, #1
    b37a:	0324      	lsls	r4, r4, #12
    b37c:	429c      	cmp	r4, r3
    b37e:	dd07      	ble.n	b390 <_malloc_trim_r+0x38>
    b380:	2100      	movs	r1, #0
    b382:	0030      	movs	r0, r6
    b384:	f001 f952 	bl	c62c <_sbrk_r>
    b388:	68bb      	ldr	r3, [r7, #8]
    b38a:	195b      	adds	r3, r3, r5
    b38c:	4298      	cmp	r0, r3
    b38e:	d004      	beq.n	b39a <_malloc_trim_r+0x42>
    b390:	0030      	movs	r0, r6
    b392:	f000 fc95 	bl	bcc0 <__malloc_unlock>
    b396:	2000      	movs	r0, #0
    b398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b39a:	4261      	negs	r1, r4
    b39c:	0030      	movs	r0, r6
    b39e:	f001 f945 	bl	c62c <_sbrk_r>
    b3a2:	1c43      	adds	r3, r0, #1
    b3a4:	d00d      	beq.n	b3c2 <_malloc_trim_r+0x6a>
    b3a6:	2201      	movs	r2, #1
    b3a8:	68bb      	ldr	r3, [r7, #8]
    b3aa:	1b2d      	subs	r5, r5, r4
    b3ac:	4315      	orrs	r5, r2
    b3ae:	605d      	str	r5, [r3, #4]
    b3b0:	4b0f      	ldr	r3, [pc, #60]	; (b3f0 <_malloc_trim_r+0x98>)
    b3b2:	0030      	movs	r0, r6
    b3b4:	681a      	ldr	r2, [r3, #0]
    b3b6:	1b14      	subs	r4, r2, r4
    b3b8:	601c      	str	r4, [r3, #0]
    b3ba:	f000 fc81 	bl	bcc0 <__malloc_unlock>
    b3be:	2001      	movs	r0, #1
    b3c0:	e7ea      	b.n	b398 <_malloc_trim_r+0x40>
    b3c2:	2100      	movs	r1, #0
    b3c4:	0030      	movs	r0, r6
    b3c6:	f001 f931 	bl	c62c <_sbrk_r>
    b3ca:	68ba      	ldr	r2, [r7, #8]
    b3cc:	1a83      	subs	r3, r0, r2
    b3ce:	2b0f      	cmp	r3, #15
    b3d0:	ddde      	ble.n	b390 <_malloc_trim_r+0x38>
    b3d2:	4908      	ldr	r1, [pc, #32]	; (b3f4 <_malloc_trim_r+0x9c>)
    b3d4:	6809      	ldr	r1, [r1, #0]
    b3d6:	1a40      	subs	r0, r0, r1
    b3d8:	4905      	ldr	r1, [pc, #20]	; (b3f0 <_malloc_trim_r+0x98>)
    b3da:	6008      	str	r0, [r1, #0]
    b3dc:	2101      	movs	r1, #1
    b3de:	430b      	orrs	r3, r1
    b3e0:	6053      	str	r3, [r2, #4]
    b3e2:	e7d5      	b.n	b390 <_malloc_trim_r+0x38>
    b3e4:	20000640 	.word	0x20000640
    b3e8:	00000fef 	.word	0x00000fef
    b3ec:	00000fff 	.word	0x00000fff
    b3f0:	20000ae8 	.word	0x20000ae8
    b3f4:	20000a48 	.word	0x20000a48

0000b3f8 <_free_r>:
    b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b3fa:	0004      	movs	r4, r0
    b3fc:	1e0d      	subs	r5, r1, #0
    b3fe:	d03c      	beq.n	b47a <_free_r+0x82>
    b400:	f000 fc56 	bl	bcb0 <__malloc_lock>
    b404:	0029      	movs	r1, r5
    b406:	3908      	subs	r1, #8
    b408:	6848      	ldr	r0, [r1, #4]
    b40a:	2301      	movs	r3, #1
    b40c:	0005      	movs	r5, r0
    b40e:	2603      	movs	r6, #3
    b410:	439d      	bics	r5, r3
    b412:	194a      	adds	r2, r1, r5
    b414:	469c      	mov	ip, r3
    b416:	4f61      	ldr	r7, [pc, #388]	; (b59c <_free_r+0x1a4>)
    b418:	6853      	ldr	r3, [r2, #4]
    b41a:	43b3      	bics	r3, r6
    b41c:	68be      	ldr	r6, [r7, #8]
    b41e:	42b2      	cmp	r2, r6
    b420:	d056      	beq.n	b4d0 <_free_r+0xd8>
    b422:	4666      	mov	r6, ip
    b424:	6053      	str	r3, [r2, #4]
    b426:	4206      	tst	r6, r0
    b428:	d10a      	bne.n	b440 <_free_r+0x48>
    b42a:	003e      	movs	r6, r7
    b42c:	6808      	ldr	r0, [r1, #0]
    b42e:	3608      	adds	r6, #8
    b430:	1a09      	subs	r1, r1, r0
    b432:	182d      	adds	r5, r5, r0
    b434:	6888      	ldr	r0, [r1, #8]
    b436:	42b0      	cmp	r0, r6
    b438:	d065      	beq.n	b506 <_free_r+0x10e>
    b43a:	68ce      	ldr	r6, [r1, #12]
    b43c:	60c6      	str	r6, [r0, #12]
    b43e:	60b0      	str	r0, [r6, #8]
    b440:	2001      	movs	r0, #1
    b442:	18d6      	adds	r6, r2, r3
    b444:	6876      	ldr	r6, [r6, #4]
    b446:	4206      	tst	r6, r0
    b448:	d033      	beq.n	b4b2 <_free_r+0xba>
    b44a:	4b55      	ldr	r3, [pc, #340]	; (b5a0 <_free_r+0x1a8>)
    b44c:	4328      	orrs	r0, r5
    b44e:	6048      	str	r0, [r1, #4]
    b450:	514d      	str	r5, [r1, r5]
    b452:	429d      	cmp	r5, r3
    b454:	d812      	bhi.n	b47c <_free_r+0x84>
    b456:	08ed      	lsrs	r5, r5, #3
    b458:	3bff      	subs	r3, #255	; 0xff
    b45a:	10aa      	asrs	r2, r5, #2
    b45c:	3bff      	subs	r3, #255	; 0xff
    b45e:	4093      	lsls	r3, r2
    b460:	687a      	ldr	r2, [r7, #4]
    b462:	00ed      	lsls	r5, r5, #3
    b464:	4313      	orrs	r3, r2
    b466:	607b      	str	r3, [r7, #4]
    b468:	19ef      	adds	r7, r5, r7
    b46a:	68bb      	ldr	r3, [r7, #8]
    b46c:	60cf      	str	r7, [r1, #12]
    b46e:	608b      	str	r3, [r1, #8]
    b470:	60b9      	str	r1, [r7, #8]
    b472:	60d9      	str	r1, [r3, #12]
    b474:	0020      	movs	r0, r4
    b476:	f000 fc23 	bl	bcc0 <__malloc_unlock>
    b47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b47c:	0a68      	lsrs	r0, r5, #9
    b47e:	2804      	cmp	r0, #4
    b480:	d850      	bhi.n	b524 <_free_r+0x12c>
    b482:	09a8      	lsrs	r0, r5, #6
    b484:	0002      	movs	r2, r0
    b486:	3039      	adds	r0, #57	; 0x39
    b488:	3238      	adds	r2, #56	; 0x38
    b48a:	00c0      	lsls	r0, r0, #3
    b48c:	1838      	adds	r0, r7, r0
    b48e:	3808      	subs	r0, #8
    b490:	6883      	ldr	r3, [r0, #8]
    b492:	2603      	movs	r6, #3
    b494:	4298      	cmp	r0, r3
    b496:	d04c      	beq.n	b532 <_free_r+0x13a>
    b498:	685a      	ldr	r2, [r3, #4]
    b49a:	43b2      	bics	r2, r6
    b49c:	4295      	cmp	r5, r2
    b49e:	d230      	bcs.n	b502 <_free_r+0x10a>
    b4a0:	689b      	ldr	r3, [r3, #8]
    b4a2:	4298      	cmp	r0, r3
    b4a4:	d1f8      	bne.n	b498 <_free_r+0xa0>
    b4a6:	68c3      	ldr	r3, [r0, #12]
    b4a8:	60cb      	str	r3, [r1, #12]
    b4aa:	6088      	str	r0, [r1, #8]
    b4ac:	6099      	str	r1, [r3, #8]
    b4ae:	60c1      	str	r1, [r0, #12]
    b4b0:	e7e0      	b.n	b474 <_free_r+0x7c>
    b4b2:	18ed      	adds	r5, r5, r3
    b4b4:	4e3b      	ldr	r6, [pc, #236]	; (b5a4 <_free_r+0x1ac>)
    b4b6:	6893      	ldr	r3, [r2, #8]
    b4b8:	42b3      	cmp	r3, r6
    b4ba:	d042      	beq.n	b542 <_free_r+0x14a>
    b4bc:	68d2      	ldr	r2, [r2, #12]
    b4be:	4328      	orrs	r0, r5
    b4c0:	60da      	str	r2, [r3, #12]
    b4c2:	6093      	str	r3, [r2, #8]
    b4c4:	4b36      	ldr	r3, [pc, #216]	; (b5a0 <_free_r+0x1a8>)
    b4c6:	6048      	str	r0, [r1, #4]
    b4c8:	514d      	str	r5, [r1, r5]
    b4ca:	429d      	cmp	r5, r3
    b4cc:	d8d6      	bhi.n	b47c <_free_r+0x84>
    b4ce:	e7c2      	b.n	b456 <_free_r+0x5e>
    b4d0:	4662      	mov	r2, ip
    b4d2:	18eb      	adds	r3, r5, r3
    b4d4:	4202      	tst	r2, r0
    b4d6:	d106      	bne.n	b4e6 <_free_r+0xee>
    b4d8:	680a      	ldr	r2, [r1, #0]
    b4da:	1a89      	subs	r1, r1, r2
    b4dc:	6888      	ldr	r0, [r1, #8]
    b4de:	189b      	adds	r3, r3, r2
    b4e0:	68ca      	ldr	r2, [r1, #12]
    b4e2:	60c2      	str	r2, [r0, #12]
    b4e4:	6090      	str	r0, [r2, #8]
    b4e6:	2201      	movs	r2, #1
    b4e8:	431a      	orrs	r2, r3
    b4ea:	604a      	str	r2, [r1, #4]
    b4ec:	4a2e      	ldr	r2, [pc, #184]	; (b5a8 <_free_r+0x1b0>)
    b4ee:	60b9      	str	r1, [r7, #8]
    b4f0:	6812      	ldr	r2, [r2, #0]
    b4f2:	4293      	cmp	r3, r2
    b4f4:	d3be      	bcc.n	b474 <_free_r+0x7c>
    b4f6:	4b2d      	ldr	r3, [pc, #180]	; (b5ac <_free_r+0x1b4>)
    b4f8:	0020      	movs	r0, r4
    b4fa:	6819      	ldr	r1, [r3, #0]
    b4fc:	f7ff ff2c 	bl	b358 <_malloc_trim_r>
    b500:	e7b8      	b.n	b474 <_free_r+0x7c>
    b502:	0018      	movs	r0, r3
    b504:	e7cf      	b.n	b4a6 <_free_r+0xae>
    b506:	4666      	mov	r6, ip
    b508:	18d0      	adds	r0, r2, r3
    b50a:	6840      	ldr	r0, [r0, #4]
    b50c:	4230      	tst	r0, r6
    b50e:	d13f      	bne.n	b590 <_free_r+0x198>
    b510:	6890      	ldr	r0, [r2, #8]
    b512:	195d      	adds	r5, r3, r5
    b514:	68d3      	ldr	r3, [r2, #12]
    b516:	60c3      	str	r3, [r0, #12]
    b518:	6098      	str	r0, [r3, #8]
    b51a:	4663      	mov	r3, ip
    b51c:	432b      	orrs	r3, r5
    b51e:	604b      	str	r3, [r1, #4]
    b520:	514d      	str	r5, [r1, r5]
    b522:	e7a7      	b.n	b474 <_free_r+0x7c>
    b524:	2814      	cmp	r0, #20
    b526:	d814      	bhi.n	b552 <_free_r+0x15a>
    b528:	0002      	movs	r2, r0
    b52a:	305c      	adds	r0, #92	; 0x5c
    b52c:	325b      	adds	r2, #91	; 0x5b
    b52e:	00c0      	lsls	r0, r0, #3
    b530:	e7ac      	b.n	b48c <_free_r+0x94>
    b532:	2301      	movs	r3, #1
    b534:	1092      	asrs	r2, r2, #2
    b536:	4093      	lsls	r3, r2
    b538:	687a      	ldr	r2, [r7, #4]
    b53a:	4313      	orrs	r3, r2
    b53c:	607b      	str	r3, [r7, #4]
    b53e:	0003      	movs	r3, r0
    b540:	e7b2      	b.n	b4a8 <_free_r+0xb0>
    b542:	4328      	orrs	r0, r5
    b544:	60d9      	str	r1, [r3, #12]
    b546:	6099      	str	r1, [r3, #8]
    b548:	60cb      	str	r3, [r1, #12]
    b54a:	608b      	str	r3, [r1, #8]
    b54c:	6048      	str	r0, [r1, #4]
    b54e:	514d      	str	r5, [r1, r5]
    b550:	e790      	b.n	b474 <_free_r+0x7c>
    b552:	2854      	cmp	r0, #84	; 0x54
    b554:	d805      	bhi.n	b562 <_free_r+0x16a>
    b556:	0b28      	lsrs	r0, r5, #12
    b558:	0002      	movs	r2, r0
    b55a:	306f      	adds	r0, #111	; 0x6f
    b55c:	326e      	adds	r2, #110	; 0x6e
    b55e:	00c0      	lsls	r0, r0, #3
    b560:	e794      	b.n	b48c <_free_r+0x94>
    b562:	22aa      	movs	r2, #170	; 0xaa
    b564:	0052      	lsls	r2, r2, #1
    b566:	4290      	cmp	r0, r2
    b568:	d805      	bhi.n	b576 <_free_r+0x17e>
    b56a:	0be8      	lsrs	r0, r5, #15
    b56c:	0002      	movs	r2, r0
    b56e:	3078      	adds	r0, #120	; 0x78
    b570:	3277      	adds	r2, #119	; 0x77
    b572:	00c0      	lsls	r0, r0, #3
    b574:	e78a      	b.n	b48c <_free_r+0x94>
    b576:	4a0e      	ldr	r2, [pc, #56]	; (b5b0 <_free_r+0x1b8>)
    b578:	4290      	cmp	r0, r2
    b57a:	d805      	bhi.n	b588 <_free_r+0x190>
    b57c:	0ca8      	lsrs	r0, r5, #18
    b57e:	0002      	movs	r2, r0
    b580:	307d      	adds	r0, #125	; 0x7d
    b582:	327c      	adds	r2, #124	; 0x7c
    b584:	00c0      	lsls	r0, r0, #3
    b586:	e781      	b.n	b48c <_free_r+0x94>
    b588:	20fe      	movs	r0, #254	; 0xfe
    b58a:	227e      	movs	r2, #126	; 0x7e
    b58c:	0080      	lsls	r0, r0, #2
    b58e:	e77d      	b.n	b48c <_free_r+0x94>
    b590:	4663      	mov	r3, ip
    b592:	432b      	orrs	r3, r5
    b594:	604b      	str	r3, [r1, #4]
    b596:	6015      	str	r5, [r2, #0]
    b598:	e76c      	b.n	b474 <_free_r+0x7c>
    b59a:	46c0      	nop			; (mov r8, r8)
    b59c:	20000640 	.word	0x20000640
    b5a0:	000001ff 	.word	0x000001ff
    b5a4:	20000648 	.word	0x20000648
    b5a8:	20000a4c 	.word	0x20000a4c
    b5ac:	20000b18 	.word	0x20000b18
    b5b0:	00000554 	.word	0x00000554

0000b5b4 <iswspace>:
    b5b4:	b510      	push	{r4, lr}
    b5b6:	0004      	movs	r4, r0
    b5b8:	2000      	movs	r0, #0
    b5ba:	2cff      	cmp	r4, #255	; 0xff
    b5bc:	d805      	bhi.n	b5ca <iswspace+0x16>
    b5be:	f000 f819 	bl	b5f4 <__locale_ctype_ptr>
    b5c2:	1904      	adds	r4, r0, r4
    b5c4:	2008      	movs	r0, #8
    b5c6:	7863      	ldrb	r3, [r4, #1]
    b5c8:	4018      	ands	r0, r3
    b5ca:	bd10      	pop	{r4, pc}

0000b5cc <__locale_mb_cur_max>:
    b5cc:	4b05      	ldr	r3, [pc, #20]	; (b5e4 <__locale_mb_cur_max+0x18>)
    b5ce:	681b      	ldr	r3, [r3, #0]
    b5d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d003      	beq.n	b5de <__locale_mb_cur_max+0x12>
    b5d6:	2294      	movs	r2, #148	; 0x94
    b5d8:	0052      	lsls	r2, r2, #1
    b5da:	5c98      	ldrb	r0, [r3, r2]
    b5dc:	4770      	bx	lr
    b5de:	4b02      	ldr	r3, [pc, #8]	; (b5e8 <__locale_mb_cur_max+0x1c>)
    b5e0:	e7f9      	b.n	b5d6 <__locale_mb_cur_max+0xa>
    b5e2:	46c0      	nop			; (mov r8, r8)
    b5e4:	200000a0 	.word	0x200000a0
    b5e8:	200004d4 	.word	0x200004d4

0000b5ec <__locale_ctype_ptr_l>:
    b5ec:	23ec      	movs	r3, #236	; 0xec
    b5ee:	58c0      	ldr	r0, [r0, r3]
    b5f0:	4770      	bx	lr
    b5f2:	46c0      	nop			; (mov r8, r8)

0000b5f4 <__locale_ctype_ptr>:
    b5f4:	4b04      	ldr	r3, [pc, #16]	; (b608 <__locale_ctype_ptr+0x14>)
    b5f6:	681b      	ldr	r3, [r3, #0]
    b5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b5fa:	2b00      	cmp	r3, #0
    b5fc:	d002      	beq.n	b604 <__locale_ctype_ptr+0x10>
    b5fe:	22ec      	movs	r2, #236	; 0xec
    b600:	5898      	ldr	r0, [r3, r2]
    b602:	4770      	bx	lr
    b604:	4b01      	ldr	r3, [pc, #4]	; (b60c <__locale_ctype_ptr+0x18>)
    b606:	e7fa      	b.n	b5fe <__locale_ctype_ptr+0xa>
    b608:	200000a0 	.word	0x200000a0
    b60c:	200004d4 	.word	0x200004d4

0000b610 <__localeconv_l>:
    b610:	30f0      	adds	r0, #240	; 0xf0
    b612:	4770      	bx	lr

0000b614 <_localeconv_r>:
    b614:	4b04      	ldr	r3, [pc, #16]	; (b628 <_localeconv_r+0x14>)
    b616:	681b      	ldr	r3, [r3, #0]
    b618:	6b58      	ldr	r0, [r3, #52]	; 0x34
    b61a:	2800      	cmp	r0, #0
    b61c:	d001      	beq.n	b622 <_localeconv_r+0xe>
    b61e:	30f0      	adds	r0, #240	; 0xf0
    b620:	4770      	bx	lr
    b622:	4802      	ldr	r0, [pc, #8]	; (b62c <_localeconv_r+0x18>)
    b624:	e7fb      	b.n	b61e <_localeconv_r+0xa>
    b626:	46c0      	nop			; (mov r8, r8)
    b628:	200000a0 	.word	0x200000a0
    b62c:	200004d4 	.word	0x200004d4

0000b630 <__retarget_lock_acquire_recursive>:
    b630:	4770      	bx	lr
    b632:	46c0      	nop			; (mov r8, r8)

0000b634 <__retarget_lock_release_recursive>:
    b634:	4770      	bx	lr
    b636:	46c0      	nop			; (mov r8, r8)

0000b638 <_malloc_r>:
    b638:	b5f0      	push	{r4, r5, r6, r7, lr}
    b63a:	4657      	mov	r7, sl
    b63c:	4645      	mov	r5, r8
    b63e:	46de      	mov	lr, fp
    b640:	464e      	mov	r6, r9
    b642:	b5e0      	push	{r5, r6, r7, lr}
    b644:	000d      	movs	r5, r1
    b646:	350b      	adds	r5, #11
    b648:	b083      	sub	sp, #12
    b64a:	0007      	movs	r7, r0
    b64c:	2d16      	cmp	r5, #22
    b64e:	d800      	bhi.n	b652 <_malloc_r+0x1a>
    b650:	e09f      	b.n	b792 <_malloc_r+0x15a>
    b652:	2307      	movs	r3, #7
    b654:	439d      	bics	r5, r3
    b656:	d500      	bpl.n	b65a <_malloc_r+0x22>
    b658:	e0c4      	b.n	b7e4 <_malloc_r+0x1ac>
    b65a:	42a9      	cmp	r1, r5
    b65c:	d900      	bls.n	b660 <_malloc_r+0x28>
    b65e:	e0c1      	b.n	b7e4 <_malloc_r+0x1ac>
    b660:	f000 fb26 	bl	bcb0 <__malloc_lock>
    b664:	23f8      	movs	r3, #248	; 0xf8
    b666:	33ff      	adds	r3, #255	; 0xff
    b668:	429d      	cmp	r5, r3
    b66a:	d800      	bhi.n	b66e <_malloc_r+0x36>
    b66c:	e28f      	b.n	bb8e <_malloc_r+0x556>
    b66e:	0a68      	lsrs	r0, r5, #9
    b670:	d100      	bne.n	b674 <_malloc_r+0x3c>
    b672:	e0bb      	b.n	b7ec <_malloc_r+0x1b4>
    b674:	2804      	cmp	r0, #4
    b676:	d900      	bls.n	b67a <_malloc_r+0x42>
    b678:	e162      	b.n	b940 <_malloc_r+0x308>
    b67a:	2338      	movs	r3, #56	; 0x38
    b67c:	4698      	mov	r8, r3
    b67e:	09a8      	lsrs	r0, r5, #6
    b680:	4480      	add	r8, r0
    b682:	3039      	adds	r0, #57	; 0x39
    b684:	00c1      	lsls	r1, r0, #3
    b686:	4ed2      	ldr	r6, [pc, #840]	; (b9d0 <_malloc_r+0x398>)
    b688:	1871      	adds	r1, r6, r1
    b68a:	3908      	subs	r1, #8
    b68c:	68cc      	ldr	r4, [r1, #12]
    b68e:	42a1      	cmp	r1, r4
    b690:	d019      	beq.n	b6c6 <_malloc_r+0x8e>
    b692:	2303      	movs	r3, #3
    b694:	6862      	ldr	r2, [r4, #4]
    b696:	439a      	bics	r2, r3
    b698:	0013      	movs	r3, r2
    b69a:	1b52      	subs	r2, r2, r5
    b69c:	2a0f      	cmp	r2, #15
    b69e:	dd00      	ble.n	b6a2 <_malloc_r+0x6a>
    b6a0:	e0aa      	b.n	b7f8 <_malloc_r+0x1c0>
    b6a2:	2a00      	cmp	r2, #0
    b6a4:	db00      	blt.n	b6a8 <_malloc_r+0x70>
    b6a6:	e088      	b.n	b7ba <_malloc_r+0x182>
    b6a8:	2303      	movs	r3, #3
    b6aa:	469c      	mov	ip, r3
    b6ac:	e008      	b.n	b6c0 <_malloc_r+0x88>
    b6ae:	4662      	mov	r2, ip
    b6b0:	6863      	ldr	r3, [r4, #4]
    b6b2:	4393      	bics	r3, r2
    b6b4:	1b5a      	subs	r2, r3, r5
    b6b6:	2a0f      	cmp	r2, #15
    b6b8:	dd00      	ble.n	b6bc <_malloc_r+0x84>
    b6ba:	e09d      	b.n	b7f8 <_malloc_r+0x1c0>
    b6bc:	2a00      	cmp	r2, #0
    b6be:	da7c      	bge.n	b7ba <_malloc_r+0x182>
    b6c0:	68e4      	ldr	r4, [r4, #12]
    b6c2:	42a1      	cmp	r1, r4
    b6c4:	d1f3      	bne.n	b6ae <_malloc_r+0x76>
    b6c6:	0032      	movs	r2, r6
    b6c8:	6934      	ldr	r4, [r6, #16]
    b6ca:	3208      	adds	r2, #8
    b6cc:	4294      	cmp	r4, r2
    b6ce:	d100      	bne.n	b6d2 <_malloc_r+0x9a>
    b6d0:	e190      	b.n	b9f4 <_malloc_r+0x3bc>
    b6d2:	2303      	movs	r3, #3
    b6d4:	6861      	ldr	r1, [r4, #4]
    b6d6:	4399      	bics	r1, r3
    b6d8:	4689      	mov	r9, r1
    b6da:	1b49      	subs	r1, r1, r5
    b6dc:	290f      	cmp	r1, #15
    b6de:	dd00      	ble.n	b6e2 <_malloc_r+0xaa>
    b6e0:	e162      	b.n	b9a8 <_malloc_r+0x370>
    b6e2:	6172      	str	r2, [r6, #20]
    b6e4:	6132      	str	r2, [r6, #16]
    b6e6:	2900      	cmp	r1, #0
    b6e8:	db00      	blt.n	b6ec <_malloc_r+0xb4>
    b6ea:	e087      	b.n	b7fc <_malloc_r+0x1c4>
    b6ec:	4ab9      	ldr	r2, [pc, #740]	; (b9d4 <_malloc_r+0x39c>)
    b6ee:	464b      	mov	r3, r9
    b6f0:	4591      	cmp	r9, r2
    b6f2:	d900      	bls.n	b6f6 <_malloc_r+0xbe>
    b6f4:	e130      	b.n	b958 <_malloc_r+0x320>
    b6f6:	08db      	lsrs	r3, r3, #3
    b6f8:	3aff      	subs	r2, #255	; 0xff
    b6fa:	1099      	asrs	r1, r3, #2
    b6fc:	3aff      	subs	r2, #255	; 0xff
    b6fe:	408a      	lsls	r2, r1
    b700:	00db      	lsls	r3, r3, #3
    b702:	6871      	ldr	r1, [r6, #4]
    b704:	199b      	adds	r3, r3, r6
    b706:	430a      	orrs	r2, r1
    b708:	6899      	ldr	r1, [r3, #8]
    b70a:	6072      	str	r2, [r6, #4]
    b70c:	60e3      	str	r3, [r4, #12]
    b70e:	60a1      	str	r1, [r4, #8]
    b710:	609c      	str	r4, [r3, #8]
    b712:	0013      	movs	r3, r2
    b714:	60cc      	str	r4, [r1, #12]
    b716:	2101      	movs	r1, #1
    b718:	1082      	asrs	r2, r0, #2
    b71a:	4091      	lsls	r1, r2
    b71c:	4299      	cmp	r1, r3
    b71e:	d86f      	bhi.n	b800 <_malloc_r+0x1c8>
    b720:	420b      	tst	r3, r1
    b722:	d105      	bne.n	b730 <_malloc_r+0xf8>
    b724:	2203      	movs	r2, #3
    b726:	4390      	bics	r0, r2
    b728:	0049      	lsls	r1, r1, #1
    b72a:	3004      	adds	r0, #4
    b72c:	420b      	tst	r3, r1
    b72e:	d0fb      	beq.n	b728 <_malloc_r+0xf0>
    b730:	2303      	movs	r3, #3
    b732:	4698      	mov	r8, r3
    b734:	00c3      	lsls	r3, r0, #3
    b736:	4699      	mov	r9, r3
    b738:	44b1      	add	r9, r6
    b73a:	46cc      	mov	ip, r9
    b73c:	4682      	mov	sl, r0
    b73e:	4663      	mov	r3, ip
    b740:	68dc      	ldr	r4, [r3, #12]
    b742:	45a4      	cmp	ip, r4
    b744:	d107      	bne.n	b756 <_malloc_r+0x11e>
    b746:	e157      	b.n	b9f8 <_malloc_r+0x3c0>
    b748:	2a00      	cmp	r2, #0
    b74a:	db00      	blt.n	b74e <_malloc_r+0x116>
    b74c:	e166      	b.n	ba1c <_malloc_r+0x3e4>
    b74e:	68e4      	ldr	r4, [r4, #12]
    b750:	45a4      	cmp	ip, r4
    b752:	d100      	bne.n	b756 <_malloc_r+0x11e>
    b754:	e150      	b.n	b9f8 <_malloc_r+0x3c0>
    b756:	4642      	mov	r2, r8
    b758:	6863      	ldr	r3, [r4, #4]
    b75a:	4393      	bics	r3, r2
    b75c:	1b5a      	subs	r2, r3, r5
    b75e:	2a0f      	cmp	r2, #15
    b760:	ddf2      	ble.n	b748 <_malloc_r+0x110>
    b762:	2001      	movs	r0, #1
    b764:	4680      	mov	r8, r0
    b766:	1961      	adds	r1, r4, r5
    b768:	4305      	orrs	r5, r0
    b76a:	6065      	str	r5, [r4, #4]
    b76c:	68a0      	ldr	r0, [r4, #8]
    b76e:	68e5      	ldr	r5, [r4, #12]
    b770:	3608      	adds	r6, #8
    b772:	60c5      	str	r5, [r0, #12]
    b774:	60a8      	str	r0, [r5, #8]
    b776:	4640      	mov	r0, r8
    b778:	60f1      	str	r1, [r6, #12]
    b77a:	60b1      	str	r1, [r6, #8]
    b77c:	4310      	orrs	r0, r2
    b77e:	6048      	str	r0, [r1, #4]
    b780:	60ce      	str	r6, [r1, #12]
    b782:	608e      	str	r6, [r1, #8]
    b784:	0038      	movs	r0, r7
    b786:	50e2      	str	r2, [r4, r3]
    b788:	f000 fa9a 	bl	bcc0 <__malloc_unlock>
    b78c:	0020      	movs	r0, r4
    b78e:	3008      	adds	r0, #8
    b790:	e021      	b.n	b7d6 <_malloc_r+0x19e>
    b792:	2910      	cmp	r1, #16
    b794:	d826      	bhi.n	b7e4 <_malloc_r+0x1ac>
    b796:	0038      	movs	r0, r7
    b798:	f000 fa8a 	bl	bcb0 <__malloc_lock>
    b79c:	2510      	movs	r5, #16
    b79e:	2318      	movs	r3, #24
    b7a0:	2002      	movs	r0, #2
    b7a2:	4e8b      	ldr	r6, [pc, #556]	; (b9d0 <_malloc_r+0x398>)
    b7a4:	18f3      	adds	r3, r6, r3
    b7a6:	001a      	movs	r2, r3
    b7a8:	685c      	ldr	r4, [r3, #4]
    b7aa:	3a08      	subs	r2, #8
    b7ac:	4294      	cmp	r4, r2
    b7ae:	d100      	bne.n	b7b2 <_malloc_r+0x17a>
    b7b0:	e12e      	b.n	ba10 <_malloc_r+0x3d8>
    b7b2:	2303      	movs	r3, #3
    b7b4:	6862      	ldr	r2, [r4, #4]
    b7b6:	439a      	bics	r2, r3
    b7b8:	0013      	movs	r3, r2
    b7ba:	68e2      	ldr	r2, [r4, #12]
    b7bc:	68a1      	ldr	r1, [r4, #8]
    b7be:	60ca      	str	r2, [r1, #12]
    b7c0:	6091      	str	r1, [r2, #8]
    b7c2:	2201      	movs	r2, #1
    b7c4:	18e3      	adds	r3, r4, r3
    b7c6:	6859      	ldr	r1, [r3, #4]
    b7c8:	0038      	movs	r0, r7
    b7ca:	430a      	orrs	r2, r1
    b7cc:	605a      	str	r2, [r3, #4]
    b7ce:	f000 fa77 	bl	bcc0 <__malloc_unlock>
    b7d2:	0020      	movs	r0, r4
    b7d4:	3008      	adds	r0, #8
    b7d6:	b003      	add	sp, #12
    b7d8:	bc3c      	pop	{r2, r3, r4, r5}
    b7da:	4690      	mov	r8, r2
    b7dc:	4699      	mov	r9, r3
    b7de:	46a2      	mov	sl, r4
    b7e0:	46ab      	mov	fp, r5
    b7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b7e4:	230c      	movs	r3, #12
    b7e6:	2000      	movs	r0, #0
    b7e8:	603b      	str	r3, [r7, #0]
    b7ea:	e7f4      	b.n	b7d6 <_malloc_r+0x19e>
    b7ec:	2180      	movs	r1, #128	; 0x80
    b7ee:	233f      	movs	r3, #63	; 0x3f
    b7f0:	2040      	movs	r0, #64	; 0x40
    b7f2:	0089      	lsls	r1, r1, #2
    b7f4:	4698      	mov	r8, r3
    b7f6:	e746      	b.n	b686 <_malloc_r+0x4e>
    b7f8:	4640      	mov	r0, r8
    b7fa:	e764      	b.n	b6c6 <_malloc_r+0x8e>
    b7fc:	464b      	mov	r3, r9
    b7fe:	e7e0      	b.n	b7c2 <_malloc_r+0x18a>
    b800:	2303      	movs	r3, #3
    b802:	68b4      	ldr	r4, [r6, #8]
    b804:	6862      	ldr	r2, [r4, #4]
    b806:	439a      	bics	r2, r3
    b808:	4690      	mov	r8, r2
    b80a:	42aa      	cmp	r2, r5
    b80c:	d303      	bcc.n	b816 <_malloc_r+0x1de>
    b80e:	1b53      	subs	r3, r2, r5
    b810:	2b0f      	cmp	r3, #15
    b812:	dd00      	ble.n	b816 <_malloc_r+0x1de>
    b814:	e086      	b.n	b924 <_malloc_r+0x2ec>
    b816:	0023      	movs	r3, r4
    b818:	4443      	add	r3, r8
    b81a:	4a6f      	ldr	r2, [pc, #444]	; (b9d8 <_malloc_r+0x3a0>)
    b81c:	9301      	str	r3, [sp, #4]
    b81e:	4b6f      	ldr	r3, [pc, #444]	; (b9dc <_malloc_r+0x3a4>)
    b820:	4693      	mov	fp, r2
    b822:	681b      	ldr	r3, [r3, #0]
    b824:	6812      	ldr	r2, [r2, #0]
    b826:	18eb      	adds	r3, r5, r3
    b828:	3201      	adds	r2, #1
    b82a:	d100      	bne.n	b82e <_malloc_r+0x1f6>
    b82c:	e168      	b.n	bb00 <_malloc_r+0x4c8>
    b82e:	4a6c      	ldr	r2, [pc, #432]	; (b9e0 <_malloc_r+0x3a8>)
    b830:	4694      	mov	ip, r2
    b832:	4463      	add	r3, ip
    b834:	0b1b      	lsrs	r3, r3, #12
    b836:	031b      	lsls	r3, r3, #12
    b838:	9300      	str	r3, [sp, #0]
    b83a:	9900      	ldr	r1, [sp, #0]
    b83c:	0038      	movs	r0, r7
    b83e:	f000 fef5 	bl	c62c <_sbrk_r>
    b842:	0003      	movs	r3, r0
    b844:	4681      	mov	r9, r0
    b846:	3301      	adds	r3, #1
    b848:	d061      	beq.n	b90e <_malloc_r+0x2d6>
    b84a:	9b01      	ldr	r3, [sp, #4]
    b84c:	4283      	cmp	r3, r0
    b84e:	d900      	bls.n	b852 <_malloc_r+0x21a>
    b850:	e0ff      	b.n	ba52 <_malloc_r+0x41a>
    b852:	4b64      	ldr	r3, [pc, #400]	; (b9e4 <_malloc_r+0x3ac>)
    b854:	9a00      	ldr	r2, [sp, #0]
    b856:	469a      	mov	sl, r3
    b858:	681b      	ldr	r3, [r3, #0]
    b85a:	469c      	mov	ip, r3
    b85c:	4653      	mov	r3, sl
    b85e:	4462      	add	r2, ip
    b860:	601a      	str	r2, [r3, #0]
    b862:	9b01      	ldr	r3, [sp, #4]
    b864:	0011      	movs	r1, r2
    b866:	4283      	cmp	r3, r0
    b868:	d100      	bne.n	b86c <_malloc_r+0x234>
    b86a:	e155      	b.n	bb18 <_malloc_r+0x4e0>
    b86c:	465b      	mov	r3, fp
    b86e:	681b      	ldr	r3, [r3, #0]
    b870:	3301      	adds	r3, #1
    b872:	d100      	bne.n	b876 <_malloc_r+0x23e>
    b874:	e16c      	b.n	bb50 <_malloc_r+0x518>
    b876:	464b      	mov	r3, r9
    b878:	9a01      	ldr	r2, [sp, #4]
    b87a:	1a9b      	subs	r3, r3, r2
    b87c:	1859      	adds	r1, r3, r1
    b87e:	4653      	mov	r3, sl
    b880:	6019      	str	r1, [r3, #0]
    b882:	2307      	movs	r3, #7
    b884:	464a      	mov	r2, r9
    b886:	4013      	ands	r3, r2
    b888:	d100      	bne.n	b88c <_malloc_r+0x254>
    b88a:	e124      	b.n	bad6 <_malloc_r+0x49e>
    b88c:	2108      	movs	r1, #8
    b88e:	4689      	mov	r9, r1
    b890:	4955      	ldr	r1, [pc, #340]	; (b9e8 <_malloc_r+0x3b0>)
    b892:	1ad2      	subs	r2, r2, r3
    b894:	4491      	add	r9, r2
    b896:	1acb      	subs	r3, r1, r3
    b898:	9a00      	ldr	r2, [sp, #0]
    b89a:	0038      	movs	r0, r7
    b89c:	444a      	add	r2, r9
    b89e:	0511      	lsls	r1, r2, #20
    b8a0:	0d09      	lsrs	r1, r1, #20
    b8a2:	1a5b      	subs	r3, r3, r1
    b8a4:	0019      	movs	r1, r3
    b8a6:	469b      	mov	fp, r3
    b8a8:	f000 fec0 	bl	c62c <_sbrk_r>
    b8ac:	1c43      	adds	r3, r0, #1
    b8ae:	d100      	bne.n	b8b2 <_malloc_r+0x27a>
    b8b0:	e142      	b.n	bb38 <_malloc_r+0x500>
    b8b2:	464b      	mov	r3, r9
    b8b4:	1ac0      	subs	r0, r0, r3
    b8b6:	2301      	movs	r3, #1
    b8b8:	4458      	add	r0, fp
    b8ba:	4318      	orrs	r0, r3
    b8bc:	4653      	mov	r3, sl
    b8be:	681b      	ldr	r3, [r3, #0]
    b8c0:	445b      	add	r3, fp
    b8c2:	0019      	movs	r1, r3
    b8c4:	4653      	mov	r3, sl
    b8c6:	6019      	str	r1, [r3, #0]
    b8c8:	464b      	mov	r3, r9
    b8ca:	60b3      	str	r3, [r6, #8]
    b8cc:	6058      	str	r0, [r3, #4]
    b8ce:	42b4      	cmp	r4, r6
    b8d0:	d013      	beq.n	b8fa <_malloc_r+0x2c2>
    b8d2:	4643      	mov	r3, r8
    b8d4:	2b0f      	cmp	r3, #15
    b8d6:	d800      	bhi.n	b8da <_malloc_r+0x2a2>
    b8d8:	e0e8      	b.n	baac <_malloc_r+0x474>
    b8da:	4643      	mov	r3, r8
    b8dc:	2207      	movs	r2, #7
    b8de:	6860      	ldr	r0, [r4, #4]
    b8e0:	3b0c      	subs	r3, #12
    b8e2:	4393      	bics	r3, r2
    b8e4:	3a06      	subs	r2, #6
    b8e6:	4002      	ands	r2, r0
    b8e8:	2005      	movs	r0, #5
    b8ea:	431a      	orrs	r2, r3
    b8ec:	6062      	str	r2, [r4, #4]
    b8ee:	18e2      	adds	r2, r4, r3
    b8f0:	6050      	str	r0, [r2, #4]
    b8f2:	6090      	str	r0, [r2, #8]
    b8f4:	2b0f      	cmp	r3, #15
    b8f6:	d900      	bls.n	b8fa <_malloc_r+0x2c2>
    b8f8:	e122      	b.n	bb40 <_malloc_r+0x508>
    b8fa:	4b3c      	ldr	r3, [pc, #240]	; (b9ec <_malloc_r+0x3b4>)
    b8fc:	681a      	ldr	r2, [r3, #0]
    b8fe:	4291      	cmp	r1, r2
    b900:	d900      	bls.n	b904 <_malloc_r+0x2cc>
    b902:	6019      	str	r1, [r3, #0]
    b904:	4b3a      	ldr	r3, [pc, #232]	; (b9f0 <_malloc_r+0x3b8>)
    b906:	681a      	ldr	r2, [r3, #0]
    b908:	4291      	cmp	r1, r2
    b90a:	d900      	bls.n	b90e <_malloc_r+0x2d6>
    b90c:	6019      	str	r1, [r3, #0]
    b90e:	2303      	movs	r3, #3
    b910:	68b4      	ldr	r4, [r6, #8]
    b912:	6862      	ldr	r2, [r4, #4]
    b914:	439a      	bics	r2, r3
    b916:	1b53      	subs	r3, r2, r5
    b918:	4295      	cmp	r5, r2
    b91a:	d900      	bls.n	b91e <_malloc_r+0x2e6>
    b91c:	e0c9      	b.n	bab2 <_malloc_r+0x47a>
    b91e:	2b0f      	cmp	r3, #15
    b920:	dc00      	bgt.n	b924 <_malloc_r+0x2ec>
    b922:	e0c6      	b.n	bab2 <_malloc_r+0x47a>
    b924:	2201      	movs	r2, #1
    b926:	0029      	movs	r1, r5
    b928:	4313      	orrs	r3, r2
    b92a:	4311      	orrs	r1, r2
    b92c:	1965      	adds	r5, r4, r5
    b92e:	6061      	str	r1, [r4, #4]
    b930:	0038      	movs	r0, r7
    b932:	60b5      	str	r5, [r6, #8]
    b934:	606b      	str	r3, [r5, #4]
    b936:	f000 f9c3 	bl	bcc0 <__malloc_unlock>
    b93a:	0020      	movs	r0, r4
    b93c:	3008      	adds	r0, #8
    b93e:	e74a      	b.n	b7d6 <_malloc_r+0x19e>
    b940:	2814      	cmp	r0, #20
    b942:	d97a      	bls.n	ba3a <_malloc_r+0x402>
    b944:	2854      	cmp	r0, #84	; 0x54
    b946:	d900      	bls.n	b94a <_malloc_r+0x312>
    b948:	e0ba      	b.n	bac0 <_malloc_r+0x488>
    b94a:	236e      	movs	r3, #110	; 0x6e
    b94c:	4698      	mov	r8, r3
    b94e:	0b28      	lsrs	r0, r5, #12
    b950:	4480      	add	r8, r0
    b952:	306f      	adds	r0, #111	; 0x6f
    b954:	00c1      	lsls	r1, r0, #3
    b956:	e696      	b.n	b686 <_malloc_r+0x4e>
    b958:	0a5a      	lsrs	r2, r3, #9
    b95a:	2a04      	cmp	r2, #4
    b95c:	d973      	bls.n	ba46 <_malloc_r+0x40e>
    b95e:	2a14      	cmp	r2, #20
    b960:	d900      	bls.n	b964 <_malloc_r+0x32c>
    b962:	e0d0      	b.n	bb06 <_malloc_r+0x4ce>
    b964:	0011      	movs	r1, r2
    b966:	325c      	adds	r2, #92	; 0x5c
    b968:	315b      	adds	r1, #91	; 0x5b
    b96a:	00d2      	lsls	r2, r2, #3
    b96c:	2308      	movs	r3, #8
    b96e:	425b      	negs	r3, r3
    b970:	469c      	mov	ip, r3
    b972:	18b2      	adds	r2, r6, r2
    b974:	4494      	add	ip, r2
    b976:	4663      	mov	r3, ip
    b978:	689a      	ldr	r2, [r3, #8]
    b97a:	2303      	movs	r3, #3
    b97c:	4698      	mov	r8, r3
    b97e:	4594      	cmp	ip, r2
    b980:	d100      	bne.n	b984 <_malloc_r+0x34c>
    b982:	e0ab      	b.n	badc <_malloc_r+0x4a4>
    b984:	4643      	mov	r3, r8
    b986:	6851      	ldr	r1, [r2, #4]
    b988:	4399      	bics	r1, r3
    b98a:	4589      	cmp	r9, r1
    b98c:	d300      	bcc.n	b990 <_malloc_r+0x358>
    b98e:	e095      	b.n	babc <_malloc_r+0x484>
    b990:	6892      	ldr	r2, [r2, #8]
    b992:	4594      	cmp	ip, r2
    b994:	d1f6      	bne.n	b984 <_malloc_r+0x34c>
    b996:	4663      	mov	r3, ip
    b998:	68da      	ldr	r2, [r3, #12]
    b99a:	6873      	ldr	r3, [r6, #4]
    b99c:	4661      	mov	r1, ip
    b99e:	60e2      	str	r2, [r4, #12]
    b9a0:	60a1      	str	r1, [r4, #8]
    b9a2:	6094      	str	r4, [r2, #8]
    b9a4:	60cc      	str	r4, [r1, #12]
    b9a6:	e6b6      	b.n	b716 <_malloc_r+0xde>
    b9a8:	2301      	movs	r3, #1
    b9aa:	1960      	adds	r0, r4, r5
    b9ac:	431d      	orrs	r5, r3
    b9ae:	6065      	str	r5, [r4, #4]
    b9b0:	6170      	str	r0, [r6, #20]
    b9b2:	6130      	str	r0, [r6, #16]
    b9b4:	60c2      	str	r2, [r0, #12]
    b9b6:	6082      	str	r2, [r0, #8]
    b9b8:	001a      	movs	r2, r3
    b9ba:	464b      	mov	r3, r9
    b9bc:	430a      	orrs	r2, r1
    b9be:	6042      	str	r2, [r0, #4]
    b9c0:	0038      	movs	r0, r7
    b9c2:	50e1      	str	r1, [r4, r3]
    b9c4:	f000 f97c 	bl	bcc0 <__malloc_unlock>
    b9c8:	0020      	movs	r0, r4
    b9ca:	3008      	adds	r0, #8
    b9cc:	e703      	b.n	b7d6 <_malloc_r+0x19e>
    b9ce:	46c0      	nop			; (mov r8, r8)
    b9d0:	20000640 	.word	0x20000640
    b9d4:	000001ff 	.word	0x000001ff
    b9d8:	20000a48 	.word	0x20000a48
    b9dc:	20000b18 	.word	0x20000b18
    b9e0:	0000100f 	.word	0x0000100f
    b9e4:	20000ae8 	.word	0x20000ae8
    b9e8:	00001008 	.word	0x00001008
    b9ec:	20000b10 	.word	0x20000b10
    b9f0:	20000b14 	.word	0x20000b14
    b9f4:	6873      	ldr	r3, [r6, #4]
    b9f6:	e68e      	b.n	b716 <_malloc_r+0xde>
    b9f8:	2308      	movs	r3, #8
    b9fa:	469b      	mov	fp, r3
    b9fc:	3b07      	subs	r3, #7
    b9fe:	44dc      	add	ip, fp
    ba00:	469b      	mov	fp, r3
    ba02:	44da      	add	sl, fp
    ba04:	4643      	mov	r3, r8
    ba06:	4652      	mov	r2, sl
    ba08:	4213      	tst	r3, r2
    ba0a:	d000      	beq.n	ba0e <_malloc_r+0x3d6>
    ba0c:	e697      	b.n	b73e <_malloc_r+0x106>
    ba0e:	e037      	b.n	ba80 <_malloc_r+0x448>
    ba10:	68dc      	ldr	r4, [r3, #12]
    ba12:	3002      	adds	r0, #2
    ba14:	42a3      	cmp	r3, r4
    ba16:	d100      	bne.n	ba1a <_malloc_r+0x3e2>
    ba18:	e655      	b.n	b6c6 <_malloc_r+0x8e>
    ba1a:	e6ca      	b.n	b7b2 <_malloc_r+0x17a>
    ba1c:	2201      	movs	r2, #1
    ba1e:	18e3      	adds	r3, r4, r3
    ba20:	6859      	ldr	r1, [r3, #4]
    ba22:	0038      	movs	r0, r7
    ba24:	430a      	orrs	r2, r1
    ba26:	605a      	str	r2, [r3, #4]
    ba28:	68e3      	ldr	r3, [r4, #12]
    ba2a:	68a2      	ldr	r2, [r4, #8]
    ba2c:	60d3      	str	r3, [r2, #12]
    ba2e:	609a      	str	r2, [r3, #8]
    ba30:	f000 f946 	bl	bcc0 <__malloc_unlock>
    ba34:	0020      	movs	r0, r4
    ba36:	3008      	adds	r0, #8
    ba38:	e6cd      	b.n	b7d6 <_malloc_r+0x19e>
    ba3a:	235b      	movs	r3, #91	; 0x5b
    ba3c:	4698      	mov	r8, r3
    ba3e:	4480      	add	r8, r0
    ba40:	305c      	adds	r0, #92	; 0x5c
    ba42:	00c1      	lsls	r1, r0, #3
    ba44:	e61f      	b.n	b686 <_malloc_r+0x4e>
    ba46:	099a      	lsrs	r2, r3, #6
    ba48:	0011      	movs	r1, r2
    ba4a:	3239      	adds	r2, #57	; 0x39
    ba4c:	3138      	adds	r1, #56	; 0x38
    ba4e:	00d2      	lsls	r2, r2, #3
    ba50:	e78c      	b.n	b96c <_malloc_r+0x334>
    ba52:	42b4      	cmp	r4, r6
    ba54:	d000      	beq.n	ba58 <_malloc_r+0x420>
    ba56:	e75a      	b.n	b90e <_malloc_r+0x2d6>
    ba58:	4b4f      	ldr	r3, [pc, #316]	; (bb98 <_malloc_r+0x560>)
    ba5a:	9a00      	ldr	r2, [sp, #0]
    ba5c:	469a      	mov	sl, r3
    ba5e:	681b      	ldr	r3, [r3, #0]
    ba60:	469c      	mov	ip, r3
    ba62:	4653      	mov	r3, sl
    ba64:	4462      	add	r2, ip
    ba66:	0011      	movs	r1, r2
    ba68:	601a      	str	r2, [r3, #0]
    ba6a:	e6ff      	b.n	b86c <_malloc_r+0x234>
    ba6c:	2308      	movs	r3, #8
    ba6e:	425b      	negs	r3, r3
    ba70:	469c      	mov	ip, r3
    ba72:	44e1      	add	r9, ip
    ba74:	464b      	mov	r3, r9
    ba76:	689b      	ldr	r3, [r3, #8]
    ba78:	3801      	subs	r0, #1
    ba7a:	4599      	cmp	r9, r3
    ba7c:	d000      	beq.n	ba80 <_malloc_r+0x448>
    ba7e:	e084      	b.n	bb8a <_malloc_r+0x552>
    ba80:	4643      	mov	r3, r8
    ba82:	4203      	tst	r3, r0
    ba84:	d1f2      	bne.n	ba6c <_malloc_r+0x434>
    ba86:	6873      	ldr	r3, [r6, #4]
    ba88:	438b      	bics	r3, r1
    ba8a:	6073      	str	r3, [r6, #4]
    ba8c:	0049      	lsls	r1, r1, #1
    ba8e:	4299      	cmp	r1, r3
    ba90:	d900      	bls.n	ba94 <_malloc_r+0x45c>
    ba92:	e6b5      	b.n	b800 <_malloc_r+0x1c8>
    ba94:	2900      	cmp	r1, #0
    ba96:	d100      	bne.n	ba9a <_malloc_r+0x462>
    ba98:	e6b2      	b.n	b800 <_malloc_r+0x1c8>
    ba9a:	4650      	mov	r0, sl
    ba9c:	420b      	tst	r3, r1
    ba9e:	d000      	beq.n	baa2 <_malloc_r+0x46a>
    baa0:	e648      	b.n	b734 <_malloc_r+0xfc>
    baa2:	0049      	lsls	r1, r1, #1
    baa4:	3004      	adds	r0, #4
    baa6:	420b      	tst	r3, r1
    baa8:	d0fb      	beq.n	baa2 <_malloc_r+0x46a>
    baaa:	e643      	b.n	b734 <_malloc_r+0xfc>
    baac:	2301      	movs	r3, #1
    baae:	464a      	mov	r2, r9
    bab0:	6053      	str	r3, [r2, #4]
    bab2:	0038      	movs	r0, r7
    bab4:	f000 f904 	bl	bcc0 <__malloc_unlock>
    bab8:	2000      	movs	r0, #0
    baba:	e68c      	b.n	b7d6 <_malloc_r+0x19e>
    babc:	4694      	mov	ip, r2
    babe:	e76a      	b.n	b996 <_malloc_r+0x35e>
    bac0:	23aa      	movs	r3, #170	; 0xaa
    bac2:	005b      	lsls	r3, r3, #1
    bac4:	4298      	cmp	r0, r3
    bac6:	d811      	bhi.n	baec <_malloc_r+0x4b4>
    bac8:	3bdd      	subs	r3, #221	; 0xdd
    baca:	4698      	mov	r8, r3
    bacc:	0be8      	lsrs	r0, r5, #15
    bace:	4480      	add	r8, r0
    bad0:	3078      	adds	r0, #120	; 0x78
    bad2:	00c1      	lsls	r1, r0, #3
    bad4:	e5d7      	b.n	b686 <_malloc_r+0x4e>
    bad6:	2380      	movs	r3, #128	; 0x80
    bad8:	015b      	lsls	r3, r3, #5
    bada:	e6dd      	b.n	b898 <_malloc_r+0x260>
    badc:	1089      	asrs	r1, r1, #2
    bade:	3b02      	subs	r3, #2
    bae0:	408b      	lsls	r3, r1
    bae2:	6872      	ldr	r2, [r6, #4]
    bae4:	4313      	orrs	r3, r2
    bae6:	6073      	str	r3, [r6, #4]
    bae8:	4662      	mov	r2, ip
    baea:	e757      	b.n	b99c <_malloc_r+0x364>
    baec:	4b2b      	ldr	r3, [pc, #172]	; (bb9c <_malloc_r+0x564>)
    baee:	4298      	cmp	r0, r3
    baf0:	d81c      	bhi.n	bb2c <_malloc_r+0x4f4>
    baf2:	237c      	movs	r3, #124	; 0x7c
    baf4:	4698      	mov	r8, r3
    baf6:	0ca8      	lsrs	r0, r5, #18
    baf8:	4480      	add	r8, r0
    bafa:	307d      	adds	r0, #125	; 0x7d
    bafc:	00c1      	lsls	r1, r0, #3
    bafe:	e5c2      	b.n	b686 <_malloc_r+0x4e>
    bb00:	3310      	adds	r3, #16
    bb02:	9300      	str	r3, [sp, #0]
    bb04:	e699      	b.n	b83a <_malloc_r+0x202>
    bb06:	2a54      	cmp	r2, #84	; 0x54
    bb08:	d826      	bhi.n	bb58 <_malloc_r+0x520>
    bb0a:	464b      	mov	r3, r9
    bb0c:	0b1a      	lsrs	r2, r3, #12
    bb0e:	0011      	movs	r1, r2
    bb10:	326f      	adds	r2, #111	; 0x6f
    bb12:	316e      	adds	r1, #110	; 0x6e
    bb14:	00d2      	lsls	r2, r2, #3
    bb16:	e729      	b.n	b96c <_malloc_r+0x334>
    bb18:	051b      	lsls	r3, r3, #20
    bb1a:	d000      	beq.n	bb1e <_malloc_r+0x4e6>
    bb1c:	e6a6      	b.n	b86c <_malloc_r+0x234>
    bb1e:	2001      	movs	r0, #1
    bb20:	9b00      	ldr	r3, [sp, #0]
    bb22:	68b2      	ldr	r2, [r6, #8]
    bb24:	4443      	add	r3, r8
    bb26:	4303      	orrs	r3, r0
    bb28:	6053      	str	r3, [r2, #4]
    bb2a:	e6e6      	b.n	b8fa <_malloc_r+0x2c2>
    bb2c:	21fe      	movs	r1, #254	; 0xfe
    bb2e:	237e      	movs	r3, #126	; 0x7e
    bb30:	207f      	movs	r0, #127	; 0x7f
    bb32:	0089      	lsls	r1, r1, #2
    bb34:	4698      	mov	r8, r3
    bb36:	e5a6      	b.n	b686 <_malloc_r+0x4e>
    bb38:	2300      	movs	r3, #0
    bb3a:	2001      	movs	r0, #1
    bb3c:	469b      	mov	fp, r3
    bb3e:	e6bd      	b.n	b8bc <_malloc_r+0x284>
    bb40:	0021      	movs	r1, r4
    bb42:	0038      	movs	r0, r7
    bb44:	3108      	adds	r1, #8
    bb46:	f7ff fc57 	bl	b3f8 <_free_r>
    bb4a:	4653      	mov	r3, sl
    bb4c:	6819      	ldr	r1, [r3, #0]
    bb4e:	e6d4      	b.n	b8fa <_malloc_r+0x2c2>
    bb50:	465b      	mov	r3, fp
    bb52:	464a      	mov	r2, r9
    bb54:	601a      	str	r2, [r3, #0]
    bb56:	e694      	b.n	b882 <_malloc_r+0x24a>
    bb58:	21aa      	movs	r1, #170	; 0xaa
    bb5a:	0049      	lsls	r1, r1, #1
    bb5c:	428a      	cmp	r2, r1
    bb5e:	d806      	bhi.n	bb6e <_malloc_r+0x536>
    bb60:	464b      	mov	r3, r9
    bb62:	0bda      	lsrs	r2, r3, #15
    bb64:	0011      	movs	r1, r2
    bb66:	3278      	adds	r2, #120	; 0x78
    bb68:	3177      	adds	r1, #119	; 0x77
    bb6a:	00d2      	lsls	r2, r2, #3
    bb6c:	e6fe      	b.n	b96c <_malloc_r+0x334>
    bb6e:	490b      	ldr	r1, [pc, #44]	; (bb9c <_malloc_r+0x564>)
    bb70:	428a      	cmp	r2, r1
    bb72:	d806      	bhi.n	bb82 <_malloc_r+0x54a>
    bb74:	464b      	mov	r3, r9
    bb76:	0c9a      	lsrs	r2, r3, #18
    bb78:	0011      	movs	r1, r2
    bb7a:	327d      	adds	r2, #125	; 0x7d
    bb7c:	317c      	adds	r1, #124	; 0x7c
    bb7e:	00d2      	lsls	r2, r2, #3
    bb80:	e6f4      	b.n	b96c <_malloc_r+0x334>
    bb82:	22fe      	movs	r2, #254	; 0xfe
    bb84:	217e      	movs	r1, #126	; 0x7e
    bb86:	0092      	lsls	r2, r2, #2
    bb88:	e6f0      	b.n	b96c <_malloc_r+0x334>
    bb8a:	6873      	ldr	r3, [r6, #4]
    bb8c:	e77e      	b.n	ba8c <_malloc_r+0x454>
    bb8e:	002b      	movs	r3, r5
    bb90:	08e8      	lsrs	r0, r5, #3
    bb92:	3308      	adds	r3, #8
    bb94:	e605      	b.n	b7a2 <_malloc_r+0x16a>
    bb96:	46c0      	nop			; (mov r8, r8)
    bb98:	20000ae8 	.word	0x20000ae8
    bb9c:	00000554 	.word	0x00000554

0000bba0 <_mbrtowc_r>:
    bba0:	b530      	push	{r4, r5, lr}
    bba2:	0004      	movs	r4, r0
    bba4:	b083      	sub	sp, #12
    bba6:	2a00      	cmp	r2, #0
    bba8:	d013      	beq.n	bbd2 <_mbrtowc_r+0x32>
    bbaa:	4813      	ldr	r0, [pc, #76]	; (bbf8 <_mbrtowc_r+0x58>)
    bbac:	6800      	ldr	r0, [r0, #0]
    bbae:	6b40      	ldr	r0, [r0, #52]	; 0x34
    bbb0:	2800      	cmp	r0, #0
    bbb2:	d01d      	beq.n	bbf0 <_mbrtowc_r+0x50>
    bbb4:	9d06      	ldr	r5, [sp, #24]
    bbb6:	9500      	str	r5, [sp, #0]
    bbb8:	25e4      	movs	r5, #228	; 0xe4
    bbba:	5945      	ldr	r5, [r0, r5]
    bbbc:	0020      	movs	r0, r4
    bbbe:	47a8      	blx	r5
    bbc0:	1c43      	adds	r3, r0, #1
    bbc2:	d104      	bne.n	bbce <_mbrtowc_r+0x2e>
    bbc4:	2300      	movs	r3, #0
    bbc6:	9a06      	ldr	r2, [sp, #24]
    bbc8:	6013      	str	r3, [r2, #0]
    bbca:	338a      	adds	r3, #138	; 0x8a
    bbcc:	6023      	str	r3, [r4, #0]
    bbce:	b003      	add	sp, #12
    bbd0:	bd30      	pop	{r4, r5, pc}
    bbd2:	4b09      	ldr	r3, [pc, #36]	; (bbf8 <_mbrtowc_r+0x58>)
    bbd4:	681b      	ldr	r3, [r3, #0]
    bbd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bbd8:	2b00      	cmp	r3, #0
    bbda:	d00b      	beq.n	bbf4 <_mbrtowc_r+0x54>
    bbdc:	9a06      	ldr	r2, [sp, #24]
    bbde:	2100      	movs	r1, #0
    bbe0:	9200      	str	r2, [sp, #0]
    bbe2:	22e4      	movs	r2, #228	; 0xe4
    bbe4:	0020      	movs	r0, r4
    bbe6:	589d      	ldr	r5, [r3, r2]
    bbe8:	2301      	movs	r3, #1
    bbea:	4a04      	ldr	r2, [pc, #16]	; (bbfc <_mbrtowc_r+0x5c>)
    bbec:	47a8      	blx	r5
    bbee:	e7e7      	b.n	bbc0 <_mbrtowc_r+0x20>
    bbf0:	4803      	ldr	r0, [pc, #12]	; (bc00 <_mbrtowc_r+0x60>)
    bbf2:	e7df      	b.n	bbb4 <_mbrtowc_r+0x14>
    bbf4:	4b02      	ldr	r3, [pc, #8]	; (bc00 <_mbrtowc_r+0x60>)
    bbf6:	e7f1      	b.n	bbdc <_mbrtowc_r+0x3c>
    bbf8:	200000a0 	.word	0x200000a0
    bbfc:	0000f47c 	.word	0x0000f47c
    bc00:	200004d4 	.word	0x200004d4

0000bc04 <__ascii_mbtowc>:
    bc04:	b082      	sub	sp, #8
    bc06:	2900      	cmp	r1, #0
    bc08:	d00a      	beq.n	bc20 <__ascii_mbtowc+0x1c>
    bc0a:	2a00      	cmp	r2, #0
    bc0c:	d00b      	beq.n	bc26 <__ascii_mbtowc+0x22>
    bc0e:	2b00      	cmp	r3, #0
    bc10:	d00b      	beq.n	bc2a <__ascii_mbtowc+0x26>
    bc12:	7813      	ldrb	r3, [r2, #0]
    bc14:	600b      	str	r3, [r1, #0]
    bc16:	7810      	ldrb	r0, [r2, #0]
    bc18:	1e43      	subs	r3, r0, #1
    bc1a:	4198      	sbcs	r0, r3
    bc1c:	b002      	add	sp, #8
    bc1e:	4770      	bx	lr
    bc20:	a901      	add	r1, sp, #4
    bc22:	2a00      	cmp	r2, #0
    bc24:	d1f3      	bne.n	bc0e <__ascii_mbtowc+0xa>
    bc26:	2000      	movs	r0, #0
    bc28:	e7f8      	b.n	bc1c <__ascii_mbtowc+0x18>
    bc2a:	2002      	movs	r0, #2
    bc2c:	4240      	negs	r0, r0
    bc2e:	e7f5      	b.n	bc1c <__ascii_mbtowc+0x18>

0000bc30 <memchr>:
    bc30:	b570      	push	{r4, r5, r6, lr}
    bc32:	b2cd      	uxtb	r5, r1
    bc34:	0783      	lsls	r3, r0, #30
    bc36:	d034      	beq.n	bca2 <memchr+0x72>
    bc38:	1e54      	subs	r4, r2, #1
    bc3a:	2a00      	cmp	r2, #0
    bc3c:	d01b      	beq.n	bc76 <memchr+0x46>
    bc3e:	7803      	ldrb	r3, [r0, #0]
    bc40:	42ab      	cmp	r3, r5
    bc42:	d019      	beq.n	bc78 <memchr+0x48>
    bc44:	2203      	movs	r2, #3
    bc46:	e004      	b.n	bc52 <memchr+0x22>
    bc48:	3c01      	subs	r4, #1
    bc4a:	d314      	bcc.n	bc76 <memchr+0x46>
    bc4c:	7803      	ldrb	r3, [r0, #0]
    bc4e:	42ab      	cmp	r3, r5
    bc50:	d012      	beq.n	bc78 <memchr+0x48>
    bc52:	3001      	adds	r0, #1
    bc54:	4210      	tst	r0, r2
    bc56:	d1f7      	bne.n	bc48 <memchr+0x18>
    bc58:	2c03      	cmp	r4, #3
    bc5a:	d80e      	bhi.n	bc7a <memchr+0x4a>
    bc5c:	2c00      	cmp	r4, #0
    bc5e:	d00a      	beq.n	bc76 <memchr+0x46>
    bc60:	7803      	ldrb	r3, [r0, #0]
    bc62:	42ab      	cmp	r3, r5
    bc64:	d008      	beq.n	bc78 <memchr+0x48>
    bc66:	1904      	adds	r4, r0, r4
    bc68:	e002      	b.n	bc70 <memchr+0x40>
    bc6a:	7803      	ldrb	r3, [r0, #0]
    bc6c:	42ab      	cmp	r3, r5
    bc6e:	d003      	beq.n	bc78 <memchr+0x48>
    bc70:	3001      	adds	r0, #1
    bc72:	4284      	cmp	r4, r0
    bc74:	d1f9      	bne.n	bc6a <memchr+0x3a>
    bc76:	2000      	movs	r0, #0
    bc78:	bd70      	pop	{r4, r5, r6, pc}
    bc7a:	22ff      	movs	r2, #255	; 0xff
    bc7c:	060b      	lsls	r3, r1, #24
    bc7e:	0c1b      	lsrs	r3, r3, #16
    bc80:	4011      	ands	r1, r2
    bc82:	4319      	orrs	r1, r3
    bc84:	040b      	lsls	r3, r1, #16
    bc86:	4e08      	ldr	r6, [pc, #32]	; (bca8 <memchr+0x78>)
    bc88:	4319      	orrs	r1, r3
    bc8a:	6803      	ldr	r3, [r0, #0]
    bc8c:	4a07      	ldr	r2, [pc, #28]	; (bcac <memchr+0x7c>)
    bc8e:	404b      	eors	r3, r1
    bc90:	189a      	adds	r2, r3, r2
    bc92:	439a      	bics	r2, r3
    bc94:	4232      	tst	r2, r6
    bc96:	d1e3      	bne.n	bc60 <memchr+0x30>
    bc98:	3c04      	subs	r4, #4
    bc9a:	3004      	adds	r0, #4
    bc9c:	2c03      	cmp	r4, #3
    bc9e:	d8f4      	bhi.n	bc8a <memchr+0x5a>
    bca0:	e7dc      	b.n	bc5c <memchr+0x2c>
    bca2:	0014      	movs	r4, r2
    bca4:	e7d8      	b.n	bc58 <memchr+0x28>
    bca6:	46c0      	nop			; (mov r8, r8)
    bca8:	80808080 	.word	0x80808080
    bcac:	fefefeff 	.word	0xfefefeff

0000bcb0 <__malloc_lock>:
    bcb0:	b510      	push	{r4, lr}
    bcb2:	4802      	ldr	r0, [pc, #8]	; (bcbc <__malloc_lock+0xc>)
    bcb4:	f7ff fcbc 	bl	b630 <__retarget_lock_acquire_recursive>
    bcb8:	bd10      	pop	{r4, pc}
    bcba:	46c0      	nop			; (mov r8, r8)
    bcbc:	200016c8 	.word	0x200016c8

0000bcc0 <__malloc_unlock>:
    bcc0:	b510      	push	{r4, lr}
    bcc2:	4802      	ldr	r0, [pc, #8]	; (bccc <__malloc_unlock+0xc>)
    bcc4:	f7ff fcb6 	bl	b634 <__retarget_lock_release_recursive>
    bcc8:	bd10      	pop	{r4, pc}
    bcca:	46c0      	nop			; (mov r8, r8)
    bccc:	200016c8 	.word	0x200016c8

0000bcd0 <_Balloc>:
    bcd0:	b570      	push	{r4, r5, r6, lr}
    bcd2:	0004      	movs	r4, r0
    bcd4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    bcd6:	000d      	movs	r5, r1
    bcd8:	2800      	cmp	r0, #0
    bcda:	d00a      	beq.n	bcf2 <_Balloc+0x22>
    bcdc:	00ab      	lsls	r3, r5, #2
    bcde:	18c3      	adds	r3, r0, r3
    bce0:	6818      	ldr	r0, [r3, #0]
    bce2:	2800      	cmp	r0, #0
    bce4:	d00f      	beq.n	bd06 <_Balloc+0x36>
    bce6:	6802      	ldr	r2, [r0, #0]
    bce8:	601a      	str	r2, [r3, #0]
    bcea:	2300      	movs	r3, #0
    bcec:	6103      	str	r3, [r0, #16]
    bcee:	60c3      	str	r3, [r0, #12]
    bcf0:	bd70      	pop	{r4, r5, r6, pc}
    bcf2:	2221      	movs	r2, #33	; 0x21
    bcf4:	2104      	movs	r1, #4
    bcf6:	0020      	movs	r0, r4
    bcf8:	f002 f91a 	bl	df30 <_calloc_r>
    bcfc:	64e0      	str	r0, [r4, #76]	; 0x4c
    bcfe:	2800      	cmp	r0, #0
    bd00:	d1ec      	bne.n	bcdc <_Balloc+0xc>
    bd02:	2000      	movs	r0, #0
    bd04:	e7f4      	b.n	bcf0 <_Balloc+0x20>
    bd06:	2601      	movs	r6, #1
    bd08:	40ae      	lsls	r6, r5
    bd0a:	1d72      	adds	r2, r6, #5
    bd0c:	0092      	lsls	r2, r2, #2
    bd0e:	2101      	movs	r1, #1
    bd10:	0020      	movs	r0, r4
    bd12:	f002 f90d 	bl	df30 <_calloc_r>
    bd16:	2800      	cmp	r0, #0
    bd18:	d0f3      	beq.n	bd02 <_Balloc+0x32>
    bd1a:	6045      	str	r5, [r0, #4]
    bd1c:	6086      	str	r6, [r0, #8]
    bd1e:	e7e4      	b.n	bcea <_Balloc+0x1a>

0000bd20 <_Bfree>:
    bd20:	2900      	cmp	r1, #0
    bd22:	d006      	beq.n	bd32 <_Bfree+0x12>
    bd24:	684b      	ldr	r3, [r1, #4]
    bd26:	009a      	lsls	r2, r3, #2
    bd28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    bd2a:	189b      	adds	r3, r3, r2
    bd2c:	681a      	ldr	r2, [r3, #0]
    bd2e:	600a      	str	r2, [r1, #0]
    bd30:	6019      	str	r1, [r3, #0]
    bd32:	4770      	bx	lr

0000bd34 <__multadd>:
    bd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd36:	46ce      	mov	lr, r9
    bd38:	4647      	mov	r7, r8
    bd3a:	4681      	mov	r9, r0
    bd3c:	0008      	movs	r0, r1
    bd3e:	b580      	push	{r7, lr}
    bd40:	000d      	movs	r5, r1
    bd42:	690c      	ldr	r4, [r1, #16]
    bd44:	001f      	movs	r7, r3
    bd46:	2100      	movs	r1, #0
    bd48:	3014      	adds	r0, #20
    bd4a:	6803      	ldr	r3, [r0, #0]
    bd4c:	3101      	adds	r1, #1
    bd4e:	041e      	lsls	r6, r3, #16
    bd50:	0c36      	lsrs	r6, r6, #16
    bd52:	4356      	muls	r6, r2
    bd54:	0c1b      	lsrs	r3, r3, #16
    bd56:	4353      	muls	r3, r2
    bd58:	19f6      	adds	r6, r6, r7
    bd5a:	0c37      	lsrs	r7, r6, #16
    bd5c:	19db      	adds	r3, r3, r7
    bd5e:	0436      	lsls	r6, r6, #16
    bd60:	0c1f      	lsrs	r7, r3, #16
    bd62:	0c36      	lsrs	r6, r6, #16
    bd64:	041b      	lsls	r3, r3, #16
    bd66:	199b      	adds	r3, r3, r6
    bd68:	c008      	stmia	r0!, {r3}
    bd6a:	428c      	cmp	r4, r1
    bd6c:	dced      	bgt.n	bd4a <__multadd+0x16>
    bd6e:	2f00      	cmp	r7, #0
    bd70:	d008      	beq.n	bd84 <__multadd+0x50>
    bd72:	68ab      	ldr	r3, [r5, #8]
    bd74:	429c      	cmp	r4, r3
    bd76:	da0a      	bge.n	bd8e <__multadd+0x5a>
    bd78:	1d23      	adds	r3, r4, #4
    bd7a:	009b      	lsls	r3, r3, #2
    bd7c:	18eb      	adds	r3, r5, r3
    bd7e:	3401      	adds	r4, #1
    bd80:	605f      	str	r7, [r3, #4]
    bd82:	612c      	str	r4, [r5, #16]
    bd84:	0028      	movs	r0, r5
    bd86:	bc0c      	pop	{r2, r3}
    bd88:	4690      	mov	r8, r2
    bd8a:	4699      	mov	r9, r3
    bd8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd8e:	686b      	ldr	r3, [r5, #4]
    bd90:	4648      	mov	r0, r9
    bd92:	1c59      	adds	r1, r3, #1
    bd94:	f7ff ff9c 	bl	bcd0 <_Balloc>
    bd98:	0029      	movs	r1, r5
    bd9a:	692b      	ldr	r3, [r5, #16]
    bd9c:	4680      	mov	r8, r0
    bd9e:	1c9a      	adds	r2, r3, #2
    bda0:	0092      	lsls	r2, r2, #2
    bda2:	310c      	adds	r1, #12
    bda4:	300c      	adds	r0, #12
    bda6:	f7fb fb63 	bl	7470 <memcpy>
    bdaa:	686b      	ldr	r3, [r5, #4]
    bdac:	009a      	lsls	r2, r3, #2
    bdae:	464b      	mov	r3, r9
    bdb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    bdb2:	189b      	adds	r3, r3, r2
    bdb4:	681a      	ldr	r2, [r3, #0]
    bdb6:	602a      	str	r2, [r5, #0]
    bdb8:	601d      	str	r5, [r3, #0]
    bdba:	4645      	mov	r5, r8
    bdbc:	e7dc      	b.n	bd78 <__multadd+0x44>
    bdbe:	46c0      	nop			; (mov r8, r8)

0000bdc0 <__s2b>:
    bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdc2:	4647      	mov	r7, r8
    bdc4:	46ce      	mov	lr, r9
    bdc6:	0006      	movs	r6, r0
    bdc8:	0018      	movs	r0, r3
    bdca:	b580      	push	{r7, lr}
    bdcc:	000d      	movs	r5, r1
    bdce:	3008      	adds	r0, #8
    bdd0:	2109      	movs	r1, #9
    bdd2:	4690      	mov	r8, r2
    bdd4:	001f      	movs	r7, r3
    bdd6:	f7f9 fb97 	bl	5508 <__divsi3>
    bdda:	2801      	cmp	r0, #1
    bddc:	dd38      	ble.n	be50 <__s2b+0x90>
    bdde:	2201      	movs	r2, #1
    bde0:	2100      	movs	r1, #0
    bde2:	0052      	lsls	r2, r2, #1
    bde4:	3101      	adds	r1, #1
    bde6:	4290      	cmp	r0, r2
    bde8:	dcfb      	bgt.n	bde2 <__s2b+0x22>
    bdea:	0030      	movs	r0, r6
    bdec:	f7ff ff70 	bl	bcd0 <_Balloc>
    bdf0:	9b08      	ldr	r3, [sp, #32]
    bdf2:	6143      	str	r3, [r0, #20]
    bdf4:	2301      	movs	r3, #1
    bdf6:	6103      	str	r3, [r0, #16]
    bdf8:	4643      	mov	r3, r8
    bdfa:	2b09      	cmp	r3, #9
    bdfc:	dd24      	ble.n	be48 <__s2b+0x88>
    bdfe:	2309      	movs	r3, #9
    be00:	4699      	mov	r9, r3
    be02:	44a9      	add	r9, r5
    be04:	464c      	mov	r4, r9
    be06:	4445      	add	r5, r8
    be08:	7823      	ldrb	r3, [r4, #0]
    be0a:	0001      	movs	r1, r0
    be0c:	3b30      	subs	r3, #48	; 0x30
    be0e:	220a      	movs	r2, #10
    be10:	0030      	movs	r0, r6
    be12:	3401      	adds	r4, #1
    be14:	f7ff ff8e 	bl	bd34 <__multadd>
    be18:	42ac      	cmp	r4, r5
    be1a:	d1f5      	bne.n	be08 <__s2b+0x48>
    be1c:	4645      	mov	r5, r8
    be1e:	3d08      	subs	r5, #8
    be20:	444d      	add	r5, r9
    be22:	4547      	cmp	r7, r8
    be24:	dd0c      	ble.n	be40 <__s2b+0x80>
    be26:	4643      	mov	r3, r8
    be28:	1aff      	subs	r7, r7, r3
    be2a:	19ef      	adds	r7, r5, r7
    be2c:	782b      	ldrb	r3, [r5, #0]
    be2e:	0001      	movs	r1, r0
    be30:	3b30      	subs	r3, #48	; 0x30
    be32:	220a      	movs	r2, #10
    be34:	0030      	movs	r0, r6
    be36:	3501      	adds	r5, #1
    be38:	f7ff ff7c 	bl	bd34 <__multadd>
    be3c:	42bd      	cmp	r5, r7
    be3e:	d1f5      	bne.n	be2c <__s2b+0x6c>
    be40:	bc0c      	pop	{r2, r3}
    be42:	4690      	mov	r8, r2
    be44:	4699      	mov	r9, r3
    be46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    be48:	2309      	movs	r3, #9
    be4a:	350a      	adds	r5, #10
    be4c:	4698      	mov	r8, r3
    be4e:	e7e8      	b.n	be22 <__s2b+0x62>
    be50:	2100      	movs	r1, #0
    be52:	e7ca      	b.n	bdea <__s2b+0x2a>

0000be54 <__hi0bits>:
    be54:	0003      	movs	r3, r0
    be56:	0c02      	lsrs	r2, r0, #16
    be58:	2000      	movs	r0, #0
    be5a:	2a00      	cmp	r2, #0
    be5c:	d101      	bne.n	be62 <__hi0bits+0xe>
    be5e:	041b      	lsls	r3, r3, #16
    be60:	3010      	adds	r0, #16
    be62:	0e1a      	lsrs	r2, r3, #24
    be64:	d101      	bne.n	be6a <__hi0bits+0x16>
    be66:	3008      	adds	r0, #8
    be68:	021b      	lsls	r3, r3, #8
    be6a:	0f1a      	lsrs	r2, r3, #28
    be6c:	d101      	bne.n	be72 <__hi0bits+0x1e>
    be6e:	3004      	adds	r0, #4
    be70:	011b      	lsls	r3, r3, #4
    be72:	0f9a      	lsrs	r2, r3, #30
    be74:	d101      	bne.n	be7a <__hi0bits+0x26>
    be76:	3002      	adds	r0, #2
    be78:	009b      	lsls	r3, r3, #2
    be7a:	2b00      	cmp	r3, #0
    be7c:	db03      	blt.n	be86 <__hi0bits+0x32>
    be7e:	3001      	adds	r0, #1
    be80:	005b      	lsls	r3, r3, #1
    be82:	d400      	bmi.n	be86 <__hi0bits+0x32>
    be84:	2020      	movs	r0, #32
    be86:	4770      	bx	lr

0000be88 <__lo0bits>:
    be88:	6803      	ldr	r3, [r0, #0]
    be8a:	075a      	lsls	r2, r3, #29
    be8c:	d009      	beq.n	bea2 <__lo0bits+0x1a>
    be8e:	2200      	movs	r2, #0
    be90:	07d9      	lsls	r1, r3, #31
    be92:	d404      	bmi.n	be9e <__lo0bits+0x16>
    be94:	079a      	lsls	r2, r3, #30
    be96:	d420      	bmi.n	beda <__lo0bits+0x52>
    be98:	2202      	movs	r2, #2
    be9a:	089b      	lsrs	r3, r3, #2
    be9c:	6003      	str	r3, [r0, #0]
    be9e:	0010      	movs	r0, r2
    bea0:	4770      	bx	lr
    bea2:	0419      	lsls	r1, r3, #16
    bea4:	2200      	movs	r2, #0
    bea6:	2900      	cmp	r1, #0
    bea8:	d101      	bne.n	beae <__lo0bits+0x26>
    beaa:	0c1b      	lsrs	r3, r3, #16
    beac:	3210      	adds	r2, #16
    beae:	21ff      	movs	r1, #255	; 0xff
    beb0:	4219      	tst	r1, r3
    beb2:	d101      	bne.n	beb8 <__lo0bits+0x30>
    beb4:	3208      	adds	r2, #8
    beb6:	0a1b      	lsrs	r3, r3, #8
    beb8:	0719      	lsls	r1, r3, #28
    beba:	d101      	bne.n	bec0 <__lo0bits+0x38>
    bebc:	3204      	adds	r2, #4
    bebe:	091b      	lsrs	r3, r3, #4
    bec0:	0799      	lsls	r1, r3, #30
    bec2:	d101      	bne.n	bec8 <__lo0bits+0x40>
    bec4:	3202      	adds	r2, #2
    bec6:	089b      	lsrs	r3, r3, #2
    bec8:	07d9      	lsls	r1, r3, #31
    beca:	d404      	bmi.n	bed6 <__lo0bits+0x4e>
    becc:	085b      	lsrs	r3, r3, #1
    bece:	d101      	bne.n	bed4 <__lo0bits+0x4c>
    bed0:	2220      	movs	r2, #32
    bed2:	e7e4      	b.n	be9e <__lo0bits+0x16>
    bed4:	3201      	adds	r2, #1
    bed6:	6003      	str	r3, [r0, #0]
    bed8:	e7e1      	b.n	be9e <__lo0bits+0x16>
    beda:	085b      	lsrs	r3, r3, #1
    bedc:	6003      	str	r3, [r0, #0]
    bede:	2201      	movs	r2, #1
    bee0:	e7dd      	b.n	be9e <__lo0bits+0x16>
    bee2:	46c0      	nop			; (mov r8, r8)

0000bee4 <__i2b>:
    bee4:	b510      	push	{r4, lr}
    bee6:	000c      	movs	r4, r1
    bee8:	2101      	movs	r1, #1
    beea:	f7ff fef1 	bl	bcd0 <_Balloc>
    beee:	2301      	movs	r3, #1
    bef0:	6144      	str	r4, [r0, #20]
    bef2:	6103      	str	r3, [r0, #16]
    bef4:	bd10      	pop	{r4, pc}
    bef6:	46c0      	nop			; (mov r8, r8)

0000bef8 <__multiply>:
    bef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    befa:	4657      	mov	r7, sl
    befc:	464e      	mov	r6, r9
    befe:	4645      	mov	r5, r8
    bf00:	46de      	mov	lr, fp
    bf02:	b5e0      	push	{r5, r6, r7, lr}
    bf04:	6914      	ldr	r4, [r2, #16]
    bf06:	690e      	ldr	r6, [r1, #16]
    bf08:	b085      	sub	sp, #20
    bf0a:	000f      	movs	r7, r1
    bf0c:	0015      	movs	r5, r2
    bf0e:	42a6      	cmp	r6, r4
    bf10:	da04      	bge.n	bf1c <__multiply+0x24>
    bf12:	0033      	movs	r3, r6
    bf14:	0017      	movs	r7, r2
    bf16:	0026      	movs	r6, r4
    bf18:	000d      	movs	r5, r1
    bf1a:	001c      	movs	r4, r3
    bf1c:	1933      	adds	r3, r6, r4
    bf1e:	4698      	mov	r8, r3
    bf20:	68bb      	ldr	r3, [r7, #8]
    bf22:	6879      	ldr	r1, [r7, #4]
    bf24:	4598      	cmp	r8, r3
    bf26:	dd00      	ble.n	bf2a <__multiply+0x32>
    bf28:	3101      	adds	r1, #1
    bf2a:	f7ff fed1 	bl	bcd0 <_Balloc>
    bf2e:	2214      	movs	r2, #20
    bf30:	0003      	movs	r3, r0
    bf32:	4694      	mov	ip, r2
    bf34:	4463      	add	r3, ip
    bf36:	469b      	mov	fp, r3
    bf38:	4643      	mov	r3, r8
    bf3a:	009b      	lsls	r3, r3, #2
    bf3c:	445b      	add	r3, fp
    bf3e:	0019      	movs	r1, r3
    bf40:	9302      	str	r3, [sp, #8]
    bf42:	9003      	str	r0, [sp, #12]
    bf44:	465b      	mov	r3, fp
    bf46:	2200      	movs	r2, #0
    bf48:	458b      	cmp	fp, r1
    bf4a:	d203      	bcs.n	bf54 <__multiply+0x5c>
    bf4c:	9902      	ldr	r1, [sp, #8]
    bf4e:	c304      	stmia	r3!, {r2}
    bf50:	4299      	cmp	r1, r3
    bf52:	d8fc      	bhi.n	bf4e <__multiply+0x56>
    bf54:	2314      	movs	r3, #20
    bf56:	00a4      	lsls	r4, r4, #2
    bf58:	469a      	mov	sl, r3
    bf5a:	3714      	adds	r7, #20
    bf5c:	0023      	movs	r3, r4
    bf5e:	46bc      	mov	ip, r7
    bf60:	44aa      	add	sl, r5
    bf62:	00b6      	lsls	r6, r6, #2
    bf64:	4453      	add	r3, sl
    bf66:	9700      	str	r7, [sp, #0]
    bf68:	44b4      	add	ip, r6
    bf6a:	9301      	str	r3, [sp, #4]
    bf6c:	459a      	cmp	sl, r3
    bf6e:	d24f      	bcs.n	c010 <__multiply+0x118>
    bf70:	4653      	mov	r3, sl
    bf72:	681b      	ldr	r3, [r3, #0]
    bf74:	041e      	lsls	r6, r3, #16
    bf76:	0c36      	lsrs	r6, r6, #16
    bf78:	d020      	beq.n	bfbc <__multiply+0xc4>
    bf7a:	465c      	mov	r4, fp
    bf7c:	2700      	movs	r7, #0
    bf7e:	9d00      	ldr	r5, [sp, #0]
    bf80:	0021      	movs	r1, r4
    bf82:	cc08      	ldmia	r4!, {r3}
    bf84:	cd04      	ldmia	r5!, {r2}
    bf86:	4699      	mov	r9, r3
    bf88:	4648      	mov	r0, r9
    bf8a:	0413      	lsls	r3, r2, #16
    bf8c:	0c1b      	lsrs	r3, r3, #16
    bf8e:	4373      	muls	r3, r6
    bf90:	0400      	lsls	r0, r0, #16
    bf92:	0c00      	lsrs	r0, r0, #16
    bf94:	181b      	adds	r3, r3, r0
    bf96:	19d8      	adds	r0, r3, r7
    bf98:	0c13      	lsrs	r3, r2, #16
    bf9a:	464a      	mov	r2, r9
    bf9c:	4373      	muls	r3, r6
    bf9e:	0c12      	lsrs	r2, r2, #16
    bfa0:	189b      	adds	r3, r3, r2
    bfa2:	0c02      	lsrs	r2, r0, #16
    bfa4:	189b      	adds	r3, r3, r2
    bfa6:	0402      	lsls	r2, r0, #16
    bfa8:	0c1f      	lsrs	r7, r3, #16
    bfaa:	0c12      	lsrs	r2, r2, #16
    bfac:	041b      	lsls	r3, r3, #16
    bfae:	4313      	orrs	r3, r2
    bfb0:	600b      	str	r3, [r1, #0]
    bfb2:	45ac      	cmp	ip, r5
    bfb4:	d8e4      	bhi.n	bf80 <__multiply+0x88>
    bfb6:	4653      	mov	r3, sl
    bfb8:	6027      	str	r7, [r4, #0]
    bfba:	681b      	ldr	r3, [r3, #0]
    bfbc:	0c1e      	lsrs	r6, r3, #16
    bfbe:	d020      	beq.n	c002 <__multiply+0x10a>
    bfc0:	465b      	mov	r3, fp
    bfc2:	2100      	movs	r1, #0
    bfc4:	681b      	ldr	r3, [r3, #0]
    bfc6:	465c      	mov	r4, fp
    bfc8:	0018      	movs	r0, r3
    bfca:	000f      	movs	r7, r1
    bfcc:	4662      	mov	r2, ip
    bfce:	9d00      	ldr	r5, [sp, #0]
    bfd0:	8829      	ldrh	r1, [r5, #0]
    bfd2:	0c00      	lsrs	r0, r0, #16
    bfd4:	4371      	muls	r1, r6
    bfd6:	1809      	adds	r1, r1, r0
    bfd8:	19c9      	adds	r1, r1, r7
    bfda:	041b      	lsls	r3, r3, #16
    bfdc:	0408      	lsls	r0, r1, #16
    bfde:	0c1b      	lsrs	r3, r3, #16
    bfe0:	4303      	orrs	r3, r0
    bfe2:	6023      	str	r3, [r4, #0]
    bfe4:	cd08      	ldmia	r5!, {r3}
    bfe6:	6860      	ldr	r0, [r4, #4]
    bfe8:	0c1b      	lsrs	r3, r3, #16
    bfea:	4373      	muls	r3, r6
    bfec:	0407      	lsls	r7, r0, #16
    bfee:	0c3f      	lsrs	r7, r7, #16
    bff0:	19db      	adds	r3, r3, r7
    bff2:	0c09      	lsrs	r1, r1, #16
    bff4:	185b      	adds	r3, r3, r1
    bff6:	0c1f      	lsrs	r7, r3, #16
    bff8:	3404      	adds	r4, #4
    bffa:	42aa      	cmp	r2, r5
    bffc:	d8e8      	bhi.n	bfd0 <__multiply+0xd8>
    bffe:	4694      	mov	ip, r2
    c000:	6023      	str	r3, [r4, #0]
    c002:	2304      	movs	r3, #4
    c004:	4699      	mov	r9, r3
    c006:	9b01      	ldr	r3, [sp, #4]
    c008:	44ca      	add	sl, r9
    c00a:	44cb      	add	fp, r9
    c00c:	4553      	cmp	r3, sl
    c00e:	d8af      	bhi.n	bf70 <__multiply+0x78>
    c010:	4643      	mov	r3, r8
    c012:	2b00      	cmp	r3, #0
    c014:	dd0e      	ble.n	c034 <__multiply+0x13c>
    c016:	9b02      	ldr	r3, [sp, #8]
    c018:	3b04      	subs	r3, #4
    c01a:	681a      	ldr	r2, [r3, #0]
    c01c:	2a00      	cmp	r2, #0
    c01e:	d109      	bne.n	c034 <__multiply+0x13c>
    c020:	4642      	mov	r2, r8
    c022:	e003      	b.n	c02c <__multiply+0x134>
    c024:	3b04      	subs	r3, #4
    c026:	6819      	ldr	r1, [r3, #0]
    c028:	2900      	cmp	r1, #0
    c02a:	d102      	bne.n	c032 <__multiply+0x13a>
    c02c:	3a01      	subs	r2, #1
    c02e:	2a00      	cmp	r2, #0
    c030:	d1f8      	bne.n	c024 <__multiply+0x12c>
    c032:	4690      	mov	r8, r2
    c034:	9b03      	ldr	r3, [sp, #12]
    c036:	4642      	mov	r2, r8
    c038:	0018      	movs	r0, r3
    c03a:	611a      	str	r2, [r3, #16]
    c03c:	b005      	add	sp, #20
    c03e:	bc3c      	pop	{r2, r3, r4, r5}
    c040:	4690      	mov	r8, r2
    c042:	4699      	mov	r9, r3
    c044:	46a2      	mov	sl, r4
    c046:	46ab      	mov	fp, r5
    c048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c04a:	46c0      	nop			; (mov r8, r8)

0000c04c <__pow5mult>:
    c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c04e:	4647      	mov	r7, r8
    c050:	46ce      	mov	lr, r9
    c052:	2303      	movs	r3, #3
    c054:	b580      	push	{r7, lr}
    c056:	4680      	mov	r8, r0
    c058:	000f      	movs	r7, r1
    c05a:	0014      	movs	r4, r2
    c05c:	4013      	ands	r3, r2
    c05e:	d13a      	bne.n	c0d6 <__pow5mult+0x8a>
    c060:	10a4      	asrs	r4, r4, #2
    c062:	003e      	movs	r6, r7
    c064:	2c00      	cmp	r4, #0
    c066:	d025      	beq.n	c0b4 <__pow5mult+0x68>
    c068:	4643      	mov	r3, r8
    c06a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    c06c:	2d00      	cmp	r5, #0
    c06e:	d03b      	beq.n	c0e8 <__pow5mult+0x9c>
    c070:	003e      	movs	r6, r7
    c072:	2300      	movs	r3, #0
    c074:	2701      	movs	r7, #1
    c076:	4699      	mov	r9, r3
    c078:	4227      	tst	r7, r4
    c07a:	d107      	bne.n	c08c <__pow5mult+0x40>
    c07c:	1064      	asrs	r4, r4, #1
    c07e:	d019      	beq.n	c0b4 <__pow5mult+0x68>
    c080:	6828      	ldr	r0, [r5, #0]
    c082:	2800      	cmp	r0, #0
    c084:	d01b      	beq.n	c0be <__pow5mult+0x72>
    c086:	0005      	movs	r5, r0
    c088:	4227      	tst	r7, r4
    c08a:	d0f7      	beq.n	c07c <__pow5mult+0x30>
    c08c:	002a      	movs	r2, r5
    c08e:	0031      	movs	r1, r6
    c090:	4640      	mov	r0, r8
    c092:	f7ff ff31 	bl	bef8 <__multiply>
    c096:	2e00      	cmp	r6, #0
    c098:	d01b      	beq.n	c0d2 <__pow5mult+0x86>
    c09a:	4642      	mov	r2, r8
    c09c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    c09e:	6873      	ldr	r3, [r6, #4]
    c0a0:	4694      	mov	ip, r2
    c0a2:	009b      	lsls	r3, r3, #2
    c0a4:	4463      	add	r3, ip
    c0a6:	681a      	ldr	r2, [r3, #0]
    c0a8:	1064      	asrs	r4, r4, #1
    c0aa:	6032      	str	r2, [r6, #0]
    c0ac:	601e      	str	r6, [r3, #0]
    c0ae:	0006      	movs	r6, r0
    c0b0:	2c00      	cmp	r4, #0
    c0b2:	d1e5      	bne.n	c080 <__pow5mult+0x34>
    c0b4:	0030      	movs	r0, r6
    c0b6:	bc0c      	pop	{r2, r3}
    c0b8:	4690      	mov	r8, r2
    c0ba:	4699      	mov	r9, r3
    c0bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c0be:	002a      	movs	r2, r5
    c0c0:	0029      	movs	r1, r5
    c0c2:	4640      	mov	r0, r8
    c0c4:	f7ff ff18 	bl	bef8 <__multiply>
    c0c8:	464b      	mov	r3, r9
    c0ca:	6028      	str	r0, [r5, #0]
    c0cc:	6003      	str	r3, [r0, #0]
    c0ce:	0005      	movs	r5, r0
    c0d0:	e7da      	b.n	c088 <__pow5mult+0x3c>
    c0d2:	0006      	movs	r6, r0
    c0d4:	e7d2      	b.n	c07c <__pow5mult+0x30>
    c0d6:	4a0b      	ldr	r2, [pc, #44]	; (c104 <__pow5mult+0xb8>)
    c0d8:	3b01      	subs	r3, #1
    c0da:	009b      	lsls	r3, r3, #2
    c0dc:	589a      	ldr	r2, [r3, r2]
    c0de:	2300      	movs	r3, #0
    c0e0:	f7ff fe28 	bl	bd34 <__multadd>
    c0e4:	0007      	movs	r7, r0
    c0e6:	e7bb      	b.n	c060 <__pow5mult+0x14>
    c0e8:	2101      	movs	r1, #1
    c0ea:	4640      	mov	r0, r8
    c0ec:	f7ff fdf0 	bl	bcd0 <_Balloc>
    c0f0:	4b05      	ldr	r3, [pc, #20]	; (c108 <__pow5mult+0xbc>)
    c0f2:	0005      	movs	r5, r0
    c0f4:	6143      	str	r3, [r0, #20]
    c0f6:	2301      	movs	r3, #1
    c0f8:	6103      	str	r3, [r0, #16]
    c0fa:	4643      	mov	r3, r8
    c0fc:	6498      	str	r0, [r3, #72]	; 0x48
    c0fe:	2300      	movs	r3, #0
    c100:	6003      	str	r3, [r0, #0]
    c102:	e7b5      	b.n	c070 <__pow5mult+0x24>
    c104:	000121a8 	.word	0x000121a8
    c108:	00000271 	.word	0x00000271

0000c10c <__lshift>:
    c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c10e:	464e      	mov	r6, r9
    c110:	4645      	mov	r5, r8
    c112:	46de      	mov	lr, fp
    c114:	4657      	mov	r7, sl
    c116:	b5e0      	push	{r5, r6, r7, lr}
    c118:	000e      	movs	r6, r1
    c11a:	6933      	ldr	r3, [r6, #16]
    c11c:	1154      	asrs	r4, r2, #5
    c11e:	4698      	mov	r8, r3
    c120:	44a0      	add	r8, r4
    c122:	4643      	mov	r3, r8
    c124:	1c5d      	adds	r5, r3, #1
    c126:	68b3      	ldr	r3, [r6, #8]
    c128:	4683      	mov	fp, r0
    c12a:	4691      	mov	r9, r2
    c12c:	6849      	ldr	r1, [r1, #4]
    c12e:	429d      	cmp	r5, r3
    c130:	dd03      	ble.n	c13a <__lshift+0x2e>
    c132:	3101      	adds	r1, #1
    c134:	005b      	lsls	r3, r3, #1
    c136:	429d      	cmp	r5, r3
    c138:	dcfb      	bgt.n	c132 <__lshift+0x26>
    c13a:	4658      	mov	r0, fp
    c13c:	f7ff fdc8 	bl	bcd0 <_Balloc>
    c140:	0003      	movs	r3, r0
    c142:	4684      	mov	ip, r0
    c144:	3314      	adds	r3, #20
    c146:	2c00      	cmp	r4, #0
    c148:	dd06      	ble.n	c158 <__lshift+0x4c>
    c14a:	2100      	movs	r1, #0
    c14c:	00a4      	lsls	r4, r4, #2
    c14e:	001a      	movs	r2, r3
    c150:	191b      	adds	r3, r3, r4
    c152:	c202      	stmia	r2!, {r1}
    c154:	4293      	cmp	r3, r2
    c156:	d1fc      	bne.n	c152 <__lshift+0x46>
    c158:	6932      	ldr	r2, [r6, #16]
    c15a:	4648      	mov	r0, r9
    c15c:	0097      	lsls	r7, r2, #2
    c15e:	0031      	movs	r1, r6
    c160:	221f      	movs	r2, #31
    c162:	3114      	adds	r1, #20
    c164:	4010      	ands	r0, r2
    c166:	19cf      	adds	r7, r1, r7
    c168:	4681      	mov	r9, r0
    c16a:	2800      	cmp	r0, #0
    c16c:	d025      	beq.n	c1ba <__lshift+0xae>
    c16e:	2220      	movs	r2, #32
    c170:	1a12      	subs	r2, r2, r0
    c172:	4692      	mov	sl, r2
    c174:	2200      	movs	r2, #0
    c176:	4648      	mov	r0, r9
    c178:	680c      	ldr	r4, [r1, #0]
    c17a:	4084      	lsls	r4, r0
    c17c:	4650      	mov	r0, sl
    c17e:	4314      	orrs	r4, r2
    c180:	601c      	str	r4, [r3, #0]
    c182:	c904      	ldmia	r1!, {r2}
    c184:	3304      	adds	r3, #4
    c186:	40c2      	lsrs	r2, r0
    c188:	428f      	cmp	r7, r1
    c18a:	d8f4      	bhi.n	c176 <__lshift+0x6a>
    c18c:	601a      	str	r2, [r3, #0]
    c18e:	2a00      	cmp	r2, #0
    c190:	d001      	beq.n	c196 <__lshift+0x8a>
    c192:	4645      	mov	r5, r8
    c194:	3502      	adds	r5, #2
    c196:	4663      	mov	r3, ip
    c198:	3d01      	subs	r5, #1
    c19a:	611d      	str	r5, [r3, #16]
    c19c:	6873      	ldr	r3, [r6, #4]
    c19e:	4660      	mov	r0, ip
    c1a0:	009a      	lsls	r2, r3, #2
    c1a2:	465b      	mov	r3, fp
    c1a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c1a6:	189b      	adds	r3, r3, r2
    c1a8:	681a      	ldr	r2, [r3, #0]
    c1aa:	6032      	str	r2, [r6, #0]
    c1ac:	601e      	str	r6, [r3, #0]
    c1ae:	bc3c      	pop	{r2, r3, r4, r5}
    c1b0:	4690      	mov	r8, r2
    c1b2:	4699      	mov	r9, r3
    c1b4:	46a2      	mov	sl, r4
    c1b6:	46ab      	mov	fp, r5
    c1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1ba:	c904      	ldmia	r1!, {r2}
    c1bc:	c304      	stmia	r3!, {r2}
    c1be:	428f      	cmp	r7, r1
    c1c0:	d9e9      	bls.n	c196 <__lshift+0x8a>
    c1c2:	c904      	ldmia	r1!, {r2}
    c1c4:	c304      	stmia	r3!, {r2}
    c1c6:	428f      	cmp	r7, r1
    c1c8:	d8f7      	bhi.n	c1ba <__lshift+0xae>
    c1ca:	e7e4      	b.n	c196 <__lshift+0x8a>

0000c1cc <__mcmp>:
    c1cc:	690a      	ldr	r2, [r1, #16]
    c1ce:	6903      	ldr	r3, [r0, #16]
    c1d0:	b530      	push	{r4, r5, lr}
    c1d2:	0005      	movs	r5, r0
    c1d4:	1a98      	subs	r0, r3, r2
    c1d6:	d111      	bne.n	c1fc <__mcmp+0x30>
    c1d8:	0092      	lsls	r2, r2, #2
    c1da:	3514      	adds	r5, #20
    c1dc:	3114      	adds	r1, #20
    c1de:	18ab      	adds	r3, r5, r2
    c1e0:	1889      	adds	r1, r1, r2
    c1e2:	e001      	b.n	c1e8 <__mcmp+0x1c>
    c1e4:	429d      	cmp	r5, r3
    c1e6:	d209      	bcs.n	c1fc <__mcmp+0x30>
    c1e8:	3b04      	subs	r3, #4
    c1ea:	3904      	subs	r1, #4
    c1ec:	681c      	ldr	r4, [r3, #0]
    c1ee:	680a      	ldr	r2, [r1, #0]
    c1f0:	4294      	cmp	r4, r2
    c1f2:	d0f7      	beq.n	c1e4 <__mcmp+0x18>
    c1f4:	4294      	cmp	r4, r2
    c1f6:	4180      	sbcs	r0, r0
    c1f8:	2201      	movs	r2, #1
    c1fa:	4310      	orrs	r0, r2
    c1fc:	bd30      	pop	{r4, r5, pc}
    c1fe:	46c0      	nop			; (mov r8, r8)

0000c200 <__mdiff>:
    c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c202:	4645      	mov	r5, r8
    c204:	46de      	mov	lr, fp
    c206:	4657      	mov	r7, sl
    c208:	464e      	mov	r6, r9
    c20a:	0014      	movs	r4, r2
    c20c:	690b      	ldr	r3, [r1, #16]
    c20e:	6912      	ldr	r2, [r2, #16]
    c210:	b5e0      	push	{r5, r6, r7, lr}
    c212:	4688      	mov	r8, r1
    c214:	1a9d      	subs	r5, r3, r2
    c216:	d11a      	bne.n	c24e <__mdiff+0x4e>
    c218:	000f      	movs	r7, r1
    c21a:	2114      	movs	r1, #20
    c21c:	468c      	mov	ip, r1
    c21e:	0092      	lsls	r2, r2, #2
    c220:	3714      	adds	r7, #20
    c222:	44a4      	add	ip, r4
    c224:	18bb      	adds	r3, r7, r2
    c226:	4462      	add	r2, ip
    c228:	e002      	b.n	c230 <__mdiff+0x30>
    c22a:	429f      	cmp	r7, r3
    c22c:	d300      	bcc.n	c230 <__mdiff+0x30>
    c22e:	e070      	b.n	c312 <__mdiff+0x112>
    c230:	3b04      	subs	r3, #4
    c232:	3a04      	subs	r2, #4
    c234:	681e      	ldr	r6, [r3, #0]
    c236:	6811      	ldr	r1, [r2, #0]
    c238:	428e      	cmp	r6, r1
    c23a:	d0f6      	beq.n	c22a <__mdiff+0x2a>
    c23c:	d300      	bcc.n	c240 <__mdiff+0x40>
    c23e:	e071      	b.n	c324 <__mdiff+0x124>
    c240:	4643      	mov	r3, r8
    c242:	003e      	movs	r6, r7
    c244:	46a0      	mov	r8, r4
    c246:	4667      	mov	r7, ip
    c248:	001c      	movs	r4, r3
    c24a:	2501      	movs	r5, #1
    c24c:	e006      	b.n	c25c <__mdiff+0x5c>
    c24e:	2d00      	cmp	r5, #0
    c250:	db6a      	blt.n	c328 <__mdiff+0x128>
    c252:	4647      	mov	r7, r8
    c254:	0026      	movs	r6, r4
    c256:	2500      	movs	r5, #0
    c258:	3714      	adds	r7, #20
    c25a:	3614      	adds	r6, #20
    c25c:	4643      	mov	r3, r8
    c25e:	6859      	ldr	r1, [r3, #4]
    c260:	f7ff fd36 	bl	bcd0 <_Balloc>
    c264:	4643      	mov	r3, r8
    c266:	4681      	mov	r9, r0
    c268:	60c5      	str	r5, [r0, #12]
    c26a:	6918      	ldr	r0, [r3, #16]
    c26c:	464d      	mov	r5, r9
    c26e:	0083      	lsls	r3, r0, #2
    c270:	469c      	mov	ip, r3
    c272:	6923      	ldr	r3, [r4, #16]
    c274:	44bc      	add	ip, r7
    c276:	009b      	lsls	r3, r3, #2
    c278:	4698      	mov	r8, r3
    c27a:	2300      	movs	r3, #0
    c27c:	44b0      	add	r8, r6
    c27e:	3514      	adds	r5, #20
    c280:	469a      	mov	sl, r3
    c282:	e000      	b.n	c286 <__mdiff+0x86>
    c284:	0027      	movs	r7, r4
    c286:	ce04      	ldmia	r6!, {r2}
    c288:	003c      	movs	r4, r7
    c28a:	4693      	mov	fp, r2
    c28c:	4659      	mov	r1, fp
    c28e:	cc08      	ldmia	r4!, {r3}
    c290:	0409      	lsls	r1, r1, #16
    c292:	041a      	lsls	r2, r3, #16
    c294:	0c12      	lsrs	r2, r2, #16
    c296:	4452      	add	r2, sl
    c298:	0c09      	lsrs	r1, r1, #16
    c29a:	1a52      	subs	r2, r2, r1
    c29c:	0c19      	lsrs	r1, r3, #16
    c29e:	465b      	mov	r3, fp
    c2a0:	0c1b      	lsrs	r3, r3, #16
    c2a2:	1acb      	subs	r3, r1, r3
    c2a4:	1411      	asrs	r1, r2, #16
    c2a6:	185b      	adds	r3, r3, r1
    c2a8:	0412      	lsls	r2, r2, #16
    c2aa:	1419      	asrs	r1, r3, #16
    c2ac:	0c12      	lsrs	r2, r2, #16
    c2ae:	041b      	lsls	r3, r3, #16
    c2b0:	468a      	mov	sl, r1
    c2b2:	4313      	orrs	r3, r2
    c2b4:	1d29      	adds	r1, r5, #4
    c2b6:	602b      	str	r3, [r5, #0]
    c2b8:	000d      	movs	r5, r1
    c2ba:	45b0      	cmp	r8, r6
    c2bc:	d8e2      	bhi.n	c284 <__mdiff+0x84>
    c2be:	45a4      	cmp	ip, r4
    c2c0:	d916      	bls.n	c2f0 <__mdiff+0xf0>
    c2c2:	cc08      	ldmia	r4!, {r3}
    c2c4:	041a      	lsls	r2, r3, #16
    c2c6:	0c12      	lsrs	r2, r2, #16
    c2c8:	4452      	add	r2, sl
    c2ca:	1416      	asrs	r6, r2, #16
    c2cc:	0c1b      	lsrs	r3, r3, #16
    c2ce:	199b      	adds	r3, r3, r6
    c2d0:	0412      	lsls	r2, r2, #16
    c2d2:	141e      	asrs	r6, r3, #16
    c2d4:	0c12      	lsrs	r2, r2, #16
    c2d6:	041b      	lsls	r3, r3, #16
    c2d8:	4313      	orrs	r3, r2
    c2da:	46b2      	mov	sl, r6
    c2dc:	c508      	stmia	r5!, {r3}
    c2de:	45a4      	cmp	ip, r4
    c2e0:	d8ef      	bhi.n	c2c2 <__mdiff+0xc2>
    c2e2:	4662      	mov	r2, ip
    c2e4:	2403      	movs	r4, #3
    c2e6:	1bd2      	subs	r2, r2, r7
    c2e8:	3a05      	subs	r2, #5
    c2ea:	43a2      	bics	r2, r4
    c2ec:	3204      	adds	r2, #4
    c2ee:	1889      	adds	r1, r1, r2
    c2f0:	3904      	subs	r1, #4
    c2f2:	2b00      	cmp	r3, #0
    c2f4:	d104      	bne.n	c300 <__mdiff+0x100>
    c2f6:	3904      	subs	r1, #4
    c2f8:	680b      	ldr	r3, [r1, #0]
    c2fa:	3801      	subs	r0, #1
    c2fc:	2b00      	cmp	r3, #0
    c2fe:	d0fa      	beq.n	c2f6 <__mdiff+0xf6>
    c300:	464b      	mov	r3, r9
    c302:	6118      	str	r0, [r3, #16]
    c304:	4648      	mov	r0, r9
    c306:	bc3c      	pop	{r2, r3, r4, r5}
    c308:	4690      	mov	r8, r2
    c30a:	4699      	mov	r9, r3
    c30c:	46a2      	mov	sl, r4
    c30e:	46ab      	mov	fp, r5
    c310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c312:	2100      	movs	r1, #0
    c314:	f7ff fcdc 	bl	bcd0 <_Balloc>
    c318:	2301      	movs	r3, #1
    c31a:	6103      	str	r3, [r0, #16]
    c31c:	2300      	movs	r3, #0
    c31e:	4681      	mov	r9, r0
    c320:	6143      	str	r3, [r0, #20]
    c322:	e7ef      	b.n	c304 <__mdiff+0x104>
    c324:	4666      	mov	r6, ip
    c326:	e799      	b.n	c25c <__mdiff+0x5c>
    c328:	0027      	movs	r7, r4
    c32a:	000e      	movs	r6, r1
    c32c:	46a0      	mov	r8, r4
    c32e:	3714      	adds	r7, #20
    c330:	3614      	adds	r6, #20
    c332:	000c      	movs	r4, r1
    c334:	2501      	movs	r5, #1
    c336:	e791      	b.n	c25c <__mdiff+0x5c>

0000c338 <__ulp>:
    c338:	4b10      	ldr	r3, [pc, #64]	; (c37c <__ulp+0x44>)
    c33a:	b510      	push	{r4, lr}
    c33c:	4019      	ands	r1, r3
    c33e:	4b10      	ldr	r3, [pc, #64]	; (c380 <__ulp+0x48>)
    c340:	469c      	mov	ip, r3
    c342:	4461      	add	r1, ip
    c344:	2900      	cmp	r1, #0
    c346:	dd04      	ble.n	c352 <__ulp+0x1a>
    c348:	2200      	movs	r2, #0
    c34a:	000b      	movs	r3, r1
    c34c:	0010      	movs	r0, r2
    c34e:	0019      	movs	r1, r3
    c350:	bd10      	pop	{r4, pc}
    c352:	4249      	negs	r1, r1
    c354:	1509      	asrs	r1, r1, #20
    c356:	2200      	movs	r2, #0
    c358:	2300      	movs	r3, #0
    c35a:	2913      	cmp	r1, #19
    c35c:	dd08      	ble.n	c370 <__ulp+0x38>
    c35e:	3914      	subs	r1, #20
    c360:	2001      	movs	r0, #1
    c362:	291e      	cmp	r1, #30
    c364:	dc02      	bgt.n	c36c <__ulp+0x34>
    c366:	241f      	movs	r4, #31
    c368:	1a61      	subs	r1, r4, r1
    c36a:	4088      	lsls	r0, r1
    c36c:	0002      	movs	r2, r0
    c36e:	e7ed      	b.n	c34c <__ulp+0x14>
    c370:	2080      	movs	r0, #128	; 0x80
    c372:	0300      	lsls	r0, r0, #12
    c374:	4108      	asrs	r0, r1
    c376:	0003      	movs	r3, r0
    c378:	e7e8      	b.n	c34c <__ulp+0x14>
    c37a:	46c0      	nop			; (mov r8, r8)
    c37c:	7ff00000 	.word	0x7ff00000
    c380:	fcc00000 	.word	0xfcc00000

0000c384 <__b2d>:
    c384:	b5f0      	push	{r4, r5, r6, r7, lr}
    c386:	464f      	mov	r7, r9
    c388:	4646      	mov	r6, r8
    c38a:	46d6      	mov	lr, sl
    c38c:	6904      	ldr	r4, [r0, #16]
    c38e:	b5c0      	push	{r6, r7, lr}
    c390:	00a4      	lsls	r4, r4, #2
    c392:	0006      	movs	r6, r0
    c394:	46a1      	mov	r9, r4
    c396:	3614      	adds	r6, #20
    c398:	44b1      	add	r9, r6
    c39a:	464b      	mov	r3, r9
    c39c:	4688      	mov	r8, r1
    c39e:	1f1f      	subs	r7, r3, #4
    c3a0:	683d      	ldr	r5, [r7, #0]
    c3a2:	0028      	movs	r0, r5
    c3a4:	f7ff fd56 	bl	be54 <__hi0bits>
    c3a8:	2120      	movs	r1, #32
    c3aa:	4643      	mov	r3, r8
    c3ac:	1a0a      	subs	r2, r1, r0
    c3ae:	601a      	str	r2, [r3, #0]
    c3b0:	280a      	cmp	r0, #10
    c3b2:	dc20      	bgt.n	c3f6 <__b2d+0x72>
    c3b4:	3915      	subs	r1, #21
    c3b6:	1a0b      	subs	r3, r1, r0
    c3b8:	469a      	mov	sl, r3
    c3ba:	002b      	movs	r3, r5
    c3bc:	4652      	mov	r2, sl
    c3be:	4926      	ldr	r1, [pc, #152]	; (c458 <__b2d+0xd4>)
    c3c0:	40d3      	lsrs	r3, r2
    c3c2:	4688      	mov	r8, r1
    c3c4:	0019      	movs	r1, r3
    c3c6:	4644      	mov	r4, r8
    c3c8:	4321      	orrs	r1, r4
    c3ca:	000b      	movs	r3, r1
    c3cc:	2100      	movs	r1, #0
    c3ce:	468c      	mov	ip, r1
    c3d0:	42be      	cmp	r6, r7
    c3d2:	d204      	bcs.n	c3de <__b2d+0x5a>
    c3d4:	464c      	mov	r4, r9
    c3d6:	3c08      	subs	r4, #8
    c3d8:	6824      	ldr	r4, [r4, #0]
    c3da:	40d4      	lsrs	r4, r2
    c3dc:	46a4      	mov	ip, r4
    c3de:	3015      	adds	r0, #21
    c3e0:	4085      	lsls	r5, r0
    c3e2:	4661      	mov	r1, ip
    c3e4:	4329      	orrs	r1, r5
    c3e6:	000a      	movs	r2, r1
    c3e8:	0010      	movs	r0, r2
    c3ea:	0019      	movs	r1, r3
    c3ec:	bc1c      	pop	{r2, r3, r4}
    c3ee:	4690      	mov	r8, r2
    c3f0:	4699      	mov	r9, r3
    c3f2:	46a2      	mov	sl, r4
    c3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c3f6:	42be      	cmp	r6, r7
    c3f8:	d21b      	bcs.n	c432 <__b2d+0xae>
    c3fa:	2308      	movs	r3, #8
    c3fc:	425b      	negs	r3, r3
    c3fe:	469c      	mov	ip, r3
    c400:	44cc      	add	ip, r9
    c402:	4663      	mov	r3, ip
    c404:	380b      	subs	r0, #11
    c406:	681f      	ldr	r7, [r3, #0]
    c408:	2800      	cmp	r0, #0
    c40a:	d016      	beq.n	c43a <__b2d+0xb6>
    c40c:	4085      	lsls	r5, r0
    c40e:	4b12      	ldr	r3, [pc, #72]	; (c458 <__b2d+0xd4>)
    c410:	1a09      	subs	r1, r1, r0
    c412:	431d      	orrs	r5, r3
    c414:	003b      	movs	r3, r7
    c416:	40cb      	lsrs	r3, r1
    c418:	001c      	movs	r4, r3
    c41a:	432c      	orrs	r4, r5
    c41c:	0023      	movs	r3, r4
    c41e:	4566      	cmp	r6, ip
    c420:	d217      	bcs.n	c452 <__b2d+0xce>
    c422:	464c      	mov	r4, r9
    c424:	3c0c      	subs	r4, #12
    c426:	6824      	ldr	r4, [r4, #0]
    c428:	4087      	lsls	r7, r0
    c42a:	40cc      	lsrs	r4, r1
    c42c:	4327      	orrs	r7, r4
    c42e:	003a      	movs	r2, r7
    c430:	e7da      	b.n	c3e8 <__b2d+0x64>
    c432:	380b      	subs	r0, #11
    c434:	2700      	movs	r7, #0
    c436:	2800      	cmp	r0, #0
    c438:	d104      	bne.n	c444 <__b2d+0xc0>
    c43a:	4907      	ldr	r1, [pc, #28]	; (c458 <__b2d+0xd4>)
    c43c:	003a      	movs	r2, r7
    c43e:	4329      	orrs	r1, r5
    c440:	000b      	movs	r3, r1
    c442:	e7d1      	b.n	c3e8 <__b2d+0x64>
    c444:	4085      	lsls	r5, r0
    c446:	2700      	movs	r7, #0
    c448:	4903      	ldr	r1, [pc, #12]	; (c458 <__b2d+0xd4>)
    c44a:	003a      	movs	r2, r7
    c44c:	4329      	orrs	r1, r5
    c44e:	000b      	movs	r3, r1
    c450:	e7ca      	b.n	c3e8 <__b2d+0x64>
    c452:	4087      	lsls	r7, r0
    c454:	003a      	movs	r2, r7
    c456:	e7c7      	b.n	c3e8 <__b2d+0x64>
    c458:	3ff00000 	.word	0x3ff00000

0000c45c <__d2b>:
    c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c45e:	2101      	movs	r1, #1
    c460:	001c      	movs	r4, r3
    c462:	b083      	sub	sp, #12
    c464:	9e08      	ldr	r6, [sp, #32]
    c466:	0015      	movs	r5, r2
    c468:	f7ff fc32 	bl	bcd0 <_Balloc>
    c46c:	0323      	lsls	r3, r4, #12
    c46e:	0064      	lsls	r4, r4, #1
    c470:	0007      	movs	r7, r0
    c472:	0b1b      	lsrs	r3, r3, #12
    c474:	0d64      	lsrs	r4, r4, #21
    c476:	d002      	beq.n	c47e <__d2b+0x22>
    c478:	2280      	movs	r2, #128	; 0x80
    c47a:	0352      	lsls	r2, r2, #13
    c47c:	4313      	orrs	r3, r2
    c47e:	9301      	str	r3, [sp, #4]
    c480:	2d00      	cmp	r5, #0
    c482:	d019      	beq.n	c4b8 <__d2b+0x5c>
    c484:	4668      	mov	r0, sp
    c486:	9500      	str	r5, [sp, #0]
    c488:	f7ff fcfe 	bl	be88 <__lo0bits>
    c48c:	2800      	cmp	r0, #0
    c48e:	d130      	bne.n	c4f2 <__d2b+0x96>
    c490:	9b00      	ldr	r3, [sp, #0]
    c492:	617b      	str	r3, [r7, #20]
    c494:	9b01      	ldr	r3, [sp, #4]
    c496:	61bb      	str	r3, [r7, #24]
    c498:	1e5a      	subs	r2, r3, #1
    c49a:	4193      	sbcs	r3, r2
    c49c:	1c5d      	adds	r5, r3, #1
    c49e:	613d      	str	r5, [r7, #16]
    c4a0:	2c00      	cmp	r4, #0
    c4a2:	d014      	beq.n	c4ce <__d2b+0x72>
    c4a4:	4b19      	ldr	r3, [pc, #100]	; (c50c <__d2b+0xb0>)
    c4a6:	469c      	mov	ip, r3
    c4a8:	2335      	movs	r3, #53	; 0x35
    c4aa:	4464      	add	r4, ip
    c4ac:	1824      	adds	r4, r4, r0
    c4ae:	1a18      	subs	r0, r3, r0
    c4b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c4b2:	6034      	str	r4, [r6, #0]
    c4b4:	6018      	str	r0, [r3, #0]
    c4b6:	e019      	b.n	c4ec <__d2b+0x90>
    c4b8:	a801      	add	r0, sp, #4
    c4ba:	f7ff fce5 	bl	be88 <__lo0bits>
    c4be:	9b01      	ldr	r3, [sp, #4]
    c4c0:	3020      	adds	r0, #32
    c4c2:	617b      	str	r3, [r7, #20]
    c4c4:	2301      	movs	r3, #1
    c4c6:	2501      	movs	r5, #1
    c4c8:	613b      	str	r3, [r7, #16]
    c4ca:	2c00      	cmp	r4, #0
    c4cc:	d1ea      	bne.n	c4a4 <__d2b+0x48>
    c4ce:	4b10      	ldr	r3, [pc, #64]	; (c510 <__d2b+0xb4>)
    c4d0:	469c      	mov	ip, r3
    c4d2:	4b10      	ldr	r3, [pc, #64]	; (c514 <__d2b+0xb8>)
    c4d4:	4460      	add	r0, ip
    c4d6:	18eb      	adds	r3, r5, r3
    c4d8:	009b      	lsls	r3, r3, #2
    c4da:	18fb      	adds	r3, r7, r3
    c4dc:	6030      	str	r0, [r6, #0]
    c4de:	6958      	ldr	r0, [r3, #20]
    c4e0:	f7ff fcb8 	bl	be54 <__hi0bits>
    c4e4:	016b      	lsls	r3, r5, #5
    c4e6:	1a18      	subs	r0, r3, r0
    c4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c4ea:	6018      	str	r0, [r3, #0]
    c4ec:	0038      	movs	r0, r7
    c4ee:	b003      	add	sp, #12
    c4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4f2:	9b01      	ldr	r3, [sp, #4]
    c4f4:	2220      	movs	r2, #32
    c4f6:	0019      	movs	r1, r3
    c4f8:	1a12      	subs	r2, r2, r0
    c4fa:	4091      	lsls	r1, r2
    c4fc:	000a      	movs	r2, r1
    c4fe:	40c3      	lsrs	r3, r0
    c500:	9900      	ldr	r1, [sp, #0]
    c502:	9301      	str	r3, [sp, #4]
    c504:	430a      	orrs	r2, r1
    c506:	617a      	str	r2, [r7, #20]
    c508:	e7c5      	b.n	c496 <__d2b+0x3a>
    c50a:	46c0      	nop			; (mov r8, r8)
    c50c:	fffffbcd 	.word	0xfffffbcd
    c510:	fffffbce 	.word	0xfffffbce
    c514:	3fffffff 	.word	0x3fffffff

0000c518 <__ratio>:
    c518:	b5f0      	push	{r4, r5, r6, r7, lr}
    c51a:	46ce      	mov	lr, r9
    c51c:	4647      	mov	r7, r8
    c51e:	b580      	push	{r7, lr}
    c520:	b085      	sub	sp, #20
    c522:	4688      	mov	r8, r1
    c524:	a902      	add	r1, sp, #8
    c526:	4681      	mov	r9, r0
    c528:	f7ff ff2c 	bl	c384 <__b2d>
    c52c:	0006      	movs	r6, r0
    c52e:	000f      	movs	r7, r1
    c530:	4640      	mov	r0, r8
    c532:	a903      	add	r1, sp, #12
    c534:	f7ff ff26 	bl	c384 <__b2d>
    c538:	464b      	mov	r3, r9
    c53a:	691b      	ldr	r3, [r3, #16]
    c53c:	9000      	str	r0, [sp, #0]
    c53e:	9101      	str	r1, [sp, #4]
    c540:	469c      	mov	ip, r3
    c542:	4643      	mov	r3, r8
    c544:	691b      	ldr	r3, [r3, #16]
    c546:	4698      	mov	r8, r3
    c548:	4663      	mov	r3, ip
    c54a:	4642      	mov	r2, r8
    c54c:	1a9b      	subs	r3, r3, r2
    c54e:	015b      	lsls	r3, r3, #5
    c550:	469c      	mov	ip, r3
    c552:	9a03      	ldr	r2, [sp, #12]
    c554:	9b02      	ldr	r3, [sp, #8]
    c556:	1a9b      	subs	r3, r3, r2
    c558:	4698      	mov	r8, r3
    c55a:	44c4      	add	ip, r8
    c55c:	4663      	mov	r3, ip
    c55e:	2b00      	cmp	r3, #0
    c560:	dd0d      	ble.n	c57e <__ratio+0x66>
    c562:	051b      	lsls	r3, r3, #20
    c564:	19dd      	adds	r5, r3, r7
    c566:	002f      	movs	r7, r5
    c568:	0002      	movs	r2, r0
    c56a:	000b      	movs	r3, r1
    c56c:	0030      	movs	r0, r6
    c56e:	0039      	movs	r1, r7
    c570:	f7f9 fb58 	bl	5c24 <__aeabi_ddiv>
    c574:	b005      	add	sp, #20
    c576:	bc0c      	pop	{r2, r3}
    c578:	4690      	mov	r8, r2
    c57a:	4699      	mov	r9, r3
    c57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c57e:	4663      	mov	r3, ip
    c580:	0518      	lsls	r0, r3, #20
    c582:	1a0b      	subs	r3, r1, r0
    c584:	9301      	str	r3, [sp, #4]
    c586:	9800      	ldr	r0, [sp, #0]
    c588:	9901      	ldr	r1, [sp, #4]
    c58a:	e7ed      	b.n	c568 <__ratio+0x50>

0000c58c <__copybits>:
    c58c:	0013      	movs	r3, r2
    c58e:	b570      	push	{r4, r5, r6, lr}
    c590:	1e4c      	subs	r4, r1, #1
    c592:	6911      	ldr	r1, [r2, #16]
    c594:	1164      	asrs	r4, r4, #5
    c596:	3401      	adds	r4, #1
    c598:	3314      	adds	r3, #20
    c59a:	0089      	lsls	r1, r1, #2
    c59c:	00a4      	lsls	r4, r4, #2
    c59e:	1859      	adds	r1, r3, r1
    c5a0:	1904      	adds	r4, r0, r4
    c5a2:	428b      	cmp	r3, r1
    c5a4:	d20b      	bcs.n	c5be <__copybits+0x32>
    c5a6:	0005      	movs	r5, r0
    c5a8:	cb40      	ldmia	r3!, {r6}
    c5aa:	c540      	stmia	r5!, {r6}
    c5ac:	4299      	cmp	r1, r3
    c5ae:	d8fb      	bhi.n	c5a8 <__copybits+0x1c>
    c5b0:	2303      	movs	r3, #3
    c5b2:	3218      	adds	r2, #24
    c5b4:	1a9a      	subs	r2, r3, r2
    c5b6:	1889      	adds	r1, r1, r2
    c5b8:	4399      	bics	r1, r3
    c5ba:	3104      	adds	r1, #4
    c5bc:	1840      	adds	r0, r0, r1
    c5be:	2300      	movs	r3, #0
    c5c0:	4284      	cmp	r4, r0
    c5c2:	d902      	bls.n	c5ca <__copybits+0x3e>
    c5c4:	c008      	stmia	r0!, {r3}
    c5c6:	4284      	cmp	r4, r0
    c5c8:	d8fc      	bhi.n	c5c4 <__copybits+0x38>
    c5ca:	bd70      	pop	{r4, r5, r6, pc}

0000c5cc <__any_on>:
    c5cc:	0002      	movs	r2, r0
    c5ce:	6903      	ldr	r3, [r0, #16]
    c5d0:	b510      	push	{r4, lr}
    c5d2:	3214      	adds	r2, #20
    c5d4:	1148      	asrs	r0, r1, #5
    c5d6:	4283      	cmp	r3, r0
    c5d8:	da0f      	bge.n	c5fa <__any_on+0x2e>
    c5da:	009b      	lsls	r3, r3, #2
    c5dc:	18d3      	adds	r3, r2, r3
    c5de:	429a      	cmp	r2, r3
    c5e0:	d221      	bcs.n	c626 <__any_on+0x5a>
    c5e2:	3b04      	subs	r3, #4
    c5e4:	6818      	ldr	r0, [r3, #0]
    c5e6:	2800      	cmp	r0, #0
    c5e8:	d004      	beq.n	c5f4 <__any_on+0x28>
    c5ea:	e01a      	b.n	c622 <__any_on+0x56>
    c5ec:	3b04      	subs	r3, #4
    c5ee:	6819      	ldr	r1, [r3, #0]
    c5f0:	2900      	cmp	r1, #0
    c5f2:	d116      	bne.n	c622 <__any_on+0x56>
    c5f4:	429a      	cmp	r2, r3
    c5f6:	d3f9      	bcc.n	c5ec <__any_on+0x20>
    c5f8:	bd10      	pop	{r4, pc}
    c5fa:	4283      	cmp	r3, r0
    c5fc:	dd0e      	ble.n	c61c <__any_on+0x50>
    c5fe:	231f      	movs	r3, #31
    c600:	4019      	ands	r1, r3
    c602:	0083      	lsls	r3, r0, #2
    c604:	18d3      	adds	r3, r2, r3
    c606:	2900      	cmp	r1, #0
    c608:	d0e9      	beq.n	c5de <__any_on+0x12>
    c60a:	681c      	ldr	r4, [r3, #0]
    c60c:	0020      	movs	r0, r4
    c60e:	40c8      	lsrs	r0, r1
    c610:	4088      	lsls	r0, r1
    c612:	0001      	movs	r1, r0
    c614:	2001      	movs	r0, #1
    c616:	428c      	cmp	r4, r1
    c618:	d1ee      	bne.n	c5f8 <__any_on+0x2c>
    c61a:	e7e0      	b.n	c5de <__any_on+0x12>
    c61c:	0083      	lsls	r3, r0, #2
    c61e:	18d3      	adds	r3, r2, r3
    c620:	e7dd      	b.n	c5de <__any_on+0x12>
    c622:	2001      	movs	r0, #1
    c624:	e7e8      	b.n	c5f8 <__any_on+0x2c>
    c626:	2000      	movs	r0, #0
    c628:	e7e6      	b.n	c5f8 <__any_on+0x2c>
    c62a:	46c0      	nop			; (mov r8, r8)

0000c62c <_sbrk_r>:
    c62c:	2300      	movs	r3, #0
    c62e:	b570      	push	{r4, r5, r6, lr}
    c630:	4c06      	ldr	r4, [pc, #24]	; (c64c <_sbrk_r+0x20>)
    c632:	0005      	movs	r5, r0
    c634:	0008      	movs	r0, r1
    c636:	6023      	str	r3, [r4, #0]
    c638:	f7f4 f9e8 	bl	a0c <_sbrk>
    c63c:	1c43      	adds	r3, r0, #1
    c63e:	d000      	beq.n	c642 <_sbrk_r+0x16>
    c640:	bd70      	pop	{r4, r5, r6, pc}
    c642:	6823      	ldr	r3, [r4, #0]
    c644:	2b00      	cmp	r3, #0
    c646:	d0fb      	beq.n	c640 <_sbrk_r+0x14>
    c648:	602b      	str	r3, [r5, #0]
    c64a:	e7f9      	b.n	c640 <_sbrk_r+0x14>
    c64c:	200016dc 	.word	0x200016dc

0000c650 <__sccl>:
    c650:	b570      	push	{r4, r5, r6, lr}
    c652:	780c      	ldrb	r4, [r1, #0]
    c654:	2c5e      	cmp	r4, #94	; 0x5e
    c656:	d028      	beq.n	c6aa <__sccl+0x5a>
    c658:	1c4e      	adds	r6, r1, #1
    c65a:	2500      	movs	r5, #0
    c65c:	2100      	movs	r1, #0
    c65e:	0003      	movs	r3, r0
    c660:	1c42      	adds	r2, r0, #1
    c662:	32ff      	adds	r2, #255	; 0xff
    c664:	7019      	strb	r1, [r3, #0]
    c666:	3301      	adds	r3, #1
    c668:	429a      	cmp	r2, r3
    c66a:	d1fb      	bne.n	c664 <__sccl+0x14>
    c66c:	1e71      	subs	r1, r6, #1
    c66e:	2c00      	cmp	r4, #0
    c670:	d00e      	beq.n	c690 <__sccl+0x40>
    c672:	2301      	movs	r3, #1
    c674:	406b      	eors	r3, r5
    c676:	5503      	strb	r3, [r0, r4]
    c678:	7832      	ldrb	r2, [r6, #0]
    c67a:	1c71      	adds	r1, r6, #1
    c67c:	2a2d      	cmp	r2, #45	; 0x2d
    c67e:	d009      	beq.n	c694 <__sccl+0x44>
    c680:	2a5d      	cmp	r2, #93	; 0x5d
    c682:	d005      	beq.n	c690 <__sccl+0x40>
    c684:	2a00      	cmp	r2, #0
    c686:	d002      	beq.n	c68e <__sccl+0x3e>
    c688:	0014      	movs	r4, r2
    c68a:	000e      	movs	r6, r1
    c68c:	e7f3      	b.n	c676 <__sccl+0x26>
    c68e:	0031      	movs	r1, r6
    c690:	0008      	movs	r0, r1
    c692:	bd70      	pop	{r4, r5, r6, pc}
    c694:	7872      	ldrb	r2, [r6, #1]
    c696:	2a5d      	cmp	r2, #93	; 0x5d
    c698:	d00c      	beq.n	c6b4 <__sccl+0x64>
    c69a:	4294      	cmp	r4, r2
    c69c:	dc0a      	bgt.n	c6b4 <__sccl+0x64>
    c69e:	3602      	adds	r6, #2
    c6a0:	3401      	adds	r4, #1
    c6a2:	5503      	strb	r3, [r0, r4]
    c6a4:	42a2      	cmp	r2, r4
    c6a6:	dcfb      	bgt.n	c6a0 <__sccl+0x50>
    c6a8:	e7e6      	b.n	c678 <__sccl+0x28>
    c6aa:	1c8e      	adds	r6, r1, #2
    c6ac:	784c      	ldrb	r4, [r1, #1]
    c6ae:	2501      	movs	r5, #1
    c6b0:	2101      	movs	r1, #1
    c6b2:	e7d4      	b.n	c65e <__sccl+0xe>
    c6b4:	242d      	movs	r4, #45	; 0x2d
    c6b6:	000e      	movs	r6, r1
    c6b8:	e7dd      	b.n	c676 <__sccl+0x26>
    c6ba:	46c0      	nop			; (mov r8, r8)

0000c6bc <nanf>:
    c6bc:	4800      	ldr	r0, [pc, #0]	; (c6c0 <nanf+0x4>)
    c6be:	4770      	bx	lr
    c6c0:	7fc00000 	.word	0x7fc00000

0000c6c4 <sprintf>:
    c6c4:	b40e      	push	{r1, r2, r3}
    c6c6:	b510      	push	{r4, lr}
    c6c8:	b09d      	sub	sp, #116	; 0x74
    c6ca:	a902      	add	r1, sp, #8
    c6cc:	9002      	str	r0, [sp, #8]
    c6ce:	6108      	str	r0, [r1, #16]
    c6d0:	480b      	ldr	r0, [pc, #44]	; (c700 <sprintf+0x3c>)
    c6d2:	2482      	movs	r4, #130	; 0x82
    c6d4:	6088      	str	r0, [r1, #8]
    c6d6:	6148      	str	r0, [r1, #20]
    c6d8:	2001      	movs	r0, #1
    c6da:	4240      	negs	r0, r0
    c6dc:	ab1f      	add	r3, sp, #124	; 0x7c
    c6de:	81c8      	strh	r0, [r1, #14]
    c6e0:	4808      	ldr	r0, [pc, #32]	; (c704 <sprintf+0x40>)
    c6e2:	cb04      	ldmia	r3!, {r2}
    c6e4:	00a4      	lsls	r4, r4, #2
    c6e6:	6800      	ldr	r0, [r0, #0]
    c6e8:	9301      	str	r3, [sp, #4]
    c6ea:	818c      	strh	r4, [r1, #12]
    c6ec:	f7fb fbac 	bl	7e48 <_svfprintf_r>
    c6f0:	2300      	movs	r3, #0
    c6f2:	9a02      	ldr	r2, [sp, #8]
    c6f4:	7013      	strb	r3, [r2, #0]
    c6f6:	b01d      	add	sp, #116	; 0x74
    c6f8:	bc10      	pop	{r4}
    c6fa:	bc08      	pop	{r3}
    c6fc:	b003      	add	sp, #12
    c6fe:	4718      	bx	r3
    c700:	7fffffff 	.word	0x7fffffff
    c704:	200000a0 	.word	0x200000a0

0000c708 <sulp>:
    c708:	b570      	push	{r4, r5, r6, lr}
    c70a:	0016      	movs	r6, r2
    c70c:	000d      	movs	r5, r1
    c70e:	f7ff fe13 	bl	c338 <__ulp>
    c712:	2e00      	cmp	r6, #0
    c714:	d00d      	beq.n	c732 <sulp+0x2a>
    c716:	236b      	movs	r3, #107	; 0x6b
    c718:	006a      	lsls	r2, r5, #1
    c71a:	0d52      	lsrs	r2, r2, #21
    c71c:	1a9b      	subs	r3, r3, r2
    c71e:	2b00      	cmp	r3, #0
    c720:	dd07      	ble.n	c732 <sulp+0x2a>
    c722:	2400      	movs	r4, #0
    c724:	4a03      	ldr	r2, [pc, #12]	; (c734 <sulp+0x2c>)
    c726:	051b      	lsls	r3, r3, #20
    c728:	189d      	adds	r5, r3, r2
    c72a:	002b      	movs	r3, r5
    c72c:	0022      	movs	r2, r4
    c72e:	f7f9 fdad 	bl	628c <__aeabi_dmul>
    c732:	bd70      	pop	{r4, r5, r6, pc}
    c734:	3ff00000 	.word	0x3ff00000

0000c738 <_strtod_l>:
    c738:	b5f0      	push	{r4, r5, r6, r7, lr}
    c73a:	46de      	mov	lr, fp
    c73c:	4657      	mov	r7, sl
    c73e:	464e      	mov	r6, r9
    c740:	4645      	mov	r5, r8
    c742:	b5e0      	push	{r5, r6, r7, lr}
    c744:	001d      	movs	r5, r3
    c746:	2300      	movs	r3, #0
    c748:	b0a3      	sub	sp, #140	; 0x8c
    c74a:	9009      	str	r0, [sp, #36]	; 0x24
    c74c:	0028      	movs	r0, r5
    c74e:	000e      	movs	r6, r1
    c750:	931e      	str	r3, [sp, #120]	; 0x78
    c752:	4693      	mov	fp, r2
    c754:	f7fe ff5c 	bl	b610 <__localeconv_l>
    c758:	0007      	movs	r7, r0
    c75a:	6800      	ldr	r0, [r0, #0]
    c75c:	f7fb f832 	bl	77c4 <strlen>
    c760:	2400      	movs	r4, #0
    c762:	2300      	movs	r3, #0
    c764:	9304      	str	r3, [sp, #16]
    c766:	9405      	str	r4, [sp, #20]
    c768:	0033      	movs	r3, r6
    c76a:	961d      	str	r6, [sp, #116]	; 0x74
    c76c:	781c      	ldrb	r4, [r3, #0]
    c76e:	9008      	str	r0, [sp, #32]
    c770:	49c4      	ldr	r1, [pc, #784]	; (ca84 <_strtod_l+0x34c>)
    c772:	2c2d      	cmp	r4, #45	; 0x2d
    c774:	d900      	bls.n	c778 <_strtod_l+0x40>
    c776:	e070      	b.n	c85a <_strtod_l+0x122>
    c778:	00a2      	lsls	r2, r4, #2
    c77a:	588a      	ldr	r2, [r1, r2]
    c77c:	4697      	mov	pc, r2
    c77e:	4689      	mov	r9, r1
    c780:	0014      	movs	r4, r2
    c782:	6839      	ldr	r1, [r7, #0]
    c784:	9a08      	ldr	r2, [sp, #32]
    c786:	4698      	mov	r8, r3
    c788:	f002 f9e0 	bl	eb4c <strncmp>
    c78c:	2800      	cmp	r0, #0
    c78e:	d100      	bne.n	c792 <_strtod_l+0x5a>
    c790:	e084      	b.n	c89c <_strtod_l+0x164>
    c792:	2200      	movs	r2, #0
    c794:	2300      	movs	r3, #0
    c796:	2000      	movs	r0, #0
    c798:	950a      	str	r5, [sp, #40]	; 0x28
    c79a:	9208      	str	r2, [sp, #32]
    c79c:	2220      	movs	r2, #32
    c79e:	0021      	movs	r1, r4
    c7a0:	4391      	bics	r1, r2
    c7a2:	2200      	movs	r2, #0
    c7a4:	2945      	cmp	r1, #69	; 0x45
    c7a6:	d100      	bne.n	c7aa <_strtod_l+0x72>
    c7a8:	e0a6      	b.n	c8f8 <_strtod_l+0x1c0>
    c7aa:	2d00      	cmp	r5, #0
    c7ac:	d000      	beq.n	c7b0 <_strtod_l+0x78>
    c7ae:	e104      	b.n	c9ba <_strtod_l+0x282>
    c7b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c7b2:	4313      	orrs	r3, r2
    c7b4:	d000      	beq.n	c7b8 <_strtod_l+0x80>
    c7b6:	e0f8      	b.n	c9aa <_strtod_l+0x272>
    c7b8:	9b08      	ldr	r3, [sp, #32]
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	d100      	bne.n	c7c0 <_strtod_l+0x88>
    c7be:	e13d      	b.n	ca3c <_strtod_l+0x304>
    c7c0:	465b      	mov	r3, fp
    c7c2:	2400      	movs	r4, #0
    c7c4:	2500      	movs	r5, #0
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	d006      	beq.n	c7d8 <_strtod_l+0xa0>
    c7ca:	2300      	movs	r3, #0
    c7cc:	9307      	str	r3, [sp, #28]
    c7ce:	465b      	mov	r3, fp
    c7d0:	601e      	str	r6, [r3, #0]
    c7d2:	9b07      	ldr	r3, [sp, #28]
    c7d4:	2b00      	cmp	r3, #0
    c7d6:	d108      	bne.n	c7ea <_strtod_l+0xb2>
    c7d8:	0020      	movs	r0, r4
    c7da:	0029      	movs	r1, r5
    c7dc:	b023      	add	sp, #140	; 0x8c
    c7de:	bc3c      	pop	{r2, r3, r4, r5}
    c7e0:	4690      	mov	r8, r2
    c7e2:	4699      	mov	r9, r3
    c7e4:	46a2      	mov	sl, r4
    c7e6:	46ab      	mov	fp, r5
    c7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c7ea:	2180      	movs	r1, #128	; 0x80
    c7ec:	0609      	lsls	r1, r1, #24
    c7ee:	186b      	adds	r3, r5, r1
    c7f0:	001d      	movs	r5, r3
    c7f2:	e7f1      	b.n	c7d8 <_strtod_l+0xa0>
    c7f4:	2200      	movs	r2, #0
    c7f6:	9207      	str	r2, [sp, #28]
    c7f8:	1c5a      	adds	r2, r3, #1
    c7fa:	921d      	str	r2, [sp, #116]	; 0x74
    c7fc:	785c      	ldrb	r4, [r3, #1]
    c7fe:	4692      	mov	sl, r2
    c800:	2c00      	cmp	r4, #0
    c802:	d0dd      	beq.n	c7c0 <_strtod_l+0x88>
    c804:	2300      	movs	r3, #0
    c806:	930c      	str	r3, [sp, #48]	; 0x30
    c808:	2c30      	cmp	r4, #48	; 0x30
    c80a:	d02d      	beq.n	c868 <_strtod_l+0x130>
    c80c:	0023      	movs	r3, r4
    c80e:	3b30      	subs	r3, #48	; 0x30
    c810:	2b09      	cmp	r3, #9
    c812:	d900      	bls.n	c816 <_strtod_l+0xde>
    c814:	e38c      	b.n	cf30 <_strtod_l+0x7f8>
    c816:	2300      	movs	r3, #0
    c818:	4650      	mov	r0, sl
    c81a:	2500      	movs	r5, #0
    c81c:	0019      	movs	r1, r3
    c81e:	0022      	movs	r2, r4
    c820:	e00c      	b.n	c83c <_strtod_l+0x104>
    c822:	009c      	lsls	r4, r3, #2
    c824:	18e3      	adds	r3, r4, r3
    c826:	005b      	lsls	r3, r3, #1
    c828:	189b      	adds	r3, r3, r2
    c82a:	3b30      	subs	r3, #48	; 0x30
    c82c:	3001      	adds	r0, #1
    c82e:	901d      	str	r0, [sp, #116]	; 0x74
    c830:	7802      	ldrb	r2, [r0, #0]
    c832:	3501      	adds	r5, #1
    c834:	0014      	movs	r4, r2
    c836:	3c30      	subs	r4, #48	; 0x30
    c838:	2c09      	cmp	r4, #9
    c83a:	d8a0      	bhi.n	c77e <_strtod_l+0x46>
    c83c:	2d08      	cmp	r5, #8
    c83e:	ddf0      	ble.n	c822 <_strtod_l+0xea>
    c840:	008c      	lsls	r4, r1, #2
    c842:	1864      	adds	r4, r4, r1
    c844:	0064      	lsls	r4, r4, #1
    c846:	18a4      	adds	r4, r4, r2
    c848:	0021      	movs	r1, r4
    c84a:	3930      	subs	r1, #48	; 0x30
    c84c:	e7ee      	b.n	c82c <_strtod_l+0xf4>
    c84e:	3301      	adds	r3, #1
    c850:	931d      	str	r3, [sp, #116]	; 0x74
    c852:	781c      	ldrb	r4, [r3, #0]
    c854:	2c2d      	cmp	r4, #45	; 0x2d
    c856:	d800      	bhi.n	c85a <_strtod_l+0x122>
    c858:	e78e      	b.n	c778 <_strtod_l+0x40>
    c85a:	469a      	mov	sl, r3
    c85c:	2300      	movs	r3, #0
    c85e:	9307      	str	r3, [sp, #28]
    c860:	2300      	movs	r3, #0
    c862:	930c      	str	r3, [sp, #48]	; 0x30
    c864:	2c30      	cmp	r4, #48	; 0x30
    c866:	d1d1      	bne.n	c80c <_strtod_l+0xd4>
    c868:	4653      	mov	r3, sl
    c86a:	785b      	ldrb	r3, [r3, #1]
    c86c:	2b58      	cmp	r3, #88	; 0x58
    c86e:	d100      	bne.n	c872 <_strtod_l+0x13a>
    c870:	e334      	b.n	cedc <_strtod_l+0x7a4>
    c872:	2b78      	cmp	r3, #120	; 0x78
    c874:	d100      	bne.n	c878 <_strtod_l+0x140>
    c876:	e331      	b.n	cedc <_strtod_l+0x7a4>
    c878:	4653      	mov	r3, sl
    c87a:	3301      	adds	r3, #1
    c87c:	001a      	movs	r2, r3
    c87e:	931d      	str	r3, [sp, #116]	; 0x74
    c880:	7814      	ldrb	r4, [r2, #0]
    c882:	3301      	adds	r3, #1
    c884:	2c30      	cmp	r4, #48	; 0x30
    c886:	d0f9      	beq.n	c87c <_strtod_l+0x144>
    c888:	4692      	mov	sl, r2
    c88a:	2c00      	cmp	r4, #0
    c88c:	d100      	bne.n	c890 <_strtod_l+0x158>
    c88e:	e08c      	b.n	c9aa <_strtod_l+0x272>
    c890:	2301      	movs	r3, #1
    c892:	930c      	str	r3, [sp, #48]	; 0x30
    c894:	e7ba      	b.n	c80c <_strtod_l+0xd4>
    c896:	2201      	movs	r2, #1
    c898:	9207      	str	r2, [sp, #28]
    c89a:	e7ad      	b.n	c7f8 <_strtod_l+0xc0>
    c89c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    c89e:	9b08      	ldr	r3, [sp, #32]
    c8a0:	4694      	mov	ip, r2
    c8a2:	4463      	add	r3, ip
    c8a4:	931d      	str	r3, [sp, #116]	; 0x74
    c8a6:	781c      	ldrb	r4, [r3, #0]
    c8a8:	2300      	movs	r3, #0
    c8aa:	950a      	str	r5, [sp, #40]	; 0x28
    c8ac:	0022      	movs	r2, r4
    c8ae:	3a30      	subs	r2, #48	; 0x30
    c8b0:	2a09      	cmp	r2, #9
    c8b2:	d900      	bls.n	c8b6 <_strtod_l+0x17e>
    c8b4:	e0e2      	b.n	ca7c <_strtod_l+0x344>
    c8b6:	1c5c      	adds	r4, r3, #1
    c8b8:	4694      	mov	ip, r2
    c8ba:	2a00      	cmp	r2, #0
    c8bc:	d101      	bne.n	c8c2 <_strtod_l+0x18a>
    c8be:	f000 fe76 	bl	d5ae <_strtod_l+0xe76>
    c8c2:	1900      	adds	r0, r0, r4
    c8c4:	195b      	adds	r3, r3, r5
    c8c6:	2c01      	cmp	r4, #1
    c8c8:	d101      	bne.n	c8ce <_strtod_l+0x196>
    c8ca:	f000 fe6c 	bl	d5a6 <_strtod_l+0xe6e>
    c8ce:	4644      	mov	r4, r8
    c8d0:	e007      	b.n	c8e2 <_strtod_l+0x1aa>
    c8d2:	00a1      	lsls	r1, r4, #2
    c8d4:	190c      	adds	r4, r1, r4
    c8d6:	0064      	lsls	r4, r4, #1
    c8d8:	429f      	cmp	r7, r3
    c8da:	d101      	bne.n	c8e0 <_strtod_l+0x1a8>
    c8dc:	f000 fbef 	bl	d0be <_strtod_l+0x986>
    c8e0:	003d      	movs	r5, r7
    c8e2:	1c6f      	adds	r7, r5, #1
    c8e4:	2d08      	cmp	r5, #8
    c8e6:	ddf4      	ble.n	c8d2 <_strtod_l+0x19a>
    c8e8:	2f10      	cmp	r7, #16
    c8ea:	dcf5      	bgt.n	c8d8 <_strtod_l+0x1a0>
    c8ec:	4649      	mov	r1, r9
    c8ee:	0089      	lsls	r1, r1, #2
    c8f0:	4449      	add	r1, r9
    c8f2:	0049      	lsls	r1, r1, #1
    c8f4:	4689      	mov	r9, r1
    c8f6:	e7ef      	b.n	c8d8 <_strtod_l+0x1a0>
    c8f8:	002a      	movs	r2, r5
    c8fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    c8fc:	431a      	orrs	r2, r3
    c8fe:	430a      	orrs	r2, r1
    c900:	d100      	bne.n	c904 <_strtod_l+0x1cc>
    c902:	e75d      	b.n	c7c0 <_strtod_l+0x88>
    c904:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    c906:	1c72      	adds	r2, r6, #1
    c908:	921d      	str	r2, [sp, #116]	; 0x74
    c90a:	7874      	ldrb	r4, [r6, #1]
    c90c:	2c2b      	cmp	r4, #43	; 0x2b
    c90e:	d100      	bne.n	c912 <_strtod_l+0x1da>
    c910:	e39a      	b.n	d048 <_strtod_l+0x910>
    c912:	2c2d      	cmp	r4, #45	; 0x2d
    c914:	d100      	bne.n	c918 <_strtod_l+0x1e0>
    c916:	e230      	b.n	cd7a <_strtod_l+0x642>
    c918:	2200      	movs	r2, #0
    c91a:	920d      	str	r2, [sp, #52]	; 0x34
    c91c:	0022      	movs	r2, r4
    c91e:	3a30      	subs	r2, #48	; 0x30
    c920:	2a09      	cmp	r2, #9
    c922:	d900      	bls.n	c926 <_strtod_l+0x1ee>
    c924:	e2f5      	b.n	cf12 <_strtod_l+0x7da>
    c926:	2c30      	cmp	r4, #48	; 0x30
    c928:	d106      	bne.n	c938 <_strtod_l+0x200>
    c92a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    c92c:	3201      	adds	r2, #1
    c92e:	921d      	str	r2, [sp, #116]	; 0x74
    c930:	7814      	ldrb	r4, [r2, #0]
    c932:	3201      	adds	r2, #1
    c934:	2c30      	cmp	r4, #48	; 0x30
    c936:	d0fa      	beq.n	c92e <_strtod_l+0x1f6>
    c938:	0021      	movs	r1, r4
    c93a:	3931      	subs	r1, #49	; 0x31
    c93c:	2200      	movs	r2, #0
    c93e:	2908      	cmp	r1, #8
    c940:	d900      	bls.n	c944 <_strtod_l+0x20c>
    c942:	e732      	b.n	c7aa <_strtod_l+0x72>
    c944:	991d      	ldr	r1, [sp, #116]	; 0x74
    c946:	0022      	movs	r2, r4
    c948:	1c4c      	adds	r4, r1, #1
    c94a:	941d      	str	r4, [sp, #116]	; 0x74
    c94c:	46a4      	mov	ip, r4
    c94e:	784c      	ldrb	r4, [r1, #1]
    c950:	000f      	movs	r7, r1
    c952:	910e      	str	r1, [sp, #56]	; 0x38
    c954:	0021      	movs	r1, r4
    c956:	3930      	subs	r1, #48	; 0x30
    c958:	3a30      	subs	r2, #48	; 0x30
    c95a:	2909      	cmp	r1, #9
    c95c:	d815      	bhi.n	c98a <_strtod_l+0x252>
    c95e:	0039      	movs	r1, r7
    c960:	469c      	mov	ip, r3
    c962:	0027      	movs	r7, r4
    c964:	3102      	adds	r1, #2
    c966:	0094      	lsls	r4, r2, #2
    c968:	18a4      	adds	r4, r4, r2
    c96a:	911d      	str	r1, [sp, #116]	; 0x74
    c96c:	0064      	lsls	r4, r4, #1
    c96e:	19e4      	adds	r4, r4, r7
    c970:	780f      	ldrb	r7, [r1, #0]
    c972:	0022      	movs	r2, r4
    c974:	003c      	movs	r4, r7
    c976:	3c30      	subs	r4, #48	; 0x30
    c978:	000b      	movs	r3, r1
    c97a:	3a30      	subs	r2, #48	; 0x30
    c97c:	3101      	adds	r1, #1
    c97e:	2c09      	cmp	r4, #9
    c980:	d9f1      	bls.n	c966 <_strtod_l+0x22e>
    c982:	0019      	movs	r1, r3
    c984:	003c      	movs	r4, r7
    c986:	4663      	mov	r3, ip
    c988:	468c      	mov	ip, r1
    c98a:	4661      	mov	r1, ip
    c98c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    c98e:	1bc9      	subs	r1, r1, r7
    c990:	2908      	cmp	r1, #8
    c992:	dd00      	ble.n	c996 <_strtod_l+0x25e>
    c994:	e256      	b.n	ce44 <_strtod_l+0x70c>
    c996:	493c      	ldr	r1, [pc, #240]	; (ca88 <_strtod_l+0x350>)
    c998:	428a      	cmp	r2, r1
    c99a:	dd00      	ble.n	c99e <_strtod_l+0x266>
    c99c:	e252      	b.n	ce44 <_strtod_l+0x70c>
    c99e:	990d      	ldr	r1, [sp, #52]	; 0x34
    c9a0:	2900      	cmp	r1, #0
    c9a2:	d100      	bne.n	c9a6 <_strtod_l+0x26e>
    c9a4:	e701      	b.n	c7aa <_strtod_l+0x72>
    c9a6:	4252      	negs	r2, r2
    c9a8:	e6ff      	b.n	c7aa <_strtod_l+0x72>
    c9aa:	2400      	movs	r4, #0
    c9ac:	2500      	movs	r5, #0
    c9ae:	465b      	mov	r3, fp
    c9b0:	2b00      	cmp	r3, #0
    c9b2:	d100      	bne.n	c9b6 <_strtod_l+0x27e>
    c9b4:	e70d      	b.n	c7d2 <_strtod_l+0x9a>
    c9b6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    c9b8:	e709      	b.n	c7ce <_strtod_l+0x96>
    c9ba:	1a13      	subs	r3, r2, r0
    c9bc:	9308      	str	r3, [sp, #32]
    c9be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c9c0:	2b00      	cmp	r3, #0
    c9c2:	d100      	bne.n	c9c6 <_strtod_l+0x28e>
    c9c4:	950a      	str	r5, [sp, #40]	; 0x28
    c9c6:	002c      	movs	r4, r5
    c9c8:	2d10      	cmp	r5, #16
    c9ca:	dd00      	ble.n	c9ce <_strtod_l+0x296>
    c9cc:	2410      	movs	r4, #16
    c9ce:	4640      	mov	r0, r8
    c9d0:	f7fa fa68 	bl	6ea4 <__aeabi_ui2d>
    c9d4:	9004      	str	r0, [sp, #16]
    c9d6:	9105      	str	r1, [sp, #20]
    c9d8:	2c09      	cmp	r4, #9
    c9da:	dd15      	ble.n	ca08 <_strtod_l+0x2d0>
    c9dc:	0022      	movs	r2, r4
    c9de:	4b2b      	ldr	r3, [pc, #172]	; (ca8c <_strtod_l+0x354>)
    c9e0:	3a09      	subs	r2, #9
    c9e2:	00d2      	lsls	r2, r2, #3
    c9e4:	189b      	adds	r3, r3, r2
    c9e6:	681a      	ldr	r2, [r3, #0]
    c9e8:	685b      	ldr	r3, [r3, #4]
    c9ea:	f7f9 fc4f 	bl	628c <__aeabi_dmul>
    c9ee:	0006      	movs	r6, r0
    c9f0:	4648      	mov	r0, r9
    c9f2:	000f      	movs	r7, r1
    c9f4:	f7fa fa56 	bl	6ea4 <__aeabi_ui2d>
    c9f8:	0002      	movs	r2, r0
    c9fa:	000b      	movs	r3, r1
    c9fc:	0030      	movs	r0, r6
    c9fe:	0039      	movs	r1, r7
    ca00:	f002 f8ee 	bl	ebe0 <__aeabi_dadd>
    ca04:	9004      	str	r0, [sp, #16]
    ca06:	9105      	str	r1, [sp, #20]
    ca08:	2d0f      	cmp	r5, #15
    ca0a:	dc45      	bgt.n	ca98 <_strtod_l+0x360>
    ca0c:	9b08      	ldr	r3, [sp, #32]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	d031      	beq.n	ca76 <_strtod_l+0x33e>
    ca12:	9b08      	ldr	r3, [sp, #32]
    ca14:	2b00      	cmp	r3, #0
    ca16:	dc01      	bgt.n	ca1c <_strtod_l+0x2e4>
    ca18:	f000 fc69 	bl	d2ee <_strtod_l+0xbb6>
    ca1c:	2b16      	cmp	r3, #22
    ca1e:	dd01      	ble.n	ca24 <_strtod_l+0x2ec>
    ca20:	f000 fc15 	bl	d24e <_strtod_l+0xb16>
    ca24:	4919      	ldr	r1, [pc, #100]	; (ca8c <_strtod_l+0x354>)
    ca26:	00da      	lsls	r2, r3, #3
    ca28:	1889      	adds	r1, r1, r2
    ca2a:	6808      	ldr	r0, [r1, #0]
    ca2c:	6849      	ldr	r1, [r1, #4]
    ca2e:	9a04      	ldr	r2, [sp, #16]
    ca30:	9b05      	ldr	r3, [sp, #20]
    ca32:	f7f9 fc2b 	bl	628c <__aeabi_dmul>
    ca36:	0004      	movs	r4, r0
    ca38:	000d      	movs	r5, r1
    ca3a:	e7b8      	b.n	c9ae <_strtod_l+0x276>
    ca3c:	2c4e      	cmp	r4, #78	; 0x4e
    ca3e:	d009      	beq.n	ca54 <_strtod_l+0x31c>
    ca40:	dc01      	bgt.n	ca46 <_strtod_l+0x30e>
    ca42:	f000 fc2b 	bl	d29c <_strtod_l+0xb64>
    ca46:	2c69      	cmp	r4, #105	; 0x69
    ca48:	d101      	bne.n	ca4e <_strtod_l+0x316>
    ca4a:	f000 fc2b 	bl	d2a4 <_strtod_l+0xb6c>
    ca4e:	2c6e      	cmp	r4, #110	; 0x6e
    ca50:	d000      	beq.n	ca54 <_strtod_l+0x31c>
    ca52:	e6b5      	b.n	c7c0 <_strtod_l+0x88>
    ca54:	490e      	ldr	r1, [pc, #56]	; (ca90 <_strtod_l+0x358>)
    ca56:	a81d      	add	r0, sp, #116	; 0x74
    ca58:	f001 fd80 	bl	e55c <__match>
    ca5c:	2800      	cmp	r0, #0
    ca5e:	d100      	bne.n	ca62 <_strtod_l+0x32a>
    ca60:	e6ae      	b.n	c7c0 <_strtod_l+0x88>
    ca62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ca64:	781b      	ldrb	r3, [r3, #0]
    ca66:	2b28      	cmp	r3, #40	; 0x28
    ca68:	d101      	bne.n	ca6e <_strtod_l+0x336>
    ca6a:	f000 fd0d 	bl	d488 <_strtod_l+0xd50>
    ca6e:	4b09      	ldr	r3, [pc, #36]	; (ca94 <_strtod_l+0x35c>)
    ca70:	9305      	str	r3, [sp, #20]
    ca72:	2300      	movs	r3, #0
    ca74:	9304      	str	r3, [sp, #16]
    ca76:	9c04      	ldr	r4, [sp, #16]
    ca78:	9d05      	ldr	r5, [sp, #20]
    ca7a:	e798      	b.n	c9ae <_strtod_l+0x276>
    ca7c:	2201      	movs	r2, #1
    ca7e:	9208      	str	r2, [sp, #32]
    ca80:	e68c      	b.n	c79c <_strtod_l+0x64>
    ca82:	46c0      	nop			; (mov r8, r8)
    ca84:	000121b4 	.word	0x000121b4
    ca88:	00004e1f 	.word	0x00004e1f
    ca8c:	000120e0 	.word	0x000120e0
    ca90:	00012290 	.word	0x00012290
    ca94:	fff80000 	.word	0xfff80000
    ca98:	9b08      	ldr	r3, [sp, #32]
    ca9a:	1b2c      	subs	r4, r5, r4
    ca9c:	469c      	mov	ip, r3
    ca9e:	4464      	add	r4, ip
    caa0:	2c00      	cmp	r4, #0
    caa2:	dc00      	bgt.n	caa6 <_strtod_l+0x36e>
    caa4:	e31f      	b.n	d0e6 <_strtod_l+0x9ae>
    caa6:	230f      	movs	r3, #15
    caa8:	4023      	ands	r3, r4
    caaa:	d00a      	beq.n	cac2 <_strtod_l+0x38a>
    caac:	49d9      	ldr	r1, [pc, #868]	; (ce14 <_strtod_l+0x6dc>)
    caae:	00db      	lsls	r3, r3, #3
    cab0:	18c9      	adds	r1, r1, r3
    cab2:	6808      	ldr	r0, [r1, #0]
    cab4:	6849      	ldr	r1, [r1, #4]
    cab6:	9a04      	ldr	r2, [sp, #16]
    cab8:	9b05      	ldr	r3, [sp, #20]
    caba:	f7f9 fbe7 	bl	628c <__aeabi_dmul>
    cabe:	9004      	str	r0, [sp, #16]
    cac0:	9105      	str	r1, [sp, #20]
    cac2:	230f      	movs	r3, #15
    cac4:	439c      	bics	r4, r3
    cac6:	d000      	beq.n	caca <_strtod_l+0x392>
    cac8:	e15d      	b.n	cd86 <_strtod_l+0x64e>
    caca:	2300      	movs	r3, #0
    cacc:	930c      	str	r3, [sp, #48]	; 0x30
    cace:	4643      	mov	r3, r8
    cad0:	9300      	str	r3, [sp, #0]
    cad2:	002b      	movs	r3, r5
    cad4:	9d09      	ldr	r5, [sp, #36]	; 0x24
    cad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    cad8:	4651      	mov	r1, sl
    cada:	0028      	movs	r0, r5
    cadc:	f7ff f970 	bl	bdc0 <__s2b>
    cae0:	2800      	cmp	r0, #0
    cae2:	d100      	bne.n	cae6 <_strtod_l+0x3ae>
    cae4:	e255      	b.n	cf92 <_strtod_l+0x85a>
    cae6:	9908      	ldr	r1, [sp, #32]
    cae8:	424b      	negs	r3, r1
    caea:	17ca      	asrs	r2, r1, #31
    caec:	401a      	ands	r2, r3
    caee:	920e      	str	r2, [sp, #56]	; 0x38
    caf0:	43ca      	mvns	r2, r1
    caf2:	000b      	movs	r3, r1
    caf4:	17d2      	asrs	r2, r2, #31
    caf6:	4013      	ands	r3, r2
    caf8:	930d      	str	r3, [sp, #52]	; 0x34
    cafa:	2300      	movs	r3, #0
    cafc:	4699      	mov	r9, r3
    cafe:	4698      	mov	r8, r3
    cb00:	465b      	mov	r3, fp
    cb02:	4683      	mov	fp, r0
    cb04:	9315      	str	r3, [sp, #84]	; 0x54
    cb06:	e0f4      	b.n	ccf2 <_strtod_l+0x5ba>
    cb08:	1ac9      	subs	r1, r1, r3
    cb0a:	1a52      	subs	r2, r2, r1
    cb0c:	291f      	cmp	r1, #31
    cb0e:	dd00      	ble.n	cb12 <_strtod_l+0x3da>
    cb10:	e1b5      	b.n	ce7e <_strtod_l+0x746>
    cb12:	2301      	movs	r3, #1
    cb14:	408b      	lsls	r3, r1
    cb16:	9310      	str	r3, [sp, #64]	; 0x40
    cb18:	2300      	movs	r3, #0
    cb1a:	9311      	str	r3, [sp, #68]	; 0x44
    cb1c:	18bb      	adds	r3, r7, r2
    cb1e:	469a      	mov	sl, r3
    cb20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb22:	18b6      	adds	r6, r6, r2
    cb24:	469c      	mov	ip, r3
    cb26:	003b      	movs	r3, r7
    cb28:	4466      	add	r6, ip
    cb2a:	4557      	cmp	r7, sl
    cb2c:	dd00      	ble.n	cb30 <_strtod_l+0x3f8>
    cb2e:	4653      	mov	r3, sl
    cb30:	42b3      	cmp	r3, r6
    cb32:	dd00      	ble.n	cb36 <_strtod_l+0x3fe>
    cb34:	0033      	movs	r3, r6
    cb36:	2b00      	cmp	r3, #0
    cb38:	dd04      	ble.n	cb44 <_strtod_l+0x40c>
    cb3a:	4652      	mov	r2, sl
    cb3c:	1ad2      	subs	r2, r2, r3
    cb3e:	4692      	mov	sl, r2
    cb40:	1af6      	subs	r6, r6, r3
    cb42:	1aff      	subs	r7, r7, r3
    cb44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb46:	2b00      	cmp	r3, #0
    cb48:	d015      	beq.n	cb76 <_strtod_l+0x43e>
    cb4a:	4641      	mov	r1, r8
    cb4c:	001a      	movs	r2, r3
    cb4e:	0028      	movs	r0, r5
    cb50:	f7ff fa7c 	bl	c04c <__pow5mult>
    cb54:	4680      	mov	r8, r0
    cb56:	2800      	cmp	r0, #0
    cb58:	d100      	bne.n	cb5c <_strtod_l+0x424>
    cb5a:	e252      	b.n	d002 <_strtod_l+0x8ca>
    cb5c:	0001      	movs	r1, r0
    cb5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    cb60:	0028      	movs	r0, r5
    cb62:	f7ff f9c9 	bl	bef8 <__multiply>
    cb66:	1e04      	subs	r4, r0, #0
    cb68:	d100      	bne.n	cb6c <_strtod_l+0x434>
    cb6a:	e24a      	b.n	d002 <_strtod_l+0x8ca>
    cb6c:	991e      	ldr	r1, [sp, #120]	; 0x78
    cb6e:	0028      	movs	r0, r5
    cb70:	f7ff f8d6 	bl	bd20 <_Bfree>
    cb74:	941e      	str	r4, [sp, #120]	; 0x78
    cb76:	4653      	mov	r3, sl
    cb78:	2b00      	cmp	r3, #0
    cb7a:	dd08      	ble.n	cb8e <_strtod_l+0x456>
    cb7c:	4652      	mov	r2, sl
    cb7e:	991e      	ldr	r1, [sp, #120]	; 0x78
    cb80:	0028      	movs	r0, r5
    cb82:	f7ff fac3 	bl	c10c <__lshift>
    cb86:	901e      	str	r0, [sp, #120]	; 0x78
    cb88:	2800      	cmp	r0, #0
    cb8a:	d100      	bne.n	cb8e <_strtod_l+0x456>
    cb8c:	e3c2      	b.n	d314 <_strtod_l+0xbdc>
    cb8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb90:	2b00      	cmp	r3, #0
    cb92:	d008      	beq.n	cba6 <_strtod_l+0x46e>
    cb94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cb96:	9908      	ldr	r1, [sp, #32]
    cb98:	0028      	movs	r0, r5
    cb9a:	f7ff fa57 	bl	c04c <__pow5mult>
    cb9e:	9008      	str	r0, [sp, #32]
    cba0:	2800      	cmp	r0, #0
    cba2:	d100      	bne.n	cba6 <_strtod_l+0x46e>
    cba4:	e22d      	b.n	d002 <_strtod_l+0x8ca>
    cba6:	2e00      	cmp	r6, #0
    cba8:	dd08      	ble.n	cbbc <_strtod_l+0x484>
    cbaa:	0032      	movs	r2, r6
    cbac:	9908      	ldr	r1, [sp, #32]
    cbae:	0028      	movs	r0, r5
    cbb0:	f7ff faac 	bl	c10c <__lshift>
    cbb4:	9008      	str	r0, [sp, #32]
    cbb6:	2800      	cmp	r0, #0
    cbb8:	d100      	bne.n	cbbc <_strtod_l+0x484>
    cbba:	e222      	b.n	d002 <_strtod_l+0x8ca>
    cbbc:	2f00      	cmp	r7, #0
    cbbe:	dd08      	ble.n	cbd2 <_strtod_l+0x49a>
    cbc0:	4641      	mov	r1, r8
    cbc2:	003a      	movs	r2, r7
    cbc4:	0028      	movs	r0, r5
    cbc6:	f7ff faa1 	bl	c10c <__lshift>
    cbca:	4680      	mov	r8, r0
    cbcc:	2800      	cmp	r0, #0
    cbce:	d100      	bne.n	cbd2 <_strtod_l+0x49a>
    cbd0:	e217      	b.n	d002 <_strtod_l+0x8ca>
    cbd2:	9a08      	ldr	r2, [sp, #32]
    cbd4:	991e      	ldr	r1, [sp, #120]	; 0x78
    cbd6:	0028      	movs	r0, r5
    cbd8:	f7ff fb12 	bl	c200 <__mdiff>
    cbdc:	4681      	mov	r9, r0
    cbde:	2800      	cmp	r0, #0
    cbe0:	d100      	bne.n	cbe4 <_strtod_l+0x4ac>
    cbe2:	e20e      	b.n	d002 <_strtod_l+0x8ca>
    cbe4:	68c3      	ldr	r3, [r0, #12]
    cbe6:	4641      	mov	r1, r8
    cbe8:	930f      	str	r3, [sp, #60]	; 0x3c
    cbea:	2300      	movs	r3, #0
    cbec:	60c3      	str	r3, [r0, #12]
    cbee:	f7ff faed 	bl	c1cc <__mcmp>
    cbf2:	2800      	cmp	r0, #0
    cbf4:	da01      	bge.n	cbfa <_strtod_l+0x4c2>
    cbf6:	f000 fbd8 	bl	d3aa <_strtod_l+0xc72>
    cbfa:	d100      	bne.n	cbfe <_strtod_l+0x4c6>
    cbfc:	e38e      	b.n	d31c <_strtod_l+0xbe4>
    cbfe:	4641      	mov	r1, r8
    cc00:	4648      	mov	r0, r9
    cc02:	f7ff fc89 	bl	c518 <__ratio>
    cc06:	2380      	movs	r3, #128	; 0x80
    cc08:	2200      	movs	r2, #0
    cc0a:	05db      	lsls	r3, r3, #23
    cc0c:	0006      	movs	r6, r0
    cc0e:	000f      	movs	r7, r1
    cc10:	f7fa fa7c 	bl	710c <__aeabi_dcmple>
    cc14:	2800      	cmp	r0, #0
    cc16:	d100      	bne.n	cc1a <_strtod_l+0x4e2>
    cc18:	e116      	b.n	ce48 <_strtod_l+0x710>
    cc1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d100      	bne.n	cc22 <_strtod_l+0x4ea>
    cc20:	e135      	b.n	ce8e <_strtod_l+0x756>
    cc22:	9b05      	ldr	r3, [sp, #20]
    cc24:	2600      	movs	r6, #0
    cc26:	9310      	str	r3, [sp, #64]	; 0x40
    cc28:	2300      	movs	r3, #0
    cc2a:	9311      	str	r3, [sp, #68]	; 0x44
    cc2c:	4b7a      	ldr	r3, [pc, #488]	; (ce18 <_strtod_l+0x6e0>)
    cc2e:	4f7a      	ldr	r7, [pc, #488]	; (ce18 <_strtod_l+0x6e0>)
    cc30:	9314      	str	r3, [sp, #80]	; 0x50
    cc32:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cc34:	4a79      	ldr	r2, [pc, #484]	; (ce1c <_strtod_l+0x6e4>)
    cc36:	4013      	ands	r3, r2
    cc38:	469a      	mov	sl, r3
    cc3a:	4b79      	ldr	r3, [pc, #484]	; (ce20 <_strtod_l+0x6e8>)
    cc3c:	459a      	cmp	sl, r3
    cc3e:	d100      	bne.n	cc42 <_strtod_l+0x50a>
    cc40:	e1af      	b.n	cfa2 <_strtod_l+0x86a>
    cc42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc44:	2b00      	cmp	r3, #0
    cc46:	d02a      	beq.n	cc9e <_strtod_l+0x566>
    cc48:	23d4      	movs	r3, #212	; 0xd4
    cc4a:	04db      	lsls	r3, r3, #19
    cc4c:	459a      	cmp	sl, r3
    cc4e:	d826      	bhi.n	cc9e <_strtod_l+0x566>
    cc50:	9c14      	ldr	r4, [sp, #80]	; 0x50
    cc52:	4a74      	ldr	r2, [pc, #464]	; (ce24 <_strtod_l+0x6ec>)
    cc54:	4b74      	ldr	r3, [pc, #464]	; (ce28 <_strtod_l+0x6f0>)
    cc56:	9811      	ldr	r0, [sp, #68]	; 0x44
    cc58:	0021      	movs	r1, r4
    cc5a:	f7fa fa57 	bl	710c <__aeabi_dcmple>
    cc5e:	2800      	cmp	r0, #0
    cc60:	d018      	beq.n	cc94 <_strtod_l+0x55c>
    cc62:	9811      	ldr	r0, [sp, #68]	; 0x44
    cc64:	0021      	movs	r1, r4
    cc66:	f7f8 fd8f 	bl	5788 <__aeabi_d2uiz>
    cc6a:	2800      	cmp	r0, #0
    cc6c:	d100      	bne.n	cc70 <_strtod_l+0x538>
    cc6e:	e310      	b.n	d292 <_strtod_l+0xb5a>
    cc70:	f7fa f918 	bl	6ea4 <__aeabi_ui2d>
    cc74:	9011      	str	r0, [sp, #68]	; 0x44
    cc76:	9114      	str	r1, [sp, #80]	; 0x50
    cc78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cc7a:	2b00      	cmp	r3, #0
    cc7c:	d000      	beq.n	cc80 <_strtod_l+0x548>
    cc7e:	e303      	b.n	d288 <_strtod_l+0xb50>
    cc80:	2280      	movs	r2, #128	; 0x80
    cc82:	0612      	lsls	r2, r2, #24
    cc84:	4694      	mov	ip, r2
    cc86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc88:	9318      	str	r3, [sp, #96]	; 0x60
    cc8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cc8c:	4463      	add	r3, ip
    cc8e:	9319      	str	r3, [sp, #100]	; 0x64
    cc90:	9e18      	ldr	r6, [sp, #96]	; 0x60
    cc92:	9f19      	ldr	r7, [sp, #100]	; 0x64
    cc94:	23d6      	movs	r3, #214	; 0xd6
    cc96:	4652      	mov	r2, sl
    cc98:	04db      	lsls	r3, r3, #19
    cc9a:	18fb      	adds	r3, r7, r3
    cc9c:	1a9f      	subs	r7, r3, r2
    cc9e:	980a      	ldr	r0, [sp, #40]	; 0x28
    cca0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cca2:	f7ff fb49 	bl	c338 <__ulp>
    cca6:	0002      	movs	r2, r0
    cca8:	000b      	movs	r3, r1
    ccaa:	0030      	movs	r0, r6
    ccac:	0039      	movs	r1, r7
    ccae:	f7f9 faed 	bl	628c <__aeabi_dmul>
    ccb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ccb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ccb6:	f001 ff93 	bl	ebe0 <__aeabi_dadd>
    ccba:	0003      	movs	r3, r0
    ccbc:	000c      	movs	r4, r1
    ccbe:	9304      	str	r3, [sp, #16]
    ccc0:	9405      	str	r4, [sp, #20]
    ccc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ccc4:	2b00      	cmp	r3, #0
    ccc6:	d104      	bne.n	ccd2 <_strtod_l+0x59a>
    ccc8:	4b54      	ldr	r3, [pc, #336]	; (ce1c <_strtod_l+0x6e4>)
    ccca:	4023      	ands	r3, r4
    cccc:	459a      	cmp	sl, r3
    ccce:	d100      	bne.n	ccd2 <_strtod_l+0x59a>
    ccd0:	e1bd      	b.n	d04e <_strtod_l+0x916>
    ccd2:	991e      	ldr	r1, [sp, #120]	; 0x78
    ccd4:	0028      	movs	r0, r5
    ccd6:	f7ff f823 	bl	bd20 <_Bfree>
    ccda:	9908      	ldr	r1, [sp, #32]
    ccdc:	0028      	movs	r0, r5
    ccde:	f7ff f81f 	bl	bd20 <_Bfree>
    cce2:	4641      	mov	r1, r8
    cce4:	0028      	movs	r0, r5
    cce6:	f7ff f81b 	bl	bd20 <_Bfree>
    ccea:	4649      	mov	r1, r9
    ccec:	0028      	movs	r0, r5
    ccee:	f7ff f817 	bl	bd20 <_Bfree>
    ccf2:	465b      	mov	r3, fp
    ccf4:	0028      	movs	r0, r5
    ccf6:	6859      	ldr	r1, [r3, #4]
    ccf8:	f7fe ffea 	bl	bcd0 <_Balloc>
    ccfc:	9008      	str	r0, [sp, #32]
    ccfe:	2800      	cmp	r0, #0
    cd00:	d100      	bne.n	cd04 <_strtod_l+0x5cc>
    cd02:	e17e      	b.n	d002 <_strtod_l+0x8ca>
    cd04:	465a      	mov	r2, fp
    cd06:	4659      	mov	r1, fp
    cd08:	6912      	ldr	r2, [r2, #16]
    cd0a:	310c      	adds	r1, #12
    cd0c:	3202      	adds	r2, #2
    cd0e:	0092      	lsls	r2, r2, #2
    cd10:	300c      	adds	r0, #12
    cd12:	f7fa fbad 	bl	7470 <memcpy>
    cd16:	9b04      	ldr	r3, [sp, #16]
    cd18:	9c05      	ldr	r4, [sp, #20]
    cd1a:	0019      	movs	r1, r3
    cd1c:	0022      	movs	r2, r4
    cd1e:	ab20      	add	r3, sp, #128	; 0x80
    cd20:	9301      	str	r3, [sp, #4]
    cd22:	ab1f      	add	r3, sp, #124	; 0x7c
    cd24:	910a      	str	r1, [sp, #40]	; 0x28
    cd26:	920b      	str	r2, [sp, #44]	; 0x2c
    cd28:	9300      	str	r3, [sp, #0]
    cd2a:	000a      	movs	r2, r1
    cd2c:	0023      	movs	r3, r4
    cd2e:	0028      	movs	r0, r5
    cd30:	f7ff fb94 	bl	c45c <__d2b>
    cd34:	901e      	str	r0, [sp, #120]	; 0x78
    cd36:	2800      	cmp	r0, #0
    cd38:	d100      	bne.n	cd3c <_strtod_l+0x604>
    cd3a:	e2eb      	b.n	d314 <_strtod_l+0xbdc>
    cd3c:	2101      	movs	r1, #1
    cd3e:	0028      	movs	r0, r5
    cd40:	f7ff f8d0 	bl	bee4 <__i2b>
    cd44:	4680      	mov	r8, r0
    cd46:	2800      	cmp	r0, #0
    cd48:	d100      	bne.n	cd4c <_strtod_l+0x614>
    cd4a:	e15a      	b.n	d002 <_strtod_l+0x8ca>
    cd4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cd4e:	2b00      	cmp	r3, #0
    cd50:	da00      	bge.n	cd54 <_strtod_l+0x61c>
    cd52:	e090      	b.n	ce76 <_strtod_l+0x73e>
    cd54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cd56:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    cd58:	18d7      	adds	r7, r2, r3
    cd5a:	990c      	ldr	r1, [sp, #48]	; 0x30
    cd5c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    cd5e:	1a5b      	subs	r3, r3, r1
    cd60:	2136      	movs	r1, #54	; 0x36
    cd62:	189b      	adds	r3, r3, r2
    cd64:	1a8a      	subs	r2, r1, r2
    cd66:	4931      	ldr	r1, [pc, #196]	; (ce2c <_strtod_l+0x6f4>)
    cd68:	3b01      	subs	r3, #1
    cd6a:	428b      	cmp	r3, r1
    cd6c:	da00      	bge.n	cd70 <_strtod_l+0x638>
    cd6e:	e6cb      	b.n	cb08 <_strtod_l+0x3d0>
    cd70:	2300      	movs	r3, #0
    cd72:	9311      	str	r3, [sp, #68]	; 0x44
    cd74:	3301      	adds	r3, #1
    cd76:	9310      	str	r3, [sp, #64]	; 0x40
    cd78:	e6d0      	b.n	cb1c <_strtod_l+0x3e4>
    cd7a:	2201      	movs	r2, #1
    cd7c:	920d      	str	r2, [sp, #52]	; 0x34
    cd7e:	1cb2      	adds	r2, r6, #2
    cd80:	921d      	str	r2, [sp, #116]	; 0x74
    cd82:	78b4      	ldrb	r4, [r6, #2]
    cd84:	e5ca      	b.n	c91c <_strtod_l+0x1e4>
    cd86:	239a      	movs	r3, #154	; 0x9a
    cd88:	005b      	lsls	r3, r3, #1
    cd8a:	429c      	cmp	r4, r3
    cd8c:	dd00      	ble.n	cd90 <_strtod_l+0x658>
    cd8e:	e100      	b.n	cf92 <_strtod_l+0x85a>
    cd90:	1124      	asrs	r4, r4, #4
    cd92:	2c01      	cmp	r4, #1
    cd94:	dc00      	bgt.n	cd98 <_strtod_l+0x660>
    cd96:	e361      	b.n	d45c <_strtod_l+0xd24>
    cd98:	9804      	ldr	r0, [sp, #16]
    cd9a:	9905      	ldr	r1, [sp, #20]
    cd9c:	2201      	movs	r2, #1
    cd9e:	4b24      	ldr	r3, [pc, #144]	; (ce30 <_strtod_l+0x6f8>)
    cda0:	2700      	movs	r7, #0
    cda2:	930c      	str	r3, [sp, #48]	; 0x30
    cda4:	001e      	movs	r6, r3
    cda6:	4691      	mov	r9, r2
    cda8:	2300      	movs	r3, #0
    cdaa:	464a      	mov	r2, r9
    cdac:	4222      	tst	r2, r4
    cdae:	d004      	beq.n	cdba <_strtod_l+0x682>
    cdb0:	6832      	ldr	r2, [r6, #0]
    cdb2:	6873      	ldr	r3, [r6, #4]
    cdb4:	f7f9 fa6a 	bl	628c <__aeabi_dmul>
    cdb8:	2301      	movs	r3, #1
    cdba:	3701      	adds	r7, #1
    cdbc:	1064      	asrs	r4, r4, #1
    cdbe:	3608      	adds	r6, #8
    cdc0:	2c01      	cmp	r4, #1
    cdc2:	d1f2      	bne.n	cdaa <_strtod_l+0x672>
    cdc4:	2b00      	cmp	r3, #0
    cdc6:	d001      	beq.n	cdcc <_strtod_l+0x694>
    cdc8:	f000 fbf4 	bl	d5b4 <_strtod_l+0xe7c>
    cdcc:	4a19      	ldr	r2, [pc, #100]	; (ce34 <_strtod_l+0x6fc>)
    cdce:	9b05      	ldr	r3, [sp, #20]
    cdd0:	4694      	mov	ip, r2
    cdd2:	4463      	add	r3, ip
    cdd4:	9305      	str	r3, [sp, #20]
    cdd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cdd8:	00ff      	lsls	r7, r7, #3
    cdda:	469c      	mov	ip, r3
    cddc:	9a04      	ldr	r2, [sp, #16]
    cdde:	9b05      	ldr	r3, [sp, #20]
    cde0:	4467      	add	r7, ip
    cde2:	6838      	ldr	r0, [r7, #0]
    cde4:	6879      	ldr	r1, [r7, #4]
    cde6:	f7f9 fa51 	bl	628c <__aeabi_dmul>
    cdea:	000a      	movs	r2, r1
    cdec:	0003      	movs	r3, r0
    cdee:	0014      	movs	r4, r2
    cdf0:	9304      	str	r3, [sp, #16]
    cdf2:	9405      	str	r4, [sp, #20]
    cdf4:	4b09      	ldr	r3, [pc, #36]	; (ce1c <_strtod_l+0x6e4>)
    cdf6:	4013      	ands	r3, r2
    cdf8:	4a0f      	ldr	r2, [pc, #60]	; (ce38 <_strtod_l+0x700>)
    cdfa:	4293      	cmp	r3, r2
    cdfc:	d900      	bls.n	ce00 <_strtod_l+0x6c8>
    cdfe:	e0c8      	b.n	cf92 <_strtod_l+0x85a>
    ce00:	4a0e      	ldr	r2, [pc, #56]	; (ce3c <_strtod_l+0x704>)
    ce02:	4293      	cmp	r3, r2
    ce04:	d800      	bhi.n	ce08 <_strtod_l+0x6d0>
    ce06:	e308      	b.n	d41a <_strtod_l+0xce2>
    ce08:	4b0d      	ldr	r3, [pc, #52]	; (ce40 <_strtod_l+0x708>)
    ce0a:	9305      	str	r3, [sp, #20]
    ce0c:	2301      	movs	r3, #1
    ce0e:	425b      	negs	r3, r3
    ce10:	9304      	str	r3, [sp, #16]
    ce12:	e65a      	b.n	caca <_strtod_l+0x392>
    ce14:	000120e0 	.word	0x000120e0
    ce18:	3ff00000 	.word	0x3ff00000
    ce1c:	7ff00000 	.word	0x7ff00000
    ce20:	7fe00000 	.word	0x7fe00000
    ce24:	ffc00000 	.word	0xffc00000
    ce28:	41dfffff 	.word	0x41dfffff
    ce2c:	fffffc02 	.word	0xfffffc02
    ce30:	000120b8 	.word	0x000120b8
    ce34:	fcb00000 	.word	0xfcb00000
    ce38:	7ca00000 	.word	0x7ca00000
    ce3c:	7c900000 	.word	0x7c900000
    ce40:	7fefffff 	.word	0x7fefffff
    ce44:	4ace      	ldr	r2, [pc, #824]	; (d180 <_strtod_l+0xa48>)
    ce46:	e5aa      	b.n	c99e <_strtod_l+0x266>
    ce48:	4bce      	ldr	r3, [pc, #824]	; (d184 <_strtod_l+0xa4c>)
    ce4a:	2200      	movs	r2, #0
    ce4c:	0030      	movs	r0, r6
    ce4e:	0039      	movs	r1, r7
    ce50:	f7f9 fa1c 	bl	628c <__aeabi_dmul>
    ce54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce56:	9011      	str	r0, [sp, #68]	; 0x44
    ce58:	9114      	str	r1, [sp, #80]	; 0x50
    ce5a:	2b00      	cmp	r3, #0
    ce5c:	d139      	bne.n	ced2 <_strtod_l+0x79a>
    ce5e:	2280      	movs	r2, #128	; 0x80
    ce60:	0612      	lsls	r2, r2, #24
    ce62:	000b      	movs	r3, r1
    ce64:	4694      	mov	ip, r2
    ce66:	4463      	add	r3, ip
    ce68:	9012      	str	r0, [sp, #72]	; 0x48
    ce6a:	9313      	str	r3, [sp, #76]	; 0x4c
    ce6c:	9b05      	ldr	r3, [sp, #20]
    ce6e:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ce70:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    ce72:	9310      	str	r3, [sp, #64]	; 0x40
    ce74:	e6dd      	b.n	cc32 <_strtod_l+0x4fa>
    ce76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce78:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ce7a:	1ad6      	subs	r6, r2, r3
    ce7c:	e76d      	b.n	cd5a <_strtod_l+0x622>
    ce7e:	49c2      	ldr	r1, [pc, #776]	; (d188 <_strtod_l+0xa50>)
    ce80:	1acb      	subs	r3, r1, r3
    ce82:	2101      	movs	r1, #1
    ce84:	4099      	lsls	r1, r3
    ce86:	2301      	movs	r3, #1
    ce88:	9111      	str	r1, [sp, #68]	; 0x44
    ce8a:	9310      	str	r3, [sp, #64]	; 0x40
    ce8c:	e646      	b.n	cb1c <_strtod_l+0x3e4>
    ce8e:	9904      	ldr	r1, [sp, #16]
    ce90:	9a05      	ldr	r2, [sp, #20]
    ce92:	2900      	cmp	r1, #0
    ce94:	d140      	bne.n	cf18 <_strtod_l+0x7e0>
    ce96:	9210      	str	r2, [sp, #64]	; 0x40
    ce98:	0313      	lsls	r3, r2, #12
    ce9a:	d142      	bne.n	cf22 <_strtod_l+0x7ea>
    ce9c:	2200      	movs	r2, #0
    ce9e:	4bbb      	ldr	r3, [pc, #748]	; (d18c <_strtod_l+0xa54>)
    cea0:	0030      	movs	r0, r6
    cea2:	0039      	movs	r1, r7
    cea4:	f7fa f928 	bl	70f8 <__aeabi_dcmplt>
    cea8:	2800      	cmp	r0, #0
    ceaa:	d000      	beq.n	ceae <_strtod_l+0x776>
    ceac:	e2bf      	b.n	d42e <_strtod_l+0xcf6>
    ceae:	2200      	movs	r2, #0
    ceb0:	4bb4      	ldr	r3, [pc, #720]	; (d184 <_strtod_l+0xa4c>)
    ceb2:	0030      	movs	r0, r6
    ceb4:	0039      	movs	r1, r7
    ceb6:	f7f9 f9e9 	bl	628c <__aeabi_dmul>
    ceba:	2280      	movs	r2, #128	; 0x80
    cebc:	0612      	lsls	r2, r2, #24
    cebe:	000b      	movs	r3, r1
    cec0:	4694      	mov	ip, r2
    cec2:	4463      	add	r3, ip
    cec4:	9011      	str	r0, [sp, #68]	; 0x44
    cec6:	9114      	str	r1, [sp, #80]	; 0x50
    cec8:	901a      	str	r0, [sp, #104]	; 0x68
    ceca:	931b      	str	r3, [sp, #108]	; 0x6c
    cecc:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    cece:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    ced0:	e6af      	b.n	cc32 <_strtod_l+0x4fa>
    ced2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ced4:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ced6:	9212      	str	r2, [sp, #72]	; 0x48
    ced8:	9313      	str	r3, [sp, #76]	; 0x4c
    ceda:	e7c7      	b.n	ce6c <_strtod_l+0x734>
    cedc:	9b07      	ldr	r3, [sp, #28]
    cede:	9502      	str	r5, [sp, #8]
    cee0:	9301      	str	r3, [sp, #4]
    cee2:	ab1e      	add	r3, sp, #120	; 0x78
    cee4:	9300      	str	r3, [sp, #0]
    cee6:	4aaa      	ldr	r2, [pc, #680]	; (d190 <_strtod_l+0xa58>)
    cee8:	ab1f      	add	r3, sp, #124	; 0x7c
    ceea:	a91d      	add	r1, sp, #116	; 0x74
    ceec:	9809      	ldr	r0, [sp, #36]	; 0x24
    ceee:	f001 f8a1 	bl	e034 <__gethex>
    cef2:	2407      	movs	r4, #7
    cef4:	0005      	movs	r5, r0
    cef6:	4004      	ands	r4, r0
    cef8:	d100      	bne.n	cefc <_strtod_l+0x7c4>
    cefa:	e556      	b.n	c9aa <_strtod_l+0x272>
    cefc:	2c06      	cmp	r4, #6
    cefe:	d000      	beq.n	cf02 <_strtod_l+0x7ca>
    cf00:	e15e      	b.n	d1c0 <_strtod_l+0xa88>
    cf02:	4653      	mov	r3, sl
    cf04:	3301      	adds	r3, #1
    cf06:	931d      	str	r3, [sp, #116]	; 0x74
    cf08:	2300      	movs	r3, #0
    cf0a:	2400      	movs	r4, #0
    cf0c:	2500      	movs	r5, #0
    cf0e:	9307      	str	r3, [sp, #28]
    cf10:	e54d      	b.n	c9ae <_strtod_l+0x276>
    cf12:	961d      	str	r6, [sp, #116]	; 0x74
    cf14:	2200      	movs	r2, #0
    cf16:	e448      	b.n	c7aa <_strtod_l+0x72>
    cf18:	2901      	cmp	r1, #1
    cf1a:	d100      	bne.n	cf1e <_strtod_l+0x7e6>
    cf1c:	e1d8      	b.n	d2d0 <_strtod_l+0xb98>
    cf1e:	9b05      	ldr	r3, [sp, #20]
    cf20:	9310      	str	r3, [sp, #64]	; 0x40
    cf22:	2300      	movs	r3, #0
    cf24:	9311      	str	r3, [sp, #68]	; 0x44
    cf26:	4b99      	ldr	r3, [pc, #612]	; (d18c <_strtod_l+0xa54>)
    cf28:	2600      	movs	r6, #0
    cf2a:	4f9a      	ldr	r7, [pc, #616]	; (d194 <_strtod_l+0xa5c>)
    cf2c:	9314      	str	r3, [sp, #80]	; 0x50
    cf2e:	e680      	b.n	cc32 <_strtod_l+0x4fa>
    cf30:	6839      	ldr	r1, [r7, #0]
    cf32:	9a08      	ldr	r2, [sp, #32]
    cf34:	4650      	mov	r0, sl
    cf36:	f001 fe09 	bl	eb4c <strncmp>
    cf3a:	900a      	str	r0, [sp, #40]	; 0x28
    cf3c:	2800      	cmp	r0, #0
    cf3e:	d009      	beq.n	cf54 <_strtod_l+0x81c>
    cf40:	2300      	movs	r3, #0
    cf42:	2200      	movs	r2, #0
    cf44:	930a      	str	r3, [sp, #40]	; 0x28
    cf46:	4699      	mov	r9, r3
    cf48:	4698      	mov	r8, r3
    cf4a:	2000      	movs	r0, #0
    cf4c:	2500      	movs	r5, #0
    cf4e:	9208      	str	r2, [sp, #32]
    cf50:	f7ff fc24 	bl	c79c <_strtod_l+0x64>
    cf54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    cf56:	9b08      	ldr	r3, [sp, #32]
    cf58:	4694      	mov	ip, r2
    cf5a:	4463      	add	r3, ip
    cf5c:	931d      	str	r3, [sp, #116]	; 0x74
    cf5e:	781c      	ldrb	r4, [r3, #0]
    cf60:	0019      	movs	r1, r3
    cf62:	1c5a      	adds	r2, r3, #1
    cf64:	2300      	movs	r3, #0
    cf66:	2c30      	cmp	r4, #48	; 0x30
    cf68:	d105      	bne.n	cf76 <_strtod_l+0x83e>
    cf6a:	921d      	str	r2, [sp, #116]	; 0x74
    cf6c:	7814      	ldrb	r4, [r2, #0]
    cf6e:	1a53      	subs	r3, r2, r1
    cf70:	3201      	adds	r2, #1
    cf72:	2c30      	cmp	r4, #48	; 0x30
    cf74:	d0f9      	beq.n	cf6a <_strtod_l+0x832>
    cf76:	0022      	movs	r2, r4
    cf78:	3a31      	subs	r2, #49	; 0x31
    cf7a:	2a08      	cmp	r2, #8
    cf7c:	d800      	bhi.n	cf80 <_strtod_l+0x848>
    cf7e:	e153      	b.n	d228 <_strtod_l+0xaf0>
    cf80:	2200      	movs	r2, #0
    cf82:	4691      	mov	r9, r2
    cf84:	4690      	mov	r8, r2
    cf86:	3201      	adds	r2, #1
    cf88:	2000      	movs	r0, #0
    cf8a:	2500      	movs	r5, #0
    cf8c:	9208      	str	r2, [sp, #32]
    cf8e:	f7ff fc05 	bl	c79c <_strtod_l+0x64>
    cf92:	2322      	movs	r3, #34	; 0x22
    cf94:	9a09      	ldr	r2, [sp, #36]	; 0x24
    cf96:	6013      	str	r3, [r2, #0]
    cf98:	4b7f      	ldr	r3, [pc, #508]	; (d198 <_strtod_l+0xa60>)
    cf9a:	9305      	str	r3, [sp, #20]
    cf9c:	2300      	movs	r3, #0
    cf9e:	9304      	str	r3, [sp, #16]
    cfa0:	e569      	b.n	ca76 <_strtod_l+0x33e>
    cfa2:	497e      	ldr	r1, [pc, #504]	; (d19c <_strtod_l+0xa64>)
    cfa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    cfa6:	468c      	mov	ip, r1
    cfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cfaa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    cfac:	4462      	add	r2, ip
    cfae:	9205      	str	r2, [sp, #20]
    cfb0:	960a      	str	r6, [sp, #40]	; 0x28
    cfb2:	970b      	str	r7, [sp, #44]	; 0x2c
    cfb4:	9e04      	ldr	r6, [sp, #16]
    cfb6:	9f05      	ldr	r7, [sp, #20]
    cfb8:	0030      	movs	r0, r6
    cfba:	0039      	movs	r1, r7
    cfbc:	9316      	str	r3, [sp, #88]	; 0x58
    cfbe:	9417      	str	r4, [sp, #92]	; 0x5c
    cfc0:	f7ff f9ba 	bl	c338 <__ulp>
    cfc4:	0002      	movs	r2, r0
    cfc6:	000b      	movs	r3, r1
    cfc8:	980a      	ldr	r0, [sp, #40]	; 0x28
    cfca:	990b      	ldr	r1, [sp, #44]	; 0x2c
    cfcc:	f7f9 f95e 	bl	628c <__aeabi_dmul>
    cfd0:	0032      	movs	r2, r6
    cfd2:	003b      	movs	r3, r7
    cfd4:	f001 fe04 	bl	ebe0 <__aeabi_dadd>
    cfd8:	4b6f      	ldr	r3, [pc, #444]	; (d198 <_strtod_l+0xa60>)
    cfda:	4a71      	ldr	r2, [pc, #452]	; (d1a0 <_strtod_l+0xa68>)
    cfdc:	9004      	str	r0, [sp, #16]
    cfde:	9105      	str	r1, [sp, #20]
    cfe0:	400b      	ands	r3, r1
    cfe2:	4293      	cmp	r3, r2
    cfe4:	d800      	bhi.n	cfe8 <_strtod_l+0x8b0>
    cfe6:	e0c6      	b.n	d176 <_strtod_l+0xa3e>
    cfe8:	4b6e      	ldr	r3, [pc, #440]	; (d1a4 <_strtod_l+0xa6c>)
    cfea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    cfec:	429a      	cmp	r2, r3
    cfee:	d005      	beq.n	cffc <_strtod_l+0x8c4>
    cff0:	4b6c      	ldr	r3, [pc, #432]	; (d1a4 <_strtod_l+0xa6c>)
    cff2:	9305      	str	r3, [sp, #20]
    cff4:	2301      	movs	r3, #1
    cff6:	425b      	negs	r3, r3
    cff8:	9304      	str	r3, [sp, #16]
    cffa:	e66a      	b.n	ccd2 <_strtod_l+0x59a>
    cffc:	9b16      	ldr	r3, [sp, #88]	; 0x58
    cffe:	3301      	adds	r3, #1
    d000:	d1f6      	bne.n	cff0 <_strtod_l+0x8b8>
    d002:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d004:	46da      	mov	sl, fp
    d006:	469b      	mov	fp, r3
    d008:	981e      	ldr	r0, [sp, #120]	; 0x78
    d00a:	2322      	movs	r3, #34	; 0x22
    d00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d00e:	6013      	str	r3, [r2, #0]
    d010:	4b61      	ldr	r3, [pc, #388]	; (d198 <_strtod_l+0xa60>)
    d012:	9305      	str	r3, [sp, #20]
    d014:	2300      	movs	r3, #0
    d016:	9304      	str	r3, [sp, #16]
    d018:	9c04      	ldr	r4, [sp, #16]
    d01a:	9d05      	ldr	r5, [sp, #20]
    d01c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d01e:	0001      	movs	r1, r0
    d020:	0030      	movs	r0, r6
    d022:	f7fe fe7d 	bl	bd20 <_Bfree>
    d026:	9908      	ldr	r1, [sp, #32]
    d028:	0030      	movs	r0, r6
    d02a:	f7fe fe79 	bl	bd20 <_Bfree>
    d02e:	4641      	mov	r1, r8
    d030:	0030      	movs	r0, r6
    d032:	f7fe fe75 	bl	bd20 <_Bfree>
    d036:	4651      	mov	r1, sl
    d038:	0030      	movs	r0, r6
    d03a:	f7fe fe71 	bl	bd20 <_Bfree>
    d03e:	4649      	mov	r1, r9
    d040:	0030      	movs	r0, r6
    d042:	f7fe fe6d 	bl	bd20 <_Bfree>
    d046:	e4b2      	b.n	c9ae <_strtod_l+0x276>
    d048:	2200      	movs	r2, #0
    d04a:	920d      	str	r2, [sp, #52]	; 0x34
    d04c:	e697      	b.n	cd7e <_strtod_l+0x646>
    d04e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    d050:	9e14      	ldr	r6, [sp, #80]	; 0x50
    d052:	0038      	movs	r0, r7
    d054:	0031      	movs	r1, r6
    d056:	f7f9 feaf 	bl	6db8 <__aeabi_d2iz>
    d05a:	f7f9 fee1 	bl	6e20 <__aeabi_i2d>
    d05e:	000b      	movs	r3, r1
    d060:	0002      	movs	r2, r0
    d062:	0031      	movs	r1, r6
    d064:	0038      	movs	r0, r7
    d066:	f7f9 fb91 	bl	678c <__aeabi_dsub>
    d06a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d06c:	0006      	movs	r6, r0
    d06e:	000f      	movs	r7, r1
    d070:	2b00      	cmp	r3, #0
    d072:	d112      	bne.n	d09a <_strtod_l+0x962>
    d074:	9b04      	ldr	r3, [sp, #16]
    d076:	2b00      	cmp	r3, #0
    d078:	d10f      	bne.n	d09a <_strtod_l+0x962>
    d07a:	0324      	lsls	r4, r4, #12
    d07c:	d10d      	bne.n	d09a <_strtod_l+0x962>
    d07e:	4a4a      	ldr	r2, [pc, #296]	; (d1a8 <_strtod_l+0xa70>)
    d080:	4b4a      	ldr	r3, [pc, #296]	; (d1ac <_strtod_l+0xa74>)
    d082:	f7fa f839 	bl	70f8 <__aeabi_dcmplt>
    d086:	2800      	cmp	r0, #0
    d088:	d100      	bne.n	d08c <_strtod_l+0x954>
    d08a:	e622      	b.n	ccd2 <_strtod_l+0x59a>
    d08c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d08e:	46da      	mov	sl, fp
    d090:	9c04      	ldr	r4, [sp, #16]
    d092:	9d05      	ldr	r5, [sp, #20]
    d094:	469b      	mov	fp, r3
    d096:	981e      	ldr	r0, [sp, #120]	; 0x78
    d098:	e7c0      	b.n	d01c <_strtod_l+0x8e4>
    d09a:	4a43      	ldr	r2, [pc, #268]	; (d1a8 <_strtod_l+0xa70>)
    d09c:	4b44      	ldr	r3, [pc, #272]	; (d1b0 <_strtod_l+0xa78>)
    d09e:	0030      	movs	r0, r6
    d0a0:	0039      	movs	r1, r7
    d0a2:	f7fa f829 	bl	70f8 <__aeabi_dcmplt>
    d0a6:	2800      	cmp	r0, #0
    d0a8:	d1f0      	bne.n	d08c <_strtod_l+0x954>
    d0aa:	4a42      	ldr	r2, [pc, #264]	; (d1b4 <_strtod_l+0xa7c>)
    d0ac:	4b35      	ldr	r3, [pc, #212]	; (d184 <_strtod_l+0xa4c>)
    d0ae:	0030      	movs	r0, r6
    d0b0:	0039      	movs	r1, r7
    d0b2:	f7fa f835 	bl	7120 <__aeabi_dcmpgt>
    d0b6:	2800      	cmp	r0, #0
    d0b8:	d100      	bne.n	d0bc <_strtod_l+0x984>
    d0ba:	e60a      	b.n	ccd2 <_strtod_l+0x59a>
    d0bc:	e7e6      	b.n	d08c <_strtod_l+0x954>
    d0be:	46a0      	mov	r8, r4
    d0c0:	991d      	ldr	r1, [sp, #116]	; 0x74
    d0c2:	3502      	adds	r5, #2
    d0c4:	2f08      	cmp	r7, #8
    d0c6:	dc00      	bgt.n	d0ca <_strtod_l+0x992>
    d0c8:	e0b9      	b.n	d23e <_strtod_l+0xb06>
    d0ca:	2300      	movs	r3, #0
    d0cc:	2d10      	cmp	r5, #16
    d0ce:	dc05      	bgt.n	d0dc <_strtod_l+0x9a4>
    d0d0:	464c      	mov	r4, r9
    d0d2:	00a4      	lsls	r4, r4, #2
    d0d4:	444c      	add	r4, r9
    d0d6:	4691      	mov	r9, r2
    d0d8:	0064      	lsls	r4, r4, #1
    d0da:	44a1      	add	r9, r4
    d0dc:	1c4a      	adds	r2, r1, #1
    d0de:	921d      	str	r2, [sp, #116]	; 0x74
    d0e0:	784c      	ldrb	r4, [r1, #1]
    d0e2:	f7ff fbe3 	bl	c8ac <_strtod_l+0x174>
    d0e6:	2c00      	cmp	r4, #0
    d0e8:	d100      	bne.n	d0ec <_strtod_l+0x9b4>
    d0ea:	e4ee      	b.n	caca <_strtod_l+0x392>
    d0ec:	230f      	movs	r3, #15
    d0ee:	4264      	negs	r4, r4
    d0f0:	4023      	ands	r3, r4
    d0f2:	d00a      	beq.n	d10a <_strtod_l+0x9d2>
    d0f4:	9804      	ldr	r0, [sp, #16]
    d0f6:	9905      	ldr	r1, [sp, #20]
    d0f8:	4a2f      	ldr	r2, [pc, #188]	; (d1b8 <_strtod_l+0xa80>)
    d0fa:	00db      	lsls	r3, r3, #3
    d0fc:	18d3      	adds	r3, r2, r3
    d0fe:	681a      	ldr	r2, [r3, #0]
    d100:	685b      	ldr	r3, [r3, #4]
    d102:	f7f8 fd8f 	bl	5c24 <__aeabi_ddiv>
    d106:	9004      	str	r0, [sp, #16]
    d108:	9105      	str	r1, [sp, #20]
    d10a:	1124      	asrs	r4, r4, #4
    d10c:	d100      	bne.n	d110 <_strtod_l+0x9d8>
    d10e:	e4dc      	b.n	caca <_strtod_l+0x392>
    d110:	2c1f      	cmp	r4, #31
    d112:	dc29      	bgt.n	d168 <_strtod_l+0xa30>
    d114:	2310      	movs	r3, #16
    d116:	4023      	ands	r3, r4
    d118:	930c      	str	r3, [sp, #48]	; 0x30
    d11a:	d100      	bne.n	d11e <_strtod_l+0x9e6>
    d11c:	e1c5      	b.n	d4aa <_strtod_l+0xd72>
    d11e:	236a      	movs	r3, #106	; 0x6a
    d120:	930c      	str	r3, [sp, #48]	; 0x30
    d122:	2c00      	cmp	r4, #0
    d124:	dc00      	bgt.n	d128 <_strtod_l+0x9f0>
    d126:	e1c4      	b.n	d4b2 <_strtod_l+0xd7a>
    d128:	9804      	ldr	r0, [sp, #16]
    d12a:	9905      	ldr	r1, [sp, #20]
    d12c:	2300      	movs	r3, #0
    d12e:	2701      	movs	r7, #1
    d130:	4e22      	ldr	r6, [pc, #136]	; (d1bc <_strtod_l+0xa84>)
    d132:	4227      	tst	r7, r4
    d134:	d004      	beq.n	d140 <_strtod_l+0xa08>
    d136:	6832      	ldr	r2, [r6, #0]
    d138:	6873      	ldr	r3, [r6, #4]
    d13a:	f7f9 f8a7 	bl	628c <__aeabi_dmul>
    d13e:	2301      	movs	r3, #1
    d140:	1064      	asrs	r4, r4, #1
    d142:	3608      	adds	r6, #8
    d144:	2c00      	cmp	r4, #0
    d146:	d1f4      	bne.n	d132 <_strtod_l+0x9fa>
    d148:	2b00      	cmp	r3, #0
    d14a:	d000      	beq.n	d14e <_strtod_l+0xa16>
    d14c:	e221      	b.n	d592 <_strtod_l+0xe5a>
    d14e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d150:	2b00      	cmp	r3, #0
    d152:	d000      	beq.n	d156 <_strtod_l+0xa1e>
    d154:	e1ad      	b.n	d4b2 <_strtod_l+0xd7a>
    d156:	9804      	ldr	r0, [sp, #16]
    d158:	9905      	ldr	r1, [sp, #20]
    d15a:	2200      	movs	r2, #0
    d15c:	2300      	movs	r3, #0
    d15e:	f7f9 ffc5 	bl	70ec <__aeabi_dcmpeq>
    d162:	2800      	cmp	r0, #0
    d164:	d100      	bne.n	d168 <_strtod_l+0xa30>
    d166:	e4b2      	b.n	cace <_strtod_l+0x396>
    d168:	2322      	movs	r3, #34	; 0x22
    d16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d16c:	2400      	movs	r4, #0
    d16e:	6013      	str	r3, [r2, #0]
    d170:	2500      	movs	r5, #0
    d172:	f7ff fc1c 	bl	c9ae <_strtod_l+0x276>
    d176:	23d4      	movs	r3, #212	; 0xd4
    d178:	049b      	lsls	r3, r3, #18
    d17a:	18cc      	adds	r4, r1, r3
    d17c:	9405      	str	r4, [sp, #20]
    d17e:	e5a0      	b.n	ccc2 <_strtod_l+0x58a>
    d180:	00004e1f 	.word	0x00004e1f
    d184:	3fe00000 	.word	0x3fe00000
    d188:	fffffbe2 	.word	0xfffffbe2
    d18c:	3ff00000 	.word	0x3ff00000
    d190:	00012294 	.word	0x00012294
    d194:	bff00000 	.word	0xbff00000
    d198:	7ff00000 	.word	0x7ff00000
    d19c:	fcb00000 	.word	0xfcb00000
    d1a0:	7c9fffff 	.word	0x7c9fffff
    d1a4:	7fefffff 	.word	0x7fefffff
    d1a8:	94a03595 	.word	0x94a03595
    d1ac:	3fcfffff 	.word	0x3fcfffff
    d1b0:	3fdfffff 	.word	0x3fdfffff
    d1b4:	35afe535 	.word	0x35afe535
    d1b8:	000120e0 	.word	0x000120e0
    d1bc:	000122c0 	.word	0x000122c0
    d1c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    d1c2:	2a00      	cmp	r2, #0
    d1c4:	d007      	beq.n	d1d6 <_strtod_l+0xa9e>
    d1c6:	2135      	movs	r1, #53	; 0x35
    d1c8:	a820      	add	r0, sp, #128	; 0x80
    d1ca:	f7ff f9df 	bl	c58c <__copybits>
    d1ce:	991e      	ldr	r1, [sp, #120]	; 0x78
    d1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d1d2:	f7fe fda5 	bl	bd20 <_Bfree>
    d1d6:	2c05      	cmp	r4, #5
    d1d8:	d808      	bhi.n	d1ec <_strtod_l+0xab4>
    d1da:	4bd1      	ldr	r3, [pc, #836]	; (d520 <_strtod_l+0xde8>)
    d1dc:	00a4      	lsls	r4, r4, #2
    d1de:	591b      	ldr	r3, [r3, r4]
    d1e0:	469f      	mov	pc, r3
    d1e2:	4bd0      	ldr	r3, [pc, #832]	; (d524 <_strtod_l+0xdec>)
    d1e4:	9305      	str	r3, [sp, #20]
    d1e6:	2301      	movs	r3, #1
    d1e8:	425b      	negs	r3, r3
    d1ea:	9304      	str	r3, [sp, #16]
    d1ec:	072b      	lsls	r3, r5, #28
    d1ee:	d400      	bmi.n	d1f2 <_strtod_l+0xaba>
    d1f0:	e441      	b.n	ca76 <_strtod_l+0x33e>
    d1f2:	2380      	movs	r3, #128	; 0x80
    d1f4:	9a05      	ldr	r2, [sp, #20]
    d1f6:	061b      	lsls	r3, r3, #24
    d1f8:	431a      	orrs	r2, r3
    d1fa:	9205      	str	r2, [sp, #20]
    d1fc:	e43b      	b.n	ca76 <_strtod_l+0x33e>
    d1fe:	4bca      	ldr	r3, [pc, #808]	; (d528 <_strtod_l+0xdf0>)
    d200:	9305      	str	r3, [sp, #20]
    d202:	e7f3      	b.n	d1ec <_strtod_l+0xab4>
    d204:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d206:	9304      	str	r3, [sp, #16]
    d208:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d20a:	9305      	str	r3, [sp, #20]
    d20c:	e7ee      	b.n	d1ec <_strtod_l+0xab4>
    d20e:	49c7      	ldr	r1, [pc, #796]	; (d52c <_strtod_l+0xdf4>)
    d210:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d212:	468c      	mov	ip, r1
    d214:	9304      	str	r3, [sp, #16]
    d216:	4ac6      	ldr	r2, [pc, #792]	; (d530 <_strtod_l+0xdf8>)
    d218:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d21a:	401a      	ands	r2, r3
    d21c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d21e:	4463      	add	r3, ip
    d220:	051b      	lsls	r3, r3, #20
    d222:	431a      	orrs	r2, r3
    d224:	9205      	str	r2, [sp, #20]
    d226:	e7e1      	b.n	d1ec <_strtod_l+0xab4>
    d228:	2230      	movs	r2, #48	; 0x30
    d22a:	1c58      	adds	r0, r3, #1
    d22c:	2300      	movs	r3, #0
    d22e:	991d      	ldr	r1, [sp, #116]	; 0x74
    d230:	4252      	negs	r2, r2
    d232:	4694      	mov	ip, r2
    d234:	468a      	mov	sl, r1
    d236:	4698      	mov	r8, r3
    d238:	2501      	movs	r5, #1
    d23a:	4699      	mov	r9, r3
    d23c:	44a4      	add	ip, r4
    d23e:	4643      	mov	r3, r8
    d240:	009c      	lsls	r4, r3, #2
    d242:	4444      	add	r4, r8
    d244:	0064      	lsls	r4, r4, #1
    d246:	4464      	add	r4, ip
    d248:	46a0      	mov	r8, r4
    d24a:	2300      	movs	r3, #0
    d24c:	e746      	b.n	d0dc <_strtod_l+0x9a4>
    d24e:	2325      	movs	r3, #37	; 0x25
    d250:	9e08      	ldr	r6, [sp, #32]
    d252:	1b5b      	subs	r3, r3, r5
    d254:	429e      	cmp	r6, r3
    d256:	dd01      	ble.n	d25c <_strtod_l+0xb24>
    d258:	f7ff fc1e 	bl	ca98 <_strtod_l+0x360>
    d25c:	230f      	movs	r3, #15
    d25e:	4cb5      	ldr	r4, [pc, #724]	; (d534 <_strtod_l+0xdfc>)
    d260:	1b5d      	subs	r5, r3, r5
    d262:	00e9      	lsls	r1, r5, #3
    d264:	1b75      	subs	r5, r6, r5
    d266:	1861      	adds	r1, r4, r1
    d268:	00ed      	lsls	r5, r5, #3
    d26a:	1964      	adds	r4, r4, r5
    d26c:	9a04      	ldr	r2, [sp, #16]
    d26e:	9b05      	ldr	r3, [sp, #20]
    d270:	6808      	ldr	r0, [r1, #0]
    d272:	6849      	ldr	r1, [r1, #4]
    d274:	f7f9 f80a 	bl	628c <__aeabi_dmul>
    d278:	6822      	ldr	r2, [r4, #0]
    d27a:	6863      	ldr	r3, [r4, #4]
    d27c:	f7f9 f806 	bl	628c <__aeabi_dmul>
    d280:	0004      	movs	r4, r0
    d282:	000d      	movs	r5, r1
    d284:	f7ff fb93 	bl	c9ae <_strtod_l+0x276>
    d288:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d28a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d28c:	9218      	str	r2, [sp, #96]	; 0x60
    d28e:	9319      	str	r3, [sp, #100]	; 0x64
    d290:	e4fe      	b.n	cc90 <_strtod_l+0x558>
    d292:	2300      	movs	r3, #0
    d294:	9311      	str	r3, [sp, #68]	; 0x44
    d296:	4ba8      	ldr	r3, [pc, #672]	; (d538 <_strtod_l+0xe00>)
    d298:	9314      	str	r3, [sp, #80]	; 0x50
    d29a:	e4ed      	b.n	cc78 <_strtod_l+0x540>
    d29c:	2c49      	cmp	r4, #73	; 0x49
    d29e:	d001      	beq.n	d2a4 <_strtod_l+0xb6c>
    d2a0:	f7ff fa8e 	bl	c7c0 <_strtod_l+0x88>
    d2a4:	49a5      	ldr	r1, [pc, #660]	; (d53c <_strtod_l+0xe04>)
    d2a6:	a81d      	add	r0, sp, #116	; 0x74
    d2a8:	f001 f958 	bl	e55c <__match>
    d2ac:	2800      	cmp	r0, #0
    d2ae:	d101      	bne.n	d2b4 <_strtod_l+0xb7c>
    d2b0:	f7ff fa86 	bl	c7c0 <_strtod_l+0x88>
    d2b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d2b6:	49a2      	ldr	r1, [pc, #648]	; (d540 <_strtod_l+0xe08>)
    d2b8:	3b01      	subs	r3, #1
    d2ba:	a81d      	add	r0, sp, #116	; 0x74
    d2bc:	931d      	str	r3, [sp, #116]	; 0x74
    d2be:	f001 f94d 	bl	e55c <__match>
    d2c2:	2800      	cmp	r0, #0
    d2c4:	d000      	beq.n	d2c8 <_strtod_l+0xb90>
    d2c6:	e667      	b.n	cf98 <_strtod_l+0x860>
    d2c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d2ca:	3301      	adds	r3, #1
    d2cc:	931d      	str	r3, [sp, #116]	; 0x74
    d2ce:	e663      	b.n	cf98 <_strtod_l+0x860>
    d2d0:	9b05      	ldr	r3, [sp, #20]
    d2d2:	9310      	str	r3, [sp, #64]	; 0x40
    d2d4:	2b00      	cmp	r3, #0
    d2d6:	d000      	beq.n	d2da <_strtod_l+0xba2>
    d2d8:	e623      	b.n	cf22 <_strtod_l+0x7ea>
    d2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d2dc:	46da      	mov	sl, fp
    d2de:	469b      	mov	fp, r3
    d2e0:	2322      	movs	r3, #34	; 0x22
    d2e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d2e4:	981e      	ldr	r0, [sp, #120]	; 0x78
    d2e6:	6013      	str	r3, [r2, #0]
    d2e8:	2400      	movs	r4, #0
    d2ea:	2500      	movs	r5, #0
    d2ec:	e696      	b.n	d01c <_strtod_l+0x8e4>
    d2ee:	9a08      	ldr	r2, [sp, #32]
    d2f0:	0013      	movs	r3, r2
    d2f2:	3316      	adds	r3, #22
    d2f4:	da01      	bge.n	d2fa <_strtod_l+0xbc2>
    d2f6:	f7ff fbcf 	bl	ca98 <_strtod_l+0x360>
    d2fa:	00d0      	lsls	r0, r2, #3
    d2fc:	4a8d      	ldr	r2, [pc, #564]	; (d534 <_strtod_l+0xdfc>)
    d2fe:	1a12      	subs	r2, r2, r0
    d300:	6853      	ldr	r3, [r2, #4]
    d302:	6812      	ldr	r2, [r2, #0]
    d304:	9804      	ldr	r0, [sp, #16]
    d306:	9905      	ldr	r1, [sp, #20]
    d308:	f7f8 fc8c 	bl	5c24 <__aeabi_ddiv>
    d30c:	0004      	movs	r4, r0
    d30e:	000d      	movs	r5, r1
    d310:	f7ff fb4d 	bl	c9ae <_strtod_l+0x276>
    d314:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d316:	46da      	mov	sl, fp
    d318:	469b      	mov	fp, r3
    d31a:	e676      	b.n	d00a <_strtod_l+0x8d2>
    d31c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d31e:	46da      	mov	sl, fp
    d320:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d322:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d324:	469b      	mov	fp, r3
    d326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d328:	2b00      	cmp	r3, #0
    d32a:	d100      	bne.n	d32e <_strtod_l+0xbf6>
    d32c:	e08d      	b.n	d44a <_strtod_l+0xd12>
    d32e:	9804      	ldr	r0, [sp, #16]
    d330:	9905      	ldr	r1, [sp, #20]
    d332:	030b      	lsls	r3, r1, #12
    d334:	000a      	movs	r2, r1
    d336:	4983      	ldr	r1, [pc, #524]	; (d544 <_strtod_l+0xe0c>)
    d338:	0b1b      	lsrs	r3, r3, #12
    d33a:	428b      	cmp	r3, r1
    d33c:	d100      	bne.n	d340 <_strtod_l+0xc08>
    d33e:	e0cc      	b.n	d4da <_strtod_l+0xda2>
    d340:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d342:	2b00      	cmp	r3, #0
    d344:	d100      	bne.n	d348 <_strtod_l+0xc10>
    d346:	e07b      	b.n	d440 <_strtod_l+0xd08>
    d348:	9a05      	ldr	r2, [sp, #20]
    d34a:	4213      	tst	r3, r2
    d34c:	d010      	beq.n	d370 <_strtod_l+0xc38>
    d34e:	9804      	ldr	r0, [sp, #16]
    d350:	9905      	ldr	r1, [sp, #20]
    d352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d356:	2b00      	cmp	r3, #0
    d358:	d100      	bne.n	d35c <_strtod_l+0xc24>
    d35a:	e083      	b.n	d464 <_strtod_l+0xd2c>
    d35c:	f7ff f9d4 	bl	c708 <sulp>
    d360:	0002      	movs	r2, r0
    d362:	000b      	movs	r3, r1
    d364:	0020      	movs	r0, r4
    d366:	0029      	movs	r1, r5
    d368:	f001 fc3a 	bl	ebe0 <__aeabi_dadd>
    d36c:	0004      	movs	r4, r0
    d36e:	000d      	movs	r5, r1
    d370:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d372:	2b00      	cmp	r3, #0
    d374:	d017      	beq.n	d3a6 <_strtod_l+0xc6e>
    d376:	4b74      	ldr	r3, [pc, #464]	; (d548 <_strtod_l+0xe10>)
    d378:	0020      	movs	r0, r4
    d37a:	9317      	str	r3, [sp, #92]	; 0x5c
    d37c:	2300      	movs	r3, #0
    d37e:	9316      	str	r3, [sp, #88]	; 0x58
    d380:	9a16      	ldr	r2, [sp, #88]	; 0x58
    d382:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d384:	0029      	movs	r1, r5
    d386:	f7f8 ff81 	bl	628c <__aeabi_dmul>
    d38a:	0002      	movs	r2, r0
    d38c:	000b      	movs	r3, r1
    d38e:	0004      	movs	r4, r0
    d390:	000d      	movs	r5, r1
    d392:	9204      	str	r2, [sp, #16]
    d394:	9305      	str	r3, [sp, #20]
    d396:	2900      	cmp	r1, #0
    d398:	d105      	bne.n	d3a6 <_strtod_l+0xc6e>
    d39a:	9b04      	ldr	r3, [sp, #16]
    d39c:	2b00      	cmp	r3, #0
    d39e:	d102      	bne.n	d3a6 <_strtod_l+0xc6e>
    d3a0:	2322      	movs	r3, #34	; 0x22
    d3a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d3a4:	6013      	str	r3, [r2, #0]
    d3a6:	981e      	ldr	r0, [sp, #120]	; 0x78
    d3a8:	e638      	b.n	d01c <_strtod_l+0x8e4>
    d3aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d3ac:	46da      	mov	sl, fp
    d3ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    d3b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d3b2:	469b      	mov	fp, r3
    d3b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3b6:	2b00      	cmp	r3, #0
    d3b8:	d1da      	bne.n	d370 <_strtod_l+0xc38>
    d3ba:	9904      	ldr	r1, [sp, #16]
    d3bc:	9a05      	ldr	r2, [sp, #20]
    d3be:	2900      	cmp	r1, #0
    d3c0:	d1d6      	bne.n	d370 <_strtod_l+0xc38>
    d3c2:	0313      	lsls	r3, r2, #12
    d3c4:	d1d4      	bne.n	d370 <_strtod_l+0xc38>
    d3c6:	4b58      	ldr	r3, [pc, #352]	; (d528 <_strtod_l+0xdf0>)
    d3c8:	4013      	ands	r3, r2
    d3ca:	22d6      	movs	r2, #214	; 0xd6
    d3cc:	04d2      	lsls	r2, r2, #19
    d3ce:	4293      	cmp	r3, r2
    d3d0:	d9ce      	bls.n	d370 <_strtod_l+0xc38>
    d3d2:	464b      	mov	r3, r9
    d3d4:	695b      	ldr	r3, [r3, #20]
    d3d6:	2b00      	cmp	r3, #0
    d3d8:	d103      	bne.n	d3e2 <_strtod_l+0xcaa>
    d3da:	464b      	mov	r3, r9
    d3dc:	691b      	ldr	r3, [r3, #16]
    d3de:	2b01      	cmp	r3, #1
    d3e0:	ddc6      	ble.n	d370 <_strtod_l+0xc38>
    d3e2:	4649      	mov	r1, r9
    d3e4:	2201      	movs	r2, #1
    d3e6:	9809      	ldr	r0, [sp, #36]	; 0x24
    d3e8:	f7fe fe90 	bl	c10c <__lshift>
    d3ec:	4641      	mov	r1, r8
    d3ee:	4681      	mov	r9, r0
    d3f0:	f7fe feec 	bl	c1cc <__mcmp>
    d3f4:	2800      	cmp	r0, #0
    d3f6:	ddbb      	ble.n	d370 <_strtod_l+0xc38>
    d3f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d3fa:	2b00      	cmp	r3, #0
    d3fc:	d100      	bne.n	d400 <_strtod_l+0xcc8>
    d3fe:	e0b2      	b.n	d566 <_strtod_l+0xe2e>
    d400:	9a05      	ldr	r2, [sp, #20]
    d402:	4b49      	ldr	r3, [pc, #292]	; (d528 <_strtod_l+0xdf0>)
    d404:	4013      	ands	r3, r2
    d406:	22d6      	movs	r2, #214	; 0xd6
    d408:	04d2      	lsls	r2, r2, #19
    d40a:	4293      	cmp	r3, r2
    d40c:	dd00      	ble.n	d410 <_strtod_l+0xcd8>
    d40e:	e0aa      	b.n	d566 <_strtod_l+0xe2e>
    d410:	22dc      	movs	r2, #220	; 0xdc
    d412:	0492      	lsls	r2, r2, #18
    d414:	4293      	cmp	r3, r2
    d416:	dcae      	bgt.n	d376 <_strtod_l+0xc3e>
    d418:	e762      	b.n	d2e0 <_strtod_l+0xba8>
    d41a:	22d4      	movs	r2, #212	; 0xd4
    d41c:	0492      	lsls	r2, r2, #18
    d41e:	0023      	movs	r3, r4
    d420:	4694      	mov	ip, r2
    d422:	4463      	add	r3, ip
    d424:	9305      	str	r3, [sp, #20]
    d426:	2300      	movs	r3, #0
    d428:	930c      	str	r3, [sp, #48]	; 0x30
    d42a:	f7ff fb50 	bl	cace <_strtod_l+0x396>
    d42e:	2300      	movs	r3, #0
    d430:	4c46      	ldr	r4, [pc, #280]	; (d54c <_strtod_l+0xe14>)
    d432:	931a      	str	r3, [sp, #104]	; 0x68
    d434:	941b      	str	r4, [sp, #108]	; 0x6c
    d436:	2300      	movs	r3, #0
    d438:	9311      	str	r3, [sp, #68]	; 0x44
    d43a:	4b45      	ldr	r3, [pc, #276]	; (d550 <_strtod_l+0xe18>)
    d43c:	9314      	str	r3, [sp, #80]	; 0x50
    d43e:	e545      	b.n	cecc <_strtod_l+0x794>
    d440:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d442:	9a04      	ldr	r2, [sp, #16]
    d444:	4213      	tst	r3, r2
    d446:	d093      	beq.n	d370 <_strtod_l+0xc38>
    d448:	e781      	b.n	d34e <_strtod_l+0xc16>
    d44a:	9904      	ldr	r1, [sp, #16]
    d44c:	9a05      	ldr	r2, [sp, #20]
    d44e:	0313      	lsls	r3, r2, #12
    d450:	d000      	beq.n	d454 <_strtod_l+0xd1c>
    d452:	e775      	b.n	d340 <_strtod_l+0xc08>
    d454:	2900      	cmp	r1, #0
    d456:	d000      	beq.n	d45a <_strtod_l+0xd22>
    d458:	e772      	b.n	d340 <_strtod_l+0xc08>
    d45a:	e7cd      	b.n	d3f8 <_strtod_l+0xcc0>
    d45c:	4b3d      	ldr	r3, [pc, #244]	; (d554 <_strtod_l+0xe1c>)
    d45e:	2700      	movs	r7, #0
    d460:	930c      	str	r3, [sp, #48]	; 0x30
    d462:	e4b3      	b.n	cdcc <_strtod_l+0x694>
    d464:	f7ff f950 	bl	c708 <sulp>
    d468:	0002      	movs	r2, r0
    d46a:	000b      	movs	r3, r1
    d46c:	0020      	movs	r0, r4
    d46e:	0029      	movs	r1, r5
    d470:	f7f9 f98c 	bl	678c <__aeabi_dsub>
    d474:	2200      	movs	r2, #0
    d476:	2300      	movs	r3, #0
    d478:	0004      	movs	r4, r0
    d47a:	000d      	movs	r5, r1
    d47c:	f7f9 fe36 	bl	70ec <__aeabi_dcmpeq>
    d480:	2800      	cmp	r0, #0
    d482:	d000      	beq.n	d486 <_strtod_l+0xd4e>
    d484:	e72c      	b.n	d2e0 <_strtod_l+0xba8>
    d486:	e773      	b.n	d370 <_strtod_l+0xc38>
    d488:	aa20      	add	r2, sp, #128	; 0x80
    d48a:	4933      	ldr	r1, [pc, #204]	; (d558 <_strtod_l+0xe20>)
    d48c:	a81d      	add	r0, sp, #116	; 0x74
    d48e:	f001 f87b 	bl	e588 <__hexnan>
    d492:	2805      	cmp	r0, #5
    d494:	d001      	beq.n	d49a <_strtod_l+0xd62>
    d496:	f7ff faea 	bl	ca6e <_strtod_l+0x336>
    d49a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d49c:	4a22      	ldr	r2, [pc, #136]	; (d528 <_strtod_l+0xdf0>)
    d49e:	431a      	orrs	r2, r3
    d4a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d4a2:	9205      	str	r2, [sp, #20]
    d4a4:	9304      	str	r3, [sp, #16]
    d4a6:	f7ff fae6 	bl	ca76 <_strtod_l+0x33e>
    d4aa:	2c00      	cmp	r4, #0
    d4ac:	dd00      	ble.n	d4b0 <_strtod_l+0xd78>
    d4ae:	e63b      	b.n	d128 <_strtod_l+0x9f0>
    d4b0:	e651      	b.n	d156 <_strtod_l+0xa1e>
    d4b2:	9b04      	ldr	r3, [sp, #16]
    d4b4:	9c05      	ldr	r4, [sp, #20]
    d4b6:	236b      	movs	r3, #107	; 0x6b
    d4b8:	0061      	lsls	r1, r4, #1
    d4ba:	0d49      	lsrs	r1, r1, #21
    d4bc:	0022      	movs	r2, r4
    d4be:	1a5b      	subs	r3, r3, r1
    d4c0:	2b00      	cmp	r3, #0
    d4c2:	dc00      	bgt.n	d4c6 <_strtod_l+0xd8e>
    d4c4:	e647      	b.n	d156 <_strtod_l+0xa1e>
    d4c6:	2b1f      	cmp	r3, #31
    d4c8:	dd5c      	ble.n	d584 <_strtod_l+0xe4c>
    d4ca:	2100      	movs	r1, #0
    d4cc:	9104      	str	r1, [sp, #16]
    d4ce:	2b34      	cmp	r3, #52	; 0x34
    d4d0:	dd62      	ble.n	d598 <_strtod_l+0xe60>
    d4d2:	23dc      	movs	r3, #220	; 0xdc
    d4d4:	049b      	lsls	r3, r3, #18
    d4d6:	9305      	str	r3, [sp, #20]
    d4d8:	e63d      	b.n	d156 <_strtod_l+0xa1e>
    d4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d4dc:	9904      	ldr	r1, [sp, #16]
    d4de:	2b00      	cmp	r3, #0
    d4e0:	d03e      	beq.n	d560 <_strtod_l+0xe28>
    d4e2:	20d4      	movs	r0, #212	; 0xd4
    d4e4:	4b10      	ldr	r3, [pc, #64]	; (d528 <_strtod_l+0xdf0>)
    d4e6:	04c0      	lsls	r0, r0, #19
    d4e8:	4013      	ands	r3, r2
    d4ea:	4283      	cmp	r3, r0
    d4ec:	d838      	bhi.n	d560 <_strtod_l+0xe28>
    d4ee:	206b      	movs	r0, #107	; 0x6b
    d4f0:	0d1b      	lsrs	r3, r3, #20
    d4f2:	1ac0      	subs	r0, r0, r3
    d4f4:	2301      	movs	r3, #1
    d4f6:	425b      	negs	r3, r3
    d4f8:	4083      	lsls	r3, r0
    d4fa:	428b      	cmp	r3, r1
    d4fc:	d000      	beq.n	d500 <_strtod_l+0xdc8>
    d4fe:	e71f      	b.n	d340 <_strtod_l+0xc08>
    d500:	4916      	ldr	r1, [pc, #88]	; (d55c <_strtod_l+0xe24>)
    d502:	428a      	cmp	r2, r1
    d504:	d05a      	beq.n	d5bc <_strtod_l+0xe84>
    d506:	2180      	movs	r1, #128	; 0x80
    d508:	4b07      	ldr	r3, [pc, #28]	; (d528 <_strtod_l+0xdf0>)
    d50a:	0349      	lsls	r1, r1, #13
    d50c:	401a      	ands	r2, r3
    d50e:	0013      	movs	r3, r2
    d510:	468c      	mov	ip, r1
    d512:	4463      	add	r3, ip
    d514:	9305      	str	r3, [sp, #20]
    d516:	2300      	movs	r3, #0
    d518:	9304      	str	r3, [sp, #16]
    d51a:	9c04      	ldr	r4, [sp, #16]
    d51c:	9d05      	ldr	r5, [sp, #20]
    d51e:	e727      	b.n	d370 <_strtod_l+0xc38>
    d520:	0001226c 	.word	0x0001226c
    d524:	7fffffff 	.word	0x7fffffff
    d528:	7ff00000 	.word	0x7ff00000
    d52c:	00000433 	.word	0x00000433
    d530:	ffefffff 	.word	0xffefffff
    d534:	000120e0 	.word	0x000120e0
    d538:	3ff00000 	.word	0x3ff00000
    d53c:	00012284 	.word	0x00012284
    d540:	00012288 	.word	0x00012288
    d544:	000fffff 	.word	0x000fffff
    d548:	39500000 	.word	0x39500000
    d54c:	bfe00000 	.word	0xbfe00000
    d550:	3fe00000 	.word	0x3fe00000
    d554:	000120b8 	.word	0x000120b8
    d558:	000122a8 	.word	0x000122a8
    d55c:	7fefffff 	.word	0x7fefffff
    d560:	2301      	movs	r3, #1
    d562:	425b      	negs	r3, r3
    d564:	e7c9      	b.n	d4fa <_strtod_l+0xdc2>
    d566:	9a05      	ldr	r2, [sp, #20]
    d568:	4b16      	ldr	r3, [pc, #88]	; (d5c4 <_strtod_l+0xe8c>)
    d56a:	4013      	ands	r3, r2
    d56c:	4a16      	ldr	r2, [pc, #88]	; (d5c8 <_strtod_l+0xe90>)
    d56e:	4694      	mov	ip, r2
    d570:	4a16      	ldr	r2, [pc, #88]	; (d5cc <_strtod_l+0xe94>)
    d572:	4463      	add	r3, ip
    d574:	431a      	orrs	r2, r3
    d576:	2301      	movs	r3, #1
    d578:	425b      	negs	r3, r3
    d57a:	9205      	str	r2, [sp, #20]
    d57c:	9304      	str	r3, [sp, #16]
    d57e:	9c04      	ldr	r4, [sp, #16]
    d580:	9d05      	ldr	r5, [sp, #20]
    d582:	e6f5      	b.n	d370 <_strtod_l+0xc38>
    d584:	2201      	movs	r2, #1
    d586:	4252      	negs	r2, r2
    d588:	409a      	lsls	r2, r3
    d58a:	9b04      	ldr	r3, [sp, #16]
    d58c:	4013      	ands	r3, r2
    d58e:	9304      	str	r3, [sp, #16]
    d590:	e5e1      	b.n	d156 <_strtod_l+0xa1e>
    d592:	9004      	str	r0, [sp, #16]
    d594:	9105      	str	r1, [sp, #20]
    d596:	e5da      	b.n	d14e <_strtod_l+0xa16>
    d598:	2101      	movs	r1, #1
    d59a:	3b20      	subs	r3, #32
    d59c:	4249      	negs	r1, r1
    d59e:	4099      	lsls	r1, r3
    d5a0:	400a      	ands	r2, r1
    d5a2:	9205      	str	r2, [sp, #20]
    d5a4:	e5d7      	b.n	d156 <_strtod_l+0xa1e>
    d5a6:	002f      	movs	r7, r5
    d5a8:	991d      	ldr	r1, [sp, #116]	; 0x74
    d5aa:	3501      	adds	r5, #1
    d5ac:	e58a      	b.n	d0c4 <_strtod_l+0x98c>
    d5ae:	991d      	ldr	r1, [sp, #116]	; 0x74
    d5b0:	0023      	movs	r3, r4
    d5b2:	e593      	b.n	d0dc <_strtod_l+0x9a4>
    d5b4:	9004      	str	r0, [sp, #16]
    d5b6:	9105      	str	r1, [sp, #20]
    d5b8:	f7ff fc08 	bl	cdcc <_strtod_l+0x694>
    d5bc:	3301      	adds	r3, #1
    d5be:	d1a2      	bne.n	d506 <_strtod_l+0xdce>
    d5c0:	e522      	b.n	d008 <_strtod_l+0x8d0>
    d5c2:	46c0      	nop			; (mov r8, r8)
    d5c4:	7ff00000 	.word	0x7ff00000
    d5c8:	fff00000 	.word	0xfff00000
    d5cc:	000fffff 	.word	0x000fffff

0000d5d0 <_strtod_r>:
    d5d0:	4b05      	ldr	r3, [pc, #20]	; (d5e8 <_strtod_r+0x18>)
    d5d2:	b510      	push	{r4, lr}
    d5d4:	681b      	ldr	r3, [r3, #0]
    d5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    d5d8:	2b00      	cmp	r3, #0
    d5da:	d002      	beq.n	d5e2 <_strtod_r+0x12>
    d5dc:	f7ff f8ac 	bl	c738 <_strtod_l>
    d5e0:	bd10      	pop	{r4, pc}
    d5e2:	4b02      	ldr	r3, [pc, #8]	; (d5ec <_strtod_r+0x1c>)
    d5e4:	e7fa      	b.n	d5dc <_strtod_r+0xc>
    d5e6:	46c0      	nop			; (mov r8, r8)
    d5e8:	200000a0 	.word	0x200000a0
    d5ec:	200004d4 	.word	0x200004d4

0000d5f0 <_strtoll_l.isra.0>:
    d5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5f2:	46de      	mov	lr, fp
    d5f4:	4657      	mov	r7, sl
    d5f6:	464e      	mov	r6, r9
    d5f8:	4645      	mov	r5, r8
    d5fa:	b5e0      	push	{r5, r6, r7, lr}
    d5fc:	001f      	movs	r7, r3
    d5fe:	2308      	movs	r3, #8
    d600:	b089      	sub	sp, #36	; 0x24
    d602:	9007      	str	r0, [sp, #28]
    d604:	9106      	str	r1, [sp, #24]
    d606:	4693      	mov	fp, r2
    d608:	000e      	movs	r6, r1
    d60a:	4698      	mov	r8, r3
    d60c:	e000      	b.n	d610 <_strtoll_l.isra.0+0x20>
    d60e:	002e      	movs	r6, r5
    d610:	9812      	ldr	r0, [sp, #72]	; 0x48
    d612:	7834      	ldrb	r4, [r6, #0]
    d614:	f7fd ffea 	bl	b5ec <__locale_ctype_ptr_l>
    d618:	4642      	mov	r2, r8
    d61a:	1900      	adds	r0, r0, r4
    d61c:	7843      	ldrb	r3, [r0, #1]
    d61e:	1c75      	adds	r5, r6, #1
    d620:	421a      	tst	r2, r3
    d622:	d1f4      	bne.n	d60e <_strtoll_l.isra.0+0x1e>
    d624:	2c2d      	cmp	r4, #45	; 0x2d
    d626:	d100      	bne.n	d62a <_strtoll_l.isra.0+0x3a>
    d628:	e087      	b.n	d73a <_strtoll_l.isra.0+0x14a>
    d62a:	2300      	movs	r3, #0
    d62c:	9303      	str	r3, [sp, #12]
    d62e:	2c2b      	cmp	r4, #43	; 0x2b
    d630:	d100      	bne.n	d634 <_strtoll_l.isra.0+0x44>
    d632:	e094      	b.n	d75e <_strtoll_l.isra.0+0x16e>
    d634:	2f00      	cmp	r7, #0
    d636:	d00e      	beq.n	d656 <_strtoll_l.isra.0+0x66>
    d638:	2f10      	cmp	r7, #16
    d63a:	d100      	bne.n	d63e <_strtoll_l.isra.0+0x4e>
    d63c:	e092      	b.n	d764 <_strtoll_l.isra.0+0x174>
    d63e:	17fb      	asrs	r3, r7, #31
    d640:	4699      	mov	r9, r3
    d642:	9b03      	ldr	r3, [sp, #12]
    d644:	46ba      	mov	sl, r7
    d646:	2b00      	cmp	r3, #0
    d648:	d110      	bne.n	d66c <_strtoll_l.isra.0+0x7c>
    d64a:	2301      	movs	r3, #1
    d64c:	425b      	negs	r3, r3
    d64e:	9304      	str	r3, [sp, #16]
    d650:	4b55      	ldr	r3, [pc, #340]	; (d7a8 <_strtoll_l.isra.0+0x1b8>)
    d652:	9305      	str	r3, [sp, #20]
    d654:	e00f      	b.n	d676 <_strtoll_l.isra.0+0x86>
    d656:	2c30      	cmp	r4, #48	; 0x30
    d658:	d100      	bne.n	d65c <_strtoll_l.isra.0+0x6c>
    d65a:	e092      	b.n	d782 <_strtoll_l.isra.0+0x192>
    d65c:	230a      	movs	r3, #10
    d65e:	469a      	mov	sl, r3
    d660:	2300      	movs	r3, #0
    d662:	270a      	movs	r7, #10
    d664:	4699      	mov	r9, r3
    d666:	9b03      	ldr	r3, [sp, #12]
    d668:	2b00      	cmp	r3, #0
    d66a:	d0ee      	beq.n	d64a <_strtoll_l.isra.0+0x5a>
    d66c:	2300      	movs	r3, #0
    d66e:	9304      	str	r3, [sp, #16]
    d670:	2380      	movs	r3, #128	; 0x80
    d672:	061b      	lsls	r3, r3, #24
    d674:	9305      	str	r3, [sp, #20]
    d676:	9904      	ldr	r1, [sp, #16]
    d678:	9e05      	ldr	r6, [sp, #20]
    d67a:	4688      	mov	r8, r1
    d67c:	0008      	movs	r0, r1
    d67e:	4652      	mov	r2, sl
    d680:	0031      	movs	r1, r6
    d682:	464b      	mov	r3, r9
    d684:	f7f8 f82c 	bl	56e0 <__aeabi_uldivmod>
    d688:	4640      	mov	r0, r8
    d68a:	9202      	str	r2, [sp, #8]
    d68c:	0031      	movs	r1, r6
    d68e:	4652      	mov	r2, sl
    d690:	464b      	mov	r3, r9
    d692:	f7f8 f825 	bl	56e0 <__aeabi_uldivmod>
    d696:	2200      	movs	r2, #0
    d698:	4680      	mov	r8, r0
    d69a:	000e      	movs	r6, r1
    d69c:	2000      	movs	r0, #0
    d69e:	2100      	movs	r1, #0
    d6a0:	e019      	b.n	d6d6 <_strtoll_l.isra.0+0xe6>
    d6a2:	001c      	movs	r4, r3
    d6a4:	42a7      	cmp	r7, r4
    d6a6:	dd21      	ble.n	d6ec <_strtoll_l.isra.0+0xfc>
    d6a8:	1c53      	adds	r3, r2, #1
    d6aa:	d012      	beq.n	d6d2 <_strtoll_l.isra.0+0xe2>
    d6ac:	42b1      	cmp	r1, r6
    d6ae:	d83b      	bhi.n	d728 <_strtoll_l.isra.0+0x138>
    d6b0:	d101      	bne.n	d6b6 <_strtoll_l.isra.0+0xc6>
    d6b2:	4540      	cmp	r0, r8
    d6b4:	d838      	bhi.n	d728 <_strtoll_l.isra.0+0x138>
    d6b6:	4580      	cmp	r8, r0
    d6b8:	d031      	beq.n	d71e <_strtoll_l.isra.0+0x12e>
    d6ba:	4652      	mov	r2, sl
    d6bc:	464b      	mov	r3, r9
    d6be:	f7f8 f82f 	bl	5720 <__aeabi_lmul>
    d6c2:	17e3      	asrs	r3, r4, #31
    d6c4:	9400      	str	r4, [sp, #0]
    d6c6:	9301      	str	r3, [sp, #4]
    d6c8:	9b00      	ldr	r3, [sp, #0]
    d6ca:	9c01      	ldr	r4, [sp, #4]
    d6cc:	2201      	movs	r2, #1
    d6ce:	18c0      	adds	r0, r0, r3
    d6d0:	4161      	adcs	r1, r4
    d6d2:	782c      	ldrb	r4, [r5, #0]
    d6d4:	3501      	adds	r5, #1
    d6d6:	0023      	movs	r3, r4
    d6d8:	3b30      	subs	r3, #48	; 0x30
    d6da:	2b09      	cmp	r3, #9
    d6dc:	d9e1      	bls.n	d6a2 <_strtoll_l.isra.0+0xb2>
    d6de:	0023      	movs	r3, r4
    d6e0:	3b41      	subs	r3, #65	; 0x41
    d6e2:	2b19      	cmp	r3, #25
    d6e4:	d823      	bhi.n	d72e <_strtoll_l.isra.0+0x13e>
    d6e6:	3c37      	subs	r4, #55	; 0x37
    d6e8:	42a7      	cmp	r7, r4
    d6ea:	dcdd      	bgt.n	d6a8 <_strtoll_l.isra.0+0xb8>
    d6ec:	1c53      	adds	r3, r2, #1
    d6ee:	d029      	beq.n	d744 <_strtoll_l.isra.0+0x154>
    d6f0:	9b03      	ldr	r3, [sp, #12]
    d6f2:	2b00      	cmp	r3, #0
    d6f4:	d004      	beq.n	d700 <_strtoll_l.isra.0+0x110>
    d6f6:	0003      	movs	r3, r0
    d6f8:	000c      	movs	r4, r1
    d6fa:	2100      	movs	r1, #0
    d6fc:	4258      	negs	r0, r3
    d6fe:	41a1      	sbcs	r1, r4
    d700:	465b      	mov	r3, fp
    d702:	2b00      	cmp	r3, #0
    d704:	d004      	beq.n	d710 <_strtoll_l.isra.0+0x120>
    d706:	9b06      	ldr	r3, [sp, #24]
    d708:	2a00      	cmp	r2, #0
    d70a:	d125      	bne.n	d758 <_strtoll_l.isra.0+0x168>
    d70c:	465a      	mov	r2, fp
    d70e:	6013      	str	r3, [r2, #0]
    d710:	b009      	add	sp, #36	; 0x24
    d712:	bc3c      	pop	{r2, r3, r4, r5}
    d714:	4690      	mov	r8, r2
    d716:	4699      	mov	r9, r3
    d718:	46a2      	mov	sl, r4
    d71a:	46ab      	mov	fp, r5
    d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d71e:	428e      	cmp	r6, r1
    d720:	d1cb      	bne.n	d6ba <_strtoll_l.isra.0+0xca>
    d722:	9b02      	ldr	r3, [sp, #8]
    d724:	42a3      	cmp	r3, r4
    d726:	dac8      	bge.n	d6ba <_strtoll_l.isra.0+0xca>
    d728:	2201      	movs	r2, #1
    d72a:	4252      	negs	r2, r2
    d72c:	e7d1      	b.n	d6d2 <_strtoll_l.isra.0+0xe2>
    d72e:	0023      	movs	r3, r4
    d730:	3b61      	subs	r3, #97	; 0x61
    d732:	2b19      	cmp	r3, #25
    d734:	d8da      	bhi.n	d6ec <_strtoll_l.isra.0+0xfc>
    d736:	3c57      	subs	r4, #87	; 0x57
    d738:	e7b4      	b.n	d6a4 <_strtoll_l.isra.0+0xb4>
    d73a:	2301      	movs	r3, #1
    d73c:	782c      	ldrb	r4, [r5, #0]
    d73e:	9303      	str	r3, [sp, #12]
    d740:	1cb5      	adds	r5, r6, #2
    d742:	e777      	b.n	d634 <_strtoll_l.isra.0+0x44>
    d744:	2322      	movs	r3, #34	; 0x22
    d746:	9a07      	ldr	r2, [sp, #28]
    d748:	6013      	str	r3, [r2, #0]
    d74a:	465b      	mov	r3, fp
    d74c:	2b00      	cmp	r3, #0
    d74e:	d028      	beq.n	d7a2 <_strtoll_l.isra.0+0x1b2>
    d750:	1e6b      	subs	r3, r5, #1
    d752:	9804      	ldr	r0, [sp, #16]
    d754:	9905      	ldr	r1, [sp, #20]
    d756:	e7d9      	b.n	d70c <_strtoll_l.isra.0+0x11c>
    d758:	9004      	str	r0, [sp, #16]
    d75a:	9105      	str	r1, [sp, #20]
    d75c:	e7f8      	b.n	d750 <_strtoll_l.isra.0+0x160>
    d75e:	782c      	ldrb	r4, [r5, #0]
    d760:	1cb5      	adds	r5, r6, #2
    d762:	e767      	b.n	d634 <_strtoll_l.isra.0+0x44>
    d764:	2c30      	cmp	r4, #48	; 0x30
    d766:	d117      	bne.n	d798 <_strtoll_l.isra.0+0x1a8>
    d768:	2220      	movs	r2, #32
    d76a:	782b      	ldrb	r3, [r5, #0]
    d76c:	4393      	bics	r3, r2
    d76e:	2b58      	cmp	r3, #88	; 0x58
    d770:	d112      	bne.n	d798 <_strtoll_l.isra.0+0x1a8>
    d772:	2310      	movs	r3, #16
    d774:	469a      	mov	sl, r3
    d776:	2300      	movs	r3, #0
    d778:	786c      	ldrb	r4, [r5, #1]
    d77a:	4699      	mov	r9, r3
    d77c:	3502      	adds	r5, #2
    d77e:	2710      	movs	r7, #16
    d780:	e771      	b.n	d666 <_strtoll_l.isra.0+0x76>
    d782:	2220      	movs	r2, #32
    d784:	782b      	ldrb	r3, [r5, #0]
    d786:	4393      	bics	r3, r2
    d788:	2b58      	cmp	r3, #88	; 0x58
    d78a:	d0f2      	beq.n	d772 <_strtoll_l.isra.0+0x182>
    d78c:	2308      	movs	r3, #8
    d78e:	469a      	mov	sl, r3
    d790:	2300      	movs	r3, #0
    d792:	2708      	movs	r7, #8
    d794:	4699      	mov	r9, r3
    d796:	e766      	b.n	d666 <_strtoll_l.isra.0+0x76>
    d798:	2310      	movs	r3, #16
    d79a:	469a      	mov	sl, r3
    d79c:	2300      	movs	r3, #0
    d79e:	4699      	mov	r9, r3
    d7a0:	e761      	b.n	d666 <_strtoll_l.isra.0+0x76>
    d7a2:	9804      	ldr	r0, [sp, #16]
    d7a4:	9905      	ldr	r1, [sp, #20]
    d7a6:	e7b3      	b.n	d710 <_strtoll_l.isra.0+0x120>
    d7a8:	7fffffff 	.word	0x7fffffff

0000d7ac <_strtoll_r>:
    d7ac:	b510      	push	{r4, lr}
    d7ae:	4c06      	ldr	r4, [pc, #24]	; (d7c8 <_strtoll_r+0x1c>)
    d7b0:	b082      	sub	sp, #8
    d7b2:	6824      	ldr	r4, [r4, #0]
    d7b4:	6b64      	ldr	r4, [r4, #52]	; 0x34
    d7b6:	2c00      	cmp	r4, #0
    d7b8:	d004      	beq.n	d7c4 <_strtoll_r+0x18>
    d7ba:	9400      	str	r4, [sp, #0]
    d7bc:	f7ff ff18 	bl	d5f0 <_strtoll_l.isra.0>
    d7c0:	b002      	add	sp, #8
    d7c2:	bd10      	pop	{r4, pc}
    d7c4:	4c01      	ldr	r4, [pc, #4]	; (d7cc <_strtoll_r+0x20>)
    d7c6:	e7f8      	b.n	d7ba <_strtoll_r+0xe>
    d7c8:	200000a0 	.word	0x200000a0
    d7cc:	200004d4 	.word	0x200004d4

0000d7d0 <_strtoul_l.isra.0>:
    d7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7d2:	4657      	mov	r7, sl
    d7d4:	464e      	mov	r6, r9
    d7d6:	46de      	mov	lr, fp
    d7d8:	4645      	mov	r5, r8
    d7da:	b5e0      	push	{r5, r6, r7, lr}
    d7dc:	001e      	movs	r6, r3
    d7de:	2308      	movs	r3, #8
    d7e0:	b083      	sub	sp, #12
    d7e2:	4683      	mov	fp, r0
    d7e4:	4689      	mov	r9, r1
    d7e6:	4692      	mov	sl, r2
    d7e8:	000f      	movs	r7, r1
    d7ea:	4698      	mov	r8, r3
    d7ec:	e000      	b.n	d7f0 <_strtoul_l.isra.0+0x20>
    d7ee:	002f      	movs	r7, r5
    d7f0:	980c      	ldr	r0, [sp, #48]	; 0x30
    d7f2:	783c      	ldrb	r4, [r7, #0]
    d7f4:	f7fd fefa 	bl	b5ec <__locale_ctype_ptr_l>
    d7f8:	4642      	mov	r2, r8
    d7fa:	1900      	adds	r0, r0, r4
    d7fc:	7843      	ldrb	r3, [r0, #1]
    d7fe:	1c7d      	adds	r5, r7, #1
    d800:	421a      	tst	r2, r3
    d802:	d1f4      	bne.n	d7ee <_strtoul_l.isra.0+0x1e>
    d804:	2c2d      	cmp	r4, #45	; 0x2d
    d806:	d05b      	beq.n	d8c0 <_strtoul_l.isra.0+0xf0>
    d808:	2300      	movs	r3, #0
    d80a:	9301      	str	r3, [sp, #4]
    d80c:	2c2b      	cmp	r4, #43	; 0x2b
    d80e:	d05c      	beq.n	d8ca <_strtoul_l.isra.0+0xfa>
    d810:	2e00      	cmp	r6, #0
    d812:	d00e      	beq.n	d832 <_strtoul_l.isra.0+0x62>
    d814:	2e10      	cmp	r6, #16
    d816:	d05b      	beq.n	d8d0 <_strtoul_l.isra.0+0x100>
    d818:	2001      	movs	r0, #1
    d81a:	0031      	movs	r1, r6
    d81c:	4240      	negs	r0, r0
    d81e:	f7f7 fde9 	bl	53f4 <__udivsi3>
    d822:	0007      	movs	r7, r0
    d824:	2001      	movs	r0, #1
    d826:	0031      	movs	r1, r6
    d828:	4240      	negs	r0, r0
    d82a:	46b0      	mov	r8, r6
    d82c:	f7f7 fe68 	bl	5500 <__aeabi_uidivmod>
    d830:	e006      	b.n	d840 <_strtoul_l.isra.0+0x70>
    d832:	2c30      	cmp	r4, #48	; 0x30
    d834:	d05b      	beq.n	d8ee <_strtoul_l.isra.0+0x11e>
    d836:	230a      	movs	r3, #10
    d838:	2105      	movs	r1, #5
    d83a:	4698      	mov	r8, r3
    d83c:	260a      	movs	r6, #10
    d83e:	4f34      	ldr	r7, [pc, #208]	; (d910 <_strtoul_l.isra.0+0x140>)
    d840:	2200      	movs	r2, #0
    d842:	2000      	movs	r0, #0
    d844:	0023      	movs	r3, r4
    d846:	3b30      	subs	r3, #48	; 0x30
    d848:	2b09      	cmp	r3, #9
    d84a:	d907      	bls.n	d85c <_strtoul_l.isra.0+0x8c>
    d84c:	3b11      	subs	r3, #17
    d84e:	2b19      	cmp	r3, #25
    d850:	d903      	bls.n	d85a <_strtoul_l.isra.0+0x8a>
    d852:	0023      	movs	r3, r4
    d854:	3b61      	subs	r3, #97	; 0x61
    d856:	2b19      	cmp	r3, #25
    d858:	d80e      	bhi.n	d878 <_strtoul_l.isra.0+0xa8>
    d85a:	330a      	adds	r3, #10
    d85c:	429e      	cmp	r6, r3
    d85e:	dd0b      	ble.n	d878 <_strtoul_l.isra.0+0xa8>
    d860:	2a00      	cmp	r2, #0
    d862:	db20      	blt.n	d8a6 <_strtoul_l.isra.0+0xd6>
    d864:	42b8      	cmp	r0, r7
    d866:	d81e      	bhi.n	d8a6 <_strtoul_l.isra.0+0xd6>
    d868:	d01b      	beq.n	d8a2 <_strtoul_l.isra.0+0xd2>
    d86a:	4642      	mov	r2, r8
    d86c:	4350      	muls	r0, r2
    d86e:	2201      	movs	r2, #1
    d870:	1818      	adds	r0, r3, r0
    d872:	782c      	ldrb	r4, [r5, #0]
    d874:	3501      	adds	r5, #1
    d876:	e7e5      	b.n	d844 <_strtoul_l.isra.0+0x74>
    d878:	2a00      	cmp	r2, #0
    d87a:	db17      	blt.n	d8ac <_strtoul_l.isra.0+0xdc>
    d87c:	9b01      	ldr	r3, [sp, #4]
    d87e:	2b00      	cmp	r3, #0
    d880:	d000      	beq.n	d884 <_strtoul_l.isra.0+0xb4>
    d882:	4240      	negs	r0, r0
    d884:	4653      	mov	r3, sl
    d886:	2b00      	cmp	r3, #0
    d888:	d004      	beq.n	d894 <_strtoul_l.isra.0+0xc4>
    d88a:	464b      	mov	r3, r9
    d88c:	2a00      	cmp	r2, #0
    d88e:	d115      	bne.n	d8bc <_strtoul_l.isra.0+0xec>
    d890:	4652      	mov	r2, sl
    d892:	6013      	str	r3, [r2, #0]
    d894:	b003      	add	sp, #12
    d896:	bc3c      	pop	{r2, r3, r4, r5}
    d898:	4690      	mov	r8, r2
    d89a:	4699      	mov	r9, r3
    d89c:	46a2      	mov	sl, r4
    d89e:	46ab      	mov	fp, r5
    d8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8a2:	428b      	cmp	r3, r1
    d8a4:	dde1      	ble.n	d86a <_strtoul_l.isra.0+0x9a>
    d8a6:	2201      	movs	r2, #1
    d8a8:	4252      	negs	r2, r2
    d8aa:	e7e2      	b.n	d872 <_strtoul_l.isra.0+0xa2>
    d8ac:	2322      	movs	r3, #34	; 0x22
    d8ae:	465a      	mov	r2, fp
    d8b0:	2001      	movs	r0, #1
    d8b2:	6013      	str	r3, [r2, #0]
    d8b4:	4653      	mov	r3, sl
    d8b6:	4240      	negs	r0, r0
    d8b8:	2b00      	cmp	r3, #0
    d8ba:	d0eb      	beq.n	d894 <_strtoul_l.isra.0+0xc4>
    d8bc:	1e6b      	subs	r3, r5, #1
    d8be:	e7e7      	b.n	d890 <_strtoul_l.isra.0+0xc0>
    d8c0:	2301      	movs	r3, #1
    d8c2:	782c      	ldrb	r4, [r5, #0]
    d8c4:	9301      	str	r3, [sp, #4]
    d8c6:	1cbd      	adds	r5, r7, #2
    d8c8:	e7a2      	b.n	d810 <_strtoul_l.isra.0+0x40>
    d8ca:	782c      	ldrb	r4, [r5, #0]
    d8cc:	1cbd      	adds	r5, r7, #2
    d8ce:	e79f      	b.n	d810 <_strtoul_l.isra.0+0x40>
    d8d0:	2c30      	cmp	r4, #48	; 0x30
    d8d2:	d117      	bne.n	d904 <_strtoul_l.isra.0+0x134>
    d8d4:	2220      	movs	r2, #32
    d8d6:	782b      	ldrb	r3, [r5, #0]
    d8d8:	4393      	bics	r3, r2
    d8da:	2b58      	cmp	r3, #88	; 0x58
    d8dc:	d112      	bne.n	d904 <_strtoul_l.isra.0+0x134>
    d8de:	2310      	movs	r3, #16
    d8e0:	786c      	ldrb	r4, [r5, #1]
    d8e2:	210f      	movs	r1, #15
    d8e4:	3502      	adds	r5, #2
    d8e6:	4f0b      	ldr	r7, [pc, #44]	; (d914 <_strtoul_l.isra.0+0x144>)
    d8e8:	4698      	mov	r8, r3
    d8ea:	2610      	movs	r6, #16
    d8ec:	e7a8      	b.n	d840 <_strtoul_l.isra.0+0x70>
    d8ee:	2220      	movs	r2, #32
    d8f0:	782b      	ldrb	r3, [r5, #0]
    d8f2:	4393      	bics	r3, r2
    d8f4:	2b58      	cmp	r3, #88	; 0x58
    d8f6:	d0f2      	beq.n	d8de <_strtoul_l.isra.0+0x10e>
    d8f8:	2308      	movs	r3, #8
    d8fa:	2107      	movs	r1, #7
    d8fc:	4f06      	ldr	r7, [pc, #24]	; (d918 <_strtoul_l.isra.0+0x148>)
    d8fe:	4698      	mov	r8, r3
    d900:	2608      	movs	r6, #8
    d902:	e79d      	b.n	d840 <_strtoul_l.isra.0+0x70>
    d904:	2310      	movs	r3, #16
    d906:	210f      	movs	r1, #15
    d908:	4f02      	ldr	r7, [pc, #8]	; (d914 <_strtoul_l.isra.0+0x144>)
    d90a:	4698      	mov	r8, r3
    d90c:	e798      	b.n	d840 <_strtoul_l.isra.0+0x70>
    d90e:	46c0      	nop			; (mov r8, r8)
    d910:	19999999 	.word	0x19999999
    d914:	0fffffff 	.word	0x0fffffff
    d918:	1fffffff 	.word	0x1fffffff

0000d91c <_strtoul_r>:
    d91c:	b510      	push	{r4, lr}
    d91e:	4c06      	ldr	r4, [pc, #24]	; (d938 <_strtoul_r+0x1c>)
    d920:	b082      	sub	sp, #8
    d922:	6824      	ldr	r4, [r4, #0]
    d924:	6b64      	ldr	r4, [r4, #52]	; 0x34
    d926:	2c00      	cmp	r4, #0
    d928:	d004      	beq.n	d934 <_strtoul_r+0x18>
    d92a:	9400      	str	r4, [sp, #0]
    d92c:	f7ff ff50 	bl	d7d0 <_strtoul_l.isra.0>
    d930:	b002      	add	sp, #8
    d932:	bd10      	pop	{r4, pc}
    d934:	4c01      	ldr	r4, [pc, #4]	; (d93c <_strtoul_r+0x20>)
    d936:	e7f8      	b.n	d92a <_strtoul_r+0xe>
    d938:	200000a0 	.word	0x200000a0
    d93c:	200004d4 	.word	0x200004d4

0000d940 <_strtoull_l.isra.0>:
    d940:	b5f0      	push	{r4, r5, r6, r7, lr}
    d942:	46de      	mov	lr, fp
    d944:	4657      	mov	r7, sl
    d946:	464e      	mov	r6, r9
    d948:	4645      	mov	r5, r8
    d94a:	b5e0      	push	{r5, r6, r7, lr}
    d94c:	001e      	movs	r6, r3
    d94e:	2308      	movs	r3, #8
    d950:	b087      	sub	sp, #28
    d952:	9005      	str	r0, [sp, #20]
    d954:	9104      	str	r1, [sp, #16]
    d956:	4693      	mov	fp, r2
    d958:	000f      	movs	r7, r1
    d95a:	4698      	mov	r8, r3
    d95c:	e000      	b.n	d960 <_strtoull_l.isra.0+0x20>
    d95e:	002f      	movs	r7, r5
    d960:	9810      	ldr	r0, [sp, #64]	; 0x40
    d962:	783c      	ldrb	r4, [r7, #0]
    d964:	f7fd fe42 	bl	b5ec <__locale_ctype_ptr_l>
    d968:	4642      	mov	r2, r8
    d96a:	1900      	adds	r0, r0, r4
    d96c:	7843      	ldrb	r3, [r0, #1]
    d96e:	1c7d      	adds	r5, r7, #1
    d970:	421a      	tst	r2, r3
    d972:	d1f4      	bne.n	d95e <_strtoull_l.isra.0+0x1e>
    d974:	2c2d      	cmp	r4, #45	; 0x2d
    d976:	d100      	bne.n	d97a <_strtoull_l.isra.0+0x3a>
    d978:	e085      	b.n	da86 <_strtoull_l.isra.0+0x146>
    d97a:	2300      	movs	r3, #0
    d97c:	9303      	str	r3, [sp, #12]
    d97e:	2c2b      	cmp	r4, #43	; 0x2b
    d980:	d100      	bne.n	d984 <_strtoull_l.isra.0+0x44>
    d982:	e085      	b.n	da90 <_strtoull_l.isra.0+0x150>
    d984:	2e00      	cmp	r6, #0
    d986:	d016      	beq.n	d9b6 <_strtoull_l.isra.0+0x76>
    d988:	2e10      	cmp	r6, #16
    d98a:	d100      	bne.n	d98e <_strtoull_l.isra.0+0x4e>
    d98c:	e083      	b.n	da96 <_strtoull_l.isra.0+0x156>
    d98e:	17f3      	asrs	r3, r6, #31
    d990:	0032      	movs	r2, r6
    d992:	2001      	movs	r0, #1
    d994:	4240      	negs	r0, r0
    d996:	17c1      	asrs	r1, r0, #31
    d998:	4699      	mov	r9, r3
    d99a:	f7f7 fea1 	bl	56e0 <__aeabi_uldivmod>
    d99e:	0032      	movs	r2, r6
    d9a0:	4680      	mov	r8, r0
    d9a2:	000f      	movs	r7, r1
    d9a4:	464b      	mov	r3, r9
    d9a6:	2001      	movs	r0, #1
    d9a8:	4240      	negs	r0, r0
    d9aa:	17c1      	asrs	r1, r0, #31
    d9ac:	f7f7 fe98 	bl	56e0 <__aeabi_uldivmod>
    d9b0:	46b2      	mov	sl, r6
    d9b2:	9202      	str	r2, [sp, #8]
    d9b4:	e00c      	b.n	d9d0 <_strtoull_l.isra.0+0x90>
    d9b6:	2c30      	cmp	r4, #48	; 0x30
    d9b8:	d100      	bne.n	d9bc <_strtoull_l.isra.0+0x7c>
    d9ba:	e080      	b.n	dabe <_strtoull_l.isra.0+0x17e>
    d9bc:	2305      	movs	r3, #5
    d9be:	9302      	str	r3, [sp, #8]
    d9c0:	4b4c      	ldr	r3, [pc, #304]	; (daf4 <_strtoull_l.isra.0+0x1b4>)
    d9c2:	260a      	movs	r6, #10
    d9c4:	4698      	mov	r8, r3
    d9c6:	230a      	movs	r3, #10
    d9c8:	469a      	mov	sl, r3
    d9ca:	2300      	movs	r3, #0
    d9cc:	4699      	mov	r9, r3
    d9ce:	4f4a      	ldr	r7, [pc, #296]	; (daf8 <_strtoull_l.isra.0+0x1b8>)
    d9d0:	2200      	movs	r2, #0
    d9d2:	2000      	movs	r0, #0
    d9d4:	2100      	movs	r1, #0
    d9d6:	e019      	b.n	da0c <_strtoull_l.isra.0+0xcc>
    d9d8:	001c      	movs	r4, r3
    d9da:	42a6      	cmp	r6, r4
    d9dc:	dd21      	ble.n	da22 <_strtoull_l.isra.0+0xe2>
    d9de:	2a00      	cmp	r2, #0
    d9e0:	db3d      	blt.n	da5e <_strtoull_l.isra.0+0x11e>
    d9e2:	42b9      	cmp	r1, r7
    d9e4:	d83b      	bhi.n	da5e <_strtoull_l.isra.0+0x11e>
    d9e6:	d101      	bne.n	d9ec <_strtoull_l.isra.0+0xac>
    d9e8:	4540      	cmp	r0, r8
    d9ea:	d838      	bhi.n	da5e <_strtoull_l.isra.0+0x11e>
    d9ec:	4540      	cmp	r0, r8
    d9ee:	d031      	beq.n	da54 <_strtoull_l.isra.0+0x114>
    d9f0:	4652      	mov	r2, sl
    d9f2:	464b      	mov	r3, r9
    d9f4:	f7f7 fe94 	bl	5720 <__aeabi_lmul>
    d9f8:	17e3      	asrs	r3, r4, #31
    d9fa:	9400      	str	r4, [sp, #0]
    d9fc:	9301      	str	r3, [sp, #4]
    d9fe:	9b00      	ldr	r3, [sp, #0]
    da00:	9c01      	ldr	r4, [sp, #4]
    da02:	2201      	movs	r2, #1
    da04:	18c0      	adds	r0, r0, r3
    da06:	4161      	adcs	r1, r4
    da08:	782c      	ldrb	r4, [r5, #0]
    da0a:	3501      	adds	r5, #1
    da0c:	0023      	movs	r3, r4
    da0e:	3b30      	subs	r3, #48	; 0x30
    da10:	2b09      	cmp	r3, #9
    da12:	d9e1      	bls.n	d9d8 <_strtoull_l.isra.0+0x98>
    da14:	0023      	movs	r3, r4
    da16:	3b41      	subs	r3, #65	; 0x41
    da18:	2b19      	cmp	r3, #25
    da1a:	d823      	bhi.n	da64 <_strtoull_l.isra.0+0x124>
    da1c:	3c37      	subs	r4, #55	; 0x37
    da1e:	42a6      	cmp	r6, r4
    da20:	dcdd      	bgt.n	d9de <_strtoull_l.isra.0+0x9e>
    da22:	2a00      	cmp	r2, #0
    da24:	db24      	blt.n	da70 <_strtoull_l.isra.0+0x130>
    da26:	9b03      	ldr	r3, [sp, #12]
    da28:	2b00      	cmp	r3, #0
    da2a:	d004      	beq.n	da36 <_strtoull_l.isra.0+0xf6>
    da2c:	0003      	movs	r3, r0
    da2e:	000c      	movs	r4, r1
    da30:	2100      	movs	r1, #0
    da32:	4258      	negs	r0, r3
    da34:	41a1      	sbcs	r1, r4
    da36:	465b      	mov	r3, fp
    da38:	2b00      	cmp	r3, #0
    da3a:	d004      	beq.n	da46 <_strtoull_l.isra.0+0x106>
    da3c:	9b04      	ldr	r3, [sp, #16]
    da3e:	2a00      	cmp	r2, #0
    da40:	d11f      	bne.n	da82 <_strtoull_l.isra.0+0x142>
    da42:	465a      	mov	r2, fp
    da44:	6013      	str	r3, [r2, #0]
    da46:	b007      	add	sp, #28
    da48:	bc3c      	pop	{r2, r3, r4, r5}
    da4a:	4690      	mov	r8, r2
    da4c:	4699      	mov	r9, r3
    da4e:	46a2      	mov	sl, r4
    da50:	46ab      	mov	fp, r5
    da52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da54:	42b9      	cmp	r1, r7
    da56:	d1cb      	bne.n	d9f0 <_strtoull_l.isra.0+0xb0>
    da58:	9b02      	ldr	r3, [sp, #8]
    da5a:	429c      	cmp	r4, r3
    da5c:	ddc8      	ble.n	d9f0 <_strtoull_l.isra.0+0xb0>
    da5e:	2201      	movs	r2, #1
    da60:	4252      	negs	r2, r2
    da62:	e7d1      	b.n	da08 <_strtoull_l.isra.0+0xc8>
    da64:	0023      	movs	r3, r4
    da66:	3b61      	subs	r3, #97	; 0x61
    da68:	2b19      	cmp	r3, #25
    da6a:	d8da      	bhi.n	da22 <_strtoull_l.isra.0+0xe2>
    da6c:	3c57      	subs	r4, #87	; 0x57
    da6e:	e7b4      	b.n	d9da <_strtoull_l.isra.0+0x9a>
    da70:	2322      	movs	r3, #34	; 0x22
    da72:	9a05      	ldr	r2, [sp, #20]
    da74:	2001      	movs	r0, #1
    da76:	4240      	negs	r0, r0
    da78:	17c1      	asrs	r1, r0, #31
    da7a:	6013      	str	r3, [r2, #0]
    da7c:	465b      	mov	r3, fp
    da7e:	2b00      	cmp	r3, #0
    da80:	d0e1      	beq.n	da46 <_strtoull_l.isra.0+0x106>
    da82:	1e6b      	subs	r3, r5, #1
    da84:	e7dd      	b.n	da42 <_strtoull_l.isra.0+0x102>
    da86:	2301      	movs	r3, #1
    da88:	782c      	ldrb	r4, [r5, #0]
    da8a:	9303      	str	r3, [sp, #12]
    da8c:	1cbd      	adds	r5, r7, #2
    da8e:	e779      	b.n	d984 <_strtoull_l.isra.0+0x44>
    da90:	782c      	ldrb	r4, [r5, #0]
    da92:	1cbd      	adds	r5, r7, #2
    da94:	e776      	b.n	d984 <_strtoull_l.isra.0+0x44>
    da96:	2c30      	cmp	r4, #48	; 0x30
    da98:	d121      	bne.n	dade <_strtoull_l.isra.0+0x19e>
    da9a:	2220      	movs	r2, #32
    da9c:	782b      	ldrb	r3, [r5, #0]
    da9e:	4393      	bics	r3, r2
    daa0:	2b58      	cmp	r3, #88	; 0x58
    daa2:	d11c      	bne.n	dade <_strtoull_l.isra.0+0x19e>
    daa4:	230f      	movs	r3, #15
    daa6:	9302      	str	r3, [sp, #8]
    daa8:	3b10      	subs	r3, #16
    daaa:	4698      	mov	r8, r3
    daac:	3311      	adds	r3, #17
    daae:	469a      	mov	sl, r3
    dab0:	2300      	movs	r3, #0
    dab2:	786c      	ldrb	r4, [r5, #1]
    dab4:	4f11      	ldr	r7, [pc, #68]	; (dafc <_strtoull_l.isra.0+0x1bc>)
    dab6:	3502      	adds	r5, #2
    dab8:	4699      	mov	r9, r3
    daba:	2610      	movs	r6, #16
    dabc:	e788      	b.n	d9d0 <_strtoull_l.isra.0+0x90>
    dabe:	2220      	movs	r2, #32
    dac0:	782b      	ldrb	r3, [r5, #0]
    dac2:	4393      	bics	r3, r2
    dac4:	2b58      	cmp	r3, #88	; 0x58
    dac6:	d0ed      	beq.n	daa4 <_strtoull_l.isra.0+0x164>
    dac8:	2307      	movs	r3, #7
    daca:	9302      	str	r3, [sp, #8]
    dacc:	3b08      	subs	r3, #8
    dace:	4698      	mov	r8, r3
    dad0:	3309      	adds	r3, #9
    dad2:	469a      	mov	sl, r3
    dad4:	2300      	movs	r3, #0
    dad6:	4f0a      	ldr	r7, [pc, #40]	; (db00 <_strtoull_l.isra.0+0x1c0>)
    dad8:	4699      	mov	r9, r3
    dada:	2608      	movs	r6, #8
    dadc:	e778      	b.n	d9d0 <_strtoull_l.isra.0+0x90>
    dade:	230f      	movs	r3, #15
    dae0:	9302      	str	r3, [sp, #8]
    dae2:	3b10      	subs	r3, #16
    dae4:	4698      	mov	r8, r3
    dae6:	3311      	adds	r3, #17
    dae8:	469a      	mov	sl, r3
    daea:	2300      	movs	r3, #0
    daec:	4f03      	ldr	r7, [pc, #12]	; (dafc <_strtoull_l.isra.0+0x1bc>)
    daee:	4699      	mov	r9, r3
    daf0:	e76e      	b.n	d9d0 <_strtoull_l.isra.0+0x90>
    daf2:	46c0      	nop			; (mov r8, r8)
    daf4:	99999999 	.word	0x99999999
    daf8:	19999999 	.word	0x19999999
    dafc:	0fffffff 	.word	0x0fffffff
    db00:	1fffffff 	.word	0x1fffffff

0000db04 <_strtoull_r>:
    db04:	b510      	push	{r4, lr}
    db06:	4c06      	ldr	r4, [pc, #24]	; (db20 <_strtoull_r+0x1c>)
    db08:	b082      	sub	sp, #8
    db0a:	6824      	ldr	r4, [r4, #0]
    db0c:	6b64      	ldr	r4, [r4, #52]	; 0x34
    db0e:	2c00      	cmp	r4, #0
    db10:	d004      	beq.n	db1c <_strtoull_r+0x18>
    db12:	9400      	str	r4, [sp, #0]
    db14:	f7ff ff14 	bl	d940 <_strtoull_l.isra.0>
    db18:	b002      	add	sp, #8
    db1a:	bd10      	pop	{r4, pc}
    db1c:	4c01      	ldr	r4, [pc, #4]	; (db24 <_strtoull_r+0x20>)
    db1e:	e7f8      	b.n	db12 <_strtoull_r+0xe>
    db20:	200000a0 	.word	0x200000a0
    db24:	200004d4 	.word	0x200004d4

0000db28 <__ssprint_r>:
    db28:	b5f0      	push	{r4, r5, r6, r7, lr}
    db2a:	4657      	mov	r7, sl
    db2c:	464e      	mov	r6, r9
    db2e:	46de      	mov	lr, fp
    db30:	4645      	mov	r5, r8
    db32:	b5e0      	push	{r5, r6, r7, lr}
    db34:	6893      	ldr	r3, [r2, #8]
    db36:	b083      	sub	sp, #12
    db38:	9001      	str	r0, [sp, #4]
    db3a:	000e      	movs	r6, r1
    db3c:	4692      	mov	sl, r2
    db3e:	2b00      	cmp	r3, #0
    db40:	d070      	beq.n	dc24 <__ssprint_r+0xfc>
    db42:	688d      	ldr	r5, [r1, #8]
    db44:	6813      	ldr	r3, [r2, #0]
    db46:	002c      	movs	r4, r5
    db48:	6808      	ldr	r0, [r1, #0]
    db4a:	001d      	movs	r5, r3
    db4c:	e046      	b.n	dbdc <__ssprint_r+0xb4>
    db4e:	2290      	movs	r2, #144	; 0x90
    db50:	89b3      	ldrh	r3, [r6, #12]
    db52:	00d2      	lsls	r2, r2, #3
    db54:	4213      	tst	r3, r2
    db56:	d030      	beq.n	dbba <__ssprint_r+0x92>
    db58:	6931      	ldr	r1, [r6, #16]
    db5a:	1a42      	subs	r2, r0, r1
    db5c:	4693      	mov	fp, r2
    db5e:	6970      	ldr	r0, [r6, #20]
    db60:	0042      	lsls	r2, r0, #1
    db62:	1812      	adds	r2, r2, r0
    db64:	0fd0      	lsrs	r0, r2, #31
    db66:	1882      	adds	r2, r0, r2
    db68:	1052      	asrs	r2, r2, #1
    db6a:	4690      	mov	r8, r2
    db6c:	465a      	mov	r2, fp
    db6e:	1c50      	adds	r0, r2, #1
    db70:	19c0      	adds	r0, r0, r7
    db72:	4642      	mov	r2, r8
    db74:	4540      	cmp	r0, r8
    db76:	d901      	bls.n	db7c <__ssprint_r+0x54>
    db78:	4680      	mov	r8, r0
    db7a:	0002      	movs	r2, r0
    db7c:	2080      	movs	r0, #128	; 0x80
    db7e:	00c0      	lsls	r0, r0, #3
    db80:	4203      	tst	r3, r0
    db82:	d038      	beq.n	dbf6 <__ssprint_r+0xce>
    db84:	0011      	movs	r1, r2
    db86:	9801      	ldr	r0, [sp, #4]
    db88:	f7fd fd56 	bl	b638 <_malloc_r>
    db8c:	1e04      	subs	r4, r0, #0
    db8e:	d054      	beq.n	dc3a <__ssprint_r+0x112>
    db90:	465a      	mov	r2, fp
    db92:	6931      	ldr	r1, [r6, #16]
    db94:	f7f9 fc6c 	bl	7470 <memcpy>
    db98:	89b3      	ldrh	r3, [r6, #12]
    db9a:	4a2a      	ldr	r2, [pc, #168]	; (dc44 <__ssprint_r+0x11c>)
    db9c:	4013      	ands	r3, r2
    db9e:	2280      	movs	r2, #128	; 0x80
    dba0:	4313      	orrs	r3, r2
    dba2:	81b3      	strh	r3, [r6, #12]
    dba4:	4643      	mov	r3, r8
    dba6:	0020      	movs	r0, r4
    dba8:	465a      	mov	r2, fp
    dbaa:	6134      	str	r4, [r6, #16]
    dbac:	46b8      	mov	r8, r7
    dbae:	003c      	movs	r4, r7
    dbb0:	4458      	add	r0, fp
    dbb2:	6173      	str	r3, [r6, #20]
    dbb4:	1a9b      	subs	r3, r3, r2
    dbb6:	6030      	str	r0, [r6, #0]
    dbb8:	60b3      	str	r3, [r6, #8]
    dbba:	4642      	mov	r2, r8
    dbbc:	4649      	mov	r1, r9
    dbbe:	f000 fdb7 	bl	e730 <memmove>
    dbc2:	68b3      	ldr	r3, [r6, #8]
    dbc4:	1b1c      	subs	r4, r3, r4
    dbc6:	6833      	ldr	r3, [r6, #0]
    dbc8:	60b4      	str	r4, [r6, #8]
    dbca:	4443      	add	r3, r8
    dbcc:	6033      	str	r3, [r6, #0]
    dbce:	0018      	movs	r0, r3
    dbd0:	4653      	mov	r3, sl
    dbd2:	689b      	ldr	r3, [r3, #8]
    dbd4:	1bdf      	subs	r7, r3, r7
    dbd6:	4653      	mov	r3, sl
    dbd8:	609f      	str	r7, [r3, #8]
    dbda:	d023      	beq.n	dc24 <__ssprint_r+0xfc>
    dbdc:	686f      	ldr	r7, [r5, #4]
    dbde:	002b      	movs	r3, r5
    dbe0:	3508      	adds	r5, #8
    dbe2:	2f00      	cmp	r7, #0
    dbe4:	d0fa      	beq.n	dbdc <__ssprint_r+0xb4>
    dbe6:	681b      	ldr	r3, [r3, #0]
    dbe8:	46a0      	mov	r8, r4
    dbea:	4699      	mov	r9, r3
    dbec:	42a7      	cmp	r7, r4
    dbee:	d2ae      	bcs.n	db4e <__ssprint_r+0x26>
    dbf0:	003c      	movs	r4, r7
    dbf2:	46b8      	mov	r8, r7
    dbf4:	e7e1      	b.n	dbba <__ssprint_r+0x92>
    dbf6:	9801      	ldr	r0, [sp, #4]
    dbf8:	f000 fdea 	bl	e7d0 <_realloc_r>
    dbfc:	1e04      	subs	r4, r0, #0
    dbfe:	d1d1      	bne.n	dba4 <__ssprint_r+0x7c>
    dc00:	9c01      	ldr	r4, [sp, #4]
    dc02:	6931      	ldr	r1, [r6, #16]
    dc04:	0020      	movs	r0, r4
    dc06:	f7fd fbf7 	bl	b3f8 <_free_r>
    dc0a:	230c      	movs	r3, #12
    dc0c:	6023      	str	r3, [r4, #0]
    dc0e:	2240      	movs	r2, #64	; 0x40
    dc10:	89b3      	ldrh	r3, [r6, #12]
    dc12:	2001      	movs	r0, #1
    dc14:	4313      	orrs	r3, r2
    dc16:	81b3      	strh	r3, [r6, #12]
    dc18:	4652      	mov	r2, sl
    dc1a:	2300      	movs	r3, #0
    dc1c:	4240      	negs	r0, r0
    dc1e:	6093      	str	r3, [r2, #8]
    dc20:	6053      	str	r3, [r2, #4]
    dc22:	e003      	b.n	dc2c <__ssprint_r+0x104>
    dc24:	2300      	movs	r3, #0
    dc26:	4652      	mov	r2, sl
    dc28:	2000      	movs	r0, #0
    dc2a:	6053      	str	r3, [r2, #4]
    dc2c:	b003      	add	sp, #12
    dc2e:	bc3c      	pop	{r2, r3, r4, r5}
    dc30:	4690      	mov	r8, r2
    dc32:	4699      	mov	r9, r3
    dc34:	46a2      	mov	sl, r4
    dc36:	46ab      	mov	fp, r5
    dc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc3a:	230c      	movs	r3, #12
    dc3c:	9a01      	ldr	r2, [sp, #4]
    dc3e:	6013      	str	r3, [r2, #0]
    dc40:	e7e5      	b.n	dc0e <__ssprint_r+0xe6>
    dc42:	46c0      	nop			; (mov r8, r8)
    dc44:	fffffb7f 	.word	0xfffffb7f

0000dc48 <_sungetc_r>:
    dc48:	b570      	push	{r4, r5, r6, lr}
    dc4a:	0014      	movs	r4, r2
    dc4c:	1c4b      	adds	r3, r1, #1
    dc4e:	d01b      	beq.n	dc88 <_sungetc_r+0x40>
    dc50:	8993      	ldrh	r3, [r2, #12]
    dc52:	2220      	movs	r2, #32
    dc54:	25ff      	movs	r5, #255	; 0xff
    dc56:	4393      	bics	r3, r2
    dc58:	81a3      	strh	r3, [r4, #12]
    dc5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dc5c:	b2ce      	uxtb	r6, r1
    dc5e:	400d      	ands	r5, r1
    dc60:	2b00      	cmp	r3, #0
    dc62:	d014      	beq.n	dc8e <_sungetc_r+0x46>
    dc64:	6863      	ldr	r3, [r4, #4]
    dc66:	6b62      	ldr	r2, [r4, #52]	; 0x34
    dc68:	4293      	cmp	r3, r2
    dc6a:	da08      	bge.n	dc7e <_sungetc_r+0x36>
    dc6c:	6823      	ldr	r3, [r4, #0]
    dc6e:	3b01      	subs	r3, #1
    dc70:	6023      	str	r3, [r4, #0]
    dc72:	701e      	strb	r6, [r3, #0]
    dc74:	6863      	ldr	r3, [r4, #4]
    dc76:	3301      	adds	r3, #1
    dc78:	6063      	str	r3, [r4, #4]
    dc7a:	0028      	movs	r0, r5
    dc7c:	bd70      	pop	{r4, r5, r6, pc}
    dc7e:	0021      	movs	r1, r4
    dc80:	f000 f88c 	bl	dd9c <__submore>
    dc84:	2800      	cmp	r0, #0
    dc86:	d0f1      	beq.n	dc6c <_sungetc_r+0x24>
    dc88:	2501      	movs	r5, #1
    dc8a:	426d      	negs	r5, r5
    dc8c:	e7f5      	b.n	dc7a <_sungetc_r+0x32>
    dc8e:	6922      	ldr	r2, [r4, #16]
    dc90:	6823      	ldr	r3, [r4, #0]
    dc92:	2a00      	cmp	r2, #0
    dc94:	d005      	beq.n	dca2 <_sungetc_r+0x5a>
    dc96:	429a      	cmp	r2, r3
    dc98:	d203      	bcs.n	dca2 <_sungetc_r+0x5a>
    dc9a:	1e5a      	subs	r2, r3, #1
    dc9c:	7811      	ldrb	r1, [r2, #0]
    dc9e:	428d      	cmp	r5, r1
    dca0:	d00f      	beq.n	dcc2 <_sungetc_r+0x7a>
    dca2:	63a3      	str	r3, [r4, #56]	; 0x38
    dca4:	0023      	movs	r3, r4
    dca6:	3340      	adds	r3, #64	; 0x40
    dca8:	6323      	str	r3, [r4, #48]	; 0x30
    dcaa:	2303      	movs	r3, #3
    dcac:	6862      	ldr	r2, [r4, #4]
    dcae:	6363      	str	r3, [r4, #52]	; 0x34
    dcb0:	333f      	adds	r3, #63	; 0x3f
    dcb2:	63e2      	str	r2, [r4, #60]	; 0x3c
    dcb4:	54e6      	strb	r6, [r4, r3]
    dcb6:	0023      	movs	r3, r4
    dcb8:	3342      	adds	r3, #66	; 0x42
    dcba:	6023      	str	r3, [r4, #0]
    dcbc:	2301      	movs	r3, #1
    dcbe:	6063      	str	r3, [r4, #4]
    dcc0:	e7db      	b.n	dc7a <_sungetc_r+0x32>
    dcc2:	6863      	ldr	r3, [r4, #4]
    dcc4:	6022      	str	r2, [r4, #0]
    dcc6:	3301      	adds	r3, #1
    dcc8:	6063      	str	r3, [r4, #4]
    dcca:	e7d6      	b.n	dc7a <_sungetc_r+0x32>

0000dccc <__ssrefill_r>:
    dccc:	b510      	push	{r4, lr}
    dcce:	000c      	movs	r4, r1
    dcd0:	6b09      	ldr	r1, [r1, #48]	; 0x30
    dcd2:	2900      	cmp	r1, #0
    dcd4:	d00f      	beq.n	dcf6 <__ssrefill_r+0x2a>
    dcd6:	0023      	movs	r3, r4
    dcd8:	3340      	adds	r3, #64	; 0x40
    dcda:	4299      	cmp	r1, r3
    dcdc:	d001      	beq.n	dce2 <__ssrefill_r+0x16>
    dcde:	f7fd fb8b 	bl	b3f8 <_free_r>
    dce2:	2300      	movs	r3, #0
    dce4:	6323      	str	r3, [r4, #48]	; 0x30
    dce6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    dce8:	6063      	str	r3, [r4, #4]
    dcea:	2b00      	cmp	r3, #0
    dcec:	d003      	beq.n	dcf6 <__ssrefill_r+0x2a>
    dcee:	2000      	movs	r0, #0
    dcf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    dcf2:	6023      	str	r3, [r4, #0]
    dcf4:	bd10      	pop	{r4, pc}
    dcf6:	6923      	ldr	r3, [r4, #16]
    dcf8:	2220      	movs	r2, #32
    dcfa:	6023      	str	r3, [r4, #0]
    dcfc:	2300      	movs	r3, #0
    dcfe:	2001      	movs	r0, #1
    dd00:	6063      	str	r3, [r4, #4]
    dd02:	89a3      	ldrh	r3, [r4, #12]
    dd04:	4240      	negs	r0, r0
    dd06:	4313      	orrs	r3, r2
    dd08:	81a3      	strh	r3, [r4, #12]
    dd0a:	e7f3      	b.n	dcf4 <__ssrefill_r+0x28>

0000dd0c <_sfread_r>:
    dd0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd0e:	46de      	mov	lr, fp
    dd10:	4657      	mov	r7, sl
    dd12:	4645      	mov	r5, r8
    dd14:	464e      	mov	r6, r9
    dd16:	469b      	mov	fp, r3
    dd18:	b5e0      	push	{r5, r6, r7, lr}
    dd1a:	b083      	sub	sp, #12
    dd1c:	0013      	movs	r3, r2
    dd1e:	9201      	str	r2, [sp, #4]
    dd20:	465a      	mov	r2, fp
    dd22:	4353      	muls	r3, r2
    dd24:	4680      	mov	r8, r0
    dd26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    dd28:	469a      	mov	sl, r3
    dd2a:	2b00      	cmp	r3, #0
    dd2c:	d026      	beq.n	dd7c <_sfread_r+0x70>
    dd2e:	001f      	movs	r7, r3
    dd30:	2300      	movs	r3, #0
    dd32:	000e      	movs	r6, r1
    dd34:	4699      	mov	r9, r3
    dd36:	e011      	b.n	dd5c <_sfread_r+0x50>
    dd38:	6821      	ldr	r1, [r4, #0]
    dd3a:	0030      	movs	r0, r6
    dd3c:	002a      	movs	r2, r5
    dd3e:	f7f9 fb97 	bl	7470 <memcpy>
    dd42:	6823      	ldr	r3, [r4, #0]
    dd44:	0021      	movs	r1, r4
    dd46:	195b      	adds	r3, r3, r5
    dd48:	6023      	str	r3, [r4, #0]
    dd4a:	464b      	mov	r3, r9
    dd4c:	4640      	mov	r0, r8
    dd4e:	6063      	str	r3, [r4, #4]
    dd50:	1976      	adds	r6, r6, r5
    dd52:	1b7f      	subs	r7, r7, r5
    dd54:	f7ff ffba 	bl	dccc <__ssrefill_r>
    dd58:	2800      	cmp	r0, #0
    dd5a:	d117      	bne.n	dd8c <_sfread_r+0x80>
    dd5c:	6865      	ldr	r5, [r4, #4]
    dd5e:	42af      	cmp	r7, r5
    dd60:	d8ea      	bhi.n	dd38 <_sfread_r+0x2c>
    dd62:	003a      	movs	r2, r7
    dd64:	6821      	ldr	r1, [r4, #0]
    dd66:	0030      	movs	r0, r6
    dd68:	f7f9 fb82 	bl	7470 <memcpy>
    dd6c:	6863      	ldr	r3, [r4, #4]
    dd6e:	46da      	mov	sl, fp
    dd70:	1bdb      	subs	r3, r3, r7
    dd72:	6063      	str	r3, [r4, #4]
    dd74:	6823      	ldr	r3, [r4, #0]
    dd76:	469c      	mov	ip, r3
    dd78:	4467      	add	r7, ip
    dd7a:	6027      	str	r7, [r4, #0]
    dd7c:	4650      	mov	r0, sl
    dd7e:	b003      	add	sp, #12
    dd80:	bc3c      	pop	{r2, r3, r4, r5}
    dd82:	4690      	mov	r8, r2
    dd84:	4699      	mov	r9, r3
    dd86:	46a2      	mov	sl, r4
    dd88:	46ab      	mov	fp, r5
    dd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd8c:	4653      	mov	r3, sl
    dd8e:	9901      	ldr	r1, [sp, #4]
    dd90:	1bd8      	subs	r0, r3, r7
    dd92:	f7f7 fb2f 	bl	53f4 <__udivsi3>
    dd96:	4682      	mov	sl, r0
    dd98:	e7f0      	b.n	dd7c <_sfread_r+0x70>
    dd9a:	46c0      	nop			; (mov r8, r8)

0000dd9c <__submore>:
    dd9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd9e:	000c      	movs	r4, r1
    dda0:	0023      	movs	r3, r4
    dda2:	46c6      	mov	lr, r8
    dda4:	6b09      	ldr	r1, [r1, #48]	; 0x30
    dda6:	3340      	adds	r3, #64	; 0x40
    dda8:	b500      	push	{lr}
    ddaa:	4299      	cmp	r1, r3
    ddac:	d015      	beq.n	ddda <__submore+0x3e>
    ddae:	6b66      	ldr	r6, [r4, #52]	; 0x34
    ddb0:	0077      	lsls	r7, r6, #1
    ddb2:	003a      	movs	r2, r7
    ddb4:	f000 fd0c 	bl	e7d0 <_realloc_r>
    ddb8:	1e05      	subs	r5, r0, #0
    ddba:	d028      	beq.n	de0e <__submore+0x72>
    ddbc:	1983      	adds	r3, r0, r6
    ddbe:	4698      	mov	r8, r3
    ddc0:	0001      	movs	r1, r0
    ddc2:	0032      	movs	r2, r6
    ddc4:	0018      	movs	r0, r3
    ddc6:	f7f9 fb53 	bl	7470 <memcpy>
    ddca:	4643      	mov	r3, r8
    ddcc:	2000      	movs	r0, #0
    ddce:	6023      	str	r3, [r4, #0]
    ddd0:	6325      	str	r5, [r4, #48]	; 0x30
    ddd2:	6367      	str	r7, [r4, #52]	; 0x34
    ddd4:	bc04      	pop	{r2}
    ddd6:	4690      	mov	r8, r2
    ddd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ddda:	2580      	movs	r5, #128	; 0x80
    dddc:	00ed      	lsls	r5, r5, #3
    ddde:	0029      	movs	r1, r5
    dde0:	f7fd fc2a 	bl	b638 <_malloc_r>
    dde4:	2800      	cmp	r0, #0
    dde6:	d012      	beq.n	de0e <__submore+0x72>
    dde8:	2342      	movs	r3, #66	; 0x42
    ddea:	6320      	str	r0, [r4, #48]	; 0x30
    ddec:	6365      	str	r5, [r4, #52]	; 0x34
    ddee:	5ce2      	ldrb	r2, [r4, r3]
    ddf0:	4b08      	ldr	r3, [pc, #32]	; (de14 <__submore+0x78>)
    ddf2:	54c2      	strb	r2, [r0, r3]
    ddf4:	2341      	movs	r3, #65	; 0x41
    ddf6:	5ce2      	ldrb	r2, [r4, r3]
    ddf8:	4b07      	ldr	r3, [pc, #28]	; (de18 <__submore+0x7c>)
    ddfa:	54c2      	strb	r2, [r0, r3]
    ddfc:	2340      	movs	r3, #64	; 0x40
    ddfe:	5ce2      	ldrb	r2, [r4, r3]
    de00:	4b06      	ldr	r3, [pc, #24]	; (de1c <__submore+0x80>)
    de02:	469c      	mov	ip, r3
    de04:	54c2      	strb	r2, [r0, r3]
    de06:	4460      	add	r0, ip
    de08:	6020      	str	r0, [r4, #0]
    de0a:	2000      	movs	r0, #0
    de0c:	e7e2      	b.n	ddd4 <__submore+0x38>
    de0e:	2001      	movs	r0, #1
    de10:	4240      	negs	r0, r0
    de12:	e7df      	b.n	ddd4 <__submore+0x38>
    de14:	000003ff 	.word	0x000003ff
    de18:	000003fe 	.word	0x000003fe
    de1c:	000003fd 	.word	0x000003fd

0000de20 <__ascii_wctomb>:
    de20:	2900      	cmp	r1, #0
    de22:	d004      	beq.n	de2e <__ascii_wctomb+0xe>
    de24:	2aff      	cmp	r2, #255	; 0xff
    de26:	d804      	bhi.n	de32 <__ascii_wctomb+0x12>
    de28:	2001      	movs	r0, #1
    de2a:	700a      	strb	r2, [r1, #0]
    de2c:	4770      	bx	lr
    de2e:	2000      	movs	r0, #0
    de30:	e7fc      	b.n	de2c <__ascii_wctomb+0xc>
    de32:	238a      	movs	r3, #138	; 0x8a
    de34:	6003      	str	r3, [r0, #0]
    de36:	2001      	movs	r0, #1
    de38:	4240      	negs	r0, r0
    de3a:	e7f7      	b.n	de2c <__ascii_wctomb+0xc>

0000de3c <__register_exitproc>:
    de3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de3e:	464e      	mov	r6, r9
    de40:	4645      	mov	r5, r8
    de42:	46de      	mov	lr, fp
    de44:	4657      	mov	r7, sl
    de46:	b5e0      	push	{r5, r6, r7, lr}
    de48:	4d36      	ldr	r5, [pc, #216]	; (df24 <__register_exitproc+0xe8>)
    de4a:	b083      	sub	sp, #12
    de4c:	0006      	movs	r6, r0
    de4e:	6828      	ldr	r0, [r5, #0]
    de50:	4698      	mov	r8, r3
    de52:	000f      	movs	r7, r1
    de54:	4691      	mov	r9, r2
    de56:	f7fd fbeb 	bl	b630 <__retarget_lock_acquire_recursive>
    de5a:	4b33      	ldr	r3, [pc, #204]	; (df28 <__register_exitproc+0xec>)
    de5c:	681c      	ldr	r4, [r3, #0]
    de5e:	23a4      	movs	r3, #164	; 0xa4
    de60:	005b      	lsls	r3, r3, #1
    de62:	58e0      	ldr	r0, [r4, r3]
    de64:	2800      	cmp	r0, #0
    de66:	d052      	beq.n	df0e <__register_exitproc+0xd2>
    de68:	6843      	ldr	r3, [r0, #4]
    de6a:	2b1f      	cmp	r3, #31
    de6c:	dc13      	bgt.n	de96 <__register_exitproc+0x5a>
    de6e:	1c5a      	adds	r2, r3, #1
    de70:	9201      	str	r2, [sp, #4]
    de72:	2e00      	cmp	r6, #0
    de74:	d128      	bne.n	dec8 <__register_exitproc+0x8c>
    de76:	9a01      	ldr	r2, [sp, #4]
    de78:	3302      	adds	r3, #2
    de7a:	009b      	lsls	r3, r3, #2
    de7c:	6042      	str	r2, [r0, #4]
    de7e:	501f      	str	r7, [r3, r0]
    de80:	6828      	ldr	r0, [r5, #0]
    de82:	f7fd fbd7 	bl	b634 <__retarget_lock_release_recursive>
    de86:	2000      	movs	r0, #0
    de88:	b003      	add	sp, #12
    de8a:	bc3c      	pop	{r2, r3, r4, r5}
    de8c:	4690      	mov	r8, r2
    de8e:	4699      	mov	r9, r3
    de90:	46a2      	mov	sl, r4
    de92:	46ab      	mov	fp, r5
    de94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    de96:	4b25      	ldr	r3, [pc, #148]	; (df2c <__register_exitproc+0xf0>)
    de98:	2b00      	cmp	r3, #0
    de9a:	d03d      	beq.n	df18 <__register_exitproc+0xdc>
    de9c:	20c8      	movs	r0, #200	; 0xc8
    de9e:	0040      	lsls	r0, r0, #1
    dea0:	e000      	b.n	dea4 <__register_exitproc+0x68>
    dea2:	bf00      	nop
    dea4:	2800      	cmp	r0, #0
    dea6:	d037      	beq.n	df18 <__register_exitproc+0xdc>
    dea8:	22a4      	movs	r2, #164	; 0xa4
    deaa:	2300      	movs	r3, #0
    deac:	0052      	lsls	r2, r2, #1
    deae:	58a1      	ldr	r1, [r4, r2]
    deb0:	6043      	str	r3, [r0, #4]
    deb2:	6001      	str	r1, [r0, #0]
    deb4:	50a0      	str	r0, [r4, r2]
    deb6:	3240      	adds	r2, #64	; 0x40
    deb8:	5083      	str	r3, [r0, r2]
    deba:	3204      	adds	r2, #4
    debc:	5083      	str	r3, [r0, r2]
    debe:	3301      	adds	r3, #1
    dec0:	9301      	str	r3, [sp, #4]
    dec2:	2300      	movs	r3, #0
    dec4:	2e00      	cmp	r6, #0
    dec6:	d0d6      	beq.n	de76 <__register_exitproc+0x3a>
    dec8:	009a      	lsls	r2, r3, #2
    deca:	4692      	mov	sl, r2
    decc:	4482      	add	sl, r0
    dece:	464a      	mov	r2, r9
    ded0:	2188      	movs	r1, #136	; 0x88
    ded2:	4654      	mov	r4, sl
    ded4:	5062      	str	r2, [r4, r1]
    ded6:	22c4      	movs	r2, #196	; 0xc4
    ded8:	0052      	lsls	r2, r2, #1
    deda:	4691      	mov	r9, r2
    dedc:	4481      	add	r9, r0
    dede:	464a      	mov	r2, r9
    dee0:	3987      	subs	r1, #135	; 0x87
    dee2:	4099      	lsls	r1, r3
    dee4:	6812      	ldr	r2, [r2, #0]
    dee6:	468b      	mov	fp, r1
    dee8:	430a      	orrs	r2, r1
    deea:	4694      	mov	ip, r2
    deec:	464a      	mov	r2, r9
    deee:	4661      	mov	r1, ip
    def0:	6011      	str	r1, [r2, #0]
    def2:	2284      	movs	r2, #132	; 0x84
    def4:	4641      	mov	r1, r8
    def6:	0052      	lsls	r2, r2, #1
    def8:	50a1      	str	r1, [r4, r2]
    defa:	2e02      	cmp	r6, #2
    defc:	d1bb      	bne.n	de76 <__register_exitproc+0x3a>
    defe:	0002      	movs	r2, r0
    df00:	465c      	mov	r4, fp
    df02:	328d      	adds	r2, #141	; 0x8d
    df04:	32ff      	adds	r2, #255	; 0xff
    df06:	6811      	ldr	r1, [r2, #0]
    df08:	430c      	orrs	r4, r1
    df0a:	6014      	str	r4, [r2, #0]
    df0c:	e7b3      	b.n	de76 <__register_exitproc+0x3a>
    df0e:	0020      	movs	r0, r4
    df10:	304d      	adds	r0, #77	; 0x4d
    df12:	30ff      	adds	r0, #255	; 0xff
    df14:	50e0      	str	r0, [r4, r3]
    df16:	e7a7      	b.n	de68 <__register_exitproc+0x2c>
    df18:	6828      	ldr	r0, [r5, #0]
    df1a:	f7fd fb8b 	bl	b634 <__retarget_lock_release_recursive>
    df1e:	2001      	movs	r0, #1
    df20:	4240      	negs	r0, r0
    df22:	e7b1      	b.n	de88 <__register_exitproc+0x4c>
    df24:	200004d0 	.word	0x200004d0
    df28:	00011a48 	.word	0x00011a48
    df2c:	00000000 	.word	0x00000000

0000df30 <_calloc_r>:
    df30:	b510      	push	{r4, lr}
    df32:	4351      	muls	r1, r2
    df34:	f7fd fb80 	bl	b638 <_malloc_r>
    df38:	1e04      	subs	r4, r0, #0
    df3a:	d01c      	beq.n	df76 <_calloc_r+0x46>
    df3c:	0003      	movs	r3, r0
    df3e:	3b08      	subs	r3, #8
    df40:	685a      	ldr	r2, [r3, #4]
    df42:	2303      	movs	r3, #3
    df44:	439a      	bics	r2, r3
    df46:	3a04      	subs	r2, #4
    df48:	2a24      	cmp	r2, #36	; 0x24
    df4a:	d816      	bhi.n	df7a <_calloc_r+0x4a>
    df4c:	0003      	movs	r3, r0
    df4e:	2a13      	cmp	r2, #19
    df50:	d90d      	bls.n	df6e <_calloc_r+0x3e>
    df52:	2100      	movs	r1, #0
    df54:	3308      	adds	r3, #8
    df56:	6001      	str	r1, [r0, #0]
    df58:	6041      	str	r1, [r0, #4]
    df5a:	2a1b      	cmp	r2, #27
    df5c:	d907      	bls.n	df6e <_calloc_r+0x3e>
    df5e:	6081      	str	r1, [r0, #8]
    df60:	60c1      	str	r1, [r0, #12]
    df62:	2a24      	cmp	r2, #36	; 0x24
    df64:	d10d      	bne.n	df82 <_calloc_r+0x52>
    df66:	0003      	movs	r3, r0
    df68:	6101      	str	r1, [r0, #16]
    df6a:	3318      	adds	r3, #24
    df6c:	6141      	str	r1, [r0, #20]
    df6e:	2200      	movs	r2, #0
    df70:	601a      	str	r2, [r3, #0]
    df72:	605a      	str	r2, [r3, #4]
    df74:	609a      	str	r2, [r3, #8]
    df76:	0020      	movs	r0, r4
    df78:	bd10      	pop	{r4, pc}
    df7a:	2100      	movs	r1, #0
    df7c:	f7f9 faba 	bl	74f4 <memset>
    df80:	e7f9      	b.n	df76 <_calloc_r+0x46>
    df82:	0003      	movs	r3, r0
    df84:	3310      	adds	r3, #16
    df86:	e7f2      	b.n	df6e <_calloc_r+0x3e>

0000df88 <rshift>:
    df88:	b5f0      	push	{r4, r5, r6, r7, lr}
    df8a:	46ce      	mov	lr, r9
    df8c:	4647      	mov	r7, r8
    df8e:	0005      	movs	r5, r0
    df90:	6902      	ldr	r2, [r0, #16]
    df92:	b580      	push	{r7, lr}
    df94:	3514      	adds	r5, #20
    df96:	114c      	asrs	r4, r1, #5
    df98:	4294      	cmp	r4, r2
    df9a:	da2c      	bge.n	dff6 <rshift+0x6e>
    df9c:	0092      	lsls	r2, r2, #2
    df9e:	18af      	adds	r7, r5, r2
    dfa0:	231f      	movs	r3, #31
    dfa2:	00a2      	lsls	r2, r4, #2
    dfa4:	4691      	mov	r9, r2
    dfa6:	400b      	ands	r3, r1
    dfa8:	44a9      	add	r9, r5
    dfaa:	469c      	mov	ip, r3
    dfac:	2b00      	cmp	r3, #0
    dfae:	d02a      	beq.n	e006 <rshift+0x7e>
    dfb0:	4662      	mov	r2, ip
    dfb2:	2320      	movs	r3, #32
    dfb4:	1a9b      	subs	r3, r3, r2
    dfb6:	4698      	mov	r8, r3
    dfb8:	464b      	mov	r3, r9
    dfba:	681e      	ldr	r6, [r3, #0]
    dfbc:	1d1c      	adds	r4, r3, #4
    dfbe:	40d6      	lsrs	r6, r2
    dfc0:	42a7      	cmp	r7, r4
    dfc2:	d935      	bls.n	e030 <rshift+0xa8>
    dfc4:	0029      	movs	r1, r5
    dfc6:	4642      	mov	r2, r8
    dfc8:	6823      	ldr	r3, [r4, #0]
    dfca:	4093      	lsls	r3, r2
    dfcc:	4333      	orrs	r3, r6
    dfce:	c108      	stmia	r1!, {r3}
    dfd0:	4663      	mov	r3, ip
    dfd2:	cc40      	ldmia	r4!, {r6}
    dfd4:	40de      	lsrs	r6, r3
    dfd6:	42a7      	cmp	r7, r4
    dfd8:	d8f5      	bhi.n	dfc6 <rshift+0x3e>
    dfda:	464b      	mov	r3, r9
    dfdc:	1afa      	subs	r2, r7, r3
    dfde:	2303      	movs	r3, #3
    dfe0:	3a05      	subs	r2, #5
    dfe2:	439a      	bics	r2, r3
    dfe4:	3204      	adds	r2, #4
    dfe6:	18aa      	adds	r2, r5, r2
    dfe8:	6016      	str	r6, [r2, #0]
    dfea:	2e00      	cmp	r6, #0
    dfec:	d01d      	beq.n	e02a <rshift+0xa2>
    dfee:	1d13      	adds	r3, r2, #4
    dff0:	1b5b      	subs	r3, r3, r5
    dff2:	109b      	asrs	r3, r3, #2
    dff4:	e015      	b.n	e022 <rshift+0x9a>
    dff6:	2300      	movs	r3, #0
    dff8:	6103      	str	r3, [r0, #16]
    dffa:	2300      	movs	r3, #0
    dffc:	6143      	str	r3, [r0, #20]
    dffe:	bc0c      	pop	{r2, r3}
    e000:	4690      	mov	r8, r2
    e002:	4699      	mov	r9, r3
    e004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e006:	4649      	mov	r1, r9
    e008:	454f      	cmp	r7, r9
    e00a:	d9f4      	bls.n	dff6 <rshift+0x6e>
    e00c:	c910      	ldmia	r1!, {r4}
    e00e:	c510      	stmia	r5!, {r4}
    e010:	428f      	cmp	r7, r1
    e012:	d8fb      	bhi.n	e00c <rshift+0x84>
    e014:	464b      	mov	r3, r9
    e016:	43db      	mvns	r3, r3
    e018:	2203      	movs	r2, #3
    e01a:	19db      	adds	r3, r3, r7
    e01c:	4393      	bics	r3, r2
    e01e:	3304      	adds	r3, #4
    e020:	109b      	asrs	r3, r3, #2
    e022:	6103      	str	r3, [r0, #16]
    e024:	2b00      	cmp	r3, #0
    e026:	d1ea      	bne.n	dffe <rshift+0x76>
    e028:	e7e7      	b.n	dffa <rshift+0x72>
    e02a:	1b53      	subs	r3, r2, r5
    e02c:	109b      	asrs	r3, r3, #2
    e02e:	e7f8      	b.n	e022 <rshift+0x9a>
    e030:	002a      	movs	r2, r5
    e032:	e7d9      	b.n	dfe8 <rshift+0x60>

0000e034 <__gethex>:
    e034:	b5f0      	push	{r4, r5, r6, r7, lr}
    e036:	46de      	mov	lr, fp
    e038:	464e      	mov	r6, r9
    e03a:	4657      	mov	r7, sl
    e03c:	4645      	mov	r5, r8
    e03e:	b5e0      	push	{r5, r6, r7, lr}
    e040:	b08b      	sub	sp, #44	; 0x2c
    e042:	9006      	str	r0, [sp, #24]
    e044:	9816      	ldr	r0, [sp, #88]	; 0x58
    e046:	4689      	mov	r9, r1
    e048:	4693      	mov	fp, r2
    e04a:	9309      	str	r3, [sp, #36]	; 0x24
    e04c:	f7fd fae0 	bl	b610 <__localeconv_l>
    e050:	6803      	ldr	r3, [r0, #0]
    e052:	0018      	movs	r0, r3
    e054:	001c      	movs	r4, r3
    e056:	9304      	str	r3, [sp, #16]
    e058:	f7f9 fbb4 	bl	77c4 <strlen>
    e05c:	46a4      	mov	ip, r4
    e05e:	0002      	movs	r2, r0
    e060:	4462      	add	r2, ip
    e062:	0013      	movs	r3, r2
    e064:	3b01      	subs	r3, #1
    e066:	781b      	ldrb	r3, [r3, #0]
    e068:	9002      	str	r0, [sp, #8]
    e06a:	9301      	str	r3, [sp, #4]
    e06c:	464b      	mov	r3, r9
    e06e:	681c      	ldr	r4, [r3, #0]
    e070:	78a2      	ldrb	r2, [r4, #2]
    e072:	2a30      	cmp	r2, #48	; 0x30
    e074:	d000      	beq.n	e078 <__gethex+0x44>
    e076:	e1c4      	b.n	e402 <__gethex+0x3ce>
    e078:	2102      	movs	r1, #2
    e07a:	4249      	negs	r1, r1
    e07c:	1ce3      	adds	r3, r4, #3
    e07e:	1b09      	subs	r1, r1, r4
    e080:	18c8      	adds	r0, r1, r3
    e082:	001c      	movs	r4, r3
    e084:	3301      	adds	r3, #1
    e086:	1e5a      	subs	r2, r3, #1
    e088:	7812      	ldrb	r2, [r2, #0]
    e08a:	2a30      	cmp	r2, #48	; 0x30
    e08c:	d0f8      	beq.n	e080 <__gethex+0x4c>
    e08e:	4680      	mov	r8, r0
    e090:	4fbf      	ldr	r7, [pc, #764]	; (e390 <__gethex+0x35c>)
    e092:	5cbb      	ldrb	r3, [r7, r2]
    e094:	2b00      	cmp	r3, #0
    e096:	d100      	bne.n	e09a <__gethex+0x66>
    e098:	e0b0      	b.n	e1fc <__gethex+0x1c8>
    e09a:	2200      	movs	r2, #0
    e09c:	2600      	movs	r6, #0
    e09e:	4692      	mov	sl, r2
    e0a0:	7823      	ldrb	r3, [r4, #0]
    e0a2:	5cfb      	ldrb	r3, [r7, r3]
    e0a4:	0025      	movs	r5, r4
    e0a6:	2b00      	cmp	r3, #0
    e0a8:	d004      	beq.n	e0b4 <__gethex+0x80>
    e0aa:	3501      	adds	r5, #1
    e0ac:	782b      	ldrb	r3, [r5, #0]
    e0ae:	5cfb      	ldrb	r3, [r7, r3]
    e0b0:	2b00      	cmp	r3, #0
    e0b2:	d1fa      	bne.n	e0aa <__gethex+0x76>
    e0b4:	9a02      	ldr	r2, [sp, #8]
    e0b6:	9904      	ldr	r1, [sp, #16]
    e0b8:	0028      	movs	r0, r5
    e0ba:	f000 fd47 	bl	eb4c <strncmp>
    e0be:	2800      	cmp	r0, #0
    e0c0:	d100      	bne.n	e0c4 <__gethex+0x90>
    e0c2:	e08b      	b.n	e1dc <__gethex+0x1a8>
    e0c4:	782b      	ldrb	r3, [r5, #0]
    e0c6:	2e00      	cmp	r6, #0
    e0c8:	d100      	bne.n	e0cc <__gethex+0x98>
    e0ca:	e189      	b.n	e3e0 <__gethex+0x3ac>
    e0cc:	1b76      	subs	r6, r6, r5
    e0ce:	00b2      	lsls	r2, r6, #2
    e0d0:	9203      	str	r2, [sp, #12]
    e0d2:	2b50      	cmp	r3, #80	; 0x50
    e0d4:	d100      	bne.n	e0d8 <__gethex+0xa4>
    e0d6:	e0b4      	b.n	e242 <__gethex+0x20e>
    e0d8:	002e      	movs	r6, r5
    e0da:	2b70      	cmp	r3, #112	; 0x70
    e0dc:	d100      	bne.n	e0e0 <__gethex+0xac>
    e0de:	e0b0      	b.n	e242 <__gethex+0x20e>
    e0e0:	464b      	mov	r3, r9
    e0e2:	601d      	str	r5, [r3, #0]
    e0e4:	4653      	mov	r3, sl
    e0e6:	2b00      	cmp	r3, #0
    e0e8:	d000      	beq.n	e0ec <__gethex+0xb8>
    e0ea:	e098      	b.n	e21e <__gethex+0x1ea>
    e0ec:	1b33      	subs	r3, r6, r4
    e0ee:	3b01      	subs	r3, #1
    e0f0:	2100      	movs	r1, #0
    e0f2:	2b07      	cmp	r3, #7
    e0f4:	dd03      	ble.n	e0fe <__gethex+0xca>
    e0f6:	3101      	adds	r1, #1
    e0f8:	105b      	asrs	r3, r3, #1
    e0fa:	2b07      	cmp	r3, #7
    e0fc:	dcfb      	bgt.n	e0f6 <__gethex+0xc2>
    e0fe:	9806      	ldr	r0, [sp, #24]
    e100:	f7fd fde6 	bl	bcd0 <_Balloc>
    e104:	0003      	movs	r3, r0
    e106:	3314      	adds	r3, #20
    e108:	9005      	str	r0, [sp, #20]
    e10a:	9308      	str	r3, [sp, #32]
    e10c:	42b4      	cmp	r4, r6
    e10e:	d300      	bcc.n	e112 <__gethex+0xde>
    e110:	e1c3      	b.n	e49a <__gethex+0x466>
    e112:	469a      	mov	sl, r3
    e114:	2300      	movs	r3, #0
    e116:	9a02      	ldr	r2, [sp, #8]
    e118:	4698      	mov	r8, r3
    e11a:	4699      	mov	r9, r3
    e11c:	3301      	adds	r3, #1
    e11e:	1a9b      	subs	r3, r3, r2
    e120:	9307      	str	r3, [sp, #28]
    e122:	0023      	movs	r3, r4
    e124:	4644      	mov	r4, r8
    e126:	4698      	mov	r8, r3
    e128:	e00e      	b.n	e148 <__gethex+0x114>
    e12a:	2c20      	cmp	r4, #32
    e12c:	d05b      	beq.n	e1e6 <__gethex+0x1b2>
    e12e:	0022      	movs	r2, r4
    e130:	3404      	adds	r4, #4
    e132:	210f      	movs	r1, #15
    e134:	782b      	ldrb	r3, [r5, #0]
    e136:	002e      	movs	r6, r5
    e138:	5cfb      	ldrb	r3, [r7, r3]
    e13a:	400b      	ands	r3, r1
    e13c:	4093      	lsls	r3, r2
    e13e:	464a      	mov	r2, r9
    e140:	431a      	orrs	r2, r3
    e142:	4691      	mov	r9, r2
    e144:	4546      	cmp	r6, r8
    e146:	d911      	bls.n	e16c <__gethex+0x138>
    e148:	1e75      	subs	r5, r6, #1
    e14a:	782b      	ldrb	r3, [r5, #0]
    e14c:	9a01      	ldr	r2, [sp, #4]
    e14e:	4293      	cmp	r3, r2
    e150:	d1eb      	bne.n	e12a <__gethex+0xf6>
    e152:	9b07      	ldr	r3, [sp, #28]
    e154:	18ee      	adds	r6, r5, r3
    e156:	4546      	cmp	r6, r8
    e158:	d3e7      	bcc.n	e12a <__gethex+0xf6>
    e15a:	9a02      	ldr	r2, [sp, #8]
    e15c:	9904      	ldr	r1, [sp, #16]
    e15e:	0030      	movs	r0, r6
    e160:	f000 fcf4 	bl	eb4c <strncmp>
    e164:	2800      	cmp	r0, #0
    e166:	d1e0      	bne.n	e12a <__gethex+0xf6>
    e168:	4546      	cmp	r6, r8
    e16a:	d8ed      	bhi.n	e148 <__gethex+0x114>
    e16c:	4653      	mov	r3, sl
    e16e:	464a      	mov	r2, r9
    e170:	c304      	stmia	r3!, {r2}
    e172:	9a08      	ldr	r2, [sp, #32]
    e174:	4648      	mov	r0, r9
    e176:	1a9b      	subs	r3, r3, r2
    e178:	9a05      	ldr	r2, [sp, #20]
    e17a:	109b      	asrs	r3, r3, #2
    e17c:	6113      	str	r3, [r2, #16]
    e17e:	015c      	lsls	r4, r3, #5
    e180:	f7fd fe68 	bl	be54 <__hi0bits>
    e184:	465b      	mov	r3, fp
    e186:	681d      	ldr	r5, [r3, #0]
    e188:	1a24      	subs	r4, r4, r0
    e18a:	42ac      	cmp	r4, r5
    e18c:	dd00      	ble.n	e190 <__gethex+0x15c>
    e18e:	e101      	b.n	e394 <__gethex+0x360>
    e190:	2600      	movs	r6, #0
    e192:	42ac      	cmp	r4, r5
    e194:	da00      	bge.n	e198 <__gethex+0x164>
    e196:	e126      	b.n	e3e6 <__gethex+0x3b2>
    e198:	465b      	mov	r3, fp
    e19a:	9a03      	ldr	r2, [sp, #12]
    e19c:	689b      	ldr	r3, [r3, #8]
    e19e:	429a      	cmp	r2, r3
    e1a0:	dd00      	ble.n	e1a4 <__gethex+0x170>
    e1a2:	e0ba      	b.n	e31a <__gethex+0x2e6>
    e1a4:	465b      	mov	r3, fp
    e1a6:	9903      	ldr	r1, [sp, #12]
    e1a8:	685b      	ldr	r3, [r3, #4]
    e1aa:	4299      	cmp	r1, r3
    e1ac:	da00      	bge.n	e1b0 <__gethex+0x17c>
    e1ae:	e0d5      	b.n	e35c <__gethex+0x328>
    e1b0:	2401      	movs	r4, #1
    e1b2:	2e00      	cmp	r6, #0
    e1b4:	d00b      	beq.n	e1ce <__gethex+0x19a>
    e1b6:	465b      	mov	r3, fp
    e1b8:	68db      	ldr	r3, [r3, #12]
    e1ba:	2b02      	cmp	r3, #2
    e1bc:	d100      	bne.n	e1c0 <__gethex+0x18c>
    e1be:	e152      	b.n	e466 <__gethex+0x432>
    e1c0:	2b03      	cmp	r3, #3
    e1c2:	d100      	bne.n	e1c6 <__gethex+0x192>
    e1c4:	e153      	b.n	e46e <__gethex+0x43a>
    e1c6:	2b01      	cmp	r3, #1
    e1c8:	d069      	beq.n	e29e <__gethex+0x26a>
    e1ca:	2310      	movs	r3, #16
    e1cc:	431c      	orrs	r4, r3
    e1ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e1d0:	9a05      	ldr	r2, [sp, #20]
    e1d2:	601a      	str	r2, [r3, #0]
    e1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e1d6:	9a03      	ldr	r2, [sp, #12]
    e1d8:	601a      	str	r2, [r3, #0]
    e1da:	e026      	b.n	e22a <__gethex+0x1f6>
    e1dc:	2e00      	cmp	r6, #0
    e1de:	d100      	bne.n	e1e2 <__gethex+0x1ae>
    e1e0:	e133      	b.n	e44a <__gethex+0x416>
    e1e2:	782b      	ldrb	r3, [r5, #0]
    e1e4:	e772      	b.n	e0cc <__gethex+0x98>
    e1e6:	4653      	mov	r3, sl
    e1e8:	464a      	mov	r2, r9
    e1ea:	601a      	str	r2, [r3, #0]
    e1ec:	2304      	movs	r3, #4
    e1ee:	469c      	mov	ip, r3
    e1f0:	2300      	movs	r3, #0
    e1f2:	44e2      	add	sl, ip
    e1f4:	2200      	movs	r2, #0
    e1f6:	2404      	movs	r4, #4
    e1f8:	4699      	mov	r9, r3
    e1fa:	e79a      	b.n	e132 <__gethex+0xfe>
    e1fc:	9d02      	ldr	r5, [sp, #8]
    e1fe:	9904      	ldr	r1, [sp, #16]
    e200:	002a      	movs	r2, r5
    e202:	0020      	movs	r0, r4
    e204:	f000 fca2 	bl	eb4c <strncmp>
    e208:	2800      	cmp	r0, #0
    e20a:	d100      	bne.n	e20e <__gethex+0x1da>
    e20c:	e091      	b.n	e332 <__gethex+0x2fe>
    e20e:	0025      	movs	r5, r4
    e210:	7822      	ldrb	r2, [r4, #0]
    e212:	2a50      	cmp	r2, #80	; 0x50
    e214:	d011      	beq.n	e23a <__gethex+0x206>
    e216:	2a70      	cmp	r2, #112	; 0x70
    e218:	d00f      	beq.n	e23a <__gethex+0x206>
    e21a:	464b      	mov	r3, r9
    e21c:	601d      	str	r5, [r3, #0]
    e21e:	4643      	mov	r3, r8
    e220:	425a      	negs	r2, r3
    e222:	4153      	adcs	r3, r2
    e224:	2406      	movs	r4, #6
    e226:	425b      	negs	r3, r3
    e228:	401c      	ands	r4, r3
    e22a:	0020      	movs	r0, r4
    e22c:	b00b      	add	sp, #44	; 0x2c
    e22e:	bc3c      	pop	{r2, r3, r4, r5}
    e230:	4690      	mov	r8, r2
    e232:	4699      	mov	r9, r3
    e234:	46a2      	mov	sl, r4
    e236:	46ab      	mov	fp, r5
    e238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e23a:	2300      	movs	r3, #0
    e23c:	9303      	str	r3, [sp, #12]
    e23e:	3301      	adds	r3, #1
    e240:	469a      	mov	sl, r3
    e242:	786b      	ldrb	r3, [r5, #1]
    e244:	2b2b      	cmp	r3, #43	; 0x2b
    e246:	d100      	bne.n	e24a <__gethex+0x216>
    e248:	e09f      	b.n	e38a <__gethex+0x356>
    e24a:	2101      	movs	r1, #1
    e24c:	2b2d      	cmp	r3, #45	; 0x2d
    e24e:	d16d      	bne.n	e32c <__gethex+0x2f8>
    e250:	78ab      	ldrb	r3, [r5, #2]
    e252:	1ca8      	adds	r0, r5, #2
    e254:	5cfb      	ldrb	r3, [r7, r3]
    e256:	002e      	movs	r6, r5
    e258:	1e5a      	subs	r2, r3, #1
    e25a:	2a18      	cmp	r2, #24
    e25c:	d900      	bls.n	e260 <__gethex+0x22c>
    e25e:	e73f      	b.n	e0e0 <__gethex+0xac>
    e260:	1c42      	adds	r2, r0, #1
    e262:	7840      	ldrb	r0, [r0, #1]
    e264:	3b10      	subs	r3, #16
    e266:	5c38      	ldrb	r0, [r7, r0]
    e268:	1e46      	subs	r6, r0, #1
    e26a:	2e18      	cmp	r6, #24
    e26c:	d80c      	bhi.n	e288 <__gethex+0x254>
    e26e:	0006      	movs	r6, r0
    e270:	0098      	lsls	r0, r3, #2
    e272:	18c0      	adds	r0, r0, r3
    e274:	0040      	lsls	r0, r0, #1
    e276:	1980      	adds	r0, r0, r6
    e278:	0003      	movs	r3, r0
    e27a:	3201      	adds	r2, #1
    e27c:	7810      	ldrb	r0, [r2, #0]
    e27e:	3b10      	subs	r3, #16
    e280:	5c3e      	ldrb	r6, [r7, r0]
    e282:	1e70      	subs	r0, r6, #1
    e284:	2818      	cmp	r0, #24
    e286:	d9f3      	bls.n	e270 <__gethex+0x23c>
    e288:	2900      	cmp	r1, #0
    e28a:	d000      	beq.n	e28e <__gethex+0x25a>
    e28c:	425b      	negs	r3, r3
    e28e:	9903      	ldr	r1, [sp, #12]
    e290:	002e      	movs	r6, r5
    e292:	468c      	mov	ip, r1
    e294:	449c      	add	ip, r3
    e296:	4663      	mov	r3, ip
    e298:	0015      	movs	r5, r2
    e29a:	9303      	str	r3, [sp, #12]
    e29c:	e720      	b.n	e0e0 <__gethex+0xac>
    e29e:	07b2      	lsls	r2, r6, #30
    e2a0:	d593      	bpl.n	e1ca <__gethex+0x196>
    e2a2:	9a08      	ldr	r2, [sp, #32]
    e2a4:	6812      	ldr	r2, [r2, #0]
    e2a6:	4316      	orrs	r6, r2
    e2a8:	9201      	str	r2, [sp, #4]
    e2aa:	4233      	tst	r3, r6
    e2ac:	d100      	bne.n	e2b0 <__gethex+0x27c>
    e2ae:	e78c      	b.n	e1ca <__gethex+0x196>
    e2b0:	9b05      	ldr	r3, [sp, #20]
    e2b2:	691f      	ldr	r7, [r3, #16]
    e2b4:	9b08      	ldr	r3, [sp, #32]
    e2b6:	00b9      	lsls	r1, r7, #2
    e2b8:	4688      	mov	r8, r1
    e2ba:	001a      	movs	r2, r3
    e2bc:	4442      	add	r2, r8
    e2be:	0016      	movs	r6, r2
    e2c0:	2100      	movs	r1, #0
    e2c2:	469c      	mov	ip, r3
    e2c4:	e003      	b.n	e2ce <__gethex+0x29a>
    e2c6:	c302      	stmia	r3!, {r1}
    e2c8:	429e      	cmp	r6, r3
    e2ca:	d800      	bhi.n	e2ce <__gethex+0x29a>
    e2cc:	e0ff      	b.n	e4ce <__gethex+0x49a>
    e2ce:	681a      	ldr	r2, [r3, #0]
    e2d0:	1c50      	adds	r0, r2, #1
    e2d2:	d0f8      	beq.n	e2c6 <__gethex+0x292>
    e2d4:	3201      	adds	r2, #1
    e2d6:	4660      	mov	r0, ip
    e2d8:	601a      	str	r2, [r3, #0]
    e2da:	2c02      	cmp	r4, #2
    e2dc:	d100      	bne.n	e2e0 <__gethex+0x2ac>
    e2de:	e10c      	b.n	e4fa <__gethex+0x4c6>
    e2e0:	231f      	movs	r3, #31
    e2e2:	2421      	movs	r4, #33	; 0x21
    e2e4:	401d      	ands	r5, r3
    e2e6:	d100      	bne.n	e2ea <__gethex+0x2b6>
    e2e8:	e771      	b.n	e1ce <__gethex+0x19a>
    e2ea:	4440      	add	r0, r8
    e2ec:	3804      	subs	r0, #4
    e2ee:	6800      	ldr	r0, [r0, #0]
    e2f0:	f7fd fdb0 	bl	be54 <__hi0bits>
    e2f4:	2320      	movs	r3, #32
    e2f6:	1b5d      	subs	r5, r3, r5
    e2f8:	42a8      	cmp	r0, r5
    e2fa:	db00      	blt.n	e2fe <__gethex+0x2ca>
    e2fc:	e767      	b.n	e1ce <__gethex+0x19a>
    e2fe:	2101      	movs	r1, #1
    e300:	9805      	ldr	r0, [sp, #20]
    e302:	f7ff fe41 	bl	df88 <rshift>
    e306:	9b03      	ldr	r3, [sp, #12]
    e308:	2421      	movs	r4, #33	; 0x21
    e30a:	3301      	adds	r3, #1
    e30c:	001a      	movs	r2, r3
    e30e:	9303      	str	r3, [sp, #12]
    e310:	465b      	mov	r3, fp
    e312:	689b      	ldr	r3, [r3, #8]
    e314:	429a      	cmp	r2, r3
    e316:	dc00      	bgt.n	e31a <__gethex+0x2e6>
    e318:	e759      	b.n	e1ce <__gethex+0x19a>
    e31a:	9905      	ldr	r1, [sp, #20]
    e31c:	9806      	ldr	r0, [sp, #24]
    e31e:	f7fd fcff 	bl	bd20 <_Bfree>
    e322:	2300      	movs	r3, #0
    e324:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e326:	24a3      	movs	r4, #163	; 0xa3
    e328:	6013      	str	r3, [r2, #0]
    e32a:	e77e      	b.n	e22a <__gethex+0x1f6>
    e32c:	1c68      	adds	r0, r5, #1
    e32e:	2100      	movs	r1, #0
    e330:	e790      	b.n	e254 <__gethex+0x220>
    e332:	1965      	adds	r5, r4, r5
    e334:	782a      	ldrb	r2, [r5, #0]
    e336:	5cbb      	ldrb	r3, [r7, r2]
    e338:	2b00      	cmp	r3, #0
    e33a:	d100      	bne.n	e33e <__gethex+0x30a>
    e33c:	e769      	b.n	e212 <__gethex+0x1de>
    e33e:	002c      	movs	r4, r5
    e340:	2a30      	cmp	r2, #48	; 0x30
    e342:	d104      	bne.n	e34e <__gethex+0x31a>
    e344:	3401      	adds	r4, #1
    e346:	7823      	ldrb	r3, [r4, #0]
    e348:	2b30      	cmp	r3, #48	; 0x30
    e34a:	d0fb      	beq.n	e344 <__gethex+0x310>
    e34c:	5cfb      	ldrb	r3, [r7, r3]
    e34e:	4259      	negs	r1, r3
    e350:	4159      	adcs	r1, r3
    e352:	2201      	movs	r2, #1
    e354:	468a      	mov	sl, r1
    e356:	002e      	movs	r6, r5
    e358:	4690      	mov	r8, r2
    e35a:	e6a3      	b.n	e0a4 <__gethex+0x70>
    e35c:	1a5c      	subs	r4, r3, r1
    e35e:	42a5      	cmp	r5, r4
    e360:	dc53      	bgt.n	e40a <__gethex+0x3d6>
    e362:	465a      	mov	r2, fp
    e364:	68d2      	ldr	r2, [r2, #12]
    e366:	2a02      	cmp	r2, #2
    e368:	d100      	bne.n	e36c <__gethex+0x338>
    e36a:	e0ac      	b.n	e4c6 <__gethex+0x492>
    e36c:	2a03      	cmp	r2, #3
    e36e:	d100      	bne.n	e372 <__gethex+0x33e>
    e370:	e084      	b.n	e47c <__gethex+0x448>
    e372:	2a01      	cmp	r2, #1
    e374:	d100      	bne.n	e378 <__gethex+0x344>
    e376:	e097      	b.n	e4a8 <__gethex+0x474>
    e378:	9905      	ldr	r1, [sp, #20]
    e37a:	9806      	ldr	r0, [sp, #24]
    e37c:	f7fd fcd0 	bl	bd20 <_Bfree>
    e380:	2300      	movs	r3, #0
    e382:	9a14      	ldr	r2, [sp, #80]	; 0x50
    e384:	2450      	movs	r4, #80	; 0x50
    e386:	6013      	str	r3, [r2, #0]
    e388:	e74f      	b.n	e22a <__gethex+0x1f6>
    e38a:	2100      	movs	r1, #0
    e38c:	e760      	b.n	e250 <__gethex+0x21c>
    e38e:	46c0      	nop			; (mov r8, r8)
    e390:	000123ec 	.word	0x000123ec
    e394:	1b64      	subs	r4, r4, r5
    e396:	0021      	movs	r1, r4
    e398:	9805      	ldr	r0, [sp, #20]
    e39a:	f7fe f917 	bl	c5cc <__any_on>
    e39e:	1e06      	subs	r6, r0, #0
    e3a0:	d014      	beq.n	e3cc <__gethex+0x398>
    e3a2:	211f      	movs	r1, #31
    e3a4:	2301      	movs	r3, #1
    e3a6:	1e60      	subs	r0, r4, #1
    e3a8:	4001      	ands	r1, r0
    e3aa:	408b      	lsls	r3, r1
    e3ac:	1142      	asrs	r2, r0, #5
    e3ae:	9908      	ldr	r1, [sp, #32]
    e3b0:	0092      	lsls	r2, r2, #2
    e3b2:	588a      	ldr	r2, [r1, r2]
    e3b4:	2601      	movs	r6, #1
    e3b6:	421a      	tst	r2, r3
    e3b8:	d008      	beq.n	e3cc <__gethex+0x398>
    e3ba:	2801      	cmp	r0, #1
    e3bc:	dd72      	ble.n	e4a4 <__gethex+0x470>
    e3be:	1ea1      	subs	r1, r4, #2
    e3c0:	9805      	ldr	r0, [sp, #20]
    e3c2:	f7fe f903 	bl	c5cc <__any_on>
    e3c6:	2800      	cmp	r0, #0
    e3c8:	d06c      	beq.n	e4a4 <__gethex+0x470>
    e3ca:	2603      	movs	r6, #3
    e3cc:	0021      	movs	r1, r4
    e3ce:	9805      	ldr	r0, [sp, #20]
    e3d0:	f7ff fdda 	bl	df88 <rshift>
    e3d4:	9b03      	ldr	r3, [sp, #12]
    e3d6:	469c      	mov	ip, r3
    e3d8:	44a4      	add	ip, r4
    e3da:	4663      	mov	r3, ip
    e3dc:	9303      	str	r3, [sp, #12]
    e3de:	e6db      	b.n	e198 <__gethex+0x164>
    e3e0:	2200      	movs	r2, #0
    e3e2:	9203      	str	r2, [sp, #12]
    e3e4:	e675      	b.n	e0d2 <__gethex+0x9e>
    e3e6:	1b2c      	subs	r4, r5, r4
    e3e8:	0022      	movs	r2, r4
    e3ea:	9905      	ldr	r1, [sp, #20]
    e3ec:	9806      	ldr	r0, [sp, #24]
    e3ee:	f7fd fe8d 	bl	c10c <__lshift>
    e3f2:	0003      	movs	r3, r0
    e3f4:	9a03      	ldr	r2, [sp, #12]
    e3f6:	3314      	adds	r3, #20
    e3f8:	1b12      	subs	r2, r2, r4
    e3fa:	9005      	str	r0, [sp, #20]
    e3fc:	9203      	str	r2, [sp, #12]
    e3fe:	9308      	str	r3, [sp, #32]
    e400:	e6ca      	b.n	e198 <__gethex+0x164>
    e402:	2300      	movs	r3, #0
    e404:	3402      	adds	r4, #2
    e406:	4698      	mov	r8, r3
    e408:	e642      	b.n	e090 <__gethex+0x5c>
    e40a:	1e67      	subs	r7, r4, #1
    e40c:	2e00      	cmp	r6, #0
    e40e:	d133      	bne.n	e478 <__gethex+0x444>
    e410:	2f00      	cmp	r7, #0
    e412:	d004      	beq.n	e41e <__gethex+0x3ea>
    e414:	0039      	movs	r1, r7
    e416:	9805      	ldr	r0, [sp, #20]
    e418:	f7fe f8d8 	bl	c5cc <__any_on>
    e41c:	0006      	movs	r6, r0
    e41e:	231f      	movs	r3, #31
    e420:	117a      	asrs	r2, r7, #5
    e422:	401f      	ands	r7, r3
    e424:	3b1e      	subs	r3, #30
    e426:	40bb      	lsls	r3, r7
    e428:	9908      	ldr	r1, [sp, #32]
    e42a:	0092      	lsls	r2, r2, #2
    e42c:	588a      	ldr	r2, [r1, r2]
    e42e:	421a      	tst	r2, r3
    e430:	d001      	beq.n	e436 <__gethex+0x402>
    e432:	2302      	movs	r3, #2
    e434:	431e      	orrs	r6, r3
    e436:	0021      	movs	r1, r4
    e438:	9805      	ldr	r0, [sp, #20]
    e43a:	f7ff fda5 	bl	df88 <rshift>
    e43e:	465b      	mov	r3, fp
    e440:	685b      	ldr	r3, [r3, #4]
    e442:	1b2d      	subs	r5, r5, r4
    e444:	9303      	str	r3, [sp, #12]
    e446:	2402      	movs	r4, #2
    e448:	e6b3      	b.n	e1b2 <__gethex+0x17e>
    e44a:	9b02      	ldr	r3, [sp, #8]
    e44c:	18ee      	adds	r6, r5, r3
    e44e:	7833      	ldrb	r3, [r6, #0]
    e450:	0035      	movs	r5, r6
    e452:	5cfa      	ldrb	r2, [r7, r3]
    e454:	2a00      	cmp	r2, #0
    e456:	d100      	bne.n	e45a <__gethex+0x426>
    e458:	e638      	b.n	e0cc <__gethex+0x98>
    e45a:	3501      	adds	r5, #1
    e45c:	782b      	ldrb	r3, [r5, #0]
    e45e:	5cfa      	ldrb	r2, [r7, r3]
    e460:	2a00      	cmp	r2, #0
    e462:	d1fa      	bne.n	e45a <__gethex+0x426>
    e464:	e632      	b.n	e0cc <__gethex+0x98>
    e466:	2301      	movs	r3, #1
    e468:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e46a:	1a9b      	subs	r3, r3, r2
    e46c:	9315      	str	r3, [sp, #84]	; 0x54
    e46e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    e470:	2b00      	cmp	r3, #0
    e472:	d100      	bne.n	e476 <__gethex+0x442>
    e474:	e6a9      	b.n	e1ca <__gethex+0x196>
    e476:	e71b      	b.n	e2b0 <__gethex+0x27c>
    e478:	2601      	movs	r6, #1
    e47a:	e7d0      	b.n	e41e <__gethex+0x3ea>
    e47c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e47e:	2a00      	cmp	r2, #0
    e480:	d100      	bne.n	e484 <__gethex+0x450>
    e482:	e779      	b.n	e378 <__gethex+0x344>
    e484:	9a09      	ldr	r2, [sp, #36]	; 0x24
    e486:	9908      	ldr	r1, [sp, #32]
    e488:	6013      	str	r3, [r2, #0]
    e48a:	2301      	movs	r3, #1
    e48c:	9a05      	ldr	r2, [sp, #20]
    e48e:	2462      	movs	r4, #98	; 0x62
    e490:	6113      	str	r3, [r2, #16]
    e492:	600b      	str	r3, [r1, #0]
    e494:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e496:	601a      	str	r2, [r3, #0]
    e498:	e6c7      	b.n	e22a <__gethex+0x1f6>
    e49a:	9b08      	ldr	r3, [sp, #32]
    e49c:	469a      	mov	sl, r3
    e49e:	2300      	movs	r3, #0
    e4a0:	4699      	mov	r9, r3
    e4a2:	e663      	b.n	e16c <__gethex+0x138>
    e4a4:	2602      	movs	r6, #2
    e4a6:	e791      	b.n	e3cc <__gethex+0x398>
    e4a8:	42a5      	cmp	r5, r4
    e4aa:	d000      	beq.n	e4ae <__gethex+0x47a>
    e4ac:	e764      	b.n	e378 <__gethex+0x344>
    e4ae:	2d01      	cmp	r5, #1
    e4b0:	dde8      	ble.n	e484 <__gethex+0x450>
    e4b2:	1e69      	subs	r1, r5, #1
    e4b4:	9805      	ldr	r0, [sp, #20]
    e4b6:	f7fe f889 	bl	c5cc <__any_on>
    e4ba:	2800      	cmp	r0, #0
    e4bc:	d100      	bne.n	e4c0 <__gethex+0x48c>
    e4be:	e75b      	b.n	e378 <__gethex+0x344>
    e4c0:	465b      	mov	r3, fp
    e4c2:	685b      	ldr	r3, [r3, #4]
    e4c4:	e7de      	b.n	e484 <__gethex+0x450>
    e4c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    e4c8:	2a00      	cmp	r2, #0
    e4ca:	d0db      	beq.n	e484 <__gethex+0x450>
    e4cc:	e754      	b.n	e378 <__gethex+0x344>
    e4ce:	9b05      	ldr	r3, [sp, #20]
    e4d0:	689b      	ldr	r3, [r3, #8]
    e4d2:	9301      	str	r3, [sp, #4]
    e4d4:	429f      	cmp	r7, r3
    e4d6:	da23      	bge.n	e520 <__gethex+0x4ec>
    e4d8:	003b      	movs	r3, r7
    e4da:	9808      	ldr	r0, [sp, #32]
    e4dc:	9905      	ldr	r1, [sp, #20]
    e4de:	1c5a      	adds	r2, r3, #1
    e4e0:	468c      	mov	ip, r1
    e4e2:	610a      	str	r2, [r1, #16]
    e4e4:	2101      	movs	r1, #1
    e4e6:	3304      	adds	r3, #4
    e4e8:	009b      	lsls	r3, r3, #2
    e4ea:	4463      	add	r3, ip
    e4ec:	6059      	str	r1, [r3, #4]
    e4ee:	2c02      	cmp	r4, #2
    e4f0:	d003      	beq.n	e4fa <__gethex+0x4c6>
    e4f2:	4297      	cmp	r7, r2
    e4f4:	da00      	bge.n	e4f8 <__gethex+0x4c4>
    e4f6:	e702      	b.n	e2fe <__gethex+0x2ca>
    e4f8:	e6f2      	b.n	e2e0 <__gethex+0x2ac>
    e4fa:	465b      	mov	r3, fp
    e4fc:	681b      	ldr	r3, [r3, #0]
    e4fe:	2422      	movs	r4, #34	; 0x22
    e500:	3b01      	subs	r3, #1
    e502:	429d      	cmp	r5, r3
    e504:	d000      	beq.n	e508 <__gethex+0x4d4>
    e506:	e662      	b.n	e1ce <__gethex+0x19a>
    e508:	231f      	movs	r3, #31
    e50a:	116a      	asrs	r2, r5, #5
    e50c:	401d      	ands	r5, r3
    e50e:	3b1e      	subs	r3, #30
    e510:	40ab      	lsls	r3, r5
    e512:	0092      	lsls	r2, r2, #2
    e514:	5814      	ldr	r4, [r2, r0]
    e516:	4023      	ands	r3, r4
    e518:	425c      	negs	r4, r3
    e51a:	415c      	adcs	r4, r3
    e51c:	3421      	adds	r4, #33	; 0x21
    e51e:	e656      	b.n	e1ce <__gethex+0x19a>
    e520:	9b05      	ldr	r3, [sp, #20]
    e522:	685a      	ldr	r2, [r3, #4]
    e524:	9b06      	ldr	r3, [sp, #24]
    e526:	1c51      	adds	r1, r2, #1
    e528:	0018      	movs	r0, r3
    e52a:	4699      	mov	r9, r3
    e52c:	9201      	str	r2, [sp, #4]
    e52e:	f7fd fbcf 	bl	bcd0 <_Balloc>
    e532:	0006      	movs	r6, r0
    e534:	9b05      	ldr	r3, [sp, #20]
    e536:	300c      	adds	r0, #12
    e538:	691a      	ldr	r2, [r3, #16]
    e53a:	330c      	adds	r3, #12
    e53c:	9201      	str	r2, [sp, #4]
    e53e:	3202      	adds	r2, #2
    e540:	0019      	movs	r1, r3
    e542:	0092      	lsls	r2, r2, #2
    e544:	f7f8 ff94 	bl	7470 <memcpy>
    e548:	4648      	mov	r0, r9
    e54a:	9905      	ldr	r1, [sp, #20]
    e54c:	f7fd fbe8 	bl	bd20 <_Bfree>
    e550:	0030      	movs	r0, r6
    e552:	6933      	ldr	r3, [r6, #16]
    e554:	3014      	adds	r0, #20
    e556:	9605      	str	r6, [sp, #20]
    e558:	e7c0      	b.n	e4dc <__gethex+0x4a8>
    e55a:	46c0      	nop			; (mov r8, r8)

0000e55c <__match>:
    e55c:	b530      	push	{r4, r5, lr}
    e55e:	6802      	ldr	r2, [r0, #0]
    e560:	e008      	b.n	e574 <__match+0x18>
    e562:	7813      	ldrb	r3, [r2, #0]
    e564:	001d      	movs	r5, r3
    e566:	3d41      	subs	r5, #65	; 0x41
    e568:	2d19      	cmp	r5, #25
    e56a:	d800      	bhi.n	e56e <__match+0x12>
    e56c:	3320      	adds	r3, #32
    e56e:	3101      	adds	r1, #1
    e570:	42a3      	cmp	r3, r4
    e572:	d106      	bne.n	e582 <__match+0x26>
    e574:	780c      	ldrb	r4, [r1, #0]
    e576:	3201      	adds	r2, #1
    e578:	2c00      	cmp	r4, #0
    e57a:	d1f2      	bne.n	e562 <__match+0x6>
    e57c:	6002      	str	r2, [r0, #0]
    e57e:	2001      	movs	r0, #1
    e580:	bd30      	pop	{r4, r5, pc}
    e582:	2000      	movs	r0, #0
    e584:	e7fc      	b.n	e580 <__match+0x24>
    e586:	46c0      	nop			; (mov r8, r8)

0000e588 <__hexnan>:
    e588:	b5f0      	push	{r4, r5, r6, r7, lr}
    e58a:	4657      	mov	r7, sl
    e58c:	46de      	mov	lr, fp
    e58e:	464e      	mov	r6, r9
    e590:	4645      	mov	r5, r8
    e592:	4692      	mov	sl, r2
    e594:	680a      	ldr	r2, [r1, #0]
    e596:	211f      	movs	r1, #31
    e598:	b5e0      	push	{r5, r6, r7, lr}
    e59a:	1153      	asrs	r3, r2, #5
    e59c:	b085      	sub	sp, #20
    e59e:	009b      	lsls	r3, r3, #2
    e5a0:	4011      	ands	r1, r2
    e5a2:	9001      	str	r0, [sp, #4]
    e5a4:	4453      	add	r3, sl
    e5a6:	9103      	str	r1, [sp, #12]
    e5a8:	2900      	cmp	r1, #0
    e5aa:	d000      	beq.n	e5ae <__hexnan+0x26>
    e5ac:	3304      	adds	r3, #4
    e5ae:	3b04      	subs	r3, #4
    e5b0:	469b      	mov	fp, r3
    e5b2:	2300      	movs	r3, #0
    e5b4:	465a      	mov	r2, fp
    e5b6:	6013      	str	r3, [r2, #0]
    e5b8:	9b01      	ldr	r3, [sp, #4]
    e5ba:	465c      	mov	r4, fp
    e5bc:	6818      	ldr	r0, [r3, #0]
    e5be:	2300      	movs	r3, #0
    e5c0:	7841      	ldrb	r1, [r0, #1]
    e5c2:	9300      	str	r3, [sp, #0]
    e5c4:	4b59      	ldr	r3, [pc, #356]	; (e72c <__hexnan+0x1a4>)
    e5c6:	46d8      	mov	r8, fp
    e5c8:	2500      	movs	r5, #0
    e5ca:	2200      	movs	r2, #0
    e5cc:	4699      	mov	r9, r3
    e5ce:	9402      	str	r4, [sp, #8]
    e5d0:	1c46      	adds	r6, r0, #1
    e5d2:	2900      	cmp	r1, #0
    e5d4:	d036      	beq.n	e644 <__hexnan+0xbc>
    e5d6:	464b      	mov	r3, r9
    e5d8:	5c5b      	ldrb	r3, [r3, r1]
    e5da:	2b00      	cmp	r3, #0
    e5dc:	d158      	bne.n	e690 <__hexnan+0x108>
    e5de:	2920      	cmp	r1, #32
    e5e0:	d868      	bhi.n	e6b4 <__hexnan+0x12c>
    e5e2:	9b00      	ldr	r3, [sp, #0]
    e5e4:	429a      	cmp	r2, r3
    e5e6:	dd28      	ble.n	e63a <__hexnan+0xb2>
    e5e8:	4544      	cmp	r4, r8
    e5ea:	d21c      	bcs.n	e626 <__hexnan+0x9e>
    e5ec:	2d07      	cmp	r5, #7
    e5ee:	dc1a      	bgt.n	e626 <__hexnan+0x9e>
    e5f0:	2308      	movs	r3, #8
    e5f2:	1b5d      	subs	r5, r3, r5
    e5f4:	00ad      	lsls	r5, r5, #2
    e5f6:	3318      	adds	r3, #24
    e5f8:	1b5b      	subs	r3, r3, r5
    e5fa:	469c      	mov	ip, r3
    e5fc:	4661      	mov	r1, ip
    e5fe:	6823      	ldr	r3, [r4, #0]
    e600:	0020      	movs	r0, r4
    e602:	4647      	mov	r7, r8
    e604:	4694      	mov	ip, r2
    e606:	46a0      	mov	r8, r4
    e608:	000a      	movs	r2, r1
    e60a:	001c      	movs	r4, r3
    e60c:	6841      	ldr	r1, [r0, #4]
    e60e:	000b      	movs	r3, r1
    e610:	4093      	lsls	r3, r2
    e612:	40e9      	lsrs	r1, r5
    e614:	4323      	orrs	r3, r4
    e616:	c008      	stmia	r0!, {r3}
    e618:	000c      	movs	r4, r1
    e61a:	6001      	str	r1, [r0, #0]
    e61c:	4287      	cmp	r7, r0
    e61e:	d8f5      	bhi.n	e60c <__hexnan+0x84>
    e620:	4644      	mov	r4, r8
    e622:	4662      	mov	r2, ip
    e624:	46b8      	mov	r8, r7
    e626:	2508      	movs	r5, #8
    e628:	4554      	cmp	r4, sl
    e62a:	d906      	bls.n	e63a <__hexnan+0xb2>
    e62c:	1f23      	subs	r3, r4, #4
    e62e:	2100      	movs	r1, #0
    e630:	4698      	mov	r8, r3
    e632:	001c      	movs	r4, r3
    e634:	2500      	movs	r5, #0
    e636:	6019      	str	r1, [r3, #0]
    e638:	9200      	str	r2, [sp, #0]
    e63a:	0030      	movs	r0, r6
    e63c:	7841      	ldrb	r1, [r0, #1]
    e63e:	1c46      	adds	r6, r0, #1
    e640:	2900      	cmp	r1, #0
    e642:	d1c8      	bne.n	e5d6 <__hexnan+0x4e>
    e644:	9b02      	ldr	r3, [sp, #8]
    e646:	469c      	mov	ip, r3
    e648:	2a00      	cmp	r2, #0
    e64a:	d037      	beq.n	e6bc <__hexnan+0x134>
    e64c:	4544      	cmp	r4, r8
    e64e:	d201      	bcs.n	e654 <__hexnan+0xcc>
    e650:	2d07      	cmp	r5, #7
    e652:	dd57      	ble.n	e704 <__hexnan+0x17c>
    e654:	4554      	cmp	r4, sl
    e656:	d939      	bls.n	e6cc <__hexnan+0x144>
    e658:	4653      	mov	r3, sl
    e65a:	4659      	mov	r1, fp
    e65c:	cc04      	ldmia	r4!, {r2}
    e65e:	601a      	str	r2, [r3, #0]
    e660:	3304      	adds	r3, #4
    e662:	42a1      	cmp	r1, r4
    e664:	d2fa      	bcs.n	e65c <__hexnan+0xd4>
    e666:	2200      	movs	r2, #0
    e668:	c304      	stmia	r3!, {r2}
    e66a:	4299      	cmp	r1, r3
    e66c:	d2fc      	bcs.n	e668 <__hexnan+0xe0>
    e66e:	468b      	mov	fp, r1
    e670:	680b      	ldr	r3, [r1, #0]
    e672:	2b00      	cmp	r3, #0
    e674:	d10a      	bne.n	e68c <__hexnan+0x104>
    e676:	4663      	mov	r3, ip
    e678:	4652      	mov	r2, sl
    e67a:	45da      	cmp	sl, fp
    e67c:	d102      	bne.n	e684 <__hexnan+0xfc>
    e67e:	e035      	b.n	e6ec <__hexnan+0x164>
    e680:	429a      	cmp	r2, r3
    e682:	d032      	beq.n	e6ea <__hexnan+0x162>
    e684:	3b04      	subs	r3, #4
    e686:	6819      	ldr	r1, [r3, #0]
    e688:	2900      	cmp	r1, #0
    e68a:	d0f9      	beq.n	e680 <__hexnan+0xf8>
    e68c:	2005      	movs	r0, #5
    e68e:	e016      	b.n	e6be <__hexnan+0x136>
    e690:	3501      	adds	r5, #1
    e692:	3201      	adds	r2, #1
    e694:	2d08      	cmp	r5, #8
    e696:	dd05      	ble.n	e6a4 <__hexnan+0x11c>
    e698:	4554      	cmp	r4, sl
    e69a:	d9ce      	bls.n	e63a <__hexnan+0xb2>
    e69c:	2100      	movs	r1, #0
    e69e:	2501      	movs	r5, #1
    e6a0:	3c04      	subs	r4, #4
    e6a2:	6021      	str	r1, [r4, #0]
    e6a4:	200f      	movs	r0, #15
    e6a6:	6821      	ldr	r1, [r4, #0]
    e6a8:	4003      	ands	r3, r0
    e6aa:	0109      	lsls	r1, r1, #4
    e6ac:	430b      	orrs	r3, r1
    e6ae:	6023      	str	r3, [r4, #0]
    e6b0:	0030      	movs	r0, r6
    e6b2:	e7c3      	b.n	e63c <__hexnan+0xb4>
    e6b4:	9b02      	ldr	r3, [sp, #8]
    e6b6:	469c      	mov	ip, r3
    e6b8:	2929      	cmp	r1, #41	; 0x29
    e6ba:	d01f      	beq.n	e6fc <__hexnan+0x174>
    e6bc:	2004      	movs	r0, #4
    e6be:	b005      	add	sp, #20
    e6c0:	bc3c      	pop	{r2, r3, r4, r5}
    e6c2:	4690      	mov	r8, r2
    e6c4:	4699      	mov	r9, r3
    e6c6:	46a2      	mov	sl, r4
    e6c8:	46ab      	mov	fp, r5
    e6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6cc:	9b03      	ldr	r3, [sp, #12]
    e6ce:	2b00      	cmp	r3, #0
    e6d0:	d011      	beq.n	e6f6 <__hexnan+0x16e>
    e6d2:	2220      	movs	r2, #32
    e6d4:	9b03      	ldr	r3, [sp, #12]
    e6d6:	1ad2      	subs	r2, r2, r3
    e6d8:	2301      	movs	r3, #1
    e6da:	425b      	negs	r3, r3
    e6dc:	40d3      	lsrs	r3, r2
    e6de:	465a      	mov	r2, fp
    e6e0:	6812      	ldr	r2, [r2, #0]
    e6e2:	4013      	ands	r3, r2
    e6e4:	465a      	mov	r2, fp
    e6e6:	6013      	str	r3, [r2, #0]
    e6e8:	e7c3      	b.n	e672 <__hexnan+0xea>
    e6ea:	4692      	mov	sl, r2
    e6ec:	2301      	movs	r3, #1
    e6ee:	4652      	mov	r2, sl
    e6f0:	2005      	movs	r0, #5
    e6f2:	6013      	str	r3, [r2, #0]
    e6f4:	e7e3      	b.n	e6be <__hexnan+0x136>
    e6f6:	465b      	mov	r3, fp
    e6f8:	681b      	ldr	r3, [r3, #0]
    e6fa:	e7ba      	b.n	e672 <__hexnan+0xea>
    e6fc:	9b01      	ldr	r3, [sp, #4]
    e6fe:	3002      	adds	r0, #2
    e700:	6018      	str	r0, [r3, #0]
    e702:	e7a1      	b.n	e648 <__hexnan+0xc0>
    e704:	2308      	movs	r3, #8
    e706:	1b5d      	subs	r5, r3, r5
    e708:	6823      	ldr	r3, [r4, #0]
    e70a:	2620      	movs	r6, #32
    e70c:	0021      	movs	r1, r4
    e70e:	4647      	mov	r7, r8
    e710:	001a      	movs	r2, r3
    e712:	00ad      	lsls	r5, r5, #2
    e714:	1b76      	subs	r6, r6, r5
    e716:	6848      	ldr	r0, [r1, #4]
    e718:	0003      	movs	r3, r0
    e71a:	40b3      	lsls	r3, r6
    e71c:	4313      	orrs	r3, r2
    e71e:	0002      	movs	r2, r0
    e720:	40ea      	lsrs	r2, r5
    e722:	c108      	stmia	r1!, {r3}
    e724:	600a      	str	r2, [r1, #0]
    e726:	428f      	cmp	r7, r1
    e728:	d8f5      	bhi.n	e716 <__hexnan+0x18e>
    e72a:	e793      	b.n	e654 <__hexnan+0xcc>
    e72c:	000123ec 	.word	0x000123ec

0000e730 <memmove>:
    e730:	b5f0      	push	{r4, r5, r6, r7, lr}
    e732:	4288      	cmp	r0, r1
    e734:	d90a      	bls.n	e74c <memmove+0x1c>
    e736:	188b      	adds	r3, r1, r2
    e738:	4298      	cmp	r0, r3
    e73a:	d207      	bcs.n	e74c <memmove+0x1c>
    e73c:	1e53      	subs	r3, r2, #1
    e73e:	2a00      	cmp	r2, #0
    e740:	d003      	beq.n	e74a <memmove+0x1a>
    e742:	5cca      	ldrb	r2, [r1, r3]
    e744:	54c2      	strb	r2, [r0, r3]
    e746:	3b01      	subs	r3, #1
    e748:	d2fb      	bcs.n	e742 <memmove+0x12>
    e74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e74c:	0005      	movs	r5, r0
    e74e:	2a0f      	cmp	r2, #15
    e750:	d808      	bhi.n	e764 <memmove+0x34>
    e752:	2a00      	cmp	r2, #0
    e754:	d0f9      	beq.n	e74a <memmove+0x1a>
    e756:	2300      	movs	r3, #0
    e758:	5ccc      	ldrb	r4, [r1, r3]
    e75a:	54ec      	strb	r4, [r5, r3]
    e75c:	3301      	adds	r3, #1
    e75e:	4293      	cmp	r3, r2
    e760:	d1fa      	bne.n	e758 <memmove+0x28>
    e762:	e7f2      	b.n	e74a <memmove+0x1a>
    e764:	000b      	movs	r3, r1
    e766:	4303      	orrs	r3, r0
    e768:	079b      	lsls	r3, r3, #30
    e76a:	d12d      	bne.n	e7c8 <memmove+0x98>
    e76c:	0015      	movs	r5, r2
    e76e:	000c      	movs	r4, r1
    e770:	0003      	movs	r3, r0
    e772:	3d10      	subs	r5, #16
    e774:	092f      	lsrs	r7, r5, #4
    e776:	3701      	adds	r7, #1
    e778:	013f      	lsls	r7, r7, #4
    e77a:	19c7      	adds	r7, r0, r7
    e77c:	6826      	ldr	r6, [r4, #0]
    e77e:	601e      	str	r6, [r3, #0]
    e780:	6866      	ldr	r6, [r4, #4]
    e782:	605e      	str	r6, [r3, #4]
    e784:	68a6      	ldr	r6, [r4, #8]
    e786:	609e      	str	r6, [r3, #8]
    e788:	68e6      	ldr	r6, [r4, #12]
    e78a:	3410      	adds	r4, #16
    e78c:	60de      	str	r6, [r3, #12]
    e78e:	3310      	adds	r3, #16
    e790:	429f      	cmp	r7, r3
    e792:	d1f3      	bne.n	e77c <memmove+0x4c>
    e794:	240f      	movs	r4, #15
    e796:	43a5      	bics	r5, r4
    e798:	3510      	adds	r5, #16
    e79a:	1949      	adds	r1, r1, r5
    e79c:	4014      	ands	r4, r2
    e79e:	1945      	adds	r5, r0, r5
    e7a0:	2c03      	cmp	r4, #3
    e7a2:	d913      	bls.n	e7cc <memmove+0x9c>
    e7a4:	2300      	movs	r3, #0
    e7a6:	1f27      	subs	r7, r4, #4
    e7a8:	08be      	lsrs	r6, r7, #2
    e7aa:	3601      	adds	r6, #1
    e7ac:	00b6      	lsls	r6, r6, #2
    e7ae:	58cc      	ldr	r4, [r1, r3]
    e7b0:	50ec      	str	r4, [r5, r3]
    e7b2:	3304      	adds	r3, #4
    e7b4:	42b3      	cmp	r3, r6
    e7b6:	d1fa      	bne.n	e7ae <memmove+0x7e>
    e7b8:	2603      	movs	r6, #3
    e7ba:	43b7      	bics	r7, r6
    e7bc:	1d3c      	adds	r4, r7, #4
    e7be:	1909      	adds	r1, r1, r4
    e7c0:	192d      	adds	r5, r5, r4
    e7c2:	4032      	ands	r2, r6
    e7c4:	d1c7      	bne.n	e756 <memmove+0x26>
    e7c6:	e7c0      	b.n	e74a <memmove+0x1a>
    e7c8:	0005      	movs	r5, r0
    e7ca:	e7c4      	b.n	e756 <memmove+0x26>
    e7cc:	0022      	movs	r2, r4
    e7ce:	e7c0      	b.n	e752 <memmove+0x22>

0000e7d0 <_realloc_r>:
    e7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7d2:	464e      	mov	r6, r9
    e7d4:	4645      	mov	r5, r8
    e7d6:	46de      	mov	lr, fp
    e7d8:	4657      	mov	r7, sl
    e7da:	b5e0      	push	{r5, r6, r7, lr}
    e7dc:	b085      	sub	sp, #20
    e7de:	9001      	str	r0, [sp, #4]
    e7e0:	000e      	movs	r6, r1
    e7e2:	0015      	movs	r5, r2
    e7e4:	2900      	cmp	r1, #0
    e7e6:	d100      	bne.n	e7ea <_realloc_r+0x1a>
    e7e8:	e09e      	b.n	e928 <_realloc_r+0x158>
    e7ea:	0037      	movs	r7, r6
    e7ec:	9801      	ldr	r0, [sp, #4]
    e7ee:	3f08      	subs	r7, #8
    e7f0:	f7fd fa5e 	bl	bcb0 <__malloc_lock>
    e7f4:	687a      	ldr	r2, [r7, #4]
    e7f6:	2303      	movs	r3, #3
    e7f8:	0014      	movs	r4, r2
    e7fa:	439c      	bics	r4, r3
    e7fc:	002b      	movs	r3, r5
    e7fe:	330b      	adds	r3, #11
    e800:	46b9      	mov	r9, r7
    e802:	2b16      	cmp	r3, #22
    e804:	d847      	bhi.n	e896 <_realloc_r+0xc6>
    e806:	2110      	movs	r1, #16
    e808:	2310      	movs	r3, #16
    e80a:	4688      	mov	r8, r1
    e80c:	4545      	cmp	r5, r8
    e80e:	d846      	bhi.n	e89e <_realloc_r+0xce>
    e810:	429c      	cmp	r4, r3
    e812:	da49      	bge.n	e8a8 <_realloc_r+0xd8>
    e814:	49cc      	ldr	r1, [pc, #816]	; (eb48 <_realloc_r+0x378>)
    e816:	1938      	adds	r0, r7, r4
    e818:	468b      	mov	fp, r1
    e81a:	6889      	ldr	r1, [r1, #8]
    e81c:	9002      	str	r0, [sp, #8]
    e81e:	4288      	cmp	r0, r1
    e820:	d100      	bne.n	e824 <_realloc_r+0x54>
    e822:	e0c2      	b.n	e9aa <_realloc_r+0x1da>
    e824:	2101      	movs	r1, #1
    e826:	468a      	mov	sl, r1
    e828:	6840      	ldr	r0, [r0, #4]
    e82a:	0001      	movs	r1, r0
    e82c:	9003      	str	r0, [sp, #12]
    e82e:	4650      	mov	r0, sl
    e830:	4381      	bics	r1, r0
    e832:	468c      	mov	ip, r1
    e834:	9902      	ldr	r1, [sp, #8]
    e836:	468b      	mov	fp, r1
    e838:	44dc      	add	ip, fp
    e83a:	4661      	mov	r1, ip
    e83c:	6849      	ldr	r1, [r1, #4]
    e83e:	4201      	tst	r1, r0
    e840:	d04d      	beq.n	e8de <_realloc_r+0x10e>
    e842:	4210      	tst	r0, r2
    e844:	d100      	bne.n	e848 <_realloc_r+0x78>
    e846:	e0a2      	b.n	e98e <_realloc_r+0x1be>
    e848:	0029      	movs	r1, r5
    e84a:	9801      	ldr	r0, [sp, #4]
    e84c:	f7fc fef4 	bl	b638 <_malloc_r>
    e850:	1e05      	subs	r5, r0, #0
    e852:	d039      	beq.n	e8c8 <_realloc_r+0xf8>
    e854:	2301      	movs	r3, #1
    e856:	0002      	movs	r2, r0
    e858:	6879      	ldr	r1, [r7, #4]
    e85a:	3a08      	subs	r2, #8
    e85c:	4399      	bics	r1, r3
    e85e:	187f      	adds	r7, r7, r1
    e860:	42ba      	cmp	r2, r7
    e862:	d100      	bne.n	e866 <_realloc_r+0x96>
    e864:	e12e      	b.n	eac4 <_realloc_r+0x2f4>
    e866:	1f22      	subs	r2, r4, #4
    e868:	2a24      	cmp	r2, #36	; 0x24
    e86a:	d900      	bls.n	e86e <_realloc_r+0x9e>
    e86c:	e114      	b.n	ea98 <_realloc_r+0x2c8>
    e86e:	2a13      	cmp	r2, #19
    e870:	d900      	bls.n	e874 <_realloc_r+0xa4>
    e872:	e0e8      	b.n	ea46 <_realloc_r+0x276>
    e874:	0003      	movs	r3, r0
    e876:	0032      	movs	r2, r6
    e878:	6811      	ldr	r1, [r2, #0]
    e87a:	6019      	str	r1, [r3, #0]
    e87c:	6851      	ldr	r1, [r2, #4]
    e87e:	6059      	str	r1, [r3, #4]
    e880:	6892      	ldr	r2, [r2, #8]
    e882:	609a      	str	r2, [r3, #8]
    e884:	9c01      	ldr	r4, [sp, #4]
    e886:	0031      	movs	r1, r6
    e888:	0020      	movs	r0, r4
    e88a:	f7fc fdb5 	bl	b3f8 <_free_r>
    e88e:	0020      	movs	r0, r4
    e890:	f7fd fa16 	bl	bcc0 <__malloc_unlock>
    e894:	e01b      	b.n	e8ce <_realloc_r+0xfe>
    e896:	2107      	movs	r1, #7
    e898:	438b      	bics	r3, r1
    e89a:	4698      	mov	r8, r3
    e89c:	d5b6      	bpl.n	e80c <_realloc_r+0x3c>
    e89e:	230c      	movs	r3, #12
    e8a0:	9a01      	ldr	r2, [sp, #4]
    e8a2:	2500      	movs	r5, #0
    e8a4:	6013      	str	r3, [r2, #0]
    e8a6:	e012      	b.n	e8ce <_realloc_r+0xfe>
    e8a8:	0035      	movs	r5, r6
    e8aa:	4643      	mov	r3, r8
    e8ac:	1ae3      	subs	r3, r4, r3
    e8ae:	2b0f      	cmp	r3, #15
    e8b0:	d825      	bhi.n	e8fe <_realloc_r+0x12e>
    e8b2:	464b      	mov	r3, r9
    e8b4:	2201      	movs	r2, #1
    e8b6:	4649      	mov	r1, r9
    e8b8:	685b      	ldr	r3, [r3, #4]
    e8ba:	4013      	ands	r3, r2
    e8bc:	4323      	orrs	r3, r4
    e8be:	604b      	str	r3, [r1, #4]
    e8c0:	444c      	add	r4, r9
    e8c2:	6863      	ldr	r3, [r4, #4]
    e8c4:	431a      	orrs	r2, r3
    e8c6:	6062      	str	r2, [r4, #4]
    e8c8:	9801      	ldr	r0, [sp, #4]
    e8ca:	f7fd f9f9 	bl	bcc0 <__malloc_unlock>
    e8ce:	0028      	movs	r0, r5
    e8d0:	b005      	add	sp, #20
    e8d2:	bc3c      	pop	{r2, r3, r4, r5}
    e8d4:	4690      	mov	r8, r2
    e8d6:	4699      	mov	r9, r3
    e8d8:	46a2      	mov	sl, r4
    e8da:	46ab      	mov	fp, r5
    e8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8de:	2103      	movs	r1, #3
    e8e0:	9803      	ldr	r0, [sp, #12]
    e8e2:	468c      	mov	ip, r1
    e8e4:	4388      	bics	r0, r1
    e8e6:	1821      	adds	r1, r4, r0
    e8e8:	468b      	mov	fp, r1
    e8ea:	4299      	cmp	r1, r3
    e8ec:	db21      	blt.n	e932 <_realloc_r+0x162>
    e8ee:	9a02      	ldr	r2, [sp, #8]
    e8f0:	0035      	movs	r5, r6
    e8f2:	68d3      	ldr	r3, [r2, #12]
    e8f4:	6892      	ldr	r2, [r2, #8]
    e8f6:	465c      	mov	r4, fp
    e8f8:	60d3      	str	r3, [r2, #12]
    e8fa:	609a      	str	r2, [r3, #8]
    e8fc:	e7d5      	b.n	e8aa <_realloc_r+0xda>
    e8fe:	464a      	mov	r2, r9
    e900:	2001      	movs	r0, #1
    e902:	4646      	mov	r6, r8
    e904:	6852      	ldr	r2, [r2, #4]
    e906:	4649      	mov	r1, r9
    e908:	4002      	ands	r2, r0
    e90a:	4332      	orrs	r2, r6
    e90c:	464e      	mov	r6, r9
    e90e:	4441      	add	r1, r8
    e910:	4303      	orrs	r3, r0
    e912:	6072      	str	r2, [r6, #4]
    e914:	444c      	add	r4, r9
    e916:	604b      	str	r3, [r1, #4]
    e918:	6863      	ldr	r3, [r4, #4]
    e91a:	3108      	adds	r1, #8
    e91c:	4318      	orrs	r0, r3
    e91e:	6060      	str	r0, [r4, #4]
    e920:	9801      	ldr	r0, [sp, #4]
    e922:	f7fc fd69 	bl	b3f8 <_free_r>
    e926:	e7cf      	b.n	e8c8 <_realloc_r+0xf8>
    e928:	0011      	movs	r1, r2
    e92a:	f7fc fe85 	bl	b638 <_malloc_r>
    e92e:	0005      	movs	r5, r0
    e930:	e7cd      	b.n	e8ce <_realloc_r+0xfe>
    e932:	4651      	mov	r1, sl
    e934:	4211      	tst	r1, r2
    e936:	d000      	beq.n	e93a <_realloc_r+0x16a>
    e938:	e786      	b.n	e848 <_realloc_r+0x78>
    e93a:	4661      	mov	r1, ip
    e93c:	683a      	ldr	r2, [r7, #0]
    e93e:	1aba      	subs	r2, r7, r2
    e940:	4692      	mov	sl, r2
    e942:	6852      	ldr	r2, [r2, #4]
    e944:	438a      	bics	r2, r1
    e946:	1880      	adds	r0, r0, r2
    e948:	4683      	mov	fp, r0
    e94a:	44a3      	add	fp, r4
    e94c:	459b      	cmp	fp, r3
    e94e:	db26      	blt.n	e99e <_realloc_r+0x1ce>
    e950:	9a02      	ldr	r2, [sp, #8]
    e952:	68d3      	ldr	r3, [r2, #12]
    e954:	6892      	ldr	r2, [r2, #8]
    e956:	60d3      	str	r3, [r2, #12]
    e958:	609a      	str	r2, [r3, #8]
    e95a:	4653      	mov	r3, sl
    e95c:	4652      	mov	r2, sl
    e95e:	4655      	mov	r5, sl
    e960:	6892      	ldr	r2, [r2, #8]
    e962:	68db      	ldr	r3, [r3, #12]
    e964:	3508      	adds	r5, #8
    e966:	60d3      	str	r3, [r2, #12]
    e968:	609a      	str	r2, [r3, #8]
    e96a:	1f22      	subs	r2, r4, #4
    e96c:	2a24      	cmp	r2, #36	; 0x24
    e96e:	d900      	bls.n	e972 <_realloc_r+0x1a2>
    e970:	e096      	b.n	eaa0 <_realloc_r+0x2d0>
    e972:	2a13      	cmp	r2, #19
    e974:	d972      	bls.n	ea5c <_realloc_r+0x28c>
    e976:	4653      	mov	r3, sl
    e978:	6831      	ldr	r1, [r6, #0]
    e97a:	6099      	str	r1, [r3, #8]
    e97c:	6871      	ldr	r1, [r6, #4]
    e97e:	60d9      	str	r1, [r3, #12]
    e980:	2a1b      	cmp	r2, #27
    e982:	d900      	bls.n	e986 <_realloc_r+0x1b6>
    e984:	e0a4      	b.n	ead0 <_realloc_r+0x300>
    e986:	0032      	movs	r2, r6
    e988:	3310      	adds	r3, #16
    e98a:	3208      	adds	r2, #8
    e98c:	e068      	b.n	ea60 <_realloc_r+0x290>
    e98e:	683a      	ldr	r2, [r7, #0]
    e990:	1aba      	subs	r2, r7, r2
    e992:	4692      	mov	sl, r2
    e994:	4651      	mov	r1, sl
    e996:	2203      	movs	r2, #3
    e998:	6849      	ldr	r1, [r1, #4]
    e99a:	4391      	bics	r1, r2
    e99c:	000a      	movs	r2, r1
    e99e:	4693      	mov	fp, r2
    e9a0:	44a3      	add	fp, r4
    e9a2:	459b      	cmp	fp, r3
    e9a4:	da00      	bge.n	e9a8 <_realloc_r+0x1d8>
    e9a6:	e74f      	b.n	e848 <_realloc_r+0x78>
    e9a8:	e7d7      	b.n	e95a <_realloc_r+0x18a>
    e9aa:	2003      	movs	r0, #3
    e9ac:	9902      	ldr	r1, [sp, #8]
    e9ae:	4684      	mov	ip, r0
    e9b0:	6849      	ldr	r1, [r1, #4]
    e9b2:	4381      	bics	r1, r0
    e9b4:	4640      	mov	r0, r8
    e9b6:	1909      	adds	r1, r1, r4
    e9b8:	3010      	adds	r0, #16
    e9ba:	9002      	str	r0, [sp, #8]
    e9bc:	4281      	cmp	r1, r0
    e9be:	da58      	bge.n	ea72 <_realloc_r+0x2a2>
    e9c0:	07d2      	lsls	r2, r2, #31
    e9c2:	d500      	bpl.n	e9c6 <_realloc_r+0x1f6>
    e9c4:	e740      	b.n	e848 <_realloc_r+0x78>
    e9c6:	4660      	mov	r0, ip
    e9c8:	683a      	ldr	r2, [r7, #0]
    e9ca:	1aba      	subs	r2, r7, r2
    e9cc:	4692      	mov	sl, r2
    e9ce:	6852      	ldr	r2, [r2, #4]
    e9d0:	4382      	bics	r2, r0
    e9d2:	9802      	ldr	r0, [sp, #8]
    e9d4:	1851      	adds	r1, r2, r1
    e9d6:	9103      	str	r1, [sp, #12]
    e9d8:	4288      	cmp	r0, r1
    e9da:	dce0      	bgt.n	e99e <_realloc_r+0x1ce>
    e9dc:	4653      	mov	r3, sl
    e9de:	4652      	mov	r2, sl
    e9e0:	4655      	mov	r5, sl
    e9e2:	6892      	ldr	r2, [r2, #8]
    e9e4:	68db      	ldr	r3, [r3, #12]
    e9e6:	3508      	adds	r5, #8
    e9e8:	60d3      	str	r3, [r2, #12]
    e9ea:	609a      	str	r2, [r3, #8]
    e9ec:	1f22      	subs	r2, r4, #4
    e9ee:	2a24      	cmp	r2, #36	; 0x24
    e9f0:	d900      	bls.n	e9f4 <_realloc_r+0x224>
    e9f2:	e08e      	b.n	eb12 <_realloc_r+0x342>
    e9f4:	2a13      	cmp	r2, #19
    e9f6:	d800      	bhi.n	e9fa <_realloc_r+0x22a>
    e9f8:	e088      	b.n	eb0c <_realloc_r+0x33c>
    e9fa:	4653      	mov	r3, sl
    e9fc:	6831      	ldr	r1, [r6, #0]
    e9fe:	6099      	str	r1, [r3, #8]
    ea00:	6871      	ldr	r1, [r6, #4]
    ea02:	60d9      	str	r1, [r3, #12]
    ea04:	2a1b      	cmp	r2, #27
    ea06:	d900      	bls.n	ea0a <_realloc_r+0x23a>
    ea08:	e088      	b.n	eb1c <_realloc_r+0x34c>
    ea0a:	0032      	movs	r2, r6
    ea0c:	3310      	adds	r3, #16
    ea0e:	3208      	adds	r2, #8
    ea10:	6811      	ldr	r1, [r2, #0]
    ea12:	6019      	str	r1, [r3, #0]
    ea14:	6851      	ldr	r1, [r2, #4]
    ea16:	6059      	str	r1, [r3, #4]
    ea18:	6892      	ldr	r2, [r2, #8]
    ea1a:	609a      	str	r2, [r3, #8]
    ea1c:	4651      	mov	r1, sl
    ea1e:	465b      	mov	r3, fp
    ea20:	4642      	mov	r2, r8
    ea22:	4441      	add	r1, r8
    ea24:	6099      	str	r1, [r3, #8]
    ea26:	9b03      	ldr	r3, [sp, #12]
    ea28:	9801      	ldr	r0, [sp, #4]
    ea2a:	1a9a      	subs	r2, r3, r2
    ea2c:	2301      	movs	r3, #1
    ea2e:	431a      	orrs	r2, r3
    ea30:	604a      	str	r2, [r1, #4]
    ea32:	4652      	mov	r2, sl
    ea34:	6852      	ldr	r2, [r2, #4]
    ea36:	4013      	ands	r3, r2
    ea38:	4642      	mov	r2, r8
    ea3a:	4313      	orrs	r3, r2
    ea3c:	4652      	mov	r2, sl
    ea3e:	6053      	str	r3, [r2, #4]
    ea40:	f7fd f93e 	bl	bcc0 <__malloc_unlock>
    ea44:	e743      	b.n	e8ce <_realloc_r+0xfe>
    ea46:	6833      	ldr	r3, [r6, #0]
    ea48:	6003      	str	r3, [r0, #0]
    ea4a:	6873      	ldr	r3, [r6, #4]
    ea4c:	6043      	str	r3, [r0, #4]
    ea4e:	2a1b      	cmp	r2, #27
    ea50:	d82d      	bhi.n	eaae <_realloc_r+0x2de>
    ea52:	0003      	movs	r3, r0
    ea54:	0032      	movs	r2, r6
    ea56:	3308      	adds	r3, #8
    ea58:	3208      	adds	r2, #8
    ea5a:	e70d      	b.n	e878 <_realloc_r+0xa8>
    ea5c:	002b      	movs	r3, r5
    ea5e:	0032      	movs	r2, r6
    ea60:	6811      	ldr	r1, [r2, #0]
    ea62:	465c      	mov	r4, fp
    ea64:	6019      	str	r1, [r3, #0]
    ea66:	6851      	ldr	r1, [r2, #4]
    ea68:	46d1      	mov	r9, sl
    ea6a:	6059      	str	r1, [r3, #4]
    ea6c:	6892      	ldr	r2, [r2, #8]
    ea6e:	609a      	str	r2, [r3, #8]
    ea70:	e71b      	b.n	e8aa <_realloc_r+0xda>
    ea72:	4643      	mov	r3, r8
    ea74:	18fa      	adds	r2, r7, r3
    ea76:	465b      	mov	r3, fp
    ea78:	609a      	str	r2, [r3, #8]
    ea7a:	4643      	mov	r3, r8
    ea7c:	1ac9      	subs	r1, r1, r3
    ea7e:	2301      	movs	r3, #1
    ea80:	4319      	orrs	r1, r3
    ea82:	6051      	str	r1, [r2, #4]
    ea84:	687a      	ldr	r2, [r7, #4]
    ea86:	9801      	ldr	r0, [sp, #4]
    ea88:	4013      	ands	r3, r2
    ea8a:	4642      	mov	r2, r8
    ea8c:	4313      	orrs	r3, r2
    ea8e:	607b      	str	r3, [r7, #4]
    ea90:	f7fd f916 	bl	bcc0 <__malloc_unlock>
    ea94:	0035      	movs	r5, r6
    ea96:	e71a      	b.n	e8ce <_realloc_r+0xfe>
    ea98:	0031      	movs	r1, r6
    ea9a:	f7ff fe49 	bl	e730 <memmove>
    ea9e:	e6f1      	b.n	e884 <_realloc_r+0xb4>
    eaa0:	0031      	movs	r1, r6
    eaa2:	0028      	movs	r0, r5
    eaa4:	f7ff fe44 	bl	e730 <memmove>
    eaa8:	465c      	mov	r4, fp
    eaaa:	46d1      	mov	r9, sl
    eaac:	e6fd      	b.n	e8aa <_realloc_r+0xda>
    eaae:	68b3      	ldr	r3, [r6, #8]
    eab0:	6083      	str	r3, [r0, #8]
    eab2:	68f3      	ldr	r3, [r6, #12]
    eab4:	60c3      	str	r3, [r0, #12]
    eab6:	2a24      	cmp	r2, #36	; 0x24
    eab8:	d015      	beq.n	eae6 <_realloc_r+0x316>
    eaba:	0003      	movs	r3, r0
    eabc:	0032      	movs	r2, r6
    eabe:	3310      	adds	r3, #16
    eac0:	3210      	adds	r2, #16
    eac2:	e6d9      	b.n	e878 <_realloc_r+0xa8>
    eac4:	6853      	ldr	r3, [r2, #4]
    eac6:	2203      	movs	r2, #3
    eac8:	4393      	bics	r3, r2
    eaca:	18e4      	adds	r4, r4, r3
    eacc:	0035      	movs	r5, r6
    eace:	e6ec      	b.n	e8aa <_realloc_r+0xda>
    ead0:	4653      	mov	r3, sl
    ead2:	68b1      	ldr	r1, [r6, #8]
    ead4:	6119      	str	r1, [r3, #16]
    ead6:	68f1      	ldr	r1, [r6, #12]
    ead8:	6159      	str	r1, [r3, #20]
    eada:	2a24      	cmp	r2, #36	; 0x24
    eadc:	d00c      	beq.n	eaf8 <_realloc_r+0x328>
    eade:	0032      	movs	r2, r6
    eae0:	3318      	adds	r3, #24
    eae2:	3210      	adds	r2, #16
    eae4:	e7bc      	b.n	ea60 <_realloc_r+0x290>
    eae6:	6933      	ldr	r3, [r6, #16]
    eae8:	0032      	movs	r2, r6
    eaea:	6103      	str	r3, [r0, #16]
    eaec:	0003      	movs	r3, r0
    eaee:	6971      	ldr	r1, [r6, #20]
    eaf0:	3318      	adds	r3, #24
    eaf2:	3218      	adds	r2, #24
    eaf4:	6141      	str	r1, [r0, #20]
    eaf6:	e6bf      	b.n	e878 <_realloc_r+0xa8>
    eaf8:	4653      	mov	r3, sl
    eafa:	6932      	ldr	r2, [r6, #16]
    eafc:	4651      	mov	r1, sl
    eafe:	619a      	str	r2, [r3, #24]
    eb00:	0032      	movs	r2, r6
    eb02:	6970      	ldr	r0, [r6, #20]
    eb04:	3320      	adds	r3, #32
    eb06:	3218      	adds	r2, #24
    eb08:	61c8      	str	r0, [r1, #28]
    eb0a:	e7a9      	b.n	ea60 <_realloc_r+0x290>
    eb0c:	002b      	movs	r3, r5
    eb0e:	0032      	movs	r2, r6
    eb10:	e77e      	b.n	ea10 <_realloc_r+0x240>
    eb12:	0031      	movs	r1, r6
    eb14:	0028      	movs	r0, r5
    eb16:	f7ff fe0b 	bl	e730 <memmove>
    eb1a:	e77f      	b.n	ea1c <_realloc_r+0x24c>
    eb1c:	4653      	mov	r3, sl
    eb1e:	68b1      	ldr	r1, [r6, #8]
    eb20:	6119      	str	r1, [r3, #16]
    eb22:	68f1      	ldr	r1, [r6, #12]
    eb24:	6159      	str	r1, [r3, #20]
    eb26:	2a24      	cmp	r2, #36	; 0x24
    eb28:	d003      	beq.n	eb32 <_realloc_r+0x362>
    eb2a:	0032      	movs	r2, r6
    eb2c:	3318      	adds	r3, #24
    eb2e:	3210      	adds	r2, #16
    eb30:	e76e      	b.n	ea10 <_realloc_r+0x240>
    eb32:	4653      	mov	r3, sl
    eb34:	6932      	ldr	r2, [r6, #16]
    eb36:	4651      	mov	r1, sl
    eb38:	619a      	str	r2, [r3, #24]
    eb3a:	0032      	movs	r2, r6
    eb3c:	6970      	ldr	r0, [r6, #20]
    eb3e:	3320      	adds	r3, #32
    eb40:	3218      	adds	r2, #24
    eb42:	61c8      	str	r0, [r1, #28]
    eb44:	e764      	b.n	ea10 <_realloc_r+0x240>
    eb46:	46c0      	nop			; (mov r8, r8)
    eb48:	20000640 	.word	0x20000640

0000eb4c <strncmp>:
    eb4c:	b530      	push	{r4, r5, lr}
    eb4e:	2400      	movs	r4, #0
    eb50:	2a00      	cmp	r2, #0
    eb52:	d039      	beq.n	ebc8 <strncmp+0x7c>
    eb54:	0003      	movs	r3, r0
    eb56:	430b      	orrs	r3, r1
    eb58:	079b      	lsls	r3, r3, #30
    eb5a:	d120      	bne.n	eb9e <strncmp+0x52>
    eb5c:	2a03      	cmp	r2, #3
    eb5e:	d91e      	bls.n	eb9e <strncmp+0x52>
    eb60:	6803      	ldr	r3, [r0, #0]
    eb62:	680d      	ldr	r5, [r1, #0]
    eb64:	42ab      	cmp	r3, r5
    eb66:	d11a      	bne.n	eb9e <strncmp+0x52>
    eb68:	3a04      	subs	r2, #4
    eb6a:	2a00      	cmp	r2, #0
    eb6c:	d02c      	beq.n	ebc8 <strncmp+0x7c>
    eb6e:	4d1a      	ldr	r5, [pc, #104]	; (ebd8 <strncmp+0x8c>)
    eb70:	195d      	adds	r5, r3, r5
    eb72:	439d      	bics	r5, r3
    eb74:	002b      	movs	r3, r5
    eb76:	4d19      	ldr	r5, [pc, #100]	; (ebdc <strncmp+0x90>)
    eb78:	422b      	tst	r3, r5
    eb7a:	d00c      	beq.n	eb96 <strncmp+0x4a>
    eb7c:	e024      	b.n	ebc8 <strncmp+0x7c>
    eb7e:	6803      	ldr	r3, [r0, #0]
    eb80:	680c      	ldr	r4, [r1, #0]
    eb82:	42a3      	cmp	r3, r4
    eb84:	d10b      	bne.n	eb9e <strncmp+0x52>
    eb86:	3a04      	subs	r2, #4
    eb88:	2a00      	cmp	r2, #0
    eb8a:	d01f      	beq.n	ebcc <strncmp+0x80>
    eb8c:	4c12      	ldr	r4, [pc, #72]	; (ebd8 <strncmp+0x8c>)
    eb8e:	191c      	adds	r4, r3, r4
    eb90:	439c      	bics	r4, r3
    eb92:	422c      	tst	r4, r5
    eb94:	d11a      	bne.n	ebcc <strncmp+0x80>
    eb96:	3004      	adds	r0, #4
    eb98:	3104      	adds	r1, #4
    eb9a:	2a03      	cmp	r2, #3
    eb9c:	d8ef      	bhi.n	eb7e <strncmp+0x32>
    eb9e:	7803      	ldrb	r3, [r0, #0]
    eba0:	780d      	ldrb	r5, [r1, #0]
    eba2:	3a01      	subs	r2, #1
    eba4:	429d      	cmp	r5, r3
    eba6:	d113      	bne.n	ebd0 <strncmp+0x84>
    eba8:	2a00      	cmp	r2, #0
    ebaa:	d00f      	beq.n	ebcc <strncmp+0x80>
    ebac:	2d00      	cmp	r5, #0
    ebae:	d00d      	beq.n	ebcc <strncmp+0x80>
    ebb0:	2301      	movs	r3, #1
    ebb2:	e004      	b.n	ebbe <strncmp+0x72>
    ebb4:	429a      	cmp	r2, r3
    ebb6:	d009      	beq.n	ebcc <strncmp+0x80>
    ebb8:	3301      	adds	r3, #1
    ebba:	2c00      	cmp	r4, #0
    ebbc:	d006      	beq.n	ebcc <strncmp+0x80>
    ebbe:	5cc4      	ldrb	r4, [r0, r3]
    ebc0:	5ccd      	ldrb	r5, [r1, r3]
    ebc2:	42ac      	cmp	r4, r5
    ebc4:	d0f6      	beq.n	ebb4 <strncmp+0x68>
    ebc6:	1b64      	subs	r4, r4, r5
    ebc8:	0020      	movs	r0, r4
    ebca:	bd30      	pop	{r4, r5, pc}
    ebcc:	2400      	movs	r4, #0
    ebce:	e7fb      	b.n	ebc8 <strncmp+0x7c>
    ebd0:	001c      	movs	r4, r3
    ebd2:	1b64      	subs	r4, r4, r5
    ebd4:	e7f8      	b.n	ebc8 <strncmp+0x7c>
    ebd6:	46c0      	nop			; (mov r8, r8)
    ebd8:	fefefeff 	.word	0xfefefeff
    ebdc:	80808080 	.word	0x80808080

0000ebe0 <__aeabi_dadd>:
    ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ebe2:	4645      	mov	r5, r8
    ebe4:	46de      	mov	lr, fp
    ebe6:	4657      	mov	r7, sl
    ebe8:	464e      	mov	r6, r9
    ebea:	030c      	lsls	r4, r1, #12
    ebec:	b5e0      	push	{r5, r6, r7, lr}
    ebee:	004e      	lsls	r6, r1, #1
    ebf0:	0fc9      	lsrs	r1, r1, #31
    ebf2:	4688      	mov	r8, r1
    ebf4:	000d      	movs	r5, r1
    ebf6:	0a61      	lsrs	r1, r4, #9
    ebf8:	0f44      	lsrs	r4, r0, #29
    ebfa:	430c      	orrs	r4, r1
    ebfc:	00c7      	lsls	r7, r0, #3
    ebfe:	0319      	lsls	r1, r3, #12
    ec00:	0058      	lsls	r0, r3, #1
    ec02:	0fdb      	lsrs	r3, r3, #31
    ec04:	469b      	mov	fp, r3
    ec06:	0a4b      	lsrs	r3, r1, #9
    ec08:	0f51      	lsrs	r1, r2, #29
    ec0a:	430b      	orrs	r3, r1
    ec0c:	0d76      	lsrs	r6, r6, #21
    ec0e:	0d40      	lsrs	r0, r0, #21
    ec10:	0019      	movs	r1, r3
    ec12:	00d2      	lsls	r2, r2, #3
    ec14:	45d8      	cmp	r8, fp
    ec16:	d100      	bne.n	ec1a <__aeabi_dadd+0x3a>
    ec18:	e0ae      	b.n	ed78 <__aeabi_dadd+0x198>
    ec1a:	1a35      	subs	r5, r6, r0
    ec1c:	2d00      	cmp	r5, #0
    ec1e:	dc00      	bgt.n	ec22 <__aeabi_dadd+0x42>
    ec20:	e0f6      	b.n	ee10 <__aeabi_dadd+0x230>
    ec22:	2800      	cmp	r0, #0
    ec24:	d10f      	bne.n	ec46 <__aeabi_dadd+0x66>
    ec26:	4313      	orrs	r3, r2
    ec28:	d100      	bne.n	ec2c <__aeabi_dadd+0x4c>
    ec2a:	e0db      	b.n	ede4 <__aeabi_dadd+0x204>
    ec2c:	1e6b      	subs	r3, r5, #1
    ec2e:	2b00      	cmp	r3, #0
    ec30:	d000      	beq.n	ec34 <__aeabi_dadd+0x54>
    ec32:	e137      	b.n	eea4 <__aeabi_dadd+0x2c4>
    ec34:	1aba      	subs	r2, r7, r2
    ec36:	4297      	cmp	r7, r2
    ec38:	41bf      	sbcs	r7, r7
    ec3a:	1a64      	subs	r4, r4, r1
    ec3c:	427f      	negs	r7, r7
    ec3e:	1be4      	subs	r4, r4, r7
    ec40:	2601      	movs	r6, #1
    ec42:	0017      	movs	r7, r2
    ec44:	e024      	b.n	ec90 <__aeabi_dadd+0xb0>
    ec46:	4bc6      	ldr	r3, [pc, #792]	; (ef60 <__aeabi_dadd+0x380>)
    ec48:	429e      	cmp	r6, r3
    ec4a:	d04d      	beq.n	ece8 <__aeabi_dadd+0x108>
    ec4c:	2380      	movs	r3, #128	; 0x80
    ec4e:	041b      	lsls	r3, r3, #16
    ec50:	4319      	orrs	r1, r3
    ec52:	2d38      	cmp	r5, #56	; 0x38
    ec54:	dd00      	ble.n	ec58 <__aeabi_dadd+0x78>
    ec56:	e107      	b.n	ee68 <__aeabi_dadd+0x288>
    ec58:	2d1f      	cmp	r5, #31
    ec5a:	dd00      	ble.n	ec5e <__aeabi_dadd+0x7e>
    ec5c:	e138      	b.n	eed0 <__aeabi_dadd+0x2f0>
    ec5e:	2020      	movs	r0, #32
    ec60:	1b43      	subs	r3, r0, r5
    ec62:	469a      	mov	sl, r3
    ec64:	000b      	movs	r3, r1
    ec66:	4650      	mov	r0, sl
    ec68:	4083      	lsls	r3, r0
    ec6a:	4699      	mov	r9, r3
    ec6c:	0013      	movs	r3, r2
    ec6e:	4648      	mov	r0, r9
    ec70:	40eb      	lsrs	r3, r5
    ec72:	4318      	orrs	r0, r3
    ec74:	0003      	movs	r3, r0
    ec76:	4650      	mov	r0, sl
    ec78:	4082      	lsls	r2, r0
    ec7a:	1e50      	subs	r0, r2, #1
    ec7c:	4182      	sbcs	r2, r0
    ec7e:	40e9      	lsrs	r1, r5
    ec80:	431a      	orrs	r2, r3
    ec82:	1aba      	subs	r2, r7, r2
    ec84:	1a61      	subs	r1, r4, r1
    ec86:	4297      	cmp	r7, r2
    ec88:	41a4      	sbcs	r4, r4
    ec8a:	0017      	movs	r7, r2
    ec8c:	4264      	negs	r4, r4
    ec8e:	1b0c      	subs	r4, r1, r4
    ec90:	0223      	lsls	r3, r4, #8
    ec92:	d562      	bpl.n	ed5a <__aeabi_dadd+0x17a>
    ec94:	0264      	lsls	r4, r4, #9
    ec96:	0a65      	lsrs	r5, r4, #9
    ec98:	2d00      	cmp	r5, #0
    ec9a:	d100      	bne.n	ec9e <__aeabi_dadd+0xbe>
    ec9c:	e0df      	b.n	ee5e <__aeabi_dadd+0x27e>
    ec9e:	0028      	movs	r0, r5
    eca0:	f7f8 fa52 	bl	7148 <__clzsi2>
    eca4:	0003      	movs	r3, r0
    eca6:	3b08      	subs	r3, #8
    eca8:	2b1f      	cmp	r3, #31
    ecaa:	dd00      	ble.n	ecae <__aeabi_dadd+0xce>
    ecac:	e0d2      	b.n	ee54 <__aeabi_dadd+0x274>
    ecae:	2220      	movs	r2, #32
    ecb0:	003c      	movs	r4, r7
    ecb2:	1ad2      	subs	r2, r2, r3
    ecb4:	409d      	lsls	r5, r3
    ecb6:	40d4      	lsrs	r4, r2
    ecb8:	409f      	lsls	r7, r3
    ecba:	4325      	orrs	r5, r4
    ecbc:	429e      	cmp	r6, r3
    ecbe:	dd00      	ble.n	ecc2 <__aeabi_dadd+0xe2>
    ecc0:	e0c4      	b.n	ee4c <__aeabi_dadd+0x26c>
    ecc2:	1b9e      	subs	r6, r3, r6
    ecc4:	1c73      	adds	r3, r6, #1
    ecc6:	2b1f      	cmp	r3, #31
    ecc8:	dd00      	ble.n	eccc <__aeabi_dadd+0xec>
    ecca:	e0f1      	b.n	eeb0 <__aeabi_dadd+0x2d0>
    eccc:	2220      	movs	r2, #32
    ecce:	0038      	movs	r0, r7
    ecd0:	0029      	movs	r1, r5
    ecd2:	1ad2      	subs	r2, r2, r3
    ecd4:	40d8      	lsrs	r0, r3
    ecd6:	4091      	lsls	r1, r2
    ecd8:	4097      	lsls	r7, r2
    ecda:	002c      	movs	r4, r5
    ecdc:	4301      	orrs	r1, r0
    ecde:	1e78      	subs	r0, r7, #1
    ece0:	4187      	sbcs	r7, r0
    ece2:	40dc      	lsrs	r4, r3
    ece4:	2600      	movs	r6, #0
    ece6:	430f      	orrs	r7, r1
    ece8:	077b      	lsls	r3, r7, #29
    ecea:	d009      	beq.n	ed00 <__aeabi_dadd+0x120>
    ecec:	230f      	movs	r3, #15
    ecee:	403b      	ands	r3, r7
    ecf0:	2b04      	cmp	r3, #4
    ecf2:	d005      	beq.n	ed00 <__aeabi_dadd+0x120>
    ecf4:	1d3b      	adds	r3, r7, #4
    ecf6:	42bb      	cmp	r3, r7
    ecf8:	41bf      	sbcs	r7, r7
    ecfa:	427f      	negs	r7, r7
    ecfc:	19e4      	adds	r4, r4, r7
    ecfe:	001f      	movs	r7, r3
    ed00:	0223      	lsls	r3, r4, #8
    ed02:	d52c      	bpl.n	ed5e <__aeabi_dadd+0x17e>
    ed04:	4b96      	ldr	r3, [pc, #600]	; (ef60 <__aeabi_dadd+0x380>)
    ed06:	3601      	adds	r6, #1
    ed08:	429e      	cmp	r6, r3
    ed0a:	d100      	bne.n	ed0e <__aeabi_dadd+0x12e>
    ed0c:	e09a      	b.n	ee44 <__aeabi_dadd+0x264>
    ed0e:	4645      	mov	r5, r8
    ed10:	4b94      	ldr	r3, [pc, #592]	; (ef64 <__aeabi_dadd+0x384>)
    ed12:	08ff      	lsrs	r7, r7, #3
    ed14:	401c      	ands	r4, r3
    ed16:	0760      	lsls	r0, r4, #29
    ed18:	0576      	lsls	r6, r6, #21
    ed1a:	0264      	lsls	r4, r4, #9
    ed1c:	4307      	orrs	r7, r0
    ed1e:	0b24      	lsrs	r4, r4, #12
    ed20:	0d76      	lsrs	r6, r6, #21
    ed22:	2100      	movs	r1, #0
    ed24:	0324      	lsls	r4, r4, #12
    ed26:	0b23      	lsrs	r3, r4, #12
    ed28:	0d0c      	lsrs	r4, r1, #20
    ed2a:	4a8f      	ldr	r2, [pc, #572]	; (ef68 <__aeabi_dadd+0x388>)
    ed2c:	0524      	lsls	r4, r4, #20
    ed2e:	431c      	orrs	r4, r3
    ed30:	4014      	ands	r4, r2
    ed32:	0533      	lsls	r3, r6, #20
    ed34:	4323      	orrs	r3, r4
    ed36:	005b      	lsls	r3, r3, #1
    ed38:	07ed      	lsls	r5, r5, #31
    ed3a:	085b      	lsrs	r3, r3, #1
    ed3c:	432b      	orrs	r3, r5
    ed3e:	0038      	movs	r0, r7
    ed40:	0019      	movs	r1, r3
    ed42:	bc3c      	pop	{r2, r3, r4, r5}
    ed44:	4690      	mov	r8, r2
    ed46:	4699      	mov	r9, r3
    ed48:	46a2      	mov	sl, r4
    ed4a:	46ab      	mov	fp, r5
    ed4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ed4e:	4664      	mov	r4, ip
    ed50:	4304      	orrs	r4, r0
    ed52:	d100      	bne.n	ed56 <__aeabi_dadd+0x176>
    ed54:	e211      	b.n	f17a <__aeabi_dadd+0x59a>
    ed56:	0004      	movs	r4, r0
    ed58:	4667      	mov	r7, ip
    ed5a:	077b      	lsls	r3, r7, #29
    ed5c:	d1c6      	bne.n	ecec <__aeabi_dadd+0x10c>
    ed5e:	4645      	mov	r5, r8
    ed60:	0760      	lsls	r0, r4, #29
    ed62:	08ff      	lsrs	r7, r7, #3
    ed64:	4307      	orrs	r7, r0
    ed66:	08e4      	lsrs	r4, r4, #3
    ed68:	4b7d      	ldr	r3, [pc, #500]	; (ef60 <__aeabi_dadd+0x380>)
    ed6a:	429e      	cmp	r6, r3
    ed6c:	d030      	beq.n	edd0 <__aeabi_dadd+0x1f0>
    ed6e:	0324      	lsls	r4, r4, #12
    ed70:	0576      	lsls	r6, r6, #21
    ed72:	0b24      	lsrs	r4, r4, #12
    ed74:	0d76      	lsrs	r6, r6, #21
    ed76:	e7d4      	b.n	ed22 <__aeabi_dadd+0x142>
    ed78:	1a33      	subs	r3, r6, r0
    ed7a:	469a      	mov	sl, r3
    ed7c:	2b00      	cmp	r3, #0
    ed7e:	dd78      	ble.n	ee72 <__aeabi_dadd+0x292>
    ed80:	2800      	cmp	r0, #0
    ed82:	d031      	beq.n	ede8 <__aeabi_dadd+0x208>
    ed84:	4876      	ldr	r0, [pc, #472]	; (ef60 <__aeabi_dadd+0x380>)
    ed86:	4286      	cmp	r6, r0
    ed88:	d0ae      	beq.n	ece8 <__aeabi_dadd+0x108>
    ed8a:	2080      	movs	r0, #128	; 0x80
    ed8c:	0400      	lsls	r0, r0, #16
    ed8e:	4301      	orrs	r1, r0
    ed90:	4653      	mov	r3, sl
    ed92:	2b38      	cmp	r3, #56	; 0x38
    ed94:	dc00      	bgt.n	ed98 <__aeabi_dadd+0x1b8>
    ed96:	e0e9      	b.n	ef6c <__aeabi_dadd+0x38c>
    ed98:	430a      	orrs	r2, r1
    ed9a:	1e51      	subs	r1, r2, #1
    ed9c:	418a      	sbcs	r2, r1
    ed9e:	2100      	movs	r1, #0
    eda0:	19d2      	adds	r2, r2, r7
    eda2:	42ba      	cmp	r2, r7
    eda4:	41bf      	sbcs	r7, r7
    eda6:	1909      	adds	r1, r1, r4
    eda8:	427c      	negs	r4, r7
    edaa:	0017      	movs	r7, r2
    edac:	190c      	adds	r4, r1, r4
    edae:	0223      	lsls	r3, r4, #8
    edb0:	d5d3      	bpl.n	ed5a <__aeabi_dadd+0x17a>
    edb2:	4b6b      	ldr	r3, [pc, #428]	; (ef60 <__aeabi_dadd+0x380>)
    edb4:	3601      	adds	r6, #1
    edb6:	429e      	cmp	r6, r3
    edb8:	d100      	bne.n	edbc <__aeabi_dadd+0x1dc>
    edba:	e13a      	b.n	f032 <__aeabi_dadd+0x452>
    edbc:	2001      	movs	r0, #1
    edbe:	4b69      	ldr	r3, [pc, #420]	; (ef64 <__aeabi_dadd+0x384>)
    edc0:	401c      	ands	r4, r3
    edc2:	087b      	lsrs	r3, r7, #1
    edc4:	4007      	ands	r7, r0
    edc6:	431f      	orrs	r7, r3
    edc8:	07e0      	lsls	r0, r4, #31
    edca:	4307      	orrs	r7, r0
    edcc:	0864      	lsrs	r4, r4, #1
    edce:	e78b      	b.n	ece8 <__aeabi_dadd+0x108>
    edd0:	0023      	movs	r3, r4
    edd2:	433b      	orrs	r3, r7
    edd4:	d100      	bne.n	edd8 <__aeabi_dadd+0x1f8>
    edd6:	e1cb      	b.n	f170 <__aeabi_dadd+0x590>
    edd8:	2280      	movs	r2, #128	; 0x80
    edda:	0312      	lsls	r2, r2, #12
    eddc:	4314      	orrs	r4, r2
    edde:	0324      	lsls	r4, r4, #12
    ede0:	0b24      	lsrs	r4, r4, #12
    ede2:	e79e      	b.n	ed22 <__aeabi_dadd+0x142>
    ede4:	002e      	movs	r6, r5
    ede6:	e77f      	b.n	ece8 <__aeabi_dadd+0x108>
    ede8:	0008      	movs	r0, r1
    edea:	4310      	orrs	r0, r2
    edec:	d100      	bne.n	edf0 <__aeabi_dadd+0x210>
    edee:	e0b4      	b.n	ef5a <__aeabi_dadd+0x37a>
    edf0:	1e58      	subs	r0, r3, #1
    edf2:	2800      	cmp	r0, #0
    edf4:	d000      	beq.n	edf8 <__aeabi_dadd+0x218>
    edf6:	e0de      	b.n	efb6 <__aeabi_dadd+0x3d6>
    edf8:	18ba      	adds	r2, r7, r2
    edfa:	42ba      	cmp	r2, r7
    edfc:	419b      	sbcs	r3, r3
    edfe:	1864      	adds	r4, r4, r1
    ee00:	425b      	negs	r3, r3
    ee02:	18e4      	adds	r4, r4, r3
    ee04:	0017      	movs	r7, r2
    ee06:	2601      	movs	r6, #1
    ee08:	0223      	lsls	r3, r4, #8
    ee0a:	d5a6      	bpl.n	ed5a <__aeabi_dadd+0x17a>
    ee0c:	2602      	movs	r6, #2
    ee0e:	e7d5      	b.n	edbc <__aeabi_dadd+0x1dc>
    ee10:	2d00      	cmp	r5, #0
    ee12:	d16e      	bne.n	eef2 <__aeabi_dadd+0x312>
    ee14:	1c70      	adds	r0, r6, #1
    ee16:	0540      	lsls	r0, r0, #21
    ee18:	0d40      	lsrs	r0, r0, #21
    ee1a:	2801      	cmp	r0, #1
    ee1c:	dc00      	bgt.n	ee20 <__aeabi_dadd+0x240>
    ee1e:	e0f9      	b.n	f014 <__aeabi_dadd+0x434>
    ee20:	1ab8      	subs	r0, r7, r2
    ee22:	4684      	mov	ip, r0
    ee24:	4287      	cmp	r7, r0
    ee26:	4180      	sbcs	r0, r0
    ee28:	1ae5      	subs	r5, r4, r3
    ee2a:	4240      	negs	r0, r0
    ee2c:	1a2d      	subs	r5, r5, r0
    ee2e:	0228      	lsls	r0, r5, #8
    ee30:	d400      	bmi.n	ee34 <__aeabi_dadd+0x254>
    ee32:	e089      	b.n	ef48 <__aeabi_dadd+0x368>
    ee34:	1bd7      	subs	r7, r2, r7
    ee36:	42ba      	cmp	r2, r7
    ee38:	4192      	sbcs	r2, r2
    ee3a:	1b1c      	subs	r4, r3, r4
    ee3c:	4252      	negs	r2, r2
    ee3e:	1aa5      	subs	r5, r4, r2
    ee40:	46d8      	mov	r8, fp
    ee42:	e729      	b.n	ec98 <__aeabi_dadd+0xb8>
    ee44:	4645      	mov	r5, r8
    ee46:	2400      	movs	r4, #0
    ee48:	2700      	movs	r7, #0
    ee4a:	e76a      	b.n	ed22 <__aeabi_dadd+0x142>
    ee4c:	4c45      	ldr	r4, [pc, #276]	; (ef64 <__aeabi_dadd+0x384>)
    ee4e:	1af6      	subs	r6, r6, r3
    ee50:	402c      	ands	r4, r5
    ee52:	e749      	b.n	ece8 <__aeabi_dadd+0x108>
    ee54:	003d      	movs	r5, r7
    ee56:	3828      	subs	r0, #40	; 0x28
    ee58:	4085      	lsls	r5, r0
    ee5a:	2700      	movs	r7, #0
    ee5c:	e72e      	b.n	ecbc <__aeabi_dadd+0xdc>
    ee5e:	0038      	movs	r0, r7
    ee60:	f7f8 f972 	bl	7148 <__clzsi2>
    ee64:	3020      	adds	r0, #32
    ee66:	e71d      	b.n	eca4 <__aeabi_dadd+0xc4>
    ee68:	430a      	orrs	r2, r1
    ee6a:	1e51      	subs	r1, r2, #1
    ee6c:	418a      	sbcs	r2, r1
    ee6e:	2100      	movs	r1, #0
    ee70:	e707      	b.n	ec82 <__aeabi_dadd+0xa2>
    ee72:	2b00      	cmp	r3, #0
    ee74:	d000      	beq.n	ee78 <__aeabi_dadd+0x298>
    ee76:	e0f3      	b.n	f060 <__aeabi_dadd+0x480>
    ee78:	1c70      	adds	r0, r6, #1
    ee7a:	0543      	lsls	r3, r0, #21
    ee7c:	0d5b      	lsrs	r3, r3, #21
    ee7e:	2b01      	cmp	r3, #1
    ee80:	dc00      	bgt.n	ee84 <__aeabi_dadd+0x2a4>
    ee82:	e0ad      	b.n	efe0 <__aeabi_dadd+0x400>
    ee84:	4b36      	ldr	r3, [pc, #216]	; (ef60 <__aeabi_dadd+0x380>)
    ee86:	4298      	cmp	r0, r3
    ee88:	d100      	bne.n	ee8c <__aeabi_dadd+0x2ac>
    ee8a:	e0d1      	b.n	f030 <__aeabi_dadd+0x450>
    ee8c:	18ba      	adds	r2, r7, r2
    ee8e:	42ba      	cmp	r2, r7
    ee90:	41bf      	sbcs	r7, r7
    ee92:	1864      	adds	r4, r4, r1
    ee94:	427f      	negs	r7, r7
    ee96:	19e4      	adds	r4, r4, r7
    ee98:	07e7      	lsls	r7, r4, #31
    ee9a:	0852      	lsrs	r2, r2, #1
    ee9c:	4317      	orrs	r7, r2
    ee9e:	0864      	lsrs	r4, r4, #1
    eea0:	0006      	movs	r6, r0
    eea2:	e721      	b.n	ece8 <__aeabi_dadd+0x108>
    eea4:	482e      	ldr	r0, [pc, #184]	; (ef60 <__aeabi_dadd+0x380>)
    eea6:	4285      	cmp	r5, r0
    eea8:	d100      	bne.n	eeac <__aeabi_dadd+0x2cc>
    eeaa:	e093      	b.n	efd4 <__aeabi_dadd+0x3f4>
    eeac:	001d      	movs	r5, r3
    eeae:	e6d0      	b.n	ec52 <__aeabi_dadd+0x72>
    eeb0:	0029      	movs	r1, r5
    eeb2:	3e1f      	subs	r6, #31
    eeb4:	40f1      	lsrs	r1, r6
    eeb6:	2b20      	cmp	r3, #32
    eeb8:	d100      	bne.n	eebc <__aeabi_dadd+0x2dc>
    eeba:	e08d      	b.n	efd8 <__aeabi_dadd+0x3f8>
    eebc:	2240      	movs	r2, #64	; 0x40
    eebe:	1ad3      	subs	r3, r2, r3
    eec0:	409d      	lsls	r5, r3
    eec2:	432f      	orrs	r7, r5
    eec4:	1e7d      	subs	r5, r7, #1
    eec6:	41af      	sbcs	r7, r5
    eec8:	2400      	movs	r4, #0
    eeca:	430f      	orrs	r7, r1
    eecc:	2600      	movs	r6, #0
    eece:	e744      	b.n	ed5a <__aeabi_dadd+0x17a>
    eed0:	002b      	movs	r3, r5
    eed2:	0008      	movs	r0, r1
    eed4:	3b20      	subs	r3, #32
    eed6:	40d8      	lsrs	r0, r3
    eed8:	0003      	movs	r3, r0
    eeda:	2d20      	cmp	r5, #32
    eedc:	d100      	bne.n	eee0 <__aeabi_dadd+0x300>
    eede:	e07d      	b.n	efdc <__aeabi_dadd+0x3fc>
    eee0:	2040      	movs	r0, #64	; 0x40
    eee2:	1b45      	subs	r5, r0, r5
    eee4:	40a9      	lsls	r1, r5
    eee6:	430a      	orrs	r2, r1
    eee8:	1e51      	subs	r1, r2, #1
    eeea:	418a      	sbcs	r2, r1
    eeec:	2100      	movs	r1, #0
    eeee:	431a      	orrs	r2, r3
    eef0:	e6c7      	b.n	ec82 <__aeabi_dadd+0xa2>
    eef2:	2e00      	cmp	r6, #0
    eef4:	d050      	beq.n	ef98 <__aeabi_dadd+0x3b8>
    eef6:	4e1a      	ldr	r6, [pc, #104]	; (ef60 <__aeabi_dadd+0x380>)
    eef8:	42b0      	cmp	r0, r6
    eefa:	d057      	beq.n	efac <__aeabi_dadd+0x3cc>
    eefc:	2680      	movs	r6, #128	; 0x80
    eefe:	426b      	negs	r3, r5
    ef00:	4699      	mov	r9, r3
    ef02:	0436      	lsls	r6, r6, #16
    ef04:	4334      	orrs	r4, r6
    ef06:	464b      	mov	r3, r9
    ef08:	2b38      	cmp	r3, #56	; 0x38
    ef0a:	dd00      	ble.n	ef0e <__aeabi_dadd+0x32e>
    ef0c:	e0d6      	b.n	f0bc <__aeabi_dadd+0x4dc>
    ef0e:	2b1f      	cmp	r3, #31
    ef10:	dd00      	ble.n	ef14 <__aeabi_dadd+0x334>
    ef12:	e135      	b.n	f180 <__aeabi_dadd+0x5a0>
    ef14:	2620      	movs	r6, #32
    ef16:	1af5      	subs	r5, r6, r3
    ef18:	0026      	movs	r6, r4
    ef1a:	40ae      	lsls	r6, r5
    ef1c:	46b2      	mov	sl, r6
    ef1e:	003e      	movs	r6, r7
    ef20:	40de      	lsrs	r6, r3
    ef22:	46ac      	mov	ip, r5
    ef24:	0035      	movs	r5, r6
    ef26:	4656      	mov	r6, sl
    ef28:	432e      	orrs	r6, r5
    ef2a:	4665      	mov	r5, ip
    ef2c:	40af      	lsls	r7, r5
    ef2e:	1e7d      	subs	r5, r7, #1
    ef30:	41af      	sbcs	r7, r5
    ef32:	40dc      	lsrs	r4, r3
    ef34:	4337      	orrs	r7, r6
    ef36:	1bd7      	subs	r7, r2, r7
    ef38:	42ba      	cmp	r2, r7
    ef3a:	4192      	sbcs	r2, r2
    ef3c:	1b0c      	subs	r4, r1, r4
    ef3e:	4252      	negs	r2, r2
    ef40:	1aa4      	subs	r4, r4, r2
    ef42:	0006      	movs	r6, r0
    ef44:	46d8      	mov	r8, fp
    ef46:	e6a3      	b.n	ec90 <__aeabi_dadd+0xb0>
    ef48:	4664      	mov	r4, ip
    ef4a:	4667      	mov	r7, ip
    ef4c:	432c      	orrs	r4, r5
    ef4e:	d000      	beq.n	ef52 <__aeabi_dadd+0x372>
    ef50:	e6a2      	b.n	ec98 <__aeabi_dadd+0xb8>
    ef52:	2500      	movs	r5, #0
    ef54:	2600      	movs	r6, #0
    ef56:	2700      	movs	r7, #0
    ef58:	e706      	b.n	ed68 <__aeabi_dadd+0x188>
    ef5a:	001e      	movs	r6, r3
    ef5c:	e6c4      	b.n	ece8 <__aeabi_dadd+0x108>
    ef5e:	46c0      	nop			; (mov r8, r8)
    ef60:	000007ff 	.word	0x000007ff
    ef64:	ff7fffff 	.word	0xff7fffff
    ef68:	800fffff 	.word	0x800fffff
    ef6c:	2b1f      	cmp	r3, #31
    ef6e:	dc63      	bgt.n	f038 <__aeabi_dadd+0x458>
    ef70:	2020      	movs	r0, #32
    ef72:	1ac3      	subs	r3, r0, r3
    ef74:	0008      	movs	r0, r1
    ef76:	4098      	lsls	r0, r3
    ef78:	469c      	mov	ip, r3
    ef7a:	4683      	mov	fp, r0
    ef7c:	4653      	mov	r3, sl
    ef7e:	0010      	movs	r0, r2
    ef80:	40d8      	lsrs	r0, r3
    ef82:	0003      	movs	r3, r0
    ef84:	4658      	mov	r0, fp
    ef86:	4318      	orrs	r0, r3
    ef88:	4663      	mov	r3, ip
    ef8a:	409a      	lsls	r2, r3
    ef8c:	1e53      	subs	r3, r2, #1
    ef8e:	419a      	sbcs	r2, r3
    ef90:	4653      	mov	r3, sl
    ef92:	4302      	orrs	r2, r0
    ef94:	40d9      	lsrs	r1, r3
    ef96:	e703      	b.n	eda0 <__aeabi_dadd+0x1c0>
    ef98:	0026      	movs	r6, r4
    ef9a:	433e      	orrs	r6, r7
    ef9c:	d006      	beq.n	efac <__aeabi_dadd+0x3cc>
    ef9e:	43eb      	mvns	r3, r5
    efa0:	4699      	mov	r9, r3
    efa2:	2b00      	cmp	r3, #0
    efa4:	d0c7      	beq.n	ef36 <__aeabi_dadd+0x356>
    efa6:	4e94      	ldr	r6, [pc, #592]	; (f1f8 <__aeabi_dadd+0x618>)
    efa8:	42b0      	cmp	r0, r6
    efaa:	d1ac      	bne.n	ef06 <__aeabi_dadd+0x326>
    efac:	000c      	movs	r4, r1
    efae:	0017      	movs	r7, r2
    efb0:	0006      	movs	r6, r0
    efb2:	46d8      	mov	r8, fp
    efb4:	e698      	b.n	ece8 <__aeabi_dadd+0x108>
    efb6:	4b90      	ldr	r3, [pc, #576]	; (f1f8 <__aeabi_dadd+0x618>)
    efb8:	459a      	cmp	sl, r3
    efba:	d00b      	beq.n	efd4 <__aeabi_dadd+0x3f4>
    efbc:	4682      	mov	sl, r0
    efbe:	e6e7      	b.n	ed90 <__aeabi_dadd+0x1b0>
    efc0:	2800      	cmp	r0, #0
    efc2:	d000      	beq.n	efc6 <__aeabi_dadd+0x3e6>
    efc4:	e09e      	b.n	f104 <__aeabi_dadd+0x524>
    efc6:	0018      	movs	r0, r3
    efc8:	4310      	orrs	r0, r2
    efca:	d100      	bne.n	efce <__aeabi_dadd+0x3ee>
    efcc:	e0e9      	b.n	f1a2 <__aeabi_dadd+0x5c2>
    efce:	001c      	movs	r4, r3
    efd0:	0017      	movs	r7, r2
    efd2:	46d8      	mov	r8, fp
    efd4:	4e88      	ldr	r6, [pc, #544]	; (f1f8 <__aeabi_dadd+0x618>)
    efd6:	e687      	b.n	ece8 <__aeabi_dadd+0x108>
    efd8:	2500      	movs	r5, #0
    efda:	e772      	b.n	eec2 <__aeabi_dadd+0x2e2>
    efdc:	2100      	movs	r1, #0
    efde:	e782      	b.n	eee6 <__aeabi_dadd+0x306>
    efe0:	0023      	movs	r3, r4
    efe2:	433b      	orrs	r3, r7
    efe4:	2e00      	cmp	r6, #0
    efe6:	d000      	beq.n	efea <__aeabi_dadd+0x40a>
    efe8:	e0ab      	b.n	f142 <__aeabi_dadd+0x562>
    efea:	2b00      	cmp	r3, #0
    efec:	d100      	bne.n	eff0 <__aeabi_dadd+0x410>
    efee:	e0e7      	b.n	f1c0 <__aeabi_dadd+0x5e0>
    eff0:	000b      	movs	r3, r1
    eff2:	4313      	orrs	r3, r2
    eff4:	d100      	bne.n	eff8 <__aeabi_dadd+0x418>
    eff6:	e677      	b.n	ece8 <__aeabi_dadd+0x108>
    eff8:	18ba      	adds	r2, r7, r2
    effa:	42ba      	cmp	r2, r7
    effc:	41bf      	sbcs	r7, r7
    effe:	1864      	adds	r4, r4, r1
    f000:	427f      	negs	r7, r7
    f002:	19e4      	adds	r4, r4, r7
    f004:	0223      	lsls	r3, r4, #8
    f006:	d400      	bmi.n	f00a <__aeabi_dadd+0x42a>
    f008:	e0f2      	b.n	f1f0 <__aeabi_dadd+0x610>
    f00a:	4b7c      	ldr	r3, [pc, #496]	; (f1fc <__aeabi_dadd+0x61c>)
    f00c:	0017      	movs	r7, r2
    f00e:	401c      	ands	r4, r3
    f010:	0006      	movs	r6, r0
    f012:	e669      	b.n	ece8 <__aeabi_dadd+0x108>
    f014:	0020      	movs	r0, r4
    f016:	4338      	orrs	r0, r7
    f018:	2e00      	cmp	r6, #0
    f01a:	d1d1      	bne.n	efc0 <__aeabi_dadd+0x3e0>
    f01c:	2800      	cmp	r0, #0
    f01e:	d15b      	bne.n	f0d8 <__aeabi_dadd+0x4f8>
    f020:	001c      	movs	r4, r3
    f022:	4314      	orrs	r4, r2
    f024:	d100      	bne.n	f028 <__aeabi_dadd+0x448>
    f026:	e0a8      	b.n	f17a <__aeabi_dadd+0x59a>
    f028:	001c      	movs	r4, r3
    f02a:	0017      	movs	r7, r2
    f02c:	46d8      	mov	r8, fp
    f02e:	e65b      	b.n	ece8 <__aeabi_dadd+0x108>
    f030:	0006      	movs	r6, r0
    f032:	2400      	movs	r4, #0
    f034:	2700      	movs	r7, #0
    f036:	e697      	b.n	ed68 <__aeabi_dadd+0x188>
    f038:	4650      	mov	r0, sl
    f03a:	000b      	movs	r3, r1
    f03c:	3820      	subs	r0, #32
    f03e:	40c3      	lsrs	r3, r0
    f040:	4699      	mov	r9, r3
    f042:	4653      	mov	r3, sl
    f044:	2b20      	cmp	r3, #32
    f046:	d100      	bne.n	f04a <__aeabi_dadd+0x46a>
    f048:	e095      	b.n	f176 <__aeabi_dadd+0x596>
    f04a:	2340      	movs	r3, #64	; 0x40
    f04c:	4650      	mov	r0, sl
    f04e:	1a1b      	subs	r3, r3, r0
    f050:	4099      	lsls	r1, r3
    f052:	430a      	orrs	r2, r1
    f054:	1e51      	subs	r1, r2, #1
    f056:	418a      	sbcs	r2, r1
    f058:	464b      	mov	r3, r9
    f05a:	2100      	movs	r1, #0
    f05c:	431a      	orrs	r2, r3
    f05e:	e69f      	b.n	eda0 <__aeabi_dadd+0x1c0>
    f060:	2e00      	cmp	r6, #0
    f062:	d130      	bne.n	f0c6 <__aeabi_dadd+0x4e6>
    f064:	0026      	movs	r6, r4
    f066:	433e      	orrs	r6, r7
    f068:	d067      	beq.n	f13a <__aeabi_dadd+0x55a>
    f06a:	43db      	mvns	r3, r3
    f06c:	469a      	mov	sl, r3
    f06e:	2b00      	cmp	r3, #0
    f070:	d01c      	beq.n	f0ac <__aeabi_dadd+0x4cc>
    f072:	4e61      	ldr	r6, [pc, #388]	; (f1f8 <__aeabi_dadd+0x618>)
    f074:	42b0      	cmp	r0, r6
    f076:	d060      	beq.n	f13a <__aeabi_dadd+0x55a>
    f078:	4653      	mov	r3, sl
    f07a:	2b38      	cmp	r3, #56	; 0x38
    f07c:	dd00      	ble.n	f080 <__aeabi_dadd+0x4a0>
    f07e:	e096      	b.n	f1ae <__aeabi_dadd+0x5ce>
    f080:	2b1f      	cmp	r3, #31
    f082:	dd00      	ble.n	f086 <__aeabi_dadd+0x4a6>
    f084:	e09f      	b.n	f1c6 <__aeabi_dadd+0x5e6>
    f086:	2620      	movs	r6, #32
    f088:	1af3      	subs	r3, r6, r3
    f08a:	0026      	movs	r6, r4
    f08c:	409e      	lsls	r6, r3
    f08e:	469c      	mov	ip, r3
    f090:	46b3      	mov	fp, r6
    f092:	4653      	mov	r3, sl
    f094:	003e      	movs	r6, r7
    f096:	40de      	lsrs	r6, r3
    f098:	0033      	movs	r3, r6
    f09a:	465e      	mov	r6, fp
    f09c:	431e      	orrs	r6, r3
    f09e:	4663      	mov	r3, ip
    f0a0:	409f      	lsls	r7, r3
    f0a2:	1e7b      	subs	r3, r7, #1
    f0a4:	419f      	sbcs	r7, r3
    f0a6:	4653      	mov	r3, sl
    f0a8:	40dc      	lsrs	r4, r3
    f0aa:	4337      	orrs	r7, r6
    f0ac:	18bf      	adds	r7, r7, r2
    f0ae:	4297      	cmp	r7, r2
    f0b0:	4192      	sbcs	r2, r2
    f0b2:	1864      	adds	r4, r4, r1
    f0b4:	4252      	negs	r2, r2
    f0b6:	18a4      	adds	r4, r4, r2
    f0b8:	0006      	movs	r6, r0
    f0ba:	e678      	b.n	edae <__aeabi_dadd+0x1ce>
    f0bc:	4327      	orrs	r7, r4
    f0be:	1e7c      	subs	r4, r7, #1
    f0c0:	41a7      	sbcs	r7, r4
    f0c2:	2400      	movs	r4, #0
    f0c4:	e737      	b.n	ef36 <__aeabi_dadd+0x356>
    f0c6:	4e4c      	ldr	r6, [pc, #304]	; (f1f8 <__aeabi_dadd+0x618>)
    f0c8:	42b0      	cmp	r0, r6
    f0ca:	d036      	beq.n	f13a <__aeabi_dadd+0x55a>
    f0cc:	2680      	movs	r6, #128	; 0x80
    f0ce:	425b      	negs	r3, r3
    f0d0:	0436      	lsls	r6, r6, #16
    f0d2:	469a      	mov	sl, r3
    f0d4:	4334      	orrs	r4, r6
    f0d6:	e7cf      	b.n	f078 <__aeabi_dadd+0x498>
    f0d8:	0018      	movs	r0, r3
    f0da:	4310      	orrs	r0, r2
    f0dc:	d100      	bne.n	f0e0 <__aeabi_dadd+0x500>
    f0de:	e603      	b.n	ece8 <__aeabi_dadd+0x108>
    f0e0:	1ab8      	subs	r0, r7, r2
    f0e2:	4684      	mov	ip, r0
    f0e4:	4567      	cmp	r7, ip
    f0e6:	41ad      	sbcs	r5, r5
    f0e8:	1ae0      	subs	r0, r4, r3
    f0ea:	426d      	negs	r5, r5
    f0ec:	1b40      	subs	r0, r0, r5
    f0ee:	0205      	lsls	r5, r0, #8
    f0f0:	d400      	bmi.n	f0f4 <__aeabi_dadd+0x514>
    f0f2:	e62c      	b.n	ed4e <__aeabi_dadd+0x16e>
    f0f4:	1bd7      	subs	r7, r2, r7
    f0f6:	42ba      	cmp	r2, r7
    f0f8:	4192      	sbcs	r2, r2
    f0fa:	1b1c      	subs	r4, r3, r4
    f0fc:	4252      	negs	r2, r2
    f0fe:	1aa4      	subs	r4, r4, r2
    f100:	46d8      	mov	r8, fp
    f102:	e5f1      	b.n	ece8 <__aeabi_dadd+0x108>
    f104:	0018      	movs	r0, r3
    f106:	4310      	orrs	r0, r2
    f108:	d100      	bne.n	f10c <__aeabi_dadd+0x52c>
    f10a:	e763      	b.n	efd4 <__aeabi_dadd+0x3f4>
    f10c:	08f8      	lsrs	r0, r7, #3
    f10e:	0767      	lsls	r7, r4, #29
    f110:	4307      	orrs	r7, r0
    f112:	2080      	movs	r0, #128	; 0x80
    f114:	08e4      	lsrs	r4, r4, #3
    f116:	0300      	lsls	r0, r0, #12
    f118:	4204      	tst	r4, r0
    f11a:	d008      	beq.n	f12e <__aeabi_dadd+0x54e>
    f11c:	08dd      	lsrs	r5, r3, #3
    f11e:	4205      	tst	r5, r0
    f120:	d105      	bne.n	f12e <__aeabi_dadd+0x54e>
    f122:	08d2      	lsrs	r2, r2, #3
    f124:	0759      	lsls	r1, r3, #29
    f126:	4311      	orrs	r1, r2
    f128:	000f      	movs	r7, r1
    f12a:	002c      	movs	r4, r5
    f12c:	46d8      	mov	r8, fp
    f12e:	0f7b      	lsrs	r3, r7, #29
    f130:	00e4      	lsls	r4, r4, #3
    f132:	431c      	orrs	r4, r3
    f134:	00ff      	lsls	r7, r7, #3
    f136:	4e30      	ldr	r6, [pc, #192]	; (f1f8 <__aeabi_dadd+0x618>)
    f138:	e5d6      	b.n	ece8 <__aeabi_dadd+0x108>
    f13a:	000c      	movs	r4, r1
    f13c:	0017      	movs	r7, r2
    f13e:	0006      	movs	r6, r0
    f140:	e5d2      	b.n	ece8 <__aeabi_dadd+0x108>
    f142:	2b00      	cmp	r3, #0
    f144:	d038      	beq.n	f1b8 <__aeabi_dadd+0x5d8>
    f146:	000b      	movs	r3, r1
    f148:	4313      	orrs	r3, r2
    f14a:	d100      	bne.n	f14e <__aeabi_dadd+0x56e>
    f14c:	e742      	b.n	efd4 <__aeabi_dadd+0x3f4>
    f14e:	08f8      	lsrs	r0, r7, #3
    f150:	0767      	lsls	r7, r4, #29
    f152:	4307      	orrs	r7, r0
    f154:	2080      	movs	r0, #128	; 0x80
    f156:	08e4      	lsrs	r4, r4, #3
    f158:	0300      	lsls	r0, r0, #12
    f15a:	4204      	tst	r4, r0
    f15c:	d0e7      	beq.n	f12e <__aeabi_dadd+0x54e>
    f15e:	08cb      	lsrs	r3, r1, #3
    f160:	4203      	tst	r3, r0
    f162:	d1e4      	bne.n	f12e <__aeabi_dadd+0x54e>
    f164:	08d2      	lsrs	r2, r2, #3
    f166:	0749      	lsls	r1, r1, #29
    f168:	4311      	orrs	r1, r2
    f16a:	000f      	movs	r7, r1
    f16c:	001c      	movs	r4, r3
    f16e:	e7de      	b.n	f12e <__aeabi_dadd+0x54e>
    f170:	2700      	movs	r7, #0
    f172:	2400      	movs	r4, #0
    f174:	e5d5      	b.n	ed22 <__aeabi_dadd+0x142>
    f176:	2100      	movs	r1, #0
    f178:	e76b      	b.n	f052 <__aeabi_dadd+0x472>
    f17a:	2500      	movs	r5, #0
    f17c:	2700      	movs	r7, #0
    f17e:	e5f3      	b.n	ed68 <__aeabi_dadd+0x188>
    f180:	464e      	mov	r6, r9
    f182:	0025      	movs	r5, r4
    f184:	3e20      	subs	r6, #32
    f186:	40f5      	lsrs	r5, r6
    f188:	464b      	mov	r3, r9
    f18a:	002e      	movs	r6, r5
    f18c:	2b20      	cmp	r3, #32
    f18e:	d02d      	beq.n	f1ec <__aeabi_dadd+0x60c>
    f190:	2540      	movs	r5, #64	; 0x40
    f192:	1aed      	subs	r5, r5, r3
    f194:	40ac      	lsls	r4, r5
    f196:	4327      	orrs	r7, r4
    f198:	1e7c      	subs	r4, r7, #1
    f19a:	41a7      	sbcs	r7, r4
    f19c:	2400      	movs	r4, #0
    f19e:	4337      	orrs	r7, r6
    f1a0:	e6c9      	b.n	ef36 <__aeabi_dadd+0x356>
    f1a2:	2480      	movs	r4, #128	; 0x80
    f1a4:	2500      	movs	r5, #0
    f1a6:	0324      	lsls	r4, r4, #12
    f1a8:	4e13      	ldr	r6, [pc, #76]	; (f1f8 <__aeabi_dadd+0x618>)
    f1aa:	2700      	movs	r7, #0
    f1ac:	e5dc      	b.n	ed68 <__aeabi_dadd+0x188>
    f1ae:	4327      	orrs	r7, r4
    f1b0:	1e7c      	subs	r4, r7, #1
    f1b2:	41a7      	sbcs	r7, r4
    f1b4:	2400      	movs	r4, #0
    f1b6:	e779      	b.n	f0ac <__aeabi_dadd+0x4cc>
    f1b8:	000c      	movs	r4, r1
    f1ba:	0017      	movs	r7, r2
    f1bc:	4e0e      	ldr	r6, [pc, #56]	; (f1f8 <__aeabi_dadd+0x618>)
    f1be:	e593      	b.n	ece8 <__aeabi_dadd+0x108>
    f1c0:	000c      	movs	r4, r1
    f1c2:	0017      	movs	r7, r2
    f1c4:	e590      	b.n	ece8 <__aeabi_dadd+0x108>
    f1c6:	4656      	mov	r6, sl
    f1c8:	0023      	movs	r3, r4
    f1ca:	3e20      	subs	r6, #32
    f1cc:	40f3      	lsrs	r3, r6
    f1ce:	4699      	mov	r9, r3
    f1d0:	4653      	mov	r3, sl
    f1d2:	2b20      	cmp	r3, #32
    f1d4:	d00e      	beq.n	f1f4 <__aeabi_dadd+0x614>
    f1d6:	2340      	movs	r3, #64	; 0x40
    f1d8:	4656      	mov	r6, sl
    f1da:	1b9b      	subs	r3, r3, r6
    f1dc:	409c      	lsls	r4, r3
    f1de:	4327      	orrs	r7, r4
    f1e0:	1e7c      	subs	r4, r7, #1
    f1e2:	41a7      	sbcs	r7, r4
    f1e4:	464b      	mov	r3, r9
    f1e6:	2400      	movs	r4, #0
    f1e8:	431f      	orrs	r7, r3
    f1ea:	e75f      	b.n	f0ac <__aeabi_dadd+0x4cc>
    f1ec:	2400      	movs	r4, #0
    f1ee:	e7d2      	b.n	f196 <__aeabi_dadd+0x5b6>
    f1f0:	0017      	movs	r7, r2
    f1f2:	e5b2      	b.n	ed5a <__aeabi_dadd+0x17a>
    f1f4:	2400      	movs	r4, #0
    f1f6:	e7f2      	b.n	f1de <__aeabi_dadd+0x5fe>
    f1f8:	000007ff 	.word	0x000007ff
    f1fc:	ff7fffff 	.word	0xff7fffff

0000f200 <__aeabi_dcmpun>:
    f200:	b570      	push	{r4, r5, r6, lr}
    f202:	4e0e      	ldr	r6, [pc, #56]	; (f23c <__aeabi_dcmpun+0x3c>)
    f204:	030d      	lsls	r5, r1, #12
    f206:	031c      	lsls	r4, r3, #12
    f208:	0049      	lsls	r1, r1, #1
    f20a:	005b      	lsls	r3, r3, #1
    f20c:	0b2d      	lsrs	r5, r5, #12
    f20e:	0d49      	lsrs	r1, r1, #21
    f210:	0b24      	lsrs	r4, r4, #12
    f212:	0d5b      	lsrs	r3, r3, #21
    f214:	42b1      	cmp	r1, r6
    f216:	d004      	beq.n	f222 <__aeabi_dcmpun+0x22>
    f218:	4908      	ldr	r1, [pc, #32]	; (f23c <__aeabi_dcmpun+0x3c>)
    f21a:	2000      	movs	r0, #0
    f21c:	428b      	cmp	r3, r1
    f21e:	d008      	beq.n	f232 <__aeabi_dcmpun+0x32>
    f220:	bd70      	pop	{r4, r5, r6, pc}
    f222:	4305      	orrs	r5, r0
    f224:	2001      	movs	r0, #1
    f226:	2d00      	cmp	r5, #0
    f228:	d1fa      	bne.n	f220 <__aeabi_dcmpun+0x20>
    f22a:	4904      	ldr	r1, [pc, #16]	; (f23c <__aeabi_dcmpun+0x3c>)
    f22c:	2000      	movs	r0, #0
    f22e:	428b      	cmp	r3, r1
    f230:	d1f6      	bne.n	f220 <__aeabi_dcmpun+0x20>
    f232:	4314      	orrs	r4, r2
    f234:	0020      	movs	r0, r4
    f236:	1e44      	subs	r4, r0, #1
    f238:	41a0      	sbcs	r0, r4
    f23a:	e7f1      	b.n	f220 <__aeabi_dcmpun+0x20>
    f23c:	000007ff 	.word	0x000007ff
    f240:	682f2e2e 	.word	0x682f2e2e
    f244:	732f6c61 	.word	0x732f6c61
    f248:	682f6372 	.word	0x682f6372
    f24c:	695f6c61 	.word	0x695f6c61
    f250:	6d5f6332 	.word	0x6d5f6332
    f254:	6e79735f 	.word	0x6e79735f
    f258:	00632e63 	.word	0x00632e63
    f25c:	682f2e2e 	.word	0x682f2e2e
    f260:	732f6c61 	.word	0x732f6c61
    f264:	682f6372 	.word	0x682f6372
    f268:	695f6c61 	.word	0x695f6c61
    f26c:	00632e6f 	.word	0x00632e6f
    f270:	682f2e2e 	.word	0x682f2e2e
    f274:	732f6c61 	.word	0x732f6c61
    f278:	682f6372 	.word	0x682f6372
    f27c:	705f6c61 	.word	0x705f6c61
    f280:	632e6d77 	.word	0x632e6d77
    f284:	00000000 	.word	0x00000000
    f288:	682f2e2e 	.word	0x682f2e2e
    f28c:	732f6c61 	.word	0x732f6c61
    f290:	682f6372 	.word	0x682f6372
    f294:	735f6c61 	.word	0x735f6c61
    f298:	6d5f6970 	.word	0x6d5f6970
    f29c:	6e79735f 	.word	0x6e79735f
    f2a0:	00632e63 	.word	0x00632e63
    f2a4:	682f2e2e 	.word	0x682f2e2e
    f2a8:	732f6c61 	.word	0x732f6c61
    f2ac:	682f6372 	.word	0x682f6372
    f2b0:	745f6c61 	.word	0x745f6c61
    f2b4:	72656d69 	.word	0x72656d69
    f2b8:	0000632e 	.word	0x0000632e
    f2bc:	682f2e2e 	.word	0x682f2e2e
    f2c0:	732f6c61 	.word	0x732f6c61
    f2c4:	682f6372 	.word	0x682f6372
    f2c8:	755f6c61 	.word	0x755f6c61
    f2cc:	74726173 	.word	0x74726173
    f2d0:	6e79735f 	.word	0x6e79735f
    f2d4:	00632e63 	.word	0x00632e63
    f2d8:	682f2e2e 	.word	0x682f2e2e
    f2dc:	752f6c61 	.word	0x752f6c61
    f2e0:	736c6974 	.word	0x736c6974
    f2e4:	6372732f 	.word	0x6372732f
    f2e8:	6974752f 	.word	0x6974752f
    f2ec:	6c5f736c 	.word	0x6c5f736c
    f2f0:	2e747369 	.word	0x2e747369
    f2f4:	00000063 	.word	0x00000063
    f2f8:	682f2e2e 	.word	0x682f2e2e
    f2fc:	652f6c70 	.word	0x652f6c70
    f300:	682f6369 	.word	0x682f6369
    f304:	655f6c70 	.word	0x655f6c70
    f308:	632e6369 	.word	0x632e6369
    f30c:	00000000 	.word	0x00000000

0000f310 <_map>:
    f310:	00000008 00000028 682f2e2e 722f6c70     ....(...../hpl/r
    f320:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f330:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f340:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0000f34c <_i2cms>:
    f34c:	00000002 00200014 00000100 00003736     ...... .....67..
    f35c:	000000d7 02dc6c00                       .....l..

0000f364 <_usarts>:
    f364:	00000004 40010004 00030000 0000d555     .......@....U...

0000f374 <sercomspi_regs>:
    f374:	0020000c 00020000 00000000 000000fe     .. .............
    f384:	0020000c 00020000 00000000 03000003     .. .............
    f394:	682f2e2e 742f6c70 70682f63 63745f6c     ../hpl/tc/hpl_tc
    f3a4:	0000632e 00002d26 00002d3a 00002d52     .c..&-..:-..R-..
    f3b4:	00002d6a 00002d94 00002dae 00002e6c     j-...-...-..l...
    f3c4:	00002dd8 00002dfc 00002e06 00002e10     .-...-..........
    f3d4:	00002e28 00002e4e 0000354c 00003556     (...N...L5..V5..
    f3e4:	00003560 00003568 00003572 0000357c     `5..h5..r5..|5..

0000f3f4 <ExCvt>:
    f3f4:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
    f404:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    f414:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    f424:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    f434:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    f444:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    f454:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    f464:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    f474:	33544146 20202032 00000000 3a2c2b2a     FAT32   ....*+,:
    f484:	3e3d3c3b 227c5d5b 00007f3f              ;<=>[]|"?...

0000f490 <favicon_ico>:
    f490:	474e5089 0a1a0a0d 0d000000 52444849     .PNG........IHDR
    f4a0:	20000000 20000000 00000608 7a7a7300     ... ... .....szz
    f4b0:	000000f4 49427304 08080854 64087c08     .....sBIT....|.d
    f4c0:	00000088 59487009 00000073 000000ec     .....pHYs.......
    f4d0:	287901ec 0000bd71 45741900 6f537458     ..y(q.....tEXtSo
    f4e0:	61777466 77006572 692e7777 63736b6e     ftware.www.inksc
    f4f0:	2e657061 9b67726f 001a3cee 49ff0400     ape.org..<.....I
    f500:	58544144 7997c585 1c57144c ec333fc7     DATX...yL.W..?3.
    f510:	2ebb5cb2 8882a2b0 45141647 d62ecf1a     .\......G..E....
    f520:	61ed5ab6 d5624a2b 1de34da6 dad46aaf     .Z.a+Jb..M...j..
    f530:	6351b5a4 5a969b1b c6a26adb a53136da     ..Qc...Z.j...61.
    f540:	21a2d135 278d623d ada236b6 8820ae88     5..!=b.'.6.... .
    f550:	22c8825c ccc7b2c8 40ff4cce a8239017     \..".....L.@..#.
    f560:	4cffbf68 7efdef7e 3379fbef 819bdef3     h..L~..~..y3....
    f570:	ddc259ff fc10106b 80ddbd84 24860047     .Y..k.......G..$
    f580:	16fe2626 3da31313 f2f2f749 b76ed172     &&.....=I...r.n.
    f590:	8480eaa7 b8d4d4d4 e2c763b1 aca8b972     .........c..r...
    f5a0:	9336ecac 2458d8d8 74e9c249 08d8d8d2     ..6...X$I..t....
    f5b0:	7d3e9f40 64ad5ab0 b7626666 5ae807db     @.>}.Z.dffb....Z
    f5c0:	b6deec16 dd6d578e 7dac2377 3e5c384d     .....Wm.w#.}M8\>
    f5d0:	9c246a2a 8f26beb5 76db02fd 228a2167     *j$...&....vg!."
    f5e0:	2200ad00 a70b0a4d 001b7405 37b03034     ..."M....t..40.7
    f5f0:	10004e8c 72a659d0 56c1d2e6 eb76ba19     .N...Y.r...V..v.
    f600:	dbadd13a 782fa70a a8922bc8 d0d155ae     :...../x.+...U..
    f610:	30053088 13206074 33d10546 0809e3bc     .0.0t` .F..3....
    f620:	6d36c601 b1c8065d 50f6f97b 9110c603     ..6m]...{..P....
    f630:	b10647e7 88899a60 0aaa221e 8a3ed565     .G..`...."..e.>.
    f640:	efd664ca 69248dba 62619e2c 4ba1a274     .d....$i,.abt..K
    f650:	b00a76e3 7a1ddf7d 2c5c8846 88310894     .v..}..zF.\,..1.
    f660:	8222b67c dfd110b0 034f75bf 1be6ab00     |."......uO.....
    f670:	79eac6b1 a7042539 77f3654b ec3bec75     ...y9%..Ke.wu.;.
    f680:	11a5e3e4 1d0a0504 d8800f0d a99ce759     ............Y...
    f690:	dfdcec61 1922a5c0 2b4370db 9972a2f3     a....."..pC+..r.
    f6a0:	fc7da733 fb34dd95 110b0a7b 822cbcd9     3.}...4.{.....,.
    f6b0:	31852fd9 ea2dc367 01c3ea9d 778d3ec8     ./.1g.-......>.w
    f6c0:	c765acbf fa7e16fb b17b0a24 b74dfccc     ..e...~.$.{...M.
    f6d0:	352abdc8 3290cbf5 67b8c75e db4ac875     ..*5...2^..gu.J.
    f6e0:	621a8e59 6605c3e0 835a7d96 b2bc7724     Y..b...f.}Z.$w..
    f6f0:	a8a805da ba4ef1f6 d1a48f03 830eb7af     ......N.........
    f700:	ebe9605e 89aeb626 4689d0e4 083ba456     ^`..&......FV.;.
    f710:	6f18120e 2dbc640b dbfdc190 46e1927f     ...o.d.-.......F
    f720:	95805111 3cb81c5b a9b443ed 2361e80c     .Q..[..<.C....a#
    f730:	37c150d6 f36b0f9f 9b0246d6 371b803e     .P.7..k..F..>..7
    f740:	22b1981b 02d5eb8b e64dcf89 6c55cb99     ..."......M...Ul
    f750:	9b54fc5c c147fbc1 639b3b8f 39d65bd5     \.T...G..;.c.[.9
    f760:	00742e80 73fdd773 2eda3a37 8ac93df1     ..t.s..s7:...=..
    f770:	0f747448 642baae4 b8a4ac5d fcd3a4b0     Htt...+d].......
    f780:	021d1e96 557b7ecc 4ee90697 9e0aba75     .....~{U...Nu...
    f790:	27781e84 79fd507c ff4a77f8 fb9ff6ce     ..x'|P.y.wJ.....
    f7a0:	8d9c29b2 0fb476db 2e42ee70 8d3b1ebf     .)...v..p.B...;.
    f7b0:	3b98144e 8d010d2b 46befb83 4dc62553     N..;+......FS%.M
    f7c0:	f2524998 21451418 af1d3d3d 8a4a4bd7     .IR...E!==...KJ.
    f7d0:	70d54d0d 7bfc5dbb 48c5b721 a7a7d31a     .M.p.].{!..H....
    f7e0:	cc9c9c91 c967f395 80011a1c 6f34f490     ......g.......4o
    f7f0:	2ce4edec cd9a3ac8 c5ed1f0b 8c8778db     ...,.:.......x..
    f800:	a66356af 1a6b5d92 cc8a8531 52419f5a     .Vc..]k.1...Z.AR
    f810:	0e1c18f2 21a16107 626938bc 6270ca8b     .....a.!.8ib..pb
    f820:	a3f8c6fb 2e7afaba 9c92e6e6 aaa28c9c     ......z.........
    f830:	ee7a735c 94e085ba f79696e4 434d023d     \sz.........=.MC
    f840:	49141555 02451442 6b2bc008 f346aa28     U..IB.E...+k(.F.
    f850:	251753c7 14dfe534 d5095e65 c37f1003     .S.%4...e^......
    f860:	636f79ce a73300c7 d373224c 1d7a0c3c     .yoc..3.L"s.<.z.
    f870:	01a66773 76c77ab0 899b927c c004de53     sg...z.v|...S...
    f880:	f6e0b162 fc763878 b2de8764 5a5a47cf     b...x8v.d....GZZ
    f890:	1816bd53 d79af040 85111be8 f82664c5     S...@........d&.
    f8a0:	dcab6e6c 83890056 9c1c4813 fe612ad0     ln..V....H...*a.
    f8b0:	62ad0d92 bb591451 e6cebdf6 10e64ade     ...bQ.Y......J..
    f8c0:	3fbf9713 207d6dce 7c10a6aa e018ea47     ...?.m} ...|G...
    f8d0:	82c96871 e7e7e495 7d35f3e3 f95ff511     qh........5}.._.
    f8e0:	f3805b56 70e1cee7 238dfc38 edc08c47     V[.....p8..#G...
    f8f0:	b8ad7376 d3c78f18 151540ad 16151415     vs.......@......
    f900:	d3939392 0a69a00c 8844d29a afd72500     ......i...D..%..
    f910:	b20a28a1 ef6e69e4 47474546 0335a023     .(...in.FEGG#.5.
    f920:	19c39b84 5e106834 633087af d51401f3     ....4h.^..0c....
    f930:	9bb757ab 0d252403 49d4fb23 01aa803f     .W...$%.#..I?...
    f940:	94f1f1f1 b5609694 d3163fc6 75adaa96     ......`..?.....u
    f950:	0064fb20 f1cc0055 1ea3d6f1 259fa7b7      .d.U..........%
    f960:	d3a8d232 9589fdeb 933e5555 b0f158d1     2.......UU>..X..
    f970:	c78f6e46 f6043060 df358636 43871ad5     Fn..`0..6.5....C
    f980:	15f5ebd3 17d6a69a e89d5c14 e2e25ddf     .........\...]..
    f990:	5f2cf6e2 c59e6cbe 6f27f162 6145f2d9     ..,_.l..b.'o..Ea
    f9a0:	f59e5e5e c9800161 fc2d168b f9b366c5     ^^..a.....-..f..
    f9b0:	43f19567 471fcd46 2a070c8e 7432c5a1     g..CF..G...*..2t
    f9c0:	0ea75cb9 8a79f81c 57f66cd9 95d5d5d7     .\....y..l.W....
    f9d0:	4039823e 271389e1 cb4b4aab 05f900fc     >.9@...'.JK.....
    f9e0:	dd400d05 fdfef8bd b7d00c35 4780eb88     ..@.....5......G
    f9f0:	ffba55fd c809d7c7 793ee41d 971e07fd     .U........>y....
    fa00:	2862fbd7 0000d764 45490000 42ae444e     ..b(d.....IEND.B
    fa10:	00008260 2e636261 00747874 77207449     `...abc.txt.It w
    fa20:	736b726f 000a0d21 20544547 0000202f     orks!...GET / ..
    fa30:	20544547 7661662f 6e6f6369 6f63692e     GET /favicon.ico
    fa40:	00000000 50545448 312e312f 30303220     ....HTTP/1.1 200
    fa50:	0d4b4f20 6e6f430a 746e6574 7079542d      OK..Content-Typ
    fa60:	69203a65 6567616d 692d782f 0d6e6f63     e: image/x-icon.
    fa70:	000a0d0a 20544547 7465732f 6c61765f     ....GET /set_val
    fa80:	00000073 3d706d61 76266625 3d746c6f     s...amp=%f&volt=
    fa90:	00006625 50545448 312e312f 30303220     %f..HTTP/1.1 200
    faa0:	0d4b4f20 6e6f430a 746e6574 7079542d      OK..Content-Typ
    fab0:	61203a65 696c7070 69746163 6a2f6e6f     e: application/j
    fac0:	0d6e6f73 7b0a0d0a 63757322 73736563     son....{"success
    fad0:	72743a22 007d6575 20544547 7465672f     ":true}.GET /get
    fae0:	6c61765f 00000073 50545448 312e312f     _vals...HTTP/1.1
    faf0:	30303220 0d4b4f20 6e6f430a 746e6574      200 OK..Content
    fb00:	7079542d 61203a65 696c7070 69746163     -Type: applicati
    fb10:	6a2f6e6f 0d6e6f73 7b0a0d0a 706d6122     on/json....{"amp
    fb20:	2e253a22 222c6632 746c6f76 2e253a22     ":%.2f,"volt":%.
    fb30:	222c6632 74746177 2e253a22 222c6632     2f,"watt":%.2f,"
    fb40:	44706d61 3a224d4d 66322e25 6f76222c     ampDMM":%.2f,"vo
    fb50:	4d44746c 253a224d 2c66322e 74756f22     ltDMM":%.2f,"out
    fb60:	74617453 253a2265 222c2064 226d6572     State":%d ,"rem"
    fb70:	2c64253a 72726522 64253a22 6e69222c     :%d,"err":%d,"in
    fb80:	253a2230 69222c64 3a22316e 222c6425     0":%d,"in1":%d,"
    fb90:	22326e69 2064253a 0000007d 20544547     in2":%d }...GET 
    fba0:	6e6f632f 6c6f7274 00000000 69766564     /control....devi
    fbb0:	253d6563 5d265e5b 74636126 3d6e6f69     ce=%[^&]&action=
    fbc0:	00007325 006e6166 00006e6f 0066666f     %s..fan.on..off.
    fbd0:	006d6572 00757370                       rem.psu.

0000fbd8 <psu_page>:
    fbd8:	50545448 312e312f 30303220 0d4b4f20     HTTP/1.1 200 OK.
    fbe8:	6e6f430a 746e6574 7079542d 74203a65     .Content-Type: t
    fbf8:	2f747865 6c6d7468 0a0d0a0d 4f44213c     ext/html....<!DO
    fc08:	50595443 74682045 0a3e6c6d 6d74683c     CTYPE html>.<htm
    fc18:	616c206c 223d676e 3e226e65 65683c0a     l lang="en">.<he
    fc28:	0a3e6461 74656d3c 68632061 65737261     ad>.<meta charse
    fc38:	55223d74 382d4654 3c0a3e22 6c746974     t="UTF-8">.<titl
    fc48:	6f503e65 20726577 70707553 4320796c     e>Power Supply C
    fc58:	72746e6f 2f3c6c6f 6c746974 3c0a3e65     ontrol</title>.<
    fc68:	6c797473 620a3e65 2079646f 6f660a7b     style>.body {.fo
    fc78:	662d746e 6c696d61 41203a79 6c616972     nt-family: Arial
    fc88:	6173202c 732d736e 66697265 69640a3b     , sans-serif;.di
    fc98:	616c7073 66203a79 3b78656c 656c660a     splay: flex;.fle
    fca8:	69642d78 74636572 3a6e6f69 6c6f6320     x-direction: col
    fcb8:	3b6e6d75 696c610a 692d6e67 736d6574     umn;.align-items
    fcc8:	6563203a 7265746e 61700a3b 6e696464     : center;.paddin
    fcd8:	32203a67 3b787030 6361620a 6f72676b     g: 20px;.backgro
    fce8:	3a646e75 30662320 30663066 0a7d0a3b     und: #f0f0f0;.}.
    fcf8:	6e6f632e 6e696174 7b207265 78616d0a     .container {.max
    fd08:	6469772d 203a6874 70303034 770a3b78     -width: 400px;.w
    fd18:	68746469 3031203a 0a3b2530 6b636162     idth: 100%;.back
    fd28:	756f7267 203a646e 74696877 700a3b65     ground: white;.p
    fd38:	69646461 203a676e 78703032 6f620a3b     adding: 20px;.bo
    fd48:	72656472 6461722d 3a737569 70303120     rder-radius: 10p
    fd58:	620a3b78 732d786f 6f646168 30203a77     x;.box-shadow: 0
    fd68:	31203020 20787030 61626772 202c3028      0 10px rgba(0, 
    fd78:	30202c30 2e30202c 0a3b2931 742e0a7d     0, 0, 0.1);.}..t
    fd88:	656c7469 740a7b20 2d747865 67696c61     itle {.text-alig
    fd98:	63203a6e 65746e65 6d0a3b72 69677261     n: center;.margi
    fda8:	6f622d6e 6d6f7474 3032203a 0a3b7870     n-bottom: 20px;.
    fdb8:	722e0a7d 202c776f 706e692e 722d7475     }..row, .input-r
    fdc8:	202c776f 6572702e 2d746573 20776f72     ow, .preset-row 
    fdd8:	69640a7b 616c7073 66203a79 3b78656c     {.display: flex;
    fde8:	73756a0a 79666974 6e6f632d 746e6574     .justify-content
    fdf8:	7073203a 2d656361 77746562 3b6e6565     : space-between;
    fe08:	696c610a 692d6e67 736d6574 6563203a     .align-items: ce
    fe18:	7265746e 616d0a3b 6e696772 746f622d     nter;.margin-bot
    fe28:	3a6d6f74 70303120 7d0a3b78 6f722e0a     tom: 10px;.}..ro
    fe38:	616c2077 2c6c6562 6e692e20 2d747570     w label, .input-
    fe48:	20776f72 6562616c 2e202c6c 73657270     row label, .pres
    fe58:	722d7465 6c20776f 6c656261 660a7b20     et-row label {.f
    fe68:	3a78656c 0a3b3120 722e0a7d 6920776f     lex: 1;.}..row i
    fe78:	7475706e 692e202c 7475706e 776f722d     nput, .input-row
    fe88:	706e6920 202c7475 6572702e 2d746573      input, .preset-
    fe98:	20776f72 75706e69 0a7b2074 74646977     row input {.widt
    fea8:	31203a68 78703030 65740a3b 612d7478     h: 100px;.text-a
    feb8:	6e67696c 6563203a 7265746e 0a7d0a3b     lign: center;.}.
    fec8:	7475622e 2d6e6f74 20776f72 69640a7b     .button-row {.di
    fed8:	616c7073 66203a79 3b78656c 73756a0a     splay: flex;.jus
    fee8:	79666974 6e6f632d 746e6574 7073203a     tify-content: sp
    fef8:	2d656361 77746562 3b6e6565 72616d0a     ace-between;.mar
    ff08:	2d6e6967 3a706f74 70303220 7d0a3b78     gin-top: 20px;.}
    ff18:	75622e0a 6e6f7474 770a7b20 68746469     ..button {.width
    ff28:	3834203a 700a3b25 69646461 203a676e     : 48%;.padding: 
    ff38:	78703031 61620a3b 72676b63 646e756f     10px;.background
    ff48:	3023203a 66623730 630a3b66 726f6c6f     : #007bff;.color
    ff58:	6877203a 3b657469 726f620a 3a726564     : white;.border:
    ff68:	6e6f6e20 620a3b65 6564726f 61722d72      none;.border-ra
    ff78:	73756964 7035203a 630a3b78 6f737275     dius: 5px;.curso
    ff88:	70203a72 746e696f 0a3b7265 622e0a7d     r: pointer;.}..b
    ff98:	6f747475 6f683a6e 20726576 61620a7b     utton:hover {.ba
    ffa8:	72676b63 646e756f 3023203a 62363530     ckground: #0056b
    ffb8:	7d0a3b33 72702e0a 74657365 776f722d     3;.}..preset-row
    ffc8:	640a7b20 6c707369 203a7961 78656c66      {.display: flex
    ffd8:	756a0a3b 66697473 6f632d79 6e65746e     ;.justify-conten
    ffe8:	73203a74 65636170 7465622d 6e656577     t: space-between
    fff8:	616d0a3b 6e696772 706f742d 3032203a     ;.margin-top: 20
   10008:	0a3b7870 702e0a7d 65736572 75622d74     px;.}..preset-bu
   10018:	6e6f7474 770a7b20 68746469 3233203a     tton {.width: 32
   10028:	700a3b25 69646461 203a676e 78703031     %;.padding: 10px
   10038:	61620a3b 72676b63 646e756f 3223203a     ;.background: #2
   10048:	34376138 630a3b35 726f6c6f 6877203a     8a745;.color: wh
   10058:	3b657469 726f620a 3a726564 6e6f6e20     ite;.border: non
   10068:	620a3b65 6564726f 61722d72 73756964     e;.border-radius
   10078:	7035203a 630a3b78 6f737275 70203a72     : 5px;.cursor: p
   10088:	746e696f 0a3b7265 702e0a7d 65736572     ointer;.}..prese
   10098:	75622d74 6e6f7474 766f683a 7b207265     t-button:hover {
   100a8:	6361620a 6f72676b 3a646e75 31322320     .background: #21
   100b8:	38333838 0a7d0a3b 7065732e 74617261     8838;.}..separat
   100c8:	7b20726f 6469770a 203a6874 25303031     or {.width: 100%
   100d8:	65680a3b 74686769 7031203a 620a3b78     ;.height: 1px;.b
   100e8:	676b6361 6e756f72 23203a64 3b646464     ackground: #ddd;
   100f8:	72616d0a 3a6e6967 70303220 3b302078     .margin: 20px 0;
   10108:	2e0a7d0a 20776f72 6170732e 2d646563     .}..row .spaced-
   10118:	75706e69 0a7b2074 6772616d 6c2d6e69     input {.margin-l
   10128:	3a746665 70303120 7d0a3b78 74732e0a     eft: 10px;.}..st
   10138:	73757461 646e692d 74616369 7b20726f     atus-indicator {
   10148:	6469770a 203a6874 78703032 65680a3b     .width: 20px;.he
   10158:	74686769 3032203a 0a3b7870 64726f62     ight: 20px;.bord
   10168:	722d7265 75696461 35203a73 0a3b2530     er-radius: 50%;.
   10178:	6b636162 756f7267 203a646e 63636323     background: #ccc
   10188:	2a2f203b 66654420 746c7561 206f7420     ; /* Default to 
   10198:	79617267 0a2f2a20 692e0a7d 6369646e     gray */.}..indic
   101a8:	726f7461 6e6f632d 6e696174 7b207265     ator-container {
   101b8:	7369640a 79616c70 6c66203a 0a3b7865     .display: flex;.
   101c8:	78656c66 7269642d 69746365 203a6e6f     flex-direction: 
   101d8:	756c6f63 0a3b6e6d 67696c61 74692d6e     column;.align-it
   101e8:	3a736d65 6e656320 3b726574 2e0a7d0a     ems: center;.}..
   101f8:	69646e69 6f746163 616c2d72 206c6562     indicator-label 
   10208:	616d0a7b 6e696772 706f742d 7035203a     {.margin-top: 5p
   10218:	740a3b78 2d747865 67696c61 63203a6e     x;.text-align: c
   10228:	65746e65 7d0a3b72 68632e0a 626b6365     enter;.}..checkb
   10238:	632d786f 61746e6f 72656e69 640a7b20     ox-container {.d
   10248:	6c707369 203a7961 78656c66 6c610a3b     isplay: flex;.al
   10258:	2d6e6769 6d657469 63203a73 65746e65     ign-items: cente
   10268:	6d0a3b72 69677261 656c2d6e 203a7466     r;.margin-left: 
   10278:	78703031 0a7d0a3b 6568632e 6f626b63     10px;.}..checkbo
   10288:	6f632d78 6961746e 2072656e 6562616c     x-container labe
   10298:	0a7b206c 6772616d 6c2d6e69 3a746665     l {.margin-left:
   102a8:	78703520 0a7d0a3b 74732f3c 3e656c79      5px;.}.</style>
   102b8:	682f3c0a 3e646165 6f623c0a 0a3e7964     .</head>.<body>.
   102c8:	7669643c 616c6320 223d7373 746e6f63     <div class="cont
   102d8:	656e6961 0a3e2272 2031683c 73616c63     ainer">.<h1 clas
   102e8:	74223d73 656c7469 6f503e22 20726577     s="title">Power 
   102f8:	70707553 4320796c 72746e6f 2f3c6c6f     Supply Control</
   10308:	0a3e3168 7669643c 616c6320 223d7373     h1>.<div class="
   10318:	22776f72 6c3c0a3e 6c656261 6572503e     row">.<label>Pre
   10328:	20746573 20706d41 4d44202f 2f3c3a4d     set Amp / DMM:</
   10338:	6562616c 3c0a3e6c 75706e69 79742074     label>.<input ty
   10348:	223d6570 74786574 64692022 6d61223d     pe="text" id="am
   10358:	65732d70 72202274 6f646165 20796c6e     p-set" readonly 
   10368:	73616c63 73223d73 65636170 6e692d64     class="spaced-in
   10378:	22747570 693c0a3e 7475706e 70797420     put">.<input typ
   10388:	74223d65 22747865 3d646920 706d6122     e="text" id="amp
   10398:	6d6d642d 65722022 6e6f6461 6320796c     -dmm" readonly c
   103a8:	7373616c 7073223d 64656361 706e692d     lass="spaced-inp
   103b8:	3e227475 642f3c0a 0a3e7669 7669643c     ut">.</div>.<div
   103c8:	616c6320 223d7373 22776f72 6c3c0a3e      class="row">.<l
   103d8:	6c656261 6572503e 20746573 746c6f56     abel>Preset Volt
   103e8:	44202f20 3c3a4d4d 62616c2f 0a3e6c65      / DMM:</label>.
   103f8:	706e693c 74207475 3d657079 78657422     <input type="tex
   10408:	69202274 76223d64 2d746c6f 22746573     t" id="volt-set"
   10418:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   10428:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   10438:	706e693c 74207475 3d657079 78657422     <input type="tex
   10448:	69202274 76223d64 2d746c6f 226d6d64     t" id="volt-dmm"
   10458:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   10468:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   10478:	69642f3c 3c0a3e76 20766964 73616c63     </div>.<div clas
   10488:	72223d73 3e22776f 616c3c0a 3e6c6562     s="row">.<label>
   10498:	74746157 57202d20 20747461 3a4d4d44     Watt - Watt DMM:
   104a8:	616c2f3c 3e6c6562 6e693c0a 20747570     </label>.<input 
   104b8:	65707974 6574223d 20227478 223d6469     type="text" id="
   104c8:	74746177 7369642d 79616c70 65722022     watt-display" re
   104d8:	6e6f6461 0a3e796c 69642f3c 3c0a3e76     adonly>.</div>.<
   104e8:	20766964 73616c63 69223d73 7475706e     div class="input
   104f8:	776f722d 3c0a3e22 6562616c 6f66206c     -row">.<label fo
   10508:	61223d72 692d706d 7475706e 65533e22     r="amp-input">Se
   10518:	654e2074 6d412077 2f3c3a70 6562616c     t New Amp:</labe
   10528:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   10538:	74786574 64692022 6d61223d 6e692d70     text" id="amp-in
   10548:	22747570 2f3c0a3e 3e766964 69643c0a     put">.</div>.<di
   10558:	6c632076 3d737361 706e6922 722d7475     v class="input-r
   10568:	3e22776f 616c3c0a 206c6562 3d726f66     ow">.<label for=
   10578:	6c6f7622 6e692d74 22747570 7465533e     "volt-input">Set
   10588:	77654e20 6c6f5620 2f3c3a74 6562616c      New Volt:</labe
   10598:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   105a8:	74786574 64692022 6f76223d 692d746c     text" id="volt-i
   105b8:	7475706e 3c0a3e22 7669642f 643c0a3e     nput">.</div>.<d
   105c8:	63207669 7373616c 7562223d 6e6f7474     iv class="button
   105d8:	776f722d 3c0a3e22 20766964 73616c63     -row">.<div clas
   105e8:	69223d73 6369646e 726f7461 6e6f632d     s="indicator-con
   105f8:	6e696174 3e227265 69643c0a 6c632076     tainer">.<div cl
   10608:	3d737361 61747322 2d737574 69646e69     ass="status-indi
   10618:	6f746163 69202272 73223d64 75746174     cator" id="statu
   10628:	6e692d73 61636964 22726f74 642f3c3e     s-indicator"></d
   10638:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   10648:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   10658:	74754f3e 69642f3c 3c0a3e76 7669642f     >Out</div>.</div
   10668:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   10678:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   10688:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   10698:	74617473 692d7375 6369646e 726f7461     status-indicator
   106a8:	64692022 7265223d 6e692d72 61636964     " id="err-indica
   106b8:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   106c8:	616c6320 223d7373 69646e69 6f746163      class="indicato
   106d8:	616c2d72 226c6562 7272453e 69642f3c     r-label">Err</di
   106e8:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   106f8:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   10708:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   10718:	616c6320 223d7373 74617473 692d7375      class="status-i
   10728:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   10738:	6e692d30 61636964 22726f74 642f3c3e     0-indicator"></d
   10748:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   10758:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   10768:	304e493e 69642f3c 3c0a3e76 7669642f     >IN0</div>.</div
   10778:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   10788:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   10798:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   107a8:	74617473 692d7375 6369646e 726f7461     status-indicator
   107b8:	64692022 6e69223d 6e692d31 61636964     " id="in1-indica
   107c8:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   107d8:	616c6320 223d7373 69646e69 6f746163      class="indicato
   107e8:	616c2d72 226c6562 314e493e 69642f3c     r-label">IN1</di
   107f8:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   10808:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   10818:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   10828:	616c6320 223d7373 74617473 692d7375      class="status-i
   10838:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   10848:	6e692d32 61636964 22726f74 642f3c3e     2-indicator"></d
   10858:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   10868:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   10878:	324e493e 69642f3c 3c0a3e76 7669642f     >IN2</div>.</div
   10888:	3c0a0a3e 20766964 73616c63 63223d73     >..<div class="c
   10898:	6b636568 2d786f62 746e6f63 656e6961     heckbox-containe
   108a8:	0a3e2272 706e693c 74207475 3d657079     r">.<input type=
   108b8:	65686322 6f626b63 69202278 72223d64     "checkbox" id="r
   108c8:	746f6d65 6f632d65 6f72746e 68632d6c     emote-control-ch
   108d8:	626b6365 3e22786f 616c3c0a 206c6562     eckbox">.<label 
   108e8:	3d726f66 6d657222 2d65746f 746e6f63     for="remote-cont
   108f8:	2d6c6f72 63656863 786f626b 65523e22     rol-checkbox">Re
   10908:	65746f6d 6e6f4320 6c6f7274 616c2f3c     mote Control</la
   10918:	3e6c6562 642f3c0a 0a3e7669 69642f3c     bel>.</div>.</di
   10928:	0a0a3e76 7669643c 616c6320 223d7373     v>..<div class="
   10938:	74747562 722d6e6f 3e22776f 75623c0a     button-row">.<bu
   10948:	6e6f7474 616c6320 223d7373 74747562     tton class="butt
   10958:	20226e6f 6c797473 6d223d65 69677261     on" style="margi
   10968:	656c2d6e 203a7466 6f747561 6f20223b     n-left: auto;" o
   10978:	696c636e 223d6b63 56746573 65756c61     nclick="setValue
   10988:	22292873 7465533e 6c615620 3c736575     s()">Set Values<
   10998:	7475622f 3e6e6f74 642f3c0a 0a3e7669     /button>.</div>.
   109a8:	7669643c 616c6320 223d7373 74747562     <div class="butt
   109b8:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   109c8:	616c6320 223d7373 74747562 20226e6f      class="button" 
   109d8:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   109e8:	69766544 27286563 27757370 6e6f272c     Device('psu','on
   109f8:	3e222927 6e727554 55535020 3c6e4f20     ')">Turn PSU On<
   10a08:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   10a18:	616c6320 223d7373 74747562 20226e6f      class="button" 
   10a28:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   10a38:	69766544 27286563 27757370 666f272c     Device('psu','of
   10a48:	22292766 7275543e 5350206e 664f2055     f')">Turn PSU Of
   10a58:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   10a68:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   10a78:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   10a88:	7669643c 616c6320 223d7373 74747562     <div class="butt
   10a98:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   10aa8:	616c6320 223d7373 74747562 20226e6f      class="button" 
   10ab8:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   10ac8:	69766544 27286563 276e6166 6e6f272c     Device('fan','on
   10ad8:	3e222927 6e727554 6e614620 3c6e4f20     ')">Turn Fan On<
   10ae8:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   10af8:	616c6320 223d7373 74747562 20226e6f      class="button" 
   10b08:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   10b18:	69766544 27286563 276e6166 666f272c     Device('fan','of
   10b28:	22292766 7275543e 6146206e 664f206e     f')">Turn Fan Of
   10b38:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   10b48:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   10b58:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   10b68:	7669643c 616c6320 223d7373 73657270     <div class="pres
   10b78:	722d7465 3e22776f 75623c0a 6e6f7474     et-row">.<button
   10b88:	616c6320 223d7373 73657270 622d7465      class="preset-b
   10b98:	6f747475 6f20226e 696c636e 223d6b63     utton" onclick="
   10ba8:	50746573 65736572 29312874 56353e22     setPreset(1)">5V
   10bb8:	3c413120 7475622f 3e6e6f74 75623c0a      1A</button>.<bu
   10bc8:	6e6f7474 616c6320 223d7373 73657270     tton class="pres
   10bd8:	622d7465 6f747475 6f20226e 696c636e     et-button" oncli
   10be8:	223d6b63 50746573 65736572 29322874     ck="setPreset(2)
   10bf8:	32313e22 41322056 75622f3c 6e6f7474     ">12V 2A</button
   10c08:	623c0a3e 6f747475 6c63206e 3d737361     >.<button class=
   10c18:	65727022 2d746573 74747562 20226e6f     "preset-button" 
   10c28:	6c636e6f 3d6b6369 74657322 73657250     onclick="setPres
   10c38:	33287465 323e2229 32205634 622f3c41     et(3)">24V 2A</b
   10c48:	6f747475 3c0a3e6e 7669642f 2f3c0a3e     utton>.</div>.</
   10c58:	3e766964 63733c0a 74706972 75660a3e     div>.<script>.fu
   10c68:	6974636e 66206e6f 68637465 756c6156     nction fetchValu
   10c78:	29287365 660a7b20 68637465 672f2728     es() {.fetch('/g
   10c88:	765f7465 27736c61 742e0a29 286e6568     et_vals')..then(
   10c98:	70736572 65736e6f 203e3d20 70736572     response => resp
   10ca8:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   10cb8:	64286e65 20617461 7b203e3d 636f640a     en(data => {.doc
   10cc8:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   10cd8:	64497942 6d612728 65732d70 2e292774     ById('amp-set').
   10ce8:	756c6176 203d2065 61746164 706d612e     value = data.amp
   10cf8:	466f742e 64657869 3b293228 636f640a     .toFixed(2);.doc
   10d08:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   10d18:	64497942 6f762728 732d746c 29277465     ById('volt-set')
   10d28:	6c61762e 3d206575 74616420 6f762e61     .value = data.vo
   10d38:	742e746c 7869466f 32286465 640a3b29     lt.toFixed(2);.d
   10d48:	6d75636f 2e746e65 45746567 656d656c     ocument.getEleme
   10d58:	7942746e 27286449 74746177 7369642d     ntById('watt-dis
   10d68:	79616c70 762e2927 65756c61 64203d20     play').value = d
   10d78:	2e617461 74746177 466f742e 64657869     ata.watt.toFixed
   10d88:	3b293228 636f640a 6e656d75 65672e74     (2);.document.ge
   10d98:	656c4574 746e656d 64497942 6d612728     tElementById('am
   10da8:	6d642d70 2e29276d 756c6176 203d2065     p-dmm').value = 
   10db8:	61746164 706d612e 2e4d4d44 69466f74     data.ampDMM.toFi
   10dc8:	28646578 0a3b2932 75636f64 746e656d     xed(2);.document
   10dd8:	7465672e 6d656c45 42746e65 28644979     .getElementById(
   10de8:	6c6f7627 6d642d74 2e29276d 756c6176     'volt-dmm').valu
   10df8:	203d2065 61746164 6c6f762e 4d4d4474     e = data.voltDMM
   10e08:	466f742e 64657869 3b293228 2f2f0a0a     .toFixed(2);..//
   10e18:	64705520 20657461 20656874 74617473      Update the stat
   10e28:	69207375 6369646e 726f7461 6c6f6320     us indicator col
   10e38:	6220726f 64657361 206e6f20 5374756f     or based on outS
   10e48:	65746174 6e6f630a 73207473 75746174     tate.const statu
   10e58:	646e4973 74616369 3d20726f 636f6420     sIndicator = doc
   10e68:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   10e78:	64497942 74732728 73757461 646e692d     ById('status-ind
   10e88:	74616369 2927726f 66690a3b 61642820     icator');.if (da
   10e98:	6f2e6174 74537475 20657461 203d3d3d     ta.outState === 
   10ea8:	7b202930 6174730a 49737574 6369646e     0) {.statusIndic
   10eb8:	726f7461 7974732e 622e656c 676b6361     ator.style.backg
   10ec8:	6e756f72 203d2064 63632327 203b2763     round = '#ccc'; 
   10ed8:	67202f2f 0a796172 6c65207d 69206573     // gray.} else i
   10ee8:	64282066 2e617461 5374756f 65746174     f (data.outState
   10ef8:	3d3d3d20 20293120 74730a7b 73757461      === 1) {.status
   10f08:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   10f18:	6b636162 756f7267 3d20646e 32232720     background = '#2
   10f28:	34376138 203b2735 67202f2f 6e656572     8a745'; // green
   10f38:	65207d0a 2065736c 28206669 61746164     .} else if (data
   10f48:	74756f2e 74617453 3d3d2065 2932203d     .outState === 2)
   10f58:	730a7b20 75746174 646e4973 74616369      {.statusIndicat
   10f68:	732e726f 656c7974 6361622e 6f72676b     or.style.backgro
   10f78:	20646e75 2327203d 35336364 3b273534     und = '#dc3545';
   10f88:	202f2f20 0a646572 2f0a0a7d 7055202f      // red.}..// Up
   10f98:	65746164 65687420 72726520 6920726f     date the error i
   10fa8:	6369646e 726f7461 6c6f6320 6220726f     ndicator color b
   10fb8:	64657361 206e6f20 0a727265 736e6f63     ased on err.cons
   10fc8:	72652074 646e4972 74616369 3d20726f     t errIndicator =
   10fd8:	636f6420 6e656d75 65672e74 656c4574      document.getEle
   10fe8:	746e656d 64497942 72652728 6e692d72     mentById('err-in
   10ff8:	61636964 27726f74 650a3b29 6e497272     dicator');.errIn
   11008:	61636964 2e726f74 6c797473 61622e65     dicator.style.ba
   11018:	72676b63 646e756f 64203d20 2e617461     ckground = data.
   11028:	20727265 203d3d3d 203f2031 63642327     err === 1 ? '#dc
   11038:	35343533 203a2027 63632327 203b2763     3545' : '#ccc'; 
   11048:	72202f2f 69206465 72652066 2c726f72     // red if error,
   11058:	61726720 746f2079 77726568 0a657369      gray otherwise.
   11068:	202f2f0a 61647055 74206574 49206568     .// Update the I
   11078:	202c304e 2c314e49 324e4920 646e6920     N0, IN1, IN2 ind
   11088:	74616369 2073726f 65736162 6e6f2064     icators based on
   11098:	306e6920 6e69202c 69202c31 630a326e      in0, in1, in2.c
   110a8:	74736e6f 306e6920 69646e49 6f746163     onst in0Indicato
   110b8:	203d2072 75636f64 746e656d 7465672e     r = document.get
   110c8:	6d656c45 42746e65 28644979 306e6927     ElementById('in0
   110d8:	646e692d 74616369 2927726f 6f630a3b     -indicator');.co
   110e8:	2074736e 49316e69 6369646e 726f7461     nst in1Indicator
   110f8:	64203d20 6d75636f 2e746e65 45746567      = document.getE
   11108:	656d656c 7942746e 27286449 2d316e69     lementById('in1-
   11118:	69646e69 6f746163 3b292772 6e6f630a     indicator');.con
   11128:	69207473 6e49326e 61636964 20726f74     st in2Indicator 
   11138:	6f64203d 656d7563 672e746e 6c457465     = document.getEl
   11148:	6e656d65 49794274 69272864 692d326e     ementById('in2-i
   11158:	6369646e 726f7461 0a3b2927 306e690a     ndicator');..in0
   11168:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   11178:	6b636162 756f7267 3d20646e 74616420     background = dat
   11188:	6e692e61 3d3d2030 2031203d 2327203f     a.in0 === 1 ? '#
   11198:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   111a8:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   111b8:	65766974 7267202c 6f207961 72656874     tive, gray other
   111c8:	65736977 316e690a 69646e49 6f746163     wise.in1Indicato
   111d8:	74732e72 2e656c79 6b636162 756f7267     r.style.backgrou
   111e8:	3d20646e 74616420 6e692e61 3d3d2031     nd = data.in1 ==
   111f8:	2031203d 2327203f 37613832 20273534     = 1 ? '#28a745' 
   11208:	2327203a 27636363 2f2f203b 65726720     : '#ccc'; // gre
   11218:	69206e65 63612066 65766974 7267202c     en if active, gr
   11228:	6f207961 72656874 65736977 326e690a     ay otherwise.in2
   11238:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   11248:	6b636162 756f7267 3d20646e 74616420     background = dat
   11258:	6e692e61 3d3d2032 2031203d 2327203f     a.in2 === 1 ? '#
   11268:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   11278:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   11288:	65766974 7267202c 6f207961 72656874     tive, gray other
   11298:	65736977 2f2f0a0a 64705520 20657461     wise..// Update 
   112a8:	20656874 63656863 786f626b 61747320     the checkbox sta
   112b8:	62206574 64657361 206e6f20 6f6d6572     te based on remo
   112c8:	74436574 640a6c72 6d75636f 2e746e65     teCtrl.document.
   112d8:	45746567 656d656c 7942746e 27286449     getElementById('
   112e8:	6f6d6572 632d6574 72746e6f 632d6c6f     remote-control-c
   112f8:	6b636568 27786f62 68632e29 656b6365     heckbox').checke
   11308:	203d2064 61746164 6d65722e 3d3d3d20     d = data.rem ===
   11318:	0a3b3120 2e0a297d 63746163 72652868      1;.})..catch(er
   11328:	20726f72 63203e3d 6f736e6f 652e656c     ror => console.e
   11338:	726f7272 72452728 20726f72 63746566     rror('Error fetc
   11348:	676e6968 6c617620 3a736575 65202c27     hing values:', e
   11358:	726f7272 0a3b2929 660a0a7d 74636e75     rror));.}..funct
   11368:	206e6f69 56746573 65756c61 20292873     ion setValues() 
   11378:	6f630a7b 2074736e 20706d61 6170203d     {.const amp = pa
   11388:	46657372 74616f6c 636f6428 6e656d75     rseFloat(documen
   11398:	65672e74 656c4574 746e656d 64497942     t.getElementById
   113a8:	6d612728 6e692d70 27747570 61762e29     ('amp-input').va
   113b8:	2965756c 6f630a3b 2074736e 746c6f76     lue);.const volt
   113c8:	70203d20 65737261 616f6c46 6f642874      = parseFloat(do
   113d8:	656d7563 672e746e 6c457465 6e656d65     cument.getElemen
   113e8:	49794274 76272864 2d746c6f 75706e69     tById('volt-inpu
   113f8:	2e292774 756c6176 0a3b2965 63746566     t').value);.fetc
   11408:	2f602868 5f746573 736c6176 706d613f     h(`/set_vals?amp
   11418:	617b243d 267d706d 746c6f76 767b243d     =${amp}&volt=${v
   11428:	7d746c6f 2e0a2960 6e656874 73657228     olt}`)..then(res
   11438:	736e6f70 3e3d2065 73657220 736e6f70     ponse => respons
   11448:	736a2e65 29286e6f 742e0a29 286e6568     e.json())..then(
   11458:	61746164 203e3d20 66690a7b 61642820     data => {.if (da
   11468:	732e6174 65636375 20297373 65660a7b     ta.success) {.fe
   11478:	56686374 65756c61 3b292873 65207d0a     tchValues();.} e
   11488:	2065736c 6c610a7b 28747265 72724527     lse {.alert('Err
   11498:	7320726f 69747465 7620676e 65756c61     or setting value
   114a8:	3b292773 7d0a7d0a 632e0a29 68637461     s');.}.})..catch
   114b8:	72726528 3d20726f 6f63203e 6c6f736e     (error => consol
   114c8:	72652e65 28726f72 72724527 7320726f     e.error('Error s
   114d8:	69747465 7620676e 65756c61 2c273a73     etting values:',
   114e8:	72726520 2929726f 0a7d0a3b 6e75660a      error));.}..fun
   114f8:	6f697463 6f63206e 6f72746e 7665446c     ction controlDev
   11508:	28656369 69766564 202c6563 69746361     ice(device, acti
   11518:	20296e6f 65660a7b 28686374 6f632f60     on) {.fetch(`/co
   11528:	6f72746e 65643f6c 65636976 647b243d     ntrol?device=${d
   11538:	63697665 61267d65 6f697463 7b243d6e     evice}&action=${
   11548:	69746361 607d6e6f 742e0a29 286e6568     action}`)..then(
   11558:	70736572 65736e6f 203e3d20 70736572     response => resp
   11568:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   11578:	64286e65 20617461 7b203e3d 2066690a     en(data => {.if 
   11588:	74616428 75732e61 73656363 7b202973     (data.success) {
   11598:	656c610a 60287472 65647b24 65636976     .alert(`${device
   115a8:	556f742e 72657070 65736143 207d2928     .toUpperCase()} 
   115b8:	63617b24 6e6f6974 556f742e 72657070     ${action.toUpper
   115c8:	65736143 207d2928 63637553 66737365     Case()} Successf
   115d8:	29606c75 207d0a3b 65736c65 610a7b20     ul`);.} else {.a
   115e8:	7472656c 72456028 20726f72 63617b24     lert(`Error ${ac
   115f8:	6e6f6974 676e697d 647b2420 63697665     tion}ing ${devic
   11608:	29607d65 0a7d0a3b 2e0a297d 63746163     e}`);.}.})..catc
   11618:	72652868 20726f72 63203e3d 6f736e6f     h(error => conso
   11628:	652e656c 726f7272 72456028 20726f72     le.error(`Error 
   11638:	63617b24 6e6f6974 676e697d 647b2420     ${action}ing ${d
   11648:	63697665 603a7d65 7265202c 29726f72     evice}:`, error)
   11658:	7d0a3b29 75660a0a 6974636e 73206e6f     );.}..function s
   11668:	72507465 74657365 65727028 29746573     etPreset(preset)
   11678:	6c0a7b20 61207465 202c706d 746c6f76      {.let amp, volt
   11688:	66690a3b 72702820 74657365 203d3d20     ;.if (preset == 
   11698:	7b202931 706d610a 31203d20 3b35322e     1) {.amp = 1.25;
   116a8:	6c6f760a 203d2074 3b332e35 65207d0a     .volt = 5.3;.} e
   116b8:	2065736c 28206669 73657270 3d207465     lse if (preset =
   116c8:	2932203d 610a7b20 3d20706d 302e3220     = 2) {.amp = 2.0
   116d8:	6f760a3b 3d20746c 2e323120 7d0a3b30     ;.volt = 12.0;.}
   116e8:	736c6520 66692065 72702820 74657365      else if (preset
   116f8:	203d3d20 7b202933 706d610a 32203d20      == 3) {.amp = 2
   11708:	0a3b302e 746c6f76 32203d20 3b302e34     .0;.volt = 24.0;
   11718:	640a7d0a 6d75636f 2e746e65 45746567     .}.document.getE
   11728:	656d656c 7942746e 27286449 2d706d61     lementById('amp-
   11738:	75706e69 2e292774 756c6176 203d2065     input').value = 
   11748:	3b706d61 636f640a 6e656d75 65672e74     amp;.document.ge
   11758:	656c4574 746e656d 64497942 6f762728     tElementById('vo
   11768:	692d746c 7475706e 762e2927 65756c61     lt-input').value
   11778:	76203d20 3b746c6f 7465730a 756c6156      = volt;.setValu
   11788:	29287365 0a7d0a3b 636f640a 6e656d75     es();.}..documen
   11798:	65672e74 656c4574 746e656d 64497942     t.getElementById
   117a8:	65722728 65746f6d 6e6f632d 6c6f7274     ('remote-control
   117b8:	6568632d 6f626b63 2e292778 45646461     -checkbox').addE
   117c8:	746e6576 7473694c 72656e65 68632728     ventListener('ch
   117d8:	65676e61 66202c27 74636e75 286e6f69     ange', function(
   117e8:	0a7b2029 736e6f63 63612074 6e6f6974     ) {.const action
   117f8:	74203d20 2e736968 63656863 2064656b      = this.checked 
   11808:	6f27203f 3a20276e 666f2720 0a3b2766     ? 'on' : 'off';.
   11818:	63746566 2f602868 746e6f63 3f6c6f72     fetch(`/control?
   11828:	69766564 723d6563 61266d65 6f697463     device=rem&actio
   11838:	7b243d6e 69746361 607d6e6f 742e0a29     n=${action}`)..t
   11848:	286e6568 70736572 65736e6f 203e3d20     hen(response => 
   11858:	70736572 65736e6f 6f736a2e 2929286e     response.json())
   11868:	68742e0a 64286e65 20617461 7b203e3d     ..then(data => {
   11878:	2066690a 74616428 75732e61 73656363     .if (data.succes
   11888:	7b202973 6e6f630a 656c6f73 676f6c2e     s) {.console.log
   11898:	65526028 65746f6d 6e6f6320 6c6f7274     (`Remote control
   118a8:	617b2420 6f697463 73207d6e 65636375      ${action} succe
   118b8:	75667373 3b29606c 65207d0a 2065736c     ssful`);.} else 
   118c8:	6c610a7b 28747265 72724560 2420726f     {.alert(`Error $
   118d8:	7463617b 7d6e6f69 20676e69 6f6d6572     {action}ing remo
   118e8:	63206574 72746e6f 29606c6f 0a7d0a3b     te control`);.}.
   118f8:	2e0a297d 63746163 72652868 20726f72     })..catch(error 
   11908:	63203e3d 6f736e6f 652e656c 726f7272     => console.error
   11918:	72456028 20726f72 63617b24 6e6f6974     (`Error ${action
   11928:	676e697d 6d657220 2065746f 746e6f63     }ing remote cont
   11938:	3a6c6f72 65202c60 726f7272 0a3b2929     rol:`, error));.
   11948:	0a3b297d 7465730a 65746e49 6c617672     });..setInterval
   11958:	74656628 61566863 7365756c 3031202c     (fetchValues, 10
   11968:	3b293030 732f3c0a 70697263 3c0a3e74     00);.</script>.<
   11978:	646f622f 3c0a3e79 6d74682f 000a3e6c     /body>.</html>..
   11988:	00005a70 000059c0 000059c0 000059be     pZ...Y...Y...Y..
   11998:	00005a62 00005a62 00005a58 000059be     bZ..bZ..XZ...Y..
   119a8:	00005a62 00005a58 00005a62 000059be     bZ..XZ..bZ...Y..
   119b8:	00005a68 00005a68 00005a68 00005af8     hZ..hZ..hZ...Z..
   119c8:	00005e1c 00005dfe 00005db8 00005cd6     .^...]...]...\..
   119d8:	00005db8 00005df0 00005db8 00005cd6     .]...]...]...\..
   119e8:	00005dfe 00005dfe 00005df0 00005cd6     .]...]...]...\..
   119f8:	00005cce 00005cce 00005cce 00006034     .\...\...\..4`..
   11a08:	0000647c 0000633c 0000633c 00006338     |d..<c..<c..8c..
   11a18:	00006454 00006454 00006446 00006338     Td..Td..Fd..8c..
   11a28:	00006454 00006446 00006454 00006338     Td..Fd..Td..8c..
   11a38:	0000645c 0000645c 0000645c 00006660     \d..\d..\d..`f..

00011a48 <_global_impure_ptr>:
   11a48:	200000a8 000084a4 00008518 00008518     ... ............
   11a58:	00008488 00008518 00008518 00008518     ................
   11a68:	00008518 00008518 00008518 00008490     ................
   11a78:	00007f72 00008518 00007f2c 00007f7c     r.......,...|...
   11a88:	00008518 00007fc8 000081b2 000081b2     ................
   11a98:	000081b2 000081b2 000081b2 000081b2     ................
   11aa8:	000081b2 000081b2 000081b2 00008518     ................
   11ab8:	00008518 00008518 00008518 00008518     ................
   11ac8:	00008518 00008518 00008518 00008518     ................
   11ad8:	00008518 00007fd0 00008118 00008518     ................
   11ae8:	00008118 00008518 00008518 00008518     ................
   11af8:	00008518 000081e2 00008518 00008518     ................
   11b08:	000081ea 00008518 00008518 00008518     ................
   11b18:	00008518 00008518 0000828c 00008518     ................
   11b28:	00008518 000082be 00008518 00008518     ................
   11b38:	00008518 00008518 00008518 00008518     ................
   11b48:	00008518 00008518 00008518 00008518     ................
   11b58:	000083b8 000083ec 00008118 00008118     ................
   11b68:	00008118 000083fe 000083ec 00008518     ................
   11b78:	00008518 00008406 00008518 00008320     ............ ...
   11b88:	000084e6 0000845c 00008356 00008518     ....\...V.......
   11b98:	0000835e 00008518 000084b4 00008518     ^...............
   11ba8:	00008518 00008416 00464e49 00666e69     ........INF.inf.
   11bb8:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   11bc8:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   11bd8:	37363534 62613938 66656463 00000000     456789abcdef....
   11be8:	6c756e28 0000296c 00000030              (null)..0...

00011bf4 <blanks.7223>:
   11bf4:	20202020 20202020 20202020 20202020                     

00011c04 <zeroes.7224>:
   11c04:	30303030 30303030 30303030 30303030     0000000000000000
   11c14:	00009590 000096d0 000096d0 000096d0     ................
   11c24:	000096d0 000096d0 000096d0 000096d0     ................
   11c34:	000096d0 000096d0 000096d0 000096d0     ................
   11c44:	000096d0 000096d0 000096d0 000096d0     ................
   11c54:	000096d0 000096d0 000096d0 000096d0     ................
   11c64:	000096d0 000096d0 000096d0 000096d0     ................
   11c74:	000096d0 000096d0 000096d0 000096d0     ................
   11c84:	000096d0 000096d0 000096d0 000096d0     ................
   11c94:	000096d0 000096d0 000096d0 000096d0     ................
   11ca4:	000096d0 0000952c 000096d0 000096d0     ....,...........
   11cb4:	000096d0 000096d0 000097da 000096d0     ................
   11cc4:	000096d0 000096d0 000096d0 000096d0     ................
   11cd4:	000097be 000097be 000097be 000097be     ................
   11ce4:	000097be 000097be 000097be 000097be     ................
   11cf4:	000097be 000097be 000096d0 000096d0     ................
   11d04:	000096d0 000096d0 000096d0 000096d0     ................
   11d14:	000096d0 000096d0 000096d0 000096d0     ................
   11d24:	000097b0 0000978e 000096d0 0000978e     ................
   11d34:	000096d0 000096d0 000096d0 000096d0     ................
   11d44:	00009788 000096d0 000096d0 0000977c     ............|...
   11d54:	000096d0 000096d0 000096d0 000096d0     ................
   11d64:	000096d0 000096d0 000096d0 000096d0     ................
   11d74:	00009776 000096d0 000096d0 0000975a     v...........Z...
   11d84:	000096d0 000096d0 000096d0 000096d0     ................
   11d94:	000096d0 000096d0 000096d0 0000974a     ............J...
   11da4:	00009744 0000978e 0000978e 0000978e     D...............
   11db4:	00009734 00009598 000096d0 000096d0     4...............
   11dc4:	000096ac 000096d0 000096fa 000096ea     ................
   11dd4:	00009692 000096d0 000096d0 0000968a     ................
   11de4:	000096d0 000095e8 000096d0 000096d0     ................
   11df4:	00009776 0000985a 00009a30 0000985a     v...Z...0...Z...
   11e04:	00009a30 00009a30 0000981e 000097e2     0...0...........
   11e14:	000097e2 000097e2 000097e2 000097e2     ................
   11e24:	000097e2 000097e2 000097e2 000097e2     ................
   11e34:	00009a30 00009a30 00009a30 00009a30     0...0...0...0...
   11e44:	00009a30 00009a30 00009a30 00009a14     0...0...0.......
   11e54:	00009a30 00009a30 00009a30 000099ca     0...0...0.......
   11e64:	000099bc 00009a30 00009a30 000098a4     ....0...0.......
   11e74:	00009a30 00009a30 00009a30 00009a30     0...0...0...0...
   11e84:	00009874 00009a30 00009a30 00009a30     t...0...0...0...
   11e94:	00009a30 00009a30 00009868 00009a30     0...0...h...0...
   11ea4:	00009a30 00009a30 00009a30 00009a22     0...0...0..."...
   11eb4:	00009a30 00009a30 00009a30 00009a30     0...0...0...0...
   11ec4:	00009a30 00009a30 00009a30 00009a14     0...0...0.......
   11ed4:	00009a30 00009a30 00009a30 000099ca     0...0...0.......
   11ee4:	000099bc 00009a30 00009a30 000098a4     ....0...0.......
   11ef4:	00009a30 00009a30 00009a30 00009a30     0...0...0...0...
   11f04:	00009874 00009a30 00009a30 00009a30     t...0...0...0...
   11f14:	00009a30 00009a30 00009868 00009a30     0...0...h...0...
   11f24:	00009a30 00009a30 00009a30 00009a22     0...0...0..."...
   11f34:	00009c5a 00009bb2 00009c5a 00009bb2     Z.......Z.......
   11f44:	00009bb2 00009bfe 00009bee 00009bee     ................
   11f54:	00009bee 00009bee 00009bee 00009bee     ................
   11f64:	00009bee 00009c4a 00009c4a 00009bb2     ....J...J.......
   11f74:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   11f84:	00009bb2 00009bb2 00009be2 00009be2     ................
   11f94:	00009be2 00009be2 00009be2 00009be2     ................
   11fa4:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   11fb4:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   11fc4:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   11fd4:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   11fe4:	00009bb2 00009b7e 00009bb2 00009bb2     ....~...........
   11ff4:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   12004:	00009bb2 00009bb2 00009be2 00009be2     ................
   12014:	00009be2 00009be2 00009be2 00009be2     ................
   12024:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   12034:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   12044:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   12054:	00009bb2 00009bb2 00009bb2 00009bb2     ................
   12064:	00009bb2 00009b7e 646c2565 00000000     ....~...e%ld....

00012074 <basefix.7294>:
   12074:	0001000a 00030002 00050004 00070006     ................
   12084:	00090008 000b000a 000d000c 000f000e     ................
   12094:	00000010 69666e49 7974696e 00000000     ....Infinity....
   120a4:	004e614e 00000043 49534f50 00000058     NaN.C...POSIX...
   120b4:	0000002e                                ....

000120b8 <__mprec_bigtens>:
   120b8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   120c8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   120d8:	7f73bf3c 75154fdd                       <.s..O.u

000120e0 <__mprec_tens>:
   120e0:	00000000 3ff00000 00000000 40240000     .......?......$@
   120f0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12100:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12110:	00000000 412e8480 00000000 416312d0     .......A......cA
   12120:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   12130:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   12140:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   12150:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   12160:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   12170:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12180:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   12190:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   121a0:	79d99db4 44ea7843                       ...yCx.D

000121a8 <p05.6055>:
   121a8:	00000005 00000019 0000007d 0000c7c0     ........}.......
   121b8:	0000c85a 0000c85a 0000c85a 0000c85a     Z...Z...Z...Z...
   121c8:	0000c85a 0000c85a 0000c85a 0000c85a     Z...Z...Z...Z...
   121d8:	0000c84e 0000c84e 0000c84e 0000c84e     N...N...N...N...
   121e8:	0000c84e 0000c85a 0000c85a 0000c85a     N...Z...Z...Z...
   121f8:	0000c85a 0000c85a 0000c85a 0000c85a     Z...Z...Z...Z...
   12208:	0000c85a 0000c85a 0000c85a 0000c85a     Z...Z...Z...Z...
   12218:	0000c85a 0000c85a 0000c85a 0000c85a     Z...Z...Z...Z...
   12228:	0000c85a 0000c85a 0000c85a 0000c84e     Z...Z...Z...N...
   12238:	0000c85a 0000c85a 0000c85a 0000c85a     Z...Z...Z...Z...
   12248:	0000c85a 0000c85a 0000c85a 0000c85a     Z...Z...Z...Z...
   12258:	0000c85a 0000c85a 0000c7f4 0000c85a     Z...Z.......Z...
   12268:	0000c896 0000d1ec 0000d20e 0000d204     ................
   12278:	0000d1fe 0000d1e2 0000d20e 0000666e     ............nf..
   12288:	74696e69 00000079 00006e61              inity...an..

00012294 <fpi.6141>:
   12294:	00000035 fffffbce 000003cb 00000001     5...............
   122a4:	00000000                                ....

000122a8 <fpinan.6177>:
   122a8:	00000034 fffffbce 000003cb 00000001     4...............
	...

000122c0 <tinytens>:
   122c0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   122d0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   122e0:	64ac6f43 11680628                       Co.d(.h.

000122e8 <_ctype_>:
   122e8:	20202000 20202020 28282020 20282828     .         ((((( 
   122f8:	20202020 20202020 20202020 20202020                     
   12308:	10108820 10101010 10101010 10101010      ...............
   12318:	04040410 04040404 10040404 10101010     ................
   12328:	41411010 41414141 01010101 01010101     ..AAAAAA........
   12338:	01010101 01010101 01010101 10101010     ................
   12348:	42421010 42424242 02020202 02020202     ..BBBBBB........
   12358:	02020202 02020202 02020202 10101010     ................
   12368:	00000020 00000000 00000000 00000000      ...............
	...

000123ec <__hexdig>:
	...
   1241c:	13121110 17161514 00001918 00000000     ................
   1242c:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
   1244c:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

000124ec <_init>:
   124ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124ee:	46c0      	nop			; (mov r8, r8)
   124f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   124f2:	bc08      	pop	{r3}
   124f4:	469e      	mov	lr, r3
   124f6:	4770      	bx	lr

000124f8 <__init_array_start>:
   124f8:	0000a221 	.word	0x0000a221

000124fc <__frame_dummy_init_array_entry>:
   124fc:	000000cd                                ....

00012500 <_fini>:
   12500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12502:	46c0      	nop			; (mov r8, r8)
   12504:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12506:	bc08      	pop	{r3}
   12508:	469e      	mov	lr, r3
   1250a:	4770      	bx	lr

0001250c <__fini_array_start>:
   1250c:	000000a5 	.word	0x000000a5
