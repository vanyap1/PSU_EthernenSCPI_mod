
PSU_ETH_Controller_s21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012828  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012828  00012828  00022828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a30  20000000  00012830  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000da4  20000a30  00013260  00030a30  2**2
                  ALLOC
  4 .stack        00002004  200017d4  00014004  00030a30  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00030a30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00030a5a  2**0
                  CONTENTS, READONLY
  7 .debug_info   00031e82  00000000  00000000  00030ab3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004cc5  00000000  00000000  00062935  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017d87  00000000  00000000  000675fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001208  00000000  00000000  0007f381  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001250  00000000  00000000  00080589  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009857  00000000  00000000  000817d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001417c  00000000  00000000  0008b030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062fd7  00000000  00000000  0009f1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000045d8  00000000  00000000  00102184  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	d8 37 00 20 09 01 00 00 05 01 00 00 05 01 00 00     .7. ............
	...
      2c:	05 01 00 00 00 00 00 00 00 00 00 00 05 01 00 00     ................
      3c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      4c:	d9 0e 00 00 cd 0c 00 00 05 01 00 00 05 01 00 00     ................
      5c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      6c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      7c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      8c:	f1 1a 00 00 01 1b 00 00 05 01 00 00 05 01 00 00     ................
      9c:	05 01 00 00 05 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000a30 	.word	0x20000a30
      c4:	00000000 	.word	0x00000000
      c8:	00012830 	.word	0x00012830

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000a34 	.word	0x20000a34
      f8:	00012830 	.word	0x00012830
      fc:	00012830 	.word	0x00012830
     100:	00000000 	.word	0x00000000

00000104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     104:	e7fe      	b.n	104 <Dummy_Handler>
	...

00000108 <Reset_Handler>:
{
     108:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     10a:	4a12      	ldr	r2, [pc, #72]	; (154 <Reset_Handler+0x4c>)
     10c:	4b12      	ldr	r3, [pc, #72]	; (158 <Reset_Handler+0x50>)
     10e:	429a      	cmp	r2, r3
     110:	d009      	beq.n	126 <Reset_Handler+0x1e>
     112:	4b11      	ldr	r3, [pc, #68]	; (158 <Reset_Handler+0x50>)
     114:	4a0f      	ldr	r2, [pc, #60]	; (154 <Reset_Handler+0x4c>)
     116:	e003      	b.n	120 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     118:	6811      	ldr	r1, [r2, #0]
     11a:	6019      	str	r1, [r3, #0]
     11c:	3304      	adds	r3, #4
     11e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     120:	490e      	ldr	r1, [pc, #56]	; (15c <Reset_Handler+0x54>)
     122:	428b      	cmp	r3, r1
     124:	d3f8      	bcc.n	118 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     126:	4b0e      	ldr	r3, [pc, #56]	; (160 <Reset_Handler+0x58>)
     128:	e002      	b.n	130 <Reset_Handler+0x28>
                *pDest++ = 0;
     12a:	2200      	movs	r2, #0
     12c:	601a      	str	r2, [r3, #0]
     12e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a0c      	ldr	r2, [pc, #48]	; (164 <Reset_Handler+0x5c>)
     132:	4293      	cmp	r3, r2
     134:	d3f9      	bcc.n	12a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	4a0c      	ldr	r2, [pc, #48]	; (168 <Reset_Handler+0x60>)
     138:	21ff      	movs	r1, #255	; 0xff
     13a:	4b0c      	ldr	r3, [pc, #48]	; (16c <Reset_Handler+0x64>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     140:	4a0b      	ldr	r2, [pc, #44]	; (170 <Reset_Handler+0x68>)
     142:	6851      	ldr	r1, [r2, #4]
     144:	2380      	movs	r3, #128	; 0x80
     146:	430b      	orrs	r3, r1
     148:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     14a:	f007 fd03 	bl	7b54 <__libc_init_array>
        main();
     14e:	f004 ff35 	bl	4fbc <main>
     152:	e7fe      	b.n	152 <Reset_Handler+0x4a>
     154:	00012830 	.word	0x00012830
     158:	20000000 	.word	0x20000000
     15c:	20000a30 	.word	0x20000a30
     160:	20000a30 	.word	0x20000a30
     164:	200017d4 	.word	0x200017d4
     168:	e000ed00 	.word	0xe000ed00
     16c:	00000000 	.word	0x00000000
     170:	41004000 	.word	0x41004000

00000174 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     174:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     178:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     17a:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     17c:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     180:	4770      	bx	lr

00000182 <atomic_leave_critical>:
     182:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     186:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     188:	f383 8810 	msr	PRIMASK, r3
}
     18c:	4770      	bx	lr
	...

00000190 <delay_us>:

/**
 * \brief Perform delay in us
 */
void delay_us(const uint16_t us)
{
     190:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_us(us));
     192:	4b04      	ldr	r3, [pc, #16]	; (1a4 <delay_us+0x14>)
     194:	681c      	ldr	r4, [r3, #0]
     196:	f000 fcfd 	bl	b94 <_get_cycles_for_us>
     19a:	0001      	movs	r1, r0
     19c:	0020      	movs	r0, r4
     19e:	f000 fd0d 	bl	bbc <_delay_cycles>
}
     1a2:	bd10      	pop	{r4, pc}
     1a4:	20000a4c 	.word	0x20000a4c

000001a8 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     1a8:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     1aa:	4b04      	ldr	r3, [pc, #16]	; (1bc <delay_ms+0x14>)
     1ac:	681c      	ldr	r4, [r3, #0]
     1ae:	f000 fcfa 	bl	ba6 <_get_cycles_for_ms>
     1b2:	0001      	movs	r1, r0
     1b4:	0020      	movs	r0, r4
     1b6:	f000 fd01 	bl	bbc <_delay_cycles>
}
     1ba:	bd10      	pop	{r4, pc}
     1bc:	20000a4c 	.word	0x20000a4c

000001c0 <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     1c0:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     1c2:	2501      	movs	r5, #1
     1c4:	2400      	movs	r4, #0

	while (upper >= lower) {
     1c6:	e007      	b.n	1d8 <process_ext_irq+0x18>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     1c8:	4a0d      	ldr	r2, [pc, #52]	; (200 <process_ext_irq+0x40>)
     1ca:	58b3      	ldr	r3, [r6, r2]
     1cc:	2b00      	cmp	r3, #0
     1ce:	d000      	beq.n	1d2 <process_ext_irq+0x12>
				ext_irqs[middle].cb();
     1d0:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     1d2:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     1d4:	3a01      	subs	r2, #1
     1d6:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     1d8:	42ac      	cmp	r4, r5
     1da:	d8fa      	bhi.n	1d2 <process_ext_irq+0x12>
		middle = (upper + lower) >> 1;
     1dc:	192b      	adds	r3, r5, r4
     1de:	105b      	asrs	r3, r3, #1
     1e0:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     1e2:	2a00      	cmp	r2, #0
     1e4:	d1f5      	bne.n	1d2 <process_ext_irq+0x12>
     1e6:	21ff      	movs	r1, #255	; 0xff
     1e8:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     1ea:	00de      	lsls	r6, r3, #3
     1ec:	4904      	ldr	r1, [pc, #16]	; (200 <process_ext_irq+0x40>)
     1ee:	1989      	adds	r1, r1, r6
     1f0:	6849      	ldr	r1, [r1, #4]
     1f2:	4281      	cmp	r1, r0
     1f4:	d0e8      	beq.n	1c8 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     1f6:	d2ed      	bcs.n	1d4 <process_ext_irq+0x14>
			lower = middle + 1;
     1f8:	3201      	adds	r2, #1
     1fa:	b2d4      	uxtb	r4, r2
     1fc:	e7ec      	b.n	1d8 <process_ext_irq+0x18>
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	20000a50 	.word	0x20000a50

00000204 <ext_irq_init>:
{
     204:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     206:	2300      	movs	r3, #0
     208:	2b00      	cmp	r3, #0
     20a:	d003      	beq.n	214 <ext_irq_init+0x10>
	return _ext_irq_init(process_ext_irq);
     20c:	4807      	ldr	r0, [pc, #28]	; (22c <ext_irq_init+0x28>)
     20e:	f000 fcef 	bl	bf0 <_ext_irq_init>
}
     212:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     214:	4a06      	ldr	r2, [pc, #24]	; (230 <ext_irq_init+0x2c>)
     216:	00d9      	lsls	r1, r3, #3
     218:	1850      	adds	r0, r2, r1
     21a:	2401      	movs	r4, #1
     21c:	4264      	negs	r4, r4
     21e:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     220:	2000      	movs	r0, #0
     222:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     224:	3301      	adds	r3, #1
     226:	b29b      	uxth	r3, r3
     228:	e7ee      	b.n	208 <ext_irq_init+0x4>
     22a:	46c0      	nop			; (mov r8, r8)
     22c:	000001c1 	.word	0x000001c1
     230:	20000a50 	.word	0x20000a50

00000234 <ext_irq_register>:
{
     234:	b5f0      	push	{r4, r5, r6, r7, lr}
     236:	46c6      	mov	lr, r8
     238:	b500      	push	{lr}
     23a:	b084      	sub	sp, #16
     23c:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
     23e:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     240:	2b00      	cmp	r3, #0
     242:	d010      	beq.n	266 <ext_irq_register+0x32>
	bool    found = false;
     244:	2300      	movs	r3, #0
     246:	4698      	mov	r8, r3
	if (NULL == cb) {
     248:	2900      	cmp	r1, #0
     24a:	d01b      	beq.n	284 <ext_irq_register+0x50>
	if (!found) {
     24c:	4643      	mov	r3, r8
     24e:	2b00      	cmp	r3, #0
     250:	d146      	bne.n	2e0 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     252:	2b00      	cmp	r3, #0
     254:	d124      	bne.n	2a0 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
     256:	00da      	lsls	r2, r3, #3
     258:	4c2a      	ldr	r4, [pc, #168]	; (304 <ext_irq_register+0xd0>)
     25a:	5912      	ldr	r2, [r2, r4]
     25c:	2a00      	cmp	r2, #0
     25e:	d018      	beq.n	292 <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     260:	3301      	adds	r3, #1
     262:	b2db      	uxtb	r3, r3
     264:	e7f5      	b.n	252 <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
     266:	00dc      	lsls	r4, r3, #3
     268:	4a26      	ldr	r2, [pc, #152]	; (304 <ext_irq_register+0xd0>)
     26a:	1912      	adds	r2, r2, r4
     26c:	6852      	ldr	r2, [r2, #4]
     26e:	9801      	ldr	r0, [sp, #4]
     270:	4282      	cmp	r2, r0
     272:	d002      	beq.n	27a <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     274:	3301      	adds	r3, #1
     276:	b2db      	uxtb	r3, r3
     278:	e7e2      	b.n	240 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
     27a:	4b22      	ldr	r3, [pc, #136]	; (304 <ext_irq_register+0xd0>)
     27c:	50e1      	str	r1, [r4, r3]
			found          = true;
     27e:	2301      	movs	r3, #1
     280:	4698      	mov	r8, r3
			break;
     282:	e7e1      	b.n	248 <ext_irq_register+0x14>
		if (!found) {
     284:	4643      	mov	r3, r8
     286:	2b00      	cmp	r3, #0
     288:	d035      	beq.n	2f6 <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
     28a:	9801      	ldr	r0, [sp, #4]
     28c:	f000 fcf8 	bl	c80 <_ext_irq_enable>
     290:	e02d      	b.n	2ee <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
     292:	00dd      	lsls	r5, r3, #3
     294:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
     296:	1965      	adds	r5, r4, r5
     298:	9a01      	ldr	r2, [sp, #4]
     29a:	606a      	str	r2, [r5, #4]
				found           = true;
     29c:	2201      	movs	r2, #1
     29e:	4690      	mov	r8, r2
     2a0:	2200      	movs	r2, #0
     2a2:	e001      	b.n	2a8 <ext_irq_register+0x74>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     2a4:	3201      	adds	r2, #1
     2a6:	b2d2      	uxtb	r2, r2
     2a8:	0019      	movs	r1, r3
     2aa:	4311      	orrs	r1, r2
     2ac:	d118      	bne.n	2e0 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     2ae:	4915      	ldr	r1, [pc, #84]	; (304 <ext_irq_register+0xd0>)
     2b0:	00dc      	lsls	r4, r3, #3
     2b2:	190c      	adds	r4, r1, r4
     2b4:	6867      	ldr	r7, [r4, #4]
     2b6:	00d4      	lsls	r4, r2, #3
     2b8:	1909      	adds	r1, r1, r4
     2ba:	6849      	ldr	r1, [r1, #4]
     2bc:	428f      	cmp	r7, r1
     2be:	d2f1      	bcs.n	2a4 <ext_irq_register+0x70>
     2c0:	1c4c      	adds	r4, r1, #1
     2c2:	d0ef      	beq.n	2a4 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
     2c4:	a902      	add	r1, sp, #8
     2c6:	468c      	mov	ip, r1
     2c8:	4f0e      	ldr	r7, [pc, #56]	; (304 <ext_irq_register+0xd0>)
     2ca:	00d1      	lsls	r1, r2, #3
     2cc:	1879      	adds	r1, r7, r1
     2ce:	4664      	mov	r4, ip
     2d0:	c941      	ldmia	r1!, {r0, r6}
     2d2:	c441      	stmia	r4!, {r0, r6}
				ext_irqs[i] = tmp;
     2d4:	00dd      	lsls	r5, r3, #3
     2d6:	197d      	adds	r5, r7, r5
     2d8:	4661      	mov	r1, ip
     2da:	c911      	ldmia	r1!, {r0, r4}
     2dc:	c511      	stmia	r5!, {r0, r4}
     2de:	e7e1      	b.n	2a4 <ext_irq_register+0x70>
	if (!found) {
     2e0:	4643      	mov	r3, r8
     2e2:	2b00      	cmp	r3, #0
     2e4:	d00a      	beq.n	2fc <ext_irq_register+0xc8>
	return _ext_irq_enable(pin, true);
     2e6:	2101      	movs	r1, #1
     2e8:	9801      	ldr	r0, [sp, #4]
     2ea:	f000 fcc9 	bl	c80 <_ext_irq_enable>
}
     2ee:	b004      	add	sp, #16
     2f0:	bc04      	pop	{r2}
     2f2:	4690      	mov	r8, r2
     2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     2f6:	200d      	movs	r0, #13
     2f8:	4240      	negs	r0, r0
     2fa:	e7f8      	b.n	2ee <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
     2fc:	200d      	movs	r0, #13
     2fe:	4240      	negs	r0, r0
     300:	e7f5      	b.n	2ee <ext_irq_register+0xba>
     302:	46c0      	nop			; (mov r8, r8)
     304:	20000a50 	.word	0x20000a50

00000308 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     308:	b510      	push	{r4, lr}
     30a:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     30c:	3814      	subs	r0, #20
     30e:	8b84      	ldrh	r4, [r0, #28]
     310:	ab01      	add	r3, sp, #4
     312:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     314:	0014      	movs	r4, r2
     316:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     318:	4a06      	ldr	r2, [pc, #24]	; (334 <i2c_m_sync_write+0x2c>)
     31a:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     31c:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     31e:	0019      	movs	r1, r3
     320:	f001 f8f8 	bl	1514 <_i2c_m_sync_transfer>

	if (ret) {
     324:	2800      	cmp	r0, #0
     326:	d102      	bne.n	32e <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     328:	0020      	movs	r0, r4
     32a:	b004      	add	sp, #16
     32c:	bd10      	pop	{r4, pc}
		return ret;
     32e:	0004      	movs	r4, r0
     330:	e7fa      	b.n	328 <i2c_m_sync_write+0x20>
     332:	46c0      	nop			; (mov r8, r8)
     334:	ffff8000 	.word	0xffff8000

00000338 <i2c_m_sync_read>:
{
     338:	b510      	push	{r4, lr}
     33a:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     33c:	3814      	subs	r0, #20
     33e:	8b84      	ldrh	r4, [r0, #28]
     340:	ab01      	add	r3, sp, #4
     342:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     344:	0014      	movs	r4, r2
     346:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     348:	4a06      	ldr	r2, [pc, #24]	; (364 <i2c_m_sync_read+0x2c>)
     34a:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     34c:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     34e:	0019      	movs	r1, r3
     350:	f001 f8e0 	bl	1514 <_i2c_m_sync_transfer>
	if (ret) {
     354:	2800      	cmp	r0, #0
     356:	d102      	bne.n	35e <i2c_m_sync_read+0x26>
}
     358:	0020      	movs	r0, r4
     35a:	b004      	add	sp, #16
     35c:	bd10      	pop	{r4, pc}
		return ret;
     35e:	0004      	movs	r4, r0
     360:	e7fa      	b.n	358 <i2c_m_sync_read+0x20>
     362:	46c0      	nop			; (mov r8, r8)
     364:	ffff8001 	.word	0xffff8001

00000368 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     368:	b570      	push	{r4, r5, r6, lr}
     36a:	0004      	movs	r4, r0
     36c:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     36e:	1e43      	subs	r3, r0, #1
     370:	4198      	sbcs	r0, r3
     372:	b2c0      	uxtb	r0, r0
     374:	225e      	movs	r2, #94	; 0x5e
     376:	4907      	ldr	r1, [pc, #28]	; (394 <i2c_m_sync_init+0x2c>)
     378:	f000 fb54 	bl	a24 <assert>

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     37c:	0029      	movs	r1, r5
     37e:	0020      	movs	r0, r4
     380:	f001 f83c 	bl	13fc <_i2c_m_sync_init>
	if (init_status) {
     384:	2800      	cmp	r0, #0
     386:	d103      	bne.n	390 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     388:	4b03      	ldr	r3, [pc, #12]	; (398 <i2c_m_sync_init+0x30>)
     38a:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     38c:	4b03      	ldr	r3, [pc, #12]	; (39c <i2c_m_sync_init+0x34>)
     38e:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     390:	bd70      	pop	{r4, r5, r6, pc}
     392:	46c0      	nop			; (mov r8, r8)
     394:	0000f500 	.word	0x0000f500
     398:	00000339 	.word	0x00000339
     39c:	00000309 	.word	0x00000309

000003a0 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     3a0:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     3a2:	f001 f87d 	bl	14a0 <_i2c_m_sync_enable>
}
     3a6:	bd10      	pop	{r4, pc}

000003a8 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     3a8:	0589      	lsls	r1, r1, #22
     3aa:	0d89      	lsrs	r1, r1, #22
     3ac:	2380      	movs	r3, #128	; 0x80
     3ae:	00db      	lsls	r3, r3, #3
     3b0:	401a      	ands	r2, r3
     3b2:	430a      	orrs	r2, r1
     3b4:	8382      	strh	r2, [r0, #28]
}
     3b6:	0010      	movs	r0, r2
     3b8:	4770      	bx	lr

000003ba <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     3ba:	3014      	adds	r0, #20
     3bc:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     3be:	2000      	movs	r0, #0
     3c0:	4770      	bx	lr
	...

000003c4 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     3c4:	b570      	push	{r4, r5, r6, lr}
     3c6:	0004      	movs	r4, r0
     3c8:	000d      	movs	r5, r1
     3ca:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     3cc:	2800      	cmp	r0, #0
     3ce:	d00e      	beq.n	3ee <io_write+0x2a>
     3d0:	2900      	cmp	r1, #0
     3d2:	d00a      	beq.n	3ea <io_write+0x26>
     3d4:	2001      	movs	r0, #1
     3d6:	2234      	movs	r2, #52	; 0x34
     3d8:	4906      	ldr	r1, [pc, #24]	; (3f4 <io_write+0x30>)
     3da:	f000 fb23 	bl	a24 <assert>
	return io_descr->write(io_descr, buf, length);
     3de:	6823      	ldr	r3, [r4, #0]
     3e0:	0032      	movs	r2, r6
     3e2:	0029      	movs	r1, r5
     3e4:	0020      	movs	r0, r4
     3e6:	4798      	blx	r3
}
     3e8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     3ea:	2000      	movs	r0, #0
     3ec:	e7f3      	b.n	3d6 <io_write+0x12>
     3ee:	2000      	movs	r0, #0
     3f0:	e7f1      	b.n	3d6 <io_write+0x12>
     3f2:	46c0      	nop			; (mov r8, r8)
     3f4:	0000f51c 	.word	0x0000f51c

000003f8 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     3f8:	b570      	push	{r4, r5, r6, lr}
     3fa:	0004      	movs	r4, r0
     3fc:	000d      	movs	r5, r1
     3fe:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     400:	2800      	cmp	r0, #0
     402:	d00e      	beq.n	422 <io_read+0x2a>
     404:	2900      	cmp	r1, #0
     406:	d00a      	beq.n	41e <io_read+0x26>
     408:	2001      	movs	r0, #1
     40a:	223d      	movs	r2, #61	; 0x3d
     40c:	4906      	ldr	r1, [pc, #24]	; (428 <io_read+0x30>)
     40e:	f000 fb09 	bl	a24 <assert>
	return io_descr->read(io_descr, buf, length);
     412:	6863      	ldr	r3, [r4, #4]
     414:	0032      	movs	r2, r6
     416:	0029      	movs	r1, r5
     418:	0020      	movs	r0, r4
     41a:	4798      	blx	r3
}
     41c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     41e:	2000      	movs	r0, #0
     420:	e7f3      	b.n	40a <io_read+0x12>
     422:	2000      	movs	r0, #0
     424:	e7f1      	b.n	40a <io_read+0x12>
     426:	46c0      	nop			; (mov r8, r8)
     428:	0000f51c 	.word	0x0000f51c

0000042c <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     42c:	b570      	push	{r4, r5, r6, lr}
     42e:	0004      	movs	r4, r0
     430:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     432:	2800      	cmp	r0, #0
     434:	d017      	beq.n	466 <spi_m_sync_init+0x3a>
     436:	2900      	cmp	r1, #0
     438:	d013      	beq.n	462 <spi_m_sync_init+0x36>
     43a:	2001      	movs	r0, #1
     43c:	2240      	movs	r2, #64	; 0x40
     43e:	490b      	ldr	r1, [pc, #44]	; (46c <spi_m_sync_init+0x40>)
     440:	f000 faf0 	bl	a24 <assert>
	spi->dev.prvt = (void *)hw;
     444:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     446:	1d20      	adds	r0, r4, #4
     448:	0029      	movs	r1, r5
     44a:	f001 f96f 	bl	172c <_spi_m_sync_init>

	if (rc < 0) {
     44e:	2800      	cmp	r0, #0
     450:	db06      	blt.n	460 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     452:	4b07      	ldr	r3, [pc, #28]	; (470 <spi_m_sync_init+0x44>)
     454:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     456:	4b07      	ldr	r3, [pc, #28]	; (474 <spi_m_sync_init+0x48>)
     458:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     45a:	4b07      	ldr	r3, [pc, #28]	; (478 <spi_m_sync_init+0x4c>)
     45c:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     45e:	2000      	movs	r0, #0
}
     460:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     462:	2000      	movs	r0, #0
     464:	e7ea      	b.n	43c <spi_m_sync_init+0x10>
     466:	2000      	movs	r0, #0
     468:	e7e8      	b.n	43c <spi_m_sync_init+0x10>
     46a:	46c0      	nop			; (mov r8, r8)
     46c:	0000f530 	.word	0x0000f530
     470:	ffff8000 	.word	0xffff8000
     474:	00000511 	.word	0x00000511
     478:	000004dd 	.word	0x000004dd

0000047c <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     47c:	b510      	push	{r4, lr}
     47e:	0004      	movs	r4, r0
	ASSERT(spi);
     480:	1e43      	subs	r3, r0, #1
     482:	4198      	sbcs	r0, r3
     484:	b2c0      	uxtb	r0, r0
     486:	2257      	movs	r2, #87	; 0x57
     488:	4903      	ldr	r1, [pc, #12]	; (498 <spi_m_sync_enable+0x1c>)
     48a:	f000 facb 	bl	a24 <assert>
	_spi_m_sync_enable(&spi->dev);
     48e:	1d20      	adds	r0, r4, #4
     490:	f001 fa26 	bl	18e0 <_spi_m_sync_enable>
}
     494:	bd10      	pop	{r4, pc}
     496:	46c0      	nop			; (mov r8, r8)
     498:	0000f530 	.word	0x0000f530

0000049c <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     49c:	b530      	push	{r4, r5, lr}
     49e:	b087      	sub	sp, #28
     4a0:	0004      	movs	r4, r0
     4a2:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     4a4:	2800      	cmp	r0, #0
     4a6:	d015      	beq.n	4d4 <spi_m_sync_transfer+0x38>
     4a8:	2900      	cmp	r1, #0
     4aa:	d011      	beq.n	4d0 <spi_m_sync_transfer+0x34>
     4ac:	2001      	movs	r0, #1
     4ae:	22b3      	movs	r2, #179	; 0xb3
     4b0:	4909      	ldr	r1, [pc, #36]	; (4d8 <spi_m_sync_transfer+0x3c>)
     4b2:	f000 fab7 	bl	a24 <assert>

	msg.txbuf = p_xfer->txbuf;
     4b6:	682b      	ldr	r3, [r5, #0]
     4b8:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     4ba:	686b      	ldr	r3, [r5, #4]
     4bc:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     4be:	68ab      	ldr	r3, [r5, #8]
     4c0:	9301      	str	r3, [sp, #4]
     4c2:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     4c4:	1d20      	adds	r0, r4, #4
     4c6:	a903      	add	r1, sp, #12
     4c8:	f001 fa22 	bl	1910 <_spi_m_sync_trans>
}
     4cc:	b007      	add	sp, #28
     4ce:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     4d0:	2000      	movs	r0, #0
     4d2:	e7ec      	b.n	4ae <spi_m_sync_transfer+0x12>
     4d4:	2000      	movs	r0, #0
     4d6:	e7ea      	b.n	4ae <spi_m_sync_transfer+0x12>
     4d8:	0000f530 	.word	0x0000f530

000004dc <_spi_m_sync_io_write>:
{
     4dc:	b570      	push	{r4, r5, r6, lr}
     4de:	b084      	sub	sp, #16
     4e0:	0004      	movs	r4, r0
     4e2:	000e      	movs	r6, r1
     4e4:	0015      	movs	r5, r2
	ASSERT(io);
     4e6:	1e43      	subs	r3, r0, #1
     4e8:	4198      	sbcs	r0, r3
     4ea:	b2c0      	uxtb	r0, r0
     4ec:	22a3      	movs	r2, #163	; 0xa3
     4ee:	4907      	ldr	r1, [pc, #28]	; (50c <_spi_m_sync_io_write+0x30>)
     4f0:	f000 fa98 	bl	a24 <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     4f4:	0020      	movs	r0, r4
     4f6:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     4f8:	2300      	movs	r3, #0
     4fa:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     4fc:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     4fe:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     500:	a901      	add	r1, sp, #4
     502:	f7ff ffcb 	bl	49c <spi_m_sync_transfer>
}
     506:	b004      	add	sp, #16
     508:	bd70      	pop	{r4, r5, r6, pc}
     50a:	46c0      	nop			; (mov r8, r8)
     50c:	0000f530 	.word	0x0000f530

00000510 <_spi_m_sync_io_read>:
{
     510:	b570      	push	{r4, r5, r6, lr}
     512:	b084      	sub	sp, #16
     514:	0004      	movs	r4, r0
     516:	000e      	movs	r6, r1
     518:	0015      	movs	r5, r2
	ASSERT(io);
     51a:	1e43      	subs	r3, r0, #1
     51c:	4198      	sbcs	r0, r3
     51e:	b2c0      	uxtb	r0, r0
     520:	2287      	movs	r2, #135	; 0x87
     522:	4907      	ldr	r1, [pc, #28]	; (540 <_spi_m_sync_io_read+0x30>)
     524:	f000 fa7e 	bl	a24 <assert>
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     528:	0020      	movs	r0, r4
     52a:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     52c:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     52e:	2300      	movs	r3, #0
     530:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     532:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     534:	a901      	add	r1, sp, #4
     536:	f7ff ffb1 	bl	49c <spi_m_sync_transfer>
}
     53a:	b004      	add	sp, #16
     53c:	bd70      	pop	{r4, r5, r6, pc}
     53e:	46c0      	nop			; (mov r8, r8)
     540:	0000f530 	.word	0x0000f530

00000544 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     544:	b570      	push	{r4, r5, r6, lr}
     546:	0004      	movs	r4, r0
     548:	000d      	movs	r5, r1
	ASSERT(spi && io);
     54a:	2800      	cmp	r0, #0
     54c:	d00c      	beq.n	568 <spi_m_sync_get_io_descriptor+0x24>
     54e:	2900      	cmp	r1, #0
     550:	d008      	beq.n	564 <spi_m_sync_get_io_descriptor+0x20>
     552:	2001      	movs	r0, #1
     554:	22bd      	movs	r2, #189	; 0xbd
     556:	4905      	ldr	r1, [pc, #20]	; (56c <spi_m_sync_get_io_descriptor+0x28>)
     558:	f000 fa64 	bl	a24 <assert>
	*io = &spi->io;
     55c:	340c      	adds	r4, #12
     55e:	602c      	str	r4, [r5, #0]
	return 0;
}
     560:	2000      	movs	r0, #0
     562:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
     564:	2000      	movs	r0, #0
     566:	e7f5      	b.n	554 <spi_m_sync_get_io_descriptor+0x10>
     568:	2000      	movs	r0, #0
     56a:	e7f3      	b.n	554 <spi_m_sync_get_io_descriptor+0x10>
     56c:	0000f530 	.word	0x0000f530

00000570 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     572:	6806      	ldr	r6, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     574:	2e00      	cmp	r6, #0
     576:	d002      	beq.n	57e <timer_add_timer_task+0xe>
     578:	0033      	movs	r3, r6
     57a:	2500      	movs	r5, #0
     57c:	e00c      	b.n	598 <timer_add_timer_task+0x28>
		list_insert_as_head(list, new_task);
     57e:	f000 fa61 	bl	a44 <list_insert_as_head>
		return;
     582:	e018      	b.n	5b6 <timer_add_timer_task+0x46>
		uint32_t time_left;

		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     584:	689f      	ldr	r7, [r3, #8]
     586:	46bc      	mov	ip, r7
     588:	4464      	add	r4, ip
     58a:	1aa4      	subs	r4, r4, r2
     58c:	3401      	adds	r4, #1
		}
		if (time_left >= new_task->interval)
     58e:	688f      	ldr	r7, [r1, #8]
     590:	42bc      	cmp	r4, r7
     592:	d20b      	bcs.n	5ac <timer_add_timer_task+0x3c>
			break;
		prev = it;
     594:	001d      	movs	r5, r3
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     596:	681b      	ldr	r3, [r3, #0]
     598:	2b00      	cmp	r3, #0
     59a:	d007      	beq.n	5ac <timer_add_timer_task+0x3c>
		if (it->time_label <= time) {
     59c:	685c      	ldr	r4, [r3, #4]
     59e:	4294      	cmp	r4, r2
     5a0:	d8f0      	bhi.n	584 <timer_add_timer_task+0x14>
			time_left = it->interval - (time - it->time_label);
     5a2:	1aa4      	subs	r4, r4, r2
     5a4:	689f      	ldr	r7, [r3, #8]
     5a6:	46bc      	mov	ip, r7
     5a8:	4464      	add	r4, ip
     5aa:	e7f0      	b.n	58e <timer_add_timer_task+0x1e>
	}

	if (it == head) {
     5ac:	42b3      	cmp	r3, r6
     5ae:	d003      	beq.n	5b8 <timer_add_timer_task+0x48>
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     5b0:	0028      	movs	r0, r5
     5b2:	f000 fa59 	bl	a68 <list_insert_after>
	}
}
     5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     5b8:	f000 fa44 	bl	a44 <list_insert_as_head>
     5bc:	e7fb      	b.n	5b6 <timer_add_timer_task+0x46>

000005be <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5c0:	0005      	movs	r5, r0
     5c2:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     5c4:	6903      	ldr	r3, [r0, #16]
     5c6:	1c5e      	adds	r6, r3, #1
     5c8:	6106      	str	r6, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     5ca:	7e03      	ldrb	r3, [r0, #24]
     5cc:	07db      	lsls	r3, r3, #31
     5ce:	d402      	bmi.n	5d6 <timer_process_counted+0x18>
     5d0:	7e03      	ldrb	r3, [r0, #24]
     5d2:	079b      	lsls	r3, r3, #30
     5d4:	d50a      	bpl.n	5ec <timer_process_counted+0x2e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     5d6:	7e2b      	ldrb	r3, [r5, #24]
     5d8:	2202      	movs	r2, #2
     5da:	4313      	orrs	r3, r2
     5dc:	b2db      	uxtb	r3, r3
     5de:	762b      	strb	r3, [r5, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5e2:	696f      	ldr	r7, [r5, #20]
		tmp->cb(tmp);
     5e4:	68e3      	ldr	r3, [r4, #12]
     5e6:	0020      	movs	r0, r4
     5e8:	4798      	blx	r3
		it = (struct timer_task *)list_get_head(&timer->tasks);
     5ea:	003c      	movs	r4, r7
	while (it && ((time - it->time_label) >= it->interval)) {
     5ec:	2c00      	cmp	r4, #0
     5ee:	d0f7      	beq.n	5e0 <timer_process_counted+0x22>
     5f0:	6863      	ldr	r3, [r4, #4]
     5f2:	1af3      	subs	r3, r6, r3
     5f4:	68a2      	ldr	r2, [r4, #8]
     5f6:	4293      	cmp	r3, r2
     5f8:	d3f2      	bcc.n	5e0 <timer_process_counted+0x22>
		list_remove_head(&timer->tasks);
     5fa:	002f      	movs	r7, r5
     5fc:	3714      	adds	r7, #20
     5fe:	0038      	movs	r0, r7
     600:	f000 fa36 	bl	a70 <list_remove_head>
		if (TIMER_TASK_REPEAT == tmp->mode) {
     604:	7c23      	ldrb	r3, [r4, #16]
     606:	2b01      	cmp	r3, #1
     608:	d1eb      	bne.n	5e2 <timer_process_counted+0x24>
			tmp->time_label = time;
     60a:	6066      	str	r6, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     60c:	0032      	movs	r2, r6
     60e:	0021      	movs	r1, r4
     610:	0038      	movs	r0, r7
     612:	f7ff ffad 	bl	570 <timer_add_timer_task>
     616:	e7e4      	b.n	5e2 <timer_process_counted+0x24>

00000618 <timer_init>:
{
     618:	b570      	push	{r4, r5, r6, lr}
     61a:	0004      	movs	r4, r0
     61c:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     61e:	2800      	cmp	r0, #0
     620:	d012      	beq.n	648 <timer_init+0x30>
     622:	2900      	cmp	r1, #0
     624:	d00e      	beq.n	644 <timer_init+0x2c>
     626:	2001      	movs	r0, #1
     628:	223b      	movs	r2, #59	; 0x3b
     62a:	4908      	ldr	r1, [pc, #32]	; (64c <timer_init+0x34>)
     62c:	f000 f9fa 	bl	a24 <assert>
	_timer_init(&descr->device, hw);
     630:	0029      	movs	r1, r5
     632:	0020      	movs	r0, r4
     634:	f000 fbee 	bl	e14 <_timer_init>
	descr->time                           = 0;
     638:	2300      	movs	r3, #0
     63a:	6123      	str	r3, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     63c:	4b04      	ldr	r3, [pc, #16]	; (650 <timer_init+0x38>)
     63e:	6023      	str	r3, [r4, #0]
}
     640:	2000      	movs	r0, #0
     642:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     644:	2000      	movs	r0, #0
     646:	e7ef      	b.n	628 <timer_init+0x10>
     648:	2000      	movs	r0, #0
     64a:	e7ed      	b.n	628 <timer_init+0x10>
     64c:	0000f54c 	.word	0x0000f54c
     650:	000005bf 	.word	0x000005bf

00000654 <timer_start>:
{
     654:	b510      	push	{r4, lr}
     656:	0004      	movs	r4, r0
	ASSERT(descr);
     658:	1e43      	subs	r3, r0, #1
     65a:	4198      	sbcs	r0, r3
     65c:	b2c0      	uxtb	r0, r0
     65e:	2253      	movs	r2, #83	; 0x53
     660:	4907      	ldr	r1, [pc, #28]	; (680 <timer_start+0x2c>)
     662:	f000 f9df 	bl	a24 <assert>
	if (_timer_is_started(&descr->device)) {
     666:	0020      	movs	r0, r4
     668:	f000 fc2a 	bl	ec0 <_timer_is_started>
     66c:	2800      	cmp	r0, #0
     66e:	d104      	bne.n	67a <timer_start+0x26>
	_timer_start(&descr->device);
     670:	0020      	movs	r0, r4
     672:	f000 fbfb 	bl	e6c <_timer_start>
	return ERR_NONE;
     676:	2000      	movs	r0, #0
}
     678:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     67a:	2011      	movs	r0, #17
     67c:	4240      	negs	r0, r0
     67e:	e7fb      	b.n	678 <timer_start+0x24>
     680:	0000f54c 	.word	0x0000f54c

00000684 <timer_add_task>:
{
     684:	b570      	push	{r4, r5, r6, lr}
     686:	b082      	sub	sp, #8
     688:	0004      	movs	r4, r0
     68a:	000d      	movs	r5, r1
	ASSERT(descr && task);
     68c:	2800      	cmp	r0, #0
     68e:	d026      	beq.n	6de <timer_add_task+0x5a>
     690:	2900      	cmp	r1, #0
     692:	d022      	beq.n	6da <timer_add_task+0x56>
     694:	2001      	movs	r0, #1
     696:	227a      	movs	r2, #122	; 0x7a
     698:	491f      	ldr	r1, [pc, #124]	; (718 <timer_add_task+0x94>)
     69a:	f000 f9c3 	bl	a24 <assert>
	descr->flags |= TIMER_FLAG_QUEUE_IS_TAKEN;
     69e:	7e23      	ldrb	r3, [r4, #24]
     6a0:	2201      	movs	r2, #1
     6a2:	4313      	orrs	r3, r2
     6a4:	b2db      	uxtb	r3, r3
     6a6:	7623      	strb	r3, [r4, #24]
	if (is_list_element(&descr->tasks, task)) {
     6a8:	0026      	movs	r6, r4
     6aa:	3614      	adds	r6, #20
     6ac:	0029      	movs	r1, r5
     6ae:	0030      	movs	r0, r6
     6b0:	f000 f9bc 	bl	a2c <is_list_element>
     6b4:	2800      	cmp	r0, #0
     6b6:	d114      	bne.n	6e2 <timer_add_task+0x5e>
	task->time_label = descr->time;
     6b8:	6923      	ldr	r3, [r4, #16]
     6ba:	606b      	str	r3, [r5, #4]
	timer_add_timer_task(&descr->tasks, task, descr->time);
     6bc:	6922      	ldr	r2, [r4, #16]
     6be:	0029      	movs	r1, r5
     6c0:	0030      	movs	r0, r6
     6c2:	f7ff ff55 	bl	570 <timer_add_timer_task>
	descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6c6:	7e23      	ldrb	r3, [r4, #24]
     6c8:	2201      	movs	r2, #1
     6ca:	4393      	bics	r3, r2
     6cc:	7623      	strb	r3, [r4, #24]
	if (descr->flags & TIMER_FLAG_INTERRUPT_TRIGERRED) {
     6ce:	7e23      	ldrb	r3, [r4, #24]
     6d0:	079b      	lsls	r3, r3, #30
     6d2:	d412      	bmi.n	6fa <timer_add_task+0x76>
	return ERR_NONE;
     6d4:	2000      	movs	r0, #0
}
     6d6:	b002      	add	sp, #8
     6d8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && task);
     6da:	2000      	movs	r0, #0
     6dc:	e7db      	b.n	696 <timer_add_task+0x12>
     6de:	2000      	movs	r0, #0
     6e0:	e7d9      	b.n	696 <timer_add_task+0x12>
		descr->flags &= ~TIMER_FLAG_QUEUE_IS_TAKEN;
     6e2:	7e23      	ldrb	r3, [r4, #24]
     6e4:	2201      	movs	r2, #1
     6e6:	4393      	bics	r3, r2
     6e8:	7623      	strb	r3, [r4, #24]
		ASSERT(false);
     6ea:	327e      	adds	r2, #126	; 0x7e
     6ec:	490a      	ldr	r1, [pc, #40]	; (718 <timer_add_task+0x94>)
     6ee:	2000      	movs	r0, #0
     6f0:	f000 f998 	bl	a24 <assert>
		return ERR_ALREADY_INITIALIZED;
     6f4:	2012      	movs	r0, #18
     6f6:	4240      	negs	r0, r0
     6f8:	e7ed      	b.n	6d6 <timer_add_task+0x52>
		CRITICAL_SECTION_ENTER()
     6fa:	a801      	add	r0, sp, #4
     6fc:	f7ff fd3a 	bl	174 <atomic_enter_critical>
		descr->flags &= ~TIMER_FLAG_INTERRUPT_TRIGERRED;
     700:	7e23      	ldrb	r3, [r4, #24]
     702:	2202      	movs	r2, #2
     704:	4393      	bics	r3, r2
     706:	7623      	strb	r3, [r4, #24]
		_timer_set_irq(&descr->device);
     708:	0020      	movs	r0, r4
     70a:	f000 fbe2 	bl	ed2 <_timer_set_irq>
		CRITICAL_SECTION_LEAVE()
     70e:	a801      	add	r0, sp, #4
     710:	f7ff fd37 	bl	182 <atomic_leave_critical>
	return ERR_NONE;
     714:	2000      	movs	r0, #0
     716:	e7de      	b.n	6d6 <timer_add_task+0x52>
     718:	0000f54c 	.word	0x0000f54c

0000071c <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     71c:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     71e:	3808      	subs	r0, #8

	descr->stat = 0;
     720:	2300      	movs	r3, #0
     722:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     724:	6a43      	ldr	r3, [r0, #36]	; 0x24
     726:	2b00      	cmp	r3, #0
     728:	d000      	beq.n	72c <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     72a:	4798      	blx	r3
	}
}
     72c:	bd10      	pop	{r4, pc}

0000072e <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     72e:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     730:	3808      	subs	r0, #8

	descr->stat = 0;
     732:	2300      	movs	r3, #0
     734:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     738:	2b00      	cmp	r3, #0
     73a:	d000      	beq.n	73e <usart_error+0x10>
		descr->usart_cb.error(descr);
     73c:	4798      	blx	r3
	}
}
     73e:	bd10      	pop	{r4, pc}

00000740 <usart_fill_rx_buffer>:
{
     740:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     742:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     744:	302c      	adds	r0, #44	; 0x2c
     746:	f000 f9e5 	bl	b14 <ringbuffer_put>
	if (descr->usart_cb.rx_done) {
     74a:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     74c:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     74e:	2b00      	cmp	r3, #0
     750:	d001      	beq.n	756 <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     752:	0020      	movs	r0, r4
     754:	4798      	blx	r3
}
     756:	bd10      	pop	{r4, pc}

00000758 <usart_async_write>:
{
     758:	b570      	push	{r4, r5, r6, lr}
     75a:	0004      	movs	r4, r0
     75c:	000e      	movs	r6, r1
     75e:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     760:	2800      	cmp	r0, #0
     762:	d01d      	beq.n	7a0 <usart_async_write+0x48>
     764:	2900      	cmp	r1, #0
     766:	d01d      	beq.n	7a4 <usart_async_write+0x4c>
     768:	2a00      	cmp	r2, #0
     76a:	d11d      	bne.n	7a8 <usart_async_write+0x50>
     76c:	2000      	movs	r0, #0
     76e:	223c      	movs	r2, #60	; 0x3c
     770:	32ff      	adds	r2, #255	; 0xff
     772:	4910      	ldr	r1, [pc, #64]	; (7b4 <usart_async_write+0x5c>)
     774:	f000 f956 	bl	a24 <assert>
	if (descr->tx_por != descr->tx_buffer_length) {
     778:	2344      	movs	r3, #68	; 0x44
     77a:	5ae2      	ldrh	r2, [r4, r3]
     77c:	3308      	adds	r3, #8
     77e:	5ae3      	ldrh	r3, [r4, r3]
     780:	429a      	cmp	r2, r3
     782:	d113      	bne.n	7ac <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     784:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     786:	234c      	movs	r3, #76	; 0x4c
     788:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     78a:	2200      	movs	r2, #0
     78c:	3b08      	subs	r3, #8
     78e:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     790:	3b43      	subs	r3, #67	; 0x43
     792:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     794:	0020      	movs	r0, r4
     796:	3008      	adds	r0, #8
     798:	f000 fdf8 	bl	138c <_usart_async_enable_byte_sent_irq>
	return (int32_t)length;
     79c:	0028      	movs	r0, r5
}
     79e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     7a0:	2000      	movs	r0, #0
     7a2:	e7e4      	b.n	76e <usart_async_write+0x16>
     7a4:	2000      	movs	r0, #0
     7a6:	e7e2      	b.n	76e <usart_async_write+0x16>
     7a8:	2001      	movs	r0, #1
     7aa:	e7e0      	b.n	76e <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     7ac:	201c      	movs	r0, #28
     7ae:	4240      	negs	r0, r0
     7b0:	e7f5      	b.n	79e <usart_async_write+0x46>
     7b2:	46c0      	nop			; (mov r8, r8)
     7b4:	0000f564 	.word	0x0000f564

000007b8 <usart_process_byte_sent>:
{
     7b8:	b570      	push	{r4, r5, r6, lr}
     7ba:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     7bc:	0002      	movs	r2, r0
     7be:	3a08      	subs	r2, #8
     7c0:	2344      	movs	r3, #68	; 0x44
     7c2:	5ad3      	ldrh	r3, [r2, r3]
     7c4:	214c      	movs	r1, #76	; 0x4c
     7c6:	5a52      	ldrh	r2, [r2, r1]
     7c8:	4293      	cmp	r3, r2
     7ca:	d00d      	beq.n	7e8 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     7cc:	0002      	movs	r2, r0
     7ce:	6c01      	ldr	r1, [r0, #64]	; 0x40
     7d0:	3a08      	subs	r2, #8
     7d2:	1c5d      	adds	r5, r3, #1
     7d4:	2044      	movs	r0, #68	; 0x44
     7d6:	5215      	strh	r5, [r2, r0]
     7d8:	5cc9      	ldrb	r1, [r1, r3]
     7da:	0020      	movs	r0, r4
     7dc:	f000 fdd2 	bl	1384 <_usart_async_write_byte>
		_usart_async_enable_byte_sent_irq(&descr->device);
     7e0:	0020      	movs	r0, r4
     7e2:	f000 fdd3 	bl	138c <_usart_async_enable_byte_sent_irq>
}
     7e6:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     7e8:	f000 fdd4 	bl	1394 <_usart_async_enable_tx_done_irq>
}
     7ec:	e7fb      	b.n	7e6 <usart_process_byte_sent+0x2e>
	...

000007f0 <usart_async_read>:
{
     7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     7f2:	b085      	sub	sp, #20
     7f4:	0004      	movs	r4, r0
     7f6:	000d      	movs	r5, r1
     7f8:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     7fa:	2800      	cmp	r0, #0
     7fc:	d017      	beq.n	82e <usart_async_read+0x3e>
     7fe:	2900      	cmp	r1, #0
     800:	d017      	beq.n	832 <usart_async_read+0x42>
     802:	2a00      	cmp	r2, #0
     804:	d117      	bne.n	836 <usart_async_read+0x46>
     806:	2000      	movs	r0, #0
     808:	22ac      	movs	r2, #172	; 0xac
     80a:	0052      	lsls	r2, r2, #1
     80c:	4912      	ldr	r1, [pc, #72]	; (858 <usart_async_read+0x68>)
     80e:	f000 f909 	bl	a24 <assert>
	CRITICAL_SECTION_ENTER()
     812:	a803      	add	r0, sp, #12
     814:	f7ff fcae 	bl	174 <atomic_enter_critical>
	num = ringbuffer_num(&descr->rx);
     818:	3434      	adds	r4, #52	; 0x34
     81a:	0020      	movs	r0, r4
     81c:	9401      	str	r4, [sp, #4]
     81e:	f000 f997 	bl	b50 <ringbuffer_num>
     822:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     824:	a803      	add	r0, sp, #12
     826:	f7ff fcac 	bl	182 <atomic_leave_critical>
	uint16_t                       was_read = 0;
     82a:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     82c:	e00b      	b.n	846 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     82e:	2000      	movs	r0, #0
     830:	e7ea      	b.n	808 <usart_async_read+0x18>
     832:	2000      	movs	r0, #0
     834:	e7e8      	b.n	808 <usart_async_read+0x18>
     836:	2001      	movs	r0, #1
     838:	e7e6      	b.n	808 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     83a:	3401      	adds	r4, #1
     83c:	b2a4      	uxth	r4, r4
     83e:	1869      	adds	r1, r5, r1
     840:	9801      	ldr	r0, [sp, #4]
     842:	f000 f943 	bl	acc <ringbuffer_get>
	while ((was_read < num) && (was_read < length)) {
     846:	0021      	movs	r1, r4
     848:	42a7      	cmp	r7, r4
     84a:	d901      	bls.n	850 <usart_async_read+0x60>
     84c:	42b4      	cmp	r4, r6
     84e:	d3f4      	bcc.n	83a <usart_async_read+0x4a>
}
     850:	0020      	movs	r0, r4
     852:	b005      	add	sp, #20
     854:	bdf0      	pop	{r4, r5, r6, r7, pc}
     856:	46c0      	nop			; (mov r8, r8)
     858:	0000f564 	.word	0x0000f564

0000085c <usart_async_init>:
{
     85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     85e:	0004      	movs	r4, r0
     860:	000d      	movs	r5, r1
     862:	0016      	movs	r6, r2
     864:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     866:	2800      	cmp	r0, #0
     868:	d026      	beq.n	8b8 <usart_async_init+0x5c>
     86a:	2900      	cmp	r1, #0
     86c:	d026      	beq.n	8bc <usart_async_init+0x60>
     86e:	2a00      	cmp	r2, #0
     870:	d026      	beq.n	8c0 <usart_async_init+0x64>
     872:	2b00      	cmp	r3, #0
     874:	d126      	bne.n	8c4 <usart_async_init+0x68>
     876:	2000      	movs	r0, #0
     878:	223a      	movs	r2, #58	; 0x3a
     87a:	4915      	ldr	r1, [pc, #84]	; (8d0 <usart_async_init+0x74>)
     87c:	f000 f8d2 	bl	a24 <assert>
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     880:	0020      	movs	r0, r4
     882:	3034      	adds	r0, #52	; 0x34
     884:	003a      	movs	r2, r7
     886:	0031      	movs	r1, r6
     888:	f000 f8fc 	bl	a84 <ringbuffer_init>
     88c:	2800      	cmp	r0, #0
     88e:	d11b      	bne.n	8c8 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     890:	0020      	movs	r0, r4
     892:	3008      	adds	r0, #8
     894:	0029      	movs	r1, r5
     896:	f000 fd23 	bl	12e0 <_usart_async_init>
	if (init_status) {
     89a:	2800      	cmp	r0, #0
     89c:	d10b      	bne.n	8b6 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     89e:	4b0d      	ldr	r3, [pc, #52]	; (8d4 <usart_async_init+0x78>)
     8a0:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     8a2:	4b0d      	ldr	r3, [pc, #52]	; (8d8 <usart_async_init+0x7c>)
     8a4:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     8a6:	4b0d      	ldr	r3, [pc, #52]	; (8dc <usart_async_init+0x80>)
     8a8:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     8aa:	4b0d      	ldr	r3, [pc, #52]	; (8e0 <usart_async_init+0x84>)
     8ac:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     8ae:	4b0d      	ldr	r3, [pc, #52]	; (8e4 <usart_async_init+0x88>)
     8b0:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     8b2:	4b0d      	ldr	r3, [pc, #52]	; (8e8 <usart_async_init+0x8c>)
     8b4:	6163      	str	r3, [r4, #20]
}
     8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     8b8:	2000      	movs	r0, #0
     8ba:	e7dd      	b.n	878 <usart_async_init+0x1c>
     8bc:	2000      	movs	r0, #0
     8be:	e7db      	b.n	878 <usart_async_init+0x1c>
     8c0:	2000      	movs	r0, #0
     8c2:	e7d9      	b.n	878 <usart_async_init+0x1c>
     8c4:	2001      	movs	r0, #1
     8c6:	e7d7      	b.n	878 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     8c8:	200d      	movs	r0, #13
     8ca:	4240      	negs	r0, r0
     8cc:	e7f3      	b.n	8b6 <usart_async_init+0x5a>
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	0000f564 	.word	0x0000f564
     8d4:	000007f1 	.word	0x000007f1
     8d8:	00000759 	.word	0x00000759
     8dc:	000007b9 	.word	0x000007b9
     8e0:	00000741 	.word	0x00000741
     8e4:	0000071d 	.word	0x0000071d
     8e8:	0000072f 	.word	0x0000072f

000008ec <usart_async_enable>:
{
     8ec:	b510      	push	{r4, lr}
     8ee:	0004      	movs	r4, r0
	ASSERT(descr);
     8f0:	1e43      	subs	r3, r0, #1
     8f2:	4198      	sbcs	r0, r3
     8f4:	b2c0      	uxtb	r0, r0
     8f6:	2261      	movs	r2, #97	; 0x61
     8f8:	4904      	ldr	r1, [pc, #16]	; (90c <usart_async_enable+0x20>)
     8fa:	f000 f893 	bl	a24 <assert>
	_usart_async_enable(&descr->device);
     8fe:	0020      	movs	r0, r4
     900:	3008      	adds	r0, #8
     902:	f000 fd27 	bl	1354 <_usart_async_enable>
}
     906:	2000      	movs	r0, #0
     908:	bd10      	pop	{r4, pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	0000f564 	.word	0x0000f564

00000910 <usart_async_get_io_descriptor>:
{
     910:	b570      	push	{r4, r5, r6, lr}
     912:	0004      	movs	r4, r0
     914:	000d      	movs	r5, r1
	ASSERT(descr && io);
     916:	2800      	cmp	r0, #0
     918:	d00b      	beq.n	932 <usart_async_get_io_descriptor+0x22>
     91a:	2900      	cmp	r1, #0
     91c:	d007      	beq.n	92e <usart_async_get_io_descriptor+0x1e>
     91e:	2001      	movs	r0, #1
     920:	2277      	movs	r2, #119	; 0x77
     922:	4905      	ldr	r1, [pc, #20]	; (938 <usart_async_get_io_descriptor+0x28>)
     924:	f000 f87e 	bl	a24 <assert>
	*io = &descr->io;
     928:	602c      	str	r4, [r5, #0]
}
     92a:	2000      	movs	r0, #0
     92c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     92e:	2000      	movs	r0, #0
     930:	e7f6      	b.n	920 <usart_async_get_io_descriptor+0x10>
     932:	2000      	movs	r0, #0
     934:	e7f4      	b.n	920 <usart_async_get_io_descriptor+0x10>
     936:	46c0      	nop			; (mov r8, r8)
     938:	0000f564 	.word	0x0000f564

0000093c <usart_async_register_callback>:
{
     93c:	b570      	push	{r4, r5, r6, lr}
     93e:	0005      	movs	r5, r0
     940:	000e      	movs	r6, r1
     942:	0014      	movs	r4, r2
	ASSERT(descr);
     944:	1e43      	subs	r3, r0, #1
     946:	4198      	sbcs	r0, r3
     948:	b2c0      	uxtb	r0, r0
     94a:	2283      	movs	r2, #131	; 0x83
     94c:	4916      	ldr	r1, [pc, #88]	; (9a8 <usart_async_register_callback+0x6c>)
     94e:	f000 f869 	bl	a24 <assert>
	switch (type) {
     952:	2e01      	cmp	r6, #1
     954:	d011      	beq.n	97a <usart_async_register_callback+0x3e>
     956:	2e00      	cmp	r6, #0
     958:	d004      	beq.n	964 <usart_async_register_callback+0x28>
     95a:	2e02      	cmp	r6, #2
     95c:	d018      	beq.n	990 <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
     95e:	200d      	movs	r0, #13
     960:	4240      	negs	r0, r0
     962:	e009      	b.n	978 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
     964:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
     966:	1e62      	subs	r2, r4, #1
     968:	4194      	sbcs	r4, r2
     96a:	b2e2      	uxtb	r2, r4
     96c:	0028      	movs	r0, r5
     96e:	3008      	adds	r0, #8
     970:	2101      	movs	r1, #1
     972:	f000 fd13 	bl	139c <_usart_async_set_irq_state>
	return ERR_NONE;
     976:	2000      	movs	r0, #0
}
     978:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
     97a:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
     97c:	1e62      	subs	r2, r4, #1
     97e:	4194      	sbcs	r4, r2
     980:	b2e2      	uxtb	r2, r4
     982:	0028      	movs	r0, r5
     984:	3008      	adds	r0, #8
     986:	2102      	movs	r1, #2
     988:	f000 fd08 	bl	139c <_usart_async_set_irq_state>
	return ERR_NONE;
     98c:	2000      	movs	r0, #0
		break;
     98e:	e7f3      	b.n	978 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
     990:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
     992:	1e62      	subs	r2, r4, #1
     994:	4194      	sbcs	r4, r2
     996:	b2e2      	uxtb	r2, r4
     998:	0028      	movs	r0, r5
     99a:	3008      	adds	r0, #8
     99c:	2103      	movs	r1, #3
     99e:	f000 fcfd 	bl	139c <_usart_async_set_irq_state>
	return ERR_NONE;
     9a2:	2000      	movs	r0, #0
		break;
     9a4:	e7e8      	b.n	978 <usart_async_register_callback+0x3c>
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	0000f564 	.word	0x0000f564

000009ac <usart_async_set_baud_rate>:
{
     9ac:	b570      	push	{r4, r5, r6, lr}
     9ae:	0004      	movs	r4, r0
     9b0:	000d      	movs	r5, r1
	ASSERT(descr);
     9b2:	1e43      	subs	r3, r0, #1
     9b4:	4198      	sbcs	r0, r3
     9b6:	b2c0      	uxtb	r0, r0
     9b8:	22aa      	movs	r2, #170	; 0xaa
     9ba:	4905      	ldr	r1, [pc, #20]	; (9d0 <usart_async_set_baud_rate+0x24>)
     9bc:	f000 f832 	bl	a24 <assert>
	_usart_async_set_baud_rate(&descr->device, baud_rate);
     9c0:	0020      	movs	r0, r4
     9c2:	3008      	adds	r0, #8
     9c4:	0029      	movs	r1, r5
     9c6:	f000 fcce 	bl	1366 <_usart_async_set_baud_rate>
}
     9ca:	2000      	movs	r0, #0
     9cc:	bd70      	pop	{r4, r5, r6, pc}
     9ce:	46c0      	nop			; (mov r8, r8)
     9d0:	0000f564 	.word	0x0000f564

000009d4 <usart_async_set_parity>:
{
     9d4:	b570      	push	{r4, r5, r6, lr}
     9d6:	0004      	movs	r4, r0
     9d8:	000d      	movs	r5, r1
	ASSERT(descr);
     9da:	1e43      	subs	r3, r0, #1
     9dc:	4198      	sbcs	r0, r3
     9de:	b2c0      	uxtb	r0, r0
     9e0:	22cb      	movs	r2, #203	; 0xcb
     9e2:	4905      	ldr	r1, [pc, #20]	; (9f8 <usart_async_set_parity+0x24>)
     9e4:	f000 f81e 	bl	a24 <assert>
	_usart_async_set_parity(&descr->device, parity);
     9e8:	0020      	movs	r0, r4
     9ea:	3008      	adds	r0, #8
     9ec:	0029      	movs	r1, r5
     9ee:	f000 fcbf 	bl	1370 <_usart_async_set_parity>
}
     9f2:	2000      	movs	r0, #0
     9f4:	bd70      	pop	{r4, r5, r6, pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	0000f564 	.word	0x0000f564

000009fc <usart_async_set_stopbits>:
{
     9fc:	b570      	push	{r4, r5, r6, lr}
     9fe:	0004      	movs	r4, r0
     a00:	000d      	movs	r5, r1
	ASSERT(descr);
     a02:	1e43      	subs	r3, r0, #1
     a04:	4198      	sbcs	r0, r3
     a06:	b2c0      	uxtb	r0, r0
     a08:	22d6      	movs	r2, #214	; 0xd6
     a0a:	4905      	ldr	r1, [pc, #20]	; (a20 <usart_async_set_stopbits+0x24>)
     a0c:	f000 f80a 	bl	a24 <assert>
	_usart_async_set_stop_bits(&descr->device, stop_bits);
     a10:	0020      	movs	r0, r4
     a12:	3008      	adds	r0, #8
     a14:	0029      	movs	r1, r5
     a16:	f000 fcb0 	bl	137a <_usart_async_set_stop_bits>
}
     a1a:	2000      	movs	r0, #0
     a1c:	bd70      	pop	{r4, r5, r6, pc}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	0000f564 	.word	0x0000f564

00000a24 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     a24:	2800      	cmp	r0, #0
     a26:	d100      	bne.n	a2a <assert+0x6>
		__asm("BKPT #0");
     a28:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     a2a:	4770      	bx	lr

00000a2c <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     a2c:	6803      	ldr	r3, [r0, #0]
     a2e:	2b00      	cmp	r3, #0
     a30:	d003      	beq.n	a3a <is_list_element+0xe>
		if (it == element) {
     a32:	428b      	cmp	r3, r1
     a34:	d003      	beq.n	a3e <is_list_element+0x12>
	for (it = list->head; it; it = it->next) {
     a36:	681b      	ldr	r3, [r3, #0]
     a38:	e7f9      	b.n	a2e <is_list_element+0x2>
			return true;
		}
	}

	return false;
     a3a:	2000      	movs	r0, #0
}
     a3c:	4770      	bx	lr
			return true;
     a3e:	2001      	movs	r0, #1
     a40:	e7fc      	b.n	a3c <is_list_element+0x10>
	...

00000a44 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     a44:	b570      	push	{r4, r5, r6, lr}
     a46:	0004      	movs	r4, r0
     a48:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     a4a:	f7ff ffef 	bl	a2c <is_list_element>
     a4e:	2301      	movs	r3, #1
     a50:	4058      	eors	r0, r3
     a52:	b2c0      	uxtb	r0, r0
     a54:	2239      	movs	r2, #57	; 0x39
     a56:	4903      	ldr	r1, [pc, #12]	; (a64 <list_insert_as_head+0x20>)
     a58:	f7ff ffe4 	bl	a24 <assert>

	((struct list_element *)element)->next = list->head;
     a5c:	6823      	ldr	r3, [r4, #0]
     a5e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     a60:	6025      	str	r5, [r4, #0]
}
     a62:	bd70      	pop	{r4, r5, r6, pc}
     a64:	0000f584 	.word	0x0000f584

00000a68 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     a68:	6803      	ldr	r3, [r0, #0]
     a6a:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     a6c:	6001      	str	r1, [r0, #0]
}
     a6e:	4770      	bx	lr

00000a70 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     a70:	6803      	ldr	r3, [r0, #0]
     a72:	2b00      	cmp	r3, #0
     a74:	d003      	beq.n	a7e <list_remove_head+0xe>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     a76:	681a      	ldr	r2, [r3, #0]
     a78:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
     a7a:	0018      	movs	r0, r3
	}

	return NULL;
}
     a7c:	4770      	bx	lr
	return NULL;
     a7e:	2000      	movs	r0, #0
     a80:	e7fc      	b.n	a7c <list_remove_head+0xc>
	...

00000a84 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     a84:	b570      	push	{r4, r5, r6, lr}
     a86:	0004      	movs	r4, r0
     a88:	000e      	movs	r6, r1
     a8a:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     a8c:	2800      	cmp	r0, #0
     a8e:	d012      	beq.n	ab6 <ringbuffer_init+0x32>
     a90:	2900      	cmp	r1, #0
     a92:	d012      	beq.n	aba <ringbuffer_init+0x36>
     a94:	2a00      	cmp	r2, #0
     a96:	d112      	bne.n	abe <ringbuffer_init+0x3a>
     a98:	2000      	movs	r0, #0
     a9a:	2228      	movs	r2, #40	; 0x28
     a9c:	490a      	ldr	r1, [pc, #40]	; (ac8 <ringbuffer_init+0x44>)
     a9e:	f7ff ffc1 	bl	a24 <assert>

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     aa2:	1e6b      	subs	r3, r5, #1
     aa4:	422b      	tst	r3, r5
     aa6:	d10c      	bne.n	ac2 <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     aa8:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     aaa:	2300      	movs	r3, #0
     aac:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     aae:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     ab0:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     ab2:	2000      	movs	r0, #0
}
     ab4:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     ab6:	2000      	movs	r0, #0
     ab8:	e7ef      	b.n	a9a <ringbuffer_init+0x16>
     aba:	2000      	movs	r0, #0
     abc:	e7ed      	b.n	a9a <ringbuffer_init+0x16>
     abe:	2001      	movs	r0, #1
     ac0:	e7eb      	b.n	a9a <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     ac2:	200d      	movs	r0, #13
     ac4:	4240      	negs	r0, r0
     ac6:	e7f5      	b.n	ab4 <ringbuffer_init+0x30>
     ac8:	0000f5a4 	.word	0x0000f5a4

00000acc <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     acc:	b570      	push	{r4, r5, r6, lr}
     ace:	0004      	movs	r4, r0
     ad0:	000d      	movs	r5, r1
	ASSERT(rb && data);
     ad2:	2800      	cmp	r0, #0
     ad4:	d016      	beq.n	b04 <ringbuffer_get+0x38>
     ad6:	2900      	cmp	r1, #0
     ad8:	d012      	beq.n	b00 <ringbuffer_get+0x34>
     ada:	2001      	movs	r0, #1
     adc:	2240      	movs	r2, #64	; 0x40
     ade:	490c      	ldr	r1, [pc, #48]	; (b10 <ringbuffer_get+0x44>)
     ae0:	f7ff ffa0 	bl	a24 <assert>

	if (rb->write_index != rb->read_index) {
     ae4:	68a3      	ldr	r3, [r4, #8]
     ae6:	68e2      	ldr	r2, [r4, #12]
     ae8:	429a      	cmp	r2, r3
     aea:	d00d      	beq.n	b08 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     aec:	6862      	ldr	r2, [r4, #4]
     aee:	4013      	ands	r3, r2
     af0:	6822      	ldr	r2, [r4, #0]
     af2:	5cd3      	ldrb	r3, [r2, r3]
     af4:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     af6:	68a3      	ldr	r3, [r4, #8]
     af8:	3301      	adds	r3, #1
     afa:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     afc:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     afe:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     b00:	2000      	movs	r0, #0
     b02:	e7eb      	b.n	adc <ringbuffer_get+0x10>
     b04:	2000      	movs	r0, #0
     b06:	e7e9      	b.n	adc <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     b08:	200a      	movs	r0, #10
     b0a:	4240      	negs	r0, r0
     b0c:	e7f7      	b.n	afe <ringbuffer_get+0x32>
     b0e:	46c0      	nop			; (mov r8, r8)
     b10:	0000f5a4 	.word	0x0000f5a4

00000b14 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     b14:	b570      	push	{r4, r5, r6, lr}
     b16:	0004      	movs	r4, r0
     b18:	000d      	movs	r5, r1
	ASSERT(rb);
     b1a:	1e43      	subs	r3, r0, #1
     b1c:	4198      	sbcs	r0, r3
     b1e:	b2c0      	uxtb	r0, r0
     b20:	2251      	movs	r2, #81	; 0x51
     b22:	490a      	ldr	r1, [pc, #40]	; (b4c <ringbuffer_put+0x38>)
     b24:	f7ff ff7e 	bl	a24 <assert>

	rb->buf[rb->write_index & rb->size] = data;
     b28:	6863      	ldr	r3, [r4, #4]
     b2a:	68e2      	ldr	r2, [r4, #12]
     b2c:	4013      	ands	r3, r2
     b2e:	6822      	ldr	r2, [r4, #0]
     b30:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     b32:	68e3      	ldr	r3, [r4, #12]
     b34:	68a2      	ldr	r2, [r4, #8]
     b36:	1a9a      	subs	r2, r3, r2
     b38:	6861      	ldr	r1, [r4, #4]
     b3a:	428a      	cmp	r2, r1
     b3c:	d901      	bls.n	b42 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     b3e:	1a59      	subs	r1, r3, r1
     b40:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     b42:	3301      	adds	r3, #1
     b44:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     b46:	2000      	movs	r0, #0
     b48:	bd70      	pop	{r4, r5, r6, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	0000f5a4 	.word	0x0000f5a4

00000b50 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     b50:	b510      	push	{r4, lr}
     b52:	0004      	movs	r4, r0
	ASSERT(rb);
     b54:	1e43      	subs	r3, r0, #1
     b56:	4198      	sbcs	r0, r3
     b58:	b2c0      	uxtb	r0, r0
     b5a:	2267      	movs	r2, #103	; 0x67
     b5c:	4903      	ldr	r1, [pc, #12]	; (b6c <ringbuffer_num+0x1c>)
     b5e:	f7ff ff61 	bl	a24 <assert>

	return rb->write_index - rb->read_index;
     b62:	68e0      	ldr	r0, [r4, #12]
     b64:	68a3      	ldr	r3, [r4, #8]
     b66:	1ac0      	subs	r0, r0, r3
}
     b68:	bd10      	pop	{r4, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	0000f5a4 	.word	0x0000f5a4

00000b70 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     b70:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     b72:	4a06      	ldr	r2, [pc, #24]	; (b8c <_sbrk+0x1c>)
     b74:	6812      	ldr	r2, [r2, #0]
     b76:	2a00      	cmp	r2, #0
     b78:	d004      	beq.n	b84 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     b7a:	4a04      	ldr	r2, [pc, #16]	; (b8c <_sbrk+0x1c>)
     b7c:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     b7e:	18c3      	adds	r3, r0, r3
     b80:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     b82:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     b84:	4902      	ldr	r1, [pc, #8]	; (b90 <_sbrk+0x20>)
     b86:	4a01      	ldr	r2, [pc, #4]	; (b8c <_sbrk+0x1c>)
     b88:	6011      	str	r1, [r2, #0]
     b8a:	e7f6      	b.n	b7a <_sbrk+0xa>
     b8c:	20000a58 	.word	0x20000a58
     b90:	200037d8 	.word	0x200037d8

00000b94 <_get_cycles_for_us>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of us
 */
uint32_t _get_cycles_for_us(const uint16_t us)
{
     b94:	b510      	push	{r4, lr}
		return (us * (freq / 100000) + 29) / 30;
     b96:	0103      	lsls	r3, r0, #4
     b98:	1a1b      	subs	r3, r3, r0
     b9a:	0158      	lsls	r0, r3, #5
     b9c:	301d      	adds	r0, #29
     b9e:	211e      	movs	r1, #30
     ba0:	f004 fdae 	bl	5700 <__udivsi3>
	return _get_cycles_for_us_internal(us, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     ba4:	bd10      	pop	{r4, pc}

00000ba6 <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     ba6:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     ba8:	0103      	lsls	r3, r0, #4
     baa:	1a1b      	subs	r3, r3, r0
     bac:	0158      	lsls	r0, r3, #5
     bae:	3002      	adds	r0, #2
     bb0:	2103      	movs	r1, #3
     bb2:	f004 fda5 	bl	5700 <__udivsi3>
     bb6:	2364      	movs	r3, #100	; 0x64
     bb8:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     bba:	bd10      	pop	{r4, pc}

00000bbc <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     bbc:	3901      	subs	r1, #1
     bbe:	d8fd      	bhi.n	bbc <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     bc0:	4770      	bx	lr
	...

00000bc4 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     bc4:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     bc6:	4a09      	ldr	r2, [pc, #36]	; (bec <_init_chip+0x28>)
     bc8:	6853      	ldr	r3, [r2, #4]
     bca:	2106      	movs	r1, #6
     bcc:	430b      	orrs	r3, r1
     bce:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     bd0:	f000 f902 	bl	dd8 <_pm_init>
	_sysctrl_init_sources();
     bd4:	f000 ff0e 	bl	19f4 <_sysctrl_init_sources>
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     bd8:	2008      	movs	r0, #8
     bda:	f000 f8cf 	bl	d7c <_gclk_init_generators_by_fref>
#endif
	_sysctrl_init_referenced_generators();
     bde:	f000 ff2f 	bl	1a40 <_sysctrl_init_referenced_generators>
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     be2:	20f7      	movs	r0, #247	; 0xf7
     be4:	f000 f8ca 	bl	d7c <_gclk_init_generators_by_fref>
}
     be8:	bd10      	pop	{r4, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	41004000 	.word	0x41004000

00000bf0 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     bf0:	4b20      	ldr	r3, [pc, #128]	; (c74 <_ext_irq_init+0x84>)
     bf2:	785b      	ldrb	r3, [r3, #1]
     bf4:	09db      	lsrs	r3, r3, #7
     bf6:	d1fb      	bne.n	bf0 <_ext_irq_init>
     bf8:	4b1e      	ldr	r3, [pc, #120]	; (c74 <_ext_irq_init+0x84>)
     bfa:	785b      	ldrb	r3, [r3, #1]
     bfc:	09db      	lsrs	r3, r3, #7
     bfe:	d1fb      	bne.n	bf8 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     c00:	4b1c      	ldr	r3, [pc, #112]	; (c74 <_ext_irq_init+0x84>)
     c02:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     c04:	079b      	lsls	r3, r3, #30
     c06:	d50a      	bpl.n	c1e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     c08:	2200      	movs	r2, #0
     c0a:	4b1a      	ldr	r3, [pc, #104]	; (c74 <_ext_irq_init+0x84>)
     c0c:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c0e:	4b19      	ldr	r3, [pc, #100]	; (c74 <_ext_irq_init+0x84>)
     c10:	785b      	ldrb	r3, [r3, #1]
     c12:	09db      	lsrs	r3, r3, #7
     c14:	d1fb      	bne.n	c0e <_ext_irq_init+0x1e>
     c16:	4b17      	ldr	r3, [pc, #92]	; (c74 <_ext_irq_init+0x84>)
     c18:	785b      	ldrb	r3, [r3, #1]
     c1a:	09db      	lsrs	r3, r3, #7
     c1c:	d1fb      	bne.n	c16 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     c1e:	2201      	movs	r2, #1
     c20:	4b14      	ldr	r3, [pc, #80]	; (c74 <_ext_irq_init+0x84>)
     c22:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c24:	4b13      	ldr	r3, [pc, #76]	; (c74 <_ext_irq_init+0x84>)
     c26:	785b      	ldrb	r3, [r3, #1]
     c28:	09db      	lsrs	r3, r3, #7
     c2a:	d1fb      	bne.n	c24 <_ext_irq_init+0x34>
     c2c:	4b11      	ldr	r3, [pc, #68]	; (c74 <_ext_irq_init+0x84>)
     c2e:	785b      	ldrb	r3, [r3, #1]
     c30:	09db      	lsrs	r3, r3, #7
     c32:	d1fb      	bne.n	c2c <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     c34:	4b0f      	ldr	r3, [pc, #60]	; (c74 <_ext_irq_init+0x84>)
     c36:	2200      	movs	r2, #0
     c38:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     c3a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     c3c:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     c3e:	619a      	str	r2, [r3, #24]
     c40:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     c42:	781a      	ldrb	r2, [r3, #0]
     c44:	2102      	movs	r1, #2
     c46:	430a      	orrs	r2, r1
     c48:	b2d2      	uxtb	r2, r2
     c4a:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     c4c:	4b09      	ldr	r3, [pc, #36]	; (c74 <_ext_irq_init+0x84>)
     c4e:	785b      	ldrb	r3, [r3, #1]
     c50:	09db      	lsrs	r3, r3, #7
     c52:	d1fb      	bne.n	c4c <_ext_irq_init+0x5c>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c54:	4b08      	ldr	r3, [pc, #32]	; (c78 <_ext_irq_init+0x88>)
     c56:	2210      	movs	r2, #16
     c58:	2180      	movs	r1, #128	; 0x80
     c5a:	505a      	str	r2, [r3, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     c5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     c60:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c64:	3101      	adds	r1, #1
     c66:	31ff      	adds	r1, #255	; 0xff
     c68:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     c6a:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     c6c:	4b03      	ldr	r3, [pc, #12]	; (c7c <_ext_irq_init+0x8c>)
     c6e:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     c70:	2000      	movs	r0, #0
     c72:	4770      	bx	lr
     c74:	40001800 	.word	0x40001800
     c78:	e000e100 	.word	0xe000e100
     c7c:	20000a5c 	.word	0x20000a5c

00000c80 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
     c80:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
     c82:	2b00      	cmp	r3, #0
     c84:	d00b      	beq.n	c9e <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
     c86:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
     c88:	2aff      	cmp	r2, #255	; 0xff
     c8a:	d017      	beq.n	cbc <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
     c8c:	2900      	cmp	r1, #0
     c8e:	d10f      	bne.n	cb0 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
     c90:	2301      	movs	r3, #1
     c92:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
     c94:	4a0b      	ldr	r2, [pc, #44]	; (cc4 <_ext_irq_enable+0x44>)
     c96:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     c98:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
     c9a:	2000      	movs	r0, #0
}
     c9c:	4770      	bx	lr
		if (_map[i].pin == pin) {
     c9e:	2828      	cmp	r0, #40	; 0x28
     ca0:	d002      	beq.n	ca8 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
     ca2:	3301      	adds	r3, #1
     ca4:	b2db      	uxtb	r3, r3
     ca6:	e7ec      	b.n	c82 <_ext_irq_enable+0x2>
			extint = _map[i].extint;
     ca8:	00da      	lsls	r2, r3, #3
     caa:	4b07      	ldr	r3, [pc, #28]	; (cc8 <_ext_irq_enable+0x48>)
     cac:	5cd2      	ldrb	r2, [r2, r3]
			break;
     cae:	e7eb      	b.n	c88 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
     cb0:	2301      	movs	r3, #1
     cb2:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
     cb4:	4a03      	ldr	r2, [pc, #12]	; (cc4 <_ext_irq_enable+0x44>)
     cb6:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
     cb8:	2000      	movs	r0, #0
     cba:	e7ef      	b.n	c9c <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
     cbc:	200d      	movs	r0, #13
     cbe:	4240      	negs	r0, r0
     cc0:	e7ec      	b.n	c9c <_ext_irq_enable+0x1c>
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	40001800 	.word	0x40001800
     cc8:	0000f5e0 	.word	0x0000f5e0

00000ccc <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     ccc:	b570      	push	{r4, r5, r6, lr}
     cce:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     cd0:	4b26      	ldr	r3, [pc, #152]	; (d6c <EIC_Handler+0xa0>)
     cd2:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     cd4:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     cd6:	400a      	ands	r2, r1
     cd8:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     cda:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     cdc:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     cde:	4b24      	ldr	r3, [pc, #144]	; (d70 <EIC_Handler+0xa4>)
     ce0:	6818      	ldr	r0, [r3, #0]
     ce2:	1e43      	subs	r3, r0, #1
     ce4:	4198      	sbcs	r0, r3
     ce6:	b2c0      	uxtb	r0, r0
     ce8:	22d2      	movs	r2, #210	; 0xd2
     cea:	4922      	ldr	r1, [pc, #136]	; (d74 <EIC_Handler+0xa8>)
     cec:	f7ff fe9a 	bl	a24 <assert>
	uint32_t          pin = INVALID_PIN_NUMBER;
     cf0:	2501      	movs	r5, #1
     cf2:	426d      	negs	r5, r5

	while (flags) {
     cf4:	e02e      	b.n	d54 <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     cf6:	3901      	subs	r1, #1
     cf8:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     cfa:	42b0      	cmp	r0, r6
     cfc:	d80e      	bhi.n	d1c <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
     cfe:	1832      	adds	r2, r6, r0
     d00:	1052      	asrs	r2, r2, #1
     d02:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
     d04:	23ff      	movs	r3, #255	; 0xff
     d06:	4013      	ands	r3, r2
     d08:	00db      	lsls	r3, r3, #3
     d0a:	4a1b      	ldr	r2, [pc, #108]	; (d78 <EIC_Handler+0xac>)
     d0c:	5c9b      	ldrb	r3, [r3, r2]
     d0e:	42a3      	cmp	r3, r4
     d10:	d003      	beq.n	d1a <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
     d12:	daf0      	bge.n	cf6 <EIC_Handler+0x2a>
					lower = middle + 1;
     d14:	3101      	adds	r1, #1
     d16:	b2c8      	uxtb	r0, r1
     d18:	e7ef      	b.n	cfa <EIC_Handler+0x2e>
					pin = _map[middle].pin;
     d1a:	2528      	movs	r5, #40	; 0x28
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     d1c:	1c6b      	adds	r3, r5, #1
     d1e:	d003      	beq.n	d28 <EIC_Handler+0x5c>
				callback(pin);
     d20:	4b13      	ldr	r3, [pc, #76]	; (d70 <EIC_Handler+0xa4>)
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	0028      	movs	r0, r5
     d26:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     d28:	2201      	movs	r2, #1
     d2a:	40a2      	lsls	r2, r4
     d2c:	9b01      	ldr	r3, [sp, #4]
     d2e:	4393      	bics	r3, r2
     d30:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     d32:	9801      	ldr	r0, [sp, #4]
     d34:	f004 fea4 	bl	5a80 <__ffssi2>
     d38:	3801      	subs	r0, #1
     d3a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d3c:	1c63      	adds	r3, r4, #1
     d3e:	d002      	beq.n	d46 <EIC_Handler+0x7a>
     d40:	2601      	movs	r6, #1
     d42:	2000      	movs	r0, #0
     d44:	e7d9      	b.n	cfa <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
     d46:	4b09      	ldr	r3, [pc, #36]	; (d6c <EIC_Handler+0xa0>)
     d48:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     d4a:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     d4c:	400a      	ands	r2, r1
     d4e:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     d50:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d52:	611a      	str	r2, [r3, #16]
	while (flags) {
     d54:	9b01      	ldr	r3, [sp, #4]
     d56:	2b00      	cmp	r3, #0
     d58:	d005      	beq.n	d66 <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
     d5a:	9801      	ldr	r0, [sp, #4]
     d5c:	f004 fe90 	bl	5a80 <__ffssi2>
     d60:	3801      	subs	r0, #1
     d62:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     d64:	e7ea      	b.n	d3c <EIC_Handler+0x70>
	}
}
     d66:	b002      	add	sp, #8
     d68:	bd70      	pop	{r4, r5, r6, pc}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	40001800 	.word	0x40001800
     d70:	20000a5c 	.word	0x20000a5c
     d74:	0000f5c8 	.word	0x0000f5c8
     d78:	0000f5e0 	.word	0x0000f5e0

00000d7c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     d7c:	07c3      	lsls	r3, r0, #31
     d7e:	d509      	bpl.n	d94 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     d80:	4b11      	ldr	r3, [pc, #68]	; (dc8 <_gclk_init_generators_by_fref+0x4c>)
     d82:	2280      	movs	r2, #128	; 0x80
     d84:	0052      	lsls	r2, r2, #1
     d86:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     d88:	4a10      	ldr	r2, [pc, #64]	; (dcc <_gclk_init_generators_by_fref+0x50>)
     d8a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     d8c:	4b0e      	ldr	r3, [pc, #56]	; (dc8 <_gclk_init_generators_by_fref+0x4c>)
     d8e:	785b      	ldrb	r3, [r3, #1]
     d90:	09db      	lsrs	r3, r3, #7
     d92:	d1fb      	bne.n	d8c <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     d94:	0783      	lsls	r3, r0, #30
     d96:	d509      	bpl.n	dac <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     d98:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <_gclk_init_generators_by_fref+0x4c>)
     d9a:	2202      	movs	r2, #2
     d9c:	32ff      	adds	r2, #255	; 0xff
     d9e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     da0:	4a0b      	ldr	r2, [pc, #44]	; (dd0 <_gclk_init_generators_by_fref+0x54>)
     da2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     da4:	4b08      	ldr	r3, [pc, #32]	; (dc8 <_gclk_init_generators_by_fref+0x4c>)
     da6:	785b      	ldrb	r3, [r3, #1]
     da8:	09db      	lsrs	r3, r3, #7
     daa:	d1fb      	bne.n	da4 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     dac:	0703      	lsls	r3, r0, #28
     dae:	d509      	bpl.n	dc4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     db0:	4b05      	ldr	r3, [pc, #20]	; (dc8 <_gclk_init_generators_by_fref+0x4c>)
     db2:	2204      	movs	r2, #4
     db4:	32ff      	adds	r2, #255	; 0xff
     db6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     db8:	4a06      	ldr	r2, [pc, #24]	; (dd4 <_gclk_init_generators_by_fref+0x58>)
     dba:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     dbc:	4b02      	ldr	r3, [pc, #8]	; (dc8 <_gclk_init_generators_by_fref+0x4c>)
     dbe:	785b      	ldrb	r3, [r3, #1]
     dc0:	09db      	lsrs	r3, r3, #7
     dc2:	d1fb      	bne.n	dbc <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
     dc4:	4770      	bx	lr
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	40000c00 	.word	0x40000c00
     dcc:	00010700 	.word	0x00010700
     dd0:	00010601 	.word	0x00010601
     dd4:	00010303 	.word	0x00010303

00000dd8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     dd8:	4b06      	ldr	r3, [pc, #24]	; (df4 <_pm_init+0x1c>)
     dda:	7a1a      	ldrb	r2, [r3, #8]
     ddc:	b2d2      	uxtb	r2, r2
     dde:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     de0:	7a5a      	ldrb	r2, [r3, #9]
     de2:	b2d2      	uxtb	r2, r2
     de4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     de6:	7a9a      	ldrb	r2, [r3, #10]
     de8:	b2d2      	uxtb	r2, r2
     dea:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     dec:	7ada      	ldrb	r2, [r3, #11]
     dee:	b2d2      	uxtb	r2, r2
     df0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     df2:	4770      	bx	lr
     df4:	40000400 	.word	0x40000400

00000df8 <_rtc_timer_interrupt_handler>:
 * \brief RTC Timer interrupt handler
 *
 * \param[in] p The pointer to calendar device struct
 */
static void _rtc_timer_interrupt_handler(struct _timer_device *dev)
{
     df8:	b510      	push	{r4, lr}
     dfa:	0004      	movs	r4, r0
	return tmp;
}

static inline hri_rtcmode0_intflag_reg_t hri_rtcmode0_read_INTFLAG_reg(const void *const hw)
{
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     dfc:	68c3      	ldr	r3, [r0, #12]
     dfe:	7a1b      	ldrb	r3, [r3, #8]
	/* Read and mask interrupt flag register */
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);

	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     e00:	07db      	lsls	r3, r3, #31
     e02:	d506      	bpl.n	e12 <_rtc_timer_interrupt_handler+0x1a>
		if (dev->timer_cb.period_expired) {
     e04:	6803      	ldr	r3, [r0, #0]
     e06:	2b00      	cmp	r3, #0
     e08:	d000      	beq.n	e0c <_rtc_timer_interrupt_handler+0x14>
			dev->timer_cb.period_expired(dev);
     e0a:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     e0c:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     e0e:	2201      	movs	r2, #1
     e10:	721a      	strb	r2, [r3, #8]
	}
}
     e12:	bd10      	pop	{r4, pc}

00000e14 <_timer_init>:
{
     e14:	b570      	push	{r4, r5, r6, lr}
     e16:	0004      	movs	r4, r0
     e18:	000d      	movs	r5, r1
	ASSERT(dev);
     e1a:	1e43      	subs	r3, r0, #1
     e1c:	4198      	sbcs	r0, r3
     e1e:	b2c0      	uxtb	r0, r0
     e20:	2230      	movs	r2, #48	; 0x30
     e22:	4910      	ldr	r1, [pc, #64]	; (e64 <_timer_init+0x50>)
     e24:	f7ff fdfe 	bl	a24 <assert>
	dev->hw = hw;
     e28:	60e5      	str	r5, [r4, #12]
}

static inline void hri_rtcmode0_write_CTRL_reg(const void *const hw, hri_rtcmode0_ctrl_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     e2a:	2301      	movs	r3, #1
     e2c:	802b      	strh	r3, [r5, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e2e:	7aab      	ldrb	r3, [r5, #10]
     e30:	09db      	lsrs	r3, r3, #7
     e32:	d1fc      	bne.n	e2e <_timer_init+0x1a>
	hri_rtcmode0_wait_for_sync(dev->hw);
     e34:	68e2      	ldr	r2, [r4, #12]
     e36:	7a93      	ldrb	r3, [r2, #10]
     e38:	09db      	lsrs	r3, r3, #7
     e3a:	d1fc      	bne.n	e36 <_timer_init+0x22>
	((Rtc *)hw)->MODE0.CTRL.reg = data;
     e3c:	3380      	adds	r3, #128	; 0x80
     e3e:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e40:	7a93      	ldrb	r3, [r2, #10]
     e42:	09db      	lsrs	r3, r3, #7
     e44:	d1fc      	bne.n	e40 <_timer_init+0x2c>
	hri_rtcmode0_write_COMP_COMP_bf(dev->hw, 0, CONF_RTC_COMP_VAL);
     e46:	68e2      	ldr	r2, [r4, #12]

static inline void hri_rtcmode0_write_COMP_COMP_bf(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	uint32_t tmp;
	RTC_CRITICAL_SECTION_ENTER();
	tmp = ((Rtc *)hw)->MODE0.COMP[index].reg;
     e48:	6993      	ldr	r3, [r2, #24]
	tmp &= ~RTC_MODE0_COMP_COMP_Msk;
	tmp |= RTC_MODE0_COMP_COMP(data);
	((Rtc *)hw)->MODE0.COMP[index].reg = tmp;
     e4a:	2301      	movs	r3, #1
     e4c:	6193      	str	r3, [r2, #24]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e4e:	7a93      	ldrb	r3, [r2, #10]
     e50:	09db      	lsrs	r3, r3, #7
     e52:	d1fc      	bne.n	e4e <_timer_init+0x3a>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     e54:	3301      	adds	r3, #1
     e56:	68e2      	ldr	r2, [r4, #12]
     e58:	71d3      	strb	r3, [r2, #7]
	_rtc_dev = dev;
     e5a:	4b03      	ldr	r3, [pc, #12]	; (e68 <_timer_init+0x54>)
     e5c:	601c      	str	r4, [r3, #0]
}
     e5e:	2000      	movs	r0, #0
     e60:	bd70      	pop	{r4, r5, r6, pc}
     e62:	46c0      	nop			; (mov r8, r8)
     e64:	0000f5e8 	.word	0x0000f5e8
     e68:	20000a60 	.word	0x20000a60

00000e6c <_timer_start>:
{
     e6c:	b510      	push	{r4, lr}
     e6e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->hw);
     e70:	d020      	beq.n	eb4 <_timer_start+0x48>
     e72:	68c3      	ldr	r3, [r0, #12]
     e74:	2b00      	cmp	r3, #0
     e76:	d01b      	beq.n	eb0 <_timer_start+0x44>
     e78:	2001      	movs	r0, #1
     e7a:	2267      	movs	r2, #103	; 0x67
     e7c:	490e      	ldr	r1, [pc, #56]	; (eb8 <_timer_start+0x4c>)
     e7e:	f7ff fdd1 	bl	a24 <assert>
     e82:	2208      	movs	r2, #8
     e84:	4b0d      	ldr	r3, [pc, #52]	; (ebc <_timer_start+0x50>)
     e86:	601a      	str	r2, [r3, #0]
	hri_rtcmode0_write_COUNT_COUNT_bf(dev->hw, 0);
     e88:	68e2      	ldr	r2, [r4, #12]
	tmp = ((Rtc *)hw)->MODE0.COUNT.reg;
     e8a:	6913      	ldr	r3, [r2, #16]
	((Rtc *)hw)->MODE0.COUNT.reg = tmp;
     e8c:	2300      	movs	r3, #0
     e8e:	6113      	str	r3, [r2, #16]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     e90:	7a93      	ldrb	r3, [r2, #10]
     e92:	09db      	lsrs	r3, r3, #7
     e94:	d1fc      	bne.n	e90 <_timer_start+0x24>
	hri_rtcmode0_wait_for_sync(dev->hw);
     e96:	68e2      	ldr	r2, [r4, #12]
     e98:	7a93      	ldrb	r3, [r2, #10]
     e9a:	09db      	lsrs	r3, r3, #7
     e9c:	d1fc      	bne.n	e98 <_timer_start+0x2c>
	((Rtc *)hw)->MODE0.CTRL.reg |= RTC_MODE0_CTRL_ENABLE;
     e9e:	8813      	ldrh	r3, [r2, #0]
     ea0:	2102      	movs	r1, #2
     ea2:	430b      	orrs	r3, r1
     ea4:	b29b      	uxth	r3, r3
     ea6:	8013      	strh	r3, [r2, #0]
	while (((const Rtc *)hw)->MODE0.STATUS.bit.SYNCBUSY)
     ea8:	7a93      	ldrb	r3, [r2, #10]
     eaa:	09db      	lsrs	r3, r3, #7
     eac:	d1fc      	bne.n	ea8 <_timer_start+0x3c>
}
     eae:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->hw);
     eb0:	2000      	movs	r0, #0
     eb2:	e7e2      	b.n	e7a <_timer_start+0xe>
     eb4:	2000      	movs	r0, #0
     eb6:	e7e0      	b.n	e7a <_timer_start+0xe>
     eb8:	0000f5e8 	.word	0x0000f5e8
     ebc:	e000e100 	.word	0xe000e100

00000ec0 <_timer_is_started>:
	return hri_rtcmode0_get_CTRL_ENABLE_bit(dev->hw);
     ec0:	68c2      	ldr	r2, [r0, #12]
     ec2:	7a93      	ldrb	r3, [r2, #10]
     ec4:	09db      	lsrs	r3, r3, #7
     ec6:	d1fc      	bne.n	ec2 <_timer_is_started+0x2>
	tmp = ((Rtc *)hw)->MODE0.CTRL.reg;
     ec8:	8813      	ldrh	r3, [r2, #0]
	tmp = (tmp & RTC_MODE0_CTRL_ENABLE) >> RTC_MODE0_CTRL_ENABLE_Pos;
     eca:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
     ecc:	2001      	movs	r0, #1
     ece:	4018      	ands	r0, r3
}
     ed0:	4770      	bx	lr

00000ed2 <_timer_set_irq>:
}
     ed2:	4770      	bx	lr

00000ed4 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     ed4:	2000      	movs	r0, #0
     ed6:	4770      	bx	lr

00000ed8 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     ed8:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     eda:	4b02      	ldr	r3, [pc, #8]	; (ee4 <RTC_Handler+0xc>)
     edc:	6818      	ldr	r0, [r3, #0]
     ede:	f7ff ff8b 	bl	df8 <_rtc_timer_interrupt_handler>
}
     ee2:	bd10      	pop	{r4, pc}
     ee4:	20000a60 	.word	0x20000a60

00000ee8 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     ee8:	4b02      	ldr	r3, [pc, #8]	; (ef4 <_sercom_get_hardware_index+0xc>)
     eea:	469c      	mov	ip, r3
     eec:	4460      	add	r0, ip
     eee:	0a80      	lsrs	r0, r0, #10
     ef0:	b2c0      	uxtb	r0, r0
}
     ef2:	4770      	bx	lr
     ef4:	bdfff800 	.word	0xbdfff800

00000ef8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     ef8:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     efa:	f7ff fff5 	bl	ee8 <_sercom_get_hardware_index>
     efe:	3007      	adds	r0, #7
     f00:	b2c0      	uxtb	r0, r0
}
     f02:	bd10      	pop	{r4, pc}

00000f04 <_spi_sync_enable>:
		;
}

static inline bool hri_sercomspi_is_syncing(const void *const hw)
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
     f04:	8a03      	ldrh	r3, [r0, #16]
     f06:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
     f08:	d108      	bne.n	f1c <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     f0a:	6803      	ldr	r3, [r0, #0]
     f0c:	2202      	movs	r2, #2
     f0e:	4313      	orrs	r3, r2
     f10:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
     f12:	8a03      	ldrh	r3, [r0, #16]
     f14:	0bdb      	lsrs	r3, r3, #15
     f16:	d1fc      	bne.n	f12 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     f18:	2000      	movs	r0, #0
}
     f1a:	4770      	bx	lr
		return ERR_BUSY;
     f1c:	2004      	movs	r0, #4
     f1e:	4240      	negs	r0, r0
     f20:	e7fb      	b.n	f1a <_spi_sync_enable+0x16>
	...

00000f24 <_get_sercom_index>:
{
     f24:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     f26:	f7ff ffdf 	bl	ee8 <_sercom_get_hardware_index>
     f2a:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     f2c:	2000      	movs	r0, #0
     f2e:	2800      	cmp	r0, #0
     f30:	d006      	beq.n	f40 <_get_sercom_index+0x1c>
	ASSERT(false);
     f32:	4a07      	ldr	r2, [pc, #28]	; (f50 <_get_sercom_index+0x2c>)
     f34:	4907      	ldr	r1, [pc, #28]	; (f54 <_get_sercom_index+0x30>)
     f36:	2000      	movs	r0, #0
     f38:	f7ff fd74 	bl	a24 <assert>
	return 0;
     f3c:	2000      	movs	r0, #0
}
     f3e:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     f40:	0102      	lsls	r2, r0, #4
     f42:	4905      	ldr	r1, [pc, #20]	; (f58 <_get_sercom_index+0x34>)
     f44:	5c52      	ldrb	r2, [r2, r1]
     f46:	4293      	cmp	r3, r2
     f48:	d0f9      	beq.n	f3e <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     f4a:	3001      	adds	r0, #1
     f4c:	b2c0      	uxtb	r0, r0
     f4e:	e7ee      	b.n	f2e <_get_sercom_index+0xa>
     f50:	0000022a 	.word	0x0000022a
     f54:	0000f600 	.word	0x0000f600
     f58:	0000f634 	.word	0x0000f634

00000f5c <_usart_init>:
{
     f5c:	b510      	push	{r4, lr}
     f5e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     f60:	f7ff ffe0 	bl	f24 <_get_sercom_index>
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f64:	8a23      	ldrh	r3, [r4, #16]
     f66:	0bdb      	lsrs	r3, r3, #15
     f68:	d1fc      	bne.n	f64 <_usart_init+0x8>
     f6a:	8a23      	ldrh	r3, [r4, #16]
     f6c:	0bdb      	lsrs	r3, r3, #15
     f6e:	d1fc      	bne.n	f6a <_usart_init+0xe>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     f70:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     f72:	079b      	lsls	r3, r3, #30
     f74:	d507      	bpl.n	f86 <_usart_init+0x2a>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f76:	2300      	movs	r3, #0
     f78:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f7a:	8a23      	ldrh	r3, [r4, #16]
     f7c:	0bdb      	lsrs	r3, r3, #15
     f7e:	d1fc      	bne.n	f7a <_usart_init+0x1e>
     f80:	8a23      	ldrh	r3, [r4, #16]
     f82:	0bdb      	lsrs	r3, r3, #15
     f84:	d1fc      	bne.n	f80 <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f86:	2301      	movs	r3, #1
     f88:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     f8a:	8a23      	ldrh	r3, [r4, #16]
     f8c:	0bdb      	lsrs	r3, r3, #15
     f8e:	d1fc      	bne.n	f8a <_usart_init+0x2e>
     f90:	8a23      	ldrh	r3, [r4, #16]
     f92:	0bdb      	lsrs	r3, r3, #15
     f94:	d1fc      	bne.n	f90 <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     f96:	0102      	lsls	r2, r0, #4
     f98:	4b0b      	ldr	r3, [pc, #44]	; (fc8 <_usart_init+0x6c>)
     f9a:	189b      	adds	r3, r3, r2
     f9c:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     f9e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     fa0:	8a23      	ldrh	r3, [r4, #16]
     fa2:	0bdb      	lsrs	r3, r3, #15
     fa4:	d1fc      	bne.n	fa0 <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     fa6:	0102      	lsls	r2, r0, #4
     fa8:	4b07      	ldr	r3, [pc, #28]	; (fc8 <_usart_init+0x6c>)
     faa:	189b      	adds	r3, r3, r2
     fac:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     fae:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     fb0:	8a23      	ldrh	r3, [r4, #16]
     fb2:	0bdb      	lsrs	r3, r3, #15
     fb4:	d1fc      	bne.n	fb0 <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     fb6:	0100      	lsls	r0, r0, #4
     fb8:	4b03      	ldr	r3, [pc, #12]	; (fc8 <_usart_init+0x6c>)
     fba:	1818      	adds	r0, r3, r0
     fbc:	8983      	ldrh	r3, [r0, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     fbe:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     fc0:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     fc2:	7223      	strb	r3, [r4, #8]
}
     fc4:	2000      	movs	r0, #0
     fc6:	bd10      	pop	{r4, pc}
     fc8:	0000f634 	.word	0x0000f634

00000fcc <_get_i2cm_index>:
{
     fcc:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     fce:	f7ff ff8b 	bl	ee8 <_sercom_get_hardware_index>
     fd2:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     fd4:	2000      	movs	r0, #0
     fd6:	2800      	cmp	r0, #0
     fd8:	d006      	beq.n	fe8 <_get_i2cm_index+0x1c>
	ASSERT(false);
     fda:	4a08      	ldr	r2, [pc, #32]	; (ffc <_get_i2cm_index+0x30>)
     fdc:	4908      	ldr	r1, [pc, #32]	; (1000 <_get_i2cm_index+0x34>)
     fde:	2000      	movs	r0, #0
     fe0:	f7ff fd20 	bl	a24 <assert>
	return 0;
     fe4:	2000      	movs	r0, #0
}
     fe6:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
     fe8:	0043      	lsls	r3, r0, #1
     fea:	181b      	adds	r3, r3, r0
     fec:	00d9      	lsls	r1, r3, #3
     fee:	4b05      	ldr	r3, [pc, #20]	; (1004 <_get_i2cm_index+0x38>)
     ff0:	5ccb      	ldrb	r3, [r1, r3]
     ff2:	429a      	cmp	r2, r3
     ff4:	d0f7      	beq.n	fe6 <_get_i2cm_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     ff6:	3001      	adds	r0, #1
     ff8:	b2c0      	uxtb	r0, r0
     ffa:	e7ec      	b.n	fd6 <_get_i2cm_index+0xa>
     ffc:	00000366 	.word	0x00000366
    1000:	0000f600 	.word	0x0000f600
    1004:	0000f61c 	.word	0x0000f61c

00001008 <_sercom_i2c_sync_send_address>:
{
    1008:	b570      	push	{r4, r5, r6, lr}
    100a:	0005      	movs	r5, r0
	void *             hw  = i2c_dev->hw;
    100c:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    100e:	1e43      	subs	r3, r0, #1
    1010:	4198      	sbcs	r0, r3
    1012:	b2c0      	uxtb	r0, r0
    1014:	4a5c      	ldr	r2, [pc, #368]	; (1188 <_sercom_i2c_sync_send_address+0x180>)
    1016:	495d      	ldr	r1, [pc, #372]	; (118c <_sercom_i2c_sync_send_address+0x184>)
    1018:	f7ff fd04 	bl	a24 <assert>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    101c:	6863      	ldr	r3, [r4, #4]
    101e:	4a5c      	ldr	r2, [pc, #368]	; (1190 <_sercom_i2c_sync_send_address+0x188>)
    1020:	4013      	ands	r3, r2
    1022:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1024:	8a23      	ldrh	r3, [r4, #16]
    1026:	0bdb      	lsrs	r3, r3, #15
    1028:	d1fc      	bne.n	1024 <_sercom_i2c_sync_send_address+0x1c>
	hri_sercomi2cm_write_ADDR_reg(hw, ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0));
    102a:	882a      	ldrh	r2, [r5, #0]
    102c:	0052      	lsls	r2, r2, #1
    102e:	886b      	ldrh	r3, [r5, #2]
    1030:	2101      	movs	r1, #1
    1032:	400b      	ands	r3, r1
    1034:	4313      	orrs	r3, r2
    1036:	b2db      	uxtb	r3, r3
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    1038:	7523      	strb	r3, [r4, #20]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    103a:	8a23      	ldrh	r3, [r4, #16]
    103c:	0bdb      	lsrs	r3, r3, #15
    103e:	d1fc      	bne.n	103a <_sercom_i2c_sync_send_address+0x32>
	void *   hw      = i2c_dev->hw;
    1040:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
    1042:	4a54      	ldr	r2, [pc, #336]	; (1194 <_sercom_i2c_sync_send_address+0x18c>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    1044:	7bb3      	ldrb	r3, [r6, #14]
    1046:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    1048:	0018      	movs	r0, r3
		if (timeout-- == 0) {
    104a:	1e51      	subs	r1, r2, #1
    104c:	2a00      	cmp	r2, #0
    104e:	d002      	beq.n	1056 <_sercom_i2c_sync_send_address+0x4e>
    1050:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    1052:	079b      	lsls	r3, r3, #30
    1054:	d0f6      	beq.n	1044 <_sercom_i2c_sync_send_address+0x3c>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1056:	8a23      	ldrh	r3, [r4, #16]
    1058:	0bdb      	lsrs	r3, r3, #15
    105a:	d1fc      	bne.n	1056 <_sercom_i2c_sync_send_address+0x4e>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    105c:	8a23      	ldrh	r3, [r4, #16]
    105e:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    1060:	07c2      	lsls	r2, r0, #31
    1062:	d550      	bpl.n	1106 <_sercom_i2c_sync_send_address+0xfe>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1064:	079a      	lsls	r2, r3, #30
    1066:	d510      	bpl.n	108a <_sercom_i2c_sync_send_address+0x82>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1068:	2201      	movs	r2, #1
    106a:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    106c:	886a      	ldrh	r2, [r5, #2]
    106e:	2180      	movs	r1, #128	; 0x80
    1070:	0149      	lsls	r1, r1, #5
    1072:	430a      	orrs	r2, r1
    1074:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1076:	886a      	ldrh	r2, [r5, #2]
    1078:	4947      	ldr	r1, [pc, #284]	; (1198 <_sercom_i2c_sync_send_address+0x190>)
    107a:	400a      	ands	r2, r1
    107c:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    107e:	07db      	lsls	r3, r3, #31
    1080:	d400      	bmi.n	1084 <_sercom_i2c_sync_send_address+0x7c>
    1082:	e07c      	b.n	117e <_sercom_i2c_sync_send_address+0x176>
				return I2C_ERR_BUS;
    1084:	2005      	movs	r0, #5
    1086:	4240      	negs	r0, r0
    1088:	e063      	b.n	1152 <_sercom_i2c_sync_send_address+0x14a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    108a:	075b      	lsls	r3, r3, #29
    108c:	d40b      	bmi.n	10a6 <_sercom_i2c_sync_send_address+0x9e>
			if (msg->len == 0) {
    108e:	6868      	ldr	r0, [r5, #4]
    1090:	2800      	cmp	r0, #0
    1092:	d12d      	bne.n	10f0 <_sercom_i2c_sync_send_address+0xe8>
				if (msg->flags & I2C_M_STOP) {
    1094:	886b      	ldrh	r3, [r5, #2]
    1096:	b21b      	sxth	r3, r3
    1098:	2b00      	cmp	r3, #0
    109a:	db20      	blt.n	10de <_sercom_i2c_sync_send_address+0xd6>
				msg->flags &= ~I2C_M_BUSY;
    109c:	886b      	ldrh	r3, [r5, #2]
    109e:	4a3e      	ldr	r2, [pc, #248]	; (1198 <_sercom_i2c_sync_send_address+0x190>)
    10a0:	4013      	ands	r3, r2
    10a2:	806b      	strh	r3, [r5, #2]
    10a4:	e055      	b.n	1152 <_sercom_i2c_sync_send_address+0x14a>
				if (msg->len > 0) {
    10a6:	686b      	ldr	r3, [r5, #4]
    10a8:	2b00      	cmp	r3, #0
    10aa:	dd04      	ble.n	10b6 <_sercom_i2c_sync_send_address+0xae>
					msg->flags |= I2C_M_FAIL;
    10ac:	886b      	ldrh	r3, [r5, #2]
    10ae:	2280      	movs	r2, #128	; 0x80
    10b0:	0152      	lsls	r2, r2, #5
    10b2:	4313      	orrs	r3, r2
    10b4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    10b6:	886b      	ldrh	r3, [r5, #2]
    10b8:	b21b      	sxth	r3, r3
    10ba:	2b00      	cmp	r3, #0
    10bc:	db06      	blt.n	10cc <_sercom_i2c_sync_send_address+0xc4>
				msg->flags &= ~I2C_M_BUSY;
    10be:	886b      	ldrh	r3, [r5, #2]
    10c0:	4a35      	ldr	r2, [pc, #212]	; (1198 <_sercom_i2c_sync_send_address+0x190>)
    10c2:	4013      	ands	r3, r2
    10c4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    10c6:	2002      	movs	r0, #2
    10c8:	4240      	negs	r0, r0
    10ca:	e042      	b.n	1152 <_sercom_i2c_sync_send_address+0x14a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10cc:	6862      	ldr	r2, [r4, #4]
    10ce:	23c0      	movs	r3, #192	; 0xc0
    10d0:	029b      	lsls	r3, r3, #10
    10d2:	4313      	orrs	r3, r2
    10d4:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10d6:	8a23      	ldrh	r3, [r4, #16]
    10d8:	0bdb      	lsrs	r3, r3, #15
    10da:	d1fc      	bne.n	10d6 <_sercom_i2c_sync_send_address+0xce>
    10dc:	e7ef      	b.n	10be <_sercom_i2c_sync_send_address+0xb6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10de:	6862      	ldr	r2, [r4, #4]
    10e0:	23c0      	movs	r3, #192	; 0xc0
    10e2:	029b      	lsls	r3, r3, #10
    10e4:	4313      	orrs	r3, r2
    10e6:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10e8:	8a23      	ldrh	r3, [r4, #16]
    10ea:	0bdb      	lsrs	r3, r3, #15
    10ec:	d1fc      	bne.n	10e8 <_sercom_i2c_sync_send_address+0xe0>
    10ee:	e7d5      	b.n	109c <_sercom_i2c_sync_send_address+0x94>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    10f0:	68ab      	ldr	r3, [r5, #8]
    10f2:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    10f4:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    10f6:	68ab      	ldr	r3, [r5, #8]
    10f8:	3301      	adds	r3, #1
    10fa:	60ab      	str	r3, [r5, #8]
				msg->len--;
    10fc:	686b      	ldr	r3, [r5, #4]
    10fe:	3b01      	subs	r3, #1
    1100:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1102:	2000      	movs	r0, #0
    1104:	e025      	b.n	1152 <_sercom_i2c_sync_send_address+0x14a>
	} else if (flags & SB_FLAG) {
    1106:	0782      	lsls	r2, r0, #30
    1108:	d53c      	bpl.n	1184 <_sercom_i2c_sync_send_address+0x17c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    110a:	686a      	ldr	r2, [r5, #4]
    110c:	2a00      	cmp	r2, #0
    110e:	d031      	beq.n	1174 <_sercom_i2c_sync_send_address+0x16c>
    1110:	075b      	lsls	r3, r3, #29
    1112:	d42f      	bmi.n	1174 <_sercom_i2c_sync_send_address+0x16c>
			msg->len--;
    1114:	3a01      	subs	r2, #1
    1116:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    1118:	2a00      	cmp	r2, #0
    111a:	d107      	bne.n	112c <_sercom_i2c_sync_send_address+0x124>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    111c:	6862      	ldr	r2, [r4, #4]
    111e:	2380      	movs	r3, #128	; 0x80
    1120:	02db      	lsls	r3, r3, #11
    1122:	4313      	orrs	r3, r2
    1124:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1126:	8a23      	ldrh	r3, [r4, #16]
    1128:	0bdb      	lsrs	r3, r3, #15
    112a:	d1fc      	bne.n	1126 <_sercom_i2c_sync_send_address+0x11e>
			if (msg->len == 0) {
    112c:	686b      	ldr	r3, [r5, #4]
    112e:	2b00      	cmp	r3, #0
    1130:	d107      	bne.n	1142 <_sercom_i2c_sync_send_address+0x13a>
				if (msg->flags & I2C_M_STOP) {
    1132:	886b      	ldrh	r3, [r5, #2]
    1134:	b21b      	sxth	r3, r3
    1136:	2b00      	cmp	r3, #0
    1138:	db0c      	blt.n	1154 <_sercom_i2c_sync_send_address+0x14c>
				msg->flags &= ~I2C_M_BUSY;
    113a:	886b      	ldrh	r3, [r5, #2]
    113c:	4a16      	ldr	r2, [pc, #88]	; (1198 <_sercom_i2c_sync_send_address+0x190>)
    113e:	4013      	ands	r3, r2
    1140:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    1142:	68ab      	ldr	r3, [r5, #8]
    1144:	1c5a      	adds	r2, r3, #1
    1146:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1148:	7e22      	ldrb	r2, [r4, #24]
    114a:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    114c:	2302      	movs	r3, #2
    114e:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    1150:	2000      	movs	r0, #0
}
    1152:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1154:	6863      	ldr	r3, [r4, #4]
    1156:	4a10      	ldr	r2, [pc, #64]	; (1198 <_sercom_i2c_sync_send_address+0x190>)
    1158:	4013      	ands	r3, r2
    115a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    115c:	8a23      	ldrh	r3, [r4, #16]
    115e:	0bdb      	lsrs	r3, r3, #15
    1160:	d1fc      	bne.n	115c <_sercom_i2c_sync_send_address+0x154>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1162:	6862      	ldr	r2, [r4, #4]
    1164:	23c0      	movs	r3, #192	; 0xc0
    1166:	029b      	lsls	r3, r3, #10
    1168:	4313      	orrs	r3, r2
    116a:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    116c:	8a23      	ldrh	r3, [r4, #16]
    116e:	0bdb      	lsrs	r3, r3, #15
    1170:	d1fc      	bne.n	116c <_sercom_i2c_sync_send_address+0x164>
    1172:	e7e2      	b.n	113a <_sercom_i2c_sync_send_address+0x132>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1174:	2302      	movs	r3, #2
    1176:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    1178:	2002      	movs	r0, #2
    117a:	4240      	negs	r0, r0
    117c:	e7e9      	b.n	1152 <_sercom_i2c_sync_send_address+0x14a>
			return I2C_ERR_BAD_ADDRESS;
    117e:	2004      	movs	r0, #4
    1180:	4240      	negs	r0, r0
    1182:	e7e6      	b.n	1152 <_sercom_i2c_sync_send_address+0x14a>
	return I2C_OK;
    1184:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
    1186:	e7e4      	b.n	1152 <_sercom_i2c_sync_send_address+0x14a>
    1188:	00000581 	.word	0x00000581
    118c:	0000f600 	.word	0x0000f600
    1190:	fffbffff 	.word	0xfffbffff
    1194:	0000ffff 	.word	0x0000ffff
    1198:	fffffeff 	.word	0xfffffeff

0000119c <_usart_set_baud_rate>:
{
    119c:	b570      	push	{r4, r5, r6, lr}
    119e:	b082      	sub	sp, #8
    11a0:	0004      	movs	r4, r0
    11a2:	000d      	movs	r5, r1
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    11a4:	8a23      	ldrh	r3, [r4, #16]
    11a6:	0bdb      	lsrs	r3, r3, #15
    11a8:	d1fc      	bne.n	11a4 <_usart_set_baud_rate+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    11aa:	6826      	ldr	r6, [r4, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
    11ac:	0876      	lsrs	r6, r6, #1
	return (bool)tmp;
    11ae:	3301      	adds	r3, #1
    11b0:	401e      	ands	r6, r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    11b2:	6823      	ldr	r3, [r4, #0]
    11b4:	2202      	movs	r2, #2
    11b6:	4393      	bics	r3, r2
    11b8:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    11ba:	8a23      	ldrh	r3, [r4, #16]
    11bc:	0bdb      	lsrs	r3, r3, #15
    11be:	d1fc      	bne.n	11ba <_usart_set_baud_rate+0x1e>
	CRITICAL_SECTION_ENTER()
    11c0:	a801      	add	r0, sp, #4
    11c2:	f7fe ffd7 	bl	174 <atomic_enter_critical>
    11c6:	8a23      	ldrh	r3, [r4, #16]
    11c8:	0bdb      	lsrs	r3, r3, #15
    11ca:	d1fc      	bne.n	11c6 <_usart_set_baud_rate+0x2a>
	hri_sercomusart_write_BAUD_reg(hw, baud_rate);
    11cc:	b2ad      	uxth	r5, r5
	((Sercom *)hw)->USART.BAUD.reg = data;
    11ce:	8165      	strh	r5, [r4, #10]
	CRITICAL_SECTION_LEAVE()
    11d0:	a801      	add	r0, sp, #4
    11d2:	f7fe ffd6 	bl	182 <atomic_leave_critical>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    11d6:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    11d8:	2202      	movs	r2, #2
    11da:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    11dc:	0076      	lsls	r6, r6, #1
    11de:	4333      	orrs	r3, r6
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    11e0:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    11e2:	8a23      	ldrh	r3, [r4, #16]
    11e4:	0bdb      	lsrs	r3, r3, #15
    11e6:	d1fc      	bne.n	11e2 <_usart_set_baud_rate+0x46>
}
    11e8:	b002      	add	sp, #8
    11ea:	bd70      	pop	{r4, r5, r6, pc}

000011ec <_usart_set_parity>:
{
    11ec:	b570      	push	{r4, r5, r6, lr}
    11ee:	b082      	sub	sp, #8
    11f0:	0004      	movs	r4, r0
    11f2:	000e      	movs	r6, r1
    11f4:	8a23      	ldrh	r3, [r4, #16]
    11f6:	0bdb      	lsrs	r3, r3, #15
    11f8:	d1fc      	bne.n	11f4 <_usart_set_parity+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    11fa:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
    11fc:	086d      	lsrs	r5, r5, #1
	return (bool)tmp;
    11fe:	3301      	adds	r3, #1
    1200:	401d      	ands	r5, r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1202:	6823      	ldr	r3, [r4, #0]
    1204:	2202      	movs	r2, #2
    1206:	4393      	bics	r3, r2
    1208:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    120a:	8a23      	ldrh	r3, [r4, #16]
    120c:	0bdb      	lsrs	r3, r3, #15
    120e:	d1fc      	bne.n	120a <_usart_set_parity+0x1e>
	CRITICAL_SECTION_ENTER()
    1210:	a801      	add	r0, sp, #4
    1212:	f7fe ffaf 	bl	174 <atomic_enter_critical>
    1216:	8a23      	ldrh	r3, [r4, #16]
    1218:	0bdb      	lsrs	r3, r3, #15
    121a:	d1fc      	bne.n	1216 <_usart_set_parity+0x2a>
	if (USART_PARITY_NONE != parity) {
    121c:	2e02      	cmp	r6, #2
    121e:	d021      	beq.n	1264 <_usart_set_parity+0x78>
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_FORM(mask);
    1220:	6822      	ldr	r2, [r4, #0]
    1222:	2380      	movs	r3, #128	; 0x80
    1224:	045b      	lsls	r3, r3, #17
    1226:	4313      	orrs	r3, r2
    1228:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    122a:	8a23      	ldrh	r3, [r4, #16]
    122c:	0bdb      	lsrs	r3, r3, #15
    122e:	d1fc      	bne.n	122a <_usart_set_parity+0x3e>
	hri_sercomusart_write_CTRLB_PMODE_bit(hw, parity);
    1230:	1e73      	subs	r3, r6, #1
    1232:	419e      	sbcs	r6, r3
    1234:	b2f6      	uxtb	r6, r6
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    1236:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_PMODE;
    1238:	4a0e      	ldr	r2, [pc, #56]	; (1274 <_usart_set_parity+0x88>)
    123a:	4013      	ands	r3, r2
	tmp |= value << SERCOM_USART_CTRLB_PMODE_Pos;
    123c:	0376      	lsls	r6, r6, #13
    123e:	431e      	orrs	r6, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    1240:	6066      	str	r6, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    1242:	8a23      	ldrh	r3, [r4, #16]
    1244:	0bdb      	lsrs	r3, r3, #15
    1246:	d1fc      	bne.n	1242 <_usart_set_parity+0x56>
	CRITICAL_SECTION_LEAVE()
    1248:	a801      	add	r0, sp, #4
    124a:	f7fe ff9a 	bl	182 <atomic_leave_critical>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    124e:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    1250:	2202      	movs	r2, #2
    1252:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    1254:	006d      	lsls	r5, r5, #1
    1256:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    1258:	6025      	str	r5, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    125a:	8a23      	ldrh	r3, [r4, #16]
    125c:	0bdb      	lsrs	r3, r3, #15
    125e:	d1fc      	bne.n	125a <_usart_set_parity+0x6e>
}
    1260:	b002      	add	sp, #8
    1262:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_FORM(mask);
    1264:	6823      	ldr	r3, [r4, #0]
    1266:	4a04      	ldr	r2, [pc, #16]	; (1278 <_usart_set_parity+0x8c>)
    1268:	4013      	ands	r3, r2
    126a:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    126c:	8a23      	ldrh	r3, [r4, #16]
    126e:	0bdb      	lsrs	r3, r3, #15
    1270:	d1fc      	bne.n	126c <_usart_set_parity+0x80>
    1272:	e7dd      	b.n	1230 <_usart_set_parity+0x44>
    1274:	ffffdfff 	.word	0xffffdfff
    1278:	feffffff 	.word	0xfeffffff

0000127c <_usart_set_stop_bits>:
{
    127c:	b570      	push	{r4, r5, r6, lr}
    127e:	b082      	sub	sp, #8
    1280:	0004      	movs	r4, r0
    1282:	000e      	movs	r6, r1
    1284:	8a23      	ldrh	r3, [r4, #16]
    1286:	0bdb      	lsrs	r3, r3, #15
    1288:	d1fc      	bne.n	1284 <_usart_set_stop_bits+0x8>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    128a:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_USART_CTRLA_ENABLE) >> SERCOM_USART_CTRLA_ENABLE_Pos;
    128c:	086d      	lsrs	r5, r5, #1
	return (bool)tmp;
    128e:	3301      	adds	r3, #1
    1290:	401d      	ands	r5, r3
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    1292:	6823      	ldr	r3, [r4, #0]
    1294:	2202      	movs	r2, #2
    1296:	4393      	bics	r3, r2
    1298:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    129a:	8a23      	ldrh	r3, [r4, #16]
    129c:	0bdb      	lsrs	r3, r3, #15
    129e:	d1fc      	bne.n	129a <_usart_set_stop_bits+0x1e>
	CRITICAL_SECTION_ENTER()
    12a0:	a801      	add	r0, sp, #4
    12a2:	f7fe ff67 	bl	174 <atomic_enter_critical>
    12a6:	8a23      	ldrh	r3, [r4, #16]
    12a8:	0bdb      	lsrs	r3, r3, #15
    12aa:	d1fc      	bne.n	12a6 <_usart_set_stop_bits+0x2a>
	hri_sercomusart_write_CTRLB_SBMODE_bit(hw, stop_bits);
    12ac:	1e73      	subs	r3, r6, #1
    12ae:	419e      	sbcs	r6, r3
    12b0:	b2f6      	uxtb	r6, r6
	tmp = ((Sercom *)hw)->USART.CTRLB.reg;
    12b2:	6863      	ldr	r3, [r4, #4]
	tmp &= ~SERCOM_USART_CTRLB_SBMODE;
    12b4:	2240      	movs	r2, #64	; 0x40
    12b6:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLB_SBMODE_Pos;
    12b8:	01b6      	lsls	r6, r6, #6
    12ba:	431e      	orrs	r6, r3
	((Sercom *)hw)->USART.CTRLB.reg = tmp;
    12bc:	6066      	str	r6, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    12be:	8a23      	ldrh	r3, [r4, #16]
    12c0:	0bdb      	lsrs	r3, r3, #15
    12c2:	d1fc      	bne.n	12be <_usart_set_stop_bits+0x42>
	CRITICAL_SECTION_LEAVE()
    12c4:	a801      	add	r0, sp, #4
    12c6:	f7fe ff5c 	bl	182 <atomic_leave_critical>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
    12ca:	6823      	ldr	r3, [r4, #0]
	tmp &= ~SERCOM_USART_CTRLA_ENABLE;
    12cc:	2202      	movs	r2, #2
    12ce:	4393      	bics	r3, r2
	tmp |= value << SERCOM_USART_CTRLA_ENABLE_Pos;
    12d0:	006d      	lsls	r5, r5, #1
    12d2:	431d      	orrs	r5, r3
	((Sercom *)hw)->USART.CTRLA.reg = tmp;
    12d4:	6025      	str	r5, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    12d6:	8a23      	ldrh	r3, [r4, #16]
    12d8:	0bdb      	lsrs	r3, r3, #15
    12da:	d1fc      	bne.n	12d6 <_usart_set_stop_bits+0x5a>
}
    12dc:	b002      	add	sp, #8
    12de:	bd70      	pop	{r4, r5, r6, pc}

000012e0 <_usart_async_init>:
{
    12e0:	b570      	push	{r4, r5, r6, lr}
    12e2:	0006      	movs	r6, r0
    12e4:	000c      	movs	r4, r1
	ASSERT(device);
    12e6:	1e43      	subs	r3, r0, #1
    12e8:	4198      	sbcs	r0, r3
    12ea:	b2c0      	uxtb	r0, r0
    12ec:	22af      	movs	r2, #175	; 0xaf
    12ee:	4917      	ldr	r1, [pc, #92]	; (134c <_usart_async_init+0x6c>)
    12f0:	f7ff fb98 	bl	a24 <assert>
	init_status = _usart_init(hw);
    12f4:	0020      	movs	r0, r4
    12f6:	f7ff fe31 	bl	f5c <_usart_init>
    12fa:	1e05      	subs	r5, r0, #0
	if (init_status) {
    12fc:	d123      	bne.n	1346 <_usart_async_init+0x66>
	device->hw = hw;
    12fe:	61b4      	str	r4, [r6, #24]
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
    1300:	0020      	movs	r0, r4
    1302:	f7ff fdf9 	bl	ef8 <_sercom_get_irq_num>
    1306:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1308:	2b00      	cmp	r3, #0
    130a:	db0a      	blt.n	1322 <_usart_async_init+0x42>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    130c:	211f      	movs	r1, #31
    130e:	4001      	ands	r1, r0
    1310:	2201      	movs	r2, #1
    1312:	408a      	lsls	r2, r1
    1314:	2180      	movs	r1, #128	; 0x80
    1316:	4c0e      	ldr	r4, [pc, #56]	; (1350 <_usart_async_init+0x70>)
    1318:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    131a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    131e:	f3bf 8f6f 	isb	sy
  if ((int32_t)(IRQn) >= 0)
    1322:	2b00      	cmp	r3, #0
    1324:	db07      	blt.n	1336 <_usart_async_init+0x56>
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1326:	211f      	movs	r1, #31
    1328:	4001      	ands	r1, r0
    132a:	2201      	movs	r2, #1
    132c:	408a      	lsls	r2, r1
    132e:	21c0      	movs	r1, #192	; 0xc0
    1330:	0049      	lsls	r1, r1, #1
    1332:	4c07      	ldr	r4, [pc, #28]	; (1350 <_usart_async_init+0x70>)
    1334:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1336:	2b00      	cmp	r3, #0
    1338:	db05      	blt.n	1346 <_usart_async_init+0x66>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    133a:	231f      	movs	r3, #31
    133c:	4018      	ands	r0, r3
    133e:	3b1e      	subs	r3, #30
    1340:	4083      	lsls	r3, r0
    1342:	4a03      	ldr	r2, [pc, #12]	; (1350 <_usart_async_init+0x70>)
    1344:	6013      	str	r3, [r2, #0]
}
    1346:	0028      	movs	r0, r5
    1348:	bd70      	pop	{r4, r5, r6, pc}
    134a:	46c0      	nop			; (mov r8, r8)
    134c:	0000f600 	.word	0x0000f600
    1350:	e000e100 	.word	0xe000e100

00001354 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1354:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1356:	6813      	ldr	r3, [r2, #0]
    1358:	2102      	movs	r1, #2
    135a:	430b      	orrs	r3, r1
    135c:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
    135e:	8a13      	ldrh	r3, [r2, #16]
    1360:	0bdb      	lsrs	r3, r3, #15
    1362:	d1fc      	bne.n	135e <_usart_async_enable+0xa>
}
    1364:	4770      	bx	lr

00001366 <_usart_async_set_baud_rate>:
{
    1366:	b510      	push	{r4, lr}
	_usart_set_baud_rate(device->hw, baud_rate);
    1368:	6980      	ldr	r0, [r0, #24]
    136a:	f7ff ff17 	bl	119c <_usart_set_baud_rate>
}
    136e:	bd10      	pop	{r4, pc}

00001370 <_usart_async_set_parity>:
{
    1370:	b510      	push	{r4, lr}
	_usart_set_parity(device->hw, parity);
    1372:	6980      	ldr	r0, [r0, #24]
    1374:	f7ff ff3a 	bl	11ec <_usart_set_parity>
}
    1378:	bd10      	pop	{r4, pc}

0000137a <_usart_async_set_stop_bits>:
{
    137a:	b510      	push	{r4, lr}
	_usart_set_stop_bits(device->hw, stop_bits);
    137c:	6980      	ldr	r0, [r0, #24]
    137e:	f7ff ff7d 	bl	127c <_usart_set_stop_bits>
}
    1382:	bd10      	pop	{r4, pc}

00001384 <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1384:	6983      	ldr	r3, [r0, #24]
    1386:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    1388:	8319      	strh	r1, [r3, #24]
}
    138a:	4770      	bx	lr

0000138c <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
    138c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    138e:	2201      	movs	r2, #1
    1390:	735a      	strb	r2, [r3, #13]
}
    1392:	4770      	bx	lr

00001394 <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
    1394:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    1396:	2202      	movs	r2, #2
    1398:	735a      	strb	r2, [r3, #13]
}
    139a:	4770      	bx	lr

0000139c <_usart_async_set_irq_state>:
{
    139c:	b570      	push	{r4, r5, r6, lr}
    139e:	0004      	movs	r4, r0
    13a0:	000d      	movs	r5, r1
    13a2:	0016      	movs	r6, r2
	ASSERT(device);
    13a4:	1e43      	subs	r3, r0, #1
    13a6:	4198      	sbcs	r0, r3
    13a8:	b2c0      	uxtb	r0, r0
    13aa:	4a12      	ldr	r2, [pc, #72]	; (13f4 <_usart_async_set_irq_state+0x58>)
    13ac:	4912      	ldr	r1, [pc, #72]	; (13f8 <_usart_async_set_irq_state+0x5c>)
    13ae:	f7ff fb39 	bl	a24 <assert>
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
    13b2:	2d00      	cmp	r5, #0
    13b4:	d009      	beq.n	13ca <_usart_async_set_irq_state+0x2e>
    13b6:	2d02      	cmp	r5, #2
    13b8:	d007      	beq.n	13ca <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
    13ba:	2d01      	cmp	r5, #1
    13bc:	d10f      	bne.n	13de <_usart_async_set_irq_state+0x42>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
    13be:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    13c0:	2e00      	cmp	r6, #0
    13c2:	d013      	beq.n	13ec <_usart_async_set_irq_state+0x50>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
    13c4:	2204      	movs	r2, #4
    13c6:	735a      	strb	r2, [r3, #13]
}
    13c8:	e009      	b.n	13de <_usart_async_set_irq_state+0x42>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
    13ca:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    13cc:	2e00      	cmp	r6, #0
    13ce:	d107      	bne.n	13e0 <_usart_async_set_irq_state+0x44>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
    13d0:	2201      	movs	r2, #1
    13d2:	731a      	strb	r2, [r3, #12]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
    13d4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
    13d6:	2e00      	cmp	r6, #0
    13d8:	d105      	bne.n	13e6 <_usart_async_set_irq_state+0x4a>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
    13da:	2202      	movs	r2, #2
    13dc:	731a      	strb	r2, [r3, #12]
}
    13de:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    13e0:	2201      	movs	r2, #1
    13e2:	735a      	strb	r2, [r3, #13]
    13e4:	e7f6      	b.n	13d4 <_usart_async_set_irq_state+0x38>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
    13e6:	2202      	movs	r2, #2
    13e8:	735a      	strb	r2, [r3, #13]
    13ea:	e7f8      	b.n	13de <_usart_async_set_irq_state+0x42>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
    13ec:	2204      	movs	r2, #4
    13ee:	731a      	strb	r2, [r3, #12]
    13f0:	e7f5      	b.n	13de <_usart_async_set_irq_state+0x42>
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	0000020e 	.word	0x0000020e
    13f8:	0000f600 	.word	0x0000f600

000013fc <_i2c_m_sync_init>:
{
    13fc:	b570      	push	{r4, r5, r6, lr}
    13fe:	0006      	movs	r6, r0
    1400:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
    1402:	0008      	movs	r0, r1
    1404:	f7ff fde2 	bl	fcc <_get_i2cm_index>
    1408:	0005      	movs	r5, r0
	ASSERT(i2c_dev);
    140a:	0030      	movs	r0, r6
    140c:	1e43      	subs	r3, r0, #1
    140e:	4198      	sbcs	r0, r3
    1410:	b2c0      	uxtb	r0, r0
    1412:	4a20      	ldr	r2, [pc, #128]	; (1494 <_i2c_m_sync_init+0x98>)
    1414:	4920      	ldr	r1, [pc, #128]	; (1498 <_i2c_m_sync_init+0x9c>)
    1416:	f7ff fb05 	bl	a24 <assert>
	i2c_dev->hw = hw;
    141a:	6134      	str	r4, [r6, #16]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    141c:	8a23      	ldrh	r3, [r4, #16]
    141e:	0bdb      	lsrs	r3, r3, #15
    1420:	d1fc      	bne.n	141c <_i2c_m_sync_init+0x20>
    1422:	8a23      	ldrh	r3, [r4, #16]
    1424:	0bdb      	lsrs	r3, r3, #15
    1426:	d1fc      	bne.n	1422 <_i2c_m_sync_init+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    1428:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
    142a:	079b      	lsls	r3, r3, #30
    142c:	d507      	bpl.n	143e <_i2c_m_sync_init+0x42>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    142e:	2300      	movs	r3, #0
    1430:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1432:	8a23      	ldrh	r3, [r4, #16]
    1434:	0bdb      	lsrs	r3, r3, #15
    1436:	d1fc      	bne.n	1432 <_i2c_m_sync_init+0x36>
    1438:	8a23      	ldrh	r3, [r4, #16]
    143a:	0bdb      	lsrs	r3, r3, #15
    143c:	d1fc      	bne.n	1438 <_i2c_m_sync_init+0x3c>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    143e:	2301      	movs	r3, #1
    1440:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1442:	8a23      	ldrh	r3, [r4, #16]
    1444:	0bdb      	lsrs	r3, r3, #15
    1446:	d1fc      	bne.n	1442 <_i2c_m_sync_init+0x46>
    1448:	8a23      	ldrh	r3, [r4, #16]
    144a:	0bdb      	lsrs	r3, r3, #15
    144c:	d1fc      	bne.n	1448 <_i2c_m_sync_init+0x4c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a & ~SERCOM_I2CM_CTRLA_ENABLE);
    144e:	006b      	lsls	r3, r5, #1
    1450:	195b      	adds	r3, r3, r5
    1452:	00da      	lsls	r2, r3, #3
    1454:	4b11      	ldr	r3, [pc, #68]	; (149c <_i2c_m_sync_init+0xa0>)
    1456:	189b      	adds	r3, r3, r2
    1458:	685b      	ldr	r3, [r3, #4]
    145a:	2202      	movs	r2, #2
    145c:	4393      	bics	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
    145e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1460:	8a23      	ldrh	r3, [r4, #16]
    1462:	0bdb      	lsrs	r3, r3, #15
    1464:	d1fc      	bne.n	1460 <_i2c_m_sync_init+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
    1466:	006b      	lsls	r3, r5, #1
    1468:	195b      	adds	r3, r3, r5
    146a:	00da      	lsls	r2, r3, #3
    146c:	4b0b      	ldr	r3, [pc, #44]	; (149c <_i2c_m_sync_init+0xa0>)
    146e:	189b      	adds	r3, r3, r2
    1470:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
    1472:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1474:	8a23      	ldrh	r3, [r4, #16]
    1476:	0bdb      	lsrs	r3, r3, #15
    1478:	d1fc      	bne.n	1474 <_i2c_m_sync_init+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
    147a:	4a08      	ldr	r2, [pc, #32]	; (149c <_i2c_m_sync_init+0xa0>)
    147c:	006b      	lsls	r3, r5, #1
    147e:	1958      	adds	r0, r3, r5
    1480:	00c1      	lsls	r1, r0, #3
    1482:	0008      	movs	r0, r1
    1484:	1851      	adds	r1, r2, r1
    1486:	8989      	ldrh	r1, [r1, #12]
	((Sercom *)hw)->I2CM.BAUD.reg = data;
    1488:	8161      	strh	r1, [r4, #10]
	i2c_dev->service.trise = _i2cms[i].trise;
    148a:	1812      	adds	r2, r2, r0
    148c:	8a13      	ldrh	r3, [r2, #16]
    148e:	81f3      	strh	r3, [r6, #14]
}
    1490:	2000      	movs	r0, #0
    1492:	bd70      	pop	{r4, r5, r6, pc}
    1494:	000004d7 	.word	0x000004d7
    1498:	0000f600 	.word	0x0000f600
    149c:	0000f61c 	.word	0x0000f61c

000014a0 <_i2c_m_sync_enable>:
{
    14a0:	b570      	push	{r4, r5, r6, lr}
    14a2:	0006      	movs	r6, r0
	void *hw              = i2c_dev->hw;
    14a4:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    14a6:	4d18      	ldr	r5, [pc, #96]	; (1508 <_i2c_m_sync_enable+0x68>)
    14a8:	1e43      	subs	r3, r0, #1
    14aa:	4198      	sbcs	r0, r3
    14ac:	b2c0      	uxtb	r0, r0
    14ae:	22a1      	movs	r2, #161	; 0xa1
    14b0:	00d2      	lsls	r2, r2, #3
    14b2:	0029      	movs	r1, r5
    14b4:	f7ff fab6 	bl	a24 <assert>
	ASSERT(i2c_dev->hw);
    14b8:	6930      	ldr	r0, [r6, #16]
    14ba:	1e43      	subs	r3, r0, #1
    14bc:	4198      	sbcs	r0, r3
    14be:	b2c0      	uxtb	r0, r0
    14c0:	4a12      	ldr	r2, [pc, #72]	; (150c <_i2c_m_sync_enable+0x6c>)
    14c2:	0029      	movs	r1, r5
    14c4:	f7ff faae 	bl	a24 <assert>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    14c8:	6823      	ldr	r3, [r4, #0]
    14ca:	2202      	movs	r2, #2
    14cc:	4313      	orrs	r3, r2
    14ce:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    14d0:	8a23      	ldrh	r3, [r4, #16]
    14d2:	0bdb      	lsrs	r3, r3, #15
    14d4:	d1fc      	bne.n	14d0 <_i2c_m_sync_enable+0x30>
    14d6:	2004      	movs	r0, #4
    14d8:	490d      	ldr	r1, [pc, #52]	; (1510 <_i2c_m_sync_enable+0x70>)
    14da:	8a23      	ldrh	r3, [r4, #16]
    14dc:	0bdb      	lsrs	r3, r3, #15
    14de:	d1fc      	bne.n	14da <_i2c_m_sync_enable+0x3a>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    14e0:	8a22      	ldrh	r2, [r4, #16]
    14e2:	0912      	lsrs	r2, r2, #4
    14e4:	3303      	adds	r3, #3
    14e6:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    14e8:	2b01      	cmp	r3, #1
    14ea:	d008      	beq.n	14fe <_i2c_m_sync_enable+0x5e>
		timeout--;
    14ec:	3901      	subs	r1, #1
		if (timeout <= 0) {
    14ee:	2900      	cmp	r1, #0
    14f0:	dcf3      	bgt.n	14da <_i2c_m_sync_enable+0x3a>
			if (--timeout_attempt)
    14f2:	3801      	subs	r0, #1
    14f4:	2800      	cmp	r0, #0
    14f6:	d004      	beq.n	1502 <_i2c_m_sync_enable+0x62>
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    14f8:	2310      	movs	r3, #16
    14fa:	8223      	strh	r3, [r4, #16]
    14fc:	e7ec      	b.n	14d8 <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    14fe:	2000      	movs	r0, #0
}
    1500:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    1502:	2006      	movs	r0, #6
    1504:	4240      	negs	r0, r0
    1506:	e7fb      	b.n	1500 <_i2c_m_sync_enable+0x60>
    1508:	0000f600 	.word	0x0000f600
    150c:	00000509 	.word	0x00000509
    1510:	0000ffff 	.word	0x0000ffff

00001514 <_i2c_m_sync_transfer>:
{
    1514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1516:	0005      	movs	r5, r0
    1518:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    151a:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    151c:	4f7d      	ldr	r7, [pc, #500]	; (1714 <_i2c_m_sync_transfer+0x200>)
    151e:	1e43      	subs	r3, r0, #1
    1520:	4198      	sbcs	r0, r3
    1522:	b2c0      	uxtb	r0, r0
    1524:	4a7c      	ldr	r2, [pc, #496]	; (1718 <_i2c_m_sync_transfer+0x204>)
    1526:	0039      	movs	r1, r7
    1528:	f7ff fa7c 	bl	a24 <assert>
	ASSERT(i2c_dev->hw);
    152c:	6928      	ldr	r0, [r5, #16]
    152e:	1e43      	subs	r3, r0, #1
    1530:	4198      	sbcs	r0, r3
    1532:	b2c0      	uxtb	r0, r0
    1534:	4a79      	ldr	r2, [pc, #484]	; (171c <_i2c_m_sync_transfer+0x208>)
    1536:	0039      	movs	r1, r7
    1538:	f7ff fa74 	bl	a24 <assert>
	ASSERT(msg);
    153c:	0030      	movs	r0, r6
    153e:	1e43      	subs	r3, r0, #1
    1540:	4198      	sbcs	r0, r3
    1542:	b2c0      	uxtb	r0, r0
    1544:	4a76      	ldr	r2, [pc, #472]	; (1720 <_i2c_m_sync_transfer+0x20c>)
    1546:	0039      	movs	r1, r7
    1548:	f7ff fa6c 	bl	a24 <assert>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    154c:	886b      	ldrh	r3, [r5, #2]
    154e:	05db      	lsls	r3, r3, #23
    1550:	d500      	bpl.n	1554 <_i2c_m_sync_transfer+0x40>
    1552:	e0dc      	b.n	170e <_i2c_m_sync_transfer+0x1fa>
	msg->flags |= I2C_M_BUSY;
    1554:	8872      	ldrh	r2, [r6, #2]
    1556:	2380      	movs	r3, #128	; 0x80
    1558:	005b      	lsls	r3, r3, #1
    155a:	469c      	mov	ip, r3
    155c:	431a      	orrs	r2, r3
    155e:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    1560:	002a      	movs	r2, r5
    1562:	0031      	movs	r1, r6
    1564:	c989      	ldmia	r1!, {r0, r3, r7}
    1566:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1568:	6862      	ldr	r2, [r4, #4]
    156a:	4663      	mov	r3, ip
    156c:	4313      	orrs	r3, r2
    156e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1570:	8a23      	ldrh	r3, [r4, #16]
    1572:	0bdb      	lsrs	r3, r3, #15
    1574:	d1fc      	bne.n	1570 <_i2c_m_sync_transfer+0x5c>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1576:	0028      	movs	r0, r5
    1578:	f7ff fd46 	bl	1008 <_sercom_i2c_sync_send_address>
	if (ret) {
    157c:	2800      	cmp	r0, #0
    157e:	d100      	bne.n	1582 <_i2c_m_sync_transfer+0x6e>
    1580:	e07d      	b.n	167e <_i2c_m_sync_transfer+0x16a>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1582:	886b      	ldrh	r3, [r5, #2]
    1584:	4a67      	ldr	r2, [pc, #412]	; (1724 <_i2c_m_sync_transfer+0x210>)
    1586:	4013      	ands	r3, r2
    1588:	806b      	strh	r3, [r5, #2]
}
    158a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    158c:	2005      	movs	r0, #5
    158e:	4240      	negs	r0, r0
    1590:	e086      	b.n	16a0 <_i2c_m_sync_transfer+0x18c>
			if (msg->flags & I2C_M_STOP) {
    1592:	8873      	ldrh	r3, [r6, #2]
    1594:	b21b      	sxth	r3, r3
    1596:	2b00      	cmp	r3, #0
    1598:	db04      	blt.n	15a4 <_i2c_m_sync_transfer+0x90>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    159a:	886b      	ldrh	r3, [r5, #2]
    159c:	4a61      	ldr	r2, [pc, #388]	; (1724 <_i2c_m_sync_transfer+0x210>)
    159e:	4013      	ands	r3, r2
    15a0:	806b      	strh	r3, [r5, #2]
			return ret;
    15a2:	e7f2      	b.n	158a <_i2c_m_sync_transfer+0x76>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15a4:	6862      	ldr	r2, [r4, #4]
    15a6:	23c0      	movs	r3, #192	; 0xc0
    15a8:	029b      	lsls	r3, r3, #10
    15aa:	4313      	orrs	r3, r2
    15ac:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    15ae:	8a23      	ldrh	r3, [r4, #16]
    15b0:	0bdb      	lsrs	r3, r3, #15
    15b2:	d1fc      	bne.n	15ae <_i2c_m_sync_transfer+0x9a>
    15b4:	e7f1      	b.n	159a <_i2c_m_sync_transfer+0x86>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    15b6:	075b      	lsls	r3, r3, #29
    15b8:	d40b      	bmi.n	15d2 <_i2c_m_sync_transfer+0xbe>
			if (msg->len == 0) {
    15ba:	6868      	ldr	r0, [r5, #4]
    15bc:	2800      	cmp	r0, #0
    15be:	d12d      	bne.n	161c <_i2c_m_sync_transfer+0x108>
				if (msg->flags & I2C_M_STOP) {
    15c0:	886b      	ldrh	r3, [r5, #2]
    15c2:	b21b      	sxth	r3, r3
    15c4:	2b00      	cmp	r3, #0
    15c6:	db20      	blt.n	160a <_i2c_m_sync_transfer+0xf6>
				msg->flags &= ~I2C_M_BUSY;
    15c8:	886b      	ldrh	r3, [r5, #2]
    15ca:	4a56      	ldr	r2, [pc, #344]	; (1724 <_i2c_m_sync_transfer+0x210>)
    15cc:	4013      	ands	r3, r2
    15ce:	806b      	strh	r3, [r5, #2]
    15d0:	e055      	b.n	167e <_i2c_m_sync_transfer+0x16a>
				if (msg->len > 0) {
    15d2:	686b      	ldr	r3, [r5, #4]
    15d4:	2b00      	cmp	r3, #0
    15d6:	dd04      	ble.n	15e2 <_i2c_m_sync_transfer+0xce>
					msg->flags |= I2C_M_FAIL;
    15d8:	886b      	ldrh	r3, [r5, #2]
    15da:	2280      	movs	r2, #128	; 0x80
    15dc:	0152      	lsls	r2, r2, #5
    15de:	4313      	orrs	r3, r2
    15e0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    15e2:	886b      	ldrh	r3, [r5, #2]
    15e4:	b21b      	sxth	r3, r3
    15e6:	2b00      	cmp	r3, #0
    15e8:	db06      	blt.n	15f8 <_i2c_m_sync_transfer+0xe4>
				msg->flags &= ~I2C_M_BUSY;
    15ea:	886b      	ldrh	r3, [r5, #2]
    15ec:	4a4d      	ldr	r2, [pc, #308]	; (1724 <_i2c_m_sync_transfer+0x210>)
    15ee:	4013      	ands	r3, r2
    15f0:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    15f2:	2002      	movs	r0, #2
    15f4:	4240      	negs	r0, r0
    15f6:	e042      	b.n	167e <_i2c_m_sync_transfer+0x16a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    15f8:	6862      	ldr	r2, [r4, #4]
    15fa:	23c0      	movs	r3, #192	; 0xc0
    15fc:	029b      	lsls	r3, r3, #10
    15fe:	4313      	orrs	r3, r2
    1600:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1602:	8a23      	ldrh	r3, [r4, #16]
    1604:	0bdb      	lsrs	r3, r3, #15
    1606:	d1fc      	bne.n	1602 <_i2c_m_sync_transfer+0xee>
    1608:	e7ef      	b.n	15ea <_i2c_m_sync_transfer+0xd6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    160a:	6862      	ldr	r2, [r4, #4]
    160c:	23c0      	movs	r3, #192	; 0xc0
    160e:	029b      	lsls	r3, r3, #10
    1610:	4313      	orrs	r3, r2
    1612:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1614:	8a23      	ldrh	r3, [r4, #16]
    1616:	0bdb      	lsrs	r3, r3, #15
    1618:	d1fc      	bne.n	1614 <_i2c_m_sync_transfer+0x100>
    161a:	e7d5      	b.n	15c8 <_i2c_m_sync_transfer+0xb4>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    161c:	68ab      	ldr	r3, [r5, #8]
    161e:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1620:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    1622:	68ab      	ldr	r3, [r5, #8]
    1624:	3301      	adds	r3, #1
    1626:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1628:	686b      	ldr	r3, [r5, #4]
    162a:	3b01      	subs	r3, #1
    162c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    162e:	2000      	movs	r0, #0
    1630:	e025      	b.n	167e <_i2c_m_sync_transfer+0x16a>
	} else if (flags & SB_FLAG) {
    1632:	078a      	lsls	r2, r1, #30
    1634:	d569      	bpl.n	170a <_i2c_m_sync_transfer+0x1f6>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1636:	686a      	ldr	r2, [r5, #4]
    1638:	2a00      	cmp	r2, #0
    163a:	d05e      	beq.n	16fa <_i2c_m_sync_transfer+0x1e6>
    163c:	075b      	lsls	r3, r3, #29
    163e:	d45c      	bmi.n	16fa <_i2c_m_sync_transfer+0x1e6>
			msg->len--;
    1640:	3a01      	subs	r2, #1
    1642:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    1644:	2a00      	cmp	r2, #0
    1646:	d107      	bne.n	1658 <_i2c_m_sync_transfer+0x144>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1648:	6862      	ldr	r2, [r4, #4]
    164a:	2380      	movs	r3, #128	; 0x80
    164c:	02db      	lsls	r3, r3, #11
    164e:	4313      	orrs	r3, r2
    1650:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1652:	8a23      	ldrh	r3, [r4, #16]
    1654:	0bdb      	lsrs	r3, r3, #15
    1656:	d1fc      	bne.n	1652 <_i2c_m_sync_transfer+0x13e>
			if (msg->len == 0) {
    1658:	686b      	ldr	r3, [r5, #4]
    165a:	2b00      	cmp	r3, #0
    165c:	d107      	bne.n	166e <_i2c_m_sync_transfer+0x15a>
				if (msg->flags & I2C_M_STOP) {
    165e:	886b      	ldrh	r3, [r5, #2]
    1660:	b21b      	sxth	r3, r3
    1662:	2b00      	cmp	r3, #0
    1664:	db39      	blt.n	16da <_i2c_m_sync_transfer+0x1c6>
				msg->flags &= ~I2C_M_BUSY;
    1666:	886b      	ldrh	r3, [r5, #2]
    1668:	4a2e      	ldr	r2, [pc, #184]	; (1724 <_i2c_m_sync_transfer+0x210>)
    166a:	4013      	ands	r3, r2
    166c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    166e:	68ab      	ldr	r3, [r5, #8]
    1670:	1c5a      	adds	r2, r3, #1
    1672:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1674:	7e22      	ldrb	r2, [r4, #24]
    1676:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1678:	2302      	movs	r3, #2
    167a:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    167c:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    167e:	886b      	ldrh	r3, [r5, #2]
    1680:	05db      	lsls	r3, r3, #23
    1682:	d400      	bmi.n	1686 <_i2c_m_sync_transfer+0x172>
    1684:	e781      	b.n	158a <_i2c_m_sync_transfer+0x76>
	void *   hw      = i2c_dev->hw;
    1686:	692f      	ldr	r7, [r5, #16]
	uint32_t timeout = 65535;
    1688:	4a27      	ldr	r2, [pc, #156]	; (1728 <_i2c_m_sync_transfer+0x214>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    168a:	7bbb      	ldrb	r3, [r7, #14]
    168c:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    168e:	0019      	movs	r1, r3
		if (timeout-- == 0) {
    1690:	1e50      	subs	r0, r2, #1
    1692:	2a00      	cmp	r2, #0
    1694:	d100      	bne.n	1698 <_i2c_m_sync_transfer+0x184>
    1696:	e779      	b.n	158c <_i2c_m_sync_transfer+0x78>
    1698:	0002      	movs	r2, r0
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    169a:	079b      	lsls	r3, r3, #30
    169c:	d0f5      	beq.n	168a <_i2c_m_sync_transfer+0x176>
	return I2C_OK;
    169e:	2000      	movs	r0, #0
		if (ret) {
    16a0:	2800      	cmp	r0, #0
    16a2:	d000      	beq.n	16a6 <_i2c_m_sync_transfer+0x192>
    16a4:	e775      	b.n	1592 <_i2c_m_sync_transfer+0x7e>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    16a6:	8a23      	ldrh	r3, [r4, #16]
    16a8:	0bdb      	lsrs	r3, r3, #15
    16aa:	d1fc      	bne.n	16a6 <_i2c_m_sync_transfer+0x192>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    16ac:	8a23      	ldrh	r3, [r4, #16]
    16ae:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    16b0:	07ca      	lsls	r2, r1, #31
    16b2:	d5be      	bpl.n	1632 <_i2c_m_sync_transfer+0x11e>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    16b4:	079a      	lsls	r2, r3, #30
    16b6:	d400      	bmi.n	16ba <_i2c_m_sync_transfer+0x1a6>
    16b8:	e77d      	b.n	15b6 <_i2c_m_sync_transfer+0xa2>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    16ba:	2201      	movs	r2, #1
    16bc:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    16be:	886a      	ldrh	r2, [r5, #2]
    16c0:	2180      	movs	r1, #128	; 0x80
    16c2:	0149      	lsls	r1, r1, #5
    16c4:	430a      	orrs	r2, r1
    16c6:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    16c8:	886a      	ldrh	r2, [r5, #2]
    16ca:	4916      	ldr	r1, [pc, #88]	; (1724 <_i2c_m_sync_transfer+0x210>)
    16cc:	400a      	ands	r2, r1
    16ce:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    16d0:	07db      	lsls	r3, r3, #31
    16d2:	d517      	bpl.n	1704 <_i2c_m_sync_transfer+0x1f0>
				return I2C_ERR_BUS;
    16d4:	2005      	movs	r0, #5
    16d6:	4240      	negs	r0, r0
    16d8:	e7d1      	b.n	167e <_i2c_m_sync_transfer+0x16a>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    16da:	6863      	ldr	r3, [r4, #4]
    16dc:	4a11      	ldr	r2, [pc, #68]	; (1724 <_i2c_m_sync_transfer+0x210>)
    16de:	4013      	ands	r3, r2
    16e0:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    16e2:	8a23      	ldrh	r3, [r4, #16]
    16e4:	0bdb      	lsrs	r3, r3, #15
    16e6:	d1fc      	bne.n	16e2 <_i2c_m_sync_transfer+0x1ce>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    16e8:	6862      	ldr	r2, [r4, #4]
    16ea:	23c0      	movs	r3, #192	; 0xc0
    16ec:	029b      	lsls	r3, r3, #10
    16ee:	4313      	orrs	r3, r2
    16f0:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    16f2:	8a23      	ldrh	r3, [r4, #16]
    16f4:	0bdb      	lsrs	r3, r3, #15
    16f6:	d1fc      	bne.n	16f2 <_i2c_m_sync_transfer+0x1de>
    16f8:	e7b5      	b.n	1666 <_i2c_m_sync_transfer+0x152>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    16fa:	2302      	movs	r3, #2
    16fc:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    16fe:	2002      	movs	r0, #2
    1700:	4240      	negs	r0, r0
    1702:	e7bc      	b.n	167e <_i2c_m_sync_transfer+0x16a>
			return I2C_ERR_BAD_ADDRESS;
    1704:	2004      	movs	r0, #4
    1706:	4240      	negs	r0, r0
    1708:	e7b9      	b.n	167e <_i2c_m_sync_transfer+0x16a>
	return I2C_OK;
    170a:	2000      	movs	r0, #0
    170c:	e7b7      	b.n	167e <_i2c_m_sync_transfer+0x16a>
		return I2C_ERR_BUSY;
    170e:	2006      	movs	r0, #6
    1710:	4240      	negs	r0, r0
    1712:	e73a      	b.n	158a <_i2c_m_sync_transfer+0x76>
    1714:	0000f600 	.word	0x0000f600
    1718:	0000059b 	.word	0x0000059b
    171c:	0000059c 	.word	0x0000059c
    1720:	0000059d 	.word	0x0000059d
    1724:	fffffeff 	.word	0xfffffeff
    1728:	0000ffff 	.word	0x0000ffff

0000172c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    172c:	b570      	push	{r4, r5, r6, lr}
    172e:	0006      	movs	r6, r0
    1730:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1732:	0008      	movs	r0, r1
    1734:	f7ff fbd8 	bl	ee8 <_sercom_get_hardware_index>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1738:	2300      	movs	r3, #0
    173a:	2b01      	cmp	r3, #1
    173c:	d80b      	bhi.n	1756 <_spi_m_sync_init+0x2a>
		if (sercomspi_regs[i].n == n) {
    173e:	0119      	lsls	r1, r3, #4
    1740:	4a5f      	ldr	r2, [pc, #380]	; (18c0 <_spi_m_sync_init+0x194>)
    1742:	1852      	adds	r2, r2, r1
    1744:	7bd2      	ldrb	r2, [r2, #15]
    1746:	4290      	cmp	r0, r2
    1748:	d002      	beq.n	1750 <_spi_m_sync_init+0x24>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    174a:	3301      	adds	r3, #1
    174c:	b2db      	uxtb	r3, r3
    174e:	e7f4      	b.n	173a <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1750:	4b5b      	ldr	r3, [pc, #364]	; (18c0 <_spi_m_sync_init+0x194>)
    1752:	185d      	adds	r5, r3, r1
    1754:	e000      	b.n	1758 <_spi_m_sync_init+0x2c>
	return NULL;
    1756:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    1758:	2e00      	cmp	r6, #0
    175a:	d100      	bne.n	175e <_spi_m_sync_init+0x32>
    175c:	e06a      	b.n	1834 <_spi_m_sync_init+0x108>
    175e:	2c00      	cmp	r4, #0
    1760:	d100      	bne.n	1764 <_spi_m_sync_init+0x38>
    1762:	e065      	b.n	1830 <_spi_m_sync_init+0x104>
    1764:	2001      	movs	r0, #1
    1766:	4a57      	ldr	r2, [pc, #348]	; (18c4 <_spi_m_sync_init+0x198>)
    1768:	4957      	ldr	r1, [pc, #348]	; (18c8 <_spi_m_sync_init+0x19c>)
    176a:	f7ff f95b 	bl	a24 <assert>

	if (regs == NULL) {
    176e:	2d00      	cmp	r5, #0
    1770:	d100      	bne.n	1774 <_spi_m_sync_init+0x48>
    1772:	e0a2      	b.n	18ba <_spi_m_sync_init+0x18e>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1774:	8a23      	ldrh	r3, [r4, #16]
    1776:	0bdb      	lsrs	r3, r3, #15
    1778:	d1fc      	bne.n	1774 <_spi_m_sync_init+0x48>
    177a:	8a23      	ldrh	r3, [r4, #16]
    177c:	0bdb      	lsrs	r3, r3, #15
    177e:	d1fc      	bne.n	177a <_spi_m_sync_init+0x4e>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1780:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    1782:	079b      	lsls	r3, r3, #30
    1784:	d507      	bpl.n	1796 <_spi_m_sync_init+0x6a>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1786:	2300      	movs	r3, #0
    1788:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    178a:	8a23      	ldrh	r3, [r4, #16]
    178c:	0bdb      	lsrs	r3, r3, #15
    178e:	d1fc      	bne.n	178a <_spi_m_sync_init+0x5e>
    1790:	8a23      	ldrh	r3, [r4, #16]
    1792:	0bdb      	lsrs	r3, r3, #15
    1794:	d1fc      	bne.n	1790 <_spi_m_sync_init+0x64>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1796:	2301      	movs	r3, #1
    1798:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    179a:	8a23      	ldrh	r3, [r4, #16]
    179c:	0bdb      	lsrs	r3, r3, #15
    179e:	d1fc      	bne.n	179a <_spi_m_sync_init+0x6e>
    17a0:	8a23      	ldrh	r3, [r4, #16]
    17a2:	0bdb      	lsrs	r3, r3, #15
    17a4:	d1fc      	bne.n	17a0 <_spi_m_sync_init+0x74>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    17a6:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    17a8:	782b      	ldrb	r3, [r5, #0]
    17aa:	786a      	ldrb	r2, [r5, #1]
    17ac:	0212      	lsls	r2, r2, #8
    17ae:	431a      	orrs	r2, r3
    17b0:	78ab      	ldrb	r3, [r5, #2]
    17b2:	041b      	lsls	r3, r3, #16
    17b4:	431a      	orrs	r2, r3
    17b6:	78eb      	ldrb	r3, [r5, #3]
    17b8:	061b      	lsls	r3, r3, #24
    17ba:	4313      	orrs	r3, r2
    17bc:	221c      	movs	r2, #28
    17be:	4013      	ands	r3, r2
    17c0:	2b08      	cmp	r3, #8
    17c2:	d039      	beq.n	1838 <_spi_m_sync_init+0x10c>
	ASSERT(hw && regs);
    17c4:	2c00      	cmp	r4, #0
    17c6:	d100      	bne.n	17ca <_spi_m_sync_init+0x9e>
    17c8:	e073      	b.n	18b2 <_spi_m_sync_init+0x186>
    17ca:	2d00      	cmp	r5, #0
    17cc:	d100      	bne.n	17d0 <_spi_m_sync_init+0xa4>
    17ce:	e06e      	b.n	18ae <_spi_m_sync_init+0x182>
    17d0:	2001      	movs	r0, #1
    17d2:	4a3e      	ldr	r2, [pc, #248]	; (18cc <_spi_m_sync_init+0x1a0>)
    17d4:	493c      	ldr	r1, [pc, #240]	; (18c8 <_spi_m_sync_init+0x19c>)
    17d6:	f7ff f925 	bl	a24 <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    17da:	782b      	ldrb	r3, [r5, #0]
    17dc:	786a      	ldrb	r2, [r5, #1]
    17de:	0212      	lsls	r2, r2, #8
    17e0:	431a      	orrs	r2, r3
    17e2:	78ab      	ldrb	r3, [r5, #2]
    17e4:	041b      	lsls	r3, r3, #16
    17e6:	431a      	orrs	r2, r3
    17e8:	78eb      	ldrb	r3, [r5, #3]
    17ea:	061b      	lsls	r3, r3, #24
    17ec:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    17ee:	4a38      	ldr	r2, [pc, #224]	; (18d0 <_spi_m_sync_init+0x1a4>)
    17f0:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    17f2:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    17f4:	8a23      	ldrh	r3, [r4, #16]
    17f6:	0bdb      	lsrs	r3, r3, #15
    17f8:	d1fc      	bne.n	17f4 <_spi_m_sync_init+0xc8>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    17fa:	792b      	ldrb	r3, [r5, #4]
    17fc:	796a      	ldrb	r2, [r5, #5]
    17fe:	0212      	lsls	r2, r2, #8
    1800:	431a      	orrs	r2, r3
    1802:	79ab      	ldrb	r3, [r5, #6]
    1804:	041b      	lsls	r3, r3, #16
    1806:	431a      	orrs	r2, r3
    1808:	79eb      	ldrb	r3, [r5, #7]
    180a:	061b      	lsls	r3, r3, #24
    180c:	4313      	orrs	r3, r2
    180e:	4a31      	ldr	r2, [pc, #196]	; (18d4 <_spi_m_sync_init+0x1a8>)
    1810:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1812:	2280      	movs	r2, #128	; 0x80
    1814:	0292      	lsls	r2, r2, #10
    1816:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1818:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    181a:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    181c:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    181e:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1820:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1822:	792b      	ldrb	r3, [r5, #4]
    1824:	075b      	lsls	r3, r3, #29
    1826:	d146      	bne.n	18b6 <_spi_m_sync_init+0x18a>
    1828:	2301      	movs	r3, #1
    182a:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    182c:	2000      	movs	r0, #0
}
    182e:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1830:	2000      	movs	r0, #0
    1832:	e798      	b.n	1766 <_spi_m_sync_init+0x3a>
    1834:	2000      	movs	r0, #0
    1836:	e796      	b.n	1766 <_spi_m_sync_init+0x3a>
	ASSERT(hw && regs);
    1838:	2c00      	cmp	r4, #0
    183a:	d036      	beq.n	18aa <_spi_m_sync_init+0x17e>
    183c:	2d00      	cmp	r5, #0
    183e:	d032      	beq.n	18a6 <_spi_m_sync_init+0x17a>
    1840:	2001      	movs	r0, #1
    1842:	4a25      	ldr	r2, [pc, #148]	; (18d8 <_spi_m_sync_init+0x1ac>)
    1844:	4920      	ldr	r1, [pc, #128]	; (18c8 <_spi_m_sync_init+0x19c>)
    1846:	f7ff f8ed 	bl	a24 <assert>
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    184a:	782b      	ldrb	r3, [r5, #0]
    184c:	786a      	ldrb	r2, [r5, #1]
    184e:	0212      	lsls	r2, r2, #8
    1850:	431a      	orrs	r2, r3
    1852:	78ab      	ldrb	r3, [r5, #2]
    1854:	041b      	lsls	r3, r3, #16
    1856:	431a      	orrs	r2, r3
    1858:	78eb      	ldrb	r3, [r5, #3]
    185a:	061b      	lsls	r3, r3, #24
    185c:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    185e:	4a1c      	ldr	r2, [pc, #112]	; (18d0 <_spi_m_sync_init+0x1a4>)
    1860:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1862:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1864:	8a23      	ldrh	r3, [r4, #16]
    1866:	0bdb      	lsrs	r3, r3, #15
    1868:	d1fc      	bne.n	1864 <_spi_m_sync_init+0x138>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    186a:	792b      	ldrb	r3, [r5, #4]
    186c:	796a      	ldrb	r2, [r5, #5]
    186e:	0212      	lsls	r2, r2, #8
    1870:	431a      	orrs	r2, r3
    1872:	79ab      	ldrb	r3, [r5, #6]
    1874:	041b      	lsls	r3, r3, #16
    1876:	431a      	orrs	r2, r3
    1878:	79eb      	ldrb	r3, [r5, #7]
    187a:	061b      	lsls	r3, r3, #24
    187c:	4313      	orrs	r3, r2
    187e:	4a17      	ldr	r2, [pc, #92]	; (18dc <_spi_m_sync_init+0x1b0>)
    1880:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    1882:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    1884:	7a2b      	ldrb	r3, [r5, #8]
    1886:	7a6a      	ldrb	r2, [r5, #9]
    1888:	0212      	lsls	r2, r2, #8
    188a:	431a      	orrs	r2, r3
    188c:	7aab      	ldrb	r3, [r5, #10]
    188e:	041b      	lsls	r3, r3, #16
    1890:	431a      	orrs	r2, r3
    1892:	7aeb      	ldrb	r3, [r5, #11]
    1894:	061b      	lsls	r3, r3, #24
    1896:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    1898:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    189a:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    189c:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    189e:	8a23      	ldrh	r3, [r4, #16]
    18a0:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    18a2:	d1fc      	bne.n	189e <_spi_m_sync_init+0x172>
    18a4:	e7bd      	b.n	1822 <_spi_m_sync_init+0xf6>
	ASSERT(hw && regs);
    18a6:	2000      	movs	r0, #0
    18a8:	e7cb      	b.n	1842 <_spi_m_sync_init+0x116>
    18aa:	2000      	movs	r0, #0
    18ac:	e7c9      	b.n	1842 <_spi_m_sync_init+0x116>
	ASSERT(hw && regs);
    18ae:	2000      	movs	r0, #0
    18b0:	e78f      	b.n	17d2 <_spi_m_sync_init+0xa6>
    18b2:	2000      	movs	r0, #0
    18b4:	e78d      	b.n	17d2 <_spi_m_sync_init+0xa6>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    18b6:	2302      	movs	r3, #2
    18b8:	e7b7      	b.n	182a <_spi_m_sync_init+0xfe>
		return ERR_INVALID_ARG;
    18ba:	200d      	movs	r0, #13
    18bc:	4240      	negs	r0, r0
    18be:	e7b6      	b.n	182e <_spi_m_sync_init+0x102>
    18c0:	0000f644 	.word	0x0000f644
    18c4:	000008a3 	.word	0x000008a3
    18c8:	0000f600 	.word	0x0000f600
    18cc:	00000872 	.word	0x00000872
    18d0:	fffffefc 	.word	0xfffffefc
    18d4:	fffd3fbf 	.word	0xfffd3fbf
    18d8:	00000883 	.word	0x00000883
    18dc:	00020040 	.word	0x00020040

000018e0 <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    18e0:	b510      	push	{r4, lr}
    18e2:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    18e4:	d00d      	beq.n	1902 <_spi_m_sync_enable+0x22>
    18e6:	6803      	ldr	r3, [r0, #0]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d008      	beq.n	18fe <_spi_m_sync_enable+0x1e>
    18ec:	2001      	movs	r0, #1
    18ee:	4a06      	ldr	r2, [pc, #24]	; (1908 <_spi_m_sync_enable+0x28>)
    18f0:	4906      	ldr	r1, [pc, #24]	; (190c <_spi_m_sync_enable+0x2c>)
    18f2:	f7ff f897 	bl	a24 <assert>

	return _spi_sync_enable(dev->prvt);
    18f6:	6820      	ldr	r0, [r4, #0]
    18f8:	f7ff fb04 	bl	f04 <_spi_sync_enable>
}
    18fc:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    18fe:	2000      	movs	r0, #0
    1900:	e7f5      	b.n	18ee <_spi_m_sync_enable+0xe>
    1902:	2000      	movs	r0, #0
    1904:	e7f3      	b.n	18ee <_spi_m_sync_enable+0xe>
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	0000090a 	.word	0x0000090a
    190c:	0000f600 	.word	0x0000f600

00001910 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1910:	b570      	push	{r4, r5, r6, lr}
    1912:	b088      	sub	sp, #32
    1914:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    1916:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    1918:	680b      	ldr	r3, [r1, #0]
    191a:	9303      	str	r3, [sp, #12]
    191c:	684b      	ldr	r3, [r1, #4]
    191e:	9304      	str	r3, [sp, #16]
    1920:	2300      	movs	r3, #0
    1922:	9305      	str	r3, [sp, #20]
    1924:	9306      	str	r3, [sp, #24]
    1926:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    1928:	2800      	cmp	r0, #0
    192a:	d014      	beq.n	1956 <_spi_m_sync_trans+0x46>
    192c:	2c00      	cmp	r4, #0
    192e:	d010      	beq.n	1952 <_spi_m_sync_trans+0x42>
    1930:	2001      	movs	r0, #1
    1932:	4a2d      	ldr	r2, [pc, #180]	; (19e8 <_spi_m_sync_trans+0xd8>)
    1934:	492d      	ldr	r1, [pc, #180]	; (19ec <_spi_m_sync_trans+0xdc>)
    1936:	f7ff f875 	bl	a24 <assert>
    193a:	8a23      	ldrh	r3, [r4, #16]
    193c:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    193e:	d14f      	bne.n	19e0 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1940:	8a23      	ldrh	r3, [r4, #16]
    1942:	0bdb      	lsrs	r3, r3, #15
    1944:	d1fc      	bne.n	1940 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    1946:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    1948:	079b      	lsls	r3, r3, #30
    194a:	d418      	bmi.n	197e <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    194c:	2014      	movs	r0, #20
    194e:	4240      	negs	r0, r0
    1950:	e044      	b.n	19dc <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    1952:	2000      	movs	r0, #0
    1954:	e7ed      	b.n	1932 <_spi_m_sync_trans+0x22>
    1956:	2000      	movs	r0, #0
    1958:	e7eb      	b.n	1932 <_spi_m_sync_trans+0x22>
		return false;
    195a:	2200      	movs	r2, #0
    195c:	e026      	b.n	19ac <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    195e:	7858      	ldrb	r0, [r3, #1]
    1960:	0200      	lsls	r0, r0, #8
    1962:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    1964:	3302      	adds	r3, #2
    1966:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    1968:	3201      	adds	r2, #1
    196a:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    196c:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    196e:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    1970:	9805      	ldr	r0, [sp, #20]
    1972:	68ab      	ldr	r3, [r5, #8]
    1974:	4298      	cmp	r0, r3
    1976:	d302      	bcc.n	197e <_spi_m_sync_trans+0x6e>
    1978:	9a06      	ldr	r2, [sp, #24]
    197a:	4293      	cmp	r3, r2
    197c:	d929      	bls.n	19d2 <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    197e:	7ba3      	ldrb	r3, [r4, #14]
    1980:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    1982:	075a      	lsls	r2, r3, #29
    1984:	d5e9      	bpl.n	195a <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    1986:	8b22      	ldrh	r2, [r4, #24]
    1988:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    198a:	9904      	ldr	r1, [sp, #16]
    198c:	2900      	cmp	r1, #0
    198e:	d008      	beq.n	19a2 <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    1990:	1c48      	adds	r0, r1, #1
    1992:	9004      	str	r0, [sp, #16]
    1994:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    1996:	2e01      	cmp	r6, #1
    1998:	d903      	bls.n	19a2 <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    199a:	1c88      	adds	r0, r1, #2
    199c:	9004      	str	r0, [sp, #16]
    199e:	0a12      	lsrs	r2, r2, #8
    19a0:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    19a2:	9a06      	ldr	r2, [sp, #24]
    19a4:	9201      	str	r2, [sp, #4]
    19a6:	3201      	adds	r2, #1
    19a8:	9206      	str	r2, [sp, #24]
	return true;
    19aa:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    19ac:	2a00      	cmp	r2, #0
    19ae:	d1df      	bne.n	1970 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    19b0:	9906      	ldr	r1, [sp, #24]
    19b2:	9a05      	ldr	r2, [sp, #20]
    19b4:	4291      	cmp	r1, r2
    19b6:	d3db      	bcc.n	1970 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    19b8:	07db      	lsls	r3, r3, #31
    19ba:	d5d9      	bpl.n	1970 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    19bc:	9b03      	ldr	r3, [sp, #12]
    19be:	2b00      	cmp	r3, #0
    19c0:	d005      	beq.n	19ce <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    19c2:	1c59      	adds	r1, r3, #1
    19c4:	9103      	str	r1, [sp, #12]
    19c6:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    19c8:	2e01      	cmp	r6, #1
    19ca:	d8c8      	bhi.n	195e <_spi_m_sync_trans+0x4e>
    19cc:	e7cc      	b.n	1968 <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    19ce:	4908      	ldr	r1, [pc, #32]	; (19f0 <_spi_m_sync_trans+0xe0>)
    19d0:	e7ca      	b.n	1968 <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    19d2:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    19d4:	079b      	lsls	r3, r3, #30
    19d6:	d0fc      	beq.n	19d2 <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    19d8:	2303      	movs	r3, #3
    19da:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    19dc:	b008      	add	sp, #32
    19de:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    19e0:	2004      	movs	r0, #4
    19e2:	4240      	negs	r0, r0
    19e4:	e7fa      	b.n	19dc <_spi_m_sync_trans+0xcc>
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	00000a01 	.word	0x00000a01
    19ec:	0000f600 	.word	0x0000f600
    19f0:	000001ff 	.word	0x000001ff

000019f4 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    19f4:	4b0f      	ldr	r3, [pc, #60]	; (1a34 <_sysctrl_init_sources+0x40>)
    19f6:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    19f8:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    19fa:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    19fc:	0f92      	lsrs	r2, r2, #30
    19fe:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1a00:	0409      	lsls	r1, r1, #16
    1a02:	480d      	ldr	r0, [pc, #52]	; (1a38 <_sysctrl_init_sources+0x44>)
    1a04:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1a06:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1a08:	490c      	ldr	r1, [pc, #48]	; (1a3c <_sysctrl_init_sources+0x48>)
    1a0a:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1a0c:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a0e:	699a      	ldr	r2, [r3, #24]
    1a10:	2102      	movs	r1, #2
    1a12:	430a      	orrs	r2, r1
    1a14:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    1a16:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1a18:	311d      	adds	r1, #29
    1a1a:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1a1c:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1a1e:	4b05      	ldr	r3, [pc, #20]	; (1a34 <_sysctrl_init_sources+0x40>)
    1a20:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    1a22:	071b      	lsls	r3, r3, #28
    1a24:	d5fb      	bpl.n	1a1e <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    1a26:	4a03      	ldr	r2, [pc, #12]	; (1a34 <_sysctrl_init_sources+0x40>)
    1a28:	6a13      	ldr	r3, [r2, #32]
    1a2a:	2180      	movs	r1, #128	; 0x80
    1a2c:	430b      	orrs	r3, r1
    1a2e:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1a30:	4770      	bx	lr
    1a32:	46c0      	nop			; (mov r8, r8)
    1a34:	40000800 	.word	0x40000800
    1a38:	0fff0000 	.word	0x0fff0000
    1a3c:	00000302 	.word	0x00000302

00001a40 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1a40:	2202      	movs	r2, #2
    1a42:	4b1b      	ldr	r3, [pc, #108]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1a44:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1a46:	4b1a      	ldr	r3, [pc, #104]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1a48:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1a4a:	06db      	lsls	r3, r3, #27
    1a4c:	d5fb      	bpl.n	1a46 <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    1a4e:	4a19      	ldr	r2, [pc, #100]	; (1ab4 <_sysctrl_init_referenced_generators+0x74>)
    1a50:	4b17      	ldr	r3, [pc, #92]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1a52:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1a54:	4b18      	ldr	r3, [pc, #96]	; (1ab8 <_sysctrl_init_referenced_generators+0x78>)
    1a56:	681b      	ldr	r3, [r3, #0]
    1a58:	0e9b      	lsrs	r3, r3, #26
    1a5a:	2b3f      	cmp	r3, #63	; 0x3f
    1a5c:	d020      	beq.n	1aa0 <_sysctrl_init_referenced_generators+0x60>
    1a5e:	029b      	lsls	r3, r3, #10
    1a60:	2280      	movs	r2, #128	; 0x80
    1a62:	0092      	lsls	r2, r2, #2
    1a64:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    1a66:	4a12      	ldr	r2, [pc, #72]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1a68:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1a6a:	2302      	movs	r3, #2
    1a6c:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    1a6e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    1a70:	075b      	lsls	r3, r3, #29
    1a72:	d518      	bpl.n	1aa6 <_sysctrl_init_referenced_generators+0x66>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    1a74:	4b0e      	ldr	r3, [pc, #56]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1a76:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    1a78:	23d0      	movs	r3, #208	; 0xd0
    1a7a:	4013      	ands	r3, r2
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    1a7c:	2bd0      	cmp	r3, #208	; 0xd0
    1a7e:	d1f9      	bne.n	1a74 <_sysctrl_init_referenced_generators+0x34>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    1a80:	4a0b      	ldr	r2, [pc, #44]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1a82:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    1a84:	2180      	movs	r1, #128	; 0x80
    1a86:	430b      	orrs	r3, r1
    1a88:	b29b      	uxth	r3, r3
    1a8a:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    1a8c:	4b0b      	ldr	r3, [pc, #44]	; (1abc <_sysctrl_init_referenced_generators+0x7c>)
    1a8e:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    1a90:	09db      	lsrs	r3, r3, #7
    1a92:	d1fb      	bne.n	1a8c <_sysctrl_init_referenced_generators+0x4c>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    1a94:	4a06      	ldr	r2, [pc, #24]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1a96:	6993      	ldr	r3, [r2, #24]
    1a98:	2102      	movs	r1, #2
    1a9a:	438b      	bics	r3, r1
    1a9c:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    1a9e:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    1aa0:	23fc      	movs	r3, #252	; 0xfc
    1aa2:	01db      	lsls	r3, r3, #7
    1aa4:	e7df      	b.n	1a66 <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1aa6:	4b02      	ldr	r3, [pc, #8]	; (1ab0 <_sysctrl_init_referenced_generators+0x70>)
    1aa8:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1aaa:	06db      	lsls	r3, r3, #27
    1aac:	d5fb      	bpl.n	1aa6 <_sysctrl_init_referenced_generators+0x66>
    1aae:	e7e7      	b.n	1a80 <_sysctrl_init_referenced_generators+0x40>
    1ab0:	40000800 	.word	0x40000800
    1ab4:	04010000 	.word	0x04010000
    1ab8:	00806024 	.word	0x00806024
    1abc:	40000c00 	.word	0x40000c00

00001ac0 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1ac0:	b570      	push	{r4, r5, r6, lr}
    1ac2:	0005      	movs	r5, r0
	void *const hw = device->hw;
    1ac4:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    1ac6:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1ac8:	07db      	lsls	r3, r3, #31
    1aca:	d505      	bpl.n	1ad8 <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1acc:	2301      	movs	r3, #1
    1ace:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1ad0:	6803      	ldr	r3, [r0, #0]
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d000      	beq.n	1ad8 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    1ad6:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1ad8:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1ada:	079b      	lsls	r3, r3, #30
    1adc:	d506      	bpl.n	1aec <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1ade:	2302      	movs	r3, #2
    1ae0:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    1ae2:	686b      	ldr	r3, [r5, #4]
    1ae4:	2b00      	cmp	r3, #0
    1ae6:	d001      	beq.n	1aec <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1ae8:	0028      	movs	r0, r5
    1aea:	4798      	blx	r3
		}
	}
}
    1aec:	bd70      	pop	{r4, r5, r6, pc}
	...

00001af0 <TC6_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC6_Handler(void)
{
    1af0:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc6_dev);
    1af2:	4b02      	ldr	r3, [pc, #8]	; (1afc <TC6_Handler+0xc>)
    1af4:	6818      	ldr	r0, [r3, #0]
    1af6:	f7ff ffe3 	bl	1ac0 <tc_pwm_interrupt_handler>
}
    1afa:	bd10      	pop	{r4, pc}
    1afc:	20000a64 	.word	0x20000a64

00001b00 <TC7_Handler>:

/**
 * \brief TC interrupt handler
 */
void TC7_Handler(void)
{
    1b00:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc7_dev);
    1b02:	4b02      	ldr	r3, [pc, #8]	; (1b0c <TC7_Handler+0xc>)
    1b04:	6818      	ldr	r0, [r3, #0]
    1b06:	f7ff ffdb 	bl	1ac0 <tc_pwm_interrupt_handler>
}
    1b0a:	bd10      	pop	{r4, pc}
    1b0c:	20000a68 	.word	0x20000a68

00001b10 <ADS1x1x_write_register>:
/*!
@brief  Writes 16 bits to the specified destination register.
*/
/**************************************************************************/
void ADS1x1x_write_register(uint8_t i2c_address, uint8_t reg, uint16_t value)
{
    1b10:	b500      	push	{lr}
    1b12:	b083      	sub	sp, #12
	
	uint8_t tmpData[] = {reg, (uint8_t)(value>>8), (uint8_t)(value&0xff)};
    1b14:	ab01      	add	r3, sp, #4
    1b16:	7019      	strb	r1, [r3, #0]
    1b18:	0a11      	lsrs	r1, r2, #8
    1b1a:	7059      	strb	r1, [r3, #1]
    1b1c:	709a      	strb	r2, [r3, #2]
	I2C_write_batch(i2c_address, (uint8_t *)&tmpData, sizeof(tmpData));
    1b1e:	2203      	movs	r2, #3
    1b20:	0019      	movs	r1, r3
    1b22:	f000 fc59 	bl	23d8 <I2C_write_batch>
	//ADS1x1x_i2c_start_write(i2c_address);
	//ADS1x1x_i2c_write(reg);
	//ADS1x1x_i2c_write((uint8_t)(value>>8));
	//ADS1x1x_i2c_write((uint8_t)(value&0xff));
	//ADS1x1x_i2c_stop();
}
    1b26:	b003      	add	sp, #12
    1b28:	bd00      	pop	{pc}

00001b2a <ADS1x1x_set_threshold_lo>:
	return result;
}


void ADS1x1x_set_threshold_lo(ADS1x1x_config_t *p_config, uint16_t value)
{
    1b2a:	b510      	push	{r4, lr}
    1b2c:	000a      	movs	r2, r1
	if (p_config->chip==ADS1013 || p_config->chip==ADS1014 || p_config->chip==ADS1015)
    1b2e:	7803      	ldrb	r3, [r0, #0]
    1b30:	2b02      	cmp	r3, #2
    1b32:	d801      	bhi.n	1b38 <ADS1x1x_set_threshold_lo+0xe>
	{
		value <<= 4;
    1b34:	010a      	lsls	r2, r1, #4
    1b36:	b292      	uxth	r2, r2
	}
	ADS1x1x_write_register(p_config->i2c_address,ADS1x1x_REG_POINTER_LO_THRESH,value);
    1b38:	7840      	ldrb	r0, [r0, #1]
    1b3a:	2102      	movs	r1, #2
    1b3c:	f7ff ffe8 	bl	1b10 <ADS1x1x_write_register>
}
    1b40:	bd10      	pop	{r4, pc}

00001b42 <ADS1x1x_set_threshold_hi>:


void ADS1x1x_set_threshold_hi(ADS1x1x_config_t *p_config, uint16_t value)
{
    1b42:	b510      	push	{r4, lr}
    1b44:	000a      	movs	r2, r1
	if (p_config->chip==ADS1013 || p_config->chip==ADS1014 || p_config->chip==ADS1015)
    1b46:	7803      	ldrb	r3, [r0, #0]
    1b48:	2b02      	cmp	r3, #2
    1b4a:	d801      	bhi.n	1b50 <ADS1x1x_set_threshold_hi+0xe>
	{
		value <<= 4;
    1b4c:	010a      	lsls	r2, r1, #4
    1b4e:	b292      	uxth	r2, r2
	}
	ADS1x1x_write_register(p_config->i2c_address,ADS1x1x_REG_POINTER_HI_THRESH,value);
    1b50:	7840      	ldrb	r0, [r0, #1]
    1b52:	2103      	movs	r1, #3
    1b54:	f7ff ffdc 	bl	1b10 <ADS1x1x_write_register>
}
    1b58:	bd10      	pop	{r4, pc}

00001b5a <ADS1x1x_set_config_bitfield>:


void ADS1x1x_set_config_bitfield(ADS1x1x_config_t *p_config, uint16_t value, uint16_t mask)
{
	p_config->config &= ~mask;
    1b5a:	8843      	ldrh	r3, [r0, #2]
    1b5c:	4393      	bics	r3, r2
	p_config->config |= (value & mask);
    1b5e:	4011      	ands	r1, r2
    1b60:	4319      	orrs	r1, r3
    1b62:	8041      	strh	r1, [r0, #2]
}
    1b64:	4770      	bx	lr

00001b66 <ADS1x1x_set_os>:


void ADS1x1x_set_os(ADS1x1x_config_t *p_config, ADS1x1x_os_t value)
{
    1b66:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_OS_MASK);
    1b68:	2280      	movs	r2, #128	; 0x80
    1b6a:	0212      	lsls	r2, r2, #8
    1b6c:	f7ff fff5 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1b70:	bd10      	pop	{r4, pc}

00001b72 <ADS1x1x_set_multiplexer>:


void ADS1x1x_set_multiplexer(ADS1x1x_config_t *p_config, ADS1x1x_mux_t value)
{
    1b72:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_MULTIPLEXER_MASK);
    1b74:	22e0      	movs	r2, #224	; 0xe0
    1b76:	01d2      	lsls	r2, r2, #7
    1b78:	f7ff ffef 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1b7c:	bd10      	pop	{r4, pc}

00001b7e <ADS1x1x_set_pga>:


void ADS1x1x_set_pga(ADS1x1x_config_t *p_config, ADS1x1x_pga_t value)
{
    1b7e:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_PGA_MASK);
    1b80:	22e0      	movs	r2, #224	; 0xe0
    1b82:	0112      	lsls	r2, r2, #4
    1b84:	f7ff ffe9 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1b88:	bd10      	pop	{r4, pc}

00001b8a <ADS1x1x_set_mode>:


void ADS1x1x_set_mode(ADS1x1x_config_t *p_config, ADS1x1x_mode_t value)
{
    1b8a:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_MODE_MASK);
    1b8c:	2280      	movs	r2, #128	; 0x80
    1b8e:	0052      	lsls	r2, r2, #1
    1b90:	f7ff ffe3 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1b94:	bd10      	pop	{r4, pc}

00001b96 <ADS1x1x_set_data_rate>:


void ADS1x1x_set_data_rate(ADS1x1x_config_t *p_config, ADS1x1x_data_rate_t value)
{
    1b96:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_DATA_RATE_MASK);
    1b98:	b289      	uxth	r1, r1
    1b9a:	22e0      	movs	r2, #224	; 0xe0
    1b9c:	f7ff ffdd 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1ba0:	bd10      	pop	{r4, pc}

00001ba2 <ADS1x1x_set_comparator_mode>:


void ADS1x1x_set_comparator_mode(ADS1x1x_config_t *p_config, ADS1x1x_comparator_mode_t value)
{
    1ba2:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_MODE_MASK);
    1ba4:	b289      	uxth	r1, r1
    1ba6:	2210      	movs	r2, #16
    1ba8:	f7ff ffd7 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1bac:	bd10      	pop	{r4, pc}

00001bae <ADS1x1x_set_comparator_polarity>:


void ADS1x1x_set_comparator_polarity(ADS1x1x_config_t *p_config, ADS1x1x_comparator_polarity_t value)
{
    1bae:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_POLARITY_MASK);
    1bb0:	b289      	uxth	r1, r1
    1bb2:	2208      	movs	r2, #8
    1bb4:	f7ff ffd1 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1bb8:	bd10      	pop	{r4, pc}

00001bba <ADS1x1x_set_comparator_latching>:


void ADS1x1x_set_comparator_latching(ADS1x1x_config_t *p_config, ADS1x1x_comparator_latching_t value)
{
    1bba:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_LATCHING_MASK);
    1bbc:	b289      	uxth	r1, r1
    1bbe:	2204      	movs	r2, #4
    1bc0:	f7ff ffcb 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1bc4:	bd10      	pop	{r4, pc}

00001bc6 <ADS1x1x_set_comparator_queue>:


void ADS1x1x_set_comparator_queue(ADS1x1x_config_t *p_config, ADS1x1x_comparator_queue_t value)
{
    1bc6:	b510      	push	{r4, lr}
	ADS1x1x_set_config_bitfield(p_config,(uint16_t)value,ADS1x1x_REG_CONFIG_COMPARATOR_QUEUE_MASK);
    1bc8:	b289      	uxth	r1, r1
    1bca:	2203      	movs	r2, #3
    1bcc:	f7ff ffc5 	bl	1b5a <ADS1x1x_set_config_bitfield>
}
    1bd0:	bd10      	pop	{r4, pc}

00001bd2 <ADS1x1x_init>:
{
    1bd2:	b570      	push	{r4, r5, r6, lr}
    1bd4:	0004      	movs	r4, r0
    1bd6:	001e      	movs	r6, r3
    1bd8:	ab04      	add	r3, sp, #16
    1bda:	881d      	ldrh	r5, [r3, #0]
	if (p_config!=0)
    1bdc:	2800      	cmp	r0, #0
    1bde:	d032      	beq.n	1c46 <ADS1x1x_init+0x74>
		p_config->chip = chip;
    1be0:	7001      	strb	r1, [r0, #0]
		p_config->i2c_address = i2c_address;
    1be2:	7042      	strb	r2, [r0, #1]
		p_config->config = 0;
    1be4:	2300      	movs	r3, #0
    1be6:	8043      	strh	r3, [r0, #2]
		ADS1x1x_set_os(p_config,OS_SINGLE);
    1be8:	2180      	movs	r1, #128	; 0x80
    1bea:	0209      	lsls	r1, r1, #8
    1bec:	f7ff ffbb 	bl	1b66 <ADS1x1x_set_os>
		ADS1x1x_set_multiplexer(p_config,input);
    1bf0:	0031      	movs	r1, r6
    1bf2:	0020      	movs	r0, r4
    1bf4:	f7ff ffbd 	bl	1b72 <ADS1x1x_set_multiplexer>
		ADS1x1x_set_pga(p_config,gain);
    1bf8:	0029      	movs	r1, r5
    1bfa:	0020      	movs	r0, r4
    1bfc:	f7ff ffbf 	bl	1b7e <ADS1x1x_set_pga>
		ADS1x1x_set_mode(p_config,MODE_SINGLE_SHOT);
    1c00:	2180      	movs	r1, #128	; 0x80
    1c02:	0049      	lsls	r1, r1, #1
    1c04:	0020      	movs	r0, r4
    1c06:	f7ff ffc0 	bl	1b8a <ADS1x1x_set_mode>
		if (p_config->chip==ADS1013 || p_config->chip==ADS1014 || p_config->chip==ADS1015)
    1c0a:	7823      	ldrb	r3, [r4, #0]
    1c0c:	2b02      	cmp	r3, #2
    1c0e:	d815      	bhi.n	1c3c <ADS1x1x_init+0x6a>
			ADS1x1x_set_data_rate(p_config,DATA_RATE_ADS101x_1600);
    1c10:	2180      	movs	r1, #128	; 0x80
    1c12:	0020      	movs	r0, r4
    1c14:	f7ff ffbf 	bl	1b96 <ADS1x1x_set_data_rate>
		ADS1x1x_set_comparator_mode(p_config,COMPARATOR_MODE_TRADITIONAL);
    1c18:	2100      	movs	r1, #0
    1c1a:	0020      	movs	r0, r4
    1c1c:	f7ff ffc1 	bl	1ba2 <ADS1x1x_set_comparator_mode>
		ADS1x1x_set_comparator_polarity(p_config,COMPARATOR_POLARITY_ACTIVE_LO);
    1c20:	2100      	movs	r1, #0
    1c22:	0020      	movs	r0, r4
    1c24:	f7ff ffc3 	bl	1bae <ADS1x1x_set_comparator_polarity>
		ADS1x1x_set_comparator_latching(p_config,COMPARATOR_NON_LATCHING);
    1c28:	2100      	movs	r1, #0
    1c2a:	0020      	movs	r0, r4
    1c2c:	f7ff ffc5 	bl	1bba <ADS1x1x_set_comparator_latching>
		ADS1x1x_set_comparator_queue(p_config,COMPARATOR_QUEUE_NONE);
    1c30:	2103      	movs	r1, #3
    1c32:	0020      	movs	r0, r4
    1c34:	f7ff ffc7 	bl	1bc6 <ADS1x1x_set_comparator_queue>
		result = 1;
    1c38:	2001      	movs	r0, #1
}
    1c3a:	bd70      	pop	{r4, r5, r6, pc}
			ADS1x1x_set_data_rate(p_config,DATA_RATE_ADS111x_128);
    1c3c:	2180      	movs	r1, #128	; 0x80
    1c3e:	0020      	movs	r0, r4
    1c40:	f7ff ffa9 	bl	1b96 <ADS1x1x_set_data_rate>
    1c44:	e7e8      	b.n	1c18 <ADS1x1x_init+0x46>
	uint8_t result = 0;
    1c46:	2000      	movs	r0, #0
    1c48:	e7f7      	b.n	1c3a <ADS1x1x_init+0x68>

00001c4a <ETH_Handler>:
	EXT_IRG_init();
}

static void ETH_Handler(void){

}
    1c4a:	4770      	bx	lr

00001c4c <TIMER_0_task1_cb>:
	return res;
}

static void TIMER_0_task1_cb(const struct timer_task *const timer_task)
{
	adcConversionRequest = 1;
    1c4c:	2201      	movs	r2, #1
    1c4e:	4b01      	ldr	r3, [pc, #4]	; (1c54 <TIMER_0_task1_cb+0x8>)
    1c50:	701a      	strb	r2, [r3, #0]
}
    1c52:	4770      	bx	lr
    1c54:	20000a94 	.word	0x20000a94

00001c58 <TIMER_0_task2_cb>:
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
}

static inline void hri_port_toggle_OUT_reg(const void *const hw, uint8_t submodule_index, hri_port_out_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1c58:	2280      	movs	r2, #128	; 0x80
    1c5a:	0412      	lsls	r2, r2, #16
    1c5c:	23c0      	movs	r3, #192	; 0xc0
    1c5e:	05db      	lsls	r3, r3, #23
    1c60:	61da      	str	r2, [r3, #28]

static void TIMER_0_task2_cb(const struct timer_task *const timer_task)
{
	gpio_toggle_pin_level(GLD);
	
}
    1c62:	4770      	bx	lr

00001c64 <TIMER_IRQ_init>:
	return retVal;
}


static void TIMER_IRQ_init(void)
{
    1c64:	b570      	push	{r4, r5, r6, lr}
			peripheral = (uint32_t)_pm_get_ahb_index(module);
			PM->AHBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBA:
		PM->APBAMASK.reg |= 1 << peripheral;
    1c66:	4a15      	ldr	r2, [pc, #84]	; (1cbc <TIMER_IRQ_init+0x58>)
    1c68:	6993      	ldr	r3, [r2, #24]
    1c6a:	2120      	movs	r1, #32
    1c6c:	430b      	orrs	r3, r1
    1c6e:	6193      	str	r3, [r2, #24]
	((Gclk *)hw)->CLKCTRL.reg = data;
    1c70:	4a13      	ldr	r2, [pc, #76]	; (1cc0 <TIMER_IRQ_init+0x5c>)
    1c72:	4b14      	ldr	r3, [pc, #80]	; (1cc4 <TIMER_IRQ_init+0x60>)
    1c74:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBA, RTC);
	_gclk_enable_channel(RTC_GCLK_ID, CONF_GCLK_RTC_SRC);
	timer_init(&TIMER_IRQ, RTC, _rtc_get_timer());
    1c76:	f7ff f92d 	bl	ed4 <_rtc_get_timer>
    1c7a:	0002      	movs	r2, r0
    1c7c:	4c12      	ldr	r4, [pc, #72]	; (1cc8 <TIMER_IRQ_init+0x64>)
    1c7e:	4913      	ldr	r1, [pc, #76]	; (1ccc <TIMER_IRQ_init+0x68>)
    1c80:	0020      	movs	r0, r4
    1c82:	f7fe fcc9 	bl	618 <timer_init>
	
	TIMER_task1.interval = 32768/4;
    1c86:	4912      	ldr	r1, [pc, #72]	; (1cd0 <TIMER_IRQ_init+0x6c>)
    1c88:	2380      	movs	r3, #128	; 0x80
    1c8a:	019b      	lsls	r3, r3, #6
    1c8c:	608b      	str	r3, [r1, #8]
	TIMER_task1.cb       = TIMER_0_task1_cb;
    1c8e:	4b11      	ldr	r3, [pc, #68]	; (1cd4 <TIMER_IRQ_init+0x70>)
    1c90:	60cb      	str	r3, [r1, #12]
	TIMER_task1.mode     = TIMER_TASK_REPEAT;
    1c92:	2301      	movs	r3, #1
    1c94:	740b      	strb	r3, [r1, #16]
	
	TIMER_task2.interval = 32768/2;
    1c96:	4d10      	ldr	r5, [pc, #64]	; (1cd8 <TIMER_IRQ_init+0x74>)
    1c98:	2280      	movs	r2, #128	; 0x80
    1c9a:	01d2      	lsls	r2, r2, #7
    1c9c:	60aa      	str	r2, [r5, #8]
	TIMER_task2.cb       = TIMER_0_task2_cb;
    1c9e:	4a0f      	ldr	r2, [pc, #60]	; (1cdc <TIMER_IRQ_init+0x78>)
    1ca0:	60ea      	str	r2, [r5, #12]
	TIMER_task2.mode     = TIMER_TASK_REPEAT;
    1ca2:	742b      	strb	r3, [r5, #16]

	timer_add_task(&TIMER_IRQ, &TIMER_task1);
    1ca4:	0020      	movs	r0, r4
    1ca6:	f7fe fced 	bl	684 <timer_add_task>
	timer_add_task(&TIMER_IRQ, &TIMER_task2);
    1caa:	0029      	movs	r1, r5
    1cac:	0020      	movs	r0, r4
    1cae:	f7fe fce9 	bl	684 <timer_add_task>
	timer_start(&TIMER_IRQ);
    1cb2:	0020      	movs	r0, r4
    1cb4:	f7fe fcce 	bl	654 <timer_start>
    1cb8:	bd70      	pop	{r4, r5, r6, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	40000400 	.word	0x40000400
    1cc0:	00004302 	.word	0x00004302
    1cc4:	40000c00 	.word	0x40000c00
    1cc8:	20000c8c 	.word	0x20000c8c
    1ccc:	40001400 	.word	0x40001400
    1cd0:	20000a6c 	.word	0x20000a6c
    1cd4:	00001c4d 	.word	0x00001c4d
    1cd8:	20000a80 	.word	0x20000a80
    1cdc:	00001c59 	.word	0x00001c59

00001ce0 <buzer>:
void buzer(uint16_t soundTime){
    1ce0:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1ce2:	24c0      	movs	r4, #192	; 0xc0
    1ce4:	05e4      	lsls	r4, r4, #23
    1ce6:	2580      	movs	r5, #128	; 0x80
    1ce8:	04ad      	lsls	r5, r5, #18
    1cea:	61a5      	str	r5, [r4, #24]
	delay_ms(soundTime);
    1cec:	f7fe fa5c 	bl	1a8 <delay_ms>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1cf0:	6165      	str	r5, [r4, #20]
}
    1cf2:	bd70      	pop	{r4, r5, r6, pc}

00001cf4 <my_usart_cb>:
void my_usart_cb(const struct usart_async_descriptor *const io_descr) {
    1cf4:	b500      	push	{lr}
    1cf6:	b083      	sub	sp, #12
	buzer(10);
    1cf8:	200a      	movs	r0, #10
    1cfa:	f7ff fff1 	bl	1ce0 <buzer>
	if (io_read(&DEBUG_SERIAL, &data, 1) == 1) {
    1cfe:	2201      	movs	r2, #1
    1d00:	466b      	mov	r3, sp
    1d02:	1dd9      	adds	r1, r3, #7
    1d04:	480b      	ldr	r0, [pc, #44]	; (1d34 <my_usart_cb+0x40>)
    1d06:	f7fe fb77 	bl	3f8 <io_read>
    1d0a:	2801      	cmp	r0, #1
    1d0c:	d001      	beq.n	1d12 <my_usart_cb+0x1e>
}
    1d0e:	b003      	add	sp, #12
    1d10:	bd00      	pop	{pc}
		if (rx_index < RX_BUFFER_SIZE) {
    1d12:	4b09      	ldr	r3, [pc, #36]	; (1d38 <my_usart_cb+0x44>)
    1d14:	881b      	ldrh	r3, [r3, #0]
    1d16:	b29b      	uxth	r3, r3
    1d18:	2b7f      	cmp	r3, #127	; 0x7f
    1d1a:	d8f8      	bhi.n	1d0e <my_usart_cb+0x1a>
			rx_buffer[rx_index++] = data;
    1d1c:	4906      	ldr	r1, [pc, #24]	; (1d38 <my_usart_cb+0x44>)
    1d1e:	880b      	ldrh	r3, [r1, #0]
    1d20:	b29b      	uxth	r3, r3
    1d22:	1c5a      	adds	r2, r3, #1
    1d24:	b292      	uxth	r2, r2
    1d26:	800a      	strh	r2, [r1, #0]
    1d28:	466a      	mov	r2, sp
    1d2a:	79d1      	ldrb	r1, [r2, #7]
    1d2c:	4a03      	ldr	r2, [pc, #12]	; (1d3c <my_usart_cb+0x48>)
    1d2e:	54d1      	strb	r1, [r2, r3]
}
    1d30:	e7ed      	b.n	1d0e <my_usart_cb+0x1a>
    1d32:	46c0      	nop			; (mov r8, r8)
    1d34:	20000c3c 	.word	0x20000c3c
    1d38:	20000a96 	.word	0x20000a96
    1d3c:	20000b80 	.word	0x20000b80

00001d40 <gpio_init>:
void gpio_init(void){
    1d40:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d42:	46de      	mov	lr, fp
    1d44:	4657      	mov	r7, sl
    1d46:	464e      	mov	r6, r9
    1d48:	4645      	mov	r5, r8
    1d4a:	b5e0      	push	{r5, r6, r7, lr}
    1d4c:	22c0      	movs	r2, #192	; 0xc0
    1d4e:	05d2      	lsls	r2, r2, #23
    1d50:	2380      	movs	r3, #128	; 0x80
    1d52:	039b      	lsls	r3, r3, #14
    1d54:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d56:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d58:	4b90      	ldr	r3, [pc, #576]	; (1f9c <gpio_init+0x25c>)
    1d5a:	2180      	movs	r1, #128	; 0x80
    1d5c:	05c9      	lsls	r1, r1, #23
    1d5e:	6299      	str	r1, [r3, #40]	; 0x28
    1d60:	498f      	ldr	r1, [pc, #572]	; (1fa0 <gpio_init+0x260>)
    1d62:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d64:	2455      	movs	r4, #85	; 0x55
    1d66:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d68:	2101      	movs	r1, #1
    1d6a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d6c:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1d6e:	2080      	movs	r0, #128	; 0x80
    1d70:	0280      	lsls	r0, r0, #10
    1d72:	343f      	adds	r4, #63	; 0x3f
    1d74:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d76:	3c0c      	subs	r4, #12
    1d78:	5110      	str	r0, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d7a:	20a8      	movs	r0, #168	; 0xa8
    1d7c:	2480      	movs	r4, #128	; 0x80
    1d7e:	05e4      	lsls	r4, r4, #23
    1d80:	501c      	str	r4, [r3, r0]
    1d82:	4c88      	ldr	r4, [pc, #544]	; (1fa4 <gpio_init+0x264>)
    1d84:	501c      	str	r4, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d86:	25d1      	movs	r5, #209	; 0xd1
    1d88:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d8a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d8c:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1d8e:	2480      	movs	r4, #128	; 0x80
    1d90:	46a1      	mov	r9, r4
    1d92:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1d94:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d96:	4c84      	ldr	r4, [pc, #528]	; (1fa8 <gpio_init+0x268>)
    1d98:	629c      	str	r4, [r3, #40]	; 0x28
    1d9a:	27c0      	movs	r7, #192	; 0xc0
    1d9c:	063f      	lsls	r7, r7, #24
    1d9e:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1da0:	3d8a      	subs	r5, #138	; 0x8a
    1da2:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1da4:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1da6:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1da8:	2480      	movs	r4, #128	; 0x80
    1daa:	0064      	lsls	r4, r4, #1
    1dac:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1dae:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1db0:	4c7e      	ldr	r4, [pc, #504]	; (1fac <gpio_init+0x26c>)
    1db2:	629c      	str	r4, [r3, #40]	; 0x28
    1db4:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1db6:	3501      	adds	r5, #1
    1db8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1dba:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1dbc:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dbe:	2480      	movs	r4, #128	; 0x80
    1dc0:	00a4      	lsls	r4, r4, #2
    1dc2:	46a4      	mov	ip, r4
    1dc4:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1dc6:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1dc8:	4c79      	ldr	r4, [pc, #484]	; (1fb0 <gpio_init+0x270>)
    1dca:	629c      	str	r4, [r3, #40]	; 0x28
    1dcc:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1dce:	3501      	adds	r5, #1
    1dd0:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1dd2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1dd4:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1dd6:	2480      	movs	r4, #128	; 0x80
    1dd8:	00e4      	lsls	r4, r4, #3
    1dda:	46a2      	mov	sl, r4
    1ddc:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1dde:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1de0:	4c74      	ldr	r4, [pc, #464]	; (1fb4 <gpio_init+0x274>)
    1de2:	629c      	str	r4, [r3, #40]	; 0x28
    1de4:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1de6:	3501      	adds	r5, #1
    1de8:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1dea:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1dec:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1dee:	2480      	movs	r4, #128	; 0x80
    1df0:	0124      	lsls	r4, r4, #4
    1df2:	6054      	str	r4, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1df4:	4c70      	ldr	r4, [pc, #448]	; (1fb8 <gpio_init+0x278>)
    1df6:	629c      	str	r4, [r3, #40]	; 0x28
    1df8:	4c70      	ldr	r4, [pc, #448]	; (1fbc <gpio_init+0x27c>)
    1dfa:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1dfc:	244b      	movs	r4, #75	; 0x4b
    1dfe:	46a0      	mov	r8, r4
    1e00:	5d1c      	ldrb	r4, [r3, r4]
    1e02:	46a3      	mov	fp, r4
    1e04:	2404      	movs	r4, #4
    1e06:	465d      	mov	r5, fp
    1e08:	43a5      	bics	r5, r4
    1e0a:	46ab      	mov	fp, r5
    1e0c:	4645      	mov	r5, r8
    1e0e:	465e      	mov	r6, fp
    1e10:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e12:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e14:	438d      	bics	r5, r1
    1e16:	46ab      	mov	fp, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e18:	4645      	mov	r5, r8
    1e1a:	465e      	mov	r6, fp
    1e1c:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e1e:	2580      	movs	r5, #128	; 0x80
    1e20:	022d      	lsls	r5, r5, #8
    1e22:	6195      	str	r5, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e24:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e26:	4d66      	ldr	r5, [pc, #408]	; (1fc0 <gpio_init+0x280>)
    1e28:	629d      	str	r5, [r3, #40]	; 0x28
    1e2a:	629f      	str	r7, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e2c:	254f      	movs	r5, #79	; 0x4f
    1e2e:	46ab      	mov	fp, r5
    1e30:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e32:	438d      	bics	r5, r1
    1e34:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e36:	465d      	mov	r5, fp
    1e38:	4646      	mov	r6, r8
    1e3a:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1e3c:	2580      	movs	r5, #128	; 0x80
    1e3e:	042d      	lsls	r5, r5, #16
    1e40:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e42:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e44:	2580      	movs	r5, #128	; 0x80
    1e46:	05ed      	lsls	r5, r5, #23
    1e48:	629d      	str	r5, [r3, #40]	; 0x28
    1e4a:	4d5e      	ldr	r5, [pc, #376]	; (1fc4 <gpio_init+0x284>)
    1e4c:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e4e:	2557      	movs	r5, #87	; 0x57
    1e50:	46ab      	mov	fp, r5
    1e52:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e54:	438d      	bics	r5, r1
    1e56:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e58:	465d      	mov	r5, fp
    1e5a:	4646      	mov	r6, r8
    1e5c:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1e5e:	3541      	adds	r5, #65	; 0x41
    1e60:	4666      	mov	r6, ip
    1e62:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1e64:	3d10      	subs	r5, #16
    1e66:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e68:	4d51      	ldr	r5, [pc, #324]	; (1fb0 <gpio_init+0x270>)
    1e6a:	501d      	str	r5, [r3, r0]
    1e6c:	501f      	str	r7, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e6e:	25c9      	movs	r5, #201	; 0xc9
    1e70:	5d5f      	ldrb	r7, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e72:	438f      	bics	r7, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e74:	555f      	strb	r7, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1e76:	2784      	movs	r7, #132	; 0x84
    1e78:	4655      	mov	r5, sl
    1e7a:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1e7c:	4d52      	ldr	r5, [pc, #328]	; (1fc8 <gpio_init+0x288>)
    1e7e:	501d      	str	r5, [r3, r0]
    1e80:	4d4e      	ldr	r5, [pc, #312]	; (1fbc <gpio_init+0x27c>)
    1e82:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1e84:	25ca      	movs	r5, #202	; 0xca
    1e86:	46ac      	mov	ip, r5
    1e88:	5d5d      	ldrb	r5, [r3, r5]
    1e8a:	43a5      	bics	r5, r4
    1e8c:	46a8      	mov	r8, r5
    1e8e:	4665      	mov	r5, ip
    1e90:	4646      	mov	r6, r8
    1e92:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e94:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e96:	438d      	bics	r5, r1
    1e98:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e9a:	4665      	mov	r5, ip
    1e9c:	4646      	mov	r6, r8
    1e9e:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ea0:	2580      	movs	r5, #128	; 0x80
    1ea2:	012d      	lsls	r5, r5, #4
    1ea4:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ea6:	4d44      	ldr	r5, [pc, #272]	; (1fb8 <gpio_init+0x278>)
    1ea8:	501d      	str	r5, [r3, r0]
    1eaa:	4d44      	ldr	r5, [pc, #272]	; (1fbc <gpio_init+0x27c>)
    1eac:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1eae:	25cb      	movs	r5, #203	; 0xcb
    1eb0:	46ac      	mov	ip, r5
    1eb2:	5d5d      	ldrb	r5, [r3, r5]
    1eb4:	43a5      	bics	r5, r4
    1eb6:	46a8      	mov	r8, r5
    1eb8:	4665      	mov	r5, ip
    1eba:	4646      	mov	r6, r8
    1ebc:	555e      	strb	r6, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ebe:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ec0:	438d      	bics	r5, r1
    1ec2:	46a8      	mov	r8, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ec4:	4665      	mov	r5, ip
    1ec6:	4646      	mov	r6, r8
    1ec8:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1eca:	2580      	movs	r5, #128	; 0x80
    1ecc:	03ed      	lsls	r5, r5, #15
    1ece:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ed0:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ed2:	2580      	movs	r5, #128	; 0x80
    1ed4:	05ed      	lsls	r5, r5, #23
    1ed6:	629d      	str	r5, [r3, #40]	; 0x28
    1ed8:	4d3c      	ldr	r5, [pc, #240]	; (1fcc <gpio_init+0x28c>)
    1eda:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1edc:	2556      	movs	r5, #86	; 0x56
    1ede:	46a8      	mov	r8, r5
    1ee0:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ee2:	438d      	bics	r5, r1
    1ee4:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ee6:	4645      	mov	r5, r8
    1ee8:	4666      	mov	r6, ip
    1eea:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1eec:	2580      	movs	r5, #128	; 0x80
    1eee:	046d      	lsls	r5, r5, #17
    1ef0:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ef2:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ef4:	2580      	movs	r5, #128	; 0x80
    1ef6:	05ed      	lsls	r5, r5, #23
    1ef8:	629d      	str	r5, [r3, #40]	; 0x28
    1efa:	4d35      	ldr	r5, [pc, #212]	; (1fd0 <gpio_init+0x290>)
    1efc:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1efe:	2558      	movs	r5, #88	; 0x58
    1f00:	46a8      	mov	r8, r5
    1f02:	5d5d      	ldrb	r5, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f04:	438d      	bics	r5, r1
    1f06:	46ac      	mov	ip, r5
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f08:	4645      	mov	r5, r8
    1f0a:	4666      	mov	r6, ip
    1f0c:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1f0e:	2580      	movs	r5, #128	; 0x80
    1f10:	04ad      	lsls	r5, r5, #18
    1f12:	6155      	str	r5, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1f14:	6095      	str	r5, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f16:	2580      	movs	r5, #128	; 0x80
    1f18:	05ed      	lsls	r5, r5, #23
    1f1a:	629d      	str	r5, [r3, #40]	; 0x28
    1f1c:	4e2d      	ldr	r6, [pc, #180]	; (1fd4 <gpio_init+0x294>)
    1f1e:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f20:	2559      	movs	r5, #89	; 0x59
    1f22:	5d5e      	ldrb	r6, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f24:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f26:	555e      	strb	r6, [r3, r5]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f28:	2640      	movs	r6, #64	; 0x40
    1f2a:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f2c:	4e2a      	ldr	r6, [pc, #168]	; (1fd8 <gpio_init+0x298>)
    1f2e:	501e      	str	r6, [r3, r0]
    1f30:	4d22      	ldr	r5, [pc, #136]	; (1fbc <gpio_init+0x27c>)
    1f32:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f34:	26c6      	movs	r6, #198	; 0xc6
    1f36:	5d9d      	ldrb	r5, [r3, r6]
    1f38:	43a5      	bics	r5, r4
    1f3a:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f3c:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f3e:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f40:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f42:	3ea6      	subs	r6, #166	; 0xa6
    1f44:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f46:	4e25      	ldr	r6, [pc, #148]	; (1fdc <gpio_init+0x29c>)
    1f48:	501e      	str	r6, [r3, r0]
    1f4a:	4d1c      	ldr	r5, [pc, #112]	; (1fbc <gpio_init+0x27c>)
    1f4c:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f4e:	26c5      	movs	r6, #197	; 0xc5
    1f50:	5d9d      	ldrb	r5, [r3, r6]
    1f52:	43a5      	bics	r5, r4
    1f54:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f56:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f58:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f5a:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f5c:	3eb5      	subs	r6, #181	; 0xb5
    1f5e:	51d6      	str	r6, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f60:	4e1f      	ldr	r6, [pc, #124]	; (1fe0 <gpio_init+0x2a0>)
    1f62:	501e      	str	r6, [r3, r0]
    1f64:	4d15      	ldr	r5, [pc, #84]	; (1fbc <gpio_init+0x27c>)
    1f66:	501d      	str	r5, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f68:	26c4      	movs	r6, #196	; 0xc4
    1f6a:	5d9d      	ldrb	r5, [r3, r6]
    1f6c:	43a5      	bics	r5, r4
    1f6e:	559d      	strb	r5, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f70:	5d9d      	ldrb	r5, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f72:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f74:	559d      	strb	r5, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1f76:	464d      	mov	r5, r9
    1f78:	51d5      	str	r5, [r2, r7]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1f7a:	4a1a      	ldr	r2, [pc, #104]	; (1fe4 <gpio_init+0x2a4>)
    1f7c:	501a      	str	r2, [r3, r0]
    1f7e:	4a0f      	ldr	r2, [pc, #60]	; (1fbc <gpio_init+0x27c>)
    1f80:	501a      	str	r2, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1f82:	22c7      	movs	r2, #199	; 0xc7
    1f84:	5c98      	ldrb	r0, [r3, r2]
    1f86:	43a0      	bics	r0, r4
    1f88:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f8a:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f8c:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f8e:	5498      	strb	r0, [r3, r2]
}
    1f90:	bc3c      	pop	{r2, r3, r4, r5}
    1f92:	4690      	mov	r8, r2
    1f94:	4699      	mov	r9, r3
    1f96:	46a2      	mov	sl, r4
    1f98:	46ab      	mov	fp, r5
    1f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f9c:	41004400 	.word	0x41004400
    1fa0:	c0000020 	.word	0xc0000020
    1fa4:	c0000002 	.word	0xc0000002
    1fa8:	40000080 	.word	0x40000080
    1fac:	40000100 	.word	0x40000100
    1fb0:	40000200 	.word	0x40000200
    1fb4:	40000400 	.word	0x40000400
    1fb8:	40020800 	.word	0x40020800
    1fbc:	c0020000 	.word	0xc0020000
    1fc0:	40008000 	.word	0x40008000
    1fc4:	c0000080 	.word	0xc0000080
    1fc8:	40020400 	.word	0x40020400
    1fcc:	c0000040 	.word	0xc0000040
    1fd0:	c0000100 	.word	0xc0000100
    1fd4:	c0000200 	.word	0xc0000200
    1fd8:	40020040 	.word	0x40020040
    1fdc:	40020020 	.word	0x40020020
    1fe0:	40020010 	.word	0x40020010
    1fe4:	40020080 	.word	0x40020080

00001fe8 <EXT_IRG_init>:
void EXT_IRG_init(void){
    1fe8:	b510      	push	{r4, lr}
    1fea:	4a11      	ldr	r2, [pc, #68]	; (2030 <STACK_SIZE+0x30>)
    1fec:	4b11      	ldr	r3, [pc, #68]	; (2034 <STACK_SIZE+0x34>)
    1fee:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1ff0:	2180      	movs	r1, #128	; 0x80
    1ff2:	0049      	lsls	r1, r1, #1
    1ff4:	2384      	movs	r3, #132	; 0x84
    1ff6:	22c0      	movs	r2, #192	; 0xc0
    1ff8:	05d2      	lsls	r2, r2, #23
    1ffa:	50d1      	str	r1, [r2, r3]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ffc:	4b0e      	ldr	r3, [pc, #56]	; (2038 <STACK_SIZE+0x38>)
    1ffe:	22a8      	movs	r2, #168	; 0xa8
    2000:	490e      	ldr	r1, [pc, #56]	; (203c <STACK_SIZE+0x3c>)
    2002:	5099      	str	r1, [r3, r2]
    2004:	490e      	ldr	r1, [pc, #56]	; (2040 <STACK_SIZE+0x40>)
    2006:	5099      	str	r1, [r3, r2]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2008:	21c8      	movs	r1, #200	; 0xc8
    200a:	5c5a      	ldrb	r2, [r3, r1]
    200c:	2004      	movs	r0, #4
    200e:	4382      	bics	r2, r0
    2010:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2012:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2014:	3803      	subs	r0, #3
    2016:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2018:	4302      	orrs	r2, r0
    201a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    201c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    201e:	3914      	subs	r1, #20
    2020:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2022:	200f      	movs	r0, #15
    2024:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2026:	545a      	strb	r2, [r3, r1]
	ext_irq_init();
    2028:	f7fe f8ec 	bl	204 <ext_irq_init>
}
    202c:	bd10      	pop	{r4, pc}
    202e:	46c0      	nop			; (mov r8, r8)
    2030:	00004103 	.word	0x00004103
    2034:	40000c00 	.word	0x40000c00
    2038:	41004400 	.word	0x41004400
    203c:	40020100 	.word	0x40020100
    2040:	c0020000 	.word	0xc0020000

00002044 <ETH_SPI_init>:
void ETH_SPI_init(void){
    2044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2046:	46d6      	mov	lr, sl
    2048:	464f      	mov	r7, r9
    204a:	b580      	push	{r7, lr}
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
    204c:	4a3a      	ldr	r2, [pc, #232]	; (2138 <ETH_SPI_init+0xf4>)
    204e:	6a13      	ldr	r3, [r2, #32]
    2050:	2104      	movs	r1, #4
    2052:	4689      	mov	r9, r1
    2054:	430b      	orrs	r3, r1
    2056:	6213      	str	r3, [r2, #32]
    2058:	4a38      	ldr	r2, [pc, #224]	; (213c <ETH_SPI_init+0xf8>)
    205a:	4b39      	ldr	r3, [pc, #228]	; (2140 <ETH_SPI_init+0xfc>)
    205c:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    205e:	4939      	ldr	r1, [pc, #228]	; (2144 <ETH_SPI_init+0x100>)
    2060:	4839      	ldr	r0, [pc, #228]	; (2148 <ETH_SPI_init+0x104>)
    2062:	f7fe f9e3 	bl	42c <spi_m_sync_init>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2066:	25c0      	movs	r5, #192	; 0xc0
    2068:	05ed      	lsls	r5, r5, #23
    206a:	2310      	movs	r3, #16
    206c:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    206e:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2070:	4c36      	ldr	r4, [pc, #216]	; (214c <ETH_SPI_init+0x108>)
    2072:	4b37      	ldr	r3, [pc, #220]	; (2150 <ETH_SPI_init+0x10c>)
    2074:	62a3      	str	r3, [r4, #40]	; 0x28
    2076:	23c0      	movs	r3, #192	; 0xc0
    2078:	061b      	lsls	r3, r3, #24
    207a:	469a      	mov	sl, r3
    207c:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    207e:	2244      	movs	r2, #68	; 0x44
    2080:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2082:	2701      	movs	r7, #1
    2084:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2086:	2601      	movs	r6, #1
    2088:	4333      	orrs	r3, r6
    208a:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    208c:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    208e:	3a12      	subs	r2, #18
    2090:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2092:	200f      	movs	r0, #15
    2094:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    2096:	2103      	movs	r1, #3
    2098:	468c      	mov	ip, r1
    209a:	4661      	mov	r1, ip
    209c:	430b      	orrs	r3, r1
    209e:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20a0:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    20a2:	2320      	movs	r3, #32
    20a4:	616b      	str	r3, [r5, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    20a6:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20a8:	4b2a      	ldr	r3, [pc, #168]	; (2154 <ETH_SPI_init+0x110>)
    20aa:	62a3      	str	r3, [r4, #40]	; 0x28
    20ac:	4653      	mov	r3, sl
    20ae:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20b0:	2345      	movs	r3, #69	; 0x45
    20b2:	469a      	mov	sl, r3
    20b4:	5ce3      	ldrb	r3, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20b6:	43bb      	bics	r3, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20b8:	4333      	orrs	r3, r6
    20ba:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20bc:	4651      	mov	r1, sl
    20be:	5463      	strb	r3, [r4, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20c0:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    20c2:	3936      	subs	r1, #54	; 0x36
    20c4:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    20c6:	2130      	movs	r1, #48	; 0x30
    20c8:	468a      	mov	sl, r1
    20ca:	4651      	mov	r1, sl
    20cc:	430b      	orrs	r3, r1
    20ce:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20d0:	54a3      	strb	r3, [r4, r2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    20d2:	2340      	movs	r3, #64	; 0x40
    20d4:	606b      	str	r3, [r5, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    20d6:	4b20      	ldr	r3, [pc, #128]	; (2158 <ETH_SPI_init+0x114>)
    20d8:	62a3      	str	r3, [r4, #40]	; 0x28
    20da:	4b20      	ldr	r3, [pc, #128]	; (215c <ETH_SPI_init+0x118>)
    20dc:	62a3      	str	r3, [r4, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    20de:	2346      	movs	r3, #70	; 0x46
    20e0:	5ce2      	ldrb	r2, [r4, r3]
    20e2:	4649      	mov	r1, r9
    20e4:	438a      	bics	r2, r1
    20e6:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    20e8:	5ce2      	ldrb	r2, [r4, r3]
	tmp &= ~PORT_PINCFG_PMUXEN;
    20ea:	43ba      	bics	r2, r7
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    20ec:	4332      	orrs	r2, r6
    20ee:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    20f0:	54e2      	strb	r2, [r4, r3]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    20f2:	2233      	movs	r2, #51	; 0x33
    20f4:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    20f6:	4383      	bics	r3, r0
	tmp |= PORT_PMUX_PMUXE(data);
    20f8:	4661      	mov	r1, ip
    20fa:	430b      	orrs	r3, r1
    20fc:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    20fe:	54a3      	strb	r3, [r4, r2]
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    2100:	4910      	ldr	r1, [pc, #64]	; (2144 <ETH_SPI_init+0x100>)
    2102:	4811      	ldr	r0, [pc, #68]	; (2148 <ETH_SPI_init+0x104>)
    2104:	f7fe f992 	bl	42c <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&ETH_SPI, &eth_spi);
    2108:	4915      	ldr	r1, [pc, #84]	; (2160 <ETH_SPI_init+0x11c>)
    210a:	480f      	ldr	r0, [pc, #60]	; (2148 <ETH_SPI_init+0x104>)
    210c:	f7fe fa1a 	bl	544 <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&ETH_SPI);
    2110:	480d      	ldr	r0, [pc, #52]	; (2148 <ETH_SPI_init+0x104>)
    2112:	f7fe f9b3 	bl	47c <spi_m_sync_enable>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2116:	2380      	movs	r3, #128	; 0x80
    2118:	031b      	lsls	r3, r3, #12
    211a:	61ab      	str	r3, [r5, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    211c:	60ab      	str	r3, [r5, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    211e:	2380      	movs	r3, #128	; 0x80
    2120:	05db      	lsls	r3, r3, #23
    2122:	62a3      	str	r3, [r4, #40]	; 0x28
    2124:	4b0f      	ldr	r3, [pc, #60]	; (2164 <ETH_SPI_init+0x120>)
    2126:	62a3      	str	r3, [r4, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2128:	2253      	movs	r2, #83	; 0x53
    212a:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    212c:	43bb      	bics	r3, r7
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    212e:	54a3      	strb	r3, [r4, r2]
}
    2130:	bc0c      	pop	{r2, r3}
    2132:	4691      	mov	r9, r2
    2134:	469a      	mov	sl, r3
    2136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2138:	40000400 	.word	0x40000400
    213c:	0000400d 	.word	0x0000400d
    2140:	40000c00 	.word	0x40000c00
    2144:	42000800 	.word	0x42000800
    2148:	20000c1c 	.word	0x20000c1c
    214c:	41004400 	.word	0x41004400
    2150:	40000010 	.word	0x40000010
    2154:	40000020 	.word	0x40000020
    2158:	40020040 	.word	0x40020040
    215c:	c0020000 	.word	0xc0020000
    2160:	20000b7c 	.word	0x20000b7c
    2164:	c0000008 	.word	0xc0000008

00002168 <ETH_SPI_Select>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    2168:	2800      	cmp	r0, #0
    216a:	d104      	bne.n	2176 <ETH_SPI_Select+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    216c:	2280      	movs	r2, #128	; 0x80
    216e:	23c0      	movs	r3, #192	; 0xc0
    2170:	05db      	lsls	r3, r3, #23
    2172:	615a      	str	r2, [r3, #20]
}
    2174:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2176:	2280      	movs	r2, #128	; 0x80
    2178:	23c0      	movs	r3, #192	; 0xc0
    217a:	05db      	lsls	r3, r3, #23
    217c:	619a      	str	r2, [r3, #24]
    217e:	e7f9      	b.n	2174 <ETH_SPI_Select+0xc>

00002180 <W5500_Select>:
void W5500_Select(void){
    2180:	b510      	push	{r4, lr}
	ETH_SPI_Select(false);
    2182:	2000      	movs	r0, #0
    2184:	f7ff fff0 	bl	2168 <ETH_SPI_Select>
}
    2188:	bd10      	pop	{r4, pc}

0000218a <W5500_Unselect>:
void W5500_Unselect(void){
    218a:	b510      	push	{r4, lr}
	ETH_SPI_Select(true);
    218c:	2001      	movs	r0, #1
    218e:	f7ff ffeb 	bl	2168 <ETH_SPI_Select>
}
    2192:	bd10      	pop	{r4, pc}

00002194 <W5500_ReadBuff>:
void W5500_ReadBuff(uint8_t* buff, uint16_t len){
    2194:	b510      	push	{r4, lr}
    2196:	0003      	movs	r3, r0
    2198:	000a      	movs	r2, r1
	io_read(eth_spi,buff,len);
    219a:	4903      	ldr	r1, [pc, #12]	; (21a8 <W5500_ReadBuff+0x14>)
    219c:	6808      	ldr	r0, [r1, #0]
    219e:	0019      	movs	r1, r3
    21a0:	f7fe f92a 	bl	3f8 <io_read>
}
    21a4:	bd10      	pop	{r4, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	20000b7c 	.word	0x20000b7c

000021ac <W5500_WriteBuff>:
void W5500_WriteBuff(uint8_t* buff, uint16_t len){
    21ac:	b510      	push	{r4, lr}
    21ae:	0003      	movs	r3, r0
    21b0:	000a      	movs	r2, r1
	io_write(eth_spi,buff,len);
    21b2:	4903      	ldr	r1, [pc, #12]	; (21c0 <W5500_WriteBuff+0x14>)
    21b4:	6808      	ldr	r0, [r1, #0]
    21b6:	0019      	movs	r1, r3
    21b8:	f7fe f904 	bl	3c4 <io_write>
}
    21bc:	bd10      	pop	{r4, pc}
    21be:	46c0      	nop			; (mov r8, r8)
    21c0:	20000b7c 	.word	0x20000b7c

000021c4 <W5500_ReadByte>:
uint8_t W5500_ReadByte(void){
    21c4:	b510      	push	{r4, lr}
    21c6:	b082      	sub	sp, #8
	uint8_t data_byte = 0;
    21c8:	466b      	mov	r3, sp
    21ca:	1ddc      	adds	r4, r3, #7
    21cc:	2300      	movs	r3, #0
    21ce:	7023      	strb	r3, [r4, #0]
	io_read(eth_spi,&data_byte,1);
    21d0:	4b04      	ldr	r3, [pc, #16]	; (21e4 <W5500_ReadByte+0x20>)
    21d2:	6818      	ldr	r0, [r3, #0]
    21d4:	2201      	movs	r2, #1
    21d6:	0021      	movs	r1, r4
    21d8:	f7fe f90e 	bl	3f8 <io_read>
	return data_byte;
    21dc:	7820      	ldrb	r0, [r4, #0]
}
    21de:	b002      	add	sp, #8
    21e0:	bd10      	pop	{r4, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	20000b7c 	.word	0x20000b7c

000021e8 <W5500_Write_byte>:
void W5500_Write_byte(uint8_t byte){
    21e8:	b500      	push	{lr}
    21ea:	b083      	sub	sp, #12
    21ec:	466b      	mov	r3, sp
    21ee:	1dd9      	adds	r1, r3, #7
    21f0:	7008      	strb	r0, [r1, #0]
	io_write(eth_spi, &byte, 1);
    21f2:	4b03      	ldr	r3, [pc, #12]	; (2200 <W5500_Write_byte+0x18>)
    21f4:	6818      	ldr	r0, [r3, #0]
    21f6:	2201      	movs	r2, #1
    21f8:	f7fe f8e4 	bl	3c4 <io_write>
}
    21fc:	b003      	add	sp, #12
    21fe:	bd00      	pop	{pc}
    2200:	20000b7c 	.word	0x20000b7c

00002204 <EXT_SPI_init>:
void EXT_SPI_init(void){
    2204:	b5f0      	push	{r4, r5, r6, r7, lr}
    2206:	46ce      	mov	lr, r9
    2208:	b500      	push	{lr}
    220a:	4a35      	ldr	r2, [pc, #212]	; (22e0 <EXT_SPI_init+0xdc>)
    220c:	6a13      	ldr	r3, [r2, #32]
    220e:	2120      	movs	r1, #32
    2210:	430b      	orrs	r3, r1
    2212:	6213      	str	r3, [r2, #32]
    2214:	4a33      	ldr	r2, [pc, #204]	; (22e4 <EXT_SPI_init+0xe0>)
    2216:	4b34      	ldr	r3, [pc, #208]	; (22e8 <EXT_SPI_init+0xe4>)
    2218:	805a      	strh	r2, [r3, #2]
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    221a:	4934      	ldr	r1, [pc, #208]	; (22ec <EXT_SPI_init+0xe8>)
    221c:	4834      	ldr	r0, [pc, #208]	; (22f0 <EXT_SPI_init+0xec>)
    221e:	f7fe f905 	bl	42c <spi_m_sync_init>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2222:	22c0      	movs	r2, #192	; 0xc0
    2224:	05d2      	lsls	r2, r2, #23
    2226:	2380      	movs	r3, #128	; 0x80
    2228:	025b      	lsls	r3, r3, #9
    222a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    222c:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    222e:	4b31      	ldr	r3, [pc, #196]	; (22f4 <EXT_SPI_init+0xf0>)
    2230:	2180      	movs	r1, #128	; 0x80
    2232:	05c9      	lsls	r1, r1, #23
    2234:	4689      	mov	r9, r1
    2236:	6299      	str	r1, [r3, #40]	; 0x28
    2238:	492f      	ldr	r1, [pc, #188]	; (22f8 <EXT_SPI_init+0xf4>)
    223a:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    223c:	2050      	movs	r0, #80	; 0x50
    223e:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2240:	2401      	movs	r4, #1
    2242:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2244:	2501      	movs	r5, #1
    2246:	4329      	orrs	r1, r5
    2248:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    224a:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    224c:	2138      	movs	r1, #56	; 0x38
    224e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2250:	270f      	movs	r7, #15
    2252:	43b8      	bics	r0, r7
	tmp |= PORT_PMUX_PMUXE(data);
    2254:	2603      	movs	r6, #3
    2256:	46b4      	mov	ip, r6
    2258:	4666      	mov	r6, ip
    225a:	4330      	orrs	r0, r6
    225c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    225e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    2260:	2080      	movs	r0, #128	; 0x80
    2262:	0280      	lsls	r0, r0, #10
    2264:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    2266:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2268:	4648      	mov	r0, r9
    226a:	6298      	str	r0, [r3, #40]	; 0x28
    226c:	4823      	ldr	r0, [pc, #140]	; (22fc <EXT_SPI_init+0xf8>)
    226e:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2270:	2051      	movs	r0, #81	; 0x51
    2272:	4681      	mov	r9, r0
    2274:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2276:	43a0      	bics	r0, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2278:	4328      	orrs	r0, r5
    227a:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    227c:	464e      	mov	r6, r9
    227e:	5598      	strb	r0, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2280:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    2282:	3e42      	subs	r6, #66	; 0x42
    2284:	4030      	ands	r0, r6
	tmp |= PORT_PMUX_PMUXO(data);
    2286:	2630      	movs	r6, #48	; 0x30
    2288:	46b1      	mov	r9, r6
    228a:	464e      	mov	r6, r9
    228c:	4330      	orrs	r0, r6
    228e:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2290:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    2292:	2180      	movs	r1, #128	; 0x80
    2294:	02c9      	lsls	r1, r1, #11
    2296:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    2298:	4a19      	ldr	r2, [pc, #100]	; (2300 <EXT_SPI_init+0xfc>)
    229a:	629a      	str	r2, [r3, #40]	; 0x28
    229c:	4a19      	ldr	r2, [pc, #100]	; (2304 <EXT_SPI_init+0x100>)
    229e:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    22a0:	2252      	movs	r2, #82	; 0x52
    22a2:	5c99      	ldrb	r1, [r3, r2]
    22a4:	2004      	movs	r0, #4
    22a6:	4381      	bics	r1, r0
    22a8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    22aa:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    22ac:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    22ae:	4329      	orrs	r1, r5
    22b0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    22b2:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    22b4:	2139      	movs	r1, #57	; 0x39
    22b6:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    22b8:	43ba      	bics	r2, r7
	tmp |= PORT_PMUX_PMUXE(data);
    22ba:	4660      	mov	r0, ip
    22bc:	4302      	orrs	r2, r0
    22be:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    22c0:	545a      	strb	r2, [r3, r1]
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    22c2:	490a      	ldr	r1, [pc, #40]	; (22ec <EXT_SPI_init+0xe8>)
    22c4:	480a      	ldr	r0, [pc, #40]	; (22f0 <EXT_SPI_init+0xec>)
    22c6:	f7fe f8b1 	bl	42c <spi_m_sync_init>
	spi_m_sync_get_io_descriptor(&EXT_SPI, &ext_spi);
    22ca:	490f      	ldr	r1, [pc, #60]	; (2308 <EXT_SPI_init+0x104>)
    22cc:	4808      	ldr	r0, [pc, #32]	; (22f0 <EXT_SPI_init+0xec>)
    22ce:	f7fe f939 	bl	544 <spi_m_sync_get_io_descriptor>
	spi_m_sync_enable(&EXT_SPI);
    22d2:	4807      	ldr	r0, [pc, #28]	; (22f0 <EXT_SPI_init+0xec>)
    22d4:	f7fe f8d2 	bl	47c <spi_m_sync_enable>
}
    22d8:	bc04      	pop	{r2}
    22da:	4691      	mov	r9, r2
    22dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22de:	46c0      	nop			; (mov r8, r8)
    22e0:	40000400 	.word	0x40000400
    22e4:	00004010 	.word	0x00004010
    22e8:	40000c00 	.word	0x40000c00
    22ec:	42001400 	.word	0x42001400
    22f0:	20000c04 	.word	0x20000c04
    22f4:	41004400 	.word	0x41004400
    22f8:	c0000001 	.word	0xc0000001
    22fc:	c0000002 	.word	0xc0000002
    2300:	40020000 	.word	0x40020000
    2304:	c0020004 	.word	0xc0020004
    2308:	20000c00 	.word	0x20000c00

0000230c <EXT_SPI_ReadBuff>:
void EXT_SPI_ReadBuff(uint8_t* buff, uint16_t len){
    230c:	b510      	push	{r4, lr}
    230e:	0003      	movs	r3, r0
    2310:	000a      	movs	r2, r1
	io_read(ext_spi,buff,len);
    2312:	4903      	ldr	r1, [pc, #12]	; (2320 <EXT_SPI_ReadBuff+0x14>)
    2314:	6808      	ldr	r0, [r1, #0]
    2316:	0019      	movs	r1, r3
    2318:	f7fe f86e 	bl	3f8 <io_read>
}
    231c:	bd10      	pop	{r4, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	20000c00 	.word	0x20000c00

00002324 <EXT_SPI_WriteBuff>:
void EXT_SPI_WriteBuff(uint8_t* buff, uint16_t len){
    2324:	b510      	push	{r4, lr}
    2326:	0003      	movs	r3, r0
    2328:	000a      	movs	r2, r1
	io_write(ext_spi,buff,len);
    232a:	4903      	ldr	r1, [pc, #12]	; (2338 <EXT_SPI_WriteBuff+0x14>)
    232c:	6808      	ldr	r0, [r1, #0]
    232e:	0019      	movs	r1, r3
    2330:	f7fe f848 	bl	3c4 <io_write>
}
    2334:	bd10      	pop	{r4, pc}
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	20000c00 	.word	0x20000c00

0000233c <EXT_I2C_init>:
void EXT_I2C_init(void){
    233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    233e:	4a1e      	ldr	r2, [pc, #120]	; (23b8 <EXT_I2C_init+0x7c>)
    2340:	6a13      	ldr	r3, [r2, #32]
    2342:	2110      	movs	r1, #16
    2344:	430b      	orrs	r3, r1
    2346:	6213      	str	r3, [r2, #32]
    2348:	4b1c      	ldr	r3, [pc, #112]	; (23bc <EXT_I2C_init+0x80>)
    234a:	4a1d      	ldr	r2, [pc, #116]	; (23c0 <EXT_I2C_init+0x84>)
    234c:	805a      	strh	r2, [r3, #2]
    234e:	4a1d      	ldr	r2, [pc, #116]	; (23c4 <EXT_I2C_init+0x88>)
    2350:	805a      	strh	r2, [r3, #2]
	i2c_m_sync_init(&EXT_I2C, SERCOM2);
    2352:	4c1d      	ldr	r4, [pc, #116]	; (23c8 <EXT_I2C_init+0x8c>)
    2354:	491d      	ldr	r1, [pc, #116]	; (23cc <EXT_I2C_init+0x90>)
    2356:	0020      	movs	r0, r4
    2358:	f7fe f806 	bl	368 <i2c_m_sync_init>
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    235c:	4b1c      	ldr	r3, [pc, #112]	; (23d0 <EXT_I2C_init+0x94>)
    235e:	204c      	movs	r0, #76	; 0x4c
    2360:	5c19      	ldrb	r1, [r3, r0]
    2362:	2204      	movs	r2, #4
    2364:	4391      	bics	r1, r2
    2366:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2368:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    236a:	2601      	movs	r6, #1
    236c:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    236e:	2501      	movs	r5, #1
    2370:	4329      	orrs	r1, r5
    2372:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2374:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2376:	3816      	subs	r0, #22
    2378:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    237a:	270f      	movs	r7, #15
    237c:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    237e:	2702      	movs	r7, #2
    2380:	4339      	orrs	r1, r7
    2382:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2384:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    2386:	214d      	movs	r1, #77	; 0x4d
    2388:	5c5f      	ldrb	r7, [r3, r1]
    238a:	4397      	bics	r7, r2
    238c:	545f      	strb	r7, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    238e:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2390:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    2392:	432a      	orrs	r2, r5
    2394:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2396:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2398:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    239a:	393e      	subs	r1, #62	; 0x3e
    239c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    239e:	2120      	movs	r1, #32
    23a0:	430a      	orrs	r2, r1
    23a2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    23a4:	541a      	strb	r2, [r3, r0]
	i2c_m_sync_get_io_descriptor(&EXT_I2C, &ext_i2c);
    23a6:	490b      	ldr	r1, [pc, #44]	; (23d4 <EXT_I2C_init+0x98>)
    23a8:	0020      	movs	r0, r4
    23aa:	f7fe f806 	bl	3ba <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&EXT_I2C);
    23ae:	0020      	movs	r0, r4
    23b0:	f7fd fff6 	bl	3a0 <i2c_m_sync_enable>
}
    23b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    23b6:	46c0      	nop			; (mov r8, r8)
    23b8:	40000400 	.word	0x40000400
    23bc:	40000c00 	.word	0x40000c00
    23c0:	0000400f 	.word	0x0000400f
    23c4:	0000430c 	.word	0x0000430c
    23c8:	20000ca8 	.word	0x20000ca8
    23cc:	42001000 	.word	0x42001000
    23d0:	41004400 	.word	0x41004400
    23d4:	20000c38 	.word	0x20000c38

000023d8 <I2C_write_batch>:
bool I2C_write_batch(uint8_t addres, uint8_t *data, uint8_t data_len){
    23d8:	b570      	push	{r4, r5, r6, lr}
    23da:	000d      	movs	r5, r1
    23dc:	0014      	movs	r4, r2
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
    23de:	b201      	sxth	r1, r0
    23e0:	2280      	movs	r2, #128	; 0x80
    23e2:	0112      	lsls	r2, r2, #4
    23e4:	4805      	ldr	r0, [pc, #20]	; (23fc <I2C_write_batch+0x24>)
    23e6:	f7fd ffdf 	bl	3a8 <i2c_m_sync_set_slaveaddr>
	return (io_write(ext_i2c, (uint8_t *)data, data_len) >= 0) ? true : false;
    23ea:	b2a2      	uxth	r2, r4
    23ec:	4b04      	ldr	r3, [pc, #16]	; (2400 <I2C_write_batch+0x28>)
    23ee:	6818      	ldr	r0, [r3, #0]
    23f0:	0029      	movs	r1, r5
    23f2:	f7fd ffe7 	bl	3c4 <io_write>
    23f6:	43c0      	mvns	r0, r0
    23f8:	0fc0      	lsrs	r0, r0, #31
}
    23fa:	bd70      	pop	{r4, r5, r6, pc}
    23fc:	20000ca8 	.word	0x20000ca8
    2400:	20000c38 	.word	0x20000c38

00002404 <DEBUG_Serial_init>:
void DEBUG_Serial_init(void) {
    2404:	b5f0      	push	{r4, r5, r6, r7, lr}
    2406:	b083      	sub	sp, #12
    2408:	4a26      	ldr	r2, [pc, #152]	; (24a4 <DEBUG_Serial_init+0xa0>)
    240a:	6a13      	ldr	r3, [r2, #32]
    240c:	2140      	movs	r1, #64	; 0x40
    240e:	430b      	orrs	r3, r1
    2410:	6213      	str	r3, [r2, #32]
    2412:	4a25      	ldr	r2, [pc, #148]	; (24a8 <DEBUG_Serial_init+0xa4>)
    2414:	4b25      	ldr	r3, [pc, #148]	; (24ac <DEBUG_Serial_init+0xa8>)
    2416:	805a      	strh	r2, [r3, #2]
	usart_async_init(&DEBUG_SERIAL, SERCOM4, rx_buffer, RX_BUFFER_SIZE, NULL);
    2418:	4c25      	ldr	r4, [pc, #148]	; (24b0 <DEBUG_Serial_init+0xac>)
    241a:	2300      	movs	r3, #0
    241c:	9300      	str	r3, [sp, #0]
    241e:	3380      	adds	r3, #128	; 0x80
    2420:	4a24      	ldr	r2, [pc, #144]	; (24b4 <DEBUG_Serial_init+0xb0>)
    2422:	4925      	ldr	r1, [pc, #148]	; (24b8 <DEBUG_Serial_init+0xb4>)
    2424:	0020      	movs	r0, r4
    2426:	f7fe fa19 	bl	85c <usart_async_init>
	usart_async_set_baud_rate(&DEBUG_SERIAL, 500000);
    242a:	4924      	ldr	r1, [pc, #144]	; (24bc <DEBUG_Serial_init+0xb8>)
    242c:	0020      	movs	r0, r4
    242e:	f7fe fabd 	bl	9ac <usart_async_set_baud_rate>
	usart_async_set_parity(&DEBUG_SERIAL, USART_PARITY_NONE);
    2432:	2102      	movs	r1, #2
    2434:	0020      	movs	r0, r4
    2436:	f7fe facd 	bl	9d4 <usart_async_set_parity>
	usart_async_set_stopbits(&DEBUG_SERIAL, USART_STOP_BITS_ONE);
    243a:	2100      	movs	r1, #0
    243c:	0020      	movs	r0, r4
    243e:	f7fe fadd 	bl	9fc <usart_async_set_stopbits>
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2442:	4b1f      	ldr	r3, [pc, #124]	; (24c0 <DEBUG_Serial_init+0xbc>)
    2444:	21cc      	movs	r1, #204	; 0xcc
    2446:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    2448:	2001      	movs	r0, #1
    244a:	4684      	mov	ip, r0
    244c:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    244e:	2701      	movs	r7, #1
    2450:	433a      	orrs	r2, r7
    2452:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2454:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2456:	22b6      	movs	r2, #182	; 0xb6
    2458:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    245a:	260f      	movs	r6, #15
    245c:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
    245e:	2502      	movs	r5, #2
    2460:	4328      	orrs	r0, r5
    2462:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    2464:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    2466:	3218      	adds	r2, #24
    2468:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    246a:	4660      	mov	r0, ip
    246c:	4381      	bics	r1, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    246e:	4339      	orrs	r1, r7
    2470:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    2472:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    2474:	21b7      	movs	r1, #183	; 0xb7
    2476:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    2478:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    247a:	432a      	orrs	r2, r5
    247c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    247e:	545a      	strb	r2, [r3, r1]
	usart_async_get_io_descriptor(&DEBUG_SERIAL, &debug_serial);
    2480:	4910      	ldr	r1, [pc, #64]	; (24c4 <DEBUG_Serial_init+0xc0>)
    2482:	0020      	movs	r0, r4
    2484:	f7fe fa44 	bl	910 <usart_async_get_io_descriptor>
	usart_async_register_callback(&DEBUG_SERIAL, USART_ASYNC_RXC_CB, my_usart_cb);
    2488:	4a0f      	ldr	r2, [pc, #60]	; (24c8 <DEBUG_Serial_init+0xc4>)
    248a:	2100      	movs	r1, #0
    248c:	0020      	movs	r0, r4
    248e:	f7fe fa55 	bl	93c <usart_async_register_callback>
    2492:	2280      	movs	r2, #128	; 0x80
    2494:	0112      	lsls	r2, r2, #4
    2496:	4b0d      	ldr	r3, [pc, #52]	; (24cc <DEBUG_Serial_init+0xc8>)
    2498:	601a      	str	r2, [r3, #0]
	usart_async_enable(&DEBUG_SERIAL);
    249a:	0020      	movs	r0, r4
    249c:	f7fe fa26 	bl	8ec <usart_async_enable>
}
    24a0:	b003      	add	sp, #12
    24a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24a4:	40000400 	.word	0x40000400
    24a8:	00004011 	.word	0x00004011
    24ac:	40000c00 	.word	0x40000c00
    24b0:	20000c3c 	.word	0x20000c3c
    24b4:	20000b80 	.word	0x20000b80
    24b8:	42001800 	.word	0x42001800
    24bc:	0007a120 	.word	0x0007a120
    24c0:	41004400 	.word	0x41004400
    24c4:	20000c34 	.word	0x20000c34
    24c8:	00001cf5 	.word	0x00001cf5
    24cc:	e000e100 	.word	0xe000e100

000024d0 <mcu_init>:
{
    24d0:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    24d2:	f7fe fb77 	bl	bc4 <_init_chip>
	gpio_init();
    24d6:	f7ff fc33 	bl	1d40 <gpio_init>
	ETH_SPI_init();
    24da:	f7ff fdb3 	bl	2044 <ETH_SPI_init>
	EXT_SPI_init();
    24de:	f7ff fe91 	bl	2204 <EXT_SPI_init>
	EXT_I2C_init();
    24e2:	f7ff ff2b 	bl	233c <EXT_I2C_init>
	DEBUG_Serial_init();
    24e6:	f7ff ff8d 	bl	2404 <DEBUG_Serial_init>
	ext_irq_register(ETH_INT, ETH_Handler);
    24ea:	4904      	ldr	r1, [pc, #16]	; (24fc <mcu_init+0x2c>)
    24ec:	2028      	movs	r0, #40	; 0x28
    24ee:	f7fd fea1 	bl	234 <ext_irq_register>
	TIMER_IRQ_init();
    24f2:	f7ff fbb7 	bl	1c64 <TIMER_IRQ_init>
	EXT_IRG_init();
    24f6:	f7ff fd77 	bl	1fe8 <EXT_IRG_init>
}
    24fa:	bd10      	pop	{r4, pc}
    24fc:	00001c4b 	.word	0x00001c4b

00002500 <GetIpSwitch>:
uint8_t GetIpSwitch(void){
    2500:	b5f0      	push	{r4, r5, r6, r7, lr}
    2502:	46de      	mov	lr, fp
    2504:	4657      	mov	r7, sl
    2506:	464e      	mov	r6, r9
    2508:	4645      	mov	r5, r8
    250a:	b5e0      	push	{r5, r6, r7, lr}
    250c:	b085      	sub	sp, #20
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    250e:	a803      	add	r0, sp, #12
    2510:	f7fd fe30 	bl	174 <atomic_enter_critical>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2514:	26c0      	movs	r6, #192	; 0xc0
    2516:	05f6      	lsls	r6, r6, #23
    2518:	2780      	movs	r7, #128	; 0x80
    251a:	59f4      	ldr	r4, [r6, r7]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    251c:	4b2f      	ldr	r3, [pc, #188]	; (25dc <GetIpSwitch+0xdc>)
    251e:	469a      	mov	sl, r3
    2520:	23a0      	movs	r3, #160	; 0xa0
    2522:	4699      	mov	r9, r3
    2524:	4653      	mov	r3, sl
    2526:	464a      	mov	r2, r9
    2528:	5898      	ldr	r0, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    252a:	2390      	movs	r3, #144	; 0x90
    252c:	4698      	mov	r8, r3
    252e:	58f3      	ldr	r3, [r6, r3]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2530:	4043      	eors	r3, r0
    2532:	401c      	ands	r4, r3
    2534:	4044      	eors	r4, r0

	CRITICAL_SECTION_LEAVE();
    2536:	a803      	add	r0, sp, #12
    2538:	f7fd fe23 	bl	182 <atomic_leave_critical>
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    253c:	2020      	movs	r0, #32
    253e:	4004      	ands	r4, r0
	res |= (gpio_get_pin_level(IP_B0) << 0);
    2540:	0023      	movs	r3, r4
    2542:	1e5c      	subs	r4, r3, #1
    2544:	41a3      	sbcs	r3, r4
    2546:	469b      	mov	fp, r3
	CRITICAL_SECTION_ENTER();
    2548:	a802      	add	r0, sp, #8
    254a:	f7fd fe13 	bl	174 <atomic_enter_critical>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    254e:	59f5      	ldr	r5, [r6, r7]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2550:	4653      	mov	r3, sl
    2552:	464a      	mov	r2, r9
    2554:	589b      	ldr	r3, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2556:	4642      	mov	r2, r8
    2558:	58b4      	ldr	r4, [r6, r2]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    255a:	405c      	eors	r4, r3
    255c:	4025      	ands	r5, r4
    255e:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    2560:	a802      	add	r0, sp, #8
    2562:	f7fd fe0e 	bl	182 <atomic_leave_critical>
    2566:	403d      	ands	r5, r7
    2568:	002c      	movs	r4, r5
    256a:	1e65      	subs	r5, r4, #1
    256c:	41ac      	sbcs	r4, r5
    256e:	b2e4      	uxtb	r4, r4
	res |= (gpio_get_pin_level(IP_B1) << 1);
    2570:	0064      	lsls	r4, r4, #1
    2572:	465b      	mov	r3, fp
    2574:	431c      	orrs	r4, r3
	CRITICAL_SECTION_ENTER();
    2576:	a801      	add	r0, sp, #4
    2578:	f7fd fdfc 	bl	174 <atomic_enter_critical>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    257c:	59f0      	ldr	r0, [r6, r7]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    257e:	4653      	mov	r3, sl
    2580:	464a      	mov	r2, r9
    2582:	589b      	ldr	r3, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2584:	4642      	mov	r2, r8
    2586:	58b5      	ldr	r5, [r6, r2]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2588:	405d      	eors	r5, r3
    258a:	4005      	ands	r5, r0
    258c:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    258e:	a801      	add	r0, sp, #4
    2590:	f7fd fdf7 	bl	182 <atomic_leave_critical>
    2594:	2040      	movs	r0, #64	; 0x40
    2596:	4028      	ands	r0, r5
    2598:	1e43      	subs	r3, r0, #1
    259a:	4198      	sbcs	r0, r3
    259c:	b2c0      	uxtb	r0, r0
	res |= (gpio_get_pin_level(IP_B2) << 2);
    259e:	0080      	lsls	r0, r0, #2
    25a0:	4304      	orrs	r4, r0
	CRITICAL_SECTION_ENTER();
    25a2:	4668      	mov	r0, sp
    25a4:	f7fd fde6 	bl	174 <atomic_enter_critical>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    25a8:	59f0      	ldr	r0, [r6, r7]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    25aa:	4653      	mov	r3, sl
    25ac:	464a      	mov	r2, r9
    25ae:	589b      	ldr	r3, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    25b0:	4642      	mov	r2, r8
    25b2:	58b5      	ldr	r5, [r6, r2]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    25b4:	405d      	eors	r5, r3
    25b6:	4005      	ands	r5, r0
    25b8:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    25ba:	4668      	mov	r0, sp
    25bc:	f7fd fde1 	bl	182 <atomic_leave_critical>
    25c0:	2010      	movs	r0, #16
    25c2:	4028      	ands	r0, r5
    25c4:	1e43      	subs	r3, r0, #1
    25c6:	4198      	sbcs	r0, r3
    25c8:	b2c0      	uxtb	r0, r0
	res |= (gpio_get_pin_level(IP_B3) << 3);
    25ca:	00c0      	lsls	r0, r0, #3
    25cc:	4320      	orrs	r0, r4
}
    25ce:	b005      	add	sp, #20
    25d0:	bc3c      	pop	{r2, r3, r4, r5}
    25d2:	4690      	mov	r8, r2
    25d4:	4699      	mov	r9, r3
    25d6:	46a2      	mov	sl, r4
    25d8:	46ab      	mov	fp, r5
    25da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25dc:	41004400 	.word	0x41004400

000025e0 <close>:
   while(getSn_SR(sn) == SOCK_CLOSED);
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
    25e0:	b570      	push	{r4, r5, r6, lr}
    25e2:	0006      	movs	r6, r0
	CHECK_SOCKNUM();
    25e4:	2808      	cmp	r0, #8
    25e6:	d82f      	bhi.n	2648 <close+0x68>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
    25e8:	0084      	lsls	r4, r0, #2
    25ea:	3401      	adds	r4, #1
    25ec:	00e4      	lsls	r4, r4, #3
    25ee:	1c65      	adds	r5, r4, #1
    25f0:	35ff      	adds	r5, #255	; 0xff
    25f2:	2110      	movs	r1, #16
    25f4:	0028      	movs	r0, r5
    25f6:	f000 fd6b 	bl	30d0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
    25fa:	0028      	movs	r0, r5
    25fc:	f000 fd36 	bl	306c <WIZCHIP_READ>
    2600:	2800      	cmp	r0, #0
    2602:	d1fa      	bne.n	25fa <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
    2604:	2380      	movs	r3, #128	; 0x80
    2606:	009b      	lsls	r3, r3, #2
    2608:	18e0      	adds	r0, r4, r3
    260a:	211f      	movs	r1, #31
    260c:	f000 fd60 	bl	30d0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
    2610:	2301      	movs	r3, #1
    2612:	40b3      	lsls	r3, r6
    2614:	43db      	mvns	r3, r3
    2616:	b21b      	sxth	r3, r3
    2618:	490d      	ldr	r1, [pc, #52]	; (2650 <close+0x70>)
    261a:	880a      	ldrh	r2, [r1, #0]
    261c:	401a      	ands	r2, r3
    261e:	800a      	strh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
    2620:	490c      	ldr	r1, [pc, #48]	; (2654 <close+0x74>)
    2622:	880a      	ldrh	r2, [r1, #0]
    2624:	4013      	ands	r3, r2
    2626:	800b      	strh	r3, [r1, #0]
	sock_remained_size[sn] = 0;
    2628:	0072      	lsls	r2, r6, #1
    262a:	2100      	movs	r1, #0
    262c:	4b0a      	ldr	r3, [pc, #40]	; (2658 <close+0x78>)
    262e:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
    2630:	4b0a      	ldr	r3, [pc, #40]	; (265c <close+0x7c>)
    2632:	2200      	movs	r2, #0
    2634:	559a      	strb	r2, [r3, r6]
	while(getSn_SR(sn) != SOCK_CLOSED);
    2636:	23c0      	movs	r3, #192	; 0xc0
    2638:	009b      	lsls	r3, r3, #2
    263a:	18e0      	adds	r0, r4, r3
    263c:	f000 fd16 	bl	306c <WIZCHIP_READ>
    2640:	2800      	cmp	r0, #0
    2642:	d1f8      	bne.n	2636 <close+0x56>
	return SOCK_OK;
    2644:	3001      	adds	r0, #1
}
    2646:	bd70      	pop	{r4, r5, r6, pc}
	CHECK_SOCKNUM();
    2648:	2001      	movs	r0, #1
    264a:	4240      	negs	r0, r0
    264c:	e7fb      	b.n	2646 <close+0x66>
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	20000a98 	.word	0x20000a98
    2654:	20000a9a 	.word	0x20000a9a
    2658:	20000aa4 	.word	0x20000aa4
    265c:	20000a9c 	.word	0x20000a9c

00002660 <socket>:
{
    2660:	b5f0      	push	{r4, r5, r6, r7, lr}
    2662:	46c6      	mov	lr, r8
    2664:	b500      	push	{lr}
    2666:	b084      	sub	sp, #16
    2668:	0005      	movs	r5, r0
    266a:	000e      	movs	r6, r1
    266c:	4690      	mov	r8, r2
    266e:	001f      	movs	r7, r3
	CHECK_SOCKNUM();
    2670:	2808      	cmp	r0, #8
    2672:	d900      	bls.n	2676 <socket+0x16>
    2674:	e092      	b.n	279c <socket+0x13c>
	switch(protocol)
    2676:	2901      	cmp	r1, #1
    2678:	d069      	beq.n	274e <socket+0xee>
    267a:	2900      	cmp	r1, #0
    267c:	d100      	bne.n	2680 <socket+0x20>
    267e:	e090      	b.n	27a2 <socket+0x142>
    2680:	2904      	cmp	r1, #4
    2682:	d900      	bls.n	2686 <socket+0x26>
    2684:	e08d      	b.n	27a2 <socket+0x142>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    2686:	077b      	lsls	r3, r7, #29
    2688:	d500      	bpl.n	268c <socket+0x2c>
    268a:	e08d      	b.n	27a8 <socket+0x148>
	if(flag != 0)
    268c:	2f00      	cmp	r7, #0
    268e:	d004      	beq.n	269a <socket+0x3a>
   	switch(protocol)
    2690:	2e01      	cmp	r6, #1
    2692:	d069      	beq.n	2768 <socket+0x108>
    2694:	2e02      	cmp	r6, #2
    2696:	d100      	bne.n	269a <socket+0x3a>
    2698:	e06d      	b.n	2776 <socket+0x116>
	close(sn);
    269a:	0028      	movs	r0, r5
    269c:	f7ff ffa0 	bl	25e0 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
    26a0:	00ac      	lsls	r4, r5, #2
    26a2:	3401      	adds	r4, #1
    26a4:	00e4      	lsls	r4, r4, #3
    26a6:	230f      	movs	r3, #15
    26a8:	0039      	movs	r1, r7
    26aa:	4399      	bics	r1, r3
    26ac:	b249      	sxtb	r1, r1
    26ae:	4331      	orrs	r1, r6
    26b0:	b2c9      	uxtb	r1, r1
    26b2:	0020      	movs	r0, r4
    26b4:	f000 fd0c 	bl	30d0 <WIZCHIP_WRITE>
	if(!port)
    26b8:	4643      	mov	r3, r8
    26ba:	2b00      	cmp	r3, #0
    26bc:	d108      	bne.n	26d0 <socket+0x70>
	   port = sock_any_port++;
    26be:	4a3d      	ldr	r2, [pc, #244]	; (27b4 <socket+0x154>)
    26c0:	8813      	ldrh	r3, [r2, #0]
    26c2:	4698      	mov	r8, r3
    26c4:	3301      	adds	r3, #1
    26c6:	b29b      	uxth	r3, r3
    26c8:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    26ca:	4a3b      	ldr	r2, [pc, #236]	; (27b8 <socket+0x158>)
    26cc:	4293      	cmp	r3, r2
    26ce:	d061      	beq.n	2794 <socket+0x134>
   setSn_PORT(sn,port);	
    26d0:	2380      	movs	r3, #128	; 0x80
    26d2:	00db      	lsls	r3, r3, #3
    26d4:	18e0      	adds	r0, r4, r3
    26d6:	4643      	mov	r3, r8
    26d8:	0a19      	lsrs	r1, r3, #8
    26da:	f000 fcf9 	bl	30d0 <WIZCHIP_WRITE>
    26de:	4643      	mov	r3, r8
    26e0:	466a      	mov	r2, sp
    26e2:	71d3      	strb	r3, [r2, #7]
    26e4:	79d1      	ldrb	r1, [r2, #7]
    26e6:	23a0      	movs	r3, #160	; 0xa0
    26e8:	00db      	lsls	r3, r3, #3
    26ea:	18e0      	adds	r0, r4, r3
    26ec:	f000 fcf0 	bl	30d0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
    26f0:	1c66      	adds	r6, r4, #1
    26f2:	36ff      	adds	r6, #255	; 0xff
    26f4:	2101      	movs	r1, #1
    26f6:	0030      	movs	r0, r6
    26f8:	f000 fcea 	bl	30d0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    26fc:	0030      	movs	r0, r6
    26fe:	f000 fcb5 	bl	306c <WIZCHIP_READ>
    2702:	2800      	cmp	r0, #0
    2704:	d1fa      	bne.n	26fc <socket+0x9c>
   sock_io_mode &= ~(1 <<sn);
    2706:	2201      	movs	r2, #1
    2708:	40aa      	lsls	r2, r5
    270a:	43d2      	mvns	r2, r2
    270c:	b212      	sxth	r2, r2
    270e:	482b      	ldr	r0, [pc, #172]	; (27bc <socket+0x15c>)
    2710:	8803      	ldrh	r3, [r0, #0]
    2712:	4013      	ands	r3, r2
    2714:	b21b      	sxth	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
    2716:	2101      	movs	r1, #1
    2718:	400f      	ands	r7, r1
    271a:	40af      	lsls	r7, r5
    271c:	433b      	orrs	r3, r7
    271e:	8003      	strh	r3, [r0, #0]
   sock_is_sending &= ~(1<<sn);
    2720:	4927      	ldr	r1, [pc, #156]	; (27c0 <socket+0x160>)
    2722:	880b      	ldrh	r3, [r1, #0]
    2724:	401a      	ands	r2, r3
    2726:	800a      	strh	r2, [r1, #0]
   sock_remained_size[sn] = 0;
    2728:	006b      	lsls	r3, r5, #1
    272a:	2100      	movs	r1, #0
    272c:	4a25      	ldr	r2, [pc, #148]	; (27c4 <socket+0x164>)
    272e:	5299      	strh	r1, [r3, r2]
   sock_pack_info[sn] = PACK_COMPLETED;
    2730:	4b25      	ldr	r3, [pc, #148]	; (27c8 <socket+0x168>)
    2732:	2200      	movs	r2, #0
    2734:	555a      	strb	r2, [r3, r5]
   while(getSn_SR(sn) == SOCK_CLOSED);
    2736:	23c0      	movs	r3, #192	; 0xc0
    2738:	009b      	lsls	r3, r3, #2
    273a:	18e0      	adds	r0, r4, r3
    273c:	f000 fc96 	bl	306c <WIZCHIP_READ>
    2740:	2800      	cmp	r0, #0
    2742:	d0f8      	beq.n	2736 <socket+0xd6>
   return (int8_t)sn;
    2744:	b268      	sxtb	r0, r5
}	   
    2746:	b004      	add	sp, #16
    2748:	bc04      	pop	{r2}
    274a:	4690      	mov	r8, r2
    274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            getSIPR((uint8_t*)&taddr);
    274e:	2204      	movs	r2, #4
    2750:	a903      	add	r1, sp, #12
    2752:	20f0      	movs	r0, #240	; 0xf0
    2754:	0100      	lsls	r0, r0, #4
    2756:	f000 fceb 	bl	3130 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
    275a:	9b03      	ldr	r3, [sp, #12]
    275c:	2b00      	cmp	r3, #0
    275e:	d000      	beq.n	2762 <socket+0x102>
    2760:	e791      	b.n	2686 <socket+0x26>
    2762:	2003      	movs	r0, #3
    2764:	4240      	negs	r0, r0
    2766:	e7ee      	b.n	2746 <socket+0xe6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
    2768:	2321      	movs	r3, #33	; 0x21
    276a:	423b      	tst	r3, r7
    276c:	d000      	beq.n	2770 <socket+0x110>
    276e:	e794      	b.n	269a <socket+0x3a>
    2770:	2006      	movs	r0, #6
    2772:	4240      	negs	r0, r0
    2774:	e7e7      	b.n	2746 <socket+0xe6>
   	      if(flag & SF_IGMP_VER2)
    2776:	06bb      	lsls	r3, r7, #26
    2778:	d502      	bpl.n	2780 <socket+0x120>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    277a:	b27b      	sxtb	r3, r7
    277c:	2b00      	cmp	r3, #0
    277e:	da16      	bge.n	27ae <socket+0x14e>
      	      if(flag & SF_UNI_BLOCK)
    2780:	06fb      	lsls	r3, r7, #27
    2782:	d400      	bmi.n	2786 <socket+0x126>
    2784:	e789      	b.n	269a <socket+0x3a>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
    2786:	b27b      	sxtb	r3, r7
    2788:	2b00      	cmp	r3, #0
    278a:	da00      	bge.n	278e <socket+0x12e>
    278c:	e785      	b.n	269a <socket+0x3a>
    278e:	2006      	movs	r0, #6
    2790:	4240      	negs	r0, r0
    2792:	e7d8      	b.n	2746 <socket+0xe6>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
    2794:	4a0d      	ldr	r2, [pc, #52]	; (27cc <socket+0x16c>)
    2796:	4b07      	ldr	r3, [pc, #28]	; (27b4 <socket+0x154>)
    2798:	801a      	strh	r2, [r3, #0]
    279a:	e799      	b.n	26d0 <socket+0x70>
	CHECK_SOCKNUM();
    279c:	2001      	movs	r0, #1
    279e:	4240      	negs	r0, r0
    27a0:	e7d1      	b.n	2746 <socket+0xe6>
         return SOCKERR_SOCKMODE;
    27a2:	2005      	movs	r0, #5
    27a4:	4240      	negs	r0, r0
    27a6:	e7ce      	b.n	2746 <socket+0xe6>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
    27a8:	2006      	movs	r0, #6
    27aa:	4240      	negs	r0, r0
    27ac:	e7cb      	b.n	2746 <socket+0xe6>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
    27ae:	2006      	movs	r0, #6
    27b0:	4240      	negs	r0, r0
    27b2:	e7c8      	b.n	2746 <socket+0xe6>
    27b4:	20000000 	.word	0x20000000
    27b8:	0000fff0 	.word	0x0000fff0
    27bc:	20000a98 	.word	0x20000a98
    27c0:	20000a9a 	.word	0x20000a9a
    27c4:	20000aa4 	.word	0x20000aa4
    27c8:	20000a9c 	.word	0x20000a9c
    27cc:	ffffc000 	.word	0xffffc000

000027d0 <listen>:

int8_t listen(uint8_t sn)
{
    27d0:	b570      	push	{r4, r5, r6, lr}
    27d2:	0006      	movs	r6, r0
	CHECK_SOCKNUM();
    27d4:	2808      	cmp	r0, #8
    27d6:	d829      	bhi.n	282c <listen+0x5c>
   CHECK_SOCKMODE(Sn_MR_TCP);
    27d8:	0084      	lsls	r4, r0, #2
    27da:	3401      	adds	r4, #1
    27dc:	00e4      	lsls	r4, r4, #3
    27de:	0020      	movs	r0, r4
    27e0:	f000 fc44 	bl	306c <WIZCHIP_READ>
    27e4:	230f      	movs	r3, #15
    27e6:	4018      	ands	r0, r3
    27e8:	2801      	cmp	r0, #1
    27ea:	d122      	bne.n	2832 <listen+0x62>
	CHECK_SOCKINIT();
    27ec:	23c0      	movs	r3, #192	; 0xc0
    27ee:	009b      	lsls	r3, r3, #2
    27f0:	18e5      	adds	r5, r4, r3
    27f2:	0028      	movs	r0, r5
    27f4:	f000 fc3a 	bl	306c <WIZCHIP_READ>
    27f8:	2813      	cmp	r0, #19
    27fa:	d11d      	bne.n	2838 <listen+0x68>
	setSn_CR(sn,Sn_CR_LISTEN);
    27fc:	3401      	adds	r4, #1
    27fe:	34ff      	adds	r4, #255	; 0xff
    2800:	2102      	movs	r1, #2
    2802:	0020      	movs	r0, r4
    2804:	f000 fc64 	bl	30d0 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
    2808:	0020      	movs	r0, r4
    280a:	f000 fc2f 	bl	306c <WIZCHIP_READ>
    280e:	2800      	cmp	r0, #0
    2810:	d1fa      	bne.n	2808 <listen+0x38>
   while(getSn_SR(sn) != SOCK_LISTEN)
    2812:	0028      	movs	r0, r5
    2814:	f000 fc2a 	bl	306c <WIZCHIP_READ>
    2818:	2814      	cmp	r0, #20
    281a:	d101      	bne.n	2820 <listen+0x50>
   {
         close(sn);
         return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
    281c:	3813      	subs	r0, #19
}
    281e:	bd70      	pop	{r4, r5, r6, pc}
         close(sn);
    2820:	0030      	movs	r0, r6
    2822:	f7ff fedd 	bl	25e0 <close>
         return SOCKERR_SOCKCLOSED;
    2826:	2004      	movs	r0, #4
    2828:	4240      	negs	r0, r0
    282a:	e7f8      	b.n	281e <listen+0x4e>
	CHECK_SOCKNUM();
    282c:	2001      	movs	r0, #1
    282e:	4240      	negs	r0, r0
    2830:	e7f5      	b.n	281e <listen+0x4e>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2832:	2005      	movs	r0, #5
    2834:	4240      	negs	r0, r0
    2836:	e7f2      	b.n	281e <listen+0x4e>
	CHECK_SOCKINIT();
    2838:	2003      	movs	r0, #3
    283a:	4240      	negs	r0, r0
    283c:	e7ef      	b.n	281e <listen+0x4e>
	...

00002840 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
    2840:	b570      	push	{r4, r5, r6, lr}
    2842:	0006      	movs	r6, r0
   CHECK_SOCKNUM();
    2844:	2808      	cmp	r0, #8
    2846:	d836      	bhi.n	28b6 <disconnect+0x76>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2848:	0084      	lsls	r4, r0, #2
    284a:	3401      	adds	r4, #1
    284c:	00e4      	lsls	r4, r4, #3
    284e:	0020      	movs	r0, r4
    2850:	f000 fc0c 	bl	306c <WIZCHIP_READ>
    2854:	230f      	movs	r3, #15
    2856:	4018      	ands	r0, r3
    2858:	2801      	cmp	r0, #1
    285a:	d12f      	bne.n	28bc <disconnect+0x7c>
	setSn_CR(sn,Sn_CR_DISCON);
    285c:	1c65      	adds	r5, r4, #1
    285e:	35ff      	adds	r5, #255	; 0xff
    2860:	2108      	movs	r1, #8
    2862:	0028      	movs	r0, r5
    2864:	f000 fc34 	bl	30d0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    2868:	0028      	movs	r0, r5
    286a:	f000 fbff 	bl	306c <WIZCHIP_READ>
    286e:	2800      	cmp	r0, #0
    2870:	d1fa      	bne.n	2868 <disconnect+0x28>
	sock_is_sending &= ~(1<<sn);
    2872:	2201      	movs	r2, #1
    2874:	0010      	movs	r0, r2
    2876:	40b0      	lsls	r0, r6
    2878:	4913      	ldr	r1, [pc, #76]	; (28c8 <disconnect+0x88>)
    287a:	880b      	ldrh	r3, [r1, #0]
    287c:	4383      	bics	r3, r0
    287e:	800b      	strh	r3, [r1, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    2880:	4b12      	ldr	r3, [pc, #72]	; (28cc <disconnect+0x8c>)
    2882:	881b      	ldrh	r3, [r3, #0]
    2884:	4133      	asrs	r3, r6
    2886:	421a      	tst	r2, r3
    2888:	d11b      	bne.n	28c2 <disconnect+0x82>
	while(getSn_SR(sn) != SOCK_CLOSED)
    288a:	23c0      	movs	r3, #192	; 0xc0
    288c:	009b      	lsls	r3, r3, #2
    288e:	18e0      	adds	r0, r4, r3
    2890:	f000 fbec 	bl	306c <WIZCHIP_READ>
    2894:	2800      	cmp	r0, #0
    2896:	d00c      	beq.n	28b2 <disconnect+0x72>
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
    2898:	2380      	movs	r3, #128	; 0x80
    289a:	009b      	lsls	r3, r3, #2
    289c:	18e0      	adds	r0, r4, r3
    289e:	f000 fbe5 	bl	306c <WIZCHIP_READ>
    28a2:	0703      	lsls	r3, r0, #28
    28a4:	d5f1      	bpl.n	288a <disconnect+0x4a>
	   {
	      close(sn);
    28a6:	0030      	movs	r0, r6
    28a8:	f7ff fe9a 	bl	25e0 <close>
	      return SOCKERR_TIMEOUT;
    28ac:	200d      	movs	r0, #13
    28ae:	4240      	negs	r0, r0
    28b0:	e008      	b.n	28c4 <disconnect+0x84>
	   }
	}
	return SOCK_OK;
    28b2:	3001      	adds	r0, #1
    28b4:	e006      	b.n	28c4 <disconnect+0x84>
   CHECK_SOCKNUM();
    28b6:	2001      	movs	r0, #1
    28b8:	4240      	negs	r0, r0
    28ba:	e003      	b.n	28c4 <disconnect+0x84>
   CHECK_SOCKMODE(Sn_MR_TCP);
    28bc:	2005      	movs	r0, #5
    28be:	4240      	negs	r0, r0
    28c0:	e000      	b.n	28c4 <disconnect+0x84>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
    28c2:	2000      	movs	r0, #0
}
    28c4:	bd70      	pop	{r4, r5, r6, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	20000a9a 	.word	0x20000a9a
    28cc:	20000a98 	.word	0x20000a98

000028d0 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
    28d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    28d2:	46c6      	mov	lr, r8
    28d4:	b500      	push	{lr}
    28d6:	b082      	sub	sp, #8
    28d8:	0004      	movs	r4, r0
    28da:	9101      	str	r1, [sp, #4]
    28dc:	0017      	movs	r7, r2
   uint8_t tmp=0;
   uint16_t freesize=0;
   
   CHECK_SOCKNUM();
    28de:	2808      	cmp	r0, #8
    28e0:	d900      	bls.n	28e4 <send+0x14>
    28e2:	e080      	b.n	29e6 <send+0x116>
   CHECK_SOCKMODE(Sn_MR_TCP);
    28e4:	0005      	movs	r5, r0
    28e6:	0083      	lsls	r3, r0, #2
    28e8:	3301      	adds	r3, #1
    28ea:	00db      	lsls	r3, r3, #3
    28ec:	4698      	mov	r8, r3
    28ee:	0018      	movs	r0, r3
    28f0:	f000 fbbc 	bl	306c <WIZCHIP_READ>
    28f4:	230f      	movs	r3, #15
    28f6:	4018      	ands	r0, r3
    28f8:	2801      	cmp	r0, #1
    28fa:	d000      	beq.n	28fe <send+0x2e>
    28fc:	e076      	b.n	29ec <send+0x11c>
   CHECK_SOCKDATA();
    28fe:	2f00      	cmp	r7, #0
    2900:	d100      	bne.n	2904 <send+0x34>
    2902:	e076      	b.n	29f2 <send+0x122>
   tmp = getSn_SR(sn);
    2904:	23c0      	movs	r3, #192	; 0xc0
    2906:	009b      	lsls	r3, r3, #2
    2908:	4443      	add	r3, r8
    290a:	9300      	str	r3, [sp, #0]
    290c:	0018      	movs	r0, r3
    290e:	f000 fbad 	bl	306c <WIZCHIP_READ>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    2912:	2817      	cmp	r0, #23
    2914:	d002      	beq.n	291c <send+0x4c>
    2916:	281c      	cmp	r0, #28
    2918:	d000      	beq.n	291c <send+0x4c>
    291a:	e06d      	b.n	29f8 <send+0x128>
   if( sock_is_sending & (1<<sn) )
    291c:	4b38      	ldr	r3, [pc, #224]	; (2a00 <send+0x130>)
    291e:	881b      	ldrh	r3, [r3, #0]
    2920:	4123      	asrs	r3, r4
    2922:	07db      	lsls	r3, r3, #31
    2924:	d518      	bpl.n	2958 <send+0x88>
   {
      tmp = getSn_IR(sn);
    2926:	2680      	movs	r6, #128	; 0x80
    2928:	00b6      	lsls	r6, r6, #2
    292a:	4446      	add	r6, r8
    292c:	0030      	movs	r0, r6
    292e:	f000 fb9d 	bl	306c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    2932:	06c3      	lsls	r3, r0, #27
    2934:	d406      	bmi.n	2944 <send+0x74>
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
      }
      else if(tmp & Sn_IR_TIMEOUT)
    2936:	0703      	lsls	r3, r0, #28
    2938:	d41a      	bmi.n	2970 <send+0xa0>
      {
         close(sn);
         return SOCKERR_TIMEOUT;
      }
      else return SOCK_BUSY;
    293a:	2000      	movs	r0, #0
   while(getSn_CR(sn));
   sock_is_sending |= (1 << sn);
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
}
    293c:	b002      	add	sp, #8
    293e:	bc04      	pop	{r2}
    2940:	4690      	mov	r8, r2
    2942:	bdf0      	pop	{r4, r5, r6, r7, pc}
         setSn_IR(sn, Sn_IR_SENDOK);
    2944:	2110      	movs	r1, #16
    2946:	0030      	movs	r0, r6
    2948:	f000 fbc2 	bl	30d0 <WIZCHIP_WRITE>
         sock_is_sending &= ~(1<<sn);         
    294c:	2201      	movs	r2, #1
    294e:	40a2      	lsls	r2, r4
    2950:	492b      	ldr	r1, [pc, #172]	; (2a00 <send+0x130>)
    2952:	880b      	ldrh	r3, [r1, #0]
    2954:	4393      	bics	r3, r2
    2956:	800b      	strh	r3, [r1, #0]
   freesize = getSn_TxMAX(sn);
    2958:	20f8      	movs	r0, #248	; 0xf8
    295a:	0140      	lsls	r0, r0, #5
    295c:	4440      	add	r0, r8
    295e:	f000 fb85 	bl	306c <WIZCHIP_READ>
    2962:	b280      	uxth	r0, r0
    2964:	0280      	lsls	r0, r0, #10
    2966:	b286      	uxth	r6, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    2968:	42b7      	cmp	r7, r6
    296a:	d80f      	bhi.n	298c <send+0xbc>
    296c:	003e      	movs	r6, r7
    296e:	e00d      	b.n	298c <send+0xbc>
         close(sn);
    2970:	0020      	movs	r0, r4
    2972:	f7ff fe35 	bl	25e0 <close>
         return SOCKERR_TIMEOUT;
    2976:	200d      	movs	r0, #13
    2978:	4240      	negs	r0, r0
    297a:	e7df      	b.n	293c <send+0x6c>
         close(sn);
    297c:	0020      	movs	r0, r4
    297e:	f7ff fe2f 	bl	25e0 <close>
         return SOCKERR_SOCKSTATUS;
    2982:	2007      	movs	r0, #7
    2984:	4240      	negs	r0, r0
    2986:	e7d9      	b.n	293c <send+0x6c>
      if(len <= freesize) break;
    2988:	42be      	cmp	r6, r7
    298a:	d913      	bls.n	29b4 <send+0xe4>
      freesize = getSn_TX_FSR(sn);
    298c:	0020      	movs	r0, r4
    298e:	f000 fc4b 	bl	3228 <getSn_TX_FSR>
    2992:	0007      	movs	r7, r0
      tmp = getSn_SR(sn);
    2994:	9800      	ldr	r0, [sp, #0]
    2996:	f000 fb69 	bl	306c <WIZCHIP_READ>
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
    299a:	2817      	cmp	r0, #23
    299c:	d001      	beq.n	29a2 <send+0xd2>
    299e:	281c      	cmp	r0, #28
    29a0:	d1ec      	bne.n	297c <send+0xac>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    29a2:	4b18      	ldr	r3, [pc, #96]	; (2a04 <send+0x134>)
    29a4:	881b      	ldrh	r3, [r3, #0]
    29a6:	412b      	asrs	r3, r5
    29a8:	07db      	lsls	r3, r3, #31
    29aa:	d5ed      	bpl.n	2988 <send+0xb8>
    29ac:	42be      	cmp	r6, r7
    29ae:	d9eb      	bls.n	2988 <send+0xb8>
    29b0:	2000      	movs	r0, #0
    29b2:	e7c3      	b.n	293c <send+0x6c>
   wiz_send_data(sn, buf, len);
    29b4:	0032      	movs	r2, r6
    29b6:	9901      	ldr	r1, [sp, #4]
    29b8:	0020      	movs	r0, r4
    29ba:	f000 fc99 	bl	32f0 <wiz_send_data>
   setSn_CR(sn,Sn_CR_SEND);
    29be:	4645      	mov	r5, r8
    29c0:	3501      	adds	r5, #1
    29c2:	35ff      	adds	r5, #255	; 0xff
    29c4:	2120      	movs	r1, #32
    29c6:	0028      	movs	r0, r5
    29c8:	f000 fb82 	bl	30d0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    29cc:	0028      	movs	r0, r5
    29ce:	f000 fb4d 	bl	306c <WIZCHIP_READ>
    29d2:	2800      	cmp	r0, #0
    29d4:	d1fa      	bne.n	29cc <send+0xfc>
   sock_is_sending |= (1 << sn);
    29d6:	2201      	movs	r2, #1
    29d8:	40a2      	lsls	r2, r4
    29da:	4909      	ldr	r1, [pc, #36]	; (2a00 <send+0x130>)
    29dc:	880b      	ldrh	r3, [r1, #0]
    29de:	4313      	orrs	r3, r2
    29e0:	800b      	strh	r3, [r1, #0]
   return (int32_t)len;
    29e2:	0030      	movs	r0, r6
    29e4:	e7aa      	b.n	293c <send+0x6c>
   CHECK_SOCKNUM();
    29e6:	2001      	movs	r0, #1
    29e8:	4240      	negs	r0, r0
    29ea:	e7a7      	b.n	293c <send+0x6c>
   CHECK_SOCKMODE(Sn_MR_TCP);
    29ec:	2005      	movs	r0, #5
    29ee:	4240      	negs	r0, r0
    29f0:	e7a4      	b.n	293c <send+0x6c>
   CHECK_SOCKDATA();
    29f2:	200e      	movs	r0, #14
    29f4:	4240      	negs	r0, r0
    29f6:	e7a1      	b.n	293c <send+0x6c>
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
    29f8:	2007      	movs	r0, #7
    29fa:	4240      	negs	r0, r0
    29fc:	e79e      	b.n	293c <send+0x6c>
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	20000a9a 	.word	0x20000a9a
    2a04:	20000a98 	.word	0x20000a98

00002a08 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
    2a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a0a:	46c6      	mov	lr, r8
    2a0c:	b500      	push	{lr}
    2a0e:	b082      	sub	sp, #8
    2a10:	9000      	str	r0, [sp, #0]
    2a12:	9101      	str	r1, [sp, #4]
    2a14:	0014      	movs	r4, r2
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
    2a16:	2808      	cmp	r0, #8
    2a18:	d864      	bhi.n	2ae4 <recv+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2a1a:	0006      	movs	r6, r0
    2a1c:	0087      	lsls	r7, r0, #2
    2a1e:	3701      	adds	r7, #1
    2a20:	00ff      	lsls	r7, r7, #3
    2a22:	0038      	movs	r0, r7
    2a24:	f000 fb22 	bl	306c <WIZCHIP_READ>
    2a28:	230f      	movs	r3, #15
    2a2a:	4018      	ands	r0, r3
    2a2c:	2801      	cmp	r0, #1
    2a2e:	d15c      	bne.n	2aea <recv+0xe2>
   CHECK_SOCKDATA();
    2a30:	2c00      	cmp	r4, #0
    2a32:	d05d      	beq.n	2af0 <recv+0xe8>
   
   recvsize = getSn_RxMAX(sn);
    2a34:	23f0      	movs	r3, #240	; 0xf0
    2a36:	015b      	lsls	r3, r3, #5
    2a38:	18f8      	adds	r0, r7, r3
    2a3a:	f000 fb17 	bl	306c <WIZCHIP_READ>
    2a3e:	b280      	uxth	r0, r0
    2a40:	0280      	lsls	r0, r0, #10
    2a42:	b283      	uxth	r3, r0
    2a44:	4698      	mov	r8, r3
   if(recvsize < len) len = recvsize;
    2a46:	429c      	cmp	r4, r3
    2a48:	d80f      	bhi.n	2a6a <recv+0x62>
    2a4a:	46a0      	mov	r8, r4
    2a4c:	e00d      	b.n	2a6a <recv+0x62>
            if(tmp == SOCK_CLOSE_WAIT)
            {
               if(recvsize != 0) break;
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
               {
                  close(sn);
    2a4e:	9800      	ldr	r0, [sp, #0]
    2a50:	f7ff fdc6 	bl	25e0 <close>
                  return SOCKERR_SOCKSTATUS;
    2a54:	2007      	movs	r0, #7
    2a56:	4240      	negs	r0, r0
    2a58:	e040      	b.n	2adc <recv+0xd4>
               }
            }
            else
            {
               close(sn);
    2a5a:	9800      	ldr	r0, [sp, #0]
    2a5c:	f7ff fdc0 	bl	25e0 <close>
               return SOCKERR_SOCKSTATUS;
    2a60:	2007      	movs	r0, #7
    2a62:	4240      	negs	r0, r0
    2a64:	e03a      	b.n	2adc <recv+0xd4>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
         if(recvsize != 0) break;
    2a66:	2c00      	cmp	r4, #0
    2a68:	d124      	bne.n	2ab4 <recv+0xac>
         recvsize = getSn_RX_RSR(sn);
    2a6a:	9d00      	ldr	r5, [sp, #0]
    2a6c:	0028      	movs	r0, r5
    2a6e:	f000 fc0d 	bl	328c <getSn_RX_RSR>
    2a72:	0004      	movs	r4, r0
         tmp = getSn_SR(sn);
    2a74:	23c0      	movs	r3, #192	; 0xc0
    2a76:	009b      	lsls	r3, r3, #2
    2a78:	18f8      	adds	r0, r7, r3
    2a7a:	f000 faf7 	bl	306c <WIZCHIP_READ>
         if (tmp != SOCK_ESTABLISHED)
    2a7e:	2817      	cmp	r0, #23
    2a80:	d00f      	beq.n	2aa2 <recv+0x9a>
            if(tmp == SOCK_CLOSE_WAIT)
    2a82:	281c      	cmp	r0, #28
    2a84:	d1e9      	bne.n	2a5a <recv+0x52>
               if(recvsize != 0) break;
    2a86:	2c00      	cmp	r4, #0
    2a88:	d114      	bne.n	2ab4 <recv+0xac>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
    2a8a:	0028      	movs	r0, r5
    2a8c:	f000 fbcc 	bl	3228 <getSn_TX_FSR>
    2a90:	0005      	movs	r5, r0
    2a92:	23f8      	movs	r3, #248	; 0xf8
    2a94:	015b      	lsls	r3, r3, #5
    2a96:	18f8      	adds	r0, r7, r3
    2a98:	f000 fae8 	bl	306c <WIZCHIP_READ>
    2a9c:	0280      	lsls	r0, r0, #10
    2a9e:	4285      	cmp	r5, r0
    2aa0:	d0d5      	beq.n	2a4e <recv+0x46>
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
    2aa2:	4b15      	ldr	r3, [pc, #84]	; (2af8 <recv+0xf0>)
    2aa4:	881b      	ldrh	r3, [r3, #0]
    2aa6:	4133      	asrs	r3, r6
    2aa8:	07db      	lsls	r3, r3, #31
    2aaa:	d5dc      	bpl.n	2a66 <recv+0x5e>
    2aac:	2c00      	cmp	r4, #0
    2aae:	d1da      	bne.n	2a66 <recv+0x5e>
    2ab0:	2000      	movs	r0, #0
    2ab2:	e013      	b.n	2adc <recv+0xd4>
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
    2ab4:	45a0      	cmp	r8, r4
    2ab6:	d800      	bhi.n	2aba <recv+0xb2>
    2ab8:	4644      	mov	r4, r8
   wiz_recv_data(sn, buf, len);
    2aba:	0022      	movs	r2, r4
    2abc:	9901      	ldr	r1, [sp, #4]
    2abe:	9800      	ldr	r0, [sp, #0]
    2ac0:	f000 fc49 	bl	3356 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
    2ac4:	3701      	adds	r7, #1
    2ac6:	37ff      	adds	r7, #255	; 0xff
    2ac8:	2140      	movs	r1, #64	; 0x40
    2aca:	0038      	movs	r0, r7
    2acc:	f000 fb00 	bl	30d0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
    2ad0:	0038      	movs	r0, r7
    2ad2:	f000 facb 	bl	306c <WIZCHIP_READ>
    2ad6:	2800      	cmp	r0, #0
    2ad8:	d1fa      	bne.n	2ad0 <recv+0xc8>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    2ada:	0020      	movs	r0, r4
}
    2adc:	b002      	add	sp, #8
    2ade:	bc04      	pop	{r2}
    2ae0:	4690      	mov	r8, r2
    2ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   CHECK_SOCKNUM();
    2ae4:	2001      	movs	r0, #1
    2ae6:	4240      	negs	r0, r0
    2ae8:	e7f8      	b.n	2adc <recv+0xd4>
   CHECK_SOCKMODE(Sn_MR_TCP);
    2aea:	2005      	movs	r0, #5
    2aec:	4240      	negs	r0, r0
    2aee:	e7f5      	b.n	2adc <recv+0xd4>
   CHECK_SOCKDATA();
    2af0:	200e      	movs	r0, #14
    2af2:	4240      	negs	r0, r0
    2af4:	e7f2      	b.n	2adc <recv+0xd4>
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	20000a98 	.word	0x20000a98

00002afc <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
    2afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2afe:	46de      	mov	lr, fp
    2b00:	b500      	push	{lr}
    2b02:	b084      	sub	sp, #16
    2b04:	9001      	str	r0, [sp, #4]
    2b06:	9103      	str	r1, [sp, #12]
    2b08:	4693      	mov	fp, r2
    2b0a:	001c      	movs	r4, r3
    2b0c:	ab0a      	add	r3, sp, #40	; 0x28
    2b0e:	881f      	ldrh	r7, [r3, #0]
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
    2b10:	2808      	cmp	r0, #8
    2b12:	d900      	bls.n	2b16 <sendto+0x1a>
    2b14:	e095      	b.n	2c42 <sendto+0x146>
   switch(getSn_MR(sn) & 0x0F)
    2b16:	0005      	movs	r5, r0
    2b18:	0083      	lsls	r3, r0, #2
    2b1a:	3301      	adds	r3, #1
    2b1c:	00de      	lsls	r6, r3, #3
    2b1e:	0030      	movs	r0, r6
    2b20:	f000 faa4 	bl	306c <WIZCHIP_READ>
    2b24:	230f      	movs	r3, #15
    2b26:	4003      	ands	r3, r0
    2b28:	3b02      	subs	r3, #2
    2b2a:	b2db      	uxtb	r3, r3
    2b2c:	2b02      	cmp	r3, #2
    2b2e:	d900      	bls.n	2b32 <sendto+0x36>
    2b30:	e08a      	b.n	2c48 <sendto+0x14c>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    2b32:	465b      	mov	r3, fp
    2b34:	2b00      	cmp	r3, #0
    2b36:	d100      	bne.n	2b3a <sendto+0x3e>
    2b38:	e089      	b.n	2c4e <sendto+0x152>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
    2b3a:	7823      	ldrb	r3, [r4, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
    2b3c:	021b      	lsls	r3, r3, #8
    2b3e:	7862      	ldrb	r2, [r4, #1]
    2b40:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
    2b42:	021b      	lsls	r3, r3, #8
    2b44:	78a2      	ldrb	r2, [r4, #2]
    2b46:	189b      	adds	r3, r3, r2
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
    2b48:	021b      	lsls	r3, r3, #8
    2b4a:	78e2      	ldrb	r2, [r4, #3]
    2b4c:	189b      	adds	r3, r3, r2
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    2b4e:	2b00      	cmp	r3, #0
    2b50:	d034      	beq.n	2bbc <sendto+0xc0>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    2b52:	2f00      	cmp	r7, #0
    2b54:	d104      	bne.n	2b60 <sendto+0x64>
    2b56:	0030      	movs	r0, r6
    2b58:	f000 fa88 	bl	306c <WIZCHIP_READ>
    2b5c:	0743      	lsls	r3, r0, #29
    2b5e:	d579      	bpl.n	2c54 <sendto+0x158>
   tmp = getSn_SR(sn);
    2b60:	23c0      	movs	r3, #192	; 0xc0
    2b62:	009b      	lsls	r3, r3, #2
    2b64:	469c      	mov	ip, r3
    2b66:	44b4      	add	ip, r6
    2b68:	4663      	mov	r3, ip
    2b6a:	9302      	str	r3, [sp, #8]
    2b6c:	4660      	mov	r0, ip
    2b6e:	f000 fa7d 	bl	306c <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    2b72:	2842      	cmp	r0, #66	; 0x42
    2b74:	d003      	beq.n	2b7e <sendto+0x82>
    2b76:	2822      	cmp	r0, #34	; 0x22
    2b78:	d001      	beq.n	2b7e <sendto+0x82>
    2b7a:	2832      	cmp	r0, #50	; 0x32
    2b7c:	d16d      	bne.n	2c5a <sendto+0x15e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
    2b7e:	2204      	movs	r2, #4
    2b80:	0021      	movs	r1, r4
    2b82:	23c0      	movs	r3, #192	; 0xc0
    2b84:	011b      	lsls	r3, r3, #4
    2b86:	18f0      	adds	r0, r6, r3
    2b88:	f000 fb12 	bl	31b0 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
    2b8c:	0a39      	lsrs	r1, r7, #8
    2b8e:	2380      	movs	r3, #128	; 0x80
    2b90:	015b      	lsls	r3, r3, #5
    2b92:	18f0      	adds	r0, r6, r3
    2b94:	f000 fa9c 	bl	30d0 <WIZCHIP_WRITE>
    2b98:	b2f9      	uxtb	r1, r7
    2b9a:	2388      	movs	r3, #136	; 0x88
    2b9c:	015b      	lsls	r3, r3, #5
    2b9e:	18f0      	adds	r0, r6, r3
    2ba0:	f000 fa96 	bl	30d0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
    2ba4:	23f8      	movs	r3, #248	; 0xf8
    2ba6:	015b      	lsls	r3, r3, #5
    2ba8:	18f0      	adds	r0, r6, r3
    2baa:	f000 fa5f 	bl	306c <WIZCHIP_READ>
    2bae:	b280      	uxth	r0, r0
    2bb0:	0280      	lsls	r0, r0, #10
    2bb2:	b287      	uxth	r7, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
    2bb4:	45bb      	cmp	fp, r7
    2bb6:	d80b      	bhi.n	2bd0 <sendto+0xd4>
    2bb8:	465f      	mov	r7, fp
    2bba:	e009      	b.n	2bd0 <sendto+0xd4>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
    2bbc:	0030      	movs	r0, r6
    2bbe:	f000 fa55 	bl	306c <WIZCHIP_READ>
    2bc2:	0743      	lsls	r3, r0, #29
    2bc4:	d4c5      	bmi.n	2b52 <sendto+0x56>
    2bc6:	200c      	movs	r0, #12
    2bc8:	4240      	negs	r0, r0
    2bca:	e04b      	b.n	2c64 <sendto+0x168>
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
      if(len <= freesize) break;
    2bcc:	42a7      	cmp	r7, r4
    2bce:	d911      	bls.n	2bf4 <sendto+0xf8>
      freesize = getSn_TX_FSR(sn);
    2bd0:	9801      	ldr	r0, [sp, #4]
    2bd2:	f000 fb29 	bl	3228 <getSn_TX_FSR>
    2bd6:	0004      	movs	r4, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2bd8:	9802      	ldr	r0, [sp, #8]
    2bda:	f000 fa47 	bl	306c <WIZCHIP_READ>
    2bde:	2800      	cmp	r0, #0
    2be0:	d03e      	beq.n	2c60 <sendto+0x164>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
    2be2:	4b22      	ldr	r3, [pc, #136]	; (2c6c <sendto+0x170>)
    2be4:	881b      	ldrh	r3, [r3, #0]
    2be6:	412b      	asrs	r3, r5
    2be8:	07db      	lsls	r3, r3, #31
    2bea:	d5ef      	bpl.n	2bcc <sendto+0xd0>
    2bec:	42a7      	cmp	r7, r4
    2bee:	d9ed      	bls.n	2bcc <sendto+0xd0>
    2bf0:	2000      	movs	r0, #0
    2bf2:	e037      	b.n	2c64 <sendto+0x168>
   };
	wiz_send_data(sn, buf, len);
    2bf4:	003a      	movs	r2, r7
    2bf6:	9903      	ldr	r1, [sp, #12]
    2bf8:	9801      	ldr	r0, [sp, #4]
    2bfa:	f000 fb79 	bl	32f0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
    2bfe:	1c74      	adds	r4, r6, #1
    2c00:	34ff      	adds	r4, #255	; 0xff
    2c02:	2120      	movs	r1, #32
    2c04:	0020      	movs	r0, r4
    2c06:	f000 fa63 	bl	30d0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
    2c0a:	0020      	movs	r0, r4
    2c0c:	f000 fa2e 	bl	306c <WIZCHIP_READ>
    2c10:	2800      	cmp	r0, #0
    2c12:	d1fa      	bne.n	2c0a <sendto+0x10e>
   while(1)
   {
      tmp = getSn_IR(sn);
    2c14:	2380      	movs	r3, #128	; 0x80
    2c16:	009b      	lsls	r3, r3, #2
    2c18:	18f4      	adds	r4, r6, r3
    2c1a:	0020      	movs	r0, r4
    2c1c:	f000 fa26 	bl	306c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
    2c20:	06c3      	lsls	r3, r0, #27
    2c22:	d408      	bmi.n	2c36 <sendto+0x13a>
         setSn_IR(sn, Sn_IR_SENDOK);
         break;
      }
      //M:20131104
      //else if(tmp & Sn_IR_TIMEOUT) return SOCKERR_TIMEOUT;
      else if(tmp & Sn_IR_TIMEOUT)
    2c24:	0703      	lsls	r3, r0, #28
    2c26:	d5f5      	bpl.n	2c14 <sendto+0x118>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
    2c28:	2108      	movs	r1, #8
    2c2a:	0020      	movs	r0, r4
    2c2c:	f000 fa50 	bl	30d0 <WIZCHIP_WRITE>
         //len = (uint16_t)SOCKERR_TIMEOUT;
         //break;
         #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
            if(taddr) setSUBR((uint8_t*)&taddr);
         #endif
         return SOCKERR_TIMEOUT;
    2c30:	200d      	movs	r0, #13
    2c32:	4240      	negs	r0, r0
    2c34:	e016      	b.n	2c64 <sendto+0x168>
         setSn_IR(sn, Sn_IR_SENDOK);
    2c36:	2110      	movs	r1, #16
    2c38:	0020      	movs	r0, r4
    2c3a:	f000 fa49 	bl	30d0 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
    2c3e:	0038      	movs	r0, r7
    2c40:	e010      	b.n	2c64 <sendto+0x168>
   CHECK_SOCKNUM();
    2c42:	2001      	movs	r0, #1
    2c44:	4240      	negs	r0, r0
    2c46:	e00d      	b.n	2c64 <sendto+0x168>
         return SOCKERR_SOCKMODE;
    2c48:	2005      	movs	r0, #5
    2c4a:	4240      	negs	r0, r0
    2c4c:	e00a      	b.n	2c64 <sendto+0x168>
   CHECK_SOCKDATA();
    2c4e:	200e      	movs	r0, #14
    2c50:	4240      	negs	r0, r0
    2c52:	e007      	b.n	2c64 <sendto+0x168>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
    2c54:	200b      	movs	r0, #11
    2c56:	4240      	negs	r0, r0
    2c58:	e004      	b.n	2c64 <sendto+0x168>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
    2c5a:	2007      	movs	r0, #7
    2c5c:	4240      	negs	r0, r0
    2c5e:	e001      	b.n	2c64 <sendto+0x168>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2c60:	2004      	movs	r0, #4
    2c62:	4240      	negs	r0, r0
}
    2c64:	b004      	add	sp, #16
    2c66:	bc04      	pop	{r2}
    2c68:	4693      	mov	fp, r2
    2c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c6c:	20000a98 	.word	0x20000a98

00002c70 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
    2c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c72:	46de      	mov	lr, fp
    2c74:	4647      	mov	r7, r8
    2c76:	b580      	push	{r7, lr}
    2c78:	b085      	sub	sp, #20
    2c7a:	0005      	movs	r5, r0
    2c7c:	9100      	str	r1, [sp, #0]
    2c7e:	4690      	mov	r8, r2
    2c80:	9301      	str	r3, [sp, #4]
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
    2c82:	2808      	cmp	r0, #8
    2c84:	d900      	bls.n	2c88 <recvfrom+0x18>
    2c86:	e11b      	b.n	2ec0 <recvfrom+0x250>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
    2c88:	0007      	movs	r7, r0
    2c8a:	0083      	lsls	r3, r0, #2
    2c8c:	3301      	adds	r3, #1
    2c8e:	00de      	lsls	r6, r3, #3
    2c90:	0030      	movs	r0, r6
    2c92:	f000 f9eb 	bl	306c <WIZCHIP_READ>
    2c96:	4683      	mov	fp, r0
    2c98:	230f      	movs	r3, #15
    2c9a:	4003      	ands	r3, r0
    2c9c:	3b02      	subs	r3, #2
    2c9e:	b2db      	uxtb	r3, r3
    2ca0:	2b02      	cmp	r3, #2
    2ca2:	d900      	bls.n	2ca6 <recvfrom+0x36>
    2ca4:	e10f      	b.n	2ec6 <recvfrom+0x256>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
    2ca6:	4643      	mov	r3, r8
    2ca8:	2b00      	cmp	r3, #0
    2caa:	d100      	bne.n	2cae <recvfrom+0x3e>
    2cac:	e10e      	b.n	2ecc <recvfrom+0x25c>
   if(sock_remained_size[sn] == 0)
    2cae:	006b      	lsls	r3, r5, #1
    2cb0:	4a89      	ldr	r2, [pc, #548]	; (2ed8 <recvfrom+0x268>)
    2cb2:	5a9b      	ldrh	r3, [r3, r2]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d015      	beq.n	2ce4 <recvfrom+0x74>
	uint16_t pack_len=0;
    2cb8:	2400      	movs	r4, #0
         if(pack_len != 0) break;
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
    2cba:	2307      	movs	r3, #7
    2cbc:	465a      	mov	r2, fp
    2cbe:	4013      	ands	r3, r2
    2cc0:	2b03      	cmp	r3, #3
    2cc2:	d100      	bne.n	2cc6 <recvfrom+0x56>
    2cc4:	e0bd      	b.n	2e42 <recvfrom+0x1d2>
    2cc6:	2b04      	cmp	r3, #4
    2cc8:	d100      	bne.n	2ccc <recvfrom+0x5c>
    2cca:	e081      	b.n	2dd0 <recvfrom+0x160>
    2ccc:	2b02      	cmp	r3, #2
    2cce:	d01e      	beq.n	2d0e <recvfrom+0x9e>
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
			break;
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
    2cd0:	0021      	movs	r1, r4
    2cd2:	0028      	movs	r0, r5
    2cd4:	f000 fb72 	bl	33bc <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
    2cd8:	006b      	lsls	r3, r5, #1
    2cda:	4a7f      	ldr	r2, [pc, #508]	; (2ed8 <recvfrom+0x268>)
    2cdc:	529c      	strh	r4, [r3, r2]
         break;
    2cde:	e026      	b.n	2d2e <recvfrom+0xbe>
         if(pack_len != 0) break;
    2ce0:	2c00      	cmp	r4, #0
    2ce2:	d1ea      	bne.n	2cba <recvfrom+0x4a>
         pack_len = getSn_RX_RSR(sn);
    2ce4:	0028      	movs	r0, r5
    2ce6:	f000 fad1 	bl	328c <getSn_RX_RSR>
    2cea:	0004      	movs	r4, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2cec:	23c0      	movs	r3, #192	; 0xc0
    2cee:	009b      	lsls	r3, r3, #2
    2cf0:	18f0      	adds	r0, r6, r3
    2cf2:	f000 f9bb 	bl	306c <WIZCHIP_READ>
    2cf6:	2800      	cmp	r0, #0
    2cf8:	d100      	bne.n	2cfc <recvfrom+0x8c>
    2cfa:	e0ea      	b.n	2ed2 <recvfrom+0x262>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
    2cfc:	4b77      	ldr	r3, [pc, #476]	; (2edc <recvfrom+0x26c>)
    2cfe:	881b      	ldrh	r3, [r3, #0]
    2d00:	413b      	asrs	r3, r7
    2d02:	07db      	lsls	r3, r3, #31
    2d04:	d5ec      	bpl.n	2ce0 <recvfrom+0x70>
    2d06:	2c00      	cmp	r4, #0
    2d08:	d1ea      	bne.n	2ce0 <recvfrom+0x70>
    2d0a:	2000      	movs	r0, #0
    2d0c:	e029      	b.n	2d62 <recvfrom+0xf2>
	      if(sock_remained_size[sn] == 0)
    2d0e:	006b      	lsls	r3, r5, #1
    2d10:	4a71      	ldr	r2, [pc, #452]	; (2ed8 <recvfrom+0x268>)
    2d12:	5a9b      	ldrh	r3, [r3, r2]
    2d14:	2b00      	cmp	r3, #0
    2d16:	d029      	beq.n	2d6c <recvfrom+0xfc>
			if(len < sock_remained_size[sn]) pack_len = len;
    2d18:	006b      	lsls	r3, r5, #1
    2d1a:	4a6f      	ldr	r2, [pc, #444]	; (2ed8 <recvfrom+0x268>)
    2d1c:	5a9c      	ldrh	r4, [r3, r2]
    2d1e:	45a0      	cmp	r8, r4
    2d20:	d200      	bcs.n	2d24 <recvfrom+0xb4>
    2d22:	4644      	mov	r4, r8
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    2d24:	0022      	movs	r2, r4
    2d26:	9900      	ldr	r1, [sp, #0]
    2d28:	0028      	movs	r0, r5
    2d2a:	f000 fb14 	bl	3356 <wiz_recv_data>
   }
	setSn_CR(sn,Sn_CR_RECV);
    2d2e:	3601      	adds	r6, #1
    2d30:	36ff      	adds	r6, #255	; 0xff
    2d32:	2140      	movs	r1, #64	; 0x40
    2d34:	0030      	movs	r0, r6
    2d36:	f000 f9cb 	bl	30d0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
    2d3a:	0030      	movs	r0, r6
    2d3c:	f000 f996 	bl	306c <WIZCHIP_READ>
    2d40:	2800      	cmp	r0, #0
    2d42:	d1fa      	bne.n	2d3a <recvfrom+0xca>
	sock_remained_size[sn] -= pack_len;
    2d44:	4a64      	ldr	r2, [pc, #400]	; (2ed8 <recvfrom+0x268>)
    2d46:	0069      	lsls	r1, r5, #1
    2d48:	5a8b      	ldrh	r3, [r1, r2]
    2d4a:	1b1b      	subs	r3, r3, r4
    2d4c:	b29b      	uxth	r3, r3
    2d4e:	528b      	strh	r3, [r1, r2]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
    2d50:	2b00      	cmp	r3, #0
    2d52:	d100      	bne.n	2d56 <recvfrom+0xe6>
    2d54:	e0b0      	b.n	2eb8 <recvfrom+0x248>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
    2d56:	4a62      	ldr	r2, [pc, #392]	; (2ee0 <recvfrom+0x270>)
    2d58:	5d53      	ldrb	r3, [r2, r5]
    2d5a:	2101      	movs	r1, #1
    2d5c:	430b      	orrs	r3, r1
    2d5e:	5553      	strb	r3, [r2, r5]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
    2d60:	0020      	movs	r0, r4
}
    2d62:	b005      	add	sp, #20
    2d64:	bc0c      	pop	{r2, r3}
    2d66:	4690      	mov	r8, r2
    2d68:	469b      	mov	fp, r3
    2d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   			wiz_recv_data(sn, head, 8);
    2d6c:	2208      	movs	r2, #8
    2d6e:	a902      	add	r1, sp, #8
    2d70:	0028      	movs	r0, r5
    2d72:	f000 faf0 	bl	3356 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    2d76:	1c74      	adds	r4, r6, #1
    2d78:	34ff      	adds	r4, #255	; 0xff
    2d7a:	2140      	movs	r1, #64	; 0x40
    2d7c:	0020      	movs	r0, r4
    2d7e:	f000 f9a7 	bl	30d0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    2d82:	0020      	movs	r0, r4
    2d84:	f000 f972 	bl	306c <WIZCHIP_READ>
    2d88:	2800      	cmp	r0, #0
    2d8a:	d1fa      	bne.n	2d82 <recvfrom+0x112>
               addr[0] = head[0];
    2d8c:	ab02      	add	r3, sp, #8
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	9a01      	ldr	r2, [sp, #4]
    2d92:	7013      	strb	r3, [r2, #0]
      			addr[1] = head[1];
    2d94:	ab02      	add	r3, sp, #8
    2d96:	785b      	ldrb	r3, [r3, #1]
    2d98:	7053      	strb	r3, [r2, #1]
      			addr[2] = head[2];
    2d9a:	ab02      	add	r3, sp, #8
    2d9c:	789b      	ldrb	r3, [r3, #2]
    2d9e:	7093      	strb	r3, [r2, #2]
      			addr[3] = head[3];
    2da0:	ab02      	add	r3, sp, #8
    2da2:	78db      	ldrb	r3, [r3, #3]
    2da4:	70d3      	strb	r3, [r2, #3]
      			*port = head[4];
    2da6:	ab02      	add	r3, sp, #8
    2da8:	791b      	ldrb	r3, [r3, #4]
      			*port = (*port << 8) + head[5];
    2daa:	021b      	lsls	r3, r3, #8
    2dac:	aa02      	add	r2, sp, #8
    2dae:	7952      	ldrb	r2, [r2, #5]
    2db0:	189b      	adds	r3, r3, r2
    2db2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2db4:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
    2db6:	ab02      	add	r3, sp, #8
    2db8:	799b      	ldrb	r3, [r3, #6]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
    2dba:	021b      	lsls	r3, r3, #8
    2dbc:	aa02      	add	r2, sp, #8
    2dbe:	79d2      	ldrb	r2, [r2, #7]
    2dc0:	189b      	adds	r3, r3, r2
    2dc2:	006a      	lsls	r2, r5, #1
    2dc4:	4944      	ldr	r1, [pc, #272]	; (2ed8 <recvfrom+0x268>)
    2dc6:	528b      	strh	r3, [r1, r2]
   			sock_pack_info[sn] = PACK_FIRST;
    2dc8:	2280      	movs	r2, #128	; 0x80
    2dca:	4b45      	ldr	r3, [pc, #276]	; (2ee0 <recvfrom+0x270>)
    2dcc:	555a      	strb	r2, [r3, r5]
    2dce:	e7a3      	b.n	2d18 <recvfrom+0xa8>
	      if(sock_remained_size[sn] == 0)
    2dd0:	006b      	lsls	r3, r5, #1
    2dd2:	4a41      	ldr	r2, [pc, #260]	; (2ed8 <recvfrom+0x268>)
    2dd4:	5a9b      	ldrh	r3, [r3, r2]
    2dd6:	2b00      	cmp	r3, #0
    2dd8:	d00b      	beq.n	2df2 <recvfrom+0x182>
			if(len < sock_remained_size[sn]) pack_len = len;
    2dda:	006b      	lsls	r3, r5, #1
    2ddc:	4a3e      	ldr	r2, [pc, #248]	; (2ed8 <recvfrom+0x268>)
    2dde:	5a9c      	ldrh	r4, [r3, r2]
    2de0:	45a0      	cmp	r8, r4
    2de2:	d200      	bcs.n	2de6 <recvfrom+0x176>
    2de4:	4644      	mov	r4, r8
			wiz_recv_data(sn,buf,pack_len);
    2de6:	0022      	movs	r2, r4
    2de8:	9900      	ldr	r1, [sp, #0]
    2dea:	0028      	movs	r0, r5
    2dec:	f000 fab3 	bl	3356 <wiz_recv_data>
		   break;
    2df0:	e79d      	b.n	2d2e <recvfrom+0xbe>
   			wiz_recv_data(sn, head, 2);
    2df2:	2202      	movs	r2, #2
    2df4:	a902      	add	r1, sp, #8
    2df6:	0028      	movs	r0, r5
    2df8:	f000 faad 	bl	3356 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    2dfc:	1c74      	adds	r4, r6, #1
    2dfe:	34ff      	adds	r4, #255	; 0xff
    2e00:	2140      	movs	r1, #64	; 0x40
    2e02:	0020      	movs	r0, r4
    2e04:	f000 f964 	bl	30d0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    2e08:	0020      	movs	r0, r4
    2e0a:	f000 f92f 	bl	306c <WIZCHIP_READ>
    2e0e:	2800      	cmp	r0, #0
    2e10:	d1fa      	bne.n	2e08 <recvfrom+0x198>
    			sock_remained_size[sn] = head[0];
    2e12:	ab02      	add	r3, sp, #8
    2e14:	781b      	ldrb	r3, [r3, #0]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
    2e16:	021b      	lsls	r3, r3, #8
    2e18:	aa02      	add	r2, sp, #8
    2e1a:	7852      	ldrb	r2, [r2, #1]
    2e1c:	189b      	adds	r3, r3, r2
    2e1e:	b29b      	uxth	r3, r3
    2e20:	3b02      	subs	r3, #2
    2e22:	b29b      	uxth	r3, r3
    2e24:	006a      	lsls	r2, r5, #1
    2e26:	492c      	ldr	r1, [pc, #176]	; (2ed8 <recvfrom+0x268>)
    2e28:	5253      	strh	r3, [r2, r1]
   			if(sock_remained_size[sn] > 1514) 
    2e2a:	4a2e      	ldr	r2, [pc, #184]	; (2ee4 <recvfrom+0x274>)
    2e2c:	4293      	cmp	r3, r2
    2e2e:	d803      	bhi.n	2e38 <recvfrom+0x1c8>
   			sock_pack_info[sn] = PACK_FIRST;
    2e30:	2280      	movs	r2, #128	; 0x80
    2e32:	4b2b      	ldr	r3, [pc, #172]	; (2ee0 <recvfrom+0x270>)
    2e34:	555a      	strb	r2, [r3, r5]
    2e36:	e7d0      	b.n	2dda <recvfrom+0x16a>
   			   close(sn);
    2e38:	0028      	movs	r0, r5
    2e3a:	f7ff fbd1 	bl	25e0 <close>
   			   return SOCKFATAL_PACKLEN;
    2e3e:	482a      	ldr	r0, [pc, #168]	; (2ee8 <recvfrom+0x278>)
    2e40:	e78f      	b.n	2d62 <recvfrom+0xf2>
		   if(sock_remained_size[sn] == 0)
    2e42:	006b      	lsls	r3, r5, #1
    2e44:	4a24      	ldr	r2, [pc, #144]	; (2ed8 <recvfrom+0x268>)
    2e46:	5a9b      	ldrh	r3, [r3, r2]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d00b      	beq.n	2e64 <recvfrom+0x1f4>
			if(len < sock_remained_size[sn]) pack_len = len;
    2e4c:	006b      	lsls	r3, r5, #1
    2e4e:	4a22      	ldr	r2, [pc, #136]	; (2ed8 <recvfrom+0x268>)
    2e50:	5a9c      	ldrh	r4, [r3, r2]
    2e52:	45a0      	cmp	r8, r4
    2e54:	d200      	bcs.n	2e58 <recvfrom+0x1e8>
    2e56:	4644      	mov	r4, r8
   		wiz_recv_data(sn, buf, pack_len); // data copy.
    2e58:	0022      	movs	r2, r4
    2e5a:	9900      	ldr	r1, [sp, #0]
    2e5c:	0028      	movs	r0, r5
    2e5e:	f000 fa7a 	bl	3356 <wiz_recv_data>
			break;
    2e62:	e764      	b.n	2d2e <recvfrom+0xbe>
   			wiz_recv_data(sn, head, 6);
    2e64:	2206      	movs	r2, #6
    2e66:	a902      	add	r1, sp, #8
    2e68:	0028      	movs	r0, r5
    2e6a:	f000 fa74 	bl	3356 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
    2e6e:	1c74      	adds	r4, r6, #1
    2e70:	34ff      	adds	r4, #255	; 0xff
    2e72:	2140      	movs	r1, #64	; 0x40
    2e74:	0020      	movs	r0, r4
    2e76:	f000 f92b 	bl	30d0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
    2e7a:	0020      	movs	r0, r4
    2e7c:	f000 f8f6 	bl	306c <WIZCHIP_READ>
    2e80:	2800      	cmp	r0, #0
    2e82:	d1fa      	bne.n	2e7a <recvfrom+0x20a>
   			addr[0] = head[0];
    2e84:	ab02      	add	r3, sp, #8
    2e86:	781b      	ldrb	r3, [r3, #0]
    2e88:	9a01      	ldr	r2, [sp, #4]
    2e8a:	7013      	strb	r3, [r2, #0]
   			addr[1] = head[1];
    2e8c:	ab02      	add	r3, sp, #8
    2e8e:	785b      	ldrb	r3, [r3, #1]
    2e90:	7053      	strb	r3, [r2, #1]
   			addr[2] = head[2];
    2e92:	ab02      	add	r3, sp, #8
    2e94:	789b      	ldrb	r3, [r3, #2]
    2e96:	7093      	strb	r3, [r2, #2]
   			addr[3] = head[3];
    2e98:	ab02      	add	r3, sp, #8
    2e9a:	78db      	ldrb	r3, [r3, #3]
    2e9c:	70d3      	strb	r3, [r2, #3]
   			sock_remained_size[sn] = head[4];
    2e9e:	ab02      	add	r3, sp, #8
    2ea0:	791b      	ldrb	r3, [r3, #4]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
    2ea2:	021b      	lsls	r3, r3, #8
    2ea4:	aa02      	add	r2, sp, #8
    2ea6:	7952      	ldrb	r2, [r2, #5]
    2ea8:	189b      	adds	r3, r3, r2
    2eaa:	006a      	lsls	r2, r5, #1
    2eac:	490a      	ldr	r1, [pc, #40]	; (2ed8 <recvfrom+0x268>)
    2eae:	528b      	strh	r3, [r1, r2]
   			sock_pack_info[sn] = PACK_FIRST;
    2eb0:	2280      	movs	r2, #128	; 0x80
    2eb2:	4b0b      	ldr	r3, [pc, #44]	; (2ee0 <recvfrom+0x270>)
    2eb4:	555a      	strb	r2, [r3, r5]
    2eb6:	e7c9      	b.n	2e4c <recvfrom+0x1dc>
	else sock_pack_info[sn] = PACK_COMPLETED;
    2eb8:	2200      	movs	r2, #0
    2eba:	4b09      	ldr	r3, [pc, #36]	; (2ee0 <recvfrom+0x270>)
    2ebc:	555a      	strb	r2, [r3, r5]
    2ebe:	e74f      	b.n	2d60 <recvfrom+0xf0>
   CHECK_SOCKNUM();
    2ec0:	2001      	movs	r0, #1
    2ec2:	4240      	negs	r0, r0
    2ec4:	e74d      	b.n	2d62 <recvfrom+0xf2>
         return SOCKERR_SOCKMODE;
    2ec6:	2005      	movs	r0, #5
    2ec8:	4240      	negs	r0, r0
    2eca:	e74a      	b.n	2d62 <recvfrom+0xf2>
   CHECK_SOCKDATA();
    2ecc:	200e      	movs	r0, #14
    2ece:	4240      	negs	r0, r0
    2ed0:	e747      	b.n	2d62 <recvfrom+0xf2>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
    2ed2:	2004      	movs	r0, #4
    2ed4:	4240      	negs	r0, r0
    2ed6:	e744      	b.n	2d62 <recvfrom+0xf2>
    2ed8:	20000aa4 	.word	0x20000aa4
    2edc:	20000a98 	.word	0x20000a98
    2ee0:	20000a9c 	.word	0x20000a9c
    2ee4:	000005ea 	.word	0x000005ea
    2ee8:	fffffc17 	.word	0xfffffc17

00002eec <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
    2eec:	b570      	push	{r4, r5, r6, lr}
    2eee:	0004      	movs	r4, r0
    2ef0:	0015      	movs	r5, r2
   CHECK_SOCKNUM();
    2ef2:	2808      	cmp	r0, #8
    2ef4:	d900      	bls.n	2ef8 <getsockopt+0xc>
    2ef6:	e0a6      	b.n	3046 <getsockopt+0x15a>
   switch(sotype)
    2ef8:	290c      	cmp	r1, #12
    2efa:	d900      	bls.n	2efe <getsockopt+0x12>
    2efc:	e0a6      	b.n	304c <getsockopt+0x160>
    2efe:	0089      	lsls	r1, r1, #2
    2f00:	4b57      	ldr	r3, [pc, #348]	; (3060 <getsockopt+0x174>)
    2f02:	585b      	ldr	r3, [r3, r1]
    2f04:	469f      	mov	pc, r3
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
    2f06:	0080      	lsls	r0, r0, #2
    2f08:	3001      	adds	r0, #1
    2f0a:	00c0      	lsls	r0, r0, #3
    2f0c:	f000 f8ae 	bl	306c <WIZCHIP_READ>
    2f10:	230f      	movs	r3, #15
    2f12:	4398      	bics	r0, r3
    2f14:	7028      	strb	r0, [r5, #0]
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    2f16:	2001      	movs	r0, #1
}
    2f18:	bd70      	pop	{r4, r5, r6, pc}
         *(uint8_t*) arg = getSn_TTL(sn);
    2f1a:	0080      	lsls	r0, r0, #2
    2f1c:	3001      	adds	r0, #1
    2f1e:	00c0      	lsls	r0, r0, #3
    2f20:	23b0      	movs	r3, #176	; 0xb0
    2f22:	015b      	lsls	r3, r3, #5
    2f24:	469c      	mov	ip, r3
    2f26:	4460      	add	r0, ip
    2f28:	f000 f8a0 	bl	306c <WIZCHIP_READ>
    2f2c:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    2f2e:	2001      	movs	r0, #1
         break;
    2f30:	e7f2      	b.n	2f18 <getsockopt+0x2c>
         *(uint8_t*) arg = getSn_TOS(sn);
    2f32:	0080      	lsls	r0, r0, #2
    2f34:	3001      	adds	r0, #1
    2f36:	00c0      	lsls	r0, r0, #3
    2f38:	23a8      	movs	r3, #168	; 0xa8
    2f3a:	015b      	lsls	r3, r3, #5
    2f3c:	469c      	mov	ip, r3
    2f3e:	4460      	add	r0, ip
    2f40:	f000 f894 	bl	306c <WIZCHIP_READ>
    2f44:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    2f46:	2001      	movs	r0, #1
         break;
    2f48:	e7e6      	b.n	2f18 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_MSSR(sn);
    2f4a:	0084      	lsls	r4, r0, #2
    2f4c:	3401      	adds	r4, #1
    2f4e:	00e4      	lsls	r4, r4, #3
    2f50:	2390      	movs	r3, #144	; 0x90
    2f52:	015b      	lsls	r3, r3, #5
    2f54:	18e0      	adds	r0, r4, r3
    2f56:	f000 f889 	bl	306c <WIZCHIP_READ>
    2f5a:	b286      	uxth	r6, r0
    2f5c:	0236      	lsls	r6, r6, #8
    2f5e:	b2b6      	uxth	r6, r6
    2f60:	2398      	movs	r3, #152	; 0x98
    2f62:	015b      	lsls	r3, r3, #5
    2f64:	18e0      	adds	r0, r4, r3
    2f66:	f000 f881 	bl	306c <WIZCHIP_READ>
    2f6a:	b280      	uxth	r0, r0
    2f6c:	1836      	adds	r6, r6, r0
    2f6e:	802e      	strh	r6, [r5, #0]
   return SOCK_OK;
    2f70:	2001      	movs	r0, #1
         break;
    2f72:	e7d1      	b.n	2f18 <getsockopt+0x2c>
         getSn_DIPR(sn, (uint8_t*)arg);
    2f74:	0080      	lsls	r0, r0, #2
    2f76:	3001      	adds	r0, #1
    2f78:	00c0      	lsls	r0, r0, #3
    2f7a:	23c0      	movs	r3, #192	; 0xc0
    2f7c:	011b      	lsls	r3, r3, #4
    2f7e:	469c      	mov	ip, r3
    2f80:	4460      	add	r0, ip
    2f82:	2204      	movs	r2, #4
    2f84:	0029      	movs	r1, r5
    2f86:	f000 f8d3 	bl	3130 <WIZCHIP_READ_BUF>
   return SOCK_OK;
    2f8a:	2001      	movs	r0, #1
         break;
    2f8c:	e7c4      	b.n	2f18 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_DPORT(sn);
    2f8e:	0084      	lsls	r4, r0, #2
    2f90:	3401      	adds	r4, #1
    2f92:	00e4      	lsls	r4, r4, #3
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	015b      	lsls	r3, r3, #5
    2f98:	18e0      	adds	r0, r4, r3
    2f9a:	f000 f867 	bl	306c <WIZCHIP_READ>
    2f9e:	b286      	uxth	r6, r0
    2fa0:	0236      	lsls	r6, r6, #8
    2fa2:	b2b6      	uxth	r6, r6
    2fa4:	2388      	movs	r3, #136	; 0x88
    2fa6:	015b      	lsls	r3, r3, #5
    2fa8:	18e0      	adds	r0, r4, r3
    2faa:	f000 f85f 	bl	306c <WIZCHIP_READ>
    2fae:	b280      	uxth	r0, r0
    2fb0:	1836      	adds	r6, r6, r0
    2fb2:	802e      	strh	r6, [r5, #0]
   return SOCK_OK;
    2fb4:	2001      	movs	r0, #1
         break;
    2fb6:	e7af      	b.n	2f18 <getsockopt+0x2c>
         CHECK_SOCKMODE(Sn_MR_TCP);
    2fb8:	0084      	lsls	r4, r0, #2
    2fba:	3401      	adds	r4, #1
    2fbc:	00e4      	lsls	r4, r4, #3
    2fbe:	0020      	movs	r0, r4
    2fc0:	f000 f854 	bl	306c <WIZCHIP_READ>
    2fc4:	230f      	movs	r3, #15
    2fc6:	4018      	ands	r0, r3
    2fc8:	2801      	cmp	r0, #1
    2fca:	d142      	bne.n	3052 <getsockopt+0x166>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
    2fcc:	23bc      	movs	r3, #188	; 0xbc
    2fce:	019b      	lsls	r3, r3, #6
    2fd0:	18e0      	adds	r0, r4, r3
    2fd2:	f000 f84b 	bl	306c <WIZCHIP_READ>
    2fd6:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    2fd8:	2001      	movs	r0, #1
         break;
    2fda:	e79d      	b.n	2f18 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_TX_FSR(sn);
    2fdc:	f000 f924 	bl	3228 <getSn_TX_FSR>
    2fe0:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    2fe2:	2001      	movs	r0, #1
         break;
    2fe4:	e798      	b.n	2f18 <getsockopt+0x2c>
         *(uint16_t*) arg = getSn_RX_RSR(sn);
    2fe6:	f000 f951 	bl	328c <getSn_RX_RSR>
    2fea:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    2fec:	2001      	movs	r0, #1
         break;
    2fee:	e793      	b.n	2f18 <getsockopt+0x2c>
         *(uint8_t*) arg = getSn_SR(sn);
    2ff0:	0080      	lsls	r0, r0, #2
    2ff2:	3001      	adds	r0, #1
    2ff4:	00c0      	lsls	r0, r0, #3
    2ff6:	23c0      	movs	r3, #192	; 0xc0
    2ff8:	009b      	lsls	r3, r3, #2
    2ffa:	469c      	mov	ip, r3
    2ffc:	4460      	add	r0, ip
    2ffe:	f000 f835 	bl	306c <WIZCHIP_READ>
    3002:	7028      	strb	r0, [r5, #0]
   return SOCK_OK;
    3004:	2001      	movs	r0, #1
         break;
    3006:	e787      	b.n	2f18 <getsockopt+0x2c>
         if(getSn_MR(sn) & Sn_MR_TCP)
    3008:	0080      	lsls	r0, r0, #2
    300a:	3001      	adds	r0, #1
    300c:	00c0      	lsls	r0, r0, #3
    300e:	f000 f82d 	bl	306c <WIZCHIP_READ>
    3012:	07c3      	lsls	r3, r0, #31
    3014:	d405      	bmi.n	3022 <getsockopt+0x136>
            *(uint16_t*)arg = sock_remained_size[sn];
    3016:	0064      	lsls	r4, r4, #1
    3018:	4b12      	ldr	r3, [pc, #72]	; (3064 <getsockopt+0x178>)
    301a:	5ae3      	ldrh	r3, [r4, r3]
    301c:	802b      	strh	r3, [r5, #0]
   return SOCK_OK;
    301e:	2001      	movs	r0, #1
    3020:	e77a      	b.n	2f18 <getsockopt+0x2c>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
    3022:	0020      	movs	r0, r4
    3024:	f000 f932 	bl	328c <getSn_RX_RSR>
    3028:	8028      	strh	r0, [r5, #0]
   return SOCK_OK;
    302a:	2001      	movs	r0, #1
    302c:	e774      	b.n	2f18 <getsockopt+0x2c>
         if((getSn_MR(sn) == Sn_MR_TCP))
    302e:	0080      	lsls	r0, r0, #2
    3030:	3001      	adds	r0, #1
    3032:	00c0      	lsls	r0, r0, #3
    3034:	f000 f81a 	bl	306c <WIZCHIP_READ>
    3038:	2801      	cmp	r0, #1
    303a:	d00d      	beq.n	3058 <getsockopt+0x16c>
         *(uint8_t*)arg = sock_pack_info[sn];
    303c:	4b0a      	ldr	r3, [pc, #40]	; (3068 <getsockopt+0x17c>)
    303e:	5d1b      	ldrb	r3, [r3, r4]
    3040:	702b      	strb	r3, [r5, #0]
   return SOCK_OK;
    3042:	2001      	movs	r0, #1
         break;
    3044:	e768      	b.n	2f18 <getsockopt+0x2c>
   CHECK_SOCKNUM();
    3046:	2001      	movs	r0, #1
    3048:	4240      	negs	r0, r0
    304a:	e765      	b.n	2f18 <getsockopt+0x2c>
         return SOCKERR_SOCKOPT;
    304c:	2002      	movs	r0, #2
    304e:	4240      	negs	r0, r0
    3050:	e762      	b.n	2f18 <getsockopt+0x2c>
         CHECK_SOCKMODE(Sn_MR_TCP);
    3052:	2005      	movs	r0, #5
    3054:	4240      	negs	r0, r0
    3056:	e75f      	b.n	2f18 <getsockopt+0x2c>
             return SOCKERR_SOCKMODE;
    3058:	2005      	movs	r0, #5
    305a:	4240      	negs	r0, r0
    305c:	e75c      	b.n	2f18 <getsockopt+0x2c>
    305e:	46c0      	nop			; (mov r8, r8)
    3060:	0000f664 	.word	0x0000f664
    3064:	20000aa4 	.word	0x20000aa4
    3068:	20000a9c 	.word	0x20000a9c

0000306c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    306c:	b530      	push	{r4, r5, lr}
    306e:	b083      	sub	sp, #12
    3070:	0004      	movs	r4, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    3072:	4d16      	ldr	r5, [pc, #88]	; (30cc <WIZCHIP_READ+0x60>)
    3074:	68eb      	ldr	r3, [r5, #12]
    3076:	4798      	blx	r3
   WIZCHIP.CS._select();
    3078:	696b      	ldr	r3, [r5, #20]
    307a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    307c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    307e:	2b00      	cmp	r3, #0
    3080:	d016      	beq.n	30b0 <WIZCHIP_READ+0x44>
    3082:	4b12      	ldr	r3, [pc, #72]	; (30cc <WIZCHIP_READ+0x60>)
    3084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3086:	2b00      	cmp	r3, #0
    3088:	d012      	beq.n	30b0 <WIZCHIP_READ+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    308a:	0c22      	lsrs	r2, r4, #16
    308c:	a801      	add	r0, sp, #4
    308e:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    3090:	0a22      	lsrs	r2, r4, #8
    3092:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    3094:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    3096:	2103      	movs	r1, #3
    3098:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    309a:	4c0c      	ldr	r4, [pc, #48]	; (30cc <WIZCHIP_READ+0x60>)
    309c:	69e3      	ldr	r3, [r4, #28]
    309e:	4798      	blx	r3
    30a0:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
    30a2:	69a3      	ldr	r3, [r4, #24]
    30a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    30a6:	6923      	ldr	r3, [r4, #16]
    30a8:	4798      	blx	r3
   return ret;
}
    30aa:	0028      	movs	r0, r5
    30ac:	b003      	add	sp, #12
    30ae:	bd30      	pop	{r4, r5, pc}
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    30b0:	4d06      	ldr	r5, [pc, #24]	; (30cc <WIZCHIP_READ+0x60>)
    30b2:	0c20      	lsrs	r0, r4, #16
    30b4:	b2c0      	uxtb	r0, r0
    30b6:	6a2b      	ldr	r3, [r5, #32]
    30b8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    30ba:	0a20      	lsrs	r0, r4, #8
    30bc:	b2c0      	uxtb	r0, r0
    30be:	6a2b      	ldr	r3, [r5, #32]
    30c0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    30c2:	6a2b      	ldr	r3, [r5, #32]
    30c4:	b2e0      	uxtb	r0, r4
    30c6:	4798      	blx	r3
    30c8:	e7e7      	b.n	309a <WIZCHIP_READ+0x2e>
    30ca:	46c0      	nop			; (mov r8, r8)
    30cc:	20000004 	.word	0x20000004

000030d0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    30d0:	b570      	push	{r4, r5, r6, lr}
    30d2:	b082      	sub	sp, #8
    30d4:	0004      	movs	r4, r0
    30d6:	000e      	movs	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    30d8:	4d14      	ldr	r5, [pc, #80]	; (312c <WIZCHIP_WRITE+0x5c>)
    30da:	68eb      	ldr	r3, [r5, #12]
    30dc:	4798      	blx	r3
   WIZCHIP.CS._select();
    30de:	696b      	ldr	r3, [r5, #20]
    30e0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    30e2:	2004      	movs	r0, #4
    30e4:	4304      	orrs	r4, r0

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    30e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    30e8:	2b00      	cmp	r3, #0
    30ea:	d00f      	beq.n	310c <WIZCHIP_WRITE+0x3c>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    30ec:	0c22      	lsrs	r2, r4, #16
    30ee:	a801      	add	r0, sp, #4
    30f0:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    30f2:	0a22      	lsrs	r2, r4, #8
    30f4:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    30f6:	7084      	strb	r4, [r0, #2]
		spi_data[3] = wb;
    30f8:	70c6      	strb	r6, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    30fa:	2104      	movs	r1, #4
    30fc:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    30fe:	4c0b      	ldr	r4, [pc, #44]	; (312c <WIZCHIP_WRITE+0x5c>)
    3100:	69a3      	ldr	r3, [r4, #24]
    3102:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    3104:	6923      	ldr	r3, [r4, #16]
    3106:	4798      	blx	r3
}
    3108:	b002      	add	sp, #8
    310a:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    310c:	4d07      	ldr	r5, [pc, #28]	; (312c <WIZCHIP_WRITE+0x5c>)
    310e:	0c20      	lsrs	r0, r4, #16
    3110:	b2c0      	uxtb	r0, r0
    3112:	6a2b      	ldr	r3, [r5, #32]
    3114:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3116:	0a20      	lsrs	r0, r4, #8
    3118:	b2c0      	uxtb	r0, r0
    311a:	6a2b      	ldr	r3, [r5, #32]
    311c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    311e:	b2e0      	uxtb	r0, r4
    3120:	6a2b      	ldr	r3, [r5, #32]
    3122:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
    3124:	6a2b      	ldr	r3, [r5, #32]
    3126:	0030      	movs	r0, r6
    3128:	4798      	blx	r3
    312a:	e7e8      	b.n	30fe <WIZCHIP_WRITE+0x2e>
    312c:	20000004 	.word	0x20000004

00003130 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    3130:	b5f0      	push	{r4, r5, r6, r7, lr}
    3132:	b083      	sub	sp, #12
    3134:	0004      	movs	r4, r0
    3136:	000f      	movs	r7, r1
    3138:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    313a:	4d1c      	ldr	r5, [pc, #112]	; (31ac <WIZCHIP_READ_BUF+0x7c>)
    313c:	68eb      	ldr	r3, [r5, #12]
    313e:	4798      	blx	r3
   WIZCHIP.CS._select();
    3140:	696b      	ldr	r3, [r5, #20]
    3142:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    3144:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3146:	2b00      	cmp	r3, #0
    3148:	d017      	beq.n	317a <WIZCHIP_READ_BUF+0x4a>
    314a:	4b18      	ldr	r3, [pc, #96]	; (31ac <WIZCHIP_READ_BUF+0x7c>)
    314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    314e:	2b00      	cmp	r3, #0
    3150:	d013      	beq.n	317a <WIZCHIP_READ_BUF+0x4a>
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    3152:	0c22      	lsrs	r2, r4, #16
    3154:	a801      	add	r0, sp, #4
    3156:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    3158:	0a22      	lsrs	r2, r4, #8
    315a:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    315c:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    315e:	2103      	movs	r1, #3
    3160:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    3162:	4b12      	ldr	r3, [pc, #72]	; (31ac <WIZCHIP_READ_BUF+0x7c>)
    3164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3166:	0031      	movs	r1, r6
    3168:	0038      	movs	r0, r7
    316a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    316c:	4c0f      	ldr	r4, [pc, #60]	; (31ac <WIZCHIP_READ_BUF+0x7c>)
    316e:	69a3      	ldr	r3, [r4, #24]
    3170:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    3172:	6923      	ldr	r3, [r4, #16]
    3174:	4798      	blx	r3
}
    3176:	b003      	add	sp, #12
    3178:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    317a:	4d0c      	ldr	r5, [pc, #48]	; (31ac <WIZCHIP_READ_BUF+0x7c>)
    317c:	0c20      	lsrs	r0, r4, #16
    317e:	b2c0      	uxtb	r0, r0
    3180:	6a2b      	ldr	r3, [r5, #32]
    3182:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3184:	0a20      	lsrs	r0, r4, #8
    3186:	b2c0      	uxtb	r0, r0
    3188:	6a2b      	ldr	r3, [r5, #32]
    318a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    318c:	6a2b      	ldr	r3, [r5, #32]
    318e:	b2e0      	uxtb	r0, r4
    3190:	4798      	blx	r3
		for(i = 0; i < len; i++)
    3192:	2400      	movs	r4, #0
    3194:	e006      	b.n	31a4 <WIZCHIP_READ_BUF+0x74>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    3196:	193d      	adds	r5, r7, r4
    3198:	4b04      	ldr	r3, [pc, #16]	; (31ac <WIZCHIP_READ_BUF+0x7c>)
    319a:	69db      	ldr	r3, [r3, #28]
    319c:	4798      	blx	r3
    319e:	7028      	strb	r0, [r5, #0]
		for(i = 0; i < len; i++)
    31a0:	3401      	adds	r4, #1
    31a2:	b2a4      	uxth	r4, r4
    31a4:	42b4      	cmp	r4, r6
    31a6:	d3f6      	bcc.n	3196 <WIZCHIP_READ_BUF+0x66>
    31a8:	e7e0      	b.n	316c <WIZCHIP_READ_BUF+0x3c>
    31aa:	46c0      	nop			; (mov r8, r8)
    31ac:	20000004 	.word	0x20000004

000031b0 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    31b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    31b2:	b083      	sub	sp, #12
    31b4:	0004      	movs	r4, r0
    31b6:	000f      	movs	r7, r1
    31b8:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    31ba:	4d1a      	ldr	r5, [pc, #104]	; (3224 <WIZCHIP_WRITE_BUF+0x74>)
    31bc:	68eb      	ldr	r3, [r5, #12]
    31be:	4798      	blx	r3
   WIZCHIP.CS._select();
    31c0:	696b      	ldr	r3, [r5, #20]
    31c2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    31c4:	2004      	movs	r0, #4
    31c6:	4304      	orrs	r4, r0

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    31c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    31ca:	2b00      	cmp	r3, #0
    31cc:	d013      	beq.n	31f6 <WIZCHIP_WRITE_BUF+0x46>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    31ce:	0c22      	lsrs	r2, r4, #16
    31d0:	a801      	add	r0, sp, #4
    31d2:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    31d4:	0a22      	lsrs	r2, r4, #8
    31d6:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    31d8:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    31da:	2103      	movs	r1, #3
    31dc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    31de:	4b11      	ldr	r3, [pc, #68]	; (3224 <WIZCHIP_WRITE_BUF+0x74>)
    31e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31e2:	0031      	movs	r1, r6
    31e4:	0038      	movs	r0, r7
    31e6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    31e8:	4c0e      	ldr	r4, [pc, #56]	; (3224 <WIZCHIP_WRITE_BUF+0x74>)
    31ea:	69a3      	ldr	r3, [r4, #24]
    31ec:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    31ee:	6923      	ldr	r3, [r4, #16]
    31f0:	4798      	blx	r3
}
    31f2:	b003      	add	sp, #12
    31f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    31f6:	4d0b      	ldr	r5, [pc, #44]	; (3224 <WIZCHIP_WRITE_BUF+0x74>)
    31f8:	0c20      	lsrs	r0, r4, #16
    31fa:	b2c0      	uxtb	r0, r0
    31fc:	6a2b      	ldr	r3, [r5, #32]
    31fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    3200:	0a20      	lsrs	r0, r4, #8
    3202:	b2c0      	uxtb	r0, r0
    3204:	6a2b      	ldr	r3, [r5, #32]
    3206:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    3208:	6a2b      	ldr	r3, [r5, #32]
    320a:	b2e0      	uxtb	r0, r4
    320c:	4798      	blx	r3
		for(i = 0; i < len; i++)
    320e:	2400      	movs	r4, #0
    3210:	e005      	b.n	321e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    3212:	4b04      	ldr	r3, [pc, #16]	; (3224 <WIZCHIP_WRITE_BUF+0x74>)
    3214:	6a1b      	ldr	r3, [r3, #32]
    3216:	5d38      	ldrb	r0, [r7, r4]
    3218:	4798      	blx	r3
		for(i = 0; i < len; i++)
    321a:	3401      	adds	r4, #1
    321c:	b2a4      	uxth	r4, r4
    321e:	42b4      	cmp	r4, r6
    3220:	d3f7      	bcc.n	3212 <WIZCHIP_WRITE_BUF+0x62>
    3222:	e7e1      	b.n	31e8 <WIZCHIP_WRITE_BUF+0x38>
    3224:	20000004 	.word	0x20000004

00003228 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    3228:	b5f0      	push	{r4, r5, r6, r7, lr}
    322a:	46c6      	mov	lr, r8
    322c:	b500      	push	{lr}
    322e:	0007      	movs	r7, r0
   uint16_t val=0,val1=0;
    3230:	2500      	movs	r5, #0
    3232:	e001      	b.n	3238 <getSn_TX_FSR+0x10>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
      }
   }while (val != val1);
    3234:	42a5      	cmp	r5, r4
    3236:	d025      	beq.n	3284 <getSn_TX_FSR+0x5c>
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    3238:	00bb      	lsls	r3, r7, #2
    323a:	3301      	adds	r3, #1
    323c:	00db      	lsls	r3, r3, #3
    323e:	4698      	mov	r8, r3
    3240:	2680      	movs	r6, #128	; 0x80
    3242:	01b6      	lsls	r6, r6, #6
    3244:	4446      	add	r6, r8
    3246:	0030      	movs	r0, r6
    3248:	f7ff ff10 	bl	306c <WIZCHIP_READ>
    324c:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    324e:	0224      	lsls	r4, r4, #8
    3250:	b2a4      	uxth	r4, r4
    3252:	2384      	movs	r3, #132	; 0x84
    3254:	019b      	lsls	r3, r3, #6
    3256:	469c      	mov	ip, r3
    3258:	44e0      	add	r8, ip
    325a:	4640      	mov	r0, r8
    325c:	f7ff ff06 	bl	306c <WIZCHIP_READ>
    3260:	b280      	uxth	r0, r0
    3262:	1824      	adds	r4, r4, r0
    3264:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    3266:	2c00      	cmp	r4, #0
    3268:	d0e4      	beq.n	3234 <getSn_TX_FSR+0xc>
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    326a:	0030      	movs	r0, r6
    326c:	f7ff fefe 	bl	306c <WIZCHIP_READ>
    3270:	b280      	uxth	r0, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    3272:	0200      	lsls	r0, r0, #8
    3274:	b285      	uxth	r5, r0
    3276:	4640      	mov	r0, r8
    3278:	f7ff fef8 	bl	306c <WIZCHIP_READ>
    327c:	b280      	uxth	r0, r0
    327e:	182d      	adds	r5, r5, r0
    3280:	b2ad      	uxth	r5, r5
    3282:	e7d7      	b.n	3234 <getSn_TX_FSR+0xc>
   return val;
}
    3284:	0028      	movs	r0, r5
    3286:	bc04      	pop	{r2}
    3288:	4690      	mov	r8, r2
    328a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000328c <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    328c:	b5f0      	push	{r4, r5, r6, r7, lr}
    328e:	46c6      	mov	lr, r8
    3290:	b500      	push	{lr}
    3292:	0007      	movs	r7, r0
   uint16_t val=0,val1=0;
    3294:	2500      	movs	r5, #0
    3296:	e001      	b.n	329c <getSn_RX_RSR+0x10>
      if (val1 != 0)
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
      }
   }while (val != val1);
    3298:	42a5      	cmp	r5, r4
    329a:	d025      	beq.n	32e8 <getSn_RX_RSR+0x5c>
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    329c:	00bb      	lsls	r3, r7, #2
    329e:	3301      	adds	r3, #1
    32a0:	00db      	lsls	r3, r3, #3
    32a2:	4698      	mov	r8, r3
    32a4:	2698      	movs	r6, #152	; 0x98
    32a6:	01b6      	lsls	r6, r6, #6
    32a8:	4446      	add	r6, r8
    32aa:	0030      	movs	r0, r6
    32ac:	f7ff fede 	bl	306c <WIZCHIP_READ>
    32b0:	b284      	uxth	r4, r0
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    32b2:	0224      	lsls	r4, r4, #8
    32b4:	b2a4      	uxth	r4, r4
    32b6:	239c      	movs	r3, #156	; 0x9c
    32b8:	019b      	lsls	r3, r3, #6
    32ba:	469c      	mov	ip, r3
    32bc:	44e0      	add	r8, ip
    32be:	4640      	mov	r0, r8
    32c0:	f7ff fed4 	bl	306c <WIZCHIP_READ>
    32c4:	b280      	uxth	r0, r0
    32c6:	1824      	adds	r4, r4, r0
    32c8:	b2a4      	uxth	r4, r4
      if (val1 != 0)
    32ca:	2c00      	cmp	r4, #0
    32cc:	d0e4      	beq.n	3298 <getSn_RX_RSR+0xc>
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    32ce:	0030      	movs	r0, r6
    32d0:	f7ff fecc 	bl	306c <WIZCHIP_READ>
    32d4:	b280      	uxth	r0, r0
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    32d6:	0200      	lsls	r0, r0, #8
    32d8:	b285      	uxth	r5, r0
    32da:	4640      	mov	r0, r8
    32dc:	f7ff fec6 	bl	306c <WIZCHIP_READ>
    32e0:	b280      	uxth	r0, r0
    32e2:	182d      	adds	r5, r5, r0
    32e4:	b2ad      	uxth	r5, r5
    32e6:	e7d7      	b.n	3298 <getSn_RX_RSR+0xc>
   return val;
}
    32e8:	0028      	movs	r0, r5
    32ea:	bc04      	pop	{r2}
    32ec:	4690      	mov	r8, r2
    32ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000032f0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    32f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32f2:	b083      	sub	sp, #12
    32f4:	9100      	str	r1, [sp, #0]
    32f6:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    32f8:	d101      	bne.n	32fe <wiz_send_data+0xe>
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
   
   ptr += len;
   setSn_TX_WR(sn,ptr);
}
    32fa:	b003      	add	sp, #12
    32fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_TX_WR(sn);
    32fe:	0086      	lsls	r6, r0, #2
    3300:	1c75      	adds	r5, r6, #1
    3302:	00ed      	lsls	r5, r5, #3
    3304:	2390      	movs	r3, #144	; 0x90
    3306:	019b      	lsls	r3, r3, #6
    3308:	469c      	mov	ip, r3
    330a:	44ac      	add	ip, r5
    330c:	4663      	mov	r3, ip
    330e:	9301      	str	r3, [sp, #4]
    3310:	4660      	mov	r0, ip
    3312:	f7ff feab 	bl	306c <WIZCHIP_READ>
    3316:	b280      	uxth	r0, r0
    3318:	0200      	lsls	r0, r0, #8
    331a:	b287      	uxth	r7, r0
    331c:	2294      	movs	r2, #148	; 0x94
    331e:	0192      	lsls	r2, r2, #6
    3320:	4694      	mov	ip, r2
    3322:	4465      	add	r5, ip
    3324:	0028      	movs	r0, r5
    3326:	f7ff fea1 	bl	306c <WIZCHIP_READ>
    332a:	b280      	uxth	r0, r0
    332c:	1838      	adds	r0, r7, r0
    332e:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
    3330:	023b      	lsls	r3, r7, #8
    3332:	1cb0      	adds	r0, r6, #2
    3334:	00c0      	lsls	r0, r0, #3
    3336:	1818      	adds	r0, r3, r0
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    3338:	0022      	movs	r2, r4
    333a:	9900      	ldr	r1, [sp, #0]
    333c:	f7ff ff38 	bl	31b0 <WIZCHIP_WRITE_BUF>
   ptr += len;
    3340:	19e4      	adds	r4, r4, r7
    3342:	b2a4      	uxth	r4, r4
   setSn_TX_WR(sn,ptr);
    3344:	0a21      	lsrs	r1, r4, #8
    3346:	9801      	ldr	r0, [sp, #4]
    3348:	f7ff fec2 	bl	30d0 <WIZCHIP_WRITE>
    334c:	b2e1      	uxtb	r1, r4
    334e:	0028      	movs	r0, r5
    3350:	f7ff febe 	bl	30d0 <WIZCHIP_WRITE>
    3354:	e7d1      	b.n	32fa <wiz_send_data+0xa>

00003356 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    3356:	b5f0      	push	{r4, r5, r6, r7, lr}
    3358:	b083      	sub	sp, #12
    335a:	9100      	str	r1, [sp, #0]
    335c:	1e14      	subs	r4, r2, #0
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    335e:	d101      	bne.n	3364 <wiz_recv_data+0xe>
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
   ptr += len;
   
   setSn_RX_RD(sn,ptr);
}
    3360:	b003      	add	sp, #12
    3362:	bdf0      	pop	{r4, r5, r6, r7, pc}
   ptr = getSn_RX_RD(sn);
    3364:	0086      	lsls	r6, r0, #2
    3366:	1c75      	adds	r5, r6, #1
    3368:	00ed      	lsls	r5, r5, #3
    336a:	23a0      	movs	r3, #160	; 0xa0
    336c:	019b      	lsls	r3, r3, #6
    336e:	469c      	mov	ip, r3
    3370:	44ac      	add	ip, r5
    3372:	4663      	mov	r3, ip
    3374:	9301      	str	r3, [sp, #4]
    3376:	4660      	mov	r0, ip
    3378:	f7ff fe78 	bl	306c <WIZCHIP_READ>
    337c:	b280      	uxth	r0, r0
    337e:	0200      	lsls	r0, r0, #8
    3380:	b287      	uxth	r7, r0
    3382:	22a4      	movs	r2, #164	; 0xa4
    3384:	0192      	lsls	r2, r2, #6
    3386:	4694      	mov	ip, r2
    3388:	4465      	add	r5, ip
    338a:	0028      	movs	r0, r5
    338c:	f7ff fe6e 	bl	306c <WIZCHIP_READ>
    3390:	b280      	uxth	r0, r0
    3392:	1838      	adds	r0, r7, r0
    3394:	b287      	uxth	r7, r0
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
    3396:	023b      	lsls	r3, r7, #8
    3398:	1cf0      	adds	r0, r6, #3
    339a:	00c0      	lsls	r0, r0, #3
    339c:	1818      	adds	r0, r3, r0
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    339e:	0022      	movs	r2, r4
    33a0:	9900      	ldr	r1, [sp, #0]
    33a2:	f7ff fec5 	bl	3130 <WIZCHIP_READ_BUF>
   ptr += len;
    33a6:	19e4      	adds	r4, r4, r7
    33a8:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
    33aa:	0a21      	lsrs	r1, r4, #8
    33ac:	9801      	ldr	r0, [sp, #4]
    33ae:	f7ff fe8f 	bl	30d0 <WIZCHIP_WRITE>
    33b2:	b2e1      	uxtb	r1, r4
    33b4:	0028      	movs	r0, r5
    33b6:	f7ff fe8b 	bl	30d0 <WIZCHIP_WRITE>
    33ba:	e7d1      	b.n	3360 <wiz_recv_data+0xa>

000033bc <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    33bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33be:	000c      	movs	r4, r1
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    33c0:	0087      	lsls	r7, r0, #2
    33c2:	3701      	adds	r7, #1
    33c4:	00ff      	lsls	r7, r7, #3
    33c6:	23a0      	movs	r3, #160	; 0xa0
    33c8:	019b      	lsls	r3, r3, #6
    33ca:	18fe      	adds	r6, r7, r3
    33cc:	0030      	movs	r0, r6
    33ce:	f7ff fe4d 	bl	306c <WIZCHIP_READ>
    33d2:	b280      	uxth	r0, r0
    33d4:	0200      	lsls	r0, r0, #8
    33d6:	b285      	uxth	r5, r0
    33d8:	23a4      	movs	r3, #164	; 0xa4
    33da:	019b      	lsls	r3, r3, #6
    33dc:	469c      	mov	ip, r3
    33de:	4467      	add	r7, ip
    33e0:	0038      	movs	r0, r7
    33e2:	f7ff fe43 	bl	306c <WIZCHIP_READ>
    33e6:	b280      	uxth	r0, r0
    33e8:	182d      	adds	r5, r5, r0
    33ea:	b2ad      	uxth	r5, r5
   ptr += len;
    33ec:	192c      	adds	r4, r5, r4
    33ee:	b2a4      	uxth	r4, r4
   setSn_RX_RD(sn,ptr);
    33f0:	0a21      	lsrs	r1, r4, #8
    33f2:	0030      	movs	r0, r6
    33f4:	f7ff fe6c 	bl	30d0 <WIZCHIP_WRITE>
    33f8:	b2e1      	uxtb	r1, r4
    33fa:	0038      	movs	r0, r7
    33fc:	f7ff fe68 	bl	30d0 <WIZCHIP_WRITE>
}
    3400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003402 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
    3402:	4770      	bx	lr

00003404 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
    3404:	4770      	bx	lr

00003406 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
    3406:	4770      	bx	lr

00003408 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
    3408:	4770      	bx	lr

0000340a <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
    340a:	7800      	ldrb	r0, [r0, #0]
    340c:	b2c0      	uxtb	r0, r0
    340e:	4770      	bx	lr

00003410 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
    3410:	7001      	strb	r1, [r0, #0]
    3412:	4770      	bx	lr

00003414 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
    3414:	2000      	movs	r0, #0
    3416:	4770      	bx	lr

00003418 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
    3418:	4770      	bx	lr

0000341a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
    341a:	4770      	bx	lr

0000341c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
    341c:	4770      	bx	lr
	...

00003420 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
    3420:	2800      	cmp	r0, #0
    3422:	d005      	beq.n	3430 <reg_wizchip_cs_cbfunc+0x10>
    3424:	2900      	cmp	r1, #0
    3426:	d003      	beq.n	3430 <reg_wizchip_cs_cbfunc+0x10>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
    3428:	4b04      	ldr	r3, [pc, #16]	; (343c <reg_wizchip_cs_cbfunc+0x1c>)
    342a:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
    342c:	6199      	str	r1, [r3, #24]
   }
}
    342e:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
    3430:	4b02      	ldr	r3, [pc, #8]	; (343c <reg_wizchip_cs_cbfunc+0x1c>)
    3432:	4a03      	ldr	r2, [pc, #12]	; (3440 <reg_wizchip_cs_cbfunc+0x20>)
    3434:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
    3436:	4a03      	ldr	r2, [pc, #12]	; (3444 <reg_wizchip_cs_cbfunc+0x24>)
    3438:	619a      	str	r2, [r3, #24]
    343a:	e7f8      	b.n	342e <reg_wizchip_cs_cbfunc+0xe>
    343c:	20000004 	.word	0x20000004
    3440:	00003407 	.word	0x00003407
    3444:	00003409 	.word	0x00003409

00003448 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    3448:	4b08      	ldr	r3, [pc, #32]	; (346c <reg_wizchip_spi_cbfunc+0x24>)
    344a:	881b      	ldrh	r3, [r3, #0]
    344c:	059b      	lsls	r3, r3, #22
    344e:	d5fb      	bpl.n	3448 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
    3450:	2800      	cmp	r0, #0
    3452:	d005      	beq.n	3460 <reg_wizchip_spi_cbfunc+0x18>
    3454:	2900      	cmp	r1, #0
    3456:	d003      	beq.n	3460 <reg_wizchip_spi_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
    3458:	4b04      	ldr	r3, [pc, #16]	; (346c <reg_wizchip_spi_cbfunc+0x24>)
    345a:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
    345c:	6219      	str	r1, [r3, #32]
   }
}
    345e:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
    3460:	4b02      	ldr	r3, [pc, #8]	; (346c <reg_wizchip_spi_cbfunc+0x24>)
    3462:	4a03      	ldr	r2, [pc, #12]	; (3470 <reg_wizchip_spi_cbfunc+0x28>)
    3464:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
    3466:	4a03      	ldr	r2, [pc, #12]	; (3474 <reg_wizchip_spi_cbfunc+0x2c>)
    3468:	621a      	str	r2, [r3, #32]
    346a:	e7f8      	b.n	345e <reg_wizchip_spi_cbfunc+0x16>
    346c:	20000004 	.word	0x20000004
    3470:	00003415 	.word	0x00003415
    3474:	00003419 	.word	0x00003419

00003478 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    3478:	4b08      	ldr	r3, [pc, #32]	; (349c <reg_wizchip_spiburst_cbfunc+0x24>)
    347a:	881b      	ldrh	r3, [r3, #0]
    347c:	059b      	lsls	r3, r3, #22
    347e:	d5fb      	bpl.n	3478 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
    3480:	2800      	cmp	r0, #0
    3482:	d005      	beq.n	3490 <reg_wizchip_spiburst_cbfunc+0x18>
    3484:	2900      	cmp	r1, #0
    3486:	d003      	beq.n	3490 <reg_wizchip_spiburst_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
    3488:	4b04      	ldr	r3, [pc, #16]	; (349c <reg_wizchip_spiburst_cbfunc+0x24>)
    348a:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
    348c:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
    348e:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
    3490:	4b02      	ldr	r3, [pc, #8]	; (349c <reg_wizchip_spiburst_cbfunc+0x24>)
    3492:	4a03      	ldr	r2, [pc, #12]	; (34a0 <reg_wizchip_spiburst_cbfunc+0x28>)
    3494:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
    3496:	4a03      	ldr	r2, [pc, #12]	; (34a4 <reg_wizchip_spiburst_cbfunc+0x2c>)
    3498:	629a      	str	r2, [r3, #40]	; 0x28
    349a:	e7f8      	b.n	348e <reg_wizchip_spiburst_cbfunc+0x16>
    349c:	20000004 	.word	0x20000004
    34a0:	0000341b 	.word	0x0000341b
    34a4:	0000341d 	.word	0x0000341d

000034a8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
    34a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34aa:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
    34ac:	2790      	movs	r7, #144	; 0x90
    34ae:	013f      	lsls	r7, r7, #4
    34b0:	2206      	movs	r2, #6
    34b2:	a901      	add	r1, sp, #4
    34b4:	0038      	movs	r0, r7
    34b6:	f7ff fe3b 	bl	3130 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
    34ba:	2680      	movs	r6, #128	; 0x80
    34bc:	0076      	lsls	r6, r6, #1
    34be:	2204      	movs	r2, #4
    34c0:	a905      	add	r1, sp, #20
    34c2:	0030      	movs	r0, r6
    34c4:	f7ff fe34 	bl	3130 <WIZCHIP_READ_BUF>
    34c8:	25a0      	movs	r5, #160	; 0xa0
    34ca:	00ed      	lsls	r5, r5, #3
    34cc:	2204      	movs	r2, #4
    34ce:	a904      	add	r1, sp, #16
    34d0:	0028      	movs	r0, r5
    34d2:	f7ff fe2d 	bl	3130 <WIZCHIP_READ_BUF>
    34d6:	24f0      	movs	r4, #240	; 0xf0
    34d8:	0124      	lsls	r4, r4, #4
    34da:	2204      	movs	r2, #4
    34dc:	a903      	add	r1, sp, #12
    34de:	0020      	movs	r0, r4
    34e0:	f7ff fe26 	bl	3130 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
    34e4:	2180      	movs	r1, #128	; 0x80
    34e6:	2000      	movs	r0, #0
    34e8:	f7ff fdf2 	bl	30d0 <WIZCHIP_WRITE>
   getMR(); // for delay
    34ec:	2000      	movs	r0, #0
    34ee:	f7ff fdbd 	bl	306c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
    34f2:	2206      	movs	r2, #6
    34f4:	a901      	add	r1, sp, #4
    34f6:	0038      	movs	r0, r7
    34f8:	f7ff fe5a 	bl	31b0 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
    34fc:	2204      	movs	r2, #4
    34fe:	a905      	add	r1, sp, #20
    3500:	0030      	movs	r0, r6
    3502:	f7ff fe55 	bl	31b0 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
    3506:	2204      	movs	r2, #4
    3508:	a904      	add	r1, sp, #16
    350a:	0028      	movs	r0, r5
    350c:	f7ff fe50 	bl	31b0 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
    3510:	2204      	movs	r2, #4
    3512:	a903      	add	r1, sp, #12
    3514:	0020      	movs	r0, r4
    3516:	f7ff fe4b 	bl	31b0 <WIZCHIP_WRITE_BUF>
}
    351a:	b007      	add	sp, #28
    351c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000351e <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
    351e:	b570      	push	{r4, r5, r6, lr}
    3520:	0006      	movs	r6, r0
    3522:	000d      	movs	r5, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
    3524:	f7ff ffc0 	bl	34a8 <wizchip_sw_reset>
   if(txsize)
    3528:	2e00      	cmp	r6, #0
    352a:	d01b      	beq.n	3564 <wizchip_init+0x46>
    352c:	2200      	movs	r2, #0
    352e:	2300      	movs	r3, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    3530:	2b07      	cmp	r3, #7
    3532:	dc07      	bgt.n	3544 <wizchip_init+0x26>
		{
			tmp += txsize[i];
    3534:	5cf1      	ldrb	r1, [r6, r3]
    3536:	188a      	adds	r2, r1, r2
    3538:	b252      	sxtb	r2, r2

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    353a:	2a10      	cmp	r2, #16
    353c:	dc34      	bgt.n	35a8 <wizchip_init+0x8a>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    353e:	3301      	adds	r3, #1
    3540:	b25b      	sxtb	r3, r3
    3542:	e7f5      	b.n	3530 <wizchip_init+0x12>
    3544:	2400      	movs	r4, #0
    3546:	e00b      	b.n	3560 <wizchip_init+0x42>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
    3548:	00a0      	lsls	r0, r4, #2
    354a:	3001      	adds	r0, #1
    354c:	00c0      	lsls	r0, r0, #3
    354e:	23f8      	movs	r3, #248	; 0xf8
    3550:	015b      	lsls	r3, r3, #5
    3552:	469c      	mov	ip, r3
    3554:	4460      	add	r0, ip
    3556:	5d31      	ldrb	r1, [r6, r4]
    3558:	f7ff fdba 	bl	30d0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    355c:	3401      	adds	r4, #1
    355e:	b264      	sxtb	r4, r4
    3560:	2c07      	cmp	r4, #7
    3562:	ddf1      	ble.n	3548 <wizchip_init+0x2a>
#endif
		}	
   }

   if(rxsize)
    3564:	2d00      	cmp	r5, #0
    3566:	d00b      	beq.n	3580 <wizchip_init+0x62>
    3568:	2200      	movs	r2, #0
    356a:	2300      	movs	r3, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    356c:	2b07      	cmp	r3, #7
    356e:	dc09      	bgt.n	3584 <wizchip_init+0x66>
		{
			tmp += rxsize[i];
    3570:	5ce9      	ldrb	r1, [r5, r3]
    3572:	188a      	adds	r2, r1, r2
    3574:	b252      	sxtb	r2, r2
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    3576:	2a10      	cmp	r2, #16
    3578:	dc19      	bgt.n	35ae <wizchip_init+0x90>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    357a:	3301      	adds	r3, #1
    357c:	b25b      	sxtb	r3, r3
    357e:	e7f5      	b.n	356c <wizchip_init+0x4e>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    3580:	2000      	movs	r0, #0
    3582:	e010      	b.n	35a6 <wizchip_init+0x88>
    3584:	2400      	movs	r4, #0
    3586:	e00b      	b.n	35a0 <wizchip_init+0x82>
			setSn_RXBUF_SIZE(i, rxsize[i]);
    3588:	00a0      	lsls	r0, r4, #2
    358a:	3001      	adds	r0, #1
    358c:	00c0      	lsls	r0, r0, #3
    358e:	23f0      	movs	r3, #240	; 0xf0
    3590:	015b      	lsls	r3, r3, #5
    3592:	469c      	mov	ip, r3
    3594:	4460      	add	r0, ip
    3596:	5d29      	ldrb	r1, [r5, r4]
    3598:	f7ff fd9a 	bl	30d0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    359c:	3401      	adds	r4, #1
    359e:	b264      	sxtb	r4, r4
    35a0:	2c07      	cmp	r4, #7
    35a2:	ddf1      	ble.n	3588 <wizchip_init+0x6a>
   return 0;
    35a4:	2000      	movs	r0, #0
}
    35a6:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
    35a8:	2001      	movs	r0, #1
    35aa:	4240      	negs	r0, r0
    35ac:	e7fb      	b.n	35a6 <wizchip_init+0x88>
			if(tmp > 16) return -1;
    35ae:	2001      	movs	r0, #1
    35b0:	4240      	negs	r0, r0
    35b2:	e7f8      	b.n	35a6 <wizchip_init+0x88>

000035b4 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
    35b4:	b510      	push	{r4, lr}
   uint8_t tmp = getPHYCFGR();
    35b6:	24b8      	movs	r4, #184	; 0xb8
    35b8:	01a4      	lsls	r4, r4, #6
    35ba:	0020      	movs	r0, r4
    35bc:	f7ff fd56 	bl	306c <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
    35c0:	217f      	movs	r1, #127	; 0x7f
    35c2:	4001      	ands	r1, r0
   setPHYCFGR(tmp);
    35c4:	0020      	movs	r0, r4
    35c6:	f7ff fd83 	bl	30d0 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
    35ca:	0020      	movs	r0, r4
    35cc:	f7ff fd4e 	bl	306c <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
    35d0:	2180      	movs	r1, #128	; 0x80
    35d2:	4249      	negs	r1, r1
    35d4:	4301      	orrs	r1, r0
    35d6:	b2c9      	uxtb	r1, r1
   setPHYCFGR(tmp);
    35d8:	0020      	movs	r0, r4
    35da:	f7ff fd79 	bl	30d0 <WIZCHIP_WRITE>
}
    35de:	bd10      	pop	{r4, pc}

000035e0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    35e0:	b510      	push	{r4, lr}
    35e2:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
    35e4:	2206      	movs	r2, #6
    35e6:	0001      	movs	r1, r0
    35e8:	2090      	movs	r0, #144	; 0x90
    35ea:	0100      	lsls	r0, r0, #4
    35ec:	f7ff fde0 	bl	31b0 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    35f0:	0021      	movs	r1, r4
    35f2:	310e      	adds	r1, #14
    35f4:	2204      	movs	r2, #4
    35f6:	2080      	movs	r0, #128	; 0x80
    35f8:	0040      	lsls	r0, r0, #1
    35fa:	f7ff fdd9 	bl	31b0 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    35fe:	0021      	movs	r1, r4
    3600:	310a      	adds	r1, #10
    3602:	2204      	movs	r2, #4
    3604:	20a0      	movs	r0, #160	; 0xa0
    3606:	00c0      	lsls	r0, r0, #3
    3608:	f7ff fdd2 	bl	31b0 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    360c:	1da1      	adds	r1, r4, #6
    360e:	2204      	movs	r2, #4
    3610:	20f0      	movs	r0, #240	; 0xf0
    3612:	0100      	lsls	r0, r0, #4
    3614:	f7ff fdcc 	bl	31b0 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    3618:	7ca2      	ldrb	r2, [r4, #18]
    361a:	4b06      	ldr	r3, [pc, #24]	; (3634 <wizchip_setnetinfo+0x54>)
    361c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
    361e:	7ce2      	ldrb	r2, [r4, #19]
    3620:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
    3622:	7d22      	ldrb	r2, [r4, #20]
    3624:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
    3626:	7d62      	ldrb	r2, [r4, #21]
    3628:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
    362a:	7da2      	ldrb	r2, [r4, #22]
    362c:	4b02      	ldr	r3, [pc, #8]	; (3638 <wizchip_setnetinfo+0x58>)
    362e:	701a      	strb	r2, [r3, #0]
}
    3630:	bd10      	pop	{r4, pc}
    3632:	46c0      	nop			; (mov r8, r8)
    3634:	20000ab8 	.word	0x20000ab8
    3638:	20000ab4 	.word	0x20000ab4

0000363c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    363c:	b510      	push	{r4, lr}
    363e:	0004      	movs	r4, r0
   getSHAR(pnetinfo->mac);
    3640:	2206      	movs	r2, #6
    3642:	0001      	movs	r1, r0
    3644:	2090      	movs	r0, #144	; 0x90
    3646:	0100      	lsls	r0, r0, #4
    3648:	f7ff fd72 	bl	3130 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    364c:	0021      	movs	r1, r4
    364e:	310e      	adds	r1, #14
    3650:	2204      	movs	r2, #4
    3652:	2080      	movs	r0, #128	; 0x80
    3654:	0040      	lsls	r0, r0, #1
    3656:	f7ff fd6b 	bl	3130 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    365a:	0021      	movs	r1, r4
    365c:	310a      	adds	r1, #10
    365e:	2204      	movs	r2, #4
    3660:	20a0      	movs	r0, #160	; 0xa0
    3662:	00c0      	lsls	r0, r0, #3
    3664:	f7ff fd64 	bl	3130 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    3668:	1da1      	adds	r1, r4, #6
    366a:	2204      	movs	r2, #4
    366c:	20f0      	movs	r0, #240	; 0xf0
    366e:	0100      	lsls	r0, r0, #4
    3670:	f7ff fd5e 	bl	3130 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    3674:	4b06      	ldr	r3, [pc, #24]	; (3690 <wizchip_getnetinfo+0x54>)
    3676:	781a      	ldrb	r2, [r3, #0]
    3678:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
    367a:	785a      	ldrb	r2, [r3, #1]
    367c:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
    367e:	789a      	ldrb	r2, [r3, #2]
    3680:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
    3682:	78db      	ldrb	r3, [r3, #3]
    3684:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
    3686:	4b03      	ldr	r3, [pc, #12]	; (3694 <wizchip_getnetinfo+0x58>)
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	75a3      	strb	r3, [r4, #22]
}
    368c:	bd10      	pop	{r4, pc}
    368e:	46c0      	nop			; (mov r8, r8)
    3690:	20000ab8 	.word	0x20000ab8
    3694:	20000ab4 	.word	0x20000ab4

00003698 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
    3698:	b510      	push	{r4, lr}
    369a:	0004      	movs	r4, r0
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    369c:	233a      	movs	r3, #58	; 0x3a
    369e:	0002      	movs	r2, r0
    36a0:	439a      	bics	r2, r3
    36a2:	d109      	bne.n	36b8 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
    36a4:	2000      	movs	r0, #0
    36a6:	f7ff fce1 	bl	306c <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
    36aa:	4304      	orrs	r4, r0
    36ac:	b2e1      	uxtb	r1, r4
   setMR(tmp);
    36ae:	2000      	movs	r0, #0
    36b0:	f7ff fd0e 	bl	30d0 <WIZCHIP_WRITE>
   return 0;
    36b4:	2000      	movs	r0, #0
}
    36b6:	bd10      	pop	{r4, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    36b8:	2001      	movs	r0, #1
    36ba:	4240      	negs	r0, r0
    36bc:	e7fb      	b.n	36b6 <wizchip_setnetmode+0x1e>

000036be <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
    36be:	b510      	push	{r4, lr}
   return (netmode_type) getMR();
    36c0:	2000      	movs	r0, #0
    36c2:	f7ff fcd3 	bl	306c <WIZCHIP_READ>
}
    36c6:	bd10      	pop	{r4, pc}

000036c8 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
    36c8:	b510      	push	{r4, lr}
    36ca:	0004      	movs	r4, r0
   setRCR(nettime->retry_cnt);
    36cc:	7801      	ldrb	r1, [r0, #0]
    36ce:	20d8      	movs	r0, #216	; 0xd8
    36d0:	0140      	lsls	r0, r0, #5
    36d2:	f7ff fcfd 	bl	30d0 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
    36d6:	8861      	ldrh	r1, [r4, #2]
    36d8:	0a09      	lsrs	r1, r1, #8
    36da:	20c8      	movs	r0, #200	; 0xc8
    36dc:	0140      	lsls	r0, r0, #5
    36de:	f7ff fcf7 	bl	30d0 <WIZCHIP_WRITE>
    36e2:	78a1      	ldrb	r1, [r4, #2]
    36e4:	20d0      	movs	r0, #208	; 0xd0
    36e6:	0140      	lsls	r0, r0, #5
    36e8:	f7ff fcf2 	bl	30d0 <WIZCHIP_WRITE>
}
    36ec:	bd10      	pop	{r4, pc}

000036ee <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
    36ee:	b570      	push	{r4, r5, r6, lr}
    36f0:	0005      	movs	r5, r0
   nettime->retry_cnt = getRCR();
    36f2:	20d8      	movs	r0, #216	; 0xd8
    36f4:	0140      	lsls	r0, r0, #5
    36f6:	f7ff fcb9 	bl	306c <WIZCHIP_READ>
    36fa:	7028      	strb	r0, [r5, #0]
   nettime->time_100us = getRTR();
    36fc:	20c8      	movs	r0, #200	; 0xc8
    36fe:	0140      	lsls	r0, r0, #5
    3700:	f7ff fcb4 	bl	306c <WIZCHIP_READ>
    3704:	b280      	uxth	r0, r0
    3706:	0200      	lsls	r0, r0, #8
    3708:	b284      	uxth	r4, r0
    370a:	20d0      	movs	r0, #208	; 0xd0
    370c:	0140      	lsls	r0, r0, #5
    370e:	f7ff fcad 	bl	306c <WIZCHIP_READ>
    3712:	b280      	uxth	r0, r0
    3714:	1824      	adds	r4, r4, r0
    3716:	806c      	strh	r4, [r5, #2]
}
    3718:	bd70      	pop	{r4, r5, r6, pc}
	...

0000371c <ctlnetwork>:
{
    371c:	b510      	push	{r4, lr}
    371e:	000c      	movs	r4, r1
   switch(cntype)
    3720:	2805      	cmp	r0, #5
    3722:	d820      	bhi.n	3766 <ctlnetwork+0x4a>
    3724:	0080      	lsls	r0, r0, #2
    3726:	4b11      	ldr	r3, [pc, #68]	; (376c <ctlnetwork+0x50>)
    3728:	581b      	ldr	r3, [r3, r0]
    372a:	469f      	mov	pc, r3
         wizchip_setnetinfo((wiz_NetInfo*)arg);
    372c:	0008      	movs	r0, r1
    372e:	f7ff ff57 	bl	35e0 <wizchip_setnetinfo>
   return 0;
    3732:	2000      	movs	r0, #0
}
    3734:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
    3736:	0008      	movs	r0, r1
    3738:	f7ff ff80 	bl	363c <wizchip_getnetinfo>
   return 0;
    373c:	2000      	movs	r0, #0
         break;
    373e:	e7f9      	b.n	3734 <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
    3740:	7808      	ldrb	r0, [r1, #0]
    3742:	f7ff ffa9 	bl	3698 <wizchip_setnetmode>
    3746:	e7f5      	b.n	3734 <ctlnetwork+0x18>
         *(netmode_type*)arg = wizchip_getnetmode();
    3748:	f7ff ffb9 	bl	36be <wizchip_getnetmode>
    374c:	7020      	strb	r0, [r4, #0]
   return 0;
    374e:	2000      	movs	r0, #0
         break;
    3750:	e7f0      	b.n	3734 <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
    3752:	0008      	movs	r0, r1
    3754:	f7ff ffb8 	bl	36c8 <wizchip_settimeout>
   return 0;
    3758:	2000      	movs	r0, #0
         break;
    375a:	e7eb      	b.n	3734 <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
    375c:	0008      	movs	r0, r1
    375e:	f7ff ffc6 	bl	36ee <wizchip_gettimeout>
   return 0;
    3762:	2000      	movs	r0, #0
         break;
    3764:	e7e6      	b.n	3734 <ctlnetwork+0x18>
         return -1;
    3766:	2001      	movs	r0, #1
    3768:	4240      	negs	r0, r0
    376a:	e7e3      	b.n	3734 <ctlnetwork+0x18>
    376c:	0000f698 	.word	0x0000f698

00003770 <ld_word>:

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3770:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
    3772:	021b      	lsls	r3, r3, #8
    3774:	7800      	ldrb	r0, [r0, #0]
    3776:	4318      	orrs	r0, r3
	return rv;
}
    3778:	4770      	bx	lr

0000377a <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    377a:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
    377c:	021b      	lsls	r3, r3, #8
    377e:	7882      	ldrb	r2, [r0, #2]
    3780:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[1];
    3782:	021b      	lsls	r3, r3, #8
    3784:	7842      	ldrb	r2, [r0, #1]
    3786:	4313      	orrs	r3, r2
	rv = rv << 8 | ptr[0];
    3788:	021b      	lsls	r3, r3, #8
    378a:	7800      	ldrb	r0, [r0, #0]
    378c:	4318      	orrs	r0, r3
	return rv;
}
    378e:	4770      	bx	lr

00003790 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3790:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
    3792:	0a09      	lsrs	r1, r1, #8
    3794:	7041      	strb	r1, [r0, #1]
}
    3796:	4770      	bx	lr

00003798 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3798:	7001      	strb	r1, [r0, #0]
    379a:	0a0b      	lsrs	r3, r1, #8
	*ptr++ = (BYTE)val; val >>= 8;
    379c:	7043      	strb	r3, [r0, #1]
    379e:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
    37a0:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
    37a2:	0e09      	lsrs	r1, r1, #24
    37a4:	70c1      	strb	r1, [r0, #3]
}
    37a6:	4770      	bx	lr

000037a8 <dbc_1st>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
    37a8:	2000      	movs	r0, #0
    37aa:	4770      	bx	lr

000037ac <dbc_2nd>:
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
}
    37ac:	2000      	movs	r0, #0
    37ae:	4770      	bx	lr

000037b0 <clst2sect>:
static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;		/* Cluster number is origin from 2 */
    37b0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    37b2:	6943      	ldr	r3, [r0, #20]
    37b4:	3b02      	subs	r3, #2
    37b6:	4299      	cmp	r1, r3
    37b8:	d204      	bcs.n	37c4 <clst2sect+0x14>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
    37ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
    37bc:	8940      	ldrh	r0, [r0, #10]
    37be:	4348      	muls	r0, r1
    37c0:	1818      	adds	r0, r3, r0
}
    37c2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
    37c4:	2000      	movs	r0, #0
    37c6:	e7fc      	b.n	37c2 <clst2sect+0x12>

000037c8 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
    37c8:	b570      	push	{r4, r5, r6, lr}
    37ca:	0006      	movs	r6, r0
    37cc:	000d      	movs	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    37ce:	0008      	movs	r0, r1
    37d0:	301a      	adds	r0, #26
    37d2:	f7ff ffcd 	bl	3770 <ld_word>
    37d6:	0004      	movs	r4, r0
	if (fs->fs_type == FS_FAT32) {
    37d8:	7833      	ldrb	r3, [r6, #0]
    37da:	2b03      	cmp	r3, #3
    37dc:	d000      	beq.n	37e0 <ld_clust+0x18>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
    37de:	bd70      	pop	{r4, r5, r6, pc}
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    37e0:	0028      	movs	r0, r5
    37e2:	3014      	adds	r0, #20
    37e4:	f7ff ffc4 	bl	3770 <ld_word>
    37e8:	0400      	lsls	r0, r0, #16
    37ea:	4320      	orrs	r0, r4
	return cl;
    37ec:	e7f7      	b.n	37de <ld_clust+0x16>

000037ee <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
    37ee:	b570      	push	{r4, r5, r6, lr}
    37f0:	0006      	movs	r6, r0
    37f2:	000c      	movs	r4, r1
    37f4:	0015      	movs	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
    37f6:	b291      	uxth	r1, r2
    37f8:	0020      	movs	r0, r4
    37fa:	301a      	adds	r0, #26
    37fc:	f7ff ffc8 	bl	3790 <st_word>
	if (fs->fs_type == FS_FAT32) {
    3800:	7833      	ldrb	r3, [r6, #0]
    3802:	2b03      	cmp	r3, #3
    3804:	d000      	beq.n	3808 <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
    3806:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    3808:	0c29      	lsrs	r1, r5, #16
    380a:	0020      	movs	r0, r4
    380c:	3014      	adds	r0, #20
    380e:	f7ff ffbf 	bl	3790 <st_word>
}
    3812:	e7f8      	b.n	3806 <st_clust+0x18>

00003814 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
    3814:	b510      	push	{r4, lr}
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
    3816:	6804      	ldr	r4, [r0, #0]
	if (!tp) return vol;	/* Invalid path name? */
    3818:	2c00      	cmp	r4, #0
    381a:	d01e      	beq.n	385a <get_ldnumber+0x46>
    381c:	0022      	movs	r2, r4
	do {					/* Find a colon in the path */
		tc = *tt++;
    381e:	1c51      	adds	r1, r2, #1
    3820:	7813      	ldrb	r3, [r2, #0]
	} while (!IsTerminator(tc) && tc != ':');
    3822:	2b20      	cmp	r3, #32
    3824:	d902      	bls.n	382c <get_ldnumber+0x18>
		tc = *tt++;
    3826:	000a      	movs	r2, r1
	} while (!IsTerminator(tc) && tc != ':');
    3828:	2b3a      	cmp	r3, #58	; 0x3a
    382a:	d1f8      	bne.n	381e <get_ldnumber+0xa>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
    382c:	2b3a      	cmp	r3, #58	; 0x3a
    382e:	d002      	beq.n	3836 <get_ldnumber+0x22>
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
    3830:	2300      	movs	r3, #0
}
    3832:	0018      	movs	r0, r3
    3834:	bd10      	pop	{r4, pc}
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
    3836:	7823      	ldrb	r3, [r4, #0]
    3838:	001a      	movs	r2, r3
    383a:	3a30      	subs	r2, #48	; 0x30
    383c:	b2d2      	uxtb	r2, r2
    383e:	2a09      	cmp	r2, #9
    3840:	d806      	bhi.n	3850 <get_ldnumber+0x3c>
    3842:	3402      	adds	r4, #2
    3844:	42a1      	cmp	r1, r4
    3846:	d001      	beq.n	384c <get_ldnumber+0x38>
		i = FF_VOLUMES;
    3848:	2301      	movs	r3, #1
    384a:	e002      	b.n	3852 <get_ldnumber+0x3e>
			i = (int)*tp - '0';	/* Get the LD number */
    384c:	3b30      	subs	r3, #48	; 0x30
    384e:	e000      	b.n	3852 <get_ldnumber+0x3e>
		i = FF_VOLUMES;
    3850:	2301      	movs	r3, #1
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
    3852:	2b00      	cmp	r3, #0
    3854:	dc04      	bgt.n	3860 <get_ldnumber+0x4c>
			*path = tt;		/* Snip the drive prefix off */
    3856:	6001      	str	r1, [r0, #0]
    3858:	e7eb      	b.n	3832 <get_ldnumber+0x1e>
	if (!tp) return vol;	/* Invalid path name? */
    385a:	2301      	movs	r3, #1
    385c:	425b      	negs	r3, r3
    385e:	e7e8      	b.n	3832 <get_ldnumber+0x1e>
	int vol = -1;
    3860:	2301      	movs	r3, #1
    3862:	425b      	negs	r3, r3
    3864:	e7e5      	b.n	3832 <get_ldnumber+0x1e>

00003866 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
    3866:	b570      	push	{r4, r5, r6, lr}
    3868:	0004      	movs	r4, r0
    386a:	000d      	movs	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    386c:	2800      	cmp	r0, #0
    386e:	d018      	beq.n	38a2 <validate+0x3c>
    3870:	6803      	ldr	r3, [r0, #0]
    3872:	2b00      	cmp	r3, #0
    3874:	d017      	beq.n	38a6 <validate+0x40>
    3876:	781a      	ldrb	r2, [r3, #0]
    3878:	2a00      	cmp	r2, #0
    387a:	d105      	bne.n	3888 <validate+0x22>
	FRESULT res = FR_INVALID_OBJECT;
    387c:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    387e:	2800      	cmp	r0, #0
    3880:	d115      	bne.n	38ae <validate+0x48>
    3882:	6823      	ldr	r3, [r4, #0]
    3884:	602b      	str	r3, [r5, #0]
	return res;
}
    3886:	bd70      	pop	{r4, r5, r6, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
    3888:	8881      	ldrh	r1, [r0, #4]
    388a:	88da      	ldrh	r2, [r3, #6]
    388c:	4291      	cmp	r1, r2
    388e:	d001      	beq.n	3894 <validate+0x2e>
	FRESULT res = FR_INVALID_OBJECT;
    3890:	2009      	movs	r0, #9
    3892:	e7f4      	b.n	387e <validate+0x18>
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
    3894:	7858      	ldrb	r0, [r3, #1]
    3896:	f001 fa0f 	bl	4cb8 <disk_status>
    389a:	07c3      	lsls	r3, r0, #31
    389c:	d505      	bpl.n	38aa <validate+0x44>
	FRESULT res = FR_INVALID_OBJECT;
    389e:	2009      	movs	r0, #9
    38a0:	e7ed      	b.n	387e <validate+0x18>
    38a2:	2009      	movs	r0, #9
    38a4:	e7eb      	b.n	387e <validate+0x18>
    38a6:	2009      	movs	r0, #9
    38a8:	e7e9      	b.n	387e <validate+0x18>
			res = FR_OK;
    38aa:	2000      	movs	r0, #0
    38ac:	e7e7      	b.n	387e <validate+0x18>
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
    38ae:	2300      	movs	r3, #0
    38b0:	e7e8      	b.n	3884 <validate+0x1e>

000038b2 <sync_window>:
{
    38b2:	b570      	push	{r4, r5, r6, lr}
    38b4:	0004      	movs	r4, r0
	if (fs->wflag) {	/* Is the disk access window dirty? */
    38b6:	7903      	ldrb	r3, [r0, #4]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d101      	bne.n	38c0 <sync_window+0xe>
	FRESULT res = FR_OK;
    38bc:	2000      	movs	r0, #0
}
    38be:	bd70      	pop	{r4, r5, r6, pc}
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
    38c0:	0005      	movs	r5, r0
    38c2:	3530      	adds	r5, #48	; 0x30
    38c4:	7840      	ldrb	r0, [r0, #1]
    38c6:	2301      	movs	r3, #1
    38c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    38ca:	0029      	movs	r1, r5
    38cc:	f001 fabe 	bl	4e4c <disk_write>
    38d0:	2800      	cmp	r0, #0
    38d2:	d114      	bne.n	38fe <sync_window+0x4c>
			fs->wflag = 0;	/* Clear window dirty flag */
    38d4:	2300      	movs	r3, #0
    38d6:	7123      	strb	r3, [r4, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
    38d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    38da:	6a23      	ldr	r3, [r4, #32]
    38dc:	1ad3      	subs	r3, r2, r3
    38de:	69a1      	ldr	r1, [r4, #24]
    38e0:	428b      	cmp	r3, r1
    38e2:	d20e      	bcs.n	3902 <sync_window+0x50>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    38e4:	78e3      	ldrb	r3, [r4, #3]
    38e6:	2b02      	cmp	r3, #2
    38e8:	d001      	beq.n	38ee <sync_window+0x3c>
	FRESULT res = FR_OK;
    38ea:	2000      	movs	r0, #0
    38ec:	e7e7      	b.n	38be <sync_window+0xc>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
    38ee:	1852      	adds	r2, r2, r1
    38f0:	7860      	ldrb	r0, [r4, #1]
    38f2:	3b01      	subs	r3, #1
    38f4:	0029      	movs	r1, r5
    38f6:	f001 faa9 	bl	4e4c <disk_write>
	FRESULT res = FR_OK;
    38fa:	2000      	movs	r0, #0
    38fc:	e7df      	b.n	38be <sync_window+0xc>
			res = FR_DISK_ERR;
    38fe:	2001      	movs	r0, #1
    3900:	e7dd      	b.n	38be <sync_window+0xc>
	FRESULT res = FR_OK;
    3902:	2000      	movs	r0, #0
    3904:	e7db      	b.n	38be <sync_window+0xc>

00003906 <move_window>:
{
    3906:	b570      	push	{r4, r5, r6, lr}
    3908:	0005      	movs	r5, r0
    390a:	000e      	movs	r6, r1
	if (sect != fs->winsect) {	/* Window offset changed? */
    390c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    390e:	428b      	cmp	r3, r1
    3910:	d013      	beq.n	393a <move_window+0x34>
		res = sync_window(fs);		/* Flush the window */
    3912:	f7ff ffce 	bl	38b2 <sync_window>
    3916:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
    3918:	d001      	beq.n	391e <move_window+0x18>
}
    391a:	0020      	movs	r0, r4
    391c:	bd70      	pop	{r4, r5, r6, pc}
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
    391e:	0029      	movs	r1, r5
    3920:	3130      	adds	r1, #48	; 0x30
    3922:	7868      	ldrb	r0, [r5, #1]
    3924:	2301      	movs	r3, #1
    3926:	0032      	movs	r2, r6
    3928:	f001 fa58 	bl	4ddc <disk_read>
    392c:	2800      	cmp	r0, #0
    392e:	d002      	beq.n	3936 <move_window+0x30>
				res = FR_DISK_ERR;
    3930:	3401      	adds	r4, #1
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
    3932:	2601      	movs	r6, #1
    3934:	4276      	negs	r6, r6
			fs->winsect = sect;
    3936:	62ee      	str	r6, [r5, #44]	; 0x2c
    3938:	e7ef      	b.n	391a <move_window+0x14>
	FRESULT res = FR_OK;
    393a:	2400      	movs	r4, #0
    393c:	e7ed      	b.n	391a <move_window+0x14>
	...

00003940 <check_fs>:
{
    3940:	b570      	push	{r4, r5, r6, lr}
    3942:	0004      	movs	r4, r0
	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
    3944:	2300      	movs	r3, #0
    3946:	7103      	strb	r3, [r0, #4]
    3948:	3b01      	subs	r3, #1
    394a:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
    394c:	f7ff ffdb 	bl	3906 <move_window>
    3950:	2800      	cmp	r0, #0
    3952:	d001      	beq.n	3958 <check_fs+0x18>
    3954:	2004      	movs	r0, #4
}
    3956:	bd70      	pop	{r4, r5, r6, pc}
	sign = ld_word(fs->win + BS_55AA);
    3958:	4b2d      	ldr	r3, [pc, #180]	; (3a10 <check_fs+0xd0>)
    395a:	18e0      	adds	r0, r4, r3
    395c:	f7ff ff08 	bl	3770 <ld_word>
    3960:	0005      	movs	r5, r0
	b = fs->win[BS_JmpBoot];
    3962:	2330      	movs	r3, #48	; 0x30
    3964:	5ce3      	ldrb	r3, [r4, r3]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
    3966:	2beb      	cmp	r3, #235	; 0xeb
    3968:	d008      	beq.n	397c <check_fs+0x3c>
    396a:	2be9      	cmp	r3, #233	; 0xe9
    396c:	d006      	beq.n	397c <check_fs+0x3c>
    396e:	2be8      	cmp	r3, #232	; 0xe8
    3970:	d004      	beq.n	397c <check_fs+0x3c>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    3972:	4b28      	ldr	r3, [pc, #160]	; (3a14 <check_fs+0xd4>)
    3974:	429d      	cmp	r5, r3
    3976:	d048      	beq.n	3a0a <check_fs+0xca>
    3978:	2003      	movs	r0, #3
    397a:	e7ec      	b.n	3956 <check_fs+0x16>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    397c:	4b25      	ldr	r3, [pc, #148]	; (3a14 <check_fs+0xd4>)
    397e:	429d      	cmp	r5, r3
    3980:	d039      	beq.n	39f6 <check_fs+0xb6>
		w = ld_word(fs->win + BPB_BytsPerSec);
    3982:	0020      	movs	r0, r4
    3984:	303b      	adds	r0, #59	; 0x3b
    3986:	f7ff fef3 	bl	3770 <ld_word>
		b = fs->win[BPB_SecPerClus];
    398a:	233d      	movs	r3, #61	; 0x3d
    398c:	5ce1      	ldrb	r1, [r4, r3]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
    398e:	1e43      	subs	r3, r0, #1
    3990:	4203      	tst	r3, r0
    3992:	d1ee      	bne.n	3972 <check_fs+0x32>
    3994:	4b20      	ldr	r3, [pc, #128]	; (3a18 <check_fs+0xd8>)
    3996:	4298      	cmp	r0, r3
    3998:	d9eb      	bls.n	3972 <check_fs+0x32>
    399a:	3301      	adds	r3, #1
    399c:	4298      	cmp	r0, r3
    399e:	d8e8      	bhi.n	3972 <check_fs+0x32>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
    39a0:	2900      	cmp	r1, #0
    39a2:	d0e6      	beq.n	3972 <check_fs+0x32>
    39a4:	1e4b      	subs	r3, r1, #1
    39a6:	420b      	tst	r3, r1
    39a8:	d1e3      	bne.n	3972 <check_fs+0x32>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
    39aa:	0020      	movs	r0, r4
    39ac:	303e      	adds	r0, #62	; 0x3e
    39ae:	f7ff fedf 	bl	3770 <ld_word>
    39b2:	2800      	cmp	r0, #0
    39b4:	d0dd      	beq.n	3972 <check_fs+0x32>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
    39b6:	2340      	movs	r3, #64	; 0x40
    39b8:	5ce3      	ldrb	r3, [r4, r3]
    39ba:	3b01      	subs	r3, #1
    39bc:	2b01      	cmp	r3, #1
    39be:	d8d8      	bhi.n	3972 <check_fs+0x32>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
    39c0:	0020      	movs	r0, r4
    39c2:	3041      	adds	r0, #65	; 0x41
    39c4:	f7ff fed4 	bl	3770 <ld_word>
    39c8:	2800      	cmp	r0, #0
    39ca:	d0d2      	beq.n	3972 <check_fs+0x32>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
    39cc:	0020      	movs	r0, r4
    39ce:	3043      	adds	r0, #67	; 0x43
    39d0:	f7ff fece 	bl	3770 <ld_word>
    39d4:	287f      	cmp	r0, #127	; 0x7f
    39d6:	d806      	bhi.n	39e6 <check_fs+0xa6>
    39d8:	0020      	movs	r0, r4
    39da:	3050      	adds	r0, #80	; 0x50
    39dc:	f7ff fecd 	bl	377a <ld_dword>
    39e0:	4b0e      	ldr	r3, [pc, #56]	; (3a1c <check_fs+0xdc>)
    39e2:	4298      	cmp	r0, r3
    39e4:	d9c5      	bls.n	3972 <check_fs+0x32>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
    39e6:	0020      	movs	r0, r4
    39e8:	3046      	adds	r0, #70	; 0x46
    39ea:	f7ff fec1 	bl	3770 <ld_word>
    39ee:	2800      	cmp	r0, #0
    39f0:	d0bf      	beq.n	3972 <check_fs+0x32>
				return 0;	/* It can be presumed an FAT VBR */
    39f2:	2000      	movs	r0, #0
    39f4:	e7af      	b.n	3956 <check_fs+0x16>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
    39f6:	2208      	movs	r2, #8
    39f8:	4909      	ldr	r1, [pc, #36]	; (3a20 <check_fs+0xe0>)
    39fa:	0020      	movs	r0, r4
    39fc:	3082      	adds	r0, #130	; 0x82
    39fe:	f004 f8cd 	bl	7b9c <memcmp>
    3a02:	2800      	cmp	r0, #0
    3a04:	d1bd      	bne.n	3982 <check_fs+0x42>
			return 0;	/* It is an FAT32 VBR */
    3a06:	2000      	movs	r0, #0
    3a08:	e7a5      	b.n	3956 <check_fs+0x16>
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
    3a0a:	2002      	movs	r0, #2
    3a0c:	e7a3      	b.n	3956 <check_fs+0x16>
    3a0e:	46c0      	nop			; (mov r8, r8)
    3a10:	0000022e 	.word	0x0000022e
    3a14:	0000aa55 	.word	0x0000aa55
    3a18:	000001ff 	.word	0x000001ff
    3a1c:	0000ffff 	.word	0x0000ffff
    3a20:	0000f730 	.word	0x0000f730

00003a24 <find_volume>:
{
    3a24:	b570      	push	{r4, r5, r6, lr}
    3a26:	b084      	sub	sp, #16
    3a28:	0005      	movs	r5, r0
    3a2a:	000e      	movs	r6, r1
	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
    3a2c:	2100      	movs	r1, #0
    3a2e:	f7ff ff87 	bl	3940 <check_fs>
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
    3a32:	2802      	cmp	r0, #2
    3a34:	d016      	beq.n	3a64 <find_volume+0x40>
    3a36:	d82a      	bhi.n	3a8e <find_volume+0x6a>
    3a38:	2e00      	cmp	r6, #0
    3a3a:	d028      	beq.n	3a8e <find_volume+0x6a>
    3a3c:	2400      	movs	r4, #0
    3a3e:	e00b      	b.n	3a58 <find_volume+0x34>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
    3a40:	002b      	movs	r3, r5
    3a42:	3330      	adds	r3, #48	; 0x30
    3a44:	0120      	lsls	r0, r4, #4
    3a46:	30c7      	adds	r0, #199	; 0xc7
    3a48:	30ff      	adds	r0, #255	; 0xff
    3a4a:	1818      	adds	r0, r3, r0
    3a4c:	f7ff fe95 	bl	377a <ld_dword>
    3a50:	00a3      	lsls	r3, r4, #2
    3a52:	466a      	mov	r2, sp
    3a54:	5098      	str	r0, [r3, r2]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
    3a56:	3401      	adds	r4, #1
    3a58:	2c03      	cmp	r4, #3
    3a5a:	d9f1      	bls.n	3a40 <find_volume+0x1c>
	i = part ? part - 1 : 0;		/* Table index to find first */
    3a5c:	2e00      	cmp	r6, #0
    3a5e:	d003      	beq.n	3a68 <find_volume+0x44>
    3a60:	1e74      	subs	r4, r6, #1
    3a62:	e00d      	b.n	3a80 <find_volume+0x5c>
    3a64:	2400      	movs	r4, #0
    3a66:	e7f7      	b.n	3a58 <find_volume+0x34>
    3a68:	0034      	movs	r4, r6
    3a6a:	e009      	b.n	3a80 <find_volume+0x5c>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    3a6c:	0028      	movs	r0, r5
    3a6e:	f7ff ff67 	bl	3940 <check_fs>
	} while (part == 0 && fmt >= 2 && ++i < 4);
    3a72:	2e00      	cmp	r6, #0
    3a74:	d10b      	bne.n	3a8e <find_volume+0x6a>
    3a76:	2801      	cmp	r0, #1
    3a78:	d909      	bls.n	3a8e <find_volume+0x6a>
    3a7a:	3401      	adds	r4, #1
    3a7c:	2c03      	cmp	r4, #3
    3a7e:	d806      	bhi.n	3a8e <find_volume+0x6a>
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
    3a80:	00a3      	lsls	r3, r4, #2
    3a82:	466a      	mov	r2, sp
    3a84:	5899      	ldr	r1, [r3, r2]
    3a86:	2900      	cmp	r1, #0
    3a88:	d1f0      	bne.n	3a6c <find_volume+0x48>
    3a8a:	2003      	movs	r0, #3
    3a8c:	e7f1      	b.n	3a72 <find_volume+0x4e>
}
    3a8e:	b004      	add	sp, #16
    3a90:	bd70      	pop	{r4, r5, r6, pc}
	...

00003a94 <mount_volume>:
{
    3a94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a96:	46de      	mov	lr, fp
    3a98:	4657      	mov	r7, sl
    3a9a:	464e      	mov	r6, r9
    3a9c:	4645      	mov	r5, r8
    3a9e:	b5e0      	push	{r5, r6, r7, lr}
    3aa0:	b083      	sub	sp, #12
    3aa2:	000e      	movs	r6, r1
    3aa4:	0015      	movs	r5, r2
	*rfs = 0;
    3aa6:	2300      	movs	r3, #0
    3aa8:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
    3aaa:	f7ff feb3 	bl	3814 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    3aae:	2800      	cmp	r0, #0
    3ab0:	da00      	bge.n	3ab4 <mount_volume+0x20>
    3ab2:	e11e      	b.n	3cf2 <mount_volume+0x25e>
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    3ab4:	0080      	lsls	r0, r0, #2
    3ab6:	4ba0      	ldr	r3, [pc, #640]	; (3d38 <mount_volume+0x2a4>)
    3ab8:	58c4      	ldr	r4, [r0, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    3aba:	2c00      	cmp	r4, #0
    3abc:	d100      	bne.n	3ac0 <mount_volume+0x2c>
    3abe:	e120      	b.n	3d02 <mount_volume+0x26e>
	*rfs = fs;							/* Return pointer to the filesystem object */
    3ac0:	6034      	str	r4, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    3ac2:	2301      	movs	r3, #1
    3ac4:	439d      	bics	r5, r3
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    3ac6:	7823      	ldrb	r3, [r4, #0]
    3ac8:	2b00      	cmp	r3, #0
    3aca:	d00d      	beq.n	3ae8 <mount_volume+0x54>
		stat = disk_status(fs->pdrv);
    3acc:	7860      	ldrb	r0, [r4, #1]
    3ace:	f001 f8f3 	bl	4cb8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    3ad2:	07c3      	lsls	r3, r0, #31
    3ad4:	d408      	bmi.n	3ae8 <mount_volume+0x54>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    3ad6:	2d00      	cmp	r5, #0
    3ad8:	d100      	bne.n	3adc <mount_volume+0x48>
    3ada:	e114      	b.n	3d06 <mount_volume+0x272>
    3adc:	0743      	lsls	r3, r0, #29
    3ade:	d501      	bpl.n	3ae4 <mount_volume+0x50>
				return FR_WRITE_PROTECTED;
    3ae0:	200a      	movs	r0, #10
    3ae2:	e107      	b.n	3cf4 <mount_volume+0x260>
			return FR_OK;				/* The filesystem object is already valid */
    3ae4:	2000      	movs	r0, #0
    3ae6:	e105      	b.n	3cf4 <mount_volume+0x260>
	fs->fs_type = 0;					/* Invalidate the filesystem object */
    3ae8:	2300      	movs	r3, #0
    3aea:	7023      	strb	r3, [r4, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
    3aec:	7860      	ldrb	r0, [r4, #1]
    3aee:	f001 f8ed 	bl	4ccc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    3af2:	07c3      	lsls	r3, r0, #31
    3af4:	d501      	bpl.n	3afa <mount_volume+0x66>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    3af6:	2003      	movs	r0, #3
    3af8:	e0fc      	b.n	3cf4 <mount_volume+0x260>
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    3afa:	2d00      	cmp	r5, #0
    3afc:	d003      	beq.n	3b06 <mount_volume+0x72>
    3afe:	0743      	lsls	r3, r0, #29
    3b00:	d501      	bpl.n	3b06 <mount_volume+0x72>
		return FR_WRITE_PROTECTED;
    3b02:	200a      	movs	r0, #10
    3b04:	e0f6      	b.n	3cf4 <mount_volume+0x260>
	fmt = find_volume(fs, LD2PT(vol));
    3b06:	2100      	movs	r1, #0
    3b08:	0020      	movs	r0, r4
    3b0a:	f7ff ff8b 	bl	3a24 <find_volume>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    3b0e:	2804      	cmp	r0, #4
    3b10:	d100      	bne.n	3b14 <mount_volume+0x80>
    3b12:	e0fa      	b.n	3d0a <mount_volume+0x276>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    3b14:	2801      	cmp	r0, #1
    3b16:	d901      	bls.n	3b1c <mount_volume+0x88>
    3b18:	200d      	movs	r0, #13
    3b1a:	e0eb      	b.n	3cf4 <mount_volume+0x260>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
    3b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    3b1e:	0020      	movs	r0, r4
    3b20:	303b      	adds	r0, #59	; 0x3b
    3b22:	f7ff fe25 	bl	3770 <ld_word>
    3b26:	2380      	movs	r3, #128	; 0x80
    3b28:	009b      	lsls	r3, r3, #2
    3b2a:	4298      	cmp	r0, r3
    3b2c:	d001      	beq.n	3b32 <mount_volume+0x9e>
    3b2e:	200d      	movs	r0, #13
    3b30:	e0e0      	b.n	3cf4 <mount_volume+0x260>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    3b32:	0020      	movs	r0, r4
    3b34:	3046      	adds	r0, #70	; 0x46
    3b36:	f7ff fe1b 	bl	3770 <ld_word>
    3b3a:	4682      	mov	sl, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    3b3c:	2800      	cmp	r0, #0
    3b3e:	d104      	bne.n	3b4a <mount_volume+0xb6>
    3b40:	0020      	movs	r0, r4
    3b42:	3054      	adds	r0, #84	; 0x54
    3b44:	f7ff fe19 	bl	377a <ld_dword>
    3b48:	4682      	mov	sl, r0
		fs->fsize = fasize;
    3b4a:	4653      	mov	r3, sl
    3b4c:	61a3      	str	r3, [r4, #24]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    3b4e:	2340      	movs	r3, #64	; 0x40
    3b50:	5ce3      	ldrb	r3, [r4, r3]
    3b52:	70e3      	strb	r3, [r4, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    3b54:	1e5a      	subs	r2, r3, #1
    3b56:	b2d2      	uxtb	r2, r2
    3b58:	2a01      	cmp	r2, #1
    3b5a:	d901      	bls.n	3b60 <mount_volume+0xcc>
    3b5c:	200d      	movs	r0, #13
    3b5e:	e0c9      	b.n	3cf4 <mount_volume+0x260>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    3b60:	4652      	mov	r2, sl
    3b62:	435a      	muls	r2, r3
    3b64:	4691      	mov	r9, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    3b66:	233d      	movs	r3, #61	; 0x3d
    3b68:	5ce3      	ldrb	r3, [r4, r3]
    3b6a:	4698      	mov	r8, r3
    3b6c:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3b6e:	2b00      	cmp	r3, #0
    3b70:	d100      	bne.n	3b74 <mount_volume+0xe0>
    3b72:	e0cc      	b.n	3d0e <mount_volume+0x27a>
    3b74:	3b01      	subs	r3, #1
    3b76:	4642      	mov	r2, r8
    3b78:	4213      	tst	r3, r2
    3b7a:	d001      	beq.n	3b80 <mount_volume+0xec>
    3b7c:	200d      	movs	r0, #13
    3b7e:	e0b9      	b.n	3cf4 <mount_volume+0x260>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    3b80:	0020      	movs	r0, r4
    3b82:	3041      	adds	r0, #65	; 0x41
    3b84:	f7ff fdf4 	bl	3770 <ld_word>
    3b88:	0007      	movs	r7, r0
    3b8a:	9001      	str	r0, [sp, #4]
    3b8c:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    3b8e:	0703      	lsls	r3, r0, #28
    3b90:	d000      	beq.n	3b94 <mount_volume+0x100>
    3b92:	e0be      	b.n	3d12 <mount_volume+0x27e>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    3b94:	0020      	movs	r0, r4
    3b96:	3043      	adds	r0, #67	; 0x43
    3b98:	f7ff fdea 	bl	3770 <ld_word>
    3b9c:	1e05      	subs	r5, r0, #0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    3b9e:	d104      	bne.n	3baa <mount_volume+0x116>
    3ba0:	0020      	movs	r0, r4
    3ba2:	3050      	adds	r0, #80	; 0x50
    3ba4:	f7ff fde9 	bl	377a <ld_dword>
    3ba8:	0005      	movs	r5, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
    3baa:	0020      	movs	r0, r4
    3bac:	303e      	adds	r0, #62	; 0x3e
    3bae:	f7ff fddf 	bl	3770 <ld_word>
    3bb2:	4683      	mov	fp, r0
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d100      	bne.n	3bba <mount_volume+0x126>
    3bb8:	e0ad      	b.n	3d16 <mount_volume+0x282>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    3bba:	464b      	mov	r3, r9
    3bbc:	445b      	add	r3, fp
    3bbe:	093f      	lsrs	r7, r7, #4
    3bc0:	b2bf      	uxth	r7, r7
    3bc2:	19df      	adds	r7, r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    3bc4:	42bd      	cmp	r5, r7
    3bc6:	d200      	bcs.n	3bca <mount_volume+0x136>
    3bc8:	e0a7      	b.n	3d1a <mount_volume+0x286>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    3bca:	1be8      	subs	r0, r5, r7
    3bcc:	4641      	mov	r1, r8
    3bce:	f001 fd97 	bl	5700 <__udivsi3>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3bd2:	2800      	cmp	r0, #0
    3bd4:	d100      	bne.n	3bd8 <mount_volume+0x144>
    3bd6:	e0a2      	b.n	3d1e <mount_volume+0x28a>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    3bd8:	4b58      	ldr	r3, [pc, #352]	; (3d3c <mount_volume+0x2a8>)
    3bda:	4298      	cmp	r0, r3
    3bdc:	d975      	bls.n	3cca <mount_volume+0x236>
		fmt = 0;
    3bde:	2300      	movs	r3, #0
    3be0:	4698      	mov	r8, r3
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    3be2:	4b57      	ldr	r3, [pc, #348]	; (3d40 <mount_volume+0x2ac>)
    3be4:	4298      	cmp	r0, r3
    3be6:	d801      	bhi.n	3bec <mount_volume+0x158>
    3be8:	2302      	movs	r3, #2
    3bea:	4698      	mov	r8, r3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    3bec:	4b55      	ldr	r3, [pc, #340]	; (3d44 <mount_volume+0x2b0>)
    3bee:	4298      	cmp	r0, r3
    3bf0:	d801      	bhi.n	3bf6 <mount_volume+0x162>
    3bf2:	2301      	movs	r3, #1
    3bf4:	4698      	mov	r8, r3
		if (fmt == 0) return FR_NO_FILESYSTEM;
    3bf6:	4643      	mov	r3, r8
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d100      	bne.n	3bfe <mount_volume+0x16a>
    3bfc:	e091      	b.n	3d22 <mount_volume+0x28e>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    3bfe:	1c85      	adds	r5, r0, #2
    3c00:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
    3c02:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    3c04:	465b      	mov	r3, fp
    3c06:	18f3      	adds	r3, r6, r3
    3c08:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
    3c0a:	19f7      	adds	r7, r6, r7
    3c0c:	62a7      	str	r7, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
    3c0e:	4642      	mov	r2, r8
    3c10:	2a03      	cmp	r2, #3
    3c12:	d15d      	bne.n	3cd0 <mount_volume+0x23c>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    3c14:	0020      	movs	r0, r4
    3c16:	305a      	adds	r0, #90	; 0x5a
    3c18:	f7ff fdaa 	bl	3770 <ld_word>
    3c1c:	2800      	cmp	r0, #0
    3c1e:	d000      	beq.n	3c22 <mount_volume+0x18e>
    3c20:	e081      	b.n	3d26 <mount_volume+0x292>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    3c22:	9b01      	ldr	r3, [sp, #4]
    3c24:	2b00      	cmp	r3, #0
    3c26:	d000      	beq.n	3c2a <mount_volume+0x196>
    3c28:	e07f      	b.n	3d2a <mount_volume+0x296>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    3c2a:	0020      	movs	r0, r4
    3c2c:	305c      	adds	r0, #92	; 0x5c
    3c2e:	f7ff fda4 	bl	377a <ld_dword>
    3c32:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    3c34:	00ad      	lsls	r5, r5, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    3c36:	4b44      	ldr	r3, [pc, #272]	; (3d48 <mount_volume+0x2b4>)
    3c38:	469c      	mov	ip, r3
    3c3a:	4465      	add	r5, ip
    3c3c:	0a6d      	lsrs	r5, r5, #9
    3c3e:	45aa      	cmp	sl, r5
    3c40:	d200      	bcs.n	3c44 <mount_volume+0x1b0>
    3c42:	e076      	b.n	3d32 <mount_volume+0x29e>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    3c44:	2301      	movs	r3, #1
    3c46:	425b      	negs	r3, r3
    3c48:	6123      	str	r3, [r4, #16]
    3c4a:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
    3c4c:	3381      	adds	r3, #129	; 0x81
    3c4e:	7163      	strb	r3, [r4, #5]
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    3c50:	4643      	mov	r3, r8
    3c52:	2b03      	cmp	r3, #3
    3c54:	d12f      	bne.n	3cb6 <mount_volume+0x222>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    3c56:	0020      	movs	r0, r4
    3c58:	3060      	adds	r0, #96	; 0x60
    3c5a:	f7ff fd89 	bl	3770 <ld_word>
    3c5e:	2801      	cmp	r0, #1
    3c60:	d129      	bne.n	3cb6 <mount_volume+0x222>
			&& move_window(fs, bsect + 1) == FR_OK)
    3c62:	1c71      	adds	r1, r6, #1
    3c64:	0020      	movs	r0, r4
    3c66:	f7ff fe4e 	bl	3906 <move_window>
    3c6a:	2800      	cmp	r0, #0
    3c6c:	d123      	bne.n	3cb6 <mount_volume+0x222>
			fs->fsi_flag = 0;
    3c6e:	2300      	movs	r3, #0
    3c70:	7163      	strb	r3, [r4, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    3c72:	4b36      	ldr	r3, [pc, #216]	; (3d4c <mount_volume+0x2b8>)
    3c74:	18e0      	adds	r0, r4, r3
    3c76:	f7ff fd7b 	bl	3770 <ld_word>
    3c7a:	4b35      	ldr	r3, [pc, #212]	; (3d50 <mount_volume+0x2bc>)
    3c7c:	4298      	cmp	r0, r3
    3c7e:	d11a      	bne.n	3cb6 <mount_volume+0x222>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    3c80:	0020      	movs	r0, r4
    3c82:	3030      	adds	r0, #48	; 0x30
    3c84:	f7ff fd79 	bl	377a <ld_dword>
    3c88:	4b32      	ldr	r3, [pc, #200]	; (3d54 <mount_volume+0x2c0>)
    3c8a:	4298      	cmp	r0, r3
    3c8c:	d113      	bne.n	3cb6 <mount_volume+0x222>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    3c8e:	2385      	movs	r3, #133	; 0x85
    3c90:	009b      	lsls	r3, r3, #2
    3c92:	18e0      	adds	r0, r4, r3
    3c94:	f7ff fd71 	bl	377a <ld_dword>
    3c98:	4b2f      	ldr	r3, [pc, #188]	; (3d58 <mount_volume+0x2c4>)
    3c9a:	4298      	cmp	r0, r3
    3c9c:	d10b      	bne.n	3cb6 <mount_volume+0x222>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    3c9e:	2386      	movs	r3, #134	; 0x86
    3ca0:	009b      	lsls	r3, r3, #2
    3ca2:	18e0      	adds	r0, r4, r3
    3ca4:	f7ff fd69 	bl	377a <ld_dword>
    3ca8:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    3caa:	2387      	movs	r3, #135	; 0x87
    3cac:	009b      	lsls	r3, r3, #2
    3cae:	18e0      	adds	r0, r4, r3
    3cb0:	f7ff fd63 	bl	377a <ld_dword>
    3cb4:	60e0      	str	r0, [r4, #12]
	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
    3cb6:	4643      	mov	r3, r8
    3cb8:	7023      	strb	r3, [r4, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
    3cba:	4a28      	ldr	r2, [pc, #160]	; (3d5c <mount_volume+0x2c8>)
    3cbc:	8813      	ldrh	r3, [r2, #0]
    3cbe:	3301      	adds	r3, #1
    3cc0:	b29b      	uxth	r3, r3
    3cc2:	8013      	strh	r3, [r2, #0]
    3cc4:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
    3cc6:	2000      	movs	r0, #0
    3cc8:	e014      	b.n	3cf4 <mount_volume+0x260>
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    3cca:	2303      	movs	r3, #3
    3ccc:	4698      	mov	r8, r3
    3cce:	e788      	b.n	3be2 <mount_volume+0x14e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3cd0:	9a01      	ldr	r2, [sp, #4]
    3cd2:	2a00      	cmp	r2, #0
    3cd4:	d02b      	beq.n	3d2e <mount_volume+0x29a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    3cd6:	444b      	add	r3, r9
    3cd8:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    3cda:	4643      	mov	r3, r8
    3cdc:	2b02      	cmp	r3, #2
    3cde:	d101      	bne.n	3ce4 <mount_volume+0x250>
    3ce0:	006d      	lsls	r5, r5, #1
    3ce2:	e7a8      	b.n	3c36 <mount_volume+0x1a2>
    3ce4:	2303      	movs	r3, #3
    3ce6:	436b      	muls	r3, r5
    3ce8:	085b      	lsrs	r3, r3, #1
    3cea:	2201      	movs	r2, #1
    3cec:	4015      	ands	r5, r2
    3cee:	195d      	adds	r5, r3, r5
    3cf0:	e7a1      	b.n	3c36 <mount_volume+0x1a2>
	if (vol < 0) return FR_INVALID_DRIVE;
    3cf2:	200b      	movs	r0, #11
}
    3cf4:	b003      	add	sp, #12
    3cf6:	bc3c      	pop	{r2, r3, r4, r5}
    3cf8:	4690      	mov	r8, r2
    3cfa:	4699      	mov	r9, r3
    3cfc:	46a2      	mov	sl, r4
    3cfe:	46ab      	mov	fp, r5
    3d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    3d02:	200c      	movs	r0, #12
    3d04:	e7f6      	b.n	3cf4 <mount_volume+0x260>
			return FR_OK;				/* The filesystem object is already valid */
    3d06:	2000      	movs	r0, #0
    3d08:	e7f4      	b.n	3cf4 <mount_volume+0x260>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
    3d0a:	2001      	movs	r0, #1
    3d0c:	e7f2      	b.n	3cf4 <mount_volume+0x260>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    3d0e:	200d      	movs	r0, #13
    3d10:	e7f0      	b.n	3cf4 <mount_volume+0x260>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    3d12:	200d      	movs	r0, #13
    3d14:	e7ee      	b.n	3cf4 <mount_volume+0x260>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    3d16:	200d      	movs	r0, #13
    3d18:	e7ec      	b.n	3cf4 <mount_volume+0x260>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    3d1a:	200d      	movs	r0, #13
    3d1c:	e7ea      	b.n	3cf4 <mount_volume+0x260>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    3d1e:	200d      	movs	r0, #13
    3d20:	e7e8      	b.n	3cf4 <mount_volume+0x260>
		if (fmt == 0) return FR_NO_FILESYSTEM;
    3d22:	200d      	movs	r0, #13
    3d24:	e7e6      	b.n	3cf4 <mount_volume+0x260>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    3d26:	200d      	movs	r0, #13
    3d28:	e7e4      	b.n	3cf4 <mount_volume+0x260>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    3d2a:	200d      	movs	r0, #13
    3d2c:	e7e2      	b.n	3cf4 <mount_volume+0x260>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    3d2e:	200d      	movs	r0, #13
    3d30:	e7e0      	b.n	3cf4 <mount_volume+0x260>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    3d32:	200d      	movs	r0, #13
    3d34:	e7de      	b.n	3cf4 <mount_volume+0x260>
    3d36:	46c0      	nop			; (mov r8, r8)
    3d38:	20000abc 	.word	0x20000abc
    3d3c:	0ffffff5 	.word	0x0ffffff5
    3d40:	0000fff5 	.word	0x0000fff5
    3d44:	00000ff5 	.word	0x00000ff5
    3d48:	000001ff 	.word	0x000001ff
    3d4c:	0000022e 	.word	0x0000022e
    3d50:	0000aa55 	.word	0x0000aa55
    3d54:	41615252 	.word	0x41615252
    3d58:	61417272 	.word	0x61417272
    3d5c:	20000ac0 	.word	0x20000ac0

00003d60 <put_fat>:
{
    3d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d62:	46d6      	mov	lr, sl
    3d64:	464f      	mov	r7, r9
    3d66:	4646      	mov	r6, r8
    3d68:	b5c0      	push	{r6, r7, lr}
    3d6a:	0006      	movs	r6, r0
    3d6c:	000c      	movs	r4, r1
    3d6e:	0017      	movs	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    3d70:	2901      	cmp	r1, #1
    3d72:	d800      	bhi.n	3d76 <put_fat+0x16>
    3d74:	e088      	b.n	3e88 <put_fat+0x128>
    3d76:	6943      	ldr	r3, [r0, #20]
    3d78:	4299      	cmp	r1, r3
    3d7a:	d301      	bcc.n	3d80 <put_fat+0x20>
	FRESULT res = FR_INT_ERR;
    3d7c:	2502      	movs	r5, #2
    3d7e:	e084      	b.n	3e8a <put_fat+0x12a>
		switch (fs->fs_type) {
    3d80:	7803      	ldrb	r3, [r0, #0]
    3d82:	2b02      	cmp	r3, #2
    3d84:	d04e      	beq.n	3e24 <put_fat+0xc4>
    3d86:	2b03      	cmp	r3, #3
    3d88:	d061      	beq.n	3e4e <put_fat+0xee>
    3d8a:	2b01      	cmp	r3, #1
    3d8c:	d001      	beq.n	3d92 <put_fat+0x32>
	FRESULT res = FR_INT_ERR;
    3d8e:	2502      	movs	r5, #2
    3d90:	e07b      	b.n	3e8a <put_fat+0x12a>
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
    3d92:	084b      	lsrs	r3, r1, #1
    3d94:	4698      	mov	r8, r3
    3d96:	4488      	add	r8, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3d98:	4643      	mov	r3, r8
    3d9a:	0a59      	lsrs	r1, r3, #9
    3d9c:	6a03      	ldr	r3, [r0, #32]
    3d9e:	469c      	mov	ip, r3
    3da0:	4461      	add	r1, ip
    3da2:	f7ff fdb0 	bl	3906 <move_window>
    3da6:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3da8:	d16f      	bne.n	3e8a <put_fat+0x12a>
			p = fs->win + bc++ % SS(fs);
    3daa:	2330      	movs	r3, #48	; 0x30
    3dac:	469a      	mov	sl, r3
    3dae:	44b2      	add	sl, r6
    3db0:	3b2f      	subs	r3, #47	; 0x2f
    3db2:	4443      	add	r3, r8
    3db4:	4699      	mov	r9, r3
    3db6:	4643      	mov	r3, r8
    3db8:	05db      	lsls	r3, r3, #23
    3dba:	0ddb      	lsrs	r3, r3, #23
    3dbc:	4453      	add	r3, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    3dbe:	2201      	movs	r2, #1
    3dc0:	4014      	ands	r4, r2
    3dc2:	d022      	beq.n	3e0a <put_fat+0xaa>
    3dc4:	2100      	movs	r1, #0
    3dc6:	5659      	ldrsb	r1, [r3, r1]
    3dc8:	320e      	adds	r2, #14
    3dca:	400a      	ands	r2, r1
    3dcc:	0139      	lsls	r1, r7, #4
    3dce:	20ff      	movs	r0, #255	; 0xff
    3dd0:	0100      	lsls	r0, r0, #4
    3dd2:	4001      	ands	r1, r0
    3dd4:	430a      	orrs	r2, r1
    3dd6:	b2d2      	uxtb	r2, r2
    3dd8:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
    3dda:	2301      	movs	r3, #1
    3ddc:	7133      	strb	r3, [r6, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    3dde:	464b      	mov	r3, r9
    3de0:	0a59      	lsrs	r1, r3, #9
    3de2:	6a33      	ldr	r3, [r6, #32]
    3de4:	469c      	mov	ip, r3
    3de6:	4461      	add	r1, ip
    3de8:	0030      	movs	r0, r6
    3dea:	f7ff fd8c 	bl	3906 <move_window>
    3dee:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3df0:	d14b      	bne.n	3e8a <put_fat+0x12a>
			p = fs->win + bc % SS(fs);
    3df2:	464b      	mov	r3, r9
    3df4:	05db      	lsls	r3, r3, #23
    3df6:	0ddb      	lsrs	r3, r3, #23
    3df8:	4453      	add	r3, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    3dfa:	2c00      	cmp	r4, #0
    3dfc:	d007      	beq.n	3e0e <put_fat+0xae>
    3dfe:	093f      	lsrs	r7, r7, #4
    3e00:	b2ff      	uxtb	r7, r7
    3e02:	701f      	strb	r7, [r3, #0]
			fs->wflag = 1;
    3e04:	2301      	movs	r3, #1
    3e06:	7133      	strb	r3, [r6, #4]
			break;
    3e08:	e03f      	b.n	3e8a <put_fat+0x12a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
    3e0a:	b2fa      	uxtb	r2, r7
    3e0c:	e7e4      	b.n	3dd8 <put_fat+0x78>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
    3e0e:	2200      	movs	r2, #0
    3e10:	569a      	ldrsb	r2, [r3, r2]
    3e12:	210f      	movs	r1, #15
    3e14:	438a      	bics	r2, r1
    3e16:	0a3f      	lsrs	r7, r7, #8
    3e18:	b279      	sxtb	r1, r7
    3e1a:	270f      	movs	r7, #15
    3e1c:	400f      	ands	r7, r1
    3e1e:	4317      	orrs	r7, r2
    3e20:	b2ff      	uxtb	r7, r7
    3e22:	e7ee      	b.n	3e02 <put_fat+0xa2>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    3e24:	0a09      	lsrs	r1, r1, #8
    3e26:	6a03      	ldr	r3, [r0, #32]
    3e28:	469c      	mov	ip, r3
    3e2a:	4461      	add	r1, ip
    3e2c:	f7ff fd6b 	bl	3906 <move_window>
    3e30:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3e32:	d12a      	bne.n	3e8a <put_fat+0x12a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
    3e34:	0030      	movs	r0, r6
    3e36:	3030      	adds	r0, #48	; 0x30
    3e38:	0064      	lsls	r4, r4, #1
    3e3a:	23ff      	movs	r3, #255	; 0xff
    3e3c:	005b      	lsls	r3, r3, #1
    3e3e:	401c      	ands	r4, r3
    3e40:	b2b9      	uxth	r1, r7
    3e42:	1900      	adds	r0, r0, r4
    3e44:	f7ff fca4 	bl	3790 <st_word>
			fs->wflag = 1;
    3e48:	2301      	movs	r3, #1
    3e4a:	7133      	strb	r3, [r6, #4]
			break;
    3e4c:	e01d      	b.n	3e8a <put_fat+0x12a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    3e4e:	09c9      	lsrs	r1, r1, #7
    3e50:	6a03      	ldr	r3, [r0, #32]
    3e52:	469c      	mov	ip, r3
    3e54:	4461      	add	r1, ip
    3e56:	f7ff fd56 	bl	3906 <move_window>
    3e5a:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    3e5c:	d115      	bne.n	3e8a <put_fat+0x12a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    3e5e:	013f      	lsls	r7, r7, #4
    3e60:	093f      	lsrs	r7, r7, #4
    3e62:	0033      	movs	r3, r6
    3e64:	3330      	adds	r3, #48	; 0x30
    3e66:	00a4      	lsls	r4, r4, #2
    3e68:	22fe      	movs	r2, #254	; 0xfe
    3e6a:	0052      	lsls	r2, r2, #1
    3e6c:	4014      	ands	r4, r2
    3e6e:	191c      	adds	r4, r3, r4
    3e70:	0020      	movs	r0, r4
    3e72:	f7ff fc82 	bl	377a <ld_dword>
    3e76:	0f01      	lsrs	r1, r0, #28
    3e78:	0709      	lsls	r1, r1, #28
    3e7a:	4339      	orrs	r1, r7
			st_dword(fs->win + clst * 4 % SS(fs), val);
    3e7c:	0020      	movs	r0, r4
    3e7e:	f7ff fc8b 	bl	3798 <st_dword>
			fs->wflag = 1;
    3e82:	2301      	movs	r3, #1
    3e84:	7133      	strb	r3, [r6, #4]
			break;
    3e86:	e000      	b.n	3e8a <put_fat+0x12a>
	FRESULT res = FR_INT_ERR;
    3e88:	2502      	movs	r5, #2
}
    3e8a:	0028      	movs	r0, r5
    3e8c:	bc1c      	pop	{r2, r3, r4}
    3e8e:	4690      	mov	r8, r2
    3e90:	4699      	mov	r9, r3
    3e92:	46a2      	mov	sl, r4
    3e94:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003e96 <get_fat>:
{
    3e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e98:	000c      	movs	r4, r1
	FATFS *fs = obj->fs;
    3e9a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    3e9c:	2901      	cmp	r1, #1
    3e9e:	d967      	bls.n	3f70 <get_fat+0xda>
    3ea0:	696b      	ldr	r3, [r5, #20]
    3ea2:	4299      	cmp	r1, r3
    3ea4:	d266      	bcs.n	3f74 <get_fat+0xde>
		switch (fs->fs_type) {
    3ea6:	782b      	ldrb	r3, [r5, #0]
    3ea8:	2b02      	cmp	r3, #2
    3eaa:	d033      	beq.n	3f14 <get_fat+0x7e>
    3eac:	2b03      	cmp	r3, #3
    3eae:	d047      	beq.n	3f40 <get_fat+0xaa>
    3eb0:	2b01      	cmp	r3, #1
    3eb2:	d001      	beq.n	3eb8 <get_fat+0x22>
			val = 1;	/* Internal error */
    3eb4:	2001      	movs	r0, #1
    3eb6:	e05e      	b.n	3f76 <get_fat+0xe0>
			bc = (UINT)clst; bc += bc / 2;
    3eb8:	084e      	lsrs	r6, r1, #1
    3eba:	198e      	adds	r6, r1, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    3ebc:	0a71      	lsrs	r1, r6, #9
    3ebe:	6a2b      	ldr	r3, [r5, #32]
    3ec0:	469c      	mov	ip, r3
    3ec2:	4461      	add	r1, ip
    3ec4:	0028      	movs	r0, r5
    3ec6:	f7ff fd1e 	bl	3906 <move_window>
    3eca:	2800      	cmp	r0, #0
    3ecc:	d002      	beq.n	3ed4 <get_fat+0x3e>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3ece:	2001      	movs	r0, #1
    3ed0:	4240      	negs	r0, r0
    3ed2:	e050      	b.n	3f76 <get_fat+0xe0>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
    3ed4:	1c77      	adds	r7, r6, #1
    3ed6:	05f3      	lsls	r3, r6, #23
    3ed8:	0ddb      	lsrs	r3, r3, #23
    3eda:	18eb      	adds	r3, r5, r3
    3edc:	3330      	adds	r3, #48	; 0x30
    3ede:	781e      	ldrb	r6, [r3, #0]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    3ee0:	0a79      	lsrs	r1, r7, #9
    3ee2:	6a2b      	ldr	r3, [r5, #32]
    3ee4:	469c      	mov	ip, r3
    3ee6:	4461      	add	r1, ip
    3ee8:	0028      	movs	r0, r5
    3eea:	f7ff fd0c 	bl	3906 <move_window>
    3eee:	2800      	cmp	r0, #0
    3ef0:	d002      	beq.n	3ef8 <get_fat+0x62>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3ef2:	2001      	movs	r0, #1
    3ef4:	4240      	negs	r0, r0
    3ef6:	e03e      	b.n	3f76 <get_fat+0xe0>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
    3ef8:	05ff      	lsls	r7, r7, #23
    3efa:	0dff      	lsrs	r7, r7, #23
    3efc:	19ed      	adds	r5, r5, r7
    3efe:	3530      	adds	r5, #48	; 0x30
    3f00:	7828      	ldrb	r0, [r5, #0]
    3f02:	0200      	lsls	r0, r0, #8
    3f04:	4330      	orrs	r0, r6
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
    3f06:	07e3      	lsls	r3, r4, #31
    3f08:	d501      	bpl.n	3f0e <get_fat+0x78>
    3f0a:	0900      	lsrs	r0, r0, #4
    3f0c:	e033      	b.n	3f76 <get_fat+0xe0>
    3f0e:	0500      	lsls	r0, r0, #20
    3f10:	0d00      	lsrs	r0, r0, #20
    3f12:	e030      	b.n	3f76 <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    3f14:	0a09      	lsrs	r1, r1, #8
    3f16:	6a2b      	ldr	r3, [r5, #32]
    3f18:	469c      	mov	ip, r3
    3f1a:	4461      	add	r1, ip
    3f1c:	0028      	movs	r0, r5
    3f1e:	f7ff fcf2 	bl	3906 <move_window>
    3f22:	2800      	cmp	r0, #0
    3f24:	d002      	beq.n	3f2c <get_fat+0x96>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3f26:	2001      	movs	r0, #1
    3f28:	4240      	negs	r0, r0
    3f2a:	e024      	b.n	3f76 <get_fat+0xe0>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
    3f2c:	0028      	movs	r0, r5
    3f2e:	3030      	adds	r0, #48	; 0x30
    3f30:	0064      	lsls	r4, r4, #1
    3f32:	25ff      	movs	r5, #255	; 0xff
    3f34:	006d      	lsls	r5, r5, #1
    3f36:	402c      	ands	r4, r5
    3f38:	1900      	adds	r0, r0, r4
    3f3a:	f7ff fc19 	bl	3770 <ld_word>
			break;
    3f3e:	e01a      	b.n	3f76 <get_fat+0xe0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    3f40:	09c9      	lsrs	r1, r1, #7
    3f42:	6a2b      	ldr	r3, [r5, #32]
    3f44:	469c      	mov	ip, r3
    3f46:	4461      	add	r1, ip
    3f48:	0028      	movs	r0, r5
    3f4a:	f7ff fcdc 	bl	3906 <move_window>
    3f4e:	2800      	cmp	r0, #0
    3f50:	d002      	beq.n	3f58 <get_fat+0xc2>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    3f52:	2001      	movs	r0, #1
    3f54:	4240      	negs	r0, r0
	return val;
    3f56:	e00e      	b.n	3f76 <get_fat+0xe0>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
    3f58:	0028      	movs	r0, r5
    3f5a:	3030      	adds	r0, #48	; 0x30
    3f5c:	00a4      	lsls	r4, r4, #2
    3f5e:	23fe      	movs	r3, #254	; 0xfe
    3f60:	005b      	lsls	r3, r3, #1
    3f62:	401c      	ands	r4, r3
    3f64:	1900      	adds	r0, r0, r4
    3f66:	f7ff fc08 	bl	377a <ld_dword>
    3f6a:	0100      	lsls	r0, r0, #4
    3f6c:	0900      	lsrs	r0, r0, #4
			break;
    3f6e:	e002      	b.n	3f76 <get_fat+0xe0>
		val = 1;	/* Internal error */
    3f70:	2001      	movs	r0, #1
    3f72:	e000      	b.n	3f76 <get_fat+0xe0>
    3f74:	2001      	movs	r0, #1
}
    3f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003f78 <dir_sdi>:
{
    3f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f7a:	46c6      	mov	lr, r8
    3f7c:	b500      	push	{lr}
    3f7e:	0006      	movs	r6, r0
    3f80:	000c      	movs	r4, r1
	FATFS *fs = dp->obj.fs;
    3f82:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    3f84:	4b26      	ldr	r3, [pc, #152]	; (4020 <dir_sdi+0xa8>)
    3f86:	4299      	cmp	r1, r3
    3f88:	d903      	bls.n	3f92 <dir_sdi+0x1a>
		return FR_INT_ERR;
    3f8a:	2002      	movs	r0, #2
}
    3f8c:	bc04      	pop	{r2}
    3f8e:	4690      	mov	r8, r2
    3f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
    3f92:	06cb      	lsls	r3, r1, #27
    3f94:	d001      	beq.n	3f9a <dir_sdi+0x22>
		return FR_INT_ERR;
    3f96:	2002      	movs	r0, #2
    3f98:	e7f8      	b.n	3f8c <dir_sdi+0x14>
	dp->dptr = ofs;				/* Set current offset */
    3f9a:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    3f9c:	6885      	ldr	r5, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    3f9e:	2d00      	cmp	r5, #0
    3fa0:	d103      	bne.n	3faa <dir_sdi+0x32>
    3fa2:	783b      	ldrb	r3, [r7, #0]
    3fa4:	2b02      	cmp	r3, #2
    3fa6:	d900      	bls.n	3faa <dir_sdi+0x32>
		clst = (DWORD)fs->dirbase;
    3fa8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
    3faa:	2d00      	cmp	r5, #0
    3fac:	d10d      	bne.n	3fca <dir_sdi+0x52>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
    3fae:	0963      	lsrs	r3, r4, #5
    3fb0:	893a      	ldrh	r2, [r7, #8]
    3fb2:	4293      	cmp	r3, r2
    3fb4:	d301      	bcc.n	3fba <dir_sdi+0x42>
    3fb6:	2002      	movs	r0, #2
    3fb8:	e7e8      	b.n	3f8c <dir_sdi+0x14>
		dp->sect = fs->dirbase;
    3fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3fbc:	61b3      	str	r3, [r6, #24]
	dp->clust = clst;					/* Current cluster# */
    3fbe:	6175      	str	r5, [r6, #20]
	if (dp->sect == 0) return FR_INT_ERR;
    3fc0:	69b3      	ldr	r3, [r6, #24]
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d11d      	bne.n	4002 <dir_sdi+0x8a>
    3fc6:	2002      	movs	r0, #2
    3fc8:	e7e0      	b.n	3f8c <dir_sdi+0x14>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    3fca:	897b      	ldrh	r3, [r7, #10]
    3fcc:	025b      	lsls	r3, r3, #9
    3fce:	4698      	mov	r8, r3
		while (ofs >= csz) {				/* Follow cluster chain */
    3fd0:	e001      	b.n	3fd6 <dir_sdi+0x5e>
			ofs -= csz;
    3fd2:	4643      	mov	r3, r8
    3fd4:	1ae4      	subs	r4, r4, r3
		while (ofs >= csz) {				/* Follow cluster chain */
    3fd6:	4544      	cmp	r4, r8
    3fd8:	d30d      	bcc.n	3ff6 <dir_sdi+0x7e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    3fda:	0029      	movs	r1, r5
    3fdc:	0030      	movs	r0, r6
    3fde:	f7ff ff5a 	bl	3e96 <get_fat>
    3fe2:	0005      	movs	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    3fe4:	1c43      	adds	r3, r0, #1
    3fe6:	d016      	beq.n	4016 <dir_sdi+0x9e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    3fe8:	2801      	cmp	r0, #1
    3fea:	d916      	bls.n	401a <dir_sdi+0xa2>
    3fec:	697b      	ldr	r3, [r7, #20]
    3fee:	4298      	cmp	r0, r3
    3ff0:	d3ef      	bcc.n	3fd2 <dir_sdi+0x5a>
    3ff2:	2002      	movs	r0, #2
    3ff4:	e7ca      	b.n	3f8c <dir_sdi+0x14>
		dp->sect = clst2sect(fs, clst);
    3ff6:	0029      	movs	r1, r5
    3ff8:	0038      	movs	r0, r7
    3ffa:	f7ff fbd9 	bl	37b0 <clst2sect>
    3ffe:	61b0      	str	r0, [r6, #24]
    4000:	e7dd      	b.n	3fbe <dir_sdi+0x46>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
    4002:	0a62      	lsrs	r2, r4, #9
    4004:	189b      	adds	r3, r3, r2
    4006:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    4008:	3730      	adds	r7, #48	; 0x30
    400a:	05e4      	lsls	r4, r4, #23
    400c:	0de4      	lsrs	r4, r4, #23
    400e:	193c      	adds	r4, r7, r4
    4010:	61f4      	str	r4, [r6, #28]
	return FR_OK;
    4012:	2000      	movs	r0, #0
    4014:	e7ba      	b.n	3f8c <dir_sdi+0x14>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4016:	2001      	movs	r0, #1
    4018:	e7b8      	b.n	3f8c <dir_sdi+0x14>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    401a:	2002      	movs	r0, #2
    401c:	e7b6      	b.n	3f8c <dir_sdi+0x14>
    401e:	46c0      	nop			; (mov r8, r8)
    4020:	001fffff 	.word	0x001fffff

00004024 <create_chain>:
{
    4024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4026:	46ce      	mov	lr, r9
    4028:	4647      	mov	r7, r8
    402a:	b580      	push	{r7, lr}
    402c:	0006      	movs	r6, r0
    402e:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
    4030:	6807      	ldr	r7, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
    4032:	2900      	cmp	r1, #0
    4034:	d107      	bne.n	4046 <create_chain+0x22>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
    4036:	68fd      	ldr	r5, [r7, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    4038:	2d00      	cmp	r5, #0
    403a:	d010      	beq.n	405e <create_chain+0x3a>
    403c:	697b      	ldr	r3, [r7, #20]
    403e:	429d      	cmp	r5, r3
    4040:	d30e      	bcc.n	4060 <create_chain+0x3c>
    4042:	2501      	movs	r5, #1
    4044:	e00c      	b.n	4060 <create_chain+0x3c>
		cs = get_fat(obj, clst);			/* Check the cluster status */
    4046:	f7ff ff26 	bl	3e96 <get_fat>
		if (cs < 2) return 1;				/* Test for insanity */
    404a:	2801      	cmp	r0, #1
    404c:	d800      	bhi.n	4050 <create_chain+0x2c>
    404e:	e074      	b.n	413a <create_chain+0x116>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
    4050:	1c43      	adds	r3, r0, #1
    4052:	d062      	beq.n	411a <create_chain+0xf6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    4054:	697b      	ldr	r3, [r7, #20]
    4056:	4298      	cmp	r0, r3
    4058:	d35f      	bcc.n	411a <create_chain+0xf6>
		scl = clst;							/* Cluster to start to find */
    405a:	4645      	mov	r5, r8
    405c:	e000      	b.n	4060 <create_chain+0x3c>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    405e:	2501      	movs	r5, #1
	if (fs->free_clst == 0) return 0;		/* No free cluster */
    4060:	6938      	ldr	r0, [r7, #16]
    4062:	2800      	cmp	r0, #0
    4064:	d059      	beq.n	411a <create_chain+0xf6>
		if (scl == clst) {						/* Stretching an existing chain? */
    4066:	4545      	cmp	r5, r8
    4068:	d006      	beq.n	4078 <create_chain+0x54>
		ncl = 0;
    406a:	2300      	movs	r3, #0
    406c:	4699      	mov	r9, r3
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
    406e:	464b      	mov	r3, r9
    4070:	2b00      	cmp	r3, #0
    4072:	d137      	bne.n	40e4 <create_chain+0xc0>
    4074:	002c      	movs	r4, r5
    4076:	e02c      	b.n	40d2 <create_chain+0xae>
			ncl = scl + 1;						/* Test if next cluster is free */
    4078:	1c6b      	adds	r3, r5, #1
    407a:	4699      	mov	r9, r3
			if (ncl >= fs->n_fatent) ncl = 2;
    407c:	697b      	ldr	r3, [r7, #20]
    407e:	4599      	cmp	r9, r3
    4080:	d301      	bcc.n	4086 <create_chain+0x62>
    4082:	2302      	movs	r3, #2
    4084:	4699      	mov	r9, r3
			cs = get_fat(obj, ncl);				/* Get next cluster status */
    4086:	4649      	mov	r1, r9
    4088:	0030      	movs	r0, r6
    408a:	f7ff ff04 	bl	3e96 <get_fat>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    408e:	2801      	cmp	r0, #1
    4090:	d043      	beq.n	411a <create_chain+0xf6>
    4092:	1c43      	adds	r3, r0, #1
    4094:	d041      	beq.n	411a <create_chain+0xf6>
			if (cs != 0) {						/* Not free? */
    4096:	2800      	cmp	r0, #0
    4098:	d0e9      	beq.n	406e <create_chain+0x4a>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
    409a:	68fb      	ldr	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    409c:	2b01      	cmp	r3, #1
    409e:	d905      	bls.n	40ac <create_chain+0x88>
    40a0:	697a      	ldr	r2, [r7, #20]
    40a2:	4293      	cmp	r3, r2
    40a4:	d305      	bcc.n	40b2 <create_chain+0x8e>
				ncl = 0;
    40a6:	2300      	movs	r3, #0
    40a8:	4699      	mov	r9, r3
    40aa:	e7e0      	b.n	406e <create_chain+0x4a>
    40ac:	2300      	movs	r3, #0
    40ae:	4699      	mov	r9, r3
    40b0:	e7dd      	b.n	406e <create_chain+0x4a>
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
    40b2:	001d      	movs	r5, r3
				ncl = 0;
    40b4:	2300      	movs	r3, #0
    40b6:	4699      	mov	r9, r3
    40b8:	e7d9      	b.n	406e <create_chain+0x4a>
				cs = get_fat(obj, ncl);			/* Get the cluster status */
    40ba:	0021      	movs	r1, r4
    40bc:	0030      	movs	r0, r6
    40be:	f7ff feea 	bl	3e96 <get_fat>
				if (cs == 0) break;				/* Found a free cluster? */
    40c2:	2800      	cmp	r0, #0
    40c4:	d00d      	beq.n	40e2 <create_chain+0xbe>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
    40c6:	2801      	cmp	r0, #1
    40c8:	d027      	beq.n	411a <create_chain+0xf6>
    40ca:	1c43      	adds	r3, r0, #1
    40cc:	d025      	beq.n	411a <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
    40ce:	42ac      	cmp	r4, r5
    40d0:	d037      	beq.n	4142 <create_chain+0x11e>
				ncl++;							/* Next cluster */
    40d2:	3401      	adds	r4, #1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    40d4:	697b      	ldr	r3, [r7, #20]
    40d6:	429c      	cmp	r4, r3
    40d8:	d3ef      	bcc.n	40ba <create_chain+0x96>
					if (ncl > scl) return 0;	/* No free cluster found? */
    40da:	2d01      	cmp	r5, #1
    40dc:	d92f      	bls.n	413e <create_chain+0x11a>
					ncl = 2;
    40de:	2402      	movs	r4, #2
    40e0:	e7eb      	b.n	40ba <create_chain+0x96>
    40e2:	46a1      	mov	r9, r4
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    40e4:	2201      	movs	r2, #1
    40e6:	4252      	negs	r2, r2
    40e8:	4649      	mov	r1, r9
    40ea:	0038      	movs	r0, r7
    40ec:	f7ff fe38 	bl	3d60 <put_fat>
		if (res == FR_OK && clst != 0) {
    40f0:	2800      	cmp	r0, #0
    40f2:	d102      	bne.n	40fa <create_chain+0xd6>
    40f4:	4643      	mov	r3, r8
    40f6:	2b00      	cmp	r3, #0
    40f8:	d113      	bne.n	4122 <create_chain+0xfe>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    40fa:	2800      	cmp	r0, #0
    40fc:	d117      	bne.n	412e <create_chain+0x10a>
		fs->last_clst = ncl;
    40fe:	464b      	mov	r3, r9
    4100:	60fb      	str	r3, [r7, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    4102:	693a      	ldr	r2, [r7, #16]
    4104:	697b      	ldr	r3, [r7, #20]
    4106:	3b02      	subs	r3, #2
    4108:	429a      	cmp	r2, r3
    410a:	d801      	bhi.n	4110 <create_chain+0xec>
    410c:	3a01      	subs	r2, #1
    410e:	613a      	str	r2, [r7, #16]
		fs->fsi_flag |= 1;
    4110:	797b      	ldrb	r3, [r7, #5]
    4112:	2201      	movs	r2, #1
    4114:	4313      	orrs	r3, r2
    4116:	717b      	strb	r3, [r7, #5]
    4118:	4648      	mov	r0, r9
}
    411a:	bc0c      	pop	{r2, r3}
    411c:	4690      	mov	r8, r2
    411e:	4699      	mov	r9, r3
    4120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    4122:	464a      	mov	r2, r9
    4124:	4641      	mov	r1, r8
    4126:	0038      	movs	r0, r7
    4128:	f7ff fe1a 	bl	3d60 <put_fat>
    412c:	e7e5      	b.n	40fa <create_chain+0xd6>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    412e:	2801      	cmp	r0, #1
    4130:	d001      	beq.n	4136 <create_chain+0x112>
    4132:	2001      	movs	r0, #1
    4134:	e7f1      	b.n	411a <create_chain+0xf6>
    4136:	3802      	subs	r0, #2
    4138:	e7ef      	b.n	411a <create_chain+0xf6>
		if (cs < 2) return 1;				/* Test for insanity */
    413a:	2001      	movs	r0, #1
    413c:	e7ed      	b.n	411a <create_chain+0xf6>
					if (ncl > scl) return 0;	/* No free cluster found? */
    413e:	4648      	mov	r0, r9
    4140:	e7eb      	b.n	411a <create_chain+0xf6>
				if (ncl == scl) return 0;		/* No free cluster found? */
    4142:	4648      	mov	r0, r9
    4144:	e7e9      	b.n	411a <create_chain+0xf6>

00004146 <remove_chain>:
{
    4146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4148:	0007      	movs	r7, r0
    414a:	000c      	movs	r4, r1
    414c:	0011      	movs	r1, r2
	FATFS *fs = obj->fs;
    414e:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    4150:	2c01      	cmp	r4, #1
    4152:	d92e      	bls.n	41b2 <remove_chain+0x6c>
    4154:	696b      	ldr	r3, [r5, #20]
    4156:	429c      	cmp	r4, r3
    4158:	d301      	bcc.n	415e <remove_chain+0x18>
    415a:	2002      	movs	r0, #2
    415c:	e02a      	b.n	41b4 <remove_chain+0x6e>
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    415e:	2a00      	cmp	r2, #0
    4160:	d00a      	beq.n	4178 <remove_chain+0x32>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    4162:	2201      	movs	r2, #1
    4164:	4252      	negs	r2, r2
    4166:	0028      	movs	r0, r5
    4168:	f7ff fdfa 	bl	3d60 <put_fat>
		if (res != FR_OK) return res;
    416c:	2800      	cmp	r0, #0
    416e:	d003      	beq.n	4178 <remove_chain+0x32>
    4170:	e020      	b.n	41b4 <remove_chain+0x6e>
		clst = nxt;					/* Next cluster */
    4172:	0034      	movs	r4, r6
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    4174:	4296      	cmp	r6, r2
    4176:	d21d      	bcs.n	41b4 <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
    4178:	0021      	movs	r1, r4
    417a:	0038      	movs	r0, r7
    417c:	f7ff fe8b 	bl	3e96 <get_fat>
    4180:	1e06      	subs	r6, r0, #0
		if (nxt == 0) break;				/* Empty cluster? */
    4182:	d018      	beq.n	41b6 <remove_chain+0x70>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    4184:	2801      	cmp	r0, #1
    4186:	d018      	beq.n	41ba <remove_chain+0x74>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    4188:	1c43      	adds	r3, r0, #1
    418a:	d018      	beq.n	41be <remove_chain+0x78>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    418c:	2200      	movs	r2, #0
    418e:	0021      	movs	r1, r4
    4190:	0028      	movs	r0, r5
    4192:	f7ff fde5 	bl	3d60 <put_fat>
			if (res != FR_OK) return res;
    4196:	2800      	cmp	r0, #0
    4198:	d10c      	bne.n	41b4 <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    419a:	692b      	ldr	r3, [r5, #16]
    419c:	696a      	ldr	r2, [r5, #20]
    419e:	1e91      	subs	r1, r2, #2
    41a0:	428b      	cmp	r3, r1
    41a2:	d2e6      	bcs.n	4172 <remove_chain+0x2c>
			fs->free_clst++;
    41a4:	3301      	adds	r3, #1
    41a6:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
    41a8:	796b      	ldrb	r3, [r5, #5]
    41aa:	2101      	movs	r1, #1
    41ac:	430b      	orrs	r3, r1
    41ae:	716b      	strb	r3, [r5, #5]
    41b0:	e7df      	b.n	4172 <remove_chain+0x2c>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    41b2:	2002      	movs	r0, #2
}
    41b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
    41b6:	2000      	movs	r0, #0
    41b8:	e7fc      	b.n	41b4 <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    41ba:	2002      	movs	r0, #2
    41bc:	e7fa      	b.n	41b4 <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    41be:	2001      	movs	r0, #1
    41c0:	e7f8      	b.n	41b4 <remove_chain+0x6e>

000041c2 <dir_clear>:
{
    41c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41c4:	0006      	movs	r6, r0
    41c6:	000c      	movs	r4, r1
	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    41c8:	f7ff fb73 	bl	38b2 <sync_window>
    41cc:	2800      	cmp	r0, #0
    41ce:	d001      	beq.n	41d4 <dir_clear+0x12>
    41d0:	2001      	movs	r0, #1
}
    41d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sect = clst2sect(fs, clst);		/* Top of the cluster */
    41d4:	0021      	movs	r1, r4
    41d6:	0030      	movs	r0, r6
    41d8:	f7ff faea 	bl	37b0 <clst2sect>
    41dc:	0007      	movs	r7, r0
	fs->winsect = sect;				/* Set window to top of the cluster */
    41de:	62f0      	str	r0, [r6, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
    41e0:	0035      	movs	r5, r6
    41e2:	3530      	adds	r5, #48	; 0x30
    41e4:	2280      	movs	r2, #128	; 0x80
    41e6:	0092      	lsls	r2, r2, #2
    41e8:	2100      	movs	r1, #0
    41ea:	0028      	movs	r0, r5
    41ec:	f003 fd3e 	bl	7c6c <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    41f0:	2400      	movs	r4, #0
    41f2:	e000      	b.n	41f6 <dir_clear+0x34>
    41f4:	3401      	adds	r4, #1
    41f6:	8973      	ldrh	r3, [r6, #10]
    41f8:	429c      	cmp	r4, r3
    41fa:	d207      	bcs.n	420c <dir_clear+0x4a>
    41fc:	19e2      	adds	r2, r4, r7
    41fe:	7870      	ldrb	r0, [r6, #1]
    4200:	2301      	movs	r3, #1
    4202:	0029      	movs	r1, r5
    4204:	f000 fe22 	bl	4e4c <disk_write>
    4208:	2800      	cmp	r0, #0
    420a:	d0f3      	beq.n	41f4 <dir_clear+0x32>
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
    420c:	8970      	ldrh	r0, [r6, #10]
    420e:	1a24      	subs	r4, r4, r0
    4210:	1e60      	subs	r0, r4, #1
    4212:	4184      	sbcs	r4, r0
    4214:	b2e0      	uxtb	r0, r4
    4216:	e7dc      	b.n	41d2 <dir_clear+0x10>

00004218 <dir_next>:
{
    4218:	b5f0      	push	{r4, r5, r6, r7, lr}
    421a:	46ce      	mov	lr, r9
    421c:	b500      	push	{lr}
    421e:	b082      	sub	sp, #8
    4220:	0004      	movs	r4, r0
    4222:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
    4224:	6807      	ldr	r7, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
    4226:	6905      	ldr	r5, [r0, #16]
    4228:	3520      	adds	r5, #32
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
    422a:	4b2f      	ldr	r3, [pc, #188]	; (42e8 <dir_next+0xd0>)
    422c:	429d      	cmp	r5, r3
    422e:	d901      	bls.n	4234 <dir_next+0x1c>
    4230:	2300      	movs	r3, #0
    4232:	6183      	str	r3, [r0, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
    4234:	69a3      	ldr	r3, [r4, #24]
    4236:	2b00      	cmp	r3, #0
    4238:	d104      	bne.n	4244 <dir_next+0x2c>
    423a:	2004      	movs	r0, #4
}
    423c:	b002      	add	sp, #8
    423e:	bc04      	pop	{r2}
    4240:	4691      	mov	r9, r2
    4242:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    4244:	05ee      	lsls	r6, r5, #23
    4246:	0df6      	lsrs	r6, r6, #23
    4248:	d111      	bne.n	426e <dir_next+0x56>
		dp->sect++;				/* Next sector */
    424a:	3301      	adds	r3, #1
    424c:	61a3      	str	r3, [r4, #24]
		if (dp->clust == 0) {	/* Static table */
    424e:	6961      	ldr	r1, [r4, #20]
    4250:	2900      	cmp	r1, #0
    4252:	d107      	bne.n	4264 <dir_next+0x4c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    4254:	096b      	lsrs	r3, r5, #5
    4256:	893a      	ldrh	r2, [r7, #8]
    4258:	4293      	cmp	r3, r2
    425a:	d308      	bcc.n	426e <dir_next+0x56>
				dp->sect = 0; return FR_NO_FILE;
    425c:	2300      	movs	r3, #0
    425e:	61a3      	str	r3, [r4, #24]
    4260:	2004      	movs	r0, #4
    4262:	e7eb      	b.n	423c <dir_next+0x24>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    4264:	0a6b      	lsrs	r3, r5, #9
    4266:	897a      	ldrh	r2, [r7, #10]
    4268:	3a01      	subs	r2, #1
    426a:	421a      	tst	r2, r3
    426c:	d005      	beq.n	427a <dir_next+0x62>
	dp->dptr = ofs;						/* Current entry */
    426e:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    4270:	3730      	adds	r7, #48	; 0x30
    4272:	19bf      	adds	r7, r7, r6
    4274:	61e7      	str	r7, [r4, #28]
	return FR_OK;
    4276:	2000      	movs	r0, #0
    4278:	e7e0      	b.n	423c <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    427a:	0020      	movs	r0, r4
    427c:	f7ff fe0b 	bl	3e96 <get_fat>
    4280:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    4282:	0003      	movs	r3, r0
    4284:	2801      	cmp	r0, #1
    4286:	d925      	bls.n	42d4 <dir_next+0xbc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    4288:	3301      	adds	r3, #1
    428a:	d025      	beq.n	42d8 <dir_next+0xc0>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    428c:	697b      	ldr	r3, [r7, #20]
    428e:	4298      	cmp	r0, r3
    4290:	d318      	bcc.n	42c4 <dir_next+0xac>
					if (!stretch) {								/* If no stretch, report EOT */
    4292:	9b01      	ldr	r3, [sp, #4]
    4294:	2b00      	cmp	r3, #0
    4296:	d102      	bne.n	429e <dir_next+0x86>
						dp->sect = 0; return FR_NO_FILE;
    4298:	61a3      	str	r3, [r4, #24]
    429a:	2004      	movs	r0, #4
    429c:	e7ce      	b.n	423c <dir_next+0x24>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    429e:	6961      	ldr	r1, [r4, #20]
    42a0:	0020      	movs	r0, r4
    42a2:	f7ff febf 	bl	4024 <create_chain>
    42a6:	4681      	mov	r9, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    42a8:	1e03      	subs	r3, r0, #0
    42aa:	d101      	bne.n	42b0 <dir_next+0x98>
    42ac:	2007      	movs	r0, #7
    42ae:	e7c5      	b.n	423c <dir_next+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    42b0:	2801      	cmp	r0, #1
    42b2:	d013      	beq.n	42dc <dir_next+0xc4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    42b4:	3301      	adds	r3, #1
    42b6:	d013      	beq.n	42e0 <dir_next+0xc8>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    42b8:	0001      	movs	r1, r0
    42ba:	0038      	movs	r0, r7
    42bc:	f7ff ff81 	bl	41c2 <dir_clear>
    42c0:	2800      	cmp	r0, #0
    42c2:	d10f      	bne.n	42e4 <dir_next+0xcc>
				dp->clust = clst;		/* Initialize data for new cluster */
    42c4:	464b      	mov	r3, r9
    42c6:	6163      	str	r3, [r4, #20]
				dp->sect = clst2sect(fs, clst);
    42c8:	4649      	mov	r1, r9
    42ca:	0038      	movs	r0, r7
    42cc:	f7ff fa70 	bl	37b0 <clst2sect>
    42d0:	61a0      	str	r0, [r4, #24]
    42d2:	e7cc      	b.n	426e <dir_next+0x56>
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    42d4:	2002      	movs	r0, #2
    42d6:	e7b1      	b.n	423c <dir_next+0x24>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    42d8:	2001      	movs	r0, #1
    42da:	e7af      	b.n	423c <dir_next+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    42dc:	2002      	movs	r0, #2
    42de:	e7ad      	b.n	423c <dir_next+0x24>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    42e0:	2001      	movs	r0, #1
    42e2:	e7ab      	b.n	423c <dir_next+0x24>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    42e4:	2001      	movs	r0, #1
    42e6:	e7a9      	b.n	423c <dir_next+0x24>
    42e8:	001fffff 	.word	0x001fffff

000042ec <dir_find>:
{
    42ec:	b570      	push	{r4, r5, r6, lr}
    42ee:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
    42f0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
    42f2:	2100      	movs	r1, #0
    42f4:	f7ff fe40 	bl	3f78 <dir_sdi>
    42f8:	1e04      	subs	r4, r0, #0
	if (res != FR_OK) return res;
    42fa:	d007      	beq.n	430c <dir_find+0x20>
}
    42fc:	0020      	movs	r0, r4
    42fe:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);	/* Next entry */
    4300:	2100      	movs	r1, #0
    4302:	0028      	movs	r0, r5
    4304:	f7ff ff88 	bl	4218 <dir_next>
    4308:	1e04      	subs	r4, r0, #0
	} while (res == FR_OK);
    430a:	d1f7      	bne.n	42fc <dir_find+0x10>
		res = move_window(fs, dp->sect);
    430c:	69a9      	ldr	r1, [r5, #24]
    430e:	0030      	movs	r0, r6
    4310:	f7ff faf9 	bl	3906 <move_window>
    4314:	1e04      	subs	r4, r0, #0
		if (res != FR_OK) break;
    4316:	d1f1      	bne.n	42fc <dir_find+0x10>
		c = dp->dir[DIR_Name];
    4318:	69e8      	ldr	r0, [r5, #28]
    431a:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    431c:	2b00      	cmp	r3, #0
    431e:	d00e      	beq.n	433e <dir_find+0x52>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    4320:	7ac2      	ldrb	r2, [r0, #11]
    4322:	233f      	movs	r3, #63	; 0x3f
    4324:	4013      	ands	r3, r2
    4326:	71ab      	strb	r3, [r5, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    4328:	7ac3      	ldrb	r3, [r0, #11]
    432a:	071b      	lsls	r3, r3, #28
    432c:	d4e8      	bmi.n	4300 <dir_find+0x14>
    432e:	0029      	movs	r1, r5
    4330:	3120      	adds	r1, #32
    4332:	220b      	movs	r2, #11
    4334:	f003 fc32 	bl	7b9c <memcmp>
    4338:	2800      	cmp	r0, #0
    433a:	d1e1      	bne.n	4300 <dir_find+0x14>
    433c:	e7de      	b.n	42fc <dir_find+0x10>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    433e:	2404      	movs	r4, #4
    4340:	e7dc      	b.n	42fc <dir_find+0x10>

00004342 <dir_alloc>:
{
    4342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4344:	0005      	movs	r5, r0
    4346:	000e      	movs	r6, r1
	FATFS *fs = dp->obj.fs;
    4348:	6804      	ldr	r4, [r0, #0]
	res = dir_sdi(dp, 0);
    434a:	2100      	movs	r1, #0
    434c:	f7ff fe14 	bl	3f78 <dir_sdi>
	if (res == FR_OK) {
    4350:	2800      	cmp	r0, #0
    4352:	d118      	bne.n	4386 <dir_alloc+0x44>
    4354:	2700      	movs	r7, #0
    4356:	e008      	b.n	436a <dir_alloc+0x28>
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
    4358:	3701      	adds	r7, #1
    435a:	42b7      	cmp	r7, r6
    435c:	d013      	beq.n	4386 <dir_alloc+0x44>
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
    435e:	2101      	movs	r1, #1
    4360:	0028      	movs	r0, r5
    4362:	f7ff ff59 	bl	4218 <dir_next>
		} while (res == FR_OK);
    4366:	2800      	cmp	r0, #0
    4368:	d10d      	bne.n	4386 <dir_alloc+0x44>
			res = move_window(fs, dp->sect);
    436a:	69a9      	ldr	r1, [r5, #24]
    436c:	0020      	movs	r0, r4
    436e:	f7ff faca 	bl	3906 <move_window>
			if (res != FR_OK) break;
    4372:	2800      	cmp	r0, #0
    4374:	d107      	bne.n	4386 <dir_alloc+0x44>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
    4376:	69eb      	ldr	r3, [r5, #28]
    4378:	781b      	ldrb	r3, [r3, #0]
    437a:	2be5      	cmp	r3, #229	; 0xe5
    437c:	d0ec      	beq.n	4358 <dir_alloc+0x16>
    437e:	2b00      	cmp	r3, #0
    4380:	d0ea      	beq.n	4358 <dir_alloc+0x16>
				n = 0;				/* Not a free entry, restart to search */
    4382:	2700      	movs	r7, #0
    4384:	e7eb      	b.n	435e <dir_alloc+0x1c>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    4386:	2804      	cmp	r0, #4
    4388:	d000      	beq.n	438c <dir_alloc+0x4a>
}
    438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    438c:	3003      	adds	r0, #3
    438e:	e7fc      	b.n	438a <dir_alloc+0x48>

00004390 <create_name>:
{
    4390:	b5f0      	push	{r4, r5, r6, r7, lr}
    4392:	46de      	mov	lr, fp
    4394:	4657      	mov	r7, sl
    4396:	464e      	mov	r6, r9
    4398:	4645      	mov	r5, r8
    439a:	b5e0      	push	{r5, r6, r7, lr}
    439c:	b083      	sub	sp, #12
    439e:	9001      	str	r0, [sp, #4]
    43a0:	468a      	mov	sl, r1
	p = *path; sfn = dp->fn;
    43a2:	680b      	ldr	r3, [r1, #0]
    43a4:	4698      	mov	r8, r3
    43a6:	0003      	movs	r3, r0
    43a8:	2220      	movs	r2, #32
    43aa:	4694      	mov	ip, r2
    43ac:	4463      	add	r3, ip
    43ae:	469b      	mov	fp, r3
	memset(sfn, ' ', 11);
    43b0:	3a15      	subs	r2, #21
    43b2:	2120      	movs	r1, #32
    43b4:	0018      	movs	r0, r3
    43b6:	f003 fc59 	bl	7c6c <memset>
	si = i = 0; ni = 8;
    43ba:	2700      	movs	r7, #0
    43bc:	2600      	movs	r6, #0
    43be:	2308      	movs	r3, #8
    43c0:	4699      	mov	r9, r3
		c = (BYTE)p[si++];				/* Get a byte */
    43c2:	1c75      	adds	r5, r6, #1
    43c4:	4643      	mov	r3, r8
    43c6:	5d9c      	ldrb	r4, [r3, r6]
		if (c <= ' ') break; 			/* Break if end of the path name */
    43c8:	2c20      	cmp	r4, #32
    43ca:	d91b      	bls.n	4404 <create_name+0x74>
		if (IsSeparator(c)) {			/* Break if a separator is found */
    43cc:	2c2f      	cmp	r4, #47	; 0x2f
    43ce:	d013      	beq.n	43f8 <create_name+0x68>
    43d0:	2c5c      	cmp	r4, #92	; 0x5c
    43d2:	d011      	beq.n	43f8 <create_name+0x68>
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    43d4:	2c2e      	cmp	r4, #46	; 0x2e
    43d6:	d001      	beq.n	43dc <create_name+0x4c>
    43d8:	45b9      	cmp	r9, r7
    43da:	d81f      	bhi.n	441c <create_name+0x8c>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    43dc:	464b      	mov	r3, r9
    43de:	2b0b      	cmp	r3, #11
    43e0:	d066      	beq.n	44b0 <create_name+0x120>
    43e2:	2c2e      	cmp	r4, #46	; 0x2e
    43e4:	d015      	beq.n	4412 <create_name+0x82>
    43e6:	2006      	movs	r0, #6
}
    43e8:	b003      	add	sp, #12
    43ea:	bc3c      	pop	{r2, r3, r4, r5}
    43ec:	4690      	mov	r8, r2
    43ee:	4699      	mov	r9, r3
    43f0:	46a2      	mov	sl, r4
    43f2:	46ab      	mov	fp, r5
    43f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
    43f6:	3501      	adds	r5, #1
    43f8:	4643      	mov	r3, r8
    43fa:	5d5b      	ldrb	r3, [r3, r5]
    43fc:	2b2f      	cmp	r3, #47	; 0x2f
    43fe:	d0fa      	beq.n	43f6 <create_name+0x66>
    4400:	2b5c      	cmp	r3, #92	; 0x5c
    4402:	d0f8      	beq.n	43f6 <create_name+0x66>
	*path = &p[si];						/* Return pointer to the next segment */
    4404:	4445      	add	r5, r8
    4406:	4653      	mov	r3, sl
    4408:	601d      	str	r5, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    440a:	2f00      	cmp	r7, #0
    440c:	d137      	bne.n	447e <create_name+0xee>
    440e:	2006      	movs	r0, #6
    4410:	e7ea      	b.n	43e8 <create_name+0x58>
		c = (BYTE)p[si++];				/* Get a byte */
    4412:	002e      	movs	r6, r5
			i = 8; ni = 11;				/* Enter file extension field */
    4414:	2708      	movs	r7, #8
    4416:	230b      	movs	r3, #11
    4418:	4699      	mov	r9, r3
    441a:	e7d2      	b.n	43c2 <create_name+0x32>
		if (c >= 0x80) {				/* Is SBC extended character? */
    441c:	b263      	sxtb	r3, r4
    441e:	2b00      	cmp	r3, #0
    4420:	db16      	blt.n	4450 <create_name+0xc0>
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
    4422:	0020      	movs	r0, r4
    4424:	f7ff f9c0 	bl	37a8 <dbc_1st>
    4428:	2800      	cmp	r0, #0
    442a:	d016      	beq.n	445a <create_name+0xca>
			d = (BYTE)p[si++];			/* Get 2nd byte */
    442c:	3602      	adds	r6, #2
    442e:	4643      	mov	r3, r8
    4430:	5d5d      	ldrb	r5, [r3, r5]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    4432:	0028      	movs	r0, r5
    4434:	f7ff f9ba 	bl	37ac <dbc_2nd>
    4438:	2800      	cmp	r0, #0
    443a:	d03b      	beq.n	44b4 <create_name+0x124>
    443c:	464b      	mov	r3, r9
    443e:	3b01      	subs	r3, #1
    4440:	429f      	cmp	r7, r3
    4442:	d239      	bcs.n	44b8 <create_name+0x128>
			sfn[i++] = c;
    4444:	1c7b      	adds	r3, r7, #1
    4446:	465a      	mov	r2, fp
    4448:	55d4      	strb	r4, [r2, r7]
			sfn[i++] = d;
    444a:	54d5      	strb	r5, [r2, r3]
    444c:	3702      	adds	r7, #2
    444e:	e7b8      	b.n	43c2 <create_name+0x32>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    4450:	237f      	movs	r3, #127	; 0x7f
    4452:	401c      	ands	r4, r3
    4454:	4b1a      	ldr	r3, [pc, #104]	; (44c0 <create_name+0x130>)
    4456:	5d1c      	ldrb	r4, [r3, r4]
    4458:	e7e3      	b.n	4422 <create_name+0x92>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    445a:	0021      	movs	r1, r4
    445c:	4819      	ldr	r0, [pc, #100]	; (44c4 <create_name+0x134>)
    445e:	f003 fce5 	bl	7e2c <strchr>
    4462:	2800      	cmp	r0, #0
    4464:	d12a      	bne.n	44bc <create_name+0x12c>
			if (IsLower(c)) c -= 0x20;	/* To upper */
    4466:	0023      	movs	r3, r4
    4468:	3b61      	subs	r3, #97	; 0x61
    446a:	b2db      	uxtb	r3, r3
    446c:	2b19      	cmp	r3, #25
    446e:	d801      	bhi.n	4474 <create_name+0xe4>
    4470:	3c20      	subs	r4, #32
    4472:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
    4474:	465b      	mov	r3, fp
    4476:	55dc      	strb	r4, [r3, r7]
    4478:	3701      	adds	r7, #1
		c = (BYTE)p[si++];				/* Get a byte */
    447a:	002e      	movs	r6, r5
    447c:	e7a1      	b.n	43c2 <create_name+0x32>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    447e:	2320      	movs	r3, #32
    4480:	9a01      	ldr	r2, [sp, #4]
    4482:	5cd3      	ldrb	r3, [r2, r3]
    4484:	2be5      	cmp	r3, #229	; 0xe5
    4486:	d006      	beq.n	4496 <create_name+0x106>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    4488:	2c20      	cmp	r4, #32
    448a:	d909      	bls.n	44a0 <create_name+0x110>
    448c:	782b      	ldrb	r3, [r5, #0]
    448e:	2b20      	cmp	r3, #32
    4490:	d80c      	bhi.n	44ac <create_name+0x11c>
    4492:	2204      	movs	r2, #4
    4494:	e005      	b.n	44a2 <create_name+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    4496:	2205      	movs	r2, #5
    4498:	3bc5      	subs	r3, #197	; 0xc5
    449a:	9901      	ldr	r1, [sp, #4]
    449c:	54ca      	strb	r2, [r1, r3]
    449e:	e7f3      	b.n	4488 <create_name+0xf8>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    44a0:	2204      	movs	r2, #4
    44a2:	232b      	movs	r3, #43	; 0x2b
    44a4:	9901      	ldr	r1, [sp, #4]
    44a6:	54ca      	strb	r2, [r1, r3]
	return FR_OK;
    44a8:	2000      	movs	r0, #0
    44aa:	e79d      	b.n	43e8 <create_name+0x58>
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
    44ac:	2200      	movs	r2, #0
    44ae:	e7f8      	b.n	44a2 <create_name+0x112>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    44b0:	2006      	movs	r0, #6
    44b2:	e799      	b.n	43e8 <create_name+0x58>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    44b4:	2006      	movs	r0, #6
    44b6:	e797      	b.n	43e8 <create_name+0x58>
    44b8:	2006      	movs	r0, #6
    44ba:	e795      	b.n	43e8 <create_name+0x58>
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    44bc:	2006      	movs	r0, #6
    44be:	e793      	b.n	43e8 <create_name+0x58>
    44c0:	0000f6b0 	.word	0x0000f6b0
    44c4:	0000f73c 	.word	0x0000f73c

000044c8 <follow_path>:
{
    44c8:	b530      	push	{r4, r5, lr}
    44ca:	b083      	sub	sp, #12
    44cc:	0004      	movs	r4, r0
    44ce:	9101      	str	r1, [sp, #4]
	FATFS *fs = dp->obj.fs;
    44d0:	6805      	ldr	r5, [r0, #0]
		while (IsSeparator(*path)) path++;	/* Strip separators */
    44d2:	e001      	b.n	44d8 <follow_path+0x10>
    44d4:	3301      	adds	r3, #1
    44d6:	9301      	str	r3, [sp, #4]
    44d8:	9b01      	ldr	r3, [sp, #4]
    44da:	781a      	ldrb	r2, [r3, #0]
    44dc:	2a2f      	cmp	r2, #47	; 0x2f
    44de:	d0f9      	beq.n	44d4 <follow_path+0xc>
    44e0:	2a5c      	cmp	r2, #92	; 0x5c
    44e2:	d0f7      	beq.n	44d4 <follow_path+0xc>
		dp->obj.sclust = 0;					/* Start from the root directory */
    44e4:	2200      	movs	r2, #0
    44e6:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    44e8:	781b      	ldrb	r3, [r3, #0]
    44ea:	2b1f      	cmp	r3, #31
    44ec:	d91c      	bls.n	4528 <follow_path+0x60>
			res = create_name(dp, &path);	/* Get a segment name of the path */
    44ee:	a901      	add	r1, sp, #4
    44f0:	0020      	movs	r0, r4
    44f2:	f7ff ff4d 	bl	4390 <create_name>
			if (res != FR_OK) break;
    44f6:	2800      	cmp	r0, #0
    44f8:	d11d      	bne.n	4536 <follow_path+0x6e>
			res = dir_find(dp);				/* Find an object with the segment name */
    44fa:	0020      	movs	r0, r4
    44fc:	f7ff fef6 	bl	42ec <dir_find>
			ns = dp->fn[NSFLAG];
    4500:	232b      	movs	r3, #43	; 0x2b
    4502:	5ce3      	ldrb	r3, [r4, r3]
			if (res != FR_OK) {				/* Failed to find the object */
    4504:	2800      	cmp	r0, #0
    4506:	d118      	bne.n	453a <follow_path+0x72>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
    4508:	075b      	lsls	r3, r3, #29
    450a:	d414      	bmi.n	4536 <follow_path+0x6e>
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
    450c:	79a3      	ldrb	r3, [r4, #6]
    450e:	06db      	lsls	r3, r3, #27
    4510:	d519      	bpl.n	4546 <follow_path+0x7e>
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    4512:	002b      	movs	r3, r5
    4514:	3330      	adds	r3, #48	; 0x30
    4516:	6922      	ldr	r2, [r4, #16]
    4518:	05d1      	lsls	r1, r2, #23
    451a:	0dc9      	lsrs	r1, r1, #23
    451c:	1859      	adds	r1, r3, r1
    451e:	0028      	movs	r0, r5
    4520:	f7ff f952 	bl	37c8 <ld_clust>
    4524:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
    4526:	e7e2      	b.n	44ee <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
    4528:	3280      	adds	r2, #128	; 0x80
    452a:	232b      	movs	r3, #43	; 0x2b
    452c:	54e2      	strb	r2, [r4, r3]
		res = dir_sdi(dp, 0);
    452e:	2100      	movs	r1, #0
    4530:	0020      	movs	r0, r4
    4532:	f7ff fd21 	bl	3f78 <dir_sdi>
}
    4536:	b003      	add	sp, #12
    4538:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
    453a:	2804      	cmp	r0, #4
    453c:	d1fb      	bne.n	4536 <follow_path+0x6e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    453e:	075b      	lsls	r3, r3, #29
    4540:	d4f9      	bmi.n	4536 <follow_path+0x6e>
    4542:	2005      	movs	r0, #5
    4544:	e7f7      	b.n	4536 <follow_path+0x6e>
				res = FR_NO_PATH; break;
    4546:	2005      	movs	r0, #5
    4548:	e7f5      	b.n	4536 <follow_path+0x6e>

0000454a <dir_register>:
{
    454a:	b570      	push	{r4, r5, r6, lr}
    454c:	0005      	movs	r5, r0
	FATFS *fs = dp->obj.fs;
    454e:	6806      	ldr	r6, [r0, #0]
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
    4550:	2101      	movs	r1, #1
    4552:	f7ff fef6 	bl	4342 <dir_alloc>
    4556:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    4558:	d001      	beq.n	455e <dir_register+0x14>
}
    455a:	0020      	movs	r0, r4
    455c:	bd70      	pop	{r4, r5, r6, pc}
		res = move_window(fs, dp->sect);
    455e:	69a9      	ldr	r1, [r5, #24]
    4560:	0030      	movs	r0, r6
    4562:	f7ff f9d0 	bl	3906 <move_window>
    4566:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    4568:	d1f7      	bne.n	455a <dir_register+0x10>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
    456a:	2220      	movs	r2, #32
    456c:	2100      	movs	r1, #0
    456e:	69e8      	ldr	r0, [r5, #28]
    4570:	f003 fb7c 	bl	7c6c <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    4574:	69e8      	ldr	r0, [r5, #28]
    4576:	0029      	movs	r1, r5
    4578:	3120      	adds	r1, #32
    457a:	220b      	movs	r2, #11
    457c:	f003 fb34 	bl	7be8 <memcpy>
			fs->wflag = 1;
    4580:	2301      	movs	r3, #1
    4582:	7133      	strb	r3, [r6, #4]
    4584:	e7e9      	b.n	455a <dir_register+0x10>
	...

00004588 <sync_fs>:
{
    4588:	b570      	push	{r4, r5, r6, lr}
    458a:	0005      	movs	r5, r0
	res = sync_window(fs);
    458c:	f7ff f991 	bl	38b2 <sync_window>
    4590:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    4592:	d10a      	bne.n	45aa <sync_fs+0x22>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    4594:	782b      	ldrb	r3, [r5, #0]
    4596:	2b03      	cmp	r3, #3
    4598:	d009      	beq.n	45ae <sync_fs+0x26>
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    459a:	7868      	ldrb	r0, [r5, #1]
    459c:	2200      	movs	r2, #0
    459e:	2100      	movs	r1, #0
    45a0:	f000 fc9e 	bl	4ee0 <disk_ioctl>
    45a4:	2800      	cmp	r0, #0
    45a6:	d000      	beq.n	45aa <sync_fs+0x22>
    45a8:	2401      	movs	r4, #1
}
    45aa:	0020      	movs	r0, r4
    45ac:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    45ae:	796b      	ldrb	r3, [r5, #5]
    45b0:	2b01      	cmp	r3, #1
    45b2:	d1f2      	bne.n	459a <sync_fs+0x12>
			memset(fs->win, 0, sizeof fs->win);
    45b4:	002e      	movs	r6, r5
    45b6:	3630      	adds	r6, #48	; 0x30
    45b8:	2280      	movs	r2, #128	; 0x80
    45ba:	0092      	lsls	r2, r2, #2
    45bc:	2100      	movs	r1, #0
    45be:	0030      	movs	r0, r6
    45c0:	f003 fb54 	bl	7c6c <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
    45c4:	4912      	ldr	r1, [pc, #72]	; (4610 <sync_fs+0x88>)
    45c6:	4b13      	ldr	r3, [pc, #76]	; (4614 <sync_fs+0x8c>)
    45c8:	18e8      	adds	r0, r5, r3
    45ca:	f7ff f8e1 	bl	3790 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
    45ce:	4912      	ldr	r1, [pc, #72]	; (4618 <sync_fs+0x90>)
    45d0:	0030      	movs	r0, r6
    45d2:	f7ff f8e1 	bl	3798 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
    45d6:	2385      	movs	r3, #133	; 0x85
    45d8:	009b      	lsls	r3, r3, #2
    45da:	18e8      	adds	r0, r5, r3
    45dc:	490f      	ldr	r1, [pc, #60]	; (461c <sync_fs+0x94>)
    45de:	f7ff f8db 	bl	3798 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
    45e2:	2386      	movs	r3, #134	; 0x86
    45e4:	009b      	lsls	r3, r3, #2
    45e6:	18e8      	adds	r0, r5, r3
    45e8:	6929      	ldr	r1, [r5, #16]
    45ea:	f7ff f8d5 	bl	3798 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
    45ee:	2387      	movs	r3, #135	; 0x87
    45f0:	009b      	lsls	r3, r3, #2
    45f2:	18e8      	adds	r0, r5, r3
    45f4:	68e9      	ldr	r1, [r5, #12]
    45f6:	f7ff f8cf 	bl	3798 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
    45fa:	69eb      	ldr	r3, [r5, #28]
    45fc:	1c5a      	adds	r2, r3, #1
    45fe:	62ea      	str	r2, [r5, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    4600:	7868      	ldrb	r0, [r5, #1]
    4602:	2301      	movs	r3, #1
    4604:	0031      	movs	r1, r6
    4606:	f000 fc21 	bl	4e4c <disk_write>
			fs->fsi_flag = 0;
    460a:	2300      	movs	r3, #0
    460c:	716b      	strb	r3, [r5, #5]
    460e:	e7c4      	b.n	459a <sync_fs+0x12>
    4610:	0000aa55 	.word	0x0000aa55
    4614:	0000022e 	.word	0x0000022e
    4618:	41615252 	.word	0x41615252
    461c:	61417272 	.word	0x61417272

00004620 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
    4620:	b530      	push	{r4, r5, lr}
    4622:	b085      	sub	sp, #20
    4624:	9001      	str	r0, [sp, #4]
    4626:	9100      	str	r1, [sp, #0]
    4628:	0014      	movs	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    462a:	9103      	str	r1, [sp, #12]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
    462c:	a803      	add	r0, sp, #12
    462e:	f7ff f8f1 	bl	3814 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    4632:	2800      	cmp	r0, #0
    4634:	db1d      	blt.n	4672 <f_mount+0x52>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
    4636:	0083      	lsls	r3, r0, #2
    4638:	4a0f      	ldr	r2, [pc, #60]	; (4678 <f_mount+0x58>)
    463a:	589a      	ldr	r2, [r3, r2]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
    463c:	2a00      	cmp	r2, #0
    463e:	d003      	beq.n	4648 <f_mount+0x28>
		FatFs[vol] = 0;
    4640:	2100      	movs	r1, #0
    4642:	4d0d      	ldr	r5, [pc, #52]	; (4678 <f_mount+0x58>)
    4644:	5159      	str	r1, [r3, r5]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
    4646:	7011      	strb	r1, [r2, #0]
	}

	if (fs) {					/* Register new filesystem object */
    4648:	9b01      	ldr	r3, [sp, #4]
    464a:	2b00      	cmp	r3, #0
    464c:	d007      	beq.n	465e <f_mount+0x3e>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
    464e:	7058      	strb	r0, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
    4650:	2300      	movs	r3, #0
    4652:	9a01      	ldr	r2, [sp, #4]
    4654:	7013      	strb	r3, [r2, #0]
		FatFs[vol] = fs;		/* Register new fs object */
    4656:	0080      	lsls	r0, r0, #2
    4658:	4b07      	ldr	r3, [pc, #28]	; (4678 <f_mount+0x58>)
    465a:	9a01      	ldr	r2, [sp, #4]
    465c:	50c2      	str	r2, [r0, r3]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
    465e:	2c00      	cmp	r4, #0
    4660:	d101      	bne.n	4666 <f_mount+0x46>
    4662:	2000      	movs	r0, #0
    4664:	e006      	b.n	4674 <f_mount+0x54>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
    4666:	2200      	movs	r2, #0
    4668:	a901      	add	r1, sp, #4
    466a:	4668      	mov	r0, sp
    466c:	f7ff fa12 	bl	3a94 <mount_volume>
	LEAVE_FF(fs, res);
    4670:	e000      	b.n	4674 <f_mount+0x54>
	if (vol < 0) return FR_INVALID_DRIVE;
    4672:	200b      	movs	r0, #11
}
    4674:	b005      	add	sp, #20
    4676:	bd30      	pop	{r4, r5, pc}
    4678:	20000abc 	.word	0x20000abc

0000467c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
    467c:	b5f0      	push	{r4, r5, r6, r7, lr}
    467e:	46ce      	mov	lr, r9
    4680:	4647      	mov	r7, r8
    4682:	b580      	push	{r7, lr}
    4684:	b091      	sub	sp, #68	; 0x44
    4686:	0007      	movs	r7, r0
    4688:	9103      	str	r1, [sp, #12]
    468a:	0016      	movs	r6, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    468c:	2800      	cmp	r0, #0
    468e:	d100      	bne.n	4692 <f_open+0x16>
    4690:	e0e3      	b.n	485a <f_open+0x1de>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    4692:	253f      	movs	r5, #63	; 0x3f
    4694:	4015      	ands	r5, r2
	res = mount_volume(&path, &fs, mode);
    4696:	002a      	movs	r2, r5
    4698:	a904      	add	r1, sp, #16
    469a:	a803      	add	r0, sp, #12
    469c:	f7ff f9fa 	bl	3a94 <mount_volume>
    46a0:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    46a2:	d005      	beq.n	46b0 <f_open+0x34>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    46a4:	2c00      	cmp	r4, #0
    46a6:	d100      	bne.n	46aa <f_open+0x2e>
    46a8:	e0d8      	b.n	485c <f_open+0x1e0>
    46aa:	2300      	movs	r3, #0
    46ac:	603b      	str	r3, [r7, #0]
    46ae:	e0d5      	b.n	485c <f_open+0x1e0>
		dj.obj.fs = fs;
    46b0:	9b04      	ldr	r3, [sp, #16]
    46b2:	9305      	str	r3, [sp, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
    46b4:	9903      	ldr	r1, [sp, #12]
    46b6:	a805      	add	r0, sp, #20
    46b8:	f7ff ff06 	bl	44c8 <follow_path>
    46bc:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {
    46be:	d104      	bne.n	46ca <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    46c0:	232b      	movs	r3, #43	; 0x2b
    46c2:	aa05      	add	r2, sp, #20
    46c4:	56d3      	ldrsb	r3, [r2, r3]
    46c6:	2b00      	cmp	r3, #0
    46c8:	db3e      	blt.n	4748 <f_open+0xcc>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    46ca:	231c      	movs	r3, #28
    46cc:	4233      	tst	r3, r6
    46ce:	d100      	bne.n	46d2 <f_open+0x56>
    46d0:	e089      	b.n	47e6 <f_open+0x16a>
			if (res != FR_OK) {					/* No file, create new */
    46d2:	2c00      	cmp	r4, #0
    46d4:	d03f      	beq.n	4756 <f_open+0xda>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    46d6:	2c04      	cmp	r4, #4
    46d8:	d038      	beq.n	474c <f_open+0xd0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    46da:	2308      	movs	r3, #8
    46dc:	431d      	orrs	r5, r3
    46de:	b2ed      	uxtb	r5, r5
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    46e0:	2c00      	cmp	r4, #0
    46e2:	d101      	bne.n	46e8 <f_open+0x6c>
    46e4:	072b      	lsls	r3, r5, #28
    46e6:	d441      	bmi.n	476c <f_open+0xf0>
		if (res == FR_OK) {
    46e8:	2c00      	cmp	r4, #0
    46ea:	d109      	bne.n	4700 <f_open+0x84>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    46ec:	072b      	lsls	r3, r5, #28
    46ee:	d502      	bpl.n	46f6 <f_open+0x7a>
    46f0:	2340      	movs	r3, #64	; 0x40
    46f2:	431d      	orrs	r5, r3
    46f4:	b2ed      	uxtb	r5, r5
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    46f6:	9b04      	ldr	r3, [sp, #16]
    46f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    46fa:	623b      	str	r3, [r7, #32]
			fp->dir_ptr = dj.dir;
    46fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    46fe:	627b      	str	r3, [r7, #36]	; 0x24
		if (res == FR_OK) {
    4700:	2c00      	cmp	r4, #0
    4702:	d1cf      	bne.n	46a4 <f_open+0x28>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    4704:	9b04      	ldr	r3, [sp, #16]
    4706:	4699      	mov	r9, r3
    4708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    470a:	4698      	mov	r8, r3
    470c:	0019      	movs	r1, r3
    470e:	4648      	mov	r0, r9
    4710:	f7ff f85a 	bl	37c8 <ld_clust>
    4714:	0006      	movs	r6, r0
    4716:	60b8      	str	r0, [r7, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    4718:	4640      	mov	r0, r8
    471a:	301c      	adds	r0, #28
    471c:	f7ff f82d 	bl	377a <ld_dword>
    4720:	4680      	mov	r8, r0
    4722:	60f8      	str	r0, [r7, #12]
			fp->obj.fs = fs;	/* Validate the file object */
    4724:	464b      	mov	r3, r9
    4726:	603b      	str	r3, [r7, #0]
			fp->obj.id = fs->id;
    4728:	88db      	ldrh	r3, [r3, #6]
    472a:	80bb      	strh	r3, [r7, #4]
			fp->flag = mode;	/* Set file access mode */
    472c:	743d      	strb	r5, [r7, #16]
			fp->err = 0;		/* Clear error flag */
    472e:	2300      	movs	r3, #0
    4730:	747b      	strb	r3, [r7, #17]
			fp->sect = 0;		/* Invalidate current data sector */
    4732:	61fb      	str	r3, [r7, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
    4734:	617b      	str	r3, [r7, #20]
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    4736:	06ab      	lsls	r3, r5, #26
    4738:	d5b4      	bpl.n	46a4 <f_open+0x28>
    473a:	2800      	cmp	r0, #0
    473c:	d0b2      	beq.n	46a4 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    473e:	6178      	str	r0, [r7, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    4740:	464b      	mov	r3, r9
    4742:	895d      	ldrh	r5, [r3, #10]
    4744:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    4746:	e064      	b.n	4812 <f_open+0x196>
				res = FR_INVALID_NAME;
    4748:	3406      	adds	r4, #6
    474a:	e7be      	b.n	46ca <f_open+0x4e>
					res = dir_register(&dj);
    474c:	a805      	add	r0, sp, #20
    474e:	f7ff fefc 	bl	454a <dir_register>
    4752:	0004      	movs	r4, r0
    4754:	e7c1      	b.n	46da <f_open+0x5e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    4756:	ab05      	add	r3, sp, #20
    4758:	799b      	ldrb	r3, [r3, #6]
    475a:	2211      	movs	r2, #17
    475c:	421a      	tst	r2, r3
    475e:	d103      	bne.n	4768 <f_open+0xec>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    4760:	0773      	lsls	r3, r6, #29
    4762:	d5bd      	bpl.n	46e0 <f_open+0x64>
    4764:	2408      	movs	r4, #8
    4766:	e7bb      	b.n	46e0 <f_open+0x64>
					res = FR_DENIED;
    4768:	2407      	movs	r4, #7
    476a:	e7b9      	b.n	46e0 <f_open+0x64>
					st_dword(dj.dir + DIR_CrtTime, tm);
    476c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    476e:	9301      	str	r3, [sp, #4]
    4770:	4e3d      	ldr	r6, [pc, #244]	; (4868 <f_open+0x1ec>)
    4772:	0018      	movs	r0, r3
    4774:	300e      	adds	r0, #14
    4776:	0031      	movs	r1, r6
    4778:	f7ff f80e 	bl	3798 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
    477c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    477e:	9301      	str	r3, [sp, #4]
    4780:	0018      	movs	r0, r3
    4782:	3016      	adds	r0, #22
    4784:	0031      	movs	r1, r6
    4786:	f7ff f807 	bl	3798 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    478a:	9b04      	ldr	r3, [sp, #16]
    478c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    478e:	0031      	movs	r1, r6
    4790:	9301      	str	r3, [sp, #4]
    4792:	0018      	movs	r0, r3
    4794:	f7ff f818 	bl	37c8 <ld_clust>
    4798:	4681      	mov	r9, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    479a:	2320      	movs	r3, #32
    479c:	72f3      	strb	r3, [r6, #11]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    479e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    47a0:	9202      	str	r2, [sp, #8]
    47a2:	2200      	movs	r2, #0
    47a4:	9902      	ldr	r1, [sp, #8]
    47a6:	9801      	ldr	r0, [sp, #4]
    47a8:	f7ff f821 	bl	37ee <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    47ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    47ae:	301c      	adds	r0, #28
    47b0:	2100      	movs	r1, #0
    47b2:	f7fe fff1 	bl	3798 <st_dword>
					fs->wflag = 1;
    47b6:	9b04      	ldr	r3, [sp, #16]
    47b8:	2201      	movs	r2, #1
    47ba:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
    47bc:	464a      	mov	r2, r9
    47be:	2a00      	cmp	r2, #0
    47c0:	d092      	beq.n	46e8 <f_open+0x6c>
						sc = fs->winsect;
    47c2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
    47c4:	2200      	movs	r2, #0
    47c6:	4649      	mov	r1, r9
    47c8:	a805      	add	r0, sp, #20
    47ca:	f7ff fcbc 	bl	4146 <remove_chain>
    47ce:	1e04      	subs	r4, r0, #0
						if (res == FR_OK) {
    47d0:	d18a      	bne.n	46e8 <f_open+0x6c>
							res = move_window(fs, sc);
    47d2:	0031      	movs	r1, r6
    47d4:	9804      	ldr	r0, [sp, #16]
    47d6:	f7ff f896 	bl	3906 <move_window>
    47da:	0004      	movs	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    47dc:	464b      	mov	r3, r9
    47de:	3b01      	subs	r3, #1
    47e0:	9a04      	ldr	r2, [sp, #16]
    47e2:	60d3      	str	r3, [r2, #12]
    47e4:	e780      	b.n	46e8 <f_open+0x6c>
			if (res == FR_OK) {					/* Is the object exsiting? */
    47e6:	2c00      	cmp	r4, #0
    47e8:	d000      	beq.n	47ec <f_open+0x170>
    47ea:	e77d      	b.n	46e8 <f_open+0x6c>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    47ec:	ab05      	add	r3, sp, #20
    47ee:	799b      	ldrb	r3, [r3, #6]
    47f0:	06da      	lsls	r2, r3, #27
    47f2:	d407      	bmi.n	4804 <f_open+0x188>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    47f4:	07b2      	lsls	r2, r6, #30
    47f6:	d400      	bmi.n	47fa <f_open+0x17e>
    47f8:	e776      	b.n	46e8 <f_open+0x6c>
    47fa:	07db      	lsls	r3, r3, #31
    47fc:	d400      	bmi.n	4800 <f_open+0x184>
    47fe:	e773      	b.n	46e8 <f_open+0x6c>
						res = FR_DENIED;
    4800:	2407      	movs	r4, #7
    4802:	e771      	b.n	46e8 <f_open+0x6c>
					res = FR_NO_FILE;
    4804:	2404      	movs	r4, #4
    4806:	e76f      	b.n	46e8 <f_open+0x6c>
					if (clst <= 1) res = FR_INT_ERR;
    4808:	2402      	movs	r4, #2
    480a:	e00d      	b.n	4828 <f_open+0x1ac>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    480c:	4643      	mov	r3, r8
    480e:	1b5b      	subs	r3, r3, r5
    4810:	4698      	mov	r8, r3
    4812:	2c00      	cmp	r4, #0
    4814:	d10c      	bne.n	4830 <f_open+0x1b4>
    4816:	45a8      	cmp	r8, r5
    4818:	d90a      	bls.n	4830 <f_open+0x1b4>
					clst = get_fat(&fp->obj, clst);
    481a:	0031      	movs	r1, r6
    481c:	0038      	movs	r0, r7
    481e:	f7ff fb3a 	bl	3e96 <get_fat>
    4822:	0006      	movs	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
    4824:	2801      	cmp	r0, #1
    4826:	d9ef      	bls.n	4808 <f_open+0x18c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    4828:	1c73      	adds	r3, r6, #1
    482a:	d1ef      	bne.n	480c <f_open+0x190>
    482c:	2401      	movs	r4, #1
    482e:	e7ed      	b.n	480c <f_open+0x190>
				fp->clust = clst;
    4830:	61be      	str	r6, [r7, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    4832:	2c00      	cmp	r4, #0
    4834:	d000      	beq.n	4838 <f_open+0x1bc>
    4836:	e735      	b.n	46a4 <f_open+0x28>
    4838:	4643      	mov	r3, r8
    483a:	05db      	lsls	r3, r3, #23
    483c:	d100      	bne.n	4840 <f_open+0x1c4>
    483e:	e731      	b.n	46a4 <f_open+0x28>
					sc = clst2sect(fs, clst);
    4840:	0031      	movs	r1, r6
    4842:	9804      	ldr	r0, [sp, #16]
    4844:	f7fe ffb4 	bl	37b0 <clst2sect>
					if (sc == 0) {
    4848:	2800      	cmp	r0, #0
    484a:	d004      	beq.n	4856 <f_open+0x1da>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    484c:	4643      	mov	r3, r8
    484e:	0a5b      	lsrs	r3, r3, #9
    4850:	18c3      	adds	r3, r0, r3
    4852:	61fb      	str	r3, [r7, #28]
    4854:	e726      	b.n	46a4 <f_open+0x28>
						res = FR_INT_ERR;
    4856:	2402      	movs	r4, #2
    4858:	e724      	b.n	46a4 <f_open+0x28>
	if (!fp) return FR_INVALID_OBJECT;
    485a:	2409      	movs	r4, #9

	LEAVE_FF(fs, res);
}
    485c:	0020      	movs	r0, r4
    485e:	b011      	add	sp, #68	; 0x44
    4860:	bc0c      	pop	{r2, r3}
    4862:	4690      	mov	r8, r2
    4864:	4699      	mov	r9, r3
    4866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4868:	55660000 	.word	0x55660000

0000486c <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
    486c:	b5f0      	push	{r4, r5, r6, r7, lr}
    486e:	46de      	mov	lr, fp
    4870:	4657      	mov	r7, sl
    4872:	464e      	mov	r6, r9
    4874:	4645      	mov	r5, r8
    4876:	b5e0      	push	{r5, r6, r7, lr}
    4878:	b085      	sub	sp, #20
    487a:	0005      	movs	r5, r0
    487c:	000c      	movs	r4, r1
    487e:	0017      	movs	r7, r2
    4880:	4699      	mov	r9, r3
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    4882:	2300      	movs	r3, #0
    4884:	464a      	mov	r2, r9
    4886:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    4888:	9000      	str	r0, [sp, #0]
    488a:	a903      	add	r1, sp, #12
    488c:	f7fe ffeb 	bl	3866 <validate>
    4890:	1e06      	subs	r6, r0, #0
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    4892:	d106      	bne.n	48a2 <f_write+0x36>
    4894:	7c6e      	ldrb	r6, [r5, #17]
    4896:	2e00      	cmp	r6, #0
    4898:	d103      	bne.n	48a2 <f_write+0x36>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    489a:	7c2b      	ldrb	r3, [r5, #16]
    489c:	079b      	lsls	r3, r3, #30
    489e:	d408      	bmi.n	48b2 <f_write+0x46>
    48a0:	2607      	movs	r6, #7
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    48a2:	0030      	movs	r0, r6
    48a4:	b005      	add	sp, #20
    48a6:	bc3c      	pop	{r2, r3, r4, r5}
    48a8:	4690      	mov	r8, r2
    48aa:	4699      	mov	r9, r3
    48ac:	46a2      	mov	sl, r4
    48ae:	46ab      	mov	fp, r5
    48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    48b2:	696b      	ldr	r3, [r5, #20]
    48b4:	19da      	adds	r2, r3, r7
    48b6:	4293      	cmp	r3, r2
    48b8:	d900      	bls.n	48bc <f_write+0x50>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    48ba:	43df      	mvns	r7, r3
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
    48bc:	46a0      	mov	r8, r4
    48be:	e05f      	b.n	4980 <f_write+0x114>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    48c0:	2100      	movs	r1, #0
    48c2:	9800      	ldr	r0, [sp, #0]
    48c4:	f7ff fbae 	bl	4024 <create_chain>
    48c8:	e06b      	b.n	49a2 <f_write+0x136>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    48ca:	69a9      	ldr	r1, [r5, #24]
    48cc:	9800      	ldr	r0, [sp, #0]
    48ce:	f7ff fba9 	bl	4024 <create_chain>
    48d2:	e066      	b.n	49a2 <f_write+0x136>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    48d4:	2302      	movs	r3, #2
    48d6:	746b      	strb	r3, [r5, #17]
    48d8:	2602      	movs	r6, #2
    48da:	e7e2      	b.n	48a2 <f_write+0x36>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    48dc:	2301      	movs	r3, #1
    48de:	746b      	strb	r3, [r5, #17]
    48e0:	2601      	movs	r6, #1
    48e2:	e7de      	b.n	48a2 <f_write+0x36>
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    48e4:	f7fe ffe5 	bl	38b2 <sync_window>
    48e8:	2800      	cmp	r0, #0
    48ea:	d06a      	beq.n	49c2 <f_write+0x156>
    48ec:	2301      	movs	r3, #1
    48ee:	746b      	strb	r3, [r5, #17]
    48f0:	2601      	movs	r6, #1
    48f2:	e7d6      	b.n	48a2 <f_write+0x36>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    48f4:	2302      	movs	r3, #2
    48f6:	746b      	strb	r3, [r5, #17]
    48f8:	2602      	movs	r6, #2
    48fa:	e7d2      	b.n	48a2 <f_write+0x36>
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    48fc:	2301      	movs	r3, #1
    48fe:	746b      	strb	r3, [r5, #17]
    4900:	2601      	movs	r6, #1
    4902:	e7ce      	b.n	48a2 <f_write+0x36>
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
    4904:	4650      	mov	r0, sl
    4906:	3030      	adds	r0, #48	; 0x30
    4908:	0249      	lsls	r1, r1, #9
    490a:	4441      	add	r1, r8
    490c:	2280      	movs	r2, #128	; 0x80
    490e:	0092      	lsls	r2, r2, #2
    4910:	f003 f96a 	bl	7be8 <memcpy>
					fs->wflag = 0;
    4914:	2300      	movs	r3, #0
    4916:	4652      	mov	r2, sl
    4918:	7113      	strb	r3, [r2, #4]
    491a:	e078      	b.n	4a0e <f_write+0x1a2>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
    491c:	696b      	ldr	r3, [r5, #20]
    491e:	68ea      	ldr	r2, [r5, #12]
    4920:	4293      	cmp	r3, r2
    4922:	d276      	bcs.n	4a12 <f_write+0x1a6>
			fp->sect = sect;
    4924:	465b      	mov	r3, fp
    4926:	61eb      	str	r3, [r5, #28]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
    4928:	696b      	ldr	r3, [r5, #20]
    492a:	05dc      	lsls	r4, r3, #23
    492c:	0de4      	lsrs	r4, r4, #23
    492e:	2380      	movs	r3, #128	; 0x80
    4930:	009b      	lsls	r3, r3, #2
    4932:	1b1c      	subs	r4, r3, r4
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
    4934:	42a7      	cmp	r7, r4
    4936:	d200      	bcs.n	493a <f_write+0xce>
    4938:	003c      	movs	r4, r7
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    493a:	69e9      	ldr	r1, [r5, #28]
    493c:	9803      	ldr	r0, [sp, #12]
    493e:	f7fe ffe2 	bl	3906 <move_window>
    4942:	2800      	cmp	r0, #0
    4944:	d172      	bne.n	4a2c <f_write+0x1c0>
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    4946:	9803      	ldr	r0, [sp, #12]
    4948:	3030      	adds	r0, #48	; 0x30
    494a:	696b      	ldr	r3, [r5, #20]
    494c:	05db      	lsls	r3, r3, #23
    494e:	0ddb      	lsrs	r3, r3, #23
    4950:	18c0      	adds	r0, r0, r3
    4952:	0022      	movs	r2, r4
    4954:	4641      	mov	r1, r8
    4956:	f003 f947 	bl	7be8 <memcpy>
		fs->wflag = 1;
    495a:	2301      	movs	r3, #1
    495c:	9a03      	ldr	r2, [sp, #12]
    495e:	7113      	strb	r3, [r2, #4]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
    4960:	1b3f      	subs	r7, r7, r4
    4962:	464b      	mov	r3, r9
    4964:	681b      	ldr	r3, [r3, #0]
    4966:	191b      	adds	r3, r3, r4
    4968:	464a      	mov	r2, r9
    496a:	6013      	str	r3, [r2, #0]
    496c:	44a0      	add	r8, r4
    496e:	696b      	ldr	r3, [r5, #20]
    4970:	469c      	mov	ip, r3
    4972:	4464      	add	r4, ip
    4974:	616c      	str	r4, [r5, #20]
    4976:	68eb      	ldr	r3, [r5, #12]
    4978:	429c      	cmp	r4, r3
    497a:	d200      	bcs.n	497e <f_write+0x112>
    497c:	001c      	movs	r4, r3
    497e:	60ec      	str	r4, [r5, #12]
    4980:	2f00      	cmp	r7, #0
    4982:	d057      	beq.n	4a34 <f_write+0x1c8>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    4984:	696b      	ldr	r3, [r5, #20]
    4986:	05da      	lsls	r2, r3, #23
    4988:	d1ce      	bne.n	4928 <f_write+0xbc>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    498a:	0a5a      	lsrs	r2, r3, #9
    498c:	9903      	ldr	r1, [sp, #12]
    498e:	8949      	ldrh	r1, [r1, #10]
    4990:	3901      	subs	r1, #1
    4992:	4011      	ands	r1, r2
    4994:	468a      	mov	sl, r1
			if (csect == 0) {				/* On the cluster boundary? */
    4996:	d10f      	bne.n	49b8 <f_write+0x14c>
				if (fp->fptr == 0) {		/* On the top of the file? */
    4998:	2b00      	cmp	r3, #0
    499a:	d196      	bne.n	48ca <f_write+0x5e>
					clst = fp->obj.sclust;	/* Follow from the origin */
    499c:	68a8      	ldr	r0, [r5, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
    499e:	2800      	cmp	r0, #0
    49a0:	d08e      	beq.n	48c0 <f_write+0x54>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    49a2:	2800      	cmp	r0, #0
    49a4:	d046      	beq.n	4a34 <f_write+0x1c8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    49a6:	2801      	cmp	r0, #1
    49a8:	d094      	beq.n	48d4 <f_write+0x68>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    49aa:	1c43      	adds	r3, r0, #1
    49ac:	d096      	beq.n	48dc <f_write+0x70>
				fp->clust = clst;			/* Update current cluster */
    49ae:	61a8      	str	r0, [r5, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    49b0:	68ab      	ldr	r3, [r5, #8]
    49b2:	2b00      	cmp	r3, #0
    49b4:	d100      	bne.n	49b8 <f_write+0x14c>
    49b6:	60a8      	str	r0, [r5, #8]
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
    49b8:	9803      	ldr	r0, [sp, #12]
    49ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    49bc:	69ea      	ldr	r2, [r5, #28]
    49be:	4293      	cmp	r3, r2
    49c0:	d090      	beq.n	48e4 <f_write+0x78>
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    49c2:	9b03      	ldr	r3, [sp, #12]
    49c4:	9301      	str	r3, [sp, #4]
    49c6:	69a9      	ldr	r1, [r5, #24]
    49c8:	0018      	movs	r0, r3
    49ca:	f7fe fef1 	bl	37b0 <clst2sect>
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    49ce:	2800      	cmp	r0, #0
    49d0:	d090      	beq.n	48f4 <f_write+0x88>
			sect += csect;
    49d2:	4450      	add	r0, sl
    49d4:	4683      	mov	fp, r0
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    49d6:	0a7c      	lsrs	r4, r7, #9
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    49d8:	d0a0      	beq.n	491c <f_write+0xb0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    49da:	4653      	mov	r3, sl
    49dc:	191b      	adds	r3, r3, r4
    49de:	9a01      	ldr	r2, [sp, #4]
    49e0:	8952      	ldrh	r2, [r2, #10]
    49e2:	4293      	cmp	r3, r2
    49e4:	d901      	bls.n	49ea <f_write+0x17e>
					cc = fs->csize - csect;
    49e6:	4653      	mov	r3, sl
    49e8:	1ad4      	subs	r4, r2, r3
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    49ea:	9b01      	ldr	r3, [sp, #4]
    49ec:	7858      	ldrb	r0, [r3, #1]
    49ee:	0023      	movs	r3, r4
    49f0:	465a      	mov	r2, fp
    49f2:	4641      	mov	r1, r8
    49f4:	f000 fa2a 	bl	4e4c <disk_write>
    49f8:	2800      	cmp	r0, #0
    49fa:	d000      	beq.n	49fe <f_write+0x192>
    49fc:	e77e      	b.n	48fc <f_write+0x90>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    49fe:	9b03      	ldr	r3, [sp, #12]
    4a00:	469a      	mov	sl, r3
    4a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4a04:	465a      	mov	r2, fp
    4a06:	1a99      	subs	r1, r3, r2
    4a08:	428c      	cmp	r4, r1
    4a0a:	d900      	bls.n	4a0e <f_write+0x1a2>
    4a0c:	e77a      	b.n	4904 <f_write+0x98>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    4a0e:	0264      	lsls	r4, r4, #9
				continue;
    4a10:	e7a6      	b.n	4960 <f_write+0xf4>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    4a12:	9801      	ldr	r0, [sp, #4]
    4a14:	f7fe ff4d 	bl	38b2 <sync_window>
    4a18:	2800      	cmp	r0, #0
    4a1a:	d103      	bne.n	4a24 <f_write+0x1b8>
				fs->winsect = sect;
    4a1c:	9b03      	ldr	r3, [sp, #12]
    4a1e:	465a      	mov	r2, fp
    4a20:	62da      	str	r2, [r3, #44]	; 0x2c
    4a22:	e77f      	b.n	4924 <f_write+0xb8>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
    4a24:	2301      	movs	r3, #1
    4a26:	746b      	strb	r3, [r5, #17]
    4a28:	2601      	movs	r6, #1
    4a2a:	e73a      	b.n	48a2 <f_write+0x36>
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
    4a2c:	2301      	movs	r3, #1
    4a2e:	746b      	strb	r3, [r5, #17]
    4a30:	2601      	movs	r6, #1
    4a32:	e736      	b.n	48a2 <f_write+0x36>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    4a34:	7c2b      	ldrb	r3, [r5, #16]
    4a36:	2240      	movs	r2, #64	; 0x40
    4a38:	4313      	orrs	r3, r2
    4a3a:	742b      	strb	r3, [r5, #16]
	LEAVE_FF(fs, FR_OK);
    4a3c:	e731      	b.n	48a2 <f_write+0x36>
	...

00004a40 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
    4a40:	b530      	push	{r4, r5, lr}
    4a42:	b083      	sub	sp, #12
    4a44:	0004      	movs	r4, r0
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    4a46:	a901      	add	r1, sp, #4
    4a48:	f7fe ff0d 	bl	3866 <validate>
	if (res == FR_OK) {
    4a4c:	2800      	cmp	r0, #0
    4a4e:	d102      	bne.n	4a56 <f_sync+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    4a50:	7c23      	ldrb	r3, [r4, #16]
    4a52:	065b      	lsls	r3, r3, #25
    4a54:	d401      	bmi.n	4a5a <f_sync+0x1a>
			}
		}
	}

	LEAVE_FF(fs, res);
}
    4a56:	b003      	add	sp, #12
    4a58:	bd30      	pop	{r4, r5, pc}
				res = move_window(fs, fp->dir_sect);
    4a5a:	6a21      	ldr	r1, [r4, #32]
    4a5c:	9801      	ldr	r0, [sp, #4]
    4a5e:	f7fe ff52 	bl	3906 <move_window>
				if (res == FR_OK) {
    4a62:	2800      	cmp	r0, #0
    4a64:	d1f7      	bne.n	4a56 <f_sync+0x16>
					dir = fp->dir_ptr;
    4a66:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    4a68:	7aeb      	ldrb	r3, [r5, #11]
    4a6a:	2220      	movs	r2, #32
    4a6c:	4313      	orrs	r3, r2
    4a6e:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    4a70:	68a2      	ldr	r2, [r4, #8]
    4a72:	0029      	movs	r1, r5
    4a74:	6820      	ldr	r0, [r4, #0]
    4a76:	f7fe feba 	bl	37ee <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    4a7a:	0028      	movs	r0, r5
    4a7c:	301c      	adds	r0, #28
    4a7e:	68e1      	ldr	r1, [r4, #12]
    4a80:	f7fe fe8a 	bl	3798 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    4a84:	0028      	movs	r0, r5
    4a86:	3016      	adds	r0, #22
    4a88:	4909      	ldr	r1, [pc, #36]	; (4ab0 <f_sync+0x70>)
    4a8a:	f7fe fe85 	bl	3798 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
    4a8e:	0028      	movs	r0, r5
    4a90:	3012      	adds	r0, #18
    4a92:	2100      	movs	r1, #0
    4a94:	f7fe fe7c 	bl	3790 <st_word>
					fs->wflag = 1;
    4a98:	2301      	movs	r3, #1
    4a9a:	9a01      	ldr	r2, [sp, #4]
    4a9c:	7113      	strb	r3, [r2, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
    4a9e:	0010      	movs	r0, r2
    4aa0:	f7ff fd72 	bl	4588 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
    4aa4:	7c23      	ldrb	r3, [r4, #16]
    4aa6:	2240      	movs	r2, #64	; 0x40
    4aa8:	4393      	bics	r3, r2
    4aaa:	7423      	strb	r3, [r4, #16]
    4aac:	e7d3      	b.n	4a56 <f_sync+0x16>
    4aae:	46c0      	nop			; (mov r8, r8)
    4ab0:	55660000 	.word	0x55660000

00004ab4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
    4ab4:	b510      	push	{r4, lr}
    4ab6:	b082      	sub	sp, #8
    4ab8:	0004      	movs	r4, r0
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    4aba:	f7ff ffc1 	bl	4a40 <f_sync>
	if (res == FR_OK)
    4abe:	2800      	cmp	r0, #0
    4ac0:	d001      	beq.n	4ac6 <f_close+0x12>
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    4ac2:	b002      	add	sp, #8
    4ac4:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
    4ac6:	a901      	add	r1, sp, #4
    4ac8:	0020      	movs	r0, r4
    4aca:	f7fe fecc 	bl	3866 <validate>
		if (res == FR_OK) {
    4ace:	2800      	cmp	r0, #0
    4ad0:	d1f7      	bne.n	4ac2 <f_close+0xe>
			fp->obj.fs = 0;	/* Invalidate file object */
    4ad2:	2300      	movs	r3, #0
    4ad4:	6023      	str	r3, [r4, #0]
    4ad6:	e7f4      	b.n	4ac2 <f_close+0xe>

00004ad8 <rcvr_mmc>:
static
void rcvr_mmc (
BYTE *buff,	/* Pointer to read buffer */
UINT bc		/* Number of bytes to receive */
)
{
    4ad8:	b510      	push	{r4, lr}
	EXT_SPI_ReadBuff((uint8_t *)buff, bc);
    4ada:	b289      	uxth	r1, r1
    4adc:	f7fd fc16 	bl	230c <EXT_SPI_ReadBuff>
}
    4ae0:	bd10      	pop	{r4, pc}

00004ae2 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    4ae2:	b500      	push	{lr}
    4ae4:	b083      	sub	sp, #12
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    4ae6:	2280      	movs	r2, #128	; 0x80
    4ae8:	0312      	lsls	r2, r2, #12
    4aea:	23c0      	movs	r3, #192	; 0xc0
    4aec:	05db      	lsls	r3, r3, #23
    4aee:	619a      	str	r2, [r3, #24]
	BYTE d;

	gpio_set_pin_level(SD_CS, true);				/* Set CS# high */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    4af0:	2101      	movs	r1, #1
    4af2:	466b      	mov	r3, sp
    4af4:	1dd8      	adds	r0, r3, #7
    4af6:	f7ff ffef 	bl	4ad8 <rcvr_mmc>
}
    4afa:	b003      	add	sp, #12
    4afc:	bd00      	pop	{pc}

00004afe <dly_us>:
{
    4afe:	b510      	push	{r4, lr}
    4b00:	0004      	movs	r4, r0
		delay_us(n);
    4b02:	b280      	uxth	r0, r0
    4b04:	f7fb fb44 	bl	190 <delay_us>
	} while (--n);
    4b08:	3c01      	subs	r4, #1
    4b0a:	2c00      	cmp	r4, #0
    4b0c:	d1fc      	bne.n	4b08 <dly_us+0xa>
}
    4b0e:	bd10      	pop	{r4, pc}

00004b10 <wait_ready>:
{
    4b10:	b530      	push	{r4, r5, lr}
    4b12:	b083      	sub	sp, #12
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    4b14:	4c0a      	ldr	r4, [pc, #40]	; (4b40 <wait_ready+0x30>)
    4b16:	2c00      	cmp	r4, #0
    4b18:	d00d      	beq.n	4b36 <wait_ready+0x26>
		rcvr_mmc(&d, 1);
    4b1a:	466b      	mov	r3, sp
    4b1c:	1ddd      	adds	r5, r3, #7
    4b1e:	2101      	movs	r1, #1
    4b20:	0028      	movs	r0, r5
    4b22:	f7ff ffd9 	bl	4ad8 <rcvr_mmc>
		if (d == 0xFF) break;
    4b26:	782b      	ldrb	r3, [r5, #0]
    4b28:	2bff      	cmp	r3, #255	; 0xff
    4b2a:	d004      	beq.n	4b36 <wait_ready+0x26>
		dly_us(100);
    4b2c:	2064      	movs	r0, #100	; 0x64
    4b2e:	f7ff ffe6 	bl	4afe <dly_us>
	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    4b32:	3c01      	subs	r4, #1
    4b34:	e7ef      	b.n	4b16 <wait_ready+0x6>
	return tmr ? 1 : 0;
    4b36:	0020      	movs	r0, r4
    4b38:	1e44      	subs	r4, r0, #1
    4b3a:	41a0      	sbcs	r0, r4
}
    4b3c:	b003      	add	sp, #12
    4b3e:	bd30      	pop	{r4, r5, pc}
    4b40:	00001388 	.word	0x00001388

00004b44 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    4b44:	b510      	push	{r4, lr}
    4b46:	b082      	sub	sp, #8
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    4b48:	2280      	movs	r2, #128	; 0x80
    4b4a:	0312      	lsls	r2, r2, #12
    4b4c:	23c0      	movs	r3, #192	; 0xc0
    4b4e:	05db      	lsls	r3, r3, #23
    4b50:	615a      	str	r2, [r3, #20]
	BYTE d;

	gpio_set_pin_level(SD_CS, false);			/* Set CS# low */
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    4b52:	2101      	movs	r1, #1
    4b54:	466b      	mov	r3, sp
    4b56:	1dd8      	adds	r0, r3, #7
    4b58:	f7ff ffbe 	bl	4ad8 <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    4b5c:	f7ff ffd8 	bl	4b10 <wait_ready>
    4b60:	1e04      	subs	r4, r0, #0
    4b62:	d003      	beq.n	4b6c <select+0x28>
    4b64:	2401      	movs	r4, #1

	deselect();
	return 0;			/* Failed */
}
    4b66:	0020      	movs	r0, r4
    4b68:	b002      	add	sp, #8
    4b6a:	bd10      	pop	{r4, pc}
	deselect();
    4b6c:	f7ff ffb9 	bl	4ae2 <deselect>
	return 0;			/* Failed */
    4b70:	e7f9      	b.n	4b66 <select+0x22>

00004b72 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
BYTE *buff,			/* Data buffer to store received data */
UINT btr			/* Byte count */
)
{
    4b72:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b74:	b083      	sub	sp, #12
    4b76:	0006      	movs	r6, r0
    4b78:	000f      	movs	r7, r1
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    4b7a:	25fa      	movs	r5, #250	; 0xfa
    4b7c:	00ad      	lsls	r5, r5, #2
    4b7e:	2d00      	cmp	r5, #0
    4b80:	d00c      	beq.n	4b9c <rcvr_datablock+0x2a>
		rcvr_mmc(d, 1);
    4b82:	ac01      	add	r4, sp, #4
    4b84:	2101      	movs	r1, #1
    4b86:	0020      	movs	r0, r4
    4b88:	f7ff ffa6 	bl	4ad8 <rcvr_mmc>
		if (d[0] != 0xFF) break;
    4b8c:	7823      	ldrb	r3, [r4, #0]
    4b8e:	2bff      	cmp	r3, #255	; 0xff
    4b90:	d104      	bne.n	4b9c <rcvr_datablock+0x2a>
		dly_us(100);
    4b92:	2064      	movs	r0, #100	; 0x64
    4b94:	f7ff ffb3 	bl	4afe <dly_us>
	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    4b98:	3d01      	subs	r5, #1
    4b9a:	e7f0      	b.n	4b7e <rcvr_datablock+0xc>
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    4b9c:	ab01      	add	r3, sp, #4
    4b9e:	781b      	ldrb	r3, [r3, #0]
    4ba0:	2bfe      	cmp	r3, #254	; 0xfe
    4ba2:	d002      	beq.n	4baa <rcvr_datablock+0x38>
    4ba4:	2000      	movs	r0, #0

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
	rcvr_mmc(d, 2);					/* Discard CRC */

	return 1;						/* Return with success */
}
    4ba6:	b003      	add	sp, #12
    4ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    4baa:	0039      	movs	r1, r7
    4bac:	0030      	movs	r0, r6
    4bae:	f7ff ff93 	bl	4ad8 <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    4bb2:	2102      	movs	r1, #2
    4bb4:	a801      	add	r0, sp, #4
    4bb6:	f7ff ff8f 	bl	4ad8 <rcvr_mmc>
	return 1;						/* Return with success */
    4bba:	2001      	movs	r0, #1
    4bbc:	e7f3      	b.n	4ba6 <rcvr_datablock+0x34>

00004bbe <xmit_mmc>:
{
    4bbe:	b510      	push	{r4, lr}
	EXT_SPI_WriteBuff((uint8_t *)buff, bc);
    4bc0:	b289      	uxth	r1, r1
    4bc2:	f7fd fbaf 	bl	2324 <EXT_SPI_WriteBuff>
}
    4bc6:	bd10      	pop	{r4, pc}

00004bc8 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
BYTE cmd,		/* Command byte */
DWORD arg		/* Argument */
)
{
    4bc8:	b530      	push	{r4, r5, lr}
    4bca:	b083      	sub	sp, #12
    4bcc:	0004      	movs	r4, r0
    4bce:	000d      	movs	r5, r1
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    4bd0:	b243      	sxtb	r3, r0
    4bd2:	2b00      	cmp	r3, #0
    4bd4:	db09      	blt.n	4bea <send_cmd+0x22>
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    4bd6:	2c0c      	cmp	r4, #12
    4bd8:	d010      	beq.n	4bfc <send_cmd+0x34>
		deselect();
    4bda:	f7ff ff82 	bl	4ae2 <deselect>
		if (!select()) return 0xFF;
    4bde:	f7ff ffb1 	bl	4b44 <select>
    4be2:	2800      	cmp	r0, #0
    4be4:	d10a      	bne.n	4bfc <send_cmd+0x34>
    4be6:	20ff      	movs	r0, #255	; 0xff
    4be8:	e02f      	b.n	4c4a <send_cmd+0x82>
		cmd &= 0x7F;
    4bea:	237f      	movs	r3, #127	; 0x7f
    4bec:	401c      	ands	r4, r3
		n = send_cmd(CMD55, 0);
    4bee:	2100      	movs	r1, #0
    4bf0:	2037      	movs	r0, #55	; 0x37
    4bf2:	f7ff ffe9 	bl	4bc8 <send_cmd>
		if (n > 1) return n;
    4bf6:	2801      	cmp	r0, #1
    4bf8:	d827      	bhi.n	4c4a <send_cmd+0x82>
    4bfa:	e7ec      	b.n	4bd6 <send_cmd+0xe>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    4bfc:	2340      	movs	r3, #64	; 0x40
    4bfe:	4323      	orrs	r3, r4
    4c00:	466a      	mov	r2, sp
    4c02:	7013      	strb	r3, [r2, #0]
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    4c04:	0e2b      	lsrs	r3, r5, #24
    4c06:	7053      	strb	r3, [r2, #1]
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    4c08:	0c2b      	lsrs	r3, r5, #16
    4c0a:	7093      	strb	r3, [r2, #2]
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    4c0c:	0a2b      	lsrs	r3, r5, #8
    4c0e:	70d3      	strb	r3, [r2, #3]
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    4c10:	7115      	strb	r5, [r2, #4]
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    4c12:	2c00      	cmp	r4, #0
    4c14:	d01b      	beq.n	4c4e <send_cmd+0x86>
	n = 0x01;						/* Dummy CRC + Stop */
    4c16:	2301      	movs	r3, #1
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    4c18:	2c08      	cmp	r4, #8
    4c1a:	d01a      	beq.n	4c52 <send_cmd+0x8a>
	buf[5] = n;
    4c1c:	466a      	mov	r2, sp
    4c1e:	7153      	strb	r3, [r2, #5]
	xmit_mmc(buf, 6);
    4c20:	2106      	movs	r1, #6
    4c22:	4668      	mov	r0, sp
    4c24:	f7ff ffcb 	bl	4bbe <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    4c28:	2c0c      	cmp	r4, #12
    4c2a:	d014      	beq.n	4c56 <send_cmd+0x8e>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    4c2c:	240a      	movs	r4, #10
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
	rcvr_mmc(&d, 1);
    4c2e:	466b      	mov	r3, sp
    4c30:	1ddd      	adds	r5, r3, #7
    4c32:	2101      	movs	r1, #1
    4c34:	0028      	movs	r0, r5
    4c36:	f7ff ff4f 	bl	4ad8 <rcvr_mmc>
	while ((d & 0x80) && --n);
    4c3a:	7828      	ldrb	r0, [r5, #0]
    4c3c:	b243      	sxtb	r3, r0
    4c3e:	2b00      	cmp	r3, #0
    4c40:	da03      	bge.n	4c4a <send_cmd+0x82>
    4c42:	3c01      	subs	r4, #1
    4c44:	b2e4      	uxtb	r4, r4
    4c46:	2c00      	cmp	r4, #0
    4c48:	d1f1      	bne.n	4c2e <send_cmd+0x66>

	return d;			/* Return with the response value */
}
    4c4a:	b003      	add	sp, #12
    4c4c:	bd30      	pop	{r4, r5, pc}
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    4c4e:	2395      	movs	r3, #149	; 0x95
    4c50:	e7e2      	b.n	4c18 <send_cmd+0x50>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    4c52:	2387      	movs	r3, #135	; 0x87
    4c54:	e7e2      	b.n	4c1c <send_cmd+0x54>
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    4c56:	2101      	movs	r1, #1
    4c58:	466b      	mov	r3, sp
    4c5a:	1dd8      	adds	r0, r3, #7
    4c5c:	f7ff ff3c 	bl	4ad8 <rcvr_mmc>
    4c60:	e7e4      	b.n	4c2c <send_cmd+0x64>

00004c62 <xmit_datablock>:
{
    4c62:	b530      	push	{r4, r5, lr}
    4c64:	b083      	sub	sp, #12
    4c66:	0005      	movs	r5, r0
    4c68:	000c      	movs	r4, r1
	if (!wait_ready()) return 0;
    4c6a:	f7ff ff51 	bl	4b10 <wait_ready>
    4c6e:	2800      	cmp	r0, #0
    4c70:	d101      	bne.n	4c76 <xmit_datablock+0x14>
}
    4c72:	b003      	add	sp, #12
    4c74:	bd30      	pop	{r4, r5, pc}
	d[0] = token;
    4c76:	a801      	add	r0, sp, #4
    4c78:	7004      	strb	r4, [r0, #0]
	xmit_mmc(d, 1);				/* Xmit a token */
    4c7a:	2101      	movs	r1, #1
    4c7c:	f7ff ff9f 	bl	4bbe <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    4c80:	2cfd      	cmp	r4, #253	; 0xfd
    4c82:	d014      	beq.n	4cae <xmit_datablock+0x4c>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    4c84:	2180      	movs	r1, #128	; 0x80
    4c86:	0089      	lsls	r1, r1, #2
    4c88:	0028      	movs	r0, r5
    4c8a:	f7ff ff98 	bl	4bbe <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    4c8e:	ac01      	add	r4, sp, #4
    4c90:	2102      	movs	r1, #2
    4c92:	0020      	movs	r0, r4
    4c94:	f7ff ff20 	bl	4ad8 <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    4c98:	2101      	movs	r1, #1
    4c9a:	0020      	movs	r0, r4
    4c9c:	f7ff ff1c 	bl	4ad8 <rcvr_mmc>
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
    4ca0:	7822      	ldrb	r2, [r4, #0]
    4ca2:	231f      	movs	r3, #31
    4ca4:	4013      	ands	r3, r2
    4ca6:	2b05      	cmp	r3, #5
    4ca8:	d003      	beq.n	4cb2 <xmit_datablock+0x50>
		return 0;
    4caa:	2000      	movs	r0, #0
    4cac:	e7e1      	b.n	4c72 <xmit_datablock+0x10>
	return 1;
    4cae:	2001      	movs	r0, #1
    4cb0:	e7df      	b.n	4c72 <xmit_datablock+0x10>
    4cb2:	2001      	movs	r0, #1
    4cb4:	e7dd      	b.n	4c72 <xmit_datablock+0x10>
	...

00004cb8 <disk_status>:

DSTATUS disk_status (
BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    4cb8:	2800      	cmp	r0, #0
    4cba:	d102      	bne.n	4cc2 <disk_status+0xa>

	return Stat;
    4cbc:	4b02      	ldr	r3, [pc, #8]	; (4cc8 <disk_status+0x10>)
    4cbe:	7818      	ldrb	r0, [r3, #0]
}
    4cc0:	4770      	bx	lr
	if (drv) return STA_NOINIT;
    4cc2:	2001      	movs	r0, #1
    4cc4:	e7fc      	b.n	4cc0 <disk_status+0x8>
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	20000030 	.word	0x20000030

00004ccc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
BYTE drv		/* Physical drive nmuber (0) */
)
{
    4ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cce:	b083      	sub	sp, #12
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    4cd0:	2800      	cmp	r0, #0
    4cd2:	d003      	beq.n	4cdc <disk_initialize+0x10>
    4cd4:	2403      	movs	r4, #3
	Stat = s;

	deselect();

	return s;
}
    4cd6:	0020      	movs	r0, r4
    4cd8:	b003      	add	sp, #12
    4cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	delay_ms(10);			/* 10ms */
    4cdc:	300a      	adds	r0, #10
    4cde:	f7fb fa63 	bl	1a8 <delay_ms>
	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    4ce2:	240a      	movs	r4, #10
    4ce4:	e005      	b.n	4cf2 <disk_initialize+0x26>
    4ce6:	2101      	movs	r1, #1
    4ce8:	a801      	add	r0, sp, #4
    4cea:	f7ff fef5 	bl	4ad8 <rcvr_mmc>
    4cee:	3c01      	subs	r4, #1
    4cf0:	b2e4      	uxtb	r4, r4
    4cf2:	2c00      	cmp	r4, #0
    4cf4:	d1f7      	bne.n	4ce6 <disk_initialize+0x1a>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    4cf6:	2100      	movs	r1, #0
    4cf8:	2000      	movs	r0, #0
    4cfa:	f7ff ff65 	bl	4bc8 <send_cmd>
    4cfe:	0006      	movs	r6, r0
    4d00:	0007      	movs	r7, r0
    4d02:	2801      	cmp	r0, #1
    4d04:	d009      	beq.n	4d1a <disk_initialize+0x4e>
	CardType = ty;
    4d06:	4b33      	ldr	r3, [pc, #204]	; (4dd4 <disk_initialize+0x108>)
    4d08:	701c      	strb	r4, [r3, #0]
	s = ty ? 0 : STA_NOINIT;
    4d0a:	4263      	negs	r3, r4
    4d0c:	415c      	adcs	r4, r3
    4d0e:	b2e4      	uxtb	r4, r4
	Stat = s;
    4d10:	4b31      	ldr	r3, [pc, #196]	; (4dd8 <disk_initialize+0x10c>)
    4d12:	701c      	strb	r4, [r3, #0]
	deselect();
    4d14:	f7ff fee5 	bl	4ae2 <deselect>
	return s;
    4d18:	e7dd      	b.n	4cd6 <disk_initialize+0xa>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    4d1a:	21d5      	movs	r1, #213	; 0xd5
    4d1c:	0049      	lsls	r1, r1, #1
    4d1e:	2008      	movs	r0, #8
    4d20:	f7ff ff52 	bl	4bc8 <send_cmd>
    4d24:	2801      	cmp	r0, #1
    4d26:	d015      	beq.n	4d54 <disk_initialize+0x88>
			if (send_cmd(ACMD41, 0) <= 1) 	{
    4d28:	2100      	movs	r1, #0
    4d2a:	20a9      	movs	r0, #169	; 0xa9
    4d2c:	f7ff ff4c 	bl	4bc8 <send_cmd>
    4d30:	2801      	cmp	r0, #1
    4d32:	d93e      	bls.n	4db2 <disk_initialize+0xe6>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4d34:	25fa      	movs	r5, #250	; 0xfa
    4d36:	00ad      	lsls	r5, r5, #2
    4d38:	2d00      	cmp	r5, #0
    4d3a:	d03d      	beq.n	4db8 <disk_initialize+0xec>
				if (send_cmd(cmd, 0) == 0) break;
    4d3c:	2100      	movs	r1, #0
    4d3e:	0030      	movs	r0, r6
    4d40:	f7ff ff42 	bl	4bc8 <send_cmd>
    4d44:	2800      	cmp	r0, #0
    4d46:	d037      	beq.n	4db8 <disk_initialize+0xec>
				dly_us(1000);
    4d48:	20fa      	movs	r0, #250	; 0xfa
    4d4a:	0080      	lsls	r0, r0, #2
    4d4c:	f7ff fed7 	bl	4afe <dly_us>
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    4d50:	3d01      	subs	r5, #1
    4d52:	e7f1      	b.n	4d38 <disk_initialize+0x6c>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    4d54:	ad01      	add	r5, sp, #4
    4d56:	2104      	movs	r1, #4
    4d58:	0028      	movs	r0, r5
    4d5a:	f7ff febd 	bl	4ad8 <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    4d5e:	78ab      	ldrb	r3, [r5, #2]
    4d60:	2b01      	cmp	r3, #1
    4d62:	d1d0      	bne.n	4d06 <disk_initialize+0x3a>
    4d64:	ab01      	add	r3, sp, #4
    4d66:	78db      	ldrb	r3, [r3, #3]
    4d68:	2baa      	cmp	r3, #170	; 0xaa
    4d6a:	d1cc      	bne.n	4d06 <disk_initialize+0x3a>
    4d6c:	25fa      	movs	r5, #250	; 0xfa
    4d6e:	00ad      	lsls	r5, r5, #2
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    4d70:	2d00      	cmp	r5, #0
    4d72:	d00c      	beq.n	4d8e <disk_initialize+0xc2>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    4d74:	2180      	movs	r1, #128	; 0x80
    4d76:	05c9      	lsls	r1, r1, #23
    4d78:	20a9      	movs	r0, #169	; 0xa9
    4d7a:	f7ff ff25 	bl	4bc8 <send_cmd>
    4d7e:	2800      	cmp	r0, #0
    4d80:	d005      	beq.n	4d8e <disk_initialize+0xc2>
					dly_us(1000);
    4d82:	20fa      	movs	r0, #250	; 0xfa
    4d84:	0080      	lsls	r0, r0, #2
    4d86:	f7ff feba 	bl	4afe <dly_us>
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    4d8a:	3d01      	subs	r5, #1
    4d8c:	e7f0      	b.n	4d70 <disk_initialize+0xa4>
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    4d8e:	2d00      	cmp	r5, #0
    4d90:	d0b9      	beq.n	4d06 <disk_initialize+0x3a>
    4d92:	2100      	movs	r1, #0
    4d94:	203a      	movs	r0, #58	; 0x3a
    4d96:	f7ff ff17 	bl	4bc8 <send_cmd>
    4d9a:	2800      	cmp	r0, #0
    4d9c:	d1b3      	bne.n	4d06 <disk_initialize+0x3a>
					rcvr_mmc(buf, 4);
    4d9e:	ac01      	add	r4, sp, #4
    4da0:	2104      	movs	r1, #4
    4da2:	0020      	movs	r0, r4
    4da4:	f7ff fe98 	bl	4ad8 <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* SDv2+ */
    4da8:	7823      	ldrb	r3, [r4, #0]
    4daa:	065b      	lsls	r3, r3, #25
    4dac:	d50f      	bpl.n	4dce <disk_initialize+0x102>
    4dae:	2418      	movs	r4, #24
    4db0:	e7a9      	b.n	4d06 <disk_initialize+0x3a>
				ty = CT_SDC2; cmd = ACMD41;	/* SDv1 */
    4db2:	26a9      	movs	r6, #169	; 0xa9
    4db4:	2708      	movs	r7, #8
    4db6:	e7bd      	b.n	4d34 <disk_initialize+0x68>
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    4db8:	2d00      	cmp	r5, #0
    4dba:	d0a4      	beq.n	4d06 <disk_initialize+0x3a>
    4dbc:	2180      	movs	r1, #128	; 0x80
    4dbe:	0089      	lsls	r1, r1, #2
    4dc0:	2010      	movs	r0, #16
    4dc2:	f7ff ff01 	bl	4bc8 <send_cmd>
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d19d      	bne.n	4d06 <disk_initialize+0x3a>
    4dca:	003c      	movs	r4, r7
    4dcc:	e79b      	b.n	4d06 <disk_initialize+0x3a>
					ty = (buf[0] & 0x40) ? CT_SDC2 | CT_BLOCK : CT_SDC2;	/* SDv2+ */
    4dce:	2408      	movs	r4, #8
    4dd0:	e799      	b.n	4d06 <disk_initialize+0x3a>
    4dd2:	46c0      	nop			; (mov r8, r8)
    4dd4:	20000ac2 	.word	0x20000ac2
    4dd8:	20000030 	.word	0x20000030

00004ddc <disk_read>:
BYTE drv,			/* Physical drive nmuber (0) */
BYTE *buff,			/* Pointer to the data buffer to store read data */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    4ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4dde:	000d      	movs	r5, r1
    4de0:	0017      	movs	r7, r2
    4de2:	001c      	movs	r4, r3
	BYTE cmd;
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    4de4:	f7ff ff68 	bl	4cb8 <disk_status>
    4de8:	07c3      	lsls	r3, r0, #31
    4dea:	d501      	bpl.n	4df0 <disk_read+0x14>
    4dec:	2003      	movs	r0, #3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    4df0:	4b15      	ldr	r3, [pc, #84]	; (4e48 <disk_read+0x6c>)
    4df2:	781b      	ldrb	r3, [r3, #0]
    4df4:	06db      	lsls	r3, r3, #27
    4df6:	d400      	bmi.n	4dfa <disk_read+0x1e>
    4df8:	027f      	lsls	r7, r7, #9
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4dfa:	2c01      	cmp	r4, #1
    4dfc:	d91c      	bls.n	4e38 <disk_read+0x5c>
    4dfe:	2612      	movs	r6, #18
	if (send_cmd(cmd, sect) == 0) {
    4e00:	0039      	movs	r1, r7
    4e02:	0030      	movs	r0, r6
    4e04:	f7ff fee0 	bl	4bc8 <send_cmd>
    4e08:	2800      	cmp	r0, #0
    4e0a:	d10f      	bne.n	4e2c <disk_read+0x50>
			if (!rcvr_datablock(buff, 512)) break;
    4e0c:	2180      	movs	r1, #128	; 0x80
    4e0e:	0089      	lsls	r1, r1, #2
    4e10:	0028      	movs	r0, r5
    4e12:	f7ff feae 	bl	4b72 <rcvr_datablock>
    4e16:	2800      	cmp	r0, #0
    4e18:	d006      	beq.n	4e28 <disk_read+0x4c>
			buff += 512;
    4e1a:	2380      	movs	r3, #128	; 0x80
    4e1c:	009b      	lsls	r3, r3, #2
    4e1e:	469c      	mov	ip, r3
    4e20:	4465      	add	r5, ip
		} while (--count);
    4e22:	3c01      	subs	r4, #1
    4e24:	2c00      	cmp	r4, #0
    4e26:	d1f1      	bne.n	4e0c <disk_read+0x30>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    4e28:	2e12      	cmp	r6, #18
    4e2a:	d007      	beq.n	4e3c <disk_read+0x60>
	deselect();
    4e2c:	f7ff fe59 	bl	4ae2 <deselect>
	return count ? RES_ERROR : RES_OK;
    4e30:	1e60      	subs	r0, r4, #1
    4e32:	4184      	sbcs	r4, r0
    4e34:	b2e0      	uxtb	r0, r4
    4e36:	e7da      	b.n	4dee <disk_read+0x12>
	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4e38:	2611      	movs	r6, #17
    4e3a:	e7e1      	b.n	4e00 <disk_read+0x24>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    4e3c:	2100      	movs	r1, #0
    4e3e:	200c      	movs	r0, #12
    4e40:	f7ff fec2 	bl	4bc8 <send_cmd>
    4e44:	e7f2      	b.n	4e2c <disk_read+0x50>
    4e46:	46c0      	nop			; (mov r8, r8)
    4e48:	20000ac2 	.word	0x20000ac2

00004e4c <disk_write>:
BYTE drv,			/* Physical drive nmuber (0) */
const BYTE *buff,	/* Pointer to the data to be written */
LBA_t sector,		/* Start sector number (LBA) */
UINT count			/* Sector count (1..128) */
)
{
    4e4c:	b570      	push	{r4, r5, r6, lr}
    4e4e:	000d      	movs	r5, r1
    4e50:	0016      	movs	r6, r2
    4e52:	001c      	movs	r4, r3
	DWORD sect = (DWORD)sector;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    4e54:	f7ff ff30 	bl	4cb8 <disk_status>
    4e58:	07c3      	lsls	r3, r0, #31
    4e5a:	d501      	bpl.n	4e60 <disk_write+0x14>
    4e5c:	2003      	movs	r0, #3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4e5e:	bd70      	pop	{r4, r5, r6, pc}
	if (!(CardType & CT_BLOCK)) sect *= 512;	/* Convert LBA to byte address if needed */
    4e60:	4b1e      	ldr	r3, [pc, #120]	; (4edc <disk_write+0x90>)
    4e62:	781b      	ldrb	r3, [r3, #0]
    4e64:	06da      	lsls	r2, r3, #27
    4e66:	d400      	bmi.n	4e6a <disk_write+0x1e>
    4e68:	0276      	lsls	r6, r6, #9
	if (count == 1) {	/* Single block write */
    4e6a:	2c01      	cmp	r4, #1
    4e6c:	d021      	beq.n	4eb2 <disk_write+0x66>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4e6e:	220c      	movs	r2, #12
    4e70:	421a      	tst	r2, r3
    4e72:	d12c      	bne.n	4ece <disk_write+0x82>
		if (send_cmd(CMD25, sect) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    4e74:	0031      	movs	r1, r6
    4e76:	2019      	movs	r0, #25
    4e78:	f7ff fea6 	bl	4bc8 <send_cmd>
    4e7c:	2800      	cmp	r0, #0
    4e7e:	d112      	bne.n	4ea6 <disk_write+0x5a>
				if (!xmit_datablock(buff, 0xFC)) break;
    4e80:	21fc      	movs	r1, #252	; 0xfc
    4e82:	0028      	movs	r0, r5
    4e84:	f7ff feed 	bl	4c62 <xmit_datablock>
    4e88:	2800      	cmp	r0, #0
    4e8a:	d006      	beq.n	4e9a <disk_write+0x4e>
				buff += 512;
    4e8c:	2380      	movs	r3, #128	; 0x80
    4e8e:	009b      	lsls	r3, r3, #2
    4e90:	469c      	mov	ip, r3
    4e92:	4465      	add	r5, ip
			} while (--count);
    4e94:	3c01      	subs	r4, #1
    4e96:	2c00      	cmp	r4, #0
    4e98:	d1f2      	bne.n	4e80 <disk_write+0x34>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    4e9a:	21fd      	movs	r1, #253	; 0xfd
    4e9c:	2000      	movs	r0, #0
    4e9e:	f7ff fee0 	bl	4c62 <xmit_datablock>
    4ea2:	2800      	cmp	r0, #0
    4ea4:	d018      	beq.n	4ed8 <disk_write+0x8c>
	deselect();
    4ea6:	f7ff fe1c 	bl	4ae2 <deselect>
	return count ? RES_ERROR : RES_OK;
    4eaa:	1e60      	subs	r0, r4, #1
    4eac:	4184      	sbcs	r4, r0
    4eae:	b2e0      	uxtb	r0, r4
    4eb0:	e7d5      	b.n	4e5e <disk_write+0x12>
		if ((send_cmd(CMD24, sect) == 0)	/* WRITE_BLOCK */
    4eb2:	0031      	movs	r1, r6
    4eb4:	2018      	movs	r0, #24
    4eb6:	f7ff fe87 	bl	4bc8 <send_cmd>
    4eba:	2800      	cmp	r0, #0
    4ebc:	d1f3      	bne.n	4ea6 <disk_write+0x5a>
		&& xmit_datablock(buff, 0xFE))
    4ebe:	21fe      	movs	r1, #254	; 0xfe
    4ec0:	0028      	movs	r0, r5
    4ec2:	f7ff fece 	bl	4c62 <xmit_datablock>
    4ec6:	2800      	cmp	r0, #0
    4ec8:	d0ed      	beq.n	4ea6 <disk_write+0x5a>
		count = 0;
    4eca:	2400      	movs	r4, #0
    4ecc:	e7eb      	b.n	4ea6 <disk_write+0x5a>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4ece:	0021      	movs	r1, r4
    4ed0:	2097      	movs	r0, #151	; 0x97
    4ed2:	f7ff fe79 	bl	4bc8 <send_cmd>
    4ed6:	e7cd      	b.n	4e74 <disk_write+0x28>
			count = 1;
    4ed8:	2401      	movs	r4, #1
    4eda:	e7e4      	b.n	4ea6 <disk_write+0x5a>
    4edc:	20000ac2 	.word	0x20000ac2

00004ee0 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE drv,		/* Physical drive nmuber (0) */
BYTE ctrl,		/* Control code */
void *buff		/* Buffer to send/receive control data */
)
{
    4ee0:	b530      	push	{r4, r5, lr}
    4ee2:	b085      	sub	sp, #20
    4ee4:	000c      	movs	r4, r1
    4ee6:	0015      	movs	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    4ee8:	f7ff fee6 	bl	4cb8 <disk_status>
    4eec:	07c3      	lsls	r3, r0, #31
    4eee:	d503      	bpl.n	4ef8 <disk_ioctl+0x18>
    4ef0:	2403      	movs	r4, #3
	}

	deselect();

	return res;
}
    4ef2:	0020      	movs	r0, r4
    4ef4:	b005      	add	sp, #20
    4ef6:	bd30      	pop	{r4, r5, pc}
	switch (ctrl) {
    4ef8:	2c01      	cmp	r4, #1
    4efa:	d00b      	beq.n	4f14 <disk_ioctl+0x34>
    4efc:	2c00      	cmp	r4, #0
    4efe:	d003      	beq.n	4f08 <disk_ioctl+0x28>
    4f00:	2c03      	cmp	r4, #3
    4f02:	d051      	beq.n	4fa8 <disk_ioctl+0xc8>
		res = RES_PARERR;
    4f04:	2404      	movs	r4, #4
    4f06:	e052      	b.n	4fae <disk_ioctl+0xce>
		if (select()) res = RES_OK;
    4f08:	f7ff fe1c 	bl	4b44 <select>
    4f0c:	2800      	cmp	r0, #0
    4f0e:	d151      	bne.n	4fb4 <disk_ioctl+0xd4>
	res = RES_ERROR;
    4f10:	2401      	movs	r4, #1
    4f12:	e04c      	b.n	4fae <disk_ioctl+0xce>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4f14:	2100      	movs	r1, #0
    4f16:	2009      	movs	r0, #9
    4f18:	f7ff fe56 	bl	4bc8 <send_cmd>
    4f1c:	2800      	cmp	r0, #0
    4f1e:	d001      	beq.n	4f24 <disk_ioctl+0x44>
	res = RES_ERROR;
    4f20:	2401      	movs	r4, #1
    4f22:	e044      	b.n	4fae <disk_ioctl+0xce>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4f24:	2110      	movs	r1, #16
    4f26:	4668      	mov	r0, sp
    4f28:	f7ff fe23 	bl	4b72 <rcvr_datablock>
    4f2c:	2800      	cmp	r0, #0
    4f2e:	d043      	beq.n	4fb8 <disk_ioctl+0xd8>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    4f30:	466b      	mov	r3, sp
    4f32:	781b      	ldrb	r3, [r3, #0]
    4f34:	099b      	lsrs	r3, r3, #6
    4f36:	2b01      	cmp	r3, #1
    4f38:	d024      	beq.n	4f84 <disk_ioctl+0xa4>
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    4f3a:	466b      	mov	r3, sp
    4f3c:	795a      	ldrb	r2, [r3, #5]
    4f3e:	230f      	movs	r3, #15
    4f40:	4013      	ands	r3, r2
    4f42:	466a      	mov	r2, sp
    4f44:	7a92      	ldrb	r2, [r2, #10]
    4f46:	09d2      	lsrs	r2, r2, #7
    4f48:	189b      	adds	r3, r3, r2
    4f4a:	466a      	mov	r2, sp
    4f4c:	7a51      	ldrb	r1, [r2, #9]
    4f4e:	0049      	lsls	r1, r1, #1
    4f50:	2206      	movs	r2, #6
    4f52:	400a      	ands	r2, r1
    4f54:	189b      	adds	r3, r3, r2
    4f56:	b2db      	uxtb	r3, r3
    4f58:	3302      	adds	r3, #2
    4f5a:	b2db      	uxtb	r3, r3
				cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    4f5c:	466a      	mov	r2, sp
    4f5e:	7a12      	ldrb	r2, [r2, #8]
    4f60:	0992      	lsrs	r2, r2, #6
    4f62:	4669      	mov	r1, sp
    4f64:	79c9      	ldrb	r1, [r1, #7]
    4f66:	0089      	lsls	r1, r1, #2
    4f68:	1852      	adds	r2, r2, r1
    4f6a:	4669      	mov	r1, sp
    4f6c:	7989      	ldrb	r1, [r1, #6]
    4f6e:	0289      	lsls	r1, r1, #10
    4f70:	20c0      	movs	r0, #192	; 0xc0
    4f72:	0100      	lsls	r0, r0, #4
    4f74:	4001      	ands	r1, r0
    4f76:	1852      	adds	r2, r2, r1
    4f78:	3201      	adds	r2, #1
				*(LBA_t*)buff = cs << (n - 9);
    4f7a:	3b09      	subs	r3, #9
    4f7c:	409a      	lsls	r2, r3
    4f7e:	602a      	str	r2, [r5, #0]
			res = RES_OK;
    4f80:	2400      	movs	r4, #0
    4f82:	e014      	b.n	4fae <disk_ioctl+0xce>
				cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    4f84:	466b      	mov	r3, sp
    4f86:	7a5b      	ldrb	r3, [r3, #9]
    4f88:	466a      	mov	r2, sp
    4f8a:	7a12      	ldrb	r2, [r2, #8]
    4f8c:	0212      	lsls	r2, r2, #8
    4f8e:	189b      	adds	r3, r3, r2
    4f90:	466a      	mov	r2, sp
    4f92:	79d2      	ldrb	r2, [r2, #7]
    4f94:	0412      	lsls	r2, r2, #16
    4f96:	21fc      	movs	r1, #252	; 0xfc
    4f98:	0389      	lsls	r1, r1, #14
    4f9a:	400a      	ands	r2, r1
    4f9c:	189b      	adds	r3, r3, r2
    4f9e:	3301      	adds	r3, #1
				*(LBA_t*)buff = cs << 10;
    4fa0:	029b      	lsls	r3, r3, #10
    4fa2:	602b      	str	r3, [r5, #0]
			res = RES_OK;
    4fa4:	2400      	movs	r4, #0
    4fa6:	e002      	b.n	4fae <disk_ioctl+0xce>
		*(DWORD*)buff = 128;
    4fa8:	2380      	movs	r3, #128	; 0x80
    4faa:	602b      	str	r3, [r5, #0]
		res = RES_OK;
    4fac:	2400      	movs	r4, #0
	deselect();
    4fae:	f7ff fd98 	bl	4ae2 <deselect>
	return res;
    4fb2:	e79e      	b.n	4ef2 <disk_ioctl+0x12>
		if (select()) res = RES_OK;
    4fb4:	2400      	movs	r4, #0
    4fb6:	e7fa      	b.n	4fae <disk_ioctl+0xce>
	res = RES_ERROR;
    4fb8:	2401      	movs	r4, #1
    4fba:	e7f8      	b.n	4fae <disk_ioctl+0xce>

00004fbc <main>:
	I2C_write_batch(MAX5822ADDR, (uint8_t *)&tmpData1, sizeof(tmpData1)); \
}


int main(void)
{
    4fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fbe:	46c6      	mov	lr, r8
    4fc0:	b500      	push	{lr}
    4fc2:	b0d8      	sub	sp, #352	; 0x160
	mcu_init();
    4fc4:	f7fd fa84 	bl	24d0 <mcu_init>
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
    4fc8:	49d8      	ldr	r1, [pc, #864]	; (532c <main+0x370>)
    4fca:	48d9      	ldr	r0, [pc, #868]	; (5330 <main+0x374>)
    4fcc:	f7fe fa28 	bl	3420 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_Write_byte);
    4fd0:	49d8      	ldr	r1, [pc, #864]	; (5334 <main+0x378>)
    4fd2:	48d9      	ldr	r0, [pc, #868]	; (5338 <main+0x37c>)
    4fd4:	f7fe fa38 	bl	3448 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
    4fd8:	49d8      	ldr	r1, [pc, #864]	; (533c <main+0x380>)
    4fda:	48d9      	ldr	r0, [pc, #868]	; (5340 <main+0x384>)
    4fdc:	f7fe fa4c 	bl	3478 <reg_wizchip_spiburst_cbfunc>
	wizphy_reset();
    4fe0:	f7fe fae8 	bl	35b4 <wizphy_reset>
	delay_ms(100);
    4fe4:	2064      	movs	r0, #100	; 0x64
    4fe6:	f7fb f8df 	bl	1a8 <delay_ms>
	wizchip_init(rx_tx_buff_sizes,rx_tx_buff_sizes);
    4fea:	48d6      	ldr	r0, [pc, #856]	; (5344 <main+0x388>)
    4fec:	0001      	movs	r1, r0
    4fee:	f7fe fa96 	bl	351e <wizchip_init>
	netInfo.ip[3] = 90+GetIpSwitch();
    4ff2:	f7fd fa85 	bl	2500 <GetIpSwitch>
    4ff6:	305a      	adds	r0, #90	; 0x5a
    4ff8:	4cd3      	ldr	r4, [pc, #844]	; (5348 <main+0x38c>)
    4ffa:	7260      	strb	r0, [r4, #9]
	wizchip_setnetinfo(&netInfo);
    4ffc:	0020      	movs	r0, r4
    4ffe:	f7fe faef 	bl	35e0 <wizchip_setnetinfo>
	ctlnetwork(CN_SET_NETINFO, (void*) &netInfo);
    5002:	0021      	movs	r1, r4
    5004:	2000      	movs	r0, #0
    5006:	f7fe fb89 	bl	371c <ctlnetwork>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    500a:	23c0      	movs	r3, #192	; 0xc0
    500c:	05db      	lsls	r3, r3, #23
    500e:	2280      	movs	r2, #128	; 0x80
    5010:	03d2      	lsls	r2, r2, #15
    5012:	619a      	str	r2, [r3, #24]
    5014:	2280      	movs	r2, #128	; 0x80
    5016:	0052      	lsls	r2, r2, #1
    5018:	619a      	str	r2, [r3, #24]
    501a:	3201      	adds	r2, #1
    501c:	32ff      	adds	r2, #255	; 0xff
    501e:	619a      	str	r2, [r3, #24]
	
	gpio_set_pin_level(DLDA, true);
	gpio_set_pin_level(O2, true);
	gpio_set_pin_level(O3, true);
	
	setIMR(0xff);
    5020:	21ff      	movs	r1, #255	; 0xff
    5022:	20b0      	movs	r0, #176	; 0xb0
    5024:	0140      	lsls	r0, r0, #5
    5026:	f7fe f853 	bl	30d0 <WIZCHIP_WRITE>
	setSIMR(0xff);
    502a:	21ff      	movs	r1, #255	; 0xff
    502c:	20c0      	movs	r0, #192	; 0xc0
    502e:	0140      	lsls	r0, r0, #5
    5030:	f7fe f84e 	bl	30d0 <WIZCHIP_WRITE>
	setINTLEVEL(1);
    5034:	2100      	movs	r1, #0
    5036:	2098      	movs	r0, #152	; 0x98
    5038:	0140      	lsls	r0, r0, #5
    503a:	f7fe f849 	bl	30d0 <WIZCHIP_WRITE>
    503e:	2101      	movs	r1, #1
    5040:	20a0      	movs	r0, #160	; 0xa0
    5042:	0140      	lsls	r0, r0, #5
    5044:	f7fe f844 	bl	30d0 <WIZCHIP_WRITE>
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    5048:	2400      	movs	r4, #0
    504a:	e00b      	b.n	5064 <main+0xa8>
		//setINTLEVEL(500);
		//setSn_IMR(HTTP_SOCKET, 0x04);
		setSn_IMR(HTTP_SOCKET, 0x04);
    504c:	00a0      	lsls	r0, r4, #2
    504e:	3001      	adds	r0, #1
    5050:	00c0      	lsls	r0, r0, #3
    5052:	23b0      	movs	r3, #176	; 0xb0
    5054:	019b      	lsls	r3, r3, #6
    5056:	469c      	mov	ip, r3
    5058:	4460      	add	r0, ip
    505a:	2104      	movs	r1, #4
    505c:	f7fe f838 	bl	30d0 <WIZCHIP_WRITE>
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    5060:	3401      	adds	r4, #1
    5062:	b2e4      	uxtb	r4, r4
    5064:	2c07      	cmp	r4, #7
    5066:	d9f1      	bls.n	504c <main+0x90>
		//setSn_IR(HTTP_SOCKET, 0x1F);
	}
	ADS1x1x_init(&my_adc,ADS1115,ADS1x1x_I2C_ADDRESS_ADDR_TO_GND,MUX_SINGLE_0,PGA_4096);
    5068:	4cb8      	ldr	r4, [pc, #736]	; (534c <main+0x390>)
    506a:	2380      	movs	r3, #128	; 0x80
    506c:	009b      	lsls	r3, r3, #2
    506e:	9300      	str	r3, [sp, #0]
    5070:	2380      	movs	r3, #128	; 0x80
    5072:	01db      	lsls	r3, r3, #7
    5074:	2248      	movs	r2, #72	; 0x48
    5076:	2105      	movs	r1, #5
    5078:	0020      	movs	r0, r4
    507a:	f7fc fdaa 	bl	1bd2 <ADS1x1x_init>
	ADS1x1x_set_threshold_hi(&my_adc, 0xFFFF);
    507e:	49b4      	ldr	r1, [pc, #720]	; (5350 <main+0x394>)
    5080:	0020      	movs	r0, r4
    5082:	f7fc fd5e 	bl	1b42 <ADS1x1x_set_threshold_hi>
	ADS1x1x_set_threshold_lo(&my_adc, 0x0000);
    5086:	2100      	movs	r1, #0
    5088:	0020      	movs	r0, r4
    508a:	f7fc fd4e 	bl	1b2a <ADS1x1x_set_threshold_lo>
	ADS1x1x_set_comparator_queue(&my_adc,COMPARATOR_QUEUE_1);
    508e:	2100      	movs	r1, #0
    5090:	0020      	movs	r0, r4
    5092:	f7fc fd98 	bl	1bc6 <ADS1x1x_set_comparator_queue>
	ADS1x1x_set_data_rate(&my_adc,DATA_RATE_ADS111x_860);
    5096:	21e0      	movs	r1, #224	; 0xe0
    5098:	0020      	movs	r0, r4
    509a:	f7fc fd7c 	bl	1b96 <ADS1x1x_set_data_rate>
	ADS1x1x_set_mode(&my_adc,MODE_CONTINUOUS);
    509e:	2100      	movs	r1, #0
    50a0:	0020      	movs	r0, r4
    50a2:	f7fc fd72 	bl	1b8a <ADS1x1x_set_mode>
	buzer(10);
    50a6:	200a      	movs	r0, #10
    50a8:	f7fc fe1a 	bl	1ce0 <buzer>
	
	UINT bw;
	FRESULT fr;
	f_mount(&FatFs, "", 0);		/* Give a work area to the default drive */
    50ac:	2200      	movs	r2, #0
    50ae:	49a9      	ldr	r1, [pc, #676]	; (5354 <main+0x398>)
    50b0:	48a9      	ldr	r0, [pc, #676]	; (5358 <main+0x39c>)
    50b2:	f7ff fab5 	bl	4620 <f_mount>
	fr = f_open(&Fil, "abc.txt", FA_WRITE | FA_CREATE_ALWAYS);	/* Create a file */
    50b6:	220a      	movs	r2, #10
    50b8:	49a8      	ldr	r1, [pc, #672]	; (535c <main+0x3a0>)
    50ba:	48a9      	ldr	r0, [pc, #676]	; (5360 <main+0x3a4>)
    50bc:	f7ff fade 	bl	467c <f_open>
	if (fr == FR_OK) {
    50c0:	2800      	cmp	r0, #0
    50c2:	d109      	bne.n	50d8 <main+0x11c>
		f_write(&Fil, "It works!\r\n", 11, &bw);	/* Write data to the file */
    50c4:	4ca6      	ldr	r4, [pc, #664]	; (5360 <main+0x3a4>)
    50c6:	ab57      	add	r3, sp, #348	; 0x15c
    50c8:	220b      	movs	r2, #11
    50ca:	49a6      	ldr	r1, [pc, #664]	; (5364 <main+0x3a8>)
    50cc:	0020      	movs	r0, r4
    50ce:	f7ff fbcd 	bl	486c <f_write>
		fr = f_close(&Fil);							/* Close the file */
    50d2:	0020      	movs	r0, r4
    50d4:	f7ff fcee 	bl	4ab4 <f_close>
	}

	
	uint8_t addrM = 0x38;
	uint16_t dacValue[2];
	SET_DAC_CURRENT(0);
    50d8:	ac17      	add	r4, sp, #92	; 0x5c
    50da:	2311      	movs	r3, #17
    50dc:	7023      	strb	r3, [r4, #0]
    50de:	33e3      	adds	r3, #227	; 0xe3
    50e0:	7063      	strb	r3, [r4, #1]
    50e2:	2202      	movs	r2, #2
    50e4:	0021      	movs	r1, r4
    50e6:	2038      	movs	r0, #56	; 0x38
    50e8:	f7fd f976 	bl	23d8 <I2C_write_batch>
	SET_DAC_VOLTAGE(0);
    50ec:	2300      	movs	r3, #0
    50ee:	7023      	strb	r3, [r4, #0]
    50f0:	3306      	adds	r3, #6
    50f2:	7063      	strb	r3, [r4, #1]
    50f4:	2202      	movs	r2, #2
    50f6:	a917      	add	r1, sp, #92	; 0x5c
    50f8:	2038      	movs	r0, #56	; 0x38
    50fa:	f7fd f96d 	bl	23d8 <I2C_write_batch>
	SET_DAC_INIT;
    50fe:	4b9a      	ldr	r3, [pc, #616]	; (5368 <main+0x3ac>)
    5100:	881b      	ldrh	r3, [r3, #0]
    5102:	8023      	strh	r3, [r4, #0]
    5104:	2202      	movs	r2, #2
    5106:	a917      	add	r1, sp, #92	; 0x5c
    5108:	2038      	movs	r0, #56	; 0x38
    510a:	f7fd f965 	bl	23d8 <I2C_write_batch>
	CRITICAL_SECTION_ENTER();
    510e:	a813      	add	r0, sp, #76	; 0x4c
    5110:	f7fb f830 	bl	174 <atomic_enter_critical>
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    5114:	23c0      	movs	r3, #192	; 0xc0
    5116:	05db      	lsls	r3, r3, #23
    5118:	2280      	movs	r2, #128	; 0x80
    511a:	589c      	ldr	r4, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    511c:	3220      	adds	r2, #32
    511e:	4993      	ldr	r1, [pc, #588]	; (536c <main+0x3b0>)
    5120:	588a      	ldr	r2, [r1, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    5122:	2190      	movs	r1, #144	; 0x90
    5124:	585b      	ldr	r3, [r3, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    5126:	4053      	eors	r3, r2
    5128:	401c      	ands	r4, r3
    512a:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    512c:	a813      	add	r0, sp, #76	; 0x4c
    512e:	f7fb f828 	bl	182 <atomic_leave_critical>
	if (level) {
    5132:	05e3      	lsls	r3, r4, #23
    5134:	d420      	bmi.n	5178 <main+0x1bc>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    5136:	2280      	movs	r2, #128	; 0x80
    5138:	03d2      	lsls	r2, r2, #15
    513a:	23c0      	movs	r3, #192	; 0xc0
    513c:	05db      	lsls	r3, r3, #23
    513e:	619a      	str	r2, [r3, #24]
			ampDMM = ( ampDMM < 0) ?  0 : (ampDMM  * 0.000203718); 
			
		}
		*/
		
		if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    5140:	4b8b      	ldr	r3, [pc, #556]	; (5370 <main+0x3b4>)
    5142:	7818      	ldrb	r0, [r3, #0]
    5144:	0080      	lsls	r0, r0, #2
    5146:	3001      	adds	r0, #1
    5148:	00c0      	lsls	r0, r0, #3
    514a:	23c0      	movs	r3, #192	; 0xc0
    514c:	009b      	lsls	r3, r3, #2
    514e:	469c      	mov	ip, r3
    5150:	4460      	add	r0, ip
    5152:	f7fd ff8b 	bl	306c <WIZCHIP_READ>
    5156:	2800      	cmp	r0, #0
    5158:	d014      	beq.n	5184 <main+0x1c8>
			socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
			listen(UdpRxSockNum);
		}
		
		if(getSn_IR(UdpRxSockNum)){ // & Sn_CR_RECV
    515a:	4b85      	ldr	r3, [pc, #532]	; (5370 <main+0x3b4>)
    515c:	7818      	ldrb	r0, [r3, #0]
    515e:	0080      	lsls	r0, r0, #2
    5160:	3001      	adds	r0, #1
    5162:	00c0      	lsls	r0, r0, #3
    5164:	2380      	movs	r3, #128	; 0x80
    5166:	009b      	lsls	r3, r3, #2
    5168:	469c      	mov	ip, r3
    516a:	4460      	add	r0, ip
    516c:	f7fd ff7e 	bl	306c <WIZCHIP_READ>
    5170:	06c3      	lsls	r3, r0, #27
    5172:	d113      	bne.n	519c <main+0x1e0>
    5174:	2405      	movs	r4, #5
    5176:	e259      	b.n	562c <main+0x670>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5178:	2280      	movs	r2, #128	; 0x80
    517a:	03d2      	lsls	r2, r2, #15
    517c:	23c0      	movs	r3, #192	; 0xc0
    517e:	05db      	lsls	r3, r3, #23
    5180:	615a      	str	r2, [r3, #20]
    5182:	e7dd      	b.n	5140 <main+0x184>
			socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
    5184:	4b7b      	ldr	r3, [pc, #492]	; (5374 <main+0x3b8>)
    5186:	881a      	ldrh	r2, [r3, #0]
    5188:	4c79      	ldr	r4, [pc, #484]	; (5370 <main+0x3b4>)
    518a:	7820      	ldrb	r0, [r4, #0]
    518c:	2380      	movs	r3, #128	; 0x80
    518e:	2102      	movs	r1, #2
    5190:	f7fd fa66 	bl	2660 <socket>
			listen(UdpRxSockNum);
    5194:	7820      	ldrb	r0, [r4, #0]
    5196:	f7fd fb1b 	bl	27d0 <listen>
    519a:	e7de      	b.n	515a <main+0x19e>
			uint16_t udp_size = getSn_RX_RSR(UdpRxSockNum);
    519c:	4b74      	ldr	r3, [pc, #464]	; (5370 <main+0x3b4>)
    519e:	7818      	ldrb	r0, [r3, #0]
    51a0:	f7fe f874 	bl	328c <getSn_RX_RSR>
    51a4:	1e04      	subs	r4, r0, #0
			if (udp_size > 0) {
    51a6:	d0e5      	beq.n	5174 <main+0x1b8>
				uint8_t ip[4];
				uint16_t port;
				if (udp_size > DATA_BUFF_SIZE) udp_size = DATA_BUFF_SIZE;
    51a8:	2380      	movs	r3, #128	; 0x80
    51aa:	011b      	lsls	r3, r3, #4
    51ac:	4298      	cmp	r0, r3
    51ae:	d900      	bls.n	51b2 <main+0x1f6>
    51b0:	001c      	movs	r4, r3
				memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    51b2:	4d71      	ldr	r5, [pc, #452]	; (5378 <main+0x3bc>)
    51b4:	2280      	movs	r2, #128	; 0x80
    51b6:	0112      	lsls	r2, r2, #4
    51b8:	2100      	movs	r1, #0
    51ba:	0028      	movs	r0, r5
    51bc:	f002 fd56 	bl	7c6c <memset>
				uint16_t ret = recvfrom(UdpRxSockNum, (uint8_t*)TCP_RX_BUF, udp_size, ip, &port);
    51c0:	4b6b      	ldr	r3, [pc, #428]	; (5370 <main+0x3b4>)
    51c2:	7818      	ldrb	r0, [r3, #0]
    51c4:	ab14      	add	r3, sp, #80	; 0x50
    51c6:	9300      	str	r3, [sp, #0]
    51c8:	ab17      	add	r3, sp, #92	; 0x5c
    51ca:	0022      	movs	r2, r4
    51cc:	0029      	movs	r1, r5
    51ce:	f7fd fd4f 	bl	2c70 <recvfrom>
				// UDP Datagram - TCP_RX_BUF
				if(strcasecmp(TCP_RX_BUF, "OUTP:STAT ON") == 0){
    51d2:	496a      	ldr	r1, [pc, #424]	; (537c <main+0x3c0>)
    51d4:	0028      	movs	r0, r5
    51d6:	f002 fdff 	bl	7dd8 <strcasecmp>
    51da:	2800      	cmp	r0, #0
    51dc:	d01e      	beq.n	521c <main+0x260>
					sprintf(UdpAnsver, "ok");
										
					}else if(strcasecmp(TCP_RX_BUF, "OUTP:STAT OFF") == 0){
    51de:	4968      	ldr	r1, [pc, #416]	; (5380 <main+0x3c4>)
    51e0:	4865      	ldr	r0, [pc, #404]	; (5378 <main+0x3bc>)
    51e2:	f002 fdf9 	bl	7dd8 <strcasecmp>
    51e6:	2800      	cmp	r0, #0
    51e8:	d036      	beq.n	5258 <main+0x29c>
					sprintf(UdpAnsver, "ok");
										
					}else if(strcasecmp(TCP_RX_BUF, "MEAS:CURR?") == 0){
    51ea:	4966      	ldr	r1, [pc, #408]	; (5384 <main+0x3c8>)
    51ec:	4862      	ldr	r0, [pc, #392]	; (5378 <main+0x3bc>)
    51ee:	f002 fdf3 	bl	7dd8 <strcasecmp>
    51f2:	2800      	cmp	r0, #0
    51f4:	d037      	beq.n	5266 <main+0x2aa>
					sprintf(UdpAnsver, "0.121");
					
					}else if(strcasecmp(TCP_RX_BUF, "MEAS:VOLT?") == 0){
    51f6:	4964      	ldr	r1, [pc, #400]	; (5388 <main+0x3cc>)
    51f8:	485f      	ldr	r0, [pc, #380]	; (5378 <main+0x3bc>)
    51fa:	f002 fded 	bl	7dd8 <strcasecmp>
    51fe:	2800      	cmp	r0, #0
    5200:	d038      	beq.n	5274 <main+0x2b8>
					sprintf(UdpAnsver, "48.031");
					
					}else if(strcasecmp(TCP_RX_BUF, "*RST") == 0){
    5202:	4962      	ldr	r1, [pc, #392]	; (538c <main+0x3d0>)
    5204:	485c      	ldr	r0, [pc, #368]	; (5378 <main+0x3bc>)
    5206:	f002 fde7 	bl	7dd8 <strcasecmp>
    520a:	2800      	cmp	r0, #0
    520c:	d13b      	bne.n	5286 <main+0x2ca>
					sprintf(UdpAnsver, "ok");
    520e:	4b60      	ldr	r3, [pc, #384]	; (5390 <main+0x3d4>)
    5210:	4a60      	ldr	r2, [pc, #384]	; (5394 <main+0x3d8>)
    5212:	8811      	ldrh	r1, [r2, #0]
    5214:	8019      	strh	r1, [r3, #0]
    5216:	7892      	ldrb	r2, [r2, #2]
    5218:	709a      	strb	r2, [r3, #2]
    521a:	e005      	b.n	5228 <main+0x26c>
					sprintf(UdpAnsver, "ok");
    521c:	4b5c      	ldr	r3, [pc, #368]	; (5390 <main+0x3d4>)
    521e:	4a5d      	ldr	r2, [pc, #372]	; (5394 <main+0x3d8>)
    5220:	8811      	ldrh	r1, [r2, #0]
    5222:	8019      	strh	r1, [r3, #0]
    5224:	7892      	ldrb	r2, [r2, #2]
    5226:	709a      	strb	r2, [r3, #2]
					}else{
					sprintf(UdpAnsver, "err");
				}
				result = socket(UdpTxSockNum, Sn_MR_UDP, UdpTxPort, SF_IO_NONBLOCK);
    5228:	4e5b      	ldr	r6, [pc, #364]	; (5398 <main+0x3dc>)
    522a:	8832      	ldrh	r2, [r6, #0]
    522c:	4f5b      	ldr	r7, [pc, #364]	; (539c <main+0x3e0>)
    522e:	7838      	ldrb	r0, [r7, #0]
    5230:	2301      	movs	r3, #1
    5232:	2102      	movs	r1, #2
    5234:	f7fd fa14 	bl	2660 <socket>
    5238:	4c59      	ldr	r4, [pc, #356]	; (53a0 <main+0x3e4>)
    523a:	7020      	strb	r0, [r4, #0]
				result = sendto(UdpTxSockNum, (uint8_t*)UdpAnsver, strlen(UdpAnsver), UdpDestAddress, UdpTxPort);
    523c:	4d54      	ldr	r5, [pc, #336]	; (5390 <main+0x3d4>)
    523e:	0028      	movs	r0, r5
    5240:	f002 fea6 	bl	7f90 <strlen>
    5244:	b282      	uxth	r2, r0
    5246:	7838      	ldrb	r0, [r7, #0]
    5248:	8833      	ldrh	r3, [r6, #0]
    524a:	9300      	str	r3, [sp, #0]
    524c:	4b55      	ldr	r3, [pc, #340]	; (53a4 <main+0x3e8>)
    524e:	0029      	movs	r1, r5
    5250:	f7fd fc54 	bl	2afc <sendto>
    5254:	7020      	strb	r0, [r4, #0]
    5256:	e78d      	b.n	5174 <main+0x1b8>
					sprintf(UdpAnsver, "ok");
    5258:	4b4d      	ldr	r3, [pc, #308]	; (5390 <main+0x3d4>)
    525a:	4a4e      	ldr	r2, [pc, #312]	; (5394 <main+0x3d8>)
    525c:	8811      	ldrh	r1, [r2, #0]
    525e:	8019      	strh	r1, [r3, #0]
    5260:	7892      	ldrb	r2, [r2, #2]
    5262:	709a      	strb	r2, [r3, #2]
    5264:	e7e0      	b.n	5228 <main+0x26c>
					sprintf(UdpAnsver, "0.121");
    5266:	4b4a      	ldr	r3, [pc, #296]	; (5390 <main+0x3d4>)
    5268:	4a4f      	ldr	r2, [pc, #316]	; (53a8 <main+0x3ec>)
    526a:	6811      	ldr	r1, [r2, #0]
    526c:	6019      	str	r1, [r3, #0]
    526e:	8892      	ldrh	r2, [r2, #4]
    5270:	809a      	strh	r2, [r3, #4]
    5272:	e7d9      	b.n	5228 <main+0x26c>
					sprintf(UdpAnsver, "48.031");
    5274:	4b46      	ldr	r3, [pc, #280]	; (5390 <main+0x3d4>)
    5276:	4a4d      	ldr	r2, [pc, #308]	; (53ac <main+0x3f0>)
    5278:	6811      	ldr	r1, [r2, #0]
    527a:	6019      	str	r1, [r3, #0]
    527c:	8891      	ldrh	r1, [r2, #4]
    527e:	8099      	strh	r1, [r3, #4]
    5280:	7992      	ldrb	r2, [r2, #6]
    5282:	719a      	strb	r2, [r3, #6]
    5284:	e7d0      	b.n	5228 <main+0x26c>
					sprintf(UdpAnsver, "err");
    5286:	4a4a      	ldr	r2, [pc, #296]	; (53b0 <main+0x3f4>)
    5288:	4b41      	ldr	r3, [pc, #260]	; (5390 <main+0x3d4>)
    528a:	601a      	str	r2, [r3, #0]
    528c:	e7cc      	b.n	5228 <main+0x26c>
		}
		
		for(uint8_t HTTP_SOCKET = 5; HTTP_SOCKET <= 7; HTTP_SOCKET++) {
			if (getSn_SR(HTTP_SOCKET) == SOCK_ESTABLISHED) {
				uint8_t rIP[4];
				getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
    528e:	aa12      	add	r2, sp, #72	; 0x48
    5290:	2104      	movs	r1, #4
    5292:	0020      	movs	r0, r4
    5294:	f7fd fe2a 	bl	2eec <getsockopt>
				uint16_t res_size = getSn_RX_RSR(HTTP_SOCKET);
    5298:	0020      	movs	r0, r4
    529a:	f7fd fff7 	bl	328c <getSn_RX_RSR>
    529e:	0006      	movs	r6, r0
				
				//sprintf(debugSerialBuffer, "BUFF LEN=%d", res_size);
				//SerialWrite(debugSerialBuffer);
				
				if (res_size > sizeof(TCP_RX_BUF)) {
    52a0:	2380      	movs	r3, #128	; 0x80
    52a2:	011b      	lsls	r3, r3, #4
    52a4:	4298      	cmp	r0, r3
    52a6:	d900      	bls.n	52aa <main+0x2ee>
					res_size = sizeof(TCP_RX_BUF);
    52a8:	001e      	movs	r6, r3
				}

				memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    52aa:	4f33      	ldr	r7, [pc, #204]	; (5378 <main+0x3bc>)
    52ac:	2280      	movs	r2, #128	; 0x80
    52ae:	0112      	lsls	r2, r2, #4
    52b0:	2100      	movs	r1, #0
    52b2:	0038      	movs	r0, r7
    52b4:	f002 fcda 	bl	7c6c <memset>
				recv(HTTP_SOCKET, (uint8_t*)TCP_RX_BUF, res_size);
    52b8:	0032      	movs	r2, r6
    52ba:	0039      	movs	r1, r7
    52bc:	0020      	movs	r0, r4
    52be:	f7fd fba3 	bl	2a08 <recv>
				
				//main page dowload to client handler
				if (strstr((char*)TCP_RX_BUF, "GET / ") != NULL) {
    52c2:	493c      	ldr	r1, [pc, #240]	; (53b4 <main+0x3f8>)
    52c4:	0038      	movs	r0, r7
    52c6:	f002 fff7 	bl	82b8 <strstr>
    52ca:	2800      	cmp	r0, #0
    52cc:	d016      	beq.n	52fc <main+0x340>
    52ce:	2700      	movs	r7, #0
    52d0:	e009      	b.n	52e6 <main+0x32a>
					size_t total_length = strlen(psu_page);
					size_t sent_length = 0;
					//SerialWrite(TCP_RX_BUF);
					while (sent_length < total_length) {
						size_t chunk_size = total_length - sent_length > 1024 ? 1024 : total_length - sent_length;
						send(HTTP_SOCKET, (uint8_t*)(psu_page + sent_length), chunk_size);
    52d2:	b2b2      	uxth	r2, r6
    52d4:	4938      	ldr	r1, [pc, #224]	; (53b8 <main+0x3fc>)
    52d6:	19c9      	adds	r1, r1, r7
    52d8:	0020      	movs	r0, r4
    52da:	f7fd faf9 	bl	28d0 <send>
						delay_ms(20);
    52de:	2014      	movs	r0, #20
    52e0:	f7fa ff62 	bl	1a8 <delay_ms>
						sent_length += chunk_size;
    52e4:	19bf      	adds	r7, r7, r6
					while (sent_length < total_length) {
    52e6:	4b35      	ldr	r3, [pc, #212]	; (53bc <main+0x400>)
    52e8:	429f      	cmp	r7, r3
    52ea:	d817      	bhi.n	531c <main+0x360>
						size_t chunk_size = total_length - sent_length > 1024 ? 1024 : total_length - sent_length;
    52ec:	4e34      	ldr	r6, [pc, #208]	; (53c0 <main+0x404>)
    52ee:	1bf6      	subs	r6, r6, r7
    52f0:	2380      	movs	r3, #128	; 0x80
    52f2:	00db      	lsls	r3, r3, #3
    52f4:	429e      	cmp	r6, r3
    52f6:	d9ec      	bls.n	52d2 <main+0x316>
    52f8:	001e      	movs	r6, r3
    52fa:	e7ea      	b.n	52d2 <main+0x316>
					}
					
					//favicon handler
					} else if (strstr((char*)TCP_RX_BUF, "GET /favicon.ico") != NULL) {
    52fc:	4931      	ldr	r1, [pc, #196]	; (53c4 <main+0x408>)
    52fe:	481e      	ldr	r0, [pc, #120]	; (5378 <main+0x3bc>)
    5300:	f002 ffda 	bl	82b8 <strstr>
    5304:	2800      	cmp	r0, #0
    5306:	d065      	beq.n	53d4 <main+0x418>
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: image/x-icon\r\n\r\n", 47);
    5308:	222f      	movs	r2, #47	; 0x2f
    530a:	492f      	ldr	r1, [pc, #188]	; (53c8 <main+0x40c>)
    530c:	0020      	movs	r0, r4
    530e:	f7fd fadf 	bl	28d0 <send>
					send(HTTP_SOCKET, (uint8_t *)favicon_ico, sizeof(favicon_ico));
    5312:	4a2e      	ldr	r2, [pc, #184]	; (53cc <main+0x410>)
    5314:	492e      	ldr	r1, [pc, #184]	; (53d0 <main+0x414>)
    5316:	0020      	movs	r0, r4
    5318:	f7fd fada 	bl	28d0 <send>
						remoteCtrl = 1;
					}
					send(HTTP_SOCKET, (uint8_t*)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"success\":true}", 65);
				}

				disconnect(HTTP_SOCKET);
    531c:	0020      	movs	r0, r4
    531e:	f7fd fa8f 	bl	2840 <disconnect>
				close(HTTP_SOCKET);
    5322:	0020      	movs	r0, r4
    5324:	f7fd f95c 	bl	25e0 <close>
    5328:	e191      	b.n	564e <main+0x692>
    532a:	46c0      	nop			; (mov r8, r8)
    532c:	0000218b 	.word	0x0000218b
    5330:	00002181 	.word	0x00002181
    5334:	000021e9 	.word	0x000021e9
    5338:	000021c5 	.word	0x000021c5
    533c:	000021ad 	.word	0x000021ad
    5340:	00002195 	.word	0x00002195
    5344:	20000060 	.word	0x20000060
    5348:	20000048 	.word	0x20000048
    534c:	200016f8 	.word	0x200016f8
    5350:	0000ffff 	.word	0x0000ffff
    5354:	0000f738 	.word	0x0000f738
    5358:	200014c8 	.word	0x200014c8
    535c:	0000fcd4 	.word	0x0000fcd4
    5360:	20001704 	.word	0x20001704
    5364:	0000fcdc 	.word	0x0000fcdc
    5368:	0000f74c 	.word	0x0000f74c
    536c:	41004400 	.word	0x41004400
    5370:	2000003a 	.word	0x2000003a
    5374:	20000038 	.word	0x20000038
    5378:	20000cc8 	.word	0x20000cc8
    537c:	0000fce8 	.word	0x0000fce8
    5380:	0000fcfc 	.word	0x0000fcfc
    5384:	0000fd0c 	.word	0x0000fd0c
    5388:	0000fd20 	.word	0x0000fd20
    538c:	0000fd34 	.word	0x0000fd34
    5390:	20000ac4 	.word	0x20000ac4
    5394:	0000fcf8 	.word	0x0000fcf8
    5398:	2000003c 	.word	0x2000003c
    539c:	20000b44 	.word	0x20000b44
    53a0:	20001700 	.word	0x20001700
    53a4:	20000034 	.word	0x20000034
    53a8:	0000fd18 	.word	0x0000fd18
    53ac:	0000fd2c 	.word	0x0000fd2c
    53b0:	00727265 	.word	0x00727265
    53b4:	0000fd3c 	.word	0x0000fd3c
    53b8:	0000feec 	.word	0x0000feec
    53bc:	00001dae 	.word	0x00001dae
    53c0:	00001daf 	.word	0x00001daf
    53c4:	0000fd44 	.word	0x0000fd44
    53c8:	0000fd58 	.word	0x0000fd58
    53cc:	00000582 	.word	0x00000582
    53d0:	0000f750 	.word	0x0000f750
					} else if (strstr((char*)TCP_RX_BUF, "GET /set_vals") != NULL) {
    53d4:	49b0      	ldr	r1, [pc, #704]	; (5698 <main+0x6dc>)
    53d6:	48b1      	ldr	r0, [pc, #708]	; (569c <main+0x6e0>)
    53d8:	f002 ff6e 	bl	82b8 <strstr>
    53dc:	2800      	cmp	r0, #0
    53de:	d049      	beq.n	5474 <main+0x4b8>
						char *query_string = strstr((char*)TCP_RX_BUF, "GET /set_vals") + strlen("GET /set_vals?");
    53e0:	300e      	adds	r0, #14
    53e2:	0006      	movs	r6, r0
						buzer(10);
    53e4:	200a      	movs	r0, #10
    53e6:	f7fc fc7b 	bl	1ce0 <buzer>
						sscanf(query_string, "amp=%f&volt=%f", &amp, &volt);
    53ea:	4fad      	ldr	r7, [pc, #692]	; (56a0 <main+0x6e4>)
    53ec:	4bad      	ldr	r3, [pc, #692]	; (56a4 <main+0x6e8>)
    53ee:	4698      	mov	r8, r3
    53f0:	003b      	movs	r3, r7
    53f2:	4642      	mov	r2, r8
    53f4:	49ac      	ldr	r1, [pc, #688]	; (56a8 <main+0x6ec>)
    53f6:	0030      	movs	r0, r6
    53f8:	f002 fcc4 	bl	7d84 <sscanf>
						SET_DAC_VOLTAGE(volt);
    53fc:	6838      	ldr	r0, [r7, #0]
    53fe:	f002 f9cf 	bl	77a0 <__aeabi_f2d>
    5402:	4aaa      	ldr	r2, [pc, #680]	; (56ac <main+0x6f0>)
    5404:	4baa      	ldr	r3, [pc, #680]	; (56b0 <main+0x6f4>)
    5406:	f001 fb87 	bl	6b18 <__aeabi_dmul>
    540a:	2200      	movs	r2, #0
    540c:	4ba9      	ldr	r3, [pc, #676]	; (56b4 <main+0x6f8>)
    540e:	f000 fd3f 	bl	5e90 <__aeabi_dadd>
    5412:	f000 fb3f 	bl	5a94 <__aeabi_d2uiz>
    5416:	b280      	uxth	r0, r0
    5418:	0a03      	lsrs	r3, r0, #8
    541a:	270f      	movs	r7, #15
    541c:	403b      	ands	r3, r7
    541e:	ae17      	add	r6, sp, #92	; 0x5c
    5420:	7033      	strb	r3, [r6, #0]
    5422:	7070      	strb	r0, [r6, #1]
    5424:	2202      	movs	r2, #2
    5426:	0031      	movs	r1, r6
    5428:	2038      	movs	r0, #56	; 0x38
    542a:	f7fc ffd5 	bl	23d8 <I2C_write_batch>
						SET_DAC_CURRENT(amp);
    542e:	4643      	mov	r3, r8
    5430:	6818      	ldr	r0, [r3, #0]
    5432:	f002 f9b5 	bl	77a0 <__aeabi_f2d>
    5436:	2200      	movs	r2, #0
    5438:	4b9f      	ldr	r3, [pc, #636]	; (56b8 <main+0x6fc>)
    543a:	f001 fb6d 	bl	6b18 <__aeabi_dmul>
    543e:	2200      	movs	r2, #0
    5440:	4b9e      	ldr	r3, [pc, #632]	; (56bc <main+0x700>)
    5442:	f000 fd25 	bl	5e90 <__aeabi_dadd>
    5446:	f000 fb25 	bl	5a94 <__aeabi_d2uiz>
    544a:	b280      	uxth	r0, r0
    544c:	0a03      	lsrs	r3, r0, #8
    544e:	401f      	ands	r7, r3
    5450:	2310      	movs	r3, #16
    5452:	431f      	orrs	r7, r3
    5454:	7037      	strb	r7, [r6, #0]
    5456:	7070      	strb	r0, [r6, #1]
    5458:	2202      	movs	r2, #2
    545a:	a917      	add	r1, sp, #92	; 0x5c
    545c:	2038      	movs	r0, #56	; 0x38
    545e:	f7fc ffbb 	bl	23d8 <I2C_write_batch>
						remoteCtrl = 1;
    5462:	2201      	movs	r2, #1
    5464:	4b96      	ldr	r3, [pc, #600]	; (56c0 <main+0x704>)
    5466:	701a      	strb	r2, [r3, #0]
						send(HTTP_SOCKET, (uint8_t*)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"success\":true}", 67);
    5468:	3242      	adds	r2, #66	; 0x42
    546a:	4996      	ldr	r1, [pc, #600]	; (56c4 <main+0x708>)
    546c:	0020      	movs	r0, r4
    546e:	f7fd fa2f 	bl	28d0 <send>
    5472:	e753      	b.n	531c <main+0x360>
					} else if (strstr((char*)TCP_RX_BUF, "GET /get_vals") != NULL) {
    5474:	4994      	ldr	r1, [pc, #592]	; (56c8 <main+0x70c>)
    5476:	4889      	ldr	r0, [pc, #548]	; (569c <main+0x6e0>)
    5478:	f002 ff1e 	bl	82b8 <strstr>
    547c:	2800      	cmp	r0, #0
    547e:	d040      	beq.n	5502 <main+0x546>
					float watt = ampDMM * voltDMM;
    5480:	4b92      	ldr	r3, [pc, #584]	; (56cc <main+0x710>)
    5482:	681e      	ldr	r6, [r3, #0]
    5484:	4b92      	ldr	r3, [pc, #584]	; (56d0 <main+0x714>)
    5486:	681f      	ldr	r7, [r3, #0]
    5488:	1c39      	adds	r1, r7, #0
    548a:	1c30      	adds	r0, r6, #0
    548c:	f000 fbe0 	bl	5c50 <__aeabi_fmul>
    5490:	9011      	str	r0, [sp, #68]	; 0x44
					snprintf(json_response, sizeof(json_response),
    5492:	2301      	movs	r3, #1
    5494:	930f      	str	r3, [sp, #60]	; 0x3c
    5496:	930e      	str	r3, [sp, #56]	; 0x38
    5498:	2300      	movs	r3, #0
    549a:	930d      	str	r3, [sp, #52]	; 0x34
    549c:	4b8d      	ldr	r3, [pc, #564]	; (56d4 <main+0x718>)
    549e:	781b      	ldrb	r3, [r3, #0]
    54a0:	930c      	str	r3, [sp, #48]	; 0x30
    54a2:	4b87      	ldr	r3, [pc, #540]	; (56c0 <main+0x704>)
    54a4:	781b      	ldrb	r3, [r3, #0]
    54a6:	930b      	str	r3, [sp, #44]	; 0x2c
    54a8:	4b8b      	ldr	r3, [pc, #556]	; (56d8 <main+0x71c>)
    54aa:	781b      	ldrb	r3, [r3, #0]
    54ac:	930a      	str	r3, [sp, #40]	; 0x28
    54ae:	1c38      	adds	r0, r7, #0
    54b0:	f002 f976 	bl	77a0 <__aeabi_f2d>
    54b4:	9008      	str	r0, [sp, #32]
    54b6:	9109      	str	r1, [sp, #36]	; 0x24
    54b8:	1c30      	adds	r0, r6, #0
    54ba:	f002 f971 	bl	77a0 <__aeabi_f2d>
    54be:	9006      	str	r0, [sp, #24]
    54c0:	9107      	str	r1, [sp, #28]
    54c2:	9811      	ldr	r0, [sp, #68]	; 0x44
    54c4:	f002 f96c 	bl	77a0 <__aeabi_f2d>
    54c8:	9004      	str	r0, [sp, #16]
    54ca:	9105      	str	r1, [sp, #20]
    54cc:	4b74      	ldr	r3, [pc, #464]	; (56a0 <main+0x6e4>)
    54ce:	6818      	ldr	r0, [r3, #0]
    54d0:	f002 f966 	bl	77a0 <__aeabi_f2d>
    54d4:	9002      	str	r0, [sp, #8]
    54d6:	9103      	str	r1, [sp, #12]
    54d8:	4b72      	ldr	r3, [pc, #456]	; (56a4 <main+0x6e8>)
    54da:	6818      	ldr	r0, [r3, #0]
    54dc:	f002 f960 	bl	77a0 <__aeabi_f2d>
    54e0:	9000      	str	r0, [sp, #0]
    54e2:	9101      	str	r1, [sp, #4]
    54e4:	4a7d      	ldr	r2, [pc, #500]	; (56dc <main+0x720>)
    54e6:	2180      	movs	r1, #128	; 0x80
    54e8:	0049      	lsls	r1, r1, #1
    54ea:	a817      	add	r0, sp, #92	; 0x5c
    54ec:	f002 fc08 	bl	7d00 <snprintf>
					send(HTTP_SOCKET, (uint8_t*)json_response, strlen(json_response));
    54f0:	a817      	add	r0, sp, #92	; 0x5c
    54f2:	f002 fd4d 	bl	7f90 <strlen>
    54f6:	b282      	uxth	r2, r0
    54f8:	a917      	add	r1, sp, #92	; 0x5c
    54fa:	0020      	movs	r0, r4
    54fc:	f7fd f9e8 	bl	28d0 <send>
    5500:	e70c      	b.n	531c <main+0x360>
					} else if (strstr((char*)TCP_RX_BUF, "GET /control") != NULL) {
    5502:	4977      	ldr	r1, [pc, #476]	; (56e0 <main+0x724>)
    5504:	4865      	ldr	r0, [pc, #404]	; (569c <main+0x6e0>)
    5506:	f002 fed7 	bl	82b8 <strstr>
    550a:	2800      	cmp	r0, #0
    550c:	d100      	bne.n	5510 <main+0x554>
    550e:	e705      	b.n	531c <main+0x360>
					char *query_string = strstr((char*)TCP_RX_BUF, "GET /control") + strlen("GET /control?");
    5510:	300d      	adds	r0, #13
					sscanf(query_string, "device=%[^&]&action=%s", device, action);
    5512:	ab17      	add	r3, sp, #92	; 0x5c
    5514:	aa14      	add	r2, sp, #80	; 0x50
    5516:	4973      	ldr	r1, [pc, #460]	; (56e4 <main+0x728>)
    5518:	f002 fc34 	bl	7d84 <sscanf>
					if (strcmp(device, "fan") == 0) {
    551c:	4972      	ldr	r1, [pc, #456]	; (56e8 <main+0x72c>)
    551e:	a814      	add	r0, sp, #80	; 0x50
    5520:	f002 fcf2 	bl	7f08 <strcmp>
    5524:	2800      	cmp	r0, #0
    5526:	d120      	bne.n	556a <main+0x5ae>
						buzer(10);
    5528:	300a      	adds	r0, #10
    552a:	f7fc fbd9 	bl	1ce0 <buzer>
						if (strcmp(action, "on") == 0) {
    552e:	496f      	ldr	r1, [pc, #444]	; (56ec <main+0x730>)
    5530:	a817      	add	r0, sp, #92	; 0x5c
    5532:	f002 fce9 	bl	7f08 <strcmp>
    5536:	2800      	cmp	r0, #0
    5538:	d108      	bne.n	554c <main+0x590>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    553a:	23c0      	movs	r3, #192	; 0xc0
    553c:	05db      	lsls	r3, r3, #23
    553e:	2280      	movs	r2, #128	; 0x80
    5540:	0052      	lsls	r2, r2, #1
    5542:	619a      	str	r2, [r3, #24]
    5544:	3201      	adds	r2, #1
    5546:	32ff      	adds	r2, #255	; 0xff
    5548:	619a      	str	r2, [r3, #24]
    554a:	e01a      	b.n	5582 <main+0x5c6>
							} else if (strcmp(action, "off") == 0) {
    554c:	4968      	ldr	r1, [pc, #416]	; (56f0 <main+0x734>)
    554e:	a817      	add	r0, sp, #92	; 0x5c
    5550:	f002 fcda 	bl	7f08 <strcmp>
    5554:	2800      	cmp	r0, #0
    5556:	d114      	bne.n	5582 <main+0x5c6>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5558:	23c0      	movs	r3, #192	; 0xc0
    555a:	05db      	lsls	r3, r3, #23
    555c:	2280      	movs	r2, #128	; 0x80
    555e:	0052      	lsls	r2, r2, #1
    5560:	615a      	str	r2, [r3, #20]
    5562:	3201      	adds	r2, #1
    5564:	32ff      	adds	r2, #255	; 0xff
    5566:	615a      	str	r2, [r3, #20]
    5568:	e00b      	b.n	5582 <main+0x5c6>
						} else if (strcmp(device, "rem") == 0) {
    556a:	4962      	ldr	r1, [pc, #392]	; (56f4 <main+0x738>)
    556c:	a814      	add	r0, sp, #80	; 0x50
    556e:	f002 fccb 	bl	7f08 <strcmp>
    5572:	2800      	cmp	r0, #0
    5574:	d00b      	beq.n	558e <main+0x5d2>
						} else if (strcmp(device, "psu") == 0) {
    5576:	4960      	ldr	r1, [pc, #384]	; (56f8 <main+0x73c>)
    5578:	a814      	add	r0, sp, #80	; 0x50
    557a:	f002 fcc5 	bl	7f08 <strcmp>
    557e:	2800      	cmp	r0, #0
    5580:	d02b      	beq.n	55da <main+0x61e>
					send(HTTP_SOCKET, (uint8_t*)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n{\"success\":true}", 65);
    5582:	2241      	movs	r2, #65	; 0x41
    5584:	494f      	ldr	r1, [pc, #316]	; (56c4 <main+0x708>)
    5586:	0020      	movs	r0, r4
    5588:	f7fd f9a2 	bl	28d0 <send>
    558c:	e6c6      	b.n	531c <main+0x360>
						buzer(10);
    558e:	300a      	adds	r0, #10
    5590:	f7fc fba6 	bl	1ce0 <buzer>
						if (strcmp(action, "on") == 0) {
    5594:	4955      	ldr	r1, [pc, #340]	; (56ec <main+0x730>)
    5596:	a817      	add	r0, sp, #92	; 0x5c
    5598:	f002 fcb6 	bl	7f08 <strcmp>
    559c:	2800      	cmp	r0, #0
    559e:	d10c      	bne.n	55ba <main+0x5fe>
							remoteCtrl = 1;
    55a0:	2201      	movs	r2, #1
    55a2:	4b47      	ldr	r3, [pc, #284]	; (56c0 <main+0x704>)
    55a4:	701a      	strb	r2, [r3, #0]
						gpio_set_pin_level(O1, remoteCtrl);
    55a6:	4b46      	ldr	r3, [pc, #280]	; (56c0 <main+0x704>)
    55a8:	781b      	ldrb	r3, [r3, #0]
    55aa:	2b00      	cmp	r3, #0
    55ac:	d00f      	beq.n	55ce <main+0x612>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    55ae:	2280      	movs	r2, #128	; 0x80
    55b0:	00d2      	lsls	r2, r2, #3
    55b2:	23c0      	movs	r3, #192	; 0xc0
    55b4:	05db      	lsls	r3, r3, #23
    55b6:	619a      	str	r2, [r3, #24]
    55b8:	e7e3      	b.n	5582 <main+0x5c6>
							} else if (strcmp(action, "off") == 0) {
    55ba:	494d      	ldr	r1, [pc, #308]	; (56f0 <main+0x734>)
    55bc:	a817      	add	r0, sp, #92	; 0x5c
    55be:	f002 fca3 	bl	7f08 <strcmp>
    55c2:	2800      	cmp	r0, #0
    55c4:	d1ef      	bne.n	55a6 <main+0x5ea>
							remoteCtrl = 0;
    55c6:	2200      	movs	r2, #0
    55c8:	4b3d      	ldr	r3, [pc, #244]	; (56c0 <main+0x704>)
    55ca:	701a      	strb	r2, [r3, #0]
    55cc:	e7eb      	b.n	55a6 <main+0x5ea>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    55ce:	2280      	movs	r2, #128	; 0x80
    55d0:	00d2      	lsls	r2, r2, #3
    55d2:	23c0      	movs	r3, #192	; 0xc0
    55d4:	05db      	lsls	r3, r3, #23
    55d6:	615a      	str	r2, [r3, #20]
    55d8:	e7d3      	b.n	5582 <main+0x5c6>
						buzer(10);
    55da:	300a      	adds	r0, #10
    55dc:	f7fc fb80 	bl	1ce0 <buzer>
						if (strcmp(action, "on") == 0) {
    55e0:	4942      	ldr	r1, [pc, #264]	; (56ec <main+0x730>)
    55e2:	a817      	add	r0, sp, #92	; 0x5c
    55e4:	f002 fc90 	bl	7f08 <strcmp>
    55e8:	2800      	cmp	r0, #0
    55ea:	d106      	bne.n	55fa <main+0x63e>
							outState = 1;
    55ec:	2201      	movs	r2, #1
    55ee:	4b3a      	ldr	r3, [pc, #232]	; (56d8 <main+0x71c>)
    55f0:	701a      	strb	r2, [r3, #0]
						remoteCtrl = 1;
    55f2:	2201      	movs	r2, #1
    55f4:	4b32      	ldr	r3, [pc, #200]	; (56c0 <main+0x704>)
    55f6:	701a      	strb	r2, [r3, #0]
    55f8:	e7c3      	b.n	5582 <main+0x5c6>
							} else if (strcmp(action, "off") == 0) {
    55fa:	493d      	ldr	r1, [pc, #244]	; (56f0 <main+0x734>)
    55fc:	a817      	add	r0, sp, #92	; 0x5c
    55fe:	f002 fc83 	bl	7f08 <strcmp>
    5602:	2800      	cmp	r0, #0
    5604:	d1f5      	bne.n	55f2 <main+0x636>
							outState = 0;
    5606:	2200      	movs	r2, #0
    5608:	4b33      	ldr	r3, [pc, #204]	; (56d8 <main+0x71c>)
    560a:	701a      	strb	r2, [r3, #0]
    560c:	e7f1      	b.n	55f2 <main+0x636>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    560e:	2180      	movs	r1, #128	; 0x80
    5610:	0289      	lsls	r1, r1, #10
    5612:	3397      	adds	r3, #151	; 0x97
    5614:	22c0      	movs	r2, #192	; 0xc0
    5616:	05d2      	lsls	r2, r2, #23
    5618:	50d1      	str	r1, [r2, r3]
    561a:	e022      	b.n	5662 <main+0x6a6>
    561c:	2280      	movs	r2, #128	; 0x80
    561e:	0392      	lsls	r2, r2, #14
    5620:	23c0      	movs	r3, #192	; 0xc0
    5622:	05db      	lsls	r3, r3, #23
    5624:	619a      	str	r2, [r3, #24]
    5626:	e025      	b.n	5674 <main+0x6b8>
		for(uint8_t HTTP_SOCKET = 5; HTTP_SOCKET <= 7; HTTP_SOCKET++) {
    5628:	3401      	adds	r4, #1
    562a:	b2e4      	uxtb	r4, r4
    562c:	2c07      	cmp	r4, #7
    562e:	d900      	bls.n	5632 <main+0x676>
    5630:	e56d      	b.n	510e <main+0x152>
			if (getSn_SR(HTTP_SOCKET) == SOCK_ESTABLISHED) {
    5632:	9410      	str	r4, [sp, #64]	; 0x40
    5634:	00a5      	lsls	r5, r4, #2
    5636:	3501      	adds	r5, #1
    5638:	00ed      	lsls	r5, r5, #3
    563a:	23c0      	movs	r3, #192	; 0xc0
    563c:	009b      	lsls	r3, r3, #2
    563e:	469c      	mov	ip, r3
    5640:	4465      	add	r5, ip
    5642:	0028      	movs	r0, r5
    5644:	f7fd fd12 	bl	306c <WIZCHIP_READ>
    5648:	2817      	cmp	r0, #23
    564a:	d100      	bne.n	564e <main+0x692>
    564c:	e61f      	b.n	528e <main+0x2d2>
			}

			if(outState == 1){
    564e:	4b22      	ldr	r3, [pc, #136]	; (56d8 <main+0x71c>)
    5650:	781b      	ldrb	r3, [r3, #0]
    5652:	2b01      	cmp	r3, #1
    5654:	d0db      	beq.n	560e <main+0x652>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    5656:	2180      	movs	r1, #128	; 0x80
    5658:	0289      	lsls	r1, r1, #10
    565a:	2394      	movs	r3, #148	; 0x94
    565c:	22c0      	movs	r2, #192	; 0xc0
    565e:	05d2      	lsls	r2, r2, #23
    5660:	50d1      	str	r1, [r2, r3]
				gpio_set_pin_level(PSU_OUT_EN, true);
			}else{
				gpio_set_pin_level(PSU_OUT_EN, false);
				
			}
			if(remoteCtrl == 1){
    5662:	4b17      	ldr	r3, [pc, #92]	; (56c0 <main+0x704>)
    5664:	781b      	ldrb	r3, [r3, #0]
    5666:	2b01      	cmp	r3, #1
    5668:	d0d8      	beq.n	561c <main+0x660>
    566a:	2280      	movs	r2, #128	; 0x80
    566c:	0392      	lsls	r2, r2, #14
    566e:	23c0      	movs	r3, #192	; 0xc0
    5670:	05db      	lsls	r3, r3, #23
    5672:	615a      	str	r2, [r3, #20]
			}
			//if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSE_WAIT) {
			//disconnect(HTTP_SOCKET);
			//}

			if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSED) {
    5674:	0028      	movs	r0, r5
    5676:	f7fd fcf9 	bl	306c <WIZCHIP_READ>
    567a:	2800      	cmp	r0, #0
    567c:	d1d4      	bne.n	5628 <main+0x66c>
				socket(HTTP_SOCKET, Sn_MR_TCP, socketPort[HTTP_SOCKET], 0);
    567e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5680:	005b      	lsls	r3, r3, #1
    5682:	4a1e      	ldr	r2, [pc, #120]	; (56fc <main+0x740>)
    5684:	5a9a      	ldrh	r2, [r3, r2]
    5686:	2300      	movs	r3, #0
    5688:	2101      	movs	r1, #1
    568a:	0020      	movs	r0, r4
    568c:	f7fc ffe8 	bl	2660 <socket>
				listen(HTTP_SOCKET);
    5690:	0020      	movs	r0, r4
    5692:	f7fd f89d 	bl	27d0 <listen>
    5696:	e7c7      	b.n	5628 <main+0x66c>
    5698:	0000fd88 	.word	0x0000fd88
    569c:	20000cc8 	.word	0x20000cc8
    56a0:	20000078 	.word	0x20000078
    56a4:	20000040 	.word	0x20000040
    56a8:	0000fd98 	.word	0x0000fd98
    56ac:	8f044a5f 	.word	0x8f044a5f
    56b0:	404fd7f4 	.word	0x404fd7f4
    56b4:	401a0000 	.word	0x401a0000
    56b8:	4083e800 	.word	0x4083e800
    56bc:	407f4800 	.word	0x407f4800
    56c0:	20000b46 	.word	0x20000b46
    56c4:	0000fda8 	.word	0x0000fda8
    56c8:	0000fdec 	.word	0x0000fdec
    56cc:	20000044 	.word	0x20000044
    56d0:	2000007c 	.word	0x2000007c
    56d4:	20000b45 	.word	0x20000b45
    56d8:	2000005f 	.word	0x2000005f
    56dc:	0000fdfc 	.word	0x0000fdfc
    56e0:	0000feb0 	.word	0x0000feb0
    56e4:	0000fec0 	.word	0x0000fec0
    56e8:	0000fed8 	.word	0x0000fed8
    56ec:	0000fedc 	.word	0x0000fedc
    56f0:	0000fee0 	.word	0x0000fee0
    56f4:	0000fee4 	.word	0x0000fee4
    56f8:	0000fee8 	.word	0x0000fee8
    56fc:	20000068 	.word	0x20000068

00005700 <__udivsi3>:
    5700:	2200      	movs	r2, #0
    5702:	0843      	lsrs	r3, r0, #1
    5704:	428b      	cmp	r3, r1
    5706:	d374      	bcc.n	57f2 <__udivsi3+0xf2>
    5708:	0903      	lsrs	r3, r0, #4
    570a:	428b      	cmp	r3, r1
    570c:	d35f      	bcc.n	57ce <__udivsi3+0xce>
    570e:	0a03      	lsrs	r3, r0, #8
    5710:	428b      	cmp	r3, r1
    5712:	d344      	bcc.n	579e <__udivsi3+0x9e>
    5714:	0b03      	lsrs	r3, r0, #12
    5716:	428b      	cmp	r3, r1
    5718:	d328      	bcc.n	576c <__udivsi3+0x6c>
    571a:	0c03      	lsrs	r3, r0, #16
    571c:	428b      	cmp	r3, r1
    571e:	d30d      	bcc.n	573c <__udivsi3+0x3c>
    5720:	22ff      	movs	r2, #255	; 0xff
    5722:	0209      	lsls	r1, r1, #8
    5724:	ba12      	rev	r2, r2
    5726:	0c03      	lsrs	r3, r0, #16
    5728:	428b      	cmp	r3, r1
    572a:	d302      	bcc.n	5732 <__udivsi3+0x32>
    572c:	1212      	asrs	r2, r2, #8
    572e:	0209      	lsls	r1, r1, #8
    5730:	d065      	beq.n	57fe <__udivsi3+0xfe>
    5732:	0b03      	lsrs	r3, r0, #12
    5734:	428b      	cmp	r3, r1
    5736:	d319      	bcc.n	576c <__udivsi3+0x6c>
    5738:	e000      	b.n	573c <__udivsi3+0x3c>
    573a:	0a09      	lsrs	r1, r1, #8
    573c:	0bc3      	lsrs	r3, r0, #15
    573e:	428b      	cmp	r3, r1
    5740:	d301      	bcc.n	5746 <__udivsi3+0x46>
    5742:	03cb      	lsls	r3, r1, #15
    5744:	1ac0      	subs	r0, r0, r3
    5746:	4152      	adcs	r2, r2
    5748:	0b83      	lsrs	r3, r0, #14
    574a:	428b      	cmp	r3, r1
    574c:	d301      	bcc.n	5752 <__udivsi3+0x52>
    574e:	038b      	lsls	r3, r1, #14
    5750:	1ac0      	subs	r0, r0, r3
    5752:	4152      	adcs	r2, r2
    5754:	0b43      	lsrs	r3, r0, #13
    5756:	428b      	cmp	r3, r1
    5758:	d301      	bcc.n	575e <__udivsi3+0x5e>
    575a:	034b      	lsls	r3, r1, #13
    575c:	1ac0      	subs	r0, r0, r3
    575e:	4152      	adcs	r2, r2
    5760:	0b03      	lsrs	r3, r0, #12
    5762:	428b      	cmp	r3, r1
    5764:	d301      	bcc.n	576a <__udivsi3+0x6a>
    5766:	030b      	lsls	r3, r1, #12
    5768:	1ac0      	subs	r0, r0, r3
    576a:	4152      	adcs	r2, r2
    576c:	0ac3      	lsrs	r3, r0, #11
    576e:	428b      	cmp	r3, r1
    5770:	d301      	bcc.n	5776 <__udivsi3+0x76>
    5772:	02cb      	lsls	r3, r1, #11
    5774:	1ac0      	subs	r0, r0, r3
    5776:	4152      	adcs	r2, r2
    5778:	0a83      	lsrs	r3, r0, #10
    577a:	428b      	cmp	r3, r1
    577c:	d301      	bcc.n	5782 <__udivsi3+0x82>
    577e:	028b      	lsls	r3, r1, #10
    5780:	1ac0      	subs	r0, r0, r3
    5782:	4152      	adcs	r2, r2
    5784:	0a43      	lsrs	r3, r0, #9
    5786:	428b      	cmp	r3, r1
    5788:	d301      	bcc.n	578e <__udivsi3+0x8e>
    578a:	024b      	lsls	r3, r1, #9
    578c:	1ac0      	subs	r0, r0, r3
    578e:	4152      	adcs	r2, r2
    5790:	0a03      	lsrs	r3, r0, #8
    5792:	428b      	cmp	r3, r1
    5794:	d301      	bcc.n	579a <__udivsi3+0x9a>
    5796:	020b      	lsls	r3, r1, #8
    5798:	1ac0      	subs	r0, r0, r3
    579a:	4152      	adcs	r2, r2
    579c:	d2cd      	bcs.n	573a <__udivsi3+0x3a>
    579e:	09c3      	lsrs	r3, r0, #7
    57a0:	428b      	cmp	r3, r1
    57a2:	d301      	bcc.n	57a8 <__udivsi3+0xa8>
    57a4:	01cb      	lsls	r3, r1, #7
    57a6:	1ac0      	subs	r0, r0, r3
    57a8:	4152      	adcs	r2, r2
    57aa:	0983      	lsrs	r3, r0, #6
    57ac:	428b      	cmp	r3, r1
    57ae:	d301      	bcc.n	57b4 <__udivsi3+0xb4>
    57b0:	018b      	lsls	r3, r1, #6
    57b2:	1ac0      	subs	r0, r0, r3
    57b4:	4152      	adcs	r2, r2
    57b6:	0943      	lsrs	r3, r0, #5
    57b8:	428b      	cmp	r3, r1
    57ba:	d301      	bcc.n	57c0 <__udivsi3+0xc0>
    57bc:	014b      	lsls	r3, r1, #5
    57be:	1ac0      	subs	r0, r0, r3
    57c0:	4152      	adcs	r2, r2
    57c2:	0903      	lsrs	r3, r0, #4
    57c4:	428b      	cmp	r3, r1
    57c6:	d301      	bcc.n	57cc <__udivsi3+0xcc>
    57c8:	010b      	lsls	r3, r1, #4
    57ca:	1ac0      	subs	r0, r0, r3
    57cc:	4152      	adcs	r2, r2
    57ce:	08c3      	lsrs	r3, r0, #3
    57d0:	428b      	cmp	r3, r1
    57d2:	d301      	bcc.n	57d8 <__udivsi3+0xd8>
    57d4:	00cb      	lsls	r3, r1, #3
    57d6:	1ac0      	subs	r0, r0, r3
    57d8:	4152      	adcs	r2, r2
    57da:	0883      	lsrs	r3, r0, #2
    57dc:	428b      	cmp	r3, r1
    57de:	d301      	bcc.n	57e4 <__udivsi3+0xe4>
    57e0:	008b      	lsls	r3, r1, #2
    57e2:	1ac0      	subs	r0, r0, r3
    57e4:	4152      	adcs	r2, r2
    57e6:	0843      	lsrs	r3, r0, #1
    57e8:	428b      	cmp	r3, r1
    57ea:	d301      	bcc.n	57f0 <__udivsi3+0xf0>
    57ec:	004b      	lsls	r3, r1, #1
    57ee:	1ac0      	subs	r0, r0, r3
    57f0:	4152      	adcs	r2, r2
    57f2:	1a41      	subs	r1, r0, r1
    57f4:	d200      	bcs.n	57f8 <__udivsi3+0xf8>
    57f6:	4601      	mov	r1, r0
    57f8:	4152      	adcs	r2, r2
    57fa:	4610      	mov	r0, r2
    57fc:	4770      	bx	lr
    57fe:	e7ff      	b.n	5800 <__udivsi3+0x100>
    5800:	b501      	push	{r0, lr}
    5802:	2000      	movs	r0, #0
    5804:	f000 f8f0 	bl	59e8 <__aeabi_idiv0>
    5808:	bd02      	pop	{r1, pc}
    580a:	46c0      	nop			; (mov r8, r8)

0000580c <__aeabi_uidivmod>:
    580c:	2900      	cmp	r1, #0
    580e:	d0f7      	beq.n	5800 <__udivsi3+0x100>
    5810:	e776      	b.n	5700 <__udivsi3>
    5812:	4770      	bx	lr

00005814 <__divsi3>:
    5814:	4603      	mov	r3, r0
    5816:	430b      	orrs	r3, r1
    5818:	d47f      	bmi.n	591a <__divsi3+0x106>
    581a:	2200      	movs	r2, #0
    581c:	0843      	lsrs	r3, r0, #1
    581e:	428b      	cmp	r3, r1
    5820:	d374      	bcc.n	590c <__divsi3+0xf8>
    5822:	0903      	lsrs	r3, r0, #4
    5824:	428b      	cmp	r3, r1
    5826:	d35f      	bcc.n	58e8 <__divsi3+0xd4>
    5828:	0a03      	lsrs	r3, r0, #8
    582a:	428b      	cmp	r3, r1
    582c:	d344      	bcc.n	58b8 <__divsi3+0xa4>
    582e:	0b03      	lsrs	r3, r0, #12
    5830:	428b      	cmp	r3, r1
    5832:	d328      	bcc.n	5886 <__divsi3+0x72>
    5834:	0c03      	lsrs	r3, r0, #16
    5836:	428b      	cmp	r3, r1
    5838:	d30d      	bcc.n	5856 <__divsi3+0x42>
    583a:	22ff      	movs	r2, #255	; 0xff
    583c:	0209      	lsls	r1, r1, #8
    583e:	ba12      	rev	r2, r2
    5840:	0c03      	lsrs	r3, r0, #16
    5842:	428b      	cmp	r3, r1
    5844:	d302      	bcc.n	584c <__divsi3+0x38>
    5846:	1212      	asrs	r2, r2, #8
    5848:	0209      	lsls	r1, r1, #8
    584a:	d065      	beq.n	5918 <__divsi3+0x104>
    584c:	0b03      	lsrs	r3, r0, #12
    584e:	428b      	cmp	r3, r1
    5850:	d319      	bcc.n	5886 <__divsi3+0x72>
    5852:	e000      	b.n	5856 <__divsi3+0x42>
    5854:	0a09      	lsrs	r1, r1, #8
    5856:	0bc3      	lsrs	r3, r0, #15
    5858:	428b      	cmp	r3, r1
    585a:	d301      	bcc.n	5860 <__divsi3+0x4c>
    585c:	03cb      	lsls	r3, r1, #15
    585e:	1ac0      	subs	r0, r0, r3
    5860:	4152      	adcs	r2, r2
    5862:	0b83      	lsrs	r3, r0, #14
    5864:	428b      	cmp	r3, r1
    5866:	d301      	bcc.n	586c <__divsi3+0x58>
    5868:	038b      	lsls	r3, r1, #14
    586a:	1ac0      	subs	r0, r0, r3
    586c:	4152      	adcs	r2, r2
    586e:	0b43      	lsrs	r3, r0, #13
    5870:	428b      	cmp	r3, r1
    5872:	d301      	bcc.n	5878 <__divsi3+0x64>
    5874:	034b      	lsls	r3, r1, #13
    5876:	1ac0      	subs	r0, r0, r3
    5878:	4152      	adcs	r2, r2
    587a:	0b03      	lsrs	r3, r0, #12
    587c:	428b      	cmp	r3, r1
    587e:	d301      	bcc.n	5884 <__divsi3+0x70>
    5880:	030b      	lsls	r3, r1, #12
    5882:	1ac0      	subs	r0, r0, r3
    5884:	4152      	adcs	r2, r2
    5886:	0ac3      	lsrs	r3, r0, #11
    5888:	428b      	cmp	r3, r1
    588a:	d301      	bcc.n	5890 <__divsi3+0x7c>
    588c:	02cb      	lsls	r3, r1, #11
    588e:	1ac0      	subs	r0, r0, r3
    5890:	4152      	adcs	r2, r2
    5892:	0a83      	lsrs	r3, r0, #10
    5894:	428b      	cmp	r3, r1
    5896:	d301      	bcc.n	589c <__divsi3+0x88>
    5898:	028b      	lsls	r3, r1, #10
    589a:	1ac0      	subs	r0, r0, r3
    589c:	4152      	adcs	r2, r2
    589e:	0a43      	lsrs	r3, r0, #9
    58a0:	428b      	cmp	r3, r1
    58a2:	d301      	bcc.n	58a8 <__divsi3+0x94>
    58a4:	024b      	lsls	r3, r1, #9
    58a6:	1ac0      	subs	r0, r0, r3
    58a8:	4152      	adcs	r2, r2
    58aa:	0a03      	lsrs	r3, r0, #8
    58ac:	428b      	cmp	r3, r1
    58ae:	d301      	bcc.n	58b4 <__divsi3+0xa0>
    58b0:	020b      	lsls	r3, r1, #8
    58b2:	1ac0      	subs	r0, r0, r3
    58b4:	4152      	adcs	r2, r2
    58b6:	d2cd      	bcs.n	5854 <__divsi3+0x40>
    58b8:	09c3      	lsrs	r3, r0, #7
    58ba:	428b      	cmp	r3, r1
    58bc:	d301      	bcc.n	58c2 <__divsi3+0xae>
    58be:	01cb      	lsls	r3, r1, #7
    58c0:	1ac0      	subs	r0, r0, r3
    58c2:	4152      	adcs	r2, r2
    58c4:	0983      	lsrs	r3, r0, #6
    58c6:	428b      	cmp	r3, r1
    58c8:	d301      	bcc.n	58ce <__divsi3+0xba>
    58ca:	018b      	lsls	r3, r1, #6
    58cc:	1ac0      	subs	r0, r0, r3
    58ce:	4152      	adcs	r2, r2
    58d0:	0943      	lsrs	r3, r0, #5
    58d2:	428b      	cmp	r3, r1
    58d4:	d301      	bcc.n	58da <__divsi3+0xc6>
    58d6:	014b      	lsls	r3, r1, #5
    58d8:	1ac0      	subs	r0, r0, r3
    58da:	4152      	adcs	r2, r2
    58dc:	0903      	lsrs	r3, r0, #4
    58de:	428b      	cmp	r3, r1
    58e0:	d301      	bcc.n	58e6 <__divsi3+0xd2>
    58e2:	010b      	lsls	r3, r1, #4
    58e4:	1ac0      	subs	r0, r0, r3
    58e6:	4152      	adcs	r2, r2
    58e8:	08c3      	lsrs	r3, r0, #3
    58ea:	428b      	cmp	r3, r1
    58ec:	d301      	bcc.n	58f2 <__divsi3+0xde>
    58ee:	00cb      	lsls	r3, r1, #3
    58f0:	1ac0      	subs	r0, r0, r3
    58f2:	4152      	adcs	r2, r2
    58f4:	0883      	lsrs	r3, r0, #2
    58f6:	428b      	cmp	r3, r1
    58f8:	d301      	bcc.n	58fe <__divsi3+0xea>
    58fa:	008b      	lsls	r3, r1, #2
    58fc:	1ac0      	subs	r0, r0, r3
    58fe:	4152      	adcs	r2, r2
    5900:	0843      	lsrs	r3, r0, #1
    5902:	428b      	cmp	r3, r1
    5904:	d301      	bcc.n	590a <__divsi3+0xf6>
    5906:	004b      	lsls	r3, r1, #1
    5908:	1ac0      	subs	r0, r0, r3
    590a:	4152      	adcs	r2, r2
    590c:	1a41      	subs	r1, r0, r1
    590e:	d200      	bcs.n	5912 <__divsi3+0xfe>
    5910:	4601      	mov	r1, r0
    5912:	4152      	adcs	r2, r2
    5914:	4610      	mov	r0, r2
    5916:	4770      	bx	lr
    5918:	e05d      	b.n	59d6 <__divsi3+0x1c2>
    591a:	0fca      	lsrs	r2, r1, #31
    591c:	d000      	beq.n	5920 <__divsi3+0x10c>
    591e:	4249      	negs	r1, r1
    5920:	1003      	asrs	r3, r0, #32
    5922:	d300      	bcc.n	5926 <__divsi3+0x112>
    5924:	4240      	negs	r0, r0
    5926:	4053      	eors	r3, r2
    5928:	2200      	movs	r2, #0
    592a:	469c      	mov	ip, r3
    592c:	0903      	lsrs	r3, r0, #4
    592e:	428b      	cmp	r3, r1
    5930:	d32d      	bcc.n	598e <__divsi3+0x17a>
    5932:	0a03      	lsrs	r3, r0, #8
    5934:	428b      	cmp	r3, r1
    5936:	d312      	bcc.n	595e <__divsi3+0x14a>
    5938:	22fc      	movs	r2, #252	; 0xfc
    593a:	0189      	lsls	r1, r1, #6
    593c:	ba12      	rev	r2, r2
    593e:	0a03      	lsrs	r3, r0, #8
    5940:	428b      	cmp	r3, r1
    5942:	d30c      	bcc.n	595e <__divsi3+0x14a>
    5944:	0189      	lsls	r1, r1, #6
    5946:	1192      	asrs	r2, r2, #6
    5948:	428b      	cmp	r3, r1
    594a:	d308      	bcc.n	595e <__divsi3+0x14a>
    594c:	0189      	lsls	r1, r1, #6
    594e:	1192      	asrs	r2, r2, #6
    5950:	428b      	cmp	r3, r1
    5952:	d304      	bcc.n	595e <__divsi3+0x14a>
    5954:	0189      	lsls	r1, r1, #6
    5956:	d03a      	beq.n	59ce <__divsi3+0x1ba>
    5958:	1192      	asrs	r2, r2, #6
    595a:	e000      	b.n	595e <__divsi3+0x14a>
    595c:	0989      	lsrs	r1, r1, #6
    595e:	09c3      	lsrs	r3, r0, #7
    5960:	428b      	cmp	r3, r1
    5962:	d301      	bcc.n	5968 <__divsi3+0x154>
    5964:	01cb      	lsls	r3, r1, #7
    5966:	1ac0      	subs	r0, r0, r3
    5968:	4152      	adcs	r2, r2
    596a:	0983      	lsrs	r3, r0, #6
    596c:	428b      	cmp	r3, r1
    596e:	d301      	bcc.n	5974 <__divsi3+0x160>
    5970:	018b      	lsls	r3, r1, #6
    5972:	1ac0      	subs	r0, r0, r3
    5974:	4152      	adcs	r2, r2
    5976:	0943      	lsrs	r3, r0, #5
    5978:	428b      	cmp	r3, r1
    597a:	d301      	bcc.n	5980 <__divsi3+0x16c>
    597c:	014b      	lsls	r3, r1, #5
    597e:	1ac0      	subs	r0, r0, r3
    5980:	4152      	adcs	r2, r2
    5982:	0903      	lsrs	r3, r0, #4
    5984:	428b      	cmp	r3, r1
    5986:	d301      	bcc.n	598c <__divsi3+0x178>
    5988:	010b      	lsls	r3, r1, #4
    598a:	1ac0      	subs	r0, r0, r3
    598c:	4152      	adcs	r2, r2
    598e:	08c3      	lsrs	r3, r0, #3
    5990:	428b      	cmp	r3, r1
    5992:	d301      	bcc.n	5998 <__divsi3+0x184>
    5994:	00cb      	lsls	r3, r1, #3
    5996:	1ac0      	subs	r0, r0, r3
    5998:	4152      	adcs	r2, r2
    599a:	0883      	lsrs	r3, r0, #2
    599c:	428b      	cmp	r3, r1
    599e:	d301      	bcc.n	59a4 <__divsi3+0x190>
    59a0:	008b      	lsls	r3, r1, #2
    59a2:	1ac0      	subs	r0, r0, r3
    59a4:	4152      	adcs	r2, r2
    59a6:	d2d9      	bcs.n	595c <__divsi3+0x148>
    59a8:	0843      	lsrs	r3, r0, #1
    59aa:	428b      	cmp	r3, r1
    59ac:	d301      	bcc.n	59b2 <__divsi3+0x19e>
    59ae:	004b      	lsls	r3, r1, #1
    59b0:	1ac0      	subs	r0, r0, r3
    59b2:	4152      	adcs	r2, r2
    59b4:	1a41      	subs	r1, r0, r1
    59b6:	d200      	bcs.n	59ba <__divsi3+0x1a6>
    59b8:	4601      	mov	r1, r0
    59ba:	4663      	mov	r3, ip
    59bc:	4152      	adcs	r2, r2
    59be:	105b      	asrs	r3, r3, #1
    59c0:	4610      	mov	r0, r2
    59c2:	d301      	bcc.n	59c8 <__divsi3+0x1b4>
    59c4:	4240      	negs	r0, r0
    59c6:	2b00      	cmp	r3, #0
    59c8:	d500      	bpl.n	59cc <__divsi3+0x1b8>
    59ca:	4249      	negs	r1, r1
    59cc:	4770      	bx	lr
    59ce:	4663      	mov	r3, ip
    59d0:	105b      	asrs	r3, r3, #1
    59d2:	d300      	bcc.n	59d6 <__divsi3+0x1c2>
    59d4:	4240      	negs	r0, r0
    59d6:	b501      	push	{r0, lr}
    59d8:	2000      	movs	r0, #0
    59da:	f000 f805 	bl	59e8 <__aeabi_idiv0>
    59de:	bd02      	pop	{r1, pc}

000059e0 <__aeabi_idivmod>:
    59e0:	2900      	cmp	r1, #0
    59e2:	d0f8      	beq.n	59d6 <__divsi3+0x1c2>
    59e4:	e716      	b.n	5814 <__divsi3>
    59e6:	4770      	bx	lr

000059e8 <__aeabi_idiv0>:
    59e8:	4770      	bx	lr
    59ea:	46c0      	nop			; (mov r8, r8)

000059ec <__aeabi_uldivmod>:
    59ec:	2b00      	cmp	r3, #0
    59ee:	d111      	bne.n	5a14 <__aeabi_uldivmod+0x28>
    59f0:	2a00      	cmp	r2, #0
    59f2:	d10f      	bne.n	5a14 <__aeabi_uldivmod+0x28>
    59f4:	2900      	cmp	r1, #0
    59f6:	d100      	bne.n	59fa <__aeabi_uldivmod+0xe>
    59f8:	2800      	cmp	r0, #0
    59fa:	d002      	beq.n	5a02 <__aeabi_uldivmod+0x16>
    59fc:	2100      	movs	r1, #0
    59fe:	43c9      	mvns	r1, r1
    5a00:	1c08      	adds	r0, r1, #0
    5a02:	b407      	push	{r0, r1, r2}
    5a04:	4802      	ldr	r0, [pc, #8]	; (5a10 <__aeabi_uldivmod+0x24>)
    5a06:	a102      	add	r1, pc, #8	; (adr r1, 5a10 <__aeabi_uldivmod+0x24>)
    5a08:	1840      	adds	r0, r0, r1
    5a0a:	9002      	str	r0, [sp, #8]
    5a0c:	bd03      	pop	{r0, r1, pc}
    5a0e:	46c0      	nop			; (mov r8, r8)
    5a10:	ffffffd9 	.word	0xffffffd9
    5a14:	b403      	push	{r0, r1}
    5a16:	4668      	mov	r0, sp
    5a18:	b501      	push	{r0, lr}
    5a1a:	9802      	ldr	r0, [sp, #8]
    5a1c:	f000 f858 	bl	5ad0 <__udivmoddi4>
    5a20:	9b01      	ldr	r3, [sp, #4]
    5a22:	469e      	mov	lr, r3
    5a24:	b002      	add	sp, #8
    5a26:	bc0c      	pop	{r2, r3}
    5a28:	4770      	bx	lr
    5a2a:	46c0      	nop			; (mov r8, r8)

00005a2c <__aeabi_lmul>:
    5a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a2e:	46ce      	mov	lr, r9
    5a30:	4647      	mov	r7, r8
    5a32:	0415      	lsls	r5, r2, #16
    5a34:	0c2d      	lsrs	r5, r5, #16
    5a36:	002e      	movs	r6, r5
    5a38:	b580      	push	{r7, lr}
    5a3a:	0407      	lsls	r7, r0, #16
    5a3c:	0c14      	lsrs	r4, r2, #16
    5a3e:	0c3f      	lsrs	r7, r7, #16
    5a40:	4699      	mov	r9, r3
    5a42:	0c03      	lsrs	r3, r0, #16
    5a44:	437e      	muls	r6, r7
    5a46:	435d      	muls	r5, r3
    5a48:	4367      	muls	r7, r4
    5a4a:	4363      	muls	r3, r4
    5a4c:	197f      	adds	r7, r7, r5
    5a4e:	0c34      	lsrs	r4, r6, #16
    5a50:	19e4      	adds	r4, r4, r7
    5a52:	469c      	mov	ip, r3
    5a54:	42a5      	cmp	r5, r4
    5a56:	d903      	bls.n	5a60 <__aeabi_lmul+0x34>
    5a58:	2380      	movs	r3, #128	; 0x80
    5a5a:	025b      	lsls	r3, r3, #9
    5a5c:	4698      	mov	r8, r3
    5a5e:	44c4      	add	ip, r8
    5a60:	464b      	mov	r3, r9
    5a62:	4351      	muls	r1, r2
    5a64:	4343      	muls	r3, r0
    5a66:	0436      	lsls	r6, r6, #16
    5a68:	0c36      	lsrs	r6, r6, #16
    5a6a:	0c25      	lsrs	r5, r4, #16
    5a6c:	0424      	lsls	r4, r4, #16
    5a6e:	4465      	add	r5, ip
    5a70:	19a4      	adds	r4, r4, r6
    5a72:	1859      	adds	r1, r3, r1
    5a74:	1949      	adds	r1, r1, r5
    5a76:	0020      	movs	r0, r4
    5a78:	bc0c      	pop	{r2, r3}
    5a7a:	4690      	mov	r8, r2
    5a7c:	4699      	mov	r9, r3
    5a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005a80 <__ffssi2>:
    5a80:	b510      	push	{r4, lr}
    5a82:	2300      	movs	r3, #0
    5a84:	2800      	cmp	r0, #0
    5a86:	d002      	beq.n	5a8e <__ffssi2+0xe>
    5a88:	f001 ff44 	bl	7914 <__ctzsi2>
    5a8c:	1c43      	adds	r3, r0, #1
    5a8e:	0018      	movs	r0, r3
    5a90:	bd10      	pop	{r4, pc}
    5a92:	46c0      	nop			; (mov r8, r8)

00005a94 <__aeabi_d2uiz>:
    5a94:	b570      	push	{r4, r5, r6, lr}
    5a96:	2200      	movs	r2, #0
    5a98:	4b0c      	ldr	r3, [pc, #48]	; (5acc <__aeabi_d2uiz+0x38>)
    5a9a:	0004      	movs	r4, r0
    5a9c:	000d      	movs	r5, r1
    5a9e:	f001 ff05 	bl	78ac <__aeabi_dcmpge>
    5aa2:	2800      	cmp	r0, #0
    5aa4:	d104      	bne.n	5ab0 <__aeabi_d2uiz+0x1c>
    5aa6:	0020      	movs	r0, r4
    5aa8:	0029      	movs	r1, r5
    5aaa:	f001 fdcb 	bl	7644 <__aeabi_d2iz>
    5aae:	bd70      	pop	{r4, r5, r6, pc}
    5ab0:	4b06      	ldr	r3, [pc, #24]	; (5acc <__aeabi_d2uiz+0x38>)
    5ab2:	2200      	movs	r2, #0
    5ab4:	0020      	movs	r0, r4
    5ab6:	0029      	movs	r1, r5
    5ab8:	f001 faae 	bl	7018 <__aeabi_dsub>
    5abc:	f001 fdc2 	bl	7644 <__aeabi_d2iz>
    5ac0:	2380      	movs	r3, #128	; 0x80
    5ac2:	061b      	lsls	r3, r3, #24
    5ac4:	469c      	mov	ip, r3
    5ac6:	4460      	add	r0, ip
    5ac8:	e7f1      	b.n	5aae <__aeabi_d2uiz+0x1a>
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	41e00000 	.word	0x41e00000

00005ad0 <__udivmoddi4>:
    5ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ad2:	4657      	mov	r7, sl
    5ad4:	464e      	mov	r6, r9
    5ad6:	4645      	mov	r5, r8
    5ad8:	46de      	mov	lr, fp
    5ada:	b5e0      	push	{r5, r6, r7, lr}
    5adc:	0004      	movs	r4, r0
    5ade:	b083      	sub	sp, #12
    5ae0:	000d      	movs	r5, r1
    5ae2:	4692      	mov	sl, r2
    5ae4:	4699      	mov	r9, r3
    5ae6:	428b      	cmp	r3, r1
    5ae8:	d82f      	bhi.n	5b4a <__udivmoddi4+0x7a>
    5aea:	d02c      	beq.n	5b46 <__udivmoddi4+0x76>
    5aec:	4649      	mov	r1, r9
    5aee:	4650      	mov	r0, sl
    5af0:	f001 ff04 	bl	78fc <__clzdi2>
    5af4:	0029      	movs	r1, r5
    5af6:	0006      	movs	r6, r0
    5af8:	0020      	movs	r0, r4
    5afa:	f001 feff 	bl	78fc <__clzdi2>
    5afe:	1a33      	subs	r3, r6, r0
    5b00:	4698      	mov	r8, r3
    5b02:	3b20      	subs	r3, #32
    5b04:	469b      	mov	fp, r3
    5b06:	d500      	bpl.n	5b0a <__udivmoddi4+0x3a>
    5b08:	e074      	b.n	5bf4 <__udivmoddi4+0x124>
    5b0a:	4653      	mov	r3, sl
    5b0c:	465a      	mov	r2, fp
    5b0e:	4093      	lsls	r3, r2
    5b10:	001f      	movs	r7, r3
    5b12:	4653      	mov	r3, sl
    5b14:	4642      	mov	r2, r8
    5b16:	4093      	lsls	r3, r2
    5b18:	001e      	movs	r6, r3
    5b1a:	42af      	cmp	r7, r5
    5b1c:	d829      	bhi.n	5b72 <__udivmoddi4+0xa2>
    5b1e:	d026      	beq.n	5b6e <__udivmoddi4+0x9e>
    5b20:	465b      	mov	r3, fp
    5b22:	1ba4      	subs	r4, r4, r6
    5b24:	41bd      	sbcs	r5, r7
    5b26:	2b00      	cmp	r3, #0
    5b28:	da00      	bge.n	5b2c <__udivmoddi4+0x5c>
    5b2a:	e079      	b.n	5c20 <__udivmoddi4+0x150>
    5b2c:	2200      	movs	r2, #0
    5b2e:	2300      	movs	r3, #0
    5b30:	9200      	str	r2, [sp, #0]
    5b32:	9301      	str	r3, [sp, #4]
    5b34:	2301      	movs	r3, #1
    5b36:	465a      	mov	r2, fp
    5b38:	4093      	lsls	r3, r2
    5b3a:	9301      	str	r3, [sp, #4]
    5b3c:	2301      	movs	r3, #1
    5b3e:	4642      	mov	r2, r8
    5b40:	4093      	lsls	r3, r2
    5b42:	9300      	str	r3, [sp, #0]
    5b44:	e019      	b.n	5b7a <__udivmoddi4+0xaa>
    5b46:	4282      	cmp	r2, r0
    5b48:	d9d0      	bls.n	5aec <__udivmoddi4+0x1c>
    5b4a:	2200      	movs	r2, #0
    5b4c:	2300      	movs	r3, #0
    5b4e:	9200      	str	r2, [sp, #0]
    5b50:	9301      	str	r3, [sp, #4]
    5b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5b54:	2b00      	cmp	r3, #0
    5b56:	d001      	beq.n	5b5c <__udivmoddi4+0x8c>
    5b58:	601c      	str	r4, [r3, #0]
    5b5a:	605d      	str	r5, [r3, #4]
    5b5c:	9800      	ldr	r0, [sp, #0]
    5b5e:	9901      	ldr	r1, [sp, #4]
    5b60:	b003      	add	sp, #12
    5b62:	bc3c      	pop	{r2, r3, r4, r5}
    5b64:	4690      	mov	r8, r2
    5b66:	4699      	mov	r9, r3
    5b68:	46a2      	mov	sl, r4
    5b6a:	46ab      	mov	fp, r5
    5b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b6e:	42a3      	cmp	r3, r4
    5b70:	d9d6      	bls.n	5b20 <__udivmoddi4+0x50>
    5b72:	2200      	movs	r2, #0
    5b74:	2300      	movs	r3, #0
    5b76:	9200      	str	r2, [sp, #0]
    5b78:	9301      	str	r3, [sp, #4]
    5b7a:	4643      	mov	r3, r8
    5b7c:	2b00      	cmp	r3, #0
    5b7e:	d0e8      	beq.n	5b52 <__udivmoddi4+0x82>
    5b80:	07fb      	lsls	r3, r7, #31
    5b82:	0872      	lsrs	r2, r6, #1
    5b84:	431a      	orrs	r2, r3
    5b86:	4646      	mov	r6, r8
    5b88:	087b      	lsrs	r3, r7, #1
    5b8a:	e00e      	b.n	5baa <__udivmoddi4+0xda>
    5b8c:	42ab      	cmp	r3, r5
    5b8e:	d101      	bne.n	5b94 <__udivmoddi4+0xc4>
    5b90:	42a2      	cmp	r2, r4
    5b92:	d80c      	bhi.n	5bae <__udivmoddi4+0xde>
    5b94:	1aa4      	subs	r4, r4, r2
    5b96:	419d      	sbcs	r5, r3
    5b98:	2001      	movs	r0, #1
    5b9a:	1924      	adds	r4, r4, r4
    5b9c:	416d      	adcs	r5, r5
    5b9e:	2100      	movs	r1, #0
    5ba0:	3e01      	subs	r6, #1
    5ba2:	1824      	adds	r4, r4, r0
    5ba4:	414d      	adcs	r5, r1
    5ba6:	2e00      	cmp	r6, #0
    5ba8:	d006      	beq.n	5bb8 <__udivmoddi4+0xe8>
    5baa:	42ab      	cmp	r3, r5
    5bac:	d9ee      	bls.n	5b8c <__udivmoddi4+0xbc>
    5bae:	3e01      	subs	r6, #1
    5bb0:	1924      	adds	r4, r4, r4
    5bb2:	416d      	adcs	r5, r5
    5bb4:	2e00      	cmp	r6, #0
    5bb6:	d1f8      	bne.n	5baa <__udivmoddi4+0xda>
    5bb8:	465b      	mov	r3, fp
    5bba:	9800      	ldr	r0, [sp, #0]
    5bbc:	9901      	ldr	r1, [sp, #4]
    5bbe:	1900      	adds	r0, r0, r4
    5bc0:	4169      	adcs	r1, r5
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	db22      	blt.n	5c0c <__udivmoddi4+0x13c>
    5bc6:	002b      	movs	r3, r5
    5bc8:	465a      	mov	r2, fp
    5bca:	40d3      	lsrs	r3, r2
    5bcc:	002a      	movs	r2, r5
    5bce:	4644      	mov	r4, r8
    5bd0:	40e2      	lsrs	r2, r4
    5bd2:	001c      	movs	r4, r3
    5bd4:	465b      	mov	r3, fp
    5bd6:	0015      	movs	r5, r2
    5bd8:	2b00      	cmp	r3, #0
    5bda:	db2c      	blt.n	5c36 <__udivmoddi4+0x166>
    5bdc:	0026      	movs	r6, r4
    5bde:	409e      	lsls	r6, r3
    5be0:	0033      	movs	r3, r6
    5be2:	0026      	movs	r6, r4
    5be4:	4647      	mov	r7, r8
    5be6:	40be      	lsls	r6, r7
    5be8:	0032      	movs	r2, r6
    5bea:	1a80      	subs	r0, r0, r2
    5bec:	4199      	sbcs	r1, r3
    5bee:	9000      	str	r0, [sp, #0]
    5bf0:	9101      	str	r1, [sp, #4]
    5bf2:	e7ae      	b.n	5b52 <__udivmoddi4+0x82>
    5bf4:	4642      	mov	r2, r8
    5bf6:	2320      	movs	r3, #32
    5bf8:	1a9b      	subs	r3, r3, r2
    5bfa:	4652      	mov	r2, sl
    5bfc:	40da      	lsrs	r2, r3
    5bfe:	4641      	mov	r1, r8
    5c00:	0013      	movs	r3, r2
    5c02:	464a      	mov	r2, r9
    5c04:	408a      	lsls	r2, r1
    5c06:	0017      	movs	r7, r2
    5c08:	431f      	orrs	r7, r3
    5c0a:	e782      	b.n	5b12 <__udivmoddi4+0x42>
    5c0c:	4642      	mov	r2, r8
    5c0e:	2320      	movs	r3, #32
    5c10:	1a9b      	subs	r3, r3, r2
    5c12:	002a      	movs	r2, r5
    5c14:	4646      	mov	r6, r8
    5c16:	409a      	lsls	r2, r3
    5c18:	0023      	movs	r3, r4
    5c1a:	40f3      	lsrs	r3, r6
    5c1c:	4313      	orrs	r3, r2
    5c1e:	e7d5      	b.n	5bcc <__udivmoddi4+0xfc>
    5c20:	4642      	mov	r2, r8
    5c22:	2320      	movs	r3, #32
    5c24:	2100      	movs	r1, #0
    5c26:	1a9b      	subs	r3, r3, r2
    5c28:	2200      	movs	r2, #0
    5c2a:	9100      	str	r1, [sp, #0]
    5c2c:	9201      	str	r2, [sp, #4]
    5c2e:	2201      	movs	r2, #1
    5c30:	40da      	lsrs	r2, r3
    5c32:	9201      	str	r2, [sp, #4]
    5c34:	e782      	b.n	5b3c <__udivmoddi4+0x6c>
    5c36:	4642      	mov	r2, r8
    5c38:	2320      	movs	r3, #32
    5c3a:	0026      	movs	r6, r4
    5c3c:	1a9b      	subs	r3, r3, r2
    5c3e:	40de      	lsrs	r6, r3
    5c40:	002f      	movs	r7, r5
    5c42:	46b4      	mov	ip, r6
    5c44:	4097      	lsls	r7, r2
    5c46:	4666      	mov	r6, ip
    5c48:	003b      	movs	r3, r7
    5c4a:	4333      	orrs	r3, r6
    5c4c:	e7c9      	b.n	5be2 <__udivmoddi4+0x112>
    5c4e:	46c0      	nop			; (mov r8, r8)

00005c50 <__aeabi_fmul>:
    5c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5c52:	4657      	mov	r7, sl
    5c54:	464e      	mov	r6, r9
    5c56:	4645      	mov	r5, r8
    5c58:	46de      	mov	lr, fp
    5c5a:	b5e0      	push	{r5, r6, r7, lr}
    5c5c:	0247      	lsls	r7, r0, #9
    5c5e:	0046      	lsls	r6, r0, #1
    5c60:	4688      	mov	r8, r1
    5c62:	0a7f      	lsrs	r7, r7, #9
    5c64:	0e36      	lsrs	r6, r6, #24
    5c66:	0fc4      	lsrs	r4, r0, #31
    5c68:	2e00      	cmp	r6, #0
    5c6a:	d047      	beq.n	5cfc <__aeabi_fmul+0xac>
    5c6c:	2eff      	cmp	r6, #255	; 0xff
    5c6e:	d024      	beq.n	5cba <__aeabi_fmul+0x6a>
    5c70:	00fb      	lsls	r3, r7, #3
    5c72:	2780      	movs	r7, #128	; 0x80
    5c74:	04ff      	lsls	r7, r7, #19
    5c76:	431f      	orrs	r7, r3
    5c78:	2300      	movs	r3, #0
    5c7a:	4699      	mov	r9, r3
    5c7c:	469a      	mov	sl, r3
    5c7e:	3e7f      	subs	r6, #127	; 0x7f
    5c80:	4643      	mov	r3, r8
    5c82:	025d      	lsls	r5, r3, #9
    5c84:	0058      	lsls	r0, r3, #1
    5c86:	0fdb      	lsrs	r3, r3, #31
    5c88:	0a6d      	lsrs	r5, r5, #9
    5c8a:	0e00      	lsrs	r0, r0, #24
    5c8c:	4698      	mov	r8, r3
    5c8e:	d043      	beq.n	5d18 <__aeabi_fmul+0xc8>
    5c90:	28ff      	cmp	r0, #255	; 0xff
    5c92:	d03b      	beq.n	5d0c <__aeabi_fmul+0xbc>
    5c94:	00eb      	lsls	r3, r5, #3
    5c96:	2580      	movs	r5, #128	; 0x80
    5c98:	2200      	movs	r2, #0
    5c9a:	04ed      	lsls	r5, r5, #19
    5c9c:	431d      	orrs	r5, r3
    5c9e:	387f      	subs	r0, #127	; 0x7f
    5ca0:	1836      	adds	r6, r6, r0
    5ca2:	1c73      	adds	r3, r6, #1
    5ca4:	4641      	mov	r1, r8
    5ca6:	469b      	mov	fp, r3
    5ca8:	464b      	mov	r3, r9
    5caa:	4061      	eors	r1, r4
    5cac:	4313      	orrs	r3, r2
    5cae:	2b0f      	cmp	r3, #15
    5cb0:	d864      	bhi.n	5d7c <__aeabi_fmul+0x12c>
    5cb2:	4875      	ldr	r0, [pc, #468]	; (5e88 <__aeabi_fmul+0x238>)
    5cb4:	009b      	lsls	r3, r3, #2
    5cb6:	58c3      	ldr	r3, [r0, r3]
    5cb8:	469f      	mov	pc, r3
    5cba:	2f00      	cmp	r7, #0
    5cbc:	d142      	bne.n	5d44 <__aeabi_fmul+0xf4>
    5cbe:	2308      	movs	r3, #8
    5cc0:	4699      	mov	r9, r3
    5cc2:	3b06      	subs	r3, #6
    5cc4:	26ff      	movs	r6, #255	; 0xff
    5cc6:	469a      	mov	sl, r3
    5cc8:	e7da      	b.n	5c80 <__aeabi_fmul+0x30>
    5cca:	4641      	mov	r1, r8
    5ccc:	2a02      	cmp	r2, #2
    5cce:	d028      	beq.n	5d22 <__aeabi_fmul+0xd2>
    5cd0:	2a03      	cmp	r2, #3
    5cd2:	d100      	bne.n	5cd6 <__aeabi_fmul+0x86>
    5cd4:	e0ce      	b.n	5e74 <__aeabi_fmul+0x224>
    5cd6:	2a01      	cmp	r2, #1
    5cd8:	d000      	beq.n	5cdc <__aeabi_fmul+0x8c>
    5cda:	e0ac      	b.n	5e36 <__aeabi_fmul+0x1e6>
    5cdc:	4011      	ands	r1, r2
    5cde:	2000      	movs	r0, #0
    5ce0:	2200      	movs	r2, #0
    5ce2:	b2cc      	uxtb	r4, r1
    5ce4:	0240      	lsls	r0, r0, #9
    5ce6:	05d2      	lsls	r2, r2, #23
    5ce8:	0a40      	lsrs	r0, r0, #9
    5cea:	07e4      	lsls	r4, r4, #31
    5cec:	4310      	orrs	r0, r2
    5cee:	4320      	orrs	r0, r4
    5cf0:	bc3c      	pop	{r2, r3, r4, r5}
    5cf2:	4690      	mov	r8, r2
    5cf4:	4699      	mov	r9, r3
    5cf6:	46a2      	mov	sl, r4
    5cf8:	46ab      	mov	fp, r5
    5cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5cfc:	2f00      	cmp	r7, #0
    5cfe:	d115      	bne.n	5d2c <__aeabi_fmul+0xdc>
    5d00:	2304      	movs	r3, #4
    5d02:	4699      	mov	r9, r3
    5d04:	3b03      	subs	r3, #3
    5d06:	2600      	movs	r6, #0
    5d08:	469a      	mov	sl, r3
    5d0a:	e7b9      	b.n	5c80 <__aeabi_fmul+0x30>
    5d0c:	20ff      	movs	r0, #255	; 0xff
    5d0e:	2202      	movs	r2, #2
    5d10:	2d00      	cmp	r5, #0
    5d12:	d0c5      	beq.n	5ca0 <__aeabi_fmul+0x50>
    5d14:	2203      	movs	r2, #3
    5d16:	e7c3      	b.n	5ca0 <__aeabi_fmul+0x50>
    5d18:	2d00      	cmp	r5, #0
    5d1a:	d119      	bne.n	5d50 <__aeabi_fmul+0x100>
    5d1c:	2000      	movs	r0, #0
    5d1e:	2201      	movs	r2, #1
    5d20:	e7be      	b.n	5ca0 <__aeabi_fmul+0x50>
    5d22:	2401      	movs	r4, #1
    5d24:	22ff      	movs	r2, #255	; 0xff
    5d26:	400c      	ands	r4, r1
    5d28:	2000      	movs	r0, #0
    5d2a:	e7db      	b.n	5ce4 <__aeabi_fmul+0x94>
    5d2c:	0038      	movs	r0, r7
    5d2e:	f001 fdc7 	bl	78c0 <__clzsi2>
    5d32:	2676      	movs	r6, #118	; 0x76
    5d34:	1f43      	subs	r3, r0, #5
    5d36:	409f      	lsls	r7, r3
    5d38:	2300      	movs	r3, #0
    5d3a:	4276      	negs	r6, r6
    5d3c:	1a36      	subs	r6, r6, r0
    5d3e:	4699      	mov	r9, r3
    5d40:	469a      	mov	sl, r3
    5d42:	e79d      	b.n	5c80 <__aeabi_fmul+0x30>
    5d44:	230c      	movs	r3, #12
    5d46:	4699      	mov	r9, r3
    5d48:	3b09      	subs	r3, #9
    5d4a:	26ff      	movs	r6, #255	; 0xff
    5d4c:	469a      	mov	sl, r3
    5d4e:	e797      	b.n	5c80 <__aeabi_fmul+0x30>
    5d50:	0028      	movs	r0, r5
    5d52:	f001 fdb5 	bl	78c0 <__clzsi2>
    5d56:	1f43      	subs	r3, r0, #5
    5d58:	409d      	lsls	r5, r3
    5d5a:	2376      	movs	r3, #118	; 0x76
    5d5c:	425b      	negs	r3, r3
    5d5e:	1a18      	subs	r0, r3, r0
    5d60:	2200      	movs	r2, #0
    5d62:	e79d      	b.n	5ca0 <__aeabi_fmul+0x50>
    5d64:	2080      	movs	r0, #128	; 0x80
    5d66:	2400      	movs	r4, #0
    5d68:	03c0      	lsls	r0, r0, #15
    5d6a:	22ff      	movs	r2, #255	; 0xff
    5d6c:	e7ba      	b.n	5ce4 <__aeabi_fmul+0x94>
    5d6e:	003d      	movs	r5, r7
    5d70:	4652      	mov	r2, sl
    5d72:	e7ab      	b.n	5ccc <__aeabi_fmul+0x7c>
    5d74:	003d      	movs	r5, r7
    5d76:	0021      	movs	r1, r4
    5d78:	4652      	mov	r2, sl
    5d7a:	e7a7      	b.n	5ccc <__aeabi_fmul+0x7c>
    5d7c:	0c3b      	lsrs	r3, r7, #16
    5d7e:	469c      	mov	ip, r3
    5d80:	042a      	lsls	r2, r5, #16
    5d82:	0c12      	lsrs	r2, r2, #16
    5d84:	0c2b      	lsrs	r3, r5, #16
    5d86:	0014      	movs	r4, r2
    5d88:	4660      	mov	r0, ip
    5d8a:	4665      	mov	r5, ip
    5d8c:	043f      	lsls	r7, r7, #16
    5d8e:	0c3f      	lsrs	r7, r7, #16
    5d90:	437c      	muls	r4, r7
    5d92:	4342      	muls	r2, r0
    5d94:	435d      	muls	r5, r3
    5d96:	437b      	muls	r3, r7
    5d98:	0c27      	lsrs	r7, r4, #16
    5d9a:	189b      	adds	r3, r3, r2
    5d9c:	18ff      	adds	r7, r7, r3
    5d9e:	42ba      	cmp	r2, r7
    5da0:	d903      	bls.n	5daa <__aeabi_fmul+0x15a>
    5da2:	2380      	movs	r3, #128	; 0x80
    5da4:	025b      	lsls	r3, r3, #9
    5da6:	469c      	mov	ip, r3
    5da8:	4465      	add	r5, ip
    5daa:	0424      	lsls	r4, r4, #16
    5dac:	043a      	lsls	r2, r7, #16
    5dae:	0c24      	lsrs	r4, r4, #16
    5db0:	1912      	adds	r2, r2, r4
    5db2:	0193      	lsls	r3, r2, #6
    5db4:	1e5c      	subs	r4, r3, #1
    5db6:	41a3      	sbcs	r3, r4
    5db8:	0c3f      	lsrs	r7, r7, #16
    5dba:	0e92      	lsrs	r2, r2, #26
    5dbc:	197d      	adds	r5, r7, r5
    5dbe:	431a      	orrs	r2, r3
    5dc0:	01ad      	lsls	r5, r5, #6
    5dc2:	4315      	orrs	r5, r2
    5dc4:	012b      	lsls	r3, r5, #4
    5dc6:	d504      	bpl.n	5dd2 <__aeabi_fmul+0x182>
    5dc8:	2301      	movs	r3, #1
    5dca:	465e      	mov	r6, fp
    5dcc:	086a      	lsrs	r2, r5, #1
    5dce:	401d      	ands	r5, r3
    5dd0:	4315      	orrs	r5, r2
    5dd2:	0032      	movs	r2, r6
    5dd4:	327f      	adds	r2, #127	; 0x7f
    5dd6:	2a00      	cmp	r2, #0
    5dd8:	dd25      	ble.n	5e26 <__aeabi_fmul+0x1d6>
    5dda:	076b      	lsls	r3, r5, #29
    5ddc:	d004      	beq.n	5de8 <__aeabi_fmul+0x198>
    5dde:	230f      	movs	r3, #15
    5de0:	402b      	ands	r3, r5
    5de2:	2b04      	cmp	r3, #4
    5de4:	d000      	beq.n	5de8 <__aeabi_fmul+0x198>
    5de6:	3504      	adds	r5, #4
    5de8:	012b      	lsls	r3, r5, #4
    5dea:	d503      	bpl.n	5df4 <__aeabi_fmul+0x1a4>
    5dec:	0032      	movs	r2, r6
    5dee:	4b27      	ldr	r3, [pc, #156]	; (5e8c <__aeabi_fmul+0x23c>)
    5df0:	3280      	adds	r2, #128	; 0x80
    5df2:	401d      	ands	r5, r3
    5df4:	2afe      	cmp	r2, #254	; 0xfe
    5df6:	dc94      	bgt.n	5d22 <__aeabi_fmul+0xd2>
    5df8:	2401      	movs	r4, #1
    5dfa:	01a8      	lsls	r0, r5, #6
    5dfc:	0a40      	lsrs	r0, r0, #9
    5dfe:	b2d2      	uxtb	r2, r2
    5e00:	400c      	ands	r4, r1
    5e02:	e76f      	b.n	5ce4 <__aeabi_fmul+0x94>
    5e04:	2080      	movs	r0, #128	; 0x80
    5e06:	03c0      	lsls	r0, r0, #15
    5e08:	4207      	tst	r7, r0
    5e0a:	d007      	beq.n	5e1c <__aeabi_fmul+0x1cc>
    5e0c:	4205      	tst	r5, r0
    5e0e:	d105      	bne.n	5e1c <__aeabi_fmul+0x1cc>
    5e10:	4328      	orrs	r0, r5
    5e12:	0240      	lsls	r0, r0, #9
    5e14:	0a40      	lsrs	r0, r0, #9
    5e16:	4644      	mov	r4, r8
    5e18:	22ff      	movs	r2, #255	; 0xff
    5e1a:	e763      	b.n	5ce4 <__aeabi_fmul+0x94>
    5e1c:	4338      	orrs	r0, r7
    5e1e:	0240      	lsls	r0, r0, #9
    5e20:	0a40      	lsrs	r0, r0, #9
    5e22:	22ff      	movs	r2, #255	; 0xff
    5e24:	e75e      	b.n	5ce4 <__aeabi_fmul+0x94>
    5e26:	2401      	movs	r4, #1
    5e28:	1aa3      	subs	r3, r4, r2
    5e2a:	2b1b      	cmp	r3, #27
    5e2c:	dd05      	ble.n	5e3a <__aeabi_fmul+0x1ea>
    5e2e:	400c      	ands	r4, r1
    5e30:	2200      	movs	r2, #0
    5e32:	2000      	movs	r0, #0
    5e34:	e756      	b.n	5ce4 <__aeabi_fmul+0x94>
    5e36:	465e      	mov	r6, fp
    5e38:	e7cb      	b.n	5dd2 <__aeabi_fmul+0x182>
    5e3a:	002a      	movs	r2, r5
    5e3c:	2020      	movs	r0, #32
    5e3e:	40da      	lsrs	r2, r3
    5e40:	1ac3      	subs	r3, r0, r3
    5e42:	409d      	lsls	r5, r3
    5e44:	002b      	movs	r3, r5
    5e46:	1e5d      	subs	r5, r3, #1
    5e48:	41ab      	sbcs	r3, r5
    5e4a:	4313      	orrs	r3, r2
    5e4c:	075a      	lsls	r2, r3, #29
    5e4e:	d004      	beq.n	5e5a <__aeabi_fmul+0x20a>
    5e50:	220f      	movs	r2, #15
    5e52:	401a      	ands	r2, r3
    5e54:	2a04      	cmp	r2, #4
    5e56:	d000      	beq.n	5e5a <__aeabi_fmul+0x20a>
    5e58:	3304      	adds	r3, #4
    5e5a:	015a      	lsls	r2, r3, #5
    5e5c:	d504      	bpl.n	5e68 <__aeabi_fmul+0x218>
    5e5e:	2401      	movs	r4, #1
    5e60:	2201      	movs	r2, #1
    5e62:	400c      	ands	r4, r1
    5e64:	2000      	movs	r0, #0
    5e66:	e73d      	b.n	5ce4 <__aeabi_fmul+0x94>
    5e68:	2401      	movs	r4, #1
    5e6a:	019b      	lsls	r3, r3, #6
    5e6c:	0a58      	lsrs	r0, r3, #9
    5e6e:	400c      	ands	r4, r1
    5e70:	2200      	movs	r2, #0
    5e72:	e737      	b.n	5ce4 <__aeabi_fmul+0x94>
    5e74:	2080      	movs	r0, #128	; 0x80
    5e76:	2401      	movs	r4, #1
    5e78:	03c0      	lsls	r0, r0, #15
    5e7a:	4328      	orrs	r0, r5
    5e7c:	0240      	lsls	r0, r0, #9
    5e7e:	0a40      	lsrs	r0, r0, #9
    5e80:	400c      	ands	r4, r1
    5e82:	22ff      	movs	r2, #255	; 0xff
    5e84:	e72e      	b.n	5ce4 <__aeabi_fmul+0x94>
    5e86:	46c0      	nop			; (mov r8, r8)
    5e88:	00011c9c 	.word	0x00011c9c
    5e8c:	f7ffffff 	.word	0xf7ffffff

00005e90 <__aeabi_dadd>:
    5e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e92:	4645      	mov	r5, r8
    5e94:	46de      	mov	lr, fp
    5e96:	4657      	mov	r7, sl
    5e98:	464e      	mov	r6, r9
    5e9a:	030c      	lsls	r4, r1, #12
    5e9c:	b5e0      	push	{r5, r6, r7, lr}
    5e9e:	004e      	lsls	r6, r1, #1
    5ea0:	0fc9      	lsrs	r1, r1, #31
    5ea2:	4688      	mov	r8, r1
    5ea4:	000d      	movs	r5, r1
    5ea6:	0a61      	lsrs	r1, r4, #9
    5ea8:	0f44      	lsrs	r4, r0, #29
    5eaa:	430c      	orrs	r4, r1
    5eac:	00c7      	lsls	r7, r0, #3
    5eae:	0319      	lsls	r1, r3, #12
    5eb0:	0058      	lsls	r0, r3, #1
    5eb2:	0fdb      	lsrs	r3, r3, #31
    5eb4:	469b      	mov	fp, r3
    5eb6:	0a4b      	lsrs	r3, r1, #9
    5eb8:	0f51      	lsrs	r1, r2, #29
    5eba:	430b      	orrs	r3, r1
    5ebc:	0d76      	lsrs	r6, r6, #21
    5ebe:	0d40      	lsrs	r0, r0, #21
    5ec0:	0019      	movs	r1, r3
    5ec2:	00d2      	lsls	r2, r2, #3
    5ec4:	45d8      	cmp	r8, fp
    5ec6:	d100      	bne.n	5eca <__aeabi_dadd+0x3a>
    5ec8:	e0ae      	b.n	6028 <__aeabi_dadd+0x198>
    5eca:	1a35      	subs	r5, r6, r0
    5ecc:	2d00      	cmp	r5, #0
    5ece:	dc00      	bgt.n	5ed2 <__aeabi_dadd+0x42>
    5ed0:	e0f6      	b.n	60c0 <__aeabi_dadd+0x230>
    5ed2:	2800      	cmp	r0, #0
    5ed4:	d10f      	bne.n	5ef6 <__aeabi_dadd+0x66>
    5ed6:	4313      	orrs	r3, r2
    5ed8:	d100      	bne.n	5edc <__aeabi_dadd+0x4c>
    5eda:	e0db      	b.n	6094 <__aeabi_dadd+0x204>
    5edc:	1e6b      	subs	r3, r5, #1
    5ede:	2b00      	cmp	r3, #0
    5ee0:	d000      	beq.n	5ee4 <__aeabi_dadd+0x54>
    5ee2:	e137      	b.n	6154 <__aeabi_dadd+0x2c4>
    5ee4:	1aba      	subs	r2, r7, r2
    5ee6:	4297      	cmp	r7, r2
    5ee8:	41bf      	sbcs	r7, r7
    5eea:	1a64      	subs	r4, r4, r1
    5eec:	427f      	negs	r7, r7
    5eee:	1be4      	subs	r4, r4, r7
    5ef0:	2601      	movs	r6, #1
    5ef2:	0017      	movs	r7, r2
    5ef4:	e024      	b.n	5f40 <__aeabi_dadd+0xb0>
    5ef6:	4bc6      	ldr	r3, [pc, #792]	; (6210 <__aeabi_dadd+0x380>)
    5ef8:	429e      	cmp	r6, r3
    5efa:	d04d      	beq.n	5f98 <__aeabi_dadd+0x108>
    5efc:	2380      	movs	r3, #128	; 0x80
    5efe:	041b      	lsls	r3, r3, #16
    5f00:	4319      	orrs	r1, r3
    5f02:	2d38      	cmp	r5, #56	; 0x38
    5f04:	dd00      	ble.n	5f08 <__aeabi_dadd+0x78>
    5f06:	e107      	b.n	6118 <__aeabi_dadd+0x288>
    5f08:	2d1f      	cmp	r5, #31
    5f0a:	dd00      	ble.n	5f0e <__aeabi_dadd+0x7e>
    5f0c:	e138      	b.n	6180 <__aeabi_dadd+0x2f0>
    5f0e:	2020      	movs	r0, #32
    5f10:	1b43      	subs	r3, r0, r5
    5f12:	469a      	mov	sl, r3
    5f14:	000b      	movs	r3, r1
    5f16:	4650      	mov	r0, sl
    5f18:	4083      	lsls	r3, r0
    5f1a:	4699      	mov	r9, r3
    5f1c:	0013      	movs	r3, r2
    5f1e:	4648      	mov	r0, r9
    5f20:	40eb      	lsrs	r3, r5
    5f22:	4318      	orrs	r0, r3
    5f24:	0003      	movs	r3, r0
    5f26:	4650      	mov	r0, sl
    5f28:	4082      	lsls	r2, r0
    5f2a:	1e50      	subs	r0, r2, #1
    5f2c:	4182      	sbcs	r2, r0
    5f2e:	40e9      	lsrs	r1, r5
    5f30:	431a      	orrs	r2, r3
    5f32:	1aba      	subs	r2, r7, r2
    5f34:	1a61      	subs	r1, r4, r1
    5f36:	4297      	cmp	r7, r2
    5f38:	41a4      	sbcs	r4, r4
    5f3a:	0017      	movs	r7, r2
    5f3c:	4264      	negs	r4, r4
    5f3e:	1b0c      	subs	r4, r1, r4
    5f40:	0223      	lsls	r3, r4, #8
    5f42:	d562      	bpl.n	600a <__aeabi_dadd+0x17a>
    5f44:	0264      	lsls	r4, r4, #9
    5f46:	0a65      	lsrs	r5, r4, #9
    5f48:	2d00      	cmp	r5, #0
    5f4a:	d100      	bne.n	5f4e <__aeabi_dadd+0xbe>
    5f4c:	e0df      	b.n	610e <__aeabi_dadd+0x27e>
    5f4e:	0028      	movs	r0, r5
    5f50:	f001 fcb6 	bl	78c0 <__clzsi2>
    5f54:	0003      	movs	r3, r0
    5f56:	3b08      	subs	r3, #8
    5f58:	2b1f      	cmp	r3, #31
    5f5a:	dd00      	ble.n	5f5e <__aeabi_dadd+0xce>
    5f5c:	e0d2      	b.n	6104 <__aeabi_dadd+0x274>
    5f5e:	2220      	movs	r2, #32
    5f60:	003c      	movs	r4, r7
    5f62:	1ad2      	subs	r2, r2, r3
    5f64:	409d      	lsls	r5, r3
    5f66:	40d4      	lsrs	r4, r2
    5f68:	409f      	lsls	r7, r3
    5f6a:	4325      	orrs	r5, r4
    5f6c:	429e      	cmp	r6, r3
    5f6e:	dd00      	ble.n	5f72 <__aeabi_dadd+0xe2>
    5f70:	e0c4      	b.n	60fc <__aeabi_dadd+0x26c>
    5f72:	1b9e      	subs	r6, r3, r6
    5f74:	1c73      	adds	r3, r6, #1
    5f76:	2b1f      	cmp	r3, #31
    5f78:	dd00      	ble.n	5f7c <__aeabi_dadd+0xec>
    5f7a:	e0f1      	b.n	6160 <__aeabi_dadd+0x2d0>
    5f7c:	2220      	movs	r2, #32
    5f7e:	0038      	movs	r0, r7
    5f80:	0029      	movs	r1, r5
    5f82:	1ad2      	subs	r2, r2, r3
    5f84:	40d8      	lsrs	r0, r3
    5f86:	4091      	lsls	r1, r2
    5f88:	4097      	lsls	r7, r2
    5f8a:	002c      	movs	r4, r5
    5f8c:	4301      	orrs	r1, r0
    5f8e:	1e78      	subs	r0, r7, #1
    5f90:	4187      	sbcs	r7, r0
    5f92:	40dc      	lsrs	r4, r3
    5f94:	2600      	movs	r6, #0
    5f96:	430f      	orrs	r7, r1
    5f98:	077b      	lsls	r3, r7, #29
    5f9a:	d009      	beq.n	5fb0 <__aeabi_dadd+0x120>
    5f9c:	230f      	movs	r3, #15
    5f9e:	403b      	ands	r3, r7
    5fa0:	2b04      	cmp	r3, #4
    5fa2:	d005      	beq.n	5fb0 <__aeabi_dadd+0x120>
    5fa4:	1d3b      	adds	r3, r7, #4
    5fa6:	42bb      	cmp	r3, r7
    5fa8:	41bf      	sbcs	r7, r7
    5faa:	427f      	negs	r7, r7
    5fac:	19e4      	adds	r4, r4, r7
    5fae:	001f      	movs	r7, r3
    5fb0:	0223      	lsls	r3, r4, #8
    5fb2:	d52c      	bpl.n	600e <__aeabi_dadd+0x17e>
    5fb4:	4b96      	ldr	r3, [pc, #600]	; (6210 <__aeabi_dadd+0x380>)
    5fb6:	3601      	adds	r6, #1
    5fb8:	429e      	cmp	r6, r3
    5fba:	d100      	bne.n	5fbe <__aeabi_dadd+0x12e>
    5fbc:	e09a      	b.n	60f4 <__aeabi_dadd+0x264>
    5fbe:	4645      	mov	r5, r8
    5fc0:	4b94      	ldr	r3, [pc, #592]	; (6214 <__aeabi_dadd+0x384>)
    5fc2:	08ff      	lsrs	r7, r7, #3
    5fc4:	401c      	ands	r4, r3
    5fc6:	0760      	lsls	r0, r4, #29
    5fc8:	0576      	lsls	r6, r6, #21
    5fca:	0264      	lsls	r4, r4, #9
    5fcc:	4307      	orrs	r7, r0
    5fce:	0b24      	lsrs	r4, r4, #12
    5fd0:	0d76      	lsrs	r6, r6, #21
    5fd2:	2100      	movs	r1, #0
    5fd4:	0324      	lsls	r4, r4, #12
    5fd6:	0b23      	lsrs	r3, r4, #12
    5fd8:	0d0c      	lsrs	r4, r1, #20
    5fda:	4a8f      	ldr	r2, [pc, #572]	; (6218 <__aeabi_dadd+0x388>)
    5fdc:	0524      	lsls	r4, r4, #20
    5fde:	431c      	orrs	r4, r3
    5fe0:	4014      	ands	r4, r2
    5fe2:	0533      	lsls	r3, r6, #20
    5fe4:	4323      	orrs	r3, r4
    5fe6:	005b      	lsls	r3, r3, #1
    5fe8:	07ed      	lsls	r5, r5, #31
    5fea:	085b      	lsrs	r3, r3, #1
    5fec:	432b      	orrs	r3, r5
    5fee:	0038      	movs	r0, r7
    5ff0:	0019      	movs	r1, r3
    5ff2:	bc3c      	pop	{r2, r3, r4, r5}
    5ff4:	4690      	mov	r8, r2
    5ff6:	4699      	mov	r9, r3
    5ff8:	46a2      	mov	sl, r4
    5ffa:	46ab      	mov	fp, r5
    5ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5ffe:	4664      	mov	r4, ip
    6000:	4304      	orrs	r4, r0
    6002:	d100      	bne.n	6006 <__aeabi_dadd+0x176>
    6004:	e211      	b.n	642a <__aeabi_dadd+0x59a>
    6006:	0004      	movs	r4, r0
    6008:	4667      	mov	r7, ip
    600a:	077b      	lsls	r3, r7, #29
    600c:	d1c6      	bne.n	5f9c <__aeabi_dadd+0x10c>
    600e:	4645      	mov	r5, r8
    6010:	0760      	lsls	r0, r4, #29
    6012:	08ff      	lsrs	r7, r7, #3
    6014:	4307      	orrs	r7, r0
    6016:	08e4      	lsrs	r4, r4, #3
    6018:	4b7d      	ldr	r3, [pc, #500]	; (6210 <__aeabi_dadd+0x380>)
    601a:	429e      	cmp	r6, r3
    601c:	d030      	beq.n	6080 <__aeabi_dadd+0x1f0>
    601e:	0324      	lsls	r4, r4, #12
    6020:	0576      	lsls	r6, r6, #21
    6022:	0b24      	lsrs	r4, r4, #12
    6024:	0d76      	lsrs	r6, r6, #21
    6026:	e7d4      	b.n	5fd2 <__aeabi_dadd+0x142>
    6028:	1a33      	subs	r3, r6, r0
    602a:	469a      	mov	sl, r3
    602c:	2b00      	cmp	r3, #0
    602e:	dd78      	ble.n	6122 <__aeabi_dadd+0x292>
    6030:	2800      	cmp	r0, #0
    6032:	d031      	beq.n	6098 <__aeabi_dadd+0x208>
    6034:	4876      	ldr	r0, [pc, #472]	; (6210 <__aeabi_dadd+0x380>)
    6036:	4286      	cmp	r6, r0
    6038:	d0ae      	beq.n	5f98 <__aeabi_dadd+0x108>
    603a:	2080      	movs	r0, #128	; 0x80
    603c:	0400      	lsls	r0, r0, #16
    603e:	4301      	orrs	r1, r0
    6040:	4653      	mov	r3, sl
    6042:	2b38      	cmp	r3, #56	; 0x38
    6044:	dc00      	bgt.n	6048 <__aeabi_dadd+0x1b8>
    6046:	e0e9      	b.n	621c <__aeabi_dadd+0x38c>
    6048:	430a      	orrs	r2, r1
    604a:	1e51      	subs	r1, r2, #1
    604c:	418a      	sbcs	r2, r1
    604e:	2100      	movs	r1, #0
    6050:	19d2      	adds	r2, r2, r7
    6052:	42ba      	cmp	r2, r7
    6054:	41bf      	sbcs	r7, r7
    6056:	1909      	adds	r1, r1, r4
    6058:	427c      	negs	r4, r7
    605a:	0017      	movs	r7, r2
    605c:	190c      	adds	r4, r1, r4
    605e:	0223      	lsls	r3, r4, #8
    6060:	d5d3      	bpl.n	600a <__aeabi_dadd+0x17a>
    6062:	4b6b      	ldr	r3, [pc, #428]	; (6210 <__aeabi_dadd+0x380>)
    6064:	3601      	adds	r6, #1
    6066:	429e      	cmp	r6, r3
    6068:	d100      	bne.n	606c <__aeabi_dadd+0x1dc>
    606a:	e13a      	b.n	62e2 <__aeabi_dadd+0x452>
    606c:	2001      	movs	r0, #1
    606e:	4b69      	ldr	r3, [pc, #420]	; (6214 <__aeabi_dadd+0x384>)
    6070:	401c      	ands	r4, r3
    6072:	087b      	lsrs	r3, r7, #1
    6074:	4007      	ands	r7, r0
    6076:	431f      	orrs	r7, r3
    6078:	07e0      	lsls	r0, r4, #31
    607a:	4307      	orrs	r7, r0
    607c:	0864      	lsrs	r4, r4, #1
    607e:	e78b      	b.n	5f98 <__aeabi_dadd+0x108>
    6080:	0023      	movs	r3, r4
    6082:	433b      	orrs	r3, r7
    6084:	d100      	bne.n	6088 <__aeabi_dadd+0x1f8>
    6086:	e1cb      	b.n	6420 <__aeabi_dadd+0x590>
    6088:	2280      	movs	r2, #128	; 0x80
    608a:	0312      	lsls	r2, r2, #12
    608c:	4314      	orrs	r4, r2
    608e:	0324      	lsls	r4, r4, #12
    6090:	0b24      	lsrs	r4, r4, #12
    6092:	e79e      	b.n	5fd2 <__aeabi_dadd+0x142>
    6094:	002e      	movs	r6, r5
    6096:	e77f      	b.n	5f98 <__aeabi_dadd+0x108>
    6098:	0008      	movs	r0, r1
    609a:	4310      	orrs	r0, r2
    609c:	d100      	bne.n	60a0 <__aeabi_dadd+0x210>
    609e:	e0b4      	b.n	620a <__aeabi_dadd+0x37a>
    60a0:	1e58      	subs	r0, r3, #1
    60a2:	2800      	cmp	r0, #0
    60a4:	d000      	beq.n	60a8 <__aeabi_dadd+0x218>
    60a6:	e0de      	b.n	6266 <__aeabi_dadd+0x3d6>
    60a8:	18ba      	adds	r2, r7, r2
    60aa:	42ba      	cmp	r2, r7
    60ac:	419b      	sbcs	r3, r3
    60ae:	1864      	adds	r4, r4, r1
    60b0:	425b      	negs	r3, r3
    60b2:	18e4      	adds	r4, r4, r3
    60b4:	0017      	movs	r7, r2
    60b6:	2601      	movs	r6, #1
    60b8:	0223      	lsls	r3, r4, #8
    60ba:	d5a6      	bpl.n	600a <__aeabi_dadd+0x17a>
    60bc:	2602      	movs	r6, #2
    60be:	e7d5      	b.n	606c <__aeabi_dadd+0x1dc>
    60c0:	2d00      	cmp	r5, #0
    60c2:	d16e      	bne.n	61a2 <__aeabi_dadd+0x312>
    60c4:	1c70      	adds	r0, r6, #1
    60c6:	0540      	lsls	r0, r0, #21
    60c8:	0d40      	lsrs	r0, r0, #21
    60ca:	2801      	cmp	r0, #1
    60cc:	dc00      	bgt.n	60d0 <__aeabi_dadd+0x240>
    60ce:	e0f9      	b.n	62c4 <__aeabi_dadd+0x434>
    60d0:	1ab8      	subs	r0, r7, r2
    60d2:	4684      	mov	ip, r0
    60d4:	4287      	cmp	r7, r0
    60d6:	4180      	sbcs	r0, r0
    60d8:	1ae5      	subs	r5, r4, r3
    60da:	4240      	negs	r0, r0
    60dc:	1a2d      	subs	r5, r5, r0
    60de:	0228      	lsls	r0, r5, #8
    60e0:	d400      	bmi.n	60e4 <__aeabi_dadd+0x254>
    60e2:	e089      	b.n	61f8 <__aeabi_dadd+0x368>
    60e4:	1bd7      	subs	r7, r2, r7
    60e6:	42ba      	cmp	r2, r7
    60e8:	4192      	sbcs	r2, r2
    60ea:	1b1c      	subs	r4, r3, r4
    60ec:	4252      	negs	r2, r2
    60ee:	1aa5      	subs	r5, r4, r2
    60f0:	46d8      	mov	r8, fp
    60f2:	e729      	b.n	5f48 <__aeabi_dadd+0xb8>
    60f4:	4645      	mov	r5, r8
    60f6:	2400      	movs	r4, #0
    60f8:	2700      	movs	r7, #0
    60fa:	e76a      	b.n	5fd2 <__aeabi_dadd+0x142>
    60fc:	4c45      	ldr	r4, [pc, #276]	; (6214 <__aeabi_dadd+0x384>)
    60fe:	1af6      	subs	r6, r6, r3
    6100:	402c      	ands	r4, r5
    6102:	e749      	b.n	5f98 <__aeabi_dadd+0x108>
    6104:	003d      	movs	r5, r7
    6106:	3828      	subs	r0, #40	; 0x28
    6108:	4085      	lsls	r5, r0
    610a:	2700      	movs	r7, #0
    610c:	e72e      	b.n	5f6c <__aeabi_dadd+0xdc>
    610e:	0038      	movs	r0, r7
    6110:	f001 fbd6 	bl	78c0 <__clzsi2>
    6114:	3020      	adds	r0, #32
    6116:	e71d      	b.n	5f54 <__aeabi_dadd+0xc4>
    6118:	430a      	orrs	r2, r1
    611a:	1e51      	subs	r1, r2, #1
    611c:	418a      	sbcs	r2, r1
    611e:	2100      	movs	r1, #0
    6120:	e707      	b.n	5f32 <__aeabi_dadd+0xa2>
    6122:	2b00      	cmp	r3, #0
    6124:	d000      	beq.n	6128 <__aeabi_dadd+0x298>
    6126:	e0f3      	b.n	6310 <__aeabi_dadd+0x480>
    6128:	1c70      	adds	r0, r6, #1
    612a:	0543      	lsls	r3, r0, #21
    612c:	0d5b      	lsrs	r3, r3, #21
    612e:	2b01      	cmp	r3, #1
    6130:	dc00      	bgt.n	6134 <__aeabi_dadd+0x2a4>
    6132:	e0ad      	b.n	6290 <__aeabi_dadd+0x400>
    6134:	4b36      	ldr	r3, [pc, #216]	; (6210 <__aeabi_dadd+0x380>)
    6136:	4298      	cmp	r0, r3
    6138:	d100      	bne.n	613c <__aeabi_dadd+0x2ac>
    613a:	e0d1      	b.n	62e0 <__aeabi_dadd+0x450>
    613c:	18ba      	adds	r2, r7, r2
    613e:	42ba      	cmp	r2, r7
    6140:	41bf      	sbcs	r7, r7
    6142:	1864      	adds	r4, r4, r1
    6144:	427f      	negs	r7, r7
    6146:	19e4      	adds	r4, r4, r7
    6148:	07e7      	lsls	r7, r4, #31
    614a:	0852      	lsrs	r2, r2, #1
    614c:	4317      	orrs	r7, r2
    614e:	0864      	lsrs	r4, r4, #1
    6150:	0006      	movs	r6, r0
    6152:	e721      	b.n	5f98 <__aeabi_dadd+0x108>
    6154:	482e      	ldr	r0, [pc, #184]	; (6210 <__aeabi_dadd+0x380>)
    6156:	4285      	cmp	r5, r0
    6158:	d100      	bne.n	615c <__aeabi_dadd+0x2cc>
    615a:	e093      	b.n	6284 <__aeabi_dadd+0x3f4>
    615c:	001d      	movs	r5, r3
    615e:	e6d0      	b.n	5f02 <__aeabi_dadd+0x72>
    6160:	0029      	movs	r1, r5
    6162:	3e1f      	subs	r6, #31
    6164:	40f1      	lsrs	r1, r6
    6166:	2b20      	cmp	r3, #32
    6168:	d100      	bne.n	616c <__aeabi_dadd+0x2dc>
    616a:	e08d      	b.n	6288 <__aeabi_dadd+0x3f8>
    616c:	2240      	movs	r2, #64	; 0x40
    616e:	1ad3      	subs	r3, r2, r3
    6170:	409d      	lsls	r5, r3
    6172:	432f      	orrs	r7, r5
    6174:	1e7d      	subs	r5, r7, #1
    6176:	41af      	sbcs	r7, r5
    6178:	2400      	movs	r4, #0
    617a:	430f      	orrs	r7, r1
    617c:	2600      	movs	r6, #0
    617e:	e744      	b.n	600a <__aeabi_dadd+0x17a>
    6180:	002b      	movs	r3, r5
    6182:	0008      	movs	r0, r1
    6184:	3b20      	subs	r3, #32
    6186:	40d8      	lsrs	r0, r3
    6188:	0003      	movs	r3, r0
    618a:	2d20      	cmp	r5, #32
    618c:	d100      	bne.n	6190 <__aeabi_dadd+0x300>
    618e:	e07d      	b.n	628c <__aeabi_dadd+0x3fc>
    6190:	2040      	movs	r0, #64	; 0x40
    6192:	1b45      	subs	r5, r0, r5
    6194:	40a9      	lsls	r1, r5
    6196:	430a      	orrs	r2, r1
    6198:	1e51      	subs	r1, r2, #1
    619a:	418a      	sbcs	r2, r1
    619c:	2100      	movs	r1, #0
    619e:	431a      	orrs	r2, r3
    61a0:	e6c7      	b.n	5f32 <__aeabi_dadd+0xa2>
    61a2:	2e00      	cmp	r6, #0
    61a4:	d050      	beq.n	6248 <__aeabi_dadd+0x3b8>
    61a6:	4e1a      	ldr	r6, [pc, #104]	; (6210 <__aeabi_dadd+0x380>)
    61a8:	42b0      	cmp	r0, r6
    61aa:	d057      	beq.n	625c <__aeabi_dadd+0x3cc>
    61ac:	2680      	movs	r6, #128	; 0x80
    61ae:	426b      	negs	r3, r5
    61b0:	4699      	mov	r9, r3
    61b2:	0436      	lsls	r6, r6, #16
    61b4:	4334      	orrs	r4, r6
    61b6:	464b      	mov	r3, r9
    61b8:	2b38      	cmp	r3, #56	; 0x38
    61ba:	dd00      	ble.n	61be <__aeabi_dadd+0x32e>
    61bc:	e0d6      	b.n	636c <__aeabi_dadd+0x4dc>
    61be:	2b1f      	cmp	r3, #31
    61c0:	dd00      	ble.n	61c4 <__aeabi_dadd+0x334>
    61c2:	e135      	b.n	6430 <__aeabi_dadd+0x5a0>
    61c4:	2620      	movs	r6, #32
    61c6:	1af5      	subs	r5, r6, r3
    61c8:	0026      	movs	r6, r4
    61ca:	40ae      	lsls	r6, r5
    61cc:	46b2      	mov	sl, r6
    61ce:	003e      	movs	r6, r7
    61d0:	40de      	lsrs	r6, r3
    61d2:	46ac      	mov	ip, r5
    61d4:	0035      	movs	r5, r6
    61d6:	4656      	mov	r6, sl
    61d8:	432e      	orrs	r6, r5
    61da:	4665      	mov	r5, ip
    61dc:	40af      	lsls	r7, r5
    61de:	1e7d      	subs	r5, r7, #1
    61e0:	41af      	sbcs	r7, r5
    61e2:	40dc      	lsrs	r4, r3
    61e4:	4337      	orrs	r7, r6
    61e6:	1bd7      	subs	r7, r2, r7
    61e8:	42ba      	cmp	r2, r7
    61ea:	4192      	sbcs	r2, r2
    61ec:	1b0c      	subs	r4, r1, r4
    61ee:	4252      	negs	r2, r2
    61f0:	1aa4      	subs	r4, r4, r2
    61f2:	0006      	movs	r6, r0
    61f4:	46d8      	mov	r8, fp
    61f6:	e6a3      	b.n	5f40 <__aeabi_dadd+0xb0>
    61f8:	4664      	mov	r4, ip
    61fa:	4667      	mov	r7, ip
    61fc:	432c      	orrs	r4, r5
    61fe:	d000      	beq.n	6202 <__aeabi_dadd+0x372>
    6200:	e6a2      	b.n	5f48 <__aeabi_dadd+0xb8>
    6202:	2500      	movs	r5, #0
    6204:	2600      	movs	r6, #0
    6206:	2700      	movs	r7, #0
    6208:	e706      	b.n	6018 <__aeabi_dadd+0x188>
    620a:	001e      	movs	r6, r3
    620c:	e6c4      	b.n	5f98 <__aeabi_dadd+0x108>
    620e:	46c0      	nop			; (mov r8, r8)
    6210:	000007ff 	.word	0x000007ff
    6214:	ff7fffff 	.word	0xff7fffff
    6218:	800fffff 	.word	0x800fffff
    621c:	2b1f      	cmp	r3, #31
    621e:	dc63      	bgt.n	62e8 <__aeabi_dadd+0x458>
    6220:	2020      	movs	r0, #32
    6222:	1ac3      	subs	r3, r0, r3
    6224:	0008      	movs	r0, r1
    6226:	4098      	lsls	r0, r3
    6228:	469c      	mov	ip, r3
    622a:	4683      	mov	fp, r0
    622c:	4653      	mov	r3, sl
    622e:	0010      	movs	r0, r2
    6230:	40d8      	lsrs	r0, r3
    6232:	0003      	movs	r3, r0
    6234:	4658      	mov	r0, fp
    6236:	4318      	orrs	r0, r3
    6238:	4663      	mov	r3, ip
    623a:	409a      	lsls	r2, r3
    623c:	1e53      	subs	r3, r2, #1
    623e:	419a      	sbcs	r2, r3
    6240:	4653      	mov	r3, sl
    6242:	4302      	orrs	r2, r0
    6244:	40d9      	lsrs	r1, r3
    6246:	e703      	b.n	6050 <__aeabi_dadd+0x1c0>
    6248:	0026      	movs	r6, r4
    624a:	433e      	orrs	r6, r7
    624c:	d006      	beq.n	625c <__aeabi_dadd+0x3cc>
    624e:	43eb      	mvns	r3, r5
    6250:	4699      	mov	r9, r3
    6252:	2b00      	cmp	r3, #0
    6254:	d0c7      	beq.n	61e6 <__aeabi_dadd+0x356>
    6256:	4e94      	ldr	r6, [pc, #592]	; (64a8 <__aeabi_dadd+0x618>)
    6258:	42b0      	cmp	r0, r6
    625a:	d1ac      	bne.n	61b6 <__aeabi_dadd+0x326>
    625c:	000c      	movs	r4, r1
    625e:	0017      	movs	r7, r2
    6260:	0006      	movs	r6, r0
    6262:	46d8      	mov	r8, fp
    6264:	e698      	b.n	5f98 <__aeabi_dadd+0x108>
    6266:	4b90      	ldr	r3, [pc, #576]	; (64a8 <__aeabi_dadd+0x618>)
    6268:	459a      	cmp	sl, r3
    626a:	d00b      	beq.n	6284 <__aeabi_dadd+0x3f4>
    626c:	4682      	mov	sl, r0
    626e:	e6e7      	b.n	6040 <__aeabi_dadd+0x1b0>
    6270:	2800      	cmp	r0, #0
    6272:	d000      	beq.n	6276 <__aeabi_dadd+0x3e6>
    6274:	e09e      	b.n	63b4 <__aeabi_dadd+0x524>
    6276:	0018      	movs	r0, r3
    6278:	4310      	orrs	r0, r2
    627a:	d100      	bne.n	627e <__aeabi_dadd+0x3ee>
    627c:	e0e9      	b.n	6452 <__aeabi_dadd+0x5c2>
    627e:	001c      	movs	r4, r3
    6280:	0017      	movs	r7, r2
    6282:	46d8      	mov	r8, fp
    6284:	4e88      	ldr	r6, [pc, #544]	; (64a8 <__aeabi_dadd+0x618>)
    6286:	e687      	b.n	5f98 <__aeabi_dadd+0x108>
    6288:	2500      	movs	r5, #0
    628a:	e772      	b.n	6172 <__aeabi_dadd+0x2e2>
    628c:	2100      	movs	r1, #0
    628e:	e782      	b.n	6196 <__aeabi_dadd+0x306>
    6290:	0023      	movs	r3, r4
    6292:	433b      	orrs	r3, r7
    6294:	2e00      	cmp	r6, #0
    6296:	d000      	beq.n	629a <__aeabi_dadd+0x40a>
    6298:	e0ab      	b.n	63f2 <__aeabi_dadd+0x562>
    629a:	2b00      	cmp	r3, #0
    629c:	d100      	bne.n	62a0 <__aeabi_dadd+0x410>
    629e:	e0e7      	b.n	6470 <__aeabi_dadd+0x5e0>
    62a0:	000b      	movs	r3, r1
    62a2:	4313      	orrs	r3, r2
    62a4:	d100      	bne.n	62a8 <__aeabi_dadd+0x418>
    62a6:	e677      	b.n	5f98 <__aeabi_dadd+0x108>
    62a8:	18ba      	adds	r2, r7, r2
    62aa:	42ba      	cmp	r2, r7
    62ac:	41bf      	sbcs	r7, r7
    62ae:	1864      	adds	r4, r4, r1
    62b0:	427f      	negs	r7, r7
    62b2:	19e4      	adds	r4, r4, r7
    62b4:	0223      	lsls	r3, r4, #8
    62b6:	d400      	bmi.n	62ba <__aeabi_dadd+0x42a>
    62b8:	e0f2      	b.n	64a0 <__aeabi_dadd+0x610>
    62ba:	4b7c      	ldr	r3, [pc, #496]	; (64ac <__aeabi_dadd+0x61c>)
    62bc:	0017      	movs	r7, r2
    62be:	401c      	ands	r4, r3
    62c0:	0006      	movs	r6, r0
    62c2:	e669      	b.n	5f98 <__aeabi_dadd+0x108>
    62c4:	0020      	movs	r0, r4
    62c6:	4338      	orrs	r0, r7
    62c8:	2e00      	cmp	r6, #0
    62ca:	d1d1      	bne.n	6270 <__aeabi_dadd+0x3e0>
    62cc:	2800      	cmp	r0, #0
    62ce:	d15b      	bne.n	6388 <__aeabi_dadd+0x4f8>
    62d0:	001c      	movs	r4, r3
    62d2:	4314      	orrs	r4, r2
    62d4:	d100      	bne.n	62d8 <__aeabi_dadd+0x448>
    62d6:	e0a8      	b.n	642a <__aeabi_dadd+0x59a>
    62d8:	001c      	movs	r4, r3
    62da:	0017      	movs	r7, r2
    62dc:	46d8      	mov	r8, fp
    62de:	e65b      	b.n	5f98 <__aeabi_dadd+0x108>
    62e0:	0006      	movs	r6, r0
    62e2:	2400      	movs	r4, #0
    62e4:	2700      	movs	r7, #0
    62e6:	e697      	b.n	6018 <__aeabi_dadd+0x188>
    62e8:	4650      	mov	r0, sl
    62ea:	000b      	movs	r3, r1
    62ec:	3820      	subs	r0, #32
    62ee:	40c3      	lsrs	r3, r0
    62f0:	4699      	mov	r9, r3
    62f2:	4653      	mov	r3, sl
    62f4:	2b20      	cmp	r3, #32
    62f6:	d100      	bne.n	62fa <__aeabi_dadd+0x46a>
    62f8:	e095      	b.n	6426 <__aeabi_dadd+0x596>
    62fa:	2340      	movs	r3, #64	; 0x40
    62fc:	4650      	mov	r0, sl
    62fe:	1a1b      	subs	r3, r3, r0
    6300:	4099      	lsls	r1, r3
    6302:	430a      	orrs	r2, r1
    6304:	1e51      	subs	r1, r2, #1
    6306:	418a      	sbcs	r2, r1
    6308:	464b      	mov	r3, r9
    630a:	2100      	movs	r1, #0
    630c:	431a      	orrs	r2, r3
    630e:	e69f      	b.n	6050 <__aeabi_dadd+0x1c0>
    6310:	2e00      	cmp	r6, #0
    6312:	d130      	bne.n	6376 <__aeabi_dadd+0x4e6>
    6314:	0026      	movs	r6, r4
    6316:	433e      	orrs	r6, r7
    6318:	d067      	beq.n	63ea <__aeabi_dadd+0x55a>
    631a:	43db      	mvns	r3, r3
    631c:	469a      	mov	sl, r3
    631e:	2b00      	cmp	r3, #0
    6320:	d01c      	beq.n	635c <__aeabi_dadd+0x4cc>
    6322:	4e61      	ldr	r6, [pc, #388]	; (64a8 <__aeabi_dadd+0x618>)
    6324:	42b0      	cmp	r0, r6
    6326:	d060      	beq.n	63ea <__aeabi_dadd+0x55a>
    6328:	4653      	mov	r3, sl
    632a:	2b38      	cmp	r3, #56	; 0x38
    632c:	dd00      	ble.n	6330 <__aeabi_dadd+0x4a0>
    632e:	e096      	b.n	645e <__aeabi_dadd+0x5ce>
    6330:	2b1f      	cmp	r3, #31
    6332:	dd00      	ble.n	6336 <__aeabi_dadd+0x4a6>
    6334:	e09f      	b.n	6476 <__aeabi_dadd+0x5e6>
    6336:	2620      	movs	r6, #32
    6338:	1af3      	subs	r3, r6, r3
    633a:	0026      	movs	r6, r4
    633c:	409e      	lsls	r6, r3
    633e:	469c      	mov	ip, r3
    6340:	46b3      	mov	fp, r6
    6342:	4653      	mov	r3, sl
    6344:	003e      	movs	r6, r7
    6346:	40de      	lsrs	r6, r3
    6348:	0033      	movs	r3, r6
    634a:	465e      	mov	r6, fp
    634c:	431e      	orrs	r6, r3
    634e:	4663      	mov	r3, ip
    6350:	409f      	lsls	r7, r3
    6352:	1e7b      	subs	r3, r7, #1
    6354:	419f      	sbcs	r7, r3
    6356:	4653      	mov	r3, sl
    6358:	40dc      	lsrs	r4, r3
    635a:	4337      	orrs	r7, r6
    635c:	18bf      	adds	r7, r7, r2
    635e:	4297      	cmp	r7, r2
    6360:	4192      	sbcs	r2, r2
    6362:	1864      	adds	r4, r4, r1
    6364:	4252      	negs	r2, r2
    6366:	18a4      	adds	r4, r4, r2
    6368:	0006      	movs	r6, r0
    636a:	e678      	b.n	605e <__aeabi_dadd+0x1ce>
    636c:	4327      	orrs	r7, r4
    636e:	1e7c      	subs	r4, r7, #1
    6370:	41a7      	sbcs	r7, r4
    6372:	2400      	movs	r4, #0
    6374:	e737      	b.n	61e6 <__aeabi_dadd+0x356>
    6376:	4e4c      	ldr	r6, [pc, #304]	; (64a8 <__aeabi_dadd+0x618>)
    6378:	42b0      	cmp	r0, r6
    637a:	d036      	beq.n	63ea <__aeabi_dadd+0x55a>
    637c:	2680      	movs	r6, #128	; 0x80
    637e:	425b      	negs	r3, r3
    6380:	0436      	lsls	r6, r6, #16
    6382:	469a      	mov	sl, r3
    6384:	4334      	orrs	r4, r6
    6386:	e7cf      	b.n	6328 <__aeabi_dadd+0x498>
    6388:	0018      	movs	r0, r3
    638a:	4310      	orrs	r0, r2
    638c:	d100      	bne.n	6390 <__aeabi_dadd+0x500>
    638e:	e603      	b.n	5f98 <__aeabi_dadd+0x108>
    6390:	1ab8      	subs	r0, r7, r2
    6392:	4684      	mov	ip, r0
    6394:	4567      	cmp	r7, ip
    6396:	41ad      	sbcs	r5, r5
    6398:	1ae0      	subs	r0, r4, r3
    639a:	426d      	negs	r5, r5
    639c:	1b40      	subs	r0, r0, r5
    639e:	0205      	lsls	r5, r0, #8
    63a0:	d400      	bmi.n	63a4 <__aeabi_dadd+0x514>
    63a2:	e62c      	b.n	5ffe <__aeabi_dadd+0x16e>
    63a4:	1bd7      	subs	r7, r2, r7
    63a6:	42ba      	cmp	r2, r7
    63a8:	4192      	sbcs	r2, r2
    63aa:	1b1c      	subs	r4, r3, r4
    63ac:	4252      	negs	r2, r2
    63ae:	1aa4      	subs	r4, r4, r2
    63b0:	46d8      	mov	r8, fp
    63b2:	e5f1      	b.n	5f98 <__aeabi_dadd+0x108>
    63b4:	0018      	movs	r0, r3
    63b6:	4310      	orrs	r0, r2
    63b8:	d100      	bne.n	63bc <__aeabi_dadd+0x52c>
    63ba:	e763      	b.n	6284 <__aeabi_dadd+0x3f4>
    63bc:	08f8      	lsrs	r0, r7, #3
    63be:	0767      	lsls	r7, r4, #29
    63c0:	4307      	orrs	r7, r0
    63c2:	2080      	movs	r0, #128	; 0x80
    63c4:	08e4      	lsrs	r4, r4, #3
    63c6:	0300      	lsls	r0, r0, #12
    63c8:	4204      	tst	r4, r0
    63ca:	d008      	beq.n	63de <__aeabi_dadd+0x54e>
    63cc:	08dd      	lsrs	r5, r3, #3
    63ce:	4205      	tst	r5, r0
    63d0:	d105      	bne.n	63de <__aeabi_dadd+0x54e>
    63d2:	08d2      	lsrs	r2, r2, #3
    63d4:	0759      	lsls	r1, r3, #29
    63d6:	4311      	orrs	r1, r2
    63d8:	000f      	movs	r7, r1
    63da:	002c      	movs	r4, r5
    63dc:	46d8      	mov	r8, fp
    63de:	0f7b      	lsrs	r3, r7, #29
    63e0:	00e4      	lsls	r4, r4, #3
    63e2:	431c      	orrs	r4, r3
    63e4:	00ff      	lsls	r7, r7, #3
    63e6:	4e30      	ldr	r6, [pc, #192]	; (64a8 <__aeabi_dadd+0x618>)
    63e8:	e5d6      	b.n	5f98 <__aeabi_dadd+0x108>
    63ea:	000c      	movs	r4, r1
    63ec:	0017      	movs	r7, r2
    63ee:	0006      	movs	r6, r0
    63f0:	e5d2      	b.n	5f98 <__aeabi_dadd+0x108>
    63f2:	2b00      	cmp	r3, #0
    63f4:	d038      	beq.n	6468 <__aeabi_dadd+0x5d8>
    63f6:	000b      	movs	r3, r1
    63f8:	4313      	orrs	r3, r2
    63fa:	d100      	bne.n	63fe <__aeabi_dadd+0x56e>
    63fc:	e742      	b.n	6284 <__aeabi_dadd+0x3f4>
    63fe:	08f8      	lsrs	r0, r7, #3
    6400:	0767      	lsls	r7, r4, #29
    6402:	4307      	orrs	r7, r0
    6404:	2080      	movs	r0, #128	; 0x80
    6406:	08e4      	lsrs	r4, r4, #3
    6408:	0300      	lsls	r0, r0, #12
    640a:	4204      	tst	r4, r0
    640c:	d0e7      	beq.n	63de <__aeabi_dadd+0x54e>
    640e:	08cb      	lsrs	r3, r1, #3
    6410:	4203      	tst	r3, r0
    6412:	d1e4      	bne.n	63de <__aeabi_dadd+0x54e>
    6414:	08d2      	lsrs	r2, r2, #3
    6416:	0749      	lsls	r1, r1, #29
    6418:	4311      	orrs	r1, r2
    641a:	000f      	movs	r7, r1
    641c:	001c      	movs	r4, r3
    641e:	e7de      	b.n	63de <__aeabi_dadd+0x54e>
    6420:	2700      	movs	r7, #0
    6422:	2400      	movs	r4, #0
    6424:	e5d5      	b.n	5fd2 <__aeabi_dadd+0x142>
    6426:	2100      	movs	r1, #0
    6428:	e76b      	b.n	6302 <__aeabi_dadd+0x472>
    642a:	2500      	movs	r5, #0
    642c:	2700      	movs	r7, #0
    642e:	e5f3      	b.n	6018 <__aeabi_dadd+0x188>
    6430:	464e      	mov	r6, r9
    6432:	0025      	movs	r5, r4
    6434:	3e20      	subs	r6, #32
    6436:	40f5      	lsrs	r5, r6
    6438:	464b      	mov	r3, r9
    643a:	002e      	movs	r6, r5
    643c:	2b20      	cmp	r3, #32
    643e:	d02d      	beq.n	649c <__aeabi_dadd+0x60c>
    6440:	2540      	movs	r5, #64	; 0x40
    6442:	1aed      	subs	r5, r5, r3
    6444:	40ac      	lsls	r4, r5
    6446:	4327      	orrs	r7, r4
    6448:	1e7c      	subs	r4, r7, #1
    644a:	41a7      	sbcs	r7, r4
    644c:	2400      	movs	r4, #0
    644e:	4337      	orrs	r7, r6
    6450:	e6c9      	b.n	61e6 <__aeabi_dadd+0x356>
    6452:	2480      	movs	r4, #128	; 0x80
    6454:	2500      	movs	r5, #0
    6456:	0324      	lsls	r4, r4, #12
    6458:	4e13      	ldr	r6, [pc, #76]	; (64a8 <__aeabi_dadd+0x618>)
    645a:	2700      	movs	r7, #0
    645c:	e5dc      	b.n	6018 <__aeabi_dadd+0x188>
    645e:	4327      	orrs	r7, r4
    6460:	1e7c      	subs	r4, r7, #1
    6462:	41a7      	sbcs	r7, r4
    6464:	2400      	movs	r4, #0
    6466:	e779      	b.n	635c <__aeabi_dadd+0x4cc>
    6468:	000c      	movs	r4, r1
    646a:	0017      	movs	r7, r2
    646c:	4e0e      	ldr	r6, [pc, #56]	; (64a8 <__aeabi_dadd+0x618>)
    646e:	e593      	b.n	5f98 <__aeabi_dadd+0x108>
    6470:	000c      	movs	r4, r1
    6472:	0017      	movs	r7, r2
    6474:	e590      	b.n	5f98 <__aeabi_dadd+0x108>
    6476:	4656      	mov	r6, sl
    6478:	0023      	movs	r3, r4
    647a:	3e20      	subs	r6, #32
    647c:	40f3      	lsrs	r3, r6
    647e:	4699      	mov	r9, r3
    6480:	4653      	mov	r3, sl
    6482:	2b20      	cmp	r3, #32
    6484:	d00e      	beq.n	64a4 <__aeabi_dadd+0x614>
    6486:	2340      	movs	r3, #64	; 0x40
    6488:	4656      	mov	r6, sl
    648a:	1b9b      	subs	r3, r3, r6
    648c:	409c      	lsls	r4, r3
    648e:	4327      	orrs	r7, r4
    6490:	1e7c      	subs	r4, r7, #1
    6492:	41a7      	sbcs	r7, r4
    6494:	464b      	mov	r3, r9
    6496:	2400      	movs	r4, #0
    6498:	431f      	orrs	r7, r3
    649a:	e75f      	b.n	635c <__aeabi_dadd+0x4cc>
    649c:	2400      	movs	r4, #0
    649e:	e7d2      	b.n	6446 <__aeabi_dadd+0x5b6>
    64a0:	0017      	movs	r7, r2
    64a2:	e5b2      	b.n	600a <__aeabi_dadd+0x17a>
    64a4:	2400      	movs	r4, #0
    64a6:	e7f2      	b.n	648e <__aeabi_dadd+0x5fe>
    64a8:	000007ff 	.word	0x000007ff
    64ac:	ff7fffff 	.word	0xff7fffff

000064b0 <__aeabi_ddiv>:
    64b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64b2:	4657      	mov	r7, sl
    64b4:	4645      	mov	r5, r8
    64b6:	46de      	mov	lr, fp
    64b8:	464e      	mov	r6, r9
    64ba:	b5e0      	push	{r5, r6, r7, lr}
    64bc:	004c      	lsls	r4, r1, #1
    64be:	030e      	lsls	r6, r1, #12
    64c0:	b087      	sub	sp, #28
    64c2:	4683      	mov	fp, r0
    64c4:	4692      	mov	sl, r2
    64c6:	001d      	movs	r5, r3
    64c8:	4680      	mov	r8, r0
    64ca:	0b36      	lsrs	r6, r6, #12
    64cc:	0d64      	lsrs	r4, r4, #21
    64ce:	0fcf      	lsrs	r7, r1, #31
    64d0:	2c00      	cmp	r4, #0
    64d2:	d04f      	beq.n	6574 <__aeabi_ddiv+0xc4>
    64d4:	4b6f      	ldr	r3, [pc, #444]	; (6694 <__aeabi_ddiv+0x1e4>)
    64d6:	429c      	cmp	r4, r3
    64d8:	d035      	beq.n	6546 <__aeabi_ddiv+0x96>
    64da:	2380      	movs	r3, #128	; 0x80
    64dc:	0f42      	lsrs	r2, r0, #29
    64de:	041b      	lsls	r3, r3, #16
    64e0:	00f6      	lsls	r6, r6, #3
    64e2:	4313      	orrs	r3, r2
    64e4:	4333      	orrs	r3, r6
    64e6:	4699      	mov	r9, r3
    64e8:	00c3      	lsls	r3, r0, #3
    64ea:	4698      	mov	r8, r3
    64ec:	4b6a      	ldr	r3, [pc, #424]	; (6698 <__aeabi_ddiv+0x1e8>)
    64ee:	2600      	movs	r6, #0
    64f0:	469c      	mov	ip, r3
    64f2:	2300      	movs	r3, #0
    64f4:	4464      	add	r4, ip
    64f6:	9303      	str	r3, [sp, #12]
    64f8:	032b      	lsls	r3, r5, #12
    64fa:	0b1b      	lsrs	r3, r3, #12
    64fc:	469b      	mov	fp, r3
    64fe:	006b      	lsls	r3, r5, #1
    6500:	0fed      	lsrs	r5, r5, #31
    6502:	4650      	mov	r0, sl
    6504:	0d5b      	lsrs	r3, r3, #21
    6506:	9501      	str	r5, [sp, #4]
    6508:	d05e      	beq.n	65c8 <__aeabi_ddiv+0x118>
    650a:	4a62      	ldr	r2, [pc, #392]	; (6694 <__aeabi_ddiv+0x1e4>)
    650c:	4293      	cmp	r3, r2
    650e:	d053      	beq.n	65b8 <__aeabi_ddiv+0x108>
    6510:	465a      	mov	r2, fp
    6512:	00d1      	lsls	r1, r2, #3
    6514:	2280      	movs	r2, #128	; 0x80
    6516:	0f40      	lsrs	r0, r0, #29
    6518:	0412      	lsls	r2, r2, #16
    651a:	4302      	orrs	r2, r0
    651c:	430a      	orrs	r2, r1
    651e:	4693      	mov	fp, r2
    6520:	4652      	mov	r2, sl
    6522:	00d1      	lsls	r1, r2, #3
    6524:	4a5c      	ldr	r2, [pc, #368]	; (6698 <__aeabi_ddiv+0x1e8>)
    6526:	4694      	mov	ip, r2
    6528:	2200      	movs	r2, #0
    652a:	4463      	add	r3, ip
    652c:	0038      	movs	r0, r7
    652e:	4068      	eors	r0, r5
    6530:	4684      	mov	ip, r0
    6532:	9002      	str	r0, [sp, #8]
    6534:	1ae4      	subs	r4, r4, r3
    6536:	4316      	orrs	r6, r2
    6538:	2e0f      	cmp	r6, #15
    653a:	d900      	bls.n	653e <__aeabi_ddiv+0x8e>
    653c:	e0b4      	b.n	66a8 <__aeabi_ddiv+0x1f8>
    653e:	4b57      	ldr	r3, [pc, #348]	; (669c <__aeabi_ddiv+0x1ec>)
    6540:	00b6      	lsls	r6, r6, #2
    6542:	599b      	ldr	r3, [r3, r6]
    6544:	469f      	mov	pc, r3
    6546:	0003      	movs	r3, r0
    6548:	4333      	orrs	r3, r6
    654a:	4699      	mov	r9, r3
    654c:	d16c      	bne.n	6628 <__aeabi_ddiv+0x178>
    654e:	2300      	movs	r3, #0
    6550:	4698      	mov	r8, r3
    6552:	3302      	adds	r3, #2
    6554:	2608      	movs	r6, #8
    6556:	9303      	str	r3, [sp, #12]
    6558:	e7ce      	b.n	64f8 <__aeabi_ddiv+0x48>
    655a:	46cb      	mov	fp, r9
    655c:	4641      	mov	r1, r8
    655e:	9a03      	ldr	r2, [sp, #12]
    6560:	9701      	str	r7, [sp, #4]
    6562:	2a02      	cmp	r2, #2
    6564:	d165      	bne.n	6632 <__aeabi_ddiv+0x182>
    6566:	9b01      	ldr	r3, [sp, #4]
    6568:	4c4a      	ldr	r4, [pc, #296]	; (6694 <__aeabi_ddiv+0x1e4>)
    656a:	469c      	mov	ip, r3
    656c:	2300      	movs	r3, #0
    656e:	2200      	movs	r2, #0
    6570:	4698      	mov	r8, r3
    6572:	e06b      	b.n	664c <__aeabi_ddiv+0x19c>
    6574:	0003      	movs	r3, r0
    6576:	4333      	orrs	r3, r6
    6578:	4699      	mov	r9, r3
    657a:	d04e      	beq.n	661a <__aeabi_ddiv+0x16a>
    657c:	2e00      	cmp	r6, #0
    657e:	d100      	bne.n	6582 <__aeabi_ddiv+0xd2>
    6580:	e1bc      	b.n	68fc <__aeabi_ddiv+0x44c>
    6582:	0030      	movs	r0, r6
    6584:	f001 f99c 	bl	78c0 <__clzsi2>
    6588:	0003      	movs	r3, r0
    658a:	3b0b      	subs	r3, #11
    658c:	2b1c      	cmp	r3, #28
    658e:	dd00      	ble.n	6592 <__aeabi_ddiv+0xe2>
    6590:	e1ac      	b.n	68ec <__aeabi_ddiv+0x43c>
    6592:	221d      	movs	r2, #29
    6594:	1ad3      	subs	r3, r2, r3
    6596:	465a      	mov	r2, fp
    6598:	0001      	movs	r1, r0
    659a:	40da      	lsrs	r2, r3
    659c:	3908      	subs	r1, #8
    659e:	408e      	lsls	r6, r1
    65a0:	0013      	movs	r3, r2
    65a2:	4333      	orrs	r3, r6
    65a4:	4699      	mov	r9, r3
    65a6:	465b      	mov	r3, fp
    65a8:	408b      	lsls	r3, r1
    65aa:	4698      	mov	r8, r3
    65ac:	2300      	movs	r3, #0
    65ae:	4c3c      	ldr	r4, [pc, #240]	; (66a0 <__aeabi_ddiv+0x1f0>)
    65b0:	2600      	movs	r6, #0
    65b2:	1a24      	subs	r4, r4, r0
    65b4:	9303      	str	r3, [sp, #12]
    65b6:	e79f      	b.n	64f8 <__aeabi_ddiv+0x48>
    65b8:	4651      	mov	r1, sl
    65ba:	465a      	mov	r2, fp
    65bc:	4311      	orrs	r1, r2
    65be:	d129      	bne.n	6614 <__aeabi_ddiv+0x164>
    65c0:	2200      	movs	r2, #0
    65c2:	4693      	mov	fp, r2
    65c4:	3202      	adds	r2, #2
    65c6:	e7b1      	b.n	652c <__aeabi_ddiv+0x7c>
    65c8:	4659      	mov	r1, fp
    65ca:	4301      	orrs	r1, r0
    65cc:	d01e      	beq.n	660c <__aeabi_ddiv+0x15c>
    65ce:	465b      	mov	r3, fp
    65d0:	2b00      	cmp	r3, #0
    65d2:	d100      	bne.n	65d6 <__aeabi_ddiv+0x126>
    65d4:	e19e      	b.n	6914 <__aeabi_ddiv+0x464>
    65d6:	4658      	mov	r0, fp
    65d8:	f001 f972 	bl	78c0 <__clzsi2>
    65dc:	0003      	movs	r3, r0
    65de:	3b0b      	subs	r3, #11
    65e0:	2b1c      	cmp	r3, #28
    65e2:	dd00      	ble.n	65e6 <__aeabi_ddiv+0x136>
    65e4:	e18f      	b.n	6906 <__aeabi_ddiv+0x456>
    65e6:	0002      	movs	r2, r0
    65e8:	4659      	mov	r1, fp
    65ea:	3a08      	subs	r2, #8
    65ec:	4091      	lsls	r1, r2
    65ee:	468b      	mov	fp, r1
    65f0:	211d      	movs	r1, #29
    65f2:	1acb      	subs	r3, r1, r3
    65f4:	4651      	mov	r1, sl
    65f6:	40d9      	lsrs	r1, r3
    65f8:	000b      	movs	r3, r1
    65fa:	4659      	mov	r1, fp
    65fc:	430b      	orrs	r3, r1
    65fe:	4651      	mov	r1, sl
    6600:	469b      	mov	fp, r3
    6602:	4091      	lsls	r1, r2
    6604:	4b26      	ldr	r3, [pc, #152]	; (66a0 <__aeabi_ddiv+0x1f0>)
    6606:	2200      	movs	r2, #0
    6608:	1a1b      	subs	r3, r3, r0
    660a:	e78f      	b.n	652c <__aeabi_ddiv+0x7c>
    660c:	2300      	movs	r3, #0
    660e:	2201      	movs	r2, #1
    6610:	469b      	mov	fp, r3
    6612:	e78b      	b.n	652c <__aeabi_ddiv+0x7c>
    6614:	4651      	mov	r1, sl
    6616:	2203      	movs	r2, #3
    6618:	e788      	b.n	652c <__aeabi_ddiv+0x7c>
    661a:	2300      	movs	r3, #0
    661c:	4698      	mov	r8, r3
    661e:	3301      	adds	r3, #1
    6620:	2604      	movs	r6, #4
    6622:	2400      	movs	r4, #0
    6624:	9303      	str	r3, [sp, #12]
    6626:	e767      	b.n	64f8 <__aeabi_ddiv+0x48>
    6628:	2303      	movs	r3, #3
    662a:	46b1      	mov	r9, r6
    662c:	9303      	str	r3, [sp, #12]
    662e:	260c      	movs	r6, #12
    6630:	e762      	b.n	64f8 <__aeabi_ddiv+0x48>
    6632:	2a03      	cmp	r2, #3
    6634:	d100      	bne.n	6638 <__aeabi_ddiv+0x188>
    6636:	e25c      	b.n	6af2 <__aeabi_ddiv+0x642>
    6638:	9b01      	ldr	r3, [sp, #4]
    663a:	2a01      	cmp	r2, #1
    663c:	d000      	beq.n	6640 <__aeabi_ddiv+0x190>
    663e:	e1e4      	b.n	6a0a <__aeabi_ddiv+0x55a>
    6640:	4013      	ands	r3, r2
    6642:	469c      	mov	ip, r3
    6644:	2300      	movs	r3, #0
    6646:	2400      	movs	r4, #0
    6648:	2200      	movs	r2, #0
    664a:	4698      	mov	r8, r3
    664c:	2100      	movs	r1, #0
    664e:	0312      	lsls	r2, r2, #12
    6650:	0b13      	lsrs	r3, r2, #12
    6652:	0d0a      	lsrs	r2, r1, #20
    6654:	0512      	lsls	r2, r2, #20
    6656:	431a      	orrs	r2, r3
    6658:	0523      	lsls	r3, r4, #20
    665a:	4c12      	ldr	r4, [pc, #72]	; (66a4 <__aeabi_ddiv+0x1f4>)
    665c:	4640      	mov	r0, r8
    665e:	4022      	ands	r2, r4
    6660:	4313      	orrs	r3, r2
    6662:	4662      	mov	r2, ip
    6664:	005b      	lsls	r3, r3, #1
    6666:	07d2      	lsls	r2, r2, #31
    6668:	085b      	lsrs	r3, r3, #1
    666a:	4313      	orrs	r3, r2
    666c:	0019      	movs	r1, r3
    666e:	b007      	add	sp, #28
    6670:	bc3c      	pop	{r2, r3, r4, r5}
    6672:	4690      	mov	r8, r2
    6674:	4699      	mov	r9, r3
    6676:	46a2      	mov	sl, r4
    6678:	46ab      	mov	fp, r5
    667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    667c:	2300      	movs	r3, #0
    667e:	2280      	movs	r2, #128	; 0x80
    6680:	469c      	mov	ip, r3
    6682:	0312      	lsls	r2, r2, #12
    6684:	4698      	mov	r8, r3
    6686:	4c03      	ldr	r4, [pc, #12]	; (6694 <__aeabi_ddiv+0x1e4>)
    6688:	e7e0      	b.n	664c <__aeabi_ddiv+0x19c>
    668a:	2300      	movs	r3, #0
    668c:	4c01      	ldr	r4, [pc, #4]	; (6694 <__aeabi_ddiv+0x1e4>)
    668e:	2200      	movs	r2, #0
    6690:	4698      	mov	r8, r3
    6692:	e7db      	b.n	664c <__aeabi_ddiv+0x19c>
    6694:	000007ff 	.word	0x000007ff
    6698:	fffffc01 	.word	0xfffffc01
    669c:	00011cdc 	.word	0x00011cdc
    66a0:	fffffc0d 	.word	0xfffffc0d
    66a4:	800fffff 	.word	0x800fffff
    66a8:	45d9      	cmp	r9, fp
    66aa:	d900      	bls.n	66ae <__aeabi_ddiv+0x1fe>
    66ac:	e139      	b.n	6922 <__aeabi_ddiv+0x472>
    66ae:	d100      	bne.n	66b2 <__aeabi_ddiv+0x202>
    66b0:	e134      	b.n	691c <__aeabi_ddiv+0x46c>
    66b2:	2300      	movs	r3, #0
    66b4:	4646      	mov	r6, r8
    66b6:	464d      	mov	r5, r9
    66b8:	469a      	mov	sl, r3
    66ba:	3c01      	subs	r4, #1
    66bc:	465b      	mov	r3, fp
    66be:	0e0a      	lsrs	r2, r1, #24
    66c0:	021b      	lsls	r3, r3, #8
    66c2:	431a      	orrs	r2, r3
    66c4:	020b      	lsls	r3, r1, #8
    66c6:	0c17      	lsrs	r7, r2, #16
    66c8:	9303      	str	r3, [sp, #12]
    66ca:	0413      	lsls	r3, r2, #16
    66cc:	0c1b      	lsrs	r3, r3, #16
    66ce:	0039      	movs	r1, r7
    66d0:	0028      	movs	r0, r5
    66d2:	4690      	mov	r8, r2
    66d4:	9301      	str	r3, [sp, #4]
    66d6:	f7ff f813 	bl	5700 <__udivsi3>
    66da:	0002      	movs	r2, r0
    66dc:	9b01      	ldr	r3, [sp, #4]
    66de:	4683      	mov	fp, r0
    66e0:	435a      	muls	r2, r3
    66e2:	0028      	movs	r0, r5
    66e4:	0039      	movs	r1, r7
    66e6:	4691      	mov	r9, r2
    66e8:	f7ff f890 	bl	580c <__aeabi_uidivmod>
    66ec:	0c35      	lsrs	r5, r6, #16
    66ee:	0409      	lsls	r1, r1, #16
    66f0:	430d      	orrs	r5, r1
    66f2:	45a9      	cmp	r9, r5
    66f4:	d90d      	bls.n	6712 <__aeabi_ddiv+0x262>
    66f6:	465b      	mov	r3, fp
    66f8:	4445      	add	r5, r8
    66fa:	3b01      	subs	r3, #1
    66fc:	45a8      	cmp	r8, r5
    66fe:	d900      	bls.n	6702 <__aeabi_ddiv+0x252>
    6700:	e13a      	b.n	6978 <__aeabi_ddiv+0x4c8>
    6702:	45a9      	cmp	r9, r5
    6704:	d800      	bhi.n	6708 <__aeabi_ddiv+0x258>
    6706:	e137      	b.n	6978 <__aeabi_ddiv+0x4c8>
    6708:	2302      	movs	r3, #2
    670a:	425b      	negs	r3, r3
    670c:	469c      	mov	ip, r3
    670e:	4445      	add	r5, r8
    6710:	44e3      	add	fp, ip
    6712:	464b      	mov	r3, r9
    6714:	1aeb      	subs	r3, r5, r3
    6716:	0039      	movs	r1, r7
    6718:	0018      	movs	r0, r3
    671a:	9304      	str	r3, [sp, #16]
    671c:	f7fe fff0 	bl	5700 <__udivsi3>
    6720:	9b01      	ldr	r3, [sp, #4]
    6722:	0005      	movs	r5, r0
    6724:	4343      	muls	r3, r0
    6726:	0039      	movs	r1, r7
    6728:	9804      	ldr	r0, [sp, #16]
    672a:	4699      	mov	r9, r3
    672c:	f7ff f86e 	bl	580c <__aeabi_uidivmod>
    6730:	0433      	lsls	r3, r6, #16
    6732:	0409      	lsls	r1, r1, #16
    6734:	0c1b      	lsrs	r3, r3, #16
    6736:	430b      	orrs	r3, r1
    6738:	4599      	cmp	r9, r3
    673a:	d909      	bls.n	6750 <__aeabi_ddiv+0x2a0>
    673c:	4443      	add	r3, r8
    673e:	1e6a      	subs	r2, r5, #1
    6740:	4598      	cmp	r8, r3
    6742:	d900      	bls.n	6746 <__aeabi_ddiv+0x296>
    6744:	e11a      	b.n	697c <__aeabi_ddiv+0x4cc>
    6746:	4599      	cmp	r9, r3
    6748:	d800      	bhi.n	674c <__aeabi_ddiv+0x29c>
    674a:	e117      	b.n	697c <__aeabi_ddiv+0x4cc>
    674c:	3d02      	subs	r5, #2
    674e:	4443      	add	r3, r8
    6750:	464a      	mov	r2, r9
    6752:	1a9b      	subs	r3, r3, r2
    6754:	465a      	mov	r2, fp
    6756:	0412      	lsls	r2, r2, #16
    6758:	432a      	orrs	r2, r5
    675a:	9903      	ldr	r1, [sp, #12]
    675c:	4693      	mov	fp, r2
    675e:	0c10      	lsrs	r0, r2, #16
    6760:	0c0a      	lsrs	r2, r1, #16
    6762:	4691      	mov	r9, r2
    6764:	0409      	lsls	r1, r1, #16
    6766:	465a      	mov	r2, fp
    6768:	0c09      	lsrs	r1, r1, #16
    676a:	464e      	mov	r6, r9
    676c:	000d      	movs	r5, r1
    676e:	0412      	lsls	r2, r2, #16
    6770:	0c12      	lsrs	r2, r2, #16
    6772:	4345      	muls	r5, r0
    6774:	9105      	str	r1, [sp, #20]
    6776:	4351      	muls	r1, r2
    6778:	4372      	muls	r2, r6
    677a:	4370      	muls	r0, r6
    677c:	1952      	adds	r2, r2, r5
    677e:	0c0e      	lsrs	r6, r1, #16
    6780:	18b2      	adds	r2, r6, r2
    6782:	4295      	cmp	r5, r2
    6784:	d903      	bls.n	678e <__aeabi_ddiv+0x2de>
    6786:	2580      	movs	r5, #128	; 0x80
    6788:	026d      	lsls	r5, r5, #9
    678a:	46ac      	mov	ip, r5
    678c:	4460      	add	r0, ip
    678e:	0c15      	lsrs	r5, r2, #16
    6790:	0409      	lsls	r1, r1, #16
    6792:	0412      	lsls	r2, r2, #16
    6794:	0c09      	lsrs	r1, r1, #16
    6796:	1828      	adds	r0, r5, r0
    6798:	1852      	adds	r2, r2, r1
    679a:	4283      	cmp	r3, r0
    679c:	d200      	bcs.n	67a0 <__aeabi_ddiv+0x2f0>
    679e:	e0ce      	b.n	693e <__aeabi_ddiv+0x48e>
    67a0:	d100      	bne.n	67a4 <__aeabi_ddiv+0x2f4>
    67a2:	e0c8      	b.n	6936 <__aeabi_ddiv+0x486>
    67a4:	1a1d      	subs	r5, r3, r0
    67a6:	4653      	mov	r3, sl
    67a8:	1a9e      	subs	r6, r3, r2
    67aa:	45b2      	cmp	sl, r6
    67ac:	4192      	sbcs	r2, r2
    67ae:	4252      	negs	r2, r2
    67b0:	1aab      	subs	r3, r5, r2
    67b2:	469a      	mov	sl, r3
    67b4:	4598      	cmp	r8, r3
    67b6:	d100      	bne.n	67ba <__aeabi_ddiv+0x30a>
    67b8:	e117      	b.n	69ea <__aeabi_ddiv+0x53a>
    67ba:	0039      	movs	r1, r7
    67bc:	0018      	movs	r0, r3
    67be:	f7fe ff9f 	bl	5700 <__udivsi3>
    67c2:	9b01      	ldr	r3, [sp, #4]
    67c4:	0005      	movs	r5, r0
    67c6:	4343      	muls	r3, r0
    67c8:	0039      	movs	r1, r7
    67ca:	4650      	mov	r0, sl
    67cc:	9304      	str	r3, [sp, #16]
    67ce:	f7ff f81d 	bl	580c <__aeabi_uidivmod>
    67d2:	9804      	ldr	r0, [sp, #16]
    67d4:	040b      	lsls	r3, r1, #16
    67d6:	0c31      	lsrs	r1, r6, #16
    67d8:	4319      	orrs	r1, r3
    67da:	4288      	cmp	r0, r1
    67dc:	d909      	bls.n	67f2 <__aeabi_ddiv+0x342>
    67de:	4441      	add	r1, r8
    67e0:	1e6b      	subs	r3, r5, #1
    67e2:	4588      	cmp	r8, r1
    67e4:	d900      	bls.n	67e8 <__aeabi_ddiv+0x338>
    67e6:	e107      	b.n	69f8 <__aeabi_ddiv+0x548>
    67e8:	4288      	cmp	r0, r1
    67ea:	d800      	bhi.n	67ee <__aeabi_ddiv+0x33e>
    67ec:	e104      	b.n	69f8 <__aeabi_ddiv+0x548>
    67ee:	3d02      	subs	r5, #2
    67f0:	4441      	add	r1, r8
    67f2:	9b04      	ldr	r3, [sp, #16]
    67f4:	1acb      	subs	r3, r1, r3
    67f6:	0018      	movs	r0, r3
    67f8:	0039      	movs	r1, r7
    67fa:	9304      	str	r3, [sp, #16]
    67fc:	f7fe ff80 	bl	5700 <__udivsi3>
    6800:	9b01      	ldr	r3, [sp, #4]
    6802:	4682      	mov	sl, r0
    6804:	4343      	muls	r3, r0
    6806:	0039      	movs	r1, r7
    6808:	9804      	ldr	r0, [sp, #16]
    680a:	9301      	str	r3, [sp, #4]
    680c:	f7fe fffe 	bl	580c <__aeabi_uidivmod>
    6810:	9801      	ldr	r0, [sp, #4]
    6812:	040b      	lsls	r3, r1, #16
    6814:	0431      	lsls	r1, r6, #16
    6816:	0c09      	lsrs	r1, r1, #16
    6818:	4319      	orrs	r1, r3
    681a:	4288      	cmp	r0, r1
    681c:	d90d      	bls.n	683a <__aeabi_ddiv+0x38a>
    681e:	4653      	mov	r3, sl
    6820:	4441      	add	r1, r8
    6822:	3b01      	subs	r3, #1
    6824:	4588      	cmp	r8, r1
    6826:	d900      	bls.n	682a <__aeabi_ddiv+0x37a>
    6828:	e0e8      	b.n	69fc <__aeabi_ddiv+0x54c>
    682a:	4288      	cmp	r0, r1
    682c:	d800      	bhi.n	6830 <__aeabi_ddiv+0x380>
    682e:	e0e5      	b.n	69fc <__aeabi_ddiv+0x54c>
    6830:	2302      	movs	r3, #2
    6832:	425b      	negs	r3, r3
    6834:	469c      	mov	ip, r3
    6836:	4441      	add	r1, r8
    6838:	44e2      	add	sl, ip
    683a:	9b01      	ldr	r3, [sp, #4]
    683c:	042d      	lsls	r5, r5, #16
    683e:	1ace      	subs	r6, r1, r3
    6840:	4651      	mov	r1, sl
    6842:	4329      	orrs	r1, r5
    6844:	9d05      	ldr	r5, [sp, #20]
    6846:	464f      	mov	r7, r9
    6848:	002a      	movs	r2, r5
    684a:	040b      	lsls	r3, r1, #16
    684c:	0c08      	lsrs	r0, r1, #16
    684e:	0c1b      	lsrs	r3, r3, #16
    6850:	435a      	muls	r2, r3
    6852:	4345      	muls	r5, r0
    6854:	437b      	muls	r3, r7
    6856:	4378      	muls	r0, r7
    6858:	195b      	adds	r3, r3, r5
    685a:	0c17      	lsrs	r7, r2, #16
    685c:	18fb      	adds	r3, r7, r3
    685e:	429d      	cmp	r5, r3
    6860:	d903      	bls.n	686a <__aeabi_ddiv+0x3ba>
    6862:	2580      	movs	r5, #128	; 0x80
    6864:	026d      	lsls	r5, r5, #9
    6866:	46ac      	mov	ip, r5
    6868:	4460      	add	r0, ip
    686a:	0c1d      	lsrs	r5, r3, #16
    686c:	0412      	lsls	r2, r2, #16
    686e:	041b      	lsls	r3, r3, #16
    6870:	0c12      	lsrs	r2, r2, #16
    6872:	1828      	adds	r0, r5, r0
    6874:	189b      	adds	r3, r3, r2
    6876:	4286      	cmp	r6, r0
    6878:	d200      	bcs.n	687c <__aeabi_ddiv+0x3cc>
    687a:	e093      	b.n	69a4 <__aeabi_ddiv+0x4f4>
    687c:	d100      	bne.n	6880 <__aeabi_ddiv+0x3d0>
    687e:	e08e      	b.n	699e <__aeabi_ddiv+0x4ee>
    6880:	2301      	movs	r3, #1
    6882:	4319      	orrs	r1, r3
    6884:	4ba0      	ldr	r3, [pc, #640]	; (6b08 <__aeabi_ddiv+0x658>)
    6886:	18e3      	adds	r3, r4, r3
    6888:	2b00      	cmp	r3, #0
    688a:	dc00      	bgt.n	688e <__aeabi_ddiv+0x3de>
    688c:	e099      	b.n	69c2 <__aeabi_ddiv+0x512>
    688e:	074a      	lsls	r2, r1, #29
    6890:	d000      	beq.n	6894 <__aeabi_ddiv+0x3e4>
    6892:	e09e      	b.n	69d2 <__aeabi_ddiv+0x522>
    6894:	465a      	mov	r2, fp
    6896:	01d2      	lsls	r2, r2, #7
    6898:	d506      	bpl.n	68a8 <__aeabi_ddiv+0x3f8>
    689a:	465a      	mov	r2, fp
    689c:	4b9b      	ldr	r3, [pc, #620]	; (6b0c <__aeabi_ddiv+0x65c>)
    689e:	401a      	ands	r2, r3
    68a0:	2380      	movs	r3, #128	; 0x80
    68a2:	4693      	mov	fp, r2
    68a4:	00db      	lsls	r3, r3, #3
    68a6:	18e3      	adds	r3, r4, r3
    68a8:	4a99      	ldr	r2, [pc, #612]	; (6b10 <__aeabi_ddiv+0x660>)
    68aa:	4293      	cmp	r3, r2
    68ac:	dd68      	ble.n	6980 <__aeabi_ddiv+0x4d0>
    68ae:	2301      	movs	r3, #1
    68b0:	9a02      	ldr	r2, [sp, #8]
    68b2:	4c98      	ldr	r4, [pc, #608]	; (6b14 <__aeabi_ddiv+0x664>)
    68b4:	401a      	ands	r2, r3
    68b6:	2300      	movs	r3, #0
    68b8:	4694      	mov	ip, r2
    68ba:	4698      	mov	r8, r3
    68bc:	2200      	movs	r2, #0
    68be:	e6c5      	b.n	664c <__aeabi_ddiv+0x19c>
    68c0:	2280      	movs	r2, #128	; 0x80
    68c2:	464b      	mov	r3, r9
    68c4:	0312      	lsls	r2, r2, #12
    68c6:	4213      	tst	r3, r2
    68c8:	d00a      	beq.n	68e0 <__aeabi_ddiv+0x430>
    68ca:	465b      	mov	r3, fp
    68cc:	4213      	tst	r3, r2
    68ce:	d106      	bne.n	68de <__aeabi_ddiv+0x42e>
    68d0:	431a      	orrs	r2, r3
    68d2:	0312      	lsls	r2, r2, #12
    68d4:	0b12      	lsrs	r2, r2, #12
    68d6:	46ac      	mov	ip, r5
    68d8:	4688      	mov	r8, r1
    68da:	4c8e      	ldr	r4, [pc, #568]	; (6b14 <__aeabi_ddiv+0x664>)
    68dc:	e6b6      	b.n	664c <__aeabi_ddiv+0x19c>
    68de:	464b      	mov	r3, r9
    68e0:	431a      	orrs	r2, r3
    68e2:	0312      	lsls	r2, r2, #12
    68e4:	0b12      	lsrs	r2, r2, #12
    68e6:	46bc      	mov	ip, r7
    68e8:	4c8a      	ldr	r4, [pc, #552]	; (6b14 <__aeabi_ddiv+0x664>)
    68ea:	e6af      	b.n	664c <__aeabi_ddiv+0x19c>
    68ec:	0003      	movs	r3, r0
    68ee:	465a      	mov	r2, fp
    68f0:	3b28      	subs	r3, #40	; 0x28
    68f2:	409a      	lsls	r2, r3
    68f4:	2300      	movs	r3, #0
    68f6:	4691      	mov	r9, r2
    68f8:	4698      	mov	r8, r3
    68fa:	e657      	b.n	65ac <__aeabi_ddiv+0xfc>
    68fc:	4658      	mov	r0, fp
    68fe:	f000 ffdf 	bl	78c0 <__clzsi2>
    6902:	3020      	adds	r0, #32
    6904:	e640      	b.n	6588 <__aeabi_ddiv+0xd8>
    6906:	0003      	movs	r3, r0
    6908:	4652      	mov	r2, sl
    690a:	3b28      	subs	r3, #40	; 0x28
    690c:	409a      	lsls	r2, r3
    690e:	2100      	movs	r1, #0
    6910:	4693      	mov	fp, r2
    6912:	e677      	b.n	6604 <__aeabi_ddiv+0x154>
    6914:	f000 ffd4 	bl	78c0 <__clzsi2>
    6918:	3020      	adds	r0, #32
    691a:	e65f      	b.n	65dc <__aeabi_ddiv+0x12c>
    691c:	4588      	cmp	r8, r1
    691e:	d200      	bcs.n	6922 <__aeabi_ddiv+0x472>
    6920:	e6c7      	b.n	66b2 <__aeabi_ddiv+0x202>
    6922:	464b      	mov	r3, r9
    6924:	07de      	lsls	r6, r3, #31
    6926:	085d      	lsrs	r5, r3, #1
    6928:	4643      	mov	r3, r8
    692a:	085b      	lsrs	r3, r3, #1
    692c:	431e      	orrs	r6, r3
    692e:	4643      	mov	r3, r8
    6930:	07db      	lsls	r3, r3, #31
    6932:	469a      	mov	sl, r3
    6934:	e6c2      	b.n	66bc <__aeabi_ddiv+0x20c>
    6936:	2500      	movs	r5, #0
    6938:	4592      	cmp	sl, r2
    693a:	d300      	bcc.n	693e <__aeabi_ddiv+0x48e>
    693c:	e733      	b.n	67a6 <__aeabi_ddiv+0x2f6>
    693e:	9e03      	ldr	r6, [sp, #12]
    6940:	4659      	mov	r1, fp
    6942:	46b4      	mov	ip, r6
    6944:	44e2      	add	sl, ip
    6946:	45b2      	cmp	sl, r6
    6948:	41ad      	sbcs	r5, r5
    694a:	426d      	negs	r5, r5
    694c:	4445      	add	r5, r8
    694e:	18eb      	adds	r3, r5, r3
    6950:	3901      	subs	r1, #1
    6952:	4598      	cmp	r8, r3
    6954:	d207      	bcs.n	6966 <__aeabi_ddiv+0x4b6>
    6956:	4298      	cmp	r0, r3
    6958:	d900      	bls.n	695c <__aeabi_ddiv+0x4ac>
    695a:	e07f      	b.n	6a5c <__aeabi_ddiv+0x5ac>
    695c:	d100      	bne.n	6960 <__aeabi_ddiv+0x4b0>
    695e:	e0bc      	b.n	6ada <__aeabi_ddiv+0x62a>
    6960:	1a1d      	subs	r5, r3, r0
    6962:	468b      	mov	fp, r1
    6964:	e71f      	b.n	67a6 <__aeabi_ddiv+0x2f6>
    6966:	4598      	cmp	r8, r3
    6968:	d1fa      	bne.n	6960 <__aeabi_ddiv+0x4b0>
    696a:	9d03      	ldr	r5, [sp, #12]
    696c:	4555      	cmp	r5, sl
    696e:	d9f2      	bls.n	6956 <__aeabi_ddiv+0x4a6>
    6970:	4643      	mov	r3, r8
    6972:	468b      	mov	fp, r1
    6974:	1a1d      	subs	r5, r3, r0
    6976:	e716      	b.n	67a6 <__aeabi_ddiv+0x2f6>
    6978:	469b      	mov	fp, r3
    697a:	e6ca      	b.n	6712 <__aeabi_ddiv+0x262>
    697c:	0015      	movs	r5, r2
    697e:	e6e7      	b.n	6750 <__aeabi_ddiv+0x2a0>
    6980:	465a      	mov	r2, fp
    6982:	08c9      	lsrs	r1, r1, #3
    6984:	0752      	lsls	r2, r2, #29
    6986:	430a      	orrs	r2, r1
    6988:	055b      	lsls	r3, r3, #21
    698a:	4690      	mov	r8, r2
    698c:	0d5c      	lsrs	r4, r3, #21
    698e:	465a      	mov	r2, fp
    6990:	2301      	movs	r3, #1
    6992:	9902      	ldr	r1, [sp, #8]
    6994:	0252      	lsls	r2, r2, #9
    6996:	4019      	ands	r1, r3
    6998:	0b12      	lsrs	r2, r2, #12
    699a:	468c      	mov	ip, r1
    699c:	e656      	b.n	664c <__aeabi_ddiv+0x19c>
    699e:	2b00      	cmp	r3, #0
    69a0:	d100      	bne.n	69a4 <__aeabi_ddiv+0x4f4>
    69a2:	e76f      	b.n	6884 <__aeabi_ddiv+0x3d4>
    69a4:	4446      	add	r6, r8
    69a6:	1e4a      	subs	r2, r1, #1
    69a8:	45b0      	cmp	r8, r6
    69aa:	d929      	bls.n	6a00 <__aeabi_ddiv+0x550>
    69ac:	0011      	movs	r1, r2
    69ae:	4286      	cmp	r6, r0
    69b0:	d000      	beq.n	69b4 <__aeabi_ddiv+0x504>
    69b2:	e765      	b.n	6880 <__aeabi_ddiv+0x3d0>
    69b4:	9a03      	ldr	r2, [sp, #12]
    69b6:	4293      	cmp	r3, r2
    69b8:	d000      	beq.n	69bc <__aeabi_ddiv+0x50c>
    69ba:	e761      	b.n	6880 <__aeabi_ddiv+0x3d0>
    69bc:	e762      	b.n	6884 <__aeabi_ddiv+0x3d4>
    69be:	2101      	movs	r1, #1
    69c0:	4249      	negs	r1, r1
    69c2:	2001      	movs	r0, #1
    69c4:	1ac2      	subs	r2, r0, r3
    69c6:	2a38      	cmp	r2, #56	; 0x38
    69c8:	dd21      	ble.n	6a0e <__aeabi_ddiv+0x55e>
    69ca:	9b02      	ldr	r3, [sp, #8]
    69cc:	4003      	ands	r3, r0
    69ce:	469c      	mov	ip, r3
    69d0:	e638      	b.n	6644 <__aeabi_ddiv+0x194>
    69d2:	220f      	movs	r2, #15
    69d4:	400a      	ands	r2, r1
    69d6:	2a04      	cmp	r2, #4
    69d8:	d100      	bne.n	69dc <__aeabi_ddiv+0x52c>
    69da:	e75b      	b.n	6894 <__aeabi_ddiv+0x3e4>
    69dc:	000a      	movs	r2, r1
    69de:	1d11      	adds	r1, r2, #4
    69e0:	4291      	cmp	r1, r2
    69e2:	4192      	sbcs	r2, r2
    69e4:	4252      	negs	r2, r2
    69e6:	4493      	add	fp, r2
    69e8:	e754      	b.n	6894 <__aeabi_ddiv+0x3e4>
    69ea:	4b47      	ldr	r3, [pc, #284]	; (6b08 <__aeabi_ddiv+0x658>)
    69ec:	18e3      	adds	r3, r4, r3
    69ee:	2b00      	cmp	r3, #0
    69f0:	dde5      	ble.n	69be <__aeabi_ddiv+0x50e>
    69f2:	2201      	movs	r2, #1
    69f4:	4252      	negs	r2, r2
    69f6:	e7f2      	b.n	69de <__aeabi_ddiv+0x52e>
    69f8:	001d      	movs	r5, r3
    69fa:	e6fa      	b.n	67f2 <__aeabi_ddiv+0x342>
    69fc:	469a      	mov	sl, r3
    69fe:	e71c      	b.n	683a <__aeabi_ddiv+0x38a>
    6a00:	42b0      	cmp	r0, r6
    6a02:	d839      	bhi.n	6a78 <__aeabi_ddiv+0x5c8>
    6a04:	d06e      	beq.n	6ae4 <__aeabi_ddiv+0x634>
    6a06:	0011      	movs	r1, r2
    6a08:	e73a      	b.n	6880 <__aeabi_ddiv+0x3d0>
    6a0a:	9302      	str	r3, [sp, #8]
    6a0c:	e73a      	b.n	6884 <__aeabi_ddiv+0x3d4>
    6a0e:	2a1f      	cmp	r2, #31
    6a10:	dc3c      	bgt.n	6a8c <__aeabi_ddiv+0x5dc>
    6a12:	2320      	movs	r3, #32
    6a14:	1a9b      	subs	r3, r3, r2
    6a16:	000c      	movs	r4, r1
    6a18:	4658      	mov	r0, fp
    6a1a:	4099      	lsls	r1, r3
    6a1c:	4098      	lsls	r0, r3
    6a1e:	1e4b      	subs	r3, r1, #1
    6a20:	4199      	sbcs	r1, r3
    6a22:	465b      	mov	r3, fp
    6a24:	40d4      	lsrs	r4, r2
    6a26:	40d3      	lsrs	r3, r2
    6a28:	4320      	orrs	r0, r4
    6a2a:	4308      	orrs	r0, r1
    6a2c:	001a      	movs	r2, r3
    6a2e:	0743      	lsls	r3, r0, #29
    6a30:	d009      	beq.n	6a46 <__aeabi_ddiv+0x596>
    6a32:	230f      	movs	r3, #15
    6a34:	4003      	ands	r3, r0
    6a36:	2b04      	cmp	r3, #4
    6a38:	d005      	beq.n	6a46 <__aeabi_ddiv+0x596>
    6a3a:	0001      	movs	r1, r0
    6a3c:	1d08      	adds	r0, r1, #4
    6a3e:	4288      	cmp	r0, r1
    6a40:	419b      	sbcs	r3, r3
    6a42:	425b      	negs	r3, r3
    6a44:	18d2      	adds	r2, r2, r3
    6a46:	0213      	lsls	r3, r2, #8
    6a48:	d53a      	bpl.n	6ac0 <__aeabi_ddiv+0x610>
    6a4a:	2301      	movs	r3, #1
    6a4c:	9a02      	ldr	r2, [sp, #8]
    6a4e:	2401      	movs	r4, #1
    6a50:	401a      	ands	r2, r3
    6a52:	2300      	movs	r3, #0
    6a54:	4694      	mov	ip, r2
    6a56:	4698      	mov	r8, r3
    6a58:	2200      	movs	r2, #0
    6a5a:	e5f7      	b.n	664c <__aeabi_ddiv+0x19c>
    6a5c:	2102      	movs	r1, #2
    6a5e:	4249      	negs	r1, r1
    6a60:	468c      	mov	ip, r1
    6a62:	9d03      	ldr	r5, [sp, #12]
    6a64:	44e3      	add	fp, ip
    6a66:	46ac      	mov	ip, r5
    6a68:	44e2      	add	sl, ip
    6a6a:	45aa      	cmp	sl, r5
    6a6c:	41ad      	sbcs	r5, r5
    6a6e:	426d      	negs	r5, r5
    6a70:	4445      	add	r5, r8
    6a72:	18ed      	adds	r5, r5, r3
    6a74:	1a2d      	subs	r5, r5, r0
    6a76:	e696      	b.n	67a6 <__aeabi_ddiv+0x2f6>
    6a78:	1e8a      	subs	r2, r1, #2
    6a7a:	9903      	ldr	r1, [sp, #12]
    6a7c:	004d      	lsls	r5, r1, #1
    6a7e:	428d      	cmp	r5, r1
    6a80:	4189      	sbcs	r1, r1
    6a82:	4249      	negs	r1, r1
    6a84:	4441      	add	r1, r8
    6a86:	1876      	adds	r6, r6, r1
    6a88:	9503      	str	r5, [sp, #12]
    6a8a:	e78f      	b.n	69ac <__aeabi_ddiv+0x4fc>
    6a8c:	201f      	movs	r0, #31
    6a8e:	4240      	negs	r0, r0
    6a90:	1ac3      	subs	r3, r0, r3
    6a92:	4658      	mov	r0, fp
    6a94:	40d8      	lsrs	r0, r3
    6a96:	0003      	movs	r3, r0
    6a98:	2a20      	cmp	r2, #32
    6a9a:	d028      	beq.n	6aee <__aeabi_ddiv+0x63e>
    6a9c:	2040      	movs	r0, #64	; 0x40
    6a9e:	465d      	mov	r5, fp
    6aa0:	1a82      	subs	r2, r0, r2
    6aa2:	4095      	lsls	r5, r2
    6aa4:	4329      	orrs	r1, r5
    6aa6:	1e4a      	subs	r2, r1, #1
    6aa8:	4191      	sbcs	r1, r2
    6aaa:	4319      	orrs	r1, r3
    6aac:	2307      	movs	r3, #7
    6aae:	2200      	movs	r2, #0
    6ab0:	400b      	ands	r3, r1
    6ab2:	d009      	beq.n	6ac8 <__aeabi_ddiv+0x618>
    6ab4:	230f      	movs	r3, #15
    6ab6:	2200      	movs	r2, #0
    6ab8:	400b      	ands	r3, r1
    6aba:	0008      	movs	r0, r1
    6abc:	2b04      	cmp	r3, #4
    6abe:	d1bd      	bne.n	6a3c <__aeabi_ddiv+0x58c>
    6ac0:	0001      	movs	r1, r0
    6ac2:	0753      	lsls	r3, r2, #29
    6ac4:	0252      	lsls	r2, r2, #9
    6ac6:	0b12      	lsrs	r2, r2, #12
    6ac8:	08c9      	lsrs	r1, r1, #3
    6aca:	4319      	orrs	r1, r3
    6acc:	2301      	movs	r3, #1
    6ace:	4688      	mov	r8, r1
    6ad0:	9902      	ldr	r1, [sp, #8]
    6ad2:	2400      	movs	r4, #0
    6ad4:	4019      	ands	r1, r3
    6ad6:	468c      	mov	ip, r1
    6ad8:	e5b8      	b.n	664c <__aeabi_ddiv+0x19c>
    6ada:	4552      	cmp	r2, sl
    6adc:	d8be      	bhi.n	6a5c <__aeabi_ddiv+0x5ac>
    6ade:	468b      	mov	fp, r1
    6ae0:	2500      	movs	r5, #0
    6ae2:	e660      	b.n	67a6 <__aeabi_ddiv+0x2f6>
    6ae4:	9d03      	ldr	r5, [sp, #12]
    6ae6:	429d      	cmp	r5, r3
    6ae8:	d3c6      	bcc.n	6a78 <__aeabi_ddiv+0x5c8>
    6aea:	0011      	movs	r1, r2
    6aec:	e762      	b.n	69b4 <__aeabi_ddiv+0x504>
    6aee:	2500      	movs	r5, #0
    6af0:	e7d8      	b.n	6aa4 <__aeabi_ddiv+0x5f4>
    6af2:	2280      	movs	r2, #128	; 0x80
    6af4:	465b      	mov	r3, fp
    6af6:	0312      	lsls	r2, r2, #12
    6af8:	431a      	orrs	r2, r3
    6afa:	9b01      	ldr	r3, [sp, #4]
    6afc:	0312      	lsls	r2, r2, #12
    6afe:	0b12      	lsrs	r2, r2, #12
    6b00:	469c      	mov	ip, r3
    6b02:	4688      	mov	r8, r1
    6b04:	4c03      	ldr	r4, [pc, #12]	; (6b14 <__aeabi_ddiv+0x664>)
    6b06:	e5a1      	b.n	664c <__aeabi_ddiv+0x19c>
    6b08:	000003ff 	.word	0x000003ff
    6b0c:	feffffff 	.word	0xfeffffff
    6b10:	000007fe 	.word	0x000007fe
    6b14:	000007ff 	.word	0x000007ff

00006b18 <__aeabi_dmul>:
    6b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    6b1a:	4657      	mov	r7, sl
    6b1c:	4645      	mov	r5, r8
    6b1e:	46de      	mov	lr, fp
    6b20:	464e      	mov	r6, r9
    6b22:	b5e0      	push	{r5, r6, r7, lr}
    6b24:	030c      	lsls	r4, r1, #12
    6b26:	4698      	mov	r8, r3
    6b28:	004e      	lsls	r6, r1, #1
    6b2a:	0b23      	lsrs	r3, r4, #12
    6b2c:	b087      	sub	sp, #28
    6b2e:	0007      	movs	r7, r0
    6b30:	4692      	mov	sl, r2
    6b32:	469b      	mov	fp, r3
    6b34:	0d76      	lsrs	r6, r6, #21
    6b36:	0fcd      	lsrs	r5, r1, #31
    6b38:	2e00      	cmp	r6, #0
    6b3a:	d06b      	beq.n	6c14 <__aeabi_dmul+0xfc>
    6b3c:	4b6d      	ldr	r3, [pc, #436]	; (6cf4 <__aeabi_dmul+0x1dc>)
    6b3e:	429e      	cmp	r6, r3
    6b40:	d035      	beq.n	6bae <__aeabi_dmul+0x96>
    6b42:	2480      	movs	r4, #128	; 0x80
    6b44:	465b      	mov	r3, fp
    6b46:	0f42      	lsrs	r2, r0, #29
    6b48:	0424      	lsls	r4, r4, #16
    6b4a:	00db      	lsls	r3, r3, #3
    6b4c:	4314      	orrs	r4, r2
    6b4e:	431c      	orrs	r4, r3
    6b50:	00c3      	lsls	r3, r0, #3
    6b52:	4699      	mov	r9, r3
    6b54:	4b68      	ldr	r3, [pc, #416]	; (6cf8 <__aeabi_dmul+0x1e0>)
    6b56:	46a3      	mov	fp, r4
    6b58:	469c      	mov	ip, r3
    6b5a:	2300      	movs	r3, #0
    6b5c:	2700      	movs	r7, #0
    6b5e:	4466      	add	r6, ip
    6b60:	9302      	str	r3, [sp, #8]
    6b62:	4643      	mov	r3, r8
    6b64:	031c      	lsls	r4, r3, #12
    6b66:	005a      	lsls	r2, r3, #1
    6b68:	0fdb      	lsrs	r3, r3, #31
    6b6a:	4650      	mov	r0, sl
    6b6c:	0b24      	lsrs	r4, r4, #12
    6b6e:	0d52      	lsrs	r2, r2, #21
    6b70:	4698      	mov	r8, r3
    6b72:	d100      	bne.n	6b76 <__aeabi_dmul+0x5e>
    6b74:	e076      	b.n	6c64 <__aeabi_dmul+0x14c>
    6b76:	4b5f      	ldr	r3, [pc, #380]	; (6cf4 <__aeabi_dmul+0x1dc>)
    6b78:	429a      	cmp	r2, r3
    6b7a:	d06d      	beq.n	6c58 <__aeabi_dmul+0x140>
    6b7c:	2380      	movs	r3, #128	; 0x80
    6b7e:	0f41      	lsrs	r1, r0, #29
    6b80:	041b      	lsls	r3, r3, #16
    6b82:	430b      	orrs	r3, r1
    6b84:	495c      	ldr	r1, [pc, #368]	; (6cf8 <__aeabi_dmul+0x1e0>)
    6b86:	00e4      	lsls	r4, r4, #3
    6b88:	468c      	mov	ip, r1
    6b8a:	431c      	orrs	r4, r3
    6b8c:	00c3      	lsls	r3, r0, #3
    6b8e:	2000      	movs	r0, #0
    6b90:	4462      	add	r2, ip
    6b92:	4641      	mov	r1, r8
    6b94:	18b6      	adds	r6, r6, r2
    6b96:	4069      	eors	r1, r5
    6b98:	1c72      	adds	r2, r6, #1
    6b9a:	9101      	str	r1, [sp, #4]
    6b9c:	4694      	mov	ip, r2
    6b9e:	4307      	orrs	r7, r0
    6ba0:	2f0f      	cmp	r7, #15
    6ba2:	d900      	bls.n	6ba6 <__aeabi_dmul+0x8e>
    6ba4:	e0b0      	b.n	6d08 <__aeabi_dmul+0x1f0>
    6ba6:	4a55      	ldr	r2, [pc, #340]	; (6cfc <__aeabi_dmul+0x1e4>)
    6ba8:	00bf      	lsls	r7, r7, #2
    6baa:	59d2      	ldr	r2, [r2, r7]
    6bac:	4697      	mov	pc, r2
    6bae:	465b      	mov	r3, fp
    6bb0:	4303      	orrs	r3, r0
    6bb2:	4699      	mov	r9, r3
    6bb4:	d000      	beq.n	6bb8 <__aeabi_dmul+0xa0>
    6bb6:	e087      	b.n	6cc8 <__aeabi_dmul+0x1b0>
    6bb8:	2300      	movs	r3, #0
    6bba:	469b      	mov	fp, r3
    6bbc:	3302      	adds	r3, #2
    6bbe:	2708      	movs	r7, #8
    6bc0:	9302      	str	r3, [sp, #8]
    6bc2:	e7ce      	b.n	6b62 <__aeabi_dmul+0x4a>
    6bc4:	4642      	mov	r2, r8
    6bc6:	9201      	str	r2, [sp, #4]
    6bc8:	2802      	cmp	r0, #2
    6bca:	d067      	beq.n	6c9c <__aeabi_dmul+0x184>
    6bcc:	2803      	cmp	r0, #3
    6bce:	d100      	bne.n	6bd2 <__aeabi_dmul+0xba>
    6bd0:	e20e      	b.n	6ff0 <__aeabi_dmul+0x4d8>
    6bd2:	2801      	cmp	r0, #1
    6bd4:	d000      	beq.n	6bd8 <__aeabi_dmul+0xc0>
    6bd6:	e162      	b.n	6e9e <__aeabi_dmul+0x386>
    6bd8:	2300      	movs	r3, #0
    6bda:	2400      	movs	r4, #0
    6bdc:	2200      	movs	r2, #0
    6bde:	4699      	mov	r9, r3
    6be0:	9901      	ldr	r1, [sp, #4]
    6be2:	4001      	ands	r1, r0
    6be4:	b2cd      	uxtb	r5, r1
    6be6:	2100      	movs	r1, #0
    6be8:	0312      	lsls	r2, r2, #12
    6bea:	0d0b      	lsrs	r3, r1, #20
    6bec:	0b12      	lsrs	r2, r2, #12
    6bee:	051b      	lsls	r3, r3, #20
    6bf0:	4313      	orrs	r3, r2
    6bf2:	4a43      	ldr	r2, [pc, #268]	; (6d00 <__aeabi_dmul+0x1e8>)
    6bf4:	0524      	lsls	r4, r4, #20
    6bf6:	4013      	ands	r3, r2
    6bf8:	431c      	orrs	r4, r3
    6bfa:	0064      	lsls	r4, r4, #1
    6bfc:	07ed      	lsls	r5, r5, #31
    6bfe:	0864      	lsrs	r4, r4, #1
    6c00:	432c      	orrs	r4, r5
    6c02:	4648      	mov	r0, r9
    6c04:	0021      	movs	r1, r4
    6c06:	b007      	add	sp, #28
    6c08:	bc3c      	pop	{r2, r3, r4, r5}
    6c0a:	4690      	mov	r8, r2
    6c0c:	4699      	mov	r9, r3
    6c0e:	46a2      	mov	sl, r4
    6c10:	46ab      	mov	fp, r5
    6c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6c14:	4303      	orrs	r3, r0
    6c16:	4699      	mov	r9, r3
    6c18:	d04f      	beq.n	6cba <__aeabi_dmul+0x1a2>
    6c1a:	465b      	mov	r3, fp
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d100      	bne.n	6c22 <__aeabi_dmul+0x10a>
    6c20:	e189      	b.n	6f36 <__aeabi_dmul+0x41e>
    6c22:	4658      	mov	r0, fp
    6c24:	f000 fe4c 	bl	78c0 <__clzsi2>
    6c28:	0003      	movs	r3, r0
    6c2a:	3b0b      	subs	r3, #11
    6c2c:	2b1c      	cmp	r3, #28
    6c2e:	dd00      	ble.n	6c32 <__aeabi_dmul+0x11a>
    6c30:	e17a      	b.n	6f28 <__aeabi_dmul+0x410>
    6c32:	221d      	movs	r2, #29
    6c34:	1ad3      	subs	r3, r2, r3
    6c36:	003a      	movs	r2, r7
    6c38:	0001      	movs	r1, r0
    6c3a:	465c      	mov	r4, fp
    6c3c:	40da      	lsrs	r2, r3
    6c3e:	3908      	subs	r1, #8
    6c40:	408c      	lsls	r4, r1
    6c42:	0013      	movs	r3, r2
    6c44:	408f      	lsls	r7, r1
    6c46:	4323      	orrs	r3, r4
    6c48:	469b      	mov	fp, r3
    6c4a:	46b9      	mov	r9, r7
    6c4c:	2300      	movs	r3, #0
    6c4e:	4e2d      	ldr	r6, [pc, #180]	; (6d04 <__aeabi_dmul+0x1ec>)
    6c50:	2700      	movs	r7, #0
    6c52:	1a36      	subs	r6, r6, r0
    6c54:	9302      	str	r3, [sp, #8]
    6c56:	e784      	b.n	6b62 <__aeabi_dmul+0x4a>
    6c58:	4653      	mov	r3, sl
    6c5a:	4323      	orrs	r3, r4
    6c5c:	d12a      	bne.n	6cb4 <__aeabi_dmul+0x19c>
    6c5e:	2400      	movs	r4, #0
    6c60:	2002      	movs	r0, #2
    6c62:	e796      	b.n	6b92 <__aeabi_dmul+0x7a>
    6c64:	4653      	mov	r3, sl
    6c66:	4323      	orrs	r3, r4
    6c68:	d020      	beq.n	6cac <__aeabi_dmul+0x194>
    6c6a:	2c00      	cmp	r4, #0
    6c6c:	d100      	bne.n	6c70 <__aeabi_dmul+0x158>
    6c6e:	e157      	b.n	6f20 <__aeabi_dmul+0x408>
    6c70:	0020      	movs	r0, r4
    6c72:	f000 fe25 	bl	78c0 <__clzsi2>
    6c76:	0003      	movs	r3, r0
    6c78:	3b0b      	subs	r3, #11
    6c7a:	2b1c      	cmp	r3, #28
    6c7c:	dd00      	ble.n	6c80 <__aeabi_dmul+0x168>
    6c7e:	e149      	b.n	6f14 <__aeabi_dmul+0x3fc>
    6c80:	211d      	movs	r1, #29
    6c82:	1acb      	subs	r3, r1, r3
    6c84:	4651      	mov	r1, sl
    6c86:	0002      	movs	r2, r0
    6c88:	40d9      	lsrs	r1, r3
    6c8a:	4653      	mov	r3, sl
    6c8c:	3a08      	subs	r2, #8
    6c8e:	4094      	lsls	r4, r2
    6c90:	4093      	lsls	r3, r2
    6c92:	430c      	orrs	r4, r1
    6c94:	4a1b      	ldr	r2, [pc, #108]	; (6d04 <__aeabi_dmul+0x1ec>)
    6c96:	1a12      	subs	r2, r2, r0
    6c98:	2000      	movs	r0, #0
    6c9a:	e77a      	b.n	6b92 <__aeabi_dmul+0x7a>
    6c9c:	2501      	movs	r5, #1
    6c9e:	9b01      	ldr	r3, [sp, #4]
    6ca0:	4c14      	ldr	r4, [pc, #80]	; (6cf4 <__aeabi_dmul+0x1dc>)
    6ca2:	401d      	ands	r5, r3
    6ca4:	2300      	movs	r3, #0
    6ca6:	2200      	movs	r2, #0
    6ca8:	4699      	mov	r9, r3
    6caa:	e79c      	b.n	6be6 <__aeabi_dmul+0xce>
    6cac:	2400      	movs	r4, #0
    6cae:	2200      	movs	r2, #0
    6cb0:	2001      	movs	r0, #1
    6cb2:	e76e      	b.n	6b92 <__aeabi_dmul+0x7a>
    6cb4:	4653      	mov	r3, sl
    6cb6:	2003      	movs	r0, #3
    6cb8:	e76b      	b.n	6b92 <__aeabi_dmul+0x7a>
    6cba:	2300      	movs	r3, #0
    6cbc:	469b      	mov	fp, r3
    6cbe:	3301      	adds	r3, #1
    6cc0:	2704      	movs	r7, #4
    6cc2:	2600      	movs	r6, #0
    6cc4:	9302      	str	r3, [sp, #8]
    6cc6:	e74c      	b.n	6b62 <__aeabi_dmul+0x4a>
    6cc8:	2303      	movs	r3, #3
    6cca:	4681      	mov	r9, r0
    6ccc:	270c      	movs	r7, #12
    6cce:	9302      	str	r3, [sp, #8]
    6cd0:	e747      	b.n	6b62 <__aeabi_dmul+0x4a>
    6cd2:	2280      	movs	r2, #128	; 0x80
    6cd4:	2300      	movs	r3, #0
    6cd6:	2500      	movs	r5, #0
    6cd8:	0312      	lsls	r2, r2, #12
    6cda:	4699      	mov	r9, r3
    6cdc:	4c05      	ldr	r4, [pc, #20]	; (6cf4 <__aeabi_dmul+0x1dc>)
    6cde:	e782      	b.n	6be6 <__aeabi_dmul+0xce>
    6ce0:	465c      	mov	r4, fp
    6ce2:	464b      	mov	r3, r9
    6ce4:	9802      	ldr	r0, [sp, #8]
    6ce6:	e76f      	b.n	6bc8 <__aeabi_dmul+0xb0>
    6ce8:	465c      	mov	r4, fp
    6cea:	464b      	mov	r3, r9
    6cec:	9501      	str	r5, [sp, #4]
    6cee:	9802      	ldr	r0, [sp, #8]
    6cf0:	e76a      	b.n	6bc8 <__aeabi_dmul+0xb0>
    6cf2:	46c0      	nop			; (mov r8, r8)
    6cf4:	000007ff 	.word	0x000007ff
    6cf8:	fffffc01 	.word	0xfffffc01
    6cfc:	00011d1c 	.word	0x00011d1c
    6d00:	800fffff 	.word	0x800fffff
    6d04:	fffffc0d 	.word	0xfffffc0d
    6d08:	464a      	mov	r2, r9
    6d0a:	4649      	mov	r1, r9
    6d0c:	0c17      	lsrs	r7, r2, #16
    6d0e:	0c1a      	lsrs	r2, r3, #16
    6d10:	041b      	lsls	r3, r3, #16
    6d12:	0c1b      	lsrs	r3, r3, #16
    6d14:	0408      	lsls	r0, r1, #16
    6d16:	0019      	movs	r1, r3
    6d18:	0c00      	lsrs	r0, r0, #16
    6d1a:	4341      	muls	r1, r0
    6d1c:	0015      	movs	r5, r2
    6d1e:	4688      	mov	r8, r1
    6d20:	0019      	movs	r1, r3
    6d22:	437d      	muls	r5, r7
    6d24:	4379      	muls	r1, r7
    6d26:	9503      	str	r5, [sp, #12]
    6d28:	4689      	mov	r9, r1
    6d2a:	0029      	movs	r1, r5
    6d2c:	0015      	movs	r5, r2
    6d2e:	4345      	muls	r5, r0
    6d30:	444d      	add	r5, r9
    6d32:	9502      	str	r5, [sp, #8]
    6d34:	4645      	mov	r5, r8
    6d36:	0c2d      	lsrs	r5, r5, #16
    6d38:	46aa      	mov	sl, r5
    6d3a:	9d02      	ldr	r5, [sp, #8]
    6d3c:	4455      	add	r5, sl
    6d3e:	45a9      	cmp	r9, r5
    6d40:	d906      	bls.n	6d50 <__aeabi_dmul+0x238>
    6d42:	468a      	mov	sl, r1
    6d44:	2180      	movs	r1, #128	; 0x80
    6d46:	0249      	lsls	r1, r1, #9
    6d48:	4689      	mov	r9, r1
    6d4a:	44ca      	add	sl, r9
    6d4c:	4651      	mov	r1, sl
    6d4e:	9103      	str	r1, [sp, #12]
    6d50:	0c29      	lsrs	r1, r5, #16
    6d52:	9104      	str	r1, [sp, #16]
    6d54:	4641      	mov	r1, r8
    6d56:	0409      	lsls	r1, r1, #16
    6d58:	042d      	lsls	r5, r5, #16
    6d5a:	0c09      	lsrs	r1, r1, #16
    6d5c:	4688      	mov	r8, r1
    6d5e:	0029      	movs	r1, r5
    6d60:	0c25      	lsrs	r5, r4, #16
    6d62:	0424      	lsls	r4, r4, #16
    6d64:	4441      	add	r1, r8
    6d66:	0c24      	lsrs	r4, r4, #16
    6d68:	9105      	str	r1, [sp, #20]
    6d6a:	0021      	movs	r1, r4
    6d6c:	4341      	muls	r1, r0
    6d6e:	4688      	mov	r8, r1
    6d70:	0021      	movs	r1, r4
    6d72:	4379      	muls	r1, r7
    6d74:	468a      	mov	sl, r1
    6d76:	4368      	muls	r0, r5
    6d78:	4641      	mov	r1, r8
    6d7a:	4450      	add	r0, sl
    6d7c:	4681      	mov	r9, r0
    6d7e:	0c08      	lsrs	r0, r1, #16
    6d80:	4448      	add	r0, r9
    6d82:	436f      	muls	r7, r5
    6d84:	4582      	cmp	sl, r0
    6d86:	d903      	bls.n	6d90 <__aeabi_dmul+0x278>
    6d88:	2180      	movs	r1, #128	; 0x80
    6d8a:	0249      	lsls	r1, r1, #9
    6d8c:	4689      	mov	r9, r1
    6d8e:	444f      	add	r7, r9
    6d90:	0c01      	lsrs	r1, r0, #16
    6d92:	4689      	mov	r9, r1
    6d94:	0039      	movs	r1, r7
    6d96:	4449      	add	r1, r9
    6d98:	9102      	str	r1, [sp, #8]
    6d9a:	4641      	mov	r1, r8
    6d9c:	040f      	lsls	r7, r1, #16
    6d9e:	9904      	ldr	r1, [sp, #16]
    6da0:	0c3f      	lsrs	r7, r7, #16
    6da2:	4688      	mov	r8, r1
    6da4:	0400      	lsls	r0, r0, #16
    6da6:	19c0      	adds	r0, r0, r7
    6da8:	4480      	add	r8, r0
    6daa:	4641      	mov	r1, r8
    6dac:	9104      	str	r1, [sp, #16]
    6dae:	4659      	mov	r1, fp
    6db0:	0c0f      	lsrs	r7, r1, #16
    6db2:	0409      	lsls	r1, r1, #16
    6db4:	0c09      	lsrs	r1, r1, #16
    6db6:	4688      	mov	r8, r1
    6db8:	4359      	muls	r1, r3
    6dba:	468a      	mov	sl, r1
    6dbc:	0039      	movs	r1, r7
    6dbe:	4351      	muls	r1, r2
    6dc0:	4689      	mov	r9, r1
    6dc2:	4641      	mov	r1, r8
    6dc4:	434a      	muls	r2, r1
    6dc6:	4651      	mov	r1, sl
    6dc8:	0c09      	lsrs	r1, r1, #16
    6dca:	468b      	mov	fp, r1
    6dcc:	437b      	muls	r3, r7
    6dce:	18d2      	adds	r2, r2, r3
    6dd0:	445a      	add	r2, fp
    6dd2:	4293      	cmp	r3, r2
    6dd4:	d903      	bls.n	6dde <__aeabi_dmul+0x2c6>
    6dd6:	2380      	movs	r3, #128	; 0x80
    6dd8:	025b      	lsls	r3, r3, #9
    6dda:	469b      	mov	fp, r3
    6ddc:	44d9      	add	r9, fp
    6dde:	4651      	mov	r1, sl
    6de0:	0409      	lsls	r1, r1, #16
    6de2:	0c09      	lsrs	r1, r1, #16
    6de4:	468a      	mov	sl, r1
    6de6:	4641      	mov	r1, r8
    6de8:	4361      	muls	r1, r4
    6dea:	437c      	muls	r4, r7
    6dec:	0c13      	lsrs	r3, r2, #16
    6dee:	0412      	lsls	r2, r2, #16
    6df0:	444b      	add	r3, r9
    6df2:	4452      	add	r2, sl
    6df4:	46a1      	mov	r9, r4
    6df6:	468a      	mov	sl, r1
    6df8:	003c      	movs	r4, r7
    6dfa:	4641      	mov	r1, r8
    6dfc:	436c      	muls	r4, r5
    6dfe:	434d      	muls	r5, r1
    6e00:	4651      	mov	r1, sl
    6e02:	444d      	add	r5, r9
    6e04:	0c0f      	lsrs	r7, r1, #16
    6e06:	197d      	adds	r5, r7, r5
    6e08:	45a9      	cmp	r9, r5
    6e0a:	d903      	bls.n	6e14 <__aeabi_dmul+0x2fc>
    6e0c:	2180      	movs	r1, #128	; 0x80
    6e0e:	0249      	lsls	r1, r1, #9
    6e10:	4688      	mov	r8, r1
    6e12:	4444      	add	r4, r8
    6e14:	9f04      	ldr	r7, [sp, #16]
    6e16:	9903      	ldr	r1, [sp, #12]
    6e18:	46b8      	mov	r8, r7
    6e1a:	4441      	add	r1, r8
    6e1c:	468b      	mov	fp, r1
    6e1e:	4583      	cmp	fp, r0
    6e20:	4180      	sbcs	r0, r0
    6e22:	4241      	negs	r1, r0
    6e24:	4688      	mov	r8, r1
    6e26:	4651      	mov	r1, sl
    6e28:	0408      	lsls	r0, r1, #16
    6e2a:	042f      	lsls	r7, r5, #16
    6e2c:	0c00      	lsrs	r0, r0, #16
    6e2e:	183f      	adds	r7, r7, r0
    6e30:	4658      	mov	r0, fp
    6e32:	9902      	ldr	r1, [sp, #8]
    6e34:	1810      	adds	r0, r2, r0
    6e36:	4689      	mov	r9, r1
    6e38:	4290      	cmp	r0, r2
    6e3a:	4192      	sbcs	r2, r2
    6e3c:	444f      	add	r7, r9
    6e3e:	46ba      	mov	sl, r7
    6e40:	4252      	negs	r2, r2
    6e42:	4699      	mov	r9, r3
    6e44:	4693      	mov	fp, r2
    6e46:	44c2      	add	sl, r8
    6e48:	44d1      	add	r9, sl
    6e4a:	44cb      	add	fp, r9
    6e4c:	428f      	cmp	r7, r1
    6e4e:	41bf      	sbcs	r7, r7
    6e50:	45c2      	cmp	sl, r8
    6e52:	4189      	sbcs	r1, r1
    6e54:	4599      	cmp	r9, r3
    6e56:	419b      	sbcs	r3, r3
    6e58:	4593      	cmp	fp, r2
    6e5a:	4192      	sbcs	r2, r2
    6e5c:	427f      	negs	r7, r7
    6e5e:	4249      	negs	r1, r1
    6e60:	0c2d      	lsrs	r5, r5, #16
    6e62:	4252      	negs	r2, r2
    6e64:	430f      	orrs	r7, r1
    6e66:	425b      	negs	r3, r3
    6e68:	4313      	orrs	r3, r2
    6e6a:	197f      	adds	r7, r7, r5
    6e6c:	18ff      	adds	r7, r7, r3
    6e6e:	465b      	mov	r3, fp
    6e70:	193c      	adds	r4, r7, r4
    6e72:	0ddb      	lsrs	r3, r3, #23
    6e74:	9a05      	ldr	r2, [sp, #20]
    6e76:	0264      	lsls	r4, r4, #9
    6e78:	431c      	orrs	r4, r3
    6e7a:	0243      	lsls	r3, r0, #9
    6e7c:	4313      	orrs	r3, r2
    6e7e:	1e5d      	subs	r5, r3, #1
    6e80:	41ab      	sbcs	r3, r5
    6e82:	465a      	mov	r2, fp
    6e84:	0dc0      	lsrs	r0, r0, #23
    6e86:	4303      	orrs	r3, r0
    6e88:	0252      	lsls	r2, r2, #9
    6e8a:	4313      	orrs	r3, r2
    6e8c:	01e2      	lsls	r2, r4, #7
    6e8e:	d556      	bpl.n	6f3e <__aeabi_dmul+0x426>
    6e90:	2001      	movs	r0, #1
    6e92:	085a      	lsrs	r2, r3, #1
    6e94:	4003      	ands	r3, r0
    6e96:	4313      	orrs	r3, r2
    6e98:	07e2      	lsls	r2, r4, #31
    6e9a:	4313      	orrs	r3, r2
    6e9c:	0864      	lsrs	r4, r4, #1
    6e9e:	485a      	ldr	r0, [pc, #360]	; (7008 <__aeabi_dmul+0x4f0>)
    6ea0:	4460      	add	r0, ip
    6ea2:	2800      	cmp	r0, #0
    6ea4:	dd4d      	ble.n	6f42 <__aeabi_dmul+0x42a>
    6ea6:	075a      	lsls	r2, r3, #29
    6ea8:	d009      	beq.n	6ebe <__aeabi_dmul+0x3a6>
    6eaa:	220f      	movs	r2, #15
    6eac:	401a      	ands	r2, r3
    6eae:	2a04      	cmp	r2, #4
    6eb0:	d005      	beq.n	6ebe <__aeabi_dmul+0x3a6>
    6eb2:	1d1a      	adds	r2, r3, #4
    6eb4:	429a      	cmp	r2, r3
    6eb6:	419b      	sbcs	r3, r3
    6eb8:	425b      	negs	r3, r3
    6eba:	18e4      	adds	r4, r4, r3
    6ebc:	0013      	movs	r3, r2
    6ebe:	01e2      	lsls	r2, r4, #7
    6ec0:	d504      	bpl.n	6ecc <__aeabi_dmul+0x3b4>
    6ec2:	2080      	movs	r0, #128	; 0x80
    6ec4:	4a51      	ldr	r2, [pc, #324]	; (700c <__aeabi_dmul+0x4f4>)
    6ec6:	00c0      	lsls	r0, r0, #3
    6ec8:	4014      	ands	r4, r2
    6eca:	4460      	add	r0, ip
    6ecc:	4a50      	ldr	r2, [pc, #320]	; (7010 <__aeabi_dmul+0x4f8>)
    6ece:	4290      	cmp	r0, r2
    6ed0:	dd00      	ble.n	6ed4 <__aeabi_dmul+0x3bc>
    6ed2:	e6e3      	b.n	6c9c <__aeabi_dmul+0x184>
    6ed4:	2501      	movs	r5, #1
    6ed6:	08db      	lsrs	r3, r3, #3
    6ed8:	0762      	lsls	r2, r4, #29
    6eda:	431a      	orrs	r2, r3
    6edc:	0264      	lsls	r4, r4, #9
    6ede:	9b01      	ldr	r3, [sp, #4]
    6ee0:	4691      	mov	r9, r2
    6ee2:	0b22      	lsrs	r2, r4, #12
    6ee4:	0544      	lsls	r4, r0, #21
    6ee6:	0d64      	lsrs	r4, r4, #21
    6ee8:	401d      	ands	r5, r3
    6eea:	e67c      	b.n	6be6 <__aeabi_dmul+0xce>
    6eec:	2280      	movs	r2, #128	; 0x80
    6eee:	4659      	mov	r1, fp
    6ef0:	0312      	lsls	r2, r2, #12
    6ef2:	4211      	tst	r1, r2
    6ef4:	d008      	beq.n	6f08 <__aeabi_dmul+0x3f0>
    6ef6:	4214      	tst	r4, r2
    6ef8:	d106      	bne.n	6f08 <__aeabi_dmul+0x3f0>
    6efa:	4322      	orrs	r2, r4
    6efc:	0312      	lsls	r2, r2, #12
    6efe:	0b12      	lsrs	r2, r2, #12
    6f00:	4645      	mov	r5, r8
    6f02:	4699      	mov	r9, r3
    6f04:	4c43      	ldr	r4, [pc, #268]	; (7014 <__aeabi_dmul+0x4fc>)
    6f06:	e66e      	b.n	6be6 <__aeabi_dmul+0xce>
    6f08:	465b      	mov	r3, fp
    6f0a:	431a      	orrs	r2, r3
    6f0c:	0312      	lsls	r2, r2, #12
    6f0e:	0b12      	lsrs	r2, r2, #12
    6f10:	4c40      	ldr	r4, [pc, #256]	; (7014 <__aeabi_dmul+0x4fc>)
    6f12:	e668      	b.n	6be6 <__aeabi_dmul+0xce>
    6f14:	0003      	movs	r3, r0
    6f16:	4654      	mov	r4, sl
    6f18:	3b28      	subs	r3, #40	; 0x28
    6f1a:	409c      	lsls	r4, r3
    6f1c:	2300      	movs	r3, #0
    6f1e:	e6b9      	b.n	6c94 <__aeabi_dmul+0x17c>
    6f20:	f000 fcce 	bl	78c0 <__clzsi2>
    6f24:	3020      	adds	r0, #32
    6f26:	e6a6      	b.n	6c76 <__aeabi_dmul+0x15e>
    6f28:	0003      	movs	r3, r0
    6f2a:	3b28      	subs	r3, #40	; 0x28
    6f2c:	409f      	lsls	r7, r3
    6f2e:	2300      	movs	r3, #0
    6f30:	46bb      	mov	fp, r7
    6f32:	4699      	mov	r9, r3
    6f34:	e68a      	b.n	6c4c <__aeabi_dmul+0x134>
    6f36:	f000 fcc3 	bl	78c0 <__clzsi2>
    6f3a:	3020      	adds	r0, #32
    6f3c:	e674      	b.n	6c28 <__aeabi_dmul+0x110>
    6f3e:	46b4      	mov	ip, r6
    6f40:	e7ad      	b.n	6e9e <__aeabi_dmul+0x386>
    6f42:	2501      	movs	r5, #1
    6f44:	1a2a      	subs	r2, r5, r0
    6f46:	2a38      	cmp	r2, #56	; 0x38
    6f48:	dd06      	ble.n	6f58 <__aeabi_dmul+0x440>
    6f4a:	9b01      	ldr	r3, [sp, #4]
    6f4c:	2400      	movs	r4, #0
    6f4e:	401d      	ands	r5, r3
    6f50:	2300      	movs	r3, #0
    6f52:	2200      	movs	r2, #0
    6f54:	4699      	mov	r9, r3
    6f56:	e646      	b.n	6be6 <__aeabi_dmul+0xce>
    6f58:	2a1f      	cmp	r2, #31
    6f5a:	dc21      	bgt.n	6fa0 <__aeabi_dmul+0x488>
    6f5c:	2520      	movs	r5, #32
    6f5e:	0020      	movs	r0, r4
    6f60:	1aad      	subs	r5, r5, r2
    6f62:	001e      	movs	r6, r3
    6f64:	40ab      	lsls	r3, r5
    6f66:	40a8      	lsls	r0, r5
    6f68:	40d6      	lsrs	r6, r2
    6f6a:	1e5d      	subs	r5, r3, #1
    6f6c:	41ab      	sbcs	r3, r5
    6f6e:	4330      	orrs	r0, r6
    6f70:	4318      	orrs	r0, r3
    6f72:	40d4      	lsrs	r4, r2
    6f74:	0743      	lsls	r3, r0, #29
    6f76:	d009      	beq.n	6f8c <__aeabi_dmul+0x474>
    6f78:	230f      	movs	r3, #15
    6f7a:	4003      	ands	r3, r0
    6f7c:	2b04      	cmp	r3, #4
    6f7e:	d005      	beq.n	6f8c <__aeabi_dmul+0x474>
    6f80:	0003      	movs	r3, r0
    6f82:	1d18      	adds	r0, r3, #4
    6f84:	4298      	cmp	r0, r3
    6f86:	419b      	sbcs	r3, r3
    6f88:	425b      	negs	r3, r3
    6f8a:	18e4      	adds	r4, r4, r3
    6f8c:	0223      	lsls	r3, r4, #8
    6f8e:	d521      	bpl.n	6fd4 <__aeabi_dmul+0x4bc>
    6f90:	2501      	movs	r5, #1
    6f92:	9b01      	ldr	r3, [sp, #4]
    6f94:	2401      	movs	r4, #1
    6f96:	401d      	ands	r5, r3
    6f98:	2300      	movs	r3, #0
    6f9a:	2200      	movs	r2, #0
    6f9c:	4699      	mov	r9, r3
    6f9e:	e622      	b.n	6be6 <__aeabi_dmul+0xce>
    6fa0:	251f      	movs	r5, #31
    6fa2:	0021      	movs	r1, r4
    6fa4:	426d      	negs	r5, r5
    6fa6:	1a28      	subs	r0, r5, r0
    6fa8:	40c1      	lsrs	r1, r0
    6faa:	0008      	movs	r0, r1
    6fac:	2a20      	cmp	r2, #32
    6fae:	d01d      	beq.n	6fec <__aeabi_dmul+0x4d4>
    6fb0:	355f      	adds	r5, #95	; 0x5f
    6fb2:	1aaa      	subs	r2, r5, r2
    6fb4:	4094      	lsls	r4, r2
    6fb6:	4323      	orrs	r3, r4
    6fb8:	1e5c      	subs	r4, r3, #1
    6fba:	41a3      	sbcs	r3, r4
    6fbc:	2507      	movs	r5, #7
    6fbe:	4303      	orrs	r3, r0
    6fc0:	401d      	ands	r5, r3
    6fc2:	2200      	movs	r2, #0
    6fc4:	2d00      	cmp	r5, #0
    6fc6:	d009      	beq.n	6fdc <__aeabi_dmul+0x4c4>
    6fc8:	220f      	movs	r2, #15
    6fca:	2400      	movs	r4, #0
    6fcc:	401a      	ands	r2, r3
    6fce:	0018      	movs	r0, r3
    6fd0:	2a04      	cmp	r2, #4
    6fd2:	d1d6      	bne.n	6f82 <__aeabi_dmul+0x46a>
    6fd4:	0003      	movs	r3, r0
    6fd6:	0765      	lsls	r5, r4, #29
    6fd8:	0264      	lsls	r4, r4, #9
    6fda:	0b22      	lsrs	r2, r4, #12
    6fdc:	08db      	lsrs	r3, r3, #3
    6fde:	432b      	orrs	r3, r5
    6fe0:	2501      	movs	r5, #1
    6fe2:	4699      	mov	r9, r3
    6fe4:	9b01      	ldr	r3, [sp, #4]
    6fe6:	2400      	movs	r4, #0
    6fe8:	401d      	ands	r5, r3
    6fea:	e5fc      	b.n	6be6 <__aeabi_dmul+0xce>
    6fec:	2400      	movs	r4, #0
    6fee:	e7e2      	b.n	6fb6 <__aeabi_dmul+0x49e>
    6ff0:	2280      	movs	r2, #128	; 0x80
    6ff2:	2501      	movs	r5, #1
    6ff4:	0312      	lsls	r2, r2, #12
    6ff6:	4322      	orrs	r2, r4
    6ff8:	9901      	ldr	r1, [sp, #4]
    6ffa:	0312      	lsls	r2, r2, #12
    6ffc:	0b12      	lsrs	r2, r2, #12
    6ffe:	400d      	ands	r5, r1
    7000:	4699      	mov	r9, r3
    7002:	4c04      	ldr	r4, [pc, #16]	; (7014 <__aeabi_dmul+0x4fc>)
    7004:	e5ef      	b.n	6be6 <__aeabi_dmul+0xce>
    7006:	46c0      	nop			; (mov r8, r8)
    7008:	000003ff 	.word	0x000003ff
    700c:	feffffff 	.word	0xfeffffff
    7010:	000007fe 	.word	0x000007fe
    7014:	000007ff 	.word	0x000007ff

00007018 <__aeabi_dsub>:
    7018:	b5f0      	push	{r4, r5, r6, r7, lr}
    701a:	4646      	mov	r6, r8
    701c:	46d6      	mov	lr, sl
    701e:	464f      	mov	r7, r9
    7020:	030c      	lsls	r4, r1, #12
    7022:	b5c0      	push	{r6, r7, lr}
    7024:	0fcd      	lsrs	r5, r1, #31
    7026:	004e      	lsls	r6, r1, #1
    7028:	0a61      	lsrs	r1, r4, #9
    702a:	0f44      	lsrs	r4, r0, #29
    702c:	430c      	orrs	r4, r1
    702e:	00c1      	lsls	r1, r0, #3
    7030:	0058      	lsls	r0, r3, #1
    7032:	0d40      	lsrs	r0, r0, #21
    7034:	4684      	mov	ip, r0
    7036:	468a      	mov	sl, r1
    7038:	000f      	movs	r7, r1
    703a:	0319      	lsls	r1, r3, #12
    703c:	0f50      	lsrs	r0, r2, #29
    703e:	0a49      	lsrs	r1, r1, #9
    7040:	4301      	orrs	r1, r0
    7042:	48c6      	ldr	r0, [pc, #792]	; (735c <__aeabi_dsub+0x344>)
    7044:	0d76      	lsrs	r6, r6, #21
    7046:	46a8      	mov	r8, r5
    7048:	0fdb      	lsrs	r3, r3, #31
    704a:	00d2      	lsls	r2, r2, #3
    704c:	4584      	cmp	ip, r0
    704e:	d100      	bne.n	7052 <__aeabi_dsub+0x3a>
    7050:	e0d8      	b.n	7204 <__aeabi_dsub+0x1ec>
    7052:	2001      	movs	r0, #1
    7054:	4043      	eors	r3, r0
    7056:	42ab      	cmp	r3, r5
    7058:	d100      	bne.n	705c <__aeabi_dsub+0x44>
    705a:	e0a6      	b.n	71aa <__aeabi_dsub+0x192>
    705c:	4660      	mov	r0, ip
    705e:	1a35      	subs	r5, r6, r0
    7060:	2d00      	cmp	r5, #0
    7062:	dc00      	bgt.n	7066 <__aeabi_dsub+0x4e>
    7064:	e105      	b.n	7272 <__aeabi_dsub+0x25a>
    7066:	2800      	cmp	r0, #0
    7068:	d110      	bne.n	708c <__aeabi_dsub+0x74>
    706a:	000b      	movs	r3, r1
    706c:	4313      	orrs	r3, r2
    706e:	d100      	bne.n	7072 <__aeabi_dsub+0x5a>
    7070:	e0d7      	b.n	7222 <__aeabi_dsub+0x20a>
    7072:	1e6b      	subs	r3, r5, #1
    7074:	2b00      	cmp	r3, #0
    7076:	d000      	beq.n	707a <__aeabi_dsub+0x62>
    7078:	e14b      	b.n	7312 <__aeabi_dsub+0x2fa>
    707a:	4653      	mov	r3, sl
    707c:	1a9f      	subs	r7, r3, r2
    707e:	45ba      	cmp	sl, r7
    7080:	4180      	sbcs	r0, r0
    7082:	1a64      	subs	r4, r4, r1
    7084:	4240      	negs	r0, r0
    7086:	1a24      	subs	r4, r4, r0
    7088:	2601      	movs	r6, #1
    708a:	e01e      	b.n	70ca <__aeabi_dsub+0xb2>
    708c:	4bb3      	ldr	r3, [pc, #716]	; (735c <__aeabi_dsub+0x344>)
    708e:	429e      	cmp	r6, r3
    7090:	d048      	beq.n	7124 <__aeabi_dsub+0x10c>
    7092:	2380      	movs	r3, #128	; 0x80
    7094:	041b      	lsls	r3, r3, #16
    7096:	4319      	orrs	r1, r3
    7098:	2d38      	cmp	r5, #56	; 0x38
    709a:	dd00      	ble.n	709e <__aeabi_dsub+0x86>
    709c:	e119      	b.n	72d2 <__aeabi_dsub+0x2ba>
    709e:	2d1f      	cmp	r5, #31
    70a0:	dd00      	ble.n	70a4 <__aeabi_dsub+0x8c>
    70a2:	e14c      	b.n	733e <__aeabi_dsub+0x326>
    70a4:	2320      	movs	r3, #32
    70a6:	000f      	movs	r7, r1
    70a8:	1b5b      	subs	r3, r3, r5
    70aa:	0010      	movs	r0, r2
    70ac:	409a      	lsls	r2, r3
    70ae:	409f      	lsls	r7, r3
    70b0:	40e8      	lsrs	r0, r5
    70b2:	1e53      	subs	r3, r2, #1
    70b4:	419a      	sbcs	r2, r3
    70b6:	40e9      	lsrs	r1, r5
    70b8:	4307      	orrs	r7, r0
    70ba:	4317      	orrs	r7, r2
    70bc:	4653      	mov	r3, sl
    70be:	1bdf      	subs	r7, r3, r7
    70c0:	1a61      	subs	r1, r4, r1
    70c2:	45ba      	cmp	sl, r7
    70c4:	41a4      	sbcs	r4, r4
    70c6:	4264      	negs	r4, r4
    70c8:	1b0c      	subs	r4, r1, r4
    70ca:	0223      	lsls	r3, r4, #8
    70cc:	d400      	bmi.n	70d0 <__aeabi_dsub+0xb8>
    70ce:	e0c5      	b.n	725c <__aeabi_dsub+0x244>
    70d0:	0264      	lsls	r4, r4, #9
    70d2:	0a65      	lsrs	r5, r4, #9
    70d4:	2d00      	cmp	r5, #0
    70d6:	d100      	bne.n	70da <__aeabi_dsub+0xc2>
    70d8:	e0f6      	b.n	72c8 <__aeabi_dsub+0x2b0>
    70da:	0028      	movs	r0, r5
    70dc:	f000 fbf0 	bl	78c0 <__clzsi2>
    70e0:	0003      	movs	r3, r0
    70e2:	3b08      	subs	r3, #8
    70e4:	2b1f      	cmp	r3, #31
    70e6:	dd00      	ble.n	70ea <__aeabi_dsub+0xd2>
    70e8:	e0e9      	b.n	72be <__aeabi_dsub+0x2a6>
    70ea:	2220      	movs	r2, #32
    70ec:	003c      	movs	r4, r7
    70ee:	1ad2      	subs	r2, r2, r3
    70f0:	409d      	lsls	r5, r3
    70f2:	40d4      	lsrs	r4, r2
    70f4:	409f      	lsls	r7, r3
    70f6:	4325      	orrs	r5, r4
    70f8:	429e      	cmp	r6, r3
    70fa:	dd00      	ble.n	70fe <__aeabi_dsub+0xe6>
    70fc:	e0db      	b.n	72b6 <__aeabi_dsub+0x29e>
    70fe:	1b9e      	subs	r6, r3, r6
    7100:	1c73      	adds	r3, r6, #1
    7102:	2b1f      	cmp	r3, #31
    7104:	dd00      	ble.n	7108 <__aeabi_dsub+0xf0>
    7106:	e10a      	b.n	731e <__aeabi_dsub+0x306>
    7108:	2220      	movs	r2, #32
    710a:	0038      	movs	r0, r7
    710c:	1ad2      	subs	r2, r2, r3
    710e:	0029      	movs	r1, r5
    7110:	4097      	lsls	r7, r2
    7112:	002c      	movs	r4, r5
    7114:	4091      	lsls	r1, r2
    7116:	40d8      	lsrs	r0, r3
    7118:	1e7a      	subs	r2, r7, #1
    711a:	4197      	sbcs	r7, r2
    711c:	40dc      	lsrs	r4, r3
    711e:	2600      	movs	r6, #0
    7120:	4301      	orrs	r1, r0
    7122:	430f      	orrs	r7, r1
    7124:	077b      	lsls	r3, r7, #29
    7126:	d009      	beq.n	713c <__aeabi_dsub+0x124>
    7128:	230f      	movs	r3, #15
    712a:	403b      	ands	r3, r7
    712c:	2b04      	cmp	r3, #4
    712e:	d005      	beq.n	713c <__aeabi_dsub+0x124>
    7130:	1d3b      	adds	r3, r7, #4
    7132:	42bb      	cmp	r3, r7
    7134:	41bf      	sbcs	r7, r7
    7136:	427f      	negs	r7, r7
    7138:	19e4      	adds	r4, r4, r7
    713a:	001f      	movs	r7, r3
    713c:	0223      	lsls	r3, r4, #8
    713e:	d525      	bpl.n	718c <__aeabi_dsub+0x174>
    7140:	4b86      	ldr	r3, [pc, #536]	; (735c <__aeabi_dsub+0x344>)
    7142:	3601      	adds	r6, #1
    7144:	429e      	cmp	r6, r3
    7146:	d100      	bne.n	714a <__aeabi_dsub+0x132>
    7148:	e0af      	b.n	72aa <__aeabi_dsub+0x292>
    714a:	4b85      	ldr	r3, [pc, #532]	; (7360 <__aeabi_dsub+0x348>)
    714c:	2501      	movs	r5, #1
    714e:	401c      	ands	r4, r3
    7150:	4643      	mov	r3, r8
    7152:	0762      	lsls	r2, r4, #29
    7154:	08ff      	lsrs	r7, r7, #3
    7156:	0264      	lsls	r4, r4, #9
    7158:	0576      	lsls	r6, r6, #21
    715a:	4317      	orrs	r7, r2
    715c:	0b24      	lsrs	r4, r4, #12
    715e:	0d76      	lsrs	r6, r6, #21
    7160:	401d      	ands	r5, r3
    7162:	2100      	movs	r1, #0
    7164:	0324      	lsls	r4, r4, #12
    7166:	0b23      	lsrs	r3, r4, #12
    7168:	0d0c      	lsrs	r4, r1, #20
    716a:	4a7e      	ldr	r2, [pc, #504]	; (7364 <__aeabi_dsub+0x34c>)
    716c:	0524      	lsls	r4, r4, #20
    716e:	431c      	orrs	r4, r3
    7170:	4014      	ands	r4, r2
    7172:	0533      	lsls	r3, r6, #20
    7174:	4323      	orrs	r3, r4
    7176:	005b      	lsls	r3, r3, #1
    7178:	07ed      	lsls	r5, r5, #31
    717a:	085b      	lsrs	r3, r3, #1
    717c:	432b      	orrs	r3, r5
    717e:	0038      	movs	r0, r7
    7180:	0019      	movs	r1, r3
    7182:	bc1c      	pop	{r2, r3, r4}
    7184:	4690      	mov	r8, r2
    7186:	4699      	mov	r9, r3
    7188:	46a2      	mov	sl, r4
    718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    718c:	2501      	movs	r5, #1
    718e:	4643      	mov	r3, r8
    7190:	0762      	lsls	r2, r4, #29
    7192:	08ff      	lsrs	r7, r7, #3
    7194:	4317      	orrs	r7, r2
    7196:	08e4      	lsrs	r4, r4, #3
    7198:	401d      	ands	r5, r3
    719a:	4b70      	ldr	r3, [pc, #448]	; (735c <__aeabi_dsub+0x344>)
    719c:	429e      	cmp	r6, r3
    719e:	d036      	beq.n	720e <__aeabi_dsub+0x1f6>
    71a0:	0324      	lsls	r4, r4, #12
    71a2:	0576      	lsls	r6, r6, #21
    71a4:	0b24      	lsrs	r4, r4, #12
    71a6:	0d76      	lsrs	r6, r6, #21
    71a8:	e7db      	b.n	7162 <__aeabi_dsub+0x14a>
    71aa:	4663      	mov	r3, ip
    71ac:	1af3      	subs	r3, r6, r3
    71ae:	2b00      	cmp	r3, #0
    71b0:	dc00      	bgt.n	71b4 <__aeabi_dsub+0x19c>
    71b2:	e094      	b.n	72de <__aeabi_dsub+0x2c6>
    71b4:	4660      	mov	r0, ip
    71b6:	2800      	cmp	r0, #0
    71b8:	d035      	beq.n	7226 <__aeabi_dsub+0x20e>
    71ba:	4868      	ldr	r0, [pc, #416]	; (735c <__aeabi_dsub+0x344>)
    71bc:	4286      	cmp	r6, r0
    71be:	d0b1      	beq.n	7124 <__aeabi_dsub+0x10c>
    71c0:	2780      	movs	r7, #128	; 0x80
    71c2:	043f      	lsls	r7, r7, #16
    71c4:	4339      	orrs	r1, r7
    71c6:	2b38      	cmp	r3, #56	; 0x38
    71c8:	dc00      	bgt.n	71cc <__aeabi_dsub+0x1b4>
    71ca:	e0fd      	b.n	73c8 <__aeabi_dsub+0x3b0>
    71cc:	430a      	orrs	r2, r1
    71ce:	0017      	movs	r7, r2
    71d0:	2100      	movs	r1, #0
    71d2:	1e7a      	subs	r2, r7, #1
    71d4:	4197      	sbcs	r7, r2
    71d6:	4457      	add	r7, sl
    71d8:	4557      	cmp	r7, sl
    71da:	4180      	sbcs	r0, r0
    71dc:	1909      	adds	r1, r1, r4
    71de:	4244      	negs	r4, r0
    71e0:	190c      	adds	r4, r1, r4
    71e2:	0223      	lsls	r3, r4, #8
    71e4:	d53a      	bpl.n	725c <__aeabi_dsub+0x244>
    71e6:	4b5d      	ldr	r3, [pc, #372]	; (735c <__aeabi_dsub+0x344>)
    71e8:	3601      	adds	r6, #1
    71ea:	429e      	cmp	r6, r3
    71ec:	d100      	bne.n	71f0 <__aeabi_dsub+0x1d8>
    71ee:	e14b      	b.n	7488 <__aeabi_dsub+0x470>
    71f0:	2201      	movs	r2, #1
    71f2:	4b5b      	ldr	r3, [pc, #364]	; (7360 <__aeabi_dsub+0x348>)
    71f4:	401c      	ands	r4, r3
    71f6:	087b      	lsrs	r3, r7, #1
    71f8:	4017      	ands	r7, r2
    71fa:	431f      	orrs	r7, r3
    71fc:	07e2      	lsls	r2, r4, #31
    71fe:	4317      	orrs	r7, r2
    7200:	0864      	lsrs	r4, r4, #1
    7202:	e78f      	b.n	7124 <__aeabi_dsub+0x10c>
    7204:	0008      	movs	r0, r1
    7206:	4310      	orrs	r0, r2
    7208:	d000      	beq.n	720c <__aeabi_dsub+0x1f4>
    720a:	e724      	b.n	7056 <__aeabi_dsub+0x3e>
    720c:	e721      	b.n	7052 <__aeabi_dsub+0x3a>
    720e:	0023      	movs	r3, r4
    7210:	433b      	orrs	r3, r7
    7212:	d100      	bne.n	7216 <__aeabi_dsub+0x1fe>
    7214:	e1b9      	b.n	758a <__aeabi_dsub+0x572>
    7216:	2280      	movs	r2, #128	; 0x80
    7218:	0312      	lsls	r2, r2, #12
    721a:	4314      	orrs	r4, r2
    721c:	0324      	lsls	r4, r4, #12
    721e:	0b24      	lsrs	r4, r4, #12
    7220:	e79f      	b.n	7162 <__aeabi_dsub+0x14a>
    7222:	002e      	movs	r6, r5
    7224:	e77e      	b.n	7124 <__aeabi_dsub+0x10c>
    7226:	0008      	movs	r0, r1
    7228:	4310      	orrs	r0, r2
    722a:	d100      	bne.n	722e <__aeabi_dsub+0x216>
    722c:	e0ca      	b.n	73c4 <__aeabi_dsub+0x3ac>
    722e:	1e58      	subs	r0, r3, #1
    7230:	4684      	mov	ip, r0
    7232:	2800      	cmp	r0, #0
    7234:	d000      	beq.n	7238 <__aeabi_dsub+0x220>
    7236:	e0e7      	b.n	7408 <__aeabi_dsub+0x3f0>
    7238:	4452      	add	r2, sl
    723a:	4552      	cmp	r2, sl
    723c:	4180      	sbcs	r0, r0
    723e:	1864      	adds	r4, r4, r1
    7240:	4240      	negs	r0, r0
    7242:	1824      	adds	r4, r4, r0
    7244:	0017      	movs	r7, r2
    7246:	2601      	movs	r6, #1
    7248:	0223      	lsls	r3, r4, #8
    724a:	d507      	bpl.n	725c <__aeabi_dsub+0x244>
    724c:	2602      	movs	r6, #2
    724e:	e7cf      	b.n	71f0 <__aeabi_dsub+0x1d8>
    7250:	4664      	mov	r4, ip
    7252:	432c      	orrs	r4, r5
    7254:	d100      	bne.n	7258 <__aeabi_dsub+0x240>
    7256:	e1b3      	b.n	75c0 <__aeabi_dsub+0x5a8>
    7258:	002c      	movs	r4, r5
    725a:	4667      	mov	r7, ip
    725c:	077b      	lsls	r3, r7, #29
    725e:	d000      	beq.n	7262 <__aeabi_dsub+0x24a>
    7260:	e762      	b.n	7128 <__aeabi_dsub+0x110>
    7262:	0763      	lsls	r3, r4, #29
    7264:	08ff      	lsrs	r7, r7, #3
    7266:	431f      	orrs	r7, r3
    7268:	2501      	movs	r5, #1
    726a:	4643      	mov	r3, r8
    726c:	08e4      	lsrs	r4, r4, #3
    726e:	401d      	ands	r5, r3
    7270:	e793      	b.n	719a <__aeabi_dsub+0x182>
    7272:	2d00      	cmp	r5, #0
    7274:	d178      	bne.n	7368 <__aeabi_dsub+0x350>
    7276:	1c75      	adds	r5, r6, #1
    7278:	056d      	lsls	r5, r5, #21
    727a:	0d6d      	lsrs	r5, r5, #21
    727c:	2d01      	cmp	r5, #1
    727e:	dc00      	bgt.n	7282 <__aeabi_dsub+0x26a>
    7280:	e0f2      	b.n	7468 <__aeabi_dsub+0x450>
    7282:	4650      	mov	r0, sl
    7284:	1a80      	subs	r0, r0, r2
    7286:	4582      	cmp	sl, r0
    7288:	41bf      	sbcs	r7, r7
    728a:	1a65      	subs	r5, r4, r1
    728c:	427f      	negs	r7, r7
    728e:	1bed      	subs	r5, r5, r7
    7290:	4684      	mov	ip, r0
    7292:	0228      	lsls	r0, r5, #8
    7294:	d400      	bmi.n	7298 <__aeabi_dsub+0x280>
    7296:	e08c      	b.n	73b2 <__aeabi_dsub+0x39a>
    7298:	4650      	mov	r0, sl
    729a:	1a17      	subs	r7, r2, r0
    729c:	42ba      	cmp	r2, r7
    729e:	4192      	sbcs	r2, r2
    72a0:	1b0c      	subs	r4, r1, r4
    72a2:	4255      	negs	r5, r2
    72a4:	1b65      	subs	r5, r4, r5
    72a6:	4698      	mov	r8, r3
    72a8:	e714      	b.n	70d4 <__aeabi_dsub+0xbc>
    72aa:	2501      	movs	r5, #1
    72ac:	4643      	mov	r3, r8
    72ae:	2400      	movs	r4, #0
    72b0:	401d      	ands	r5, r3
    72b2:	2700      	movs	r7, #0
    72b4:	e755      	b.n	7162 <__aeabi_dsub+0x14a>
    72b6:	4c2a      	ldr	r4, [pc, #168]	; (7360 <__aeabi_dsub+0x348>)
    72b8:	1af6      	subs	r6, r6, r3
    72ba:	402c      	ands	r4, r5
    72bc:	e732      	b.n	7124 <__aeabi_dsub+0x10c>
    72be:	003d      	movs	r5, r7
    72c0:	3828      	subs	r0, #40	; 0x28
    72c2:	4085      	lsls	r5, r0
    72c4:	2700      	movs	r7, #0
    72c6:	e717      	b.n	70f8 <__aeabi_dsub+0xe0>
    72c8:	0038      	movs	r0, r7
    72ca:	f000 faf9 	bl	78c0 <__clzsi2>
    72ce:	3020      	adds	r0, #32
    72d0:	e706      	b.n	70e0 <__aeabi_dsub+0xc8>
    72d2:	430a      	orrs	r2, r1
    72d4:	0017      	movs	r7, r2
    72d6:	2100      	movs	r1, #0
    72d8:	1e7a      	subs	r2, r7, #1
    72da:	4197      	sbcs	r7, r2
    72dc:	e6ee      	b.n	70bc <__aeabi_dsub+0xa4>
    72de:	2b00      	cmp	r3, #0
    72e0:	d000      	beq.n	72e4 <__aeabi_dsub+0x2cc>
    72e2:	e0e5      	b.n	74b0 <__aeabi_dsub+0x498>
    72e4:	1c73      	adds	r3, r6, #1
    72e6:	469c      	mov	ip, r3
    72e8:	055b      	lsls	r3, r3, #21
    72ea:	0d5b      	lsrs	r3, r3, #21
    72ec:	2b01      	cmp	r3, #1
    72ee:	dc00      	bgt.n	72f2 <__aeabi_dsub+0x2da>
    72f0:	e09f      	b.n	7432 <__aeabi_dsub+0x41a>
    72f2:	4b1a      	ldr	r3, [pc, #104]	; (735c <__aeabi_dsub+0x344>)
    72f4:	459c      	cmp	ip, r3
    72f6:	d100      	bne.n	72fa <__aeabi_dsub+0x2e2>
    72f8:	e0c5      	b.n	7486 <__aeabi_dsub+0x46e>
    72fa:	4452      	add	r2, sl
    72fc:	4552      	cmp	r2, sl
    72fe:	4180      	sbcs	r0, r0
    7300:	1864      	adds	r4, r4, r1
    7302:	4240      	negs	r0, r0
    7304:	1824      	adds	r4, r4, r0
    7306:	07e7      	lsls	r7, r4, #31
    7308:	0852      	lsrs	r2, r2, #1
    730a:	4317      	orrs	r7, r2
    730c:	0864      	lsrs	r4, r4, #1
    730e:	4666      	mov	r6, ip
    7310:	e708      	b.n	7124 <__aeabi_dsub+0x10c>
    7312:	4812      	ldr	r0, [pc, #72]	; (735c <__aeabi_dsub+0x344>)
    7314:	4285      	cmp	r5, r0
    7316:	d100      	bne.n	731a <__aeabi_dsub+0x302>
    7318:	e085      	b.n	7426 <__aeabi_dsub+0x40e>
    731a:	001d      	movs	r5, r3
    731c:	e6bc      	b.n	7098 <__aeabi_dsub+0x80>
    731e:	0029      	movs	r1, r5
    7320:	3e1f      	subs	r6, #31
    7322:	40f1      	lsrs	r1, r6
    7324:	2b20      	cmp	r3, #32
    7326:	d100      	bne.n	732a <__aeabi_dsub+0x312>
    7328:	e07f      	b.n	742a <__aeabi_dsub+0x412>
    732a:	2240      	movs	r2, #64	; 0x40
    732c:	1ad3      	subs	r3, r2, r3
    732e:	409d      	lsls	r5, r3
    7330:	432f      	orrs	r7, r5
    7332:	1e7d      	subs	r5, r7, #1
    7334:	41af      	sbcs	r7, r5
    7336:	2400      	movs	r4, #0
    7338:	430f      	orrs	r7, r1
    733a:	2600      	movs	r6, #0
    733c:	e78e      	b.n	725c <__aeabi_dsub+0x244>
    733e:	002b      	movs	r3, r5
    7340:	000f      	movs	r7, r1
    7342:	3b20      	subs	r3, #32
    7344:	40df      	lsrs	r7, r3
    7346:	2d20      	cmp	r5, #32
    7348:	d071      	beq.n	742e <__aeabi_dsub+0x416>
    734a:	2340      	movs	r3, #64	; 0x40
    734c:	1b5d      	subs	r5, r3, r5
    734e:	40a9      	lsls	r1, r5
    7350:	430a      	orrs	r2, r1
    7352:	1e51      	subs	r1, r2, #1
    7354:	418a      	sbcs	r2, r1
    7356:	2100      	movs	r1, #0
    7358:	4317      	orrs	r7, r2
    735a:	e6af      	b.n	70bc <__aeabi_dsub+0xa4>
    735c:	000007ff 	.word	0x000007ff
    7360:	ff7fffff 	.word	0xff7fffff
    7364:	800fffff 	.word	0x800fffff
    7368:	2e00      	cmp	r6, #0
    736a:	d03e      	beq.n	73ea <__aeabi_dsub+0x3d2>
    736c:	4eb3      	ldr	r6, [pc, #716]	; (763c <__aeabi_dsub+0x624>)
    736e:	45b4      	cmp	ip, r6
    7370:	d045      	beq.n	73fe <__aeabi_dsub+0x3e6>
    7372:	2680      	movs	r6, #128	; 0x80
    7374:	0436      	lsls	r6, r6, #16
    7376:	426d      	negs	r5, r5
    7378:	4334      	orrs	r4, r6
    737a:	2d38      	cmp	r5, #56	; 0x38
    737c:	dd00      	ble.n	7380 <__aeabi_dsub+0x368>
    737e:	e0a8      	b.n	74d2 <__aeabi_dsub+0x4ba>
    7380:	2d1f      	cmp	r5, #31
    7382:	dd00      	ble.n	7386 <__aeabi_dsub+0x36e>
    7384:	e11f      	b.n	75c6 <__aeabi_dsub+0x5ae>
    7386:	2620      	movs	r6, #32
    7388:	0027      	movs	r7, r4
    738a:	4650      	mov	r0, sl
    738c:	1b76      	subs	r6, r6, r5
    738e:	40b7      	lsls	r7, r6
    7390:	40e8      	lsrs	r0, r5
    7392:	4307      	orrs	r7, r0
    7394:	4650      	mov	r0, sl
    7396:	40b0      	lsls	r0, r6
    7398:	1e46      	subs	r6, r0, #1
    739a:	41b0      	sbcs	r0, r6
    739c:	40ec      	lsrs	r4, r5
    739e:	4338      	orrs	r0, r7
    73a0:	1a17      	subs	r7, r2, r0
    73a2:	42ba      	cmp	r2, r7
    73a4:	4192      	sbcs	r2, r2
    73a6:	1b0c      	subs	r4, r1, r4
    73a8:	4252      	negs	r2, r2
    73aa:	1aa4      	subs	r4, r4, r2
    73ac:	4666      	mov	r6, ip
    73ae:	4698      	mov	r8, r3
    73b0:	e68b      	b.n	70ca <__aeabi_dsub+0xb2>
    73b2:	4664      	mov	r4, ip
    73b4:	4667      	mov	r7, ip
    73b6:	432c      	orrs	r4, r5
    73b8:	d000      	beq.n	73bc <__aeabi_dsub+0x3a4>
    73ba:	e68b      	b.n	70d4 <__aeabi_dsub+0xbc>
    73bc:	2500      	movs	r5, #0
    73be:	2600      	movs	r6, #0
    73c0:	2700      	movs	r7, #0
    73c2:	e6ea      	b.n	719a <__aeabi_dsub+0x182>
    73c4:	001e      	movs	r6, r3
    73c6:	e6ad      	b.n	7124 <__aeabi_dsub+0x10c>
    73c8:	2b1f      	cmp	r3, #31
    73ca:	dc60      	bgt.n	748e <__aeabi_dsub+0x476>
    73cc:	2720      	movs	r7, #32
    73ce:	1af8      	subs	r0, r7, r3
    73d0:	000f      	movs	r7, r1
    73d2:	4684      	mov	ip, r0
    73d4:	4087      	lsls	r7, r0
    73d6:	0010      	movs	r0, r2
    73d8:	40d8      	lsrs	r0, r3
    73da:	4307      	orrs	r7, r0
    73dc:	4660      	mov	r0, ip
    73de:	4082      	lsls	r2, r0
    73e0:	1e50      	subs	r0, r2, #1
    73e2:	4182      	sbcs	r2, r0
    73e4:	40d9      	lsrs	r1, r3
    73e6:	4317      	orrs	r7, r2
    73e8:	e6f5      	b.n	71d6 <__aeabi_dsub+0x1be>
    73ea:	0026      	movs	r6, r4
    73ec:	4650      	mov	r0, sl
    73ee:	4306      	orrs	r6, r0
    73f0:	d005      	beq.n	73fe <__aeabi_dsub+0x3e6>
    73f2:	43ed      	mvns	r5, r5
    73f4:	2d00      	cmp	r5, #0
    73f6:	d0d3      	beq.n	73a0 <__aeabi_dsub+0x388>
    73f8:	4e90      	ldr	r6, [pc, #576]	; (763c <__aeabi_dsub+0x624>)
    73fa:	45b4      	cmp	ip, r6
    73fc:	d1bd      	bne.n	737a <__aeabi_dsub+0x362>
    73fe:	000c      	movs	r4, r1
    7400:	0017      	movs	r7, r2
    7402:	4666      	mov	r6, ip
    7404:	4698      	mov	r8, r3
    7406:	e68d      	b.n	7124 <__aeabi_dsub+0x10c>
    7408:	488c      	ldr	r0, [pc, #560]	; (763c <__aeabi_dsub+0x624>)
    740a:	4283      	cmp	r3, r0
    740c:	d00b      	beq.n	7426 <__aeabi_dsub+0x40e>
    740e:	4663      	mov	r3, ip
    7410:	e6d9      	b.n	71c6 <__aeabi_dsub+0x1ae>
    7412:	2d00      	cmp	r5, #0
    7414:	d000      	beq.n	7418 <__aeabi_dsub+0x400>
    7416:	e096      	b.n	7546 <__aeabi_dsub+0x52e>
    7418:	0008      	movs	r0, r1
    741a:	4310      	orrs	r0, r2
    741c:	d100      	bne.n	7420 <__aeabi_dsub+0x408>
    741e:	e0e2      	b.n	75e6 <__aeabi_dsub+0x5ce>
    7420:	000c      	movs	r4, r1
    7422:	0017      	movs	r7, r2
    7424:	4698      	mov	r8, r3
    7426:	4e85      	ldr	r6, [pc, #532]	; (763c <__aeabi_dsub+0x624>)
    7428:	e67c      	b.n	7124 <__aeabi_dsub+0x10c>
    742a:	2500      	movs	r5, #0
    742c:	e780      	b.n	7330 <__aeabi_dsub+0x318>
    742e:	2100      	movs	r1, #0
    7430:	e78e      	b.n	7350 <__aeabi_dsub+0x338>
    7432:	0023      	movs	r3, r4
    7434:	4650      	mov	r0, sl
    7436:	4303      	orrs	r3, r0
    7438:	2e00      	cmp	r6, #0
    743a:	d000      	beq.n	743e <__aeabi_dsub+0x426>
    743c:	e0a8      	b.n	7590 <__aeabi_dsub+0x578>
    743e:	2b00      	cmp	r3, #0
    7440:	d100      	bne.n	7444 <__aeabi_dsub+0x42c>
    7442:	e0de      	b.n	7602 <__aeabi_dsub+0x5ea>
    7444:	000b      	movs	r3, r1
    7446:	4313      	orrs	r3, r2
    7448:	d100      	bne.n	744c <__aeabi_dsub+0x434>
    744a:	e66b      	b.n	7124 <__aeabi_dsub+0x10c>
    744c:	4452      	add	r2, sl
    744e:	4552      	cmp	r2, sl
    7450:	4180      	sbcs	r0, r0
    7452:	1864      	adds	r4, r4, r1
    7454:	4240      	negs	r0, r0
    7456:	1824      	adds	r4, r4, r0
    7458:	0017      	movs	r7, r2
    745a:	0223      	lsls	r3, r4, #8
    745c:	d400      	bmi.n	7460 <__aeabi_dsub+0x448>
    745e:	e6fd      	b.n	725c <__aeabi_dsub+0x244>
    7460:	4b77      	ldr	r3, [pc, #476]	; (7640 <__aeabi_dsub+0x628>)
    7462:	4666      	mov	r6, ip
    7464:	401c      	ands	r4, r3
    7466:	e65d      	b.n	7124 <__aeabi_dsub+0x10c>
    7468:	0025      	movs	r5, r4
    746a:	4650      	mov	r0, sl
    746c:	4305      	orrs	r5, r0
    746e:	2e00      	cmp	r6, #0
    7470:	d1cf      	bne.n	7412 <__aeabi_dsub+0x3fa>
    7472:	2d00      	cmp	r5, #0
    7474:	d14f      	bne.n	7516 <__aeabi_dsub+0x4fe>
    7476:	000c      	movs	r4, r1
    7478:	4314      	orrs	r4, r2
    747a:	d100      	bne.n	747e <__aeabi_dsub+0x466>
    747c:	e0a0      	b.n	75c0 <__aeabi_dsub+0x5a8>
    747e:	000c      	movs	r4, r1
    7480:	0017      	movs	r7, r2
    7482:	4698      	mov	r8, r3
    7484:	e64e      	b.n	7124 <__aeabi_dsub+0x10c>
    7486:	4666      	mov	r6, ip
    7488:	2400      	movs	r4, #0
    748a:	2700      	movs	r7, #0
    748c:	e685      	b.n	719a <__aeabi_dsub+0x182>
    748e:	001f      	movs	r7, r3
    7490:	0008      	movs	r0, r1
    7492:	3f20      	subs	r7, #32
    7494:	40f8      	lsrs	r0, r7
    7496:	0007      	movs	r7, r0
    7498:	2b20      	cmp	r3, #32
    749a:	d100      	bne.n	749e <__aeabi_dsub+0x486>
    749c:	e08e      	b.n	75bc <__aeabi_dsub+0x5a4>
    749e:	2040      	movs	r0, #64	; 0x40
    74a0:	1ac3      	subs	r3, r0, r3
    74a2:	4099      	lsls	r1, r3
    74a4:	430a      	orrs	r2, r1
    74a6:	1e51      	subs	r1, r2, #1
    74a8:	418a      	sbcs	r2, r1
    74aa:	2100      	movs	r1, #0
    74ac:	4317      	orrs	r7, r2
    74ae:	e692      	b.n	71d6 <__aeabi_dsub+0x1be>
    74b0:	2e00      	cmp	r6, #0
    74b2:	d114      	bne.n	74de <__aeabi_dsub+0x4c6>
    74b4:	0026      	movs	r6, r4
    74b6:	4650      	mov	r0, sl
    74b8:	4306      	orrs	r6, r0
    74ba:	d062      	beq.n	7582 <__aeabi_dsub+0x56a>
    74bc:	43db      	mvns	r3, r3
    74be:	2b00      	cmp	r3, #0
    74c0:	d15c      	bne.n	757c <__aeabi_dsub+0x564>
    74c2:	1887      	adds	r7, r0, r2
    74c4:	4297      	cmp	r7, r2
    74c6:	4192      	sbcs	r2, r2
    74c8:	1864      	adds	r4, r4, r1
    74ca:	4252      	negs	r2, r2
    74cc:	18a4      	adds	r4, r4, r2
    74ce:	4666      	mov	r6, ip
    74d0:	e687      	b.n	71e2 <__aeabi_dsub+0x1ca>
    74d2:	4650      	mov	r0, sl
    74d4:	4320      	orrs	r0, r4
    74d6:	1e44      	subs	r4, r0, #1
    74d8:	41a0      	sbcs	r0, r4
    74da:	2400      	movs	r4, #0
    74dc:	e760      	b.n	73a0 <__aeabi_dsub+0x388>
    74de:	4e57      	ldr	r6, [pc, #348]	; (763c <__aeabi_dsub+0x624>)
    74e0:	45b4      	cmp	ip, r6
    74e2:	d04e      	beq.n	7582 <__aeabi_dsub+0x56a>
    74e4:	2680      	movs	r6, #128	; 0x80
    74e6:	0436      	lsls	r6, r6, #16
    74e8:	425b      	negs	r3, r3
    74ea:	4334      	orrs	r4, r6
    74ec:	2b38      	cmp	r3, #56	; 0x38
    74ee:	dd00      	ble.n	74f2 <__aeabi_dsub+0x4da>
    74f0:	e07f      	b.n	75f2 <__aeabi_dsub+0x5da>
    74f2:	2b1f      	cmp	r3, #31
    74f4:	dd00      	ble.n	74f8 <__aeabi_dsub+0x4e0>
    74f6:	e08b      	b.n	7610 <__aeabi_dsub+0x5f8>
    74f8:	2620      	movs	r6, #32
    74fa:	0027      	movs	r7, r4
    74fc:	4650      	mov	r0, sl
    74fe:	1af6      	subs	r6, r6, r3
    7500:	40b7      	lsls	r7, r6
    7502:	40d8      	lsrs	r0, r3
    7504:	4307      	orrs	r7, r0
    7506:	4650      	mov	r0, sl
    7508:	40b0      	lsls	r0, r6
    750a:	1e46      	subs	r6, r0, #1
    750c:	41b0      	sbcs	r0, r6
    750e:	4307      	orrs	r7, r0
    7510:	40dc      	lsrs	r4, r3
    7512:	18bf      	adds	r7, r7, r2
    7514:	e7d6      	b.n	74c4 <__aeabi_dsub+0x4ac>
    7516:	000d      	movs	r5, r1
    7518:	4315      	orrs	r5, r2
    751a:	d100      	bne.n	751e <__aeabi_dsub+0x506>
    751c:	e602      	b.n	7124 <__aeabi_dsub+0x10c>
    751e:	4650      	mov	r0, sl
    7520:	1a80      	subs	r0, r0, r2
    7522:	4582      	cmp	sl, r0
    7524:	41bf      	sbcs	r7, r7
    7526:	1a65      	subs	r5, r4, r1
    7528:	427f      	negs	r7, r7
    752a:	1bed      	subs	r5, r5, r7
    752c:	4684      	mov	ip, r0
    752e:	0228      	lsls	r0, r5, #8
    7530:	d400      	bmi.n	7534 <__aeabi_dsub+0x51c>
    7532:	e68d      	b.n	7250 <__aeabi_dsub+0x238>
    7534:	4650      	mov	r0, sl
    7536:	1a17      	subs	r7, r2, r0
    7538:	42ba      	cmp	r2, r7
    753a:	4192      	sbcs	r2, r2
    753c:	1b0c      	subs	r4, r1, r4
    753e:	4252      	negs	r2, r2
    7540:	1aa4      	subs	r4, r4, r2
    7542:	4698      	mov	r8, r3
    7544:	e5ee      	b.n	7124 <__aeabi_dsub+0x10c>
    7546:	000d      	movs	r5, r1
    7548:	4315      	orrs	r5, r2
    754a:	d100      	bne.n	754e <__aeabi_dsub+0x536>
    754c:	e76b      	b.n	7426 <__aeabi_dsub+0x40e>
    754e:	4650      	mov	r0, sl
    7550:	0767      	lsls	r7, r4, #29
    7552:	08c0      	lsrs	r0, r0, #3
    7554:	4307      	orrs	r7, r0
    7556:	2080      	movs	r0, #128	; 0x80
    7558:	08e4      	lsrs	r4, r4, #3
    755a:	0300      	lsls	r0, r0, #12
    755c:	4204      	tst	r4, r0
    755e:	d007      	beq.n	7570 <__aeabi_dsub+0x558>
    7560:	08cd      	lsrs	r5, r1, #3
    7562:	4205      	tst	r5, r0
    7564:	d104      	bne.n	7570 <__aeabi_dsub+0x558>
    7566:	002c      	movs	r4, r5
    7568:	4698      	mov	r8, r3
    756a:	08d7      	lsrs	r7, r2, #3
    756c:	0749      	lsls	r1, r1, #29
    756e:	430f      	orrs	r7, r1
    7570:	0f7b      	lsrs	r3, r7, #29
    7572:	00e4      	lsls	r4, r4, #3
    7574:	431c      	orrs	r4, r3
    7576:	00ff      	lsls	r7, r7, #3
    7578:	4e30      	ldr	r6, [pc, #192]	; (763c <__aeabi_dsub+0x624>)
    757a:	e5d3      	b.n	7124 <__aeabi_dsub+0x10c>
    757c:	4e2f      	ldr	r6, [pc, #188]	; (763c <__aeabi_dsub+0x624>)
    757e:	45b4      	cmp	ip, r6
    7580:	d1b4      	bne.n	74ec <__aeabi_dsub+0x4d4>
    7582:	000c      	movs	r4, r1
    7584:	0017      	movs	r7, r2
    7586:	4666      	mov	r6, ip
    7588:	e5cc      	b.n	7124 <__aeabi_dsub+0x10c>
    758a:	2700      	movs	r7, #0
    758c:	2400      	movs	r4, #0
    758e:	e5e8      	b.n	7162 <__aeabi_dsub+0x14a>
    7590:	2b00      	cmp	r3, #0
    7592:	d039      	beq.n	7608 <__aeabi_dsub+0x5f0>
    7594:	000b      	movs	r3, r1
    7596:	4313      	orrs	r3, r2
    7598:	d100      	bne.n	759c <__aeabi_dsub+0x584>
    759a:	e744      	b.n	7426 <__aeabi_dsub+0x40e>
    759c:	08c0      	lsrs	r0, r0, #3
    759e:	0767      	lsls	r7, r4, #29
    75a0:	4307      	orrs	r7, r0
    75a2:	2080      	movs	r0, #128	; 0x80
    75a4:	08e4      	lsrs	r4, r4, #3
    75a6:	0300      	lsls	r0, r0, #12
    75a8:	4204      	tst	r4, r0
    75aa:	d0e1      	beq.n	7570 <__aeabi_dsub+0x558>
    75ac:	08cb      	lsrs	r3, r1, #3
    75ae:	4203      	tst	r3, r0
    75b0:	d1de      	bne.n	7570 <__aeabi_dsub+0x558>
    75b2:	08d7      	lsrs	r7, r2, #3
    75b4:	0749      	lsls	r1, r1, #29
    75b6:	430f      	orrs	r7, r1
    75b8:	001c      	movs	r4, r3
    75ba:	e7d9      	b.n	7570 <__aeabi_dsub+0x558>
    75bc:	2100      	movs	r1, #0
    75be:	e771      	b.n	74a4 <__aeabi_dsub+0x48c>
    75c0:	2500      	movs	r5, #0
    75c2:	2700      	movs	r7, #0
    75c4:	e5e9      	b.n	719a <__aeabi_dsub+0x182>
    75c6:	002e      	movs	r6, r5
    75c8:	0027      	movs	r7, r4
    75ca:	3e20      	subs	r6, #32
    75cc:	40f7      	lsrs	r7, r6
    75ce:	2d20      	cmp	r5, #32
    75d0:	d02f      	beq.n	7632 <__aeabi_dsub+0x61a>
    75d2:	2640      	movs	r6, #64	; 0x40
    75d4:	1b75      	subs	r5, r6, r5
    75d6:	40ac      	lsls	r4, r5
    75d8:	4650      	mov	r0, sl
    75da:	4320      	orrs	r0, r4
    75dc:	1e44      	subs	r4, r0, #1
    75de:	41a0      	sbcs	r0, r4
    75e0:	2400      	movs	r4, #0
    75e2:	4338      	orrs	r0, r7
    75e4:	e6dc      	b.n	73a0 <__aeabi_dsub+0x388>
    75e6:	2480      	movs	r4, #128	; 0x80
    75e8:	2500      	movs	r5, #0
    75ea:	0324      	lsls	r4, r4, #12
    75ec:	4e13      	ldr	r6, [pc, #76]	; (763c <__aeabi_dsub+0x624>)
    75ee:	2700      	movs	r7, #0
    75f0:	e5d3      	b.n	719a <__aeabi_dsub+0x182>
    75f2:	4650      	mov	r0, sl
    75f4:	4320      	orrs	r0, r4
    75f6:	0007      	movs	r7, r0
    75f8:	1e78      	subs	r0, r7, #1
    75fa:	4187      	sbcs	r7, r0
    75fc:	2400      	movs	r4, #0
    75fe:	18bf      	adds	r7, r7, r2
    7600:	e760      	b.n	74c4 <__aeabi_dsub+0x4ac>
    7602:	000c      	movs	r4, r1
    7604:	0017      	movs	r7, r2
    7606:	e58d      	b.n	7124 <__aeabi_dsub+0x10c>
    7608:	000c      	movs	r4, r1
    760a:	0017      	movs	r7, r2
    760c:	4e0b      	ldr	r6, [pc, #44]	; (763c <__aeabi_dsub+0x624>)
    760e:	e589      	b.n	7124 <__aeabi_dsub+0x10c>
    7610:	001e      	movs	r6, r3
    7612:	0027      	movs	r7, r4
    7614:	3e20      	subs	r6, #32
    7616:	40f7      	lsrs	r7, r6
    7618:	2b20      	cmp	r3, #32
    761a:	d00c      	beq.n	7636 <__aeabi_dsub+0x61e>
    761c:	2640      	movs	r6, #64	; 0x40
    761e:	1af3      	subs	r3, r6, r3
    7620:	409c      	lsls	r4, r3
    7622:	4650      	mov	r0, sl
    7624:	4320      	orrs	r0, r4
    7626:	1e44      	subs	r4, r0, #1
    7628:	41a0      	sbcs	r0, r4
    762a:	4307      	orrs	r7, r0
    762c:	2400      	movs	r4, #0
    762e:	18bf      	adds	r7, r7, r2
    7630:	e748      	b.n	74c4 <__aeabi_dsub+0x4ac>
    7632:	2400      	movs	r4, #0
    7634:	e7d0      	b.n	75d8 <__aeabi_dsub+0x5c0>
    7636:	2400      	movs	r4, #0
    7638:	e7f3      	b.n	7622 <__aeabi_dsub+0x60a>
    763a:	46c0      	nop			; (mov r8, r8)
    763c:	000007ff 	.word	0x000007ff
    7640:	ff7fffff 	.word	0xff7fffff

00007644 <__aeabi_d2iz>:
    7644:	b530      	push	{r4, r5, lr}
    7646:	4d13      	ldr	r5, [pc, #76]	; (7694 <__aeabi_d2iz+0x50>)
    7648:	030a      	lsls	r2, r1, #12
    764a:	004b      	lsls	r3, r1, #1
    764c:	0b12      	lsrs	r2, r2, #12
    764e:	0d5b      	lsrs	r3, r3, #21
    7650:	0fc9      	lsrs	r1, r1, #31
    7652:	2400      	movs	r4, #0
    7654:	42ab      	cmp	r3, r5
    7656:	dd10      	ble.n	767a <__aeabi_d2iz+0x36>
    7658:	4c0f      	ldr	r4, [pc, #60]	; (7698 <__aeabi_d2iz+0x54>)
    765a:	42a3      	cmp	r3, r4
    765c:	dc0f      	bgt.n	767e <__aeabi_d2iz+0x3a>
    765e:	2480      	movs	r4, #128	; 0x80
    7660:	4d0e      	ldr	r5, [pc, #56]	; (769c <__aeabi_d2iz+0x58>)
    7662:	0364      	lsls	r4, r4, #13
    7664:	4322      	orrs	r2, r4
    7666:	1aed      	subs	r5, r5, r3
    7668:	2d1f      	cmp	r5, #31
    766a:	dd0b      	ble.n	7684 <__aeabi_d2iz+0x40>
    766c:	480c      	ldr	r0, [pc, #48]	; (76a0 <__aeabi_d2iz+0x5c>)
    766e:	1ac3      	subs	r3, r0, r3
    7670:	40da      	lsrs	r2, r3
    7672:	4254      	negs	r4, r2
    7674:	2900      	cmp	r1, #0
    7676:	d100      	bne.n	767a <__aeabi_d2iz+0x36>
    7678:	0014      	movs	r4, r2
    767a:	0020      	movs	r0, r4
    767c:	bd30      	pop	{r4, r5, pc}
    767e:	4b09      	ldr	r3, [pc, #36]	; (76a4 <__aeabi_d2iz+0x60>)
    7680:	18cc      	adds	r4, r1, r3
    7682:	e7fa      	b.n	767a <__aeabi_d2iz+0x36>
    7684:	4c08      	ldr	r4, [pc, #32]	; (76a8 <__aeabi_d2iz+0x64>)
    7686:	40e8      	lsrs	r0, r5
    7688:	46a4      	mov	ip, r4
    768a:	4463      	add	r3, ip
    768c:	409a      	lsls	r2, r3
    768e:	4302      	orrs	r2, r0
    7690:	e7ef      	b.n	7672 <__aeabi_d2iz+0x2e>
    7692:	46c0      	nop			; (mov r8, r8)
    7694:	000003fe 	.word	0x000003fe
    7698:	0000041d 	.word	0x0000041d
    769c:	00000433 	.word	0x00000433
    76a0:	00000413 	.word	0x00000413
    76a4:	7fffffff 	.word	0x7fffffff
    76a8:	fffffbed 	.word	0xfffffbed

000076ac <__aeabi_i2d>:
    76ac:	b570      	push	{r4, r5, r6, lr}
    76ae:	2800      	cmp	r0, #0
    76b0:	d030      	beq.n	7714 <__aeabi_i2d+0x68>
    76b2:	17c3      	asrs	r3, r0, #31
    76b4:	18c4      	adds	r4, r0, r3
    76b6:	405c      	eors	r4, r3
    76b8:	0fc5      	lsrs	r5, r0, #31
    76ba:	0020      	movs	r0, r4
    76bc:	f000 f900 	bl	78c0 <__clzsi2>
    76c0:	4b17      	ldr	r3, [pc, #92]	; (7720 <__aeabi_i2d+0x74>)
    76c2:	4a18      	ldr	r2, [pc, #96]	; (7724 <__aeabi_i2d+0x78>)
    76c4:	1a1b      	subs	r3, r3, r0
    76c6:	1ad2      	subs	r2, r2, r3
    76c8:	2a1f      	cmp	r2, #31
    76ca:	dd18      	ble.n	76fe <__aeabi_i2d+0x52>
    76cc:	4a16      	ldr	r2, [pc, #88]	; (7728 <__aeabi_i2d+0x7c>)
    76ce:	1ad2      	subs	r2, r2, r3
    76d0:	4094      	lsls	r4, r2
    76d2:	2200      	movs	r2, #0
    76d4:	0324      	lsls	r4, r4, #12
    76d6:	055b      	lsls	r3, r3, #21
    76d8:	0b24      	lsrs	r4, r4, #12
    76da:	0d5b      	lsrs	r3, r3, #21
    76dc:	2100      	movs	r1, #0
    76de:	0010      	movs	r0, r2
    76e0:	0324      	lsls	r4, r4, #12
    76e2:	0d0a      	lsrs	r2, r1, #20
    76e4:	0b24      	lsrs	r4, r4, #12
    76e6:	0512      	lsls	r2, r2, #20
    76e8:	4322      	orrs	r2, r4
    76ea:	4c10      	ldr	r4, [pc, #64]	; (772c <__aeabi_i2d+0x80>)
    76ec:	051b      	lsls	r3, r3, #20
    76ee:	4022      	ands	r2, r4
    76f0:	4313      	orrs	r3, r2
    76f2:	005b      	lsls	r3, r3, #1
    76f4:	07ed      	lsls	r5, r5, #31
    76f6:	085b      	lsrs	r3, r3, #1
    76f8:	432b      	orrs	r3, r5
    76fa:	0019      	movs	r1, r3
    76fc:	bd70      	pop	{r4, r5, r6, pc}
    76fe:	0021      	movs	r1, r4
    7700:	4091      	lsls	r1, r2
    7702:	000a      	movs	r2, r1
    7704:	210b      	movs	r1, #11
    7706:	1a08      	subs	r0, r1, r0
    7708:	40c4      	lsrs	r4, r0
    770a:	055b      	lsls	r3, r3, #21
    770c:	0324      	lsls	r4, r4, #12
    770e:	0b24      	lsrs	r4, r4, #12
    7710:	0d5b      	lsrs	r3, r3, #21
    7712:	e7e3      	b.n	76dc <__aeabi_i2d+0x30>
    7714:	2500      	movs	r5, #0
    7716:	2300      	movs	r3, #0
    7718:	2400      	movs	r4, #0
    771a:	2200      	movs	r2, #0
    771c:	e7de      	b.n	76dc <__aeabi_i2d+0x30>
    771e:	46c0      	nop			; (mov r8, r8)
    7720:	0000041e 	.word	0x0000041e
    7724:	00000433 	.word	0x00000433
    7728:	00000413 	.word	0x00000413
    772c:	800fffff 	.word	0x800fffff

00007730 <__aeabi_ui2d>:
    7730:	b510      	push	{r4, lr}
    7732:	1e04      	subs	r4, r0, #0
    7734:	d028      	beq.n	7788 <__aeabi_ui2d+0x58>
    7736:	f000 f8c3 	bl	78c0 <__clzsi2>
    773a:	4b15      	ldr	r3, [pc, #84]	; (7790 <__aeabi_ui2d+0x60>)
    773c:	4a15      	ldr	r2, [pc, #84]	; (7794 <__aeabi_ui2d+0x64>)
    773e:	1a1b      	subs	r3, r3, r0
    7740:	1ad2      	subs	r2, r2, r3
    7742:	2a1f      	cmp	r2, #31
    7744:	dd15      	ble.n	7772 <__aeabi_ui2d+0x42>
    7746:	4a14      	ldr	r2, [pc, #80]	; (7798 <__aeabi_ui2d+0x68>)
    7748:	1ad2      	subs	r2, r2, r3
    774a:	4094      	lsls	r4, r2
    774c:	2200      	movs	r2, #0
    774e:	0324      	lsls	r4, r4, #12
    7750:	055b      	lsls	r3, r3, #21
    7752:	0b24      	lsrs	r4, r4, #12
    7754:	0d5b      	lsrs	r3, r3, #21
    7756:	2100      	movs	r1, #0
    7758:	0010      	movs	r0, r2
    775a:	0324      	lsls	r4, r4, #12
    775c:	0d0a      	lsrs	r2, r1, #20
    775e:	0b24      	lsrs	r4, r4, #12
    7760:	0512      	lsls	r2, r2, #20
    7762:	4322      	orrs	r2, r4
    7764:	4c0d      	ldr	r4, [pc, #52]	; (779c <__aeabi_ui2d+0x6c>)
    7766:	051b      	lsls	r3, r3, #20
    7768:	4022      	ands	r2, r4
    776a:	4313      	orrs	r3, r2
    776c:	005b      	lsls	r3, r3, #1
    776e:	0859      	lsrs	r1, r3, #1
    7770:	bd10      	pop	{r4, pc}
    7772:	0021      	movs	r1, r4
    7774:	4091      	lsls	r1, r2
    7776:	000a      	movs	r2, r1
    7778:	210b      	movs	r1, #11
    777a:	1a08      	subs	r0, r1, r0
    777c:	40c4      	lsrs	r4, r0
    777e:	055b      	lsls	r3, r3, #21
    7780:	0324      	lsls	r4, r4, #12
    7782:	0b24      	lsrs	r4, r4, #12
    7784:	0d5b      	lsrs	r3, r3, #21
    7786:	e7e6      	b.n	7756 <__aeabi_ui2d+0x26>
    7788:	2300      	movs	r3, #0
    778a:	2400      	movs	r4, #0
    778c:	2200      	movs	r2, #0
    778e:	e7e2      	b.n	7756 <__aeabi_ui2d+0x26>
    7790:	0000041e 	.word	0x0000041e
    7794:	00000433 	.word	0x00000433
    7798:	00000413 	.word	0x00000413
    779c:	800fffff 	.word	0x800fffff

000077a0 <__aeabi_f2d>:
    77a0:	0041      	lsls	r1, r0, #1
    77a2:	0e09      	lsrs	r1, r1, #24
    77a4:	1c4b      	adds	r3, r1, #1
    77a6:	b570      	push	{r4, r5, r6, lr}
    77a8:	b2db      	uxtb	r3, r3
    77aa:	0246      	lsls	r6, r0, #9
    77ac:	0a75      	lsrs	r5, r6, #9
    77ae:	0fc4      	lsrs	r4, r0, #31
    77b0:	2b01      	cmp	r3, #1
    77b2:	dd14      	ble.n	77de <__aeabi_f2d+0x3e>
    77b4:	23e0      	movs	r3, #224	; 0xe0
    77b6:	009b      	lsls	r3, r3, #2
    77b8:	076d      	lsls	r5, r5, #29
    77ba:	0b36      	lsrs	r6, r6, #12
    77bc:	18cb      	adds	r3, r1, r3
    77be:	2100      	movs	r1, #0
    77c0:	0d0a      	lsrs	r2, r1, #20
    77c2:	0028      	movs	r0, r5
    77c4:	0512      	lsls	r2, r2, #20
    77c6:	4d1c      	ldr	r5, [pc, #112]	; (7838 <__aeabi_f2d+0x98>)
    77c8:	4332      	orrs	r2, r6
    77ca:	055b      	lsls	r3, r3, #21
    77cc:	402a      	ands	r2, r5
    77ce:	085b      	lsrs	r3, r3, #1
    77d0:	4313      	orrs	r3, r2
    77d2:	005b      	lsls	r3, r3, #1
    77d4:	07e4      	lsls	r4, r4, #31
    77d6:	085b      	lsrs	r3, r3, #1
    77d8:	4323      	orrs	r3, r4
    77da:	0019      	movs	r1, r3
    77dc:	bd70      	pop	{r4, r5, r6, pc}
    77de:	2900      	cmp	r1, #0
    77e0:	d114      	bne.n	780c <__aeabi_f2d+0x6c>
    77e2:	2d00      	cmp	r5, #0
    77e4:	d01e      	beq.n	7824 <__aeabi_f2d+0x84>
    77e6:	0028      	movs	r0, r5
    77e8:	f000 f86a 	bl	78c0 <__clzsi2>
    77ec:	280a      	cmp	r0, #10
    77ee:	dc1c      	bgt.n	782a <__aeabi_f2d+0x8a>
    77f0:	230b      	movs	r3, #11
    77f2:	002a      	movs	r2, r5
    77f4:	1a1b      	subs	r3, r3, r0
    77f6:	40da      	lsrs	r2, r3
    77f8:	0003      	movs	r3, r0
    77fa:	3315      	adds	r3, #21
    77fc:	409d      	lsls	r5, r3
    77fe:	4b0f      	ldr	r3, [pc, #60]	; (783c <__aeabi_f2d+0x9c>)
    7800:	0312      	lsls	r2, r2, #12
    7802:	1a1b      	subs	r3, r3, r0
    7804:	055b      	lsls	r3, r3, #21
    7806:	0b16      	lsrs	r6, r2, #12
    7808:	0d5b      	lsrs	r3, r3, #21
    780a:	e7d8      	b.n	77be <__aeabi_f2d+0x1e>
    780c:	2d00      	cmp	r5, #0
    780e:	d006      	beq.n	781e <__aeabi_f2d+0x7e>
    7810:	0b32      	lsrs	r2, r6, #12
    7812:	2680      	movs	r6, #128	; 0x80
    7814:	0336      	lsls	r6, r6, #12
    7816:	076d      	lsls	r5, r5, #29
    7818:	4316      	orrs	r6, r2
    781a:	4b09      	ldr	r3, [pc, #36]	; (7840 <__aeabi_f2d+0xa0>)
    781c:	e7cf      	b.n	77be <__aeabi_f2d+0x1e>
    781e:	4b08      	ldr	r3, [pc, #32]	; (7840 <__aeabi_f2d+0xa0>)
    7820:	2600      	movs	r6, #0
    7822:	e7cc      	b.n	77be <__aeabi_f2d+0x1e>
    7824:	2300      	movs	r3, #0
    7826:	2600      	movs	r6, #0
    7828:	e7c9      	b.n	77be <__aeabi_f2d+0x1e>
    782a:	0003      	movs	r3, r0
    782c:	002a      	movs	r2, r5
    782e:	3b0b      	subs	r3, #11
    7830:	409a      	lsls	r2, r3
    7832:	2500      	movs	r5, #0
    7834:	e7e3      	b.n	77fe <__aeabi_f2d+0x5e>
    7836:	46c0      	nop			; (mov r8, r8)
    7838:	800fffff 	.word	0x800fffff
    783c:	00000389 	.word	0x00000389
    7840:	000007ff 	.word	0x000007ff

00007844 <__aeabi_cdrcmple>:
    7844:	4684      	mov	ip, r0
    7846:	1c10      	adds	r0, r2, #0
    7848:	4662      	mov	r2, ip
    784a:	468c      	mov	ip, r1
    784c:	1c19      	adds	r1, r3, #0
    784e:	4663      	mov	r3, ip
    7850:	e000      	b.n	7854 <__aeabi_cdcmpeq>
    7852:	46c0      	nop			; (mov r8, r8)

00007854 <__aeabi_cdcmpeq>:
    7854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7856:	f000 f91b 	bl	7a90 <__ledf2>
    785a:	2800      	cmp	r0, #0
    785c:	d401      	bmi.n	7862 <__aeabi_cdcmpeq+0xe>
    785e:	2100      	movs	r1, #0
    7860:	42c8      	cmn	r0, r1
    7862:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007864 <__aeabi_dcmpeq>:
    7864:	b510      	push	{r4, lr}
    7866:	f000 f875 	bl	7954 <__eqdf2>
    786a:	4240      	negs	r0, r0
    786c:	3001      	adds	r0, #1
    786e:	bd10      	pop	{r4, pc}

00007870 <__aeabi_dcmplt>:
    7870:	b510      	push	{r4, lr}
    7872:	f000 f90d 	bl	7a90 <__ledf2>
    7876:	2800      	cmp	r0, #0
    7878:	db01      	blt.n	787e <__aeabi_dcmplt+0xe>
    787a:	2000      	movs	r0, #0
    787c:	bd10      	pop	{r4, pc}
    787e:	2001      	movs	r0, #1
    7880:	bd10      	pop	{r4, pc}
    7882:	46c0      	nop			; (mov r8, r8)

00007884 <__aeabi_dcmple>:
    7884:	b510      	push	{r4, lr}
    7886:	f000 f903 	bl	7a90 <__ledf2>
    788a:	2800      	cmp	r0, #0
    788c:	dd01      	ble.n	7892 <__aeabi_dcmple+0xe>
    788e:	2000      	movs	r0, #0
    7890:	bd10      	pop	{r4, pc}
    7892:	2001      	movs	r0, #1
    7894:	bd10      	pop	{r4, pc}
    7896:	46c0      	nop			; (mov r8, r8)

00007898 <__aeabi_dcmpgt>:
    7898:	b510      	push	{r4, lr}
    789a:	f000 f895 	bl	79c8 <__gedf2>
    789e:	2800      	cmp	r0, #0
    78a0:	dc01      	bgt.n	78a6 <__aeabi_dcmpgt+0xe>
    78a2:	2000      	movs	r0, #0
    78a4:	bd10      	pop	{r4, pc}
    78a6:	2001      	movs	r0, #1
    78a8:	bd10      	pop	{r4, pc}
    78aa:	46c0      	nop			; (mov r8, r8)

000078ac <__aeabi_dcmpge>:
    78ac:	b510      	push	{r4, lr}
    78ae:	f000 f88b 	bl	79c8 <__gedf2>
    78b2:	2800      	cmp	r0, #0
    78b4:	da01      	bge.n	78ba <__aeabi_dcmpge+0xe>
    78b6:	2000      	movs	r0, #0
    78b8:	bd10      	pop	{r4, pc}
    78ba:	2001      	movs	r0, #1
    78bc:	bd10      	pop	{r4, pc}
    78be:	46c0      	nop			; (mov r8, r8)

000078c0 <__clzsi2>:
    78c0:	211c      	movs	r1, #28
    78c2:	2301      	movs	r3, #1
    78c4:	041b      	lsls	r3, r3, #16
    78c6:	4298      	cmp	r0, r3
    78c8:	d301      	bcc.n	78ce <__clzsi2+0xe>
    78ca:	0c00      	lsrs	r0, r0, #16
    78cc:	3910      	subs	r1, #16
    78ce:	0a1b      	lsrs	r3, r3, #8
    78d0:	4298      	cmp	r0, r3
    78d2:	d301      	bcc.n	78d8 <__clzsi2+0x18>
    78d4:	0a00      	lsrs	r0, r0, #8
    78d6:	3908      	subs	r1, #8
    78d8:	091b      	lsrs	r3, r3, #4
    78da:	4298      	cmp	r0, r3
    78dc:	d301      	bcc.n	78e2 <__clzsi2+0x22>
    78de:	0900      	lsrs	r0, r0, #4
    78e0:	3904      	subs	r1, #4
    78e2:	a202      	add	r2, pc, #8	; (adr r2, 78ec <__clzsi2+0x2c>)
    78e4:	5c10      	ldrb	r0, [r2, r0]
    78e6:	1840      	adds	r0, r0, r1
    78e8:	4770      	bx	lr
    78ea:	46c0      	nop			; (mov r8, r8)
    78ec:	02020304 	.word	0x02020304
    78f0:	01010101 	.word	0x01010101
	...

000078fc <__clzdi2>:
    78fc:	b510      	push	{r4, lr}
    78fe:	2900      	cmp	r1, #0
    7900:	d103      	bne.n	790a <__clzdi2+0xe>
    7902:	f7ff ffdd 	bl	78c0 <__clzsi2>
    7906:	3020      	adds	r0, #32
    7908:	e002      	b.n	7910 <__clzdi2+0x14>
    790a:	1c08      	adds	r0, r1, #0
    790c:	f7ff ffd8 	bl	78c0 <__clzsi2>
    7910:	bd10      	pop	{r4, pc}
    7912:	46c0      	nop			; (mov r8, r8)

00007914 <__ctzsi2>:
    7914:	4241      	negs	r1, r0
    7916:	4008      	ands	r0, r1
    7918:	211c      	movs	r1, #28
    791a:	2301      	movs	r3, #1
    791c:	041b      	lsls	r3, r3, #16
    791e:	4298      	cmp	r0, r3
    7920:	d301      	bcc.n	7926 <__ctzsi2+0x12>
    7922:	0c00      	lsrs	r0, r0, #16
    7924:	3910      	subs	r1, #16
    7926:	0a1b      	lsrs	r3, r3, #8
    7928:	4298      	cmp	r0, r3
    792a:	d301      	bcc.n	7930 <__ctzsi2+0x1c>
    792c:	0a00      	lsrs	r0, r0, #8
    792e:	3908      	subs	r1, #8
    7930:	091b      	lsrs	r3, r3, #4
    7932:	4298      	cmp	r0, r3
    7934:	d301      	bcc.n	793a <__ctzsi2+0x26>
    7936:	0900      	lsrs	r0, r0, #4
    7938:	3904      	subs	r1, #4
    793a:	a202      	add	r2, pc, #8	; (adr r2, 7944 <__ctzsi2+0x30>)
    793c:	5c10      	ldrb	r0, [r2, r0]
    793e:	1a40      	subs	r0, r0, r1
    7940:	4770      	bx	lr
    7942:	46c0      	nop			; (mov r8, r8)
    7944:	1d1d1c1b 	.word	0x1d1d1c1b
    7948:	1e1e1e1e 	.word	0x1e1e1e1e
    794c:	1f1f1f1f 	.word	0x1f1f1f1f
    7950:	1f1f1f1f 	.word	0x1f1f1f1f

00007954 <__eqdf2>:
    7954:	b5f0      	push	{r4, r5, r6, r7, lr}
    7956:	464f      	mov	r7, r9
    7958:	4646      	mov	r6, r8
    795a:	46d6      	mov	lr, sl
    795c:	005c      	lsls	r4, r3, #1
    795e:	b5c0      	push	{r6, r7, lr}
    7960:	031f      	lsls	r7, r3, #12
    7962:	0fdb      	lsrs	r3, r3, #31
    7964:	469a      	mov	sl, r3
    7966:	4b17      	ldr	r3, [pc, #92]	; (79c4 <__eqdf2+0x70>)
    7968:	030e      	lsls	r6, r1, #12
    796a:	004d      	lsls	r5, r1, #1
    796c:	4684      	mov	ip, r0
    796e:	4680      	mov	r8, r0
    7970:	0b36      	lsrs	r6, r6, #12
    7972:	0d6d      	lsrs	r5, r5, #21
    7974:	0fc9      	lsrs	r1, r1, #31
    7976:	4691      	mov	r9, r2
    7978:	0b3f      	lsrs	r7, r7, #12
    797a:	0d64      	lsrs	r4, r4, #21
    797c:	2001      	movs	r0, #1
    797e:	429d      	cmp	r5, r3
    7980:	d008      	beq.n	7994 <__eqdf2+0x40>
    7982:	429c      	cmp	r4, r3
    7984:	d001      	beq.n	798a <__eqdf2+0x36>
    7986:	42a5      	cmp	r5, r4
    7988:	d00b      	beq.n	79a2 <__eqdf2+0x4e>
    798a:	bc1c      	pop	{r2, r3, r4}
    798c:	4690      	mov	r8, r2
    798e:	4699      	mov	r9, r3
    7990:	46a2      	mov	sl, r4
    7992:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7994:	4663      	mov	r3, ip
    7996:	4333      	orrs	r3, r6
    7998:	d1f7      	bne.n	798a <__eqdf2+0x36>
    799a:	42ac      	cmp	r4, r5
    799c:	d1f5      	bne.n	798a <__eqdf2+0x36>
    799e:	433a      	orrs	r2, r7
    79a0:	d1f3      	bne.n	798a <__eqdf2+0x36>
    79a2:	2001      	movs	r0, #1
    79a4:	42be      	cmp	r6, r7
    79a6:	d1f0      	bne.n	798a <__eqdf2+0x36>
    79a8:	45c8      	cmp	r8, r9
    79aa:	d1ee      	bne.n	798a <__eqdf2+0x36>
    79ac:	4551      	cmp	r1, sl
    79ae:	d007      	beq.n	79c0 <__eqdf2+0x6c>
    79b0:	2d00      	cmp	r5, #0
    79b2:	d1ea      	bne.n	798a <__eqdf2+0x36>
    79b4:	4663      	mov	r3, ip
    79b6:	431e      	orrs	r6, r3
    79b8:	0030      	movs	r0, r6
    79ba:	1e46      	subs	r6, r0, #1
    79bc:	41b0      	sbcs	r0, r6
    79be:	e7e4      	b.n	798a <__eqdf2+0x36>
    79c0:	2000      	movs	r0, #0
    79c2:	e7e2      	b.n	798a <__eqdf2+0x36>
    79c4:	000007ff 	.word	0x000007ff

000079c8 <__gedf2>:
    79c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    79ca:	4645      	mov	r5, r8
    79cc:	46de      	mov	lr, fp
    79ce:	4657      	mov	r7, sl
    79d0:	464e      	mov	r6, r9
    79d2:	b5e0      	push	{r5, r6, r7, lr}
    79d4:	031f      	lsls	r7, r3, #12
    79d6:	0b3d      	lsrs	r5, r7, #12
    79d8:	4f2c      	ldr	r7, [pc, #176]	; (7a8c <__gedf2+0xc4>)
    79da:	030e      	lsls	r6, r1, #12
    79dc:	004c      	lsls	r4, r1, #1
    79de:	46ab      	mov	fp, r5
    79e0:	005d      	lsls	r5, r3, #1
    79e2:	4684      	mov	ip, r0
    79e4:	0b36      	lsrs	r6, r6, #12
    79e6:	0d64      	lsrs	r4, r4, #21
    79e8:	0fc9      	lsrs	r1, r1, #31
    79ea:	4690      	mov	r8, r2
    79ec:	0d6d      	lsrs	r5, r5, #21
    79ee:	0fdb      	lsrs	r3, r3, #31
    79f0:	42bc      	cmp	r4, r7
    79f2:	d02a      	beq.n	7a4a <__gedf2+0x82>
    79f4:	4f25      	ldr	r7, [pc, #148]	; (7a8c <__gedf2+0xc4>)
    79f6:	42bd      	cmp	r5, r7
    79f8:	d02d      	beq.n	7a56 <__gedf2+0x8e>
    79fa:	2c00      	cmp	r4, #0
    79fc:	d10f      	bne.n	7a1e <__gedf2+0x56>
    79fe:	4330      	orrs	r0, r6
    7a00:	0007      	movs	r7, r0
    7a02:	4681      	mov	r9, r0
    7a04:	4278      	negs	r0, r7
    7a06:	4178      	adcs	r0, r7
    7a08:	b2c0      	uxtb	r0, r0
    7a0a:	2d00      	cmp	r5, #0
    7a0c:	d117      	bne.n	7a3e <__gedf2+0x76>
    7a0e:	465f      	mov	r7, fp
    7a10:	433a      	orrs	r2, r7
    7a12:	d114      	bne.n	7a3e <__gedf2+0x76>
    7a14:	464b      	mov	r3, r9
    7a16:	2000      	movs	r0, #0
    7a18:	2b00      	cmp	r3, #0
    7a1a:	d00a      	beq.n	7a32 <__gedf2+0x6a>
    7a1c:	e006      	b.n	7a2c <__gedf2+0x64>
    7a1e:	2d00      	cmp	r5, #0
    7a20:	d102      	bne.n	7a28 <__gedf2+0x60>
    7a22:	4658      	mov	r0, fp
    7a24:	4302      	orrs	r2, r0
    7a26:	d001      	beq.n	7a2c <__gedf2+0x64>
    7a28:	4299      	cmp	r1, r3
    7a2a:	d018      	beq.n	7a5e <__gedf2+0x96>
    7a2c:	4248      	negs	r0, r1
    7a2e:	2101      	movs	r1, #1
    7a30:	4308      	orrs	r0, r1
    7a32:	bc3c      	pop	{r2, r3, r4, r5}
    7a34:	4690      	mov	r8, r2
    7a36:	4699      	mov	r9, r3
    7a38:	46a2      	mov	sl, r4
    7a3a:	46ab      	mov	fp, r5
    7a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7a3e:	2800      	cmp	r0, #0
    7a40:	d0f2      	beq.n	7a28 <__gedf2+0x60>
    7a42:	2001      	movs	r0, #1
    7a44:	3b01      	subs	r3, #1
    7a46:	4318      	orrs	r0, r3
    7a48:	e7f3      	b.n	7a32 <__gedf2+0x6a>
    7a4a:	0037      	movs	r7, r6
    7a4c:	4307      	orrs	r7, r0
    7a4e:	d0d1      	beq.n	79f4 <__gedf2+0x2c>
    7a50:	2002      	movs	r0, #2
    7a52:	4240      	negs	r0, r0
    7a54:	e7ed      	b.n	7a32 <__gedf2+0x6a>
    7a56:	465f      	mov	r7, fp
    7a58:	4317      	orrs	r7, r2
    7a5a:	d0ce      	beq.n	79fa <__gedf2+0x32>
    7a5c:	e7f8      	b.n	7a50 <__gedf2+0x88>
    7a5e:	42ac      	cmp	r4, r5
    7a60:	dce4      	bgt.n	7a2c <__gedf2+0x64>
    7a62:	da03      	bge.n	7a6c <__gedf2+0xa4>
    7a64:	1e48      	subs	r0, r1, #1
    7a66:	2101      	movs	r1, #1
    7a68:	4308      	orrs	r0, r1
    7a6a:	e7e2      	b.n	7a32 <__gedf2+0x6a>
    7a6c:	455e      	cmp	r6, fp
    7a6e:	d8dd      	bhi.n	7a2c <__gedf2+0x64>
    7a70:	d006      	beq.n	7a80 <__gedf2+0xb8>
    7a72:	2000      	movs	r0, #0
    7a74:	455e      	cmp	r6, fp
    7a76:	d2dc      	bcs.n	7a32 <__gedf2+0x6a>
    7a78:	2301      	movs	r3, #1
    7a7a:	1e48      	subs	r0, r1, #1
    7a7c:	4318      	orrs	r0, r3
    7a7e:	e7d8      	b.n	7a32 <__gedf2+0x6a>
    7a80:	45c4      	cmp	ip, r8
    7a82:	d8d3      	bhi.n	7a2c <__gedf2+0x64>
    7a84:	2000      	movs	r0, #0
    7a86:	45c4      	cmp	ip, r8
    7a88:	d3f6      	bcc.n	7a78 <__gedf2+0xb0>
    7a8a:	e7d2      	b.n	7a32 <__gedf2+0x6a>
    7a8c:	000007ff 	.word	0x000007ff

00007a90 <__ledf2>:
    7a90:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a92:	464e      	mov	r6, r9
    7a94:	4645      	mov	r5, r8
    7a96:	46de      	mov	lr, fp
    7a98:	4657      	mov	r7, sl
    7a9a:	005c      	lsls	r4, r3, #1
    7a9c:	b5e0      	push	{r5, r6, r7, lr}
    7a9e:	031f      	lsls	r7, r3, #12
    7aa0:	0fdb      	lsrs	r3, r3, #31
    7aa2:	4699      	mov	r9, r3
    7aa4:	4b2a      	ldr	r3, [pc, #168]	; (7b50 <__ledf2+0xc0>)
    7aa6:	030e      	lsls	r6, r1, #12
    7aa8:	004d      	lsls	r5, r1, #1
    7aaa:	0fc9      	lsrs	r1, r1, #31
    7aac:	4684      	mov	ip, r0
    7aae:	0b36      	lsrs	r6, r6, #12
    7ab0:	0d6d      	lsrs	r5, r5, #21
    7ab2:	468b      	mov	fp, r1
    7ab4:	4690      	mov	r8, r2
    7ab6:	0b3f      	lsrs	r7, r7, #12
    7ab8:	0d64      	lsrs	r4, r4, #21
    7aba:	429d      	cmp	r5, r3
    7abc:	d020      	beq.n	7b00 <__ledf2+0x70>
    7abe:	4b24      	ldr	r3, [pc, #144]	; (7b50 <__ledf2+0xc0>)
    7ac0:	429c      	cmp	r4, r3
    7ac2:	d022      	beq.n	7b0a <__ledf2+0x7a>
    7ac4:	2d00      	cmp	r5, #0
    7ac6:	d112      	bne.n	7aee <__ledf2+0x5e>
    7ac8:	4330      	orrs	r0, r6
    7aca:	4243      	negs	r3, r0
    7acc:	4143      	adcs	r3, r0
    7ace:	b2db      	uxtb	r3, r3
    7ad0:	2c00      	cmp	r4, #0
    7ad2:	d01f      	beq.n	7b14 <__ledf2+0x84>
    7ad4:	2b00      	cmp	r3, #0
    7ad6:	d00c      	beq.n	7af2 <__ledf2+0x62>
    7ad8:	464b      	mov	r3, r9
    7ada:	2001      	movs	r0, #1
    7adc:	3b01      	subs	r3, #1
    7ade:	4303      	orrs	r3, r0
    7ae0:	0018      	movs	r0, r3
    7ae2:	bc3c      	pop	{r2, r3, r4, r5}
    7ae4:	4690      	mov	r8, r2
    7ae6:	4699      	mov	r9, r3
    7ae8:	46a2      	mov	sl, r4
    7aea:	46ab      	mov	fp, r5
    7aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7aee:	2c00      	cmp	r4, #0
    7af0:	d016      	beq.n	7b20 <__ledf2+0x90>
    7af2:	45cb      	cmp	fp, r9
    7af4:	d017      	beq.n	7b26 <__ledf2+0x96>
    7af6:	465b      	mov	r3, fp
    7af8:	4259      	negs	r1, r3
    7afa:	2301      	movs	r3, #1
    7afc:	430b      	orrs	r3, r1
    7afe:	e7ef      	b.n	7ae0 <__ledf2+0x50>
    7b00:	0031      	movs	r1, r6
    7b02:	2302      	movs	r3, #2
    7b04:	4301      	orrs	r1, r0
    7b06:	d1eb      	bne.n	7ae0 <__ledf2+0x50>
    7b08:	e7d9      	b.n	7abe <__ledf2+0x2e>
    7b0a:	0039      	movs	r1, r7
    7b0c:	2302      	movs	r3, #2
    7b0e:	4311      	orrs	r1, r2
    7b10:	d1e6      	bne.n	7ae0 <__ledf2+0x50>
    7b12:	e7d7      	b.n	7ac4 <__ledf2+0x34>
    7b14:	433a      	orrs	r2, r7
    7b16:	d1dd      	bne.n	7ad4 <__ledf2+0x44>
    7b18:	2300      	movs	r3, #0
    7b1a:	2800      	cmp	r0, #0
    7b1c:	d0e0      	beq.n	7ae0 <__ledf2+0x50>
    7b1e:	e7ea      	b.n	7af6 <__ledf2+0x66>
    7b20:	433a      	orrs	r2, r7
    7b22:	d1e6      	bne.n	7af2 <__ledf2+0x62>
    7b24:	e7e7      	b.n	7af6 <__ledf2+0x66>
    7b26:	42a5      	cmp	r5, r4
    7b28:	dce5      	bgt.n	7af6 <__ledf2+0x66>
    7b2a:	db05      	blt.n	7b38 <__ledf2+0xa8>
    7b2c:	42be      	cmp	r6, r7
    7b2e:	d8e2      	bhi.n	7af6 <__ledf2+0x66>
    7b30:	d007      	beq.n	7b42 <__ledf2+0xb2>
    7b32:	2300      	movs	r3, #0
    7b34:	42be      	cmp	r6, r7
    7b36:	d2d3      	bcs.n	7ae0 <__ledf2+0x50>
    7b38:	4659      	mov	r1, fp
    7b3a:	2301      	movs	r3, #1
    7b3c:	3901      	subs	r1, #1
    7b3e:	430b      	orrs	r3, r1
    7b40:	e7ce      	b.n	7ae0 <__ledf2+0x50>
    7b42:	45c4      	cmp	ip, r8
    7b44:	d8d7      	bhi.n	7af6 <__ledf2+0x66>
    7b46:	2300      	movs	r3, #0
    7b48:	45c4      	cmp	ip, r8
    7b4a:	d3f5      	bcc.n	7b38 <__ledf2+0xa8>
    7b4c:	e7c8      	b.n	7ae0 <__ledf2+0x50>
    7b4e:	46c0      	nop			; (mov r8, r8)
    7b50:	000007ff 	.word	0x000007ff

00007b54 <__libc_init_array>:
    7b54:	b570      	push	{r4, r5, r6, lr}
    7b56:	4e0d      	ldr	r6, [pc, #52]	; (7b8c <__libc_init_array+0x38>)
    7b58:	4d0d      	ldr	r5, [pc, #52]	; (7b90 <__libc_init_array+0x3c>)
    7b5a:	2400      	movs	r4, #0
    7b5c:	1bad      	subs	r5, r5, r6
    7b5e:	10ad      	asrs	r5, r5, #2
    7b60:	d005      	beq.n	7b6e <__libc_init_array+0x1a>
    7b62:	00a3      	lsls	r3, r4, #2
    7b64:	58f3      	ldr	r3, [r6, r3]
    7b66:	3401      	adds	r4, #1
    7b68:	4798      	blx	r3
    7b6a:	42a5      	cmp	r5, r4
    7b6c:	d1f9      	bne.n	7b62 <__libc_init_array+0xe>
    7b6e:	f00a fe49 	bl	12804 <_init>
    7b72:	4e08      	ldr	r6, [pc, #32]	; (7b94 <__libc_init_array+0x40>)
    7b74:	4d08      	ldr	r5, [pc, #32]	; (7b98 <__libc_init_array+0x44>)
    7b76:	2400      	movs	r4, #0
    7b78:	1bad      	subs	r5, r5, r6
    7b7a:	10ad      	asrs	r5, r5, #2
    7b7c:	d005      	beq.n	7b8a <__libc_init_array+0x36>
    7b7e:	00a3      	lsls	r3, r4, #2
    7b80:	58f3      	ldr	r3, [r6, r3]
    7b82:	3401      	adds	r4, #1
    7b84:	4798      	blx	r3
    7b86:	42a5      	cmp	r5, r4
    7b88:	d1f9      	bne.n	7b7e <__libc_init_array+0x2a>
    7b8a:	bd70      	pop	{r4, r5, r6, pc}
    7b8c:	00012810 	.word	0x00012810
    7b90:	00012810 	.word	0x00012810
    7b94:	00012810 	.word	0x00012810
    7b98:	00012818 	.word	0x00012818

00007b9c <memcmp>:
    7b9c:	b510      	push	{r4, lr}
    7b9e:	2a03      	cmp	r2, #3
    7ba0:	d91c      	bls.n	7bdc <memcmp+0x40>
    7ba2:	0003      	movs	r3, r0
    7ba4:	430b      	orrs	r3, r1
    7ba6:	079b      	lsls	r3, r3, #30
    7ba8:	d00f      	beq.n	7bca <memcmp+0x2e>
    7baa:	7803      	ldrb	r3, [r0, #0]
    7bac:	780c      	ldrb	r4, [r1, #0]
    7bae:	1882      	adds	r2, r0, r2
    7bb0:	42a3      	cmp	r3, r4
    7bb2:	d004      	beq.n	7bbe <memcmp+0x22>
    7bb4:	e015      	b.n	7be2 <memcmp+0x46>
    7bb6:	7803      	ldrb	r3, [r0, #0]
    7bb8:	780c      	ldrb	r4, [r1, #0]
    7bba:	42a3      	cmp	r3, r4
    7bbc:	d111      	bne.n	7be2 <memcmp+0x46>
    7bbe:	3001      	adds	r0, #1
    7bc0:	3101      	adds	r1, #1
    7bc2:	4282      	cmp	r2, r0
    7bc4:	d1f7      	bne.n	7bb6 <memcmp+0x1a>
    7bc6:	2000      	movs	r0, #0
    7bc8:	bd10      	pop	{r4, pc}
    7bca:	6803      	ldr	r3, [r0, #0]
    7bcc:	680c      	ldr	r4, [r1, #0]
    7bce:	42a3      	cmp	r3, r4
    7bd0:	d1eb      	bne.n	7baa <memcmp+0xe>
    7bd2:	3a04      	subs	r2, #4
    7bd4:	3004      	adds	r0, #4
    7bd6:	3104      	adds	r1, #4
    7bd8:	2a03      	cmp	r2, #3
    7bda:	d8f6      	bhi.n	7bca <memcmp+0x2e>
    7bdc:	2a00      	cmp	r2, #0
    7bde:	d1e4      	bne.n	7baa <memcmp+0xe>
    7be0:	e7f1      	b.n	7bc6 <memcmp+0x2a>
    7be2:	1b18      	subs	r0, r3, r4
    7be4:	e7f0      	b.n	7bc8 <memcmp+0x2c>
    7be6:	46c0      	nop			; (mov r8, r8)

00007be8 <memcpy>:
    7be8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bea:	0005      	movs	r5, r0
    7bec:	2a0f      	cmp	r2, #15
    7bee:	d92f      	bls.n	7c50 <memcpy+0x68>
    7bf0:	000b      	movs	r3, r1
    7bf2:	4303      	orrs	r3, r0
    7bf4:	079b      	lsls	r3, r3, #30
    7bf6:	d134      	bne.n	7c62 <memcpy+0x7a>
    7bf8:	0016      	movs	r6, r2
    7bfa:	000c      	movs	r4, r1
    7bfc:	0003      	movs	r3, r0
    7bfe:	3e10      	subs	r6, #16
    7c00:	0935      	lsrs	r5, r6, #4
    7c02:	3501      	adds	r5, #1
    7c04:	012d      	lsls	r5, r5, #4
    7c06:	1945      	adds	r5, r0, r5
    7c08:	6827      	ldr	r7, [r4, #0]
    7c0a:	601f      	str	r7, [r3, #0]
    7c0c:	6867      	ldr	r7, [r4, #4]
    7c0e:	605f      	str	r7, [r3, #4]
    7c10:	68a7      	ldr	r7, [r4, #8]
    7c12:	609f      	str	r7, [r3, #8]
    7c14:	68e7      	ldr	r7, [r4, #12]
    7c16:	3410      	adds	r4, #16
    7c18:	60df      	str	r7, [r3, #12]
    7c1a:	3310      	adds	r3, #16
    7c1c:	429d      	cmp	r5, r3
    7c1e:	d1f3      	bne.n	7c08 <memcpy+0x20>
    7c20:	230f      	movs	r3, #15
    7c22:	439e      	bics	r6, r3
    7c24:	3610      	adds	r6, #16
    7c26:	1985      	adds	r5, r0, r6
    7c28:	1989      	adds	r1, r1, r6
    7c2a:	4013      	ands	r3, r2
    7c2c:	2b03      	cmp	r3, #3
    7c2e:	d91a      	bls.n	7c66 <memcpy+0x7e>
    7c30:	1f1e      	subs	r6, r3, #4
    7c32:	2300      	movs	r3, #0
    7c34:	08b4      	lsrs	r4, r6, #2
    7c36:	3401      	adds	r4, #1
    7c38:	00a4      	lsls	r4, r4, #2
    7c3a:	58cf      	ldr	r7, [r1, r3]
    7c3c:	50ef      	str	r7, [r5, r3]
    7c3e:	3304      	adds	r3, #4
    7c40:	42a3      	cmp	r3, r4
    7c42:	d1fa      	bne.n	7c3a <memcpy+0x52>
    7c44:	2403      	movs	r4, #3
    7c46:	43a6      	bics	r6, r4
    7c48:	1d33      	adds	r3, r6, #4
    7c4a:	4022      	ands	r2, r4
    7c4c:	18c9      	adds	r1, r1, r3
    7c4e:	18ed      	adds	r5, r5, r3
    7c50:	2a00      	cmp	r2, #0
    7c52:	d005      	beq.n	7c60 <memcpy+0x78>
    7c54:	2300      	movs	r3, #0
    7c56:	5ccc      	ldrb	r4, [r1, r3]
    7c58:	54ec      	strb	r4, [r5, r3]
    7c5a:	3301      	adds	r3, #1
    7c5c:	4293      	cmp	r3, r2
    7c5e:	d1fa      	bne.n	7c56 <memcpy+0x6e>
    7c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c62:	0005      	movs	r5, r0
    7c64:	e7f6      	b.n	7c54 <memcpy+0x6c>
    7c66:	001a      	movs	r2, r3
    7c68:	e7f2      	b.n	7c50 <memcpy+0x68>
    7c6a:	46c0      	nop			; (mov r8, r8)

00007c6c <memset>:
    7c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c6e:	0783      	lsls	r3, r0, #30
    7c70:	d043      	beq.n	7cfa <memset+0x8e>
    7c72:	1e54      	subs	r4, r2, #1
    7c74:	2a00      	cmp	r2, #0
    7c76:	d03f      	beq.n	7cf8 <memset+0x8c>
    7c78:	b2ce      	uxtb	r6, r1
    7c7a:	0002      	movs	r2, r0
    7c7c:	2503      	movs	r5, #3
    7c7e:	e002      	b.n	7c86 <memset+0x1a>
    7c80:	001a      	movs	r2, r3
    7c82:	3c01      	subs	r4, #1
    7c84:	d338      	bcc.n	7cf8 <memset+0x8c>
    7c86:	1c53      	adds	r3, r2, #1
    7c88:	7016      	strb	r6, [r2, #0]
    7c8a:	422b      	tst	r3, r5
    7c8c:	d1f8      	bne.n	7c80 <memset+0x14>
    7c8e:	2c03      	cmp	r4, #3
    7c90:	d92a      	bls.n	7ce8 <memset+0x7c>
    7c92:	22ff      	movs	r2, #255	; 0xff
    7c94:	400a      	ands	r2, r1
    7c96:	0215      	lsls	r5, r2, #8
    7c98:	4315      	orrs	r5, r2
    7c9a:	042a      	lsls	r2, r5, #16
    7c9c:	4315      	orrs	r5, r2
    7c9e:	2c0f      	cmp	r4, #15
    7ca0:	d914      	bls.n	7ccc <memset+0x60>
    7ca2:	0027      	movs	r7, r4
    7ca4:	001a      	movs	r2, r3
    7ca6:	3f10      	subs	r7, #16
    7ca8:	093e      	lsrs	r6, r7, #4
    7caa:	3601      	adds	r6, #1
    7cac:	0136      	lsls	r6, r6, #4
    7cae:	199e      	adds	r6, r3, r6
    7cb0:	6015      	str	r5, [r2, #0]
    7cb2:	6055      	str	r5, [r2, #4]
    7cb4:	6095      	str	r5, [r2, #8]
    7cb6:	60d5      	str	r5, [r2, #12]
    7cb8:	3210      	adds	r2, #16
    7cba:	4296      	cmp	r6, r2
    7cbc:	d1f8      	bne.n	7cb0 <memset+0x44>
    7cbe:	220f      	movs	r2, #15
    7cc0:	4397      	bics	r7, r2
    7cc2:	3710      	adds	r7, #16
    7cc4:	19db      	adds	r3, r3, r7
    7cc6:	4014      	ands	r4, r2
    7cc8:	2c03      	cmp	r4, #3
    7cca:	d90d      	bls.n	7ce8 <memset+0x7c>
    7ccc:	001a      	movs	r2, r3
    7cce:	1f27      	subs	r7, r4, #4
    7cd0:	08be      	lsrs	r6, r7, #2
    7cd2:	3601      	adds	r6, #1
    7cd4:	00b6      	lsls	r6, r6, #2
    7cd6:	199e      	adds	r6, r3, r6
    7cd8:	c220      	stmia	r2!, {r5}
    7cda:	42b2      	cmp	r2, r6
    7cdc:	d1fc      	bne.n	7cd8 <memset+0x6c>
    7cde:	2203      	movs	r2, #3
    7ce0:	4397      	bics	r7, r2
    7ce2:	3704      	adds	r7, #4
    7ce4:	19db      	adds	r3, r3, r7
    7ce6:	4014      	ands	r4, r2
    7ce8:	2c00      	cmp	r4, #0
    7cea:	d005      	beq.n	7cf8 <memset+0x8c>
    7cec:	b2c9      	uxtb	r1, r1
    7cee:	191c      	adds	r4, r3, r4
    7cf0:	7019      	strb	r1, [r3, #0]
    7cf2:	3301      	adds	r3, #1
    7cf4:	429c      	cmp	r4, r3
    7cf6:	d1fb      	bne.n	7cf0 <memset+0x84>
    7cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7cfa:	0014      	movs	r4, r2
    7cfc:	0003      	movs	r3, r0
    7cfe:	e7c6      	b.n	7c8e <memset+0x22>

00007d00 <snprintf>:
    7d00:	b40c      	push	{r2, r3}
    7d02:	b530      	push	{r4, r5, lr}
    7d04:	4b1e      	ldr	r3, [pc, #120]	; (7d80 <snprintf+0x80>)
    7d06:	b09d      	sub	sp, #116	; 0x74
    7d08:	681d      	ldr	r5, [r3, #0]
    7d0a:	2900      	cmp	r1, #0
    7d0c:	db33      	blt.n	7d76 <snprintf+0x76>
    7d0e:	2382      	movs	r3, #130	; 0x82
    7d10:	ac02      	add	r4, sp, #8
    7d12:	009b      	lsls	r3, r3, #2
    7d14:	81a3      	strh	r3, [r4, #12]
    7d16:	9002      	str	r0, [sp, #8]
    7d18:	6120      	str	r0, [r4, #16]
    7d1a:	2900      	cmp	r1, #0
    7d1c:	d012      	beq.n	7d44 <snprintf+0x44>
    7d1e:	2301      	movs	r3, #1
    7d20:	3901      	subs	r1, #1
    7d22:	425b      	negs	r3, r3
    7d24:	60a1      	str	r1, [r4, #8]
    7d26:	6161      	str	r1, [r4, #20]
    7d28:	81e3      	strh	r3, [r4, #14]
    7d2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    7d2c:	ab21      	add	r3, sp, #132	; 0x84
    7d2e:	0021      	movs	r1, r4
    7d30:	0028      	movs	r0, r5
    7d32:	9301      	str	r3, [sp, #4]
    7d34:	f000 fc6e 	bl	8614 <_svfprintf_r>
    7d38:	1c43      	adds	r3, r0, #1
    7d3a:	db16      	blt.n	7d6a <snprintf+0x6a>
    7d3c:	2300      	movs	r3, #0
    7d3e:	9a02      	ldr	r2, [sp, #8]
    7d40:	7013      	strb	r3, [r2, #0]
    7d42:	e00d      	b.n	7d60 <snprintf+0x60>
    7d44:	2301      	movs	r3, #1
    7d46:	425b      	negs	r3, r3
    7d48:	60a1      	str	r1, [r4, #8]
    7d4a:	6161      	str	r1, [r4, #20]
    7d4c:	81e3      	strh	r3, [r4, #14]
    7d4e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    7d50:	ab21      	add	r3, sp, #132	; 0x84
    7d52:	0021      	movs	r1, r4
    7d54:	0028      	movs	r0, r5
    7d56:	9301      	str	r3, [sp, #4]
    7d58:	f000 fc5c 	bl	8614 <_svfprintf_r>
    7d5c:	1c43      	adds	r3, r0, #1
    7d5e:	db07      	blt.n	7d70 <snprintf+0x70>
    7d60:	b01d      	add	sp, #116	; 0x74
    7d62:	bc30      	pop	{r4, r5}
    7d64:	bc08      	pop	{r3}
    7d66:	b002      	add	sp, #8
    7d68:	4718      	bx	r3
    7d6a:	238b      	movs	r3, #139	; 0x8b
    7d6c:	602b      	str	r3, [r5, #0]
    7d6e:	e7e5      	b.n	7d3c <snprintf+0x3c>
    7d70:	238b      	movs	r3, #139	; 0x8b
    7d72:	602b      	str	r3, [r5, #0]
    7d74:	e7f4      	b.n	7d60 <snprintf+0x60>
    7d76:	238b      	movs	r3, #139	; 0x8b
    7d78:	2001      	movs	r0, #1
    7d7a:	602b      	str	r3, [r5, #0]
    7d7c:	4240      	negs	r0, r0
    7d7e:	e7ef      	b.n	7d60 <snprintf+0x60>
    7d80:	20000080 	.word	0x20000080

00007d84 <sscanf>:
    7d84:	b40e      	push	{r1, r2, r3}
    7d86:	2381      	movs	r3, #129	; 0x81
    7d88:	b570      	push	{r4, r5, r6, lr}
    7d8a:	b09d      	sub	sp, #116	; 0x74
    7d8c:	ac02      	add	r4, sp, #8
    7d8e:	ad21      	add	r5, sp, #132	; 0x84
    7d90:	009b      	lsls	r3, r3, #2
    7d92:	cd40      	ldmia	r5!, {r6}
    7d94:	81a3      	strh	r3, [r4, #12]
    7d96:	9002      	str	r0, [sp, #8]
    7d98:	9006      	str	r0, [sp, #24]
    7d9a:	f000 f8f9 	bl	7f90 <strlen>
    7d9e:	4b0b      	ldr	r3, [pc, #44]	; (7dcc <sscanf+0x48>)
    7da0:	6060      	str	r0, [r4, #4]
    7da2:	6223      	str	r3, [r4, #32]
    7da4:	2300      	movs	r3, #0
    7da6:	6323      	str	r3, [r4, #48]	; 0x30
    7da8:	6463      	str	r3, [r4, #68]	; 0x44
    7daa:	3b01      	subs	r3, #1
    7dac:	81e3      	strh	r3, [r4, #14]
    7dae:	4b08      	ldr	r3, [pc, #32]	; (7dd0 <sscanf+0x4c>)
    7db0:	6160      	str	r0, [r4, #20]
    7db2:	0032      	movs	r2, r6
    7db4:	6818      	ldr	r0, [r3, #0]
    7db6:	0021      	movs	r1, r4
    7db8:	002b      	movs	r3, r5
    7dba:	9501      	str	r5, [sp, #4]
    7dbc:	f001 ff2e 	bl	9c1c <__ssvfscanf_r>
    7dc0:	b01d      	add	sp, #116	; 0x74
    7dc2:	bc70      	pop	{r4, r5, r6}
    7dc4:	bc08      	pop	{r3}
    7dc6:	b003      	add	sp, #12
    7dc8:	4718      	bx	r3
    7dca:	46c0      	nop			; (mov r8, r8)
    7dcc:	00007dd5 	.word	0x00007dd5
    7dd0:	20000080 	.word	0x20000080

00007dd4 <__seofread>:
    7dd4:	2000      	movs	r0, #0
    7dd6:	4770      	bx	lr

00007dd8 <strcasecmp>:
    7dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7dda:	4647      	mov	r7, r8
    7ddc:	46ce      	mov	lr, r9
    7dde:	4688      	mov	r8, r1
    7de0:	b580      	push	{r7, lr}
    7de2:	4681      	mov	r9, r0
    7de4:	2600      	movs	r6, #0
    7de6:	2703      	movs	r7, #3
    7de8:	464b      	mov	r3, r9
    7dea:	5d9c      	ldrb	r4, [r3, r6]
    7dec:	f003 ffe8 	bl	bdc0 <__locale_ctype_ptr>
    7df0:	1900      	adds	r0, r0, r4
    7df2:	7843      	ldrb	r3, [r0, #1]
    7df4:	403b      	ands	r3, r7
    7df6:	2b01      	cmp	r3, #1
    7df8:	d016      	beq.n	7e28 <strcasecmp+0x50>
    7dfa:	4643      	mov	r3, r8
    7dfc:	5d9d      	ldrb	r5, [r3, r6]
    7dfe:	f003 ffdf 	bl	bdc0 <__locale_ctype_ptr>
    7e02:	1940      	adds	r0, r0, r5
    7e04:	7843      	ldrb	r3, [r0, #1]
    7e06:	403b      	ands	r3, r7
    7e08:	2b01      	cmp	r3, #1
    7e0a:	d005      	beq.n	7e18 <strcasecmp+0x40>
    7e0c:	1b60      	subs	r0, r4, r5
    7e0e:	d107      	bne.n	7e20 <strcasecmp+0x48>
    7e10:	2d00      	cmp	r5, #0
    7e12:	d005      	beq.n	7e20 <strcasecmp+0x48>
    7e14:	3601      	adds	r6, #1
    7e16:	e7e7      	b.n	7de8 <strcasecmp+0x10>
    7e18:	0028      	movs	r0, r5
    7e1a:	3020      	adds	r0, #32
    7e1c:	1a20      	subs	r0, r4, r0
    7e1e:	d0f9      	beq.n	7e14 <strcasecmp+0x3c>
    7e20:	bc0c      	pop	{r2, r3}
    7e22:	4690      	mov	r8, r2
    7e24:	4699      	mov	r9, r3
    7e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e28:	3420      	adds	r4, #32
    7e2a:	e7e6      	b.n	7dfa <strcasecmp+0x22>

00007e2c <strchr>:
    7e2c:	b570      	push	{r4, r5, r6, lr}
    7e2e:	b2cc      	uxtb	r4, r1
    7e30:	2c00      	cmp	r4, #0
    7e32:	d03b      	beq.n	7eac <strchr+0x80>
    7e34:	0783      	lsls	r3, r0, #30
    7e36:	d00e      	beq.n	7e56 <strchr+0x2a>
    7e38:	7803      	ldrb	r3, [r0, #0]
    7e3a:	2b00      	cmp	r3, #0
    7e3c:	d05b      	beq.n	7ef6 <strchr+0xca>
    7e3e:	429c      	cmp	r4, r3
    7e40:	d033      	beq.n	7eaa <strchr+0x7e>
    7e42:	2203      	movs	r2, #3
    7e44:	e004      	b.n	7e50 <strchr+0x24>
    7e46:	7803      	ldrb	r3, [r0, #0]
    7e48:	2b00      	cmp	r3, #0
    7e4a:	d054      	beq.n	7ef6 <strchr+0xca>
    7e4c:	429c      	cmp	r4, r3
    7e4e:	d02c      	beq.n	7eaa <strchr+0x7e>
    7e50:	3001      	adds	r0, #1
    7e52:	4210      	tst	r0, r2
    7e54:	d1f7      	bne.n	7e46 <strchr+0x1a>
    7e56:	25ff      	movs	r5, #255	; 0xff
    7e58:	4029      	ands	r1, r5
    7e5a:	020d      	lsls	r5, r1, #8
    7e5c:	4329      	orrs	r1, r5
    7e5e:	040d      	lsls	r5, r1, #16
    7e60:	430d      	orrs	r5, r1
    7e62:	0029      	movs	r1, r5
    7e64:	6802      	ldr	r2, [r0, #0]
    7e66:	4b26      	ldr	r3, [pc, #152]	; (7f00 <strchr+0xd4>)
    7e68:	4051      	eors	r1, r2
    7e6a:	18d3      	adds	r3, r2, r3
    7e6c:	4393      	bics	r3, r2
    7e6e:	4a24      	ldr	r2, [pc, #144]	; (7f00 <strchr+0xd4>)
    7e70:	4e24      	ldr	r6, [pc, #144]	; (7f04 <strchr+0xd8>)
    7e72:	188a      	adds	r2, r1, r2
    7e74:	438a      	bics	r2, r1
    7e76:	4313      	orrs	r3, r2
    7e78:	4233      	tst	r3, r6
    7e7a:	d10c      	bne.n	7e96 <strchr+0x6a>
    7e7c:	0029      	movs	r1, r5
    7e7e:	3004      	adds	r0, #4
    7e80:	6802      	ldr	r2, [r0, #0]
    7e82:	4b1f      	ldr	r3, [pc, #124]	; (7f00 <strchr+0xd4>)
    7e84:	4051      	eors	r1, r2
    7e86:	18d3      	adds	r3, r2, r3
    7e88:	4393      	bics	r3, r2
    7e8a:	4a1d      	ldr	r2, [pc, #116]	; (7f00 <strchr+0xd4>)
    7e8c:	188a      	adds	r2, r1, r2
    7e8e:	438a      	bics	r2, r1
    7e90:	4313      	orrs	r3, r2
    7e92:	4233      	tst	r3, r6
    7e94:	d0f2      	beq.n	7e7c <strchr+0x50>
    7e96:	7803      	ldrb	r3, [r0, #0]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d104      	bne.n	7ea6 <strchr+0x7a>
    7e9c:	e02b      	b.n	7ef6 <strchr+0xca>
    7e9e:	3001      	adds	r0, #1
    7ea0:	7803      	ldrb	r3, [r0, #0]
    7ea2:	2b00      	cmp	r3, #0
    7ea4:	d027      	beq.n	7ef6 <strchr+0xca>
    7ea6:	429c      	cmp	r4, r3
    7ea8:	d1f9      	bne.n	7e9e <strchr+0x72>
    7eaa:	bd70      	pop	{r4, r5, r6, pc}
    7eac:	0783      	lsls	r3, r0, #30
    7eae:	d00a      	beq.n	7ec6 <strchr+0x9a>
    7eb0:	7803      	ldrb	r3, [r0, #0]
    7eb2:	2b00      	cmp	r3, #0
    7eb4:	d0f9      	beq.n	7eaa <strchr+0x7e>
    7eb6:	2203      	movs	r2, #3
    7eb8:	e002      	b.n	7ec0 <strchr+0x94>
    7eba:	7803      	ldrb	r3, [r0, #0]
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d0f4      	beq.n	7eaa <strchr+0x7e>
    7ec0:	3001      	adds	r0, #1
    7ec2:	4210      	tst	r0, r2
    7ec4:	d1f9      	bne.n	7eba <strchr+0x8e>
    7ec6:	6801      	ldr	r1, [r0, #0]
    7ec8:	4a0d      	ldr	r2, [pc, #52]	; (7f00 <strchr+0xd4>)
    7eca:	0003      	movs	r3, r0
    7ecc:	188a      	adds	r2, r1, r2
    7ece:	480d      	ldr	r0, [pc, #52]	; (7f04 <strchr+0xd8>)
    7ed0:	438a      	bics	r2, r1
    7ed2:	4202      	tst	r2, r0
    7ed4:	d106      	bne.n	7ee4 <strchr+0xb8>
    7ed6:	3304      	adds	r3, #4
    7ed8:	6819      	ldr	r1, [r3, #0]
    7eda:	4a09      	ldr	r2, [pc, #36]	; (7f00 <strchr+0xd4>)
    7edc:	188a      	adds	r2, r1, r2
    7ede:	438a      	bics	r2, r1
    7ee0:	4202      	tst	r2, r0
    7ee2:	d0f8      	beq.n	7ed6 <strchr+0xaa>
    7ee4:	781a      	ldrb	r2, [r3, #0]
    7ee6:	0018      	movs	r0, r3
    7ee8:	2a00      	cmp	r2, #0
    7eea:	d006      	beq.n	7efa <strchr+0xce>
    7eec:	3001      	adds	r0, #1
    7eee:	7803      	ldrb	r3, [r0, #0]
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d1fb      	bne.n	7eec <strchr+0xc0>
    7ef4:	e7d9      	b.n	7eaa <strchr+0x7e>
    7ef6:	2000      	movs	r0, #0
    7ef8:	e7d7      	b.n	7eaa <strchr+0x7e>
    7efa:	0018      	movs	r0, r3
    7efc:	e7d5      	b.n	7eaa <strchr+0x7e>
    7efe:	46c0      	nop			; (mov r8, r8)
    7f00:	fefefeff 	.word	0xfefefeff
    7f04:	80808080 	.word	0x80808080

00007f08 <strcmp>:
    7f08:	4602      	mov	r2, r0
    7f0a:	b570      	push	{r4, r5, r6, lr}
    7f0c:	430a      	orrs	r2, r1
    7f0e:	0792      	lsls	r2, r2, #30
    7f10:	d12a      	bne.n	7f68 <strcmp+0x60>
    7f12:	4d1e      	ldr	r5, [pc, #120]	; (7f8c <strcmp+0x84>)
    7f14:	01ee      	lsls	r6, r5, #7
    7f16:	c804      	ldmia	r0!, {r2}
    7f18:	c908      	ldmia	r1!, {r3}
    7f1a:	1b54      	subs	r4, r2, r5
    7f1c:	4394      	bics	r4, r2
    7f1e:	4034      	ands	r4, r6
    7f20:	d017      	beq.n	7f52 <strcmp+0x4a>
    7f22:	b2d0      	uxtb	r0, r2
    7f24:	b2d9      	uxtb	r1, r3
    7f26:	1a40      	subs	r0, r0, r1
    7f28:	0621      	lsls	r1, r4, #24
    7f2a:	4301      	orrs	r1, r0
    7f2c:	d110      	bne.n	7f50 <strcmp+0x48>
    7f2e:	b290      	uxth	r0, r2
    7f30:	b299      	uxth	r1, r3
    7f32:	1a40      	subs	r0, r0, r1
    7f34:	0421      	lsls	r1, r4, #16
    7f36:	4301      	orrs	r1, r0
    7f38:	d10a      	bne.n	7f50 <strcmp+0x48>
    7f3a:	0210      	lsls	r0, r2, #8
    7f3c:	0219      	lsls	r1, r3, #8
    7f3e:	0a00      	lsrs	r0, r0, #8
    7f40:	0a09      	lsrs	r1, r1, #8
    7f42:	1a40      	subs	r0, r0, r1
    7f44:	0221      	lsls	r1, r4, #8
    7f46:	4301      	orrs	r1, r0
    7f48:	d102      	bne.n	7f50 <strcmp+0x48>
    7f4a:	0e10      	lsrs	r0, r2, #24
    7f4c:	0e19      	lsrs	r1, r3, #24
    7f4e:	1a40      	subs	r0, r0, r1
    7f50:	bd70      	pop	{r4, r5, r6, pc}
    7f52:	429a      	cmp	r2, r3
    7f54:	d0df      	beq.n	7f16 <strcmp+0xe>
    7f56:	ba10      	rev	r0, r2
    7f58:	ba19      	rev	r1, r3
    7f5a:	4288      	cmp	r0, r1
    7f5c:	d901      	bls.n	7f62 <strcmp+0x5a>
    7f5e:	2001      	movs	r0, #1
    7f60:	bd70      	pop	{r4, r5, r6, pc}
    7f62:	2000      	movs	r0, #0
    7f64:	43c0      	mvns	r0, r0
    7f66:	bd70      	pop	{r4, r5, r6, pc}
    7f68:	7802      	ldrb	r2, [r0, #0]
    7f6a:	780b      	ldrb	r3, [r1, #0]
    7f6c:	3001      	adds	r0, #1
    7f6e:	3101      	adds	r1, #1
    7f70:	2a00      	cmp	r2, #0
    7f72:	d009      	beq.n	7f88 <strcmp+0x80>
    7f74:	429a      	cmp	r2, r3
    7f76:	d107      	bne.n	7f88 <strcmp+0x80>
    7f78:	7802      	ldrb	r2, [r0, #0]
    7f7a:	780b      	ldrb	r3, [r1, #0]
    7f7c:	3001      	adds	r0, #1
    7f7e:	3101      	adds	r1, #1
    7f80:	2a00      	cmp	r2, #0
    7f82:	d001      	beq.n	7f88 <strcmp+0x80>
    7f84:	429a      	cmp	r2, r3
    7f86:	d0ef      	beq.n	7f68 <strcmp+0x60>
    7f88:	1ad0      	subs	r0, r2, r3
    7f8a:	bd70      	pop	{r4, r5, r6, pc}
    7f8c:	01010101 	.word	0x01010101

00007f90 <strlen>:
    7f90:	b510      	push	{r4, lr}
    7f92:	0783      	lsls	r3, r0, #30
    7f94:	d025      	beq.n	7fe2 <strlen+0x52>
    7f96:	7803      	ldrb	r3, [r0, #0]
    7f98:	2b00      	cmp	r3, #0
    7f9a:	d024      	beq.n	7fe6 <strlen+0x56>
    7f9c:	0003      	movs	r3, r0
    7f9e:	2103      	movs	r1, #3
    7fa0:	e002      	b.n	7fa8 <strlen+0x18>
    7fa2:	781a      	ldrb	r2, [r3, #0]
    7fa4:	2a00      	cmp	r2, #0
    7fa6:	d01a      	beq.n	7fde <strlen+0x4e>
    7fa8:	3301      	adds	r3, #1
    7faa:	420b      	tst	r3, r1
    7fac:	d1f9      	bne.n	7fa2 <strlen+0x12>
    7fae:	6819      	ldr	r1, [r3, #0]
    7fb0:	4a0e      	ldr	r2, [pc, #56]	; (7fec <strlen+0x5c>)
    7fb2:	4c0f      	ldr	r4, [pc, #60]	; (7ff0 <strlen+0x60>)
    7fb4:	188a      	adds	r2, r1, r2
    7fb6:	438a      	bics	r2, r1
    7fb8:	4222      	tst	r2, r4
    7fba:	d106      	bne.n	7fca <strlen+0x3a>
    7fbc:	3304      	adds	r3, #4
    7fbe:	6819      	ldr	r1, [r3, #0]
    7fc0:	4a0a      	ldr	r2, [pc, #40]	; (7fec <strlen+0x5c>)
    7fc2:	188a      	adds	r2, r1, r2
    7fc4:	438a      	bics	r2, r1
    7fc6:	4222      	tst	r2, r4
    7fc8:	d0f8      	beq.n	7fbc <strlen+0x2c>
    7fca:	001a      	movs	r2, r3
    7fcc:	781b      	ldrb	r3, [r3, #0]
    7fce:	2b00      	cmp	r3, #0
    7fd0:	d003      	beq.n	7fda <strlen+0x4a>
    7fd2:	3201      	adds	r2, #1
    7fd4:	7811      	ldrb	r1, [r2, #0]
    7fd6:	2900      	cmp	r1, #0
    7fd8:	d1fb      	bne.n	7fd2 <strlen+0x42>
    7fda:	1a10      	subs	r0, r2, r0
    7fdc:	bd10      	pop	{r4, pc}
    7fde:	1a18      	subs	r0, r3, r0
    7fe0:	e7fc      	b.n	7fdc <strlen+0x4c>
    7fe2:	0003      	movs	r3, r0
    7fe4:	e7e3      	b.n	7fae <strlen+0x1e>
    7fe6:	2000      	movs	r0, #0
    7fe8:	e7f8      	b.n	7fdc <strlen+0x4c>
    7fea:	46c0      	nop			; (mov r8, r8)
    7fec:	fefefeff 	.word	0xfefefeff
    7ff0:	80808080 	.word	0x80808080

00007ff4 <critical_factorization>:
    7ff4:	2301      	movs	r3, #1
    7ff6:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ff8:	4647      	mov	r7, r8
    7ffa:	46ce      	mov	lr, r9
    7ffc:	4694      	mov	ip, r2
    7ffe:	2201      	movs	r2, #1
    8000:	4698      	mov	r8, r3
    8002:	2401      	movs	r4, #1
    8004:	2500      	movs	r5, #0
    8006:	b580      	push	{r7, lr}
    8008:	4252      	negs	r2, r2
    800a:	192b      	adds	r3, r5, r4
    800c:	428b      	cmp	r3, r1
    800e:	d20b      	bcs.n	8028 <critical_factorization+0x34>
    8010:	1886      	adds	r6, r0, r2
    8012:	5cc7      	ldrb	r7, [r0, r3]
    8014:	5d36      	ldrb	r6, [r6, r4]
    8016:	42b7      	cmp	r7, r6
    8018:	d22d      	bcs.n	8076 <critical_factorization+0x82>
    801a:	1a9c      	subs	r4, r3, r2
    801c:	46a0      	mov	r8, r4
    801e:	001d      	movs	r5, r3
    8020:	2401      	movs	r4, #1
    8022:	192b      	adds	r3, r5, r4
    8024:	428b      	cmp	r3, r1
    8026:	d3f3      	bcc.n	8010 <critical_factorization+0x1c>
    8028:	4644      	mov	r4, r8
    802a:	4663      	mov	r3, ip
    802c:	601c      	str	r4, [r3, #0]
    802e:	2301      	movs	r3, #1
    8030:	4699      	mov	r9, r3
    8032:	3b02      	subs	r3, #2
    8034:	2401      	movs	r4, #1
    8036:	2500      	movs	r5, #0
    8038:	4698      	mov	r8, r3
    803a:	192b      	adds	r3, r5, r4
    803c:	4299      	cmp	r1, r3
    803e:	d90d      	bls.n	805c <critical_factorization+0x68>
    8040:	4646      	mov	r6, r8
    8042:	1986      	adds	r6, r0, r6
    8044:	5cc7      	ldrb	r7, [r0, r3]
    8046:	5d36      	ldrb	r6, [r6, r4]
    8048:	42b7      	cmp	r7, r6
    804a:	d91c      	bls.n	8086 <critical_factorization+0x92>
    804c:	4644      	mov	r4, r8
    804e:	1b1c      	subs	r4, r3, r4
    8050:	46a1      	mov	r9, r4
    8052:	001d      	movs	r5, r3
    8054:	2401      	movs	r4, #1
    8056:	192b      	adds	r3, r5, r4
    8058:	4299      	cmp	r1, r3
    805a:	d8f1      	bhi.n	8040 <critical_factorization+0x4c>
    805c:	4643      	mov	r3, r8
    805e:	1c50      	adds	r0, r2, #1
    8060:	3301      	adds	r3, #1
    8062:	4283      	cmp	r3, r0
    8064:	d303      	bcc.n	806e <critical_factorization+0x7a>
    8066:	4662      	mov	r2, ip
    8068:	4649      	mov	r1, r9
    806a:	0018      	movs	r0, r3
    806c:	6011      	str	r1, [r2, #0]
    806e:	bc0c      	pop	{r2, r3}
    8070:	4690      	mov	r8, r2
    8072:	4699      	mov	r9, r3
    8074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8076:	42b7      	cmp	r7, r6
    8078:	d00d      	beq.n	8096 <critical_factorization+0xa2>
    807a:	2301      	movs	r3, #1
    807c:	002a      	movs	r2, r5
    807e:	4698      	mov	r8, r3
    8080:	3501      	adds	r5, #1
    8082:	2401      	movs	r4, #1
    8084:	e7c1      	b.n	800a <critical_factorization+0x16>
    8086:	42b7      	cmp	r7, r6
    8088:	d009      	beq.n	809e <critical_factorization+0xaa>
    808a:	2301      	movs	r3, #1
    808c:	46a8      	mov	r8, r5
    808e:	4699      	mov	r9, r3
    8090:	3501      	adds	r5, #1
    8092:	2401      	movs	r4, #1
    8094:	e7d1      	b.n	803a <critical_factorization+0x46>
    8096:	4544      	cmp	r4, r8
    8098:	d005      	beq.n	80a6 <critical_factorization+0xb2>
    809a:	3401      	adds	r4, #1
    809c:	e7b5      	b.n	800a <critical_factorization+0x16>
    809e:	454c      	cmp	r4, r9
    80a0:	d004      	beq.n	80ac <critical_factorization+0xb8>
    80a2:	3401      	adds	r4, #1
    80a4:	e7c9      	b.n	803a <critical_factorization+0x46>
    80a6:	001d      	movs	r5, r3
    80a8:	2401      	movs	r4, #1
    80aa:	e7ae      	b.n	800a <critical_factorization+0x16>
    80ac:	001d      	movs	r5, r3
    80ae:	2401      	movs	r4, #1
    80b0:	e7c3      	b.n	803a <critical_factorization+0x46>
    80b2:	46c0      	nop			; (mov r8, r8)

000080b4 <two_way_long_needle>:
    80b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    80b6:	46de      	mov	lr, fp
    80b8:	4657      	mov	r7, sl
    80ba:	464e      	mov	r6, r9
    80bc:	4645      	mov	r5, r8
    80be:	b5e0      	push	{r5, r6, r7, lr}
    80c0:	0015      	movs	r5, r2
    80c2:	4c7b      	ldr	r4, [pc, #492]	; (82b0 <two_way_long_needle+0x1fc>)
    80c4:	0006      	movs	r6, r0
    80c6:	44a5      	add	sp, r4
    80c8:	aa03      	add	r2, sp, #12
    80ca:	000f      	movs	r7, r1
    80cc:	0028      	movs	r0, r5
    80ce:	0019      	movs	r1, r3
    80d0:	001c      	movs	r4, r3
    80d2:	f7ff ff8f 	bl	7ff4 <critical_factorization>
    80d6:	4683      	mov	fp, r0
    80d8:	aaff      	add	r2, sp, #1020	; 0x3fc
    80da:	ab04      	add	r3, sp, #16
    80dc:	3214      	adds	r2, #20
    80de:	c310      	stmia	r3!, {r4}
    80e0:	4293      	cmp	r3, r2
    80e2:	d1fc      	bne.n	80de <two_way_long_needle+0x2a>
    80e4:	1e63      	subs	r3, r4, #1
    80e6:	0029      	movs	r1, r5
    80e8:	46a4      	mov	ip, r4
    80ea:	2c00      	cmp	r4, #0
    80ec:	d009      	beq.n	8102 <two_way_long_needle+0x4e>
    80ee:	2408      	movs	r4, #8
    80f0:	780a      	ldrb	r2, [r1, #0]
    80f2:	a802      	add	r0, sp, #8
    80f4:	0092      	lsls	r2, r2, #2
    80f6:	1900      	adds	r0, r0, r4
    80f8:	5083      	str	r3, [r0, r2]
    80fa:	3101      	adds	r1, #1
    80fc:	3b01      	subs	r3, #1
    80fe:	d2f6      	bcs.n	80ee <two_way_long_needle+0x3a>
    8100:	4664      	mov	r4, ip
    8102:	9b03      	ldr	r3, [sp, #12]
    8104:	465a      	mov	r2, fp
    8106:	18e9      	adds	r1, r5, r3
    8108:	0028      	movs	r0, r5
    810a:	f7ff fd47 	bl	7b9c <memcmp>
    810e:	2800      	cmp	r0, #0
    8110:	d000      	beq.n	8114 <two_way_long_needle+0x60>
    8112:	e074      	b.n	81fe <two_way_long_needle+0x14a>
    8114:	2300      	movs	r3, #0
    8116:	001a      	movs	r2, r3
    8118:	469a      	mov	sl, r3
    811a:	1e63      	subs	r3, r4, #1
    811c:	4698      	mov	r8, r3
    811e:	4659      	mov	r1, fp
    8120:	2301      	movs	r3, #1
    8122:	0038      	movs	r0, r7
    8124:	46a1      	mov	r9, r4
    8126:	0017      	movs	r7, r2
    8128:	4644      	mov	r4, r8
    812a:	46b0      	mov	r8, r6
    812c:	1a5b      	subs	r3, r3, r1
    812e:	9301      	str	r3, [sp, #4]
    8130:	9100      	str	r1, [sp, #0]
    8132:	4656      	mov	r6, sl
    8134:	444e      	add	r6, r9
    8136:	1a32      	subs	r2, r6, r0
    8138:	2100      	movs	r1, #0
    813a:	4440      	add	r0, r8
    813c:	f004 f95e 	bl	c3fc <memchr>
    8140:	2800      	cmp	r0, #0
    8142:	d153      	bne.n	81ec <two_way_long_needle+0x138>
    8144:	2e00      	cmp	r6, #0
    8146:	d051      	beq.n	81ec <two_way_long_needle+0x138>
    8148:	4643      	mov	r3, r8
    814a:	2108      	movs	r1, #8
    814c:	199b      	adds	r3, r3, r6
    814e:	3b01      	subs	r3, #1
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	aa02      	add	r2, sp, #8
    8154:	009b      	lsls	r3, r3, #2
    8156:	1852      	adds	r2, r2, r1
    8158:	58d3      	ldr	r3, [r2, r3]
    815a:	2b00      	cmp	r3, #0
    815c:	d00a      	beq.n	8174 <two_way_long_needle+0xc0>
    815e:	2f00      	cmp	r7, #0
    8160:	d004      	beq.n	816c <two_way_long_needle+0xb8>
    8162:	9a03      	ldr	r2, [sp, #12]
    8164:	4293      	cmp	r3, r2
    8166:	d201      	bcs.n	816c <two_way_long_needle+0xb8>
    8168:	464b      	mov	r3, r9
    816a:	1a9b      	subs	r3, r3, r2
    816c:	449a      	add	sl, r3
    816e:	2700      	movs	r7, #0
    8170:	0030      	movs	r0, r6
    8172:	e7de      	b.n	8132 <two_way_long_needle+0x7e>
    8174:	9900      	ldr	r1, [sp, #0]
    8176:	003b      	movs	r3, r7
    8178:	428f      	cmp	r7, r1
    817a:	d200      	bcs.n	817e <two_way_long_needle+0xca>
    817c:	000b      	movs	r3, r1
    817e:	42a3      	cmp	r3, r4
    8180:	d20d      	bcs.n	819e <two_way_long_needle+0xea>
    8182:	4642      	mov	r2, r8
    8184:	4452      	add	r2, sl
    8186:	e002      	b.n	818e <two_way_long_needle+0xda>
    8188:	3301      	adds	r3, #1
    818a:	42a3      	cmp	r3, r4
    818c:	d207      	bcs.n	819e <two_way_long_needle+0xea>
    818e:	5ce8      	ldrb	r0, [r5, r3]
    8190:	5cd1      	ldrb	r1, [r2, r3]
    8192:	4288      	cmp	r0, r1
    8194:	d0f8      	beq.n	8188 <two_way_long_needle+0xd4>
    8196:	9a01      	ldr	r2, [sp, #4]
    8198:	4452      	add	r2, sl
    819a:	4692      	mov	sl, r2
    819c:	e7e6      	b.n	816c <two_way_long_needle+0xb8>
    819e:	9b00      	ldr	r3, [sp, #0]
    81a0:	1e59      	subs	r1, r3, #1
    81a2:	429f      	cmp	r7, r3
    81a4:	d300      	bcc.n	81a8 <two_way_long_needle+0xf4>
    81a6:	e07d      	b.n	82a4 <two_way_long_needle+0x1f0>
    81a8:	4642      	mov	r2, r8
    81aa:	4452      	add	r2, sl
    81ac:	5c50      	ldrb	r0, [r2, r1]
    81ae:	5c6b      	ldrb	r3, [r5, r1]
    81b0:	4298      	cmp	r0, r3
    81b2:	d000      	beq.n	81b6 <two_way_long_needle+0x102>
    81b4:	e074      	b.n	82a0 <two_way_long_needle+0x1ec>
    81b6:	1e7b      	subs	r3, r7, #1
    81b8:	469b      	mov	fp, r3
    81ba:	0023      	movs	r3, r4
    81bc:	46b4      	mov	ip, r6
    81be:	465c      	mov	r4, fp
    81c0:	0016      	movs	r6, r2
    81c2:	469b      	mov	fp, r3
    81c4:	e004      	b.n	81d0 <two_way_long_needle+0x11c>
    81c6:	5cea      	ldrb	r2, [r5, r3]
    81c8:	5cf0      	ldrb	r0, [r6, r3]
    81ca:	4282      	cmp	r2, r0
    81cc:	d103      	bne.n	81d6 <two_way_long_needle+0x122>
    81ce:	0019      	movs	r1, r3
    81d0:	1e4b      	subs	r3, r1, #1
    81d2:	42a3      	cmp	r3, r4
    81d4:	d1f7      	bne.n	81c6 <two_way_long_needle+0x112>
    81d6:	4666      	mov	r6, ip
    81d8:	465c      	mov	r4, fp
    81da:	3701      	adds	r7, #1
    81dc:	428f      	cmp	r7, r1
    81de:	d863      	bhi.n	82a8 <two_way_long_needle+0x1f4>
    81e0:	464b      	mov	r3, r9
    81e2:	9f03      	ldr	r7, [sp, #12]
    81e4:	0030      	movs	r0, r6
    81e6:	44ba      	add	sl, r7
    81e8:	1bdf      	subs	r7, r3, r7
    81ea:	e7a2      	b.n	8132 <two_way_long_needle+0x7e>
    81ec:	2000      	movs	r0, #0
    81ee:	4b31      	ldr	r3, [pc, #196]	; (82b4 <two_way_long_needle+0x200>)
    81f0:	449d      	add	sp, r3
    81f2:	bc3c      	pop	{r2, r3, r4, r5}
    81f4:	4690      	mov	r8, r2
    81f6:	4699      	mov	r9, r3
    81f8:	46a2      	mov	sl, r4
    81fa:	46ab      	mov	fp, r5
    81fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81fe:	465b      	mov	r3, fp
    8200:	1ae3      	subs	r3, r4, r3
    8202:	455b      	cmp	r3, fp
    8204:	d34a      	bcc.n	829c <two_way_long_needle+0x1e8>
    8206:	3301      	adds	r3, #1
    8208:	9303      	str	r3, [sp, #12]
    820a:	2300      	movs	r3, #0
    820c:	469a      	mov	sl, r3
    820e:	1e63      	subs	r3, r4, #1
    8210:	4698      	mov	r8, r3
    8212:	465a      	mov	r2, fp
    8214:	2301      	movs	r3, #1
    8216:	0038      	movs	r0, r7
    8218:	46a1      	mov	r9, r4
    821a:	4657      	mov	r7, sl
    821c:	4644      	mov	r4, r8
    821e:	46b0      	mov	r8, r6
    8220:	1a9b      	subs	r3, r3, r2
    8222:	9300      	str	r3, [sp, #0]
    8224:	464b      	mov	r3, r9
    8226:	18fe      	adds	r6, r7, r3
    8228:	1a32      	subs	r2, r6, r0
    822a:	2100      	movs	r1, #0
    822c:	4440      	add	r0, r8
    822e:	f004 f8e5 	bl	c3fc <memchr>
    8232:	2800      	cmp	r0, #0
    8234:	d1da      	bne.n	81ec <two_way_long_needle+0x138>
    8236:	2e00      	cmp	r6, #0
    8238:	d0d8      	beq.n	81ec <two_way_long_needle+0x138>
    823a:	4643      	mov	r3, r8
    823c:	2108      	movs	r1, #8
    823e:	199b      	adds	r3, r3, r6
    8240:	3b01      	subs	r3, #1
    8242:	781b      	ldrb	r3, [r3, #0]
    8244:	aa02      	add	r2, sp, #8
    8246:	009b      	lsls	r3, r3, #2
    8248:	1852      	adds	r2, r2, r1
    824a:	58d3      	ldr	r3, [r2, r3]
    824c:	2b00      	cmp	r3, #0
    824e:	d122      	bne.n	8296 <two_way_long_needle+0x1e2>
    8250:	4643      	mov	r3, r8
    8252:	19d8      	adds	r0, r3, r7
    8254:	45a3      	cmp	fp, r4
    8256:	d20c      	bcs.n	8272 <two_way_long_needle+0x1be>
    8258:	465b      	mov	r3, fp
    825a:	5cc1      	ldrb	r1, [r0, r3]
    825c:	5cea      	ldrb	r2, [r5, r3]
    825e:	4291      	cmp	r1, r2
    8260:	d004      	beq.n	826c <two_way_long_needle+0x1b8>
    8262:	e015      	b.n	8290 <two_way_long_needle+0x1dc>
    8264:	5ce9      	ldrb	r1, [r5, r3]
    8266:	5cc2      	ldrb	r2, [r0, r3]
    8268:	4291      	cmp	r1, r2
    826a:	d111      	bne.n	8290 <two_way_long_needle+0x1dc>
    826c:	3301      	adds	r3, #1
    826e:	42a3      	cmp	r3, r4
    8270:	d3f8      	bcc.n	8264 <two_way_long_needle+0x1b0>
    8272:	465b      	mov	r3, fp
    8274:	3b01      	subs	r3, #1
    8276:	d202      	bcs.n	827e <two_way_long_needle+0x1ca>
    8278:	e7b9      	b.n	81ee <two_way_long_needle+0x13a>
    827a:	3b01      	subs	r3, #1
    827c:	d3b7      	bcc.n	81ee <two_way_long_needle+0x13a>
    827e:	5ce9      	ldrb	r1, [r5, r3]
    8280:	5cc2      	ldrb	r2, [r0, r3]
    8282:	4291      	cmp	r1, r2
    8284:	d0f9      	beq.n	827a <two_way_long_needle+0x1c6>
    8286:	9b03      	ldr	r3, [sp, #12]
    8288:	0030      	movs	r0, r6
    828a:	469c      	mov	ip, r3
    828c:	4467      	add	r7, ip
    828e:	e7c9      	b.n	8224 <two_way_long_needle+0x170>
    8290:	9a00      	ldr	r2, [sp, #0]
    8292:	4694      	mov	ip, r2
    8294:	4467      	add	r7, ip
    8296:	18ff      	adds	r7, r7, r3
    8298:	0030      	movs	r0, r6
    829a:	e7c3      	b.n	8224 <two_way_long_needle+0x170>
    829c:	465b      	mov	r3, fp
    829e:	e7b2      	b.n	8206 <two_way_long_needle+0x152>
    82a0:	9900      	ldr	r1, [sp, #0]
    82a2:	e79a      	b.n	81da <two_way_long_needle+0x126>
    82a4:	0019      	movs	r1, r3
    82a6:	e798      	b.n	81da <two_way_long_needle+0x126>
    82a8:	4640      	mov	r0, r8
    82aa:	4450      	add	r0, sl
    82ac:	e79f      	b.n	81ee <two_way_long_needle+0x13a>
    82ae:	46c0      	nop			; (mov r8, r8)
    82b0:	fffffbec 	.word	0xfffffbec
    82b4:	00000414 	.word	0x00000414

000082b8 <strstr>:
    82b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    82ba:	4657      	mov	r7, sl
    82bc:	4645      	mov	r5, r8
    82be:	46de      	mov	lr, fp
    82c0:	464e      	mov	r6, r9
    82c2:	b5e0      	push	{r5, r6, r7, lr}
    82c4:	7803      	ldrb	r3, [r0, #0]
    82c6:	b085      	sub	sp, #20
    82c8:	0007      	movs	r7, r0
    82ca:	000d      	movs	r5, r1
    82cc:	2b00      	cmp	r3, #0
    82ce:	d035      	beq.n	833c <strstr+0x84>
    82d0:	7809      	ldrb	r1, [r1, #0]
    82d2:	1e0a      	subs	r2, r1, #0
    82d4:	d100      	bne.n	82d8 <strstr+0x20>
    82d6:	e09f      	b.n	8418 <strstr+0x160>
    82d8:	002c      	movs	r4, r5
    82da:	2601      	movs	r6, #1
    82dc:	e002      	b.n	82e4 <strstr+0x2c>
    82de:	7822      	ldrb	r2, [r4, #0]
    82e0:	2a00      	cmp	r2, #0
    82e2:	d00b      	beq.n	82fc <strstr+0x44>
    82e4:	1a9b      	subs	r3, r3, r2
    82e6:	425a      	negs	r2, r3
    82e8:	4153      	adcs	r3, r2
    82ea:	3001      	adds	r0, #1
    82ec:	401e      	ands	r6, r3
    82ee:	7803      	ldrb	r3, [r0, #0]
    82f0:	3401      	adds	r4, #1
    82f2:	2b00      	cmp	r3, #0
    82f4:	d1f3      	bne.n	82de <strstr+0x26>
    82f6:	7823      	ldrb	r3, [r4, #0]
    82f8:	2b00      	cmp	r3, #0
    82fa:	d122      	bne.n	8342 <strstr+0x8a>
    82fc:	0038      	movs	r0, r7
    82fe:	2e00      	cmp	r6, #0
    8300:	d006      	beq.n	8310 <strstr+0x58>
    8302:	b005      	add	sp, #20
    8304:	bc3c      	pop	{r2, r3, r4, r5}
    8306:	4690      	mov	r8, r2
    8308:	4699      	mov	r9, r3
    830a:	46a2      	mov	sl, r4
    830c:	46ab      	mov	fp, r5
    830e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8310:	1c78      	adds	r0, r7, #1
    8312:	f7ff fd8b 	bl	7e2c <strchr>
    8316:	1b64      	subs	r4, r4, r5
    8318:	1e06      	subs	r6, r0, #0
    831a:	d012      	beq.n	8342 <strstr+0x8a>
    831c:	2c01      	cmp	r4, #1
    831e:	d0f0      	beq.n	8302 <strstr+0x4a>
    8320:	193f      	adds	r7, r7, r4
    8322:	2101      	movs	r1, #1
    8324:	42b8      	cmp	r0, r7
    8326:	d800      	bhi.n	832a <strstr+0x72>
    8328:	1a39      	subs	r1, r7, r0
    832a:	000f      	movs	r7, r1
    832c:	2c1f      	cmp	r4, #31
    832e:	d90a      	bls.n	8346 <strstr+0x8e>
    8330:	0023      	movs	r3, r4
    8332:	002a      	movs	r2, r5
    8334:	0030      	movs	r0, r6
    8336:	f7ff febd 	bl	80b4 <two_way_long_needle>
    833a:	e7e2      	b.n	8302 <strstr+0x4a>
    833c:	780b      	ldrb	r3, [r1, #0]
    833e:	2b00      	cmp	r3, #0
    8340:	d06a      	beq.n	8418 <strstr+0x160>
    8342:	2000      	movs	r0, #0
    8344:	e7dd      	b.n	8302 <strstr+0x4a>
    8346:	aa03      	add	r2, sp, #12
    8348:	0021      	movs	r1, r4
    834a:	0028      	movs	r0, r5
    834c:	f7ff fe52 	bl	7ff4 <critical_factorization>
    8350:	9b03      	ldr	r3, [sp, #12]
    8352:	4680      	mov	r8, r0
    8354:	0002      	movs	r2, r0
    8356:	18e9      	adds	r1, r5, r3
    8358:	0028      	movs	r0, r5
    835a:	f7ff fc1f 	bl	7b9c <memcmp>
    835e:	2800      	cmp	r0, #0
    8360:	d15c      	bne.n	841c <strstr+0x164>
    8362:	2300      	movs	r3, #0
    8364:	4699      	mov	r9, r3
    8366:	4643      	mov	r3, r8
    8368:	3b01      	subs	r3, #1
    836a:	9300      	str	r3, [sp, #0]
    836c:	4642      	mov	r2, r8
    836e:	2301      	movs	r3, #1
    8370:	46b2      	mov	sl, r6
    8372:	0038      	movs	r0, r7
    8374:	464e      	mov	r6, r9
    8376:	464f      	mov	r7, r9
    8378:	1a9b      	subs	r3, r3, r2
    837a:	9301      	str	r3, [sp, #4]
    837c:	19e3      	adds	r3, r4, r7
    837e:	1a1a      	subs	r2, r3, r0
    8380:	2100      	movs	r1, #0
    8382:	4450      	add	r0, sl
    8384:	4699      	mov	r9, r3
    8386:	f004 f839 	bl	c3fc <memchr>
    838a:	2800      	cmp	r0, #0
    838c:	d1d9      	bne.n	8342 <strstr+0x8a>
    838e:	464b      	mov	r3, r9
    8390:	2b00      	cmp	r3, #0
    8392:	d0d6      	beq.n	8342 <strstr+0x8a>
    8394:	4643      	mov	r3, r8
    8396:	45b0      	cmp	r8, r6
    8398:	d200      	bcs.n	839c <strstr+0xe4>
    839a:	0033      	movs	r3, r6
    839c:	429c      	cmp	r4, r3
    839e:	d90f      	bls.n	83c0 <strstr+0x108>
    83a0:	4652      	mov	r2, sl
    83a2:	18d2      	adds	r2, r2, r3
    83a4:	5ce9      	ldrb	r1, [r5, r3]
    83a6:	5dd2      	ldrb	r2, [r2, r7]
    83a8:	4291      	cmp	r1, r2
    83aa:	d12e      	bne.n	840a <strstr+0x152>
    83ac:	4652      	mov	r2, sl
    83ae:	19d0      	adds	r0, r2, r7
    83b0:	e003      	b.n	83ba <strstr+0x102>
    83b2:	5ce9      	ldrb	r1, [r5, r3]
    83b4:	5cc2      	ldrb	r2, [r0, r3]
    83b6:	4291      	cmp	r1, r2
    83b8:	d127      	bne.n	840a <strstr+0x152>
    83ba:	3301      	adds	r3, #1
    83bc:	429c      	cmp	r4, r3
    83be:	d1f8      	bne.n	83b2 <strstr+0xfa>
    83c0:	9a00      	ldr	r2, [sp, #0]
    83c2:	45b0      	cmp	r8, r6
    83c4:	d976      	bls.n	84b4 <strstr+0x1fc>
    83c6:	46bc      	mov	ip, r7
    83c8:	44d4      	add	ip, sl
    83ca:	4661      	mov	r1, ip
    83cc:	9b00      	ldr	r3, [sp, #0]
    83ce:	5cc9      	ldrb	r1, [r1, r3]
    83d0:	5ceb      	ldrb	r3, [r5, r3]
    83d2:	4299      	cmp	r1, r3
    83d4:	d16e      	bne.n	84b4 <strstr+0x1fc>
    83d6:	1e73      	subs	r3, r6, #1
    83d8:	469b      	mov	fp, r3
    83da:	4663      	mov	r3, ip
    83dc:	46a4      	mov	ip, r4
    83de:	465c      	mov	r4, fp
    83e0:	46b3      	mov	fp, r6
    83e2:	001e      	movs	r6, r3
    83e4:	e004      	b.n	83f0 <strstr+0x138>
    83e6:	5ce8      	ldrb	r0, [r5, r3]
    83e8:	5cf1      	ldrb	r1, [r6, r3]
    83ea:	4288      	cmp	r0, r1
    83ec:	d103      	bne.n	83f6 <strstr+0x13e>
    83ee:	001a      	movs	r2, r3
    83f0:	1e53      	subs	r3, r2, #1
    83f2:	42a3      	cmp	r3, r4
    83f4:	d1f7      	bne.n	83e6 <strstr+0x12e>
    83f6:	4664      	mov	r4, ip
    83f8:	465e      	mov	r6, fp
    83fa:	3601      	adds	r6, #1
    83fc:	4296      	cmp	r6, r2
    83fe:	d85b      	bhi.n	84b8 <strstr+0x200>
    8400:	9e03      	ldr	r6, [sp, #12]
    8402:	4648      	mov	r0, r9
    8404:	19bf      	adds	r7, r7, r6
    8406:	1ba6      	subs	r6, r4, r6
    8408:	e7b8      	b.n	837c <strstr+0xc4>
    840a:	9a01      	ldr	r2, [sp, #4]
    840c:	2600      	movs	r6, #0
    840e:	4694      	mov	ip, r2
    8410:	4467      	add	r7, ip
    8412:	18ff      	adds	r7, r7, r3
    8414:	4648      	mov	r0, r9
    8416:	e7b1      	b.n	837c <strstr+0xc4>
    8418:	0038      	movs	r0, r7
    841a:	e772      	b.n	8302 <strstr+0x4a>
    841c:	4643      	mov	r3, r8
    841e:	1ae3      	subs	r3, r4, r3
    8420:	4543      	cmp	r3, r8
    8422:	d200      	bcs.n	8426 <strstr+0x16e>
    8424:	4643      	mov	r3, r8
    8426:	3301      	adds	r3, #1
    8428:	9303      	str	r3, [sp, #12]
    842a:	2300      	movs	r3, #0
    842c:	4642      	mov	r2, r8
    842e:	4699      	mov	r9, r3
    8430:	3301      	adds	r3, #1
    8432:	1a9b      	subs	r3, r3, r2
    8434:	464a      	mov	r2, r9
    8436:	46b3      	mov	fp, r6
    8438:	46b1      	mov	r9, r6
    843a:	0038      	movs	r0, r7
    843c:	469a      	mov	sl, r3
    843e:	0016      	movs	r6, r2
    8440:	44c3      	add	fp, r8
    8442:	19a7      	adds	r7, r4, r6
    8444:	1a3a      	subs	r2, r7, r0
    8446:	2100      	movs	r1, #0
    8448:	4448      	add	r0, r9
    844a:	f003 ffd7 	bl	c3fc <memchr>
    844e:	2800      	cmp	r0, #0
    8450:	d000      	beq.n	8454 <strstr+0x19c>
    8452:	e776      	b.n	8342 <strstr+0x8a>
    8454:	2f00      	cmp	r7, #0
    8456:	d100      	bne.n	845a <strstr+0x1a2>
    8458:	e773      	b.n	8342 <strstr+0x8a>
    845a:	464b      	mov	r3, r9
    845c:	1998      	adds	r0, r3, r6
    845e:	4544      	cmp	r4, r8
    8460:	d90f      	bls.n	8482 <strstr+0x1ca>
    8462:	465b      	mov	r3, fp
    8464:	5d99      	ldrb	r1, [r3, r6]
    8466:	4643      	mov	r3, r8
    8468:	4648      	mov	r0, r9
    846a:	5cea      	ldrb	r2, [r5, r3]
    846c:	1980      	adds	r0, r0, r6
    846e:	4291      	cmp	r1, r2
    8470:	d004      	beq.n	847c <strstr+0x1c4>
    8472:	e016      	b.n	84a2 <strstr+0x1ea>
    8474:	5ce9      	ldrb	r1, [r5, r3]
    8476:	5cc2      	ldrb	r2, [r0, r3]
    8478:	4291      	cmp	r1, r2
    847a:	d112      	bne.n	84a2 <strstr+0x1ea>
    847c:	3301      	adds	r3, #1
    847e:	429c      	cmp	r4, r3
    8480:	d1f8      	bne.n	8474 <strstr+0x1bc>
    8482:	4643      	mov	r3, r8
    8484:	3b01      	subs	r3, #1
    8486:	d200      	bcs.n	848a <strstr+0x1d2>
    8488:	e73b      	b.n	8302 <strstr+0x4a>
    848a:	5cc1      	ldrb	r1, [r0, r3]
    848c:	5cea      	ldrb	r2, [r5, r3]
    848e:	4291      	cmp	r1, r2
    8490:	d004      	beq.n	849c <strstr+0x1e4>
    8492:	e00a      	b.n	84aa <strstr+0x1f2>
    8494:	5ce9      	ldrb	r1, [r5, r3]
    8496:	5cc2      	ldrb	r2, [r0, r3]
    8498:	4291      	cmp	r1, r2
    849a:	d106      	bne.n	84aa <strstr+0x1f2>
    849c:	3b01      	subs	r3, #1
    849e:	d2f9      	bcs.n	8494 <strstr+0x1dc>
    84a0:	e72f      	b.n	8302 <strstr+0x4a>
    84a2:	4456      	add	r6, sl
    84a4:	18f6      	adds	r6, r6, r3
    84a6:	0038      	movs	r0, r7
    84a8:	e7cb      	b.n	8442 <strstr+0x18a>
    84aa:	9b03      	ldr	r3, [sp, #12]
    84ac:	0038      	movs	r0, r7
    84ae:	469c      	mov	ip, r3
    84b0:	4466      	add	r6, ip
    84b2:	e7c6      	b.n	8442 <strstr+0x18a>
    84b4:	4642      	mov	r2, r8
    84b6:	e7a0      	b.n	83fa <strstr+0x142>
    84b8:	46b9      	mov	r9, r7
    84ba:	4650      	mov	r0, sl
    84bc:	4448      	add	r0, r9
    84be:	e720      	b.n	8302 <strstr+0x4a>

000084c0 <_strtol_l.isra.0>:
    84c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    84c2:	4657      	mov	r7, sl
    84c4:	464e      	mov	r6, r9
    84c6:	46de      	mov	lr, fp
    84c8:	4645      	mov	r5, r8
    84ca:	b5e0      	push	{r5, r6, r7, lr}
    84cc:	001e      	movs	r6, r3
    84ce:	2308      	movs	r3, #8
    84d0:	b083      	sub	sp, #12
    84d2:	9001      	str	r0, [sp, #4]
    84d4:	9100      	str	r1, [sp, #0]
    84d6:	4692      	mov	sl, r2
    84d8:	000f      	movs	r7, r1
    84da:	4699      	mov	r9, r3
    84dc:	e000      	b.n	84e0 <_strtol_l.isra.0+0x20>
    84de:	002f      	movs	r7, r5
    84e0:	980c      	ldr	r0, [sp, #48]	; 0x30
    84e2:	783c      	ldrb	r4, [r7, #0]
    84e4:	f003 fc68 	bl	bdb8 <__locale_ctype_ptr_l>
    84e8:	464a      	mov	r2, r9
    84ea:	1900      	adds	r0, r0, r4
    84ec:	7843      	ldrb	r3, [r0, #1]
    84ee:	1c7d      	adds	r5, r7, #1
    84f0:	421a      	tst	r2, r3
    84f2:	d1f4      	bne.n	84de <_strtol_l.isra.0+0x1e>
    84f4:	2c2d      	cmp	r4, #45	; 0x2d
    84f6:	d04f      	beq.n	8598 <_strtol_l.isra.0+0xd8>
    84f8:	2300      	movs	r3, #0
    84fa:	4698      	mov	r8, r3
    84fc:	2c2b      	cmp	r4, #43	; 0x2b
    84fe:	d05c      	beq.n	85ba <_strtol_l.isra.0+0xfa>
    8500:	2e00      	cmp	r6, #0
    8502:	d003      	beq.n	850c <_strtol_l.isra.0+0x4c>
    8504:	2e10      	cmp	r6, #16
    8506:	d05b      	beq.n	85c0 <_strtol_l.isra.0+0x100>
    8508:	0037      	movs	r7, r6
    850a:	e003      	b.n	8514 <_strtol_l.isra.0+0x54>
    850c:	2c30      	cmp	r4, #48	; 0x30
    850e:	d063      	beq.n	85d8 <_strtol_l.isra.0+0x118>
    8510:	270a      	movs	r7, #10
    8512:	260a      	movs	r6, #10
    8514:	4b35      	ldr	r3, [pc, #212]	; (85ec <_strtol_l.isra.0+0x12c>)
    8516:	0039      	movs	r1, r7
    8518:	4443      	add	r3, r8
    851a:	0018      	movs	r0, r3
    851c:	4699      	mov	r9, r3
    851e:	f7fd f975 	bl	580c <__aeabi_uidivmod>
    8522:	4648      	mov	r0, r9
    8524:	468b      	mov	fp, r1
    8526:	0039      	movs	r1, r7
    8528:	f7fd f8ea 	bl	5700 <__udivsi3>
    852c:	2200      	movs	r2, #0
    852e:	0001      	movs	r1, r0
    8530:	2000      	movs	r0, #0
    8532:	0023      	movs	r3, r4
    8534:	3b30      	subs	r3, #48	; 0x30
    8536:	2b09      	cmp	r3, #9
    8538:	d907      	bls.n	854a <_strtol_l.isra.0+0x8a>
    853a:	3b11      	subs	r3, #17
    853c:	2b19      	cmp	r3, #25
    853e:	d903      	bls.n	8548 <_strtol_l.isra.0+0x88>
    8540:	0023      	movs	r3, r4
    8542:	3b61      	subs	r3, #97	; 0x61
    8544:	2b19      	cmp	r3, #25
    8546:	d80d      	bhi.n	8564 <_strtol_l.isra.0+0xa4>
    8548:	330a      	adds	r3, #10
    854a:	429e      	cmp	r6, r3
    854c:	dd0a      	ble.n	8564 <_strtol_l.isra.0+0xa4>
    854e:	1c54      	adds	r4, r2, #1
    8550:	d005      	beq.n	855e <_strtol_l.isra.0+0x9e>
    8552:	4281      	cmp	r1, r0
    8554:	d31d      	bcc.n	8592 <_strtol_l.isra.0+0xd2>
    8556:	d01a      	beq.n	858e <_strtol_l.isra.0+0xce>
    8558:	2201      	movs	r2, #1
    855a:	4378      	muls	r0, r7
    855c:	1818      	adds	r0, r3, r0
    855e:	782c      	ldrb	r4, [r5, #0]
    8560:	3501      	adds	r5, #1
    8562:	e7e6      	b.n	8532 <_strtol_l.isra.0+0x72>
    8564:	1c53      	adds	r3, r2, #1
    8566:	d01c      	beq.n	85a2 <_strtol_l.isra.0+0xe2>
    8568:	4643      	mov	r3, r8
    856a:	2b00      	cmp	r3, #0
    856c:	d000      	beq.n	8570 <_strtol_l.isra.0+0xb0>
    856e:	4240      	negs	r0, r0
    8570:	4653      	mov	r3, sl
    8572:	2b00      	cmp	r3, #0
    8574:	d004      	beq.n	8580 <_strtol_l.isra.0+0xc0>
    8576:	9b00      	ldr	r3, [sp, #0]
    8578:	2a00      	cmp	r2, #0
    857a:	d11c      	bne.n	85b6 <_strtol_l.isra.0+0xf6>
    857c:	4652      	mov	r2, sl
    857e:	6013      	str	r3, [r2, #0]
    8580:	b003      	add	sp, #12
    8582:	bc3c      	pop	{r2, r3, r4, r5}
    8584:	4690      	mov	r8, r2
    8586:	4699      	mov	r9, r3
    8588:	46a2      	mov	sl, r4
    858a:	46ab      	mov	fp, r5
    858c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    858e:	459b      	cmp	fp, r3
    8590:	dae2      	bge.n	8558 <_strtol_l.isra.0+0x98>
    8592:	2201      	movs	r2, #1
    8594:	4252      	negs	r2, r2
    8596:	e7e2      	b.n	855e <_strtol_l.isra.0+0x9e>
    8598:	2301      	movs	r3, #1
    859a:	782c      	ldrb	r4, [r5, #0]
    859c:	4698      	mov	r8, r3
    859e:	1cbd      	adds	r5, r7, #2
    85a0:	e7ae      	b.n	8500 <_strtol_l.isra.0+0x40>
    85a2:	2322      	movs	r3, #34	; 0x22
    85a4:	9a01      	ldr	r2, [sp, #4]
    85a6:	4648      	mov	r0, r9
    85a8:	6013      	str	r3, [r2, #0]
    85aa:	4653      	mov	r3, sl
    85ac:	2b00      	cmp	r3, #0
    85ae:	d0e7      	beq.n	8580 <_strtol_l.isra.0+0xc0>
    85b0:	1e6b      	subs	r3, r5, #1
    85b2:	4648      	mov	r0, r9
    85b4:	e7e2      	b.n	857c <_strtol_l.isra.0+0xbc>
    85b6:	4681      	mov	r9, r0
    85b8:	e7fa      	b.n	85b0 <_strtol_l.isra.0+0xf0>
    85ba:	782c      	ldrb	r4, [r5, #0]
    85bc:	1cbd      	adds	r5, r7, #2
    85be:	e79f      	b.n	8500 <_strtol_l.isra.0+0x40>
    85c0:	2c30      	cmp	r4, #48	; 0x30
    85c2:	d111      	bne.n	85e8 <_strtol_l.isra.0+0x128>
    85c4:	2220      	movs	r2, #32
    85c6:	782b      	ldrb	r3, [r5, #0]
    85c8:	4393      	bics	r3, r2
    85ca:	2b58      	cmp	r3, #88	; 0x58
    85cc:	d10c      	bne.n	85e8 <_strtol_l.isra.0+0x128>
    85ce:	786c      	ldrb	r4, [r5, #1]
    85d0:	2710      	movs	r7, #16
    85d2:	3502      	adds	r5, #2
    85d4:	2610      	movs	r6, #16
    85d6:	e79d      	b.n	8514 <_strtol_l.isra.0+0x54>
    85d8:	2220      	movs	r2, #32
    85da:	782b      	ldrb	r3, [r5, #0]
    85dc:	4393      	bics	r3, r2
    85de:	2b58      	cmp	r3, #88	; 0x58
    85e0:	d0f5      	beq.n	85ce <_strtol_l.isra.0+0x10e>
    85e2:	2708      	movs	r7, #8
    85e4:	2608      	movs	r6, #8
    85e6:	e795      	b.n	8514 <_strtol_l.isra.0+0x54>
    85e8:	2710      	movs	r7, #16
    85ea:	e793      	b.n	8514 <_strtol_l.isra.0+0x54>
    85ec:	7fffffff 	.word	0x7fffffff

000085f0 <_strtol_r>:
    85f0:	b510      	push	{r4, lr}
    85f2:	4c06      	ldr	r4, [pc, #24]	; (860c <_strtol_r+0x1c>)
    85f4:	b082      	sub	sp, #8
    85f6:	6824      	ldr	r4, [r4, #0]
    85f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
    85fa:	2c00      	cmp	r4, #0
    85fc:	d004      	beq.n	8608 <_strtol_r+0x18>
    85fe:	9400      	str	r4, [sp, #0]
    8600:	f7ff ff5e 	bl	84c0 <_strtol_l.isra.0>
    8604:	b002      	add	sp, #8
    8606:	bd10      	pop	{r4, pc}
    8608:	4c01      	ldr	r4, [pc, #4]	; (8610 <_strtol_r+0x20>)
    860a:	e7f8      	b.n	85fe <_strtol_r+0xe>
    860c:	20000080 	.word	0x20000080
    8610:	200004b4 	.word	0x200004b4

00008614 <_svfprintf_r>:
    8614:	b5f0      	push	{r4, r5, r6, r7, lr}
    8616:	46de      	mov	lr, fp
    8618:	4645      	mov	r5, r8
    861a:	4657      	mov	r7, sl
    861c:	464e      	mov	r6, r9
    861e:	b5e0      	push	{r5, r6, r7, lr}
    8620:	b0c3      	sub	sp, #268	; 0x10c
    8622:	000d      	movs	r5, r1
    8624:	9106      	str	r1, [sp, #24]
    8626:	0014      	movs	r4, r2
    8628:	930f      	str	r3, [sp, #60]	; 0x3c
    862a:	9009      	str	r0, [sp, #36]	; 0x24
    862c:	f003 fbd8 	bl	bde0 <_localeconv_r>
    8630:	6803      	ldr	r3, [r0, #0]
    8632:	0018      	movs	r0, r3
    8634:	9319      	str	r3, [sp, #100]	; 0x64
    8636:	f7ff fcab 	bl	7f90 <strlen>
    863a:	9018      	str	r0, [sp, #96]	; 0x60
    863c:	89ab      	ldrh	r3, [r5, #12]
    863e:	061b      	lsls	r3, r3, #24
    8640:	d505      	bpl.n	864e <_svfprintf_r+0x3a>
    8642:	692b      	ldr	r3, [r5, #16]
    8644:	9307      	str	r3, [sp, #28]
    8646:	2b00      	cmp	r3, #0
    8648:	d101      	bne.n	864e <_svfprintf_r+0x3a>
    864a:	f001 f863 	bl	9714 <_svfprintf_r+0x1100>
    864e:	ab32      	add	r3, sp, #200	; 0xc8
    8650:	9325      	str	r3, [sp, #148]	; 0x94
    8652:	2300      	movs	r3, #0
    8654:	46a3      	mov	fp, r4
    8656:	af25      	add	r7, sp, #148	; 0x94
    8658:	60bb      	str	r3, [r7, #8]
    865a:	607b      	str	r3, [r7, #4]
    865c:	9314      	str	r3, [sp, #80]	; 0x50
    865e:	9316      	str	r3, [sp, #88]	; 0x58
    8660:	9315      	str	r3, [sp, #84]	; 0x54
    8662:	ae32      	add	r6, sp, #200	; 0xc8
    8664:	9317      	str	r3, [sp, #92]	; 0x5c
    8666:	931a      	str	r3, [sp, #104]	; 0x68
    8668:	930a      	str	r3, [sp, #40]	; 0x28
    866a:	465b      	mov	r3, fp
    866c:	781b      	ldrb	r3, [r3, #0]
    866e:	465c      	mov	r4, fp
    8670:	2b00      	cmp	r3, #0
    8672:	d01c      	beq.n	86ae <_svfprintf_r+0x9a>
    8674:	2b25      	cmp	r3, #37	; 0x25
    8676:	d102      	bne.n	867e <_svfprintf_r+0x6a>
    8678:	e019      	b.n	86ae <_svfprintf_r+0x9a>
    867a:	2b25      	cmp	r3, #37	; 0x25
    867c:	d003      	beq.n	8686 <_svfprintf_r+0x72>
    867e:	3401      	adds	r4, #1
    8680:	7823      	ldrb	r3, [r4, #0]
    8682:	2b00      	cmp	r3, #0
    8684:	d1f9      	bne.n	867a <_svfprintf_r+0x66>
    8686:	465b      	mov	r3, fp
    8688:	1ae5      	subs	r5, r4, r3
    868a:	d010      	beq.n	86ae <_svfprintf_r+0x9a>
    868c:	465b      	mov	r3, fp
    868e:	6033      	str	r3, [r6, #0]
    8690:	68bb      	ldr	r3, [r7, #8]
    8692:	6075      	str	r5, [r6, #4]
    8694:	195b      	adds	r3, r3, r5
    8696:	60bb      	str	r3, [r7, #8]
    8698:	687b      	ldr	r3, [r7, #4]
    869a:	3301      	adds	r3, #1
    869c:	607b      	str	r3, [r7, #4]
    869e:	2b07      	cmp	r3, #7
    86a0:	dc2e      	bgt.n	8700 <_svfprintf_r+0xec>
    86a2:	3608      	adds	r6, #8
    86a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    86a6:	469c      	mov	ip, r3
    86a8:	44ac      	add	ip, r5
    86aa:	4663      	mov	r3, ip
    86ac:	930a      	str	r3, [sp, #40]	; 0x28
    86ae:	7823      	ldrb	r3, [r4, #0]
    86b0:	2b00      	cmp	r3, #0
    86b2:	d02e      	beq.n	8712 <_svfprintf_r+0xfe>
    86b4:	1c63      	adds	r3, r4, #1
    86b6:	469b      	mov	fp, r3
    86b8:	2300      	movs	r3, #0
    86ba:	aa16      	add	r2, sp, #88	; 0x58
    86bc:	77d3      	strb	r3, [r2, #31]
    86be:	2201      	movs	r2, #1
    86c0:	4252      	negs	r2, r2
    86c2:	4692      	mov	sl, r2
    86c4:	2200      	movs	r2, #0
    86c6:	2100      	movs	r1, #0
    86c8:	920b      	str	r2, [sp, #44]	; 0x2c
    86ca:	3220      	adds	r2, #32
    86cc:	4691      	mov	r9, r2
    86ce:	3220      	adds	r2, #32
    86d0:	7863      	ldrb	r3, [r4, #1]
    86d2:	4688      	mov	r8, r1
    86d4:	2000      	movs	r0, #0
    86d6:	2400      	movs	r4, #0
    86d8:	4694      	mov	ip, r2
    86da:	4659      	mov	r1, fp
    86dc:	3101      	adds	r1, #1
    86de:	001a      	movs	r2, r3
    86e0:	3a20      	subs	r2, #32
    86e2:	2a58      	cmp	r2, #88	; 0x58
    86e4:	d900      	bls.n	86e8 <_svfprintf_r+0xd4>
    86e6:	e2fd      	b.n	8ce4 <_svfprintf_r+0x6d0>
    86e8:	4dd7      	ldr	r5, [pc, #860]	; (8a48 <_svfprintf_r+0x434>)
    86ea:	0092      	lsls	r2, r2, #2
    86ec:	58aa      	ldr	r2, [r5, r2]
    86ee:	4697      	mov	pc, r2
    86f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    86f2:	920f      	str	r2, [sp, #60]	; 0x3c
    86f4:	425b      	negs	r3, r3
    86f6:	930b      	str	r3, [sp, #44]	; 0x2c
    86f8:	2304      	movs	r3, #4
    86fa:	431c      	orrs	r4, r3
    86fc:	780b      	ldrb	r3, [r1, #0]
    86fe:	e7ed      	b.n	86dc <_svfprintf_r+0xc8>
    8700:	003a      	movs	r2, r7
    8702:	9906      	ldr	r1, [sp, #24]
    8704:	9809      	ldr	r0, [sp, #36]	; 0x24
    8706:	f005 fdf5 	bl	e2f4 <__ssprint_r>
    870a:	2800      	cmp	r0, #0
    870c:	d109      	bne.n	8722 <_svfprintf_r+0x10e>
    870e:	ae32      	add	r6, sp, #200	; 0xc8
    8710:	e7c8      	b.n	86a4 <_svfprintf_r+0x90>
    8712:	68bb      	ldr	r3, [r7, #8]
    8714:	2b00      	cmp	r3, #0
    8716:	d004      	beq.n	8722 <_svfprintf_r+0x10e>
    8718:	003a      	movs	r2, r7
    871a:	9906      	ldr	r1, [sp, #24]
    871c:	9809      	ldr	r0, [sp, #36]	; 0x24
    871e:	f005 fde9 	bl	e2f4 <__ssprint_r>
    8722:	9b06      	ldr	r3, [sp, #24]
    8724:	899b      	ldrh	r3, [r3, #12]
    8726:	065b      	lsls	r3, r3, #25
    8728:	d501      	bpl.n	872e <_svfprintf_r+0x11a>
    872a:	f001 f8ce 	bl	98ca <_svfprintf_r+0x12b6>
    872e:	980a      	ldr	r0, [sp, #40]	; 0x28
    8730:	b043      	add	sp, #268	; 0x10c
    8732:	bc3c      	pop	{r2, r3, r4, r5}
    8734:	4690      	mov	r8, r2
    8736:	4699      	mov	r9, r3
    8738:	46a2      	mov	sl, r4
    873a:	46ab      	mov	fp, r5
    873c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    873e:	2201      	movs	r2, #1
    8740:	780b      	ldrb	r3, [r1, #0]
    8742:	4690      	mov	r8, r2
    8744:	202b      	movs	r0, #43	; 0x2b
    8746:	e7c9      	b.n	86dc <_svfprintf_r+0xc8>
    8748:	1c4b      	adds	r3, r1, #1
    874a:	469b      	mov	fp, r3
    874c:	780b      	ldrb	r3, [r1, #0]
    874e:	2b2a      	cmp	r3, #42	; 0x2a
    8750:	d101      	bne.n	8756 <_svfprintf_r+0x142>
    8752:	f001 fa1b 	bl	9b8c <_svfprintf_r+0x1578>
    8756:	001a      	movs	r2, r3
    8758:	2100      	movs	r1, #0
    875a:	3a30      	subs	r2, #48	; 0x30
    875c:	468a      	mov	sl, r1
    875e:	4659      	mov	r1, fp
    8760:	2a09      	cmp	r2, #9
    8762:	d8bc      	bhi.n	86de <_svfprintf_r+0xca>
    8764:	0003      	movs	r3, r0
    8766:	0011      	movs	r1, r2
    8768:	4650      	mov	r0, sl
    876a:	465a      	mov	r2, fp
    876c:	469a      	mov	sl, r3
    876e:	46a3      	mov	fp, r4
    8770:	0083      	lsls	r3, r0, #2
    8772:	181b      	adds	r3, r3, r0
    8774:	7814      	ldrb	r4, [r2, #0]
    8776:	005b      	lsls	r3, r3, #1
    8778:	1858      	adds	r0, r3, r1
    877a:	0021      	movs	r1, r4
    877c:	1c53      	adds	r3, r2, #1
    877e:	3930      	subs	r1, #48	; 0x30
    8780:	001a      	movs	r2, r3
    8782:	2909      	cmp	r1, #9
    8784:	d9f4      	bls.n	8770 <_svfprintf_r+0x15c>
    8786:	4652      	mov	r2, sl
    8788:	0019      	movs	r1, r3
    878a:	4682      	mov	sl, r0
    878c:	0023      	movs	r3, r4
    878e:	0010      	movs	r0, r2
    8790:	465c      	mov	r4, fp
    8792:	e7a4      	b.n	86de <_svfprintf_r+0xca>
    8794:	2380      	movs	r3, #128	; 0x80
    8796:	431c      	orrs	r4, r3
    8798:	780b      	ldrb	r3, [r1, #0]
    879a:	e79f      	b.n	86dc <_svfprintf_r+0xc8>
    879c:	468b      	mov	fp, r1
    879e:	4641      	mov	r1, r8
    87a0:	9312      	str	r3, [sp, #72]	; 0x48
    87a2:	2900      	cmp	r1, #0
    87a4:	d001      	beq.n	87aa <_svfprintf_r+0x196>
    87a6:	f001 fa1f 	bl	9be8 <_svfprintf_r+0x15d4>
    87aa:	2310      	movs	r3, #16
    87ac:	431c      	orrs	r4, r3
    87ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    87b0:	06a3      	lsls	r3, r4, #26
    87b2:	d501      	bpl.n	87b8 <_svfprintf_r+0x1a4>
    87b4:	f000 fe88 	bl	94c8 <_svfprintf_r+0xeb4>
    87b8:	06e3      	lsls	r3, r4, #27
    87ba:	d501      	bpl.n	87c0 <_svfprintf_r+0x1ac>
    87bc:	f000 fd80 	bl	92c0 <_svfprintf_r+0xcac>
    87c0:	0663      	lsls	r3, r4, #25
    87c2:	d401      	bmi.n	87c8 <_svfprintf_r+0x1b4>
    87c4:	f000 fd7c 	bl	92c0 <_svfprintf_r+0xcac>
    87c8:	2100      	movs	r1, #0
    87ca:	5e53      	ldrsh	r3, [r2, r1]
    87cc:	930c      	str	r3, [sp, #48]	; 0x30
    87ce:	3204      	adds	r2, #4
    87d0:	17db      	asrs	r3, r3, #31
    87d2:	930d      	str	r3, [sp, #52]	; 0x34
    87d4:	920f      	str	r2, [sp, #60]	; 0x3c
    87d6:	d501      	bpl.n	87dc <_svfprintf_r+0x1c8>
    87d8:	f000 fe86 	bl	94e8 <_svfprintf_r+0xed4>
    87dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    87de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    87e0:	0008      	movs	r0, r1
    87e2:	ab16      	add	r3, sp, #88	; 0x58
    87e4:	7fdb      	ldrb	r3, [r3, #31]
    87e6:	4310      	orrs	r0, r2
    87e8:	4698      	mov	r8, r3
    87ea:	0002      	movs	r2, r0
    87ec:	2301      	movs	r3, #1
    87ee:	4651      	mov	r1, sl
    87f0:	3101      	adds	r1, #1
    87f2:	d100      	bne.n	87f6 <_svfprintf_r+0x1e2>
    87f4:	e0ff      	b.n	89f6 <_svfprintf_r+0x3e2>
    87f6:	2180      	movs	r1, #128	; 0x80
    87f8:	0020      	movs	r0, r4
    87fa:	4388      	bics	r0, r1
    87fc:	9008      	str	r0, [sp, #32]
    87fe:	2a00      	cmp	r2, #0
    8800:	d000      	beq.n	8804 <_svfprintf_r+0x1f0>
    8802:	e0fc      	b.n	89fe <_svfprintf_r+0x3ea>
    8804:	4652      	mov	r2, sl
    8806:	2a00      	cmp	r2, #0
    8808:	d001      	beq.n	880e <_svfprintf_r+0x1fa>
    880a:	f000 fc2c 	bl	9066 <_svfprintf_r+0xa52>
    880e:	2b00      	cmp	r3, #0
    8810:	d001      	beq.n	8816 <_svfprintf_r+0x202>
    8812:	f000 fd04 	bl	921e <_svfprintf_r+0xc0a>
    8816:	2001      	movs	r0, #1
    8818:	ab32      	add	r3, sp, #200	; 0xc8
    881a:	4020      	ands	r0, r4
    881c:	900e      	str	r0, [sp, #56]	; 0x38
    881e:	9311      	str	r3, [sp, #68]	; 0x44
    8820:	d008      	beq.n	8834 <_svfprintf_r+0x220>
    8822:	2327      	movs	r3, #39	; 0x27
    8824:	2130      	movs	r1, #48	; 0x30
    8826:	aa28      	add	r2, sp, #160	; 0xa0
    8828:	54d1      	strb	r1, [r2, r3]
    882a:	aa16      	add	r2, sp, #88	; 0x58
    882c:	4694      	mov	ip, r2
    882e:	3348      	adds	r3, #72	; 0x48
    8830:	4463      	add	r3, ip
    8832:	9311      	str	r3, [sp, #68]	; 0x44
    8834:	4653      	mov	r3, sl
    8836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8838:	9307      	str	r3, [sp, #28]
    883a:	4592      	cmp	sl, r2
    883c:	da00      	bge.n	8840 <_svfprintf_r+0x22c>
    883e:	9207      	str	r2, [sp, #28]
    8840:	2300      	movs	r3, #0
    8842:	9313      	str	r3, [sp, #76]	; 0x4c
    8844:	4643      	mov	r3, r8
    8846:	2b00      	cmp	r3, #0
    8848:	d002      	beq.n	8850 <_svfprintf_r+0x23c>
    884a:	9b07      	ldr	r3, [sp, #28]
    884c:	3301      	adds	r3, #1
    884e:	9307      	str	r3, [sp, #28]
    8850:	2302      	movs	r3, #2
    8852:	9a08      	ldr	r2, [sp, #32]
    8854:	401a      	ands	r2, r3
    8856:	4691      	mov	r9, r2
    8858:	d002      	beq.n	8860 <_svfprintf_r+0x24c>
    885a:	9b07      	ldr	r3, [sp, #28]
    885c:	3302      	adds	r3, #2
    885e:	9307      	str	r3, [sp, #28]
    8860:	2384      	movs	r3, #132	; 0x84
    8862:	9a08      	ldr	r2, [sp, #32]
    8864:	401a      	ands	r2, r3
    8866:	9210      	str	r2, [sp, #64]	; 0x40
    8868:	d000      	beq.n	886c <_svfprintf_r+0x258>
    886a:	e24d      	b.n	8d08 <_svfprintf_r+0x6f4>
    886c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    886e:	9a07      	ldr	r2, [sp, #28]
    8870:	1a9c      	subs	r4, r3, r2
    8872:	2c00      	cmp	r4, #0
    8874:	dc00      	bgt.n	8878 <_svfprintf_r+0x264>
    8876:	e247      	b.n	8d08 <_svfprintf_r+0x6f4>
    8878:	4974      	ldr	r1, [pc, #464]	; (8a4c <_svfprintf_r+0x438>)
    887a:	68ba      	ldr	r2, [r7, #8]
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	4688      	mov	r8, r1
    8880:	2c10      	cmp	r4, #16
    8882:	dd1f      	ble.n	88c4 <_svfprintf_r+0x2b0>
    8884:	0031      	movs	r1, r6
    8886:	2510      	movs	r5, #16
    8888:	4646      	mov	r6, r8
    888a:	e003      	b.n	8894 <_svfprintf_r+0x280>
    888c:	3c10      	subs	r4, #16
    888e:	3108      	adds	r1, #8
    8890:	2c10      	cmp	r4, #16
    8892:	dd15      	ble.n	88c0 <_svfprintf_r+0x2ac>
    8894:	3210      	adds	r2, #16
    8896:	3301      	adds	r3, #1
    8898:	600e      	str	r6, [r1, #0]
    889a:	604d      	str	r5, [r1, #4]
    889c:	60ba      	str	r2, [r7, #8]
    889e:	607b      	str	r3, [r7, #4]
    88a0:	2b07      	cmp	r3, #7
    88a2:	ddf3      	ble.n	888c <_svfprintf_r+0x278>
    88a4:	003a      	movs	r2, r7
    88a6:	9906      	ldr	r1, [sp, #24]
    88a8:	9809      	ldr	r0, [sp, #36]	; 0x24
    88aa:	f005 fd23 	bl	e2f4 <__ssprint_r>
    88ae:	2800      	cmp	r0, #0
    88b0:	d000      	beq.n	88b4 <_svfprintf_r+0x2a0>
    88b2:	e736      	b.n	8722 <_svfprintf_r+0x10e>
    88b4:	3c10      	subs	r4, #16
    88b6:	68ba      	ldr	r2, [r7, #8]
    88b8:	687b      	ldr	r3, [r7, #4]
    88ba:	a932      	add	r1, sp, #200	; 0xc8
    88bc:	2c10      	cmp	r4, #16
    88be:	dce9      	bgt.n	8894 <_svfprintf_r+0x280>
    88c0:	46b0      	mov	r8, r6
    88c2:	000e      	movs	r6, r1
    88c4:	4641      	mov	r1, r8
    88c6:	6074      	str	r4, [r6, #4]
    88c8:	3301      	adds	r3, #1
    88ca:	18a4      	adds	r4, r4, r2
    88cc:	6031      	str	r1, [r6, #0]
    88ce:	60bc      	str	r4, [r7, #8]
    88d0:	607b      	str	r3, [r7, #4]
    88d2:	2b07      	cmp	r3, #7
    88d4:	dd01      	ble.n	88da <_svfprintf_r+0x2c6>
    88d6:	f000 fca8 	bl	922a <_svfprintf_r+0xc16>
    88da:	ab16      	add	r3, sp, #88	; 0x58
    88dc:	7fdb      	ldrb	r3, [r3, #31]
    88de:	3608      	adds	r6, #8
    88e0:	4698      	mov	r8, r3
    88e2:	e212      	b.n	8d0a <_svfprintf_r+0x6f6>
    88e4:	468b      	mov	fp, r1
    88e6:	4641      	mov	r1, r8
    88e8:	9312      	str	r3, [sp, #72]	; 0x48
    88ea:	2900      	cmp	r1, #0
    88ec:	d001      	beq.n	88f2 <_svfprintf_r+0x2de>
    88ee:	f001 f977 	bl	9be0 <_svfprintf_r+0x15cc>
    88f2:	2207      	movs	r2, #7
    88f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    88f6:	3307      	adds	r3, #7
    88f8:	4393      	bics	r3, r2
    88fa:	3201      	adds	r2, #1
    88fc:	4694      	mov	ip, r2
    88fe:	449c      	add	ip, r3
    8900:	4662      	mov	r2, ip
    8902:	920f      	str	r2, [sp, #60]	; 0x3c
    8904:	681a      	ldr	r2, [r3, #0]
    8906:	9216      	str	r2, [sp, #88]	; 0x58
    8908:	685b      	ldr	r3, [r3, #4]
    890a:	2201      	movs	r2, #1
    890c:	9315      	str	r3, [sp, #84]	; 0x54
    890e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8910:	9d16      	ldr	r5, [sp, #88]	; 0x58
    8912:	005b      	lsls	r3, r3, #1
    8914:	085b      	lsrs	r3, r3, #1
    8916:	4698      	mov	r8, r3
    8918:	4252      	negs	r2, r2
    891a:	4b4d      	ldr	r3, [pc, #308]	; (8a50 <_svfprintf_r+0x43c>)
    891c:	0028      	movs	r0, r5
    891e:	4641      	mov	r1, r8
    8920:	f006 fd44 	bl	f3ac <__aeabi_dcmpun>
    8924:	2800      	cmp	r0, #0
    8926:	d001      	beq.n	892c <_svfprintf_r+0x318>
    8928:	f000 fdfd 	bl	9526 <_svfprintf_r+0xf12>
    892c:	2201      	movs	r2, #1
    892e:	4b48      	ldr	r3, [pc, #288]	; (8a50 <_svfprintf_r+0x43c>)
    8930:	4252      	negs	r2, r2
    8932:	0028      	movs	r0, r5
    8934:	4641      	mov	r1, r8
    8936:	f7fe ffa5 	bl	7884 <__aeabi_dcmple>
    893a:	2800      	cmp	r0, #0
    893c:	d001      	beq.n	8942 <_svfprintf_r+0x32e>
    893e:	f000 fdf2 	bl	9526 <_svfprintf_r+0xf12>
    8942:	2200      	movs	r2, #0
    8944:	2300      	movs	r3, #0
    8946:	9816      	ldr	r0, [sp, #88]	; 0x58
    8948:	9915      	ldr	r1, [sp, #84]	; 0x54
    894a:	f7fe ff91 	bl	7870 <__aeabi_dcmplt>
    894e:	2800      	cmp	r0, #0
    8950:	d001      	beq.n	8956 <_svfprintf_r+0x342>
    8952:	f001 f822 	bl	999a <_svfprintf_r+0x1386>
    8956:	ab16      	add	r3, sp, #88	; 0x58
    8958:	7fdb      	ldrb	r3, [r3, #31]
    895a:	4698      	mov	r8, r3
    895c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    895e:	2b47      	cmp	r3, #71	; 0x47
    8960:	dd01      	ble.n	8966 <_svfprintf_r+0x352>
    8962:	f000 fec7 	bl	96f4 <_svfprintf_r+0x10e0>
    8966:	4b3b      	ldr	r3, [pc, #236]	; (8a54 <_svfprintf_r+0x440>)
    8968:	9311      	str	r3, [sp, #68]	; 0x44
    896a:	2380      	movs	r3, #128	; 0x80
    896c:	439c      	bics	r4, r3
    896e:	3b7d      	subs	r3, #125	; 0x7d
    8970:	9307      	str	r3, [sp, #28]
    8972:	930e      	str	r3, [sp, #56]	; 0x38
    8974:	2300      	movs	r3, #0
    8976:	9408      	str	r4, [sp, #32]
    8978:	469a      	mov	sl, r3
    897a:	9313      	str	r3, [sp, #76]	; 0x4c
    897c:	e762      	b.n	8844 <_svfprintf_r+0x230>
    897e:	2200      	movs	r2, #0
    8980:	3b30      	subs	r3, #48	; 0x30
    8982:	0015      	movs	r5, r2
    8984:	001a      	movs	r2, r3
    8986:	0003      	movs	r3, r0
    8988:	9407      	str	r4, [sp, #28]
    898a:	0008      	movs	r0, r1
    898c:	002c      	movs	r4, r5
    898e:	469b      	mov	fp, r3
    8990:	00a3      	lsls	r3, r4, #2
    8992:	191c      	adds	r4, r3, r4
    8994:	7803      	ldrb	r3, [r0, #0]
    8996:	0064      	lsls	r4, r4, #1
    8998:	1914      	adds	r4, r2, r4
    899a:	001a      	movs	r2, r3
    899c:	3101      	adds	r1, #1
    899e:	3a30      	subs	r2, #48	; 0x30
    89a0:	0008      	movs	r0, r1
    89a2:	2a09      	cmp	r2, #9
    89a4:	d9f4      	bls.n	8990 <_svfprintf_r+0x37c>
    89a6:	940b      	str	r4, [sp, #44]	; 0x2c
    89a8:	4658      	mov	r0, fp
    89aa:	9c07      	ldr	r4, [sp, #28]
    89ac:	e697      	b.n	86de <_svfprintf_r+0xca>
    89ae:	2308      	movs	r3, #8
    89b0:	431c      	orrs	r4, r3
    89b2:	780b      	ldrb	r3, [r1, #0]
    89b4:	e692      	b.n	86dc <_svfprintf_r+0xc8>
    89b6:	9312      	str	r3, [sp, #72]	; 0x48
    89b8:	2310      	movs	r3, #16
    89ba:	431c      	orrs	r4, r3
    89bc:	468b      	mov	fp, r1
    89be:	06a3      	lsls	r3, r4, #26
    89c0:	d500      	bpl.n	89c4 <_svfprintf_r+0x3b0>
    89c2:	e17b      	b.n	8cbc <_svfprintf_r+0x6a8>
    89c4:	06e3      	lsls	r3, r4, #27
    89c6:	d501      	bpl.n	89cc <_svfprintf_r+0x3b8>
    89c8:	f000 fc7e 	bl	92c8 <_svfprintf_r+0xcb4>
    89cc:	0663      	lsls	r3, r4, #25
    89ce:	d401      	bmi.n	89d4 <_svfprintf_r+0x3c0>
    89d0:	f000 fc7a 	bl	92c8 <_svfprintf_r+0xcb4>
    89d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    89d6:	881a      	ldrh	r2, [r3, #0]
    89d8:	920c      	str	r2, [sp, #48]	; 0x30
    89da:	2200      	movs	r2, #0
    89dc:	3304      	adds	r3, #4
    89de:	930f      	str	r3, [sp, #60]	; 0x3c
    89e0:	2300      	movs	r3, #0
    89e2:	920d      	str	r2, [sp, #52]	; 0x34
    89e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    89e6:	2100      	movs	r1, #0
    89e8:	a816      	add	r0, sp, #88	; 0x58
    89ea:	77c1      	strb	r1, [r0, #31]
    89ec:	4688      	mov	r8, r1
    89ee:	4651      	mov	r1, sl
    89f0:	3101      	adds	r1, #1
    89f2:	d000      	beq.n	89f6 <_svfprintf_r+0x3e2>
    89f4:	e6ff      	b.n	87f6 <_svfprintf_r+0x1e2>
    89f6:	2a00      	cmp	r2, #0
    89f8:	d100      	bne.n	89fc <_svfprintf_r+0x3e8>
    89fa:	e335      	b.n	9068 <_svfprintf_r+0xa54>
    89fc:	9408      	str	r4, [sp, #32]
    89fe:	2b01      	cmp	r3, #1
    8a00:	d100      	bne.n	8a04 <_svfprintf_r+0x3f0>
    8a02:	e3e5      	b.n	91d0 <_svfprintf_r+0xbbc>
    8a04:	2b02      	cmp	r3, #2
    8a06:	d000      	beq.n	8a0a <_svfprintf_r+0x3f6>
    8a08:	e362      	b.n	90d0 <_svfprintf_r+0xabc>
    8a0a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    8a0c:	200f      	movs	r0, #15
    8a0e:	46a1      	mov	r9, r4
    8a10:	46b4      	mov	ip, r6
    8a12:	ab32      	add	r3, sp, #200	; 0xc8
    8a14:	0019      	movs	r1, r3
    8a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8a18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8a1a:	0004      	movs	r4, r0
    8a1c:	464d      	mov	r5, r9
    8a1e:	4014      	ands	r4, r2
    8a20:	5d2c      	ldrb	r4, [r5, r4]
    8a22:	071e      	lsls	r6, r3, #28
    8a24:	0915      	lsrs	r5, r2, #4
    8a26:	3901      	subs	r1, #1
    8a28:	432e      	orrs	r6, r5
    8a2a:	700c      	strb	r4, [r1, #0]
    8a2c:	091c      	lsrs	r4, r3, #4
    8a2e:	0023      	movs	r3, r4
    8a30:	0034      	movs	r4, r6
    8a32:	0032      	movs	r2, r6
    8a34:	431c      	orrs	r4, r3
    8a36:	d1f0      	bne.n	8a1a <_svfprintf_r+0x406>
    8a38:	920c      	str	r2, [sp, #48]	; 0x30
    8a3a:	930d      	str	r3, [sp, #52]	; 0x34
    8a3c:	ab32      	add	r3, sp, #200	; 0xc8
    8a3e:	1a5b      	subs	r3, r3, r1
    8a40:	9111      	str	r1, [sp, #68]	; 0x44
    8a42:	4666      	mov	r6, ip
    8a44:	930e      	str	r3, [sp, #56]	; 0x38
    8a46:	e6f5      	b.n	8834 <_svfprintf_r+0x220>
    8a48:	00011d60 	.word	0x00011d60
    8a4c:	00011f08 	.word	0x00011f08
    8a50:	7fefffff 	.word	0x7fefffff
    8a54:	00011ec4 	.word	0x00011ec4
    8a58:	9312      	str	r3, [sp, #72]	; 0x48
    8a5a:	2310      	movs	r3, #16
    8a5c:	431c      	orrs	r4, r3
    8a5e:	468b      	mov	fp, r1
    8a60:	06a3      	lsls	r3, r4, #26
    8a62:	d500      	bpl.n	8a66 <_svfprintf_r+0x452>
    8a64:	e111      	b.n	8c8a <_svfprintf_r+0x676>
    8a66:	06e3      	lsls	r3, r4, #27
    8a68:	d501      	bpl.n	8a6e <_svfprintf_r+0x45a>
    8a6a:	f000 fc31 	bl	92d0 <_svfprintf_r+0xcbc>
    8a6e:	0663      	lsls	r3, r4, #25
    8a70:	d401      	bmi.n	8a76 <_svfprintf_r+0x462>
    8a72:	f000 fc2d 	bl	92d0 <_svfprintf_r+0xcbc>
    8a76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8a78:	881a      	ldrh	r2, [r3, #0]
    8a7a:	920c      	str	r2, [sp, #48]	; 0x30
    8a7c:	2200      	movs	r2, #0
    8a7e:	3304      	adds	r3, #4
    8a80:	920d      	str	r2, [sp, #52]	; 0x34
    8a82:	930f      	str	r3, [sp, #60]	; 0x3c
    8a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8a86:	2301      	movs	r3, #1
    8a88:	e7ad      	b.n	89e6 <_svfprintf_r+0x3d2>
    8a8a:	468b      	mov	fp, r1
    8a8c:	4641      	mov	r1, r8
    8a8e:	9312      	str	r3, [sp, #72]	; 0x48
    8a90:	2900      	cmp	r1, #0
    8a92:	d001      	beq.n	8a98 <_svfprintf_r+0x484>
    8a94:	f001 f890 	bl	9bb8 <_svfprintf_r+0x15a4>
    8a98:	4bb8      	ldr	r3, [pc, #736]	; (8d7c <_svfprintf_r+0x768>)
    8a9a:	9317      	str	r3, [sp, #92]	; 0x5c
    8a9c:	06a3      	lsls	r3, r4, #26
    8a9e:	d500      	bpl.n	8aa2 <_svfprintf_r+0x48e>
    8aa0:	e0ab      	b.n	8bfa <_svfprintf_r+0x5e6>
    8aa2:	06e3      	lsls	r3, r4, #27
    8aa4:	d501      	bpl.n	8aaa <_svfprintf_r+0x496>
    8aa6:	f000 fc07 	bl	92b8 <_svfprintf_r+0xca4>
    8aaa:	0663      	lsls	r3, r4, #25
    8aac:	d401      	bmi.n	8ab2 <_svfprintf_r+0x49e>
    8aae:	f000 fc03 	bl	92b8 <_svfprintf_r+0xca4>
    8ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8ab4:	881a      	ldrh	r2, [r3, #0]
    8ab6:	920c      	str	r2, [sp, #48]	; 0x30
    8ab8:	2200      	movs	r2, #0
    8aba:	3304      	adds	r3, #4
    8abc:	920d      	str	r2, [sp, #52]	; 0x34
    8abe:	930f      	str	r3, [sp, #60]	; 0x3c
    8ac0:	07e3      	lsls	r3, r4, #31
    8ac2:	d400      	bmi.n	8ac6 <_svfprintf_r+0x4b2>
    8ac4:	e0a9      	b.n	8c1a <_svfprintf_r+0x606>
    8ac6:	990c      	ldr	r1, [sp, #48]	; 0x30
    8ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8aca:	000b      	movs	r3, r1
    8acc:	4313      	orrs	r3, r2
    8ace:	001a      	movs	r2, r3
    8ad0:	2302      	movs	r3, #2
    8ad2:	2a00      	cmp	r2, #0
    8ad4:	d100      	bne.n	8ad8 <_svfprintf_r+0x4c4>
    8ad6:	e786      	b.n	89e6 <_svfprintf_r+0x3d2>
    8ad8:	2030      	movs	r0, #48	; 0x30
    8ada:	a91e      	add	r1, sp, #120	; 0x78
    8adc:	7008      	strb	r0, [r1, #0]
    8ade:	2548      	movs	r5, #72	; 0x48
    8ae0:	4668      	mov	r0, sp
    8ae2:	1940      	adds	r0, r0, r5
    8ae4:	7800      	ldrb	r0, [r0, #0]
    8ae6:	431c      	orrs	r4, r3
    8ae8:	7048      	strb	r0, [r1, #1]
    8aea:	e77c      	b.n	89e6 <_svfprintf_r+0x3d2>
    8aec:	468b      	mov	fp, r1
    8aee:	4641      	mov	r1, r8
    8af0:	2900      	cmp	r1, #0
    8af2:	d001      	beq.n	8af8 <_svfprintf_r+0x4e4>
    8af4:	f001 f883 	bl	9bfe <_svfprintf_r+0x15ea>
    8af8:	06a3      	lsls	r3, r4, #26
    8afa:	d501      	bpl.n	8b00 <_svfprintf_r+0x4ec>
    8afc:	f000 fde9 	bl	96d2 <_svfprintf_r+0x10be>
    8b00:	06e3      	lsls	r3, r4, #27
    8b02:	d501      	bpl.n	8b08 <_svfprintf_r+0x4f4>
    8b04:	f000 fd9b 	bl	963e <_svfprintf_r+0x102a>
    8b08:	0663      	lsls	r3, r4, #25
    8b0a:	d401      	bmi.n	8b10 <_svfprintf_r+0x4fc>
    8b0c:	f000 fd97 	bl	963e <_svfprintf_r+0x102a>
    8b10:	4669      	mov	r1, sp
    8b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
    8b16:	681a      	ldr	r2, [r3, #0]
    8b18:	3304      	adds	r3, #4
    8b1a:	9207      	str	r2, [sp, #28]
    8b1c:	8011      	strh	r1, [r2, #0]
    8b1e:	930f      	str	r3, [sp, #60]	; 0x3c
    8b20:	e5a3      	b.n	866a <_svfprintf_r+0x56>
    8b22:	464b      	mov	r3, r9
    8b24:	431c      	orrs	r4, r3
    8b26:	780b      	ldrb	r3, [r1, #0]
    8b28:	e5d8      	b.n	86dc <_svfprintf_r+0xc8>
    8b2a:	9312      	str	r3, [sp, #72]	; 0x48
    8b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8b2e:	468b      	mov	fp, r1
    8b30:	1d1d      	adds	r5, r3, #4
    8b32:	681b      	ldr	r3, [r3, #0]
    8b34:	a916      	add	r1, sp, #88	; 0x58
    8b36:	001a      	movs	r2, r3
    8b38:	9311      	str	r3, [sp, #68]	; 0x44
    8b3a:	2300      	movs	r3, #0
    8b3c:	77cb      	strb	r3, [r1, #31]
    8b3e:	2a00      	cmp	r2, #0
    8b40:	d101      	bne.n	8b46 <_svfprintf_r+0x532>
    8b42:	f000 fefb 	bl	993c <_svfprintf_r+0x1328>
    8b46:	4653      	mov	r3, sl
    8b48:	3301      	adds	r3, #1
    8b4a:	d101      	bne.n	8b50 <_svfprintf_r+0x53c>
    8b4c:	f000 fe38 	bl	97c0 <_svfprintf_r+0x11ac>
    8b50:	4652      	mov	r2, sl
    8b52:	2100      	movs	r1, #0
    8b54:	9811      	ldr	r0, [sp, #68]	; 0x44
    8b56:	f003 fc51 	bl	c3fc <memchr>
    8b5a:	2800      	cmp	r0, #0
    8b5c:	d101      	bne.n	8b62 <_svfprintf_r+0x54e>
    8b5e:	f000 ff54 	bl	9a0a <_svfprintf_r+0x13f6>
    8b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8b64:	1ac3      	subs	r3, r0, r3
    8b66:	001a      	movs	r2, r3
    8b68:	930e      	str	r3, [sp, #56]	; 0x38
    8b6a:	43db      	mvns	r3, r3
    8b6c:	17db      	asrs	r3, r3, #31
    8b6e:	401a      	ands	r2, r3
    8b70:	ab16      	add	r3, sp, #88	; 0x58
    8b72:	7fdb      	ldrb	r3, [r3, #31]
    8b74:	9207      	str	r2, [sp, #28]
    8b76:	4698      	mov	r8, r3
    8b78:	2300      	movs	r3, #0
    8b7a:	950f      	str	r5, [sp, #60]	; 0x3c
    8b7c:	9408      	str	r4, [sp, #32]
    8b7e:	469a      	mov	sl, r3
    8b80:	9313      	str	r3, [sp, #76]	; 0x4c
    8b82:	e65f      	b.n	8844 <_svfprintf_r+0x230>
    8b84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8b86:	9312      	str	r3, [sp, #72]	; 0x48
    8b88:	6813      	ldr	r3, [r2, #0]
    8b8a:	ad28      	add	r5, sp, #160	; 0xa0
    8b8c:	9307      	str	r3, [sp, #28]
    8b8e:	466b      	mov	r3, sp
    8b90:	7f1b      	ldrb	r3, [r3, #28]
    8b92:	468b      	mov	fp, r1
    8b94:	702b      	strb	r3, [r5, #0]
    8b96:	2300      	movs	r3, #0
    8b98:	a916      	add	r1, sp, #88	; 0x58
    8b9a:	77cb      	strb	r3, [r1, #31]
    8b9c:	0013      	movs	r3, r2
    8b9e:	3304      	adds	r3, #4
    8ba0:	930f      	str	r3, [sp, #60]	; 0x3c
    8ba2:	2300      	movs	r3, #0
    8ba4:	9408      	str	r4, [sp, #32]
    8ba6:	4698      	mov	r8, r3
    8ba8:	3301      	adds	r3, #1
    8baa:	9307      	str	r3, [sp, #28]
    8bac:	930e      	str	r3, [sp, #56]	; 0x38
    8bae:	2300      	movs	r3, #0
    8bb0:	9511      	str	r5, [sp, #68]	; 0x44
    8bb2:	469a      	mov	sl, r3
    8bb4:	9313      	str	r3, [sp, #76]	; 0x4c
    8bb6:	e64b      	b.n	8850 <_svfprintf_r+0x23c>
    8bb8:	468b      	mov	fp, r1
    8bba:	4641      	mov	r1, r8
    8bbc:	9312      	str	r3, [sp, #72]	; 0x48
    8bbe:	2900      	cmp	r1, #0
    8bc0:	d100      	bne.n	8bc4 <_svfprintf_r+0x5b0>
    8bc2:	e5f4      	b.n	87ae <_svfprintf_r+0x19a>
    8bc4:	ab16      	add	r3, sp, #88	; 0x58
    8bc6:	77d8      	strb	r0, [r3, #31]
    8bc8:	e5f1      	b.n	87ae <_svfprintf_r+0x19a>
    8bca:	4663      	mov	r3, ip
    8bcc:	431c      	orrs	r4, r3
    8bce:	780b      	ldrb	r3, [r1, #0]
    8bd0:	e584      	b.n	86dc <_svfprintf_r+0xc8>
    8bd2:	780b      	ldrb	r3, [r1, #0]
    8bd4:	2b6c      	cmp	r3, #108	; 0x6c
    8bd6:	d101      	bne.n	8bdc <_svfprintf_r+0x5c8>
    8bd8:	f000 fd86 	bl	96e8 <_svfprintf_r+0x10d4>
    8bdc:	2210      	movs	r2, #16
    8bde:	4314      	orrs	r4, r2
    8be0:	e57c      	b.n	86dc <_svfprintf_r+0xc8>
    8be2:	468b      	mov	fp, r1
    8be4:	4641      	mov	r1, r8
    8be6:	9312      	str	r3, [sp, #72]	; 0x48
    8be8:	2900      	cmp	r1, #0
    8bea:	d001      	beq.n	8bf0 <_svfprintf_r+0x5dc>
    8bec:	f000 ffe8 	bl	9bc0 <_svfprintf_r+0x15ac>
    8bf0:	4b63      	ldr	r3, [pc, #396]	; (8d80 <_svfprintf_r+0x76c>)
    8bf2:	9317      	str	r3, [sp, #92]	; 0x5c
    8bf4:	06a3      	lsls	r3, r4, #26
    8bf6:	d400      	bmi.n	8bfa <_svfprintf_r+0x5e6>
    8bf8:	e753      	b.n	8aa2 <_svfprintf_r+0x48e>
    8bfa:	2207      	movs	r2, #7
    8bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8bfe:	3307      	adds	r3, #7
    8c00:	4393      	bics	r3, r2
    8c02:	3201      	adds	r2, #1
    8c04:	4694      	mov	ip, r2
    8c06:	449c      	add	ip, r3
    8c08:	4662      	mov	r2, ip
    8c0a:	920f      	str	r2, [sp, #60]	; 0x3c
    8c0c:	681a      	ldr	r2, [r3, #0]
    8c0e:	685b      	ldr	r3, [r3, #4]
    8c10:	920c      	str	r2, [sp, #48]	; 0x30
    8c12:	930d      	str	r3, [sp, #52]	; 0x34
    8c14:	07e3      	lsls	r3, r4, #31
    8c16:	d500      	bpl.n	8c1a <_svfprintf_r+0x606>
    8c18:	e755      	b.n	8ac6 <_svfprintf_r+0x4b2>
    8c1a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    8c1e:	0008      	movs	r0, r1
    8c20:	4310      	orrs	r0, r2
    8c22:	2302      	movs	r3, #2
    8c24:	0002      	movs	r2, r0
    8c26:	e6de      	b.n	89e6 <_svfprintf_r+0x3d2>
    8c28:	468b      	mov	fp, r1
    8c2a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8c2c:	2230      	movs	r2, #48	; 0x30
    8c2e:	680b      	ldr	r3, [r1, #0]
    8c30:	930c      	str	r3, [sp, #48]	; 0x30
    8c32:	2300      	movs	r3, #0
    8c34:	930d      	str	r3, [sp, #52]	; 0x34
    8c36:	3302      	adds	r3, #2
    8c38:	431c      	orrs	r4, r3
    8c3a:	ab1e      	add	r3, sp, #120	; 0x78
    8c3c:	701a      	strb	r2, [r3, #0]
    8c3e:	3248      	adds	r2, #72	; 0x48
    8c40:	705a      	strb	r2, [r3, #1]
    8c42:	000b      	movs	r3, r1
    8c44:	3304      	adds	r3, #4
    8c46:	930f      	str	r3, [sp, #60]	; 0x3c
    8c48:	4b4d      	ldr	r3, [pc, #308]	; (8d80 <_svfprintf_r+0x76c>)
    8c4a:	9212      	str	r2, [sp, #72]	; 0x48
    8c4c:	9317      	str	r3, [sp, #92]	; 0x5c
    8c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8c50:	2302      	movs	r3, #2
    8c52:	e6c8      	b.n	89e6 <_svfprintf_r+0x3d2>
    8c54:	2301      	movs	r3, #1
    8c56:	431c      	orrs	r4, r3
    8c58:	780b      	ldrb	r3, [r1, #0]
    8c5a:	e53f      	b.n	86dc <_svfprintf_r+0xc8>
    8c5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c5e:	1d1a      	adds	r2, r3, #4
    8c60:	681b      	ldr	r3, [r3, #0]
    8c62:	930b      	str	r3, [sp, #44]	; 0x2c
    8c64:	2b00      	cmp	r3, #0
    8c66:	da00      	bge.n	8c6a <_svfprintf_r+0x656>
    8c68:	e542      	b.n	86f0 <_svfprintf_r+0xdc>
    8c6a:	780b      	ldrb	r3, [r1, #0]
    8c6c:	920f      	str	r2, [sp, #60]	; 0x3c
    8c6e:	e535      	b.n	86dc <_svfprintf_r+0xc8>
    8c70:	780b      	ldrb	r3, [r1, #0]
    8c72:	2800      	cmp	r0, #0
    8c74:	d000      	beq.n	8c78 <_svfprintf_r+0x664>
    8c76:	e531      	b.n	86dc <_svfprintf_r+0xc8>
    8c78:	2201      	movs	r2, #1
    8c7a:	3020      	adds	r0, #32
    8c7c:	4690      	mov	r8, r2
    8c7e:	e52d      	b.n	86dc <_svfprintf_r+0xc8>
    8c80:	468b      	mov	fp, r1
    8c82:	9312      	str	r3, [sp, #72]	; 0x48
    8c84:	06a3      	lsls	r3, r4, #26
    8c86:	d400      	bmi.n	8c8a <_svfprintf_r+0x676>
    8c88:	e6ed      	b.n	8a66 <_svfprintf_r+0x452>
    8c8a:	2207      	movs	r2, #7
    8c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8c8e:	3307      	adds	r3, #7
    8c90:	4393      	bics	r3, r2
    8c92:	3201      	adds	r2, #1
    8c94:	4694      	mov	ip, r2
    8c96:	449c      	add	ip, r3
    8c98:	4662      	mov	r2, ip
    8c9a:	920f      	str	r2, [sp, #60]	; 0x3c
    8c9c:	681a      	ldr	r2, [r3, #0]
    8c9e:	685b      	ldr	r3, [r3, #4]
    8ca0:	0011      	movs	r1, r2
    8ca2:	001a      	movs	r2, r3
    8ca4:	0008      	movs	r0, r1
    8ca6:	4310      	orrs	r0, r2
    8ca8:	910c      	str	r1, [sp, #48]	; 0x30
    8caa:	920d      	str	r2, [sp, #52]	; 0x34
    8cac:	2301      	movs	r3, #1
    8cae:	0002      	movs	r2, r0
    8cb0:	e699      	b.n	89e6 <_svfprintf_r+0x3d2>
    8cb2:	468b      	mov	fp, r1
    8cb4:	9312      	str	r3, [sp, #72]	; 0x48
    8cb6:	06a3      	lsls	r3, r4, #26
    8cb8:	d400      	bmi.n	8cbc <_svfprintf_r+0x6a8>
    8cba:	e683      	b.n	89c4 <_svfprintf_r+0x3b0>
    8cbc:	2207      	movs	r2, #7
    8cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    8cc0:	3307      	adds	r3, #7
    8cc2:	4393      	bics	r3, r2
    8cc4:	3201      	adds	r2, #1
    8cc6:	4694      	mov	ip, r2
    8cc8:	449c      	add	ip, r3
    8cca:	4662      	mov	r2, ip
    8ccc:	920f      	str	r2, [sp, #60]	; 0x3c
    8cce:	681a      	ldr	r2, [r3, #0]
    8cd0:	685b      	ldr	r3, [r3, #4]
    8cd2:	0011      	movs	r1, r2
    8cd4:	001a      	movs	r2, r3
    8cd6:	0008      	movs	r0, r1
    8cd8:	4310      	orrs	r0, r2
    8cda:	910c      	str	r1, [sp, #48]	; 0x30
    8cdc:	920d      	str	r2, [sp, #52]	; 0x34
    8cde:	2300      	movs	r3, #0
    8ce0:	0002      	movs	r2, r0
    8ce2:	e680      	b.n	89e6 <_svfprintf_r+0x3d2>
    8ce4:	468b      	mov	fp, r1
    8ce6:	4641      	mov	r1, r8
    8ce8:	9312      	str	r3, [sp, #72]	; 0x48
    8cea:	2900      	cmp	r1, #0
    8cec:	d001      	beq.n	8cf2 <_svfprintf_r+0x6de>
    8cee:	f000 ff7f 	bl	9bf0 <_svfprintf_r+0x15dc>
    8cf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8cf4:	2b00      	cmp	r3, #0
    8cf6:	d100      	bne.n	8cfa <_svfprintf_r+0x6e6>
    8cf8:	e50b      	b.n	8712 <_svfprintf_r+0xfe>
    8cfa:	ad28      	add	r5, sp, #160	; 0xa0
    8cfc:	702b      	strb	r3, [r5, #0]
    8cfe:	2300      	movs	r3, #0
    8d00:	aa16      	add	r2, sp, #88	; 0x58
    8d02:	77d3      	strb	r3, [r2, #31]
    8d04:	9408      	str	r4, [sp, #32]
    8d06:	e74e      	b.n	8ba6 <_svfprintf_r+0x592>
    8d08:	68bc      	ldr	r4, [r7, #8]
    8d0a:	4643      	mov	r3, r8
    8d0c:	2b00      	cmp	r3, #0
    8d0e:	d00f      	beq.n	8d30 <_svfprintf_r+0x71c>
    8d10:	aa16      	add	r2, sp, #88	; 0x58
    8d12:	231f      	movs	r3, #31
    8d14:	4694      	mov	ip, r2
    8d16:	4463      	add	r3, ip
    8d18:	6033      	str	r3, [r6, #0]
    8d1a:	2301      	movs	r3, #1
    8d1c:	6073      	str	r3, [r6, #4]
    8d1e:	687b      	ldr	r3, [r7, #4]
    8d20:	3401      	adds	r4, #1
    8d22:	3301      	adds	r3, #1
    8d24:	60bc      	str	r4, [r7, #8]
    8d26:	607b      	str	r3, [r7, #4]
    8d28:	2b07      	cmp	r3, #7
    8d2a:	dd00      	ble.n	8d2e <_svfprintf_r+0x71a>
    8d2c:	e1b3      	b.n	9096 <_svfprintf_r+0xa82>
    8d2e:	3608      	adds	r6, #8
    8d30:	464b      	mov	r3, r9
    8d32:	2b00      	cmp	r3, #0
    8d34:	d00c      	beq.n	8d50 <_svfprintf_r+0x73c>
    8d36:	ab1e      	add	r3, sp, #120	; 0x78
    8d38:	6033      	str	r3, [r6, #0]
    8d3a:	2302      	movs	r3, #2
    8d3c:	6073      	str	r3, [r6, #4]
    8d3e:	687b      	ldr	r3, [r7, #4]
    8d40:	3402      	adds	r4, #2
    8d42:	3301      	adds	r3, #1
    8d44:	60bc      	str	r4, [r7, #8]
    8d46:	607b      	str	r3, [r7, #4]
    8d48:	2b07      	cmp	r3, #7
    8d4a:	dd00      	ble.n	8d4e <_svfprintf_r+0x73a>
    8d4c:	e1af      	b.n	90ae <_svfprintf_r+0xa9a>
    8d4e:	3608      	adds	r6, #8
    8d50:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8d52:	2b80      	cmp	r3, #128	; 0x80
    8d54:	d100      	bne.n	8d58 <_svfprintf_r+0x744>
    8d56:	e120      	b.n	8f9a <_svfprintf_r+0x986>
    8d58:	4653      	mov	r3, sl
    8d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8d5c:	1a9d      	subs	r5, r3, r2
    8d5e:	2d00      	cmp	r5, #0
    8d60:	dd3c      	ble.n	8ddc <_svfprintf_r+0x7c8>
    8d62:	4a08      	ldr	r2, [pc, #32]	; (8d84 <_svfprintf_r+0x770>)
    8d64:	687b      	ldr	r3, [r7, #4]
    8d66:	4691      	mov	r9, r2
    8d68:	2d10      	cmp	r5, #16
    8d6a:	dd2c      	ble.n	8dc6 <_svfprintf_r+0x7b2>
    8d6c:	2210      	movs	r2, #16
    8d6e:	0021      	movs	r1, r4
    8d70:	4692      	mov	sl, r2
    8d72:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8d74:	0032      	movs	r2, r6
    8d76:	002e      	movs	r6, r5
    8d78:	464d      	mov	r5, r9
    8d7a:	e009      	b.n	8d90 <_svfprintf_r+0x77c>
    8d7c:	00011ed4 	.word	0x00011ed4
    8d80:	00011ee8 	.word	0x00011ee8
    8d84:	00011f18 	.word	0x00011f18
    8d88:	3e10      	subs	r6, #16
    8d8a:	3208      	adds	r2, #8
    8d8c:	2e10      	cmp	r6, #16
    8d8e:	dd16      	ble.n	8dbe <_svfprintf_r+0x7aa>
    8d90:	4650      	mov	r0, sl
    8d92:	3110      	adds	r1, #16
    8d94:	3301      	adds	r3, #1
    8d96:	6015      	str	r5, [r2, #0]
    8d98:	6050      	str	r0, [r2, #4]
    8d9a:	60b9      	str	r1, [r7, #8]
    8d9c:	607b      	str	r3, [r7, #4]
    8d9e:	2b07      	cmp	r3, #7
    8da0:	ddf2      	ble.n	8d88 <_svfprintf_r+0x774>
    8da2:	003a      	movs	r2, r7
    8da4:	9906      	ldr	r1, [sp, #24]
    8da6:	0020      	movs	r0, r4
    8da8:	f005 faa4 	bl	e2f4 <__ssprint_r>
    8dac:	2800      	cmp	r0, #0
    8dae:	d000      	beq.n	8db2 <_svfprintf_r+0x79e>
    8db0:	e4b7      	b.n	8722 <_svfprintf_r+0x10e>
    8db2:	3e10      	subs	r6, #16
    8db4:	68b9      	ldr	r1, [r7, #8]
    8db6:	687b      	ldr	r3, [r7, #4]
    8db8:	aa32      	add	r2, sp, #200	; 0xc8
    8dba:	2e10      	cmp	r6, #16
    8dbc:	dce8      	bgt.n	8d90 <_svfprintf_r+0x77c>
    8dbe:	46a9      	mov	r9, r5
    8dc0:	000c      	movs	r4, r1
    8dc2:	0035      	movs	r5, r6
    8dc4:	0016      	movs	r6, r2
    8dc6:	464a      	mov	r2, r9
    8dc8:	1964      	adds	r4, r4, r5
    8dca:	3301      	adds	r3, #1
    8dcc:	6032      	str	r2, [r6, #0]
    8dce:	6075      	str	r5, [r6, #4]
    8dd0:	60bc      	str	r4, [r7, #8]
    8dd2:	607b      	str	r3, [r7, #4]
    8dd4:	2b07      	cmp	r3, #7
    8dd6:	dd00      	ble.n	8dda <_svfprintf_r+0x7c6>
    8dd8:	e151      	b.n	907e <_svfprintf_r+0xa6a>
    8dda:	3608      	adds	r6, #8
    8ddc:	9b08      	ldr	r3, [sp, #32]
    8dde:	05db      	lsls	r3, r3, #23
    8de0:	d500      	bpl.n	8de4 <_svfprintf_r+0x7d0>
    8de2:	e0b6      	b.n	8f52 <_svfprintf_r+0x93e>
    8de4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8de6:	6033      	str	r3, [r6, #0]
    8de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8dea:	469c      	mov	ip, r3
    8dec:	6073      	str	r3, [r6, #4]
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	4464      	add	r4, ip
    8df2:	3301      	adds	r3, #1
    8df4:	60bc      	str	r4, [r7, #8]
    8df6:	607b      	str	r3, [r7, #4]
    8df8:	2b07      	cmp	r3, #7
    8dfa:	dd00      	ble.n	8dfe <_svfprintf_r+0x7ea>
    8dfc:	e09d      	b.n	8f3a <_svfprintf_r+0x926>
    8dfe:	3608      	adds	r6, #8
    8e00:	9b08      	ldr	r3, [sp, #32]
    8e02:	075b      	lsls	r3, r3, #29
    8e04:	d541      	bpl.n	8e8a <_svfprintf_r+0x876>
    8e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e08:	9a07      	ldr	r2, [sp, #28]
    8e0a:	1a9d      	subs	r5, r3, r2
    8e0c:	2d00      	cmp	r5, #0
    8e0e:	dd3c      	ble.n	8e8a <_svfprintf_r+0x876>
    8e10:	4ac4      	ldr	r2, [pc, #784]	; (9124 <_svfprintf_r+0xb10>)
    8e12:	687b      	ldr	r3, [r7, #4]
    8e14:	4690      	mov	r8, r2
    8e16:	2d10      	cmp	r5, #16
    8e18:	dd26      	ble.n	8e68 <_svfprintf_r+0x854>
    8e1a:	2210      	movs	r2, #16
    8e1c:	0021      	movs	r1, r4
    8e1e:	4691      	mov	r9, r2
    8e20:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8e22:	0032      	movs	r2, r6
    8e24:	002e      	movs	r6, r5
    8e26:	9d06      	ldr	r5, [sp, #24]
    8e28:	e003      	b.n	8e32 <_svfprintf_r+0x81e>
    8e2a:	3e10      	subs	r6, #16
    8e2c:	3208      	adds	r2, #8
    8e2e:	2e10      	cmp	r6, #16
    8e30:	dd17      	ble.n	8e62 <_svfprintf_r+0x84e>
    8e32:	48bc      	ldr	r0, [pc, #752]	; (9124 <_svfprintf_r+0xb10>)
    8e34:	3110      	adds	r1, #16
    8e36:	6010      	str	r0, [r2, #0]
    8e38:	4648      	mov	r0, r9
    8e3a:	3301      	adds	r3, #1
    8e3c:	6050      	str	r0, [r2, #4]
    8e3e:	60b9      	str	r1, [r7, #8]
    8e40:	607b      	str	r3, [r7, #4]
    8e42:	2b07      	cmp	r3, #7
    8e44:	ddf1      	ble.n	8e2a <_svfprintf_r+0x816>
    8e46:	003a      	movs	r2, r7
    8e48:	0029      	movs	r1, r5
    8e4a:	0020      	movs	r0, r4
    8e4c:	f005 fa52 	bl	e2f4 <__ssprint_r>
    8e50:	2800      	cmp	r0, #0
    8e52:	d000      	beq.n	8e56 <_svfprintf_r+0x842>
    8e54:	e465      	b.n	8722 <_svfprintf_r+0x10e>
    8e56:	3e10      	subs	r6, #16
    8e58:	68b9      	ldr	r1, [r7, #8]
    8e5a:	687b      	ldr	r3, [r7, #4]
    8e5c:	aa32      	add	r2, sp, #200	; 0xc8
    8e5e:	2e10      	cmp	r6, #16
    8e60:	dce7      	bgt.n	8e32 <_svfprintf_r+0x81e>
    8e62:	0035      	movs	r5, r6
    8e64:	000c      	movs	r4, r1
    8e66:	0016      	movs	r6, r2
    8e68:	4642      	mov	r2, r8
    8e6a:	1964      	adds	r4, r4, r5
    8e6c:	3301      	adds	r3, #1
    8e6e:	c624      	stmia	r6!, {r2, r5}
    8e70:	60bc      	str	r4, [r7, #8]
    8e72:	607b      	str	r3, [r7, #4]
    8e74:	2b07      	cmp	r3, #7
    8e76:	dd08      	ble.n	8e8a <_svfprintf_r+0x876>
    8e78:	003a      	movs	r2, r7
    8e7a:	9906      	ldr	r1, [sp, #24]
    8e7c:	9809      	ldr	r0, [sp, #36]	; 0x24
    8e7e:	f005 fa39 	bl	e2f4 <__ssprint_r>
    8e82:	2800      	cmp	r0, #0
    8e84:	d000      	beq.n	8e88 <_svfprintf_r+0x874>
    8e86:	e44c      	b.n	8722 <_svfprintf_r+0x10e>
    8e88:	68bc      	ldr	r4, [r7, #8]
    8e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8e8c:	9907      	ldr	r1, [sp, #28]
    8e8e:	428b      	cmp	r3, r1
    8e90:	da00      	bge.n	8e94 <_svfprintf_r+0x880>
    8e92:	000b      	movs	r3, r1
    8e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8e96:	4694      	mov	ip, r2
    8e98:	449c      	add	ip, r3
    8e9a:	4663      	mov	r3, ip
    8e9c:	930a      	str	r3, [sp, #40]	; 0x28
    8e9e:	2c00      	cmp	r4, #0
    8ea0:	d000      	beq.n	8ea4 <_svfprintf_r+0x890>
    8ea2:	e0d6      	b.n	9052 <_svfprintf_r+0xa3e>
    8ea4:	2300      	movs	r3, #0
    8ea6:	ae32      	add	r6, sp, #200	; 0xc8
    8ea8:	607b      	str	r3, [r7, #4]
    8eaa:	f7ff fbde 	bl	866a <_svfprintf_r+0x56>
    8eae:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8eb0:	2b01      	cmp	r3, #1
    8eb2:	dc00      	bgt.n	8eb6 <_svfprintf_r+0x8a2>
    8eb4:	e0ae      	b.n	9014 <_svfprintf_r+0xa00>
    8eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    8eb8:	3401      	adds	r4, #1
    8eba:	6033      	str	r3, [r6, #0]
    8ebc:	2301      	movs	r3, #1
    8ebe:	6073      	str	r3, [r6, #4]
    8ec0:	687b      	ldr	r3, [r7, #4]
    8ec2:	60bc      	str	r4, [r7, #8]
    8ec4:	3301      	adds	r3, #1
    8ec6:	607b      	str	r3, [r7, #4]
    8ec8:	2b07      	cmp	r3, #7
    8eca:	dd00      	ble.n	8ece <_svfprintf_r+0x8ba>
    8ecc:	e2df      	b.n	948e <_svfprintf_r+0xe7a>
    8ece:	3608      	adds	r6, #8
    8ed0:	9a19      	ldr	r2, [sp, #100]	; 0x64
    8ed2:	3301      	adds	r3, #1
    8ed4:	6032      	str	r2, [r6, #0]
    8ed6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8ed8:	4698      	mov	r8, r3
    8eda:	4694      	mov	ip, r2
    8edc:	4464      	add	r4, ip
    8ede:	6072      	str	r2, [r6, #4]
    8ee0:	60bc      	str	r4, [r7, #8]
    8ee2:	607b      	str	r3, [r7, #4]
    8ee4:	2b07      	cmp	r3, #7
    8ee6:	dd00      	ble.n	8eea <_svfprintf_r+0x8d6>
    8ee8:	e2de      	b.n	94a8 <_svfprintf_r+0xe94>
    8eea:	3608      	adds	r6, #8
    8eec:	2200      	movs	r2, #0
    8eee:	2300      	movs	r3, #0
    8ef0:	9816      	ldr	r0, [sp, #88]	; 0x58
    8ef2:	9915      	ldr	r1, [sp, #84]	; 0x54
    8ef4:	f7fe fcb6 	bl	7864 <__aeabi_dcmpeq>
    8ef8:	2800      	cmp	r0, #0
    8efa:	d000      	beq.n	8efe <_svfprintf_r+0x8ea>
    8efc:	e1a4      	b.n	9248 <_svfprintf_r+0xc34>
    8efe:	9d11      	ldr	r5, [sp, #68]	; 0x44
    8f00:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8f02:	3501      	adds	r5, #1
    8f04:	3b01      	subs	r3, #1
    8f06:	6035      	str	r5, [r6, #0]
    8f08:	6073      	str	r3, [r6, #4]
    8f0a:	18e4      	adds	r4, r4, r3
    8f0c:	2301      	movs	r3, #1
    8f0e:	469c      	mov	ip, r3
    8f10:	44e0      	add	r8, ip
    8f12:	4643      	mov	r3, r8
    8f14:	60bc      	str	r4, [r7, #8]
    8f16:	607b      	str	r3, [r7, #4]
    8f18:	2b07      	cmp	r3, #7
    8f1a:	dd00      	ble.n	8f1e <_svfprintf_r+0x90a>
    8f1c:	e08b      	b.n	9036 <_svfprintf_r+0xa22>
    8f1e:	3608      	adds	r6, #8
    8f20:	ab21      	add	r3, sp, #132	; 0x84
    8f22:	6033      	str	r3, [r6, #0]
    8f24:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    8f26:	469c      	mov	ip, r3
    8f28:	6073      	str	r3, [r6, #4]
    8f2a:	4643      	mov	r3, r8
    8f2c:	4464      	add	r4, ip
    8f2e:	3301      	adds	r3, #1
    8f30:	60bc      	str	r4, [r7, #8]
    8f32:	607b      	str	r3, [r7, #4]
    8f34:	2b07      	cmp	r3, #7
    8f36:	dc00      	bgt.n	8f3a <_svfprintf_r+0x926>
    8f38:	e761      	b.n	8dfe <_svfprintf_r+0x7ea>
    8f3a:	003a      	movs	r2, r7
    8f3c:	9906      	ldr	r1, [sp, #24]
    8f3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f40:	f005 f9d8 	bl	e2f4 <__ssprint_r>
    8f44:	2800      	cmp	r0, #0
    8f46:	d001      	beq.n	8f4c <_svfprintf_r+0x938>
    8f48:	f7ff fbeb 	bl	8722 <_svfprintf_r+0x10e>
    8f4c:	68bc      	ldr	r4, [r7, #8]
    8f4e:	ae32      	add	r6, sp, #200	; 0xc8
    8f50:	e756      	b.n	8e00 <_svfprintf_r+0x7ec>
    8f52:	9b12      	ldr	r3, [sp, #72]	; 0x48
    8f54:	2b65      	cmp	r3, #101	; 0x65
    8f56:	ddaa      	ble.n	8eae <_svfprintf_r+0x89a>
    8f58:	2200      	movs	r2, #0
    8f5a:	2300      	movs	r3, #0
    8f5c:	9816      	ldr	r0, [sp, #88]	; 0x58
    8f5e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8f60:	f7fe fc80 	bl	7864 <__aeabi_dcmpeq>
    8f64:	2800      	cmp	r0, #0
    8f66:	d100      	bne.n	8f6a <_svfprintf_r+0x956>
    8f68:	e0e2      	b.n	9130 <_svfprintf_r+0xb1c>
    8f6a:	4b6f      	ldr	r3, [pc, #444]	; (9128 <_svfprintf_r+0xb14>)
    8f6c:	3401      	adds	r4, #1
    8f6e:	6033      	str	r3, [r6, #0]
    8f70:	2301      	movs	r3, #1
    8f72:	6073      	str	r3, [r6, #4]
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	60bc      	str	r4, [r7, #8]
    8f78:	3301      	adds	r3, #1
    8f7a:	607b      	str	r3, [r7, #4]
    8f7c:	2b07      	cmp	r3, #7
    8f7e:	dd00      	ble.n	8f82 <_svfprintf_r+0x96e>
    8f80:	e366      	b.n	9650 <_svfprintf_r+0x103c>
    8f82:	3608      	adds	r6, #8
    8f84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8f86:	9a14      	ldr	r2, [sp, #80]	; 0x50
    8f88:	4293      	cmp	r3, r2
    8f8a:	da00      	bge.n	8f8e <_svfprintf_r+0x97a>
    8f8c:	e1a4      	b.n	92d8 <_svfprintf_r+0xcc4>
    8f8e:	9b08      	ldr	r3, [sp, #32]
    8f90:	07db      	lsls	r3, r3, #31
    8f92:	d500      	bpl.n	8f96 <_svfprintf_r+0x982>
    8f94:	e1a0      	b.n	92d8 <_svfprintf_r+0xcc4>
    8f96:	68bc      	ldr	r4, [r7, #8]
    8f98:	e732      	b.n	8e00 <_svfprintf_r+0x7ec>
    8f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8f9c:	9a07      	ldr	r2, [sp, #28]
    8f9e:	1a9d      	subs	r5, r3, r2
    8fa0:	2d00      	cmp	r5, #0
    8fa2:	dc00      	bgt.n	8fa6 <_svfprintf_r+0x992>
    8fa4:	e6d8      	b.n	8d58 <_svfprintf_r+0x744>
    8fa6:	4a61      	ldr	r2, [pc, #388]	; (912c <_svfprintf_r+0xb18>)
    8fa8:	687b      	ldr	r3, [r7, #4]
    8faa:	4691      	mov	r9, r2
    8fac:	2d10      	cmp	r5, #16
    8fae:	dd25      	ble.n	8ffc <_svfprintf_r+0x9e8>
    8fb0:	2210      	movs	r2, #16
    8fb2:	0021      	movs	r1, r4
    8fb4:	4690      	mov	r8, r2
    8fb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    8fb8:	0032      	movs	r2, r6
    8fba:	464e      	mov	r6, r9
    8fbc:	e003      	b.n	8fc6 <_svfprintf_r+0x9b2>
    8fbe:	3d10      	subs	r5, #16
    8fc0:	3208      	adds	r2, #8
    8fc2:	2d10      	cmp	r5, #16
    8fc4:	dd17      	ble.n	8ff6 <_svfprintf_r+0x9e2>
    8fc6:	4640      	mov	r0, r8
    8fc8:	3110      	adds	r1, #16
    8fca:	3301      	adds	r3, #1
    8fcc:	6016      	str	r6, [r2, #0]
    8fce:	6050      	str	r0, [r2, #4]
    8fd0:	60b9      	str	r1, [r7, #8]
    8fd2:	607b      	str	r3, [r7, #4]
    8fd4:	2b07      	cmp	r3, #7
    8fd6:	ddf2      	ble.n	8fbe <_svfprintf_r+0x9aa>
    8fd8:	003a      	movs	r2, r7
    8fda:	9906      	ldr	r1, [sp, #24]
    8fdc:	0020      	movs	r0, r4
    8fde:	f005 f989 	bl	e2f4 <__ssprint_r>
    8fe2:	2800      	cmp	r0, #0
    8fe4:	d001      	beq.n	8fea <_svfprintf_r+0x9d6>
    8fe6:	f7ff fb9c 	bl	8722 <_svfprintf_r+0x10e>
    8fea:	3d10      	subs	r5, #16
    8fec:	68b9      	ldr	r1, [r7, #8]
    8fee:	687b      	ldr	r3, [r7, #4]
    8ff0:	aa32      	add	r2, sp, #200	; 0xc8
    8ff2:	2d10      	cmp	r5, #16
    8ff4:	dce7      	bgt.n	8fc6 <_svfprintf_r+0x9b2>
    8ff6:	46b1      	mov	r9, r6
    8ff8:	000c      	movs	r4, r1
    8ffa:	0016      	movs	r6, r2
    8ffc:	464a      	mov	r2, r9
    8ffe:	1964      	adds	r4, r4, r5
    9000:	3301      	adds	r3, #1
    9002:	6032      	str	r2, [r6, #0]
    9004:	6075      	str	r5, [r6, #4]
    9006:	60bc      	str	r4, [r7, #8]
    9008:	607b      	str	r3, [r7, #4]
    900a:	2b07      	cmp	r3, #7
    900c:	dd00      	ble.n	9010 <_svfprintf_r+0x9fc>
    900e:	e27e      	b.n	950e <_svfprintf_r+0xefa>
    9010:	3608      	adds	r6, #8
    9012:	e6a1      	b.n	8d58 <_svfprintf_r+0x744>
    9014:	2301      	movs	r3, #1
    9016:	9a08      	ldr	r2, [sp, #32]
    9018:	4213      	tst	r3, r2
    901a:	d000      	beq.n	901e <_svfprintf_r+0xa0a>
    901c:	e74b      	b.n	8eb6 <_svfprintf_r+0x8a2>
    901e:	6073      	str	r3, [r6, #4]
    9020:	687b      	ldr	r3, [r7, #4]
    9022:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9024:	3301      	adds	r3, #1
    9026:	3401      	adds	r4, #1
    9028:	6032      	str	r2, [r6, #0]
    902a:	60bc      	str	r4, [r7, #8]
    902c:	4698      	mov	r8, r3
    902e:	607b      	str	r3, [r7, #4]
    9030:	2b07      	cmp	r3, #7
    9032:	dc00      	bgt.n	9036 <_svfprintf_r+0xa22>
    9034:	e773      	b.n	8f1e <_svfprintf_r+0x90a>
    9036:	003a      	movs	r2, r7
    9038:	9906      	ldr	r1, [sp, #24]
    903a:	9809      	ldr	r0, [sp, #36]	; 0x24
    903c:	f005 f95a 	bl	e2f4 <__ssprint_r>
    9040:	2800      	cmp	r0, #0
    9042:	d001      	beq.n	9048 <_svfprintf_r+0xa34>
    9044:	f7ff fb6d 	bl	8722 <_svfprintf_r+0x10e>
    9048:	687b      	ldr	r3, [r7, #4]
    904a:	68bc      	ldr	r4, [r7, #8]
    904c:	4698      	mov	r8, r3
    904e:	ae32      	add	r6, sp, #200	; 0xc8
    9050:	e766      	b.n	8f20 <_svfprintf_r+0x90c>
    9052:	003a      	movs	r2, r7
    9054:	9906      	ldr	r1, [sp, #24]
    9056:	9809      	ldr	r0, [sp, #36]	; 0x24
    9058:	f005 f94c 	bl	e2f4 <__ssprint_r>
    905c:	2800      	cmp	r0, #0
    905e:	d100      	bne.n	9062 <_svfprintf_r+0xa4e>
    9060:	e720      	b.n	8ea4 <_svfprintf_r+0x890>
    9062:	f7ff fb5e 	bl	8722 <_svfprintf_r+0x10e>
    9066:	9c08      	ldr	r4, [sp, #32]
    9068:	2b01      	cmp	r3, #1
    906a:	d100      	bne.n	906e <_svfprintf_r+0xa5a>
    906c:	e184      	b.n	9378 <_svfprintf_r+0xd64>
    906e:	2b02      	cmp	r3, #2
    9070:	d129      	bne.n	90c6 <_svfprintf_r+0xab2>
    9072:	9408      	str	r4, [sp, #32]
    9074:	2300      	movs	r3, #0
    9076:	2400      	movs	r4, #0
    9078:	930c      	str	r3, [sp, #48]	; 0x30
    907a:	940d      	str	r4, [sp, #52]	; 0x34
    907c:	e4c5      	b.n	8a0a <_svfprintf_r+0x3f6>
    907e:	003a      	movs	r2, r7
    9080:	9906      	ldr	r1, [sp, #24]
    9082:	9809      	ldr	r0, [sp, #36]	; 0x24
    9084:	f005 f936 	bl	e2f4 <__ssprint_r>
    9088:	2800      	cmp	r0, #0
    908a:	d001      	beq.n	9090 <_svfprintf_r+0xa7c>
    908c:	f7ff fb49 	bl	8722 <_svfprintf_r+0x10e>
    9090:	68bc      	ldr	r4, [r7, #8]
    9092:	ae32      	add	r6, sp, #200	; 0xc8
    9094:	e6a2      	b.n	8ddc <_svfprintf_r+0x7c8>
    9096:	003a      	movs	r2, r7
    9098:	9906      	ldr	r1, [sp, #24]
    909a:	9809      	ldr	r0, [sp, #36]	; 0x24
    909c:	f005 f92a 	bl	e2f4 <__ssprint_r>
    90a0:	2800      	cmp	r0, #0
    90a2:	d001      	beq.n	90a8 <_svfprintf_r+0xa94>
    90a4:	f7ff fb3d 	bl	8722 <_svfprintf_r+0x10e>
    90a8:	68bc      	ldr	r4, [r7, #8]
    90aa:	ae32      	add	r6, sp, #200	; 0xc8
    90ac:	e640      	b.n	8d30 <_svfprintf_r+0x71c>
    90ae:	003a      	movs	r2, r7
    90b0:	9906      	ldr	r1, [sp, #24]
    90b2:	9809      	ldr	r0, [sp, #36]	; 0x24
    90b4:	f005 f91e 	bl	e2f4 <__ssprint_r>
    90b8:	2800      	cmp	r0, #0
    90ba:	d001      	beq.n	90c0 <_svfprintf_r+0xaac>
    90bc:	f7ff fb31 	bl	8722 <_svfprintf_r+0x10e>
    90c0:	68bc      	ldr	r4, [r7, #8]
    90c2:	ae32      	add	r6, sp, #200	; 0xc8
    90c4:	e644      	b.n	8d50 <_svfprintf_r+0x73c>
    90c6:	9408      	str	r4, [sp, #32]
    90c8:	2300      	movs	r3, #0
    90ca:	2400      	movs	r4, #0
    90cc:	930c      	str	r3, [sp, #48]	; 0x30
    90ce:	940d      	str	r4, [sp, #52]	; 0x34
    90d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    90d2:	990d      	ldr	r1, [sp, #52]	; 0x34
    90d4:	465b      	mov	r3, fp
    90d6:	aa32      	add	r2, sp, #200	; 0xc8
    90d8:	9307      	str	r3, [sp, #28]
    90da:	4691      	mov	r9, r2
    90dc:	46b3      	mov	fp, r6
    90de:	e000      	b.n	90e2 <_svfprintf_r+0xace>
    90e0:	46a1      	mov	r9, r4
    90e2:	074a      	lsls	r2, r1, #29
    90e4:	4694      	mov	ip, r2
    90e6:	464b      	mov	r3, r9
    90e8:	4665      	mov	r5, ip
    90ea:	1e5c      	subs	r4, r3, #1
    90ec:	08c6      	lsrs	r6, r0, #3
    90ee:	2307      	movs	r3, #7
    90f0:	08ca      	lsrs	r2, r1, #3
    90f2:	4335      	orrs	r5, r6
    90f4:	0011      	movs	r1, r2
    90f6:	002a      	movs	r2, r5
    90f8:	4003      	ands	r3, r0
    90fa:	3330      	adds	r3, #48	; 0x30
    90fc:	7023      	strb	r3, [r4, #0]
    90fe:	0028      	movs	r0, r5
    9100:	430a      	orrs	r2, r1
    9102:	d1ed      	bne.n	90e0 <_svfprintf_r+0xacc>
    9104:	900c      	str	r0, [sp, #48]	; 0x30
    9106:	910d      	str	r1, [sp, #52]	; 0x34
    9108:	9907      	ldr	r1, [sp, #28]
    910a:	465e      	mov	r6, fp
    910c:	468b      	mov	fp, r1
    910e:	9908      	ldr	r1, [sp, #32]
    9110:	464a      	mov	r2, r9
    9112:	9411      	str	r4, [sp, #68]	; 0x44
    9114:	07c9      	lsls	r1, r1, #31
    9116:	d500      	bpl.n	911a <_svfprintf_r+0xb06>
    9118:	e13d      	b.n	9396 <_svfprintf_r+0xd82>
    911a:	ab32      	add	r3, sp, #200	; 0xc8
    911c:	1b1b      	subs	r3, r3, r4
    911e:	930e      	str	r3, [sp, #56]	; 0x38
    9120:	f7ff fb88 	bl	8834 <_svfprintf_r+0x220>
    9124:	00011f08 	.word	0x00011f08
    9128:	00011f04 	.word	0x00011f04
    912c:	00011f18 	.word	0x00011f18
    9130:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9132:	2800      	cmp	r0, #0
    9134:	dc00      	bgt.n	9138 <_svfprintf_r+0xb24>
    9136:	e296      	b.n	9666 <_svfprintf_r+0x1052>
    9138:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    913a:	9914      	ldr	r1, [sp, #80]	; 0x50
    913c:	0013      	movs	r3, r2
    913e:	4690      	mov	r8, r2
    9140:	428b      	cmp	r3, r1
    9142:	dd00      	ble.n	9146 <_svfprintf_r+0xb32>
    9144:	4688      	mov	r8, r1
    9146:	4643      	mov	r3, r8
    9148:	2b00      	cmp	r3, #0
    914a:	dd0c      	ble.n	9166 <_svfprintf_r+0xb52>
    914c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    914e:	4444      	add	r4, r8
    9150:	6033      	str	r3, [r6, #0]
    9152:	4643      	mov	r3, r8
    9154:	6073      	str	r3, [r6, #4]
    9156:	687b      	ldr	r3, [r7, #4]
    9158:	60bc      	str	r4, [r7, #8]
    915a:	3301      	adds	r3, #1
    915c:	607b      	str	r3, [r7, #4]
    915e:	2b07      	cmp	r3, #7
    9160:	dd00      	ble.n	9164 <_svfprintf_r+0xb50>
    9162:	e3b7      	b.n	98d4 <_svfprintf_r+0x12c0>
    9164:	3608      	adds	r6, #8
    9166:	4643      	mov	r3, r8
    9168:	43db      	mvns	r3, r3
    916a:	4642      	mov	r2, r8
    916c:	17db      	asrs	r3, r3, #31
    916e:	4013      	ands	r3, r2
    9170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9172:	1ad3      	subs	r3, r2, r3
    9174:	4698      	mov	r8, r3
    9176:	2b00      	cmp	r3, #0
    9178:	dc00      	bgt.n	917c <_svfprintf_r+0xb68>
    917a:	e128      	b.n	93ce <_svfprintf_r+0xdba>
    917c:	2b10      	cmp	r3, #16
    917e:	dc01      	bgt.n	9184 <_svfprintf_r+0xb70>
    9180:	f000 fce7 	bl	9b52 <_svfprintf_r+0x153e>
    9184:	4acf      	ldr	r2, [pc, #828]	; (94c4 <_svfprintf_r+0xeb0>)
    9186:	0021      	movs	r1, r4
    9188:	4691      	mov	r9, r2
    918a:	2210      	movs	r2, #16
    918c:	687b      	ldr	r3, [r7, #4]
    918e:	4692      	mov	sl, r2
    9190:	9d09      	ldr	r5, [sp, #36]	; 0x24
    9192:	0032      	movs	r2, r6
    9194:	464c      	mov	r4, r9
    9196:	4646      	mov	r6, r8
    9198:	e004      	b.n	91a4 <_svfprintf_r+0xb90>
    919a:	3208      	adds	r2, #8
    919c:	3e10      	subs	r6, #16
    919e:	2e10      	cmp	r6, #16
    91a0:	dc00      	bgt.n	91a4 <_svfprintf_r+0xb90>
    91a2:	e104      	b.n	93ae <_svfprintf_r+0xd9a>
    91a4:	4650      	mov	r0, sl
    91a6:	3110      	adds	r1, #16
    91a8:	3301      	adds	r3, #1
    91aa:	6014      	str	r4, [r2, #0]
    91ac:	6050      	str	r0, [r2, #4]
    91ae:	60b9      	str	r1, [r7, #8]
    91b0:	607b      	str	r3, [r7, #4]
    91b2:	2b07      	cmp	r3, #7
    91b4:	ddf1      	ble.n	919a <_svfprintf_r+0xb86>
    91b6:	003a      	movs	r2, r7
    91b8:	9906      	ldr	r1, [sp, #24]
    91ba:	0028      	movs	r0, r5
    91bc:	f005 f89a 	bl	e2f4 <__ssprint_r>
    91c0:	2800      	cmp	r0, #0
    91c2:	d001      	beq.n	91c8 <_svfprintf_r+0xbb4>
    91c4:	f7ff faad 	bl	8722 <_svfprintf_r+0x10e>
    91c8:	68b9      	ldr	r1, [r7, #8]
    91ca:	687b      	ldr	r3, [r7, #4]
    91cc:	aa32      	add	r2, sp, #200	; 0xc8
    91ce:	e7e5      	b.n	919c <_svfprintf_r+0xb88>
    91d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    91d2:	2b00      	cmp	r3, #0
    91d4:	d100      	bne.n	91d8 <_svfprintf_r+0xbc4>
    91d6:	e0ca      	b.n	936e <_svfprintf_r+0xd5a>
    91d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    91da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    91dc:	ab32      	add	r3, sp, #200	; 0xc8
    91de:	46b1      	mov	r9, r6
    91e0:	001e      	movs	r6, r3
    91e2:	0020      	movs	r0, r4
    91e4:	0029      	movs	r1, r5
    91e6:	220a      	movs	r2, #10
    91e8:	2300      	movs	r3, #0
    91ea:	f7fc fbff 	bl	59ec <__aeabi_uldivmod>
    91ee:	3e01      	subs	r6, #1
    91f0:	3230      	adds	r2, #48	; 0x30
    91f2:	7032      	strb	r2, [r6, #0]
    91f4:	2300      	movs	r3, #0
    91f6:	0020      	movs	r0, r4
    91f8:	0029      	movs	r1, r5
    91fa:	220a      	movs	r2, #10
    91fc:	f7fc fbf6 	bl	59ec <__aeabi_uldivmod>
    9200:	0003      	movs	r3, r0
    9202:	0004      	movs	r4, r0
    9204:	000d      	movs	r5, r1
    9206:	430b      	orrs	r3, r1
    9208:	d1eb      	bne.n	91e2 <_svfprintf_r+0xbce>
    920a:	0032      	movs	r2, r6
    920c:	ab32      	add	r3, sp, #200	; 0xc8
    920e:	1a9b      	subs	r3, r3, r2
    9210:	9611      	str	r6, [sp, #68]	; 0x44
    9212:	940c      	str	r4, [sp, #48]	; 0x30
    9214:	950d      	str	r5, [sp, #52]	; 0x34
    9216:	464e      	mov	r6, r9
    9218:	930e      	str	r3, [sp, #56]	; 0x38
    921a:	f7ff fb0b 	bl	8834 <_svfprintf_r+0x220>
    921e:	2300      	movs	r3, #0
    9220:	930e      	str	r3, [sp, #56]	; 0x38
    9222:	ab32      	add	r3, sp, #200	; 0xc8
    9224:	9311      	str	r3, [sp, #68]	; 0x44
    9226:	f7ff fb05 	bl	8834 <_svfprintf_r+0x220>
    922a:	003a      	movs	r2, r7
    922c:	9906      	ldr	r1, [sp, #24]
    922e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9230:	f005 f860 	bl	e2f4 <__ssprint_r>
    9234:	2800      	cmp	r0, #0
    9236:	d001      	beq.n	923c <_svfprintf_r+0xc28>
    9238:	f7ff fa73 	bl	8722 <_svfprintf_r+0x10e>
    923c:	ab16      	add	r3, sp, #88	; 0x58
    923e:	7fdb      	ldrb	r3, [r3, #31]
    9240:	68bc      	ldr	r4, [r7, #8]
    9242:	4698      	mov	r8, r3
    9244:	ae32      	add	r6, sp, #200	; 0xc8
    9246:	e560      	b.n	8d0a <_svfprintf_r+0x6f6>
    9248:	9b14      	ldr	r3, [sp, #80]	; 0x50
    924a:	1e5d      	subs	r5, r3, #1
    924c:	2d00      	cmp	r5, #0
    924e:	dc00      	bgt.n	9252 <_svfprintf_r+0xc3e>
    9250:	e666      	b.n	8f20 <_svfprintf_r+0x90c>
    9252:	4b9c      	ldr	r3, [pc, #624]	; (94c4 <_svfprintf_r+0xeb0>)
    9254:	4699      	mov	r9, r3
    9256:	2d10      	cmp	r5, #16
    9258:	dd29      	ble.n	92ae <_svfprintf_r+0xc9a>
    925a:	2310      	movs	r3, #16
    925c:	0032      	movs	r2, r6
    925e:	469a      	mov	sl, r3
    9260:	002e      	movs	r6, r5
    9262:	0021      	movs	r1, r4
    9264:	4643      	mov	r3, r8
    9266:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9268:	464d      	mov	r5, r9
    926a:	e003      	b.n	9274 <_svfprintf_r+0xc60>
    926c:	3e10      	subs	r6, #16
    926e:	3208      	adds	r2, #8
    9270:	2e10      	cmp	r6, #16
    9272:	dd17      	ble.n	92a4 <_svfprintf_r+0xc90>
    9274:	4650      	mov	r0, sl
    9276:	3110      	adds	r1, #16
    9278:	3301      	adds	r3, #1
    927a:	6015      	str	r5, [r2, #0]
    927c:	6050      	str	r0, [r2, #4]
    927e:	60b9      	str	r1, [r7, #8]
    9280:	607b      	str	r3, [r7, #4]
    9282:	2b07      	cmp	r3, #7
    9284:	ddf2      	ble.n	926c <_svfprintf_r+0xc58>
    9286:	003a      	movs	r2, r7
    9288:	9906      	ldr	r1, [sp, #24]
    928a:	0020      	movs	r0, r4
    928c:	f005 f832 	bl	e2f4 <__ssprint_r>
    9290:	2800      	cmp	r0, #0
    9292:	d001      	beq.n	9298 <_svfprintf_r+0xc84>
    9294:	f7ff fa45 	bl	8722 <_svfprintf_r+0x10e>
    9298:	3e10      	subs	r6, #16
    929a:	68b9      	ldr	r1, [r7, #8]
    929c:	687b      	ldr	r3, [r7, #4]
    929e:	aa32      	add	r2, sp, #200	; 0xc8
    92a0:	2e10      	cmp	r6, #16
    92a2:	dce7      	bgt.n	9274 <_svfprintf_r+0xc60>
    92a4:	46a9      	mov	r9, r5
    92a6:	000c      	movs	r4, r1
    92a8:	0035      	movs	r5, r6
    92aa:	4698      	mov	r8, r3
    92ac:	0016      	movs	r6, r2
    92ae:	464b      	mov	r3, r9
    92b0:	6075      	str	r5, [r6, #4]
    92b2:	6033      	str	r3, [r6, #0]
    92b4:	1964      	adds	r4, r4, r5
    92b6:	e629      	b.n	8f0c <_svfprintf_r+0x8f8>
    92b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    92ba:	681a      	ldr	r2, [r3, #0]
    92bc:	f7ff fbfb 	bl	8ab6 <_svfprintf_r+0x4a2>
    92c0:	6813      	ldr	r3, [r2, #0]
    92c2:	9307      	str	r3, [sp, #28]
    92c4:	f7ff fa82 	bl	87cc <_svfprintf_r+0x1b8>
    92c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    92ca:	681a      	ldr	r2, [r3, #0]
    92cc:	f7ff fb84 	bl	89d8 <_svfprintf_r+0x3c4>
    92d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    92d2:	681a      	ldr	r2, [r3, #0]
    92d4:	f7ff fbd1 	bl	8a7a <_svfprintf_r+0x466>
    92d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    92da:	68ba      	ldr	r2, [r7, #8]
    92dc:	6033      	str	r3, [r6, #0]
    92de:	9b18      	ldr	r3, [sp, #96]	; 0x60
    92e0:	469c      	mov	ip, r3
    92e2:	6073      	str	r3, [r6, #4]
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	4462      	add	r2, ip
    92e8:	3301      	adds	r3, #1
    92ea:	0014      	movs	r4, r2
    92ec:	60ba      	str	r2, [r7, #8]
    92ee:	607b      	str	r3, [r7, #4]
    92f0:	2b07      	cmp	r3, #7
    92f2:	dd00      	ble.n	92f6 <_svfprintf_r+0xce2>
    92f4:	e202      	b.n	96fc <_svfprintf_r+0x10e8>
    92f6:	3608      	adds	r6, #8
    92f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    92fa:	1e5d      	subs	r5, r3, #1
    92fc:	2d00      	cmp	r5, #0
    92fe:	dc00      	bgt.n	9302 <_svfprintf_r+0xcee>
    9300:	e57e      	b.n	8e00 <_svfprintf_r+0x7ec>
    9302:	4a70      	ldr	r2, [pc, #448]	; (94c4 <_svfprintf_r+0xeb0>)
    9304:	687b      	ldr	r3, [r7, #4]
    9306:	4691      	mov	r9, r2
    9308:	2d10      	cmp	r5, #16
    930a:	dd25      	ble.n	9358 <_svfprintf_r+0xd44>
    930c:	2210      	movs	r2, #16
    930e:	0021      	movs	r1, r4
    9310:	4690      	mov	r8, r2
    9312:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9314:	0032      	movs	r2, r6
    9316:	002e      	movs	r6, r5
    9318:	464d      	mov	r5, r9
    931a:	e003      	b.n	9324 <_svfprintf_r+0xd10>
    931c:	3208      	adds	r2, #8
    931e:	3e10      	subs	r6, #16
    9320:	2e10      	cmp	r6, #16
    9322:	dd15      	ble.n	9350 <_svfprintf_r+0xd3c>
    9324:	4640      	mov	r0, r8
    9326:	3110      	adds	r1, #16
    9328:	3301      	adds	r3, #1
    932a:	6015      	str	r5, [r2, #0]
    932c:	6050      	str	r0, [r2, #4]
    932e:	60b9      	str	r1, [r7, #8]
    9330:	607b      	str	r3, [r7, #4]
    9332:	2b07      	cmp	r3, #7
    9334:	ddf2      	ble.n	931c <_svfprintf_r+0xd08>
    9336:	003a      	movs	r2, r7
    9338:	9906      	ldr	r1, [sp, #24]
    933a:	0020      	movs	r0, r4
    933c:	f004 ffda 	bl	e2f4 <__ssprint_r>
    9340:	2800      	cmp	r0, #0
    9342:	d001      	beq.n	9348 <_svfprintf_r+0xd34>
    9344:	f7ff f9ed 	bl	8722 <_svfprintf_r+0x10e>
    9348:	68b9      	ldr	r1, [r7, #8]
    934a:	687b      	ldr	r3, [r7, #4]
    934c:	aa32      	add	r2, sp, #200	; 0xc8
    934e:	e7e6      	b.n	931e <_svfprintf_r+0xd0a>
    9350:	46a9      	mov	r9, r5
    9352:	000c      	movs	r4, r1
    9354:	0035      	movs	r5, r6
    9356:	0016      	movs	r6, r2
    9358:	464a      	mov	r2, r9
    935a:	1964      	adds	r4, r4, r5
    935c:	3301      	adds	r3, #1
    935e:	6032      	str	r2, [r6, #0]
    9360:	6075      	str	r5, [r6, #4]
    9362:	60bc      	str	r4, [r7, #8]
    9364:	607b      	str	r3, [r7, #4]
    9366:	2b07      	cmp	r3, #7
    9368:	dc00      	bgt.n	936c <_svfprintf_r+0xd58>
    936a:	e548      	b.n	8dfe <_svfprintf_r+0x7ea>
    936c:	e5e5      	b.n	8f3a <_svfprintf_r+0x926>
    936e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    9370:	2b09      	cmp	r3, #9
    9372:	d900      	bls.n	9376 <_svfprintf_r+0xd62>
    9374:	e730      	b.n	91d8 <_svfprintf_r+0xbc4>
    9376:	9c08      	ldr	r4, [sp, #32]
    9378:	2227      	movs	r2, #39	; 0x27
    937a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    937c:	a928      	add	r1, sp, #160	; 0xa0
    937e:	3330      	adds	r3, #48	; 0x30
    9380:	548b      	strb	r3, [r1, r2]
    9382:	2301      	movs	r3, #1
    9384:	aa16      	add	r2, sp, #88	; 0x58
    9386:	4694      	mov	ip, r2
    9388:	930e      	str	r3, [sp, #56]	; 0x38
    938a:	336e      	adds	r3, #110	; 0x6e
    938c:	4463      	add	r3, ip
    938e:	9408      	str	r4, [sp, #32]
    9390:	9311      	str	r3, [sp, #68]	; 0x44
    9392:	f7ff fa4f 	bl	8834 <_svfprintf_r+0x220>
    9396:	2b30      	cmp	r3, #48	; 0x30
    9398:	d100      	bne.n	939c <_svfprintf_r+0xd88>
    939a:	e20b      	b.n	97b4 <_svfprintf_r+0x11a0>
    939c:	2330      	movs	r3, #48	; 0x30
    939e:	3a02      	subs	r2, #2
    93a0:	7013      	strb	r3, [r2, #0]
    93a2:	ab32      	add	r3, sp, #200	; 0xc8
    93a4:	1a9b      	subs	r3, r3, r2
    93a6:	930e      	str	r3, [sp, #56]	; 0x38
    93a8:	9211      	str	r2, [sp, #68]	; 0x44
    93aa:	f7ff fa43 	bl	8834 <_svfprintf_r+0x220>
    93ae:	46b0      	mov	r8, r6
    93b0:	46a1      	mov	r9, r4
    93b2:	0016      	movs	r6, r2
    93b4:	000c      	movs	r4, r1
    93b6:	464a      	mov	r2, r9
    93b8:	6032      	str	r2, [r6, #0]
    93ba:	4642      	mov	r2, r8
    93bc:	4444      	add	r4, r8
    93be:	3301      	adds	r3, #1
    93c0:	6072      	str	r2, [r6, #4]
    93c2:	60bc      	str	r4, [r7, #8]
    93c4:	607b      	str	r3, [r7, #4]
    93c6:	2b07      	cmp	r3, #7
    93c8:	dd00      	ble.n	93cc <_svfprintf_r+0xdb8>
    93ca:	e29c      	b.n	9906 <_svfprintf_r+0x12f2>
    93cc:	3608      	adds	r6, #8
    93ce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    93d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    93d2:	4293      	cmp	r3, r2
    93d4:	db4c      	blt.n	9470 <_svfprintf_r+0xe5c>
    93d6:	9a08      	ldr	r2, [sp, #32]
    93d8:	07d2      	lsls	r2, r2, #31
    93da:	d449      	bmi.n	9470 <_svfprintf_r+0xe5c>
    93dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    93de:	9913      	ldr	r1, [sp, #76]	; 0x4c
    93e0:	1ad3      	subs	r3, r2, r3
    93e2:	1a52      	subs	r2, r2, r1
    93e4:	4690      	mov	r8, r2
    93e6:	429a      	cmp	r2, r3
    93e8:	dd00      	ble.n	93ec <_svfprintf_r+0xdd8>
    93ea:	4698      	mov	r8, r3
    93ec:	4642      	mov	r2, r8
    93ee:	2a00      	cmp	r2, #0
    93f0:	dd0f      	ble.n	9412 <_svfprintf_r+0xdfe>
    93f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    93f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    93f6:	468c      	mov	ip, r1
    93f8:	4462      	add	r2, ip
    93fa:	6032      	str	r2, [r6, #0]
    93fc:	4642      	mov	r2, r8
    93fe:	6072      	str	r2, [r6, #4]
    9400:	687a      	ldr	r2, [r7, #4]
    9402:	4444      	add	r4, r8
    9404:	3201      	adds	r2, #1
    9406:	60bc      	str	r4, [r7, #8]
    9408:	607a      	str	r2, [r7, #4]
    940a:	2a07      	cmp	r2, #7
    940c:	dd00      	ble.n	9410 <_svfprintf_r+0xdfc>
    940e:	e286      	b.n	991e <_svfprintf_r+0x130a>
    9410:	3608      	adds	r6, #8
    9412:	4642      	mov	r2, r8
    9414:	43d5      	mvns	r5, r2
    9416:	17ed      	asrs	r5, r5, #31
    9418:	4015      	ands	r5, r2
    941a:	1b5d      	subs	r5, r3, r5
    941c:	2d00      	cmp	r5, #0
    941e:	dc00      	bgt.n	9422 <_svfprintf_r+0xe0e>
    9420:	e4ee      	b.n	8e00 <_svfprintf_r+0x7ec>
    9422:	4a28      	ldr	r2, [pc, #160]	; (94c4 <_svfprintf_r+0xeb0>)
    9424:	687b      	ldr	r3, [r7, #4]
    9426:	4691      	mov	r9, r2
    9428:	2d10      	cmp	r5, #16
    942a:	dd95      	ble.n	9358 <_svfprintf_r+0xd44>
    942c:	2210      	movs	r2, #16
    942e:	0021      	movs	r1, r4
    9430:	4690      	mov	r8, r2
    9432:	9c09      	ldr	r4, [sp, #36]	; 0x24
    9434:	0032      	movs	r2, r6
    9436:	002e      	movs	r6, r5
    9438:	464d      	mov	r5, r9
    943a:	e003      	b.n	9444 <_svfprintf_r+0xe30>
    943c:	3208      	adds	r2, #8
    943e:	3e10      	subs	r6, #16
    9440:	2e10      	cmp	r6, #16
    9442:	dd85      	ble.n	9350 <_svfprintf_r+0xd3c>
    9444:	4640      	mov	r0, r8
    9446:	3110      	adds	r1, #16
    9448:	3301      	adds	r3, #1
    944a:	6015      	str	r5, [r2, #0]
    944c:	6050      	str	r0, [r2, #4]
    944e:	60b9      	str	r1, [r7, #8]
    9450:	607b      	str	r3, [r7, #4]
    9452:	2b07      	cmp	r3, #7
    9454:	ddf2      	ble.n	943c <_svfprintf_r+0xe28>
    9456:	003a      	movs	r2, r7
    9458:	9906      	ldr	r1, [sp, #24]
    945a:	0020      	movs	r0, r4
    945c:	f004 ff4a 	bl	e2f4 <__ssprint_r>
    9460:	2800      	cmp	r0, #0
    9462:	d001      	beq.n	9468 <_svfprintf_r+0xe54>
    9464:	f7ff f95d 	bl	8722 <_svfprintf_r+0x10e>
    9468:	68b9      	ldr	r1, [r7, #8]
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	aa32      	add	r2, sp, #200	; 0xc8
    946e:	e7e6      	b.n	943e <_svfprintf_r+0xe2a>
    9470:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9472:	6032      	str	r2, [r6, #0]
    9474:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9476:	4694      	mov	ip, r2
    9478:	6072      	str	r2, [r6, #4]
    947a:	687a      	ldr	r2, [r7, #4]
    947c:	4464      	add	r4, ip
    947e:	3201      	adds	r2, #1
    9480:	60bc      	str	r4, [r7, #8]
    9482:	607a      	str	r2, [r7, #4]
    9484:	2a07      	cmp	r2, #7
    9486:	dd00      	ble.n	948a <_svfprintf_r+0xe76>
    9488:	e230      	b.n	98ec <_svfprintf_r+0x12d8>
    948a:	3608      	adds	r6, #8
    948c:	e7a6      	b.n	93dc <_svfprintf_r+0xdc8>
    948e:	003a      	movs	r2, r7
    9490:	9906      	ldr	r1, [sp, #24]
    9492:	9809      	ldr	r0, [sp, #36]	; 0x24
    9494:	f004 ff2e 	bl	e2f4 <__ssprint_r>
    9498:	2800      	cmp	r0, #0
    949a:	d001      	beq.n	94a0 <_svfprintf_r+0xe8c>
    949c:	f7ff f941 	bl	8722 <_svfprintf_r+0x10e>
    94a0:	68bc      	ldr	r4, [r7, #8]
    94a2:	687b      	ldr	r3, [r7, #4]
    94a4:	ae32      	add	r6, sp, #200	; 0xc8
    94a6:	e513      	b.n	8ed0 <_svfprintf_r+0x8bc>
    94a8:	003a      	movs	r2, r7
    94aa:	9906      	ldr	r1, [sp, #24]
    94ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    94ae:	f004 ff21 	bl	e2f4 <__ssprint_r>
    94b2:	2800      	cmp	r0, #0
    94b4:	d001      	beq.n	94ba <_svfprintf_r+0xea6>
    94b6:	f7ff f934 	bl	8722 <_svfprintf_r+0x10e>
    94ba:	687b      	ldr	r3, [r7, #4]
    94bc:	68bc      	ldr	r4, [r7, #8]
    94be:	4698      	mov	r8, r3
    94c0:	ae32      	add	r6, sp, #200	; 0xc8
    94c2:	e513      	b.n	8eec <_svfprintf_r+0x8d8>
    94c4:	00011f18 	.word	0x00011f18
    94c8:	2307      	movs	r3, #7
    94ca:	3207      	adds	r2, #7
    94cc:	439a      	bics	r2, r3
    94ce:	3301      	adds	r3, #1
    94d0:	469c      	mov	ip, r3
    94d2:	4494      	add	ip, r2
    94d4:	4663      	mov	r3, ip
    94d6:	930f      	str	r3, [sp, #60]	; 0x3c
    94d8:	6853      	ldr	r3, [r2, #4]
    94da:	6812      	ldr	r2, [r2, #0]
    94dc:	930d      	str	r3, [sp, #52]	; 0x34
    94de:	920c      	str	r2, [sp, #48]	; 0x30
    94e0:	2b00      	cmp	r3, #0
    94e2:	db01      	blt.n	94e8 <_svfprintf_r+0xed4>
    94e4:	f7ff f97a 	bl	87dc <_svfprintf_r+0x1c8>
    94e8:	980c      	ldr	r0, [sp, #48]	; 0x30
    94ea:	990d      	ldr	r1, [sp, #52]	; 0x34
    94ec:	2300      	movs	r3, #0
    94ee:	4242      	negs	r2, r0
    94f0:	418b      	sbcs	r3, r1
    94f2:	0011      	movs	r1, r2
    94f4:	001a      	movs	r2, r3
    94f6:	232d      	movs	r3, #45	; 0x2d
    94f8:	a816      	add	r0, sp, #88	; 0x58
    94fa:	77c3      	strb	r3, [r0, #31]
    94fc:	0008      	movs	r0, r1
    94fe:	4310      	orrs	r0, r2
    9500:	910c      	str	r1, [sp, #48]	; 0x30
    9502:	920d      	str	r2, [sp, #52]	; 0x34
    9504:	4698      	mov	r8, r3
    9506:	0002      	movs	r2, r0
    9508:	3b2c      	subs	r3, #44	; 0x2c
    950a:	f7ff f970 	bl	87ee <_svfprintf_r+0x1da>
    950e:	003a      	movs	r2, r7
    9510:	9906      	ldr	r1, [sp, #24]
    9512:	9809      	ldr	r0, [sp, #36]	; 0x24
    9514:	f004 feee 	bl	e2f4 <__ssprint_r>
    9518:	2800      	cmp	r0, #0
    951a:	d001      	beq.n	9520 <_svfprintf_r+0xf0c>
    951c:	f7ff f901 	bl	8722 <_svfprintf_r+0x10e>
    9520:	68bc      	ldr	r4, [r7, #8]
    9522:	ae32      	add	r6, sp, #200	; 0xc8
    9524:	e418      	b.n	8d58 <_svfprintf_r+0x744>
    9526:	9916      	ldr	r1, [sp, #88]	; 0x58
    9528:	9d15      	ldr	r5, [sp, #84]	; 0x54
    952a:	000a      	movs	r2, r1
    952c:	0008      	movs	r0, r1
    952e:	002b      	movs	r3, r5
    9530:	0029      	movs	r1, r5
    9532:	f005 ff3b 	bl	f3ac <__aeabi_dcmpun>
    9536:	2800      	cmp	r0, #0
    9538:	d000      	beq.n	953c <_svfprintf_r+0xf28>
    953a:	e2e6      	b.n	9b0a <_svfprintf_r+0x14f6>
    953c:	4653      	mov	r3, sl
    953e:	3301      	adds	r3, #1
    9540:	d100      	bne.n	9544 <_svfprintf_r+0xf30>
    9542:	e20d      	b.n	9960 <_svfprintf_r+0x134c>
    9544:	2320      	movs	r3, #32
    9546:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9548:	439a      	bics	r2, r3
    954a:	920e      	str	r2, [sp, #56]	; 0x38
    954c:	2a47      	cmp	r2, #71	; 0x47
    954e:	d100      	bne.n	9552 <_svfprintf_r+0xf3e>
    9550:	e11c      	b.n	978c <_svfprintf_r+0x1178>
    9552:	2380      	movs	r3, #128	; 0x80
    9554:	005b      	lsls	r3, r3, #1
    9556:	4323      	orrs	r3, r4
    9558:	9308      	str	r3, [sp, #32]
    955a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    955c:	2b00      	cmp	r3, #0
    955e:	da00      	bge.n	9562 <_svfprintf_r+0xf4e>
    9560:	e221      	b.n	99a6 <_svfprintf_r+0x1392>
    9562:	9a16      	ldr	r2, [sp, #88]	; 0x58
    9564:	9307      	str	r3, [sp, #28]
    9566:	2300      	movs	r3, #0
    9568:	4691      	mov	r9, r2
    956a:	9310      	str	r3, [sp, #64]	; 0x40
    956c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    956e:	2b66      	cmp	r3, #102	; 0x66
    9570:	d100      	bne.n	9574 <_svfprintf_r+0xf60>
    9572:	e1fc      	b.n	996e <_svfprintf_r+0x135a>
    9574:	2b46      	cmp	r3, #70	; 0x46
    9576:	d100      	bne.n	957a <_svfprintf_r+0xf66>
    9578:	e0db      	b.n	9732 <_svfprintf_r+0x111e>
    957a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    957c:	9809      	ldr	r0, [sp, #36]	; 0x24
    957e:	3a45      	subs	r2, #69	; 0x45
    9580:	0013      	movs	r3, r2
    9582:	4259      	negs	r1, r3
    9584:	4159      	adcs	r1, r3
    9586:	ab20      	add	r3, sp, #128	; 0x80
    9588:	000d      	movs	r5, r1
    958a:	9303      	str	r3, [sp, #12]
    958c:	ab1f      	add	r3, sp, #124	; 0x7c
    958e:	9302      	str	r3, [sp, #8]
    9590:	2302      	movs	r3, #2
    9592:	aa23      	add	r2, sp, #140	; 0x8c
    9594:	4455      	add	r5, sl
    9596:	921b      	str	r2, [sp, #108]	; 0x6c
    9598:	9204      	str	r2, [sp, #16]
    959a:	9300      	str	r3, [sp, #0]
    959c:	9501      	str	r5, [sp, #4]
    959e:	9b07      	ldr	r3, [sp, #28]
    95a0:	464a      	mov	r2, r9
    95a2:	f001 fae1 	bl	ab68 <_dtoa_r>
    95a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    95a8:	9011      	str	r0, [sp, #68]	; 0x44
    95aa:	2b67      	cmp	r3, #103	; 0x67
    95ac:	d000      	beq.n	95b0 <_svfprintf_r+0xf9c>
    95ae:	e239      	b.n	9a24 <_svfprintf_r+0x1410>
    95b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    95b2:	4698      	mov	r8, r3
    95b4:	44a8      	add	r8, r5
    95b6:	07e3      	lsls	r3, r4, #31
    95b8:	d400      	bmi.n	95bc <_svfprintf_r+0xfa8>
    95ba:	e28b      	b.n	9ad4 <_svfprintf_r+0x14c0>
    95bc:	2300      	movs	r3, #0
    95be:	2200      	movs	r2, #0
    95c0:	4648      	mov	r0, r9
    95c2:	9907      	ldr	r1, [sp, #28]
    95c4:	f7fe f94e 	bl	7864 <__aeabi_dcmpeq>
    95c8:	4643      	mov	r3, r8
    95ca:	2800      	cmp	r0, #0
    95cc:	d10a      	bne.n	95e4 <_svfprintf_r+0xfd0>
    95ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    95d0:	4543      	cmp	r3, r8
    95d2:	d207      	bcs.n	95e4 <_svfprintf_r+0xfd0>
    95d4:	2130      	movs	r1, #48	; 0x30
    95d6:	4640      	mov	r0, r8
    95d8:	1c5a      	adds	r2, r3, #1
    95da:	9223      	str	r2, [sp, #140]	; 0x8c
    95dc:	7019      	strb	r1, [r3, #0]
    95de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    95e0:	4298      	cmp	r0, r3
    95e2:	d8f9      	bhi.n	95d8 <_svfprintf_r+0xfc4>
    95e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    95e6:	1a9b      	subs	r3, r3, r2
    95e8:	9314      	str	r3, [sp, #80]	; 0x50
    95ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    95ec:	2b47      	cmp	r3, #71	; 0x47
    95ee:	d100      	bne.n	95f2 <_svfprintf_r+0xfde>
    95f0:	e0f6      	b.n	97e0 <_svfprintf_r+0x11cc>
    95f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    95f4:	2b65      	cmp	r3, #101	; 0x65
    95f6:	dc00      	bgt.n	95fa <_svfprintf_r+0xfe6>
    95f8:	e226      	b.n	9a48 <_svfprintf_r+0x1434>
    95fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    95fc:	2b66      	cmp	r3, #102	; 0x66
    95fe:	d100      	bne.n	9602 <_svfprintf_r+0xfee>
    9600:	e1f4      	b.n	99ec <_svfprintf_r+0x13d8>
    9602:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9604:	9313      	str	r3, [sp, #76]	; 0x4c
    9606:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    960a:	0019      	movs	r1, r3
    960c:	4291      	cmp	r1, r2
    960e:	dd00      	ble.n	9612 <_svfprintf_r+0xffe>
    9610:	e1d4      	b.n	99bc <_svfprintf_r+0x13a8>
    9612:	07e3      	lsls	r3, r4, #31
    9614:	d500      	bpl.n	9618 <_svfprintf_r+0x1004>
    9616:	e249      	b.n	9aac <_svfprintf_r+0x1498>
    9618:	43d3      	mvns	r3, r2
    961a:	17db      	asrs	r3, r3, #31
    961c:	0011      	movs	r1, r2
    961e:	401a      	ands	r2, r3
    9620:	2367      	movs	r3, #103	; 0x67
    9622:	9207      	str	r2, [sp, #28]
    9624:	910e      	str	r1, [sp, #56]	; 0x38
    9626:	9312      	str	r3, [sp, #72]	; 0x48
    9628:	9b10      	ldr	r3, [sp, #64]	; 0x40
    962a:	2b00      	cmp	r3, #0
    962c:	d000      	beq.n	9630 <_svfprintf_r+0x101c>
    962e:	e0cf      	b.n	97d0 <_svfprintf_r+0x11bc>
    9630:	ab16      	add	r3, sp, #88	; 0x58
    9632:	7fdb      	ldrb	r3, [r3, #31]
    9634:	4698      	mov	r8, r3
    9636:	2300      	movs	r3, #0
    9638:	469a      	mov	sl, r3
    963a:	f7ff f903 	bl	8844 <_svfprintf_r+0x230>
    963e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9640:	990a      	ldr	r1, [sp, #40]	; 0x28
    9642:	6813      	ldr	r3, [r2, #0]
    9644:	6019      	str	r1, [r3, #0]
    9646:	0013      	movs	r3, r2
    9648:	3304      	adds	r3, #4
    964a:	930f      	str	r3, [sp, #60]	; 0x3c
    964c:	f7ff f80d 	bl	866a <_svfprintf_r+0x56>
    9650:	003a      	movs	r2, r7
    9652:	9906      	ldr	r1, [sp, #24]
    9654:	9809      	ldr	r0, [sp, #36]	; 0x24
    9656:	f004 fe4d 	bl	e2f4 <__ssprint_r>
    965a:	2800      	cmp	r0, #0
    965c:	d001      	beq.n	9662 <_svfprintf_r+0x104e>
    965e:	f7ff f860 	bl	8722 <_svfprintf_r+0x10e>
    9662:	ae32      	add	r6, sp, #200	; 0xc8
    9664:	e48e      	b.n	8f84 <_svfprintf_r+0x970>
    9666:	4bde      	ldr	r3, [pc, #888]	; (99e0 <_svfprintf_r+0x13cc>)
    9668:	3401      	adds	r4, #1
    966a:	6033      	str	r3, [r6, #0]
    966c:	2301      	movs	r3, #1
    966e:	6073      	str	r3, [r6, #4]
    9670:	687b      	ldr	r3, [r7, #4]
    9672:	60bc      	str	r4, [r7, #8]
    9674:	3301      	adds	r3, #1
    9676:	607b      	str	r3, [r7, #4]
    9678:	2b07      	cmp	r3, #7
    967a:	dc7a      	bgt.n	9772 <_svfprintf_r+0x115e>
    967c:	3608      	adds	r6, #8
    967e:	2800      	cmp	r0, #0
    9680:	d107      	bne.n	9692 <_svfprintf_r+0x107e>
    9682:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9684:	2b00      	cmp	r3, #0
    9686:	d104      	bne.n	9692 <_svfprintf_r+0x107e>
    9688:	9b08      	ldr	r3, [sp, #32]
    968a:	07db      	lsls	r3, r3, #31
    968c:	d401      	bmi.n	9692 <_svfprintf_r+0x107e>
    968e:	f7ff fbb7 	bl	8e00 <_svfprintf_r+0x7ec>
    9692:	9b19      	ldr	r3, [sp, #100]	; 0x64
    9694:	6033      	str	r3, [r6, #0]
    9696:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9698:	1919      	adds	r1, r3, r4
    969a:	6073      	str	r3, [r6, #4]
    969c:	687b      	ldr	r3, [r7, #4]
    969e:	60b9      	str	r1, [r7, #8]
    96a0:	3301      	adds	r3, #1
    96a2:	607b      	str	r3, [r7, #4]
    96a4:	2b07      	cmp	r3, #7
    96a6:	dd00      	ble.n	96aa <_svfprintf_r+0x1096>
    96a8:	e1f2      	b.n	9a90 <_svfprintf_r+0x147c>
    96aa:	0032      	movs	r2, r6
    96ac:	3208      	adds	r2, #8
    96ae:	2800      	cmp	r0, #0
    96b0:	da00      	bge.n	96b4 <_svfprintf_r+0x10a0>
    96b2:	e1cc      	b.n	9a4e <_svfprintf_r+0x143a>
    96b4:	9811      	ldr	r0, [sp, #68]	; 0x44
    96b6:	3301      	adds	r3, #1
    96b8:	6010      	str	r0, [r2, #0]
    96ba:	9814      	ldr	r0, [sp, #80]	; 0x50
    96bc:	607b      	str	r3, [r7, #4]
    96be:	1844      	adds	r4, r0, r1
    96c0:	6050      	str	r0, [r2, #4]
    96c2:	60bc      	str	r4, [r7, #8]
    96c4:	2b07      	cmp	r3, #7
    96c6:	dd00      	ble.n	96ca <_svfprintf_r+0x10b6>
    96c8:	e437      	b.n	8f3a <_svfprintf_r+0x926>
    96ca:	3208      	adds	r2, #8
    96cc:	0016      	movs	r6, r2
    96ce:	f7ff fb97 	bl	8e00 <_svfprintf_r+0x7ec>
    96d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    96d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    96d6:	680b      	ldr	r3, [r1, #0]
    96d8:	601a      	str	r2, [r3, #0]
    96da:	17d2      	asrs	r2, r2, #31
    96dc:	605a      	str	r2, [r3, #4]
    96de:	000b      	movs	r3, r1
    96e0:	3304      	adds	r3, #4
    96e2:	930f      	str	r3, [sp, #60]	; 0x3c
    96e4:	f7fe ffc1 	bl	866a <_svfprintf_r+0x56>
    96e8:	464b      	mov	r3, r9
    96ea:	3101      	adds	r1, #1
    96ec:	431c      	orrs	r4, r3
    96ee:	780b      	ldrb	r3, [r1, #0]
    96f0:	f7fe fff4 	bl	86dc <_svfprintf_r+0xc8>
    96f4:	4bbb      	ldr	r3, [pc, #748]	; (99e4 <_svfprintf_r+0x13d0>)
    96f6:	9311      	str	r3, [sp, #68]	; 0x44
    96f8:	f7ff f937 	bl	896a <_svfprintf_r+0x356>
    96fc:	003a      	movs	r2, r7
    96fe:	9906      	ldr	r1, [sp, #24]
    9700:	9809      	ldr	r0, [sp, #36]	; 0x24
    9702:	f004 fdf7 	bl	e2f4 <__ssprint_r>
    9706:	2800      	cmp	r0, #0
    9708:	d001      	beq.n	970e <_svfprintf_r+0x10fa>
    970a:	f7ff f80a 	bl	8722 <_svfprintf_r+0x10e>
    970e:	68bc      	ldr	r4, [r7, #8]
    9710:	ae32      	add	r6, sp, #200	; 0xc8
    9712:	e5f1      	b.n	92f8 <_svfprintf_r+0xce4>
    9714:	2140      	movs	r1, #64	; 0x40
    9716:	9809      	ldr	r0, [sp, #36]	; 0x24
    9718:	f002 fb74 	bl	be04 <_malloc_r>
    971c:	9b06      	ldr	r3, [sp, #24]
    971e:	6018      	str	r0, [r3, #0]
    9720:	6118      	str	r0, [r3, #16]
    9722:	2800      	cmp	r0, #0
    9724:	d100      	bne.n	9728 <_svfprintf_r+0x1114>
    9726:	e24f      	b.n	9bc8 <_svfprintf_r+0x15b4>
    9728:	2340      	movs	r3, #64	; 0x40
    972a:	9a06      	ldr	r2, [sp, #24]
    972c:	6153      	str	r3, [r2, #20]
    972e:	f7fe ff8e 	bl	864e <_svfprintf_r+0x3a>
    9732:	ab23      	add	r3, sp, #140	; 0x8c
    9734:	931b      	str	r3, [sp, #108]	; 0x6c
    9736:	9304      	str	r3, [sp, #16]
    9738:	ab20      	add	r3, sp, #128	; 0x80
    973a:	9303      	str	r3, [sp, #12]
    973c:	ab1f      	add	r3, sp, #124	; 0x7c
    973e:	9302      	str	r3, [sp, #8]
    9740:	4653      	mov	r3, sl
    9742:	9301      	str	r3, [sp, #4]
    9744:	2303      	movs	r3, #3
    9746:	464a      	mov	r2, r9
    9748:	9300      	str	r3, [sp, #0]
    974a:	9809      	ldr	r0, [sp, #36]	; 0x24
    974c:	9b07      	ldr	r3, [sp, #28]
    974e:	f001 fa0b 	bl	ab68 <_dtoa_r>
    9752:	4655      	mov	r5, sl
    9754:	9011      	str	r0, [sp, #68]	; 0x44
    9756:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9758:	4698      	mov	r8, r3
    975a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    975c:	44a8      	add	r8, r5
    975e:	2b46      	cmp	r3, #70	; 0x46
    9760:	d000      	beq.n	9764 <_svfprintf_r+0x1150>
    9762:	e72b      	b.n	95bc <_svfprintf_r+0xfa8>
    9764:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9766:	781b      	ldrb	r3, [r3, #0]
    9768:	2b30      	cmp	r3, #48	; 0x30
    976a:	d016      	beq.n	979a <_svfprintf_r+0x1186>
    976c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    976e:	4498      	add	r8, r3
    9770:	e724      	b.n	95bc <_svfprintf_r+0xfa8>
    9772:	003a      	movs	r2, r7
    9774:	9906      	ldr	r1, [sp, #24]
    9776:	9809      	ldr	r0, [sp, #36]	; 0x24
    9778:	f004 fdbc 	bl	e2f4 <__ssprint_r>
    977c:	2800      	cmp	r0, #0
    977e:	d001      	beq.n	9784 <_svfprintf_r+0x1170>
    9780:	f7fe ffcf 	bl	8722 <_svfprintf_r+0x10e>
    9784:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9786:	68bc      	ldr	r4, [r7, #8]
    9788:	ae32      	add	r6, sp, #200	; 0xc8
    978a:	e778      	b.n	967e <_svfprintf_r+0x106a>
    978c:	4653      	mov	r3, sl
    978e:	2b00      	cmp	r3, #0
    9790:	d000      	beq.n	9794 <_svfprintf_r+0x1180>
    9792:	e6de      	b.n	9552 <_svfprintf_r+0xf3e>
    9794:	3301      	adds	r3, #1
    9796:	469a      	mov	sl, r3
    9798:	e6db      	b.n	9552 <_svfprintf_r+0xf3e>
    979a:	2200      	movs	r2, #0
    979c:	2300      	movs	r3, #0
    979e:	4648      	mov	r0, r9
    97a0:	9907      	ldr	r1, [sp, #28]
    97a2:	f7fe f85f 	bl	7864 <__aeabi_dcmpeq>
    97a6:	2800      	cmp	r0, #0
    97a8:	d1e0      	bne.n	976c <_svfprintf_r+0x1158>
    97aa:	2301      	movs	r3, #1
    97ac:	1b5b      	subs	r3, r3, r5
    97ae:	931f      	str	r3, [sp, #124]	; 0x7c
    97b0:	4498      	add	r8, r3
    97b2:	e703      	b.n	95bc <_svfprintf_r+0xfa8>
    97b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    97b6:	ab32      	add	r3, sp, #200	; 0xc8
    97b8:	1a9b      	subs	r3, r3, r2
    97ba:	930e      	str	r3, [sp, #56]	; 0x38
    97bc:	f7ff f83a 	bl	8834 <_svfprintf_r+0x220>
    97c0:	9811      	ldr	r0, [sp, #68]	; 0x44
    97c2:	f7fe fbe5 	bl	7f90 <strlen>
    97c6:	0002      	movs	r2, r0
    97c8:	900e      	str	r0, [sp, #56]	; 0x38
    97ca:	0003      	movs	r3, r0
    97cc:	f7ff f9cd 	bl	8b6a <_svfprintf_r+0x556>
    97d0:	232d      	movs	r3, #45	; 0x2d
    97d2:	aa16      	add	r2, sp, #88	; 0x58
    97d4:	77d3      	strb	r3, [r2, #31]
    97d6:	4698      	mov	r8, r3
    97d8:	2300      	movs	r3, #0
    97da:	469a      	mov	sl, r3
    97dc:	f7ff f835 	bl	884a <_svfprintf_r+0x236>
    97e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    97e2:	9313      	str	r3, [sp, #76]	; 0x4c
    97e4:	1cda      	adds	r2, r3, #3
    97e6:	db02      	blt.n	97ee <_svfprintf_r+0x11da>
    97e8:	459a      	cmp	sl, r3
    97ea:	db00      	blt.n	97ee <_svfprintf_r+0x11da>
    97ec:	e70b      	b.n	9606 <_svfprintf_r+0xff2>
    97ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    97f0:	3b02      	subs	r3, #2
    97f2:	9312      	str	r3, [sp, #72]	; 0x48
    97f4:	222c      	movs	r2, #44	; 0x2c
    97f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    97f8:	2148      	movs	r1, #72	; 0x48
    97fa:	1e5d      	subs	r5, r3, #1
    97fc:	ab16      	add	r3, sp, #88	; 0x58
    97fe:	189b      	adds	r3, r3, r2
    9800:	466a      	mov	r2, sp
    9802:	1852      	adds	r2, r2, r1
    9804:	7812      	ldrb	r2, [r2, #0]
    9806:	951f      	str	r5, [sp, #124]	; 0x7c
    9808:	701a      	strb	r2, [r3, #0]
    980a:	2d00      	cmp	r5, #0
    980c:	da00      	bge.n	9810 <_svfprintf_r+0x11fc>
    980e:	e1a4      	b.n	9b5a <_svfprintf_r+0x1546>
    9810:	212d      	movs	r1, #45	; 0x2d
    9812:	232b      	movs	r3, #43	; 0x2b
    9814:	aa16      	add	r2, sp, #88	; 0x58
    9816:	1852      	adds	r2, r2, r1
    9818:	7013      	strb	r3, [r2, #0]
    981a:	2d09      	cmp	r5, #9
    981c:	dc00      	bgt.n	9820 <_svfprintf_r+0x120c>
    981e:	e14c      	b.n	9aba <_svfprintf_r+0x14a6>
    9820:	aa16      	add	r2, sp, #88	; 0x58
    9822:	233b      	movs	r3, #59	; 0x3b
    9824:	4694      	mov	ip, r2
    9826:	4463      	add	r3, ip
    9828:	469a      	mov	sl, r3
    982a:	46b1      	mov	r9, r6
    982c:	46a0      	mov	r8, r4
    982e:	4656      	mov	r6, sl
    9830:	e000      	b.n	9834 <_svfprintf_r+0x1220>
    9832:	0026      	movs	r6, r4
    9834:	0028      	movs	r0, r5
    9836:	210a      	movs	r1, #10
    9838:	f7fc f8d2 	bl	59e0 <__aeabi_idivmod>
    983c:	1e74      	subs	r4, r6, #1
    983e:	3130      	adds	r1, #48	; 0x30
    9840:	7021      	strb	r1, [r4, #0]
    9842:	0028      	movs	r0, r5
    9844:	210a      	movs	r1, #10
    9846:	f7fb ffe5 	bl	5814 <__divsi3>
    984a:	0005      	movs	r5, r0
    984c:	2809      	cmp	r0, #9
    984e:	dcf0      	bgt.n	9832 <_svfprintf_r+0x121e>
    9850:	0023      	movs	r3, r4
    9852:	4644      	mov	r4, r8
    9854:	46b0      	mov	r8, r6
    9856:	464e      	mov	r6, r9
    9858:	4699      	mov	r9, r3
    985a:	0003      	movs	r3, r0
    985c:	3330      	adds	r3, #48	; 0x30
    985e:	b2d8      	uxtb	r0, r3
    9860:	4643      	mov	r3, r8
    9862:	3b02      	subs	r3, #2
    9864:	7018      	strb	r0, [r3, #0]
    9866:	459a      	cmp	sl, r3
    9868:	d800      	bhi.n	986c <_svfprintf_r+0x1258>
    986a:	e1b4      	b.n	9bd6 <_svfprintf_r+0x15c2>
    986c:	4642      	mov	r2, r8
    986e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    9870:	4645      	mov	r5, r8
    9872:	1a99      	subs	r1, r3, r2
    9874:	2301      	movs	r3, #1
    9876:	3107      	adds	r1, #7
    9878:	425b      	negs	r3, r3
    987a:	e001      	b.n	9880 <_svfprintf_r+0x126c>
    987c:	5ce8      	ldrb	r0, [r5, r3]
    987e:	3301      	adds	r3, #1
    9880:	aa21      	add	r2, sp, #132	; 0x84
    9882:	18d2      	adds	r2, r2, r3
    9884:	70d0      	strb	r0, [r2, #3]
    9886:	428b      	cmp	r3, r1
    9888:	d1f8      	bne.n	987c <_svfprintf_r+0x1268>
    988a:	a916      	add	r1, sp, #88	; 0x58
    988c:	468c      	mov	ip, r1
    988e:	222e      	movs	r2, #46	; 0x2e
    9890:	464b      	mov	r3, r9
    9892:	4462      	add	r2, ip
    9894:	4694      	mov	ip, r2
    9896:	1afb      	subs	r3, r7, r3
    9898:	4463      	add	r3, ip
    989a:	aa21      	add	r2, sp, #132	; 0x84
    989c:	9914      	ldr	r1, [sp, #80]	; 0x50
    989e:	1a9b      	subs	r3, r3, r2
    98a0:	469c      	mov	ip, r3
    98a2:	000a      	movs	r2, r1
    98a4:	4462      	add	r2, ip
    98a6:	931a      	str	r3, [sp, #104]	; 0x68
    98a8:	920e      	str	r2, [sp, #56]	; 0x38
    98aa:	2901      	cmp	r1, #1
    98ac:	dc00      	bgt.n	98b0 <_svfprintf_r+0x129c>
    98ae:	e145      	b.n	9b3c <_svfprintf_r+0x1528>
    98b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    98b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    98b4:	4694      	mov	ip, r2
    98b6:	4463      	add	r3, ip
    98b8:	001a      	movs	r2, r3
    98ba:	930e      	str	r3, [sp, #56]	; 0x38
    98bc:	43db      	mvns	r3, r3
    98be:	17db      	asrs	r3, r3, #31
    98c0:	401a      	ands	r2, r3
    98c2:	2300      	movs	r3, #0
    98c4:	9207      	str	r2, [sp, #28]
    98c6:	9313      	str	r3, [sp, #76]	; 0x4c
    98c8:	e6ae      	b.n	9628 <_svfprintf_r+0x1014>
    98ca:	2301      	movs	r3, #1
    98cc:	425b      	negs	r3, r3
    98ce:	930a      	str	r3, [sp, #40]	; 0x28
    98d0:	f7fe ff2d 	bl	872e <_svfprintf_r+0x11a>
    98d4:	003a      	movs	r2, r7
    98d6:	9906      	ldr	r1, [sp, #24]
    98d8:	9809      	ldr	r0, [sp, #36]	; 0x24
    98da:	f004 fd0b 	bl	e2f4 <__ssprint_r>
    98de:	2800      	cmp	r0, #0
    98e0:	d001      	beq.n	98e6 <_svfprintf_r+0x12d2>
    98e2:	f7fe ff1e 	bl	8722 <_svfprintf_r+0x10e>
    98e6:	68bc      	ldr	r4, [r7, #8]
    98e8:	ae32      	add	r6, sp, #200	; 0xc8
    98ea:	e43c      	b.n	9166 <_svfprintf_r+0xb52>
    98ec:	003a      	movs	r2, r7
    98ee:	9906      	ldr	r1, [sp, #24]
    98f0:	9809      	ldr	r0, [sp, #36]	; 0x24
    98f2:	f004 fcff 	bl	e2f4 <__ssprint_r>
    98f6:	2800      	cmp	r0, #0
    98f8:	d001      	beq.n	98fe <_svfprintf_r+0x12ea>
    98fa:	f7fe ff12 	bl	8722 <_svfprintf_r+0x10e>
    98fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9900:	68bc      	ldr	r4, [r7, #8]
    9902:	ae32      	add	r6, sp, #200	; 0xc8
    9904:	e56a      	b.n	93dc <_svfprintf_r+0xdc8>
    9906:	003a      	movs	r2, r7
    9908:	9906      	ldr	r1, [sp, #24]
    990a:	9809      	ldr	r0, [sp, #36]	; 0x24
    990c:	f004 fcf2 	bl	e2f4 <__ssprint_r>
    9910:	2800      	cmp	r0, #0
    9912:	d001      	beq.n	9918 <_svfprintf_r+0x1304>
    9914:	f7fe ff05 	bl	8722 <_svfprintf_r+0x10e>
    9918:	68bc      	ldr	r4, [r7, #8]
    991a:	ae32      	add	r6, sp, #200	; 0xc8
    991c:	e557      	b.n	93ce <_svfprintf_r+0xdba>
    991e:	003a      	movs	r2, r7
    9920:	9906      	ldr	r1, [sp, #24]
    9922:	9809      	ldr	r0, [sp, #36]	; 0x24
    9924:	f004 fce6 	bl	e2f4 <__ssprint_r>
    9928:	2800      	cmp	r0, #0
    992a:	d001      	beq.n	9930 <_svfprintf_r+0x131c>
    992c:	f7fe fef9 	bl	8722 <_svfprintf_r+0x10e>
    9930:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9932:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9934:	68bc      	ldr	r4, [r7, #8]
    9936:	1a9b      	subs	r3, r3, r2
    9938:	ae32      	add	r6, sp, #200	; 0xc8
    993a:	e56a      	b.n	9412 <_svfprintf_r+0xdfe>
    993c:	4653      	mov	r3, sl
    993e:	9307      	str	r3, [sp, #28]
    9940:	2b06      	cmp	r3, #6
    9942:	d901      	bls.n	9948 <_svfprintf_r+0x1334>
    9944:	2306      	movs	r3, #6
    9946:	9307      	str	r3, [sp, #28]
    9948:	9b07      	ldr	r3, [sp, #28]
    994a:	950f      	str	r5, [sp, #60]	; 0x3c
    994c:	930e      	str	r3, [sp, #56]	; 0x38
    994e:	2300      	movs	r3, #0
    9950:	4698      	mov	r8, r3
    9952:	469a      	mov	sl, r3
    9954:	9313      	str	r3, [sp, #76]	; 0x4c
    9956:	4b24      	ldr	r3, [pc, #144]	; (99e8 <_svfprintf_r+0x13d4>)
    9958:	9408      	str	r4, [sp, #32]
    995a:	9311      	str	r3, [sp, #68]	; 0x44
    995c:	f7fe ff78 	bl	8850 <_svfprintf_r+0x23c>
    9960:	2320      	movs	r3, #32
    9962:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9964:	439a      	bics	r2, r3
    9966:	3b1a      	subs	r3, #26
    9968:	920e      	str	r2, [sp, #56]	; 0x38
    996a:	469a      	mov	sl, r3
    996c:	e5f1      	b.n	9552 <_svfprintf_r+0xf3e>
    996e:	ab23      	add	r3, sp, #140	; 0x8c
    9970:	931b      	str	r3, [sp, #108]	; 0x6c
    9972:	9304      	str	r3, [sp, #16]
    9974:	ab20      	add	r3, sp, #128	; 0x80
    9976:	9303      	str	r3, [sp, #12]
    9978:	ab1f      	add	r3, sp, #124	; 0x7c
    997a:	9302      	str	r3, [sp, #8]
    997c:	4653      	mov	r3, sl
    997e:	9301      	str	r3, [sp, #4]
    9980:	2303      	movs	r3, #3
    9982:	464a      	mov	r2, r9
    9984:	9300      	str	r3, [sp, #0]
    9986:	9809      	ldr	r0, [sp, #36]	; 0x24
    9988:	9b07      	ldr	r3, [sp, #28]
    998a:	f001 f8ed 	bl	ab68 <_dtoa_r>
    998e:	0003      	movs	r3, r0
    9990:	4453      	add	r3, sl
    9992:	9011      	str	r0, [sp, #68]	; 0x44
    9994:	4698      	mov	r8, r3
    9996:	4655      	mov	r5, sl
    9998:	e6e4      	b.n	9764 <_svfprintf_r+0x1150>
    999a:	232d      	movs	r3, #45	; 0x2d
    999c:	aa16      	add	r2, sp, #88	; 0x58
    999e:	77d3      	strb	r3, [r2, #31]
    99a0:	4698      	mov	r8, r3
    99a2:	f7fe ffdb 	bl	895c <_svfprintf_r+0x348>
    99a6:	2280      	movs	r2, #128	; 0x80
    99a8:	0612      	lsls	r2, r2, #24
    99aa:	4694      	mov	ip, r2
    99ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
    99ae:	4699      	mov	r9, r3
    99b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    99b2:	4463      	add	r3, ip
    99b4:	9307      	str	r3, [sp, #28]
    99b6:	232d      	movs	r3, #45	; 0x2d
    99b8:	9310      	str	r3, [sp, #64]	; 0x40
    99ba:	e5d7      	b.n	956c <_svfprintf_r+0xf58>
    99bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    99be:	9b14      	ldr	r3, [sp, #80]	; 0x50
    99c0:	4694      	mov	ip, r2
    99c2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    99c4:	4463      	add	r3, ip
    99c6:	930e      	str	r3, [sp, #56]	; 0x38
    99c8:	2a00      	cmp	r2, #0
    99ca:	dc00      	bgt.n	99ce <_svfprintf_r+0x13ba>
    99cc:	e0ce      	b.n	9b6c <_svfprintf_r+0x1558>
    99ce:	001a      	movs	r2, r3
    99d0:	43db      	mvns	r3, r3
    99d2:	17db      	asrs	r3, r3, #31
    99d4:	401a      	ands	r2, r3
    99d6:	2367      	movs	r3, #103	; 0x67
    99d8:	9207      	str	r2, [sp, #28]
    99da:	9312      	str	r3, [sp, #72]	; 0x48
    99dc:	e624      	b.n	9628 <_svfprintf_r+0x1014>
    99de:	46c0      	nop			; (mov r8, r8)
    99e0:	00011f04 	.word	0x00011f04
    99e4:	00011ec8 	.word	0x00011ec8
    99e8:	00011efc 	.word	0x00011efc
    99ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    99ee:	9313      	str	r3, [sp, #76]	; 0x4c
    99f0:	2b00      	cmp	r3, #0
    99f2:	dc00      	bgt.n	99f6 <_svfprintf_r+0x13e2>
    99f4:	e0d5      	b.n	9ba2 <_svfprintf_r+0x158e>
    99f6:	4652      	mov	r2, sl
    99f8:	2a00      	cmp	r2, #0
    99fa:	d000      	beq.n	99fe <_svfprintf_r+0x13ea>
    99fc:	e092      	b.n	9b24 <_svfprintf_r+0x1510>
    99fe:	07e2      	lsls	r2, r4, #31
    9a00:	d500      	bpl.n	9a04 <_svfprintf_r+0x13f0>
    9a02:	e08f      	b.n	9b24 <_svfprintf_r+0x1510>
    9a04:	9307      	str	r3, [sp, #28]
    9a06:	930e      	str	r3, [sp, #56]	; 0x38
    9a08:	e60e      	b.n	9628 <_svfprintf_r+0x1014>
    9a0a:	ab16      	add	r3, sp, #88	; 0x58
    9a0c:	7fdb      	ldrb	r3, [r3, #31]
    9a0e:	950f      	str	r5, [sp, #60]	; 0x3c
    9a10:	4698      	mov	r8, r3
    9a12:	4653      	mov	r3, sl
    9a14:	9307      	str	r3, [sp, #28]
    9a16:	930e      	str	r3, [sp, #56]	; 0x38
    9a18:	2300      	movs	r3, #0
    9a1a:	9408      	str	r4, [sp, #32]
    9a1c:	469a      	mov	sl, r3
    9a1e:	9313      	str	r3, [sp, #76]	; 0x4c
    9a20:	f7fe ff10 	bl	8844 <_svfprintf_r+0x230>
    9a24:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9a26:	4698      	mov	r8, r3
    9a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9a2a:	44a8      	add	r8, r5
    9a2c:	2b47      	cmp	r3, #71	; 0x47
    9a2e:	d000      	beq.n	9a32 <_svfprintf_r+0x141e>
    9a30:	e5c4      	b.n	95bc <_svfprintf_r+0xfa8>
    9a32:	07e3      	lsls	r3, r4, #31
    9a34:	d500      	bpl.n	9a38 <_svfprintf_r+0x1424>
    9a36:	e68e      	b.n	9756 <_svfprintf_r+0x1142>
    9a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9a3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    9a3c:	1a9b      	subs	r3, r3, r2
    9a3e:	9314      	str	r3, [sp, #80]	; 0x50
    9a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9a42:	2b47      	cmp	r3, #71	; 0x47
    9a44:	d100      	bne.n	9a48 <_svfprintf_r+0x1434>
    9a46:	e6cb      	b.n	97e0 <_svfprintf_r+0x11cc>
    9a48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    9a4a:	9313      	str	r3, [sp, #76]	; 0x4c
    9a4c:	e6d2      	b.n	97f4 <_svfprintf_r+0x11e0>
    9a4e:	4244      	negs	r4, r0
    9a50:	3010      	adds	r0, #16
    9a52:	db00      	blt.n	9a56 <_svfprintf_r+0x1442>
    9a54:	e0d0      	b.n	9bf8 <_svfprintf_r+0x15e4>
    9a56:	486e      	ldr	r0, [pc, #440]	; (9c10 <_svfprintf_r+0x15fc>)
    9a58:	2610      	movs	r6, #16
    9a5a:	0005      	movs	r5, r0
    9a5c:	e003      	b.n	9a66 <_svfprintf_r+0x1452>
    9a5e:	3208      	adds	r2, #8
    9a60:	3c10      	subs	r4, #16
    9a62:	2c10      	cmp	r4, #16
    9a64:	dd38      	ble.n	9ad8 <_svfprintf_r+0x14c4>
    9a66:	3110      	adds	r1, #16
    9a68:	3301      	adds	r3, #1
    9a6a:	6015      	str	r5, [r2, #0]
    9a6c:	6056      	str	r6, [r2, #4]
    9a6e:	60b9      	str	r1, [r7, #8]
    9a70:	607b      	str	r3, [r7, #4]
    9a72:	2b07      	cmp	r3, #7
    9a74:	ddf3      	ble.n	9a5e <_svfprintf_r+0x144a>
    9a76:	003a      	movs	r2, r7
    9a78:	9906      	ldr	r1, [sp, #24]
    9a7a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a7c:	f004 fc3a 	bl	e2f4 <__ssprint_r>
    9a80:	2800      	cmp	r0, #0
    9a82:	d001      	beq.n	9a88 <_svfprintf_r+0x1474>
    9a84:	f7fe fe4d 	bl	8722 <_svfprintf_r+0x10e>
    9a88:	68b9      	ldr	r1, [r7, #8]
    9a8a:	687b      	ldr	r3, [r7, #4]
    9a8c:	aa32      	add	r2, sp, #200	; 0xc8
    9a8e:	e7e7      	b.n	9a60 <_svfprintf_r+0x144c>
    9a90:	003a      	movs	r2, r7
    9a92:	9906      	ldr	r1, [sp, #24]
    9a94:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a96:	f004 fc2d 	bl	e2f4 <__ssprint_r>
    9a9a:	2800      	cmp	r0, #0
    9a9c:	d001      	beq.n	9aa2 <_svfprintf_r+0x148e>
    9a9e:	f7fe fe40 	bl	8722 <_svfprintf_r+0x10e>
    9aa2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    9aa4:	68b9      	ldr	r1, [r7, #8]
    9aa6:	687b      	ldr	r3, [r7, #4]
    9aa8:	aa32      	add	r2, sp, #200	; 0xc8
    9aaa:	e600      	b.n	96ae <_svfprintf_r+0x109a>
    9aac:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9ab0:	4694      	mov	ip, r2
    9ab2:	4463      	add	r3, ip
    9ab4:	001a      	movs	r2, r3
    9ab6:	930e      	str	r3, [sp, #56]	; 0x38
    9ab8:	e78a      	b.n	99d0 <_svfprintf_r+0x13bc>
    9aba:	212e      	movs	r1, #46	; 0x2e
    9abc:	2330      	movs	r3, #48	; 0x30
    9abe:	aa16      	add	r2, sp, #88	; 0x58
    9ac0:	1852      	adds	r2, r2, r1
    9ac2:	7013      	strb	r3, [r2, #0]
    9ac4:	002b      	movs	r3, r5
    9ac6:	aa16      	add	r2, sp, #88	; 0x58
    9ac8:	3101      	adds	r1, #1
    9aca:	3330      	adds	r3, #48	; 0x30
    9acc:	1852      	adds	r2, r2, r1
    9ace:	7013      	strb	r3, [r2, #0]
    9ad0:	ab22      	add	r3, sp, #136	; 0x88
    9ad2:	e6e2      	b.n	989a <_svfprintf_r+0x1286>
    9ad4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9ad6:	e585      	b.n	95e4 <_svfprintf_r+0xfd0>
    9ad8:	46a9      	mov	r9, r5
    9ada:	4648      	mov	r0, r9
    9adc:	1909      	adds	r1, r1, r4
    9ade:	3301      	adds	r3, #1
    9ae0:	6010      	str	r0, [r2, #0]
    9ae2:	6054      	str	r4, [r2, #4]
    9ae4:	60b9      	str	r1, [r7, #8]
    9ae6:	3208      	adds	r2, #8
    9ae8:	607b      	str	r3, [r7, #4]
    9aea:	2b07      	cmp	r3, #7
    9aec:	dc00      	bgt.n	9af0 <_svfprintf_r+0x14dc>
    9aee:	e5e1      	b.n	96b4 <_svfprintf_r+0x10a0>
    9af0:	003a      	movs	r2, r7
    9af2:	9906      	ldr	r1, [sp, #24]
    9af4:	9809      	ldr	r0, [sp, #36]	; 0x24
    9af6:	f004 fbfd 	bl	e2f4 <__ssprint_r>
    9afa:	2800      	cmp	r0, #0
    9afc:	d001      	beq.n	9b02 <_svfprintf_r+0x14ee>
    9afe:	f7fe fe10 	bl	8722 <_svfprintf_r+0x10e>
    9b02:	68b9      	ldr	r1, [r7, #8]
    9b04:	687b      	ldr	r3, [r7, #4]
    9b06:	aa32      	add	r2, sp, #200	; 0xc8
    9b08:	e5d4      	b.n	96b4 <_svfprintf_r+0x10a0>
    9b0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    9b0c:	2b00      	cmp	r3, #0
    9b0e:	db38      	blt.n	9b82 <_svfprintf_r+0x156e>
    9b10:	ab16      	add	r3, sp, #88	; 0x58
    9b12:	7fdb      	ldrb	r3, [r3, #31]
    9b14:	4698      	mov	r8, r3
    9b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9b18:	2b47      	cmp	r3, #71	; 0x47
    9b1a:	dc2e      	bgt.n	9b7a <_svfprintf_r+0x1566>
    9b1c:	4b3d      	ldr	r3, [pc, #244]	; (9c14 <_svfprintf_r+0x1600>)
    9b1e:	9311      	str	r3, [sp, #68]	; 0x44
    9b20:	f7fe ff23 	bl	896a <_svfprintf_r+0x356>
    9b24:	9a18      	ldr	r2, [sp, #96]	; 0x60
    9b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9b28:	4694      	mov	ip, r2
    9b2a:	4463      	add	r3, ip
    9b2c:	4453      	add	r3, sl
    9b2e:	001a      	movs	r2, r3
    9b30:	930e      	str	r3, [sp, #56]	; 0x38
    9b32:	43db      	mvns	r3, r3
    9b34:	17db      	asrs	r3, r3, #31
    9b36:	401a      	ands	r2, r3
    9b38:	9207      	str	r2, [sp, #28]
    9b3a:	e575      	b.n	9628 <_svfprintf_r+0x1014>
    9b3c:	2301      	movs	r3, #1
    9b3e:	4023      	ands	r3, r4
    9b40:	9313      	str	r3, [sp, #76]	; 0x4c
    9b42:	d000      	beq.n	9b46 <_svfprintf_r+0x1532>
    9b44:	e6b4      	b.n	98b0 <_svfprintf_r+0x129c>
    9b46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9b48:	43d3      	mvns	r3, r2
    9b4a:	17db      	asrs	r3, r3, #31
    9b4c:	401a      	ands	r2, r3
    9b4e:	9207      	str	r2, [sp, #28]
    9b50:	e56a      	b.n	9628 <_svfprintf_r+0x1014>
    9b52:	4a2f      	ldr	r2, [pc, #188]	; (9c10 <_svfprintf_r+0x15fc>)
    9b54:	687b      	ldr	r3, [r7, #4]
    9b56:	4691      	mov	r9, r2
    9b58:	e42d      	b.n	93b6 <_svfprintf_r+0xda2>
    9b5a:	2301      	movs	r3, #1
    9b5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9b5e:	391b      	subs	r1, #27
    9b60:	1a9d      	subs	r5, r3, r2
    9b62:	aa16      	add	r2, sp, #88	; 0x58
    9b64:	332c      	adds	r3, #44	; 0x2c
    9b66:	1852      	adds	r2, r2, r1
    9b68:	7013      	strb	r3, [r2, #0]
    9b6a:	e656      	b.n	981a <_svfprintf_r+0x1206>
    9b6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9b6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    9b70:	1a98      	subs	r0, r3, r2
    9b72:	1c43      	adds	r3, r0, #1
    9b74:	001a      	movs	r2, r3
    9b76:	930e      	str	r3, [sp, #56]	; 0x38
    9b78:	e72a      	b.n	99d0 <_svfprintf_r+0x13bc>
    9b7a:	4b27      	ldr	r3, [pc, #156]	; (9c18 <_svfprintf_r+0x1604>)
    9b7c:	9311      	str	r3, [sp, #68]	; 0x44
    9b7e:	f7fe fef4 	bl	896a <_svfprintf_r+0x356>
    9b82:	232d      	movs	r3, #45	; 0x2d
    9b84:	aa16      	add	r2, sp, #88	; 0x58
    9b86:	77d3      	strb	r3, [r2, #31]
    9b88:	4698      	mov	r8, r3
    9b8a:	e7c4      	b.n	9b16 <_svfprintf_r+0x1502>
    9b8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    9b8e:	1d1a      	adds	r2, r3, #4
    9b90:	681b      	ldr	r3, [r3, #0]
    9b92:	469a      	mov	sl, r3
    9b94:	2b00      	cmp	r3, #0
    9b96:	db36      	blt.n	9c06 <_svfprintf_r+0x15f2>
    9b98:	784b      	ldrb	r3, [r1, #1]
    9b9a:	920f      	str	r2, [sp, #60]	; 0x3c
    9b9c:	4659      	mov	r1, fp
    9b9e:	f7fe fd9d 	bl	86dc <_svfprintf_r+0xc8>
    9ba2:	4653      	mov	r3, sl
    9ba4:	2b00      	cmp	r3, #0
    9ba6:	d101      	bne.n	9bac <_svfprintf_r+0x1598>
    9ba8:	07e3      	lsls	r3, r4, #31
    9baa:	d503      	bpl.n	9bb4 <_svfprintf_r+0x15a0>
    9bac:	9b18      	ldr	r3, [sp, #96]	; 0x60
    9bae:	1c58      	adds	r0, r3, #1
    9bb0:	0003      	movs	r3, r0
    9bb2:	e7bb      	b.n	9b2c <_svfprintf_r+0x1518>
    9bb4:	2301      	movs	r3, #1
    9bb6:	e725      	b.n	9a04 <_svfprintf_r+0x13f0>
    9bb8:	ab16      	add	r3, sp, #88	; 0x58
    9bba:	77d8      	strb	r0, [r3, #31]
    9bbc:	f7fe ff6c 	bl	8a98 <_svfprintf_r+0x484>
    9bc0:	ab16      	add	r3, sp, #88	; 0x58
    9bc2:	77d8      	strb	r0, [r3, #31]
    9bc4:	f7ff f814 	bl	8bf0 <_svfprintf_r+0x5dc>
    9bc8:	230c      	movs	r3, #12
    9bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9bcc:	6013      	str	r3, [r2, #0]
    9bce:	3b0d      	subs	r3, #13
    9bd0:	930a      	str	r3, [sp, #40]	; 0x28
    9bd2:	f7fe fdac 	bl	872e <_svfprintf_r+0x11a>
    9bd6:	aa16      	add	r2, sp, #88	; 0x58
    9bd8:	232e      	movs	r3, #46	; 0x2e
    9bda:	4694      	mov	ip, r2
    9bdc:	4463      	add	r3, ip
    9bde:	e65c      	b.n	989a <_svfprintf_r+0x1286>
    9be0:	ab16      	add	r3, sp, #88	; 0x58
    9be2:	77d8      	strb	r0, [r3, #31]
    9be4:	f7fe fe85 	bl	88f2 <_svfprintf_r+0x2de>
    9be8:	ab16      	add	r3, sp, #88	; 0x58
    9bea:	77d8      	strb	r0, [r3, #31]
    9bec:	f7fe fddd 	bl	87aa <_svfprintf_r+0x196>
    9bf0:	ab16      	add	r3, sp, #88	; 0x58
    9bf2:	77d8      	strb	r0, [r3, #31]
    9bf4:	f7ff f87d 	bl	8cf2 <_svfprintf_r+0x6de>
    9bf8:	4805      	ldr	r0, [pc, #20]	; (9c10 <_svfprintf_r+0x15fc>)
    9bfa:	4681      	mov	r9, r0
    9bfc:	e76d      	b.n	9ada <_svfprintf_r+0x14c6>
    9bfe:	ab16      	add	r3, sp, #88	; 0x58
    9c00:	77d8      	strb	r0, [r3, #31]
    9c02:	f7fe ff79 	bl	8af8 <_svfprintf_r+0x4e4>
    9c06:	2301      	movs	r3, #1
    9c08:	425b      	negs	r3, r3
    9c0a:	469a      	mov	sl, r3
    9c0c:	e7c4      	b.n	9b98 <_svfprintf_r+0x1584>
    9c0e:	46c0      	nop			; (mov r8, r8)
    9c10:	00011f18 	.word	0x00011f18
    9c14:	00011ecc 	.word	0x00011ecc
    9c18:	00011ed0 	.word	0x00011ed0

00009c1c <__ssvfscanf_r>:
    9c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c1e:	464e      	mov	r6, r9
    9c20:	4645      	mov	r5, r8
    9c22:	46de      	mov	lr, fp
    9c24:	4657      	mov	r7, sl
    9c26:	b5e0      	push	{r5, r6, r7, lr}
    9c28:	4cce      	ldr	r4, [pc, #824]	; (9f64 <__ssvfscanf_r+0x348>)
    9c2a:	000e      	movs	r6, r1
    9c2c:	44a5      	add	sp, r4
    9c2e:	9307      	str	r3, [sp, #28]
    9c30:	230c      	movs	r3, #12
    9c32:	5ec9      	ldrsh	r1, [r1, r3]
    9c34:	2380      	movs	r3, #128	; 0x80
    9c36:	019b      	lsls	r3, r3, #6
    9c38:	4680      	mov	r8, r0
    9c3a:	4219      	tst	r1, r3
    9c3c:	d105      	bne.n	9c4a <__ssvfscanf_r+0x2e>
    9c3e:	430b      	orrs	r3, r1
    9c40:	81b3      	strh	r3, [r6, #12]
    9c42:	6e71      	ldr	r1, [r6, #100]	; 0x64
    9c44:	4bc8      	ldr	r3, [pc, #800]	; (9f68 <__ssvfscanf_r+0x34c>)
    9c46:	400b      	ands	r3, r1
    9c48:	6673      	str	r3, [r6, #100]	; 0x64
    9c4a:	2300      	movs	r3, #0
    9c4c:	0014      	movs	r4, r2
    9c4e:	9309      	str	r3, [sp, #36]	; 0x24
    9c50:	9305      	str	r3, [sp, #20]
    9c52:	9308      	str	r3, [sp, #32]
    9c54:	7823      	ldrb	r3, [r4, #0]
    9c56:	1c62      	adds	r2, r4, #1
    9c58:	2700      	movs	r7, #0
    9c5a:	9311      	str	r3, [sp, #68]	; 0x44
    9c5c:	4692      	mov	sl, r2
    9c5e:	2b00      	cmp	r3, #0
    9c60:	d029      	beq.n	9cb6 <__ssvfscanf_r+0x9a>
    9c62:	f002 f8ad 	bl	bdc0 <__locale_ctype_ptr>
    9c66:	2508      	movs	r5, #8
    9c68:	9b11      	ldr	r3, [sp, #68]	; 0x44
    9c6a:	18c0      	adds	r0, r0, r3
    9c6c:	7842      	ldrb	r2, [r0, #1]
    9c6e:	4015      	ands	r5, r2
    9c70:	d02b      	beq.n	9cca <__ssvfscanf_r+0xae>
    9c72:	6873      	ldr	r3, [r6, #4]
    9c74:	2408      	movs	r4, #8
    9c76:	4645      	mov	r5, r8
    9c78:	e00d      	b.n	9c96 <__ssvfscanf_r+0x7a>
    9c7a:	f002 f8a1 	bl	bdc0 <__locale_ctype_ptr>
    9c7e:	6832      	ldr	r2, [r6, #0]
    9c80:	7813      	ldrb	r3, [r2, #0]
    9c82:	18c0      	adds	r0, r0, r3
    9c84:	7843      	ldrb	r3, [r0, #1]
    9c86:	421c      	tst	r4, r3
    9c88:	d00d      	beq.n	9ca6 <__ssvfscanf_r+0x8a>
    9c8a:	6873      	ldr	r3, [r6, #4]
    9c8c:	3201      	adds	r2, #1
    9c8e:	3b01      	subs	r3, #1
    9c90:	3701      	adds	r7, #1
    9c92:	6073      	str	r3, [r6, #4]
    9c94:	6032      	str	r2, [r6, #0]
    9c96:	2b00      	cmp	r3, #0
    9c98:	dcef      	bgt.n	9c7a <__ssvfscanf_r+0x5e>
    9c9a:	0031      	movs	r1, r6
    9c9c:	0028      	movs	r0, r5
    9c9e:	f004 fbfb 	bl	e498 <__ssrefill_r>
    9ca2:	2800      	cmp	r0, #0
    9ca4:	d0e9      	beq.n	9c7a <__ssvfscanf_r+0x5e>
    9ca6:	46a8      	mov	r8, r5
    9ca8:	4654      	mov	r4, sl
    9caa:	7823      	ldrb	r3, [r4, #0]
    9cac:	1c62      	adds	r2, r4, #1
    9cae:	9311      	str	r3, [sp, #68]	; 0x44
    9cb0:	4692      	mov	sl, r2
    9cb2:	2b00      	cmp	r3, #0
    9cb4:	d1d5      	bne.n	9c62 <__ssvfscanf_r+0x46>
    9cb6:	9808      	ldr	r0, [sp, #32]
    9cb8:	23ad      	movs	r3, #173	; 0xad
    9cba:	009b      	lsls	r3, r3, #2
    9cbc:	449d      	add	sp, r3
    9cbe:	bc3c      	pop	{r2, r3, r4, r5}
    9cc0:	4690      	mov	r8, r2
    9cc2:	4699      	mov	r9, r3
    9cc4:	46a2      	mov	sl, r4
    9cc6:	46ab      	mov	fp, r5
    9cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cca:	2b25      	cmp	r3, #37	; 0x25
    9ccc:	d116      	bne.n	9cfc <__ssvfscanf_r+0xe0>
    9cce:	7863      	ldrb	r3, [r4, #1]
    9cd0:	2400      	movs	r4, #0
    9cd2:	469b      	mov	fp, r3
    9cd4:	2300      	movs	r3, #0
    9cd6:	4699      	mov	r9, r3
    9cd8:	3301      	adds	r3, #1
    9cda:	9304      	str	r3, [sp, #16]
    9cdc:	2004      	movs	r0, #4
    9cde:	465b      	mov	r3, fp
    9ce0:	2202      	movs	r2, #2
    9ce2:	46a3      	mov	fp, r4
    9ce4:	4654      	mov	r4, sl
    9ce6:	3401      	adds	r4, #1
    9ce8:	9403      	str	r4, [sp, #12]
    9cea:	2b78      	cmp	r3, #120	; 0x78
    9cec:	d900      	bls.n	9cf0 <__ssvfscanf_r+0xd4>
    9cee:	e0d5      	b.n	9e9c <__ssvfscanf_r+0x280>
    9cf0:	499e      	ldr	r1, [pc, #632]	; (9f6c <__ssvfscanf_r+0x350>)
    9cf2:	009c      	lsls	r4, r3, #2
    9cf4:	590c      	ldr	r4, [r1, r4]
    9cf6:	46a7      	mov	pc, r4
    9cf8:	9b03      	ldr	r3, [sp, #12]
    9cfa:	469a      	mov	sl, r3
    9cfc:	6873      	ldr	r3, [r6, #4]
    9cfe:	2b00      	cmp	r3, #0
    9d00:	dc01      	bgt.n	9d06 <__ssvfscanf_r+0xea>
    9d02:	f000 fd64 	bl	a7ce <__ssvfscanf_r+0xbb2>
    9d06:	4652      	mov	r2, sl
    9d08:	6833      	ldr	r3, [r6, #0]
    9d0a:	3a01      	subs	r2, #1
    9d0c:	7811      	ldrb	r1, [r2, #0]
    9d0e:	781a      	ldrb	r2, [r3, #0]
    9d10:	4291      	cmp	r1, r2
    9d12:	d1d0      	bne.n	9cb6 <__ssvfscanf_r+0x9a>
    9d14:	6872      	ldr	r2, [r6, #4]
    9d16:	3301      	adds	r3, #1
    9d18:	3a01      	subs	r2, #1
    9d1a:	6072      	str	r2, [r6, #4]
    9d1c:	6033      	str	r3, [r6, #0]
    9d1e:	3701      	adds	r7, #1
    9d20:	4654      	mov	r4, sl
    9d22:	e7c2      	b.n	9caa <__ssvfscanf_r+0x8e>
    9d24:	4655      	mov	r5, sl
    9d26:	1c83      	adds	r3, r0, #2
    9d28:	d001      	beq.n	9d2e <__ssvfscanf_r+0x112>
    9d2a:	f000 fe1a 	bl	a962 <__ssvfscanf_r+0xd46>
    9d2e:	6873      	ldr	r3, [r6, #4]
    9d30:	2b00      	cmp	r3, #0
    9d32:	dd01      	ble.n	9d38 <__ssvfscanf_r+0x11c>
    9d34:	f000 fc2a 	bl	a58c <__ssvfscanf_r+0x970>
    9d38:	0031      	movs	r1, r6
    9d3a:	4640      	mov	r0, r8
    9d3c:	f004 fbac 	bl	e498 <__ssrefill_r>
    9d40:	2800      	cmp	r0, #0
    9d42:	d101      	bne.n	9d48 <__ssvfscanf_r+0x12c>
    9d44:	f000 fc22 	bl	a58c <__ssvfscanf_r+0x970>
    9d48:	2d00      	cmp	r5, #0
    9d4a:	d101      	bne.n	9d50 <__ssvfscanf_r+0x134>
    9d4c:	f000 fc2a 	bl	a5a4 <__ssvfscanf_r+0x988>
    9d50:	9b08      	ldr	r3, [sp, #32]
    9d52:	2b00      	cmp	r3, #0
    9d54:	d002      	beq.n	9d5c <__ssvfscanf_r+0x140>
    9d56:	89b3      	ldrh	r3, [r6, #12]
    9d58:	065b      	lsls	r3, r3, #25
    9d5a:	d5ac      	bpl.n	9cb6 <__ssvfscanf_r+0x9a>
    9d5c:	2301      	movs	r3, #1
    9d5e:	425b      	negs	r3, r3
    9d60:	9308      	str	r3, [sp, #32]
    9d62:	e7a8      	b.n	9cb6 <__ssvfscanf_r+0x9a>
    9d64:	4b82      	ldr	r3, [pc, #520]	; (9f70 <__ssvfscanf_r+0x354>)
    9d66:	465c      	mov	r4, fp
    9d68:	9309      	str	r3, [sp, #36]	; 0x24
    9d6a:	2300      	movs	r3, #0
    9d6c:	9305      	str	r3, [sp, #20]
    9d6e:	3303      	adds	r3, #3
    9d70:	469b      	mov	fp, r3
    9d72:	6873      	ldr	r3, [r6, #4]
    9d74:	2b00      	cmp	r3, #0
    9d76:	dd27      	ble.n	9dc8 <__ssvfscanf_r+0x1ac>
    9d78:	464b      	mov	r3, r9
    9d7a:	065b      	lsls	r3, r3, #25
    9d7c:	d42d      	bmi.n	9dda <__ssvfscanf_r+0x1be>
    9d7e:	2308      	movs	r3, #8
    9d80:	469a      	mov	sl, r3
    9d82:	e001      	b.n	9d88 <__ssvfscanf_r+0x16c>
    9d84:	3201      	adds	r2, #1
    9d86:	6032      	str	r2, [r6, #0]
    9d88:	f002 f81a 	bl	bdc0 <__locale_ctype_ptr>
    9d8c:	4651      	mov	r1, sl
    9d8e:	6832      	ldr	r2, [r6, #0]
    9d90:	7813      	ldrb	r3, [r2, #0]
    9d92:	18c0      	adds	r0, r0, r3
    9d94:	7843      	ldrb	r3, [r0, #1]
    9d96:	4219      	tst	r1, r3
    9d98:	d01f      	beq.n	9dda <__ssvfscanf_r+0x1be>
    9d9a:	6873      	ldr	r3, [r6, #4]
    9d9c:	3701      	adds	r7, #1
    9d9e:	3b01      	subs	r3, #1
    9da0:	6073      	str	r3, [r6, #4]
    9da2:	2b00      	cmp	r3, #0
    9da4:	dcee      	bgt.n	9d84 <__ssvfscanf_r+0x168>
    9da6:	0031      	movs	r1, r6
    9da8:	4640      	mov	r0, r8
    9daa:	f004 fb75 	bl	e498 <__ssrefill_r>
    9dae:	2800      	cmp	r0, #0
    9db0:	d0ea      	beq.n	9d88 <__ssvfscanf_r+0x16c>
    9db2:	e7cd      	b.n	9d50 <__ssvfscanf_r+0x134>
    9db4:	465c      	mov	r4, fp
    9db6:	4b6f      	ldr	r3, [pc, #444]	; (9f74 <__ssvfscanf_r+0x358>)
    9db8:	9309      	str	r3, [sp, #36]	; 0x24
    9dba:	230a      	movs	r3, #10
    9dbc:	9305      	str	r3, [sp, #20]
    9dbe:	3b07      	subs	r3, #7
    9dc0:	469b      	mov	fp, r3
    9dc2:	6873      	ldr	r3, [r6, #4]
    9dc4:	2b00      	cmp	r3, #0
    9dc6:	dcd7      	bgt.n	9d78 <__ssvfscanf_r+0x15c>
    9dc8:	0031      	movs	r1, r6
    9dca:	4640      	mov	r0, r8
    9dcc:	f004 fb64 	bl	e498 <__ssrefill_r>
    9dd0:	2800      	cmp	r0, #0
    9dd2:	d1bd      	bne.n	9d50 <__ssvfscanf_r+0x134>
    9dd4:	464b      	mov	r3, r9
    9dd6:	065b      	lsls	r3, r3, #25
    9dd8:	d5d1      	bpl.n	9d7e <__ssvfscanf_r+0x162>
    9dda:	465b      	mov	r3, fp
    9ddc:	2b02      	cmp	r3, #2
    9dde:	d100      	bne.n	9de2 <__ssvfscanf_r+0x1c6>
    9de0:	e326      	b.n	a430 <__ssvfscanf_r+0x814>
    9de2:	dc00      	bgt.n	9de6 <__ssvfscanf_r+0x1ca>
    9de4:	e21b      	b.n	a21e <__ssvfscanf_r+0x602>
    9de6:	465b      	mov	r3, fp
    9de8:	2b03      	cmp	r3, #3
    9dea:	d100      	bne.n	9dee <__ssvfscanf_r+0x1d2>
    9dec:	e28a      	b.n	a304 <__ssvfscanf_r+0x6e8>
    9dee:	2b04      	cmp	r3, #4
    9df0:	d000      	beq.n	9df4 <__ssvfscanf_r+0x1d8>
    9df2:	e25b      	b.n	a2ac <__ssvfscanf_r+0x690>
    9df4:	4640      	mov	r0, r8
    9df6:	f001 fff3 	bl	bde0 <_localeconv_r>
    9dfa:	22ae      	movs	r2, #174	; 0xae
    9dfc:	2100      	movs	r1, #0
    9dfe:	6803      	ldr	r3, [r0, #0]
    9e00:	0052      	lsls	r2, r2, #1
    9e02:	930c      	str	r3, [sp, #48]	; 0x30
    9e04:	1e63      	subs	r3, r4, #1
    9e06:	910d      	str	r1, [sp, #52]	; 0x34
    9e08:	4293      	cmp	r3, r2
    9e0a:	d904      	bls.n	9e16 <__ssvfscanf_r+0x1fa>
    9e0c:	3c5e      	subs	r4, #94	; 0x5e
    9e0e:	3cff      	subs	r4, #255	; 0xff
    9e10:	940d      	str	r4, [sp, #52]	; 0x34
    9e12:	245e      	movs	r4, #94	; 0x5e
    9e14:	34ff      	adds	r4, #255	; 0xff
    9e16:	23f0      	movs	r3, #240	; 0xf0
    9e18:	464a      	mov	r2, r9
    9e1a:	00db      	lsls	r3, r3, #3
    9e1c:	431a      	orrs	r2, r3
    9e1e:	2300      	movs	r3, #0
    9e20:	9304      	str	r3, [sp, #16]
    9e22:	930e      	str	r3, [sp, #56]	; 0x38
    9e24:	930f      	str	r3, [sp, #60]	; 0x3c
    9e26:	9306      	str	r3, [sp, #24]
    9e28:	930b      	str	r3, [sp, #44]	; 0x2c
    9e2a:	ab54      	add	r3, sp, #336	; 0x150
    9e2c:	469b      	mov	fp, r3
    9e2e:	930a      	str	r3, [sp, #40]	; 0x28
    9e30:	4b51      	ldr	r3, [pc, #324]	; (9f78 <__ssvfscanf_r+0x35c>)
    9e32:	4691      	mov	r9, r2
    9e34:	469a      	mov	sl, r3
    9e36:	002b      	movs	r3, r5
    9e38:	003d      	movs	r5, r7
    9e3a:	465f      	mov	r7, fp
    9e3c:	469b      	mov	fp, r3
    9e3e:	6832      	ldr	r2, [r6, #0]
    9e40:	7811      	ldrb	r1, [r2, #0]
    9e42:	000b      	movs	r3, r1
    9e44:	3b2b      	subs	r3, #43	; 0x2b
    9e46:	b2db      	uxtb	r3, r3
    9e48:	2b4e      	cmp	r3, #78	; 0x4e
    9e4a:	d900      	bls.n	9e4e <__ssvfscanf_r+0x232>
    9e4c:	e1d6      	b.n	a1fc <__ssvfscanf_r+0x5e0>
    9e4e:	4650      	mov	r0, sl
    9e50:	009b      	lsls	r3, r3, #2
    9e52:	58c3      	ldr	r3, [r0, r3]
    9e54:	469f      	mov	pc, r3
    9e56:	2302      	movs	r3, #2
    9e58:	465c      	mov	r4, fp
    9e5a:	469b      	mov	fp, r3
    9e5c:	e789      	b.n	9d72 <__ssvfscanf_r+0x156>
    9e5e:	465c      	mov	r4, fp
    9e60:	2388      	movs	r3, #136	; 0x88
    9e62:	464a      	mov	r2, r9
    9e64:	009b      	lsls	r3, r3, #2
    9e66:	431a      	orrs	r2, r3
    9e68:	4b42      	ldr	r3, [pc, #264]	; (9f74 <__ssvfscanf_r+0x358>)
    9e6a:	4691      	mov	r9, r2
    9e6c:	9309      	str	r3, [sp, #36]	; 0x24
    9e6e:	2310      	movs	r3, #16
    9e70:	9305      	str	r3, [sp, #20]
    9e72:	3b0d      	subs	r3, #13
    9e74:	469b      	mov	fp, r3
    9e76:	e77c      	b.n	9d72 <__ssvfscanf_r+0x156>
    9e78:	4653      	mov	r3, sl
    9e7a:	785b      	ldrb	r3, [r3, #1]
    9e7c:	2b6c      	cmp	r3, #108	; 0x6c
    9e7e:	d101      	bne.n	9e84 <__ssvfscanf_r+0x268>
    9e80:	f000 fcd0 	bl	a824 <__ssvfscanf_r+0xc08>
    9e84:	4649      	mov	r1, r9
    9e86:	9c04      	ldr	r4, [sp, #16]
    9e88:	4321      	orrs	r1, r4
    9e8a:	4689      	mov	r9, r1
    9e8c:	9903      	ldr	r1, [sp, #12]
    9e8e:	468a      	mov	sl, r1
    9e90:	4654      	mov	r4, sl
    9e92:	3401      	adds	r4, #1
    9e94:	9403      	str	r4, [sp, #12]
    9e96:	2b78      	cmp	r3, #120	; 0x78
    9e98:	d800      	bhi.n	9e9c <__ssvfscanf_r+0x280>
    9e9a:	e729      	b.n	9cf0 <__ssvfscanf_r+0xd4>
    9e9c:	465c      	mov	r4, fp
    9e9e:	469b      	mov	fp, r3
    9ea0:	f001 ff8e 	bl	bdc0 <__locale_ctype_ptr>
    9ea4:	2303      	movs	r3, #3
    9ea6:	4458      	add	r0, fp
    9ea8:	7842      	ldrb	r2, [r0, #1]
    9eaa:	4013      	ands	r3, r2
    9eac:	2b01      	cmp	r3, #1
    9eae:	d100      	bne.n	9eb2 <__ssvfscanf_r+0x296>
    9eb0:	e30a      	b.n	a4c8 <__ssvfscanf_r+0x8ac>
    9eb2:	4b2f      	ldr	r3, [pc, #188]	; (9f70 <__ssvfscanf_r+0x354>)
    9eb4:	e780      	b.n	9db8 <__ssvfscanf_r+0x19c>
    9eb6:	465c      	mov	r4, fp
    9eb8:	4b2e      	ldr	r3, [pc, #184]	; (9f74 <__ssvfscanf_r+0x358>)
    9eba:	9309      	str	r3, [sp, #36]	; 0x24
    9ebc:	2308      	movs	r3, #8
    9ebe:	9305      	str	r3, [sp, #20]
    9ec0:	3b05      	subs	r3, #5
    9ec2:	469b      	mov	fp, r3
    9ec4:	e755      	b.n	9d72 <__ssvfscanf_r+0x156>
    9ec6:	9b03      	ldr	r3, [sp, #12]
    9ec8:	469a      	mov	sl, r3
    9eca:	464b      	mov	r3, r9
    9ecc:	06db      	lsls	r3, r3, #27
    9ece:	d500      	bpl.n	9ed2 <__ssvfscanf_r+0x2b6>
    9ed0:	e6ea      	b.n	9ca8 <__ssvfscanf_r+0x8c>
    9ed2:	464b      	mov	r3, r9
    9ed4:	075b      	lsls	r3, r3, #29
    9ed6:	d501      	bpl.n	9edc <__ssvfscanf_r+0x2c0>
    9ed8:	f000 fce2 	bl	a8a0 <__ssvfscanf_r+0xc84>
    9edc:	464b      	mov	r3, r9
    9ede:	07db      	lsls	r3, r3, #31
    9ee0:	d500      	bpl.n	9ee4 <__ssvfscanf_r+0x2c8>
    9ee2:	e30e      	b.n	a502 <__ssvfscanf_r+0x8e6>
    9ee4:	464b      	mov	r3, r9
    9ee6:	079b      	lsls	r3, r3, #30
    9ee8:	d400      	bmi.n	9eec <__ssvfscanf_r+0x2d0>
    9eea:	e30a      	b.n	a502 <__ssvfscanf_r+0x8e6>
    9eec:	9907      	ldr	r1, [sp, #28]
    9eee:	17fa      	asrs	r2, r7, #31
    9ef0:	680b      	ldr	r3, [r1, #0]
    9ef2:	4654      	mov	r4, sl
    9ef4:	601f      	str	r7, [r3, #0]
    9ef6:	605a      	str	r2, [r3, #4]
    9ef8:	000b      	movs	r3, r1
    9efa:	3304      	adds	r3, #4
    9efc:	9307      	str	r3, [sp, #28]
    9efe:	e6d4      	b.n	9caa <__ssvfscanf_r+0x8e>
    9f00:	464b      	mov	r3, r9
    9f02:	4303      	orrs	r3, r0
    9f04:	4699      	mov	r9, r3
    9f06:	4653      	mov	r3, sl
    9f08:	9903      	ldr	r1, [sp, #12]
    9f0a:	785b      	ldrb	r3, [r3, #1]
    9f0c:	468a      	mov	sl, r1
    9f0e:	e6e9      	b.n	9ce4 <__ssvfscanf_r+0xc8>
    9f10:	465c      	mov	r4, fp
    9f12:	4b17      	ldr	r3, [pc, #92]	; (9f70 <__ssvfscanf_r+0x354>)
    9f14:	e750      	b.n	9db8 <__ssvfscanf_r+0x19c>
    9f16:	2340      	movs	r3, #64	; 0x40
    9f18:	464a      	mov	r2, r9
    9f1a:	431a      	orrs	r2, r3
    9f1c:	2300      	movs	r3, #0
    9f1e:	465c      	mov	r4, fp
    9f20:	4691      	mov	r9, r2
    9f22:	469b      	mov	fp, r3
    9f24:	e725      	b.n	9d72 <__ssvfscanf_r+0x156>
    9f26:	ab14      	add	r3, sp, #80	; 0x50
    9f28:	0018      	movs	r0, r3
    9f2a:	9903      	ldr	r1, [sp, #12]
    9f2c:	f002 ff76 	bl	ce1c <__sccl>
    9f30:	2340      	movs	r3, #64	; 0x40
    9f32:	464a      	mov	r2, r9
    9f34:	431a      	orrs	r2, r3
    9f36:	3b3f      	subs	r3, #63	; 0x3f
    9f38:	465c      	mov	r4, fp
    9f3a:	9003      	str	r0, [sp, #12]
    9f3c:	4691      	mov	r9, r2
    9f3e:	469b      	mov	fp, r3
    9f40:	e717      	b.n	9d72 <__ssvfscanf_r+0x156>
    9f42:	465c      	mov	r4, fp
    9f44:	2380      	movs	r3, #128	; 0x80
    9f46:	e78c      	b.n	9e62 <__ssvfscanf_r+0x246>
    9f48:	464a      	mov	r2, r9
    9f4a:	2301      	movs	r3, #1
    9f4c:	431a      	orrs	r2, r3
    9f4e:	465c      	mov	r4, fp
    9f50:	4691      	mov	r9, r2
    9f52:	e7b1      	b.n	9eb8 <__ssvfscanf_r+0x29c>
    9f54:	464b      	mov	r3, r9
    9f56:	4313      	orrs	r3, r2
    9f58:	e7d4      	b.n	9f04 <__ssvfscanf_r+0x2e8>
    9f5a:	2304      	movs	r3, #4
    9f5c:	465c      	mov	r4, fp
    9f5e:	469b      	mov	fp, r3
    9f60:	e707      	b.n	9d72 <__ssvfscanf_r+0x156>
    9f62:	46c0      	nop			; (mov r8, r8)
    9f64:	fffffd4c 	.word	0xfffffd4c
    9f68:	ffffdfff 	.word	0xffffdfff
    9f6c:	00011f28 	.word	0x00011f28
    9f70:	000085f1 	.word	0x000085f1
    9f74:	0000e0e9 	.word	0x0000e0e9
    9f78:	0001210c 	.word	0x0001210c
    9f7c:	2301      	movs	r3, #1
    9f7e:	464a      	mov	r2, r9
    9f80:	431a      	orrs	r2, r3
    9f82:	465c      	mov	r4, fp
    9f84:	4691      	mov	r9, r2
    9f86:	4bc5      	ldr	r3, [pc, #788]	; (a29c <__ssvfscanf_r+0x680>)
    9f88:	e716      	b.n	9db8 <__ssvfscanf_r+0x19c>
    9f8a:	4659      	mov	r1, fp
    9f8c:	008c      	lsls	r4, r1, #2
    9f8e:	2130      	movs	r1, #48	; 0x30
    9f90:	4249      	negs	r1, r1
    9f92:	445c      	add	r4, fp
    9f94:	468b      	mov	fp, r1
    9f96:	0064      	lsls	r4, r4, #1
    9f98:	18e3      	adds	r3, r4, r3
    9f9a:	449b      	add	fp, r3
    9f9c:	4653      	mov	r3, sl
    9f9e:	9903      	ldr	r1, [sp, #12]
    9fa0:	785b      	ldrb	r3, [r3, #1]
    9fa2:	468a      	mov	sl, r1
    9fa4:	e69e      	b.n	9ce4 <__ssvfscanf_r+0xc8>
    9fa6:	464b      	mov	r3, r9
    9fa8:	2110      	movs	r1, #16
    9faa:	430b      	orrs	r3, r1
    9fac:	e7aa      	b.n	9f04 <__ssvfscanf_r+0x2e8>
    9fae:	9b04      	ldr	r3, [sp, #16]
    9fb0:	445b      	add	r3, fp
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	d111      	bne.n	9fda <__ssvfscanf_r+0x3be>
    9fb6:	4648      	mov	r0, r9
    9fb8:	4bb9      	ldr	r3, [pc, #740]	; (a2a0 <__ssvfscanf_r+0x684>)
    9fba:	4018      	ands	r0, r3
    9fbc:	4681      	mov	r9, r0
    9fbe:	7039      	strb	r1, [r7, #0]
    9fc0:	3701      	adds	r7, #1
    9fc2:	6873      	ldr	r3, [r6, #4]
    9fc4:	3c01      	subs	r4, #1
    9fc6:	3b01      	subs	r3, #1
    9fc8:	3501      	adds	r5, #1
    9fca:	6073      	str	r3, [r6, #4]
    9fcc:	2b00      	cmp	r3, #0
    9fce:	dd23      	ble.n	a018 <__ssvfscanf_r+0x3fc>
    9fd0:	3201      	adds	r2, #1
    9fd2:	6032      	str	r2, [r6, #0]
    9fd4:	2c00      	cmp	r4, #0
    9fd6:	d000      	beq.n	9fda <__ssvfscanf_r+0x3be>
    9fd8:	e731      	b.n	9e3e <__ssvfscanf_r+0x222>
    9fda:	465b      	mov	r3, fp
    9fdc:	46bb      	mov	fp, r7
    9fde:	002f      	movs	r7, r5
    9fe0:	001d      	movs	r5, r3
    9fe2:	9b06      	ldr	r3, [sp, #24]
    9fe4:	2b00      	cmp	r3, #0
    9fe6:	d056      	beq.n	a096 <__ssvfscanf_r+0x47a>
    9fe8:	e251      	b.n	a48e <__ssvfscanf_r+0x872>
    9fea:	464b      	mov	r3, r9
    9fec:	05db      	lsls	r3, r3, #23
    9fee:	d5de      	bpl.n	9fae <__ssvfscanf_r+0x392>
    9ff0:	2380      	movs	r3, #128	; 0x80
    9ff2:	4649      	mov	r1, r9
    9ff4:	4399      	bics	r1, r3
    9ff6:	9b06      	ldr	r3, [sp, #24]
    9ff8:	4689      	mov	r9, r1
    9ffa:	3301      	adds	r3, #1
    9ffc:	9306      	str	r3, [sp, #24]
    9ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a000:	2b00      	cmp	r3, #0
    a002:	d0de      	beq.n	9fc2 <__ssvfscanf_r+0x3a6>
    a004:	3b01      	subs	r3, #1
    a006:	930d      	str	r3, [sp, #52]	; 0x34
    a008:	6873      	ldr	r3, [r6, #4]
    a00a:	3401      	adds	r4, #1
    a00c:	3b01      	subs	r3, #1
    a00e:	3c01      	subs	r4, #1
    a010:	3501      	adds	r5, #1
    a012:	6073      	str	r3, [r6, #4]
    a014:	2b00      	cmp	r3, #0
    a016:	dcdb      	bgt.n	9fd0 <__ssvfscanf_r+0x3b4>
    a018:	0031      	movs	r1, r6
    a01a:	4640      	mov	r0, r8
    a01c:	f004 fa3c 	bl	e498 <__ssrefill_r>
    a020:	2800      	cmp	r0, #0
    a022:	d0d7      	beq.n	9fd4 <__ssvfscanf_r+0x3b8>
    a024:	e7d9      	b.n	9fda <__ssvfscanf_r+0x3be>
    a026:	2380      	movs	r3, #128	; 0x80
    a028:	4648      	mov	r0, r9
    a02a:	4203      	tst	r3, r0
    a02c:	d0d5      	beq.n	9fda <__ssvfscanf_r+0x3be>
    a02e:	4398      	bics	r0, r3
    a030:	4681      	mov	r9, r0
    a032:	e7c4      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a034:	465b      	mov	r3, fp
    a036:	2b06      	cmp	r3, #6
    a038:	d1d0      	bne.n	9fdc <__ssvfscanf_r+0x3c0>
    a03a:	2307      	movs	r3, #7
    a03c:	469b      	mov	fp, r3
    a03e:	e7be      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a040:	9b04      	ldr	r3, [sp, #16]
    a042:	2b00      	cmp	r3, #0
    a044:	d000      	beq.n	a048 <__ssvfscanf_r+0x42c>
    a046:	e121      	b.n	a28c <__ssvfscanf_r+0x670>
    a048:	9b06      	ldr	r3, [sp, #24]
    a04a:	2b00      	cmp	r3, #0
    a04c:	d106      	bne.n	a05c <__ssvfscanf_r+0x440>
    a04e:	23e0      	movs	r3, #224	; 0xe0
    a050:	4648      	mov	r0, r9
    a052:	00db      	lsls	r3, r3, #3
    a054:	4018      	ands	r0, r3
    a056:	4298      	cmp	r0, r3
    a058:	d100      	bne.n	a05c <__ssvfscanf_r+0x440>
    a05a:	e3db      	b.n	a814 <__ssvfscanf_r+0xbf8>
    a05c:	465b      	mov	r3, fp
    a05e:	2b01      	cmp	r3, #1
    a060:	d001      	beq.n	a066 <__ssvfscanf_r+0x44a>
    a062:	2b04      	cmp	r3, #4
    a064:	d1b9      	bne.n	9fda <__ssvfscanf_r+0x3be>
    a066:	465b      	mov	r3, fp
    a068:	3301      	adds	r3, #1
    a06a:	b2db      	uxtb	r3, r3
    a06c:	469b      	mov	fp, r3
    a06e:	e7a6      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a070:	465b      	mov	r3, fp
    a072:	2b00      	cmp	r3, #0
    a074:	d000      	beq.n	a078 <__ssvfscanf_r+0x45c>
    a076:	e0ff      	b.n	a278 <__ssvfscanf_r+0x65c>
    a078:	9b06      	ldr	r3, [sp, #24]
    a07a:	2b00      	cmp	r3, #0
    a07c:	d000      	beq.n	a080 <__ssvfscanf_r+0x464>
    a07e:	e202      	b.n	a486 <__ssvfscanf_r+0x86a>
    a080:	23e0      	movs	r3, #224	; 0xe0
    a082:	4648      	mov	r0, r9
    a084:	00db      	lsls	r3, r3, #3
    a086:	4018      	ands	r0, r3
    a088:	4298      	cmp	r0, r3
    a08a:	d100      	bne.n	a08e <__ssvfscanf_r+0x472>
    a08c:	e3ba      	b.n	a804 <__ssvfscanf_r+0xbe8>
    a08e:	465b      	mov	r3, fp
    a090:	46bb      	mov	fp, r7
    a092:	002f      	movs	r7, r5
    a094:	001d      	movs	r5, r3
    a096:	9b04      	ldr	r3, [sp, #16]
    a098:	3b01      	subs	r3, #1
    a09a:	2b01      	cmp	r3, #1
    a09c:	d801      	bhi.n	a0a2 <__ssvfscanf_r+0x486>
    a09e:	f000 fc63 	bl	a968 <__ssvfscanf_r+0xd4c>
    a0a2:	1e6b      	subs	r3, r5, #1
    a0a4:	2b06      	cmp	r3, #6
    a0a6:	d820      	bhi.n	a0ea <__ssvfscanf_r+0x4ce>
    a0a8:	2d02      	cmp	r5, #2
    a0aa:	d801      	bhi.n	a0b0 <__ssvfscanf_r+0x494>
    a0ac:	f000 fc6e 	bl	a98c <__ssvfscanf_r+0xd70>
    a0b0:	2d03      	cmp	r5, #3
    a0b2:	d01a      	beq.n	a0ea <__ssvfscanf_r+0x4ce>
    a0b4:	3d04      	subs	r5, #4
    a0b6:	b2ed      	uxtb	r5, r5
    a0b8:	43ec      	mvns	r4, r5
    a0ba:	0033      	movs	r3, r6
    a0bc:	445c      	add	r4, fp
    a0be:	46aa      	mov	sl, r5
    a0c0:	4646      	mov	r6, r8
    a0c2:	0025      	movs	r5, r4
    a0c4:	46b8      	mov	r8, r7
    a0c6:	465c      	mov	r4, fp
    a0c8:	001f      	movs	r7, r3
    a0ca:	3c01      	subs	r4, #1
    a0cc:	7821      	ldrb	r1, [r4, #0]
    a0ce:	003a      	movs	r2, r7
    a0d0:	0030      	movs	r0, r6
    a0d2:	f004 f99f 	bl	e414 <_sungetc_r>
    a0d6:	42a5      	cmp	r5, r4
    a0d8:	d1f7      	bne.n	a0ca <__ssvfscanf_r+0x4ae>
    a0da:	003b      	movs	r3, r7
    a0dc:	4647      	mov	r7, r8
    a0de:	4655      	mov	r5, sl
    a0e0:	46b0      	mov	r8, r6
    a0e2:	46a3      	mov	fp, r4
    a0e4:	001e      	movs	r6, r3
    a0e6:	3f01      	subs	r7, #1
    a0e8:	1b7f      	subs	r7, r7, r5
    a0ea:	464b      	mov	r3, r9
    a0ec:	05db      	lsls	r3, r3, #23
    a0ee:	d519      	bpl.n	a124 <__ssvfscanf_r+0x508>
    a0f0:	464b      	mov	r3, r9
    a0f2:	055b      	lsls	r3, r3, #21
    a0f4:	d501      	bpl.n	a0fa <__ssvfscanf_r+0x4de>
    a0f6:	f000 fc5b 	bl	a9b0 <__ssvfscanf_r+0xd94>
    a0fa:	465b      	mov	r3, fp
    a0fc:	1e5c      	subs	r4, r3, #1
    a0fe:	7821      	ldrb	r1, [r4, #0]
    a100:	1e7d      	subs	r5, r7, #1
    a102:	2965      	cmp	r1, #101	; 0x65
    a104:	d008      	beq.n	a118 <__ssvfscanf_r+0x4fc>
    a106:	2945      	cmp	r1, #69	; 0x45
    a108:	d006      	beq.n	a118 <__ssvfscanf_r+0x4fc>
    a10a:	0032      	movs	r2, r6
    a10c:	4640      	mov	r0, r8
    a10e:	3c01      	subs	r4, #1
    a110:	f004 f980 	bl	e414 <_sungetc_r>
    a114:	7821      	ldrb	r1, [r4, #0]
    a116:	1ebd      	subs	r5, r7, #2
    a118:	0032      	movs	r2, r6
    a11a:	4640      	mov	r0, r8
    a11c:	f004 f97a 	bl	e414 <_sungetc_r>
    a120:	002f      	movs	r7, r5
    a122:	46a3      	mov	fp, r4
    a124:	464a      	mov	r2, r9
    a126:	2310      	movs	r3, #16
    a128:	4013      	ands	r3, r2
    a12a:	9a03      	ldr	r2, [sp, #12]
    a12c:	4692      	mov	sl, r2
    a12e:	d000      	beq.n	a132 <__ssvfscanf_r+0x516>
    a130:	e5ba      	b.n	9ca8 <__ssvfscanf_r+0x8c>
    a132:	465a      	mov	r2, fp
    a134:	7013      	strb	r3, [r2, #0]
    a136:	23c0      	movs	r3, #192	; 0xc0
    a138:	464a      	mov	r2, r9
    a13a:	00db      	lsls	r3, r3, #3
    a13c:	4013      	ands	r3, r2
    a13e:	2280      	movs	r2, #128	; 0x80
    a140:	00d2      	lsls	r2, r2, #3
    a142:	4293      	cmp	r3, r2
    a144:	d100      	bne.n	a148 <__ssvfscanf_r+0x52c>
    a146:	e389      	b.n	a85c <__ssvfscanf_r+0xc40>
    a148:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a14a:	2b00      	cmp	r3, #0
    a14c:	d000      	beq.n	a150 <__ssvfscanf_r+0x534>
    a14e:	e1c0      	b.n	a4d2 <__ssvfscanf_r+0x8b6>
    a150:	2200      	movs	r2, #0
    a152:	990a      	ldr	r1, [sp, #40]	; 0x28
    a154:	4640      	mov	r0, r8
    a156:	f003 fe21 	bl	dd9c <_strtod_r>
    a15a:	464b      	mov	r3, r9
    a15c:	0004      	movs	r4, r0
    a15e:	000d      	movs	r5, r1
    a160:	07db      	lsls	r3, r3, #31
    a162:	d403      	bmi.n	a16c <__ssvfscanf_r+0x550>
    a164:	464b      	mov	r3, r9
    a166:	079b      	lsls	r3, r3, #30
    a168:	d400      	bmi.n	a16c <__ssvfscanf_r+0x550>
    a16a:	e198      	b.n	a49e <__ssvfscanf_r+0x882>
    a16c:	9a07      	ldr	r2, [sp, #28]
    a16e:	6813      	ldr	r3, [r2, #0]
    a170:	601c      	str	r4, [r3, #0]
    a172:	605d      	str	r5, [r3, #4]
    a174:	0013      	movs	r3, r2
    a176:	3304      	adds	r3, #4
    a178:	9307      	str	r3, [sp, #28]
    a17a:	9b08      	ldr	r3, [sp, #32]
    a17c:	3301      	adds	r3, #1
    a17e:	9308      	str	r3, [sp, #32]
    a180:	9b03      	ldr	r3, [sp, #12]
    a182:	469a      	mov	sl, r3
    a184:	4654      	mov	r4, sl
    a186:	e590      	b.n	9caa <__ssvfscanf_r+0x8e>
    a188:	465b      	mov	r3, fp
    a18a:	2b02      	cmp	r3, #2
    a18c:	d000      	beq.n	a190 <__ssvfscanf_r+0x574>
    a18e:	e725      	b.n	9fdc <__ssvfscanf_r+0x3c0>
    a190:	2303      	movs	r3, #3
    a192:	469b      	mov	fp, r3
    a194:	e713      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a196:	23a0      	movs	r3, #160	; 0xa0
    a198:	4648      	mov	r0, r9
    a19a:	00db      	lsls	r3, r3, #3
    a19c:	4003      	ands	r3, r0
    a19e:	2080      	movs	r0, #128	; 0x80
    a1a0:	00c0      	lsls	r0, r0, #3
    a1a2:	4283      	cmp	r3, r0
    a1a4:	d007      	beq.n	a1b6 <__ssvfscanf_r+0x59a>
    a1a6:	464b      	mov	r3, r9
    a1a8:	4203      	tst	r3, r0
    a1aa:	d100      	bne.n	a1ae <__ssvfscanf_r+0x592>
    a1ac:	e715      	b.n	9fda <__ssvfscanf_r+0x3be>
    a1ae:	9b06      	ldr	r3, [sp, #24]
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d100      	bne.n	a1b6 <__ssvfscanf_r+0x59a>
    a1b4:	e76b      	b.n	a08e <__ssvfscanf_r+0x472>
    a1b6:	2080      	movs	r0, #128	; 0x80
    a1b8:	464b      	mov	r3, r9
    a1ba:	0080      	lsls	r0, r0, #2
    a1bc:	4203      	tst	r3, r0
    a1be:	d104      	bne.n	a1ca <__ssvfscanf_r+0x5ae>
    a1c0:	9b06      	ldr	r3, [sp, #24]
    a1c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a1c4:	970e      	str	r7, [sp, #56]	; 0x38
    a1c6:	1a1b      	subs	r3, r3, r0
    a1c8:	930f      	str	r3, [sp, #60]	; 0x3c
    a1ca:	4648      	mov	r0, r9
    a1cc:	4b35      	ldr	r3, [pc, #212]	; (a2a4 <__ssvfscanf_r+0x688>)
    a1ce:	4018      	ands	r0, r3
    a1d0:	0003      	movs	r3, r0
    a1d2:	20c0      	movs	r0, #192	; 0xc0
    a1d4:	0040      	lsls	r0, r0, #1
    a1d6:	4318      	orrs	r0, r3
    a1d8:	2300      	movs	r3, #0
    a1da:	4681      	mov	r9, r0
    a1dc:	9306      	str	r3, [sp, #24]
    a1de:	e6ee      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a1e0:	9b04      	ldr	r3, [sp, #16]
    a1e2:	2b01      	cmp	r3, #1
    a1e4:	d000      	beq.n	a1e8 <__ssvfscanf_r+0x5cc>
    a1e6:	e6f8      	b.n	9fda <__ssvfscanf_r+0x3be>
    a1e8:	2302      	movs	r3, #2
    a1ea:	9304      	str	r3, [sp, #16]
    a1ec:	e6e7      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a1ee:	465b      	mov	r3, fp
    a1f0:	2b07      	cmp	r3, #7
    a1f2:	d000      	beq.n	a1f6 <__ssvfscanf_r+0x5da>
    a1f4:	e6f2      	b.n	9fdc <__ssvfscanf_r+0x3c0>
    a1f6:	2308      	movs	r3, #8
    a1f8:	469b      	mov	fp, r3
    a1fa:	e6e0      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a1fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a1fe:	781b      	ldrb	r3, [r3, #0]
    a200:	428b      	cmp	r3, r1
    a202:	d000      	beq.n	a206 <__ssvfscanf_r+0x5ea>
    a204:	e6e9      	b.n	9fda <__ssvfscanf_r+0x3be>
    a206:	2080      	movs	r0, #128	; 0x80
    a208:	464b      	mov	r3, r9
    a20a:	0080      	lsls	r0, r0, #2
    a20c:	4203      	tst	r3, r0
    a20e:	d100      	bne.n	a212 <__ssvfscanf_r+0x5f6>
    a210:	e6e3      	b.n	9fda <__ssvfscanf_r+0x3be>
    a212:	4825      	ldr	r0, [pc, #148]	; (a2a8 <__ssvfscanf_r+0x68c>)
    a214:	4003      	ands	r3, r0
    a216:	4699      	mov	r9, r3
    a218:	9b06      	ldr	r3, [sp, #24]
    a21a:	930b      	str	r3, [sp, #44]	; 0x2c
    a21c:	e6cf      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a21e:	2b01      	cmp	r3, #1
    a220:	d144      	bne.n	a2ac <__ssvfscanf_r+0x690>
    a222:	2c00      	cmp	r4, #0
    a224:	d100      	bne.n	a228 <__ssvfscanf_r+0x60c>
    a226:	3c01      	subs	r4, #1
    a228:	464b      	mov	r3, r9
    a22a:	06db      	lsls	r3, r3, #27
    a22c:	d400      	bmi.n	a230 <__ssvfscanf_r+0x614>
    a22e:	e1c1      	b.n	a5b4 <__ssvfscanf_r+0x998>
    a230:	ab14      	add	r3, sp, #80	; 0x50
    a232:	2500      	movs	r5, #0
    a234:	469a      	mov	sl, r3
    a236:	6832      	ldr	r2, [r6, #0]
    a238:	4651      	mov	r1, sl
    a23a:	7813      	ldrb	r3, [r2, #0]
    a23c:	5ccb      	ldrb	r3, [r1, r3]
    a23e:	2b00      	cmp	r3, #0
    a240:	d015      	beq.n	a26e <__ssvfscanf_r+0x652>
    a242:	6873      	ldr	r3, [r6, #4]
    a244:	3201      	adds	r2, #1
    a246:	3b01      	subs	r3, #1
    a248:	3501      	adds	r5, #1
    a24a:	6073      	str	r3, [r6, #4]
    a24c:	6032      	str	r2, [r6, #0]
    a24e:	42ac      	cmp	r4, r5
    a250:	d010      	beq.n	a274 <__ssvfscanf_r+0x658>
    a252:	2b00      	cmp	r3, #0
    a254:	dcf0      	bgt.n	a238 <__ssvfscanf_r+0x61c>
    a256:	0031      	movs	r1, r6
    a258:	4640      	mov	r0, r8
    a25a:	f004 f91d 	bl	e498 <__ssrefill_r>
    a25e:	2800      	cmp	r0, #0
    a260:	d108      	bne.n	a274 <__ssvfscanf_r+0x658>
    a262:	4651      	mov	r1, sl
    a264:	6832      	ldr	r2, [r6, #0]
    a266:	7813      	ldrb	r3, [r2, #0]
    a268:	5ccb      	ldrb	r3, [r1, r3]
    a26a:	2b00      	cmp	r3, #0
    a26c:	d1e9      	bne.n	a242 <__ssvfscanf_r+0x626>
    a26e:	2d00      	cmp	r5, #0
    a270:	d100      	bne.n	a274 <__ssvfscanf_r+0x658>
    a272:	e520      	b.n	9cb6 <__ssvfscanf_r+0x9a>
    a274:	197f      	adds	r7, r7, r5
    a276:	e783      	b.n	a180 <__ssvfscanf_r+0x564>
    a278:	465b      	mov	r3, fp
    a27a:	20fd      	movs	r0, #253	; 0xfd
    a27c:	3b03      	subs	r3, #3
    a27e:	4203      	tst	r3, r0
    a280:	d000      	beq.n	a284 <__ssvfscanf_r+0x668>
    a282:	e6aa      	b.n	9fda <__ssvfscanf_r+0x3be>
    a284:	3304      	adds	r3, #4
    a286:	b2db      	uxtb	r3, r3
    a288:	469b      	mov	fp, r3
    a28a:	e698      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a28c:	9b04      	ldr	r3, [sp, #16]
    a28e:	2b02      	cmp	r3, #2
    a290:	d000      	beq.n	a294 <__ssvfscanf_r+0x678>
    a292:	e6e3      	b.n	a05c <__ssvfscanf_r+0x440>
    a294:	2303      	movs	r3, #3
    a296:	9304      	str	r3, [sp, #16]
    a298:	e691      	b.n	9fbe <__ssvfscanf_r+0x3a2>
    a29a:	46c0      	nop			; (mov r8, r8)
    a29c:	000085f1 	.word	0x000085f1
    a2a0:	fffffe7f 	.word	0xfffffe7f
    a2a4:	fffff87f 	.word	0xfffff87f
    a2a8:	fffffd7f 	.word	0xfffffd7f
    a2ac:	2c00      	cmp	r4, #0
    a2ae:	d100      	bne.n	a2b2 <__ssvfscanf_r+0x696>
    a2b0:	3401      	adds	r4, #1
    a2b2:	464b      	mov	r3, r9
    a2b4:	07db      	lsls	r3, r3, #31
    a2b6:	d500      	bpl.n	a2ba <__ssvfscanf_r+0x69e>
    a2b8:	e1aa      	b.n	a610 <__ssvfscanf_r+0x9f4>
    a2ba:	464b      	mov	r3, r9
    a2bc:	06db      	lsls	r3, r3, #27
    a2be:	d400      	bmi.n	a2c2 <__ssvfscanf_r+0x6a6>
    a2c0:	e22f      	b.n	a722 <__ssvfscanf_r+0xb06>
    a2c2:	4643      	mov	r3, r8
    a2c4:	2500      	movs	r5, #0
    a2c6:	46b8      	mov	r8, r7
    a2c8:	001f      	movs	r7, r3
    a2ca:	e00c      	b.n	a2e6 <__ssvfscanf_r+0x6ca>
    a2cc:	6832      	ldr	r2, [r6, #0]
    a2ce:	18ed      	adds	r5, r5, r3
    a2d0:	4694      	mov	ip, r2
    a2d2:	1ae4      	subs	r4, r4, r3
    a2d4:	4463      	add	r3, ip
    a2d6:	6033      	str	r3, [r6, #0]
    a2d8:	0031      	movs	r1, r6
    a2da:	0038      	movs	r0, r7
    a2dc:	f004 f8dc 	bl	e498 <__ssrefill_r>
    a2e0:	2800      	cmp	r0, #0
    a2e2:	d000      	beq.n	a2e6 <__ssvfscanf_r+0x6ca>
    a2e4:	e214      	b.n	a710 <__ssvfscanf_r+0xaf4>
    a2e6:	6873      	ldr	r3, [r6, #4]
    a2e8:	42a3      	cmp	r3, r4
    a2ea:	dbef      	blt.n	a2cc <__ssvfscanf_r+0x6b0>
    a2ec:	1b1b      	subs	r3, r3, r4
    a2ee:	6073      	str	r3, [r6, #4]
    a2f0:	6833      	ldr	r3, [r6, #0]
    a2f2:	003a      	movs	r2, r7
    a2f4:	469c      	mov	ip, r3
    a2f6:	4647      	mov	r7, r8
    a2f8:	192d      	adds	r5, r5, r4
    a2fa:	4464      	add	r4, ip
    a2fc:	4690      	mov	r8, r2
    a2fe:	6034      	str	r4, [r6, #0]
    a300:	197f      	adds	r7, r7, r5
    a302:	e73d      	b.n	a180 <__ssvfscanf_r+0x564>
    a304:	22ae      	movs	r2, #174	; 0xae
    a306:	2100      	movs	r1, #0
    a308:	1e63      	subs	r3, r4, #1
    a30a:	0052      	lsls	r2, r2, #1
    a30c:	468b      	mov	fp, r1
    a30e:	4293      	cmp	r3, r2
    a310:	d904      	bls.n	a31c <__ssvfscanf_r+0x700>
    a312:	4bcb      	ldr	r3, [pc, #812]	; (a640 <__ssvfscanf_r+0xa24>)
    a314:	469b      	mov	fp, r3
    a316:	44a3      	add	fp, r4
    a318:	245e      	movs	r4, #94	; 0x5e
    a31a:	34ff      	adds	r4, #255	; 0xff
    a31c:	23d8      	movs	r3, #216	; 0xd8
    a31e:	464a      	mov	r2, r9
    a320:	011b      	lsls	r3, r3, #4
    a322:	431a      	orrs	r2, r3
    a324:	2300      	movs	r3, #0
    a326:	469a      	mov	sl, r3
    a328:	ab54      	add	r3, sp, #336	; 0x150
    a32a:	930a      	str	r3, [sp, #40]	; 0x28
    a32c:	001d      	movs	r5, r3
    a32e:	003b      	movs	r3, r7
    a330:	0017      	movs	r7, r2
    a332:	4699      	mov	r9, r3
    a334:	6832      	ldr	r2, [r6, #0]
    a336:	7811      	ldrb	r1, [r2, #0]
    a338:	000b      	movs	r3, r1
    a33a:	3b2b      	subs	r3, #43	; 0x2b
    a33c:	b2db      	uxtb	r3, r3
    a33e:	2b4d      	cmp	r3, #77	; 0x4d
    a340:	d81d      	bhi.n	a37e <__ssvfscanf_r+0x762>
    a342:	48c0      	ldr	r0, [pc, #768]	; (a644 <__ssvfscanf_r+0xa28>)
    a344:	009b      	lsls	r3, r3, #2
    a346:	58c3      	ldr	r3, [r0, r3]
    a348:	469f      	mov	pc, r3
    a34a:	23c0      	movs	r3, #192	; 0xc0
    a34c:	2080      	movs	r0, #128	; 0x80
    a34e:	00db      	lsls	r3, r3, #3
    a350:	403b      	ands	r3, r7
    a352:	0080      	lsls	r0, r0, #2
    a354:	4283      	cmp	r3, r0
    a356:	d112      	bne.n	a37e <__ssvfscanf_r+0x762>
    a358:	4bbb      	ldr	r3, [pc, #748]	; (a648 <__ssvfscanf_r+0xa2c>)
    a35a:	401f      	ands	r7, r3
    a35c:	23a0      	movs	r3, #160	; 0xa0
    a35e:	00db      	lsls	r3, r3, #3
    a360:	431f      	orrs	r7, r3
    a362:	2310      	movs	r3, #16
    a364:	9305      	str	r3, [sp, #20]
    a366:	6873      	ldr	r3, [r6, #4]
    a368:	7029      	strb	r1, [r5, #0]
    a36a:	3b01      	subs	r3, #1
    a36c:	3501      	adds	r5, #1
    a36e:	6073      	str	r3, [r6, #4]
    a370:	2b00      	cmp	r3, #0
    a372:	dd49      	ble.n	a408 <__ssvfscanf_r+0x7ec>
    a374:	3201      	adds	r2, #1
    a376:	6032      	str	r2, [r6, #0]
    a378:	3c01      	subs	r4, #1
    a37a:	2c00      	cmp	r4, #0
    a37c:	d1da      	bne.n	a334 <__ssvfscanf_r+0x718>
    a37e:	464b      	mov	r3, r9
    a380:	46b9      	mov	r9, r7
    a382:	001f      	movs	r7, r3
    a384:	464b      	mov	r3, r9
    a386:	05db      	lsls	r3, r3, #23
    a388:	d507      	bpl.n	a39a <__ssvfscanf_r+0x77e>
    a38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a38c:	429d      	cmp	r5, r3
    a38e:	d900      	bls.n	a392 <__ssvfscanf_r+0x776>
    a390:	e231      	b.n	a7f6 <__ssvfscanf_r+0xbda>
    a392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a394:	429d      	cmp	r5, r3
    a396:	d100      	bne.n	a39a <__ssvfscanf_r+0x77e>
    a398:	e48d      	b.n	9cb6 <__ssvfscanf_r+0x9a>
    a39a:	2310      	movs	r3, #16
    a39c:	464a      	mov	r2, r9
    a39e:	4013      	ands	r3, r2
    a3a0:	d100      	bne.n	a3a4 <__ssvfscanf_r+0x788>
    a3a2:	e0b7      	b.n	a514 <__ssvfscanf_r+0x8f8>
    a3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a3a6:	1aed      	subs	r5, r5, r3
    a3a8:	4455      	add	r5, sl
    a3aa:	197f      	adds	r7, r7, r5
    a3ac:	e6e8      	b.n	a180 <__ssvfscanf_r+0x564>
    a3ae:	9b05      	ldr	r3, [sp, #20]
    a3b0:	2b0a      	cmp	r3, #10
    a3b2:	dde4      	ble.n	a37e <__ssvfscanf_r+0x762>
    a3b4:	4ba5      	ldr	r3, [pc, #660]	; (a64c <__ssvfscanf_r+0xa30>)
    a3b6:	401f      	ands	r7, r3
    a3b8:	e7d5      	b.n	a366 <__ssvfscanf_r+0x74a>
    a3ba:	9b05      	ldr	r3, [sp, #20]
    a3bc:	48a4      	ldr	r0, [pc, #656]	; (a650 <__ssvfscanf_r+0xa34>)
    a3be:	005b      	lsls	r3, r3, #1
    a3c0:	5e1b      	ldrsh	r3, [r3, r0]
    a3c2:	9305      	str	r3, [sp, #20]
    a3c4:	4ba1      	ldr	r3, [pc, #644]	; (a64c <__ssvfscanf_r+0xa30>)
    a3c6:	401f      	ands	r7, r3
    a3c8:	e7cd      	b.n	a366 <__ssvfscanf_r+0x74a>
    a3ca:	053b      	lsls	r3, r7, #20
    a3cc:	d5cb      	bpl.n	a366 <__ssvfscanf_r+0x74a>
    a3ce:	9b05      	ldr	r3, [sp, #20]
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	d105      	bne.n	a3e0 <__ssvfscanf_r+0x7c4>
    a3d4:	2380      	movs	r3, #128	; 0x80
    a3d6:	009b      	lsls	r3, r3, #2
    a3d8:	431f      	orrs	r7, r3
    a3da:	3bf9      	subs	r3, #249	; 0xf9
    a3dc:	3bff      	subs	r3, #255	; 0xff
    a3de:	9305      	str	r3, [sp, #20]
    a3e0:	057b      	lsls	r3, r7, #21
    a3e2:	d459      	bmi.n	a498 <__ssvfscanf_r+0x87c>
    a3e4:	4b9b      	ldr	r3, [pc, #620]	; (a654 <__ssvfscanf_r+0xa38>)
    a3e6:	401f      	ands	r7, r3
    a3e8:	465b      	mov	r3, fp
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d004      	beq.n	a3f8 <__ssvfscanf_r+0x7dc>
    a3ee:	2301      	movs	r3, #1
    a3f0:	425b      	negs	r3, r3
    a3f2:	469c      	mov	ip, r3
    a3f4:	3401      	adds	r4, #1
    a3f6:	44e3      	add	fp, ip
    a3f8:	2301      	movs	r3, #1
    a3fa:	469c      	mov	ip, r3
    a3fc:	6873      	ldr	r3, [r6, #4]
    a3fe:	44e2      	add	sl, ip
    a400:	3b01      	subs	r3, #1
    a402:	6073      	str	r3, [r6, #4]
    a404:	2b00      	cmp	r3, #0
    a406:	dcb5      	bgt.n	a374 <__ssvfscanf_r+0x758>
    a408:	0031      	movs	r1, r6
    a40a:	4640      	mov	r0, r8
    a40c:	f004 f844 	bl	e498 <__ssrefill_r>
    a410:	2800      	cmp	r0, #0
    a412:	d0b1      	beq.n	a378 <__ssvfscanf_r+0x75c>
    a414:	e7b3      	b.n	a37e <__ssvfscanf_r+0x762>
    a416:	9b05      	ldr	r3, [sp, #20]
    a418:	488d      	ldr	r0, [pc, #564]	; (a650 <__ssvfscanf_r+0xa34>)
    a41a:	005b      	lsls	r3, r3, #1
    a41c:	5e1b      	ldrsh	r3, [r3, r0]
    a41e:	9305      	str	r3, [sp, #20]
    a420:	2b08      	cmp	r3, #8
    a422:	dcc7      	bgt.n	a3b4 <__ssvfscanf_r+0x798>
    a424:	e7ab      	b.n	a37e <__ssvfscanf_r+0x762>
    a426:	2380      	movs	r3, #128	; 0x80
    a428:	423b      	tst	r3, r7
    a42a:	d0a8      	beq.n	a37e <__ssvfscanf_r+0x762>
    a42c:	439f      	bics	r7, r3
    a42e:	e79a      	b.n	a366 <__ssvfscanf_r+0x74a>
    a430:	2c00      	cmp	r4, #0
    a432:	d100      	bne.n	a436 <__ssvfscanf_r+0x81a>
    a434:	3c01      	subs	r4, #1
    a436:	2501      	movs	r5, #1
    a438:	464b      	mov	r3, r9
    a43a:	401d      	ands	r5, r3
    a43c:	d000      	beq.n	a440 <__ssvfscanf_r+0x824>
    a43e:	e093      	b.n	a568 <__ssvfscanf_r+0x94c>
    a440:	464b      	mov	r3, r9
    a442:	06db      	lsls	r3, r3, #27
    a444:	d400      	bmi.n	a448 <__ssvfscanf_r+0x82c>
    a446:	e183      	b.n	a750 <__ssvfscanf_r+0xb34>
    a448:	2308      	movs	r3, #8
    a44a:	4699      	mov	r9, r3
    a44c:	f001 fcb8 	bl	bdc0 <__locale_ctype_ptr>
    a450:	4649      	mov	r1, r9
    a452:	6833      	ldr	r3, [r6, #0]
    a454:	781a      	ldrb	r2, [r3, #0]
    a456:	1880      	adds	r0, r0, r2
    a458:	7842      	ldrb	r2, [r0, #1]
    a45a:	4211      	tst	r1, r2
    a45c:	d000      	beq.n	a460 <__ssvfscanf_r+0x844>
    a45e:	e709      	b.n	a274 <__ssvfscanf_r+0x658>
    a460:	6872      	ldr	r2, [r6, #4]
    a462:	3301      	adds	r3, #1
    a464:	3a01      	subs	r2, #1
    a466:	3501      	adds	r5, #1
    a468:	6072      	str	r2, [r6, #4]
    a46a:	6033      	str	r3, [r6, #0]
    a46c:	42ac      	cmp	r4, r5
    a46e:	d100      	bne.n	a472 <__ssvfscanf_r+0x856>
    a470:	e700      	b.n	a274 <__ssvfscanf_r+0x658>
    a472:	2a00      	cmp	r2, #0
    a474:	dcea      	bgt.n	a44c <__ssvfscanf_r+0x830>
    a476:	0031      	movs	r1, r6
    a478:	4640      	mov	r0, r8
    a47a:	f004 f80d 	bl	e498 <__ssrefill_r>
    a47e:	2800      	cmp	r0, #0
    a480:	d0e4      	beq.n	a44c <__ssvfscanf_r+0x830>
    a482:	197f      	adds	r7, r7, r5
    a484:	e67c      	b.n	a180 <__ssvfscanf_r+0x564>
    a486:	465b      	mov	r3, fp
    a488:	46bb      	mov	fp, r7
    a48a:	002f      	movs	r7, r5
    a48c:	001d      	movs	r5, r3
    a48e:	464a      	mov	r2, r9
    a490:	4b71      	ldr	r3, [pc, #452]	; (a658 <__ssvfscanf_r+0xa3c>)
    a492:	401a      	ands	r2, r3
    a494:	4691      	mov	r9, r2
    a496:	e5fe      	b.n	a096 <__ssvfscanf_r+0x47a>
    a498:	4b70      	ldr	r3, [pc, #448]	; (a65c <__ssvfscanf_r+0xa40>)
    a49a:	401f      	ands	r7, r3
    a49c:	e763      	b.n	a366 <__ssvfscanf_r+0x74a>
    a49e:	9b07      	ldr	r3, [sp, #28]
    a4a0:	1d1a      	adds	r2, r3, #4
    a4a2:	681b      	ldr	r3, [r3, #0]
    a4a4:	4692      	mov	sl, r2
    a4a6:	4699      	mov	r9, r3
    a4a8:	0002      	movs	r2, r0
    a4aa:	000b      	movs	r3, r1
    a4ac:	f004 ff7e 	bl	f3ac <__aeabi_dcmpun>
    a4b0:	2800      	cmp	r0, #0
    a4b2:	d000      	beq.n	a4b6 <__ssvfscanf_r+0x89a>
    a4b4:	e28e      	b.n	a9d4 <__ssvfscanf_r+0xdb8>
    a4b6:	0020      	movs	r0, r4
    a4b8:	0029      	movs	r1, r5
    a4ba:	f004 ff97 	bl	f3ec <__aeabi_d2f>
    a4be:	464b      	mov	r3, r9
    a4c0:	6018      	str	r0, [r3, #0]
    a4c2:	4653      	mov	r3, sl
    a4c4:	9307      	str	r3, [sp, #28]
    a4c6:	e658      	b.n	a17a <__ssvfscanf_r+0x55e>
    a4c8:	464a      	mov	r2, r9
    a4ca:	431a      	orrs	r2, r3
    a4cc:	4691      	mov	r9, r2
    a4ce:	4b64      	ldr	r3, [pc, #400]	; (a660 <__ssvfscanf_r+0xa44>)
    a4d0:	e472      	b.n	9db8 <__ssvfscanf_r+0x19c>
    a4d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    a4d4:	2200      	movs	r2, #0
    a4d6:	1c59      	adds	r1, r3, #1
    a4d8:	4640      	mov	r0, r8
    a4da:	230a      	movs	r3, #10
    a4dc:	f7fe f888 	bl	85f0 <_strtol_r>
    a4e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a4e2:	1ac2      	subs	r2, r0, r3
    a4e4:	a90e      	add	r1, sp, #56	; 0x38
    a4e6:	468c      	mov	ip, r1
    a4e8:	4b5e      	ldr	r3, [pc, #376]	; (a664 <__ssvfscanf_r+0xa48>)
    a4ea:	990e      	ldr	r1, [sp, #56]	; 0x38
    a4ec:	4463      	add	r3, ip
    a4ee:	4299      	cmp	r1, r3
    a4f0:	d302      	bcc.n	a4f8 <__ssvfscanf_r+0x8dc>
    a4f2:	4b5d      	ldr	r3, [pc, #372]	; (a668 <__ssvfscanf_r+0xa4c>)
    a4f4:	4463      	add	r3, ip
    a4f6:	930e      	str	r3, [sp, #56]	; 0x38
    a4f8:	495c      	ldr	r1, [pc, #368]	; (a66c <__ssvfscanf_r+0xa50>)
    a4fa:	980e      	ldr	r0, [sp, #56]	; 0x38
    a4fc:	f002 fcc8 	bl	ce90 <sprintf>
    a500:	e626      	b.n	a150 <__ssvfscanf_r+0x534>
    a502:	9a07      	ldr	r2, [sp, #28]
    a504:	4654      	mov	r4, sl
    a506:	6813      	ldr	r3, [r2, #0]
    a508:	601f      	str	r7, [r3, #0]
    a50a:	0013      	movs	r3, r2
    a50c:	3304      	adds	r3, #4
    a50e:	9307      	str	r3, [sp, #28]
    a510:	f7ff fbcb 	bl	9caa <__ssvfscanf_r+0x8e>
    a514:	702b      	strb	r3, [r5, #0]
    a516:	2200      	movs	r2, #0
    a518:	9b05      	ldr	r3, [sp, #20]
    a51a:	990a      	ldr	r1, [sp, #40]	; 0x28
    a51c:	4640      	mov	r0, r8
    a51e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a520:	47a0      	blx	r4
    a522:	464b      	mov	r3, r9
    a524:	069b      	lsls	r3, r3, #26
    a526:	d500      	bpl.n	a52a <__ssvfscanf_r+0x90e>
    a528:	e15b      	b.n	a7e2 <__ssvfscanf_r+0xbc6>
    a52a:	464b      	mov	r3, r9
    a52c:	075b      	lsls	r3, r3, #29
    a52e:	d500      	bpl.n	a532 <__ssvfscanf_r+0x916>
    a530:	e1c6      	b.n	a8c0 <__ssvfscanf_r+0xca4>
    a532:	464b      	mov	r3, r9
    a534:	07db      	lsls	r3, r3, #31
    a536:	d500      	bpl.n	a53a <__ssvfscanf_r+0x91e>
    a538:	e153      	b.n	a7e2 <__ssvfscanf_r+0xbc6>
    a53a:	464b      	mov	r3, r9
    a53c:	079b      	lsls	r3, r3, #30
    a53e:	d400      	bmi.n	a542 <__ssvfscanf_r+0x926>
    a540:	e14f      	b.n	a7e2 <__ssvfscanf_r+0xbc6>
    a542:	4b4b      	ldr	r3, [pc, #300]	; (a670 <__ssvfscanf_r+0xa54>)
    a544:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a546:	429a      	cmp	r2, r3
    a548:	d100      	bne.n	a54c <__ssvfscanf_r+0x930>
    a54a:	e1b2      	b.n	a8b2 <__ssvfscanf_r+0xc96>
    a54c:	9b05      	ldr	r3, [sp, #20]
    a54e:	2200      	movs	r2, #0
    a550:	990a      	ldr	r1, [sp, #40]	; 0x28
    a552:	4640      	mov	r0, r8
    a554:	f003 fd10 	bl	df78 <_strtoll_r>
    a558:	9a07      	ldr	r2, [sp, #28]
    a55a:	6813      	ldr	r3, [r2, #0]
    a55c:	6018      	str	r0, [r3, #0]
    a55e:	6059      	str	r1, [r3, #4]
    a560:	0013      	movs	r3, r2
    a562:	3304      	adds	r3, #4
    a564:	9307      	str	r3, [sp, #28]
    a566:	e142      	b.n	a7ee <__ssvfscanf_r+0xbd2>
    a568:	ab12      	add	r3, sp, #72	; 0x48
    a56a:	2208      	movs	r2, #8
    a56c:	0018      	movs	r0, r3
    a56e:	2100      	movs	r1, #0
    a570:	9306      	str	r3, [sp, #24]
    a572:	f7fd fb7b 	bl	7c6c <memset>
    a576:	2310      	movs	r3, #16
    a578:	464a      	mov	r2, r9
    a57a:	401a      	ands	r2, r3
    a57c:	ab11      	add	r3, sp, #68	; 0x44
    a57e:	4693      	mov	fp, r2
    a580:	4699      	mov	r9, r3
    a582:	2a00      	cmp	r2, #0
    a584:	d100      	bne.n	a588 <__ssvfscanf_r+0x96c>
    a586:	e17f      	b.n	a888 <__ssvfscanf_r+0xc6c>
    a588:	2300      	movs	r3, #0
    a58a:	001d      	movs	r5, r3
    a58c:	f001 fc18 	bl	bdc0 <__locale_ctype_ptr>
    a590:	2208      	movs	r2, #8
    a592:	6833      	ldr	r3, [r6, #0]
    a594:	781b      	ldrb	r3, [r3, #0]
    a596:	18c0      	adds	r0, r0, r3
    a598:	7843      	ldrb	r3, [r0, #1]
    a59a:	421a      	tst	r2, r3
    a59c:	d102      	bne.n	a5a4 <__ssvfscanf_r+0x988>
    a59e:	2c00      	cmp	r4, #0
    a5a0:	d000      	beq.n	a5a4 <__ssvfscanf_r+0x988>
    a5a2:	e194      	b.n	a8ce <__ssvfscanf_r+0xcb2>
    a5a4:	465b      	mov	r3, fp
    a5a6:	2b00      	cmp	r3, #0
    a5a8:	d000      	beq.n	a5ac <__ssvfscanf_r+0x990>
    a5aa:	e5e9      	b.n	a180 <__ssvfscanf_r+0x564>
    a5ac:	464b      	mov	r3, r9
    a5ae:	465a      	mov	r2, fp
    a5b0:	601a      	str	r2, [r3, #0]
    a5b2:	e5e2      	b.n	a17a <__ssvfscanf_r+0x55e>
    a5b4:	9b07      	ldr	r3, [sp, #28]
    a5b6:	3c01      	subs	r4, #1
    a5b8:	1d1a      	adds	r2, r3, #4
    a5ba:	681b      	ldr	r3, [r3, #0]
    a5bc:	4693      	mov	fp, r2
    a5be:	4699      	mov	r9, r3
    a5c0:	001a      	movs	r2, r3
    a5c2:	444c      	add	r4, r9
    a5c4:	ab14      	add	r3, sp, #80	; 0x50
    a5c6:	46ba      	mov	sl, r7
    a5c8:	001d      	movs	r5, r3
    a5ca:	0027      	movs	r7, r4
    a5cc:	6833      	ldr	r3, [r6, #0]
    a5ce:	7819      	ldrb	r1, [r3, #0]
    a5d0:	5c69      	ldrb	r1, [r5, r1]
    a5d2:	2900      	cmp	r1, #0
    a5d4:	d100      	bne.n	a5d8 <__ssvfscanf_r+0x9bc>
    a5d6:	e13e      	b.n	a856 <__ssvfscanf_r+0xc3a>
    a5d8:	6871      	ldr	r1, [r6, #4]
    a5da:	1c54      	adds	r4, r2, #1
    a5dc:	3901      	subs	r1, #1
    a5de:	6071      	str	r1, [r6, #4]
    a5e0:	1c59      	adds	r1, r3, #1
    a5e2:	6031      	str	r1, [r6, #0]
    a5e4:	781b      	ldrb	r3, [r3, #0]
    a5e6:	7013      	strb	r3, [r2, #0]
    a5e8:	42ba      	cmp	r2, r7
    a5ea:	d100      	bne.n	a5ee <__ssvfscanf_r+0x9d2>
    a5ec:	e124      	b.n	a838 <__ssvfscanf_r+0xc1c>
    a5ee:	6873      	ldr	r3, [r6, #4]
    a5f0:	2b00      	cmp	r3, #0
    a5f2:	dd01      	ble.n	a5f8 <__ssvfscanf_r+0x9dc>
    a5f4:	0022      	movs	r2, r4
    a5f6:	e7e9      	b.n	a5cc <__ssvfscanf_r+0x9b0>
    a5f8:	0031      	movs	r1, r6
    a5fa:	4640      	mov	r0, r8
    a5fc:	f003 ff4c 	bl	e498 <__ssrefill_r>
    a600:	2800      	cmp	r0, #0
    a602:	d0f7      	beq.n	a5f4 <__ssvfscanf_r+0x9d8>
    a604:	4657      	mov	r7, sl
    a606:	45a1      	cmp	r9, r4
    a608:	d000      	beq.n	a60c <__ssvfscanf_r+0x9f0>
    a60a:	e116      	b.n	a83a <__ssvfscanf_r+0xc1e>
    a60c:	f7ff fba0 	bl	9d50 <__ssvfscanf_r+0x134>
    a610:	ab12      	add	r3, sp, #72	; 0x48
    a612:	2208      	movs	r2, #8
    a614:	0018      	movs	r0, r3
    a616:	2100      	movs	r1, #0
    a618:	9306      	str	r3, [sp, #24]
    a61a:	f7fd fb27 	bl	7c6c <memset>
    a61e:	2310      	movs	r3, #16
    a620:	464a      	mov	r2, r9
    a622:	401a      	ands	r2, r3
    a624:	9204      	str	r2, [sp, #16]
    a626:	d100      	bne.n	a62a <__ssvfscanf_r+0xa0e>
    a628:	e124      	b.n	a874 <__ssvfscanf_r+0xc58>
    a62a:	2300      	movs	r3, #0
    a62c:	469b      	mov	fp, r3
    a62e:	2c00      	cmp	r4, #0
    a630:	d100      	bne.n	a634 <__ssvfscanf_r+0xa18>
    a632:	e5a5      	b.n	a180 <__ssvfscanf_r+0x564>
    a634:	9b06      	ldr	r3, [sp, #24]
    a636:	46b9      	mov	r9, r7
    a638:	2500      	movs	r5, #0
    a63a:	0027      	movs	r7, r4
    a63c:	469a      	mov	sl, r3
    a63e:	e02a      	b.n	a696 <__ssvfscanf_r+0xa7a>
    a640:	fffffea3 	.word	0xfffffea3
    a644:	00012248 	.word	0x00012248
    a648:	fffffdff 	.word	0xfffffdff
    a64c:	fffff47f 	.word	0xfffff47f
    a650:	00012388 	.word	0x00012388
    a654:	fffffc7f 	.word	0xfffffc7f
    a658:	fffffeff 	.word	0xfffffeff
    a65c:	fffffa7f 	.word	0xfffffa7f
    a660:	000085f1 	.word	0x000085f1
    a664:	0000026b 	.word	0x0000026b
    a668:	0000026a 	.word	0x0000026a
    a66c:	00012380 	.word	0x00012380
    a670:	0000e0e9 	.word	0x0000e0e9
    a674:	9b04      	ldr	r3, [sp, #16]
    a676:	2b00      	cmp	r3, #0
    a678:	d146      	bne.n	a708 <__ssvfscanf_r+0xaec>
    a67a:	465a      	mov	r2, fp
    a67c:	44a1      	add	r9, r4
    a67e:	6013      	str	r3, [r2, #0]
    a680:	3f01      	subs	r7, #1
    a682:	2304      	movs	r3, #4
    a684:	469c      	mov	ip, r3
    a686:	2500      	movs	r5, #0
    a688:	44e3      	add	fp, ip
    a68a:	6873      	ldr	r3, [r6, #4]
    a68c:	2b00      	cmp	r3, #0
    a68e:	dd2f      	ble.n	a6f0 <__ssvfscanf_r+0xad4>
    a690:	2f00      	cmp	r7, #0
    a692:	d100      	bne.n	a696 <__ssvfscanf_r+0xa7a>
    a694:	e0fe      	b.n	a894 <__ssvfscanf_r+0xc78>
    a696:	f001 fb7f 	bl	bd98 <__locale_mb_cur_max>
    a69a:	42a8      	cmp	r0, r5
    a69c:	d101      	bne.n	a6a2 <__ssvfscanf_r+0xa86>
    a69e:	f7ff fb57 	bl	9d50 <__ssvfscanf_r+0x134>
    a6a2:	208c      	movs	r0, #140	; 0x8c
    a6a4:	6833      	ldr	r3, [r6, #0]
    a6a6:	0040      	lsls	r0, r0, #1
    a6a8:	781a      	ldrb	r2, [r3, #0]
    a6aa:	3301      	adds	r3, #1
    a6ac:	6033      	str	r3, [r6, #0]
    a6ae:	4653      	mov	r3, sl
    a6b0:	a90e      	add	r1, sp, #56	; 0x38
    a6b2:	1809      	adds	r1, r1, r0
    a6b4:	554a      	strb	r2, [r1, r5]
    a6b6:	6872      	ldr	r2, [r6, #4]
    a6b8:	1c6c      	adds	r4, r5, #1
    a6ba:	3a01      	subs	r2, #1
    a6bc:	6072      	str	r2, [r6, #4]
    a6be:	4659      	mov	r1, fp
    a6c0:	9300      	str	r3, [sp, #0]
    a6c2:	aa54      	add	r2, sp, #336	; 0x150
    a6c4:	0023      	movs	r3, r4
    a6c6:	4640      	mov	r0, r8
    a6c8:	f001 fe50 	bl	c36c <_mbrtowc_r>
    a6cc:	1c43      	adds	r3, r0, #1
    a6ce:	d101      	bne.n	a6d4 <__ssvfscanf_r+0xab8>
    a6d0:	f7ff fb3e 	bl	9d50 <__ssvfscanf_r+0x134>
    a6d4:	2800      	cmp	r0, #0
    a6d6:	d0cd      	beq.n	a674 <__ssvfscanf_r+0xa58>
    a6d8:	0025      	movs	r5, r4
    a6da:	1c83      	adds	r3, r0, #2
    a6dc:	d0d5      	beq.n	a68a <__ssvfscanf_r+0xa6e>
    a6de:	9b04      	ldr	r3, [sp, #16]
    a6e0:	44a1      	add	r9, r4
    a6e2:	3f01      	subs	r7, #1
    a6e4:	2500      	movs	r5, #0
    a6e6:	2b00      	cmp	r3, #0
    a6e8:	d0cb      	beq.n	a682 <__ssvfscanf_r+0xa66>
    a6ea:	6873      	ldr	r3, [r6, #4]
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	dccf      	bgt.n	a690 <__ssvfscanf_r+0xa74>
    a6f0:	0031      	movs	r1, r6
    a6f2:	4640      	mov	r0, r8
    a6f4:	f003 fed0 	bl	e498 <__ssrefill_r>
    a6f8:	2800      	cmp	r0, #0
    a6fa:	d0c9      	beq.n	a690 <__ssvfscanf_r+0xa74>
    a6fc:	464f      	mov	r7, r9
    a6fe:	2d00      	cmp	r5, #0
    a700:	d100      	bne.n	a704 <__ssvfscanf_r+0xae8>
    a702:	e0c8      	b.n	a896 <__ssvfscanf_r+0xc7a>
    a704:	f7ff fb24 	bl	9d50 <__ssvfscanf_r+0x134>
    a708:	44a1      	add	r9, r4
    a70a:	3f01      	subs	r7, #1
    a70c:	2500      	movs	r5, #0
    a70e:	e7bc      	b.n	a68a <__ssvfscanf_r+0xa6e>
    a710:	003b      	movs	r3, r7
    a712:	4647      	mov	r7, r8
    a714:	4698      	mov	r8, r3
    a716:	2d00      	cmp	r5, #0
    a718:	d101      	bne.n	a71e <__ssvfscanf_r+0xb02>
    a71a:	f7ff fb19 	bl	9d50 <__ssvfscanf_r+0x134>
    a71e:	197f      	adds	r7, r7, r5
    a720:	e52e      	b.n	a180 <__ssvfscanf_r+0x564>
    a722:	9b07      	ldr	r3, [sp, #28]
    a724:	2201      	movs	r2, #1
    a726:	6819      	ldr	r1, [r3, #0]
    a728:	1d1d      	adds	r5, r3, #4
    a72a:	9600      	str	r6, [sp, #0]
    a72c:	0023      	movs	r3, r4
    a72e:	4640      	mov	r0, r8
    a730:	f003 fed2 	bl	e4d8 <_sfread_r>
    a734:	2800      	cmp	r0, #0
    a736:	d101      	bne.n	a73c <__ssvfscanf_r+0xb20>
    a738:	f7ff fb0a 	bl	9d50 <__ssvfscanf_r+0x134>
    a73c:	9b08      	ldr	r3, [sp, #32]
    a73e:	183f      	adds	r7, r7, r0
    a740:	3301      	adds	r3, #1
    a742:	9308      	str	r3, [sp, #32]
    a744:	9b03      	ldr	r3, [sp, #12]
    a746:	9507      	str	r5, [sp, #28]
    a748:	469a      	mov	sl, r3
    a74a:	4654      	mov	r4, sl
    a74c:	f7ff faad 	bl	9caa <__ssvfscanf_r+0x8e>
    a750:	9b07      	ldr	r3, [sp, #28]
    a752:	46b9      	mov	r9, r7
    a754:	1d1a      	adds	r2, r3, #4
    a756:	681b      	ldr	r3, [r3, #0]
    a758:	3c01      	subs	r4, #1
    a75a:	469a      	mov	sl, r3
    a75c:	9306      	str	r3, [sp, #24]
    a75e:	001d      	movs	r5, r3
    a760:	2308      	movs	r3, #8
    a762:	469b      	mov	fp, r3
    a764:	9204      	str	r2, [sp, #16]
    a766:	44a2      	add	sl, r4
    a768:	f001 fb2a 	bl	bdc0 <__locale_ctype_ptr>
    a76c:	4659      	mov	r1, fp
    a76e:	6833      	ldr	r3, [r6, #0]
    a770:	781a      	ldrb	r2, [r3, #0]
    a772:	1880      	adds	r0, r0, r2
    a774:	7842      	ldrb	r2, [r0, #1]
    a776:	4211      	tst	r1, r2
    a778:	d179      	bne.n	a86e <__ssvfscanf_r+0xc52>
    a77a:	6872      	ldr	r2, [r6, #4]
    a77c:	1c6c      	adds	r4, r5, #1
    a77e:	3a01      	subs	r2, #1
    a780:	6072      	str	r2, [r6, #4]
    a782:	1c5a      	adds	r2, r3, #1
    a784:	6032      	str	r2, [r6, #0]
    a786:	781b      	ldrb	r3, [r3, #0]
    a788:	0027      	movs	r7, r4
    a78a:	702b      	strb	r3, [r5, #0]
    a78c:	4555      	cmp	r5, sl
    a78e:	d00a      	beq.n	a7a6 <__ssvfscanf_r+0xb8a>
    a790:	6873      	ldr	r3, [r6, #4]
    a792:	2b00      	cmp	r3, #0
    a794:	dd01      	ble.n	a79a <__ssvfscanf_r+0xb7e>
    a796:	0025      	movs	r5, r4
    a798:	e7e6      	b.n	a768 <__ssvfscanf_r+0xb4c>
    a79a:	0031      	movs	r1, r6
    a79c:	4640      	mov	r0, r8
    a79e:	f003 fe7b 	bl	e498 <__ssrefill_r>
    a7a2:	2800      	cmp	r0, #0
    a7a4:	d0f7      	beq.n	a796 <__ssvfscanf_r+0xb7a>
    a7a6:	464b      	mov	r3, r9
    a7a8:	46b9      	mov	r9, r7
    a7aa:	001f      	movs	r7, r3
    a7ac:	2300      	movs	r3, #0
    a7ae:	464a      	mov	r2, r9
    a7b0:	7013      	strb	r3, [r2, #0]
    a7b2:	464b      	mov	r3, r9
    a7b4:	9a06      	ldr	r2, [sp, #24]
    a7b6:	1a9b      	subs	r3, r3, r2
    a7b8:	18ff      	adds	r7, r7, r3
    a7ba:	9b08      	ldr	r3, [sp, #32]
    a7bc:	3301      	adds	r3, #1
    a7be:	9308      	str	r3, [sp, #32]
    a7c0:	9b04      	ldr	r3, [sp, #16]
    a7c2:	9307      	str	r3, [sp, #28]
    a7c4:	9b03      	ldr	r3, [sp, #12]
    a7c6:	469a      	mov	sl, r3
    a7c8:	4654      	mov	r4, sl
    a7ca:	f7ff fa6e 	bl	9caa <__ssvfscanf_r+0x8e>
    a7ce:	0031      	movs	r1, r6
    a7d0:	4640      	mov	r0, r8
    a7d2:	f003 fe61 	bl	e498 <__ssrefill_r>
    a7d6:	2800      	cmp	r0, #0
    a7d8:	d101      	bne.n	a7de <__ssvfscanf_r+0xbc2>
    a7da:	f7ff fa94 	bl	9d06 <__ssvfscanf_r+0xea>
    a7de:	f7ff fab7 	bl	9d50 <__ssvfscanf_r+0x134>
    a7e2:	9a07      	ldr	r2, [sp, #28]
    a7e4:	6813      	ldr	r3, [r2, #0]
    a7e6:	6018      	str	r0, [r3, #0]
    a7e8:	0013      	movs	r3, r2
    a7ea:	3304      	adds	r3, #4
    a7ec:	9307      	str	r3, [sp, #28]
    a7ee:	9b08      	ldr	r3, [sp, #32]
    a7f0:	3301      	adds	r3, #1
    a7f2:	9308      	str	r3, [sp, #32]
    a7f4:	e5d6      	b.n	a3a4 <__ssvfscanf_r+0x788>
    a7f6:	3d01      	subs	r5, #1
    a7f8:	7829      	ldrb	r1, [r5, #0]
    a7fa:	0032      	movs	r2, r6
    a7fc:	4640      	mov	r0, r8
    a7fe:	f003 fe09 	bl	e414 <_sungetc_r>
    a802:	e5c6      	b.n	a392 <__ssvfscanf_r+0x776>
    a804:	4648      	mov	r0, r9
    a806:	4b78      	ldr	r3, [pc, #480]	; (a9e8 <__ssvfscanf_r+0xdcc>)
    a808:	4018      	ands	r0, r3
    a80a:	2301      	movs	r3, #1
    a80c:	4681      	mov	r9, r0
    a80e:	469b      	mov	fp, r3
    a810:	f7ff fbd5 	bl	9fbe <__ssvfscanf_r+0x3a2>
    a814:	4648      	mov	r0, r9
    a816:	4b74      	ldr	r3, [pc, #464]	; (a9e8 <__ssvfscanf_r+0xdcc>)
    a818:	4018      	ands	r0, r3
    a81a:	2301      	movs	r3, #1
    a81c:	4681      	mov	r9, r0
    a81e:	9304      	str	r3, [sp, #16]
    a820:	f7ff fbcd 	bl	9fbe <__ssvfscanf_r+0x3a2>
    a824:	464b      	mov	r3, r9
    a826:	2102      	movs	r1, #2
    a828:	4313      	orrs	r3, r2
    a82a:	4699      	mov	r9, r3
    a82c:	468c      	mov	ip, r1
    a82e:	4653      	mov	r3, sl
    a830:	44e2      	add	sl, ip
    a832:	789b      	ldrb	r3, [r3, #2]
    a834:	f7ff fa56 	bl	9ce4 <__ssvfscanf_r+0xc8>
    a838:	4657      	mov	r7, sl
    a83a:	464b      	mov	r3, r9
    a83c:	1ae5      	subs	r5, r4, r3
    a83e:	d101      	bne.n	a844 <__ssvfscanf_r+0xc28>
    a840:	f7ff fa39 	bl	9cb6 <__ssvfscanf_r+0x9a>
    a844:	2300      	movs	r3, #0
    a846:	7023      	strb	r3, [r4, #0]
    a848:	9b08      	ldr	r3, [sp, #32]
    a84a:	197f      	adds	r7, r7, r5
    a84c:	3301      	adds	r3, #1
    a84e:	9308      	str	r3, [sp, #32]
    a850:	465b      	mov	r3, fp
    a852:	9307      	str	r3, [sp, #28]
    a854:	e494      	b.n	a180 <__ssvfscanf_r+0x564>
    a856:	4657      	mov	r7, sl
    a858:	0014      	movs	r4, r2
    a85a:	e7ee      	b.n	a83a <__ssvfscanf_r+0xc1e>
    a85c:	9b06      	ldr	r3, [sp, #24]
    a85e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a860:	1a9a      	subs	r2, r3, r2
    a862:	d100      	bne.n	a866 <__ssvfscanf_r+0xc4a>
    a864:	e474      	b.n	a150 <__ssvfscanf_r+0x534>
    a866:	465b      	mov	r3, fp
    a868:	4252      	negs	r2, r2
    a86a:	930e      	str	r3, [sp, #56]	; 0x38
    a86c:	e63a      	b.n	a4e4 <__ssvfscanf_r+0x8c8>
    a86e:	464f      	mov	r7, r9
    a870:	46a9      	mov	r9, r5
    a872:	e79b      	b.n	a7ac <__ssvfscanf_r+0xb90>
    a874:	9a07      	ldr	r2, [sp, #28]
    a876:	0013      	movs	r3, r2
    a878:	6812      	ldr	r2, [r2, #0]
    a87a:	3304      	adds	r3, #4
    a87c:	4693      	mov	fp, r2
    a87e:	9307      	str	r3, [sp, #28]
    a880:	2c00      	cmp	r4, #0
    a882:	d000      	beq.n	a886 <__ssvfscanf_r+0xc6a>
    a884:	e6d6      	b.n	a634 <__ssvfscanf_r+0xa18>
    a886:	e478      	b.n	a17a <__ssvfscanf_r+0x55e>
    a888:	9b07      	ldr	r3, [sp, #28]
    a88a:	681a      	ldr	r2, [r3, #0]
    a88c:	3304      	adds	r3, #4
    a88e:	4691      	mov	r9, r2
    a890:	9307      	str	r3, [sp, #28]
    a892:	e679      	b.n	a588 <__ssvfscanf_r+0x96c>
    a894:	464f      	mov	r7, r9
    a896:	9b04      	ldr	r3, [sp, #16]
    a898:	2b00      	cmp	r3, #0
    a89a:	d100      	bne.n	a89e <__ssvfscanf_r+0xc82>
    a89c:	e46d      	b.n	a17a <__ssvfscanf_r+0x55e>
    a89e:	e46f      	b.n	a180 <__ssvfscanf_r+0x564>
    a8a0:	9b07      	ldr	r3, [sp, #28]
    a8a2:	4654      	mov	r4, sl
    a8a4:	681a      	ldr	r2, [r3, #0]
    a8a6:	3304      	adds	r3, #4
    a8a8:	9203      	str	r2, [sp, #12]
    a8aa:	8017      	strh	r7, [r2, #0]
    a8ac:	9307      	str	r3, [sp, #28]
    a8ae:	f7ff f9fc 	bl	9caa <__ssvfscanf_r+0x8e>
    a8b2:	9b05      	ldr	r3, [sp, #20]
    a8b4:	2200      	movs	r2, #0
    a8b6:	990a      	ldr	r1, [sp, #40]	; 0x28
    a8b8:	4640      	mov	r0, r8
    a8ba:	f003 fd09 	bl	e2d0 <_strtoull_r>
    a8be:	e64b      	b.n	a558 <__ssvfscanf_r+0x93c>
    a8c0:	9b07      	ldr	r3, [sp, #28]
    a8c2:	681a      	ldr	r2, [r3, #0]
    a8c4:	3304      	adds	r3, #4
    a8c6:	9204      	str	r2, [sp, #16]
    a8c8:	8010      	strh	r0, [r2, #0]
    a8ca:	9307      	str	r3, [sp, #28]
    a8cc:	e78f      	b.n	a7ee <__ssvfscanf_r+0xbd2>
    a8ce:	f001 fa63 	bl	bd98 <__locale_mb_cur_max>
    a8d2:	4285      	cmp	r5, r0
    a8d4:	d101      	bne.n	a8da <__ssvfscanf_r+0xcbe>
    a8d6:	f7ff fa3b 	bl	9d50 <__ssvfscanf_r+0x134>
    a8da:	208c      	movs	r0, #140	; 0x8c
    a8dc:	1c6b      	adds	r3, r5, #1
    a8de:	469a      	mov	sl, r3
    a8e0:	6833      	ldr	r3, [r6, #0]
    a8e2:	0040      	lsls	r0, r0, #1
    a8e4:	781a      	ldrb	r2, [r3, #0]
    a8e6:	a90e      	add	r1, sp, #56	; 0x38
    a8e8:	1809      	adds	r1, r1, r0
    a8ea:	554a      	strb	r2, [r1, r5]
    a8ec:	3301      	adds	r3, #1
    a8ee:	6872      	ldr	r2, [r6, #4]
    a8f0:	6033      	str	r3, [r6, #0]
    a8f2:	9b06      	ldr	r3, [sp, #24]
    a8f4:	3a01      	subs	r2, #1
    a8f6:	6072      	str	r2, [r6, #4]
    a8f8:	4649      	mov	r1, r9
    a8fa:	9300      	str	r3, [sp, #0]
    a8fc:	aa54      	add	r2, sp, #336	; 0x150
    a8fe:	4653      	mov	r3, sl
    a900:	4640      	mov	r0, r8
    a902:	f001 fd33 	bl	c36c <_mbrtowc_r>
    a906:	1c43      	adds	r3, r0, #1
    a908:	d101      	bne.n	a90e <__ssvfscanf_r+0xcf2>
    a90a:	f7ff fa21 	bl	9d50 <__ssvfscanf_r+0x134>
    a90e:	2800      	cmp	r0, #0
    a910:	d001      	beq.n	a916 <__ssvfscanf_r+0xcfa>
    a912:	f7ff fa07 	bl	9d24 <__ssvfscanf_r+0x108>
    a916:	464b      	mov	r3, r9
    a918:	6018      	str	r0, [r3, #0]
    a91a:	f001 fa31 	bl	bd80 <iswspace>
    a91e:	1e05      	subs	r5, r0, #0
    a920:	d012      	beq.n	a948 <__ssvfscanf_r+0xd2c>
    a922:	4655      	mov	r5, sl
    a924:	2d00      	cmp	r5, #0
    a926:	d100      	bne.n	a92a <__ssvfscanf_r+0xd0e>
    a928:	e63c      	b.n	a5a4 <__ssvfscanf_r+0x988>
    a92a:	4644      	mov	r4, r8
    a92c:	228c      	movs	r2, #140	; 0x8c
    a92e:	ab0e      	add	r3, sp, #56	; 0x38
    a930:	0052      	lsls	r2, r2, #1
    a932:	3d01      	subs	r5, #1
    a934:	189b      	adds	r3, r3, r2
    a936:	5d59      	ldrb	r1, [r3, r5]
    a938:	0032      	movs	r2, r6
    a93a:	0020      	movs	r0, r4
    a93c:	f003 fd6a 	bl	e414 <_sungetc_r>
    a940:	2d00      	cmp	r5, #0
    a942:	d1f3      	bne.n	a92c <__ssvfscanf_r+0xd10>
    a944:	46a0      	mov	r8, r4
    a946:	e62d      	b.n	a5a4 <__ssvfscanf_r+0x988>
    a948:	465b      	mov	r3, fp
    a94a:	4457      	add	r7, sl
    a94c:	3c01      	subs	r4, #1
    a94e:	2b00      	cmp	r3, #0
    a950:	d001      	beq.n	a956 <__ssvfscanf_r+0xd3a>
    a952:	f7ff f9ec 	bl	9d2e <__ssvfscanf_r+0x112>
    a956:	3304      	adds	r3, #4
    a958:	469c      	mov	ip, r3
    a95a:	465d      	mov	r5, fp
    a95c:	44e1      	add	r9, ip
    a95e:	f7ff f9e6 	bl	9d2e <__ssvfscanf_r+0x112>
    a962:	464b      	mov	r3, r9
    a964:	6818      	ldr	r0, [r3, #0]
    a966:	e7d8      	b.n	a91a <__ssvfscanf_r+0xcfe>
    a968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a96a:	459b      	cmp	fp, r3
    a96c:	d801      	bhi.n	a972 <__ssvfscanf_r+0xd56>
    a96e:	f7ff f9a2 	bl	9cb6 <__ssvfscanf_r+0x9a>
    a972:	465c      	mov	r4, fp
    a974:	4645      	mov	r5, r8
    a976:	3c01      	subs	r4, #1
    a978:	7821      	ldrb	r1, [r4, #0]
    a97a:	0032      	movs	r2, r6
    a97c:	0028      	movs	r0, r5
    a97e:	f003 fd49 	bl	e414 <_sungetc_r>
    a982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a984:	429c      	cmp	r4, r3
    a986:	d1f6      	bne.n	a976 <__ssvfscanf_r+0xd5a>
    a988:	f7ff f995 	bl	9cb6 <__ssvfscanf_r+0x9a>
    a98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a98e:	465c      	mov	r4, fp
    a990:	4645      	mov	r5, r8
    a992:	459b      	cmp	fp, r3
    a994:	d801      	bhi.n	a99a <__ssvfscanf_r+0xd7e>
    a996:	f7ff f98e 	bl	9cb6 <__ssvfscanf_r+0x9a>
    a99a:	3c01      	subs	r4, #1
    a99c:	7821      	ldrb	r1, [r4, #0]
    a99e:	0032      	movs	r2, r6
    a9a0:	0028      	movs	r0, r5
    a9a2:	f003 fd37 	bl	e414 <_sungetc_r>
    a9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9a8:	429c      	cmp	r4, r3
    a9aa:	d1f6      	bne.n	a99a <__ssvfscanf_r+0xd7e>
    a9ac:	f7ff f983 	bl	9cb6 <__ssvfscanf_r+0x9a>
    a9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9b2:	459b      	cmp	fp, r3
    a9b4:	d801      	bhi.n	a9ba <__ssvfscanf_r+0xd9e>
    a9b6:	f7ff f97e 	bl	9cb6 <__ssvfscanf_r+0x9a>
    a9ba:	465c      	mov	r4, fp
    a9bc:	4645      	mov	r5, r8
    a9be:	3c01      	subs	r4, #1
    a9c0:	7821      	ldrb	r1, [r4, #0]
    a9c2:	0032      	movs	r2, r6
    a9c4:	0028      	movs	r0, r5
    a9c6:	f003 fd25 	bl	e414 <_sungetc_r>
    a9ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a9cc:	429c      	cmp	r4, r3
    a9ce:	d1f6      	bne.n	a9be <__ssvfscanf_r+0xda2>
    a9d0:	f7ff f971 	bl	9cb6 <__ssvfscanf_r+0x9a>
    a9d4:	2000      	movs	r0, #0
    a9d6:	f002 fa57 	bl	ce88 <nanf>
    a9da:	464b      	mov	r3, r9
    a9dc:	6018      	str	r0, [r3, #0]
    a9de:	4653      	mov	r3, sl
    a9e0:	9307      	str	r3, [sp, #28]
    a9e2:	f7ff fbca 	bl	a17a <__ssvfscanf_r+0x55e>
    a9e6:	46c0      	nop			; (mov r8, r8)
    a9e8:	fffff87f 	.word	0xfffff87f

0000a9ec <register_fini>:
    a9ec:	4b03      	ldr	r3, [pc, #12]	; (a9fc <register_fini+0x10>)
    a9ee:	b510      	push	{r4, lr}
    a9f0:	2b00      	cmp	r3, #0
    a9f2:	d002      	beq.n	a9fa <register_fini+0xe>
    a9f4:	4802      	ldr	r0, [pc, #8]	; (aa00 <register_fini+0x14>)
    a9f6:	f000 f805 	bl	aa04 <atexit>
    a9fa:	bd10      	pop	{r4, pc}
    a9fc:	00000000 	.word	0x00000000
    aa00:	0000baf1 	.word	0x0000baf1

0000aa04 <atexit>:
    aa04:	b510      	push	{r4, lr}
    aa06:	0001      	movs	r1, r0
    aa08:	2300      	movs	r3, #0
    aa0a:	2200      	movs	r2, #0
    aa0c:	2000      	movs	r0, #0
    aa0e:	f003 fdfb 	bl	e608 <__register_exitproc>
    aa12:	bd10      	pop	{r4, pc}

0000aa14 <quorem>:
    aa14:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa16:	4645      	mov	r5, r8
    aa18:	4680      	mov	r8, r0
    aa1a:	46de      	mov	lr, fp
    aa1c:	4657      	mov	r7, sl
    aa1e:	464e      	mov	r6, r9
    aa20:	4642      	mov	r2, r8
    aa22:	b5e0      	push	{r5, r6, r7, lr}
    aa24:	690c      	ldr	r4, [r1, #16]
    aa26:	6912      	ldr	r2, [r2, #16]
    aa28:	b085      	sub	sp, #20
    aa2a:	000b      	movs	r3, r1
    aa2c:	9102      	str	r1, [sp, #8]
    aa2e:	2000      	movs	r0, #0
    aa30:	4294      	cmp	r4, r2
    aa32:	dd00      	ble.n	aa36 <quorem+0x22>
    aa34:	e090      	b.n	ab58 <quorem+0x144>
    aa36:	2214      	movs	r2, #20
    aa38:	4694      	mov	ip, r2
    aa3a:	4463      	add	r3, ip
    aa3c:	4699      	mov	r9, r3
    aa3e:	464a      	mov	r2, r9
    aa40:	3c01      	subs	r4, #1
    aa42:	00a3      	lsls	r3, r4, #2
    aa44:	18d6      	adds	r6, r2, r3
    aa46:	2214      	movs	r2, #20
    aa48:	4442      	add	r2, r8
    aa4a:	4693      	mov	fp, r2
    aa4c:	449b      	add	fp, r3
    aa4e:	6833      	ldr	r3, [r6, #0]
    aa50:	0015      	movs	r5, r2
    aa52:	1c59      	adds	r1, r3, #1
    aa54:	465b      	mov	r3, fp
    aa56:	6818      	ldr	r0, [r3, #0]
    aa58:	9201      	str	r2, [sp, #4]
    aa5a:	f7fa fe51 	bl	5700 <__udivsi3>
    aa5e:	1e03      	subs	r3, r0, #0
    aa60:	9000      	str	r0, [sp, #0]
    aa62:	d042      	beq.n	aaea <quorem+0xd6>
    aa64:	0029      	movs	r1, r5
    aa66:	2700      	movs	r7, #0
    aa68:	464d      	mov	r5, r9
    aa6a:	2000      	movs	r0, #0
    aa6c:	46b1      	mov	r9, r6
    aa6e:	46a2      	mov	sl, r4
    aa70:	003e      	movs	r6, r7
    aa72:	0004      	movs	r4, r0
    aa74:	469c      	mov	ip, r3
    aa76:	002f      	movs	r7, r5
    aa78:	0008      	movs	r0, r1
    aa7a:	9503      	str	r5, [sp, #12]
    aa7c:	4663      	mov	r3, ip
    aa7e:	cf04      	ldmia	r7!, {r2}
    aa80:	0415      	lsls	r5, r2, #16
    aa82:	0c2d      	lsrs	r5, r5, #16
    aa84:	435d      	muls	r5, r3
    aa86:	0c12      	lsrs	r2, r2, #16
    aa88:	435a      	muls	r2, r3
    aa8a:	19ad      	adds	r5, r5, r6
    aa8c:	0c2b      	lsrs	r3, r5, #16
    aa8e:	18d2      	adds	r2, r2, r3
    aa90:	6803      	ldr	r3, [r0, #0]
    aa92:	042d      	lsls	r5, r5, #16
    aa94:	0419      	lsls	r1, r3, #16
    aa96:	0c09      	lsrs	r1, r1, #16
    aa98:	1909      	adds	r1, r1, r4
    aa9a:	0c16      	lsrs	r6, r2, #16
    aa9c:	0c2d      	lsrs	r5, r5, #16
    aa9e:	0412      	lsls	r2, r2, #16
    aaa0:	1b49      	subs	r1, r1, r5
    aaa2:	0c12      	lsrs	r2, r2, #16
    aaa4:	0c1b      	lsrs	r3, r3, #16
    aaa6:	1a9b      	subs	r3, r3, r2
    aaa8:	140a      	asrs	r2, r1, #16
    aaaa:	189b      	adds	r3, r3, r2
    aaac:	0409      	lsls	r1, r1, #16
    aaae:	141c      	asrs	r4, r3, #16
    aab0:	0c09      	lsrs	r1, r1, #16
    aab2:	041b      	lsls	r3, r3, #16
    aab4:	4319      	orrs	r1, r3
    aab6:	c002      	stmia	r0!, {r1}
    aab8:	45b9      	cmp	r9, r7
    aaba:	d2df      	bcs.n	aa7c <quorem+0x68>
    aabc:	9b03      	ldr	r3, [sp, #12]
    aabe:	464e      	mov	r6, r9
    aac0:	4699      	mov	r9, r3
    aac2:	465b      	mov	r3, fp
    aac4:	681b      	ldr	r3, [r3, #0]
    aac6:	4654      	mov	r4, sl
    aac8:	2b00      	cmp	r3, #0
    aaca:	d10e      	bne.n	aaea <quorem+0xd6>
    aacc:	465b      	mov	r3, fp
    aace:	9a01      	ldr	r2, [sp, #4]
    aad0:	3b04      	subs	r3, #4
    aad2:	429a      	cmp	r2, r3
    aad4:	d304      	bcc.n	aae0 <quorem+0xcc>
    aad6:	e006      	b.n	aae6 <quorem+0xd2>
    aad8:	3b04      	subs	r3, #4
    aada:	3c01      	subs	r4, #1
    aadc:	429a      	cmp	r2, r3
    aade:	d202      	bcs.n	aae6 <quorem+0xd2>
    aae0:	6819      	ldr	r1, [r3, #0]
    aae2:	2900      	cmp	r1, #0
    aae4:	d0f8      	beq.n	aad8 <quorem+0xc4>
    aae6:	4643      	mov	r3, r8
    aae8:	611c      	str	r4, [r3, #16]
    aaea:	9902      	ldr	r1, [sp, #8]
    aaec:	4640      	mov	r0, r8
    aaee:	f001 ff53 	bl	c998 <__mcmp>
    aaf2:	2800      	cmp	r0, #0
    aaf4:	db2f      	blt.n	ab56 <quorem+0x142>
    aaf6:	464f      	mov	r7, r9
    aaf8:	2000      	movs	r0, #0
    aafa:	9b00      	ldr	r3, [sp, #0]
    aafc:	9d01      	ldr	r5, [sp, #4]
    aafe:	3301      	adds	r3, #1
    ab00:	9300      	str	r3, [sp, #0]
    ab02:	682b      	ldr	r3, [r5, #0]
    ab04:	cf02      	ldmia	r7!, {r1}
    ab06:	041a      	lsls	r2, r3, #16
    ab08:	0c12      	lsrs	r2, r2, #16
    ab0a:	1810      	adds	r0, r2, r0
    ab0c:	040a      	lsls	r2, r1, #16
    ab0e:	0c12      	lsrs	r2, r2, #16
    ab10:	1a82      	subs	r2, r0, r2
    ab12:	0c09      	lsrs	r1, r1, #16
    ab14:	0c1b      	lsrs	r3, r3, #16
    ab16:	1a5b      	subs	r3, r3, r1
    ab18:	1411      	asrs	r1, r2, #16
    ab1a:	185b      	adds	r3, r3, r1
    ab1c:	0412      	lsls	r2, r2, #16
    ab1e:	1418      	asrs	r0, r3, #16
    ab20:	0c12      	lsrs	r2, r2, #16
    ab22:	041b      	lsls	r3, r3, #16
    ab24:	4313      	orrs	r3, r2
    ab26:	c508      	stmia	r5!, {r3}
    ab28:	42be      	cmp	r6, r7
    ab2a:	d2ea      	bcs.n	ab02 <quorem+0xee>
    ab2c:	9901      	ldr	r1, [sp, #4]
    ab2e:	00a3      	lsls	r3, r4, #2
    ab30:	468c      	mov	ip, r1
    ab32:	4463      	add	r3, ip
    ab34:	681a      	ldr	r2, [r3, #0]
    ab36:	2a00      	cmp	r2, #0
    ab38:	d10d      	bne.n	ab56 <quorem+0x142>
    ab3a:	3b04      	subs	r3, #4
    ab3c:	000a      	movs	r2, r1
    ab3e:	4299      	cmp	r1, r3
    ab40:	d304      	bcc.n	ab4c <quorem+0x138>
    ab42:	e006      	b.n	ab52 <quorem+0x13e>
    ab44:	3b04      	subs	r3, #4
    ab46:	3c01      	subs	r4, #1
    ab48:	429a      	cmp	r2, r3
    ab4a:	d202      	bcs.n	ab52 <quorem+0x13e>
    ab4c:	6819      	ldr	r1, [r3, #0]
    ab4e:	2900      	cmp	r1, #0
    ab50:	d0f8      	beq.n	ab44 <quorem+0x130>
    ab52:	4643      	mov	r3, r8
    ab54:	611c      	str	r4, [r3, #16]
    ab56:	9800      	ldr	r0, [sp, #0]
    ab58:	b005      	add	sp, #20
    ab5a:	bc3c      	pop	{r2, r3, r4, r5}
    ab5c:	4690      	mov	r8, r2
    ab5e:	4699      	mov	r9, r3
    ab60:	46a2      	mov	sl, r4
    ab62:	46ab      	mov	fp, r5
    ab64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ab66:	46c0      	nop			; (mov r8, r8)

0000ab68 <_dtoa_r>:
    ab68:	b5f0      	push	{r4, r5, r6, r7, lr}
    ab6a:	4657      	mov	r7, sl
    ab6c:	464e      	mov	r6, r9
    ab6e:	4645      	mov	r5, r8
    ab70:	46de      	mov	lr, fp
    ab72:	b5e0      	push	{r5, r6, r7, lr}
    ab74:	6c01      	ldr	r1, [r0, #64]	; 0x40
    ab76:	b099      	sub	sp, #100	; 0x64
    ab78:	4682      	mov	sl, r0
    ab7a:	001d      	movs	r5, r3
    ab7c:	0016      	movs	r6, r2
    ab7e:	001f      	movs	r7, r3
    ab80:	2900      	cmp	r1, #0
    ab82:	d009      	beq.n	ab98 <_dtoa_r+0x30>
    ab84:	2301      	movs	r3, #1
    ab86:	6c42      	ldr	r2, [r0, #68]	; 0x44
    ab88:	4093      	lsls	r3, r2
    ab8a:	604a      	str	r2, [r1, #4]
    ab8c:	608b      	str	r3, [r1, #8]
    ab8e:	f001 fcad 	bl	c4ec <_Bfree>
    ab92:	2300      	movs	r3, #0
    ab94:	4652      	mov	r2, sl
    ab96:	6413      	str	r3, [r2, #64]	; 0x40
    ab98:	46b8      	mov	r8, r7
    ab9a:	2f00      	cmp	r7, #0
    ab9c:	db37      	blt.n	ac0e <_dtoa_r+0xa6>
    ab9e:	2300      	movs	r3, #0
    aba0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    aba2:	6013      	str	r3, [r2, #0]
    aba4:	4642      	mov	r2, r8
    aba6:	4bd6      	ldr	r3, [pc, #856]	; (af00 <_dtoa_r+0x398>)
    aba8:	401a      	ands	r2, r3
    abaa:	429a      	cmp	r2, r3
    abac:	d018      	beq.n	abe0 <_dtoa_r+0x78>
    abae:	2200      	movs	r2, #0
    abb0:	2300      	movs	r3, #0
    abb2:	0030      	movs	r0, r6
    abb4:	0039      	movs	r1, r7
    abb6:	f7fc fe55 	bl	7864 <__aeabi_dcmpeq>
    abba:	2800      	cmp	r0, #0
    abbc:	d02f      	beq.n	ac1e <_dtoa_r+0xb6>
    abbe:	2301      	movs	r3, #1
    abc0:	9a24      	ldr	r2, [sp, #144]	; 0x90
    abc2:	6013      	str	r3, [r2, #0]
    abc4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    abc6:	2b00      	cmp	r3, #0
    abc8:	d100      	bne.n	abcc <_dtoa_r+0x64>
    abca:	e22a      	b.n	b022 <_dtoa_r+0x4ba>
    abcc:	48cd      	ldr	r0, [pc, #820]	; (af04 <_dtoa_r+0x39c>)
    abce:	6018      	str	r0, [r3, #0]
    abd0:	3801      	subs	r0, #1
    abd2:	b019      	add	sp, #100	; 0x64
    abd4:	bc3c      	pop	{r2, r3, r4, r5}
    abd6:	4690      	mov	r8, r2
    abd8:	4699      	mov	r9, r3
    abda:	46a2      	mov	sl, r4
    abdc:	46ab      	mov	fp, r5
    abde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    abe0:	4bc9      	ldr	r3, [pc, #804]	; (af08 <_dtoa_r+0x3a0>)
    abe2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    abe4:	6013      	str	r3, [r2, #0]
    abe6:	2e00      	cmp	r6, #0
    abe8:	d10b      	bne.n	ac02 <_dtoa_r+0x9a>
    abea:	4643      	mov	r3, r8
    abec:	0318      	lsls	r0, r3, #12
    abee:	d108      	bne.n	ac02 <_dtoa_r+0x9a>
    abf0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    abf2:	48c6      	ldr	r0, [pc, #792]	; (af0c <_dtoa_r+0x3a4>)
    abf4:	2b00      	cmp	r3, #0
    abf6:	d0ec      	beq.n	abd2 <_dtoa_r+0x6a>
    abf8:	0003      	movs	r3, r0
    abfa:	3308      	adds	r3, #8
    abfc:	9a26      	ldr	r2, [sp, #152]	; 0x98
    abfe:	6013      	str	r3, [r2, #0]
    ac00:	e7e7      	b.n	abd2 <_dtoa_r+0x6a>
    ac02:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ac04:	48c2      	ldr	r0, [pc, #776]	; (af10 <_dtoa_r+0x3a8>)
    ac06:	2b00      	cmp	r3, #0
    ac08:	d0e3      	beq.n	abd2 <_dtoa_r+0x6a>
    ac0a:	1cc3      	adds	r3, r0, #3
    ac0c:	e7f6      	b.n	abfc <_dtoa_r+0x94>
    ac0e:	2301      	movs	r3, #1
    ac10:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ac12:	0068      	lsls	r0, r5, #1
    ac14:	6013      	str	r3, [r2, #0]
    ac16:	0843      	lsrs	r3, r0, #1
    ac18:	4698      	mov	r8, r3
    ac1a:	001f      	movs	r7, r3
    ac1c:	e7c2      	b.n	aba4 <_dtoa_r+0x3c>
    ac1e:	ab16      	add	r3, sp, #88	; 0x58
    ac20:	9301      	str	r3, [sp, #4]
    ac22:	ab17      	add	r3, sp, #92	; 0x5c
    ac24:	9300      	str	r3, [sp, #0]
    ac26:	0032      	movs	r2, r6
    ac28:	003b      	movs	r3, r7
    ac2a:	4650      	mov	r0, sl
    ac2c:	f001 fffc 	bl	cc28 <__d2b>
    ac30:	4643      	mov	r3, r8
    ac32:	4683      	mov	fp, r0
    ac34:	0d1a      	lsrs	r2, r3, #20
    ac36:	d100      	bne.n	ac3a <_dtoa_r+0xd2>
    ac38:	e1d6      	b.n	afe8 <_dtoa_r+0x480>
    ac3a:	033b      	lsls	r3, r7, #12
    ac3c:	4cb5      	ldr	r4, [pc, #724]	; (af14 <_dtoa_r+0x3ac>)
    ac3e:	0b1b      	lsrs	r3, r3, #12
    ac40:	431c      	orrs	r4, r3
    ac42:	4bb5      	ldr	r3, [pc, #724]	; (af18 <_dtoa_r+0x3b0>)
    ac44:	0030      	movs	r0, r6
    ac46:	4698      	mov	r8, r3
    ac48:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ac4a:	0021      	movs	r1, r4
    ac4c:	4699      	mov	r9, r3
    ac4e:	2300      	movs	r3, #0
    ac50:	4490      	add	r8, r2
    ac52:	930f      	str	r3, [sp, #60]	; 0x3c
    ac54:	2200      	movs	r2, #0
    ac56:	4bb1      	ldr	r3, [pc, #708]	; (af1c <_dtoa_r+0x3b4>)
    ac58:	f7fc f9de 	bl	7018 <__aeabi_dsub>
    ac5c:	4ab0      	ldr	r2, [pc, #704]	; (af20 <_dtoa_r+0x3b8>)
    ac5e:	4bb1      	ldr	r3, [pc, #708]	; (af24 <_dtoa_r+0x3bc>)
    ac60:	f7fb ff5a 	bl	6b18 <__aeabi_dmul>
    ac64:	4ab0      	ldr	r2, [pc, #704]	; (af28 <_dtoa_r+0x3c0>)
    ac66:	4bb1      	ldr	r3, [pc, #708]	; (af2c <_dtoa_r+0x3c4>)
    ac68:	f7fb f912 	bl	5e90 <__aeabi_dadd>
    ac6c:	0004      	movs	r4, r0
    ac6e:	4640      	mov	r0, r8
    ac70:	000d      	movs	r5, r1
    ac72:	f7fc fd1b 	bl	76ac <__aeabi_i2d>
    ac76:	4aae      	ldr	r2, [pc, #696]	; (af30 <_dtoa_r+0x3c8>)
    ac78:	4bae      	ldr	r3, [pc, #696]	; (af34 <_dtoa_r+0x3cc>)
    ac7a:	f7fb ff4d 	bl	6b18 <__aeabi_dmul>
    ac7e:	0002      	movs	r2, r0
    ac80:	000b      	movs	r3, r1
    ac82:	0020      	movs	r0, r4
    ac84:	0029      	movs	r1, r5
    ac86:	f7fb f903 	bl	5e90 <__aeabi_dadd>
    ac8a:	0004      	movs	r4, r0
    ac8c:	000d      	movs	r5, r1
    ac8e:	f7fc fcd9 	bl	7644 <__aeabi_d2iz>
    ac92:	2200      	movs	r2, #0
    ac94:	9003      	str	r0, [sp, #12]
    ac96:	2300      	movs	r3, #0
    ac98:	0020      	movs	r0, r4
    ac9a:	0029      	movs	r1, r5
    ac9c:	f7fc fde8 	bl	7870 <__aeabi_dcmplt>
    aca0:	2800      	cmp	r0, #0
    aca2:	d000      	beq.n	aca6 <_dtoa_r+0x13e>
    aca4:	e2b1      	b.n	b20a <_dtoa_r+0x6a2>
    aca6:	2301      	movs	r3, #1
    aca8:	9c03      	ldr	r4, [sp, #12]
    acaa:	930c      	str	r3, [sp, #48]	; 0x30
    acac:	2c16      	cmp	r4, #22
    acae:	d810      	bhi.n	acd2 <_dtoa_r+0x16a>
    acb0:	49a1      	ldr	r1, [pc, #644]	; (af38 <_dtoa_r+0x3d0>)
    acb2:	00e3      	lsls	r3, r4, #3
    acb4:	18c9      	adds	r1, r1, r3
    acb6:	0032      	movs	r2, r6
    acb8:	6808      	ldr	r0, [r1, #0]
    acba:	6849      	ldr	r1, [r1, #4]
    acbc:	003b      	movs	r3, r7
    acbe:	f7fc fdeb 	bl	7898 <__aeabi_dcmpgt>
    acc2:	2800      	cmp	r0, #0
    acc4:	d100      	bne.n	acc8 <_dtoa_r+0x160>
    acc6:	e31d      	b.n	b304 <_dtoa_r+0x79c>
    acc8:	0023      	movs	r3, r4
    acca:	3b01      	subs	r3, #1
    accc:	9303      	str	r3, [sp, #12]
    acce:	2300      	movs	r3, #0
    acd0:	930c      	str	r3, [sp, #48]	; 0x30
    acd2:	464b      	mov	r3, r9
    acd4:	4642      	mov	r2, r8
    acd6:	1a9a      	subs	r2, r3, r2
    acd8:	2300      	movs	r3, #0
    acda:	9306      	str	r3, [sp, #24]
    acdc:	0013      	movs	r3, r2
    acde:	3b01      	subs	r3, #1
    ace0:	9304      	str	r3, [sp, #16]
    ace2:	d500      	bpl.n	ace6 <_dtoa_r+0x17e>
    ace4:	e2a1      	b.n	b22a <_dtoa_r+0x6c2>
    ace6:	9b03      	ldr	r3, [sp, #12]
    ace8:	2b00      	cmp	r3, #0
    acea:	da00      	bge.n	acee <_dtoa_r+0x186>
    acec:	e284      	b.n	b1f8 <_dtoa_r+0x690>
    acee:	469c      	mov	ip, r3
    acf0:	930d      	str	r3, [sp, #52]	; 0x34
    acf2:	2300      	movs	r3, #0
    acf4:	9a04      	ldr	r2, [sp, #16]
    acf6:	4699      	mov	r9, r3
    acf8:	0011      	movs	r1, r2
    acfa:	4461      	add	r1, ip
    acfc:	9104      	str	r1, [sp, #16]
    acfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad00:	2b09      	cmp	r3, #9
    ad02:	d900      	bls.n	ad06 <_dtoa_r+0x19e>
    ad04:	e18f      	b.n	b026 <_dtoa_r+0x4be>
    ad06:	2401      	movs	r4, #1
    ad08:	2b05      	cmp	r3, #5
    ad0a:	dd02      	ble.n	ad12 <_dtoa_r+0x1aa>
    ad0c:	2400      	movs	r4, #0
    ad0e:	3b04      	subs	r3, #4
    ad10:	9322      	str	r3, [sp, #136]	; 0x88
    ad12:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad14:	2b03      	cmp	r3, #3
    ad16:	d101      	bne.n	ad1c <_dtoa_r+0x1b4>
    ad18:	f000 fcce 	bl	b6b8 <_dtoa_r+0xb50>
    ad1c:	dc01      	bgt.n	ad22 <_dtoa_r+0x1ba>
    ad1e:	f000 fc92 	bl	b646 <_dtoa_r+0xade>
    ad22:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad24:	2b04      	cmp	r3, #4
    ad26:	d101      	bne.n	ad2c <_dtoa_r+0x1c4>
    ad28:	f000 fc40 	bl	b5ac <_dtoa_r+0xa44>
    ad2c:	2301      	movs	r3, #1
    ad2e:	930b      	str	r3, [sp, #44]	; 0x2c
    ad30:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ad32:	2b05      	cmp	r3, #5
    ad34:	d001      	beq.n	ad3a <_dtoa_r+0x1d2>
    ad36:	f000 fc8b 	bl	b650 <_dtoa_r+0xae8>
    ad3a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    ad3c:	9b03      	ldr	r3, [sp, #12]
    ad3e:	4694      	mov	ip, r2
    ad40:	4463      	add	r3, ip
    ad42:	930e      	str	r3, [sp, #56]	; 0x38
    ad44:	3301      	adds	r3, #1
    ad46:	9307      	str	r3, [sp, #28]
    ad48:	1e1d      	subs	r5, r3, #0
    ad4a:	dc01      	bgt.n	ad50 <_dtoa_r+0x1e8>
    ad4c:	f000 fd49 	bl	b7e2 <_dtoa_r+0xc7a>
    ad50:	9b07      	ldr	r3, [sp, #28]
    ad52:	4698      	mov	r8, r3
    ad54:	2300      	movs	r3, #0
    ad56:	4652      	mov	r2, sl
    ad58:	2100      	movs	r1, #0
    ad5a:	6453      	str	r3, [r2, #68]	; 0x44
    ad5c:	2d17      	cmp	r5, #23
    ad5e:	d90a      	bls.n	ad76 <_dtoa_r+0x20e>
    ad60:	2201      	movs	r2, #1
    ad62:	3304      	adds	r3, #4
    ad64:	005b      	lsls	r3, r3, #1
    ad66:	0018      	movs	r0, r3
    ad68:	3014      	adds	r0, #20
    ad6a:	0011      	movs	r1, r2
    ad6c:	3201      	adds	r2, #1
    ad6e:	4285      	cmp	r5, r0
    ad70:	d2f8      	bcs.n	ad64 <_dtoa_r+0x1fc>
    ad72:	4653      	mov	r3, sl
    ad74:	6459      	str	r1, [r3, #68]	; 0x44
    ad76:	4650      	mov	r0, sl
    ad78:	f001 fb90 	bl	c49c <_Balloc>
    ad7c:	4653      	mov	r3, sl
    ad7e:	6418      	str	r0, [r3, #64]	; 0x40
    ad80:	4643      	mov	r3, r8
    ad82:	900a      	str	r0, [sp, #40]	; 0x28
    ad84:	2b0e      	cmp	r3, #14
    ad86:	d900      	bls.n	ad8a <_dtoa_r+0x222>
    ad88:	e161      	b.n	b04e <_dtoa_r+0x4e6>
    ad8a:	2c00      	cmp	r4, #0
    ad8c:	d100      	bne.n	ad90 <_dtoa_r+0x228>
    ad8e:	e15e      	b.n	b04e <_dtoa_r+0x4e6>
    ad90:	9610      	str	r6, [sp, #64]	; 0x40
    ad92:	9711      	str	r7, [sp, #68]	; 0x44
    ad94:	9e03      	ldr	r6, [sp, #12]
    ad96:	2e00      	cmp	r6, #0
    ad98:	dc01      	bgt.n	ad9e <_dtoa_r+0x236>
    ad9a:	f000 fd25 	bl	b7e8 <_dtoa_r+0xc80>
    ad9e:	0032      	movs	r2, r6
    ada0:	210f      	movs	r1, #15
    ada2:	4b65      	ldr	r3, [pc, #404]	; (af38 <_dtoa_r+0x3d0>)
    ada4:	400a      	ands	r2, r1
    ada6:	00d2      	lsls	r2, r2, #3
    ada8:	189b      	adds	r3, r3, r2
    adaa:	1136      	asrs	r6, r6, #4
    adac:	681c      	ldr	r4, [r3, #0]
    adae:	685d      	ldr	r5, [r3, #4]
    adb0:	06f3      	lsls	r3, r6, #27
    adb2:	d401      	bmi.n	adb8 <_dtoa_r+0x250>
    adb4:	f000 fcca 	bl	b74c <_dtoa_r+0xbe4>
    adb8:	4b60      	ldr	r3, [pc, #384]	; (af3c <_dtoa_r+0x3d4>)
    adba:	400e      	ands	r6, r1
    adbc:	6a1a      	ldr	r2, [r3, #32]
    adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    adc0:	9810      	ldr	r0, [sp, #64]	; 0x40
    adc2:	9911      	ldr	r1, [sp, #68]	; 0x44
    adc4:	f7fb fb74 	bl	64b0 <__aeabi_ddiv>
    adc8:	2303      	movs	r3, #3
    adca:	4698      	mov	r8, r3
    adcc:	9008      	str	r0, [sp, #32]
    adce:	9109      	str	r1, [sp, #36]	; 0x24
    add0:	2e00      	cmp	r6, #0
    add2:	d011      	beq.n	adf8 <_dtoa_r+0x290>
    add4:	4f59      	ldr	r7, [pc, #356]	; (af3c <_dtoa_r+0x3d4>)
    add6:	2301      	movs	r3, #1
    add8:	4233      	tst	r3, r6
    adda:	d009      	beq.n	adf0 <_dtoa_r+0x288>
    addc:	469c      	mov	ip, r3
    adde:	683a      	ldr	r2, [r7, #0]
    ade0:	687b      	ldr	r3, [r7, #4]
    ade2:	0020      	movs	r0, r4
    ade4:	0029      	movs	r1, r5
    ade6:	44e0      	add	r8, ip
    ade8:	f7fb fe96 	bl	6b18 <__aeabi_dmul>
    adec:	0004      	movs	r4, r0
    adee:	000d      	movs	r5, r1
    adf0:	1076      	asrs	r6, r6, #1
    adf2:	3708      	adds	r7, #8
    adf4:	2e00      	cmp	r6, #0
    adf6:	d1ee      	bne.n	add6 <_dtoa_r+0x26e>
    adf8:	0022      	movs	r2, r4
    adfa:	9808      	ldr	r0, [sp, #32]
    adfc:	9909      	ldr	r1, [sp, #36]	; 0x24
    adfe:	002b      	movs	r3, r5
    ae00:	f7fb fb56 	bl	64b0 <__aeabi_ddiv>
    ae04:	0006      	movs	r6, r0
    ae06:	000f      	movs	r7, r1
    ae08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ae0a:	2b00      	cmp	r3, #0
    ae0c:	d009      	beq.n	ae22 <_dtoa_r+0x2ba>
    ae0e:	2200      	movs	r2, #0
    ae10:	4b40      	ldr	r3, [pc, #256]	; (af14 <_dtoa_r+0x3ac>)
    ae12:	0030      	movs	r0, r6
    ae14:	0039      	movs	r1, r7
    ae16:	f7fc fd2b 	bl	7870 <__aeabi_dcmplt>
    ae1a:	2800      	cmp	r0, #0
    ae1c:	d001      	beq.n	ae22 <_dtoa_r+0x2ba>
    ae1e:	f000 fdc2 	bl	b9a6 <_dtoa_r+0xe3e>
    ae22:	4640      	mov	r0, r8
    ae24:	f7fc fc42 	bl	76ac <__aeabi_i2d>
    ae28:	0032      	movs	r2, r6
    ae2a:	003b      	movs	r3, r7
    ae2c:	f7fb fe74 	bl	6b18 <__aeabi_dmul>
    ae30:	2200      	movs	r2, #0
    ae32:	4b43      	ldr	r3, [pc, #268]	; (af40 <_dtoa_r+0x3d8>)
    ae34:	f7fb f82c 	bl	5e90 <__aeabi_dadd>
    ae38:	4a42      	ldr	r2, [pc, #264]	; (af44 <_dtoa_r+0x3dc>)
    ae3a:	000b      	movs	r3, r1
    ae3c:	4694      	mov	ip, r2
    ae3e:	4463      	add	r3, ip
    ae40:	9008      	str	r0, [sp, #32]
    ae42:	9109      	str	r1, [sp, #36]	; 0x24
    ae44:	9309      	str	r3, [sp, #36]	; 0x24
    ae46:	9b07      	ldr	r3, [sp, #28]
    ae48:	2b00      	cmp	r3, #0
    ae4a:	d101      	bne.n	ae50 <_dtoa_r+0x2e8>
    ae4c:	f000 fc50 	bl	b6f0 <_dtoa_r+0xb88>
    ae50:	9b03      	ldr	r3, [sp, #12]
    ae52:	9313      	str	r3, [sp, #76]	; 0x4c
    ae54:	9b07      	ldr	r3, [sp, #28]
    ae56:	9312      	str	r3, [sp, #72]	; 0x48
    ae58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	d101      	bne.n	ae62 <_dtoa_r+0x2fa>
    ae5e:	f000 fd1d 	bl	b89c <_dtoa_r+0xd34>
    ae62:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ae64:	2000      	movs	r0, #0
    ae66:	1e5a      	subs	r2, r3, #1
    ae68:	4b33      	ldr	r3, [pc, #204]	; (af38 <_dtoa_r+0x3d0>)
    ae6a:	00d2      	lsls	r2, r2, #3
    ae6c:	189b      	adds	r3, r3, r2
    ae6e:	681a      	ldr	r2, [r3, #0]
    ae70:	685b      	ldr	r3, [r3, #4]
    ae72:	4935      	ldr	r1, [pc, #212]	; (af48 <_dtoa_r+0x3e0>)
    ae74:	f7fb fb1c 	bl	64b0 <__aeabi_ddiv>
    ae78:	9a08      	ldr	r2, [sp, #32]
    ae7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae7c:	f7fc f8cc 	bl	7018 <__aeabi_dsub>
    ae80:	9008      	str	r0, [sp, #32]
    ae82:	9109      	str	r1, [sp, #36]	; 0x24
    ae84:	0039      	movs	r1, r7
    ae86:	0030      	movs	r0, r6
    ae88:	f7fc fbdc 	bl	7644 <__aeabi_d2iz>
    ae8c:	0004      	movs	r4, r0
    ae8e:	f7fc fc0d 	bl	76ac <__aeabi_i2d>
    ae92:	0002      	movs	r2, r0
    ae94:	000b      	movs	r3, r1
    ae96:	0030      	movs	r0, r6
    ae98:	0039      	movs	r1, r7
    ae9a:	f7fc f8bd 	bl	7018 <__aeabi_dsub>
    ae9e:	0005      	movs	r5, r0
    aea0:	000e      	movs	r6, r1
    aea2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aea4:	3430      	adds	r4, #48	; 0x30
    aea6:	1c51      	adds	r1, r2, #1
    aea8:	b2e7      	uxtb	r7, r4
    aeaa:	9114      	str	r1, [sp, #80]	; 0x50
    aeac:	7017      	strb	r7, [r2, #0]
    aeae:	0033      	movs	r3, r6
    aeb0:	9808      	ldr	r0, [sp, #32]
    aeb2:	9909      	ldr	r1, [sp, #36]	; 0x24
    aeb4:	002a      	movs	r2, r5
    aeb6:	f7fc fcef 	bl	7898 <__aeabi_dcmpgt>
    aeba:	2800      	cmp	r0, #0
    aebc:	d001      	beq.n	aec2 <_dtoa_r+0x35a>
    aebe:	f000 fdfe 	bl	babe <_dtoa_r+0xf56>
    aec2:	002a      	movs	r2, r5
    aec4:	0033      	movs	r3, r6
    aec6:	2000      	movs	r0, #0
    aec8:	4912      	ldr	r1, [pc, #72]	; (af14 <_dtoa_r+0x3ac>)
    aeca:	f7fc f8a5 	bl	7018 <__aeabi_dsub>
    aece:	0002      	movs	r2, r0
    aed0:	000b      	movs	r3, r1
    aed2:	9808      	ldr	r0, [sp, #32]
    aed4:	9909      	ldr	r1, [sp, #36]	; 0x24
    aed6:	f7fc fcdf 	bl	7898 <__aeabi_dcmpgt>
    aeda:	2800      	cmp	r0, #0
    aedc:	d001      	beq.n	aee2 <_dtoa_r+0x37a>
    aede:	f000 fde7 	bl	bab0 <_dtoa_r+0xf48>
    aee2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aee4:	2b01      	cmp	r3, #1
    aee6:	d101      	bne.n	aeec <_dtoa_r+0x384>
    aee8:	f000 fc78 	bl	b7dc <_dtoa_r+0xc74>
    aeec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    aeee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aef0:	4694      	mov	ip, r2
    aef2:	4463      	add	r3, ip
    aef4:	4698      	mov	r8, r3
    aef6:	464b      	mov	r3, r9
    aef8:	9312      	str	r3, [sp, #72]	; 0x48
    aefa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    aefc:	4699      	mov	r9, r3
    aefe:	e038      	b.n	af72 <_dtoa_r+0x40a>
    af00:	7ff00000 	.word	0x7ff00000
    af04:	00011f05 	.word	0x00011f05
    af08:	0000270f 	.word	0x0000270f
    af0c:	000123ac 	.word	0x000123ac
    af10:	000123b8 	.word	0x000123b8
    af14:	3ff00000 	.word	0x3ff00000
    af18:	fffffc01 	.word	0xfffffc01
    af1c:	3ff80000 	.word	0x3ff80000
    af20:	636f4361 	.word	0x636f4361
    af24:	3fd287a7 	.word	0x3fd287a7
    af28:	8b60c8b3 	.word	0x8b60c8b3
    af2c:	3fc68a28 	.word	0x3fc68a28
    af30:	509f79fb 	.word	0x509f79fb
    af34:	3fd34413 	.word	0x3fd34413
    af38:	000123f8 	.word	0x000123f8
    af3c:	000123d0 	.word	0x000123d0
    af40:	401c0000 	.word	0x401c0000
    af44:	fcc00000 	.word	0xfcc00000
    af48:	3fe00000 	.word	0x3fe00000
    af4c:	002a      	movs	r2, r5
    af4e:	0033      	movs	r3, r6
    af50:	2000      	movs	r0, #0
    af52:	49b9      	ldr	r1, [pc, #740]	; (b238 <_dtoa_r+0x6d0>)
    af54:	f7fc f860 	bl	7018 <__aeabi_dsub>
    af58:	9a08      	ldr	r2, [sp, #32]
    af5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    af5c:	f7fc fc88 	bl	7870 <__aeabi_dcmplt>
    af60:	2800      	cmp	r0, #0
    af62:	d001      	beq.n	af68 <_dtoa_r+0x400>
    af64:	f000 fd74 	bl	ba50 <_dtoa_r+0xee8>
    af68:	46a1      	mov	r9, r4
    af6a:	4544      	cmp	r4, r8
    af6c:	d101      	bne.n	af72 <_dtoa_r+0x40a>
    af6e:	f000 fc33 	bl	b7d8 <_dtoa_r+0xc70>
    af72:	9808      	ldr	r0, [sp, #32]
    af74:	9909      	ldr	r1, [sp, #36]	; 0x24
    af76:	2200      	movs	r2, #0
    af78:	4bb0      	ldr	r3, [pc, #704]	; (b23c <_dtoa_r+0x6d4>)
    af7a:	f7fb fdcd 	bl	6b18 <__aeabi_dmul>
    af7e:	2200      	movs	r2, #0
    af80:	4bae      	ldr	r3, [pc, #696]	; (b23c <_dtoa_r+0x6d4>)
    af82:	9008      	str	r0, [sp, #32]
    af84:	9109      	str	r1, [sp, #36]	; 0x24
    af86:	0028      	movs	r0, r5
    af88:	0031      	movs	r1, r6
    af8a:	f7fb fdc5 	bl	6b18 <__aeabi_dmul>
    af8e:	000d      	movs	r5, r1
    af90:	0004      	movs	r4, r0
    af92:	f7fc fb57 	bl	7644 <__aeabi_d2iz>
    af96:	0007      	movs	r7, r0
    af98:	f7fc fb88 	bl	76ac <__aeabi_i2d>
    af9c:	0002      	movs	r2, r0
    af9e:	000b      	movs	r3, r1
    afa0:	0020      	movs	r0, r4
    afa2:	0029      	movs	r1, r5
    afa4:	f7fc f838 	bl	7018 <__aeabi_dsub>
    afa8:	464b      	mov	r3, r9
    afaa:	3730      	adds	r7, #48	; 0x30
    afac:	b2ff      	uxtb	r7, r7
    afae:	1c5c      	adds	r4, r3, #1
    afb0:	701f      	strb	r7, [r3, #0]
    afb2:	9a08      	ldr	r2, [sp, #32]
    afb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    afb6:	0005      	movs	r5, r0
    afb8:	000e      	movs	r6, r1
    afba:	f7fc fc59 	bl	7870 <__aeabi_dcmplt>
    afbe:	2800      	cmp	r0, #0
    afc0:	d0c4      	beq.n	af4c <_dtoa_r+0x3e4>
    afc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    afc4:	9303      	str	r3, [sp, #12]
    afc6:	4659      	mov	r1, fp
    afc8:	4650      	mov	r0, sl
    afca:	f001 fa8f 	bl	c4ec <_Bfree>
    afce:	2300      	movs	r3, #0
    afd0:	7023      	strb	r3, [r4, #0]
    afd2:	9b03      	ldr	r3, [sp, #12]
    afd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    afd6:	3301      	adds	r3, #1
    afd8:	6013      	str	r3, [r2, #0]
    afda:	9b26      	ldr	r3, [sp, #152]	; 0x98
    afdc:	2b00      	cmp	r3, #0
    afde:	d100      	bne.n	afe2 <_dtoa_r+0x47a>
    afe0:	e3a8      	b.n	b734 <_dtoa_r+0xbcc>
    afe2:	601c      	str	r4, [r3, #0]
    afe4:	980a      	ldr	r0, [sp, #40]	; 0x28
    afe6:	e5f4      	b.n	abd2 <_dtoa_r+0x6a>
    afe8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    afea:	4699      	mov	r9, r3
    afec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    afee:	444b      	add	r3, r9
    aff0:	001c      	movs	r4, r3
    aff2:	4b93      	ldr	r3, [pc, #588]	; (b240 <_dtoa_r+0x6d8>)
    aff4:	18e3      	adds	r3, r4, r3
    aff6:	2b20      	cmp	r3, #32
    aff8:	dc00      	bgt.n	affc <_dtoa_r+0x494>
    affa:	e17e      	b.n	b2fa <_dtoa_r+0x792>
    affc:	0031      	movs	r1, r6
    affe:	4a91      	ldr	r2, [pc, #580]	; (b244 <_dtoa_r+0x6dc>)
    b000:	4640      	mov	r0, r8
    b002:	18a2      	adds	r2, r4, r2
    b004:	40d1      	lsrs	r1, r2
    b006:	000a      	movs	r2, r1
    b008:	2140      	movs	r1, #64	; 0x40
    b00a:	1acb      	subs	r3, r1, r3
    b00c:	4098      	lsls	r0, r3
    b00e:	4310      	orrs	r0, r2
    b010:	f7fc fb8e 	bl	7730 <__aeabi_ui2d>
    b014:	1e63      	subs	r3, r4, #1
    b016:	4698      	mov	r8, r3
    b018:	2301      	movs	r3, #1
    b01a:	4d8b      	ldr	r5, [pc, #556]	; (b248 <_dtoa_r+0x6e0>)
    b01c:	930f      	str	r3, [sp, #60]	; 0x3c
    b01e:	1949      	adds	r1, r1, r5
    b020:	e618      	b.n	ac54 <_dtoa_r+0xec>
    b022:	488a      	ldr	r0, [pc, #552]	; (b24c <_dtoa_r+0x6e4>)
    b024:	e5d5      	b.n	abd2 <_dtoa_r+0x6a>
    b026:	2300      	movs	r3, #0
    b028:	4652      	mov	r2, sl
    b02a:	2100      	movs	r1, #0
    b02c:	6453      	str	r3, [r2, #68]	; 0x44
    b02e:	4650      	mov	r0, sl
    b030:	f001 fa34 	bl	c49c <_Balloc>
    b034:	4653      	mov	r3, sl
    b036:	6418      	str	r0, [r3, #64]	; 0x40
    b038:	2301      	movs	r3, #1
    b03a:	425b      	negs	r3, r3
    b03c:	9307      	str	r3, [sp, #28]
    b03e:	930e      	str	r3, [sp, #56]	; 0x38
    b040:	3302      	adds	r3, #2
    b042:	2200      	movs	r2, #0
    b044:	930b      	str	r3, [sp, #44]	; 0x2c
    b046:	2300      	movs	r3, #0
    b048:	900a      	str	r0, [sp, #40]	; 0x28
    b04a:	9223      	str	r2, [sp, #140]	; 0x8c
    b04c:	9322      	str	r3, [sp, #136]	; 0x88
    b04e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    b050:	2b00      	cmp	r3, #0
    b052:	da00      	bge.n	b056 <_dtoa_r+0x4ee>
    b054:	e0ab      	b.n	b1ae <_dtoa_r+0x646>
    b056:	9a03      	ldr	r2, [sp, #12]
    b058:	2a0e      	cmp	r2, #14
    b05a:	dd00      	ble.n	b05e <_dtoa_r+0x4f6>
    b05c:	e0a7      	b.n	b1ae <_dtoa_r+0x646>
    b05e:	4b7c      	ldr	r3, [pc, #496]	; (b250 <_dtoa_r+0x6e8>)
    b060:	00d2      	lsls	r2, r2, #3
    b062:	189b      	adds	r3, r3, r2
    b064:	685c      	ldr	r4, [r3, #4]
    b066:	681b      	ldr	r3, [r3, #0]
    b068:	9304      	str	r3, [sp, #16]
    b06a:	9405      	str	r4, [sp, #20]
    b06c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b06e:	2b00      	cmp	r3, #0
    b070:	da00      	bge.n	b074 <_dtoa_r+0x50c>
    b072:	e2a7      	b.n	b5c4 <_dtoa_r+0xa5c>
    b074:	9c04      	ldr	r4, [sp, #16]
    b076:	9d05      	ldr	r5, [sp, #20]
    b078:	0030      	movs	r0, r6
    b07a:	0022      	movs	r2, r4
    b07c:	002b      	movs	r3, r5
    b07e:	0039      	movs	r1, r7
    b080:	f7fb fa16 	bl	64b0 <__aeabi_ddiv>
    b084:	f7fc fade 	bl	7644 <__aeabi_d2iz>
    b088:	4680      	mov	r8, r0
    b08a:	f7fc fb0f 	bl	76ac <__aeabi_i2d>
    b08e:	0022      	movs	r2, r4
    b090:	002b      	movs	r3, r5
    b092:	f7fb fd41 	bl	6b18 <__aeabi_dmul>
    b096:	0002      	movs	r2, r0
    b098:	000b      	movs	r3, r1
    b09a:	0030      	movs	r0, r6
    b09c:	0039      	movs	r1, r7
    b09e:	f7fb ffbb 	bl	7018 <__aeabi_dsub>
    b0a2:	4643      	mov	r3, r8
    b0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b0a6:	3330      	adds	r3, #48	; 0x30
    b0a8:	7013      	strb	r3, [r2, #0]
    b0aa:	9b07      	ldr	r3, [sp, #28]
    b0ac:	0006      	movs	r6, r0
    b0ae:	000f      	movs	r7, r1
    b0b0:	1c54      	adds	r4, r2, #1
    b0b2:	2b01      	cmp	r3, #1
    b0b4:	d04e      	beq.n	b154 <_dtoa_r+0x5ec>
    b0b6:	2200      	movs	r2, #0
    b0b8:	4b60      	ldr	r3, [pc, #384]	; (b23c <_dtoa_r+0x6d4>)
    b0ba:	f7fb fd2d 	bl	6b18 <__aeabi_dmul>
    b0be:	2200      	movs	r2, #0
    b0c0:	2300      	movs	r3, #0
    b0c2:	0006      	movs	r6, r0
    b0c4:	000f      	movs	r7, r1
    b0c6:	f7fc fbcd 	bl	7864 <__aeabi_dcmpeq>
    b0ca:	2800      	cmp	r0, #0
    b0cc:	d000      	beq.n	b0d0 <_dtoa_r+0x568>
    b0ce:	e77a      	b.n	afc6 <_dtoa_r+0x45e>
    b0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b0d2:	9a07      	ldr	r2, [sp, #28]
    b0d4:	1c9d      	adds	r5, r3, #2
    b0d6:	469c      	mov	ip, r3
    b0d8:	465b      	mov	r3, fp
    b0da:	9306      	str	r3, [sp, #24]
    b0dc:	4653      	mov	r3, sl
    b0de:	4462      	add	r2, ip
    b0e0:	46aa      	mov	sl, r5
    b0e2:	9c04      	ldr	r4, [sp, #16]
    b0e4:	9d05      	ldr	r5, [sp, #20]
    b0e6:	4691      	mov	r9, r2
    b0e8:	9307      	str	r3, [sp, #28]
    b0ea:	e00f      	b.n	b10c <_dtoa_r+0x5a4>
    b0ec:	2200      	movs	r2, #0
    b0ee:	4b53      	ldr	r3, [pc, #332]	; (b23c <_dtoa_r+0x6d4>)
    b0f0:	f7fb fd12 	bl	6b18 <__aeabi_dmul>
    b0f4:	2301      	movs	r3, #1
    b0f6:	469c      	mov	ip, r3
    b0f8:	2200      	movs	r2, #0
    b0fa:	2300      	movs	r3, #0
    b0fc:	0006      	movs	r6, r0
    b0fe:	000f      	movs	r7, r1
    b100:	44e2      	add	sl, ip
    b102:	f7fc fbaf 	bl	7864 <__aeabi_dcmpeq>
    b106:	2800      	cmp	r0, #0
    b108:	d000      	beq.n	b10c <_dtoa_r+0x5a4>
    b10a:	e2d9      	b.n	b6c0 <_dtoa_r+0xb58>
    b10c:	0022      	movs	r2, r4
    b10e:	002b      	movs	r3, r5
    b110:	0030      	movs	r0, r6
    b112:	0039      	movs	r1, r7
    b114:	f7fb f9cc 	bl	64b0 <__aeabi_ddiv>
    b118:	f7fc fa94 	bl	7644 <__aeabi_d2iz>
    b11c:	4680      	mov	r8, r0
    b11e:	f7fc fac5 	bl	76ac <__aeabi_i2d>
    b122:	0022      	movs	r2, r4
    b124:	002b      	movs	r3, r5
    b126:	f7fb fcf7 	bl	6b18 <__aeabi_dmul>
    b12a:	0002      	movs	r2, r0
    b12c:	000b      	movs	r3, r1
    b12e:	0030      	movs	r0, r6
    b130:	0039      	movs	r1, r7
    b132:	f7fb ff71 	bl	7018 <__aeabi_dsub>
    b136:	4653      	mov	r3, sl
    b138:	4642      	mov	r2, r8
    b13a:	3b01      	subs	r3, #1
    b13c:	3230      	adds	r2, #48	; 0x30
    b13e:	0006      	movs	r6, r0
    b140:	000f      	movs	r7, r1
    b142:	46d3      	mov	fp, sl
    b144:	701a      	strb	r2, [r3, #0]
    b146:	45d1      	cmp	r9, sl
    b148:	d1d0      	bne.n	b0ec <_dtoa_r+0x584>
    b14a:	9b06      	ldr	r3, [sp, #24]
    b14c:	4654      	mov	r4, sl
    b14e:	469b      	mov	fp, r3
    b150:	9b07      	ldr	r3, [sp, #28]
    b152:	469a      	mov	sl, r3
    b154:	0032      	movs	r2, r6
    b156:	003b      	movs	r3, r7
    b158:	0030      	movs	r0, r6
    b15a:	0039      	movs	r1, r7
    b15c:	f7fa fe98 	bl	5e90 <__aeabi_dadd>
    b160:	0006      	movs	r6, r0
    b162:	000f      	movs	r7, r1
    b164:	0002      	movs	r2, r0
    b166:	000b      	movs	r3, r1
    b168:	9804      	ldr	r0, [sp, #16]
    b16a:	9905      	ldr	r1, [sp, #20]
    b16c:	f7fc fb80 	bl	7870 <__aeabi_dcmplt>
    b170:	2800      	cmp	r0, #0
    b172:	d10c      	bne.n	b18e <_dtoa_r+0x626>
    b174:	9804      	ldr	r0, [sp, #16]
    b176:	9905      	ldr	r1, [sp, #20]
    b178:	0032      	movs	r2, r6
    b17a:	003b      	movs	r3, r7
    b17c:	f7fc fb72 	bl	7864 <__aeabi_dcmpeq>
    b180:	2800      	cmp	r0, #0
    b182:	d100      	bne.n	b186 <_dtoa_r+0x61e>
    b184:	e71f      	b.n	afc6 <_dtoa_r+0x45e>
    b186:	4643      	mov	r3, r8
    b188:	07db      	lsls	r3, r3, #31
    b18a:	d400      	bmi.n	b18e <_dtoa_r+0x626>
    b18c:	e71b      	b.n	afc6 <_dtoa_r+0x45e>
    b18e:	1e65      	subs	r5, r4, #1
    b190:	782f      	ldrb	r7, [r5, #0]
    b192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b194:	e006      	b.n	b1a4 <_dtoa_r+0x63c>
    b196:	429d      	cmp	r5, r3
    b198:	d100      	bne.n	b19c <_dtoa_r+0x634>
    b19a:	e351      	b.n	b840 <_dtoa_r+0xcd8>
    b19c:	3c02      	subs	r4, #2
    b19e:	7827      	ldrb	r7, [r4, #0]
    b1a0:	002c      	movs	r4, r5
    b1a2:	3d01      	subs	r5, #1
    b1a4:	2f39      	cmp	r7, #57	; 0x39
    b1a6:	d0f6      	beq.n	b196 <_dtoa_r+0x62e>
    b1a8:	3701      	adds	r7, #1
    b1aa:	702f      	strb	r7, [r5, #0]
    b1ac:	e70b      	b.n	afc6 <_dtoa_r+0x45e>
    b1ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b1b0:	2a00      	cmp	r2, #0
    b1b2:	d04f      	beq.n	b254 <_dtoa_r+0x6ec>
    b1b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    b1b6:	2a01      	cmp	r2, #1
    b1b8:	dc00      	bgt.n	b1bc <_dtoa_r+0x654>
    b1ba:	e22c      	b.n	b616 <_dtoa_r+0xaae>
    b1bc:	9b07      	ldr	r3, [sp, #28]
    b1be:	1e5c      	subs	r4, r3, #1
    b1c0:	464b      	mov	r3, r9
    b1c2:	45a1      	cmp	r9, r4
    b1c4:	da00      	bge.n	b1c8 <_dtoa_r+0x660>
    b1c6:	e2b8      	b.n	b73a <_dtoa_r+0xbd2>
    b1c8:	1b1c      	subs	r4, r3, r4
    b1ca:	9b07      	ldr	r3, [sp, #28]
    b1cc:	2b00      	cmp	r3, #0
    b1ce:	da00      	bge.n	b1d2 <_dtoa_r+0x66a>
    b1d0:	e3d4      	b.n	b97c <_dtoa_r+0xe14>
    b1d2:	9b06      	ldr	r3, [sp, #24]
    b1d4:	9308      	str	r3, [sp, #32]
    b1d6:	9b07      	ldr	r3, [sp, #28]
    b1d8:	9a06      	ldr	r2, [sp, #24]
    b1da:	2101      	movs	r1, #1
    b1dc:	4694      	mov	ip, r2
    b1de:	449c      	add	ip, r3
    b1e0:	4662      	mov	r2, ip
    b1e2:	9206      	str	r2, [sp, #24]
    b1e4:	9a04      	ldr	r2, [sp, #16]
    b1e6:	4650      	mov	r0, sl
    b1e8:	4694      	mov	ip, r2
    b1ea:	449c      	add	ip, r3
    b1ec:	4663      	mov	r3, ip
    b1ee:	9304      	str	r3, [sp, #16]
    b1f0:	f001 fa5e 	bl	c6b0 <__i2b>
    b1f4:	4680      	mov	r8, r0
    b1f6:	e032      	b.n	b25e <_dtoa_r+0x6f6>
    b1f8:	9a06      	ldr	r2, [sp, #24]
    b1fa:	9b03      	ldr	r3, [sp, #12]
    b1fc:	1ad2      	subs	r2, r2, r3
    b1fe:	425b      	negs	r3, r3
    b200:	4699      	mov	r9, r3
    b202:	2300      	movs	r3, #0
    b204:	9206      	str	r2, [sp, #24]
    b206:	930d      	str	r3, [sp, #52]	; 0x34
    b208:	e579      	b.n	acfe <_dtoa_r+0x196>
    b20a:	9803      	ldr	r0, [sp, #12]
    b20c:	f7fc fa4e 	bl	76ac <__aeabi_i2d>
    b210:	000b      	movs	r3, r1
    b212:	0002      	movs	r2, r0
    b214:	0029      	movs	r1, r5
    b216:	0020      	movs	r0, r4
    b218:	f7fc fb24 	bl	7864 <__aeabi_dcmpeq>
    b21c:	0002      	movs	r2, r0
    b21e:	4250      	negs	r0, r2
    b220:	4150      	adcs	r0, r2
    b222:	9b03      	ldr	r3, [sp, #12]
    b224:	1a1b      	subs	r3, r3, r0
    b226:	9303      	str	r3, [sp, #12]
    b228:	e53d      	b.n	aca6 <_dtoa_r+0x13e>
    b22a:	2301      	movs	r3, #1
    b22c:	1a9b      	subs	r3, r3, r2
    b22e:	9306      	str	r3, [sp, #24]
    b230:	2300      	movs	r3, #0
    b232:	9304      	str	r3, [sp, #16]
    b234:	e557      	b.n	ace6 <_dtoa_r+0x17e>
    b236:	46c0      	nop			; (mov r8, r8)
    b238:	3ff00000 	.word	0x3ff00000
    b23c:	40240000 	.word	0x40240000
    b240:	00000432 	.word	0x00000432
    b244:	00000412 	.word	0x00000412
    b248:	fe100000 	.word	0xfe100000
    b24c:	00011f04 	.word	0x00011f04
    b250:	000123f8 	.word	0x000123f8
    b254:	9b06      	ldr	r3, [sp, #24]
    b256:	464c      	mov	r4, r9
    b258:	9308      	str	r3, [sp, #32]
    b25a:	2300      	movs	r3, #0
    b25c:	4698      	mov	r8, r3
    b25e:	9908      	ldr	r1, [sp, #32]
    b260:	1e0b      	subs	r3, r1, #0
    b262:	dd0e      	ble.n	b282 <_dtoa_r+0x71a>
    b264:	9a04      	ldr	r2, [sp, #16]
    b266:	2a00      	cmp	r2, #0
    b268:	dd0b      	ble.n	b282 <_dtoa_r+0x71a>
    b26a:	4293      	cmp	r3, r2
    b26c:	dd00      	ble.n	b270 <_dtoa_r+0x708>
    b26e:	e187      	b.n	b580 <_dtoa_r+0xa18>
    b270:	9a06      	ldr	r2, [sp, #24]
    b272:	1ad2      	subs	r2, r2, r3
    b274:	9206      	str	r2, [sp, #24]
    b276:	9a08      	ldr	r2, [sp, #32]
    b278:	1ad2      	subs	r2, r2, r3
    b27a:	9208      	str	r2, [sp, #32]
    b27c:	9a04      	ldr	r2, [sp, #16]
    b27e:	1ad3      	subs	r3, r2, r3
    b280:	9304      	str	r3, [sp, #16]
    b282:	464b      	mov	r3, r9
    b284:	2b00      	cmp	r3, #0
    b286:	d01a      	beq.n	b2be <_dtoa_r+0x756>
    b288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b28a:	2b00      	cmp	r3, #0
    b28c:	d100      	bne.n	b290 <_dtoa_r+0x728>
    b28e:	e1bb      	b.n	b608 <_dtoa_r+0xaa0>
    b290:	2c00      	cmp	r4, #0
    b292:	dd10      	ble.n	b2b6 <_dtoa_r+0x74e>
    b294:	4641      	mov	r1, r8
    b296:	0022      	movs	r2, r4
    b298:	4650      	mov	r0, sl
    b29a:	f001 fabd 	bl	c818 <__pow5mult>
    b29e:	465a      	mov	r2, fp
    b2a0:	0001      	movs	r1, r0
    b2a2:	4680      	mov	r8, r0
    b2a4:	4650      	mov	r0, sl
    b2a6:	f001 fa0d 	bl	c6c4 <__multiply>
    b2aa:	0005      	movs	r5, r0
    b2ac:	4659      	mov	r1, fp
    b2ae:	4650      	mov	r0, sl
    b2b0:	f001 f91c 	bl	c4ec <_Bfree>
    b2b4:	46ab      	mov	fp, r5
    b2b6:	464b      	mov	r3, r9
    b2b8:	1b1a      	subs	r2, r3, r4
    b2ba:	d000      	beq.n	b2be <_dtoa_r+0x756>
    b2bc:	e1a5      	b.n	b60a <_dtoa_r+0xaa2>
    b2be:	2101      	movs	r1, #1
    b2c0:	4650      	mov	r0, sl
    b2c2:	f001 f9f5 	bl	c6b0 <__i2b>
    b2c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b2c8:	4681      	mov	r9, r0
    b2ca:	2b00      	cmp	r3, #0
    b2cc:	dd1d      	ble.n	b30a <_dtoa_r+0x7a2>
    b2ce:	001a      	movs	r2, r3
    b2d0:	0001      	movs	r1, r0
    b2d2:	4650      	mov	r0, sl
    b2d4:	f001 faa0 	bl	c818 <__pow5mult>
    b2d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b2da:	4681      	mov	r9, r0
    b2dc:	2b01      	cmp	r3, #1
    b2de:	dc00      	bgt.n	b2e2 <_dtoa_r+0x77a>
    b2e0:	e150      	b.n	b584 <_dtoa_r+0xa1c>
    b2e2:	2400      	movs	r4, #0
    b2e4:	464b      	mov	r3, r9
    b2e6:	691b      	ldr	r3, [r3, #16]
    b2e8:	3303      	adds	r3, #3
    b2ea:	009b      	lsls	r3, r3, #2
    b2ec:	444b      	add	r3, r9
    b2ee:	6858      	ldr	r0, [r3, #4]
    b2f0:	f001 f996 	bl	c620 <__hi0bits>
    b2f4:	2320      	movs	r3, #32
    b2f6:	1a1b      	subs	r3, r3, r0
    b2f8:	e010      	b.n	b31c <_dtoa_r+0x7b4>
    b2fa:	2220      	movs	r2, #32
    b2fc:	0030      	movs	r0, r6
    b2fe:	1ad3      	subs	r3, r2, r3
    b300:	4098      	lsls	r0, r3
    b302:	e685      	b.n	b010 <_dtoa_r+0x4a8>
    b304:	2300      	movs	r3, #0
    b306:	930c      	str	r3, [sp, #48]	; 0x30
    b308:	e4e3      	b.n	acd2 <_dtoa_r+0x16a>
    b30a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b30c:	2400      	movs	r4, #0
    b30e:	2b01      	cmp	r3, #1
    b310:	dc00      	bgt.n	b314 <_dtoa_r+0x7ac>
    b312:	e18b      	b.n	b62c <_dtoa_r+0xac4>
    b314:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b316:	2301      	movs	r3, #1
    b318:	2a00      	cmp	r2, #0
    b31a:	d1e3      	bne.n	b2e4 <_dtoa_r+0x77c>
    b31c:	9904      	ldr	r1, [sp, #16]
    b31e:	201f      	movs	r0, #31
    b320:	468c      	mov	ip, r1
    b322:	4463      	add	r3, ip
    b324:	4018      	ands	r0, r3
    b326:	d100      	bne.n	b32a <_dtoa_r+0x7c2>
    b328:	e0ae      	b.n	b488 <_dtoa_r+0x920>
    b32a:	2320      	movs	r3, #32
    b32c:	1a1b      	subs	r3, r3, r0
    b32e:	2b04      	cmp	r3, #4
    b330:	dc00      	bgt.n	b334 <_dtoa_r+0x7cc>
    b332:	e3cc      	b.n	bace <_dtoa_r+0xf66>
    b334:	231c      	movs	r3, #28
    b336:	1a18      	subs	r0, r3, r0
    b338:	9b06      	ldr	r3, [sp, #24]
    b33a:	469c      	mov	ip, r3
    b33c:	4484      	add	ip, r0
    b33e:	4663      	mov	r3, ip
    b340:	9306      	str	r3, [sp, #24]
    b342:	9b08      	ldr	r3, [sp, #32]
    b344:	469c      	mov	ip, r3
    b346:	4484      	add	ip, r0
    b348:	4663      	mov	r3, ip
    b34a:	468c      	mov	ip, r1
    b34c:	4484      	add	ip, r0
    b34e:	9308      	str	r3, [sp, #32]
    b350:	4663      	mov	r3, ip
    b352:	9304      	str	r3, [sp, #16]
    b354:	9b06      	ldr	r3, [sp, #24]
    b356:	2b00      	cmp	r3, #0
    b358:	dd05      	ble.n	b366 <_dtoa_r+0x7fe>
    b35a:	4659      	mov	r1, fp
    b35c:	001a      	movs	r2, r3
    b35e:	4650      	mov	r0, sl
    b360:	f001 faba 	bl	c8d8 <__lshift>
    b364:	4683      	mov	fp, r0
    b366:	9b04      	ldr	r3, [sp, #16]
    b368:	2b00      	cmp	r3, #0
    b36a:	dd05      	ble.n	b378 <_dtoa_r+0x810>
    b36c:	4649      	mov	r1, r9
    b36e:	001a      	movs	r2, r3
    b370:	4650      	mov	r0, sl
    b372:	f001 fab1 	bl	c8d8 <__lshift>
    b376:	4681      	mov	r9, r0
    b378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b37a:	2b00      	cmp	r3, #0
    b37c:	d000      	beq.n	b380 <_dtoa_r+0x818>
    b37e:	e094      	b.n	b4aa <_dtoa_r+0x942>
    b380:	9b07      	ldr	r3, [sp, #28]
    b382:	2b00      	cmp	r3, #0
    b384:	dc00      	bgt.n	b388 <_dtoa_r+0x820>
    b386:	e175      	b.n	b674 <_dtoa_r+0xb0c>
    b388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b38a:	2b00      	cmp	r3, #0
    b38c:	d100      	bne.n	b390 <_dtoa_r+0x828>
    b38e:	e0a6      	b.n	b4de <_dtoa_r+0x976>
    b390:	9b08      	ldr	r3, [sp, #32]
    b392:	2b00      	cmp	r3, #0
    b394:	dd05      	ble.n	b3a2 <_dtoa_r+0x83a>
    b396:	4641      	mov	r1, r8
    b398:	001a      	movs	r2, r3
    b39a:	4650      	mov	r0, sl
    b39c:	f001 fa9c 	bl	c8d8 <__lshift>
    b3a0:	4680      	mov	r8, r0
    b3a2:	4643      	mov	r3, r8
    b3a4:	930c      	str	r3, [sp, #48]	; 0x30
    b3a6:	2c00      	cmp	r4, #0
    b3a8:	d000      	beq.n	b3ac <_dtoa_r+0x844>
    b3aa:	e250      	b.n	b84e <_dtoa_r+0xce6>
    b3ac:	9c07      	ldr	r4, [sp, #28]
    b3ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b3b0:	3c01      	subs	r4, #1
    b3b2:	0023      	movs	r3, r4
    b3b4:	4694      	mov	ip, r2
    b3b6:	4463      	add	r3, ip
    b3b8:	9308      	str	r3, [sp, #32]
    b3ba:	2301      	movs	r3, #1
    b3bc:	4033      	ands	r3, r6
    b3be:	9307      	str	r3, [sp, #28]
    b3c0:	464b      	mov	r3, r9
    b3c2:	9306      	str	r3, [sp, #24]
    b3c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b3c6:	4657      	mov	r7, sl
    b3c8:	4645      	mov	r5, r8
    b3ca:	465e      	mov	r6, fp
    b3cc:	4692      	mov	sl, r2
    b3ce:	4698      	mov	r8, r3
    b3d0:	9b06      	ldr	r3, [sp, #24]
    b3d2:	0030      	movs	r0, r6
    b3d4:	0019      	movs	r1, r3
    b3d6:	4699      	mov	r9, r3
    b3d8:	f7ff fb1c 	bl	aa14 <quorem>
    b3dc:	0003      	movs	r3, r0
    b3de:	900b      	str	r0, [sp, #44]	; 0x2c
    b3e0:	3330      	adds	r3, #48	; 0x30
    b3e2:	0029      	movs	r1, r5
    b3e4:	0030      	movs	r0, r6
    b3e6:	9304      	str	r3, [sp, #16]
    b3e8:	f001 fad6 	bl	c998 <__mcmp>
    b3ec:	4649      	mov	r1, r9
    b3ee:	0004      	movs	r4, r0
    b3f0:	4642      	mov	r2, r8
    b3f2:	0038      	movs	r0, r7
    b3f4:	f001 faea 	bl	c9cc <__mdiff>
    b3f8:	68c3      	ldr	r3, [r0, #12]
    b3fa:	4681      	mov	r9, r0
    b3fc:	2b00      	cmp	r3, #0
    b3fe:	d000      	beq.n	b402 <_dtoa_r+0x89a>
    b400:	e11e      	b.n	b640 <_dtoa_r+0xad8>
    b402:	0001      	movs	r1, r0
    b404:	0030      	movs	r0, r6
    b406:	f001 fac7 	bl	c998 <__mcmp>
    b40a:	4683      	mov	fp, r0
    b40c:	4649      	mov	r1, r9
    b40e:	0038      	movs	r0, r7
    b410:	f001 f86c 	bl	c4ec <_Bfree>
    b414:	465b      	mov	r3, fp
    b416:	9a22      	ldr	r2, [sp, #136]	; 0x88
    b418:	4313      	orrs	r3, r2
    b41a:	d103      	bne.n	b424 <_dtoa_r+0x8bc>
    b41c:	9b07      	ldr	r3, [sp, #28]
    b41e:	2b00      	cmp	r3, #0
    b420:	d100      	bne.n	b424 <_dtoa_r+0x8bc>
    b422:	e306      	b.n	ba32 <_dtoa_r+0xeca>
    b424:	2c00      	cmp	r4, #0
    b426:	da00      	bge.n	b42a <_dtoa_r+0x8c2>
    b428:	e1a8      	b.n	b77c <_dtoa_r+0xc14>
    b42a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b42c:	431c      	orrs	r4, r3
    b42e:	d103      	bne.n	b438 <_dtoa_r+0x8d0>
    b430:	9b07      	ldr	r3, [sp, #28]
    b432:	2b00      	cmp	r3, #0
    b434:	d100      	bne.n	b438 <_dtoa_r+0x8d0>
    b436:	e1a1      	b.n	b77c <_dtoa_r+0xc14>
    b438:	465b      	mov	r3, fp
    b43a:	2b00      	cmp	r3, #0
    b43c:	dd00      	ble.n	b440 <_dtoa_r+0x8d8>
    b43e:	e282      	b.n	b946 <_dtoa_r+0xdde>
    b440:	4669      	mov	r1, sp
    b442:	4652      	mov	r2, sl
    b444:	4653      	mov	r3, sl
    b446:	7c09      	ldrb	r1, [r1, #16]
    b448:	1c5c      	adds	r4, r3, #1
    b44a:	7011      	strb	r1, [r2, #0]
    b44c:	9a08      	ldr	r2, [sp, #32]
    b44e:	4552      	cmp	r2, sl
    b450:	d100      	bne.n	b454 <_dtoa_r+0x8ec>
    b452:	e28a      	b.n	b96a <_dtoa_r+0xe02>
    b454:	0031      	movs	r1, r6
    b456:	2300      	movs	r3, #0
    b458:	220a      	movs	r2, #10
    b45a:	0038      	movs	r0, r7
    b45c:	f001 f850 	bl	c500 <__multadd>
    b460:	2300      	movs	r3, #0
    b462:	0006      	movs	r6, r0
    b464:	220a      	movs	r2, #10
    b466:	0029      	movs	r1, r5
    b468:	0038      	movs	r0, r7
    b46a:	4545      	cmp	r5, r8
    b46c:	d100      	bne.n	b470 <_dtoa_r+0x908>
    b46e:	e0e1      	b.n	b634 <_dtoa_r+0xacc>
    b470:	f001 f846 	bl	c500 <__multadd>
    b474:	4641      	mov	r1, r8
    b476:	0005      	movs	r5, r0
    b478:	2300      	movs	r3, #0
    b47a:	220a      	movs	r2, #10
    b47c:	0038      	movs	r0, r7
    b47e:	f001 f83f 	bl	c500 <__multadd>
    b482:	46a2      	mov	sl, r4
    b484:	4680      	mov	r8, r0
    b486:	e7a3      	b.n	b3d0 <_dtoa_r+0x868>
    b488:	201c      	movs	r0, #28
    b48a:	9b06      	ldr	r3, [sp, #24]
    b48c:	469c      	mov	ip, r3
    b48e:	4484      	add	ip, r0
    b490:	4663      	mov	r3, ip
    b492:	9306      	str	r3, [sp, #24]
    b494:	9b08      	ldr	r3, [sp, #32]
    b496:	469c      	mov	ip, r3
    b498:	4484      	add	ip, r0
    b49a:	4663      	mov	r3, ip
    b49c:	9308      	str	r3, [sp, #32]
    b49e:	9b04      	ldr	r3, [sp, #16]
    b4a0:	469c      	mov	ip, r3
    b4a2:	4484      	add	ip, r0
    b4a4:	4663      	mov	r3, ip
    b4a6:	9304      	str	r3, [sp, #16]
    b4a8:	e754      	b.n	b354 <_dtoa_r+0x7ec>
    b4aa:	4649      	mov	r1, r9
    b4ac:	4658      	mov	r0, fp
    b4ae:	f001 fa73 	bl	c998 <__mcmp>
    b4b2:	2800      	cmp	r0, #0
    b4b4:	db00      	blt.n	b4b8 <_dtoa_r+0x950>
    b4b6:	e763      	b.n	b380 <_dtoa_r+0x818>
    b4b8:	9b03      	ldr	r3, [sp, #12]
    b4ba:	4659      	mov	r1, fp
    b4bc:	3b01      	subs	r3, #1
    b4be:	9303      	str	r3, [sp, #12]
    b4c0:	220a      	movs	r2, #10
    b4c2:	2300      	movs	r3, #0
    b4c4:	4650      	mov	r0, sl
    b4c6:	f001 f81b 	bl	c500 <__multadd>
    b4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b4cc:	4683      	mov	fp, r0
    b4ce:	2b00      	cmp	r3, #0
    b4d0:	d000      	beq.n	b4d4 <_dtoa_r+0x96c>
    b4d2:	e2ca      	b.n	ba6a <_dtoa_r+0xf02>
    b4d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	dc00      	bgt.n	b4dc <_dtoa_r+0x974>
    b4da:	e2d8      	b.n	ba8e <_dtoa_r+0xf26>
    b4dc:	9307      	str	r3, [sp, #28]
    b4de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b4e0:	465d      	mov	r5, fp
    b4e2:	2400      	movs	r4, #0
    b4e4:	9f07      	ldr	r7, [sp, #28]
    b4e6:	469b      	mov	fp, r3
    b4e8:	e006      	b.n	b4f8 <_dtoa_r+0x990>
    b4ea:	0029      	movs	r1, r5
    b4ec:	2300      	movs	r3, #0
    b4ee:	220a      	movs	r2, #10
    b4f0:	4650      	mov	r0, sl
    b4f2:	f001 f805 	bl	c500 <__multadd>
    b4f6:	0005      	movs	r5, r0
    b4f8:	4649      	mov	r1, r9
    b4fa:	0028      	movs	r0, r5
    b4fc:	f7ff fa8a 	bl	aa14 <quorem>
    b500:	465b      	mov	r3, fp
    b502:	3030      	adds	r0, #48	; 0x30
    b504:	5518      	strb	r0, [r3, r4]
    b506:	3401      	adds	r4, #1
    b508:	42bc      	cmp	r4, r7
    b50a:	dbee      	blt.n	b4ea <_dtoa_r+0x982>
    b50c:	46ab      	mov	fp, r5
    b50e:	0006      	movs	r6, r0
    b510:	9c07      	ldr	r4, [sp, #28]
    b512:	2c00      	cmp	r4, #0
    b514:	dc00      	bgt.n	b518 <_dtoa_r+0x9b0>
    b516:	e237      	b.n	b988 <_dtoa_r+0xe20>
    b518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b51a:	2700      	movs	r7, #0
    b51c:	469c      	mov	ip, r3
    b51e:	4464      	add	r4, ip
    b520:	4659      	mov	r1, fp
    b522:	2201      	movs	r2, #1
    b524:	4650      	mov	r0, sl
    b526:	f001 f9d7 	bl	c8d8 <__lshift>
    b52a:	4649      	mov	r1, r9
    b52c:	4683      	mov	fp, r0
    b52e:	f001 fa33 	bl	c998 <__mcmp>
    b532:	2800      	cmp	r0, #0
    b534:	dc00      	bgt.n	b538 <_dtoa_r+0x9d0>
    b536:	e144      	b.n	b7c2 <_dtoa_r+0xc5a>
    b538:	1e65      	subs	r5, r4, #1
    b53a:	782b      	ldrb	r3, [r5, #0]
    b53c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b53e:	e006      	b.n	b54e <_dtoa_r+0x9e6>
    b540:	4295      	cmp	r5, r2
    b542:	d100      	bne.n	b546 <_dtoa_r+0x9de>
    b544:	e0b1      	b.n	b6aa <_dtoa_r+0xb42>
    b546:	3c02      	subs	r4, #2
    b548:	7823      	ldrb	r3, [r4, #0]
    b54a:	002c      	movs	r4, r5
    b54c:	3d01      	subs	r5, #1
    b54e:	2b39      	cmp	r3, #57	; 0x39
    b550:	d0f6      	beq.n	b540 <_dtoa_r+0x9d8>
    b552:	3301      	adds	r3, #1
    b554:	702b      	strb	r3, [r5, #0]
    b556:	4649      	mov	r1, r9
    b558:	4650      	mov	r0, sl
    b55a:	f000 ffc7 	bl	c4ec <_Bfree>
    b55e:	4643      	mov	r3, r8
    b560:	2b00      	cmp	r3, #0
    b562:	d100      	bne.n	b566 <_dtoa_r+0x9fe>
    b564:	e52f      	b.n	afc6 <_dtoa_r+0x45e>
    b566:	2f00      	cmp	r7, #0
    b568:	d005      	beq.n	b576 <_dtoa_r+0xa0e>
    b56a:	4547      	cmp	r7, r8
    b56c:	d003      	beq.n	b576 <_dtoa_r+0xa0e>
    b56e:	0039      	movs	r1, r7
    b570:	4650      	mov	r0, sl
    b572:	f000 ffbb 	bl	c4ec <_Bfree>
    b576:	4641      	mov	r1, r8
    b578:	4650      	mov	r0, sl
    b57a:	f000 ffb7 	bl	c4ec <_Bfree>
    b57e:	e522      	b.n	afc6 <_dtoa_r+0x45e>
    b580:	0013      	movs	r3, r2
    b582:	e675      	b.n	b270 <_dtoa_r+0x708>
    b584:	2e00      	cmp	r6, #0
    b586:	d000      	beq.n	b58a <_dtoa_r+0xa22>
    b588:	e6ab      	b.n	b2e2 <_dtoa_r+0x77a>
    b58a:	033b      	lsls	r3, r7, #12
    b58c:	2400      	movs	r4, #0
    b58e:	2b00      	cmp	r3, #0
    b590:	d000      	beq.n	b594 <_dtoa_r+0xa2c>
    b592:	e6bf      	b.n	b314 <_dtoa_r+0x7ac>
    b594:	4bba      	ldr	r3, [pc, #744]	; (b880 <_dtoa_r+0xd18>)
    b596:	423b      	tst	r3, r7
    b598:	d100      	bne.n	b59c <_dtoa_r+0xa34>
    b59a:	e6bb      	b.n	b314 <_dtoa_r+0x7ac>
    b59c:	9b06      	ldr	r3, [sp, #24]
    b59e:	3401      	adds	r4, #1
    b5a0:	3301      	adds	r3, #1
    b5a2:	9306      	str	r3, [sp, #24]
    b5a4:	9b04      	ldr	r3, [sp, #16]
    b5a6:	3301      	adds	r3, #1
    b5a8:	9304      	str	r3, [sp, #16]
    b5aa:	e6b3      	b.n	b314 <_dtoa_r+0x7ac>
    b5ac:	2301      	movs	r3, #1
    b5ae:	930b      	str	r3, [sp, #44]	; 0x2c
    b5b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	dc00      	bgt.n	b5b8 <_dtoa_r+0xa50>
    b5b6:	e0d1      	b.n	b75c <_dtoa_r+0xbf4>
    b5b8:	001d      	movs	r5, r3
    b5ba:	4698      	mov	r8, r3
    b5bc:	930e      	str	r3, [sp, #56]	; 0x38
    b5be:	9307      	str	r3, [sp, #28]
    b5c0:	f7ff fbc8 	bl	ad54 <_dtoa_r+0x1ec>
    b5c4:	9b07      	ldr	r3, [sp, #28]
    b5c6:	2b00      	cmp	r3, #0
    b5c8:	dd00      	ble.n	b5cc <_dtoa_r+0xa64>
    b5ca:	e553      	b.n	b074 <_dtoa_r+0x50c>
    b5cc:	d000      	beq.n	b5d0 <_dtoa_r+0xa68>
    b5ce:	e0ad      	b.n	b72c <_dtoa_r+0xbc4>
    b5d0:	9804      	ldr	r0, [sp, #16]
    b5d2:	9905      	ldr	r1, [sp, #20]
    b5d4:	2200      	movs	r2, #0
    b5d6:	4bab      	ldr	r3, [pc, #684]	; (b884 <_dtoa_r+0xd1c>)
    b5d8:	f7fb fa9e 	bl	6b18 <__aeabi_dmul>
    b5dc:	003b      	movs	r3, r7
    b5de:	0032      	movs	r2, r6
    b5e0:	f7fc f964 	bl	78ac <__aeabi_dcmpge>
    b5e4:	2300      	movs	r3, #0
    b5e6:	4699      	mov	r9, r3
    b5e8:	4698      	mov	r8, r3
    b5ea:	2800      	cmp	r0, #0
    b5ec:	d055      	beq.n	b69a <_dtoa_r+0xb32>
    b5ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    b5f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    b5f2:	43db      	mvns	r3, r3
    b5f4:	9303      	str	r3, [sp, #12]
    b5f6:	4649      	mov	r1, r9
    b5f8:	4650      	mov	r0, sl
    b5fa:	f000 ff77 	bl	c4ec <_Bfree>
    b5fe:	4643      	mov	r3, r8
    b600:	2b00      	cmp	r3, #0
    b602:	d100      	bne.n	b606 <_dtoa_r+0xa9e>
    b604:	e4df      	b.n	afc6 <_dtoa_r+0x45e>
    b606:	e7b6      	b.n	b576 <_dtoa_r+0xa0e>
    b608:	464a      	mov	r2, r9
    b60a:	4659      	mov	r1, fp
    b60c:	4650      	mov	r0, sl
    b60e:	f001 f903 	bl	c818 <__pow5mult>
    b612:	4683      	mov	fp, r0
    b614:	e653      	b.n	b2be <_dtoa_r+0x756>
    b616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b618:	2a00      	cmp	r2, #0
    b61a:	d100      	bne.n	b61e <_dtoa_r+0xab6>
    b61c:	e1b6      	b.n	b98c <_dtoa_r+0xe24>
    b61e:	4a9a      	ldr	r2, [pc, #616]	; (b888 <_dtoa_r+0xd20>)
    b620:	464c      	mov	r4, r9
    b622:	4694      	mov	ip, r2
    b624:	9a06      	ldr	r2, [sp, #24]
    b626:	4463      	add	r3, ip
    b628:	9208      	str	r2, [sp, #32]
    b62a:	e5d5      	b.n	b1d8 <_dtoa_r+0x670>
    b62c:	2e00      	cmp	r6, #0
    b62e:	d000      	beq.n	b632 <_dtoa_r+0xaca>
    b630:	e670      	b.n	b314 <_dtoa_r+0x7ac>
    b632:	e7aa      	b.n	b58a <_dtoa_r+0xa22>
    b634:	f000 ff64 	bl	c500 <__multadd>
    b638:	46a2      	mov	sl, r4
    b63a:	0005      	movs	r5, r0
    b63c:	4680      	mov	r8, r0
    b63e:	e6c7      	b.n	b3d0 <_dtoa_r+0x868>
    b640:	2301      	movs	r3, #1
    b642:	469b      	mov	fp, r3
    b644:	e6e2      	b.n	b40c <_dtoa_r+0x8a4>
    b646:	2300      	movs	r3, #0
    b648:	930b      	str	r3, [sp, #44]	; 0x2c
    b64a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b64c:	2b02      	cmp	r3, #2
    b64e:	d0af      	beq.n	b5b0 <_dtoa_r+0xa48>
    b650:	2400      	movs	r4, #0
    b652:	4653      	mov	r3, sl
    b654:	0021      	movs	r1, r4
    b656:	645c      	str	r4, [r3, #68]	; 0x44
    b658:	4650      	mov	r0, sl
    b65a:	f000 ff1f 	bl	c49c <_Balloc>
    b65e:	4653      	mov	r3, sl
    b660:	6418      	str	r0, [r3, #64]	; 0x40
    b662:	2301      	movs	r3, #1
    b664:	425b      	negs	r3, r3
    b666:	9307      	str	r3, [sp, #28]
    b668:	930e      	str	r3, [sp, #56]	; 0x38
    b66a:	3302      	adds	r3, #2
    b66c:	900a      	str	r0, [sp, #40]	; 0x28
    b66e:	9423      	str	r4, [sp, #140]	; 0x8c
    b670:	930b      	str	r3, [sp, #44]	; 0x2c
    b672:	e4ec      	b.n	b04e <_dtoa_r+0x4e6>
    b674:	9b22      	ldr	r3, [sp, #136]	; 0x88
    b676:	2b02      	cmp	r3, #2
    b678:	dc00      	bgt.n	b67c <_dtoa_r+0xb14>
    b67a:	e685      	b.n	b388 <_dtoa_r+0x820>
    b67c:	9b07      	ldr	r3, [sp, #28]
    b67e:	2b00      	cmp	r3, #0
    b680:	d1b5      	bne.n	b5ee <_dtoa_r+0xa86>
    b682:	4649      	mov	r1, r9
    b684:	2205      	movs	r2, #5
    b686:	4650      	mov	r0, sl
    b688:	f000 ff3a 	bl	c500 <__multadd>
    b68c:	4681      	mov	r9, r0
    b68e:	0001      	movs	r1, r0
    b690:	4658      	mov	r0, fp
    b692:	f001 f981 	bl	c998 <__mcmp>
    b696:	2800      	cmp	r0, #0
    b698:	dda9      	ble.n	b5ee <_dtoa_r+0xa86>
    b69a:	2331      	movs	r3, #49	; 0x31
    b69c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b69e:	7013      	strb	r3, [r2, #0]
    b6a0:	9b03      	ldr	r3, [sp, #12]
    b6a2:	1c54      	adds	r4, r2, #1
    b6a4:	3301      	adds	r3, #1
    b6a6:	9303      	str	r3, [sp, #12]
    b6a8:	e7a5      	b.n	b5f6 <_dtoa_r+0xa8e>
    b6aa:	9b03      	ldr	r3, [sp, #12]
    b6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b6ae:	3301      	adds	r3, #1
    b6b0:	9303      	str	r3, [sp, #12]
    b6b2:	2331      	movs	r3, #49	; 0x31
    b6b4:	7013      	strb	r3, [r2, #0]
    b6b6:	e74e      	b.n	b556 <_dtoa_r+0x9ee>
    b6b8:	2300      	movs	r3, #0
    b6ba:	930b      	str	r3, [sp, #44]	; 0x2c
    b6bc:	f7ff fb3d 	bl	ad3a <_dtoa_r+0x1d2>
    b6c0:	9b06      	ldr	r3, [sp, #24]
    b6c2:	465c      	mov	r4, fp
    b6c4:	469b      	mov	fp, r3
    b6c6:	9b07      	ldr	r3, [sp, #28]
    b6c8:	469a      	mov	sl, r3
    b6ca:	e47c      	b.n	afc6 <_dtoa_r+0x45e>
    b6cc:	4640      	mov	r0, r8
    b6ce:	f7fb ffed 	bl	76ac <__aeabi_i2d>
    b6d2:	0032      	movs	r2, r6
    b6d4:	003b      	movs	r3, r7
    b6d6:	f7fb fa1f 	bl	6b18 <__aeabi_dmul>
    b6da:	2200      	movs	r2, #0
    b6dc:	4b6b      	ldr	r3, [pc, #428]	; (b88c <_dtoa_r+0xd24>)
    b6de:	f7fa fbd7 	bl	5e90 <__aeabi_dadd>
    b6e2:	4a6b      	ldr	r2, [pc, #428]	; (b890 <_dtoa_r+0xd28>)
    b6e4:	000b      	movs	r3, r1
    b6e6:	4694      	mov	ip, r2
    b6e8:	4463      	add	r3, ip
    b6ea:	9008      	str	r0, [sp, #32]
    b6ec:	9109      	str	r1, [sp, #36]	; 0x24
    b6ee:	9309      	str	r3, [sp, #36]	; 0x24
    b6f0:	2200      	movs	r2, #0
    b6f2:	4b64      	ldr	r3, [pc, #400]	; (b884 <_dtoa_r+0xd1c>)
    b6f4:	0030      	movs	r0, r6
    b6f6:	0039      	movs	r1, r7
    b6f8:	f7fb fc8e 	bl	7018 <__aeabi_dsub>
    b6fc:	9e08      	ldr	r6, [sp, #32]
    b6fe:	9f09      	ldr	r7, [sp, #36]	; 0x24
    b700:	0032      	movs	r2, r6
    b702:	003b      	movs	r3, r7
    b704:	0004      	movs	r4, r0
    b706:	000d      	movs	r5, r1
    b708:	f7fc f8c6 	bl	7898 <__aeabi_dcmpgt>
    b70c:	2800      	cmp	r0, #0
    b70e:	d000      	beq.n	b712 <_dtoa_r+0xbaa>
    b710:	e0b2      	b.n	b878 <_dtoa_r+0xd10>
    b712:	2080      	movs	r0, #128	; 0x80
    b714:	0600      	lsls	r0, r0, #24
    b716:	4684      	mov	ip, r0
    b718:	0039      	movs	r1, r7
    b71a:	4461      	add	r1, ip
    b71c:	000b      	movs	r3, r1
    b71e:	0032      	movs	r2, r6
    b720:	0020      	movs	r0, r4
    b722:	0029      	movs	r1, r5
    b724:	f7fc f8a4 	bl	7870 <__aeabi_dcmplt>
    b728:	2800      	cmp	r0, #0
    b72a:	d057      	beq.n	b7dc <_dtoa_r+0xc74>
    b72c:	2300      	movs	r3, #0
    b72e:	4699      	mov	r9, r3
    b730:	4698      	mov	r8, r3
    b732:	e75c      	b.n	b5ee <_dtoa_r+0xa86>
    b734:	980a      	ldr	r0, [sp, #40]	; 0x28
    b736:	f7ff fa4c 	bl	abd2 <_dtoa_r+0x6a>
    b73a:	1ae2      	subs	r2, r4, r3
    b73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b73e:	46a1      	mov	r9, r4
    b740:	469c      	mov	ip, r3
    b742:	4494      	add	ip, r2
    b744:	4663      	mov	r3, ip
    b746:	2400      	movs	r4, #0
    b748:	930d      	str	r3, [sp, #52]	; 0x34
    b74a:	e53e      	b.n	b1ca <_dtoa_r+0x662>
    b74c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b74e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b750:	9208      	str	r2, [sp, #32]
    b752:	9309      	str	r3, [sp, #36]	; 0x24
    b754:	2302      	movs	r3, #2
    b756:	4698      	mov	r8, r3
    b758:	f7ff fb3a 	bl	add0 <_dtoa_r+0x268>
    b75c:	2300      	movs	r3, #0
    b75e:	4652      	mov	r2, sl
    b760:	2100      	movs	r1, #0
    b762:	6453      	str	r3, [r2, #68]	; 0x44
    b764:	4650      	mov	r0, sl
    b766:	f000 fe99 	bl	c49c <_Balloc>
    b76a:	4653      	mov	r3, sl
    b76c:	6418      	str	r0, [r3, #64]	; 0x40
    b76e:	2301      	movs	r3, #1
    b770:	900a      	str	r0, [sp, #40]	; 0x28
    b772:	9307      	str	r3, [sp, #28]
    b774:	9323      	str	r3, [sp, #140]	; 0x8c
    b776:	930e      	str	r3, [sp, #56]	; 0x38
    b778:	f7ff fb07 	bl	ad8a <_dtoa_r+0x222>
    b77c:	4643      	mov	r3, r8
    b77e:	930c      	str	r3, [sp, #48]	; 0x30
    b780:	465b      	mov	r3, fp
    b782:	9a06      	ldr	r2, [sp, #24]
    b784:	46a8      	mov	r8, r5
    b786:	46b3      	mov	fp, r6
    b788:	4655      	mov	r5, sl
    b78a:	9e04      	ldr	r6, [sp, #16]
    b78c:	4691      	mov	r9, r2
    b78e:	46ba      	mov	sl, r7
    b790:	2b00      	cmp	r3, #0
    b792:	dd10      	ble.n	b7b6 <_dtoa_r+0xc4e>
    b794:	4659      	mov	r1, fp
    b796:	2201      	movs	r2, #1
    b798:	0038      	movs	r0, r7
    b79a:	f001 f89d 	bl	c8d8 <__lshift>
    b79e:	4649      	mov	r1, r9
    b7a0:	4683      	mov	fp, r0
    b7a2:	f001 f8f9 	bl	c998 <__mcmp>
    b7a6:	2800      	cmp	r0, #0
    b7a8:	dc00      	bgt.n	b7ac <_dtoa_r+0xc44>
    b7aa:	e157      	b.n	ba5c <_dtoa_r+0xef4>
    b7ac:	2e39      	cmp	r6, #57	; 0x39
    b7ae:	d100      	bne.n	b7b2 <_dtoa_r+0xc4a>
    b7b0:	e122      	b.n	b9f8 <_dtoa_r+0xe90>
    b7b2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b7b4:	3631      	adds	r6, #49	; 0x31
    b7b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b7b8:	4647      	mov	r7, r8
    b7ba:	1c6c      	adds	r4, r5, #1
    b7bc:	702e      	strb	r6, [r5, #0]
    b7be:	4698      	mov	r8, r3
    b7c0:	e6c9      	b.n	b556 <_dtoa_r+0x9ee>
    b7c2:	2800      	cmp	r0, #0
    b7c4:	d103      	bne.n	b7ce <_dtoa_r+0xc66>
    b7c6:	07f3      	lsls	r3, r6, #31
    b7c8:	d501      	bpl.n	b7ce <_dtoa_r+0xc66>
    b7ca:	e6b5      	b.n	b538 <_dtoa_r+0x9d0>
    b7cc:	001c      	movs	r4, r3
    b7ce:	1e63      	subs	r3, r4, #1
    b7d0:	781a      	ldrb	r2, [r3, #0]
    b7d2:	2a30      	cmp	r2, #48	; 0x30
    b7d4:	d0fa      	beq.n	b7cc <_dtoa_r+0xc64>
    b7d6:	e6be      	b.n	b556 <_dtoa_r+0x9ee>
    b7d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b7da:	4699      	mov	r9, r3
    b7dc:	9e10      	ldr	r6, [sp, #64]	; 0x40
    b7de:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b7e0:	e435      	b.n	b04e <_dtoa_r+0x4e6>
    b7e2:	2501      	movs	r5, #1
    b7e4:	f7ff fab4 	bl	ad50 <_dtoa_r+0x1e8>
    b7e8:	9b03      	ldr	r3, [sp, #12]
    b7ea:	2b00      	cmp	r3, #0
    b7ec:	d100      	bne.n	b7f0 <_dtoa_r+0xc88>
    b7ee:	e0d4      	b.n	b99a <_dtoa_r+0xe32>
    b7f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    b7f2:	9911      	ldr	r1, [sp, #68]	; 0x44
    b7f4:	425c      	negs	r4, r3
    b7f6:	230f      	movs	r3, #15
    b7f8:	4a26      	ldr	r2, [pc, #152]	; (b894 <_dtoa_r+0xd2c>)
    b7fa:	4023      	ands	r3, r4
    b7fc:	00db      	lsls	r3, r3, #3
    b7fe:	18d3      	adds	r3, r2, r3
    b800:	681a      	ldr	r2, [r3, #0]
    b802:	685b      	ldr	r3, [r3, #4]
    b804:	f7fb f988 	bl	6b18 <__aeabi_dmul>
    b808:	1124      	asrs	r4, r4, #4
    b80a:	0006      	movs	r6, r0
    b80c:	000f      	movs	r7, r1
    b80e:	2c00      	cmp	r4, #0
    b810:	d100      	bne.n	b814 <_dtoa_r+0xcac>
    b812:	e149      	b.n	baa8 <_dtoa_r+0xf40>
    b814:	2302      	movs	r3, #2
    b816:	4698      	mov	r8, r3
    b818:	4d1f      	ldr	r5, [pc, #124]	; (b898 <_dtoa_r+0xd30>)
    b81a:	2301      	movs	r3, #1
    b81c:	4223      	tst	r3, r4
    b81e:	d009      	beq.n	b834 <_dtoa_r+0xccc>
    b820:	469c      	mov	ip, r3
    b822:	682a      	ldr	r2, [r5, #0]
    b824:	686b      	ldr	r3, [r5, #4]
    b826:	0030      	movs	r0, r6
    b828:	0039      	movs	r1, r7
    b82a:	44e0      	add	r8, ip
    b82c:	f7fb f974 	bl	6b18 <__aeabi_dmul>
    b830:	0006      	movs	r6, r0
    b832:	000f      	movs	r7, r1
    b834:	1064      	asrs	r4, r4, #1
    b836:	3508      	adds	r5, #8
    b838:	2c00      	cmp	r4, #0
    b83a:	d1ee      	bne.n	b81a <_dtoa_r+0xcb2>
    b83c:	f7ff fae4 	bl	ae08 <_dtoa_r+0x2a0>
    b840:	9b03      	ldr	r3, [sp, #12]
    b842:	2730      	movs	r7, #48	; 0x30
    b844:	3301      	adds	r3, #1
    b846:	9303      	str	r3, [sp, #12]
    b848:	2330      	movs	r3, #48	; 0x30
    b84a:	702b      	strb	r3, [r5, #0]
    b84c:	e4ac      	b.n	b1a8 <_dtoa_r+0x640>
    b84e:	6859      	ldr	r1, [r3, #4]
    b850:	4650      	mov	r0, sl
    b852:	f000 fe23 	bl	c49c <_Balloc>
    b856:	4643      	mov	r3, r8
    b858:	4641      	mov	r1, r8
    b85a:	0004      	movs	r4, r0
    b85c:	691b      	ldr	r3, [r3, #16]
    b85e:	310c      	adds	r1, #12
    b860:	1c9a      	adds	r2, r3, #2
    b862:	0092      	lsls	r2, r2, #2
    b864:	300c      	adds	r0, #12
    b866:	f7fc f9bf 	bl	7be8 <memcpy>
    b86a:	2201      	movs	r2, #1
    b86c:	0021      	movs	r1, r4
    b86e:	4650      	mov	r0, sl
    b870:	f001 f832 	bl	c8d8 <__lshift>
    b874:	900c      	str	r0, [sp, #48]	; 0x30
    b876:	e599      	b.n	b3ac <_dtoa_r+0x844>
    b878:	2300      	movs	r3, #0
    b87a:	4699      	mov	r9, r3
    b87c:	4698      	mov	r8, r3
    b87e:	e70c      	b.n	b69a <_dtoa_r+0xb32>
    b880:	7ff00000 	.word	0x7ff00000
    b884:	40140000 	.word	0x40140000
    b888:	00000433 	.word	0x00000433
    b88c:	401c0000 	.word	0x401c0000
    b890:	fcc00000 	.word	0xfcc00000
    b894:	000123f8 	.word	0x000123f8
    b898:	000123d0 	.word	0x000123d0
    b89c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b89e:	498f      	ldr	r1, [pc, #572]	; (badc <_dtoa_r+0xf74>)
    b8a0:	3b01      	subs	r3, #1
    b8a2:	00db      	lsls	r3, r3, #3
    b8a4:	18c9      	adds	r1, r1, r3
    b8a6:	6808      	ldr	r0, [r1, #0]
    b8a8:	6849      	ldr	r1, [r1, #4]
    b8aa:	9a08      	ldr	r2, [sp, #32]
    b8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b8ae:	f7fb f933 	bl	6b18 <__aeabi_dmul>
    b8b2:	9014      	str	r0, [sp, #80]	; 0x50
    b8b4:	9115      	str	r1, [sp, #84]	; 0x54
    b8b6:	0039      	movs	r1, r7
    b8b8:	0030      	movs	r0, r6
    b8ba:	f7fb fec3 	bl	7644 <__aeabi_d2iz>
    b8be:	0005      	movs	r5, r0
    b8c0:	f7fb fef4 	bl	76ac <__aeabi_i2d>
    b8c4:	0002      	movs	r2, r0
    b8c6:	000b      	movs	r3, r1
    b8c8:	0030      	movs	r0, r6
    b8ca:	0039      	movs	r1, r7
    b8cc:	f7fb fba4 	bl	7018 <__aeabi_dsub>
    b8d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b8d2:	9008      	str	r0, [sp, #32]
    b8d4:	9109      	str	r1, [sp, #36]	; 0x24
    b8d6:	990a      	ldr	r1, [sp, #40]	; 0x28
    b8d8:	001a      	movs	r2, r3
    b8da:	468c      	mov	ip, r1
    b8dc:	3530      	adds	r5, #48	; 0x30
    b8de:	4462      	add	r2, ip
    b8e0:	1c4c      	adds	r4, r1, #1
    b8e2:	700d      	strb	r5, [r1, #0]
    b8e4:	4690      	mov	r8, r2
    b8e6:	2b01      	cmp	r3, #1
    b8e8:	d01b      	beq.n	b922 <_dtoa_r+0xdba>
    b8ea:	9808      	ldr	r0, [sp, #32]
    b8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    b8ee:	0025      	movs	r5, r4
    b8f0:	2200      	movs	r2, #0
    b8f2:	4b7b      	ldr	r3, [pc, #492]	; (bae0 <_dtoa_r+0xf78>)
    b8f4:	f7fb f910 	bl	6b18 <__aeabi_dmul>
    b8f8:	000f      	movs	r7, r1
    b8fa:	0006      	movs	r6, r0
    b8fc:	f7fb fea2 	bl	7644 <__aeabi_d2iz>
    b900:	0004      	movs	r4, r0
    b902:	f7fb fed3 	bl	76ac <__aeabi_i2d>
    b906:	3430      	adds	r4, #48	; 0x30
    b908:	0002      	movs	r2, r0
    b90a:	000b      	movs	r3, r1
    b90c:	0030      	movs	r0, r6
    b90e:	0039      	movs	r1, r7
    b910:	f7fb fb82 	bl	7018 <__aeabi_dsub>
    b914:	702c      	strb	r4, [r5, #0]
    b916:	3501      	adds	r5, #1
    b918:	45a8      	cmp	r8, r5
    b91a:	d1e9      	bne.n	b8f0 <_dtoa_r+0xd88>
    b91c:	4644      	mov	r4, r8
    b91e:	9008      	str	r0, [sp, #32]
    b920:	9109      	str	r1, [sp, #36]	; 0x24
    b922:	9814      	ldr	r0, [sp, #80]	; 0x50
    b924:	9915      	ldr	r1, [sp, #84]	; 0x54
    b926:	2200      	movs	r2, #0
    b928:	4b6e      	ldr	r3, [pc, #440]	; (bae4 <_dtoa_r+0xf7c>)
    b92a:	f7fa fab1 	bl	5e90 <__aeabi_dadd>
    b92e:	9a08      	ldr	r2, [sp, #32]
    b930:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b932:	f7fb ff9d 	bl	7870 <__aeabi_dcmplt>
    b936:	2800      	cmp	r0, #0
    b938:	d067      	beq.n	ba0a <_dtoa_r+0xea2>
    b93a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b93c:	1e65      	subs	r5, r4, #1
    b93e:	9303      	str	r3, [sp, #12]
    b940:	782f      	ldrb	r7, [r5, #0]
    b942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b944:	e42e      	b.n	b1a4 <_dtoa_r+0x63c>
    b946:	4643      	mov	r3, r8
    b948:	46b3      	mov	fp, r6
    b94a:	930c      	str	r3, [sp, #48]	; 0x30
    b94c:	9e04      	ldr	r6, [sp, #16]
    b94e:	9b06      	ldr	r3, [sp, #24]
    b950:	46a8      	mov	r8, r5
    b952:	4699      	mov	r9, r3
    b954:	4655      	mov	r5, sl
    b956:	46ba      	mov	sl, r7
    b958:	2e39      	cmp	r6, #57	; 0x39
    b95a:	d04d      	beq.n	b9f8 <_dtoa_r+0xe90>
    b95c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b95e:	3601      	adds	r6, #1
    b960:	4647      	mov	r7, r8
    b962:	1c6c      	adds	r4, r5, #1
    b964:	702e      	strb	r6, [r5, #0]
    b966:	4698      	mov	r8, r3
    b968:	e5f5      	b.n	b556 <_dtoa_r+0x9ee>
    b96a:	4642      	mov	r2, r8
    b96c:	9b06      	ldr	r3, [sp, #24]
    b96e:	46b3      	mov	fp, r6
    b970:	46ba      	mov	sl, r7
    b972:	9e04      	ldr	r6, [sp, #16]
    b974:	4699      	mov	r9, r3
    b976:	002f      	movs	r7, r5
    b978:	4690      	mov	r8, r2
    b97a:	e5d1      	b.n	b520 <_dtoa_r+0x9b8>
    b97c:	9b06      	ldr	r3, [sp, #24]
    b97e:	9a07      	ldr	r2, [sp, #28]
    b980:	1a9b      	subs	r3, r3, r2
    b982:	9308      	str	r3, [sp, #32]
    b984:	2300      	movs	r3, #0
    b986:	e427      	b.n	b1d8 <_dtoa_r+0x670>
    b988:	2401      	movs	r4, #1
    b98a:	e5c5      	b.n	b518 <_dtoa_r+0x9b0>
    b98c:	2336      	movs	r3, #54	; 0x36
    b98e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b990:	464c      	mov	r4, r9
    b992:	1a9b      	subs	r3, r3, r2
    b994:	9a06      	ldr	r2, [sp, #24]
    b996:	9208      	str	r2, [sp, #32]
    b998:	e41e      	b.n	b1d8 <_dtoa_r+0x670>
    b99a:	2302      	movs	r3, #2
    b99c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    b99e:	9f11      	ldr	r7, [sp, #68]	; 0x44
    b9a0:	4698      	mov	r8, r3
    b9a2:	f7ff fa31 	bl	ae08 <_dtoa_r+0x2a0>
    b9a6:	9b07      	ldr	r3, [sp, #28]
    b9a8:	2b00      	cmp	r3, #0
    b9aa:	d100      	bne.n	b9ae <_dtoa_r+0xe46>
    b9ac:	e68e      	b.n	b6cc <_dtoa_r+0xb64>
    b9ae:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    b9b0:	2c00      	cmp	r4, #0
    b9b2:	dc00      	bgt.n	b9b6 <_dtoa_r+0xe4e>
    b9b4:	e712      	b.n	b7dc <_dtoa_r+0xc74>
    b9b6:	9b03      	ldr	r3, [sp, #12]
    b9b8:	2200      	movs	r2, #0
    b9ba:	3b01      	subs	r3, #1
    b9bc:	9313      	str	r3, [sp, #76]	; 0x4c
    b9be:	0030      	movs	r0, r6
    b9c0:	4b47      	ldr	r3, [pc, #284]	; (bae0 <_dtoa_r+0xf78>)
    b9c2:	0039      	movs	r1, r7
    b9c4:	f7fb f8a8 	bl	6b18 <__aeabi_dmul>
    b9c8:	0006      	movs	r6, r0
    b9ca:	4640      	mov	r0, r8
    b9cc:	000f      	movs	r7, r1
    b9ce:	3001      	adds	r0, #1
    b9d0:	f7fb fe6c 	bl	76ac <__aeabi_i2d>
    b9d4:	0032      	movs	r2, r6
    b9d6:	003b      	movs	r3, r7
    b9d8:	f7fb f89e 	bl	6b18 <__aeabi_dmul>
    b9dc:	2200      	movs	r2, #0
    b9de:	4b42      	ldr	r3, [pc, #264]	; (bae8 <_dtoa_r+0xf80>)
    b9e0:	f7fa fa56 	bl	5e90 <__aeabi_dadd>
    b9e4:	4a41      	ldr	r2, [pc, #260]	; (baec <_dtoa_r+0xf84>)
    b9e6:	000b      	movs	r3, r1
    b9e8:	4694      	mov	ip, r2
    b9ea:	4463      	add	r3, ip
    b9ec:	9008      	str	r0, [sp, #32]
    b9ee:	9109      	str	r1, [sp, #36]	; 0x24
    b9f0:	9412      	str	r4, [sp, #72]	; 0x48
    b9f2:	9309      	str	r3, [sp, #36]	; 0x24
    b9f4:	f7ff fa30 	bl	ae58 <_dtoa_r+0x2f0>
    b9f8:	2339      	movs	r3, #57	; 0x39
    b9fa:	702b      	strb	r3, [r5, #0]
    b9fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b9fe:	4647      	mov	r7, r8
    ba00:	1c6c      	adds	r4, r5, #1
    ba02:	4698      	mov	r8, r3
    ba04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ba06:	2339      	movs	r3, #57	; 0x39
    ba08:	e5a1      	b.n	b54e <_dtoa_r+0x9e6>
    ba0a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    ba0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ba0e:	2000      	movs	r0, #0
    ba10:	4934      	ldr	r1, [pc, #208]	; (bae4 <_dtoa_r+0xf7c>)
    ba12:	f7fb fb01 	bl	7018 <__aeabi_dsub>
    ba16:	9a08      	ldr	r2, [sp, #32]
    ba18:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ba1a:	f7fb ff3d 	bl	7898 <__aeabi_dcmpgt>
    ba1e:	2800      	cmp	r0, #0
    ba20:	d101      	bne.n	ba26 <_dtoa_r+0xebe>
    ba22:	e6db      	b.n	b7dc <_dtoa_r+0xc74>
    ba24:	001c      	movs	r4, r3
    ba26:	1e63      	subs	r3, r4, #1
    ba28:	781a      	ldrb	r2, [r3, #0]
    ba2a:	2a30      	cmp	r2, #48	; 0x30
    ba2c:	d0fa      	beq.n	ba24 <_dtoa_r+0xebc>
    ba2e:	f7ff fac8 	bl	afc2 <_dtoa_r+0x45a>
    ba32:	4643      	mov	r3, r8
    ba34:	46b3      	mov	fp, r6
    ba36:	930c      	str	r3, [sp, #48]	; 0x30
    ba38:	9e04      	ldr	r6, [sp, #16]
    ba3a:	9b06      	ldr	r3, [sp, #24]
    ba3c:	46a8      	mov	r8, r5
    ba3e:	4699      	mov	r9, r3
    ba40:	4655      	mov	r5, sl
    ba42:	46ba      	mov	sl, r7
    ba44:	2e39      	cmp	r6, #57	; 0x39
    ba46:	d0d7      	beq.n	b9f8 <_dtoa_r+0xe90>
    ba48:	2c00      	cmp	r4, #0
    ba4a:	dd00      	ble.n	ba4e <_dtoa_r+0xee6>
    ba4c:	e6b1      	b.n	b7b2 <_dtoa_r+0xc4a>
    ba4e:	e6b2      	b.n	b7b6 <_dtoa_r+0xc4e>
    ba50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ba52:	464d      	mov	r5, r9
    ba54:	9203      	str	r2, [sp, #12]
    ba56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba58:	f7ff fba4 	bl	b1a4 <_dtoa_r+0x63c>
    ba5c:	2800      	cmp	r0, #0
    ba5e:	d000      	beq.n	ba62 <_dtoa_r+0xefa>
    ba60:	e6a9      	b.n	b7b6 <_dtoa_r+0xc4e>
    ba62:	07f3      	lsls	r3, r6, #31
    ba64:	d400      	bmi.n	ba68 <_dtoa_r+0xf00>
    ba66:	e6a6      	b.n	b7b6 <_dtoa_r+0xc4e>
    ba68:	e6a0      	b.n	b7ac <_dtoa_r+0xc44>
    ba6a:	2300      	movs	r3, #0
    ba6c:	4641      	mov	r1, r8
    ba6e:	220a      	movs	r2, #10
    ba70:	4650      	mov	r0, sl
    ba72:	f000 fd45 	bl	c500 <__multadd>
    ba76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba78:	4680      	mov	r8, r0
    ba7a:	2b00      	cmp	r3, #0
    ba7c:	dd01      	ble.n	ba82 <_dtoa_r+0xf1a>
    ba7e:	9307      	str	r3, [sp, #28]
    ba80:	e486      	b.n	b390 <_dtoa_r+0x828>
    ba82:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ba84:	2b02      	cmp	r3, #2
    ba86:	dc1f      	bgt.n	bac8 <_dtoa_r+0xf60>
    ba88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ba8a:	9307      	str	r3, [sp, #28]
    ba8c:	e480      	b.n	b390 <_dtoa_r+0x828>
    ba8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ba90:	2b02      	cmp	r3, #2
    ba92:	dc19      	bgt.n	bac8 <_dtoa_r+0xf60>
    ba94:	4649      	mov	r1, r9
    ba96:	f7fe ffbd 	bl	aa14 <quorem>
    ba9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ba9c:	3030      	adds	r0, #48	; 0x30
    ba9e:	7018      	strb	r0, [r3, #0]
    baa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    baa2:	0006      	movs	r6, r0
    baa4:	9307      	str	r3, [sp, #28]
    baa6:	e533      	b.n	b510 <_dtoa_r+0x9a8>
    baa8:	2302      	movs	r3, #2
    baaa:	4698      	mov	r8, r3
    baac:	f7ff f9ac 	bl	ae08 <_dtoa_r+0x2a0>
    bab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bab2:	9c14      	ldr	r4, [sp, #80]	; 0x50
    bab4:	9303      	str	r3, [sp, #12]
    bab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    bab8:	001d      	movs	r5, r3
    baba:	f7ff fb73 	bl	b1a4 <_dtoa_r+0x63c>
    babe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    bac0:	9c14      	ldr	r4, [sp, #80]	; 0x50
    bac2:	9303      	str	r3, [sp, #12]
    bac4:	f7ff fa7f 	bl	afc6 <_dtoa_r+0x45e>
    bac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    baca:	9307      	str	r3, [sp, #28]
    bacc:	e5d6      	b.n	b67c <_dtoa_r+0xb14>
    bace:	2b04      	cmp	r3, #4
    bad0:	d100      	bne.n	bad4 <_dtoa_r+0xf6c>
    bad2:	e43f      	b.n	b354 <_dtoa_r+0x7ec>
    bad4:	233c      	movs	r3, #60	; 0x3c
    bad6:	1a18      	subs	r0, r3, r0
    bad8:	e4d7      	b.n	b48a <_dtoa_r+0x922>
    bada:	46c0      	nop			; (mov r8, r8)
    badc:	000123f8 	.word	0x000123f8
    bae0:	40240000 	.word	0x40240000
    bae4:	3fe00000 	.word	0x3fe00000
    bae8:	401c0000 	.word	0x401c0000
    baec:	fcc00000 	.word	0xfcc00000

0000baf0 <__libc_fini_array>:
    baf0:	b570      	push	{r4, r5, r6, lr}
    baf2:	4b09      	ldr	r3, [pc, #36]	; (bb18 <__libc_fini_array+0x28>)
    baf4:	4c09      	ldr	r4, [pc, #36]	; (bb1c <__libc_fini_array+0x2c>)
    baf6:	1ae4      	subs	r4, r4, r3
    baf8:	10a4      	asrs	r4, r4, #2
    bafa:	d009      	beq.n	bb10 <__libc_fini_array+0x20>
    bafc:	4a08      	ldr	r2, [pc, #32]	; (bb20 <__libc_fini_array+0x30>)
    bafe:	18a5      	adds	r5, r4, r2
    bb00:	00ad      	lsls	r5, r5, #2
    bb02:	18ed      	adds	r5, r5, r3
    bb04:	682b      	ldr	r3, [r5, #0]
    bb06:	3c01      	subs	r4, #1
    bb08:	4798      	blx	r3
    bb0a:	3d04      	subs	r5, #4
    bb0c:	2c00      	cmp	r4, #0
    bb0e:	d1f9      	bne.n	bb04 <__libc_fini_array+0x14>
    bb10:	f006 fe82 	bl	12818 <_fini>
    bb14:	bd70      	pop	{r4, r5, r6, pc}
    bb16:	46c0      	nop			; (mov r8, r8)
    bb18:	00012824 	.word	0x00012824
    bb1c:	00012828 	.word	0x00012828
    bb20:	3fffffff 	.word	0x3fffffff

0000bb24 <_malloc_trim_r>:
    bb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb26:	000c      	movs	r4, r1
    bb28:	0006      	movs	r6, r0
    bb2a:	f000 fca7 	bl	c47c <__malloc_lock>
    bb2e:	4f20      	ldr	r7, [pc, #128]	; (bbb0 <_malloc_trim_r+0x8c>)
    bb30:	68bb      	ldr	r3, [r7, #8]
    bb32:	685d      	ldr	r5, [r3, #4]
    bb34:	2303      	movs	r3, #3
    bb36:	439d      	bics	r5, r3
    bb38:	4b1e      	ldr	r3, [pc, #120]	; (bbb4 <_malloc_trim_r+0x90>)
    bb3a:	1b2c      	subs	r4, r5, r4
    bb3c:	469c      	mov	ip, r3
    bb3e:	4464      	add	r4, ip
    bb40:	0b24      	lsrs	r4, r4, #12
    bb42:	4b1d      	ldr	r3, [pc, #116]	; (bbb8 <_malloc_trim_r+0x94>)
    bb44:	3c01      	subs	r4, #1
    bb46:	0324      	lsls	r4, r4, #12
    bb48:	429c      	cmp	r4, r3
    bb4a:	dd07      	ble.n	bb5c <_malloc_trim_r+0x38>
    bb4c:	2100      	movs	r1, #0
    bb4e:	0030      	movs	r0, r6
    bb50:	f001 f952 	bl	cdf8 <_sbrk_r>
    bb54:	68bb      	ldr	r3, [r7, #8]
    bb56:	195b      	adds	r3, r3, r5
    bb58:	4298      	cmp	r0, r3
    bb5a:	d004      	beq.n	bb66 <_malloc_trim_r+0x42>
    bb5c:	0030      	movs	r0, r6
    bb5e:	f000 fc95 	bl	c48c <__malloc_unlock>
    bb62:	2000      	movs	r0, #0
    bb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bb66:	4261      	negs	r1, r4
    bb68:	0030      	movs	r0, r6
    bb6a:	f001 f945 	bl	cdf8 <_sbrk_r>
    bb6e:	1c43      	adds	r3, r0, #1
    bb70:	d00d      	beq.n	bb8e <_malloc_trim_r+0x6a>
    bb72:	2201      	movs	r2, #1
    bb74:	68bb      	ldr	r3, [r7, #8]
    bb76:	1b2d      	subs	r5, r5, r4
    bb78:	4315      	orrs	r5, r2
    bb7a:	605d      	str	r5, [r3, #4]
    bb7c:	4b0f      	ldr	r3, [pc, #60]	; (bbbc <_malloc_trim_r+0x98>)
    bb7e:	0030      	movs	r0, r6
    bb80:	681a      	ldr	r2, [r3, #0]
    bb82:	1b14      	subs	r4, r2, r4
    bb84:	601c      	str	r4, [r3, #0]
    bb86:	f000 fc81 	bl	c48c <__malloc_unlock>
    bb8a:	2001      	movs	r0, #1
    bb8c:	e7ea      	b.n	bb64 <_malloc_trim_r+0x40>
    bb8e:	2100      	movs	r1, #0
    bb90:	0030      	movs	r0, r6
    bb92:	f001 f931 	bl	cdf8 <_sbrk_r>
    bb96:	68ba      	ldr	r2, [r7, #8]
    bb98:	1a83      	subs	r3, r0, r2
    bb9a:	2b0f      	cmp	r3, #15
    bb9c:	ddde      	ble.n	bb5c <_malloc_trim_r+0x38>
    bb9e:	4908      	ldr	r1, [pc, #32]	; (bbc0 <_malloc_trim_r+0x9c>)
    bba0:	6809      	ldr	r1, [r1, #0]
    bba2:	1a40      	subs	r0, r0, r1
    bba4:	4905      	ldr	r1, [pc, #20]	; (bbbc <_malloc_trim_r+0x98>)
    bba6:	6008      	str	r0, [r1, #0]
    bba8:	2101      	movs	r1, #1
    bbaa:	430b      	orrs	r3, r1
    bbac:	6053      	str	r3, [r2, #4]
    bbae:	e7d5      	b.n	bb5c <_malloc_trim_r+0x38>
    bbb0:	20000620 	.word	0x20000620
    bbb4:	00000fef 	.word	0x00000fef
    bbb8:	00000fff 	.word	0x00000fff
    bbbc:	20000b48 	.word	0x20000b48
    bbc0:	20000a28 	.word	0x20000a28

0000bbc4 <_free_r>:
    bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbc6:	0004      	movs	r4, r0
    bbc8:	1e0d      	subs	r5, r1, #0
    bbca:	d03c      	beq.n	bc46 <_free_r+0x82>
    bbcc:	f000 fc56 	bl	c47c <__malloc_lock>
    bbd0:	0029      	movs	r1, r5
    bbd2:	3908      	subs	r1, #8
    bbd4:	6848      	ldr	r0, [r1, #4]
    bbd6:	2301      	movs	r3, #1
    bbd8:	0005      	movs	r5, r0
    bbda:	2603      	movs	r6, #3
    bbdc:	439d      	bics	r5, r3
    bbde:	194a      	adds	r2, r1, r5
    bbe0:	469c      	mov	ip, r3
    bbe2:	4f61      	ldr	r7, [pc, #388]	; (bd68 <_free_r+0x1a4>)
    bbe4:	6853      	ldr	r3, [r2, #4]
    bbe6:	43b3      	bics	r3, r6
    bbe8:	68be      	ldr	r6, [r7, #8]
    bbea:	42b2      	cmp	r2, r6
    bbec:	d056      	beq.n	bc9c <_free_r+0xd8>
    bbee:	4666      	mov	r6, ip
    bbf0:	6053      	str	r3, [r2, #4]
    bbf2:	4206      	tst	r6, r0
    bbf4:	d10a      	bne.n	bc0c <_free_r+0x48>
    bbf6:	003e      	movs	r6, r7
    bbf8:	6808      	ldr	r0, [r1, #0]
    bbfa:	3608      	adds	r6, #8
    bbfc:	1a09      	subs	r1, r1, r0
    bbfe:	182d      	adds	r5, r5, r0
    bc00:	6888      	ldr	r0, [r1, #8]
    bc02:	42b0      	cmp	r0, r6
    bc04:	d065      	beq.n	bcd2 <_free_r+0x10e>
    bc06:	68ce      	ldr	r6, [r1, #12]
    bc08:	60c6      	str	r6, [r0, #12]
    bc0a:	60b0      	str	r0, [r6, #8]
    bc0c:	2001      	movs	r0, #1
    bc0e:	18d6      	adds	r6, r2, r3
    bc10:	6876      	ldr	r6, [r6, #4]
    bc12:	4206      	tst	r6, r0
    bc14:	d033      	beq.n	bc7e <_free_r+0xba>
    bc16:	4b55      	ldr	r3, [pc, #340]	; (bd6c <_free_r+0x1a8>)
    bc18:	4328      	orrs	r0, r5
    bc1a:	6048      	str	r0, [r1, #4]
    bc1c:	514d      	str	r5, [r1, r5]
    bc1e:	429d      	cmp	r5, r3
    bc20:	d812      	bhi.n	bc48 <_free_r+0x84>
    bc22:	08ed      	lsrs	r5, r5, #3
    bc24:	3bff      	subs	r3, #255	; 0xff
    bc26:	10aa      	asrs	r2, r5, #2
    bc28:	3bff      	subs	r3, #255	; 0xff
    bc2a:	4093      	lsls	r3, r2
    bc2c:	687a      	ldr	r2, [r7, #4]
    bc2e:	00ed      	lsls	r5, r5, #3
    bc30:	4313      	orrs	r3, r2
    bc32:	607b      	str	r3, [r7, #4]
    bc34:	19ef      	adds	r7, r5, r7
    bc36:	68bb      	ldr	r3, [r7, #8]
    bc38:	60cf      	str	r7, [r1, #12]
    bc3a:	608b      	str	r3, [r1, #8]
    bc3c:	60b9      	str	r1, [r7, #8]
    bc3e:	60d9      	str	r1, [r3, #12]
    bc40:	0020      	movs	r0, r4
    bc42:	f000 fc23 	bl	c48c <__malloc_unlock>
    bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc48:	0a68      	lsrs	r0, r5, #9
    bc4a:	2804      	cmp	r0, #4
    bc4c:	d850      	bhi.n	bcf0 <_free_r+0x12c>
    bc4e:	09a8      	lsrs	r0, r5, #6
    bc50:	0002      	movs	r2, r0
    bc52:	3039      	adds	r0, #57	; 0x39
    bc54:	3238      	adds	r2, #56	; 0x38
    bc56:	00c0      	lsls	r0, r0, #3
    bc58:	1838      	adds	r0, r7, r0
    bc5a:	3808      	subs	r0, #8
    bc5c:	6883      	ldr	r3, [r0, #8]
    bc5e:	2603      	movs	r6, #3
    bc60:	4298      	cmp	r0, r3
    bc62:	d04c      	beq.n	bcfe <_free_r+0x13a>
    bc64:	685a      	ldr	r2, [r3, #4]
    bc66:	43b2      	bics	r2, r6
    bc68:	4295      	cmp	r5, r2
    bc6a:	d230      	bcs.n	bcce <_free_r+0x10a>
    bc6c:	689b      	ldr	r3, [r3, #8]
    bc6e:	4298      	cmp	r0, r3
    bc70:	d1f8      	bne.n	bc64 <_free_r+0xa0>
    bc72:	68c3      	ldr	r3, [r0, #12]
    bc74:	60cb      	str	r3, [r1, #12]
    bc76:	6088      	str	r0, [r1, #8]
    bc78:	6099      	str	r1, [r3, #8]
    bc7a:	60c1      	str	r1, [r0, #12]
    bc7c:	e7e0      	b.n	bc40 <_free_r+0x7c>
    bc7e:	18ed      	adds	r5, r5, r3
    bc80:	4e3b      	ldr	r6, [pc, #236]	; (bd70 <_free_r+0x1ac>)
    bc82:	6893      	ldr	r3, [r2, #8]
    bc84:	42b3      	cmp	r3, r6
    bc86:	d042      	beq.n	bd0e <_free_r+0x14a>
    bc88:	68d2      	ldr	r2, [r2, #12]
    bc8a:	4328      	orrs	r0, r5
    bc8c:	60da      	str	r2, [r3, #12]
    bc8e:	6093      	str	r3, [r2, #8]
    bc90:	4b36      	ldr	r3, [pc, #216]	; (bd6c <_free_r+0x1a8>)
    bc92:	6048      	str	r0, [r1, #4]
    bc94:	514d      	str	r5, [r1, r5]
    bc96:	429d      	cmp	r5, r3
    bc98:	d8d6      	bhi.n	bc48 <_free_r+0x84>
    bc9a:	e7c2      	b.n	bc22 <_free_r+0x5e>
    bc9c:	4662      	mov	r2, ip
    bc9e:	18eb      	adds	r3, r5, r3
    bca0:	4202      	tst	r2, r0
    bca2:	d106      	bne.n	bcb2 <_free_r+0xee>
    bca4:	680a      	ldr	r2, [r1, #0]
    bca6:	1a89      	subs	r1, r1, r2
    bca8:	6888      	ldr	r0, [r1, #8]
    bcaa:	189b      	adds	r3, r3, r2
    bcac:	68ca      	ldr	r2, [r1, #12]
    bcae:	60c2      	str	r2, [r0, #12]
    bcb0:	6090      	str	r0, [r2, #8]
    bcb2:	2201      	movs	r2, #1
    bcb4:	431a      	orrs	r2, r3
    bcb6:	604a      	str	r2, [r1, #4]
    bcb8:	4a2e      	ldr	r2, [pc, #184]	; (bd74 <_free_r+0x1b0>)
    bcba:	60b9      	str	r1, [r7, #8]
    bcbc:	6812      	ldr	r2, [r2, #0]
    bcbe:	4293      	cmp	r3, r2
    bcc0:	d3be      	bcc.n	bc40 <_free_r+0x7c>
    bcc2:	4b2d      	ldr	r3, [pc, #180]	; (bd78 <_free_r+0x1b4>)
    bcc4:	0020      	movs	r0, r4
    bcc6:	6819      	ldr	r1, [r3, #0]
    bcc8:	f7ff ff2c 	bl	bb24 <_malloc_trim_r>
    bccc:	e7b8      	b.n	bc40 <_free_r+0x7c>
    bcce:	0018      	movs	r0, r3
    bcd0:	e7cf      	b.n	bc72 <_free_r+0xae>
    bcd2:	4666      	mov	r6, ip
    bcd4:	18d0      	adds	r0, r2, r3
    bcd6:	6840      	ldr	r0, [r0, #4]
    bcd8:	4230      	tst	r0, r6
    bcda:	d13f      	bne.n	bd5c <_free_r+0x198>
    bcdc:	6890      	ldr	r0, [r2, #8]
    bcde:	195d      	adds	r5, r3, r5
    bce0:	68d3      	ldr	r3, [r2, #12]
    bce2:	60c3      	str	r3, [r0, #12]
    bce4:	6098      	str	r0, [r3, #8]
    bce6:	4663      	mov	r3, ip
    bce8:	432b      	orrs	r3, r5
    bcea:	604b      	str	r3, [r1, #4]
    bcec:	514d      	str	r5, [r1, r5]
    bcee:	e7a7      	b.n	bc40 <_free_r+0x7c>
    bcf0:	2814      	cmp	r0, #20
    bcf2:	d814      	bhi.n	bd1e <_free_r+0x15a>
    bcf4:	0002      	movs	r2, r0
    bcf6:	305c      	adds	r0, #92	; 0x5c
    bcf8:	325b      	adds	r2, #91	; 0x5b
    bcfa:	00c0      	lsls	r0, r0, #3
    bcfc:	e7ac      	b.n	bc58 <_free_r+0x94>
    bcfe:	2301      	movs	r3, #1
    bd00:	1092      	asrs	r2, r2, #2
    bd02:	4093      	lsls	r3, r2
    bd04:	687a      	ldr	r2, [r7, #4]
    bd06:	4313      	orrs	r3, r2
    bd08:	607b      	str	r3, [r7, #4]
    bd0a:	0003      	movs	r3, r0
    bd0c:	e7b2      	b.n	bc74 <_free_r+0xb0>
    bd0e:	4328      	orrs	r0, r5
    bd10:	60d9      	str	r1, [r3, #12]
    bd12:	6099      	str	r1, [r3, #8]
    bd14:	60cb      	str	r3, [r1, #12]
    bd16:	608b      	str	r3, [r1, #8]
    bd18:	6048      	str	r0, [r1, #4]
    bd1a:	514d      	str	r5, [r1, r5]
    bd1c:	e790      	b.n	bc40 <_free_r+0x7c>
    bd1e:	2854      	cmp	r0, #84	; 0x54
    bd20:	d805      	bhi.n	bd2e <_free_r+0x16a>
    bd22:	0b28      	lsrs	r0, r5, #12
    bd24:	0002      	movs	r2, r0
    bd26:	306f      	adds	r0, #111	; 0x6f
    bd28:	326e      	adds	r2, #110	; 0x6e
    bd2a:	00c0      	lsls	r0, r0, #3
    bd2c:	e794      	b.n	bc58 <_free_r+0x94>
    bd2e:	22aa      	movs	r2, #170	; 0xaa
    bd30:	0052      	lsls	r2, r2, #1
    bd32:	4290      	cmp	r0, r2
    bd34:	d805      	bhi.n	bd42 <_free_r+0x17e>
    bd36:	0be8      	lsrs	r0, r5, #15
    bd38:	0002      	movs	r2, r0
    bd3a:	3078      	adds	r0, #120	; 0x78
    bd3c:	3277      	adds	r2, #119	; 0x77
    bd3e:	00c0      	lsls	r0, r0, #3
    bd40:	e78a      	b.n	bc58 <_free_r+0x94>
    bd42:	4a0e      	ldr	r2, [pc, #56]	; (bd7c <_free_r+0x1b8>)
    bd44:	4290      	cmp	r0, r2
    bd46:	d805      	bhi.n	bd54 <_free_r+0x190>
    bd48:	0ca8      	lsrs	r0, r5, #18
    bd4a:	0002      	movs	r2, r0
    bd4c:	307d      	adds	r0, #125	; 0x7d
    bd4e:	327c      	adds	r2, #124	; 0x7c
    bd50:	00c0      	lsls	r0, r0, #3
    bd52:	e781      	b.n	bc58 <_free_r+0x94>
    bd54:	20fe      	movs	r0, #254	; 0xfe
    bd56:	227e      	movs	r2, #126	; 0x7e
    bd58:	0080      	lsls	r0, r0, #2
    bd5a:	e77d      	b.n	bc58 <_free_r+0x94>
    bd5c:	4663      	mov	r3, ip
    bd5e:	432b      	orrs	r3, r5
    bd60:	604b      	str	r3, [r1, #4]
    bd62:	6015      	str	r5, [r2, #0]
    bd64:	e76c      	b.n	bc40 <_free_r+0x7c>
    bd66:	46c0      	nop			; (mov r8, r8)
    bd68:	20000620 	.word	0x20000620
    bd6c:	000001ff 	.word	0x000001ff
    bd70:	20000628 	.word	0x20000628
    bd74:	20000a2c 	.word	0x20000a2c
    bd78:	20000b78 	.word	0x20000b78
    bd7c:	00000554 	.word	0x00000554

0000bd80 <iswspace>:
    bd80:	b510      	push	{r4, lr}
    bd82:	0004      	movs	r4, r0
    bd84:	2000      	movs	r0, #0
    bd86:	2cff      	cmp	r4, #255	; 0xff
    bd88:	d805      	bhi.n	bd96 <iswspace+0x16>
    bd8a:	f000 f819 	bl	bdc0 <__locale_ctype_ptr>
    bd8e:	1904      	adds	r4, r0, r4
    bd90:	2008      	movs	r0, #8
    bd92:	7863      	ldrb	r3, [r4, #1]
    bd94:	4018      	ands	r0, r3
    bd96:	bd10      	pop	{r4, pc}

0000bd98 <__locale_mb_cur_max>:
    bd98:	4b05      	ldr	r3, [pc, #20]	; (bdb0 <__locale_mb_cur_max+0x18>)
    bd9a:	681b      	ldr	r3, [r3, #0]
    bd9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bd9e:	2b00      	cmp	r3, #0
    bda0:	d003      	beq.n	bdaa <__locale_mb_cur_max+0x12>
    bda2:	2294      	movs	r2, #148	; 0x94
    bda4:	0052      	lsls	r2, r2, #1
    bda6:	5c98      	ldrb	r0, [r3, r2]
    bda8:	4770      	bx	lr
    bdaa:	4b02      	ldr	r3, [pc, #8]	; (bdb4 <__locale_mb_cur_max+0x1c>)
    bdac:	e7f9      	b.n	bda2 <__locale_mb_cur_max+0xa>
    bdae:	46c0      	nop			; (mov r8, r8)
    bdb0:	20000080 	.word	0x20000080
    bdb4:	200004b4 	.word	0x200004b4

0000bdb8 <__locale_ctype_ptr_l>:
    bdb8:	23ec      	movs	r3, #236	; 0xec
    bdba:	58c0      	ldr	r0, [r0, r3]
    bdbc:	4770      	bx	lr
    bdbe:	46c0      	nop			; (mov r8, r8)

0000bdc0 <__locale_ctype_ptr>:
    bdc0:	4b04      	ldr	r3, [pc, #16]	; (bdd4 <__locale_ctype_ptr+0x14>)
    bdc2:	681b      	ldr	r3, [r3, #0]
    bdc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	d002      	beq.n	bdd0 <__locale_ctype_ptr+0x10>
    bdca:	22ec      	movs	r2, #236	; 0xec
    bdcc:	5898      	ldr	r0, [r3, r2]
    bdce:	4770      	bx	lr
    bdd0:	4b01      	ldr	r3, [pc, #4]	; (bdd8 <__locale_ctype_ptr+0x18>)
    bdd2:	e7fa      	b.n	bdca <__locale_ctype_ptr+0xa>
    bdd4:	20000080 	.word	0x20000080
    bdd8:	200004b4 	.word	0x200004b4

0000bddc <__localeconv_l>:
    bddc:	30f0      	adds	r0, #240	; 0xf0
    bdde:	4770      	bx	lr

0000bde0 <_localeconv_r>:
    bde0:	4b04      	ldr	r3, [pc, #16]	; (bdf4 <_localeconv_r+0x14>)
    bde2:	681b      	ldr	r3, [r3, #0]
    bde4:	6b58      	ldr	r0, [r3, #52]	; 0x34
    bde6:	2800      	cmp	r0, #0
    bde8:	d001      	beq.n	bdee <_localeconv_r+0xe>
    bdea:	30f0      	adds	r0, #240	; 0xf0
    bdec:	4770      	bx	lr
    bdee:	4802      	ldr	r0, [pc, #8]	; (bdf8 <_localeconv_r+0x18>)
    bdf0:	e7fb      	b.n	bdea <_localeconv_r+0xa>
    bdf2:	46c0      	nop			; (mov r8, r8)
    bdf4:	20000080 	.word	0x20000080
    bdf8:	200004b4 	.word	0x200004b4

0000bdfc <__retarget_lock_acquire_recursive>:
    bdfc:	4770      	bx	lr
    bdfe:	46c0      	nop			; (mov r8, r8)

0000be00 <__retarget_lock_release_recursive>:
    be00:	4770      	bx	lr
    be02:	46c0      	nop			; (mov r8, r8)

0000be04 <_malloc_r>:
    be04:	b5f0      	push	{r4, r5, r6, r7, lr}
    be06:	4657      	mov	r7, sl
    be08:	4645      	mov	r5, r8
    be0a:	46de      	mov	lr, fp
    be0c:	464e      	mov	r6, r9
    be0e:	b5e0      	push	{r5, r6, r7, lr}
    be10:	000d      	movs	r5, r1
    be12:	350b      	adds	r5, #11
    be14:	b083      	sub	sp, #12
    be16:	0007      	movs	r7, r0
    be18:	2d16      	cmp	r5, #22
    be1a:	d800      	bhi.n	be1e <_malloc_r+0x1a>
    be1c:	e09f      	b.n	bf5e <_malloc_r+0x15a>
    be1e:	2307      	movs	r3, #7
    be20:	439d      	bics	r5, r3
    be22:	d500      	bpl.n	be26 <_malloc_r+0x22>
    be24:	e0c4      	b.n	bfb0 <_malloc_r+0x1ac>
    be26:	42a9      	cmp	r1, r5
    be28:	d900      	bls.n	be2c <_malloc_r+0x28>
    be2a:	e0c1      	b.n	bfb0 <_malloc_r+0x1ac>
    be2c:	f000 fb26 	bl	c47c <__malloc_lock>
    be30:	23f8      	movs	r3, #248	; 0xf8
    be32:	33ff      	adds	r3, #255	; 0xff
    be34:	429d      	cmp	r5, r3
    be36:	d800      	bhi.n	be3a <_malloc_r+0x36>
    be38:	e28f      	b.n	c35a <_malloc_r+0x556>
    be3a:	0a68      	lsrs	r0, r5, #9
    be3c:	d100      	bne.n	be40 <_malloc_r+0x3c>
    be3e:	e0bb      	b.n	bfb8 <_malloc_r+0x1b4>
    be40:	2804      	cmp	r0, #4
    be42:	d900      	bls.n	be46 <_malloc_r+0x42>
    be44:	e162      	b.n	c10c <_malloc_r+0x308>
    be46:	2338      	movs	r3, #56	; 0x38
    be48:	4698      	mov	r8, r3
    be4a:	09a8      	lsrs	r0, r5, #6
    be4c:	4480      	add	r8, r0
    be4e:	3039      	adds	r0, #57	; 0x39
    be50:	00c1      	lsls	r1, r0, #3
    be52:	4ed2      	ldr	r6, [pc, #840]	; (c19c <_malloc_r+0x398>)
    be54:	1871      	adds	r1, r6, r1
    be56:	3908      	subs	r1, #8
    be58:	68cc      	ldr	r4, [r1, #12]
    be5a:	42a1      	cmp	r1, r4
    be5c:	d019      	beq.n	be92 <_malloc_r+0x8e>
    be5e:	2303      	movs	r3, #3
    be60:	6862      	ldr	r2, [r4, #4]
    be62:	439a      	bics	r2, r3
    be64:	0013      	movs	r3, r2
    be66:	1b52      	subs	r2, r2, r5
    be68:	2a0f      	cmp	r2, #15
    be6a:	dd00      	ble.n	be6e <_malloc_r+0x6a>
    be6c:	e0aa      	b.n	bfc4 <_malloc_r+0x1c0>
    be6e:	2a00      	cmp	r2, #0
    be70:	db00      	blt.n	be74 <_malloc_r+0x70>
    be72:	e088      	b.n	bf86 <_malloc_r+0x182>
    be74:	2303      	movs	r3, #3
    be76:	469c      	mov	ip, r3
    be78:	e008      	b.n	be8c <_malloc_r+0x88>
    be7a:	4662      	mov	r2, ip
    be7c:	6863      	ldr	r3, [r4, #4]
    be7e:	4393      	bics	r3, r2
    be80:	1b5a      	subs	r2, r3, r5
    be82:	2a0f      	cmp	r2, #15
    be84:	dd00      	ble.n	be88 <_malloc_r+0x84>
    be86:	e09d      	b.n	bfc4 <_malloc_r+0x1c0>
    be88:	2a00      	cmp	r2, #0
    be8a:	da7c      	bge.n	bf86 <_malloc_r+0x182>
    be8c:	68e4      	ldr	r4, [r4, #12]
    be8e:	42a1      	cmp	r1, r4
    be90:	d1f3      	bne.n	be7a <_malloc_r+0x76>
    be92:	0032      	movs	r2, r6
    be94:	6934      	ldr	r4, [r6, #16]
    be96:	3208      	adds	r2, #8
    be98:	4294      	cmp	r4, r2
    be9a:	d100      	bne.n	be9e <_malloc_r+0x9a>
    be9c:	e190      	b.n	c1c0 <_malloc_r+0x3bc>
    be9e:	2303      	movs	r3, #3
    bea0:	6861      	ldr	r1, [r4, #4]
    bea2:	4399      	bics	r1, r3
    bea4:	4689      	mov	r9, r1
    bea6:	1b49      	subs	r1, r1, r5
    bea8:	290f      	cmp	r1, #15
    beaa:	dd00      	ble.n	beae <_malloc_r+0xaa>
    beac:	e162      	b.n	c174 <_malloc_r+0x370>
    beae:	6172      	str	r2, [r6, #20]
    beb0:	6132      	str	r2, [r6, #16]
    beb2:	2900      	cmp	r1, #0
    beb4:	db00      	blt.n	beb8 <_malloc_r+0xb4>
    beb6:	e087      	b.n	bfc8 <_malloc_r+0x1c4>
    beb8:	4ab9      	ldr	r2, [pc, #740]	; (c1a0 <_malloc_r+0x39c>)
    beba:	464b      	mov	r3, r9
    bebc:	4591      	cmp	r9, r2
    bebe:	d900      	bls.n	bec2 <_malloc_r+0xbe>
    bec0:	e130      	b.n	c124 <_malloc_r+0x320>
    bec2:	08db      	lsrs	r3, r3, #3
    bec4:	3aff      	subs	r2, #255	; 0xff
    bec6:	1099      	asrs	r1, r3, #2
    bec8:	3aff      	subs	r2, #255	; 0xff
    beca:	408a      	lsls	r2, r1
    becc:	00db      	lsls	r3, r3, #3
    bece:	6871      	ldr	r1, [r6, #4]
    bed0:	199b      	adds	r3, r3, r6
    bed2:	430a      	orrs	r2, r1
    bed4:	6899      	ldr	r1, [r3, #8]
    bed6:	6072      	str	r2, [r6, #4]
    bed8:	60e3      	str	r3, [r4, #12]
    beda:	60a1      	str	r1, [r4, #8]
    bedc:	609c      	str	r4, [r3, #8]
    bede:	0013      	movs	r3, r2
    bee0:	60cc      	str	r4, [r1, #12]
    bee2:	2101      	movs	r1, #1
    bee4:	1082      	asrs	r2, r0, #2
    bee6:	4091      	lsls	r1, r2
    bee8:	4299      	cmp	r1, r3
    beea:	d86f      	bhi.n	bfcc <_malloc_r+0x1c8>
    beec:	420b      	tst	r3, r1
    beee:	d105      	bne.n	befc <_malloc_r+0xf8>
    bef0:	2203      	movs	r2, #3
    bef2:	4390      	bics	r0, r2
    bef4:	0049      	lsls	r1, r1, #1
    bef6:	3004      	adds	r0, #4
    bef8:	420b      	tst	r3, r1
    befa:	d0fb      	beq.n	bef4 <_malloc_r+0xf0>
    befc:	2303      	movs	r3, #3
    befe:	4698      	mov	r8, r3
    bf00:	00c3      	lsls	r3, r0, #3
    bf02:	4699      	mov	r9, r3
    bf04:	44b1      	add	r9, r6
    bf06:	46cc      	mov	ip, r9
    bf08:	4682      	mov	sl, r0
    bf0a:	4663      	mov	r3, ip
    bf0c:	68dc      	ldr	r4, [r3, #12]
    bf0e:	45a4      	cmp	ip, r4
    bf10:	d107      	bne.n	bf22 <_malloc_r+0x11e>
    bf12:	e157      	b.n	c1c4 <_malloc_r+0x3c0>
    bf14:	2a00      	cmp	r2, #0
    bf16:	db00      	blt.n	bf1a <_malloc_r+0x116>
    bf18:	e166      	b.n	c1e8 <_malloc_r+0x3e4>
    bf1a:	68e4      	ldr	r4, [r4, #12]
    bf1c:	45a4      	cmp	ip, r4
    bf1e:	d100      	bne.n	bf22 <_malloc_r+0x11e>
    bf20:	e150      	b.n	c1c4 <_malloc_r+0x3c0>
    bf22:	4642      	mov	r2, r8
    bf24:	6863      	ldr	r3, [r4, #4]
    bf26:	4393      	bics	r3, r2
    bf28:	1b5a      	subs	r2, r3, r5
    bf2a:	2a0f      	cmp	r2, #15
    bf2c:	ddf2      	ble.n	bf14 <_malloc_r+0x110>
    bf2e:	2001      	movs	r0, #1
    bf30:	4680      	mov	r8, r0
    bf32:	1961      	adds	r1, r4, r5
    bf34:	4305      	orrs	r5, r0
    bf36:	6065      	str	r5, [r4, #4]
    bf38:	68a0      	ldr	r0, [r4, #8]
    bf3a:	68e5      	ldr	r5, [r4, #12]
    bf3c:	3608      	adds	r6, #8
    bf3e:	60c5      	str	r5, [r0, #12]
    bf40:	60a8      	str	r0, [r5, #8]
    bf42:	4640      	mov	r0, r8
    bf44:	60f1      	str	r1, [r6, #12]
    bf46:	60b1      	str	r1, [r6, #8]
    bf48:	4310      	orrs	r0, r2
    bf4a:	6048      	str	r0, [r1, #4]
    bf4c:	60ce      	str	r6, [r1, #12]
    bf4e:	608e      	str	r6, [r1, #8]
    bf50:	0038      	movs	r0, r7
    bf52:	50e2      	str	r2, [r4, r3]
    bf54:	f000 fa9a 	bl	c48c <__malloc_unlock>
    bf58:	0020      	movs	r0, r4
    bf5a:	3008      	adds	r0, #8
    bf5c:	e021      	b.n	bfa2 <_malloc_r+0x19e>
    bf5e:	2910      	cmp	r1, #16
    bf60:	d826      	bhi.n	bfb0 <_malloc_r+0x1ac>
    bf62:	0038      	movs	r0, r7
    bf64:	f000 fa8a 	bl	c47c <__malloc_lock>
    bf68:	2510      	movs	r5, #16
    bf6a:	2318      	movs	r3, #24
    bf6c:	2002      	movs	r0, #2
    bf6e:	4e8b      	ldr	r6, [pc, #556]	; (c19c <_malloc_r+0x398>)
    bf70:	18f3      	adds	r3, r6, r3
    bf72:	001a      	movs	r2, r3
    bf74:	685c      	ldr	r4, [r3, #4]
    bf76:	3a08      	subs	r2, #8
    bf78:	4294      	cmp	r4, r2
    bf7a:	d100      	bne.n	bf7e <_malloc_r+0x17a>
    bf7c:	e12e      	b.n	c1dc <_malloc_r+0x3d8>
    bf7e:	2303      	movs	r3, #3
    bf80:	6862      	ldr	r2, [r4, #4]
    bf82:	439a      	bics	r2, r3
    bf84:	0013      	movs	r3, r2
    bf86:	68e2      	ldr	r2, [r4, #12]
    bf88:	68a1      	ldr	r1, [r4, #8]
    bf8a:	60ca      	str	r2, [r1, #12]
    bf8c:	6091      	str	r1, [r2, #8]
    bf8e:	2201      	movs	r2, #1
    bf90:	18e3      	adds	r3, r4, r3
    bf92:	6859      	ldr	r1, [r3, #4]
    bf94:	0038      	movs	r0, r7
    bf96:	430a      	orrs	r2, r1
    bf98:	605a      	str	r2, [r3, #4]
    bf9a:	f000 fa77 	bl	c48c <__malloc_unlock>
    bf9e:	0020      	movs	r0, r4
    bfa0:	3008      	adds	r0, #8
    bfa2:	b003      	add	sp, #12
    bfa4:	bc3c      	pop	{r2, r3, r4, r5}
    bfa6:	4690      	mov	r8, r2
    bfa8:	4699      	mov	r9, r3
    bfaa:	46a2      	mov	sl, r4
    bfac:	46ab      	mov	fp, r5
    bfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfb0:	230c      	movs	r3, #12
    bfb2:	2000      	movs	r0, #0
    bfb4:	603b      	str	r3, [r7, #0]
    bfb6:	e7f4      	b.n	bfa2 <_malloc_r+0x19e>
    bfb8:	2180      	movs	r1, #128	; 0x80
    bfba:	233f      	movs	r3, #63	; 0x3f
    bfbc:	2040      	movs	r0, #64	; 0x40
    bfbe:	0089      	lsls	r1, r1, #2
    bfc0:	4698      	mov	r8, r3
    bfc2:	e746      	b.n	be52 <_malloc_r+0x4e>
    bfc4:	4640      	mov	r0, r8
    bfc6:	e764      	b.n	be92 <_malloc_r+0x8e>
    bfc8:	464b      	mov	r3, r9
    bfca:	e7e0      	b.n	bf8e <_malloc_r+0x18a>
    bfcc:	2303      	movs	r3, #3
    bfce:	68b4      	ldr	r4, [r6, #8]
    bfd0:	6862      	ldr	r2, [r4, #4]
    bfd2:	439a      	bics	r2, r3
    bfd4:	4690      	mov	r8, r2
    bfd6:	42aa      	cmp	r2, r5
    bfd8:	d303      	bcc.n	bfe2 <_malloc_r+0x1de>
    bfda:	1b53      	subs	r3, r2, r5
    bfdc:	2b0f      	cmp	r3, #15
    bfde:	dd00      	ble.n	bfe2 <_malloc_r+0x1de>
    bfe0:	e086      	b.n	c0f0 <_malloc_r+0x2ec>
    bfe2:	0023      	movs	r3, r4
    bfe4:	4443      	add	r3, r8
    bfe6:	4a6f      	ldr	r2, [pc, #444]	; (c1a4 <_malloc_r+0x3a0>)
    bfe8:	9301      	str	r3, [sp, #4]
    bfea:	4b6f      	ldr	r3, [pc, #444]	; (c1a8 <_malloc_r+0x3a4>)
    bfec:	4693      	mov	fp, r2
    bfee:	681b      	ldr	r3, [r3, #0]
    bff0:	6812      	ldr	r2, [r2, #0]
    bff2:	18eb      	adds	r3, r5, r3
    bff4:	3201      	adds	r2, #1
    bff6:	d100      	bne.n	bffa <_malloc_r+0x1f6>
    bff8:	e168      	b.n	c2cc <_malloc_r+0x4c8>
    bffa:	4a6c      	ldr	r2, [pc, #432]	; (c1ac <_malloc_r+0x3a8>)
    bffc:	4694      	mov	ip, r2
    bffe:	4463      	add	r3, ip
    c000:	0b1b      	lsrs	r3, r3, #12
    c002:	031b      	lsls	r3, r3, #12
    c004:	9300      	str	r3, [sp, #0]
    c006:	9900      	ldr	r1, [sp, #0]
    c008:	0038      	movs	r0, r7
    c00a:	f000 fef5 	bl	cdf8 <_sbrk_r>
    c00e:	0003      	movs	r3, r0
    c010:	4681      	mov	r9, r0
    c012:	3301      	adds	r3, #1
    c014:	d061      	beq.n	c0da <_malloc_r+0x2d6>
    c016:	9b01      	ldr	r3, [sp, #4]
    c018:	4283      	cmp	r3, r0
    c01a:	d900      	bls.n	c01e <_malloc_r+0x21a>
    c01c:	e0ff      	b.n	c21e <_malloc_r+0x41a>
    c01e:	4b64      	ldr	r3, [pc, #400]	; (c1b0 <_malloc_r+0x3ac>)
    c020:	9a00      	ldr	r2, [sp, #0]
    c022:	469a      	mov	sl, r3
    c024:	681b      	ldr	r3, [r3, #0]
    c026:	469c      	mov	ip, r3
    c028:	4653      	mov	r3, sl
    c02a:	4462      	add	r2, ip
    c02c:	601a      	str	r2, [r3, #0]
    c02e:	9b01      	ldr	r3, [sp, #4]
    c030:	0011      	movs	r1, r2
    c032:	4283      	cmp	r3, r0
    c034:	d100      	bne.n	c038 <_malloc_r+0x234>
    c036:	e155      	b.n	c2e4 <_malloc_r+0x4e0>
    c038:	465b      	mov	r3, fp
    c03a:	681b      	ldr	r3, [r3, #0]
    c03c:	3301      	adds	r3, #1
    c03e:	d100      	bne.n	c042 <_malloc_r+0x23e>
    c040:	e16c      	b.n	c31c <_malloc_r+0x518>
    c042:	464b      	mov	r3, r9
    c044:	9a01      	ldr	r2, [sp, #4]
    c046:	1a9b      	subs	r3, r3, r2
    c048:	1859      	adds	r1, r3, r1
    c04a:	4653      	mov	r3, sl
    c04c:	6019      	str	r1, [r3, #0]
    c04e:	2307      	movs	r3, #7
    c050:	464a      	mov	r2, r9
    c052:	4013      	ands	r3, r2
    c054:	d100      	bne.n	c058 <_malloc_r+0x254>
    c056:	e124      	b.n	c2a2 <_malloc_r+0x49e>
    c058:	2108      	movs	r1, #8
    c05a:	4689      	mov	r9, r1
    c05c:	4955      	ldr	r1, [pc, #340]	; (c1b4 <_malloc_r+0x3b0>)
    c05e:	1ad2      	subs	r2, r2, r3
    c060:	4491      	add	r9, r2
    c062:	1acb      	subs	r3, r1, r3
    c064:	9a00      	ldr	r2, [sp, #0]
    c066:	0038      	movs	r0, r7
    c068:	444a      	add	r2, r9
    c06a:	0511      	lsls	r1, r2, #20
    c06c:	0d09      	lsrs	r1, r1, #20
    c06e:	1a5b      	subs	r3, r3, r1
    c070:	0019      	movs	r1, r3
    c072:	469b      	mov	fp, r3
    c074:	f000 fec0 	bl	cdf8 <_sbrk_r>
    c078:	1c43      	adds	r3, r0, #1
    c07a:	d100      	bne.n	c07e <_malloc_r+0x27a>
    c07c:	e142      	b.n	c304 <_malloc_r+0x500>
    c07e:	464b      	mov	r3, r9
    c080:	1ac0      	subs	r0, r0, r3
    c082:	2301      	movs	r3, #1
    c084:	4458      	add	r0, fp
    c086:	4318      	orrs	r0, r3
    c088:	4653      	mov	r3, sl
    c08a:	681b      	ldr	r3, [r3, #0]
    c08c:	445b      	add	r3, fp
    c08e:	0019      	movs	r1, r3
    c090:	4653      	mov	r3, sl
    c092:	6019      	str	r1, [r3, #0]
    c094:	464b      	mov	r3, r9
    c096:	60b3      	str	r3, [r6, #8]
    c098:	6058      	str	r0, [r3, #4]
    c09a:	42b4      	cmp	r4, r6
    c09c:	d013      	beq.n	c0c6 <_malloc_r+0x2c2>
    c09e:	4643      	mov	r3, r8
    c0a0:	2b0f      	cmp	r3, #15
    c0a2:	d800      	bhi.n	c0a6 <_malloc_r+0x2a2>
    c0a4:	e0e8      	b.n	c278 <_malloc_r+0x474>
    c0a6:	4643      	mov	r3, r8
    c0a8:	2207      	movs	r2, #7
    c0aa:	6860      	ldr	r0, [r4, #4]
    c0ac:	3b0c      	subs	r3, #12
    c0ae:	4393      	bics	r3, r2
    c0b0:	3a06      	subs	r2, #6
    c0b2:	4002      	ands	r2, r0
    c0b4:	2005      	movs	r0, #5
    c0b6:	431a      	orrs	r2, r3
    c0b8:	6062      	str	r2, [r4, #4]
    c0ba:	18e2      	adds	r2, r4, r3
    c0bc:	6050      	str	r0, [r2, #4]
    c0be:	6090      	str	r0, [r2, #8]
    c0c0:	2b0f      	cmp	r3, #15
    c0c2:	d900      	bls.n	c0c6 <_malloc_r+0x2c2>
    c0c4:	e122      	b.n	c30c <_malloc_r+0x508>
    c0c6:	4b3c      	ldr	r3, [pc, #240]	; (c1b8 <_malloc_r+0x3b4>)
    c0c8:	681a      	ldr	r2, [r3, #0]
    c0ca:	4291      	cmp	r1, r2
    c0cc:	d900      	bls.n	c0d0 <_malloc_r+0x2cc>
    c0ce:	6019      	str	r1, [r3, #0]
    c0d0:	4b3a      	ldr	r3, [pc, #232]	; (c1bc <_malloc_r+0x3b8>)
    c0d2:	681a      	ldr	r2, [r3, #0]
    c0d4:	4291      	cmp	r1, r2
    c0d6:	d900      	bls.n	c0da <_malloc_r+0x2d6>
    c0d8:	6019      	str	r1, [r3, #0]
    c0da:	2303      	movs	r3, #3
    c0dc:	68b4      	ldr	r4, [r6, #8]
    c0de:	6862      	ldr	r2, [r4, #4]
    c0e0:	439a      	bics	r2, r3
    c0e2:	1b53      	subs	r3, r2, r5
    c0e4:	4295      	cmp	r5, r2
    c0e6:	d900      	bls.n	c0ea <_malloc_r+0x2e6>
    c0e8:	e0c9      	b.n	c27e <_malloc_r+0x47a>
    c0ea:	2b0f      	cmp	r3, #15
    c0ec:	dc00      	bgt.n	c0f0 <_malloc_r+0x2ec>
    c0ee:	e0c6      	b.n	c27e <_malloc_r+0x47a>
    c0f0:	2201      	movs	r2, #1
    c0f2:	0029      	movs	r1, r5
    c0f4:	4313      	orrs	r3, r2
    c0f6:	4311      	orrs	r1, r2
    c0f8:	1965      	adds	r5, r4, r5
    c0fa:	6061      	str	r1, [r4, #4]
    c0fc:	0038      	movs	r0, r7
    c0fe:	60b5      	str	r5, [r6, #8]
    c100:	606b      	str	r3, [r5, #4]
    c102:	f000 f9c3 	bl	c48c <__malloc_unlock>
    c106:	0020      	movs	r0, r4
    c108:	3008      	adds	r0, #8
    c10a:	e74a      	b.n	bfa2 <_malloc_r+0x19e>
    c10c:	2814      	cmp	r0, #20
    c10e:	d97a      	bls.n	c206 <_malloc_r+0x402>
    c110:	2854      	cmp	r0, #84	; 0x54
    c112:	d900      	bls.n	c116 <_malloc_r+0x312>
    c114:	e0ba      	b.n	c28c <_malloc_r+0x488>
    c116:	236e      	movs	r3, #110	; 0x6e
    c118:	4698      	mov	r8, r3
    c11a:	0b28      	lsrs	r0, r5, #12
    c11c:	4480      	add	r8, r0
    c11e:	306f      	adds	r0, #111	; 0x6f
    c120:	00c1      	lsls	r1, r0, #3
    c122:	e696      	b.n	be52 <_malloc_r+0x4e>
    c124:	0a5a      	lsrs	r2, r3, #9
    c126:	2a04      	cmp	r2, #4
    c128:	d973      	bls.n	c212 <_malloc_r+0x40e>
    c12a:	2a14      	cmp	r2, #20
    c12c:	d900      	bls.n	c130 <_malloc_r+0x32c>
    c12e:	e0d0      	b.n	c2d2 <_malloc_r+0x4ce>
    c130:	0011      	movs	r1, r2
    c132:	325c      	adds	r2, #92	; 0x5c
    c134:	315b      	adds	r1, #91	; 0x5b
    c136:	00d2      	lsls	r2, r2, #3
    c138:	2308      	movs	r3, #8
    c13a:	425b      	negs	r3, r3
    c13c:	469c      	mov	ip, r3
    c13e:	18b2      	adds	r2, r6, r2
    c140:	4494      	add	ip, r2
    c142:	4663      	mov	r3, ip
    c144:	689a      	ldr	r2, [r3, #8]
    c146:	2303      	movs	r3, #3
    c148:	4698      	mov	r8, r3
    c14a:	4594      	cmp	ip, r2
    c14c:	d100      	bne.n	c150 <_malloc_r+0x34c>
    c14e:	e0ab      	b.n	c2a8 <_malloc_r+0x4a4>
    c150:	4643      	mov	r3, r8
    c152:	6851      	ldr	r1, [r2, #4]
    c154:	4399      	bics	r1, r3
    c156:	4589      	cmp	r9, r1
    c158:	d300      	bcc.n	c15c <_malloc_r+0x358>
    c15a:	e095      	b.n	c288 <_malloc_r+0x484>
    c15c:	6892      	ldr	r2, [r2, #8]
    c15e:	4594      	cmp	ip, r2
    c160:	d1f6      	bne.n	c150 <_malloc_r+0x34c>
    c162:	4663      	mov	r3, ip
    c164:	68da      	ldr	r2, [r3, #12]
    c166:	6873      	ldr	r3, [r6, #4]
    c168:	4661      	mov	r1, ip
    c16a:	60e2      	str	r2, [r4, #12]
    c16c:	60a1      	str	r1, [r4, #8]
    c16e:	6094      	str	r4, [r2, #8]
    c170:	60cc      	str	r4, [r1, #12]
    c172:	e6b6      	b.n	bee2 <_malloc_r+0xde>
    c174:	2301      	movs	r3, #1
    c176:	1960      	adds	r0, r4, r5
    c178:	431d      	orrs	r5, r3
    c17a:	6065      	str	r5, [r4, #4]
    c17c:	6170      	str	r0, [r6, #20]
    c17e:	6130      	str	r0, [r6, #16]
    c180:	60c2      	str	r2, [r0, #12]
    c182:	6082      	str	r2, [r0, #8]
    c184:	001a      	movs	r2, r3
    c186:	464b      	mov	r3, r9
    c188:	430a      	orrs	r2, r1
    c18a:	6042      	str	r2, [r0, #4]
    c18c:	0038      	movs	r0, r7
    c18e:	50e1      	str	r1, [r4, r3]
    c190:	f000 f97c 	bl	c48c <__malloc_unlock>
    c194:	0020      	movs	r0, r4
    c196:	3008      	adds	r0, #8
    c198:	e703      	b.n	bfa2 <_malloc_r+0x19e>
    c19a:	46c0      	nop			; (mov r8, r8)
    c19c:	20000620 	.word	0x20000620
    c1a0:	000001ff 	.word	0x000001ff
    c1a4:	20000a28 	.word	0x20000a28
    c1a8:	20000b78 	.word	0x20000b78
    c1ac:	0000100f 	.word	0x0000100f
    c1b0:	20000b48 	.word	0x20000b48
    c1b4:	00001008 	.word	0x00001008
    c1b8:	20000b70 	.word	0x20000b70
    c1bc:	20000b74 	.word	0x20000b74
    c1c0:	6873      	ldr	r3, [r6, #4]
    c1c2:	e68e      	b.n	bee2 <_malloc_r+0xde>
    c1c4:	2308      	movs	r3, #8
    c1c6:	469b      	mov	fp, r3
    c1c8:	3b07      	subs	r3, #7
    c1ca:	44dc      	add	ip, fp
    c1cc:	469b      	mov	fp, r3
    c1ce:	44da      	add	sl, fp
    c1d0:	4643      	mov	r3, r8
    c1d2:	4652      	mov	r2, sl
    c1d4:	4213      	tst	r3, r2
    c1d6:	d000      	beq.n	c1da <_malloc_r+0x3d6>
    c1d8:	e697      	b.n	bf0a <_malloc_r+0x106>
    c1da:	e037      	b.n	c24c <_malloc_r+0x448>
    c1dc:	68dc      	ldr	r4, [r3, #12]
    c1de:	3002      	adds	r0, #2
    c1e0:	42a3      	cmp	r3, r4
    c1e2:	d100      	bne.n	c1e6 <_malloc_r+0x3e2>
    c1e4:	e655      	b.n	be92 <_malloc_r+0x8e>
    c1e6:	e6ca      	b.n	bf7e <_malloc_r+0x17a>
    c1e8:	2201      	movs	r2, #1
    c1ea:	18e3      	adds	r3, r4, r3
    c1ec:	6859      	ldr	r1, [r3, #4]
    c1ee:	0038      	movs	r0, r7
    c1f0:	430a      	orrs	r2, r1
    c1f2:	605a      	str	r2, [r3, #4]
    c1f4:	68e3      	ldr	r3, [r4, #12]
    c1f6:	68a2      	ldr	r2, [r4, #8]
    c1f8:	60d3      	str	r3, [r2, #12]
    c1fa:	609a      	str	r2, [r3, #8]
    c1fc:	f000 f946 	bl	c48c <__malloc_unlock>
    c200:	0020      	movs	r0, r4
    c202:	3008      	adds	r0, #8
    c204:	e6cd      	b.n	bfa2 <_malloc_r+0x19e>
    c206:	235b      	movs	r3, #91	; 0x5b
    c208:	4698      	mov	r8, r3
    c20a:	4480      	add	r8, r0
    c20c:	305c      	adds	r0, #92	; 0x5c
    c20e:	00c1      	lsls	r1, r0, #3
    c210:	e61f      	b.n	be52 <_malloc_r+0x4e>
    c212:	099a      	lsrs	r2, r3, #6
    c214:	0011      	movs	r1, r2
    c216:	3239      	adds	r2, #57	; 0x39
    c218:	3138      	adds	r1, #56	; 0x38
    c21a:	00d2      	lsls	r2, r2, #3
    c21c:	e78c      	b.n	c138 <_malloc_r+0x334>
    c21e:	42b4      	cmp	r4, r6
    c220:	d000      	beq.n	c224 <_malloc_r+0x420>
    c222:	e75a      	b.n	c0da <_malloc_r+0x2d6>
    c224:	4b4f      	ldr	r3, [pc, #316]	; (c364 <_malloc_r+0x560>)
    c226:	9a00      	ldr	r2, [sp, #0]
    c228:	469a      	mov	sl, r3
    c22a:	681b      	ldr	r3, [r3, #0]
    c22c:	469c      	mov	ip, r3
    c22e:	4653      	mov	r3, sl
    c230:	4462      	add	r2, ip
    c232:	0011      	movs	r1, r2
    c234:	601a      	str	r2, [r3, #0]
    c236:	e6ff      	b.n	c038 <_malloc_r+0x234>
    c238:	2308      	movs	r3, #8
    c23a:	425b      	negs	r3, r3
    c23c:	469c      	mov	ip, r3
    c23e:	44e1      	add	r9, ip
    c240:	464b      	mov	r3, r9
    c242:	689b      	ldr	r3, [r3, #8]
    c244:	3801      	subs	r0, #1
    c246:	4599      	cmp	r9, r3
    c248:	d000      	beq.n	c24c <_malloc_r+0x448>
    c24a:	e084      	b.n	c356 <_malloc_r+0x552>
    c24c:	4643      	mov	r3, r8
    c24e:	4203      	tst	r3, r0
    c250:	d1f2      	bne.n	c238 <_malloc_r+0x434>
    c252:	6873      	ldr	r3, [r6, #4]
    c254:	438b      	bics	r3, r1
    c256:	6073      	str	r3, [r6, #4]
    c258:	0049      	lsls	r1, r1, #1
    c25a:	4299      	cmp	r1, r3
    c25c:	d900      	bls.n	c260 <_malloc_r+0x45c>
    c25e:	e6b5      	b.n	bfcc <_malloc_r+0x1c8>
    c260:	2900      	cmp	r1, #0
    c262:	d100      	bne.n	c266 <_malloc_r+0x462>
    c264:	e6b2      	b.n	bfcc <_malloc_r+0x1c8>
    c266:	4650      	mov	r0, sl
    c268:	420b      	tst	r3, r1
    c26a:	d000      	beq.n	c26e <_malloc_r+0x46a>
    c26c:	e648      	b.n	bf00 <_malloc_r+0xfc>
    c26e:	0049      	lsls	r1, r1, #1
    c270:	3004      	adds	r0, #4
    c272:	420b      	tst	r3, r1
    c274:	d0fb      	beq.n	c26e <_malloc_r+0x46a>
    c276:	e643      	b.n	bf00 <_malloc_r+0xfc>
    c278:	2301      	movs	r3, #1
    c27a:	464a      	mov	r2, r9
    c27c:	6053      	str	r3, [r2, #4]
    c27e:	0038      	movs	r0, r7
    c280:	f000 f904 	bl	c48c <__malloc_unlock>
    c284:	2000      	movs	r0, #0
    c286:	e68c      	b.n	bfa2 <_malloc_r+0x19e>
    c288:	4694      	mov	ip, r2
    c28a:	e76a      	b.n	c162 <_malloc_r+0x35e>
    c28c:	23aa      	movs	r3, #170	; 0xaa
    c28e:	005b      	lsls	r3, r3, #1
    c290:	4298      	cmp	r0, r3
    c292:	d811      	bhi.n	c2b8 <_malloc_r+0x4b4>
    c294:	3bdd      	subs	r3, #221	; 0xdd
    c296:	4698      	mov	r8, r3
    c298:	0be8      	lsrs	r0, r5, #15
    c29a:	4480      	add	r8, r0
    c29c:	3078      	adds	r0, #120	; 0x78
    c29e:	00c1      	lsls	r1, r0, #3
    c2a0:	e5d7      	b.n	be52 <_malloc_r+0x4e>
    c2a2:	2380      	movs	r3, #128	; 0x80
    c2a4:	015b      	lsls	r3, r3, #5
    c2a6:	e6dd      	b.n	c064 <_malloc_r+0x260>
    c2a8:	1089      	asrs	r1, r1, #2
    c2aa:	3b02      	subs	r3, #2
    c2ac:	408b      	lsls	r3, r1
    c2ae:	6872      	ldr	r2, [r6, #4]
    c2b0:	4313      	orrs	r3, r2
    c2b2:	6073      	str	r3, [r6, #4]
    c2b4:	4662      	mov	r2, ip
    c2b6:	e757      	b.n	c168 <_malloc_r+0x364>
    c2b8:	4b2b      	ldr	r3, [pc, #172]	; (c368 <_malloc_r+0x564>)
    c2ba:	4298      	cmp	r0, r3
    c2bc:	d81c      	bhi.n	c2f8 <_malloc_r+0x4f4>
    c2be:	237c      	movs	r3, #124	; 0x7c
    c2c0:	4698      	mov	r8, r3
    c2c2:	0ca8      	lsrs	r0, r5, #18
    c2c4:	4480      	add	r8, r0
    c2c6:	307d      	adds	r0, #125	; 0x7d
    c2c8:	00c1      	lsls	r1, r0, #3
    c2ca:	e5c2      	b.n	be52 <_malloc_r+0x4e>
    c2cc:	3310      	adds	r3, #16
    c2ce:	9300      	str	r3, [sp, #0]
    c2d0:	e699      	b.n	c006 <_malloc_r+0x202>
    c2d2:	2a54      	cmp	r2, #84	; 0x54
    c2d4:	d826      	bhi.n	c324 <_malloc_r+0x520>
    c2d6:	464b      	mov	r3, r9
    c2d8:	0b1a      	lsrs	r2, r3, #12
    c2da:	0011      	movs	r1, r2
    c2dc:	326f      	adds	r2, #111	; 0x6f
    c2de:	316e      	adds	r1, #110	; 0x6e
    c2e0:	00d2      	lsls	r2, r2, #3
    c2e2:	e729      	b.n	c138 <_malloc_r+0x334>
    c2e4:	051b      	lsls	r3, r3, #20
    c2e6:	d000      	beq.n	c2ea <_malloc_r+0x4e6>
    c2e8:	e6a6      	b.n	c038 <_malloc_r+0x234>
    c2ea:	2001      	movs	r0, #1
    c2ec:	9b00      	ldr	r3, [sp, #0]
    c2ee:	68b2      	ldr	r2, [r6, #8]
    c2f0:	4443      	add	r3, r8
    c2f2:	4303      	orrs	r3, r0
    c2f4:	6053      	str	r3, [r2, #4]
    c2f6:	e6e6      	b.n	c0c6 <_malloc_r+0x2c2>
    c2f8:	21fe      	movs	r1, #254	; 0xfe
    c2fa:	237e      	movs	r3, #126	; 0x7e
    c2fc:	207f      	movs	r0, #127	; 0x7f
    c2fe:	0089      	lsls	r1, r1, #2
    c300:	4698      	mov	r8, r3
    c302:	e5a6      	b.n	be52 <_malloc_r+0x4e>
    c304:	2300      	movs	r3, #0
    c306:	2001      	movs	r0, #1
    c308:	469b      	mov	fp, r3
    c30a:	e6bd      	b.n	c088 <_malloc_r+0x284>
    c30c:	0021      	movs	r1, r4
    c30e:	0038      	movs	r0, r7
    c310:	3108      	adds	r1, #8
    c312:	f7ff fc57 	bl	bbc4 <_free_r>
    c316:	4653      	mov	r3, sl
    c318:	6819      	ldr	r1, [r3, #0]
    c31a:	e6d4      	b.n	c0c6 <_malloc_r+0x2c2>
    c31c:	465b      	mov	r3, fp
    c31e:	464a      	mov	r2, r9
    c320:	601a      	str	r2, [r3, #0]
    c322:	e694      	b.n	c04e <_malloc_r+0x24a>
    c324:	21aa      	movs	r1, #170	; 0xaa
    c326:	0049      	lsls	r1, r1, #1
    c328:	428a      	cmp	r2, r1
    c32a:	d806      	bhi.n	c33a <_malloc_r+0x536>
    c32c:	464b      	mov	r3, r9
    c32e:	0bda      	lsrs	r2, r3, #15
    c330:	0011      	movs	r1, r2
    c332:	3278      	adds	r2, #120	; 0x78
    c334:	3177      	adds	r1, #119	; 0x77
    c336:	00d2      	lsls	r2, r2, #3
    c338:	e6fe      	b.n	c138 <_malloc_r+0x334>
    c33a:	490b      	ldr	r1, [pc, #44]	; (c368 <_malloc_r+0x564>)
    c33c:	428a      	cmp	r2, r1
    c33e:	d806      	bhi.n	c34e <_malloc_r+0x54a>
    c340:	464b      	mov	r3, r9
    c342:	0c9a      	lsrs	r2, r3, #18
    c344:	0011      	movs	r1, r2
    c346:	327d      	adds	r2, #125	; 0x7d
    c348:	317c      	adds	r1, #124	; 0x7c
    c34a:	00d2      	lsls	r2, r2, #3
    c34c:	e6f4      	b.n	c138 <_malloc_r+0x334>
    c34e:	22fe      	movs	r2, #254	; 0xfe
    c350:	217e      	movs	r1, #126	; 0x7e
    c352:	0092      	lsls	r2, r2, #2
    c354:	e6f0      	b.n	c138 <_malloc_r+0x334>
    c356:	6873      	ldr	r3, [r6, #4]
    c358:	e77e      	b.n	c258 <_malloc_r+0x454>
    c35a:	002b      	movs	r3, r5
    c35c:	08e8      	lsrs	r0, r5, #3
    c35e:	3308      	adds	r3, #8
    c360:	e605      	b.n	bf6e <_malloc_r+0x16a>
    c362:	46c0      	nop			; (mov r8, r8)
    c364:	20000b48 	.word	0x20000b48
    c368:	00000554 	.word	0x00000554

0000c36c <_mbrtowc_r>:
    c36c:	b530      	push	{r4, r5, lr}
    c36e:	0004      	movs	r4, r0
    c370:	b083      	sub	sp, #12
    c372:	2a00      	cmp	r2, #0
    c374:	d013      	beq.n	c39e <_mbrtowc_r+0x32>
    c376:	4813      	ldr	r0, [pc, #76]	; (c3c4 <_mbrtowc_r+0x58>)
    c378:	6800      	ldr	r0, [r0, #0]
    c37a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    c37c:	2800      	cmp	r0, #0
    c37e:	d01d      	beq.n	c3bc <_mbrtowc_r+0x50>
    c380:	9d06      	ldr	r5, [sp, #24]
    c382:	9500      	str	r5, [sp, #0]
    c384:	25e4      	movs	r5, #228	; 0xe4
    c386:	5945      	ldr	r5, [r0, r5]
    c388:	0020      	movs	r0, r4
    c38a:	47a8      	blx	r5
    c38c:	1c43      	adds	r3, r0, #1
    c38e:	d104      	bne.n	c39a <_mbrtowc_r+0x2e>
    c390:	2300      	movs	r3, #0
    c392:	9a06      	ldr	r2, [sp, #24]
    c394:	6013      	str	r3, [r2, #0]
    c396:	338a      	adds	r3, #138	; 0x8a
    c398:	6023      	str	r3, [r4, #0]
    c39a:	b003      	add	sp, #12
    c39c:	bd30      	pop	{r4, r5, pc}
    c39e:	4b09      	ldr	r3, [pc, #36]	; (c3c4 <_mbrtowc_r+0x58>)
    c3a0:	681b      	ldr	r3, [r3, #0]
    c3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    c3a4:	2b00      	cmp	r3, #0
    c3a6:	d00b      	beq.n	c3c0 <_mbrtowc_r+0x54>
    c3a8:	9a06      	ldr	r2, [sp, #24]
    c3aa:	2100      	movs	r1, #0
    c3ac:	9200      	str	r2, [sp, #0]
    c3ae:	22e4      	movs	r2, #228	; 0xe4
    c3b0:	0020      	movs	r0, r4
    c3b2:	589d      	ldr	r5, [r3, r2]
    c3b4:	2301      	movs	r3, #1
    c3b6:	4a04      	ldr	r2, [pc, #16]	; (c3c8 <_mbrtowc_r+0x5c>)
    c3b8:	47a8      	blx	r5
    c3ba:	e7e7      	b.n	c38c <_mbrtowc_r+0x20>
    c3bc:	4803      	ldr	r0, [pc, #12]	; (c3cc <_mbrtowc_r+0x60>)
    c3be:	e7df      	b.n	c380 <_mbrtowc_r+0x14>
    c3c0:	4b02      	ldr	r3, [pc, #8]	; (c3cc <_mbrtowc_r+0x60>)
    c3c2:	e7f1      	b.n	c3a8 <_mbrtowc_r+0x3c>
    c3c4:	20000080 	.word	0x20000080
    c3c8:	0000f738 	.word	0x0000f738
    c3cc:	200004b4 	.word	0x200004b4

0000c3d0 <__ascii_mbtowc>:
    c3d0:	b082      	sub	sp, #8
    c3d2:	2900      	cmp	r1, #0
    c3d4:	d00a      	beq.n	c3ec <__ascii_mbtowc+0x1c>
    c3d6:	2a00      	cmp	r2, #0
    c3d8:	d00b      	beq.n	c3f2 <__ascii_mbtowc+0x22>
    c3da:	2b00      	cmp	r3, #0
    c3dc:	d00b      	beq.n	c3f6 <__ascii_mbtowc+0x26>
    c3de:	7813      	ldrb	r3, [r2, #0]
    c3e0:	600b      	str	r3, [r1, #0]
    c3e2:	7810      	ldrb	r0, [r2, #0]
    c3e4:	1e43      	subs	r3, r0, #1
    c3e6:	4198      	sbcs	r0, r3
    c3e8:	b002      	add	sp, #8
    c3ea:	4770      	bx	lr
    c3ec:	a901      	add	r1, sp, #4
    c3ee:	2a00      	cmp	r2, #0
    c3f0:	d1f3      	bne.n	c3da <__ascii_mbtowc+0xa>
    c3f2:	2000      	movs	r0, #0
    c3f4:	e7f8      	b.n	c3e8 <__ascii_mbtowc+0x18>
    c3f6:	2002      	movs	r0, #2
    c3f8:	4240      	negs	r0, r0
    c3fa:	e7f5      	b.n	c3e8 <__ascii_mbtowc+0x18>

0000c3fc <memchr>:
    c3fc:	b570      	push	{r4, r5, r6, lr}
    c3fe:	b2cd      	uxtb	r5, r1
    c400:	0783      	lsls	r3, r0, #30
    c402:	d034      	beq.n	c46e <memchr+0x72>
    c404:	1e54      	subs	r4, r2, #1
    c406:	2a00      	cmp	r2, #0
    c408:	d01b      	beq.n	c442 <memchr+0x46>
    c40a:	7803      	ldrb	r3, [r0, #0]
    c40c:	42ab      	cmp	r3, r5
    c40e:	d019      	beq.n	c444 <memchr+0x48>
    c410:	2203      	movs	r2, #3
    c412:	e004      	b.n	c41e <memchr+0x22>
    c414:	3c01      	subs	r4, #1
    c416:	d314      	bcc.n	c442 <memchr+0x46>
    c418:	7803      	ldrb	r3, [r0, #0]
    c41a:	42ab      	cmp	r3, r5
    c41c:	d012      	beq.n	c444 <memchr+0x48>
    c41e:	3001      	adds	r0, #1
    c420:	4210      	tst	r0, r2
    c422:	d1f7      	bne.n	c414 <memchr+0x18>
    c424:	2c03      	cmp	r4, #3
    c426:	d80e      	bhi.n	c446 <memchr+0x4a>
    c428:	2c00      	cmp	r4, #0
    c42a:	d00a      	beq.n	c442 <memchr+0x46>
    c42c:	7803      	ldrb	r3, [r0, #0]
    c42e:	42ab      	cmp	r3, r5
    c430:	d008      	beq.n	c444 <memchr+0x48>
    c432:	1904      	adds	r4, r0, r4
    c434:	e002      	b.n	c43c <memchr+0x40>
    c436:	7803      	ldrb	r3, [r0, #0]
    c438:	42ab      	cmp	r3, r5
    c43a:	d003      	beq.n	c444 <memchr+0x48>
    c43c:	3001      	adds	r0, #1
    c43e:	4284      	cmp	r4, r0
    c440:	d1f9      	bne.n	c436 <memchr+0x3a>
    c442:	2000      	movs	r0, #0
    c444:	bd70      	pop	{r4, r5, r6, pc}
    c446:	22ff      	movs	r2, #255	; 0xff
    c448:	060b      	lsls	r3, r1, #24
    c44a:	0c1b      	lsrs	r3, r3, #16
    c44c:	4011      	ands	r1, r2
    c44e:	4319      	orrs	r1, r3
    c450:	040b      	lsls	r3, r1, #16
    c452:	4e08      	ldr	r6, [pc, #32]	; (c474 <memchr+0x78>)
    c454:	4319      	orrs	r1, r3
    c456:	6803      	ldr	r3, [r0, #0]
    c458:	4a07      	ldr	r2, [pc, #28]	; (c478 <memchr+0x7c>)
    c45a:	404b      	eors	r3, r1
    c45c:	189a      	adds	r2, r3, r2
    c45e:	439a      	bics	r2, r3
    c460:	4232      	tst	r2, r6
    c462:	d1e3      	bne.n	c42c <memchr+0x30>
    c464:	3c04      	subs	r4, #4
    c466:	3004      	adds	r0, #4
    c468:	2c03      	cmp	r4, #3
    c46a:	d8f4      	bhi.n	c456 <memchr+0x5a>
    c46c:	e7dc      	b.n	c428 <memchr+0x2c>
    c46e:	0014      	movs	r4, r2
    c470:	e7d8      	b.n	c424 <memchr+0x28>
    c472:	46c0      	nop			; (mov r8, r8)
    c474:	80808080 	.word	0x80808080
    c478:	fefefeff 	.word	0xfefefeff

0000c47c <__malloc_lock>:
    c47c:	b510      	push	{r4, lr}
    c47e:	4802      	ldr	r0, [pc, #8]	; (c488 <__malloc_lock+0xc>)
    c480:	f7ff fcbc 	bl	bdfc <__retarget_lock_acquire_recursive>
    c484:	bd10      	pop	{r4, pc}
    c486:	46c0      	nop			; (mov r8, r8)
    c488:	200017bc 	.word	0x200017bc

0000c48c <__malloc_unlock>:
    c48c:	b510      	push	{r4, lr}
    c48e:	4802      	ldr	r0, [pc, #8]	; (c498 <__malloc_unlock+0xc>)
    c490:	f7ff fcb6 	bl	be00 <__retarget_lock_release_recursive>
    c494:	bd10      	pop	{r4, pc}
    c496:	46c0      	nop			; (mov r8, r8)
    c498:	200017bc 	.word	0x200017bc

0000c49c <_Balloc>:
    c49c:	b570      	push	{r4, r5, r6, lr}
    c49e:	0004      	movs	r4, r0
    c4a0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    c4a2:	000d      	movs	r5, r1
    c4a4:	2800      	cmp	r0, #0
    c4a6:	d00a      	beq.n	c4be <_Balloc+0x22>
    c4a8:	00ab      	lsls	r3, r5, #2
    c4aa:	18c3      	adds	r3, r0, r3
    c4ac:	6818      	ldr	r0, [r3, #0]
    c4ae:	2800      	cmp	r0, #0
    c4b0:	d00f      	beq.n	c4d2 <_Balloc+0x36>
    c4b2:	6802      	ldr	r2, [r0, #0]
    c4b4:	601a      	str	r2, [r3, #0]
    c4b6:	2300      	movs	r3, #0
    c4b8:	6103      	str	r3, [r0, #16]
    c4ba:	60c3      	str	r3, [r0, #12]
    c4bc:	bd70      	pop	{r4, r5, r6, pc}
    c4be:	2221      	movs	r2, #33	; 0x21
    c4c0:	2104      	movs	r1, #4
    c4c2:	0020      	movs	r0, r4
    c4c4:	f002 f91a 	bl	e6fc <_calloc_r>
    c4c8:	64e0      	str	r0, [r4, #76]	; 0x4c
    c4ca:	2800      	cmp	r0, #0
    c4cc:	d1ec      	bne.n	c4a8 <_Balloc+0xc>
    c4ce:	2000      	movs	r0, #0
    c4d0:	e7f4      	b.n	c4bc <_Balloc+0x20>
    c4d2:	2601      	movs	r6, #1
    c4d4:	40ae      	lsls	r6, r5
    c4d6:	1d72      	adds	r2, r6, #5
    c4d8:	0092      	lsls	r2, r2, #2
    c4da:	2101      	movs	r1, #1
    c4dc:	0020      	movs	r0, r4
    c4de:	f002 f90d 	bl	e6fc <_calloc_r>
    c4e2:	2800      	cmp	r0, #0
    c4e4:	d0f3      	beq.n	c4ce <_Balloc+0x32>
    c4e6:	6045      	str	r5, [r0, #4]
    c4e8:	6086      	str	r6, [r0, #8]
    c4ea:	e7e4      	b.n	c4b6 <_Balloc+0x1a>

0000c4ec <_Bfree>:
    c4ec:	2900      	cmp	r1, #0
    c4ee:	d006      	beq.n	c4fe <_Bfree+0x12>
    c4f0:	684b      	ldr	r3, [r1, #4]
    c4f2:	009a      	lsls	r2, r3, #2
    c4f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    c4f6:	189b      	adds	r3, r3, r2
    c4f8:	681a      	ldr	r2, [r3, #0]
    c4fa:	600a      	str	r2, [r1, #0]
    c4fc:	6019      	str	r1, [r3, #0]
    c4fe:	4770      	bx	lr

0000c500 <__multadd>:
    c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c502:	46ce      	mov	lr, r9
    c504:	4647      	mov	r7, r8
    c506:	4681      	mov	r9, r0
    c508:	0008      	movs	r0, r1
    c50a:	b580      	push	{r7, lr}
    c50c:	000d      	movs	r5, r1
    c50e:	690c      	ldr	r4, [r1, #16]
    c510:	001f      	movs	r7, r3
    c512:	2100      	movs	r1, #0
    c514:	3014      	adds	r0, #20
    c516:	6803      	ldr	r3, [r0, #0]
    c518:	3101      	adds	r1, #1
    c51a:	041e      	lsls	r6, r3, #16
    c51c:	0c36      	lsrs	r6, r6, #16
    c51e:	4356      	muls	r6, r2
    c520:	0c1b      	lsrs	r3, r3, #16
    c522:	4353      	muls	r3, r2
    c524:	19f6      	adds	r6, r6, r7
    c526:	0c37      	lsrs	r7, r6, #16
    c528:	19db      	adds	r3, r3, r7
    c52a:	0436      	lsls	r6, r6, #16
    c52c:	0c1f      	lsrs	r7, r3, #16
    c52e:	0c36      	lsrs	r6, r6, #16
    c530:	041b      	lsls	r3, r3, #16
    c532:	199b      	adds	r3, r3, r6
    c534:	c008      	stmia	r0!, {r3}
    c536:	428c      	cmp	r4, r1
    c538:	dced      	bgt.n	c516 <__multadd+0x16>
    c53a:	2f00      	cmp	r7, #0
    c53c:	d008      	beq.n	c550 <__multadd+0x50>
    c53e:	68ab      	ldr	r3, [r5, #8]
    c540:	429c      	cmp	r4, r3
    c542:	da0a      	bge.n	c55a <__multadd+0x5a>
    c544:	1d23      	adds	r3, r4, #4
    c546:	009b      	lsls	r3, r3, #2
    c548:	18eb      	adds	r3, r5, r3
    c54a:	3401      	adds	r4, #1
    c54c:	605f      	str	r7, [r3, #4]
    c54e:	612c      	str	r4, [r5, #16]
    c550:	0028      	movs	r0, r5
    c552:	bc0c      	pop	{r2, r3}
    c554:	4690      	mov	r8, r2
    c556:	4699      	mov	r9, r3
    c558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c55a:	686b      	ldr	r3, [r5, #4]
    c55c:	4648      	mov	r0, r9
    c55e:	1c59      	adds	r1, r3, #1
    c560:	f7ff ff9c 	bl	c49c <_Balloc>
    c564:	0029      	movs	r1, r5
    c566:	692b      	ldr	r3, [r5, #16]
    c568:	4680      	mov	r8, r0
    c56a:	1c9a      	adds	r2, r3, #2
    c56c:	0092      	lsls	r2, r2, #2
    c56e:	310c      	adds	r1, #12
    c570:	300c      	adds	r0, #12
    c572:	f7fb fb39 	bl	7be8 <memcpy>
    c576:	686b      	ldr	r3, [r5, #4]
    c578:	009a      	lsls	r2, r3, #2
    c57a:	464b      	mov	r3, r9
    c57c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c57e:	189b      	adds	r3, r3, r2
    c580:	681a      	ldr	r2, [r3, #0]
    c582:	602a      	str	r2, [r5, #0]
    c584:	601d      	str	r5, [r3, #0]
    c586:	4645      	mov	r5, r8
    c588:	e7dc      	b.n	c544 <__multadd+0x44>
    c58a:	46c0      	nop			; (mov r8, r8)

0000c58c <__s2b>:
    c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c58e:	4647      	mov	r7, r8
    c590:	46ce      	mov	lr, r9
    c592:	0006      	movs	r6, r0
    c594:	0018      	movs	r0, r3
    c596:	b580      	push	{r7, lr}
    c598:	000d      	movs	r5, r1
    c59a:	3008      	adds	r0, #8
    c59c:	2109      	movs	r1, #9
    c59e:	4690      	mov	r8, r2
    c5a0:	001f      	movs	r7, r3
    c5a2:	f7f9 f937 	bl	5814 <__divsi3>
    c5a6:	2801      	cmp	r0, #1
    c5a8:	dd38      	ble.n	c61c <__s2b+0x90>
    c5aa:	2201      	movs	r2, #1
    c5ac:	2100      	movs	r1, #0
    c5ae:	0052      	lsls	r2, r2, #1
    c5b0:	3101      	adds	r1, #1
    c5b2:	4290      	cmp	r0, r2
    c5b4:	dcfb      	bgt.n	c5ae <__s2b+0x22>
    c5b6:	0030      	movs	r0, r6
    c5b8:	f7ff ff70 	bl	c49c <_Balloc>
    c5bc:	9b08      	ldr	r3, [sp, #32]
    c5be:	6143      	str	r3, [r0, #20]
    c5c0:	2301      	movs	r3, #1
    c5c2:	6103      	str	r3, [r0, #16]
    c5c4:	4643      	mov	r3, r8
    c5c6:	2b09      	cmp	r3, #9
    c5c8:	dd24      	ble.n	c614 <__s2b+0x88>
    c5ca:	2309      	movs	r3, #9
    c5cc:	4699      	mov	r9, r3
    c5ce:	44a9      	add	r9, r5
    c5d0:	464c      	mov	r4, r9
    c5d2:	4445      	add	r5, r8
    c5d4:	7823      	ldrb	r3, [r4, #0]
    c5d6:	0001      	movs	r1, r0
    c5d8:	3b30      	subs	r3, #48	; 0x30
    c5da:	220a      	movs	r2, #10
    c5dc:	0030      	movs	r0, r6
    c5de:	3401      	adds	r4, #1
    c5e0:	f7ff ff8e 	bl	c500 <__multadd>
    c5e4:	42ac      	cmp	r4, r5
    c5e6:	d1f5      	bne.n	c5d4 <__s2b+0x48>
    c5e8:	4645      	mov	r5, r8
    c5ea:	3d08      	subs	r5, #8
    c5ec:	444d      	add	r5, r9
    c5ee:	4547      	cmp	r7, r8
    c5f0:	dd0c      	ble.n	c60c <__s2b+0x80>
    c5f2:	4643      	mov	r3, r8
    c5f4:	1aff      	subs	r7, r7, r3
    c5f6:	19ef      	adds	r7, r5, r7
    c5f8:	782b      	ldrb	r3, [r5, #0]
    c5fa:	0001      	movs	r1, r0
    c5fc:	3b30      	subs	r3, #48	; 0x30
    c5fe:	220a      	movs	r2, #10
    c600:	0030      	movs	r0, r6
    c602:	3501      	adds	r5, #1
    c604:	f7ff ff7c 	bl	c500 <__multadd>
    c608:	42bd      	cmp	r5, r7
    c60a:	d1f5      	bne.n	c5f8 <__s2b+0x6c>
    c60c:	bc0c      	pop	{r2, r3}
    c60e:	4690      	mov	r8, r2
    c610:	4699      	mov	r9, r3
    c612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c614:	2309      	movs	r3, #9
    c616:	350a      	adds	r5, #10
    c618:	4698      	mov	r8, r3
    c61a:	e7e8      	b.n	c5ee <__s2b+0x62>
    c61c:	2100      	movs	r1, #0
    c61e:	e7ca      	b.n	c5b6 <__s2b+0x2a>

0000c620 <__hi0bits>:
    c620:	0003      	movs	r3, r0
    c622:	0c02      	lsrs	r2, r0, #16
    c624:	2000      	movs	r0, #0
    c626:	2a00      	cmp	r2, #0
    c628:	d101      	bne.n	c62e <__hi0bits+0xe>
    c62a:	041b      	lsls	r3, r3, #16
    c62c:	3010      	adds	r0, #16
    c62e:	0e1a      	lsrs	r2, r3, #24
    c630:	d101      	bne.n	c636 <__hi0bits+0x16>
    c632:	3008      	adds	r0, #8
    c634:	021b      	lsls	r3, r3, #8
    c636:	0f1a      	lsrs	r2, r3, #28
    c638:	d101      	bne.n	c63e <__hi0bits+0x1e>
    c63a:	3004      	adds	r0, #4
    c63c:	011b      	lsls	r3, r3, #4
    c63e:	0f9a      	lsrs	r2, r3, #30
    c640:	d101      	bne.n	c646 <__hi0bits+0x26>
    c642:	3002      	adds	r0, #2
    c644:	009b      	lsls	r3, r3, #2
    c646:	2b00      	cmp	r3, #0
    c648:	db03      	blt.n	c652 <__hi0bits+0x32>
    c64a:	3001      	adds	r0, #1
    c64c:	005b      	lsls	r3, r3, #1
    c64e:	d400      	bmi.n	c652 <__hi0bits+0x32>
    c650:	2020      	movs	r0, #32
    c652:	4770      	bx	lr

0000c654 <__lo0bits>:
    c654:	6803      	ldr	r3, [r0, #0]
    c656:	075a      	lsls	r2, r3, #29
    c658:	d009      	beq.n	c66e <__lo0bits+0x1a>
    c65a:	2200      	movs	r2, #0
    c65c:	07d9      	lsls	r1, r3, #31
    c65e:	d404      	bmi.n	c66a <__lo0bits+0x16>
    c660:	079a      	lsls	r2, r3, #30
    c662:	d420      	bmi.n	c6a6 <__lo0bits+0x52>
    c664:	2202      	movs	r2, #2
    c666:	089b      	lsrs	r3, r3, #2
    c668:	6003      	str	r3, [r0, #0]
    c66a:	0010      	movs	r0, r2
    c66c:	4770      	bx	lr
    c66e:	0419      	lsls	r1, r3, #16
    c670:	2200      	movs	r2, #0
    c672:	2900      	cmp	r1, #0
    c674:	d101      	bne.n	c67a <__lo0bits+0x26>
    c676:	0c1b      	lsrs	r3, r3, #16
    c678:	3210      	adds	r2, #16
    c67a:	21ff      	movs	r1, #255	; 0xff
    c67c:	4219      	tst	r1, r3
    c67e:	d101      	bne.n	c684 <__lo0bits+0x30>
    c680:	3208      	adds	r2, #8
    c682:	0a1b      	lsrs	r3, r3, #8
    c684:	0719      	lsls	r1, r3, #28
    c686:	d101      	bne.n	c68c <__lo0bits+0x38>
    c688:	3204      	adds	r2, #4
    c68a:	091b      	lsrs	r3, r3, #4
    c68c:	0799      	lsls	r1, r3, #30
    c68e:	d101      	bne.n	c694 <__lo0bits+0x40>
    c690:	3202      	adds	r2, #2
    c692:	089b      	lsrs	r3, r3, #2
    c694:	07d9      	lsls	r1, r3, #31
    c696:	d404      	bmi.n	c6a2 <__lo0bits+0x4e>
    c698:	085b      	lsrs	r3, r3, #1
    c69a:	d101      	bne.n	c6a0 <__lo0bits+0x4c>
    c69c:	2220      	movs	r2, #32
    c69e:	e7e4      	b.n	c66a <__lo0bits+0x16>
    c6a0:	3201      	adds	r2, #1
    c6a2:	6003      	str	r3, [r0, #0]
    c6a4:	e7e1      	b.n	c66a <__lo0bits+0x16>
    c6a6:	085b      	lsrs	r3, r3, #1
    c6a8:	6003      	str	r3, [r0, #0]
    c6aa:	2201      	movs	r2, #1
    c6ac:	e7dd      	b.n	c66a <__lo0bits+0x16>
    c6ae:	46c0      	nop			; (mov r8, r8)

0000c6b0 <__i2b>:
    c6b0:	b510      	push	{r4, lr}
    c6b2:	000c      	movs	r4, r1
    c6b4:	2101      	movs	r1, #1
    c6b6:	f7ff fef1 	bl	c49c <_Balloc>
    c6ba:	2301      	movs	r3, #1
    c6bc:	6144      	str	r4, [r0, #20]
    c6be:	6103      	str	r3, [r0, #16]
    c6c0:	bd10      	pop	{r4, pc}
    c6c2:	46c0      	nop			; (mov r8, r8)

0000c6c4 <__multiply>:
    c6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6c6:	4657      	mov	r7, sl
    c6c8:	464e      	mov	r6, r9
    c6ca:	4645      	mov	r5, r8
    c6cc:	46de      	mov	lr, fp
    c6ce:	b5e0      	push	{r5, r6, r7, lr}
    c6d0:	6914      	ldr	r4, [r2, #16]
    c6d2:	690e      	ldr	r6, [r1, #16]
    c6d4:	b085      	sub	sp, #20
    c6d6:	000f      	movs	r7, r1
    c6d8:	0015      	movs	r5, r2
    c6da:	42a6      	cmp	r6, r4
    c6dc:	da04      	bge.n	c6e8 <__multiply+0x24>
    c6de:	0033      	movs	r3, r6
    c6e0:	0017      	movs	r7, r2
    c6e2:	0026      	movs	r6, r4
    c6e4:	000d      	movs	r5, r1
    c6e6:	001c      	movs	r4, r3
    c6e8:	1933      	adds	r3, r6, r4
    c6ea:	4698      	mov	r8, r3
    c6ec:	68bb      	ldr	r3, [r7, #8]
    c6ee:	6879      	ldr	r1, [r7, #4]
    c6f0:	4598      	cmp	r8, r3
    c6f2:	dd00      	ble.n	c6f6 <__multiply+0x32>
    c6f4:	3101      	adds	r1, #1
    c6f6:	f7ff fed1 	bl	c49c <_Balloc>
    c6fa:	2214      	movs	r2, #20
    c6fc:	0003      	movs	r3, r0
    c6fe:	4694      	mov	ip, r2
    c700:	4463      	add	r3, ip
    c702:	469b      	mov	fp, r3
    c704:	4643      	mov	r3, r8
    c706:	009b      	lsls	r3, r3, #2
    c708:	445b      	add	r3, fp
    c70a:	0019      	movs	r1, r3
    c70c:	9302      	str	r3, [sp, #8]
    c70e:	9003      	str	r0, [sp, #12]
    c710:	465b      	mov	r3, fp
    c712:	2200      	movs	r2, #0
    c714:	458b      	cmp	fp, r1
    c716:	d203      	bcs.n	c720 <__multiply+0x5c>
    c718:	9902      	ldr	r1, [sp, #8]
    c71a:	c304      	stmia	r3!, {r2}
    c71c:	4299      	cmp	r1, r3
    c71e:	d8fc      	bhi.n	c71a <__multiply+0x56>
    c720:	2314      	movs	r3, #20
    c722:	00a4      	lsls	r4, r4, #2
    c724:	469a      	mov	sl, r3
    c726:	3714      	adds	r7, #20
    c728:	0023      	movs	r3, r4
    c72a:	46bc      	mov	ip, r7
    c72c:	44aa      	add	sl, r5
    c72e:	00b6      	lsls	r6, r6, #2
    c730:	4453      	add	r3, sl
    c732:	9700      	str	r7, [sp, #0]
    c734:	44b4      	add	ip, r6
    c736:	9301      	str	r3, [sp, #4]
    c738:	459a      	cmp	sl, r3
    c73a:	d24f      	bcs.n	c7dc <__multiply+0x118>
    c73c:	4653      	mov	r3, sl
    c73e:	681b      	ldr	r3, [r3, #0]
    c740:	041e      	lsls	r6, r3, #16
    c742:	0c36      	lsrs	r6, r6, #16
    c744:	d020      	beq.n	c788 <__multiply+0xc4>
    c746:	465c      	mov	r4, fp
    c748:	2700      	movs	r7, #0
    c74a:	9d00      	ldr	r5, [sp, #0]
    c74c:	0021      	movs	r1, r4
    c74e:	cc08      	ldmia	r4!, {r3}
    c750:	cd04      	ldmia	r5!, {r2}
    c752:	4699      	mov	r9, r3
    c754:	4648      	mov	r0, r9
    c756:	0413      	lsls	r3, r2, #16
    c758:	0c1b      	lsrs	r3, r3, #16
    c75a:	4373      	muls	r3, r6
    c75c:	0400      	lsls	r0, r0, #16
    c75e:	0c00      	lsrs	r0, r0, #16
    c760:	181b      	adds	r3, r3, r0
    c762:	19d8      	adds	r0, r3, r7
    c764:	0c13      	lsrs	r3, r2, #16
    c766:	464a      	mov	r2, r9
    c768:	4373      	muls	r3, r6
    c76a:	0c12      	lsrs	r2, r2, #16
    c76c:	189b      	adds	r3, r3, r2
    c76e:	0c02      	lsrs	r2, r0, #16
    c770:	189b      	adds	r3, r3, r2
    c772:	0402      	lsls	r2, r0, #16
    c774:	0c1f      	lsrs	r7, r3, #16
    c776:	0c12      	lsrs	r2, r2, #16
    c778:	041b      	lsls	r3, r3, #16
    c77a:	4313      	orrs	r3, r2
    c77c:	600b      	str	r3, [r1, #0]
    c77e:	45ac      	cmp	ip, r5
    c780:	d8e4      	bhi.n	c74c <__multiply+0x88>
    c782:	4653      	mov	r3, sl
    c784:	6027      	str	r7, [r4, #0]
    c786:	681b      	ldr	r3, [r3, #0]
    c788:	0c1e      	lsrs	r6, r3, #16
    c78a:	d020      	beq.n	c7ce <__multiply+0x10a>
    c78c:	465b      	mov	r3, fp
    c78e:	2100      	movs	r1, #0
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	465c      	mov	r4, fp
    c794:	0018      	movs	r0, r3
    c796:	000f      	movs	r7, r1
    c798:	4662      	mov	r2, ip
    c79a:	9d00      	ldr	r5, [sp, #0]
    c79c:	8829      	ldrh	r1, [r5, #0]
    c79e:	0c00      	lsrs	r0, r0, #16
    c7a0:	4371      	muls	r1, r6
    c7a2:	1809      	adds	r1, r1, r0
    c7a4:	19c9      	adds	r1, r1, r7
    c7a6:	041b      	lsls	r3, r3, #16
    c7a8:	0408      	lsls	r0, r1, #16
    c7aa:	0c1b      	lsrs	r3, r3, #16
    c7ac:	4303      	orrs	r3, r0
    c7ae:	6023      	str	r3, [r4, #0]
    c7b0:	cd08      	ldmia	r5!, {r3}
    c7b2:	6860      	ldr	r0, [r4, #4]
    c7b4:	0c1b      	lsrs	r3, r3, #16
    c7b6:	4373      	muls	r3, r6
    c7b8:	0407      	lsls	r7, r0, #16
    c7ba:	0c3f      	lsrs	r7, r7, #16
    c7bc:	19db      	adds	r3, r3, r7
    c7be:	0c09      	lsrs	r1, r1, #16
    c7c0:	185b      	adds	r3, r3, r1
    c7c2:	0c1f      	lsrs	r7, r3, #16
    c7c4:	3404      	adds	r4, #4
    c7c6:	42aa      	cmp	r2, r5
    c7c8:	d8e8      	bhi.n	c79c <__multiply+0xd8>
    c7ca:	4694      	mov	ip, r2
    c7cc:	6023      	str	r3, [r4, #0]
    c7ce:	2304      	movs	r3, #4
    c7d0:	4699      	mov	r9, r3
    c7d2:	9b01      	ldr	r3, [sp, #4]
    c7d4:	44ca      	add	sl, r9
    c7d6:	44cb      	add	fp, r9
    c7d8:	4553      	cmp	r3, sl
    c7da:	d8af      	bhi.n	c73c <__multiply+0x78>
    c7dc:	4643      	mov	r3, r8
    c7de:	2b00      	cmp	r3, #0
    c7e0:	dd0e      	ble.n	c800 <__multiply+0x13c>
    c7e2:	9b02      	ldr	r3, [sp, #8]
    c7e4:	3b04      	subs	r3, #4
    c7e6:	681a      	ldr	r2, [r3, #0]
    c7e8:	2a00      	cmp	r2, #0
    c7ea:	d109      	bne.n	c800 <__multiply+0x13c>
    c7ec:	4642      	mov	r2, r8
    c7ee:	e003      	b.n	c7f8 <__multiply+0x134>
    c7f0:	3b04      	subs	r3, #4
    c7f2:	6819      	ldr	r1, [r3, #0]
    c7f4:	2900      	cmp	r1, #0
    c7f6:	d102      	bne.n	c7fe <__multiply+0x13a>
    c7f8:	3a01      	subs	r2, #1
    c7fa:	2a00      	cmp	r2, #0
    c7fc:	d1f8      	bne.n	c7f0 <__multiply+0x12c>
    c7fe:	4690      	mov	r8, r2
    c800:	9b03      	ldr	r3, [sp, #12]
    c802:	4642      	mov	r2, r8
    c804:	0018      	movs	r0, r3
    c806:	611a      	str	r2, [r3, #16]
    c808:	b005      	add	sp, #20
    c80a:	bc3c      	pop	{r2, r3, r4, r5}
    c80c:	4690      	mov	r8, r2
    c80e:	4699      	mov	r9, r3
    c810:	46a2      	mov	sl, r4
    c812:	46ab      	mov	fp, r5
    c814:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c816:	46c0      	nop			; (mov r8, r8)

0000c818 <__pow5mult>:
    c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c81a:	4647      	mov	r7, r8
    c81c:	46ce      	mov	lr, r9
    c81e:	2303      	movs	r3, #3
    c820:	b580      	push	{r7, lr}
    c822:	4680      	mov	r8, r0
    c824:	000f      	movs	r7, r1
    c826:	0014      	movs	r4, r2
    c828:	4013      	ands	r3, r2
    c82a:	d13a      	bne.n	c8a2 <__pow5mult+0x8a>
    c82c:	10a4      	asrs	r4, r4, #2
    c82e:	003e      	movs	r6, r7
    c830:	2c00      	cmp	r4, #0
    c832:	d025      	beq.n	c880 <__pow5mult+0x68>
    c834:	4643      	mov	r3, r8
    c836:	6c9d      	ldr	r5, [r3, #72]	; 0x48
    c838:	2d00      	cmp	r5, #0
    c83a:	d03b      	beq.n	c8b4 <__pow5mult+0x9c>
    c83c:	003e      	movs	r6, r7
    c83e:	2300      	movs	r3, #0
    c840:	2701      	movs	r7, #1
    c842:	4699      	mov	r9, r3
    c844:	4227      	tst	r7, r4
    c846:	d107      	bne.n	c858 <__pow5mult+0x40>
    c848:	1064      	asrs	r4, r4, #1
    c84a:	d019      	beq.n	c880 <__pow5mult+0x68>
    c84c:	6828      	ldr	r0, [r5, #0]
    c84e:	2800      	cmp	r0, #0
    c850:	d01b      	beq.n	c88a <__pow5mult+0x72>
    c852:	0005      	movs	r5, r0
    c854:	4227      	tst	r7, r4
    c856:	d0f7      	beq.n	c848 <__pow5mult+0x30>
    c858:	002a      	movs	r2, r5
    c85a:	0031      	movs	r1, r6
    c85c:	4640      	mov	r0, r8
    c85e:	f7ff ff31 	bl	c6c4 <__multiply>
    c862:	2e00      	cmp	r6, #0
    c864:	d01b      	beq.n	c89e <__pow5mult+0x86>
    c866:	4642      	mov	r2, r8
    c868:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    c86a:	6873      	ldr	r3, [r6, #4]
    c86c:	4694      	mov	ip, r2
    c86e:	009b      	lsls	r3, r3, #2
    c870:	4463      	add	r3, ip
    c872:	681a      	ldr	r2, [r3, #0]
    c874:	1064      	asrs	r4, r4, #1
    c876:	6032      	str	r2, [r6, #0]
    c878:	601e      	str	r6, [r3, #0]
    c87a:	0006      	movs	r6, r0
    c87c:	2c00      	cmp	r4, #0
    c87e:	d1e5      	bne.n	c84c <__pow5mult+0x34>
    c880:	0030      	movs	r0, r6
    c882:	bc0c      	pop	{r2, r3}
    c884:	4690      	mov	r8, r2
    c886:	4699      	mov	r9, r3
    c888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c88a:	002a      	movs	r2, r5
    c88c:	0029      	movs	r1, r5
    c88e:	4640      	mov	r0, r8
    c890:	f7ff ff18 	bl	c6c4 <__multiply>
    c894:	464b      	mov	r3, r9
    c896:	6028      	str	r0, [r5, #0]
    c898:	6003      	str	r3, [r0, #0]
    c89a:	0005      	movs	r5, r0
    c89c:	e7da      	b.n	c854 <__pow5mult+0x3c>
    c89e:	0006      	movs	r6, r0
    c8a0:	e7d2      	b.n	c848 <__pow5mult+0x30>
    c8a2:	4a0b      	ldr	r2, [pc, #44]	; (c8d0 <__pow5mult+0xb8>)
    c8a4:	3b01      	subs	r3, #1
    c8a6:	009b      	lsls	r3, r3, #2
    c8a8:	589a      	ldr	r2, [r3, r2]
    c8aa:	2300      	movs	r3, #0
    c8ac:	f7ff fe28 	bl	c500 <__multadd>
    c8b0:	0007      	movs	r7, r0
    c8b2:	e7bb      	b.n	c82c <__pow5mult+0x14>
    c8b4:	2101      	movs	r1, #1
    c8b6:	4640      	mov	r0, r8
    c8b8:	f7ff fdf0 	bl	c49c <_Balloc>
    c8bc:	4b05      	ldr	r3, [pc, #20]	; (c8d4 <__pow5mult+0xbc>)
    c8be:	0005      	movs	r5, r0
    c8c0:	6143      	str	r3, [r0, #20]
    c8c2:	2301      	movs	r3, #1
    c8c4:	6103      	str	r3, [r0, #16]
    c8c6:	4643      	mov	r3, r8
    c8c8:	6498      	str	r0, [r3, #72]	; 0x48
    c8ca:	2300      	movs	r3, #0
    c8cc:	6003      	str	r3, [r0, #0]
    c8ce:	e7b5      	b.n	c83c <__pow5mult+0x24>
    c8d0:	000124c0 	.word	0x000124c0
    c8d4:	00000271 	.word	0x00000271

0000c8d8 <__lshift>:
    c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8da:	464e      	mov	r6, r9
    c8dc:	4645      	mov	r5, r8
    c8de:	46de      	mov	lr, fp
    c8e0:	4657      	mov	r7, sl
    c8e2:	b5e0      	push	{r5, r6, r7, lr}
    c8e4:	000e      	movs	r6, r1
    c8e6:	6933      	ldr	r3, [r6, #16]
    c8e8:	1154      	asrs	r4, r2, #5
    c8ea:	4698      	mov	r8, r3
    c8ec:	44a0      	add	r8, r4
    c8ee:	4643      	mov	r3, r8
    c8f0:	1c5d      	adds	r5, r3, #1
    c8f2:	68b3      	ldr	r3, [r6, #8]
    c8f4:	4683      	mov	fp, r0
    c8f6:	4691      	mov	r9, r2
    c8f8:	6849      	ldr	r1, [r1, #4]
    c8fa:	429d      	cmp	r5, r3
    c8fc:	dd03      	ble.n	c906 <__lshift+0x2e>
    c8fe:	3101      	adds	r1, #1
    c900:	005b      	lsls	r3, r3, #1
    c902:	429d      	cmp	r5, r3
    c904:	dcfb      	bgt.n	c8fe <__lshift+0x26>
    c906:	4658      	mov	r0, fp
    c908:	f7ff fdc8 	bl	c49c <_Balloc>
    c90c:	0003      	movs	r3, r0
    c90e:	4684      	mov	ip, r0
    c910:	3314      	adds	r3, #20
    c912:	2c00      	cmp	r4, #0
    c914:	dd06      	ble.n	c924 <__lshift+0x4c>
    c916:	2100      	movs	r1, #0
    c918:	00a4      	lsls	r4, r4, #2
    c91a:	001a      	movs	r2, r3
    c91c:	191b      	adds	r3, r3, r4
    c91e:	c202      	stmia	r2!, {r1}
    c920:	4293      	cmp	r3, r2
    c922:	d1fc      	bne.n	c91e <__lshift+0x46>
    c924:	6932      	ldr	r2, [r6, #16]
    c926:	4648      	mov	r0, r9
    c928:	0097      	lsls	r7, r2, #2
    c92a:	0031      	movs	r1, r6
    c92c:	221f      	movs	r2, #31
    c92e:	3114      	adds	r1, #20
    c930:	4010      	ands	r0, r2
    c932:	19cf      	adds	r7, r1, r7
    c934:	4681      	mov	r9, r0
    c936:	2800      	cmp	r0, #0
    c938:	d025      	beq.n	c986 <__lshift+0xae>
    c93a:	2220      	movs	r2, #32
    c93c:	1a12      	subs	r2, r2, r0
    c93e:	4692      	mov	sl, r2
    c940:	2200      	movs	r2, #0
    c942:	4648      	mov	r0, r9
    c944:	680c      	ldr	r4, [r1, #0]
    c946:	4084      	lsls	r4, r0
    c948:	4650      	mov	r0, sl
    c94a:	4314      	orrs	r4, r2
    c94c:	601c      	str	r4, [r3, #0]
    c94e:	c904      	ldmia	r1!, {r2}
    c950:	3304      	adds	r3, #4
    c952:	40c2      	lsrs	r2, r0
    c954:	428f      	cmp	r7, r1
    c956:	d8f4      	bhi.n	c942 <__lshift+0x6a>
    c958:	601a      	str	r2, [r3, #0]
    c95a:	2a00      	cmp	r2, #0
    c95c:	d001      	beq.n	c962 <__lshift+0x8a>
    c95e:	4645      	mov	r5, r8
    c960:	3502      	adds	r5, #2
    c962:	4663      	mov	r3, ip
    c964:	3d01      	subs	r5, #1
    c966:	611d      	str	r5, [r3, #16]
    c968:	6873      	ldr	r3, [r6, #4]
    c96a:	4660      	mov	r0, ip
    c96c:	009a      	lsls	r2, r3, #2
    c96e:	465b      	mov	r3, fp
    c970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    c972:	189b      	adds	r3, r3, r2
    c974:	681a      	ldr	r2, [r3, #0]
    c976:	6032      	str	r2, [r6, #0]
    c978:	601e      	str	r6, [r3, #0]
    c97a:	bc3c      	pop	{r2, r3, r4, r5}
    c97c:	4690      	mov	r8, r2
    c97e:	4699      	mov	r9, r3
    c980:	46a2      	mov	sl, r4
    c982:	46ab      	mov	fp, r5
    c984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c986:	c904      	ldmia	r1!, {r2}
    c988:	c304      	stmia	r3!, {r2}
    c98a:	428f      	cmp	r7, r1
    c98c:	d9e9      	bls.n	c962 <__lshift+0x8a>
    c98e:	c904      	ldmia	r1!, {r2}
    c990:	c304      	stmia	r3!, {r2}
    c992:	428f      	cmp	r7, r1
    c994:	d8f7      	bhi.n	c986 <__lshift+0xae>
    c996:	e7e4      	b.n	c962 <__lshift+0x8a>

0000c998 <__mcmp>:
    c998:	690a      	ldr	r2, [r1, #16]
    c99a:	6903      	ldr	r3, [r0, #16]
    c99c:	b530      	push	{r4, r5, lr}
    c99e:	0005      	movs	r5, r0
    c9a0:	1a98      	subs	r0, r3, r2
    c9a2:	d111      	bne.n	c9c8 <__mcmp+0x30>
    c9a4:	0092      	lsls	r2, r2, #2
    c9a6:	3514      	adds	r5, #20
    c9a8:	3114      	adds	r1, #20
    c9aa:	18ab      	adds	r3, r5, r2
    c9ac:	1889      	adds	r1, r1, r2
    c9ae:	e001      	b.n	c9b4 <__mcmp+0x1c>
    c9b0:	429d      	cmp	r5, r3
    c9b2:	d209      	bcs.n	c9c8 <__mcmp+0x30>
    c9b4:	3b04      	subs	r3, #4
    c9b6:	3904      	subs	r1, #4
    c9b8:	681c      	ldr	r4, [r3, #0]
    c9ba:	680a      	ldr	r2, [r1, #0]
    c9bc:	4294      	cmp	r4, r2
    c9be:	d0f7      	beq.n	c9b0 <__mcmp+0x18>
    c9c0:	4294      	cmp	r4, r2
    c9c2:	4180      	sbcs	r0, r0
    c9c4:	2201      	movs	r2, #1
    c9c6:	4310      	orrs	r0, r2
    c9c8:	bd30      	pop	{r4, r5, pc}
    c9ca:	46c0      	nop			; (mov r8, r8)

0000c9cc <__mdiff>:
    c9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9ce:	4645      	mov	r5, r8
    c9d0:	46de      	mov	lr, fp
    c9d2:	4657      	mov	r7, sl
    c9d4:	464e      	mov	r6, r9
    c9d6:	0014      	movs	r4, r2
    c9d8:	690b      	ldr	r3, [r1, #16]
    c9da:	6912      	ldr	r2, [r2, #16]
    c9dc:	b5e0      	push	{r5, r6, r7, lr}
    c9de:	4688      	mov	r8, r1
    c9e0:	1a9d      	subs	r5, r3, r2
    c9e2:	d11a      	bne.n	ca1a <__mdiff+0x4e>
    c9e4:	000f      	movs	r7, r1
    c9e6:	2114      	movs	r1, #20
    c9e8:	468c      	mov	ip, r1
    c9ea:	0092      	lsls	r2, r2, #2
    c9ec:	3714      	adds	r7, #20
    c9ee:	44a4      	add	ip, r4
    c9f0:	18bb      	adds	r3, r7, r2
    c9f2:	4462      	add	r2, ip
    c9f4:	e002      	b.n	c9fc <__mdiff+0x30>
    c9f6:	429f      	cmp	r7, r3
    c9f8:	d300      	bcc.n	c9fc <__mdiff+0x30>
    c9fa:	e070      	b.n	cade <__mdiff+0x112>
    c9fc:	3b04      	subs	r3, #4
    c9fe:	3a04      	subs	r2, #4
    ca00:	681e      	ldr	r6, [r3, #0]
    ca02:	6811      	ldr	r1, [r2, #0]
    ca04:	428e      	cmp	r6, r1
    ca06:	d0f6      	beq.n	c9f6 <__mdiff+0x2a>
    ca08:	d300      	bcc.n	ca0c <__mdiff+0x40>
    ca0a:	e071      	b.n	caf0 <__mdiff+0x124>
    ca0c:	4643      	mov	r3, r8
    ca0e:	003e      	movs	r6, r7
    ca10:	46a0      	mov	r8, r4
    ca12:	4667      	mov	r7, ip
    ca14:	001c      	movs	r4, r3
    ca16:	2501      	movs	r5, #1
    ca18:	e006      	b.n	ca28 <__mdiff+0x5c>
    ca1a:	2d00      	cmp	r5, #0
    ca1c:	db6a      	blt.n	caf4 <__mdiff+0x128>
    ca1e:	4647      	mov	r7, r8
    ca20:	0026      	movs	r6, r4
    ca22:	2500      	movs	r5, #0
    ca24:	3714      	adds	r7, #20
    ca26:	3614      	adds	r6, #20
    ca28:	4643      	mov	r3, r8
    ca2a:	6859      	ldr	r1, [r3, #4]
    ca2c:	f7ff fd36 	bl	c49c <_Balloc>
    ca30:	4643      	mov	r3, r8
    ca32:	4681      	mov	r9, r0
    ca34:	60c5      	str	r5, [r0, #12]
    ca36:	6918      	ldr	r0, [r3, #16]
    ca38:	464d      	mov	r5, r9
    ca3a:	0083      	lsls	r3, r0, #2
    ca3c:	469c      	mov	ip, r3
    ca3e:	6923      	ldr	r3, [r4, #16]
    ca40:	44bc      	add	ip, r7
    ca42:	009b      	lsls	r3, r3, #2
    ca44:	4698      	mov	r8, r3
    ca46:	2300      	movs	r3, #0
    ca48:	44b0      	add	r8, r6
    ca4a:	3514      	adds	r5, #20
    ca4c:	469a      	mov	sl, r3
    ca4e:	e000      	b.n	ca52 <__mdiff+0x86>
    ca50:	0027      	movs	r7, r4
    ca52:	ce04      	ldmia	r6!, {r2}
    ca54:	003c      	movs	r4, r7
    ca56:	4693      	mov	fp, r2
    ca58:	4659      	mov	r1, fp
    ca5a:	cc08      	ldmia	r4!, {r3}
    ca5c:	0409      	lsls	r1, r1, #16
    ca5e:	041a      	lsls	r2, r3, #16
    ca60:	0c12      	lsrs	r2, r2, #16
    ca62:	4452      	add	r2, sl
    ca64:	0c09      	lsrs	r1, r1, #16
    ca66:	1a52      	subs	r2, r2, r1
    ca68:	0c19      	lsrs	r1, r3, #16
    ca6a:	465b      	mov	r3, fp
    ca6c:	0c1b      	lsrs	r3, r3, #16
    ca6e:	1acb      	subs	r3, r1, r3
    ca70:	1411      	asrs	r1, r2, #16
    ca72:	185b      	adds	r3, r3, r1
    ca74:	0412      	lsls	r2, r2, #16
    ca76:	1419      	asrs	r1, r3, #16
    ca78:	0c12      	lsrs	r2, r2, #16
    ca7a:	041b      	lsls	r3, r3, #16
    ca7c:	468a      	mov	sl, r1
    ca7e:	4313      	orrs	r3, r2
    ca80:	1d29      	adds	r1, r5, #4
    ca82:	602b      	str	r3, [r5, #0]
    ca84:	000d      	movs	r5, r1
    ca86:	45b0      	cmp	r8, r6
    ca88:	d8e2      	bhi.n	ca50 <__mdiff+0x84>
    ca8a:	45a4      	cmp	ip, r4
    ca8c:	d916      	bls.n	cabc <__mdiff+0xf0>
    ca8e:	cc08      	ldmia	r4!, {r3}
    ca90:	041a      	lsls	r2, r3, #16
    ca92:	0c12      	lsrs	r2, r2, #16
    ca94:	4452      	add	r2, sl
    ca96:	1416      	asrs	r6, r2, #16
    ca98:	0c1b      	lsrs	r3, r3, #16
    ca9a:	199b      	adds	r3, r3, r6
    ca9c:	0412      	lsls	r2, r2, #16
    ca9e:	141e      	asrs	r6, r3, #16
    caa0:	0c12      	lsrs	r2, r2, #16
    caa2:	041b      	lsls	r3, r3, #16
    caa4:	4313      	orrs	r3, r2
    caa6:	46b2      	mov	sl, r6
    caa8:	c508      	stmia	r5!, {r3}
    caaa:	45a4      	cmp	ip, r4
    caac:	d8ef      	bhi.n	ca8e <__mdiff+0xc2>
    caae:	4662      	mov	r2, ip
    cab0:	2403      	movs	r4, #3
    cab2:	1bd2      	subs	r2, r2, r7
    cab4:	3a05      	subs	r2, #5
    cab6:	43a2      	bics	r2, r4
    cab8:	3204      	adds	r2, #4
    caba:	1889      	adds	r1, r1, r2
    cabc:	3904      	subs	r1, #4
    cabe:	2b00      	cmp	r3, #0
    cac0:	d104      	bne.n	cacc <__mdiff+0x100>
    cac2:	3904      	subs	r1, #4
    cac4:	680b      	ldr	r3, [r1, #0]
    cac6:	3801      	subs	r0, #1
    cac8:	2b00      	cmp	r3, #0
    caca:	d0fa      	beq.n	cac2 <__mdiff+0xf6>
    cacc:	464b      	mov	r3, r9
    cace:	6118      	str	r0, [r3, #16]
    cad0:	4648      	mov	r0, r9
    cad2:	bc3c      	pop	{r2, r3, r4, r5}
    cad4:	4690      	mov	r8, r2
    cad6:	4699      	mov	r9, r3
    cad8:	46a2      	mov	sl, r4
    cada:	46ab      	mov	fp, r5
    cadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cade:	2100      	movs	r1, #0
    cae0:	f7ff fcdc 	bl	c49c <_Balloc>
    cae4:	2301      	movs	r3, #1
    cae6:	6103      	str	r3, [r0, #16]
    cae8:	2300      	movs	r3, #0
    caea:	4681      	mov	r9, r0
    caec:	6143      	str	r3, [r0, #20]
    caee:	e7ef      	b.n	cad0 <__mdiff+0x104>
    caf0:	4666      	mov	r6, ip
    caf2:	e799      	b.n	ca28 <__mdiff+0x5c>
    caf4:	0027      	movs	r7, r4
    caf6:	000e      	movs	r6, r1
    caf8:	46a0      	mov	r8, r4
    cafa:	3714      	adds	r7, #20
    cafc:	3614      	adds	r6, #20
    cafe:	000c      	movs	r4, r1
    cb00:	2501      	movs	r5, #1
    cb02:	e791      	b.n	ca28 <__mdiff+0x5c>

0000cb04 <__ulp>:
    cb04:	4b10      	ldr	r3, [pc, #64]	; (cb48 <__ulp+0x44>)
    cb06:	b510      	push	{r4, lr}
    cb08:	4019      	ands	r1, r3
    cb0a:	4b10      	ldr	r3, [pc, #64]	; (cb4c <__ulp+0x48>)
    cb0c:	469c      	mov	ip, r3
    cb0e:	4461      	add	r1, ip
    cb10:	2900      	cmp	r1, #0
    cb12:	dd04      	ble.n	cb1e <__ulp+0x1a>
    cb14:	2200      	movs	r2, #0
    cb16:	000b      	movs	r3, r1
    cb18:	0010      	movs	r0, r2
    cb1a:	0019      	movs	r1, r3
    cb1c:	bd10      	pop	{r4, pc}
    cb1e:	4249      	negs	r1, r1
    cb20:	1509      	asrs	r1, r1, #20
    cb22:	2200      	movs	r2, #0
    cb24:	2300      	movs	r3, #0
    cb26:	2913      	cmp	r1, #19
    cb28:	dd08      	ble.n	cb3c <__ulp+0x38>
    cb2a:	3914      	subs	r1, #20
    cb2c:	2001      	movs	r0, #1
    cb2e:	291e      	cmp	r1, #30
    cb30:	dc02      	bgt.n	cb38 <__ulp+0x34>
    cb32:	241f      	movs	r4, #31
    cb34:	1a61      	subs	r1, r4, r1
    cb36:	4088      	lsls	r0, r1
    cb38:	0002      	movs	r2, r0
    cb3a:	e7ed      	b.n	cb18 <__ulp+0x14>
    cb3c:	2080      	movs	r0, #128	; 0x80
    cb3e:	0300      	lsls	r0, r0, #12
    cb40:	4108      	asrs	r0, r1
    cb42:	0003      	movs	r3, r0
    cb44:	e7e8      	b.n	cb18 <__ulp+0x14>
    cb46:	46c0      	nop			; (mov r8, r8)
    cb48:	7ff00000 	.word	0x7ff00000
    cb4c:	fcc00000 	.word	0xfcc00000

0000cb50 <__b2d>:
    cb50:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb52:	464f      	mov	r7, r9
    cb54:	4646      	mov	r6, r8
    cb56:	46d6      	mov	lr, sl
    cb58:	6904      	ldr	r4, [r0, #16]
    cb5a:	b5c0      	push	{r6, r7, lr}
    cb5c:	00a4      	lsls	r4, r4, #2
    cb5e:	0006      	movs	r6, r0
    cb60:	46a1      	mov	r9, r4
    cb62:	3614      	adds	r6, #20
    cb64:	44b1      	add	r9, r6
    cb66:	464b      	mov	r3, r9
    cb68:	4688      	mov	r8, r1
    cb6a:	1f1f      	subs	r7, r3, #4
    cb6c:	683d      	ldr	r5, [r7, #0]
    cb6e:	0028      	movs	r0, r5
    cb70:	f7ff fd56 	bl	c620 <__hi0bits>
    cb74:	2120      	movs	r1, #32
    cb76:	4643      	mov	r3, r8
    cb78:	1a0a      	subs	r2, r1, r0
    cb7a:	601a      	str	r2, [r3, #0]
    cb7c:	280a      	cmp	r0, #10
    cb7e:	dc20      	bgt.n	cbc2 <__b2d+0x72>
    cb80:	3915      	subs	r1, #21
    cb82:	1a0b      	subs	r3, r1, r0
    cb84:	469a      	mov	sl, r3
    cb86:	002b      	movs	r3, r5
    cb88:	4652      	mov	r2, sl
    cb8a:	4926      	ldr	r1, [pc, #152]	; (cc24 <__b2d+0xd4>)
    cb8c:	40d3      	lsrs	r3, r2
    cb8e:	4688      	mov	r8, r1
    cb90:	0019      	movs	r1, r3
    cb92:	4644      	mov	r4, r8
    cb94:	4321      	orrs	r1, r4
    cb96:	000b      	movs	r3, r1
    cb98:	2100      	movs	r1, #0
    cb9a:	468c      	mov	ip, r1
    cb9c:	42be      	cmp	r6, r7
    cb9e:	d204      	bcs.n	cbaa <__b2d+0x5a>
    cba0:	464c      	mov	r4, r9
    cba2:	3c08      	subs	r4, #8
    cba4:	6824      	ldr	r4, [r4, #0]
    cba6:	40d4      	lsrs	r4, r2
    cba8:	46a4      	mov	ip, r4
    cbaa:	3015      	adds	r0, #21
    cbac:	4085      	lsls	r5, r0
    cbae:	4661      	mov	r1, ip
    cbb0:	4329      	orrs	r1, r5
    cbb2:	000a      	movs	r2, r1
    cbb4:	0010      	movs	r0, r2
    cbb6:	0019      	movs	r1, r3
    cbb8:	bc1c      	pop	{r2, r3, r4}
    cbba:	4690      	mov	r8, r2
    cbbc:	4699      	mov	r9, r3
    cbbe:	46a2      	mov	sl, r4
    cbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cbc2:	42be      	cmp	r6, r7
    cbc4:	d21b      	bcs.n	cbfe <__b2d+0xae>
    cbc6:	2308      	movs	r3, #8
    cbc8:	425b      	negs	r3, r3
    cbca:	469c      	mov	ip, r3
    cbcc:	44cc      	add	ip, r9
    cbce:	4663      	mov	r3, ip
    cbd0:	380b      	subs	r0, #11
    cbd2:	681f      	ldr	r7, [r3, #0]
    cbd4:	2800      	cmp	r0, #0
    cbd6:	d016      	beq.n	cc06 <__b2d+0xb6>
    cbd8:	4085      	lsls	r5, r0
    cbda:	4b12      	ldr	r3, [pc, #72]	; (cc24 <__b2d+0xd4>)
    cbdc:	1a09      	subs	r1, r1, r0
    cbde:	431d      	orrs	r5, r3
    cbe0:	003b      	movs	r3, r7
    cbe2:	40cb      	lsrs	r3, r1
    cbe4:	001c      	movs	r4, r3
    cbe6:	432c      	orrs	r4, r5
    cbe8:	0023      	movs	r3, r4
    cbea:	4566      	cmp	r6, ip
    cbec:	d217      	bcs.n	cc1e <__b2d+0xce>
    cbee:	464c      	mov	r4, r9
    cbf0:	3c0c      	subs	r4, #12
    cbf2:	6824      	ldr	r4, [r4, #0]
    cbf4:	4087      	lsls	r7, r0
    cbf6:	40cc      	lsrs	r4, r1
    cbf8:	4327      	orrs	r7, r4
    cbfa:	003a      	movs	r2, r7
    cbfc:	e7da      	b.n	cbb4 <__b2d+0x64>
    cbfe:	380b      	subs	r0, #11
    cc00:	2700      	movs	r7, #0
    cc02:	2800      	cmp	r0, #0
    cc04:	d104      	bne.n	cc10 <__b2d+0xc0>
    cc06:	4907      	ldr	r1, [pc, #28]	; (cc24 <__b2d+0xd4>)
    cc08:	003a      	movs	r2, r7
    cc0a:	4329      	orrs	r1, r5
    cc0c:	000b      	movs	r3, r1
    cc0e:	e7d1      	b.n	cbb4 <__b2d+0x64>
    cc10:	4085      	lsls	r5, r0
    cc12:	2700      	movs	r7, #0
    cc14:	4903      	ldr	r1, [pc, #12]	; (cc24 <__b2d+0xd4>)
    cc16:	003a      	movs	r2, r7
    cc18:	4329      	orrs	r1, r5
    cc1a:	000b      	movs	r3, r1
    cc1c:	e7ca      	b.n	cbb4 <__b2d+0x64>
    cc1e:	4087      	lsls	r7, r0
    cc20:	003a      	movs	r2, r7
    cc22:	e7c7      	b.n	cbb4 <__b2d+0x64>
    cc24:	3ff00000 	.word	0x3ff00000

0000cc28 <__d2b>:
    cc28:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc2a:	2101      	movs	r1, #1
    cc2c:	001c      	movs	r4, r3
    cc2e:	b083      	sub	sp, #12
    cc30:	9e08      	ldr	r6, [sp, #32]
    cc32:	0015      	movs	r5, r2
    cc34:	f7ff fc32 	bl	c49c <_Balloc>
    cc38:	0323      	lsls	r3, r4, #12
    cc3a:	0064      	lsls	r4, r4, #1
    cc3c:	0007      	movs	r7, r0
    cc3e:	0b1b      	lsrs	r3, r3, #12
    cc40:	0d64      	lsrs	r4, r4, #21
    cc42:	d002      	beq.n	cc4a <__d2b+0x22>
    cc44:	2280      	movs	r2, #128	; 0x80
    cc46:	0352      	lsls	r2, r2, #13
    cc48:	4313      	orrs	r3, r2
    cc4a:	9301      	str	r3, [sp, #4]
    cc4c:	2d00      	cmp	r5, #0
    cc4e:	d019      	beq.n	cc84 <__d2b+0x5c>
    cc50:	4668      	mov	r0, sp
    cc52:	9500      	str	r5, [sp, #0]
    cc54:	f7ff fcfe 	bl	c654 <__lo0bits>
    cc58:	2800      	cmp	r0, #0
    cc5a:	d130      	bne.n	ccbe <__d2b+0x96>
    cc5c:	9b00      	ldr	r3, [sp, #0]
    cc5e:	617b      	str	r3, [r7, #20]
    cc60:	9b01      	ldr	r3, [sp, #4]
    cc62:	61bb      	str	r3, [r7, #24]
    cc64:	1e5a      	subs	r2, r3, #1
    cc66:	4193      	sbcs	r3, r2
    cc68:	1c5d      	adds	r5, r3, #1
    cc6a:	613d      	str	r5, [r7, #16]
    cc6c:	2c00      	cmp	r4, #0
    cc6e:	d014      	beq.n	cc9a <__d2b+0x72>
    cc70:	4b19      	ldr	r3, [pc, #100]	; (ccd8 <__d2b+0xb0>)
    cc72:	469c      	mov	ip, r3
    cc74:	2335      	movs	r3, #53	; 0x35
    cc76:	4464      	add	r4, ip
    cc78:	1824      	adds	r4, r4, r0
    cc7a:	1a18      	subs	r0, r3, r0
    cc7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cc7e:	6034      	str	r4, [r6, #0]
    cc80:	6018      	str	r0, [r3, #0]
    cc82:	e019      	b.n	ccb8 <__d2b+0x90>
    cc84:	a801      	add	r0, sp, #4
    cc86:	f7ff fce5 	bl	c654 <__lo0bits>
    cc8a:	9b01      	ldr	r3, [sp, #4]
    cc8c:	3020      	adds	r0, #32
    cc8e:	617b      	str	r3, [r7, #20]
    cc90:	2301      	movs	r3, #1
    cc92:	2501      	movs	r5, #1
    cc94:	613b      	str	r3, [r7, #16]
    cc96:	2c00      	cmp	r4, #0
    cc98:	d1ea      	bne.n	cc70 <__d2b+0x48>
    cc9a:	4b10      	ldr	r3, [pc, #64]	; (ccdc <__d2b+0xb4>)
    cc9c:	469c      	mov	ip, r3
    cc9e:	4b10      	ldr	r3, [pc, #64]	; (cce0 <__d2b+0xb8>)
    cca0:	4460      	add	r0, ip
    cca2:	18eb      	adds	r3, r5, r3
    cca4:	009b      	lsls	r3, r3, #2
    cca6:	18fb      	adds	r3, r7, r3
    cca8:	6030      	str	r0, [r6, #0]
    ccaa:	6958      	ldr	r0, [r3, #20]
    ccac:	f7ff fcb8 	bl	c620 <__hi0bits>
    ccb0:	016b      	lsls	r3, r5, #5
    ccb2:	1a18      	subs	r0, r3, r0
    ccb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ccb6:	6018      	str	r0, [r3, #0]
    ccb8:	0038      	movs	r0, r7
    ccba:	b003      	add	sp, #12
    ccbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccbe:	9b01      	ldr	r3, [sp, #4]
    ccc0:	2220      	movs	r2, #32
    ccc2:	0019      	movs	r1, r3
    ccc4:	1a12      	subs	r2, r2, r0
    ccc6:	4091      	lsls	r1, r2
    ccc8:	000a      	movs	r2, r1
    ccca:	40c3      	lsrs	r3, r0
    cccc:	9900      	ldr	r1, [sp, #0]
    ccce:	9301      	str	r3, [sp, #4]
    ccd0:	430a      	orrs	r2, r1
    ccd2:	617a      	str	r2, [r7, #20]
    ccd4:	e7c5      	b.n	cc62 <__d2b+0x3a>
    ccd6:	46c0      	nop			; (mov r8, r8)
    ccd8:	fffffbcd 	.word	0xfffffbcd
    ccdc:	fffffbce 	.word	0xfffffbce
    cce0:	3fffffff 	.word	0x3fffffff

0000cce4 <__ratio>:
    cce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    cce6:	46ce      	mov	lr, r9
    cce8:	4647      	mov	r7, r8
    ccea:	b580      	push	{r7, lr}
    ccec:	b085      	sub	sp, #20
    ccee:	4688      	mov	r8, r1
    ccf0:	a902      	add	r1, sp, #8
    ccf2:	4681      	mov	r9, r0
    ccf4:	f7ff ff2c 	bl	cb50 <__b2d>
    ccf8:	0006      	movs	r6, r0
    ccfa:	000f      	movs	r7, r1
    ccfc:	4640      	mov	r0, r8
    ccfe:	a903      	add	r1, sp, #12
    cd00:	f7ff ff26 	bl	cb50 <__b2d>
    cd04:	464b      	mov	r3, r9
    cd06:	691b      	ldr	r3, [r3, #16]
    cd08:	9000      	str	r0, [sp, #0]
    cd0a:	9101      	str	r1, [sp, #4]
    cd0c:	469c      	mov	ip, r3
    cd0e:	4643      	mov	r3, r8
    cd10:	691b      	ldr	r3, [r3, #16]
    cd12:	4698      	mov	r8, r3
    cd14:	4663      	mov	r3, ip
    cd16:	4642      	mov	r2, r8
    cd18:	1a9b      	subs	r3, r3, r2
    cd1a:	015b      	lsls	r3, r3, #5
    cd1c:	469c      	mov	ip, r3
    cd1e:	9a03      	ldr	r2, [sp, #12]
    cd20:	9b02      	ldr	r3, [sp, #8]
    cd22:	1a9b      	subs	r3, r3, r2
    cd24:	4698      	mov	r8, r3
    cd26:	44c4      	add	ip, r8
    cd28:	4663      	mov	r3, ip
    cd2a:	2b00      	cmp	r3, #0
    cd2c:	dd0d      	ble.n	cd4a <__ratio+0x66>
    cd2e:	051b      	lsls	r3, r3, #20
    cd30:	19dd      	adds	r5, r3, r7
    cd32:	002f      	movs	r7, r5
    cd34:	0002      	movs	r2, r0
    cd36:	000b      	movs	r3, r1
    cd38:	0030      	movs	r0, r6
    cd3a:	0039      	movs	r1, r7
    cd3c:	f7f9 fbb8 	bl	64b0 <__aeabi_ddiv>
    cd40:	b005      	add	sp, #20
    cd42:	bc0c      	pop	{r2, r3}
    cd44:	4690      	mov	r8, r2
    cd46:	4699      	mov	r9, r3
    cd48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cd4a:	4663      	mov	r3, ip
    cd4c:	0518      	lsls	r0, r3, #20
    cd4e:	1a0b      	subs	r3, r1, r0
    cd50:	9301      	str	r3, [sp, #4]
    cd52:	9800      	ldr	r0, [sp, #0]
    cd54:	9901      	ldr	r1, [sp, #4]
    cd56:	e7ed      	b.n	cd34 <__ratio+0x50>

0000cd58 <__copybits>:
    cd58:	0013      	movs	r3, r2
    cd5a:	b570      	push	{r4, r5, r6, lr}
    cd5c:	1e4c      	subs	r4, r1, #1
    cd5e:	6911      	ldr	r1, [r2, #16]
    cd60:	1164      	asrs	r4, r4, #5
    cd62:	3401      	adds	r4, #1
    cd64:	3314      	adds	r3, #20
    cd66:	0089      	lsls	r1, r1, #2
    cd68:	00a4      	lsls	r4, r4, #2
    cd6a:	1859      	adds	r1, r3, r1
    cd6c:	1904      	adds	r4, r0, r4
    cd6e:	428b      	cmp	r3, r1
    cd70:	d20b      	bcs.n	cd8a <__copybits+0x32>
    cd72:	0005      	movs	r5, r0
    cd74:	cb40      	ldmia	r3!, {r6}
    cd76:	c540      	stmia	r5!, {r6}
    cd78:	4299      	cmp	r1, r3
    cd7a:	d8fb      	bhi.n	cd74 <__copybits+0x1c>
    cd7c:	2303      	movs	r3, #3
    cd7e:	3218      	adds	r2, #24
    cd80:	1a9a      	subs	r2, r3, r2
    cd82:	1889      	adds	r1, r1, r2
    cd84:	4399      	bics	r1, r3
    cd86:	3104      	adds	r1, #4
    cd88:	1840      	adds	r0, r0, r1
    cd8a:	2300      	movs	r3, #0
    cd8c:	4284      	cmp	r4, r0
    cd8e:	d902      	bls.n	cd96 <__copybits+0x3e>
    cd90:	c008      	stmia	r0!, {r3}
    cd92:	4284      	cmp	r4, r0
    cd94:	d8fc      	bhi.n	cd90 <__copybits+0x38>
    cd96:	bd70      	pop	{r4, r5, r6, pc}

0000cd98 <__any_on>:
    cd98:	0002      	movs	r2, r0
    cd9a:	6903      	ldr	r3, [r0, #16]
    cd9c:	b510      	push	{r4, lr}
    cd9e:	3214      	adds	r2, #20
    cda0:	1148      	asrs	r0, r1, #5
    cda2:	4283      	cmp	r3, r0
    cda4:	da0f      	bge.n	cdc6 <__any_on+0x2e>
    cda6:	009b      	lsls	r3, r3, #2
    cda8:	18d3      	adds	r3, r2, r3
    cdaa:	429a      	cmp	r2, r3
    cdac:	d221      	bcs.n	cdf2 <__any_on+0x5a>
    cdae:	3b04      	subs	r3, #4
    cdb0:	6818      	ldr	r0, [r3, #0]
    cdb2:	2800      	cmp	r0, #0
    cdb4:	d004      	beq.n	cdc0 <__any_on+0x28>
    cdb6:	e01a      	b.n	cdee <__any_on+0x56>
    cdb8:	3b04      	subs	r3, #4
    cdba:	6819      	ldr	r1, [r3, #0]
    cdbc:	2900      	cmp	r1, #0
    cdbe:	d116      	bne.n	cdee <__any_on+0x56>
    cdc0:	429a      	cmp	r2, r3
    cdc2:	d3f9      	bcc.n	cdb8 <__any_on+0x20>
    cdc4:	bd10      	pop	{r4, pc}
    cdc6:	4283      	cmp	r3, r0
    cdc8:	dd0e      	ble.n	cde8 <__any_on+0x50>
    cdca:	231f      	movs	r3, #31
    cdcc:	4019      	ands	r1, r3
    cdce:	0083      	lsls	r3, r0, #2
    cdd0:	18d3      	adds	r3, r2, r3
    cdd2:	2900      	cmp	r1, #0
    cdd4:	d0e9      	beq.n	cdaa <__any_on+0x12>
    cdd6:	681c      	ldr	r4, [r3, #0]
    cdd8:	0020      	movs	r0, r4
    cdda:	40c8      	lsrs	r0, r1
    cddc:	4088      	lsls	r0, r1
    cdde:	0001      	movs	r1, r0
    cde0:	2001      	movs	r0, #1
    cde2:	428c      	cmp	r4, r1
    cde4:	d1ee      	bne.n	cdc4 <__any_on+0x2c>
    cde6:	e7e0      	b.n	cdaa <__any_on+0x12>
    cde8:	0083      	lsls	r3, r0, #2
    cdea:	18d3      	adds	r3, r2, r3
    cdec:	e7dd      	b.n	cdaa <__any_on+0x12>
    cdee:	2001      	movs	r0, #1
    cdf0:	e7e8      	b.n	cdc4 <__any_on+0x2c>
    cdf2:	2000      	movs	r0, #0
    cdf4:	e7e6      	b.n	cdc4 <__any_on+0x2c>
    cdf6:	46c0      	nop			; (mov r8, r8)

0000cdf8 <_sbrk_r>:
    cdf8:	2300      	movs	r3, #0
    cdfa:	b570      	push	{r4, r5, r6, lr}
    cdfc:	4c06      	ldr	r4, [pc, #24]	; (ce18 <_sbrk_r+0x20>)
    cdfe:	0005      	movs	r5, r0
    ce00:	0008      	movs	r0, r1
    ce02:	6023      	str	r3, [r4, #0]
    ce04:	f7f3 feb4 	bl	b70 <_sbrk>
    ce08:	1c43      	adds	r3, r0, #1
    ce0a:	d000      	beq.n	ce0e <_sbrk_r+0x16>
    ce0c:	bd70      	pop	{r4, r5, r6, pc}
    ce0e:	6823      	ldr	r3, [r4, #0]
    ce10:	2b00      	cmp	r3, #0
    ce12:	d0fb      	beq.n	ce0c <_sbrk_r+0x14>
    ce14:	602b      	str	r3, [r5, #0]
    ce16:	e7f9      	b.n	ce0c <_sbrk_r+0x14>
    ce18:	200017d0 	.word	0x200017d0

0000ce1c <__sccl>:
    ce1c:	b570      	push	{r4, r5, r6, lr}
    ce1e:	780c      	ldrb	r4, [r1, #0]
    ce20:	2c5e      	cmp	r4, #94	; 0x5e
    ce22:	d028      	beq.n	ce76 <__sccl+0x5a>
    ce24:	1c4e      	adds	r6, r1, #1
    ce26:	2500      	movs	r5, #0
    ce28:	2100      	movs	r1, #0
    ce2a:	0003      	movs	r3, r0
    ce2c:	1c42      	adds	r2, r0, #1
    ce2e:	32ff      	adds	r2, #255	; 0xff
    ce30:	7019      	strb	r1, [r3, #0]
    ce32:	3301      	adds	r3, #1
    ce34:	429a      	cmp	r2, r3
    ce36:	d1fb      	bne.n	ce30 <__sccl+0x14>
    ce38:	1e71      	subs	r1, r6, #1
    ce3a:	2c00      	cmp	r4, #0
    ce3c:	d00e      	beq.n	ce5c <__sccl+0x40>
    ce3e:	2301      	movs	r3, #1
    ce40:	406b      	eors	r3, r5
    ce42:	5503      	strb	r3, [r0, r4]
    ce44:	7832      	ldrb	r2, [r6, #0]
    ce46:	1c71      	adds	r1, r6, #1
    ce48:	2a2d      	cmp	r2, #45	; 0x2d
    ce4a:	d009      	beq.n	ce60 <__sccl+0x44>
    ce4c:	2a5d      	cmp	r2, #93	; 0x5d
    ce4e:	d005      	beq.n	ce5c <__sccl+0x40>
    ce50:	2a00      	cmp	r2, #0
    ce52:	d002      	beq.n	ce5a <__sccl+0x3e>
    ce54:	0014      	movs	r4, r2
    ce56:	000e      	movs	r6, r1
    ce58:	e7f3      	b.n	ce42 <__sccl+0x26>
    ce5a:	0031      	movs	r1, r6
    ce5c:	0008      	movs	r0, r1
    ce5e:	bd70      	pop	{r4, r5, r6, pc}
    ce60:	7872      	ldrb	r2, [r6, #1]
    ce62:	2a5d      	cmp	r2, #93	; 0x5d
    ce64:	d00c      	beq.n	ce80 <__sccl+0x64>
    ce66:	4294      	cmp	r4, r2
    ce68:	dc0a      	bgt.n	ce80 <__sccl+0x64>
    ce6a:	3602      	adds	r6, #2
    ce6c:	3401      	adds	r4, #1
    ce6e:	5503      	strb	r3, [r0, r4]
    ce70:	42a2      	cmp	r2, r4
    ce72:	dcfb      	bgt.n	ce6c <__sccl+0x50>
    ce74:	e7e6      	b.n	ce44 <__sccl+0x28>
    ce76:	1c8e      	adds	r6, r1, #2
    ce78:	784c      	ldrb	r4, [r1, #1]
    ce7a:	2501      	movs	r5, #1
    ce7c:	2101      	movs	r1, #1
    ce7e:	e7d4      	b.n	ce2a <__sccl+0xe>
    ce80:	242d      	movs	r4, #45	; 0x2d
    ce82:	000e      	movs	r6, r1
    ce84:	e7dd      	b.n	ce42 <__sccl+0x26>
    ce86:	46c0      	nop			; (mov r8, r8)

0000ce88 <nanf>:
    ce88:	4800      	ldr	r0, [pc, #0]	; (ce8c <nanf+0x4>)
    ce8a:	4770      	bx	lr
    ce8c:	7fc00000 	.word	0x7fc00000

0000ce90 <sprintf>:
    ce90:	b40e      	push	{r1, r2, r3}
    ce92:	b510      	push	{r4, lr}
    ce94:	b09d      	sub	sp, #116	; 0x74
    ce96:	a902      	add	r1, sp, #8
    ce98:	9002      	str	r0, [sp, #8]
    ce9a:	6108      	str	r0, [r1, #16]
    ce9c:	480b      	ldr	r0, [pc, #44]	; (cecc <sprintf+0x3c>)
    ce9e:	2482      	movs	r4, #130	; 0x82
    cea0:	6088      	str	r0, [r1, #8]
    cea2:	6148      	str	r0, [r1, #20]
    cea4:	2001      	movs	r0, #1
    cea6:	4240      	negs	r0, r0
    cea8:	ab1f      	add	r3, sp, #124	; 0x7c
    ceaa:	81c8      	strh	r0, [r1, #14]
    ceac:	4808      	ldr	r0, [pc, #32]	; (ced0 <sprintf+0x40>)
    ceae:	cb04      	ldmia	r3!, {r2}
    ceb0:	00a4      	lsls	r4, r4, #2
    ceb2:	6800      	ldr	r0, [r0, #0]
    ceb4:	9301      	str	r3, [sp, #4]
    ceb6:	818c      	strh	r4, [r1, #12]
    ceb8:	f7fb fbac 	bl	8614 <_svfprintf_r>
    cebc:	2300      	movs	r3, #0
    cebe:	9a02      	ldr	r2, [sp, #8]
    cec0:	7013      	strb	r3, [r2, #0]
    cec2:	b01d      	add	sp, #116	; 0x74
    cec4:	bc10      	pop	{r4}
    cec6:	bc08      	pop	{r3}
    cec8:	b003      	add	sp, #12
    ceca:	4718      	bx	r3
    cecc:	7fffffff 	.word	0x7fffffff
    ced0:	20000080 	.word	0x20000080

0000ced4 <sulp>:
    ced4:	b570      	push	{r4, r5, r6, lr}
    ced6:	0016      	movs	r6, r2
    ced8:	000d      	movs	r5, r1
    ceda:	f7ff fe13 	bl	cb04 <__ulp>
    cede:	2e00      	cmp	r6, #0
    cee0:	d00d      	beq.n	cefe <sulp+0x2a>
    cee2:	236b      	movs	r3, #107	; 0x6b
    cee4:	006a      	lsls	r2, r5, #1
    cee6:	0d52      	lsrs	r2, r2, #21
    cee8:	1a9b      	subs	r3, r3, r2
    ceea:	2b00      	cmp	r3, #0
    ceec:	dd07      	ble.n	cefe <sulp+0x2a>
    ceee:	2400      	movs	r4, #0
    cef0:	4a03      	ldr	r2, [pc, #12]	; (cf00 <sulp+0x2c>)
    cef2:	051b      	lsls	r3, r3, #20
    cef4:	189d      	adds	r5, r3, r2
    cef6:	002b      	movs	r3, r5
    cef8:	0022      	movs	r2, r4
    cefa:	f7f9 fe0d 	bl	6b18 <__aeabi_dmul>
    cefe:	bd70      	pop	{r4, r5, r6, pc}
    cf00:	3ff00000 	.word	0x3ff00000

0000cf04 <_strtod_l>:
    cf04:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf06:	46de      	mov	lr, fp
    cf08:	4657      	mov	r7, sl
    cf0a:	464e      	mov	r6, r9
    cf0c:	4645      	mov	r5, r8
    cf0e:	b5e0      	push	{r5, r6, r7, lr}
    cf10:	001d      	movs	r5, r3
    cf12:	2300      	movs	r3, #0
    cf14:	b0a3      	sub	sp, #140	; 0x8c
    cf16:	9009      	str	r0, [sp, #36]	; 0x24
    cf18:	0028      	movs	r0, r5
    cf1a:	000e      	movs	r6, r1
    cf1c:	931e      	str	r3, [sp, #120]	; 0x78
    cf1e:	4693      	mov	fp, r2
    cf20:	f7fe ff5c 	bl	bddc <__localeconv_l>
    cf24:	0007      	movs	r7, r0
    cf26:	6800      	ldr	r0, [r0, #0]
    cf28:	f7fb f832 	bl	7f90 <strlen>
    cf2c:	2400      	movs	r4, #0
    cf2e:	2300      	movs	r3, #0
    cf30:	9304      	str	r3, [sp, #16]
    cf32:	9405      	str	r4, [sp, #20]
    cf34:	0033      	movs	r3, r6
    cf36:	961d      	str	r6, [sp, #116]	; 0x74
    cf38:	781c      	ldrb	r4, [r3, #0]
    cf3a:	9008      	str	r0, [sp, #32]
    cf3c:	49c4      	ldr	r1, [pc, #784]	; (d250 <_strtod_l+0x34c>)
    cf3e:	2c2d      	cmp	r4, #45	; 0x2d
    cf40:	d900      	bls.n	cf44 <_strtod_l+0x40>
    cf42:	e070      	b.n	d026 <_strtod_l+0x122>
    cf44:	00a2      	lsls	r2, r4, #2
    cf46:	588a      	ldr	r2, [r1, r2]
    cf48:	4697      	mov	pc, r2
    cf4a:	4689      	mov	r9, r1
    cf4c:	0014      	movs	r4, r2
    cf4e:	6839      	ldr	r1, [r7, #0]
    cf50:	9a08      	ldr	r2, [sp, #32]
    cf52:	4698      	mov	r8, r3
    cf54:	f002 f9e0 	bl	f318 <strncmp>
    cf58:	2800      	cmp	r0, #0
    cf5a:	d100      	bne.n	cf5e <_strtod_l+0x5a>
    cf5c:	e084      	b.n	d068 <_strtod_l+0x164>
    cf5e:	2200      	movs	r2, #0
    cf60:	2300      	movs	r3, #0
    cf62:	2000      	movs	r0, #0
    cf64:	950a      	str	r5, [sp, #40]	; 0x28
    cf66:	9208      	str	r2, [sp, #32]
    cf68:	2220      	movs	r2, #32
    cf6a:	0021      	movs	r1, r4
    cf6c:	4391      	bics	r1, r2
    cf6e:	2200      	movs	r2, #0
    cf70:	2945      	cmp	r1, #69	; 0x45
    cf72:	d100      	bne.n	cf76 <_strtod_l+0x72>
    cf74:	e0a6      	b.n	d0c4 <_strtod_l+0x1c0>
    cf76:	2d00      	cmp	r5, #0
    cf78:	d000      	beq.n	cf7c <_strtod_l+0x78>
    cf7a:	e104      	b.n	d186 <_strtod_l+0x282>
    cf7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cf7e:	4313      	orrs	r3, r2
    cf80:	d000      	beq.n	cf84 <_strtod_l+0x80>
    cf82:	e0f8      	b.n	d176 <_strtod_l+0x272>
    cf84:	9b08      	ldr	r3, [sp, #32]
    cf86:	2b00      	cmp	r3, #0
    cf88:	d100      	bne.n	cf8c <_strtod_l+0x88>
    cf8a:	e13d      	b.n	d208 <_strtod_l+0x304>
    cf8c:	465b      	mov	r3, fp
    cf8e:	2400      	movs	r4, #0
    cf90:	2500      	movs	r5, #0
    cf92:	2b00      	cmp	r3, #0
    cf94:	d006      	beq.n	cfa4 <_strtod_l+0xa0>
    cf96:	2300      	movs	r3, #0
    cf98:	9307      	str	r3, [sp, #28]
    cf9a:	465b      	mov	r3, fp
    cf9c:	601e      	str	r6, [r3, #0]
    cf9e:	9b07      	ldr	r3, [sp, #28]
    cfa0:	2b00      	cmp	r3, #0
    cfa2:	d108      	bne.n	cfb6 <_strtod_l+0xb2>
    cfa4:	0020      	movs	r0, r4
    cfa6:	0029      	movs	r1, r5
    cfa8:	b023      	add	sp, #140	; 0x8c
    cfaa:	bc3c      	pop	{r2, r3, r4, r5}
    cfac:	4690      	mov	r8, r2
    cfae:	4699      	mov	r9, r3
    cfb0:	46a2      	mov	sl, r4
    cfb2:	46ab      	mov	fp, r5
    cfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfb6:	2180      	movs	r1, #128	; 0x80
    cfb8:	0609      	lsls	r1, r1, #24
    cfba:	186b      	adds	r3, r5, r1
    cfbc:	001d      	movs	r5, r3
    cfbe:	e7f1      	b.n	cfa4 <_strtod_l+0xa0>
    cfc0:	2200      	movs	r2, #0
    cfc2:	9207      	str	r2, [sp, #28]
    cfc4:	1c5a      	adds	r2, r3, #1
    cfc6:	921d      	str	r2, [sp, #116]	; 0x74
    cfc8:	785c      	ldrb	r4, [r3, #1]
    cfca:	4692      	mov	sl, r2
    cfcc:	2c00      	cmp	r4, #0
    cfce:	d0dd      	beq.n	cf8c <_strtod_l+0x88>
    cfd0:	2300      	movs	r3, #0
    cfd2:	930c      	str	r3, [sp, #48]	; 0x30
    cfd4:	2c30      	cmp	r4, #48	; 0x30
    cfd6:	d02d      	beq.n	d034 <_strtod_l+0x130>
    cfd8:	0023      	movs	r3, r4
    cfda:	3b30      	subs	r3, #48	; 0x30
    cfdc:	2b09      	cmp	r3, #9
    cfde:	d900      	bls.n	cfe2 <_strtod_l+0xde>
    cfe0:	e38c      	b.n	d6fc <_strtod_l+0x7f8>
    cfe2:	2300      	movs	r3, #0
    cfe4:	4650      	mov	r0, sl
    cfe6:	2500      	movs	r5, #0
    cfe8:	0019      	movs	r1, r3
    cfea:	0022      	movs	r2, r4
    cfec:	e00c      	b.n	d008 <_strtod_l+0x104>
    cfee:	009c      	lsls	r4, r3, #2
    cff0:	18e3      	adds	r3, r4, r3
    cff2:	005b      	lsls	r3, r3, #1
    cff4:	189b      	adds	r3, r3, r2
    cff6:	3b30      	subs	r3, #48	; 0x30
    cff8:	3001      	adds	r0, #1
    cffa:	901d      	str	r0, [sp, #116]	; 0x74
    cffc:	7802      	ldrb	r2, [r0, #0]
    cffe:	3501      	adds	r5, #1
    d000:	0014      	movs	r4, r2
    d002:	3c30      	subs	r4, #48	; 0x30
    d004:	2c09      	cmp	r4, #9
    d006:	d8a0      	bhi.n	cf4a <_strtod_l+0x46>
    d008:	2d08      	cmp	r5, #8
    d00a:	ddf0      	ble.n	cfee <_strtod_l+0xea>
    d00c:	008c      	lsls	r4, r1, #2
    d00e:	1864      	adds	r4, r4, r1
    d010:	0064      	lsls	r4, r4, #1
    d012:	18a4      	adds	r4, r4, r2
    d014:	0021      	movs	r1, r4
    d016:	3930      	subs	r1, #48	; 0x30
    d018:	e7ee      	b.n	cff8 <_strtod_l+0xf4>
    d01a:	3301      	adds	r3, #1
    d01c:	931d      	str	r3, [sp, #116]	; 0x74
    d01e:	781c      	ldrb	r4, [r3, #0]
    d020:	2c2d      	cmp	r4, #45	; 0x2d
    d022:	d800      	bhi.n	d026 <_strtod_l+0x122>
    d024:	e78e      	b.n	cf44 <_strtod_l+0x40>
    d026:	469a      	mov	sl, r3
    d028:	2300      	movs	r3, #0
    d02a:	9307      	str	r3, [sp, #28]
    d02c:	2300      	movs	r3, #0
    d02e:	930c      	str	r3, [sp, #48]	; 0x30
    d030:	2c30      	cmp	r4, #48	; 0x30
    d032:	d1d1      	bne.n	cfd8 <_strtod_l+0xd4>
    d034:	4653      	mov	r3, sl
    d036:	785b      	ldrb	r3, [r3, #1]
    d038:	2b58      	cmp	r3, #88	; 0x58
    d03a:	d100      	bne.n	d03e <_strtod_l+0x13a>
    d03c:	e334      	b.n	d6a8 <_strtod_l+0x7a4>
    d03e:	2b78      	cmp	r3, #120	; 0x78
    d040:	d100      	bne.n	d044 <_strtod_l+0x140>
    d042:	e331      	b.n	d6a8 <_strtod_l+0x7a4>
    d044:	4653      	mov	r3, sl
    d046:	3301      	adds	r3, #1
    d048:	001a      	movs	r2, r3
    d04a:	931d      	str	r3, [sp, #116]	; 0x74
    d04c:	7814      	ldrb	r4, [r2, #0]
    d04e:	3301      	adds	r3, #1
    d050:	2c30      	cmp	r4, #48	; 0x30
    d052:	d0f9      	beq.n	d048 <_strtod_l+0x144>
    d054:	4692      	mov	sl, r2
    d056:	2c00      	cmp	r4, #0
    d058:	d100      	bne.n	d05c <_strtod_l+0x158>
    d05a:	e08c      	b.n	d176 <_strtod_l+0x272>
    d05c:	2301      	movs	r3, #1
    d05e:	930c      	str	r3, [sp, #48]	; 0x30
    d060:	e7ba      	b.n	cfd8 <_strtod_l+0xd4>
    d062:	2201      	movs	r2, #1
    d064:	9207      	str	r2, [sp, #28]
    d066:	e7ad      	b.n	cfc4 <_strtod_l+0xc0>
    d068:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    d06a:	9b08      	ldr	r3, [sp, #32]
    d06c:	4694      	mov	ip, r2
    d06e:	4463      	add	r3, ip
    d070:	931d      	str	r3, [sp, #116]	; 0x74
    d072:	781c      	ldrb	r4, [r3, #0]
    d074:	2300      	movs	r3, #0
    d076:	950a      	str	r5, [sp, #40]	; 0x28
    d078:	0022      	movs	r2, r4
    d07a:	3a30      	subs	r2, #48	; 0x30
    d07c:	2a09      	cmp	r2, #9
    d07e:	d900      	bls.n	d082 <_strtod_l+0x17e>
    d080:	e0e2      	b.n	d248 <_strtod_l+0x344>
    d082:	1c5c      	adds	r4, r3, #1
    d084:	4694      	mov	ip, r2
    d086:	2a00      	cmp	r2, #0
    d088:	d101      	bne.n	d08e <_strtod_l+0x18a>
    d08a:	f000 fe76 	bl	dd7a <_strtod_l+0xe76>
    d08e:	1900      	adds	r0, r0, r4
    d090:	195b      	adds	r3, r3, r5
    d092:	2c01      	cmp	r4, #1
    d094:	d101      	bne.n	d09a <_strtod_l+0x196>
    d096:	f000 fe6c 	bl	dd72 <_strtod_l+0xe6e>
    d09a:	4644      	mov	r4, r8
    d09c:	e007      	b.n	d0ae <_strtod_l+0x1aa>
    d09e:	00a1      	lsls	r1, r4, #2
    d0a0:	190c      	adds	r4, r1, r4
    d0a2:	0064      	lsls	r4, r4, #1
    d0a4:	429f      	cmp	r7, r3
    d0a6:	d101      	bne.n	d0ac <_strtod_l+0x1a8>
    d0a8:	f000 fbef 	bl	d88a <_strtod_l+0x986>
    d0ac:	003d      	movs	r5, r7
    d0ae:	1c6f      	adds	r7, r5, #1
    d0b0:	2d08      	cmp	r5, #8
    d0b2:	ddf4      	ble.n	d09e <_strtod_l+0x19a>
    d0b4:	2f10      	cmp	r7, #16
    d0b6:	dcf5      	bgt.n	d0a4 <_strtod_l+0x1a0>
    d0b8:	4649      	mov	r1, r9
    d0ba:	0089      	lsls	r1, r1, #2
    d0bc:	4449      	add	r1, r9
    d0be:	0049      	lsls	r1, r1, #1
    d0c0:	4689      	mov	r9, r1
    d0c2:	e7ef      	b.n	d0a4 <_strtod_l+0x1a0>
    d0c4:	002a      	movs	r2, r5
    d0c6:	990c      	ldr	r1, [sp, #48]	; 0x30
    d0c8:	431a      	orrs	r2, r3
    d0ca:	430a      	orrs	r2, r1
    d0cc:	d100      	bne.n	d0d0 <_strtod_l+0x1cc>
    d0ce:	e75d      	b.n	cf8c <_strtod_l+0x88>
    d0d0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    d0d2:	1c72      	adds	r2, r6, #1
    d0d4:	921d      	str	r2, [sp, #116]	; 0x74
    d0d6:	7874      	ldrb	r4, [r6, #1]
    d0d8:	2c2b      	cmp	r4, #43	; 0x2b
    d0da:	d100      	bne.n	d0de <_strtod_l+0x1da>
    d0dc:	e39a      	b.n	d814 <_strtod_l+0x910>
    d0de:	2c2d      	cmp	r4, #45	; 0x2d
    d0e0:	d100      	bne.n	d0e4 <_strtod_l+0x1e0>
    d0e2:	e230      	b.n	d546 <_strtod_l+0x642>
    d0e4:	2200      	movs	r2, #0
    d0e6:	920d      	str	r2, [sp, #52]	; 0x34
    d0e8:	0022      	movs	r2, r4
    d0ea:	3a30      	subs	r2, #48	; 0x30
    d0ec:	2a09      	cmp	r2, #9
    d0ee:	d900      	bls.n	d0f2 <_strtod_l+0x1ee>
    d0f0:	e2f5      	b.n	d6de <_strtod_l+0x7da>
    d0f2:	2c30      	cmp	r4, #48	; 0x30
    d0f4:	d106      	bne.n	d104 <_strtod_l+0x200>
    d0f6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    d0f8:	3201      	adds	r2, #1
    d0fa:	921d      	str	r2, [sp, #116]	; 0x74
    d0fc:	7814      	ldrb	r4, [r2, #0]
    d0fe:	3201      	adds	r2, #1
    d100:	2c30      	cmp	r4, #48	; 0x30
    d102:	d0fa      	beq.n	d0fa <_strtod_l+0x1f6>
    d104:	0021      	movs	r1, r4
    d106:	3931      	subs	r1, #49	; 0x31
    d108:	2200      	movs	r2, #0
    d10a:	2908      	cmp	r1, #8
    d10c:	d900      	bls.n	d110 <_strtod_l+0x20c>
    d10e:	e732      	b.n	cf76 <_strtod_l+0x72>
    d110:	991d      	ldr	r1, [sp, #116]	; 0x74
    d112:	0022      	movs	r2, r4
    d114:	1c4c      	adds	r4, r1, #1
    d116:	941d      	str	r4, [sp, #116]	; 0x74
    d118:	46a4      	mov	ip, r4
    d11a:	784c      	ldrb	r4, [r1, #1]
    d11c:	000f      	movs	r7, r1
    d11e:	910e      	str	r1, [sp, #56]	; 0x38
    d120:	0021      	movs	r1, r4
    d122:	3930      	subs	r1, #48	; 0x30
    d124:	3a30      	subs	r2, #48	; 0x30
    d126:	2909      	cmp	r1, #9
    d128:	d815      	bhi.n	d156 <_strtod_l+0x252>
    d12a:	0039      	movs	r1, r7
    d12c:	469c      	mov	ip, r3
    d12e:	0027      	movs	r7, r4
    d130:	3102      	adds	r1, #2
    d132:	0094      	lsls	r4, r2, #2
    d134:	18a4      	adds	r4, r4, r2
    d136:	911d      	str	r1, [sp, #116]	; 0x74
    d138:	0064      	lsls	r4, r4, #1
    d13a:	19e4      	adds	r4, r4, r7
    d13c:	780f      	ldrb	r7, [r1, #0]
    d13e:	0022      	movs	r2, r4
    d140:	003c      	movs	r4, r7
    d142:	3c30      	subs	r4, #48	; 0x30
    d144:	000b      	movs	r3, r1
    d146:	3a30      	subs	r2, #48	; 0x30
    d148:	3101      	adds	r1, #1
    d14a:	2c09      	cmp	r4, #9
    d14c:	d9f1      	bls.n	d132 <_strtod_l+0x22e>
    d14e:	0019      	movs	r1, r3
    d150:	003c      	movs	r4, r7
    d152:	4663      	mov	r3, ip
    d154:	468c      	mov	ip, r1
    d156:	4661      	mov	r1, ip
    d158:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    d15a:	1bc9      	subs	r1, r1, r7
    d15c:	2908      	cmp	r1, #8
    d15e:	dd00      	ble.n	d162 <_strtod_l+0x25e>
    d160:	e256      	b.n	d610 <_strtod_l+0x70c>
    d162:	493c      	ldr	r1, [pc, #240]	; (d254 <_strtod_l+0x350>)
    d164:	428a      	cmp	r2, r1
    d166:	dd00      	ble.n	d16a <_strtod_l+0x266>
    d168:	e252      	b.n	d610 <_strtod_l+0x70c>
    d16a:	990d      	ldr	r1, [sp, #52]	; 0x34
    d16c:	2900      	cmp	r1, #0
    d16e:	d100      	bne.n	d172 <_strtod_l+0x26e>
    d170:	e701      	b.n	cf76 <_strtod_l+0x72>
    d172:	4252      	negs	r2, r2
    d174:	e6ff      	b.n	cf76 <_strtod_l+0x72>
    d176:	2400      	movs	r4, #0
    d178:	2500      	movs	r5, #0
    d17a:	465b      	mov	r3, fp
    d17c:	2b00      	cmp	r3, #0
    d17e:	d100      	bne.n	d182 <_strtod_l+0x27e>
    d180:	e70d      	b.n	cf9e <_strtod_l+0x9a>
    d182:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    d184:	e709      	b.n	cf9a <_strtod_l+0x96>
    d186:	1a13      	subs	r3, r2, r0
    d188:	9308      	str	r3, [sp, #32]
    d18a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d18c:	2b00      	cmp	r3, #0
    d18e:	d100      	bne.n	d192 <_strtod_l+0x28e>
    d190:	950a      	str	r5, [sp, #40]	; 0x28
    d192:	002c      	movs	r4, r5
    d194:	2d10      	cmp	r5, #16
    d196:	dd00      	ble.n	d19a <_strtod_l+0x296>
    d198:	2410      	movs	r4, #16
    d19a:	4640      	mov	r0, r8
    d19c:	f7fa fac8 	bl	7730 <__aeabi_ui2d>
    d1a0:	9004      	str	r0, [sp, #16]
    d1a2:	9105      	str	r1, [sp, #20]
    d1a4:	2c09      	cmp	r4, #9
    d1a6:	dd15      	ble.n	d1d4 <_strtod_l+0x2d0>
    d1a8:	0022      	movs	r2, r4
    d1aa:	4b2b      	ldr	r3, [pc, #172]	; (d258 <_strtod_l+0x354>)
    d1ac:	3a09      	subs	r2, #9
    d1ae:	00d2      	lsls	r2, r2, #3
    d1b0:	189b      	adds	r3, r3, r2
    d1b2:	681a      	ldr	r2, [r3, #0]
    d1b4:	685b      	ldr	r3, [r3, #4]
    d1b6:	f7f9 fcaf 	bl	6b18 <__aeabi_dmul>
    d1ba:	0006      	movs	r6, r0
    d1bc:	4648      	mov	r0, r9
    d1be:	000f      	movs	r7, r1
    d1c0:	f7fa fab6 	bl	7730 <__aeabi_ui2d>
    d1c4:	0002      	movs	r2, r0
    d1c6:	000b      	movs	r3, r1
    d1c8:	0030      	movs	r0, r6
    d1ca:	0039      	movs	r1, r7
    d1cc:	f7f8 fe60 	bl	5e90 <__aeabi_dadd>
    d1d0:	9004      	str	r0, [sp, #16]
    d1d2:	9105      	str	r1, [sp, #20]
    d1d4:	2d0f      	cmp	r5, #15
    d1d6:	dc45      	bgt.n	d264 <_strtod_l+0x360>
    d1d8:	9b08      	ldr	r3, [sp, #32]
    d1da:	2b00      	cmp	r3, #0
    d1dc:	d031      	beq.n	d242 <_strtod_l+0x33e>
    d1de:	9b08      	ldr	r3, [sp, #32]
    d1e0:	2b00      	cmp	r3, #0
    d1e2:	dc01      	bgt.n	d1e8 <_strtod_l+0x2e4>
    d1e4:	f000 fc69 	bl	daba <_strtod_l+0xbb6>
    d1e8:	2b16      	cmp	r3, #22
    d1ea:	dd01      	ble.n	d1f0 <_strtod_l+0x2ec>
    d1ec:	f000 fc15 	bl	da1a <_strtod_l+0xb16>
    d1f0:	4919      	ldr	r1, [pc, #100]	; (d258 <_strtod_l+0x354>)
    d1f2:	00da      	lsls	r2, r3, #3
    d1f4:	1889      	adds	r1, r1, r2
    d1f6:	6808      	ldr	r0, [r1, #0]
    d1f8:	6849      	ldr	r1, [r1, #4]
    d1fa:	9a04      	ldr	r2, [sp, #16]
    d1fc:	9b05      	ldr	r3, [sp, #20]
    d1fe:	f7f9 fc8b 	bl	6b18 <__aeabi_dmul>
    d202:	0004      	movs	r4, r0
    d204:	000d      	movs	r5, r1
    d206:	e7b8      	b.n	d17a <_strtod_l+0x276>
    d208:	2c4e      	cmp	r4, #78	; 0x4e
    d20a:	d009      	beq.n	d220 <_strtod_l+0x31c>
    d20c:	dc01      	bgt.n	d212 <_strtod_l+0x30e>
    d20e:	f000 fc2b 	bl	da68 <_strtod_l+0xb64>
    d212:	2c69      	cmp	r4, #105	; 0x69
    d214:	d101      	bne.n	d21a <_strtod_l+0x316>
    d216:	f000 fc2b 	bl	da70 <_strtod_l+0xb6c>
    d21a:	2c6e      	cmp	r4, #110	; 0x6e
    d21c:	d000      	beq.n	d220 <_strtod_l+0x31c>
    d21e:	e6b5      	b.n	cf8c <_strtod_l+0x88>
    d220:	490e      	ldr	r1, [pc, #56]	; (d25c <_strtod_l+0x358>)
    d222:	a81d      	add	r0, sp, #116	; 0x74
    d224:	f001 fd80 	bl	ed28 <__match>
    d228:	2800      	cmp	r0, #0
    d22a:	d100      	bne.n	d22e <_strtod_l+0x32a>
    d22c:	e6ae      	b.n	cf8c <_strtod_l+0x88>
    d22e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d230:	781b      	ldrb	r3, [r3, #0]
    d232:	2b28      	cmp	r3, #40	; 0x28
    d234:	d101      	bne.n	d23a <_strtod_l+0x336>
    d236:	f000 fd0d 	bl	dc54 <_strtod_l+0xd50>
    d23a:	4b09      	ldr	r3, [pc, #36]	; (d260 <_strtod_l+0x35c>)
    d23c:	9305      	str	r3, [sp, #20]
    d23e:	2300      	movs	r3, #0
    d240:	9304      	str	r3, [sp, #16]
    d242:	9c04      	ldr	r4, [sp, #16]
    d244:	9d05      	ldr	r5, [sp, #20]
    d246:	e798      	b.n	d17a <_strtod_l+0x276>
    d248:	2201      	movs	r2, #1
    d24a:	9208      	str	r2, [sp, #32]
    d24c:	e68c      	b.n	cf68 <_strtod_l+0x64>
    d24e:	46c0      	nop			; (mov r8, r8)
    d250:	000124cc 	.word	0x000124cc
    d254:	00004e1f 	.word	0x00004e1f
    d258:	000123f8 	.word	0x000123f8
    d25c:	000125a8 	.word	0x000125a8
    d260:	fff80000 	.word	0xfff80000
    d264:	9b08      	ldr	r3, [sp, #32]
    d266:	1b2c      	subs	r4, r5, r4
    d268:	469c      	mov	ip, r3
    d26a:	4464      	add	r4, ip
    d26c:	2c00      	cmp	r4, #0
    d26e:	dc00      	bgt.n	d272 <_strtod_l+0x36e>
    d270:	e31f      	b.n	d8b2 <_strtod_l+0x9ae>
    d272:	230f      	movs	r3, #15
    d274:	4023      	ands	r3, r4
    d276:	d00a      	beq.n	d28e <_strtod_l+0x38a>
    d278:	49d9      	ldr	r1, [pc, #868]	; (d5e0 <_strtod_l+0x6dc>)
    d27a:	00db      	lsls	r3, r3, #3
    d27c:	18c9      	adds	r1, r1, r3
    d27e:	6808      	ldr	r0, [r1, #0]
    d280:	6849      	ldr	r1, [r1, #4]
    d282:	9a04      	ldr	r2, [sp, #16]
    d284:	9b05      	ldr	r3, [sp, #20]
    d286:	f7f9 fc47 	bl	6b18 <__aeabi_dmul>
    d28a:	9004      	str	r0, [sp, #16]
    d28c:	9105      	str	r1, [sp, #20]
    d28e:	230f      	movs	r3, #15
    d290:	439c      	bics	r4, r3
    d292:	d000      	beq.n	d296 <_strtod_l+0x392>
    d294:	e15d      	b.n	d552 <_strtod_l+0x64e>
    d296:	2300      	movs	r3, #0
    d298:	930c      	str	r3, [sp, #48]	; 0x30
    d29a:	4643      	mov	r3, r8
    d29c:	9300      	str	r3, [sp, #0]
    d29e:	002b      	movs	r3, r5
    d2a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
    d2a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d2a4:	4651      	mov	r1, sl
    d2a6:	0028      	movs	r0, r5
    d2a8:	f7ff f970 	bl	c58c <__s2b>
    d2ac:	2800      	cmp	r0, #0
    d2ae:	d100      	bne.n	d2b2 <_strtod_l+0x3ae>
    d2b0:	e255      	b.n	d75e <_strtod_l+0x85a>
    d2b2:	9908      	ldr	r1, [sp, #32]
    d2b4:	424b      	negs	r3, r1
    d2b6:	17ca      	asrs	r2, r1, #31
    d2b8:	401a      	ands	r2, r3
    d2ba:	920e      	str	r2, [sp, #56]	; 0x38
    d2bc:	43ca      	mvns	r2, r1
    d2be:	000b      	movs	r3, r1
    d2c0:	17d2      	asrs	r2, r2, #31
    d2c2:	4013      	ands	r3, r2
    d2c4:	930d      	str	r3, [sp, #52]	; 0x34
    d2c6:	2300      	movs	r3, #0
    d2c8:	4699      	mov	r9, r3
    d2ca:	4698      	mov	r8, r3
    d2cc:	465b      	mov	r3, fp
    d2ce:	4683      	mov	fp, r0
    d2d0:	9315      	str	r3, [sp, #84]	; 0x54
    d2d2:	e0f4      	b.n	d4be <_strtod_l+0x5ba>
    d2d4:	1ac9      	subs	r1, r1, r3
    d2d6:	1a52      	subs	r2, r2, r1
    d2d8:	291f      	cmp	r1, #31
    d2da:	dd00      	ble.n	d2de <_strtod_l+0x3da>
    d2dc:	e1b5      	b.n	d64a <_strtod_l+0x746>
    d2de:	2301      	movs	r3, #1
    d2e0:	408b      	lsls	r3, r1
    d2e2:	9310      	str	r3, [sp, #64]	; 0x40
    d2e4:	2300      	movs	r3, #0
    d2e6:	9311      	str	r3, [sp, #68]	; 0x44
    d2e8:	18bb      	adds	r3, r7, r2
    d2ea:	469a      	mov	sl, r3
    d2ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d2ee:	18b6      	adds	r6, r6, r2
    d2f0:	469c      	mov	ip, r3
    d2f2:	003b      	movs	r3, r7
    d2f4:	4466      	add	r6, ip
    d2f6:	4557      	cmp	r7, sl
    d2f8:	dd00      	ble.n	d2fc <_strtod_l+0x3f8>
    d2fa:	4653      	mov	r3, sl
    d2fc:	42b3      	cmp	r3, r6
    d2fe:	dd00      	ble.n	d302 <_strtod_l+0x3fe>
    d300:	0033      	movs	r3, r6
    d302:	2b00      	cmp	r3, #0
    d304:	dd04      	ble.n	d310 <_strtod_l+0x40c>
    d306:	4652      	mov	r2, sl
    d308:	1ad2      	subs	r2, r2, r3
    d30a:	4692      	mov	sl, r2
    d30c:	1af6      	subs	r6, r6, r3
    d30e:	1aff      	subs	r7, r7, r3
    d310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d312:	2b00      	cmp	r3, #0
    d314:	d015      	beq.n	d342 <_strtod_l+0x43e>
    d316:	4641      	mov	r1, r8
    d318:	001a      	movs	r2, r3
    d31a:	0028      	movs	r0, r5
    d31c:	f7ff fa7c 	bl	c818 <__pow5mult>
    d320:	4680      	mov	r8, r0
    d322:	2800      	cmp	r0, #0
    d324:	d100      	bne.n	d328 <_strtod_l+0x424>
    d326:	e252      	b.n	d7ce <_strtod_l+0x8ca>
    d328:	0001      	movs	r1, r0
    d32a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    d32c:	0028      	movs	r0, r5
    d32e:	f7ff f9c9 	bl	c6c4 <__multiply>
    d332:	1e04      	subs	r4, r0, #0
    d334:	d100      	bne.n	d338 <_strtod_l+0x434>
    d336:	e24a      	b.n	d7ce <_strtod_l+0x8ca>
    d338:	991e      	ldr	r1, [sp, #120]	; 0x78
    d33a:	0028      	movs	r0, r5
    d33c:	f7ff f8d6 	bl	c4ec <_Bfree>
    d340:	941e      	str	r4, [sp, #120]	; 0x78
    d342:	4653      	mov	r3, sl
    d344:	2b00      	cmp	r3, #0
    d346:	dd08      	ble.n	d35a <_strtod_l+0x456>
    d348:	4652      	mov	r2, sl
    d34a:	991e      	ldr	r1, [sp, #120]	; 0x78
    d34c:	0028      	movs	r0, r5
    d34e:	f7ff fac3 	bl	c8d8 <__lshift>
    d352:	901e      	str	r0, [sp, #120]	; 0x78
    d354:	2800      	cmp	r0, #0
    d356:	d100      	bne.n	d35a <_strtod_l+0x456>
    d358:	e3c2      	b.n	dae0 <_strtod_l+0xbdc>
    d35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d35c:	2b00      	cmp	r3, #0
    d35e:	d008      	beq.n	d372 <_strtod_l+0x46e>
    d360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d362:	9908      	ldr	r1, [sp, #32]
    d364:	0028      	movs	r0, r5
    d366:	f7ff fa57 	bl	c818 <__pow5mult>
    d36a:	9008      	str	r0, [sp, #32]
    d36c:	2800      	cmp	r0, #0
    d36e:	d100      	bne.n	d372 <_strtod_l+0x46e>
    d370:	e22d      	b.n	d7ce <_strtod_l+0x8ca>
    d372:	2e00      	cmp	r6, #0
    d374:	dd08      	ble.n	d388 <_strtod_l+0x484>
    d376:	0032      	movs	r2, r6
    d378:	9908      	ldr	r1, [sp, #32]
    d37a:	0028      	movs	r0, r5
    d37c:	f7ff faac 	bl	c8d8 <__lshift>
    d380:	9008      	str	r0, [sp, #32]
    d382:	2800      	cmp	r0, #0
    d384:	d100      	bne.n	d388 <_strtod_l+0x484>
    d386:	e222      	b.n	d7ce <_strtod_l+0x8ca>
    d388:	2f00      	cmp	r7, #0
    d38a:	dd08      	ble.n	d39e <_strtod_l+0x49a>
    d38c:	4641      	mov	r1, r8
    d38e:	003a      	movs	r2, r7
    d390:	0028      	movs	r0, r5
    d392:	f7ff faa1 	bl	c8d8 <__lshift>
    d396:	4680      	mov	r8, r0
    d398:	2800      	cmp	r0, #0
    d39a:	d100      	bne.n	d39e <_strtod_l+0x49a>
    d39c:	e217      	b.n	d7ce <_strtod_l+0x8ca>
    d39e:	9a08      	ldr	r2, [sp, #32]
    d3a0:	991e      	ldr	r1, [sp, #120]	; 0x78
    d3a2:	0028      	movs	r0, r5
    d3a4:	f7ff fb12 	bl	c9cc <__mdiff>
    d3a8:	4681      	mov	r9, r0
    d3aa:	2800      	cmp	r0, #0
    d3ac:	d100      	bne.n	d3b0 <_strtod_l+0x4ac>
    d3ae:	e20e      	b.n	d7ce <_strtod_l+0x8ca>
    d3b0:	68c3      	ldr	r3, [r0, #12]
    d3b2:	4641      	mov	r1, r8
    d3b4:	930f      	str	r3, [sp, #60]	; 0x3c
    d3b6:	2300      	movs	r3, #0
    d3b8:	60c3      	str	r3, [r0, #12]
    d3ba:	f7ff faed 	bl	c998 <__mcmp>
    d3be:	2800      	cmp	r0, #0
    d3c0:	da01      	bge.n	d3c6 <_strtod_l+0x4c2>
    d3c2:	f000 fbd8 	bl	db76 <_strtod_l+0xc72>
    d3c6:	d100      	bne.n	d3ca <_strtod_l+0x4c6>
    d3c8:	e38e      	b.n	dae8 <_strtod_l+0xbe4>
    d3ca:	4641      	mov	r1, r8
    d3cc:	4648      	mov	r0, r9
    d3ce:	f7ff fc89 	bl	cce4 <__ratio>
    d3d2:	2380      	movs	r3, #128	; 0x80
    d3d4:	2200      	movs	r2, #0
    d3d6:	05db      	lsls	r3, r3, #23
    d3d8:	0006      	movs	r6, r0
    d3da:	000f      	movs	r7, r1
    d3dc:	f7fa fa52 	bl	7884 <__aeabi_dcmple>
    d3e0:	2800      	cmp	r0, #0
    d3e2:	d100      	bne.n	d3e6 <_strtod_l+0x4e2>
    d3e4:	e116      	b.n	d614 <_strtod_l+0x710>
    d3e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d100      	bne.n	d3ee <_strtod_l+0x4ea>
    d3ec:	e135      	b.n	d65a <_strtod_l+0x756>
    d3ee:	9b05      	ldr	r3, [sp, #20]
    d3f0:	2600      	movs	r6, #0
    d3f2:	9310      	str	r3, [sp, #64]	; 0x40
    d3f4:	2300      	movs	r3, #0
    d3f6:	9311      	str	r3, [sp, #68]	; 0x44
    d3f8:	4b7a      	ldr	r3, [pc, #488]	; (d5e4 <_strtod_l+0x6e0>)
    d3fa:	4f7a      	ldr	r7, [pc, #488]	; (d5e4 <_strtod_l+0x6e0>)
    d3fc:	9314      	str	r3, [sp, #80]	; 0x50
    d3fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d400:	4a79      	ldr	r2, [pc, #484]	; (d5e8 <_strtod_l+0x6e4>)
    d402:	4013      	ands	r3, r2
    d404:	469a      	mov	sl, r3
    d406:	4b79      	ldr	r3, [pc, #484]	; (d5ec <_strtod_l+0x6e8>)
    d408:	459a      	cmp	sl, r3
    d40a:	d100      	bne.n	d40e <_strtod_l+0x50a>
    d40c:	e1af      	b.n	d76e <_strtod_l+0x86a>
    d40e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d410:	2b00      	cmp	r3, #0
    d412:	d02a      	beq.n	d46a <_strtod_l+0x566>
    d414:	23d4      	movs	r3, #212	; 0xd4
    d416:	04db      	lsls	r3, r3, #19
    d418:	459a      	cmp	sl, r3
    d41a:	d826      	bhi.n	d46a <_strtod_l+0x566>
    d41c:	9c14      	ldr	r4, [sp, #80]	; 0x50
    d41e:	4a74      	ldr	r2, [pc, #464]	; (d5f0 <_strtod_l+0x6ec>)
    d420:	4b74      	ldr	r3, [pc, #464]	; (d5f4 <_strtod_l+0x6f0>)
    d422:	9811      	ldr	r0, [sp, #68]	; 0x44
    d424:	0021      	movs	r1, r4
    d426:	f7fa fa2d 	bl	7884 <__aeabi_dcmple>
    d42a:	2800      	cmp	r0, #0
    d42c:	d018      	beq.n	d460 <_strtod_l+0x55c>
    d42e:	9811      	ldr	r0, [sp, #68]	; 0x44
    d430:	0021      	movs	r1, r4
    d432:	f7f8 fb2f 	bl	5a94 <__aeabi_d2uiz>
    d436:	2800      	cmp	r0, #0
    d438:	d100      	bne.n	d43c <_strtod_l+0x538>
    d43a:	e310      	b.n	da5e <_strtod_l+0xb5a>
    d43c:	f7fa f978 	bl	7730 <__aeabi_ui2d>
    d440:	9011      	str	r0, [sp, #68]	; 0x44
    d442:	9114      	str	r1, [sp, #80]	; 0x50
    d444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d446:	2b00      	cmp	r3, #0
    d448:	d000      	beq.n	d44c <_strtod_l+0x548>
    d44a:	e303      	b.n	da54 <_strtod_l+0xb50>
    d44c:	2280      	movs	r2, #128	; 0x80
    d44e:	0612      	lsls	r2, r2, #24
    d450:	4694      	mov	ip, r2
    d452:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d454:	9318      	str	r3, [sp, #96]	; 0x60
    d456:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d458:	4463      	add	r3, ip
    d45a:	9319      	str	r3, [sp, #100]	; 0x64
    d45c:	9e18      	ldr	r6, [sp, #96]	; 0x60
    d45e:	9f19      	ldr	r7, [sp, #100]	; 0x64
    d460:	23d6      	movs	r3, #214	; 0xd6
    d462:	4652      	mov	r2, sl
    d464:	04db      	lsls	r3, r3, #19
    d466:	18fb      	adds	r3, r7, r3
    d468:	1a9f      	subs	r7, r3, r2
    d46a:	980a      	ldr	r0, [sp, #40]	; 0x28
    d46c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d46e:	f7ff fb49 	bl	cb04 <__ulp>
    d472:	0002      	movs	r2, r0
    d474:	000b      	movs	r3, r1
    d476:	0030      	movs	r0, r6
    d478:	0039      	movs	r1, r7
    d47a:	f7f9 fb4d 	bl	6b18 <__aeabi_dmul>
    d47e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d482:	f7f8 fd05 	bl	5e90 <__aeabi_dadd>
    d486:	0003      	movs	r3, r0
    d488:	000c      	movs	r4, r1
    d48a:	9304      	str	r3, [sp, #16]
    d48c:	9405      	str	r4, [sp, #20]
    d48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d490:	2b00      	cmp	r3, #0
    d492:	d104      	bne.n	d49e <_strtod_l+0x59a>
    d494:	4b54      	ldr	r3, [pc, #336]	; (d5e8 <_strtod_l+0x6e4>)
    d496:	4023      	ands	r3, r4
    d498:	459a      	cmp	sl, r3
    d49a:	d100      	bne.n	d49e <_strtod_l+0x59a>
    d49c:	e1bd      	b.n	d81a <_strtod_l+0x916>
    d49e:	991e      	ldr	r1, [sp, #120]	; 0x78
    d4a0:	0028      	movs	r0, r5
    d4a2:	f7ff f823 	bl	c4ec <_Bfree>
    d4a6:	9908      	ldr	r1, [sp, #32]
    d4a8:	0028      	movs	r0, r5
    d4aa:	f7ff f81f 	bl	c4ec <_Bfree>
    d4ae:	4641      	mov	r1, r8
    d4b0:	0028      	movs	r0, r5
    d4b2:	f7ff f81b 	bl	c4ec <_Bfree>
    d4b6:	4649      	mov	r1, r9
    d4b8:	0028      	movs	r0, r5
    d4ba:	f7ff f817 	bl	c4ec <_Bfree>
    d4be:	465b      	mov	r3, fp
    d4c0:	0028      	movs	r0, r5
    d4c2:	6859      	ldr	r1, [r3, #4]
    d4c4:	f7fe ffea 	bl	c49c <_Balloc>
    d4c8:	9008      	str	r0, [sp, #32]
    d4ca:	2800      	cmp	r0, #0
    d4cc:	d100      	bne.n	d4d0 <_strtod_l+0x5cc>
    d4ce:	e17e      	b.n	d7ce <_strtod_l+0x8ca>
    d4d0:	465a      	mov	r2, fp
    d4d2:	4659      	mov	r1, fp
    d4d4:	6912      	ldr	r2, [r2, #16]
    d4d6:	310c      	adds	r1, #12
    d4d8:	3202      	adds	r2, #2
    d4da:	0092      	lsls	r2, r2, #2
    d4dc:	300c      	adds	r0, #12
    d4de:	f7fa fb83 	bl	7be8 <memcpy>
    d4e2:	9b04      	ldr	r3, [sp, #16]
    d4e4:	9c05      	ldr	r4, [sp, #20]
    d4e6:	0019      	movs	r1, r3
    d4e8:	0022      	movs	r2, r4
    d4ea:	ab20      	add	r3, sp, #128	; 0x80
    d4ec:	9301      	str	r3, [sp, #4]
    d4ee:	ab1f      	add	r3, sp, #124	; 0x7c
    d4f0:	910a      	str	r1, [sp, #40]	; 0x28
    d4f2:	920b      	str	r2, [sp, #44]	; 0x2c
    d4f4:	9300      	str	r3, [sp, #0]
    d4f6:	000a      	movs	r2, r1
    d4f8:	0023      	movs	r3, r4
    d4fa:	0028      	movs	r0, r5
    d4fc:	f7ff fb94 	bl	cc28 <__d2b>
    d500:	901e      	str	r0, [sp, #120]	; 0x78
    d502:	2800      	cmp	r0, #0
    d504:	d100      	bne.n	d508 <_strtod_l+0x604>
    d506:	e2eb      	b.n	dae0 <_strtod_l+0xbdc>
    d508:	2101      	movs	r1, #1
    d50a:	0028      	movs	r0, r5
    d50c:	f7ff f8d0 	bl	c6b0 <__i2b>
    d510:	4680      	mov	r8, r0
    d512:	2800      	cmp	r0, #0
    d514:	d100      	bne.n	d518 <_strtod_l+0x614>
    d516:	e15a      	b.n	d7ce <_strtod_l+0x8ca>
    d518:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d51a:	2b00      	cmp	r3, #0
    d51c:	da00      	bge.n	d520 <_strtod_l+0x61c>
    d51e:	e090      	b.n	d642 <_strtod_l+0x73e>
    d520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d522:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    d524:	18d7      	adds	r7, r2, r3
    d526:	990c      	ldr	r1, [sp, #48]	; 0x30
    d528:	9a20      	ldr	r2, [sp, #128]	; 0x80
    d52a:	1a5b      	subs	r3, r3, r1
    d52c:	2136      	movs	r1, #54	; 0x36
    d52e:	189b      	adds	r3, r3, r2
    d530:	1a8a      	subs	r2, r1, r2
    d532:	4931      	ldr	r1, [pc, #196]	; (d5f8 <_strtod_l+0x6f4>)
    d534:	3b01      	subs	r3, #1
    d536:	428b      	cmp	r3, r1
    d538:	da00      	bge.n	d53c <_strtod_l+0x638>
    d53a:	e6cb      	b.n	d2d4 <_strtod_l+0x3d0>
    d53c:	2300      	movs	r3, #0
    d53e:	9311      	str	r3, [sp, #68]	; 0x44
    d540:	3301      	adds	r3, #1
    d542:	9310      	str	r3, [sp, #64]	; 0x40
    d544:	e6d0      	b.n	d2e8 <_strtod_l+0x3e4>
    d546:	2201      	movs	r2, #1
    d548:	920d      	str	r2, [sp, #52]	; 0x34
    d54a:	1cb2      	adds	r2, r6, #2
    d54c:	921d      	str	r2, [sp, #116]	; 0x74
    d54e:	78b4      	ldrb	r4, [r6, #2]
    d550:	e5ca      	b.n	d0e8 <_strtod_l+0x1e4>
    d552:	239a      	movs	r3, #154	; 0x9a
    d554:	005b      	lsls	r3, r3, #1
    d556:	429c      	cmp	r4, r3
    d558:	dd00      	ble.n	d55c <_strtod_l+0x658>
    d55a:	e100      	b.n	d75e <_strtod_l+0x85a>
    d55c:	1124      	asrs	r4, r4, #4
    d55e:	2c01      	cmp	r4, #1
    d560:	dc00      	bgt.n	d564 <_strtod_l+0x660>
    d562:	e361      	b.n	dc28 <_strtod_l+0xd24>
    d564:	9804      	ldr	r0, [sp, #16]
    d566:	9905      	ldr	r1, [sp, #20]
    d568:	2201      	movs	r2, #1
    d56a:	4b24      	ldr	r3, [pc, #144]	; (d5fc <_strtod_l+0x6f8>)
    d56c:	2700      	movs	r7, #0
    d56e:	930c      	str	r3, [sp, #48]	; 0x30
    d570:	001e      	movs	r6, r3
    d572:	4691      	mov	r9, r2
    d574:	2300      	movs	r3, #0
    d576:	464a      	mov	r2, r9
    d578:	4222      	tst	r2, r4
    d57a:	d004      	beq.n	d586 <_strtod_l+0x682>
    d57c:	6832      	ldr	r2, [r6, #0]
    d57e:	6873      	ldr	r3, [r6, #4]
    d580:	f7f9 faca 	bl	6b18 <__aeabi_dmul>
    d584:	2301      	movs	r3, #1
    d586:	3701      	adds	r7, #1
    d588:	1064      	asrs	r4, r4, #1
    d58a:	3608      	adds	r6, #8
    d58c:	2c01      	cmp	r4, #1
    d58e:	d1f2      	bne.n	d576 <_strtod_l+0x672>
    d590:	2b00      	cmp	r3, #0
    d592:	d001      	beq.n	d598 <_strtod_l+0x694>
    d594:	f000 fbf4 	bl	dd80 <_strtod_l+0xe7c>
    d598:	4a19      	ldr	r2, [pc, #100]	; (d600 <_strtod_l+0x6fc>)
    d59a:	9b05      	ldr	r3, [sp, #20]
    d59c:	4694      	mov	ip, r2
    d59e:	4463      	add	r3, ip
    d5a0:	9305      	str	r3, [sp, #20]
    d5a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d5a4:	00ff      	lsls	r7, r7, #3
    d5a6:	469c      	mov	ip, r3
    d5a8:	9a04      	ldr	r2, [sp, #16]
    d5aa:	9b05      	ldr	r3, [sp, #20]
    d5ac:	4467      	add	r7, ip
    d5ae:	6838      	ldr	r0, [r7, #0]
    d5b0:	6879      	ldr	r1, [r7, #4]
    d5b2:	f7f9 fab1 	bl	6b18 <__aeabi_dmul>
    d5b6:	000a      	movs	r2, r1
    d5b8:	0003      	movs	r3, r0
    d5ba:	0014      	movs	r4, r2
    d5bc:	9304      	str	r3, [sp, #16]
    d5be:	9405      	str	r4, [sp, #20]
    d5c0:	4b09      	ldr	r3, [pc, #36]	; (d5e8 <_strtod_l+0x6e4>)
    d5c2:	4013      	ands	r3, r2
    d5c4:	4a0f      	ldr	r2, [pc, #60]	; (d604 <_strtod_l+0x700>)
    d5c6:	4293      	cmp	r3, r2
    d5c8:	d900      	bls.n	d5cc <_strtod_l+0x6c8>
    d5ca:	e0c8      	b.n	d75e <_strtod_l+0x85a>
    d5cc:	4a0e      	ldr	r2, [pc, #56]	; (d608 <_strtod_l+0x704>)
    d5ce:	4293      	cmp	r3, r2
    d5d0:	d800      	bhi.n	d5d4 <_strtod_l+0x6d0>
    d5d2:	e308      	b.n	dbe6 <_strtod_l+0xce2>
    d5d4:	4b0d      	ldr	r3, [pc, #52]	; (d60c <_strtod_l+0x708>)
    d5d6:	9305      	str	r3, [sp, #20]
    d5d8:	2301      	movs	r3, #1
    d5da:	425b      	negs	r3, r3
    d5dc:	9304      	str	r3, [sp, #16]
    d5de:	e65a      	b.n	d296 <_strtod_l+0x392>
    d5e0:	000123f8 	.word	0x000123f8
    d5e4:	3ff00000 	.word	0x3ff00000
    d5e8:	7ff00000 	.word	0x7ff00000
    d5ec:	7fe00000 	.word	0x7fe00000
    d5f0:	ffc00000 	.word	0xffc00000
    d5f4:	41dfffff 	.word	0x41dfffff
    d5f8:	fffffc02 	.word	0xfffffc02
    d5fc:	000123d0 	.word	0x000123d0
    d600:	fcb00000 	.word	0xfcb00000
    d604:	7ca00000 	.word	0x7ca00000
    d608:	7c900000 	.word	0x7c900000
    d60c:	7fefffff 	.word	0x7fefffff
    d610:	4ace      	ldr	r2, [pc, #824]	; (d94c <_strtod_l+0xa48>)
    d612:	e5aa      	b.n	d16a <_strtod_l+0x266>
    d614:	4bce      	ldr	r3, [pc, #824]	; (d950 <_strtod_l+0xa4c>)
    d616:	2200      	movs	r2, #0
    d618:	0030      	movs	r0, r6
    d61a:	0039      	movs	r1, r7
    d61c:	f7f9 fa7c 	bl	6b18 <__aeabi_dmul>
    d620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d622:	9011      	str	r0, [sp, #68]	; 0x44
    d624:	9114      	str	r1, [sp, #80]	; 0x50
    d626:	2b00      	cmp	r3, #0
    d628:	d139      	bne.n	d69e <_strtod_l+0x79a>
    d62a:	2280      	movs	r2, #128	; 0x80
    d62c:	0612      	lsls	r2, r2, #24
    d62e:	000b      	movs	r3, r1
    d630:	4694      	mov	ip, r2
    d632:	4463      	add	r3, ip
    d634:	9012      	str	r0, [sp, #72]	; 0x48
    d636:	9313      	str	r3, [sp, #76]	; 0x4c
    d638:	9b05      	ldr	r3, [sp, #20]
    d63a:	9e12      	ldr	r6, [sp, #72]	; 0x48
    d63c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    d63e:	9310      	str	r3, [sp, #64]	; 0x40
    d640:	e6dd      	b.n	d3fe <_strtod_l+0x4fa>
    d642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d644:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    d646:	1ad6      	subs	r6, r2, r3
    d648:	e76d      	b.n	d526 <_strtod_l+0x622>
    d64a:	49c2      	ldr	r1, [pc, #776]	; (d954 <_strtod_l+0xa50>)
    d64c:	1acb      	subs	r3, r1, r3
    d64e:	2101      	movs	r1, #1
    d650:	4099      	lsls	r1, r3
    d652:	2301      	movs	r3, #1
    d654:	9111      	str	r1, [sp, #68]	; 0x44
    d656:	9310      	str	r3, [sp, #64]	; 0x40
    d658:	e646      	b.n	d2e8 <_strtod_l+0x3e4>
    d65a:	9904      	ldr	r1, [sp, #16]
    d65c:	9a05      	ldr	r2, [sp, #20]
    d65e:	2900      	cmp	r1, #0
    d660:	d140      	bne.n	d6e4 <_strtod_l+0x7e0>
    d662:	9210      	str	r2, [sp, #64]	; 0x40
    d664:	0313      	lsls	r3, r2, #12
    d666:	d142      	bne.n	d6ee <_strtod_l+0x7ea>
    d668:	2200      	movs	r2, #0
    d66a:	4bbb      	ldr	r3, [pc, #748]	; (d958 <_strtod_l+0xa54>)
    d66c:	0030      	movs	r0, r6
    d66e:	0039      	movs	r1, r7
    d670:	f7fa f8fe 	bl	7870 <__aeabi_dcmplt>
    d674:	2800      	cmp	r0, #0
    d676:	d000      	beq.n	d67a <_strtod_l+0x776>
    d678:	e2bf      	b.n	dbfa <_strtod_l+0xcf6>
    d67a:	2200      	movs	r2, #0
    d67c:	4bb4      	ldr	r3, [pc, #720]	; (d950 <_strtod_l+0xa4c>)
    d67e:	0030      	movs	r0, r6
    d680:	0039      	movs	r1, r7
    d682:	f7f9 fa49 	bl	6b18 <__aeabi_dmul>
    d686:	2280      	movs	r2, #128	; 0x80
    d688:	0612      	lsls	r2, r2, #24
    d68a:	000b      	movs	r3, r1
    d68c:	4694      	mov	ip, r2
    d68e:	4463      	add	r3, ip
    d690:	9011      	str	r0, [sp, #68]	; 0x44
    d692:	9114      	str	r1, [sp, #80]	; 0x50
    d694:	901a      	str	r0, [sp, #104]	; 0x68
    d696:	931b      	str	r3, [sp, #108]	; 0x6c
    d698:	9e1a      	ldr	r6, [sp, #104]	; 0x68
    d69a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
    d69c:	e6af      	b.n	d3fe <_strtod_l+0x4fa>
    d69e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    d6a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d6a2:	9212      	str	r2, [sp, #72]	; 0x48
    d6a4:	9313      	str	r3, [sp, #76]	; 0x4c
    d6a6:	e7c7      	b.n	d638 <_strtod_l+0x734>
    d6a8:	9b07      	ldr	r3, [sp, #28]
    d6aa:	9502      	str	r5, [sp, #8]
    d6ac:	9301      	str	r3, [sp, #4]
    d6ae:	ab1e      	add	r3, sp, #120	; 0x78
    d6b0:	9300      	str	r3, [sp, #0]
    d6b2:	4aaa      	ldr	r2, [pc, #680]	; (d95c <_strtod_l+0xa58>)
    d6b4:	ab1f      	add	r3, sp, #124	; 0x7c
    d6b6:	a91d      	add	r1, sp, #116	; 0x74
    d6b8:	9809      	ldr	r0, [sp, #36]	; 0x24
    d6ba:	f001 f8a1 	bl	e800 <__gethex>
    d6be:	2407      	movs	r4, #7
    d6c0:	0005      	movs	r5, r0
    d6c2:	4004      	ands	r4, r0
    d6c4:	d100      	bne.n	d6c8 <_strtod_l+0x7c4>
    d6c6:	e556      	b.n	d176 <_strtod_l+0x272>
    d6c8:	2c06      	cmp	r4, #6
    d6ca:	d000      	beq.n	d6ce <_strtod_l+0x7ca>
    d6cc:	e15e      	b.n	d98c <_strtod_l+0xa88>
    d6ce:	4653      	mov	r3, sl
    d6d0:	3301      	adds	r3, #1
    d6d2:	931d      	str	r3, [sp, #116]	; 0x74
    d6d4:	2300      	movs	r3, #0
    d6d6:	2400      	movs	r4, #0
    d6d8:	2500      	movs	r5, #0
    d6da:	9307      	str	r3, [sp, #28]
    d6dc:	e54d      	b.n	d17a <_strtod_l+0x276>
    d6de:	961d      	str	r6, [sp, #116]	; 0x74
    d6e0:	2200      	movs	r2, #0
    d6e2:	e448      	b.n	cf76 <_strtod_l+0x72>
    d6e4:	2901      	cmp	r1, #1
    d6e6:	d100      	bne.n	d6ea <_strtod_l+0x7e6>
    d6e8:	e1d8      	b.n	da9c <_strtod_l+0xb98>
    d6ea:	9b05      	ldr	r3, [sp, #20]
    d6ec:	9310      	str	r3, [sp, #64]	; 0x40
    d6ee:	2300      	movs	r3, #0
    d6f0:	9311      	str	r3, [sp, #68]	; 0x44
    d6f2:	4b99      	ldr	r3, [pc, #612]	; (d958 <_strtod_l+0xa54>)
    d6f4:	2600      	movs	r6, #0
    d6f6:	4f9a      	ldr	r7, [pc, #616]	; (d960 <_strtod_l+0xa5c>)
    d6f8:	9314      	str	r3, [sp, #80]	; 0x50
    d6fa:	e680      	b.n	d3fe <_strtod_l+0x4fa>
    d6fc:	6839      	ldr	r1, [r7, #0]
    d6fe:	9a08      	ldr	r2, [sp, #32]
    d700:	4650      	mov	r0, sl
    d702:	f001 fe09 	bl	f318 <strncmp>
    d706:	900a      	str	r0, [sp, #40]	; 0x28
    d708:	2800      	cmp	r0, #0
    d70a:	d009      	beq.n	d720 <_strtod_l+0x81c>
    d70c:	2300      	movs	r3, #0
    d70e:	2200      	movs	r2, #0
    d710:	930a      	str	r3, [sp, #40]	; 0x28
    d712:	4699      	mov	r9, r3
    d714:	4698      	mov	r8, r3
    d716:	2000      	movs	r0, #0
    d718:	2500      	movs	r5, #0
    d71a:	9208      	str	r2, [sp, #32]
    d71c:	f7ff fc24 	bl	cf68 <_strtod_l+0x64>
    d720:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    d722:	9b08      	ldr	r3, [sp, #32]
    d724:	4694      	mov	ip, r2
    d726:	4463      	add	r3, ip
    d728:	931d      	str	r3, [sp, #116]	; 0x74
    d72a:	781c      	ldrb	r4, [r3, #0]
    d72c:	0019      	movs	r1, r3
    d72e:	1c5a      	adds	r2, r3, #1
    d730:	2300      	movs	r3, #0
    d732:	2c30      	cmp	r4, #48	; 0x30
    d734:	d105      	bne.n	d742 <_strtod_l+0x83e>
    d736:	921d      	str	r2, [sp, #116]	; 0x74
    d738:	7814      	ldrb	r4, [r2, #0]
    d73a:	1a53      	subs	r3, r2, r1
    d73c:	3201      	adds	r2, #1
    d73e:	2c30      	cmp	r4, #48	; 0x30
    d740:	d0f9      	beq.n	d736 <_strtod_l+0x832>
    d742:	0022      	movs	r2, r4
    d744:	3a31      	subs	r2, #49	; 0x31
    d746:	2a08      	cmp	r2, #8
    d748:	d800      	bhi.n	d74c <_strtod_l+0x848>
    d74a:	e153      	b.n	d9f4 <_strtod_l+0xaf0>
    d74c:	2200      	movs	r2, #0
    d74e:	4691      	mov	r9, r2
    d750:	4690      	mov	r8, r2
    d752:	3201      	adds	r2, #1
    d754:	2000      	movs	r0, #0
    d756:	2500      	movs	r5, #0
    d758:	9208      	str	r2, [sp, #32]
    d75a:	f7ff fc05 	bl	cf68 <_strtod_l+0x64>
    d75e:	2322      	movs	r3, #34	; 0x22
    d760:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d762:	6013      	str	r3, [r2, #0]
    d764:	4b7f      	ldr	r3, [pc, #508]	; (d964 <_strtod_l+0xa60>)
    d766:	9305      	str	r3, [sp, #20]
    d768:	2300      	movs	r3, #0
    d76a:	9304      	str	r3, [sp, #16]
    d76c:	e569      	b.n	d242 <_strtod_l+0x33e>
    d76e:	497e      	ldr	r1, [pc, #504]	; (d968 <_strtod_l+0xa64>)
    d770:	9a10      	ldr	r2, [sp, #64]	; 0x40
    d772:	468c      	mov	ip, r1
    d774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d776:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    d778:	4462      	add	r2, ip
    d77a:	9205      	str	r2, [sp, #20]
    d77c:	960a      	str	r6, [sp, #40]	; 0x28
    d77e:	970b      	str	r7, [sp, #44]	; 0x2c
    d780:	9e04      	ldr	r6, [sp, #16]
    d782:	9f05      	ldr	r7, [sp, #20]
    d784:	0030      	movs	r0, r6
    d786:	0039      	movs	r1, r7
    d788:	9316      	str	r3, [sp, #88]	; 0x58
    d78a:	9417      	str	r4, [sp, #92]	; 0x5c
    d78c:	f7ff f9ba 	bl	cb04 <__ulp>
    d790:	0002      	movs	r2, r0
    d792:	000b      	movs	r3, r1
    d794:	980a      	ldr	r0, [sp, #40]	; 0x28
    d796:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d798:	f7f9 f9be 	bl	6b18 <__aeabi_dmul>
    d79c:	0032      	movs	r2, r6
    d79e:	003b      	movs	r3, r7
    d7a0:	f7f8 fb76 	bl	5e90 <__aeabi_dadd>
    d7a4:	4b6f      	ldr	r3, [pc, #444]	; (d964 <_strtod_l+0xa60>)
    d7a6:	4a71      	ldr	r2, [pc, #452]	; (d96c <_strtod_l+0xa68>)
    d7a8:	9004      	str	r0, [sp, #16]
    d7aa:	9105      	str	r1, [sp, #20]
    d7ac:	400b      	ands	r3, r1
    d7ae:	4293      	cmp	r3, r2
    d7b0:	d800      	bhi.n	d7b4 <_strtod_l+0x8b0>
    d7b2:	e0c6      	b.n	d942 <_strtod_l+0xa3e>
    d7b4:	4b6e      	ldr	r3, [pc, #440]	; (d970 <_strtod_l+0xa6c>)
    d7b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    d7b8:	429a      	cmp	r2, r3
    d7ba:	d005      	beq.n	d7c8 <_strtod_l+0x8c4>
    d7bc:	4b6c      	ldr	r3, [pc, #432]	; (d970 <_strtod_l+0xa6c>)
    d7be:	9305      	str	r3, [sp, #20]
    d7c0:	2301      	movs	r3, #1
    d7c2:	425b      	negs	r3, r3
    d7c4:	9304      	str	r3, [sp, #16]
    d7c6:	e66a      	b.n	d49e <_strtod_l+0x59a>
    d7c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d7ca:	3301      	adds	r3, #1
    d7cc:	d1f6      	bne.n	d7bc <_strtod_l+0x8b8>
    d7ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d7d0:	46da      	mov	sl, fp
    d7d2:	469b      	mov	fp, r3
    d7d4:	981e      	ldr	r0, [sp, #120]	; 0x78
    d7d6:	2322      	movs	r3, #34	; 0x22
    d7d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d7da:	6013      	str	r3, [r2, #0]
    d7dc:	4b61      	ldr	r3, [pc, #388]	; (d964 <_strtod_l+0xa60>)
    d7de:	9305      	str	r3, [sp, #20]
    d7e0:	2300      	movs	r3, #0
    d7e2:	9304      	str	r3, [sp, #16]
    d7e4:	9c04      	ldr	r4, [sp, #16]
    d7e6:	9d05      	ldr	r5, [sp, #20]
    d7e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d7ea:	0001      	movs	r1, r0
    d7ec:	0030      	movs	r0, r6
    d7ee:	f7fe fe7d 	bl	c4ec <_Bfree>
    d7f2:	9908      	ldr	r1, [sp, #32]
    d7f4:	0030      	movs	r0, r6
    d7f6:	f7fe fe79 	bl	c4ec <_Bfree>
    d7fa:	4641      	mov	r1, r8
    d7fc:	0030      	movs	r0, r6
    d7fe:	f7fe fe75 	bl	c4ec <_Bfree>
    d802:	4651      	mov	r1, sl
    d804:	0030      	movs	r0, r6
    d806:	f7fe fe71 	bl	c4ec <_Bfree>
    d80a:	4649      	mov	r1, r9
    d80c:	0030      	movs	r0, r6
    d80e:	f7fe fe6d 	bl	c4ec <_Bfree>
    d812:	e4b2      	b.n	d17a <_strtod_l+0x276>
    d814:	2200      	movs	r2, #0
    d816:	920d      	str	r2, [sp, #52]	; 0x34
    d818:	e697      	b.n	d54a <_strtod_l+0x646>
    d81a:	9f11      	ldr	r7, [sp, #68]	; 0x44
    d81c:	9e14      	ldr	r6, [sp, #80]	; 0x50
    d81e:	0038      	movs	r0, r7
    d820:	0031      	movs	r1, r6
    d822:	f7f9 ff0f 	bl	7644 <__aeabi_d2iz>
    d826:	f7f9 ff41 	bl	76ac <__aeabi_i2d>
    d82a:	000b      	movs	r3, r1
    d82c:	0002      	movs	r2, r0
    d82e:	0031      	movs	r1, r6
    d830:	0038      	movs	r0, r7
    d832:	f7f9 fbf1 	bl	7018 <__aeabi_dsub>
    d836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d838:	0006      	movs	r6, r0
    d83a:	000f      	movs	r7, r1
    d83c:	2b00      	cmp	r3, #0
    d83e:	d112      	bne.n	d866 <_strtod_l+0x962>
    d840:	9b04      	ldr	r3, [sp, #16]
    d842:	2b00      	cmp	r3, #0
    d844:	d10f      	bne.n	d866 <_strtod_l+0x962>
    d846:	0324      	lsls	r4, r4, #12
    d848:	d10d      	bne.n	d866 <_strtod_l+0x962>
    d84a:	4a4a      	ldr	r2, [pc, #296]	; (d974 <_strtod_l+0xa70>)
    d84c:	4b4a      	ldr	r3, [pc, #296]	; (d978 <_strtod_l+0xa74>)
    d84e:	f7fa f80f 	bl	7870 <__aeabi_dcmplt>
    d852:	2800      	cmp	r0, #0
    d854:	d100      	bne.n	d858 <_strtod_l+0x954>
    d856:	e622      	b.n	d49e <_strtod_l+0x59a>
    d858:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d85a:	46da      	mov	sl, fp
    d85c:	9c04      	ldr	r4, [sp, #16]
    d85e:	9d05      	ldr	r5, [sp, #20]
    d860:	469b      	mov	fp, r3
    d862:	981e      	ldr	r0, [sp, #120]	; 0x78
    d864:	e7c0      	b.n	d7e8 <_strtod_l+0x8e4>
    d866:	4a43      	ldr	r2, [pc, #268]	; (d974 <_strtod_l+0xa70>)
    d868:	4b44      	ldr	r3, [pc, #272]	; (d97c <_strtod_l+0xa78>)
    d86a:	0030      	movs	r0, r6
    d86c:	0039      	movs	r1, r7
    d86e:	f7f9 ffff 	bl	7870 <__aeabi_dcmplt>
    d872:	2800      	cmp	r0, #0
    d874:	d1f0      	bne.n	d858 <_strtod_l+0x954>
    d876:	4a42      	ldr	r2, [pc, #264]	; (d980 <_strtod_l+0xa7c>)
    d878:	4b35      	ldr	r3, [pc, #212]	; (d950 <_strtod_l+0xa4c>)
    d87a:	0030      	movs	r0, r6
    d87c:	0039      	movs	r1, r7
    d87e:	f7fa f80b 	bl	7898 <__aeabi_dcmpgt>
    d882:	2800      	cmp	r0, #0
    d884:	d100      	bne.n	d888 <_strtod_l+0x984>
    d886:	e60a      	b.n	d49e <_strtod_l+0x59a>
    d888:	e7e6      	b.n	d858 <_strtod_l+0x954>
    d88a:	46a0      	mov	r8, r4
    d88c:	991d      	ldr	r1, [sp, #116]	; 0x74
    d88e:	3502      	adds	r5, #2
    d890:	2f08      	cmp	r7, #8
    d892:	dc00      	bgt.n	d896 <_strtod_l+0x992>
    d894:	e0b9      	b.n	da0a <_strtod_l+0xb06>
    d896:	2300      	movs	r3, #0
    d898:	2d10      	cmp	r5, #16
    d89a:	dc05      	bgt.n	d8a8 <_strtod_l+0x9a4>
    d89c:	464c      	mov	r4, r9
    d89e:	00a4      	lsls	r4, r4, #2
    d8a0:	444c      	add	r4, r9
    d8a2:	4691      	mov	r9, r2
    d8a4:	0064      	lsls	r4, r4, #1
    d8a6:	44a1      	add	r9, r4
    d8a8:	1c4a      	adds	r2, r1, #1
    d8aa:	921d      	str	r2, [sp, #116]	; 0x74
    d8ac:	784c      	ldrb	r4, [r1, #1]
    d8ae:	f7ff fbe3 	bl	d078 <_strtod_l+0x174>
    d8b2:	2c00      	cmp	r4, #0
    d8b4:	d100      	bne.n	d8b8 <_strtod_l+0x9b4>
    d8b6:	e4ee      	b.n	d296 <_strtod_l+0x392>
    d8b8:	230f      	movs	r3, #15
    d8ba:	4264      	negs	r4, r4
    d8bc:	4023      	ands	r3, r4
    d8be:	d00a      	beq.n	d8d6 <_strtod_l+0x9d2>
    d8c0:	9804      	ldr	r0, [sp, #16]
    d8c2:	9905      	ldr	r1, [sp, #20]
    d8c4:	4a2f      	ldr	r2, [pc, #188]	; (d984 <_strtod_l+0xa80>)
    d8c6:	00db      	lsls	r3, r3, #3
    d8c8:	18d3      	adds	r3, r2, r3
    d8ca:	681a      	ldr	r2, [r3, #0]
    d8cc:	685b      	ldr	r3, [r3, #4]
    d8ce:	f7f8 fdef 	bl	64b0 <__aeabi_ddiv>
    d8d2:	9004      	str	r0, [sp, #16]
    d8d4:	9105      	str	r1, [sp, #20]
    d8d6:	1124      	asrs	r4, r4, #4
    d8d8:	d100      	bne.n	d8dc <_strtod_l+0x9d8>
    d8da:	e4dc      	b.n	d296 <_strtod_l+0x392>
    d8dc:	2c1f      	cmp	r4, #31
    d8de:	dc29      	bgt.n	d934 <_strtod_l+0xa30>
    d8e0:	2310      	movs	r3, #16
    d8e2:	4023      	ands	r3, r4
    d8e4:	930c      	str	r3, [sp, #48]	; 0x30
    d8e6:	d100      	bne.n	d8ea <_strtod_l+0x9e6>
    d8e8:	e1c5      	b.n	dc76 <_strtod_l+0xd72>
    d8ea:	236a      	movs	r3, #106	; 0x6a
    d8ec:	930c      	str	r3, [sp, #48]	; 0x30
    d8ee:	2c00      	cmp	r4, #0
    d8f0:	dc00      	bgt.n	d8f4 <_strtod_l+0x9f0>
    d8f2:	e1c4      	b.n	dc7e <_strtod_l+0xd7a>
    d8f4:	9804      	ldr	r0, [sp, #16]
    d8f6:	9905      	ldr	r1, [sp, #20]
    d8f8:	2300      	movs	r3, #0
    d8fa:	2701      	movs	r7, #1
    d8fc:	4e22      	ldr	r6, [pc, #136]	; (d988 <_strtod_l+0xa84>)
    d8fe:	4227      	tst	r7, r4
    d900:	d004      	beq.n	d90c <_strtod_l+0xa08>
    d902:	6832      	ldr	r2, [r6, #0]
    d904:	6873      	ldr	r3, [r6, #4]
    d906:	f7f9 f907 	bl	6b18 <__aeabi_dmul>
    d90a:	2301      	movs	r3, #1
    d90c:	1064      	asrs	r4, r4, #1
    d90e:	3608      	adds	r6, #8
    d910:	2c00      	cmp	r4, #0
    d912:	d1f4      	bne.n	d8fe <_strtod_l+0x9fa>
    d914:	2b00      	cmp	r3, #0
    d916:	d000      	beq.n	d91a <_strtod_l+0xa16>
    d918:	e221      	b.n	dd5e <_strtod_l+0xe5a>
    d91a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d91c:	2b00      	cmp	r3, #0
    d91e:	d000      	beq.n	d922 <_strtod_l+0xa1e>
    d920:	e1ad      	b.n	dc7e <_strtod_l+0xd7a>
    d922:	9804      	ldr	r0, [sp, #16]
    d924:	9905      	ldr	r1, [sp, #20]
    d926:	2200      	movs	r2, #0
    d928:	2300      	movs	r3, #0
    d92a:	f7f9 ff9b 	bl	7864 <__aeabi_dcmpeq>
    d92e:	2800      	cmp	r0, #0
    d930:	d100      	bne.n	d934 <_strtod_l+0xa30>
    d932:	e4b2      	b.n	d29a <_strtod_l+0x396>
    d934:	2322      	movs	r3, #34	; 0x22
    d936:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d938:	2400      	movs	r4, #0
    d93a:	6013      	str	r3, [r2, #0]
    d93c:	2500      	movs	r5, #0
    d93e:	f7ff fc1c 	bl	d17a <_strtod_l+0x276>
    d942:	23d4      	movs	r3, #212	; 0xd4
    d944:	049b      	lsls	r3, r3, #18
    d946:	18cc      	adds	r4, r1, r3
    d948:	9405      	str	r4, [sp, #20]
    d94a:	e5a0      	b.n	d48e <_strtod_l+0x58a>
    d94c:	00004e1f 	.word	0x00004e1f
    d950:	3fe00000 	.word	0x3fe00000
    d954:	fffffbe2 	.word	0xfffffbe2
    d958:	3ff00000 	.word	0x3ff00000
    d95c:	000125ac 	.word	0x000125ac
    d960:	bff00000 	.word	0xbff00000
    d964:	7ff00000 	.word	0x7ff00000
    d968:	fcb00000 	.word	0xfcb00000
    d96c:	7c9fffff 	.word	0x7c9fffff
    d970:	7fefffff 	.word	0x7fefffff
    d974:	94a03595 	.word	0x94a03595
    d978:	3fcfffff 	.word	0x3fcfffff
    d97c:	3fdfffff 	.word	0x3fdfffff
    d980:	35afe535 	.word	0x35afe535
    d984:	000123f8 	.word	0x000123f8
    d988:	000125d8 	.word	0x000125d8
    d98c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    d98e:	2a00      	cmp	r2, #0
    d990:	d007      	beq.n	d9a2 <_strtod_l+0xa9e>
    d992:	2135      	movs	r1, #53	; 0x35
    d994:	a820      	add	r0, sp, #128	; 0x80
    d996:	f7ff f9df 	bl	cd58 <__copybits>
    d99a:	991e      	ldr	r1, [sp, #120]	; 0x78
    d99c:	9809      	ldr	r0, [sp, #36]	; 0x24
    d99e:	f7fe fda5 	bl	c4ec <_Bfree>
    d9a2:	2c05      	cmp	r4, #5
    d9a4:	d808      	bhi.n	d9b8 <_strtod_l+0xab4>
    d9a6:	4bd1      	ldr	r3, [pc, #836]	; (dcec <_strtod_l+0xde8>)
    d9a8:	00a4      	lsls	r4, r4, #2
    d9aa:	591b      	ldr	r3, [r3, r4]
    d9ac:	469f      	mov	pc, r3
    d9ae:	4bd0      	ldr	r3, [pc, #832]	; (dcf0 <_strtod_l+0xdec>)
    d9b0:	9305      	str	r3, [sp, #20]
    d9b2:	2301      	movs	r3, #1
    d9b4:	425b      	negs	r3, r3
    d9b6:	9304      	str	r3, [sp, #16]
    d9b8:	072b      	lsls	r3, r5, #28
    d9ba:	d400      	bmi.n	d9be <_strtod_l+0xaba>
    d9bc:	e441      	b.n	d242 <_strtod_l+0x33e>
    d9be:	2380      	movs	r3, #128	; 0x80
    d9c0:	9a05      	ldr	r2, [sp, #20]
    d9c2:	061b      	lsls	r3, r3, #24
    d9c4:	431a      	orrs	r2, r3
    d9c6:	9205      	str	r2, [sp, #20]
    d9c8:	e43b      	b.n	d242 <_strtod_l+0x33e>
    d9ca:	4bca      	ldr	r3, [pc, #808]	; (dcf4 <_strtod_l+0xdf0>)
    d9cc:	9305      	str	r3, [sp, #20]
    d9ce:	e7f3      	b.n	d9b8 <_strtod_l+0xab4>
    d9d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d9d2:	9304      	str	r3, [sp, #16]
    d9d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d9d6:	9305      	str	r3, [sp, #20]
    d9d8:	e7ee      	b.n	d9b8 <_strtod_l+0xab4>
    d9da:	49c7      	ldr	r1, [pc, #796]	; (dcf8 <_strtod_l+0xdf4>)
    d9dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    d9de:	468c      	mov	ip, r1
    d9e0:	9304      	str	r3, [sp, #16]
    d9e2:	4ac6      	ldr	r2, [pc, #792]	; (dcfc <_strtod_l+0xdf8>)
    d9e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d9e6:	401a      	ands	r2, r3
    d9e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    d9ea:	4463      	add	r3, ip
    d9ec:	051b      	lsls	r3, r3, #20
    d9ee:	431a      	orrs	r2, r3
    d9f0:	9205      	str	r2, [sp, #20]
    d9f2:	e7e1      	b.n	d9b8 <_strtod_l+0xab4>
    d9f4:	2230      	movs	r2, #48	; 0x30
    d9f6:	1c58      	adds	r0, r3, #1
    d9f8:	2300      	movs	r3, #0
    d9fa:	991d      	ldr	r1, [sp, #116]	; 0x74
    d9fc:	4252      	negs	r2, r2
    d9fe:	4694      	mov	ip, r2
    da00:	468a      	mov	sl, r1
    da02:	4698      	mov	r8, r3
    da04:	2501      	movs	r5, #1
    da06:	4699      	mov	r9, r3
    da08:	44a4      	add	ip, r4
    da0a:	4643      	mov	r3, r8
    da0c:	009c      	lsls	r4, r3, #2
    da0e:	4444      	add	r4, r8
    da10:	0064      	lsls	r4, r4, #1
    da12:	4464      	add	r4, ip
    da14:	46a0      	mov	r8, r4
    da16:	2300      	movs	r3, #0
    da18:	e746      	b.n	d8a8 <_strtod_l+0x9a4>
    da1a:	2325      	movs	r3, #37	; 0x25
    da1c:	9e08      	ldr	r6, [sp, #32]
    da1e:	1b5b      	subs	r3, r3, r5
    da20:	429e      	cmp	r6, r3
    da22:	dd01      	ble.n	da28 <_strtod_l+0xb24>
    da24:	f7ff fc1e 	bl	d264 <_strtod_l+0x360>
    da28:	230f      	movs	r3, #15
    da2a:	4cb5      	ldr	r4, [pc, #724]	; (dd00 <_strtod_l+0xdfc>)
    da2c:	1b5d      	subs	r5, r3, r5
    da2e:	00e9      	lsls	r1, r5, #3
    da30:	1b75      	subs	r5, r6, r5
    da32:	1861      	adds	r1, r4, r1
    da34:	00ed      	lsls	r5, r5, #3
    da36:	1964      	adds	r4, r4, r5
    da38:	9a04      	ldr	r2, [sp, #16]
    da3a:	9b05      	ldr	r3, [sp, #20]
    da3c:	6808      	ldr	r0, [r1, #0]
    da3e:	6849      	ldr	r1, [r1, #4]
    da40:	f7f9 f86a 	bl	6b18 <__aeabi_dmul>
    da44:	6822      	ldr	r2, [r4, #0]
    da46:	6863      	ldr	r3, [r4, #4]
    da48:	f7f9 f866 	bl	6b18 <__aeabi_dmul>
    da4c:	0004      	movs	r4, r0
    da4e:	000d      	movs	r5, r1
    da50:	f7ff fb93 	bl	d17a <_strtod_l+0x276>
    da54:	9a11      	ldr	r2, [sp, #68]	; 0x44
    da56:	9b14      	ldr	r3, [sp, #80]	; 0x50
    da58:	9218      	str	r2, [sp, #96]	; 0x60
    da5a:	9319      	str	r3, [sp, #100]	; 0x64
    da5c:	e4fe      	b.n	d45c <_strtod_l+0x558>
    da5e:	2300      	movs	r3, #0
    da60:	9311      	str	r3, [sp, #68]	; 0x44
    da62:	4ba8      	ldr	r3, [pc, #672]	; (dd04 <_strtod_l+0xe00>)
    da64:	9314      	str	r3, [sp, #80]	; 0x50
    da66:	e4ed      	b.n	d444 <_strtod_l+0x540>
    da68:	2c49      	cmp	r4, #73	; 0x49
    da6a:	d001      	beq.n	da70 <_strtod_l+0xb6c>
    da6c:	f7ff fa8e 	bl	cf8c <_strtod_l+0x88>
    da70:	49a5      	ldr	r1, [pc, #660]	; (dd08 <_strtod_l+0xe04>)
    da72:	a81d      	add	r0, sp, #116	; 0x74
    da74:	f001 f958 	bl	ed28 <__match>
    da78:	2800      	cmp	r0, #0
    da7a:	d101      	bne.n	da80 <_strtod_l+0xb7c>
    da7c:	f7ff fa86 	bl	cf8c <_strtod_l+0x88>
    da80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    da82:	49a2      	ldr	r1, [pc, #648]	; (dd0c <_strtod_l+0xe08>)
    da84:	3b01      	subs	r3, #1
    da86:	a81d      	add	r0, sp, #116	; 0x74
    da88:	931d      	str	r3, [sp, #116]	; 0x74
    da8a:	f001 f94d 	bl	ed28 <__match>
    da8e:	2800      	cmp	r0, #0
    da90:	d000      	beq.n	da94 <_strtod_l+0xb90>
    da92:	e667      	b.n	d764 <_strtod_l+0x860>
    da94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    da96:	3301      	adds	r3, #1
    da98:	931d      	str	r3, [sp, #116]	; 0x74
    da9a:	e663      	b.n	d764 <_strtod_l+0x860>
    da9c:	9b05      	ldr	r3, [sp, #20]
    da9e:	9310      	str	r3, [sp, #64]	; 0x40
    daa0:	2b00      	cmp	r3, #0
    daa2:	d000      	beq.n	daa6 <_strtod_l+0xba2>
    daa4:	e623      	b.n	d6ee <_strtod_l+0x7ea>
    daa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    daa8:	46da      	mov	sl, fp
    daaa:	469b      	mov	fp, r3
    daac:	2322      	movs	r3, #34	; 0x22
    daae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dab0:	981e      	ldr	r0, [sp, #120]	; 0x78
    dab2:	6013      	str	r3, [r2, #0]
    dab4:	2400      	movs	r4, #0
    dab6:	2500      	movs	r5, #0
    dab8:	e696      	b.n	d7e8 <_strtod_l+0x8e4>
    daba:	9a08      	ldr	r2, [sp, #32]
    dabc:	0013      	movs	r3, r2
    dabe:	3316      	adds	r3, #22
    dac0:	da01      	bge.n	dac6 <_strtod_l+0xbc2>
    dac2:	f7ff fbcf 	bl	d264 <_strtod_l+0x360>
    dac6:	00d0      	lsls	r0, r2, #3
    dac8:	4a8d      	ldr	r2, [pc, #564]	; (dd00 <_strtod_l+0xdfc>)
    daca:	1a12      	subs	r2, r2, r0
    dacc:	6853      	ldr	r3, [r2, #4]
    dace:	6812      	ldr	r2, [r2, #0]
    dad0:	9804      	ldr	r0, [sp, #16]
    dad2:	9905      	ldr	r1, [sp, #20]
    dad4:	f7f8 fcec 	bl	64b0 <__aeabi_ddiv>
    dad8:	0004      	movs	r4, r0
    dada:	000d      	movs	r5, r1
    dadc:	f7ff fb4d 	bl	d17a <_strtod_l+0x276>
    dae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    dae2:	46da      	mov	sl, fp
    dae4:	469b      	mov	fp, r3
    dae6:	e676      	b.n	d7d6 <_strtod_l+0x8d2>
    dae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    daea:	46da      	mov	sl, fp
    daec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    daee:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    daf0:	469b      	mov	fp, r3
    daf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    daf4:	2b00      	cmp	r3, #0
    daf6:	d100      	bne.n	dafa <_strtod_l+0xbf6>
    daf8:	e08d      	b.n	dc16 <_strtod_l+0xd12>
    dafa:	9804      	ldr	r0, [sp, #16]
    dafc:	9905      	ldr	r1, [sp, #20]
    dafe:	030b      	lsls	r3, r1, #12
    db00:	000a      	movs	r2, r1
    db02:	4983      	ldr	r1, [pc, #524]	; (dd10 <_strtod_l+0xe0c>)
    db04:	0b1b      	lsrs	r3, r3, #12
    db06:	428b      	cmp	r3, r1
    db08:	d100      	bne.n	db0c <_strtod_l+0xc08>
    db0a:	e0cc      	b.n	dca6 <_strtod_l+0xda2>
    db0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    db0e:	2b00      	cmp	r3, #0
    db10:	d100      	bne.n	db14 <_strtod_l+0xc10>
    db12:	e07b      	b.n	dc0c <_strtod_l+0xd08>
    db14:	9a05      	ldr	r2, [sp, #20]
    db16:	4213      	tst	r3, r2
    db18:	d010      	beq.n	db3c <_strtod_l+0xc38>
    db1a:	9804      	ldr	r0, [sp, #16]
    db1c:	9905      	ldr	r1, [sp, #20]
    db1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db22:	2b00      	cmp	r3, #0
    db24:	d100      	bne.n	db28 <_strtod_l+0xc24>
    db26:	e083      	b.n	dc30 <_strtod_l+0xd2c>
    db28:	f7ff f9d4 	bl	ced4 <sulp>
    db2c:	0002      	movs	r2, r0
    db2e:	000b      	movs	r3, r1
    db30:	0020      	movs	r0, r4
    db32:	0029      	movs	r1, r5
    db34:	f7f8 f9ac 	bl	5e90 <__aeabi_dadd>
    db38:	0004      	movs	r4, r0
    db3a:	000d      	movs	r5, r1
    db3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    db3e:	2b00      	cmp	r3, #0
    db40:	d017      	beq.n	db72 <_strtod_l+0xc6e>
    db42:	4b74      	ldr	r3, [pc, #464]	; (dd14 <_strtod_l+0xe10>)
    db44:	0020      	movs	r0, r4
    db46:	9317      	str	r3, [sp, #92]	; 0x5c
    db48:	2300      	movs	r3, #0
    db4a:	9316      	str	r3, [sp, #88]	; 0x58
    db4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
    db4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    db50:	0029      	movs	r1, r5
    db52:	f7f8 ffe1 	bl	6b18 <__aeabi_dmul>
    db56:	0002      	movs	r2, r0
    db58:	000b      	movs	r3, r1
    db5a:	0004      	movs	r4, r0
    db5c:	000d      	movs	r5, r1
    db5e:	9204      	str	r2, [sp, #16]
    db60:	9305      	str	r3, [sp, #20]
    db62:	2900      	cmp	r1, #0
    db64:	d105      	bne.n	db72 <_strtod_l+0xc6e>
    db66:	9b04      	ldr	r3, [sp, #16]
    db68:	2b00      	cmp	r3, #0
    db6a:	d102      	bne.n	db72 <_strtod_l+0xc6e>
    db6c:	2322      	movs	r3, #34	; 0x22
    db6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    db70:	6013      	str	r3, [r2, #0]
    db72:	981e      	ldr	r0, [sp, #120]	; 0x78
    db74:	e638      	b.n	d7e8 <_strtod_l+0x8e4>
    db76:	9b15      	ldr	r3, [sp, #84]	; 0x54
    db78:	46da      	mov	sl, fp
    db7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    db7c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    db7e:	469b      	mov	fp, r3
    db80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    db82:	2b00      	cmp	r3, #0
    db84:	d1da      	bne.n	db3c <_strtod_l+0xc38>
    db86:	9904      	ldr	r1, [sp, #16]
    db88:	9a05      	ldr	r2, [sp, #20]
    db8a:	2900      	cmp	r1, #0
    db8c:	d1d6      	bne.n	db3c <_strtod_l+0xc38>
    db8e:	0313      	lsls	r3, r2, #12
    db90:	d1d4      	bne.n	db3c <_strtod_l+0xc38>
    db92:	4b58      	ldr	r3, [pc, #352]	; (dcf4 <_strtod_l+0xdf0>)
    db94:	4013      	ands	r3, r2
    db96:	22d6      	movs	r2, #214	; 0xd6
    db98:	04d2      	lsls	r2, r2, #19
    db9a:	4293      	cmp	r3, r2
    db9c:	d9ce      	bls.n	db3c <_strtod_l+0xc38>
    db9e:	464b      	mov	r3, r9
    dba0:	695b      	ldr	r3, [r3, #20]
    dba2:	2b00      	cmp	r3, #0
    dba4:	d103      	bne.n	dbae <_strtod_l+0xcaa>
    dba6:	464b      	mov	r3, r9
    dba8:	691b      	ldr	r3, [r3, #16]
    dbaa:	2b01      	cmp	r3, #1
    dbac:	ddc6      	ble.n	db3c <_strtod_l+0xc38>
    dbae:	4649      	mov	r1, r9
    dbb0:	2201      	movs	r2, #1
    dbb2:	9809      	ldr	r0, [sp, #36]	; 0x24
    dbb4:	f7fe fe90 	bl	c8d8 <__lshift>
    dbb8:	4641      	mov	r1, r8
    dbba:	4681      	mov	r9, r0
    dbbc:	f7fe feec 	bl	c998 <__mcmp>
    dbc0:	2800      	cmp	r0, #0
    dbc2:	ddbb      	ble.n	db3c <_strtod_l+0xc38>
    dbc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbc6:	2b00      	cmp	r3, #0
    dbc8:	d100      	bne.n	dbcc <_strtod_l+0xcc8>
    dbca:	e0b2      	b.n	dd32 <_strtod_l+0xe2e>
    dbcc:	9a05      	ldr	r2, [sp, #20]
    dbce:	4b49      	ldr	r3, [pc, #292]	; (dcf4 <_strtod_l+0xdf0>)
    dbd0:	4013      	ands	r3, r2
    dbd2:	22d6      	movs	r2, #214	; 0xd6
    dbd4:	04d2      	lsls	r2, r2, #19
    dbd6:	4293      	cmp	r3, r2
    dbd8:	dd00      	ble.n	dbdc <_strtod_l+0xcd8>
    dbda:	e0aa      	b.n	dd32 <_strtod_l+0xe2e>
    dbdc:	22dc      	movs	r2, #220	; 0xdc
    dbde:	0492      	lsls	r2, r2, #18
    dbe0:	4293      	cmp	r3, r2
    dbe2:	dcae      	bgt.n	db42 <_strtod_l+0xc3e>
    dbe4:	e762      	b.n	daac <_strtod_l+0xba8>
    dbe6:	22d4      	movs	r2, #212	; 0xd4
    dbe8:	0492      	lsls	r2, r2, #18
    dbea:	0023      	movs	r3, r4
    dbec:	4694      	mov	ip, r2
    dbee:	4463      	add	r3, ip
    dbf0:	9305      	str	r3, [sp, #20]
    dbf2:	2300      	movs	r3, #0
    dbf4:	930c      	str	r3, [sp, #48]	; 0x30
    dbf6:	f7ff fb50 	bl	d29a <_strtod_l+0x396>
    dbfa:	2300      	movs	r3, #0
    dbfc:	4c46      	ldr	r4, [pc, #280]	; (dd18 <_strtod_l+0xe14>)
    dbfe:	931a      	str	r3, [sp, #104]	; 0x68
    dc00:	941b      	str	r4, [sp, #108]	; 0x6c
    dc02:	2300      	movs	r3, #0
    dc04:	9311      	str	r3, [sp, #68]	; 0x44
    dc06:	4b45      	ldr	r3, [pc, #276]	; (dd1c <_strtod_l+0xe18>)
    dc08:	9314      	str	r3, [sp, #80]	; 0x50
    dc0a:	e545      	b.n	d698 <_strtod_l+0x794>
    dc0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dc0e:	9a04      	ldr	r2, [sp, #16]
    dc10:	4213      	tst	r3, r2
    dc12:	d093      	beq.n	db3c <_strtod_l+0xc38>
    dc14:	e781      	b.n	db1a <_strtod_l+0xc16>
    dc16:	9904      	ldr	r1, [sp, #16]
    dc18:	9a05      	ldr	r2, [sp, #20]
    dc1a:	0313      	lsls	r3, r2, #12
    dc1c:	d000      	beq.n	dc20 <_strtod_l+0xd1c>
    dc1e:	e775      	b.n	db0c <_strtod_l+0xc08>
    dc20:	2900      	cmp	r1, #0
    dc22:	d000      	beq.n	dc26 <_strtod_l+0xd22>
    dc24:	e772      	b.n	db0c <_strtod_l+0xc08>
    dc26:	e7cd      	b.n	dbc4 <_strtod_l+0xcc0>
    dc28:	4b3d      	ldr	r3, [pc, #244]	; (dd20 <_strtod_l+0xe1c>)
    dc2a:	2700      	movs	r7, #0
    dc2c:	930c      	str	r3, [sp, #48]	; 0x30
    dc2e:	e4b3      	b.n	d598 <_strtod_l+0x694>
    dc30:	f7ff f950 	bl	ced4 <sulp>
    dc34:	0002      	movs	r2, r0
    dc36:	000b      	movs	r3, r1
    dc38:	0020      	movs	r0, r4
    dc3a:	0029      	movs	r1, r5
    dc3c:	f7f9 f9ec 	bl	7018 <__aeabi_dsub>
    dc40:	2200      	movs	r2, #0
    dc42:	2300      	movs	r3, #0
    dc44:	0004      	movs	r4, r0
    dc46:	000d      	movs	r5, r1
    dc48:	f7f9 fe0c 	bl	7864 <__aeabi_dcmpeq>
    dc4c:	2800      	cmp	r0, #0
    dc4e:	d000      	beq.n	dc52 <_strtod_l+0xd4e>
    dc50:	e72c      	b.n	daac <_strtod_l+0xba8>
    dc52:	e773      	b.n	db3c <_strtod_l+0xc38>
    dc54:	aa20      	add	r2, sp, #128	; 0x80
    dc56:	4933      	ldr	r1, [pc, #204]	; (dd24 <_strtod_l+0xe20>)
    dc58:	a81d      	add	r0, sp, #116	; 0x74
    dc5a:	f001 f87b 	bl	ed54 <__hexnan>
    dc5e:	2805      	cmp	r0, #5
    dc60:	d001      	beq.n	dc66 <_strtod_l+0xd62>
    dc62:	f7ff faea 	bl	d23a <_strtod_l+0x336>
    dc66:	9b21      	ldr	r3, [sp, #132]	; 0x84
    dc68:	4a22      	ldr	r2, [pc, #136]	; (dcf4 <_strtod_l+0xdf0>)
    dc6a:	431a      	orrs	r2, r3
    dc6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    dc6e:	9205      	str	r2, [sp, #20]
    dc70:	9304      	str	r3, [sp, #16]
    dc72:	f7ff fae6 	bl	d242 <_strtod_l+0x33e>
    dc76:	2c00      	cmp	r4, #0
    dc78:	dd00      	ble.n	dc7c <_strtod_l+0xd78>
    dc7a:	e63b      	b.n	d8f4 <_strtod_l+0x9f0>
    dc7c:	e651      	b.n	d922 <_strtod_l+0xa1e>
    dc7e:	9b04      	ldr	r3, [sp, #16]
    dc80:	9c05      	ldr	r4, [sp, #20]
    dc82:	236b      	movs	r3, #107	; 0x6b
    dc84:	0061      	lsls	r1, r4, #1
    dc86:	0d49      	lsrs	r1, r1, #21
    dc88:	0022      	movs	r2, r4
    dc8a:	1a5b      	subs	r3, r3, r1
    dc8c:	2b00      	cmp	r3, #0
    dc8e:	dc00      	bgt.n	dc92 <_strtod_l+0xd8e>
    dc90:	e647      	b.n	d922 <_strtod_l+0xa1e>
    dc92:	2b1f      	cmp	r3, #31
    dc94:	dd5c      	ble.n	dd50 <_strtod_l+0xe4c>
    dc96:	2100      	movs	r1, #0
    dc98:	9104      	str	r1, [sp, #16]
    dc9a:	2b34      	cmp	r3, #52	; 0x34
    dc9c:	dd62      	ble.n	dd64 <_strtod_l+0xe60>
    dc9e:	23dc      	movs	r3, #220	; 0xdc
    dca0:	049b      	lsls	r3, r3, #18
    dca2:	9305      	str	r3, [sp, #20]
    dca4:	e63d      	b.n	d922 <_strtod_l+0xa1e>
    dca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dca8:	9904      	ldr	r1, [sp, #16]
    dcaa:	2b00      	cmp	r3, #0
    dcac:	d03e      	beq.n	dd2c <_strtod_l+0xe28>
    dcae:	20d4      	movs	r0, #212	; 0xd4
    dcb0:	4b10      	ldr	r3, [pc, #64]	; (dcf4 <_strtod_l+0xdf0>)
    dcb2:	04c0      	lsls	r0, r0, #19
    dcb4:	4013      	ands	r3, r2
    dcb6:	4283      	cmp	r3, r0
    dcb8:	d838      	bhi.n	dd2c <_strtod_l+0xe28>
    dcba:	206b      	movs	r0, #107	; 0x6b
    dcbc:	0d1b      	lsrs	r3, r3, #20
    dcbe:	1ac0      	subs	r0, r0, r3
    dcc0:	2301      	movs	r3, #1
    dcc2:	425b      	negs	r3, r3
    dcc4:	4083      	lsls	r3, r0
    dcc6:	428b      	cmp	r3, r1
    dcc8:	d000      	beq.n	dccc <_strtod_l+0xdc8>
    dcca:	e71f      	b.n	db0c <_strtod_l+0xc08>
    dccc:	4916      	ldr	r1, [pc, #88]	; (dd28 <_strtod_l+0xe24>)
    dcce:	428a      	cmp	r2, r1
    dcd0:	d05a      	beq.n	dd88 <_strtod_l+0xe84>
    dcd2:	2180      	movs	r1, #128	; 0x80
    dcd4:	4b07      	ldr	r3, [pc, #28]	; (dcf4 <_strtod_l+0xdf0>)
    dcd6:	0349      	lsls	r1, r1, #13
    dcd8:	401a      	ands	r2, r3
    dcda:	0013      	movs	r3, r2
    dcdc:	468c      	mov	ip, r1
    dcde:	4463      	add	r3, ip
    dce0:	9305      	str	r3, [sp, #20]
    dce2:	2300      	movs	r3, #0
    dce4:	9304      	str	r3, [sp, #16]
    dce6:	9c04      	ldr	r4, [sp, #16]
    dce8:	9d05      	ldr	r5, [sp, #20]
    dcea:	e727      	b.n	db3c <_strtod_l+0xc38>
    dcec:	00012584 	.word	0x00012584
    dcf0:	7fffffff 	.word	0x7fffffff
    dcf4:	7ff00000 	.word	0x7ff00000
    dcf8:	00000433 	.word	0x00000433
    dcfc:	ffefffff 	.word	0xffefffff
    dd00:	000123f8 	.word	0x000123f8
    dd04:	3ff00000 	.word	0x3ff00000
    dd08:	0001259c 	.word	0x0001259c
    dd0c:	000125a0 	.word	0x000125a0
    dd10:	000fffff 	.word	0x000fffff
    dd14:	39500000 	.word	0x39500000
    dd18:	bfe00000 	.word	0xbfe00000
    dd1c:	3fe00000 	.word	0x3fe00000
    dd20:	000123d0 	.word	0x000123d0
    dd24:	000125c0 	.word	0x000125c0
    dd28:	7fefffff 	.word	0x7fefffff
    dd2c:	2301      	movs	r3, #1
    dd2e:	425b      	negs	r3, r3
    dd30:	e7c9      	b.n	dcc6 <_strtod_l+0xdc2>
    dd32:	9a05      	ldr	r2, [sp, #20]
    dd34:	4b16      	ldr	r3, [pc, #88]	; (dd90 <_strtod_l+0xe8c>)
    dd36:	4013      	ands	r3, r2
    dd38:	4a16      	ldr	r2, [pc, #88]	; (dd94 <_strtod_l+0xe90>)
    dd3a:	4694      	mov	ip, r2
    dd3c:	4a16      	ldr	r2, [pc, #88]	; (dd98 <_strtod_l+0xe94>)
    dd3e:	4463      	add	r3, ip
    dd40:	431a      	orrs	r2, r3
    dd42:	2301      	movs	r3, #1
    dd44:	425b      	negs	r3, r3
    dd46:	9205      	str	r2, [sp, #20]
    dd48:	9304      	str	r3, [sp, #16]
    dd4a:	9c04      	ldr	r4, [sp, #16]
    dd4c:	9d05      	ldr	r5, [sp, #20]
    dd4e:	e6f5      	b.n	db3c <_strtod_l+0xc38>
    dd50:	2201      	movs	r2, #1
    dd52:	4252      	negs	r2, r2
    dd54:	409a      	lsls	r2, r3
    dd56:	9b04      	ldr	r3, [sp, #16]
    dd58:	4013      	ands	r3, r2
    dd5a:	9304      	str	r3, [sp, #16]
    dd5c:	e5e1      	b.n	d922 <_strtod_l+0xa1e>
    dd5e:	9004      	str	r0, [sp, #16]
    dd60:	9105      	str	r1, [sp, #20]
    dd62:	e5da      	b.n	d91a <_strtod_l+0xa16>
    dd64:	2101      	movs	r1, #1
    dd66:	3b20      	subs	r3, #32
    dd68:	4249      	negs	r1, r1
    dd6a:	4099      	lsls	r1, r3
    dd6c:	400a      	ands	r2, r1
    dd6e:	9205      	str	r2, [sp, #20]
    dd70:	e5d7      	b.n	d922 <_strtod_l+0xa1e>
    dd72:	002f      	movs	r7, r5
    dd74:	991d      	ldr	r1, [sp, #116]	; 0x74
    dd76:	3501      	adds	r5, #1
    dd78:	e58a      	b.n	d890 <_strtod_l+0x98c>
    dd7a:	991d      	ldr	r1, [sp, #116]	; 0x74
    dd7c:	0023      	movs	r3, r4
    dd7e:	e593      	b.n	d8a8 <_strtod_l+0x9a4>
    dd80:	9004      	str	r0, [sp, #16]
    dd82:	9105      	str	r1, [sp, #20]
    dd84:	f7ff fc08 	bl	d598 <_strtod_l+0x694>
    dd88:	3301      	adds	r3, #1
    dd8a:	d1a2      	bne.n	dcd2 <_strtod_l+0xdce>
    dd8c:	e522      	b.n	d7d4 <_strtod_l+0x8d0>
    dd8e:	46c0      	nop			; (mov r8, r8)
    dd90:	7ff00000 	.word	0x7ff00000
    dd94:	fff00000 	.word	0xfff00000
    dd98:	000fffff 	.word	0x000fffff

0000dd9c <_strtod_r>:
    dd9c:	4b05      	ldr	r3, [pc, #20]	; (ddb4 <_strtod_r+0x18>)
    dd9e:	b510      	push	{r4, lr}
    dda0:	681b      	ldr	r3, [r3, #0]
    dda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    dda4:	2b00      	cmp	r3, #0
    dda6:	d002      	beq.n	ddae <_strtod_r+0x12>
    dda8:	f7ff f8ac 	bl	cf04 <_strtod_l>
    ddac:	bd10      	pop	{r4, pc}
    ddae:	4b02      	ldr	r3, [pc, #8]	; (ddb8 <_strtod_r+0x1c>)
    ddb0:	e7fa      	b.n	dda8 <_strtod_r+0xc>
    ddb2:	46c0      	nop			; (mov r8, r8)
    ddb4:	20000080 	.word	0x20000080
    ddb8:	200004b4 	.word	0x200004b4

0000ddbc <_strtoll_l.isra.0>:
    ddbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ddbe:	46de      	mov	lr, fp
    ddc0:	4657      	mov	r7, sl
    ddc2:	464e      	mov	r6, r9
    ddc4:	4645      	mov	r5, r8
    ddc6:	b5e0      	push	{r5, r6, r7, lr}
    ddc8:	001f      	movs	r7, r3
    ddca:	2308      	movs	r3, #8
    ddcc:	b089      	sub	sp, #36	; 0x24
    ddce:	9007      	str	r0, [sp, #28]
    ddd0:	9106      	str	r1, [sp, #24]
    ddd2:	4693      	mov	fp, r2
    ddd4:	000e      	movs	r6, r1
    ddd6:	4698      	mov	r8, r3
    ddd8:	e000      	b.n	dddc <_strtoll_l.isra.0+0x20>
    ddda:	002e      	movs	r6, r5
    dddc:	9812      	ldr	r0, [sp, #72]	; 0x48
    ddde:	7834      	ldrb	r4, [r6, #0]
    dde0:	f7fd ffea 	bl	bdb8 <__locale_ctype_ptr_l>
    dde4:	4642      	mov	r2, r8
    dde6:	1900      	adds	r0, r0, r4
    dde8:	7843      	ldrb	r3, [r0, #1]
    ddea:	1c75      	adds	r5, r6, #1
    ddec:	421a      	tst	r2, r3
    ddee:	d1f4      	bne.n	ddda <_strtoll_l.isra.0+0x1e>
    ddf0:	2c2d      	cmp	r4, #45	; 0x2d
    ddf2:	d100      	bne.n	ddf6 <_strtoll_l.isra.0+0x3a>
    ddf4:	e087      	b.n	df06 <_strtoll_l.isra.0+0x14a>
    ddf6:	2300      	movs	r3, #0
    ddf8:	9303      	str	r3, [sp, #12]
    ddfa:	2c2b      	cmp	r4, #43	; 0x2b
    ddfc:	d100      	bne.n	de00 <_strtoll_l.isra.0+0x44>
    ddfe:	e094      	b.n	df2a <_strtoll_l.isra.0+0x16e>
    de00:	2f00      	cmp	r7, #0
    de02:	d00e      	beq.n	de22 <_strtoll_l.isra.0+0x66>
    de04:	2f10      	cmp	r7, #16
    de06:	d100      	bne.n	de0a <_strtoll_l.isra.0+0x4e>
    de08:	e092      	b.n	df30 <_strtoll_l.isra.0+0x174>
    de0a:	17fb      	asrs	r3, r7, #31
    de0c:	4699      	mov	r9, r3
    de0e:	9b03      	ldr	r3, [sp, #12]
    de10:	46ba      	mov	sl, r7
    de12:	2b00      	cmp	r3, #0
    de14:	d110      	bne.n	de38 <_strtoll_l.isra.0+0x7c>
    de16:	2301      	movs	r3, #1
    de18:	425b      	negs	r3, r3
    de1a:	9304      	str	r3, [sp, #16]
    de1c:	4b55      	ldr	r3, [pc, #340]	; (df74 <_strtoll_l.isra.0+0x1b8>)
    de1e:	9305      	str	r3, [sp, #20]
    de20:	e00f      	b.n	de42 <_strtoll_l.isra.0+0x86>
    de22:	2c30      	cmp	r4, #48	; 0x30
    de24:	d100      	bne.n	de28 <_strtoll_l.isra.0+0x6c>
    de26:	e092      	b.n	df4e <_strtoll_l.isra.0+0x192>
    de28:	230a      	movs	r3, #10
    de2a:	469a      	mov	sl, r3
    de2c:	2300      	movs	r3, #0
    de2e:	270a      	movs	r7, #10
    de30:	4699      	mov	r9, r3
    de32:	9b03      	ldr	r3, [sp, #12]
    de34:	2b00      	cmp	r3, #0
    de36:	d0ee      	beq.n	de16 <_strtoll_l.isra.0+0x5a>
    de38:	2300      	movs	r3, #0
    de3a:	9304      	str	r3, [sp, #16]
    de3c:	2380      	movs	r3, #128	; 0x80
    de3e:	061b      	lsls	r3, r3, #24
    de40:	9305      	str	r3, [sp, #20]
    de42:	9904      	ldr	r1, [sp, #16]
    de44:	9e05      	ldr	r6, [sp, #20]
    de46:	4688      	mov	r8, r1
    de48:	0008      	movs	r0, r1
    de4a:	4652      	mov	r2, sl
    de4c:	0031      	movs	r1, r6
    de4e:	464b      	mov	r3, r9
    de50:	f7f7 fdcc 	bl	59ec <__aeabi_uldivmod>
    de54:	4640      	mov	r0, r8
    de56:	9202      	str	r2, [sp, #8]
    de58:	0031      	movs	r1, r6
    de5a:	4652      	mov	r2, sl
    de5c:	464b      	mov	r3, r9
    de5e:	f7f7 fdc5 	bl	59ec <__aeabi_uldivmod>
    de62:	2200      	movs	r2, #0
    de64:	4680      	mov	r8, r0
    de66:	000e      	movs	r6, r1
    de68:	2000      	movs	r0, #0
    de6a:	2100      	movs	r1, #0
    de6c:	e019      	b.n	dea2 <_strtoll_l.isra.0+0xe6>
    de6e:	001c      	movs	r4, r3
    de70:	42a7      	cmp	r7, r4
    de72:	dd21      	ble.n	deb8 <_strtoll_l.isra.0+0xfc>
    de74:	1c53      	adds	r3, r2, #1
    de76:	d012      	beq.n	de9e <_strtoll_l.isra.0+0xe2>
    de78:	42b1      	cmp	r1, r6
    de7a:	d83b      	bhi.n	def4 <_strtoll_l.isra.0+0x138>
    de7c:	d101      	bne.n	de82 <_strtoll_l.isra.0+0xc6>
    de7e:	4540      	cmp	r0, r8
    de80:	d838      	bhi.n	def4 <_strtoll_l.isra.0+0x138>
    de82:	4580      	cmp	r8, r0
    de84:	d031      	beq.n	deea <_strtoll_l.isra.0+0x12e>
    de86:	4652      	mov	r2, sl
    de88:	464b      	mov	r3, r9
    de8a:	f7f7 fdcf 	bl	5a2c <__aeabi_lmul>
    de8e:	17e3      	asrs	r3, r4, #31
    de90:	9400      	str	r4, [sp, #0]
    de92:	9301      	str	r3, [sp, #4]
    de94:	9b00      	ldr	r3, [sp, #0]
    de96:	9c01      	ldr	r4, [sp, #4]
    de98:	2201      	movs	r2, #1
    de9a:	18c0      	adds	r0, r0, r3
    de9c:	4161      	adcs	r1, r4
    de9e:	782c      	ldrb	r4, [r5, #0]
    dea0:	3501      	adds	r5, #1
    dea2:	0023      	movs	r3, r4
    dea4:	3b30      	subs	r3, #48	; 0x30
    dea6:	2b09      	cmp	r3, #9
    dea8:	d9e1      	bls.n	de6e <_strtoll_l.isra.0+0xb2>
    deaa:	0023      	movs	r3, r4
    deac:	3b41      	subs	r3, #65	; 0x41
    deae:	2b19      	cmp	r3, #25
    deb0:	d823      	bhi.n	defa <_strtoll_l.isra.0+0x13e>
    deb2:	3c37      	subs	r4, #55	; 0x37
    deb4:	42a7      	cmp	r7, r4
    deb6:	dcdd      	bgt.n	de74 <_strtoll_l.isra.0+0xb8>
    deb8:	1c53      	adds	r3, r2, #1
    deba:	d029      	beq.n	df10 <_strtoll_l.isra.0+0x154>
    debc:	9b03      	ldr	r3, [sp, #12]
    debe:	2b00      	cmp	r3, #0
    dec0:	d004      	beq.n	decc <_strtoll_l.isra.0+0x110>
    dec2:	0003      	movs	r3, r0
    dec4:	000c      	movs	r4, r1
    dec6:	2100      	movs	r1, #0
    dec8:	4258      	negs	r0, r3
    deca:	41a1      	sbcs	r1, r4
    decc:	465b      	mov	r3, fp
    dece:	2b00      	cmp	r3, #0
    ded0:	d004      	beq.n	dedc <_strtoll_l.isra.0+0x120>
    ded2:	9b06      	ldr	r3, [sp, #24]
    ded4:	2a00      	cmp	r2, #0
    ded6:	d125      	bne.n	df24 <_strtoll_l.isra.0+0x168>
    ded8:	465a      	mov	r2, fp
    deda:	6013      	str	r3, [r2, #0]
    dedc:	b009      	add	sp, #36	; 0x24
    dede:	bc3c      	pop	{r2, r3, r4, r5}
    dee0:	4690      	mov	r8, r2
    dee2:	4699      	mov	r9, r3
    dee4:	46a2      	mov	sl, r4
    dee6:	46ab      	mov	fp, r5
    dee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    deea:	428e      	cmp	r6, r1
    deec:	d1cb      	bne.n	de86 <_strtoll_l.isra.0+0xca>
    deee:	9b02      	ldr	r3, [sp, #8]
    def0:	42a3      	cmp	r3, r4
    def2:	dac8      	bge.n	de86 <_strtoll_l.isra.0+0xca>
    def4:	2201      	movs	r2, #1
    def6:	4252      	negs	r2, r2
    def8:	e7d1      	b.n	de9e <_strtoll_l.isra.0+0xe2>
    defa:	0023      	movs	r3, r4
    defc:	3b61      	subs	r3, #97	; 0x61
    defe:	2b19      	cmp	r3, #25
    df00:	d8da      	bhi.n	deb8 <_strtoll_l.isra.0+0xfc>
    df02:	3c57      	subs	r4, #87	; 0x57
    df04:	e7b4      	b.n	de70 <_strtoll_l.isra.0+0xb4>
    df06:	2301      	movs	r3, #1
    df08:	782c      	ldrb	r4, [r5, #0]
    df0a:	9303      	str	r3, [sp, #12]
    df0c:	1cb5      	adds	r5, r6, #2
    df0e:	e777      	b.n	de00 <_strtoll_l.isra.0+0x44>
    df10:	2322      	movs	r3, #34	; 0x22
    df12:	9a07      	ldr	r2, [sp, #28]
    df14:	6013      	str	r3, [r2, #0]
    df16:	465b      	mov	r3, fp
    df18:	2b00      	cmp	r3, #0
    df1a:	d028      	beq.n	df6e <_strtoll_l.isra.0+0x1b2>
    df1c:	1e6b      	subs	r3, r5, #1
    df1e:	9804      	ldr	r0, [sp, #16]
    df20:	9905      	ldr	r1, [sp, #20]
    df22:	e7d9      	b.n	ded8 <_strtoll_l.isra.0+0x11c>
    df24:	9004      	str	r0, [sp, #16]
    df26:	9105      	str	r1, [sp, #20]
    df28:	e7f8      	b.n	df1c <_strtoll_l.isra.0+0x160>
    df2a:	782c      	ldrb	r4, [r5, #0]
    df2c:	1cb5      	adds	r5, r6, #2
    df2e:	e767      	b.n	de00 <_strtoll_l.isra.0+0x44>
    df30:	2c30      	cmp	r4, #48	; 0x30
    df32:	d117      	bne.n	df64 <_strtoll_l.isra.0+0x1a8>
    df34:	2220      	movs	r2, #32
    df36:	782b      	ldrb	r3, [r5, #0]
    df38:	4393      	bics	r3, r2
    df3a:	2b58      	cmp	r3, #88	; 0x58
    df3c:	d112      	bne.n	df64 <_strtoll_l.isra.0+0x1a8>
    df3e:	2310      	movs	r3, #16
    df40:	469a      	mov	sl, r3
    df42:	2300      	movs	r3, #0
    df44:	786c      	ldrb	r4, [r5, #1]
    df46:	4699      	mov	r9, r3
    df48:	3502      	adds	r5, #2
    df4a:	2710      	movs	r7, #16
    df4c:	e771      	b.n	de32 <_strtoll_l.isra.0+0x76>
    df4e:	2220      	movs	r2, #32
    df50:	782b      	ldrb	r3, [r5, #0]
    df52:	4393      	bics	r3, r2
    df54:	2b58      	cmp	r3, #88	; 0x58
    df56:	d0f2      	beq.n	df3e <_strtoll_l.isra.0+0x182>
    df58:	2308      	movs	r3, #8
    df5a:	469a      	mov	sl, r3
    df5c:	2300      	movs	r3, #0
    df5e:	2708      	movs	r7, #8
    df60:	4699      	mov	r9, r3
    df62:	e766      	b.n	de32 <_strtoll_l.isra.0+0x76>
    df64:	2310      	movs	r3, #16
    df66:	469a      	mov	sl, r3
    df68:	2300      	movs	r3, #0
    df6a:	4699      	mov	r9, r3
    df6c:	e761      	b.n	de32 <_strtoll_l.isra.0+0x76>
    df6e:	9804      	ldr	r0, [sp, #16]
    df70:	9905      	ldr	r1, [sp, #20]
    df72:	e7b3      	b.n	dedc <_strtoll_l.isra.0+0x120>
    df74:	7fffffff 	.word	0x7fffffff

0000df78 <_strtoll_r>:
    df78:	b510      	push	{r4, lr}
    df7a:	4c06      	ldr	r4, [pc, #24]	; (df94 <_strtoll_r+0x1c>)
    df7c:	b082      	sub	sp, #8
    df7e:	6824      	ldr	r4, [r4, #0]
    df80:	6b64      	ldr	r4, [r4, #52]	; 0x34
    df82:	2c00      	cmp	r4, #0
    df84:	d004      	beq.n	df90 <_strtoll_r+0x18>
    df86:	9400      	str	r4, [sp, #0]
    df88:	f7ff ff18 	bl	ddbc <_strtoll_l.isra.0>
    df8c:	b002      	add	sp, #8
    df8e:	bd10      	pop	{r4, pc}
    df90:	4c01      	ldr	r4, [pc, #4]	; (df98 <_strtoll_r+0x20>)
    df92:	e7f8      	b.n	df86 <_strtoll_r+0xe>
    df94:	20000080 	.word	0x20000080
    df98:	200004b4 	.word	0x200004b4

0000df9c <_strtoul_l.isra.0>:
    df9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    df9e:	4657      	mov	r7, sl
    dfa0:	464e      	mov	r6, r9
    dfa2:	46de      	mov	lr, fp
    dfa4:	4645      	mov	r5, r8
    dfa6:	b5e0      	push	{r5, r6, r7, lr}
    dfa8:	001e      	movs	r6, r3
    dfaa:	2308      	movs	r3, #8
    dfac:	b083      	sub	sp, #12
    dfae:	4683      	mov	fp, r0
    dfb0:	4689      	mov	r9, r1
    dfb2:	4692      	mov	sl, r2
    dfb4:	000f      	movs	r7, r1
    dfb6:	4698      	mov	r8, r3
    dfb8:	e000      	b.n	dfbc <_strtoul_l.isra.0+0x20>
    dfba:	002f      	movs	r7, r5
    dfbc:	980c      	ldr	r0, [sp, #48]	; 0x30
    dfbe:	783c      	ldrb	r4, [r7, #0]
    dfc0:	f7fd fefa 	bl	bdb8 <__locale_ctype_ptr_l>
    dfc4:	4642      	mov	r2, r8
    dfc6:	1900      	adds	r0, r0, r4
    dfc8:	7843      	ldrb	r3, [r0, #1]
    dfca:	1c7d      	adds	r5, r7, #1
    dfcc:	421a      	tst	r2, r3
    dfce:	d1f4      	bne.n	dfba <_strtoul_l.isra.0+0x1e>
    dfd0:	2c2d      	cmp	r4, #45	; 0x2d
    dfd2:	d05b      	beq.n	e08c <_strtoul_l.isra.0+0xf0>
    dfd4:	2300      	movs	r3, #0
    dfd6:	9301      	str	r3, [sp, #4]
    dfd8:	2c2b      	cmp	r4, #43	; 0x2b
    dfda:	d05c      	beq.n	e096 <_strtoul_l.isra.0+0xfa>
    dfdc:	2e00      	cmp	r6, #0
    dfde:	d00e      	beq.n	dffe <_strtoul_l.isra.0+0x62>
    dfe0:	2e10      	cmp	r6, #16
    dfe2:	d05b      	beq.n	e09c <_strtoul_l.isra.0+0x100>
    dfe4:	2001      	movs	r0, #1
    dfe6:	0031      	movs	r1, r6
    dfe8:	4240      	negs	r0, r0
    dfea:	f7f7 fb89 	bl	5700 <__udivsi3>
    dfee:	0007      	movs	r7, r0
    dff0:	2001      	movs	r0, #1
    dff2:	0031      	movs	r1, r6
    dff4:	4240      	negs	r0, r0
    dff6:	46b0      	mov	r8, r6
    dff8:	f7f7 fc08 	bl	580c <__aeabi_uidivmod>
    dffc:	e006      	b.n	e00c <_strtoul_l.isra.0+0x70>
    dffe:	2c30      	cmp	r4, #48	; 0x30
    e000:	d05b      	beq.n	e0ba <_strtoul_l.isra.0+0x11e>
    e002:	230a      	movs	r3, #10
    e004:	2105      	movs	r1, #5
    e006:	4698      	mov	r8, r3
    e008:	260a      	movs	r6, #10
    e00a:	4f34      	ldr	r7, [pc, #208]	; (e0dc <_strtoul_l.isra.0+0x140>)
    e00c:	2200      	movs	r2, #0
    e00e:	2000      	movs	r0, #0
    e010:	0023      	movs	r3, r4
    e012:	3b30      	subs	r3, #48	; 0x30
    e014:	2b09      	cmp	r3, #9
    e016:	d907      	bls.n	e028 <_strtoul_l.isra.0+0x8c>
    e018:	3b11      	subs	r3, #17
    e01a:	2b19      	cmp	r3, #25
    e01c:	d903      	bls.n	e026 <_strtoul_l.isra.0+0x8a>
    e01e:	0023      	movs	r3, r4
    e020:	3b61      	subs	r3, #97	; 0x61
    e022:	2b19      	cmp	r3, #25
    e024:	d80e      	bhi.n	e044 <_strtoul_l.isra.0+0xa8>
    e026:	330a      	adds	r3, #10
    e028:	429e      	cmp	r6, r3
    e02a:	dd0b      	ble.n	e044 <_strtoul_l.isra.0+0xa8>
    e02c:	2a00      	cmp	r2, #0
    e02e:	db20      	blt.n	e072 <_strtoul_l.isra.0+0xd6>
    e030:	42b8      	cmp	r0, r7
    e032:	d81e      	bhi.n	e072 <_strtoul_l.isra.0+0xd6>
    e034:	d01b      	beq.n	e06e <_strtoul_l.isra.0+0xd2>
    e036:	4642      	mov	r2, r8
    e038:	4350      	muls	r0, r2
    e03a:	2201      	movs	r2, #1
    e03c:	1818      	adds	r0, r3, r0
    e03e:	782c      	ldrb	r4, [r5, #0]
    e040:	3501      	adds	r5, #1
    e042:	e7e5      	b.n	e010 <_strtoul_l.isra.0+0x74>
    e044:	2a00      	cmp	r2, #0
    e046:	db17      	blt.n	e078 <_strtoul_l.isra.0+0xdc>
    e048:	9b01      	ldr	r3, [sp, #4]
    e04a:	2b00      	cmp	r3, #0
    e04c:	d000      	beq.n	e050 <_strtoul_l.isra.0+0xb4>
    e04e:	4240      	negs	r0, r0
    e050:	4653      	mov	r3, sl
    e052:	2b00      	cmp	r3, #0
    e054:	d004      	beq.n	e060 <_strtoul_l.isra.0+0xc4>
    e056:	464b      	mov	r3, r9
    e058:	2a00      	cmp	r2, #0
    e05a:	d115      	bne.n	e088 <_strtoul_l.isra.0+0xec>
    e05c:	4652      	mov	r2, sl
    e05e:	6013      	str	r3, [r2, #0]
    e060:	b003      	add	sp, #12
    e062:	bc3c      	pop	{r2, r3, r4, r5}
    e064:	4690      	mov	r8, r2
    e066:	4699      	mov	r9, r3
    e068:	46a2      	mov	sl, r4
    e06a:	46ab      	mov	fp, r5
    e06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e06e:	428b      	cmp	r3, r1
    e070:	dde1      	ble.n	e036 <_strtoul_l.isra.0+0x9a>
    e072:	2201      	movs	r2, #1
    e074:	4252      	negs	r2, r2
    e076:	e7e2      	b.n	e03e <_strtoul_l.isra.0+0xa2>
    e078:	2322      	movs	r3, #34	; 0x22
    e07a:	465a      	mov	r2, fp
    e07c:	2001      	movs	r0, #1
    e07e:	6013      	str	r3, [r2, #0]
    e080:	4653      	mov	r3, sl
    e082:	4240      	negs	r0, r0
    e084:	2b00      	cmp	r3, #0
    e086:	d0eb      	beq.n	e060 <_strtoul_l.isra.0+0xc4>
    e088:	1e6b      	subs	r3, r5, #1
    e08a:	e7e7      	b.n	e05c <_strtoul_l.isra.0+0xc0>
    e08c:	2301      	movs	r3, #1
    e08e:	782c      	ldrb	r4, [r5, #0]
    e090:	9301      	str	r3, [sp, #4]
    e092:	1cbd      	adds	r5, r7, #2
    e094:	e7a2      	b.n	dfdc <_strtoul_l.isra.0+0x40>
    e096:	782c      	ldrb	r4, [r5, #0]
    e098:	1cbd      	adds	r5, r7, #2
    e09a:	e79f      	b.n	dfdc <_strtoul_l.isra.0+0x40>
    e09c:	2c30      	cmp	r4, #48	; 0x30
    e09e:	d117      	bne.n	e0d0 <_strtoul_l.isra.0+0x134>
    e0a0:	2220      	movs	r2, #32
    e0a2:	782b      	ldrb	r3, [r5, #0]
    e0a4:	4393      	bics	r3, r2
    e0a6:	2b58      	cmp	r3, #88	; 0x58
    e0a8:	d112      	bne.n	e0d0 <_strtoul_l.isra.0+0x134>
    e0aa:	2310      	movs	r3, #16
    e0ac:	786c      	ldrb	r4, [r5, #1]
    e0ae:	210f      	movs	r1, #15
    e0b0:	3502      	adds	r5, #2
    e0b2:	4f0b      	ldr	r7, [pc, #44]	; (e0e0 <_strtoul_l.isra.0+0x144>)
    e0b4:	4698      	mov	r8, r3
    e0b6:	2610      	movs	r6, #16
    e0b8:	e7a8      	b.n	e00c <_strtoul_l.isra.0+0x70>
    e0ba:	2220      	movs	r2, #32
    e0bc:	782b      	ldrb	r3, [r5, #0]
    e0be:	4393      	bics	r3, r2
    e0c0:	2b58      	cmp	r3, #88	; 0x58
    e0c2:	d0f2      	beq.n	e0aa <_strtoul_l.isra.0+0x10e>
    e0c4:	2308      	movs	r3, #8
    e0c6:	2107      	movs	r1, #7
    e0c8:	4f06      	ldr	r7, [pc, #24]	; (e0e4 <_strtoul_l.isra.0+0x148>)
    e0ca:	4698      	mov	r8, r3
    e0cc:	2608      	movs	r6, #8
    e0ce:	e79d      	b.n	e00c <_strtoul_l.isra.0+0x70>
    e0d0:	2310      	movs	r3, #16
    e0d2:	210f      	movs	r1, #15
    e0d4:	4f02      	ldr	r7, [pc, #8]	; (e0e0 <_strtoul_l.isra.0+0x144>)
    e0d6:	4698      	mov	r8, r3
    e0d8:	e798      	b.n	e00c <_strtoul_l.isra.0+0x70>
    e0da:	46c0      	nop			; (mov r8, r8)
    e0dc:	19999999 	.word	0x19999999
    e0e0:	0fffffff 	.word	0x0fffffff
    e0e4:	1fffffff 	.word	0x1fffffff

0000e0e8 <_strtoul_r>:
    e0e8:	b510      	push	{r4, lr}
    e0ea:	4c06      	ldr	r4, [pc, #24]	; (e104 <_strtoul_r+0x1c>)
    e0ec:	b082      	sub	sp, #8
    e0ee:	6824      	ldr	r4, [r4, #0]
    e0f0:	6b64      	ldr	r4, [r4, #52]	; 0x34
    e0f2:	2c00      	cmp	r4, #0
    e0f4:	d004      	beq.n	e100 <_strtoul_r+0x18>
    e0f6:	9400      	str	r4, [sp, #0]
    e0f8:	f7ff ff50 	bl	df9c <_strtoul_l.isra.0>
    e0fc:	b002      	add	sp, #8
    e0fe:	bd10      	pop	{r4, pc}
    e100:	4c01      	ldr	r4, [pc, #4]	; (e108 <_strtoul_r+0x20>)
    e102:	e7f8      	b.n	e0f6 <_strtoul_r+0xe>
    e104:	20000080 	.word	0x20000080
    e108:	200004b4 	.word	0x200004b4

0000e10c <_strtoull_l.isra.0>:
    e10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e10e:	46de      	mov	lr, fp
    e110:	4657      	mov	r7, sl
    e112:	464e      	mov	r6, r9
    e114:	4645      	mov	r5, r8
    e116:	b5e0      	push	{r5, r6, r7, lr}
    e118:	001e      	movs	r6, r3
    e11a:	2308      	movs	r3, #8
    e11c:	b087      	sub	sp, #28
    e11e:	9005      	str	r0, [sp, #20]
    e120:	9104      	str	r1, [sp, #16]
    e122:	4693      	mov	fp, r2
    e124:	000f      	movs	r7, r1
    e126:	4698      	mov	r8, r3
    e128:	e000      	b.n	e12c <_strtoull_l.isra.0+0x20>
    e12a:	002f      	movs	r7, r5
    e12c:	9810      	ldr	r0, [sp, #64]	; 0x40
    e12e:	783c      	ldrb	r4, [r7, #0]
    e130:	f7fd fe42 	bl	bdb8 <__locale_ctype_ptr_l>
    e134:	4642      	mov	r2, r8
    e136:	1900      	adds	r0, r0, r4
    e138:	7843      	ldrb	r3, [r0, #1]
    e13a:	1c7d      	adds	r5, r7, #1
    e13c:	421a      	tst	r2, r3
    e13e:	d1f4      	bne.n	e12a <_strtoull_l.isra.0+0x1e>
    e140:	2c2d      	cmp	r4, #45	; 0x2d
    e142:	d100      	bne.n	e146 <_strtoull_l.isra.0+0x3a>
    e144:	e085      	b.n	e252 <_strtoull_l.isra.0+0x146>
    e146:	2300      	movs	r3, #0
    e148:	9303      	str	r3, [sp, #12]
    e14a:	2c2b      	cmp	r4, #43	; 0x2b
    e14c:	d100      	bne.n	e150 <_strtoull_l.isra.0+0x44>
    e14e:	e085      	b.n	e25c <_strtoull_l.isra.0+0x150>
    e150:	2e00      	cmp	r6, #0
    e152:	d016      	beq.n	e182 <_strtoull_l.isra.0+0x76>
    e154:	2e10      	cmp	r6, #16
    e156:	d100      	bne.n	e15a <_strtoull_l.isra.0+0x4e>
    e158:	e083      	b.n	e262 <_strtoull_l.isra.0+0x156>
    e15a:	17f3      	asrs	r3, r6, #31
    e15c:	0032      	movs	r2, r6
    e15e:	2001      	movs	r0, #1
    e160:	4240      	negs	r0, r0
    e162:	17c1      	asrs	r1, r0, #31
    e164:	4699      	mov	r9, r3
    e166:	f7f7 fc41 	bl	59ec <__aeabi_uldivmod>
    e16a:	0032      	movs	r2, r6
    e16c:	4680      	mov	r8, r0
    e16e:	000f      	movs	r7, r1
    e170:	464b      	mov	r3, r9
    e172:	2001      	movs	r0, #1
    e174:	4240      	negs	r0, r0
    e176:	17c1      	asrs	r1, r0, #31
    e178:	f7f7 fc38 	bl	59ec <__aeabi_uldivmod>
    e17c:	46b2      	mov	sl, r6
    e17e:	9202      	str	r2, [sp, #8]
    e180:	e00c      	b.n	e19c <_strtoull_l.isra.0+0x90>
    e182:	2c30      	cmp	r4, #48	; 0x30
    e184:	d100      	bne.n	e188 <_strtoull_l.isra.0+0x7c>
    e186:	e080      	b.n	e28a <_strtoull_l.isra.0+0x17e>
    e188:	2305      	movs	r3, #5
    e18a:	9302      	str	r3, [sp, #8]
    e18c:	4b4c      	ldr	r3, [pc, #304]	; (e2c0 <_strtoull_l.isra.0+0x1b4>)
    e18e:	260a      	movs	r6, #10
    e190:	4698      	mov	r8, r3
    e192:	230a      	movs	r3, #10
    e194:	469a      	mov	sl, r3
    e196:	2300      	movs	r3, #0
    e198:	4699      	mov	r9, r3
    e19a:	4f4a      	ldr	r7, [pc, #296]	; (e2c4 <_strtoull_l.isra.0+0x1b8>)
    e19c:	2200      	movs	r2, #0
    e19e:	2000      	movs	r0, #0
    e1a0:	2100      	movs	r1, #0
    e1a2:	e019      	b.n	e1d8 <_strtoull_l.isra.0+0xcc>
    e1a4:	001c      	movs	r4, r3
    e1a6:	42a6      	cmp	r6, r4
    e1a8:	dd21      	ble.n	e1ee <_strtoull_l.isra.0+0xe2>
    e1aa:	2a00      	cmp	r2, #0
    e1ac:	db3d      	blt.n	e22a <_strtoull_l.isra.0+0x11e>
    e1ae:	42b9      	cmp	r1, r7
    e1b0:	d83b      	bhi.n	e22a <_strtoull_l.isra.0+0x11e>
    e1b2:	d101      	bne.n	e1b8 <_strtoull_l.isra.0+0xac>
    e1b4:	4540      	cmp	r0, r8
    e1b6:	d838      	bhi.n	e22a <_strtoull_l.isra.0+0x11e>
    e1b8:	4540      	cmp	r0, r8
    e1ba:	d031      	beq.n	e220 <_strtoull_l.isra.0+0x114>
    e1bc:	4652      	mov	r2, sl
    e1be:	464b      	mov	r3, r9
    e1c0:	f7f7 fc34 	bl	5a2c <__aeabi_lmul>
    e1c4:	17e3      	asrs	r3, r4, #31
    e1c6:	9400      	str	r4, [sp, #0]
    e1c8:	9301      	str	r3, [sp, #4]
    e1ca:	9b00      	ldr	r3, [sp, #0]
    e1cc:	9c01      	ldr	r4, [sp, #4]
    e1ce:	2201      	movs	r2, #1
    e1d0:	18c0      	adds	r0, r0, r3
    e1d2:	4161      	adcs	r1, r4
    e1d4:	782c      	ldrb	r4, [r5, #0]
    e1d6:	3501      	adds	r5, #1
    e1d8:	0023      	movs	r3, r4
    e1da:	3b30      	subs	r3, #48	; 0x30
    e1dc:	2b09      	cmp	r3, #9
    e1de:	d9e1      	bls.n	e1a4 <_strtoull_l.isra.0+0x98>
    e1e0:	0023      	movs	r3, r4
    e1e2:	3b41      	subs	r3, #65	; 0x41
    e1e4:	2b19      	cmp	r3, #25
    e1e6:	d823      	bhi.n	e230 <_strtoull_l.isra.0+0x124>
    e1e8:	3c37      	subs	r4, #55	; 0x37
    e1ea:	42a6      	cmp	r6, r4
    e1ec:	dcdd      	bgt.n	e1aa <_strtoull_l.isra.0+0x9e>
    e1ee:	2a00      	cmp	r2, #0
    e1f0:	db24      	blt.n	e23c <_strtoull_l.isra.0+0x130>
    e1f2:	9b03      	ldr	r3, [sp, #12]
    e1f4:	2b00      	cmp	r3, #0
    e1f6:	d004      	beq.n	e202 <_strtoull_l.isra.0+0xf6>
    e1f8:	0003      	movs	r3, r0
    e1fa:	000c      	movs	r4, r1
    e1fc:	2100      	movs	r1, #0
    e1fe:	4258      	negs	r0, r3
    e200:	41a1      	sbcs	r1, r4
    e202:	465b      	mov	r3, fp
    e204:	2b00      	cmp	r3, #0
    e206:	d004      	beq.n	e212 <_strtoull_l.isra.0+0x106>
    e208:	9b04      	ldr	r3, [sp, #16]
    e20a:	2a00      	cmp	r2, #0
    e20c:	d11f      	bne.n	e24e <_strtoull_l.isra.0+0x142>
    e20e:	465a      	mov	r2, fp
    e210:	6013      	str	r3, [r2, #0]
    e212:	b007      	add	sp, #28
    e214:	bc3c      	pop	{r2, r3, r4, r5}
    e216:	4690      	mov	r8, r2
    e218:	4699      	mov	r9, r3
    e21a:	46a2      	mov	sl, r4
    e21c:	46ab      	mov	fp, r5
    e21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e220:	42b9      	cmp	r1, r7
    e222:	d1cb      	bne.n	e1bc <_strtoull_l.isra.0+0xb0>
    e224:	9b02      	ldr	r3, [sp, #8]
    e226:	429c      	cmp	r4, r3
    e228:	ddc8      	ble.n	e1bc <_strtoull_l.isra.0+0xb0>
    e22a:	2201      	movs	r2, #1
    e22c:	4252      	negs	r2, r2
    e22e:	e7d1      	b.n	e1d4 <_strtoull_l.isra.0+0xc8>
    e230:	0023      	movs	r3, r4
    e232:	3b61      	subs	r3, #97	; 0x61
    e234:	2b19      	cmp	r3, #25
    e236:	d8da      	bhi.n	e1ee <_strtoull_l.isra.0+0xe2>
    e238:	3c57      	subs	r4, #87	; 0x57
    e23a:	e7b4      	b.n	e1a6 <_strtoull_l.isra.0+0x9a>
    e23c:	2322      	movs	r3, #34	; 0x22
    e23e:	9a05      	ldr	r2, [sp, #20]
    e240:	2001      	movs	r0, #1
    e242:	4240      	negs	r0, r0
    e244:	17c1      	asrs	r1, r0, #31
    e246:	6013      	str	r3, [r2, #0]
    e248:	465b      	mov	r3, fp
    e24a:	2b00      	cmp	r3, #0
    e24c:	d0e1      	beq.n	e212 <_strtoull_l.isra.0+0x106>
    e24e:	1e6b      	subs	r3, r5, #1
    e250:	e7dd      	b.n	e20e <_strtoull_l.isra.0+0x102>
    e252:	2301      	movs	r3, #1
    e254:	782c      	ldrb	r4, [r5, #0]
    e256:	9303      	str	r3, [sp, #12]
    e258:	1cbd      	adds	r5, r7, #2
    e25a:	e779      	b.n	e150 <_strtoull_l.isra.0+0x44>
    e25c:	782c      	ldrb	r4, [r5, #0]
    e25e:	1cbd      	adds	r5, r7, #2
    e260:	e776      	b.n	e150 <_strtoull_l.isra.0+0x44>
    e262:	2c30      	cmp	r4, #48	; 0x30
    e264:	d121      	bne.n	e2aa <_strtoull_l.isra.0+0x19e>
    e266:	2220      	movs	r2, #32
    e268:	782b      	ldrb	r3, [r5, #0]
    e26a:	4393      	bics	r3, r2
    e26c:	2b58      	cmp	r3, #88	; 0x58
    e26e:	d11c      	bne.n	e2aa <_strtoull_l.isra.0+0x19e>
    e270:	230f      	movs	r3, #15
    e272:	9302      	str	r3, [sp, #8]
    e274:	3b10      	subs	r3, #16
    e276:	4698      	mov	r8, r3
    e278:	3311      	adds	r3, #17
    e27a:	469a      	mov	sl, r3
    e27c:	2300      	movs	r3, #0
    e27e:	786c      	ldrb	r4, [r5, #1]
    e280:	4f11      	ldr	r7, [pc, #68]	; (e2c8 <_strtoull_l.isra.0+0x1bc>)
    e282:	3502      	adds	r5, #2
    e284:	4699      	mov	r9, r3
    e286:	2610      	movs	r6, #16
    e288:	e788      	b.n	e19c <_strtoull_l.isra.0+0x90>
    e28a:	2220      	movs	r2, #32
    e28c:	782b      	ldrb	r3, [r5, #0]
    e28e:	4393      	bics	r3, r2
    e290:	2b58      	cmp	r3, #88	; 0x58
    e292:	d0ed      	beq.n	e270 <_strtoull_l.isra.0+0x164>
    e294:	2307      	movs	r3, #7
    e296:	9302      	str	r3, [sp, #8]
    e298:	3b08      	subs	r3, #8
    e29a:	4698      	mov	r8, r3
    e29c:	3309      	adds	r3, #9
    e29e:	469a      	mov	sl, r3
    e2a0:	2300      	movs	r3, #0
    e2a2:	4f0a      	ldr	r7, [pc, #40]	; (e2cc <_strtoull_l.isra.0+0x1c0>)
    e2a4:	4699      	mov	r9, r3
    e2a6:	2608      	movs	r6, #8
    e2a8:	e778      	b.n	e19c <_strtoull_l.isra.0+0x90>
    e2aa:	230f      	movs	r3, #15
    e2ac:	9302      	str	r3, [sp, #8]
    e2ae:	3b10      	subs	r3, #16
    e2b0:	4698      	mov	r8, r3
    e2b2:	3311      	adds	r3, #17
    e2b4:	469a      	mov	sl, r3
    e2b6:	2300      	movs	r3, #0
    e2b8:	4f03      	ldr	r7, [pc, #12]	; (e2c8 <_strtoull_l.isra.0+0x1bc>)
    e2ba:	4699      	mov	r9, r3
    e2bc:	e76e      	b.n	e19c <_strtoull_l.isra.0+0x90>
    e2be:	46c0      	nop			; (mov r8, r8)
    e2c0:	99999999 	.word	0x99999999
    e2c4:	19999999 	.word	0x19999999
    e2c8:	0fffffff 	.word	0x0fffffff
    e2cc:	1fffffff 	.word	0x1fffffff

0000e2d0 <_strtoull_r>:
    e2d0:	b510      	push	{r4, lr}
    e2d2:	4c06      	ldr	r4, [pc, #24]	; (e2ec <_strtoull_r+0x1c>)
    e2d4:	b082      	sub	sp, #8
    e2d6:	6824      	ldr	r4, [r4, #0]
    e2d8:	6b64      	ldr	r4, [r4, #52]	; 0x34
    e2da:	2c00      	cmp	r4, #0
    e2dc:	d004      	beq.n	e2e8 <_strtoull_r+0x18>
    e2de:	9400      	str	r4, [sp, #0]
    e2e0:	f7ff ff14 	bl	e10c <_strtoull_l.isra.0>
    e2e4:	b002      	add	sp, #8
    e2e6:	bd10      	pop	{r4, pc}
    e2e8:	4c01      	ldr	r4, [pc, #4]	; (e2f0 <_strtoull_r+0x20>)
    e2ea:	e7f8      	b.n	e2de <_strtoull_r+0xe>
    e2ec:	20000080 	.word	0x20000080
    e2f0:	200004b4 	.word	0x200004b4

0000e2f4 <__ssprint_r>:
    e2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2f6:	4657      	mov	r7, sl
    e2f8:	464e      	mov	r6, r9
    e2fa:	46de      	mov	lr, fp
    e2fc:	4645      	mov	r5, r8
    e2fe:	b5e0      	push	{r5, r6, r7, lr}
    e300:	6893      	ldr	r3, [r2, #8]
    e302:	b083      	sub	sp, #12
    e304:	9001      	str	r0, [sp, #4]
    e306:	000e      	movs	r6, r1
    e308:	4692      	mov	sl, r2
    e30a:	2b00      	cmp	r3, #0
    e30c:	d070      	beq.n	e3f0 <__ssprint_r+0xfc>
    e30e:	688d      	ldr	r5, [r1, #8]
    e310:	6813      	ldr	r3, [r2, #0]
    e312:	002c      	movs	r4, r5
    e314:	6808      	ldr	r0, [r1, #0]
    e316:	001d      	movs	r5, r3
    e318:	e046      	b.n	e3a8 <__ssprint_r+0xb4>
    e31a:	2290      	movs	r2, #144	; 0x90
    e31c:	89b3      	ldrh	r3, [r6, #12]
    e31e:	00d2      	lsls	r2, r2, #3
    e320:	4213      	tst	r3, r2
    e322:	d030      	beq.n	e386 <__ssprint_r+0x92>
    e324:	6931      	ldr	r1, [r6, #16]
    e326:	1a42      	subs	r2, r0, r1
    e328:	4693      	mov	fp, r2
    e32a:	6970      	ldr	r0, [r6, #20]
    e32c:	0042      	lsls	r2, r0, #1
    e32e:	1812      	adds	r2, r2, r0
    e330:	0fd0      	lsrs	r0, r2, #31
    e332:	1882      	adds	r2, r0, r2
    e334:	1052      	asrs	r2, r2, #1
    e336:	4690      	mov	r8, r2
    e338:	465a      	mov	r2, fp
    e33a:	1c50      	adds	r0, r2, #1
    e33c:	19c0      	adds	r0, r0, r7
    e33e:	4642      	mov	r2, r8
    e340:	4540      	cmp	r0, r8
    e342:	d901      	bls.n	e348 <__ssprint_r+0x54>
    e344:	4680      	mov	r8, r0
    e346:	0002      	movs	r2, r0
    e348:	2080      	movs	r0, #128	; 0x80
    e34a:	00c0      	lsls	r0, r0, #3
    e34c:	4203      	tst	r3, r0
    e34e:	d038      	beq.n	e3c2 <__ssprint_r+0xce>
    e350:	0011      	movs	r1, r2
    e352:	9801      	ldr	r0, [sp, #4]
    e354:	f7fd fd56 	bl	be04 <_malloc_r>
    e358:	1e04      	subs	r4, r0, #0
    e35a:	d054      	beq.n	e406 <__ssprint_r+0x112>
    e35c:	465a      	mov	r2, fp
    e35e:	6931      	ldr	r1, [r6, #16]
    e360:	f7f9 fc42 	bl	7be8 <memcpy>
    e364:	89b3      	ldrh	r3, [r6, #12]
    e366:	4a2a      	ldr	r2, [pc, #168]	; (e410 <__ssprint_r+0x11c>)
    e368:	4013      	ands	r3, r2
    e36a:	2280      	movs	r2, #128	; 0x80
    e36c:	4313      	orrs	r3, r2
    e36e:	81b3      	strh	r3, [r6, #12]
    e370:	4643      	mov	r3, r8
    e372:	0020      	movs	r0, r4
    e374:	465a      	mov	r2, fp
    e376:	6134      	str	r4, [r6, #16]
    e378:	46b8      	mov	r8, r7
    e37a:	003c      	movs	r4, r7
    e37c:	4458      	add	r0, fp
    e37e:	6173      	str	r3, [r6, #20]
    e380:	1a9b      	subs	r3, r3, r2
    e382:	6030      	str	r0, [r6, #0]
    e384:	60b3      	str	r3, [r6, #8]
    e386:	4642      	mov	r2, r8
    e388:	4649      	mov	r1, r9
    e38a:	f000 fdb7 	bl	eefc <memmove>
    e38e:	68b3      	ldr	r3, [r6, #8]
    e390:	1b1c      	subs	r4, r3, r4
    e392:	6833      	ldr	r3, [r6, #0]
    e394:	60b4      	str	r4, [r6, #8]
    e396:	4443      	add	r3, r8
    e398:	6033      	str	r3, [r6, #0]
    e39a:	0018      	movs	r0, r3
    e39c:	4653      	mov	r3, sl
    e39e:	689b      	ldr	r3, [r3, #8]
    e3a0:	1bdf      	subs	r7, r3, r7
    e3a2:	4653      	mov	r3, sl
    e3a4:	609f      	str	r7, [r3, #8]
    e3a6:	d023      	beq.n	e3f0 <__ssprint_r+0xfc>
    e3a8:	686f      	ldr	r7, [r5, #4]
    e3aa:	002b      	movs	r3, r5
    e3ac:	3508      	adds	r5, #8
    e3ae:	2f00      	cmp	r7, #0
    e3b0:	d0fa      	beq.n	e3a8 <__ssprint_r+0xb4>
    e3b2:	681b      	ldr	r3, [r3, #0]
    e3b4:	46a0      	mov	r8, r4
    e3b6:	4699      	mov	r9, r3
    e3b8:	42a7      	cmp	r7, r4
    e3ba:	d2ae      	bcs.n	e31a <__ssprint_r+0x26>
    e3bc:	003c      	movs	r4, r7
    e3be:	46b8      	mov	r8, r7
    e3c0:	e7e1      	b.n	e386 <__ssprint_r+0x92>
    e3c2:	9801      	ldr	r0, [sp, #4]
    e3c4:	f000 fdea 	bl	ef9c <_realloc_r>
    e3c8:	1e04      	subs	r4, r0, #0
    e3ca:	d1d1      	bne.n	e370 <__ssprint_r+0x7c>
    e3cc:	9c01      	ldr	r4, [sp, #4]
    e3ce:	6931      	ldr	r1, [r6, #16]
    e3d0:	0020      	movs	r0, r4
    e3d2:	f7fd fbf7 	bl	bbc4 <_free_r>
    e3d6:	230c      	movs	r3, #12
    e3d8:	6023      	str	r3, [r4, #0]
    e3da:	2240      	movs	r2, #64	; 0x40
    e3dc:	89b3      	ldrh	r3, [r6, #12]
    e3de:	2001      	movs	r0, #1
    e3e0:	4313      	orrs	r3, r2
    e3e2:	81b3      	strh	r3, [r6, #12]
    e3e4:	4652      	mov	r2, sl
    e3e6:	2300      	movs	r3, #0
    e3e8:	4240      	negs	r0, r0
    e3ea:	6093      	str	r3, [r2, #8]
    e3ec:	6053      	str	r3, [r2, #4]
    e3ee:	e003      	b.n	e3f8 <__ssprint_r+0x104>
    e3f0:	2300      	movs	r3, #0
    e3f2:	4652      	mov	r2, sl
    e3f4:	2000      	movs	r0, #0
    e3f6:	6053      	str	r3, [r2, #4]
    e3f8:	b003      	add	sp, #12
    e3fa:	bc3c      	pop	{r2, r3, r4, r5}
    e3fc:	4690      	mov	r8, r2
    e3fe:	4699      	mov	r9, r3
    e400:	46a2      	mov	sl, r4
    e402:	46ab      	mov	fp, r5
    e404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e406:	230c      	movs	r3, #12
    e408:	9a01      	ldr	r2, [sp, #4]
    e40a:	6013      	str	r3, [r2, #0]
    e40c:	e7e5      	b.n	e3da <__ssprint_r+0xe6>
    e40e:	46c0      	nop			; (mov r8, r8)
    e410:	fffffb7f 	.word	0xfffffb7f

0000e414 <_sungetc_r>:
    e414:	b570      	push	{r4, r5, r6, lr}
    e416:	0014      	movs	r4, r2
    e418:	1c4b      	adds	r3, r1, #1
    e41a:	d01b      	beq.n	e454 <_sungetc_r+0x40>
    e41c:	8993      	ldrh	r3, [r2, #12]
    e41e:	2220      	movs	r2, #32
    e420:	25ff      	movs	r5, #255	; 0xff
    e422:	4393      	bics	r3, r2
    e424:	81a3      	strh	r3, [r4, #12]
    e426:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e428:	b2ce      	uxtb	r6, r1
    e42a:	400d      	ands	r5, r1
    e42c:	2b00      	cmp	r3, #0
    e42e:	d014      	beq.n	e45a <_sungetc_r+0x46>
    e430:	6863      	ldr	r3, [r4, #4]
    e432:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e434:	4293      	cmp	r3, r2
    e436:	da08      	bge.n	e44a <_sungetc_r+0x36>
    e438:	6823      	ldr	r3, [r4, #0]
    e43a:	3b01      	subs	r3, #1
    e43c:	6023      	str	r3, [r4, #0]
    e43e:	701e      	strb	r6, [r3, #0]
    e440:	6863      	ldr	r3, [r4, #4]
    e442:	3301      	adds	r3, #1
    e444:	6063      	str	r3, [r4, #4]
    e446:	0028      	movs	r0, r5
    e448:	bd70      	pop	{r4, r5, r6, pc}
    e44a:	0021      	movs	r1, r4
    e44c:	f000 f88c 	bl	e568 <__submore>
    e450:	2800      	cmp	r0, #0
    e452:	d0f1      	beq.n	e438 <_sungetc_r+0x24>
    e454:	2501      	movs	r5, #1
    e456:	426d      	negs	r5, r5
    e458:	e7f5      	b.n	e446 <_sungetc_r+0x32>
    e45a:	6922      	ldr	r2, [r4, #16]
    e45c:	6823      	ldr	r3, [r4, #0]
    e45e:	2a00      	cmp	r2, #0
    e460:	d005      	beq.n	e46e <_sungetc_r+0x5a>
    e462:	429a      	cmp	r2, r3
    e464:	d203      	bcs.n	e46e <_sungetc_r+0x5a>
    e466:	1e5a      	subs	r2, r3, #1
    e468:	7811      	ldrb	r1, [r2, #0]
    e46a:	428d      	cmp	r5, r1
    e46c:	d00f      	beq.n	e48e <_sungetc_r+0x7a>
    e46e:	63a3      	str	r3, [r4, #56]	; 0x38
    e470:	0023      	movs	r3, r4
    e472:	3340      	adds	r3, #64	; 0x40
    e474:	6323      	str	r3, [r4, #48]	; 0x30
    e476:	2303      	movs	r3, #3
    e478:	6862      	ldr	r2, [r4, #4]
    e47a:	6363      	str	r3, [r4, #52]	; 0x34
    e47c:	333f      	adds	r3, #63	; 0x3f
    e47e:	63e2      	str	r2, [r4, #60]	; 0x3c
    e480:	54e6      	strb	r6, [r4, r3]
    e482:	0023      	movs	r3, r4
    e484:	3342      	adds	r3, #66	; 0x42
    e486:	6023      	str	r3, [r4, #0]
    e488:	2301      	movs	r3, #1
    e48a:	6063      	str	r3, [r4, #4]
    e48c:	e7db      	b.n	e446 <_sungetc_r+0x32>
    e48e:	6863      	ldr	r3, [r4, #4]
    e490:	6022      	str	r2, [r4, #0]
    e492:	3301      	adds	r3, #1
    e494:	6063      	str	r3, [r4, #4]
    e496:	e7d6      	b.n	e446 <_sungetc_r+0x32>

0000e498 <__ssrefill_r>:
    e498:	b510      	push	{r4, lr}
    e49a:	000c      	movs	r4, r1
    e49c:	6b09      	ldr	r1, [r1, #48]	; 0x30
    e49e:	2900      	cmp	r1, #0
    e4a0:	d00f      	beq.n	e4c2 <__ssrefill_r+0x2a>
    e4a2:	0023      	movs	r3, r4
    e4a4:	3340      	adds	r3, #64	; 0x40
    e4a6:	4299      	cmp	r1, r3
    e4a8:	d001      	beq.n	e4ae <__ssrefill_r+0x16>
    e4aa:	f7fd fb8b 	bl	bbc4 <_free_r>
    e4ae:	2300      	movs	r3, #0
    e4b0:	6323      	str	r3, [r4, #48]	; 0x30
    e4b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e4b4:	6063      	str	r3, [r4, #4]
    e4b6:	2b00      	cmp	r3, #0
    e4b8:	d003      	beq.n	e4c2 <__ssrefill_r+0x2a>
    e4ba:	2000      	movs	r0, #0
    e4bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e4be:	6023      	str	r3, [r4, #0]
    e4c0:	bd10      	pop	{r4, pc}
    e4c2:	6923      	ldr	r3, [r4, #16]
    e4c4:	2220      	movs	r2, #32
    e4c6:	6023      	str	r3, [r4, #0]
    e4c8:	2300      	movs	r3, #0
    e4ca:	2001      	movs	r0, #1
    e4cc:	6063      	str	r3, [r4, #4]
    e4ce:	89a3      	ldrh	r3, [r4, #12]
    e4d0:	4240      	negs	r0, r0
    e4d2:	4313      	orrs	r3, r2
    e4d4:	81a3      	strh	r3, [r4, #12]
    e4d6:	e7f3      	b.n	e4c0 <__ssrefill_r+0x28>

0000e4d8 <_sfread_r>:
    e4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4da:	46de      	mov	lr, fp
    e4dc:	4657      	mov	r7, sl
    e4de:	4645      	mov	r5, r8
    e4e0:	464e      	mov	r6, r9
    e4e2:	469b      	mov	fp, r3
    e4e4:	b5e0      	push	{r5, r6, r7, lr}
    e4e6:	b083      	sub	sp, #12
    e4e8:	0013      	movs	r3, r2
    e4ea:	9201      	str	r2, [sp, #4]
    e4ec:	465a      	mov	r2, fp
    e4ee:	4353      	muls	r3, r2
    e4f0:	4680      	mov	r8, r0
    e4f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e4f4:	469a      	mov	sl, r3
    e4f6:	2b00      	cmp	r3, #0
    e4f8:	d026      	beq.n	e548 <_sfread_r+0x70>
    e4fa:	001f      	movs	r7, r3
    e4fc:	2300      	movs	r3, #0
    e4fe:	000e      	movs	r6, r1
    e500:	4699      	mov	r9, r3
    e502:	e011      	b.n	e528 <_sfread_r+0x50>
    e504:	6821      	ldr	r1, [r4, #0]
    e506:	0030      	movs	r0, r6
    e508:	002a      	movs	r2, r5
    e50a:	f7f9 fb6d 	bl	7be8 <memcpy>
    e50e:	6823      	ldr	r3, [r4, #0]
    e510:	0021      	movs	r1, r4
    e512:	195b      	adds	r3, r3, r5
    e514:	6023      	str	r3, [r4, #0]
    e516:	464b      	mov	r3, r9
    e518:	4640      	mov	r0, r8
    e51a:	6063      	str	r3, [r4, #4]
    e51c:	1976      	adds	r6, r6, r5
    e51e:	1b7f      	subs	r7, r7, r5
    e520:	f7ff ffba 	bl	e498 <__ssrefill_r>
    e524:	2800      	cmp	r0, #0
    e526:	d117      	bne.n	e558 <_sfread_r+0x80>
    e528:	6865      	ldr	r5, [r4, #4]
    e52a:	42af      	cmp	r7, r5
    e52c:	d8ea      	bhi.n	e504 <_sfread_r+0x2c>
    e52e:	003a      	movs	r2, r7
    e530:	6821      	ldr	r1, [r4, #0]
    e532:	0030      	movs	r0, r6
    e534:	f7f9 fb58 	bl	7be8 <memcpy>
    e538:	6863      	ldr	r3, [r4, #4]
    e53a:	46da      	mov	sl, fp
    e53c:	1bdb      	subs	r3, r3, r7
    e53e:	6063      	str	r3, [r4, #4]
    e540:	6823      	ldr	r3, [r4, #0]
    e542:	469c      	mov	ip, r3
    e544:	4467      	add	r7, ip
    e546:	6027      	str	r7, [r4, #0]
    e548:	4650      	mov	r0, sl
    e54a:	b003      	add	sp, #12
    e54c:	bc3c      	pop	{r2, r3, r4, r5}
    e54e:	4690      	mov	r8, r2
    e550:	4699      	mov	r9, r3
    e552:	46a2      	mov	sl, r4
    e554:	46ab      	mov	fp, r5
    e556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e558:	4653      	mov	r3, sl
    e55a:	9901      	ldr	r1, [sp, #4]
    e55c:	1bd8      	subs	r0, r3, r7
    e55e:	f7f7 f8cf 	bl	5700 <__udivsi3>
    e562:	4682      	mov	sl, r0
    e564:	e7f0      	b.n	e548 <_sfread_r+0x70>
    e566:	46c0      	nop			; (mov r8, r8)

0000e568 <__submore>:
    e568:	b5f0      	push	{r4, r5, r6, r7, lr}
    e56a:	000c      	movs	r4, r1
    e56c:	0023      	movs	r3, r4
    e56e:	46c6      	mov	lr, r8
    e570:	6b09      	ldr	r1, [r1, #48]	; 0x30
    e572:	3340      	adds	r3, #64	; 0x40
    e574:	b500      	push	{lr}
    e576:	4299      	cmp	r1, r3
    e578:	d015      	beq.n	e5a6 <__submore+0x3e>
    e57a:	6b66      	ldr	r6, [r4, #52]	; 0x34
    e57c:	0077      	lsls	r7, r6, #1
    e57e:	003a      	movs	r2, r7
    e580:	f000 fd0c 	bl	ef9c <_realloc_r>
    e584:	1e05      	subs	r5, r0, #0
    e586:	d028      	beq.n	e5da <__submore+0x72>
    e588:	1983      	adds	r3, r0, r6
    e58a:	4698      	mov	r8, r3
    e58c:	0001      	movs	r1, r0
    e58e:	0032      	movs	r2, r6
    e590:	0018      	movs	r0, r3
    e592:	f7f9 fb29 	bl	7be8 <memcpy>
    e596:	4643      	mov	r3, r8
    e598:	2000      	movs	r0, #0
    e59a:	6023      	str	r3, [r4, #0]
    e59c:	6325      	str	r5, [r4, #48]	; 0x30
    e59e:	6367      	str	r7, [r4, #52]	; 0x34
    e5a0:	bc04      	pop	{r2}
    e5a2:	4690      	mov	r8, r2
    e5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e5a6:	2580      	movs	r5, #128	; 0x80
    e5a8:	00ed      	lsls	r5, r5, #3
    e5aa:	0029      	movs	r1, r5
    e5ac:	f7fd fc2a 	bl	be04 <_malloc_r>
    e5b0:	2800      	cmp	r0, #0
    e5b2:	d012      	beq.n	e5da <__submore+0x72>
    e5b4:	2342      	movs	r3, #66	; 0x42
    e5b6:	6320      	str	r0, [r4, #48]	; 0x30
    e5b8:	6365      	str	r5, [r4, #52]	; 0x34
    e5ba:	5ce2      	ldrb	r2, [r4, r3]
    e5bc:	4b08      	ldr	r3, [pc, #32]	; (e5e0 <__submore+0x78>)
    e5be:	54c2      	strb	r2, [r0, r3]
    e5c0:	2341      	movs	r3, #65	; 0x41
    e5c2:	5ce2      	ldrb	r2, [r4, r3]
    e5c4:	4b07      	ldr	r3, [pc, #28]	; (e5e4 <__submore+0x7c>)
    e5c6:	54c2      	strb	r2, [r0, r3]
    e5c8:	2340      	movs	r3, #64	; 0x40
    e5ca:	5ce2      	ldrb	r2, [r4, r3]
    e5cc:	4b06      	ldr	r3, [pc, #24]	; (e5e8 <__submore+0x80>)
    e5ce:	469c      	mov	ip, r3
    e5d0:	54c2      	strb	r2, [r0, r3]
    e5d2:	4460      	add	r0, ip
    e5d4:	6020      	str	r0, [r4, #0]
    e5d6:	2000      	movs	r0, #0
    e5d8:	e7e2      	b.n	e5a0 <__submore+0x38>
    e5da:	2001      	movs	r0, #1
    e5dc:	4240      	negs	r0, r0
    e5de:	e7df      	b.n	e5a0 <__submore+0x38>
    e5e0:	000003ff 	.word	0x000003ff
    e5e4:	000003fe 	.word	0x000003fe
    e5e8:	000003fd 	.word	0x000003fd

0000e5ec <__ascii_wctomb>:
    e5ec:	2900      	cmp	r1, #0
    e5ee:	d004      	beq.n	e5fa <__ascii_wctomb+0xe>
    e5f0:	2aff      	cmp	r2, #255	; 0xff
    e5f2:	d804      	bhi.n	e5fe <__ascii_wctomb+0x12>
    e5f4:	2001      	movs	r0, #1
    e5f6:	700a      	strb	r2, [r1, #0]
    e5f8:	4770      	bx	lr
    e5fa:	2000      	movs	r0, #0
    e5fc:	e7fc      	b.n	e5f8 <__ascii_wctomb+0xc>
    e5fe:	238a      	movs	r3, #138	; 0x8a
    e600:	6003      	str	r3, [r0, #0]
    e602:	2001      	movs	r0, #1
    e604:	4240      	negs	r0, r0
    e606:	e7f7      	b.n	e5f8 <__ascii_wctomb+0xc>

0000e608 <__register_exitproc>:
    e608:	b5f0      	push	{r4, r5, r6, r7, lr}
    e60a:	464e      	mov	r6, r9
    e60c:	4645      	mov	r5, r8
    e60e:	46de      	mov	lr, fp
    e610:	4657      	mov	r7, sl
    e612:	b5e0      	push	{r5, r6, r7, lr}
    e614:	4d36      	ldr	r5, [pc, #216]	; (e6f0 <__register_exitproc+0xe8>)
    e616:	b083      	sub	sp, #12
    e618:	0006      	movs	r6, r0
    e61a:	6828      	ldr	r0, [r5, #0]
    e61c:	4698      	mov	r8, r3
    e61e:	000f      	movs	r7, r1
    e620:	4691      	mov	r9, r2
    e622:	f7fd fbeb 	bl	bdfc <__retarget_lock_acquire_recursive>
    e626:	4b33      	ldr	r3, [pc, #204]	; (e6f4 <__register_exitproc+0xec>)
    e628:	681c      	ldr	r4, [r3, #0]
    e62a:	23a4      	movs	r3, #164	; 0xa4
    e62c:	005b      	lsls	r3, r3, #1
    e62e:	58e0      	ldr	r0, [r4, r3]
    e630:	2800      	cmp	r0, #0
    e632:	d052      	beq.n	e6da <__register_exitproc+0xd2>
    e634:	6843      	ldr	r3, [r0, #4]
    e636:	2b1f      	cmp	r3, #31
    e638:	dc13      	bgt.n	e662 <__register_exitproc+0x5a>
    e63a:	1c5a      	adds	r2, r3, #1
    e63c:	9201      	str	r2, [sp, #4]
    e63e:	2e00      	cmp	r6, #0
    e640:	d128      	bne.n	e694 <__register_exitproc+0x8c>
    e642:	9a01      	ldr	r2, [sp, #4]
    e644:	3302      	adds	r3, #2
    e646:	009b      	lsls	r3, r3, #2
    e648:	6042      	str	r2, [r0, #4]
    e64a:	501f      	str	r7, [r3, r0]
    e64c:	6828      	ldr	r0, [r5, #0]
    e64e:	f7fd fbd7 	bl	be00 <__retarget_lock_release_recursive>
    e652:	2000      	movs	r0, #0
    e654:	b003      	add	sp, #12
    e656:	bc3c      	pop	{r2, r3, r4, r5}
    e658:	4690      	mov	r8, r2
    e65a:	4699      	mov	r9, r3
    e65c:	46a2      	mov	sl, r4
    e65e:	46ab      	mov	fp, r5
    e660:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e662:	4b25      	ldr	r3, [pc, #148]	; (e6f8 <__register_exitproc+0xf0>)
    e664:	2b00      	cmp	r3, #0
    e666:	d03d      	beq.n	e6e4 <__register_exitproc+0xdc>
    e668:	20c8      	movs	r0, #200	; 0xc8
    e66a:	0040      	lsls	r0, r0, #1
    e66c:	e000      	b.n	e670 <__register_exitproc+0x68>
    e66e:	bf00      	nop
    e670:	2800      	cmp	r0, #0
    e672:	d037      	beq.n	e6e4 <__register_exitproc+0xdc>
    e674:	22a4      	movs	r2, #164	; 0xa4
    e676:	2300      	movs	r3, #0
    e678:	0052      	lsls	r2, r2, #1
    e67a:	58a1      	ldr	r1, [r4, r2]
    e67c:	6043      	str	r3, [r0, #4]
    e67e:	6001      	str	r1, [r0, #0]
    e680:	50a0      	str	r0, [r4, r2]
    e682:	3240      	adds	r2, #64	; 0x40
    e684:	5083      	str	r3, [r0, r2]
    e686:	3204      	adds	r2, #4
    e688:	5083      	str	r3, [r0, r2]
    e68a:	3301      	adds	r3, #1
    e68c:	9301      	str	r3, [sp, #4]
    e68e:	2300      	movs	r3, #0
    e690:	2e00      	cmp	r6, #0
    e692:	d0d6      	beq.n	e642 <__register_exitproc+0x3a>
    e694:	009a      	lsls	r2, r3, #2
    e696:	4692      	mov	sl, r2
    e698:	4482      	add	sl, r0
    e69a:	464a      	mov	r2, r9
    e69c:	2188      	movs	r1, #136	; 0x88
    e69e:	4654      	mov	r4, sl
    e6a0:	5062      	str	r2, [r4, r1]
    e6a2:	22c4      	movs	r2, #196	; 0xc4
    e6a4:	0052      	lsls	r2, r2, #1
    e6a6:	4691      	mov	r9, r2
    e6a8:	4481      	add	r9, r0
    e6aa:	464a      	mov	r2, r9
    e6ac:	3987      	subs	r1, #135	; 0x87
    e6ae:	4099      	lsls	r1, r3
    e6b0:	6812      	ldr	r2, [r2, #0]
    e6b2:	468b      	mov	fp, r1
    e6b4:	430a      	orrs	r2, r1
    e6b6:	4694      	mov	ip, r2
    e6b8:	464a      	mov	r2, r9
    e6ba:	4661      	mov	r1, ip
    e6bc:	6011      	str	r1, [r2, #0]
    e6be:	2284      	movs	r2, #132	; 0x84
    e6c0:	4641      	mov	r1, r8
    e6c2:	0052      	lsls	r2, r2, #1
    e6c4:	50a1      	str	r1, [r4, r2]
    e6c6:	2e02      	cmp	r6, #2
    e6c8:	d1bb      	bne.n	e642 <__register_exitproc+0x3a>
    e6ca:	0002      	movs	r2, r0
    e6cc:	465c      	mov	r4, fp
    e6ce:	328d      	adds	r2, #141	; 0x8d
    e6d0:	32ff      	adds	r2, #255	; 0xff
    e6d2:	6811      	ldr	r1, [r2, #0]
    e6d4:	430c      	orrs	r4, r1
    e6d6:	6014      	str	r4, [r2, #0]
    e6d8:	e7b3      	b.n	e642 <__register_exitproc+0x3a>
    e6da:	0020      	movs	r0, r4
    e6dc:	304d      	adds	r0, #77	; 0x4d
    e6de:	30ff      	adds	r0, #255	; 0xff
    e6e0:	50e0      	str	r0, [r4, r3]
    e6e2:	e7a7      	b.n	e634 <__register_exitproc+0x2c>
    e6e4:	6828      	ldr	r0, [r5, #0]
    e6e6:	f7fd fb8b 	bl	be00 <__retarget_lock_release_recursive>
    e6ea:	2001      	movs	r0, #1
    e6ec:	4240      	negs	r0, r0
    e6ee:	e7b1      	b.n	e654 <__register_exitproc+0x4c>
    e6f0:	200004b0 	.word	0x200004b0
    e6f4:	00011d5c 	.word	0x00011d5c
    e6f8:	00000000 	.word	0x00000000

0000e6fc <_calloc_r>:
    e6fc:	b510      	push	{r4, lr}
    e6fe:	4351      	muls	r1, r2
    e700:	f7fd fb80 	bl	be04 <_malloc_r>
    e704:	1e04      	subs	r4, r0, #0
    e706:	d01c      	beq.n	e742 <_calloc_r+0x46>
    e708:	0003      	movs	r3, r0
    e70a:	3b08      	subs	r3, #8
    e70c:	685a      	ldr	r2, [r3, #4]
    e70e:	2303      	movs	r3, #3
    e710:	439a      	bics	r2, r3
    e712:	3a04      	subs	r2, #4
    e714:	2a24      	cmp	r2, #36	; 0x24
    e716:	d816      	bhi.n	e746 <_calloc_r+0x4a>
    e718:	0003      	movs	r3, r0
    e71a:	2a13      	cmp	r2, #19
    e71c:	d90d      	bls.n	e73a <_calloc_r+0x3e>
    e71e:	2100      	movs	r1, #0
    e720:	3308      	adds	r3, #8
    e722:	6001      	str	r1, [r0, #0]
    e724:	6041      	str	r1, [r0, #4]
    e726:	2a1b      	cmp	r2, #27
    e728:	d907      	bls.n	e73a <_calloc_r+0x3e>
    e72a:	6081      	str	r1, [r0, #8]
    e72c:	60c1      	str	r1, [r0, #12]
    e72e:	2a24      	cmp	r2, #36	; 0x24
    e730:	d10d      	bne.n	e74e <_calloc_r+0x52>
    e732:	0003      	movs	r3, r0
    e734:	6101      	str	r1, [r0, #16]
    e736:	3318      	adds	r3, #24
    e738:	6141      	str	r1, [r0, #20]
    e73a:	2200      	movs	r2, #0
    e73c:	601a      	str	r2, [r3, #0]
    e73e:	605a      	str	r2, [r3, #4]
    e740:	609a      	str	r2, [r3, #8]
    e742:	0020      	movs	r0, r4
    e744:	bd10      	pop	{r4, pc}
    e746:	2100      	movs	r1, #0
    e748:	f7f9 fa90 	bl	7c6c <memset>
    e74c:	e7f9      	b.n	e742 <_calloc_r+0x46>
    e74e:	0003      	movs	r3, r0
    e750:	3310      	adds	r3, #16
    e752:	e7f2      	b.n	e73a <_calloc_r+0x3e>

0000e754 <rshift>:
    e754:	b5f0      	push	{r4, r5, r6, r7, lr}
    e756:	46ce      	mov	lr, r9
    e758:	4647      	mov	r7, r8
    e75a:	0005      	movs	r5, r0
    e75c:	6902      	ldr	r2, [r0, #16]
    e75e:	b580      	push	{r7, lr}
    e760:	3514      	adds	r5, #20
    e762:	114c      	asrs	r4, r1, #5
    e764:	4294      	cmp	r4, r2
    e766:	da2c      	bge.n	e7c2 <rshift+0x6e>
    e768:	0092      	lsls	r2, r2, #2
    e76a:	18af      	adds	r7, r5, r2
    e76c:	231f      	movs	r3, #31
    e76e:	00a2      	lsls	r2, r4, #2
    e770:	4691      	mov	r9, r2
    e772:	400b      	ands	r3, r1
    e774:	44a9      	add	r9, r5
    e776:	469c      	mov	ip, r3
    e778:	2b00      	cmp	r3, #0
    e77a:	d02a      	beq.n	e7d2 <rshift+0x7e>
    e77c:	4662      	mov	r2, ip
    e77e:	2320      	movs	r3, #32
    e780:	1a9b      	subs	r3, r3, r2
    e782:	4698      	mov	r8, r3
    e784:	464b      	mov	r3, r9
    e786:	681e      	ldr	r6, [r3, #0]
    e788:	1d1c      	adds	r4, r3, #4
    e78a:	40d6      	lsrs	r6, r2
    e78c:	42a7      	cmp	r7, r4
    e78e:	d935      	bls.n	e7fc <rshift+0xa8>
    e790:	0029      	movs	r1, r5
    e792:	4642      	mov	r2, r8
    e794:	6823      	ldr	r3, [r4, #0]
    e796:	4093      	lsls	r3, r2
    e798:	4333      	orrs	r3, r6
    e79a:	c108      	stmia	r1!, {r3}
    e79c:	4663      	mov	r3, ip
    e79e:	cc40      	ldmia	r4!, {r6}
    e7a0:	40de      	lsrs	r6, r3
    e7a2:	42a7      	cmp	r7, r4
    e7a4:	d8f5      	bhi.n	e792 <rshift+0x3e>
    e7a6:	464b      	mov	r3, r9
    e7a8:	1afa      	subs	r2, r7, r3
    e7aa:	2303      	movs	r3, #3
    e7ac:	3a05      	subs	r2, #5
    e7ae:	439a      	bics	r2, r3
    e7b0:	3204      	adds	r2, #4
    e7b2:	18aa      	adds	r2, r5, r2
    e7b4:	6016      	str	r6, [r2, #0]
    e7b6:	2e00      	cmp	r6, #0
    e7b8:	d01d      	beq.n	e7f6 <rshift+0xa2>
    e7ba:	1d13      	adds	r3, r2, #4
    e7bc:	1b5b      	subs	r3, r3, r5
    e7be:	109b      	asrs	r3, r3, #2
    e7c0:	e015      	b.n	e7ee <rshift+0x9a>
    e7c2:	2300      	movs	r3, #0
    e7c4:	6103      	str	r3, [r0, #16]
    e7c6:	2300      	movs	r3, #0
    e7c8:	6143      	str	r3, [r0, #20]
    e7ca:	bc0c      	pop	{r2, r3}
    e7cc:	4690      	mov	r8, r2
    e7ce:	4699      	mov	r9, r3
    e7d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e7d2:	4649      	mov	r1, r9
    e7d4:	454f      	cmp	r7, r9
    e7d6:	d9f4      	bls.n	e7c2 <rshift+0x6e>
    e7d8:	c910      	ldmia	r1!, {r4}
    e7da:	c510      	stmia	r5!, {r4}
    e7dc:	428f      	cmp	r7, r1
    e7de:	d8fb      	bhi.n	e7d8 <rshift+0x84>
    e7e0:	464b      	mov	r3, r9
    e7e2:	43db      	mvns	r3, r3
    e7e4:	2203      	movs	r2, #3
    e7e6:	19db      	adds	r3, r3, r7
    e7e8:	4393      	bics	r3, r2
    e7ea:	3304      	adds	r3, #4
    e7ec:	109b      	asrs	r3, r3, #2
    e7ee:	6103      	str	r3, [r0, #16]
    e7f0:	2b00      	cmp	r3, #0
    e7f2:	d1ea      	bne.n	e7ca <rshift+0x76>
    e7f4:	e7e7      	b.n	e7c6 <rshift+0x72>
    e7f6:	1b53      	subs	r3, r2, r5
    e7f8:	109b      	asrs	r3, r3, #2
    e7fa:	e7f8      	b.n	e7ee <rshift+0x9a>
    e7fc:	002a      	movs	r2, r5
    e7fe:	e7d9      	b.n	e7b4 <rshift+0x60>

0000e800 <__gethex>:
    e800:	b5f0      	push	{r4, r5, r6, r7, lr}
    e802:	46de      	mov	lr, fp
    e804:	464e      	mov	r6, r9
    e806:	4657      	mov	r7, sl
    e808:	4645      	mov	r5, r8
    e80a:	b5e0      	push	{r5, r6, r7, lr}
    e80c:	b08b      	sub	sp, #44	; 0x2c
    e80e:	9006      	str	r0, [sp, #24]
    e810:	9816      	ldr	r0, [sp, #88]	; 0x58
    e812:	4689      	mov	r9, r1
    e814:	4693      	mov	fp, r2
    e816:	9309      	str	r3, [sp, #36]	; 0x24
    e818:	f7fd fae0 	bl	bddc <__localeconv_l>
    e81c:	6803      	ldr	r3, [r0, #0]
    e81e:	0018      	movs	r0, r3
    e820:	001c      	movs	r4, r3
    e822:	9304      	str	r3, [sp, #16]
    e824:	f7f9 fbb4 	bl	7f90 <strlen>
    e828:	46a4      	mov	ip, r4
    e82a:	0002      	movs	r2, r0
    e82c:	4462      	add	r2, ip
    e82e:	0013      	movs	r3, r2
    e830:	3b01      	subs	r3, #1
    e832:	781b      	ldrb	r3, [r3, #0]
    e834:	9002      	str	r0, [sp, #8]
    e836:	9301      	str	r3, [sp, #4]
    e838:	464b      	mov	r3, r9
    e83a:	681c      	ldr	r4, [r3, #0]
    e83c:	78a2      	ldrb	r2, [r4, #2]
    e83e:	2a30      	cmp	r2, #48	; 0x30
    e840:	d000      	beq.n	e844 <__gethex+0x44>
    e842:	e1c4      	b.n	ebce <__gethex+0x3ce>
    e844:	2102      	movs	r1, #2
    e846:	4249      	negs	r1, r1
    e848:	1ce3      	adds	r3, r4, #3
    e84a:	1b09      	subs	r1, r1, r4
    e84c:	18c8      	adds	r0, r1, r3
    e84e:	001c      	movs	r4, r3
    e850:	3301      	adds	r3, #1
    e852:	1e5a      	subs	r2, r3, #1
    e854:	7812      	ldrb	r2, [r2, #0]
    e856:	2a30      	cmp	r2, #48	; 0x30
    e858:	d0f8      	beq.n	e84c <__gethex+0x4c>
    e85a:	4680      	mov	r8, r0
    e85c:	4fbf      	ldr	r7, [pc, #764]	; (eb5c <__gethex+0x35c>)
    e85e:	5cbb      	ldrb	r3, [r7, r2]
    e860:	2b00      	cmp	r3, #0
    e862:	d100      	bne.n	e866 <__gethex+0x66>
    e864:	e0b0      	b.n	e9c8 <__gethex+0x1c8>
    e866:	2200      	movs	r2, #0
    e868:	2600      	movs	r6, #0
    e86a:	4692      	mov	sl, r2
    e86c:	7823      	ldrb	r3, [r4, #0]
    e86e:	5cfb      	ldrb	r3, [r7, r3]
    e870:	0025      	movs	r5, r4
    e872:	2b00      	cmp	r3, #0
    e874:	d004      	beq.n	e880 <__gethex+0x80>
    e876:	3501      	adds	r5, #1
    e878:	782b      	ldrb	r3, [r5, #0]
    e87a:	5cfb      	ldrb	r3, [r7, r3]
    e87c:	2b00      	cmp	r3, #0
    e87e:	d1fa      	bne.n	e876 <__gethex+0x76>
    e880:	9a02      	ldr	r2, [sp, #8]
    e882:	9904      	ldr	r1, [sp, #16]
    e884:	0028      	movs	r0, r5
    e886:	f000 fd47 	bl	f318 <strncmp>
    e88a:	2800      	cmp	r0, #0
    e88c:	d100      	bne.n	e890 <__gethex+0x90>
    e88e:	e08b      	b.n	e9a8 <__gethex+0x1a8>
    e890:	782b      	ldrb	r3, [r5, #0]
    e892:	2e00      	cmp	r6, #0
    e894:	d100      	bne.n	e898 <__gethex+0x98>
    e896:	e189      	b.n	ebac <__gethex+0x3ac>
    e898:	1b76      	subs	r6, r6, r5
    e89a:	00b2      	lsls	r2, r6, #2
    e89c:	9203      	str	r2, [sp, #12]
    e89e:	2b50      	cmp	r3, #80	; 0x50
    e8a0:	d100      	bne.n	e8a4 <__gethex+0xa4>
    e8a2:	e0b4      	b.n	ea0e <__gethex+0x20e>
    e8a4:	002e      	movs	r6, r5
    e8a6:	2b70      	cmp	r3, #112	; 0x70
    e8a8:	d100      	bne.n	e8ac <__gethex+0xac>
    e8aa:	e0b0      	b.n	ea0e <__gethex+0x20e>
    e8ac:	464b      	mov	r3, r9
    e8ae:	601d      	str	r5, [r3, #0]
    e8b0:	4653      	mov	r3, sl
    e8b2:	2b00      	cmp	r3, #0
    e8b4:	d000      	beq.n	e8b8 <__gethex+0xb8>
    e8b6:	e098      	b.n	e9ea <__gethex+0x1ea>
    e8b8:	1b33      	subs	r3, r6, r4
    e8ba:	3b01      	subs	r3, #1
    e8bc:	2100      	movs	r1, #0
    e8be:	2b07      	cmp	r3, #7
    e8c0:	dd03      	ble.n	e8ca <__gethex+0xca>
    e8c2:	3101      	adds	r1, #1
    e8c4:	105b      	asrs	r3, r3, #1
    e8c6:	2b07      	cmp	r3, #7
    e8c8:	dcfb      	bgt.n	e8c2 <__gethex+0xc2>
    e8ca:	9806      	ldr	r0, [sp, #24]
    e8cc:	f7fd fde6 	bl	c49c <_Balloc>
    e8d0:	0003      	movs	r3, r0
    e8d2:	3314      	adds	r3, #20
    e8d4:	9005      	str	r0, [sp, #20]
    e8d6:	9308      	str	r3, [sp, #32]
    e8d8:	42b4      	cmp	r4, r6
    e8da:	d300      	bcc.n	e8de <__gethex+0xde>
    e8dc:	e1c3      	b.n	ec66 <__gethex+0x466>
    e8de:	469a      	mov	sl, r3
    e8e0:	2300      	movs	r3, #0
    e8e2:	9a02      	ldr	r2, [sp, #8]
    e8e4:	4698      	mov	r8, r3
    e8e6:	4699      	mov	r9, r3
    e8e8:	3301      	adds	r3, #1
    e8ea:	1a9b      	subs	r3, r3, r2
    e8ec:	9307      	str	r3, [sp, #28]
    e8ee:	0023      	movs	r3, r4
    e8f0:	4644      	mov	r4, r8
    e8f2:	4698      	mov	r8, r3
    e8f4:	e00e      	b.n	e914 <__gethex+0x114>
    e8f6:	2c20      	cmp	r4, #32
    e8f8:	d05b      	beq.n	e9b2 <__gethex+0x1b2>
    e8fa:	0022      	movs	r2, r4
    e8fc:	3404      	adds	r4, #4
    e8fe:	210f      	movs	r1, #15
    e900:	782b      	ldrb	r3, [r5, #0]
    e902:	002e      	movs	r6, r5
    e904:	5cfb      	ldrb	r3, [r7, r3]
    e906:	400b      	ands	r3, r1
    e908:	4093      	lsls	r3, r2
    e90a:	464a      	mov	r2, r9
    e90c:	431a      	orrs	r2, r3
    e90e:	4691      	mov	r9, r2
    e910:	4546      	cmp	r6, r8
    e912:	d911      	bls.n	e938 <__gethex+0x138>
    e914:	1e75      	subs	r5, r6, #1
    e916:	782b      	ldrb	r3, [r5, #0]
    e918:	9a01      	ldr	r2, [sp, #4]
    e91a:	4293      	cmp	r3, r2
    e91c:	d1eb      	bne.n	e8f6 <__gethex+0xf6>
    e91e:	9b07      	ldr	r3, [sp, #28]
    e920:	18ee      	adds	r6, r5, r3
    e922:	4546      	cmp	r6, r8
    e924:	d3e7      	bcc.n	e8f6 <__gethex+0xf6>
    e926:	9a02      	ldr	r2, [sp, #8]
    e928:	9904      	ldr	r1, [sp, #16]
    e92a:	0030      	movs	r0, r6
    e92c:	f000 fcf4 	bl	f318 <strncmp>
    e930:	2800      	cmp	r0, #0
    e932:	d1e0      	bne.n	e8f6 <__gethex+0xf6>
    e934:	4546      	cmp	r6, r8
    e936:	d8ed      	bhi.n	e914 <__gethex+0x114>
    e938:	4653      	mov	r3, sl
    e93a:	464a      	mov	r2, r9
    e93c:	c304      	stmia	r3!, {r2}
    e93e:	9a08      	ldr	r2, [sp, #32]
    e940:	4648      	mov	r0, r9
    e942:	1a9b      	subs	r3, r3, r2
    e944:	9a05      	ldr	r2, [sp, #20]
    e946:	109b      	asrs	r3, r3, #2
    e948:	6113      	str	r3, [r2, #16]
    e94a:	015c      	lsls	r4, r3, #5
    e94c:	f7fd fe68 	bl	c620 <__hi0bits>
    e950:	465b      	mov	r3, fp
    e952:	681d      	ldr	r5, [r3, #0]
    e954:	1a24      	subs	r4, r4, r0
    e956:	42ac      	cmp	r4, r5
    e958:	dd00      	ble.n	e95c <__gethex+0x15c>
    e95a:	e101      	b.n	eb60 <__gethex+0x360>
    e95c:	2600      	movs	r6, #0
    e95e:	42ac      	cmp	r4, r5
    e960:	da00      	bge.n	e964 <__gethex+0x164>
    e962:	e126      	b.n	ebb2 <__gethex+0x3b2>
    e964:	465b      	mov	r3, fp
    e966:	9a03      	ldr	r2, [sp, #12]
    e968:	689b      	ldr	r3, [r3, #8]
    e96a:	429a      	cmp	r2, r3
    e96c:	dd00      	ble.n	e970 <__gethex+0x170>
    e96e:	e0ba      	b.n	eae6 <__gethex+0x2e6>
    e970:	465b      	mov	r3, fp
    e972:	9903      	ldr	r1, [sp, #12]
    e974:	685b      	ldr	r3, [r3, #4]
    e976:	4299      	cmp	r1, r3
    e978:	da00      	bge.n	e97c <__gethex+0x17c>
    e97a:	e0d5      	b.n	eb28 <__gethex+0x328>
    e97c:	2401      	movs	r4, #1
    e97e:	2e00      	cmp	r6, #0
    e980:	d00b      	beq.n	e99a <__gethex+0x19a>
    e982:	465b      	mov	r3, fp
    e984:	68db      	ldr	r3, [r3, #12]
    e986:	2b02      	cmp	r3, #2
    e988:	d100      	bne.n	e98c <__gethex+0x18c>
    e98a:	e152      	b.n	ec32 <__gethex+0x432>
    e98c:	2b03      	cmp	r3, #3
    e98e:	d100      	bne.n	e992 <__gethex+0x192>
    e990:	e153      	b.n	ec3a <__gethex+0x43a>
    e992:	2b01      	cmp	r3, #1
    e994:	d069      	beq.n	ea6a <__gethex+0x26a>
    e996:	2310      	movs	r3, #16
    e998:	431c      	orrs	r4, r3
    e99a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e99c:	9a05      	ldr	r2, [sp, #20]
    e99e:	601a      	str	r2, [r3, #0]
    e9a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e9a2:	9a03      	ldr	r2, [sp, #12]
    e9a4:	601a      	str	r2, [r3, #0]
    e9a6:	e026      	b.n	e9f6 <__gethex+0x1f6>
    e9a8:	2e00      	cmp	r6, #0
    e9aa:	d100      	bne.n	e9ae <__gethex+0x1ae>
    e9ac:	e133      	b.n	ec16 <__gethex+0x416>
    e9ae:	782b      	ldrb	r3, [r5, #0]
    e9b0:	e772      	b.n	e898 <__gethex+0x98>
    e9b2:	4653      	mov	r3, sl
    e9b4:	464a      	mov	r2, r9
    e9b6:	601a      	str	r2, [r3, #0]
    e9b8:	2304      	movs	r3, #4
    e9ba:	469c      	mov	ip, r3
    e9bc:	2300      	movs	r3, #0
    e9be:	44e2      	add	sl, ip
    e9c0:	2200      	movs	r2, #0
    e9c2:	2404      	movs	r4, #4
    e9c4:	4699      	mov	r9, r3
    e9c6:	e79a      	b.n	e8fe <__gethex+0xfe>
    e9c8:	9d02      	ldr	r5, [sp, #8]
    e9ca:	9904      	ldr	r1, [sp, #16]
    e9cc:	002a      	movs	r2, r5
    e9ce:	0020      	movs	r0, r4
    e9d0:	f000 fca2 	bl	f318 <strncmp>
    e9d4:	2800      	cmp	r0, #0
    e9d6:	d100      	bne.n	e9da <__gethex+0x1da>
    e9d8:	e091      	b.n	eafe <__gethex+0x2fe>
    e9da:	0025      	movs	r5, r4
    e9dc:	7822      	ldrb	r2, [r4, #0]
    e9de:	2a50      	cmp	r2, #80	; 0x50
    e9e0:	d011      	beq.n	ea06 <__gethex+0x206>
    e9e2:	2a70      	cmp	r2, #112	; 0x70
    e9e4:	d00f      	beq.n	ea06 <__gethex+0x206>
    e9e6:	464b      	mov	r3, r9
    e9e8:	601d      	str	r5, [r3, #0]
    e9ea:	4643      	mov	r3, r8
    e9ec:	425a      	negs	r2, r3
    e9ee:	4153      	adcs	r3, r2
    e9f0:	2406      	movs	r4, #6
    e9f2:	425b      	negs	r3, r3
    e9f4:	401c      	ands	r4, r3
    e9f6:	0020      	movs	r0, r4
    e9f8:	b00b      	add	sp, #44	; 0x2c
    e9fa:	bc3c      	pop	{r2, r3, r4, r5}
    e9fc:	4690      	mov	r8, r2
    e9fe:	4699      	mov	r9, r3
    ea00:	46a2      	mov	sl, r4
    ea02:	46ab      	mov	fp, r5
    ea04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea06:	2300      	movs	r3, #0
    ea08:	9303      	str	r3, [sp, #12]
    ea0a:	3301      	adds	r3, #1
    ea0c:	469a      	mov	sl, r3
    ea0e:	786b      	ldrb	r3, [r5, #1]
    ea10:	2b2b      	cmp	r3, #43	; 0x2b
    ea12:	d100      	bne.n	ea16 <__gethex+0x216>
    ea14:	e09f      	b.n	eb56 <__gethex+0x356>
    ea16:	2101      	movs	r1, #1
    ea18:	2b2d      	cmp	r3, #45	; 0x2d
    ea1a:	d16d      	bne.n	eaf8 <__gethex+0x2f8>
    ea1c:	78ab      	ldrb	r3, [r5, #2]
    ea1e:	1ca8      	adds	r0, r5, #2
    ea20:	5cfb      	ldrb	r3, [r7, r3]
    ea22:	002e      	movs	r6, r5
    ea24:	1e5a      	subs	r2, r3, #1
    ea26:	2a18      	cmp	r2, #24
    ea28:	d900      	bls.n	ea2c <__gethex+0x22c>
    ea2a:	e73f      	b.n	e8ac <__gethex+0xac>
    ea2c:	1c42      	adds	r2, r0, #1
    ea2e:	7840      	ldrb	r0, [r0, #1]
    ea30:	3b10      	subs	r3, #16
    ea32:	5c38      	ldrb	r0, [r7, r0]
    ea34:	1e46      	subs	r6, r0, #1
    ea36:	2e18      	cmp	r6, #24
    ea38:	d80c      	bhi.n	ea54 <__gethex+0x254>
    ea3a:	0006      	movs	r6, r0
    ea3c:	0098      	lsls	r0, r3, #2
    ea3e:	18c0      	adds	r0, r0, r3
    ea40:	0040      	lsls	r0, r0, #1
    ea42:	1980      	adds	r0, r0, r6
    ea44:	0003      	movs	r3, r0
    ea46:	3201      	adds	r2, #1
    ea48:	7810      	ldrb	r0, [r2, #0]
    ea4a:	3b10      	subs	r3, #16
    ea4c:	5c3e      	ldrb	r6, [r7, r0]
    ea4e:	1e70      	subs	r0, r6, #1
    ea50:	2818      	cmp	r0, #24
    ea52:	d9f3      	bls.n	ea3c <__gethex+0x23c>
    ea54:	2900      	cmp	r1, #0
    ea56:	d000      	beq.n	ea5a <__gethex+0x25a>
    ea58:	425b      	negs	r3, r3
    ea5a:	9903      	ldr	r1, [sp, #12]
    ea5c:	002e      	movs	r6, r5
    ea5e:	468c      	mov	ip, r1
    ea60:	449c      	add	ip, r3
    ea62:	4663      	mov	r3, ip
    ea64:	0015      	movs	r5, r2
    ea66:	9303      	str	r3, [sp, #12]
    ea68:	e720      	b.n	e8ac <__gethex+0xac>
    ea6a:	07b2      	lsls	r2, r6, #30
    ea6c:	d593      	bpl.n	e996 <__gethex+0x196>
    ea6e:	9a08      	ldr	r2, [sp, #32]
    ea70:	6812      	ldr	r2, [r2, #0]
    ea72:	4316      	orrs	r6, r2
    ea74:	9201      	str	r2, [sp, #4]
    ea76:	4233      	tst	r3, r6
    ea78:	d100      	bne.n	ea7c <__gethex+0x27c>
    ea7a:	e78c      	b.n	e996 <__gethex+0x196>
    ea7c:	9b05      	ldr	r3, [sp, #20]
    ea7e:	691f      	ldr	r7, [r3, #16]
    ea80:	9b08      	ldr	r3, [sp, #32]
    ea82:	00b9      	lsls	r1, r7, #2
    ea84:	4688      	mov	r8, r1
    ea86:	001a      	movs	r2, r3
    ea88:	4442      	add	r2, r8
    ea8a:	0016      	movs	r6, r2
    ea8c:	2100      	movs	r1, #0
    ea8e:	469c      	mov	ip, r3
    ea90:	e003      	b.n	ea9a <__gethex+0x29a>
    ea92:	c302      	stmia	r3!, {r1}
    ea94:	429e      	cmp	r6, r3
    ea96:	d800      	bhi.n	ea9a <__gethex+0x29a>
    ea98:	e0ff      	b.n	ec9a <__gethex+0x49a>
    ea9a:	681a      	ldr	r2, [r3, #0]
    ea9c:	1c50      	adds	r0, r2, #1
    ea9e:	d0f8      	beq.n	ea92 <__gethex+0x292>
    eaa0:	3201      	adds	r2, #1
    eaa2:	4660      	mov	r0, ip
    eaa4:	601a      	str	r2, [r3, #0]
    eaa6:	2c02      	cmp	r4, #2
    eaa8:	d100      	bne.n	eaac <__gethex+0x2ac>
    eaaa:	e10c      	b.n	ecc6 <__gethex+0x4c6>
    eaac:	231f      	movs	r3, #31
    eaae:	2421      	movs	r4, #33	; 0x21
    eab0:	401d      	ands	r5, r3
    eab2:	d100      	bne.n	eab6 <__gethex+0x2b6>
    eab4:	e771      	b.n	e99a <__gethex+0x19a>
    eab6:	4440      	add	r0, r8
    eab8:	3804      	subs	r0, #4
    eaba:	6800      	ldr	r0, [r0, #0]
    eabc:	f7fd fdb0 	bl	c620 <__hi0bits>
    eac0:	2320      	movs	r3, #32
    eac2:	1b5d      	subs	r5, r3, r5
    eac4:	42a8      	cmp	r0, r5
    eac6:	db00      	blt.n	eaca <__gethex+0x2ca>
    eac8:	e767      	b.n	e99a <__gethex+0x19a>
    eaca:	2101      	movs	r1, #1
    eacc:	9805      	ldr	r0, [sp, #20]
    eace:	f7ff fe41 	bl	e754 <rshift>
    ead2:	9b03      	ldr	r3, [sp, #12]
    ead4:	2421      	movs	r4, #33	; 0x21
    ead6:	3301      	adds	r3, #1
    ead8:	001a      	movs	r2, r3
    eada:	9303      	str	r3, [sp, #12]
    eadc:	465b      	mov	r3, fp
    eade:	689b      	ldr	r3, [r3, #8]
    eae0:	429a      	cmp	r2, r3
    eae2:	dc00      	bgt.n	eae6 <__gethex+0x2e6>
    eae4:	e759      	b.n	e99a <__gethex+0x19a>
    eae6:	9905      	ldr	r1, [sp, #20]
    eae8:	9806      	ldr	r0, [sp, #24]
    eaea:	f7fd fcff 	bl	c4ec <_Bfree>
    eaee:	2300      	movs	r3, #0
    eaf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    eaf2:	24a3      	movs	r4, #163	; 0xa3
    eaf4:	6013      	str	r3, [r2, #0]
    eaf6:	e77e      	b.n	e9f6 <__gethex+0x1f6>
    eaf8:	1c68      	adds	r0, r5, #1
    eafa:	2100      	movs	r1, #0
    eafc:	e790      	b.n	ea20 <__gethex+0x220>
    eafe:	1965      	adds	r5, r4, r5
    eb00:	782a      	ldrb	r2, [r5, #0]
    eb02:	5cbb      	ldrb	r3, [r7, r2]
    eb04:	2b00      	cmp	r3, #0
    eb06:	d100      	bne.n	eb0a <__gethex+0x30a>
    eb08:	e769      	b.n	e9de <__gethex+0x1de>
    eb0a:	002c      	movs	r4, r5
    eb0c:	2a30      	cmp	r2, #48	; 0x30
    eb0e:	d104      	bne.n	eb1a <__gethex+0x31a>
    eb10:	3401      	adds	r4, #1
    eb12:	7823      	ldrb	r3, [r4, #0]
    eb14:	2b30      	cmp	r3, #48	; 0x30
    eb16:	d0fb      	beq.n	eb10 <__gethex+0x310>
    eb18:	5cfb      	ldrb	r3, [r7, r3]
    eb1a:	4259      	negs	r1, r3
    eb1c:	4159      	adcs	r1, r3
    eb1e:	2201      	movs	r2, #1
    eb20:	468a      	mov	sl, r1
    eb22:	002e      	movs	r6, r5
    eb24:	4690      	mov	r8, r2
    eb26:	e6a3      	b.n	e870 <__gethex+0x70>
    eb28:	1a5c      	subs	r4, r3, r1
    eb2a:	42a5      	cmp	r5, r4
    eb2c:	dc53      	bgt.n	ebd6 <__gethex+0x3d6>
    eb2e:	465a      	mov	r2, fp
    eb30:	68d2      	ldr	r2, [r2, #12]
    eb32:	2a02      	cmp	r2, #2
    eb34:	d100      	bne.n	eb38 <__gethex+0x338>
    eb36:	e0ac      	b.n	ec92 <__gethex+0x492>
    eb38:	2a03      	cmp	r2, #3
    eb3a:	d100      	bne.n	eb3e <__gethex+0x33e>
    eb3c:	e084      	b.n	ec48 <__gethex+0x448>
    eb3e:	2a01      	cmp	r2, #1
    eb40:	d100      	bne.n	eb44 <__gethex+0x344>
    eb42:	e097      	b.n	ec74 <__gethex+0x474>
    eb44:	9905      	ldr	r1, [sp, #20]
    eb46:	9806      	ldr	r0, [sp, #24]
    eb48:	f7fd fcd0 	bl	c4ec <_Bfree>
    eb4c:	2300      	movs	r3, #0
    eb4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    eb50:	2450      	movs	r4, #80	; 0x50
    eb52:	6013      	str	r3, [r2, #0]
    eb54:	e74f      	b.n	e9f6 <__gethex+0x1f6>
    eb56:	2100      	movs	r1, #0
    eb58:	e760      	b.n	ea1c <__gethex+0x21c>
    eb5a:	46c0      	nop			; (mov r8, r8)
    eb5c:	00012704 	.word	0x00012704
    eb60:	1b64      	subs	r4, r4, r5
    eb62:	0021      	movs	r1, r4
    eb64:	9805      	ldr	r0, [sp, #20]
    eb66:	f7fe f917 	bl	cd98 <__any_on>
    eb6a:	1e06      	subs	r6, r0, #0
    eb6c:	d014      	beq.n	eb98 <__gethex+0x398>
    eb6e:	211f      	movs	r1, #31
    eb70:	2301      	movs	r3, #1
    eb72:	1e60      	subs	r0, r4, #1
    eb74:	4001      	ands	r1, r0
    eb76:	408b      	lsls	r3, r1
    eb78:	1142      	asrs	r2, r0, #5
    eb7a:	9908      	ldr	r1, [sp, #32]
    eb7c:	0092      	lsls	r2, r2, #2
    eb7e:	588a      	ldr	r2, [r1, r2]
    eb80:	2601      	movs	r6, #1
    eb82:	421a      	tst	r2, r3
    eb84:	d008      	beq.n	eb98 <__gethex+0x398>
    eb86:	2801      	cmp	r0, #1
    eb88:	dd72      	ble.n	ec70 <__gethex+0x470>
    eb8a:	1ea1      	subs	r1, r4, #2
    eb8c:	9805      	ldr	r0, [sp, #20]
    eb8e:	f7fe f903 	bl	cd98 <__any_on>
    eb92:	2800      	cmp	r0, #0
    eb94:	d06c      	beq.n	ec70 <__gethex+0x470>
    eb96:	2603      	movs	r6, #3
    eb98:	0021      	movs	r1, r4
    eb9a:	9805      	ldr	r0, [sp, #20]
    eb9c:	f7ff fdda 	bl	e754 <rshift>
    eba0:	9b03      	ldr	r3, [sp, #12]
    eba2:	469c      	mov	ip, r3
    eba4:	44a4      	add	ip, r4
    eba6:	4663      	mov	r3, ip
    eba8:	9303      	str	r3, [sp, #12]
    ebaa:	e6db      	b.n	e964 <__gethex+0x164>
    ebac:	2200      	movs	r2, #0
    ebae:	9203      	str	r2, [sp, #12]
    ebb0:	e675      	b.n	e89e <__gethex+0x9e>
    ebb2:	1b2c      	subs	r4, r5, r4
    ebb4:	0022      	movs	r2, r4
    ebb6:	9905      	ldr	r1, [sp, #20]
    ebb8:	9806      	ldr	r0, [sp, #24]
    ebba:	f7fd fe8d 	bl	c8d8 <__lshift>
    ebbe:	0003      	movs	r3, r0
    ebc0:	9a03      	ldr	r2, [sp, #12]
    ebc2:	3314      	adds	r3, #20
    ebc4:	1b12      	subs	r2, r2, r4
    ebc6:	9005      	str	r0, [sp, #20]
    ebc8:	9203      	str	r2, [sp, #12]
    ebca:	9308      	str	r3, [sp, #32]
    ebcc:	e6ca      	b.n	e964 <__gethex+0x164>
    ebce:	2300      	movs	r3, #0
    ebd0:	3402      	adds	r4, #2
    ebd2:	4698      	mov	r8, r3
    ebd4:	e642      	b.n	e85c <__gethex+0x5c>
    ebd6:	1e67      	subs	r7, r4, #1
    ebd8:	2e00      	cmp	r6, #0
    ebda:	d133      	bne.n	ec44 <__gethex+0x444>
    ebdc:	2f00      	cmp	r7, #0
    ebde:	d004      	beq.n	ebea <__gethex+0x3ea>
    ebe0:	0039      	movs	r1, r7
    ebe2:	9805      	ldr	r0, [sp, #20]
    ebe4:	f7fe f8d8 	bl	cd98 <__any_on>
    ebe8:	0006      	movs	r6, r0
    ebea:	231f      	movs	r3, #31
    ebec:	117a      	asrs	r2, r7, #5
    ebee:	401f      	ands	r7, r3
    ebf0:	3b1e      	subs	r3, #30
    ebf2:	40bb      	lsls	r3, r7
    ebf4:	9908      	ldr	r1, [sp, #32]
    ebf6:	0092      	lsls	r2, r2, #2
    ebf8:	588a      	ldr	r2, [r1, r2]
    ebfa:	421a      	tst	r2, r3
    ebfc:	d001      	beq.n	ec02 <__gethex+0x402>
    ebfe:	2302      	movs	r3, #2
    ec00:	431e      	orrs	r6, r3
    ec02:	0021      	movs	r1, r4
    ec04:	9805      	ldr	r0, [sp, #20]
    ec06:	f7ff fda5 	bl	e754 <rshift>
    ec0a:	465b      	mov	r3, fp
    ec0c:	685b      	ldr	r3, [r3, #4]
    ec0e:	1b2d      	subs	r5, r5, r4
    ec10:	9303      	str	r3, [sp, #12]
    ec12:	2402      	movs	r4, #2
    ec14:	e6b3      	b.n	e97e <__gethex+0x17e>
    ec16:	9b02      	ldr	r3, [sp, #8]
    ec18:	18ee      	adds	r6, r5, r3
    ec1a:	7833      	ldrb	r3, [r6, #0]
    ec1c:	0035      	movs	r5, r6
    ec1e:	5cfa      	ldrb	r2, [r7, r3]
    ec20:	2a00      	cmp	r2, #0
    ec22:	d100      	bne.n	ec26 <__gethex+0x426>
    ec24:	e638      	b.n	e898 <__gethex+0x98>
    ec26:	3501      	adds	r5, #1
    ec28:	782b      	ldrb	r3, [r5, #0]
    ec2a:	5cfa      	ldrb	r2, [r7, r3]
    ec2c:	2a00      	cmp	r2, #0
    ec2e:	d1fa      	bne.n	ec26 <__gethex+0x426>
    ec30:	e632      	b.n	e898 <__gethex+0x98>
    ec32:	2301      	movs	r3, #1
    ec34:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ec36:	1a9b      	subs	r3, r3, r2
    ec38:	9315      	str	r3, [sp, #84]	; 0x54
    ec3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    ec3c:	2b00      	cmp	r3, #0
    ec3e:	d100      	bne.n	ec42 <__gethex+0x442>
    ec40:	e6a9      	b.n	e996 <__gethex+0x196>
    ec42:	e71b      	b.n	ea7c <__gethex+0x27c>
    ec44:	2601      	movs	r6, #1
    ec46:	e7d0      	b.n	ebea <__gethex+0x3ea>
    ec48:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ec4a:	2a00      	cmp	r2, #0
    ec4c:	d100      	bne.n	ec50 <__gethex+0x450>
    ec4e:	e779      	b.n	eb44 <__gethex+0x344>
    ec50:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ec52:	9908      	ldr	r1, [sp, #32]
    ec54:	6013      	str	r3, [r2, #0]
    ec56:	2301      	movs	r3, #1
    ec58:	9a05      	ldr	r2, [sp, #20]
    ec5a:	2462      	movs	r4, #98	; 0x62
    ec5c:	6113      	str	r3, [r2, #16]
    ec5e:	600b      	str	r3, [r1, #0]
    ec60:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ec62:	601a      	str	r2, [r3, #0]
    ec64:	e6c7      	b.n	e9f6 <__gethex+0x1f6>
    ec66:	9b08      	ldr	r3, [sp, #32]
    ec68:	469a      	mov	sl, r3
    ec6a:	2300      	movs	r3, #0
    ec6c:	4699      	mov	r9, r3
    ec6e:	e663      	b.n	e938 <__gethex+0x138>
    ec70:	2602      	movs	r6, #2
    ec72:	e791      	b.n	eb98 <__gethex+0x398>
    ec74:	42a5      	cmp	r5, r4
    ec76:	d000      	beq.n	ec7a <__gethex+0x47a>
    ec78:	e764      	b.n	eb44 <__gethex+0x344>
    ec7a:	2d01      	cmp	r5, #1
    ec7c:	dde8      	ble.n	ec50 <__gethex+0x450>
    ec7e:	1e69      	subs	r1, r5, #1
    ec80:	9805      	ldr	r0, [sp, #20]
    ec82:	f7fe f889 	bl	cd98 <__any_on>
    ec86:	2800      	cmp	r0, #0
    ec88:	d100      	bne.n	ec8c <__gethex+0x48c>
    ec8a:	e75b      	b.n	eb44 <__gethex+0x344>
    ec8c:	465b      	mov	r3, fp
    ec8e:	685b      	ldr	r3, [r3, #4]
    ec90:	e7de      	b.n	ec50 <__gethex+0x450>
    ec92:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ec94:	2a00      	cmp	r2, #0
    ec96:	d0db      	beq.n	ec50 <__gethex+0x450>
    ec98:	e754      	b.n	eb44 <__gethex+0x344>
    ec9a:	9b05      	ldr	r3, [sp, #20]
    ec9c:	689b      	ldr	r3, [r3, #8]
    ec9e:	9301      	str	r3, [sp, #4]
    eca0:	429f      	cmp	r7, r3
    eca2:	da23      	bge.n	ecec <__gethex+0x4ec>
    eca4:	003b      	movs	r3, r7
    eca6:	9808      	ldr	r0, [sp, #32]
    eca8:	9905      	ldr	r1, [sp, #20]
    ecaa:	1c5a      	adds	r2, r3, #1
    ecac:	468c      	mov	ip, r1
    ecae:	610a      	str	r2, [r1, #16]
    ecb0:	2101      	movs	r1, #1
    ecb2:	3304      	adds	r3, #4
    ecb4:	009b      	lsls	r3, r3, #2
    ecb6:	4463      	add	r3, ip
    ecb8:	6059      	str	r1, [r3, #4]
    ecba:	2c02      	cmp	r4, #2
    ecbc:	d003      	beq.n	ecc6 <__gethex+0x4c6>
    ecbe:	4297      	cmp	r7, r2
    ecc0:	da00      	bge.n	ecc4 <__gethex+0x4c4>
    ecc2:	e702      	b.n	eaca <__gethex+0x2ca>
    ecc4:	e6f2      	b.n	eaac <__gethex+0x2ac>
    ecc6:	465b      	mov	r3, fp
    ecc8:	681b      	ldr	r3, [r3, #0]
    ecca:	2422      	movs	r4, #34	; 0x22
    eccc:	3b01      	subs	r3, #1
    ecce:	429d      	cmp	r5, r3
    ecd0:	d000      	beq.n	ecd4 <__gethex+0x4d4>
    ecd2:	e662      	b.n	e99a <__gethex+0x19a>
    ecd4:	231f      	movs	r3, #31
    ecd6:	116a      	asrs	r2, r5, #5
    ecd8:	401d      	ands	r5, r3
    ecda:	3b1e      	subs	r3, #30
    ecdc:	40ab      	lsls	r3, r5
    ecde:	0092      	lsls	r2, r2, #2
    ece0:	5814      	ldr	r4, [r2, r0]
    ece2:	4023      	ands	r3, r4
    ece4:	425c      	negs	r4, r3
    ece6:	415c      	adcs	r4, r3
    ece8:	3421      	adds	r4, #33	; 0x21
    ecea:	e656      	b.n	e99a <__gethex+0x19a>
    ecec:	9b05      	ldr	r3, [sp, #20]
    ecee:	685a      	ldr	r2, [r3, #4]
    ecf0:	9b06      	ldr	r3, [sp, #24]
    ecf2:	1c51      	adds	r1, r2, #1
    ecf4:	0018      	movs	r0, r3
    ecf6:	4699      	mov	r9, r3
    ecf8:	9201      	str	r2, [sp, #4]
    ecfa:	f7fd fbcf 	bl	c49c <_Balloc>
    ecfe:	0006      	movs	r6, r0
    ed00:	9b05      	ldr	r3, [sp, #20]
    ed02:	300c      	adds	r0, #12
    ed04:	691a      	ldr	r2, [r3, #16]
    ed06:	330c      	adds	r3, #12
    ed08:	9201      	str	r2, [sp, #4]
    ed0a:	3202      	adds	r2, #2
    ed0c:	0019      	movs	r1, r3
    ed0e:	0092      	lsls	r2, r2, #2
    ed10:	f7f8 ff6a 	bl	7be8 <memcpy>
    ed14:	4648      	mov	r0, r9
    ed16:	9905      	ldr	r1, [sp, #20]
    ed18:	f7fd fbe8 	bl	c4ec <_Bfree>
    ed1c:	0030      	movs	r0, r6
    ed1e:	6933      	ldr	r3, [r6, #16]
    ed20:	3014      	adds	r0, #20
    ed22:	9605      	str	r6, [sp, #20]
    ed24:	e7c0      	b.n	eca8 <__gethex+0x4a8>
    ed26:	46c0      	nop			; (mov r8, r8)

0000ed28 <__match>:
    ed28:	b530      	push	{r4, r5, lr}
    ed2a:	6802      	ldr	r2, [r0, #0]
    ed2c:	e008      	b.n	ed40 <__match+0x18>
    ed2e:	7813      	ldrb	r3, [r2, #0]
    ed30:	001d      	movs	r5, r3
    ed32:	3d41      	subs	r5, #65	; 0x41
    ed34:	2d19      	cmp	r5, #25
    ed36:	d800      	bhi.n	ed3a <__match+0x12>
    ed38:	3320      	adds	r3, #32
    ed3a:	3101      	adds	r1, #1
    ed3c:	42a3      	cmp	r3, r4
    ed3e:	d106      	bne.n	ed4e <__match+0x26>
    ed40:	780c      	ldrb	r4, [r1, #0]
    ed42:	3201      	adds	r2, #1
    ed44:	2c00      	cmp	r4, #0
    ed46:	d1f2      	bne.n	ed2e <__match+0x6>
    ed48:	6002      	str	r2, [r0, #0]
    ed4a:	2001      	movs	r0, #1
    ed4c:	bd30      	pop	{r4, r5, pc}
    ed4e:	2000      	movs	r0, #0
    ed50:	e7fc      	b.n	ed4c <__match+0x24>
    ed52:	46c0      	nop			; (mov r8, r8)

0000ed54 <__hexnan>:
    ed54:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed56:	4657      	mov	r7, sl
    ed58:	46de      	mov	lr, fp
    ed5a:	464e      	mov	r6, r9
    ed5c:	4645      	mov	r5, r8
    ed5e:	4692      	mov	sl, r2
    ed60:	680a      	ldr	r2, [r1, #0]
    ed62:	211f      	movs	r1, #31
    ed64:	b5e0      	push	{r5, r6, r7, lr}
    ed66:	1153      	asrs	r3, r2, #5
    ed68:	b085      	sub	sp, #20
    ed6a:	009b      	lsls	r3, r3, #2
    ed6c:	4011      	ands	r1, r2
    ed6e:	9001      	str	r0, [sp, #4]
    ed70:	4453      	add	r3, sl
    ed72:	9103      	str	r1, [sp, #12]
    ed74:	2900      	cmp	r1, #0
    ed76:	d000      	beq.n	ed7a <__hexnan+0x26>
    ed78:	3304      	adds	r3, #4
    ed7a:	3b04      	subs	r3, #4
    ed7c:	469b      	mov	fp, r3
    ed7e:	2300      	movs	r3, #0
    ed80:	465a      	mov	r2, fp
    ed82:	6013      	str	r3, [r2, #0]
    ed84:	9b01      	ldr	r3, [sp, #4]
    ed86:	465c      	mov	r4, fp
    ed88:	6818      	ldr	r0, [r3, #0]
    ed8a:	2300      	movs	r3, #0
    ed8c:	7841      	ldrb	r1, [r0, #1]
    ed8e:	9300      	str	r3, [sp, #0]
    ed90:	4b59      	ldr	r3, [pc, #356]	; (eef8 <__hexnan+0x1a4>)
    ed92:	46d8      	mov	r8, fp
    ed94:	2500      	movs	r5, #0
    ed96:	2200      	movs	r2, #0
    ed98:	4699      	mov	r9, r3
    ed9a:	9402      	str	r4, [sp, #8]
    ed9c:	1c46      	adds	r6, r0, #1
    ed9e:	2900      	cmp	r1, #0
    eda0:	d036      	beq.n	ee10 <__hexnan+0xbc>
    eda2:	464b      	mov	r3, r9
    eda4:	5c5b      	ldrb	r3, [r3, r1]
    eda6:	2b00      	cmp	r3, #0
    eda8:	d158      	bne.n	ee5c <__hexnan+0x108>
    edaa:	2920      	cmp	r1, #32
    edac:	d868      	bhi.n	ee80 <__hexnan+0x12c>
    edae:	9b00      	ldr	r3, [sp, #0]
    edb0:	429a      	cmp	r2, r3
    edb2:	dd28      	ble.n	ee06 <__hexnan+0xb2>
    edb4:	4544      	cmp	r4, r8
    edb6:	d21c      	bcs.n	edf2 <__hexnan+0x9e>
    edb8:	2d07      	cmp	r5, #7
    edba:	dc1a      	bgt.n	edf2 <__hexnan+0x9e>
    edbc:	2308      	movs	r3, #8
    edbe:	1b5d      	subs	r5, r3, r5
    edc0:	00ad      	lsls	r5, r5, #2
    edc2:	3318      	adds	r3, #24
    edc4:	1b5b      	subs	r3, r3, r5
    edc6:	469c      	mov	ip, r3
    edc8:	4661      	mov	r1, ip
    edca:	6823      	ldr	r3, [r4, #0]
    edcc:	0020      	movs	r0, r4
    edce:	4647      	mov	r7, r8
    edd0:	4694      	mov	ip, r2
    edd2:	46a0      	mov	r8, r4
    edd4:	000a      	movs	r2, r1
    edd6:	001c      	movs	r4, r3
    edd8:	6841      	ldr	r1, [r0, #4]
    edda:	000b      	movs	r3, r1
    eddc:	4093      	lsls	r3, r2
    edde:	40e9      	lsrs	r1, r5
    ede0:	4323      	orrs	r3, r4
    ede2:	c008      	stmia	r0!, {r3}
    ede4:	000c      	movs	r4, r1
    ede6:	6001      	str	r1, [r0, #0]
    ede8:	4287      	cmp	r7, r0
    edea:	d8f5      	bhi.n	edd8 <__hexnan+0x84>
    edec:	4644      	mov	r4, r8
    edee:	4662      	mov	r2, ip
    edf0:	46b8      	mov	r8, r7
    edf2:	2508      	movs	r5, #8
    edf4:	4554      	cmp	r4, sl
    edf6:	d906      	bls.n	ee06 <__hexnan+0xb2>
    edf8:	1f23      	subs	r3, r4, #4
    edfa:	2100      	movs	r1, #0
    edfc:	4698      	mov	r8, r3
    edfe:	001c      	movs	r4, r3
    ee00:	2500      	movs	r5, #0
    ee02:	6019      	str	r1, [r3, #0]
    ee04:	9200      	str	r2, [sp, #0]
    ee06:	0030      	movs	r0, r6
    ee08:	7841      	ldrb	r1, [r0, #1]
    ee0a:	1c46      	adds	r6, r0, #1
    ee0c:	2900      	cmp	r1, #0
    ee0e:	d1c8      	bne.n	eda2 <__hexnan+0x4e>
    ee10:	9b02      	ldr	r3, [sp, #8]
    ee12:	469c      	mov	ip, r3
    ee14:	2a00      	cmp	r2, #0
    ee16:	d037      	beq.n	ee88 <__hexnan+0x134>
    ee18:	4544      	cmp	r4, r8
    ee1a:	d201      	bcs.n	ee20 <__hexnan+0xcc>
    ee1c:	2d07      	cmp	r5, #7
    ee1e:	dd57      	ble.n	eed0 <__hexnan+0x17c>
    ee20:	4554      	cmp	r4, sl
    ee22:	d939      	bls.n	ee98 <__hexnan+0x144>
    ee24:	4653      	mov	r3, sl
    ee26:	4659      	mov	r1, fp
    ee28:	cc04      	ldmia	r4!, {r2}
    ee2a:	601a      	str	r2, [r3, #0]
    ee2c:	3304      	adds	r3, #4
    ee2e:	42a1      	cmp	r1, r4
    ee30:	d2fa      	bcs.n	ee28 <__hexnan+0xd4>
    ee32:	2200      	movs	r2, #0
    ee34:	c304      	stmia	r3!, {r2}
    ee36:	4299      	cmp	r1, r3
    ee38:	d2fc      	bcs.n	ee34 <__hexnan+0xe0>
    ee3a:	468b      	mov	fp, r1
    ee3c:	680b      	ldr	r3, [r1, #0]
    ee3e:	2b00      	cmp	r3, #0
    ee40:	d10a      	bne.n	ee58 <__hexnan+0x104>
    ee42:	4663      	mov	r3, ip
    ee44:	4652      	mov	r2, sl
    ee46:	45da      	cmp	sl, fp
    ee48:	d102      	bne.n	ee50 <__hexnan+0xfc>
    ee4a:	e035      	b.n	eeb8 <__hexnan+0x164>
    ee4c:	429a      	cmp	r2, r3
    ee4e:	d032      	beq.n	eeb6 <__hexnan+0x162>
    ee50:	3b04      	subs	r3, #4
    ee52:	6819      	ldr	r1, [r3, #0]
    ee54:	2900      	cmp	r1, #0
    ee56:	d0f9      	beq.n	ee4c <__hexnan+0xf8>
    ee58:	2005      	movs	r0, #5
    ee5a:	e016      	b.n	ee8a <__hexnan+0x136>
    ee5c:	3501      	adds	r5, #1
    ee5e:	3201      	adds	r2, #1
    ee60:	2d08      	cmp	r5, #8
    ee62:	dd05      	ble.n	ee70 <__hexnan+0x11c>
    ee64:	4554      	cmp	r4, sl
    ee66:	d9ce      	bls.n	ee06 <__hexnan+0xb2>
    ee68:	2100      	movs	r1, #0
    ee6a:	2501      	movs	r5, #1
    ee6c:	3c04      	subs	r4, #4
    ee6e:	6021      	str	r1, [r4, #0]
    ee70:	200f      	movs	r0, #15
    ee72:	6821      	ldr	r1, [r4, #0]
    ee74:	4003      	ands	r3, r0
    ee76:	0109      	lsls	r1, r1, #4
    ee78:	430b      	orrs	r3, r1
    ee7a:	6023      	str	r3, [r4, #0]
    ee7c:	0030      	movs	r0, r6
    ee7e:	e7c3      	b.n	ee08 <__hexnan+0xb4>
    ee80:	9b02      	ldr	r3, [sp, #8]
    ee82:	469c      	mov	ip, r3
    ee84:	2929      	cmp	r1, #41	; 0x29
    ee86:	d01f      	beq.n	eec8 <__hexnan+0x174>
    ee88:	2004      	movs	r0, #4
    ee8a:	b005      	add	sp, #20
    ee8c:	bc3c      	pop	{r2, r3, r4, r5}
    ee8e:	4690      	mov	r8, r2
    ee90:	4699      	mov	r9, r3
    ee92:	46a2      	mov	sl, r4
    ee94:	46ab      	mov	fp, r5
    ee96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ee98:	9b03      	ldr	r3, [sp, #12]
    ee9a:	2b00      	cmp	r3, #0
    ee9c:	d011      	beq.n	eec2 <__hexnan+0x16e>
    ee9e:	2220      	movs	r2, #32
    eea0:	9b03      	ldr	r3, [sp, #12]
    eea2:	1ad2      	subs	r2, r2, r3
    eea4:	2301      	movs	r3, #1
    eea6:	425b      	negs	r3, r3
    eea8:	40d3      	lsrs	r3, r2
    eeaa:	465a      	mov	r2, fp
    eeac:	6812      	ldr	r2, [r2, #0]
    eeae:	4013      	ands	r3, r2
    eeb0:	465a      	mov	r2, fp
    eeb2:	6013      	str	r3, [r2, #0]
    eeb4:	e7c3      	b.n	ee3e <__hexnan+0xea>
    eeb6:	4692      	mov	sl, r2
    eeb8:	2301      	movs	r3, #1
    eeba:	4652      	mov	r2, sl
    eebc:	2005      	movs	r0, #5
    eebe:	6013      	str	r3, [r2, #0]
    eec0:	e7e3      	b.n	ee8a <__hexnan+0x136>
    eec2:	465b      	mov	r3, fp
    eec4:	681b      	ldr	r3, [r3, #0]
    eec6:	e7ba      	b.n	ee3e <__hexnan+0xea>
    eec8:	9b01      	ldr	r3, [sp, #4]
    eeca:	3002      	adds	r0, #2
    eecc:	6018      	str	r0, [r3, #0]
    eece:	e7a1      	b.n	ee14 <__hexnan+0xc0>
    eed0:	2308      	movs	r3, #8
    eed2:	1b5d      	subs	r5, r3, r5
    eed4:	6823      	ldr	r3, [r4, #0]
    eed6:	2620      	movs	r6, #32
    eed8:	0021      	movs	r1, r4
    eeda:	4647      	mov	r7, r8
    eedc:	001a      	movs	r2, r3
    eede:	00ad      	lsls	r5, r5, #2
    eee0:	1b76      	subs	r6, r6, r5
    eee2:	6848      	ldr	r0, [r1, #4]
    eee4:	0003      	movs	r3, r0
    eee6:	40b3      	lsls	r3, r6
    eee8:	4313      	orrs	r3, r2
    eeea:	0002      	movs	r2, r0
    eeec:	40ea      	lsrs	r2, r5
    eeee:	c108      	stmia	r1!, {r3}
    eef0:	600a      	str	r2, [r1, #0]
    eef2:	428f      	cmp	r7, r1
    eef4:	d8f5      	bhi.n	eee2 <__hexnan+0x18e>
    eef6:	e793      	b.n	ee20 <__hexnan+0xcc>
    eef8:	00012704 	.word	0x00012704

0000eefc <memmove>:
    eefc:	b5f0      	push	{r4, r5, r6, r7, lr}
    eefe:	4288      	cmp	r0, r1
    ef00:	d90a      	bls.n	ef18 <memmove+0x1c>
    ef02:	188b      	adds	r3, r1, r2
    ef04:	4298      	cmp	r0, r3
    ef06:	d207      	bcs.n	ef18 <memmove+0x1c>
    ef08:	1e53      	subs	r3, r2, #1
    ef0a:	2a00      	cmp	r2, #0
    ef0c:	d003      	beq.n	ef16 <memmove+0x1a>
    ef0e:	5cca      	ldrb	r2, [r1, r3]
    ef10:	54c2      	strb	r2, [r0, r3]
    ef12:	3b01      	subs	r3, #1
    ef14:	d2fb      	bcs.n	ef0e <memmove+0x12>
    ef16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef18:	0005      	movs	r5, r0
    ef1a:	2a0f      	cmp	r2, #15
    ef1c:	d808      	bhi.n	ef30 <memmove+0x34>
    ef1e:	2a00      	cmp	r2, #0
    ef20:	d0f9      	beq.n	ef16 <memmove+0x1a>
    ef22:	2300      	movs	r3, #0
    ef24:	5ccc      	ldrb	r4, [r1, r3]
    ef26:	54ec      	strb	r4, [r5, r3]
    ef28:	3301      	adds	r3, #1
    ef2a:	4293      	cmp	r3, r2
    ef2c:	d1fa      	bne.n	ef24 <memmove+0x28>
    ef2e:	e7f2      	b.n	ef16 <memmove+0x1a>
    ef30:	000b      	movs	r3, r1
    ef32:	4303      	orrs	r3, r0
    ef34:	079b      	lsls	r3, r3, #30
    ef36:	d12d      	bne.n	ef94 <memmove+0x98>
    ef38:	0015      	movs	r5, r2
    ef3a:	000c      	movs	r4, r1
    ef3c:	0003      	movs	r3, r0
    ef3e:	3d10      	subs	r5, #16
    ef40:	092f      	lsrs	r7, r5, #4
    ef42:	3701      	adds	r7, #1
    ef44:	013f      	lsls	r7, r7, #4
    ef46:	19c7      	adds	r7, r0, r7
    ef48:	6826      	ldr	r6, [r4, #0]
    ef4a:	601e      	str	r6, [r3, #0]
    ef4c:	6866      	ldr	r6, [r4, #4]
    ef4e:	605e      	str	r6, [r3, #4]
    ef50:	68a6      	ldr	r6, [r4, #8]
    ef52:	609e      	str	r6, [r3, #8]
    ef54:	68e6      	ldr	r6, [r4, #12]
    ef56:	3410      	adds	r4, #16
    ef58:	60de      	str	r6, [r3, #12]
    ef5a:	3310      	adds	r3, #16
    ef5c:	429f      	cmp	r7, r3
    ef5e:	d1f3      	bne.n	ef48 <memmove+0x4c>
    ef60:	240f      	movs	r4, #15
    ef62:	43a5      	bics	r5, r4
    ef64:	3510      	adds	r5, #16
    ef66:	1949      	adds	r1, r1, r5
    ef68:	4014      	ands	r4, r2
    ef6a:	1945      	adds	r5, r0, r5
    ef6c:	2c03      	cmp	r4, #3
    ef6e:	d913      	bls.n	ef98 <memmove+0x9c>
    ef70:	2300      	movs	r3, #0
    ef72:	1f27      	subs	r7, r4, #4
    ef74:	08be      	lsrs	r6, r7, #2
    ef76:	3601      	adds	r6, #1
    ef78:	00b6      	lsls	r6, r6, #2
    ef7a:	58cc      	ldr	r4, [r1, r3]
    ef7c:	50ec      	str	r4, [r5, r3]
    ef7e:	3304      	adds	r3, #4
    ef80:	42b3      	cmp	r3, r6
    ef82:	d1fa      	bne.n	ef7a <memmove+0x7e>
    ef84:	2603      	movs	r6, #3
    ef86:	43b7      	bics	r7, r6
    ef88:	1d3c      	adds	r4, r7, #4
    ef8a:	1909      	adds	r1, r1, r4
    ef8c:	192d      	adds	r5, r5, r4
    ef8e:	4032      	ands	r2, r6
    ef90:	d1c7      	bne.n	ef22 <memmove+0x26>
    ef92:	e7c0      	b.n	ef16 <memmove+0x1a>
    ef94:	0005      	movs	r5, r0
    ef96:	e7c4      	b.n	ef22 <memmove+0x26>
    ef98:	0022      	movs	r2, r4
    ef9a:	e7c0      	b.n	ef1e <memmove+0x22>

0000ef9c <_realloc_r>:
    ef9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef9e:	464e      	mov	r6, r9
    efa0:	4645      	mov	r5, r8
    efa2:	46de      	mov	lr, fp
    efa4:	4657      	mov	r7, sl
    efa6:	b5e0      	push	{r5, r6, r7, lr}
    efa8:	b085      	sub	sp, #20
    efaa:	9001      	str	r0, [sp, #4]
    efac:	000e      	movs	r6, r1
    efae:	0015      	movs	r5, r2
    efb0:	2900      	cmp	r1, #0
    efb2:	d100      	bne.n	efb6 <_realloc_r+0x1a>
    efb4:	e09e      	b.n	f0f4 <_realloc_r+0x158>
    efb6:	0037      	movs	r7, r6
    efb8:	9801      	ldr	r0, [sp, #4]
    efba:	3f08      	subs	r7, #8
    efbc:	f7fd fa5e 	bl	c47c <__malloc_lock>
    efc0:	687a      	ldr	r2, [r7, #4]
    efc2:	2303      	movs	r3, #3
    efc4:	0014      	movs	r4, r2
    efc6:	439c      	bics	r4, r3
    efc8:	002b      	movs	r3, r5
    efca:	330b      	adds	r3, #11
    efcc:	46b9      	mov	r9, r7
    efce:	2b16      	cmp	r3, #22
    efd0:	d847      	bhi.n	f062 <_realloc_r+0xc6>
    efd2:	2110      	movs	r1, #16
    efd4:	2310      	movs	r3, #16
    efd6:	4688      	mov	r8, r1
    efd8:	4545      	cmp	r5, r8
    efda:	d846      	bhi.n	f06a <_realloc_r+0xce>
    efdc:	429c      	cmp	r4, r3
    efde:	da49      	bge.n	f074 <_realloc_r+0xd8>
    efe0:	49cc      	ldr	r1, [pc, #816]	; (f314 <_realloc_r+0x378>)
    efe2:	1938      	adds	r0, r7, r4
    efe4:	468b      	mov	fp, r1
    efe6:	6889      	ldr	r1, [r1, #8]
    efe8:	9002      	str	r0, [sp, #8]
    efea:	4288      	cmp	r0, r1
    efec:	d100      	bne.n	eff0 <_realloc_r+0x54>
    efee:	e0c2      	b.n	f176 <_realloc_r+0x1da>
    eff0:	2101      	movs	r1, #1
    eff2:	468a      	mov	sl, r1
    eff4:	6840      	ldr	r0, [r0, #4]
    eff6:	0001      	movs	r1, r0
    eff8:	9003      	str	r0, [sp, #12]
    effa:	4650      	mov	r0, sl
    effc:	4381      	bics	r1, r0
    effe:	468c      	mov	ip, r1
    f000:	9902      	ldr	r1, [sp, #8]
    f002:	468b      	mov	fp, r1
    f004:	44dc      	add	ip, fp
    f006:	4661      	mov	r1, ip
    f008:	6849      	ldr	r1, [r1, #4]
    f00a:	4201      	tst	r1, r0
    f00c:	d04d      	beq.n	f0aa <_realloc_r+0x10e>
    f00e:	4210      	tst	r0, r2
    f010:	d100      	bne.n	f014 <_realloc_r+0x78>
    f012:	e0a2      	b.n	f15a <_realloc_r+0x1be>
    f014:	0029      	movs	r1, r5
    f016:	9801      	ldr	r0, [sp, #4]
    f018:	f7fc fef4 	bl	be04 <_malloc_r>
    f01c:	1e05      	subs	r5, r0, #0
    f01e:	d039      	beq.n	f094 <_realloc_r+0xf8>
    f020:	2301      	movs	r3, #1
    f022:	0002      	movs	r2, r0
    f024:	6879      	ldr	r1, [r7, #4]
    f026:	3a08      	subs	r2, #8
    f028:	4399      	bics	r1, r3
    f02a:	187f      	adds	r7, r7, r1
    f02c:	42ba      	cmp	r2, r7
    f02e:	d100      	bne.n	f032 <_realloc_r+0x96>
    f030:	e12e      	b.n	f290 <_realloc_r+0x2f4>
    f032:	1f22      	subs	r2, r4, #4
    f034:	2a24      	cmp	r2, #36	; 0x24
    f036:	d900      	bls.n	f03a <_realloc_r+0x9e>
    f038:	e114      	b.n	f264 <_realloc_r+0x2c8>
    f03a:	2a13      	cmp	r2, #19
    f03c:	d900      	bls.n	f040 <_realloc_r+0xa4>
    f03e:	e0e8      	b.n	f212 <_realloc_r+0x276>
    f040:	0003      	movs	r3, r0
    f042:	0032      	movs	r2, r6
    f044:	6811      	ldr	r1, [r2, #0]
    f046:	6019      	str	r1, [r3, #0]
    f048:	6851      	ldr	r1, [r2, #4]
    f04a:	6059      	str	r1, [r3, #4]
    f04c:	6892      	ldr	r2, [r2, #8]
    f04e:	609a      	str	r2, [r3, #8]
    f050:	9c01      	ldr	r4, [sp, #4]
    f052:	0031      	movs	r1, r6
    f054:	0020      	movs	r0, r4
    f056:	f7fc fdb5 	bl	bbc4 <_free_r>
    f05a:	0020      	movs	r0, r4
    f05c:	f7fd fa16 	bl	c48c <__malloc_unlock>
    f060:	e01b      	b.n	f09a <_realloc_r+0xfe>
    f062:	2107      	movs	r1, #7
    f064:	438b      	bics	r3, r1
    f066:	4698      	mov	r8, r3
    f068:	d5b6      	bpl.n	efd8 <_realloc_r+0x3c>
    f06a:	230c      	movs	r3, #12
    f06c:	9a01      	ldr	r2, [sp, #4]
    f06e:	2500      	movs	r5, #0
    f070:	6013      	str	r3, [r2, #0]
    f072:	e012      	b.n	f09a <_realloc_r+0xfe>
    f074:	0035      	movs	r5, r6
    f076:	4643      	mov	r3, r8
    f078:	1ae3      	subs	r3, r4, r3
    f07a:	2b0f      	cmp	r3, #15
    f07c:	d825      	bhi.n	f0ca <_realloc_r+0x12e>
    f07e:	464b      	mov	r3, r9
    f080:	2201      	movs	r2, #1
    f082:	4649      	mov	r1, r9
    f084:	685b      	ldr	r3, [r3, #4]
    f086:	4013      	ands	r3, r2
    f088:	4323      	orrs	r3, r4
    f08a:	604b      	str	r3, [r1, #4]
    f08c:	444c      	add	r4, r9
    f08e:	6863      	ldr	r3, [r4, #4]
    f090:	431a      	orrs	r2, r3
    f092:	6062      	str	r2, [r4, #4]
    f094:	9801      	ldr	r0, [sp, #4]
    f096:	f7fd f9f9 	bl	c48c <__malloc_unlock>
    f09a:	0028      	movs	r0, r5
    f09c:	b005      	add	sp, #20
    f09e:	bc3c      	pop	{r2, r3, r4, r5}
    f0a0:	4690      	mov	r8, r2
    f0a2:	4699      	mov	r9, r3
    f0a4:	46a2      	mov	sl, r4
    f0a6:	46ab      	mov	fp, r5
    f0a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f0aa:	2103      	movs	r1, #3
    f0ac:	9803      	ldr	r0, [sp, #12]
    f0ae:	468c      	mov	ip, r1
    f0b0:	4388      	bics	r0, r1
    f0b2:	1821      	adds	r1, r4, r0
    f0b4:	468b      	mov	fp, r1
    f0b6:	4299      	cmp	r1, r3
    f0b8:	db21      	blt.n	f0fe <_realloc_r+0x162>
    f0ba:	9a02      	ldr	r2, [sp, #8]
    f0bc:	0035      	movs	r5, r6
    f0be:	68d3      	ldr	r3, [r2, #12]
    f0c0:	6892      	ldr	r2, [r2, #8]
    f0c2:	465c      	mov	r4, fp
    f0c4:	60d3      	str	r3, [r2, #12]
    f0c6:	609a      	str	r2, [r3, #8]
    f0c8:	e7d5      	b.n	f076 <_realloc_r+0xda>
    f0ca:	464a      	mov	r2, r9
    f0cc:	2001      	movs	r0, #1
    f0ce:	4646      	mov	r6, r8
    f0d0:	6852      	ldr	r2, [r2, #4]
    f0d2:	4649      	mov	r1, r9
    f0d4:	4002      	ands	r2, r0
    f0d6:	4332      	orrs	r2, r6
    f0d8:	464e      	mov	r6, r9
    f0da:	4441      	add	r1, r8
    f0dc:	4303      	orrs	r3, r0
    f0de:	6072      	str	r2, [r6, #4]
    f0e0:	444c      	add	r4, r9
    f0e2:	604b      	str	r3, [r1, #4]
    f0e4:	6863      	ldr	r3, [r4, #4]
    f0e6:	3108      	adds	r1, #8
    f0e8:	4318      	orrs	r0, r3
    f0ea:	6060      	str	r0, [r4, #4]
    f0ec:	9801      	ldr	r0, [sp, #4]
    f0ee:	f7fc fd69 	bl	bbc4 <_free_r>
    f0f2:	e7cf      	b.n	f094 <_realloc_r+0xf8>
    f0f4:	0011      	movs	r1, r2
    f0f6:	f7fc fe85 	bl	be04 <_malloc_r>
    f0fa:	0005      	movs	r5, r0
    f0fc:	e7cd      	b.n	f09a <_realloc_r+0xfe>
    f0fe:	4651      	mov	r1, sl
    f100:	4211      	tst	r1, r2
    f102:	d000      	beq.n	f106 <_realloc_r+0x16a>
    f104:	e786      	b.n	f014 <_realloc_r+0x78>
    f106:	4661      	mov	r1, ip
    f108:	683a      	ldr	r2, [r7, #0]
    f10a:	1aba      	subs	r2, r7, r2
    f10c:	4692      	mov	sl, r2
    f10e:	6852      	ldr	r2, [r2, #4]
    f110:	438a      	bics	r2, r1
    f112:	1880      	adds	r0, r0, r2
    f114:	4683      	mov	fp, r0
    f116:	44a3      	add	fp, r4
    f118:	459b      	cmp	fp, r3
    f11a:	db26      	blt.n	f16a <_realloc_r+0x1ce>
    f11c:	9a02      	ldr	r2, [sp, #8]
    f11e:	68d3      	ldr	r3, [r2, #12]
    f120:	6892      	ldr	r2, [r2, #8]
    f122:	60d3      	str	r3, [r2, #12]
    f124:	609a      	str	r2, [r3, #8]
    f126:	4653      	mov	r3, sl
    f128:	4652      	mov	r2, sl
    f12a:	4655      	mov	r5, sl
    f12c:	6892      	ldr	r2, [r2, #8]
    f12e:	68db      	ldr	r3, [r3, #12]
    f130:	3508      	adds	r5, #8
    f132:	60d3      	str	r3, [r2, #12]
    f134:	609a      	str	r2, [r3, #8]
    f136:	1f22      	subs	r2, r4, #4
    f138:	2a24      	cmp	r2, #36	; 0x24
    f13a:	d900      	bls.n	f13e <_realloc_r+0x1a2>
    f13c:	e096      	b.n	f26c <_realloc_r+0x2d0>
    f13e:	2a13      	cmp	r2, #19
    f140:	d972      	bls.n	f228 <_realloc_r+0x28c>
    f142:	4653      	mov	r3, sl
    f144:	6831      	ldr	r1, [r6, #0]
    f146:	6099      	str	r1, [r3, #8]
    f148:	6871      	ldr	r1, [r6, #4]
    f14a:	60d9      	str	r1, [r3, #12]
    f14c:	2a1b      	cmp	r2, #27
    f14e:	d900      	bls.n	f152 <_realloc_r+0x1b6>
    f150:	e0a4      	b.n	f29c <_realloc_r+0x300>
    f152:	0032      	movs	r2, r6
    f154:	3310      	adds	r3, #16
    f156:	3208      	adds	r2, #8
    f158:	e068      	b.n	f22c <_realloc_r+0x290>
    f15a:	683a      	ldr	r2, [r7, #0]
    f15c:	1aba      	subs	r2, r7, r2
    f15e:	4692      	mov	sl, r2
    f160:	4651      	mov	r1, sl
    f162:	2203      	movs	r2, #3
    f164:	6849      	ldr	r1, [r1, #4]
    f166:	4391      	bics	r1, r2
    f168:	000a      	movs	r2, r1
    f16a:	4693      	mov	fp, r2
    f16c:	44a3      	add	fp, r4
    f16e:	459b      	cmp	fp, r3
    f170:	da00      	bge.n	f174 <_realloc_r+0x1d8>
    f172:	e74f      	b.n	f014 <_realloc_r+0x78>
    f174:	e7d7      	b.n	f126 <_realloc_r+0x18a>
    f176:	2003      	movs	r0, #3
    f178:	9902      	ldr	r1, [sp, #8]
    f17a:	4684      	mov	ip, r0
    f17c:	6849      	ldr	r1, [r1, #4]
    f17e:	4381      	bics	r1, r0
    f180:	4640      	mov	r0, r8
    f182:	1909      	adds	r1, r1, r4
    f184:	3010      	adds	r0, #16
    f186:	9002      	str	r0, [sp, #8]
    f188:	4281      	cmp	r1, r0
    f18a:	da58      	bge.n	f23e <_realloc_r+0x2a2>
    f18c:	07d2      	lsls	r2, r2, #31
    f18e:	d500      	bpl.n	f192 <_realloc_r+0x1f6>
    f190:	e740      	b.n	f014 <_realloc_r+0x78>
    f192:	4660      	mov	r0, ip
    f194:	683a      	ldr	r2, [r7, #0]
    f196:	1aba      	subs	r2, r7, r2
    f198:	4692      	mov	sl, r2
    f19a:	6852      	ldr	r2, [r2, #4]
    f19c:	4382      	bics	r2, r0
    f19e:	9802      	ldr	r0, [sp, #8]
    f1a0:	1851      	adds	r1, r2, r1
    f1a2:	9103      	str	r1, [sp, #12]
    f1a4:	4288      	cmp	r0, r1
    f1a6:	dce0      	bgt.n	f16a <_realloc_r+0x1ce>
    f1a8:	4653      	mov	r3, sl
    f1aa:	4652      	mov	r2, sl
    f1ac:	4655      	mov	r5, sl
    f1ae:	6892      	ldr	r2, [r2, #8]
    f1b0:	68db      	ldr	r3, [r3, #12]
    f1b2:	3508      	adds	r5, #8
    f1b4:	60d3      	str	r3, [r2, #12]
    f1b6:	609a      	str	r2, [r3, #8]
    f1b8:	1f22      	subs	r2, r4, #4
    f1ba:	2a24      	cmp	r2, #36	; 0x24
    f1bc:	d900      	bls.n	f1c0 <_realloc_r+0x224>
    f1be:	e08e      	b.n	f2de <_realloc_r+0x342>
    f1c0:	2a13      	cmp	r2, #19
    f1c2:	d800      	bhi.n	f1c6 <_realloc_r+0x22a>
    f1c4:	e088      	b.n	f2d8 <_realloc_r+0x33c>
    f1c6:	4653      	mov	r3, sl
    f1c8:	6831      	ldr	r1, [r6, #0]
    f1ca:	6099      	str	r1, [r3, #8]
    f1cc:	6871      	ldr	r1, [r6, #4]
    f1ce:	60d9      	str	r1, [r3, #12]
    f1d0:	2a1b      	cmp	r2, #27
    f1d2:	d900      	bls.n	f1d6 <_realloc_r+0x23a>
    f1d4:	e088      	b.n	f2e8 <_realloc_r+0x34c>
    f1d6:	0032      	movs	r2, r6
    f1d8:	3310      	adds	r3, #16
    f1da:	3208      	adds	r2, #8
    f1dc:	6811      	ldr	r1, [r2, #0]
    f1de:	6019      	str	r1, [r3, #0]
    f1e0:	6851      	ldr	r1, [r2, #4]
    f1e2:	6059      	str	r1, [r3, #4]
    f1e4:	6892      	ldr	r2, [r2, #8]
    f1e6:	609a      	str	r2, [r3, #8]
    f1e8:	4651      	mov	r1, sl
    f1ea:	465b      	mov	r3, fp
    f1ec:	4642      	mov	r2, r8
    f1ee:	4441      	add	r1, r8
    f1f0:	6099      	str	r1, [r3, #8]
    f1f2:	9b03      	ldr	r3, [sp, #12]
    f1f4:	9801      	ldr	r0, [sp, #4]
    f1f6:	1a9a      	subs	r2, r3, r2
    f1f8:	2301      	movs	r3, #1
    f1fa:	431a      	orrs	r2, r3
    f1fc:	604a      	str	r2, [r1, #4]
    f1fe:	4652      	mov	r2, sl
    f200:	6852      	ldr	r2, [r2, #4]
    f202:	4013      	ands	r3, r2
    f204:	4642      	mov	r2, r8
    f206:	4313      	orrs	r3, r2
    f208:	4652      	mov	r2, sl
    f20a:	6053      	str	r3, [r2, #4]
    f20c:	f7fd f93e 	bl	c48c <__malloc_unlock>
    f210:	e743      	b.n	f09a <_realloc_r+0xfe>
    f212:	6833      	ldr	r3, [r6, #0]
    f214:	6003      	str	r3, [r0, #0]
    f216:	6873      	ldr	r3, [r6, #4]
    f218:	6043      	str	r3, [r0, #4]
    f21a:	2a1b      	cmp	r2, #27
    f21c:	d82d      	bhi.n	f27a <_realloc_r+0x2de>
    f21e:	0003      	movs	r3, r0
    f220:	0032      	movs	r2, r6
    f222:	3308      	adds	r3, #8
    f224:	3208      	adds	r2, #8
    f226:	e70d      	b.n	f044 <_realloc_r+0xa8>
    f228:	002b      	movs	r3, r5
    f22a:	0032      	movs	r2, r6
    f22c:	6811      	ldr	r1, [r2, #0]
    f22e:	465c      	mov	r4, fp
    f230:	6019      	str	r1, [r3, #0]
    f232:	6851      	ldr	r1, [r2, #4]
    f234:	46d1      	mov	r9, sl
    f236:	6059      	str	r1, [r3, #4]
    f238:	6892      	ldr	r2, [r2, #8]
    f23a:	609a      	str	r2, [r3, #8]
    f23c:	e71b      	b.n	f076 <_realloc_r+0xda>
    f23e:	4643      	mov	r3, r8
    f240:	18fa      	adds	r2, r7, r3
    f242:	465b      	mov	r3, fp
    f244:	609a      	str	r2, [r3, #8]
    f246:	4643      	mov	r3, r8
    f248:	1ac9      	subs	r1, r1, r3
    f24a:	2301      	movs	r3, #1
    f24c:	4319      	orrs	r1, r3
    f24e:	6051      	str	r1, [r2, #4]
    f250:	687a      	ldr	r2, [r7, #4]
    f252:	9801      	ldr	r0, [sp, #4]
    f254:	4013      	ands	r3, r2
    f256:	4642      	mov	r2, r8
    f258:	4313      	orrs	r3, r2
    f25a:	607b      	str	r3, [r7, #4]
    f25c:	f7fd f916 	bl	c48c <__malloc_unlock>
    f260:	0035      	movs	r5, r6
    f262:	e71a      	b.n	f09a <_realloc_r+0xfe>
    f264:	0031      	movs	r1, r6
    f266:	f7ff fe49 	bl	eefc <memmove>
    f26a:	e6f1      	b.n	f050 <_realloc_r+0xb4>
    f26c:	0031      	movs	r1, r6
    f26e:	0028      	movs	r0, r5
    f270:	f7ff fe44 	bl	eefc <memmove>
    f274:	465c      	mov	r4, fp
    f276:	46d1      	mov	r9, sl
    f278:	e6fd      	b.n	f076 <_realloc_r+0xda>
    f27a:	68b3      	ldr	r3, [r6, #8]
    f27c:	6083      	str	r3, [r0, #8]
    f27e:	68f3      	ldr	r3, [r6, #12]
    f280:	60c3      	str	r3, [r0, #12]
    f282:	2a24      	cmp	r2, #36	; 0x24
    f284:	d015      	beq.n	f2b2 <_realloc_r+0x316>
    f286:	0003      	movs	r3, r0
    f288:	0032      	movs	r2, r6
    f28a:	3310      	adds	r3, #16
    f28c:	3210      	adds	r2, #16
    f28e:	e6d9      	b.n	f044 <_realloc_r+0xa8>
    f290:	6853      	ldr	r3, [r2, #4]
    f292:	2203      	movs	r2, #3
    f294:	4393      	bics	r3, r2
    f296:	18e4      	adds	r4, r4, r3
    f298:	0035      	movs	r5, r6
    f29a:	e6ec      	b.n	f076 <_realloc_r+0xda>
    f29c:	4653      	mov	r3, sl
    f29e:	68b1      	ldr	r1, [r6, #8]
    f2a0:	6119      	str	r1, [r3, #16]
    f2a2:	68f1      	ldr	r1, [r6, #12]
    f2a4:	6159      	str	r1, [r3, #20]
    f2a6:	2a24      	cmp	r2, #36	; 0x24
    f2a8:	d00c      	beq.n	f2c4 <_realloc_r+0x328>
    f2aa:	0032      	movs	r2, r6
    f2ac:	3318      	adds	r3, #24
    f2ae:	3210      	adds	r2, #16
    f2b0:	e7bc      	b.n	f22c <_realloc_r+0x290>
    f2b2:	6933      	ldr	r3, [r6, #16]
    f2b4:	0032      	movs	r2, r6
    f2b6:	6103      	str	r3, [r0, #16]
    f2b8:	0003      	movs	r3, r0
    f2ba:	6971      	ldr	r1, [r6, #20]
    f2bc:	3318      	adds	r3, #24
    f2be:	3218      	adds	r2, #24
    f2c0:	6141      	str	r1, [r0, #20]
    f2c2:	e6bf      	b.n	f044 <_realloc_r+0xa8>
    f2c4:	4653      	mov	r3, sl
    f2c6:	6932      	ldr	r2, [r6, #16]
    f2c8:	4651      	mov	r1, sl
    f2ca:	619a      	str	r2, [r3, #24]
    f2cc:	0032      	movs	r2, r6
    f2ce:	6970      	ldr	r0, [r6, #20]
    f2d0:	3320      	adds	r3, #32
    f2d2:	3218      	adds	r2, #24
    f2d4:	61c8      	str	r0, [r1, #28]
    f2d6:	e7a9      	b.n	f22c <_realloc_r+0x290>
    f2d8:	002b      	movs	r3, r5
    f2da:	0032      	movs	r2, r6
    f2dc:	e77e      	b.n	f1dc <_realloc_r+0x240>
    f2de:	0031      	movs	r1, r6
    f2e0:	0028      	movs	r0, r5
    f2e2:	f7ff fe0b 	bl	eefc <memmove>
    f2e6:	e77f      	b.n	f1e8 <_realloc_r+0x24c>
    f2e8:	4653      	mov	r3, sl
    f2ea:	68b1      	ldr	r1, [r6, #8]
    f2ec:	6119      	str	r1, [r3, #16]
    f2ee:	68f1      	ldr	r1, [r6, #12]
    f2f0:	6159      	str	r1, [r3, #20]
    f2f2:	2a24      	cmp	r2, #36	; 0x24
    f2f4:	d003      	beq.n	f2fe <_realloc_r+0x362>
    f2f6:	0032      	movs	r2, r6
    f2f8:	3318      	adds	r3, #24
    f2fa:	3210      	adds	r2, #16
    f2fc:	e76e      	b.n	f1dc <_realloc_r+0x240>
    f2fe:	4653      	mov	r3, sl
    f300:	6932      	ldr	r2, [r6, #16]
    f302:	4651      	mov	r1, sl
    f304:	619a      	str	r2, [r3, #24]
    f306:	0032      	movs	r2, r6
    f308:	6970      	ldr	r0, [r6, #20]
    f30a:	3320      	adds	r3, #32
    f30c:	3218      	adds	r2, #24
    f30e:	61c8      	str	r0, [r1, #28]
    f310:	e764      	b.n	f1dc <_realloc_r+0x240>
    f312:	46c0      	nop			; (mov r8, r8)
    f314:	20000620 	.word	0x20000620

0000f318 <strncmp>:
    f318:	b530      	push	{r4, r5, lr}
    f31a:	2400      	movs	r4, #0
    f31c:	2a00      	cmp	r2, #0
    f31e:	d039      	beq.n	f394 <strncmp+0x7c>
    f320:	0003      	movs	r3, r0
    f322:	430b      	orrs	r3, r1
    f324:	079b      	lsls	r3, r3, #30
    f326:	d120      	bne.n	f36a <strncmp+0x52>
    f328:	2a03      	cmp	r2, #3
    f32a:	d91e      	bls.n	f36a <strncmp+0x52>
    f32c:	6803      	ldr	r3, [r0, #0]
    f32e:	680d      	ldr	r5, [r1, #0]
    f330:	42ab      	cmp	r3, r5
    f332:	d11a      	bne.n	f36a <strncmp+0x52>
    f334:	3a04      	subs	r2, #4
    f336:	2a00      	cmp	r2, #0
    f338:	d02c      	beq.n	f394 <strncmp+0x7c>
    f33a:	4d1a      	ldr	r5, [pc, #104]	; (f3a4 <strncmp+0x8c>)
    f33c:	195d      	adds	r5, r3, r5
    f33e:	439d      	bics	r5, r3
    f340:	002b      	movs	r3, r5
    f342:	4d19      	ldr	r5, [pc, #100]	; (f3a8 <strncmp+0x90>)
    f344:	422b      	tst	r3, r5
    f346:	d00c      	beq.n	f362 <strncmp+0x4a>
    f348:	e024      	b.n	f394 <strncmp+0x7c>
    f34a:	6803      	ldr	r3, [r0, #0]
    f34c:	680c      	ldr	r4, [r1, #0]
    f34e:	42a3      	cmp	r3, r4
    f350:	d10b      	bne.n	f36a <strncmp+0x52>
    f352:	3a04      	subs	r2, #4
    f354:	2a00      	cmp	r2, #0
    f356:	d01f      	beq.n	f398 <strncmp+0x80>
    f358:	4c12      	ldr	r4, [pc, #72]	; (f3a4 <strncmp+0x8c>)
    f35a:	191c      	adds	r4, r3, r4
    f35c:	439c      	bics	r4, r3
    f35e:	422c      	tst	r4, r5
    f360:	d11a      	bne.n	f398 <strncmp+0x80>
    f362:	3004      	adds	r0, #4
    f364:	3104      	adds	r1, #4
    f366:	2a03      	cmp	r2, #3
    f368:	d8ef      	bhi.n	f34a <strncmp+0x32>
    f36a:	7803      	ldrb	r3, [r0, #0]
    f36c:	780d      	ldrb	r5, [r1, #0]
    f36e:	3a01      	subs	r2, #1
    f370:	429d      	cmp	r5, r3
    f372:	d113      	bne.n	f39c <strncmp+0x84>
    f374:	2a00      	cmp	r2, #0
    f376:	d00f      	beq.n	f398 <strncmp+0x80>
    f378:	2d00      	cmp	r5, #0
    f37a:	d00d      	beq.n	f398 <strncmp+0x80>
    f37c:	2301      	movs	r3, #1
    f37e:	e004      	b.n	f38a <strncmp+0x72>
    f380:	429a      	cmp	r2, r3
    f382:	d009      	beq.n	f398 <strncmp+0x80>
    f384:	3301      	adds	r3, #1
    f386:	2c00      	cmp	r4, #0
    f388:	d006      	beq.n	f398 <strncmp+0x80>
    f38a:	5cc4      	ldrb	r4, [r0, r3]
    f38c:	5ccd      	ldrb	r5, [r1, r3]
    f38e:	42ac      	cmp	r4, r5
    f390:	d0f6      	beq.n	f380 <strncmp+0x68>
    f392:	1b64      	subs	r4, r4, r5
    f394:	0020      	movs	r0, r4
    f396:	bd30      	pop	{r4, r5, pc}
    f398:	2400      	movs	r4, #0
    f39a:	e7fb      	b.n	f394 <strncmp+0x7c>
    f39c:	001c      	movs	r4, r3
    f39e:	1b64      	subs	r4, r4, r5
    f3a0:	e7f8      	b.n	f394 <strncmp+0x7c>
    f3a2:	46c0      	nop			; (mov r8, r8)
    f3a4:	fefefeff 	.word	0xfefefeff
    f3a8:	80808080 	.word	0x80808080

0000f3ac <__aeabi_dcmpun>:
    f3ac:	b570      	push	{r4, r5, r6, lr}
    f3ae:	4e0e      	ldr	r6, [pc, #56]	; (f3e8 <__aeabi_dcmpun+0x3c>)
    f3b0:	030d      	lsls	r5, r1, #12
    f3b2:	031c      	lsls	r4, r3, #12
    f3b4:	0049      	lsls	r1, r1, #1
    f3b6:	005b      	lsls	r3, r3, #1
    f3b8:	0b2d      	lsrs	r5, r5, #12
    f3ba:	0d49      	lsrs	r1, r1, #21
    f3bc:	0b24      	lsrs	r4, r4, #12
    f3be:	0d5b      	lsrs	r3, r3, #21
    f3c0:	42b1      	cmp	r1, r6
    f3c2:	d004      	beq.n	f3ce <__aeabi_dcmpun+0x22>
    f3c4:	4908      	ldr	r1, [pc, #32]	; (f3e8 <__aeabi_dcmpun+0x3c>)
    f3c6:	2000      	movs	r0, #0
    f3c8:	428b      	cmp	r3, r1
    f3ca:	d008      	beq.n	f3de <__aeabi_dcmpun+0x32>
    f3cc:	bd70      	pop	{r4, r5, r6, pc}
    f3ce:	4305      	orrs	r5, r0
    f3d0:	2001      	movs	r0, #1
    f3d2:	2d00      	cmp	r5, #0
    f3d4:	d1fa      	bne.n	f3cc <__aeabi_dcmpun+0x20>
    f3d6:	4904      	ldr	r1, [pc, #16]	; (f3e8 <__aeabi_dcmpun+0x3c>)
    f3d8:	2000      	movs	r0, #0
    f3da:	428b      	cmp	r3, r1
    f3dc:	d1f6      	bne.n	f3cc <__aeabi_dcmpun+0x20>
    f3de:	4314      	orrs	r4, r2
    f3e0:	0020      	movs	r0, r4
    f3e2:	1e44      	subs	r4, r0, #1
    f3e4:	41a0      	sbcs	r0, r4
    f3e6:	e7f1      	b.n	f3cc <__aeabi_dcmpun+0x20>
    f3e8:	000007ff 	.word	0x000007ff

0000f3ec <__aeabi_d2f>:
    f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3ee:	004c      	lsls	r4, r1, #1
    f3f0:	0d64      	lsrs	r4, r4, #21
    f3f2:	030b      	lsls	r3, r1, #12
    f3f4:	1c62      	adds	r2, r4, #1
    f3f6:	0f45      	lsrs	r5, r0, #29
    f3f8:	0a5b      	lsrs	r3, r3, #9
    f3fa:	0552      	lsls	r2, r2, #21
    f3fc:	432b      	orrs	r3, r5
    f3fe:	0fc9      	lsrs	r1, r1, #31
    f400:	00c5      	lsls	r5, r0, #3
    f402:	0d52      	lsrs	r2, r2, #21
    f404:	2a01      	cmp	r2, #1
    f406:	dd28      	ble.n	f45a <__aeabi_d2f+0x6e>
    f408:	4a3a      	ldr	r2, [pc, #232]	; (f4f4 <__aeabi_d2f+0x108>)
    f40a:	18a6      	adds	r6, r4, r2
    f40c:	2efe      	cmp	r6, #254	; 0xfe
    f40e:	dc1b      	bgt.n	f448 <__aeabi_d2f+0x5c>
    f410:	2e00      	cmp	r6, #0
    f412:	dd3e      	ble.n	f492 <__aeabi_d2f+0xa6>
    f414:	0180      	lsls	r0, r0, #6
    f416:	0002      	movs	r2, r0
    f418:	1e50      	subs	r0, r2, #1
    f41a:	4182      	sbcs	r2, r0
    f41c:	0f6d      	lsrs	r5, r5, #29
    f41e:	432a      	orrs	r2, r5
    f420:	00db      	lsls	r3, r3, #3
    f422:	4313      	orrs	r3, r2
    f424:	075a      	lsls	r2, r3, #29
    f426:	d004      	beq.n	f432 <__aeabi_d2f+0x46>
    f428:	220f      	movs	r2, #15
    f42a:	401a      	ands	r2, r3
    f42c:	2a04      	cmp	r2, #4
    f42e:	d000      	beq.n	f432 <__aeabi_d2f+0x46>
    f430:	3304      	adds	r3, #4
    f432:	2280      	movs	r2, #128	; 0x80
    f434:	04d2      	lsls	r2, r2, #19
    f436:	401a      	ands	r2, r3
    f438:	d05a      	beq.n	f4f0 <__aeabi_d2f+0x104>
    f43a:	3601      	adds	r6, #1
    f43c:	2eff      	cmp	r6, #255	; 0xff
    f43e:	d003      	beq.n	f448 <__aeabi_d2f+0x5c>
    f440:	019b      	lsls	r3, r3, #6
    f442:	0a5b      	lsrs	r3, r3, #9
    f444:	b2f4      	uxtb	r4, r6
    f446:	e001      	b.n	f44c <__aeabi_d2f+0x60>
    f448:	24ff      	movs	r4, #255	; 0xff
    f44a:	2300      	movs	r3, #0
    f44c:	0258      	lsls	r0, r3, #9
    f44e:	05e4      	lsls	r4, r4, #23
    f450:	0a40      	lsrs	r0, r0, #9
    f452:	07c9      	lsls	r1, r1, #31
    f454:	4320      	orrs	r0, r4
    f456:	4308      	orrs	r0, r1
    f458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f45a:	2c00      	cmp	r4, #0
    f45c:	d007      	beq.n	f46e <__aeabi_d2f+0x82>
    f45e:	431d      	orrs	r5, r3
    f460:	d0f2      	beq.n	f448 <__aeabi_d2f+0x5c>
    f462:	2080      	movs	r0, #128	; 0x80
    f464:	00db      	lsls	r3, r3, #3
    f466:	0480      	lsls	r0, r0, #18
    f468:	4303      	orrs	r3, r0
    f46a:	26ff      	movs	r6, #255	; 0xff
    f46c:	e7da      	b.n	f424 <__aeabi_d2f+0x38>
    f46e:	432b      	orrs	r3, r5
    f470:	d003      	beq.n	f47a <__aeabi_d2f+0x8e>
    f472:	2305      	movs	r3, #5
    f474:	08db      	lsrs	r3, r3, #3
    f476:	2cff      	cmp	r4, #255	; 0xff
    f478:	d003      	beq.n	f482 <__aeabi_d2f+0x96>
    f47a:	025b      	lsls	r3, r3, #9
    f47c:	0a5b      	lsrs	r3, r3, #9
    f47e:	b2e4      	uxtb	r4, r4
    f480:	e7e4      	b.n	f44c <__aeabi_d2f+0x60>
    f482:	2b00      	cmp	r3, #0
    f484:	d032      	beq.n	f4ec <__aeabi_d2f+0x100>
    f486:	2080      	movs	r0, #128	; 0x80
    f488:	03c0      	lsls	r0, r0, #15
    f48a:	4303      	orrs	r3, r0
    f48c:	025b      	lsls	r3, r3, #9
    f48e:	0a5b      	lsrs	r3, r3, #9
    f490:	e7dc      	b.n	f44c <__aeabi_d2f+0x60>
    f492:	0032      	movs	r2, r6
    f494:	3217      	adds	r2, #23
    f496:	db14      	blt.n	f4c2 <__aeabi_d2f+0xd6>
    f498:	2280      	movs	r2, #128	; 0x80
    f49a:	271e      	movs	r7, #30
    f49c:	0412      	lsls	r2, r2, #16
    f49e:	4313      	orrs	r3, r2
    f4a0:	1bbf      	subs	r7, r7, r6
    f4a2:	2f1f      	cmp	r7, #31
    f4a4:	dc0f      	bgt.n	f4c6 <__aeabi_d2f+0xda>
    f4a6:	4a14      	ldr	r2, [pc, #80]	; (f4f8 <__aeabi_d2f+0x10c>)
    f4a8:	4694      	mov	ip, r2
    f4aa:	4464      	add	r4, ip
    f4ac:	002a      	movs	r2, r5
    f4ae:	40a5      	lsls	r5, r4
    f4b0:	002e      	movs	r6, r5
    f4b2:	40a3      	lsls	r3, r4
    f4b4:	1e75      	subs	r5, r6, #1
    f4b6:	41ae      	sbcs	r6, r5
    f4b8:	40fa      	lsrs	r2, r7
    f4ba:	4333      	orrs	r3, r6
    f4bc:	4313      	orrs	r3, r2
    f4be:	2600      	movs	r6, #0
    f4c0:	e7b0      	b.n	f424 <__aeabi_d2f+0x38>
    f4c2:	2400      	movs	r4, #0
    f4c4:	e7d5      	b.n	f472 <__aeabi_d2f+0x86>
    f4c6:	2202      	movs	r2, #2
    f4c8:	4252      	negs	r2, r2
    f4ca:	1b96      	subs	r6, r2, r6
    f4cc:	001a      	movs	r2, r3
    f4ce:	40f2      	lsrs	r2, r6
    f4d0:	2f20      	cmp	r7, #32
    f4d2:	d009      	beq.n	f4e8 <__aeabi_d2f+0xfc>
    f4d4:	4809      	ldr	r0, [pc, #36]	; (f4fc <__aeabi_d2f+0x110>)
    f4d6:	4684      	mov	ip, r0
    f4d8:	4464      	add	r4, ip
    f4da:	40a3      	lsls	r3, r4
    f4dc:	432b      	orrs	r3, r5
    f4de:	1e5d      	subs	r5, r3, #1
    f4e0:	41ab      	sbcs	r3, r5
    f4e2:	2600      	movs	r6, #0
    f4e4:	4313      	orrs	r3, r2
    f4e6:	e79d      	b.n	f424 <__aeabi_d2f+0x38>
    f4e8:	2300      	movs	r3, #0
    f4ea:	e7f7      	b.n	f4dc <__aeabi_d2f+0xf0>
    f4ec:	2300      	movs	r3, #0
    f4ee:	e7ad      	b.n	f44c <__aeabi_d2f+0x60>
    f4f0:	0034      	movs	r4, r6
    f4f2:	e7bf      	b.n	f474 <__aeabi_d2f+0x88>
    f4f4:	fffffc80 	.word	0xfffffc80
    f4f8:	fffffc82 	.word	0xfffffc82
    f4fc:	fffffca2 	.word	0xfffffca2
    f500:	682f2e2e 	.word	0x682f2e2e
    f504:	732f6c61 	.word	0x732f6c61
    f508:	682f6372 	.word	0x682f6372
    f50c:	695f6c61 	.word	0x695f6c61
    f510:	6d5f6332 	.word	0x6d5f6332
    f514:	6e79735f 	.word	0x6e79735f
    f518:	00632e63 	.word	0x00632e63
    f51c:	682f2e2e 	.word	0x682f2e2e
    f520:	732f6c61 	.word	0x732f6c61
    f524:	682f6372 	.word	0x682f6372
    f528:	695f6c61 	.word	0x695f6c61
    f52c:	00632e6f 	.word	0x00632e6f
    f530:	682f2e2e 	.word	0x682f2e2e
    f534:	732f6c61 	.word	0x732f6c61
    f538:	682f6372 	.word	0x682f6372
    f53c:	735f6c61 	.word	0x735f6c61
    f540:	6d5f6970 	.word	0x6d5f6970
    f544:	6e79735f 	.word	0x6e79735f
    f548:	00632e63 	.word	0x00632e63
    f54c:	682f2e2e 	.word	0x682f2e2e
    f550:	732f6c61 	.word	0x732f6c61
    f554:	682f6372 	.word	0x682f6372
    f558:	745f6c61 	.word	0x745f6c61
    f55c:	72656d69 	.word	0x72656d69
    f560:	0000632e 	.word	0x0000632e
    f564:	682f2e2e 	.word	0x682f2e2e
    f568:	732f6c61 	.word	0x732f6c61
    f56c:	682f6372 	.word	0x682f6372
    f570:	755f6c61 	.word	0x755f6c61
    f574:	74726173 	.word	0x74726173
    f578:	7973615f 	.word	0x7973615f
    f57c:	632e636e 	.word	0x632e636e
    f580:	00000000 	.word	0x00000000
    f584:	682f2e2e 	.word	0x682f2e2e
    f588:	752f6c61 	.word	0x752f6c61
    f58c:	736c6974 	.word	0x736c6974
    f590:	6372732f 	.word	0x6372732f
    f594:	6974752f 	.word	0x6974752f
    f598:	6c5f736c 	.word	0x6c5f736c
    f59c:	2e747369 	.word	0x2e747369
    f5a0:	00000063 	.word	0x00000063
    f5a4:	682f2e2e 	.word	0x682f2e2e
    f5a8:	752f6c61 	.word	0x752f6c61
    f5ac:	736c6974 	.word	0x736c6974
    f5b0:	6372732f 	.word	0x6372732f
    f5b4:	6974752f 	.word	0x6974752f
    f5b8:	725f736c 	.word	0x725f736c
    f5bc:	62676e69 	.word	0x62676e69
    f5c0:	65666675 	.word	0x65666675
    f5c4:	00632e72 	.word	0x00632e72
    f5c8:	682f2e2e 	.word	0x682f2e2e
    f5cc:	652f6c70 	.word	0x652f6c70
    f5d0:	682f6369 	.word	0x682f6369
    f5d4:	655f6c70 	.word	0x655f6c70
    f5d8:	632e6369 	.word	0x632e6369
    f5dc:	00000000 	.word	0x00000000

0000f5e0 <_map>:
    f5e0:	00000008 00000028 682f2e2e 722f6c70     ....(...../hpl/r
    f5f0:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    f600:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    f610:	65735f6c 6d6f6372 0000632e              l_sercom.c..

0000f61c <_i2cms>:
    f61c:	00000002 00200014 00000100 00003736     ...... .....67..
    f62c:	000000d7 02dc6c00                       .....l..

0000f634 <_usarts>:
    f634:	00000004 40010004 00030000 0000d555     .......@....U...

0000f644 <sercomspi_regs>:
    f644:	0020000c 00020000 00000000 000000fe     .. .............
    f654:	0020000c 00020000 00000000 03000003     .. .............
    f664:	00002f06 00002f1a 00002f32 00002f4a     ./.../..2/..J/..
    f674:	00002f74 00002f8e 0000304c 00002fb8     t/.../..L0.../..
    f684:	00002fdc 00002fe6 00002ff0 00003008     ./.../.../...0..
    f694:	0000302e 0000372c 00003736 00003740     .0..,7..67..@7..
    f6a4:	00003748 00003752 0000375c              H7..R7..\7..

0000f6b0 <ExCvt>:
    f6b0:	41459a80 808f418e 49454545 8f8e4949     ..EA.A..EEEIII..
    f6c0:	4f929290 55554f99 9b9a9959 9f9e9d9c     ...O.OUUY.......
    f6d0:	554f4941 a7a6a5a5 abaaa9a8 afaeadac     AIOU............
    f6e0:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    f6f0:	c3c2c1c0 c7c6c5c4 cbcac9c8 cfcecdcc     ................
    f700:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    f710:	e3e2e1e0 e7e6e5e4 ebeae9e8 efeeedec     ................
    f720:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................
    f730:	33544146 20202032 00000000 3a2c2b2a     FAT32   ....*+,:
    f740:	3e3d3c3b 227c5d5b 00007f3f 00000cf0     ;<=>[]|"?.......

0000f750 <favicon_ico>:
    f750:	474e5089 0a1a0a0d 0d000000 52444849     .PNG........IHDR
    f760:	20000000 20000000 00000608 7a7a7300     ... ... .....szz
    f770:	000000f4 49427304 08080854 64087c08     .....sBIT....|.d
    f780:	00000088 59487009 00000073 000000ec     .....pHYs.......
    f790:	287901ec 0000bd71 45741900 6f537458     ..y(q.....tEXtSo
    f7a0:	61777466 77006572 692e7777 63736b6e     ftware.www.inksc
    f7b0:	2e657061 9b67726f 001a3cee 49ff0400     ape.org..<.....I
    f7c0:	58544144 7997c585 1c57144c ec333fc7     DATX...yL.W..?3.
    f7d0:	2ebb5cb2 8882a2b0 45141647 d62ecf1a     .\......G..E....
    f7e0:	61ed5ab6 d5624a2b 1de34da6 dad46aaf     .Z.a+Jb..M...j..
    f7f0:	6351b5a4 5a969b1b c6a26adb a53136da     ..Qc...Z.j...61.
    f800:	21a2d135 278d623d ada236b6 8820ae88     5..!=b.'.6.... .
    f810:	22c8825c ccc7b2c8 40ff4cce a8239017     \..".....L.@..#.
    f820:	4cffbf68 7efdef7e 3379fbef 819bdef3     h..L~..~..y3....
    f830:	ddc259ff fc10106b 80ddbd84 24860047     .Y..k.......G..$
    f840:	16fe2626 3da31313 f2f2f749 b76ed172     &&.....=I...r.n.
    f850:	8480eaa7 b8d4d4d4 e2c763b1 aca8b972     .........c..r...
    f860:	9336ecac 2458d8d8 74e9c249 08d8d8d2     ..6...X$I..t....
    f870:	7d3e9f40 64ad5ab0 b7626666 5ae807db     @.>}.Z.dffb....Z
    f880:	b6deec16 dd6d578e 7dac2377 3e5c384d     .....Wm.w#.}M8\>
    f890:	9c246a2a 8f26beb5 76db02fd 228a2167     *j$...&....vg!."
    f8a0:	2200ad00 a70b0a4d 001b7405 37b03034     ..."M....t..40.7
    f8b0:	10004e8c 72a659d0 56c1d2e6 eb76ba19     .N...Y.r...V..v.
    f8c0:	dbadd13a 782fa70a a8922bc8 d0d155ae     :...../x.+...U..
    f8d0:	30053088 13206074 33d10546 0809e3bc     .0.0t` .F..3....
    f8e0:	6d36c601 b1c8065d 50f6f97b 9110c603     ..6m]...{..P....
    f8f0:	b10647e7 88899a60 0aaa221e 8a3ed565     .G..`...."..e.>.
    f900:	efd664ca 69248dba 62619e2c 4ba1a274     .d....$i,.abt..K
    f910:	b00a76e3 7a1ddf7d 2c5c8846 88310894     .v..}..zF.\,..1.
    f920:	8222b67c dfd110b0 034f75bf 1be6ab00     |."......uO.....
    f930:	79eac6b1 a7042539 77f3654b ec3bec75     ...y9%..Ke.wu.;.
    f940:	11a5e3e4 1d0a0504 d8800f0d a99ce759     ............Y...
    f950:	dfdcec61 1922a5c0 2b4370db 9972a2f3     a....."..pC+..r.
    f960:	fc7da733 fb34dd95 110b0a7b 822cbcd9     3.}...4.{.....,.
    f970:	31852fd9 ea2dc367 01c3ea9d 778d3ec8     ./.1g.-......>.w
    f980:	c765acbf fa7e16fb b17b0a24 b74dfccc     ..e...~.$.{...M.
    f990:	352abdc8 3290cbf5 67b8c75e db4ac875     ..*5...2^..gu.J.
    f9a0:	621a8e59 6605c3e0 835a7d96 b2bc7724     Y..b...f.}Z.$w..
    f9b0:	a8a805da ba4ef1f6 d1a48f03 830eb7af     ......N.........
    f9c0:	ebe9605e 89aeb626 4689d0e4 083ba456     ^`..&......FV.;.
    f9d0:	6f18120e 2dbc640b dbfdc190 46e1927f     ...o.d.-.......F
    f9e0:	95805111 3cb81c5b a9b443ed 2361e80c     .Q..[..<.C....a#
    f9f0:	37c150d6 f36b0f9f 9b0246d6 371b803e     .P.7..k..F..>..7
    fa00:	22b1981b 02d5eb8b e64dcf89 6c55cb99     ..."......M...Ul
    fa10:	9b54fc5c c147fbc1 639b3b8f 39d65bd5     \.T...G..;.c.[.9
    fa20:	00742e80 73fdd773 2eda3a37 8ac93df1     ..t.s..s7:...=..
    fa30:	0f747448 642baae4 b8a4ac5d fcd3a4b0     Htt...+d].......
    fa40:	021d1e96 557b7ecc 4ee90697 9e0aba75     .....~{U...Nu...
    fa50:	27781e84 79fd507c ff4a77f8 fb9ff6ce     ..x'|P.y.wJ.....
    fa60:	8d9c29b2 0fb476db 2e42ee70 8d3b1ebf     .)...v..p.B...;.
    fa70:	3b98144e 8d010d2b 46befb83 4dc62553     N..;+......FS%.M
    fa80:	f2524998 21451418 af1d3d3d 8a4a4bd7     .IR...E!==...KJ.
    fa90:	70d54d0d 7bfc5dbb 48c5b721 a7a7d31a     .M.p.].{!..H....
    faa0:	cc9c9c91 c967f395 80011a1c 6f34f490     ......g.......4o
    fab0:	2ce4edec cd9a3ac8 c5ed1f0b 8c8778db     ...,.:.......x..
    fac0:	a66356af 1a6b5d92 cc8a8531 52419f5a     .Vc..]k.1...Z.AR
    fad0:	0e1c18f2 21a16107 626938bc 6270ca8b     .....a.!.8ib..pb
    fae0:	a3f8c6fb 2e7afaba 9c92e6e6 aaa28c9c     ......z.........
    faf0:	ee7a735c 94e085ba f79696e4 434d023d     \sz.........=.MC
    fb00:	49141555 02451442 6b2bc008 f346aa28     U..IB.E...+k(.F.
    fb10:	251753c7 14dfe534 d5095e65 c37f1003     .S.%4...e^......
    fb20:	636f79ce a73300c7 d373224c 1d7a0c3c     .yoc..3.L"s.<.z.
    fb30:	01a66773 76c77ab0 899b927c c004de53     sg...z.v|...S...
    fb40:	f6e0b162 fc763878 b2de8764 5a5a47cf     b...x8v.d....GZZ
    fb50:	1816bd53 d79af040 85111be8 f82664c5     S...@........d&.
    fb60:	dcab6e6c 83890056 9c1c4813 fe612ad0     ln..V....H...*a.
    fb70:	62ad0d92 bb591451 e6cebdf6 10e64ade     ...bQ.Y......J..
    fb80:	3fbf9713 207d6dce 7c10a6aa e018ea47     ...?.m} ...|G...
    fb90:	82c96871 e7e7e495 7d35f3e3 f95ff511     qh........5}.._.
    fba0:	f3805b56 70e1cee7 238dfc38 edc08c47     V[.....p8..#G...
    fbb0:	b8ad7376 d3c78f18 151540ad 16151415     vs.......@......
    fbc0:	d3939392 0a69a00c 8844d29a afd72500     ......i...D..%..
    fbd0:	b20a28a1 ef6e69e4 47474546 0335a023     .(...in.FEGG#.5.
    fbe0:	19c39b84 5e106834 633087af d51401f3     ....4h.^..0c....
    fbf0:	9bb757ab 0d252403 49d4fb23 01aa803f     .W...$%.#..I?...
    fc00:	94f1f1f1 b5609694 d3163fc6 75adaa96     ......`..?.....u
    fc10:	0064fb20 f1cc0055 1ea3d6f1 259fa7b7      .d.U..........%
    fc20:	d3a8d232 9589fdeb 933e5555 b0f158d1     2.......UU>..X..
    fc30:	c78f6e46 f6043060 df358636 43871ad5     Fn..`0..6.5....C
    fc40:	15f5ebd3 17d6a69a e89d5c14 e2e25ddf     .........\...]..
    fc50:	5f2cf6e2 c59e6cbe 6f27f162 6145f2d9     ..,_.l..b.'o..Ea
    fc60:	f59e5e5e c9800161 fc2d168b f9b366c5     ^^..a.....-..f..
    fc70:	43f19567 471fcd46 2a070c8e 7432c5a1     g..CF..G...*..2t
    fc80:	0ea75cb9 8a79f81c 57f66cd9 95d5d5d7     .\....y..l.W....
    fc90:	4039823e 271389e1 cb4b4aab 05f900fc     >.9@...'.JK.....
    fca0:	dd400d05 fdfef8bd b7d00c35 4780eb88     ..@.....5......G
    fcb0:	ffba55fd c809d7c7 793ee41d 971e07fd     .U........>y....
    fcc0:	2862fbd7 0000d764 45490000 42ae444e     ..b(d.....IEND.B
    fcd0:	00008260 2e636261 00747874 77207449     `...abc.txt.It w
    fce0:	736b726f 000a0d21 5054554f 4154533a     orks!...OUTP:STA
    fcf0:	4e4f2054 00000000 00006b6f 5054554f     T ON....ok..OUTP
    fd00:	4154533a 464f2054 00000046 5341454d     :STAT OFF...MEAS
    fd10:	5255433a 00003f52 32312e30 00000031     :CURR?..0.121...
    fd20:	5341454d 4c4f563a 00003f54 302e3834     MEAS:VOLT?..48.0
    fd30:	00003133 5453522a 00000000 20544547     31..*RST....GET 
    fd40:	0000202f 20544547 7661662f 6e6f6369     / ..GET /favicon
    fd50:	6f63692e 00000000 50545448 312e312f     .ico....HTTP/1.1
    fd60:	30303220 0d4b4f20 6e6f430a 746e6574      200 OK..Content
    fd70:	7079542d 69203a65 6567616d 692d782f     -Type: image/x-i
    fd80:	0d6e6f63 000a0d0a 20544547 7465732f     con.....GET /set
    fd90:	6c61765f 00000073 3d706d61 76266625     _vals...amp=%f&v
    fda0:	3d746c6f 00006625 50545448 312e312f     olt=%f..HTTP/1.1
    fdb0:	30303220 0d4b4f20 6e6f430a 746e6574      200 OK..Content
    fdc0:	7079542d 61203a65 696c7070 69746163     -Type: applicati
    fdd0:	6a2f6e6f 0d6e6f73 7b0a0d0a 63757322     on/json....{"suc
    fde0:	73736563 72743a22 007d6575 20544547     cess":true}.GET 
    fdf0:	7465672f 6c61765f 00000073 50545448     /get_vals...HTTP
    fe00:	312e312f 30303220 0d4b4f20 6e6f430a     /1.1 200 OK..Con
    fe10:	746e6574 7079542d 61203a65 696c7070     tent-Type: appli
    fe20:	69746163 6a2f6e6f 0d6e6f73 7b0a0d0a     cation/json....{
    fe30:	706d6122 2e253a22 222c6633 746c6f76     "amp":%.3f,"volt
    fe40:	2e253a22 222c6633 74746177 2e253a22     ":%.3f,"watt":%.
    fe50:	222c6633 44706d61 3a224d4d 66332e25     3f,"ampDMM":%.3f
    fe60:	6f76222c 4d44746c 253a224d 2c66332e     ,"voltDMM":%.3f,
    fe70:	74756f22 74617453 253a2265 222c2064     "outState":%d ,"
    fe80:	226d6572 2c64253a 72726522 64253a22     rem":%d,"err":%d
    fe90:	6e69222c 253a2230 69222c64 3a22316e     ,"in0":%d,"in1":
    fea0:	222c6425 22326e69 2064253a 0000007d     %d,"in2":%d }...
    feb0:	20544547 6e6f632f 6c6f7274 00000000     GET /control....
    fec0:	69766564 253d6563 5d265e5b 74636126     device=%[^&]&act
    fed0:	3d6e6f69 00007325 006e6166 00006e6f     ion=%s..fan.on..
    fee0:	0066666f 006d6572 00757370              off.rem.psu.

0000feec <psu_page>:
    feec:	50545448 312e312f 30303220 0d4b4f20     HTTP/1.1 200 OK.
    fefc:	6e6f430a 746e6574 7079542d 74203a65     .Content-Type: t
    ff0c:	2f747865 6c6d7468 0a0d0a0d 4f44213c     ext/html....<!DO
    ff1c:	50595443 74682045 0a3e6c6d 6d74683c     CTYPE html>.<htm
    ff2c:	616c206c 223d676e 3e226e65 65683c0a     l lang="en">.<he
    ff3c:	0a3e6461 74656d3c 68632061 65737261     ad>.<meta charse
    ff4c:	55223d74 382d4654 3c0a3e22 6c746974     t="UTF-8">.<titl
    ff5c:	6f503e65 20726577 70707553 4320796c     e>Power Supply C
    ff6c:	72746e6f 2f3c6c6f 6c746974 3c0a3e65     ontrol</title>.<
    ff7c:	6c797473 620a3e65 2079646f 6f660a7b     style>.body {.fo
    ff8c:	662d746e 6c696d61 41203a79 6c616972     nt-family: Arial
    ff9c:	6173202c 732d736e 66697265 69640a3b     , sans-serif;.di
    ffac:	616c7073 66203a79 3b78656c 656c660a     splay: flex;.fle
    ffbc:	69642d78 74636572 3a6e6f69 6c6f6320     x-direction: col
    ffcc:	3b6e6d75 696c610a 692d6e67 736d6574     umn;.align-items
    ffdc:	6563203a 7265746e 61700a3b 6e696464     : center;.paddin
    ffec:	32203a67 3b787030 6361620a 6f72676b     g: 20px;.backgro
    fffc:	3a646e75 30662320 30663066 0a7d0a3b     und: #f0f0f0;.}.
   1000c:	6e6f632e 6e696174 7b207265 78616d0a     .container {.max
   1001c:	6469772d 203a6874 70303034 770a3b78     -width: 400px;.w
   1002c:	68746469 3031203a 0a3b2530 6b636162     idth: 100%;.back
   1003c:	756f7267 203a646e 74696877 700a3b65     ground: white;.p
   1004c:	69646461 203a676e 78703032 6f620a3b     adding: 20px;.bo
   1005c:	72656472 6461722d 3a737569 70303120     rder-radius: 10p
   1006c:	620a3b78 732d786f 6f646168 30203a77     x;.box-shadow: 0
   1007c:	31203020 20787030 61626772 202c3028      0 10px rgba(0, 
   1008c:	30202c30 2e30202c 0a3b2931 742e0a7d     0, 0, 0.1);.}..t
   1009c:	656c7469 740a7b20 2d747865 67696c61     itle {.text-alig
   100ac:	63203a6e 65746e65 6d0a3b72 69677261     n: center;.margi
   100bc:	6f622d6e 6d6f7474 3032203a 0a3b7870     n-bottom: 20px;.
   100cc:	722e0a7d 202c776f 706e692e 722d7475     }..row, .input-r
   100dc:	202c776f 6572702e 2d746573 20776f72     ow, .preset-row 
   100ec:	69640a7b 616c7073 66203a79 3b78656c     {.display: flex;
   100fc:	73756a0a 79666974 6e6f632d 746e6574     .justify-content
   1010c:	7073203a 2d656361 77746562 3b6e6565     : space-between;
   1011c:	696c610a 692d6e67 736d6574 6563203a     .align-items: ce
   1012c:	7265746e 616d0a3b 6e696772 746f622d     nter;.margin-bot
   1013c:	3a6d6f74 70303120 7d0a3b78 6f722e0a     tom: 10px;.}..ro
   1014c:	616c2077 2c6c6562 6e692e20 2d747570     w label, .input-
   1015c:	20776f72 6562616c 2e202c6c 73657270     row label, .pres
   1016c:	722d7465 6c20776f 6c656261 660a7b20     et-row label {.f
   1017c:	3a78656c 0a3b3120 722e0a7d 6920776f     lex: 1;.}..row i
   1018c:	7475706e 692e202c 7475706e 776f722d     nput, .input-row
   1019c:	706e6920 202c7475 6572702e 2d746573      input, .preset-
   101ac:	20776f72 75706e69 0a7b2074 74646977     row input {.widt
   101bc:	31203a68 78703030 65740a3b 612d7478     h: 100px;.text-a
   101cc:	6e67696c 6563203a 7265746e 0a7d0a3b     lign: center;.}.
   101dc:	7475622e 2d6e6f74 20776f72 69640a7b     .button-row {.di
   101ec:	616c7073 66203a79 3b78656c 73756a0a     splay: flex;.jus
   101fc:	79666974 6e6f632d 746e6574 7073203a     tify-content: sp
   1020c:	2d656361 77746562 3b6e6565 72616d0a     ace-between;.mar
   1021c:	2d6e6967 3a706f74 70303220 7d0a3b78     gin-top: 20px;.}
   1022c:	75622e0a 6e6f7474 770a7b20 68746469     ..button {.width
   1023c:	3834203a 700a3b25 69646461 203a676e     : 48%;.padding: 
   1024c:	78703031 61620a3b 72676b63 646e756f     10px;.background
   1025c:	3023203a 66623730 630a3b66 726f6c6f     : #007bff;.color
   1026c:	6877203a 3b657469 726f620a 3a726564     : white;.border:
   1027c:	6e6f6e20 620a3b65 6564726f 61722d72      none;.border-ra
   1028c:	73756964 7035203a 630a3b78 6f737275     dius: 5px;.curso
   1029c:	70203a72 746e696f 0a3b7265 622e0a7d     r: pointer;.}..b
   102ac:	6f747475 6f683a6e 20726576 61620a7b     utton:hover {.ba
   102bc:	72676b63 646e756f 3023203a 62363530     ckground: #0056b
   102cc:	7d0a3b33 72702e0a 74657365 776f722d     3;.}..preset-row
   102dc:	640a7b20 6c707369 203a7961 78656c66      {.display: flex
   102ec:	756a0a3b 66697473 6f632d79 6e65746e     ;.justify-conten
   102fc:	73203a74 65636170 7465622d 6e656577     t: space-between
   1030c:	616d0a3b 6e696772 706f742d 3032203a     ;.margin-top: 20
   1031c:	0a3b7870 702e0a7d 65736572 75622d74     px;.}..preset-bu
   1032c:	6e6f7474 770a7b20 68746469 3233203a     tton {.width: 32
   1033c:	700a3b25 69646461 203a676e 78703031     %;.padding: 10px
   1034c:	61620a3b 72676b63 646e756f 3223203a     ;.background: #2
   1035c:	34376138 630a3b35 726f6c6f 6877203a     8a745;.color: wh
   1036c:	3b657469 726f620a 3a726564 6e6f6e20     ite;.border: non
   1037c:	620a3b65 6564726f 61722d72 73756964     e;.border-radius
   1038c:	7035203a 630a3b78 6f737275 70203a72     : 5px;.cursor: p
   1039c:	746e696f 0a3b7265 702e0a7d 65736572     ointer;.}..prese
   103ac:	75622d74 6e6f7474 766f683a 7b207265     t-button:hover {
   103bc:	6361620a 6f72676b 3a646e75 31322320     .background: #21
   103cc:	38333838 0a7d0a3b 7065732e 74617261     8838;.}..separat
   103dc:	7b20726f 6469770a 203a6874 25303031     or {.width: 100%
   103ec:	65680a3b 74686769 7031203a 620a3b78     ;.height: 1px;.b
   103fc:	676b6361 6e756f72 23203a64 3b646464     ackground: #ddd;
   1040c:	72616d0a 3a6e6967 70303220 3b302078     .margin: 20px 0;
   1041c:	2e0a7d0a 20776f72 6170732e 2d646563     .}..row .spaced-
   1042c:	75706e69 0a7b2074 6772616d 6c2d6e69     input {.margin-l
   1043c:	3a746665 70303120 7d0a3b78 74732e0a     eft: 10px;.}..st
   1044c:	73757461 646e692d 74616369 7b20726f     atus-indicator {
   1045c:	6469770a 203a6874 78703032 65680a3b     .width: 20px;.he
   1046c:	74686769 3032203a 0a3b7870 64726f62     ight: 20px;.bord
   1047c:	722d7265 75696461 35203a73 0a3b2530     er-radius: 50%;.
   1048c:	6b636162 756f7267 203a646e 63636323     background: #ccc
   1049c:	2a2f203b 66654420 746c7561 206f7420     ; /* Default to 
   104ac:	79617267 0a2f2a20 692e0a7d 6369646e     gray */.}..indic
   104bc:	726f7461 6e6f632d 6e696174 7b207265     ator-container {
   104cc:	7369640a 79616c70 6c66203a 0a3b7865     .display: flex;.
   104dc:	78656c66 7269642d 69746365 203a6e6f     flex-direction: 
   104ec:	756c6f63 0a3b6e6d 67696c61 74692d6e     column;.align-it
   104fc:	3a736d65 6e656320 3b726574 2e0a7d0a     ems: center;.}..
   1050c:	69646e69 6f746163 616c2d72 206c6562     indicator-label 
   1051c:	616d0a7b 6e696772 706f742d 7035203a     {.margin-top: 5p
   1052c:	740a3b78 2d747865 67696c61 63203a6e     x;.text-align: c
   1053c:	65746e65 7d0a3b72 68632e0a 626b6365     enter;.}..checkb
   1054c:	632d786f 61746e6f 72656e69 640a7b20     ox-container {.d
   1055c:	6c707369 203a7961 78656c66 6c610a3b     isplay: flex;.al
   1056c:	2d6e6769 6d657469 63203a73 65746e65     ign-items: cente
   1057c:	6d0a3b72 69677261 656c2d6e 203a7466     r;.margin-left: 
   1058c:	78703031 0a7d0a3b 6568632e 6f626b63     10px;.}..checkbo
   1059c:	6f632d78 6961746e 2072656e 6562616c     x-container labe
   105ac:	0a7b206c 6772616d 6c2d6e69 3a746665     l {.margin-left:
   105bc:	78703520 0a7d0a3b 74732f3c 3e656c79      5px;.}.</style>
   105cc:	682f3c0a 3e646165 6f623c0a 0a3e7964     .</head>.<body>.
   105dc:	7669643c 616c6320 223d7373 746e6f63     <div class="cont
   105ec:	656e6961 0a3e2272 2031683c 73616c63     ainer">.<h1 clas
   105fc:	74223d73 656c7469 6f503e22 20726577     s="title">Power 
   1060c:	70707553 4320796c 72746e6f 2f3c6c6f     Supply Control</
   1061c:	0a3e3168 7669643c 616c6320 223d7373     h1>.<div class="
   1062c:	22776f72 6c3c0a3e 6c656261 6572503e     row">.<label>Pre
   1063c:	20746573 20706d41 4d44202f 2f3c3a4d     set Amp / DMM:</
   1064c:	6562616c 3c0a3e6c 75706e69 79742074     label>.<input ty
   1065c:	223d6570 74786574 64692022 6d61223d     pe="text" id="am
   1066c:	65732d70 72202274 6f646165 20796c6e     p-set" readonly 
   1067c:	73616c63 73223d73 65636170 6e692d64     class="spaced-in
   1068c:	22747570 693c0a3e 7475706e 70797420     put">.<input typ
   1069c:	74223d65 22747865 3d646920 706d6122     e="text" id="amp
   106ac:	6d6d642d 65722022 6e6f6461 6320796c     -dmm" readonly c
   106bc:	7373616c 7073223d 64656361 706e692d     lass="spaced-inp
   106cc:	3e227475 642f3c0a 0a3e7669 7669643c     ut">.</div>.<div
   106dc:	616c6320 223d7373 22776f72 6c3c0a3e      class="row">.<l
   106ec:	6c656261 6572503e 20746573 746c6f56     abel>Preset Volt
   106fc:	44202f20 3c3a4d4d 62616c2f 0a3e6c65      / DMM:</label>.
   1070c:	706e693c 74207475 3d657079 78657422     <input type="tex
   1071c:	69202274 76223d64 2d746c6f 22746573     t" id="volt-set"
   1072c:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   1073c:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   1074c:	706e693c 74207475 3d657079 78657422     <input type="tex
   1075c:	69202274 76223d64 2d746c6f 226d6d64     t" id="volt-dmm"
   1076c:	61657220 6c6e6f64 6c632079 3d737361      readonly class=
   1077c:	61707322 2d646563 75706e69 0a3e2274     "spaced-input">.
   1078c:	69642f3c 3c0a3e76 20766964 73616c63     </div>.<div clas
   1079c:	72223d73 3e22776f 616c3c0a 3e6c6562     s="row">.<label>
   107ac:	74746157 57202d20 20747461 3a4d4d44     Watt - Watt DMM:
   107bc:	616c2f3c 3e6c6562 6e693c0a 20747570     </label>.<input 
   107cc:	65707974 6574223d 20227478 223d6469     type="text" id="
   107dc:	74746177 7369642d 79616c70 65722022     watt-display" re
   107ec:	6e6f6461 0a3e796c 69642f3c 3c0a3e76     adonly>.</div>.<
   107fc:	20766964 73616c63 69223d73 7475706e     div class="input
   1080c:	776f722d 3c0a3e22 6562616c 6f66206c     -row">.<label fo
   1081c:	61223d72 692d706d 7475706e 65533e22     r="amp-input">Se
   1082c:	654e2074 6d412077 2f3c3a70 6562616c     t New Amp:</labe
   1083c:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   1084c:	74786574 64692022 6d61223d 6e692d70     text" id="amp-in
   1085c:	22747570 2f3c0a3e 3e766964 69643c0a     put">.</div>.<di
   1086c:	6c632076 3d737361 706e6922 722d7475     v class="input-r
   1087c:	3e22776f 616c3c0a 206c6562 3d726f66     ow">.<label for=
   1088c:	6c6f7622 6e692d74 22747570 7465533e     "volt-input">Set
   1089c:	77654e20 6c6f5620 2f3c3a74 6562616c      New Volt:</labe
   108ac:	3c0a3e6c 75706e69 79742074 223d6570     l>.<input type="
   108bc:	74786574 64692022 6f76223d 692d746c     text" id="volt-i
   108cc:	7475706e 3c0a3e22 7669642f 643c0a3e     nput">.</div>.<d
   108dc:	63207669 7373616c 7562223d 6e6f7474     iv class="button
   108ec:	776f722d 3c0a3e22 20766964 73616c63     -row">.<div clas
   108fc:	69223d73 6369646e 726f7461 6e6f632d     s="indicator-con
   1090c:	6e696174 3e227265 69643c0a 6c632076     tainer">.<div cl
   1091c:	3d737361 61747322 2d737574 69646e69     ass="status-indi
   1092c:	6f746163 69202272 73223d64 75746174     cator" id="statu
   1093c:	6e692d73 61636964 22726f74 642f3c3e     s-indicator"></d
   1094c:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   1095c:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   1096c:	74754f3e 69642f3c 3c0a3e76 7669642f     >Out</div>.</div
   1097c:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   1098c:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   1099c:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   109ac:	74617473 692d7375 6369646e 726f7461     status-indicator
   109bc:	64692022 7265223d 6e692d72 61636964     " id="err-indica
   109cc:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   109dc:	616c6320 223d7373 69646e69 6f746163      class="indicato
   109ec:	616c2d72 226c6562 7272453e 69642f3c     r-label">Err</di
   109fc:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   10a0c:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   10a1c:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   10a2c:	616c6320 223d7373 74617473 692d7375      class="status-i
   10a3c:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   10a4c:	6e692d30 61636964 22726f74 642f3c3e     0-indicator"></d
   10a5c:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   10a6c:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   10a7c:	304e493e 69642f3c 3c0a3e76 7669642f     >IN0</div>.</div
   10a8c:	643c0a3e 63207669 7373616c 6e69223d     >.<div class="in
   10a9c:	61636964 2d726f74 746e6f63 656e6961     dicator-containe
   10aac:	0a3e2272 7669643c 616c6320 223d7373     r">.<div class="
   10abc:	74617473 692d7375 6369646e 726f7461     status-indicator
   10acc:	64692022 6e69223d 6e692d31 61636964     " id="in1-indica
   10adc:	22726f74 642f3c3e 0a3e7669 7669643c     tor"></div>.<div
   10aec:	616c6320 223d7373 69646e69 6f746163      class="indicato
   10afc:	616c2d72 226c6562 314e493e 69642f3c     r-label">IN1</di
   10b0c:	3c0a3e76 7669642f 643c0a3e 63207669     v>.</div>.<div c
   10b1c:	7373616c 6e69223d 61636964 2d726f74     lass="indicator-
   10b2c:	746e6f63 656e6961 0a3e2272 7669643c     container">.<div
   10b3c:	616c6320 223d7373 74617473 692d7375      class="status-i
   10b4c:	6369646e 726f7461 64692022 6e69223d     ndicator" id="in
   10b5c:	6e692d32 61636964 22726f74 642f3c3e     2-indicator"></d
   10b6c:	0a3e7669 7669643c 616c6320 223d7373     iv>.<div class="
   10b7c:	69646e69 6f746163 616c2d72 226c6562     indicator-label"
   10b8c:	324e493e 69642f3c 3c0a3e76 7669642f     >IN2</div>.</div
   10b9c:	3c0a0a3e 20766964 73616c63 63223d73     >..<div class="c
   10bac:	6b636568 2d786f62 746e6f63 656e6961     heckbox-containe
   10bbc:	0a3e2272 706e693c 74207475 3d657079     r">.<input type=
   10bcc:	65686322 6f626b63 69202278 72223d64     "checkbox" id="r
   10bdc:	746f6d65 6f632d65 6f72746e 68632d6c     emote-control-ch
   10bec:	626b6365 3e22786f 616c3c0a 206c6562     eckbox">.<label 
   10bfc:	3d726f66 6d657222 2d65746f 746e6f63     for="remote-cont
   10c0c:	2d6c6f72 63656863 786f626b 65523e22     rol-checkbox">Re
   10c1c:	65746f6d 6e6f4320 6c6f7274 616c2f3c     mote Control</la
   10c2c:	3e6c6562 642f3c0a 0a3e7669 69642f3c     bel>.</div>.</di
   10c3c:	0a0a3e76 7669643c 616c6320 223d7373     v>..<div class="
   10c4c:	74747562 722d6e6f 3e22776f 75623c0a     button-row">.<bu
   10c5c:	6e6f7474 616c6320 223d7373 74747562     tton class="butt
   10c6c:	20226e6f 6c797473 6d223d65 69677261     on" style="margi
   10c7c:	656c2d6e 203a7466 6f747561 6f20223b     n-left: auto;" o
   10c8c:	696c636e 223d6b63 56746573 65756c61     nclick="setValue
   10c9c:	22292873 7465533e 6c615620 3c736575     s()">Set Values<
   10cac:	7475622f 3e6e6f74 642f3c0a 0a3e7669     /button>.</div>.
   10cbc:	7669643c 616c6320 223d7373 74747562     <div class="butt
   10ccc:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   10cdc:	616c6320 223d7373 74747562 20226e6f      class="button" 
   10cec:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   10cfc:	69766544 27286563 27757370 6e6f272c     Device('psu','on
   10d0c:	3e222927 6e727554 55535020 3c6e4f20     ')">Turn PSU On<
   10d1c:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   10d2c:	616c6320 223d7373 74747562 20226e6f      class="button" 
   10d3c:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   10d4c:	69766544 27286563 27757370 666f272c     Device('psu','of
   10d5c:	22292766 7275543e 5350206e 664f2055     f')">Turn PSU Of
   10d6c:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   10d7c:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   10d8c:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   10d9c:	7669643c 616c6320 223d7373 74747562     <div class="butt
   10dac:	722d6e6f 3e22776f 75623c0a 6e6f7474     on-row">.<button
   10dbc:	616c6320 223d7373 74747562 20226e6f      class="button" 
   10dcc:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   10ddc:	69766544 27286563 276e6166 6e6f272c     Device('fan','on
   10dec:	3e222927 6e727554 6e614620 3c6e4f20     ')">Turn Fan On<
   10dfc:	7475622f 3e6e6f74 75623c0a 6e6f7474     /button>.<button
   10e0c:	616c6320 223d7373 74747562 20226e6f      class="button" 
   10e1c:	6c636e6f 3d6b6369 6e6f6322 6c6f7274     onclick="control
   10e2c:	69766544 27286563 276e6166 666f272c     Device('fan','of
   10e3c:	22292766 7275543e 6146206e 664f206e     f')">Turn Fan Of
   10e4c:	622f3c66 6f747475 3c0a3e6e 7669642f     f</button>.</div
   10e5c:	643c0a3e 63207669 7373616c 6573223d     >.<div class="se
   10e6c:	61726170 22726f74 642f3c3e 0a3e7669     parator"></div>.
   10e7c:	7669643c 616c6320 223d7373 73657270     <div class="pres
   10e8c:	722d7465 3e22776f 75623c0a 6e6f7474     et-row">.<button
   10e9c:	616c6320 223d7373 73657270 622d7465      class="preset-b
   10eac:	6f747475 6f20226e 696c636e 223d6b63     utton" onclick="
   10ebc:	50746573 65736572 29312874 56353e22     setPreset(1)">5V
   10ecc:	3c413120 7475622f 3e6e6f74 75623c0a      1A</button>.<bu
   10edc:	6e6f7474 616c6320 223d7373 73657270     tton class="pres
   10eec:	622d7465 6f747475 6f20226e 696c636e     et-button" oncli
   10efc:	223d6b63 50746573 65736572 29322874     ck="setPreset(2)
   10f0c:	32313e22 41322056 75622f3c 6e6f7474     ">12V 2A</button
   10f1c:	623c0a3e 6f747475 6c63206e 3d737361     >.<button class=
   10f2c:	65727022 2d746573 74747562 20226e6f     "preset-button" 
   10f3c:	6c636e6f 3d6b6369 74657322 73657250     onclick="setPres
   10f4c:	33287465 323e2229 32205634 622f3c41     et(3)">24V 2A</b
   10f5c:	6f747475 3c0a3e6e 7669642f 2f3c0a3e     utton>.</div>.</
   10f6c:	3e766964 63733c0a 74706972 75660a3e     div>.<script>.fu
   10f7c:	6974636e 66206e6f 68637465 756c6156     nction fetchValu
   10f8c:	29287365 660a7b20 68637465 672f2728     es() {.fetch('/g
   10f9c:	765f7465 27736c61 742e0a29 286e6568     et_vals')..then(
   10fac:	70736572 65736e6f 203e3d20 70736572     response => resp
   10fbc:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   10fcc:	64286e65 20617461 7b203e3d 636f640a     en(data => {.doc
   10fdc:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   10fec:	64497942 6d612728 65732d70 2e292774     ById('amp-set').
   10ffc:	756c6176 203d2065 61746164 706d612e     value = data.amp
   1100c:	466f742e 64657869 3b293228 636f640a     .toFixed(2);.doc
   1101c:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   1102c:	64497942 6f762728 732d746c 29277465     ById('volt-set')
   1103c:	6c61762e 3d206575 74616420 6f762e61     .value = data.vo
   1104c:	742e746c 7869466f 32286465 640a3b29     lt.toFixed(2);.d
   1105c:	6d75636f 2e746e65 45746567 656d656c     ocument.getEleme
   1106c:	7942746e 27286449 74746177 7369642d     ntById('watt-dis
   1107c:	79616c70 762e2927 65756c61 64203d20     play').value = d
   1108c:	2e617461 74746177 466f742e 64657869     ata.watt.toFixed
   1109c:	3b293228 636f640a 6e656d75 65672e74     (2);.document.ge
   110ac:	656c4574 746e656d 64497942 6d612728     tElementById('am
   110bc:	6d642d70 2e29276d 756c6176 203d2065     p-dmm').value = 
   110cc:	61746164 706d612e 2e4d4d44 69466f74     data.ampDMM.toFi
   110dc:	28646578 0a3b2932 75636f64 746e656d     xed(2);.document
   110ec:	7465672e 6d656c45 42746e65 28644979     .getElementById(
   110fc:	6c6f7627 6d642d74 2e29276d 756c6176     'volt-dmm').valu
   1110c:	203d2065 61746164 6c6f762e 4d4d4474     e = data.voltDMM
   1111c:	466f742e 64657869 3b293228 2f2f0a0a     .toFixed(2);..//
   1112c:	64705520 20657461 20656874 74617473      Update the stat
   1113c:	69207375 6369646e 726f7461 6c6f6320     us indicator col
   1114c:	6220726f 64657361 206e6f20 5374756f     or based on outS
   1115c:	65746174 6e6f630a 73207473 75746174     tate.const statu
   1116c:	646e4973 74616369 3d20726f 636f6420     sIndicator = doc
   1117c:	6e656d75 65672e74 656c4574 746e656d     ument.getElement
   1118c:	64497942 74732728 73757461 646e692d     ById('status-ind
   1119c:	74616369 2927726f 66690a3b 61642820     icator');.if (da
   111ac:	6f2e6174 74537475 20657461 203d3d3d     ta.outState === 
   111bc:	7b202930 6174730a 49737574 6369646e     0) {.statusIndic
   111cc:	726f7461 7974732e 622e656c 676b6361     ator.style.backg
   111dc:	6e756f72 203d2064 63632327 203b2763     round = '#ccc'; 
   111ec:	67202f2f 0a796172 6c65207d 69206573     // gray.} else i
   111fc:	64282066 2e617461 5374756f 65746174     f (data.outState
   1120c:	3d3d3d20 20293120 74730a7b 73757461      === 1) {.status
   1121c:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   1122c:	6b636162 756f7267 3d20646e 32232720     background = '#2
   1123c:	34376138 203b2735 67202f2f 6e656572     8a745'; // green
   1124c:	65207d0a 2065736c 28206669 61746164     .} else if (data
   1125c:	74756f2e 74617453 3d3d2065 2932203d     .outState === 2)
   1126c:	730a7b20 75746174 646e4973 74616369      {.statusIndicat
   1127c:	732e726f 656c7974 6361622e 6f72676b     or.style.backgro
   1128c:	20646e75 2327203d 35336364 3b273534     und = '#dc3545';
   1129c:	202f2f20 0a646572 2f0a0a7d 7055202f      // red.}..// Up
   112ac:	65746164 65687420 72726520 6920726f     date the error i
   112bc:	6369646e 726f7461 6c6f6320 6220726f     ndicator color b
   112cc:	64657361 206e6f20 0a727265 736e6f63     ased on err.cons
   112dc:	72652074 646e4972 74616369 3d20726f     t errIndicator =
   112ec:	636f6420 6e656d75 65672e74 656c4574      document.getEle
   112fc:	746e656d 64497942 72652728 6e692d72     mentById('err-in
   1130c:	61636964 27726f74 650a3b29 6e497272     dicator');.errIn
   1131c:	61636964 2e726f74 6c797473 61622e65     dicator.style.ba
   1132c:	72676b63 646e756f 64203d20 2e617461     ckground = data.
   1133c:	20727265 203d3d3d 203f2031 63642327     err === 1 ? '#dc
   1134c:	35343533 203a2027 63632327 203b2763     3545' : '#ccc'; 
   1135c:	72202f2f 69206465 72652066 2c726f72     // red if error,
   1136c:	61726720 746f2079 77726568 0a657369      gray otherwise.
   1137c:	202f2f0a 61647055 74206574 49206568     .// Update the I
   1138c:	202c304e 2c314e49 324e4920 646e6920     N0, IN1, IN2 ind
   1139c:	74616369 2073726f 65736162 6e6f2064     icators based on
   113ac:	306e6920 6e69202c 69202c31 630a326e      in0, in1, in2.c
   113bc:	74736e6f 306e6920 69646e49 6f746163     onst in0Indicato
   113cc:	203d2072 75636f64 746e656d 7465672e     r = document.get
   113dc:	6d656c45 42746e65 28644979 306e6927     ElementById('in0
   113ec:	646e692d 74616369 2927726f 6f630a3b     -indicator');.co
   113fc:	2074736e 49316e69 6369646e 726f7461     nst in1Indicator
   1140c:	64203d20 6d75636f 2e746e65 45746567      = document.getE
   1141c:	656d656c 7942746e 27286449 2d316e69     lementById('in1-
   1142c:	69646e69 6f746163 3b292772 6e6f630a     indicator');.con
   1143c:	69207473 6e49326e 61636964 20726f74     st in2Indicator 
   1144c:	6f64203d 656d7563 672e746e 6c457465     = document.getEl
   1145c:	6e656d65 49794274 69272864 692d326e     ementById('in2-i
   1146c:	6369646e 726f7461 0a3b2927 306e690a     ndicator');..in0
   1147c:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   1148c:	6b636162 756f7267 3d20646e 74616420     background = dat
   1149c:	6e692e61 3d3d2030 2031203d 2327203f     a.in0 === 1 ? '#
   114ac:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   114bc:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   114cc:	65766974 7267202c 6f207961 72656874     tive, gray other
   114dc:	65736977 316e690a 69646e49 6f746163     wise.in1Indicato
   114ec:	74732e72 2e656c79 6b636162 756f7267     r.style.backgrou
   114fc:	3d20646e 74616420 6e692e61 3d3d2031     nd = data.in1 ==
   1150c:	2031203d 2327203f 37613832 20273534     = 1 ? '#28a745' 
   1151c:	2327203a 27636363 2f2f203b 65726720     : '#ccc'; // gre
   1152c:	69206e65 63612066 65766974 7267202c     en if active, gr
   1153c:	6f207961 72656874 65736977 326e690a     ay otherwise.in2
   1154c:	69646e49 6f746163 74732e72 2e656c79     Indicator.style.
   1155c:	6b636162 756f7267 3d20646e 74616420     background = dat
   1156c:	6e692e61 3d3d2032 2031203d 2327203f     a.in2 === 1 ? '#
   1157c:	37613832 20273534 2327203a 27636363     28a745' : '#ccc'
   1158c:	2f2f203b 65726720 69206e65 63612066     ; // green if ac
   1159c:	65766974 7267202c 6f207961 72656874     tive, gray other
   115ac:	65736977 2f2f0a0a 64705520 20657461     wise..// Update 
   115bc:	20656874 63656863 786f626b 61747320     the checkbox sta
   115cc:	62206574 64657361 206e6f20 6f6d6572     te based on remo
   115dc:	74436574 640a6c72 6d75636f 2e746e65     teCtrl.document.
   115ec:	45746567 656d656c 7942746e 27286449     getElementById('
   115fc:	6f6d6572 632d6574 72746e6f 632d6c6f     remote-control-c
   1160c:	6b636568 27786f62 68632e29 656b6365     heckbox').checke
   1161c:	203d2064 61746164 6d65722e 3d3d3d20     d = data.rem ===
   1162c:	0a3b3120 2e0a297d 63746163 72652868      1;.})..catch(er
   1163c:	20726f72 63203e3d 6f736e6f 652e656c     ror => console.e
   1164c:	726f7272 72452728 20726f72 63746566     rror('Error fetc
   1165c:	676e6968 6c617620 3a736575 65202c27     hing values:', e
   1166c:	726f7272 0a3b2929 660a0a7d 74636e75     rror));.}..funct
   1167c:	206e6f69 56746573 65756c61 20292873     ion setValues() 
   1168c:	6f630a7b 2074736e 20706d61 6170203d     {.const amp = pa
   1169c:	46657372 74616f6c 636f6428 6e656d75     rseFloat(documen
   116ac:	65672e74 656c4574 746e656d 64497942     t.getElementById
   116bc:	6d612728 6e692d70 27747570 61762e29     ('amp-input').va
   116cc:	2965756c 6f630a3b 2074736e 746c6f76     lue);.const volt
   116dc:	70203d20 65737261 616f6c46 6f642874      = parseFloat(do
   116ec:	656d7563 672e746e 6c457465 6e656d65     cument.getElemen
   116fc:	49794274 76272864 2d746c6f 75706e69     tById('volt-inpu
   1170c:	2e292774 756c6176 0a3b2965 63746566     t').value);.fetc
   1171c:	2f602868 5f746573 736c6176 706d613f     h(`/set_vals?amp
   1172c:	617b243d 267d706d 746c6f76 767b243d     =${amp}&volt=${v
   1173c:	7d746c6f 2e0a2960 6e656874 73657228     olt}`)..then(res
   1174c:	736e6f70 3e3d2065 73657220 736e6f70     ponse => respons
   1175c:	736a2e65 29286e6f 742e0a29 286e6568     e.json())..then(
   1176c:	61746164 203e3d20 66690a7b 61642820     data => {.if (da
   1177c:	732e6174 65636375 20297373 65660a7b     ta.success) {.fe
   1178c:	56686374 65756c61 3b292873 65207d0a     tchValues();.} e
   1179c:	2065736c 6c610a7b 28747265 72724527     lse {.alert('Err
   117ac:	7320726f 69747465 7620676e 65756c61     or setting value
   117bc:	3b292773 7d0a7d0a 632e0a29 68637461     s');.}.})..catch
   117cc:	72726528 3d20726f 6f63203e 6c6f736e     (error => consol
   117dc:	72652e65 28726f72 72724527 7320726f     e.error('Error s
   117ec:	69747465 7620676e 65756c61 2c273a73     etting values:',
   117fc:	72726520 2929726f 0a7d0a3b 6e75660a      error));.}..fun
   1180c:	6f697463 6f63206e 6f72746e 7665446c     ction controlDev
   1181c:	28656369 69766564 202c6563 69746361     ice(device, acti
   1182c:	20296e6f 65660a7b 28686374 6f632f60     on) {.fetch(`/co
   1183c:	6f72746e 65643f6c 65636976 647b243d     ntrol?device=${d
   1184c:	63697665 61267d65 6f697463 7b243d6e     evice}&action=${
   1185c:	69746361 607d6e6f 742e0a29 286e6568     action}`)..then(
   1186c:	70736572 65736e6f 203e3d20 70736572     response => resp
   1187c:	65736e6f 6f736a2e 2929286e 68742e0a     onse.json())..th
   1188c:	64286e65 20617461 7b203e3d 2066690a     en(data => {.if 
   1189c:	74616428 75732e61 73656363 7b202973     (data.success) {
   118ac:	656c610a 60287472 65647b24 65636976     .alert(`${device
   118bc:	556f742e 72657070 65736143 207d2928     .toUpperCase()} 
   118cc:	63617b24 6e6f6974 556f742e 72657070     ${action.toUpper
   118dc:	65736143 207d2928 63637553 66737365     Case()} Successf
   118ec:	29606c75 207d0a3b 65736c65 610a7b20     ul`);.} else {.a
   118fc:	7472656c 72456028 20726f72 63617b24     lert(`Error ${ac
   1190c:	6e6f6974 676e697d 647b2420 63697665     tion}ing ${devic
   1191c:	29607d65 0a7d0a3b 2e0a297d 63746163     e}`);.}.})..catc
   1192c:	72652868 20726f72 63203e3d 6f736e6f     h(error => conso
   1193c:	652e656c 726f7272 72456028 20726f72     le.error(`Error 
   1194c:	63617b24 6e6f6974 676e697d 647b2420     ${action}ing ${d
   1195c:	63697665 603a7d65 7265202c 29726f72     evice}:`, error)
   1196c:	7d0a3b29 75660a0a 6974636e 73206e6f     );.}..function s
   1197c:	72507465 74657365 65727028 29746573     etPreset(preset)
   1198c:	6c0a7b20 61207465 202c706d 746c6f76      {.let amp, volt
   1199c:	66690a3b 72702820 74657365 203d3d20     ;.if (preset == 
   119ac:	7b202931 706d610a 31203d20 3b35322e     1) {.amp = 1.25;
   119bc:	6c6f760a 203d2074 3b332e35 65207d0a     .volt = 5.3;.} e
   119cc:	2065736c 28206669 73657270 3d207465     lse if (preset =
   119dc:	2932203d 610a7b20 3d20706d 302e3220     = 2) {.amp = 2.0
   119ec:	6f760a3b 3d20746c 2e323120 7d0a3b30     ;.volt = 12.0;.}
   119fc:	736c6520 66692065 72702820 74657365      else if (preset
   11a0c:	203d3d20 7b202933 706d610a 32203d20      == 3) {.amp = 2
   11a1c:	0a3b302e 746c6f76 32203d20 3b302e34     .0;.volt = 24.0;
   11a2c:	640a7d0a 6d75636f 2e746e65 45746567     .}.document.getE
   11a3c:	656d656c 7942746e 27286449 2d706d61     lementById('amp-
   11a4c:	75706e69 2e292774 756c6176 203d2065     input').value = 
   11a5c:	3b706d61 636f640a 6e656d75 65672e74     amp;.document.ge
   11a6c:	656c4574 746e656d 64497942 6f762728     tElementById('vo
   11a7c:	692d746c 7475706e 762e2927 65756c61     lt-input').value
   11a8c:	76203d20 3b746c6f 7465730a 756c6156      = volt;.setValu
   11a9c:	29287365 0a7d0a3b 636f640a 6e656d75     es();.}..documen
   11aac:	65672e74 656c4574 746e656d 64497942     t.getElementById
   11abc:	65722728 65746f6d 6e6f632d 6c6f7274     ('remote-control
   11acc:	6568632d 6f626b63 2e292778 45646461     -checkbox').addE
   11adc:	746e6576 7473694c 72656e65 68632728     ventListener('ch
   11aec:	65676e61 66202c27 74636e75 286e6f69     ange', function(
   11afc:	0a7b2029 736e6f63 63612074 6e6f6974     ) {.const action
   11b0c:	74203d20 2e736968 63656863 2064656b      = this.checked 
   11b1c:	6f27203f 3a20276e 666f2720 0a3b2766     ? 'on' : 'off';.
   11b2c:	63746566 2f602868 746e6f63 3f6c6f72     fetch(`/control?
   11b3c:	69766564 723d6563 61266d65 6f697463     device=rem&actio
   11b4c:	7b243d6e 69746361 607d6e6f 742e0a29     n=${action}`)..t
   11b5c:	286e6568 70736572 65736e6f 203e3d20     hen(response => 
   11b6c:	70736572 65736e6f 6f736a2e 2929286e     response.json())
   11b7c:	68742e0a 64286e65 20617461 7b203e3d     ..then(data => {
   11b8c:	2066690a 74616428 75732e61 73656363     .if (data.succes
   11b9c:	7b202973 6e6f630a 656c6f73 676f6c2e     s) {.console.log
   11bac:	65526028 65746f6d 6e6f6320 6c6f7274     (`Remote control
   11bbc:	617b2420 6f697463 73207d6e 65636375      ${action} succe
   11bcc:	75667373 3b29606c 65207d0a 2065736c     ssful`);.} else 
   11bdc:	6c610a7b 28747265 72724560 2420726f     {.alert(`Error $
   11bec:	7463617b 7d6e6f69 20676e69 6f6d6572     {action}ing remo
   11bfc:	63206574 72746e6f 29606c6f 0a7d0a3b     te control`);.}.
   11c0c:	2e0a297d 63746163 72652868 20726f72     })..catch(error 
   11c1c:	63203e3d 6f736e6f 652e656c 726f7272     => console.error
   11c2c:	72456028 20726f72 63617b24 6e6f6974     (`Error ${action
   11c3c:	676e697d 6d657220 2065746f 746e6f63     }ing remote cont
   11c4c:	3a6c6f72 65202c60 726f7272 0a3b2929     rol:`, error));.
   11c5c:	0a3b297d 7465730a 65746e49 6c617672     });..setInterval
   11c6c:	74656628 61566863 7365756c 3031202c     (fetchValues, 10
   11c7c:	3b293030 732f3c0a 70697263 3c0a3e74     00);.</script>.<
   11c8c:	646f622f 3c0a3e79 6d74682f 000a3e6c     /body>.</html>..
   11c9c:	00005d7c 00005ccc 00005ccc 00005cca     |]...\...\...\..
   11cac:	00005d6e 00005d6e 00005d64 00005cca     n]..n]..d]...\..
   11cbc:	00005d6e 00005d64 00005d6e 00005cca     n]..d]..n]...\..
   11ccc:	00005d74 00005d74 00005d74 00005e04     t]..t]..t]...^..
   11cdc:	000066a8 0000668a 00006644 00006562     .f...f..Df..be..
   11cec:	00006644 0000667c 00006644 00006562     Df..|f..Df..be..
   11cfc:	0000668a 0000668a 0000667c 00006562     .f...f..|f..be..
   11d0c:	0000655a 0000655a 0000655a 000068c0     Ze..Ze..Ze...h..
   11d1c:	00006d08 00006bc8 00006bc8 00006bc4     .m...k...k...k..
   11d2c:	00006ce0 00006ce0 00006cd2 00006bc4     .l...l...l...k..
   11d3c:	00006ce0 00006cd2 00006ce0 00006bc4     .l...l...l...k..
   11d4c:	00006ce8 00006ce8 00006ce8 00006eec     .l...l...l...n..

00011d5c <_global_impure_ptr>:
   11d5c:	20000088 00008c70 00008ce4 00008ce4     ... p...........
   11d6c:	00008c54 00008ce4 00008ce4 00008ce4     T...............
   11d7c:	00008ce4 00008ce4 00008ce4 00008c5c     ............\...
   11d8c:	0000873e 00008ce4 000086f8 00008748     >...........H...
   11d9c:	00008ce4 00008794 0000897e 0000897e     ........~...~...
   11dac:	0000897e 0000897e 0000897e 0000897e     ~...~...~...~...
   11dbc:	0000897e 0000897e 0000897e 00008ce4     ~...~...~.......
   11dcc:	00008ce4 00008ce4 00008ce4 00008ce4     ................
   11ddc:	00008ce4 00008ce4 00008ce4 00008ce4     ................
   11dec:	00008ce4 0000879c 000088e4 00008ce4     ................
   11dfc:	000088e4 00008ce4 00008ce4 00008ce4     ................
   11e0c:	00008ce4 000089ae 00008ce4 00008ce4     ................
   11e1c:	000089b6 00008ce4 00008ce4 00008ce4     ................
   11e2c:	00008ce4 00008ce4 00008a58 00008ce4     ........X.......
   11e3c:	00008ce4 00008a8a 00008ce4 00008ce4     ................
   11e4c:	00008ce4 00008ce4 00008ce4 00008ce4     ................
   11e5c:	00008ce4 00008ce4 00008ce4 00008ce4     ................
   11e6c:	00008b84 00008bb8 000088e4 000088e4     ................
   11e7c:	000088e4 00008bca 00008bb8 00008ce4     ................
   11e8c:	00008ce4 00008bd2 00008ce4 00008aec     ................
   11e9c:	00008cb2 00008c28 00008b22 00008ce4     ....(...".......
   11eac:	00008b2a 00008ce4 00008c80 00008ce4     *...............
   11ebc:	00008ce4 00008be2 00464e49 00666e69     ........INF.inf.
   11ecc:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   11edc:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   11eec:	37363534 62613938 66656463 00000000     456789abcdef....
   11efc:	6c756e28 0000296c 00000030              (null)..0...

00011f08 <blanks.7223>:
   11f08:	20202020 20202020 20202020 20202020                     

00011f18 <zeroes.7224>:
   11f18:	30303030 30303030 30303030 30303030     0000000000000000
   11f28:	00009d5c 00009e9c 00009e9c 00009e9c     \...............
   11f38:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11f48:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11f58:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11f68:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11f78:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11f88:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11f98:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11fa8:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11fb8:	00009e9c 00009cf8 00009e9c 00009e9c     ................
   11fc8:	00009e9c 00009e9c 00009fa6 00009e9c     ................
   11fd8:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   11fe8:	00009f8a 00009f8a 00009f8a 00009f8a     ................
   11ff8:	00009f8a 00009f8a 00009f8a 00009f8a     ................
   12008:	00009f8a 00009f8a 00009e9c 00009e9c     ................
   12018:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   12028:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   12038:	00009f7c 00009f5a 00009e9c 00009f5a     |...Z.......Z...
   12048:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   12058:	00009f54 00009e9c 00009e9c 00009f48     T...........H...
   12068:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   12078:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   12088:	00009f42 00009e9c 00009e9c 00009f26     B...........&...
   12098:	00009e9c 00009e9c 00009e9c 00009e9c     ................
   120a8:	00009e9c 00009e9c 00009e9c 00009f16     ................
   120b8:	00009f10 00009f5a 00009f5a 00009f5a     ....Z...Z...Z...
   120c8:	00009f00 00009d64 00009e9c 00009e9c     ....d...........
   120d8:	00009e78 00009e9c 00009ec6 00009eb6     x...............
   120e8:	00009e5e 00009e9c 00009e9c 00009e56     ^...........V...
   120f8:	00009e9c 00009db4 00009e9c 00009e9c     ................
   12108:	00009f42 0000a026 0000a1fc 0000a026     B...&.......&...
   12118:	0000a1fc 0000a1fc 00009fea 00009fae     ................
   12128:	00009fae 00009fae 00009fae 00009fae     ................
   12138:	00009fae 00009fae 00009fae 00009fae     ................
   12148:	0000a1fc 0000a1fc 0000a1fc 0000a1fc     ................
   12158:	0000a1fc 0000a1fc 0000a1fc 0000a1e0     ................
   12168:	0000a1fc 0000a1fc 0000a1fc 0000a196     ................
   12178:	0000a188 0000a1fc 0000a1fc 0000a070     ............p...
   12188:	0000a1fc 0000a1fc 0000a1fc 0000a1fc     ................
   12198:	0000a040 0000a1fc 0000a1fc 0000a1fc     @...............
   121a8:	0000a1fc 0000a1fc 0000a034 0000a1fc     ........4.......
   121b8:	0000a1fc 0000a1fc 0000a1fc 0000a1ee     ................
   121c8:	0000a1fc 0000a1fc 0000a1fc 0000a1fc     ................
   121d8:	0000a1fc 0000a1fc 0000a1fc 0000a1e0     ................
   121e8:	0000a1fc 0000a1fc 0000a1fc 0000a196     ................
   121f8:	0000a188 0000a1fc 0000a1fc 0000a070     ............p...
   12208:	0000a1fc 0000a1fc 0000a1fc 0000a1fc     ................
   12218:	0000a040 0000a1fc 0000a1fc 0000a1fc     @...............
   12228:	0000a1fc 0000a1fc 0000a034 0000a1fc     ........4.......
   12238:	0000a1fc 0000a1fc 0000a1fc 0000a1ee     ................
   12248:	0000a426 0000a37e 0000a426 0000a37e     &...~...&...~...
   12258:	0000a37e 0000a3ca 0000a3ba 0000a3ba     ~...............
   12268:	0000a3ba 0000a3ba 0000a3ba 0000a3ba     ................
   12278:	0000a3ba 0000a416 0000a416 0000a37e     ............~...
   12288:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   12298:	0000a37e 0000a37e 0000a3ae 0000a3ae     ~...~...........
   122a8:	0000a3ae 0000a3ae 0000a3ae 0000a3ae     ................
   122b8:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   122c8:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   122d8:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   122e8:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   122f8:	0000a37e 0000a34a 0000a37e 0000a37e     ~...J...~...~...
   12308:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   12318:	0000a37e 0000a37e 0000a3ae 0000a3ae     ~...~...........
   12328:	0000a3ae 0000a3ae 0000a3ae 0000a3ae     ................
   12338:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   12348:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   12358:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   12368:	0000a37e 0000a37e 0000a37e 0000a37e     ~...~...~...~...
   12378:	0000a37e 0000a34a 646c2565 00000000     ~...J...e%ld....

00012388 <basefix.7294>:
   12388:	0001000a 00030002 00050004 00070006     ................
   12398:	00090008 000b000a 000d000c 000f000e     ................
   123a8:	00000010 69666e49 7974696e 00000000     ....Infinity....
   123b8:	004e614e 00000043 49534f50 00000058     NaN.C...POSIX...
   123c8:	0000002e 00000000                       ........

000123d0 <__mprec_bigtens>:
   123d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   123e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   123f0:	7f73bf3c 75154fdd                       <.s..O.u

000123f8 <__mprec_tens>:
   123f8:	00000000 3ff00000 00000000 40240000     .......?......$@
   12408:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   12418:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   12428:	00000000 412e8480 00000000 416312d0     .......A......cA
   12438:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   12448:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   12458:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   12468:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   12478:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   12488:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   12498:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   124a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   124b8:	79d99db4 44ea7843                       ...yCx.D

000124c0 <p05.6055>:
   124c0:	00000005 00000019 0000007d 0000cf8c     ........}.......
   124d0:	0000d026 0000d026 0000d026 0000d026     &...&...&...&...
   124e0:	0000d026 0000d026 0000d026 0000d026     &...&...&...&...
   124f0:	0000d01a 0000d01a 0000d01a 0000d01a     ................
   12500:	0000d01a 0000d026 0000d026 0000d026     ....&...&...&...
   12510:	0000d026 0000d026 0000d026 0000d026     &...&...&...&...
   12520:	0000d026 0000d026 0000d026 0000d026     &...&...&...&...
   12530:	0000d026 0000d026 0000d026 0000d026     &...&...&...&...
   12540:	0000d026 0000d026 0000d026 0000d01a     &...&...&.......
   12550:	0000d026 0000d026 0000d026 0000d026     &...&...&...&...
   12560:	0000d026 0000d026 0000d026 0000d026     &...&...&...&...
   12570:	0000d026 0000d026 0000cfc0 0000d026     &...&.......&...
   12580:	0000d062 0000d9b8 0000d9da 0000d9d0     b...............
   12590:	0000d9ca 0000d9ae 0000d9da 0000666e     ............nf..
   125a0:	74696e69 00000079 00006e61              inity...an..

000125ac <fpi.6141>:
   125ac:	00000035 fffffbce 000003cb 00000001     5...............
   125bc:	00000000                                ....

000125c0 <fpinan.6177>:
   125c0:	00000034 fffffbce 000003cb 00000001     4...............
	...

000125d8 <tinytens>:
   125d8:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   125e8:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   125f8:	64ac6f43 11680628                       Co.d(.h.

00012600 <_ctype_>:
   12600:	20202000 20202020 28282020 20282828     .         ((((( 
   12610:	20202020 20202020 20202020 20202020                     
   12620:	10108820 10101010 10101010 10101010      ...............
   12630:	04040410 04040404 10040404 10101010     ................
   12640:	41411010 41414141 01010101 01010101     ..AAAAAA........
   12650:	01010101 01010101 01010101 10101010     ................
   12660:	42421010 42424242 02020202 02020202     ..BBBBBB........
   12670:	02020202 02020202 02020202 10101010     ................
   12680:	00000020 00000000 00000000 00000000      ...............
	...

00012704 <__hexdig>:
	...
   12734:	13121110 17161514 00001918 00000000     ................
   12744:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...
   12764:	1c1b1a00 001f1e1d 00000000 00000000     ................
	...

00012804 <_init>:
   12804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12806:	46c0      	nop			; (mov r8, r8)
   12808:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1280a:	bc08      	pop	{r3}
   1280c:	469e      	mov	lr, r3
   1280e:	4770      	bx	lr

00012810 <__init_array_start>:
   12810:	0000a9ed 	.word	0x0000a9ed

00012814 <__frame_dummy_init_array_entry>:
   12814:	000000cd                                ....

00012818 <_fini>:
   12818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1281a:	46c0      	nop			; (mov r8, r8)
   1281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1281e:	bc08      	pop	{r3}
   12820:	469e      	mov	lr, r3
   12822:	4770      	bx	lr

00012824 <__fini_array_start>:
   12824:	000000a5 	.word	0x000000a5
