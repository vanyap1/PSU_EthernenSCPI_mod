
PSU_ETH_Controller_s21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003880  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000ec  20000000  00003880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000250  200000ec  0000396c  000200ec  2**2
                  ALLOC
  3 .stack        00002004  2000033c  00003bbc  000200ec  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
  6 .debug_info   000306e6  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004231  00000000  00000000  00050853  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00014958  00000000  00000000  00054a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000010a0  00000000  00000000  000693dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001098  00000000  00000000  0006a47c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000089ac  00000000  00000000  0006b514  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011ca1  00000000  00000000  00073ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00063d59  00000000  00000000  00085b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002f74  00000000  00000000  000e98bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 23 00 20 09 01 00 00 05 01 00 00 05 01 00 00     @#. ............
	...
      2c:	05 01 00 00 00 00 00 00 00 00 00 00 05 01 00 00     ................
      3c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      4c:	05 01 00 00 c5 0a 00 00 05 01 00 00 05 01 00 00     ................
      5c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      6c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      7c:	05 01 00 00 05 01 00 00 05 01 00 00 05 01 00 00     ................
      8c:	35 18 00 00 49 18 00 00 05 01 00 00 05 01 00 00     5...I...........
      9c:	05 01 00 00 05 01 00 00                             ........

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	200000ec 	.word	0x200000ec
      c4:	00000000 	.word	0x00000000
      c8:	00003880 	.word	0x00003880

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	200000f0 	.word	0x200000f0
      f8:	00003880 	.word	0x00003880
      fc:	00003880 	.word	0x00003880
     100:	00000000 	.word	0x00000000

00000104 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     104:	e7fe      	b.n	104 <Dummy_Handler>
	...

00000108 <Reset_Handler>:
{
     108:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     10a:	4a12      	ldr	r2, [pc, #72]	; (154 <Reset_Handler+0x4c>)
     10c:	4b12      	ldr	r3, [pc, #72]	; (158 <Reset_Handler+0x50>)
     10e:	429a      	cmp	r2, r3
     110:	d009      	beq.n	126 <Reset_Handler+0x1e>
     112:	4b11      	ldr	r3, [pc, #68]	; (158 <Reset_Handler+0x50>)
     114:	4a0f      	ldr	r2, [pc, #60]	; (154 <Reset_Handler+0x4c>)
     116:	e003      	b.n	120 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     118:	6811      	ldr	r1, [r2, #0]
     11a:	6019      	str	r1, [r3, #0]
     11c:	3304      	adds	r3, #4
     11e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     120:	490e      	ldr	r1, [pc, #56]	; (15c <Reset_Handler+0x54>)
     122:	428b      	cmp	r3, r1
     124:	d3f8      	bcc.n	118 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     126:	4b0e      	ldr	r3, [pc, #56]	; (160 <Reset_Handler+0x58>)
     128:	e002      	b.n	130 <Reset_Handler+0x28>
                *pDest++ = 0;
     12a:	2200      	movs	r2, #0
     12c:	601a      	str	r2, [r3, #0]
     12e:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a0c      	ldr	r2, [pc, #48]	; (164 <Reset_Handler+0x5c>)
     132:	4293      	cmp	r3, r2
     134:	d3f9      	bcc.n	12a <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	4a0c      	ldr	r2, [pc, #48]	; (168 <Reset_Handler+0x60>)
     138:	21ff      	movs	r1, #255	; 0xff
     13a:	4b0c      	ldr	r3, [pc, #48]	; (16c <Reset_Handler+0x64>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
     140:	4a0b      	ldr	r2, [pc, #44]	; (170 <Reset_Handler+0x68>)
     142:	6851      	ldr	r1, [r2, #4]
     144:	2380      	movs	r3, #128	; 0x80
     146:	430b      	orrs	r3, r1
     148:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     14a:	4b0a      	ldr	r3, [pc, #40]	; (174 <Reset_Handler+0x6c>)
     14c:	4798      	blx	r3
        main();
     14e:	4b0a      	ldr	r3, [pc, #40]	; (178 <Reset_Handler+0x70>)
     150:	4798      	blx	r3
     152:	e7fe      	b.n	152 <Reset_Handler+0x4a>
     154:	00003880 	.word	0x00003880
     158:	20000000 	.word	0x20000000
     15c:	200000ec 	.word	0x200000ec
     160:	200000ec 	.word	0x200000ec
     164:	2000033c 	.word	0x2000033c
     168:	e000ed00 	.word	0xe000ed00
     16c:	00000000 	.word	0x00000000
     170:	41004000 	.word	0x41004000
     174:	00002d3d 	.word	0x00002d3d
     178:	00002a11 	.word	0x00002a11

0000017c <ADC_0_PORT_init>:
	USART_0_init();

	PWM_0_init();

	PWM_1_init();
}
     17c:	b5f0      	push	{r4, r5, r6, r7, lr}
     17e:	26c0      	movs	r6, #192	; 0xc0
     180:	05f6      	lsls	r6, r6, #23
     182:	2304      	movs	r3, #4
     184:	6073      	str	r3, [r6, #4]
     186:	4b14      	ldr	r3, [pc, #80]	; (1d8 <ADC_0_PORT_init+0x5c>)
     188:	4a14      	ldr	r2, [pc, #80]	; (1dc <ADC_0_PORT_init+0x60>)
     18a:	629a      	str	r2, [r3, #40]	; 0x28
     18c:	22c0      	movs	r2, #192	; 0xc0
     18e:	0612      	lsls	r2, r2, #24
     190:	629a      	str	r2, [r3, #40]	; 0x28
     192:	2042      	movs	r0, #66	; 0x42
     194:	5c19      	ldrb	r1, [r3, r0]
     196:	2501      	movs	r5, #1
     198:	43a9      	bics	r1, r5
     19a:	2401      	movs	r4, #1
     19c:	4321      	orrs	r1, r4
     19e:	b2c9      	uxtb	r1, r1
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
	tmp &= ~PORT_PINCFG_PMUXEN;
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1a0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1a2:	3811      	subs	r0, #17
     1a4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1a6:	270f      	movs	r7, #15
     1a8:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
     1aa:	4321      	orrs	r1, r4
     1ac:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1ae:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     1b0:	2108      	movs	r1, #8
     1b2:	6071      	str	r1, [r6, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     1b4:	490a      	ldr	r1, [pc, #40]	; (1e0 <ADC_0_PORT_init+0x64>)
     1b6:	6299      	str	r1, [r3, #40]	; 0x28
     1b8:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1ba:	2143      	movs	r1, #67	; 0x43
     1bc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1be:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1c0:	4322      	orrs	r2, r4
     1c2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1c4:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1c6:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     1c8:	3934      	subs	r1, #52	; 0x34
     1ca:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     1cc:	2110      	movs	r1, #16
     1ce:	430a      	orrs	r2, r1
     1d0:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1d2:	541a      	strb	r2, [r3, r0]
}
     1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	41004400 	.word	0x41004400
     1dc:	40000004 	.word	0x40000004
     1e0:	40000008 	.word	0x40000008

000001e4 <ADC_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     1e4:	4a04      	ldr	r2, [pc, #16]	; (1f8 <ADC_0_CLOCK_init+0x14>)
     1e6:	6a11      	ldr	r1, [r2, #32]
     1e8:	2380      	movs	r3, #128	; 0x80
     1ea:	025b      	lsls	r3, r3, #9
     1ec:	430b      	orrs	r3, r1
     1ee:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     1f0:	4a02      	ldr	r2, [pc, #8]	; (1fc <ADC_0_CLOCK_init+0x18>)
     1f2:	4b03      	ldr	r3, [pc, #12]	; (200 <ADC_0_CLOCK_init+0x1c>)
     1f4:	805a      	strh	r2, [r3, #2]
}
     1f6:	4770      	bx	lr
     1f8:	40000400 	.word	0x40000400
     1fc:	00004017 	.word	0x00004017
     200:	40000c00 	.word	0x40000c00

00000204 <ADC_0_init>:
{
     204:	b510      	push	{r4, lr}
	ADC_0_CLOCK_init();
     206:	4b05      	ldr	r3, [pc, #20]	; (21c <ADC_0_init+0x18>)
     208:	4798      	blx	r3
	ADC_0_PORT_init();
     20a:	4b05      	ldr	r3, [pc, #20]	; (220 <ADC_0_init+0x1c>)
     20c:	4798      	blx	r3
	adc_sync_init(&ADC_0, ADC, (void *)NULL);
     20e:	2200      	movs	r2, #0
     210:	4904      	ldr	r1, [pc, #16]	; (224 <ADC_0_init+0x20>)
     212:	4805      	ldr	r0, [pc, #20]	; (228 <ADC_0_init+0x24>)
     214:	4b05      	ldr	r3, [pc, #20]	; (22c <ADC_0_init+0x28>)
     216:	4798      	blx	r3
}
     218:	bd10      	pop	{r4, pc}
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	000001e5 	.word	0x000001e5
     220:	0000017d 	.word	0x0000017d
     224:	42004000 	.word	0x42004000
     228:	20000168 	.word	0x20000168
     22c:	00000231 	.word	0x00000231

00000230 <adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t adc_sync_init(struct adc_sync_descriptor *const descr, void *const hw, void *const func)
{
     230:	b570      	push	{r4, r5, r6, lr}
     232:	0004      	movs	r4, r0
     234:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     236:	2800      	cmp	r0, #0
     238:	d00d      	beq.n	256 <adc_sync_init+0x26>
     23a:	2900      	cmp	r1, #0
     23c:	d009      	beq.n	252 <adc_sync_init+0x22>
     23e:	2001      	movs	r0, #1
     240:	2239      	movs	r2, #57	; 0x39
     242:	4906      	ldr	r1, [pc, #24]	; (25c <adc_sync_init+0x2c>)
     244:	4b06      	ldr	r3, [pc, #24]	; (260 <adc_sync_init+0x30>)
     246:	4798      	blx	r3

	return _adc_sync_init(&descr->device, hw);
     248:	0029      	movs	r1, r5
     24a:	0020      	movs	r0, r4
     24c:	4b05      	ldr	r3, [pc, #20]	; (264 <adc_sync_init+0x34>)
     24e:	4798      	blx	r3
}
     250:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     252:	2000      	movs	r0, #0
     254:	e7f4      	b.n	240 <adc_sync_init+0x10>
     256:	2000      	movs	r0, #0
     258:	e7f2      	b.n	240 <adc_sync_init+0x10>
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	000035d4 	.word	0x000035d4
     260:	0000086d 	.word	0x0000086d
     264:	000009e5 	.word	0x000009e5

00000268 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     268:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     26c:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     26e:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     270:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     274:	4770      	bx	lr

00000276 <atomic_leave_critical>:
     276:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     27a:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     27c:	f383 8810 	msr	PRIMASK, r3
}
     280:	4770      	bx	lr
	...

00000284 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     284:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     286:	4b04      	ldr	r3, [pc, #16]	; (298 <delay_ms+0x14>)
     288:	681c      	ldr	r4, [r3, #0]
     28a:	4b04      	ldr	r3, [pc, #16]	; (29c <delay_ms+0x18>)
     28c:	4798      	blx	r3
     28e:	0001      	movs	r1, r0
     290:	0020      	movs	r0, r4
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <delay_ms+0x1c>)
     294:	4798      	blx	r3
}
     296:	bd10      	pop	{r4, pc}
     298:	20000108 	.word	0x20000108
     29c:	00000a1d 	.word	0x00000a1d
     2a0:	00000a39 	.word	0x00000a39

000002a4 <ext_irq_register>:

/**
 * \brief Register callback for the given external interrupt
 */
int32_t ext_irq_register(const uint32_t pin, ext_irq_cb_t cb)
{
     2a4:	b5f0      	push	{r4, r5, r6, r7, lr}
     2a6:	46c6      	mov	lr, r8
     2a8:	b500      	push	{lr}
     2aa:	b084      	sub	sp, #16
     2ac:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
     2ae:	2300      	movs	r3, #0
	bool    found = false;

	for (; i < EXT_IRQ_AMOUNT; i++) {
     2b0:	2b00      	cmp	r3, #0
     2b2:	d010      	beq.n	2d6 <ext_irq_register+0x32>
	bool    found = false;
     2b4:	2300      	movs	r3, #0
     2b6:	4698      	mov	r8, r3
			found          = true;
			break;
		}
	}

	if (NULL == cb) {
     2b8:	2900      	cmp	r1, #0
     2ba:	d01b      	beq.n	2f4 <ext_irq_register+0x50>
			return ERR_INVALID_ARG;
		}
		return _ext_irq_enable(pin, false);
	}

	if (!found) {
     2bc:	4643      	mov	r3, r8
     2be:	2b00      	cmp	r3, #0
     2c0:	d146      	bne.n	350 <ext_irq_register+0xac>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     2c2:	2b00      	cmp	r3, #0
     2c4:	d124      	bne.n	310 <ext_irq_register+0x6c>
			if (NULL == ext_irqs[i].cb) {
     2c6:	00da      	lsls	r2, r3, #3
     2c8:	4c2a      	ldr	r4, [pc, #168]	; (374 <ext_irq_register+0xd0>)
     2ca:	5912      	ldr	r2, [r2, r4]
     2cc:	2a00      	cmp	r2, #0
     2ce:	d018      	beq.n	302 <ext_irq_register+0x5e>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     2d0:	3301      	adds	r3, #1
     2d2:	b2db      	uxtb	r3, r3
     2d4:	e7f5      	b.n	2c2 <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
     2d6:	00dc      	lsls	r4, r3, #3
     2d8:	4a26      	ldr	r2, [pc, #152]	; (374 <ext_irq_register+0xd0>)
     2da:	1912      	adds	r2, r2, r4
     2dc:	6852      	ldr	r2, [r2, #4]
     2de:	9801      	ldr	r0, [sp, #4]
     2e0:	4282      	cmp	r2, r0
     2e2:	d002      	beq.n	2ea <ext_irq_register+0x46>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     2e4:	3301      	adds	r3, #1
     2e6:	b2db      	uxtb	r3, r3
     2e8:	e7e2      	b.n	2b0 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
     2ea:	4b22      	ldr	r3, [pc, #136]	; (374 <ext_irq_register+0xd0>)
     2ec:	50e1      	str	r1, [r4, r3]
			found          = true;
     2ee:	2301      	movs	r3, #1
     2f0:	4698      	mov	r8, r3
			break;
     2f2:	e7e1      	b.n	2b8 <ext_irq_register+0x14>
		if (!found) {
     2f4:	4643      	mov	r3, r8
     2f6:	2b00      	cmp	r3, #0
     2f8:	d035      	beq.n	366 <ext_irq_register+0xc2>
		return _ext_irq_enable(pin, false);
     2fa:	9801      	ldr	r0, [sp, #4]
     2fc:	4b1e      	ldr	r3, [pc, #120]	; (378 <ext_irq_register+0xd4>)
     2fe:	4798      	blx	r3
     300:	e02d      	b.n	35e <ext_irq_register+0xba>
				ext_irqs[i].cb  = cb;
     302:	00dd      	lsls	r5, r3, #3
     304:	5129      	str	r1, [r5, r4]
				ext_irqs[i].pin = pin;
     306:	1965      	adds	r5, r4, r5
     308:	9a01      	ldr	r2, [sp, #4]
     30a:	606a      	str	r2, [r5, #4]
				found           = true;
     30c:	2201      	movs	r2, #1
     30e:	4690      	mov	r8, r2
     310:	2200      	movs	r2, #0
     312:	e001      	b.n	318 <ext_irq_register+0x74>
				break;
			}
		}
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     314:	3201      	adds	r2, #1
     316:	b2d2      	uxtb	r2, r2
     318:	0019      	movs	r1, r3
     31a:	4311      	orrs	r1, r2
     31c:	d118      	bne.n	350 <ext_irq_register+0xac>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     31e:	4915      	ldr	r1, [pc, #84]	; (374 <ext_irq_register+0xd0>)
     320:	00dc      	lsls	r4, r3, #3
     322:	190c      	adds	r4, r1, r4
     324:	6867      	ldr	r7, [r4, #4]
     326:	00d4      	lsls	r4, r2, #3
     328:	1909      	adds	r1, r1, r4
     32a:	6849      	ldr	r1, [r1, #4]
     32c:	428f      	cmp	r7, r1
     32e:	d2f1      	bcs.n	314 <ext_irq_register+0x70>
     330:	1c4c      	adds	r4, r1, #1
     332:	d0ef      	beq.n	314 <ext_irq_register+0x70>
				struct ext_irq tmp = ext_irqs[j];
     334:	a902      	add	r1, sp, #8
     336:	468c      	mov	ip, r1
     338:	4f0e      	ldr	r7, [pc, #56]	; (374 <ext_irq_register+0xd0>)
     33a:	00d1      	lsls	r1, r2, #3
     33c:	1879      	adds	r1, r7, r1
     33e:	4664      	mov	r4, ip
     340:	c941      	ldmia	r1!, {r0, r6}
     342:	c441      	stmia	r4!, {r0, r6}

				ext_irqs[j] = ext_irqs[i];
				ext_irqs[i] = tmp;
     344:	00dd      	lsls	r5, r3, #3
     346:	197d      	adds	r5, r7, r5
     348:	4661      	mov	r1, ip
     34a:	c911      	ldmia	r1!, {r0, r4}
     34c:	c511      	stmia	r5!, {r0, r4}
     34e:	e7e1      	b.n	314 <ext_irq_register+0x70>
			}
		}
	}

	if (!found) {
     350:	4643      	mov	r3, r8
     352:	2b00      	cmp	r3, #0
     354:	d00a      	beq.n	36c <ext_irq_register+0xc8>
		return ERR_INVALID_ARG;
	}

	return _ext_irq_enable(pin, true);
     356:	2101      	movs	r1, #1
     358:	9801      	ldr	r0, [sp, #4]
     35a:	4b07      	ldr	r3, [pc, #28]	; (378 <ext_irq_register+0xd4>)
     35c:	4798      	blx	r3
}
     35e:	b004      	add	sp, #16
     360:	bc04      	pop	{r2}
     362:	4690      	mov	r8, r2
     364:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     366:	200d      	movs	r0, #13
     368:	4240      	negs	r0, r0
     36a:	e7f8      	b.n	35e <ext_irq_register+0xba>
		return ERR_INVALID_ARG;
     36c:	200d      	movs	r0, #13
     36e:	4240      	negs	r0, r0
     370:	e7f5      	b.n	35e <ext_irq_register+0xba>
     372:	46c0      	nop			; (mov r8, r8)
     374:	2000010c 	.word	0x2000010c
     378:	00000a79 	.word	0x00000a79

0000037c <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     37c:	b510      	push	{r4, lr}
     37e:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     380:	3814      	subs	r0, #20
     382:	8b84      	ldrh	r4, [r0, #28]
     384:	ab01      	add	r3, sp, #4
     386:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     388:	0014      	movs	r4, r2
     38a:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     38c:	4a06      	ldr	r2, [pc, #24]	; (3a8 <i2c_m_sync_write+0x2c>)
     38e:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     390:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     392:	0019      	movs	r1, r3
     394:	4b05      	ldr	r3, [pc, #20]	; (3ac <i2c_m_sync_write+0x30>)
     396:	4798      	blx	r3

	if (ret) {
     398:	2800      	cmp	r0, #0
     39a:	d102      	bne.n	3a2 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     39c:	0020      	movs	r0, r4
     39e:	b004      	add	sp, #16
     3a0:	bd10      	pop	{r4, pc}
		return ret;
     3a2:	0004      	movs	r4, r0
     3a4:	e7fa      	b.n	39c <i2c_m_sync_write+0x20>
     3a6:	46c0      	nop			; (mov r8, r8)
     3a8:	ffff8000 	.word	0xffff8000
     3ac:	00001051 	.word	0x00001051

000003b0 <i2c_m_sync_read>:
{
     3b0:	b510      	push	{r4, lr}
     3b2:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     3b4:	3814      	subs	r0, #20
     3b6:	8b84      	ldrh	r4, [r0, #28]
     3b8:	ab01      	add	r3, sp, #4
     3ba:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     3bc:	0014      	movs	r4, r2
     3be:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     3c0:	4a06      	ldr	r2, [pc, #24]	; (3dc <i2c_m_sync_read+0x2c>)
     3c2:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     3c4:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3c6:	0019      	movs	r1, r3
     3c8:	4b05      	ldr	r3, [pc, #20]	; (3e0 <i2c_m_sync_read+0x30>)
     3ca:	4798      	blx	r3
	if (ret) {
     3cc:	2800      	cmp	r0, #0
     3ce:	d102      	bne.n	3d6 <i2c_m_sync_read+0x26>
}
     3d0:	0020      	movs	r0, r4
     3d2:	b004      	add	sp, #16
     3d4:	bd10      	pop	{r4, pc}
		return ret;
     3d6:	0004      	movs	r4, r0
     3d8:	e7fa      	b.n	3d0 <i2c_m_sync_read+0x20>
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	ffff8001 	.word	0xffff8001
     3e0:	00001051 	.word	0x00001051

000003e4 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     3e4:	b570      	push	{r4, r5, r6, lr}
     3e6:	0004      	movs	r4, r0
     3e8:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     3ea:	1e43      	subs	r3, r0, #1
     3ec:	4198      	sbcs	r0, r3
     3ee:	b2c0      	uxtb	r0, r0
     3f0:	225e      	movs	r2, #94	; 0x5e
     3f2:	4907      	ldr	r1, [pc, #28]	; (410 <i2c_m_sync_init+0x2c>)
     3f4:	4b07      	ldr	r3, [pc, #28]	; (414 <i2c_m_sync_init+0x30>)
     3f6:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     3f8:	0029      	movs	r1, r5
     3fa:	0020      	movs	r0, r4
     3fc:	4b06      	ldr	r3, [pc, #24]	; (418 <i2c_m_sync_init+0x34>)
     3fe:	4798      	blx	r3
	if (init_status) {
     400:	2800      	cmp	r0, #0
     402:	d103      	bne.n	40c <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     404:	4b05      	ldr	r3, [pc, #20]	; (41c <i2c_m_sync_init+0x38>)
     406:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     408:	4b05      	ldr	r3, [pc, #20]	; (420 <i2c_m_sync_init+0x3c>)
     40a:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     40c:	bd70      	pop	{r4, r5, r6, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	000035f0 	.word	0x000035f0
     414:	0000086d 	.word	0x0000086d
     418:	00000f2d 	.word	0x00000f2d
     41c:	000003b1 	.word	0x000003b1
     420:	0000037d 	.word	0x0000037d

00000424 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     424:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     426:	4b01      	ldr	r3, [pc, #4]	; (42c <i2c_m_sync_enable+0x8>)
     428:	4798      	blx	r3
}
     42a:	bd10      	pop	{r4, pc}
     42c:	00000fd9 	.word	0x00000fd9

00000430 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     430:	3014      	adds	r0, #20
     432:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     434:	2000      	movs	r0, #0
     436:	4770      	bx	lr

00000438 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     438:	b570      	push	{r4, r5, r6, lr}
     43a:	0004      	movs	r4, r0
     43c:	000d      	movs	r5, r1
     43e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     440:	2800      	cmp	r0, #0
     442:	d00e      	beq.n	462 <io_write+0x2a>
     444:	2900      	cmp	r1, #0
     446:	d00a      	beq.n	45e <io_write+0x26>
     448:	2001      	movs	r0, #1
     44a:	2234      	movs	r2, #52	; 0x34
     44c:	4906      	ldr	r1, [pc, #24]	; (468 <io_write+0x30>)
     44e:	4b07      	ldr	r3, [pc, #28]	; (46c <io_write+0x34>)
     450:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     452:	6823      	ldr	r3, [r4, #0]
     454:	0032      	movs	r2, r6
     456:	0029      	movs	r1, r5
     458:	0020      	movs	r0, r4
     45a:	4798      	blx	r3
}
     45c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     45e:	2000      	movs	r0, #0
     460:	e7f3      	b.n	44a <io_write+0x12>
     462:	2000      	movs	r0, #0
     464:	e7f1      	b.n	44a <io_write+0x12>
     466:	46c0      	nop			; (mov r8, r8)
     468:	0000360c 	.word	0x0000360c
     46c:	0000086d 	.word	0x0000086d

00000470 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     470:	b570      	push	{r4, r5, r6, lr}
     472:	0004      	movs	r4, r0
     474:	000d      	movs	r5, r1
     476:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     478:	2800      	cmp	r0, #0
     47a:	d00e      	beq.n	49a <io_read+0x2a>
     47c:	2900      	cmp	r1, #0
     47e:	d00a      	beq.n	496 <io_read+0x26>
     480:	2001      	movs	r0, #1
     482:	223d      	movs	r2, #61	; 0x3d
     484:	4906      	ldr	r1, [pc, #24]	; (4a0 <io_read+0x30>)
     486:	4b07      	ldr	r3, [pc, #28]	; (4a4 <io_read+0x34>)
     488:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     48a:	6863      	ldr	r3, [r4, #4]
     48c:	0032      	movs	r2, r6
     48e:	0029      	movs	r1, r5
     490:	0020      	movs	r0, r4
     492:	4798      	blx	r3
}
     494:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     496:	2000      	movs	r0, #0
     498:	e7f3      	b.n	482 <io_read+0x12>
     49a:	2000      	movs	r0, #0
     49c:	e7f1      	b.n	482 <io_read+0x12>
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	0000360c 	.word	0x0000360c
     4a4:	0000086d 	.word	0x0000086d

000004a8 <pwm_period_expired>:

/**
 * \internal Process interrupts caused by period experied
 */
static void pwm_period_expired(struct _pwm_device *device)
{
     4a8:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.period) {
     4aa:	6943      	ldr	r3, [r0, #20]
     4ac:	2b00      	cmp	r3, #0
     4ae:	d000      	beq.n	4b2 <pwm_period_expired+0xa>
		descr->pwm_cb.period(descr);
     4b0:	4798      	blx	r3
	}
}
     4b2:	bd10      	pop	{r4, pc}

000004b4 <pwm_detect_fault>:

/**
 * \internal Process interrupts caused by pwm fault
 */
static void pwm_detect_fault(struct _pwm_device *device)
{
     4b4:	b510      	push	{r4, lr}
	struct pwm_descriptor *const descr = CONTAINER_OF(device, struct pwm_descriptor, device);

	if (descr->pwm_cb.error) {
     4b6:	6983      	ldr	r3, [r0, #24]
     4b8:	2b00      	cmp	r3, #0
     4ba:	d000      	beq.n	4be <pwm_detect_fault+0xa>
		descr->pwm_cb.error(descr);
     4bc:	4798      	blx	r3
	}
}
     4be:	bd10      	pop	{r4, pc}

000004c0 <pwm_init>:
{
     4c0:	b570      	push	{r4, r5, r6, lr}
     4c2:	0004      	movs	r4, r0
     4c4:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     4c6:	2800      	cmp	r0, #0
     4c8:	d012      	beq.n	4f0 <pwm_init+0x30>
     4ca:	2900      	cmp	r1, #0
     4cc:	d00e      	beq.n	4ec <pwm_init+0x2c>
     4ce:	2001      	movs	r0, #1
     4d0:	2233      	movs	r2, #51	; 0x33
     4d2:	4908      	ldr	r1, [pc, #32]	; (4f4 <pwm_init+0x34>)
     4d4:	4b08      	ldr	r3, [pc, #32]	; (4f8 <pwm_init+0x38>)
     4d6:	4798      	blx	r3
	_pwm_init(&descr->device, hw);
     4d8:	0029      	movs	r1, r5
     4da:	0020      	movs	r0, r4
     4dc:	4b07      	ldr	r3, [pc, #28]	; (4fc <pwm_init+0x3c>)
     4de:	4798      	blx	r3
	descr->device.callback.pwm_period_cb = pwm_period_expired;
     4e0:	4b07      	ldr	r3, [pc, #28]	; (500 <pwm_init+0x40>)
     4e2:	6023      	str	r3, [r4, #0]
	descr->device.callback.pwm_error_cb  = pwm_detect_fault;
     4e4:	4b07      	ldr	r3, [pc, #28]	; (504 <pwm_init+0x44>)
     4e6:	6063      	str	r3, [r4, #4]
}
     4e8:	2000      	movs	r0, #0
     4ea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     4ec:	2000      	movs	r0, #0
     4ee:	e7ef      	b.n	4d0 <pwm_init+0x10>
     4f0:	2000      	movs	r0, #0
     4f2:	e7ed      	b.n	4d0 <pwm_init+0x10>
     4f4:	00003620 	.word	0x00003620
     4f8:	0000086d 	.word	0x0000086d
     4fc:	000016c9 	.word	0x000016c9
     500:	000004a9 	.word	0x000004a9
     504:	000004b5 	.word	0x000004b5

00000508 <pwm_enable>:
{
     508:	b510      	push	{r4, lr}
     50a:	0004      	movs	r4, r0
	ASSERT(descr);
     50c:	1e43      	subs	r3, r0, #1
     50e:	4198      	sbcs	r0, r3
     510:	b2c0      	uxtb	r0, r0
     512:	224a      	movs	r2, #74	; 0x4a
     514:	4907      	ldr	r1, [pc, #28]	; (534 <pwm_enable+0x2c>)
     516:	4b08      	ldr	r3, [pc, #32]	; (538 <pwm_enable+0x30>)
     518:	4798      	blx	r3
	if (_pwm_is_enabled(&descr->device)) {
     51a:	0020      	movs	r0, r4
     51c:	4b07      	ldr	r3, [pc, #28]	; (53c <pwm_enable+0x34>)
     51e:	4798      	blx	r3
     520:	2800      	cmp	r0, #0
     522:	d104      	bne.n	52e <pwm_enable+0x26>
	_pwm_enable(&descr->device);
     524:	0020      	movs	r0, r4
     526:	4b06      	ldr	r3, [pc, #24]	; (540 <pwm_enable+0x38>)
     528:	4798      	blx	r3
	return ERR_NONE;
     52a:	2000      	movs	r0, #0
}
     52c:	bd10      	pop	{r4, pc}
		return ERR_DENIED;
     52e:	2011      	movs	r0, #17
     530:	4240      	negs	r0, r0
     532:	e7fb      	b.n	52c <pwm_enable+0x24>
     534:	00003620 	.word	0x00003620
     538:	0000086d 	.word	0x0000086d
     53c:	00001825 	.word	0x00001825
     540:	000017bd 	.word	0x000017bd

00000544 <pwm_set_parameters>:
{
     544:	b570      	push	{r4, r5, r6, lr}
     546:	0004      	movs	r4, r0
     548:	000d      	movs	r5, r1
     54a:	0016      	movs	r6, r2
	ASSERT(descr);
     54c:	1e43      	subs	r3, r0, #1
     54e:	4198      	sbcs	r0, r3
     550:	b2c0      	uxtb	r0, r0
     552:	227c      	movs	r2, #124	; 0x7c
     554:	4904      	ldr	r1, [pc, #16]	; (568 <pwm_set_parameters+0x24>)
     556:	4b05      	ldr	r3, [pc, #20]	; (56c <pwm_set_parameters+0x28>)
     558:	4798      	blx	r3
	_pwm_set_param(&descr->device, period, duty_cycle);
     55a:	0032      	movs	r2, r6
     55c:	0029      	movs	r1, r5
     55e:	0020      	movs	r0, r4
     560:	4b03      	ldr	r3, [pc, #12]	; (570 <pwm_set_parameters+0x2c>)
     562:	4798      	blx	r3
}
     564:	2000      	movs	r0, #0
     566:	bd70      	pop	{r4, r5, r6, pc}
     568:	00003620 	.word	0x00003620
     56c:	0000086d 	.word	0x0000086d
     570:	000017cd 	.word	0x000017cd

00000574 <spi_m_sync_init>:
	ASSERT(spi);
	spi->func = (struct _spi_m_sync_hpl_interface *)func;
}

int32_t spi_m_sync_init(struct spi_m_sync_descriptor *spi, void *const hw)
{
     574:	b570      	push	{r4, r5, r6, lr}
     576:	0004      	movs	r4, r0
     578:	000d      	movs	r5, r1
	int32_t rc = 0;
	ASSERT(spi && hw);
     57a:	2800      	cmp	r0, #0
     57c:	d017      	beq.n	5ae <spi_m_sync_init+0x3a>
     57e:	2900      	cmp	r1, #0
     580:	d013      	beq.n	5aa <spi_m_sync_init+0x36>
     582:	2001      	movs	r0, #1
     584:	2240      	movs	r2, #64	; 0x40
     586:	490b      	ldr	r1, [pc, #44]	; (5b4 <spi_m_sync_init+0x40>)
     588:	4b0b      	ldr	r3, [pc, #44]	; (5b8 <spi_m_sync_init+0x44>)
     58a:	4798      	blx	r3
	spi->dev.prvt = (void *)hw;
     58c:	6065      	str	r5, [r4, #4]
	rc            = _spi_m_sync_init(&spi->dev, hw);
     58e:	1d20      	adds	r0, r4, #4
     590:	0029      	movs	r1, r5
     592:	4b0a      	ldr	r3, [pc, #40]	; (5bc <spi_m_sync_init+0x48>)
     594:	4798      	blx	r3

	if (rc < 0) {
     596:	2800      	cmp	r0, #0
     598:	db06      	blt.n	5a8 <spi_m_sync_init+0x34>
		return rc;
	}

	spi->flags    = SPI_DEACTIVATE_NEXT;
     59a:	4b09      	ldr	r3, [pc, #36]	; (5c0 <spi_m_sync_init+0x4c>)
     59c:	82a3      	strh	r3, [r4, #20]
	spi->io.read  = _spi_m_sync_io_read;
     59e:	4b09      	ldr	r3, [pc, #36]	; (5c4 <spi_m_sync_init+0x50>)
     5a0:	6123      	str	r3, [r4, #16]
	spi->io.write = _spi_m_sync_io_write;
     5a2:	4b09      	ldr	r3, [pc, #36]	; (5c8 <spi_m_sync_init+0x54>)
     5a4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
     5a6:	2000      	movs	r0, #0
}
     5a8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && hw);
     5aa:	2000      	movs	r0, #0
     5ac:	e7ea      	b.n	584 <spi_m_sync_init+0x10>
     5ae:	2000      	movs	r0, #0
     5b0:	e7e8      	b.n	584 <spi_m_sync_init+0x10>
     5b2:	46c0      	nop			; (mov r8, r8)
     5b4:	00003638 	.word	0x00003638
     5b8:	0000086d 	.word	0x0000086d
     5bc:	0000126d 	.word	0x0000126d
     5c0:	ffff8000 	.word	0xffff8000
     5c4:	00000679 	.word	0x00000679
     5c8:	0000063d 	.word	0x0000063d

000005cc <spi_m_sync_enable>:
	ASSERT(spi);
	_spi_m_sync_deinit(&spi->dev);
}

void spi_m_sync_enable(struct spi_m_sync_descriptor *spi)
{
     5cc:	b510      	push	{r4, lr}
     5ce:	0004      	movs	r4, r0
	ASSERT(spi);
     5d0:	1e43      	subs	r3, r0, #1
     5d2:	4198      	sbcs	r0, r3
     5d4:	b2c0      	uxtb	r0, r0
     5d6:	2257      	movs	r2, #87	; 0x57
     5d8:	4903      	ldr	r1, [pc, #12]	; (5e8 <spi_m_sync_enable+0x1c>)
     5da:	4b04      	ldr	r3, [pc, #16]	; (5ec <spi_m_sync_enable+0x20>)
     5dc:	4798      	blx	r3
	_spi_m_sync_enable(&spi->dev);
     5de:	1d20      	adds	r0, r4, #4
     5e0:	4b03      	ldr	r3, [pc, #12]	; (5f0 <spi_m_sync_enable+0x24>)
     5e2:	4798      	blx	r3
}
     5e4:	bd10      	pop	{r4, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00003638 	.word	0x00003638
     5ec:	0000086d 	.word	0x0000086d
     5f0:	0000142d 	.word	0x0000142d

000005f4 <spi_m_sync_transfer>:

	return spi_m_sync_transfer(spi, &xfer);
}

int32_t spi_m_sync_transfer(struct spi_m_sync_descriptor *spi, const struct spi_xfer *p_xfer)
{
     5f4:	b530      	push	{r4, r5, lr}
     5f6:	b087      	sub	sp, #28
     5f8:	0004      	movs	r4, r0
     5fa:	000d      	movs	r5, r1
	struct spi_msg msg;

	ASSERT(spi && p_xfer);
     5fc:	2800      	cmp	r0, #0
     5fe:	d015      	beq.n	62c <spi_m_sync_transfer+0x38>
     600:	2900      	cmp	r1, #0
     602:	d011      	beq.n	628 <spi_m_sync_transfer+0x34>
     604:	2001      	movs	r0, #1
     606:	22b3      	movs	r2, #179	; 0xb3
     608:	4909      	ldr	r1, [pc, #36]	; (630 <spi_m_sync_transfer+0x3c>)
     60a:	4b0a      	ldr	r3, [pc, #40]	; (634 <spi_m_sync_transfer+0x40>)
     60c:	4798      	blx	r3

	msg.txbuf = p_xfer->txbuf;
     60e:	682b      	ldr	r3, [r5, #0]
     610:	9303      	str	r3, [sp, #12]
	msg.rxbuf = p_xfer->rxbuf;
     612:	686b      	ldr	r3, [r5, #4]
     614:	9304      	str	r3, [sp, #16]
	msg.size  = p_xfer->size;
     616:	68ab      	ldr	r3, [r5, #8]
     618:	9301      	str	r3, [sp, #4]
     61a:	9305      	str	r3, [sp, #20]
	return _spi_m_sync_trans(&spi->dev, &msg);
     61c:	1d20      	adds	r0, r4, #4
     61e:	a903      	add	r1, sp, #12
     620:	4b05      	ldr	r3, [pc, #20]	; (638 <spi_m_sync_transfer+0x44>)
     622:	4798      	blx	r3
}
     624:	b007      	add	sp, #28
     626:	bd30      	pop	{r4, r5, pc}
	ASSERT(spi && p_xfer);
     628:	2000      	movs	r0, #0
     62a:	e7ec      	b.n	606 <spi_m_sync_transfer+0x12>
     62c:	2000      	movs	r0, #0
     62e:	e7ea      	b.n	606 <spi_m_sync_transfer+0x12>
     630:	00003638 	.word	0x00003638
     634:	0000086d 	.word	0x0000086d
     638:	00001465 	.word	0x00001465

0000063c <_spi_m_sync_io_write>:
{
     63c:	b570      	push	{r4, r5, r6, lr}
     63e:	b084      	sub	sp, #16
     640:	0004      	movs	r4, r0
     642:	000e      	movs	r6, r1
     644:	0015      	movs	r5, r2
	ASSERT(io);
     646:	1e43      	subs	r3, r0, #1
     648:	4198      	sbcs	r0, r3
     64a:	b2c0      	uxtb	r0, r0
     64c:	22a3      	movs	r2, #163	; 0xa3
     64e:	4907      	ldr	r1, [pc, #28]	; (66c <_spi_m_sync_io_write+0x30>)
     650:	4b07      	ldr	r3, [pc, #28]	; (670 <_spi_m_sync_io_write+0x34>)
     652:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     654:	0020      	movs	r0, r4
     656:	380c      	subs	r0, #12
	xfer.rxbuf = 0;
     658:	2300      	movs	r3, #0
     65a:	9302      	str	r3, [sp, #8]
	xfer.txbuf = (uint8_t *)buf;
     65c:	9601      	str	r6, [sp, #4]
	xfer.size  = length;
     65e:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     660:	a901      	add	r1, sp, #4
     662:	4b04      	ldr	r3, [pc, #16]	; (674 <_spi_m_sync_io_write+0x38>)
     664:	4798      	blx	r3
}
     666:	b004      	add	sp, #16
     668:	bd70      	pop	{r4, r5, r6, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	00003638 	.word	0x00003638
     670:	0000086d 	.word	0x0000086d
     674:	000005f5 	.word	0x000005f5

00000678 <_spi_m_sync_io_read>:
{
     678:	b570      	push	{r4, r5, r6, lr}
     67a:	b084      	sub	sp, #16
     67c:	0004      	movs	r4, r0
     67e:	000e      	movs	r6, r1
     680:	0015      	movs	r5, r2
	ASSERT(io);
     682:	1e43      	subs	r3, r0, #1
     684:	4198      	sbcs	r0, r3
     686:	b2c0      	uxtb	r0, r0
     688:	2287      	movs	r2, #135	; 0x87
     68a:	4907      	ldr	r1, [pc, #28]	; (6a8 <_spi_m_sync_io_read+0x30>)
     68c:	4b07      	ldr	r3, [pc, #28]	; (6ac <_spi_m_sync_io_read+0x34>)
     68e:	4798      	blx	r3
	struct spi_m_sync_descriptor *spi = CONTAINER_OF(io, struct spi_m_sync_descriptor, io);
     690:	0020      	movs	r0, r4
     692:	380c      	subs	r0, #12
	xfer.rxbuf = buf;
     694:	9602      	str	r6, [sp, #8]
	xfer.txbuf = 0;
     696:	2300      	movs	r3, #0
     698:	9301      	str	r3, [sp, #4]
	xfer.size  = length;
     69a:	9503      	str	r5, [sp, #12]
	return spi_m_sync_transfer(spi, &xfer);
     69c:	a901      	add	r1, sp, #4
     69e:	4b04      	ldr	r3, [pc, #16]	; (6b0 <_spi_m_sync_io_read+0x38>)
     6a0:	4798      	blx	r3
}
     6a2:	b004      	add	sp, #16
     6a4:	bd70      	pop	{r4, r5, r6, pc}
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	00003638 	.word	0x00003638
     6ac:	0000086d 	.word	0x0000086d
     6b0:	000005f5 	.word	0x000005f5

000006b4 <spi_m_sync_get_io_descriptor>:

int32_t spi_m_sync_get_io_descriptor(struct spi_m_sync_descriptor *const spi, struct io_descriptor **io)
{
     6b4:	b570      	push	{r4, r5, r6, lr}
     6b6:	0004      	movs	r4, r0
     6b8:	000d      	movs	r5, r1
	ASSERT(spi && io);
     6ba:	2800      	cmp	r0, #0
     6bc:	d00c      	beq.n	6d8 <spi_m_sync_get_io_descriptor+0x24>
     6be:	2900      	cmp	r1, #0
     6c0:	d008      	beq.n	6d4 <spi_m_sync_get_io_descriptor+0x20>
     6c2:	2001      	movs	r0, #1
     6c4:	22bd      	movs	r2, #189	; 0xbd
     6c6:	4905      	ldr	r1, [pc, #20]	; (6dc <spi_m_sync_get_io_descriptor+0x28>)
     6c8:	4b05      	ldr	r3, [pc, #20]	; (6e0 <spi_m_sync_get_io_descriptor+0x2c>)
     6ca:	4798      	blx	r3
	*io = &spi->io;
     6cc:	340c      	adds	r4, #12
     6ce:	602c      	str	r4, [r5, #0]
	return 0;
}
     6d0:	2000      	movs	r0, #0
     6d2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(spi && io);
     6d4:	2000      	movs	r0, #0
     6d6:	e7f5      	b.n	6c4 <spi_m_sync_get_io_descriptor+0x10>
     6d8:	2000      	movs	r0, #0
     6da:	e7f3      	b.n	6c4 <spi_m_sync_get_io_descriptor+0x10>
     6dc:	00003638 	.word	0x00003638
     6e0:	0000086d 	.word	0x0000086d

000006e4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6e6:	0005      	movs	r5, r0
     6e8:	000e      	movs	r6, r1
     6ea:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     6ec:	2800      	cmp	r0, #0
     6ee:	d023      	beq.n	738 <usart_sync_write+0x54>
     6f0:	2900      	cmp	r1, #0
     6f2:	d023      	beq.n	73c <usart_sync_write+0x58>
     6f4:	2a00      	cmp	r2, #0
     6f6:	d123      	bne.n	740 <usart_sync_write+0x5c>
     6f8:	2000      	movs	r0, #0
     6fa:	22f1      	movs	r2, #241	; 0xf1
     6fc:	4911      	ldr	r1, [pc, #68]	; (744 <usart_sync_write+0x60>)
     6fe:	4b12      	ldr	r3, [pc, #72]	; (748 <usart_sync_write+0x64>)
     700:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     702:	002c      	movs	r4, r5
     704:	3408      	adds	r4, #8
     706:	0020      	movs	r0, r4
     708:	4b10      	ldr	r3, [pc, #64]	; (74c <usart_sync_write+0x68>)
     70a:	4798      	blx	r3
     70c:	2800      	cmp	r0, #0
     70e:	d0f8      	beq.n	702 <usart_sync_write+0x1e>
     710:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     712:	5d71      	ldrb	r1, [r6, r5]
     714:	0020      	movs	r0, r4
     716:	4b0e      	ldr	r3, [pc, #56]	; (750 <usart_sync_write+0x6c>)
     718:	4798      	blx	r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     71a:	0020      	movs	r0, r4
     71c:	4b0b      	ldr	r3, [pc, #44]	; (74c <usart_sync_write+0x68>)
     71e:	4798      	blx	r3
     720:	2800      	cmp	r0, #0
     722:	d0fa      	beq.n	71a <usart_sync_write+0x36>
			;
	} while (++offset < length);
     724:	3501      	adds	r5, #1
     726:	42bd      	cmp	r5, r7
     728:	d3f3      	bcc.n	712 <usart_sync_write+0x2e>
	while (!_usart_sync_is_transmit_done(&descr->device))
     72a:	0020      	movs	r0, r4
     72c:	4b09      	ldr	r3, [pc, #36]	; (754 <usart_sync_write+0x70>)
     72e:	4798      	blx	r3
     730:	2800      	cmp	r0, #0
     732:	d0fa      	beq.n	72a <usart_sync_write+0x46>
		;
	return (int32_t)offset;
}
     734:	0028      	movs	r0, r5
     736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     738:	2000      	movs	r0, #0
     73a:	e7de      	b.n	6fa <usart_sync_write+0x16>
     73c:	2000      	movs	r0, #0
     73e:	e7dc      	b.n	6fa <usart_sync_write+0x16>
     740:	2001      	movs	r0, #1
     742:	e7da      	b.n	6fa <usart_sync_write+0x16>
     744:	00003654 	.word	0x00003654
     748:	0000086d 	.word	0x0000086d
     74c:	00000f0b 	.word	0x00000f0b
     750:	00000efb 	.word	0x00000efb
     754:	00000f15 	.word	0x00000f15

00000758 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     75a:	46ce      	mov	lr, r9
     75c:	4647      	mov	r7, r8
     75e:	b580      	push	{r7, lr}
     760:	1e05      	subs	r5, r0, #0
     762:	4688      	mov	r8, r1
     764:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     766:	d01f      	beq.n	7a8 <usart_sync_read+0x50>
     768:	2900      	cmp	r1, #0
     76a:	d01f      	beq.n	7ac <usart_sync_read+0x54>
     76c:	2a00      	cmp	r2, #0
     76e:	d11f      	bne.n	7b0 <usart_sync_read+0x58>
     770:	2000      	movs	r0, #0
     772:	2286      	movs	r2, #134	; 0x86
     774:	0052      	lsls	r2, r2, #1
     776:	490f      	ldr	r1, [pc, #60]	; (7b4 <usart_sync_read+0x5c>)
     778:	4b0f      	ldr	r3, [pc, #60]	; (7b8 <usart_sync_read+0x60>)
     77a:	4798      	blx	r3
	uint32_t                      offset = 0;
     77c:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     77e:	002c      	movs	r4, r5
     780:	3408      	adds	r4, #8
     782:	0020      	movs	r0, r4
     784:	4b0d      	ldr	r3, [pc, #52]	; (7bc <usart_sync_read+0x64>)
     786:	4798      	blx	r3
     788:	2800      	cmp	r0, #0
     78a:	d0f8      	beq.n	77e <usart_sync_read+0x26>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     78c:	4643      	mov	r3, r8
     78e:	199f      	adds	r7, r3, r6
     790:	0020      	movs	r0, r4
     792:	4b0b      	ldr	r3, [pc, #44]	; (7c0 <usart_sync_read+0x68>)
     794:	4798      	blx	r3
     796:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     798:	3601      	adds	r6, #1
     79a:	454e      	cmp	r6, r9
     79c:	d3ef      	bcc.n	77e <usart_sync_read+0x26>

	return (int32_t)offset;
}
     79e:	0030      	movs	r0, r6
     7a0:	bc0c      	pop	{r2, r3}
     7a2:	4690      	mov	r8, r2
     7a4:	4699      	mov	r9, r3
     7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7a8:	2000      	movs	r0, #0
     7aa:	e7e2      	b.n	772 <usart_sync_read+0x1a>
     7ac:	2000      	movs	r0, #0
     7ae:	e7e0      	b.n	772 <usart_sync_read+0x1a>
     7b0:	2001      	movs	r0, #1
     7b2:	e7de      	b.n	772 <usart_sync_read+0x1a>
     7b4:	00003654 	.word	0x00003654
     7b8:	0000086d 	.word	0x0000086d
     7bc:	00000f21 	.word	0x00000f21
     7c0:	00000f03 	.word	0x00000f03

000007c4 <usart_sync_init>:
{
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	0004      	movs	r4, r0
     7c8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     7ca:	2800      	cmp	r0, #0
     7cc:	d014      	beq.n	7f8 <usart_sync_init+0x34>
     7ce:	2900      	cmp	r1, #0
     7d0:	d010      	beq.n	7f4 <usart_sync_init+0x30>
     7d2:	2001      	movs	r0, #1
     7d4:	2234      	movs	r2, #52	; 0x34
     7d6:	4909      	ldr	r1, [pc, #36]	; (7fc <usart_sync_init+0x38>)
     7d8:	4b09      	ldr	r3, [pc, #36]	; (800 <usart_sync_init+0x3c>)
     7da:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     7dc:	0020      	movs	r0, r4
     7de:	3008      	adds	r0, #8
     7e0:	0029      	movs	r1, r5
     7e2:	4b08      	ldr	r3, [pc, #32]	; (804 <usart_sync_init+0x40>)
     7e4:	4798      	blx	r3
	if (init_status) {
     7e6:	2800      	cmp	r0, #0
     7e8:	d103      	bne.n	7f2 <usart_sync_init+0x2e>
	descr->io.read  = usart_sync_read;
     7ea:	4b07      	ldr	r3, [pc, #28]	; (808 <usart_sync_init+0x44>)
     7ec:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     7ee:	4b07      	ldr	r3, [pc, #28]	; (80c <usart_sync_init+0x48>)
     7f0:	6023      	str	r3, [r4, #0]
}
     7f2:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     7f4:	2000      	movs	r0, #0
     7f6:	e7ed      	b.n	7d4 <usart_sync_init+0x10>
     7f8:	2000      	movs	r0, #0
     7fa:	e7eb      	b.n	7d4 <usart_sync_init+0x10>
     7fc:	00003654 	.word	0x00003654
     800:	0000086d 	.word	0x0000086d
     804:	00000ebd 	.word	0x00000ebd
     808:	00000759 	.word	0x00000759
     80c:	000006e5 	.word	0x000006e5

00000810 <usart_sync_enable>:
{
     810:	b510      	push	{r4, lr}
     812:	0004      	movs	r4, r0
	ASSERT(descr);
     814:	1e43      	subs	r3, r0, #1
     816:	4198      	sbcs	r0, r3
     818:	b2c0      	uxtb	r0, r0
     81a:	2253      	movs	r2, #83	; 0x53
     81c:	4904      	ldr	r1, [pc, #16]	; (830 <usart_sync_enable+0x20>)
     81e:	4b05      	ldr	r3, [pc, #20]	; (834 <usart_sync_enable+0x24>)
     820:	4798      	blx	r3
	_usart_sync_enable(&descr->device);
     822:	0020      	movs	r0, r4
     824:	3008      	adds	r0, #8
     826:	4b04      	ldr	r3, [pc, #16]	; (838 <usart_sync_enable+0x28>)
     828:	4798      	blx	r3
}
     82a:	2000      	movs	r0, #0
     82c:	bd10      	pop	{r4, pc}
     82e:	46c0      	nop			; (mov r8, r8)
     830:	00003654 	.word	0x00003654
     834:	0000086d 	.word	0x0000086d
     838:	00000ee9 	.word	0x00000ee9

0000083c <usart_sync_get_io_descriptor>:
{
     83c:	b570      	push	{r4, r5, r6, lr}
     83e:	0004      	movs	r4, r0
     840:	000d      	movs	r5, r1
	ASSERT(descr && io);
     842:	2800      	cmp	r0, #0
     844:	d00b      	beq.n	85e <usart_sync_get_io_descriptor+0x22>
     846:	2900      	cmp	r1, #0
     848:	d007      	beq.n	85a <usart_sync_get_io_descriptor+0x1e>
     84a:	2001      	movs	r0, #1
     84c:	2269      	movs	r2, #105	; 0x69
     84e:	4905      	ldr	r1, [pc, #20]	; (864 <usart_sync_get_io_descriptor+0x28>)
     850:	4b05      	ldr	r3, [pc, #20]	; (868 <usart_sync_get_io_descriptor+0x2c>)
     852:	4798      	blx	r3
	*io = &descr->io;
     854:	602c      	str	r4, [r5, #0]
}
     856:	2000      	movs	r0, #0
     858:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     85a:	2000      	movs	r0, #0
     85c:	e7f6      	b.n	84c <usart_sync_get_io_descriptor+0x10>
     85e:	2000      	movs	r0, #0
     860:	e7f4      	b.n	84c <usart_sync_get_io_descriptor+0x10>
     862:	46c0      	nop			; (mov r8, r8)
     864:	00003654 	.word	0x00003654
     868:	0000086d 	.word	0x0000086d

0000086c <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     86c:	2800      	cmp	r0, #0
     86e:	d100      	bne.n	872 <assert+0x6>
		__asm("BKPT #0");
     870:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     872:	4770      	bx	lr

00000874 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     874:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     876:	4a06      	ldr	r2, [pc, #24]	; (890 <_sbrk+0x1c>)
     878:	6812      	ldr	r2, [r2, #0]
     87a:	2a00      	cmp	r2, #0
     87c:	d004      	beq.n	888 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     87e:	4a04      	ldr	r2, [pc, #16]	; (890 <_sbrk+0x1c>)
     880:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     882:	18c3      	adds	r3, r0, r3
     884:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     886:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     888:	4902      	ldr	r1, [pc, #8]	; (894 <_sbrk+0x20>)
     88a:	4a01      	ldr	r2, [pc, #4]	; (890 <_sbrk+0x1c>)
     88c:	6011      	str	r1, [r2, #0]
     88e:	e7f6      	b.n	87e <_sbrk+0xa>
     890:	20000114 	.word	0x20000114
     894:	20002340 	.word	0x20002340

00000898 <_adc_get_hardware_index>:
 */
static uint8_t _adc_get_hardware_index(const void *const hw)
{
	(void)hw;
	return 0;
}
     898:	2000      	movs	r0, #0
     89a:	4770      	bx	lr

0000089c <_adc_get_regs>:
/** \brief Return the pointer to register settings of specific ADC
 *  \param[in] hw_addr The hardware register base address.
 *  \return Pointer to register settings of specific ADC.
 */
static uint8_t _adc_get_regs(const uint32_t hw_addr)
{
     89c:	b510      	push	{r4, lr}
	uint8_t n = _adc_get_hardware_index((const void *)hw_addr);
     89e:	4b0b      	ldr	r3, [pc, #44]	; (8cc <_adc_get_regs+0x30>)
     8a0:	4798      	blx	r3
     8a2:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     8a4:	2000      	movs	r0, #0
     8a6:	2800      	cmp	r0, #0
     8a8:	d006      	beq.n	8b8 <_adc_get_regs+0x1c>
		if (_adcs[i].number == n) {
			return i;
		}
	}

	ASSERT(false);
     8aa:	227f      	movs	r2, #127	; 0x7f
     8ac:	4908      	ldr	r1, [pc, #32]	; (8d0 <_adc_get_regs+0x34>)
     8ae:	2000      	movs	r0, #0
     8b0:	4b08      	ldr	r3, [pc, #32]	; (8d4 <_adc_get_regs+0x38>)
     8b2:	4798      	blx	r3
	return 0;
     8b4:	2000      	movs	r0, #0
}
     8b6:	bd10      	pop	{r4, pc}
		if (_adcs[i].number == n) {
     8b8:	00c3      	lsls	r3, r0, #3
     8ba:	1a1b      	subs	r3, r3, r0
     8bc:	0099      	lsls	r1, r3, #2
     8be:	4b06      	ldr	r3, [pc, #24]	; (8d8 <_adc_get_regs+0x3c>)
     8c0:	5ccb      	ldrb	r3, [r1, r3]
     8c2:	429a      	cmp	r2, r3
     8c4:	d0f7      	beq.n	8b6 <_adc_get_regs+0x1a>
	for (i = 0; i < sizeof(_adcs) / sizeof(struct adc_configuration); i++) {
     8c6:	3001      	adds	r0, #1
     8c8:	b2c0      	uxtb	r0, r0
     8ca:	e7ec      	b.n	8a6 <_adc_get_regs+0xa>
     8cc:	00000899 	.word	0x00000899
     8d0:	0000368c 	.word	0x0000368c
     8d4:	0000086d 	.word	0x0000086d
     8d8:	00003670 	.word	0x00003670

000008dc <_adc_init>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] i  The number of hardware instance
 */
static int32_t _adc_init(void *const hw, const uint8_t i)
{
     8dc:	b570      	push	{r4, r5, r6, lr}
     8de:	0004      	movs	r4, r0
     8e0:	000d      	movs	r5, r1
	ASSERT(hw == ADC);
     8e2:	4b3a      	ldr	r3, [pc, #232]	; (9cc <_adc_init+0xf0>)
     8e4:	18c0      	adds	r0, r0, r3
     8e6:	4243      	negs	r3, r0
     8e8:	4158      	adcs	r0, r3
     8ea:	b2c0      	uxtb	r0, r0
     8ec:	2294      	movs	r2, #148	; 0x94
     8ee:	4938      	ldr	r1, [pc, #224]	; (9d0 <_adc_init+0xf4>)
     8f0:	4b38      	ldr	r3, [pc, #224]	; (9d4 <_adc_init+0xf8>)
     8f2:	4798      	blx	r3

	uint16_t calib_reg;

	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     8f4:	4b38      	ldr	r3, [pc, #224]	; (9d8 <_adc_init+0xfc>)
     8f6:	681a      	ldr	r2, [r3, #0]
     8f8:	08d2      	lsrs	r2, r2, #3
     8fa:	0212      	lsls	r2, r2, #8
     8fc:	23e0      	movs	r3, #224	; 0xe0
     8fe:	00db      	lsls	r3, r3, #3
     900:	401a      	ands	r2, r3
	            | ADC_CALIB_LINEARITY_CAL((*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos));
     902:	4936      	ldr	r1, [pc, #216]	; (9dc <_adc_init+0x100>)
     904:	680b      	ldr	r3, [r1, #0]
     906:	6849      	ldr	r1, [r1, #4]
     908:	0149      	lsls	r1, r1, #5
     90a:	0edb      	lsrs	r3, r3, #27
     90c:	430b      	orrs	r3, r1
     90e:	21ff      	movs	r1, #255	; 0xff
     910:	400b      	ands	r3, r1
	calib_reg = ADC_CALIB_BIAS_CAL((*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos))
     912:	431a      	orrs	r2, r3
typedef uint8_t  hri_adc_swtrig_reg_t;
typedef uint8_t  hri_adc_winctrl_reg_t;

static inline void hri_adc_wait_for_sync(const void *const hw)
{
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     914:	7e63      	ldrb	r3, [r4, #25]
     916:	09db      	lsrs	r3, r3, #7
     918:	d1fc      	bne.n	914 <_adc_init+0x38>
}

static inline hri_adc_ctrla_reg_t hri_adc_get_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Adc *)hw)->CTRLA.reg;
     91a:	7823      	ldrb	r3, [r4, #0]

	hri_adc_wait_for_sync(hw);
	if (hri_adc_get_CTRLA_reg(hw, ADC_CTRLA_ENABLE)) {
     91c:	079b      	lsls	r3, r3, #30
     91e:	d504      	bpl.n	92a <_adc_init+0x4e>
}

static inline void hri_adc_write_CTRLA_reg(const void *const hw, hri_adc_ctrla_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CTRLA.reg = data;
     920:	2300      	movs	r3, #0
     922:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     924:	7e63      	ldrb	r3, [r4, #25]
     926:	09db      	lsrs	r3, r3, #7
     928:	d1fc      	bne.n	924 <_adc_init+0x48>
	((Adc *)hw)->CTRLA.reg = data;
     92a:	2301      	movs	r3, #1
     92c:	7023      	strb	r3, [r4, #0]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     92e:	7e63      	ldrb	r3, [r4, #25]
     930:	09db      	lsrs	r3, r3, #7
     932:	d1fc      	bne.n	92e <_adc_init+0x52>
}

static inline void hri_adc_write_CALIB_reg(const void *const hw, hri_adc_calib_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->CALIB.reg = data;
     934:	8522      	strh	r2, [r4, #40]	; 0x28
	}
	hri_adc_write_CTRLA_reg(hw, ADC_CTRLA_SWRST);
	hri_adc_wait_for_sync(hw);

	hri_adc_write_CALIB_reg(hw, calib_reg);
	hri_adc_write_REFCTRL_reg(hw, _adcs[i].ref_ctrl);
     936:	00ea      	lsls	r2, r5, #3
     938:	1b52      	subs	r2, r2, r5
     93a:	0091      	lsls	r1, r2, #2
     93c:	4b28      	ldr	r3, [pc, #160]	; (9e0 <_adc_init+0x104>)
     93e:	185b      	adds	r3, r3, r1
     940:	789a      	ldrb	r2, [r3, #2]
	((Adc *)hw)->REFCTRL.reg = data;
     942:	7062      	strb	r2, [r4, #1]
	hri_adc_write_AVGCTRL_reg(hw, _adcs[i].avg_ctrl);
     944:	78da      	ldrb	r2, [r3, #3]
	((Adc *)hw)->AVGCTRL.reg = data;
     946:	70a2      	strb	r2, [r4, #2]
	hri_adc_write_SAMPCTRL_reg(hw, _adcs[i].samp_ctrl);
     948:	791a      	ldrb	r2, [r3, #4]
	((Adc *)hw)->SAMPCTRL.reg = data;
     94a:	70e2      	strb	r2, [r4, #3]
	hri_adc_write_EVCTRL_reg(hw, _adcs[i].ev_ctrl);
     94c:	7c1a      	ldrb	r2, [r3, #16]
	((Adc *)hw)->EVCTRL.reg = data;
     94e:	7522      	strb	r2, [r4, #20]
	hri_adc_write_GAINCORR_reg(hw, _adcs[i].gain_corr);
     950:	8ada      	ldrh	r2, [r3, #22]
	((Adc *)hw)->GAINCORR.reg = data;
     952:	84a2      	strh	r2, [r4, #36]	; 0x24
	hri_adc_write_OFFSETCORR_reg(hw, _adcs[i].offset_corr);
     954:	8b1a      	ldrh	r2, [r3, #24]
	((Adc *)hw)->OFFSETCORR.reg = data;
     956:	84e2      	strh	r2, [r4, #38]	; 0x26
	hri_adc_write_DBGCTRL_reg(hw, _adcs[i].dbg_ctrl);
     958:	7e99      	ldrb	r1, [r3, #26]
}

static inline void hri_adc_write_DBGCTRL_reg(const void *const hw, hri_adc_dbgctrl_reg_t data)
{
	ADC_CRITICAL_SECTION_ENTER();
	((Adc *)hw)->DBGCTRL.reg = data;
     95a:	222a      	movs	r2, #42	; 0x2a
     95c:	54a1      	strb	r1, [r4, r2]
	hri_adc_write_CTRLB_reg(hw, _adcs[i].ctrl_b);
     95e:	88db      	ldrh	r3, [r3, #6]
	((Adc *)hw)->CTRLB.reg = data;
     960:	80a3      	strh	r3, [r4, #4]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     962:	7e63      	ldrb	r3, [r4, #25]
     964:	09db      	lsrs	r3, r3, #7
     966:	d1fc      	bne.n	962 <_adc_init+0x86>
	hri_adc_write_INPUTCTRL_reg(hw, _adcs[i].input_ctrl);
     968:	00eb      	lsls	r3, r5, #3
     96a:	1b5b      	subs	r3, r3, r5
     96c:	009a      	lsls	r2, r3, #2
     96e:	4b1c      	ldr	r3, [pc, #112]	; (9e0 <_adc_init+0x104>)
     970:	189b      	adds	r3, r3, r2
     972:	68db      	ldr	r3, [r3, #12]
	((Adc *)hw)->INPUTCTRL.reg = data;
     974:	6123      	str	r3, [r4, #16]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     976:	7e63      	ldrb	r3, [r4, #25]
     978:	09db      	lsrs	r3, r3, #7
     97a:	d1fc      	bne.n	976 <_adc_init+0x9a>
	hri_adc_write_WINCTRL_reg(hw, _adcs[i].win_ctrl);
     97c:	00eb      	lsls	r3, r5, #3
     97e:	1b5b      	subs	r3, r3, r5
     980:	009a      	lsls	r2, r3, #2
     982:	4b17      	ldr	r3, [pc, #92]	; (9e0 <_adc_init+0x104>)
     984:	189b      	adds	r3, r3, r2
     986:	7a1b      	ldrb	r3, [r3, #8]
	((Adc *)hw)->WINCTRL.reg = data;
     988:	7223      	strb	r3, [r4, #8]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     98a:	7e63      	ldrb	r3, [r4, #25]
     98c:	09db      	lsrs	r3, r3, #7
     98e:	d1fc      	bne.n	98a <_adc_init+0xae>
	hri_adc_write_WINLT_reg(hw, _adcs[i].win_lt);
     990:	00eb      	lsls	r3, r5, #3
     992:	1b5b      	subs	r3, r3, r5
     994:	009a      	lsls	r2, r3, #2
     996:	4b12      	ldr	r3, [pc, #72]	; (9e0 <_adc_init+0x104>)
     998:	189b      	adds	r3, r3, r2
     99a:	8a5b      	ldrh	r3, [r3, #18]
	((Adc *)hw)->WINLT.reg = data;
     99c:	83a3      	strh	r3, [r4, #28]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     99e:	7e63      	ldrb	r3, [r4, #25]
     9a0:	09db      	lsrs	r3, r3, #7
     9a2:	d1fc      	bne.n	99e <_adc_init+0xc2>
	hri_adc_write_WINUT_reg(hw, _adcs[i].win_ut);
     9a4:	00eb      	lsls	r3, r5, #3
     9a6:	1b5b      	subs	r3, r3, r5
     9a8:	009a      	lsls	r2, r3, #2
     9aa:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <_adc_init+0x104>)
     9ac:	189b      	adds	r3, r3, r2
     9ae:	8a9b      	ldrh	r3, [r3, #20]
	((Adc *)hw)->WINUT.reg = data;
     9b0:	8423      	strh	r3, [r4, #32]
	while (((const Adc *)hw)->STATUS.bit.SYNCBUSY)
     9b2:	7e63      	ldrb	r3, [r4, #25]
     9b4:	09db      	lsrs	r3, r3, #7
     9b6:	d1fc      	bne.n	9b2 <_adc_init+0xd6>
	hri_adc_write_CTRLA_reg(hw, _adcs[i].ctrl_a);
     9b8:	00eb      	lsls	r3, r5, #3
     9ba:	1b5d      	subs	r5, r3, r5
     9bc:	00aa      	lsls	r2, r5, #2
     9be:	4b08      	ldr	r3, [pc, #32]	; (9e0 <_adc_init+0x104>)
     9c0:	189b      	adds	r3, r3, r2
     9c2:	785b      	ldrb	r3, [r3, #1]
	((Adc *)hw)->CTRLA.reg = data;
     9c4:	7023      	strb	r3, [r4, #0]

	return ERR_NONE;
}
     9c6:	2000      	movs	r0, #0
     9c8:	bd70      	pop	{r4, r5, r6, pc}
     9ca:	46c0      	nop			; (mov r8, r8)
     9cc:	bdffc000 	.word	0xbdffc000
     9d0:	0000368c 	.word	0x0000368c
     9d4:	0000086d 	.word	0x0000086d
     9d8:	00806024 	.word	0x00806024
     9dc:	00806020 	.word	0x00806020
     9e0:	00003670 	.word	0x00003670

000009e4 <_adc_sync_init>:

/**
 * \brief Initialize ADC
 */
int32_t _adc_sync_init(struct _adc_sync_device *const device, void *const hw)
{
     9e4:	b570      	push	{r4, r5, r6, lr}
     9e6:	0005      	movs	r5, r0
     9e8:	000c      	movs	r4, r1
	ASSERT(device);
     9ea:	1e43      	subs	r3, r0, #1
     9ec:	4198      	sbcs	r0, r3
     9ee:	b2c0      	uxtb	r0, r0
     9f0:	22c5      	movs	r2, #197	; 0xc5
     9f2:	4906      	ldr	r1, [pc, #24]	; (a0c <_adc_sync_init+0x28>)
     9f4:	4b06      	ldr	r3, [pc, #24]	; (a10 <_adc_sync_init+0x2c>)
     9f6:	4798      	blx	r3

	device->hw = hw;
     9f8:	602c      	str	r4, [r5, #0]

	return _adc_init(hw, _adc_get_regs((uint32_t)hw));
     9fa:	0020      	movs	r0, r4
     9fc:	4b05      	ldr	r3, [pc, #20]	; (a14 <_adc_sync_init+0x30>)
     9fe:	4798      	blx	r3
     a00:	0001      	movs	r1, r0
     a02:	0020      	movs	r0, r4
     a04:	4b04      	ldr	r3, [pc, #16]	; (a18 <_adc_sync_init+0x34>)
     a06:	4798      	blx	r3
}
     a08:	bd70      	pop	{r4, r5, r6, pc}
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	0000368c 	.word	0x0000368c
     a10:	0000086d 	.word	0x0000086d
     a14:	0000089d 	.word	0x0000089d
     a18:	000008dd 	.word	0x000008dd

00000a1c <_get_cycles_for_ms>:

/**
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
     a1c:	b510      	push	{r4, lr}
		return (ms * (freq / 100000) + 2) / 3 * 100;
     a1e:	0103      	lsls	r3, r0, #4
     a20:	1a1b      	subs	r3, r3, r0
     a22:	0158      	lsls	r0, r3, #5
     a24:	3002      	adds	r0, #2
     a26:	2103      	movs	r1, #3
     a28:	4b02      	ldr	r3, [pc, #8]	; (a34 <_get_cycles_for_ms+0x18>)
     a2a:	4798      	blx	r3
     a2c:	2364      	movs	r3, #100	; 0x64
     a2e:	4358      	muls	r0, r3
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     a30:	bd10      	pop	{r4, pc}
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	00002bd1 	.word	0x00002bd1

00000a38 <_delay_cycles>:
{
#ifndef _UNIT_TEST_
	(void)hw;
	(void)cycles;
#if defined __GNUC__
	__asm(".syntax unified\n"
     a38:	3901      	subs	r1, #1
     a3a:	d8fd      	bhi.n	a38 <_delay_cycles>
	__asm("__delay:\n"
	      "subs r1, r1, #1\n"
	      "bhi __delay\n");
#endif
#endif
}
     a3c:	4770      	bx	lr
	...

00000a40 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     a40:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     a42:	4a08      	ldr	r2, [pc, #32]	; (a64 <_init_chip+0x24>)
     a44:	6853      	ldr	r3, [r2, #4]
     a46:	2106      	movs	r1, #6
     a48:	430b      	orrs	r3, r1
     a4a:	6053      	str	r3, [r2, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     a4c:	4b06      	ldr	r3, [pc, #24]	; (a68 <_init_chip+0x28>)
     a4e:	4798      	blx	r3
	_sysctrl_init_sources();
     a50:	4b06      	ldr	r3, [pc, #24]	; (a6c <_init_chip+0x2c>)
     a52:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     a54:	2008      	movs	r0, #8
     a56:	4c06      	ldr	r4, [pc, #24]	; (a70 <_init_chip+0x30>)
     a58:	47a0      	blx	r4
#endif
	_sysctrl_init_referenced_generators();
     a5a:	4b06      	ldr	r3, [pc, #24]	; (a74 <_init_chip+0x34>)
     a5c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     a5e:	20f7      	movs	r0, #247	; 0xf7
     a60:	47a0      	blx	r4
}
     a62:	bd10      	pop	{r4, pc}
     a64:	41004000 	.word	0x41004000
     a68:	00000bd9 	.word	0x00000bd9
     a6c:	0000154d 	.word	0x0000154d
     a70:	00000b7d 	.word	0x00000b7d
     a74:	00001599 	.word	0x00001599

00000a78 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
     a78:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
     a7a:	2b00      	cmp	r3, #0
     a7c:	d00b      	beq.n	a96 <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
     a7e:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
     a80:	2aff      	cmp	r2, #255	; 0xff
     a82:	d017      	beq.n	ab4 <_ext_irq_enable+0x3c>
		return ERR_INVALID_ARG;
	}

	if (enable) {
     a84:	2900      	cmp	r1, #0
     a86:	d10f      	bne.n	aa8 <_ext_irq_enable+0x30>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
     a88:	2301      	movs	r3, #1
     a8a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = ~data;
}

static inline void hri_eic_clear_INTEN_reg(const void *const hw, hri_eic_intenset_reg_t mask)
{
	((Eic *)hw)->INTENCLR.reg = mask;
     a8c:	4a0b      	ldr	r2, [pc, #44]	; (abc <_ext_irq_enable+0x44>)
     a8e:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     a90:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
     a92:	2000      	movs	r0, #0
}
     a94:	4770      	bx	lr
		if (_map[i].pin == pin) {
     a96:	2828      	cmp	r0, #40	; 0x28
     a98:	d002      	beq.n	aa0 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
     a9a:	3301      	adds	r3, #1
     a9c:	b2db      	uxtb	r3, r3
     a9e:	e7ec      	b.n	a7a <_ext_irq_enable+0x2>
			extint = _map[i].extint;
     aa0:	00da      	lsls	r2, r3, #3
     aa2:	4b07      	ldr	r3, [pc, #28]	; (ac0 <_ext_irq_enable+0x48>)
     aa4:	5cd2      	ldrb	r2, [r2, r3]
			break;
     aa6:	e7eb      	b.n	a80 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
     aa8:	2301      	movs	r3, #1
     aaa:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
     aac:	4a03      	ldr	r2, [pc, #12]	; (abc <_ext_irq_enable+0x44>)
     aae:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
     ab0:	2000      	movs	r0, #0
     ab2:	e7ef      	b.n	a94 <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
     ab4:	200d      	movs	r0, #13
     ab6:	4240      	negs	r0, r0
     ab8:	e7ec      	b.n	a94 <_ext_irq_enable+0x1c>
     aba:	46c0      	nop			; (mov r8, r8)
     abc:	40001800 	.word	0x40001800
     ac0:	000036a4 	.word	0x000036a4

00000ac4 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     ac4:	b570      	push	{r4, r5, r6, lr}
     ac6:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     ac8:	4b26      	ldr	r3, [pc, #152]	; (b64 <EIC_Handler+0xa0>)
     aca:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     acc:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     ace:	400a      	ands	r2, r1
     ad0:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     ad2:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     ad4:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     ad6:	4b24      	ldr	r3, [pc, #144]	; (b68 <EIC_Handler+0xa4>)
     ad8:	6818      	ldr	r0, [r3, #0]
     ada:	1e43      	subs	r3, r0, #1
     adc:	4198      	sbcs	r0, r3
     ade:	b2c0      	uxtb	r0, r0
     ae0:	22d2      	movs	r2, #210	; 0xd2
     ae2:	4922      	ldr	r1, [pc, #136]	; (b6c <EIC_Handler+0xa8>)
     ae4:	4b22      	ldr	r3, [pc, #136]	; (b70 <EIC_Handler+0xac>)
     ae6:	4798      	blx	r3
	uint32_t          pin = INVALID_PIN_NUMBER;
     ae8:	2501      	movs	r5, #1
     aea:	426d      	negs	r5, r5

	while (flags) {
     aec:	e02e      	b.n	b4c <EIC_Handler+0x88>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     aee:	3901      	subs	r1, #1
     af0:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     af2:	42b0      	cmp	r0, r6
     af4:	d80e      	bhi.n	b14 <EIC_Handler+0x50>
				middle = (upper + lower) >> 1;
     af6:	1832      	adds	r2, r6, r0
     af8:	1052      	asrs	r2, r2, #1
     afa:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
     afc:	23ff      	movs	r3, #255	; 0xff
     afe:	4013      	ands	r3, r2
     b00:	00db      	lsls	r3, r3, #3
     b02:	4a1c      	ldr	r2, [pc, #112]	; (b74 <EIC_Handler+0xb0>)
     b04:	5c9b      	ldrb	r3, [r3, r2]
     b06:	42a3      	cmp	r3, r4
     b08:	d003      	beq.n	b12 <EIC_Handler+0x4e>
				if (_map[middle].extint < pos) {
     b0a:	daf0      	bge.n	aee <EIC_Handler+0x2a>
					lower = middle + 1;
     b0c:	3101      	adds	r1, #1
     b0e:	b2c8      	uxtb	r0, r1
     b10:	e7ef      	b.n	af2 <EIC_Handler+0x2e>
					pin = _map[middle].pin;
     b12:	2528      	movs	r5, #40	; 0x28
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     b14:	1c6b      	adds	r3, r5, #1
     b16:	d003      	beq.n	b20 <EIC_Handler+0x5c>
				callback(pin);
     b18:	4b13      	ldr	r3, [pc, #76]	; (b68 <EIC_Handler+0xa4>)
     b1a:	681b      	ldr	r3, [r3, #0]
     b1c:	0028      	movs	r0, r5
     b1e:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     b20:	2201      	movs	r2, #1
     b22:	40a2      	lsls	r2, r4
     b24:	9b01      	ldr	r3, [sp, #4]
     b26:	4393      	bics	r3, r2
     b28:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     b2a:	9801      	ldr	r0, [sp, #4]
     b2c:	4b12      	ldr	r3, [pc, #72]	; (b78 <EIC_Handler+0xb4>)
     b2e:	4798      	blx	r3
     b30:	3801      	subs	r0, #1
     b32:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     b34:	1c63      	adds	r3, r4, #1
     b36:	d002      	beq.n	b3e <EIC_Handler+0x7a>
     b38:	2601      	movs	r6, #1
     b3a:	2000      	movs	r0, #0
     b3c:	e7d9      	b.n	af2 <EIC_Handler+0x2e>
	return ((Eic *)hw)->INTFLAG.reg;
     b3e:	4b09      	ldr	r3, [pc, #36]	; (b64 <EIC_Handler+0xa0>)
     b40:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     b42:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     b44:	400a      	ands	r2, r1
     b46:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     b48:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     b4a:	611a      	str	r2, [r3, #16]
	while (flags) {
     b4c:	9b01      	ldr	r3, [sp, #4]
     b4e:	2b00      	cmp	r3, #0
     b50:	d005      	beq.n	b5e <EIC_Handler+0x9a>
		pos = ffs(flags) - 1;
     b52:	9801      	ldr	r0, [sp, #4]
     b54:	4b08      	ldr	r3, [pc, #32]	; (b78 <EIC_Handler+0xb4>)
     b56:	4798      	blx	r3
     b58:	3801      	subs	r0, #1
     b5a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     b5c:	e7ea      	b.n	b34 <EIC_Handler+0x70>
	}
}
     b5e:	b002      	add	sp, #8
     b60:	bd70      	pop	{r4, r5, r6, pc}
     b62:	46c0      	nop			; (mov r8, r8)
     b64:	40001800 	.word	0x40001800
     b68:	20000118 	.word	0x20000118
     b6c:	000036ac 	.word	0x000036ac
     b70:	0000086d 	.word	0x0000086d
     b74:	000036a4 	.word	0x000036a4
     b78:	00002ce9 	.word	0x00002ce9

00000b7c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     b7c:	07c3      	lsls	r3, r0, #31
     b7e:	d509      	bpl.n	b94 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     b80:	4b11      	ldr	r3, [pc, #68]	; (bc8 <_gclk_init_generators_by_fref+0x4c>)
     b82:	2280      	movs	r2, #128	; 0x80
     b84:	0052      	lsls	r2, r2, #1
     b86:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     b88:	4a10      	ldr	r2, [pc, #64]	; (bcc <_gclk_init_generators_by_fref+0x50>)
     b8a:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     b8c:	4b0e      	ldr	r3, [pc, #56]	; (bc8 <_gclk_init_generators_by_fref+0x4c>)
     b8e:	785b      	ldrb	r3, [r3, #1]
     b90:	09db      	lsrs	r3, r3, #7
     b92:	d1fb      	bne.n	b8c <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     b94:	0783      	lsls	r3, r0, #30
     b96:	d509      	bpl.n	bac <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     b98:	4b0b      	ldr	r3, [pc, #44]	; (bc8 <_gclk_init_generators_by_fref+0x4c>)
     b9a:	2202      	movs	r2, #2
     b9c:	32ff      	adds	r2, #255	; 0xff
     b9e:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     ba0:	4a0b      	ldr	r2, [pc, #44]	; (bd0 <_gclk_init_generators_by_fref+0x54>)
     ba2:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     ba4:	4b08      	ldr	r3, [pc, #32]	; (bc8 <_gclk_init_generators_by_fref+0x4c>)
     ba6:	785b      	ldrb	r3, [r3, #1]
     ba8:	09db      	lsrs	r3, r3, #7
     baa:	d1fb      	bne.n	ba4 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GENERATOR_2_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_2_SRC | GCLK_GENCTRL_ID(2));
	}
#endif

#if CONF_GCLK_GENERATOR_3_CONFIG == 1
	if (bm & (1ul << 3)) {
     bac:	0703      	lsls	r3, r0, #28
     bae:	d509      	bpl.n	bc4 <_gclk_init_generators_by_fref+0x48>
	((Gclk *)hw)->GENDIV.reg = data;
     bb0:	4b05      	ldr	r3, [pc, #20]	; (bc8 <_gclk_init_generators_by_fref+0x4c>)
     bb2:	2204      	movs	r2, #4
     bb4:	32ff      	adds	r2, #255	; 0xff
     bb6:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     bb8:	4a06      	ldr	r2, [pc, #24]	; (bd4 <_gclk_init_generators_by_fref+0x58>)
     bba:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     bbc:	4b02      	ldr	r3, [pc, #8]	; (bc8 <_gclk_init_generators_by_fref+0x4c>)
     bbe:	785b      	ldrb	r3, [r3, #1]
     bc0:	09db      	lsrs	r3, r3, #7
     bc2:	d1fb      	bne.n	bbc <_gclk_init_generators_by_fref+0x40>
		        | (CONF_GCLK_GEN_7_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_7_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_7_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_7_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_7_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_7_SRC | GCLK_GENCTRL_ID(7));
	}
#endif
}
     bc4:	4770      	bx	lr
     bc6:	46c0      	nop			; (mov r8, r8)
     bc8:	40000c00 	.word	0x40000c00
     bcc:	00010700 	.word	0x00010700
     bd0:	00010601 	.word	0x00010601
     bd4:	00010303 	.word	0x00010303

00000bd8 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     bd8:	4b06      	ldr	r3, [pc, #24]	; (bf4 <_pm_init+0x1c>)
     bda:	7a1a      	ldrb	r2, [r3, #8]
     bdc:	b2d2      	uxtb	r2, r2
     bde:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     be0:	7a5a      	ldrb	r2, [r3, #9]
     be2:	b2d2      	uxtb	r2, r2
     be4:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     be6:	7a9a      	ldrb	r2, [r3, #10]
     be8:	b2d2      	uxtb	r2, r2
     bea:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     bec:	7ada      	ldrb	r2, [r3, #11]
     bee:	b2d2      	uxtb	r2, r2
     bf0:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     bf2:	4770      	bx	lr
     bf4:	40000400 	.word	0x40000400

00000bf8 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     bf8:	4b02      	ldr	r3, [pc, #8]	; (c04 <_sercom_get_hardware_index+0xc>)
     bfa:	469c      	mov	ip, r3
     bfc:	4460      	add	r0, ip
     bfe:	0a80      	lsrs	r0, r0, #10
     c00:	b2c0      	uxtb	r0, r0
}
     c02:	4770      	bx	lr
     c04:	bdfff800 	.word	0xbdfff800

00000c08 <_spi_sync_enable>:
		;
}

static inline bool hri_sercomspi_is_syncing(const void *const hw)
{
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
     c08:	8a03      	ldrh	r3, [r0, #16]
     c0a:	0bdb      	lsrs	r3, r3, #15
 *
 * \return Enabling status
 */
static int32_t _spi_sync_enable(void *const hw)
{
	if (hri_sercomspi_is_syncing(hw)) {
     c0c:	d108      	bne.n	c20 <_spi_sync_enable+0x18>
}

static inline void hri_sercomspi_set_CTRLA_ENABLE_bit(const void *const hw)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->SPI.CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     c0e:	6803      	ldr	r3, [r0, #0]
     c10:	2202      	movs	r2, #2
     c12:	4313      	orrs	r3, r2
     c14:	6003      	str	r3, [r0, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
     c16:	8a03      	ldrh	r3, [r0, #16]
     c18:	0bdb      	lsrs	r3, r3, #15
     c1a:	d1fc      	bne.n	c16 <_spi_sync_enable+0xe>
		return ERR_BUSY;
	}

	hri_sercomspi_set_CTRLA_ENABLE_bit(hw);

	return ERR_NONE;
     c1c:	2000      	movs	r0, #0
}
     c1e:	4770      	bx	lr
		return ERR_BUSY;
     c20:	2004      	movs	r0, #4
     c22:	4240      	negs	r0, r0
     c24:	e7fb      	b.n	c1e <_spi_sync_enable+0x16>
	...

00000c28 <_get_sercom_index>:
{
     c28:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     c2a:	4b0a      	ldr	r3, [pc, #40]	; (c54 <_get_sercom_index+0x2c>)
     c2c:	4798      	blx	r3
     c2e:	0003      	movs	r3, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     c30:	2000      	movs	r0, #0
     c32:	2800      	cmp	r0, #0
     c34:	d006      	beq.n	c44 <_get_sercom_index+0x1c>
	ASSERT(false);
     c36:	4a08      	ldr	r2, [pc, #32]	; (c58 <_get_sercom_index+0x30>)
     c38:	4908      	ldr	r1, [pc, #32]	; (c5c <_get_sercom_index+0x34>)
     c3a:	2000      	movs	r0, #0
     c3c:	4b08      	ldr	r3, [pc, #32]	; (c60 <_get_sercom_index+0x38>)
     c3e:	4798      	blx	r3
	return 0;
     c40:	2000      	movs	r0, #0
}
     c42:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     c44:	0102      	lsls	r2, r0, #4
     c46:	4907      	ldr	r1, [pc, #28]	; (c64 <_get_sercom_index+0x3c>)
     c48:	5c52      	ldrb	r2, [r2, r1]
     c4a:	4293      	cmp	r3, r2
     c4c:	d0f9      	beq.n	c42 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     c4e:	3001      	adds	r0, #1
     c50:	b2c0      	uxtb	r0, r0
     c52:	e7ee      	b.n	c32 <_get_sercom_index+0xa>
     c54:	00000bf9 	.word	0x00000bf9
     c58:	0000022a 	.word	0x0000022a
     c5c:	0000371c 	.word	0x0000371c
     c60:	0000086d 	.word	0x0000086d
     c64:	000036c4 	.word	0x000036c4

00000c68 <_usart_init>:
{
     c68:	b510      	push	{r4, lr}
     c6a:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     c6c:	4b19      	ldr	r3, [pc, #100]	; (cd4 <_usart_init+0x6c>)
     c6e:	4798      	blx	r3
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     c70:	8a23      	ldrh	r3, [r4, #16]
     c72:	0bdb      	lsrs	r3, r3, #15
     c74:	d1fc      	bne.n	c70 <_usart_init+0x8>
     c76:	8a23      	ldrh	r3, [r4, #16]
     c78:	0bdb      	lsrs	r3, r3, #15
     c7a:	d1fc      	bne.n	c76 <_usart_init+0xe>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     c7c:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     c7e:	079b      	lsls	r3, r3, #30
     c80:	d507      	bpl.n	c92 <_usart_init+0x2a>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c82:	2300      	movs	r3, #0
     c84:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     c86:	8a23      	ldrh	r3, [r4, #16]
     c88:	0bdb      	lsrs	r3, r3, #15
     c8a:	d1fc      	bne.n	c86 <_usart_init+0x1e>
     c8c:	8a23      	ldrh	r3, [r4, #16]
     c8e:	0bdb      	lsrs	r3, r3, #15
     c90:	d1fc      	bne.n	c8c <_usart_init+0x24>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     c92:	2301      	movs	r3, #1
     c94:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     c96:	8a23      	ldrh	r3, [r4, #16]
     c98:	0bdb      	lsrs	r3, r3, #15
     c9a:	d1fc      	bne.n	c96 <_usart_init+0x2e>
     c9c:	8a23      	ldrh	r3, [r4, #16]
     c9e:	0bdb      	lsrs	r3, r3, #15
     ca0:	d1fc      	bne.n	c9c <_usart_init+0x34>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     ca2:	0102      	lsls	r2, r0, #4
     ca4:	4b0c      	ldr	r3, [pc, #48]	; (cd8 <_usart_init+0x70>)
     ca6:	189b      	adds	r3, r3, r2
     ca8:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     caa:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     cac:	8a23      	ldrh	r3, [r4, #16]
     cae:	0bdb      	lsrs	r3, r3, #15
     cb0:	d1fc      	bne.n	cac <_usart_init+0x44>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     cb2:	0102      	lsls	r2, r0, #4
     cb4:	4b08      	ldr	r3, [pc, #32]	; (cd8 <_usart_init+0x70>)
     cb6:	189b      	adds	r3, r3, r2
     cb8:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     cba:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     cbc:	8a23      	ldrh	r3, [r4, #16]
     cbe:	0bdb      	lsrs	r3, r3, #15
     cc0:	d1fc      	bne.n	cbc <_usart_init+0x54>
	hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     cc2:	0100      	lsls	r0, r0, #4
     cc4:	4b04      	ldr	r3, [pc, #16]	; (cd8 <_usart_init+0x70>)
     cc6:	1818      	adds	r0, r3, r0
     cc8:	8983      	ldrh	r3, [r0, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     cca:	8163      	strh	r3, [r4, #10]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     ccc:	7b83      	ldrb	r3, [r0, #14]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     cce:	7223      	strb	r3, [r4, #8]
}
     cd0:	2000      	movs	r0, #0
     cd2:	bd10      	pop	{r4, pc}
     cd4:	00000c29 	.word	0x00000c29
     cd8:	000036c4 	.word	0x000036c4

00000cdc <_get_i2cm_index>:
{
     cdc:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     cde:	4b0c      	ldr	r3, [pc, #48]	; (d10 <_get_i2cm_index+0x34>)
     ce0:	4798      	blx	r3
     ce2:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     ce4:	2000      	movs	r0, #0
     ce6:	2800      	cmp	r0, #0
     ce8:	d006      	beq.n	cf8 <_get_i2cm_index+0x1c>
	ASSERT(false);
     cea:	4a0a      	ldr	r2, [pc, #40]	; (d14 <_get_i2cm_index+0x38>)
     cec:	490a      	ldr	r1, [pc, #40]	; (d18 <_get_i2cm_index+0x3c>)
     cee:	2000      	movs	r0, #0
     cf0:	4b0a      	ldr	r3, [pc, #40]	; (d1c <_get_i2cm_index+0x40>)
     cf2:	4798      	blx	r3
	return 0;
     cf4:	2000      	movs	r0, #0
}
     cf6:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
     cf8:	0043      	lsls	r3, r0, #1
     cfa:	181b      	adds	r3, r3, r0
     cfc:	00d9      	lsls	r1, r3, #3
     cfe:	4b08      	ldr	r3, [pc, #32]	; (d20 <_get_i2cm_index+0x44>)
     d00:	185b      	adds	r3, r3, r1
     d02:	7c1b      	ldrb	r3, [r3, #16]
     d04:	429a      	cmp	r2, r3
     d06:	d0f6      	beq.n	cf6 <_get_i2cm_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     d08:	3001      	adds	r0, #1
     d0a:	b2c0      	uxtb	r0, r0
     d0c:	e7eb      	b.n	ce6 <_get_i2cm_index+0xa>
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	00000bf9 	.word	0x00000bf9
     d14:	00000366 	.word	0x00000366
     d18:	0000371c 	.word	0x0000371c
     d1c:	0000086d 	.word	0x0000086d
     d20:	000036c4 	.word	0x000036c4

00000d24 <_sercom_i2c_sync_send_address>:
{
     d24:	b570      	push	{r4, r5, r6, lr}
     d26:	0005      	movs	r5, r0
	void *             hw  = i2c_dev->hw;
     d28:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     d2a:	1e43      	subs	r3, r0, #1
     d2c:	4198      	sbcs	r0, r3
     d2e:	b2c0      	uxtb	r0, r0
     d30:	4a5c      	ldr	r2, [pc, #368]	; (ea4 <_sercom_i2c_sync_send_address+0x180>)
     d32:	495d      	ldr	r1, [pc, #372]	; (ea8 <_sercom_i2c_sync_send_address+0x184>)
     d34:	4b5d      	ldr	r3, [pc, #372]	; (eac <_sercom_i2c_sync_send_address+0x188>)
     d36:	4798      	blx	r3
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d38:	6863      	ldr	r3, [r4, #4]
     d3a:	4a5d      	ldr	r2, [pc, #372]	; (eb0 <_sercom_i2c_sync_send_address+0x18c>)
     d3c:	4013      	ands	r3, r2
     d3e:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     d40:	8a23      	ldrh	r3, [r4, #16]
     d42:	0bdb      	lsrs	r3, r3, #15
     d44:	d1fc      	bne.n	d40 <_sercom_i2c_sync_send_address+0x1c>
	hri_sercomi2cm_write_ADDR_reg(hw, ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0));
     d46:	882a      	ldrh	r2, [r5, #0]
     d48:	0052      	lsls	r2, r2, #1
     d4a:	886b      	ldrh	r3, [r5, #2]
     d4c:	2101      	movs	r1, #1
     d4e:	400b      	ands	r3, r1
     d50:	4313      	orrs	r3, r2
     d52:	b2db      	uxtb	r3, r3
}

static inline void hri_sercomi2cm_write_ADDR_reg(const void *const hw, hri_sercomi2cm_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d54:	7523      	strb	r3, [r4, #20]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     d56:	8a23      	ldrh	r3, [r4, #16]
     d58:	0bdb      	lsrs	r3, r3, #15
     d5a:	d1fc      	bne.n	d56 <_sercom_i2c_sync_send_address+0x32>
	void *   hw      = i2c_dev->hw;
     d5c:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     d5e:	4a55      	ldr	r2, [pc, #340]	; (eb4 <_sercom_i2c_sync_send_address+0x190>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     d60:	7bb3      	ldrb	r3, [r6, #14]
     d62:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     d64:	0018      	movs	r0, r3
		if (timeout-- == 0) {
     d66:	1e51      	subs	r1, r2, #1
     d68:	2a00      	cmp	r2, #0
     d6a:	d002      	beq.n	d72 <_sercom_i2c_sync_send_address+0x4e>
     d6c:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     d6e:	079b      	lsls	r3, r3, #30
     d70:	d0f6      	beq.n	d60 <_sercom_i2c_sync_send_address+0x3c>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     d72:	8a23      	ldrh	r3, [r4, #16]
     d74:	0bdb      	lsrs	r3, r3, #15
     d76:	d1fc      	bne.n	d72 <_sercom_i2c_sync_send_address+0x4e>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     d78:	8a23      	ldrh	r3, [r4, #16]
     d7a:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     d7c:	07c2      	lsls	r2, r0, #31
     d7e:	d550      	bpl.n	e22 <_sercom_i2c_sync_send_address+0xfe>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     d80:	079a      	lsls	r2, r3, #30
     d82:	d510      	bpl.n	da6 <_sercom_i2c_sync_send_address+0x82>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     d84:	2201      	movs	r2, #1
     d86:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
     d88:	886a      	ldrh	r2, [r5, #2]
     d8a:	2180      	movs	r1, #128	; 0x80
     d8c:	0149      	lsls	r1, r1, #5
     d8e:	430a      	orrs	r2, r1
     d90:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     d92:	886a      	ldrh	r2, [r5, #2]
     d94:	4948      	ldr	r1, [pc, #288]	; (eb8 <_sercom_i2c_sync_send_address+0x194>)
     d96:	400a      	ands	r2, r1
     d98:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     d9a:	07db      	lsls	r3, r3, #31
     d9c:	d400      	bmi.n	da0 <_sercom_i2c_sync_send_address+0x7c>
     d9e:	e07c      	b.n	e9a <_sercom_i2c_sync_send_address+0x176>
				return I2C_ERR_BUS;
     da0:	2005      	movs	r0, #5
     da2:	4240      	negs	r0, r0
     da4:	e063      	b.n	e6e <_sercom_i2c_sync_send_address+0x14a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     da6:	075b      	lsls	r3, r3, #29
     da8:	d40b      	bmi.n	dc2 <_sercom_i2c_sync_send_address+0x9e>
			if (msg->len == 0) {
     daa:	6868      	ldr	r0, [r5, #4]
     dac:	2800      	cmp	r0, #0
     dae:	d12d      	bne.n	e0c <_sercom_i2c_sync_send_address+0xe8>
				if (msg->flags & I2C_M_STOP) {
     db0:	886b      	ldrh	r3, [r5, #2]
     db2:	b21b      	sxth	r3, r3
     db4:	2b00      	cmp	r3, #0
     db6:	db20      	blt.n	dfa <_sercom_i2c_sync_send_address+0xd6>
				msg->flags &= ~I2C_M_BUSY;
     db8:	886b      	ldrh	r3, [r5, #2]
     dba:	4a3f      	ldr	r2, [pc, #252]	; (eb8 <_sercom_i2c_sync_send_address+0x194>)
     dbc:	4013      	ands	r3, r2
     dbe:	806b      	strh	r3, [r5, #2]
     dc0:	e055      	b.n	e6e <_sercom_i2c_sync_send_address+0x14a>
				if (msg->len > 0) {
     dc2:	686b      	ldr	r3, [r5, #4]
     dc4:	2b00      	cmp	r3, #0
     dc6:	dd04      	ble.n	dd2 <_sercom_i2c_sync_send_address+0xae>
					msg->flags |= I2C_M_FAIL;
     dc8:	886b      	ldrh	r3, [r5, #2]
     dca:	2280      	movs	r2, #128	; 0x80
     dcc:	0152      	lsls	r2, r2, #5
     dce:	4313      	orrs	r3, r2
     dd0:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     dd2:	886b      	ldrh	r3, [r5, #2]
     dd4:	b21b      	sxth	r3, r3
     dd6:	2b00      	cmp	r3, #0
     dd8:	db06      	blt.n	de8 <_sercom_i2c_sync_send_address+0xc4>
				msg->flags &= ~I2C_M_BUSY;
     dda:	886b      	ldrh	r3, [r5, #2]
     ddc:	4a36      	ldr	r2, [pc, #216]	; (eb8 <_sercom_i2c_sync_send_address+0x194>)
     dde:	4013      	ands	r3, r2
     de0:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     de2:	2002      	movs	r0, #2
     de4:	4240      	negs	r0, r0
     de6:	e042      	b.n	e6e <_sercom_i2c_sync_send_address+0x14a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     de8:	6862      	ldr	r2, [r4, #4]
     dea:	23c0      	movs	r3, #192	; 0xc0
     dec:	029b      	lsls	r3, r3, #10
     dee:	4313      	orrs	r3, r2
     df0:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     df2:	8a23      	ldrh	r3, [r4, #16]
     df4:	0bdb      	lsrs	r3, r3, #15
     df6:	d1fc      	bne.n	df2 <_sercom_i2c_sync_send_address+0xce>
     df8:	e7ef      	b.n	dda <_sercom_i2c_sync_send_address+0xb6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     dfa:	6862      	ldr	r2, [r4, #4]
     dfc:	23c0      	movs	r3, #192	; 0xc0
     dfe:	029b      	lsls	r3, r3, #10
     e00:	4313      	orrs	r3, r2
     e02:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     e04:	8a23      	ldrh	r3, [r4, #16]
     e06:	0bdb      	lsrs	r3, r3, #15
     e08:	d1fc      	bne.n	e04 <_sercom_i2c_sync_send_address+0xe0>
     e0a:	e7d5      	b.n	db8 <_sercom_i2c_sync_send_address+0x94>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     e0c:	68ab      	ldr	r3, [r5, #8]
     e0e:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     e10:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
     e12:	68ab      	ldr	r3, [r5, #8]
     e14:	3301      	adds	r3, #1
     e16:	60ab      	str	r3, [r5, #8]
				msg->len--;
     e18:	686b      	ldr	r3, [r5, #4]
     e1a:	3b01      	subs	r3, #1
     e1c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     e1e:	2000      	movs	r0, #0
     e20:	e025      	b.n	e6e <_sercom_i2c_sync_send_address+0x14a>
	} else if (flags & SB_FLAG) {
     e22:	0782      	lsls	r2, r0, #30
     e24:	d53c      	bpl.n	ea0 <_sercom_i2c_sync_send_address+0x17c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     e26:	686a      	ldr	r2, [r5, #4]
     e28:	2a00      	cmp	r2, #0
     e2a:	d031      	beq.n	e90 <_sercom_i2c_sync_send_address+0x16c>
     e2c:	075b      	lsls	r3, r3, #29
     e2e:	d42f      	bmi.n	e90 <_sercom_i2c_sync_send_address+0x16c>
			msg->len--;
     e30:	3a01      	subs	r2, #1
     e32:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
     e34:	2a00      	cmp	r2, #0
     e36:	d107      	bne.n	e48 <_sercom_i2c_sync_send_address+0x124>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e38:	6862      	ldr	r2, [r4, #4]
     e3a:	2380      	movs	r3, #128	; 0x80
     e3c:	02db      	lsls	r3, r3, #11
     e3e:	4313      	orrs	r3, r2
     e40:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     e42:	8a23      	ldrh	r3, [r4, #16]
     e44:	0bdb      	lsrs	r3, r3, #15
     e46:	d1fc      	bne.n	e42 <_sercom_i2c_sync_send_address+0x11e>
			if (msg->len == 0) {
     e48:	686b      	ldr	r3, [r5, #4]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d107      	bne.n	e5e <_sercom_i2c_sync_send_address+0x13a>
				if (msg->flags & I2C_M_STOP) {
     e4e:	886b      	ldrh	r3, [r5, #2]
     e50:	b21b      	sxth	r3, r3
     e52:	2b00      	cmp	r3, #0
     e54:	db0c      	blt.n	e70 <_sercom_i2c_sync_send_address+0x14c>
				msg->flags &= ~I2C_M_BUSY;
     e56:	886b      	ldrh	r3, [r5, #2]
     e58:	4a17      	ldr	r2, [pc, #92]	; (eb8 <_sercom_i2c_sync_send_address+0x194>)
     e5a:	4013      	ands	r3, r2
     e5c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     e5e:	68ab      	ldr	r3, [r5, #8]
     e60:	1c5a      	adds	r2, r3, #1
     e62:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
     e64:	7e22      	ldrb	r2, [r4, #24]
     e66:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e68:	2302      	movs	r3, #2
     e6a:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
     e6c:	2000      	movs	r0, #0
}
     e6e:	bd70      	pop	{r4, r5, r6, pc}
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     e70:	6863      	ldr	r3, [r4, #4]
     e72:	4a11      	ldr	r2, [pc, #68]	; (eb8 <_sercom_i2c_sync_send_address+0x194>)
     e74:	4013      	ands	r3, r2
     e76:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     e78:	8a23      	ldrh	r3, [r4, #16]
     e7a:	0bdb      	lsrs	r3, r3, #15
     e7c:	d1fc      	bne.n	e78 <_sercom_i2c_sync_send_address+0x154>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e7e:	6862      	ldr	r2, [r4, #4]
     e80:	23c0      	movs	r3, #192	; 0xc0
     e82:	029b      	lsls	r3, r3, #10
     e84:	4313      	orrs	r3, r2
     e86:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     e88:	8a23      	ldrh	r3, [r4, #16]
     e8a:	0bdb      	lsrs	r3, r3, #15
     e8c:	d1fc      	bne.n	e88 <_sercom_i2c_sync_send_address+0x164>
     e8e:	e7e2      	b.n	e56 <_sercom_i2c_sync_send_address+0x132>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e90:	2302      	movs	r3, #2
     e92:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
     e94:	2002      	movs	r0, #2
     e96:	4240      	negs	r0, r0
     e98:	e7e9      	b.n	e6e <_sercom_i2c_sync_send_address+0x14a>
			return I2C_ERR_BAD_ADDRESS;
     e9a:	2004      	movs	r0, #4
     e9c:	4240      	negs	r0, r0
     e9e:	e7e6      	b.n	e6e <_sercom_i2c_sync_send_address+0x14a>
	return I2C_OK;
     ea0:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
     ea2:	e7e4      	b.n	e6e <_sercom_i2c_sync_send_address+0x14a>
     ea4:	00000581 	.word	0x00000581
     ea8:	0000371c 	.word	0x0000371c
     eac:	0000086d 	.word	0x0000086d
     eb0:	fffbffff 	.word	0xfffbffff
     eb4:	0000ffff 	.word	0x0000ffff
     eb8:	fffffeff 	.word	0xfffffeff

00000ebc <_usart_sync_init>:
{
     ebc:	b570      	push	{r4, r5, r6, lr}
     ebe:	0005      	movs	r5, r0
     ec0:	000c      	movs	r4, r1
	ASSERT(device);
     ec2:	1e43      	subs	r3, r0, #1
     ec4:	4198      	sbcs	r0, r3
     ec6:	b2c0      	uxtb	r0, r0
     ec8:	22a1      	movs	r2, #161	; 0xa1
     eca:	4904      	ldr	r1, [pc, #16]	; (edc <_usart_sync_init+0x20>)
     ecc:	4b04      	ldr	r3, [pc, #16]	; (ee0 <_usart_sync_init+0x24>)
     ece:	4798      	blx	r3
	device->hw = hw;
     ed0:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     ed2:	0020      	movs	r0, r4
     ed4:	4b03      	ldr	r3, [pc, #12]	; (ee4 <_usart_sync_init+0x28>)
     ed6:	4798      	blx	r3
}
     ed8:	bd70      	pop	{r4, r5, r6, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	0000371c 	.word	0x0000371c
     ee0:	0000086d 	.word	0x0000086d
     ee4:	00000c69 	.word	0x00000c69

00000ee8 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     ee8:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     eea:	6813      	ldr	r3, [r2, #0]
     eec:	2102      	movs	r1, #2
     eee:	430b      	orrs	r3, r1
     ef0:	6013      	str	r3, [r2, #0]
	while (((const Sercom *)hw)->USART.STATUS.bit.SYNCBUSY)
     ef2:	8a13      	ldrh	r3, [r2, #16]
     ef4:	0bdb      	lsrs	r3, r3, #15
     ef6:	d1fc      	bne.n	ef2 <_usart_sync_enable+0xa>
}
     ef8:	4770      	bx	lr

00000efa <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     efa:	6803      	ldr	r3, [r0, #0]
     efc:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     efe:	8319      	strh	r1, [r3, #24]
}
     f00:	4770      	bx	lr

00000f02 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     f02:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     f04:	8b18      	ldrh	r0, [r3, #24]
     f06:	b2c0      	uxtb	r0, r0
}
     f08:	4770      	bx	lr

00000f0a <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     f0a:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     f0c:	7b98      	ldrb	r0, [r3, #14]
     f0e:	2301      	movs	r3, #1
     f10:	4018      	ands	r0, r3
}
     f12:	4770      	bx	lr

00000f14 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     f14:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     f16:	7b9b      	ldrb	r3, [r3, #14]
     f18:	085b      	lsrs	r3, r3, #1
     f1a:	2001      	movs	r0, #1
     f1c:	4018      	ands	r0, r3
}
     f1e:	4770      	bx	lr

00000f20 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     f20:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     f22:	7b9b      	ldrb	r3, [r3, #14]
     f24:	089b      	lsrs	r3, r3, #2
     f26:	2001      	movs	r0, #1
     f28:	4018      	ands	r0, r3
}
     f2a:	4770      	bx	lr

00000f2c <_i2c_m_sync_init>:
{
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	0006      	movs	r6, r0
     f30:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     f32:	0008      	movs	r0, r1
     f34:	4b23      	ldr	r3, [pc, #140]	; (fc4 <_i2c_m_sync_init+0x98>)
     f36:	4798      	blx	r3
     f38:	0005      	movs	r5, r0
	ASSERT(i2c_dev);
     f3a:	0030      	movs	r0, r6
     f3c:	1e43      	subs	r3, r0, #1
     f3e:	4198      	sbcs	r0, r3
     f40:	b2c0      	uxtb	r0, r0
     f42:	4a21      	ldr	r2, [pc, #132]	; (fc8 <_i2c_m_sync_init+0x9c>)
     f44:	4921      	ldr	r1, [pc, #132]	; (fcc <_i2c_m_sync_init+0xa0>)
     f46:	4b22      	ldr	r3, [pc, #136]	; (fd0 <_i2c_m_sync_init+0xa4>)
     f48:	4798      	blx	r3
	i2c_dev->hw = hw;
     f4a:	6134      	str	r4, [r6, #16]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     f4c:	8a23      	ldrh	r3, [r4, #16]
     f4e:	0bdb      	lsrs	r3, r3, #15
     f50:	d1fc      	bne.n	f4c <_i2c_m_sync_init+0x20>
     f52:	8a23      	ldrh	r3, [r4, #16]
     f54:	0bdb      	lsrs	r3, r3, #15
     f56:	d1fc      	bne.n	f52 <_i2c_m_sync_init+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     f58:	6823      	ldr	r3, [r4, #0]
	if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     f5a:	079b      	lsls	r3, r3, #30
     f5c:	d507      	bpl.n	f6e <_i2c_m_sync_init+0x42>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     f5e:	2300      	movs	r3, #0
     f60:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     f62:	8a23      	ldrh	r3, [r4, #16]
     f64:	0bdb      	lsrs	r3, r3, #15
     f66:	d1fc      	bne.n	f62 <_i2c_m_sync_init+0x36>
     f68:	8a23      	ldrh	r3, [r4, #16]
     f6a:	0bdb      	lsrs	r3, r3, #15
     f6c:	d1fc      	bne.n	f68 <_i2c_m_sync_init+0x3c>
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     f6e:	2301      	movs	r3, #1
     f70:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     f72:	8a23      	ldrh	r3, [r4, #16]
     f74:	0bdb      	lsrs	r3, r3, #15
     f76:	d1fc      	bne.n	f72 <_i2c_m_sync_init+0x46>
     f78:	8a23      	ldrh	r3, [r4, #16]
     f7a:	0bdb      	lsrs	r3, r3, #15
     f7c:	d1fc      	bne.n	f78 <_i2c_m_sync_init+0x4c>
	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a & ~SERCOM_I2CM_CTRLA_ENABLE);
     f7e:	006b      	lsls	r3, r5, #1
     f80:	195b      	adds	r3, r3, r5
     f82:	00da      	lsls	r2, r3, #3
     f84:	4b13      	ldr	r3, [pc, #76]	; (fd4 <_i2c_m_sync_init+0xa8>)
     f86:	189b      	adds	r3, r3, r2
     f88:	695b      	ldr	r3, [r3, #20]
     f8a:	2202      	movs	r2, #2
     f8c:	4393      	bics	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     f8e:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     f90:	8a23      	ldrh	r3, [r4, #16]
     f92:	0bdb      	lsrs	r3, r3, #15
     f94:	d1fc      	bne.n	f90 <_i2c_m_sync_init+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     f96:	006b      	lsls	r3, r5, #1
     f98:	195b      	adds	r3, r3, r5
     f9a:	00da      	lsls	r2, r3, #3
     f9c:	4b0d      	ldr	r3, [pc, #52]	; (fd4 <_i2c_m_sync_init+0xa8>)
     f9e:	189b      	adds	r3, r3, r2
     fa0:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     fa2:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
     fa4:	8a23      	ldrh	r3, [r4, #16]
     fa6:	0bdb      	lsrs	r3, r3, #15
     fa8:	d1fc      	bne.n	fa4 <_i2c_m_sync_init+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     faa:	4a0a      	ldr	r2, [pc, #40]	; (fd4 <_i2c_m_sync_init+0xa8>)
     fac:	006b      	lsls	r3, r5, #1
     fae:	1958      	adds	r0, r3, r5
     fb0:	00c1      	lsls	r1, r0, #3
     fb2:	0008      	movs	r0, r1
     fb4:	1851      	adds	r1, r2, r1
     fb6:	8b89      	ldrh	r1, [r1, #28]
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     fb8:	8161      	strh	r1, [r4, #10]
	i2c_dev->service.trise = _i2cms[i].trise;
     fba:	1812      	adds	r2, r2, r0
     fbc:	8c13      	ldrh	r3, [r2, #32]
     fbe:	81f3      	strh	r3, [r6, #14]
}
     fc0:	2000      	movs	r0, #0
     fc2:	bd70      	pop	{r4, r5, r6, pc}
     fc4:	00000cdd 	.word	0x00000cdd
     fc8:	000004d7 	.word	0x000004d7
     fcc:	0000371c 	.word	0x0000371c
     fd0:	0000086d 	.word	0x0000086d
     fd4:	000036c4 	.word	0x000036c4

00000fd8 <_i2c_m_sync_enable>:
{
     fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     fda:	0006      	movs	r6, r0
	void *hw              = i2c_dev->hw;
     fdc:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     fde:	4d18      	ldr	r5, [pc, #96]	; (1040 <_i2c_m_sync_enable+0x68>)
     fe0:	1e43      	subs	r3, r0, #1
     fe2:	4198      	sbcs	r0, r3
     fe4:	b2c0      	uxtb	r0, r0
     fe6:	22a1      	movs	r2, #161	; 0xa1
     fe8:	00d2      	lsls	r2, r2, #3
     fea:	0029      	movs	r1, r5
     fec:	4f15      	ldr	r7, [pc, #84]	; (1044 <_i2c_m_sync_enable+0x6c>)
     fee:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
     ff0:	6930      	ldr	r0, [r6, #16]
     ff2:	1e43      	subs	r3, r0, #1
     ff4:	4198      	sbcs	r0, r3
     ff6:	b2c0      	uxtb	r0, r0
     ff8:	4a13      	ldr	r2, [pc, #76]	; (1048 <_i2c_m_sync_enable+0x70>)
     ffa:	0029      	movs	r1, r5
     ffc:	47b8      	blx	r7
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     ffe:	6823      	ldr	r3, [r4, #0]
    1000:	2202      	movs	r2, #2
    1002:	4313      	orrs	r3, r2
    1004:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1006:	8a23      	ldrh	r3, [r4, #16]
    1008:	0bdb      	lsrs	r3, r3, #15
    100a:	d1fc      	bne.n	1006 <_i2c_m_sync_enable+0x2e>
    100c:	2004      	movs	r0, #4
    100e:	490f      	ldr	r1, [pc, #60]	; (104c <_i2c_m_sync_enable+0x74>)
    1010:	8a23      	ldrh	r3, [r4, #16]
    1012:	0bdb      	lsrs	r3, r3, #15
    1014:	d1fc      	bne.n	1010 <_i2c_m_sync_enable+0x38>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    1016:	8a22      	ldrh	r2, [r4, #16]
    1018:	0912      	lsrs	r2, r2, #4
    101a:	3303      	adds	r3, #3
    101c:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    101e:	2b01      	cmp	r3, #1
    1020:	d008      	beq.n	1034 <_i2c_m_sync_enable+0x5c>
		timeout--;
    1022:	3901      	subs	r1, #1
		if (timeout <= 0) {
    1024:	2900      	cmp	r1, #0
    1026:	dcf3      	bgt.n	1010 <_i2c_m_sync_enable+0x38>
			if (--timeout_attempt)
    1028:	3801      	subs	r0, #1
    102a:	2800      	cmp	r0, #0
    102c:	d004      	beq.n	1038 <_i2c_m_sync_enable+0x60>
			((Sercom *)hw)->I2CM.STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(I2C_IDLE);
    102e:	2310      	movs	r3, #16
    1030:	8223      	strh	r3, [r4, #16]
    1032:	e7ec      	b.n	100e <_i2c_m_sync_enable+0x36>
	return ERR_NONE;
    1034:	2000      	movs	r0, #0
}
    1036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return I2C_ERR_BUSY;
    1038:	2006      	movs	r0, #6
    103a:	4240      	negs	r0, r0
    103c:	e7fb      	b.n	1036 <_i2c_m_sync_enable+0x5e>
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	0000371c 	.word	0x0000371c
    1044:	0000086d 	.word	0x0000086d
    1048:	00000509 	.word	0x00000509
    104c:	0000ffff 	.word	0x0000ffff

00001050 <_i2c_m_sync_transfer>:
{
    1050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1052:	0005      	movs	r5, r0
    1054:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    1056:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1058:	1e43      	subs	r3, r0, #1
    105a:	4198      	sbcs	r0, r3
    105c:	b2c0      	uxtb	r0, r0
    105e:	4a7b      	ldr	r2, [pc, #492]	; (124c <_i2c_m_sync_transfer+0x1fc>)
    1060:	497b      	ldr	r1, [pc, #492]	; (1250 <_i2c_m_sync_transfer+0x200>)
    1062:	4f7c      	ldr	r7, [pc, #496]	; (1254 <_i2c_m_sync_transfer+0x204>)
    1064:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    1066:	6928      	ldr	r0, [r5, #16]
    1068:	1e43      	subs	r3, r0, #1
    106a:	4198      	sbcs	r0, r3
    106c:	b2c0      	uxtb	r0, r0
    106e:	4a7a      	ldr	r2, [pc, #488]	; (1258 <_i2c_m_sync_transfer+0x208>)
    1070:	4977      	ldr	r1, [pc, #476]	; (1250 <_i2c_m_sync_transfer+0x200>)
    1072:	47b8      	blx	r7
	ASSERT(msg);
    1074:	0030      	movs	r0, r6
    1076:	1e43      	subs	r3, r0, #1
    1078:	4198      	sbcs	r0, r3
    107a:	b2c0      	uxtb	r0, r0
    107c:	4a77      	ldr	r2, [pc, #476]	; (125c <_i2c_m_sync_transfer+0x20c>)
    107e:	4974      	ldr	r1, [pc, #464]	; (1250 <_i2c_m_sync_transfer+0x200>)
    1080:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1082:	886b      	ldrh	r3, [r5, #2]
    1084:	05db      	lsls	r3, r3, #23
    1086:	d500      	bpl.n	108a <_i2c_m_sync_transfer+0x3a>
    1088:	e0dc      	b.n	1244 <_i2c_m_sync_transfer+0x1f4>
	msg->flags |= I2C_M_BUSY;
    108a:	8872      	ldrh	r2, [r6, #2]
    108c:	2380      	movs	r3, #128	; 0x80
    108e:	005b      	lsls	r3, r3, #1
    1090:	469c      	mov	ip, r3
    1092:	431a      	orrs	r2, r3
    1094:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    1096:	002a      	movs	r2, r5
    1098:	0031      	movs	r1, r6
    109a:	c989      	ldmia	r1!, {r0, r3, r7}
    109c:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    109e:	6862      	ldr	r2, [r4, #4]
    10a0:	4663      	mov	r3, ip
    10a2:	4313      	orrs	r3, r2
    10a4:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10a6:	8a23      	ldrh	r3, [r4, #16]
    10a8:	0bdb      	lsrs	r3, r3, #15
    10aa:	d1fc      	bne.n	10a6 <_i2c_m_sync_transfer+0x56>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    10ac:	0028      	movs	r0, r5
    10ae:	4b6c      	ldr	r3, [pc, #432]	; (1260 <_i2c_m_sync_transfer+0x210>)
    10b0:	4798      	blx	r3
	if (ret) {
    10b2:	2800      	cmp	r0, #0
    10b4:	d100      	bne.n	10b8 <_i2c_m_sync_transfer+0x68>
    10b6:	e07d      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    10b8:	886b      	ldrh	r3, [r5, #2]
    10ba:	4a6a      	ldr	r2, [pc, #424]	; (1264 <_i2c_m_sync_transfer+0x214>)
    10bc:	4013      	ands	r3, r2
    10be:	806b      	strh	r3, [r5, #2]
}
    10c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    10c2:	2005      	movs	r0, #5
    10c4:	4240      	negs	r0, r0
    10c6:	e086      	b.n	11d6 <_i2c_m_sync_transfer+0x186>
			if (msg->flags & I2C_M_STOP) {
    10c8:	8873      	ldrh	r3, [r6, #2]
    10ca:	b21b      	sxth	r3, r3
    10cc:	2b00      	cmp	r3, #0
    10ce:	db04      	blt.n	10da <_i2c_m_sync_transfer+0x8a>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    10d0:	886b      	ldrh	r3, [r5, #2]
    10d2:	4a64      	ldr	r2, [pc, #400]	; (1264 <_i2c_m_sync_transfer+0x214>)
    10d4:	4013      	ands	r3, r2
    10d6:	806b      	strh	r3, [r5, #2]
			return ret;
    10d8:	e7f2      	b.n	10c0 <_i2c_m_sync_transfer+0x70>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10da:	6862      	ldr	r2, [r4, #4]
    10dc:	23c0      	movs	r3, #192	; 0xc0
    10de:	029b      	lsls	r3, r3, #10
    10e0:	4313      	orrs	r3, r2
    10e2:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    10e4:	8a23      	ldrh	r3, [r4, #16]
    10e6:	0bdb      	lsrs	r3, r3, #15
    10e8:	d1fc      	bne.n	10e4 <_i2c_m_sync_transfer+0x94>
    10ea:	e7f1      	b.n	10d0 <_i2c_m_sync_transfer+0x80>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    10ec:	075b      	lsls	r3, r3, #29
    10ee:	d40b      	bmi.n	1108 <_i2c_m_sync_transfer+0xb8>
			if (msg->len == 0) {
    10f0:	6868      	ldr	r0, [r5, #4]
    10f2:	2800      	cmp	r0, #0
    10f4:	d12d      	bne.n	1152 <_i2c_m_sync_transfer+0x102>
				if (msg->flags & I2C_M_STOP) {
    10f6:	886b      	ldrh	r3, [r5, #2]
    10f8:	b21b      	sxth	r3, r3
    10fa:	2b00      	cmp	r3, #0
    10fc:	db20      	blt.n	1140 <_i2c_m_sync_transfer+0xf0>
				msg->flags &= ~I2C_M_BUSY;
    10fe:	886b      	ldrh	r3, [r5, #2]
    1100:	4a58      	ldr	r2, [pc, #352]	; (1264 <_i2c_m_sync_transfer+0x214>)
    1102:	4013      	ands	r3, r2
    1104:	806b      	strh	r3, [r5, #2]
    1106:	e055      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
				if (msg->len > 0) {
    1108:	686b      	ldr	r3, [r5, #4]
    110a:	2b00      	cmp	r3, #0
    110c:	dd04      	ble.n	1118 <_i2c_m_sync_transfer+0xc8>
					msg->flags |= I2C_M_FAIL;
    110e:	886b      	ldrh	r3, [r5, #2]
    1110:	2280      	movs	r2, #128	; 0x80
    1112:	0152      	lsls	r2, r2, #5
    1114:	4313      	orrs	r3, r2
    1116:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1118:	886b      	ldrh	r3, [r5, #2]
    111a:	b21b      	sxth	r3, r3
    111c:	2b00      	cmp	r3, #0
    111e:	db06      	blt.n	112e <_i2c_m_sync_transfer+0xde>
				msg->flags &= ~I2C_M_BUSY;
    1120:	886b      	ldrh	r3, [r5, #2]
    1122:	4a50      	ldr	r2, [pc, #320]	; (1264 <_i2c_m_sync_transfer+0x214>)
    1124:	4013      	ands	r3, r2
    1126:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1128:	2002      	movs	r0, #2
    112a:	4240      	negs	r0, r0
    112c:	e042      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    112e:	6862      	ldr	r2, [r4, #4]
    1130:	23c0      	movs	r3, #192	; 0xc0
    1132:	029b      	lsls	r3, r3, #10
    1134:	4313      	orrs	r3, r2
    1136:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1138:	8a23      	ldrh	r3, [r4, #16]
    113a:	0bdb      	lsrs	r3, r3, #15
    113c:	d1fc      	bne.n	1138 <_i2c_m_sync_transfer+0xe8>
    113e:	e7ef      	b.n	1120 <_i2c_m_sync_transfer+0xd0>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1140:	6862      	ldr	r2, [r4, #4]
    1142:	23c0      	movs	r3, #192	; 0xc0
    1144:	029b      	lsls	r3, r3, #10
    1146:	4313      	orrs	r3, r2
    1148:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    114a:	8a23      	ldrh	r3, [r4, #16]
    114c:	0bdb      	lsrs	r3, r3, #15
    114e:	d1fc      	bne.n	114a <_i2c_m_sync_transfer+0xfa>
    1150:	e7d5      	b.n	10fe <_i2c_m_sync_transfer+0xae>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1152:	68ab      	ldr	r3, [r5, #8]
    1154:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1156:	7623      	strb	r3, [r4, #24]
				msg->buffer++;
    1158:	68ab      	ldr	r3, [r5, #8]
    115a:	3301      	adds	r3, #1
    115c:	60ab      	str	r3, [r5, #8]
				msg->len--;
    115e:	686b      	ldr	r3, [r5, #4]
    1160:	3b01      	subs	r3, #1
    1162:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1164:	2000      	movs	r0, #0
    1166:	e025      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
	} else if (flags & SB_FLAG) {
    1168:	078a      	lsls	r2, r1, #30
    116a:	d569      	bpl.n	1240 <_i2c_m_sync_transfer+0x1f0>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    116c:	686a      	ldr	r2, [r5, #4]
    116e:	2a00      	cmp	r2, #0
    1170:	d05e      	beq.n	1230 <_i2c_m_sync_transfer+0x1e0>
    1172:	075b      	lsls	r3, r3, #29
    1174:	d45c      	bmi.n	1230 <_i2c_m_sync_transfer+0x1e0>
			msg->len--;
    1176:	3a01      	subs	r2, #1
    1178:	606a      	str	r2, [r5, #4]
			if (msg->len == 0) {
    117a:	2a00      	cmp	r2, #0
    117c:	d107      	bne.n	118e <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    117e:	6862      	ldr	r2, [r4, #4]
    1180:	2380      	movs	r3, #128	; 0x80
    1182:	02db      	lsls	r3, r3, #11
    1184:	4313      	orrs	r3, r2
    1186:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1188:	8a23      	ldrh	r3, [r4, #16]
    118a:	0bdb      	lsrs	r3, r3, #15
    118c:	d1fc      	bne.n	1188 <_i2c_m_sync_transfer+0x138>
			if (msg->len == 0) {
    118e:	686b      	ldr	r3, [r5, #4]
    1190:	2b00      	cmp	r3, #0
    1192:	d107      	bne.n	11a4 <_i2c_m_sync_transfer+0x154>
				if (msg->flags & I2C_M_STOP) {
    1194:	886b      	ldrh	r3, [r5, #2]
    1196:	b21b      	sxth	r3, r3
    1198:	2b00      	cmp	r3, #0
    119a:	db39      	blt.n	1210 <_i2c_m_sync_transfer+0x1c0>
				msg->flags &= ~I2C_M_BUSY;
    119c:	886b      	ldrh	r3, [r5, #2]
    119e:	4a31      	ldr	r2, [pc, #196]	; (1264 <_i2c_m_sync_transfer+0x214>)
    11a0:	4013      	ands	r3, r2
    11a2:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    11a4:	68ab      	ldr	r3, [r5, #8]
    11a6:	1c5a      	adds	r2, r3, #1
    11a8:	60aa      	str	r2, [r5, #8]
	return ((Sercom *)hw)->I2CM.DATA.reg;
    11aa:	7e22      	ldrb	r2, [r4, #24]
    11ac:	701a      	strb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11ae:	2302      	movs	r3, #2
    11b0:	73a3      	strb	r3, [r4, #14]
	return I2C_OK;
    11b2:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    11b4:	886b      	ldrh	r3, [r5, #2]
    11b6:	05db      	lsls	r3, r3, #23
    11b8:	d400      	bmi.n	11bc <_i2c_m_sync_transfer+0x16c>
    11ba:	e781      	b.n	10c0 <_i2c_m_sync_transfer+0x70>
	void *   hw      = i2c_dev->hw;
    11bc:	692f      	ldr	r7, [r5, #16]
	uint32_t timeout = 65535;
    11be:	4a2a      	ldr	r2, [pc, #168]	; (1268 <_i2c_m_sync_transfer+0x218>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    11c0:	7bbb      	ldrb	r3, [r7, #14]
    11c2:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    11c4:	0019      	movs	r1, r3
		if (timeout-- == 0) {
    11c6:	1e50      	subs	r0, r2, #1
    11c8:	2a00      	cmp	r2, #0
    11ca:	d100      	bne.n	11ce <_i2c_m_sync_transfer+0x17e>
    11cc:	e779      	b.n	10c2 <_i2c_m_sync_transfer+0x72>
    11ce:	0002      	movs	r2, r0
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    11d0:	079b      	lsls	r3, r3, #30
    11d2:	d0f5      	beq.n	11c0 <_i2c_m_sync_transfer+0x170>
	return I2C_OK;
    11d4:	2000      	movs	r0, #0
		if (ret) {
    11d6:	2800      	cmp	r0, #0
    11d8:	d000      	beq.n	11dc <_i2c_m_sync_transfer+0x18c>
    11da:	e775      	b.n	10c8 <_i2c_m_sync_transfer+0x78>
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    11dc:	8a23      	ldrh	r3, [r4, #16]
    11de:	0bdb      	lsrs	r3, r3, #15
    11e0:	d1fc      	bne.n	11dc <_i2c_m_sync_transfer+0x18c>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    11e2:	8a23      	ldrh	r3, [r4, #16]
    11e4:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
    11e6:	07ca      	lsls	r2, r1, #31
    11e8:	d5be      	bpl.n	1168 <_i2c_m_sync_transfer+0x118>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    11ea:	079a      	lsls	r2, r3, #30
    11ec:	d400      	bmi.n	11f0 <_i2c_m_sync_transfer+0x1a0>
    11ee:	e77d      	b.n	10ec <_i2c_m_sync_transfer+0x9c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    11f0:	2201      	movs	r2, #1
    11f2:	73a2      	strb	r2, [r4, #14]
			msg->flags |= I2C_M_FAIL;
    11f4:	886a      	ldrh	r2, [r5, #2]
    11f6:	2180      	movs	r1, #128	; 0x80
    11f8:	0149      	lsls	r1, r1, #5
    11fa:	430a      	orrs	r2, r1
    11fc:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    11fe:	886a      	ldrh	r2, [r5, #2]
    1200:	4918      	ldr	r1, [pc, #96]	; (1264 <_i2c_m_sync_transfer+0x214>)
    1202:	400a      	ands	r2, r1
    1204:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1206:	07db      	lsls	r3, r3, #31
    1208:	d517      	bpl.n	123a <_i2c_m_sync_transfer+0x1ea>
				return I2C_ERR_BUS;
    120a:	2005      	movs	r0, #5
    120c:	4240      	negs	r0, r0
    120e:	e7d1      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1210:	6863      	ldr	r3, [r4, #4]
    1212:	4a14      	ldr	r2, [pc, #80]	; (1264 <_i2c_m_sync_transfer+0x214>)
    1214:	4013      	ands	r3, r2
    1216:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1218:	8a23      	ldrh	r3, [r4, #16]
    121a:	0bdb      	lsrs	r3, r3, #15
    121c:	d1fc      	bne.n	1218 <_i2c_m_sync_transfer+0x1c8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    121e:	6862      	ldr	r2, [r4, #4]
    1220:	23c0      	movs	r3, #192	; 0xc0
    1222:	029b      	lsls	r3, r3, #10
    1224:	4313      	orrs	r3, r2
    1226:	6063      	str	r3, [r4, #4]
	while (((const Sercom *)hw)->I2CM.STATUS.bit.SYNCBUSY)
    1228:	8a23      	ldrh	r3, [r4, #16]
    122a:	0bdb      	lsrs	r3, r3, #15
    122c:	d1fc      	bne.n	1228 <_i2c_m_sync_transfer+0x1d8>
    122e:	e7b5      	b.n	119c <_i2c_m_sync_transfer+0x14c>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1230:	2302      	movs	r3, #2
    1232:	73a3      	strb	r3, [r4, #14]
			return I2C_NACK;
    1234:	2002      	movs	r0, #2
    1236:	4240      	negs	r0, r0
    1238:	e7bc      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
			return I2C_ERR_BAD_ADDRESS;
    123a:	2004      	movs	r0, #4
    123c:	4240      	negs	r0, r0
    123e:	e7b9      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
	return I2C_OK;
    1240:	2000      	movs	r0, #0
    1242:	e7b7      	b.n	11b4 <_i2c_m_sync_transfer+0x164>
		return I2C_ERR_BUSY;
    1244:	2006      	movs	r0, #6
    1246:	4240      	negs	r0, r0
    1248:	e73a      	b.n	10c0 <_i2c_m_sync_transfer+0x70>
    124a:	46c0      	nop			; (mov r8, r8)
    124c:	0000059b 	.word	0x0000059b
    1250:	0000371c 	.word	0x0000371c
    1254:	0000086d 	.word	0x0000086d
    1258:	0000059c 	.word	0x0000059c
    125c:	0000059d 	.word	0x0000059d
    1260:	00000d25 	.word	0x00000d25
    1264:	fffffeff 	.word	0xfffffeff
    1268:	0000ffff 	.word	0x0000ffff

0000126c <_spi_m_sync_init>:

	return NULL;
}

int32_t _spi_m_sync_init(struct _spi_m_sync_dev *dev, void *const hw)
{
    126c:	b570      	push	{r4, r5, r6, lr}
    126e:	0006      	movs	r6, r0
    1270:	000c      	movs	r4, r1
	uint8_t n = _sercom_get_hardware_index((const void *)hw_addr);
    1272:	0008      	movs	r0, r1
    1274:	4b63      	ldr	r3, [pc, #396]	; (1404 <_spi_m_sync_init+0x198>)
    1276:	4798      	blx	r3
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    1278:	2300      	movs	r3, #0
    127a:	2b01      	cmp	r3, #1
    127c:	d80d      	bhi.n	129a <_spi_m_sync_init+0x2e>
		if (sercomspi_regs[i].n == n) {
    127e:	0119      	lsls	r1, r3, #4
    1280:	4a61      	ldr	r2, [pc, #388]	; (1408 <_spi_m_sync_init+0x19c>)
    1282:	3238      	adds	r2, #56	; 0x38
    1284:	1852      	adds	r2, r2, r1
    1286:	7bd2      	ldrb	r2, [r2, #15]
    1288:	4290      	cmp	r0, r2
    128a:	d002      	beq.n	1292 <_spi_m_sync_init+0x26>
	for (i = 0; i < sizeof(sercomspi_regs) / sizeof(struct sercomspi_regs_cfg); i++) {
    128c:	3301      	adds	r3, #1
    128e:	b2db      	uxtb	r3, r3
    1290:	e7f3      	b.n	127a <_spi_m_sync_init+0xe>
			return &sercomspi_regs[i];
    1292:	4b5d      	ldr	r3, [pc, #372]	; (1408 <_spi_m_sync_init+0x19c>)
    1294:	3338      	adds	r3, #56	; 0x38
    1296:	185d      	adds	r5, r3, r1
    1298:	e000      	b.n	129c <_spi_m_sync_init+0x30>
	return NULL;
    129a:	2500      	movs	r5, #0
	const struct sercomspi_regs_cfg *regs = _spi_get_regs((uint32_t)hw);

	ASSERT(dev && hw);
    129c:	2e00      	cmp	r6, #0
    129e:	d100      	bne.n	12a2 <_spi_m_sync_init+0x36>
    12a0:	e06a      	b.n	1378 <_spi_m_sync_init+0x10c>
    12a2:	2c00      	cmp	r4, #0
    12a4:	d100      	bne.n	12a8 <_spi_m_sync_init+0x3c>
    12a6:	e065      	b.n	1374 <_spi_m_sync_init+0x108>
    12a8:	2001      	movs	r0, #1
    12aa:	4a58      	ldr	r2, [pc, #352]	; (140c <_spi_m_sync_init+0x1a0>)
    12ac:	4958      	ldr	r1, [pc, #352]	; (1410 <_spi_m_sync_init+0x1a4>)
    12ae:	4b59      	ldr	r3, [pc, #356]	; (1414 <_spi_m_sync_init+0x1a8>)
    12b0:	4798      	blx	r3

	if (regs == NULL) {
    12b2:	2d00      	cmp	r5, #0
    12b4:	d100      	bne.n	12b8 <_spi_m_sync_init+0x4c>
    12b6:	e0a2      	b.n	13fe <_spi_m_sync_init+0x192>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    12b8:	8a23      	ldrh	r3, [r4, #16]
    12ba:	0bdb      	lsrs	r3, r3, #15
    12bc:	d1fc      	bne.n	12b8 <_spi_m_sync_init+0x4c>
    12be:	8a23      	ldrh	r3, [r4, #16]
    12c0:	0bdb      	lsrs	r3, r3, #15
    12c2:	d1fc      	bne.n	12be <_spi_m_sync_init+0x52>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    12c4:	6823      	ldr	r3, [r4, #0]
		return ERR_INVALID_ARG;
	}

	hri_sercomspi_wait_for_sync(hw);
	if (hri_sercomspi_get_CTRLA_reg(hw, SERCOM_SPI_CTRLA_ENABLE)) {
    12c6:	079b      	lsls	r3, r3, #30
    12c8:	d507      	bpl.n	12da <_spi_m_sync_init+0x6e>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    12ca:	2300      	movs	r3, #0
    12cc:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    12ce:	8a23      	ldrh	r3, [r4, #16]
    12d0:	0bdb      	lsrs	r3, r3, #15
    12d2:	d1fc      	bne.n	12ce <_spi_m_sync_init+0x62>
    12d4:	8a23      	ldrh	r3, [r4, #16]
    12d6:	0bdb      	lsrs	r3, r3, #15
    12d8:	d1fc      	bne.n	12d4 <_spi_m_sync_init+0x68>
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    12da:	2301      	movs	r3, #1
    12dc:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    12de:	8a23      	ldrh	r3, [r4, #16]
    12e0:	0bdb      	lsrs	r3, r3, #15
    12e2:	d1fc      	bne.n	12de <_spi_m_sync_init+0x72>
    12e4:	8a23      	ldrh	r3, [r4, #16]
    12e6:	0bdb      	lsrs	r3, r3, #15
    12e8:	d1fc      	bne.n	12e4 <_spi_m_sync_init+0x78>
		hri_sercomspi_wait_for_sync(hw);
	}
	hri_sercomspi_write_CTRLA_reg(hw, SERCOM_SPI_CTRLA_SWRST);
	hri_sercomspi_wait_for_sync(hw);

	dev->prvt = hw;
    12ea:	6034      	str	r4, [r6, #0]

	if ((regs->ctrla & SERCOM_SPI_CTRLA_MODE_Msk) == SERCOM_USART_CTRLA_MODE_SPI_SLAVE) {
    12ec:	782b      	ldrb	r3, [r5, #0]
    12ee:	786a      	ldrb	r2, [r5, #1]
    12f0:	0212      	lsls	r2, r2, #8
    12f2:	431a      	orrs	r2, r3
    12f4:	78ab      	ldrb	r3, [r5, #2]
    12f6:	041b      	lsls	r3, r3, #16
    12f8:	431a      	orrs	r2, r3
    12fa:	78eb      	ldrb	r3, [r5, #3]
    12fc:	061b      	lsls	r3, r3, #24
    12fe:	4313      	orrs	r3, r2
    1300:	221c      	movs	r2, #28
    1302:	4013      	ands	r3, r2
    1304:	2b08      	cmp	r3, #8
    1306:	d039      	beq.n	137c <_spi_m_sync_init+0x110>
	ASSERT(hw && regs);
    1308:	2c00      	cmp	r4, #0
    130a:	d100      	bne.n	130e <_spi_m_sync_init+0xa2>
    130c:	e073      	b.n	13f6 <_spi_m_sync_init+0x18a>
    130e:	2d00      	cmp	r5, #0
    1310:	d100      	bne.n	1314 <_spi_m_sync_init+0xa8>
    1312:	e06e      	b.n	13f2 <_spi_m_sync_init+0x186>
    1314:	2001      	movs	r0, #1
    1316:	4a40      	ldr	r2, [pc, #256]	; (1418 <_spi_m_sync_init+0x1ac>)
    1318:	493d      	ldr	r1, [pc, #244]	; (1410 <_spi_m_sync_init+0x1a4>)
    131a:	4b3e      	ldr	r3, [pc, #248]	; (1414 <_spi_m_sync_init+0x1a8>)
    131c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    131e:	782b      	ldrb	r3, [r5, #0]
    1320:	786a      	ldrb	r2, [r5, #1]
    1322:	0212      	lsls	r2, r2, #8
    1324:	431a      	orrs	r2, r3
    1326:	78ab      	ldrb	r3, [r5, #2]
    1328:	041b      	lsls	r3, r3, #16
    132a:	431a      	orrs	r2, r3
    132c:	78eb      	ldrb	r3, [r5, #3]
    132e:	061b      	lsls	r3, r3, #24
    1330:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    1332:	4a3a      	ldr	r2, [pc, #232]	; (141c <_spi_m_sync_init+0x1b0>)
    1334:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    1336:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1338:	8a23      	ldrh	r3, [r4, #16]
    133a:	0bdb      	lsrs	r3, r3, #15
    133c:	d1fc      	bne.n	1338 <_spi_m_sync_init+0xcc>
	    hw, (regs->ctrlb & ~(SERCOM_SPI_CTRLB_AMODE_Msk | SERCOM_SPI_CTRLB_PLOADEN)) | (SERCOM_SPI_CTRLB_RXEN));
    133e:	792b      	ldrb	r3, [r5, #4]
    1340:	796a      	ldrb	r2, [r5, #5]
    1342:	0212      	lsls	r2, r2, #8
    1344:	431a      	orrs	r2, r3
    1346:	79ab      	ldrb	r3, [r5, #6]
    1348:	041b      	lsls	r3, r3, #16
    134a:	431a      	orrs	r2, r3
    134c:	79eb      	ldrb	r3, [r5, #7]
    134e:	061b      	lsls	r3, r3, #24
    1350:	4313      	orrs	r3, r2
    1352:	4a33      	ldr	r2, [pc, #204]	; (1420 <_spi_m_sync_init+0x1b4>)
    1354:	4013      	ands	r3, r2
	hri_sercomspi_write_CTRLB_reg(
    1356:	2280      	movs	r2, #128	; 0x80
    1358:	0292      	lsls	r2, r2, #10
    135a:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    135c:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_BAUD_reg(hw, regs->baud);
    135e:	7b2b      	ldrb	r3, [r5, #12]
	((Sercom *)hw)->SPI.BAUD.reg = data;
    1360:	72a3      	strb	r3, [r4, #10]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    1362:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    1364:	7223      	strb	r3, [r4, #8]
	} else {
		_spi_load_regs_master(hw, regs);
	}

	/* Load character size from default hardware configuration */
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    1366:	792b      	ldrb	r3, [r5, #4]
    1368:	075b      	lsls	r3, r3, #29
    136a:	d146      	bne.n	13fa <_spi_m_sync_init+0x18e>
    136c:	2301      	movs	r3, #1
    136e:	7133      	strb	r3, [r6, #4]

	return ERR_NONE;
    1370:	2000      	movs	r0, #0
}
    1372:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(dev && hw);
    1374:	2000      	movs	r0, #0
    1376:	e798      	b.n	12aa <_spi_m_sync_init+0x3e>
    1378:	2000      	movs	r0, #0
    137a:	e796      	b.n	12aa <_spi_m_sync_init+0x3e>
	ASSERT(hw && regs);
    137c:	2c00      	cmp	r4, #0
    137e:	d036      	beq.n	13ee <_spi_m_sync_init+0x182>
    1380:	2d00      	cmp	r5, #0
    1382:	d032      	beq.n	13ea <_spi_m_sync_init+0x17e>
    1384:	2001      	movs	r0, #1
    1386:	4a27      	ldr	r2, [pc, #156]	; (1424 <_spi_m_sync_init+0x1b8>)
    1388:	4921      	ldr	r1, [pc, #132]	; (1410 <_spi_m_sync_init+0x1a4>)
    138a:	4b22      	ldr	r3, [pc, #136]	; (1414 <_spi_m_sync_init+0x1a8>)
    138c:	4798      	blx	r3
	    hw, regs->ctrla & ~(SERCOM_SPI_CTRLA_IBON | SERCOM_SPI_CTRLA_ENABLE | SERCOM_SPI_CTRLA_SWRST));
    138e:	782b      	ldrb	r3, [r5, #0]
    1390:	786a      	ldrb	r2, [r5, #1]
    1392:	0212      	lsls	r2, r2, #8
    1394:	431a      	orrs	r2, r3
    1396:	78ab      	ldrb	r3, [r5, #2]
    1398:	041b      	lsls	r3, r3, #16
    139a:	431a      	orrs	r2, r3
    139c:	78eb      	ldrb	r3, [r5, #3]
    139e:	061b      	lsls	r3, r3, #24
    13a0:	4313      	orrs	r3, r2
	hri_sercomspi_write_CTRLA_reg(
    13a2:	4a1e      	ldr	r2, [pc, #120]	; (141c <_spi_m_sync_init+0x1b0>)
    13a4:	4013      	ands	r3, r2
	((Sercom *)hw)->SPI.CTRLA.reg = data;
    13a6:	6023      	str	r3, [r4, #0]
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    13a8:	8a23      	ldrh	r3, [r4, #16]
    13aa:	0bdb      	lsrs	r3, r3, #15
    13ac:	d1fc      	bne.n	13a8 <_spi_m_sync_init+0x13c>
	hri_sercomspi_write_CTRLB_reg(hw, regs->ctrlb | (SERCOM_SPI_CTRLB_RXEN | SERCOM_SPI_CTRLB_PLOADEN));
    13ae:	792b      	ldrb	r3, [r5, #4]
    13b0:	796a      	ldrb	r2, [r5, #5]
    13b2:	0212      	lsls	r2, r2, #8
    13b4:	431a      	orrs	r2, r3
    13b6:	79ab      	ldrb	r3, [r5, #6]
    13b8:	041b      	lsls	r3, r3, #16
    13ba:	431a      	orrs	r2, r3
    13bc:	79eb      	ldrb	r3, [r5, #7]
    13be:	061b      	lsls	r3, r3, #24
    13c0:	4313      	orrs	r3, r2
    13c2:	4a19      	ldr	r2, [pc, #100]	; (1428 <_spi_m_sync_init+0x1bc>)
    13c4:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.CTRLB.reg = data;
    13c6:	6063      	str	r3, [r4, #4]
	hri_sercomspi_write_ADDR_reg(hw, regs->addr);
    13c8:	7a2b      	ldrb	r3, [r5, #8]
    13ca:	7a6a      	ldrb	r2, [r5, #9]
    13cc:	0212      	lsls	r2, r2, #8
    13ce:	431a      	orrs	r2, r3
    13d0:	7aab      	ldrb	r3, [r5, #10]
    13d2:	041b      	lsls	r3, r3, #16
    13d4:	431a      	orrs	r2, r3
    13d6:	7aeb      	ldrb	r3, [r5, #11]
    13d8:	061b      	lsls	r3, r3, #24
    13da:	4313      	orrs	r3, r2
	((Sercom *)hw)->SPI.ADDR.reg = data;
    13dc:	6163      	str	r3, [r4, #20]
	hri_sercomspi_write_DBGCTRL_reg(hw, regs->dbgctrl);
    13de:	7b6b      	ldrb	r3, [r5, #13]
	((Sercom *)hw)->SPI.DBGCTRL.reg = data;
    13e0:	7223      	strb	r3, [r4, #8]
	return ((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY;
    13e2:	8a23      	ldrh	r3, [r4, #16]
    13e4:	0bdb      	lsrs	r3, r3, #15
	while (hri_sercomspi_is_syncing(hw))
    13e6:	d1fc      	bne.n	13e2 <_spi_m_sync_init+0x176>
    13e8:	e7bd      	b.n	1366 <_spi_m_sync_init+0xfa>
	ASSERT(hw && regs);
    13ea:	2000      	movs	r0, #0
    13ec:	e7cb      	b.n	1386 <_spi_m_sync_init+0x11a>
    13ee:	2000      	movs	r0, #0
    13f0:	e7c9      	b.n	1386 <_spi_m_sync_init+0x11a>
	ASSERT(hw && regs);
    13f2:	2000      	movs	r0, #0
    13f4:	e78f      	b.n	1316 <_spi_m_sync_init+0xaa>
    13f6:	2000      	movs	r0, #0
    13f8:	e78d      	b.n	1316 <_spi_m_sync_init+0xaa>
	dev->char_size = ((regs->ctrlb & SERCOM_SPI_CTRLB_CHSIZE_Msk) == 0) ? 1 : 2;
    13fa:	2302      	movs	r3, #2
    13fc:	e7b7      	b.n	136e <_spi_m_sync_init+0x102>
		return ERR_INVALID_ARG;
    13fe:	200d      	movs	r0, #13
    1400:	4240      	negs	r0, r0
    1402:	e7b6      	b.n	1372 <_spi_m_sync_init+0x106>
    1404:	00000bf9 	.word	0x00000bf9
    1408:	000036c4 	.word	0x000036c4
    140c:	000008a3 	.word	0x000008a3
    1410:	0000371c 	.word	0x0000371c
    1414:	0000086d 	.word	0x0000086d
    1418:	00000872 	.word	0x00000872
    141c:	fffffefc 	.word	0xfffffefc
    1420:	fffd3fbf 	.word	0xfffd3fbf
    1424:	00000883 	.word	0x00000883
    1428:	00020040 	.word	0x00020040

0000142c <_spi_m_sync_enable>:

	return _spi_deinit(hw);
}

int32_t _spi_m_sync_enable(struct _spi_m_sync_dev *dev)
{
    142c:	b510      	push	{r4, lr}
    142e:	1e04      	subs	r4, r0, #0
	ASSERT(dev && dev->prvt);
    1430:	d00d      	beq.n	144e <_spi_m_sync_enable+0x22>
    1432:	6803      	ldr	r3, [r0, #0]
    1434:	2b00      	cmp	r3, #0
    1436:	d008      	beq.n	144a <_spi_m_sync_enable+0x1e>
    1438:	2001      	movs	r0, #1
    143a:	4a06      	ldr	r2, [pc, #24]	; (1454 <_spi_m_sync_enable+0x28>)
    143c:	4906      	ldr	r1, [pc, #24]	; (1458 <_spi_m_sync_enable+0x2c>)
    143e:	4b07      	ldr	r3, [pc, #28]	; (145c <_spi_m_sync_enable+0x30>)
    1440:	4798      	blx	r3

	return _spi_sync_enable(dev->prvt);
    1442:	6820      	ldr	r0, [r4, #0]
    1444:	4b06      	ldr	r3, [pc, #24]	; (1460 <_spi_m_sync_enable+0x34>)
    1446:	4798      	blx	r3
}
    1448:	bd10      	pop	{r4, pc}
	ASSERT(dev && dev->prvt);
    144a:	2000      	movs	r0, #0
    144c:	e7f5      	b.n	143a <_spi_m_sync_enable+0xe>
    144e:	2000      	movs	r0, #0
    1450:	e7f3      	b.n	143a <_spi_m_sync_enable+0xe>
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	0000090a 	.word	0x0000090a
    1458:	0000371c 	.word	0x0000371c
    145c:	0000086d 	.word	0x0000086d
    1460:	00000c09 	.word	0x00000c09

00001464 <_spi_m_sync_trans>:
	ctrl->txcnt++;
	hri_sercomspi_write_DATA_reg(hw, data);
}

int32_t _spi_m_sync_trans(struct _spi_m_sync_dev *dev, const struct spi_msg *msg)
{
    1464:	b570      	push	{r4, r5, r6, lr}
    1466:	b088      	sub	sp, #32
    1468:	000d      	movs	r5, r1
	void *                 hw   = dev->prvt;
    146a:	6804      	ldr	r4, [r0, #0]
	int32_t                rc   = 0;
	struct _spi_trans_ctrl ctrl = {msg->txbuf, msg->rxbuf, 0, 0, dev->char_size};
    146c:	680b      	ldr	r3, [r1, #0]
    146e:	9303      	str	r3, [sp, #12]
    1470:	684b      	ldr	r3, [r1, #4]
    1472:	9304      	str	r3, [sp, #16]
    1474:	2300      	movs	r3, #0
    1476:	9305      	str	r3, [sp, #20]
    1478:	9306      	str	r3, [sp, #24]
    147a:	7906      	ldrb	r6, [r0, #4]

	ASSERT(dev && hw);
    147c:	2800      	cmp	r0, #0
    147e:	d014      	beq.n	14aa <_spi_m_sync_trans+0x46>
    1480:	2c00      	cmp	r4, #0
    1482:	d010      	beq.n	14a6 <_spi_m_sync_trans+0x42>
    1484:	2001      	movs	r0, #1
    1486:	4a2d      	ldr	r2, [pc, #180]	; (153c <_spi_m_sync_trans+0xd8>)
    1488:	492d      	ldr	r1, [pc, #180]	; (1540 <_spi_m_sync_trans+0xdc>)
    148a:	4b2e      	ldr	r3, [pc, #184]	; (1544 <_spi_m_sync_trans+0xe0>)
    148c:	4798      	blx	r3
    148e:	8a23      	ldrh	r3, [r4, #16]
    1490:	0bdb      	lsrs	r3, r3, #15

	/* If settings are not applied (pending), we can not go on */
	if (hri_sercomspi_is_syncing(hw)) {
    1492:	d14f      	bne.n	1534 <_spi_m_sync_trans+0xd0>
	while (((const Sercom *)hw)->SPI.STATUS.bit.SYNCBUSY)
    1494:	8a23      	ldrh	r3, [r4, #16]
    1496:	0bdb      	lsrs	r3, r3, #15
    1498:	d1fc      	bne.n	1494 <_spi_m_sync_trans+0x30>
	tmp = ((Sercom *)hw)->SPI.CTRLA.reg;
    149a:	6823      	ldr	r3, [r4, #0]
		return ERR_BUSY;
	}

	/* SPI must be enabled to start synchronous transfer */
	if (!hri_sercomspi_get_CTRLA_ENABLE_bit(hw)) {
    149c:	079b      	lsls	r3, r3, #30
    149e:	d418      	bmi.n	14d2 <_spi_m_sync_trans+0x6e>
		return ERR_NOT_INITIALIZED;
    14a0:	2014      	movs	r0, #20
    14a2:	4240      	negs	r0, r0
    14a4:	e044      	b.n	1530 <_spi_m_sync_trans+0xcc>
	ASSERT(dev && hw);
    14a6:	2000      	movs	r0, #0
    14a8:	e7ed      	b.n	1486 <_spi_m_sync_trans+0x22>
    14aa:	2000      	movs	r0, #0
    14ac:	e7eb      	b.n	1486 <_spi_m_sync_trans+0x22>
		return false;
    14ae:	2200      	movs	r2, #0
    14b0:	e026      	b.n	1500 <_spi_m_sync_trans+0x9c>
			data |= (*ctrl->txbuf) << 8;
    14b2:	7858      	ldrb	r0, [r3, #1]
    14b4:	0200      	lsls	r0, r0, #8
    14b6:	4301      	orrs	r1, r0
			ctrl->txbuf++;
    14b8:	3302      	adds	r3, #2
    14ba:	9303      	str	r3, [sp, #12]
	ctrl->txcnt++;
    14bc:	3201      	adds	r2, #1
    14be:	9205      	str	r2, [sp, #20]
	hri_sercomspi_write_DATA_reg(hw, data);
    14c0:	b289      	uxth	r1, r1
	((Sercom *)hw)->SPI.DATA.reg = data;
    14c2:	8321      	strh	r1, [r4, #24]
			if (ctrl.rxcnt >= ctrl.txcnt) {
				_spi_tx_check(hw, iflag, &ctrl);
			}
		}

		if (ctrl.txcnt >= msg->size && ctrl.rxcnt >= msg->size) {
    14c4:	9805      	ldr	r0, [sp, #20]
    14c6:	68ab      	ldr	r3, [r5, #8]
    14c8:	4298      	cmp	r0, r3
    14ca:	d302      	bcc.n	14d2 <_spi_m_sync_trans+0x6e>
    14cc:	9a06      	ldr	r2, [sp, #24]
    14ce:	4293      	cmp	r3, r2
    14d0:	d929      	bls.n	1526 <_spi_m_sync_trans+0xc2>
	return ((Sercom *)hw)->SPI.INTFLAG.reg;
    14d2:	7ba3      	ldrb	r3, [r4, #14]
    14d4:	b2db      	uxtb	r3, r3
	if (!(iflag & SERCOM_SPI_INTFLAG_RXC)) {
    14d6:	075a      	lsls	r2, r3, #29
    14d8:	d5e9      	bpl.n	14ae <_spi_m_sync_trans+0x4a>
	return ((Sercom *)hw)->SPI.DATA.reg;
    14da:	8b22      	ldrh	r2, [r4, #24]
    14dc:	b292      	uxth	r2, r2
	if (ctrl->rxbuf) {
    14de:	9904      	ldr	r1, [sp, #16]
    14e0:	2900      	cmp	r1, #0
    14e2:	d008      	beq.n	14f6 <_spi_m_sync_trans+0x92>
		*ctrl->rxbuf++ = (uint8_t)data;
    14e4:	1c48      	adds	r0, r1, #1
    14e6:	9004      	str	r0, [sp, #16]
    14e8:	700a      	strb	r2, [r1, #0]
		if (ctrl->char_size > 1) {
    14ea:	2e01      	cmp	r6, #1
    14ec:	d903      	bls.n	14f6 <_spi_m_sync_trans+0x92>
			*ctrl->rxbuf++ = (uint8_t)(data >> 8);
    14ee:	1c88      	adds	r0, r1, #2
    14f0:	9004      	str	r0, [sp, #16]
    14f2:	0a12      	lsrs	r2, r2, #8
    14f4:	704a      	strb	r2, [r1, #1]
	ctrl->rxcnt++;
    14f6:	9a06      	ldr	r2, [sp, #24]
    14f8:	9201      	str	r2, [sp, #4]
    14fa:	3201      	adds	r2, #1
    14fc:	9206      	str	r2, [sp, #24]
	return true;
    14fe:	2201      	movs	r2, #1
		if (!_spi_rx_check(hw, iflag, &ctrl)) {
    1500:	2a00      	cmp	r2, #0
    1502:	d1df      	bne.n	14c4 <_spi_m_sync_trans+0x60>
			if (ctrl.rxcnt >= ctrl.txcnt) {
    1504:	9906      	ldr	r1, [sp, #24]
    1506:	9a05      	ldr	r2, [sp, #20]
    1508:	4291      	cmp	r1, r2
    150a:	d3db      	bcc.n	14c4 <_spi_m_sync_trans+0x60>
	if (!(SERCOM_SPI_INTFLAG_DRE & iflag)) {
    150c:	07db      	lsls	r3, r3, #31
    150e:	d5d9      	bpl.n	14c4 <_spi_m_sync_trans+0x60>
	if (ctrl->txbuf) {
    1510:	9b03      	ldr	r3, [sp, #12]
    1512:	2b00      	cmp	r3, #0
    1514:	d005      	beq.n	1522 <_spi_m_sync_trans+0xbe>
		data = *ctrl->txbuf++;
    1516:	1c59      	adds	r1, r3, #1
    1518:	9103      	str	r1, [sp, #12]
    151a:	7819      	ldrb	r1, [r3, #0]
		if (ctrl->char_size > 1) {
    151c:	2e01      	cmp	r6, #1
    151e:	d8c8      	bhi.n	14b2 <_spi_m_sync_trans+0x4e>
    1520:	e7cc      	b.n	14bc <_spi_m_sync_trans+0x58>
		data = SPI_DUMMY_CHAR;
    1522:	4909      	ldr	r1, [pc, #36]	; (1548 <_spi_m_sync_trans+0xe4>)
    1524:	e7ca      	b.n	14bc <_spi_m_sync_trans+0x58>
	tmp = ((Sercom *)hw)->SPI.INTFLAG.reg;
    1526:	7ba3      	ldrb	r3, [r4, #14]
	while (!(hri_sercomspi_get_INTFLAG_reg(hw, SERCOM_SPI_INTFLAG_TXC | SERCOM_SPI_INTFLAG_DRE))) {
    1528:	079b      	lsls	r3, r3, #30
    152a:	d0fc      	beq.n	1526 <_spi_m_sync_trans+0xc2>
	((Sercom *)hw)->SPI.INTFLAG.reg = mask;
    152c:	2303      	movs	r3, #3
    152e:	73a3      	strb	r3, [r4, #14]
	}
	/* Wait until SPI bus idle */
	_spi_wait_bus_idle(hw);

	return rc;
}
    1530:	b008      	add	sp, #32
    1532:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_BUSY;
    1534:	2004      	movs	r0, #4
    1536:	4240      	negs	r0, r0
    1538:	e7fa      	b.n	1530 <_spi_m_sync_trans+0xcc>
    153a:	46c0      	nop			; (mov r8, r8)
    153c:	00000a01 	.word	0x00000a01
    1540:	0000371c 	.word	0x0000371c
    1544:	0000086d 	.word	0x0000086d
    1548:	000001ff 	.word	0x000001ff

0000154c <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    154c:	4b0f      	ldr	r3, [pc, #60]	; (158c <_sysctrl_init_sources+0x40>)
    154e:	6a19      	ldr	r1, [r3, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    1550:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    1552:	6a1a      	ldr	r2, [r3, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    1554:	0f92      	lsrs	r2, r2, #30
    1556:	0792      	lsls	r2, r2, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    1558:	0409      	lsls	r1, r1, #16
    155a:	480d      	ldr	r0, [pc, #52]	; (1590 <_sysctrl_init_sources+0x44>)
    155c:	4001      	ands	r1, r0
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    155e:	430a      	orrs	r2, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    1560:	490c      	ldr	r1, [pc, #48]	; (1594 <_sysctrl_init_sources+0x48>)
    1562:	430a      	orrs	r2, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    1564:	621a      	str	r2, [r3, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1566:	699a      	ldr	r2, [r3, #24]
    1568:	2102      	movs	r1, #2
    156a:	430a      	orrs	r2, r1
    156c:	619a      	str	r2, [r3, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    156e:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    1570:	311d      	adds	r1, #29
    1572:	400a      	ands	r2, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1574:	771a      	strb	r2, [r3, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    1576:	4b05      	ldr	r3, [pc, #20]	; (158c <_sysctrl_init_sources+0x40>)
    1578:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    157a:	071b      	lsls	r3, r3, #28
    157c:	d5fb      	bpl.n	1576 <_sysctrl_init_sources+0x2a>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    157e:	4a03      	ldr	r2, [pc, #12]	; (158c <_sysctrl_init_sources+0x40>)
    1580:	6a13      	ldr	r3, [r2, #32]
    1582:	2180      	movs	r1, #128	; 0x80
    1584:	430b      	orrs	r3, r1
    1586:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1588:	4770      	bx	lr
    158a:	46c0      	nop			; (mov r8, r8)
    158c:	40000800 	.word	0x40000800
    1590:	0fff0000 	.word	0x0fff0000
    1594:	00000302 	.word	0x00000302

00001598 <_sysctrl_init_referenced_generators>:
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1598:	2202      	movs	r2, #2
    159a:	4b1b      	ldr	r3, [pc, #108]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    159c:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    159e:	4b1a      	ldr	r3, [pc, #104]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    15a0:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    15a2:	06db      	lsls	r3, r3, #27
    15a4:	d5fb      	bpl.n	159e <_sysctrl_init_referenced_generators+0x6>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    15a6:	4a19      	ldr	r2, [pc, #100]	; (160c <_sysctrl_init_referenced_generators+0x74>)
    15a8:	4b17      	ldr	r3, [pc, #92]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    15aa:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    15ac:	4b18      	ldr	r3, [pc, #96]	; (1610 <_sysctrl_init_referenced_generators+0x78>)
    15ae:	681b      	ldr	r3, [r3, #0]
    15b0:	0e9b      	lsrs	r3, r3, #26
    15b2:	2b3f      	cmp	r3, #63	; 0x3f
    15b4:	d020      	beq.n	15f8 <_sysctrl_init_referenced_generators+0x60>
    15b6:	029b      	lsls	r3, r3, #10
    15b8:	2280      	movs	r2, #128	; 0x80
    15ba:	0092      	lsls	r2, r2, #2
    15bc:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    15be:	4a12      	ldr	r2, [pc, #72]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    15c0:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    15c2:	2302      	movs	r3, #2
    15c4:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    15c6:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	hri_sysctrl_write_DFLLCTRL_reg(hw, tmp);
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    15c8:	075b      	lsls	r3, r3, #29
    15ca:	d518      	bpl.n	15fe <_sysctrl_init_referenced_generators+0x66>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    15cc:	4b0e      	ldr	r3, [pc, #56]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    15ce:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    15d0:	23d0      	movs	r3, #208	; 0xd0
    15d2:	4013      	ands	r3, r2
		hri_sysctrl_pclksr_reg_t status_mask
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    15d4:	2bd0      	cmp	r3, #208	; 0xd0
    15d6:	d1f9      	bne.n	15cc <_sysctrl_init_referenced_generators+0x34>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    15d8:	4a0b      	ldr	r2, [pc, #44]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    15da:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    15dc:	2180      	movs	r1, #128	; 0x80
    15de:	430b      	orrs	r3, r1
    15e0:	b29b      	uxth	r3, r3
    15e2:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    15e4:	4b0b      	ldr	r3, [pc, #44]	; (1614 <_sysctrl_init_referenced_generators+0x7c>)
    15e6:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DFLLCTRL_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    15e8:	09db      	lsrs	r3, r3, #7
    15ea:	d1fb      	bne.n	15e4 <_sysctrl_init_referenced_generators+0x4c>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    15ec:	4a06      	ldr	r2, [pc, #24]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    15ee:	6993      	ldr	r3, [r2, #24]
    15f0:	2102      	movs	r1, #2
    15f2:	438b      	bics	r3, r1
    15f4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    15f6:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    15f8:	23fc      	movs	r3, #252	; 0xfc
    15fa:	01db      	lsls	r3, r3, #7
    15fc:	e7df      	b.n	15be <_sysctrl_init_referenced_generators+0x26>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    15fe:	4b02      	ldr	r3, [pc, #8]	; (1608 <_sysctrl_init_referenced_generators+0x70>)
    1600:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    1602:	06db      	lsls	r3, r3, #27
    1604:	d5fb      	bpl.n	15fe <_sysctrl_init_referenced_generators+0x66>
    1606:	e7e7      	b.n	15d8 <_sysctrl_init_referenced_generators+0x40>
    1608:	40000800 	.word	0x40000800
    160c:	04010000 	.word	0x04010000
    1610:	00806024 	.word	0x00806024
    1614:	40000c00 	.word	0x40000c00

00001618 <tc_pwm_interrupt_handler>:
 * \internal TC interrupt handler for PWM
 *
 * \param[in] instance TC instance number
 */
static void tc_pwm_interrupt_handler(struct _pwm_device *device)
{
    1618:	b570      	push	{r4, r5, r6, lr}
    161a:	0005      	movs	r5, r0
	void *const hw = device->hw;
    161c:	6904      	ldr	r4, [r0, #16]
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_MC1;
}

static inline bool hri_tc_get_interrupt_OVF_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTFLAG.reg & TC_INTFLAG_OVF) >> TC_INTFLAG_OVF_Pos;
    161e:	7ba3      	ldrb	r3, [r4, #14]

	if (hri_tc_get_interrupt_OVF_bit(hw)) {
    1620:	07db      	lsls	r3, r3, #31
    1622:	d505      	bpl.n	1630 <tc_pwm_interrupt_handler+0x18>
}

static inline void hri_tc_clear_interrupt_OVF_bit(const void *const hw)
{
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1624:	2301      	movs	r3, #1
    1626:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_OVF_bit(hw);
		if (NULL != device->callback.pwm_period_cb) {
    1628:	6803      	ldr	r3, [r0, #0]
    162a:	2b00      	cmp	r3, #0
    162c:	d000      	beq.n	1630 <tc_pwm_interrupt_handler+0x18>
			device->callback.pwm_period_cb(device);
    162e:	4798      	blx	r3
	((Tc *)hw)->COUNT16.INTENSET.reg = TC_INTENSET_ERR;
}

static inline bool hri_tc_get_INTEN_ERR_bit(const void *const hw)
{
	return (((Tc *)hw)->COUNT16.INTENSET.reg & TC_INTENSET_ERR) >> TC_INTENSET_ERR_Pos;
    1630:	7b63      	ldrb	r3, [r4, #13]
		}
	}
	if (hri_tc_get_INTEN_ERR_bit(hw)) {
    1632:	079b      	lsls	r3, r3, #30
    1634:	d506      	bpl.n	1644 <tc_pwm_interrupt_handler+0x2c>
	((Tc *)hw)->COUNT16.INTFLAG.reg = TC_INTFLAG_ERR;
    1636:	2302      	movs	r3, #2
    1638:	73a3      	strb	r3, [r4, #14]
		hri_tc_clear_interrupt_ERR_bit(hw);
		if (NULL != device->callback.pwm_error_cb) {
    163a:	686b      	ldr	r3, [r5, #4]
    163c:	2b00      	cmp	r3, #0
    163e:	d001      	beq.n	1644 <tc_pwm_interrupt_handler+0x2c>
			device->callback.pwm_error_cb(device);
    1640:	0028      	movs	r0, r5
    1642:	4798      	blx	r3
		}
	}
}
    1644:	bd70      	pop	{r4, r5, r6, pc}
	...

00001648 <tc_get_hardware_index>:
 * \param[in] hw The pointer to hardware instance
 */
static uint8_t tc_get_hardware_index(const void *const hw)
{
#ifndef _UNIT_TEST_
	return ((uint32_t)hw - TC_HW_BASE_ADDR) >> 10;
    1648:	4b02      	ldr	r3, [pc, #8]	; (1654 <tc_get_hardware_index+0xc>)
    164a:	469c      	mov	ip, r3
    164c:	4460      	add	r0, ip
    164e:	0a80      	lsrs	r0, r0, #10
    1650:	b2c0      	uxtb	r0, r0
#else
	return ((uint32_t)hw - TC_HW_BASE_ADDR) / sizeof(Tc);
#endif
}
    1652:	4770      	bx	lr
    1654:	bdffe000 	.word	0xbdffe000

00001658 <_tc_init_irq_param>:
/**
 * \brief Init irq param with the given tc hardware instance
 */
static void _tc_init_irq_param(const void *const hw, void *dev)
{
	if (hw == TC6) {
    1658:	4b06      	ldr	r3, [pc, #24]	; (1674 <_tc_init_irq_param+0x1c>)
    165a:	4298      	cmp	r0, r3
    165c:	d003      	beq.n	1666 <_tc_init_irq_param+0xe>
		_tc6_dev = (struct _pwm_device *)dev;
	}
	if (hw == TC7) {
    165e:	4b06      	ldr	r3, [pc, #24]	; (1678 <_tc_init_irq_param+0x20>)
    1660:	4298      	cmp	r0, r3
    1662:	d003      	beq.n	166c <_tc_init_irq_param+0x14>
		_tc7_dev = (struct _pwm_device *)dev;
	}
}
    1664:	4770      	bx	lr
		_tc6_dev = (struct _pwm_device *)dev;
    1666:	4b05      	ldr	r3, [pc, #20]	; (167c <_tc_init_irq_param+0x24>)
    1668:	6019      	str	r1, [r3, #0]
    166a:	e7f8      	b.n	165e <_tc_init_irq_param+0x6>
		_tc7_dev = (struct _pwm_device *)dev;
    166c:	4b03      	ldr	r3, [pc, #12]	; (167c <_tc_init_irq_param+0x24>)
    166e:	6059      	str	r1, [r3, #4]
}
    1670:	e7f8      	b.n	1664 <_tc_init_irq_param+0xc>
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	42003800 	.word	0x42003800
    1678:	42003c00 	.word	0x42003c00
    167c:	2000011c 	.word	0x2000011c

00001680 <get_tc_index>:
{
    1680:	b510      	push	{r4, lr}
	uint8_t tc_offset = tc_get_hardware_index(hw) + TC_NUMBER_OFFSET;
    1682:	4b0d      	ldr	r3, [pc, #52]	; (16b8 <get_tc_index+0x38>)
    1684:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    1686:	2300      	movs	r3, #0
    1688:	2b01      	cmp	r3, #1
    168a:	d80b      	bhi.n	16a4 <get_tc_index+0x24>
		if (_tcs[i].number == tc_offset) {
    168c:	009a      	lsls	r2, r3, #2
    168e:	18d2      	adds	r2, r2, r3
    1690:	0091      	lsls	r1, r2, #2
    1692:	4a0a      	ldr	r2, [pc, #40]	; (16bc <get_tc_index+0x3c>)
    1694:	5c8a      	ldrb	r2, [r1, r2]
    1696:	4290      	cmp	r0, r2
    1698:	d002      	beq.n	16a0 <get_tc_index+0x20>
	for (i = 0; i < ARRAY_SIZE(_tcs); i++) {
    169a:	3301      	adds	r3, #1
    169c:	b2db      	uxtb	r3, r3
    169e:	e7f3      	b.n	1688 <get_tc_index+0x8>
			return i;
    16a0:	b258      	sxtb	r0, r3
    16a2:	e007      	b.n	16b4 <get_tc_index+0x34>
	ASSERT(false);
    16a4:	2276      	movs	r2, #118	; 0x76
    16a6:	32ff      	adds	r2, #255	; 0xff
    16a8:	4905      	ldr	r1, [pc, #20]	; (16c0 <get_tc_index+0x40>)
    16aa:	2000      	movs	r0, #0
    16ac:	4b05      	ldr	r3, [pc, #20]	; (16c4 <get_tc_index+0x44>)
    16ae:	4798      	blx	r3
	return -1;
    16b0:	2001      	movs	r0, #1
    16b2:	4240      	negs	r0, r0
}
    16b4:	bd10      	pop	{r4, pc}
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	00001649 	.word	0x00001649
    16bc:	20000000 	.word	0x20000000
    16c0:	00003738 	.word	0x00003738
    16c4:	0000086d 	.word	0x0000086d

000016c8 <_pwm_init>:
{
    16c8:	b570      	push	{r4, r5, r6, lr}
    16ca:	0005      	movs	r5, r0
    16cc:	000c      	movs	r4, r1
	int8_t i   = get_tc_index(hw);
    16ce:	0008      	movs	r0, r1
    16d0:	4b35      	ldr	r3, [pc, #212]	; (17a8 <_pwm_init+0xe0>)
    16d2:	4798      	blx	r3
	device->hw = hw;
    16d4:	612c      	str	r4, [r5, #16]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    16d6:	7be3      	ldrb	r3, [r4, #15]
    16d8:	09db      	lsrs	r3, r3, #7
    16da:	d1fc      	bne.n	16d6 <_pwm_init+0xe>
}

static inline hri_tc_ctrla_reg_t hri_tc_get_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t mask)
{
	uint16_t tmp;
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    16dc:	8823      	ldrh	r3, [r4, #0]
	if (hri_tc_get_CTRLA_reg(hw, TC_CTRLA_ENABLE)) {
    16de:	079b      	lsls	r3, r3, #30
    16e0:	d504      	bpl.n	16ec <_pwm_init+0x24>
}

static inline void hri_tc_write_CTRLA_reg(const void *const hw, hri_tc_ctrla_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    16e2:	2300      	movs	r3, #0
    16e4:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    16e6:	7be3      	ldrb	r3, [r4, #15]
    16e8:	09db      	lsrs	r3, r3, #7
    16ea:	d1fc      	bne.n	16e6 <_pwm_init+0x1e>
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    16ec:	2301      	movs	r3, #1
    16ee:	8023      	strh	r3, [r4, #0]
	while (((const Tc *)hw)->COUNT16.STATUS.bit.SYNCBUSY)
    16f0:	7be3      	ldrb	r3, [r4, #15]
    16f2:	09db      	lsrs	r3, r3, #7
    16f4:	d1fc      	bne.n	16f0 <_pwm_init+0x28>
	hri_tc_write_CTRLA_reg(hw, _tcs[i].ctrl_a);
    16f6:	0082      	lsls	r2, r0, #2
    16f8:	1812      	adds	r2, r2, r0
    16fa:	0091      	lsls	r1, r2, #2
    16fc:	4b2b      	ldr	r3, [pc, #172]	; (17ac <_pwm_init+0xe4>)
    16fe:	185b      	adds	r3, r3, r1
    1700:	885a      	ldrh	r2, [r3, #2]
	((Tc *)hw)->COUNT16.CTRLA.reg = data;
    1702:	8022      	strh	r2, [r4, #0]
	hri_tc_write_DBGCTRL_reg(hw, _tcs[i].dbg_ctrl);
    1704:	7919      	ldrb	r1, [r3, #4]
}

static inline void hri_tc_write_DBGCTRL_reg(const void *const hw, hri_tc_dbgctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.DBGCTRL.reg = data;
    1706:	7221      	strb	r1, [r4, #8]
	hri_tc_write_EVCTRL_reg(hw, _tcs[i].event_ctrl);
    1708:	88db      	ldrh	r3, [r3, #6]
}

static inline void hri_tc_write_EVCTRL_reg(const void *const hw, hri_tc_evctrl_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.EVCTRL.reg = data;
    170a:	8163      	strh	r3, [r4, #10]
    170c:	230c      	movs	r3, #12
    170e:	4013      	ands	r3, r2
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    1710:	2b08      	cmp	r3, #8
    1712:	d037      	beq.n	1784 <_pwm_init+0xbc>
	} else if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT16) {
    1714:	2b00      	cmp	r3, #0
    1716:	d141      	bne.n	179c <_pwm_init+0xd4>
		hri_tccount16_write_CC_reg(hw, 0, (hri_tccount16_cc_reg_t)_tcs[i].cc0);
    1718:	4a24      	ldr	r2, [pc, #144]	; (17ac <_pwm_init+0xe4>)
    171a:	0083      	lsls	r3, r0, #2
    171c:	181e      	adds	r6, r3, r0
    171e:	00b1      	lsls	r1, r6, #2
    1720:	000e      	movs	r6, r1
    1722:	1851      	adds	r1, r2, r1
    1724:	8989      	ldrh	r1, [r1, #12]
}

static inline void hri_tccount16_write_CC_reg(const void *const hw, uint8_t index, hri_tccount16_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1726:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, (hri_tccount16_cc_reg_t)_tcs[i].cc1);
    1728:	1992      	adds	r2, r2, r6
    172a:	8a13      	ldrh	r3, [r2, #16]
    172c:	8363      	strh	r3, [r4, #26]
	_tc_init_irq_param(hw, (void *)device);
    172e:	0029      	movs	r1, r5
    1730:	0020      	movs	r0, r4
    1732:	4b1f      	ldr	r3, [pc, #124]	; (17b0 <_pwm_init+0xe8>)
    1734:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)((uint8_t)TC_IRQ_BASE_INDEX + tc_get_hardware_index(hw)));
    1736:	0020      	movs	r0, r4
    1738:	4b1e      	ldr	r3, [pc, #120]	; (17b4 <_pwm_init+0xec>)
    173a:	4798      	blx	r3
    173c:	300d      	adds	r0, #13
    173e:	b2c0      	uxtb	r0, r0
    1740:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1742:	2b00      	cmp	r3, #0
    1744:	db0a      	blt.n	175c <_pwm_init+0x94>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1746:	211f      	movs	r1, #31
    1748:	4001      	ands	r1, r0
    174a:	2201      	movs	r2, #1
    174c:	408a      	lsls	r2, r1
    174e:	2180      	movs	r1, #128	; 0x80
    1750:	4c19      	ldr	r4, [pc, #100]	; (17b8 <_pwm_init+0xf0>)
    1752:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
    1754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1758:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    175c:	2b00      	cmp	r3, #0
    175e:	db07      	blt.n	1770 <_pwm_init+0xa8>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1760:	211f      	movs	r1, #31
    1762:	4001      	ands	r1, r0
    1764:	2201      	movs	r2, #1
    1766:	408a      	lsls	r2, r1
    1768:	21c0      	movs	r1, #192	; 0xc0
    176a:	0049      	lsls	r1, r1, #1
    176c:	4c12      	ldr	r4, [pc, #72]	; (17b8 <_pwm_init+0xf0>)
    176e:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
    1770:	2b00      	cmp	r3, #0
    1772:	db16      	blt.n	17a2 <_pwm_init+0xda>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1774:	231f      	movs	r3, #31
    1776:	4018      	ands	r0, r3
    1778:	3b1e      	subs	r3, #30
    177a:	4083      	lsls	r3, r0
    177c:	4a0e      	ldr	r2, [pc, #56]	; (17b8 <_pwm_init+0xf0>)
    177e:	6013      	str	r3, [r2, #0]
	return ERR_NONE;
    1780:	2000      	movs	r0, #0
}
    1782:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    1784:	4a09      	ldr	r2, [pc, #36]	; (17ac <_pwm_init+0xe4>)
    1786:	0083      	lsls	r3, r0, #2
    1788:	181e      	adds	r6, r3, r0
    178a:	00b1      	lsls	r1, r6, #2
    178c:	000e      	movs	r6, r1
    178e:	1851      	adds	r1, r2, r1
    1790:	68c9      	ldr	r1, [r1, #12]
}

static inline void hri_tccount32_write_CC_reg(const void *const hw, uint8_t index, hri_tccount32_cc_reg_t data)
{
	TC_CRITICAL_SECTION_ENTER();
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1792:	61a1      	str	r1, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1794:	1992      	adds	r2, r2, r6
    1796:	6913      	ldr	r3, [r2, #16]
    1798:	61e3      	str	r3, [r4, #28]
    179a:	e7c8      	b.n	172e <_pwm_init+0x66>
		return ERR_INVALID_DATA;
    179c:	2001      	movs	r0, #1
    179e:	4240      	negs	r0, r0
    17a0:	e7ef      	b.n	1782 <_pwm_init+0xba>
	return ERR_NONE;
    17a2:	2000      	movs	r0, #0
    17a4:	e7ed      	b.n	1782 <_pwm_init+0xba>
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	00001681 	.word	0x00001681
    17ac:	20000000 	.word	0x20000000
    17b0:	00001659 	.word	0x00001659
    17b4:	00001649 	.word	0x00001649
    17b8:	e000e100 	.word	0xe000e100

000017bc <_pwm_enable>:
	hri_tc_set_CTRLA_ENABLE_bit(device->hw);
    17bc:	6902      	ldr	r2, [r0, #16]
	((Tc *)hw)->COUNT16.CTRLA.reg |= TC_CTRLA_ENABLE;
    17be:	8813      	ldrh	r3, [r2, #0]
    17c0:	2102      	movs	r1, #2
    17c2:	430b      	orrs	r3, r1
    17c4:	b29b      	uxth	r3, r3
    17c6:	8013      	strh	r3, [r2, #0]
}
    17c8:	4770      	bx	lr
	...

000017cc <_pwm_set_param>:
{
    17cc:	b570      	push	{r4, r5, r6, lr}
    17ce:	0004      	movs	r4, r0
    17d0:	000e      	movs	r6, r1
    17d2:	0015      	movs	r5, r2
	int8_t      i  = get_tc_index(device->hw);
    17d4:	6900      	ldr	r0, [r0, #16]
    17d6:	4b11      	ldr	r3, [pc, #68]	; (181c <_pwm_set_param+0x50>)
    17d8:	4798      	blx	r3
	void *const hw = device->hw;
    17da:	6924      	ldr	r4, [r4, #16]
	_tcs[i].cc0    = period;
    17dc:	0082      	lsls	r2, r0, #2
    17de:	1812      	adds	r2, r2, r0
    17e0:	0091      	lsls	r1, r2, #2
    17e2:	4b0f      	ldr	r3, [pc, #60]	; (1820 <_pwm_set_param+0x54>)
    17e4:	185b      	adds	r3, r3, r1
    17e6:	60de      	str	r6, [r3, #12]
	_tcs[i].cc1    = duty_cycle;
    17e8:	611d      	str	r5, [r3, #16]
	if ((_tcs[i].ctrl_a & TC_CTRLA_MODE_Msk) == TC_CTRLA_MODE_COUNT32) {
    17ea:	885a      	ldrh	r2, [r3, #2]
    17ec:	230c      	movs	r3, #12
    17ee:	4013      	ands	r3, r2
    17f0:	2b08      	cmp	r3, #8
    17f2:	d00b      	beq.n	180c <_pwm_set_param+0x40>
		hri_tccount16_write_CC_reg(hw, 0, _tcs[i].cc0);
    17f4:	4a0a      	ldr	r2, [pc, #40]	; (1820 <_pwm_set_param+0x54>)
    17f6:	0083      	lsls	r3, r0, #2
    17f8:	181d      	adds	r5, r3, r0
    17fa:	00a9      	lsls	r1, r5, #2
    17fc:	000d      	movs	r5, r1
    17fe:	1851      	adds	r1, r2, r1
    1800:	8989      	ldrh	r1, [r1, #12]
	((Tc *)hw)->COUNT16.CC[index].reg = data;
    1802:	8321      	strh	r1, [r4, #24]
		hri_tccount16_write_CC_reg(hw, 1, _tcs[i].cc1);
    1804:	1952      	adds	r2, r2, r5
    1806:	8a13      	ldrh	r3, [r2, #16]
    1808:	8363      	strh	r3, [r4, #26]
}
    180a:	bd70      	pop	{r4, r5, r6, pc}
		hri_tccount32_write_CC_reg(hw, 0, _tcs[i].cc0);
    180c:	4a04      	ldr	r2, [pc, #16]	; (1820 <_pwm_set_param+0x54>)
    180e:	000d      	movs	r5, r1
	((Tc *)hw)->COUNT32.CC[index].reg = data;
    1810:	61a6      	str	r6, [r4, #24]
		hri_tccount32_write_CC_reg(hw, 1, _tcs[i].cc1);
    1812:	1952      	adds	r2, r2, r5
    1814:	6913      	ldr	r3, [r2, #16]
    1816:	61e3      	str	r3, [r4, #28]
    1818:	e7f7      	b.n	180a <_pwm_set_param+0x3e>
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	00001681 	.word	0x00001681
    1820:	20000000 	.word	0x20000000

00001824 <_pwm_is_enabled>:
	return hri_tc_get_CTRLA_ENABLE_bit(device->hw);
    1824:	6903      	ldr	r3, [r0, #16]
	tmp = ((Tc *)hw)->COUNT16.CTRLA.reg;
    1826:	881b      	ldrh	r3, [r3, #0]
	tmp = (tmp & TC_CTRLA_ENABLE) >> TC_CTRLA_ENABLE_Pos;
    1828:	085b      	lsrs	r3, r3, #1
	return (bool)tmp;
    182a:	2001      	movs	r0, #1
    182c:	4018      	ands	r0, r3
}
    182e:	4770      	bx	lr

00001830 <_tc_get_pwm>:
}
    1830:	2000      	movs	r0, #0
    1832:	4770      	bx	lr

00001834 <TC6_Handler>:
{
    1834:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc6_dev);
    1836:	4b02      	ldr	r3, [pc, #8]	; (1840 <TC6_Handler+0xc>)
    1838:	6818      	ldr	r0, [r3, #0]
    183a:	4b02      	ldr	r3, [pc, #8]	; (1844 <TC6_Handler+0x10>)
    183c:	4798      	blx	r3
}
    183e:	bd10      	pop	{r4, pc}
    1840:	2000011c 	.word	0x2000011c
    1844:	00001619 	.word	0x00001619

00001848 <TC7_Handler>:
{
    1848:	b510      	push	{r4, lr}
	tc_pwm_interrupt_handler(_tc7_dev);
    184a:	4b02      	ldr	r3, [pc, #8]	; (1854 <TC7_Handler+0xc>)
    184c:	6858      	ldr	r0, [r3, #4]
    184e:	4b02      	ldr	r3, [pc, #8]	; (1858 <TC7_Handler+0x10>)
    1850:	4798      	blx	r3
}
    1852:	bd10      	pop	{r4, pc}
    1854:	2000011c 	.word	0x2000011c
    1858:	00001619 	.word	0x00001619

0000185c <ETH_Handler>:
	ext_irq_register(ETH_INT, ETH_Handler);
}

static void ETH_Handler(void){

}
    185c:	4770      	bx	lr
	...

00001860 <gpio_init>:

void gpio_init(void){
    1860:	b5f0      	push	{r4, r5, r6, r7, lr}
    1862:	46de      	mov	lr, fp
    1864:	4657      	mov	r7, sl
    1866:	464e      	mov	r6, r9
    1868:	4645      	mov	r5, r8
    186a:	b5e0      	push	{r5, r6, r7, lr}
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    186c:	22c0      	movs	r2, #192	; 0xc0
    186e:	05d2      	lsls	r2, r2, #23
    1870:	2380      	movs	r3, #128	; 0x80
    1872:	469c      	mov	ip, r3
    1874:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1876:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1878:	4b7d      	ldr	r3, [pc, #500]	; (1a70 <gpio_init+0x210>)
    187a:	497e      	ldr	r1, [pc, #504]	; (1a74 <gpio_init+0x214>)
    187c:	6299      	str	r1, [r3, #40]	; 0x28
    187e:	25c0      	movs	r5, #192	; 0xc0
    1880:	062d      	lsls	r5, r5, #24
    1882:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1884:	2447      	movs	r4, #71	; 0x47
    1886:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1888:	2101      	movs	r1, #1
    188a:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    188c:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    188e:	2080      	movs	r0, #128	; 0x80
    1890:	0040      	lsls	r0, r0, #1
    1892:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1894:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1896:	4878      	ldr	r0, [pc, #480]	; (1a78 <gpio_init+0x218>)
    1898:	6298      	str	r0, [r3, #40]	; 0x28
    189a:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    189c:	3401      	adds	r4, #1
    189e:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    18a0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18a2:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    18a4:	2780      	movs	r7, #128	; 0x80
    18a6:	00bf      	lsls	r7, r7, #2
    18a8:	6157      	str	r7, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    18aa:	6097      	str	r7, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18ac:	4873      	ldr	r0, [pc, #460]	; (1a7c <gpio_init+0x21c>)
    18ae:	4682      	mov	sl, r0
    18b0:	6298      	str	r0, [r3, #40]	; 0x28
    18b2:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18b4:	3401      	adds	r4, #1
    18b6:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    18b8:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18ba:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    18bc:	2080      	movs	r0, #128	; 0x80
    18be:	00c0      	lsls	r0, r0, #3
    18c0:	4680      	mov	r8, r0
    18c2:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    18c4:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18c6:	486e      	ldr	r0, [pc, #440]	; (1a80 <gpio_init+0x220>)
    18c8:	6298      	str	r0, [r3, #40]	; 0x28
    18ca:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18cc:	3401      	adds	r4, #1
    18ce:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    18d0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18d2:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    18d4:	2080      	movs	r0, #128	; 0x80
    18d6:	0100      	lsls	r0, r0, #4
    18d8:	6050      	str	r0, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18da:	486a      	ldr	r0, [pc, #424]	; (1a84 <gpio_init+0x224>)
    18dc:	6298      	str	r0, [r3, #40]	; 0x28
    18de:	486a      	ldr	r0, [pc, #424]	; (1a88 <gpio_init+0x228>)
    18e0:	6298      	str	r0, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    18e2:	264b      	movs	r6, #75	; 0x4b
    18e4:	5d98      	ldrb	r0, [r3, r6]
    18e6:	4681      	mov	r9, r0
    18e8:	2004      	movs	r0, #4
    18ea:	464c      	mov	r4, r9
    18ec:	4384      	bics	r4, r0
    18ee:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    18f0:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    18f2:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    18f4:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    18f6:	2680      	movs	r6, #128	; 0x80
    18f8:	0236      	lsls	r6, r6, #8
    18fa:	6196      	str	r6, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    18fc:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    18fe:	4e63      	ldr	r6, [pc, #396]	; (1a8c <gpio_init+0x22c>)
    1900:	629e      	str	r6, [r3, #40]	; 0x28
    1902:	629d      	str	r5, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1904:	244f      	movs	r4, #79	; 0x4f
    1906:	5d1e      	ldrb	r6, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1908:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    190a:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    190c:	2680      	movs	r6, #128	; 0x80
    190e:	0436      	lsls	r6, r6, #16
    1910:	6156      	str	r6, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1912:	6096      	str	r6, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1914:	2480      	movs	r4, #128	; 0x80
    1916:	05e4      	lsls	r4, r4, #23
    1918:	629c      	str	r4, [r3, #40]	; 0x28
    191a:	4c5d      	ldr	r4, [pc, #372]	; (1a90 <gpio_init+0x230>)
    191c:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    191e:	2457      	movs	r4, #87	; 0x57
    1920:	46a3      	mov	fp, r4
    1922:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1924:	438c      	bics	r4, r1
    1926:	46a1      	mov	r9, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1928:	465c      	mov	r4, fp
    192a:	464e      	mov	r6, r9
    192c:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    192e:	3441      	adds	r4, #65	; 0x41
    1930:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1932:	3c10      	subs	r4, #16
    1934:	5117      	str	r7, [r2, r4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1936:	3f59      	subs	r7, #89	; 0x59
    1938:	3fff      	subs	r7, #255	; 0xff
    193a:	4654      	mov	r4, sl
    193c:	51dc      	str	r4, [r3, r7]
    193e:	51dd      	str	r5, [r3, r7]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1940:	24c9      	movs	r4, #201	; 0xc9
    1942:	5d1d      	ldrb	r5, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1944:	438d      	bics	r5, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1946:	551d      	strb	r5, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1948:	2584      	movs	r5, #132	; 0x84
    194a:	4644      	mov	r4, r8
    194c:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    194e:	4c51      	ldr	r4, [pc, #324]	; (1a94 <gpio_init+0x234>)
    1950:	51dc      	str	r4, [r3, r7]
    1952:	4c4d      	ldr	r4, [pc, #308]	; (1a88 <gpio_init+0x228>)
    1954:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1956:	24ca      	movs	r4, #202	; 0xca
    1958:	46a0      	mov	r8, r4
    195a:	5d1c      	ldrb	r4, [r3, r4]
    195c:	4384      	bics	r4, r0
    195e:	46a1      	mov	r9, r4
    1960:	4644      	mov	r4, r8
    1962:	464e      	mov	r6, r9
    1964:	551e      	strb	r6, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1966:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1968:	438c      	bics	r4, r1
    196a:	46a1      	mov	r9, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    196c:	4644      	mov	r4, r8
    196e:	464e      	mov	r6, r9
    1970:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1972:	2480      	movs	r4, #128	; 0x80
    1974:	0124      	lsls	r4, r4, #4
    1976:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1978:	4c42      	ldr	r4, [pc, #264]	; (1a84 <gpio_init+0x224>)
    197a:	51dc      	str	r4, [r3, r7]
    197c:	4c42      	ldr	r4, [pc, #264]	; (1a88 <gpio_init+0x228>)
    197e:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1980:	24cb      	movs	r4, #203	; 0xcb
    1982:	46a0      	mov	r8, r4
    1984:	5d1c      	ldrb	r4, [r3, r4]
    1986:	4384      	bics	r4, r0
    1988:	46a1      	mov	r9, r4
    198a:	4644      	mov	r4, r8
    198c:	464e      	mov	r6, r9
    198e:	551e      	strb	r6, [r3, r4]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1990:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1992:	438c      	bics	r4, r1
    1994:	46a1      	mov	r9, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1996:	4644      	mov	r4, r8
    1998:	464e      	mov	r6, r9
    199a:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    199c:	2480      	movs	r4, #128	; 0x80
    199e:	03e4      	lsls	r4, r4, #15
    19a0:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    19a2:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19a4:	2480      	movs	r4, #128	; 0x80
    19a6:	05e4      	lsls	r4, r4, #23
    19a8:	629c      	str	r4, [r3, #40]	; 0x28
    19aa:	4c3b      	ldr	r4, [pc, #236]	; (1a98 <gpio_init+0x238>)
    19ac:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    19ae:	2456      	movs	r4, #86	; 0x56
    19b0:	46a1      	mov	r9, r4
    19b2:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    19b4:	438c      	bics	r4, r1
    19b6:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    19b8:	464c      	mov	r4, r9
    19ba:	4646      	mov	r6, r8
    19bc:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19be:	2480      	movs	r4, #128	; 0x80
    19c0:	0464      	lsls	r4, r4, #17
    19c2:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    19c4:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19c6:	2480      	movs	r4, #128	; 0x80
    19c8:	05e4      	lsls	r4, r4, #23
    19ca:	629c      	str	r4, [r3, #40]	; 0x28
    19cc:	4c33      	ldr	r4, [pc, #204]	; (1a9c <gpio_init+0x23c>)
    19ce:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    19d0:	2458      	movs	r4, #88	; 0x58
    19d2:	46a1      	mov	r9, r4
    19d4:	5d1c      	ldrb	r4, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    19d6:	438c      	bics	r4, r1
    19d8:	46a0      	mov	r8, r4
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    19da:	464c      	mov	r4, r9
    19dc:	4646      	mov	r6, r8
    19de:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    19e0:	2480      	movs	r4, #128	; 0x80
    19e2:	04a4      	lsls	r4, r4, #18
    19e4:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    19e6:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19e8:	2480      	movs	r4, #128	; 0x80
    19ea:	05e4      	lsls	r4, r4, #23
    19ec:	629c      	str	r4, [r3, #40]	; 0x28
    19ee:	4e2c      	ldr	r6, [pc, #176]	; (1aa0 <gpio_init+0x240>)
    19f0:	629e      	str	r6, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    19f2:	2459      	movs	r4, #89	; 0x59
    19f4:	5d1e      	ldrb	r6, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
    19f6:	438e      	bics	r6, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    19f8:	551e      	strb	r6, [r3, r4]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    19fa:	2640      	movs	r6, #64	; 0x40
    19fc:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    19fe:	4e29      	ldr	r6, [pc, #164]	; (1aa4 <gpio_init+0x244>)
    1a00:	51de      	str	r6, [r3, r7]
    1a02:	4c21      	ldr	r4, [pc, #132]	; (1a88 <gpio_init+0x228>)
    1a04:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1a06:	26c6      	movs	r6, #198	; 0xc6
    1a08:	5d9c      	ldrb	r4, [r3, r6]
    1a0a:	4384      	bics	r4, r0
    1a0c:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a0e:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a10:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a12:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a14:	3ea6      	subs	r6, #166	; 0xa6
    1a16:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a18:	4e23      	ldr	r6, [pc, #140]	; (1aa8 <gpio_init+0x248>)
    1a1a:	51de      	str	r6, [r3, r7]
    1a1c:	4c1a      	ldr	r4, [pc, #104]	; (1a88 <gpio_init+0x228>)
    1a1e:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1a20:	26c5      	movs	r6, #197	; 0xc5
    1a22:	5d9c      	ldrb	r4, [r3, r6]
    1a24:	4384      	bics	r4, r0
    1a26:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a28:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a2a:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a2c:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a2e:	3eb5      	subs	r6, #181	; 0xb5
    1a30:	5156      	str	r6, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a32:	4e1e      	ldr	r6, [pc, #120]	; (1aac <gpio_init+0x24c>)
    1a34:	51de      	str	r6, [r3, r7]
    1a36:	4c14      	ldr	r4, [pc, #80]	; (1a88 <gpio_init+0x228>)
    1a38:	51dc      	str	r4, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1a3a:	26c4      	movs	r6, #196	; 0xc4
    1a3c:	5d9c      	ldrb	r4, [r3, r6]
    1a3e:	4384      	bics	r4, r0
    1a40:	559c      	strb	r4, [r3, r6]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a42:	5d9c      	ldrb	r4, [r3, r6]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a44:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a46:	559c      	strb	r4, [r3, r6]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1a48:	4664      	mov	r4, ip
    1a4a:	5154      	str	r4, [r2, r5]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1a4c:	4a18      	ldr	r2, [pc, #96]	; (1ab0 <gpio_init+0x250>)
    1a4e:	51da      	str	r2, [r3, r7]
    1a50:	4a0d      	ldr	r2, [pc, #52]	; (1a88 <gpio_init+0x228>)
    1a52:	51da      	str	r2, [r3, r7]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1a54:	22c7      	movs	r2, #199	; 0xc7
    1a56:	5c9c      	ldrb	r4, [r3, r2]
    1a58:	4384      	bics	r4, r0
    1a5a:	549c      	strb	r4, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1a5c:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1a5e:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1a60:	5498      	strb	r0, [r3, r2]
	
	// GPIO on PB07
	gpio_set_pin_direction(IP_B1, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(IP_B1, GPIO_PULL_OFF);
	gpio_set_pin_function(IP_B1, GPIO_PIN_FUNCTION_OFF);
}
    1a62:	bc3c      	pop	{r2, r3, r4, r5}
    1a64:	4690      	mov	r8, r2
    1a66:	4699      	mov	r9, r3
    1a68:	46a2      	mov	sl, r4
    1a6a:	46ab      	mov	fp, r5
    1a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	41004400 	.word	0x41004400
    1a74:	40000080 	.word	0x40000080
    1a78:	40000100 	.word	0x40000100
    1a7c:	40000200 	.word	0x40000200
    1a80:	40000400 	.word	0x40000400
    1a84:	40020800 	.word	0x40020800
    1a88:	c0020000 	.word	0xc0020000
    1a8c:	40008000 	.word	0x40008000
    1a90:	c0000080 	.word	0xc0000080
    1a94:	40020400 	.word	0x40020400
    1a98:	c0000040 	.word	0xc0000040
    1a9c:	c0000100 	.word	0xc0000100
    1aa0:	c0000200 	.word	0xc0000200
    1aa4:	40020040 	.word	0x40020040
    1aa8:	40020020 	.word	0x40020020
    1aac:	40020010 	.word	0x40020010
    1ab0:	40020080 	.word	0x40020080

00001ab4 <ETH_SPI_init>:
	gpio_set_pin_function(ETH_INT, PINMUX_PB08A_EIC_EXTINT8);
	ext_irq_init();
}


void ETH_SPI_init(void){
    1ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ab6:	46de      	mov	lr, fp
    1ab8:	4657      	mov	r7, sl
    1aba:	4646      	mov	r6, r8
    1abc:	b5c0      	push	{r6, r7, lr}
    1abe:	4a33      	ldr	r2, [pc, #204]	; (1b8c <ETH_SPI_init+0xd8>)
    1ac0:	6a13      	ldr	r3, [r2, #32]
    1ac2:	2104      	movs	r1, #4
    1ac4:	4688      	mov	r8, r1
    1ac6:	430b      	orrs	r3, r1
    1ac8:	6213      	str	r3, [r2, #32]
	((Gclk *)hw)->CLKCTRL.reg = data;
    1aca:	4a31      	ldr	r2, [pc, #196]	; (1b90 <ETH_SPI_init+0xdc>)
    1acc:	4b31      	ldr	r3, [pc, #196]	; (1b94 <ETH_SPI_init+0xe0>)
    1ace:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM0);
	_gclk_enable_channel(SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC);
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    1ad0:	4931      	ldr	r1, [pc, #196]	; (1b98 <ETH_SPI_init+0xe4>)
    1ad2:	4832      	ldr	r0, [pc, #200]	; (1b9c <ETH_SPI_init+0xe8>)
    1ad4:	4e32      	ldr	r6, [pc, #200]	; (1ba0 <ETH_SPI_init+0xec>)
    1ad6:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1ad8:	22c0      	movs	r2, #192	; 0xc0
    1ada:	05d2      	lsls	r2, r2, #23
    1adc:	2310      	movs	r3, #16
    1ade:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ae0:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ae2:	4b30      	ldr	r3, [pc, #192]	; (1ba4 <ETH_SPI_init+0xf0>)
    1ae4:	4930      	ldr	r1, [pc, #192]	; (1ba8 <ETH_SPI_init+0xf4>)
    1ae6:	6299      	str	r1, [r3, #40]	; 0x28
    1ae8:	21c0      	movs	r1, #192	; 0xc0
    1aea:	0609      	lsls	r1, r1, #24
    1aec:	468b      	mov	fp, r1
    1aee:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1af0:	2044      	movs	r0, #68	; 0x44
    1af2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1af4:	2401      	movs	r4, #1
    1af6:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1af8:	4321      	orrs	r1, r4
    1afa:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1afc:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1afe:	2132      	movs	r1, #50	; 0x32
    1b00:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1b02:	250f      	movs	r5, #15
    1b04:	46ac      	mov	ip, r5
    1b06:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1b08:	2703      	movs	r7, #3
    1b0a:	4338      	orrs	r0, r7
    1b0c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b0e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1b10:	2020      	movs	r0, #32
    1b12:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1b14:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b16:	4825      	ldr	r0, [pc, #148]	; (1bac <ETH_SPI_init+0xf8>)
    1b18:	6298      	str	r0, [r3, #40]	; 0x28
    1b1a:	4658      	mov	r0, fp
    1b1c:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b1e:	2045      	movs	r0, #69	; 0x45
    1b20:	4683      	mov	fp, r0
    1b22:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b24:	43a0      	bics	r0, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b26:	4320      	orrs	r0, r4
    1b28:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b2a:	465d      	mov	r5, fp
    1b2c:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b2e:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1b30:	3d36      	subs	r5, #54	; 0x36
    1b32:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    1b34:	2530      	movs	r5, #48	; 0x30
    1b36:	46ab      	mov	fp, r5
    1b38:	465d      	mov	r5, fp
    1b3a:	4328      	orrs	r0, r5
    1b3c:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b3e:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1b40:	310e      	adds	r1, #14
    1b42:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1b44:	4a1a      	ldr	r2, [pc, #104]	; (1bb0 <ETH_SPI_init+0xfc>)
    1b46:	629a      	str	r2, [r3, #40]	; 0x28
    1b48:	4a1a      	ldr	r2, [pc, #104]	; (1bb4 <ETH_SPI_init+0x100>)
    1b4a:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1b4c:	2246      	movs	r2, #70	; 0x46
    1b4e:	5c99      	ldrb	r1, [r3, r2]
    1b50:	4640      	mov	r0, r8
    1b52:	4381      	bics	r1, r0
    1b54:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1b56:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1b58:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1b5a:	4321      	orrs	r1, r4
    1b5c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1b5e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1b60:	2133      	movs	r1, #51	; 0x33
    1b62:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1b64:	4660      	mov	r0, ip
    1b66:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    1b68:	433a      	orrs	r2, r7
    1b6a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1b6c:	545a      	strb	r2, [r3, r1]

	gpio_set_pin_direction(MISO, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(MISO, GPIO_PULL_OFF);
	gpio_set_pin_function(MISO, PINMUX_PA06D_SERCOM0_PAD2);	
	
	spi_m_sync_init(&ETH_SPI, SERCOM0);
    1b6e:	490a      	ldr	r1, [pc, #40]	; (1b98 <ETH_SPI_init+0xe4>)
    1b70:	480a      	ldr	r0, [pc, #40]	; (1b9c <ETH_SPI_init+0xe8>)
    1b72:	47b0      	blx	r6
	spi_m_sync_get_io_descriptor(&ETH_SPI, &eth_spi);
    1b74:	4910      	ldr	r1, [pc, #64]	; (1bb8 <ETH_SPI_init+0x104>)
    1b76:	4809      	ldr	r0, [pc, #36]	; (1b9c <ETH_SPI_init+0xe8>)
    1b78:	4b10      	ldr	r3, [pc, #64]	; (1bbc <ETH_SPI_init+0x108>)
    1b7a:	4798      	blx	r3
	spi_m_sync_enable(&ETH_SPI);
    1b7c:	4807      	ldr	r0, [pc, #28]	; (1b9c <ETH_SPI_init+0xe8>)
    1b7e:	4b10      	ldr	r3, [pc, #64]	; (1bc0 <ETH_SPI_init+0x10c>)
    1b80:	4798      	blx	r3
}
    1b82:	bc1c      	pop	{r2, r3, r4}
    1b84:	4690      	mov	r8, r2
    1b86:	469a      	mov	sl, r3
    1b88:	46a3      	mov	fp, r4
    1b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b8c:	40000400 	.word	0x40000400
    1b90:	0000400d 	.word	0x0000400d
    1b94:	40000c00 	.word	0x40000c00
    1b98:	42000800 	.word	0x42000800
    1b9c:	200001ec 	.word	0x200001ec
    1ba0:	00000575 	.word	0x00000575
    1ba4:	41004400 	.word	0x41004400
    1ba8:	40000010 	.word	0x40000010
    1bac:	40000020 	.word	0x40000020
    1bb0:	40020040 	.word	0x40020040
    1bb4:	c0020000 	.word	0xc0020000
    1bb8:	200001cc 	.word	0x200001cc
    1bbc:	000006b5 	.word	0x000006b5
    1bc0:	000005cd 	.word	0x000005cd

00001bc4 <ETH_SPI_Select>:
/**
 * \brief Set output level on port with mask
 */
static inline void _gpio_set_level(const enum gpio_port port, const uint32_t mask, const bool level)
{
	if (level) {
    1bc4:	2800      	cmp	r0, #0
    1bc6:	d104      	bne.n	1bd2 <ETH_SPI_Select+0xe>
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1bc8:	2280      	movs	r2, #128	; 0x80
    1bca:	23c0      	movs	r3, #192	; 0xc0
    1bcc:	05db      	lsls	r3, r3, #23
    1bce:	615a      	str	r2, [r3, #20]

void ETH_SPI_Select(bool state){
	gpio_set_pin_level(ETH_CS, state);
}
    1bd0:	4770      	bx	lr
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1bd2:	2280      	movs	r2, #128	; 0x80
    1bd4:	23c0      	movs	r3, #192	; 0xc0
    1bd6:	05db      	lsls	r3, r3, #23
    1bd8:	619a      	str	r2, [r3, #24]
    1bda:	e7f9      	b.n	1bd0 <ETH_SPI_Select+0xc>

00001bdc <W5500_Select>:
void ETH_SPI_WriteBuff(uint8_t* buff, uint16_t len){
	io_write(eth_spi,buff,len);
}


void W5500_Select(void){
    1bdc:	b510      	push	{r4, lr}
	ETH_SPI_Select(false);
    1bde:	2000      	movs	r0, #0
    1be0:	4b01      	ldr	r3, [pc, #4]	; (1be8 <W5500_Select+0xc>)
    1be2:	4798      	blx	r3
}
    1be4:	bd10      	pop	{r4, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00001bc5 	.word	0x00001bc5

00001bec <W5500_Unselect>:

void W5500_Unselect(void){
    1bec:	b510      	push	{r4, lr}
	ETH_SPI_Select(true);
    1bee:	2001      	movs	r0, #1
    1bf0:	4b01      	ldr	r3, [pc, #4]	; (1bf8 <W5500_Unselect+0xc>)
    1bf2:	4798      	blx	r3
}
    1bf4:	bd10      	pop	{r4, pc}
    1bf6:	46c0      	nop			; (mov r8, r8)
    1bf8:	00001bc5 	.word	0x00001bc5

00001bfc <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len){
    1bfc:	b510      	push	{r4, lr}
    1bfe:	0003      	movs	r3, r0
    1c00:	000a      	movs	r2, r1
	io_read(eth_spi,buff,len);
    1c02:	4903      	ldr	r1, [pc, #12]	; (1c10 <W5500_ReadBuff+0x14>)
    1c04:	6808      	ldr	r0, [r1, #0]
    1c06:	0019      	movs	r1, r3
    1c08:	4b02      	ldr	r3, [pc, #8]	; (1c14 <W5500_ReadBuff+0x18>)
    1c0a:	4798      	blx	r3
}
    1c0c:	bd10      	pop	{r4, pc}
    1c0e:	46c0      	nop			; (mov r8, r8)
    1c10:	200001cc 	.word	0x200001cc
    1c14:	00000471 	.word	0x00000471

00001c18 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len){
    1c18:	b510      	push	{r4, lr}
    1c1a:	0003      	movs	r3, r0
    1c1c:	000a      	movs	r2, r1
	io_write(eth_spi,buff,len);
    1c1e:	4903      	ldr	r1, [pc, #12]	; (1c2c <W5500_WriteBuff+0x14>)
    1c20:	6808      	ldr	r0, [r1, #0]
    1c22:	0019      	movs	r1, r3
    1c24:	4b02      	ldr	r3, [pc, #8]	; (1c30 <W5500_WriteBuff+0x18>)
    1c26:	4798      	blx	r3
}
    1c28:	bd10      	pop	{r4, pc}
    1c2a:	46c0      	nop			; (mov r8, r8)
    1c2c:	200001cc 	.word	0x200001cc
    1c30:	00000439 	.word	0x00000439

00001c34 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void){
    1c34:	b510      	push	{r4, lr}
    1c36:	b082      	sub	sp, #8
	uint8_t data_byte = 0;
    1c38:	466b      	mov	r3, sp
    1c3a:	1ddc      	adds	r4, r3, #7
    1c3c:	2300      	movs	r3, #0
    1c3e:	7023      	strb	r3, [r4, #0]
	io_read(eth_spi,&data_byte,1);
    1c40:	4b04      	ldr	r3, [pc, #16]	; (1c54 <W5500_ReadByte+0x20>)
    1c42:	6818      	ldr	r0, [r3, #0]
    1c44:	2201      	movs	r2, #1
    1c46:	0021      	movs	r1, r4
    1c48:	4b03      	ldr	r3, [pc, #12]	; (1c58 <W5500_ReadByte+0x24>)
    1c4a:	4798      	blx	r3
	return data_byte;
    1c4c:	7820      	ldrb	r0, [r4, #0]
}
    1c4e:	b002      	add	sp, #8
    1c50:	bd10      	pop	{r4, pc}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	200001cc 	.word	0x200001cc
    1c58:	00000471 	.word	0x00000471

00001c5c <W5500_Write_byte>:
void W5500_Write_byte(uint8_t byte){
    1c5c:	b500      	push	{lr}
    1c5e:	b083      	sub	sp, #12
    1c60:	466b      	mov	r3, sp
    1c62:	1dd9      	adds	r1, r3, #7
    1c64:	7008      	strb	r0, [r1, #0]
	io_write(eth_spi, &byte, 1);
    1c66:	4b03      	ldr	r3, [pc, #12]	; (1c74 <W5500_Write_byte+0x18>)
    1c68:	6818      	ldr	r0, [r3, #0]
    1c6a:	2201      	movs	r2, #1
    1c6c:	4b02      	ldr	r3, [pc, #8]	; (1c78 <W5500_Write_byte+0x1c>)
    1c6e:	4798      	blx	r3
}
    1c70:	b003      	add	sp, #12
    1c72:	bd00      	pop	{pc}
    1c74:	200001cc 	.word	0x200001cc
    1c78:	00000439 	.word	0x00000439

00001c7c <EXT_SPI_init>:



void EXT_SPI_init(void){
    1c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c7e:	46d6      	mov	lr, sl
    1c80:	464f      	mov	r7, r9
    1c82:	b580      	push	{r7, lr}
    1c84:	4a33      	ldr	r2, [pc, #204]	; (1d54 <EXT_SPI_init+0xd8>)
    1c86:	6a13      	ldr	r3, [r2, #32]
    1c88:	2120      	movs	r1, #32
    1c8a:	430b      	orrs	r3, r1
    1c8c:	6213      	str	r3, [r2, #32]
    1c8e:	4a32      	ldr	r2, [pc, #200]	; (1d58 <EXT_SPI_init+0xdc>)
    1c90:	4b32      	ldr	r3, [pc, #200]	; (1d5c <EXT_SPI_init+0xe0>)
    1c92:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM3);
	_gclk_enable_channel(SERCOM3_GCLK_ID_CORE, CONF_GCLK_SERCOM3_CORE_SRC);
	
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    1c94:	4932      	ldr	r1, [pc, #200]	; (1d60 <EXT_SPI_init+0xe4>)
    1c96:	4833      	ldr	r0, [pc, #204]	; (1d64 <EXT_SPI_init+0xe8>)
    1c98:	4e33      	ldr	r6, [pc, #204]	; (1d68 <EXT_SPI_init+0xec>)
    1c9a:	47b0      	blx	r6
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1c9c:	22c0      	movs	r2, #192	; 0xc0
    1c9e:	05d2      	lsls	r2, r2, #23
    1ca0:	2380      	movs	r3, #128	; 0x80
    1ca2:	025b      	lsls	r3, r3, #9
    1ca4:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1ca6:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1ca8:	4b30      	ldr	r3, [pc, #192]	; (1d6c <EXT_SPI_init+0xf0>)
    1caa:	2180      	movs	r1, #128	; 0x80
    1cac:	05c9      	lsls	r1, r1, #23
    1cae:	468a      	mov	sl, r1
    1cb0:	6299      	str	r1, [r3, #40]	; 0x28
    1cb2:	492f      	ldr	r1, [pc, #188]	; (1d70 <EXT_SPI_init+0xf4>)
    1cb4:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1cb6:	2050      	movs	r0, #80	; 0x50
    1cb8:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cba:	2401      	movs	r4, #1
    1cbc:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1cbe:	4321      	orrs	r1, r4
    1cc0:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cc2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1cc4:	2138      	movs	r1, #56	; 0x38
    1cc6:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1cc8:	250f      	movs	r5, #15
    1cca:	46ac      	mov	ip, r5
    1ccc:	43a8      	bics	r0, r5
	tmp |= PORT_PMUX_PMUXE(data);
    1cce:	2703      	movs	r7, #3
    1cd0:	4338      	orrs	r0, r7
    1cd2:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1cd4:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
    1cd6:	2080      	movs	r0, #128	; 0x80
    1cd8:	0280      	lsls	r0, r0, #10
    1cda:	6150      	str	r0, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
    1cdc:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1cde:	4650      	mov	r0, sl
    1ce0:	6298      	str	r0, [r3, #40]	; 0x28
    1ce2:	4824      	ldr	r0, [pc, #144]	; (1d74 <EXT_SPI_init+0xf8>)
    1ce4:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1ce6:	2051      	movs	r0, #81	; 0x51
    1ce8:	4682      	mov	sl, r0
    1cea:	5c18      	ldrb	r0, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1cec:	43a0      	bics	r0, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1cee:	4320      	orrs	r0, r4
    1cf0:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1cf2:	4655      	mov	r5, sl
    1cf4:	5558      	strb	r0, [r3, r5]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1cf6:	5c58      	ldrb	r0, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1cf8:	3d42      	subs	r5, #66	; 0x42
    1cfa:	4028      	ands	r0, r5
	tmp |= PORT_PMUX_PMUXO(data);
    1cfc:	2530      	movs	r5, #48	; 0x30
    1cfe:	46aa      	mov	sl, r5
    1d00:	4655      	mov	r5, sl
    1d02:	4328      	orrs	r0, r5
    1d04:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d06:	5458      	strb	r0, [r3, r1]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
    1d08:	2180      	movs	r1, #128	; 0x80
    1d0a:	02c9      	lsls	r1, r1, #11
    1d0c:	6051      	str	r1, [r2, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
    1d0e:	4a1a      	ldr	r2, [pc, #104]	; (1d78 <EXT_SPI_init+0xfc>)
    1d10:	629a      	str	r2, [r3, #40]	; 0x28
    1d12:	4a1a      	ldr	r2, [pc, #104]	; (1d7c <EXT_SPI_init+0x100>)
    1d14:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1d16:	2252      	movs	r2, #82	; 0x52
    1d18:	5c99      	ldrb	r1, [r3, r2]
    1d1a:	2004      	movs	r0, #4
    1d1c:	4381      	bics	r1, r0
    1d1e:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1d20:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1d22:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1d24:	4321      	orrs	r1, r4
    1d26:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1d28:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1d2a:	2139      	movs	r1, #57	; 0x39
    1d2c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1d2e:	4660      	mov	r0, ip
    1d30:	4382      	bics	r2, r0
	tmp |= PORT_PMUX_PMUXE(data);
    1d32:	433a      	orrs	r2, r7
    1d34:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1d36:	545a      	strb	r2, [r3, r1]

	gpio_set_pin_direction(PA18, GPIO_DIRECTION_IN);
	gpio_set_pin_pull_mode(PA18, GPIO_PULL_OFF);
	gpio_set_pin_function(PA18, PINMUX_PA18D_SERCOM3_PAD2);
	
	spi_m_sync_init(&EXT_SPI, SERCOM3);
    1d38:	4909      	ldr	r1, [pc, #36]	; (1d60 <EXT_SPI_init+0xe4>)
    1d3a:	480a      	ldr	r0, [pc, #40]	; (1d64 <EXT_SPI_init+0xe8>)
    1d3c:	47b0      	blx	r6
	spi_m_sync_get_io_descriptor(&EXT_SPI, &ext_spi);
    1d3e:	4910      	ldr	r1, [pc, #64]	; (1d80 <EXT_SPI_init+0x104>)
    1d40:	4808      	ldr	r0, [pc, #32]	; (1d64 <EXT_SPI_init+0xe8>)
    1d42:	4b10      	ldr	r3, [pc, #64]	; (1d84 <EXT_SPI_init+0x108>)
    1d44:	4798      	blx	r3
	spi_m_sync_enable(&EXT_SPI);
    1d46:	4807      	ldr	r0, [pc, #28]	; (1d64 <EXT_SPI_init+0xe8>)
    1d48:	4b0f      	ldr	r3, [pc, #60]	; (1d88 <EXT_SPI_init+0x10c>)
    1d4a:	4798      	blx	r3
	
}
    1d4c:	bc0c      	pop	{r2, r3}
    1d4e:	4691      	mov	r9, r2
    1d50:	469a      	mov	sl, r3
    1d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d54:	40000400 	.word	0x40000400
    1d58:	00004010 	.word	0x00004010
    1d5c:	40000c00 	.word	0x40000c00
    1d60:	42001400 	.word	0x42001400
    1d64:	200001d4 	.word	0x200001d4
    1d68:	00000575 	.word	0x00000575
    1d6c:	41004400 	.word	0x41004400
    1d70:	c0000001 	.word	0xc0000001
    1d74:	c0000002 	.word	0xc0000002
    1d78:	40020000 	.word	0x40020000
    1d7c:	c0020004 	.word	0xc0020004
    1d80:	200001d0 	.word	0x200001d0
    1d84:	000006b5 	.word	0x000006b5
    1d88:	000005cd 	.word	0x000005cd

00001d8c <EXT_SPI_WriteBuff>:

void EXT_SPI_ReadBuff(uint8_t* buff, uint16_t len){
	io_read(ext_spi,buff,len);
}

void EXT_SPI_WriteBuff(uint8_t* buff, uint16_t len){
    1d8c:	b510      	push	{r4, lr}
    1d8e:	0003      	movs	r3, r0
    1d90:	000a      	movs	r2, r1
	io_write(ext_spi,buff,len);
    1d92:	4903      	ldr	r1, [pc, #12]	; (1da0 <EXT_SPI_WriteBuff+0x14>)
    1d94:	6808      	ldr	r0, [r1, #0]
    1d96:	0019      	movs	r1, r3
    1d98:	4b02      	ldr	r3, [pc, #8]	; (1da4 <EXT_SPI_WriteBuff+0x18>)
    1d9a:	4798      	blx	r3
}
    1d9c:	bd10      	pop	{r4, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	200001d0 	.word	0x200001d0
    1da4:	00000439 	.word	0x00000439

00001da8 <EXT_I2C_init>:


void EXT_I2C_init(void){
    1da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1daa:	4a1e      	ldr	r2, [pc, #120]	; (1e24 <EXT_I2C_init+0x7c>)
    1dac:	6a13      	ldr	r3, [r2, #32]
    1dae:	2110      	movs	r1, #16
    1db0:	430b      	orrs	r3, r1
    1db2:	6213      	str	r3, [r2, #32]
    1db4:	4b1c      	ldr	r3, [pc, #112]	; (1e28 <EXT_I2C_init+0x80>)
    1db6:	4a1d      	ldr	r2, [pc, #116]	; (1e2c <EXT_I2C_init+0x84>)
    1db8:	805a      	strh	r2, [r3, #2]
    1dba:	4a1d      	ldr	r2, [pc, #116]	; (1e30 <EXT_I2C_init+0x88>)
    1dbc:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM2);
	_gclk_enable_channel(SERCOM2_GCLK_ID_CORE, CONF_GCLK_SERCOM2_CORE_SRC);
	_gclk_enable_channel(SERCOM2_GCLK_ID_SLOW, CONF_GCLK_SERCOM2_SLOW_SRC);
	
	i2c_m_sync_init(&EXT_I2C, SERCOM2);
    1dbe:	4c1d      	ldr	r4, [pc, #116]	; (1e34 <EXT_I2C_init+0x8c>)
    1dc0:	491d      	ldr	r1, [pc, #116]	; (1e38 <EXT_I2C_init+0x90>)
    1dc2:	0020      	movs	r0, r4
    1dc4:	4b1d      	ldr	r3, [pc, #116]	; (1e3c <EXT_I2C_init+0x94>)
    1dc6:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1dc8:	4b1d      	ldr	r3, [pc, #116]	; (1e40 <EXT_I2C_init+0x98>)
    1dca:	204c      	movs	r0, #76	; 0x4c
    1dcc:	5c19      	ldrb	r1, [r3, r0]
    1dce:	2204      	movs	r2, #4
    1dd0:	4391      	bics	r1, r2
    1dd2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1dd4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1dd6:	2601      	movs	r6, #1
    1dd8:	43b1      	bics	r1, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1dda:	2501      	movs	r5, #1
    1ddc:	4329      	orrs	r1, r5
    1dde:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1de0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1de2:	3816      	subs	r0, #22
    1de4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1de6:	270f      	movs	r7, #15
    1de8:	43b9      	bics	r1, r7
	tmp |= PORT_PMUX_PMUXE(data);
    1dea:	2702      	movs	r7, #2
    1dec:	4339      	orrs	r1, r7
    1dee:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1df0:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
    1df2:	214d      	movs	r1, #77	; 0x4d
    1df4:	5c5f      	ldrb	r7, [r3, r1]
    1df6:	4397      	bics	r7, r2
    1df8:	545f      	strb	r7, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1dfa:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1dfc:	43b2      	bics	r2, r6
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1dfe:	432a      	orrs	r2, r5
    1e00:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e02:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e04:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1e06:	393e      	subs	r1, #62	; 0x3e
    1e08:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1e0a:	2120      	movs	r1, #32
    1e0c:	430a      	orrs	r2, r1
    1e0e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e10:	541a      	strb	r2, [r3, r0]
	gpio_set_pin_function(PA12, PINMUX_PA12C_SERCOM2_PAD0);
	
	gpio_set_pin_pull_mode(PA13, GPIO_PULL_OFF);
	gpio_set_pin_function(PA13, PINMUX_PA13C_SERCOM2_PAD1);
	
	i2c_m_sync_get_io_descriptor(&EXT_I2C, &ext_i2c);
    1e12:	490c      	ldr	r1, [pc, #48]	; (1e44 <EXT_I2C_init+0x9c>)
    1e14:	0020      	movs	r0, r4
    1e16:	4b0c      	ldr	r3, [pc, #48]	; (1e48 <EXT_I2C_init+0xa0>)
    1e18:	4798      	blx	r3
	i2c_m_sync_enable(&EXT_I2C);
    1e1a:	0020      	movs	r0, r4
    1e1c:	4b0b      	ldr	r3, [pc, #44]	; (1e4c <EXT_I2C_init+0xa4>)
    1e1e:	4798      	blx	r3
	
}
    1e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	40000400 	.word	0x40000400
    1e28:	40000c00 	.word	0x40000c00
    1e2c:	0000400f 	.word	0x0000400f
    1e30:	0000430c 	.word	0x0000430c
    1e34:	20000218 	.word	0x20000218
    1e38:	42001000 	.word	0x42001000
    1e3c:	000003e5 	.word	0x000003e5
    1e40:	41004400 	.word	0x41004400
    1e44:	20000208 	.word	0x20000208
    1e48:	00000431 	.word	0x00000431
    1e4c:	00000425 	.word	0x00000425

00001e50 <PWM_init>:
bool I2C_read_batch_addr(uint8_t addres, uint8_t reg, uint8_t *data, uint8_t data_len){
	i2c_m_sync_set_slaveaddr(&EXT_I2C, addres, I2C_M_SEVEN);
	i2c_m_sync_cmd_read(&EXT_I2C, reg, data, data_len);
}

void PWM_init(void){
    1e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1e52:	46de      	mov	lr, fp
    1e54:	4657      	mov	r7, sl
    1e56:	464e      	mov	r6, r9
    1e58:	4645      	mov	r5, r8
    1e5a:	b5e0      	push	{r5, r6, r7, lr}
    1e5c:	4d2c      	ldr	r5, [pc, #176]	; (1f10 <PWM_init+0xc0>)
    1e5e:	6a2a      	ldr	r2, [r5, #32]
    1e60:	2380      	movs	r3, #128	; 0x80
    1e62:	01db      	lsls	r3, r3, #7
    1e64:	4313      	orrs	r3, r2
    1e66:	622b      	str	r3, [r5, #32]
    1e68:	4b2a      	ldr	r3, [pc, #168]	; (1f14 <PWM_init+0xc4>)
    1e6a:	469a      	mov	sl, r3
    1e6c:	4b2a      	ldr	r3, [pc, #168]	; (1f18 <PWM_init+0xc8>)
    1e6e:	469b      	mov	fp, r3
    1e70:	4653      	mov	r3, sl
    1e72:	465a      	mov	r2, fp
    1e74:	805a      	strh	r2, [r3, #2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1e76:	4c29      	ldr	r4, [pc, #164]	; (1f1c <PWM_init+0xcc>)
    1e78:	22d1      	movs	r2, #209	; 0xd1
    1e7a:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1e7c:	2101      	movs	r1, #1
    1e7e:	4689      	mov	r9, r1
    1e80:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1e82:	4688      	mov	r8, r1
    1e84:	4641      	mov	r1, r8
    1e86:	430b      	orrs	r3, r1
    1e88:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1e8a:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1e8c:	3a19      	subs	r2, #25
    1e8e:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1e90:	210f      	movs	r1, #15
    1e92:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1e94:	3131      	adds	r1, #49	; 0x31
    1e96:	430b      	orrs	r3, r1
    1e98:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1e9a:	54a3      	strb	r3, [r4, r2]
	_pm_enable_bus_clock(PM_BUS_APBC, TC6);
	_gclk_enable_channel(TC6_GCLK_ID, CONF_GCLK_TC6_SRC);
	gpio_set_pin_function(PB17, PINMUX_PB17E_TC6_WO1);
	pwm_init(&PWM_0, TC6, _tc_get_pwm());
    1e9c:	4f20      	ldr	r7, [pc, #128]	; (1f20 <PWM_init+0xd0>)
    1e9e:	47b8      	blx	r7
    1ea0:	0002      	movs	r2, r0
    1ea2:	4920      	ldr	r1, [pc, #128]	; (1f24 <PWM_init+0xd4>)
    1ea4:	4820      	ldr	r0, [pc, #128]	; (1f28 <PWM_init+0xd8>)
    1ea6:	4e21      	ldr	r6, [pc, #132]	; (1f2c <PWM_init+0xdc>)
    1ea8:	47b0      	blx	r6
    1eaa:	6a2a      	ldr	r2, [r5, #32]
    1eac:	2380      	movs	r3, #128	; 0x80
    1eae:	021b      	lsls	r3, r3, #8
    1eb0:	4313      	orrs	r3, r2
    1eb2:	622b      	str	r3, [r5, #32]
    1eb4:	4653      	mov	r3, sl
    1eb6:	465a      	mov	r2, fp
    1eb8:	805a      	strh	r2, [r3, #2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1eba:	2255      	movs	r2, #85	; 0x55
    1ebc:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1ebe:	4649      	mov	r1, r9
    1ec0:	438b      	bics	r3, r1
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1ec2:	4641      	mov	r1, r8
    1ec4:	430b      	orrs	r3, r1
    1ec6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1ec8:	54a3      	strb	r3, [r4, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1eca:	3a1b      	subs	r2, #27
    1ecc:	5ca3      	ldrb	r3, [r4, r2]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
    1ece:	210f      	movs	r1, #15
    1ed0:	400b      	ands	r3, r1
	tmp |= PORT_PMUX_PMUXO(data);
    1ed2:	3131      	adds	r1, #49	; 0x31
    1ed4:	430b      	orrs	r3, r1
    1ed6:	b2db      	uxtb	r3, r3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1ed8:	54a3      	strb	r3, [r4, r2]
	
	_pm_enable_bus_clock(PM_BUS_APBC, TC7);
	_gclk_enable_channel(TC7_GCLK_ID, CONF_GCLK_TC7_SRC);
	gpio_set_pin_function(PA21, PINMUX_PA21E_TC7_WO1);
	pwm_init(&PWM_1, TC7, _tc_get_pwm());
    1eda:	47b8      	blx	r7
    1edc:	0002      	movs	r2, r0
    1ede:	4c14      	ldr	r4, [pc, #80]	; (1f30 <PWM_init+0xe0>)
    1ee0:	4914      	ldr	r1, [pc, #80]	; (1f34 <PWM_init+0xe4>)
    1ee2:	0020      	movs	r0, r4
    1ee4:	47b0      	blx	r6
	
	pwm_set_parameters(&PWM_0, 5000, 0);
    1ee6:	4e14      	ldr	r6, [pc, #80]	; (1f38 <PWM_init+0xe8>)
    1ee8:	2200      	movs	r2, #0
    1eea:	0031      	movs	r1, r6
    1eec:	480e      	ldr	r0, [pc, #56]	; (1f28 <PWM_init+0xd8>)
    1eee:	4d13      	ldr	r5, [pc, #76]	; (1f3c <PWM_init+0xec>)
    1ef0:	47a8      	blx	r5
	pwm_set_parameters(&PWM_1, 5000, 0);
    1ef2:	2200      	movs	r2, #0
    1ef4:	0031      	movs	r1, r6
    1ef6:	0020      	movs	r0, r4
    1ef8:	47a8      	blx	r5
	
	pwm_enable(&PWM_0);
    1efa:	480b      	ldr	r0, [pc, #44]	; (1f28 <PWM_init+0xd8>)
    1efc:	4d10      	ldr	r5, [pc, #64]	; (1f40 <PWM_init+0xf0>)
    1efe:	47a8      	blx	r5
	pwm_enable(&PWM_1);
    1f00:	0020      	movs	r0, r4
    1f02:	47a8      	blx	r5
}
    1f04:	bc3c      	pop	{r2, r3, r4, r5}
    1f06:	4690      	mov	r8, r2
    1f08:	4699      	mov	r9, r3
    1f0a:	46a2      	mov	sl, r4
    1f0c:	46ab      	mov	fp, r5
    1f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1f10:	40000400 	.word	0x40000400
    1f14:	40000c00 	.word	0x40000c00
    1f18:	00004016 	.word	0x00004016
    1f1c:	41004400 	.word	0x41004400
    1f20:	00001831 	.word	0x00001831
    1f24:	42003800 	.word	0x42003800
    1f28:	20000134 	.word	0x20000134
    1f2c:	000004c1 	.word	0x000004c1
    1f30:	20000190 	.word	0x20000190
    1f34:	42003c00 	.word	0x42003c00
    1f38:	00001388 	.word	0x00001388
    1f3c:	00000545 	.word	0x00000545
    1f40:	00000509 	.word	0x00000509

00001f44 <PWM_write>:

void PWM_write(uint8_t ch, uint16_t val){
    1f44:	b510      	push	{r4, lr}
    1f46:	000a      	movs	r2, r1
	if(ch == 0){
    1f48:	2800      	cmp	r0, #0
    1f4a:	d004      	beq.n	1f56 <PWM_write+0x12>
		pwm_set_parameters(&PWM_0, 5000, val);	
	}else{
		pwm_set_parameters(&PWM_1, 5000, val);
    1f4c:	4904      	ldr	r1, [pc, #16]	; (1f60 <PWM_write+0x1c>)
    1f4e:	4805      	ldr	r0, [pc, #20]	; (1f64 <PWM_write+0x20>)
    1f50:	4b05      	ldr	r3, [pc, #20]	; (1f68 <PWM_write+0x24>)
    1f52:	4798      	blx	r3
	}	
}
    1f54:	bd10      	pop	{r4, pc}
		pwm_set_parameters(&PWM_0, 5000, val);	
    1f56:	4902      	ldr	r1, [pc, #8]	; (1f60 <PWM_write+0x1c>)
    1f58:	4804      	ldr	r0, [pc, #16]	; (1f6c <PWM_write+0x28>)
    1f5a:	4b03      	ldr	r3, [pc, #12]	; (1f68 <PWM_write+0x24>)
    1f5c:	4798      	blx	r3
    1f5e:	e7f9      	b.n	1f54 <PWM_write+0x10>
    1f60:	00001388 	.word	0x00001388
    1f64:	20000190 	.word	0x20000190
    1f68:	00000545 	.word	0x00000545
    1f6c:	20000134 	.word	0x20000134

00001f70 <DEBUG_Serial_init>:


void DEBUG_Serial_init(void){
    1f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f72:	4a19      	ldr	r2, [pc, #100]	; (1fd8 <DEBUG_Serial_init+0x68>)
    1f74:	6a13      	ldr	r3, [r2, #32]
    1f76:	2140      	movs	r1, #64	; 0x40
    1f78:	430b      	orrs	r3, r1
    1f7a:	6213      	str	r3, [r2, #32]
    1f7c:	4a17      	ldr	r2, [pc, #92]	; (1fdc <DEBUG_Serial_init+0x6c>)
    1f7e:	4b18      	ldr	r3, [pc, #96]	; (1fe0 <DEBUG_Serial_init+0x70>)
    1f80:	805a      	strh	r2, [r3, #2]
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM4);
	_gclk_enable_channel(SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC);
	
	usart_sync_init(&DEBUG_SERIAL, SERCOM4, (void *)NULL);
    1f82:	2200      	movs	r2, #0
    1f84:	4917      	ldr	r1, [pc, #92]	; (1fe4 <DEBUG_Serial_init+0x74>)
    1f86:	4818      	ldr	r0, [pc, #96]	; (1fe8 <DEBUG_Serial_init+0x78>)
    1f88:	4b18      	ldr	r3, [pc, #96]	; (1fec <DEBUG_Serial_init+0x7c>)
    1f8a:	4798      	blx	r3
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1f8c:	4b18      	ldr	r3, [pc, #96]	; (1ff0 <DEBUG_Serial_init+0x80>)
    1f8e:	21cc      	movs	r1, #204	; 0xcc
    1f90:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1f92:	2401      	movs	r4, #1
    1f94:	43a2      	bics	r2, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1f96:	2701      	movs	r7, #1
    1f98:	433a      	orrs	r2, r7
    1f9a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1f9c:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1f9e:	22b6      	movs	r2, #182	; 0xb6
    1fa0:	5c98      	ldrb	r0, [r3, r2]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1fa2:	260f      	movs	r6, #15
    1fa4:	43b0      	bics	r0, r6
	tmp |= PORT_PMUX_PMUXE(data);
    1fa6:	2502      	movs	r5, #2
    1fa8:	4328      	orrs	r0, r5
    1faa:	b2c0      	uxtb	r0, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1fac:	5498      	strb	r0, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
    1fae:	3218      	adds	r2, #24
    1fb0:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
    1fb2:	43a1      	bics	r1, r4
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
    1fb4:	4339      	orrs	r1, r7
    1fb6:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
    1fb8:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
    1fba:	21b7      	movs	r1, #183	; 0xb7
    1fbc:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
    1fbe:	43b2      	bics	r2, r6
	tmp |= PORT_PMUX_PMUXE(data);
    1fc0:	432a      	orrs	r2, r5
    1fc2:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
    1fc4:	545a      	strb	r2, [r3, r1]

	gpio_set_pin_function(PB12, PINMUX_PB12C_SERCOM4_PAD0);
	gpio_set_pin_function(PB14, PINMUX_PB14C_SERCOM4_PAD2);
	
	usart_sync_get_io_descriptor(&DEBUG_SERIAL, &debug_serial);
    1fc6:	490b      	ldr	r1, [pc, #44]	; (1ff4 <DEBUG_Serial_init+0x84>)
    1fc8:	4807      	ldr	r0, [pc, #28]	; (1fe8 <DEBUG_Serial_init+0x78>)
    1fca:	4b0b      	ldr	r3, [pc, #44]	; (1ff8 <DEBUG_Serial_init+0x88>)
    1fcc:	4798      	blx	r3
	usart_sync_enable(&DEBUG_SERIAL);
    1fce:	4806      	ldr	r0, [pc, #24]	; (1fe8 <DEBUG_Serial_init+0x78>)
    1fd0:	4b0a      	ldr	r3, [pc, #40]	; (1ffc <DEBUG_Serial_init+0x8c>)
    1fd2:	4798      	blx	r3
}
    1fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	40000400 	.word	0x40000400
    1fdc:	00004011 	.word	0x00004011
    1fe0:	40000c00 	.word	0x40000c00
    1fe4:	42001800 	.word	0x42001800
    1fe8:	2000020c 	.word	0x2000020c
    1fec:	000007c5 	.word	0x000007c5
    1ff0:	41004400 	.word	0x41004400
    1ff4:	20000204 	.word	0x20000204
    1ff8:	0000083d 	.word	0x0000083d
    1ffc:	00000811 	.word	0x00000811

00002000 <mcu_init>:
{
    2000:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
    2002:	4b0a      	ldr	r3, [pc, #40]	; (202c <STACK_SIZE+0x2c>)
    2004:	4798      	blx	r3
	gpio_init();
    2006:	4b0a      	ldr	r3, [pc, #40]	; (2030 <STACK_SIZE+0x30>)
    2008:	4798      	blx	r3
	ADC_0_init();
    200a:	4b0a      	ldr	r3, [pc, #40]	; (2034 <STACK_SIZE+0x34>)
    200c:	4798      	blx	r3
	ETH_SPI_init();
    200e:	4b0a      	ldr	r3, [pc, #40]	; (2038 <STACK_SIZE+0x38>)
    2010:	4798      	blx	r3
	EXT_SPI_init();
    2012:	4b0a      	ldr	r3, [pc, #40]	; (203c <STACK_SIZE+0x3c>)
    2014:	4798      	blx	r3
	EXT_I2C_init();
    2016:	4b0a      	ldr	r3, [pc, #40]	; (2040 <STACK_SIZE+0x40>)
    2018:	4798      	blx	r3
	PWM_init();
    201a:	4b0a      	ldr	r3, [pc, #40]	; (2044 <STACK_SIZE+0x44>)
    201c:	4798      	blx	r3
	DEBUG_Serial_init();
    201e:	4b0a      	ldr	r3, [pc, #40]	; (2048 <STACK_SIZE+0x48>)
    2020:	4798      	blx	r3
	ext_irq_register(ETH_INT, ETH_Handler);
    2022:	490a      	ldr	r1, [pc, #40]	; (204c <STACK_SIZE+0x4c>)
    2024:	2028      	movs	r0, #40	; 0x28
    2026:	4b0a      	ldr	r3, [pc, #40]	; (2050 <STACK_SIZE+0x50>)
    2028:	4798      	blx	r3
}
    202a:	bd10      	pop	{r4, pc}
    202c:	00000a41 	.word	0x00000a41
    2030:	00001861 	.word	0x00001861
    2034:	00000205 	.word	0x00000205
    2038:	00001ab5 	.word	0x00001ab5
    203c:	00001c7d 	.word	0x00001c7d
    2040:	00001da9 	.word	0x00001da9
    2044:	00001e51 	.word	0x00001e51
    2048:	00001f71 	.word	0x00001f71
    204c:	0000185d 	.word	0x0000185d
    2050:	000002a5 	.word	0x000002a5

00002054 <SerialWrite>:

void SerialWrite(uint8_t* buff){
    2054:	b510      	push	{r4, lr}
    2056:	0004      	movs	r4, r0
	io_write(debug_serial, buff, strlen(buff));
    2058:	4b04      	ldr	r3, [pc, #16]	; (206c <SerialWrite+0x18>)
    205a:	4798      	blx	r3
    205c:	b282      	uxth	r2, r0
    205e:	4b04      	ldr	r3, [pc, #16]	; (2070 <SerialWrite+0x1c>)
    2060:	6818      	ldr	r0, [r3, #0]
    2062:	0021      	movs	r1, r4
    2064:	4b03      	ldr	r3, [pc, #12]	; (2074 <SerialWrite+0x20>)
    2066:	4798      	blx	r3
	//io_write(debug_serial, (uint8_t *)"Hello World!", 12);
}
    2068:	bd10      	pop	{r4, pc}
    206a:	46c0      	nop			; (mov r8, r8)
    206c:	00002dc9 	.word	0x00002dc9
    2070:	20000204 	.word	0x20000204
    2074:	00000439 	.word	0x00000439

00002078 <GetIpSwitch>:

uint8_t GetIpSwitch(void){
    2078:	b5f0      	push	{r4, r5, r6, r7, lr}
    207a:	46de      	mov	lr, fp
    207c:	4657      	mov	r7, sl
    207e:	464e      	mov	r6, r9
    2080:	4645      	mov	r5, r8
    2082:	b5e0      	push	{r5, r6, r7, lr}
    2084:	b087      	sub	sp, #28
 */
static inline uint32_t _gpio_get_level(const enum gpio_port port)
{
	uint32_t tmp;

	CRITICAL_SECTION_ENTER();
    2086:	a805      	add	r0, sp, #20
    2088:	4b30      	ldr	r3, [pc, #192]	; (214c <GetIpSwitch+0xd4>)
    208a:	469b      	mov	fp, r3
    208c:	4798      	blx	r3
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    208e:	25c0      	movs	r5, #192	; 0xc0
    2090:	05ed      	lsls	r5, r5, #23
    2092:	2680      	movs	r6, #128	; 0x80
    2094:	59ac      	ldr	r4, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2096:	4b2e      	ldr	r3, [pc, #184]	; (2150 <GetIpSwitch+0xd8>)
    2098:	469a      	mov	sl, r3
    209a:	23a0      	movs	r3, #160	; 0xa0
    209c:	4699      	mov	r9, r3
    209e:	4653      	mov	r3, sl
    20a0:	464a      	mov	r2, r9
    20a2:	5898      	ldr	r0, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20a4:	2390      	movs	r3, #144	; 0x90
    20a6:	4698      	mov	r8, r3
    20a8:	58eb      	ldr	r3, [r5, r3]

	uint32_t dir_tmp = hri_port_read_DIR_reg(PORT_IOBUS, port);

	tmp = hri_port_read_IN_reg(PORT, port) & ~dir_tmp;
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20aa:	4043      	eors	r3, r0
    20ac:	401c      	ands	r4, r3
    20ae:	4044      	eors	r4, r0

	CRITICAL_SECTION_LEAVE();
    20b0:	a805      	add	r0, sp, #20
    20b2:	4f28      	ldr	r7, [pc, #160]	; (2154 <GetIpSwitch+0xdc>)
    20b4:	47b8      	blx	r7
 *
 * \param[in] pin       The pin number for device
 */
static inline bool gpio_get_pin_level(const uint8_t pin)
{
	return (bool)(_gpio_get_level((enum gpio_port)GPIO_PORT(pin)) & (0x01U << GPIO_PIN(pin)));
    20b6:	2020      	movs	r0, #32
    20b8:	4004      	ands	r4, r0
	uint8_t res = 0;
	res |= (gpio_get_pin_level(IP_B0) << 0);
    20ba:	0023      	movs	r3, r4
    20bc:	1e5c      	subs	r4, r3, #1
    20be:	41a3      	sbcs	r3, r4
    20c0:	9301      	str	r3, [sp, #4]
	CRITICAL_SECTION_ENTER();
    20c2:	a804      	add	r0, sp, #16
    20c4:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20c6:	59ac      	ldr	r4, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20c8:	4652      	mov	r2, sl
    20ca:	4649      	mov	r1, r9
    20cc:	5852      	ldr	r2, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20ce:	4641      	mov	r1, r8
    20d0:	586b      	ldr	r3, [r5, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20d2:	4053      	eors	r3, r2
    20d4:	401c      	ands	r4, r3
    20d6:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    20d8:	a804      	add	r0, sp, #16
    20da:	47b8      	blx	r7
    20dc:	4034      	ands	r4, r6
    20de:	1e60      	subs	r0, r4, #1
    20e0:	4184      	sbcs	r4, r0
    20e2:	b2e0      	uxtb	r0, r4
	res |= (gpio_get_pin_level(IP_B1) << 1);
    20e4:	0040      	lsls	r0, r0, #1
    20e6:	9b01      	ldr	r3, [sp, #4]
    20e8:	4303      	orrs	r3, r0
    20ea:	9301      	str	r3, [sp, #4]
	CRITICAL_SECTION_ENTER();
    20ec:	a803      	add	r0, sp, #12
    20ee:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    20f0:	59ac      	ldr	r4, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    20f2:	4652      	mov	r2, sl
    20f4:	4649      	mov	r1, r9
    20f6:	5852      	ldr	r2, [r2, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    20f8:	4641      	mov	r1, r8
    20fa:	586b      	ldr	r3, [r5, r1]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    20fc:	4053      	eors	r3, r2
    20fe:	401c      	ands	r4, r3
    2100:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2102:	a803      	add	r0, sp, #12
    2104:	47b8      	blx	r7
    2106:	2040      	movs	r0, #64	; 0x40
    2108:	4004      	ands	r4, r0
    210a:	1e63      	subs	r3, r4, #1
    210c:	419c      	sbcs	r4, r3
    210e:	b2e4      	uxtb	r4, r4
	res |= (gpio_get_pin_level(IP_B2) << 2);
    2110:	00a4      	lsls	r4, r4, #2
    2112:	9b01      	ldr	r3, [sp, #4]
    2114:	431c      	orrs	r4, r3
	CRITICAL_SECTION_ENTER();
    2116:	a802      	add	r0, sp, #8
    2118:	47d8      	blx	fp
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    211a:	59a8      	ldr	r0, [r5, r6]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    211c:	4653      	mov	r3, sl
    211e:	464a      	mov	r2, r9
    2120:	589b      	ldr	r3, [r3, r2]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2122:	4642      	mov	r2, r8
    2124:	58ad      	ldr	r5, [r5, r2]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2126:	405d      	eors	r5, r3
    2128:	4005      	ands	r5, r0
    212a:	405d      	eors	r5, r3
	CRITICAL_SECTION_LEAVE();
    212c:	a802      	add	r0, sp, #8
    212e:	47b8      	blx	r7
    2130:	2010      	movs	r0, #16
    2132:	4028      	ands	r0, r5
    2134:	1e43      	subs	r3, r0, #1
    2136:	4198      	sbcs	r0, r3
    2138:	b2c0      	uxtb	r0, r0
	res |= (gpio_get_pin_level(IP_B3) << 3);
    213a:	00c0      	lsls	r0, r0, #3
    213c:	4320      	orrs	r0, r4
	
	return res;
    213e:	b007      	add	sp, #28
    2140:	bc3c      	pop	{r2, r3, r4, r5}
    2142:	4690      	mov	r8, r2
    2144:	4699      	mov	r9, r3
    2146:	46a2      	mov	sl, r4
    2148:	46ab      	mov	fp, r5
    214a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    214c:	00000269 	.word	0x00000269
    2150:	41004400 	.word	0x41004400
    2154:	00000277 	.word	0x00000277

00002158 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    2158:	b530      	push	{r4, r5, lr}
    215a:	b083      	sub	sp, #12
    215c:	0004      	movs	r4, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    215e:	4d16      	ldr	r5, [pc, #88]	; (21b8 <WIZCHIP_READ+0x60>)
    2160:	68eb      	ldr	r3, [r5, #12]
    2162:	4798      	blx	r3
   WIZCHIP.CS._select();
    2164:	696b      	ldr	r3, [r5, #20]
    2166:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    2168:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    216a:	2b00      	cmp	r3, #0
    216c:	d016      	beq.n	219c <WIZCHIP_READ+0x44>
    216e:	4b12      	ldr	r3, [pc, #72]	; (21b8 <WIZCHIP_READ+0x60>)
    2170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2172:	2b00      	cmp	r3, #0
    2174:	d012      	beq.n	219c <WIZCHIP_READ+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    2176:	0c22      	lsrs	r2, r4, #16
    2178:	a801      	add	r0, sp, #4
    217a:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    217c:	0a22      	lsrs	r2, r4, #8
    217e:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    2180:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    2182:	2103      	movs	r1, #3
    2184:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    2186:	4c0c      	ldr	r4, [pc, #48]	; (21b8 <WIZCHIP_READ+0x60>)
    2188:	69e3      	ldr	r3, [r4, #28]
    218a:	4798      	blx	r3
    218c:	0005      	movs	r5, r0

   WIZCHIP.CS._deselect();
    218e:	69a3      	ldr	r3, [r4, #24]
    2190:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    2192:	6923      	ldr	r3, [r4, #16]
    2194:	4798      	blx	r3
   return ret;
}
    2196:	0028      	movs	r0, r5
    2198:	b003      	add	sp, #12
    219a:	bd30      	pop	{r4, r5, pc}
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    219c:	4d06      	ldr	r5, [pc, #24]	; (21b8 <WIZCHIP_READ+0x60>)
    219e:	0c20      	lsrs	r0, r4, #16
    21a0:	b2c0      	uxtb	r0, r0
    21a2:	6a2b      	ldr	r3, [r5, #32]
    21a4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    21a6:	0a20      	lsrs	r0, r4, #8
    21a8:	b2c0      	uxtb	r0, r0
    21aa:	6a2b      	ldr	r3, [r5, #32]
    21ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    21ae:	6a2b      	ldr	r3, [r5, #32]
    21b0:	b2e0      	uxtb	r0, r4
    21b2:	4798      	blx	r3
    21b4:	e7e7      	b.n	2186 <WIZCHIP_READ+0x2e>
    21b6:	46c0      	nop			; (mov r8, r8)
    21b8:	20000028 	.word	0x20000028

000021bc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	b082      	sub	sp, #8
    21c0:	0004      	movs	r4, r0
    21c2:	000e      	movs	r6, r1
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    21c4:	4d14      	ldr	r5, [pc, #80]	; (2218 <WIZCHIP_WRITE+0x5c>)
    21c6:	68eb      	ldr	r3, [r5, #12]
    21c8:	4798      	blx	r3
   WIZCHIP.CS._select();
    21ca:	696b      	ldr	r3, [r5, #20]
    21cc:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    21ce:	2004      	movs	r0, #4
    21d0:	4304      	orrs	r4, r0

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    21d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    21d4:	2b00      	cmp	r3, #0
    21d6:	d00f      	beq.n	21f8 <WIZCHIP_WRITE+0x3c>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		WIZCHIP.IF.SPI._write_byte(wb);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    21d8:	0c22      	lsrs	r2, r4, #16
    21da:	a801      	add	r0, sp, #4
    21dc:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    21de:	0a22      	lsrs	r2, r4, #8
    21e0:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    21e2:	7084      	strb	r4, [r0, #2]
		spi_data[3] = wb;
    21e4:	70c6      	strb	r6, [r0, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    21e6:	2104      	movs	r1, #4
    21e8:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    21ea:	4c0b      	ldr	r4, [pc, #44]	; (2218 <WIZCHIP_WRITE+0x5c>)
    21ec:	69a3      	ldr	r3, [r4, #24]
    21ee:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    21f0:	6923      	ldr	r3, [r4, #16]
    21f2:	4798      	blx	r3
}
    21f4:	b002      	add	sp, #8
    21f6:	bd70      	pop	{r4, r5, r6, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    21f8:	4d07      	ldr	r5, [pc, #28]	; (2218 <WIZCHIP_WRITE+0x5c>)
    21fa:	0c20      	lsrs	r0, r4, #16
    21fc:	b2c0      	uxtb	r0, r0
    21fe:	6a2b      	ldr	r3, [r5, #32]
    2200:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    2202:	0a20      	lsrs	r0, r4, #8
    2204:	b2c0      	uxtb	r0, r0
    2206:	6a2b      	ldr	r3, [r5, #32]
    2208:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    220a:	b2e0      	uxtb	r0, r4
    220c:	6a2b      	ldr	r3, [r5, #32]
    220e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
    2210:	6a2b      	ldr	r3, [r5, #32]
    2212:	0030      	movs	r0, r6
    2214:	4798      	blx	r3
    2216:	e7e8      	b.n	21ea <WIZCHIP_WRITE+0x2e>
    2218:	20000028 	.word	0x20000028

0000221c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    221c:	b5f0      	push	{r4, r5, r6, r7, lr}
    221e:	b083      	sub	sp, #12
    2220:	0004      	movs	r4, r0
    2222:	000f      	movs	r7, r1
    2224:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    2226:	4d1c      	ldr	r5, [pc, #112]	; (2298 <WIZCHIP_READ_BUF+0x7c>)
    2228:	68eb      	ldr	r3, [r5, #12]
    222a:	4798      	blx	r3
   WIZCHIP.CS._select();
    222c:	696b      	ldr	r3, [r5, #20]
    222e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    2230:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2232:	2b00      	cmp	r3, #0
    2234:	d017      	beq.n	2266 <WIZCHIP_READ_BUF+0x4a>
    2236:	4b18      	ldr	r3, [pc, #96]	; (2298 <WIZCHIP_READ_BUF+0x7c>)
    2238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    223a:	2b00      	cmp	r3, #0
    223c:	d013      	beq.n	2266 <WIZCHIP_READ_BUF+0x4a>
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    223e:	0c22      	lsrs	r2, r4, #16
    2240:	a801      	add	r0, sp, #4
    2242:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    2244:	0a22      	lsrs	r2, r4, #8
    2246:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    2248:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    224a:	2103      	movs	r1, #3
    224c:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    224e:	4b12      	ldr	r3, [pc, #72]	; (2298 <WIZCHIP_READ_BUF+0x7c>)
    2250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2252:	0031      	movs	r1, r6
    2254:	0038      	movs	r0, r7
    2256:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    2258:	4c0f      	ldr	r4, [pc, #60]	; (2298 <WIZCHIP_READ_BUF+0x7c>)
    225a:	69a3      	ldr	r3, [r4, #24]
    225c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    225e:	6923      	ldr	r3, [r4, #16]
    2260:	4798      	blx	r3
}
    2262:	b003      	add	sp, #12
    2264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    2266:	4d0c      	ldr	r5, [pc, #48]	; (2298 <WIZCHIP_READ_BUF+0x7c>)
    2268:	0c20      	lsrs	r0, r4, #16
    226a:	b2c0      	uxtb	r0, r0
    226c:	6a2b      	ldr	r3, [r5, #32]
    226e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    2270:	0a20      	lsrs	r0, r4, #8
    2272:	b2c0      	uxtb	r0, r0
    2274:	6a2b      	ldr	r3, [r5, #32]
    2276:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    2278:	6a2b      	ldr	r3, [r5, #32]
    227a:	b2e0      	uxtb	r0, r4
    227c:	4798      	blx	r3
		for(i = 0; i < len; i++)
    227e:	2400      	movs	r4, #0
    2280:	e006      	b.n	2290 <WIZCHIP_READ_BUF+0x74>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    2282:	193d      	adds	r5, r7, r4
    2284:	4b04      	ldr	r3, [pc, #16]	; (2298 <WIZCHIP_READ_BUF+0x7c>)
    2286:	69db      	ldr	r3, [r3, #28]
    2288:	4798      	blx	r3
    228a:	7028      	strb	r0, [r5, #0]
		for(i = 0; i < len; i++)
    228c:	3401      	adds	r4, #1
    228e:	b2a4      	uxth	r4, r4
    2290:	42b4      	cmp	r4, r6
    2292:	d3f6      	bcc.n	2282 <WIZCHIP_READ_BUF+0x66>
    2294:	e7e0      	b.n	2258 <WIZCHIP_READ_BUF+0x3c>
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	20000028 	.word	0x20000028

0000229c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    229c:	b5f0      	push	{r4, r5, r6, r7, lr}
    229e:	b083      	sub	sp, #12
    22a0:	0004      	movs	r4, r0
    22a2:	000f      	movs	r7, r1
    22a4:	0016      	movs	r6, r2
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    22a6:	4d1a      	ldr	r5, [pc, #104]	; (2310 <WIZCHIP_WRITE_BUF+0x74>)
    22a8:	68eb      	ldr	r3, [r5, #12]
    22aa:	4798      	blx	r3
   WIZCHIP.CS._select();
    22ac:	696b      	ldr	r3, [r5, #20]
    22ae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    22b0:	2004      	movs	r0, #4
    22b2:	4304      	orrs	r4, r0

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    22b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    22b6:	2b00      	cmp	r3, #0
    22b8:	d013      	beq.n	22e2 <WIZCHIP_WRITE_BUF+0x46>
		for(i = 0; i < len; i++)
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    22ba:	0c22      	lsrs	r2, r4, #16
    22bc:	a801      	add	r0, sp, #4
    22be:	7002      	strb	r2, [r0, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    22c0:	0a22      	lsrs	r2, r4, #8
    22c2:	7042      	strb	r2, [r0, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    22c4:	7084      	strb	r4, [r0, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    22c6:	2103      	movs	r1, #3
    22c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    22ca:	4b11      	ldr	r3, [pc, #68]	; (2310 <WIZCHIP_WRITE_BUF+0x74>)
    22cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    22ce:	0031      	movs	r1, r6
    22d0:	0038      	movs	r0, r7
    22d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
    22d4:	4c0e      	ldr	r4, [pc, #56]	; (2310 <WIZCHIP_WRITE_BUF+0x74>)
    22d6:	69a3      	ldr	r3, [r4, #24]
    22d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
    22da:	6923      	ldr	r3, [r4, #16]
    22dc:	4798      	blx	r3
}
    22de:	b003      	add	sp, #12
    22e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    22e2:	4d0b      	ldr	r5, [pc, #44]	; (2310 <WIZCHIP_WRITE_BUF+0x74>)
    22e4:	0c20      	lsrs	r0, r4, #16
    22e6:	b2c0      	uxtb	r0, r0
    22e8:	6a2b      	ldr	r3, [r5, #32]
    22ea:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    22ec:	0a20      	lsrs	r0, r4, #8
    22ee:	b2c0      	uxtb	r0, r0
    22f0:	6a2b      	ldr	r3, [r5, #32]
    22f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    22f4:	6a2b      	ldr	r3, [r5, #32]
    22f6:	b2e0      	uxtb	r0, r4
    22f8:	4798      	blx	r3
		for(i = 0; i < len; i++)
    22fa:	2400      	movs	r4, #0
    22fc:	e005      	b.n	230a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    22fe:	4b04      	ldr	r3, [pc, #16]	; (2310 <WIZCHIP_WRITE_BUF+0x74>)
    2300:	6a1b      	ldr	r3, [r3, #32]
    2302:	5d38      	ldrb	r0, [r7, r4]
    2304:	4798      	blx	r3
		for(i = 0; i < len; i++)
    2306:	3401      	adds	r4, #1
    2308:	b2a4      	uxth	r4, r4
    230a:	42b4      	cmp	r4, r6
    230c:	d3f7      	bcc.n	22fe <WIZCHIP_WRITE_BUF+0x62>
    230e:	e7e1      	b.n	22d4 <WIZCHIP_WRITE_BUF+0x38>
    2310:	20000028 	.word	0x20000028

00002314 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
    2314:	4770      	bx	lr

00002316 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
    2316:	4770      	bx	lr

00002318 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
    2318:	4770      	bx	lr

0000231a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
    231a:	4770      	bx	lr

0000231c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
    231c:	7800      	ldrb	r0, [r0, #0]
    231e:	b2c0      	uxtb	r0, r0
    2320:	4770      	bx	lr

00002322 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
    2322:	7001      	strb	r1, [r0, #0]
    2324:	4770      	bx	lr

00002326 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
    2326:	2000      	movs	r0, #0
    2328:	4770      	bx	lr

0000232a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
    232a:	4770      	bx	lr

0000232c <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
    232c:	4770      	bx	lr

0000232e <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
    232e:	4770      	bx	lr

00002330 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
    2330:	2800      	cmp	r0, #0
    2332:	d005      	beq.n	2340 <reg_wizchip_cs_cbfunc+0x10>
    2334:	2900      	cmp	r1, #0
    2336:	d003      	beq.n	2340 <reg_wizchip_cs_cbfunc+0x10>
      WIZCHIP.CS._select   = wizchip_cs_select;
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
    2338:	4b04      	ldr	r3, [pc, #16]	; (234c <reg_wizchip_cs_cbfunc+0x1c>)
    233a:	6158      	str	r0, [r3, #20]
      WIZCHIP.CS._deselect = cs_desel;
    233c:	6199      	str	r1, [r3, #24]
   }
}
    233e:	4770      	bx	lr
      WIZCHIP.CS._select   = wizchip_cs_select;
    2340:	4b02      	ldr	r3, [pc, #8]	; (234c <reg_wizchip_cs_cbfunc+0x1c>)
    2342:	4a03      	ldr	r2, [pc, #12]	; (2350 <reg_wizchip_cs_cbfunc+0x20>)
    2344:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
    2346:	4a03      	ldr	r2, [pc, #12]	; (2354 <reg_wizchip_cs_cbfunc+0x24>)
    2348:	619a      	str	r2, [r3, #24]
    234a:	e7f8      	b.n	233e <reg_wizchip_cs_cbfunc+0xe>
    234c:	20000028 	.word	0x20000028
    2350:	00002319 	.word	0x00002319
    2354:	0000231b 	.word	0x0000231b

00002358 <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    2358:	4b08      	ldr	r3, [pc, #32]	; (237c <reg_wizchip_spi_cbfunc+0x24>)
    235a:	881b      	ldrh	r3, [r3, #0]
    235c:	059b      	lsls	r3, r3, #22
    235e:	d5fb      	bpl.n	2358 <reg_wizchip_spi_cbfunc>
   
   if(!spi_rb || !spi_wb)
    2360:	2800      	cmp	r0, #0
    2362:	d005      	beq.n	2370 <reg_wizchip_spi_cbfunc+0x18>
    2364:	2900      	cmp	r1, #0
    2366:	d003      	beq.n	2370 <reg_wizchip_spi_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
    2368:	4b04      	ldr	r3, [pc, #16]	; (237c <reg_wizchip_spi_cbfunc+0x24>)
    236a:	61d8      	str	r0, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
    236c:	6219      	str	r1, [r3, #32]
   }
}
    236e:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
    2370:	4b02      	ldr	r3, [pc, #8]	; (237c <reg_wizchip_spi_cbfunc+0x24>)
    2372:	4a03      	ldr	r2, [pc, #12]	; (2380 <reg_wizchip_spi_cbfunc+0x28>)
    2374:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
    2376:	4a03      	ldr	r2, [pc, #12]	; (2384 <reg_wizchip_spi_cbfunc+0x2c>)
    2378:	621a      	str	r2, [r3, #32]
    237a:	e7f8      	b.n	236e <reg_wizchip_spi_cbfunc+0x16>
    237c:	20000028 	.word	0x20000028
    2380:	00002327 	.word	0x00002327
    2384:	0000232b 	.word	0x0000232b

00002388 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
    2388:	4b08      	ldr	r3, [pc, #32]	; (23ac <reg_wizchip_spiburst_cbfunc+0x24>)
    238a:	881b      	ldrh	r3, [r3, #0]
    238c:	059b      	lsls	r3, r3, #22
    238e:	d5fb      	bpl.n	2388 <reg_wizchip_spiburst_cbfunc>

   if(!spi_rb || !spi_wb)
    2390:	2800      	cmp	r0, #0
    2392:	d005      	beq.n	23a0 <reg_wizchip_spiburst_cbfunc+0x18>
    2394:	2900      	cmp	r1, #0
    2396:	d003      	beq.n	23a0 <reg_wizchip_spiburst_cbfunc+0x18>
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
    2398:	4b04      	ldr	r3, [pc, #16]	; (23ac <reg_wizchip_spiburst_cbfunc+0x24>)
    239a:	6258      	str	r0, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
    239c:	6299      	str	r1, [r3, #40]	; 0x28
   }
}
    239e:	4770      	bx	lr
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
    23a0:	4b02      	ldr	r3, [pc, #8]	; (23ac <reg_wizchip_spiburst_cbfunc+0x24>)
    23a2:	4a03      	ldr	r2, [pc, #12]	; (23b0 <reg_wizchip_spiburst_cbfunc+0x28>)
    23a4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
    23a6:	4a03      	ldr	r2, [pc, #12]	; (23b4 <reg_wizchip_spiburst_cbfunc+0x2c>)
    23a8:	629a      	str	r2, [r3, #40]	; 0x28
    23aa:	e7f8      	b.n	239e <reg_wizchip_spiburst_cbfunc+0x16>
    23ac:	20000028 	.word	0x20000028
    23b0:	0000232d 	.word	0x0000232d
    23b4:	0000232f 	.word	0x0000232f

000023b8 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
    23b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    23ba:	b087      	sub	sp, #28
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
    23bc:	2206      	movs	r2, #6
    23be:	a901      	add	r1, sp, #4
    23c0:	2090      	movs	r0, #144	; 0x90
    23c2:	0100      	lsls	r0, r0, #4
    23c4:	4c17      	ldr	r4, [pc, #92]	; (2424 <wizchip_sw_reset+0x6c>)
    23c6:	47a0      	blx	r4
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
    23c8:	2780      	movs	r7, #128	; 0x80
    23ca:	007f      	lsls	r7, r7, #1
    23cc:	2204      	movs	r2, #4
    23ce:	a905      	add	r1, sp, #20
    23d0:	0038      	movs	r0, r7
    23d2:	47a0      	blx	r4
    23d4:	26a0      	movs	r6, #160	; 0xa0
    23d6:	00f6      	lsls	r6, r6, #3
    23d8:	2204      	movs	r2, #4
    23da:	a904      	add	r1, sp, #16
    23dc:	0030      	movs	r0, r6
    23de:	47a0      	blx	r4
    23e0:	25f0      	movs	r5, #240	; 0xf0
    23e2:	012d      	lsls	r5, r5, #4
    23e4:	2204      	movs	r2, #4
    23e6:	a903      	add	r1, sp, #12
    23e8:	0028      	movs	r0, r5
    23ea:	47a0      	blx	r4
   setMR(MR_RST);
    23ec:	2180      	movs	r1, #128	; 0x80
    23ee:	2000      	movs	r0, #0
    23f0:	4b0d      	ldr	r3, [pc, #52]	; (2428 <wizchip_sw_reset+0x70>)
    23f2:	4798      	blx	r3
   getMR(); // for delay
    23f4:	2000      	movs	r0, #0
    23f6:	4b0d      	ldr	r3, [pc, #52]	; (242c <wizchip_sw_reset+0x74>)
    23f8:	4798      	blx	r3
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
    23fa:	2206      	movs	r2, #6
    23fc:	a901      	add	r1, sp, #4
    23fe:	2090      	movs	r0, #144	; 0x90
    2400:	0100      	lsls	r0, r0, #4
    2402:	4c0b      	ldr	r4, [pc, #44]	; (2430 <wizchip_sw_reset+0x78>)
    2404:	47a0      	blx	r4
   setGAR(gw);
    2406:	2204      	movs	r2, #4
    2408:	a905      	add	r1, sp, #20
    240a:	0038      	movs	r0, r7
    240c:	47a0      	blx	r4
   setSUBR(sn);
    240e:	2204      	movs	r2, #4
    2410:	a904      	add	r1, sp, #16
    2412:	0030      	movs	r0, r6
    2414:	47a0      	blx	r4
   setSIPR(sip);
    2416:	2204      	movs	r2, #4
    2418:	a903      	add	r1, sp, #12
    241a:	0028      	movs	r0, r5
    241c:	47a0      	blx	r4
}
    241e:	b007      	add	sp, #28
    2420:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2422:	46c0      	nop			; (mov r8, r8)
    2424:	0000221d 	.word	0x0000221d
    2428:	000021bd 	.word	0x000021bd
    242c:	00002159 	.word	0x00002159
    2430:	0000229d 	.word	0x0000229d

00002434 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
    2434:	b570      	push	{r4, r5, r6, lr}
    2436:	0006      	movs	r6, r0
    2438:	000d      	movs	r5, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
    243a:	4b24      	ldr	r3, [pc, #144]	; (24cc <wizchip_init+0x98>)
    243c:	4798      	blx	r3
   if(txsize)
    243e:	2e00      	cmp	r6, #0
    2440:	d01b      	beq.n	247a <wizchip_init+0x46>
    2442:	2200      	movs	r2, #0
    2444:	2300      	movs	r3, #0
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    2446:	2b07      	cmp	r3, #7
    2448:	dc07      	bgt.n	245a <wizchip_init+0x26>
		{
			tmp += txsize[i];
    244a:	5cf1      	ldrb	r1, [r6, r3]
    244c:	188a      	adds	r2, r1, r2
    244e:	b252      	sxtb	r2, r2

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    2450:	2a10      	cmp	r2, #16
    2452:	dc34      	bgt.n	24be <wizchip_init+0x8a>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    2454:	3301      	adds	r3, #1
    2456:	b25b      	sxtb	r3, r3
    2458:	e7f5      	b.n	2446 <wizchip_init+0x12>
    245a:	2400      	movs	r4, #0
    245c:	e00b      	b.n	2476 <wizchip_init+0x42>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
    245e:	00a0      	lsls	r0, r4, #2
    2460:	3001      	adds	r0, #1
    2462:	00c0      	lsls	r0, r0, #3
    2464:	23f8      	movs	r3, #248	; 0xf8
    2466:	015b      	lsls	r3, r3, #5
    2468:	469c      	mov	ip, r3
    246a:	4460      	add	r0, ip
    246c:	5d31      	ldrb	r1, [r6, r4]
    246e:	4b18      	ldr	r3, [pc, #96]	; (24d0 <wizchip_init+0x9c>)
    2470:	4798      	blx	r3
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    2472:	3401      	adds	r4, #1
    2474:	b264      	sxtb	r4, r4
    2476:	2c07      	cmp	r4, #7
    2478:	ddf1      	ble.n	245e <wizchip_init+0x2a>
#endif
		}	
   }

   if(rxsize)
    247a:	2d00      	cmp	r5, #0
    247c:	d00b      	beq.n	2496 <wizchip_init+0x62>
    247e:	2200      	movs	r2, #0
    2480:	2300      	movs	r3, #0
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    2482:	2b07      	cmp	r3, #7
    2484:	dc09      	bgt.n	249a <wizchip_init+0x66>
		{
			tmp += rxsize[i];
    2486:	5ce9      	ldrb	r1, [r5, r3]
    2488:	188a      	adds	r2, r1, r2
    248a:	b252      	sxtb	r2, r2
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
    248c:	2a10      	cmp	r2, #16
    248e:	dc19      	bgt.n	24c4 <wizchip_init+0x90>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    2490:	3301      	adds	r3, #1
    2492:	b25b      	sxtb	r3, r3
    2494:	e7f5      	b.n	2482 <wizchip_init+0x4e>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
    2496:	2000      	movs	r0, #0
    2498:	e010      	b.n	24bc <wizchip_init+0x88>
    249a:	2400      	movs	r4, #0
    249c:	e00b      	b.n	24b6 <wizchip_init+0x82>
			setSn_RXBUF_SIZE(i, rxsize[i]);
    249e:	00a0      	lsls	r0, r4, #2
    24a0:	3001      	adds	r0, #1
    24a2:	00c0      	lsls	r0, r0, #3
    24a4:	23f0      	movs	r3, #240	; 0xf0
    24a6:	015b      	lsls	r3, r3, #5
    24a8:	469c      	mov	ip, r3
    24aa:	4460      	add	r0, ip
    24ac:	5d29      	ldrb	r1, [r5, r4]
    24ae:	4b08      	ldr	r3, [pc, #32]	; (24d0 <wizchip_init+0x9c>)
    24b0:	4798      	blx	r3
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
    24b2:	3401      	adds	r4, #1
    24b4:	b264      	sxtb	r4, r4
    24b6:	2c07      	cmp	r4, #7
    24b8:	ddf1      	ble.n	249e <wizchip_init+0x6a>
   return 0;
    24ba:	2000      	movs	r0, #0
}
    24bc:	bd70      	pop	{r4, r5, r6, pc}
			if(tmp > 16) return -1;
    24be:	2001      	movs	r0, #1
    24c0:	4240      	negs	r0, r0
    24c2:	e7fb      	b.n	24bc <wizchip_init+0x88>
			if(tmp > 16) return -1;
    24c4:	2001      	movs	r0, #1
    24c6:	4240      	negs	r0, r0
    24c8:	e7f8      	b.n	24bc <wizchip_init+0x88>
    24ca:	46c0      	nop			; (mov r8, r8)
    24cc:	000023b9 	.word	0x000023b9
    24d0:	000021bd 	.word	0x000021bd

000024d4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
    24d4:	b570      	push	{r4, r5, r6, lr}
   uint8_t ir  = (uint8_t)intr;
    24d6:	b2c1      	uxtb	r1, r0
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
    24d8:	0a05      	lsrs	r5, r0, #8
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
    24da:	230f      	movs	r3, #15
    24dc:	4399      	bics	r1, r3
    24de:	20a8      	movs	r0, #168	; 0xa8
    24e0:	0140      	lsls	r0, r0, #5
    24e2:	4b0c      	ldr	r3, [pc, #48]	; (2514 <wizchip_clrinterrupt+0x40>)
    24e4:	4798      	blx	r3
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
    24e6:	2400      	movs	r4, #0
    24e8:	e001      	b.n	24ee <wizchip_clrinterrupt+0x1a>
    24ea:	3401      	adds	r4, #1
    24ec:	b2e4      	uxtb	r4, r4
    24ee:	2c07      	cmp	r4, #7
    24f0:	d80e      	bhi.n	2510 <wizchip_clrinterrupt+0x3c>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
    24f2:	002b      	movs	r3, r5
    24f4:	4123      	asrs	r3, r4
    24f6:	07db      	lsls	r3, r3, #31
    24f8:	d5f7      	bpl.n	24ea <wizchip_clrinterrupt+0x16>
    24fa:	00a0      	lsls	r0, r4, #2
    24fc:	3001      	adds	r0, #1
    24fe:	00c0      	lsls	r0, r0, #3
    2500:	2380      	movs	r3, #128	; 0x80
    2502:	009b      	lsls	r3, r3, #2
    2504:	469c      	mov	ip, r3
    2506:	4460      	add	r0, ip
    2508:	211f      	movs	r1, #31
    250a:	4b02      	ldr	r3, [pc, #8]	; (2514 <wizchip_clrinterrupt+0x40>)
    250c:	4798      	blx	r3
    250e:	e7ec      	b.n	24ea <wizchip_clrinterrupt+0x16>
   }

#endif   
}
    2510:	bd70      	pop	{r4, r5, r6, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	000021bd 	.word	0x000021bd

00002518 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
    2518:	b570      	push	{r4, r5, r6, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
    251a:	20a8      	movs	r0, #168	; 0xa8
    251c:	0140      	lsls	r0, r0, #5
    251e:	4d07      	ldr	r5, [pc, #28]	; (253c <wizchip_getinterrupt+0x24>)
    2520:	47a8      	blx	r5
    2522:	230f      	movs	r3, #15
    2524:	4398      	bics	r0, r3
    2526:	b2c4      	uxtb	r4, r0
   sir = getSIR();
    2528:	20b8      	movs	r0, #184	; 0xb8
    252a:	0140      	lsls	r0, r0, #5
    252c:	47a8      	blx	r5
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
    252e:	b280      	uxth	r0, r0
  ret = (ret << 8) + ir;
    2530:	0200      	lsls	r0, r0, #8
    2532:	b280      	uxth	r0, r0
    2534:	1820      	adds	r0, r4, r0
    2536:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
    2538:	bd70      	pop	{r4, r5, r6, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	00002159 	.word	0x00002159

00002540 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
    2540:	b570      	push	{r4, r5, r6, lr}
   uint8_t imr  = (uint8_t)intr;
    2542:	b2c1      	uxtb	r1, r0
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
    2544:	0a04      	lsrs	r4, r0, #8
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
    2546:	20b0      	movs	r0, #176	; 0xb0
    2548:	0140      	lsls	r0, r0, #5
    254a:	4d03      	ldr	r5, [pc, #12]	; (2558 <wizchip_setinterruptmask+0x18>)
    254c:	47a8      	blx	r5
   setSIMR(simr);
    254e:	0021      	movs	r1, r4
    2550:	20c0      	movs	r0, #192	; 0xc0
    2552:	0140      	lsls	r0, r0, #5
    2554:	47a8      	blx	r5
#endif   
}
    2556:	bd70      	pop	{r4, r5, r6, pc}
    2558:	000021bd 	.word	0x000021bd

0000255c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
    255c:	b570      	push	{r4, r5, r6, lr}
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
    255e:	20b0      	movs	r0, #176	; 0xb0
    2560:	0140      	lsls	r0, r0, #5
    2562:	4d06      	ldr	r5, [pc, #24]	; (257c <wizchip_getinterruptmask+0x20>)
    2564:	47a8      	blx	r5
    2566:	0004      	movs	r4, r0
   simr = getSIMR();
    2568:	20c0      	movs	r0, #192	; 0xc0
    256a:	0140      	lsls	r0, r0, #5
    256c:	47a8      	blx	r5
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
    256e:	b280      	uxth	r0, r0
  ret = (ret << 8) + imr;
    2570:	0200      	lsls	r0, r0, #8
    2572:	b280      	uxth	r0, r0
    2574:	b2a4      	uxth	r4, r4
    2576:	1900      	adds	r0, r0, r4
    2578:	b280      	uxth	r0, r0
  return (intr_kind)ret;
}
    257a:	bd70      	pop	{r4, r5, r6, pc}
    257c:	00002159 	.word	0x00002159

00002580 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
    2580:	b510      	push	{r4, lr}
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
    2582:	20b8      	movs	r0, #184	; 0xb8
    2584:	0180      	lsls	r0, r0, #6
    2586:	4b04      	ldr	r3, [pc, #16]	; (2598 <wizphy_getphylink+0x18>)
    2588:	4798      	blx	r3
    258a:	07c3      	lsls	r3, r0, #31
    258c:	d501      	bpl.n	2592 <wizphy_getphylink+0x12>
      tmp = PHY_LINK_ON;
    258e:	2001      	movs	r0, #1

#else
   tmp = -1;
#endif
   return tmp;
}
    2590:	bd10      	pop	{r4, pc}
   int8_t tmp = PHY_LINK_OFF;
    2592:	2000      	movs	r0, #0
    2594:	e7fc      	b.n	2590 <wizphy_getphylink+0x10>
    2596:	46c0      	nop			; (mov r8, r8)
    2598:	00002159 	.word	0x00002159

0000259c <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
    259c:	b510      	push	{r4, lr}
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
    259e:	20b8      	movs	r0, #184	; 0xb8
    25a0:	0180      	lsls	r0, r0, #6
    25a2:	4b05      	ldr	r3, [pc, #20]	; (25b8 <wizphy_getphypmode+0x1c>)
    25a4:	4798      	blx	r3
    25a6:	2338      	movs	r3, #56	; 0x38
    25a8:	4018      	ands	r0, r3
    25aa:	2830      	cmp	r0, #48	; 0x30
    25ac:	d001      	beq.n	25b2 <wizphy_getphypmode+0x16>
         tmp = PHY_POWER_DOWN;
      else 
         tmp = PHY_POWER_NORM;
    25ae:	2000      	movs	r0, #0
   #else
      tmp = -1;
   #endif
   return tmp;
}
    25b0:	bd10      	pop	{r4, pc}
         tmp = PHY_POWER_DOWN;
    25b2:	382f      	subs	r0, #47	; 0x2f
    25b4:	e7fc      	b.n	25b0 <wizphy_getphypmode+0x14>
    25b6:	46c0      	nop			; (mov r8, r8)
    25b8:	00002159 	.word	0x00002159

000025bc <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
    25bc:	b570      	push	{r4, r5, r6, lr}
   uint8_t tmp = getPHYCFGR();
    25be:	24b8      	movs	r4, #184	; 0xb8
    25c0:	01a4      	lsls	r4, r4, #6
    25c2:	0020      	movs	r0, r4
    25c4:	4e07      	ldr	r6, [pc, #28]	; (25e4 <wizphy_reset+0x28>)
    25c6:	47b0      	blx	r6
   tmp &= PHYCFGR_RST;
    25c8:	217f      	movs	r1, #127	; 0x7f
    25ca:	4001      	ands	r1, r0
   setPHYCFGR(tmp);
    25cc:	0020      	movs	r0, r4
    25ce:	4d06      	ldr	r5, [pc, #24]	; (25e8 <wizphy_reset+0x2c>)
    25d0:	47a8      	blx	r5
   tmp = getPHYCFGR();
    25d2:	0020      	movs	r0, r4
    25d4:	47b0      	blx	r6
   tmp |= ~PHYCFGR_RST;
    25d6:	2180      	movs	r1, #128	; 0x80
    25d8:	4249      	negs	r1, r1
    25da:	4301      	orrs	r1, r0
    25dc:	b2c9      	uxtb	r1, r1
   setPHYCFGR(tmp);
    25de:	0020      	movs	r0, r4
    25e0:	47a8      	blx	r5
}
    25e2:	bd70      	pop	{r4, r5, r6, pc}
    25e4:	00002159 	.word	0x00002159
    25e8:	000021bd 	.word	0x000021bd

000025ec <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
    25ec:	b510      	push	{r4, lr}
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
    25ee:	7803      	ldrb	r3, [r0, #0]
    25f0:	2b01      	cmp	r3, #1
    25f2:	d010      	beq.n	2616 <wizphy_setphyconf+0x2a>
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
    25f4:	2100      	movs	r1, #0
   if(phyconf->mode == PHY_MODE_AUTONEGO)
    25f6:	7843      	ldrb	r3, [r0, #1]
    25f8:	2b01      	cmp	r3, #1
    25fa:	d00e      	beq.n	261a <wizphy_setphyconf+0x2e>
      tmp |= PHYCFGR_OPMDC_ALLA;
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
    25fc:	78c3      	ldrb	r3, [r0, #3]
    25fe:	2b01      	cmp	r3, #1
    2600:	d00f      	beq.n	2622 <wizphy_setphyconf+0x36>
         else
            tmp |= PHYCFGR_OPMDC_10F;
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
    2602:	7883      	ldrb	r3, [r0, #2]
    2604:	2b01      	cmp	r3, #1
    2606:	d017      	beq.n	2638 <wizphy_setphyconf+0x4c>
            tmp |= PHYCFGR_OPMDC_100H;
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
    2608:	20b8      	movs	r0, #184	; 0xb8
    260a:	0180      	lsls	r0, r0, #6
    260c:	4b0c      	ldr	r3, [pc, #48]	; (2640 <wizphy_setphyconf+0x54>)
    260e:	4798      	blx	r3
   wizphy_reset();
    2610:	4b0c      	ldr	r3, [pc, #48]	; (2644 <wizphy_setphyconf+0x58>)
    2612:	4798      	blx	r3
}
    2614:	bd10      	pop	{r4, pc}
      tmp |= PHYCFGR_OPMD;
    2616:	2140      	movs	r1, #64	; 0x40
    2618:	e7ed      	b.n	25f6 <wizphy_setphyconf+0xa>
      tmp |= PHYCFGR_OPMDC_ALLA;
    261a:	2338      	movs	r3, #56	; 0x38
    261c:	4319      	orrs	r1, r3
    261e:	b2c9      	uxtb	r1, r1
    2620:	e7f2      	b.n	2608 <wizphy_setphyconf+0x1c>
         if(phyconf->speed == PHY_SPEED_100)
    2622:	7883      	ldrb	r3, [r0, #2]
    2624:	2b01      	cmp	r3, #1
    2626:	d003      	beq.n	2630 <wizphy_setphyconf+0x44>
            tmp |= PHYCFGR_OPMDC_10F;
    2628:	2308      	movs	r3, #8
    262a:	4319      	orrs	r1, r3
    262c:	b2c9      	uxtb	r1, r1
    262e:	e7eb      	b.n	2608 <wizphy_setphyconf+0x1c>
            tmp |= PHYCFGR_OPMDC_100F;
    2630:	2318      	movs	r3, #24
    2632:	4319      	orrs	r1, r3
    2634:	b2c9      	uxtb	r1, r1
    2636:	e7e7      	b.n	2608 <wizphy_setphyconf+0x1c>
            tmp |= PHYCFGR_OPMDC_100H;
    2638:	2310      	movs	r3, #16
    263a:	4319      	orrs	r1, r3
    263c:	b2c9      	uxtb	r1, r1
    263e:	e7e3      	b.n	2608 <wizphy_setphyconf+0x1c>
    2640:	000021bd 	.word	0x000021bd
    2644:	000025bd 	.word	0x000025bd

00002648 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
    2648:	b510      	push	{r4, lr}
    264a:	0004      	movs	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    264c:	20b8      	movs	r0, #184	; 0xb8
    264e:	0180      	lsls	r0, r0, #6
    2650:	4b13      	ldr	r3, [pc, #76]	; (26a0 <wizphy_getphyconf+0x58>)
    2652:	4798      	blx	r3
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
    2654:	0982      	lsrs	r2, r0, #6
    2656:	2301      	movs	r3, #1
    2658:	4013      	ands	r3, r2
    265a:	7023      	strb	r3, [r4, #0]
    265c:	2338      	movs	r3, #56	; 0x38
    265e:	4018      	ands	r0, r3
   switch(tmp & PHYCFGR_OPMDC_ALLA)
    2660:	2820      	cmp	r0, #32
    2662:	d004      	beq.n	266e <wizphy_getphyconf+0x26>
    2664:	2838      	cmp	r0, #56	; 0x38
    2666:	d002      	beq.n	266e <wizphy_getphyconf+0x26>
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
    2668:	2300      	movs	r3, #0
    266a:	7063      	strb	r3, [r4, #1]
         break;
    266c:	e001      	b.n	2672 <wizphy_getphyconf+0x2a>
         phyconf->mode = PHY_MODE_AUTONEGO;
    266e:	2301      	movs	r3, #1
    2670:	7063      	strb	r3, [r4, #1]
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
    2672:	2818      	cmp	r0, #24
    2674:	d006      	beq.n	2684 <wizphy_getphyconf+0x3c>
    2676:	2820      	cmp	r0, #32
    2678:	d004      	beq.n	2684 <wizphy_getphyconf+0x3c>
    267a:	2810      	cmp	r0, #16
    267c:	d002      	beq.n	2684 <wizphy_getphyconf+0x3c>
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
         break;
      default:
         phyconf->speed = PHY_SPEED_10;
    267e:	2300      	movs	r3, #0
    2680:	70a3      	strb	r3, [r4, #2]
         break;
    2682:	e001      	b.n	2688 <wizphy_getphyconf+0x40>
         phyconf->speed = PHY_SPEED_100;
    2684:	2301      	movs	r3, #1
    2686:	70a3      	strb	r3, [r4, #2]
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
    2688:	2818      	cmp	r0, #24
    268a:	d006      	beq.n	269a <wizphy_getphyconf+0x52>
    268c:	2820      	cmp	r0, #32
    268e:	d004      	beq.n	269a <wizphy_getphyconf+0x52>
    2690:	2808      	cmp	r0, #8
    2692:	d002      	beq.n	269a <wizphy_getphyconf+0x52>
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
    2694:	2300      	movs	r3, #0
    2696:	70e3      	strb	r3, [r4, #3]
         break;
   }
}
    2698:	bd10      	pop	{r4, pc}
         phyconf->duplex = PHY_DUPLEX_FULL;
    269a:	2301      	movs	r3, #1
    269c:	70e3      	strb	r3, [r4, #3]
         break;
    269e:	e7fb      	b.n	2698 <wizphy_getphyconf+0x50>
    26a0:	00002159 	.word	0x00002159

000026a4 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
    26a4:	b570      	push	{r4, r5, r6, lr}
    26a6:	0004      	movs	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
    26a8:	20b8      	movs	r0, #184	; 0xb8
    26aa:	0180      	lsls	r0, r0, #6
    26ac:	4b17      	ldr	r3, [pc, #92]	; (270c <wizphy_setphypmode+0x68>)
    26ae:	4798      	blx	r3
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    26b0:	0643      	lsls	r3, r0, #25
    26b2:	d527      	bpl.n	2704 <wizphy_setphypmode+0x60>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
    26b4:	2338      	movs	r3, #56	; 0x38
    26b6:	4398      	bics	r0, r3
    26b8:	b2c0      	uxtb	r0, r0
   if( pmode == PHY_POWER_DOWN)
    26ba:	2c01      	cmp	r4, #1
    26bc:	d013      	beq.n	26e6 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
    26be:	2138      	movs	r1, #56	; 0x38
    26c0:	4301      	orrs	r1, r0
    26c2:	b2c9      	uxtb	r1, r1
   setPHYCFGR(tmp);
    26c4:	25b8      	movs	r5, #184	; 0xb8
    26c6:	01ad      	lsls	r5, r5, #6
    26c8:	0028      	movs	r0, r5
    26ca:	4b11      	ldr	r3, [pc, #68]	; (2710 <wizphy_setphypmode+0x6c>)
    26cc:	4798      	blx	r3
   wizphy_reset();
    26ce:	4b11      	ldr	r3, [pc, #68]	; (2714 <wizphy_setphypmode+0x70>)
    26d0:	4798      	blx	r3
   tmp = getPHYCFGR();
    26d2:	0028      	movs	r0, r5
    26d4:	4b0d      	ldr	r3, [pc, #52]	; (270c <wizphy_setphypmode+0x68>)
    26d6:	4798      	blx	r3
   if( pmode == PHY_POWER_DOWN)
    26d8:	2c01      	cmp	r4, #1
    26da:	d008      	beq.n	26ee <wizphy_setphypmode+0x4a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
    26dc:	2338      	movs	r3, #56	; 0x38
    26de:	4203      	tst	r3, r0
    26e0:	d00d      	beq.n	26fe <wizphy_setphypmode+0x5a>
    26e2:	2000      	movs	r0, #0
   }
   return -1;
}
    26e4:	bd70      	pop	{r4, r5, r6, pc}
      tmp |= PHYCFGR_OPMDC_PDOWN;
    26e6:	2130      	movs	r1, #48	; 0x30
    26e8:	4301      	orrs	r1, r0
    26ea:	b2c9      	uxtb	r1, r1
    26ec:	e7ea      	b.n	26c4 <wizphy_setphypmode+0x20>
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
    26ee:	2330      	movs	r3, #48	; 0x30
    26f0:	4203      	tst	r3, r0
    26f2:	d001      	beq.n	26f8 <wizphy_setphypmode+0x54>
    26f4:	2000      	movs	r0, #0
    26f6:	e7f5      	b.n	26e4 <wizphy_setphypmode+0x40>
   return -1;
    26f8:	2001      	movs	r0, #1
    26fa:	4240      	negs	r0, r0
    26fc:	e7f2      	b.n	26e4 <wizphy_setphypmode+0x40>
    26fe:	2001      	movs	r0, #1
    2700:	4240      	negs	r0, r0
    2702:	e7ef      	b.n	26e4 <wizphy_setphypmode+0x40>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
    2704:	2001      	movs	r0, #1
    2706:	4240      	negs	r0, r0
    2708:	e7ec      	b.n	26e4 <wizphy_setphypmode+0x40>
    270a:	46c0      	nop			; (mov r8, r8)
    270c:	00002159 	.word	0x00002159
    2710:	000021bd 	.word	0x000021bd
    2714:	000025bd 	.word	0x000025bd

00002718 <ctlwizchip>:
{
    2718:	b570      	push	{r4, r5, r6, lr}
    271a:	b082      	sub	sp, #8
    271c:	000c      	movs	r4, r1
   uint8_t* ptmp[2] = {0,0};
    271e:	2300      	movs	r3, #0
    2720:	9300      	str	r3, [sp, #0]
    2722:	9301      	str	r3, [sp, #4]
   switch(cwtype)
    2724:	280f      	cmp	r0, #15
    2726:	d803      	bhi.n	2730 <ctlwizchip+0x18>
    2728:	0080      	lsls	r0, r0, #2
    272a:	4b3f      	ldr	r3, [pc, #252]	; (2828 <ctlwizchip+0x110>)
    272c:	581b      	ldr	r3, [r3, r0]
    272e:	469f      	mov	pc, r3
         return -1;
    2730:	2001      	movs	r0, #1
    2732:	4240      	negs	r0, r0
    2734:	e070      	b.n	2818 <ctlwizchip+0x100>
         wizchip_sw_reset();
    2736:	4b3d      	ldr	r3, [pc, #244]	; (282c <ctlwizchip+0x114>)
    2738:	4798      	blx	r3
   return 0;
    273a:	2000      	movs	r0, #0
         break;
    273c:	e06c      	b.n	2818 <ctlwizchip+0x100>
         if(arg != 0) 
    273e:	2900      	cmp	r1, #0
    2740:	d002      	beq.n	2748 <ctlwizchip+0x30>
            ptmp[0] = (uint8_t*)arg;
    2742:	9100      	str	r1, [sp, #0]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
    2744:	3408      	adds	r4, #8
    2746:	9401      	str	r4, [sp, #4]
         return wizchip_init(ptmp[0], ptmp[1]);
    2748:	9901      	ldr	r1, [sp, #4]
    274a:	9800      	ldr	r0, [sp, #0]
    274c:	4b38      	ldr	r3, [pc, #224]	; (2830 <ctlwizchip+0x118>)
    274e:	4798      	blx	r3
    2750:	e062      	b.n	2818 <ctlwizchip+0x100>
         wizchip_clrinterrupt(*((intr_kind*)arg));
    2752:	8808      	ldrh	r0, [r1, #0]
    2754:	4b37      	ldr	r3, [pc, #220]	; (2834 <ctlwizchip+0x11c>)
    2756:	4798      	blx	r3
   return 0;
    2758:	2000      	movs	r0, #0
         break;
    275a:	e05d      	b.n	2818 <ctlwizchip+0x100>
        *((intr_kind*)arg) = wizchip_getinterrupt();
    275c:	4b36      	ldr	r3, [pc, #216]	; (2838 <ctlwizchip+0x120>)
    275e:	4798      	blx	r3
    2760:	8020      	strh	r0, [r4, #0]
   return 0;
    2762:	2000      	movs	r0, #0
         break;
    2764:	e058      	b.n	2818 <ctlwizchip+0x100>
         wizchip_setinterruptmask(*((intr_kind*)arg));
    2766:	8808      	ldrh	r0, [r1, #0]
    2768:	4b34      	ldr	r3, [pc, #208]	; (283c <ctlwizchip+0x124>)
    276a:	4798      	blx	r3
   return 0;
    276c:	2000      	movs	r0, #0
         break;         
    276e:	e053      	b.n	2818 <ctlwizchip+0x100>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
    2770:	4b33      	ldr	r3, [pc, #204]	; (2840 <ctlwizchip+0x128>)
    2772:	4798      	blx	r3
    2774:	8020      	strh	r0, [r4, #0]
   return 0;
    2776:	2000      	movs	r0, #0
         break;
    2778:	e04e      	b.n	2818 <ctlwizchip+0x100>
         setINTLEVEL(*(uint16_t*)arg);
    277a:	8809      	ldrh	r1, [r1, #0]
    277c:	0a09      	lsrs	r1, r1, #8
    277e:	2098      	movs	r0, #152	; 0x98
    2780:	0140      	lsls	r0, r0, #5
    2782:	4d30      	ldr	r5, [pc, #192]	; (2844 <ctlwizchip+0x12c>)
    2784:	47a8      	blx	r5
    2786:	7821      	ldrb	r1, [r4, #0]
    2788:	20a0      	movs	r0, #160	; 0xa0
    278a:	0140      	lsls	r0, r0, #5
    278c:	47a8      	blx	r5
   return 0;
    278e:	2000      	movs	r0, #0
         break;
    2790:	e042      	b.n	2818 <ctlwizchip+0x100>
         *(uint16_t*)arg = getINTLEVEL();
    2792:	2098      	movs	r0, #152	; 0x98
    2794:	0140      	lsls	r0, r0, #5
    2796:	4e2c      	ldr	r6, [pc, #176]	; (2848 <ctlwizchip+0x130>)
    2798:	47b0      	blx	r6
    279a:	b280      	uxth	r0, r0
    279c:	0200      	lsls	r0, r0, #8
    279e:	b285      	uxth	r5, r0
    27a0:	20a0      	movs	r0, #160	; 0xa0
    27a2:	0140      	lsls	r0, r0, #5
    27a4:	47b0      	blx	r6
    27a6:	b280      	uxth	r0, r0
    27a8:	182d      	adds	r5, r5, r0
    27aa:	8025      	strh	r5, [r4, #0]
   return 0;
    27ac:	2000      	movs	r0, #0
         break;
    27ae:	e033      	b.n	2818 <ctlwizchip+0x100>
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
    27b0:	4b26      	ldr	r3, [pc, #152]	; (284c <ctlwizchip+0x134>)
    27b2:	789a      	ldrb	r2, [r3, #2]
    27b4:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
    27b6:	78da      	ldrb	r2, [r3, #3]
    27b8:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
    27ba:	791a      	ldrb	r2, [r3, #4]
    27bc:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
    27be:	795a      	ldrb	r2, [r3, #5]
    27c0:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
    27c2:	799a      	ldrb	r2, [r3, #6]
    27c4:	710a      	strb	r2, [r1, #4]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
    27c6:	79db      	ldrb	r3, [r3, #7]
    27c8:	714b      	strb	r3, [r1, #5]
         ((uint8_t*)arg)[6] = 0;
    27ca:	2300      	movs	r3, #0
    27cc:	718b      	strb	r3, [r1, #6]
   return 0;
    27ce:	2000      	movs	r0, #0
         break;
    27d0:	e022      	b.n	2818 <ctlwizchip+0x100>
         wizphy_reset();
    27d2:	4b1f      	ldr	r3, [pc, #124]	; (2850 <ctlwizchip+0x138>)
    27d4:	4798      	blx	r3
   return 0;
    27d6:	2000      	movs	r0, #0
         break;
    27d8:	e01e      	b.n	2818 <ctlwizchip+0x100>
         wizphy_setphyconf((wiz_PhyConf*)arg);
    27da:	0008      	movs	r0, r1
    27dc:	4b1d      	ldr	r3, [pc, #116]	; (2854 <ctlwizchip+0x13c>)
    27de:	4798      	blx	r3
   return 0;
    27e0:	2000      	movs	r0, #0
         break;
    27e2:	e019      	b.n	2818 <ctlwizchip+0x100>
         wizphy_getphyconf((wiz_PhyConf*)arg);
    27e4:	0008      	movs	r0, r1
    27e6:	4b1c      	ldr	r3, [pc, #112]	; (2858 <ctlwizchip+0x140>)
    27e8:	4798      	blx	r3
   return 0;
    27ea:	2000      	movs	r0, #0
         break;
    27ec:	e014      	b.n	2818 <ctlwizchip+0x100>
         return wizphy_setphypmode(*(uint8_t*)arg);
    27ee:	7808      	ldrb	r0, [r1, #0]
    27f0:	4b1a      	ldr	r3, [pc, #104]	; (285c <ctlwizchip+0x144>)
    27f2:	4798      	blx	r3
    27f4:	e010      	b.n	2818 <ctlwizchip+0x100>
         tmp = wizphy_getphypmode();
    27f6:	4b1a      	ldr	r3, [pc, #104]	; (2860 <ctlwizchip+0x148>)
    27f8:	4798      	blx	r3
    27fa:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
    27fc:	28ff      	cmp	r0, #255	; 0xff
    27fe:	d00d      	beq.n	281c <ctlwizchip+0x104>
         *(uint8_t*)arg = tmp;
    2800:	7020      	strb	r0, [r4, #0]
   return 0;
    2802:	2000      	movs	r0, #0
         break;
    2804:	e008      	b.n	2818 <ctlwizchip+0x100>
         tmp = wizphy_getphylink();
    2806:	4b17      	ldr	r3, [pc, #92]	; (2864 <ctlwizchip+0x14c>)
    2808:	4798      	blx	r3
    280a:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
    280c:	28ff      	cmp	r0, #255	; 0xff
    280e:	d008      	beq.n	2822 <ctlwizchip+0x10a>
         *(uint8_t*)arg = tmp;
    2810:	7020      	strb	r0, [r4, #0]
   return 0;
    2812:	2000      	movs	r0, #0
         break;
    2814:	e000      	b.n	2818 <ctlwizchip+0x100>
   return 0;
    2816:	2000      	movs	r0, #0
}
    2818:	b002      	add	sp, #8
    281a:	bd70      	pop	{r4, r5, r6, pc}
         if((int8_t)tmp == -1) return -1;
    281c:	2001      	movs	r0, #1
    281e:	4240      	negs	r0, r0
    2820:	e7fa      	b.n	2818 <ctlwizchip+0x100>
         if((int8_t)tmp == -1) return -1;
    2822:	2001      	movs	r0, #1
    2824:	4240      	negs	r0, r0
    2826:	e7f7      	b.n	2818 <ctlwizchip+0x100>
    2828:	0000374c 	.word	0x0000374c
    282c:	000023b9 	.word	0x000023b9
    2830:	00002435 	.word	0x00002435
    2834:	000024d5 	.word	0x000024d5
    2838:	00002519 	.word	0x00002519
    283c:	00002541 	.word	0x00002541
    2840:	0000255d 	.word	0x0000255d
    2844:	000021bd 	.word	0x000021bd
    2848:	00002159 	.word	0x00002159
    284c:	20000028 	.word	0x20000028
    2850:	000025bd 	.word	0x000025bd
    2854:	000025ed 	.word	0x000025ed
    2858:	00002649 	.word	0x00002649
    285c:	000026a5 	.word	0x000026a5
    2860:	0000259d 	.word	0x0000259d
    2864:	00002581 	.word	0x00002581

00002868 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    2868:	b570      	push	{r4, r5, r6, lr}
    286a:	0004      	movs	r4, r0
   setSHAR(pnetinfo->mac);
    286c:	2206      	movs	r2, #6
    286e:	0001      	movs	r1, r0
    2870:	2090      	movs	r0, #144	; 0x90
    2872:	0100      	lsls	r0, r0, #4
    2874:	4d0f      	ldr	r5, [pc, #60]	; (28b4 <wizchip_setnetinfo+0x4c>)
    2876:	47a8      	blx	r5
   setGAR(pnetinfo->gw);
    2878:	0021      	movs	r1, r4
    287a:	310e      	adds	r1, #14
    287c:	2204      	movs	r2, #4
    287e:	2080      	movs	r0, #128	; 0x80
    2880:	0040      	lsls	r0, r0, #1
    2882:	47a8      	blx	r5
   setSUBR(pnetinfo->sn);
    2884:	0021      	movs	r1, r4
    2886:	310a      	adds	r1, #10
    2888:	2204      	movs	r2, #4
    288a:	20a0      	movs	r0, #160	; 0xa0
    288c:	00c0      	lsls	r0, r0, #3
    288e:	47a8      	blx	r5
   setSIPR(pnetinfo->ip);
    2890:	1da1      	adds	r1, r4, #6
    2892:	2204      	movs	r2, #4
    2894:	20f0      	movs	r0, #240	; 0xf0
    2896:	0100      	lsls	r0, r0, #4
    2898:	47a8      	blx	r5
   _DNS_[0] = pnetinfo->dns[0];
    289a:	7ca2      	ldrb	r2, [r4, #18]
    289c:	4b06      	ldr	r3, [pc, #24]	; (28b8 <wizchip_setnetinfo+0x50>)
    289e:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
    28a0:	7ce2      	ldrb	r2, [r4, #19]
    28a2:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
    28a4:	7d22      	ldrb	r2, [r4, #20]
    28a6:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
    28a8:	7d62      	ldrb	r2, [r4, #21]
    28aa:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
    28ac:	7da2      	ldrb	r2, [r4, #22]
    28ae:	711a      	strb	r2, [r3, #4]
}
    28b0:	bd70      	pop	{r4, r5, r6, pc}
    28b2:	46c0      	nop			; (mov r8, r8)
    28b4:	0000229d 	.word	0x0000229d
    28b8:	20000124 	.word	0x20000124

000028bc <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    28bc:	b570      	push	{r4, r5, r6, lr}
    28be:	0004      	movs	r4, r0
   getSHAR(pnetinfo->mac);
    28c0:	2206      	movs	r2, #6
    28c2:	0001      	movs	r1, r0
    28c4:	2090      	movs	r0, #144	; 0x90
    28c6:	0100      	lsls	r0, r0, #4
    28c8:	4d0f      	ldr	r5, [pc, #60]	; (2908 <wizchip_getnetinfo+0x4c>)
    28ca:	47a8      	blx	r5
   getGAR(pnetinfo->gw);
    28cc:	0021      	movs	r1, r4
    28ce:	310e      	adds	r1, #14
    28d0:	2204      	movs	r2, #4
    28d2:	2080      	movs	r0, #128	; 0x80
    28d4:	0040      	lsls	r0, r0, #1
    28d6:	47a8      	blx	r5
   getSUBR(pnetinfo->sn);
    28d8:	0021      	movs	r1, r4
    28da:	310a      	adds	r1, #10
    28dc:	2204      	movs	r2, #4
    28de:	20a0      	movs	r0, #160	; 0xa0
    28e0:	00c0      	lsls	r0, r0, #3
    28e2:	47a8      	blx	r5
   getSIPR(pnetinfo->ip);
    28e4:	1da1      	adds	r1, r4, #6
    28e6:	2204      	movs	r2, #4
    28e8:	20f0      	movs	r0, #240	; 0xf0
    28ea:	0100      	lsls	r0, r0, #4
    28ec:	47a8      	blx	r5
   pnetinfo->dns[0]= _DNS_[0];
    28ee:	4b07      	ldr	r3, [pc, #28]	; (290c <wizchip_getnetinfo+0x50>)
    28f0:	781a      	ldrb	r2, [r3, #0]
    28f2:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
    28f4:	785a      	ldrb	r2, [r3, #1]
    28f6:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
    28f8:	789a      	ldrb	r2, [r3, #2]
    28fa:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
    28fc:	78da      	ldrb	r2, [r3, #3]
    28fe:	7562      	strb	r2, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
    2900:	791b      	ldrb	r3, [r3, #4]
    2902:	75a3      	strb	r3, [r4, #22]
}
    2904:	bd70      	pop	{r4, r5, r6, pc}
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	0000221d 	.word	0x0000221d
    290c:	20000124 	.word	0x20000124

00002910 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
    2910:	b510      	push	{r4, lr}
    2912:	0004      	movs	r4, r0
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    2914:	233a      	movs	r3, #58	; 0x3a
    2916:	0002      	movs	r2, r0
    2918:	439a      	bics	r2, r3
    291a:	d109      	bne.n	2930 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
    291c:	2000      	movs	r0, #0
    291e:	4b06      	ldr	r3, [pc, #24]	; (2938 <wizchip_setnetmode+0x28>)
    2920:	4798      	blx	r3
   tmp |= (uint8_t)netmode;
    2922:	4304      	orrs	r4, r0
    2924:	b2e1      	uxtb	r1, r4
   setMR(tmp);
    2926:	2000      	movs	r0, #0
    2928:	4b04      	ldr	r3, [pc, #16]	; (293c <wizchip_setnetmode+0x2c>)
    292a:	4798      	blx	r3
   return 0;
    292c:	2000      	movs	r0, #0
}
    292e:	bd10      	pop	{r4, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    2930:	2001      	movs	r0, #1
    2932:	4240      	negs	r0, r0
    2934:	e7fb      	b.n	292e <wizchip_setnetmode+0x1e>
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	00002159 	.word	0x00002159
    293c:	000021bd 	.word	0x000021bd

00002940 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
    2940:	b510      	push	{r4, lr}
   return (netmode_type) getMR();
    2942:	2000      	movs	r0, #0
    2944:	4b01      	ldr	r3, [pc, #4]	; (294c <wizchip_getnetmode+0xc>)
    2946:	4798      	blx	r3
}
    2948:	bd10      	pop	{r4, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	00002159 	.word	0x00002159

00002950 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
    2950:	b570      	push	{r4, r5, r6, lr}
    2952:	0005      	movs	r5, r0
   setRCR(nettime->retry_cnt);
    2954:	7801      	ldrb	r1, [r0, #0]
    2956:	20d8      	movs	r0, #216	; 0xd8
    2958:	0140      	lsls	r0, r0, #5
    295a:	4c06      	ldr	r4, [pc, #24]	; (2974 <wizchip_settimeout+0x24>)
    295c:	47a0      	blx	r4
   setRTR(nettime->time_100us);
    295e:	8869      	ldrh	r1, [r5, #2]
    2960:	0a09      	lsrs	r1, r1, #8
    2962:	20c8      	movs	r0, #200	; 0xc8
    2964:	0140      	lsls	r0, r0, #5
    2966:	47a0      	blx	r4
    2968:	78a9      	ldrb	r1, [r5, #2]
    296a:	20d0      	movs	r0, #208	; 0xd0
    296c:	0140      	lsls	r0, r0, #5
    296e:	47a0      	blx	r4
}
    2970:	bd70      	pop	{r4, r5, r6, pc}
    2972:	46c0      	nop			; (mov r8, r8)
    2974:	000021bd 	.word	0x000021bd

00002978 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
    2978:	b570      	push	{r4, r5, r6, lr}
    297a:	0005      	movs	r5, r0
   nettime->retry_cnt = getRCR();
    297c:	20d8      	movs	r0, #216	; 0xd8
    297e:	0140      	lsls	r0, r0, #5
    2980:	4e07      	ldr	r6, [pc, #28]	; (29a0 <wizchip_gettimeout+0x28>)
    2982:	47b0      	blx	r6
    2984:	7028      	strb	r0, [r5, #0]
   nettime->time_100us = getRTR();
    2986:	20c8      	movs	r0, #200	; 0xc8
    2988:	0140      	lsls	r0, r0, #5
    298a:	47b0      	blx	r6
    298c:	b280      	uxth	r0, r0
    298e:	0200      	lsls	r0, r0, #8
    2990:	b284      	uxth	r4, r0
    2992:	20d0      	movs	r0, #208	; 0xd0
    2994:	0140      	lsls	r0, r0, #5
    2996:	47b0      	blx	r6
    2998:	b280      	uxth	r0, r0
    299a:	1824      	adds	r4, r4, r0
    299c:	806c      	strh	r4, [r5, #2]
}
    299e:	bd70      	pop	{r4, r5, r6, pc}
    29a0:	00002159 	.word	0x00002159

000029a4 <ctlnetwork>:
{
    29a4:	b510      	push	{r4, lr}
    29a6:	000c      	movs	r4, r1
   switch(cntype)
    29a8:	2805      	cmp	r0, #5
    29aa:	d820      	bhi.n	29ee <ctlnetwork+0x4a>
    29ac:	0080      	lsls	r0, r0, #2
    29ae:	4b11      	ldr	r3, [pc, #68]	; (29f4 <ctlnetwork+0x50>)
    29b0:	581b      	ldr	r3, [r3, r0]
    29b2:	469f      	mov	pc, r3
         wizchip_setnetinfo((wiz_NetInfo*)arg);
    29b4:	0008      	movs	r0, r1
    29b6:	4b10      	ldr	r3, [pc, #64]	; (29f8 <ctlnetwork+0x54>)
    29b8:	4798      	blx	r3
   return 0;
    29ba:	2000      	movs	r0, #0
}
    29bc:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
    29be:	0008      	movs	r0, r1
    29c0:	4b0e      	ldr	r3, [pc, #56]	; (29fc <ctlnetwork+0x58>)
    29c2:	4798      	blx	r3
   return 0;
    29c4:	2000      	movs	r0, #0
         break;
    29c6:	e7f9      	b.n	29bc <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
    29c8:	7808      	ldrb	r0, [r1, #0]
    29ca:	4b0d      	ldr	r3, [pc, #52]	; (2a00 <ctlnetwork+0x5c>)
    29cc:	4798      	blx	r3
    29ce:	e7f5      	b.n	29bc <ctlnetwork+0x18>
         *(netmode_type*)arg = wizchip_getnetmode();
    29d0:	4b0c      	ldr	r3, [pc, #48]	; (2a04 <ctlnetwork+0x60>)
    29d2:	4798      	blx	r3
    29d4:	7020      	strb	r0, [r4, #0]
   return 0;
    29d6:	2000      	movs	r0, #0
         break;
    29d8:	e7f0      	b.n	29bc <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
    29da:	0008      	movs	r0, r1
    29dc:	4b0a      	ldr	r3, [pc, #40]	; (2a08 <ctlnetwork+0x64>)
    29de:	4798      	blx	r3
   return 0;
    29e0:	2000      	movs	r0, #0
         break;
    29e2:	e7eb      	b.n	29bc <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
    29e4:	0008      	movs	r0, r1
    29e6:	4b09      	ldr	r3, [pc, #36]	; (2a0c <ctlnetwork+0x68>)
    29e8:	4798      	blx	r3
   return 0;
    29ea:	2000      	movs	r0, #0
         break;
    29ec:	e7e6      	b.n	29bc <ctlnetwork+0x18>
         return -1;
    29ee:	2001      	movs	r0, #1
    29f0:	4240      	negs	r0, r0
    29f2:	e7e3      	b.n	29bc <ctlnetwork+0x18>
    29f4:	0000378c 	.word	0x0000378c
    29f8:	00002869 	.word	0x00002869
    29fc:	000028bd 	.word	0x000028bd
    2a00:	00002911 	.word	0x00002911
    2a04:	00002941 	.word	0x00002941
    2a08:	00002951 	.word	0x00002951
    2a0c:	00002979 	.word	0x00002979

00002a10 <main>:
uint8_t rx_tx_buff_sizes[]={2,2,2,2,2,2,2,2};
	
	

int main(void)
{
    2a10:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a12:	46de      	mov	lr, fp
    2a14:	4657      	mov	r7, sl
    2a16:	464e      	mov	r6, r9
    2a18:	4645      	mov	r5, r8
    2a1a:	b5e0      	push	{r5, r6, r7, lr}
    2a1c:	b089      	sub	sp, #36	; 0x24
	/* Initializes MCU, drivers and middleware */
	//atmel_start_init();

	mcu_init();
    2a1e:	4b50      	ldr	r3, [pc, #320]	; (2b60 <main+0x150>)
    2a20:	4798      	blx	r3
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
    2a22:	4950      	ldr	r1, [pc, #320]	; (2b64 <main+0x154>)
    2a24:	4850      	ldr	r0, [pc, #320]	; (2b68 <main+0x158>)
    2a26:	4b51      	ldr	r3, [pc, #324]	; (2b6c <main+0x15c>)
    2a28:	4798      	blx	r3
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_Write_byte);
    2a2a:	4951      	ldr	r1, [pc, #324]	; (2b70 <main+0x160>)
    2a2c:	4851      	ldr	r0, [pc, #324]	; (2b74 <main+0x164>)
    2a2e:	4b52      	ldr	r3, [pc, #328]	; (2b78 <main+0x168>)
    2a30:	4798      	blx	r3
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
    2a32:	4952      	ldr	r1, [pc, #328]	; (2b7c <main+0x16c>)
    2a34:	4852      	ldr	r0, [pc, #328]	; (2b80 <main+0x170>)
    2a36:	4b53      	ldr	r3, [pc, #332]	; (2b84 <main+0x174>)
    2a38:	4798      	blx	r3
	wizphy_reset();
    2a3a:	4b53      	ldr	r3, [pc, #332]	; (2b88 <main+0x178>)
    2a3c:	4798      	blx	r3
	delay_ms(100);
    2a3e:	2064      	movs	r0, #100	; 0x64
    2a40:	4b52      	ldr	r3, [pc, #328]	; (2b8c <main+0x17c>)
    2a42:	4798      	blx	r3
	wizchip_init(rx_tx_buff_sizes,rx_tx_buff_sizes);
    2a44:	4c52      	ldr	r4, [pc, #328]	; (2b90 <main+0x180>)
    2a46:	0021      	movs	r1, r4
    2a48:	0020      	movs	r0, r4
    2a4a:	4b52      	ldr	r3, [pc, #328]	; (2b94 <main+0x184>)
    2a4c:	4798      	blx	r3
	wizchip_setnetinfo(&netInfo);
    2a4e:	3408      	adds	r4, #8
    2a50:	0020      	movs	r0, r4
    2a52:	4b51      	ldr	r3, [pc, #324]	; (2b98 <main+0x188>)
    2a54:	4798      	blx	r3
	ctlnetwork(CN_SET_NETINFO, (void*) &netInfo);
    2a56:	0021      	movs	r1, r4
    2a58:	2000      	movs	r0, #0
    2a5a:	4b50      	ldr	r3, [pc, #320]	; (2b9c <main+0x18c>)
    2a5c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    2a5e:	2280      	movs	r2, #128	; 0x80
    2a60:	03d2      	lsls	r2, r2, #15
    2a62:	23c0      	movs	r3, #192	; 0xc0
    2a64:	05db      	lsls	r3, r3, #23
    2a66:	619a      	str	r2, [r3, #24]
	
	
	gpio_set_pin_level(DLDA, true);
	while (1) {
		delay_ms(100);
    2a68:	2064      	movs	r0, #100	; 0x64
    2a6a:	4d48      	ldr	r5, [pc, #288]	; (2b8c <main+0x17c>)
    2a6c:	47a8      	blx	r5
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    2a6e:	24c0      	movs	r4, #192	; 0xc0
    2a70:	05e4      	lsls	r4, r4, #23
    2a72:	2380      	movs	r3, #128	; 0x80
    2a74:	041b      	lsls	r3, r3, #16
    2a76:	61e3      	str	r3, [r4, #28]
    2a78:	2380      	movs	r3, #128	; 0x80
    2a7a:	045b      	lsls	r3, r3, #17
    2a7c:	61e3      	str	r3, [r4, #28]
    2a7e:	2380      	movs	r3, #128	; 0x80
    2a80:	03db      	lsls	r3, r3, #15
    2a82:	61e3      	str	r3, [r4, #28]
		gpio_toggle_pin_level(GLD);
		gpio_toggle_pin_level(DLDC);
		gpio_toggle_pin_level(DLDA);
		
		//gpio_toggle_pin_level(BZ);
		PWM_write(1, 500);
    2a84:	21fa      	movs	r1, #250	; 0xfa
    2a86:	0049      	lsls	r1, r1, #1
    2a88:	2001      	movs	r0, #1
    2a8a:	4e45      	ldr	r6, [pc, #276]	; (2ba0 <main+0x190>)
    2a8c:	47b0      	blx	r6
		delay_ms(50);
    2a8e:	2032      	movs	r0, #50	; 0x32
    2a90:	47a8      	blx	r5
		PWM_write(1, 3500);
    2a92:	4944      	ldr	r1, [pc, #272]	; (2ba4 <main+0x194>)
    2a94:	2001      	movs	r0, #1
    2a96:	47b0      	blx	r6
		delay_ms(50);
    2a98:	2032      	movs	r0, #50	; 0x32
    2a9a:	47a8      	blx	r5
		
		EXT_SPI_WriteBuff(testBuffer, strlen(testBuffer));
    2a9c:	4b3c      	ldr	r3, [pc, #240]	; (2b90 <main+0x180>)
    2a9e:	6a1d      	ldr	r5, [r3, #32]
    2aa0:	0028      	movs	r0, r5
    2aa2:	4b41      	ldr	r3, [pc, #260]	; (2ba8 <main+0x198>)
    2aa4:	4798      	blx	r3
    2aa6:	b281      	uxth	r1, r0
    2aa8:	0028      	movs	r0, r5
    2aaa:	4b40      	ldr	r3, [pc, #256]	; (2bac <main+0x19c>)
    2aac:	4798      	blx	r3
		sprintf(debugSerialBuffer, "IpSW= %d; %d%d%d\n\r", GetIpSwitch(), gpio_get_pin_level(IN1),gpio_get_pin_level(IN2),gpio_get_pin_level(IN3));
    2aae:	4b40      	ldr	r3, [pc, #256]	; (2bb0 <main+0x1a0>)
    2ab0:	4798      	blx	r3
    2ab2:	9003      	str	r0, [sp, #12]
	CRITICAL_SECTION_ENTER();
    2ab4:	ab07      	add	r3, sp, #28
    2ab6:	0018      	movs	r0, r3
    2ab8:	4f3e      	ldr	r7, [pc, #248]	; (2bb4 <main+0x1a4>)
    2aba:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2abc:	2380      	movs	r3, #128	; 0x80
    2abe:	469b      	mov	fp, r3
    2ac0:	58e3      	ldr	r3, [r4, r3]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2ac2:	4e3d      	ldr	r6, [pc, #244]	; (2bb8 <main+0x1a8>)
    2ac4:	21a0      	movs	r1, #160	; 0xa0
    2ac6:	468a      	mov	sl, r1
    2ac8:	5871      	ldr	r1, [r6, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2aca:	2590      	movs	r5, #144	; 0x90
    2acc:	46a9      	mov	r9, r5
    2ace:	5962      	ldr	r2, [r4, r5]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2ad0:	404a      	eors	r2, r1
    2ad2:	4013      	ands	r3, r2
    2ad4:	404b      	eors	r3, r1
    2ad6:	9302      	str	r3, [sp, #8]
	CRITICAL_SECTION_LEAVE();
    2ad8:	a907      	add	r1, sp, #28
    2ada:	0008      	movs	r0, r1
    2adc:	4d37      	ldr	r5, [pc, #220]	; (2bbc <main+0x1ac>)
    2ade:	47a8      	blx	r5
    2ae0:	2180      	movs	r1, #128	; 0x80
    2ae2:	0109      	lsls	r1, r1, #4
    2ae4:	4688      	mov	r8, r1
    2ae6:	9b02      	ldr	r3, [sp, #8]
    2ae8:	400b      	ands	r3, r1
    2aea:	1e5a      	subs	r2, r3, #1
    2aec:	4193      	sbcs	r3, r2
    2aee:	b2db      	uxtb	r3, r3
    2af0:	9302      	str	r3, [sp, #8]
	CRITICAL_SECTION_ENTER();
    2af2:	a906      	add	r1, sp, #24
    2af4:	0008      	movs	r0, r1
    2af6:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2af8:	4659      	mov	r1, fp
    2afa:	5863      	ldr	r3, [r4, r1]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2afc:	4651      	mov	r1, sl
    2afe:	5871      	ldr	r1, [r6, r1]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b00:	464a      	mov	r2, r9
    2b02:	58a2      	ldr	r2, [r4, r2]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b04:	404a      	eors	r2, r1
    2b06:	4013      	ands	r3, r2
    2b08:	404b      	eors	r3, r1
    2b0a:	4699      	mov	r9, r3
	CRITICAL_SECTION_LEAVE();
    2b0c:	a906      	add	r1, sp, #24
    2b0e:	0008      	movs	r0, r1
    2b10:	47a8      	blx	r5
    2b12:	2380      	movs	r3, #128	; 0x80
    2b14:	00db      	lsls	r3, r3, #3
    2b16:	4649      	mov	r1, r9
    2b18:	400b      	ands	r3, r1
    2b1a:	1e5a      	subs	r2, r3, #1
    2b1c:	4193      	sbcs	r3, r2
    2b1e:	b2d9      	uxtb	r1, r3
    2b20:	4689      	mov	r9, r1
	CRITICAL_SECTION_ENTER();
    2b22:	a905      	add	r1, sp, #20
    2b24:	0008      	movs	r0, r1
    2b26:	47b8      	blx	r7
	return ((Port *)hw)->Group[submodule_index].DIR.reg;
    2b28:	6823      	ldr	r3, [r4, #0]
	return ((Port *)hw)->Group[submodule_index].IN.reg;
    2b2a:	6a32      	ldr	r2, [r6, #32]
	return ((Port *)hw)->Group[submodule_index].OUT.reg;
    2b2c:	6924      	ldr	r4, [r4, #16]
	tmp |= hri_port_read_OUT_reg(PORT_IOBUS, port) & dir_tmp;
    2b2e:	4054      	eors	r4, r2
    2b30:	401c      	ands	r4, r3
    2b32:	4054      	eors	r4, r2
	CRITICAL_SECTION_LEAVE();
    2b34:	a905      	add	r1, sp, #20
    2b36:	0008      	movs	r0, r1
    2b38:	47a8      	blx	r5
    2b3a:	4641      	mov	r1, r8
    2b3c:	400c      	ands	r4, r1
    2b3e:	1e63      	subs	r3, r4, #1
    2b40:	419c      	sbcs	r4, r3
    2b42:	4d1f      	ldr	r5, [pc, #124]	; (2bc0 <main+0x1b0>)
    2b44:	9401      	str	r4, [sp, #4]
    2b46:	4649      	mov	r1, r9
    2b48:	9100      	str	r1, [sp, #0]
    2b4a:	9b02      	ldr	r3, [sp, #8]
    2b4c:	9a03      	ldr	r2, [sp, #12]
    2b4e:	491d      	ldr	r1, [pc, #116]	; (2bc4 <main+0x1b4>)
    2b50:	0028      	movs	r0, r5
    2b52:	4c1d      	ldr	r4, [pc, #116]	; (2bc8 <main+0x1b8>)
    2b54:	47a0      	blx	r4
		SerialWrite(debugSerialBuffer);
    2b56:	0028      	movs	r0, r5
    2b58:	4b1c      	ldr	r3, [pc, #112]	; (2bcc <main+0x1bc>)
    2b5a:	4798      	blx	r3
    2b5c:	e784      	b.n	2a68 <main+0x58>
    2b5e:	46c0      	nop			; (mov r8, r8)
    2b60:	00002001 	.word	0x00002001
    2b64:	00001bed 	.word	0x00001bed
    2b68:	00001bdd 	.word	0x00001bdd
    2b6c:	00002331 	.word	0x00002331
    2b70:	00001c5d 	.word	0x00001c5d
    2b74:	00001c35 	.word	0x00001c35
    2b78:	00002359 	.word	0x00002359
    2b7c:	00001c19 	.word	0x00001c19
    2b80:	00001bfd 	.word	0x00001bfd
    2b84:	00002389 	.word	0x00002389
    2b88:	000025bd 	.word	0x000025bd
    2b8c:	00000285 	.word	0x00000285
    2b90:	20000054 	.word	0x20000054
    2b94:	00002435 	.word	0x00002435
    2b98:	00002869 	.word	0x00002869
    2b9c:	000029a5 	.word	0x000029a5
    2ba0:	00001f45 	.word	0x00001f45
    2ba4:	00000dac 	.word	0x00000dac
    2ba8:	00002dc9 	.word	0x00002dc9
    2bac:	00001d8d 	.word	0x00001d8d
    2bb0:	00002079 	.word	0x00002079
    2bb4:	00000269 	.word	0x00000269
    2bb8:	41004400 	.word	0x41004400
    2bbc:	00000277 	.word	0x00000277
    2bc0:	20000238 	.word	0x20000238
    2bc4:	000037a4 	.word	0x000037a4
    2bc8:	00002d85 	.word	0x00002d85
    2bcc:	00002055 	.word	0x00002055

00002bd0 <__udivsi3>:
    2bd0:	2200      	movs	r2, #0
    2bd2:	0843      	lsrs	r3, r0, #1
    2bd4:	428b      	cmp	r3, r1
    2bd6:	d374      	bcc.n	2cc2 <__udivsi3+0xf2>
    2bd8:	0903      	lsrs	r3, r0, #4
    2bda:	428b      	cmp	r3, r1
    2bdc:	d35f      	bcc.n	2c9e <__udivsi3+0xce>
    2bde:	0a03      	lsrs	r3, r0, #8
    2be0:	428b      	cmp	r3, r1
    2be2:	d344      	bcc.n	2c6e <__udivsi3+0x9e>
    2be4:	0b03      	lsrs	r3, r0, #12
    2be6:	428b      	cmp	r3, r1
    2be8:	d328      	bcc.n	2c3c <__udivsi3+0x6c>
    2bea:	0c03      	lsrs	r3, r0, #16
    2bec:	428b      	cmp	r3, r1
    2bee:	d30d      	bcc.n	2c0c <__udivsi3+0x3c>
    2bf0:	22ff      	movs	r2, #255	; 0xff
    2bf2:	0209      	lsls	r1, r1, #8
    2bf4:	ba12      	rev	r2, r2
    2bf6:	0c03      	lsrs	r3, r0, #16
    2bf8:	428b      	cmp	r3, r1
    2bfa:	d302      	bcc.n	2c02 <__udivsi3+0x32>
    2bfc:	1212      	asrs	r2, r2, #8
    2bfe:	0209      	lsls	r1, r1, #8
    2c00:	d065      	beq.n	2cce <__udivsi3+0xfe>
    2c02:	0b03      	lsrs	r3, r0, #12
    2c04:	428b      	cmp	r3, r1
    2c06:	d319      	bcc.n	2c3c <__udivsi3+0x6c>
    2c08:	e000      	b.n	2c0c <__udivsi3+0x3c>
    2c0a:	0a09      	lsrs	r1, r1, #8
    2c0c:	0bc3      	lsrs	r3, r0, #15
    2c0e:	428b      	cmp	r3, r1
    2c10:	d301      	bcc.n	2c16 <__udivsi3+0x46>
    2c12:	03cb      	lsls	r3, r1, #15
    2c14:	1ac0      	subs	r0, r0, r3
    2c16:	4152      	adcs	r2, r2
    2c18:	0b83      	lsrs	r3, r0, #14
    2c1a:	428b      	cmp	r3, r1
    2c1c:	d301      	bcc.n	2c22 <__udivsi3+0x52>
    2c1e:	038b      	lsls	r3, r1, #14
    2c20:	1ac0      	subs	r0, r0, r3
    2c22:	4152      	adcs	r2, r2
    2c24:	0b43      	lsrs	r3, r0, #13
    2c26:	428b      	cmp	r3, r1
    2c28:	d301      	bcc.n	2c2e <__udivsi3+0x5e>
    2c2a:	034b      	lsls	r3, r1, #13
    2c2c:	1ac0      	subs	r0, r0, r3
    2c2e:	4152      	adcs	r2, r2
    2c30:	0b03      	lsrs	r3, r0, #12
    2c32:	428b      	cmp	r3, r1
    2c34:	d301      	bcc.n	2c3a <__udivsi3+0x6a>
    2c36:	030b      	lsls	r3, r1, #12
    2c38:	1ac0      	subs	r0, r0, r3
    2c3a:	4152      	adcs	r2, r2
    2c3c:	0ac3      	lsrs	r3, r0, #11
    2c3e:	428b      	cmp	r3, r1
    2c40:	d301      	bcc.n	2c46 <__udivsi3+0x76>
    2c42:	02cb      	lsls	r3, r1, #11
    2c44:	1ac0      	subs	r0, r0, r3
    2c46:	4152      	adcs	r2, r2
    2c48:	0a83      	lsrs	r3, r0, #10
    2c4a:	428b      	cmp	r3, r1
    2c4c:	d301      	bcc.n	2c52 <__udivsi3+0x82>
    2c4e:	028b      	lsls	r3, r1, #10
    2c50:	1ac0      	subs	r0, r0, r3
    2c52:	4152      	adcs	r2, r2
    2c54:	0a43      	lsrs	r3, r0, #9
    2c56:	428b      	cmp	r3, r1
    2c58:	d301      	bcc.n	2c5e <__udivsi3+0x8e>
    2c5a:	024b      	lsls	r3, r1, #9
    2c5c:	1ac0      	subs	r0, r0, r3
    2c5e:	4152      	adcs	r2, r2
    2c60:	0a03      	lsrs	r3, r0, #8
    2c62:	428b      	cmp	r3, r1
    2c64:	d301      	bcc.n	2c6a <__udivsi3+0x9a>
    2c66:	020b      	lsls	r3, r1, #8
    2c68:	1ac0      	subs	r0, r0, r3
    2c6a:	4152      	adcs	r2, r2
    2c6c:	d2cd      	bcs.n	2c0a <__udivsi3+0x3a>
    2c6e:	09c3      	lsrs	r3, r0, #7
    2c70:	428b      	cmp	r3, r1
    2c72:	d301      	bcc.n	2c78 <__udivsi3+0xa8>
    2c74:	01cb      	lsls	r3, r1, #7
    2c76:	1ac0      	subs	r0, r0, r3
    2c78:	4152      	adcs	r2, r2
    2c7a:	0983      	lsrs	r3, r0, #6
    2c7c:	428b      	cmp	r3, r1
    2c7e:	d301      	bcc.n	2c84 <__udivsi3+0xb4>
    2c80:	018b      	lsls	r3, r1, #6
    2c82:	1ac0      	subs	r0, r0, r3
    2c84:	4152      	adcs	r2, r2
    2c86:	0943      	lsrs	r3, r0, #5
    2c88:	428b      	cmp	r3, r1
    2c8a:	d301      	bcc.n	2c90 <__udivsi3+0xc0>
    2c8c:	014b      	lsls	r3, r1, #5
    2c8e:	1ac0      	subs	r0, r0, r3
    2c90:	4152      	adcs	r2, r2
    2c92:	0903      	lsrs	r3, r0, #4
    2c94:	428b      	cmp	r3, r1
    2c96:	d301      	bcc.n	2c9c <__udivsi3+0xcc>
    2c98:	010b      	lsls	r3, r1, #4
    2c9a:	1ac0      	subs	r0, r0, r3
    2c9c:	4152      	adcs	r2, r2
    2c9e:	08c3      	lsrs	r3, r0, #3
    2ca0:	428b      	cmp	r3, r1
    2ca2:	d301      	bcc.n	2ca8 <__udivsi3+0xd8>
    2ca4:	00cb      	lsls	r3, r1, #3
    2ca6:	1ac0      	subs	r0, r0, r3
    2ca8:	4152      	adcs	r2, r2
    2caa:	0883      	lsrs	r3, r0, #2
    2cac:	428b      	cmp	r3, r1
    2cae:	d301      	bcc.n	2cb4 <__udivsi3+0xe4>
    2cb0:	008b      	lsls	r3, r1, #2
    2cb2:	1ac0      	subs	r0, r0, r3
    2cb4:	4152      	adcs	r2, r2
    2cb6:	0843      	lsrs	r3, r0, #1
    2cb8:	428b      	cmp	r3, r1
    2cba:	d301      	bcc.n	2cc0 <__udivsi3+0xf0>
    2cbc:	004b      	lsls	r3, r1, #1
    2cbe:	1ac0      	subs	r0, r0, r3
    2cc0:	4152      	adcs	r2, r2
    2cc2:	1a41      	subs	r1, r0, r1
    2cc4:	d200      	bcs.n	2cc8 <__udivsi3+0xf8>
    2cc6:	4601      	mov	r1, r0
    2cc8:	4152      	adcs	r2, r2
    2cca:	4610      	mov	r0, r2
    2ccc:	4770      	bx	lr
    2cce:	e7ff      	b.n	2cd0 <__udivsi3+0x100>
    2cd0:	b501      	push	{r0, lr}
    2cd2:	2000      	movs	r0, #0
    2cd4:	f000 f806 	bl	2ce4 <__aeabi_idiv0>
    2cd8:	bd02      	pop	{r1, pc}
    2cda:	46c0      	nop			; (mov r8, r8)

00002cdc <__aeabi_uidivmod>:
    2cdc:	2900      	cmp	r1, #0
    2cde:	d0f7      	beq.n	2cd0 <__udivsi3+0x100>
    2ce0:	e776      	b.n	2bd0 <__udivsi3>
    2ce2:	4770      	bx	lr

00002ce4 <__aeabi_idiv0>:
    2ce4:	4770      	bx	lr
    2ce6:	46c0      	nop			; (mov r8, r8)

00002ce8 <__ffssi2>:
    2ce8:	b510      	push	{r4, lr}
    2cea:	2300      	movs	r3, #0
    2cec:	2800      	cmp	r0, #0
    2cee:	d002      	beq.n	2cf6 <__ffssi2+0xe>
    2cf0:	f000 f804 	bl	2cfc <__ctzsi2>
    2cf4:	1c43      	adds	r3, r0, #1
    2cf6:	0018      	movs	r0, r3
    2cf8:	bd10      	pop	{r4, pc}
    2cfa:	46c0      	nop			; (mov r8, r8)

00002cfc <__ctzsi2>:
    2cfc:	4241      	negs	r1, r0
    2cfe:	4008      	ands	r0, r1
    2d00:	211c      	movs	r1, #28
    2d02:	2301      	movs	r3, #1
    2d04:	041b      	lsls	r3, r3, #16
    2d06:	4298      	cmp	r0, r3
    2d08:	d301      	bcc.n	2d0e <__ctzsi2+0x12>
    2d0a:	0c00      	lsrs	r0, r0, #16
    2d0c:	3910      	subs	r1, #16
    2d0e:	0a1b      	lsrs	r3, r3, #8
    2d10:	4298      	cmp	r0, r3
    2d12:	d301      	bcc.n	2d18 <__ctzsi2+0x1c>
    2d14:	0a00      	lsrs	r0, r0, #8
    2d16:	3908      	subs	r1, #8
    2d18:	091b      	lsrs	r3, r3, #4
    2d1a:	4298      	cmp	r0, r3
    2d1c:	d301      	bcc.n	2d22 <__ctzsi2+0x26>
    2d1e:	0900      	lsrs	r0, r0, #4
    2d20:	3904      	subs	r1, #4
    2d22:	a202      	add	r2, pc, #8	; (adr r2, 2d2c <__ctzsi2+0x30>)
    2d24:	5c10      	ldrb	r0, [r2, r0]
    2d26:	1a40      	subs	r0, r0, r1
    2d28:	4770      	bx	lr
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	1d1d1c1b 	.word	0x1d1d1c1b
    2d30:	1e1e1e1e 	.word	0x1e1e1e1e
    2d34:	1f1f1f1f 	.word	0x1f1f1f1f
    2d38:	1f1f1f1f 	.word	0x1f1f1f1f

00002d3c <__libc_init_array>:
    2d3c:	b570      	push	{r4, r5, r6, lr}
    2d3e:	2600      	movs	r6, #0
    2d40:	4d0c      	ldr	r5, [pc, #48]	; (2d74 <__libc_init_array+0x38>)
    2d42:	4c0d      	ldr	r4, [pc, #52]	; (2d78 <__libc_init_array+0x3c>)
    2d44:	1b64      	subs	r4, r4, r5
    2d46:	10a4      	asrs	r4, r4, #2
    2d48:	42a6      	cmp	r6, r4
    2d4a:	d109      	bne.n	2d60 <__libc_init_array+0x24>
    2d4c:	2600      	movs	r6, #0
    2d4e:	f000 fd87 	bl	3860 <_init>
    2d52:	4d0a      	ldr	r5, [pc, #40]	; (2d7c <__libc_init_array+0x40>)
    2d54:	4c0a      	ldr	r4, [pc, #40]	; (2d80 <__libc_init_array+0x44>)
    2d56:	1b64      	subs	r4, r4, r5
    2d58:	10a4      	asrs	r4, r4, #2
    2d5a:	42a6      	cmp	r6, r4
    2d5c:	d105      	bne.n	2d6a <__libc_init_array+0x2e>
    2d5e:	bd70      	pop	{r4, r5, r6, pc}
    2d60:	00b3      	lsls	r3, r6, #2
    2d62:	58eb      	ldr	r3, [r5, r3]
    2d64:	4798      	blx	r3
    2d66:	3601      	adds	r6, #1
    2d68:	e7ee      	b.n	2d48 <__libc_init_array+0xc>
    2d6a:	00b3      	lsls	r3, r6, #2
    2d6c:	58eb      	ldr	r3, [r5, r3]
    2d6e:	4798      	blx	r3
    2d70:	3601      	adds	r6, #1
    2d72:	e7f2      	b.n	2d5a <__libc_init_array+0x1e>
    2d74:	0000386c 	.word	0x0000386c
    2d78:	0000386c 	.word	0x0000386c
    2d7c:	0000386c 	.word	0x0000386c
    2d80:	00003870 	.word	0x00003870

00002d84 <siprintf>:
    2d84:	b40e      	push	{r1, r2, r3}
    2d86:	b510      	push	{r4, lr}
    2d88:	b09d      	sub	sp, #116	; 0x74
    2d8a:	a902      	add	r1, sp, #8
    2d8c:	9002      	str	r0, [sp, #8]
    2d8e:	6108      	str	r0, [r1, #16]
    2d90:	480b      	ldr	r0, [pc, #44]	; (2dc0 <siprintf+0x3c>)
    2d92:	2482      	movs	r4, #130	; 0x82
    2d94:	6088      	str	r0, [r1, #8]
    2d96:	6148      	str	r0, [r1, #20]
    2d98:	2001      	movs	r0, #1
    2d9a:	4240      	negs	r0, r0
    2d9c:	ab1f      	add	r3, sp, #124	; 0x7c
    2d9e:	81c8      	strh	r0, [r1, #14]
    2da0:	4808      	ldr	r0, [pc, #32]	; (2dc4 <siprintf+0x40>)
    2da2:	cb04      	ldmia	r3!, {r2}
    2da4:	00a4      	lsls	r4, r4, #2
    2da6:	6800      	ldr	r0, [r0, #0]
    2da8:	9301      	str	r3, [sp, #4]
    2daa:	818c      	strh	r4, [r1, #12]
    2dac:	f000 f8d4 	bl	2f58 <_svfiprintf_r>
    2db0:	2300      	movs	r3, #0
    2db2:	9a02      	ldr	r2, [sp, #8]
    2db4:	7013      	strb	r3, [r2, #0]
    2db6:	b01d      	add	sp, #116	; 0x74
    2db8:	bc10      	pop	{r4}
    2dba:	bc08      	pop	{r3}
    2dbc:	b003      	add	sp, #12
    2dbe:	4718      	bx	r3
    2dc0:	7fffffff 	.word	0x7fffffff
    2dc4:	20000088 	.word	0x20000088

00002dc8 <strlen>:
    2dc8:	2300      	movs	r3, #0
    2dca:	5cc2      	ldrb	r2, [r0, r3]
    2dcc:	3301      	adds	r3, #1
    2dce:	2a00      	cmp	r2, #0
    2dd0:	d1fb      	bne.n	2dca <strlen+0x2>
    2dd2:	1e58      	subs	r0, r3, #1
    2dd4:	4770      	bx	lr
	...

00002dd8 <_malloc_r>:
    2dd8:	2303      	movs	r3, #3
    2dda:	b570      	push	{r4, r5, r6, lr}
    2ddc:	1ccd      	adds	r5, r1, #3
    2dde:	439d      	bics	r5, r3
    2de0:	3508      	adds	r5, #8
    2de2:	0006      	movs	r6, r0
    2de4:	2d0c      	cmp	r5, #12
    2de6:	d21e      	bcs.n	2e26 <_malloc_r+0x4e>
    2de8:	250c      	movs	r5, #12
    2dea:	42a9      	cmp	r1, r5
    2dec:	d81d      	bhi.n	2e2a <_malloc_r+0x52>
    2dee:	0030      	movs	r0, r6
    2df0:	f000 fb76 	bl	34e0 <__malloc_lock>
    2df4:	4a25      	ldr	r2, [pc, #148]	; (2e8c <_malloc_r+0xb4>)
    2df6:	6814      	ldr	r4, [r2, #0]
    2df8:	0021      	movs	r1, r4
    2dfa:	2900      	cmp	r1, #0
    2dfc:	d119      	bne.n	2e32 <_malloc_r+0x5a>
    2dfe:	4c24      	ldr	r4, [pc, #144]	; (2e90 <_malloc_r+0xb8>)
    2e00:	6823      	ldr	r3, [r4, #0]
    2e02:	2b00      	cmp	r3, #0
    2e04:	d103      	bne.n	2e0e <_malloc_r+0x36>
    2e06:	0030      	movs	r0, r6
    2e08:	f000 fb32 	bl	3470 <_sbrk_r>
    2e0c:	6020      	str	r0, [r4, #0]
    2e0e:	0029      	movs	r1, r5
    2e10:	0030      	movs	r0, r6
    2e12:	f000 fb2d 	bl	3470 <_sbrk_r>
    2e16:	1c43      	adds	r3, r0, #1
    2e18:	d12c      	bne.n	2e74 <_malloc_r+0x9c>
    2e1a:	230c      	movs	r3, #12
    2e1c:	0030      	movs	r0, r6
    2e1e:	6033      	str	r3, [r6, #0]
    2e20:	f000 fb5f 	bl	34e2 <__malloc_unlock>
    2e24:	e003      	b.n	2e2e <_malloc_r+0x56>
    2e26:	2d00      	cmp	r5, #0
    2e28:	dadf      	bge.n	2dea <_malloc_r+0x12>
    2e2a:	230c      	movs	r3, #12
    2e2c:	6033      	str	r3, [r6, #0]
    2e2e:	2000      	movs	r0, #0
    2e30:	bd70      	pop	{r4, r5, r6, pc}
    2e32:	680b      	ldr	r3, [r1, #0]
    2e34:	1b5b      	subs	r3, r3, r5
    2e36:	d41a      	bmi.n	2e6e <_malloc_r+0x96>
    2e38:	2b0b      	cmp	r3, #11
    2e3a:	d903      	bls.n	2e44 <_malloc_r+0x6c>
    2e3c:	600b      	str	r3, [r1, #0]
    2e3e:	18cc      	adds	r4, r1, r3
    2e40:	6025      	str	r5, [r4, #0]
    2e42:	e003      	b.n	2e4c <_malloc_r+0x74>
    2e44:	428c      	cmp	r4, r1
    2e46:	d10e      	bne.n	2e66 <_malloc_r+0x8e>
    2e48:	6863      	ldr	r3, [r4, #4]
    2e4a:	6013      	str	r3, [r2, #0]
    2e4c:	0030      	movs	r0, r6
    2e4e:	f000 fb48 	bl	34e2 <__malloc_unlock>
    2e52:	0020      	movs	r0, r4
    2e54:	2207      	movs	r2, #7
    2e56:	300b      	adds	r0, #11
    2e58:	1d23      	adds	r3, r4, #4
    2e5a:	4390      	bics	r0, r2
    2e5c:	1ac3      	subs	r3, r0, r3
    2e5e:	d0e7      	beq.n	2e30 <_malloc_r+0x58>
    2e60:	425a      	negs	r2, r3
    2e62:	50e2      	str	r2, [r4, r3]
    2e64:	e7e4      	b.n	2e30 <_malloc_r+0x58>
    2e66:	684b      	ldr	r3, [r1, #4]
    2e68:	6063      	str	r3, [r4, #4]
    2e6a:	000c      	movs	r4, r1
    2e6c:	e7ee      	b.n	2e4c <_malloc_r+0x74>
    2e6e:	000c      	movs	r4, r1
    2e70:	6849      	ldr	r1, [r1, #4]
    2e72:	e7c2      	b.n	2dfa <_malloc_r+0x22>
    2e74:	2303      	movs	r3, #3
    2e76:	1cc4      	adds	r4, r0, #3
    2e78:	439c      	bics	r4, r3
    2e7a:	42a0      	cmp	r0, r4
    2e7c:	d0e0      	beq.n	2e40 <_malloc_r+0x68>
    2e7e:	1a21      	subs	r1, r4, r0
    2e80:	0030      	movs	r0, r6
    2e82:	f000 faf5 	bl	3470 <_sbrk_r>
    2e86:	1c43      	adds	r3, r0, #1
    2e88:	d1da      	bne.n	2e40 <_malloc_r+0x68>
    2e8a:	e7c6      	b.n	2e1a <_malloc_r+0x42>
    2e8c:	2000012c 	.word	0x2000012c
    2e90:	20000130 	.word	0x20000130

00002e94 <__ssputs_r>:
    2e94:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e96:	688e      	ldr	r6, [r1, #8]
    2e98:	b085      	sub	sp, #20
    2e9a:	0007      	movs	r7, r0
    2e9c:	000c      	movs	r4, r1
    2e9e:	9203      	str	r2, [sp, #12]
    2ea0:	9301      	str	r3, [sp, #4]
    2ea2:	429e      	cmp	r6, r3
    2ea4:	d839      	bhi.n	2f1a <__ssputs_r+0x86>
    2ea6:	2390      	movs	r3, #144	; 0x90
    2ea8:	898a      	ldrh	r2, [r1, #12]
    2eaa:	00db      	lsls	r3, r3, #3
    2eac:	421a      	tst	r2, r3
    2eae:	d034      	beq.n	2f1a <__ssputs_r+0x86>
    2eb0:	2503      	movs	r5, #3
    2eb2:	6909      	ldr	r1, [r1, #16]
    2eb4:	6823      	ldr	r3, [r4, #0]
    2eb6:	1a5b      	subs	r3, r3, r1
    2eb8:	9302      	str	r3, [sp, #8]
    2eba:	6963      	ldr	r3, [r4, #20]
    2ebc:	9802      	ldr	r0, [sp, #8]
    2ebe:	435d      	muls	r5, r3
    2ec0:	0feb      	lsrs	r3, r5, #31
    2ec2:	195d      	adds	r5, r3, r5
    2ec4:	9b01      	ldr	r3, [sp, #4]
    2ec6:	106d      	asrs	r5, r5, #1
    2ec8:	3301      	adds	r3, #1
    2eca:	181b      	adds	r3, r3, r0
    2ecc:	42ab      	cmp	r3, r5
    2ece:	d900      	bls.n	2ed2 <__ssputs_r+0x3e>
    2ed0:	001d      	movs	r5, r3
    2ed2:	0553      	lsls	r3, r2, #21
    2ed4:	d532      	bpl.n	2f3c <__ssputs_r+0xa8>
    2ed6:	0029      	movs	r1, r5
    2ed8:	0038      	movs	r0, r7
    2eda:	f7ff ff7d 	bl	2dd8 <_malloc_r>
    2ede:	1e06      	subs	r6, r0, #0
    2ee0:	d109      	bne.n	2ef6 <__ssputs_r+0x62>
    2ee2:	230c      	movs	r3, #12
    2ee4:	603b      	str	r3, [r7, #0]
    2ee6:	2340      	movs	r3, #64	; 0x40
    2ee8:	2001      	movs	r0, #1
    2eea:	89a2      	ldrh	r2, [r4, #12]
    2eec:	4240      	negs	r0, r0
    2eee:	4313      	orrs	r3, r2
    2ef0:	81a3      	strh	r3, [r4, #12]
    2ef2:	b005      	add	sp, #20
    2ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ef6:	9a02      	ldr	r2, [sp, #8]
    2ef8:	6921      	ldr	r1, [r4, #16]
    2efa:	f000 fad6 	bl	34aa <memcpy>
    2efe:	89a3      	ldrh	r3, [r4, #12]
    2f00:	4a14      	ldr	r2, [pc, #80]	; (2f54 <__ssputs_r+0xc0>)
    2f02:	401a      	ands	r2, r3
    2f04:	2380      	movs	r3, #128	; 0x80
    2f06:	4313      	orrs	r3, r2
    2f08:	81a3      	strh	r3, [r4, #12]
    2f0a:	9b02      	ldr	r3, [sp, #8]
    2f0c:	6126      	str	r6, [r4, #16]
    2f0e:	18f6      	adds	r6, r6, r3
    2f10:	6026      	str	r6, [r4, #0]
    2f12:	6165      	str	r5, [r4, #20]
    2f14:	9e01      	ldr	r6, [sp, #4]
    2f16:	1aed      	subs	r5, r5, r3
    2f18:	60a5      	str	r5, [r4, #8]
    2f1a:	9b01      	ldr	r3, [sp, #4]
    2f1c:	42b3      	cmp	r3, r6
    2f1e:	d200      	bcs.n	2f22 <__ssputs_r+0x8e>
    2f20:	001e      	movs	r6, r3
    2f22:	0032      	movs	r2, r6
    2f24:	9903      	ldr	r1, [sp, #12]
    2f26:	6820      	ldr	r0, [r4, #0]
    2f28:	f000 fac8 	bl	34bc <memmove>
    2f2c:	68a3      	ldr	r3, [r4, #8]
    2f2e:	2000      	movs	r0, #0
    2f30:	1b9b      	subs	r3, r3, r6
    2f32:	60a3      	str	r3, [r4, #8]
    2f34:	6823      	ldr	r3, [r4, #0]
    2f36:	199e      	adds	r6, r3, r6
    2f38:	6026      	str	r6, [r4, #0]
    2f3a:	e7da      	b.n	2ef2 <__ssputs_r+0x5e>
    2f3c:	002a      	movs	r2, r5
    2f3e:	0038      	movs	r0, r7
    2f40:	f000 fb1a 	bl	3578 <_realloc_r>
    2f44:	1e06      	subs	r6, r0, #0
    2f46:	d1e0      	bne.n	2f0a <__ssputs_r+0x76>
    2f48:	6921      	ldr	r1, [r4, #16]
    2f4a:	0038      	movs	r0, r7
    2f4c:	f000 faca 	bl	34e4 <_free_r>
    2f50:	e7c7      	b.n	2ee2 <__ssputs_r+0x4e>
    2f52:	46c0      	nop			; (mov r8, r8)
    2f54:	fffffb7f 	.word	0xfffffb7f

00002f58 <_svfiprintf_r>:
    2f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f5a:	b09f      	sub	sp, #124	; 0x7c
    2f5c:	9002      	str	r0, [sp, #8]
    2f5e:	9305      	str	r3, [sp, #20]
    2f60:	898b      	ldrh	r3, [r1, #12]
    2f62:	000f      	movs	r7, r1
    2f64:	0016      	movs	r6, r2
    2f66:	061b      	lsls	r3, r3, #24
    2f68:	d511      	bpl.n	2f8e <_svfiprintf_r+0x36>
    2f6a:	690b      	ldr	r3, [r1, #16]
    2f6c:	2b00      	cmp	r3, #0
    2f6e:	d10e      	bne.n	2f8e <_svfiprintf_r+0x36>
    2f70:	2140      	movs	r1, #64	; 0x40
    2f72:	f7ff ff31 	bl	2dd8 <_malloc_r>
    2f76:	6038      	str	r0, [r7, #0]
    2f78:	6138      	str	r0, [r7, #16]
    2f7a:	2800      	cmp	r0, #0
    2f7c:	d105      	bne.n	2f8a <_svfiprintf_r+0x32>
    2f7e:	230c      	movs	r3, #12
    2f80:	9a02      	ldr	r2, [sp, #8]
    2f82:	3801      	subs	r0, #1
    2f84:	6013      	str	r3, [r2, #0]
    2f86:	b01f      	add	sp, #124	; 0x7c
    2f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f8a:	2340      	movs	r3, #64	; 0x40
    2f8c:	617b      	str	r3, [r7, #20]
    2f8e:	2300      	movs	r3, #0
    2f90:	ad06      	add	r5, sp, #24
    2f92:	616b      	str	r3, [r5, #20]
    2f94:	3320      	adds	r3, #32
    2f96:	766b      	strb	r3, [r5, #25]
    2f98:	3310      	adds	r3, #16
    2f9a:	76ab      	strb	r3, [r5, #26]
    2f9c:	0034      	movs	r4, r6
    2f9e:	7823      	ldrb	r3, [r4, #0]
    2fa0:	2b00      	cmp	r3, #0
    2fa2:	d147      	bne.n	3034 <_svfiprintf_r+0xdc>
    2fa4:	1ba3      	subs	r3, r4, r6
    2fa6:	9304      	str	r3, [sp, #16]
    2fa8:	d00d      	beq.n	2fc6 <_svfiprintf_r+0x6e>
    2faa:	1ba3      	subs	r3, r4, r6
    2fac:	0032      	movs	r2, r6
    2fae:	0039      	movs	r1, r7
    2fb0:	9802      	ldr	r0, [sp, #8]
    2fb2:	f7ff ff6f 	bl	2e94 <__ssputs_r>
    2fb6:	1c43      	adds	r3, r0, #1
    2fb8:	d100      	bne.n	2fbc <_svfiprintf_r+0x64>
    2fba:	e0b5      	b.n	3128 <_svfiprintf_r+0x1d0>
    2fbc:	696a      	ldr	r2, [r5, #20]
    2fbe:	9b04      	ldr	r3, [sp, #16]
    2fc0:	4694      	mov	ip, r2
    2fc2:	4463      	add	r3, ip
    2fc4:	616b      	str	r3, [r5, #20]
    2fc6:	7823      	ldrb	r3, [r4, #0]
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d100      	bne.n	2fce <_svfiprintf_r+0x76>
    2fcc:	e0ac      	b.n	3128 <_svfiprintf_r+0x1d0>
    2fce:	2201      	movs	r2, #1
    2fd0:	2300      	movs	r3, #0
    2fd2:	4252      	negs	r2, r2
    2fd4:	606a      	str	r2, [r5, #4]
    2fd6:	a902      	add	r1, sp, #8
    2fd8:	3254      	adds	r2, #84	; 0x54
    2fda:	1852      	adds	r2, r2, r1
    2fdc:	3401      	adds	r4, #1
    2fde:	602b      	str	r3, [r5, #0]
    2fe0:	60eb      	str	r3, [r5, #12]
    2fe2:	60ab      	str	r3, [r5, #8]
    2fe4:	7013      	strb	r3, [r2, #0]
    2fe6:	65ab      	str	r3, [r5, #88]	; 0x58
    2fe8:	4e58      	ldr	r6, [pc, #352]	; (314c <_svfiprintf_r+0x1f4>)
    2fea:	2205      	movs	r2, #5
    2fec:	7821      	ldrb	r1, [r4, #0]
    2fee:	0030      	movs	r0, r6
    2ff0:	f000 fa50 	bl	3494 <memchr>
    2ff4:	1c62      	adds	r2, r4, #1
    2ff6:	2800      	cmp	r0, #0
    2ff8:	d120      	bne.n	303c <_svfiprintf_r+0xe4>
    2ffa:	6829      	ldr	r1, [r5, #0]
    2ffc:	06cb      	lsls	r3, r1, #27
    2ffe:	d504      	bpl.n	300a <_svfiprintf_r+0xb2>
    3000:	2353      	movs	r3, #83	; 0x53
    3002:	ae02      	add	r6, sp, #8
    3004:	3020      	adds	r0, #32
    3006:	199b      	adds	r3, r3, r6
    3008:	7018      	strb	r0, [r3, #0]
    300a:	070b      	lsls	r3, r1, #28
    300c:	d504      	bpl.n	3018 <_svfiprintf_r+0xc0>
    300e:	2353      	movs	r3, #83	; 0x53
    3010:	202b      	movs	r0, #43	; 0x2b
    3012:	ae02      	add	r6, sp, #8
    3014:	199b      	adds	r3, r3, r6
    3016:	7018      	strb	r0, [r3, #0]
    3018:	7823      	ldrb	r3, [r4, #0]
    301a:	2b2a      	cmp	r3, #42	; 0x2a
    301c:	d016      	beq.n	304c <_svfiprintf_r+0xf4>
    301e:	2000      	movs	r0, #0
    3020:	210a      	movs	r1, #10
    3022:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3024:	7822      	ldrb	r2, [r4, #0]
    3026:	3a30      	subs	r2, #48	; 0x30
    3028:	2a09      	cmp	r2, #9
    302a:	d955      	bls.n	30d8 <_svfiprintf_r+0x180>
    302c:	2800      	cmp	r0, #0
    302e:	d015      	beq.n	305c <_svfiprintf_r+0x104>
    3030:	9309      	str	r3, [sp, #36]	; 0x24
    3032:	e013      	b.n	305c <_svfiprintf_r+0x104>
    3034:	2b25      	cmp	r3, #37	; 0x25
    3036:	d0b5      	beq.n	2fa4 <_svfiprintf_r+0x4c>
    3038:	3401      	adds	r4, #1
    303a:	e7b0      	b.n	2f9e <_svfiprintf_r+0x46>
    303c:	2301      	movs	r3, #1
    303e:	1b80      	subs	r0, r0, r6
    3040:	4083      	lsls	r3, r0
    3042:	6829      	ldr	r1, [r5, #0]
    3044:	0014      	movs	r4, r2
    3046:	430b      	orrs	r3, r1
    3048:	602b      	str	r3, [r5, #0]
    304a:	e7cd      	b.n	2fe8 <_svfiprintf_r+0x90>
    304c:	9b05      	ldr	r3, [sp, #20]
    304e:	1d18      	adds	r0, r3, #4
    3050:	681b      	ldr	r3, [r3, #0]
    3052:	9005      	str	r0, [sp, #20]
    3054:	2b00      	cmp	r3, #0
    3056:	db39      	blt.n	30cc <_svfiprintf_r+0x174>
    3058:	9309      	str	r3, [sp, #36]	; 0x24
    305a:	0014      	movs	r4, r2
    305c:	7823      	ldrb	r3, [r4, #0]
    305e:	2b2e      	cmp	r3, #46	; 0x2e
    3060:	d10b      	bne.n	307a <_svfiprintf_r+0x122>
    3062:	7863      	ldrb	r3, [r4, #1]
    3064:	1c62      	adds	r2, r4, #1
    3066:	2b2a      	cmp	r3, #42	; 0x2a
    3068:	d13e      	bne.n	30e8 <_svfiprintf_r+0x190>
    306a:	9b05      	ldr	r3, [sp, #20]
    306c:	3402      	adds	r4, #2
    306e:	1d1a      	adds	r2, r3, #4
    3070:	681b      	ldr	r3, [r3, #0]
    3072:	9205      	str	r2, [sp, #20]
    3074:	2b00      	cmp	r3, #0
    3076:	db34      	blt.n	30e2 <_svfiprintf_r+0x18a>
    3078:	9307      	str	r3, [sp, #28]
    307a:	4e35      	ldr	r6, [pc, #212]	; (3150 <_svfiprintf_r+0x1f8>)
    307c:	7821      	ldrb	r1, [r4, #0]
    307e:	2203      	movs	r2, #3
    3080:	0030      	movs	r0, r6
    3082:	f000 fa07 	bl	3494 <memchr>
    3086:	2800      	cmp	r0, #0
    3088:	d006      	beq.n	3098 <_svfiprintf_r+0x140>
    308a:	2340      	movs	r3, #64	; 0x40
    308c:	1b80      	subs	r0, r0, r6
    308e:	4083      	lsls	r3, r0
    3090:	682a      	ldr	r2, [r5, #0]
    3092:	3401      	adds	r4, #1
    3094:	4313      	orrs	r3, r2
    3096:	602b      	str	r3, [r5, #0]
    3098:	7821      	ldrb	r1, [r4, #0]
    309a:	2206      	movs	r2, #6
    309c:	482d      	ldr	r0, [pc, #180]	; (3154 <_svfiprintf_r+0x1fc>)
    309e:	1c66      	adds	r6, r4, #1
    30a0:	7629      	strb	r1, [r5, #24]
    30a2:	f000 f9f7 	bl	3494 <memchr>
    30a6:	2800      	cmp	r0, #0
    30a8:	d046      	beq.n	3138 <_svfiprintf_r+0x1e0>
    30aa:	4b2b      	ldr	r3, [pc, #172]	; (3158 <_svfiprintf_r+0x200>)
    30ac:	2b00      	cmp	r3, #0
    30ae:	d12f      	bne.n	3110 <_svfiprintf_r+0x1b8>
    30b0:	6829      	ldr	r1, [r5, #0]
    30b2:	9b05      	ldr	r3, [sp, #20]
    30b4:	2207      	movs	r2, #7
    30b6:	05c9      	lsls	r1, r1, #23
    30b8:	d528      	bpl.n	310c <_svfiprintf_r+0x1b4>
    30ba:	189b      	adds	r3, r3, r2
    30bc:	4393      	bics	r3, r2
    30be:	3308      	adds	r3, #8
    30c0:	9305      	str	r3, [sp, #20]
    30c2:	696b      	ldr	r3, [r5, #20]
    30c4:	9a03      	ldr	r2, [sp, #12]
    30c6:	189b      	adds	r3, r3, r2
    30c8:	616b      	str	r3, [r5, #20]
    30ca:	e767      	b.n	2f9c <_svfiprintf_r+0x44>
    30cc:	425b      	negs	r3, r3
    30ce:	60eb      	str	r3, [r5, #12]
    30d0:	2302      	movs	r3, #2
    30d2:	430b      	orrs	r3, r1
    30d4:	602b      	str	r3, [r5, #0]
    30d6:	e7c0      	b.n	305a <_svfiprintf_r+0x102>
    30d8:	434b      	muls	r3, r1
    30da:	3401      	adds	r4, #1
    30dc:	189b      	adds	r3, r3, r2
    30de:	2001      	movs	r0, #1
    30e0:	e7a0      	b.n	3024 <_svfiprintf_r+0xcc>
    30e2:	2301      	movs	r3, #1
    30e4:	425b      	negs	r3, r3
    30e6:	e7c7      	b.n	3078 <_svfiprintf_r+0x120>
    30e8:	2300      	movs	r3, #0
    30ea:	0014      	movs	r4, r2
    30ec:	200a      	movs	r0, #10
    30ee:	001a      	movs	r2, r3
    30f0:	606b      	str	r3, [r5, #4]
    30f2:	7821      	ldrb	r1, [r4, #0]
    30f4:	3930      	subs	r1, #48	; 0x30
    30f6:	2909      	cmp	r1, #9
    30f8:	d903      	bls.n	3102 <_svfiprintf_r+0x1aa>
    30fa:	2b00      	cmp	r3, #0
    30fc:	d0bd      	beq.n	307a <_svfiprintf_r+0x122>
    30fe:	9207      	str	r2, [sp, #28]
    3100:	e7bb      	b.n	307a <_svfiprintf_r+0x122>
    3102:	4342      	muls	r2, r0
    3104:	3401      	adds	r4, #1
    3106:	1852      	adds	r2, r2, r1
    3108:	2301      	movs	r3, #1
    310a:	e7f2      	b.n	30f2 <_svfiprintf_r+0x19a>
    310c:	3307      	adds	r3, #7
    310e:	e7d5      	b.n	30bc <_svfiprintf_r+0x164>
    3110:	ab05      	add	r3, sp, #20
    3112:	9300      	str	r3, [sp, #0]
    3114:	003a      	movs	r2, r7
    3116:	4b11      	ldr	r3, [pc, #68]	; (315c <_svfiprintf_r+0x204>)
    3118:	0029      	movs	r1, r5
    311a:	9802      	ldr	r0, [sp, #8]
    311c:	e000      	b.n	3120 <_svfiprintf_r+0x1c8>
    311e:	bf00      	nop
    3120:	9003      	str	r0, [sp, #12]
    3122:	9b03      	ldr	r3, [sp, #12]
    3124:	3301      	adds	r3, #1
    3126:	d1cc      	bne.n	30c2 <_svfiprintf_r+0x16a>
    3128:	89bb      	ldrh	r3, [r7, #12]
    312a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    312c:	065b      	lsls	r3, r3, #25
    312e:	d400      	bmi.n	3132 <_svfiprintf_r+0x1da>
    3130:	e729      	b.n	2f86 <_svfiprintf_r+0x2e>
    3132:	2001      	movs	r0, #1
    3134:	4240      	negs	r0, r0
    3136:	e726      	b.n	2f86 <_svfiprintf_r+0x2e>
    3138:	ab05      	add	r3, sp, #20
    313a:	9300      	str	r3, [sp, #0]
    313c:	003a      	movs	r2, r7
    313e:	4b07      	ldr	r3, [pc, #28]	; (315c <_svfiprintf_r+0x204>)
    3140:	0029      	movs	r1, r5
    3142:	9802      	ldr	r0, [sp, #8]
    3144:	f000 f87a 	bl	323c <_printf_i>
    3148:	e7ea      	b.n	3120 <_svfiprintf_r+0x1c8>
    314a:	46c0      	nop			; (mov r8, r8)
    314c:	0000382c 	.word	0x0000382c
    3150:	00003832 	.word	0x00003832
    3154:	00003836 	.word	0x00003836
    3158:	00000000 	.word	0x00000000
    315c:	00002e95 	.word	0x00002e95

00003160 <_printf_common>:
    3160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3162:	0015      	movs	r5, r2
    3164:	9301      	str	r3, [sp, #4]
    3166:	688a      	ldr	r2, [r1, #8]
    3168:	690b      	ldr	r3, [r1, #16]
    316a:	9000      	str	r0, [sp, #0]
    316c:	000c      	movs	r4, r1
    316e:	4293      	cmp	r3, r2
    3170:	da00      	bge.n	3174 <_printf_common+0x14>
    3172:	0013      	movs	r3, r2
    3174:	0022      	movs	r2, r4
    3176:	602b      	str	r3, [r5, #0]
    3178:	3243      	adds	r2, #67	; 0x43
    317a:	7812      	ldrb	r2, [r2, #0]
    317c:	2a00      	cmp	r2, #0
    317e:	d001      	beq.n	3184 <_printf_common+0x24>
    3180:	3301      	adds	r3, #1
    3182:	602b      	str	r3, [r5, #0]
    3184:	6823      	ldr	r3, [r4, #0]
    3186:	069b      	lsls	r3, r3, #26
    3188:	d502      	bpl.n	3190 <_printf_common+0x30>
    318a:	682b      	ldr	r3, [r5, #0]
    318c:	3302      	adds	r3, #2
    318e:	602b      	str	r3, [r5, #0]
    3190:	2706      	movs	r7, #6
    3192:	6823      	ldr	r3, [r4, #0]
    3194:	401f      	ands	r7, r3
    3196:	d027      	beq.n	31e8 <_printf_common+0x88>
    3198:	0023      	movs	r3, r4
    319a:	3343      	adds	r3, #67	; 0x43
    319c:	781b      	ldrb	r3, [r3, #0]
    319e:	1e5a      	subs	r2, r3, #1
    31a0:	4193      	sbcs	r3, r2
    31a2:	6822      	ldr	r2, [r4, #0]
    31a4:	0692      	lsls	r2, r2, #26
    31a6:	d430      	bmi.n	320a <_printf_common+0xaa>
    31a8:	0022      	movs	r2, r4
    31aa:	9901      	ldr	r1, [sp, #4]
    31ac:	3243      	adds	r2, #67	; 0x43
    31ae:	9800      	ldr	r0, [sp, #0]
    31b0:	9e08      	ldr	r6, [sp, #32]
    31b2:	47b0      	blx	r6
    31b4:	1c43      	adds	r3, r0, #1
    31b6:	d025      	beq.n	3204 <_printf_common+0xa4>
    31b8:	2306      	movs	r3, #6
    31ba:	6820      	ldr	r0, [r4, #0]
    31bc:	682a      	ldr	r2, [r5, #0]
    31be:	68e1      	ldr	r1, [r4, #12]
    31c0:	4003      	ands	r3, r0
    31c2:	2500      	movs	r5, #0
    31c4:	2b04      	cmp	r3, #4
    31c6:	d103      	bne.n	31d0 <_printf_common+0x70>
    31c8:	1a8d      	subs	r5, r1, r2
    31ca:	43eb      	mvns	r3, r5
    31cc:	17db      	asrs	r3, r3, #31
    31ce:	401d      	ands	r5, r3
    31d0:	68a3      	ldr	r3, [r4, #8]
    31d2:	6922      	ldr	r2, [r4, #16]
    31d4:	4293      	cmp	r3, r2
    31d6:	dd01      	ble.n	31dc <_printf_common+0x7c>
    31d8:	1a9b      	subs	r3, r3, r2
    31da:	18ed      	adds	r5, r5, r3
    31dc:	2700      	movs	r7, #0
    31de:	42bd      	cmp	r5, r7
    31e0:	d120      	bne.n	3224 <_printf_common+0xc4>
    31e2:	2000      	movs	r0, #0
    31e4:	e010      	b.n	3208 <_printf_common+0xa8>
    31e6:	3701      	adds	r7, #1
    31e8:	68e3      	ldr	r3, [r4, #12]
    31ea:	682a      	ldr	r2, [r5, #0]
    31ec:	1a9b      	subs	r3, r3, r2
    31ee:	429f      	cmp	r7, r3
    31f0:	dad2      	bge.n	3198 <_printf_common+0x38>
    31f2:	0022      	movs	r2, r4
    31f4:	2301      	movs	r3, #1
    31f6:	3219      	adds	r2, #25
    31f8:	9901      	ldr	r1, [sp, #4]
    31fa:	9800      	ldr	r0, [sp, #0]
    31fc:	9e08      	ldr	r6, [sp, #32]
    31fe:	47b0      	blx	r6
    3200:	1c43      	adds	r3, r0, #1
    3202:	d1f0      	bne.n	31e6 <_printf_common+0x86>
    3204:	2001      	movs	r0, #1
    3206:	4240      	negs	r0, r0
    3208:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    320a:	2030      	movs	r0, #48	; 0x30
    320c:	18e1      	adds	r1, r4, r3
    320e:	3143      	adds	r1, #67	; 0x43
    3210:	7008      	strb	r0, [r1, #0]
    3212:	0021      	movs	r1, r4
    3214:	1c5a      	adds	r2, r3, #1
    3216:	3145      	adds	r1, #69	; 0x45
    3218:	7809      	ldrb	r1, [r1, #0]
    321a:	18a2      	adds	r2, r4, r2
    321c:	3243      	adds	r2, #67	; 0x43
    321e:	3302      	adds	r3, #2
    3220:	7011      	strb	r1, [r2, #0]
    3222:	e7c1      	b.n	31a8 <_printf_common+0x48>
    3224:	0022      	movs	r2, r4
    3226:	2301      	movs	r3, #1
    3228:	321a      	adds	r2, #26
    322a:	9901      	ldr	r1, [sp, #4]
    322c:	9800      	ldr	r0, [sp, #0]
    322e:	9e08      	ldr	r6, [sp, #32]
    3230:	47b0      	blx	r6
    3232:	1c43      	adds	r3, r0, #1
    3234:	d0e6      	beq.n	3204 <_printf_common+0xa4>
    3236:	3701      	adds	r7, #1
    3238:	e7d1      	b.n	31de <_printf_common+0x7e>
	...

0000323c <_printf_i>:
    323c:	b5f0      	push	{r4, r5, r6, r7, lr}
    323e:	b08b      	sub	sp, #44	; 0x2c
    3240:	9206      	str	r2, [sp, #24]
    3242:	000a      	movs	r2, r1
    3244:	3243      	adds	r2, #67	; 0x43
    3246:	9307      	str	r3, [sp, #28]
    3248:	9005      	str	r0, [sp, #20]
    324a:	9204      	str	r2, [sp, #16]
    324c:	7e0a      	ldrb	r2, [r1, #24]
    324e:	000c      	movs	r4, r1
    3250:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3252:	2a6e      	cmp	r2, #110	; 0x6e
    3254:	d100      	bne.n	3258 <_printf_i+0x1c>
    3256:	e08f      	b.n	3378 <_printf_i+0x13c>
    3258:	d817      	bhi.n	328a <_printf_i+0x4e>
    325a:	2a63      	cmp	r2, #99	; 0x63
    325c:	d02c      	beq.n	32b8 <_printf_i+0x7c>
    325e:	d808      	bhi.n	3272 <_printf_i+0x36>
    3260:	2a00      	cmp	r2, #0
    3262:	d100      	bne.n	3266 <_printf_i+0x2a>
    3264:	e099      	b.n	339a <_printf_i+0x15e>
    3266:	2a58      	cmp	r2, #88	; 0x58
    3268:	d054      	beq.n	3314 <_printf_i+0xd8>
    326a:	0026      	movs	r6, r4
    326c:	3642      	adds	r6, #66	; 0x42
    326e:	7032      	strb	r2, [r6, #0]
    3270:	e029      	b.n	32c6 <_printf_i+0x8a>
    3272:	2a64      	cmp	r2, #100	; 0x64
    3274:	d001      	beq.n	327a <_printf_i+0x3e>
    3276:	2a69      	cmp	r2, #105	; 0x69
    3278:	d1f7      	bne.n	326a <_printf_i+0x2e>
    327a:	6821      	ldr	r1, [r4, #0]
    327c:	681a      	ldr	r2, [r3, #0]
    327e:	0608      	lsls	r0, r1, #24
    3280:	d523      	bpl.n	32ca <_printf_i+0x8e>
    3282:	1d11      	adds	r1, r2, #4
    3284:	6019      	str	r1, [r3, #0]
    3286:	6815      	ldr	r5, [r2, #0]
    3288:	e025      	b.n	32d6 <_printf_i+0x9a>
    328a:	2a73      	cmp	r2, #115	; 0x73
    328c:	d100      	bne.n	3290 <_printf_i+0x54>
    328e:	e088      	b.n	33a2 <_printf_i+0x166>
    3290:	d808      	bhi.n	32a4 <_printf_i+0x68>
    3292:	2a6f      	cmp	r2, #111	; 0x6f
    3294:	d029      	beq.n	32ea <_printf_i+0xae>
    3296:	2a70      	cmp	r2, #112	; 0x70
    3298:	d1e7      	bne.n	326a <_printf_i+0x2e>
    329a:	2220      	movs	r2, #32
    329c:	6809      	ldr	r1, [r1, #0]
    329e:	430a      	orrs	r2, r1
    32a0:	6022      	str	r2, [r4, #0]
    32a2:	e003      	b.n	32ac <_printf_i+0x70>
    32a4:	2a75      	cmp	r2, #117	; 0x75
    32a6:	d020      	beq.n	32ea <_printf_i+0xae>
    32a8:	2a78      	cmp	r2, #120	; 0x78
    32aa:	d1de      	bne.n	326a <_printf_i+0x2e>
    32ac:	0022      	movs	r2, r4
    32ae:	2178      	movs	r1, #120	; 0x78
    32b0:	3245      	adds	r2, #69	; 0x45
    32b2:	7011      	strb	r1, [r2, #0]
    32b4:	4a6c      	ldr	r2, [pc, #432]	; (3468 <_printf_i+0x22c>)
    32b6:	e030      	b.n	331a <_printf_i+0xde>
    32b8:	000e      	movs	r6, r1
    32ba:	681a      	ldr	r2, [r3, #0]
    32bc:	3642      	adds	r6, #66	; 0x42
    32be:	1d11      	adds	r1, r2, #4
    32c0:	6019      	str	r1, [r3, #0]
    32c2:	6813      	ldr	r3, [r2, #0]
    32c4:	7033      	strb	r3, [r6, #0]
    32c6:	2301      	movs	r3, #1
    32c8:	e079      	b.n	33be <_printf_i+0x182>
    32ca:	0649      	lsls	r1, r1, #25
    32cc:	d5d9      	bpl.n	3282 <_printf_i+0x46>
    32ce:	1d11      	adds	r1, r2, #4
    32d0:	6019      	str	r1, [r3, #0]
    32d2:	2300      	movs	r3, #0
    32d4:	5ed5      	ldrsh	r5, [r2, r3]
    32d6:	2d00      	cmp	r5, #0
    32d8:	da03      	bge.n	32e2 <_printf_i+0xa6>
    32da:	232d      	movs	r3, #45	; 0x2d
    32dc:	9a04      	ldr	r2, [sp, #16]
    32de:	426d      	negs	r5, r5
    32e0:	7013      	strb	r3, [r2, #0]
    32e2:	4b62      	ldr	r3, [pc, #392]	; (346c <_printf_i+0x230>)
    32e4:	270a      	movs	r7, #10
    32e6:	9303      	str	r3, [sp, #12]
    32e8:	e02f      	b.n	334a <_printf_i+0x10e>
    32ea:	6820      	ldr	r0, [r4, #0]
    32ec:	6819      	ldr	r1, [r3, #0]
    32ee:	0605      	lsls	r5, r0, #24
    32f0:	d503      	bpl.n	32fa <_printf_i+0xbe>
    32f2:	1d08      	adds	r0, r1, #4
    32f4:	6018      	str	r0, [r3, #0]
    32f6:	680d      	ldr	r5, [r1, #0]
    32f8:	e005      	b.n	3306 <_printf_i+0xca>
    32fa:	0640      	lsls	r0, r0, #25
    32fc:	d5f9      	bpl.n	32f2 <_printf_i+0xb6>
    32fe:	680d      	ldr	r5, [r1, #0]
    3300:	1d08      	adds	r0, r1, #4
    3302:	6018      	str	r0, [r3, #0]
    3304:	b2ad      	uxth	r5, r5
    3306:	4b59      	ldr	r3, [pc, #356]	; (346c <_printf_i+0x230>)
    3308:	2708      	movs	r7, #8
    330a:	9303      	str	r3, [sp, #12]
    330c:	2a6f      	cmp	r2, #111	; 0x6f
    330e:	d018      	beq.n	3342 <_printf_i+0x106>
    3310:	270a      	movs	r7, #10
    3312:	e016      	b.n	3342 <_printf_i+0x106>
    3314:	3145      	adds	r1, #69	; 0x45
    3316:	700a      	strb	r2, [r1, #0]
    3318:	4a54      	ldr	r2, [pc, #336]	; (346c <_printf_i+0x230>)
    331a:	9203      	str	r2, [sp, #12]
    331c:	681a      	ldr	r2, [r3, #0]
    331e:	6821      	ldr	r1, [r4, #0]
    3320:	1d10      	adds	r0, r2, #4
    3322:	6018      	str	r0, [r3, #0]
    3324:	6815      	ldr	r5, [r2, #0]
    3326:	0608      	lsls	r0, r1, #24
    3328:	d522      	bpl.n	3370 <_printf_i+0x134>
    332a:	07cb      	lsls	r3, r1, #31
    332c:	d502      	bpl.n	3334 <_printf_i+0xf8>
    332e:	2320      	movs	r3, #32
    3330:	4319      	orrs	r1, r3
    3332:	6021      	str	r1, [r4, #0]
    3334:	2710      	movs	r7, #16
    3336:	2d00      	cmp	r5, #0
    3338:	d103      	bne.n	3342 <_printf_i+0x106>
    333a:	2320      	movs	r3, #32
    333c:	6822      	ldr	r2, [r4, #0]
    333e:	439a      	bics	r2, r3
    3340:	6022      	str	r2, [r4, #0]
    3342:	0023      	movs	r3, r4
    3344:	2200      	movs	r2, #0
    3346:	3343      	adds	r3, #67	; 0x43
    3348:	701a      	strb	r2, [r3, #0]
    334a:	6863      	ldr	r3, [r4, #4]
    334c:	60a3      	str	r3, [r4, #8]
    334e:	2b00      	cmp	r3, #0
    3350:	db5c      	blt.n	340c <_printf_i+0x1d0>
    3352:	2204      	movs	r2, #4
    3354:	6821      	ldr	r1, [r4, #0]
    3356:	4391      	bics	r1, r2
    3358:	6021      	str	r1, [r4, #0]
    335a:	2d00      	cmp	r5, #0
    335c:	d158      	bne.n	3410 <_printf_i+0x1d4>
    335e:	9e04      	ldr	r6, [sp, #16]
    3360:	2b00      	cmp	r3, #0
    3362:	d064      	beq.n	342e <_printf_i+0x1f2>
    3364:	0026      	movs	r6, r4
    3366:	9b03      	ldr	r3, [sp, #12]
    3368:	3642      	adds	r6, #66	; 0x42
    336a:	781b      	ldrb	r3, [r3, #0]
    336c:	7033      	strb	r3, [r6, #0]
    336e:	e05e      	b.n	342e <_printf_i+0x1f2>
    3370:	0648      	lsls	r0, r1, #25
    3372:	d5da      	bpl.n	332a <_printf_i+0xee>
    3374:	b2ad      	uxth	r5, r5
    3376:	e7d8      	b.n	332a <_printf_i+0xee>
    3378:	6809      	ldr	r1, [r1, #0]
    337a:	681a      	ldr	r2, [r3, #0]
    337c:	0608      	lsls	r0, r1, #24
    337e:	d505      	bpl.n	338c <_printf_i+0x150>
    3380:	1d11      	adds	r1, r2, #4
    3382:	6019      	str	r1, [r3, #0]
    3384:	6813      	ldr	r3, [r2, #0]
    3386:	6962      	ldr	r2, [r4, #20]
    3388:	601a      	str	r2, [r3, #0]
    338a:	e006      	b.n	339a <_printf_i+0x15e>
    338c:	0649      	lsls	r1, r1, #25
    338e:	d5f7      	bpl.n	3380 <_printf_i+0x144>
    3390:	1d11      	adds	r1, r2, #4
    3392:	6019      	str	r1, [r3, #0]
    3394:	6813      	ldr	r3, [r2, #0]
    3396:	8aa2      	ldrh	r2, [r4, #20]
    3398:	801a      	strh	r2, [r3, #0]
    339a:	2300      	movs	r3, #0
    339c:	9e04      	ldr	r6, [sp, #16]
    339e:	6123      	str	r3, [r4, #16]
    33a0:	e054      	b.n	344c <_printf_i+0x210>
    33a2:	681a      	ldr	r2, [r3, #0]
    33a4:	1d11      	adds	r1, r2, #4
    33a6:	6019      	str	r1, [r3, #0]
    33a8:	6816      	ldr	r6, [r2, #0]
    33aa:	2100      	movs	r1, #0
    33ac:	6862      	ldr	r2, [r4, #4]
    33ae:	0030      	movs	r0, r6
    33b0:	f000 f870 	bl	3494 <memchr>
    33b4:	2800      	cmp	r0, #0
    33b6:	d001      	beq.n	33bc <_printf_i+0x180>
    33b8:	1b80      	subs	r0, r0, r6
    33ba:	6060      	str	r0, [r4, #4]
    33bc:	6863      	ldr	r3, [r4, #4]
    33be:	6123      	str	r3, [r4, #16]
    33c0:	2300      	movs	r3, #0
    33c2:	9a04      	ldr	r2, [sp, #16]
    33c4:	7013      	strb	r3, [r2, #0]
    33c6:	e041      	b.n	344c <_printf_i+0x210>
    33c8:	6923      	ldr	r3, [r4, #16]
    33ca:	0032      	movs	r2, r6
    33cc:	9906      	ldr	r1, [sp, #24]
    33ce:	9805      	ldr	r0, [sp, #20]
    33d0:	9d07      	ldr	r5, [sp, #28]
    33d2:	47a8      	blx	r5
    33d4:	1c43      	adds	r3, r0, #1
    33d6:	d043      	beq.n	3460 <_printf_i+0x224>
    33d8:	6823      	ldr	r3, [r4, #0]
    33da:	2500      	movs	r5, #0
    33dc:	079b      	lsls	r3, r3, #30
    33de:	d40f      	bmi.n	3400 <_printf_i+0x1c4>
    33e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    33e2:	68e0      	ldr	r0, [r4, #12]
    33e4:	4298      	cmp	r0, r3
    33e6:	da3d      	bge.n	3464 <_printf_i+0x228>
    33e8:	0018      	movs	r0, r3
    33ea:	e03b      	b.n	3464 <_printf_i+0x228>
    33ec:	0022      	movs	r2, r4
    33ee:	2301      	movs	r3, #1
    33f0:	3219      	adds	r2, #25
    33f2:	9906      	ldr	r1, [sp, #24]
    33f4:	9805      	ldr	r0, [sp, #20]
    33f6:	9e07      	ldr	r6, [sp, #28]
    33f8:	47b0      	blx	r6
    33fa:	1c43      	adds	r3, r0, #1
    33fc:	d030      	beq.n	3460 <_printf_i+0x224>
    33fe:	3501      	adds	r5, #1
    3400:	68e3      	ldr	r3, [r4, #12]
    3402:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3404:	1a9b      	subs	r3, r3, r2
    3406:	429d      	cmp	r5, r3
    3408:	dbf0      	blt.n	33ec <_printf_i+0x1b0>
    340a:	e7e9      	b.n	33e0 <_printf_i+0x1a4>
    340c:	2d00      	cmp	r5, #0
    340e:	d0a9      	beq.n	3364 <_printf_i+0x128>
    3410:	9e04      	ldr	r6, [sp, #16]
    3412:	0028      	movs	r0, r5
    3414:	0039      	movs	r1, r7
    3416:	f7ff fc61 	bl	2cdc <__aeabi_uidivmod>
    341a:	9b03      	ldr	r3, [sp, #12]
    341c:	3e01      	subs	r6, #1
    341e:	5c5b      	ldrb	r3, [r3, r1]
    3420:	0028      	movs	r0, r5
    3422:	7033      	strb	r3, [r6, #0]
    3424:	0039      	movs	r1, r7
    3426:	f7ff fbd3 	bl	2bd0 <__udivsi3>
    342a:	1e05      	subs	r5, r0, #0
    342c:	d1f1      	bne.n	3412 <_printf_i+0x1d6>
    342e:	2f08      	cmp	r7, #8
    3430:	d109      	bne.n	3446 <_printf_i+0x20a>
    3432:	6823      	ldr	r3, [r4, #0]
    3434:	07db      	lsls	r3, r3, #31
    3436:	d506      	bpl.n	3446 <_printf_i+0x20a>
    3438:	6863      	ldr	r3, [r4, #4]
    343a:	6922      	ldr	r2, [r4, #16]
    343c:	4293      	cmp	r3, r2
    343e:	dc02      	bgt.n	3446 <_printf_i+0x20a>
    3440:	2330      	movs	r3, #48	; 0x30
    3442:	3e01      	subs	r6, #1
    3444:	7033      	strb	r3, [r6, #0]
    3446:	9b04      	ldr	r3, [sp, #16]
    3448:	1b9b      	subs	r3, r3, r6
    344a:	6123      	str	r3, [r4, #16]
    344c:	9b07      	ldr	r3, [sp, #28]
    344e:	aa09      	add	r2, sp, #36	; 0x24
    3450:	9300      	str	r3, [sp, #0]
    3452:	0021      	movs	r1, r4
    3454:	9b06      	ldr	r3, [sp, #24]
    3456:	9805      	ldr	r0, [sp, #20]
    3458:	f7ff fe82 	bl	3160 <_printf_common>
    345c:	1c43      	adds	r3, r0, #1
    345e:	d1b3      	bne.n	33c8 <_printf_i+0x18c>
    3460:	2001      	movs	r0, #1
    3462:	4240      	negs	r0, r0
    3464:	b00b      	add	sp, #44	; 0x2c
    3466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3468:	0000384e 	.word	0x0000384e
    346c:	0000383d 	.word	0x0000383d

00003470 <_sbrk_r>:
    3470:	2300      	movs	r3, #0
    3472:	b570      	push	{r4, r5, r6, lr}
    3474:	4c06      	ldr	r4, [pc, #24]	; (3490 <_sbrk_r+0x20>)
    3476:	0005      	movs	r5, r0
    3478:	0008      	movs	r0, r1
    347a:	6023      	str	r3, [r4, #0]
    347c:	f7fd f9fa 	bl	874 <_sbrk>
    3480:	1c43      	adds	r3, r0, #1
    3482:	d103      	bne.n	348c <_sbrk_r+0x1c>
    3484:	6823      	ldr	r3, [r4, #0]
    3486:	2b00      	cmp	r3, #0
    3488:	d000      	beq.n	348c <_sbrk_r+0x1c>
    348a:	602b      	str	r3, [r5, #0]
    348c:	bd70      	pop	{r4, r5, r6, pc}
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	20000338 	.word	0x20000338

00003494 <memchr>:
    3494:	b2c9      	uxtb	r1, r1
    3496:	1882      	adds	r2, r0, r2
    3498:	4290      	cmp	r0, r2
    349a:	d101      	bne.n	34a0 <memchr+0xc>
    349c:	2000      	movs	r0, #0
    349e:	4770      	bx	lr
    34a0:	7803      	ldrb	r3, [r0, #0]
    34a2:	428b      	cmp	r3, r1
    34a4:	d0fb      	beq.n	349e <memchr+0xa>
    34a6:	3001      	adds	r0, #1
    34a8:	e7f6      	b.n	3498 <memchr+0x4>

000034aa <memcpy>:
    34aa:	2300      	movs	r3, #0
    34ac:	b510      	push	{r4, lr}
    34ae:	429a      	cmp	r2, r3
    34b0:	d100      	bne.n	34b4 <memcpy+0xa>
    34b2:	bd10      	pop	{r4, pc}
    34b4:	5ccc      	ldrb	r4, [r1, r3]
    34b6:	54c4      	strb	r4, [r0, r3]
    34b8:	3301      	adds	r3, #1
    34ba:	e7f8      	b.n	34ae <memcpy+0x4>

000034bc <memmove>:
    34bc:	b510      	push	{r4, lr}
    34be:	4288      	cmp	r0, r1
    34c0:	d902      	bls.n	34c8 <memmove+0xc>
    34c2:	188b      	adds	r3, r1, r2
    34c4:	4298      	cmp	r0, r3
    34c6:	d308      	bcc.n	34da <memmove+0x1e>
    34c8:	2300      	movs	r3, #0
    34ca:	429a      	cmp	r2, r3
    34cc:	d007      	beq.n	34de <memmove+0x22>
    34ce:	5ccc      	ldrb	r4, [r1, r3]
    34d0:	54c4      	strb	r4, [r0, r3]
    34d2:	3301      	adds	r3, #1
    34d4:	e7f9      	b.n	34ca <memmove+0xe>
    34d6:	5c8b      	ldrb	r3, [r1, r2]
    34d8:	5483      	strb	r3, [r0, r2]
    34da:	3a01      	subs	r2, #1
    34dc:	d2fb      	bcs.n	34d6 <memmove+0x1a>
    34de:	bd10      	pop	{r4, pc}

000034e0 <__malloc_lock>:
    34e0:	4770      	bx	lr

000034e2 <__malloc_unlock>:
    34e2:	4770      	bx	lr

000034e4 <_free_r>:
    34e4:	b570      	push	{r4, r5, r6, lr}
    34e6:	0005      	movs	r5, r0
    34e8:	2900      	cmp	r1, #0
    34ea:	d010      	beq.n	350e <_free_r+0x2a>
    34ec:	1f0c      	subs	r4, r1, #4
    34ee:	6823      	ldr	r3, [r4, #0]
    34f0:	2b00      	cmp	r3, #0
    34f2:	da00      	bge.n	34f6 <_free_r+0x12>
    34f4:	18e4      	adds	r4, r4, r3
    34f6:	0028      	movs	r0, r5
    34f8:	f7ff fff2 	bl	34e0 <__malloc_lock>
    34fc:	4a1d      	ldr	r2, [pc, #116]	; (3574 <_free_r+0x90>)
    34fe:	6813      	ldr	r3, [r2, #0]
    3500:	2b00      	cmp	r3, #0
    3502:	d105      	bne.n	3510 <_free_r+0x2c>
    3504:	6063      	str	r3, [r4, #4]
    3506:	6014      	str	r4, [r2, #0]
    3508:	0028      	movs	r0, r5
    350a:	f7ff ffea 	bl	34e2 <__malloc_unlock>
    350e:	bd70      	pop	{r4, r5, r6, pc}
    3510:	42a3      	cmp	r3, r4
    3512:	d909      	bls.n	3528 <_free_r+0x44>
    3514:	6821      	ldr	r1, [r4, #0]
    3516:	1860      	adds	r0, r4, r1
    3518:	4283      	cmp	r3, r0
    351a:	d1f3      	bne.n	3504 <_free_r+0x20>
    351c:	6818      	ldr	r0, [r3, #0]
    351e:	685b      	ldr	r3, [r3, #4]
    3520:	1841      	adds	r1, r0, r1
    3522:	6021      	str	r1, [r4, #0]
    3524:	e7ee      	b.n	3504 <_free_r+0x20>
    3526:	0013      	movs	r3, r2
    3528:	685a      	ldr	r2, [r3, #4]
    352a:	2a00      	cmp	r2, #0
    352c:	d001      	beq.n	3532 <_free_r+0x4e>
    352e:	42a2      	cmp	r2, r4
    3530:	d9f9      	bls.n	3526 <_free_r+0x42>
    3532:	6819      	ldr	r1, [r3, #0]
    3534:	1858      	adds	r0, r3, r1
    3536:	42a0      	cmp	r0, r4
    3538:	d10b      	bne.n	3552 <_free_r+0x6e>
    353a:	6820      	ldr	r0, [r4, #0]
    353c:	1809      	adds	r1, r1, r0
    353e:	1858      	adds	r0, r3, r1
    3540:	6019      	str	r1, [r3, #0]
    3542:	4282      	cmp	r2, r0
    3544:	d1e0      	bne.n	3508 <_free_r+0x24>
    3546:	6810      	ldr	r0, [r2, #0]
    3548:	6852      	ldr	r2, [r2, #4]
    354a:	1841      	adds	r1, r0, r1
    354c:	6019      	str	r1, [r3, #0]
    354e:	605a      	str	r2, [r3, #4]
    3550:	e7da      	b.n	3508 <_free_r+0x24>
    3552:	42a0      	cmp	r0, r4
    3554:	d902      	bls.n	355c <_free_r+0x78>
    3556:	230c      	movs	r3, #12
    3558:	602b      	str	r3, [r5, #0]
    355a:	e7d5      	b.n	3508 <_free_r+0x24>
    355c:	6821      	ldr	r1, [r4, #0]
    355e:	1860      	adds	r0, r4, r1
    3560:	4282      	cmp	r2, r0
    3562:	d103      	bne.n	356c <_free_r+0x88>
    3564:	6810      	ldr	r0, [r2, #0]
    3566:	6852      	ldr	r2, [r2, #4]
    3568:	1841      	adds	r1, r0, r1
    356a:	6021      	str	r1, [r4, #0]
    356c:	6062      	str	r2, [r4, #4]
    356e:	605c      	str	r4, [r3, #4]
    3570:	e7ca      	b.n	3508 <_free_r+0x24>
    3572:	46c0      	nop			; (mov r8, r8)
    3574:	2000012c 	.word	0x2000012c

00003578 <_realloc_r>:
    3578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    357a:	0007      	movs	r7, r0
    357c:	000d      	movs	r5, r1
    357e:	0016      	movs	r6, r2
    3580:	2900      	cmp	r1, #0
    3582:	d105      	bne.n	3590 <_realloc_r+0x18>
    3584:	0011      	movs	r1, r2
    3586:	f7ff fc27 	bl	2dd8 <_malloc_r>
    358a:	0004      	movs	r4, r0
    358c:	0020      	movs	r0, r4
    358e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3590:	2a00      	cmp	r2, #0
    3592:	d103      	bne.n	359c <_realloc_r+0x24>
    3594:	f7ff ffa6 	bl	34e4 <_free_r>
    3598:	0034      	movs	r4, r6
    359a:	e7f7      	b.n	358c <_realloc_r+0x14>
    359c:	f000 f812 	bl	35c4 <_malloc_usable_size_r>
    35a0:	002c      	movs	r4, r5
    35a2:	4286      	cmp	r6, r0
    35a4:	d9f2      	bls.n	358c <_realloc_r+0x14>
    35a6:	0031      	movs	r1, r6
    35a8:	0038      	movs	r0, r7
    35aa:	f7ff fc15 	bl	2dd8 <_malloc_r>
    35ae:	1e04      	subs	r4, r0, #0
    35b0:	d0ec      	beq.n	358c <_realloc_r+0x14>
    35b2:	0029      	movs	r1, r5
    35b4:	0032      	movs	r2, r6
    35b6:	f7ff ff78 	bl	34aa <memcpy>
    35ba:	0029      	movs	r1, r5
    35bc:	0038      	movs	r0, r7
    35be:	f7ff ff91 	bl	34e4 <_free_r>
    35c2:	e7e3      	b.n	358c <_realloc_r+0x14>

000035c4 <_malloc_usable_size_r>:
    35c4:	1f0b      	subs	r3, r1, #4
    35c6:	681b      	ldr	r3, [r3, #0]
    35c8:	1f18      	subs	r0, r3, #4
    35ca:	2b00      	cmp	r3, #0
    35cc:	da01      	bge.n	35d2 <_malloc_usable_size_r+0xe>
    35ce:	580b      	ldr	r3, [r1, r0]
    35d0:	18c0      	adds	r0, r0, r3
    35d2:	4770      	bx	lr
    35d4:	682f2e2e 	.word	0x682f2e2e
    35d8:	732f6c61 	.word	0x732f6c61
    35dc:	682f6372 	.word	0x682f6372
    35e0:	615f6c61 	.word	0x615f6c61
    35e4:	735f6364 	.word	0x735f6364
    35e8:	2e636e79 	.word	0x2e636e79
    35ec:	00000063 	.word	0x00000063
    35f0:	682f2e2e 	.word	0x682f2e2e
    35f4:	732f6c61 	.word	0x732f6c61
    35f8:	682f6372 	.word	0x682f6372
    35fc:	695f6c61 	.word	0x695f6c61
    3600:	6d5f6332 	.word	0x6d5f6332
    3604:	6e79735f 	.word	0x6e79735f
    3608:	00632e63 	.word	0x00632e63
    360c:	682f2e2e 	.word	0x682f2e2e
    3610:	732f6c61 	.word	0x732f6c61
    3614:	682f6372 	.word	0x682f6372
    3618:	695f6c61 	.word	0x695f6c61
    361c:	00632e6f 	.word	0x00632e6f
    3620:	682f2e2e 	.word	0x682f2e2e
    3624:	732f6c61 	.word	0x732f6c61
    3628:	682f6372 	.word	0x682f6372
    362c:	705f6c61 	.word	0x705f6c61
    3630:	632e6d77 	.word	0x632e6d77
    3634:	00000000 	.word	0x00000000
    3638:	682f2e2e 	.word	0x682f2e2e
    363c:	732f6c61 	.word	0x732f6c61
    3640:	682f6372 	.word	0x682f6372
    3644:	735f6c61 	.word	0x735f6c61
    3648:	6d5f6970 	.word	0x6d5f6970
    364c:	6e79735f 	.word	0x6e79735f
    3650:	00632e63 	.word	0x00632e63
    3654:	682f2e2e 	.word	0x682f2e2e
    3658:	732f6c61 	.word	0x732f6c61
    365c:	682f6372 	.word	0x682f6372
    3660:	755f6c61 	.word	0x755f6c61
    3664:	74726173 	.word	0x74726173
    3668:	6e79735f 	.word	0x6e79735f
    366c:	00632e63 	.word	0x00632e63

00003670 <_adcs>:
    3670:	00000200 00000000 00000000 00000000     ................
	...
    368c:	682f2e2e 612f6c70 682f6364 615f6c70     ../hpl/adc/hpl_a
    369c:	632e6364 00000000                       dc.c....

000036a4 <_map>:
    36a4:	00000008 00000028 682f2e2e 652f6c70     ....(...../hpl/e
    36b4:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000036c4 <_usarts>:
    36c4:	00000004 40010004 00030000 0000ff2e     .......@........

000036d4 <_i2cms>:
    36d4:	00000002 00200014 00000100 000000ea     ...... .........
    36e4:	000000d7 02dc6c00                       .....l..

000036ec <_i2css>:
	...

000036fc <sercomspi_regs>:
    36fc:	0020000c 00020000 00000000 000000fe     .. .............
    370c:	0020000c 00020000 00000000 030000fe     .. .............
    371c:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    372c:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    373c:	742f6c70 70682f63 63745f6c 0000632e     pl/tc/hpl_tc.c..
    374c:	00002736 0000273e 0000275c 00002752     6'..>'..\'..R'..
    375c:	00002766 00002770 0000277a 00002792     f'..p'..z'...'..
    376c:	000027b0 000027d2 000027da 000027e4     .'...'...'...'..
    377c:	00002816 000027ee 000027f6 00002806     .(...'...'...(..
    378c:	000029b4 000029be 000029c8 000029d0     .)...)...)...)..
    379c:	000029da 000029e4 57537049 6425203d     .)...)..IpSW= %d
    37ac:	6425203b 64256425 00000d0a 6e7a6957     ; %d%d%d....Wizn
    37bc:	53207465 20737961 0a216948 0000000d     et Says Hi!.....

000037cc <__sf_fake_stderr>:
	...

000037ec <__sf_fake_stdin>:
	...

0000380c <__sf_fake_stdout>:
	...
    382c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    383c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    384c:	31300046 35343332 39383736 64636261     F.0123456789abcd
    385c:	00006665                                ef..

00003860 <_init>:
    3860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3862:	46c0      	nop			; (mov r8, r8)
    3864:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3866:	bc08      	pop	{r3}
    3868:	469e      	mov	lr, r3
    386a:	4770      	bx	lr

0000386c <__init_array_start>:
    386c:	000000cd 	.word	0x000000cd

00003870 <_fini>:
    3870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3876:	bc08      	pop	{r3}
    3878:	469e      	mov	lr, r3
    387a:	4770      	bx	lr

0000387c <__fini_array_start>:
    387c:	000000a5 	.word	0x000000a5
